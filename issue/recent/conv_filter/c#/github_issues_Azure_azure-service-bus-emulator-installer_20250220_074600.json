[
  {
    "number": 52,
    "title": "Schema Creation Fails When Using mssql/server:2022-Latest",
    "created_at": "2024-12-10T11:25:25Z",
    "closed_at": "2024-12-11T11:01:27Z",
    "labels": [],
    "url": "https://github.com/Azure/azure-service-bus-emulator-installer/issues/52",
    "body": "**Describe the bug**\nAs `azure-sql-edge:latest` apparently has compatibility issues with Linux Kernels >= 6.7 I tried to use `mssql/server:2022-latest` as the storage back-end instead. But schema creation fails with MSSQLServer as the storage backend with an exception:\n\n> Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'id'\n\nwhile attempting to create the following stored proc:\n\n```sql\ncreate procedure [dbo].[GetEndpointDescriptionById]\n    @includeChildren bit,\n    @id bigint\nas\nbegin\n    set nocount on\n    set transaction isolation level read committed\n    set xact_abort on\n\n    declare @result int\n\n    if (@includeChildren = 0)\n    begin\n        set @result = 0\n        select @result as 'result'\n\n        select top 1 [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\n        from ResourceManifests\n        where [ParentId] is null and [Id] = @id\n\n        select [ResourceManifestId], [EndPartitionRange], [FragmentName], [ContainerId], [PartitionId], [FragmentIndex]\n        from [EntityPartitionRangeMappingTable] \n        where [ResourceManifestId] = @id\n\n        select [ResourceManifestId], [EndPartitionRange], [FragmentName], [ContainerId], [ContainerPartitionId]\n        from [SubscriptionPartitioningRangeMappingTable]\n        where [ResourceManifestId] = @id\n    end\n    else\n    begin\n        set @result = 0\n        select @result as 'result'\n\n        if (@@rowcount > 0)\n        begin\n            select [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\n            from ResourceManifests\n            where [State] in ('Active', 'Restoring') and [Expiration] >= getutcdate() and [id] = @id and [ParentId] is null\n            order by [Address]\n            \n            select [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\n            from ResourceManifests ed\n            where [ed].[ParentId] in (\n                select [Id]\n                from ResourceManifests\n                where [State] in ('Active', 'Restoring') and [Expiration] >= getutcdate() and [id] = @id and [ParentId] is null\n            )\n        end\n    end\nend\n```\n\n\n**To Reproduce**\nRun `docker compose up` with this compose file:\n\n```yaml\nservices:\n  mssqlHost:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    container_name: mssql\n    environment:\n      - TZ=Europe/Zurich\n      - ACCEPT_EULA=Y\n      - MSSQL_SA_PASSWORD=xxxxx\n      - MSSQL_COLLATION=Latin1_General_100_CS_AS_SC_UTF8\n      - MSSQL_DB_NAME=some_db\n      - MSSQL_DB_USER=sa\n    ports:\n      - \"${MSSQL_SERVER_PORT:-1433}:1433\"\n    networks:\n      - test_net\n    healthcheck:\n      test: /opt/mssql-tools18/bin/sqlcmd -C -U \"$$MSSQL_DB_USER\" -P \"$$MSSQL_SA_PASSWORD\" -Q 'select 1' -b -o /dev/null\n      interval: 5s\n      retries: 5\n      start_period: 10s\n      timeout: 10s\n\n  serviceBusEmulator:\n    depends_on:\n      mssqlHost:\n        condition: service_healthy\n    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest\n    container_name: servicebus-emulator\n    volumes:\n      - \"./servicebus-emulator/config.json:/ServiceBus_Emulator/ConfigFiles/Config.json\"\n    ports:\n      - \"${ESB_SERVER_PORT:-5672}:5672\"\n    environment:\n      - TZ=Europe/Zurich\n      - ACCEPT_EULA=Y\n      - MSSQL_SA_PASSWORD=xxxx\n      - SQL_SERVER=mssqlHost\n    networks:\n      - test_net\n```\n\n**Expected behavior**\nSchema should be created without errors.\n\n**Logs**\n```text\ncdr-api-servicebus-emulator  | [11:21:59 WRN] <Trc Id=\"30510\" Ch=\"Debug\" Lvl=\"Warning\" Kw=\"1000000000000100\" UTC=\"2024-12-10T10:21:59.161Z\" Msg=\"Encountered a SQL Error Code that we do not retry for: error number = 207, error state = 1, error class = 16, error message = Invalid column name &amp;apos;id&amp;apos;., procedure = GetEndpointDescriptionById, line number = 39&#xA;error number = 207, error state = 1, error class = 16, error message = Invalid column name &amp;apos;id&amp;apos;., procedure = GetEndpointDescriptionById, line number = 47&#xA;ExceptionId: 1138f1ac-7e38-4f9e-a693-da4099c027d3-Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name &amp;apos;id&amp;apos;.&#xA;Invalid column name &amp;apos;id&amp;apos;.&#xA;   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)&#xA;   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)&#xA;   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, SqlCommand command, Boolean callerHasConnectionLock, Boolean asyncClose)&#xA;   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean&amp;amp; dataReady)&#xA;   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)&#xA;   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean&amp;amp; usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)&#xA;   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()&#xA;   at a.F.aFN.A.A(SqlCommand)&#xA;   at a.F.aFN.A[T](Func`2)&#xA;ClientConnectionId:1a477b4d-771f-4d09-bbd9-88419759e734&#xA;Error Number:207,State:1,Class:16&#xA;\" />\ncdr-api-servicebus-emulator  | info: SQL-Setup[0]\ncdr-api-servicebus-emulator  |       Error: Sql operation failed... Command: ''\ncdr-api-servicebus-emulator  |       create procedure [dbo].[GetEndpointDescriptionById]\ncdr-api-servicebus-emulator  |           @includeChildren bit,\ncdr-api-servicebus-emulator  |           @id bigint\ncdr-api-servicebus-emulator  |       as\ncdr-api-servicebus-emulator  |       begin\ncdr-api-servicebus-emulator  |           set nocount on\ncdr-api-servicebus-emulator  |           set transaction isolation level read committed\ncdr-api-servicebus-emulator  |           set xact_abort on\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |           declare @result int\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |           if (@includeChildren = 0)\ncdr-api-servicebus-emulator  |           begin\ncdr-api-servicebus-emulator  |               set @result = 0\ncdr-api-servicebus-emulator  |               select @result as 'result'\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |               select top 1 [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\ncdr-api-servicebus-emulator  |               from ResourceManifests\ncdr-api-servicebus-emulator  |               where [ParentId] is null and [Id] = @id\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |               select [ResourceManifestId], [EndPartitionRange], [FragmentName], [ContainerId], [PartitionId], [FragmentIndex]\ncdr-api-servicebus-emulator  |               from [EntityPartitionRangeMappingTable] \ncdr-api-servicebus-emulator  |               where [ResourceManifestId] = @id\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |               select [ResourceManifestId], [EndPartitionRange], [FragmentName], [ContainerId], [ContainerPartitionId]\ncdr-api-servicebus-emulator  |               from [SubscriptionPartitioningRangeMappingTable]\ncdr-api-servicebus-emulator  |               where [ResourceManifestId] = @id\ncdr-api-servicebus-emulator  |           end\ncdr-api-servicebus-emulator  |           else\ncdr-api-servicebus-emulator  |           begin\ncdr-api-servicebus-emulator  |               set @result = 0\ncdr-api-servicebus-emulator  |               select @result as 'result'\ncdr-api-servicebus-emulator  |       \ncdr-api-servicebus-emulator  |               if (@@rowcount > 0)\ncdr-api-servicebus-emulator  |               begin\ncdr-api-servicebus-emulator  |                   select [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\ncdr-api-servicebus-emulator  |                   from ResourceManifests\ncdr-api-servicebus-emulator  |                   where [State] in ('Active', 'Restoring') and [Expiration] >= getutcdate() and [id] = @id and [ParentId] is null\ncdr-api-servicebus-emulator  |                   order by [Address]\ncdr-api-servicebus-emulator  |                   \ncdr-api-servicebus-emulator  |                   select [ServiceNamespace], [Address], [ResourceType], [State], [InstanceHandle], [GatewaySettings], [Version], [Id], [ParentId], [IsAnonymousAccessible], [ResourceDescription], [Expiration], [Created], [LastModified], [CreationVersion]\ncdr-api-servicebus-emulator  |                   from ResourceManifests ed\ncdr-api-servicebus-emulator  |                   where [ed].[ParentId] in (\ncdr-api-servicebus-emulator  |                       select [Id]\ncdr-api-servicebus-emulator  |                       from ResourceManifests\ncdr-api-servicebus-emulator  |                       where [State] in ('Active', 'Restoring') and [Expiration] >= getutcdate() and [id] = @id and [ParentId] is null\ncdr-api-servicebus-emulator  |                   )\ncdr-api-servicebus-emulator  |               end\ncdr-api-servicebus-emulator  |           end\ncdr-api-servicebus-emulator  |       end\ncdr-api-servicebus-emulator  |       ''. Exception: ''Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'id'.\ncdr-api-servicebus-emulator  |       Invalid column name 'id'.\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, SqlCommand command, Boolean callerHasConnectionLock, Boolean asyncClose)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()\ncdr-api-servicebus-emulator  |          at a.F.aFN.A.A(SqlCommand)\ncdr-api-servicebus-emulator  |          at a.F.aFN.A[T](Func`2)\ncdr-api-servicebus-emulator  |       ClientConnectionId:1a477b4d-771f-4d09-bbd9-88419759e734\ncdr-api-servicebus-emulator  |       Error Number:207,State:1,Class:16''\ncdr-api-servicebus-emulator  | fail: a.F.aFO[0]\ncdr-api-servicebus-emulator  |       Error occured while running emulator launcher: Invalid column name 'id'.\ncdr-api-servicebus-emulator  |       Invalid column name 'id'.\ncdr-api-servicebus-emulator  |       Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'id'.\ncdr-api-servicebus-emulator  |       Invalid column name 'id'.\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, SqlCommand command, Boolean callerHasConnectionLock, Boolean asyncClose)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)\ncdr-api-servicebus-emulator  |          at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()\ncdr-api-servicebus-emulator  |          at a.F.aFN.A.A(SqlCommand)\ncdr-api-servicebus-emulator  |          at a.F.aFN.A[T](Func`2)\ncdr-api-servicebus-emulator  |          at a.F.aFN.E()\ncdr-api-servicebus-emulator  |          at a.F.aFL.A(String[], String)\ncdr-api-servicebus-emulator  |          at a.F.aFL.a(DatabaseType, DatabaseAction)\ncdr-api-servicebus-emulator  |          at a.F.aFL.A(DatabaseType, DatabaseAction)\ncdr-api-servicebus-emulator  |          at a.F.aFU.A()\ncdr-api-servicebus-emulator  |          at a.F.aFO.StartAsync(CancellationToken)\ncdr-api-servicebus-emulator  |       ClientConnectionId:1a477b4d-771f-4d09-bbd9-88419759e734\ncdr-api-servicebus-emulator  |       Error Number:207,State:1,Class:16\n```\n\n\n**Desktop:**\n - OS: Ubuntu 24.04, Kernel 6.8.0-49-generic\n\n**Image Platform-Architecture Used:**\nLinux-amd64\n\n\n**Docker Version:**\n```text\nClient: Docker Engine - Community\n Version:           26.1.4\n API version:       1.45\n Go version:        go1.21.11\n Git commit:        5650f9b\n Built:             Wed Jun  5 11:28:55 2024\n OS/Arch:           linux/amd64\n Context:           default\n\nServer: Docker Engine - Community\n Engine:\n  Version:          26.1.4\n  API version:      1.45 (minimum version 1.24)\n  Go version:       go1.21.11\n  Git commit:       de5c9cf\n  Built:            Wed Jun  5 11:28:55 2024\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.6.33\n  GitCommit:        d2d58213f83a351ca8f528a95fbd145f5654e957\n runc:\n  Version:          1.1.12\n  GitCommit:        v1.1.12-0-g51d5e94\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n```\n\n**Arguments && Environment variables to start Emulator:**\n  - TZ=Europe/Zurich\n  - ACCEPT_EULA=Y\n  - MSSQL_SA_PASSWORD=xxxx\n  - SQL_SERVER=mssqlHost\n\n**Emulator Launch Configuration:**\n- Include the `Config.json` file used for launching the emulator. Below is a sample of the current checked-in `Config.json`:\n\n```json\n{\n  \"UserConfig\": {\n    \"Namespaces\": [\n      {\n        \"Name\": \"sbemulatorns\",\n        \"Queues\": [],\n        \"Topics\": [\n          {\n            \"Name\": \"documentdispatchedcdrtopic\",\n            \"Properties\": {\n              \"DefaultMessageTimeToLive\": \"PT1H\",\n              \"DuplicateDetectionHistoryTimeWindow\": \"PT20S\",\n              \"RequiresDuplicateDetection\": false\n            },\n            \"Subscriptions\": [\n              {\n                \"Name\": \"subscription.1\",\n                \"Properties\": {\n                  \"DeadLetteringOnMessageExpiration\": false,\n                  \"DefaultMessageTimeToLive\": \"PT1H\",\n                  \"LockDuration\": \"PT1M\",\n                  \"MaxDeliveryCount\": 10,\n                  \"ForwardDeadLetteredMessagesTo\": \"\",\n                  \"ForwardTo\": \"\",\n                  \"RequiresSession\": false\n                },\n                \"Rules\": []\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"Logging\": {\n      \"Type\": \"Console\"\n    }\n  }\n}\n```\n\n**Emulator Launch Method:**\nDirect Docker compose\n\n",
    "comments_url": "https://api.github.com/repos/Azure/azure-service-bus-emulator-installer/issues/52/comments",
    "author": "rsteppac",
    "comments": [
      {
        "user": "krishankumar95",
        "created_at": "2024-12-10T17:22:58Z",
        "body": "@rsteppac ; Dropping the following section and letting SQL Server use its default collation should resolve the issue. \n\n```\n    - MSSQL_COLLATION=Latin1_General_100_CS_AS_SC_UTF8\n```\n\nIf you are sharing the SQL container with some other application and need a specific collation; you can spin up emulator specific SQL container on a different port and pass that along to the Emulator."
      },
      {
        "user": "rsteppac",
        "created_at": "2024-12-11T11:01:27Z",
        "body": "@krishankumar95 , using an instance with default collation worked.\n\n"
      }
    ]
  }
]