[
  {
    "id": "https://github.com/jbikker/tinybvh/issues/116",
    "source": {
      "issue_number": 116
    },
    "initial_question": {
      "title": "A question for usage in multiple-bounce raytracing",
      "body": "Hello Jacco,\n\nI am using tinybvh for raytracing meshes that represent the surface of a fluid. It works very well (and it is 5x to 10x faster than my naive AABB !)\n\nIn my usage case, there might be multiple bounces and refractions. So I have a question:\n \n- is it possible to ignore a specific primitive in the traversal ? For instance, when I raytrace my surface, each time I encounter an intersection with a facet (say f), I am launching a refracted ray, and I would like to ignore the intersections with f when intersecting this refracted ray with the mesh (for now I am moving the origin of the ray slightly along the facet's normal and it works, but it is not super elegant). Same thing for computing shadow rays.\n\nBest,\n-- Bruno\n"
    },
    "satisfaction_conditions": [
      "Ray-surface self-intersections must be prevented at the point of origin",
      "Solution must handle shared edges between primitives correctly",
      "Numerical precision must be maintained relative to scene scale",
      "Solution must handle grazing ray angles correctly"
    ],
    "created_at": "2025-02-14T12:38:07Z"
  },
  {
    "id": "https://github.com/jbikker/tinybvh/issues/67",
    "source": {
      "issue_number": 67
    },
    "initial_question": {
      "title": "Crashes with CWBVH usage",
      "body": "When I build a CWBVH it crashes because allocatedBlocks is uninitialized so its value can be greater than spaceNeeded and no allocation of bvh8Data/bvh8Tris occurs. \r\n\r\nSecond problem is when I create a BVH8 and then build a CWBVH by using ConvertFrom when I go to free them, freeing both results in a crash. At first glance it looks like this is because the copy of BVH8 is not a deep copy so its two structs holding the same pointer to bvh8Node and then it gets freed twice when bvh8 is destructed."
    },
    "satisfaction_conditions": [
      "allocatedBlocks variable must be properly initialized before use",
      "Memory allocation for bvh8Data and bvh8Tris must occur when required",
      "No double-free of memory when deallocating BVH8 and CWBVH structures",
      "Clear ownership tracking of BVH data structures",
      "Proper data format conversion when converting between BVH types"
    ],
    "created_at": "2024-12-17T20:39:12Z"
  },
  {
    "id": "https://github.com/jbikker/tinybvh/issues/66",
    "source": {
      "issue_number": 66
    },
    "initial_question": {
      "title": "Using custom allocation functions broke with the API rework",
      "body": "Thanks a lot for this great piece of software - After the last version I unfortunately have a crash because the library doesn't use the provided context to override the allocations functions anymore.\r\n\r\n~~~\r\ntinybvh::BVH4_CPU blas;\r\nblas.context = myContext;\r\nblas.Build( vertices, triangleCount );\r\n~~~\r\n\r\nThis internally will create more temporary Bvh structures which use the default memory context. Either the context needs to be copied, or maybe change the api to always pass the context into functions that require memory operations. \r\n\r\nI fixed it for my by setting the context member of both BVH structs on the way."
    },
    "satisfaction_conditions": [
      "Custom memory allocator context must be properly propagated to all internal BVH structures",
      "Custom allocator settings must persist across intermediate format conversions"
    ],
    "created_at": "2024-12-17T18:33:14Z"
  },
  {
    "id": "https://github.com/jbikker/tinybvh/issues/36",
    "source": {
      "issue_number": 36
    },
    "initial_question": {
      "title": "Q: Recommended BVH node layout/",
      "body": "What is the recommended BVH node layout for BLAS and TLAS levels?\r\n\r\nWhat are the guidelines?"
    },
    "satisfaction_conditions": [
      "BVH node layout must be optimized differently for CPU and GPU implementations",
      "Layout choice must balance between traversal performance and conversion overhead",
      "TLAS (Top Level Acceleration Structure) layout must prioritize build speed over traversal performance",
      "Layout selection must account for ray coherency patterns",
      "Layout must be compatible with the specific use case's ray volume"
    ],
    "created_at": "2024-12-04T12:35:49Z"
  }
]