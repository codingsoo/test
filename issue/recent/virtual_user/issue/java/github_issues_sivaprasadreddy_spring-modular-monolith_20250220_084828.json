[
  {
    "number": 32,
    "title": "Query about RabbitMQ implementation",
    "created_at": "2025-01-09T03:49:18Z",
    "closed_at": "2025-01-22T19:38:49Z",
    "labels": [],
    "url": "https://github.com/sivaprasadreddy/spring-modular-monolith/issues/32",
    "body": "I see RabbitMQ configuration done in the code but i don\u2019t is where it is used in the code . Could you explain how can we use RabbitMQ in spring modulith through the Externalized annotation approach.",
    "comments_url": "https://api.github.com/repos/sivaprasadreddy/spring-modular-monolith/issues/32/comments",
    "author": "solanki-paras19",
    "comments": [
      {
        "user": "sivaprasadreddy",
        "created_at": "2025-01-10T11:26:55Z",
        "body": "In Spring Modulith applications when we publish events using `ApplicationEventPublisher` and consume those events using `@ApplicationModuleListener` methods which typically happens in-memory, but can be persisted in DB as I did in this repository.\r\n\r\nIn addition to consuming from our own application, we may also publish those events to an external message broker like RabbiTMQ or Kafka, so that other applications can consume and take appropriate action.\r\n\r\nIn this application, I would like to publish `OrderCreatedEvent` to an external RabbitMQ broker as well. So, I have configured the following:\r\n* Added `spring-modulith-events-amqp` dependency so that Modulith events can be published to RabbitMQ.\r\n* In order to publish events to RabbitMQ, we need to configure RabbitMQ connection properties in our Spring Boot application and also configured Exchange, Topic and Queue in `RabbitMQConfig.java`.\r\n* `OrderCreatedEvent` is annotated with `@Externalized(\"BookStoreExchange::orders.new\")` which means when these events are published they are also going to send to RabbitMQ's BookStoreExchange with RoutingKey `orders.new` which internally forward those messages to `new-orders` queue.\r\n\r\nI hope it clarifies."
      }
    ]
  }
]