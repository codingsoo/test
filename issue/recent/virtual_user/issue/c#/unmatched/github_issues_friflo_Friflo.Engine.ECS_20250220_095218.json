[
  {
    "number": 36,
    "title": "Problem with Parallel Query Job",
    "created_at": "2024-11-28T18:57:04Z",
    "closed_at": "2024-11-28T19:50:34Z",
    "labels": [],
    "url": "https://github.com/friflo/Friflo.Engine.ECS/issues/36",
    "body": "```\r\nusing Friflo.Engine.ECS;\r\nusing Friflo.Engine.ECS.Systems;\r\n\r\nnamespace TestECS;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        ParallelJobRunner jobRunner = new ParallelJobRunner(Environment.ProcessorCount);\r\n        EntityStore world = new EntityStore { JobRunner = jobRunner };\r\n        SystemRoot systemRoot = new SystemRoot(world) { new TestSystem() };\r\n\r\n        var archetype = world.GetArchetype(ComponentTypes.Get<Position>());\r\n        archetype.CreateEntities(7993);\r\n\r\n        systemRoot.Update(default);\r\n        Thread.Sleep(2000);\r\n        systemRoot.Update(default);\r\n        \r\n        Console.ReadKey();\r\n    }\r\n}\r\n\r\npublic class TestSystem : QuerySystem<Position>\r\n{\r\n    protected override void OnUpdate()\r\n    {\r\n        var queryJob = Query.ForEach((myComponents, entities) =>\r\n        {\r\n            for (int n = 0; n < entities.Length; n++)\r\n            {\r\n                myComponents[n].x += 10f;\r\n            }\r\n        });\r\n        queryJob.RunParallel();\r\n        Query.Store.JobRunner.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nThe second call to `systemRoot.Update(default);` causes an error if I have 7993+ entities.\r\nIt doesn't matter if I use TestSystem or implement `var queryJob` in `static void Main(string[] args)`!\r\n\r\nMaybe I'm missing something?\r\n\r\n```\r\nUnhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'ParallelJobRunner'.\r\n   at Friflo.Engine.ECS.ParallelJobRunner.ExecuteJob(Object job, JobTask[] tasks)\r\n   at Friflo.Engine.ECS.QueryJob`1.RunParallel()\r\n   at TestECS.TestSystem.OnUpdate() in C:\\projects\\TestECS\\TestECS\\Program.cs:line 36\r\n   at Friflo.Engine.ECS.Systems.QuerySystemBase.OnUpdateGroup()\r\n   at Friflo.Engine.ECS.Systems.SystemGroup.OnUpdateGroup()\r\n   at Friflo.Engine.ECS.Systems.SystemGroup.Update(UpdateTick tick)\r\n   at TestECS.Program.Main(String[] args) in C:\\projects\\TestECS\\TestECS\\Program.cs:line 19\r\n```",
    "comments_url": "https://api.github.com/repos/friflo/Friflo.Engine.ECS/issues/36/comments",
    "author": "zerosar",
    "comments": [
      {
        "user": "friflo",
        "created_at": "2024-11-28T19:45:24Z",
        "body": "A `JobRunner` contains a set of worker threads.\r\nThese threads are utilized when calling `RunParallel()`.\r\nWhen `RunParallel()` finishes these threads are idle and will be used again for the next `RunParallel()` cycle.\r\n\r\n*Reason:* Reusing threads bring a significant performance boost because thread creation and disposing has a very high performance penalty.\r\n\r\nSo the usage pattern of a single `JobRunner` is\r\n- Create a `JobRunner` when the applications starts.\r\n- Dispose the `JobRunner` before the applications finishes.\r\n\r\nModified your code without testing.\r\n\r\n```cs\r\nusing Friflo.Engine.ECS;\r\nusing Friflo.Engine.ECS.Systems;\r\n\r\nnamespace TestECS;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        ParallelJobRunner jobRunner = new ParallelJobRunner(Environment.ProcessorCount);\r\n        EntityStore world = new EntityStore { JobRunner = jobRunner };\r\n        SystemRoot systemRoot = new SystemRoot(world) { new TestSystem() };\r\n\r\n        var archetype = world.GetArchetype(ComponentTypes.Get<Position>());\r\n        archetype.CreateEntities(7993);\r\n\r\n        systemRoot.Update(default);\r\n        Thread.Sleep(2000);\r\n        systemRoot.Update(default);\r\n        jobRunner.Dispose(); // jobRunner is not used anymore so it can be disposed\r\n        \r\n        Console.ReadKey();\r\n    }\r\n}\r\n\r\npublic class TestSystem : QuerySystem<Position>\r\n{\r\n    protected override void OnUpdate()\r\n    {\r\n        var queryJob = Query.ForEach((myComponents, entities) =>\r\n        {\r\n            for (int n = 0; n < entities.Length; n++)\r\n            {\r\n                myComponents[n].x += 10f;\r\n            }\r\n        });\r\n        queryJob.RunParallel();\r\n        // Query.Store.JobRunner.Dispose(); doing this stop all worker threads\r\n    }\r\n}\r\n```"
      }
    ]
  }
]