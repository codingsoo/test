[
  {
    "id": "https://github.com/lopcode/vips-ffm/issues/73",
    "source": {
      "issue_number": 73
    },
    "initial_question": {
      "title": "Question: Vips.init & threads",
      "body": "Going by the code of Vips.init() and Vips.shutdown(), I would assume to only call both once per application and not once per thread. The library would then be usable from all threads, without any kind of synchronization needed, as long as someone doesn't share VImage objects or the like across threads.\r\n\r\nOr do I need to always call Vips.init() and Vips.shutdown() in every thread where vips-ffm is used? \r\n\r\nThanks!"
    },
    "satisfaction_conditions": [
      "Library initialization occurs exactly once per application",
      "Library shutdown occurs exactly once per application",
      "Library functions remain thread-safe for concurrent operations",
      "Arena operations execute on their originating thread",
      "Individual VImage objects remain thread-confined"
    ],
    "created_at": "2024-09-25T09:59:44Z"
  },
  {
    "id": "https://github.com/lopcode/vips-ffm/issues/72",
    "source": {
      "issue_number": 72
    },
    "initial_question": {
      "title": "image to byte array - segment too large",
      "body": "This might be more of a question, depending on if this is actually solvable with the current vips-ffm api.\r\n\r\nJVips:\r\n```\r\n\t@Override\r\n\tpublic byte[] writeJpegImage(VipsImage image, float quality) {\r\n\t\ttry {\r\n\t\t\timage.applyIccTransform(\"srgb\", new ICCTransformOptions().embedded(true));\r\n\t\t} catch(VipsException ignored) {}\r\n\r\n\t\treturn image.writeJPEGToArray(toVipsQuality(quality), true);\r\n\t}\r\n```\r\nThis works for all our images, independent of size.\r\n\r\nvips-ffm:\r\n```\r\n\t@Override\r\n\tpublic byte[] writeJpegImage(VImage image, float quality) {\r\n\t\tVBlob blob = image\r\n\t\t\t.iccTransform(\"srgb\", VipsOption.Boolean(\"embedded\", true))\r\n\t\t\t.jpegsaveBuffer(VipsOption.Int(\"Q\", toVipsQuality(quality)));\r\n\r\n\t\treturn blob.getUnsafeAddress().toArray(ValueLayout.JAVA_BYTE);\r\n\t}\r\n```\r\nThis works up to a certain image size.\r\n\r\nFor larger images though, it produces the following:\r\n```\r\nCaused by: java.lang.IllegalStateException: Segment is too large to wrap as byte[]. Size: 9223372036854775807\r\n        at jdk.internal.foreign.AbstractMemorySegmentImpl.checkArraySize(AbstractMemorySegmentImpl.java:396) ~[?:?]\r\n        at jdk.internal.foreign.AbstractMemorySegmentImpl.toArray(AbstractMemorySegmentImpl.java:352) ~[?:?]\r\n        at jdk.internal.foreign.AbstractMemorySegmentImpl.toArray(AbstractMemorySegmentImpl.java:318) ~[?:?]\r\n        at some.package.SomeClass.writeJpegImage(SomeClass.java:80) ~[app_B:?]\r\n```\r\n\r\nWhat would be the correct way to get a byte array from an image, without writing it out to disk and reading it in again?"
    },
    "satisfaction_conditions": [
      "Successfully converts large images to byte arrays without size limitations",
      "Performs conversion without requiring disk I/O operations",
      "Maintains data integrity during conversion",
      "Properly manages native memory access and scope",
      "Returns data in a format compatible with Java byte array operations"
    ],
    "created_at": "2024-09-25T09:38:27Z"
  },
  {
    "id": "https://github.com/lopcode/vips-ffm/issues/62",
    "source": {
      "issue_number": 62
    },
    "initial_question": {
      "title": "WIndows JVM crash",
      "body": "```\r\nv  ~RuntimeStub::nep_invoker_blob 0x0000013af8451508\r\nj  java.lang.invoke.LambdaForm$MH+0x0000013a9ac09400.invoke(Ljava/lang/Object;JJ)J+10 java.base@22.0.2\r\nj  java.lang.invoke.LambdaForm$MH+0x0000013a9ac0ac00.invokeExact_MT(Ljava/lang/Object;JJLjava/lang/Object;)J+21 java.base@22.0.2\r\nj  jdk.internal.foreign.abi.DowncallStub+0x0000013a9ac09800.invoke(Ljava/lang/foreign/SegmentAllocator;Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/MemorySegment;)Ljava/lang/foreign/MemorySegment;+80 java.base@22.0.2\r\nj  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+14 java.base@22.0.2\r\nj  java.lang.invoke.LambdaForm$MH+0x0000013a9ac0a800.invoke(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+44 java.base@22.0.2\r\nj  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+19 java.base@22.0.2\r\nj  app.photofox.vipsffm.jextract.VipsRaw.g_object_ref(Ljava/lang/foreign/MemorySegment;)Ljava/lang/foreign/MemorySegment;+26\r\nj  app.photofox.vipsffm.VipsInvoker.lambda$invokeOperation$3(Ljava/lang/foreign/Arena;Ljava/lang/foreign/MemorySegment;Lapp/photofox/vipsffm/VipsOption;)V+390\r\nj  app.photofox.vipsffm.VipsInvoker$$Lambda+0x0000013a9ac1c470.accept(Ljava/lang/Object;)V+12\r\nj  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 java.base@22.0.2\r\nj  java.util.stream.ReferencePipeline$2$1.accept(Ljava/lang/Object;)V+21 java.base@22.0.2\r\nj  java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Ljava/util/function/Consumer;)V+95 java.base@22.0.2\r\nj  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 java.base@22.0.2\r\nj  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 java.base@22.0.2\r\nj  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 java.base@22.0.2\r\nj  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 java.base@22.0.2\r\nj  java.util.stream.AbstractPipeline.evaluate(Ljava/util/stream/TerminalOp;)Ljava/lang/Object;+88 java.base@22.0.2\r\nj  java.util.stream.ReferencePipeline.forEach(Ljava/util/function/Consumer;)V+6 java.base@22.0.2\r\nj  app.photofox.vipsffm.VipsInvoker.invokeOperation(Ljava/lang/foreign/Arena;Ljava/lang/String;Ljava/util/List;)V+146\r\nj  app.photofox.vipsffm.VImage.autorot([Lapp/photofox/vipsffm/VipsOption;)Lapp/photofox/vipsffm/VImage;+48\r\n```\r\n\r\nThis is the relevant part of the stacktrace. Unfortunately there's no error or anything else, and the issue is reproducible.\r\n\r\nIn case it helps, here's the code of the method calling autorot:\r\n\r\n```\r\n\tpublic VImage rotateByExif(File file) {\r\n\t\tVImage image = VImage.newFromFile(currentArena, file.getPath());\r\n\t\treturn image.autorot();\r\n\t}\r\n```\r\n\r\nThe issue happens inside a JUnit test, though it doesn't look like that should matter?"
    },
    "satisfaction_conditions": [
      "JVM must not crash when executing autorot() operation on Windows",
      "Operation caching behavior must handle pointers correctly",
      "Invalid output options must be handled gracefully with Java exceptions",
      "Solution must work within JUnit test environment"
    ],
    "created_at": "2024-09-21T18:02:56Z"
  }
]