[
  {
    "number": 23,
    "title": "fix: RecorderFailedToInitializeRecordingException due to invalid filename",
    "created_at": "2025-02-16T13:53:28Z",
    "closed_at": "2025-02-18T12:32:07Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/23",
    "body": "**Description**\n\nWhen attempting to start recording with an invalid filename using the `recorder.startRecording` method, a `RecorderFailedToInitializeRecordingException` is thrown. The error message does not provide sufficient information about the cause of the issue.\n\n**Steps To Reproduce**\n\n1. Include two colons (:) in the filename.\n2. Pass the file path to the `recorder.startRecording` method.\n\n**Example Code**\n\nDart\n```\nfinal DateTime now = DateTime.now();\nfinal DateFormat formatter = DateFormat('MMdd_HH:mm:ss');\nfinal String timestamp = formatter.format(now);\n\nString path = p.join(\n  r\"C:\\Users\\Username\\Documents\\Projects\\voicebot_flutter\\app\\voicebot\\a_recording\",\n  'my_file_$timestamp.wav',\n);\n\nrecorder.startRecording(completeFilePath: path);\n```\n\n**Expected Behavior**\n\nThe `recorder.startRecording` method should throw an exception with a clear error message indicating that the filename is invalid.\n\n**Actual Behavior**\n\nA `RecorderFailedToInitializeRecordingException: The recording failed to start (on the C++ side).` is thrown with a generic error message that does not provide information about the invalid filename.\n",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/23/comments",
    "author": "nitin-airindia",
    "comments": [
      {
        "user": "alnitak",
        "created_at": "2025-02-18T12:34:27Z",
        "body": "Hi @nitin-airindia,\n\nthanks for finding this issue.\n\nThe fix release is available now with version 1.0.1."
      },
      {
        "user": "nitin-airindia",
        "created_at": "2025-02-19T05:49:40Z",
        "body": "Great work @alnitak "
      }
    ]
  },
  {
    "number": 17,
    "title": "fix: listCaptureDevices function returns empty list on Windows",
    "created_at": "2024-12-24T04:03:09Z",
    "closed_at": "2025-02-02T16:53:03Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/17",
    "body": "**Description**\r\nThe library does not appear to function correctly at the moment. I am eagerly looking forward to updates that will fix existing bugs and ensure basic functionality.\r\n\r\n\r\n`listCaptureDevices` function always returns empty list on Windows\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/17/comments",
    "author": "guoz2013",
    "comments": [
      {
        "user": "alnitak",
        "created_at": "2024-12-31T09:15:54Z",
        "body": "Hi @guoz2013,\r\n\r\nI tried it on my Windows and I don't get bad behaviors. For example, when my webcam is connected I receive 1 input device and when I disconnect it I get an empty list. With what input device are you trying?"
      },
      {
        "user": "alnitak",
        "created_at": "2025-02-02T16:53:03Z",
        "body": "Since I do have not much information about this issue, I'll close it but feel free to reopen it!"
      }
    ]
  },
  {
    "number": 16,
    "title": "fix: RecorderNotInitializedException: The recorder has not been initialized yet (on the C++ side).",
    "created_at": "2024-12-23T14:38:12Z",
    "closed_at": "2024-12-31T09:05:00Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/16",
    "body": "**Description**\r\n\r\nFollow the example code to initialize the exception\r\n\r\n**Steps To Reproduce**\r\n\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected Behavior**\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Additional Context**\r\n\r\n`startRecording(){\r\n    Permission.microphone.request().isGranted.then((value) async {\r\n      if (!value) {\r\n        await [Permission.microphone].request();\r\n      }\r\n    });\r\n\r\n    /// Initialize the capture device and start it:\r\n    try {\r\n      Recorder.instance.init();\r\n      Recorder.instance.start();\r\n    } on Exception catch (e) {\r\n      debugPrint('init() error: $e\\n');\r\n      return;\r\n    }\r\n    if(isRecord.value){\r\n      Recorder.instance.stopRecording();\r\n      isRecord.value = false;\r\n      return;\r\n    }\r\n\r\n    isRecord.value = true;\r\n\r\n    //Start recording:\r\n    Recorder.instance.startRecording(completeFilePath: \"audioCompleteFilenameWithPath.wav\");\r\n    /// Listen to audio data stream. The data is received in Uint8List.\r\n    Recorder.instance.uint8ListStream.listen((data) {\r\n      /// the [data] is of type `AudioDataContainer` and, whatever format is passed to\r\n      /// the `init()` method, it is available with [data.rawData] which is of `Uint8List`\r\n      /// type. This is useful if we want to write into a file.\r\n      /// It is possible to convert audio data to the desired format using one of the\r\n      /// `data.to[*]List` methods. Be aware that the conversion is compute expensive and\r\n      /// should be avoided if possible initializing the recorder with the format\r\n      /// desired.\r\n      double db = Recorder.instance.getVolumeDb();\r\n      debugPrint(\"db:$db\");\r\n\r\n    });\r\n\r\n    /// Start streaming:\r\n    Recorder.instance.startStreamingData();\r\n  }`",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/16/comments",
    "author": "tolink-Mengtianfu",
    "comments": [
      {
        "user": "tolink-Mengtianfu",
        "created_at": "2024-12-23T14:39:27Z",
        "body": "I'm running on iOS18"
      },
      {
        "user": "tolink-Mengtianfu",
        "created_at": "2024-12-23T14:40:36Z",
        "body": "[✓] Flutter (Channel stable, 3.24.3, on macOS 15.1 24B83 darwin-arm64, locale zh-Hans-CN)\r\n[✓] Android toolchain - develop for Android devices (Android SDK version 34.0.0)\r\n[✓] Xcode - develop for iOS and macOS (Xcode 16.0)\r\n[✓] Chrome - develop for the web\r\n[✓] Android Studio (version 2023.2)\r\n[✓] IntelliJ IDEA Ultimate Edition (version 2023.1.2)\r\n[✓] VS Code (version 1.95.3)\r\n[!] Proxy Configuration\r\n    ! NO_PROXY is not set\r\n[✓] Connected device (4 available)\r\n   \r\n[✓] Network resources\r\n"
      },
      {
        "user": "alnitak",
        "created_at": "2024-12-31T09:05:00Z",
        "body": "Hi @tolink-Mengtianfu,\r\n\r\nI think your `startRecording()` shoud be:\r\n```\r\nFuture<void> startRecording() async{\r\n  await Permission.microphone.request().isGranted.then((value) async {\r\n  if (!value) {\r\n    await [Permission.microphone].request();\r\n  }\r\n});\r\n```\r\nThat method must be awaited as like `Recorder.instance.init();`. If you call some other methods without initializing the recorder, that error arises. If you don't use the `await` on the `init()` it will execute the next lines without entering yet in the `init()`."
      }
    ]
  },
  {
    "number": 15,
    "title": "fix: MacOS error when listCaptureDevices was called",
    "created_at": "2024-12-23T12:23:03Z",
    "closed_at": "2024-12-31T09:11:47Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/15",
    "body": "**Description**\r\n\r\n[ERROR:flutter/runtime/dart_vm_initializer.cc(41)] Unhandled Exception: Unsupported operation: Operation 'toDartString' not allowed on a 'nullptr'.\r\n#0      Utf8Pointer._ensureNotNullptr (package:ffi/src/utf8.dart:61:7)\r\n#1      Utf8Pointer.toDartString (package:ffi/src/utf8.dart:41:5)\r\n#2      RecorderFfi.listCaptureDevices (package:flutter_recorder/src/bindings/recorder_io.dart:152:33)\r\n#3      Recorder.listCaptureDevices (package:flutter_recorder/src/flutter_recorder.dart:190:33)\r\n\r\n**Steps To Reproduce**\r\n\r\n` Recorder.instance.listCaptureDevices();`\r\n",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/15/comments",
    "author": "guoz2013",
    "comments": [
      {
        "user": "alnitak",
        "created_at": "2024-12-31T09:11:47Z",
        "body": "Seems that the OS doesn't give a name to your input device! Anyway, I fixed this in this repo. Please try it!\r\nFeel free to reopen if the problem persists."
      }
    ]
  },
  {
    "number": 11,
    "title": "docs: Hello, am trying to figure out how to use this package currently for voice notes and call streaming",
    "created_at": "2024-11-20T22:32:59Z",
    "closed_at": "2024-12-13T12:03:14Z",
    "labels": [
      "documentation"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/11",
    "body": "### Documentation Request for Recording Controls & Waveform Visualization\r\n\r\nHi, I'm currently implementing voice notes using `flutter_recorder` and need clarification on some core functionalities.\r\n\r\n**Current Implementation**\r\nI'm using:\r\n- `recorder.setPauseRecording(pause: boolean)` for pause/resume\r\n- `recorder.getWave()` for waveform visualization\r\n- Recording to WAV files with custom paths\r\n\r\n**Documentation Needed For:**\r\n\r\n1. **Pause & Resume Recording**\r\n   - Is `setPauseRecording(pause: boolean)` the correct approach?\r\n   - Are there any cleanup steps needed when resuming?\r\n   - Does pausing affect the final file output?\r\n\r\n2. **Waveform Visualization**\r\n   - What's the recommended polling frequency for `getWave()`?\r\n   - What's the format of the wave data (range, number of points)?\r\n   - Are there any performance considerations?\r\n\r\n3. **Recording Management**\r\n   - Best practices for file handling during pause/resume\r\n   - Recommended approach for recording timer implementation\r\n   - Memory management considerations for longer recordings\r\n\r\n**Use Case Context:**\r\nBuilding a voice notes feature that requires:\r\n- Real-time waveform visualization\r\n- Pause/Resume functionality\r\n- Recording duration tracking\r\n- File access for playback/deletion\r\n\r\n### Documentation Request: Audio Configuration & Recording Features\r\n\r\n1. **Audio Configuration**\r\n   ```dart\r\n   _recorder.init(\r\n     sampleRate: 44100,\r\n     channels: RecorderChannels.stereo,\r\n     format: PCMFormat.f32le,\r\n   );\r\n   ```\r\n   - What are the recommended configuration settings for voice recording?\r\n   - How to configure audio context for optimal voice recording quality?\r\n   - Can we configure similar audio settings as shown below for the recorder?\r\n   ```dart\r\n   // Current player configuration - need equivalent for recorder\r\n   await setAudioContext(AudioContext(\r\n     android: AudioContextAndroid(\r\n       contentType: AndroidContentType.speech,\r\n       usageType: AndroidUsageType.media,\r\n       audioFocus: AndroidAudioFocus.none,\r\n       audioMode: AndroidAudioMode.normal,\r\n     ),\r\n     iOS: AudioContextIOS(\r\n       category: AVAudioSessionCategory.playAndRecord,\r\n       options: {\r\n         AVAudioSessionOptions.defaultToSpeaker,\r\n         AVAudioSessionOptions.allowBluetooth,\r\n         AVAudioSessionOptions.allowBluetoothA2DP,\r\n         AVAudioSessionOptions.mixWithOthers,\r\n       },\r\n     ),\r\n   ));\r\n   ```\r\n\r\n2. **Feature Requirements**\r\n   - How to configure audio quality settings (bitrate, encoding)?\r\n   - Best practices for handling bluetooth/headphone routing?\r\n   - How to ensure optimal performance for:\r\n     - Background recording\r\n     - Long duration recordings\r\n     - Pause/resume functionality\r\n\r\n3. **Platform-Specific Considerations**\r\n   - Are there different configurations needed for iOS vs Android?\r\n   - How to handle audio session interruptions?\r\n   - Best practices for permission handling?\r\n\r\nWould greatly appreciate examples or documentation covering these scenarios. Thank you!",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/11/comments",
    "author": "jbarasa",
    "comments": [
      {
        "user": "alnitak",
        "created_at": "2024-11-26T19:40:50Z",
        "body": "Hi @jbarasa,\r\n\r\nthere is a lot to write, I'll try to do my best to reply.\r\n\r\n1. **Pause & Resume Recording**\r\nYes, `setPauseRecording(pause: boolean)` is the correct way. There are no cleanup steps. The recording to its job writing into a file (on the web it writes into memory), so there is almost no lag when you un-pause the recording. There could be a lag at max of `samplerate / (1024 * bytesSample * channels)` milliseconds (this is almost correct I think :) ).\r\n> Does pausing affect the final file output?\r\n\r\nI didn't understand this. The audio data is written when recording starts and it doesn't write when you pause. When you call the stop recording, the WAV header file is updated and the file is closed.\r\n\r\n2. **Waveform Visualization**\r\nWhen you call `getWave()`, as for the `getFft()`, retrieve the current buffer data. The current data is updated every time new data comes into the buffer, so it's not certain that the data obtained from those functions is coming from the subsequent chunk of microphone audio. Could come from N audio chunks after the last call, or maybe could be the same chunk you got before if you call them really fast. That depends also on the sample rate and audio format you are using.\r\nThese methods ('getTexture2D()' and `getVolumeDb()' included) are working only when using `PCMFormat.f32le` format and return a `Float32List` with data in [-1.0, 1.0] the range.\r\n\r\n3. **Recording Management**\r\nSince the saved file has a WAV format (the only one supported for now), it could quickly grow in size. Take in mind that 1 second of recording stores `sampleRate * byteSample * channels` bytes per second. `f32le` and `s32le` takes 4 bytes, `s16le` 2 bytes and `s8` one. \r\n\r\nFor a voice recording a sample rate of 22050, mono, and a format of `s16le` I think it's enough. This will store 44100 bytes per second (43 KB/s) when recording.\r\n\r\nCurrently, there is no audio context since `flutter_recorder` isn't laid around the OS audio APIs and there are no different configurations for iOS, Android or desktop, but I think that there are some other plugins that can intercept the focus for interruptions."
      },
      {
        "user": "jbarasa",
        "created_at": "2024-11-26T20:02:14Z",
        "body": "> Does pausing affect the final file output?\r\n\r\n- \r\n\r\nI tried playing the paused file but got an error i have to record, then stop in order to play the file"
      }
    ]
  },
  {
    "number": 1,
    "title": "fix: Example works on MacOS but throws error",
    "created_at": "2024-10-21T02:58:02Z",
    "closed_at": "2024-12-13T12:53:25Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/alnitak/flutter_recorder/issues/1",
    "body": "**Description**\r\n\r\nDemo runs (thanks!) but with an unhandled exception on launch\r\n\r\n**Steps To Reproduce**\r\n\r\nupdate macos debug.entitlements by adding:\r\n\r\n```\r\n    <key>com.apple.security.device.audio-input</key>\r\n    <true/>\r\n```\r\n\r\nrun to debug\r\n\r\nApplication throws the following error on launch\r\n\r\n```\r\n[ERROR:flutter/runtime/dart_vm_initializer.cc(41)] Unhandled Exception: MissingPluginException(No implementation found for method requestPermissions on channel flutter.baseflow.com/permissions/methods)\r\n#0      MethodChannel._invokeMethod (package:flutter/src/services/platform_channel.dart:332:7)\r\n<asynchronous suspension>\r\n#1      MethodChannelPermissionHandler.requestPermissions (package:permission_handler_platform_interface/src/method_channel/method_channel_permission_handler.dart:80:9)\r\n<asynchronous suspension>\r\n#2      PermissionActions.request (package:permission_handler/permission_handler.dart:109:10)\r\n<asynchronous suspension>\r\n#3      FuturePermissionStatusGetters.isGranted (package:permission_handler_platform_interface/src/permission_status.dart:127:40)\r\n<asynchronous suspension>\r\n#4      _MyAppState.initState.<anonymous closure> (package:flutter_recorder_example/main.dart:35:54)\r\n<asynchronous suspension>\r\n```\r\n\r\nCan still init and then start capture\r\n\r\n**Expected Behavior**\r\n\r\nShould not throw error on launch\r\n\r\n**Context**\r\n\r\nMacOS 14.5, Flutter 3.24.3\r\n\r\n",
    "comments_url": "https://api.github.com/repos/alnitak/flutter_recorder/issues/1/comments",
    "author": "naychrist",
    "comments": [
      {
        "user": "alnitak",
        "created_at": "2024-10-21T09:47:55Z",
        "body": "Thank you @naychrist,\r\n\r\nthe permission handler package I used doesn't support macOS. Removing that check doesn't throw anymore.\r\n\r\nAlso, I think you should enable `Audio input`  and `Downloads folder` in XCode under Runner->Signin & Capabilities.\r\n\r\nI do not have a mac or iPhone to try and I am not familiar with those. I pushed a fix for this, can you confirm it is working now?"
      },
      {
        "user": "naychrist",
        "created_at": "2024-10-21T23:01:29Z",
        "body": "thanks! that did the trick :)\r\n\r\nTrue, you do need to grant access to the downloads folder for recording as well. You can do this via the UI as you suggested or you can just add the following to the `example/macos/Runner/DebugProfile.entitlements` and `example/macos/Runner/Release.entitlements`\r\n\r\n```\r\n\t<key>com.apple.security.device.audio-input</key>\r\n\t<true/>\r\n\t<key>com.apple.security.files.downloads.read-write</key>\r\n\t<true/>\r\n```\r\n\r\nHeads up I will post a new issue for iOS after I get a chance to look into some framework linking issues I am having here.\r\n"
      }
    ]
  }
]