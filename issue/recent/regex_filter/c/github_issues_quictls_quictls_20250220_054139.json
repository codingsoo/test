[
  {
    "number": 229,
    "title": "SCTP not covered by our tests",
    "created_at": "2025-01-21T23:44:52Z",
    "closed_at": "2025-01-27T16:45:42Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/229",
    "body": "We need to either remove the ifdef'd code (prefered) or restore to CI.",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/229/comments",
    "author": "wbl",
    "comments": [
      {
        "user": "richsalz",
        "created_at": "2025-01-22T14:30:21Z",
        "body": "Well we're not missing much:\n```\n\nMAC ~/git/openssl/test$ g grep -i sctp | wc\n     163     699   12251\n\nMAC ~/git/openssl/test$ q\nOn branch cmake\nYour branch is up to date with 'origin/cmake'.\n\nnothing to commit, working tree clean\n\nMAC ~/git/quictls/quictls$ cd test\n\nMAC ~/git/quictls/quictls/test$ g grep -i sctp | wc\n     157     664   11885\n```\n\nI asked some IETF folks about it and CC'd you on the mail FYI."
      },
      {
        "user": "wbl",
        "created_at": "2025-01-22T17:02:38Z",
        "body": "So it breaks on refactors, and the only sign is the apidiff run breaks. I'm preparing a total removal branch now, in parallel with seeing what people say."
      },
      {
        "user": "botovq",
        "created_at": "2025-01-22T17:13:05Z",
        "body": "I can't recall ever seeing complaints about LibreSSL (and OpenBSD) not supporting this. We removed support in libssl and bio about 10 years ago. BoringSSL also defines OPENSSL_NO_SCTP. Most of the software mentioning it is doing just that: mentioning it, or providing ipfilter things or whatever."
      },
      {
        "user": "teiclap",
        "created_at": "2025-01-23T07:18:29Z",
        "body": "I think you are referring to SCTP test as described in rfc6083, am I correct?\nAnd does QuicTLS support DTLS1.3?"
      },
      {
        "user": "richsalz",
        "created_at": "2025-01-23T14:28:26Z",
        "body": "No, I'm referring to the various tests in the code base, under the `test/` directory.\n\nQuicTLS does not yet support DTLS 1.3. We might adopt OpenSSL's code, when it's ready, and we also have someone interested in working on it.  Feel free to join in :)"
      },
      {
        "user": "botovq",
        "created_at": "2025-01-27T16:45:42Z",
        "body": "Fixed by #232"
      }
    ]
  },
  {
    "number": 92,
    "title": "CI is too big and takes too long",
    "created_at": "2024-11-21T13:26:24Z",
    "closed_at": "2024-11-21T18:30:14Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/92",
    "body": "Can e.g. the compiler zoo and all the cross compilation stuff be trimmed to a more reasonable size? It took over 14 hours for the CI for #91 to complete. That seems way too much.",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/92/comments",
    "author": "botovq",
    "comments": [
      {
        "user": "richsalz",
        "created_at": "2024-11-21T14:52:44Z",
        "body": "Yes, that's crazy.  Sere #93 and feel free to make suggestions.\r\n"
      }
    ]
  },
  {
    "number": 77,
    "title": "Deprecate X509_OBJECT_up_ref_count",
    "created_at": "2024-11-18T19:09:32Z",
    "closed_at": "2024-12-05T15:21:01Z",
    "labels": [
      "imported"
    ],
    "url": "https://github.com/quictls/quictls/issues/77",
    "body": "Import of openssl/issue/21121 reported by davidben\n\ntitle:\tDeprecate X509_OBJECT_up_ref_count\nstate:\tOPEN\nauthor:\tdavidben\nlabels:\tbranch: master, help wanted, triaged: feature\ncomments:\t0\nassignees:\t\nprojects:\t\nmilestone:\t\nnumber:\t21121\n--\nWith `X509_OBJECT` opaque, I don't believe there is anything useful a caller can do with `X509_OBJECT_up_ref_count`. Despite the name, it doesn't increase the ref-count of the `X509_OBJECT` itself (`X509_OBJECT` is not ref-counted). It bumps the refcount of whatever object is stored in the `X509_OBJECT`, without returning the object or anything.\r\n\r\nIt's used within the library right after copying some value into an `X509_OBJECT`, to update the ref-count accordingly. But that's to used in the course of getting an `X509_OBJECT` into a consistent state, but the public APIs should handle that already.\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/77/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "richsalz",
        "created_at": "2024-12-02T21:01:32Z",
        "body": "Not going to do this,  for compatibility with apps/foreign language bindings, etc based on feedback from TB"
      },
      {
        "user": "botovq",
        "created_at": "2024-12-03T04:32:00Z",
        "body": "Actually, I think we can remove this. I can't find any use of it in our ports tree or on codesearch and the reason we still have it in LibreSSL is simply that I hadn't noticed that it was unused.\r\n\r\nI am going to run a ports bulk build and will report back if there should unexpectedly be a user that I missed in a bit more than two days."
      }
    ]
  },
  {
    "number": 53,
    "title": "add a SECURITY.md",
    "created_at": "2024-11-06T21:23:19Z",
    "closed_at": "2024-11-06T22:07:49Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/pull/53",
    "body": null,
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/53/comments",
    "author": "jschauma",
    "comments": [
      {
        "user": "jschauma",
        "created_at": "2024-11-06T21:38:17Z",
        "body": "Ok, I think I did?"
      },
      {
        "user": "richsalz",
        "created_at": "2024-11-06T21:41:43Z",
        "body": "I find the easiest thing is \"git rebase --squash\". Or \"rebase -i\" and squash by editing the commit list."
      },
      {
        "user": "jschauma",
        "created_at": "2024-11-06T21:54:34Z",
        "body": "I thought that's what I did there.  Pretty much operating in xkcd 1597 mode here..."
      }
    ]
  },
  {
    "number": 48,
    "title": "quic vs quic-boring-api",
    "created_at": "2024-10-29T16:47:02Z",
    "closed_at": "2024-11-26T01:50:10Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/48",
    "body": "We changed the name to avoid trampling on upstream. Less of a concern now: we can go chop away some of the structuring.\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/48/comments",
    "author": "wbl",
    "comments": [
      {
        "user": "richsalz",
        "created_at": "2024-11-26T01:50:10Z",
        "body": "With #97, #109, etc.  OpenSSL QUIC code is gone."
      }
    ]
  },
  {
    "number": 32,
    "title": "Restore some files",
    "created_at": "2024-09-26T18:25:23Z",
    "closed_at": "2024-09-26T22:12:49Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/pull/32",
    "body": "Windows needs the tools directory.\r\nAlso restore gost-engine since we can't remove engines yet.\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/32/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "wbl",
        "created_at": "2024-09-26T22:13:02Z",
        "body": "We still have the stylechecker causing issues, but should silence other things"
      }
    ]
  },
  {
    "number": 31,
    "title": "enable-fips should just warn/exit",
    "created_at": "2024-09-26T16:33:17Z",
    "closed_at": "2024-11-26T01:52:26Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/31",
    "body": "QuicTLS is not providing a FIPS-enabled module that has been verified. We should not build the FIPS module.\r\n\r\nIt might be nice to run the FIPS tests against the openSSL module however.\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/31/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "wbl",
        "created_at": "2024-09-26T16:35:02Z",
        "body": "Once you replace the modules you would have one that is FIPS.\r\n\r\nAgreed on the desirability of FIPS tests with OpenSSL module"
      },
      {
        "user": "richsalz",
        "created_at": "2024-09-26T16:37:09Z",
        "body": "> Once you replace the modules you would have one that is FIPS.\r\n\r\nDo you mean copy over the files from OpenSSL after they do FIPS config?  Cute hack."
      },
      {
        "user": "wbl",
        "created_at": "2024-09-27T16:08:54Z",
        "body": "Yeah, that's already what we do with 3.1 and 3.0"
      },
      {
        "user": "richsalz",
        "created_at": "2024-11-26T01:52:26Z",
        "body": "With #96 'build the fips container' is gone. The `fips-stuff` tag points to the commit that did it, in case we ever need to bring it back.  Closing."
      }
    ]
  },
  {
    "number": 30,
    "title": "Remove no-dh, etc., configuration option",
    "created_at": "2024-09-26T13:42:06Z",
    "closed_at": "2024-12-21T03:01:24Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/30",
    "body": "DH, ECDH, DHE, DHE_KX should all be assumed and it should not be possible to turn it off.\r\n\r\n#29 turns it off from the daily CI build.  (Yeah, perhaps should be a separate PR; oh well)\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/30/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "wbl",
        "created_at": "2024-10-07T16:51:27Z",
        "body": "There probably are some other ones we should tweak. Probably has to involve removing the ifdefs as well."
      },
      {
        "user": "richsalz",
        "created_at": "2024-12-21T03:01:24Z",
        "body": "See #39 "
      }
    ]
  },
  {
    "number": 26,
    "title": "Fix errors caused by PR#6",
    "created_at": "2024-09-25T20:20:26Z",
    "closed_at": "2024-09-25T21:04:34Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/pull/26",
    "body": "Also fix some md-nits\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/26/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "wbl",
        "created_at": "2024-09-25T21:03:56Z",
        "body": "Hmm, might this also be where the windows errors I saw stemmed from?"
      }
    ]
  },
  {
    "number": 3,
    "title": "Drop old systems",
    "created_at": "2024-09-24T16:24:22Z",
    "closed_at": "2024-12-21T03:12:37Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/3",
    "body": "VMS, SunOS, architectures that aren't in real production today.\r\n",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/3/comments",
    "author": "wbl",
    "comments": [
      {
        "user": "richsalz",
        "created_at": "2024-12-21T03:12:08Z",
        "body": "I think we've purged all we're going to do for now. Some will drop out because of #2 and some will drop out because of #30. So closing this."
      }
    ]
  },
  {
    "number": 15,
    "title": "quic+locks",
    "created_at": "2023-08-02T18:19:31Z",
    "closed_at": "2024-09-24T19:18:34Z",
    "labels": [],
    "url": "https://github.com/quictls/quictls/issues/15",
    "body": "I was informed about the excessive locking problems in openssl 3.x on the haproxy mailing list.  All indications are that the openssl project is ignoring the problem.  The info I have available says that openssl 3.x is many times slower under heavy load than 1.1.x because of the excessive locking.\r\n\r\nThis project had a +quic+locks variant for 3.1.0, but at this time I do not see such a variant for 3.1.2.  I made an attempt at testing for a performance difference between 1.1.x+quic, 3.0.x+quic, and 3.1.0+quic+locks.  I did not see any real difference, so I suspect my testing methodology was not correct.\r\n\r\nWhat can you tell me about the current state of fixing locking issues in either this repo or the upstream openssl repo?\r\n\r\nMy installs of haproxy do not see enough traffic for the locking to present a problem, but it interests me.  I don't have an understanding of the code involved.",
    "comments_url": "https://api.github.com/repos/quictls/quictls/issues/15/comments",
    "author": "elyograg",
    "comments": [
      {
        "user": "tmshort",
        "created_at": "2023-08-03T13:52:32Z",
        "body": "A number of fixes were migrated into upstream openssl in the `openssl-3.1` and `master` branches (and possibly some in the `openssl-3.0` branch). These were all made relatively recently, so the releases that came out _this week_ should have them (except those that are exclusive to the `master` branch). There were a number of discussions on the OpenSSL mailing lists and in appropriate PRs. Fundamentally, access to some structures (in the provider) where locked more often than they needed to be. You really needed to have a multi-threaded application running OpenSSL at high data throughput.\r\n\r\nYou could try the `openssl-3.1.2-quic1` release to see if there's any improvement. You really won't see much of anything in a single-threaded, or low throughput, application."
      },
      {
        "user": "elyograg",
        "created_at": "2023-08-03T15:18:04Z",
        "body": "I'm upgraded to 3.1.2+quic on my haproxy installs.\r\n\r\nI wrote a Java program to pound haproxy with requests from multiple threads for a super simple page served by haproxy directly rather than forwarded to a backend.  It didn't show the expected difference between the versions ... 3.0 (I think it was 3.0.8) was slightly faster than 1.1 (1.1.1t I think) ... which was very surprising given what I was told on the haproxy mailing list.\r\n\r\nAs I said, my web pages normally see so little traffic that I am never going to have a problem with it, but the whole thing fascinates me, so I am keeping an eye on the problem."
      },
      {
        "user": "elyograg",
        "created_at": "2023-08-03T19:59:06Z",
        "body": "I don't expect to be able to really contribute to fixing the locking issues that have been found.  I'm eagerly awaiting testing results from people who know how to properly create a test for it, because my test results seem to indicate that my test wasn't valid.\r\n\r\nAlso wanting to see where things are going to end up in the quic/http3 landscape.  From what I can see, so far this project is the best option currently available for enabling H3 support.  I hope openssl leverages work done by this project and others in a spirit of respectful cooperation."
      },
      {
        "user": "tmshort",
        "created_at": "2023-08-07T15:23:55Z",
        "body": "The upstream project is going in a different direction in 3.2 with their own QUIC API and implementation. The APIs will not be compatible with Chromium QUIC, and it will take a few releases before upstream has a complete implementation, as they are focusing on the client in 3.2.\r\nBecause of this, it may not be possible to add these QUIC APIs to OpenSSL 3.2. There may be another approach that can be taken (I'm in discussion with some of the OpenSSL folks about it), but it might have to wait until 3.2 is closer to release (and I actually have time to make it a reality). It would be a separate quictls project that (hopefully) would work with vanilla OpenSSL 3.2.\r\nThat being said, BoringSSL and Chromium QUIC API surfaces are malleable and have no backwards compatibility guarantees."
      },
      {
        "user": "elyograg",
        "created_at": "2023-08-24T17:13:04Z",
        "body": "My primary interest is QUIC is for haproxy.  I'm an end user, not on the haproxy development team.\r\n\r\nI am guessing that haproxy will need to spend a while refactoring their QUIC code to work with openssl 3.2.\r\n\r\nGetting back to this issue ... is openssl working to eliminate the locking overhead introduced in 3.0, which the 3.1.0+quic+locks branch here seemed to be tackling?  My testing environment for the locking overhead didn't actually reveal the overhead, which I am attributing to issues in my test methodology."
      },
      {
        "user": "tmshort",
        "created_at": "2023-09-11T19:53:05Z",
        "body": "As far as I know, upstream has submitted various fixes; based on risk, to the openssl-3.1 and openssl-3.0 branches. Not everything made it to openssl-3.0."
      }
    ]
  }
]