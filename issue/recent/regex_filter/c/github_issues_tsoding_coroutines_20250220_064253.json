[
  {
    "number": 9,
    "title": "Add lexer example",
    "created_at": "2025-02-02T00:56:54Z",
    "closed_at": "2025-02-02T03:19:54Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/pull/9",
    "body": "Lexer is a classical example of usecase for coroutines.\r\n\r\nThis is a ***very*** simple and basic lexer that can lex single digit integers, \"+\" and \"-\".\r\nLike these:\r\n```python\r\n1+1\r\n9-5+3\r\n```\r\n\r\nThe example would be better if we could return values when we yield (kind of like a generator).\r\nBut it is what it is.",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/9/comments",
    "author": "felipe-bonato",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-02-02T03:19:51Z",
        "body": "@felipe-bonato oh, that's actually super cool! Thank you! I'll think about returning values from yield in the meantime."
      }
    ]
  },
  {
    "number": 7,
    "title": "alternative to keep the assembly compact",
    "created_at": "2025-02-01T04:05:56Z",
    "closed_at": "2025-02-02T15:38:48Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/pull/7",
    "body": "If we don't care about scheduling fairness, I guess we can use something like this approach to keep the assembly in just one place.",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/7/comments",
    "author": "lzace817",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-02-02T08:34:05Z",
        "body": "I'm not so much interested in keeping things compact, but I'm very much interested in porting this library to arm. Can we close this PR and create another with just arm support and without random robin stuff?"
      },
      {
        "user": "lzace817",
        "created_at": "2025-02-02T15:38:48Z",
        "body": "sure, one limitation to get in mind is that `naked` didin't work on my arm toolchains. Can arm code even be make `naked`? \r\nThings kind of work as is accidentally, but I don't think we can count with it that in the future."
      },
      {
        "user": "rexim",
        "created_at": "2025-02-03T00:57:42Z",
        "body": "Huh, I know nothing about arm tbh. If fitting it into the current way of doing things doesn't just work, then don't bother. At some point I'm planning to do arm learning streams and I will see how to fit it better myself. Thank you for your Pull Requests! :+1: "
      }
    ]
  },
  {
    "number": 6,
    "title": "Foolproof coroutine_init and coroutine_finish",
    "created_at": "2025-01-31T12:41:52Z",
    "closed_at": "2025-02-02T08:34:56Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/pull/6",
    "body": null,
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/6/comments",
    "author": "0dminnimda",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-02-02T08:34:52Z",
        "body": "Aight, looks like it won't hurt. Thanks!"
      }
    ]
  },
  {
    "number": 5,
    "title": "Miscellaneous, but also API reshape",
    "created_at": "2025-01-30T05:02:54Z",
    "closed_at": "2025-01-30T11:42:35Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/pull/5",
    "body": "(This might be my first contribution to a C project)\r\n- Makefile: added coroutine.h (saw ninja video)\r\n- Free some memory\r\n- Renamed coroutine_go to coroutine_add (kinda regret)\r\n- No need to call coroutine_init and coroutine_finish from main\r\n- We don't busyyield on the main\r\n- If we are alone, we don't store and restore things\r\n- Randomly added const somewhere\r\n- Don't swap contexts?\r\n  Nope: Bug introduced when co1 finishes before co2\r\n- Sorry, added silly comments\r\n- Tested on gcc: for us asm sticks with -O3 without need for volatile\r\n\r\n- Let the coroutine know it's rbp (but useless)\r\n- [probably don't merge this] Switched to reallocarray and aligned_alloc whatever that means: NOTE: aligned_alloc seems to be introduced in C11, but, I can't add -std=c11 or I get \"assignment to 'Context *' from 'int'\" upon reallocarray, after \"implicit declaration of function 'reallocarray'\" ofc\r\n\r\nThank you, this was really fun.",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/5/comments",
    "author": "CastixGitHub",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-01-30T11:42:35Z",
        "body": "Hey! Thank you for the Pull Request! I'm glad you had fun! Unfortunately, I don't have any plans to change the API in a backward incompatible manner. Thank you for the suggestions tho. I'll take a note of them as I move forward."
      }
    ]
  },
  {
    "number": 4,
    "title": "freed stack array",
    "created_at": "2025-01-28T18:22:50Z",
    "closed_at": "2025-01-30T11:44:09Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/pull/4",
    "body": "This is my attempt at addressing the TODO's lined out in the main coroutine.c file ie 16 byte stack alignment in accordance to gcc and a seperate dynamic array to keep count of the finished coroutines, that are freed at the end of the main coroutine to maintain consistent id's.\r\nFeel free to ignore this pull request if you wish to do this yourself, if there are any errors or just because.",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/4/comments",
    "author": "reluekiss",
    "comments": [
      {
        "user": "sheepmax",
        "created_at": "2025-01-29T16:50:11Z",
        "body": "Maybe you could implement reusing available free blocks for new tasks. You can just pop off the top of the freedstacks array."
      },
      {
        "user": "CastixGitHub",
        "created_at": "2025-01-29T19:40:11Z",
        "body": "FWIW, this should just stop the leak\r\n```\r\n@@ -83,10 +97,13 @@ void coroutine_finish(void)\r\n \r\n     if (contexts.current == 0) {\r\n         contexts.count = 0;\r\n+        // when current is 0, our stack is not coming from malloc\r\n+        free(contexts.items);\r\n         return;\r\n     }\r\n \r\n     Context t = contexts.items[contexts.current];\r\n+    free(t.stack_base);\r\n     contexts.items[contexts.current] = contexts.items[contexts.count-1];\r\n     contexts.items[contexts.count-1] = t;\r\n     contexts.count -= 1;\r\n```"
      },
      {
        "user": "rexim",
        "created_at": "2025-01-30T11:44:09Z",
        "body": "@reluekiss hey! Thank you for the Pull Request! Since 5a4d7b5789cc3f5db2e46c2aa1a41ce761374794 we no longer need to free the stack since with the new allocator we can actually reuse them."
      }
    ]
  },
  {
    "number": 2,
    "title": "Link with GCC",
    "created_at": "2025-01-14T22:06:16Z",
    "closed_at": "2025-01-24T20:19:58Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/issues/2",
    "body": "You needn't link manually with ld. Everything links and runs fine with GCC so long as you provide the `-no-pie` flag when linking the `.o` files:\r\n\r\n```Makefile\r\nmain: coroutine.o main.o\r\n    gcc -no-pie -o main main.o coroutine.o\r\n```\r\n\r\nI remember you typing `-fno-pic` on stream instead, which is why it didn't work.",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/2/comments",
    "author": "El-Wumbus",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-01-24T20:19:56Z",
        "body": "Thank you for the suggestion. Resolved by f6edda4f6fdc97310061ca28e97eb71aaeb31f25"
      }
    ]
  },
  {
    "number": 1,
    "title": "simplifying the yield procedure and allowing a void* userdata",
    "created_at": "2025-01-14T17:34:06Z",
    "closed_at": "2025-01-24T20:19:42Z",
    "labels": [],
    "url": "https://github.com/tsoding/coroutines/issues/1",
    "body": "You don't need to save the rip separately, you can instead put that on the stack. Then once you exchange the stack pointer you can then return from yield. Even for the first time into the entry point.\r\n\r\nYou can allow the entry point to take a `void* userdata` by adding rdi to the saved context and in `void coroutine_go(void (*f)(void*), void*);` you take the second parameter and save that to be restored into rdi for when you jump into the entry point for the first time.\r\n\r\nMaking these changes in coroutine_go the sequence will then become\r\n\r\n```asm\r\n    mov rax, [stacks_end]         ;; rax contains the rsp of the new\r\n                                  ;; routine\r\n    sub QWORD [stacks_end], STACK_CAPACITY\r\n\r\n    sub rax, 8\r\n    mov QWORD [rax], coroutine_finish\r\n    sub rax, 8\r\n    mov QWORD [rax], rdi          ;;save the function pointer on the stack\r\n\r\n    mov [contexts_rsp+rbx*8], rax\r\n    mov QWORD [contexts_rbp+rbx*8], 0\r\n    mov [contexts_rdi+rbx*8], rsi ;; save second argument user_data\r\n\r\n    ret\r\n``` \r\n\r\ncoroutine_yield then becomes:\r\n\r\n```asm\r\ncoroutine_yield:\r\n    mov rbx, [contexts_current]\r\n\r\n    mov [contexts_rsp+rbx*8], rsp\r\n    mov [contexts_rbp+rbx*8], rbp\r\n    mov [contexts_rdi+rbx*8], rdi  ;; technically not needed \r\n\r\n;; mov rbx, [contexts_next]\r\n\r\n    mov rsp, [contexts_rsp+rbx*8]\r\n    mov rbp, [contexts_rbp+rbx*8]\r\n    mov rdi, [contexts_rdi+rbx*8]  ;; on first time this will be the user_data \r\n    ret                            ;; on first time this will pop the entrypoint pointer \r\n                                   ;; and leave coroutine_finish on top as return target\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/tsoding/coroutines/issues/1/comments",
    "author": "ratchetfreak",
    "comments": [
      {
        "user": "rexim",
        "created_at": "2025-01-24T20:19:42Z",
        "body": "Thank you for the suggestion. Resolved by f6edda4f6fdc97310061ca28e97eb71aaeb31f25"
      }
    ]
  }
]