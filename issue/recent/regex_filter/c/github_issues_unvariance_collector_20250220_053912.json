[
  {
    "number": 35,
    "title": "add discussion of collection strategy",
    "created_at": "2025-01-14T22:49:52Z",
    "closed_at": "2025-01-15T15:42:24Z",
    "labels": [],
    "url": "https://github.com/unvariance/collector/pull/35",
    "body": "This is a draft specification of what the collector should measure initially. The idea is to create a data-set that would show contention and would inform how to calculate interference signals.\n\nthanks @atimeofday for discussing this last week!",
    "comments_url": "https://api.github.com/repos/unvariance/collector/issues/35/comments",
    "author": "yonch",
    "comments": [
      {
        "user": "atimeofday",
        "created_at": "2025-01-14T23:16:00Z",
        "body": "Looks good to me, mostly. Two very minor thoughts:\r\n\r\n - Summary last (current) as a conclusion, or first as introduction for new readers?\r\n - \"Big Data\" techniques may give certain people an idea that we intend to use techniques which are overkill by six orders of magnitude for the sort of data processing / mining / analysis I think this will take, but I also wouldn't rule those out and for most people it is a pretty small distinction.\r\n\r\nSo: small edits if anything, and I don't think anything is missing for an initial specification. Figuring out the data processing pipeline(s) will be an exploratory project so there probably isn't much to define yet."
      }
    ]
  },
  {
    "number": 29,
    "title": "Memory Collector CI",
    "created_at": "2024-12-30T10:14:05Z",
    "closed_at": "2024-12-30T20:20:48Z",
    "labels": [],
    "url": "https://github.com/unvariance/collector/pull/29",
    "body": "Created a CI lifecycle for both components:\r\n- `ci-collector.yaml` --> CI for Collector component.\r\n- `ci-cpi-count.yaml` --> CI for CPI-Count component.\r\n- Added `Dockerfile` for both separately.\r\n- Cache and push in the Build and push step in the above workflows will work when Dockerhub Container registry/any other container registry provided (I will need to modify if it is not DockerHub). Need to add a login step as well when the container registry is created.\r\n- Docker tag `latest` will be created automatically when the image is build from the default branch (`main` in your case).\r\n- Please let me know if you need anything else I will add it :)",
    "comments_url": "https://api.github.com/repos/unvariance/collector/issues/29/comments",
    "author": "niminim998",
    "comments": [
      {
        "user": "yonch",
        "created_at": "2024-12-30T20:46:35Z",
        "body": "Ghcr looks good for pushing container images. Do you know if it would be possible to use GITHUB_TOKEN for this with\n‘’’\npermissions:\n  packages: write\n'''\n@niminim998   or do we need to set up something more?"
      }
    ]
  },
  {
    "number": 26,
    "title": "feat: Add binary & test comparing output of Linux `perf` and `elastic/go-perf` library",
    "created_at": "2024-12-25T21:38:33Z",
    "closed_at": "2024-12-26T04:38:34Z",
    "labels": [],
    "url": "https://github.com/unvariance/collector/pull/26",
    "body": "This patch addresses #23 .\r\n\r\nIt adds a new binary, `cpi-count`, that measures an artificial CPU-bound workload using two methods:\r\n- Linux `perf`\r\n- `elastic/go-perf` library\r\n\r\nWhen run, the binary prints out the measured cycles, instructions, and CPI, using both methods:\r\n```bash\r\n$ go build . && sudo ./cpi-count\r\n2024/12/25 13:26:10 GoPerf Cycles: 523916886, GoPerf Instrs: 2040367688, GoPerf CPI: 0.256776\r\n2024/12/25 13:26:10 PerfCmd Cycles: 560685244, PerfCmd Instrs: 2094182633, PerfCmd CPI: 0.267735\r\n```\r\n\r\nThe program is arranged in a simple, symmetric manner:\r\n- Start measurement `perf`\r\n- Start workload and measurement using `go-perf`\r\n- Stop `go-perf` measurement\r\n- Stop `perf` measurement.\r\n\r\nA test is also provided that asserts that the measured cycles, instructions, and CPI are similar across both measurement methods. For the raw cycle and instruction counts, we assert that the values are within 15% across the methods. For CPI, we assert that the values are within 8% across the methods.\r\n\r\nBoth the program and the test require elevated privileges (ie, `sudo`) to run, at least on my machine.\r\n\r\nOne interesting  finding is that if `runtime.LockOsThread` is not invoked prior to launching the measurements,  Linux `perf` seems to report ~4x the cycles and instructions on my machine, compared to measurements produced by `go-perf`. Funnily enough, CPI is relatively unaffected since both cycles and instructions are proportionally inflated. Still, we ensure that `runtime.LockOsThread` is invoked, both in the binary, as well as the provided test.\r\n\r\nNote: #23 calls for a Github action that can run the test, but I'd like to do that as a follow-on, if that's alright\r\n",
    "comments_url": "https://api.github.com/repos/unvariance/collector/issues/26/comments",
    "author": "tverghis",
    "comments": [
      {
        "user": "yonch",
        "created_at": "2024-12-26T04:39:57Z",
        "body": "Looks good! Thank you for this contribution!\r\n\r\nRegarding the GitHub Actions, of course."
      }
    ]
  }
]