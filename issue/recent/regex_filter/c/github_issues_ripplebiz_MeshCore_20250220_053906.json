[
  {
    "number": 23,
    "title": "T1000e code",
    "created_at": "2025-02-14T08:56:29Z",
    "closed_at": "2025-02-19T06:49:36Z",
    "labels": [],
    "url": "https://github.com/ripplebiz/MeshCore/pull/23",
    "body": "These files have not been taken from other projects (and I removed references from them to symbols defined in variant.h) ;)\r\nLiam is investigating for the bsp part ...",
    "comments_url": "https://api.github.com/repos/ripplebiz/MeshCore/issues/23/comments",
    "author": "fdlamotte",
    "comments": [
      {
        "user": "ripplebiz",
        "created_at": "2025-02-15T06:24:14Z",
        "body": "Hi,\r\nI don't see the platformio.ini changes, or board.json, variant.ccp (if needed?)\r\n"
      },
      {
        "user": "fdlamotte",
        "created_at": "2025-02-15T08:12:24Z",
        "body": "they are not ...\r\nthe idea was to put in the main repo the files that have no issues ...\r\nI'll rewrite bsp and then send the platform.io at the same time\r\n\r\nalso there is a need for the example files to support t1000e"
      },
      {
        "user": "fdlamotte",
        "created_at": "2025-02-15T17:06:21Z",
        "body": "Sorry for the quick response ... I was driving to the alps were we'll spend a week in family (12h is a little too much ;))\r\n\r\nI only sent the \"ok\" file (and the most important I think) because I think I won't be able to tackle with the BSP this week, but liam told he would eventually investigate. \r\n\r\nIf the helper files for the T1000e and LR1110 are in the main repo, he'll be able to deal with the bsp \"just by\" cloning your repo, adding his variant/board files and modify the platform.ini\r\n\r\nAlso I have prepared the MeshCoreT1000e repo to remove the helper files and only provide the platform.ini in the way I build things now (I tested with my fork, and it's ok). The MeshCoreT1000e repo will then be my base for a custom firmware dealing with the peripherals of the T1000e and including the companion radio\r\n\r\nWhatever you do with this PR, things are going great ! (And I'm ok with current situation concerning the two repos, I find it works good)\r\n\r\nregards,\r\n\r\nFlorent"
      }
    ]
  },
  {
    "number": 18,
    "title": "[Enhancement] Add more commands to companion radio protocol",
    "created_at": "2025-02-10T21:08:26Z",
    "closed_at": "2025-02-16T22:55:21Z",
    "labels": [],
    "url": "https://github.com/ripplebiz/MeshCore/issues/18",
    "body": "## Remove contact\nAbility to remove contacts\n\n## Set Self Position\nSet Lat & Lon that are included in advert packet\n\n",
    "comments_url": "https://api.github.com/repos/ripplebiz/MeshCore/issues/18/comments",
    "author": "recrof",
    "comments": [
      {
        "user": "ripplebiz",
        "created_at": "2025-02-11T00:16:50Z",
        "body": "OK, have implemented new command: CMD_SET_ADVERT_LATLON (14)\nDetails in the Wiki page"
      },
      {
        "user": "ripplebiz",
        "created_at": "2025-02-11T00:36:47Z",
        "body": "OK, now implemented the command: CMD_REMOVE_CONTACT (15)"
      }
    ]
  },
  {
    "number": 8,
    "title": "[feature request] companion app: ability to read/change configuration via binary communication protocol",
    "created_at": "2025-01-31T12:47:51Z",
    "closed_at": "2025-02-01T22:55:44Z",
    "labels": [],
    "url": "https://github.com/ripplebiz/MeshCore/issues/8",
    "body": "Ability to get/set whole configuration or only one key\nexample:\n\n```\nget whole configuration (backup)\nset whole configuration (restore)\n\nset frequency 915.8\nset BW 250\n...\n\nget frequency\nget BW\n...\n```",
    "comments_url": "https://api.github.com/repos/ripplebiz/MeshCore/issues/8/comments",
    "author": "recrof",
    "comments": [
      {
        "user": "ripplebiz",
        "created_at": "2025-02-01T01:18:19Z",
        "body": "OK, the CMD_APP_START -> RESP_CODE_SELF_INFO request/response now includes the radio params.\nSo app can get a full snapshot of the node info and radio config in that one, startup exchange.\n\nTo set radio params, there's new CMD_SET_RADIO_PARAMS frame.\n\nHave added to the Wiki page"
      }
    ]
  },
  {
    "number": 6,
    "title": "Update README.md",
    "created_at": "2025-01-29T21:23:11Z",
    "closed_at": "2025-01-30T04:14:54Z",
    "labels": [],
    "url": "https://github.com/ripplebiz/MeshCore/issues/6",
    "body": "Your readme.md could be enriched. Please QA this!:\n\nMeshCore\n\nMeshCore is a lightweight, portable C++ library that enables multi-hop packet routing for embedded projects using LoRa and other packet radios. It is designed for developers who want to create resilient, decentralized communication networks that work without the internet.\n\n🔍 What is MeshCore?\n\nMeshCore now supports Heltec V3 LoRa devices, allowing for easy flashing without the need to compile firmware manually. Users can flash a pre-built binary using tools like Adafruit ESPTool and interact with the network through a serial console.\nMeshCore provides the ability to create wireless mesh networks, similar to Meshtastic and Reticulum but with a focus on lightweight multi-hop packet routing for embedded projects. Unlike Meshtastic, which is tailored for casual and tactical LoRa communication, or Reticulum, which offers advanced encrypted networking, MeshCore balances simplicity with scalability, making it ideal for custom embedded solutions., where devices (nodes) can communicate over long distances by relaying messages through intermediate nodes. This is especially useful in off-grid, emergency, or tactical situations where traditional communication infrastructure is unavailable.\n\n⚡ Key Features\n\n✔️ Multi-Hop Packet Routing – Devices can forward messages across multiple nodes, extending range beyond a single radio's reach. MeshCore supports up to a configurable number of hops to balance network efficiency and prevent excessive traffic.\n✔️ Supports LoRa Radios – Works with Heltec, RAK Wireless, and other LoRa-based hardware.\n✔️ Decentralized & Resilient – No central server or internet required; the network is self-healing.\n✔️ Low Power Consumption – Ideal for battery-powered or solar-powered devices.\n✔️ Simple to Deploy – Pre-built example applications make it easy to get started.\n\n🎯 What Can You Use MeshCore For?\n\n- Off-Grid Communication: Stay connected even in remote areas.\n- Emergency Response & Disaster Recovery: Set up instant networks where infrastructure is down.\n- Outdoor Activities: Hiking, camping, and adventure racing communication.\n- Tactical & Security Applications: Military, law enforcement, and private security use cases.\n- IoT & Sensor Networks: Collect data from remote sensors and relay it back to a central location.\n\n🚀 How to Get Started\n- Flash the Firmware: Download the pre-built firmware binary for Heltec V3 and flash it using Adafruit ESPTool.\n- Install PlatformIO in Visual Studio Code (optional for developers who want to modify the firmware).\n- Download & Open the MeshCore repository.\n- Select a Sample Application: Choose from chat, ping, repeater, or admin test tools.\n- Monitor & Communicate using a serial console (e.g., Serial USB Terminal on Android).\n- Install PlatformIO in Visual Studio Code.\n- Download & Open the MeshCore repository.\n- Select a Sample Application: Choose from chat, ping, repeater, or admin test tools.\n- Build & Upload the firmware to your LoRa device.\n- Monitor & Communicate using the serial interface.\n\n📁 Included Example Applications\n📡 Chat Applications: Secure text communication between devices.\n📡 Ping Server & Client: Basic message exchange to test network connectivity.\n📡 Simple Repeater: Extends network coverage by relaying messages.\n📡 Test Admin: Monitors and manages repeaters remotely.\n📡 Clock Synchronization: Allows nodes to sync time from GPS-enabled devices for better network stability.\n📡 Chat Applications: Secure text communication between devices.\n📡 Ping Server & Client: Basic message exchange to test network connectivity.\n📡 Simple Repeater: Extends network coverage by relaying messages.\n📡 Test Admin: Monitors and manages repeaters remotely.\n\n🛠 Hardware Compatibility\n- MeshCore is designed for use with:\n- Heltec LoRa Boards (V3 recommended, now with direct firmware flashing support)\n- RAK Wireless Modules (e.g., RAK4631)\n- Other LoRaWAN-Compatible Boards\n\nAdditionally, users can interact with MeshCore through a serial terminal since there is currently no dedicated Android or iOS app. MeshCore is designed for use with:\n- Heltec LoRa Boards (V3 recommended)\n- RAK Wireless Modules (e.g., RAK4631)\n- Other LoRaWAN-Compatible Boards\n\n📜 License\nMeshCore is open-source software released under the MIT License. You are free to use, modify, and distribute it for personal and commercial projects.\n\n📞 Get Support\n- Check out the GitHub Issues page to report bugs or request features\n- Explore Serial Console Commands: Commands such as advert, list, send, and clock sync allow manual interaction with nodes.\n\n\n",
    "comments_url": "https://api.github.com/repos/ripplebiz/MeshCore/issues/6/comments",
    "author": "macvsogjc",
    "comments": [
      {
        "user": "ripplebiz",
        "created_at": "2025-01-30T02:27:28Z",
        "body": "Wow, that's awesome. Thanks for putting that together.\nDo you mind if I update the actual readme with this? I'll have to see if the markdown works with copy/paste(?)"
      },
      {
        "user": "ripplebiz",
        "created_at": "2025-01-30T04:14:40Z",
        "body": "OK, I have incorporate this into the Readme. Looks much better now, thanks."
      }
    ]
  }
]