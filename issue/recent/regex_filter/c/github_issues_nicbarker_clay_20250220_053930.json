[
  {
    "number": 275,
    "title": "Fix inverted condition for setting booleanWarnings.maxTextMeasureCacheExceeded",
    "created_at": "2025-02-18T09:12:26Z",
    "closed_at": "2025-02-19T20:22:35Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/275",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/275/comments",
    "author": "mizmar",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-19T20:22:29Z",
        "body": "Great catch, always easy to accidentally forget `!`. Thanks! 😁"
      }
    ]
  },
  {
    "number": 270,
    "title": "[Bindings/Odin] add missing bindings, fix binding, improve ergonomics of userdata, conform to stricter style flags",
    "created_at": "2025-02-17T19:22:15Z",
    "closed_at": "2025-02-17T20:16:31Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/270",
    "body": "- Adds bindings for all public APIs in clay.h to the Odin bindings.\r\n- Fixes the binding for `Initialize`, it should return a pointer to the\r\n  context.\r\n- Use `rawptr` for userdata arguments, it's a more ergonomic type for\r\n  this use case.\r\n- Many Odin users build with these flags (-vet -strict-style) and it would turn up errors here. \r\n   It is therefore advised to build libraries to conform to the strictest Odin flags.\r\n\r\n# Additional improvements\r\n\r\n- Odin prefers tabs for indentation, but most of the bindings currently do spaces, any reason for this? There is even an Odin flag to strictly check for tabs with `-vet-tabs`\r\n- `clay.UI(}.configure({ id = clay.ID(\"foo\") })` could be made to be `clay.UI()({ id = clay.ID(\"foo\") })`, by just returning the function directly instead of wrapped in a struct, I don't mind the current way that much, but thought I should mention it.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/270/comments",
    "author": "laytan",
    "comments": [
      {
        "user": "laytan",
        "created_at": "2025-02-17T19:25:57Z",
        "body": "Ah I just saw #175 , that's embarrassing. I think this is more ready to go, but I don't want to take away credit/work from there, so if you want to continue that PR just close this."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-17T19:43:36Z",
        "body": "All good, we can co-author it and the API has drifted a lot since that PR was opened 👍"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-17T19:44:44Z",
        "body": "This is a fantastic idea to reduce the boilerplate btw! Will be great not having `configure` repeated everywhere!"
      }
    ]
  },
  {
    "number": 269,
    "title": "Make Clay_MinMemorySize accurate based on word cache count",
    "created_at": "2025-02-17T16:12:07Z",
    "closed_at": "2025-02-19T20:21:14Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/269",
    "body": "This PR just ensures that MinMemorySize is accurate according to the `maxMeasureTextWordCacheCount` by ensuring `fakeContext` shares the same value as the `currentContext`. Found this after constantly running out of memory when dynamically adding lots of text.\r\n\r\nThanks for the amazing library!",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/269/comments",
    "author": "alecks",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-19T20:20:57Z",
        "body": "Hello, great catch! Thanks for picking this up 🙂"
      },
      {
        "user": "dazKind",
        "created_at": "2025-02-19T23:03:19Z",
        "body": "I cloned 3 hours ago and was about to PR this. You guys rock! :D"
      }
    ]
  },
  {
    "number": 266,
    "title": "[Renderers/Raylib] Convert Image usage to Texture",
    "created_at": "2025-02-16T16:12:06Z",
    "closed_at": "2025-02-16T19:56:26Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/266",
    "body": "Some people in Discord were getting confused about this:\r\n\r\nI dont think `Image` is meant to be used here but instead `Texture` (as used correctly for the Clay website, etc)\r\n`Image` is on the CPU, `Texture` is on the GPU\r\n\r\nAdditionally,\r\n`LoadImage()` + `LoadTextureFromImage()` without `UnloadImage()` causes a memory leak\r\nraylib has a separate `LoadTexture()` that does the load+send to gpu+unload for you to simplify this",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/266/comments",
    "author": "CrackedPixel",
    "comments": [
      {
        "user": "TimothyHoytBSME",
        "created_at": "2025-02-16T16:16:36Z",
        "body": "The only issue I see, is the readme covers other renders, (not raylib specifically) that do not use Textures. "
      },
      {
        "user": "CrackedPixel",
        "created_at": "2025-02-16T16:21:51Z",
        "body": "> The only issue I see, is the readme covers other renders, (not raylib specifically) that do not use Textures.\r\n\r\nYep, that is a good point. What do you think of it now? I figured it was meant to be whatever format other renders/loaders use and so it would make it more clear they can use what they want"
      },
      {
        "user": "TimothyHoytBSME",
        "created_at": "2025-02-16T16:53:19Z",
        "body": "It's a tough call here, one Nic will likely need to make. Personally, I would probably leave Image in the readme but have a comment and/or description about Texture for RayLib anytime image is mentioned... I'm really not sure what would be best for the general population, or for the future.\n\nI would leave it like this and let Nic have a look."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-16T19:55:21Z",
        "body": "Just tried it out and it works great, thanks for the work here!"
      }
    ]
  },
  {
    "number": 264,
    "title": "[Examples/SDL2] opengl, antialiasing, vsync, alpha blending",
    "created_at": "2025-02-16T09:29:39Z",
    "closed_at": "2025-02-16T20:15:58Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/264",
    "body": "Modified the SDL2 example. Changed the window/renderer creation to include antialiasing, vsync, and alpha blending. Let me know if you would like to make any of this conditional, as it requires enabling openGL.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/264/comments",
    "author": "TimothyHoytBSME",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-16T20:15:38Z",
        "body": "Great work, this is looking awesome! SDL2 pretty much up to par with the Raylib renderer 😁"
      }
    ]
  },
  {
    "number": 261,
    "title": "[Renderers/SDL3] Enable sdl3 alpha blending",
    "created_at": "2025-02-14T17:43:40Z",
    "closed_at": "2025-02-16T19:48:20Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/261",
    "body": "SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND) enables alpha blending in SDL's renderer. Without this, alpha values in colors won't work properly - everything will be rendered as fully opaque regardless of the alpha value.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/261/comments",
    "author": "irfan-zahir",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-16T19:47:13Z",
        "body": "Thank you for this fix!"
      }
    ]
  },
  {
    "number": 256,
    "title": "[Renderers/SDL3] Use text engine to render text on the SDL3 renderer",
    "created_at": "2025-02-10T21:51:50Z",
    "closed_at": "2025-02-12T20:19:36Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/256",
    "body": "This fixes #254  by ensuring the text is rendered with a text engine.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/256/comments",
    "author": "ernestoyaquello",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-12T20:19:30Z",
        "body": "Thank you for the great work here!"
      }
    ]
  },
  {
    "number": 255,
    "title": "[Core] Fix a bug when trying to enable debug view with too many elements in the layout.",
    "created_at": "2025-02-10T08:26:41Z",
    "closed_at": "2025-02-10T20:35:51Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/255",
    "body": "Check whether the maximum number of elements has been exceeded before rendering the debug view\r\n\r\nIf the maximum number of elements is exceeded, `Clay__CloseElement` does not append `openLayoutElement->childrenOrTextContent.children.elements`, which in turn causes a segfault (accessing `NULL`) when trying to render the debug view for that element. In addition, if the maximum number of elements was not exceeded, but the debug view rendering has exceeded it, a different warning message is displayed.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/255/comments",
    "author": "FelixBreitweiser",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-10T20:35:37Z",
        "body": "Great pickup on this subtle issue, thank you!"
      }
    ]
  },
  {
    "number": 252,
    "title": "[Bindings/Odin] Add get/set current context method to Odin bindings",
    "created_at": "2025-02-07T18:48:46Z",
    "closed_at": "2025-02-08T05:51:56Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/252",
    "body": "This is useful for hot-reloading and was missing from the bindings. I don't know how much of the Context you want to expose, but I assume it should be opaque.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/252/comments",
    "author": "nadako",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-08T05:51:34Z",
        "body": "Hello, thanks for the work! We indeed haven't settled on a proper public / private API distinction in context, so will be best to leave opaque for now 🙂"
      }
    ]
  },
  {
    "number": 251,
    "title": "[Core] add CLAY_DISABLE_SIMD flag to conditionally disable SIMD includes",
    "created_at": "2025-02-06T18:26:11Z",
    "closed_at": "2025-02-06T20:41:38Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/251",
    "body": "`#include <emmintrin.h>` was problematic for my use case as emmintrin.h depends on libc. \r\nI propose adding a CLAY_DISABLE_SIMD flag to conditionally disable SIMD includes to solve this kind of issues.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/251/comments",
    "author": "johan0A",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-06T20:40:21Z",
        "body": "Thanks, this is a good idea and I should have included it initially. Just OOI, which compiler are you using? If you're generating a lib for zig to use via clang, you should be able to avoid the libc include by using `-ffreestanding` flag"
      },
      {
        "user": "emoon",
        "created_at": "2025-02-06T20:44:10Z",
        "body": "I ran into this issue as well. Because the Rust bind generator does recursive visit of the included files when generating bindings and `emmintrin.h` included stdlib.h and other stuff which drag into pthread symbols and what not :( I managed to get rid of most of it as the bindgen tool allow you to blacklist with a regex, but a define will help more."
      },
      {
        "user": "johan0A",
        "created_at": "2025-02-06T22:31:18Z",
        "body": "> you should be able to avoid the libc include by using `-ffreestanding` flag   \r\n\r\nnice, ill do that instead then, thanks"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-06T22:33:38Z",
        "body": "It's something we'll need to make clear to library maintainers, because it's not an obvious or well understood flag 😅"
      }
    ]
  },
  {
    "number": 250,
    "title": "ncurses renderer",
    "created_at": "2025-02-05T19:29:07Z",
    "closed_at": "2025-02-05T19:56:40Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/250",
    "body": "I understand that the nature of this question is at best uninformed.\nBut would it make sense to let clay treat text terminal as yet another renderer?\n\n(also there is this super hacky term graphics lib called `notcurses` which is quite full featured but seems to be lacking direction)\n\nFeel free to close issue :-)",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/250/comments",
    "author": "telamon",
    "comments": [
      {
        "user": "FintasticMan",
        "created_at": "2025-02-05T19:54:13Z",
        "body": "Check out #168!"
      },
      {
        "user": "telamon",
        "created_at": "2025-02-05T19:56:40Z",
        "body": "Wow, thank you!"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-05T20:24:05Z",
        "body": "Just for context, I'm behind on reviewing and merging PRs but would love to get the terminal renderer in sometime in the next few weeks 🙂"
      }
    ]
  },
  {
    "number": 247,
    "title": "[Bindings/csharp] Create csharp bindings README",
    "created_at": "2025-02-01T16:17:54Z",
    "closed_at": "2025-02-10T06:09:30Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/247",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/247/comments",
    "author": "Orcolom",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-10T06:09:06Z",
        "body": "Hello, and great work here!"
      }
    ]
  },
  {
    "number": 246,
    "title": "[Renderers/SDL3] Add image rendering and scissor support to SDL3 renderer",
    "created_at": "2025-01-31T09:04:06Z",
    "closed_at": "2025-02-12T21:02:06Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/246",
    "body": "Implements `CLAY_RENDER_COMMAND_TYPE_IMAGE` for the SDL3 renderer using SDL_image essentially identically to how it's done in SDL2 (see #208).\r\n\r\nAlso implements `CLAY_RENDER_COMMAND_TYPE_SCISSOR_START`/`CLAY_RENDER_COMMAND_TYPE_SCISSOR_END` based on the similar implementation in the SDL2 renderer.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/246/comments",
    "author": "steviegt6",
    "comments": [
      {
        "user": "steviegt6",
        "created_at": "2025-02-07T01:53:42Z",
        "body": "When I first implemented images, the example was split and I just inserted an image to render. Now the SDL3 example uses the video demo and the image example in the SDL2 example also goes unused, I'll leave the loading there as an example but I'm not sure what the ideal change to make it."
      },
      {
        "user": "ernestoyaquello",
        "created_at": "2025-02-09T18:17:05Z",
        "body": "Is there a reason why we pass a surface and then convert it into a texture? The SDL_image library allows us to get a texture directly for any image (`IMG_LoadTexture`, etc), so that seems much more efficient. 🤔"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-09T20:17:01Z",
        "body": "Thank you for the great work here, we just get the DestroyTexture in to prevent the memory getting leaked, then we can merge it 😁"
      },
      {
        "user": "steviegt6",
        "created_at": "2025-02-14T01:45:20Z",
        "body": "Thanks for merging; sorry I didn't get to the additional changes myself! I've been busy with work."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-14T07:11:40Z",
        "body": "That's totally fine, thank you for the good work!"
      }
    ]
  },
  {
    "number": 245,
    "title": "[Renderers/SDL2] Add rounded rectangle support to sdl2 renderer; feature-completes sdl2 renderer",
    "created_at": "2025-01-31T08:37:24Z",
    "closed_at": "2025-02-06T22:26:49Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/245",
    "body": "Ports over the existing rounded rectangle-rendering code for the SDL3 renderer to the SDL2 renderer, completing its missing features list.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/245/comments",
    "author": "steviegt6",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-02-06T21:49:32Z",
        "body": "Fantastic work, thank you so much for this!"
      }
    ]
  },
  {
    "number": 239,
    "title": "Copy elementId in Clay__AddHashMapItem() in case underlying stringId has changed",
    "created_at": "2025-01-29T20:39:18Z",
    "closed_at": "2025-01-29T21:20:14Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/239",
    "body": "If the string reference passed to an element id has changed between frames (e.g. moved), then the reference stored in the hash item can become stale. This change makes sure that we're always using the latest value.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/239/comments",
    "author": "monodop",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-29T21:20:04Z",
        "body": "Great catch! Thanks 🎉"
      }
    ]
  },
  {
    "number": 233,
    "title": "Fix: Clay_MinMemorySize() and Clay_Initialize() now report same memory size when using non-default MaxElementCount",
    "created_at": "2025-01-28T08:28:37Z",
    "closed_at": "2025-01-29T00:09:07Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/233",
    "body": "Normalized usage of `Clay__defaultMaxElementCount` and `Clay__defaultMaxMeasureTextWordCacheCount`\r\n\r\nThis is important - especially - between calls to `Clay_MinMemorySize()` and `Clay_Initialize()` as there was a bug that caused initialization errors when a non-default value is used (in my case `Clay_SetMaxElementCount(8192*2);`).\r\n\r\nRepo:\r\n\r\n```\r\nint main(int argc, char* argv[])\r\n{\r\n    Clay_SetMaxElementCount(8192 * 2);\r\n    uint64_t totalMemorySize = Clay_MinMemorySize();\r\n    Clay_Arena clayMemory = Clay_CreateArenaWithCapacityAndMemory(totalMemorySize, malloc(totalMemorySize));\r\n    auto ctx = Clay_Initialize(clayMemory, { (float)GetScreenWidth(), (float)GetScreenHeight() }, { HandleClayErrors });\r\n    auto next = ctx->internalArena.nextAllocation;\r\n    long diff = next - totalMemorySize; //diff will show a negative number, and several internal arrays will fail to allocate\r\n}\r\n```\r\n\r\nI did note the` // TODO: Fix this` so if there are some other plans to address this please ignore.\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/233/comments",
    "author": "noflashbang",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-28T23:24:01Z",
        "body": "Thank you for catching this one, great work!"
      }
    ]
  },
  {
    "number": 232,
    "title": "[Renderers/SDL2] Don't take addresses of temporaries.",
    "created_at": "2025-01-28T06:57:39Z",
    "closed_at": "2025-01-29T00:09:41Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/232",
    "body": "Fixes compilation errors when including the renderer in C++ sources.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/232/comments",
    "author": "radiant64",
    "comments": [
      {
        "user": "radiant64",
        "created_at": "2025-01-28T15:40:50Z",
        "body": "> The extra block isn't needed, as it doesn't affect the lifetime of the `rect` variable.\r\n\r\nYou're absolutely right about that; removed."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-28T23:25:37Z",
        "body": "Thanks for opening this one, I forget that this trick is one of those C only things 🙂"
      }
    ]
  },
  {
    "number": 220,
    "title": "[Renderers/SDL3] Add borders and rounded borders functionality.",
    "created_at": "2025-01-23T03:16:33Z",
    "closed_at": "2025-01-26T01:39:35Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/220",
    "body": "Added borders, including rounded borders, one of the missing features for the SDL3 renderer.\r\nAlso added examples in the SDL3 example.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/220/comments",
    "author": "ArnauNau",
    "comments": [
      {
        "user": "ArnauNau",
        "created_at": "2025-01-23T13:39:39Z",
        "body": "Further testing showed more works needs to be done:\r\n - [x] Corners are drawn outwards instead of inwards, like regular borders. \r\n - [x] 'High' (but within reasonable) thickness values also make corners offset their position.\r\n\r\nMarking the PR as a draft until it's fixed."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-23T20:35:23Z",
        "body": "Awesome job, thank you for all this SDL3 work!"
      },
      {
        "user": "ArnauNau",
        "created_at": "2025-01-23T21:38:47Z",
        "body": "> Awesome job, thank you for all this SDL3 work!\n\nThank you for making Clay! I've (obviously) been playing around with it and I'm loving it"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-26T01:39:29Z",
        "body": "Just checked it out locally, looking great! Thanks for the hard work here 😁"
      }
    ]
  },
  {
    "number": 219,
    "title": "[Renderers/SDL3] Add rounded corners rectangle functionality",
    "created_at": "2025-01-22T04:05:18Z",
    "closed_at": "2025-01-22T20:30:24Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/219",
    "body": "Added one of the missing features for the SDL3 renderer.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/219/comments",
    "author": "ArnauNau",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-22T20:22:14Z",
        "body": "This is looking so good, well done! 😎"
      }
    ]
  },
  {
    "number": 216,
    "title": "[CMake] Make Examples Optional in CMAKE",
    "created_at": "2025-01-20T09:22:53Z",
    "closed_at": "2025-01-26T02:05:45Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/216",
    "body": "Makes including the examples optional.  SDL2/SDL3 specifically have long download/build times.  If they aren't being used, then this can dramatically speed up build times.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/216/comments",
    "author": "CJFEdu",
    "comments": [
      {
        "user": "FintasticMan",
        "created_at": "2025-01-20T09:31:01Z",
        "body": "I'm not sure I understand what use case exists for running CMake with the flag disabled... The only thing the CMake project does is compile the examples, so with it disabled, CMake does nothing at all."
      },
      {
        "user": "CJFEdu",
        "created_at": "2025-01-20T13:54:59Z",
        "body": "I'm not a CMAKE expert by any means, so I could be doing the following wrong.  I'm using FetchContent to add Clay to my project.  This adds the examples, which then adds all the dependencies. \r\n\r\nThat being said, this was just a quick solution to my specific problem.  A more practical solution would probably be to have the option take a string to allow you to select which example you want to build.  For example, someone that only wants to build the Raylib example shouldn't be required to download and build both versions of SDL."
      },
      {
        "user": "Robert-M-Muench",
        "created_at": "2025-01-21T20:25:11Z",
        "body": "See #213 same problem, same suggestion."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-21T20:42:59Z",
        "body": "Thanks for figuring this out! I'm fine with this as long as we flip the default option to `ON`, as I think it could be confusing if someone clones the repo and can't figure out why the examples won't build by default 🙂"
      },
      {
        "user": "CJFEdu",
        "created_at": "2025-01-22T18:39:04Z",
        "body": "I added an update that makes the CMAKE build options more granular.  I set build all examples to OFF as a default since downloading all of SDL 2 and 3 seems excessive.  Instead, the demo from the video and the website are turned on by default.\r\n\r\nThese options should probably be included in the ReadMe somewhere, but I wasn't sure where the logical place to put it would be."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-25T02:32:57Z",
        "body": "Sorry about the back and forth, but I think it would be best if we left the examples `ON` by default with the option to switch them off, both to prevent confusion and also because we build the examples through github actions on PRs to make sure they work 🙂"
      },
      {
        "user": "Robert-M-Muench",
        "created_at": "2025-01-25T09:54:05Z",
        "body": "That's OK as well. As long as there is a way I can use the CMAKE stuff and configure it somehow to only use the CLAY code."
      },
      {
        "user": "CJFEdu",
        "created_at": "2025-01-25T14:48:01Z",
        "body": "@nicbarker  Done. "
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-26T01:46:12Z",
        "body": "Looks good to me, thanks for the work here! 🙂"
      }
    ]
  },
  {
    "number": 212,
    "title": "SetMesureText and SetQueryScrollOffset takes userData",
    "created_at": "2025-01-19T14:20:53Z",
    "closed_at": "2025-01-19T21:59:02Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/212",
    "body": "Fixes #63 \r\n\r\nThis is a breaking change due to new parameter. I set it to `0` in all cases except the `SDL2` case where I used it as an example of passing the font data.\r\n\r\nAnother change now is because the userData is set inside the context object `Clay_Initialize` has to be called before calling this.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/212/comments",
    "author": "emoon",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-19T20:13:57Z",
        "body": "Thank you! I was literally implementing this last night 😁\r\nI'll just implement passing the raylib fonts through in the same way as the SDL ones and we should be good to go.\r\n\r\n> Another change now is because the userData is set inside the context object Clay_Initialize has to be called before calling this.\r\n\r\nYeah, it's not super obvious the required order. Soon I think we'll change initialize to take a config struct that includes both the dimensions and the measure text function, which will get auto init to NULL if not provided 😁"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-19T20:30:49Z",
        "body": "Actually, I think it's fine to just merge this now and fix up the raylib example later - I'd like to switch the fontId to a `uintptr_t` anyway, as it's currently not very ergonomic to use."
      }
    ]
  },
  {
    "number": 211,
    "title": "examples/SDL2-video-demo compilation error",
    "created_at": "2025-01-19T08:39:10Z",
    "closed_at": "2025-01-19T14:02:54Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/211",
    "body": "Error log:\nCMake Error at CMakeLists.txt:40 (target_link_libraries):\n  Target \"SDL2_video_demo\" links to:\n\n    SDL2_ttf::SDL2_ttf-static\n\n\nSolution:\n include(FetchContent)\n set(FETCHCONTENT_QUIET FALSE)\n+set(BUILD_SHARED_LIBS OFF CACHE BOOL \"Build static libraries\" FORCE)\n\n FetchContent_Declare(",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/211/comments",
    "author": "siliyuan6",
    "comments": [
      {
        "user": "ppebb",
        "created_at": "2025-01-19T08:50:46Z",
        "body": "Are you attempting to run cmake on the CMakeLists.txt file contained within the SDL2-video-demo folder itself? That causes the same issue for me, but if you use the main CMakeLists.txt at the root of the project, it will properly generate a makefile for the demo within the `examples/SDL2-video-demo` directory, which you can then compile."
      },
      {
        "user": "siliyuan6",
        "created_at": "2025-01-19T14:02:51Z",
        "body": "> Are you attempting to run cmake on the CMakeLists.txt file contained within the SDL2-video-demo folder itself? That causes the same issue for me, but if you use the main CMakeLists.txt at the root of the project, it will properly generate a makefile for the demo within the `examples/SDL2-video-demo` directory, which you can then compile.\n\nIt's exactly what you said."
      }
    ]
  },
  {
    "number": 210,
    "title": "Add external link to zig bindings",
    "created_at": "2025-01-17T14:36:32Z",
    "closed_at": "2025-01-18T08:43:23Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/210",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/210/comments",
    "author": "Zettexe",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-18T08:43:19Z",
        "body": "Thanks for adding these!"
      }
    ]
  },
  {
    "number": 208,
    "title": "Extend SDL2 Renderer and SDL2-video-demo",
    "created_at": "2025-01-17T02:39:08Z",
    "closed_at": "2025-01-18T08:42:19Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/208",
    "body": "This PR Implements CLAY_RENDER_COMMAND_TYPE_IMAGE and CLAY_RENDER_COMMAND_TYPE_BORDER for SDL2. It uses SDL_image for loading an example PNG.\r\n\r\nFor CLAY_IMAGE, the imageData provided is just the SDL surface returned by SDL_image's load functions.\r\n\r\nCorner radii have not been implemented because drawing circular geometry with SDL2 requires a lot of work from any examples I found. Perhaps it can come in a later PR.\r\n\r\nBoth elements have been added to SDL-video-demo to provide examples, although I wasn't sure where to put them or what to do so I just put them in the top left corner.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/208/comments",
    "author": "ppebb",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-18T08:32:11Z",
        "body": "Great job, thanks for the good work on this!"
      }
    ]
  },
  {
    "number": 200,
    "title": "[Core] Don't divide zero by zero",
    "created_at": "2025-01-14T15:31:43Z",
    "closed_at": "2025-01-14T21:06:23Z",
    "labels": [
      "bug",
      "Attempted Fix"
    ],
    "url": "https://github.com/nicbarker/clay/pull/200",
    "body": "I was getting crashes here with floating point exceptions enabled.\r\n\r\nThis may not be a good fix but at least the resulting layout looks fine again, I can put together a repro if you think this is the wrong way to do it.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/200/comments",
    "author": "mikejsavage",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-14T20:26:55Z",
        "body": "Hey @mikejsavage, thanks for the good catch! I actually noticed another bug related to downsizing when I was investigating thing, would you be able to try out my change and confirm it fixes your bug correctly? 🙂"
      },
      {
        "user": "mikejsavage",
        "created_at": "2025-01-14T20:43:46Z",
        "body": "Yep your change works too, and produces identical results to what I tried"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-14T21:06:14Z",
        "body": "Awesome! Will merge this now."
      }
    ]
  },
  {
    "number": 181,
    "title": "[Core] Add a function to reset text measurement cache",
    "created_at": "2025-01-10T09:31:27Z",
    "closed_at": "2025-01-13T06:26:46Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/181",
    "body": "Allows clearing the text measurement cache if needed.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/181/comments",
    "author": "monodop",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-13T06:26:41Z",
        "body": "Looks good to me! Thanks for the work here 🙂"
      }
    ]
  },
  {
    "number": 179,
    "title": "[Core] Use CLAY_PACKED_ENUM for all enum types",
    "created_at": "2025-01-10T01:05:14Z",
    "closed_at": "2025-02-10T21:51:43Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/nicbarker/clay/issues/179",
    "body": "Currently some enum types such as `Clay_TextElementConfigWrapMode` and `Clay_PointerCaptureMode` are defined using `enum` instead of `CLAY_PACKED_ENUM`. I spent like 2 days trying to figure out why text wrapping wasn't working since I assumed all enum types were of type uint8_t.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/179/comments",
    "author": "Zettexe",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-10T01:43:09Z",
        "body": "@Zettexe Sorry you had to deal with that! I think it's a good call, trying to make all the enums a consistent size (at least within one platform). Btw great work on the zig bindings, the ergonomics are looking amazing!"
      },
      {
        "user": "Zettexe",
        "created_at": "2025-01-10T01:52:53Z",
        "body": "> Sorry you had to deal with that!\r\n\r\nNo worries, if anything it gave me some much needed debugger practice. \r\n> Btw great work on the zig bindings, the ergonomics are looking amazing!\r\n\r\nThank you for the kind words. "
      },
      {
        "user": "sayedMurtadha",
        "created_at": "2025-01-11T14:37:40Z",
        "body": "@nicbarker I opened a pull request for this issue since it is a very low effort and does not require too many changes, if that is okay, thanks"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-10T21:51:43Z",
        "body": "This was completed as part of #240 🙂"
      }
    ]
  },
  {
    "number": 174,
    "title": "[Core] Multi instance support",
    "created_at": "2025-01-08T08:57:26Z",
    "closed_at": "2025-01-09T20:08:48Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/174",
    "body": "* Moves global variables into Clay_Context\r\n* Adds Clay_GetCurrentClayContext() and Clay_SetCurrentClayContext() to determine which context to use. This is stored in thread_local \r\n* Clay_Initialize automatically sets (and returns) the current context, so that you don't need to worry about it if you don't care about it\r\n* All public and internal functions use GetCurrentClayContext() internally, to avoid polluting function signatures with new argument\r\n* maxElementCount & max cache moved to arena, because I was having some issues getting the MinMemorySize function to work properly early on if it was in the context, but this can probably be fixed easily.\r\n* maxElementCount & max cache can now only be set for initial values, they are made concrete within Clay_Initialize and cannot be changed for the arena/context after this point\r\n\r\nThis appears to be working on my local branch, but maybe could use some more testing\r\n\r\nTODO:\r\n- [x] update generators\r\n- [ ] tests\r\n- [x] add define statement in case thread_local doesn't exist?\r\n- [x] click/hover callbacks probably need some more thought, could these ever be called with the wrong context?\r\n- [x] I accidentally modified some signatures that shouldn't be modified. they should be reverted to the original signatures\r\n- [x] update docs\r\n- [x] move struct initializers to clay_initialize\r\n- [x] Odin bindings updates",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/174/comments",
    "author": "monodop",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-08T21:22:08Z",
        "body": "👀 "
      }
    ]
  },
  {
    "number": 169,
    "title": "[Documentation] Updated example for Clay_SetPointerState",
    "created_at": "2025-01-06T14:25:57Z",
    "closed_at": "2025-01-08T20:56:25Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/169",
    "body": "Once again 😅🤓 found slightly out of date documentation in the `README.md` for examples when using `CLAY_IMAGE`\r\nSeems like the struct was changed to use `Clay_Dimensions` so the examples no longer worked. ",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/169/comments",
    "author": "davidstyrbjorn",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-08T20:56:13Z",
        "body": "Thank you @davidstyrbjorn, you're doing great work here 🤓"
      }
    ]
  },
  {
    "number": 167,
    "title": "[Documentation] Updated example for `Clay_SetPointerState`",
    "created_at": "2025-01-05T20:17:23Z",
    "closed_at": "2025-01-05T22:30:26Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/167",
    "body": "When working with the documentation/readme file i found a small typo/fault! \r\nUpdated and now it is up to date with the current implementation! ",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/167/comments",
    "author": "davidstyrbjorn",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T22:29:30Z",
        "body": "Thanks @davidstyrbjorn, appreciate it! 🙂"
      }
    ]
  },
  {
    "number": 163,
    "title": "[Core] Bug in text wrapping at very narrow widths",
    "created_at": "2025-01-04T11:23:08Z",
    "closed_at": "2025-01-05T01:34:36Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/163",
    "body": "fixes #99",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/163/comments",
    "author": "bullyingteen",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T01:09:23Z",
        "body": "Absolutely amazing job finding this! 😁"
      }
    ]
  },
  {
    "number": 162,
    "title": "[Renderers/Web] treat RenderCommand.commandType as uint8_t instead of uint32_t",
    "created_at": "2025-01-04T09:28:55Z",
    "closed_at": "2025-01-05T01:34:16Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/162",
    "body": "This PR fixes the issue when RenderCommand.commandType has garbage if RenderCommand's padding memory is not zeroed.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/162/comments",
    "author": "bullyingteen",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T01:08:25Z",
        "body": "Thanks for the hard work tracking this down! 🙂\r\nThis LGTM as a short term fix, I definitely want to do another pass on how the types are handled with padding, as it feels pretty fragile at the moment."
      }
    ]
  },
  {
    "number": 155,
    "title": "[Core] Fix errors due to cast to same non-trivial type",
    "created_at": "2025-01-03T01:22:10Z",
    "closed_at": "2025-01-05T20:26:53Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/155",
    "body": "Add a wrapper type with a single element so that both initialiser lists and variables can be passed to the config macros without requiring a cast.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/155/comments",
    "author": "FintasticMan",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-04T08:42:29Z",
        "body": "Thank you for this macro magic! I will play around with this locally and hopefully merge tomorrow 👍 "
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T20:26:49Z",
        "body": "Looks good to me, thanks for the great work!"
      }
    ]
  },
  {
    "number": 152,
    "title": "[Core] Standardise number types to int32_t for array indices, lengths and capacities",
    "created_at": "2025-01-02T21:55:32Z",
    "closed_at": "2025-01-02T22:24:32Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/152",
    "body": "This PR modifies a number of internal and external number types that represent array indices, lengths and capacities to `int32_t`.\r\n\r\nThe reason that we've decided to use a signed type is that it's very common to do `<` and `>` comparisons with these fields, and using unsigned types creates a bit of a footgun where `0 - 1 > 0 == true`. It's very easy to accidentally decrement past zero, and this can create accidental logic bugs where comparisons return values that they shouldn't.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/152/comments",
    "author": "nicbarker",
    "comments": [
      {
        "user": "FintasticMan",
        "created_at": "2025-01-02T22:09:27Z",
        "body": "There are still a number of sign comparison issues on lines: 1416, 1519, 2998, 3261, 3263. EDIT: I messed up the line numbers. They should be good now!"
      }
    ]
  },
  {
    "number": 144,
    "title": "[Core] Add check for supported C/C++ versions",
    "created_at": "2025-01-02T11:53:39Z",
    "closed_at": "2025-01-08T21:05:50Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/144",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/144/comments",
    "author": "FintasticMan",
    "comments": [
      {
        "user": "VisenDev",
        "created_at": "2025-01-02T21:22:44Z",
        "body": "Why restrict versions newer than C99? I don't think there have been any major breaking changes in the standard. \r\n\r\n(If anything, it seems like we should warn about using C89 accidentally, because that will definitely break and give some weird error messages)"
      },
      {
        "user": "FintasticMan",
        "created_at": "2025-01-02T21:24:37Z",
        "body": "This allows all C versions C99 or newer, there's a `!` not operator in front of the whole condition."
      },
      {
        "user": "VisenDev",
        "created_at": "2025-01-02T21:25:24Z",
        "body": "Ahaha, I didn't see that, my bad"
      },
      {
        "user": "FintasticMan",
        "created_at": "2025-01-02T21:30:13Z",
        "body": "No problem, it's easily missed!"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-08T21:05:46Z",
        "body": "Works like a charm, amazing work!"
      }
    ]
  },
  {
    "number": 143,
    "title": "[Core] Fix default struct initialiser in C++",
    "created_at": "2025-01-02T11:29:34Z",
    "closed_at": "2025-01-05T20:46:21Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/143",
    "body": "This means we don't need `-Wno-error=missing-braces` for the C++ project anymore.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/143/comments",
    "author": "FintasticMan",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T20:43:13Z",
        "body": "This is such a great idea for how to fix this problem! Awesome job 😁 "
      }
    ]
  },
  {
    "number": 139,
    "title": "Dynamic Clay_String issue.",
    "created_at": "2025-01-01T03:13:46Z",
    "closed_at": "2025-01-01T06:51:03Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/139",
    "body": "I am attempting to draw a simple text element in a C++ project (with raylib as renderer). When I inline a string value ( const char* mystring = \"foo\" ) it works no problem, I see the text draw to the screen. The issue arises when instead of using a hardcoded c string, I create one by converting from a c++ std::string via .c_str(). \r\n\r\nThe reason I am so perplexed is because when looking in the debugger both the C only way and C++ way have identical values and the final Clay_String looks the exact same. Same .chars and same .length when I look in the Clay_String struct. I also checked to confirm that both methods produce a correct null-terminated c string.\r\n\r\nIm purposefully not using CLAY_STRING macro because it isnt meant for dynamic passed-in strings, but I figured doing it like below would work. I know clay is intended as a C only library, but just wondering why given seemingly identical input this different behavior arises.\r\n\r\nThank you for your hard work on this very promising library.\r\n\r\n```c++\r\n// this fails\r\n// std::string cpp_string = \"foo\"; // In reality this is passed in as a parameter, Im not able to hard code it like this\r\n// const char * mystring = cpp_string.c_str();\r\n\r\n// this works\r\nconst char * mystring = \"foo\";\r\n\r\nClay_String cs = (Clay_String) {\r\n     .length = strlen( mystring ),\r\n    .chars = mystring,\r\n};\r\n\r\n// Here both methods seem to produce identical Clay_String structs\r\n// Same length and chars, and both have mystring[strlen(mystring)] outputs of '\\0' showing that they are both null terminated\r\n\r\n// But the C-only way shows up no problem, and the C++ way shows no text on the screen\r\n\r\nCLAY() {\r\n          CLAY_TEXT(\r\n            cs,\r\n            CLAY_TEXT_CONFIG( {\r\n              .fontId = 0,\r\n              .fontSize = 32,\r\n              .textColor = { 255, 255, 255, 255 },\r\n            } )\r\n          );\r\n        }\r\n```",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/139/comments",
    "author": "brettbar",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-01T07:13:24Z",
        "body": "Hello, I noticed you've closed this issue - did you figure out what the problem was? 🙂"
      },
      {
        "user": "brettbar",
        "created_at": "2025-01-01T17:20:24Z",
        "body": "Hey thanks for the quick response. To be honest, Im not sure why the following change fixed it. Missing from my example for the sake of brevity, was the fact that I had a step that the std::strings were originally being stored in a vector. So I had something like:\r\n\r\n```c++\r\nstd::vector<std::string> ids = { ... };\r\n\r\n\r\nCLAY(\r\n  CLAY_ID(\"Container\"),\r\n  CLAY_RECTANGLE( ... ),\r\n  CLAY_LAYOUT( ... ),\r\n) {\r\n  for (u32 i = 0; i < ids.size(); i++) {\r\n    // This ultimately fails, showing blank text\r\n    std::string id = ids[i];\r\n    const char * id_cstr = id.c_str();\r\n    \r\n    // But for some reason, directly accessing this succeeds, showing the correct \"dynamic\" text \r\n    const char *id_cstr = ids[i].c_str();\r\n    \r\n    Clay_String cs = (Clay_String) {\r\n       .length = strlen( id_cstr ),\r\n      .chars = id_cstr,\r\n     };\r\n      \r\n      CLAY() {\r\n        CLAY_TEXT(\r\n          cs,\r\n          CLAY_TEXT_CONFIG( {\r\n            .fontId = 0,\r\n            .fontSize = 32,\r\n            .textColor = { 255, 255, 255, 255 },\r\n          } )\r\n        );\r\n      }\r\n    };\r\n  }\r\n}\r\n```\r\nGenuinely unsure how this fails. Maybe some weird c++ copy constructor crap? I really have no idea haha. Again I was just so dumbfounded because by the time I got to constructing the Clay_String the values from either approach looked identical in the debugger. \r\n\r\nAnyways thanks for checking in, really enjoying this library so far. Stumbled upon the intro video for it on yt after watching your Intro to Data Oriented Design video. As soon as you mention that its an immediate mode gui and I saw you linked Casey Muratori's lecture in the description, I knew I had to try this out for a c++/raylib game project I'm working on."
      }
    ]
  },
  {
    "number": 137,
    "title": "Remove capacity field from array types.",
    "created_at": "2024-12-31T06:07:39Z",
    "closed_at": "2024-12-31T13:09:14Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/137",
    "body": "As I am working on zig bindings for Clay I notice that array types are defined to have a redundant capacity field. As far as I can tell tell this is just a value copy of the maximum amount of items in most cases. \r\n\r\nIf this does get removed I can cleanly convert between Clay's array types and zig's built in slice type making for a nicer development experience and if someone really does need the capacity they can get it from the arena.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/137/comments",
    "author": "Zettexe",
    "comments": [
      {
        "user": "raugl",
        "created_at": "2024-12-31T12:52:22Z",
        "body": "Looking at the code, there are only two struct in the public api that have a `capacity` field. One is `Clay_Arena` which makes great use of it, and which is also more complex than just a simple slice. The other one is `Clay_RenderCommandArray` which also uses it.\r\n\r\nThe other thing to keep in mind is that even it they got removed, you still wouldn't be able to implement what you want. In zig slices have no guaranteed in-memory representation, so you can't export functions that have slices in their signature.\r\n\r\nAs for a solution, it's easy enough to write wrapper functions around clay's api that convert `[]const u8` to and from `Clay_String`. You can add the conversion functions as members so it's super easy to use:\r\n```zig\r\npub const String = extern struct {\r\n    len: usize,\r\n    chars: [*c]const u8,\r\n\r\n    pub fn init(string: []const u8) String {\r\n        return String{ .chars = string.ptr, .len = string.len };\r\n    }\r\n    pub fn slice(self: String) []const u8 {\r\n        return self.chars[0..self.len];\r\n    }\r\n};\r\n```\r\nAnd for `Clay_RenderCommandArray` which we need to iterate over in the renderers, it's easy enough to write `render_commands.slice()`:\r\n```zig\r\npub const RenderCommandArray = extern struct {\r\n    capacity: u32,\r\n    len: u32,\r\n    items: [*c]RenderCommand,\r\n\r\n    pub fn slice(self: RenderCommandArray) []RenderCommand {\r\n        return self.items[0..self.len];\r\n    }\r\n};\r\n```"
      },
      {
        "user": "Zettexe",
        "created_at": "2024-12-31T13:09:14Z",
        "body": "Yes I agree, I am not advocating for the removal of capacity on Clay_Arena and im not sure why I thought this was needed in the first place. Chalk it up to a tired morning I guess. "
      }
    ]
  },
  {
    "number": 136,
    "title": "[Compilers] C++ projects should use CXX flags",
    "created_at": "2024-12-30T22:41:33Z",
    "closed_at": "2024-12-31T00:29:49Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/136",
    "body": "It seems I made a whoopsie in #123 and edited the CXX flags of the example C++ project. This fixes that.\r\n",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/136/comments",
    "author": "SuperOptimizer",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-31T00:29:46Z",
        "body": "Thanks, looks good!"
      }
    ]
  },
  {
    "number": 135,
    "title": "[Core] Add \"strict\" mode for strict C99 compliance",
    "created_at": "2024-12-30T18:55:32Z",
    "closed_at": "2025-01-02T19:30:03Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/135",
    "body": "Depends on #119.\r\n\r\nThis just allows users of the library to define `CLAY_STRICT` to get rid of the use of the non-standard `##__VA_ARGS__` construction, if they're OK with making sure that the affected macros aren't used without an argument.\r\n\r\nI'm not sure if this is something we want, so I'd be very open to feedback! I like how much simpler the `CLAY_SIZING_*` macros are without having to worry about making sure that they also work when no arguments are given, so it might not even be out of the picture to just replace the current implementation with this strict one.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/135/comments",
    "author": "FintasticMan",
    "comments": [
      {
        "user": "VisenDev",
        "created_at": "2024-12-30T20:24:18Z",
        "body": "perhaps \r\n```C\r\n#if defined(CLAY_STRICT) && CLAY_STRICT == 1\r\n```\r\nwould be a better way to enable CLAY_STRICT? That way you can use\r\n```C\r\n#define CLAY_STRICT 0\r\n#define CLAY_STRICT 1\r\n``` \r\nto enable/disable"
      },
      {
        "user": "FintasticMan",
        "created_at": "2025-01-02T19:30:03Z",
        "body": "Superseded by #150."
      }
    ]
  },
  {
    "number": 134,
    "title": "Fixed compilation when using Clang on Windows",
    "created_at": "2024-12-30T16:59:15Z",
    "closed_at": "2024-12-31T04:51:18Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/134",
    "body": "Clang on Windows defines `_MSC_VER` so using it for the definition of `CLAY_PACKED_ENUM` makes it use `__pragma` with Clang, which it cannot understand. This PR fixes it by replacing `#ifdef _MSC_VER` with `#if defined(_MSC_VER) && !defined(__clang__)`.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/134/comments",
    "author": "St0wy",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-31T04:51:16Z",
        "body": "Thank you for this, nice catch! I don't use Clang on windows so I haven't tested this myself, but we can always fix it again if it's not quite right 🙂"
      }
    ]
  },
  {
    "number": 130,
    "title": "[Core] Add Clay_IsDebugModeEnabled()",
    "created_at": "2024-12-29T21:52:23Z",
    "closed_at": "2024-12-29T23:04:48Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/130",
    "body": "This makes it easier to implement keyboard shortcuts that toggle the debug menu while also ensuring that the state does not get out of sync, like when closing the menu via the cross in the top right corner.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/130/comments",
    "author": "juniorrantila",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-29T23:04:43Z",
        "body": "Thank you @juniorrantila, this is a great call and I have needed to do it for a little while!"
      }
    ]
  },
  {
    "number": 126,
    "title": "[Core] Make errors recoverable ?",
    "created_at": "2024-12-29T12:24:36Z",
    "closed_at": "2025-02-10T21:58:51Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/126",
    "body": "Currently errors are \"sent\" to a callback to be handled by the user,\r\nbut at the moment there is no way to recover from them...\r\n\r\nMaking the errors recoverable would allow fixing of some of them, like for the allocator sizes errors.\r\nI have no idea how error handling is currently implemented and if it's even feasible to make them recoverable, but it would make handling errors, especially in bindings for \"safe\" languages better.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/126/comments",
    "author": "Mathys-Gasnier",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-01T07:17:22Z",
        "body": "Hello, sorry for the late reply here - just to clarify a little, what do you mean by recovering from errors here? Do you mean resetting clay's internal state, aborting layout, that kind of thing?"
      },
      {
        "user": "Mathys-Gasnier",
        "created_at": "2025-01-01T09:59:03Z",
        "body": "Aborting the layout, so it gives the user the possibility of \"fixing\" the error instead of just crashing the whole program.\r\nFor example we could imagine that some users will be able to add code that increase the buffers size if clay sends an error about that."
      },
      {
        "user": "nicbarker",
        "created_at": "2025-02-10T21:58:51Z",
        "body": "This was implemented as part of #105 🙂"
      }
    ]
  },
  {
    "number": 125,
    "title": "[Documentation] Summary & Readability improvement",
    "created_at": "2024-12-29T11:04:42Z",
    "closed_at": "2025-01-10T08:03:33Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/125",
    "body": "When working on the rust bindings I found it hard to go around the readme, and lost myself often...\r\n\r\nThis PR tries to make the doc a bit easier to use by adding a summary to make finding information easier.\r\nIt also increase readability of certain sections by adding separators between functions/macros/structs.\r\n\r\nIf you think anymore changes to the README can improve readability i'm open to add them too.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/125/comments",
    "author": "Mathys-Gasnier",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-10T08:03:26Z",
        "body": "@Mathys-Gasnier thanks so much for this great work, and apologies for only just getting around to reviewing it! "
      },
      {
        "user": "Mathys-Gasnier",
        "created_at": "2025-01-10T08:04:28Z",
        "body": "No worry, thanks for the amazing library"
      }
    ]
  },
  {
    "number": 122,
    "title": "[Renderers/Cairo] Add FindCairo.cmake",
    "created_at": "2024-12-28T15:18:45Z",
    "closed_at": "2024-12-31T00:32:56Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/122",
    "body": "At least on my OSX system, even with `brew install cairo`, cairo isn't found by the C compiler in the standard locations. Calling `FindPackage` with this FindCairo.cmake script and then explicitly linking and including the library solves the issue.\r\n",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/122/comments",
    "author": "SuperOptimizer",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-31T00:32:50Z",
        "body": "Fantastic work, I just ran this on my osx system and it works perfectly. Thank you!"
      }
    ]
  },
  {
    "number": 120,
    "title": "[Examples/Intro] Fix NULL pointer deref due to huuge malloc",
    "created_at": "2024-12-28T13:55:19Z",
    "closed_at": "2024-12-28T17:39:38Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/120",
    "body": "It would probably be good to check that malloc doesn't fail, but for a simple example like this it should be fine.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/120/comments",
    "author": "FintasticMan",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-28T17:40:26Z",
        "body": "Thanks so much for fixing this, was just testing something out and obviously left the test code in 🙈\r\nWill be more careful next time!"
      }
    ]
  },
  {
    "number": 115,
    "title": "[Renderers/SDL2] Create initial SDL2 renderer",
    "created_at": "2024-12-27T07:22:33Z",
    "closed_at": "2024-12-28T06:15:22Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/115",
    "body": "This PR creates an SDL2 renderer and corresponding example.\r\n\r\nIn the process of getting SDL2 running I realised we aren't outputting the correct dimensions for wrapped lines of text. That has been fixed here.\r\n\r\ncc @juniorrantila the original author of this PR",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/115/comments",
    "author": "nicbarker",
    "comments": [
      {
        "user": "ColleagueRiley",
        "created_at": "2024-12-28T14:34:00Z",
        "body": "@nicbarker I don't think allocating a texture/surface each time the user wants to draw text is a good idea...\n\nAlso I don't get the point of cloning the string, especially with calloc."
      }
    ]
  },
  {
    "number": 114,
    "title": "Discord Link Invalid",
    "created_at": "2024-12-27T01:45:37Z",
    "closed_at": "2024-12-28T06:35:07Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/114",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/114/comments",
    "author": "reihanboo",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-27T01:47:06Z",
        "body": "Oh dear, perhaps we've hit some kind of limit. I will take a look for you."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-27T06:27:38Z",
        "body": "I've confirmed that other people can use it to join, perhaps you are getting spam filtered by discord or something 😞"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-28T06:35:07Z",
        "body": "Going to close this for now, but please let me know if you're having more trouble."
      }
    ]
  },
  {
    "number": 111,
    "title": "[Core] Access bounding boxes",
    "created_at": "2024-12-26T14:33:38Z",
    "closed_at": "2025-01-14T08:37:55Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/111",
    "body": "I added an API method `Clay_GetElementLocationData(Clay_ElementId)` ",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/111/comments",
    "author": "hexmaster111",
    "comments": [
      {
        "user": "bullno1",
        "created_at": "2024-12-28T04:02:49Z",
        "body": "Knowing the bound also helps with handling interaction.\r\nFor example, positioning a cursor when a textbox is clicked."
      },
      {
        "user": "emoon",
        "created_at": "2025-01-13T10:03:28Z",
        "body": "It would be great if this feature could be added"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-14T08:51:01Z",
        "body": "Apologies, I accidentally did something janky with git and this one. Will merge a second commit with the changes with you as co-author, thanks for the work on this one! 🙂"
      }
    ]
  },
  {
    "number": 109,
    "title": "[Renderers/raylib] Update files for v5.5",
    "created_at": "2024-12-26T03:53:53Z",
    "closed_at": "2024-12-26T07:02:33Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/109",
    "body": "The current one is using a pre-release version of v5.5 instead of the actual release\r\n\r\nRaymath also needed updating",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/109/comments",
    "author": "CrackedPixel",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-26T06:18:03Z",
        "body": "Thanks for doing this!"
      }
    ]
  },
  {
    "number": 106,
    "title": "[Bug] [Mac OS] Doesn't compile on Mac OS (ARM)",
    "created_at": "2024-12-25T10:50:40Z",
    "closed_at": "2024-12-25T15:32:37Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/106",
    "body": "The library doesn't compile on an ARM Mac.\r\n\r\nI'm using gcc to compile.\r\nThe output is:\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"_BeginDrawing\", referenced from:\r\n      _main in main-ae6520.o\r\n  \"_BeginMode3D\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_BeginScissorMode\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawModel\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawRectangle\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawRectangleRounded\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawRing\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawTextEx\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_DrawTextureEx\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_EndDrawing\", referenced from:\r\n      _main in main-ae6520.o\r\n  \"_EndMode3D\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_EndScissorMode\", referenced from:\r\n      _Clay_Raylib_Render in main-ae6520.o\r\n  \"_GetScreenHeight\", referenced from:\r\n      _main in main-ae6520.o\r\n  \"_GetScreenWidth\", referenced from:\r\n      _main in main-ae6520.o\r\n  \"_InitWindow\", referenced from:\r\n      _Clay_Raylib_Initialize in main-ae6520.o\r\n  \"_MatrixIdentity\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_MatrixLookAt\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_MatrixOrtho\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_MatrixPerspective\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_SetConfigFlags\", referenced from:\r\n      _Clay_Raylib_Initialize in main-ae6520.o\r\n  \"_Vector3Normalize\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_Vector3Subtract\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_Vector3Unproject\", referenced from:\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n      _GetScreenToWorldPointWithZDistance in main-ae6520.o\r\n  \"_WindowShouldClose\", referenced from:\r\n      _main in main-ae6520.o\r\n```\r\n\r\nI'm following your YouTube video and I'm at 18:00:\r\n\r\n```\r\n#include \"clay/renderers/raylib/raylib.h\"\r\n\r\n#define CLAY_IMPLEMENTATION\r\n#include \"clay/clay.h\"\r\n#include \"clay/renderers/raylib/clay_renderer_raylib.c\"\r\n\r\nint main ()\r\n{\r\n    float screenWidth = 1000;\r\n    float screenHeight = 1000;\r\n    Clay_Raylib_Initialize(screenWidth, screenHeight, \"Clay Raylib Test\", FLAG_WINDOW_RESIZABLE);\r\n\r\n    uint64_t clayRequiredMemory = Clay_MinMemorySize();\r\n    Clay_Arena clayMemory = (Clay_Arena)\r\n    {\r\n        .memory = malloc(clayRequiredMemory),\r\n        .capacity = clayRequiredMemory\r\n    };\r\n\r\n    Clay_Initialize(clayMemory, (Clay_Dimensions)\r\n    {\r\n        .width = GetScreenWidth(),\r\n        .height = GetScreenHeight()\r\n    });\r\n\r\n    while (!WindowShouldClose())\r\n    {\r\n        Clay_BeginLayout();\r\n\r\n        Clay_RenderCommandArray renderCommands = Clay_EndLayout();\r\n\r\n        BeginDrawing();\r\n        Clay_Raylib_Render(renderCommands);\r\n        EndDrawing();\r\n    };\r\n\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/106/comments",
    "author": "Takao-7",
    "comments": [
      {
        "user": "Takao-7",
        "created_at": "2024-12-25T11:32:55Z",
        "body": "If I'm using `-target arm64-apple-macos11`, then the error changes to:\r\nUndefined symbols for architecture arm64:"
      },
      {
        "user": "Takao-7",
        "created_at": "2024-12-25T15:32:37Z",
        "body": "Ok, the issue was that I needed to compile Raylib first. Only the binding to it is included here and not the entire library."
      },
      {
        "user": "jkroso",
        "created_at": "2025-01-01T22:48:05Z",
        "body": "I’m having the same issue. But I’ve compiled and installed raylib and it’s not helping. Would you mind sharing the command you're using to compile the example?"
      },
      {
        "user": "nicbarker",
        "created_at": "2025-01-02T00:25:07Z",
        "body": "👋 Hello, If you run the example using CMake, it should automatically download and compile Raylib for you 🙂"
      },
      {
        "user": "jkroso",
        "created_at": "2025-01-02T02:27:30Z",
        "body": "I find cmake inscrutable so I usually avoid it but after a little bit of time learning it I got my code to compile. Thanks!"
      },
      {
        "user": "KellanHiggins",
        "created_at": "2025-01-02T04:24:41Z",
        "body": "Has anyone tried compiling this with Xcode?"
      }
    ]
  },
  {
    "number": 101,
    "title": "[Core] Access bounding boxes of scrolling containers",
    "created_at": "2024-12-24T15:30:38Z",
    "closed_at": "2024-12-26T14:29:05Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/nicbarker/clay/pull/101",
    "body": "Moved a few internal types into public for other .c files that don't have clay_impl defined.\r\n\r\nI was unable to get at the internal data from another c file, so I moved these defs up past the clay impl define. \r\n\r\nIm using it to impl a slider control like this \r\n\r\n``` c\r\n            Clay_ScrollContainerData track = Clay_GetScrollContainerData(sliderId);\r\n            Clay_ScrollContainerData thumb = Clay_GetScrollContainerData(thumbId);\r\n            Clay__ScrollContainerDataInternal *track_internal_data = FindScrollContainerDataInternal(sliderId);\r\n            Clay__ScrollContainerDataInternal *thumb_internal_data = FindScrollContainerDataInternal(thumbId);\r\n\r\n            if (track.found && thumb.found && track_internal_data && thumb_internal_data)\r\n            {\r\n                // put the track where the users currsor is clicking on the track\r\n\r\n                Vector2 mousePos = GetMousePosition();\r\n                Vector2 trackPos = (Vector2){track_internal_data->boundingBox.x, track_internal_data->boundingBox.y};\r\n\r\n                Vector2 mouseRelitiveToTrack = Vector2Subtract(mousePos, trackPos);\r\n                Vector2 trackSize = (Vector2){track_internal_data->boundingBox.width, track_internal_data->boundingBox.height};\r\n\r\n                Vector2 click_percent = (Vector2){\r\n                    .x = ScailFloat(mouseRelitiveToTrack.x - thumb_internal_data->boundingBox.width * 0.5f, 0, trackSize.x - thumb_internal_data->boundingBox.width * 0.5f, 0, 1),\r\n                    .y = ScailFloat(mouseRelitiveToTrack.y - thumb_internal_data->boundingBox.height * 0.5f, 0, trackSize.y - thumb_internal_data->boundingBox.height * 0.5f, 0, 1)};\r\n\r\n                *value = Clamp(ScailFloat(click_percent.x, 0, 1, min, max), min, max);\r\n            }\r\n```\r\n\r\n\r\nAnd the helper func to make searching for things a little nicer todo\r\n\r\n``` c\r\nClay__ScrollContainerDataInternal *FindScrollContainerDataInternal(Clay_ElementId id)\r\n{\r\n    Clay__ScrollContainerDataInternal *find = NULL;\r\n    for (int sidx = 0; sidx < Clay__scrollContainerDatas.length; sidx++)\r\n    {\r\n        find = Clay__ScrollContainerDataInternalArray_Get(\r\n            &Clay__scrollContainerDatas,\r\n            sidx);\r\n\r\n        if (find->elementId == id.id)\r\n        {\r\n            break;\r\n        }\r\n\r\n        find = NULL;\r\n    }\r\n\r\n    return find;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/101/comments",
    "author": "hexmaster111",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-25T08:51:55Z",
        "body": "Hello! Just to make sure I understand correctly, you want to access the bounding box of the scroll element?\r\nIf that's the case, I'll expand the public facing `Clay_ScrollContainerData` to include the bounding box so you can get it in one call, with the current api 🙂"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-25T08:54:15Z",
        "body": "That being said, there should probably be a public API for just querying the bounds of any element by id 🤔 "
      },
      {
        "user": "hexmaster111",
        "created_at": "2024-12-25T12:37:45Z",
        "body": "Ah, yeah, I'm pretty sure me making them scroll boxes was a part of some earlier hacking around with clay. An API for getting the bounding box of any element would make a lot of sense!"
      }
    ]
  },
  {
    "number": 100,
    "title": "Making some internal data more public for layout",
    "created_at": "2024-12-24T15:04:52Z",
    "closed_at": "2024-12-24T15:11:01Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/100",
    "body": "I was unable to get at the internal data from another c file, so I moved these defs up past the clay impl define. \r\n\r\nIm using it to impl a slider control like this \r\n\r\n``` c\r\n            Clay_ScrollContainerData track = Clay_GetScrollContainerData(sliderId);\r\n            Clay_ScrollContainerData thumb = Clay_GetScrollContainerData(thumbId);\r\n            Clay__ScrollContainerDataInternal *track_internal_data = FindScrollContainerDataInternal(sliderId);\r\n            Clay__ScrollContainerDataInternal *thumb_internal_data = FindScrollContainerDataInternal(thumbId);\r\n\r\n            if (track.found && thumb.found && track_internal_data && thumb_internal_data)\r\n            {\r\n                // put the track where the users currsor is clicking on the track\r\n\r\n                Vector2 mousePos = GetMousePosition();\r\n                Vector2 trackPos = (Vector2){track_internal_data->boundingBox.x, track_internal_data->boundingBox.y};\r\n\r\n                Vector2 mouseRelitiveToTrack = Vector2Subtract(mousePos, trackPos);\r\n                Vector2 trackSize = (Vector2){track_internal_data->boundingBox.width, track_internal_data->boundingBox.height};\r\n\r\n                Vector2 click_percent = (Vector2){\r\n                    .x = ScailFloat(mouseRelitiveToTrack.x - thumb_internal_data->boundingBox.width * 0.5f, 0, trackSize.x - thumb_internal_data->boundingBox.width * 0.5f, 0, 1),\r\n                    .y = ScailFloat(mouseRelitiveToTrack.y - thumb_internal_data->boundingBox.height * 0.5f, 0, trackSize.y - thumb_internal_data->boundingBox.height * 0.5f, 0, 1)};\r\n\r\n                *value = Clamp(ScailFloat(click_percent.x, 0, 1, min, max), min, max);\r\n            }\r\n```\r\n\r\n\r\nAnd the helper func to make searching for things a little nicer todo\r\n\r\n``` c\r\nClay__ScrollContainerDataInternal *FindScrollContainerDataInternal(Clay_ElementId id)\r\n{\r\n    Clay__ScrollContainerDataInternal *find = NULL;\r\n    for (int sidx = 0; sidx < Clay__scrollContainerDatas.length; sidx++)\r\n    {\r\n        find = Clay__ScrollContainerDataInternalArray_Get(\r\n            &Clay__scrollContainerDatas,\r\n            sidx);\r\n\r\n        if (find->elementId == id.id)\r\n        {\r\n            break;\r\n        }\r\n\r\n        find = NULL;\r\n    }\r\n\r\n    return find;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/100/comments",
    "author": "hexmaster111",
    "comments": [
      {
        "user": "hexmaster111",
        "created_at": "2024-12-24T15:11:26Z",
        "body": "I didnt notice there was an update to clay before i commited this...."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-26T06:08:34Z",
        "body": "Sorry you ended up with a conflict! I will add bounding box data on `Clay_ScrollContainerData`, so you can get both in a single API call 🙂"
      }
    ]
  },
  {
    "number": 84,
    "title": "Does Clay support animated SVG?",
    "created_at": "2024-12-22T11:31:40Z",
    "closed_at": "2024-12-22T14:27:58Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/84",
    "body": "Does Clay support animated SVG? If not, what is an alternative?",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/84/comments",
    "author": "dmikushin",
    "comments": [
      {
        "user": "SogoCZE",
        "created_at": "2024-12-22T13:51:24Z",
        "body": "Clay is a layout library. Rendering of animated SVGs is related to rendering. If you use a rendering backend that supports animated SVGs you can easily integrate it to clay with custom element."
      }
    ]
  },
  {
    "number": 78,
    "title": "fix: move internal types to stdint specific. ",
    "created_at": "2024-12-22T01:03:05Z",
    "closed_at": "2024-12-22T06:22:10Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/78",
    "body": "Match Clay_RenderCommandArray_Get protoypes\r\n\r\nThis PR helps when using Clay on platforms that aren't x86_64.\r\n",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/78/comments",
    "author": "mrneo240",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-22T01:13:48Z",
        "body": "Great work, I will look these over an merge in a few hours 👍 "
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-22T06:21:59Z",
        "body": "Looks good to me, thanks!"
      }
    ]
  },
  {
    "number": 69,
    "title": "[Renderers/SDL] Create minimal SDL2 example",
    "created_at": "2024-12-21T04:33:03Z",
    "closed_at": "2024-12-27T07:20:30Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/69",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/69/comments",
    "author": "juniorrantila",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-21T05:19:33Z",
        "body": "Wow, fantastic work! I will take a look at this tonight 😁"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-26T22:18:47Z",
        "body": "Going to check this out locally today and see if we can get it merged!"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-27T07:21:09Z",
        "body": "Ah sorry, git did something weird when I was trying to make updates here. I'll open a new PR with your commits"
      }
    ]
  },
  {
    "number": 61,
    "title": "Include Path Issues (C++)",
    "created_at": "2024-12-20T03:12:40Z",
    "closed_at": "2024-12-20T20:07:56Z",
    "labels": [
      "Attempted Fix"
    ],
    "url": "https://github.com/nicbarker/clay/issues/61",
    "body": "This is a relatively minor issue and I'm sure I'll find a work around, but more so just wanted to let you know of the use case regardless. I've been building a small sample to play around with Clay in C++ using Zig as the build system and I kept running into a weird error that was driving me crazy for awhile. \r\n\r\nWith Zig, fetching dependencies is fairly trivial, just tell it to fetch a link and then point it at the right files and you are good to go. Apparently because of a header inside of the C++ stdlib `#include <version>` and the `VERSION` file at the root of this repository, a compilation conflict was happening in my include paths (namely including the root of this repo to ensure `clay.h` is in my path). Was wondering if in the GitHub releases you could also have one with the header nested inside of an `include/` directory or something to side step this? I could see it being an issue in CMake as well.\r\n\r\nEither way, the framework seems super cool, and excited to keep working with it!",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/61/comments",
    "author": "Anthony-J-G",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-20T06:49:48Z",
        "body": "That's interesting, the VERSION file is not necessary by any means, would it help if I just deleted it?"
      },
      {
        "user": "Anthony-J-G",
        "created_at": "2024-12-20T17:26:08Z",
        "body": "Deleting the file would for sure solve the problem because of the way clang handles include paths. The only other foreseeable problem would be if another conflicting file gets added to the project root, but that seems like a rare edge case.\r\n\r\nFor the moment I just have `clay.h` copy pasted into my own project structure, but having access to Zig/CMake automating it also makes fetching things like the license or other important informational files."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-20T17:41:18Z",
        "body": "Great, I'll delete the VERSION - it doesn't need to be there 🙂"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-20T19:51:21Z",
        "body": "Ok done, let me know if it fixes it for you!"
      },
      {
        "user": "Anthony-J-G",
        "created_at": "2024-12-20T20:04:22Z",
        "body": "Works like a charm, thank you so much!! All the include paths resolve properly with no collisions/redefinition."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-12-20T20:07:56Z",
        "body": "Great!"
      }
    ]
  },
  {
    "number": 59,
    "title": "Fix variable name in README.md",
    "created_at": "2024-12-19T19:28:16Z",
    "closed_at": "2024-12-20T00:00:19Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/59",
    "body": "Just correcting a variable name.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/59/comments",
    "author": "AMurkin",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-20T00:00:05Z",
        "body": "Nice catch, thanks!"
      }
    ]
  },
  {
    "number": 56,
    "title": "Added window dimensions and title to Clay_Raylib_Initialize function",
    "created_at": "2024-12-19T07:05:21Z",
    "closed_at": "2024-12-19T08:34:20Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/56",
    "body": "Added `int width`, `int height`, and `const char *title` to `Clay_Raylib_Initialize` to allow setting dimensions and title for the window.\r\nIt is a breaking change for existing code, but as now there is no possibility to specify dimensions, this renderer might be not used in production code, at least people modify it to their needs, so this change will allow to use the renderer as it is.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/56/comments",
    "author": "OleksiiBulba",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-19T08:34:02Z",
        "body": "Thanks for this one, it's a good idea 👍 "
      }
    ]
  },
  {
    "number": 55,
    "title": "Fix: moved CLAY__MIN and CLAY__MAX to public macros",
    "created_at": "2024-12-18T17:09:26Z",
    "closed_at": "2024-12-18T20:29:12Z",
    "labels": [
      "bug",
      "Attempted Fix"
    ],
    "url": "https://github.com/nicbarker/clay/pull/55",
    "body": "As raylib renderer uses CLAY__MIN and CLAY__MAX, I suggest moving those marcos to macros public definitions. Otherwise, it's impossible to compile raylib renderer without `#define CLAY_IMPLEMENTATION`.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/55/comments",
    "author": "OleksiiBulba",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-12-18T20:28:55Z",
        "body": "Good catch @OleksiiBulba, thanks for this one!"
      }
    ]
  },
  {
    "number": 50,
    "title": "Fix local id calculation",
    "created_at": "2024-11-18T00:59:35Z",
    "closed_at": "2025-01-05T20:19:07Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/50",
    "body": "The `Clay_LayoutElement` type is not exposed so a function: `uint32_t Clay__GetParentElementId()` is needed.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/50/comments",
    "author": "bullno1",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2025-01-05T20:18:57Z",
        "body": "Thanks, and sorry for taking so long to merge this 😅 It got lost in the todo list!"
      }
    ]
  },
  {
    "number": 47,
    "title": "docs: remove some inconsistencies with current API",
    "created_at": "2024-11-14T20:50:39Z",
    "closed_at": "2024-11-14T22:35:03Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/47",
    "body": "As a newcomer to the library, I noticed that the examples in the README are not 100% consistent with the actual API anymore.\r\nI've updated the README to reflect the new API where I've noticed the inconsistencies.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/47/comments",
    "author": "27justin",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-11-14T22:34:36Z",
        "body": "Hello, and thank you so much for picking these up, I really appreciate it 😁"
      }
    ]
  },
  {
    "number": 46,
    "title": "Could UI Hierarchies be constructed programmatically(other than pre-built DSL)?",
    "created_at": "2024-11-10T01:29:07Z",
    "closed_at": "2024-11-13T09:17:46Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/46",
    "body": null,
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/46/comments",
    "author": "faywong",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-11-10T07:32:21Z",
        "body": "Hello, would you be able to clarify your question a little? It is currently possible to just call the underlying functions directly rather than using the macros, but it would help if I understood your use case a little better 🙂"
      }
    ]
  },
  {
    "number": 42,
    "title": "Fix scroll on mouse down being overriden by touch scroll",
    "created_at": "2024-10-14T21:32:08Z",
    "closed_at": "2024-10-14T22:47:26Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/42",
    "body": "Fixes unexpected behavior when clicking on scrollbar with mouse, the view would scroll the opposite direction as it would with touch scroll.\r\n\r\nThis behavior is unexpected with mouse.\r\n\r\nThe bug was probably caused by Clay_SetPointerState overriding scrollbarData and using the pointer state as scroll information for the container behind the scrollbar instead using the scrollbarData.\r\n\r\nThis fixes that behavior by not passing mouse down, when mouse down is captured by scrollbar.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/42/comments",
    "author": "richardhozak",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-10-14T22:47:14Z",
        "body": "@richardhozak Hello, and nice catch! Thanks for the fix 🙂"
      }
    ]
  },
  {
    "number": 41,
    "title": "Made casting more explicit for better compatibility with different compilers",
    "created_at": "2024-10-11T19:12:22Z",
    "closed_at": "2024-10-12T00:25:22Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/41",
    "body": "Made casting more explicit for better compatibility with different compilers. For instance zig cc was producing errors.  And zig cc relies on some version of clang witch is probably also affected.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/41/comments",
    "author": "johan0A",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-10-12T00:22:22Z",
        "body": "@johan0A Thanks a bunch for fixing these up, I don't generally test with zig cc so wouldn't have caught these 🙂\r\nI will see if I can get the github CI to run a compile using zig cc, so I can avoid breaking these compilers in future."
      },
      {
        "user": "johan0A",
        "created_at": "2024-10-13T00:18:19Z",
        "body": "@nicbarker That would be very cool :D Though to be clear clay.h does compile without errors using zig cc but using the affected functions produces illegal instruction errors."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-10-13T01:13:57Z",
        "body": "@johan0A ah fascinating, good to know thanks!"
      }
    ]
  },
  {
    "number": 33,
    "title": "[Bug] Fix null pointer deref in Clay_SetPointerState",
    "created_at": "2024-10-02T01:03:35Z",
    "closed_at": "2024-10-02T02:05:52Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/33",
    "body": "In some situations `mapItem` in `Clay_SetPointerState` can end up being null which results in to crash (because `elementId` is being accessed on null `mapItem`).\r\n\r\nAn example of this behaviour can be seen when you have an empty layout with only one text:\r\n```c\r\nClay_BeginLayout();\r\n\r\nCLAY_TEXT(\r\n    CLAY_ID(\"HelloWorldText\"), \r\n    CLAY_STRING(\"Hello World!\"),\r\n    CLAY_TEXT_CONFIG(\r\n        .fontId = FONT_ID_BODY_24, \r\n        .fontSize = 24,\r\n         .textColor = {255, 0, 0, 255}\r\n    )\r\n);\r\n                             \r\nreturn Clay_EndLayout();\r\n```",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/33/comments",
    "author": "SogoCZE",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-10-02T01:54:12Z",
        "body": "Hello, thanks for reporting this one! Taking a look now 👀 "
      },
      {
        "user": "nicbarker",
        "created_at": "2024-10-02T02:02:52Z",
        "body": "Seems like the entire second half of that if statement was just an incorrect case. Must have been left over from a refactor or something. Nice catch!"
      }
    ]
  },
  {
    "number": 23,
    "title": "Use shallow clone on Raylib",
    "created_at": "2024-09-21T21:26:59Z",
    "closed_at": "2024-09-22T01:27:30Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/23",
    "body": "This change reduces the time of project configuration.\r\n\r\nOn my machine with decent internet connection, I got these results:\r\nWithout shallow clone: `cmake ..  24.75s user 6.55s system 54% cpu 57.140 total`\r\nWith shallow clone: `cmake ..  12.41s user 4.48s system 39% cpu 42.758 total`\r\n\r\nThank you for your time and effort!",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/23/comments",
    "author": "SeverinDenisenko",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-09-22T01:27:23Z",
        "body": "Hello, great catch! Of course we don't need a deep clone of raylib 🙂\r\nGreat to see such a significant speed up on first build."
      }
    ]
  },
  {
    "number": 21,
    "title": "Don't use __VA_ARGS__ in a non-variadic macro",
    "created_at": "2024-09-20T10:30:19Z",
    "closed_at": "2024-09-20T20:14:54Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/21",
    "body": "Fixes warnings like `clay.h:49:132: warning: __VA_ARGS__ can only appear in the expansion of a C99/C++11 variadic macro` and makes the code match CLAY_BORDER_CONFIG_OUTSIDE_RADIUS",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/21/comments",
    "author": "mikejsavage",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-09-20T20:14:46Z",
        "body": "Nice catch, thanks for this one!"
      }
    ]
  },
  {
    "number": 18,
    "title": "[Bug] Compilation error: 'isPointerActive' undeclared",
    "created_at": "2024-09-19T09:36:27Z",
    "closed_at": "2024-09-19T19:21:15Z",
    "labels": [
      "Attempted Fix"
    ],
    "url": "https://github.com/nicbarker/clay/issues/18",
    "body": "Hello,\r\n\r\nI wanted to give Clay a try but when compiling this:  \r\n```c\r\n#include \"../deps/clay.h\"\r\n\r\nint main(void) {\r\n    uint64_t clay_memory_size = Clay_MinMemorySize();\r\n    \r\n    Clay_Arena arena = Clay_CreateArenaWithCapacityAndMemory(clay_memory_size, malloc(clay_memory_size));\r\n    Clay_Initialize(arena, (Clay_Dimensions){800, 600});\r\n}\r\n```\r\n\r\nI got this compilation error from gcc:\r\n```\r\n/src/../deps/clay.h:3059:14: error: ‘isPointerActive’ undeclared (first use in this function)\r\n 3059 |         if (!isPointerActive && scrollData->pointerScrollActive)\r\n```\r\n\r\nThe build command I used:\r\n```\r\ngcc -o test ./src/main.c $(curl-config --libs) -lraylib -std=c99 -Wall\r\n```\r\n\r\nDo you know how I can fix this ?",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/18/comments",
    "author": "Quentindeve",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-09-19T19:12:59Z",
        "body": "Hi, thanks for the report. Silly mistake on my part here, badly merged two sets of changes. Have fixed `main` for you, should be good to go 👍 "
      },
      {
        "user": "Quentindeve",
        "created_at": "2024-09-19T19:14:26Z",
        "body": "Gonna give it another try, thanks !\r\n\r\nEdit: The fix works, well played :^)"
      }
    ]
  },
  {
    "number": 16,
    "title": "Fix some Odin bindings",
    "created_at": "2024-09-13T00:30:38Z",
    "closed_at": "2024-09-13T01:38:39Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/16",
    "body": "- properly enforce that the measure text function is a \"c\" function\r\n- make sure the abi matches for OpenScrollElement and OpenFloatingElement, when compiling this to wasm it would complain that the function signatures did not match because these return a pointer to `Clay_LayoutElement`, I opted to make them return a `rawptr` instead of binding the entire type",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/16/comments",
    "author": "laytan",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-09-13T01:38:24Z",
        "body": "Thanks for this, great catch!"
      }
    ]
  },
  {
    "number": 14,
    "title": "Not building on Windows",
    "created_at": "2024-08-31T22:43:37Z",
    "closed_at": "2024-08-31T23:03:18Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/14",
    "body": "After I configure CMake for example: `cmake -B build . -A x64` on Windows and it picks up VS2022, I get the first error complaining about the added switch `-Wno-initializer-overrides`.\r\nAfter removing that switch, I get many compilation errors later on.\r\n\r\n\r\nIs this supposed to build on Windows?\r\n\r\nI try switching to `clang` with:\r\n\r\n```bash\r\ncmake -B build . -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\r\n```\r\n\r\nAlso, to no avail.\r\n\r\nIt builds on Linux though.",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/14/comments",
    "author": "0xeb",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:49:25Z",
        "body": "Hello, sorry to hear things aren't working for you. To get a little more detail, are you trying to build the examples in the repo with the root `CMakeLists.txt`?"
      },
      {
        "user": "0xeb",
        "created_at": "2024-08-31T22:50:36Z",
        "body": "Yes, correct. Configuring from the root. As I said, the same steps work on Ubuntu 24"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:53:43Z",
        "body": "Thanks, what version of clang on windows are you using?"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:54:28Z",
        "body": "For context in terms of what I'm trying to figure out - I'm able to build the examples with CLion + Cmake + Clang 18 on Windows 10"
      },
      {
        "user": "0xeb",
        "created_at": "2024-08-31T22:55:19Z",
        "body": "```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Professional>clang --version\r\nclang version 17.0.3\r\nTarget: x86_64-pc-windows-msvc\r\nThread model: posix\r\nInstalledDir: C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\Llvm\\x64\\bin\r\n\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Professional>\r\n\r\n```"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:56:22Z",
        "body": "Interesting, would you be able to paste the whole output of the compile that fails?"
      },
      {
        "user": "0xeb",
        "created_at": "2024-08-31T22:56:36Z",
        "body": "Most Windows users don't use CLion . Either VS community edition, VS Pro, VS Code, etc.\r\n\r\nCan you try with VS community edition 2022?\r\n\r\n"
      },
      {
        "user": "0xeb",
        "created_at": "2024-08-31T23:03:18Z",
        "body": "Ok, I figured it out.\r\n\r\nIt turned out the way I was configuring CMake on Windows was still picking 'cl' instead of 'clang-cl'.\r\n\r\nThe proper way to fix this in Windows, is to configure as such:\r\n\r\n```\r\ncmake -B build -T ClangCL\r\n\r\n```\r\n\r\n- Note the `-T` to select the proper toolchain.\r\n\r\nCheers and thanks for your help!"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T23:08:21Z",
        "body": "No worries, and I'll make sure that I make a note of that somewhere - it's always good to collect platform specific compiler quirks! 🙂"
      }
    ]
  },
  {
    "number": 13,
    "title": "[bindings/odin] Improve Odin bindings",
    "created_at": "2024-08-31T19:29:40Z",
    "closed_at": "2024-09-01T03:13:28Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/13",
    "body": "- Replaces `c.uint32_t`, `c_uint64_t`, etc with their respective odin type\r\n- Get rid of the need for `clay.MakeString` on `Text()`, possibly other procedures\r\n- Get rid of `IDI`, now uses a default param on `ID`\r\n\r\nSome other considerations:\r\n- Maybe remove the need for `clay.ID` in components, and pass the id string instead?",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/13/comments",
    "author": "FourteenBrush",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T23:04:44Z",
        "body": "> Maybe remove the need for clay.ID in components, and pass the id string instead?\r\n\r\nIt would certainly make things more ergonomic - but I have plans to turn the result of `clay.ID` into a richer datatype than `u32` in future, and it will be less painful in terms of breaking changes if I can just swap the return type and params underneath 🙂"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T23:04:57Z",
        "body": "Oops, pressed the close button by mistake."
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T23:24:50Z",
        "body": "I will merge this a little later today when I have time 👍 "
      }
    ]
  },
  {
    "number": 12,
    "title": "[bindings/odin] Fix memory leak in Odin example",
    "created_at": "2024-08-31T18:59:51Z",
    "closed_at": "2024-08-31T22:23:06Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/12",
    "body": "Should fix an apparent memory leak (you allocate a clone of the text in the raylib renderer, however the temp_allocator was never freed)",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/12/comments",
    "author": "Dudejoe870",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:20:40Z",
        "body": "Thanks, this is a great visual example of how the temp allocator works!"
      }
    ]
  },
  {
    "number": 11,
    "title": "Pre-built binaries missing for Linux in the Odin bindings ",
    "created_at": "2024-08-31T18:56:43Z",
    "closed_at": "2024-09-01T01:56:00Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/issues/11",
    "body": "Trying to build an example outputs:\r\n\r\ncannot find -l \"[pathtoclay]/clay/bindings/odin/clay-odin//linux/libclay.a\"",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/11/comments",
    "author": "Valnir17",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:27:48Z",
        "body": "Thanks for the heads up, somehow managed to forget to build the linux lib. Would you be able to test it out for me if I push the file? I don't have access to a linux box at the moment 🙂"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T22:45:55Z",
        "body": "I've pushed the linux lib, please let me know if it works for you!"
      },
      {
        "user": "Valnir17",
        "created_at": "2024-09-01T01:56:00Z",
        "body": "It did, thanks! \r\n"
      },
      {
        "user": "nicbarker",
        "created_at": "2024-09-01T08:58:09Z",
        "body": "Awesome, good to hear!"
      }
    ]
  },
  {
    "number": 10,
    "title": "[bindings/odin] Fix crash on Windows",
    "created_at": "2024-08-31T18:47:29Z",
    "closed_at": "2024-08-31T21:55:42Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/10",
    "body": "This fixes #9, full credit to OttoHat for figuring out the issue!",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/10/comments",
    "author": "Dudejoe870",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T21:55:28Z",
        "body": "Thanks a bunch for this, looks good to me!"
      }
    ]
  },
  {
    "number": 8,
    "title": "support wasm in Odin bindings",
    "created_at": "2024-08-30T23:32:42Z",
    "closed_at": "2024-08-31T01:04:33Z",
    "labels": [],
    "url": "https://github.com/nicbarker/clay/pull/8",
    "body": "Adds a build of a wasm object file and a foreign import for it. Using wasm in Odin also adds the requirement of a `default_calling_convention` attribute, and requires globals to be in the fully global foreign scope `foreign {` instead of `foreign Clay {`. I also took the liberty to move the private declarations into their own foreign block and marked that entire block private instead of putting the attribute on all declarations.\r\n\r\nI do want to note that this may be a different way of doing it vs your web examples. This way specifically works with the `vendor:wgpu` and `vendor:wasm/webgl` packages of Odin, instead of writing the rendering code in JS itself.\r\n\r\nAlso note that wasm `.o` files are cross-platform afaik.\r\n\r\nI have successfully integrated clay into my webgpu renderer (both native and actually on the web).",
    "comments_url": "https://api.github.com/repos/nicbarker/clay/issues/8/comments",
    "author": "laytan",
    "comments": [
      {
        "user": "nicbarker",
        "created_at": "2024-08-31T01:04:38Z",
        "body": "This looks super good to me, great work!"
      }
    ]
  }
]