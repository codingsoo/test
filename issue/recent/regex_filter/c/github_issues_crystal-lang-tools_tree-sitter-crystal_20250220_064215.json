[
  {
    "number": 85,
    "title": "Support nilable constants",
    "created_at": "2025-01-05T18:38:23Z",
    "closed_at": "2025-01-05T23:32:38Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/85",
    "body": null,
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/85/comments",
    "author": "keidax",
    "comments": [
      {
        "user": "nobodywasishere",
        "created_at": "2025-01-05T19:30:39Z",
        "body": "Does the current tree sitter support this? The stdlib does:\r\n```crystal\r\na = Int32 | String\r\n```"
      },
      {
        "user": "keidax",
        "created_at": "2025-01-05T23:20:17Z",
        "body": "> Does the current tree sitter support this?\r\n\r\nYes, in this case it's parsed as an operator just like \r\n``` crystal\r\nb = 1 | 8\r\n```\r\n"
      }
    ]
  },
  {
    "number": 83,
    "title": "Allow macro statements to occur anywhere",
    "created_at": "2025-01-05T09:40:57Z",
    "closed_at": "2025-01-05T17:09:31Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/83",
    "body": "Also increases the number of locations possible for macro expressions and macro vars.\r\nThis is probably going to be replaced by the more advanced macro system @keidax is working on, but this does increase macro parsing capability a lot.",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/83/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "keidax",
        "created_at": "2025-01-05T15:49:16Z",
        "body": "(Good to have these test cases in any event)"
      }
    ]
  },
  {
    "number": 76,
    "title": "Add pointerof, alignof, instance_alignof, as, as?, is_a?, nil?, and responds_to?",
    "created_at": "2025-01-04T15:53:51Z",
    "closed_at": "2025-01-05T05:08:27Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/76",
    "body": null,
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/76/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "devnote-dev",
        "created_at": "2025-01-04T16:02:35Z",
        "body": "~~How is this different from #73?~~\r\n\r\nNvm, seen the changes now."
      },
      {
        "user": "nobodywasishere",
        "created_at": "2025-01-04T16:12:08Z",
        "body": "Splitting up that PR"
      },
      {
        "user": "devnote-dev",
        "created_at": "2025-01-04T17:31:25Z",
        "body": "> I'm leaning towards one of two things:\r\n> \r\n>     * treat everything that looks like a method call uniformly, so pseudo-methods are all aliased as `call` nodes.\r\n> \r\n>     * treat most things that look like a method call uniformly, but keep `as`/`as?` separate.\r\n\r\nI agree, but I feel stronger towards the first option due to the syntax of the methods and the semantics of them in the Crystal compiler."
      },
      {
        "user": "keidax",
        "created_at": "2025-01-05T04:59:06Z",
        "body": "Nice work on this!"
      }
    ]
  },
  {
    "number": 47,
    "title": "Use `body` fields instead of putting everything directly inside nodes",
    "created_at": "2024-12-16T20:27:13Z",
    "closed_at": "2024-12-22T23:35:21Z",
    "labels": [
      "enhancement",
      "good first issue"
    ],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/issues/47",
    "body": "This applies to class_def / module_def / method_def / etc, anything that takes _statements.\r\n\r\n```\r\n(class_def\r\n  name: (identifier)\r\n  (method_def ...))\r\n```\r\nshould be:\r\n```\r\n(class_def\r\n  name: (identifier)\r\n  body: (expressions\r\n    (method_def ...)))\r\n```\r\n\r\nThis is needed for helix textobjects.scm (and maybe others) to differentiate nodes that are part of the def itself, and ones inside it.",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/47/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "hugopl",
        "created_at": "2024-12-22T22:55:14Z",
        "body": "This is also needed for nvim."
      }
    ]
  },
  {
    "number": 38,
    "title": "Allow method calls to have optional visibility modifier",
    "created_at": "2024-12-13T03:50:07Z",
    "closed_at": "2024-12-16T06:50:14Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/38",
    "body": "Closes #27 \r\n\r\nStores visibility modifier in field\r\n\r\n17 more stdlib files parsing without errors",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/38/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-15T19:52:02Z",
        "body": "I should be able to rebase / fix merge conflicts tn, currently afk, unless you or devnote wants to do that real quick."
      },
      {
        "user": "keidax",
        "created_at": "2024-12-16T04:17:59Z",
        "body": "Conflicts resolved, just need @devnote-dev to approve"
      }
    ]
  },
  {
    "number": 22,
    "title": "Support for lib / fun / c struct / global vars / type",
    "created_at": "2024-12-10T06:28:25Z",
    "closed_at": "2024-12-12T14:38:03Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/22",
    "body": "Closes #18\r\n\r\nStill some edge cases and may not have done everything the best way, feedback welcome.\r\n\r\nWith this, we're at ~60% stdlib coverage.",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/22/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "keidax",
        "created_at": "2024-12-10T17:28:01Z",
        "body": "By getting rid of the changes in `conflicts`, I got this  conflict:\r\n\r\n```\r\nUnresolved conflict for symbol sequence:\r\n\r\n  'fun'  identifier  '('  identifier  •  ')'  …\r\n\r\nPossible interpretations:\r\n\r\n  1:  'fun'  identifier  '('  (_expression  identifier)  •  ')'  …\r\n  2:  'fun'  identifier  '('  (fun_param  identifier)  •  ')'  …\r\n\r\nPossible resolutions:\r\n\r\n  1:  Specify a higher precedence in `_expression` than in the other rules.\r\n  2:  Specify a higher precedence in `fun_param` than in the other rules.\r\n  3:  Add a conflict for these rules: `_expression`, `fun_param`\r\n```\r\n\r\nThis is confusing at first. Tree-sitter is supposed to only allow tokens in valid locations, so why would `$._expression` be valid in the parameter list?\r\n\r\nAfter considering `$.top_level_fun_def` I realized what's happening: if the `fun` definition doesn't have any params, then the body could start immediately. In that case, `( _expression )` could be legitimately parsed as a parenthesized statement.\r\n\r\nThese are both valid syntax (and we'll want test cases to distinguish them):\r\n``` crystal\r\n# equivalent to a_little_fun()\r\nfun a_little_fun;\r\n(a : Int32)\r\nend\r\n\r\n# equivalent to more_fun(a : Int32)\r\nfun more_fun\r\n(a : Int32)\r\nend\r\n```\r\n\r\nNote that this is the opposite of how `def`s are parsed:\r\n\r\n``` crystal\r\n# equivalent to a_def()\r\ndef a_def\r\n(a : Int32)\r\nend\r\n```\r\n\r\nI think this should be sufficient to resolve the conflict:\r\n\r\n----------------------------------------\r\n\r\n``` javascript\r\n    top_level_fun_def: $ => {\r\n      const params = seq(\r\n        '(', field('params', $.fun_param_list), ')',\r\n      )\r\n      const real_name = seq('=',\r\n        field('real_name', choice($.identifier, $.constant, $.string)),\r\n      )\r\n      const return_type = field('type', seq(/[ \\t]:\\s/, $._bare_type))\r\n\r\n      return seq(\r\n        prec.right(seq(\r\n          'fun',\r\n          field('name', $.identifier),\r\n          optional(real_name),\r\n          optional(params),\r\n          optional(return_type),\r\n        )),\r\n        field('body', optional($._statements)),\r\n        'end',\r\n      )\r\n    },\r\n\r\n    // [...]\r\n\r\n    fun_param: $ => {\r\n      const type = field('type', seq(/[ \\t]:\\s/, $._bare_type))\r\n\r\n      return seq(\r\n        choice($.identifier, $.constant),\r\n        type,\r\n      )\r\n    },\r\n```\r\n\r\nThe two key changes are making the type mandatory on `fun_param`, and using `prec.right`.\r\n\r\nMaking the type mandatory means that `fun foo ( a )` isn't ambiguous any more -- `a` can't be a parameter because it doesn't have a type attached.\r\n\r\n`prec.right` ensures that `fun identifier (<possible param list>)` is always parsed as a param list and not a parenthesized statement.\r\n\r\n(I also noticed that extracting the top-level fun signature to its own rule helps, but I can't really explain why. This is where my understanding of LR parsers gets shaky.)\r\n\r\nThis still doesn't perfectly match what the Crystal parser is doing. For example, with the above change, tree-sitter parses this fine:\r\n``` crystal\r\nfun foo\r\n(a)\r\nend\r\n\r\n# (top_level_fun_def\r\n#   name: (identifier)\r\n#   body: (identifier))\r\n```\r\nBut Crystal doesn't accept it:\r\n```\r\nIn scratch.cr:27:3\r\n\r\n 27 | (a)\r\n        ^\r\nError: expecting token ':', not ')'\r\n```\r\n\r\nFor now, I would say that being more lenient is good. But it's worth exploring some more edge cases around how `fun` gets parsed.\r\n"
      },
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-10T21:29:48Z",
        "body": "Thank you for this write-up and the fix for the issue! I really appreciate it. If we write up a blog post about the tree sitter parser when it's more done, I think it'd be cool for that to be a part of it as a deeper dive into the edge cases of Crystal syntax."
      }
    ]
  },
  {
    "number": 20,
    "title": "Add linters to CI",
    "created_at": "2024-12-10T00:33:28Z",
    "closed_at": "2024-12-11T04:47:58Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/20",
    "body": "### Add linting & formatting to the CI checks\r\n\r\nThese are the tools I'm already using locally. Just wanted to set something as a standard for the project. I don't feel strongly about the specific tooling, if anyone wants to suggest alternatives.\r\n\r\nI don't love how the output of clang-format looks, because it never explains the error. It just says \"code should be clang-formatted\":\r\n```\r\nsrc/scanner.c:1119:19: error: code should be clang-formatted [-Wclang-format-violations]\r\n#define BRACE_EXPR (valid_symbols[START_OF_HASH_OR_TUPLE] || valid_symbols[START_OF_NAMED_TUPLE])\r\n                  ^\r\n```\r\nBut since I have clang-format running automatically in my editor, it just gets fixed when I save.",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/20/comments",
    "author": "keidax",
    "comments": [
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-10T17:08:32Z",
        "body": "Thank you! I agree that we should enforce a consistent style, and I don't have a preference either way. I'll setup clang-format locally and willing to review / approve this after you mark this as ready for review."
      },
      {
        "user": "keidax",
        "created_at": "2024-12-11T03:51:46Z",
        "body": "I upgraded to the latest version of eslint, which involves a new config file format. As far as I can tell all the rules are intact."
      }
    ]
  },
  {
    "number": 16,
    "title": "Catch assertion failures in stdlib coverage",
    "created_at": "2024-12-09T19:59:22Z",
    "closed_at": "2024-12-09T21:11:38Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/16",
    "body": "If the stdlib coverage test triggers an assertion failure, segfault, or other unusual exit code, the whole test run is aborted.\r\n\r\nAlso, fix an assertion failure I found.\r\n",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/16/comments",
    "author": "keidax",
    "comments": [
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-09T20:08:01Z",
        "body": "Would you be able to update the test ci so that it runs `tree-sitter init-config`?"
      },
      {
        "user": "keidax",
        "created_at": "2024-12-09T20:14:30Z",
        "body": "> Would you be able to update the test ci so that it runs `tree-sitter init-config`?\r\n\r\nAre you asking in relation to this PR, or just in general?\r\n"
      },
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-09T20:19:01Z",
        "body": "> Are you asking in relation to this PR, or just in general?\r\n\r\nThis PR - as we're now passing stderr from the stdlib test subprocesses, it's outputting this warning a lot"
      }
    ]
  }
]