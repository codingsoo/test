[
  {
    "number": 22,
    "title": "Update README.md",
    "created_at": "2024-09-25T00:21:50Z",
    "closed_at": "2024-09-25T06:17:15Z",
    "labels": [],
    "url": "https://github.com/tamtaasatiani/tahmlib/pull/22",
    "body": "fix: player struct didn't show up using the provided demo code.\r\nSet the player color.",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/22/comments",
    "author": "Ahmed-Aladdiin",
    "comments": [
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-25T06:17:29Z",
        "body": "can't believe i didn't notice this, thank you so much for this fix!"
      }
    ]
  },
  {
    "number": 18,
    "title": "Not an Issue",
    "created_at": "2024-09-20T18:11:52Z",
    "closed_at": "2024-09-20T23:35:27Z",
    "labels": [],
    "url": "https://github.com/tamtaasatiani/tahmlib/issues/18",
    "body": "Heya, I'm glad to see this thing tbh, kudos for what you've done!\r\n\r\nOh and maybe you'll like, MxEngine, you should definitely try it... I hope to see an FPoV shooter game someday soon :)",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/18/comments",
    "author": "Coder-X15",
    "comments": [
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-20T23:35:04Z",
        "body": "thank you for the kudos but please only use the issue section for issues!"
      }
    ]
  },
  {
    "number": 16,
    "title": "Main loop now runs inside \"Tham\" singleton.",
    "created_at": "2024-09-12T20:13:44Z",
    "closed_at": "2024-09-18T18:29:50Z",
    "labels": [],
    "url": "https://github.com/tamtaasatiani/tahmlib/pull/16",
    "body": "Solved issue #5, main loop now runs inside \"Tham\" singleton.\r\nI also added a Makefile to compile the current project on Linux (tested Debian 12), it's not intrusive and it can be deleted when a build systems is chosen.",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/16/comments",
    "author": "Javier-Lozano",
    "comments": [
      {
        "user": "Javier-Lozano",
        "created_at": "2024-09-18T18:56:40Z",
        "body": "I should've addressed issue #1 and #5 together beforehand. Since this branch fell behind recent changes I decided to close the request, I still think I can address those issues but I'll wait for a response before sending a request, sorry for the inconveniences :sweat_smile: "
      },
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-19T06:12:56Z",
        "body": "no-no! i'm sorry for your inconvenience and thank you for participating either way!\r\nthat being sad, if you do plan on contributing, could you use plain function pointers instead of std function? i plan on using the standard library as minimally as possible for now"
      },
      {
        "user": "Javier-Lozano",
        "created_at": "2024-09-19T14:26:23Z",
        "body": "Got it working! :thinking:\r\n\r\ntahm.h\r\n```c++\r\ntypedef void (*vFunc)();\r\ntypedef void (*vFuncEv)(Event);\r\n\r\nclass Tahm {\r\n...\r\nprivate:\r\n    void handleEvents();\r\n    vFunc callbackUpdate;\r\n    vFunc callbackDraw;\r\n    vFuncEv callbackKeypressed;\r\npublic:\r\n    void init(vFunc start, vFunc update, vFunc draw, vFuncEv keypressed);\r\n    void run();\r\n...\r\n};\r\n```\r\ntahm.cpp\r\n```c++\r\nvoid Tahm::init(vFunc start, vFunc update, vFunc draw, vFuncEv keypressed)\r\n{\r\n    callbackUpdate = update;\r\n    callbackDraw = draw;\r\n    callbackKeypressed = keypressed;\r\n    \r\n    start(); // Call Start right away\r\n    window->init();\r\n    renderer->init();\r\n    audio->setupDevice();\r\n}\r\n\r\nvoid Tahm::run()\r\n{\r\n\twhile(running)\r\n\t{\r\n\t\t// Update\r\n\t\thandleEvents();\r\n\t\tcallbackUpdate();\r\n\t\t//Draw\r\n\t\trenderer->prepare();\r\n\t\tcallbackDraw();\r\n\t\trenderer->present();\r\n\t\t\r\n\t\tSDL_Delay(16);\r\n\t}\r\n}\r\n\r\nvoid Tahm::handleEvents()\r\n{\r\n\tEvent event;\r\n\twhile (SDL_PollEvent(&event))\r\n\t{\r\n\t\tswitch (event.type)\r\n\t\t{\r\n\t\tcase SDL_QUIT:\r\n\t\t\trunning = false;\r\n\t\t\tbreak;\r\n\t\tcase SDL_KEYDOWN:\r\n\t\t\tcallbackKeypressed(event);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nengine.cpp\r\n```c++\r\nint main(int argc, char* argv[])\r\n{\r\n\ttahm.init(start, update, draw, keypressed);\r\n\ttahm.run();\r\n\ttahm.destroy();\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nNow the main loop runs inside Tahm class with callbacks."
      }
    ]
  },
  {
    "number": 14,
    "title": "[Not game engine suggestion] Discord server",
    "created_at": "2024-09-11T07:25:15Z",
    "closed_at": "2024-09-16T17:18:17Z",
    "labels": [],
    "url": "https://github.com/tamtaasatiani/tahmlib/issues/14",
    "body": "Maybe it will be better to communicate with contributors/subscribers through discord server.",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/14/comments",
    "author": "Snakemonster",
    "comments": [
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-11T07:57:15Z",
        "body": "good idea! will get to it tomorrow as soon as i come back from work"
      },
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-16T17:18:17Z",
        "body": "Unfortunately, I couldn't find mods, so it's a no for now :("
      }
    ]
  },
  {
    "number": 9,
    "title": "remove traces of `input.cpp`",
    "created_at": "2024-09-08T00:15:47Z",
    "closed_at": "2024-09-08T08:17:44Z",
    "labels": [],
    "url": "https://github.com/tamtaasatiani/tahmlib/pull/9",
    "body": "in `tahm.vcxproj` and `tahm.vcxproj.filters` files, `input.cpp` is listed. Cannot compile from Visual Studio.\r\nby removing them, compilation would be fine",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/9/comments",
    "author": "alumen2101",
    "comments": [
      {
        "user": "tamtaasatiani",
        "created_at": "2024-09-08T08:17:40Z",
        "body": "hnn i thought i did this already. thank you!"
      }
    ]
  },
  {
    "number": 5,
    "title": "\"main\" function needs to be revised",
    "created_at": "2024-09-01T08:31:25Z",
    "closed_at": "2024-09-27T03:15:11Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/tamtaasatiani/tahmlib/issues/5",
    "body": "Game loop should be moved inside the \"tahm\" class",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/5/comments",
    "author": "tamtaasatiani",
    "comments": [
      {
        "user": "Javier-Lozano",
        "created_at": "2024-09-11T08:29:37Z",
        "body": "Hi, this is my first ever contribution to someone else's project, so I don't really know how to post the changes.\r\n\r\nFirst of all as an annoying Linux user I am obliged to tell you I'm using Linux and was able to compile the code and if I'm breaking something for Windows users that might be the reason.\r\n\r\n**tahm.h**\r\nI added ` void run()` and moved `void handleEvents()` inside the Tham class\r\n```\r\nclass Tham\r\n{\r\npublic:\r\n\tvoid run();\r\nprivate:\r\n\tvoid handleEvents();\r\n...\r\n}\r\n```\r\n\r\n**tahm.cpp**\r\n\r\nIncluded `engine.h` to access `start()`, `update()`, `draw() `and `keypressed()`. The main loop now runs inside `Tahm::run()`\r\n```\r\n#include \"tahm.h\"\r\n#include \"../engine.h\"\r\n\r\n//...\r\n\r\nvoid Tahm::init(void)\r\n{\r\n\tstart();\r\n\twindow->init();\r\n\trenderer->init();\r\n\taudio->setupDevice();\r\n}\r\n\r\nvoid Tahm::run(void)\r\n{\r\n\twhile (running)\r\n\t{\r\n\t\thandleEvents();\r\n\t\tupdate();\r\n\t\trenderer->prepare();\r\n\t\tdraw();\r\n\t\trenderer->present();\r\n\t\tSDL_Delay(16);\r\n\t}\r\n}\r\n\r\nvoid Tahm::handleEvents()\r\n{\r\n\tEvent event;\r\n\twhile (SDL_PollEvent(&event))\r\n\t{\r\n\t\tswitch (event.type)\r\n\t\t{\r\n\t\tcase SDL_QUIT:\r\n\t\t\trunning = false;\r\n\t\t\tbreak;\r\n\r\n\t\tcase SDL_KEYDOWN:\r\n\t\t\tkeypressed(event);\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n```\r\n\r\n**engine.cpp**\r\n\r\nThis is how main() function look like now, much more cleaner\r\n```\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n\ttahm.init();\r\n\ttahm.run();\r\n\ttahm.destroy();\r\n\r\n\treturn 0;\r\n}\r\n\r\n```\r\n**engine.h** \r\n\r\nA global variable was declared inside engine.cpp  so I added this\r\n`extern Tahm& tahm;`\r\nand  unless some fancy C/C++ trickery is being at work I removed prototype for main() function.\r\n\r\n"
      }
    ]
  },
  {
    "number": 3,
    "title": "Classes and methods aren't very safe",
    "created_at": "2024-09-01T08:15:07Z",
    "closed_at": "2024-09-27T03:14:50Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/tamtaasatiani/tahmlib/issues/3",
    "body": "Some methods can be accessed from places where it doesn't make sense. For example initializations for audio and other modules should only be accessible from anywhere other than the tahm class, however, some other methods for audio SHOULD be accessible",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/3/comments",
    "author": "tamtaasatiani",
    "comments": [
      {
        "user": "SirJamesClarkMaxwell",
        "created_at": "2024-09-09T08:33:55Z",
        "body": "I think that the problem is in your engine architecture. I quite don't get why are you put definitions `Window`,`Input`, and `Renderer` classes into the `Tahm` class. Why they can't be stand alone classes defined in the Tahm namespace? \r\nWhy they are defined in the private part of the Tahm class, if you are exposing all of them to public API by creating public roll pointers in Tahm class? Why did you choose the role pointers instead of smart one? "
      },
      {
        "user": "Javier-Lozano",
        "created_at": "2024-09-13T01:24:50Z",
        "body": "The library is inspired by Love2D, Tham class tries to mimic the \"love\" structure from Love2D, I think that's why it's structured this way.\r\nFrom what I can understand everything should be managed trough the Tham Singleton, you access Window, Renderer, Graphics, etc \"modules\" (as they are called in Love2D) trough public members and I think the reason they are nested and private inside the Tham Class is to prevent instantiation from outside the class.\r\n\r\nIt also ensures a simple syntax, for example, to draw a rectangle you do:\r\n\r\n`tahm.graphics->draw->rect()`\r\n\r\nI don't like the use of the `->` operator but this could be easily fixed by just statically allocating graphcis and draw variables instead of using Raw pointers.\r\nNow the code now should look like this:\r\n\r\n`tahm.graphics.draw.rect()`\r\n\r\nIt's less cumbersome to write and you don't have to remember to use `->` operator.\r\n\r\nI think the current code is fine enough, it compiles and does what it supposed to do, it's just weirdly organized. I think we should organize it better before making serious changes.\r\n\r\nThen I think all SDL2 subsystems should be initialized right away inside Tahm's constructor with default values (Window, Renderer, Sound, TTF, etc), then call `Start()` function afterwards not before, the way is implemented right now works because we aren't capable of doing lots of things, like creating a Texture, which wouldn't work because it requires the Video Subsystem and a Renderer to be initialized.\r\n\r\nThe more I think about how this works the more I like it. Keep it up!"
      },
      {
        "user": "Ahmed-Aladdiin",
        "created_at": "2024-09-27T02:00:58Z",
        "body": "@tamtaasatiani, shouldn't this be closed now? Alongside #7."
      }
    ]
  },
  {
    "number": 2,
    "title": "tahm class isn't a singleton",
    "created_at": "2024-09-01T08:13:03Z",
    "closed_at": "2024-09-10T09:14:01Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/tamtaasatiani/tahmlib/issues/2",
    "body": "There should only be one instance of the engine and literal game, but the tahm class isn't a singleton. Switching it to singleton makes more sense",
    "comments_url": "https://api.github.com/repos/tamtaasatiani/tahmlib/issues/2/comments",
    "author": "tamtaasatiani",
    "comments": [
      {
        "user": "iyakushev",
        "created_at": "2024-09-10T08:47:17Z",
        "body": "Hello, Tamta! Nice project. I believe you could make it better without relying on singletons. Also I should note that your current singleton implementation is not thread-safe.\r\nFor small projects it's completely ok to bundle both game and engine together as a single executable. However, if you wish to make it reusable you have to split them into two separate entities. Dynamically or statically linking the engine to the game code. Never worked with VCProj (CMake fanboi), so I won't be of much help here, but I'm sure you can easily google that. The main loop could be incapsulated into the engine's API or left for implementation in the user's code. This allows the game to be a main point of execution while the engine provides API for subsystems and manages resources.\r\nYour engine API could remain the same. Though I would suggest you to add namespaces engine wide to avoid unnecessary collisions with users code. \r\n```cpp\r\n// engine.h\r\nnamespace TahmEngine\r\n{\r\nvoid start();\r\nvoid update();\r\nvoid draw();\r\nvoid keyPressed(const Event& event);  // <-- Judging by the docs event union is aligned to at least 8 bytes. Better take it by ref to avoid copying large structs on the stack.\r\n};\r\n\r\n// ----------------\r\n// user's main.cpp (+linking with TahmEngine)\r\nvoid TahmEngine::start()  // <-- tempted to move those into Tahm class\r\n{\r\n    // logic goes here\r\n}\r\n\r\nint main() \r\n{\r\n    auto engine = TahmEngine::Tahm();\r\n    engine.init();\r\n    engine.doMainLoop();\r\n    return 0;\r\n}\r\n``` \r\nAnd one small suggestion: you can use `std::make_unique<T>(...)` instead of `new`. This will ease your life by automatically destructing owned objects (meaning you could use defaulted destructors) while producing zero overhead in most cases.\r\nSorry for dumping all of that into an issue, didn't find discussion panel in the project. "
      }
    ]
  }
]