[
  {
    "number": 97,
    "title": "Fix missing -pthread for fbdev builds",
    "created_at": "2025-02-02T21:17:19Z",
    "closed_at": "2025-02-02T21:39:27Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/97",
    "body": "Since pthread is explicitly used in `linux_input.c` (which is used in builds for fbdev), it is necessary to add pthread to the `TARGET_LIBS` list to ensure the build completes successfully.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/97/comments",
    "author": "Theldus",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2025-02-02T21:39:41Z",
        "body": "Thank @Theldus for contributing!"
      }
    ]
  },
  {
    "number": 95,
    "title": "Change the logic for window click detection",
    "created_at": "2025-02-01T07:53:52Z",
    "closed_at": "2025-02-01T10:59:44Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/95",
    "body": "Implement the function twin_window_valid_range() to check whether the click coordinates fall within the window's range, based on the window's style. Originally, the logic for detecting if the window was clicked relied on the function twin_pixmap_transparent(). However, the click event won't be triggered when a transparent pixel in the window's region is clicked.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/95/comments",
    "author": "weihsinyeh",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2025-02-01T10:59:56Z",
        "body": "Thank @weihsinyeh for contributing!"
      }
    ]
  },
  {
    "number": 88,
    "title": "Use different colors for active/inactive titles",
    "created_at": "2025-01-11T12:38:40Z",
    "closed_at": "2025-01-11T16:47:45Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/88",
    "body": "Implement the twin_active_pixmap() function to find the currently active pixel map and the previously active pixel map. Utilize the window's active variable to draw different frame colors for the active window and inactive windows.\r\n\r\nClose sysprog21#86",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/88/comments",
    "author": "weihsinyeh",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2025-01-11T16:47:53Z",
        "body": "Thank @weihsinyeh for contributing!"
      }
    ]
  },
  {
    "number": 79,
    "title": "Fix double free error",
    "created_at": "2024-12-08T13:02:23Z",
    "closed_at": "2024-12-08T15:37:58Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/79",
    "body": "Removed the `free(old)` call from the `_twin_queue_delete` function, consolidating memory deallocation into the `_twin_queue_review_order` function. This change improves memory management and enhances the maintainability of the code.\r\n\r\nThe fix was verified using GDB to confirm that old is properly freed during the execution of `free(q)` in the `_twin_queue_review_order` function. Additionally, AddressSanitizer was used to confirm the absence of memory leaks and double free issues.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/79/comments",
    "author": "huaxinliao",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-12-08T13:37:11Z",
        "body": "See if `walking` member should be eliminated or not."
      },
      {
        "user": "huaxinliao",
        "created_at": "2024-12-08T14:10:19Z",
        "body": "> See if `walking` member should be eliminated or not.\n\nI experimented with the fbdev and SDL backends and confirmed that it can run normally without `walking` member."
      },
      {
        "user": "jserv",
        "created_at": "2024-12-08T14:19:12Z",
        "body": "> I experimented with the fbdev and SDL backends and confirmed that it can run normally without `walking` member.\r\n\r\nRefine the proposed changes by revisiting the use of `walking` member."
      },
      {
        "user": "jserv",
        "created_at": "2024-12-08T15:38:08Z",
        "body": "Thank @huaxinliao for contributing!"
      }
    ]
  },
  {
    "number": 72,
    "title": "Decouple Linux VT",
    "created_at": "2024-11-10T13:33:15Z",
    "closed_at": "2024-11-13T22:40:27Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/72",
    "body": "Move Linux VT into separate files to enable developers to use it in other backhands, such as Linux DRM.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/72/comments",
    "author": "Bennctu",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-11-11T02:58:48Z",
        "body": "The ioctl we would like to wrap in this task:\r\n* `ioctl(ttyfd, KDSETMODE, KD_GRAPHICS)`\r\n* `ioctl(ttyfd, KDSETMODE, KD_TEXT)`"
      },
      {
        "user": "jserv",
        "created_at": "2024-11-13T22:40:39Z",
        "body": "Thank @Bennctu for contributing!"
      }
    ]
  },
  {
    "number": 68,
    "title": "Support input device hot-plugging and removal via udev",
    "created_at": "2024-10-31T15:36:51Z",
    "closed_at": "2024-11-11T10:20:23Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/68",
    "body": "## Overview\r\n\r\n`udev` (`userspace /dev`) is a device manager for the Linux kernel. By monitoring `add` and `remove` events from `udev`, we can dynamically update the event device file descriptors table to enable device hot-plugging and removal.\r\n\r\n## Prerequisites\r\n\r\nTo test the modified code, compile `mado` with the `Linux framebuffer` backend.\r\n\r\n## Test procedure\r\n\r\n1. Switch to a new virtual terminal (VT) by pressing `Ctrl+Alt+Fn` (e.g., `Ctrl+Alt+F3`) and then execute:\r\n\r\n```shell\r\n$ sudo ./demo-fbdev\r\n```\r\n\r\n2. Test the new feature by unplugging and reconnecting the mouse.\r\n3. Return to the desktop environment with `Ctrl+Alt+F1`.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/68/comments",
    "author": "shengwen-tw",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-11-10T04:09:20Z",
        "body": "Have you tested the proposed changes with more than one mouse device?"
      },
      {
        "user": "shengwen-tw",
        "created_at": "2024-11-10T12:57:12Z",
        "body": "I adjusted the change to prevent the event device thread from reopening all file descriptors whenever `udev` detects `add` or `remove` events, as the previous approach caused substantial lag. I then tested it with 1, 2, and 3 mouse setups to ensure functionality is correct."
      },
      {
        "user": "jserv",
        "created_at": "2024-11-11T10:20:30Z",
        "body": "Thank @shengwen-tw for contributing!"
      }
    ]
  },
  {
    "number": 67,
    "title": "Refine event handling",
    "created_at": "2024-10-31T09:42:38Z",
    "closed_at": "2024-11-20T09:14:14Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/67",
    "body": "This commit adds a member function for event handling to the backend interface, replacing the previous file-based system that relies on poll(2). The new design addresses issues created by backends like SDL, which do not expose underlying file descriptors. Integrating the fbdev backend into the updated interface remains to be completed.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/67/comments",
    "author": "alanjian85",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-10-31T11:06:55Z",
        "body": "Consider the further cleanups:\r\n```diff\r\n--- a/include/twin.h\r\n+++ b/include/twin.h\r\n@@ -455,15 +455,10 @@ typedef twin_time_t (*twin_timeout_proc_t)(twin_time_t now, void *closure);\r\n \r\n typedef bool (*twin_work_proc_t)(void *closure);\r\n \r\n-typedef enum _twin_file_op { TWIN_READ = 1, TWIN_WRITE = 2 } twin_file_op_t;\r\n-\r\n-typedef bool (*twin_file_proc_t)(int file, twin_file_op_t ops, void *closure);\r\n-\r\n #define twin_time_compare(a, op, b) (((a) - (b)) op 0)\r\n \r\n typedef struct _twin_timeout twin_timeout_t;\r\n typedef struct _twin_work twin_work_t;\r\n-typedef struct _twin_file twin_file_t;\r\n \r\n /*\r\n  * Widgets\r\n@@ -656,17 +651,6 @@ void twin_premultiply_alpha(twin_pixmap_t *px);\r\n \r\n void twin_event_enqueue(const twin_event_t *event);\r\n \r\n-/*\r\n- * file.c\r\n- */\r\n-\r\n-twin_file_t *twin_set_file(twin_file_proc_t file_proc,\r\n-                           int file,\r\n-                           twin_file_op_t ops,\r\n-                           void *closure);\r\n-\r\n-void twin_clear_file(twin_file_t *file);\r\n-\r\n /*\r\n  * fixed.c\r\n  */\r\n--- a/include/twin_private.h\r\n+++ b/include/twin_private.h\r\n@@ -472,14 +472,6 @@ struct _twin_work {\r\n     void *closure;\r\n };\r\n \r\n-struct _twin_file {\r\n-    twin_queue_t queue;\r\n-    int file;\r\n-    twin_file_op_t ops;\r\n-    twin_file_proc_t proc;\r\n-    void *closure;\r\n-};\r\n-\r\n typedef enum _twin_order {\r\n     TWIN_BEFORE = -1,\r\n     TWIN_AT = 0,\r\n@@ -504,8 +496,6 @@ twin_queue_t *_twin_queue_set_order(twin_queue_t **head);\r\n \r\n void _twin_queue_review_order(twin_queue_t *first);\r\n \r\n-int _twin_run_file(twin_time_t delay);\r\n-\r\n void _twin_run_timeout(void);\r\n \r\n twin_time_t _twin_timeout_delay(void);\r\n```"
      },
      {
        "user": "shengwen-tw",
        "created_at": "2024-10-31T16:08:05Z",
        "body": "I noticed you removed the `dummy()` function I added as a temporary workaround previously.\r\nWere you able to identify the root cause of the original issue?"
      },
      {
        "user": "alanjian85",
        "created_at": "2024-11-02T02:04:18Z",
        "body": "@shengwen-tw The entire application is driven by `twin_dispatch()`, which calls `_twin_run_file()` repeatedly in a loop. When the function cannot discover any files in the queue, it simply terminates the dispatch loop and sleeps for a certain amount of seconds. As a result, after updating the dispatch loop to use the new polling method, it is no longer necessary to create a dummy file for fbdev.\r\n\r\n```c\r\nvoid twin_dispatch(void)\r\n{\r\n    for (;;) {\r\n        _twin_run_timeout();\r\n        _twin_run_work();\r\n        if (!_twin_run_file(_twin_timeout_delay()))\r\n            break;\r\n    }\r\n}\r\n```"
      },
      {
        "user": "jserv",
        "created_at": "2024-11-14T12:41:48Z",
        "body": "Any update?"
      },
      {
        "user": "alanjian85",
        "created_at": "2024-11-15T04:31:31Z",
        "body": "I have been preparing for the entrance exam of NCKU recently, so the development will be postponed until this Saturday."
      },
      {
        "user": "jserv",
        "created_at": "2024-11-20T06:10:05Z",
        "body": "Why did you close this pull request?"
      },
      {
        "user": "alanjian85",
        "created_at": "2024-11-20T06:28:27Z",
        "body": "The previous commit was temporarily removed during the rebase process, which caused Git to close this PR automatically. I will push the new commit once the rebase is fully completed."
      },
      {
        "user": "jserv",
        "created_at": "2024-11-20T06:44:46Z",
        "body": "@ndsl7109256, Can you confirm the proposed changes with VNC backend?"
      },
      {
        "user": "alanjian85",
        "created_at": "2024-11-20T06:55:48Z",
        "body": "I also encountered the issues described in #62 and #65 while debugging the fbdev backend, which resulted in the framebuffer being entirely filled with white. Resolving these problems is critical to continue development on platforms with newer generations of Intel CPUs.\r\n\r\n```sh\r\n$ lscpu\r\nArchitecture:             x86_64\r\n  CPU op-mode(s):         32-bit, 64-bit\r\n  Address sizes:          39 bits physical, 48 bits virtual\r\n  Byte Order:             Little Endian\r\nCPU(s):                   12\r\n  On-line CPU(s) list:    0-11\r\nVendor ID:                GenuineIntel\r\n  Model name:             13th Gen Intel(R) Core(TM) i7-1355U\r\n    CPU family:           6\r\n    Model:                186\r\n    Thread(s) per core:   2\r\n    Core(s) per socket:   10\r\n    Socket(s):            1\r\n    Stepping:             3\r\n    CPU(s) scaling MHz:   28%\r\n    CPU max MHz:          5000.0000\r\n    CPU min MHz:          400.0000\r\n    BogoMIPS:             5222.40\r\n```"
      },
      {
        "user": "ndsl7109256",
        "created_at": "2024-11-20T07:36:08Z",
        "body": "@jserv The VNC backend uses the `nvnc_set_pointer_fn` API to handle pointer events. Originally, it set file handler with a dummy function similar to the approach used in Fbdev. I believe the proposed change is appropriate and it tests well."
      },
      {
        "user": "jserv",
        "created_at": "2024-11-20T09:14:22Z",
        "body": "Thank @alanjian85 for contributing!"
      },
      {
        "user": "jserv",
        "created_at": "2024-11-23T14:44:14Z",
        "body": "> I also encountered the issues described in #62 and #65 while debugging the fbdev backend, which resulted in the framebuffer being entirely filled with white. Resolving these problems is critical to continue development on platforms with newer generations of Intel CPUs.\r\n\r\nAfter merging #65 and #70, the Linux framebuffer backend should be more usable. @alanjian85, please review the recent codebase."
      }
    ]
  },
  {
    "number": 59,
    "title": "Port font editor to SDL2",
    "created_at": "2024-10-09T11:49:35Z",
    "closed_at": "2025-01-06T15:05:35Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/59",
    "body": "Replace X11 with SDL2 to improve the portability and cross-platform support\r\n\r\nMigrated window creation from X11's `XCreateWindow` to `SDL_CreateWindow`.\r\n\r\nReplaced X11 event handling with SDL2’s event loop (`SDL_PollEvent`) to capture input events such as keyboard and mouse interactions.\r\n\r\nUpdated rendering to use `SDL_Renderer` and `SDL_Surface`, replacing X11's rendering functions.\r\n\r\n* Modified some key event logic:\r\n1. SDLK_ESCAPE: ESC now exits the program.\r\n2. SDL_QUIT: Clicking the \"X\" on the window exits the program.\r\n\r\n* Unchanged key event logic:\r\n1. SDLK_q: Switches to the next font.\r\n\r\n* Features not fully implemented yet:\r\n1. SDLK_s, SDLK_u, SDLK_f, SDLK_d, SDLK_DOWN: Handling logic for stripe drawing operations.\r\n2. SDL_WINDOWEVENT, SDL_MOUSEBUTTONDOWN.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/59/comments",
    "author": "jouae",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-11-23T15:57:50Z",
        "body": "You don't have to write the message `Resolved in <commit>` literally. Instead, simply click the button \"Resolve conversation\" once you have confirmed."
      },
      {
        "user": "jouae",
        "created_at": "2024-11-24T16:58:53Z",
        "body": "> How can I control the second control point, pt[1], when I press pt[2]? I can currently only control the first control point, pt[0].\r\n\r\n@weihsinyeh \r\n\r\nSorry, this function is not supported now.\r\n\r\nI'm trying to figure out how to let the second control point be moved by user."
      },
      {
        "user": "jouae",
        "created_at": "2024-11-25T10:59:17Z",
        "body": "> How can I control the second control point, pt[1], when I press pt[2]? I can currently only control the first control point, pt[0].\r\n\r\n@weihsinyeh \r\n\r\nI figure out how to control second point.  Press shift and arrow key at same time to move the control point.\r\n\r\n```c\r\nstatic void tweak_spline(char_t *c, cmd_t *first, int p2, double dx, double dy)\r\n{\r\n    int i = p2 ? 1 : 0;\r\n\r\n    push(c);\r\n    first->pt[i].x += dx;\r\n    first->pt[i].y += dy;\r\n}\r\n```\r\n\r\nThis `p2` is used to determine whether to move the second control point."
      },
      {
        "user": "jserv",
        "created_at": "2024-11-25T11:31:55Z",
        "body": "> ```c\r\n> static void tweak_spline(char_t *c, cmd_t *first, int p2, double dx, double dy)\r\n> {\r\n>     int i = p2 ? 1 : 0;\r\n> ```\r\n\r\nThe statement `int i = p2 ? 1 : 0` can be replaced with `int i = !!p2`, which is shorter and elegant."
      },
      {
        "user": "jouae",
        "created_at": "2025-01-06T14:25:27Z",
        "body": "> Append `Close #7` at the end of git commit messages. Messages should use complete sentences and proper indentation.\r\n\r\n@jserv\r\n\r\nI adopted the 50/72 rule and refined the commit message to improve readability."
      },
      {
        "user": "jserv",
        "created_at": "2025-01-06T15:05:44Z",
        "body": "Thank @jouae for contributing!"
      }
    ]
  },
  {
    "number": 50,
    "title": "Ensure consistent byte order in PNG file",
    "created_at": "2024-09-14T16:02:40Z",
    "closed_at": "2024-09-15T04:49:08Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/50",
    "body": "The PNG file format maintains consistent byte order across different systems, despite variations in the underlying system's native endianness.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/50/comments",
    "author": "weihsinyeh",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-09-15T04:49:18Z",
        "body": "Thank @weihsinyeh for contributing!"
      }
    ]
  },
  {
    "number": 29,
    "title": "font-edit: Improve the type descriptions",
    "created_at": "2024-08-05T12:16:23Z",
    "closed_at": "2024-08-07T12:30:19Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/29",
    "body": "Currently, the font-edit tool relies on Xlib. According to #7, font-edit should be restructured using SDL2 to enhance portability.\r\n\r\nBefore proceeding with this work, it is necessary to understand the significance and operational principles of TWIN’s existing functionality. Therefore, we first need to add clear comments to the typedefs and functions in twin-fedit.h to provide a basis for future modifications and porting to SDL2.\r\n\r\nTo avoid disrupting other developers who might be using the tool during this process, a new branch named font-edit is created.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/29/comments",
    "author": "jouae",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-08-07T12:30:31Z",
        "body": "Thank @jouae for contributing!"
      }
    ]
  },
  {
    "number": 28,
    "title": "Remove the duplicate starting and ending points",
    "created_at": "2024-08-03T17:10:11Z",
    "closed_at": "2024-08-04T05:06:17Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/28",
    "body": "The starting point and the first left segment's A point are the same. The ending point and the original spline's D point are the same.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/28/comments",
    "author": "weihsinyeh",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-08-04T05:07:04Z",
        "body": "Thank @weihsinyeh for contributing."
      }
    ]
  },
  {
    "number": 22,
    "title": "Fix segmentation fault after destorying window",
    "created_at": "2024-07-28T15:18:26Z",
    "closed_at": "2024-07-28T15:32:55Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/22",
    "body": "Function _twin_sdl_destroy destroys the screen before the backend destroyed. This causes a segmentation fault or an endless loop. This commit changes the sequence of destruction in the function.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/22/comments",
    "author": "a1091150",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-07-28T15:33:03Z",
        "body": "Thank @a1091150 for contributing!"
      }
    ]
  },
  {
    "number": 20,
    "title": "Replace sprintf with snprintf",
    "created_at": "2024-07-26T23:06:41Z",
    "closed_at": "2024-07-27T02:56:59Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/20",
    "body": "In C99 7.19.6.5 sprintf, \"If copying takes place between objects that overlap, the behavior is undefined\".\r\n\r\nReplace sprintf with snprintf and provide a clear buffer size to ensure undefined behavior does not occur.\r\n\r\nAnd the sizeof(buff) + 1 includes the null terminator.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/20/comments",
    "author": "jouae",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-07-27T02:57:09Z",
        "body": "Thank @jouae for contributing!"
      }
    ]
  },
  {
    "number": 12,
    "title": "Fix implementation of 8-bit pixmap transformation",
    "created_at": "2024-07-19T14:02:00Z",
    "closed_at": "2024-07-19T14:23:02Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/12",
    "body": "The function twin_pixmap_read_xform_8() applies a linear transformation to an 8-bit pixmap. Due to discretization considerations in computer graphics, the output is usually calculated using backward interpolation (i.e.,_pix_saucemix).\r\n\r\nThis commit identifies two potential bugs in the implementation. The first bug is that the coordinate calculation for pts[3] should be (sx + 1, sy + 1). The second bug is that _pix_saucemix() should take pts[3] instead of pts[4]. Using pts[4] not only violates the definition of `twin_a8_t pts[4];` but also makes no sense since the four calls to _get_pix_8() are intended to obtain the top-left, top-right, bottom-left, and bottom-right pixels.\r\n\r\nAdditionally, this commit eliminates the only existing warnings in the project.",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/12/comments",
    "author": "shengwen-tw",
    "comments": [
      {
        "user": "jserv",
        "created_at": "2024-07-19T14:23:13Z",
        "body": "Thank @shengwen-tw for contributing!"
      }
    ]
  },
  {
    "number": 11,
    "title": "move private header file to src",
    "created_at": "2024-07-18T07:23:29Z",
    "closed_at": "2024-07-18T07:38:43Z",
    "labels": [],
    "url": "https://github.com/sysprog21/mado/pull/11",
    "body": "Move \"twin_private.h\" to src folder, and make a new \"util.h\" header file that include necessary header file for the expansion of future use. ",
    "comments_url": "https://api.github.com/repos/sysprog21/mado/issues/11/comments",
    "author": "Damien-Chen",
    "comments": [
      {
        "user": "Damien-Chen",
        "created_at": "2024-07-18T07:31:14Z",
        "body": "Based on my understanding, so we can directory include `twin_private.h` in source code, but indirectory include is no need right ? (based on my change, I create `util.h` include `twin_private.h`)\r\n"
      },
      {
        "user": "jserv",
        "created_at": "2024-07-18T07:37:43Z",
        "body": "> Based on my understanding, so we can directory include `twin_private.h` in source code, but indirectory include is no need right ?\r\n\r\nThe `include` directory should contain `twin.h` as the public header and nothing more, meaning that the current `twin_private.h` is a hack to allow the building of some applications invoking the internal functions. You can proceed with issue #9 to contribute to this project."
      },
      {
        "user": "jserv",
        "created_at": "2024-07-18T07:38:43Z",
        "body": "Close to concentrate on #9"
      }
    ]
  }
]