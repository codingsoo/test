[
  {
    "number": 90,
    "title": "Error: 'LuaAsset' could not be found after installing via NuGet to Unity 6",
    "created_at": "2025-01-12T15:22:20Z",
    "closed_at": "2025-01-12T15:36:21Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/90",
    "body": "I created a new Unity 6000.0.33f1 project, installed NuGet via git URL, and installed LuaCSharp through NuGet and afterwards installed the LuaCSharp package via Package Manager from git URL.\r\n\r\nAfter that I created a simple test script in the Assets root folder:\r\n\r\n```\r\nusing UnityEngine;\r\n\r\nnamespace DefaultNamespace\r\n{\r\n\tpublic class MonoBehaviour1 : MonoBehaviour\r\n\t{\r\n\t\tpublic LuaAsset script;\r\n\t}\r\n}\r\n```\r\n\r\nThis says LuaAsset could not be found:\r\n\r\n```\r\nAssets\\MonoBehaviour1.cs(10,10): error CS0246: The type or namespace name 'LuaAsset' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nI repeated this by creating an `Editor` folder with another script thinking LuaAsset may be editor-only but this results in the same error. \r\n\r\nThen I added Assembly Definitions, one for the runtime script and another for the editor script, referencing Lua.Unity for both and Lua.Unity.Editor for the editor assembly. But no matter what, the error sticks.\r\n\r\nAlso added a test.lua file under Assets and selected it. Inspector reads \"Test (Lua Asset)\" indicating that the Lua importer is active.\r\n\r\nI tried about everything I could think of but the LuaAsset type just isn't available.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/90/comments",
    "author": "CodeSmile-0000011110110111",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T15:25:25Z",
        "body": "~~Do you have both the core package and the Unity extension installed?~~\r\nAnd have you simply forgotten to `using Lua.Unity`?"
      },
      {
        "user": "CodeSmile-0000011110110111",
        "created_at": "2025-01-12T15:35:32Z",
        "body": "Oh god, my (total beginner's) mistake. Yes, that's it, and it works.\r\n\r\nIn my defense, I rely on Rider to autofix such things but it didn't give me that option initally. I assume Rider was still \"scanning\" for types at that point and I didn't stop to try again a second time."
      },
      {
        "user": "CodeSmile-0000011110110111",
        "created_at": "2025-01-12T15:36:11Z",
        "body": "my mistake"
      }
    ]
  },
  {
    "number": 89,
    "title": "Use of C# 10 makes this package incompatible with Unity",
    "created_at": "2025-01-12T14:30:30Z",
    "closed_at": "2025-01-12T14:43:05Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/89",
    "body": "When I drop the Lua folder due to missing ILuaModuleLoader into a Unity project I am greeted with plenty of these errors:\r\n\r\n```\r\nAssets\\Packages\\Lua.Unity\\Runtime\\Lua\\Attributes.cs(1,1): error CS8773: Feature 'file-scoped namespace' is not available in C# 9.0. Please use language version 10.0 or greater.\r\nAssets\\Packages\\Lua.Unity\\Runtime\\Lua\\CodeAnalysis\\Compilation\\Descriptions.cs(6,28): error CS8773: Feature 'record structs' is not available in C# 9.0. Please use language version 10.0 or greater.\r\n```\r\n\r\nI'm on Unity 6.1 beta which is still using C# 9. Unity isn't scheduled to support C# 10 or higher until Unity 7 which is expected to surface in 2026 at the earliest.\r\n\r\nMakes me wonder, does Nuget add some special sauce to make this work or has the code not been tested with Unity?",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/89/comments",
    "author": "CodeSmile-0000011110110111",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T14:33:32Z",
        "body": "Please install using NugetForUnity. For dll, the language version does not matter."
      },
      {
        "user": "CodeSmile-0000011110110111",
        "created_at": "2025-01-12T14:38:34Z",
        "body": "I just did so. Structure looks totally different. I understand it's based on source generators.  \r\nGladly I could simply uninstall Nuget package afterwards."
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T14:43:49Z",
        "body": "In any case, I don't have plans to create a dedicated repository for Unity. Please use the dll."
      }
    ]
  },
  {
    "number": 88,
    "title": "Please create a wholly self-contained Unity package",
    "created_at": "2025-01-12T14:23:02Z",
    "closed_at": "2025-01-12T14:35:41Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/88",
    "body": "When installing through Package Manager via \"add from disk\" and selecting the package.json, the following error appears:\r\n\r\n```\r\nP:\\Lua-CSharp\\src\\Lua.Unity\\Assets\\Lua.Unity\\Runtime\\ResourcesModuleLoader.cs(10,49): error CS0246: The type or namespace name 'ILuaModuleLoader' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nThis is due to the package.json not being self-contained. Using Nuget for Unity is a crutch and should not be a requirement. It should be a wholly self-contained Unity package installable via Package manager either from disk or git URL.\r\n\r\nTo make this functional you'll probably have to create a new repository Lua-CSharp-Unity which then adds the necessary folders of this repository so that we have a way to install the package directly through Package Manager without you having to stuff everything under the Unity package folder.\r\n\r\nI hope this makes sense what I'm saying. ;)\r\n\r\nPS: In the meantime I (and probably others too) would appreciate instructions on which folders to copy where in order to make the Unity package self-contained.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/88/comments",
    "author": "CodeSmile-0000011110110111",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T14:35:41Z",
        "body": "This is not planned to be supported as it would require additional maintenance and a rewrite in a lower language version. Please install the core library via dll."
      },
      {
        "user": "andybak",
        "created_at": "2025-01-12T15:14:39Z",
        "body": "Well that's a shame. Not even worth further discussion in case there's a way forward that doesn't increase the maintenance burden?"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T15:19:34Z",
        "body": "Using NugetForUnity makes it easy to manage dlls and dependencies.\r\nFamous libraries such as MessagePack-CSharp and R3 have already started to adopt the same method, and Lua-CSharp plans to follow suit. This method will likely be widely used until Unity officially supports CoreCLR."
      }
    ]
  },
  {
    "number": 86,
    "title": "LuaTable indexer does not respect `__index` when called from C#",
    "created_at": "2025-01-09T14:22:44Z",
    "closed_at": "2025-01-11T17:21:34Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/86",
    "body": "Given a Lua file like this:\r\n```lua\r\nlocal meta = {}\r\nfunction meta:Fn()\r\n    print(\"Hello, world!\")\r\nend\r\nmeta.__index = function (table, key) return meta[key] end\r\n\r\nreturn setmetatable({}, meta)\r\n```\r\nAnd C# code like this:\r\n```cs\r\nvar values = await state.DoFileAsync(...);\r\nvar obj = values[0].Read<LuaTable>();\r\nvar fn = obj[\"Fn\"].Read<LuaFunction>();\r\n```\r\nI expect `fn` to be of type `LuaFunction`. However instead I get this exception:\r\n```\r\nSystem.InvalidOperationException: Cannot convert LuaValueType.Nil to Lua.LuaFunction.\r\n   at Lua.LuaValue.Read[T]()\r\n```\r\nHowever the indexing works fine if called from Lua:\r\n```lua\r\nlocal meta = {}\r\nfunction meta:Fn()\r\n    print(\"Hello, world!\")\r\nend\r\nmeta.__index = function (table, key) return meta[key] end\r\n\r\nreturn setmetatable({}, meta)[\"Fn\"]\r\n```\r\n```cs\r\nvar values = await state.DoFileAsync(...);\r\nvar fn = values[0].Read<LuaFunction>();\r\n```\r\n\r\n(I can't tell if this will be fixed by #72)",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/86/comments",
    "author": "Charanor",
    "comments": [
      {
        "user": "Akeit0",
        "created_at": "2025-01-10T05:06:47Z",
        "body": "Metamethods like __index cannot be used on the C# side directly because Closure needs LuaState to run.\r\n(Also, __index may be async, and async indexers cannot be used in C#.)\r\nSo, unfortunately, you will need to write the following code, for example.\r\n```cs\r\nvar table = rets[0].Read<LuaTable>();\r\nLuaValue indexResult;\r\n//if (!table.TryGetValue(\"Fn\", out var indexResult))\r\n{\r\n   // if (table.Metatable != null && table.Metatable.ContainsKey(\"__index\"))\r\n    {\r\n　　\r\n        var lastValue= state.Environment[\"table\"];\r\n        state.Environment[\"table\"] = table;\r\n        indexResult = (await state.DoStringAsync(\"return table[\\\"Fn\\\"]\"))[0];\r\n        state.Environment[\"table\"] = lastValue;\r\n    }\r\n}\r\nvar fn = indexResult.Read<LuaFunction>();\r\n```"
      }
    ]
  },
  {
    "number": 82,
    "title": "Ensure array capacity only if index is larger than array length with table.insert function",
    "created_at": "2025-01-06T21:32:16Z",
    "closed_at": "2025-01-11T12:04:01Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/82",
    "body": "Fixes #78 \r\nFixes #79 \r\n\r\nTested with #78 case and small table.insert tests - memory consumption is no longer that big",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/82/comments",
    "author": "Veslo5",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-11T12:04:16Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 72,
    "title": "Fix: metatable index/newindex with table",
    "created_at": "2025-01-03T15:58:48Z",
    "closed_at": "2025-01-11T11:56:03Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/72",
    "body": "Lua must pass these tests.\r\n```lua\r\nmetatable = {\r\n    __index = {x=1}\r\n}\r\n\r\nlocal a = {}\r\nsetmetatable(a, metatable)\r\nassert(a.x == 1)\r\nmetatable.__index= nil\r\nassert(a.x == nil)\r\nmetatable.__index= function(a,b) return b end\r\nassert(a.x == 'x')\r\n```\r\n\r\n```lua\r\nmetatable = {\r\n    __newindex = {}\r\n}\r\n\r\nlocal a = {}\r\na.x = 1\r\nsetmetatable(a, metatable)\r\na.x = 2\r\nassert(a.x == 2)\r\na.x = nil\r\na.x = 2\r\nassert(a.x == nil)\r\nassert(metatable.__newindex.x == 2)\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/72/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-11T11:56:38Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 70,
    "title": "Behavior when the GetArgument<int> value is a Number but not an integer.",
    "created_at": "2025-01-02T03:24:24Z",
    "closed_at": "2025-01-04T15:42:53Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/70",
    "body": "The original Lua throws an error when argument is not integer.\r\n`Main.lua:1: bad argument #1 to 'getlocal' (number has no integer representation)`\r\n```lua\r\ndebug.getlocal(0.1, 1)\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/70/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-04T15:42:53Z",
        "body": "Fixed in #74 "
      }
    ]
  },
  {
    "number": 68,
    "title": "Fix:A LuaObject cannot reference another LuaObject",
    "created_at": "2025-01-02T02:42:02Z",
    "closed_at": "2025-01-04T13:55:43Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/68",
    "body": "#64",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/68/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-04T13:55:52Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 65,
    "title": "Number expected, got Number",
    "created_at": "2025-01-01T19:32:48Z",
    "closed_at": "2025-01-01T19:39:51Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/65",
    "body": "chunk:1: bad argument #2 to 'anonymous' (Number expected, got Number)\r\nI dont understand this error\r\nIt occurs at:\r\n```csharp\r\nluaexec.Environment[\"additem\"] = new LuaFunction((context, buffer, ct) => // additem(spawnId, id, x, y, z, rx, ry, rz, rw, damaged, glue)\r\n{\r\n    string spawnid = context.GetArgument<string>(0);\r\n    int id = context.GetArgument<int>(1);\r\n    int x = context.GetArgument<int>(2);\r\n    int y = context.GetArgument<int>(3);\r\n    int z = context.GetArgument<int>(4);\r\n    int rx = context.GetArgument<int?>(5) ?? 0;\r\n    int ry = context.GetArgument<int?>(6) ?? 0;\r\n    int rz = context.GetArgument<int?>(7) ?? 0;\r\n    int rw = context.GetArgument<int?>(8) ?? 0;\r\n    bool damaged = context.GetArgument<bool?>(9) ?? false;\r\n    bool glue = context.GetArgument<bool?>(10) ?? false;\r\n    JArray itdata = (JArray)(scene[\"itemData\"] ?? new JArray());\r\n    JObject newItem = new JObject();\r\n    newItem[\"spawnId\"] = spawnid;\r\n    newItem[\"id\"] = id;\r\n    JObject newItemPos = new JObject();\r\n    newItemPos[\"x\"] = x;\r\n    newItemPos[\"y\"] = y;\r\n    newItemPos[\"z\"] = z;\r\n    JObject newItemRot = new JObject();\r\n    newItemRot[\"x\"] = rx;\r\n    newItemRot[\"y\"] = ry;\r\n    newItemRot[\"z\"] = rz;\r\n    newItemRot[\"w\"] = rw;\r\n    JObject newItemData = new JObject();\r\n    newItemData[\"damaged\"] = damaged;\r\n    newItemData[\"glue\"] = glue;\r\n    newItem[\"pos\"] = newItemPos;\r\n    newItem[\"rot\"] = newItemRot;\r\n    newItem[\"data\"] = newItemData;\r\n    itdata.Add(newItem);\r\n    scene[\"itemData\"] = itdata;\r\n    return new ValueTask<int>(0);\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/65/comments",
    "author": "ImNotDario",
    "comments": [
      {
        "user": "ImNotDario",
        "created_at": "2025-01-01T19:40:16Z",
        "body": "I re-read the docs, it says to use double now it works. Would be useful if you added int\r\n"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T23:34:09Z",
        "body": "This was fixed in #62."
      }
    ]
  },
  {
    "number": 64,
    "title": "A LuaObject cannot reference another LuaObject",
    "created_at": "2025-01-01T11:47:31Z",
    "closed_at": "2025-01-04T13:58:51Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/64",
    "body": "`[LuaMember]` checks whether the parameter type is valid, but because the conversion from `UserData` to `LuaValue` is implemented by Source Generator, referencing other LuaObject types may result in an error. For example, the following will result in a compilation error:\r\n\r\n```cs\r\n[LuaObject]\r\npublic partial class LuaObjA\r\n{\r\n    [LuaMember]\r\n    public void Do(LuaObjB param)\r\n    {\r\n\r\n    }\r\n}\r\n\r\n[LuaObject]\r\npublic partial class LuaObjB\r\n{\r\n    [LuaMember]\r\n    public void Do(LuaObjA param)\r\n    {\r\n\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/64/comments",
    "author": "yn01-dev",
    "comments": [
      {
        "user": "Shaka-Rule",
        "created_at": "2025-01-01T20:14:22Z",
        "body": "I've experienced this same issue in another project. I think this can be fixed by having the source generator generate in 2 stages. First generate the lua objects then add the generated content to the compilationnand do the next stage(i guess validating the parameters, and maybe other things that depend on the luao kects existing in the compilation)"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-04T13:58:51Z",
        "body": "Fixed in #68 "
      }
    ]
  },
  {
    "number": 63,
    "title": "Fix: Check userdata type",
    "created_at": "2025-01-01T11:03:02Z",
    "closed_at": "2025-01-01T11:33:45Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/63",
    "body": null,
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/63/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T11:33:58Z",
        "body": "Merged the PR!"
      }
    ]
  },
  {
    "number": 61,
    "title": "Optimize: Reduce unnecessary coping in coroutine",
    "created_at": "2025-01-01T07:29:10Z",
    "closed_at": "2025-01-02T00:17:35Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/61",
    "body": null,
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/61/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-02T00:17:44Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 60,
    "title": "Optimize: LuaTable.TryGetNext",
    "created_at": "2025-01-01T07:18:40Z",
    "closed_at": "2025-01-02T00:05:32Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/60",
    "body": null,
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/60/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-02T00:05:41Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 53,
    "title": "Fix: closure upvalues",
    "created_at": "2024-11-30T03:46:52Z",
    "closed_at": "2024-12-29T09:05:14Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/53",
    "body": "We can now pass the closure.lua test.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/53/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2024-12-29T09:05:22Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 52,
    "title": "Large Optimization",
    "created_at": "2024-11-14T09:59:02Z",
    "closed_at": "2025-01-01T05:57:48Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/52",
    "body": "Better VM performance, smaller allocation, fast recursive calls.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/52/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "Akeit0",
        "created_at": "2024-11-15T08:17:35Z",
        "body": "@AnnulusGames \r\nAdding `[MethodImpl(MethodImplOptions.AggressiveOptimization)]`  increases the time taken for JIT from 6 ms to 16 ms, but improves performance by about 10%.\r\nDo you adopt this?"
      },
      {
        "user": "martindevans",
        "created_at": "2024-11-19T15:40:41Z",
        "body": "> increases the time taken for JIT from 6 ms to 16 ms, but improves performance by about 10%.\r\n\r\nMy experience with using `AggressiveInlining` is that it looks great in microbenchmarks, but often provides worse results for real-world usage. Just a drive-by observation :)"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-07T05:05:55Z",
        "body": "We can now pass the coroutine.lua test.\r\nHowever, WeakTable and StackOverflow, which will not be supported in the future, have been removed from the test."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-29T09:38:19Z",
        "body": "> @AnnulusGames Adding `[MethodImpl(MethodImplOptions.AggressiveOptimization)]` increases the time taken for JIT from 6 ms to 16 ms, but improves performance by about 10%. Do you adopt this?\r\n\r\nI don't think this should be added on the library code side."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-30T00:53:15Z",
        "body": "Could you please tell me how much performance improvement can be expected by handwriting AsyncMethodBuilder? This reduces readability, but the performance benefits may make it worth considering."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-30T00:59:50Z",
        "body": "Also, the `IsClosure` property has been added to skip type checking, but is it okay to replace all `func is Closure` with this?"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-30T04:18:13Z",
        "body": ">Could you please tell me how much performance improvement can be expected by handwriting AsyncMethodBuilder? This reduces readability, but the performance benefits may make it worth considering.\r\n\r\nI just tried it with the current version and it's about 12% in the nbody benchmark."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-30T04:37:37Z",
        "body": "However, the overhead in function calls is significant, and the following benchmark shows that handwritten version is 4 times faster.\r\n1.7ms | 7.1ms\r\n```lua\r\nfunction f (x,y)\r\n    return x + y\r\nend\r\n\r\nfor i =1,100 do\r\n for j =1,100 do\r\n     y =f(i,j)\r\n  end\r\n end\r\n```"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-30T12:32:03Z",
        "body": "It seems worth implementing.\r\nI don't think there will be any problems, but it's a big change, so I'll look at the code a bit more..."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-30T12:34:06Z",
        "body": "Now that I have an idea that can be optimized in a non-handwritten form, I'm implementing it."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-30T12:53:51Z",
        "body": "By completely separating the asynchronous and synchronous portions, the performance is now equivalent to handwritten one.\r\nAlso, the language was changed to C#13 to use span in async method."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-31T06:27:55Z",
        "body": "Is this safe to merge now?"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-31T06:29:47Z",
        "body": ">Is this safe to merge now?\r\n\r\nAs far as I'm concerned, Yes!"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-31T06:42:12Z",
        "body": "Another thing that bothered me was the part about exceptions.\r\n\r\n`LuaRuntimeCSharpException` and `LuaRuntimeLuaValueException` seem to be pretty ugly names to expose as public APIs. I propose the following as alternatives:\r\n\r\n* Change `LuaRuntimeCSharpException` to a normal `LuaRuntimeException` and set the original exception to `InnerException`.\r\n\r\n* `LuaRuntimeLuaValueException` seems to exist as an optimization for `error()`, but I think it's unnecessary because `error()` is not usually called in the first place. Change it back to the original `LuaRuntimeException`."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-31T06:53:22Z",
        "body": ">Change LuaRuntimeCSharpException to a normal LuaRuntimeException and set the original exception to InnerException.\r\n\r\nDo you mean to change LuaRuntimeException to have an `InnerException`?\r\n\r\n>LuaRuntimeLuaValueException seems to exist as an optimization for error(), but I think it's unnecessary because error() is not usually called in the first place. Change it back to the original LuaRuntimeException.\r\n\r\nThis is not for optimization. The original lua error has a LuaValue, and the implementation is that pcall/xpcall can take it out, and some of the test code assumes this.\r\n"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-31T07:08:10Z",
        "body": "> Do you mean to change LuaRuntimeException to have an internal exception?\r\n\r\nYou can set an internal exception in `Exception` constructor. Add overloads that accept `innerException` to `LuaException` and `LuaRuntimeException` and use that.\r\n\r\n> This is not for optimization. The original lua error has a LuaValue, and the implementation is that pcall/xpcall can take it out, and some of the test code assumes this.\r\n\r\nI see, then adding `LuaValue? ErrorObject` to `LuaRuntimeException` should be enough. There's no need to separate the types."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-12-31T07:29:29Z",
        "body": "Integration is done.\r\nDoes this implementation look good?"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-31T08:18:10Z",
        "body": "Looks good! I'll check the code a bit more."
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T05:25:56Z",
        "body": "This time it seems fine. Could I merge it now?"
      },
      {
        "user": "Akeit0",
        "created_at": "2025-01-01T05:48:09Z",
        "body": "No problem!!"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T05:57:59Z",
        "body": "Merged the PR! Thanks!"
      }
    ]
  },
  {
    "number": 51,
    "title": "Does Lua-CSharp support nullable values?",
    "created_at": "2024-11-05T20:07:00Z",
    "closed_at": "2025-01-01T10:02:19Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/51",
    "body": "Hey, I was wondering if this supports nullable values in functions (`string?`, `int?` etc...) because when calling an empty function from Lua:\r\n```lua\r\nw.create()\r\n```\r\nit throws:\r\n```\r\nbad argument #1 to 'create' (value expected)\r\n```\r\nThis is the C# function:\r\n```cs\r\n[LuaMember(\"create\")]\r\npublic static void Create(string? title, int? width = 700, int? height = 400)\r\n{\r\n    f = new Form()\r\n    {\r\n        Text = title == null ? \"gluaWindow\" : title,\r\n        Width = width == null ? 700 : (int)width,\r\n        Height = height == null ? 400 : (int)height,\r\n    };\r\n}\r\n```\r\n\r\nI don't know if this has to do with issue #50 or whether Lua and / or this library doesn't support nullables.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/51/comments",
    "author": "Dismalitie",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T10:02:19Z",
        "body": " `[LuaMember]` now supports default argument values (#62). I think this is enough for this use case."
      }
    ]
  },
  {
    "number": 50,
    "title": "`LuaObject` src generator constantly causing a `UserData` related error?",
    "created_at": "2024-11-04T22:38:21Z",
    "closed_at": "2025-01-01T10:02:36Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/50",
    "body": "Hi! I'm trying to make a UI library for Lua called Glua (yes very original) that uses WinForms under the hood and I'm using the source generator (`LuaObject`) to implement a window. But regardless of what values I pass on the Lua side, I get this error:\r\n```\r\nLua.LuaRuntimeException\r\n  HResult=0x80131500\r\n  Message=test.lua:1: bad argument #1 to 'create' (Number expected, got UserData)\r\n  Source=Lua\r\n  StackTrace:\r\n   at Lua.LuaRuntimeException.BadArgument(Traceback traceback, Int32 argumentId, String functionName, String expected, String actual)\r\n   at Lua.LuaFunctionExecutionContext.GetArgument[T](Int32 index)\r\n   at glua.gluaWindow.<>c.<.cctor>b__30_0(LuaFunctionExecutionContext context, Memory`1 buffer, CancellationToken ct) in C:\\Users\\dsml\\source\\repos\\glua\\glua\\obj\\Debug\\net8.0-windows\\Lua.SourceGenerator\\Lua.SourceGenerator.LuaObjectGenerator\\glua.gluaWindow.LuaObject.g.cs:line 19\r\n   at Lua.Runtime.LuaVirtualMachine.<ExecuteClosureAsync>d__0.MoveNext()\r\n```\r\n\r\nThis is my Lua code:\r\n```lua\r\n-- test.lua\r\nlocal w = window:create(\"test\", 500, 500)\r\nw:show()\r\n```\r\n\r\nHere are the relevant C# snippets:\r\n```cs\r\nstatic async Task Main(string[] args)\r\n{\r\n    args = [\".\\\\test.lua\"];\r\n\r\n    ApplicationConfiguration.Initialize();\r\n\r\n    LuaState state = LuaState.Create();\r\n    state.OpenStandardLibraries();\r\n\r\n    state.Environment[\"window\"] = new gluaWindow();\r\n\r\n    var r = await state.DoFileAsync(args[0]);\r\n\r\n    foreach (LuaValue item in r)\r\n    {\r\n        Console.WriteLine(item.ToString());\r\n    }\r\n}\r\n```\r\n```cs\r\n[LuaObject]\r\npublic partial class gluaWindow\r\n{\r\n    static Form f;\r\n\r\n    #region constructor stuff\r\n\r\n    [LuaMember(\"create\")]\r\n    public static void Create(string title, int width = 700, int height = 400)\r\n    {\r\n        f = new Form()\r\n        {\r\n            Text = title,\r\n            Width = width,\r\n            Height = height,\r\n        };\r\n    }\r\n// ...\r\n```\r\n\r\nIf you need any other snippets, or know how to fix this, please tell me!",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/50/comments",
    "author": "Dismalitie",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2024-11-05T01:13:15Z",
        "body": "In Lua, semicolon `:` access is sugar syntax for object-oriented notation, and it implicitly passes the self instance as the first argument.\r\n\r\n```lua\r\nlocal t = {\r\n  foo = function (self)\r\n    -- do something...\r\n  end\r\n}\r\n\r\nt:foo()\r\n```\r\n\r\nWhen you add `LuaMember` to an instance method, the source generator adds the self argument to the LuaFunction you generate. However, since your code uses a static method as a Lua function, you don't need the self argument. You can access it with a regular comma `.`. \r\n\r\nThe following code will probably work:\r\n\r\n```lua\r\n-- test.lua\r\nlocal w = window.create(\"test\", 500, 500)\r\nw.show()\r\n```"
      },
      {
        "user": "Dismalitie",
        "created_at": "2024-11-05T07:35:55Z",
        "body": "Ok, I have done that but now it's even weirder.\r\n```lua\r\nlocal w = window.create(\"test\", 500, 500)\r\nw.show()\r\n```\r\n\r\nIt wants a `Number`, so I pass a number but I get this:\r\n```\r\nLua.LuaRuntimeException\r\n  HResult=0x80131500\r\n  Message=test.lua:1: bad argument #2 to 'create' (Number expected, got Number)\r\n  Source=Lua\r\n  StackTrace:\r\n   at Lua.LuaRuntimeException.BadArgument(Traceback traceback, Int32 argumentId, String functionName, String expected, String actual)\r\n   at Lua.LuaFunctionExecutionContext.GetArgument[T](Int32 index)\r\n   at glua.gluaWindow.<>c.<.cctor>b__30_0(LuaFunctionExecutionContext context, Memory`1 buffer, CancellationToken ct) in C:\\Users\\dsml\\source\\repos\\glua\\glua\\obj\\Debug\\net8.0-windows\\Lua.SourceGenerator\\Lua.SourceGenerator.LuaObjectGenerator\\glua.gluaWindow.LuaObject.g.cs:line 20\r\n   at Lua.Runtime.LuaVirtualMachine.<ExecuteClosureAsync>d__0.MoveNext()\r\n```\r\n\"Number expected, got Number\"?\r\nI haven't modified any of the C# code."
      },
      {
        "user": "Dismalitie",
        "created_at": "2024-11-05T07:36:16Z",
        "body": "Although it does accept the first argument"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-11-05T07:43:12Z",
        "body": "I see, it seems that there is some problem with the conversion to and from the integer type on the Lua.SourceGenerator side. I will look into it."
      },
      {
        "user": "Dismalitie",
        "created_at": "2024-11-05T08:21:09Z",
        "body": "Thanks!"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T10:02:36Z",
        "body": "Fixed in #62"
      }
    ]
  },
  {
    "number": 48,
    "title": "Optimize: Reduce and merge unnecessary move instructions",
    "created_at": "2024-11-04T02:42:10Z",
    "closed_at": "2024-12-29T08:58:06Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/48",
    "body": null,
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/48/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T04:04:04Z",
        "body": "Optimization sample\r\n101 Instructions  to 68 Instructions \r\n```lua\r\nlocal function advance(bodies, nbody, dt)\r\n    for i = 1, nbody do\r\n        local bi = bodies[i]\r\n        local bix, biy, biz, bimass = bi.x, bi.y, bi.z, bi.mass\r\n        local bivx, bivy, bivz = bi.vx, bi.vy, bi.vz\r\n        for j = i + 1, nbody do\r\n            local bj = bodies[j]\r\n            local dx, dy, dz = bix - bj.x, biy - bj.y, biz - bj.z\r\n            local dist2 = dx * dx + dy * dy + dz * dz\r\n            local mag = sqrt(dist2)\r\n            mag = dt / (mag * dist2)\r\n            local bm = bj.mass * mag\r\n            bivx = bivx - (dx * bm)\r\n            bivy = bivy - (dy * bm)\r\n            bivz = bivz - (dz * bm)\r\n            bm = bimass * mag\r\n            bj.vx = bj.vx + (dx * bm)\r\n            bj.vy = bj.vy + (dy * bm)\r\n            bj.vz = bj.vz + (dz * bm)\r\n        end\r\n        bi.vx = bivx\r\n        bi.vy = bivy\r\n        bi.vz = bivz\r\n        bi.x = bix + dt * bivx\r\n        bi.y = biy + dt * bivy\r\n        bi.z = biz + dt * bivz\r\n    end\r\nend\r\n```\r\n```\r\nInstructions --------------------------------------------------\r\n[0]     (2,12)          LOADK     3 0\r\n[1]     (2,15)          MOVE      4 1\r\n[2]     (2,4)           LOADK     5 0\r\n[3]     (2,4)           FORPREP   3 96\r\n[4]     (3,19)          MOVE      7 0\r\n[5]     (3,25)          GETTABLE  7 7 3\r\n[6]     (4,38)          MOVE      8 7\r\n[7]     (4,40)          GETTABLE  8 8 257\r\n[8]     (4,44)          MOVE      9 7\r\n[9]     (4,46)          GETTABLE  9 9 258\r\n[10]    (4,50)          MOVE      10 7\r\n[11]    (4,52)          GETTABLE  10 10 259\r\n[12]    (4,56)          MOVE      11 7\r\n[13]    (4,58)          GETTABLE  11 11 260\r\n[14]    (5,33)          MOVE      12 7\r\n[15]    (5,35)          GETTABLE  12 12 261\r\n[16]    (5,40)          MOVE      13 7\r\n[17]    (5,42)          GETTABLE  13 13 262\r\n[18]    (5,47)          MOVE      14 7\r\n[19]    (5,49)          GETTABLE  14 14 263\r\n[20]    (6,18)          ADD       15 3 256\r\n[21]    (6,23)          MOVE      16 1\r\n[22]    (6,8)           LOADK     17 0\r\n[23]    (6,8)           FORPREP   15 54\r\n[24]    (7,23)          MOVE      19 0\r\n[25]    (7,29)          GETTABLE  19 19 15\r\n[26]    (8,37)          MOVE      20 19\r\n[27]    (8,39)          GETTABLE  20 20 257\r\n[28]    (8,35)          SUB       20 8 20\r\n[29]    (8,49)          MOVE      21 19\r\n[30]    (8,51)          GETTABLE  21 21 258\r\n[31]    (8,47)          SUB       21 9 21\r\n[32]    (8,61)          MOVE      22 19\r\n[33]    (8,63)          GETTABLE  22 22 259\r\n[34]    (8,59)          SUB       22 10 22\r\n[35]    (9,29)          MUL       23 20 20\r\n[36]    (9,39)          MUL       24 21 21\r\n[37]    (9,34)          ADD       23 23 24\r\n[38]    (9,49)          MUL       24 22 22\r\n[39]    (9,44)          ADD       23 23 24\r\n[40]    (10,24)         GETTABUP  24 0 264\r\n[41]    (10,29)         MOVE      25 23\r\n[42]    (10,24)         CALL      24 2 2\r\n[43]    (11,28)         MUL       25 24 23\r\n[44]    (11,21)         DIV       25 2 25\r\n[45]    (11,12)         MOVE      24 25\r\n[46]    (12,23)         MOVE      25 19\r\n[47]    (12,25)         GETTABLE  25 25 260\r\n[48]    (12,31)         MUL       25 25 24\r\n[49]    (13,30)         MUL       26 20 25\r\n[50]    (13,24)         SUB       26 12 26\r\n[51]    (13,12)         MOVE      12 26\r\n[52]    (14,30)         MUL       26 21 25\r\n[53]    (14,24)         SUB       26 13 26\r\n[54]    (14,12)         MOVE      13 26\r\n[55]    (15,30)         MUL       26 22 25\r\n[56]    (15,24)         SUB       26 14 26\r\n[57]    (15,12)         MOVE      14 26\r\n[58]    (16,24)         MUL       26 11 24\r\n[59]    (16,12)         MOVE      25 26\r\n[60]    (17,20)         MOVE      26 19\r\n[61]    (17,22)         GETTABLE  26 26 261\r\n[62]    (17,32)         MUL       27 20 25\r\n[63]    (17,26)         ADD       26 26 27\r\n[64]    (17,12)         MOVE      27 19\r\n[65]    (17,14)         SETTABLE  27 261 26\r\n[66]    (18,20)         MOVE      26 19\r\n[67]    (18,22)         GETTABLE  26 26 262\r\n[68]    (18,32)         MUL       27 21 25\r\n[69]    (18,26)         ADD       26 26 27\r\n[70]    (18,12)         MOVE      27 19\r\n[71]    (18,14)         SETTABLE  27 262 26\r\n[72]    (19,20)         MOVE      26 19\r\n[73]    (19,22)         GETTABLE  26 26 263\r\n[74]    (19,32)         MUL       27 22 25\r\n[75]    (19,26)         ADD       26 26 27\r\n[76]    (19,12)         MOVE      27 19\r\n[77]    (19,14)         SETTABLE  27 263 26\r\n[78]    (6,8)           FORLOOP   15 -55\r\n[79]    (21,16)         MOVE      15 12\r\n[80]    (21,8)          MOVE      16 7\r\n[81]    (21,10)         SETTABLE  16 261 15\r\n[82]    (22,16)         MOVE      15 13\r\n[83]    (22,8)          MOVE      16 7\r\n[84]    (22,10)         SETTABLE  16 262 15\r\n[85]    (23,16)         MOVE      15 14\r\n[86]    (23,8)          MOVE      16 7\r\n[87]    (23,10)         SETTABLE  16 263 15\r\n[88]    (24,24)         MUL       15 2 12\r\n[89]    (24,19)         ADD       15 8 15\r\n[90]    (24,8)          MOVE      16 7\r\n[91]    (24,10)         SETTABLE  16 257 15\r\n[92]    (25,24)         MUL       15 2 13\r\n[93]    (25,19)         ADD       15 9 15\r\n[94]    (25,8)          MOVE      16 7\r\n[95]    (25,10)         SETTABLE  16 258 15\r\n[96]    (26,24)         MUL       15 2 14\r\n[97]    (26,19)         ADD       15 10 15\r\n[98]    (26,8)          MOVE      16 7\r\n[99]    (26,10)         SETTABLE  16 259 15\r\n[100]   (2,4)           FORLOOP   3 -97\r\n[101]   (2,4)           RETURN    0 1\r\nConstants --------------------------------------------------\r\n[0]     1\r\n[1]     x\r\n[2]     y\r\n[3]     z\r\n[4]     mass\r\n[5]     vx\r\n[6]     vy\r\n[7]     vz\r\n[8]     sqrt\r\nUpValues --------------------------------------------------\r\n[0]     _ENV    0       0\r\n```\r\n\r\n```\r\nInstructions --------------------------------------------------\r\n[0]     (2,12)          LOADK     3 0\r\n[1]     (2,15)          MOVE      4 1\r\n[2]     (2,4)           LOADK     5 0\r\n[3]     (2,4)           FORPREP   3 63\r\n[4]     (3,25)          GETTABLE  7 0 3\r\n[5]     (4,40)          GETTABLE  8 7 257\r\n[6]     (4,46)          GETTABLE  9 7 258\r\n[7]     (4,52)          GETTABLE  10 7 259\r\n[8]     (4,58)          GETTABLE  11 7 260\r\n[9]     (5,35)          GETTABLE  12 7 261\r\n[10]    (5,42)          GETTABLE  13 7 262\r\n[11]    (5,49)          GETTABLE  14 7 263\r\n[12]    (6,18)          ADD       15 3 256\r\n[13]    (6,23)          MOVE      16 1\r\n[14]    (6,8)           LOADK     17 0\r\n[15]    (6,8)           FORPREP   15 38\r\n[16]    (7,29)          GETTABLE  19 0 15\r\n[17]    (8,39)          GETTABLE  20 19 257\r\n[18]    (8,35)          SUB       20 8 20\r\n[19]    (8,51)          GETTABLE  21 19 258\r\n[20]    (8,47)          SUB       21 9 21\r\n[21]    (8,63)          GETTABLE  22 19 259\r\n[22]    (8,59)          SUB       22 10 22\r\n[23]    (9,29)          MUL       23 20 20\r\n[24]    (9,39)          MUL       24 21 21\r\n[25]    (9,34)          ADD       23 23 24\r\n[26]    (9,49)          MUL       24 22 22\r\n[27]    (9,44)          ADD       23 23 24\r\n[28]    (10,24)         GETTABUP  24 0 264\r\n[29]    (10,29)         MOVE      25 23\r\n[30]    (10,24)         CALL      24 2 2\r\n[31]    (11,28)         MUL       25 24 23\r\n[32]    (11,21)         DIV       24 2 25\r\n[33]    (12,25)         GETTABLE  25 19 260\r\n[34]    (12,31)         MUL       25 25 24\r\n[35]    (13,30)         MUL       26 20 25\r\n[36]    (13,24)         SUB       12 12 26\r\n[37]    (14,30)         MUL       26 21 25\r\n[38]    (14,24)         SUB       13 13 26\r\n[39]    (15,30)         MUL       26 22 25\r\n[40]    (15,24)         SUB       14 14 26\r\n[41]    (16,24)         MUL       25 11 24\r\n[42]    (17,22)         GETTABLE  26 19 261\r\n[43]    (17,32)         MUL       27 20 25\r\n[44]    (17,26)         ADD       26 26 27\r\n[45]    (17,14)         SETTABLE  19 261 26\r\n[46]    (18,22)         GETTABLE  26 19 262\r\n[47]    (18,32)         MUL       27 21 25\r\n[48]    (18,26)         ADD       26 26 27\r\n[49]    (18,14)         SETTABLE  19 262 26\r\n[50]    (19,22)         GETTABLE  26 19 263\r\n[51]    (19,32)         MUL       27 22 25\r\n[52]    (19,26)         ADD       26 26 27\r\n[53]    (19,14)         SETTABLE  19 263 26\r\n[54]    (6,8)           FORLOOP   15 -39\r\n[55]    (21,10)         SETTABLE  7 261 12\r\n[56]    (22,10)         SETTABLE  7 262 13\r\n[57]    (23,10)         SETTABLE  7 263 14\r\n[58]    (24,24)         MUL       15 2 12\r\n[59]    (24,19)         ADD       15 8 15\r\n[60]    (24,10)         SETTABLE  7 257 15\r\n[61]    (25,24)         MUL       15 2 13\r\n[62]    (25,19)         ADD       15 9 15\r\n[63]    (25,10)         SETTABLE  7 258 15\r\n[64]    (26,24)         MUL       15 2 14\r\n[65]    (26,19)         ADD       15 10 15\r\n[66]    (26,10)         SETTABLE  7 259 15\r\n[67]    (2,4)           FORLOOP   3 -64\r\n[68]    (2,4)           RETURN    0 1\r\nConstants --------------------------------------------------\r\n[0]     1\r\n[1]     x\r\n[2]     y\r\n[3]     z\r\n[4]     mass\r\n[5]     vx\r\n[6]     vy\r\n[7]     vz\r\n[8]     sqrt\r\nUpValues --------------------------------------------------\r\n[0]     _ENV    0       0\r\n\r\n"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T06:13:20Z",
        "body": "This is not done."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T07:20:09Z",
        "body": "I think almost all pattern merging is done. \r\nNow the compiler returns almost the same results as luac except for the EQ - JMP pattern.\r\n"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-12-29T08:58:16Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  },
  {
    "number": 46,
    "title": "Optimize: VM implementation \"switch case\" to \"delegate array\"",
    "created_at": "2024-10-19T06:27:48Z",
    "closed_at": "2024-11-14T08:32:46Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/46",
    "body": "This PR is a large optimization.\r\nNBodyBenchmark \r\n.NET8  12ms -> 6.2ms\r\nIL2CPP 81ms ->15ms\r\n\r\n",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/46/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "Akeit0",
        "created_at": "2024-10-19T06:31:27Z",
        "body": "All changes are internal, so I think nothing is broken."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-10-22T13:59:59Z",
        "body": "I think I've finished revising them according to your comment."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-10-22T15:08:06Z",
        "body": "I haven't looked into the implementation of LuaVirtualMachine in detail yet, so I'll merge it in as soon as I've checked it."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-10-25T00:32:11Z",
        "body": "I have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n\r\nAlso, I would also be grateful if you could let me know if you have any references for this optimization."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-10-25T00:35:19Z",
        "body": "There is a conflict due to the merge of #47, could I resolve this on my end?"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-10-25T02:47:58Z",
        "body": "Of course!"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T02:06:10Z",
        "body": "> I have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n> \r\n> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nConsidering that LuaVirtualMachine is a static class, and that using lambda expressions reduces readability and the visibility of exceptions, I use nested class."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T02:08:44Z",
        "body": "> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nNo references available. I looked at the generated code and found that it was less efficient, so I adjusted it to generate the optimal code"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-11-05T02:49:05Z",
        "body": "I've resolved the conflicts and formatted the code.\r\n\r\nIf possible, could you please add comments to each step of the code? This will help me and other contributors understand the code properly."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-05T07:28:53Z",
        "body": "@AnnulusGames \r\nOK! Shall I leave the original async code in the comments?"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-05T09:35:20Z",
        "body": "Are these comments sufficient?"
      }
    ]
  },
  {
    "number": 38,
    "title": "Fix: Implicit conversion from string to number, which is out of speci…",
    "created_at": "2024-10-15T02:19:00Z",
    "closed_at": "2024-10-17T13:01:32Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/38",
    "body": "…fication",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/38/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2024-10-17T13:01:43Z",
        "body": "Merged the PR. Thanks!"
      }
    ]
  }
]