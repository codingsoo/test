[
  {
    "number": 340,
    "title": "Allow users to run Python code from a string",
    "created_at": "2025-01-15T04:25:40Z",
    "closed_at": "2025-01-22T02:20:07Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/340",
    "body": "Implements #290 \r\n\r\nAdds two different types of API:\r\n- IPythonEnvironment.ExecuteExpression which takes a simple expression (`1+1`) and returns the result\r\n- IPythonEnvironment.Execute which takes a string, typically multiple lines",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/340/comments",
    "author": "tonybaloney",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2025-01-15T05:44:42Z",
        "body": "This would be used for edge cases, like running complicated expressions on an object that you've got back from CSnakes, or dynamically running a bit of interpreted code on the module.\r\n"
      },
      {
        "user": "aaronpowell",
        "created_at": "2025-01-15T06:09:59Z",
        "body": "Yeah, I read the issue so I \"get\" the use-case but it's the kind of thing I wonder if CSnakes is the best tool for, since .NET isn't exactly idea for a scripting environment."
      }
    ]
  },
  {
    "number": 320,
    "title": "Improved handling of name generation with single-character segments",
    "created_at": "2025-01-05T15:07:12Z",
    "closed_at": "2025-01-08T07:22:37Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/320",
    "body": "Single-character segments with underscores were previously ignored during processing. This caused errors when argument names like test_x and test_y were both transformed into test_.\r\n\r\nThe primary fix is implemented in the CSnakes.CaseHelper.ToPascalCase method, along with updates to the corresponding tests.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/320/comments",
    "author": "jozefhornik",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2025-01-08T07:22:33Z",
        "body": "Ah. Good catch, thanks for the fix"
      }
    ]
  },
  {
    "number": 316,
    "title": "Update samples/simple references",
    "created_at": "2024-11-25T09:39:19Z",
    "closed_at": "2024-11-29T02:55:44Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/316",
    "body": "# PR Summary\r\nSmall PR - Commit ed4def2d98610438016bf7e72250ed89a5478b97 moved samples to `samples/simple`. This PR adjusts sources to changes.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/316/comments",
    "author": "emmanuel-ferdman",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-11-29T02:55:30Z",
        "body": "Well spotted, thank you for the PR"
      }
    ]
  },
  {
    "number": 287,
    "title": "Get error cause once",
    "created_at": "2024-10-20T08:31:08Z",
    "closed_at": "2024-10-20T20:57:51Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/287",
    "body": "This PR replaces two calls to get the `__cause__` attribute's value (`exception.GetAttr(\"__cause__\")`) with a single one in order to avoid two hops across the marshalling boundary as well as allocations of the name.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/287/comments",
    "author": "atifaziz",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-20T20:57:46Z",
        "body": "We probably need to extend the test cases for this as well"
      }
    ]
  },
  {
    "number": 274,
    "title": "Immortalising -1, 0 and 1",
    "created_at": "2024-10-14T22:17:17Z",
    "closed_at": "2024-10-15T08:57:21Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/274",
    "body": "Added tests.\n\nFixes #163\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/274/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-15T07:14:35Z",
        "body": "@atifaziz are you able to reproduce the hard crash on your dev environment with the source locator? Neither of us can."
      },
      {
        "user": "atifaziz",
        "created_at": "2024-10-15T07:44:59Z",
        "body": "> @atifaziz are you able to reproduce the hard crash on your dev environment with the source locator? Neither of us can.\r\n\r\nYes, if I test with `PYTHON_VERSION` set to 3.10.11 (I didn't try with 3.9):\r\n\r\n    The active test run was aborted. Reason: Test host process crashed : Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n    Repeat 2 times:\r\n    --------------------------------\r\n       at CSnakes.Runtime.CPython.CPythonAPI.PyLong_FromLong(Int32)\r\n    --------------------------------\r\n       at CSnakes.Runtime.Python.Interns.PyOneObject..ctor()\r\n       at CSnakes.Runtime.Python.PyObject..cctor()\r\n       at CSnakes.Runtime.Python.PyObject.get_False()\r\n       at CSnakes.Runtime.Tests.Python.ImmortalTests.TestFalse()\r\n       at System.RuntimeMethodHandle.InvokeMethod(System.Object, Void**, System.Signature, Boolean)\r\n       at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags)\r\n       at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n       at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n       at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_0+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_0+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_0+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n       at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_0[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n       at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n       at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n       at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_0[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__0()\r\n       at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n       at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n       at Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__46[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__46[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__46<System.__Canon> ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__46[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__46<System.__Canon> ByRef)\r\n       at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n       at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\r\n       at Xunit.Sdk.TestInvoker`1+<<RunAsync>b__45_0>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__45_0>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__45_0>d<System.__Canon> ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__45_0>d[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__45_0>d<System.__Canon> ByRef)\r\n       at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<RunAsync>b__45_0()\r\n       at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n       at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1<System.Threading.Tasks.Task`1<System.Decimal>>)\r\n       at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n       at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n       at Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext()\r\n       at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n       at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.9.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n       at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggreg\r\n    "
      }
    ]
  },
  {
    "number": 273,
    "title": "Rename CSnakes to CSnake",
    "created_at": "2024-10-13T18:32:30Z",
    "closed_at": "2024-10-15T03:27:05Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/issues/273",
    "body": "**as it is Python and not Pythons...**\r\n\r\nAnd my guess is - for the foreseeable future CSnakes will be only able to use **one** CPython at a time and not different version together in a single process.\r\n\r\nAs a non native english speaker there might be a reason that it is CSnakes, but in the real world non natives like me might be the superior number. (That might be not correct english...)\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/273/comments",
    "author": "minesworld",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-15T03:27:05Z",
        "body": "Thanks for suggestion. I'm happy with the name as it is."
      },
      {
        "user": "minesworld",
        "created_at": "2024-10-16T00:24:50Z",
        "body": "OK - so we **must** support different versions... how cool is that going to be?\r\n\r\nHave thought about that already. \"No problem\" as dotnet can \"import\" C# sources at runtime. So every CPython Runtime API gets generated (if no version not there yet) - at runtime... "
      }
    ]
  },
  {
    "number": 268,
    "title": "Make generated signature tests stricter",
    "created_at": "2024-10-13T11:51:42Z",
    "closed_at": "2024-10-14T20:58:30Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/268",
    "body": "This PR proposes to make the generated signature tests stricter by using `Assert.Equal` instead of `Assert.Contains`. Besides avoiding accidental matches, this change provides better assertion failures. With `Assert.Contains`, the error looks as follows:\r\n\r\n    Xunit.Sdk.ContainsException\r\n    Assert.Contains() Failure: Sub-string not found\r\n    String:    \"public void Hello(long? b = null)\\r\\n{\\r\\n   \"···\r\n    Not found: \"void Hello(long? a = null)\"\r\n\r\nWith `Assert.Equal`, one gets better information such as where the first difference occurs:\r\n\r\n    Xunit.Sdk.EqualException\r\n    Assert.Equal() Failure: Strings differ\r\n                                       ↓ (pos 24)\r\n    Expected: \"public void Hello(long? a = null)\"\r\n    Actual:   \"public void Hello(long? b = null)\"\r\n                                       ↑ (pos 24)\r\n\r\nThis helps in being able to spot and fix problems quicker.\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/268/comments",
    "author": "atifaziz",
    "comments": [
      {
        "user": "aaronpowell",
        "created_at": "2024-10-14T03:12:39Z",
        "body": "Looks like we got a conflict - give that a fix and should be good to go"
      },
      {
        "user": "atifaziz",
        "created_at": "2024-10-14T06:45:49Z",
        "body": "> Looks like we got a conflict - give that a fix and should be good to go\r\n\r\nResolved with dcf8b1b0f844118c3bb9fbcfc2785694a91b2527. Thanks, @aaronpowell."
      }
    ]
  },
  {
    "number": 265,
    "title": "Rename PyObject.Create to PyObject.Steal or Wrap",
    "created_at": "2024-10-13T03:37:17Z",
    "closed_at": "2024-10-15T03:32:13Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/issues/265",
    "body": "Code like \r\n\r\n`PyObject dict = PyObject.Create(Raw.PyDict_New());`\r\n\r\nlooks like the CPythons PyDictionary would get its refcount increased.\r\n\r\nBut it is stolen, which should be reflected in the function call:\r\n\r\n`PyObject dict = PyObject.Steal(Raw.PyDict_New());`\r\n\r\nWhile Wrap somehow might imply increasing the reference count:\r\n\r\n`PyObject dict = PyObject.Wrap(pyObjectToHoldPtr);`\r\n\r\nPS: already rewriting to the Raw class..",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/265/comments",
    "author": "minesworld",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-15T03:32:11Z",
        "body": "All of these APIs are internal. `PyObject.Create` is always called with a pointer to an owned reference and is countered by the DecRef in the `Dispose` method.\r\nThanks for the suggestion, but I'm happy with the way it's named and it's an internal method and not part of the consumer APIs."
      },
      {
        "user": "minesworld",
        "created_at": "2024-10-16T00:21:24Z",
        "body": "> All of these APIs are internal. `PyObject.Create` is always called with a pointer to an owned reference and is countered by the DecRef in the `Dispose` method. Thanks for the suggestion, but I'm happy with the way it's named and it's an internal method and not part of the consumer APIs.\r\n\r\nOK - different developer, different needs. For me CSnakes is a super exiting C# bridge. And from my experience using Python bridges, developers will have the need to call the CAPI if they are serious about getting the most out of it.\r\n\r\nThe beauty of CSnakes.Runtime.CAPI is - its usable as C code. And thus no shortage of \"how to\" examples... Even better: SafeHandle makes it BETTER code then C by REDUCING the effort. MAGIC...\r\n\r\nBut such beauty can only shine if the Bridge is designed the right way. Wording is important - and finding the right one which is understood by CPython AND C# developers can be quite challenging.\r\n\r\nI reasearched Scripting languages for some time now (even used SmallTalk - GlamorousToolkit, OMG...), but your bridge seems very, very promising.\r\n\r\nIf you have different targets for CSnakes - no problem. Its MIT. Just let me know if you want to tackle the \"speed problem\" too. Otherwise I will rename my fork. But that would be a shame, as I see a chance to change CPythons implementation too. If you're a Python Foundation fellow you might know the right people...\r\n\r\nPS: another shame - that this is not a official Microsoft project. "
      }
    ]
  },
  {
    "number": 263,
    "title": "Switched to the more performant System.Threading.Lock on .NET 9.0+",
    "created_at": "2024-10-12T17:02:37Z",
    "closed_at": "2024-10-29T22:57:05Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/263",
    "body": null,
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/263/comments",
    "author": "MarkCiliaVincenti",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2024-10-17T21:21:25Z",
        "body": "I don't think this approach is needed for CSnakes. None of the new `Lock` features are needed here.\r\n\r\nJust declaring a `class Lock;` for pre .NET 9 TFMs is more appropriate and doesn't introduce servicing issues with other libraries."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2024-10-17T21:32:37Z",
        "body": "@MarkCiliaVincenti Would you be willing to update this PR to just go with the simpler approach below?\r\n\r\n```csharp\r\n#if NET9_0_OR_GREATER\r\nglobal using Lock = System.Threading.Lock;\r\n#else\r\nglobal using Lock = object;\r\n#endif\r\n```"
      },
      {
        "user": "tonybaloney",
        "created_at": "2024-10-29T22:57:05Z",
        "body": "Thanks for the PR. Closing in favour of #289 "
      },
      {
        "user": "MarkCiliaVincenti",
        "created_at": "2024-11-17T09:30:57Z",
        "body": "@tonybaloney  A new version of Backport.System.Threading.Lock has come out that acts as a source generator and basically dropping the DLL as a dependency. If this new development makes you reconsider, I will amend this PR accordingly."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2024-11-18T04:26:36Z",
        "body": "> @tonybaloney A new version of Backport.System.Threading.Lock has come out that acts as a source generator and basically dropping the DLL as a dependency. If this new development makes you reconsider, I will amend this PR accordingly.\r\n\r\n@MarkCiliaVincenti Something to consider with 3rd party source generators is that of servicing. By relying on a 3rd party library this library must monitor and trust that Backport.System.Threading.Lock will announce and manage servicing events. When one occurs this library then needs to respond and inform all its consumers. From my perspective consuming source generators that don't have a robust CVE process is a non-starter.\r\n\r\nEventhough CSnakes is an experimental library, it is being built to be consumed by products that have a fairly high degree of scrutiny on this front. I'm not sure it is appropriate to adopt any source generator outside of the built-in .NET product in this case."
      }
    ]
  },
  {
    "number": 245,
    "title": "Use invariant culture when converting float constant to string",
    "created_at": "2024-10-10T07:04:05Z",
    "closed_at": "2024-10-10T08:00:12Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/245",
    "body": "This PR fixes #244.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/245/comments",
    "author": "atifaziz",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-10T08:00:08Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 244,
    "title": " Some TokenizerTests fail when regional format is using \",\" instead of \".\" for floating point number representation",
    "created_at": "2024-10-10T02:48:56Z",
    "closed_at": "2024-10-10T08:00:13Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/issues/244",
    "body": "CSnakes.Tests.TokenizerTests.ParseFunctionParameterDefaultDouble\r\n   Source: TokenizerTests.cs line 158\r\n   Duration: < 1 ms\r\n\r\n  Message: \r\nAssert.Equal() Failure: Strings differ\r\n             ↓ (pos 2)\r\nExpected: \"-1.1\"\r\nActual:   \"-1,1\"\r\n             ↑ (pos 2)\r\n\r\n  Stack Trace: \r\nTokenizerTests.ParseFunctionParameterDefaultDouble() line 164\r\nRuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\nMethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n\r\n---\r\n\r\nCSnakes.Tests.TokenizerTests.ParseFunctionParameterDefaultValuesNoType(value: \"1.01\")\r\n   Source: TokenizerTests.cs line 125\r\n   Duration: 3 ms\r\n\r\n  Message: \r\nAssert.Equal() Failure: Strings differ\r\n            ↓ (pos 1)\r\nExpected: \"1.01\"\r\nActual:   \"1,01\"\r\n            ↑ (pos 1)\r\n\r\n  Stack Trace: \r\nTokenizerTests.ParseFunctionParameterDefaultValuesNoType(String value) line 131\r\nRuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\nMethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n\r\n---\r\n\r\nCSnakes.Tests.TokenizerTests.ParseFunctionParameterDefaultValuesNoType(value: \"-1.01\")\r\n   Source: TokenizerTests.cs line 125\r\n   Duration: < 1 ms\r\n\r\n  Message: \r\nAssert.Equal() Failure: Strings differ\r\n             ↓ (pos 2)\r\nExpected: \"-1.01\"\r\nActual:   \"-1,01\"\r\n             ↑ (pos 2)\r\n\r\n  Stack Trace: \r\nTokenizerTests.ParseFunctionParameterDefaultValuesNoType(String value) line 131\r\nInvokeStub_TokenizerTests.ParseFunctionParameterDefaultValuesNoType(Object, Span`1)\r\nMethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/244/comments",
    "author": "minesworld",
    "comments": [
      {
        "user": "minesworld",
        "created_at": "2024-10-10T02:58:44Z",
        "body": "in **PythonConstant.cs** use **CultureInfo.InvariantCulture** as\r\n\r\n```\r\n\r\npublic sealed class Float(double value) : PythonConstant\r\n{\r\n    public double Value { get; } = value;\r\n    public override string ToString() => Value.ToString(CultureInfo.InvariantCulture);\r\n}\r\n```\r\n\r\n"
      },
      {
        "user": "tonybaloney",
        "created_at": "2024-10-10T06:34:29Z",
        "body": "@atifaziz you were working on constants, do you mind taking a look at a PR"
      }
    ]
  },
  {
    "number": 234,
    "title": "Refactor `PythonConstant` types into a true union",
    "created_at": "2024-10-06T20:37:09Z",
    "closed_at": "2024-10-06T23:14:46Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/234",
    "body": "This PR proposes to refactor `PythonConstant` types into a true union via a class hierarchy where `PythonConstant` becomes an abstract base class and the various types its nested subclasses. This has the following benefits:\r\n\r\n- Each subclass has its own clear, simpler and overriding implementation of `ToString` instead of a switch-case.\r\n- Each subclass holds its own strong-typed value, e.g. `Value` on `PythonConstant.Integer` is typed as `long` whereas `Value` on `PythonConstant.String` is typed as `string`.\r\n- Each subclass only requires the storage space for its value instead of the sum of all possible values.\r\n- Subclasses like `Bool` and `None` have statically initialised values, which avoids unnecessary allocations.\r\n- `PythonConstant.ConstantType` is no longer needed.\r\n- Subclasses enable simpler, stronger and more robust pattern-matching (see updates in `ArgumentReflection.ArgumentSyntax`).\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/234/comments",
    "author": "atifaziz",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-10-06T23:14:39Z",
        "body": "Thanks, this is a lot cleaner. I think we started with 2 constant types then it got out of hand quickly"
      }
    ]
  },
  {
    "number": 226,
    "title": "Recursive search of the folder \"ExamplePythonDependency\" in Program.cs, not working in CodeSpaces",
    "created_at": "2024-09-25T20:31:45Z",
    "closed_at": "2024-12-15T19:38:11Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/226",
    "body": null,
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/226/comments",
    "author": "elbruno",
    "comments": [
      {
        "user": "aaronpowell",
        "created_at": "2024-09-25T21:52:52Z",
        "body": "Do you know why it wasn't working in a code space? It should run the same from path discovery as other OS environments."
      }
    ]
  },
  {
    "number": 219,
    "title": "Time to cut a new version",
    "created_at": "2024-09-19T07:12:04Z",
    "closed_at": "2024-09-23T21:50:22Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/219",
    "body": null,
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/219/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-09-19T11:14:57Z",
        "body": "I'd like to merge #220 first as that's a pretty bad bug"
      }
    ]
  },
  {
    "number": 217,
    "title": "Improve test coverage",
    "created_at": "2024-09-19T05:44:58Z",
    "closed_at": "2024-09-23T10:13:13Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/217",
    "body": "Add selected tests and OS-specific test capability",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/217/comments",
    "author": "RussKie",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-09-19T06:05:41Z",
        "body": "please rebase"
      }
    ]
  },
  {
    "number": 207,
    "title": "Adding F# sample",
    "created_at": "2024-09-18T00:24:08Z",
    "closed_at": "2024-09-24T00:46:54Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/207",
    "body": null,
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/207/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-09-23T21:55:20Z",
        "body": "Does this get built by CI?"
      },
      {
        "user": "aaronpowell",
        "created_at": "2024-09-24T00:37:56Z",
        "body": "Yep, it's in the same solution as the other \"basic\" samples"
      }
    ]
  },
  {
    "number": 187,
    "title": "Convert ndarray scalars to Span<T> using the buffer protocol",
    "created_at": "2024-09-05T05:01:27Z",
    "closed_at": "2024-09-18T10:47:58Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/187",
    "body": "This implements the Python Buffer protocol as a type and exposes the data for _most_ unmanaged types as either a scalar `Span<>` or 2D array `Span2D`. \r\n\r\nThere is also an optional ReadOnlySpan interface.\r\n\r\nThis is a significant feature for numpy so that users dont need to convert ndarrays back into lists and then CSnakes marshals them.\r\n\r\nIt also works for `bytes` (as `ReadOnlySpan<byte>`) and `bytearray` as (`Span<byte>`).\r\n\r\nIt also opens up a bidirectional interface for exchanging low-level data via the span.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/187/comments",
    "author": "tonybaloney",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-09-06T05:54:45Z",
        "body": "Linux tests are failing because of #189 \r\n\r\nRest of the implementation I'm happy with"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2024-09-06T15:48:33Z",
        "body": ">  instead us a `TryGetXXX` pattern.\r\n> Doing this allows for easier defensive coding, you request the value _conditionally_ and handle the failure to resolve it.\r\n\r\nI'm not sure I agree. Applying the \"Try\" pattern is when there is a genuine chance of failure. A lot of times it comes down to parsing strings. In that case it is not uncommon that errors creep in. In this case the scenario is interop and data coming through is going to be handled during development - once it is \"correct\" it isn't going to be wrong. In that case, the current approach is far better as it is far less common that one needs to be defensive in production.\r\n\r\n"
      },
      {
        "user": "aaronpowell",
        "created_at": "2024-09-08T22:37:31Z",
        "body": "Hmm I guess you're right there. Maybe it'll be better to create a custom exception type here that has an enum representing the failure reason, rather than trying to parse the exception message to determine the course of action to take."
      }
    ]
  },
  {
    "number": 137,
    "title": "Marshal `SafeHandle` impls through the P/Invoke",
    "created_at": "2024-08-19T21:25:31Z",
    "closed_at": "2024-08-20T02:18:07Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/137",
    "body": "Calling `DangerousGetHandle` without calling the corresponding\r\n`DangerousAddRef` and `DangerousRelease` is unsafe.\r\n\r\nThis PR uses the provided marshallers in the P/Invoke signatures\r\nor manually marshals when passing an array of `SafeHandle`s.\r\n\r\nNew APIs added with the \"Raw\" suffix for use when the raw\r\nhandle is returned immediately from a P/Invoke.",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/137/comments",
    "author": "AaronRobinsonMSFT",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2024-08-19T21:25:52Z",
        "body": "/cc @tonybaloney @aaronpowell "
      },
      {
        "user": "aaronpowell",
        "created_at": "2024-08-19T23:45:53Z",
        "body": "Looks like some merge conflicts @AaronRobinsonMSFT before I can trigger the build - can you tackle them?"
      }
    ]
  },
  {
    "number": 132,
    "title": "remove path locator",
    "created_at": "2024-08-19T03:55:54Z",
    "closed_at": "2024-08-19T05:09:36Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/132",
    "body": "- **Putting samples into CI build**\n- **Making build log a bit more readable**\n- **Deleting PathLocator as it's rather problematic**\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/132/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-08-19T05:09:32Z",
        "body": "It needs removing from the samples as well"
      }
    ]
  },
  {
    "number": 65,
    "title": "Demonstrate how to use ILogger and Python Log Providers together",
    "created_at": "2024-08-05T04:19:37Z",
    "closed_at": "2024-08-30T03:06:01Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/tonybaloney/CSnakes/issues/65",
    "body": "Demonstrate how writing to Python logs will work with ILogger and DI",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/65/comments",
    "author": "tonybaloney",
    "comments": [
      {
        "user": "aaronpowell",
        "created_at": "2024-08-06T01:45:50Z",
        "body": "Could part of this see the `print` command in Python redirect back to the ILogger instance?"
      },
      {
        "user": "tonybaloney",
        "created_at": "2024-08-30T03:06:01Z",
        "body": "This is part of the Aspire demo already"
      }
    ]
  },
  {
    "number": 63,
    "title": "Better environment initialisation",
    "created_at": "2024-08-02T05:41:19Z",
    "closed_at": "2024-08-05T05:24:15Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/63",
    "body": "Making it so when you set the venv it will initialise that as well, assuming it doesn't exist (opt-out available via optional arg).\r\n\r\n~~When the builder is building the `IPythonEnvironment` it will now try to install packages with pip, assuming a `requirements.txt` is found.~~ Rolled back this change and will tackle it in a new branch.\r\n\r\nSome refactoring also.\r\n\r\n- **Moving stuff around to be more C#-y**\r\n- **Initializing the venv and providing a way to opt-out of doing so**\r\n- ~~**Using pip to install deps if requirements.txt is found**~~\r\n- **Moving the version of packages to props file for easier local dev**\r\n- **Adding NuGet version to props file and enabling SourceLink for better debugging**\r\n- **I think that adds the missing dependency**\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/63/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-08-02T10:30:08Z",
        "body": "This is much cleaner, I wonder if we should move the ensure virtual environment code out though. It's going to be more complicated than pip install for a lot of setups, also for AI/ML projects Conda is likely to be the package manager just as much as pop. "
      },
      {
        "user": "aaronpowell",
        "created_at": "2024-08-02T10:38:19Z",
        "body": "> This is much cleaner, I wonder if we should move the ensure virtual environment code out though. It's going to be more complicated than pip install for a lot of setups, also for AI/ML projects Conda is likely to be the package manager just as much as pop.\r\n\r\nSure, we could have something that allows you to specify the package manager rather than it assuming pip. Or we could go down the path of making it more DI based, so you register a package manager like:\r\n\r\n```csharp\r\nvar builder = PythonEnvironmentBuilder.FromNuGet(\"3.12.3\");\r\n\r\nbuilder.Services.AddPip();\r\n\r\n// and so on\r\n```\r\n"
      },
      {
        "user": "tonybaloney",
        "created_at": "2024-08-02T10:41:39Z",
        "body": "> > This is much cleaner, I wonder if we should move the ensure virtual environment code out though. It's going to be more complicated than pip install for a lot of setups, also for AI/ML projects Conda is likely to be the package manager just as much as pop.\n> \n> \n> \n> Sure, we could have something that allows you to specify the package manager rather than it assuming pip. Or we could go down the path of making it more DI based, so you register a package manager like:\n> \n> \n> \n> ```csharp\n> \n> var builder = PythonEnvironmentBuilder.FromNuGet(\"3.12.3\");\n> \n> \n> \n> builder.Services.AddPip();\n> \n> \n> \n> // and so on\n> \n> ```\n> \n> \n\nI think we'd inevitably want it to be DI/pluggable, if we want to implement this at all. Python devs are used to having to setup the virtual environment as a step before the code will work and the steps for doing so will vary between projects. \nI think that taking it out of this PR for now makes sense since it contains lots of other important changes then we can discuss the design of a package initialization tool. "
      },
      {
        "user": "aaronpowell",
        "created_at": "2024-08-02T11:01:02Z",
        "body": "Having to provision the venv makes sense at least, and it simplifies the CI environment.\r\n\r\nI also think it'll be good to have package install as part of the builder pipeline, as it means you don't have to run additional stuff outside yourself before the .NET process starts up. But I'll pull that stuff out of this PR."
      }
    ]
  },
  {
    "number": 42,
    "title": "Supporting Tuples to superb lengths",
    "created_at": "2024-07-22T09:51:03Z",
    "closed_at": "2024-07-22T23:04:40Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/pull/42",
    "body": "Moving to ValueTuple so we can use the `(string, string, ...)` syntax, as the compiler allows us to create that to any length and it will then generate the nested tuple stack for us.\r\n\r\nAdded a bunch of tests for up to 17 (three levels of nesting).\r\n\r\nFixes #21 \r\n\r\n",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/42/comments",
    "author": "aaronpowell",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-07-22T23:04:17Z",
        "body": "Tuple-tastic!"
      }
    ]
  },
  {
    "number": 2,
    "title": "Function signature not detected if the last line is code",
    "created_at": "2024-07-18T04:53:08Z",
    "closed_at": "2024-09-16T08:47:43Z",
    "labels": [],
    "url": "https://github.com/tonybaloney/CSnakes/issues/2",
    "body": "The given example:\r\n\r\n```python\r\ndef foo():\r\n    pass\r\n```\r\n\r\nWon't detect a signature without a blank line at the end. ",
    "comments_url": "https://api.github.com/repos/tonybaloney/CSnakes/issues/2/comments",
    "author": "tonybaloney",
    "comments": [
      {
        "user": "tonybaloney",
        "created_at": "2024-08-13T03:55:36Z",
        "body": "I can't reproduce this. "
      },
      {
        "user": "RussKie",
        "created_at": "2024-09-16T07:10:53Z",
        "body": "Doesn't look like an issue... Should this be closed?"
      }
    ]
  }
]