[
  {
    "number": 36,
    "title": "Alter signature of BindGPUVertexBuffers",
    "created_at": "2025-02-17T20:24:06Z",
    "closed_at": "2025-02-17T20:49:47Z",
    "labels": [],
    "url": "https://github.com/edwardgushchin/SDL3-CS/pull/36",
    "body": "Fixes crash when calling BindGPUVertexBuffers with array of C# structs.  Requires using StructureArrayToPointer/Free combo.",
    "comments_url": "https://api.github.com/repos/edwardgushchin/SDL3-CS/issues/36/comments",
    "author": "jamiec7919",
    "comments": [
      {
        "user": "edwardgushchin",
        "created_at": "2025-02-17T20:50:01Z",
        "body": "Merged, thanks!"
      }
    ]
  },
  {
    "number": 19,
    "title": "native library as standalone package",
    "created_at": "2024-12-24T13:31:11Z",
    "closed_at": "2024-12-24T17:00:41Z",
    "labels": [],
    "url": "https://github.com/edwardgushchin/SDL3-CS/issues/19",
    "body": "NativeAOT allow linking **Static Library** or **Import Library**(.lib from .dll). \r\nSo, maybe native library should be optional, allow user's SDL build. \r\nAnd the ImportResolver was a problem.",
    "comments_url": "https://api.github.com/repos/edwardgushchin/SDL3-CS/issues/19/comments",
    "author": "Gascognya",
    "comments": [
      {
        "user": "edwardgushchin",
        "created_at": "2024-12-24T15:54:53Z",
        "body": "Do you think it would be a good idea to shift the responsibility for SDL3 libraries to the user? In that case, there would be no guarantee that the shell is fully compliant with the custom version of SDL3.\r\n\r\nI've given a lot of thought to what would be best, and to be honest, I've been leaning towards the idea of doing away with the rigid binding to specific builds for a long time now."
      },
      {
        "user": "Gascognya",
        "created_at": "2024-12-24T16:31:59Z",
        "body": "Your concern is correct.\r\n\r\nBut I believe that users know what they are doing and are aware of the consequences.\r\n\r\nJust like the \"unsafe\" in the safe language, this is a disclaimer.\r\n\r\nMay be the Main \"SDL3-CS\" package depend on \"SDL3-CS.Bindings\" package and \"SDL3-CS.Native\" package is a compromise solution?\r\n\r\nDefault, but allow cheat.\r\n\r\n"
      },
      {
        "user": "edwardgushchin",
        "created_at": "2024-12-24T17:00:41Z",
        "body": "I agree. Besides, all these builds for multiple platforms are quite costly to maintain. I'll leave it to the user."
      },
      {
        "user": "Gascognya",
        "created_at": "2024-12-24T18:46:50Z",
        "body": "we should declare the binding sdl version, maybe synchronization between sdl3-cs and sdl3 versions? or sdl version + fix version.\r\n\r\nAnd we can provide a simple standalone package include mainstream platforms (desktop x64), for **develop** and **examples running**. (maybe copy from the official release build? if they can release on time)."
      },
      {
        "user": "edwardgushchin",
        "created_at": "2024-12-25T20:03:27Z",
        "body": "I was planning to do the Nuget release as a package at the same time as the SDL release, so that the versions would be the same (SDL-CS 3.2.1 -> SDL 3.2.1).\r\n\r\nAbout the standalone package idea is good, I may do along with the SDL release when they provide the official builds."
      }
    ]
  },
  {
    "number": 16,
    "title": "how about replace FPoint FRect to System.Numerics struct?",
    "created_at": "2024-11-23T03:20:08Z",
    "closed_at": "2024-11-25T10:17:35Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/edwardgushchin/SDL3-CS/issues/16",
    "body": "`FPoint(float x, float y)` -> `System.Numerics.Vector2(float x, float y)`\r\n`FRect(float x, float y, float w, float h)` -> `System.Numerics.Vector4(float x, float y, float z, float w)`\r\nThey have similar definitions, And more friendly to .NET.",
    "comments_url": "https://api.github.com/repos/edwardgushchin/SDL3-CS/issues/16/comments",
    "author": "Gascognya",
    "comments": [
      {
        "user": "edwardgushchin",
        "created_at": "2024-11-24T21:41:03Z",
        "body": "@Gascognya  Hi! I'm not sure if this is a good idea, because these structures are actively being marshaled. Also, it might confuse a lot of people. But overall, nothing is stopping us from implementing casting to these types inside FRect and FPoint."
      }
    ]
  }
]