[
  {
    "number": 35,
    "title": "Add more List macros and fix Lambda expressions not returning",
    "created_at": "2025-01-12T20:38:45Z",
    "closed_at": "2025-01-12T21:31:22Z",
    "labels": [],
    "url": "https://github.com/roblox-csharp/roblox-cs/pull/35",
    "body": null,
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/35/comments",
    "author": "denispionicul",
    "comments": [
      {
        "user": "R-unic",
        "created_at": "2025-01-12T21:31:30Z",
        "body": "thanks <3"
      }
    ]
  },
  {
    "number": 28,
    "title": "Also I think Roblox.NET is probably a better name so it's not copying exactly roblox ts",
    "created_at": "2025-01-06T06:35:39Z",
    "closed_at": "2025-01-06T17:21:35Z",
    "labels": [
      "wontfix"
    ],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/28",
    "body": null,
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/28/comments",
    "author": "AshtonK5",
    "comments": [
      {
        "user": "l-iquid",
        "created_at": "2025-01-06T13:56:09Z",
        "body": "roblox-py already exists, if everyone does it a specific way then roblox-ts doesn't own it (they don't even care anyways)"
      }
    ]
  },
  {
    "number": 27,
    "title": "Can you make the project MIT License so people can fork, modify, and use it?",
    "created_at": "2025-01-06T06:31:50Z",
    "closed_at": "2025-01-06T19:04:53Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/27",
    "body": "Feature.",
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/27/comments",
    "author": "AshtonK5",
    "comments": [
      {
        "user": "R-unic",
        "created_at": "2025-01-06T17:18:33Z",
        "body": "will do, thanks!"
      }
    ]
  },
  {
    "number": 24,
    "title": "out/ref",
    "created_at": "2025-01-05T23:04:32Z",
    "closed_at": "2025-02-07T18:14:58Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/24",
    "body": "```cs\r\nmethod(out string blah);\r\n\r\nvoid method(out string blah)\r\n{\r\n  blah = \"blah\";\r\n}\r\n```\r\n```luau\r\nlocal function method(blah: (value: string) -> nil)\r\n  blah(\"blah\")\r\nend\r\n\r\nlocal blah: string\r\nmethod(function(value: string): nil\r\n  blah = value\r\n  return nil\r\nend)\r\n```",
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/24/comments",
    "author": "R-unic",
    "comments": [
      {
        "user": "Velover",
        "created_at": "2025-01-06T13:12:39Z",
        "body": "proposal\r\n\r\n```cs\r\n\r\nvoid Method(out string blah)\r\n{\r\n    blah = \"test\"\r\n}\r\n\r\n\r\nvoid Main()\r\n{\r\n  Method(out var blah);\r\n}\r\n```\r\n\r\n\r\n```lua\r\nfunction Method(_out_blah: {string}): ()\r\n  _out_blah[1] = \"test\"\r\nend\r\n\r\nfunction Main(): ()\r\n  local blah: string\r\n  local _out_blah = {blah}\r\n  Method(_out_blah)\r\n  blah =  _out_blah[1]\r\nend\r\n```\r\n"
      },
      {
        "user": "Velover",
        "created_at": "2025-01-06T13:31:23Z",
        "body": "i think it's going to be easier computationally than creating function each time"
      },
      {
        "user": "R-unic",
        "created_at": "2025-01-06T17:20:28Z",
        "body": "i disagree. and to my knowledge table allocations are more expensive than tiny function calls. the original proposal for out/ref used tables, but i decided to switch to functions since they look better and are probably less expensive.\r\n\r\nthank you for your comment, though!"
      },
      {
        "user": "Velover",
        "created_at": "2025-01-06T17:23:31Z",
        "body": "i think the table allocation is less expensive because of the size of the table\r\n\r\ncan we benchmark it and tell what's better?\r\n\r\ne.g. 100_000 calls with --!native and without"
      },
      {
        "user": "R-unic",
        "created_at": "2025-01-06T19:21:33Z",
        "body": "yeah, we can benchmark it. we'll do whichever's faster."
      },
      {
        "user": "Velover",
        "created_at": "2025-01-13T18:09:44Z",
        "body": "Yeah, you're right doing with the function way is up-to 25% faster"
      },
      {
        "user": "R-unic",
        "created_at": "2025-01-13T22:33:20Z",
        "body": "> Yeah, you're right doing with the function way is up-to 25% faster\r\n\r\nappreciate the concern and time you took to benchmark it!"
      }
    ]
  },
  {
    "number": 8,
    "title": "Using this in member initilization puts an extra period in front of self",
    "created_at": "2024-07-30T22:47:45Z",
    "closed_at": "2024-07-30T22:57:39Z",
    "labels": [],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/8",
    "body": "When using `this` in method initialization, an extra dot is placed in front of the self variable.\r\nC#:\r\n```cs\r\nthis.tag = remoteTag;\r\n```\r\nconverts to\r\n```luau\r\n.self.tag = remoteTag\r\n```\r\nHowever, if you don't use this.tag, and just convert it to \r\n```cs\r\ntag = remoteTag\r\n```\r\nit converts correctly\r\n```luau\r\nself.tag = remoteTag\r\n```\r\n\r\nWhile using `this` in `this.tag = remoteTag` is useless, it is needed for something like `this.tag = tag` if the tag is used in an constructor with a parameter of the same name.",
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/8/comments",
    "author": "DataEncoded",
    "comments": [
      {
        "user": "R-unic",
        "created_at": "2024-07-30T22:50:54Z",
        "body": "Damn I thought about this the other day and forgot about it. Will be fixed soon."
      }
    ]
  },
  {
    "number": 7,
    "title": "Compiler attempts to assign new variable in \"is\" function even if there is no reassignment",
    "created_at": "2024-07-30T21:19:51Z",
    "closed_at": "2024-07-30T21:40:43Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/7",
    "body": "When using an if-is statement, if you omit having a new parameter, the compiler will just compile with a lua error.\r\nTest Case:\r\n```c#\r\nforeach (Player player in Services.Players.GetPlayers()) {\r\n    player.CharacterAdded.Connect((Model c) => {\r\n        if (c is Model) { // THIS IS THE BAD LINE\r\n            Console.WriteLine(\"Player Character found!\");\r\n        } else {\r\n            Console.WriteLine(\"Player is not a character!\");\r\n        }\r\n    });\r\n};\r\n```\r\nThe line labelled bad line will write in lua\r\n```luau\r\nif CS.is(c, \"Model\") then\r\n    = c\r\n```\r\n\r\nHowever, if you include a new parameter in the bad line, the issue is fixed.\r\n```c#\r\nforeach (Player player in Services.Players.GetPlayers()) {\r\n    player.CharacterAdded.Connect((Model c) => {\r\n        if (c is Model character) { // THIS WORKS\r\n            Console.WriteLine(\"Player Character found!\");\r\n        } else {\r\n            Console.WriteLine(\"Player is not a character!\");\r\n        }\r\n    });\r\n};\r\n```\r\nbecomes\r\n```luau\r\nif CS.is(c, \"Model\") then\r\n    local character = c\r\n```",
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/7/comments",
    "author": "DataEncoded",
    "comments": [
      {
        "user": "R-unic",
        "created_at": "2024-07-30T21:21:02Z",
        "body": "Thank you! Will be fixed in the next push."
      }
    ]
  },
  {
    "number": 5,
    "title": "Local Function Omitted Wrong",
    "created_at": "2024-07-25T03:23:24Z",
    "closed_at": "2024-07-25T04:59:55Z",
    "labels": [],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/5",
    "body": "```cs\r\n        public static void OnTouched(BasePart Hit)\r\n        {\r\n            Instance? Character = Hit.Parent;\r\n            if (Character == null) return;\r\n            Humanoid? Humanoid = Character.FindFirstChildOfClass<Humanoid>();\r\n            if (Humanoid == null) return;\r\n            if (debounce) return;\r\n            void resetDebounce()\r\n            {\r\n                debounce = false;\r\n            }\r\n            debounce = true; task.delay((float)0.1, resetDebounce);\r\n            Humanoid.TakeDamage(10);\r\n        }\r\n```\r\n\r\n```lua\r\nfunction class.OnTouched(Hit)\r\n    local Character = Hit.Parent\r\n    if Character == nil then return end\r\n    local Humanoid = Character:FindFirstChildOfClass(\"Humanoid\")\r\n    if Humanoid == nil then return end\r\n    if Game.debounce then return end\r\n    ()\r\n    Game.debounce = false\r\n    Game.debounce = true\r\n    task.delay(0.1, CS.getAssemblyType(\"resetDebounce\"))\r\n    Humanoid:TakeDamage(10)\r\nend\r\n```\r\n\r\nThe function should be omitted as a local function got instead got omitted as \r\n```lua\r\n()\r\nGame.debounce = false\r\n```",
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/5/comments",
    "author": "flowers3176",
    "comments": [
      {
        "user": "R-unic",
        "created_at": "2024-07-25T03:34:14Z",
        "body": "Oh interesting, looks like I haven't handled that syntax yet. Will fix soon."
      }
    ]
  },
  {
    "number": 3,
    "title": "Allow defining two entry points in total and only in different namespaces",
    "created_at": "2024-07-24T18:51:01Z",
    "closed_at": "2024-07-30T21:40:42Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/roblox-csharp/roblox-cs/issues/3",
    "body": null,
    "comments_url": "https://api.github.com/repos/roblox-csharp/roblox-cs/issues/3/comments",
    "author": "R-unic",
    "comments": [
      {
        "user": "plac3",
        "created_at": "2024-07-25T22:18:45Z",
        "body": "this repository is a sin"
      },
      {
        "user": "R-unic",
        "created_at": "2024-07-26T04:34:50Z",
        "body": "why brah"
      }
    ]
  }
]