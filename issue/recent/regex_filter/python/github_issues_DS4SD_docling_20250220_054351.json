[
  {
    "number": 950,
    "title": "Support Pillow 11.x",
    "created_at": "2025-02-12T14:07:07Z",
    "closed_at": "2025-02-13T13:19:38Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/950",
    "body": "### Requested feature\nCurrently Pillow is set in pyproject.toml to `^10.x`. Some other packages I use require Pillow `>=11`. Is `^10` a hard requirement? If not, could this be loosened to `>=10,<12`?\n\nI tried setting it to this in a Github Codespace but gave up when `poetry lock` was resolving dependencies for more than 20 minutes.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/950/comments",
    "author": "Riezebos",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-02-12T14:21:23Z",
        "body": "This should definitely be possible, but I think we have to apply it on multiple repos as well."
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2025-02-13T06:50:11Z",
        "body": "completed"
      },
      {
        "user": "Riezebos",
        "created_at": "2025-02-13T07:04:26Z",
        "body": "That was fast, thank you! "
      }
    ]
  },
  {
    "number": 918,
    "title": "Error: No module named 'httpx'",
    "created_at": "2025-02-07T15:50:35Z",
    "closed_at": "2025-02-07T16:51:33Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/918",
    "body": "### Bug\nAfter install the latest version of Docling (v2.19.0), docling throws this error\n\n```\ndocling test-docling.pdf --to json --to md\nTraceback (most recent call last):\n  File \"/Users/jean/.pyenv/versions/3.12.1/bin/docling\", line 5, in <module>\n    from docling.cli.main import app\n  File \"/Users/jean/.pyenv/versions/3.12.1/lib/python3.12/site-packages/docling/cli/main.py\", line 43, in <module>\n    from docling.document_converter import DocumentConverter, FormatOption, PdfFormatOption\n  File \"/Users/jean/.pyenv/versions/3.12.1/lib/python3.12/site-packages/docling/document_converter.py\", line 44, in <module>\n    from docling.pipeline.standard_pdf_pipeline import StandardPdfPipeline\n  File \"/Users/jean/.pyenv/versions/3.12.1/lib/python3.12/site-packages/docling/pipeline/standard_pdf_pipeline.py\", line 29, in <module>\n    from docling.models.easyocr_model import EasyOcrModel\n  File \"/Users/jean/.pyenv/versions/3.12.1/lib/python3.12/site-packages/docling/models/easyocr_model.py\", line 7, in <module>\n    import httpx\nModuleNotFoundError: No module named 'httpx'\n```\n...\n\n### Steps to reproduce\n```\npip install --upgrade docling\ndocling test-docling.pdf --to json --to md\n```\n...\n\n### Docling version\n`docling --version` throws the same error message\n...\n\n### Python version\nPython 3.12.1 on Apple M1\n...\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/918/comments",
    "author": "HackJack-101",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-02-07T16:10:12Z",
        "body": "A fixed release will come soon. Meanwhile you can install httpx for not being blocked."
      },
      {
        "user": "HackJack-101",
        "created_at": "2025-02-07T16:27:00Z",
        "body": "I locked to the previous version. Thank you"
      }
    ]
  },
  {
    "number": 779,
    "title": "How to use document_timeout ?",
    "created_at": "2025-01-21T07:03:35Z",
    "closed_at": "2025-01-24T05:05:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/779",
    "body": "### Question\nHello, I am trying to introduce `document_timeout` into my current set up for docling.  The goal is to make sure all the conversion tasks can finish (on way or the other) in a reasonable time without blocking the pipeline. I am using a set up like this\n\n```\n   accelerator_options = AcceleratorOptions(\n        num_threads=8, device=AcceleratorDevice.AUTO\n    )\n\n    pipeline_options = PdfPipelineOptions()\n    pipeline_options.accelerator_options = accelerator_options\n    pipeline_options.do_ocr = True\n    pipeline_options.do_table_structure = True\n    pipeline_options.table_structure_options.do_cell_matching = True\n    pipeline_options.document_timeout = 20\n\n    converter = DocumentConverter(\n        format_options={\n            InputFormat.PDF: PdfFormatOption(\n                pipeline_options=pipeline_options,\n            )\n        }\n    )\n\n    result = converter.convert(pdf_file_path)\n    content = result.document.export_to_markdown()\n```\n\nHowever, even though the timeout is set to 20, I still see log messages like this:\n```\n docling.document_converter - Finished converting document 2404.12603v1 in 36.17 sec.\n```\n\nSo Id like to understand how the timeout works. Thank you.\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/779/comments",
    "author": "marfago",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2025-01-22T19:34:22Z",
        "body": "@marfago  Docling processes documents in batches of pages. the way this timeout works is that the timeout value you provide is checked after every batch. That's after every 4 pages in the default setting. If processing 4 pages takes longer than the desired 20 sec, the conversion will only be aborted afterwards. "
      },
      {
        "user": "marfago",
        "created_at": "2025-01-23T06:18:36Z",
        "body": "@cau-git Thank you for your explanation. However, it seems to me that when the timeout is triggered the pipeline is interrupted and whatever output is available so far it is returned. Am I correct? Also, is there a way to understand when the pipeline finished properly and when instead it was interrupted?"
      },
      {
        "user": "cau-git",
        "created_at": "2025-01-23T18:13:55Z",
        "body": "You can check the conversion result status, as in result.status. It should report as PARTIAL_SUCCESS for this case."
      }
    ]
  },
  {
    "number": 763,
    "title": "Json decode error when parsing PDFs",
    "created_at": "2025-01-16T20:04:37Z",
    "closed_at": "2025-01-17T07:17:33Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/763",
    "body": "### Bug\nRelatively often when running Docling on pdfs I get a json decode error.\n...\n\n### Steps to reproduce\nI run \n```bash \ndocling --from pdf --to md  January\\ 2020\\ -\\ Demo\\ 3.pdf\n```\nand get the following output:\n```bash\nTraceback (most recent call last):\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"~/.local/bin/docling\", line 8, in <module>\n    sys.exit(app())\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/typer/main.py\", line 338, in __call__\n    raise e\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/typer/main.py\", line 321, in __call__\n    return get_command(self)(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/click/core.py\", line 1161, in __call__\n    return self.main(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/typer/core.py\", line 665, in main\n    return _main(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/typer/core.py\", line 197, in _main\n    rv = self.invoke(ctx)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/click/core.py\", line 1443, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/click/core.py\", line 788, in invoke\n    return __callback(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/typer/main.py\", line 703, in wrapper\n    return callback(**use_params)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/cli/main.py\", line 409, in convert\n    export_documents(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/cli/main.py\", line 89, in export_documents\n    for conv_res in conv_results:\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 212, in convert_all\n    for conv_res in conv_res_iter:\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 247, in _convert\n    for item in map(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 288, in _process_document\n    conv_res = self._execute_pipeline(in_doc, raises_on_error=raises_on_error)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 309, in _execute_pipeline\n    pipeline = self._get_pipeline(in_doc.format)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 275, in _get_pipeline\n    self.initialized_pipelines[pipeline_class] = pipeline_class(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/pipeline/standard_pdf_pipeline.py\", line 49, in __init__\n    self.artifacts_path = self.download_models_hf()\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/docling/pipeline/standard_pdf_pipeline.py\", line 105, in download_models_hf\n    download_path = snapshot_download(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py\", line 114, in _inner_fn\n    return fn(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/_snapshot_download.py\", line 155, in snapshot_download\n    repo_info = api.repo_info(repo_id=repo_id, repo_type=repo_type, revision=revision, token=token)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py\", line 114, in _inner_fn\n    return fn(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/hf_api.py\", line 2748, in repo_info\n    return method(\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py\", line 114, in _inner_fn\n    return fn(*args, **kwargs)\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/huggingface_hub/hf_api.py\", line 2534, in model_info\n    data = r.json()\n  File \"~/.local/share/uv/tools/docling/lib/python3.10/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n```\n...\n\n### Docling version\nDocling version: 2.15.1\nDocling Core version: 2.14.0\nDocling IBM Models version: 3.1.2\nDocling Parse version: 3.0.0\n\n### Python version\n3.10",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/763/comments",
    "author": "ericfeunekes",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-01-17T07:17:33Z",
        "body": "From the stacktrace posted above, I believe this is a temporary connection issue while downloading the models from Hugging Face. I will close the issue but feel free to reopen if the problem persists."
      },
      {
        "user": "ericfeunekes",
        "created_at": "2025-01-20T09:15:12Z",
        "body": "No need to reopen, but it would be nice to have some informative error messages for issues like this."
      }
    ]
  },
  {
    "number": 756,
    "title": "Dependency conflict on macOS (arm) ",
    "created_at": "2025-01-16T06:22:36Z",
    "closed_at": "2025-01-16T08:38:30Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/756",
    "body": "### Bug\r\npip install docling\r\n... throws the following error on macOS (arm):\r\nERROR: Cannot install docling==1.10.0, docling==1.11.0, docling==1.12.0, docling==1.12.1, docling==1.12.2, docling==1.13.0, docling==1.13.1, docling==1.14.0, docling==1.15.0, docling==1.16.0, docling==1.16.1, docling==1.17.0, docling==1.18.0, docling==1.19.0, docling==1.19.1, docling==1.2.0, docling==1.2.1, docling==1.20.0, docling==1.3.0, docling==1.4.0, docling==1.5.0, docling==1.6.0, docling==1.6.1, docling==1.6.2, docling==1.6.3, docling==1.8.5, docling==1.9.0, docling==2.0.0, docling==2.1.0, docling==2.2.0, docling==2.2.1 and docling==2.3.0 because these package versions have conflicting dependencies.\r\n\r\nThe conflict is caused by:\r\n    docling 2.3.0 depends on torch<3.0.0 and >=2.2.2; sys_platform != \"darwin\" or platform_machine != \"x86_64\"\r\n    docling 2.2.1 depends on torch<3.0.0 and >=2.2.2; sys_platform != \"darwin\" or platform_machine != \"x86_64\"\r\n    docling 2.2.0 depends on torch<3.0.0 and >=2.2.2; sys_platform != \"darwin\" or platform_machine != \"x86_64\"\r\n    docling 2.1.0 depends on torch<3.0.0 and >=2.2.2; sys_platform != \"darwin\" or platform_machine != \"x86_64\"\r\n    docling 2.0.0 depends on torch<3.0.0 and >=2.2.2; sys_platform != \"darwin\" or platform_machine != \"x86_64\"\r\n    docling 1.20.0 depends on deepsearch-glm<0.23.0 and >=0.22.0\r\n    docling 1.19.1 depends on deepsearch-glm<0.23.0 and >=0.22.0\r\n    docling 1.19.0 depends on deepsearch-glm<0.23.0 and >=0.22.0\r\n    docling 1.18.0 depends on deepsearch-glm<0.23.0 and >=0.22.0\r\n    docling 1.17.0 depends on deepsearch-glm<0.23.0 and >=0.22.0\r\n    docling 1.16.1 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.16.0 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.15.0 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.14.0 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.13.1 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.13.0 depends on deepsearch-glm<0.22.0 and >=0.21.1\r\n    docling 1.12.2 depends on deepsearch-glm<0.22.0 and >=0.21.0\r\n    docling 1.12.1 depends on deepsearch-glm<0.22.0 and >=0.21.0\r\n    docling 1.12.0 depends on deepsearch-glm<0.22.0 and >=0.21.0\r\n    docling 1.11.0 depends on deepsearch-glm<0.22.0 and >=0.21.0\r\n    docling 1.10.0 depends on deepsearch-glm<0.22.0 and >=0.21.0\r\n    docling 1.9.0 depends on deepsearch-glm<0.20.0 and >=0.19.1\r\n    docling 1.8.5 depends on deepsearch-glm<0.20.0 and >=0.19.1\r\n    docling 1.6.3 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.6.2 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.6.1 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.6.0 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.5.0 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.4.0 depends on docling-parse<0.3.0 and >=0.2.0\r\n    docling 1.3.0 depends on docling-parse<0.0.2 and >=0.0.1\r\n    docling 1.2.1 depends on docling-parse<0.0.2 and >=0.0.1\r\n    docling 1.2.0 depends on docling-parse<0.0.2 and >=0.0.1\r\n\r\nUsing Python 3.13.1 and a fresh virtual environment (venv). I suspect, this conflict is not the intended behavior. Could you please check, if those dependency ranges can be extended/relaxed? Thank you\r\n\r\n### Steps to reproduce\r\n1. create a new virtual environment to have a clean python installation (3.13.1): **python3 -m vent pdf**\r\n2. activate the environment: **source pdf/bin/activate**\r\n3. install docking: **pip install docling**\r\n\r\n### Docling version\r\nn/a - trying to install \"the latest\" version available via pip\r\n\r\n### Python version\r\n3.13.1 (freshly installed)\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/756/comments",
    "author": "fwornle",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-01-16T08:38:31Z",
        "body": "Unfortunately python 3.13 only works with nightly builds of pytorch. We are waiting for the new torch release which will enable support. You can read more at #136 "
      }
    ]
  },
  {
    "number": 732,
    "title": "How to read .doc (not .docx) file",
    "created_at": "2025-01-13T13:51:53Z",
    "closed_at": "2025-01-13T14:13:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/732",
    "body": "### Question\r\nAs far as I understand from `InputFormat` enum, there is no support for `.doc` files. So I wonder the suggested way to read `.doc` files with docling?",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/732/comments",
    "author": "iedmrc",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-01-13T14:13:25Z",
        "body": "We have successfully used LibreOffice to convert doc to docx, e.g. via `soffice --headless --convert-to docx *.doc`, then you can use Docling with it.\r\n\r\nPotentially, the command above could be wrapped into a new backend in Docling to support `.doc` directly."
      }
    ]
  },
  {
    "number": 648,
    "title": "Make EasyOCR optional dependency",
    "created_at": "2024-12-23T12:49:10Z",
    "closed_at": "2025-01-06T12:19:19Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/648",
    "body": "### Requested Feature\r\nIt would be beneficial to make OCR models optional during installation, with EasyOCR remaining as the default option. In our case, we use TesseractOCR but are required to install EasyOCR since it's currently mandatory, even though we don't use it.\r\n\r\nHere's a proposed installation approach:\r\n\r\n1. All OCR models:\r\n`pip install docling[all]`\r\n\r\n2. EasyOCR only (default installation):\r\n`pip install docling[easyocr]`\r\n\r\n3. Specific OCR models:\r\n`pip install docling[tesseract]`\r\n\r\n4. Base installation (no OCR models):\r\n`pip install docling`\r\n\r\n### Alternatives\r\n1. Install Docling as is - This installs EasyOCR and its dependencies even when they're not needed.\r\n2. Install Docling without dependencies - This requires significant maintenance effort on our end to ensure version compatibility.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/648/comments",
    "author": "jaluma",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2025-01-06T12:19:19Z",
        "body": "@jaluma We have been considering different options, including no OCR as default, but we decided against that. To have a seamless out-of-the-box experience, EasyOCR is installed always as a dependency but _no OCR models_ are downloaded unless you actually use EasyOCR the first time. This keeps the overhead minimal, since most of EasyOCRs dependencies are anyway shared with other packages we need."
      }
    ]
  },
  {
    "number": 619,
    "title": "OCR on hand-written english text and digits?",
    "created_at": "2024-12-18T06:57:43Z",
    "closed_at": "2025-01-30T09:31:26Z",
    "labels": [
      "question",
      "ocr"
    ],
    "url": "https://github.com/DS4SD/docling/issues/619",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\nDoes it also perform OCR on hand-written english text and digits? \r\nI have a form - table in which students have to write the answers which are either english words or digits. \r\nI want to automate the process of digitizing this hand-written forms into a .csv or excel form more reliably and seeking for open-source options.\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/619/comments",
    "author": "xfab-hari",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-12-18T10:01:16Z",
        "body": "@xfab-hari Docling offers multiple choices for OCR, among which are EasyOCR, RapidOCR, Tesseract, and ocrmac. The results of the docling conversion will depend how these engines can handle handwriting recognition.  "
      },
      {
        "user": "nikos-livathinos",
        "created_at": "2025-01-30T09:31:26Z",
        "body": "Closing this issue as it seems to be related to the OCR engines and not to Docling."
      }
    ]
  },
  {
    "number": 611,
    "title": "AttributeError: module 'torch.compiler' has no attribute 'is_compiling' error",
    "created_at": "2024-12-16T16:33:20Z",
    "closed_at": "2025-01-30T09:04:31Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/611",
    "body": "### Bug\r\nGetting a AttributeError: module 'torch.compiler' has no attribute 'is_compiling' error which is caused by a function call in the transformers library.\r\n\r\nDowngrading to transformers-4.44.2 fixed this for me.\r\n...\r\n\r\n### Steps to reproduce\r\n```\r\nfrom docling.document_converter import DocumentConverter\r\n\r\nfrom docling.datamodel.base_models import InputFormat\r\nfrom docling.document_converter import DocumentConverter, PdfFormatOption\r\nfrom docling.datamodel.pipeline_options import PdfPipelineOptions, TableFormerMode\r\n\r\npipeline_options = PdfPipelineOptions(do_table_structure=True)\r\npipeline_options.table_structure_options.do_cell_matching = False\r\npipeline_options.table_structure_options.mode = TableFormerMode.ACCURATE\r\n\r\nconverter = DocumentConverter(\r\n    format_options={\r\n        InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\r\n    }\r\n)\r\n\r\n\r\ndoc = converter.convert(pdf_path)\r\nmkdown = doc.document.export_to_markdown()\r\n\r\nprint(mkdown)\r\n```\r\n\r\n### Docling version\r\ndeepsearch-glm-1.0.0 docling-2.12.0 docling-ibm-models-3.1.0 docling-parse-3.0.0 transformers-4.47.0\r\n...\r\n\r\n### Python version\r\nPython 3.11.11\r\nI am running a M1 Macbook pro\r\n...\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/611/comments",
    "author": "willfinnigan",
    "comments": [
      {
        "user": "wzdavid",
        "created_at": "2024-12-24T05:20:55Z",
        "body": "Met the same problem and had to downgrade transformers."
      },
      {
        "user": "zd3tl",
        "created_at": "2025-01-04T05:47:59Z",
        "body": "pip uninstall transformers\r\npip install transformers==4.42.0\r\n\r\nworks to me"
      },
      {
        "user": "dolfim-ibm",
        "created_at": "2025-01-30T09:04:31Z",
        "body": "This type of errors were addressed in a release a few weeks ago. I'm closing the issue. If you encounter more problems with the latest Docling version, please reopen."
      }
    ]
  },
  {
    "number": 610,
    "title": "export_to_markdown with ImageRefMode.EMBEDDED generate error",
    "created_at": "2024-12-16T16:11:39Z",
    "closed_at": "2025-01-30T10:29:56Z",
    "labels": [
      "bug",
      "pdf"
    ],
    "url": "https://github.com/DS4SD/docling/issues/610",
    "body": "### Bug\r\nexport_to_markdown with ImageRefMode.EMBEDDED generate error.\r\n...\r\n\r\n### Steps to reproduce\r\n```\r\nconverter = DocumentConverter()\r\nresult = converter.convert(file_path)\r\nresult.document.export_to_markdown(\r\n                image_mode=ImageRefMode.EMBEDDED,\r\n            )\r\n```\r\ngenerate error: \r\n```\r\n<!-- 🖼️❌ Image not available. Please use `PdfPipelineOptions(generate\\_picture\\_images=True)` --> \r\n```\r\nWhere it's possible to add `PdfPipelineOptions` with `export_to_markdown()` ?\r\n...\r\n\r\n### Docling version\r\nDocling version: 2.12.0\r\nDocling Core version: 2.11.0\r\nDocling IBM Models version: 3.1.0\r\nDocling Parse version: 3.0.0\r\n...\r\n\r\n### Python version\r\nPython 3.12.7\r\n...\r\n\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/610/comments",
    "author": "pprados",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2025-01-30T08:02:04Z",
        "body": "@pprados Could you retry with a newer version of Docling, I think this might have been fixed by now. If not, please share the doc and command you ran, so we can re-produce and fix."
      },
      {
        "user": "pprados",
        "created_at": "2025-01-30T10:29:56Z",
        "body": "It's fixed."
      }
    ]
  },
  {
    "number": 589,
    "title": "It is hoped that the content translation function can be added during conversion",
    "created_at": "2024-12-13T08:02:37Z",
    "closed_at": "2024-12-14T01:48:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/589",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\n\r\nIt is hoped that the content translation function can be added during conversion\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/589/comments",
    "author": "honestAnt",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-12-13T08:05:10Z",
        "body": "This feature is not planned any time soon. But is could be added as an enrichment pipeline step."
      },
      {
        "user": "honestAnt",
        "created_at": "2024-12-14T01:48:04Z",
        "body": "ok,thanks"
      }
    ]
  },
  {
    "number": 583,
    "title": "Turning off unused features (OCR, tables)",
    "created_at": "2024-12-12T21:43:08Z",
    "closed_at": "2024-12-13T07:54:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/583",
    "body": "### Question\r\nHi, I'm wondering if it's possible to disable certain parts of Docling to speed up processing.\r\n\r\nI'm processing PDFs of academic papers, and I'm not interested in any tabular data. What I would like to do is disable all OCR and all table parsing, since I'll never use these features for this particular problem.\r\n\r\nIs this possible? I can't tell from the documentation how to do it, if so.\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/583/comments",
    "author": "thatbudakguy",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-12-13T07:54:40Z",
        "body": "Yes, you can initializer the DocumentConverter with something like this\r\n\r\n```py\r\n    pipeline_options = PdfPipelineOptions()\r\n    pipeline_options.do_ocr = False\r\n    pipeline_options.do_table_structure = False\r\n\r\n    doc_converter = DocumentConverter(\r\n        format_options={\r\n            InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\r\n        }\r\n    )\r\n```"
      },
      {
        "user": "thatbudakguy",
        "created_at": "2024-12-13T18:04:19Z",
        "body": "thank you!"
      }
    ]
  },
  {
    "number": 581,
    "title": "Problem with .xlsx file reading",
    "created_at": "2024-12-12T18:26:20Z",
    "closed_at": "2024-12-13T07:32:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/581",
    "body": "### Question\r\n\r\nCurrently using docling to read .pptx .pdf and .docx files to markdown format but for .xlsx I am getting an error like below \r\n\r\n Value error, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' is not a valid MIME type [type=value_error, input_value='application/vnd.openxmlf...ent.spreadsheetml.sheet', input_type=str]\r\n\r\nthe following is my code:\r\nsource = Path(\"docs/domain1/as.xlsx\")\r\nconverter = DocumentConverter()\r\nresult = converter.convert(source)\r\n\r\nI am new on using docling and to github if I made an error please warn me.\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/581/comments",
    "author": "ozgurnsahin",
    "comments": [
      {
        "user": "AdityaMannu1709",
        "created_at": "2024-12-13T06:42:30Z",
        "body": "os is windows?"
      },
      {
        "user": "ozgurnsahin",
        "created_at": "2024-12-13T06:54:20Z",
        "body": "Yeah windows 11"
      },
      {
        "user": "ozgurnsahin",
        "created_at": "2024-12-13T07:32:24Z",
        "body": "solved with docling 2.9.0 "
      }
    ]
  },
  {
    "number": 559,
    "title": "Know issues with installation on windows?",
    "created_at": "2024-12-10T19:55:19Z",
    "closed_at": "2024-12-18T10:38:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/559",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\nI tested IBM Docling in an Google Colab Notebook and it works great. With the same code on a windows pc i got only text output and not markdown formated output. Maybe there is some issue with other libaries. Could you help?\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/559/comments",
    "author": "janschachtschabel",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-12-11T05:51:09Z",
        "body": "Interesting question. We are not aware of any difference expected between Linux and Windows.\r\n\r\nCan you please get the exact version of Docling on Colab and Windows?\r\n\r\n```\r\ndocling --version\r\n```"
      },
      {
        "user": "cau-git",
        "created_at": "2024-12-18T10:38:27Z",
        "body": "@janschachtschabel If you can provide updates on the versions of docling used in either case, we could follow up. I am closing this until further evidence is provided."
      }
    ]
  },
  {
    "number": 546,
    "title": "Improve accuracy and reduce speed",
    "created_at": "2024-12-09T09:07:48Z",
    "closed_at": "2025-01-31T08:57:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/546",
    "body": "I want to know what else option I can do to improve OCR accuracy and reduce the speed? For now there is not much option for finetuning, and it took 16s for one page on google colab gpu. Anyway to reduce under 10s?",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/546/comments",
    "author": "ninedesu",
    "comments": [
      {
        "user": "simjak",
        "created_at": "2024-12-09T09:58:26Z",
        "body": "This is odd, I have a speed of 1 page/s  on a Google C4 CPU instance using four cores.\r\nEasyocr is a bit slower than Rapid OCR"
      },
      {
        "user": "ninedesu",
        "created_at": "2024-12-10T02:15:20Z",
        "body": "I tried it again and able to get 9s for Easyocr and 6s for Rapidocr. The code run fine using google colab but I encountered this error when using locally on Jupyter lab. \r\n\r\n\"---------------------------------------------------------------------------\r\nModuleNotFoundError                       Traceback (most recent call last)\r\nCell In[3], line 7\r\n      5 from docling.models.tesseract_ocr_cli_model import TesseractCliOcrOptions\r\n      6 from docling.models.tesseract_ocr_model import TesseractOcrOptions\r\n----> 7 from docling.models.rapid_ocr_model import RapidOcrOptions\r\n      8 from docling.models.easyocr_model import EasyOcrOptions\r\n\r\nModuleNotFoundError: No module named 'docling.models.rapid_ocr_model'\" "
      },
      {
        "user": "cau-git",
        "created_at": "2025-01-31T08:57:21Z",
        "body": "@ninedesu Since docling provides full control over GPU accelerators now, this should no longer be of concern. Please re-open this issue if you still find issues. Thanks."
      }
    ]
  },
  {
    "number": 437,
    "title": "page image preprocessing steps, not able to reproduce results",
    "created_at": "2024-11-26T10:16:42Z",
    "closed_at": "2024-11-26T14:28:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/437",
    "body": "I am trying out your layout model \"model_artifacts/layout/beehive_v0.0.5_pt/model.pt\" but I am seeing completely different output. I see you have done the page recalling from 1.5x res back to original w, h in \"get_page_image\" method in pdf_backend. But I am still not getting the same output. Can you tell me what else I am missing?",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/437/comments",
    "author": "mllife",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-26T13:54:46Z",
        "body": "@mllife Are you using the test code provided with `docling-ibm-models`? It should demonstrate how to use it."
      },
      {
        "user": "mllife",
        "created_at": "2024-11-27T04:51:06Z",
        "body": "@cau-git , yes, I ran ran a page image through the test code; and then the same page through docling pipeline as a pdf I am seeing different results. I see the perfect output with the docling pipeline but not the same with test code, so I looked into the code that it was using image rescaling, still I am not getting the same output. Am I missing something?"
      }
    ]
  },
  {
    "number": 435,
    "title": "Read PDF from local path results in RuntimeError: D:/a/docling-parse/docling-parse/src/v1/proj_folders/pdf_library/core/object/font.h ",
    "created_at": "2024-11-26T07:33:33Z",
    "closed_at": "2024-11-27T11:55:16Z",
    "labels": [
      "bug",
      "pdf parsing"
    ],
    "url": "https://github.com/DS4SD/docling/issues/435",
    "body": "### Bug\r\n<!-- Describe the buggy behavior you have observed. -->\r\nOn Windows 10 x64, I installed docling and try to read a local PDF\r\n\r\n### Steps to reproduce\r\n<!-- Describe the sequence of steps for reproducing the bug. -->\r\ninput_doc_path = Path(r\"C:\\\\Users\\\\\\\\5100670064--0000000000.pdf\")\r\ndoc_converter = DocumentConverter()\r\ndoc_converter.convert(input_doc_path)\r\n\r\nthrows:\r\n\r\nsite-packages\\docling\\backend\\docling_parse_backend.py\", line 195, in __init__\r\n    self.parser = pdf_parser_v1()\r\n                  ^^^^^^^^^^^^^^^\r\nRuntimeError: [D:/a/docling-parse/docling-parse/src/v1/proj_folders/pdf_library/core/object/font.h](file:///D:/a/docling-parse/docling-parse/src/v1/proj_folders/pdf_library/core/object/font.h)\r\n\r\n### Docling version\r\n<!-- Copy the output of `docling --version`. -->\r\nDocling version: 2.7.0\r\nDocling Core version: 2.4.1\r\nDocling IBM Models version: 2.0.6\r\nDocling Parse version: 2.1.2\r\n\r\n### Python version\r\n<!-- Copy the output of `python --version`. -->\r\nPython 3.12.3\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/435/comments",
    "author": "bnhemanth",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-27T09:32:50Z",
        "body": "@bnhemanth Can you please give us some details:\r\n- Does it happen for just a particular PDF or every PDF?\r\n- Can you check what happens if you use `docling-parse-v2`, example:\r\n```\r\ndocling --pdf-backend dlparse_v2 your_file.pdf\r\n```\r\n\r\nThanks."
      },
      {
        "user": "bnhemanth",
        "created_at": "2024-11-27T09:58:38Z",
        "body": "With docling --pdf-backend dlparse_v2 5100670064--0000000000.pdf\r\nI get: \r\nD:/a/docling-parse/docling-parse/src/resources.h:94     resources-v2-dir does not exist ...\r\nERROR:docling.datamodel.document:An unexpected error occurred while opening the document 5100670064--0000000000.pdf\r\n\\docling-env\\Lib\\site-packages\\docling\\backend\\docling_parse_v2_backend.py\", line 210, in __init__\r\n    self.parser = pdf_parser_v2(\"fatal\")\r\n                  ^^^^^^^^^^^^^^^^^^^^^^\r\nRuntimeError: no existing pdf_resources_dir: C:\\Users\\docling-env\\Lib\\site-packages\\docling_parse\\pdf_resources_v2/\r\nWARNING:docling.cli.main:Document 5100670064--0000000000.pdf failed to convert.\r\n\r\nThis happens for all PDFs. Many Thanks!"
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-27T11:55:16Z",
        "body": "@bnhemanth I suspect that your install is incorrect. The error message suggests that it does not find the resource directory needed. I see also that the errro points to D:/ (D:/a/docling-parse/docling-parse/src/resources.h:94) while your runtime is clearly in C:/ (RuntimeError: no existing pdf_resources_dir: C:\\Users\\docling-env\\Lib\\site-packages\\docling_parse\\pdf_resources_v2/).\r\n\r\nI would propose you do a clean install."
      },
      {
        "user": "bnhemanth",
        "created_at": "2024-11-27T12:45:10Z",
        "body": "Did a re-install with py -m pip install docling \r\nVerified that C:\\Users\\docling-env\\Lib\\site-packages\\docling_parse\\pdf_resources_v2 folder exists. \r\nBut still get the same error. \r\n"
      },
      {
        "user": "zhangwenhao66",
        "created_at": "2024-12-04T03:50:37Z",
        "body": "@bnhemanth I also encountered this problem. The reason I found out was that the path of the running project contained Chinese names. After I changed the project path to an all-English path, there was no error."
      },
      {
        "user": "bnhemanth",
        "created_at": "2024-12-04T07:39:34Z",
        "body": "Indeed. Many thanks @zhangwenhao66 \r\nMy installation path had diacrits like ü. It worked after I reinstalled into an \"all-english\" path.\r\n"
      }
    ]
  },
  {
    "number": 399,
    "title": "Document normalization: warning on `checkbox-unselected`",
    "created_at": "2024-11-21T02:04:49Z",
    "closed_at": "2024-11-25T12:49:20Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/399",
    "body": "### Question\r\nHello,\r\n\r\nThank you for the awesome work, I having a warning when converting a PDF and was wondering 2 things:\r\n\r\n1. What does this warning means?\r\n2. Is there a way to disable it so it don't pollute my logs?\r\n\r\nWarnings:\r\n\r\n```\r\n2024-11-21 12:59:17.367 (   6.660s) [        92BD3300]    doc_normalisation.h:448   WARN| found new `other` type: checkbox-unselected\r\n2024-11-21 12:59:17.367 (   6.660s) [        92BD3300]    doc_normalisation.h:448   WARN| found new `other` type: checkbox-unselected\r\n\r\n```\r\n\r\nThank you\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/399/comments",
    "author": "pierre-sigwalt",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-21T09:51:20Z",
        "body": "@pierre-sigwalt I think this has to do with the underlying layout model. It should not hurt, but it is not great either. \r\n\r\n@cau-git @sh-gupta let's get to the bottom of this!"
      },
      {
        "user": "cau-git",
        "created_at": "2024-11-25T08:52:41Z",
        "body": "@pierre-sigwalt This log output has no practical meaning and we will remove it in the near future."
      }
    ]
  },
  {
    "number": 372,
    "title": "Newcomers who want to start source code, how should I do it？",
    "created_at": "2024-11-19T05:23:36Z",
    "closed_at": "2024-11-19T11:29:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/372",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\n...\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/372/comments",
    "author": "aodingpeng",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-19T11:29:26Z",
        "body": "converting to a discussion, feel free to ask specific questions!"
      }
    ]
  },
  {
    "number": 362,
    "title": "Should the second \"if\" keyword in adapt_bbox from layout_utils.py rather be an \"elif\" keyword ?",
    "created_at": "2024-11-18T10:51:20Z",
    "closed_at": "2024-12-18T11:33:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/362",
    "body": "### Question\r\n\r\nI think I identified a typo based on a comment and the logic of the code itself.\r\n\r\nIn \"adapt_bbox\" from \"layout_utils.py\", there are three lines at the first function indentation level:\r\n`if not (cluster[\"type\"] in [DocItemLabel.TABLE, DocItemLabel.PICTURE]):`;\r\n`if cluster[\"type\"] == DocItemLabel.PICTURE:` and\r\n`else:  ## A table`\r\n\r\nBased on the comment `## A table` and the fact that there is to my understanding other classes that TABLE and PICTURES leading to a re-definition of `new_bbox` in the else statement when handling a cluster's class different from a table and a picture, I think the second `if` is meant to be an `elif` keyword., i.e. we would write:\r\n`elif cluster[\"type\"] == DocItemLabel.PICTURE:`\r\n\r\nAm I right ?\r\n\r\nThank you for this great tool by the way :)\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/362/comments",
    "author": "Raphilanthrope",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-18T14:19:58Z",
        "body": "@Raphilanthrope Make a quick PR with the fix, this could indeed be a bug."
      },
      {
        "user": "cau-git",
        "created_at": "2024-12-18T11:33:11Z",
        "body": "@Raphilanthrope This is obsolete since docling 2.13.0 because the layout_utils code is entirely replaced. "
      }
    ]
  },
  {
    "number": 359,
    "title": "export_to_markdown page separator",
    "created_at": "2024-11-18T09:10:28Z",
    "closed_at": "2024-11-18T17:34:39Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/359",
    "body": "Markdown does not have the concept of a \"page\" but for further processing of the output I need to be able to split the output of export_to_markdown per page. Is it possible to add a parameter to this function that lets you specify a page delimiter? I know there is a delim parameter but this is a delimiter between every item in the doc.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/359/comments",
    "author": "GermeauSimon",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-11-18T17:34:39Z",
        "body": "We usually suggest to first use the document as DoclingDocument, where you can access all details. Any export (markdown, etc) will always be lossy.\r\n\r\nWe are anyway adding markers for pages in the markdown export. This is tracked in #309, so we will close this one and move other discussions there."
      }
    ]
  },
  {
    "number": 346,
    "title": "Analyzing PDf files is too slow",
    "created_at": "2024-11-15T07:59:31Z",
    "closed_at": "2024-11-18T08:50:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/346",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\n...\r\nI have a need right now to just get the content of the pdf, but analyzing the file is too slow\r\n4M file took 34 seconds\r\n63M file took more than 1 hour.\r\nPlease have to improve the speed of the method?\r\nAlso confirm that the GPU is used by default? I found that there is no loss of GPU in use.\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/346/comments",
    "author": "langzichai",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-16T07:46:34Z",
        "body": "@langzichai If you can, please share the pdf-files, so we can test. If you can not share, please let us know what the current compute setup is (cpu/gpu specs, RAM, etc).\r\n\r\nWe will soon publish a technical report with reference timings, so you can validate your observations."
      }
    ]
  },
  {
    "number": 336,
    "title": "Fix documentation: DocumentStream gets parameter 'name' and not 'filename'",
    "created_at": "2024-11-14T08:33:58Z",
    "closed_at": "2024-11-14T08:47:23Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/336",
    "body": "The current doc file: docling/docs/usage.md has wrong instructions:\r\n```\r\nsource = DocumentStream(filename=\"my_doc.pdf\", stream=buf)\r\n```\r\n\r\nShould be:\r\n```\r\nsource = DocumentStream(name=\"my_doc.pdf\", stream=buf)\r\n```",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/336/comments",
    "author": "tsurelad",
    "comments": [
      {
        "user": "vagenas",
        "created_at": "2024-11-14T08:47:24Z",
        "body": "Thanks, closing issue as already reported in #331. It is being fixed in #332."
      }
    ]
  },
  {
    "number": 331,
    "title": "Fix documentation for DocumentStream in usage.md",
    "created_at": "2024-11-13T18:01:13Z",
    "closed_at": "2024-11-14T12:20:48Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/DS4SD/docling/issues/331",
    "body": "### Bug\r\nThe documentation for DocumentStream in the \"Convert from binary PDF streams\" contains some wrong naming.\r\n\r\n```python\r\nfrom io import BytesIO\r\nfrom docling.datamodel.base_models import DocumentStream\r\nfrom docling.document_converter import DocumentConverter\r\n\r\nbuf = BytesIO(your_binary_stream)\r\nsource = DocumentStream(name=\"my_doc.pdf\", stream=buf)\r\nconverter = DocumentConverter()\r\nresult = converter.convert(source)\r\n```\r\ninstead of\r\n\r\n```python\r\nfrom io import BytesIO\r\nfrom docling.datamodel.base_models import DocumentStream\r\nfrom docling.document_converter import DocumentConverter\r\n\r\nbuf = BytesIO(your_binary_stream)\r\nsource = DocumentStream(filename=\"my_doc.pdf\", stream=buf)\r\nconverter = DocumentConverter()\r\nresult = converter.convert(source)\r\n```\r\n\r\n...\r\n\r\n### Steps to reproduce\r\nRan the example and got a Pydantic error.\r\n...\r\n\r\n### Docling version\r\nDocling version: 2.5.2\r\n...\r\n\r\n### Python version\r\nPython 3.12.7\r\n...\r\n\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/331/comments",
    "author": "capsenz",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-14T12:20:48Z",
        "body": "Well spotted and thanks for the fix."
      }
    ]
  },
  {
    "number": 321,
    "title": "Can you integrate with new alternative OCR such as Surya OCR, Please ",
    "created_at": "2024-11-13T02:48:21Z",
    "closed_at": "2024-11-13T08:22:38Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/321",
    "body": "### Requested feature\r\n<!-- Describe the feature you have in mind and the user need it addresses. -->\r\n...\r\n\r\n### Alternatives\r\n<!-- Describe any alternatives you have considered. -->\r\n...\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/321/comments",
    "author": "Teera21",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-13T08:22:38Z",
        "body": "@Teera21 Please elaborate in the issue what you want specifically. In general, yes, we can expand with other OCR engines. However, we need to be careful with regard to the license. \r\n\r\nSurya is GPL, so this is a no-go for us. We want to have a commercial friendly license. I believe in the medium-long run, we will need to have a docling-ocr. If you (or anybody reading this issue) want to collaborate on that, happy to have a conversation. "
      }
    ]
  },
  {
    "number": 267,
    "title": "Can't find a way to use `ImageRefMode.EMBEDDED` in `generate_multimodal_pages`",
    "created_at": "2024-11-07T07:07:05Z",
    "closed_at": "2025-01-30T06:31:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/267",
    "body": "### Question\r\n<!-- Describe what you would like to achieve and which part you need help with. -->\r\n\r\nI tried using the generate_multimodal_pages method from the official documentation example and attempted to apply it. I wanted to export `content_md` with `ImageRefMode.EMBEDDED`, but this appears to be a legacy version, and I can't find a way to use `ImageRefMode.EMBEDDED`.\r\n\r\n```\r\ndef _process_page():\r\n    page_ix = page_no - 1\r\n    page = doc_result.pages[page_ix]\r\n\r\n    page_cells = _process_page_cells(page=page)\r\n    page_segments = _process_page_segments(doc_items=doc_items, page=page)\r\n    content_md = doc.export_to_markdown(main_text_start=start_ix, main_text_stop=end_ix)\r\n    # No page-tagging since we only process one page at a time\r\n    content_dt = doc.export_to_document_tokens(\r\n        main_text_start=start_ix, main_text_stop=end_ix, add_page_index=False\r\n    )\r\n```\r\nDo you have any suggestions for using this? It seems that the main issue is that the `export_to_markdown` method in `DoclingDocument` doesn’t support the parameters `main_text_start` and `main_text_stop`.\r\n\r\n<!-- ⚠️ ATTENTION: When sharing screenshots, attachments, or other data make sure not to include any sensitive information. -->\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/267/comments",
    "author": "sunwoongc",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-11-11T09:20:06Z",
        "body": "Thanks for the report, we will have a look and first update the examples."
      },
      {
        "user": "dolfim-ibm",
        "created_at": "2025-01-30T06:31:00Z",
        "body": "I'm closing this issue in favour of a broader story in #835. New examples for multimodal exports and datasets creation are coming."
      }
    ]
  },
  {
    "number": 252,
    "title": "Streamline the dependence, the dependence is too heavy now",
    "created_at": "2024-11-06T03:52:00Z",
    "closed_at": "2024-11-18T08:56:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/252",
    "body": "### Question\r\n\r\nCan it streamlined? The current dependence is too heavy, allowing users to install a specific module as required.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/252/comments",
    "author": "Undertone0809",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-06T04:02:21Z",
        "body": "@Undertone0809 Can you explain a bit more in detail. We are in general very open to these type of requests, but we would need to understand first what \"modules\" you have in mind."
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-18T08:56:36Z",
        "body": "No follow up, will close for now."
      }
    ]
  },
  {
    "number": 244,
    "title": "OCR Extracted Information",
    "created_at": "2024-11-05T10:36:24Z",
    "closed_at": "2024-11-18T06:32:41Z",
    "labels": [
      "question",
      "ocr"
    ],
    "url": "https://github.com/DS4SD/docling/issues/244",
    "body": "Hi, where does OCR extracted information is stored ? I cant see it in output object or is it attached with specific tags ? Thanks",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/244/comments",
    "author": "maliktalha370",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-06T09:16:44Z",
        "body": "@maliktalha370 Can you please elaborate on what your expectations would be? The text information we output in JSON or Markdown is both the programmatic text embedded in PDFs, and the OCR text in the places where bitmaps were found. We don't have an indication which text was recognized by OCR and which text was from programmatic PDF content. Is this what you are asking?"
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-11T09:30:38Z",
        "body": "@maliktalha370 Could you reply to the reply of @cau-git? We are trying to understand, otherwise we need to close it."
      },
      {
        "user": "maliktalha370",
        "created_at": "2024-11-18T06:32:41Z",
        "body": "Yes @cau-git @PeterStaar-IBM This was I was trying to understand that whether we can identify in anyway which information is extracted from ocr and which one is from parser.  If there's any tag assigned for ocr extracted text, It would be really great. Overall your answer satisfies my question. Thanks !"
      }
    ]
  },
  {
    "number": 236,
    "title": "Support extraction of text formattings (bold, underline, strikethroughs, etc.)",
    "created_at": "2024-11-04T19:38:10Z",
    "closed_at": "2024-11-06T09:29:10Z",
    "labels": [
      "priority:low"
    ],
    "url": "https://github.com/DS4SD/docling/issues/236",
    "body": "I ran `docling my_file.pdf` which has texts with underlines/strikethroughs etc.  I don't see these in the output md.  Is this supported?",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/236/comments",
    "author": "knguyen1",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-06T09:29:00Z",
        "body": "@knguyen1 Currently, this is not supported and it was not a design priority so far. The reason is that we prioritize correctly representing content, but not styling/visuals. We may revisit this in the future if our roadmap permits."
      },
      {
        "user": "knguyen1",
        "created_at": "2024-11-06T14:40:41Z",
        "body": "Thanks.  I would argue this is more than styling.  I work with legal documents and our dept uses strikethroughs/bolds/underlines all the time.  Without this feature, I can't accurately get raw text contents."
      }
    ]
  },
  {
    "number": 176,
    "title": " ExportedCCSDocument.export_to_document_tokens() got an unexpected keyword argument 'page_tagging'",
    "created_at": "2024-10-24T18:17:01Z",
    "closed_at": "2024-10-25T16:36:38Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/176",
    "body": "\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/ar/r/synthesis-extration/src/batch_convert.py\", line 84, in <module>\r\n    main(sys.argv[1], sys.argv[2])\r\n  File \"/Users/ar/r/synthesis-extration/src/batch_convert.py\", line 72, in main\r\n    res = export_documents(results, output_dir = Path(outfolder))\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/ar/r/synthesis-extration/src/batch_convert.py\", line 38, in export_documents\r\n    fp.write(conv_res.render_as_doctags())\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/ar/r/synthesis-extration/venv/lib/python3.12/site-packages/docling/datamodel/document.py\", line 376, in render_as_doctags\r\n    return self.output.export_to_document_tokens(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: ExportedCCSDocument.export_to_document_tokens() got an unexpected keyword argument 'page_tagging'\r\n```",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/176/comments",
    "author": "arademaker",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-10-25T06:41:09Z",
        "body": "From your code snippet I see you are using the v1 version. Would you be able to upgrade to the v2? I just verified the example code and the export to document_tokens there is working without any issue."
      },
      {
        "user": "arademaker",
        "created_at": "2024-10-25T16:36:38Z",
        "body": "I will try to adapt the code. Thank you"
      }
    ]
  },
  {
    "number": 174,
    "title": "In the Markdown export, we need to escape \"_\" underscore symbol",
    "created_at": "2024-10-24T14:56:31Z",
    "closed_at": "2024-10-29T09:29:54Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/174",
    "body": "Underscore symbol is used in Markdown syntax, hence when regular text contains underscores `\"_\"` we need to escape them properly",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/174/comments",
    "author": "maxmnemonic",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-10-29T09:29:54Z",
        "body": "Addressed in v2.2.1"
      }
    ]
  },
  {
    "number": 155,
    "title": "docs: typo fix",
    "created_at": "2024-10-17T12:43:19Z",
    "closed_at": "2024-10-18T11:56:48Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/pull/155",
    "body": "## Description\r\nThis pull request addresses spelling errors in the README file of our project.\r\n\r\n## Changes Made\r\n- Corrected spelling of invidual to automatic\r\n\r\n\r\n## Checklist\r\n- [x] I have reviewed my changes for any additional typos\r\n- [x] The README still renders correctly in markdown\r\n- [x] No code changes were made in this PR\r\n\r\n## Additional Information:\r\nThis fix is not related to any existing issue. It's a minor typo that I noticed while reviewing the README.\r\n\r\nThank you for considering this contribution.\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/155/comments",
    "author": "fadkeabhi",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-10-17T13:25:23Z",
        "body": "Thanks for the fix"
      },
      {
        "user": "dolfim-ibm",
        "created_at": "2024-10-17T16:16:28Z",
        "body": "@fadkeabhi we had to make some CI updates in `main`, do you mind updating your PR with the latest version of `main`?"
      }
    ]
  },
  {
    "number": 126,
    "title": "Categorise table of contents as a new category",
    "created_at": "2024-10-04T10:23:53Z",
    "closed_at": "2024-11-11T09:53:50Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/126",
    "body": "## Context\r\n\r\nWe were building a RAG based solution and it involves lots of PDF file ingestion. So we tried integrating docling and it is doing a great job in PDF parsing and esp. table extraction.\r\n\r\n## Expectation \r\n\r\nIt was cleaning up all the header and footer in a file, which is what we needed as a part of cleanup. \r\n\r\n## Feature requirement\r\nWith respect to our knowledge base, we have files with lots of table of content (ToC) kind of pages. Ingesting them creates lots of noise during retrieval. When connected with @cau-git, he mentioned ToC related pages can be added as a new category instead of falling under tables.\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/126/comments",
    "author": "tskvivekmani",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-11T09:53:50Z",
        "body": "This is part of the layout discussion, will close for now, but not forgotten."
      }
    ]
  },
  {
    "number": 113,
    "title": "Missing ONNX file",
    "created_at": "2024-09-27T18:09:29Z",
    "closed_at": "2024-09-30T17:28:10Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/113",
    "body": "```\r\n# Initialize the DocumentConverter with the specified options\r\ndoc_converter = DocumentConverter(\r\n    artifacts_path=model_file_path,\r\n    pipeline_options=pipeline_options\r\n)\r\n```\r\n\r\nthat specifically throws the error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 54, in __init__\r\n    self.model_pipeline = pipeline_cls(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/pipeline/standard_model_pipeline.py\", line 24, in __init__\r\n    LayoutModel(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/models/layout_model.py\", line 46, in __init__\r\n    self.layout_predictor = LayoutPredictor(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling_ibm_models/layoutmodel/layout_predictor.py\", line 98, in __init__\r\n    raise FileNotFoundError(\"Missing ONNX file: {}\".format(self._onnx_fn))\r\nFileNotFoundError: Missing ONNX file: /home/user/.cache/huggingface/hub/models--ds4sd--docling-models/snapshots/ae5a4eedb278abbd529aadd4a9d1091f4ea07291/model_artifacts/layout/beehive_v0.0.5/model.pt/model_artifacts/layout/beehive_v0.0.5/model.pt\r\n```",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/113/comments",
    "author": "thistleknot",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-09-30T07:34:21Z",
        "body": "@thistleknot Could you please report what is in your variable `model_file_path`? You can also remove the `artifacts_path` argument entirely and it should work."
      },
      {
        "user": "thistleknot",
        "created_at": "2024-09-30T17:28:10Z",
        "body": "I had a hard coded path to where the .pt file was (after doing a .find for it), but your suggestion worked.  I simply removed the artificats parm.  You might want to update the readme to reflect this, as you have a parm with no definition."
      },
      {
        "user": "kbruegge",
        "created_at": "2025-02-01T20:30:36Z",
        "body": "Hey @cau-git,\n\nI'm having the same issue after a fresh install and executing the example snippet from the README.\n\n```\n<full_path_here>.venv/lib/python3.12/site-packages/docling_ibm_models/layoutmodel/layout_predictor.py\", line 96, in __init__\n    raise FileNotFoundError(\"Missing ONNX file: {}\".format(self._onnx_fn))\nFileNotFoundError: Missing ONNX file: <home_dir>.cache/huggingface/hub/models--ds4sd--docling-models/snapshots/36bebf56681740529abd09f5473a93a69373fbf0/model_artifacts/layout/beehive_v0.0.5/model.pt\n```\n\nI'm on MacOS 15.2 and I'm using `uv` for managing the venv.  Any ideas? Let me know if you need more information."
      }
    ]
  },
  {
    "number": 89,
    "title": "UnboundLocalError and Loss of Data from Multiple Documents",
    "created_at": "2024-09-19T09:17:45Z",
    "closed_at": "2025-01-31T09:02:59Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/89",
    "body": "Description:\r\n\r\nThe current implementation of the Export multimodal Docling Example (`examples/export_multimodal.py`) has two issues:\r\n1. UnboundLocalError: When no documents are successfully converted, the rows list is not initialized, resulting in an UnboundLocalError when trying to normalize the data into a DataFrame.\r\n2. Loss of data from multiple documents: The rows list is reinitialized inside the loop that processes each document. This causes the data from previous documents to be discarded, keeping only the data from the last converted document.\r\n\r\nExpected Behavior:\r\n\r\n- The rows list should accumulate the data from all successfully converted documents.\r\n- If no documents are successfully converted, the script should handle this gracefully and not raise an UnboundLocalError.\r\n\r\nSuggested Fix:\r\n\r\n- Move the initialization of the rows list outside the loop so that it collects data from all documents.\r\n- Add a check before normalizing the rows into a DataFrame to ensure that the list is not empty.\r\n\r\nOriginal code:\r\n```\r\nrows = []  # This is inside the document loop\r\n\r\nfor (\r\n    content_text,\r\n    content_md,\r\n    content_dt,\r\n    page_cells,\r\n    page_segments,\r\n    page,\r\n) in generate_multimodal_pages(doc):\r\n    # Rows are appended here, but this only keeps data for the current document\r\n    ...\r\n```\r\n\r\nSuggested Fix:\r\n```\r\n# Initialize rows before the loop\r\nrows = []\r\n\r\nfor doc in converted_docs:\r\n    if doc.status != ConversionStatus.SUCCESS:\r\n        continue  # Log failures\r\n    for (\r\n        content_text,\r\n        content_md,\r\n        content_dt,\r\n        page_cells,\r\n        page_segments,\r\n        page,\r\n    ) in generate_multimodal_pages(doc):\r\n        rows.append( ... )  # Now rows accumulate data from all documents\r\n```",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/89/comments",
    "author": "imene-swaan",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2025-01-31T09:02:59Z",
        "body": "This seems to be outdated by now, the given example only demonstrates how to convert a single file, so no document loop is necessary. Closing."
      }
    ]
  },
  {
    "number": 25,
    "title": "Add scale as an optional parameter for get_text_in_rect call",
    "created_at": "2024-08-07T09:36:57Z",
    "closed_at": "2024-10-22T11:54:53Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/25",
    "body": "Backends `pypdfium` and `docling_parse` expose method - `get_text_in_rect`.\r\nBy given bbox user can receive programmatic PDF text.\r\nWe have page `scale` parameter that can be changed, and we need to introduce it as an optional parameter to `get_text_in_rect`, so that bbox coordinates can be correctly re-computed for text extraction in case scale is not 1.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/25/comments",
    "author": "maxmnemonic",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-10-22T11:54:53Z",
        "body": "As discussed with @maxmnemonic @cau-git , not needed anymore"
      }
    ]
  },
  {
    "number": 24,
    "title": "Make simple example that uses OCR",
    "created_at": "2024-08-07T09:33:02Z",
    "closed_at": "2024-08-21T14:32:02Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/24",
    "body": "We need to create a simple example on how to use OCR in Docling",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/24/comments",
    "author": "maxmnemonic",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-08-21T14:32:02Z",
        "body": "OCR is turned on by default since v1.6.0, closing this."
      }
    ]
  },
  {
    "number": 23,
    "title": "Update name of the parameter \"table_structure_options.do_cell_matching\" to better reflect meaning",
    "created_at": "2024-08-07T09:26:15Z",
    "closed_at": "2024-10-22T11:54:20Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/23",
    "body": "Currently from it's name it is unclear what it should do, and we need to give it a better name.\r\nActutal meaning:\r\n\r\n**do_cell_matching = True** - TableModel uses page cells, generated by parser, for post processing and cell text matching.\r\n- True - is default.\r\n- Post processing improves structure recognition in many difficult cases for tables.\r\n- This should be used with `docling_parse_backend`\r\n\r\n**do_cell_matching = False** - TableModel doesn't do post-processing.\r\n- TableModel uses inferred table-cells bboxes to request PDF backend a text from given bbox.\r\n- This should be used with `pypdfium2_backend`.\r\n- Make sure it's `False` when OCR enabled, otherwise PDF backend will return empty string on a given bbox, because there are no programmatic cells with text.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/23/comments",
    "author": "maxmnemonic",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-10-22T05:47:37Z",
        "body": "@maxmnemonic @cau-git Is this something we can close with the docling-core v2?"
      },
      {
        "user": "maxmnemonic",
        "created_at": "2024-10-22T08:17:47Z",
        "body": "Looking at it..."
      },
      {
        "user": "maxmnemonic",
        "created_at": "2024-10-22T09:13:26Z",
        "body": "@PeterStaar-IBM, @cau-git, I have a better name - `respect_pdf_cell_boundaries`, that would reflect its meaning better.\r\n\r\nHowever this parameter largely not in use, by default it's enabled, because our `docling-parse` works fine and produces good and discreet PDF cells. So I propose we don't change it, and close the issue."
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-10-22T11:54:20Z",
        "body": "@maxmnemonic @cau-git "
      }
    ]
  }
]