[
  {
    "number": 1115,
    "title": "Handle OpenAI-like requests with prompt but no messages",
    "created_at": "2025-02-19T22:15:45Z",
    "closed_at": "2025-02-20T08:58:32Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1115",
    "body": "Some OpenAI-like requests, typically FIM requests don't set any messages, but instead set the `prompt` field. Let's add a wrapper Message-like structure with the right API so that the caller can use it to reach to the ChatCompletionMessage and set the prompt when handling FIM.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1115/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-19T22:16:25Z",
        "body": "@blkt please treat this more like a draft. The PR works fine, but i'm not sure especially about handling of prompt vs. messages in the other methods of ChatCompletionRequest. Let's discuss."
      },
      {
        "user": "blkt",
        "created_at": "2025-02-20T06:32:13Z",
        "body": "You're right, LLMs like llamacpp use OpenAI's legacy endpoints and request formats, I added the classes yesterday.\n\nLet's discuss the integration later today."
      },
      {
        "user": "blkt",
        "created_at": "2025-02-20T08:58:32Z",
        "body": "TL;DR: we'll use the `Legacy*` classes."
      }
    ]
  },
  {
    "number": 1093,
    "title": "Move SQLite note to correct part of docs",
    "created_at": "2025-02-18T15:37:00Z",
    "closed_at": "2025-02-18T20:13:03Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1093",
    "body": "This was added under the UI setup steps by mistake.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1093/comments",
    "author": "dmjb",
    "comments": [
      {
        "user": "danbarr",
        "created_at": "2025-02-18T19:46:21Z",
        "body": "Thanks, this fixed my build problems too ðŸ˜„ "
      }
    ]
  },
  {
    "number": 1088,
    "title": "Add support for runtime override of dashboard url.",
    "created_at": "2025-02-18T11:57:08Z",
    "closed_at": "2025-02-19T12:43:08Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1088",
    "body": "I opened this PR to discuss whether we want to do it and, if so, to keep it as simple as possible.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1088/comments",
    "author": "blkt",
    "comments": [
      {
        "user": "davolokh",
        "created_at": "2025-02-19T08:56:18Z",
        "body": "agree, looks like a pragmatic solution"
      }
    ]
  },
  {
    "number": 1065,
    "title": "Pin the docker images for python and node",
    "created_at": "2025-02-14T16:59:45Z",
    "closed_at": "2025-02-15T08:31:33Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1065",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1065/comments",
    "author": "rdimitrov",
    "comments": [
      {
        "user": "JAORMX",
        "created_at": "2025-02-14T17:39:24Z",
        "body": "Did you use frizbee? ðŸ˜€ "
      },
      {
        "user": "rdimitrov",
        "created_at": "2025-02-17T10:38:15Z",
        "body": "> Did you use frizbee? ðŸ˜€\r\n\r\nI did actually ðŸ˜„ "
      }
    ]
  },
  {
    "number": 1064,
    "title": "Modify to use GPU (if available) for embedding",
    "created_at": "2025-02-14T16:22:37Z",
    "closed_at": "2025-02-14T19:59:57Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1064",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1064/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-02-14T17:17:59Z",
        "body": "Could I get a little more context Pankaj, is this meaning its using metal or cuda (or both)?"
      },
      {
        "user": "ptelang",
        "created_at": "2025-02-14T20:04:07Z",
        "body": "> Could I get a little more context Pankaj, is this meaning its using metal or cuda (or both)?\r\n\r\nIt will use either metal or cuda, whichever is available. The actual implementation of using the GPU is in llama.cpp. GPU was not getting used since codegate was not passing a parameter to the llama.cpp call. This PR fixes the issue by passing that parameter. "
      },
      {
        "user": "JAORMX",
        "created_at": "2025-02-14T22:19:51Z",
        "body": "Good find @ptelang !"
      }
    ]
  },
  {
    "number": 1009,
    "title": "Pin pyproject to require python 3.12",
    "created_at": "2025-02-11T08:05:21Z",
    "closed_at": "2025-02-12T09:52:18Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/1009",
    "body": "Some dependencies (namely presidio) don't support python 3.13 yet.\n\nSigned-off-by: Juan Antonio Osorio <ozz@stacklok.com>\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/1009/comments",
    "author": "JAORMX",
    "comments": [
      {
        "user": "JAORMX",
        "created_at": "2025-02-12T09:44:13Z",
        "body": "We need someone else to approve "
      },
      {
        "user": "rdimitrov",
        "created_at": "2025-02-12T09:46:41Z",
        "body": "@JAORMX - waiting for the CI! ðŸ˜ƒ \r\n"
      }
    ]
  },
  {
    "number": 995,
    "title": "[Task]: Enable the integration tests for openrouter",
    "created_at": "2025-02-10T11:20:31Z",
    "closed_at": "2025-02-11T16:04:05Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/stacklok/codegate/issues/995",
    "body": "### Description\n\nThis is just about adding the openrouter provider to the list of providers and adding the API token as a secret.\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/995/comments",
    "author": "rdimitrov",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-10T20:03:14Z",
        "body": "ah, thank you, I meant to ping you tomorrow when I'm back from the 1-day break. Feel free to ping me if anything doesn't work, but at least locally it was enough to run the integration tests with the key exported as an evironment variable. FWIW, I don't recommend running the reasoning models for tests if we need to run them fast, on the other hand, it would be nice to have some test coverage for a reasoning model especially if we also fix #977 "
      }
    ]
  },
  {
    "number": 980,
    "title": "OpenRouter providers don't work for FIM in Continue",
    "created_at": "2025-02-07T09:30:42Z",
    "closed_at": "2025-02-19T10:34:18Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/stacklok/codegate/issues/980",
    "body": "Chat works fine, but not FIM",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/980/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-07T14:38:38Z",
        "body": "I'm a bit stuck on this and would like to ask for help - I don't see the completion in continue despite it going fine from codegate and I have trouble debugging continue :-/"
      },
      {
        "user": "jhrozek",
        "created_at": "2025-02-12T14:07:58Z",
        "body": "I merged the partial fixes, but for some reason FIM doesn't show up in continue. I will move the task back to backlog as I'm working on removing litellm types now."
      },
      {
        "user": "aponcedeleonch",
        "created_at": "2025-02-19T10:34:18Z",
        "body": "Solved via #1097"
      }
    ]
  },
  {
    "number": 979,
    "title": "Update OpenAPI",
    "created_at": "2025-02-07T09:19:17Z",
    "closed_at": "2025-02-07T09:19:49Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/979",
    "body": "This PR updates the OpenAPI definition to the version generated from ref bebec22eb42b04ae7a84538e6af0eb05034f656f",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/979/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2025-02-07T09:19:49Z",
        "body": "Changes merged in #978 "
      }
    ]
  },
  {
    "number": 964,
    "title": "Update OpenAPI",
    "created_at": "2025-02-06T16:17:05Z",
    "closed_at": "2025-02-06T16:23:46Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/964",
    "body": "This PR updates the OpenAPI definition to the version generated from ref 52a0f104de1a883695735f47c25da9754b737f15",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/964/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2025-02-06T16:23:46Z",
        "body": "Changes already merged in #965 and #961"
      }
    ]
  },
  {
    "number": 954,
    "title": "Add integration tests for redacting secrets from chat",
    "created_at": "2025-02-06T13:21:23Z",
    "closed_at": "2025-02-07T12:51:53Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/954",
    "body": "The following PR adds tests for redacting secrets to all providers from chat.\r\n\r\nFixes: #952 ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/954/comments",
    "author": "rdimitrov",
    "comments": [
      {
        "user": "rdimitrov",
        "created_at": "2025-02-06T14:39:01Z",
        "body": "I think I should comment the vllm redacting secret test or use our hosted vllm server otherwise the integration tests will take around 40minutes to complete and that's not practical."
      },
      {
        "user": "jhrozek",
        "created_at": "2025-02-07T09:44:24Z",
        "body": "> I think I should comment the vllm redacting secret test or use our hosted vllm server otherwise the integration tests will take around 40minutes to complete and that's not practical.\r\n\r\nPlease do, the redaction shouldn't be depending on the provider anyway"
      }
    ]
  },
  {
    "number": 944,
    "title": "[Task]: Add rules to match by type of request, i.e. chat or FIM",
    "created_at": "2025-02-05T16:23:44Z",
    "closed_at": "2025-02-11T12:52:57Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/stacklok/codegate/issues/944",
    "body": "### Description\n\nThis is a low hanging fruit that can be implemented with our initial set of rules\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/944/comments",
    "author": "aponcedeleonch",
    "comments": [
      {
        "user": "JAORMX",
        "created_at": "2025-02-11T12:52:57Z",
        "body": "This is done"
      }
    ]
  },
  {
    "number": 919,
    "title": "Pii Pipeline",
    "created_at": "2025-02-04T19:32:34Z",
    "closed_at": "2025-02-10T18:38:59Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/919",
    "body": "Initial implementation of the PII pipelline",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/919/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-06T11:43:26Z",
        "body": "I also see a bunch of these in the logs:\r\n```\r\n2025-02-06T11:42:45.266370Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: es, registry supported la\r\nnguages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils.py\r\n2025-02-06T11:42:45.268406Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: it, registry supported languages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils\r\n.py                                                                                                                                                                                         2025-02-06T11:42:45.270470Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: pl, registry supported la\r\nnguages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils.py\r\n```"
      },
      {
        "user": "lukehinds",
        "created_at": "2025-02-10T13:10:41Z",
        "body": "> I also see a bunch of these in the logs:\r\n> \r\n> ```\r\n> 2025-02-06T11:42:45.266370Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: es, registry supported la\r\n> nguages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils.py\r\n> 2025-02-06T11:42:45.268406Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: it, registry supported languages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils\r\n> .py                                                                                                                                                                                         2025-02-06T11:42:45.270470Z [warning  ] Recognizer not added to registry because language is not supported by registry - CreditCardRecognizer supported languages: pl, registry supported la\r\n> nguages: en lineno=119 module=recognizers_loader_utils pathname=/Users/jakub/devel/codegate/venv/lib/python3.12/site-packages/presidio_analyzer/recognizer_registry/recognizers_loader_utils.py\r\n> ```\r\n\r\nWe can ignore these. "
      }
    ]
  },
  {
    "number": 918,
    "title": "CodeGate as an \"Operating system\" for AI",
    "created_at": "2025-02-04T16:00:09Z",
    "closed_at": "2025-02-10T13:22:06Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/918",
    "body": "## What is this idea about\n\nThis idea is based on a comparison of OpenRouter and CodeGate. There are some similarities between OpenRouter and CodeGate (such as being able to route requests between different models), but OpenRouter is running in the cloud and seems to be a bit more focused on developing apps, whereas CodeGate is more useful for end users.\n\nThe reason I am using \"Operating system\" as an analogy is because there are some features that are analogous, and positioning it as an operating system could both drive the creation of new ideas as well as make it simpler to explain CodeGate's features to users.\n\nSome analogies:\n\n| Operating system                        | CodeGate                                               |\n|-----------------------------------------|--------------------------------------------------------|\n| Installing applications                 | \"Installing\" models                                    |\n| Installing peripherals                  | Connecting apps to CodeGate                            |\n| Choosing default App for file types     | Choosing default model for different files             |\n| Collecting error logs                   | Collecting security logs                               |\n| Measuring performance                   | Measuring costs                                        |\n| Connecting different apps through files | Connecting AI plugins with models through our pipeline |\n| App store/package manager               | List of available models through providers             |\n| File manager                            | Custom Prompt template manager                         |\n| Antivirus                               | Dependency insights                                    |\n| Encrypted messaging                     | Secret leak prevention                                 |\n\n\n\n## How do I imagine this idea playing out in practice?\n\nI would imagine that:\n\n- We would be aiming to replace OpenRouter for \"end users\" that is, people who use AI for code generation and similar features. This mean leaning into cost savings features, reliability features and heuristics for choosing models. This could help us position CodeGate as an \"essential tool\" for managing different AI applications in complex scenarios\n- We would think about ways to use this analogy to explain CodeGate to users\n- We would be leaning into the analogy of it being an operating system more, and use this as inspiration for more feature ideas. This could include ideas such as understanding CodeGate integrations as \"drivers\" for peripherals and providing an interface to install them. Or having a \"plugin store\" for different plugins that integrate into CodeGate's pipeline feature",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/918/comments",
    "author": "kantord",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-02-04T17:52:50Z",
        "body": "I am not sure about this, as said in slack, the real reason people use openrouter is because they want to connect to multiple service providers but only have one account to open and add credits too. when they do so, openerouter crowd sources buying the tokens, so you get them a bit cheaper then you would going direct to anthropic etc. Its value is really 'we are cheaper then going direct to openai / anthropic, by using lots of users to bulk buy at high volume'"
      },
      {
        "user": "kantord",
        "created_at": "2025-02-05T09:40:10Z",
        "body": "> I am not sure about this, as said in slack, the real reason people use openrouter is because they want to connect to multiple service providers but only have one account to open and add credits too. when they do so, openerouter crowd sources buying the tokens, so you get them a bit cheaper then you would going direct to anthropic etc. Its value is really 'we are cheaper then going direct to openai / anthropic, by using lots of users to bulk buy at high volume'\n\nYou are right, the aspect of crowd sourcing the tokens is an aspect that I didn't consider in this idea. Although - I am not sure of the business aspect here - it might as well be something we might do too ðŸ¤”\n\nSeems like some AI apps (like Cursor) are trying to become effectively a reseller of the tokens by charging users directly. In the case of cursor, some models are covered in a monthly fee, and many other AI tools charge a flat monthly free. So a \"single subscription\", as in, a single flat monthly fee that supports various different AI applications at the same time might be attractive to users who are already paying 2-3 subscriptions? "
      },
      {
        "user": "lukehinds",
        "created_at": "2025-02-05T12:33:40Z",
        "body": "Lets keep this issue open for now, it raises an interesting concept. \"open\"router is a very confusing name, when I first came across it I really thought it was an OSS project, but its a pretty decent revenue generating business (albeit they OSS quite a bit of their stuff)"
      },
      {
        "user": "lukehinds",
        "created_at": "2025-02-10T13:22:06Z",
        "body": "I will close for now if ok with you @kantord ? can always reopen if needed"
      }
    ]
  },
  {
    "number": 870,
    "title": "fix: add specific condition for Kodu in system prompt",
    "created_at": "2025-01-31T15:16:44Z",
    "closed_at": "2025-02-03T09:30:37Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/870",
    "body": "It is needed to stop the flow when talking about malicious packages or secrets leaked, otherwise kodu keeps iterating as it is not interpreting our warnings.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/870/comments",
    "author": "yrobla",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-03T08:03:29Z",
        "body": "We need to add this as one of the things for the client API though, this is just a temp fix"
      }
    ]
  },
  {
    "number": 850,
    "title": "all-minilm-L6-v2-q5_k_m.gguf corrupted?",
    "created_at": "2025-01-30T13:02:47Z",
    "closed_at": "2025-02-13T14:00:45Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/stacklok/codegate/issues/850",
    "body": "### Describe the issue\n\nI am unsure what has caused this, but whenever I switch back to main, the model is creating errors. I do wonder if this might be git-lfs related?\n\n```\n2025-01-30T12:58:20.037723Z [error    ] Error during search: Failed to load model from file: ./codegate_volume/models/all-minilm-L6-v2-q5_k_m.gguf lineno=259 module=storage_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/storage/storage_engine.py\n2025-01-30T12:58:20.037773Z [debug    ] Generating embedding           content=['\\n\\n'] content_length=2 lineno=80 model=all-minilm-L6-v2-q5_k_m.gguf module=inference_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/inference/inference_engine.py\n2025-01-30T12:58:20.037818Z [info     ] Loading model from ./codegate_volume/models/all-minilm-L6-v2-q5_k_m.gguf with parameters n_gpu_layers=0 and n_ctx=512 lineno=44 module=inference_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/inference/inference_engine.py\n2025-01-30T12:58:20.038381Z [error    ] Error during search: Failed to load model from file: ./codegate_volume/models/all-minilm-L6-v2-q5_k_m.gguf lineno=259 module=storage_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/storage/storage_engine.py\n2025-01-30T12:58:20.039424Z [debug    ] Generating embedding           content=['\\n\\n'] content_length=2 lineno=80 model=all-minilm-L6-v2-q5_k_m.gguf module=inference_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/inference/inference_engine.py\n2025-01-30T12:58:20.039875Z [info     ] Loading model from ./codegate_volume/models/all-minilm-L6-v2-q5_k_m.gguf with parameters n_gpu_layers=0 and n_ctx=512 lineno=44 module=inference_engine pathname=/Users/lhinds/repos/stacklok/codegate-repos/codegate/src/codegate/inference/inference_engine.py\n```\n\n### Steps to Reproduce\n\ngit checkout main , start the server\n\n### Operating System\n\nMacOS (Arm)\n\n### IDE and Version\n\nn/a\n\n### Extension and Version\n\nn/a\n\n### Provider\n\nAnthropic\n\n### Model\n\nn/a\n\n### Codegate version\n\nn/a\n\n### Logs\n\n_No response_\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/850/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2025-02-13T14:00:45Z",
        "body": "This was a `git lfs` issue. Closing"
      }
    ]
  },
  {
    "number": 832,
    "title": "Add client detection",
    "created_at": "2025-01-29T21:14:56Z",
    "closed_at": "2025-02-04T09:30:49Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/832",
    "body": "- **Add client detector interface** - Adds a decorator that can be added to the FastAPI handlers and detect the client from a fallback mechanism, by the user-agent, by a specific header or by a matching word in the messages. At the moment, the clients are represented as a simple enum, but in follow-up patches they will be represented by classes that can perform the changes by an interface providing callbacks from the pipeline or other places that need client-specific behaviour.\n- **Use the client type when streaming the data to the client, not when executing completion** - We used to special-case ollama stream generation by passing the client type to the execute_completion. Instead, let's pass the client type to the place that needs special casing using the recently introduce client type enum.\n- **Use the client type when instantiating and running provider pipelines** - Instead of detecting the client type again when the pipeline is being processed, let's pass the client type on instantiating the pipeline instance as a constant and replace the hardcoded client strings by just using the constants.\n- **Remove get_tool_name_from_messages** - This was superseded by using the client enum.\n- **Remove the is_copilot flag in favor of using the autodetected client** - In the copilot provider, we can hardcode the client type to copilot when instantiating the pipelines.\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/832/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-02-03T15:20:39Z",
        "body": "I rebased the branch and fixed some smallish issues along the way. Ready for a next round."
      },
      {
        "user": "jhrozek",
        "created_at": "2025-02-03T16:51:55Z",
        "body": "Good guy integration test, catching my bugs."
      },
      {
        "user": "lukehinds",
        "created_at": "2025-02-04T07:48:27Z",
        "body": "Good work @jhrozek , just needs a rebase. "
      }
    ]
  },
  {
    "number": 763,
    "title": "Update OpenAPI",
    "created_at": "2025-01-24T13:55:50Z",
    "closed_at": "2025-01-24T15:00:24Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/763",
    "body": "This PR updates the OpenAPI definition to the version generated from ref 17e2c334d968340bd25e31034e17b4db6ef15f21",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/763/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2025-01-24T15:00:24Z",
        "body": "No changes in this PR"
      }
    ]
  },
  {
    "number": 712,
    "title": "Fix `greenlet` dependency in poetry lock file.",
    "created_at": "2025-01-22T09:48:57Z",
    "closed_at": "2025-01-22T11:45:49Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/712",
    "body": "It looks like poetry on macOS does not install `greenlet`, while it does on Linux, both for version 1.8.4 and 2.0.1, which seems to be a bug. Additionally, failures only manifest after _using_ codegate, and not during startup.\r\n\r\nThis change adds `greenlet` package to `pyproject.toml`.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/712/comments",
    "author": "blkt",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-01-22T10:28:22Z",
        "body": "@dependabot rebase"
      }
    ]
  },
  {
    "number": 664,
    "title": "Add utilities to dump Copilot traffic.",
    "created_at": "2025-01-20T21:09:53Z",
    "closed_at": "2025-01-28T14:02:39Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/664",
    "body": "This change adds a utility routine to dump raw data tapped from the wire to multiple files in a temporary directory under the path specified via `CODEGATE_DUMP_DIR`.\r\n\r\nNo instrumentation is performed if `CODEGATE_DUMP_DIR` is `None`. The temporary directory is not deleted when the process exits.\r\n\r\nNOTE: the utility does not ensure the folder specified via `CODEGATE_DUMP_DIR` is writable, which might cause user-visible failures at startup.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/664/comments",
    "author": "blkt",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-01-24T08:36:30Z",
        "body": "@blkt great, thank you, can you take this out of draft so we can ack and merge? I'll add a similar utility to the cursor provider, just an inline copy for now, and once we refactor we can merge the two."
      }
    ]
  },
  {
    "number": 661,
    "title": "Scope dashboard GET endpoints by workspace",
    "created_at": "2025-01-20T15:24:05Z",
    "closed_at": "2025-01-21T10:43:13Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/stacklok/codegate/issues/661",
    "body": "Unsure on the best implementation here, whether it is:\n- leave existing API contract untouched, and implicitly filter prompts / messages by the active workspace ID\n- add optional query parameter to filter the prompts / messages by a provided workspace ID",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/661/comments",
    "author": "alex-mcgovern",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-01-21T08:58:36Z",
        "body": "ðŸ‘€  @JAORM @aponcedeleonch "
      },
      {
        "user": "JAORMX",
        "created_at": "2025-01-21T09:54:56Z",
        "body": "@alex-mcgovern given the recent changes, is this still valid?"
      },
      {
        "user": "JAORMX",
        "created_at": "2025-01-21T10:43:13Z",
        "body": "This was done already"
      }
    ]
  },
  {
    "number": 657,
    "title": "Implement basic soft deletion for workspaces",
    "created_at": "2025-01-20T12:35:34Z",
    "closed_at": "2025-01-20T15:27:37Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/657",
    "body": "this adds a `deleted_at` column to workspaces that implements a basic\nsoft-deletion mechanism. All relevant queries have been modified to reflect this.\n\nAt the moment, there is no hard deletion of workspaces; this will be\nimplemented in the future.\n\nWe also have no way of showing \"archived\" or \"soft-deleted\" workspaces.\nThis will come in due time.\n\nSigned-off-by: Juan Antonio Osorio <ozz@stacklok.com>\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/657/comments",
    "author": "JAORMX",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2025-01-20T15:17:46Z",
        "body": "I'm getting\r\n```\r\n \"Workspace._remove_workspace() takes 2 positional arguments but 3 were given\"\r\n```"
      }
    ]
  },
  {
    "number": 626,
    "title": "codegate-version command returning \"CodeGate version: unknown\"",
    "created_at": "2025-01-16T23:56:20Z",
    "closed_at": "2025-01-20T07:48:13Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/stacklok/codegate/issues/626",
    "body": "### Describe the issue\n\nOn the current codegate:latest, using co-pilot integration, when I send codegate-version as a prompt, I receive \"CodeGate version: unknown\"\n\n### Steps to Reproduce\n\n- Update codegate to latest\n- Using previously existing co-pilot configuration\n- Verify codegate is working (redacting secrets, etc.)\n- Send prompt \"codegate-version\"\n- Receive response \"CodeGate version: unknown\"\n\n### Operating System\n\nMacOS (Arm)\n\n### IDE and Version\n\nVS Code 1.96.2\n\n### Extension and Version\n\nCopilot 1.257.0\n\n### Provider\n\nOpenAI\n\n### Model\n\nGPT 4o\n\n### Codegate version\n\nunknown \n\n### Logs\n\n_No response_\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/626/comments",
    "author": "wright-io",
    "comments": [
      {
        "user": "JAORMX",
        "created_at": "2025-01-17T11:06:21Z",
        "body": "This has already been solved as of yesterday morning, we just need a release."
      },
      {
        "user": "fuhengwu2021",
        "created_at": "2025-01-19T20:09:00Z",
        "body": "Got the same issue here. How was it solved? Any link?"
      },
      {
        "user": "JAORMX",
        "created_at": "2025-01-19T20:31:14Z",
        "body": "We will release on Monday."
      },
      {
        "user": "JAORMX",
        "created_at": "2025-01-20T07:48:13Z",
        "body": "Hey folks! This should be fixed in `v0.1.9`. Note that the command has changed to `codegate version` instead of `codegate version`. Cheers!"
      }
    ]
  },
  {
    "number": 611,
    "title": "Group workflows by trigger type and initial commit for the integration tests workflow",
    "created_at": "2025-01-16T10:28:15Z",
    "closed_at": "2025-01-20T09:40:33Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/611",
    "body": "The following PR bundles some of the existing workflows by trigger type and adds an initial workflow for the integration tests. \r\n\r\n**Changes:**\r\n* It adds 3 new workflows that run on PR, push to main and published release\r\n* Updates the existing workflows to be triggered by a workflow call and removes their existing triggers\r\n* Updates the README CI badge to refer to the new workflow\r\n* Adds a placeholder for the integration tests\r\n* Updates the small LLM used for the integration tests (for some reason this was needed, otherwise it was failing to load it)\r\n* Updates the integration tests to return zero vs non-zero codes in case 1 or more tests fail (needed to fail to CI job in such cases)\r\n\r\n**Reasoning:** \r\n* Treating workflows as functions (known as reusable workflows) and organising them like that makes it more visible what workflows are being run for each trigger type and also allows to easily extend this list in the future. \r\n* In this case this helps adding the integration tests more easily as it re-uses the container image built from the previous workflow and aims to re-use it in the integration steps by passing it as an artifact.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/611/comments",
    "author": "rdimitrov",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2025-01-16T21:39:03Z",
        "body": "this is looking great! Let's figure out the TLS errors tomorrow"
      },
      {
        "user": "jhrozek",
        "created_at": "2025-01-17T18:06:14Z",
        "body": "@rdimitrov not related to this patch, but iirc you mentioned on Slack that if one of these test cases fails the whole test run wouldn't fail, do we have an issue for that?"
      },
      {
        "user": "rdimitrov",
        "created_at": "2025-01-17T19:35:47Z",
        "body": "> @rdimitrov not related to this patch, but iirc you mentioned on Slack that if one of these test cases fails the whole test run wouldn't fail, do we have an issue for that?\r\n\r\nI don't think we have, but I should have fixed it as part of this PR (check the changes on `integration_tests.py`). If one or more tests fail now we'll return a non-zero code in oppose to before."
      },
      {
        "user": "jhrozek",
        "created_at": "2025-01-18T18:32:18Z",
        "body": "> > @rdimitrov not related to this patch, but iirc you mentioned on Slack that if one of these test cases fails the whole test run wouldn't fail, do we have an issue for that?\r\n> \r\n> I don't think we have, but I should have fixed it as part of this PR (check the changes on `integration_tests.py`). If one or more tests fail now we'll return a non-zero code in oppose to before.\r\n\r\nOh, I missed those, I was just reading the workflows. Sloppy review.."
      },
      {
        "user": "lukehinds",
        "created_at": "2025-01-20T07:16:50Z",
        "body": "@dependabot rebase"
      }
    ]
  },
  {
    "number": 587,
    "title": "Git SHAs are detected as AWS Secret Access Keys",
    "created_at": "2025-01-14T18:20:31Z",
    "closed_at": "2025-01-27T14:12:23Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/stacklok/codegate/issues/587",
    "body": "### Describe the issue\n\nGit SHAs and AWS Secret Access Keys match the same regex pattern. Unfortunately I don't think anything but the proposed enhancements to secrets detection context will solve for this, but documenting anyway.\n\nFor example, the `uses` line in this GitHub Actions workflow is being detected/alerted as an AWS secret:\n\n```yaml\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n```\n\n### Steps to Reproduce\n\nAdd a Git SHA reference in a file or prompt. CodeGate will alert about a detected AWS secret:\n\n```\nAmazon - Secret Access Key:\n\nsteps:\n- uses: REDACTED<$K0JvoN3DmtK4KOHLFj681lbvkYV5u7kpaD6tYAZBJbVpnrXuZ/SRllg4BdiRjibBXQQfisfuDqKaWJArQVviJgQCysgF+xllc1Gb4htk/RJEjE+rH2yK8HySckVKXwfO> # v4\n```\n\n### Operating System\n\nMacOS (Arm)\n\n### IDE and Version\n\nVS Code 1.96.3\n\n### Extension and Version\n\nGitHub Copilot 1.257.0\n\n### Provider\n\nGitHub Copilot\n\n### Model\n\nAny\n\n### Logs\n\n_No response_\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/587/comments",
    "author": "danbarr",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2025-01-21T10:40:06Z",
        "body": "@danbarr i actually removed the recognition of secret access key, because it was messing with other outputs as well. For example, it was obfuscating paths or just simple strings with 40 char length. As it was giving lots of false positives and messing with the llm responses, i dropped it.\nSo it should not be an issue anymore, can you confirm?"
      }
    ]
  },
  {
    "number": 558,
    "title": "fix: incorrect datetime format for strftime() in windows",
    "created_at": "2025-01-12T19:55:00Z",
    "closed_at": "2025-01-13T06:53:43Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/558",
    "body": "The datetime format used with Structlog's configuration inside `setup_logging()` in `src/codegate/codegate_logging.py` is passed to `strftime()`, which works on Linux but returns an error on Windows. Changed the datetime format so it works on Linux as well as Windows.\r\n\r\nResolves #556",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/558/comments",
    "author": "protokoul",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-01-13T13:41:08Z",
        "body": "@protokoul this will ship in the next release coming today"
      },
      {
        "user": "protokoul",
        "created_at": "2025-01-13T14:15:34Z",
        "body": "Thank you @lukehinds. This is awesome ðŸ˜„ "
      }
    ]
  },
  {
    "number": 526,
    "title": "Run integration tests for PRs",
    "created_at": "2025-01-09T14:18:55Z",
    "closed_at": "2025-01-20T11:57:13Z",
    "labels": [
      "needs-triage"
    ],
    "url": "https://github.com/stacklok/codegate/issues/526",
    "body": "We might want to run a subset to not starve ourselves of tokens, but each PR should be tested. In addition we can have more complex integration tests running in a cronjob, but let's track that separately.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/526/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "rdimitrov",
        "created_at": "2025-01-20T11:57:13Z",
        "body": "Closing this as completed via #611 "
      }
    ]
  },
  {
    "number": 523,
    "title": "Add first two copilot integration tests",
    "created_at": "2025-01-09T14:10:48Z",
    "closed_at": "2025-01-09T20:43:30Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/523",
    "body": "- **Add invokehttp to dummy data** - We'd like to write unit tests that would ideally work equally well with the released docker container as well as for local development. Let's add a well-known malicious library to the data set for testing.\r\n- **Add data types for pipeline routing, add route for OpenAI** - We just had a simple if-else for pipeline routing. Instead, let's add a data type that includes the paths and optionally a `target_url`. We can use that to add a routing for OpenAI which we'll use for testing the Copilot provider. In the future we can make the routings pluggable.\r\n- **When processing forwarded HTTP request, don't process until we have received the whole body** - It might happen that the proxied request arrives in two chunks - first just the headers and then the body. In that case we would have sent just the headers with an empty body through the pipeline which might trigger errors like \"400 Client Error\", then the body would arrive in the next chunk. This patch changes the logic to keep the whole body in the buffer until it is complete and can be processed by the pipeline and sent off to the server.\r\n\r\n- **Add integration tests for the copilot provider** - \r\n\r\nSince the copilot provider is a proxy, we add a \"requester\" module that\r\ndepending on the provider makes a request either using raw python\r\nrequests like earlier or by setting a proxy and using a CA cert file.\r\n\r\nTo be able to add more tests, we also add more kinds of checks, in\r\naddition to the existing one which makes sure the reply is like the\r\nexpected one using cosine distance, we also add checks that make sure\r\nthe LLM reply contains or doesn't contain a string.\r\n\r\nWe use those to add a test that ensures that the copilot provider chat\r\nworks and that the copilot chat refuses to generate code snippet with a\r\nmalicious package.\r\n\r\nTo be able to run a subset of tests, we also add the ability to select a\r\nsubset of tests based on a provider (`codegate_providers`) or the test name (`codegate_test_names`)\r\n\r\nThese serve as the base for further integration tests.\r\n\r\nTo run them, call:\r\n```\r\nCODEGATE_PROVIDERS=copilot \\\r\nCA_CERT_FILE=/Users/you/devel/codegate/codegate_volume/certs/ca.crt \\\r\nENV_COPILOT_KEY=your-openapi-key \\\r\npython tests/integration/integration_tests.py\r\n```\r\n\r\nRelated: #402\r\nFixes: #525 \r\nFixes: #517\r\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/523/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "ptelang",
        "created_at": "2025-01-09T15:36:29Z",
        "body": "Looks great! Thanks for refactoring the test framework code. "
      }
    ]
  },
  {
    "number": 509,
    "title": "Fix copilot errors which cause client to hangup during FIM",
    "created_at": "2025-01-07T21:52:13Z",
    "closed_at": "2025-01-08T09:38:17Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/509",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/509/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2025-01-08T06:23:33Z",
        "body": "Interesting, so I figure the lack of stream being True meant the socket would terminate early? I will test shortly. "
      }
    ]
  },
  {
    "number": 433,
    "title": "openai o1(preview) error",
    "created_at": "2024-12-20T14:37:47Z",
    "closed_at": "2025-01-06T20:39:30Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/stacklok/codegate/issues/433",
    "body": "### Describe the issue\n\n```\n</prompt>): litellm.UnsupportedParamsError: openai does not support parameters: {'response_format': {'type': 'json_object'}}, for model=o1. To drop these, set `litellm.drop_params=True` or for proxy:\n\n`litellm_settings:\n drop_params: true`\n```\n\n### Steps to Reproduce\n\nReference a file in Edit with CoPilot and select the o1(preview) model\n\n### Operating System\n\nMacOS (Arm)\n\n### IDE and Version\n\nVersion: 1.96.2\n\n### Extension and Version\n\n1.253.0\n\n### Provider\n\nGitHub Copilot\n\n### Model\n\no1(preview)\n\n### Logs\n\n_No response_\n\n### Additional Context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/433/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-12-20T14:46:16Z",
        "body": "we might want to use use a different model for the JSON reply then."
      },
      {
        "user": "lukehinds",
        "created_at": "2025-01-10T13:58:33Z",
        "body": "@ptelang did this get fixed? noted you closed"
      }
    ]
  },
  {
    "number": 419,
    "title": "Prompts should be grouped",
    "created_at": "2024-12-19T09:59:24Z",
    "closed_at": "2025-01-13T06:18:24Z",
    "labels": [
      "feature-request"
    ],
    "url": "https://github.com/stacklok/codegate/issues/419",
    "body": "Currently prompts are tracked as singular conversations, where as they are often a chain of conversations. We should move to displaying chains, this is of key importance, as systems such as copilot edit, cursor composer and others are highly leveraging chained instructions ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/419/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2025-01-08T11:04:40Z",
        "body": "@lukehinds can you clarify more about that? the idea is that all the requests that come into a single chat session, are displayed together into the ui?"
      }
    ]
  },
  {
    "number": 390,
    "title": "Add installer (in go) which avoids shell and jq",
    "created_at": "2024-12-17T09:10:11Z",
    "closed_at": "2024-12-17T22:39:07Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/390",
    "body": "Building the installer in Go allows us to avoid the JQ dependency, and to successfully install on windows.  It also adds support for command-line flags, though I haven't hooked up one for the API key yet (or for dry-run).",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/390/comments",
    "author": "evankanderson",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-17T09:48:53Z",
        "body": "Thanks for your efforts @evankanderson , things have changed a bit now though. We dropped the installer script and have consolidated all services into a single container (no more compose). From now folks will run `docker run` and then follow docs for setting up clients , IDEs etc. "
      },
      {
        "user": "evankanderson",
        "created_at": "2024-12-17T13:48:40Z",
        "body": "Awesome!  I'll clean up the install script then!"
      }
    ]
  },
  {
    "number": 389,
    "title": "Add CodeGate to Minder",
    "created_at": "2024-12-17T09:00:40Z",
    "closed_at": "2024-12-19T07:12:24Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/389",
    "body": "We should have Minder configure codegate. ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/389/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-12-17T19:42:04Z",
        "body": "@lukehinds to clarify, this is to configure the repo to be managed by minder saas?"
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-18T09:36:44Z",
        "body": "The repo was enrolled, putting into review to see if we see any complaints from other devs, if not, then we can close."
      },
      {
        "user": "lukehinds",
        "created_at": "2024-12-19T07:12:24Z",
        "body": "lgtm , thanks @jhrozek "
      }
    ]
  },
  {
    "number": 386,
    "title": "Update readme, contrib, and security guides",
    "created_at": "2024-12-17T02:34:44Z",
    "closed_at": "2024-12-17T08:59:06Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/386",
    "body": "Updates for the README, CONTRIBUTING, and SECURITY docs.\r\n\r\n- Update README to current info\r\n- Remove outdated install script\r\n- Style & formatting updates\r\n- markdownlint fixes",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/386/comments",
    "author": "danbarr",
    "comments": [
      {
        "user": "danbarr",
        "created_at": "2024-12-17T02:35:43Z",
        "body": "@lukehinds I left the contents of the Development section in the README, but should that just be removed in favor of linking to the developer guides in `docs/`?"
      },
      {
        "user": "lukehinds",
        "created_at": "2024-12-17T08:23:10Z",
        "body": "@danbarr just one small lint fix:\r\n\r\n# HACK! for anthropic we always need to run the output FIM pipeline even if empty to run the normalizers\r\n   |                                                                                                     ^^^^^^^^^^^^ E501 (line to long)"
      },
      {
        "user": "aponcedeleonch",
        "created_at": "2024-12-17T08:53:59Z",
        "body": "I did a rebase from main to make the CI happy"
      }
    ]
  },
  {
    "number": 342,
    "title": "Create models directory under codegate_volume",
    "created_at": "2024-12-14T04:40:40Z",
    "closed_at": "2024-12-15T17:15:19Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/342",
    "body": "Closes #343 ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/342/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2024-12-14T07:48:43Z",
        "body": "I read the issue and it's kind of strange. We shouldn't need it. The `models` folder already should exist when creating the container with the `Dockerfile` because the folder exists as part of the repository.  Basically we copy all of the application (which should include the `models` directory)\r\n```\r\nCOPY . /app\r\n``` \r\n\r\nIf we need to create the folder, does that imply that the model we are shipping with the image, all-minilm-L6-v2-q5_k_m.gguf, does not exist?"
      }
    ]
  },
  {
    "number": 332,
    "title": "Obfuscate secrets before sending a snippet out for analysis",
    "created_at": "2024-12-13T13:05:02Z",
    "closed_at": "2024-12-17T08:11:46Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/332",
    "body": "Load signatures only once - This was manifesting in tests - if we kept loading signatures, they were being added to the list of signatures, which was causing double matches\r\n\r\nSplit out secret obfuscation into reusable classes - Instead of coding up the secret encryption directly in the Pipeline step, let's split it out into a class of its own based on its own. The actual method that changes the secret is pluggable, for encryption where we need to get the secret value back we use the method we had used in the pipeline step. For things like extracting packages from a code snippet where we don't need to retrieve the original value we just replace the secret with a fixed number of asterisks.\r\n\r\nObfuscate secrets in code snippet before the code extraction step - We use the previously added SecretsObfuscator to hide the secrets before passing them to an LLM.\r\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/332/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "ptelang",
        "created_at": "2024-12-13T16:56:37Z",
        "body": "Good idea! We can use the same class to obfuscate the secrets before persisting in the DB."
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-14T13:31:31Z",
        "body": "This is now ready for review.\r\n\r\n@aponcedeleonch could you please test if I rebased atop your changes to how secrets are stored in the DB and alerts? I hope I didn't break anything."
      }
    ]
  },
  {
    "number": 323,
    "title": "The copilot provider doesn't record to the database",
    "created_at": "2024-12-12T19:00:47Z",
    "closed_at": "2024-12-16T07:53:16Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/323",
    "body": "Because we only record to the database in providers that extend the BaseProvider and Copilot is a network proxy.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/323/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-12-14T13:32:29Z",
        "body": "@aponcedeleonch this can be closed now right?"
      },
      {
        "user": "aponcedeleonch",
        "created_at": "2024-12-16T07:53:16Z",
        "body": "Closed via #331 "
      }
    ]
  },
  {
    "number": 303,
    "title": "Improve SSL security of target connections",
    "created_at": "2024-12-12T09:04:14Z",
    "closed_at": "2024-12-12T11:16:12Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/303",
    "body": "Previously we were not checking the hostname and verifying a cert as required. We also set up a basic ssl context in this PR\r\n\r\nNote this is connection to a host, it does not require our server key or set.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/303/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-12-12T10:27:13Z",
        "body": "@lukehinds needs rebase atop the recent header fix"
      }
    ]
  },
  {
    "number": 296,
    "title": "new added uvicorn tests are not passing",
    "created_at": "2024-12-11T22:05:49Z",
    "closed_at": "2024-12-16T23:04:24Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/296",
    "body": "They all fail with:\nFAILED tests/test_cli.py::test_uvicorn_server_serve - AttributeError: 'async_generator' object has no attribute 'serve'",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/296/comments",
    "author": "yrobla",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-12-14T13:33:28Z",
        "body": "@yrobla was this fixed in #307 ?"
      }
    ]
  },
  {
    "number": 262,
    "title": "Fixes incorrect way of referencing object properties",
    "created_at": "2024-12-10T20:37:24Z",
    "closed_at": "2024-12-10T20:43:43Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/262",
    "body": "Closes #252",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/262/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-12-10T20:43:43Z",
        "body": "Closed in favor of #260 "
      }
    ]
  },
  {
    "number": 257,
    "title": "ecosystem not considered for malicious packages using stacklok hosted",
    "created_at": "2024-12-10T17:18:41Z",
    "closed_at": "2024-12-11T11:54:54Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/257",
    "body": "I have a prompt like: \"can i use invokehttp package from go ecosystem\"\n\nWe return:\n\nWarning: CodeGate detected one or more potentially malicious or archived packages.\n\nPkg 1: trustypkg.dev/pypi/invokehttp\nThe package invokehttp is identified as malicious in the Python ecosystem. It is not advisable to use this package, regardless of the programming language or ecosystem. If you need a Python HTTP client, consider using alternative libraries such as requests which is widely trusted and widely used for making HTTP requests in Python.\n\ni have this package.json:\n\n{\n \"name\": \"monocle-frontend\",\n\n\"version\": \"0.1.0\",\n\n\"private\": true,\n\n\"scripts\": {\n\n\"dev\": \"next dev\",\n\n\"build\": \"next build\",\n\n\"start\": \"next start\",\n\n\"lint\": \"next lint\"\n\n },\n\n\"dependencies\": {\n\n\"invokehttp\",\n\n\"axios\": \"^1.7.2\",\n\n\"fuse.js\": \"^7.0.0\",\n\n\"next\": \"14.2.15\",\n\n\"react\": \"^18\",\n\n\"react-dom\": \"^18\",\n\n\"react-syntax-highlighter\": \"^15.5.0\"\n\n },\n\n}\n\n\n\nare there any malicious packages",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/257/comments",
    "author": "yrobla",
    "comments": [
      {
        "user": "ptelang",
        "created_at": "2024-12-11T08:58:11Z",
        "body": "The ecosystem is mentioned in the context. LLM should be able to use that for generating correct response.\n\nWhich provider/model generated the above response?"
      }
    ]
  },
  {
    "number": 254,
    "title": "Add logformat to entrypoint to facilitate troubleshooting",
    "created_at": "2024-12-10T15:09:17Z",
    "closed_at": "2024-12-10T16:27:17Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/254",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/254/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-12-10T16:27:17Z",
        "body": "that is included in issue-243"
      }
    ]
  },
  {
    "number": 249,
    "title": "Wrong packages reported on analyzing requirements.txt",
    "created_at": "2024-12-10T14:54:57Z",
    "closed_at": "2024-12-10T20:58:10Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/249",
    "body": "Testing with vllm (qwen model). Passing a requiements.txt file and tell it to report any malicious packages. It returns packages not listed in our db, and with wrong formatting. Same prompt returns different results all the time:\n\nWarning: CodeGate detected one or more potentially malicious or archived packages.\n\nPkg 1: kafka-python==2.0.2\nPkg 2: yara_python==4.5.1\n\nWarning: CodeGate detected one or more potentially malicious or archived packages.\n\nPkg 1: trustypkg.dev/ecosystem/yara_python\n\nI have reviewed the list of packages you provided. Based on the available information and my current knowledge, I have not detected any known malicious or archived packages in the list. However, it's always a good practice to regularly check for updates and vulnerabilities in the packages you use, especially in a production environment. If you encounter any issues or have specific concerns about a particular package, feel free to ask!\n\nWarning: CodeGate detected one or more potentially malicious or archived packages.\n\nPkg 1: trustypkg.dev/ecosystem/asyncpg\nPkg 2: trustypkg.dev/ecosystem/binaryornot",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/249/comments",
    "author": "yrobla",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-12-10T14:58:25Z",
        "body": "Also with anthropic:\n\nI don't detect any known malicious or archived packages in the provided list. The packages listed appear to be common, legitimate Python packages from PyPI. -> most of the time. But i have seen randomly:\n\nLet me analyze the package list for any known malicious or archived packages.\n\nWarning: CodeGate detected one or more potentially malicious or archived packages.\n\nfastapi-cors: trustypkg.dev/python/fastapi-cors\n"
      },
      {
        "user": "ptelang",
        "created_at": "2024-12-10T15:01:27Z",
        "body": "I believe this is fixed by #250\n\nCan you retest after that PR is merged?"
      }
    ]
  },
  {
    "number": 202,
    "title": "Despite normalizing, we still have messages with content as string or as tuple.",
    "created_at": "2024-12-04T21:41:03Z",
    "closed_at": "2024-12-09T10:48:16Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/202",
    "body": "We should really have one format of messages after normalizing. The fact that some providers use `content: foo` and some `content: { type: text, text: foo}` is irritating and makes for some unnecessary complexity in the pipeline.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/202/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-09T10:48:16Z",
        "body": "closed as dupe of : #187 "
      }
    ]
  },
  {
    "number": 201,
    "title": "Handle exceptions in pipeline steps",
    "created_at": "2024-12-04T21:28:03Z",
    "closed_at": "2024-12-19T14:38:17Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/201",
    "body": "At the moment, any exception in any pipeline step will just raise a 500 from codegate. This is not always desirable.\n\nIdeas on how we could improve:\n - mark steps as critical or non-critical\n - if a non-critical step fails, log or even add a chunk to the context to be displayed to the user in the conversation but proceed.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/201/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-09T10:47:24Z",
        "body": "@lukehinds plan for roadmap"
      }
    ]
  },
  {
    "number": 196,
    "title": "Tune system prompts",
    "created_at": "2024-12-04T14:06:20Z",
    "closed_at": "2024-12-09T10:47:08Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/196",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/196/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-08T11:21:20Z",
        "body": "This is done now @ptelang ?"
      }
    ]
  },
  {
    "number": 195,
    "title": "Update system prompt if it is already present",
    "created_at": "2024-12-04T14:05:40Z",
    "closed_at": "2024-12-10T20:39:30Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/195",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/195/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "aponcedeleonch",
        "created_at": "2024-12-10T20:39:30Z",
        "body": "Closed via: #200 "
      }
    ]
  },
  {
    "number": 156,
    "title": "Improve session store",
    "created_at": "2024-12-02T15:36:34Z",
    "closed_at": "2024-12-17T08:20:18Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/156",
    "body": "We need to fix up the session store, worth having @JAORMX ðŸ‘€  on as well. ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/156/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "JAORMX",
        "created_at": "2024-12-02T15:40:57Z",
        "body": "Happy to help!"
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-02T23:35:23Z",
        "body": "Let's discuss if PR #160 is enough with its usage of UUIDs for session and cleaning up the session store after having streamed the last chunk,"
      }
    ]
  },
  {
    "number": 109,
    "title": "/Users/jakub/devel/codegate/src/codegate/inference/inference_engine.py:27: RuntimeWarning: coroutine 'LlamaCppInferenceEngine.__close_models' was never awaited",
    "created_at": "2024-11-27T20:46:12Z",
    "closed_at": "2024-12-03T08:24:49Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/109",
    "body": "It doesn't seem to be a critical issue but sounds like something we shoudl fix.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/109/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-02T08:52:16Z",
        "body": "I am seeing this too."
      }
    ]
  },
  {
    "number": 104,
    "title": "Implement unit tests for the inferencing functions",
    "created_at": "2024-11-27T14:23:14Z",
    "closed_at": "2024-12-02T09:07:23Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/104",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/104/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-02T08:50:38Z",
        "body": "updater please @ptelang ?"
      }
    ]
  },
  {
    "number": 94,
    "title": "Implement the im_start / im_stop funkiness",
    "created_at": "2024-11-26T10:52:47Z",
    "closed_at": "2024-12-02T23:22:21Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/94",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/94/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-11-29T08:48:16Z",
        "body": "I actually realized we need to do this for vllm as well, while it does use the openai message format it also uses the im_start/im_end tags. We side-stepped the problem in the llama.cpp provider to not use them, but not the vllm provider."
      },
      {
        "user": "lukehinds",
        "created_at": "2024-12-02T08:46:17Z",
        "body": "How are we on this @jhrozek ?"
      },
      {
        "user": "lukehinds",
        "created_at": "2024-12-02T09:09:25Z",
        "body": "SHould be ready to merge @jhrozek  will comment out function for now, in case we need it, but until then the provider routing should take care fo this."
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-02T23:22:21Z",
        "body": "This was finally merged"
      }
    ]
  },
  {
    "number": 91,
    "title": "Add input processing pipeline + codegate-version pipeline step",
    "created_at": "2024-11-25T22:48:43Z",
    "closed_at": "2024-11-27T10:36:01Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/91",
    "body": "This adds a pipeline processing before the completion is ran where\r\nthe request is either change or can be shortcut. This pipeline consists\r\nof steps, for now we implement a single step `CodegateVersion` that\r\nresponds with the codegate version if the verbatim `codegate-version`\r\nstring is found in the input.\r\n\r\nThe pipeline also passes along a context, for now that is unused but I\r\nthought this would be where we store extracted code snippets etc.\r\n\r\nTo avoid import loops, we also move the `BaseCompletionHandler` class to\r\na new `completion` package.\r\n\r\nSince the shortcut replies are more or less simple strings, we add yet\r\nanother package `providers/formatting` whose responsibility is to\r\nconvert the string returned by the shortcut response to the format\r\nexpected by the client, meaning either a reply or a stream of replies in\r\nthe LLM-specific format. We use the `BaseCompletionHandler` as a way to\r\nconvert to the LLM-specific format.\r\n\r\nFixes: #93 \r\nRelated: #45 ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/91/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-11-26T08:44:43Z",
        "body": "Nice work @jhrozek !"
      }
    ]
  },
  {
    "number": 88,
    "title": "requires-python was breaking make test",
    "created_at": "2024-11-25T19:46:03Z",
    "closed_at": "2024-11-25T20:01:21Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/88",
    "body": "I wasn't sure what requires-python does, but we do have another explicit python dependency and I was getting an error with that line:\n```\nThe Poetry configuration is invalid:\n  - Additional properties are not allowed ('requires-python' was unexpected)\n```\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/88/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-11-25T20:01:18Z",
        "body": "I was just making a patch to remove this too, its in the wrong place and was breaking my env too"
      }
    ]
  },
  {
    "number": 86,
    "title": "Change the imports to absolute instead of relative",
    "created_at": "2024-11-25T16:29:10Z",
    "closed_at": "2024-11-26T08:26:40Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/86",
    "body": "They're easier to understand and a better practice\r\n\r\nI also ran `make format` and it auto-formatted some of the code in the tests",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/86/comments",
    "author": "aponcedeleonch",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-11-25T18:51:52Z",
        "body": "looks good, just needs a rebase"
      }
    ]
  },
  {
    "number": 85,
    "title": "Add inferencing models",
    "created_at": "2024-11-25T15:54:34Z",
    "closed_at": "2024-11-25T18:51:13Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/85",
    "body": null,
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/85/comments",
    "author": "ptelang",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-11-25T16:24:34Z",
        "body": "Worth us digging into this a little more, we might want to pull these in at run time, or prompt the user somehow. "
      },
      {
        "user": "ptelang",
        "created_at": "2024-11-25T16:50:41Z",
        "body": "> Worth us digging into this a little more, we might want to pull these in at run time, or prompt the user somehow.\r\n\r\nYes, we can leave the model files out of the docker container and get the user to download these in a folder that can be accessed from the container. \r\n\r\nBut, is it OK to add these to the repo? My tests require these files. "
      },
      {
        "user": "lukehinds",
        "created_at": "2024-11-25T18:01:20Z",
        "body": "Yup, no prob keeping them in the repo"
      }
    ]
  },
  {
    "number": 72,
    "title": " mock uvicorn.run in CLI serve command tests",
    "created_at": "2024-11-23T10:08:25Z",
    "closed_at": "2024-11-23T10:16:52Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/pull/72",
    "body": "Fixed failing CLI tests by mocking uvicorn.run calls to prevent real server startup during testing.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/72/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-11-23T10:13:07Z",
        "body": "LGTM "
      }
    ]
  },
  {
    "number": 63,
    "title": "Implementation of VectorDB within codegate code",
    "created_at": "2024-11-22T09:11:08Z",
    "closed_at": "2024-12-02T11:37:08Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/63",
    "body": "Now that the VectorDB is packaged in #62 , code is developed to perform a similarity search  for package name, and if present create an augmented quote + RAGQuote which is then sent to the LLM.\n\nData will consist of: Package Name, Ecosystem and Description. \n\nThis work requires #47 to be able to filter and parse library / module names form the code snippets. ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/63/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-11-28T12:02:54Z",
        "body": "I need to integrate Weaviate into codegate server itself"
      }
    ]
  },
  {
    "number": 61,
    "title": "Ability to Backup Weaviate VectorDB",
    "created_at": "2024-11-22T09:06:04Z",
    "closed_at": "2024-11-26T14:16:39Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/61",
    "body": "Within CI the we generate embeddings into the Weaviate VectorDB, and then this is backed up (possibly as a folder) and injected into the codegate image. ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/61/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-11-26T12:49:44Z",
        "body": "we are currently backing up, but it is pending on changing the way to generate embeddings, reusing the inference class from Pankaj"
      }
    ]
  },
  {
    "number": 47,
    "title": "[Task] Treesitter implementation",
    "created_at": "2024-11-21T10:21:29Z",
    "closed_at": "2024-12-05T21:59:42Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/47",
    "body": "Ability to recognise and strip out libraries, packages and modules, needs to be both pre-and-post processing (leveraging backticks)\n\n\n",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/47/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-02T09:24:40Z",
        "body": "What lang do we support? "
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-03T20:33:42Z",
        "body": "We have the code extraction on both input and output and the ability to add comments on output. Instead of tree-sitter where we would have to maintain the parser ourselves, I'm going to start by checking if we could use an LLM for that (thanks for the suggestion @ptelang )"
      },
      {
        "user": "jhrozek",
        "created_at": "2024-12-05T21:59:42Z",
        "body": "We ended up using LLMs for this."
      }
    ]
  },
  {
    "number": 45,
    "title": "Pipelines block inputs for Guardrail hooks",
    "created_at": "2024-11-21T10:11:28Z",
    "closed_at": "2024-11-27T13:54:01Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/45",
    "body": "Ability to gate and modify inputs / outputs:\n\n1. Given an input, apply logic around block or allow (provide an interface, single method). \n2. Given an input, add a system message (logic to layer in system message, according to the event nature) \n\n\nWe will use LiteLLM hooks for now, but its a bit messy and should be placed into tech debt.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/45/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "jhrozek",
        "created_at": "2024-11-26T13:47:29Z",
        "body": "1 (Given an input, apply logic around block or allow (provide an interface, single method)) is part of PR #91 "
      },
      {
        "user": "jhrozek",
        "created_at": "2024-11-26T13:48:25Z",
        "body": "I will work on 2. after fixing up the provider interfaces (#94)\n"
      },
      {
        "user": "lukehinds",
        "created_at": "2024-11-26T14:09:14Z",
        "body": "Jakub will break into two mediums to cover system prompt inclusion. "
      },
      {
        "user": "jhrozek",
        "created_at": "2024-11-27T13:53:38Z",
        "body": "I broke off the system prompt inclusion into #103 "
      },
      {
        "user": "jhrozek",
        "created_at": "2024-11-27T13:53:58Z",
        "body": "This was done in #91 "
      }
    ]
  },
  {
    "number": 35,
    "title": "Don't print out shell snippets if we find anything malicious",
    "created_at": "2024-11-18T16:09:48Z",
    "closed_at": "2025-01-27T14:33:18Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/35",
    "body": "This might be a little too much now, but since shell snippets are typically one-liners we might want to just buffer them before evaluation (this would not slow the execution too much), maybe if we find that the snippet is longer we can let it through line-by-line. We'd then evaluate the snippet and only let it through if it doesn't contain any malicious packages.",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/35/comments",
    "author": "jhrozek",
    "comments": [
      {
        "user": "lukehinds",
        "created_at": "2024-12-09T10:38:21Z",
        "body": "@lukehinds add to features / roadmap"
      },
      {
        "user": "lukehinds",
        "created_at": "2025-01-06T14:16:54Z",
        "body": "@lukehinds  consolidate into #34"
      }
    ]
  },
  {
    "number": 10,
    "title": "Implement Data Pipeline",
    "created_at": "2024-11-14T07:34:12Z",
    "closed_at": "2024-11-22T09:06:44Z",
    "labels": [],
    "url": "https://github.com/stacklok/codegate/issues/10",
    "body": "We will need a pipeline to automate the retrieval of trusty data (and possibly others source) to then be serialized and loaded as vectors into the #6 implemented. This will then need to build an image. \n\nIdeally we may want something well suitaed for both local and CI use. It might make sense to have this seperate to the main codegate codebase, but that is just a hunch\n\nLikely to be a weekly schedule at first. ",
    "comments_url": "https://api.github.com/repos/stacklok/codegate/issues/10/comments",
    "author": "lukehinds",
    "comments": [
      {
        "user": "yrobla",
        "created_at": "2024-11-14T10:20:52Z",
        "body": "we have several alternatives here... we may want to store data in json and generate embeddings from there, but we could also have some pipeline that connects directly to the db and updates regularly.\nWe should decide also which kind of information do we want to store in the embeddings (malicious, deprecated, archived...) or even good packages.\nIf we decide that we want to show more information about the package (name, author, description...) we may include them also in data"
      },
      {
        "user": "lukehinds",
        "created_at": "2024-11-20T14:25:02Z",
        "body": "Manual approach for now, until an API is available in Trusty to automate this. \n\nDumping from staging, cannocialise, vectorised schema, back up to export. "
      }
    ]
  }
]