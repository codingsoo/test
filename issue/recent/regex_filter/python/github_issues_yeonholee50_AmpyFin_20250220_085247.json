[
  {
    "number": 83,
    "title": "improve ranking and training with local mongodb version",
    "created_at": "2025-02-16T18:43:47Z",
    "closed_at": "2025-02-16T19:19:39Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/83",
    "body": "Added local mongodb during training and ranking which is synced to remote mongodb.\r\nThis improves performance significantly",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/83/comments",
    "author": "Kuhno92",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-16T19:19:43Z",
        "body": "lgtm. we'll test before next version and then merge to main. "
      }
    ]
  },
  {
    "number": 80,
    "title": "Fix: #79",
    "created_at": "2025-02-14T20:11:33Z",
    "closed_at": "2025-02-14T20:13:27Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/80",
    "body": "Date time is now timezone aware on insert to correctly reflect trade times",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/80/comments",
    "author": "lucentsingularity",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-14T20:13:31Z",
        "body": "lgtm. great work!!! we'll test (shouldn't take too long), and update it to main"
      }
    ]
  },
  {
    "number": 77,
    "title": "Inability to save trained model",
    "created_at": "2025-02-14T15:36:19Z",
    "closed_at": "2025-02-14T16:24:11Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/77",
    "body": "I am able to train the model to completion, but then get the error below. I ran it twice, but no sure how to fix without breaking it`  File \"c:\\Users\\test\\OneDrive\\Stocks\\Ampyfin\\AmpyFin_ETF_2\\ranking_client.py\", line 632, in <module>\n    main()\n    ~~~~^^\n  File \"c:\\Users\\test\\OneDrive\\Stocks\\Ampyfin\\AmpyFin_ETF_2\\ranking_client.py\", line 619, in main\n    top_points = sorted(trading_simulator.items(), key=lambda x: x[1][\"points\"], reverse=True)[:10]\n                 ~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\test\\OneDrive\\Stocks\\Ampyfin\\AmpyFin_ETF_2\\ranking_client.py\", line 619, in <lambda>\n    top_points = sorted(trading_simulator.items(), key=lambda x: x[1][\"points\"], reverse=True)[:10]\n                                                                 ~~~~^^^^^^^^^^\nKeyError: 'points'`",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/77/comments",
    "author": "abeyusuf",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-14T16:05:48Z",
        "body": "we have fixed the issue. we are going to release it when v3.0.1 comes out so please do not using training client. Please use the current ranking and trading only - once v3.0.1 is released, this issue will be patched. until then, I will leave it here"
      }
    ]
  },
  {
    "number": 72,
    "title": "Add resiliency to price checking function",
    "created_at": "2025-02-12T20:40:44Z",
    "closed_at": "2025-02-12T20:50:54Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/72",
    "body": "- Removes endless while loop when get_latest_price function fails (this is what caused the block during the CTAS issue with Yahoo)\r\n- Allows get_latest_price to throw its exceptions rather than getting caught internally. This allows the calling function to catch the exception, report it, and move on to the next trading iteration _without getting blocked_\r\n- This has the secondary benefit of cleaning up the code a little \r\n\r\nThis will allow trades continue in the future even when there are issues with Yahoo Finance, such as the CTAS one we experienced today. Sorry about the failed hotfix today! I thought I had it working and wanted to get a fix out urgently. I've taken the time to test this one more thoroughly.",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/72/comments",
    "author": "anthony-autrey",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-12T20:50:58Z",
        "body": "great work. dev team will review the changes before adding it to main branch deployment"
      }
    ]
  },
  {
    "number": 71,
    "title": "fetch extra 2-year prior data for historical data cache",
    "created_at": "2025-02-12T19:01:14Z",
    "closed_at": "2025-02-13T17:18:48Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/71",
    "body": "the same as #67 except merging to main branch",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/71/comments",
    "author": "ChromeHearts",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-13T17:18:48Z",
        "body": "Hello, so the team took your suggestion but noticed a bug so we decided to call max for those that don't have 2 years prior and also use the ndaq100 holdings. Great work btw!! "
      }
    ]
  },
  {
    "number": 70,
    "title": "Add max retries to get_latest_price calls (Hotfix for CTAS issue)",
    "created_at": "2025-02-12T18:23:35Z",
    "closed_at": "2025-02-12T18:27:04Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/70",
    "body": "This fixes the current issue with CTAS price retrieval errors",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/70/comments",
    "author": "anthony-autrey",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-12T18:27:07Z",
        "body": "lgtm. great work."
      }
    ]
  },
  {
    "number": 67,
    "title": "Fix Historical Data Cache: Add 2 Years of Prior Data for Training ",
    "created_at": "2025-02-12T11:28:09Z",
    "closed_at": "2025-02-12T18:30:03Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/67",
    "body": "The historical data cache is only fetched from start date to end date.  However, some strategies need data as much as 2 yr prior.  This PR fixes it.  \r\n\r\nP.S.  Inspiring project!  Thank you for sharing it!",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/67/comments",
    "author": "ChromeHearts",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-12T18:30:03Z",
        "body": "currently it doesn't seem like i can merge because of too many conflicts. it does look great, but please resolve the conflicts and then upload the pr. Great work still!!"
      }
    ]
  },
  {
    "number": 64,
    "title": "Implement Docker",
    "created_at": "2025-02-11T03:30:19Z",
    "closed_at": "2025-02-11T14:30:40Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/64",
    "body": "- Implements dockerfile and docker-compose.yml\r\n- Allows for .env file to configure docker containers on run\r\n- Updates readme with Docker explanation and instructions",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/64/comments",
    "author": "anthony-autrey",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-11T14:07:13Z",
        "body": "Great work. Please merge to the docker branch of this repository - this way we can test it out before applying the merge to the main branch"
      },
      {
        "user": "anthony-autrey",
        "created_at": "2025-02-11T14:25:27Z",
        "body": "Changed to deployment branch"
      },
      {
        "user": "yeonholee50",
        "created_at": "2025-02-11T14:32:11Z",
        "body": "lgtm. the dev team will test these during this weekend or next weekend at latest (currently swamped rn with finish updates for v3.0.1). "
      }
    ]
  },
  {
    "number": 54,
    "title": "time_delta_mode missing in control.py",
    "created_at": "2025-02-08T12:02:18Z",
    "closed_at": "2025-02-08T14:04:14Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/54",
    "body": "When I run the new ranking_client.py with the control integration, I get an error that time_delta_mode is missing. I check the control.py file and it doesn't exist only. \n\n> ImportError: cannot import name 'time_delta_mode' from 'control'\n\nThe below are the only time_delta variables for ranking\n`time_delta = 'balanced'\ntime_delta_increment = 0.01\ntime_delta_multiplicative = 1.01\ntime_delta_balanced = 0.2`",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/54/comments",
    "author": "abeyusuf",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-08T13:05:06Z",
        "body": "apologies. this should now be resolved. please lmk if the issue persists and we can debug together. I'll leave this issue open if it does persist. thank you"
      },
      {
        "user": "abeyusuf",
        "created_at": "2025-02-08T14:04:14Z",
        "body": "works now. Thanks a bunch. I will try and train and revert back. If any other clarifications, I will ask on Reddit :)."
      }
    ]
  },
  {
    "number": 53,
    "title": "Remove RANK_POLYGON_API_KEY",
    "created_at": "2025-02-07T00:29:21Z",
    "closed_at": "2025-02-07T00:47:44Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/53",
    "body": "This looks unused? No Ref made in the file and not in the sample config.py",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/53/comments",
    "author": "lucentsingularity",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-02-07T00:47:49Z",
        "body": "lgtm thanks for the correction"
      }
    ]
  },
  {
    "number": 47,
    "title": "Selling rare occurrences",
    "created_at": "2025-01-30T18:49:31Z",
    "closed_at": "2025-01-31T17:11:41Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/47",
    "body": "Both the ranking client and the trading client rarely make any sell decisions and are typically very light on sell weight, for any of the strategies and a wide variation of tickers. Any information about this? ",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/47/comments",
    "author": "apaissss",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-01-30T19:08:58Z",
        "body": "Thank you for the question. So if there is no purchase of a security - 0 holdings of the ticker in the portfolio, then there is actually supposed to be no selling_weight - if it's a negative sentiment, it should be in holding weight. This is purposefully done so that we don't accidentally short sell a stock - this is something the team was uncomfortable with when designing the system so we had multiple checks in place and this is one of them. If there is a purchase of security, there should be some sell_weight - can you take a screenshot of your console so that we can debug - from my team's end we still have sell weights . This check is also in place for ranking_client as well.\n\nIn response to sell-decisions, can I ask if you trained the bot using any data set or let ranking client run for 2 weeks? If not, no worries. We're creating a training and backtesting library for our users to use to update their database before trading so they don't have to wait 2 weeks. - should be out soon. The recent update with stop loss + take profit should increase the amount of selling and buying - both of which is adjustable for the user in the meantime. "
      },
      {
        "user": "apaissss",
        "created_at": "2025-01-30T20:34:27Z",
        "body": "Yes, I understand the no-selling weight if there are no holdings. I have trained the ranking client for about a week, but have seen no progress regarding selling. There is sell weight in the console for trading clients, but never sells-not including stop loss. The ranking client has seen about 241 sells out of 3433 trades; is this normal? "
      },
      {
        "user": "apaissss",
        "created_at": "2025-01-30T23:32:32Z",
        "body": "Also, the for loop should be replaced with threading in the trading client. Really slow to go through tickers and bias toward the tickers that start with A."
      }
    ]
  },
  {
    "number": 42,
    "title": "Risks of learning strategy with linearly cumulating weighted `time_delta`",
    "created_at": "2025-01-24T09:20:40Z",
    "closed_at": "2025-02-16T19:20:28Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/42",
    "body": "Hey, i was bit digging into the code of how learning strategy through time adapts, from first glance it seemed reasonable and simple just to cumulate points by `\"$inc\": {\"total_points\": points}` in MongoDB and points is just weighted timedelta as in \n`if price_change_ratio > 0.975:\n    points = -time_delta * 1\n elif price_change_ratio > 0.95:\n    points = -time_delta * 1.5\n else:\n    points = -time_delta * 2`\n\nHowever, when we have prolonged market conditions, such as half year or longer of say sideways or volatile market and some strategies are better suited for that period, and market transitions to up/down trend conditions for next longer or shorter period, if `\"total_points\"` was accumulated using many days, linear timedelta cumulation will take very long period to adapt to recent changes for long time as new winning strategies will not outweight long established strategies for significant amount of time. \n\nSo in general system becomes very insensitive to recent changes if the period it is running will be long (say after 1 year), this basically makes it only adaptive during quite short period of time when it is inicialized and very insensitive to more recently optimal strategies after longer period.\n\nMy advice would be to look more into other multiplicative (not additive) strategies that could maintain system adaptability even if it is running for few years, maybe just have some forgetting mechanics or use more like stochastic-gradient approaches used in online learning using some reasonable decay factors instead to make it somewhat adaptive. \n\nThis may be quite a big risk that after running system for 1 year nobody will notice and think it is well adapting, however the longer we will be running, the less adaptive it will become.\n\nDid i understood the risks correctly?",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/42/comments",
    "author": "gzls90",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-01-24T15:10:42Z",
        "body": "Thank you for sharing your insights on the current strategy of accumulating points using a linear approach. You've identified a valid risk with this method, particularly regarding its adaptability over extended periods.\n\nThe primary concern is that, under prolonged market conditions (eg a sideways or volatile market lasting months), the system becomes less sensitive to recent changes. New strategies that perform well may not outweigh the influence of long-established strategies, especially if the total points have been accumulated over a long period. As a result, the system adapts well during the initial phase but loses responsiveness over time, particularly in markets with shifting dynamics (e.g., transitioning from sideways to trending conditions). \n\nDespite its limitations, the linear approach has several advantages:\nNoise Robustness: Summing over longer periods smooths out short-term noise, providing a reliable measure of strategy performance.\nHistorical Context: It gives a clear record of past performance, which is valuable for evaluating overall strategy effectiveness. Again, it's only been live since the new update for 3 weeks.\nResistance to Overfitting: By avoiding overreaction to short-term changes, it reduces the risk of chasing trends or over-optimizing for recent conditions.\n\n\nDecay Factors: Introduce a decay mechanism where older points gradually lose influence. This could be done by applying a decay factor (total_points = total_points * decay_rate + current_points).\nHybrid Models: Use linear accumulation as the base but adjust adaptively during significant market transitions (e.g., triggered by volatility or trend indicators).\n\nPure multiplicative approach was also considered but there were far more risks like:\n\n-Amplification of Noise\n\nIssue: Multiplicative updates magnify the impact of small changes. For example, a single outlier event (e.g., extreme price change) can disproportionately affect the system, leading to erratic strategy shifts.\nWhy It's Bad: This amplification can destabilize the system, especially in volatile markets where outliers are common. Instead of smooth transitions, the system might overreact to recent events, reducing its reliability.\n\n-Overfitting to Recent Trends\n\nIssue: Multiplicative updates inherently favor the most recent results. This can cause the system to over-prioritize short-term performance while neglecting long-term robustness.\nWhy It's Bad: Strategies that are temporarily successful (e.g., during a short-term rally) might dominate, only to fail when the market reverts to broader trends.\n\n-Lack of Historical Perspective\n\nIssue: Unlike additive methods, multiplicative updates reduce the impact of historical data exponentially over time. This can result in the system \"forgetting\" useful long-term patterns too quickly.\nWhy It's Bad: Valuable historical information is lost, potentially causing the system to repeat past mistakes or fail to recognize recurring patterns.\n\n-Increased Complexity\n\nIssue: Multiplicative systems require careful tuning of decay rates or update factors to avoid instability.\nWhy It's Bad: This added complexity increases the risk of misconfiguration, especially in dynamic environments where optimal parameters may shift over time. This is something that should be tested thoroughly, which we will consider in the future.\n\n-Sensitivity to Initialization\n\nIssue: In multiplicative systems, the initial values play a significant role in shaping the system's behavior. Poorly chosen initial weights or scores can lead to long-term distortion.\nWhy It's Bad: This sensitivity can cause the system to converge to suboptimal strategies, particularly in the early stages.\n\n\nWhile the linear method has theoretical strengths such as stability and robustness, the risks you’ve highlighted are valid, particularly for long-running systems - if you wanted this to run of 10+ years, it obviously will need to change the ranking piece - certainly how time_delta is being done. Implementing decay or adaptive weighting mechanics could strike a balance, ensuring the system remains responsive to recent changes while preserving the simplicity and reliability of the linear approach. We did test both linear and multiplicative approach (during beta testing about a year ago) and the multiplicative approach was more susceptible to short-term volatility. R value showed pure multiplicative approach did have a higher R ratio which is good is hindsight, but the spread was too big and this was largely due to overfitting.\n\nWe will be considering combining the linear approach with multiplicative (during backtesting if we do find a rate where the R ratio has less spread - not overfitting) after additional features have been implemented - should be sometime in June of 2025. Thank you for bringing this up. Will leave this for the team to look into sometime in June"
      }
    ]
  },
  {
    "number": 41,
    "title": "Longer period backtesting capability",
    "created_at": "2025-01-19T18:49:15Z",
    "closed_at": "2025-01-30T16:34:46Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/41",
    "body": "Hey, i am trying to backtest indicators to simulate behavior and try to consider improvements i could do and share in the algorithm set (e.g. some indicators are too correlated and overall weighting may be too biased). However it is so notoriously difficult, basically if i want to properly backtest the whole system behavior with ranking and trading parts, it is too difficult. I could cut code pieces, wrap them around some historical datasets and simulate some trading and ranking parts on historical data, but reliance on MongoDB in code makes it also very hard...\n\nSo now i just did single indicator backtesting (but this is also not easy, even if some params are encoded into indicators functions, the optimal period is separately hardcoded in `setup.py` file that i initialy didnt even noticed and did flawed backtesting even on individual indicators) but this is not enough as ranking functionality and individual indicator weighting is very specific and i need to reimplement it.\n\nIs there a way you did backtesting on the system somehow to see how historically it could have performed and incorporate it with my own research?",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/41/comments",
    "author": "gzls90",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2025-01-19T19:41:07Z",
        "body": "yes, for all 132 indicators, The team and I backtested on an individual basis. I tested each indicator with various periods ranging from 1d, 3d, 5d, 1m, 3m, 6m, 1y, 3y, 5y using data from a 24 year span - keep in mind this is using what is currently in ndaq-100 so this is something the team is working on in the background with regards to making a more robust backtesting library. Whichever resulted in a higher score in terms of higher portfolio value for individual indicator + closed trades that yielded a higher margin of profit was what the fixed period was decided as. Backtesting library I used involved using data from Intrinio, which is why my team and I are in the process of rewriting a new backtesting library (Intrinio is notoriously expensive but other APIs we tried had a lot of incomplete data and yfinance even had a large discrepancy from what Intrinio data was showing us). We previously expected it to be done by late Jan of this year, but we may have to delay this until April because of the scale of the work. Also in terms of MongoDB, we are currently in the process of migrating to using QuestDB for both training and trading - we're still in the process of working out how to migrate the training data - it's still training so we anticipate we should migrate it during a weekend sometime in Feb. Also, I'll update README to reflect that the indicators have a fixed period for clarity. Thank you for your feedback. I will leave this issue up in case there are any other questions."
      }
    ]
  },
  {
    "number": 38,
    "title": "Dockerized Application",
    "created_at": "2024-12-28T04:36:02Z",
    "closed_at": "2024-12-30T15:31:46Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/38",
    "body": "Created docker container and docker compose scripts for faster deployment and easy setup",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/38/comments",
    "author": "Kuhno92",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-30T15:31:43Z",
        "body": "lgtm. nice work!!"
      }
    ]
  },
  {
    "number": 36,
    "title": "Using alpacapy instead of yf",
    "created_at": "2024-12-26T16:12:57Z",
    "closed_at": "2024-12-27T04:12:34Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/36",
    "body": "It seems to work, I had to change and open another pull request",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/36/comments",
    "author": "DeineMudda40",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-27T04:12:37Z",
        "body": "just looked at it and lgtm. but ill have to test it in a container before deploying it in main"
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-27T04:12:45Z",
        "body": "great work here!!\r\n"
      }
    ]
  },
  {
    "number": 30,
    "title": "ssuggested util scripts",
    "created_at": "2024-12-22T05:37:43Z",
    "closed_at": "2024-12-22T16:24:23Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/30",
    "body": "just posting these for visibility, feel free to copy or cherrypick anything\r\n\r\n\r\ncheck_strategy scores: shows strategy ranks, points, and simulated portfolio statistics\r\n\r\nsync_alpaca: Compares actual alpaca positions with mongo poositions, lists deviations and syncs mongo with current alpaca positions (needed if you make any manual trades in alpaca)\r\n\r\nsell_all: sells all alpaca positions",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/30/comments",
    "author": "Morritse",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-22T16:24:20Z",
        "body": "lgtm"
      }
    ]
  },
  {
    "number": 28,
    "title": "Update README.md",
    "created_at": "2024-12-10T16:50:54Z",
    "closed_at": "2024-12-10T17:56:29Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/28",
    "body": null,
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/28/comments",
    "author": "Morritse",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-10T17:56:33Z",
        "body": "lgtm ty"
      }
    ]
  },
  {
    "number": 24,
    "title": "Got \"open\" market status during weekend",
    "created_at": "2024-12-08T09:01:16Z",
    "closed_at": "2024-12-08T12:11:38Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/24",
    "body": "Ran python ranking_client.py on Sat and Sun, but got \"Market is open. Processing strategies.\".",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/24/comments",
    "author": "huangchengcheng",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-08T12:11:38Z",
        "body": "yes, this was to force rank to be open for testing but it was never closed. apologies.It should now be closed."
      }
    ]
  },
  {
    "number": 22,
    "title": "Momentum strategy railing issue",
    "created_at": "2024-12-07T21:44:24Z",
    "closed_at": "2024-12-09T22:30:11Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/22",
    "body": "As written, the strategy essentially collapses all scenarios where the short-term moving average (short_ma) is less than the long-term moving average (long_ma) into a single extreme sentiment outcome. Here’s why this happens:\r\n\r\nDerivation of Raw Sentiment:\r\n\r\n```\r\nratio = short_ma / long_ma\r\nraw_sentiment = (ratio - 1) * 1000\r\n```\r\n\r\nWhen short_ma < long_ma, ratio < 1. This makes (ratio - 1) negative, and so raw_sentiment will be a negative number.\r\n\r\nForcing the Sentiment to be at Least 1:\r\nIn the current logic, if `short_ma > long_ma,` sentiment is capped at min(100, int(raw_sentiment))—meaning it can vary from 0 to 100. However, if `short_ma <= long_ma`, the sentiment is set by:\r\n\r\n`sentiment = max(1, int(raw_sentiment))`\r\nSince raw_sentiment is negative in this scenario, `int(raw_sentiment)` will be less than or equal to 0. Applying `max(1, negative_number) ` always results in 1. Effectively, you lose all granularity on the downside—no matter how close or far the short MA is below the long MA, the sentiment will always be 1.\r\n\r\nImplications for Signals:\r\nBecause sentiment will always return as 1 in the short < long scenario, the logic that checks for sell signals will always find sentiment ≤ 20 and thus always produce a \"strong sell\" signal if you hold any quantity. This prevents the strategy from ever issuing a more moderate \"sell\" signal or even a subtle \"hold\" as long as short_ma < long_ma.\r\n\r\nHow to Improve Granularity:\r\nIf you want to introduce more gradation for the bearish scenario (short < long), you could consider allowing sentiment to range down to negative values or simply rescale the negative raw_sentiment values into a lower range. For example, you might do something like this:\r\n\r\nKeep the sentiment range consistent on both sides. If (ratio - 1) * 1000 yields a negative number, you could transform that negative number into, say, a range of 0 to 40 (to reflect milder sell signals) rather than forcing it to 1. \r\n\r\nAnother more straightforward strategy would be to predefine ranges to signals directly.\r\nI realize this breaks with the continuous sentiment calculation but an example would be simply to bucket ratios into signals. fundamentally we're bucketing sentiments into decisions anyways, so you don't lose and resolution. \r\n\r\nUsing predefined ratio thresholds is a straightforward and transparent approach. It may be more intuitive than attempting to continuously map the ratio to a sentiment scale. By selecting clear-cut bands, you ensure that small deviations around 1.0 lead to subtle signals (hold or light buy/sell), while larger deviations trigger stronger signals.\r\n\r\n.\r\nBelow is one reasonable set of thresholds, symmetric around 1.0:\r\n\r\nStrong Sell: Ratio ≤ 0.95\r\n(Short MA is at least 5% below the Long MA, indicating strong downward momentum)\r\n\r\nLight Sell: 0.95 < Ratio < 0.99\r\n(Short MA is 1%-5% below the Long MA, a moderate bearish signal but not too severe)\r\n\r\nHold: 0.99 ≤ Ratio ≤ 1.01\r\n(Short MA is within ±1% of Long MA, suggesting a relatively neutral market with no strong directional bias)\r\n\r\nLight Buy: 1.01 < Ratio < 1.05\r\n(Short MA is 1%-5% above the Long MA, indicating mild upward momentum)\r\n\r\nStrong Buy: Ratio ≥ 1.05\r\n(Short MA is at least 5% above the Long MA, signaling strong bullish momentum)\r\n\r\nYou can tweak the exact percentage thresholds (e.g., 1%, 5%, etc.) depending on how sensitive you want the system to be, or convert these from 0-100 sentiment scores if you want to be consistent. ",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/22/comments",
    "author": "Morritse",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-07T22:44:54Z",
        "body": "I have changed the strategies so that it will now be using ta-lib which is a better library for indicators. A lot of strategies I implemented were from textbooks, academic journals etc. so although I tried to make each of them work as well as I could, they really weren't at closer inspection so I apologize. Also the way I implemented the functions in ta-lib are still static but I plan to make it dynamic in terms of how parameters will work - like the period, other params etc. Please let me know if you still have any questions. "
      }
    ]
  },
  {
    "number": 20,
    "title": "Fix error on mongo_setup.py",
    "created_at": "2024-12-07T02:11:32Z",
    "closed_at": "2024-12-07T03:08:27Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/20",
    "body": "Fix datetime import.\r\nfix initialize_market_setup function bug",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/20/comments",
    "author": "ven7782",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-07T03:08:29Z",
        "body": "lgtm. thank you"
      }
    ]
  },
  {
    "number": 18,
    "title": "Setup problems",
    "created_at": "2024-12-06T14:21:23Z",
    "closed_at": "2024-12-07T03:09:29Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/18",
    "body": "I face a lot of issues when settings this up.\r\n\r\nFirst off, where do I place the config.py? In the base directory? running mongo_setup.py results in a No module named config when doing this.\r\n\r\nI also get AttributeError: module 'datetime' has no attribute 'now' when running mongo_setup.py fixing this by adding \"from datetime import datetime\"\r\n\r\nNext error is this: \r\n\r\npython3.10 helper_files/mongo_setup.py\r\nTraceback (most recent call last):\r\n  File \"/Users/x/Documents/trading/AmpyFin/helper_files/mongo_setup.py\", line 90, in <module>\r\n    initialize_market_setup()\r\n  File \"/Users/x/Documents/trading/AmpyFin/helper_files/mongo_setup.py\", line 83, in initialize_market_setup\r\n    collection.insert_one({\"market_status\": \"closed\"})\r\n  File \"/opt/homebrew/lib/python3.10/site-packages/pymongo/synchronous/collection.py\", line 401, in __call__\r\n    raise TypeError(\r\nTypeError: 'Collection' object is not callable. If you meant to call the 'insert_one' method on a 'Database' object it is failing because no such method exists.\r\n\r\nHelp is appreciated!! ",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/18/comments",
    "author": "Knallli",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-06T16:12:16Z",
        "body": "I had datetime preinstalled from other projects but just updated requirements.txt to help with this. Thanks for bringing this up. also you have to put config in the base directory. Please let me know if the issue persists."
      },
      {
        "user": "Knallli",
        "created_at": "2024-12-06T16:17:54Z",
        "body": "Thanks!\r\n\r\nhowever I cannot run the mongo setup if the config is only in the base directory. What python version are you using for this? 3.10-3.12 all have the same behaviour. For it to not error out instantly I have to copy the config.py into the helper folder"
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-06T19:02:47Z",
        "body": "yes you are right. this isn't to do with python version but the file location. i have moved the mongo set up to base and it should work now. Thank you for pointing this out and my apologies. Please let me know if the set up works. Thank you!! :)"
      },
      {
        "user": "ven7782",
        "created_at": "2024-12-06T19:54:06Z",
        "body": "I had the same issues and I fixed it myself. I can issue a PR later today."
      },
      {
        "user": "Knallli",
        "created_at": "2024-12-06T21:51:35Z",
        "body": "Some problems still persist with the changes. I changed Line 4 to \"from datetime import datetime\"\r\n\r\nI still get TypeError: 'Collection' object is not callable. If you meant to call the 'insert_one' method on a 'Database' object it is failing because no such method exists. from the function in line 83"
      },
      {
        "user": "ven7782",
        "created_at": "2024-12-06T21:55:53Z",
        "body": "@Knallli  datetime has nothing to do with TypeError: 'Collection' object is not callable error. Are you a developer?"
      },
      {
        "user": "Knallli",
        "created_at": "2024-12-06T21:59:35Z",
        "body": "I know.. I did not want to open another issue for this. It’s two seperate problems"
      },
      {
        "user": "ven7782",
        "created_at": "2024-12-06T22:01:16Z",
        "body": "Wait for my PR later in the day and do a fresh pull after that."
      },
      {
        "user": "Knallli",
        "created_at": "2024-12-07T00:48:58Z",
        "body": "database preperation works now by changing line 82 to `collection = db.market_status` "
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-07T03:09:29Z",
        "body": "I'll close the issue as I just merged the PR. Great work"
      }
    ]
  },
  {
    "number": 16,
    "title": "The trading_client and ranking_client fails at rank_collection.find_one with unsubscriptable NoneType object. ",
    "created_at": "2024-12-05T17:03:23Z",
    "closed_at": "2024-12-05T19:59:19Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/16",
    "body": " % python trading_client.py \r\n2024-12-05 11:55:24 - INFO - Market is open. Waiting for 60 seconds.\r\n2024-12-05 11:55:24 - INFO - Calling NASDAQ 100 to retrieve tickers.\r\n2024-12-05 11:55:24 - INFO - Successfully retrieved NASDAQ 100 tickers.\r\n2024-12-05 11:55:25 - INFO - Successfully inserted NASDAQ 100 tickers into MongoDB.\r\n2024-12-05 11:55:25 - INFO - MongoDB connection closed.\r\nTraceback (most recent call last):\r\n  File \"AmpyFin/trading_client.py\", line 230, in <module>\r\n    main()\r\n  File \"AmpyFin/trading_client.py\", line 111, in main\r\n    rank = rank_collection.find_one({'strategy': strategy.__name__})['rank']\r\nTypeError: 'NoneType' object is not subscriptable\r\n",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/16/comments",
    "author": "sukhcs",
    "comments": [
      {
        "user": "sukhcs",
        "created_at": "2024-12-05T17:29:19Z",
        "body": "Even though the trading_client has a connection with mongodb and is able to load ndaq100_stickers but it fails to create a collection for market_status in mongodb. Need more error handling around external api calls."
      },
      {
        "user": "sukhcs",
        "created_at": "2024-12-05T19:17:20Z",
        "body": "This was solved by creating a \"market_status\" collection in mongodb. I'll send a pull request for creating this collection at the setup time. @yeonholee50 "
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T19:50:53Z",
        "body": "Just finished updating market status initialization in mongo_setup.py script in helper folder. Thank you for pointing this out. Please take a look and if you approve, close the issue. Otherwise, please lmk. Thanks!!!"
      }
    ]
  },
  {
    "number": 14,
    "title": "Error running ranking and trading client : TypeError: model_schema() got an unexpected keyword argument 'generic_origin'",
    "created_at": "2024-12-05T16:37:43Z",
    "closed_at": "2024-12-05T17:00:57Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/14",
    "body": "Getting an error when running ranking_client and trading_client. I am on Python 3.11.10.\r\n\r\n>python ranking_client.py\r\nTraceback (most recent call last):\r\n  File \"\\AmpyFin\\ranking_client.py\", line 12, in <module>\r\n    from alpaca.trading.client import TradingClient\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\alpaca\\trading\\__init__.py\", line 1, in <module>\r\n    from alpaca.trading.client import *\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\alpaca\\trading\\client.py\", line 5, in <module>\r\n    from alpaca.common import RawData\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\alpaca\\common\\__init__.py\", line 1, in <module>\r\n    from alpaca.common.models import *\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\alpaca\\common\\models.py\", line 6, in <module>\r\n    class ValidateBaseModel(BaseModel, validate_assignment=True):\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_model_construction.py\", line 226, in __new__\r\n    complete_model_class(\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_model_construction.py\", line 658, in complete_model_class\r\n    schema = cls.__get_pydantic_core_schema__(cls, handler)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\main.py\", line 702, in __get_pydantic_core_schema__\r\n    return handler(source)\r\n           ^^^^^^^^^^^^^^^\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_schema_generation_shared.py\", line 84, in __call__       \r\n    schema = self._handler(source_type)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 612, in generate_schema        \r\n    schema = self._generate_schema_inner(obj)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 881, in _generate_schema_inner \r\n    return self._model_schema(obj)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\\anaconda3\\envs\\ampyfin\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 707, in _model_schema\r\n    model_schema = core_schema.model_schema(\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: model_schema() got an unexpected keyword argument 'generic_origin'",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/14/comments",
    "author": "sukhcs",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T16:55:17Z",
        "body": "There seems to be a compatability issue with the current version of Python with pydantic. You may need to downgrade your Python version and then retry. I will look into this seperately"
      },
      {
        "user": "sukhcs",
        "created_at": "2024-12-05T17:00:57Z",
        "body": "Thanks, I tried Python 3.10 and it works now."
      }
    ]
  },
  {
    "number": 13,
    "title": "Introduce threading so each strategy can run on its own instead of waiting for the next",
    "created_at": "2024-12-05T14:36:07Z",
    "closed_at": "2024-12-07T22:45:33Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/13",
    "body": null,
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/13/comments",
    "author": "yeonholee50",
    "comments": [
      {
        "user": "maks1m",
        "created_at": "2024-12-07T08:36:20Z",
        "body": "In terms of Python you would need MultiProcessing, not multithreading. Because of GIL threading is ok only for IO operations but not for CPU intense logic."
      },
      {
        "user": "fschatbot",
        "created_at": "2024-12-07T14:37:38Z",
        "body": "I don't think we need to do this. Instead, we should optimize what we are doing right now.\r\nFor example, run the ranking once and gather the signals and rate them. Now the next time we want to do this we don't re-calculate everything. Instead we simply look for the new data and run it on that. Shouldn't take that long and shouldn't cause bottlenecks given that we are evaluating it every ~30 minutes.\r\n\r\nBut sure, this will definitely help"
      }
    ]
  },
  {
    "number": 9,
    "title": "Create a Well Documented README.md for set up process",
    "created_at": "2024-12-05T14:30:13Z",
    "closed_at": "2024-12-24T13:29:55Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/9",
    "body": "A lot have been complaining that the set up process is complex, especially involving MongoDB, so I'm making this an issue to get it resolved as soon as possible so people can start using it",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/9/comments",
    "author": "yeonholee50",
    "comments": [
      {
        "user": "NitinDatta8",
        "created_at": "2024-12-12T19:45:07Z",
        "body": "I had similar issues with setup of the collections rank. \r\nRunning the trading_client.py during market hours for the FIRST TIME leads to an error as it cannot find the ranks collection in trading_simulator database. \r\n\r\nMaybe we can fix that by assigning inital ranks in setup.py"
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-24T13:29:55Z",
        "body": "completed"
      }
    ]
  },
  {
    "number": 7,
    "title": "use correct nasdaq benchmark",
    "created_at": "2024-12-05T13:50:50Z",
    "closed_at": "2024-12-05T13:57:03Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/7",
    "body": "The Nasdaq benchmark calculation is wrong because the `NDAQ` ticker is the stock ticker for the Nasdaq company, while `QQQ` is the main ETF that tracks the Nasdaq-100. This PR addresses the issue.",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/7/comments",
    "author": "Newtoniano",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T13:56:59Z",
        "body": "lgtm thank you"
      }
    ]
  },
  {
    "number": 6,
    "title": "Ignore and delete pycache and vscode settings files",
    "created_at": "2024-12-05T11:52:09Z",
    "closed_at": "2024-12-05T12:55:48Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/pull/6",
    "body": "`__pycache__` files should not be committed to repositories, this PR deletes the files and ignores them for the future, along with `.vscode` settings files. \r\n\r\nBy the way, please read your Reddit chat messages when you can, as I've sent a few ideas for future improvements to the project. ",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/6/comments",
    "author": "Newtoniano",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T12:55:52Z",
        "body": "LGTM. Thank you. I'll take a look at reddit for your suggestions"
      }
    ]
  },
  {
    "number": 5,
    "title": "Simplication and Speed",
    "created_at": "2024-12-05T11:21:51Z",
    "closed_at": "2024-12-07T22:50:41Z",
    "labels": [],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/5",
    "body": "First of all,\r\nI would like to say I am impressed by your coding caliber. The code looks awesome, but I do have a few improvements which could potentially speed up your work/code.\r\n\r\n1. You should make use of `pandas_ta`. It's a library that has a hundreds of indicators already pre-built into it. This way you don't need to write the indicators yourself.\r\n2. Every single strategy in `v2` you always end it with the following code:\r\n```py\r\n   `#` Determine action and quantity  \r\n   if sentiment >= 81:  \r\n      action = \"strong buy\"  \r\n      quantity = min(int(max_investment // current_price), int(account_cash // current_price))  \r\n   elif 61 <= sentiment <= 80:  \r\n      action = \"buy\"  \r\n      quantity = min(int(max_investment // current_price), int(account_cash // current_price))  \r\n   \r\n   elif 21 <= sentiment <= 40 and portfolio_qty > 0:  \r\n      action = \"sell\"  \r\n      quantity = min(portfolio_qty, max(1, int(portfolio_qty * 0.5)))  \r\n   elif sentiment <= 20 and portfolio_qty > 0:  \r\n      action = \"strong sell\"  \r\n      quantity = min(portfolio_qty, max(1, int(portfolio_qty * 0.5)))  \r\n   else:  \r\n      action = \"hold\"  \r\n      quantity = 0  \r\n   return action, quantity, ticker  \r\n```\r\nYou can convert this into a wrapper function and wrap your strategies with this.\r\n\r\nThese two steps should reduce the amount of code you see on the screen for a single strategy. It will also make it more robust, error-proof, and easier to modify. Also this equals writing less code in future which I guess is bonus.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/5/comments",
    "author": "fschatbot",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T12:54:11Z",
        "body": "Thank you for your suggestion. Yes, I was thinking of doing the same as well and thinking of implementing the changes some time this ~ next week for this as well. I will take a look into pandas_ta. Sounds interesting"
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-07T22:50:41Z",
        "body": "I have implemented using pandas_ta now. The parameters will later be adjustable - especially the period part which I set to max for now. - In essence I created a long term bot"
      }
    ]
  },
  {
    "number": 2,
    "title": "Occasinal Crashing Every 2 Weeks",
    "created_at": "2024-12-04T13:25:38Z",
    "closed_at": "2024-12-07T22:49:33Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/yeonholee50/AmpyFin/issues/2",
    "body": "There is a current issue with the training model where it crashes at most once every 2 weeks - I've been keeping an eye on it and restarting manually when this happens. If someone can create a script or some sort of process where the ranking and trading clients restart after crash, this would be highly appreciated. Please reach out if you have any questions.",
    "comments_url": "https://api.github.com/repos/yeonholee50/AmpyFin/issues/2/comments",
    "author": "yeonholee50",
    "comments": [
      {
        "user": "yeonholee50",
        "created_at": "2024-12-05T02:51:12Z",
        "body": "Update: I figured out it's a HTTPS Connection Error so I will take a further look at it in the coming days to either resolve it or find a workaround"
      },
      {
        "user": "maks1m",
        "created_at": "2024-12-07T08:33:02Z",
        "body": "Do you have a stacktrace from the error?"
      },
      {
        "user": "yeonholee50",
        "created_at": "2024-12-07T22:49:31Z",
        "body": "> Do you have a stacktrace from the error?\r\nI was able to fix this when implementing threading. Essentially I was calling too many mongo instances in rank which was flooding connections in mongodb. It should be fixed now.\r\n"
      }
    ]
  }
]