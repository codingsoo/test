[
  {
    "number": 33,
    "title": "Add option for `src` layout",
    "created_at": "2025-01-17T16:21:11Z",
    "closed_at": "2025-01-17T16:56:27Z",
    "labels": [],
    "url": "https://github.com/fpgmaas/cookiecutter-uv/pull/33",
    "body": "**PR Checklist**\r\n\r\n- [x] A description of the changes is added to the description of this PR.\r\n- [ ] If there is a related issue, make sure it is linked to this PR.\r\n- [x] If you've fixed a bug or added code that should be tested, add tests!\r\n- [x] Documentation in `docs` is updated\r\n\r\n**Description of changes**\r\n\r\nAdd a new argument; **layout**, which has values \"flat\"` or `\"src\"` and defaults to `\"flat\"`.\r\n\r\n- `\"flat\"`: Places the Python module in the root directory.\r\n- `\"src\"`: Organizes the project by placing the Python module inside a `src` directory.\r\n\r\nCurrently, we only test that the `make test` commands functions as expected in the unit tests. Ideally, we'd also test if the documentation functions as expected, and if tools like `mypy` and `deptry` work as expected. I think it would be good to overhaul the testing a bit, but I'll leave that for a follow-up PR.",
    "comments_url": "https://api.github.com/repos/fpgmaas/cookiecutter-uv/issues/33/comments",
    "author": "fpgmaas",
    "comments": [
      {
        "user": "salilcbi",
        "created_at": "2025-01-17T17:14:56Z",
        "body": "Thank you Florian!!!"
      }
    ]
  },
  {
    "number": 30,
    "title": "Fix license file creation",
    "created_at": "2024-12-04T14:18:36Z",
    "closed_at": "2024-12-19T06:21:39Z",
    "labels": [],
    "url": "https://github.com/fpgmaas/cookiecutter-uv/pull/30",
    "body": "**PR Checklist**\r\n\r\n- [x] A description of the changes is added to the description of this PR.\r\n- [x] If there is a related issue, make sure it is linked to this PR.\r\n- [x] If you've fixed a bug or added code that should be tested, add tests!\r\n- [x] Documentation in `docs` is updated\r\n\r\n**Description of changes**\r\n\r\nI total agree with your suggestion from #29 and as promised here is my PR.\r\n\r\nI have added the following new license files:\r\n\r\n- LICENSE_MIT\r\n- LICENSE_BSD\r\n- LICENSE_ISC\r\n- LICENSE_APACHE\r\n- LICENSE_GPL\r\n\r\nThe content was either from the official raw txt files (GPL and APACHE) or from Github.\r\nThe previous LICENSE file is now deleted.\r\n\r\nFurther, I have update post generation script to handle the different licenses and added tests for the various commands.\r\n<!-- Please state what you've changed and how it might affect the user. -->\r\n\r\nThe changes do not affect the user directly, because now only the correct licenses are provided.\r\n\r\nJust to inform:\r\nApache and GPLv3 are provided as are, since both don't include a copyright from the developer. They both only include information how to handle the licenses in the projects correctly. Changing those Licenses is not permitted, so they don't author and copyright of the users are not included.\r\n",
    "comments_url": "https://api.github.com/repos/fpgmaas/cookiecutter-uv/issues/30/comments",
    "author": "MaKaNu",
    "comments": [
      {
        "user": "fpgmaas",
        "created_at": "2024-12-17T19:45:53Z",
        "body": "Sorry for the late reply! This looks great. Are you able to pull `main` and run the `pre-commit` hooks?"
      },
      {
        "user": "MaKaNu",
        "created_at": "2024-12-18T15:30:26Z",
        "body": "done. Having pre-commit only helps if I had installed the hooks. XD"
      },
      {
        "user": "fpgmaas",
        "created_at": "2024-12-18T17:16:59Z",
        "body": "@MaKaNu Hey, sorry; looks like there is still a merge confict with `uv.lock`. Could you try to fetch latest changed from upstream? You can then just do `rm uv.lock && uv lock` to fix the conflict."
      },
      {
        "user": "MaKaNu",
        "created_at": "2024-12-18T21:38:14Z",
        "body": "In the meantime, two other versions were already updated again. But now it seems fine"
      }
    ]
  },
  {
    "number": 21,
    "title": "Fix action errors when codecov is \"n\" and replaced hardcoded names with placeholders",
    "created_at": "2024-10-28T19:14:37Z",
    "closed_at": "2024-11-01T09:24:26Z",
    "labels": [],
    "url": "https://github.com/fpgmaas/cookiecutter-uv/pull/21",
    "body": "**PR Checklist**\r\n\r\n- [x] A description of the changes is added to the description of this PR.\r\n- [x] If there is a related issue, make sure it is linked to this PR.\r\n- [ ] If you've fixed a bug or added code that should be tested, add tests! \r\nNot sure how to do that as it already throws  an error on github actions when creating a repo without codecov but that kind of testing is not part of the current framework and would require something like act to test the actions.\r\nAlternatively one could use a script that extracts the run command. But I am not sure if that is very useful in the end as it can't take all previous steps into account.\r\n- [x] Documentation in `docs` is updated\r\n\r\n**Description of changes**\r\n\r\nThe Contributing.md contained a reference to Cookiecutter PyPackage which is replaced with an appropriate placeholder to avoid that adapting this section is overlooked by someone.\r\nAlso the hard-coded name of the maintainer in mkdocs.yml was replaced with a placeholder.\r\n\r\nThe \"Run tests\" action step in main.yml is changed such that it runs successfully also without codecov dependencies installed.\r\n\r\nDocs are rewritten to make clear that no coverage report is created without codecov set to \"y\"\r\n",
    "comments_url": "https://api.github.com/repos/fpgmaas/cookiecutter-uv/issues/21/comments",
    "author": "pancan21",
    "comments": [
      {
        "user": "fpgmaas",
        "created_at": "2024-11-01T09:22:11Z",
        "body": "Thanks for your contribution!"
      },
      {
        "user": "pancan21",
        "created_at": "2024-11-04T16:39:07Z",
        "body": "@fpgmaas  Are you interested in running actions to check if all actions run properly across the different configurations? if yes I am happy to help."
      },
      {
        "user": "fpgmaas",
        "created_at": "2024-11-04T17:16:47Z",
        "body": "@pancan21 yes, that sounds like a good idea. Although I am not sure if that should be part of the actions. I have been playing with the idea of improving the unit tests as follows: Within the unit tests we call the `cookies.bake(extra_context={...})` with a variety of configurations. And then for each 'baked' project, we run `poetry install` in it and run the unit tests to verify that the unit tests work as expected. What do you think?"
      },
      {
        "user": "pancan21",
        "created_at": "2024-11-04T18:45:56Z",
        "body": "@fpgmaas but I think that would not catch any errors with the github actions (see fix in my pull request) only a subset of the commands e.g. unittests\n\nTo ensure that the actions will run as configured one would need to not only do the unit tests but also run all other commands within the actions or better the actions themself on something like a test repo to avoid manual additional labour. Maybe there is some other alternatives. But I can have a look if that is interesting :)"
      }
    ]
  }
]