[
  {
    "number": 7,
    "title": "Restore missing includes",
    "created_at": "2025-01-06T02:42:16Z",
    "closed_at": "2025-01-06T03:09:23Z",
    "labels": [],
    "url": "https://github.com/noahpop77/Papy/pull/7",
    "body": null,
    "comments_url": "https://api.github.com/repos/noahpop77/Papy/issues/7/comments",
    "author": "dilijev",
    "comments": [
      {
        "user": "noahpop77",
        "created_at": "2025-01-06T03:09:23Z",
        "body": "Added the changes manually before PR was made"
      }
    ]
  },
  {
    "number": 5,
    "title": "makefile: add build dependency tracking; order entries so that vars are declared before use",
    "created_at": "2024-12-31T08:49:17Z",
    "closed_at": "2025-01-02T03:49:20Z",
    "labels": [],
    "url": "https://github.com/noahpop77/Papy/pull/5",
    "body": "Sometimes after you edit a header, you need to rebuild all of the files that depended on it. It turns out that gcc has a mechanism for this and there's a well-known pattern to add to makefiles to ensure that this works correctly.\r\n\r\nRefactored so that common compiler flags to multiple platforms are in a single variable.\r\n\r\nReordered variable declarations so they're definitely defined before they are used.",
    "comments_url": "https://api.github.com/repos/noahpop77/Papy/issues/5/comments",
    "author": "dilijev",
    "comments": [
      {
        "user": "noahpop77",
        "created_at": "2025-01-02T03:49:15Z",
        "body": "Tracked discussion notes:\r\n\r\nDoug\r\nMake by default builds files that have been touched directly.\r\nSo yes incremental\r\nBut correct incremental builds is a dependency tracking problem and is kind of famously hard\r\nIf a b and c all depend on H, and you edit H, make rebuilds nothing\r\nA B C are all .cpp and H is a .hpp\r\n\r\nBerna\r\nI always ran make rebuild while testing to just rebuild everything even though it was slower it was more consistent\r\nSo the new changes are effectively a bit more manual of a structure to track dependencies and rebuild things as we specify\r\nI get it\r\n\r\nDoug\r\nYeah it's the \"consistent\" thing. If you can trust your rebuilds to rebuild at least everything that depends on the actual changes, you're doing great. Perfection is getting the system to incrementally rebuild exactly only what needs rebuilding. With C++ that's nearly impossible\r\nIn arbitrarily complex projects anyway\r\nSo there's always a time where you might second guess a build wasn't correctly incremental and then you need to clean and rebuild everything to be sure. When your full build starts to take 5-30 minutes, or 3+ hours in the case of Chromium, that's a really big deal"
      }
    ]
  }
]