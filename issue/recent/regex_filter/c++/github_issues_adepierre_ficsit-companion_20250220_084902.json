[
  {
    "number": 15,
    "title": "Nitro Rocket fuel is incorrect",
    "created_at": "2024-11-06T14:05:30Z",
    "closed_at": "2024-11-06T23:55:29Z",
    "labels": [],
    "url": "https://github.com/adepierre/ficsit-companion/issues/15",
    "body": "The ratios for nitro rocket fuel are all wrong. \r\n\r\nIt should be (in the game)\r\n\r\n100 mÂ³/min ofÂ Fuel\r\n100 units/min ofÂ Sulfur\r\n75 mÂ³/min ofÂ Nitrogen Gas\r\n50 units/min coal\r\n\r\n\r\nIt currently is (in ficsit companion)\r\n\r\n120 mÂ³/min ofÂ Fuel\r\n120 units/min ofÂ Sulfur\r\n90 mÂ³/min ofÂ Nitrogen Gas\r\n60 units/min coal",
    "comments_url": "https://api.github.com/repos/adepierre/ficsit-companion/issues/15/comments",
    "author": "MaddJhin",
    "comments": [
      {
        "user": "adepierre",
        "created_at": "2024-11-06T19:49:27Z",
        "body": "Oh thanks for the report. That's weird cause it's taken directly from the game files. Maybe they changed the value since the release of 1.0 or the file was not up to date with the in-game values ðŸ¤”"
      }
    ]
  },
  {
    "number": 14,
    "title": "100% CPU usage when GPU acceleration is disabled in the browser",
    "created_at": "2024-10-09T03:32:01Z",
    "closed_at": "2024-10-09T17:45:11Z",
    "labels": [],
    "url": "https://github.com/adepierre/ficsit-companion/issues/14",
    "body": "I get 100% CPU usage when the GPU acceleration setting is disabled in chrome.\r\nI was wondering why sometimes my PCs fans started going crazy until I noticed it was this app in my browser.\r\n\r\nMaybe you can detect this browser setting and give out an error or limit the fps, or add something to the README, in case you can't change it. ",
    "comments_url": "https://api.github.com/repos/adepierre/ficsit-companion/issues/14/comments",
    "author": "gitishi",
    "comments": [
      {
        "user": "adepierre",
        "created_at": "2024-10-09T08:07:53Z",
        "body": "Oh indeed it relies on vsync to limit the FPS so if GPU is disabled there is no limit anymore. Thanks for the report!"
      }
    ]
  },
  {
    "number": 9,
    "title": "Added count of Machines Pr. Item",
    "created_at": "2024-08-25T08:03:07Z",
    "closed_at": "2024-08-25T21:47:37Z",
    "labels": [],
    "url": "https://github.com/adepierre/ficsit-companion/pull/9",
    "body": "I like to build my factories with 1 area for Iron Rod Constructors, 1 area for Iron Plate Constructors and so forth with a bus connecting them.\r\nThough when planning a factory in a planner like this it can be easier to have each Iron Rod consumer have its own Iron Rod Constructor.\r\nSo this overview gives me the best of both worlds: The ability to have a clear Plan, and the ability to know how many machines I need in each area.",
    "comments_url": "https://api.github.com/repos/adepierre/ficsit-companion/issues/9/comments",
    "author": "Borimino",
    "comments": [
      {
        "user": "adepierre",
        "created_at": "2024-08-25T12:42:09Z",
        "body": "Hello, thank you for the PR\r\n\r\nA few minor things:\r\n- machinesPrItem should be renamed machines_per_item to be consistent with the coding style (same thing for the text separator, there is no real reason to write \"pr\" instead of \"per\" just to save 1 letter)\r\n- the IsItemHovered if and SetTooltip call should be after the EndDisabled to prevent it to be disabled/semi transparent\r\n\r\nAlso someone else mentioned a \"all items\" section on the left panel. I think this matches this demand too. But I'm not convinced about displaying all like that cause that may be a long list. Wonder if there is another solution to have something cleaner/less bulky ðŸ¤”"
      },
      {
        "user": "Borimino",
        "created_at": "2024-08-25T13:47:08Z",
        "body": "The IsItemHovered if and SetTooltip call I had copied along with the rest of the block from the other blocks above, but now I have fixed it for all of them."
      },
      {
        "user": "adepierre",
        "created_at": "2024-08-25T13:52:04Z",
        "body": "Yeah I fixed them yesterday in 6a9d1a3622257e967ea925da24e34e1ef94ef395. You may have pulled the repo before the fix.\r\n\r\nAlso, from what I understand, your solution will duplicate machines for recipes with multiple outputs, correct?"
      },
      {
        "user": "Borimino",
        "created_at": "2024-08-25T14:24:49Z",
        "body": "Yes, it did duplicate machines for recipes with multiple outputs, I hadn't thought of that.\r\nNow it adds the first item on the same line as the machine, and additional items on indented lines beneath the first item."
      },
      {
        "user": "adepierre",
        "created_at": "2024-08-25T15:12:02Z",
        "body": "Thanks, will take some time a bit later to take a look and merge it"
      }
    ]
  },
  {
    "number": 6,
    "title": "Tidying up (No functional changes)",
    "created_at": "2024-08-21T12:26:37Z",
    "closed_at": "2024-08-21T20:08:36Z",
    "labels": [],
    "url": "https://github.com/adepierre/ficsit-companion/pull/6",
    "body": "A couple of things I noticed while browsing the code (and before realizing the changes I wanted to propose were actually already implemented :^) )\r\n\r\n- Convert some `reinterpret_cast` into more appropriate `dynamic_cast`s for downcasting in a virtual hierarchy.\r\n- Avoid any string allocation in FractionalNumber until they're actually used. \r\n  I noticed this type is used for arithmetic operations in the rate update and doing a bunch of unnecessary allocation there, at least in debug mode.\r\n\r\nSorry for the boring PR and thanks for making and publishing this tool, I'll definitely use it when 1.0 finally comes out!\r\n ",
    "comments_url": "https://api.github.com/repos/adepierre/ficsit-companion/issues/6/comments",
    "author": "Senryoku",
    "comments": [
      {
        "user": "adepierre",
        "created_at": "2024-08-21T15:58:32Z",
        "body": "Hello, thank you for the PR!\r\n\r\nI think reinterprete_cast is a better fit in this case, we already use polymorphism to check the type of the node using the virtual GetKind() function. So for me there is no real reason here to use the slower dynamic_cast (not that it makes a real performance difference overall but on principle).\r\n\r\nRegarding the std::optional for the strings, I'm curious what's the reason behind it? You save the std::string 32 bytes but instead you create a std::optional that takes 40 bytes."
      },
      {
        "user": "Senryoku",
        "created_at": "2024-08-21T16:37:51Z",
        "body": "> Hello, thank you for the PR!\r\n\r\nHi, my pleasure! :)\r\n\r\n> I think reinterprete_cast is a better fit in this case, we already use polymorphism to check the type of the node using the virtual GetKind() function. So for me there is no real reason here to use the slower dynamic_cast (not that it makes a real performance difference overall but on principle).\r\n\r\nI'd only use `reinterpret_cast` when absolutely necessary because it doesn't show a clear intent (and the intended use cases can probably even be replaced by a `std::bit_cast` nowadays I guess?). I choose `dynamic_cast` here because I think it's technically the safer option, but you're right, it's overkill if you can guarantee that the type is correct. TBH, I would have used `static_cast` directly here if this was my own project and didn't want to be extra cautious.\r\n\r\n> Regarding the std::optional for the strings, I'm curious what's the reason behind it? You save the std::string 32 bytes but instead you create a std::optional that takes 40 bytes.\r\n\r\nYes, it's larger, but it prevents `std::string` initialization both at construction and every time the value changes (the assignment in `FractionalNumber::UpdateValue`). I assumed small string optimization would prevent this but I was seeing a lot of allocations and deallocation in `UpdateNodesRate` - maybe it is not used in debug build?\r\nIf it is actually beneficial will depend on the `std::string` implementation, but I also think this makes the intent clearer, and it guarantees this won't be a problem if the STL implementation happens to allocate unconditionally when constructing a `std::string`. "
      },
      {
        "user": "Senryoku",
        "created_at": "2024-08-21T17:10:24Z",
        "body": "I changed the casts again to `static_cast`s (including one that was previously a `dynamic_cast`, while properly guarded by the value of `GetKind()`).\r\nNo runtime difference compared to `reinterpret_cast`, but at least guarantees that the types are compatible at compile time (who knows, maybe it'll help someday when refactoring)."
      },
      {
        "user": "adepierre",
        "created_at": "2024-08-21T20:08:05Z",
        "body": "Yeah looks fine to me thanks.\r\n\r\nFor the strings I'm not really worried about the performances for the desktop version as it is currently running on probably even a potato. I'm a bit more concerned about the web version as I have literally no idea how to profile this after wasm compilation.\r\n\r\nAnyway, I agree with the intent being clearer with the optional."
      }
    ]
  }
]