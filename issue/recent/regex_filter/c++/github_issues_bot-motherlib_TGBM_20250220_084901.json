[
  {
    "number": 25,
    "title": "Public interface for json",
    "created_at": "2024-09-30T13:27:04Z",
    "closed_at": "2024-11-20T10:06:55Z",
    "labels": [
      "module: json",
      "enhancement"
    ],
    "url": "https://github.com/bot-motherlib/TGBM/issues/25",
    "body": "- [x] parsing\r\n- [x] format\r\n- [x] serialize",
    "comments_url": "https://api.github.com/repos/bot-motherlib/TGBM/issues/25/comments",
    "author": "sabudilovskiy",
    "comments": [
      {
        "user": "kelbon",
        "created_at": "2024-10-09T20:53:03Z",
        "body": "- [x] Streaming parser, reuses error code (which boost json uses already)\r\n\r\n```cpp\r\n\r\nT value;\r\n// stream_parser is not template, its template contructor just initalizes internal generator\r\n// may be add std::pmr::memory_resource as second argument in future\r\ntgbm::json::stream_parser parser(value);\r\nio_error_code ec; // boost system error code alias (already exists)\r\nparser.feed(data, false, ec);\r\n\r\nif (ec)\r\n  handle(ec);\r\nparser.feed(data, true, ec); // last chunk of data\r\nif (ec)\r\n  handle(ec);\r\n\r\n```\r\n\r\ntgbm::json::value - for now alias to boost::json::value, public interface is:\r\n\r\n```cpp\r\n\r\njson::value from_string(string_view);\r\n\r\nstd::string to_string(const tgbm::json::value&);\r\n\r\n```\r\n\r\n- [x] parsing value from json:\r\n\r\n```cpp\r\n// short-cut for creating stream parser and parsing string\r\n// throws on error\r\n\r\ntemplate<typename T>\r\nvoid from_json(std::string_view, T& out);\r\n\r\n// short-cut default init + from json\r\ntemplate<typename T>\r\nT from_json(std::string_view);\r\n\r\n// uses dom parsing\r\n// throws on error\r\n\r\ntemplate<typename T>\r\nvoid from_json(const json::value&, T& out);\r\n\r\n// short-cut default init + from json\r\ntemplate<typename T>\r\nT from_json(const json::value&);\r\n\r\n// Note: i think version with reference may be used to patch value, not fully parsing (disable check if all fields filled)\r\n// ? or may be add this option on level of stream parser\r\n\r\n```\r\n\r\nFuture work:\r\n\r\n- [x] serializing value to json:\r\n\r\n```cpp\r\n\r\n// uses stream-serialization\r\nstruct json_serialize_options {\r\n  bool pretty = true;\r\n// some other options in future...\r\n};\r\ntemplate<typename T>\r\nstd::string serialize(const T&, json_serialize_options = {});\r\n\r\ntemplate<typename T>\r\ntgbm::json::value to_json(const T&);\r\n\r\n```\r\n\r\n- [x] json-based formatters (json + option to write empty fields as json nulls)\r\n\r\n```cpp\r\n\r\nfmt::print(\"{}\", type_from_api); // prints as json\r\nfmt::print(\"{:v}\", type_from_api); // 'v' - verbose prints as json with nulls on place of empty fields. '!v' - not verbose (default)\r\nfmt::print(\"{:p}\", type_from_api); // 'p' - pretty, by default, '!p' - not pretty\r\n\r\n```\r\n\r\n"
      }
    ]
  }
]