[
  {
    "number": 28,
    "title": "Reapply CPP20 compatibility and enable check in CI",
    "created_at": "2024-11-25T11:48:46Z",
    "closed_at": "2025-01-07T08:12:54Z",
    "labels": [],
    "url": "https://github.com/eclipse-openbsw/openbsw/pull/28",
    "body": "Changes from previous PR #8 were overwritten. This reapplies them and enables CI builds for cpp 14,17 and 20.\n",
    "comments_url": "https://api.github.com/repos/eclipse-openbsw/openbsw/issues/28/comments",
    "author": "ThoFrank",
    "comments": [
      {
        "user": "ThoFrank",
        "created_at": "2024-11-25T12:08:46Z",
        "body": "@mthiede-acn2 could you please take a look? The changes from #8 are all done in one commit, but I had to patch one more file."
      },
      {
        "user": "marcmo",
        "created_at": "2024-12-12T12:00:38Z",
        "body": "Regarding the C++ 20 compatibility changes, some of them seem to be highly controversial. \r\nwhy is removing `volatile` valid in all those places? we cannot just remove it!\r\ngetting rid of volatile AND the compound assignment for sure gets rid of the warnings, but it changes the code.\r\n\r\nand..does it really make sense to get rid of compound assignments on volatile anyway?\r\nI'd rather NOT add C++ 20 support as long as we don't have the need...and then only do it after careful consideration. @matthiaskessler ?"
      },
      {
        "user": "ThoFrank",
        "created_at": "2024-12-12T12:46:15Z",
        "body": "I just reapplied the changes from #8. They were already approved and merged before the migration to GitHub.\nSo I didn't think it would be controversial. I combined all the changes from #8 into one commit. My changes are done in other commits"
      }
    ]
  },
  {
    "number": 20,
    "title": "Add doxygen github action to generate doc and doc coverage.",
    "created_at": "2024-11-13T07:47:54Z",
    "closed_at": "2024-11-25T11:12:35Z",
    "labels": [],
    "url": "https://github.com/eclipse-openbsw/openbsw/pull/20",
    "body": "Generated comprehensive documentation using Doxygen comments. Generated documentation coverage numbers using Covrxygen. Generating DoxygenWarningLog.txt, which includes warnings about undocumented elements.\r\n\r\nFiles Added\r\ndoxygen-build.yml: Workflow file to build the Doxygen documentation.\r\ndoxygen-publish.yml: Workflow file to publish the Doxygen documentation.\r\nDoxyfile: Configuration file for Doxygen.\r\nDoxygenMainPage.md: Main entry page for Doxygen  documentation.\r\nREADME.md: Updated to include instructions on how to generate and view the Doxygen documentation.",
    "comments_url": "https://api.github.com/repos/eclipse-openbsw/openbsw/issues/20/comments",
    "author": "shamitha-shashidhara",
    "comments": [
      {
        "user": "frankdarcyacn",
        "created_at": "2024-11-13T10:05:06Z",
        "body": "We need to be careful that `Doxyfile` in this PR does not conflict with the one currently in gerrit's referenceApp workspace main branch - that version has `GENERATE_XML=NO` whereas in this PR `GENERATE_XML=YES` (as needed to generate coverage).\r\nMaybe its easiest to set  `GENERATE_XML=YES` in gerrit first, but that would mean that XML is always generated, even when we just want HTML, and it would take twice as long (roughly). \r\n@marcmo - do we know when gerrit will next be synced to github?\r\nAlternatively, perhaps we could leave is at `GENERATE_XML=NO` and if we want to generate XML for coverage then change it on the command line like this...\r\n```\r\nsed -i '/GENERATE_XML.*=.*NO/c\\GENERATE_XML = YES' ./Doxyfile\r\ndoxygen Doxyfile\r\n```\r\nJust a thought."
      }
    ]
  },
  {
    "number": 7,
    "title": "C++20 support",
    "created_at": "2024-10-27T14:22:03Z",
    "closed_at": "2024-11-19T13:52:46Z",
    "labels": [],
    "url": "https://github.com/eclipse-openbsw/openbsw/issues/7",
    "body": "When porting (compatibly) from C++14 to C++20, I found that most prominently many previously valid uses of the volatile keyword are deprecated by C++20.\r\n\r\nE.g. enforcing explicit read-modify-write on volatile variables to reflect separate memory accesses, as in: A |= 3; which would end up in A = A | 3;\r\n\r\nIn other cases in OpenBSW, volatile could be removed as in function return types, e.g. platforms/s32k1xx/bsp/bspInterruptsImpl/include/interrupts/suspendResumeAllInterrupts.h, and in platforms/s32k1xx/bsp/bspAdc/include/adc/Adc.h:251, where optimization-prevention is already ensured by the access to the still volatile variable fADC.SC1\r\n\r\nI can prepare a pull request, but first wanted to discuss if C++20 support would be welcome at this point. Or if OpenBSW should stay C++14-only.\r\n",
    "comments_url": "https://api.github.com/repos/eclipse-openbsw/openbsw/issues/7/comments",
    "author": "rolandreichweinbmw",
    "comments": [
      {
        "user": "marcmo",
        "created_at": "2024-11-07T14:20:01Z",
        "body": "I'd say the codebase should support **C++ 14** projects and thus the min. required C++ version should be 14. Nevertheless, it would be good to check with a **C++ 20** compiler if we are compatible and if new warnings can be avoided. So changes that do not sacrifice our **C++14** support would be possible!"
      },
      {
        "user": "rolandreichweinbmw",
        "created_at": "2024-11-07T16:04:37Z",
        "body": "Agree. The PR #8  covers exactly that."
      },
      {
        "user": "christian-schilling",
        "created_at": "2024-11-19T13:52:46Z",
        "body": "#8 has been merged"
      }
    ]
  },
  {
    "number": 6,
    "title": "Add release workflow",
    "created_at": "2024-10-25T14:37:43Z",
    "closed_at": "2024-11-06T14:46:14Z",
    "labels": [],
    "url": "https://github.com/eclipse-openbsw/openbsw/pull/6",
    "body": "Adds a release workflow which is triggered every time a tag matching `v*.*` is pushed.\r\n\r\nDocumentation matching the commit is built and attached.\r\n\r\nRelease Notes are empty for now. We need to think about how we want to handle them in the future.\r\nIt is always possible to add them manually after the action ran.",
    "comments_url": "https://api.github.com/repos/eclipse-openbsw/openbsw/issues/6/comments",
    "author": "ThoFrank",
    "comments": [
      {
        "user": "marcmo",
        "created_at": "2024-11-06T07:09:06Z",
        "body": "what about tags in the form `v*.*.*`, are those also considered?"
      },
      {
        "user": "ThoFrank",
        "created_at": "2024-11-06T07:52:47Z",
        "body": "Yes `v1.0.0` works too. You can see that in my fork.\r\n`v*.*` just enforces there is at least one `.`."
      }
    ]
  }
]