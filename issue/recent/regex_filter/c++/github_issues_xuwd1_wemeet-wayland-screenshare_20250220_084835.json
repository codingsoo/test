[
  {
    "number": 23,
    "title": "能否考虑开启 Sponsor，或者放一些赞助链接等",
    "created_at": "2025-02-07T06:57:30Z",
    "closed_at": "2025-02-19T18:05:00Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/issues/23",
    "body": "如题，项目很优秀，值得打赏\n但也请注意保护好自己\n这本质上还是在 hook 腾讯家的软件，腾讯对这个似乎非常反感\n建议用 github sponsor 或者 加密货币 等",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/23/comments",
    "author": "coke-poker-fiddle",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2025-02-19T18:05:00Z",
        "body": "谢谢你的慷慨建议！不过，目前没有开启赞助的计划，这个项目只是一个纯业余的项目，没有以此盈利的打算，并且我个人近期也没有太多精力投入到该项目的进一步开发中。但无论如何，谢谢你的好意！"
      }
    ]
  },
  {
    "number": 21,
    "title": "共享桌面报‘Failed to open library libopencv_core.so’错误",
    "created_at": "2025-01-11T17:31:17Z",
    "closed_at": "2025-01-13T02:57:25Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/issues/21",
    "body": "我的系統：\r\n```\r\nos: Arch linux\r\nopencv-cuda 4.11.0-1\r\n```\r\n尝试共享桌面，出现如下报错：\r\n```\r\n[hook] payload thread started\r\n[payload x11 sanitizer] picked window 0x2a00054 after 100 ms.\r\n[hook] stream node_id: 101\r\n[hook] portal status: running\r\n[payload SYNC] pipewire_fd acquired: 230\r\n[hook SYNC] pipewire_fd acquired: 230\r\n[hook SYNC] pipewire screencast object allocated\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  Failed to open library libopencv_core.so\r\n```\r\n尝试更换\r\n```\r\nopencv 4.11.0-1\r\nopencv 4.10.0-18\r\nopencv-cuda 4.10.0-18\r\n```\r\n均出现同样报错",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/21/comments",
    "author": "Conanzhou",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2025-01-12T05:55:01Z",
        "body": "这个问题大概是你的系统配置存在问题.\r\n1. 请尝试用`locate libopencv_core.so`确定opencv库被正确安装\r\n2. 请用`ldconfig -p | grep libopencv_core.so`确定opencv库能被`dlopen`找到"
      },
      {
        "user": "Conanzhou",
        "created_at": "2025-01-12T13:39:00Z",
        "body": "目测opencv库已经正确安装，相关的输出如下：\r\n```\r\n% locate libopencv_core.so\r\n/home/darkest/.conda/pkgs/libopencv-4.5.5-py310hc83fb77_10/lib/libopencv_core.so\r\n/home/darkest/.conda/pkgs/libopencv-4.5.5-py310hc83fb77_10/lib/libopencv_core.so.4.5.5\r\n/home/darkest/.conda/pkgs/libopencv-4.5.5-py310hc83fb77_10/lib/libopencv_core.so.405\r\n/home/darkest/.conda/pkgs/opencv-4.6.0-py310hefb4dc4_2/lib/libopencv_core.so\r\n/home/darkest/.conda/pkgs/opencv-4.6.0-py310hefb4dc4_2/lib/libopencv_core.so.4.6.0\r\n/home/darkest/.conda/pkgs/opencv-4.6.0-py310hefb4dc4_2/lib/libopencv_core.so.406\r\n/opt/JupyterLab/resources/jlab_server/lib/libopencv_core.so\r\n/opt/JupyterLab/resources/jlab_server/lib/libopencv_core.so.4.5.5\r\n/opt/JupyterLab/resources/jlab_server/lib/libopencv_core.so.405\r\n/opt/Mathematica/SystemFiles/Links/OpenCVLink/LibraryResources/Linux-x86-64/libopencv_core.so\r\n/usr/lib/libopencv_core.so\r\n/usr/lib/libopencv_core.so.4.11.0\r\n/usr/lib/libopencv_core.so.411\r\n/usr/lib/matlab/bin/glnxa64/libopencv_core.so.4.5\r\n/usr/lib/matlab/bin/glnxa64/libopencv_core.so.4.5.2\r\n```\r\n\r\n```\r\n% ldconfig -p | grep libopencv_core.so\r\n        libopencv_core.so.411 (libc6,x86-64) => /usr/lib/libopencv_core.so.411\r\n        libopencv_core.so (libc6,x86-64) => /usr/lib/libopencv_core.so\r\n```\r\n\r\n"
      },
      {
        "user": "xuwd1",
        "created_at": "2025-01-12T18:55:06Z",
        "body": "目前仍认为是你的环境存在问题，下面是一个基本的排查guideline：\r\n1. 检查是否使用了python virtualenv或者conda virtualenv？\r\n2. 你可以自己编写一个C++程序mock如下的代码，观察是否会遇到exception（摘取自wemeet-wayland-screenshare/hook_opencv.hpp）\r\n```cpp\r\n    libopencv_core_handle = dlopen(\"libopencv_core.so\", RTLD_LOCAL|RTLD_LAZY);\r\n    if(libopencv_core_handle == nullptr){\r\n      throw std::runtime_error(\"Failed to open library libopencv_core.so\");\r\n    }\r\n    libopencv_imgproc_handle = dlopen(\"libopencv_imgproc.so\", RTLD_LOCAL|RTLD_LAZY);\r\n    if(libopencv_imgproc_handle == nullptr){\r\n      throw std::runtime_error(\"Failed to open library libopencv_imgproc.so\");\r\n    }\r\n```\r\n3. 如果仍然不行，可以考虑手动将上列代码中的两个`.so`文件替换为绝对路径，如，将`libopencv_core.so`替换为`/usr/lib/libopencv_core.so`\r\n\r\n\r\n"
      },
      {
        "user": "Conanzhou",
        "created_at": "2025-01-13T01:59:30Z",
        "body": "已成功解决，非常感谢！\r\n1. 确实使用了conda virtualenv\r\n执行\r\n`pip install --upgrade  opencv-python`\r\n将虚拟环境里的opencv-python从4.7.0.72升级到4.10.0.84，问题得到解决"
      }
    ]
  },
  {
    "number": 17,
    "title": "add instructions on compiling on feodra and using this hook with flatpak",
    "created_at": "2024-12-28T07:06:49Z",
    "closed_at": "2024-12-29T09:48:38Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/pull/17",
    "body": "As the title said, this PR adds instructions on how to compile this on Fedora 41 and use it with flatpak-based Wemeet. ",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/17/comments",
    "author": "ProgramFan",
    "comments": [
      {
        "user": "catsout",
        "created_at": "2024-12-28T12:58:10Z",
        "body": "flatpak version already has this.  "
      },
      {
        "user": "ProgramFan",
        "created_at": "2024-12-29T03:55:42Z",
        "body": "This is strange. Screen sharing of the flatpak version does not work, unless I use this project and set these variables. "
      },
      {
        "user": "ProgramFan",
        "created_at": "2024-12-29T04:05:02Z",
        "body": "OK. The flatpak verion does have the opencv, libportal, libXdamage under its `lib` directory. But I don't know why its screen sharing does not work. I know it uses X11 under the hood. Can any one tell me how to use it without using this repo's hook?\r\n"
      },
      {
        "user": "ProgramFan",
        "created_at": "2024-12-29T09:48:38Z",
        "body": "OK. I finally found out that I mistakenly override the LD_PRELOAD. Reset it and the screen sharing works."
      }
    ]
  },
  {
    "number": 14,
    "title": "Better support for window sharing",
    "created_at": "2024-12-11T13:29:13Z",
    "closed_at": "2025-01-03T15:19:49Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/pull/14",
    "body": null,
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/14/comments",
    "author": "DerryAlex",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T13:59:00Z",
        "body": "这个是用来消除窗口录制时的黑边的功能吗？看起来还不错，但是辛苦补充一点简介和注释吧. 最近我感觉仓库突然热度增加了很多，有点忙不开了. 我近日先处理一下另一个PR，测试一下，随后处理本PR的合并."
      },
      {
        "user": "DerryAlex",
        "created_at": "2024-12-12T13:21:36Z",
        "body": "对，主要是想处理窗口录制时的黑边"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-18T06:31:52Z",
        "body": "本周末会对本PR进行测试与合并，还请稍等"
      }
    ]
  },
  {
    "number": 13,
    "title": "Simple lock-free framebuffer read & write",
    "created_at": "2024-12-11T03:49:13Z",
    "closed_at": "2024-12-14T15:28:17Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/pull/13",
    "body": "不太清楚 README 中所述功率是如何测得的，因此我并未测试实际的性能提升。\r\n\r\n~无锁的双缓存区应该会带来一些提升？~ 我很乐意补充我本地的性能测试结果，如果你可以告诉我如何评估性能的话。\r\n\r\n---\r\n\r\n此外，我并未仔细检查上下文的注释是否清理/修改妥当，如有不妥，敬请指正。",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/13/comments",
    "author": "Coekjan",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T07:22:24Z",
        "body": "谢谢你的工作！不过，我认为现在的改动还存在一些问题. 我想首先说明一下为何现在的设计中采用了锁：\r\n- 如你所见，我们的代码中framebuffer的参数是跟随pw的参数变化的\r\n- 在整个从payload写入，到hook读出的过程中，从始至终我们只利用fb中的一块内存作为中转\r\n- fb的参数更新可能会使得fb的内存发生重分配. 更具体地，导致重分配的参数更新主要是pw报告的分辨率发生了变化，有两种主要情形：a. fb的初始参数和开始录制后的实际参数不一致，比如用户使用的是一块2160p屏幕. b. 用户录制的是一个窗口，录制开始后用户改变了窗口的形状\r\n- 因此，在存在这种重分配的情况下，我们必须要设法保证，hook在读取fb时，fb的内存块**不会被重分配**. 否则我们一定会遇到segfault.\r\n\r\n正是基于如上的原因，我最后就采用了加锁的方案. 我可以理解本PR的改动中尝试将锁换为具有一致性保证的原子变量的动机，并且双缓冲的确也拉长了依赖距离，但是我认为现在的设计的一个显著问题是其无法保证双缓冲不存在**翻转**. 我们设想一个场景：\r\n\r\n1. hook开始读fb A，但由于某种原因它读的比较慢，这个过程一直到最后都没能结束\r\n2. payload写完了另一块fb B\r\n3. payload又打算开始写fb A，并且用户恰好最大化了窗口\r\n4. fb A改变参数，程序崩溃\r\n\r\n因此，我认为要取消锁，仅靠改为原子变量是不够的. 我们真正需要的其实是改变这套依赖于重分配的逻辑，或者在尽量避免重分配的同时围绕重分配实现一套安全逻辑. \r\n\r\n最后还是谢谢你的工作，但我认为我们目前的确需要更多努力才能将锁取消.\r\n\r\n最后，关于功耗监测的方法，windows上我主要使用hwinfo64观察功耗，而linux上我用的主要是amdgpu_top. intel平台上应当也有相似的工具（我记得有一个依赖于内核模块的，非常详细的工具，甚至能观察一些hw counter，但我忘记叫什么了.）"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T08:25:21Z",
        "body": "我还想额外补充一点想法：\r\n1. 我想也许我们可以实现某种“huge buffer”. 比如，我们让这个huge buffer足够的大（say, like maybe 8192x8192），这样应该就能使得绝大多数（或者可以说所有）情况下所需要的buffer size都比这个huge buffer小，那么我们就可以保证至少我们始终都在安全的地址空间里. 然后，我们认为所有超出这个buffer size的都是非法情况，那么我们就永远都不需要重分配了. 不过这样也是个很糟糕的方案，光是这个huge buffer我们就需要消耗我们256M的内存. 不过感觉这个方案也可以进一步细化，比如我们先借助XRR看一下用户的显示器分辨率（代码中已经有这种功能），然后根据这个分辨率决定一个“更大，但不太大 (like 1.5 times of the largest screen size, or simply the whole X framebuffer size)”的huge buffer size.\r\n2. 或者我们可以实现一种\"multi-buffer pyramids\"，也就是说我们事先准备一系列小的，不同尺寸的buffer，在参数发生变化时，我们只在这些buffer的范围内选择合适的buffer. 那么即使参数发生变化，我们只需要调整指针指向的实际buffer."
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T08:31:05Z",
        "body": "感谢你的指正。针对“避免重分配”的问题，是否可以考虑仅向 kernel 申请 huge buffer 那么大的虚拟内存空间，真正用到时，kernel 理应会自动（按页/按大页）分配物理内存？"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T08:34:23Z",
        "body": "@Coekjan 感觉这个应该就是basically how VM works. 但是我感觉我们应该至少需要首先对这块buffer全部填0，那么最后还是需要消耗这么多内存. 不过刚才想了下感觉根据屏幕尺寸选择尺寸应该是个比较合理的方案. （毕竟，compositor本身也是要消耗这么多内存的）"
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T08:36:59Z",
        "body": "> 但是我感觉我们应该至少需要首先对这块buffer全部填0，那么最后还是需要消耗这么多内存.\r\n\r\n不可以另外维护“长度”么，这样子 reader 和 writer 在 `data_size` 不变化时只访问“长度”内的区域，当需要访问“长度”外的区域时，再进行初始化（填 0）。"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T08:39:46Z",
        "body": "@Coekjan 啊，这也就是说在参数更新时如果需要再去填0，那我觉得的确是个还不错的主意. 而且无论如何感觉最多256M的消耗应该也还算是一个可以接受的范围.😉"
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T09:33:34Z",
        "body": "> 但是我感觉我们应该至少需要首先对这块buffer全部填0\r\n\r\n填 0 真的是必要的么（主分支上的代码似乎也没有将 buffer 初始化为 0），我现在尝试了一下，似乎不填 0 也不会出大问题？reader 尽管在一开始读到了未初始化的数据，但由于 writer 产生数据的速度足够快，所以用户大概不会感知到这个“不可预知”的 frame。"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T09:47:28Z",
        "body": "@Coekjan 刚才看了一下，是我记错了，我们目前是对ximage填0的：\r\n```\r\n  CvMat ximage_cvmat;\r\n  OpencvDLFCNSingleton::cvInitMatHeader(\r\n    &ximage_cvmat, ximage_height, ximage_width,\r\n    CV_8UC4, image.data, ximage_bytes_per_line\r\n  );\r\n  OpencvDLFCNSingleton::cvSetZero(&ximage_cvmat);\r\n```\r\n\r\n这样的话你说的是对的，我们的确可以不去管buffer的内容.😃"
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T10:01:40Z",
        "body": "请查收最新 push 的版本：\r\n1. 使用了 huge buffer 的思路，不需要初始化值，因此仅占据虚拟内存，并不会导致物理内存开销变大；\r\n2. 完全移除了对应的 mutex。"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T10:06:00Z",
        "body": "谢谢你的努力，目前的版本看起来还不错，我想这样的话我们的hook的效率会有提升。我晚些时候会再检查和测试一下，如果没问题的话我会着手合并，并且可能会立即做一个commit做一些微小的调整，谢谢！"
      },
      {
        "user": "DerryAlex",
        "created_at": "2024-12-11T12:48:19Z",
        "body": "真的有双缓存区吗？怎么看着只是把锁去掉了，并把 buffer 改成了固定大小\r\n\r\n真实现 ring buffer 的话，也不能完全去掉 lock, 不过只锁 `buffer[read_index]` 应该能降低冲突的概率，还是需要实验来测试一下。\r\n\r\n另外可以对每帧都存一下格式吧，这样也不需要 huge buffer 的 workaround\r\n\r\n "
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T12:51:57Z",
        "body": "> 真的有双缓存区吗？怎么看着只是把锁去掉了，并把 buffer 改成了固定大小\r\n\r\n1. 没有双缓冲区。\r\n2. buffer 改成固定大小（足够大），使得不需要所谓的“重分配”，因此不需要锁来保证 read 过程中 framebuffer 不被“重分配”。同时，这足够大的 buffer 并不会带来令人担忧的内存开销，因为只有真正用到对应虚拟页面，kernel 才会分配物理内存。\r\n\r\n---\r\n\r\n补充：我理解原代码中锁只是为了避免“重分配”使得正读取 buffer 的线程访问无效内存。"
      },
      {
        "user": "DerryAlex",
        "created_at": "2024-12-11T13:12:07Z",
        "body": "> 补充：我理解原代码中锁只是为了避免“重分配”使得正读取 buffer 的线程访问无效内存。\r\n\r\n一部分数据是上一帧的，另外一部分数据是下一帧的也不行吧"
      },
      {
        "user": "Coekjan",
        "created_at": "2024-12-11T13:23:15Z",
        "body": "> 一部分数据是上一帧的，另外一部分数据是下一帧的也不行吧\r\n\r\n如果用目前 PR 的代码，理论上是可能会出现这种情况的。由于我本地测试时，几乎感知不到这种现象，这种现象也许并不那么“错误”，所以还是完全移除了锁。当然，若维护者认为应当极力避免这种竞态，我认为可以考虑改为双缓冲区实现。"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-11T14:01:56Z",
        "body": "我觉得如果测试下来几乎不会有可察觉到的副作用的话，去除锁对于改善效率和功耗应当是有正面作用的。不过既然另一位贡献者有些疑虑，那我就多进行些测试. 不过由于近日仓库突然感觉热度增加了不少，本PR的处理速度可能也要稍微放缓一点（由于我也有本职工作要做），预计可能最晚会到本周末处理，还希望@Coekjan 理解.🥲"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-14T15:26:53Z",
        "body": "经过测试可以验证至少在um5606wa (HX370) 的性能模式下，hugebuffer的方法可以降低2W的封装功耗(which is huge imho)，但在安静模式下（封装功耗同样大约为4.7W）功耗几乎没有区别. 但我认为这说明我们值得用这个简单的手段完全移除mutex，感谢@Coekjan 的工作！但不过由于我感觉代码中有多处实现需要略微调整，暂时先合入`hugebuffer` branch做进一步修改，随后并入`master`."
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-14T15:34:35Z",
        "body": "待我修改完毕并将`hugebuffer`合入`master`后，我会对`README.md`进行相应的调整以修正其中的说明并增加相应的credits，谢谢！"
      }
    ]
  },
  {
    "number": 12,
    "title": "Failed to create screencast session: GDBus.Error:org.freedesktop.portal.Error.InvalidArgument: Unavailable cursor mode 1",
    "created_at": "2024-12-10T18:42:11Z",
    "closed_at": "2024-12-11T08:30:33Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/issues/12",
    "body": "ArchLinux + Hyprland 0.45.0\r\n\r\n通过yay 安装了 wemeet-wayland-screenshare-git 包之后，手动在bash中执行了 wemeet-wayland-screenshare\r\n显示出 Failed to create screencast session: GDBus.Error:org.freedesktop.portal.Error.InvalidArgument: Unavailable cursor mode 1\r\n且并没有显示出README,md 中步骤三的提示框",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/12/comments",
    "author": "Corybyte",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-12-10T19:54:34Z",
        "body": "看起来是hyprland上不支持最新的cursor fix. 请先手动checkout commit `7501180534` 本地编译使用. 麻烦提供一下完整的命令行输出，以及环境变量`XDG_SESSION_DESKTOP`的值. 我会尽快做一个单独的分支尝试修复."
      },
      {
        "user": "xuwd1",
        "created_at": "2024-12-10T20:18:44Z",
        "body": "nvm，已经修复并且在本地环境验证过，请使用`yay -S --rebuild --refresh`重新安装最新版本。"
      },
      {
        "user": "Corybyte",
        "created_at": "2024-12-11T08:30:33Z",
        "body": "已成功解决，谢谢"
      }
    ]
  },
  {
    "number": 5,
    "title": "improve x11 sanitizer",
    "created_at": "2024-11-29T12:30:19Z",
    "closed_at": "2024-11-29T22:56:59Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/pull/5",
    "body": "1. 检测到全屏窗口，则直接选取。可以显著地减少等待时间。\r\n2. 移除对 xdo 的依赖，统一使用 `XUnmapWindow`. 目前的方案在 gnome 43 和 kde 5 上测试均能工作。",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/5/comments",
    "author": "DerryAlex",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-11-29T21:12:17Z",
        "body": "目前看来这样的策略的确能在一些情况下对x11 sanitizer生效的速度带来很大的改进，非常感谢为本项目做出的贡献！此外，我目前也可以确定在plasma6和gnome47上只使用`XUnmapWindow`就足矣.\r\n\r\n但是，尽管我认为本次的改动具有很高的质量，但我不得不同时指出使用`XDisplayWidth`和`XDisplayHeight`获取尺寸的两个潜在问题：\r\n1. `XDisplayWidth`和`XDisplayHeight`获取的尺寸应该是compositor看到的尺寸. 比如在我的配置下，我有一个水平放置的`2560x1440`显示器以及一个垂直放置的`1920x1200`显示器. 此时获取到的尺寸为`3760x2002`. 在这种情况下，尽管似乎这套逻辑不会受到缩放比例的影响，但x11 sanitizer此时仍然需要借助以前“等待2秒”的逻辑才能成功.\r\n2. 我在一些机器（具有近来非常流行的`2880x1800`分辨率）上曾注意到过，这种屏幕似乎天生具有某种“overscan”. 在一些程序下，获取到的尺寸会是类似于`2881x1801`的尺寸. 此时x11 sanitizer的生效速度也无法提高.\r\n\r\n但无论如何，在其余情况下，新的逻辑是较以前明显更优的。我会很快着手合并，并和上次一样在合并后加入一些微小的调整，再次感谢！\r\n\r\nP.S. 谢谢帮我修复了我的屎山CMakeLists ;)"
      }
    ]
  },
  {
    "number": 4,
    "title": "compat",
    "created_at": "2024-11-27T11:51:56Z",
    "closed_at": "2024-11-28T16:03:35Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/pull/4",
    "body": null,
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/4/comments",
    "author": "DerryAlex",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-11-27T16:00:29Z",
        "body": "看起来是非常 promising 和 solid 的改动，感谢提供代码！我会尽快在本地环境测试一下这些改动并尽快合并这些修改。"
      },
      {
        "user": "DerryAlex",
        "created_at": "2024-11-28T01:54:30Z",
        "body": "修复了 gnome 上 x11 sanitizer 的问题。麻烦测试一下在 KDE 上把 `xdo_minimize_window` 注释掉后能否工作，如果能的话，我们最好删去 `xdo_minimize_window`，理由见注释。"
      },
      {
        "user": "xuwd1",
        "created_at": "2024-11-28T04:54:37Z",
        "body": "看起来新的改动解决了GNOME上x11 sanitizer的兼容性问题，非常感谢！ 我最快于今晚将再测试一下在GNOME47上的兼容性，然后合并这些修改. 不过：\r\n- 就我目前的测试，x11 sanitizer去掉`xdo_minimize_window`后在KDE下会失效. 因此我在合并后会立刻额外做一个commit，让x11 sanitizer检测当前的compositor选择具体的策略. \r\n- 同时我也会相应的更新README文档，增加相应的instruction和appreciation. \r\n\r\n再次感谢！"
      },
      {
        "user": "ElysiaEgo",
        "created_at": "2024-11-28T06:33:59Z",
        "body": "在Manjaro GNOME 47上可用！非常感谢\r\n\r\n通过会议录制，可以观察到鼠标指针有残影，不过不是什么大问题，非常感谢你的工作。"
      }
    ]
  },
  {
    "number": 1,
    "title": "关于 OpenCV",
    "created_at": "2024-11-21T08:09:57Z",
    "closed_at": "2024-11-25T19:52:35Z",
    "labels": [],
    "url": "https://github.com/xuwd1/wemeet-wayland-screenshare/issues/1",
    "body": "你试过用 dlopen（`RTLD_LOCAL`）来加载 opencv 库吗？虽然没看到崩溃细节，但我怀疑是符号冲突，那么 RTLD_LOCAL 应当能避免。",
    "comments_url": "https://api.github.com/repos/xuwd1/wemeet-wayland-screenshare/issues/1/comments",
    "author": "lilydjwg",
    "comments": [
      {
        "user": "xuwd1",
        "created_at": "2024-11-21T08:18:37Z",
        "body": "好主意，感谢建议，我近日会试一下. 之前使用的方法都是在cmake中链接opencv."
      },
      {
        "user": "xuwd1",
        "created_at": "2024-11-25T19:52:35Z",
        "body": "本项目现在已经根据提议实现了对opencv库的动态加载. 得益于此，现在本项目中的图像缩放可以确保aspect ratio正确了，感谢提议！"
      }
    ]
  }
]