[
  {
    "number": 40,
    "title": "Fix and improve the build process for macOS",
    "created_at": "2024-12-09T19:10:43Z",
    "closed_at": "2024-12-12T20:45:05Z",
    "labels": [],
    "url": "https://github.com/getsentry/sentry-godot/pull/40",
    "body": "This PR fixes and improves the build process for macOS:\r\n- Fix linking issues on macOS.  \r\n- Compile `sentry_native` as a universal fat library.  \r\n- Place build artifacts in separate directories for each platform to avoid filename conflicts (e.g., `crashpad_handler` on macOS and Linux).  \r\n- Add macOS builds to the GHA workflow. \r\n- Use \"release\" &  \"debug\" in library names instead of build target (such as \"editor\" and \"template_release\").\r\n\r\n#### How to test\r\n1. Build using: `scons target=editor debug_symbols=yes`\r\n2. Import and open the project in Godot 4.3.\r\n3. There will be errors printed on the first launch - this is a known Godot issue - reload project using `Project -> Reload Current Project`.\r\n4. Should work as expected now, with no errors printed.\r\n\r\n#### Known issues\r\n- Artifacts missing executable bit set on `crashpad_handler` -- #41",
    "comments_url": "https://api.github.com/repos/getsentry/sentry-godot/issues/40/comments",
    "author": "limbonaut",
    "comments": [
      {
        "user": "limbonaut",
        "created_at": "2024-12-10T10:57:47Z",
        "body": "@bitsandfoxes @bruno-garcia \r\nAlright, I believe this should resolve the build issues on Mac. Can you check on your systems? Instructions in the OP.\r\n"
      },
      {
        "user": "bitsandfoxes",
        "created_at": "2024-12-11T14:41:12Z",
        "body": "Running `scons target=editor debug_symbols=yes` from root causes\r\n```\r\n-- Installing: /Users/bitfox/Workspace/sentry-godot/modules/sentry-native/install/bin/crashpad_handler\r\nCopy(\"project/addons/sentrysdk/bin/crashpad_handler\", \"modules/sentry-native/install/bin/crashpad_handler\")\r\nLinking Shared Library project/addons/sentrysdk/bin/libsentrysdk.macos.editor.framework/libsentrysdk.macos.editor ...\r\nld: library 'crashpad_compat' not found\r\nclang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\nscons: *** [project/addons/sentrysdk/bin/libsentrysdk.macos.editor.framework/libsentrysdk.macos.editor] Error 1\r\nscons: building terminated because of errors.\r\n```"
      },
      {
        "user": "limbonaut",
        "created_at": "2024-12-11T15:32:33Z",
        "body": "> Running scons target=editor debug_symbols=yes from root causes\r\n\r\nStrange, this is one of the problems this PR tries to fix. :confused:  Are you sure, you switched to this PR branch?\r\n\r\nEDIT: \r\nJudging by the log snippet, it looks like you're building the `main` branch, not `macos-build`."
      },
      {
        "user": "bitsandfoxes",
        "created_at": "2024-12-12T10:11:35Z",
        "body": "Weird, no idea what went wrong there when testing this. Tried again and now it works! ðŸŽ‰ \r\nThe warnings are expected?\r\n```\r\nld: warning: object file (/Users/bitfox/Workspace/sentry-godot/modules/sentry-native/install/lib/libsentry.a[x86_64][2](mpack.c.o)) was built for newer 'macOS' version (14.7) than being linked (14.0)\r\n```"
      },
      {
        "user": "limbonaut",
        "created_at": "2024-12-12T20:43:21Z",
        "body": "> Weird, no idea what went wrong there when testing this. Tried again and now it works! ðŸŽ‰ The warnings are expected?\r\n> \r\n> ```\r\n> ld: warning: object file (/Users/bitfox/Workspace/sentry-godot/modules/sentry-native/install/lib/libsentry.a[x86_64][2](mpack.c.o)) was built for newer 'macOS' version (14.7) than being linked (14.0)\r\n> ```\r\n\r\nPerhaps it means that `sentry-native` and the main library are using different toolchains to build, or target different SDK versions? Hmm. Curiously, CI does not print such warnings."
      }
    ]
  },
  {
    "number": 23,
    "title": "Implement GHA workflow to build the Godot SDK",
    "created_at": "2024-11-22T13:37:12Z",
    "closed_at": "2024-11-27T16:02:21Z",
    "labels": [
      "enhancement",
      "github-actions"
    ],
    "url": "https://github.com/getsentry/sentry-godot/pull/23",
    "body": "This PR adds CI and a workflow to build and package GDExtension libraries in a ready-to-test form. CI is executed on push and PR.\r\n\r\nGHA files:\r\n- **ci.yml**: CI workflow.\r\n- **build_gdextension.yml**: Build workflow.\r\n\r\nNotes:\r\n- I will add testing in a separate PR after both this and #19 are merged.\r\n- Waiting for #25 and #26 before proceeding with this one.\r\n\r\nResolves #16",
    "comments_url": "https://api.github.com/repos/getsentry/sentry-godot/issues/23/comments",
    "author": "limbonaut",
    "comments": [
      {
        "user": "limbonaut",
        "created_at": "2024-11-22T21:16:45Z",
        "body": "Looks like the build crashes on launch: #24\r\nGoing to investigate it, marking this one as draft for now.\r\n\r\nEDIT:\r\nI'll wait for #25 and #26 before proceeding with this one."
      },
      {
        "user": "bruno-garcia",
        "created_at": "2024-11-23T20:46:48Z",
        "body": "> Looks like the build crashes on launch: #24 Going to investigate it, marking this one as draft for now.\r\n> \r\n> EDIT: I'll wait for #25 and #26 before proceeding with this one.\r\n\r\n3 PRs merged"
      },
      {
        "user": "limbonaut",
        "created_at": "2024-11-23T23:31:04Z",
        "body": "Tested ðŸ‘Œ\r\nReady for review."
      }
    ]
  },
  {
    "number": 22,
    "title": "Add a `debouncer`",
    "created_at": "2024-11-21T12:54:35Z",
    "closed_at": "2024-12-11T20:18:51Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/getsentry/sentry-godot/issues/22",
    "body": "Itâ€™s easy for the SDK to end up capturing a ton of errors in a short amount of time. For example, if there's a script error in `_process`, the SDK can capture every single one. This could quickly burn through a userâ€™s quota without providing much helpful info.\n\n### Why this is a problem\n- You can blow through your quota super fast i.e. with errors in `_process` or `_physics_process`\n- Sending a bunch of errors in one go could impact performance, especially during gameplay.\n- A bunch of duplicate errors are not going to be terribly useful anyway\n\n### How this could help\nAdding a debounce feature would make error reporting smarter by:\n\n- Limiting frequency: Only capturing one error every X seconds, for example. We have a very naive implementation like this in the Unity SDK\n- Skipping duplicates: If the same error happens repeatedly (like in a loop), donâ€™t capture it every time. But how would we detect duplicates?\n",
    "comments_url": "https://api.github.com/repos/getsentry/sentry-godot/issues/22/comments",
    "author": "bitsandfoxes",
    "comments": [
      {
        "user": "limbonaut",
        "created_at": "2024-11-21T14:33:46Z",
        "body": "> how would we detect duplicates?\n\nMaybe keeping a count keyed by `(file, lineno)`\n"
      },
      {
        "user": "limbonaut",
        "created_at": "2024-11-25T21:39:52Z",
        "body": "Working on a multi-layered solution, described in #28"
      }
    ]
  },
  {
    "number": 11,
    "title": "Internal SDK abstraction and project refactoring",
    "created_at": "2024-11-05T12:53:38Z",
    "closed_at": "2024-11-12T18:38:16Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/getsentry/sentry-godot/pull/11",
    "body": "Most of the additions/deletions are simply due to restructuring of the code-base. Please, check the overview section below.\r\n\r\n### Overview of changes\r\n- Introducing namespaces\r\n  - `sentry` namespace contains internals, interface to integrated SDKs & implementations, utility functions, etc.\r\n  - Global namespace contains GDScript-exposed functionality, such as `SentrySDK` (entry point), and `SentryUser`\r\n  - `sentry::contexts` -- factory functions for various Sentry contexts, e.g. `sentry::contexts::make_gpu_context()`\r\n  - `sentry::native` for sentry-native specific code\r\n  - `sentry::util` for utility functions, such as debug printing\r\n- Class `Sentry` renamed => `SentrySDK` -- it's a user-facing entry point to sentry-godot API; exposed to GDScript.\r\n  - Contains user-facing functions like `add_breadcrumb()` and `set_tag()`\r\n  - Initializes and provides internal access to the proper `InternalSDK` instance (see below)\r\n- New classes\r\n  - `InternalSDK` -- interface to integrated SDKs; i.e. abstraction for SDKs that are used internally.\r\n    - Contains declarations like `set_tag()` and `capture_message()`\r\n    - Used internally, not exposed to GDScript\r\n  - `NativeSDK` -- implements `InternalSDK` using sentry-native\r\n  - `DisabledSDK` -- dummy class for when SDK is not enabled - all functions are noop\r\n- Directory `src/sentry/` contains code for `sentry` namespace\r\n- Directory `src/sentry/native` contains native-related code\r\n- Global namespace code remains in `src/`",
    "comments_url": "https://api.github.com/repos/getsentry/sentry-godot/issues/11/comments",
    "author": "limbonaut",
    "comments": [
      {
        "user": "limbonaut",
        "created_at": "2024-11-11T13:53:43Z",
        "body": "Thanks for your review and suggestions, @bruno-garcia.\r\nI responded to your comments, some implemented in the follow-up commits."
      },
      {
        "user": "bruno-garcia",
        "created_at": "2024-11-11T18:01:49Z",
        "body": "Thank you! "
      },
      {
        "user": "bruno-garcia",
        "created_at": "2024-11-11T18:01:58Z",
        "body": "Feel free to merge when you're ready"
      }
    ]
  }
]