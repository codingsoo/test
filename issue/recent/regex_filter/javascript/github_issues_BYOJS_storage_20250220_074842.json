[
  {
    "number": 6,
    "title": "Implemented getMany, removeMany and setMany",
    "created_at": "2024-12-18T17:53:55Z",
    "closed_at": "2024-12-19T17:20:13Z",
    "labels": [],
    "url": "https://github.com/BYOJS/storage/pull/6",
    "body": "## Created Methods for getMany, setMany and removeMany #5 \r\n\r\nLocal storage, Session storage, Idb and Cookie adapter supports these methods.\r\n\r\n```\r\nsetMany([\r\n     { 'name': 'Alizey'},\r\n     { 'person': {name:'Joe',age:20}},\r\n     {'num':[1,2,3] },\r\n     [ 'prop1', 'val1' ], \r\n     [ 'prop2', 'val2' ]])   // return true\r\ngetMany(['name', 'person', 'num','prop1','prop2']) // returns [\"Alizey\", {name:'Joe',age:20}, [1, 2, 3],'val1','val2']\r\nremoveMany(['name', 'person', 'num','prop1','prop2']) // returns true\r\n```\r\nAll methods receives array of objects i.e key value pairs, keys must be array and values can be a string, array, objects, and tuples\r\nNote: OPFS adapter has not been included in this PR.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/BYOJS/storage/issues/6/comments",
    "author": "MuaviyaImran",
    "comments": [
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-18T21:52:18Z",
        "body": "@getify Done with requested changes\r\n\r\n- Simplified logic for many.js\r\n- Converted `cookie, local-storage, and session-storage` to async\r\n- All test cases passed"
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-19T14:55:07Z",
        "body": "@getify please review now"
      },
      {
        "user": "getify",
        "created_at": "2024-12-19T17:20:56Z",
        "body": "thanks so much! fixed it all up and landed the changes. :)"
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-19T17:32:52Z",
        "body": "Welcome.. I would be very happy to help in future. @getify "
      }
    ]
  },
  {
    "number": 5,
    "title": "setMany(), getMany(), removeMany()",
    "created_at": "2024-12-16T23:09:56Z",
    "closed_at": "2024-12-19T17:20:13Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/BYOJS/storage/issues/5",
    "body": "add feature to set/get/remove multiple keys/values at a time.\n\nthx @wesbos for the idea! ",
    "comments_url": "https://api.github.com/repos/BYOJS/storage/issues/5/comments",
    "author": "getify",
    "comments": [
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-17T04:20:25Z",
        "body": "@getify  Hi, I hope all is well with you. Would you kindly assign me this problem? I'd want to help. "
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-17T08:42:11Z",
        "body": "@getify I have a question do we need to support all types of structures like\r\n`setMany({ 'key1': 'string', 'key2': 'object', 'key3':'array' })` and so on..\r\n"
      },
      {
        "user": "getify",
        "created_at": "2024-12-17T13:18:39Z",
        "body": "I think we should start with arrays:\n\n```js\nsetMany([ [ \"prop1\", \"val1\" ], [ \"prop2\", \"val2\" ] ])  // [ true, true ] \n\ngetMany([ \"prop1\", \"prop2\" ])  // {\"prop1\": \"val1\", \"prop2\": \"val2\" }\n\nremoveMany([ \"prop1\", \"prop2\" ]) // [ true, true ] \n```"
      },
      {
        "user": "getify",
        "created_at": "2024-12-17T13:30:25Z",
        "body": "let's actually expose these as:\n\n```js\nset.many(..)\nget.many(..)\nremove.many(..)\n```"
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-17T13:37:44Z",
        "body": "@getify - I have implemented getMany, setMany and removeMany with all types of structures\r\n\r\n- setMany({ 'key1': 'string', 'key2': 'object', 'key3':'array' })\r\n- getMany(['string', 'obj', 'array'])\r\n- removeMany(['string', 'obj','array'])\r\n\r\nThey are working in idb, cookies, local-storage, and session-storage with test cases\r\nNow i am implementing in opfs"
      },
      {
        "user": "getify",
        "created_at": "2024-12-17T14:42:47Z",
        "body": "getMany() and removeMany() should be accepting prop names, not values (as indicated by your comment)."
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-17T15:22:29Z",
        "body": "Yeah they will receive key names by parameters and return actual values"
      },
      {
        "user": "getify",
        "created_at": "2024-12-17T20:59:51Z",
        "body": "FWIW, here's what I was envisioning for how to approach the implementation:\r\n\r\n```js\r\nfunction setMany(data) {\r\n   if (data != null && typeof data == \"object\" && !Array.isArray(data)) {\r\n      data = [ ...Object.entries(data) ];\r\n   }\r\n   return Promise.all(\r\n      data.values.map(([ prop, val ]) => set(prop,val))\r\n   );\r\n}\r\n```\r\n\r\nIn other words, ideally these utilities are just \"helpers\" that call the corresponding `set()` / `get()` / `remove()` utilities, and are therefore not requiring specific logic for any one adapter type.\r\n\r\nPerhaps if they are indeed just generalized logic, we can then include them once, in a separate `many.js` helpers file, that is imported by each adapter, and then re-exported on each adapter's interface, like:\r\n\r\n```js\r\nimport { getMany, setMany, removeMany } from \"./many.js\";\r\nget.many = getMany;\r\nset.many = setMany;\r\nremove.many = removeMany;\r\n\r\n// ..\r\n\r\nexport {\r\n   // ..\r\n   get,\r\n   set,\r\n   remove,\r\n   // ..\r\n};\r\nvar publicAPI = {\r\n   // ..\r\n   get,\r\n   set,\r\n   remove,\r\n   // ..\r\n};\r\n```"
      },
      {
        "user": "MuaviyaImran",
        "created_at": "2024-12-18T13:32:34Z",
        "body": "Sure i got the point.\r\n"
      }
    ]
  }
]