[
  {
    "number": 66,
    "title": "Editorial recommendations for README",
    "created_at": "2025-01-23T05:55:46Z",
    "closed_at": "2025-01-23T17:58:28Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/pull/66",
    "body": "I read through the updated README and it looks good! I just have a few minor recommendations regarding some of the code snippets.\r\n\r\nPS: Thank you for your work on this, I'm very happy with the recent updates.\r\n\r\n<!--\r\nThank you for your pull request. Please provide a description above and review the requirements below.\r\n\r\nBug fixes and new features should include tests.\r\n\r\nBy making a contribution to this project, I certify that:\r\n\r\n* (a) The contribution was created in whole or in part by me and I\r\n  have the right to submit it under the open source license\r\n  indicated in the file; or\r\n\r\n* (b) The contribution is based upon previous work that, to the best\r\n  of my knowledge, is covered under an appropriate open source\r\n  license and I have the right under that license to submit that\r\n  work with modifications, whether created in whole or in part\r\n  by me, under the same open source license (unless I am\r\n  permitted to submit under a different license), as indicated\r\n  in the file; or\r\n\r\n* (c) The contribution was provided directly to me by some other\r\n  person who certified (a), (b) or (c) and I have not modified\r\n  it.\r\n\r\n* (d) I understand and agree that this project and the contribution\r\n  are public and that a record of the contribution (including all\r\n  personal information I submit with it, including my sign-off) is\r\n  maintained indefinitely and may be redistributed consistent with\r\n  this project or the open source license(s) involved.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/66/comments",
    "author": "garretmh",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-23T17:58:31Z",
        "body": "thanks!!"
      }
    ]
  },
  {
    "number": 64,
    "title": "Are void operations necessary?",
    "created_at": "2025-01-21T23:01:45Z",
    "closed_at": "2025-01-22T00:58:28Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/64",
    "body": "I'm not sure why we should allow the following code since it can be accomplished with an empty catch. \n\n```js\ntry await something();\ntry { await something(); } catch(e){ } // explicit empty catch\n```\n\nI think this proposal should apply either to all expressions, or only to the assignment expression. \n\nIf we can ignore a single statement when we don't use the result, we should also be able to use it in places like map functions and then filter the result. \n\nOr is there a compelling reason to easily ignore the error from a single line but not easily catch the error in a map function?",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/64/comments",
    "author": "Arlen22",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-21T23:41:04Z",
        "body": "It will depend on the user's code.\n\nThe same way:\n\n```js\nconst a = work();\n// and\nwork()\n```\n\nAre all valid code, necessary or not will depend on their implementation."
      },
      {
        "user": "Arlen22",
        "created_at": "2025-01-21T23:45:36Z",
        "body": "Sure, but you're disallowing all other expressions, so those two specific cases will probably end up being implemented separately. Other types of expressions, like `handler(try await fetch())`, `return try await fetch()`, and `results.map(e => try JSON.parse(e))` are disallowed. "
      },
      {
        "user": "Arlen22",
        "created_at": "2025-01-22T00:58:28Z",
        "body": "In that case this is a duplicate of #61. "
      }
    ]
  },
  {
    "number": 62,
    "title": "Assignment to existing variables must be addressed",
    "created_at": "2025-01-21T21:29:53Z",
    "closed_at": "2025-01-23T03:06:14Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/62",
    "body": "Currently in JavaScript, the following is valid syntax (I can run this in node right now). \n\nIf you continue with your current new proposal with the try keyword after the equals sign, you will probably inherit all of these semantics as well. Putting the try keyword at the beginning of the line will allow you to restrict it to const. \n\nI don't know which is better and I don't have an opinion one way or the other, but it's something to keep in mind. \n\n```js\nfunction something_good() {return [true, null, 'good'];}\nfunction something_bad() {return [false, 'bad', null];}\n\nfunction test() {\n  let ok, error, data1, data2, data3;\n  [ok, error, data1] = something_good();\n  if(!ok) return {error};\n\n  [ok, error, data2] = something_good();\n  if(!ok) return {error};\n\n  [ok, error, data3] = something_bad();\n  if(!ok) return {error}; // example returns here\n\n  let [ok2, error2, data4] = something_bad();\n  if(!ok2) {\n    data4 = \"default\";\n    ok2 = true;\n  }\n\n  return {data1, data2, data3, data4};\n}\nconsole.log(test()); // prints { error: 'bad' }\n```\n\n#63 also relates to this decision. ",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/62/comments",
    "author": "Arlen22",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-21T23:33:25Z",
        "body": "I don't think there's anything to discuss here. That's an already accepted behavior in js and there's nothing we can do if you want to reuse the same variables for different purposes and call them `error2` or `data4`..."
      },
      {
        "user": "Arlen22",
        "created_at": "2025-01-22T00:57:13Z",
        "body": "You saw the `ok` and `error` being reused here?\n\n```js\n  let ok, error, data1, data2, data3;\n  // same ok and error being reused\n  [ok, error, data1] = something_good();\n  [ok, error, data2] = something_good();\n  [ok, error, data3] = something_bad();\n```"
      },
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-22T04:09:11Z",
        "body": "Yeah, that's how array destructuring works. Your example doesn't even contain a single `try` statement. \n\nBesides `Result`, the _result_ of a `try` expression*, being iterable, I don't see how this relates to the proposal."
      },
      {
        "user": "Arlen22",
        "created_at": "2025-01-22T16:02:11Z",
        "body": "> Yeah, that's how array destructuring works. Your example doesn't even contain a single `try` statement.\n> \n> Besides `Result`, the _result_ of a `try` expression*, being iterable, I don't see how this relates to the proposal.\n\nSorry, I was demonstrating existing functionality. You can pretend `something_good` and `something_bad` are returning a `Result` from using `try` inside them, like `return try something()`."
      },
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-22T16:32:41Z",
        "body": "But still, what has to be discussed about this that relates to this proposal? This is something all iterables are \"vulnerable\""
      },
      {
        "user": "Arlen22",
        "created_at": "2025-01-23T03:06:14Z",
        "body": "Moving to actual try expressions takes care of this. It was along the same line as #61. "
      }
    ]
  },
  {
    "number": 60,
    "title": "Fix for desugaring: keeping reference mutability intact",
    "created_at": "2025-01-21T18:02:05Z",
    "closed_at": "2025-01-21T18:04:22Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/pull/60",
    "body": "closes #58\r\n\r\nFix according to issue: #58 \r\n",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/60/comments",
    "author": "DScheglov",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-21T18:04:01Z",
        "body": "thanks <3"
      }
    ]
  },
  {
    "number": 56,
    "title": "Fix error references in try expressions example",
    "created_at": "2025-01-20T19:10:55Z",
    "closed_at": "2025-01-20T19:51:10Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/pull/56",
    "body": "Fix error references in try expressions example. \r\n\r\n<!--\r\nThank you for your pull request. Please provide a description above and review the requirements below.\r\n\r\nBug fixes and new features should include tests.\r\n\r\nBy making a contribution to this project, I certify that:\r\n\r\n* (a) The contribution was created in whole or in part by me and I\r\n  have the right to submit it under the open source license\r\n  indicated in the file; or\r\n\r\n* (b) The contribution is based upon previous work that, to the best\r\n  of my knowledge, is covered under an appropriate open source\r\n  license and I have the right under that license to submit that\r\n  work with modifications, whether created in whole or in part\r\n  by me, under the same open source license (unless I am\r\n  permitted to submit under a different license), as indicated\r\n  in the file; or\r\n\r\n* (c) The contribution was provided directly to me by some other\r\n  person who certified (a), (b) or (c) and I have not modified\r\n  it.\r\n\r\n* (d) I understand and agree that this project and the contribution\r\n  are public and that a record of the contribution (including all\r\n  personal information I submit with it, including my sign-off) is\r\n  maintained indefinitely and may be redistributed consistent with\r\n  this project or the open source license(s) involved.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/56/comments",
    "author": "senocular",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2025-01-20T19:51:23Z",
        "body": "thanks :)\r\n"
      }
    ]
  },
  {
    "number": 45,
    "title": "async functions already allow this pattern, but only asyncly",
    "created_at": "2024-09-14T17:45:26Z",
    "closed_at": "2025-01-20T03:48:56Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/45",
    "body": "> Current proposed syntax is `const [error, data] = try await func();` according to #4\r\n\r\nAsync functions already basically allow this pattern. An async function returns a promise, and any synchronous exception thrown causes the promise to return a rejected promise. \r\n\r\nA call to an async function using this pattern looks like `const [error, data] = await asyncFunc().then(e => [undefined, e], e => [e, undefined]);`. The only advantage of turning this into an operator is that typescript can handle the typing of this properly (removing undefined from the value type if the error is undefined). \r\n\r\nBut since making every single Javascript function async doesn't really make sense, this is still a useful operator to have. In fact, it may even bring a compelling use case to the sync world. \r\n\r\n",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/45/comments",
    "author": "Arlen22",
    "comments": [
      {
        "user": "rockedpanda",
        "created_at": "2024-09-18T12:01:49Z",
        "body": "If change the `Promise.prototype`:\r\n```javascript\r\nPromise.prototype.result = function() {\r\n  return this.then(x=>[null,x], err=>[err,null]);\r\n};\r\n```\r\nwill it be better ?\r\n```javascript\r\nconst [error, data] = await asyncFunc().result();\r\n```\r\n\r\nNot for sync"
      },
      {
        "user": "otaxhu",
        "created_at": "2024-09-18T18:11:04Z",
        "body": "> If change the Promise.prototype:\r\n> ```js\r\n> Promise.prototype.result = function() {\r\n>   return this.then(x=>[null,x], err=>[err,null]);\r\n> };\r\n> ```\r\n\r\nThis is actually a really good pattern, we should discuss about this in #4 (preferred operator/keyword for safe assignment)"
      },
      {
        "user": "Arlen22",
        "created_at": "2024-09-19T13:24:36Z",
        "body": "There is no need to add anything to the Promise prototype. The current `try await ...` expression already handles it exactly how it needs to. \r\n\r\nCurrently `const result = try await somePromise` would be the equivelant of the current code:\r\n\r\n```ts\r\nlet result = new Array(2);\r\ntry {\r\n  result[1] = await somePromise; // the expression goes here\r\n} catch (e) {\r\n  result[0] = e;\r\n}\r\n```\r\n\r\nShortening all of that down to one expression keyword and adding the const assignment is quite epic. No further polyfill is needed. "
      },
      {
        "user": "Arlen22",
        "created_at": "2024-09-21T15:46:33Z",
        "body": "In fact, I've added a try method to the Promise prototype in one of my projects.\r\n\r\n`return this.then(e => [undefined, e] as const, e => [e, undefined] as const);`"
      },
      {
        "user": "ljharb",
        "created_at": "2024-09-21T21:03:06Z",
        "body": "@Arlen22 please don't ever do that - that's the kind of thing that obstructs language evolution."
      },
      {
        "user": "Arlen22",
        "created_at": "2024-09-21T21:30:01Z",
        "body": "> @Arlen22 please don't ever do that - that's the kind of thing that obstructs language evolution.\n\nNo worries. I entirely agree. I am certainly not putting that online anywhere. I could accomplish the same thing with `try(await something)`, which would be a much better solution. "
      }
    ]
  },
  {
    "number": 26,
    "title": "Dont use two identifiers, just catch thrown errors",
    "created_at": "2024-08-20T11:31:45Z",
    "closed_at": "2024-08-21T14:00:47Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/26",
    "body": "I appreciate the effort to turn javascript into a language that can handle errors as values. I just think we have several issues with the current proposal and so here is mine.\r\n\r\n1. I think the `?=` operator is ambigious. It means totally different things in other languages and it is not semantic. Newcomers can not guess what it does by looking at it.\r\n2. The idea that the error can as well be ignored is not ideal in my opinion.\r\n\r\nSo My proposal looks like this:\r\n```js\r\ncatch const foo = bar();\r\n\r\nif(foo instanceof Error) {\r\n\r\n} else {\r\n\r\n}\r\n```\r\nThis method should work out of box with every assignment of any type. We do not need to change the definition of already existing functions or objects, meaning we can gradually refactor already existing code.\r\nFurthermore, it is to mention that this syntax is very readable and understandable, even for non javascript developers.\r\nYou are also naturally forced to handle the error and Typescript can easily point out that `foo` may be a thrown value.\r\nAnd if the `catch` keyword is omitted, higher level catch blocks will simply catch the thrown error.\r\n\r\n### What if values are thrown that are not an instance of `Error`?\r\nIn that case you should simply be aware that your value can be of an unexpected type, which you have to handle as well. One way is to inverse the condition:\r\n```ts\r\nfunction bar(): Baz {\r\n  return new Baz();\r\n}\r\n\r\ncatch const foo = bar();\r\n\r\nif(!foo instanceof Baz) {\r\n  //Must have thrown, handle error\r\n} else {\r\n\r\n}\r\n```\r\nEven if the `Baz` didnt throw, it still returned something the consumer assumingly did not expect, so has to be handled anyway.\r\n\r\nThank you very much for allowing me to contribute my idea.",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/26/comments",
    "author": "KevsRepos",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2024-08-20T12:43:52Z",
        "body": "This don't work. The problem is that js can `throw { a : 1 }` and this would return false when checking for `error instanceof Error`."
      },
      {
        "user": "KevsRepos",
        "created_at": "2024-08-21T07:58:09Z",
        "body": "> This don't work. The problem is that js can `throw { a : 1 }` and this would return false when checking for `error instanceof Error`.\r\n\r\nI already gave a solution to this. If you know what the return value should be, then you can check the type of the returned value. Another way to solve this issue is to add a possibility to check if the value was thrown by either adding a way to check if a value was thrown, or by putting a catch block after the expression.\r\n```\r\ncatch const foo = bar();\r\n\r\nif(wasThrown()) {\r\n\r\n}\r\n```\r\n\r\n```js\r\nconst foo = bar() catch(e) {\r\n\r\n}\r\n```"
      },
      {
        "user": "arthurfiorette",
        "created_at": "2024-08-21T14:00:47Z",
        "body": "Assigning them to a single variable is not the solution and shouldn't be. There's no prior language that decided to reuse the same variable for ok/err and they have a valid reason for that."
      },
      {
        "user": "KevsRepos",
        "created_at": "2024-08-22T10:39:48Z",
        "body": "> There's no prior language that decided to reuse the same variable for ok/err and they have a valid reason for that.\r\n\r\nRust does exactly this with the `Result` enum which can be represented by `Ok` or `Err`. Functions defined to return the `Result` enum return only one value and the consumer has to check the type of the value.\r\nEspecially Rusts error handling is one of the most used arguments for rust, as it is unambiguous, so I really want to protest against a premature rejection of a system that is proven to be working very well."
      }
    ]
  },
  {
    "number": 23,
    "title": "Conflating `obj[Symbol.result]` with `func[Symbol.result]` breaks functions returning functions",
    "created_at": "2024-08-19T18:10:39Z",
    "closed_at": "2024-08-19T20:52:29Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/23",
    "body": "The meanings of `Symbol.result` in `obj[Symbol.result]` and `func[Symbol.result]` are very different. `obj[Symbol.result]()` is a result corresponding to `obj` itself, while `func[Symbol.result]()` is a result corresponding to the *return value of* `func`.\r\n\r\nUsing the same symbol for both of these meanings, along with recursive unwrapping (#6), completely breaks functions that return other functions.\r\n\r\n```js\r\nconst inner = () => console.log(\"inner() called\");\r\nconst outer = () => inner;\r\n\r\ntry {\r\n    const f = outer(); // returns inner without calling inner()\r\n} catch {}\r\n\r\nconst [error, data] ?= outer(); // unexpectedly calls inner()\r\n```\r\n\r\nThis evaluates as `outer[Symbol.result]()` → `inner[Symbol.result]()` → `[null, console.log(\"inner called\")]`.\r\n\r\nEven if you think recursive unwrapping is a good idea, it should only recurse through `obj[Symbol.result]`, not `func[Symbol.result]`. So we need to use two different symbols for these different meanings.",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/23/comments",
    "author": "andersk",
    "comments": [
      {
        "user": "anacierdem",
        "created_at": "2024-08-19T19:29:28Z",
        "body": "This relates to #12 "
      },
      {
        "user": "andersk",
        "created_at": "2024-08-19T20:52:29Z",
        "body": "Oh I see the polyfill checks `typeof result === \"object\"` before recursing. That’s not clear from the description but this hasn’t reached the stage where specification wordsmithing is helpful, so closing for now."
      }
    ]
  },
  {
    "number": 21,
    "title": "feat: add TypeScript definitions, allow falsy errors, and refine erro…",
    "created_at": "2024-08-19T14:44:09Z",
    "closed_at": "2024-09-09T12:46:40Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/pull/21",
    "body": "## Overview\r\n\r\nThis pull request enhances the original `Symbol.result` proposal by introducing TypeScript type definitions, allowing falsy values for errors, and refining the documentation to exclude `null` as a possible value for data when an error occurs. These changes aim to improve consistency, clarity, and type safety, making the proposal more robust and easier for developers to implement in real-world applications.\r\n\r\n## Key Enhancements and Rationale\r\n\r\n1. **TypeScript Definitions**:\r\n\r\n   - **New Type Definitions**: TypeScript definitions (`polyfill.d.ts`) have been added to enforce the usage pattern `[error, undefined]` or `[null, data]`. This provides clear and enforceable typing for the `Symbol.result` method, ensuring consistent behavior when using the `?=` operator. Developers can benefit from compile-time checks and improved tooling support.\r\n   - **Support for Functions and Promises**: The TypeScript definitions cover both synchronous and asynchronous functions, as well as promises, offering robust typing that aligns with the proposed error and result handling.\r\n\r\n2. **Allowance of Falsy Error Values**:\r\n\r\n   - **Support for Meaningful Falsy Values**: Falsy values such as `false`, `\"\"`, `0`, and `0n` are now supported as valid error states. Instead of using the logical OR (`||`) operator, the nullish coalescing operator (`??`) is used. This approach ensures that these falsy values are correctly preserved and recognized as valid errors, allowing for more precise and meaningful error handling, particularly in cases where these values carry specific significance.\r\n   - **Strict Error Checking**: To ensure that these falsy values are not mistakenly overlooked as errors, strict comparison to `null` should be used when checking for errors. This guarantees that all falsy values are properly considered as potential errors when appropriate.\r\n\r\n   ```ts\r\n   const [error, data] ?= action()\r\n   if (error !== null) {\r\n     // Handle error\r\n   } else {\r\n     // Handle data\r\n   }\r\n   ```\r\n\r\n3. **Refinement of Documentation to Exclude `null` as a Possible Data Value When an Error Occurs**:\r\n\r\n   - **Simplified Error Checking**: The documentation has been updated to reflect that `[error, undefined]` should be used instead of `[error, null | undefined]`. This change clarifies that when an error is present, data should always be `undefined`, avoiding ambiguity and making error handling more straightforward.\r\n   - **Consistency with JavaScript Practices**: By excluding `null` as a possible data value when an error occurs in the documentation, the proposal aligns more closely with common JavaScript practices, where `undefined` typically signifies the absence of a value.\r\n",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/21/comments",
    "author": "valentinpolitov",
    "comments": [
      {
        "user": "garretmh",
        "created_at": "2024-09-09T01:53:17Z",
        "body": "What happens if null is thrown?"
      },
      {
        "user": "valentinpolitov",
        "created_at": "2024-09-09T12:34:30Z",
        "body": "> What happens if null is thrown?\n\nIt's coalesced to `new Error(\"Thrown value is nullish\")` (see polyfill.js file)\n\nIt would be better to make a custom instance like `NullishError` that extends `Error` for better distinction, but it's out of this PR's scope"
      },
      {
        "user": "arthurfiorette",
        "created_at": "2024-09-09T12:46:40Z",
        "body": "Hey @valentinpolitov, thanks for using your time to create this PR. but its too much of a draft-draft-draft stage 0 and a lot of things will change. For example, #4's new syntax changed a lot of stuff. Ill be closing this PR because of the new chosen syntax and having all of this would just be more code to maintain while the proposal evolves."
      }
    ]
  },
  {
    "number": 14,
    "title": "implicit await promises",
    "created_at": "2024-08-16T08:46:22Z",
    "closed_at": "2024-08-21T19:24:50Z",
    "labels": [],
    "url": "https://github.com/arthurfiorette/proposal-try-operator/issues/14",
    "body": "I'm wondering, assume a function that returns a promise, like:\r\n\r\n```js\r\nasync function read(filename) { \r\n  throw new Error(`file '${filename}' can't be read`); \r\n}\r\n```\r\n\r\nNot awaiting it when using `?=` would not make sense, as it wouldn't catch anything.\r\n\r\n```js\r\nconst [error, data] ?= read('some-file');\r\n```\r\n\r\nThe solution is to use `await read`, but I wonder if it makes sense to have an implicit await when a function returns a promise. People can still use `const promise = read('some file)` if they don't intend to `await` it. And then call `[error, data] ?= await promise` later.",
    "comments_url": "https://api.github.com/repos/arthurfiorette/proposal-try-operator/issues/14/comments",
    "author": "smeijer",
    "comments": [
      {
        "user": "arthurfiorette",
        "created_at": "2024-08-16T14:03:15Z",
        "body": "Im not sure if making things implicit is the way to go...\r\n\r\nAlso, how this would play up with a function like this:\r\n\r\n```ts\r\nfunction example() {\r\n  if(condition) {\r\n    throw new Error('sync')\r\n  }\r\n\r\n  return new Promise((res, rej) => {\r\n    return reject(new Error('async'))\r\n  })\r\n}\r\n```\r\n\r\nIn which the function could either throw directly or return a promise that might throw as well."
      }
    ]
  }
]