[
  {
    "number": 64,
    "title": "Reloading application.css when constituent files are changed (Sprockets)",
    "created_at": "2025-01-06T19:22:24Z",
    "closed_at": "2025-01-25T08:49:13Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/issues/64",
    "body": "Thanks for making this! :star_struck: We're still running sprockets, so it was nice to see #41 adding basic sprockets support – thanks for that @codergeek121!\r\n\r\nI was still struggling to make it work, and have had to make some modifications to get to a walking skeleton of CSS reloading:\r\n\r\n1. Add some subfolders of `app/assets/stylesheets` to `css_paths`\r\n1. Add `scss` to `css_extensions`\r\n1. Monkey patch `Hotwire::Spark::Change#canonical_changed_path` to always return \"/application.css\" when `action == :reload_css`.\r\n\r\nThe first two points was necessary for any events to get fired in the first place, as my CSS is mainly defined in scss files in subfolders of `app/assets/stylesheets`, imported in `app/assets/stylesheets/application.scss`. Part 3 was to get `application.css` reloaded, in stead of the constituent file that was actually modified.\r\n\r\nIs there something I've misunderstood here? If not, perhaps some additions could be made to streamline this a bit :thinking: ",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/64/comments",
    "author": "rogerkk",
    "comments": [
      {
        "user": "codergeek121",
        "created_at": "2025-01-07T21:37:20Z",
        "body": "I don't think you misunderstood! Currently, there's only basic support for Sprockets, meaning it simply doesn't raise an error if you're using Sprockets. There's no support for sass/scss/coffeescript right now. I think this would also be kind of hard to add in a non-buggy way, without parsing sass imports.\r\n\r\nIf you don't want to monkey patch, you could also try the following instead:\r\n\r\n1. Change the reload method to `:replace`, since this will also reload the `<head>` if there are changes\r\n2. Add the `scss` extension and paths to the **html_paths** and **html_extensions**, which will then trigger an `:replace` reload if a `scss` file is changed\r\n\r\nThis will not do a fine-grained css reload, but a full Turbo visit instead, but maybe this is good enough for your use case."
      },
      {
        "user": "rogerkk",
        "created_at": "2025-01-08T14:16:16Z",
        "body": "Ah, nice to know about an alternative approach. The monkey patching is working at the moment, but now I have somewhere to go if/when it causes me too much pain. :sweat_smile:  Thanks again!"
      },
      {
        "user": "jorgemanrubia",
        "created_at": "2025-01-25T08:49:13Z",
        "body": "Thanks for the help here @codergeek121 "
      }
    ]
  },
  {
    "number": 63,
    "title": "Curious around page refresh events",
    "created_at": "2025-01-03T21:58:41Z",
    "closed_at": "2025-01-25T08:47:58Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/issues/63",
    "body": "Hello! Just wanted to post a question of curiosity after @adamlogic and I did some pairing today to try to integrate Spark into an app. My initial presumption was that Spark simply kicked off a Page Refresh event for Turbo via file-watching and a websocket connection. After we saw some interesting behaviors (and no turbo events being emitted) I checked the source code and it appears that Spark doesn't interface with Turbo this way at all, but rather pulls the page content and morphs the diff itself, completely outside of Turbo. I'm just curious why Spark went that route instead of just triggering a Page Refresh event in Turbo? I have a couple of hunches but wanted to ask 🙂 we were trying to figure out why the `data-turbo-permanent` tag wasn't working locally but ultimately found that Spark doesn't (currently) have facilities for that tag. ",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/63/comments",
    "author": "jon-sully",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2025-01-25T08:47:58Z",
        "body": "Hello @jon-sully!\n\nI pondered that path but decided against creating such dependency. For example, `data-turbo-permanent` shouldn't prevent you from seeing a change in the affected region if you changed the source affecting that region. I think app's page refreshes and a dev-tool's reload refreshes belong to related but different domains."
      },
      {
        "user": "jon-sully",
        "created_at": "2025-01-25T11:26:27Z",
        "body": "Totally fair; I could see the separation of concerns there. I guess I'm just not sure what to do with something like a dropdown menu in a nav bar. I think the predominant advice for a production env (using morphing) is to mark the menu as `data-turbo-permanent` so that a new page morphing in won't override it and close (or open) it. What Adam and I were seeing in our dev exploration was that every page refresh would pop our menu back open 😅 \n\nNow, granted, our logic and code around how those menus open and close probably isn't the best, but I'm curious what the suggestion might be for handling those sorts of things locally with Spark"
      }
    ]
  },
  {
    "number": 59,
    "title": "Feature Request: Please emit a global event like `spark:reload`",
    "created_at": "2025-01-01T21:29:13Z",
    "closed_at": "2025-01-25T08:43:33Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/hotwired/spark/issues/59",
    "body": "During dev, it would be very useful to be able to re-parse the DOM (for third-party JS scripts for example) every time Spark updates the DOM.",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/59/comments",
    "author": "codepilotsf",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2025-01-25T08:43:33Z",
        "body": "Thanks for the suggestion. Hotwire Spark is a development tool. Libraries shouldn't be aware of it. I don't think setting dependencies from libraries to spark is a good idea. A better approach is to get libraries aware of changes in the dom (e.g via mutation observer) so that they can adapt to dom changes, wherever those come from."
      }
    ]
  },
  {
    "number": 54,
    "title": "Add nil safety to Hotwire::Spark view helper methods",
    "created_at": "2024-12-26T13:06:33Z",
    "closed_at": "2024-12-26T19:12:14Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/pull/54",
    "body": "Adds safe navigation operators and nil checks to prevent NoMethodError  exceptions in view_helpers, script_tag, and html_reload_method_option.  This makes the helper methods more resilient when dependencies are missing.\r\n\r\nFixes #53 ",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/54/comments",
    "author": "gobijan",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-26T15:46:34Z",
        "body": "Also, it would be great to add a redirect to the \"routes\" file of the dummy app and an integration test to reproduce, if possible. Thanks 🙏"
      }
    ]
  },
  {
    "number": 27,
    "title": "Rails console: [ActionCable] Broadcasting to hotwire_spark",
    "created_at": "2024-12-19T15:25:22Z",
    "closed_at": "2024-12-19T18:41:01Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/issues/27",
    "body": "I don't have an experience with ActionCable but I just tried this gem and every time a file is modified the following message appears in the Rails console:\r\n\r\n```\r\n[ActionCable] Broadcasting to hotwire_spark: {:action=>:reload_html, :path=>\"<path>\"}\r\n```\r\n\r\nWhere `<path>` is the path that was changed.\r\n\r\nThis occurs in a newly generated Rails 8 application with the only change of adding the hotwire-spark gem.",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/27/comments",
    "author": "jacob-carlborg-apoex",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-19T18:40:59Z",
        "body": "Yes @jacob-carlborg-apoex that's expected behavior. With the gem installed, the server starts a thread that listens to file changes. When a change it's detected, it broadcasts a message with details about the change, so that the client can perform whatever reload operation is needed."
      },
      {
        "user": "jacob-carlborg-apoex",
        "created_at": "2024-12-19T19:50:34Z",
        "body": "I do understand the concept, by why does it need to print this to the Rails console? That's not the client, it's the browser, right?"
      },
      {
        "user": "jacob-carlborg-apoex",
        "created_at": "2024-12-19T20:03:58Z",
        "body": "@jorgemanrubia I think I see what's going on now. It's not just the server that starts a thread, the Rails console starts a thread that listens to file changes as well. Can't that be avoided? BTW, this causes the browser to reload twice."
      }
    ]
  },
  {
    "number": 21,
    "title": "On Rails < 8 a stub version gets installed",
    "created_at": "2024-12-19T12:42:28Z",
    "closed_at": "2024-12-19T13:17:30Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/issues/21",
    "body": "I just followed the README and got confused because it didn't seem to work. After some digging I discovered version 0.0.1 of the gem was installed and it doesn't contain any functionality. It seems the actual working versions require Rails 8.0 but those did not get installed because I'm still on Rails 7.2. You might want to yank 0.0.1 from Rubygems to avoid this confusion or change the README with something like:\r\n```\r\ngem \"hotwire-spark\", \"> 0.0.1\"\r\n```",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/21/comments",
    "author": "frenkel",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-19T13:17:27Z",
        "body": "Thanks for the heads up @frenkel. I just yanked it."
      }
    ]
  },
  {
    "number": 19,
    "title": "Not working with unauthenticated action cable connections",
    "created_at": "2024-12-19T09:23:17Z",
    "closed_at": "2024-12-21T11:57:13Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/hotwired/spark/issues/19",
    "body": "Hello,\r\n\r\nit doesn't work on the view `sessions/new` generated by the new authentication generator because it add this :\r\n\r\n```\r\nmodule ApplicationCable\r\n  class Connection < ActionCable::Connection::Base\r\n    identified_by :current_user\r\n\r\n    def connect\r\n      set_current_user || reject_unauthorized_connection\r\n    end\r\n\r\n    private\r\n      def set_current_user\r\n        if session = Session.find_by(id: cookies.signed[:session_id])\r\n          self.current_user = session.user\r\n        end\r\n      end\r\n  end\r\nend\r\n```\r\n\r\nI fixed the problem removing this method `reject_unauthorized_connection` but i do not think it's a good solution.",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/19/comments",
    "author": "aurum-ellt",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-19T10:33:25Z",
        "body": "Aah thanks for reporting @aurum-ellt. \r\n\r\nI'll see how we can fix. I think the gem should patch ApplicationCable connection to skip auth when the requests come from hotwire spark."
      },
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-21T12:07:12Z",
        "body": "Released 0.1.8 with fix"
      }
    ]
  },
  {
    "number": 15,
    "title": "undefined method `hotwire' for #<Rails::Application::Configuration:0x00000000007648> (NoMethodError)",
    "created_at": "2024-12-18T18:50:23Z",
    "closed_at": "2024-12-18T20:22:18Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/issues/15",
    "body": "Rails 7.1.3.4\r\n\r\nAdded the gem to the development group and ran `bundle install`\r\n\r\nUpdated `development.rb`\r\n\r\n```ruby\r\nconfig.hotwire.spark.html_paths += ['app/components']\r\nconfig.hotwire.spark.stimulus_paths += ['app/components']\r\n```\r\n\r\nReceived error:\r\n\r\n```gems/railties-7.1.3.4/lib/rails/railtie/configuration.rb:109:in `method_missing': undefined method `hotwire' for #<Rails::Application::Configuration:0x00000000007648> (NoMethodError)```",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/15/comments",
    "author": "t2",
    "comments": [
      {
        "user": "robzolkos",
        "created_at": "2024-12-18T19:54:42Z",
        "body": "I think you need Rails 8+ for this."
      },
      {
        "user": "t2",
        "created_at": "2024-12-18T20:22:08Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 10,
    "title": "Remove solid cable patch",
    "created_at": "2024-12-18T15:29:40Z",
    "closed_at": "2024-12-18T16:26:35Z",
    "labels": [],
    "url": "https://github.com/hotwired/spark/pull/10",
    "body": "With the release of v3.0.5 of solid cable i believe this patch is no longer needed. ",
    "comments_url": "https://api.github.com/repos/hotwired/spark/issues/10/comments",
    "author": "npezza93",
    "comments": [
      {
        "user": "jorgemanrubia",
        "created_at": "2024-12-18T16:26:32Z",
        "body": "Oh thanks @npezza93! I had removed the code including it but not the patch class itself! Thanks for all the help with Solid Cable 🙏"
      }
    ]
  }
]