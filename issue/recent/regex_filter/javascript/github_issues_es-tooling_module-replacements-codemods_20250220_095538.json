[
  {
    "number": 84,
    "title": "Fix progress indicator of `npm run which`",
    "created_at": "2024-08-02T16:16:33Z",
    "closed_at": "2024-08-04T08:37:26Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/84",
    "body": "I noticed the percentage is a bit off. The `which` script only lists native and micro-util replacements but there are preferred replacements in the package as well which counted towards the progress. What should the percentage represent? This PR uses native and micro-util replacements only.",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/84/comments",
    "author": "filipre",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-08-04T08:37:23Z",
        "body": "Hehe yeah I noticed this too the other day. We also have some codemods that are not micro-utils or native/polyfills, so the numbers are skewed a bit. I think its fine to native and micro-util üëç We can probably get rid of the script pretty soon too, since we've already implemented the bulk of them"
      }
    ]
  },
  {
    "number": 81,
    "title": "traverse",
    "created_at": "2024-08-02T13:54:42Z",
    "closed_at": "2024-08-07T09:43:43Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/81",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/81/comments",
    "author": "PuruVJ",
    "comments": [
      {
        "user": "ronanru",
        "created_at": "2024-08-03T09:54:49Z",
        "body": "Please run `npm run format`"
      },
      {
        "user": "PuruVJ",
        "created_at": "2024-08-03T14:52:46Z",
        "body": "Done"
      },
      {
        "user": "thepassle",
        "created_at": "2024-08-07T09:43:54Z",
        "body": "Thanks for the PR!"
      }
    ]
  },
  {
    "number": 79,
    "title": "add deep-equal codemod",
    "created_at": "2024-08-02T09:40:51Z",
    "closed_at": "2024-08-04T08:32:20Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/79",
    "body": "This adds a codemod for `deep-equal`. \r\n\r\nI also added a shared util for a generic `replaceImports` function, which can replace a module import as well as all of it's usages. This util should handle different ways of importing modules, as well as reassigning/destructuring imports outside of the initial import statement. For example:\r\n\r\n```js\r\nimport * as module from 'deep-equal';\r\n\r\nconst foo = module.default;\r\n\r\nfoo('a', 'b');\r\n```\r\n\r\nThis way future codemods can be implemented very easily based on this function, handling all the edge cases.\r\n\r\nRight now the function doesn't handle scoping at all, so this will break:\r\n\r\n```js\r\nimport deepEqual from 'deep-equal';\r\n\r\nfunction maybeDeepEqual(deepEqual) {\r\n  deepEqual('a', 'b');\r\n}\r\n\r\nmaybeDeepEqual(null);\r\n```\r\n\r\nI've implemented scope handling / binding tracking with babel transforms, but I couldn't get it working within jscodeshift yet. Something to add later, but for these kinds of codemods this may not be super common.",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/79/comments",
    "author": "LarsDenBakker",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-08-02T10:07:17Z",
        "body": "> Right now the function doesn't handle scoping at all, so this will break:\r\n\r\njscodeshift should be able to still find the imported symbol and replace it, right?"
      }
    ]
  },
  {
    "number": 77,
    "title": "feat: add chalk codemod",
    "created_at": "2024-08-01T21:52:47Z",
    "closed_at": "2024-08-01T22:07:52Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/77",
    "body": "Adds a codemod for moving from `chalk` to `picocolors`.\r\n\r\nThis will throw if exports are encountered which picocolors doesn't provide. For example, as of writing this, picocolors doesn't support bright colours (but soon will). That means `chalk.redBright` will throw since picocolors has no `redBright` export.\r\n\r\nThese patterns are supported:\r\n\r\n```ts\r\n\r\n// Before\r\nchalk.red.bold(str);\r\n// After\r\npc.red(pc.bold(str));\r\n\r\n// Before\r\nchalk.red`i am red`;\r\n// After\r\npc.red(`i am red`);\r\n\r\n// Before\r\nchalk.red`i am red and ${chalk.bold('bold')}!`;\r\n// After\r\npc.red(`i am red and ${pc.bold('bold')}!`);\r\n```\r\n\r\nSome patterns will not be detected. For example:\r\n\r\n```ts\r\n// Not detected since it isn't a call expression\r\nchalk.red;\r\n\r\n// Similarly not detected\r\nconst red = chalk.red;\r\nred(str);\r\n```",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/77/comments",
    "author": "43081j",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-08-01T22:07:49Z",
        "body": "nice üëç "
      }
    ]
  },
  {
    "number": 64,
    "title": "fix: import name reliance across various codemods",
    "created_at": "2024-07-23T17:09:41Z",
    "closed_at": "2024-07-23T17:20:40Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/64",
    "body": "This PR fixes reliance on hardcoded import names across various codemods. Developers may choose to import packages with non-standard names like `var banana = require(\"array-includes\");` in which our codemod would break the code by removing the import without replacing the usages.\r\n\r\nThis PR also updates tests to ensure the \"non-standard import name\" case is tested. I figured I'd update the existing tests in-place, since adding new cases feels like too much overhead/boilerplate but I'm happy to make the change if you'd rather have them as separate cases.",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/64/comments",
    "author": "MeLlamoPablo",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-23T17:20:37Z",
        "body": "This is great man, I had this on my list, thanks for the PR!"
      }
    ]
  },
  {
    "number": 62,
    "title": "fix(is-npm): support more ways of importing + non-standard import names",
    "created_at": "2024-07-23T12:53:12Z",
    "closed_at": "2024-07-23T17:31:47Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/62",
    "body": "Currently, the `is-npm` codemod assumes that developers name the imported members `isNpm`, `isYarn` and `isYarnOrNpm`. However, there are two ways in which developers could alter the imports that can't be handled by the codemod:\r\n\r\n```js\r\n// ESM\r\nimport { isNpm as banana, isYarn as pear, isNpmOrYarn as strawberry } from 'is-npm';\r\nimport * as banana from 'is-npm';\r\n\r\n// CJS\r\nconst { isNpm: banana, isYarn: pear, isNpmOrYarn: strawberry } = require('is-npm');\r\nconst banana = require('is-npm');\r\n```\r\n\r\nMoreover, by relying on hardcoded names, we also could potentially make unsafe modifications to developer code (they could have an `isNpm` variable themselves which is different from the imported one and has a different meaning)\r\n\r\nThis PR makes the codemod detect the imported names dynamically so that it supports the styles above. It also adds test cases to handle the new styles.\r\n\r\nThe PR introduces the `getImportIdentifierMap` helper which creates a map like this:\r\n\r\n```js\r\n// import { isNpm as banana, isYarn as pear, isNpmOrYarn as strawberry } from 'is-npm';\r\nconst map = {\r\n  isNpm: \"banana\",\r\n  isYarn: \"pear\",\r\n  isNpmOrYarn: \"strawberry\"\r\n}\r\n\r\n// import * as banana from 'is-npm';\r\nconst map = {\r\n  [Symbol(NAMEPSACE_IMPORT)]: \"banana\"\r\n}\r\n```\r\n\r\nThis helper should be useful for cases where a module exports multiple names and `const { identifier } = removeImport()` is not sufficient.\r\n\r\nThere is some duplication in the codemod code, as the \"individual name import\" and \"namespace import\" cases need to be handled separately. However, since I suspect that this issue will also apply to other codemods, I believe the duplication is fine for now ‚Äî we can figure out better abstractions as we continue improving the mods.\r\n\r\nThanks for reading!",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/62/comments",
    "author": "MeLlamoPablo",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-23T17:31:46Z",
        "body": "Nice, thanks!"
      }
    ]
  },
  {
    "number": 59,
    "title": "feat: add math.*",
    "created_at": "2024-07-22T16:52:14Z",
    "closed_at": "2024-07-22T21:55:12Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/59",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/59/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-22T21:55:18Z",
        "body": "awesome"
      }
    ]
  },
  {
    "number": 54,
    "title": "couple of codemods for object.*",
    "created_at": "2024-07-22T00:10:28Z",
    "closed_at": "2024-07-22T05:12:12Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/54",
    "body": "- object.keys\r\n- object.defineproperties\r\n- object.getprototypeof",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/54/comments",
    "author": "donecarlo",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-22T05:12:08Z",
        "body": "Thanks for the PR!"
      }
    ]
  },
  {
    "number": 53,
    "title": "feat: add codemod for `is-npm`",
    "created_at": "2024-07-21T22:34:05Z",
    "closed_at": "2024-07-22T05:11:22Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/53",
    "body": "Codemod for the `is-npm` package",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/53/comments",
    "author": "babs20",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-22T05:11:28Z",
        "body": "Thanks for the PR!"
      }
    ]
  },
  {
    "number": 51,
    "title": "feat: add codemod for `split-lines`",
    "created_at": "2024-07-21T20:26:45Z",
    "closed_at": "2024-07-21T20:29:28Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/51",
    "body": "Codemod for the `split-lines` package",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/51/comments",
    "author": "babs20",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T20:29:33Z",
        "body": "Thanks for the contribution!"
      }
    ]
  },
  {
    "number": 46,
    "title": "feat: add `setprototypeof`",
    "created_at": "2024-07-21T17:29:19Z",
    "closed_at": "2024-07-21T17:37:23Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/46",
    "body": "Codemod for the `setprototypeof` package which is a polyfill of `Object.setPrototypeOf`",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/46/comments",
    "author": "babs20",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T17:37:20Z",
        "body": "Thanks for the PR!"
      }
    ]
  },
  {
    "number": 45,
    "title": "Add array.prototype codemods",
    "created_at": "2024-07-21T17:23:27Z",
    "closed_at": "2024-07-21T17:37:09Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/45",
    "body": "This PR also fixes casing in import names for `flatMap`, `findIndex` and `forEach`",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/45/comments",
    "author": "ajkl2533",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T17:37:07Z",
        "body": "Good catch, thanks!"
      }
    ]
  },
  {
    "number": 44,
    "title": "feat: add `object.hasown`",
    "created_at": "2024-07-21T16:58:43Z",
    "closed_at": "2024-07-21T17:20:09Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/44",
    "body": "Basically the same as the existing `hasown` but from `es-shims`.\r\n\r\nI wonder if there is existing infrastructure to avoid duplicating codemods like this?",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/44/comments",
    "author": "kidonng",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T17:19:49Z",
        "body": "We have an abstraction for the array methods, because most of those have the same implementations, but not for this one. If there are more codemods that need this same implementation, it could make sense to make an abstraction for it yeah. For now I'll merge this as is, thank you for the contribution!"
      }
    ]
  },
  {
    "number": 39,
    "title": "feat: add `is-primitive`",
    "created_at": "2024-07-21T14:26:46Z",
    "closed_at": "2024-07-21T14:43:08Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/39",
    "body": "Hi :wave:\r\n\r\nI never had a chance to work with `jscodeshift`, so I took myself an opportunity to give it a try. And in the meantime,\r\ncontribute to OSS initiatives such as this one.\r\n\r\nI picked `is-primitive` randomly, and I'm appending the function declaration at the end of the program body.\r\n\r\nLet me know if that's the expected result, because I wasn't sure about it.\r\n",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/39/comments",
    "author": "xeho91",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T14:43:05Z",
        "body": "LGTM! Thanks for contributing, nice to hear that this was your first experience with jscodeshift"
      }
    ]
  },
  {
    "number": 35,
    "title": "fix: wrong substitution in `array.prototype.entries`",
    "created_at": "2024-07-21T09:50:57Z",
    "closed_at": "2024-07-21T15:13:09Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/35",
    "body": "This PR fixes a bug in the `array.prototype.entries` codemod that attempts to substitute the `const entries = require('array.prototype.entries')` import with `[].entries()`. It incorrectly derives the name of the native `entries` method in the `Array` prototype from the name of the import identifier. Therefore if I import:\r\n\r\n```js\r\nconst entries = require('array.prototype.entries')\r\n```\r\n\r\nMy code becomes:\r\n\r\n```js\r\n[].arrayEntries()\r\n```\r\n\r\nThis PR also adds a fixture to cover the non-standard import name case.",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/35/comments",
    "author": "MeLlamoPablo",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-21T10:15:02Z",
        "body": "Good catch!\r\n\r\nIt seems like theres 1 failing test, could you fix that and update the PR? Thanks! üôÇ"
      },
      {
        "user": "MeLlamoPablo",
        "created_at": "2024-07-21T10:35:16Z",
        "body": "Sure thing, I'll take a look soon!"
      },
      {
        "user": "MeLlamoPablo",
        "created_at": "2024-07-21T14:49:08Z",
        "body": "@thepassle tests work locally for me now, looks like it was an issue with my IDE forcing a new line at the end"
      },
      {
        "user": "thepassle",
        "created_at": "2024-07-21T15:13:06Z",
        "body": "Oh nice, thanks for fixing :) And thanks for the PR!"
      }
    ]
  },
  {
    "number": 31,
    "title": "feat: finish all array polyfills",
    "created_at": "2024-07-20T22:26:40Z",
    "closed_at": "2024-07-20T22:35:12Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/31",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/31/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-20T22:35:08Z",
        "body": "this is huge"
      }
    ]
  },
  {
    "number": 29,
    "title": "feat: add array.prototype.findlast and array.prototype.tosorted",
    "created_at": "2024-07-20T17:43:01Z",
    "closed_at": "2024-07-20T17:44:05Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/29",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/29/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-20T17:44:17Z",
        "body": "Thanks Matvey!"
      }
    ]
  },
  {
    "number": 28,
    "title": "add codemod for object-assign",
    "created_at": "2024-07-20T12:49:59Z",
    "closed_at": "2024-07-20T12:53:41Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/28",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/28/comments",
    "author": "andrico1234",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-20T12:53:39Z",
        "body": "thanks buddy ‚ù§Ô∏è great work"
      }
    ]
  },
  {
    "number": 25,
    "title": "feat: add is-nan and number.ianan",
    "created_at": "2024-07-20T09:54:49Z",
    "closed_at": "2024-07-20T11:13:34Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/25",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/25/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-20T11:13:40Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 24,
    "title": "feat: add object-is and object.entries",
    "created_at": "2024-07-19T21:49:25Z",
    "closed_at": "2024-07-19T22:16:31Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/24",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/24/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-19T22:16:44Z",
        "body": "thanks dude, youre killing it!"
      }
    ]
  },
  {
    "number": 23,
    "title": "feat: add has, has-own-prop, hasown",
    "created_at": "2024-07-19T16:50:16Z",
    "closed_at": "2024-07-19T17:08:31Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/23",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/23/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-19T17:08:37Z",
        "body": "Nice!"
      }
    ]
  },
  {
    "number": 22,
    "title": "feat: isOdd",
    "created_at": "2024-07-19T14:23:51Z",
    "closed_at": "2024-07-19T14:26:25Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/22",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/22/comments",
    "author": "dgrammatiko",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-19T14:26:33Z",
        "body": "Thanks for the contribution! Nice work"
      }
    ]
  },
  {
    "number": 17,
    "title": "feat: add functions-have-names",
    "created_at": "2024-07-18T18:29:34Z",
    "closed_at": "2024-07-18T18:33:04Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/17",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/17/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T18:33:02Z",
        "body": "lmao some of these packages are absurd"
      }
    ]
  },
  {
    "number": 15,
    "title": "feat: add array.prototype.every",
    "created_at": "2024-07-18T18:04:48Z",
    "closed_at": "2024-07-18T18:05:56Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/15",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/15/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T18:06:21Z",
        "body": "Nice work! I wonder if it makes sense to make an abstraction for all the array methods, since they're all kind of the same thing anyway ü§î "
      }
    ]
  },
  {
    "number": 13,
    "title": "feat: Add codemod to replace `is-negative-zero`",
    "created_at": "2024-07-18T16:34:39Z",
    "closed_at": "2024-07-18T16:49:46Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/13",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/13/comments",
    "author": "listlessbird",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T16:49:39Z",
        "body": "Great work! Thanks for the contribution!"
      }
    ]
  },
  {
    "number": 12,
    "title": "Automatically uninstall packages",
    "created_at": "2024-07-18T14:37:38Z",
    "closed_at": "2024-08-01T16:36:02Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/issues/12",
    "body": "This might be a bit of a stretch beyond just editing the JS code, but it would be neat if the CLI for this eventually uninstalled the actual packages themselves. That is, if you have the `is-regexp` package installed (for example) it would also remove it from:\n\n- `package.json`\n- `package-lock.json`\n- whatever other lock/package files you have\n\nThe end goal being that the CLI will completely purge your project of these modules wherever they might be referenced.\n",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/12/comments",
    "author": "camchenry",
    "comments": [
      {
        "user": "ajkl2533",
        "created_at": "2024-07-18T16:21:07Z",
        "body": "I think this could work only for direct dependencies mentioned in `package.json` file because codemods will clean your own codebase but you have no control over third party dependencies.\r\nThis actually might be task for the CLI (once there will be any) that could perform uninstall after all selected codemods are done. It seems more safe option than touch `package.lock` or lockfiles directly."
      },
      {
        "user": "thepassle",
        "created_at": "2024-07-18T16:26:15Z",
        "body": "Yep, agree. Theres a todo in the code somewhere that mentions this. The cli is super barebones right now, its just there to have something, im mainly focused on gathering/implementing the codemods right now. @43081j had some ideas around the cli as well"
      },
      {
        "user": "thepassle",
        "created_at": "2024-07-18T19:37:50Z",
        "body": "I wonder if it would be enough to glob for `**/package.json`, and just remove the packages from the hits there, since the codemods will already glob for all js/ts/etc files anyway, and that way it would work for monorepos too"
      },
      {
        "user": "thepassle",
        "created_at": "2024-08-01T16:36:02Z",
        "body": "The scope of this repository has changed a bit, and the CLI will be implemented elsewhere. This repo will just be a home for the codemods, so that other tools can use them and do whatever they wish with them, so removing the package from the package.json will be an implementation detail of such tools. So I'll close this issue for now :)"
      }
    ]
  },
  {
    "number": 11,
    "title": "No license",
    "created_at": "2024-07-18T12:39:55Z",
    "closed_at": "2024-07-18T13:01:11Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/issues/11",
    "body": "Please add an open-source license to the repository",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/11/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T13:01:11Z",
        "body": "Added a MIT license üëç "
      }
    ]
  },
  {
    "number": 10,
    "title": "style: add trailling comma option",
    "created_at": "2024-07-18T09:24:58Z",
    "closed_at": "2024-07-18T10:07:51Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/10",
    "body": "Adds trailling commas to generated `codemods/index.js` file. This should align the style with the Biome configuration where trailing commas are enabled by default.\n\nI noticed this small issue when I was resolving conflicts and I had to manually add the comma.",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/10/comments",
    "author": "ajkl2533",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T10:08:00Z",
        "body": "Nice, thanks :)"
      }
    ]
  },
  {
    "number": 9,
    "title": "Add codemod to replace `array.prototype.some`",
    "created_at": "2024-07-18T08:51:40Z",
    "closed_at": "2024-07-18T09:09:12Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/9",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/9/comments",
    "author": "ajkl2533",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T08:54:43Z",
        "body": "I just merged the other PR, looks like this now has conflicts, can you fix those? :) Otherwise LGTM"
      },
      {
        "user": "ajkl2533",
        "created_at": "2024-07-18T09:04:38Z",
        "body": "@thepassle resolved"
      }
    ]
  },
  {
    "number": 8,
    "title": "Add codemod to replace `array.prototype.splice`",
    "created_at": "2024-07-18T08:41:06Z",
    "closed_at": "2024-07-18T08:54:01Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/8",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/8/comments",
    "author": "ajkl2533",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T08:53:59Z",
        "body": "Killing it :) Thanks!"
      }
    ]
  },
  {
    "number": 7,
    "title": "Add codemod to replace `array.prototype.unshift`",
    "created_at": "2024-07-18T08:14:48Z",
    "closed_at": "2024-07-18T08:25:56Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/7",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/7/comments",
    "author": "ajkl2533",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-18T08:25:51Z",
        "body": "Great work, thanks for the PR!"
      }
    ]
  },
  {
    "number": 4,
    "title": "feat: add array-includes",
    "created_at": "2024-07-17T19:06:36Z",
    "closed_at": "2024-07-17T19:10:16Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/4",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/4/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-17T19:10:24Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 3,
    "title": "feat: add array.prototype.filter",
    "created_at": "2024-07-17T18:41:46Z",
    "closed_at": "2024-07-17T18:48:26Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/3",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/3/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-17T18:48:40Z",
        "body": "Nice work, keep em coming üòÑ"
      }
    ]
  },
  {
    "number": 2,
    "title": "fix: scaffold script doesn't work for packages with dots in the name",
    "created_at": "2024-07-17T18:26:05Z",
    "closed_at": "2024-07-17T18:32:30Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/2",
    "body": "When I used the scaffold script to generate files for the `array.prototype.map` package, it added this line to `index.js`\r\n```js\r\nimport array.prototype.map from './array.prototype.map/index.js';\r\n```\r\nThis PR fixes this. Now the generated code is valid js.\r\n```js\r\nimport arrayPrototypeMap from './array.prototype.map/index.js';\r\n```",
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/2/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-17T18:32:38Z",
        "body": "Good catch, thanks :)"
      }
    ]
  },
  {
    "number": 1,
    "title": "feat: add array.prototype.map",
    "created_at": "2024-07-17T17:54:12Z",
    "closed_at": "2024-07-17T18:06:00Z",
    "labels": [],
    "url": "https://github.com/es-tooling/module-replacements-codemods/pull/1",
    "body": null,
    "comments_url": "https://api.github.com/repos/es-tooling/module-replacements-codemods/issues/1/comments",
    "author": "ronanru",
    "comments": [
      {
        "user": "thepassle",
        "created_at": "2024-07-17T18:05:50Z",
        "body": "You're the best"
      }
    ]
  }
]