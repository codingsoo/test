[
  {
    "number": 123,
    "title": "How to connect Claude desktop to MCP server using SSE",
    "created_at": "2024-12-20T14:50:39Z",
    "closed_at": "2025-01-02T13:51:47Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/modelcontextprotocol/specification/issues/123",
    "body": "Hi,\r\n\r\nYou have nice example over SSE, but how to connect Claude desktop to MCP server using SSE not Stdio. \r\n\r\nThis would make debug easier and most of all leverage networking and shared MCP component with other tools.\r\n\r\nThanks\r\nM B",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/123/comments",
    "author": "Mehdi-Bl",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2025-01-02T13:51:47Z",
        "body": "This is not relevant to the spec (this repo). Please also search existing discussions, where this has been asked before."
      }
    ]
  },
  {
    "number": 57,
    "title": "Cleanup",
    "created_at": "2024-11-20T22:46:20Z",
    "closed_at": "2024-11-21T15:04:37Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/specification/pull/57",
    "body": "- **remove examples**\n- **improve how we call hugo**\n",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/57/comments",
    "author": "dsp-ant",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-21T09:32:09Z",
        "body": "Can you update CONTRIBUTING.md too?"
      }
    ]
  },
  {
    "number": 50,
    "title": "Add optional annotations",
    "created_at": "2024-11-18T03:03:29Z",
    "closed_at": "2024-11-20T13:16:05Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/specification/pull/50",
    "body": "These anntoations are intended to solve a few problems we've seen building systems.\r\n\r\n- A tool output might need to include content intended to display to the human but another piece of content intended to show as a result to the LLM.\r\n  - E.g. A compilation tool might show the full output to the LLM so it can debug errors, but the UX might minimize or omit that output for the human where it can be too verbose\r\n  - E.g. A data visualization tool might show an image to the human of the result, but only send a summary to the LLM\r\n- A resource might have different priorities for inclusion in context\r\n  - E.g. A code system might depend on including previously written files in context, while other files in the project could be looked up with more discretion\r\n\r\nIt seems hard to predict what all these annotations will be so this is a generic approach, but provides a place in the spec for them to develop over time",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/50/comments",
    "author": "baxen",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-20T13:11:50Z",
        "body": "> Given conventional use of \"P0\" being more important than \"P1\", i think i'll update the comment to make it clear lower numbers are more important than higher numbers? That also helps with adding arbitrarily more granular while clients can always assume zero remains \"most important\"\r\n\r\nUnfortunately, we already have priority between [0, 1] in `ModelPreferences`, so I think we should remain consistent. I can fix that bit up and then get this merged.\r\n\r\nThank you for working on this! ðŸ™Œ "
      }
    ]
  },
  {
    "number": 30,
    "title": "Use full list of syslog logging severities",
    "created_at": "2024-11-04T13:33:22Z",
    "closed_at": "2024-11-04T15:06:47Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/specification/pull/30",
    "body": "Resolves #27.",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/30/comments",
    "author": "jspahrsummers",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-04T13:34:44Z",
        "body": "We can't really define these numerically without breaking backwards compatibility, but I'm not sure I want to anyway."
      },
      {
        "user": "dsp-ant",
        "created_at": "2024-11-04T14:59:59Z",
        "body": "I think we still need a spec documentation for logging\r\n"
      }
    ]
  },
  {
    "number": 13,
    "title": "docs: add early version of the resources spec",
    "created_at": "2024-10-02T16:14:36Z",
    "closed_at": "2024-10-03T14:57:21Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/specification/pull/13",
    "body": null,
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/13/comments",
    "author": "dsp-ant",
    "comments": [
      {
        "user": "dsp-ant",
        "created_at": "2024-10-03T11:39:35Z",
        "body": "> I think these docs are super useful, but I'm worried about drift between them and the actual schema (which should be canonical IMO). Is there some way that we can statically validate that we don't use types in the examples here that aren't in the schema itself?\r\n\r\nI agree. I am skeptical about our current approach. I am looking for ideas for how to best approach this. We clearly need some set of good developer documentation that clearly outlines the request flows."
      },
      {
        "user": "jspahrsummers",
        "created_at": "2024-10-03T12:08:13Z",
        "body": "Can we do something like `scripts/validate_examples.ts`, but for the main docs and using `tsc` to check that the types are correct?"
      },
      {
        "user": "dsp-ant",
        "created_at": "2024-10-03T14:57:16Z",
        "body": "  I actually went back to not include the exact interfaces. I'll think more about it. Likely we are best off including the interfaces but making sure we have something like a validate step."
      }
    ]
  },
  {
    "number": 8,
    "title": "Add 'name' to resources",
    "created_at": "2024-09-26T11:02:17Z",
    "closed_at": "2024-09-26T19:26:09Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/specification/pull/8",
    "body": "Resolves #5.",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/8/comments",
    "author": "jspahrsummers",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-09-26T17:03:18Z",
        "body": "I was thinking if it's not specified, rendering as the URI is probably acceptable. But we could equally make the server specify that, I guess?"
      },
      {
        "user": "dsp-ant",
        "created_at": "2024-09-26T17:20:27Z",
        "body": "yea, so if we could make it required and servers who have no better name, can just put the uri into the name."
      }
    ]
  },
  {
    "number": 4,
    "title": "Clarify that progress <= total",
    "created_at": "2024-09-25T11:39:31Z",
    "closed_at": "2024-11-04T20:36:20Z",
    "labels": [
      "documentation",
      "website",
      "protocol"
    ],
    "url": "https://github.com/modelcontextprotocol/specification/issues/4",
    "body": "But that progress doesn't have to be normalized to [0, 1].",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/4/comments",
    "author": "dsp-ant",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-04T20:36:20Z",
        "body": "We have examples showing this, and the schema doesn't bound these numbers, so I think this is OK."
      }
    ]
  },
  {
    "number": 3,
    "title": "Written specification available as website",
    "created_at": "2024-09-25T11:39:06Z",
    "closed_at": "2024-11-24T23:29:30Z",
    "labels": [
      "documentation",
      "website"
    ],
    "url": "https://github.com/modelcontextprotocol/specification/issues/3",
    "body": null,
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/3/comments",
    "author": "dsp-ant",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-04T20:38:44Z",
        "body": "@dsp-ant Do you think this is resolved now?"
      },
      {
        "user": "dsp-ant",
        "created_at": "2024-11-05T11:20:19Z",
        "body": "Mostly. There are still missing pieces."
      }
    ]
  },
  {
    "number": 2,
    "title": "Some way to substitute resources into prompts",
    "created_at": "2024-09-25T11:38:31Z",
    "closed_at": "2024-11-05T14:25:35Z",
    "labels": [
      "enhancement",
      "protocol"
    ],
    "url": "https://github.com/modelcontextprotocol/specification/issues/2",
    "body": null,
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/specification/issues/2/comments",
    "author": "dsp-ant",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-10-22T15:34:10Z",
        "body": "We could extend prompts' return values to support interleaving resource references. This might require extending or forking the `SamplingMessage` type into a specialized (e.g.) `PromptMessage`."
      }
    ]
  }
]