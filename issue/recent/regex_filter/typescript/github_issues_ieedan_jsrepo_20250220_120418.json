[
  {
    "number": 399,
    "title": "feat: Subdirectories",
    "created_at": "2025-01-30T10:06:34Z",
    "closed_at": "2025-02-04T11:42:31Z",
    "labels": [
      "feature"
    ],
    "url": "https://github.com/ieedan/jsrepo/issues/399",
    "body": "### Describe the feature\n\nIt would be great if each block could also contain subdirectories. Then we could store not only smaller snippets in jsrepo, but also larger, framework-like codes.\n\n### Validations\n\n- [x] I have checked other issues to see if my feature was already requested or added",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/399/comments",
    "author": "laborci",
    "comments": [
      {
        "user": "ieedan",
        "created_at": "2025-01-30T13:35:27Z",
        "body": "I think including subdirectories would be fine. But I don't think it would be any good for project templates like you mention here. \n\nMostly because jsrepo has to individually fetch every file from the registry so if you have 100 files even though it is parallelized now it would most likely take a while.\n\nAdding subdirectories shouldn't be too much of a hassle though I think that all that needs to happen is that the build function is made recursive."
      }
    ]
  },
  {
    "number": 397,
    "title": "Add metadata to `jsrepo-manifest.json`?",
    "created_at": "2025-01-28T21:25:42Z",
    "closed_at": "2025-02-03T19:20:51Z",
    "labels": [
      "help wanted",
      "question"
    ],
    "url": "https://github.com/ieedan/jsrepo/issues/397",
    "body": "I want to throw this out there and see if anyone think's it is a good idea so please give me your feedback on this one!\n\nWith the new updates to the docs site we can now see documentation for any public registries by navigating to `/registry?url=github/ieedan/std`. This uses the information in the manifest file to create a nice little documentation page for the user.\n\nHowever there isn't currently any way to link the user to additional documentation, credit the authors, etc.\n\nSo here is the proposal... \n\nAdd a `meta` key to `jsrepo-build-config.json` or allow jsrepo to pull from the `package.json` to get things like the author, description, keywords. Then this information can be displayed on the docs screen.\n\nThis is just an initial idea so please give me your thoughts on what makes sense!",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/397/comments",
    "author": "ieedan",
    "comments": [
      {
        "user": "DavidHDev",
        "created_at": "2025-01-28T23:12:27Z",
        "body": "I think adding the `meta` key to the config file the better approach since it allows customization independent of the package.json file, giving you control over what to display. \n\nThis also makes it optional—some users might prefer not to pull information from package.json (even if I can't think of a specific reason) or may want different wording displayed in the JSRepo docs. 🙌 "
      },
      {
        "user": "ieedan",
        "created_at": "2025-01-29T00:01:32Z",
        "body": "> I think adding the `meta` key to the config file the better approach since it allows customization independent of the package.json file, giving you control over what to display.\n\nI am partial to this for sure. Any ideas on keys?\n\nA few I am already considering\n- Authors\n- Docs\n- Repository?"
      },
      {
        "user": "ieedan",
        "created_at": "2025-02-03T12:09:56Z",
        "body": "@DavidHDev current schema for the manifest metadata. Let me know what you think right now it is heavily inspired by the package.json meta keys.\n\n```ts\ntype Meta = {\n    builtAt: number;\n    authors?: string[] | undefined;\n    description?: string | undefined;\n    repository?: string | undefined;\n    homepage?: string | undefined;\n    tags?: string[] | undefined;\n    bugs?: string | undefined;\n}\n```"
      },
      {
        "user": "ieedan",
        "created_at": "2025-02-03T19:20:51Z",
        "body": "Completed with #406 "
      }
    ]
  },
  {
    "number": 316,
    "title": "feat: Forced Dependencies Per Category",
    "created_at": "2024-12-24T12:22:43Z",
    "closed_at": "2024-12-24T14:27:21Z",
    "labels": [
      "feature"
    ],
    "url": "https://github.com/ieedan/jsrepo/issues/316",
    "body": "### Describe the feature\n\n### What’s the Idea?  \r\nAdd a way to force certain dependencies that cant be auto detected for specific categories in `jsrepo`. This would make it easier to manage shared resources.\r\n\r\n### Why This is Useful  \r\nI want to have one `jsrepo` registry per client, with each registry containing components tailored to the client’s styling and way of doing things. Each client typically has a global CSS file that all components in their registry rely on.  \r\n\r\nCurrently, `jsrepo` doesn’t auto-detect CSS dependencies, so I have to handle this manually. It would save time and improve the workflow if `jsrepo` could automatically include these files during the build process.\r\n\r\n### How It Could Work  \r\nAdd a `forcedDeps` option to the `jsrepo-build-config` file, like this:  \r\n\r\n```javascript\r\nforcedDeps: {\r\n    \"category1\": [\"path/to/global.css\", \"path/to/global.js\"],\r\n    \"category2\": [\"path/to/another-dependency.js\"]\r\n}\r\n\n\n### Validations\n\n- [X] I have checked other issues to see if my feature was already requested or added",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/316/comments",
    "author": "FredrikMWold",
    "comments": [
      {
        "user": "ieedan",
        "created_at": "2024-12-24T13:43:10Z",
        "body": "This kinda fits more along the lines of shared configuration.\n\nI haven't quite figured out a nice way to do this I don't necessarily think this forced deps api is the right way to go.\n\nRight now you kinda have 2 options:\n- document the need for configuration files\n- add a side effect import on each component like \n```ts\nimport '../styles/global.css';\n```\n\nConfiguration is something that would be nice to solve but it has a lot of challenges to make it work for everyone."
      },
      {
        "user": "FredrikMWold",
        "created_at": "2024-12-24T14:27:21Z",
        "body": "Got it, I can see how this seems like part of a larger issue.  \r\n\r\nLooks like option 3 it is, manually adding them to the manifest file for now! 😆\r\n"
      }
    ]
  },
  {
    "number": 285,
    "title": "feat: add block list picker when using zero-config",
    "created_at": "2024-12-13T00:04:01Z",
    "closed_at": "2024-12-13T00:12:08Z",
    "labels": [
      "feature"
    ],
    "url": "https://github.com/ieedan/jsrepo/issues/285",
    "body": "### Describe the feature\n\nWhen running `npx jsrepo add github/<owner>/<name>/<category>/<name>` in zero-config mode, could it display the same list of blocks the same way as with a config file? \n\n### Validations\n\n- [X] I have checked other issues to see if my feature was already requested or added",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/285/comments",
    "author": "FredrikMWold",
    "comments": [
      {
        "user": "ieedan",
        "created_at": "2024-12-13T00:11:58Z",
        "body": "It already does just do\n\n```\nnpx jsrepo add --repo github/ieedan/std\n```"
      }
    ]
  },
  {
    "number": 228,
    "title": "feat: hierarchical config",
    "created_at": "2024-12-03T23:41:20Z",
    "closed_at": "2024-12-04T02:10:26Z",
    "labels": [
      "feature"
    ],
    "url": "https://github.com/ieedan/jsrepo/issues/228",
    "body": "### Describe the feature\n\n### Use case\r\nI work across multiple projects, and while having one configurations for every projects works, it could be streamlined. For instance, I could have a company registry and share configurations for folders under that company without requiring every repository to include a `jsrepo` config file.  \r\n\r\n### Proposed Solution  \r\nImplement *staged configuration*, where `jsrepo` looks for config files hierarchically (e.g., project → company → global) and allows the closest file to override higher-level settings.  \n\n### Validations\n\n- [X] I have checked other issues to see if my feature was already requested or added",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/228/comments",
    "author": "FredrikMWold",
    "comments": [
      {
        "user": "ieedan",
        "created_at": "2024-12-03T23:45:42Z",
        "body": "Are you able to give a better example of the file structure here I am struggling a bit to understand. And you mean the jsrepo.json not the jsrepo-manifest.json?"
      },
      {
        "user": "FredrikMWold",
        "created_at": "2024-12-04T00:36:45Z",
        "body": "I'm approaching this feature from a project perspective, using `jsrepo.json` files to manage configurations. Here's an example of how I imagine it working:\r\n\r\n### Global Configuration\r\n\r\n- I create a `jsrepo.json` in my **home directory** to define general settings, such as:\r\n  - Enabling the watermark: `\"watermark\": true`\r\n  - Using Prettier as the formatter: `\"formatter\": \"prettier\"`\r\n\r\n### Company-Specific Configuration\r\n\r\n- In a folder dedicated to a specific **company**, I create a `jsrepo.json` that sets the registry to one specific to that company:\r\n  - `\"repo\": \"company-specific-registry\"`\r\n  \r\nThis allows me to use the CLI for any project under that company without needing to check in a `jsrepo.json` file, in case the team lead prefers not to include one in the repository.\r\n\r\n### Project-Specific Configuration\r\n\r\n- For a **specific project**, I create a `jsrepo.json` where I set up additional configurations, such as:\r\n  - `\"paths\": {...}`\r\n\r\n### CLI Configuration Priority\r\n\r\nThe CLI would prioritize configurations based on proximity to the working directory, overriding settings with the closest `jsrepo.json`. For example:\r\n- Project-level configurations override company-level configurations.\r\n- Company-level configurations override global configurations.\r\n"
      },
      {
        "user": "ieedan",
        "created_at": "2024-12-04T00:48:09Z",
        "body": "So basically you want to be able to do something like?\r\n```\r\n/home\r\n├── jsrepo.json\r\n├── ...\r\n└── my-company\r\n    ├── jsrepo.json\r\n\t├── ...\r\n    └── project\r\n\t\t└── jsrepo.json\r\n```\r\n\r\nHow does this avoid checking in a jsrepo.json though? You would still need one to configure paths for the project.\r\n\r\nYou could try instead using zero-config adds where you fully qualify the block like:\r\n```bash\r\nnpx jsrepo add github/ieedan/std/utils/math\r\n```\r\n\r\nIt would ask you where you want to place the block and whether or not you'd like to include tests and add the watermark."
      },
      {
        "user": "FredrikMWold",
        "created_at": "2024-12-04T01:00:34Z",
        "body": "\r\nYou won’t need to check in a `jsrepo.json` file to a project repository. If you use the CLI in a project that doesn’t have its own `jsrepo.json`, the CLI will \"look up\" to the nearest available `jsrepo.json` (such as one in the company folder) and apply the configurations from there, allowing you to select settings as needed.\r\n\r\nThat said, without a `jsrepo.json` in the project itself, certain features—like path mappings—won’t be fully functional. I see this approach as a form of progressive enhancement: You get the full experience, including path mappings, when a `jsrepo.json` is present in the project. However, if it's missing, you can still use the CLI effectively with just the company-level configuration.\r\n"
      },
      {
        "user": "ieedan",
        "created_at": "2024-12-04T01:06:23Z",
        "body": "If you are doing this why not just check in the jsrepo.json though? Better to do that then to have a bunch of files hanging that you have no clue where they came from. If your coworkers wanted the same experience in this scenario they would need to replicate your config files so that they can also add and update blocks. It seems less of a burden to just check the file in in that case so that everyone's on the same page no?"
      },
      {
        "user": "FredrikMWold",
        "created_at": "2024-12-04T01:19:59Z",
        "body": "I prefer using this approach because I frequently switch between projects, and I have components that I use often. This method fits perfectly with my preference to avoid the overhead of an npm package. However, in my experience, some team leads prefer not to have extra configuration files in the repository that they don't personally use.\r\n\r\nI'm not sure what you mean by \"hanging files.\" This is something I already manage for Git the samw way. I have a global `.gitconfig` for general settings and a specific `.gitconfig` in each company folder with settings unique to that company, allowing me to customize configurations per project or team.\r\n"
      },
      {
        "user": "ieedan",
        "created_at": "2024-12-04T01:42:03Z",
        "body": "This is possible I just don't really think it makes sense to implement. jsrepo does support zero-config adds albeit with limited functionality.\r\n\r\nThe `jsrepo.json` should probably be treated more like the `components.json` in `shadcn/ui` where it isn't really optional to check it in or not. You expect it to be there so that everyone has the same experience working on the project.\r\n\r\nI think having nested configs especially configs with required properties is going make it difficult for users to reason what they need to supply and what they don't since the schema has to be wide open for that to work. "
      },
      {
        "user": "FredrikMWold",
        "created_at": "2024-12-04T12:45:53Z",
        "body": "Is the plan moving forward for the zero-config CLI to incorporate more option flags to align with the properties in `jsrepo.json`? So that it would be possible to bypass the cli wizard.\r\n\r\nI ask because one of the things I really like about the `shadcn` CLI (and this one) is actually the opposite of what you're suggesting. What I appreciate is that I can use it without requiring anyone else on the team to learn or understand it. From their perspective, they simply see an implementation—like a `radix-ui` dialog—that they can modify as they would any regular component.\r\n\r\nThis approach works well because when the `jsrepo` person (me) eventually leaves, the rest of the team can treat the output as standard components, without needing to understand the tool used to generate them.\r\n\r\nWhile I agree that having everyone on the team adopt the tool would be ideal, it’s not always a realistic option.\r\n"
      },
      {
        "user": "ieedan",
        "created_at": "2024-12-04T12:49:25Z",
        "body": "We should be able to work on aligning zero-config with the `jsrepo.json` properties currrently instead of using flags it just prompts you for the options."
      }
    ]
  },
  {
    "number": 155,
    "title": "feat: 🔒 Private repos",
    "created_at": "2024-11-25T15:00:28Z",
    "closed_at": "2024-11-25T17:02:48Z",
    "labels": [],
    "url": "https://github.com/ieedan/jsrepo/issues/155",
    "body": "Working on this right now as it seems to be a pretty popular topic of discussion.\r\n\r\n## Tasks\r\n- [x] add `auth` command\r\n- [x] move any file fetches to `git-providers`\r\n- [ ] Add option to setup token when adding repos in `init`\r\n- [ ] (maybe) improve errors when no credentials are supplied (this is hard because you normally get a 404)",
    "comments_url": "https://api.github.com/repos/ieedan/jsrepo/issues/155/comments",
    "author": "ieedan",
    "comments": [
      {
        "user": "arielonoriaga",
        "created_at": "2024-11-25T15:15:32Z",
        "body": "👍🏻 "
      }
    ]
  }
]