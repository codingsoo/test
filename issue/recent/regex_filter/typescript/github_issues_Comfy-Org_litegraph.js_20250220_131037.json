[
  {
    "number": 525,
    "title": "Multiple inputs to one slot",
    "created_at": "2025-02-13T23:15:47Z",
    "closed_at": "2025-02-14T00:58:04Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/issues/525",
    "body": "Hi,\n\nI am looking into using this fork of litegraph for a project. I was wondering if this fork allows multiple inputs into a single slot? I can't quite seem to find anything referencing this when digging through the source code myself",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/525/comments",
    "author": "GiovanniWancelotti",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2025-02-14T00:58:02Z",
        "body": "It does not, no.  Existing inputs are disconnected when attempting to connect a second input."
      }
    ]
  },
  {
    "number": 442,
    "title": "Use consistent low_quality threshold in LGraphCanvas",
    "created_at": "2025-02-03T19:30:25Z",
    "closed_at": "2025-02-03T20:04:04Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/442",
    "body": null,
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/442/comments",
    "author": "huchenlei",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2025-02-03T19:38:23Z",
        "body": "This was configured this way intentionally - we should verify the impact before merging this."
      },
      {
        "user": "huchenlei",
        "created_at": "2025-02-03T19:41:48Z",
        "body": "> This was configured this way intentionally - we should verify the impact before merging this.\r\n\r\nCan you explain why the low quality threshold is set intentionally to be different here? A comment would be appreciated."
      },
      {
        "user": "huchenlei",
        "created_at": "2025-02-03T20:02:59Z",
        "body": "Offline discussion from @webfiltered:\r\n> Legacy issue - I found some discrepancies when I was working on it and tried changing it, but this was months ago, and I don't recall off the top of my head.\r\n> I was working on perf. at the time - fixing it had a negative impact.\r\n\r\n\r\n"
      },
      {
        "user": "huchenlei",
        "created_at": "2025-02-03T20:03:14Z",
        "body": "Made the threshold configurable."
      }
    ]
  },
  {
    "number": 440,
    "title": "Remove LGraphCanvas.render_title_colored",
    "created_at": "2025-02-03T19:11:09Z",
    "closed_at": "2025-02-03T19:12:04Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/440",
    "body": "`LGraphCanvas.render_title_colored` is always true according to code search. The value is not read anywhere as well. Removing the unnecessary flag.",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/440/comments",
    "author": "huchenlei",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2025-02-03T19:35:40Z",
        "body": "@huchenlei This also removes `node.constructor.title_color` check - intentional?"
      }
    ]
  },
  {
    "number": 401,
    "title": "Stricter return value check on LGraphCanvas.getExtraMenuOptions",
    "created_at": "2024-12-27T17:35:10Z",
    "closed_at": "2024-12-27T18:51:31Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/401",
    "body": "In javascript `!![]` evals to `true`, so the old check would always pass if the callback obeys the type signature, which can cause an extra `null` item being added (separator). This PR fixes the issue which makes empty array return value generate a separator.\r\n\r\n```typescript\r\ngetExtraMenuOptions?(\r\n  this: LGraphNode,\r\n  canvas: LGraphCanvas,\r\n  options: IContextMenuValue[],\r\n): IContextMenuValue[]\r\n```",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/401/comments",
    "author": "huchenlei",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2024-12-27T18:02:43Z",
        "body": "Comment for history only: return type was implemented without consideration for explicit `| undefined` req. for optional return - missed due to strict mode disabled."
      }
    ]
  },
  {
    "number": 308,
    "title": "Add CanvasPointer API",
    "created_at": "2024-11-15T13:56:48Z",
    "closed_at": "2024-11-16T22:35:30Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/308",
    "body": "### Default behaviour changes\r\n\r\nThis is a fundamental change to the way Litegraph handles pointer interaction.  Each pointer event is now tracked and managed by a `CanvasPointer`, created by the canvas as `LGraphCanvas.pointer`.\r\n\r\n- Dragging multiple items no longer requires that the shift key be held down\r\n  - Clicking an item when multiple nodes / etc are selected will still deselect everything else\r\n- Clicking a connected link on an input no longer disconnects and reconnects it\r\n- Double-clicking requires that both clicks occur nearby\r\n- Makes adding an option (later) to customise what modifier keys do actually feasible\r\n\r\n#### Bug fixes\r\n- Intermittent issue where clicking a node slightly displaces it\r\n- Alt-clicking to add a reroute creates two undo steps\r\n\r\nFor users, a lot of the change will be subtle, but it should \"feel\" more like a stable, native app.  It should also result in fewer unexpected changes in the future.\r\n\r\nFor devs, the process to add / change click & drag actions has been **drastically** simplified.\r\n\r\n#### Selecting multiple items\r\n\r\n- `Ctrl + drag` - Begin multi-select\r\n- `Ctrl + Shift + drag` - Add to selection\r\n  - `Ctrl + drag`, `Shift` - Alternate add to selection\r\n- `Ctrl + drag`, `Alt` - Remove from selection\r\n\r\n#### Click \"drift\"\r\n\r\nA small amount of buffering is performed between down/up events to prevent accidental micro-drag events.  If either of the two controls are exceeded, the event will be considered a drag event, not a click.\r\n- `buffterTime` is the maximum time that tiny movements can be ignored (Default: 150ms)\r\n- `maxClickDrift` controls how far a click can drift from its down event before it is considered a drag (Default: 6)\r\n\r\n#### Double-click\r\n\r\nWhen double clicking, the double click callback is executed shortly after one normal click callback (if present).  At present, dragging from the second click simply invalidates the event - nothing will happen.\r\n- `doubleClickTime` is the maximum time between two `down` events for them to be considered a double click (Default: 300ms)\r\n- Distance between the two events must be less than `3 * maxClickDrift`\r\n\r\n#### Configuration\r\nAll above configuration is via class static.  Could be converted to instance-based.\r\n\r\n### Implementing\r\n\r\nClicking, double-clicking, and dragging can now all be configured during the initial `pointerdown` event, and the correct callback(s) will be executed.\r\n\r\nA click event can be as simple as:\r\n```ts\r\nif (node.isClickedInSpot(e.canvasX, e.canvasY)) this.pointer.onClick = () => node.gotClickInSpot()\r\n```\r\n\r\nFull usage can be seen in the old `processMouseDown` handler, which is still in place (several monkey patches in the wild).\r\n\r\n\r\n#### Registering a click or drag event\r\n\r\nExample usage:\r\n```typescript\r\nconst { pointer } = this\r\n// Click / double click - executed on pointerup\r\npointer.onClick = (e) => node.executeClick(e)\r\npointer.onDoubleClick = node.gotDoubleClick\r\n\r\n// Drag events - executed on pointermove\r\npointer.onDragStart = (e) => {\r\n  node.isBeingDragged = true\r\n  canvas.startedDragging(e)\r\n}\r\npointer.onDrag = () => {}\r\n// finally() is preferred where possible, as it is guaranteed to run\r\npointer.onDragEnd = () => {}\r\n\r\n// Always run, regardless of outcome\r\npointer.finally = () => node.isBeingDragged = false\r\n```\r\n\r\n### Hovering over\r\nAdds API for downstream consumers to handle custom cursors.  A bitwise enum of items,\r\n```typescript\r\ntype LGraphCanvasState = {\r\n  /** If `true`, pointer move events will set the canvas cursor style. */\r\n  shouldSetCursor: boolean,\r\n  /** Bit flags indicating what is currently below the pointer. */\r\n  hoveringOver: CanvasItem,\r\n  ...\r\n}\r\n\r\n// Disable litegraph cursors\r\ncanvas.state.shouldSetCursor = false\r\n\r\n// Checking state - bit operators\r\nif (canvas.state.hoveringOver & CanvasItem.ResizeSe) element.style.cursor = 'se-resize'\r\n```\r\n\r\n### Removed public interfaces\r\nAll are unused and incomplete.  Have bugs beyond just typescript typing, and are (currently) not worth maintaining.  If any of these features are desired down the track, they can be reimplemented.\r\n- Live mode\r\n- Subgraph\r\n- `dragged_node`",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/308/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-11-16T22:34:24Z",
        "body": "Do note that `dragged_node` is being referenced in the snapToGrid code in the frontend, we need to get rid of that on merging the corresponding frontend PR."
      }
    ]
  },
  {
    "number": 279,
    "title": "Graph serialisation update - Links & Reroutes",
    "created_at": "2024-11-05T11:02:11Z",
    "closed_at": "2024-11-07T23:33:54Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/279",
    "body": "### Module\r\n- Adds module exports: `SerialisableGraph`, `SerialisableLLink`\r\n\r\n### Schema\r\n- Adds new schema version - identified as `1`\r\n- Adds `LGraph.asSerialisable` as preferred prep-for serialisation method\r\n- Deprecates `LGraph.serialize`\r\n\r\n### LLink / Reroute\r\n- Has all the elements required to add reroutes\r\n- Serialises `LLink` as object instead of array\r\n- Ensures stale links are not kept when clearing graph\r\n- Moves `last_link_id` & `last_node_id` to settings plain object `LGraph.state`",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/279/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-11-07T23:33:36Z",
        "body": "## Note\r\n- `LGraph.serialize()`'s behaviour is not changed, which still serialize with version 0.4\r\n- `LGraph.asSerializable()` returns the new schema with version 1\r\n- This PR should not affect current ComfyUI logic\r\n\r\n## Note2\r\nAt some point we should add a ComfyUI metadata version on the workflow in combination with the litegraph graph schema version.\r\n"
      }
    ]
  },
  {
    "number": 273,
    "title": "Serialize to node pos/size to plain array",
    "created_at": "2024-11-04T14:37:49Z",
    "closed_at": "2024-11-04T19:08:09Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/273",
    "body": "Serialize node pos/size to plain js array to avoid change detection issue in the frontend. `Float32Array` behaves differently on `_.isEqual`.",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/273/comments",
    "author": "huchenlei",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-11-04T17:56:49Z",
        "body": "@webfiltered PTAL"
      },
      {
        "user": "webfiltered",
        "created_at": "2024-11-04T18:54:55Z",
        "body": "JS and typed arrays.  =\\\r\n\r\nWhoops thought this was a request.\r\n\r\nIt's good - I will do the same elsewhere.  I was planning to check the output when finishing up `Serialisable` - and add `structuredClone` somewhere in the pipeline."
      }
    ]
  },
  {
    "number": 247,
    "title": "Remove hard-coded modifications to nodes",
    "created_at": "2024-10-31T19:36:58Z",
    "closed_at": "2024-11-05T23:35:59Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/247",
    "body": "- Removes the arbitrary 5 graph unit margin in the node hitbox for pointer events and other tests\r\n- Removes arbitrary +1 graph unit width to nodes (have not been able to find a reason for this - likely historic)\r\n\r\nThese can still be added, but the choice is now up to the consumer instead of being hard-coded into the lib.",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/247/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-11-03T16:13:58Z",
        "body": "This probably requires we re-generate all expectation screenshots, as everything will be off by 1 px..."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-11-03T16:19:15Z",
        "body": "It does.  The test fail spam is pretty epic!\r\n\r\nI was wondering if I should just ignore it because it's a nuisance to fix.  But it doesn't feel right to have a consumer say \"be 100 wide\", have the library say it's 100, but.. just sneakily render it as 101."
      }
    ]
  },
  {
    "number": 202,
    "title": "Typescript LGraphCanvas",
    "created_at": "2024-10-09T18:00:44Z",
    "closed_at": "2024-10-11T16:21:10Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/202",
    "body": "Not expecting many issues, but with LGraphCanvas being what it is, this PR is also massive.\r\n\r\n- Most changes are TS types and readability / maintainability-related\r\n- Important commits:\r\n1. a97a97678a41a04ca7bd15489114fa29be60a21b: Refactor - Clean up / reformat\r\n2. 827aba5d2ddd98138d150c8614b66606f62a2137: Redirect draw.ts enums to global file (temp.)\r\n3. 6cf1919a8c5177a9140f90520d9ac96ce295049d: Add measure.ts - move util funcs from Global\r\n4. 25a295bfd4a859c011a71805c1b0dc14855d1294: Refactor - TS narrowing\r\n5. 20948f28cce33fd3491dea7d9d819789aa61a64e: Fix minor TS type coercion issues\r\n- Other commits should not have any functional impact once transpiled",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/202/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-10-11T01:01:36Z",
        "body": "Hmmm, seems like the batch move output link feature is broken?"
      },
      {
        "user": "webfiltered",
        "created_at": "2024-10-11T11:25:59Z",
        "body": "> Hmmm, seems like the batch move output link feature is broken?\r\n\r\nWhoops - forgot to push the commit."
      }
    ]
  },
  {
    "number": 175,
    "title": "Split LGraph out to TS file",
    "created_at": "2024-09-27T00:40:02Z",
    "closed_at": "2024-09-27T00:45:43Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/175",
    "body": "Rebased #164",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/175/comments",
    "author": "huchenlei",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2024-09-27T00:50:45Z",
        "body": "Sorry might have misunderstood last message - I'll rebase the others.\r\n\r\nEdit: Disregard - and thanks!"
      }
    ]
  },
  {
    "number": 163,
    "title": "TypeScript conversion groundwork",
    "created_at": "2024-09-25T07:41:26Z",
    "closed_at": "2024-09-26T23:20:30Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/163",
    "body": "Adds groundwork to split LiteGraph classes out into TS modules.\r\n- Exports classes\r\n- Removes IIFE wrapper\r\n\r\nBlocked until #161, #162",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/163/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-09-26T07:39:15Z",
        "body": "@webfiltered Invited you as collaborator so you can directly create branch in the repo. Let me know if you want me to resolve the merge conflict for you."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-09-26T09:11:24Z",
        "body": "Danke!  Merge commit added.\r\n\r\nI'll use a new branch for subsequent TS changes, but let me know if you want something done with the current .. chain of PRs."
      }
    ]
  },
  {
    "number": 153,
    "title": "Allow shift+click on input to create new link from origin node",
    "created_at": "2024-09-21T00:29:00Z",
    "closed_at": "2024-09-24T03:11:28Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/153",
    "body": "Supports shift+click on the input slot to create a new link from the origin node",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/153/comments",
    "author": "pythongosssss",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2024-09-21T03:44:49Z",
        "body": "Hey, would it be alright if this were bound to another modifier (alt-shift?), or toggleable with an option?  It's a change in current default behaviour is all - shift+click on input picks up the existing link and allows you to move it elsewhere."
      },
      {
        "user": "huchenlei",
        "created_at": "2024-09-24T03:11:12Z",
        "body": "This PR change only affects the input slot interaction. The shift behavior on output slot is not affected."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-09-24T10:41:13Z",
        "body": "> This PR change only affects the input slot interaction. The shift behavior on output slot is not affected.\r\n\r\nAh yes - I have just been holding shift when moving inputs as well.  As it is _required_ to move outputs, after a while it just felt natural to always hold shift when I wanted to move a connection."
      }
    ]
  },
  {
    "number": 62,
    "title": "ES2015 / ES6 class conversion",
    "created_at": "2024-08-07T15:37:58Z",
    "closed_at": "2024-10-07T15:38:28Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/62",
    "body": "Extremely drafty - could blow out candles without warning.  Should be 100% faithful to original intent, but at least some consumers are using foundational rewrites that may break with these changes.\r\n\r\nEdits welcome.",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/62/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-08-07T16:54:56Z",
        "body": "I would recommend doing this step by step. A large PR that fixes everything is not likely get merged."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-08-07T23:43:28Z",
        "body": "I'll leave it here in draft.  Hopefully it is useful to someone to pick up and run with.  If that's counterproductive, please feel free to close it."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-10-05T14:08:04Z",
        "body": "@huchenlei Happy to close this one?  Pretty sure it's all done."
      }
    ]
  },
  {
    "number": 44,
    "title": "Fix #42 - incorrect lines merged by hand",
    "created_at": "2024-08-02T07:11:32Z",
    "closed_at": "2024-10-07T15:38:43Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/44",
    "body": "#42 removed two lines from `processMouseUp` - these were redundant, and can stay removed.\r\n\r\nIt should have been the identical lines from `processMouseMove` - removed by this PR",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/44/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "huchenlei",
        "created_at": "2024-08-02T11:09:53Z",
        "body": "I'm confused. The real change in #42 is the deletion of these 2 lines. So you are essentially reverting #42?"
      },
      {
        "user": "webfiltered",
        "created_at": "2024-08-02T14:08:02Z",
        "body": "Essentially reverting #42, but _also_ deleting correct lines."
      },
      {
        "user": "huchenlei",
        "created_at": "2024-08-02T14:49:13Z",
        "body": "> Essentially reverting #42, but _also_ deleting correct lines.\r\n\r\nCan you explain why it is reverted? Is there an edge case that we should test guard against?"
      },
      {
        "user": "webfiltered",
        "created_at": "2024-08-03T00:12:07Z",
        "body": "I was just reverting it because I made a mistake when doing the PR - I haven't tested it.  If it's already being tested by people and nothing is broken?  I'll remove the revert from this PR!  Sorry for the confusion."
      },
      {
        "user": "webfiltered",
        "created_at": "2024-08-06T02:26:56Z",
        "body": "Confirmed that the change I wanted to revert is redundant anyway.  Updated with new commit."
      }
    ]
  },
  {
    "number": 42,
    "title": "Remove extremely inefficient test code",
    "created_at": "2024-07-31T13:22:55Z",
    "closed_at": "2024-07-31T14:06:33Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/42",
    "body": "With this change, when moving the mouse in circles on empty ComfyUI background, CPU use and calls to drawNode are _significantly_ reduced.\r\n\r\nProcess use went from ~15-20% down to 7% max.  I have been unable to find a single difference in functionality.",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/42/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "webfiltered",
        "created_at": "2024-07-31T13:28:20Z",
        "body": "FYI pre-commit, my tests were showing more than 1000 calls pers second to `LGraphCanvas.drawNode`.\r\n\r\nI think `set_canvas_dirty_on_mouse_event` should remain `true` for now.  Eventually it should be be turned off - but it has been on for a while I think, and code might have gone in that does not set dirty_canvas when it should (because it was automatically happening).\r\n\r\nThat would be a fraction of an improvement over this commit, though, and for way more effort.  For now, I don't plan on looking into it."
      },
      {
        "user": "huchenlei",
        "created_at": "2024-07-31T14:01:13Z",
        "body": "I think this can go into ComfyUI repo instead. Nvm, the logic actually need to be here."
      }
    ]
  },
  {
    "number": 31,
    "title": "Add node disconnect shortcuts",
    "created_at": "2024-07-24T05:02:21Z",
    "closed_at": "2024-07-29T01:14:46Z",
    "labels": [],
    "url": "https://github.com/Comfy-Org/litegraph.js/pull/31",
    "body": "Adds disconnect feature and very minor bug fixes (in separate commits):\r\n\r\n### Disconnect links feature\r\n- Ctrl + Alt + Click: Disconnect all links from an input or output\r\n- Ctrl + Alt + Click & Drag: Disconnect all links & link to a new node with a single click\r\n- Added LiteGraph setting, on by default\r\n\r\n#### 6036: skip_action = true\r\n\r\nNot sure why skip_action was set to true, here. It prevents disconnect and drag to a new output on the same click, so I've included it in the main commit. Ideally, this should be controlled by a consumer hook, e.g. create \"onDisconnectInput\".",
    "comments_url": "https://api.github.com/repos/Comfy-Org/litegraph.js/issues/31/comments",
    "author": "webfiltered",
    "comments": [
      {
        "user": "christian-byrne",
        "created_at": "2024-08-06T22:44:50Z",
        "body": "> Ctrl + Alt + Click & Drag: Disconnect all links & link to a new node with a single click\r\n\r\nWas this removed in Comfy-Org/litegraph.js#39? Seems it might have been replaced by Shift+Click+Drag?"
      },
      {
        "user": "webfiltered",
        "created_at": "2024-08-06T23:57:16Z",
        "body": "Hey, so they sort of work in the opposite directions.  Shift + drag is designed to pick up and move all existing links.  So you pick up e.g. 3 links from an output and move them to another output.\r\n\r\nCtrl + alt + click immediately disconnects all links from the slot you click.  So same example - you'd disconnect all 3 links on click.  But optionally, you can also start dragging a new link to an input - as you would with a normal click & drag."
      },
      {
        "user": "christian-byrne",
        "created_at": "2024-08-07T00:01:55Z",
        "body": "> Hey, so they sort of work in the opposite directions. Shift + drag is designed to pick up and move all existing links. So you pick up e.g. 3 links from an output and move them to another output.\r\n> \r\n> Ctrl + alt + click immediately disconnects all links from the slot you click. So same example - you'd disconnect all 3 links on click. But optionally, you can also start dragging a new link to an input - as you would with a normal click & drag.\r\n\r\nI understand the nuance now, thank you for the explanation. \r\n\r\nThis is a great feature. I just wrote a test for it at Comfy-Org/ComfyUI_frontend#323."
      }
    ]
  }
]