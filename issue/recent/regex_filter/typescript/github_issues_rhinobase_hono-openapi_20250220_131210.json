[
  {
    "number": 64,
    "title": "fix(core): allow to use validator repeatedly - merge parameters",
    "created_at": "2025-02-16T21:56:37Z",
    "closed_at": "2025-02-20T07:16:25Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/pull/64",
    "body": "Resolves #63",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/64/comments",
    "author": "jirutka",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2025-02-20T07:16:21Z",
        "body": "This is great! Thank you!"
      }
    ]
  },
  {
    "number": 59,
    "title": "Fix typo in readme",
    "created_at": "2025-02-08T13:55:18Z",
    "closed_at": "2025-02-08T13:58:41Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/pull/59",
    "body": "made the mistake when copying and pasting",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/59/comments",
    "author": "Andrew-Chen-Wang",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2025-02-08T13:58:37Z",
        "body": "Thanks"
      }
    ]
  },
  {
    "number": 48,
    "title": "feat(core): Add the cause of validation error to HTTPException",
    "created_at": "2025-01-17T18:51:38Z",
    "closed_at": "2025-01-18T04:17:14Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/pull/48",
    "body": "Heya!\r\n\r\nI noticed that while adding the `validateResponse` -flag to the `describeRoute` does in fact validate the response, it does not report in any way, what the errors were. This makes debugging faulty response schemas extremely difficult.\r\n\r\nWe have the error in scope, so this PR adds them to the response's cause, which is just empty otherwise.\r\n\r\nThen the user could opt in on how they want to manage the cause, e.g:\r\n\r\n```typescript\r\napp.onError((err, c) => {\r\n    if (err instanceof HTTPException) {\r\n        if (err.status === 400) {\r\n            return new Response(err.cause, {\r\n                status: 400,\r\n                headers: err.res?.headers,\r\n            });\r\n        }\r\n\r\n        return err.getResponse();\r\n    }\r\n});\r\n```\r\n\r\n```json\r\n[\r\n  {\r\n    \"code\": \"invalid_type\",\r\n    \"expected\": \"date\",\r\n    \"received\": \"string\",\r\n    \"path\": [\r\n      \"pastEvents\",\r\n      0,\r\n      \"startTime\"\r\n    ],\r\n    \"message\": \"Expected date, received string\"\r\n  },\r\n  {\r\n    \"code\": \"invalid_type\",\r\n    \"expected\": \"date\",\r\n    \"received\": \"string\",\r\n    \"path\": [\r\n      \"pastEvents\",\r\n      0,\r\n      \"endTime\"\r\n    ],\r\n    \"message\": \"Expected date, received string\"\r\n  }\r\n]\r\n```",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/48/comments",
    "author": "Matsuuu",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2025-01-18T04:16:58Z",
        "body": "LGTM!"
      }
    ]
  },
  {
    "number": 44,
    "title": "fix: rollup config",
    "created_at": "2025-01-13T12:49:10Z",
    "closed_at": "2025-01-14T20:25:43Z",
    "labels": [
      "v0.4"
    ],
    "url": "https://github.com/rhinobase/hono-openapi/pull/44",
    "body": "- [x] Replaced with a new rollup config",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/44/comments",
    "author": "MathurAditya724",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2025-01-13T20:28:14Z",
        "body": "> I think it might be much easier to get it over the finish line with tsup instead of rollup.\r\n\r\nLet me try the recommended changes by both of you. If they don't work, we can just migrate to tsup.\r\n\r\nI initially used tsup today, but there were some errors in type generation (I don't remember correctly now). We can look into it if they come again."
      },
      {
        "user": "marcomuser",
        "created_at": "2025-01-13T20:47:43Z",
        "body": " > Let me try the recommended changes by both of you. If they don't work, we can just migrate to tsup.\r\n> \r\n> I initially used tsup today, but there were some errors in type generation (I don't remember correctly now). We can look into it if they come again.\r\n\r\nMy draft PR includes the recommended changes by @kanadgupta as well except the first one which I don't think will work with the current setup. Unless you want to change the build setup in rollup again to not copy the package.json into the dist folder.\r\n\r\n"
      },
      {
        "user": "MathurAditya724",
        "created_at": "2025-01-13T20:49:38Z",
        "body": "Great, so let's merge it over here then"
      }
    ]
  },
  {
    "number": 22,
    "title": "\"validateResponse: true\" returns unexpected 400",
    "created_at": "2024-12-18T03:32:09Z",
    "closed_at": "2024-12-18T09:51:46Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/issues/22",
    "body": "```\r\nimport { Hono } from \"hono\";\r\nimport { describeRoute } from \"hono-openapi\";\r\nimport z from \"zod\";\r\nimport { resolver } from \"hono-openapi/zod\";\r\n\r\n// For extending the Zod schema with OpenAPI properties\r\nimport \"zod-openapi/extend\";\r\n\r\nconst ProjectSchema = z.object({\r\n  id: z.string(),\r\n}).openapi({ ref: \"Project\" });\r\n\r\nexport const projectsRoutes = new Hono().get(\r\n  \"/:id\",\r\n  describeRoute({\r\n    validateResponse: true,\r\n    description: \"Get a project by id\",\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Project found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: resolver(ProjectSchema),\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }),\r\n  (c) => {\r\n    const { id } = c.req.param();\r\n    return c.json({ id });\r\n  },\r\n);\r\n\r\nexport type ProjectsRoutes = typeof projectsRoutes;\r\n```\r\n\r\nTest code:\r\n```\r\nimport { expect } from \"@std/expect\";\r\nimport { testingRPC } from \"../../../testing/testingRPC.ts\";\r\nimport { projectsRoutes } from \"./routes.ts\";\r\nimport { testClient } from 'hono/testing'\r\n\r\nDeno.test(\"Projects Routes\", async (t) => {\r\n  const client = testClient<typeof projectRoutes>(projectsRoutes);\r\n\r\n  await t.step(\"GET /:id\", async (t) => {\r\n    await t.step(\"returns a project when given a valid ID\", async () => {\r\n      const id = \"123\";\r\n      const res = await client[\":id\"].$get({\r\n        param: {\r\n          id,\r\n        },\r\n      });\r\n\r\n      const data = await res.json();\r\n      expect(res.status).toEqual(200);\r\n      expect(data).toEqual({ id });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nRunning `deno test --allow-all --no-check`, the response is:\r\n```\r\n{\r\n  res: Response {\r\n    body: ReadableStream { locked: false },\r\n    bodyUsed: false,\r\n    headers: Headers { \"content-type\": \"text/plain;charset=UTF-8\" },\r\n    ok: false,\r\n    redirected: false,\r\n    status: 400,\r\n    statusText: \"\",\r\n    url: \"\"\r\n  }\r\n}\r\n```\r\n\r\nAs a side question: are there any plans to add TypeScript enforcement on `c.json` / `c.text` responses to ensure the correct payload is being specified?",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/22/comments",
    "author": "derekdowling",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2024-12-18T09:37:05Z",
        "body": "> As a side question: are there any plans to add TypeScript enforcement on `c.json` / `c.text` responses to ensure the correct payload is being specified?\r\n\r\nI'm not sure how we can do that in `hono`; if you have any ideas, let me know."
      },
      {
        "user": "mordechaim",
        "created_at": "2025-01-16T22:43:28Z",
        "body": "This error is still present. Reading the stream in the validation causes the ReadableStream to lock. We need to instead `c.res.clone()` the response first.\n\n```shell\n тип [Error: failed to pipe response] {\n  [cause]: [TypeError: Invalid state: The ReadableStream is locked] {\n    code: 'ERR_INVALID_STATE'\n  }\n}\n```"
      },
      {
        "user": "MathurAditya724",
        "created_at": "2025-01-17T00:47:09Z",
        "body": "Can you create a new issue for this?"
      }
    ]
  },
  {
    "number": 17,
    "title": "Using path param validation creates duplicates in the openapi json",
    "created_at": "2024-12-11T19:23:49Z",
    "closed_at": "2024-12-14T04:02:40Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/issues/17",
    "body": "When I create an endpoint that validates path params\r\n\r\n```nodejs\r\nimport { validator } from \"hono-openapi/zod\";\r\n\r\nconst todos = new Hono();\r\n\r\ntodos.get(\r\n  \"/:id\",\r\n  describeRoute({\r\n    description: \"Get a single todo\",\r\n  }),\r\n  validator(\"param\", z.object({ id: z.string().uuid() })),\r\n  async (c) => {\r\n    const id = c.req.valid(\"param\").id;\r\n  }\r\n)\r\n```\r\n\r\nThen the openapi JSON generated includes 2 objects for `id`. One in path and the other in param.\r\n```\r\n...\r\n\"parameters\": [\r\n          {\r\n            \"schema\": {\r\n              \"type\": \"string\"\r\n            },\r\n            \"in\": \"path\",\r\n            \"name\": \"id\",\r\n            \"required\": true\r\n          },\r\n          {\r\n            \"in\": \"param\",\r\n            \"name\": \"id\",\r\n            \"schema\": {\r\n              \"type\": \"string\",\r\n              \"format\": \"uuid\"\r\n            },\r\n            \"required\": true\r\n          }\r\n        ]\r\n...\r\n```\r\n\r\nWhich then breaks the scalar UI and I am unable to try any requests due to this error\r\n```\r\n{\r\n  \"_errors\": [],\r\n  \"parameters\": {\r\n    \"1\": {\r\n      \"_errors\": [],\r\n      \"in\": {\r\n        \"_errors\": [\r\n          \"Invalid enum value. Expected 'path' | 'query' | 'header' | 'cookie', received 'param'\"\r\n        ]\r\n      }\r\n    },\r\n    \"_errors\": []\r\n  }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/17/comments",
    "author": "iuwqyir",
    "comments": [
      {
        "user": "adamdottv",
        "created_at": "2024-12-11T21:40:31Z",
        "body": "Also just ran into this. Were you planning to contribute?"
      },
      {
        "user": "iuwqyir",
        "created_at": "2024-12-11T23:53:03Z",
        "body": "> Also just ran into this. Were you planning to contribute?\r\n\r\nI don't know when I would get to this"
      },
      {
        "user": "adamdottv",
        "created_at": "2024-12-11T23:58:38Z",
        "body": "> > Also just ran into this. Were you planning to contribute?\n> \n> \n> \n> I don't know when I would get to this\n\nCool, I might take a stab at it"
      },
      {
        "user": "MathurAditya724",
        "created_at": "2024-12-12T12:40:15Z",
        "body": "Interesting, so the expected output should only include the path entry for id, without the additional param entry, correct?"
      },
      {
        "user": "adamdottv",
        "created_at": "2024-12-13T02:36:27Z",
        "body": "> Interesting, so the expected output should only include the path entry for id, without the additional param entry, correct?\r\n\r\nOnly question I would have is whether we can manipulate the metadata (description, example, etc.) for the path definitions? I know I can with parameter, but obviously we can't duplicate the path and parameter for the same field."
      },
      {
        "user": "MathurAditya724",
        "created_at": "2024-12-13T03:19:39Z",
        "body": "You can add metadata properties in Zod by extending it and using `.openapi` described in the `README.md`. For this issue, I am thinking of replacing the _path_ definitions with _params_ (if they exist and _name_ is the same) so that we can have the metadata for the defined props as well as keep the ones without it."
      }
    ]
  },
  {
    "number": 14,
    "title": "README is incorrect for `validateResponse`",
    "created_at": "2024-12-02T18:05:04Z",
    "closed_at": "2024-12-03T02:26:14Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/issues/14",
    "body": "In the README, the code snippet to explain the `validateResponse` function is a copy of the previous code snippet of Advanced Usage. This was probably not intended.",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/14/comments",
    "author": "cybercoder-naj",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2024-12-03T02:26:14Z",
        "body": "Thanks for pointing it out. I have updated the readme."
      }
    ]
  },
  {
    "number": 11,
    "title": "Cannot find module 'hono-openapi/zod' or its corresponding type declarations.",
    "created_at": "2024-11-29T03:17:29Z",
    "closed_at": "2024-12-02T11:30:18Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/issues/11",
    "body": "```\r\n    \"hono\": \"^4.6.11\",\r\n    \"hono-openapi\": \"^0.1.5\",\r\n    \"zod\": \"^3.23.8\"\r\n```\r\n\r\nEnv\r\n- Node v20\r\n\r\ntsconfig.json\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES6\",\r\n    \"module\": \"commonjs\",\r\n    \"moduleResolution\": \"node\",\r\n    \"outDir\": \"./dist\",\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n    \"strict\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noEmitOnError\": true\r\n  },\r\n  \"include\": [\r\n    \"src/**/*.ts\"\r\n  ],\r\n  \"exclude\": [\"node_modules\"]\r\n}\r\n```\r\n\r\nI can not `import { resolver, validator } from 'hono-openapi/zod';`. Please advise,",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/11/comments",
    "author": "sonduong",
    "comments": [
      {
        "user": "marcomuser",
        "created_at": "2024-11-29T12:28:58Z",
        "body": "The problem is twofold:\n1. You configured tsconfig in a way so that it won't pick up the exports from hono-openapi's package.json. You probably want to set module: nodenext instead and set the type of your package to commonjs in your package.json. That way ts and node.js will both respect the exports in all your dependencies and resolve the correct type for your commonjs project.\n2. There is an issue in hono-openapi's exports in its package.json. The exports currently only point to the correct types for commonjs. This is the same issue as in issue #2. Having said that, in your case since you are using commonjs it should actually work if you follow the advice from the first point."
      }
    ]
  },
  {
    "number": 8,
    "title": "parameters not marked as required",
    "created_at": "2024-11-22T18:04:33Z",
    "closed_at": "2024-12-03T02:16:51Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/rhinobase/hono-openapi/issues/8",
    "body": "Given a route with a validator:\r\n\r\n```ts\r\nvalidator(\r\n  'query',\r\n  z.object({\r\n    a: z.number({ coerce: true }),\r\n    b: z.number({ coerce: true }).optional(),\r\n  }),\r\n)\r\n```\r\n\r\nthe spec will produce:\r\n\r\n```json\r\n\"parameters\": [\r\n  {\r\n    \"in\": \"query\",\r\n    \"name\": \"a\",\r\n    \"schema\": {\r\n      \"type\": \"number\"\r\n    }\r\n  },\r\n  {\r\n    \"in\": \"query\",\r\n    \"name\": \"b\",\r\n    \"schema\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nThe expected output is:\r\n```diff\r\n \"parameters\": [\r\n   {\r\n     \"in\": \"query\",\r\n     \"name\": \"a\",\r\n+    \"required\": true,\r\n     \"schema\": {\r\n       \"type\": \"number\"\r\n     }\r\n   },\r\n   {\r\n     \"in\": \"query\",\r\n     \"name\": \"b\",\r\n     \"schema\": {\r\n       \"type\": \"number\"\r\n     }\r\n   }\r\n ]\r\n```\r\n\r\nThis looks like a simple fix because the resolved schema from `zod-openapi` correctly includes `required: [\"a\"]`, so we just need to check that when constructing the parameter spec.",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/8/comments",
    "author": "ngraef",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2024-11-30T12:54:36Z",
        "body": "Sure, I will take a look"
      },
      {
        "user": "MathurAditya724",
        "created_at": "2024-12-03T02:16:51Z",
        "body": "The new version `hono-openapi@0.2.1` solves this issue, kindly give it a try and let me know if this issue persists"
      }
    ]
  },
  {
    "number": 6,
    "title": "openAPISpecs Does Not Accept app When Env Type is Passed",
    "created_at": "2024-11-12T18:16:30Z",
    "closed_at": "2024-12-02T11:30:17Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/issues/6",
    "body": "Hi @MathurAditya724 When using hono-openapi with a Hono app typed with Env, the openAPISpecs function does not accept app as an argument, resulting in an error or unexpected behavior. The Env type includes specific bindings, which may be causing this issue.\r\n\r\n```typescript\r\ntype Env = {\r\n  Bindings: {\r\n    MY_VAR: string;\r\n  };\r\n};\r\n\r\nconst app = new Hono<Env>;\r\n\r\napp.get(\r\n  \"/openapi\",\r\n  openAPISpecs(app, {\r\n    documentation: {\r\n      info: {\r\n        title: \"Hono\",\r\n        version: \"1.0.0\",\r\n        description: \"API for greeting users\",\r\n      }\r\n    },\r\n  })\r\n);\r\n```\r\n\r\nError: `Argument of type 'Hono<Env, BlankSchema, \"/\">' is not assignable to parameter of type 'Hono<BlankEnv, BlankSchema, \"/\">'`",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/6/comments",
    "author": "luisbytes",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2024-11-12T19:16:47Z",
        "body": "Hey ЁЯСЛЁЯП╝, thanks for pointing it out. This will be resolved in the next version release."
      }
    ]
  },
  {
    "number": 4,
    "title": "Dependencies: Update to zod-openapi 4.0.0",
    "created_at": "2024-11-10T17:15:06Z",
    "closed_at": "2024-11-11T08:42:11Z",
    "labels": [],
    "url": "https://github.com/rhinobase/hono-openapi/pull/4",
    "body": "The current version of hono-openapi depends on zod-openapi < 4.0.0. However, issue #3 resulted in a version bump of zod-openapi which fixes flattening of intersected zod schemas. Therefore, bump this package to use v4.0.0.\r\n\r\nTested with a simple server and nothing seems to be broken. Please take a look when possible @MathurAditya724 ",
    "comments_url": "https://api.github.com/repos/rhinobase/hono-openapi/issues/4/comments",
    "author": "kingbri1",
    "comments": [
      {
        "user": "MathurAditya724",
        "created_at": "2024-11-11T08:42:13Z",
        "body": "LGTM! Thank You!"
      }
    ]
  }
]