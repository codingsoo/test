[
  {
    "number": 108,
    "title": "Documentation Update: Implementation Plan and Current Status",
    "created_at": "2024-12-28T17:00:55Z",
    "closed_at": "2025-01-02T14:32:53Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/typescript-sdk/issues/108",
    "body": "Several documentation files need updates to reflect current implementation standards:\n\n1. Implementation Plan requires updates:\n- Remove outdated package references\n- Update project structure to match current SDK\n- Add current plugin architecture details\n\n2. Current Status document needs revision:\n- Remove old adapter patterns\n- Update tool registration process\n- Add new debugging capabilities\n- Include Inspector integration details\n\n3. Add new sections:\n- Development environment setup\n- Testing procedures\n- Security configuration\n- Claude Desktop integration steps\n\nRelated to latest MCP SDK changes.",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/typescript-sdk/issues/108/comments",
    "author": "RBV801",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2025-01-02T14:32:53Z",
        "body": "Please submit a PR for the changes you believe need to be made. This to-do list unfortunately doesn't help."
      }
    ]
  },
  {
    "number": 99,
    "title": "ERR_PACKAGE_PATH_NOT_EXPORTED and import resolution issues",
    "created_at": "2024-12-17T01:00:04Z",
    "closed_at": "2025-01-07T13:18:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/modelcontextprotocol/typescript-sdk/issues/99",
    "body": "The SDK's module structure makes it difficult to use in both ESM and CommonJS contexts.\n\n**Issues:**\n1. ERR_PACKAGE_PATH_NOT_EXPORTED when importing from root package\n2. TypeScript unable to resolve submodule imports (server/index.js, server/stdio.js)\n3. Package.json exports field doesn't match internal structure\n\n**Steps to reproduce:**\n```typescript\n// None of these work:\nimport { Server } from '@modelcontextprotocol/sdk';\nimport { Server } from '@modelcontextprotocol/sdk/server';\nimport { Server } from '@modelcontextprotocol/sdk/dist/server/index.js';\n```\n\n**Suggested fixes:**\n1. Add proper exports field in package.json\n2. Ensure consistent module paths between package.json and build output\n3. Add type declarations for submodules\n4. Document recommended import patterns\n\nCurrent workaround is to use require() but this breaks in ESM context.",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/typescript-sdk/issues/99/comments",
    "author": "giannis88",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-12-17T16:49:14Z",
        "body": "This is the correct import syntax:\r\n```typescript\r\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\r\n```\r\n\r\nDoes that work for you?"
      },
      {
        "user": "kushalr392",
        "created_at": "2025-01-06T06:14:15Z",
        "body": "@jspahrsummers No, this specific format gives me the error of ERR_PACKAGE_PATH_NOT_EXPORTED. Running v1.1.0 and node v22.12.0\r\n\r\n"
      },
      {
        "user": "jspahrsummers",
        "created_at": "2025-01-06T16:29:50Z",
        "body": "@kushalr392 That's surprising. Can you please share a full example project that demonstrates the issue?"
      },
      {
        "user": "kushalr392",
        "created_at": "2025-01-07T10:51:30Z",
        "body": "@jspahrsummers Thanks for responding, but I resolved the issue. (it was a project where I was testing Kafka stream data with MCP). The client from where I was running the server was running an older version of Node. Updating that fixed the issue immediately."
      }
    ]
  },
  {
    "number": 71,
    "title": "AWS Bedrock support",
    "created_at": "2024-11-27T01:26:18Z",
    "closed_at": "2024-11-27T16:42:32Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/typescript-sdk/issues/71",
    "body": "Is it possible to use MCP with AWS bedrock claude instances?",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/typescript-sdk/issues/71/comments",
    "author": "tahpot",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-27T16:42:33Z",
        "body": "MCP is an open standard that can be implemented by any client or server. There's not currently a client or server on Bedrock, but there's no reason it couldn't be done."
      }
    ]
  },
  {
    "number": 70,
    "title": "Bug Report: Incorrect `exports` Configuration Prevents Import of Submodules",
    "created_at": "2024-11-26T16:49:35Z",
    "closed_at": "2024-11-27T16:47:30Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/typescript-sdk/issues/70",
    "body": "**Summary:**  \r\nThe `exports` configuration in `@modelcontextprotocol/sdk`'s `package.json` causes import issues for submodules like `@modelcontextprotocol/sdk/client`. This results in TypeScript being unable to resolve the module without additional `paths` configuration in `tsconfig.json`.\r\n\r\n---\r\n\r\n### **Steps to Reproduce:**\r\n\r\n1. Create a new project:\r\n   ```bash\r\n   mkdir temp-test\r\n   cd temp-test\r\n   npm init -y\r\n   npm install @modelcontextprotocol/sdk\r\n   ```\r\n2. Add a minimal `tsconfig.json`:\r\n   ```json\r\n   {\r\n     \"compilerOptions\": {\r\n       \"module\": \"ESNext\",\r\n       \"target\": \"ES6\",\r\n       \"moduleResolution\": \"node\",\r\n       \"strict\": true\r\n     }\r\n   }\r\n   ```\r\n3. Create a `test.ts` file:\r\n   ```typescript\r\n   import { Client } from \"@modelcontextprotocol/sdk/client\";\r\n\r\n   console.log(\"test\");\r\n   ```\r\n4. Compile the project:\r\n   ```bash\r\n   npx tsc\r\n   ```\r\n\r\n---\r\n\r\n### **Expected Behavior:**\r\nThe submodule `@modelcontextprotocol/sdk/client` should resolve correctly without requiring additional TypeScript configuration.\r\n\r\n---\r\n\r\n### **Actual Behavior:**\r\nTypeScript fails with the following error:\r\n```\r\nCannot find module '@modelcontextprotocol/sdk/client' or its corresponding type declarations.\r\n```\r\n\r\nThe issue can be worked around by adding the following to `tsconfig.json`:\r\n```json\r\n\"paths\": {\r\n  \"@modelcontextprotocol/sdk/*\": [\"node_modules/@modelcontextprotocol/sdk/dist/*\"]\r\n},\r\n\"baseUrl\": \".\",\r\n```\r\n\r\nHowever, this should not be necessary.\r\n\r\n---\r\n\r\n### **Root Cause Analysis:**\r\n\r\nThe `package.json` of `@modelcontextprotocol/sdk` includes the following `exports` configuration:\r\n```json\r\n\"exports\": {\r\n  \"./*\": \"./dist/*\"\r\n}\r\n```\r\n\r\nIt does not explicitly map `@modelcontextprotocol/sdk/client`. As a result, TypeScript cannot resolve the submodule.\r\n\r\n---\r\n\r\n### **Suggested Fix:**\r\nUpdate the `exports` field in `package.json` to include explicit mappings for submodules. For example:\r\n```json\r\n\"exports\": {\r\n  \"./*\": \"./dist/*\",\r\n  \"./client\": \"./dist/client/index.js\",\r\n  \"./client/stdio\": \"./dist/client/stdio/index.js\"\r\n}\r\n```\r\n\r\n---\r\n\r\n### **Environment:**\r\n- Node.js: v16.0.0+\r\n- TypeScript: v4.9.0+\r\n- OS: OSX\r\n",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/typescript-sdk/issues/70/comments",
    "author": "MartinSchlott",
    "comments": [
      {
        "user": "jspahrsummers",
        "created_at": "2024-11-27T16:43:53Z",
        "body": "Thanks for the report! We'd be happy to review a PR fixing this issue, if you want to submit one. üôè "
      },
      {
        "user": "MartinSchlott",
        "created_at": "2024-11-27T16:47:31Z",
        "body": "I‚Äôm closing this bug report because the issue was entirely on my side. I forgot to set \"type\": \"module\" in my package.json, which caused the ES module imports to fail. My punishment is my embarrassment.\r\n\r\nThank you for your work on this library, and I apologize for any confusion caused!"
      }
    ]
  },
  {
    "number": 27,
    "title": "Switch to npm",
    "created_at": "2024-10-28T10:28:04Z",
    "closed_at": "2024-10-28T10:29:24Z",
    "labels": [],
    "url": "https://github.com/modelcontextprotocol/typescript-sdk/pull/27",
    "body": "Yarn 1 is super old and not really maintained. Modern npm is totally fine.",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/typescript-sdk/issues/27/comments",
    "author": "jspahrsummers",
    "comments": [
      {
        "user": "dsp-ant",
        "created_at": "2024-10-28T10:32:20Z",
        "body": "We should do this also for all example servers and inspector"
      },
      {
        "user": "jspahrsummers",
        "created_at": "2024-10-28T10:38:43Z",
        "body": "Working on it!"
      }
    ]
  }
]