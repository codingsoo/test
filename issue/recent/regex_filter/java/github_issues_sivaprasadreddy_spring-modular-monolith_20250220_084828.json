[
  {
    "number": 32,
    "title": "Query about RabbitMQ implementation",
    "created_at": "2025-01-09T03:49:18Z",
    "closed_at": "2025-01-22T19:38:49Z",
    "labels": [],
    "url": "https://github.com/sivaprasadreddy/spring-modular-monolith/issues/32",
    "body": "I see RabbitMQ configuration done in the code but i don’t is where it is used in the code . Could you explain how can we use RabbitMQ in spring modulith through the Externalized annotation approach.",
    "comments_url": "https://api.github.com/repos/sivaprasadreddy/spring-modular-monolith/issues/32/comments",
    "author": "solanki-paras19",
    "comments": [
      {
        "user": "sivaprasadreddy",
        "created_at": "2025-01-10T11:26:55Z",
        "body": "In Spring Modulith applications when we publish events using `ApplicationEventPublisher` and consume those events using `@ApplicationModuleListener` methods which typically happens in-memory, but can be persisted in DB as I did in this repository.\r\n\r\nIn addition to consuming from our own application, we may also publish those events to an external message broker like RabbiTMQ or Kafka, so that other applications can consume and take appropriate action.\r\n\r\nIn this application, I would like to publish `OrderCreatedEvent` to an external RabbitMQ broker as well. So, I have configured the following:\r\n* Added `spring-modulith-events-amqp` dependency so that Modulith events can be published to RabbitMQ.\r\n* In order to publish events to RabbitMQ, we need to configure RabbitMQ connection properties in our Spring Boot application and also configured Exchange, Topic and Queue in `RabbitMQConfig.java`.\r\n* `OrderCreatedEvent` is annotated with `@Externalized(\"BookStoreExchange::orders.new\")` which means when these events are published they are also going to send to RabbitMQ's BookStoreExchange with RoutingKey `orders.new` which internally forward those messages to `new-orders` queue.\r\n\r\nI hope it clarifies."
      },
      {
        "user": "solanki-paras19",
        "created_at": "2025-01-22T19:38:49Z",
        "body": "Yes I understood.\nThanks for the clarification. "
      }
    ]
  },
  {
    "number": 14,
    "title": "Suggested refactorings.",
    "created_at": "2024-11-22T14:27:06Z",
    "closed_at": "2024-12-10T06:11:05Z",
    "labels": [],
    "url": "https://github.com/sivaprasadreddy/spring-modular-monolith/pull/14",
    "body": null,
    "comments_url": "https://api.github.com/repos/sivaprasadreddy/spring-modular-monolith/issues/14/comments",
    "author": "odrotbohm",
    "comments": [
      {
        "user": "sivaprasadreddy",
        "created_at": "2024-12-10T06:11:05Z",
        "body": "Thanks Oliver for reviewing and refactoring suggestions.\r\nApplied most of the suggestions and left few as it is for demonstration purposes.\r\n\r\n* Leaving PagedResult inside common.models to demonstrate OPEN module exposes everything inside the module including sub-packages.\r\n* Leaving RabbitMQConfig inside config package, it's more of a personal preference :-)"
      }
    ]
  },
  {
    "number": 6,
    "title": "Not able to run tests ",
    "created_at": "2024-09-26T19:29:51Z",
    "closed_at": "2024-09-27T19:16:29Z",
    "labels": [],
    "url": "https://github.com/sivaprasadreddy/spring-modular-monolith/issues/6",
    "body": "Hi Siva,\r\n\r\nI ma not able run tests individually (module) or using mvn not sure if i missing any thing.\r\n\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Failed to initialize dependency 'flyway' of LoadTimeWeaverAware bean 'entityManagerFactory': Error creating bean with name 'flyway' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Unsatisfied dependency expressed through method 'flyway' parameter 0: Error creating bean with name 'flywayContainerConnectionDetailsForPostgresContainer': Error creating bean with name 'postgresContainer' defined in com.sivalabs.bookstore.TestcontainersConfiguration: Previous attempts to find a Docker environment failed. Will not retry. Please see logs and check configuration\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) ~[spring-beans-6.2.0-M7.jar:6.2.0-M7]\r\n\r\nErrors: \r\n[ERROR]   BookStoreApplicationTests.contextLoads » IllegalState Failed to load ApplicationContext for [WebMergedContextConfiguration@6a40a370 testClass = com.sivalabs.bookstore.BookStoreApplicationTests, locations = [], classes = [com.sivalabs.bookstore.BookStoreApplication, com.sivalabs.bookstore.TestcontainersConfiguration], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = [\"org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true\", \"server.port=0\"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2a7ed1f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5 ....\r\n[INFO] \r\n[ERROR] Tests run: 6, Failures: 0, Errors: 4, Skipped: 0\r\n",
    "comments_url": "https://api.github.com/repos/sivaprasadreddy/spring-modular-monolith/issues/6/comments",
    "author": "SuryaEnjarapu",
    "comments": [
      {
        "user": "sivaprasadreddy",
        "created_at": "2024-09-27T02:05:54Z",
        "body": "From the error stacktrace:\r\n\r\n\"Previous attempts to find a Docker environment failed.\"\r\n\r\nThis means Docker is not running on your system. The tests are using Testcontainers which need Docker to be running."
      }
    ]
  }
]