[
  {
    "number": 641,
    "title": "Feature/delete blogpost",
    "created_at": "2024-08-25T00:49:01Z",
    "closed_at": "2024-08-27T23:28:33Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/641",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/641/comments",
    "author": "Code-Mistress",
    "comments": [
      {
        "user": "lurldgbodex",
        "created_at": "2024-08-25T08:58:01Z",
        "body": "Your code is failing build "
      }
    ]
  },
  {
    "number": 639,
    "title": "Feat/create blog category by admin",
    "created_at": "2024-08-24T20:29:14Z",
    "closed_at": "2024-08-27T23:28:48Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/639",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/639/comments",
    "author": "CallmeInnocent",
    "comments": [
      {
        "user": "lurldgbodex",
        "created_at": "2024-08-25T08:57:17Z",
        "body": "Your code is failing build "
      }
    ]
  },
  {
    "number": 635,
    "title": "FEAT: Create_BlogPost",
    "created_at": "2024-08-24T19:25:44Z",
    "closed_at": "2024-08-27T23:28:57Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/635",
    "body": "### How Can This be Manually Tested\r\nOnly super_admin can create blog post\r\n### UnAuthorized User\r\n* Returns appropriate error message when an unauthorized user try to create a blogpost\r\n### Checkpoints\r\n* Created an endpoint that allows super_admin create a blogpost\r\n* Handled errors appropriately.\r\n### Reference Issue -Feat: Creating comment endpoint",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/635/comments",
    "author": "Code-Mistress",
    "comments": [
      {
        "user": "lurldgbodex",
        "created_at": "2024-08-25T08:56:35Z",
        "body": "Your code is failing build "
      }
    ]
  },
  {
    "number": 615,
    "title": "feat: profile",
    "created_at": "2024-08-24T04:14:45Z",
    "closed_at": "2024-08-24T10:27:53Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/615",
    "body": "## Description\r\nAdd an endpoint to retrieve the profile of a user. The endpoint takes a get request and successfully retrieves the user profile if the user id provided is valid\r\n\r\n### Expected Request\r\n- Get request to `/api/v1/profiles/{userId}`\r\n\r\n### Success Response\r\n```json\r\n{\r\n  \"status_code\": 200,\r\n  \"message\": \"user profile\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\n### Acceptance Criteria\r\n- user profile can be successfully retrieved\r\n- response conforms to expected response\r\n- proper validation and error handling",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/615/comments",
    "author": "lurldgbodex",
    "comments": [
      {
        "user": "Ofektom",
        "created_at": "2024-08-24T09:45:30Z",
        "body": "@Am0du LGTM"
      }
    ]
  },
  {
    "number": 613,
    "title": "feat: implement status page endpoints to display status information",
    "created_at": "2024-08-24T01:54:19Z",
    "closed_at": "2024-08-24T13:38:15Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/613",
    "body": "## Description\r\n\r\nThis PR implements a new Status Page module that integrates Newman for API testing and provides endpoints to retrieve API status information.\r\n\r\n### Key changes:\r\n- Created a new `statuspage` package to encapsulate all status page functionality\r\n- Implemented Newman integration for running API tests periodically\r\n- Added database persistence for API status results\r\n- Created REST endpoints to retrieve API status information\r\n\r\n### How to manually test:\r\n1. Ensure you have Newman installed globally: `npm install -g newman`\r\n2. Update `application.properties` with your Postman collection path, environment path, and desired output path\r\n3. Run the application\r\n4. Wait for the scheduled task to run (every 15 minutes) or manually trigger a test run\r\n5. Access the endpoint `GET /api/status` to view the status results",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/613/comments",
    "author": "Fifetoyi",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-08-24T11:58:30Z",
        "body": "@Fifetoyi  please check this \r\n"
      }
    ]
  },
  {
    "number": 611,
    "title": "fix: add retrieve endpoint for contact us",
    "created_at": "2024-08-24T00:42:39Z",
    "closed_at": "2024-08-24T09:48:32Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/611",
    "body": "## How should this be manually tested?\r\n**Try accessing the endpoint**\r\n- Access route authenticated as an admin.\r\n- Send a GET request to `/api/v1/contact-us` to retrieve contact us members.\r\n\r\n### Successful Response\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"string\",\r\n  \"status_code\": 200\r\n}\r\n```\r\n\r\n### Bad Request\r\n```json\r\n{\r\n  \"message\": \"string\",\r\n  \"error\": \"string\",\r\n  \"status_code\": 400\r\n}\r\n```\r\n\r\n### Unauthorized\r\n```json\r\n{\r\n  \"message\": \"string\",\r\n  \"error\": \"string\",\r\n  \"status_code\": 401\r\n}\r\n```\r\n\r\n## Checklist of what I did\r\n- [x] Created an endpoint (GET `/api/v1/contact-us`) .\r\n- [x] Validated user input on the server side.\r\n- [x] Securely stored user information in the database.\r\n- [x] Implemented error handling and returned appropriate status codes.\r\n- [x] Wrote unit tests for contact form submission and data validation.\r\n- [x] Wrote integration tests for confirmation of requests.\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/611/comments",
    "author": "Fifetoyi",
    "comments": [
      {
        "user": "Ofektom",
        "created_at": "2024-08-24T09:41:41Z",
        "body": "@Am0du review this"
      }
    ]
  },
  {
    "number": 610,
    "title": "feat: Implement privacy policy endpoints",
    "created_at": "2024-08-24T00:24:07Z",
    "closed_at": "2024-08-24T09:44:36Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/610",
    "body": "## How should this be manually tested?\r\n**Try accessing the endpoint**\r\n- Access route authenticated as an admin.\r\n- Send a requests to `/api/v1/privacy-policy` for the crud operations of privacy policy.\r\n- Create, Read, Get All, Get by Id and Delete methods\r\n\r\n### Successful Response\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"string\",\r\n  \"status_code\": 200\r\n}\r\n```\r\n\r\n### Bad Request\r\n```json\r\n{\r\n  \"message\": \"string\",\r\n  \"error\": \"string\",\r\n  \"status_code\": 400\r\n}\r\n```\r\n\r\n### Unauthorized\r\n```json\r\n{\r\n  \"message\": \"string\",\r\n  \"error\": \"string\",\r\n  \"status_code\": 401\r\n}\r\n```\r\n\r\n## Checklist of what I did\r\n- [x] Created crud endpoints .\r\n- [x] Validated user input on the server side.\r\n- [x] Securely stored user information in the database.\r\n- [x] Implemented error handling and returned appropriate status codes.\r\n- [x] Wrote unit tests for contact form submission and data validation.\r\n- [x] Wrote integration tests for confirmation of requests.\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/610/comments",
    "author": "Fifetoyi",
    "comments": [
      {
        "user": "Ofektom",
        "created_at": "2024-08-24T09:40:53Z",
        "body": "@Am0du LGTM"
      }
    ]
  },
  {
    "number": 609,
    "title": "chore: update file package",
    "created_at": "2024-08-23T20:30:46Z",
    "closed_at": "2024-08-24T12:37:24Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/609",
    "body": "### Changes made\r\n- group related features into same package for easier maintenance",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/609/comments",
    "author": "lurldgbodex",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-08-24T11:59:07Z",
        "body": "@lurldgbodex Conflicts, check this\r\n"
      }
    ]
  },
  {
    "number": 607,
    "title": "fix: waitlist dto",
    "created_at": "2024-08-23T13:57:06Z",
    "closed_at": "2024-08-27T23:29:06Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/607",
    "body": "**Summary:**\r\n\r\nUpdated WaitlistRequestDto and WaitlistResponseDto to use snake_case for JSON field names, ensuring consistent API request and response formats.\r\n\r\n**Request DTO:**\r\n**Fields:** full_name, email\r\n**Validation:** full_name is required, email must be valid and required.\r\n\r\n**Response DTO:**\r\n**Fields:** message, status_code, error (optional)\r\n\r\n**Success Response (201):**\r\n```\r\n{\r\n  \"message\": \"You are all signed up!\"\r\n}\r\n```\r\n**Error Response (e.g., 400):**\r\n```\r\n{\r\n  \"message\": \"Invalid email format\",\r\n  \"status_code\": 400,\r\n  \"error\": \"Bad Request\"\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/607/comments",
    "author": "gurumarv",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-08-24T11:59:35Z",
        "body": "Failing CI check this \r\n"
      }
    ]
  },
  {
    "number": 573,
    "title": "Db revert v2 to v1 2",
    "created_at": "2024-08-20T15:40:21Z",
    "closed_at": "2024-08-20T15:51:52Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/573",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/573/comments",
    "author": "stephennwachukwu",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-08-20T15:45:48Z",
        "body": "Shouldn't it be to dev then to staging?"
      },
      {
        "user": "sudobro-creator",
        "created_at": "2024-08-20T15:57:57Z",
        "body": "It is"
      }
    ]
  },
  {
    "number": 520,
    "title": "too slow",
    "created_at": "2024-08-15T12:40:39Z",
    "closed_at": "2024-08-15T12:44:08Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/520",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/520/comments",
    "author": "ThePrimeJnr",
    "comments": [
      {
        "user": "FavourDaniel",
        "created_at": "2024-08-15T12:41:59Z",
        "body": "lgtm"
      }
    ]
  },
  {
    "number": 513,
    "title": "chore: update concat video expected format",
    "created_at": "2024-08-14T16:28:47Z",
    "closed_at": "2024-08-16T19:12:15Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/513",
    "body": "### Changes made\r\n- added mime type to video format for video concatenation",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/513/comments",
    "author": "lurldgbodex",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-08-16T02:25:23Z",
        "body": "No body?\r\n"
      }
    ]
  },
  {
    "number": 442,
    "title": "Update dev-cd.yml",
    "created_at": "2024-08-09T08:51:10Z",
    "closed_at": "2024-08-09T08:54:45Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/442",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/442/comments",
    "author": "codak77",
    "comments": [
      {
        "user": "sudobro-creator",
        "created_at": "2024-08-09T08:54:08Z",
        "body": "Updated config"
      }
    ]
  },
  {
    "number": 369,
    "title": "Feature/retrieve/product",
    "created_at": "2024-08-06T20:41:45Z",
    "closed_at": "2024-08-23T08:35:56Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/369",
    "body": "Retrieving a single post by Id `GET /api/v1/products/{productId}`",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/369/comments",
    "author": "WaveGuide1",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-08-06T20:55:13Z",
        "body": "Fix pr name and include description"
      },
      {
        "user": "Fifetoyi",
        "created_at": "2024-08-06T22:11:23Z",
        "body": "Also refactor branch name to be `feat/branch-name`"
      }
    ]
  },
  {
    "number": 322,
    "title": "Feat/about page setup",
    "created_at": "2024-08-01T07:49:32Z",
    "closed_at": "2024-08-23T08:36:19Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/322",
    "body": "Created the About page entity",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/322/comments",
    "author": "Prebor97",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-08-05T13:17:00Z",
        "body": "Fix pr name and include description"
      }
    ]
  },
  {
    "number": 298,
    "title": "Feature/all endpoints for blog post ",
    "created_at": "2024-07-31T06:16:05Z",
    "closed_at": "2024-08-23T08:12:11Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/298",
    "body": "### **How Should These EndPoints be Manually Tested?**\r\n\r\n### **BlogPost Endpoints Manual Testing**\r\n\r\n#### **POST /api/v1/blogs**\r\n\r\n**How to Test:**\r\n- Send a POST request to `/api/v1/blogs` with a valid JSON payload containing `title` and `content`.\r\n- Test with missing required fields (e.g., only `title` or `content`).\r\n- Test with invalid data types (e.g., non-string data for `title` or `content`).\r\n\r\n**Expected Results:**\r\n- On success, expect a 201 Created response with the newly created blog post details.\r\n- On validation errors, expect a 400 Bad Request response.\r\n\r\n**Checklist:**\r\n- Implemented request validation for required fields.\r\n- Validated data types and constraints.\r\n- Proper error handling and response messaging.\r\n\r\n---\r\n\r\n#### **GET /api/v1/blogs**\r\n\r\n**How to Test:**\r\n- Send a GET request to `/api/v1/blogs` to retrieve all blog posts.\r\n\r\n**Expected Results:**\r\n- Expect a 200 OK response with a list of blog posts.\r\n- If there are no blog posts, expect an empty list.\r\n\r\n**Checklist:**\r\n- Successfully fetches and returns a list of blog posts.\r\n- Handles cases where there are no posts.\r\n\r\n---\r\n\r\n#### **GET /api/v1/blogs/{blog_id}**\r\n\r\n**How to Test:**\r\n- Send a GET request to `/api/v1/blogs/{blog_id}` with a valid `blog_id`.\r\n- Test with an invalid or non-existent `blog_id`.\r\n\r\n**Expected Results:**\r\n- On success, expect a 200 OK response with the blog post details.\r\n- On invalid `blog_id`, expect a 404 Not Found response.\r\n\r\n**Checklist:**\r\n- Fetches blog post by ID and handles invalid or non-existent IDs.\r\n\r\n---\r\n\r\n#### **GET /api/v1/blogs/latest**\r\n\r\n**How to Test:**\r\n- Send a GET request to `/api/v1/blogs/latest` to retrieve the most recent blog post.\r\n\r\n**Expected Results:**\r\n- On success, expect a 200 OK response with the latest blog post.\r\n- If there are no blog posts, expect a 404 Not Found response.\r\n\r\n**Checklist:**\r\n- Fetches the latest blog post and handles cases with no posts.\r\n\r\n---\r\n\r\n#### **PATCH /api/v1/blogs/edit/{blog_id}**\r\n\r\n**How to Test:**\r\n- Send a PATCH request to `/api/v1/blogs/edit/{blog_id}` with a valid `blog_id` and JSON payload for fields to update.\r\n- Test with invalid or non-existent `blog_id`.\r\n- Test with partial or invalid data.\r\n\r\n**Expected Results:**\r\n- On success, expect a 200 OK response with updated blog post details.\r\n- On invalid `blog_id`, expect a 404 Not Found response.\r\n- On validation errors, expect a 400 Bad Request response.\r\n\r\n**Checklist:**\r\n- Successfully updates a blog post by ID and handles invalid or non-existent IDs.\r\n- Implements validation for fields and proper error handling.\r\n\r\n\r\n### **Reference Issue**\r\n[FEAT]: BlogPost  - Implementation and Testing\r\n\r\n---\r\n\r\nThis template provides a structured guide for manually testing each of your endpoints, ensuring that all aspects of functionality and error handling are thoroughly checked.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/298/comments",
    "author": "NecyNazy",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-31T07:28:10Z",
        "body": "You have conflicts, please fix them\r\n"
      }
    ]
  },
  {
    "number": 295,
    "title": "Feat/about page feature",
    "created_at": "2024-07-31T04:57:09Z",
    "closed_at": "2024-07-31T06:31:22Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/295",
    "body": "### How to Test\r\n\r\n\r\n1. **Access the `GET /api/v1/content/about` endpoint with valid credentials.**\r\n\r\n   - **Expected result:** The About page content is retrieved successfully.\r\n\r\n   - **Example response:** `{ \"statusCode\": 200, \"message\": \"Retrieved About Page content successfully\" }`\r\n\r\n\r\n2. **Access the `GET /api/v1/content/about` endpoint without authentication.**\r\n\r\n   - **Expected result:** A 401 error is returned, indicating invalid authentication credentials.\r\n\r\n   - **Example response:** `{ \"statusCode\": 401, \"message\": \"Invalid authentication credentials\" }`\r\n\r\n\r\n3. **Access the `GET /api/v1/content/about` endpoint without sufficient permissions.**\r\n\r\n   - **Expected result:** A 403 error is returned, indicating unauthorized access.\r\n\r\n   - **Example response:** `{ \"statusCode\": 403, \"message\": \"You do not have the necessary permissions to access this resource\" }`\r\n\r\n\r\n4. **Access the `GET /api/v1/content/about` endpoint and encounter a server error.**\r\n\r\n   - **Expected result:** A 500 error is returned.\r\n\r\n   - **Example response:** `{ \"statusCode\": 500, \"message\": \"Failed to retrieve About page content.\" }`\r\n\r\n\r\n5. **Access the `PUT /api/v1/content/about` endpoint with valid content and credentials.**\r\n\r\n   - **Expected result:** The About page content is updated successfully.\r\n\r\n   - **Example response:** `{ \"statusCode\": 200, \"message\": \"About page content updated successfully.\" }`\r\n\r\n\r\n6. **Access the `PUT /api/v1/content/about` endpoint without sufficient permissions.**\r\n\r\n   - **Expected result:** A 403 error is returned, indicating unauthorized access.\r\n\r\n   - **Example response:** `{ \"statusCode\": 403, \"message\": \"You do not have permission to perform this action.\" }`\r\n\r\n\r\n7. **Access the `PUT /api/v1/content/about` endpoint and encounter a server error.**\r\n\r\n   - **Expected result:** A 500 error is returned.\r\n\r\n   - **Example response:** `{ \"statusCode\": 500, \"message\": \"Failed to update About page content.\" }`\r\n\r\n\r\n### Checklist\r\n\r\n- [x] Implemented a functional `GET /api/v1/content/about` endpoint.\r\n\r\n- [x] Ensured that the endpoint returns appropriate status codes and messages.\r\n\r\n- [x] Implemented a `PUT /api/v1/content/about` endpoint for updating the About page content.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/295/comments",
    "author": "Prebor97",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-31T05:06:36Z",
        "body": "Bro sync your branch to the latest commit\r\n"
      },
      {
        "user": "Prebor97",
        "created_at": "2024-07-31T05:13:15Z",
        "body": "> Bro sync your branch to the latest commit\r\n\r\nI did that already before pushing"
      }
    ]
  },
  {
    "number": 253,
    "title": "Update PlanController.java",
    "created_at": "2024-07-29T16:14:57Z",
    "closed_at": "2024-07-29T20:50:25Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/253",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/253/comments",
    "author": "Am0du",
    "comments": [
      {
        "user": "Adewale66",
        "created_at": "2024-07-29T16:26:23Z",
        "body": "Why'd you remove the annotation?"
      }
    ]
  },
  {
    "number": 168,
    "title": "feat: Send SMSes using Twilio API ",
    "created_at": "2024-07-26T10:13:09Z",
    "closed_at": "2024-07-28T16:50:53Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/168",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/168/comments",
    "author": "Olaoluwa22",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-07-26T15:29:50Z",
        "body": "Pr should come from a feature branch like `feat/send-sms-with-twilio` and not from the dev branch.\r\nThere should also be a description of what was done in the ticket. See other prs for reference."
      }
    ]
  },
  {
    "number": 157,
    "title": "feat: Organization Deletion Endpoint ",
    "created_at": "2024-07-25T14:21:57Z",
    "closed_at": "2024-07-25T15:15:53Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/157",
    "body": "# Add Organization Deletion Endpoint\r\n\r\n## Description\r\n\r\nThis pull request adds an API endpoint to handle the deletion of an organization. The endpoint validates the organization ID and updates the specified organization's `deleted` attribute to `true` in the database upon successful validation.\r\n\r\n## GitHub Issue: Organization Deletion Endpoint\r\n\r\n## Acceptance Criteria\r\n\r\n- **Endpoint**: The endpoint is accessible at `/api/v1/organizations/:org_id`.\r\n- **HTTP Method**: The endpoint accepts HTTP DELETE requests.\r\n- **Authentication**: The endpoint is protected and requires authentication.\r\n- **Ownership Check**: The endpoint verifies that the user hitting the endpoint is the owner of the organization.\r\n- **Authorization Header**: Requests to the endpoint include a valid authentication token in the `Authorization` header (e.g., `Authorization: Bearer <token>`).\r\n- **Database Update**: Upon successful validation of the organization ID, the organization is marked as deleted by changing the `deleted` attribute in the database to `true`.\r\n- **Data Integrity**: All related data to the organization remains intact.\r\n\r\n## How to Test Manually\r\n\r\n### Prerequisites\r\n- Ensure you have the latest code from the `main` branch.\r\n- Ensure your environment variables for database and authentication are set correctly.\r\n\r\n### Steps to Test\r\n1. **Clone the repository**: `git clone <repository-url>`\r\n2. **Checkout to the new branch**: `git checkout <your-branch-name>`\r\n3. **Install dependencies**: `npm install`\r\n4. **Run the application**: `npm start`\r\n5. **Authenticate and obtain a valid token**: Use the login endpoint to get a token.\r\n6. **Issue a DELETE request** to the endpoint:\r\n    - Use a tool like Postman or curl:\r\n      ```\r\n      DELETE /api/v1/organizations/<org_id>\r\n      Content-Type: application/json\r\n      Authorization: Bearer <token>\r\n      ```\r\n    - Replace `<org_id>` with a valid organization ID and `<token>` with your authentication token.\r\n7. **Verify the responses**:\r\n    - For a valid request, expect a **204 No Content** status.\r\n    - For an invalid organization ID format, expect a **400 Bad Request** status.\r\n    - For a non-existent organization ID, expect a **404 Not Found** status.\r\n    - For unauthorized deletion attempt, expect a **401 Unauthorized** status.\r\n\r\n### Expected Outcomes\r\n- **204 No Content**: The organization is marked as deleted.\r\n- **400 Bad Request**: Invalid organization ID format.\r\n- **404 Not Found**: Invalid organization ID.\r\n- **401 Unauthorized**: User not authorized to delete this organization.\r\n\r\n## Checklist\r\n\r\n- [x] Developed server-side logic to handle organization deletion requests.\r\n- [x] Validated and sanitized incoming organization ID data.\r\n- [x] Validated that the user deleting the organization is the owner.\r\n- [x] Changed the specified organization's `deleted` attribute to `true` in the database upon successful validation.\r\n- [x] Maintained data integrity by keeping all related data of the specified organization intact.\r\n- [x] Wrote unit tests to ensure the organization deletion endpoint validates input correctly and removes the organization from the system.\r\n- [x] Tested various scenarios for submitting the organization ID (e.g., valid ID, non-existent ID, malformed ID, etc.).\r\n- [x] Verified that all unit tests pass.\r\n- [x] Ensured the code follows the project's style guidelines.\r\n- [x] Removed all console logs and comments.\r\n- [x] Updated the documentation as necessary.\r\n- [x] Informed relevant stakeholders of the changes.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/157/comments",
    "author": "IgweWisdomJaminel",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-25T15:15:53Z",
        "body": "Follow buka's guideline "
      },
      {
        "user": "IgweWisdomJaminel",
        "created_at": "2024-07-25T15:18:03Z",
        "body": "Atleast tell me the specific thing you noticed i didn't follow boss"
      }
    ]
  },
  {
    "number": 155,
    "title": "feat: Organization Deletion Endpoint",
    "created_at": "2024-07-25T09:48:55Z",
    "closed_at": "2024-07-25T14:23:09Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/155",
    "body": "# Add Organization Deletion Endpoint\r\n\r\n## Description\r\n\r\nThis pull request adds an API endpoint to handle the deletion of an organization. The endpoint validates the organization ID and updates the specified organization's `deleted` attribute to `true` in the database upon successful validation.\r\n\r\n## GitHub Issue: Organization Deletion Endpoint\r\n\r\n## Acceptance Criteria\r\n\r\n- **Endpoint**: The endpoint is accessible at `/api/v1/organizations/:org_id`.\r\n- **HTTP Method**: The endpoint accepts HTTP DELETE requests.\r\n- **Authentication**: The endpoint is protected and requires authentication.\r\n- **Ownership Check**: The endpoint verifies that the user hitting the endpoint is the owner of the organization.\r\n- **Authorization Header**: Requests to the endpoint include a valid authentication token in the `Authorization` header (e.g., `Authorization: Bearer <token>`).\r\n- **Database Update**: Upon successful validation of the organization ID, the organization is marked as deleted by changing the `deleted` attribute in the database to `true`.\r\n- **Data Integrity**: All related data to the organization remains intact.\r\n\r\n## How to Test Manually\r\n\r\n### Prerequisites\r\n- Ensure you have the latest code from the `main` branch.\r\n- Ensure your environment variables for database and authentication are set correctly.\r\n\r\n### Steps to Test\r\n1. **Clone the repository**: `git clone <repository-url>`\r\n2. **Checkout to the new branch**: `git checkout <your-branch-name>`\r\n3. **Install dependencies**: `npm install`\r\n4. **Run the application**: `npm start`\r\n5. **Authenticate and obtain a valid token**: Use the login endpoint to get a token.\r\n6. **Issue a DELETE request** to the endpoint:\r\n    - Use a tool like Postman or curl:\r\n      ```\r\n      DELETE /api/v1/organizations/<org_id>\r\n      Content-Type: application/json\r\n      Authorization: Bearer <token>\r\n      ```\r\n    - Replace `<org_id>` with a valid organization ID and `<token>` with your authentication token.\r\n7. **Verify the responses**:\r\n    - For a valid request, expect a **204 No Content** status.\r\n    - For an invalid organization ID format, expect a **400 Bad Request** status.\r\n    - For a non-existent organization ID, expect a **404 Not Found** status.\r\n    - For unauthorized deletion attempt, expect a **401 Unauthorized** status.\r\n\r\n### Expected Outcomes\r\n- **204 No Content**: The organization is marked as deleted.\r\n- **400 Bad Request**: Invalid organization ID format.\r\n- **404 Not Found**: Invalid organization ID.\r\n- **401 Unauthorized**: User not authorized to delete this organization.\r\n\r\n## Checklist\r\n\r\n- [x] Developed server-side logic to handle organization deletion requests.\r\n- [x] Validated and sanitized incoming organization ID data.\r\n- [x] Validated that the user deleting the organization is the owner.\r\n- [x] Changed the specified organization's `deleted` attribute to `true` in the database upon successful validation.\r\n- [x] Maintained data integrity by keeping all related data of the specified organization intact.\r\n- [x] Wrote unit tests to ensure the organization deletion endpoint validates input correctly and removes the organization from the system.\r\n- [x] Tested various scenarios for submitting the organization ID (e.g., valid ID, non-existent ID, malformed ID, etc.).\r\n- [x] Verified that all unit tests pass.\r\n- [x] Ensured the code follows the project's style guidelines.\r\n- [x] Removed all console logs and comments.\r\n- [x] Updated the documentation as necessary.\r\n- [x] Informed relevant stakeholders of the changes.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/155/comments",
    "author": "IgweWisdomJaminel",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-07-25T11:01:05Z",
        "body": "fix pr name"
      },
      {
        "user": "IgweWisdomJaminel",
        "created_at": "2024-07-25T11:36:11Z",
        "body": "Done"
      },
      {
        "user": "Fifetoyi",
        "created_at": "2024-07-25T11:42:53Z",
        "body": "you're sending a pr from your dev branch. It should come from your own local branch of that issue e.g \"feat/org-deletion-endpoint\".\r\n\r\nSee other pr's for reference"
      }
    ]
  },
  {
    "number": 140,
    "title": "Feat: add users to organisation api feature",
    "created_at": "2024-07-24T23:19:40Z",
    "closed_at": "2024-07-24T23:41:29Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/140",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/140/comments",
    "author": "CallmeInnocent",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-24T23:41:00Z",
        "body": "Follow buka's guideline\r\n"
      }
    ]
  },
  {
    "number": 139,
    "title": "feat: created login endpoint",
    "created_at": "2024-07-24T23:03:55Z",
    "closed_at": "2024-07-24T23:42:44Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/139",
    "body": "Summary:\r\n\r\nDeveloped a new API endpoint /api/v1/auth/login to handle user login. The endpoint accepts user credentials (email and password) and returns a JSON Web Token (JWT) upon successful authentication. It includes validation for input data and appropriate error handling for invalid credentials or missing parameters.\r\n\r\nKey Features:\r\n\r\nAuthentication:\r\n\r\nValidates user credentials against the database.\r\nReturns a JWT upon successful login.\r\nError Handling:\r\n\r\nReturns a 400 error for missing or invalid input with descriptive messages.\r\nReturns a 401 error for incorrect credentials with appropriate error messages.\r\nDatabase Design:\r\n\r\nImplemented a secure users table to store credentials.\r\nPasswords are securely hashed before storage.\r\nTesting:\r\n\r\nUnit tests for valid and invalid login scenarios.\r\nIntegration tests for database interaction and JWT generation.\r\nPurpose:\r\n\r\nTo provide a secure and standardized method for user authentication, ensuring access to protected resources. The implementation includes a robust database schema for secure storage of user credentials and comprehensive testing to ensure reliability and security.\r\n\r\nAcceptance Criteria:\r\n\r\nEndpoint successfully authenticates users with valid credentials.\r\nReturns a JWT token on successful authentication.\r\nHandles invalid or missing input with appropriate error responses.\r\nSecure storage of user credentials in the database.\r\nComprehensive testing to verify functionality.\r\nTasks Completed:\r\n\r\nDesigned and created the users table.\r\nDeveloped the /api/v1/auth/login endpoint.\r\nIntegrated authentication logic and secure password handling.\r\nImplemented unit and integration tests.\r\nDocumented the API endpoint and error responses.\r\nConducted code review and testing for best practices and security.\r\nOutcome:\r\n\r\nA fully functional, secure login API endpoint that enhances user experience and security. The implementation is thoroughly tested and documented, ensuring maintainability and ease of future development.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/139/comments",
    "author": "merison200",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-24T23:42:44Z",
        "body": "Follow buka's guideline"
      }
    ]
  },
  {
    "number": 136,
    "title": "Feat: Endpoints for Fetch Product Stock management",
    "created_at": "2024-07-24T22:26:02Z",
    "closed_at": "2024-07-24T23:43:29Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/136",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/136/comments",
    "author": "Neche-Stephen",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-24T23:43:29Z",
        "body": "Follow buka's guideline"
      }
    ]
  },
  {
    "number": 132,
    "title": "Feat/fetch product stock",
    "created_at": "2024-07-24T21:44:24Z",
    "closed_at": "2024-07-25T00:11:55Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/132",
    "body": "Implemented Fetch product stock endpoint",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/132/comments",
    "author": "Neche-Stephen",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-25T00:11:56Z",
        "body": "Follow buka's guideline"
      }
    ]
  },
  {
    "number": 130,
    "title": "Fetch product stock",
    "created_at": "2024-07-24T21:30:11Z",
    "closed_at": "2024-07-24T21:35:14Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/130",
    "body": "Implemented Fetch product stock endpoint\r\n\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/130/comments",
    "author": "Neche-Stephen",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-07-24T21:33:33Z",
        "body": "rename your branch to follow the proper conventions. \"feat/name\""
      }
    ]
  },
  {
    "number": 129,
    "title": "feat: created login endpoint",
    "created_at": "2024-07-24T21:23:44Z",
    "closed_at": "2024-07-24T22:45:34Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/129",
    "body": "### Pull Request Description\r\n\r\n**Summary:**\r\n\r\nDeveloped a new API endpoint `/api/v1/auth/login` to handle user login. The endpoint accepts user credentials (email and password) and returns a JSON Web Token (JWT) upon successful authentication. It includes validation for input data and appropriate error handling for invalid credentials or missing parameters.\r\n\r\n**Key Features:**\r\n\r\n1. **Authentication:**\r\n   - Validates user credentials against the database.\r\n   - Returns a JWT upon successful login.\r\n\r\n2. **Error Handling:**\r\n   - Returns a 400 error for missing or invalid input with descriptive messages.\r\n   - Returns a 401 error for incorrect credentials with appropriate error messages.\r\n\r\n3. **Database Design:**\r\n   - Implemented a secure `users` table to store credentials.\r\n   - Passwords are securely hashed before storage.\r\n\r\n4. **Testing:**\r\n   - Unit tests for valid and invalid login scenarios.\r\n   - Integration tests for database interaction and JWT generation.\r\n\r\n**Purpose:**\r\n\r\nTo provide a secure and standardized method for user authentication, ensuring access to protected resources. The implementation includes a robust database schema for secure storage of user credentials and comprehensive testing to ensure reliability and security.\r\n\r\n**Acceptance Criteria:**\r\n\r\n- Endpoint successfully authenticates users with valid credentials.\r\n- Returns a JWT token on successful authentication.\r\n- Handles invalid or missing input with appropriate error responses.\r\n- Secure storage of user credentials in the database.\r\n- Comprehensive testing to verify functionality.\r\n\r\n**Tasks Completed:**\r\n\r\n- Designed and created the `users` table.\r\n- Developed the `/api/v1/auth/login` endpoint.\r\n- Integrated authentication logic and secure password handling.\r\n- Implemented unit and integration tests.\r\n- Documented the API endpoint and error responses.\r\n- Conducted code review and testing for best practices and security.\r\n\r\n**Outcome:**\r\n\r\nA fully functional, secure login API endpoint that enhances user experience and security. The implementation is thoroughly tested and documented, ensuring maintainability and ease of future development.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/129/comments",
    "author": "merison200",
    "comments": [
      {
        "user": "Fifetoyi",
        "created_at": "2024-07-24T21:33:13Z",
        "body": "rename your branch to follow the proper conventions. \"feat/name\""
      }
    ]
  },
  {
    "number": 125,
    "title": "feat:delete product feature#14",
    "created_at": "2024-07-24T19:54:35Z",
    "closed_at": "2024-07-25T00:12:32Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/125",
    "body": "## New API Endpoint for Deleting Products\r\n\r\nThis pull request implements a new API endpoint for deleting products. The endpoint includes proper authentication and error handling mechanisms to ensure secure and accurate product management.\r\n\r\n### Changes:\r\n\r\n#### API Endpoint:\r\n- Created the endpoint `/api/v1/products/{id}` to delete a specific product by its ID.\r\n\r\n#### Request Handling:\r\n- Utilized `@DeleteMapping` to map the HTTP DELETE request to the endpoint.\r\n- Incorporated path variable for the product ID to identify the product to be deleted.\r\n\r\n#### Security and Permissions:\r\n- Ensured that only authenticated users with appropriate permissions (e.g., admin) can delete products.\r\n- Added logic to check user permissions before allowing product deletion.\r\n\r\n#### Error Handling:\r\n- Implemented error handling for the following scenarios:\r\n  - Product not found: Returns a `404 Not Found` status with a detailed error message.\r\n  - Unauthorized access: Returns a `403 Forbidden` status if the user lacks permission to delete the product.\r\n  - Internal server errors: Returns a `500 Internal Server Error` status for unexpected issues.\r\n\r\n### Response Structure:\r\n- On successful deletion:\r\n  - Returns a `204 No Content` status.\r\n- On error:\r\n  - Returns an error object with `status_code` and `message` fields indicating the nature of the error.\r\n\r\n### Testing:\r\n- **Unit Tests:**\r\n  - Verified that the `deleteProductById` method in `ProductService` correctly handles product deletion.\r\n  - Tested scenarios where the product is not found or the user is unauthorized.\r\n\r\n- **Integration Tests:**\r\n  - Tested that `404 Not Found` is returned for nonexistent products.\r\n  \r\n\r\n### Issue:\r\nImplements the feature for deleting products securely, ensuring proper authentication, permission checks, and error handling. This enhances the application by preventing unauthorized actions and providing clear feedback for various scenarios.",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/125/comments",
    "author": "Prebor97",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-25T00:12:32Z",
        "body": "Follow buka's guideline"
      }
    ]
  },
  {
    "number": 122,
    "title": "adding the application properties file in the pipeline with connectio…",
    "created_at": "2024-07-24T18:04:46Z",
    "closed_at": "2024-07-24T20:24:35Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/122",
    "body": "…n string fix",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/122/comments",
    "author": "stephennwachukwu",
    "comments": [
      {
        "user": "billmal071",
        "created_at": "2024-07-24T20:05:30Z",
        "body": "Why's it saying no file changed?"
      }
    ]
  },
  {
    "number": 107,
    "title": "Implemented blog post edit",
    "created_at": "2024-07-22T21:48:37Z",
    "closed_at": "2024-07-24T20:44:52Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/107",
    "body": "## Pull request: Implemented blog post edit\r\n\r\n#### This pull request features schema creation for the blog entity and service implementation of the blog post edit by superadmin:\r\n\r\n```CREATE TABLE blogs (\r\n    id BIGINT PRIMARY KEY,\r\n    blog_id VARCHAR(36) UNIQUE,\r\n    title VARCHAR(100) NOT NULL,\r\n    content TEXT NOT NULL,\r\n    image_urls TEXT[],\r\n    tags TEXT[],\r\n    author VARCHAR(255),\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Create trigger function for update column\r\nCREATE OR REPLACE FUNCTION update_updated_at_column()\r\nRETURNS TRIGGER AS $$\r\nBEGIN\r\n    NEW.updated_at = CURRENT_TIMESTAMP;\r\n    RETURN NEW;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- Create trigger to call the function before any update\r\nCREATE TRIGGER set_updated_at\r\nBEFORE UPDATE ON blogs\r\n```\r\n#### dto and mapper classes were created to map inputs to the database after proper verification and formatting\r\n\r\n ```\r\n├── blog\r\n│   │   │       │   ├── controller\r\n│   │   │       │   │   └── BlogController.java\r\n│   │   │       │   ├── dto\r\n│   │   │       │   │   ├── EditRequest.java\r\n│   │   │       │   │   └── EditResponse.java\r\n│   │   │       │   ├── entity\r\n│   │   │       │   │   └── Blog.java\r\n│   │   │       │   ├── mapper\r\n│   │   │       │   │   └── BlogMapper.java\r\n│   │   │       │   ├── repository\r\n│   │   │       │   │   └── BlogRepository.java\r\n│   │   │       │   └── service\r\n│   │   │       │       ├── EditBlogImplementation.java\r\n│   │   │       │       └── EditBlogService.java\r\n```\r\n\r\nspring-boot-starter-validation was added to handle validation at controller and dto levels",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/107/comments",
    "author": "Naztarr",
    "comments": [
      {
        "user": "NdubuisiJr",
        "created_at": "2024-07-23T08:47:51Z",
        "body": "@Naztarr Add proper description of what you have done. All checks failed."
      }
    ]
  },
  {
    "number": 98,
    "title": "API Endpoint for Sending SMSes Using Twilio API",
    "created_at": "2024-07-22T11:36:43Z",
    "closed_at": "2024-07-24T13:15:34Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/98",
    "body": null,
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/98/comments",
    "author": "Olaoluwa22",
    "comments": [
      {
        "user": "Am0du",
        "created_at": "2024-07-24T12:11:40Z",
        "body": "Make a proper pull request and resolve your conflicts\r\n\r\n"
      }
    ]
  },
  {
    "number": 96,
    "title": "Jaminel : Implement Delete Organization Feature",
    "created_at": "2024-07-22T09:57:49Z",
    "closed_at": "2024-07-24T20:43:50Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/96",
    "body": "### Implement Delete Organization Feature\r\n\r\n### Description\r\nThis pull request implements the feature to delete an organization from the system. The following changes have been made:\r\n- Added a DELETE endpoint to the organization's controller.\r\n- Implemented the delete method in the organization service.\r\n- Updated the database schema to handle soft deletes.\r\n- Added unit and integration tests for the delete functionality.\r\n\r\n\r\nThis feature is essential for allowing administrators to remove outdated or incorrect organization records from the system, ensuring data accuracy and relevance.\r\n\r\n### Related Issues\r\nAuthentication and Authorization needs to be updated before featue can be used\r\n- Ensure the user has the appropriate permissions before allowing deletion.\r\n- This implementation currently uses soft deletes to maintain data integrity.\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/96/comments",
    "author": "IgweWisdomJaminel",
    "comments": [
      {
        "user": "lurldgbodex",
        "created_at": "2024-07-24T11:21:00Z",
        "body": "Add test to your application\r\n"
      }
    ]
  },
  {
    "number": 87,
    "title": "feat: fetch single product by id",
    "created_at": "2024-07-21T21:54:58Z",
    "closed_at": "2024-07-24T20:42:42Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/87",
    "body": "- Api endpoint to fetch single product by `id`",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/87/comments",
    "author": "masterchief-Dave",
    "comments": [
      {
        "user": "NdubuisiJr",
        "created_at": "2024-07-21T22:36:17Z",
        "body": "Fix the merge conflicts"
      }
    ]
  },
  {
    "number": 45,
    "title": "[FEAT] Product Search Endpoint - BACKEND #5",
    "created_at": "2024-07-20T18:07:31Z",
    "closed_at": "2024-07-21T13:20:14Z",
    "labels": [],
    "url": "https://github.com/hngprojects/hng_boilerplate_java_web/pull/45",
    "body": "\r\n## Description\r\nThis feature involves creating a product search endpoint for the backend system. The endpoint will allow users to search for products by name, category, and price range. Additional search features can be added to enhance the functionality.\r\n## Acceptance Criteria\r\n- Users can search for products by name.\r\n- Users can search for products by category.\r\n- Users can filter search results by price range.\r\n- The endpoint should return accurate search results based on the given criteria.\r\n- The search functionality should be efficient and performant, even with a large dataset.\r\n- Proper error handling and validation should be implemented for search queries.\r\n## Task\r\n- [x] Design the product search endpoint.\r\n- [x] Implement query parameters for name, category, and price range.\r\n- [x] Integrate the search endpoint with the existing product database.\r\n- [x] Implement error handling and validation for search queries.\r\n- [x] Write unit tests for the search functionality.\r\n- [x] Write integration tests for the search endpoint.\r\n- [x] Document the API endpoint and usage.\r\n## Expected Outcome\r\n- A functional product search endpoint that meets all acceptance criteria.\r\n- Users can efficiently search for products using various criteria.\r\n- The search results are accurate and relevant to the user's query.\r\n- The system handles a high volume of search requests without significant performance degradation.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/hngprojects/hng_boilerplate_java_web/issues/45/comments",
    "author": "Am0du",
    "comments": [
      {
        "user": "NdubuisiJr",
        "created_at": "2024-07-20T20:48:22Z",
        "body": "This endpoint should be paginated. Add pagination parameters in the request. Check other issues to find the approved pagination models."
      },
      {
        "user": "Am0du",
        "created_at": "2024-07-20T23:05:35Z",
        "body": "> This endpoint should be paginated. Add pagination parameters in the request. Check other issues to find the approved pagination models.\r\n\r\ni've added pagination"
      },
      {
        "user": "NdubuisiJr",
        "created_at": "2024-07-20T23:17:12Z",
        "body": "It's looking better. Resolve these few changes."
      },
      {
        "user": "Am0du",
        "created_at": "2024-07-20T23:42:36Z",
        "body": "> It's looking better. Resolve these few changes.\r\n\r\ni've resolve all the changes. \r\n"
      }
    ]
  }
]