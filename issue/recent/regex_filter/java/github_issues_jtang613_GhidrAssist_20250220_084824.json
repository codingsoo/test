[
  {
    "number": 25,
    "title": "Can't find plugin package for GhidrAssist! Creating stub...",
    "created_at": "2025-02-14T18:38:13Z",
    "closed_at": "2025-02-14T22:16:53Z",
    "labels": [],
    "url": "https://github.com/jtang613/GhidrAssist/issues/25",
    "body": "I am not sure but I think that some plugin configuration is missing and so Ghidra warns\n```\nINFO  Ghidra startup complete (6793 ms)   (GhidraRun.java:92) \nWARN  Can't find plugin package for GhidrAssist! Creating stub...   (PluginPackage.java:63) \n```",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/25/comments",
    "author": "bukowa",
    "comments": [
      {
        "user": "jtang613",
        "created_at": "2025-02-14T22:16:53Z",
        "body": "As far as I can tell, think this is a harmless warning common to new extension installs."
      }
    ]
  },
  {
    "number": 24,
    "title": "Latency on local models",
    "created_at": "2025-02-14T15:28:40Z",
    "closed_at": "2025-02-16T02:22:41Z",
    "labels": [],
    "url": "https://github.com/jtang613/GhidrAssist/issues/24",
    "body": "> For local LLM's, I've found that the Llama3.3:70b, Llama3.1:8b and DeepSeek-r1 produce good results\n\nQuestion about when those local models were tested.\n\nWhat kind of hardware were the local models running on?  I'm assuming you were running a distilled `deepseek-r1`, if so, which one?\n\nHave you noticed any issues with the extension on low token/sec latency?",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/24/comments",
    "author": "zwilcox",
    "comments": [
      {
        "user": "jtang613",
        "created_at": "2025-02-14T23:11:13Z",
        "body": "I use these models regularly - almost daily as I'm working on building up my RLHF dataset for future model finetunes.\nAs far as hardware is concerned, it's a fairly high-end system with a RTX 4090 and a RTX 3080.\nI'm primarily running deepseek-r1:32b and llama3.1:8b, but occasionally test llama3.3:70b as well.\n\nNaturally, the performance of local models is heavily dependant on your hardware. Running on CPU will be noticeably slower than GPU. And there is a wide range of performance between a high-end versus mid-tier GPU. Additionally, dedicated LLM API providers like OpenAI will almost always be faster than an equivalent model running locally.\n\nI personally have not encountered any *unexpected* latency issues. But my expectations may have a different calibration than others'. A couple things that I think are important to consider are that TTC models like DeepSeek-r1 produce a LOT of output tokens prior to the actual response - and GhidrAssist filters these out otherwise they would pollute the output. Secondly, code - assembly and pseudo-C - is very token-intensive compared to natural language, and thus puts a heavier demand on the LLMs as a result.\n\nHope this sheds some light."
      }
    ]
  },
  {
    "number": 16,
    "title": "where do I find `Open Tool Settings -> GhidraAssist`",
    "created_at": "2025-02-09T15:32:07Z",
    "closed_at": "2025-02-09T15:57:14Z",
    "labels": [],
    "url": "https://github.com/jtang613/GhidrAssist/issues/16",
    "body": "Trying to navitage in Ghidra can be hard, I cannot find this setting `Open Tool Settings -> GhidraAssist.`",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/16/comments",
    "author": "bukowa",
    "comments": [
      {
        "user": "jtang613",
        "created_at": "2025-02-09T15:52:49Z",
        "body": "CodeBrowser -> Tools -> GhidrAssist Settings\n\nWill update the readme."
      },
      {
        "user": "jtang613",
        "created_at": "2025-02-09T15:57:14Z",
        "body": "Fixed."
      }
    ]
  },
  {
    "number": 15,
    "title": "Ship with some common defaults",
    "created_at": "2025-02-09T15:29:05Z",
    "closed_at": "2025-02-14T00:46:47Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/jtang613/GhidrAssist/issues/15",
    "body": "It would be helpful for onboarding users for GhidrAssist to ship with some sane default values for API's and database paths. The extension should require minimal configuration (ie: ideally just API key).",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/15/comments",
    "author": "jtang613",
    "comments": [
      {
        "user": "bukowa",
        "created_at": "2025-02-09T16:36:10Z",
        "body": "It would be also very nice to provide `test` button in the api configuration menu."
      },
      {
        "user": "jtang613",
        "created_at": "2025-02-14T00:46:47Z",
        "body": "Fixed in 0.17.0"
      }
    ]
  },
  {
    "number": 9,
    "title": "Security enhancements to HTML rendering",
    "created_at": "2024-12-26T06:44:53Z",
    "closed_at": "2025-01-05T17:05:10Z",
    "labels": [],
    "url": "https://github.com/jtang613/GhidrAssist/pull/9",
    "body": "After some testing, I discovered that the `JEditorPane` will load external images if it's presented with a valid `img` tag, which poses some risks if the LLM (or someone MitM-ing the connection) decides to inject malicious images or tags into the markdown. To mitigate these risks, we can simply remove all `img` tags during HTML parsing, making it impossible for images defined in Markdown or raw HTML to be fetched or rendered at all. To let the user know that an image was removed, in place of the `img` tag we add the text \"[Image removed by GhidrAssist]\".\r\n\r\nBuilding on this, to mitigate the risk that the user might click a malicious link in the HTML we can also remove all external links. This may not be completely necessary, since I think the HyperlinkListener is blocking clicks of all unhandled links already, but just for good measure I modified the SecureParserDelegator to also strip out external links. I also added a notification when the user clicks on a link that isn't one of the thumbs-up / thumbs-down links, so they aren't confused if they happen to click on a link and nothing happens (the behavior before this patch).",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/9/comments",
    "author": "cyrozap",
    "comments": [
      {
        "user": "jtang613",
        "created_at": "2025-01-05T17:05:10Z",
        "body": "I believe that since GhidrAssist is now verifying TLS by default, that the question of MitM for 3rd party API's is largely mitigated. Additionally, I can also see use-cases where embedded images may be useful. I'm inclined to offload the handling of potentially malicious embeds to the renderer for now."
      }
    ]
  },
  {
    "number": 5,
    "title": "Enable edits to the table to be saved when clicking \"OK\"",
    "created_at": "2024-12-20T03:53:20Z",
    "closed_at": "2024-12-22T14:40:56Z",
    "labels": [],
    "url": "https://github.com/jtang613/GhidrAssist/pull/5",
    "body": "This makes it so it isn't necessary for the user to click the \"Edit\" button for each API provider the user wants to edit. Instead, they can simply edit the cells in the table directly and click \"OK\" to save all their changes at once.",
    "comments_url": "https://api.github.com/repos/jtang613/GhidrAssist/issues/5/comments",
    "author": "cyrozap",
    "comments": [
      {
        "user": "jtang613",
        "created_at": "2024-12-22T14:39:54Z",
        "body": "Good QOL addition. Thanks."
      }
    ]
  }
]