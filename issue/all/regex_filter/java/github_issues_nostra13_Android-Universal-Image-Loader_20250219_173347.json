[
  {
    "number": 830,
    "title": "Is it possible to put a file in cache without loading it?",
    "created_at": "2014-11-26T13:02:59Z",
    "closed_at": "2014-11-28T06:27:12Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/830",
    "body": "I would like to fetch a list of images from a server to be available on cache for later use.\nCurrently I use ImageLoader.getInstance().loadImage just recycle the resulted bitmap but obviously there is no need to actually load the image into memory.\n\nIs there a way to do so?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/830/comments",
    "author": "pinhassi",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-11-26T20:47:26Z",
        "body": "No way for now. I plan to add `preloadImage(...)` method for that but I can't say when it will be implemented.\n"
      },
      {
        "user": "pinhassi",
        "created_at": "2014-11-28T06:27:12Z",
        "body": "OK, Thanks.\n\nBTW - You're doing a great work! I just love this SDK!\n"
      },
      {
        "user": "sergiiz",
        "created_at": "2015-03-03T12:32:46Z",
        "body": "+1, it would be great to have such feature\n"
      }
    ]
  },
  {
    "number": 775,
    "title": "images in cache are not updating ",
    "created_at": "2014-10-08T08:18:07Z",
    "closed_at": "2015-04-29T13:21:59Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/775",
    "body": "``` java\npublic  ImageLoaderConfiguration getConfig(Context context){\n        ImageLoaderConfiguration config=new ImageLoaderConfiguration.Builder(context)\n        .threadPriority(Thread.NORM_PRIORITY-2).threadPoolSize(3).\n        diskCache(new UnlimitedDiscCache(_functions.getCacheDir()))\n\n        .build();\n\n        return config;\n    }\n\n    public  DisplayImageOptions getOptions(int res){\n    DisplayImageOptions options=new DisplayImageOptions.Builder().cacheOnDisk(true)\n                .showImageForEmptyUri(res).showImageOnFail(res)\n                .showImageOnLoading(res)\n                .cacheInMemory(false).bitmapConfig(Bitmap.Config.RGB_565).build();\n\n    return options;\n    }\n```\n\nthese are config  and display.\n\ni want if some images are updated on server then it should be updated on disk cache too on mobile.Please give me a solution.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/775/comments",
    "author": "aka-awasthi",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-11-21T15:01:31Z",
        "body": "You can use `limitedAge***Cache`s to refresh cached images periodically.\n"
      }
    ]
  },
  {
    "number": 766,
    "title": "Different image size for showImageForEmptyUri",
    "created_at": "2014-09-29T09:39:59Z",
    "closed_at": "2014-09-29T17:31:14Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/766",
    "body": "How can I set Different image size for showImageForEmptyUri ?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/766/comments",
    "author": "aser58",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-09-29T13:24:34Z",
        "body": "You can pass Drawable int o this method. So you can define a size.\n"
      },
      {
        "user": "aser58",
        "created_at": "2014-09-29T14:02:55Z",
        "body": "I indeed pass drawable to this method :\".showImageForEmptyUri(R.drawable.globe2)\"\n\nThe size of glob2 is 24x24 , but when it shown in the listview is strched to full all the frame of the imageView.\n\nHow I can define that when there is no Uri the image will not sreched ?\n\nThanks\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-09-29T14:51:33Z",
        "body": "I think `android:scaleType` parameter is responsible for that.\n"
      },
      {
        "user": "aser58",
        "created_at": "2014-09-29T17:08:47Z",
        "body": "It's WORK !!\n\nThank's a lot for your help\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-09-29T17:31:14Z",
        "body": "You're welcome.\n"
      }
    ]
  },
  {
    "number": 765,
    "title": "onProgressUpdate without disk cache",
    "created_at": "2014-09-29T04:46:56Z",
    "closed_at": "2014-12-12T20:07:53Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/765",
    "body": "How can I use the progress bar in onProgressUpdate without use use disk cache?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/765/comments",
    "author": "feliperce",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-09-29T07:02:32Z",
        "body": "No way.\n"
      },
      {
        "user": "feliperce",
        "created_at": "2014-09-29T07:23:46Z",
        "body": "The only reason why I don't use disk cache, is because the gallery of my application are secret, other aplications can't view my imagens...\n\nWhen Universal Image Loader use the disk cache, the cached images are visible to other applications (eg: Native app gallery of Android)?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-09-29T13:36:00Z",
        "body": "Ok, you shouldn't create cache directory on SD card (use device flash memory instead) and you should put `.nomedia` file into that directory to prevent searching images by system.\nYou can use `StorageUtils.getCacheDirectory(context, false)` to get needed cache folder and set it into configuration. Also you can clean cache when exit app.\n"
      }
    ]
  },
  {
    "number": 755,
    "title": "Check for image with specified url already in cache",
    "created_at": "2014-09-18T17:34:34Z",
    "closed_at": "2014-12-12T20:39:24Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/755",
    "body": "Could you add method for sync check image availability in cache?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/755/comments",
    "author": "dotcypress",
    "comments": [
      {
        "user": "29jitender",
        "created_at": "2014-09-18T21:13:39Z",
        "body": "Why don't you use DiskCacheUtils.findInCache or MemoryCacheUtils.findCachedBitmapsForImageUri \nto find if image with specified url exists. \n"
      }
    ]
  },
  {
    "number": 746,
    "title": "Handling concurrency",
    "created_at": "2014-09-10T09:58:25Z",
    "closed_at": "2014-09-20T11:27:27Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/746",
    "body": "> However, a ListView-specific behavior reveals a problem with our current implementation. Indeed, for memory efficiency reasons, ListView recycles the views that are displayed when the user scrolls. If one flings the list, a given ImageView object will be used many times. Each time it is displayed the ImageView correctly triggers an image download task, which will eventually change its image. So where is the problem? As with most parallel applications, the key issue is in the ordering. In our case, there's no guarantee that the download tasks will finish in the order in which they were started. The result is that the image finally displayed in the list may come from a previous item, which simply happened to have taken longer to download. This is not an issue if the images you download are bound once and for all to given ImageViews, but let's fix it for the common case where they are used in a list.\n\nI want to know if Android-Universal-Image-Loader considered this problem? 3Q.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/746/comments",
    "author": "jasonross",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-09-12T20:08:25Z",
        "body": "Yes, UIL handles View recycling and loading concurrency..\n"
      }
    ]
  },
  {
    "number": 735,
    "title": "what is the fast config",
    "created_at": "2014-08-29T09:13:56Z",
    "closed_at": "2014-12-12T20:35:05Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/735",
    "body": "what is the fast display config\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/735/comments",
    "author": "pangff",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-09-12T20:30:15Z",
        "body": "Default one.\n"
      }
    ]
  },
  {
    "number": 724,
    "title": "good day!",
    "created_at": "2014-08-16T07:04:40Z",
    "closed_at": "2014-08-26T18:35:09Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/724",
    "body": "is their a function in clustering images ? if so then I didnt read the docs well.\n\nthanks!\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/724/comments",
    "author": "spurdow",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-08-16T10:12:09Z",
        "body": "I don't understand your question. What is \"clustering images\"?\n"
      }
    ]
  },
  {
    "number": 716,
    "title": "How to catch exceptions?",
    "created_at": "2014-08-08T12:21:26Z",
    "closed_at": "2014-09-06T20:15:05Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/716",
    "body": "Hi, I want to catch all the exceptions from image loader:\n                try {\n                    ImageLoader.getInstance().displayImage(url, articleImage);\n                } catch (Exception e) {\n                    Log.d(\"MyAppp\", \"Image loading erroe bug882 e=\" + e.getMessage());\n                }\n\nbut this simply doesn't work, I have a lot of \n08-08 16:13:19.058: E/ImageLoader(16373): java.net.SocketTimeoutException\n\nand other exceptions in logcat.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/716/comments",
    "author": "Cher80",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-08-08T13:56:30Z",
        "body": "`displayImage()` doesn't throw any exception. It works asynchronously. If you want to disable ImageLoader's logs you can call `L.disableLogging()`.\n"
      }
    ]
  },
  {
    "number": 705,
    "title": "MemoryCache和DiskCache冲突问题",
    "created_at": "2014-07-24T08:21:27Z",
    "closed_at": "2014-09-06T20:09:23Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/705",
    "body": "最近用ImageLoader发现一个问题，也不能算是一个问题，只是不能满足我现在的需求。\n描述：如果加载图片的设置项，设置MemoryCache为true，同时也设置DiskCache为true，拜读了下源码，发现如果这两项都设置为true，实际上LoadAndDisplayTask会先将图片保存至SD卡，然后再从SD卡读取生成Bitmap，最后再显示到View。\n导致一个问题：从SD卡读取图片还是比较耗时，这样界面就会有明显的等待过程。不知道可不可以先将从网络获取的图片显示到View，同时异步将图片缓存至SD卡，供下次使用？\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/705/comments",
    "author": "HeroNeutral",
    "comments": [
      {
        "user": "btcrecover",
        "created_at": "2014-07-26T08:56:28Z",
        "body": "看来这个高大上的开源项目在中国遍地开花 .   点100个赞  ! \n"
      },
      {
        "user": "4happymeatball",
        "created_at": "2014-08-08T06:52:22Z",
        "body": "<translation> HeroNeutral said:\na question about ImageLoader\n\"description: if set both MemoryCache(true)&DiskCache(true), it will make LoadAndDisplayTask cache the pic to SDCard first, then decode to Bitmap, and finally display it in View.\nbecause load the pic in SDCard still cause delay, and perform wait in View. can it directly display the pic in View first,also asynchronous cache it in SDCard?\"\n\n渣翻译见谅\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-08-12T20:45:45Z",
        "body": "There is no such logic in UIL now. But you're always free to change sources and implement it yourself.\n"
      },
      {
        "user": "4happymeatball",
        "created_at": "2014-08-13T08:20:42Z",
        "body": "Translation about nostra13 replyed to HeroNeutral:\n“现在UIL还没有做这种逻辑实现。不过这（反正也）是个开源项目，你自己扩展实现一下不就成了。”\n\nThanks nostra :)\n"
      }
    ]
  },
  {
    "number": 702,
    "title": "Loading images progressively/interlaced ",
    "created_at": "2014-07-23T03:09:59Z",
    "closed_at": "2014-07-23T14:01:40Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/702",
    "body": "Hi, i need to load jpeg progressively,  like the #369 and i found you have closed the issue, so do you has any ideas to solve this? Thanks\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/702/comments",
    "author": "aizhang",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-23T14:01:40Z",
        "body": "No, I don't. That's why I closed that issue.\n"
      }
    ]
  },
  {
    "number": 698,
    "title": "Try to access freed memory？",
    "created_at": "2014-07-21T07:47:18Z",
    "closed_at": "2014-09-06T20:09:14Z",
    "labels": [
      "Problem",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/698",
    "body": "Sometimes some devices report this kind of exception, as I clearMemoryCache on every activity destory. So is it good to clearMemoryCache in every activity, or I 'd better do it when exit?\n\n NDK error: Try to access freed memory.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/698/comments",
    "author": "imoblife",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-21T08:45:52Z",
        "body": "> So is it good to clearMemoryCache in every activity, or I 'd better do it when exit?\n\nIt depends. If you use the same images in different activities then it's better to clear memory cache on app exit.\n"
      }
    ]
  },
  {
    "number": 693,
    "title": "generarte event on URL redirection",
    "created_at": "2014-07-18T18:30:45Z",
    "closed_at": "2014-09-06T20:09:04Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/693",
    "body": "hi,\n\ni am trying to find out when the url redirected and to what address,\nthere are an event onLoadingComplete, \nhow ever the url in there is the original, and not the redirected,\n\nis it possible to obtain the redirected url ?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/693/comments",
    "author": "ilia987",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-18T20:48:20Z",
        "body": "You may override `BaseImageDownloader` to control URI redirection and maybe keep URL mapping (original <-> redirected) somewhere but it's not possible to return it in `onLoadingComplete()`.\n"
      }
    ]
  },
  {
    "number": 678,
    "title": "image for notifycation ",
    "created_at": "2014-07-09T07:59:57Z",
    "closed_at": "2014-07-15T17:23:54Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/678",
    "body": "please.\nHow can the ImageLoader be used to load images on an notification?\nBecause the displayImage method takes an ImageView as parameter and in a widget we have to use RemoteViews.\nThanks.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/678/comments",
    "author": "kekedaine",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-13T13:54:37Z",
        "body": "You can wrap RemoteViews into `ImageAware` interface and pass it into `displayImage(...)` method.\nOr you can use `loadImage(...)` method with callback.\n"
      },
      {
        "user": "kekedaine",
        "created_at": "2014-07-15T12:59:29Z",
        "body": "thank u very very much.\n"
      }
    ]
  },
  {
    "number": 676,
    "title": "Recommended way to handle no network/airplane mode situations?",
    "created_at": "2014-07-04T13:11:47Z",
    "closed_at": "2014-07-19T20:15:37Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/676",
    "body": "If we know we're not on the network is there a graceful way to handle that ? i.e. Automatically queue all download requests until network is restored? Or do people just currently let the request fail?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/676/comments",
    "author": "megamattron",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-07T21:44:44Z",
        "body": "UIL doesn't manage any \"no network queue\", developer should handle network state changes and re-query images (call `displayImage(...)`) when network is restored..\n"
      }
    ]
  },
  {
    "number": 669,
    "title": "Can PauseOnScrollListener() support load more item?",
    "created_at": "2014-06-29T13:58:59Z",
    "closed_at": "2014-07-19T20:15:49Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/669",
    "body": "Dear nostra13,\nThank you for wonderful library. But I have an issue : When I set PauseOnScrollListener() for ListView, I can't detect event when my ListView end of list to load more elements. Can you help me to resolve this issues?\nThanks in advanced :)\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/669/comments",
    "author": "tqnst",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-08T18:19:19Z",
        "body": "If you mean that you want to set own `OnScrollListener` to `ListView` then you can pass it into `PauseOnScrollListener`'s constructor.\n"
      }
    ]
  },
  {
    "number": 663,
    "title": "How to check if imageUri is in cache",
    "created_at": "2014-06-25T08:14:17Z",
    "closed_at": "2014-07-01T13:30:26Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/663",
    "body": "It would be nice to have a function that checks, if an image(imageUri) already is stored in cache\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/663/comments",
    "author": "Urkman",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-06-25T09:42:42Z",
        "body": "Why don't you use `DiskCacheUtils` and `MemoryCacheUtils`?\n"
      },
      {
        "user": "Urkman",
        "created_at": "2014-06-25T10:25:04Z",
        "body": "I'm all new to UIL. Where can I find example code for this?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-25T10:46:18Z",
        "body": "``` java\nFile imageFile = DiskCacheUtils.findInCache(imageUri, ImageLoader.getInstance().getDiskCache());\nif (imageFile != null) {\n    ...\n}\n\nList<Bitmap> bmps = MemoryCacheUtils.findCachedBitmapsForImageUri(imageUri, ImageLoader.getInstance().getMemoryCache());\nif (!bmps.isEmpty()) {\n    ...\n}\n```\n"
      },
      {
        "user": "Chuckytuh",
        "created_at": "2014-07-01T13:27:48Z",
        "body": "I was about to open a question related to this one but I might just jump in and ask here...what about if I just want the image to be download only if the image changed on the server-side and there's no local data on cache..\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-07-01T13:30:26Z",
        "body": "You're welcome.\n"
      }
    ]
  },
  {
    "number": 655,
    "title": "how disable image caching for sd card images",
    "created_at": "2014-06-13T10:35:15Z",
    "closed_at": "2014-06-13T22:22:47Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/655",
    "body": "how disable image caching for sd card images\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/655/comments",
    "author": "balasaheb143",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-06-13T22:22:47Z",
        "body": "`DisplayImageOptions.cacheOnDisk(false)`\n"
      }
    ]
  },
  {
    "number": 640,
    "title": "[Enhancement] Is it easy to add a new method to load app icons?",
    "created_at": "2014-06-05T03:13:16Z",
    "closed_at": "2014-06-11T21:37:04Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/640",
    "body": "",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/640/comments",
    "author": "imoblife",
    "comments": [
      {
        "user": "imoblife",
        "created_at": "2014-06-05T05:08:36Z",
        "body": "``` java\n    protected InputStream getStreamFromPackage(String imageUri, Object extra)\n            /*throws NameNotFoundException */{\n        InputStream is = null;\n        try {\n            String pkgName = context.getPackageName();!Scheme.PACKAGE.crop(imageUri);\n            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(\n                    pkgName, 1);\n            Drawable d = ai.loadIcon(context.getPackageManager());\n            BitmapDrawable bitDw = ((BitmapDrawable) d);\n            Bitmap bitmap = bitDw.getBitmap();\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n            byte[] imageInByte = stream.toByteArray();\n            System.out.println(\"........length......\" + imageInByte);\n            ByteArrayInputStream bis = new ByteArrayInputStream(imageInByte);\n            is  = new ContentLengthInputStream(bis, imageInByte.length);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return is;\n    }\n```\n\nIs this a good way to do this?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-05T12:55:48Z",
        "body": "There is no need to add this method into the library. You can create own `ImageDownloader` (like one below) and set it into configuration.\n\n``` java\npublic class CustomImageDownloader extends BaseImageDownloader {\n\n    private static final String PACKAGE_SCHEME = \"...\";\n    private static final String PACKAGE_PREFIX = PACKAGE_SCHEME + \"://\";\n\n    public CustomImageDownloader(Context context) {\n        super(context);\n    }\n\n    public CustomImageDownloader(Context context, int connectTimeout, int readTimeout) {\n        super(context, connectTimeout, readTimeout);\n    }\n    protected InputStream getStreamFromOtherSource(String imageUri, Object extra) throws IOException {\n        if (imageUri.startsWith(PACKAGE_PREFIX)) {\n            InputStream is = null;\n            try {\n                String pkgName = imageUri.substring(PACKAGE_PREFIX.length());\n                ApplicationInfo ai = context.getPackageManager().getApplicationInfo(pkgName, 1);\n                BitmapDrawable d = (BitmapDrawable) ai.loadIcon(context.getPackageManager());\n                Bitmap bitmap = d.getBitmap();\n\n                ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n                byte[] imageInByte = stream.toByteArray();\n                ByteArrayInputStream bis = new ByteArrayInputStream(imageInByte);\n                is = new ContentLengthInputStream(bis, imageInByte.length);\n                bitmap.recycle();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return is;\n        }\n        return super.getStreamFromOtherSource(imageUri, extra);\n    }\n}\n```\n"
      },
      {
        "user": "imoblife",
        "created_at": "2014-06-07T09:02:00Z",
        "body": "protected InputStream getStreamFromPackage(String imageUri, Object extra)\n            throws IOException {\n        if (imageUri.startsWith(PACKAGE_PREFIX)) {\n            ...\n        }\n        return super.getStreamFromOtherSource(imageUri, extra);\n    }\n\nIt's a good idea and really works for me, thank you. \n(P.S. Is this effective to avoid OOM Exception when loading icon from packages? as icon-drawable have no \"recycle()\" method to release memory, so I have no idea what to do with it, )\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-11T21:37:04Z",
        "body": "I updated my post. Added `bitmap.recycle();` at the end.\n"
      },
      {
        "user": "DanLatimer",
        "created_at": "2014-07-07T14:18:13Z",
        "body": "Thanks for this post, it was exactly what I needed! One enhancement that I made was to switch the encoding from JPEG to PNG so that the icons that have an alpha layer won't be surrounded in a black box.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-07-07T19:42:55Z",
        "body": "You're welcome.\n"
      }
    ]
  },
  {
    "number": 639,
    "title": " ImageLoadingProgressListener's method get total = -1 when  using 3G network to download image file from network",
    "created_at": "2014-06-04T06:51:36Z",
    "closed_at": "2014-06-17T11:20:57Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/639",
    "body": "UIL version is 1.9.1\nwhen  using 3G network to download image file from network, ImageLoadingProgressListener's method get total = -1, so progress will show you error percentage.\n\n``` java\nnew ImageLoadingProgressListener() {\n                @Override\n                public void onProgressUpdate(String imageUri, View view, int current, int total) {\n                    int percent = (int)(100*(float)current/(float)total);\n                    // here, when using 3G network, total == -1;\n                    if (total > 0){\n                        percentLoding.setText(percent+\"%\");\n                    }\n                    else{\n                        percentLoding.setText(FileSizeUtil.FormetFileSize(current, \"#\"));\n                    }\n                }\n            }\n```\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/639/comments",
    "author": "yanlusu",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-06-04T20:07:37Z",
        "body": "`total` parameter depends on \"Content-Length\" header from HTTP response so it seems the header is missing. A default value will be assigned in this case to `total` since 1.9.3 but now you should check it yourself and handle it somehow.\n"
      },
      {
        "user": "yanlusu",
        "created_at": "2014-06-17T11:20:57Z",
        "body": "3ks for your reply, I have updated to 1.9.3, it's ok now.\n:)\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-17T11:38:54Z",
        "body": "1.9.3 isn't released yet.\n"
      },
      {
        "user": "yanlusu",
        "created_at": "2014-06-18T14:02:44Z",
        "body": "ooo, I update to 1.9.2, but it seems ok under 3G network , en?\nI tested same code using 1.9.2 and lower version, under the same 3G network , 1.9.2 is ok, but lower version is bad.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-18T15:07:47Z",
        "body": "It's strange :) 1.9.2 doesn't have any fixes about it.\n"
      }
    ]
  },
  {
    "number": 635,
    "title": "Decode the hashed image file name",
    "created_at": "2014-05-30T10:27:03Z",
    "closed_at": "2014-05-31T22:30:06Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/635",
    "body": "Hi,\n\nI am loading cached images from the App cache dir using UIL. These images are from different domain URLs. When I want to show the images from Cache disk, I would need to filter images to show only those that are downloaded from specific domain URLs.\n\nIs there a way to decode the file name to get back the original URL from where it was originated from and then prepare the array to have only those related cached images?\n\nWelcome other workarounds as well to solve my requirement with UIL.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/635/comments",
    "author": "athirukk",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-30T11:31:52Z",
        "body": "Hi,\nThere is no way to decode hashed file names into original URLs. But you can implement your own `FileNameGenerator` and set it into configuration.\n"
      }
    ]
  },
  {
    "number": 624,
    "title": "Store the image to local",
    "created_at": "2014-05-23T08:07:52Z",
    "closed_at": "2014-07-13T17:56:36Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/624",
    "body": "Does this library have a method to store the image (from Internet) to sdcard? If has, what is it?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/624/comments",
    "author": "risingsun03",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-23T20:28:39Z",
        "body": "No, the library doesn't have such method. You can use `loadImage(...)` method which loads image to SD card and decodes it into Bitmap.\n"
      },
      {
        "user": "jonschmidt",
        "created_at": "2014-05-31T13:34:48Z",
        "body": "I actually have a similar need. There seems to be some limitations when using remoteViews, where the transaction buffer is rather limited, and too many subsequent updates using `setImageViewBitmap` will result in the notification or widget to stop updating completely. \n\nApparently you can fix this by using `setImageViewUri` instead. The problem is we have no way of getting the bitmap Uri on disk out of the ImageLoader.\n\nAny idea for a workaround? As for now I am likely going to have to fork the library and provide the disk Uri in the loadImage callback.\n\nEdit: I just realized my best chance is to use the FileNameGenerator and cache directory to construct a uri.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-07-13T17:55:39Z",
        "body": "To build Uri for cached image file:\n\n``` java\nFile imageFile = DiskCacheUtils.findInCache(imageUri, ImageLoader.getInstance().getDiskCache());\nif (imageFile != null) {\n    String fileUri = Scheme.FILE.wrap(imageFile.getAbsolutePath());\n    ...\n}\n```\n"
      }
    ]
  },
  {
    "number": 622,
    "title": "thank you ",
    "created_at": "2014-05-22T16:52:00Z",
    "closed_at": "2014-05-23T20:27:00Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/622",
    "body": "First My English is not good.I hope you can  understand  what I mean .thank you for your open source  code. I'm a newbie for andriod. i just a chinese student. You can provide some kind of learning method for android?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/622/comments",
    "author": "yangxuefeng1992",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-23T20:27:00Z",
        "body": "Nope, I'm not a teacher.\n"
      }
    ]
  },
  {
    "number": 621,
    "title": "About the image path in sdcard",
    "created_at": "2014-05-22T09:34:26Z",
    "closed_at": "2014-05-23T20:14:23Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/621",
    "body": "Hello, nostra13:\nThanks for your library, it's very great. \nRight now, I have an issue. When I display an image from Internet, I save it in sdcard via setting .cacheOnDisc(true). But How can I get the image file path in the sdcard?  Did the image actually save in sdcard as a file?\nThank you very much!\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/621/comments",
    "author": "risingsun03",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-23T20:14:10Z",
        "body": "Hello.\n\n``` java\nFile imageFile = DiscCacheUtil.findInCache(imageUri, imageLoader.getDiscCache());\nif (imageFile != null) {\n    ... // imageFile.getAbsolutePath()\n}\n```\n"
      }
    ]
  },
  {
    "number": 620,
    "title": "Load center of a large Image in a little Imageview",
    "created_at": "2014-05-21T09:53:57Z",
    "closed_at": "2014-05-21T20:55:13Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/620",
    "body": "In Imageloader  1.8.4 it was possible to load a center part of a large Image in a Image view. It took the center of the image automatically, and drawned it in the imageview.\n\nNow I would like to do an update to the newest Version of ImageLoader:\nIn ImageLoader Version 1.9.1 the upper region of the Large Image will be cropped and filled in the ImageViev (not the center region).\n\nMy method for loading a image content (imagePath) into an ImageView (imageview):\n\n```\npublic static void setImageFile(String imagePath, final ImageView imageview) {\n        final BitmapFactory.Options optionss = new BitmapFactory.Options();\n        optionss.inSampleSize = 2;\n        imageview.setScaleType(ScaleType.CENTER_CROP);\n        final DisplayImageOptions displayImageOptions = new DisplayImageOptions.Builder().\n                resetViewBeforeLoading(false).\n                imageScaleType(ImageScaleType.EXACTLY_STRETCHED).\n                bitmapConfig(Bitmap.Config.RGB_565).\n                decodingOptions(optionss).              \n                displayer(new RoundedBitmapDisplayer(20)). // Define a Rounded Displayer\n                considerExifParams(true). // define if image is portrait or landscape\n                build(); \n\n        imageview.setVisibility(View.VISIBLE);\n        try {\n            ImageLoader.getInstance().displayImage(imagePath, \n                        imageview, \n                       displayImageOptions);\n        } catch (final Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n\nThe ImageView has the attribute android:scaleType=\"centerCrop\"\nHow can I provoke, that the picture in the imagePath will be cropped in its center and draw in the imageview?\n\nIt seems to be impossible? Any recommendations ?\n\nThanks \nLukas\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/620/comments",
    "author": "Schlud",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-21T20:55:13Z",
        "body": "`RoundedBitmapDisplayer` was changed (see ChangeLog).\nLook into Java docs for `RoundedBitmapDisplayer`. It seems you need to use 3rd party lib for rounding images. Or you can just copy `RoundedBitmapDisplayer` class from 1.8.4 into your project  and use it as displayer.\n"
      },
      {
        "user": "Schlud",
        "created_at": "2015-06-25T11:10:11Z",
        "body": "I tried your advice to take the RoundedBitmapDisplayer from the obsolete Version 1.8.4.\nWhen I use this class, I have to use also the Class BItmapDisplayer, Which is a central class for al kind of displaying images.\nI would like to Input this feature Request:\nCould you make a further ImageScale Type for example. \nImageScaleType.CENTER_CROP\nwhich will enable to display the center of the image by cropping the size of the imageView from the imageToShow. Cause backporting the old classes will be defacto a Version downgrade to 1.8.4.\nI think many users would appreciate a feature like this. \nBut anyway thank you very much for your great work!\n"
      }
    ]
  },
  {
    "number": 615,
    "title": "Auto retry download image?",
    "created_at": "2014-05-16T02:43:30Z",
    "closed_at": "2014-05-18T23:37:37Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/615",
    "body": "First, will UIL auto retry download image if IOException happens， load  it one more time?  \nIf yes，will it be more sensible on\n`onLoadingFailed(String imageUri, View view, FailReason failReason)` about adding http response code and retry count ? Just using for statistics in detail.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/615/comments",
    "author": "yiranshaxiao",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-18T23:37:37Z",
        "body": "No? UIL doesn't auto-retry loading.\n"
      }
    ]
  },
  {
    "number": 602,
    "title": "IoUtils.copyStream should invoke os.flush?",
    "created_at": "2014-05-07T09:38:41Z",
    "closed_at": "2014-05-07T21:37:16Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/602",
    "body": "if os instanceOf BufferedOutputStream,without invoke os.flush,no IOException will be thrown if there is really a IOException?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/602/comments",
    "author": "ljian",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-07T21:35:05Z",
        "body": "`os.flush()` is executed automatically periodically (when buffer is full).\nBut there is possibility IOException is hidden at the end. I'll fix it.\n"
      }
    ]
  },
  {
    "number": 598,
    "title": "LimitedAgeDiscCache for different display task",
    "created_at": "2014-05-05T09:24:00Z",
    "closed_at": "2014-05-07T20:54:06Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/598",
    "body": "Hello,\nI have a small question. Is it possible that each display task has a different lifetime for the cache ?  Currently, the lifetime of the cache is configured to be the same for every display task.\nThanks.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/598/comments",
    "author": "vic4ever",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-07T20:54:06Z",
        "body": "Hello,\nNo, current version doesn't provide such possibility.\n"
      }
    ]
  },
  {
    "number": 575,
    "title": "Thumbnail Image for large Image",
    "created_at": "2014-03-30T15:47:57Z",
    "closed_at": "2014-06-04T22:05:20Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/575",
    "body": "I have a gridview that will load huge images. When loading to grid I can load small Image s by setting up \n.cacheOnDisc(true)\nand \n.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)\n\nThis will create an image of 408x306 in disk cache. But when I select an image in the view and open the image in a viewpager the cache image will be used, But what if I want to load the image that fit the display size?\n(// default = device screen dimensions)\n\nIs there any way to achieve this?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/575/comments",
    "author": "hrandika",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-30T21:07:27Z",
        "body": "I think the only way is to delete\n`.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)`\nSo images of original size will be cached in disc.\n"
      },
      {
        "user": "hrandika",
        "created_at": "2014-03-31T01:06:55Z",
        "body": "That is true but I want to keep the 408x306 image for grid view and full image to the view pager.\nWhat I have done is I have not used UIL in the view pager. Instead I use bitmap loader to load the large image. Is this the only way to achieve this?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-31T20:02:17Z",
        "body": "I think the only way to do it is to have 2 instances of ImageLoader. Create the second singleton by extending ImageLoader. The first ImageLoader will have `.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)` options and the second won't. So you can use each ImageLoader in appropriate case.\n\nThese ImageLoaders will have different disk caches and different memory caches but you can make they use common memory cache if you want.\n"
      },
      {
        "user": "hrandika",
        "created_at": "2014-04-01T08:38:14Z",
        "body": "It worked. Solved\n"
      }
    ]
  },
  {
    "number": 569,
    "title": "one uncertainty on single inheritance in Universal-Image-Loader",
    "created_at": "2014-03-19T06:46:49Z",
    "closed_at": "2014-03-19T12:50:16Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/569",
    "body": "Recently, I was reading the source codes of Universal-Image-Loader, And I found an interesting question on inheritance in Java. We know that the multiple inheritance is not allowed in Java. Java designers replaced the concept of multiple inheritance by that of interface. In the release 1.9.1 of Universal-Image-Loader, the interface called BlockingDeque in the package of com.nostra13.universalimageloader.core.assist.deque extends two parent class, BlockingQueue and Deque, but Eclipse does't show any wrong information about it. So I am confused about it. Does someone else ever notice this??\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/569/comments",
    "author": "bytebeats",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-19T07:47:49Z",
        "body": "`BlockingQueue` and `BlockingQueue` are interfaces. Java allow \"multiple inheritance\" of interfaces, i.e. class can implement multiple interfaces and interface can extend multiple interfaces.\n"
      },
      {
        "user": "bytebeats",
        "created_at": "2014-03-19T09:09:28Z",
        "body": "Oh, thanks for answers, I have learnt a lot from this question. Meanwhile, thanks for your great works on UIL~\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-19T12:50:16Z",
        "body": "You're welcome.\n"
      }
    ]
  },
  {
    "number": 568,
    "title": "Error handling when image loading fails for certain links (Google changed their scheme)",
    "created_at": "2014-03-18T20:45:17Z",
    "closed_at": "2014-07-09T20:48:24Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/568",
    "body": "So Google changed policy recently where the traditional /s2/photos/profile/{userid} links no longer work. Is there any simple way to catch and handle such errors? Typically I want to catch just these kind of errors to rewrite the logic in the app and change the URL to the new required scheme (using the Google Plus REST API) to get the a new link (and replace the original link with the new one). I'm not seeing anything in the docs, and I'm too lazy to read through the source right now.. ;-)\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/568/comments",
    "author": "mariusk",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-19T17:26:51Z",
        "body": "I think you can extend `BaseImageDownloader`, override `getStreamFromNetwork()` and process your case.\n"
      }
    ]
  },
  {
    "number": 561,
    "title": "how i display image from data/data/pakagename/image name",
    "created_at": "2014-03-06T13:58:49Z",
    "closed_at": "2014-07-13T17:57:45Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/561",
    "body": "how i display image from data/data/pakagename/image name\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/561/comments",
    "author": "balasaheb143",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-13T17:57:45Z",
        "body": "`imageLoader.displayImage(\"file://data/data/pakagename/image\", imageView);`\n"
      }
    ]
  },
  {
    "number": 555,
    "title": "Obtain dimension for bitmap from ImageView Drawable",
    "created_at": "2014-02-28T22:35:20Z",
    "closed_at": "2014-03-09T09:21:21Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/555",
    "body": "Hi,\n\nI have an ImageView defined as follows in my layout\n\n```\n    <ImageView\n        android:id=\"@+id/camera_icon1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:contentDescription=\"@string/new_report_image_description\"\n        android:scaleType=\"centerCrop\"\n        android:src=\"@drawable/camera_icon_list_view\" \n        android:padding=\"1dp\"\n        android:background=\"#000000\"/>\n```\n\nWhen I then use the UIL to resize a camera image to put into the ImageView it scales the bitmap incorrectly as the getWidth and getHeight of the ImageView return 0.\n\nIf it was to however use\n\n```\n    int targetWidth=imageView.getDrawable().getIntrinsicWidth();\n        int targetHeight=imageView.getDrawable().getIntrinsicHeight();\n```\n\nWould it be possible for you to add this behaviour in as it then saves me having to explicity set sizes.  Android automatically picks the correct src thumbnail for the device based on the screen resolution.\n\nMany thanks\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/555/comments",
    "author": "juckky",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-08T20:09:27Z",
        "body": "If I understand you correctly you want me to add this code:\n\n``` java\n int targetWidth=imageView.getDrawable().getIntrinsicWidth();\n        int targetHeight=imageView.getDrawable().getIntrinsicHeight();\n```\n\ninto `ImageViewAware`.\nBut `imageView.getDrawable()` returns null at first time. Maybe it's not null in your case but it can happens in common case.\nBut you can extend `ImageViewAware` class, override `getWidth()` and `getHeight()` methods (look into the sources of these methods) and add your logic to consider intrinsic width/height.\n\nThen you should wrap your ImageView into your new class to pass it into `dispalyimage(...)` method:\n\n``` java\nMyimageViewAware imageAware = new MyimageViewAware(imageView);\nimageLoader.displayImage(imageUri, imageAware);\n```\n"
      },
      {
        "user": "juckky",
        "created_at": "2014-03-09T08:05:36Z",
        "body": "Hi,\n\nI extended ImageViewAware as follows to give me the behaviour I needed.\n\npackage com.android.eyespy.helper;\n\nimport android.widget.ImageView;\n\nimport com.nostra13.universalimageloader.core.imageaware.ImageViewAware;\n\npublic class ImageViewDrawableAware extends ImageViewAware {\npublic ImageViewDrawableAware(ImageView imageView) {\n             super(imageView);\n}\n\n@Override\npublic int getWidth() {\n        int width = imageViewRef.get().getDrawable()!=null ? imageViewRef.get().getDrawable().getIntrinsicWidth() : super.getWidth();\n        return width;\n}\n@Override\npublic int getHeight() {\n             int height = imageViewRef.get().getDrawable()!=null ? imageViewRef.get().getDrawable().getIntrinsicHeight() :          super.getHeight();\n     return height;\n}\n\n}\n\nThanks\n\nJustin\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-09T09:21:21Z",
        "body": "Ok, nice.\n"
      }
    ]
  },
  {
    "number": 532,
    "title": "Calls overlap each other",
    "created_at": "2014-02-10T09:51:52Z",
    "closed_at": "2014-06-04T22:12:18Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/532",
    "body": "When I changed the focus of a ListView about 10 times, then current activity would crash. This condition happened repeatedly. \nAnd the log said below:\n\n```\n02-10 17:43:57.260: E/Trace(23192): error opening trace file: No such file or directory (2)\n02-10 17:43:57.560: W/ImageLoader(23192): discCache(), discCacheSize() and discCacheFileCount calls overlap each other\n```\n\nAnd my configuration is:\n\n``` java\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(\n                getApplicationContext())\n                // .taskExecutor(AsyncTask.THREAD_POOL_EXECUTOR)\n                // .taskExecutorForCachedImages(AsyncTask.THREAD_POOL_EXECUTOR)\n                .threadPoolSize(5).threadPriority(Thread.NORM_PRIORITY - 2)\n                .denyCacheImageMultipleSizesInMemory()\n//              .memoryCache(new WeakMemoryCache())\n                .memoryCacheSize(2 * 1024 * 1024)\n//              .discCache(new UnlimitedDiscCache(cacheDir))\n                .discCacheSize(10 * 1024 * 1024)\n                .discCacheFileCount(50)\n                .enableLogging().build();\n```\n\nCould you tell me why?? And How could I correct it??\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/532/comments",
    "author": "bytebeats",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-02-14T23:01:13Z",
        "body": "You can't limit disc cache by size and by file count simultaneously.  So you should leave only one of options.\n"
      }
    ]
  },
  {
    "number": 530,
    "title": "downloading progess",
    "created_at": "2014-02-08T06:58:29Z",
    "closed_at": "2014-02-08T22:22:09Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/530",
    "body": "could you add it.i only found save to disc process handler\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/530/comments",
    "author": "wenfuli",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-02-08T22:22:09Z",
        "body": "It's exactly a downloading progress listener. I won't provide any other.\n"
      }
    ]
  },
  {
    "number": 523,
    "title": "Several disk cache stores",
    "created_at": "2014-01-21T12:42:11Z",
    "closed_at": "2014-07-09T20:34:44Z",
    "labels": [
      "Feature",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/523",
    "body": "Hello.\n\nThanks for a great library project.\nI have a question.\n\nCan I use several different caches at the same imageLoader instance?\n\nFor example, \n- For calendar I want use age limit disk cache with specify folder /cache/calendar/*\n- For list items of categories I want use UnlimitedDiscCache with folder /cache/categories/\n\nWill be cool if a library have option such as DisplayImageOptions when i set what disc engine use, or default if not set.\n\nnew DisplayImageOptions.Builder().discCache(...)\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/523/comments",
    "author": "omihaz",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-26T16:24:19Z",
        "body": "> Can I use several different caches at the same imageLoader instance?\n\nNo, but if you can define disc cache which should be used by image URL then you can implement your own DiscCache (`DiscCacheAware`) which will be handle this.\n"
      }
    ]
  },
  {
    "number": 522,
    "title": "inScaled  = false is ignored",
    "created_at": "2014-01-21T11:32:19Z",
    "closed_at": "2014-02-01T22:25:43Z",
    "labels": [
      "Problem",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/522",
    "body": "I want load bitmap without any scaling but inScaled   is ignored.\n\n``` java\nBitmapFactory.Options options = new BitmapFactory.Options();\n    // for quick memory release\n    options.inPurgeable = true;\n    options.inInputShareable = true;\n    //don't scale\n    **options.inScaled  = false;**\n    options.inDensity = 0;\n    options.inTargetDensity = 0;\n    options.inSampleSize =1;\n    options.inScreenDensity = 0;\n    // ...\n    DisplayImageOptions.Builder b = new DisplayImageOptions.Builder();\n    **b.imageScaleType(ImageScaleType.NONE);**\n    b.decodingOptions(options);\n    b.cacheInMemory(false);\n\n    b.cacheOnDisc(true);\n    b.showImageForEmptyUri(R.drawable.publication_page_full);\n    b.showImageOnFail(R.drawable.publication_page_full);\n\n    // ...\n    imgOptions = b.build();\n```\n\nI also try: \n\n``` java\nImageSize targetSize = new ImageSize(120, 80); // result Bitmap will be fit to this size\n imageLoader.loadImage(imageUri, targetSize, displayOptions, listner); \n```\n\nbut i dosn't work:/ \n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/522/comments",
    "author": "flamaniac",
    "comments": [
      {
        "user": "flamaniac",
        "created_at": "2014-01-24T09:26:12Z",
        "body": "Anybody solve this?\n"
      },
      {
        "user": "flamaniac",
        "created_at": "2014-01-24T10:42:46Z",
        "body": "decodingOptions are considered by Android-Universal-Image-Loader?\n"
      },
      {
        "user": "flamaniac",
        "created_at": "2014-01-24T12:07:38Z",
        "body": "I faoud that new Options are created and this why ImageSize is wrong.\nBaseImage Decoder:\n\n``` java\nprotected ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, ImageDecodingInfo decodingInfo)\n            throws IOException {\n        Options options = new Options();\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeStream(imageStream, null, options);\n\n        ExifInfo exif;\n        String imageUri = decodingInfo.getImageUri();\n        if (decodingInfo.shouldConsiderExifParams() && canDefineExifParams(imageUri, options.outMimeType)) {\n            exif = defineExifOrientation(imageUri);\n        } else {\n            exif = new ExifInfo();\n        }\n        return new ImageFileInfo(new ImageSize(options.outWidth, options.outHeight, exif.rotation), exif);\n    }\n```\n\nand you use this image size i decode mathod (line 77)\nsometime returned size is -1,-1  and after calculate scale is 0. This causes decode error.\n"
      },
      {
        "user": "flamaniac",
        "created_at": "2014-01-24T12:59:19Z",
        "body": "My fix:\n\n``` java\nprotected ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, ImageDecodingInfo decodingInfo)\n            throws IOException {\n\n        Options options = new Options();\n        options.inJustDecodeBounds = true;\n\n        //clone\n        Options userOptions = decodingInfo.getDecodingOptions();\n        if(userOptions!= null){\n            options.inDensity = userOptions.inDensity;\n            options.inDither = userOptions.inDither;\n            options.inInputShareable = userOptions.inInputShareable;\n            options.inPurgeable = userOptions.inPurgeable;\n            options.inScaled = userOptions.inScaled;\n            options.inScreenDensity = userOptions.inScreenDensity;\n            options.inTargetDensity = userOptions.inTargetDensity;\n        }\n\n        BitmapFactory.decodeStream(imageStream, null, options);\n\n        ExifInfo exif;\n        String imageUri = decodingInfo.getImageUri();\n        if (decodingInfo.shouldConsiderExifParams() && canDefineExifParams(imageUri, options.outMimeType)) {\n            exif = defineExifOrientation(imageUri);\n        } else {\n            exif = new ExifInfo();\n        }\n        return new ImageFileInfo(new ImageSize(options.outWidth, options.outHeight, exif.rotation), exif);\n    }\n```\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-02-01T22:25:43Z",
        "body": "If you read Java docs of `DisplayImageOptions.decodingOptions(...)` method then you can see answer for your question. Your fix should work for you.\n"
      },
      {
        "user": "flamaniac",
        "created_at": "2014-02-01T23:22:02Z",
        "body": "Yes, i have read.\n- <b>NOTE:</b> {@link Options#inSampleSize} of incoming options will <b>NOT</b> be considered. Library\n- calculate the most appropriate sample size itself according yo {@link #imageScaleType(ImageScaleType)}\n- options.<br />\n  but what about inScaled  = false? I think that some option to turn off auto scaling is needed.\n  Thank you for answer. Great and useful lib!\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-02-02T09:24:08Z",
        "body": "I'm not sure how `inScaled` option works, its documentation isn't clear for me.\n"
      }
    ]
  },
  {
    "number": 517,
    "title": "static method to cancel all requests for a given Context",
    "created_at": "2014-01-20T13:58:43Z",
    "closed_at": "2014-01-26T11:35:56Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/517",
    "body": "Is there a static method that cancels all requests associated with a certain Context?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/517/comments",
    "author": "jbweimar",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-26T11:35:56Z",
        "body": "`ImageLoader.stop()`\n"
      }
    ]
  },
  {
    "number": 515,
    "title": "Refresh Cache",
    "created_at": "2014-01-18T06:12:07Z",
    "closed_at": "2014-05-25T17:40:58Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/515",
    "body": "I know caching feature is nicely support by this library, but in my implementation i need to replace the old cache with the latest one downloaded from the same url. So, everytime i call imageLoader.displayImage(), if cache exist it will display the cache but at the same time it also downloading from the image url to replace it with the latest because the image from the same url is changing frequently (eg: from CCTV images).\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/515/comments",
    "author": "lorensiuswlt",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-26T13:16:17Z",
        "body": "Ok, you can implement it.\n"
      },
      {
        "user": "ansman",
        "created_at": "2014-04-08T19:14:36Z",
        "body": "Any thoughts on how to implement this?\n\nI started writing an util that always uses the disc cache but then always tries to download it anyway.\nThe problem was putting stuff in the cache once it's been fetched.\n\nJust writing the bitmap to the file turned out to be pretty complex.\n"
      },
      {
        "user": "CsabaMiomni",
        "created_at": "2017-07-03T18:04:27Z",
        "body": "Thx for closing this without leaving any tips. :("
      }
    ]
  },
  {
    "number": 509,
    "title": "Support [Desktop] java",
    "created_at": "2014-01-13T11:54:55Z",
    "closed_at": "2014-01-19T19:49:56Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/509",
    "body": "Hi I think to use Universal-Image-Loader with Java Desktop Application on JavaFX\nIt would be very nice to use you great library not only with Android\n\nCould you please find such support?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/509/comments",
    "author": "foobnix",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-19T19:49:56Z",
        "body": "Hi,\nNo I'm not going to implement desktop support on Java FX, I don't have any experience in it.\n"
      }
    ]
  },
  {
    "number": 506,
    "title": "Rounded image view with no border",
    "created_at": "2014-01-10T16:38:46Z",
    "closed_at": "2014-03-12T21:06:08Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/506",
    "body": "Hi, i successfully used your library which i must say is a great one.\nI am using RoundedBitmapDisplayer class to give my image a radius . Is it possible to create a border around the image using your library ?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/506/comments",
    "author": "rahulr4",
    "comments": [
      {
        "user": "bagusflyer",
        "created_at": "2014-03-12T08:15:54Z",
        "body": "You find a solution already?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-12T21:06:08Z",
        "body": "No, UIL doesn't provide this possibility.\n"
      },
      {
        "user": "gian1200",
        "created_at": "2014-03-13T02:34:23Z",
        "body": "I made that implementation. @nostra13, it would be great if you agree to add this class, or at least tell me which changes should I need to make in order to get your approval.\n\nThis class can create a circle with (or without) a border with a solid color from an image.\nBy default, it use the center of the image as the center of the circle and create the biggest possible circle where \"radius \\* 2 == min(width, height)\" of the image, without a border.\n\n``` java\n\npackage com.nostra13.universalimageloader.core.display;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.Config;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Paint.Style;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.util.Log;\n\nimport com.nostra13.universalimageloader.core.assist.LoadedFrom;\nimport com.nostra13.universalimageloader.core.imageaware.ImageAware;\nimport com.nostra13.universalimageloader.core.imageaware.ImageViewAware;\n\npublic class CircleBitmapDisplayer implements BitmapDisplayer {\n    private float radius, centerX, centerY, borderWidth = 0;\n    private int borderColor = Color.BLACK;\n    private boolean biggestCircle = false, isCentered = true;\n\n    public CircleBitmapDisplayer() {\n        this.biggestCircle = true;\n    }\n\n    public CircleBitmapDisplayer(float centerX, float centerY) {\n        this();\n        this.centerX = centerX;\n        this.centerY = centerY;\n        this.isCentered = false;\n    }\n\n    public CircleBitmapDisplayer(float borderWidth, int borderColor) {\n        this();\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n    }\n\n    public CircleBitmapDisplayer(float radius) {\n        this.radius = radius;\n    }\n\n    public CircleBitmapDisplayer(float radius, float borderWidth,\n            int borderColor) {\n        this(radius);\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n    }\n\n    public CircleBitmapDisplayer(float radius, float centerX, float centerY) {\n        this(radius);\n        this.centerX = centerX;\n        this.centerY = centerY;\n        this.isCentered = false;\n    }\n\n    public CircleBitmapDisplayer(float radius, float centerX, float centerY,\n            float borderWidth, int borderColor) {\n        this(radius, centerX, centerY);\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n    }\n\n    @Override\n    public void display(Bitmap bitmap, ImageAware imageAware,\n            LoadedFrom loadedFrom) {\n        if (!(imageAware instanceof ImageViewAware)) {\n            throw new IllegalArgumentException(\n                    \"ImageAware should wrap ImageView. ImageViewAware is expected.\");\n        }\n        int ivWidth = imageAware.getWidth();\n        int ivHeight = imageAware.getHeight();\n        int bmWidth = bitmap.getWidth();\n        int bmHeight = bitmap.getHeight();\n\n        if (isCentered) {\n            centerX = (float) ivWidth / 2;\n            centerY = (float) ivHeight / 2;\n        }\n        if (biggestCircle) {\n            if (isCentered) {\n                radius = ivWidth < ivHeight ? (float) ivWidth / 2\n                        : (float) ivHeight / 2;\n            } else {\n                radius = Math.min(centerX < ivWidth - centerX ? centerX\n                        : ivWidth - centerX,\n                        centerY < ivHeight - centerY ? centerX : ivHeight\n                                - centerY);\n            }\n        }\n        Rect srcRect;\n        if (bmWidth < bmHeight) {\n            srcRect = new Rect(0, (bmHeight - bmWidth) / 2, bmWidth, bmWidth\n                    + (bmHeight - bmWidth) / 2);\n        } else {\n            srcRect = new Rect((bmWidth - bmHeight) / 2, 0, bmHeight\n                    + (bmWidth - bmHeight) / 2, bmHeight);\n        }\n        RectF destRectF = new RectF(0, 0, ivWidth, ivHeight);\n        imageAware.setImageBitmap(getCircledBitmap(bitmap, centerX, centerY,\n                radius, srcRect, destRectF, ivWidth, ivHeight, borderWidth,\n                borderColor));\n\n    }\n\n    public static Bitmap getCircledBitmap(Bitmap bitmap, float centerX,\n            float centerY, float radius, Rect srcRect, RectF destRectF,\n            int width, int height, float borderWidth, int borderColor) {\n\n        Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);\n        Canvas canvas = new Canvas(output);\n        final Paint paint = new Paint();\n        paint.setAntiAlias(true);\n\n        // if 1 pixel is missing, do: radius - borderWidth + 1\n        canvas.drawCircle(centerX, centerY, radius - borderWidth, paint);\n        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n        canvas.drawBitmap(bitmap, srcRect, destRectF, paint);\n        if (0 < borderWidth) {\n            paint.setXfermode(null);\n            paint.setStyle(Style.STROKE);\n            paint.setColor(borderColor);\n            paint.setStrokeWidth(borderWidth);\n            canvas.drawCircle(centerX, centerY, radius - borderWidth / 2, paint);\n        }\n        return output;\n    }\n}\n\n```\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-15T20:54:23Z",
        "body": "Why do you want this displayer to be included into the library?\n"
      },
      {
        "user": "gian1200",
        "created_at": "2014-03-17T02:21:24Z",
        "body": "There are some developers (on Stackoverflow and inside the issue list - like @rahulr4 and @bagusflyer) who uses your library and want \"Rounded images\" (including myself). Some of them want a border too. Instead of reinventing the wheel, it would be great for us to have the implementation ready to just focus our minds in our apps.\n\nI haven't test it, but I think your implementation of  `RoundedBitmapDisplayer` should be able to make \"rounded images\" (circles). The 2 problems I see are that it doesn't support borders and `drawCircle` should perform better than`setRectToRect` in this special case scenario.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-17T20:55:19Z",
        "body": "Ok, I got it, but the primary goal of UIL is loading and caching images. Different manipulations with Bitmap can be done externally and I don't want to make the lib more heavy by including different decorator-classes. I think decorator `RoundedImageDisplayer` is enough for UIL (maybe even it's redundant). Other features can be implemented externally.\nMaybe if `CircleBitmapDisplayer` is highly polished and tested I will include it. But now I'm focused on core logic of library and have no time for testing and fixing auxiliary classes like `CircleBitmapDisplayer`.\n"
      }
    ]
  },
  {
    "number": 499,
    "title": "Is it possible to pause/resume image loading..?",
    "created_at": "2014-01-07T11:00:25Z",
    "closed_at": "2014-01-07T11:36:12Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/499",
    "body": "",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/499/comments",
    "author": "bhaumiknsoni",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-07T11:12:26Z",
        "body": "`ImageLoader.pause()` and `ImageLoader.resume()`. But it pauses/resumes all loadings.\n"
      },
      {
        "user": "bhaumiknsoni",
        "created_at": "2014-01-07T11:36:12Z",
        "body": "awesome...!\nthanks for the quick reply.\n"
      },
      {
        "user": "SagarPanwala",
        "created_at": "2016-12-12T03:49:32Z",
        "body": "How to pause and resume loading for current listview or view items/ children ?"
      }
    ]
  },
  {
    "number": 497,
    "title": "[Q] How to resize an image with a constant height while keeping the aspect ratio?",
    "created_at": "2014-01-06T19:48:43Z",
    "closed_at": "2014-05-25T17:29:49Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/497",
    "body": "Hello,\n\nI'm using uil (heck, I'm _loving_ it) and I wonder how to achieve the following use case.\nI have an horizontal layout that holds 3 images from unknown dimensions.\nI want my layout to be exactly 128dp high and my images being resized while keeping the aspect ratio.\n\nSo the layout could be like this \n\n```\n+-----------+------------------+--------+\n|           |                  |        | \n|           |                  |        | \n|   Img1    |       Img2       |  Img3  | \n|           |                  |        | \n|           |                  |        | \n+-----------+------------------+--------+\n```\n\nAll the three images are from different aspect ratios: I wanted the `ImageView`to be resized accordingly to my constraint (the height is 128dp) by uil.\nThe trick of course is that I don't know what are the image sizes before they are downloaded by uil.\n\nIs there a way to achieve that using the existing listeners or the `android:width=\"wrap_content\"` (the wrap_content doesn't work at the moment) ?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/497/comments",
    "author": "PerfectCarl",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-05-25T17:29:49Z",
        "body": "I have no answer.\n"
      }
    ]
  },
  {
    "number": 494,
    "title": "Access mimeType",
    "created_at": "2013-12-30T04:02:41Z",
    "closed_at": "2014-02-13T22:15:37Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/494",
    "body": "I tried passing in decodeOptions to retrieve outMimeType, but the library makes a copy, so the out properties don't make it to my reference. \n\nWhichever way, I need to also determine the mimetype of an image. \n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/494/comments",
    "author": "seanmonstar",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-01T22:28:49Z",
        "body": "I think the only way to access mime-type is to override `BaseImageDecoder` and set it into configuration.\nMime type is available in `defineImageSizeAndRotation(InputStream imageStream, ImageDecodingInfo decodingInfo)` method.\n"
      }
    ]
  },
  {
    "number": 491,
    "title": "[Q] Why there are warnings about image size?",
    "created_at": "2013-12-26T03:54:21Z",
    "closed_at": "2013-12-26T22:49:18Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/491",
    "body": "My app is build with support library v4,  appcompat v7, and latest UIL from maven. I load and display my image by using `ImageLoader.displayImage(...)`. Everything looks fine, except the countless warning like this:\n\n> W/IamgeLoader: height = ...\n> W/IamgeLoader: width = ...\n\nI tried to set the layout of the view does not seem to be helpful. Is there anything wrong with my code, or with my image?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/491/comments",
    "author": "davidshen84",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-12-26T22:49:18Z",
        "body": "This logs got in release 1.9.0 by mistake. They'll be deleted in next version.\n"
      }
    ]
  },
  {
    "number": 458,
    "title": "Files already stored on the sdcard are being cached",
    "created_at": "2013-11-21T18:24:04Z",
    "closed_at": "2013-11-22T18:25:06Z",
    "labels": [
      "Feature",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/458",
    "body": "If I try to load a photo that is already stored on the sdcard (file:// prefix), I have noticed that it also caches the photo resulting in the photo being stored twice.\nOur app loads hundreds of photos, some local and some remote so it would be great if there was a way to disable this behavior but still allow for remote image caching.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/458/comments",
    "author": "rohanpatel2602",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-11-21T23:00:09Z",
        "body": "It's cached because you call `.cacheOnDisc(true)`.If you want to prevent this then call `.cacheOnDisc(false)`.\n"
      },
      {
        "user": "rohanpatel2602",
        "created_at": "2013-11-21T23:03:00Z",
        "body": "Right but cacheOnDisc(false) would prevent remote images from being cached as well\nIs there a way to stop local photos from caching, but continue caching remote images?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-11-22T08:21:29Z",
        "body": "I understand your question and the answer is \"no at this moment\". You should decide \"to cache or not to cache\" by yourself :) I'll think about this feature.\n"
      },
      {
        "user": "rohanpatel2602",
        "created_at": "2013-11-22T18:25:04Z",
        "body": "Thank you for your prompt response, it is much appreciated!\n"
      }
    ]
  },
  {
    "number": 455,
    "title": "delete the specified cache",
    "created_at": "2013-11-20T03:34:17Z",
    "closed_at": "2013-11-21T22:34:33Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/455",
    "body": "When I want to delete the specified cache, I wrote this code:\n\n``` java\n    public void clearCache(String uri, ImageView imageView) {\n        ImageSize targetSize = ImageSizeUtils.defineTargetSizeForView(\n                new ImageViewAware(imageView), getMaxImageSize());\n        String memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);\n\n        imageLoader.getMemoryCache().remove(memoryCacheKey);\n\n        File file = imageLoader.getDiscCache().get(uri);\n        if (file != null) {\n            file.delete();\n        }\n    }\n\n    ImageSize getMaxImageSize() {\n        DisplayMetrics displayMetrics = context.getResources()\n                .getDisplayMetrics();\n\n        int width = maxImageWidthForMemoryCache;\n        if (width <= 0) {\n            width = displayMetrics.widthPixels;\n        }\n        int height = maxImageHeightForMemoryCache;\n        if (height <= 0) {\n            height = displayMetrics.heightPixels;\n        }\n        return new ImageSize(width, height);\n    }\n```\n\nCould you provide a similar interface in \"ImageLoader.java\"??\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/455/comments",
    "author": "nbtstatx",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-11-20T22:30:23Z",
        "body": "`MemoryCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getMemoryCache())`?\n`DiscCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getDiscCache())`?\n"
      },
      {
        "user": "nbtstatx",
        "created_at": "2013-11-21T02:11:27Z",
        "body": "But imageUri is not a key in \"MemoryCache\".So I have to get the key by this code:\n\nImageSize targetSize = ImageSizeUtils.defineTargetSizeForView(\n                new ImageViewAware(imageView), getMaxImageSize());\nString memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);\n\nThen :\n\nMemoryCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getMemoryCache())\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-11-21T06:49:22Z",
        "body": "`MemoryCacheUtil.removeFromCache()` removes all bitmaps in memory which keys are relates to incoming image Uri.\n"
      },
      {
        "user": "nbtstatx",
        "created_at": "2013-11-21T07:15:11Z",
        "body": "Oh,I see \"startsWith\".\nThanks.\n"
      }
    ]
  },
  {
    "number": 445,
    "title": "load from sd card",
    "created_at": "2013-11-06T00:01:33Z",
    "closed_at": "2013-11-17T20:05:37Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/445",
    "body": "If i want to load images from sd card, what should I do? thank you\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/445/comments",
    "author": "emredurmuss",
    "comments": [
      {
        "user": "lizijin",
        "created_at": "2013-11-11T01:56:36Z",
        "body": "```\nImageLoader.getInstance().displayImage(ImageDownloader.Scheme.FILE.wrap(\"your path\"));\n```\n"
      },
      {
        "user": "vfishv",
        "created_at": "2014-06-07T10:13:40Z",
        "body": "Good！\n"
      }
    ]
  },
  {
    "number": 425,
    "title": "Is it possible to create limited disk cache size with size more than 4GB?",
    "created_at": "2013-10-14T15:44:24Z",
    "closed_at": "2013-10-20T22:17:28Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/425",
    "body": "Integer.MaxValue is 2^31-1 which is nearly 4GB, but current devices can have much more memory\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/425/comments",
    "author": "TarasGordienko",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-10-20T22:17:28Z",
        "body": "Answer for your question: \"No\" for current implementation. Do you need disc cache size more than 4Gb? It's strange.\n"
      }
    ]
  },
  {
    "number": 417,
    "title": " Object instantiateItem not calling",
    "created_at": "2013-10-07T08:10:53Z",
    "closed_at": "2013-11-17T21:36:56Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/417",
    "body": "`public Object instantiateItem(View view, int position)` method not call when i swap back from first to zero postion\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/417/comments",
    "author": "balasaheb143",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-10-09T19:46:48Z",
        "body": "Because zero item has already instantiated.\n"
      }
    ]
  },
  {
    "number": 402,
    "title": "Question: Can I add custom progress bar for image loading?",
    "created_at": "2013-09-13T18:05:51Z",
    "closed_at": "2013-11-17T22:57:48Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/402",
    "body": "Is there a way to show custom progress bar while the image is loading?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/402/comments",
    "author": "nandhini0412",
    "comments": [
      {
        "user": "silentnuke-old",
        "created_at": "2013-09-16T19:13:30Z",
        "body": "You can create `ImageLoadingListener` and show your custom progressbar\n\n``` java\nimageLoader.displayImage(imageUri, imageView, displayOptions, new ImageLoadingListener() {\n        @Override\n        public void onLoadingStarted(String imageUri, View view) {\n            ...\n        }\n        @Override\n        public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n            ...\n        }\n        @Override\n        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n            ...\n        }\n        @Override\n        public void onLoadingCancelled(String imageUri, View view) {\n            ...\n        }\n});\n```\n"
      },
      {
        "user": "rockybean",
        "created_at": "2013-09-17T02:39:13Z",
        "body": "Is there any way to get the actual loading bytes and total bytes with which I could show the progress bar with precise percent?\n"
      },
      {
        "user": "silentnuke-old",
        "created_at": "2013-09-18T06:05:30Z",
        "body": "No.\n"
      }
    ]
  },
  {
    "number": 401,
    "title": "Add ability to use differents instances of ImageLoader with differents configurations",
    "created_at": "2013-09-13T12:58:11Z",
    "closed_at": "2013-11-17T22:58:47Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/401",
    "body": "some of my adatpers use the BaseImageDownloader, but one needs a different ImageDownloader.\n\ncurrently it's impossible because there is only one instance of ImageLoader.\n\neither add the ability to specify an ImageDownloader with displayImage(), or the ability to instantiate multiple ImageLoaders\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/401/comments",
    "author": "loki666",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-11-17T22:58:47Z",
        "body": "You can extend `ImageLoader` class so you can create one more instance of your new class.\n"
      }
    ]
  },
  {
    "number": 366,
    "title": "Cache size of picture",
    "created_at": "2013-08-13T14:37:39Z",
    "closed_at": "2013-12-01T11:03:17Z",
    "labels": [
      "Problem",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/366",
    "body": "Hello,\n\nI have a small question. How is it that a photo 39.3 KB (40,258 bytes) makes 302.8ko (302683 bytes), once caching?\nMy code is:\n\n``` java\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)\n.discCacheExtraOptions(480, 800, CompressFormat.PNG, 75, null)\n.discCache(new UnlimitedDiscCache(cacheDir)) // default\n.discCacheFileNameGenerator(new HashCodeFileNameGenerator())\n.build();\nImageLoader.getInstance().init(config);\n```\n\nand \n\n``` java\nImageLoader l = ImageLoader.getInstance();\nDisplayImageOptions options = new DisplayImageOptions.Builder()\n            .showImageForEmptyUri(R.drawable.ic_empty)\n            .showImageOnFail(R.drawable.ic_error)\n            .cacheOnDisc(true)\n            .cacheInMemory(false)\n            .displayer(new SimpleBitmapDisplayer())\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            //.imageScaleType(ImageScaleType.IN_SAMPLE_INT)\n            .imageScaleType(ImageScaleType.EXACTLY)\n            .resetViewBeforeLoading(true)\n            .build();\n```\n\nMore with this configuration I happen to have OutOfMemory on some phones (Galaxy S2). But I have followed the recommendations you give.\n\nThank you in advance\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/366/comments",
    "author": "thomasl76",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-11-20T23:02:22Z",
        "body": "It seems `.discCacheExtraOptions(480, 800, CompressFormat.PNG, 75, null)` makes that.\n"
      }
    ]
  },
  {
    "number": 361,
    "title": "Does the library check for an updated image?",
    "created_at": "2013-08-10T13:59:14Z",
    "closed_at": "2013-11-20T23:05:12Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/361",
    "body": "If caching is enabled, does the library check the URL for an updated image or does it always use the cached image?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/361/comments",
    "author": "easycheese",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-08-10T20:49:45Z",
        "body": "It always use a cached image. You can use `LimitedAge***Cache` caches to force periodical updates.\n"
      },
      {
        "user": "hielkehoeve",
        "created_at": "2013-08-13T15:52:44Z",
        "body": "It would be nice if it is possible to use both LimitedAge**_Cache and *_LimitedDiscCache together. In fact it would be nice to use be able to use multiple of the same interface (DiscCacheAware and MemoryCacheAware) together. \n"
      }
    ]
  },
  {
    "number": 350,
    "title": "Why the change of   new disk cache api  ?",
    "created_at": "2013-08-02T06:59:28Z",
    "closed_at": "2013-08-06T08:35:32Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/350",
    "body": "Faster?  \n\nI like this program very much ! \n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/350/comments",
    "author": "pingzhangJiang",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-08-02T19:07:10Z",
        "body": "To make library more flexible.\n"
      },
      {
        "user": "pingzhangJiang",
        "created_at": "2013-08-03T04:41:52Z",
        "body": "Will not reduce the performance?  \n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-08-05T19:29:30Z",
        "body": "I think it won't. I'll test performance before applying new API.\n"
      },
      {
        "user": "pingzhangJiang",
        "created_at": "2013-08-06T06:51:26Z",
        "body": "Thanks  \n"
      }
    ]
  },
  {
    "number": 347,
    "title": "Can't Support FTP download",
    "created_at": "2013-08-01T07:40:53Z",
    "closed_at": "2013-12-01T11:02:46Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/347",
    "body": "When I download a bitmap with the FTP  url , I get lots of ' support log'.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/347/comments",
    "author": "vhikd",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-08-01T18:27:34Z",
        "body": "So? UIL doesn't support loading images by FTP.\nYou can override `BaseImageDownloader.getStreamFromOtherSource(String imageUri, Object extra)` and implement it.\n"
      }
    ]
  },
  {
    "number": 346,
    "title": "Display image as flipboard ",
    "created_at": "2013-08-01T04:31:30Z",
    "closed_at": "2013-12-01T11:02:36Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/346",
    "body": "Hi, \nI want to use imageloader as flipboard:\nThat is:\nWhen display new image, before display, old image have been disable (while place). I want to display new image as flipboard.\nPlease help me !\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/346/comments",
    "author": "hoangpn412",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-08-01T18:29:46Z",
        "body": "Hi, I don't understand your problem.\n"
      },
      {
        "user": "JackDanyels",
        "created_at": "2013-08-08T14:19:12Z",
        "body": "I guess he wants to animate the display image process, maybe a difficult version of fadeindisplayer with custom flip-animation would do it. I'm afraid that i have no time to think about a solution. \n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-12-01T11:02:36Z",
        "body": "Me too. I think you need to use `BitmapDisplayer` somehow.\n"
      }
    ]
  },
  {
    "number": 345,
    "title": "How to disable the error logs?",
    "created_at": "2013-07-28T02:19:03Z",
    "closed_at": "2013-12-01T11:01:22Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/345",
    "body": "In developer environment, there are so many error logs. Because I know the reason, so  I want to disable the log out. Is there a switch option or some else?\nThanks for the perfect project.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/345/comments",
    "author": "flappy-sheep",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-28T08:29:14Z",
        "body": "`L.disableLogging()`\n"
      },
      {
        "user": "flappy-sheep",
        "created_at": "2013-07-30T00:35:58Z",
        "body": "In the ImageLoaderConfiguration? The function disableLogging cannot be found. I tried in ImageLoaderConfiguration, and DisplayImageOptions.\n"
      },
      {
        "user": "flappy-sheep",
        "created_at": "2013-07-30T00:37:27Z",
        "body": "enableLogging can be found. But no disableLogging. I view the source code, the default loggingEnabled value is false, enableLogging will open it. So do not use enableLogging will not show the log. Is it right? But now, so many logs.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-07-30T09:10:34Z",
        "body": "`L.disableLogging()`\n`L` is a logger (class) of ImageLoader. Just call `L.disableLogging()` to disable all ImageLoader's logs.\n"
      },
      {
        "user": "shi-314",
        "created_at": "2014-01-31T15:14:14Z",
        "body": "Well L is not a meaningfull class name for a logger but thanks.\n"
      },
      {
        "user": "Bluestart83",
        "created_at": "2014-09-23T06:53:41Z",
        "body": "It's now deprecated, use:\nL.writeLogs(false);\n"
      },
      {
        "user": "americosfacebook",
        "created_at": "2016-02-10T08:05:57Z",
        "body": "```\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())\n                .threadPriority(Thread.NORM_PRIORITY - 2).denyCacheImageMultipleSizesInMemory()\n                .diskCacheFileNameGenerator(new Md5FileNameGenerator()).tasksProcessingOrder(QueueProcessingType.LIFO)\n//                .writeDebugLogs() // Remove for release app\n                .build();\n```\n\nby comment this line:-  .writeDebugLogs() \n"
      },
      {
        "user": "initialjie",
        "created_at": "2016-03-14T06:27:52Z",
        "body": "@Bluestart83 \nThanks, your answer help me a lot.\n"
      }
    ]
  },
  {
    "number": 340,
    "title": "Custom headers to HTTP request",
    "created_at": "2013-07-25T07:13:54Z",
    "closed_at": "2013-08-01T18:52:16Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/340",
    "body": "Hi\n\nI would like to use your library to download images from social networks. However for example Twitter requires additional Authorization header to http requests. \n\nI looked at the possibility to extend BaseImageDownloader however it can be specified only for global singleton config. But I need to add different headers to different requests. \n\nPlease add such functionality. Thanks in advance. \n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/340/comments",
    "author": "agrebnev",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-25T10:00:06Z",
        "body": "Hi,\n\nYou can use \"extra for downloader\" for that purpose.\n\n``` java\nMap<String, String> headers = ...\nDisplayImageOptions options = new DisplayImageOptions.Builder()\n        ...\n        .extraForDownloader(headers)\n        ...\n        .build();\n```\n\nThen create own `ImageDownloader` which handles these headers:\n\n``` java\npublic class CustomImageDownaloder extends BaseImageDownloader {\n\n    public CustomImageDownaloder(Context context) {\n        super(context);\n    }\n\n    public CustomImageDownaloder(Context context, int connectTimeout, int readTimeout) {\n        super(context, connectTimeout, readTimeout);\n    }\n\n    @Override\n    protected HttpURLConnection createConnection(String url, Object extra) throws IOException {\n        HttpURLConnection conn = super.createConnection(url, extra);\n        Map<String, String> headers = (Map<String, String>) extra;\n        if (headers != null) {\n            for (Map.Entry<String, String> header : headers.entrySet()) {\n                conn.setRequestProperty(header.getKey(), header.getValue());\n            }\n        }\n        return conn;\n    }\n}\n```\n\nAnd set it to the configuration:\n\n``` java\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)\n        ...\n        .imageDownloader(new CustomImageDownloader(context))\n        ...\n        .build();\nImageLoader.getInstance().init(config);\n```\n"
      },
      {
        "user": "agrebnev",
        "created_at": "2013-07-25T10:26:34Z",
        "body": "Thanks. I will try.\n"
      },
      {
        "user": "ispgian",
        "created_at": "2013-12-11T04:39:25Z",
        "body": "Hi,\n\nI have made CustomImageDownloader and set to ImageLoaderConfiguration but createConnection method in the CustomImageDownloader is not getting called at all I have put log in that method and checked.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-12-11T20:40:08Z",
        "body": "Maybe your images are cached already.\n"
      },
      {
        "user": "alarkirikal",
        "created_at": "2013-12-12T11:15:35Z",
        "body": "I get\n\nThe method createConnection(String, Object) is undefined for the type BaseImageDownloader\n\nUsing the library version 1.8.4\n\nEDIT: Seems that updating to a newer version resolved this issue - ill leave this here for others to find in case they're stuck in older versions as well.\n"
      },
      {
        "user": "ankuraltimetrik",
        "created_at": "2014-12-04T12:55:32Z",
        "body": "How can we add basic authentication version 1.9 above\n"
      },
      {
        "user": "patelv77",
        "created_at": "2016-03-29T16:59:54Z",
        "body": "I am facing same issue - createConnection method in CustomImageDownaloder class not call.\n"
      },
      {
        "user": "liruizhuang",
        "created_at": "2016-04-15T01:49:59Z",
        "body": "befor call ImageLoader.getInstance().init(config),you should call ImageLoader.getInstance().destroy()  first.\n"
      }
    ]
  },
  {
    "number": 339,
    "title": "Why use WeakReference?",
    "created_at": "2013-07-22T06:54:20Z",
    "closed_at": "2013-07-23T02:58:44Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/339",
    "body": "in the ImageLoadingInfo\n\nWhether it will lead to frequent GC?  use softReference?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/339/comments",
    "author": "zondaOf2012",
    "comments": [
      {
        "user": "gordonpro",
        "created_at": "2013-07-22T08:22:52Z",
        "body": "more weak! to protect softReference<Hanlder>\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-07-22T20:37:22Z",
        "body": "I need the weakest reference for ImageView. So `WeakReference` is the most appropriate type.\nSoft reference is collected by GC only when free memory is low.\n"
      },
      {
        "user": "zondaOf2012",
        "created_at": "2013-07-23T02:58:40Z",
        "body": "Thank you!\n"
      }
    ]
  },
  {
    "number": 333,
    "title": "about Webp",
    "created_at": "2013-07-16T10:49:10Z",
    "closed_at": "2013-12-01T11:01:13Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/333",
    "body": "is Webp support for this amazing lib\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/333/comments",
    "author": "zktc5418",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-28T10:02:32Z",
        "body": "I don't understand a question (if any here).\n"
      },
      {
        "user": "zeon",
        "created_at": "2015-01-12T08:59:19Z",
        "body": "I think the question is Does universal image loader support webp image format.\n"
      }
    ]
  },
  {
    "number": 328,
    "title": "Add ability to set a default image load animation",
    "created_at": "2013-07-09T00:47:41Z",
    "closed_at": "2013-07-09T15:44:50Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/328",
    "body": "Currently the only way I have found to set an animation is to pass an anonymous class in on each `displayImage(...)` call (sample code in #35).\n\nIt would be great to be able to set a default `ImageLoadingListener`. Loading the animation on every `getView()` call is bad practice, the animation should be cached. This addition would make this much easier. You also wouldn't have to add an anonymous class to every `displayImage(...)` call in your app.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/328/comments",
    "author": "austynmahoney",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-09T14:22:10Z",
        "body": "Try `DisplayImageOptions.displayer(BitmapDisplayer)`\n"
      },
      {
        "user": "austynmahoney",
        "created_at": "2013-07-09T15:31:00Z",
        "body": "That works great, thanks! I suggest updating #35 to reflect this, as that is what shows up when you Google \"UIL animation\".\n"
      }
    ]
  },
  {
    "number": 323,
    "title": "RoundedBitmapDisplayer display image in wrong size",
    "created_at": "2013-07-03T05:57:36Z",
    "closed_at": "2013-08-01T18:47:20Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/323",
    "body": "Hi, Sergey.\n\nWhen DisplayImageOptions includes stub image and RoundedBitmapDisplayer, the size of image with the uri is set to the size of stub image.\n\nIn the RoundedBitmapDisplayer.display() method, the second parameter imageView is the same instance which shows stub image for a while. \nAnd RoundedBitmapDisplayer.roundCorners() re-scale bitmap and calculate radius depends on the dimensions of imageView which are width and height of stub image.\n\nSince that calculation depends on dimensions of stub image, RoundedBitmapDisplayer shows the image an user try to display in wrong size, even I set wrap_content, or so. \n\nIn the documentation in RoundedBitmapDisplayer, you recommended that imageView has defined width and height. \nI think this is due to calculation I mentioned above.\n\nIs it neccesary to know ImageView's dimension? \nI guess it is enough to make a rounded corners with a radius, (x_radius, y_radius, if you need).\n\nThanks you so much for amazing image loader.~\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/323/comments",
    "author": "yoonjechoi",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-03T10:07:49Z",
        "body": "Hi,\n\n> In the documentation in RoundedBitmapDisplayer, you recommended that imageView has defined width and height. \n>  I think this is due to calculation I mentioned above.\n\nRight you are. If ImageView hasn't defined dimensions you can have some problems with displaying rounded images (I guess you already know them).\n"
      }
    ]
  },
  {
    "number": 321,
    "title": "Non existing remote files",
    "created_at": "2013-07-01T15:31:27Z",
    "closed_at": "2013-07-10T21:29:47Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/321",
    "body": "Maybe checking ifthe remote file exists before downloading could get rid of this timeout.\n\n```\n07-01 18:17:13.000: E/ImageLoader(21188): java.net.SocketTimeoutException\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.net.PlainSocketImpl.read(PlainSocketImpl.java:491)\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.net.PlainSocketImpl.access$000(PlainSocketImpl.java:46)\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.net.PlainSocketImpl$PlainSocketInputStream.read(PlainSocketImpl.java:240)\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.io.InputStream.read(InputStream.java:163)\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.io.BufferedInputStream.fillbuf(BufferedInputStream.java:142)\n07-01 18:17:13.000: E/ImageLoader(21188):   at java.io.BufferedInputStream.read(BufferedInputStream.java:227)\n07-01 18:17:13.000: E/ImageLoader(21188):   at libcore.io.Streams.readAsciiLine(Streams.java:201)\n07-01 18:17:13.000: E/ImageLoader(21188):   at libcore.net.http.HttpEngine.readResponseHeaders(HttpEngine.java:547)\n07-01 18:17:13.000: E/ImageLoader(21188):   at libcore.net.http.HttpEngine.readResponse(HttpEngine.java:787)\n07-01 18:17:13.000: E/ImageLoader(21188):   at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:274)\n07-01 18:17:13.000: E/ImageLoader(21188):   at libcore.net.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:479)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStreamFromNetwork(BaseImageDownloader.java:113)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStream(BaseImageDownloader.java:84)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.getImageStream(BaseImageDecoder.java:84)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode(BaseImageDecoder.java:73)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage(LoadAndDisplayImageTask.java:290)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap(LoadAndDisplayImageTask.java:250)\n07-01 18:17:13.000: E/ImageLoader(21188):   at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run(LoadAndDisplayImageTask.java:131)\n```\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/321/comments",
    "author": "pvegh",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-03T16:52:22Z",
        "body": "How can I do it? It depends on server response. If it responds with 404, then you'll see `FileNotFoundException` immediately. `SocketTimeoutException` means server responds nothing during timeout.\n"
      }
    ]
  },
  {
    "number": 318,
    "title": "Loading Same Images even URLS Are changes and getting warning: Try Re-Init ImageLoader using ImageLoader. Destroy First",
    "created_at": "2013-06-27T00:32:46Z",
    "closed_at": "2013-08-01T18:45:29Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/318",
    "body": "Where can Re-Config or use ImageLoader. Destroy to make changed in URL So that new images can be fetched in ImageGridView ? At the moment Im keep getting same images even there is a change in URL String Arrays.  \nIn my ImageGrid view I added:\n\n``` java\n@override \npublic void onStop(){\n\nImageLoader.Destroy();\n\n}\n```\n\nto resolve re-init warning, But its not working. Keep loading same images. Please help!\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/318/comments",
    "author": "ideadx",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-06-27T08:48:29Z",
        "body": "Sorry but I don't understand you.\n"
      }
    ]
  },
  {
    "number": 309,
    "title": "How can I make the pre processed image to be saved in the disk cache?",
    "created_at": "2013-06-13T13:38:00Z",
    "closed_at": "2013-06-28T21:16:10Z",
    "labels": [
      "Feature",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/309",
    "body": "I've been using the your library and I'm really liking it. Congratulations for your job.\n\nI have one question: is it possible to cache in disk the pre processed images? I've read the code and I've seen that the plain image is cached in disk and the pre processed image is cached in the memory. So, if the image is no more in memory cache, it loads the image from disk and do the pre processing again. I'd like the pre processing of the images to be done just the first time, when it loads the image from the web. Reading the code of LoadAndDisplayImageTask, I've not found a way to do this.\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/309/comments",
    "author": "fernandocamargoai",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-06-13T14:29:33Z",
        "body": "No way to do it without changing of sources. I'll consider this feature to add it in next releases.\n"
      },
      {
        "user": "fernandocamargoai",
        "created_at": "2013-06-17T20:11:00Z",
        "body": "Ok, thank you. I'll fork the repository to make this change and try to make it configurable. If I think it's good enough, I'll make a pull request for you to decide if it worth accepting.\n"
      }
    ]
  },
  {
    "number": 298,
    "title": "How to manage the taskProcessingOrder",
    "created_at": "2013-06-04T09:50:20Z",
    "closed_at": "2013-06-28T21:15:00Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/298",
    "body": "I set the `taskProcessingOrder(QueueProcessingType.FIFO)`  \n\nWhen the imageview scroll out of the screen and the image isn't downloaded yet, I want to cancle the image which is scrolled out of the screen in the task queue.\n\nHow can I do that?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/298/comments",
    "author": "westlinkin",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-06-04T09:59:05Z",
        "body": "If you use view re-using in your adapter (you should do it) then UIL cancel tasks itself.\n"
      },
      {
        "user": "mecid",
        "created_at": "2013-06-14T14:20:21Z",
        "body": "@nostra13 I am using view re-using and holder pattern.\nDoes LIFO ordering make a sense?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-06-17T06:19:52Z",
        "body": "@mecid Make sense for what?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-06-28T21:15:00Z",
        "body": "No answer...\n"
      }
    ]
  },
  {
    "number": 295,
    "title": "Dropbox file",
    "created_at": "2013-06-01T01:16:24Z",
    "closed_at": "2013-06-28T21:09:24Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/295",
    "body": "Dear, \nI am using your lib and it is very good. But in last few hours  your dropbox url is broken. It is image-1 preview picture, and it is making app to be very slow because of loading non existing picture. Can you check this please..\nBest regards,\nMarko Radosavljevic\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/295/comments",
    "author": "marko88",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-06-03T10:52:05Z",
        "body": "I don't understand what's the problem. Can you clarify your question?\n"
      }
    ]
  },
  {
    "number": 269,
    "title": "Don't catch SocketTimeOutException?",
    "created_at": "2013-05-02T11:40:06Z",
    "closed_at": "2013-05-19T22:11:57Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/269",
    "body": "I can't english well, understand me\n\nSituation. Device connected WIFI but not authorize connectivity. so can't used any internet service\n\nI saw the source code but not catch up SocketTimeOutException only IOException catched\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/269/comments",
    "author": "hacky12",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-05-02T12:46:16Z",
        "body": "`SocketTimeoutException` is `IOException` (extends it).\n"
      }
    ]
  },
  {
    "number": 254,
    "title": "Number of Bitmaps in memory",
    "created_at": "2013-04-18T15:22:21Z",
    "closed_at": "2013-05-19T22:01:14Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/254",
    "body": "Hello,\nI want to change number of bitmaps. Now, its 2 bitmaps for default (start, load, cache and display them).\nThanks\nTom\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/254/comments",
    "author": "santacs",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-04-20T19:10:09Z",
        "body": "I don't understand your question. Can you clarify it?\n"
      },
      {
        "user": "santacs",
        "created_at": "2013-05-06T13:13:53Z",
        "body": "How can I change number image loading threads? I want download and display for example four images instead of two. \n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-05-16T16:23:51Z",
        "body": "`ImageLoaderConfiguration.threadPoolSize(...)`\n"
      }
    ]
  },
  {
    "number": 250,
    "title": "weirdly SLOW at first glance",
    "created_at": "2013-04-16T02:07:17Z",
    "closed_at": "2013-04-20T16:07:07Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/250",
    "body": "Thank you first for the great work.\n\nBut when walking through the sample, especially in the Image Pager Example activity, while swiping left or right, it takes about 3-8 seconds to load the images at first time; that's reasonable. But while swiping back to some already loaded images, they still consumes the same amount of time to load. that's NOT reasonable. CACHE doesnt work?\n\nor it's just a trick to show UIL needs time to load images?\n\nKindest regards, nessus\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/250/comments",
    "author": "kdhr83",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-04-16T19:48:16Z",
        "body": "Cache should work, I can't say why you have this issue,\nWhat device do you use? Android version?\n"
      },
      {
        "user": "kdhr83",
        "created_at": "2013-04-18T05:00:08Z",
        "body": "yes, it did cache. what was described was about the running on Android Emulator 4.2.2 with 512m memory on Ubuntu 12.10, and it was debug version with logging enabled. So it might take noticeable amount of time. When run on my XT928, it performs great and I called quite a few ENCORE:). Sorry for disturbing you.\n\nAgain, it's a great art to fit it into my app.\n"
      }
    ]
  },
  {
    "number": 248,
    "title": "Major performance issue: if X ImageView request the same image, the same image is downloaded simultaneously X times instead of once.",
    "created_at": "2013-04-15T17:13:20Z",
    "closed_at": "2013-05-19T21:32:25Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/248",
    "body": "It's common for some applications with numerous ImageView in the same view hierarchy, to reference the same image. Requesting to download the same image multiple times should not result in downloading the same image multiple times. Once the image is loaded, further requests are taken from cache but until the image is fully in the cache, then each request will create a parallel download.\n\nThe implementation should check if the same URL has already been requested and is being downloaded. If positive, then an extra listener should be attached to that 1st downloader instead of creating another one and causing unnecessary bandwidth usage.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/248/comments",
    "author": "logiclove",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-04-16T20:09:31Z",
        "body": "Why do you think UIL is downloading the same image multiple times?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-24T17:17:02Z",
        "body": "No answer...\n"
      },
      {
        "user": "logiclove",
        "created_at": "2013-04-24T17:45:51Z",
        "body": "Sorry, I missed your previous question. I can provide you a small code sample that exhibits the behavior if you want\n"
      },
      {
        "user": "logiclove",
        "created_at": "2013-04-24T17:47:17Z",
        "body": "UIL is downloading the same image multiple times because it takes several seconds of delay for each image to be displayed despite all images being the same.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-24T18:11:16Z",
        "body": "Do you use caching?\n"
      },
      {
        "user": "logiclove",
        "created_at": "2013-04-24T19:06:43Z",
        "body": "These are all the options that we use. You can notice that the issue happens despite the threadPoolSize(1).\n\n``` java\n        DisplayImageOptions options = new DisplayImageOptions.Builder()\n                .cacheInMemory()\n                .cacheOnDisc()\n                .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2).build();\n\n        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)\n                .threadPoolSize(1)\n                .threadPriority(Thread.MIN_PRIORITY)\n                .memoryCache(new LRULimitedMemoryCache(8 * 1024 * 1024))\n                .discCache(new UnlimitedDiscCache(cacheDir))\n                .imageDownloader(new ImageDownloaderWithAssetsSupport(context))\n                .defaultDisplayImageOptions(options).enableLogging().build();\n\n        // Initialize ImageLoader with created configuration. Do it once on Application start.\n        imageLoader.init(config);\n\n        // create reusable options\n        // Creates display image options for custom display task (all options are optional)\n        optionsMemCacheDiscCacheAndStretchFullWidth = new DisplayImageOptions.Builder()\n                .cacheInMemory().cacheOnDisc()\n                .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)\n                .showImageForEmptyUri(R.drawable.gradient_grey50_to_black).build();\n\n        optionsMemCacheDiscCacheOriginalSize = new DisplayImageOptions.Builder()\n                .cacheInMemory().cacheOnDisc()\n                .imageScaleType(ImageScaleType.NONE)\n                .showImageForEmptyUri(R.drawable.gradient_grey50_to_black).build();\n```\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-28T17:38:52Z",
        "body": "Please enable logging in configuration and show me ImageLoader's logs when bug happens.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-05-19T21:32:25Z",
        "body": "No answer...\n"
      }
    ]
  },
  {
    "number": 240,
    "title": "Universal Image Loader and HTTPS (Apache HTTP Component)",
    "created_at": "2013-04-08T12:59:34Z",
    "closed_at": "2013-04-10T18:34:35Z",
    "labels": [
      "Problem",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/240",
    "body": "Have noticed, since I use my custom HTTPS SSL Socket factory in my app, using in conjunction with UniversalImageLoader, the loading of the images failed.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/240/comments",
    "author": "t0mm13b",
    "comments": [
      {
        "user": "t0mm13b",
        "created_at": "2013-04-08T18:34:42Z",
        "body": "The only thing that I could do to my custom SSL Socket Factory was the following -\n- implement a getter to return back your SSLContext\n- implement a getter to return back your custom host verifier\n\nIt must be noted the following: \n- MyCustomSSLSocketHandler is derived from Apache's HTTP Components library (4.1.x) and uses its own host verifier and keystore trust manager, i.e.\n\n`````` java\npublic class MyCustomSSLSocketHandler extends SSLSocketFactory implements SchemeSocketFactory{\n}\n\nThen apply to the following sample of code taken from issue 188, as shown:\n```java\npublic class SecureImageDownloader extends BaseImageDownloader{\n    private static final String TAG = SecureImageDownloader.class.getName();    \n\n    public SecureImageDownloader(Context context){\n        super(context);\n    }\n    public SecureImageDownloader(Context context, int connectTimeout, int readTimeout) {\n        super(context, connectTimeout, readTimeout);\n    }\n\n\n    @Override\n    protected InputStream getStreamFromNetwork(String imageUri, Object extra) throws IOException {\n        URL url = null;\n        try {\n            url = new URL(imageUri);\n        } catch (MalformedURLException e) {\n            Log.e(TAG, e.getMessage(), e);\n        }\n\n        HttpURLConnection http = null;\n\n        if (Scheme.ofUri(imageUri) == Scheme.HTTPS) {\n            HttpsURLConnection.setDefaultSSLSocketFactory(MyCustomSSLSocketHandler.getSSLContext().getSocketFactory());\n            HttpsURLConnection.setDefaultHostnameVerifier(MyCustomSSLSocketHandler.getCustomHostnameVerifier());\n            HttpsURLConnection https = (HttpsURLConnection) url.openConnection();\n            http = https;\n            http.connect();\n        } else {\n            http = (HttpURLConnection) url.openConnection();\n        }\n        http.setConnectTimeout(connectTimeout);\n        http.setReadTimeout(readTimeout);\n       return new FlushedInputStream(new BufferedInputStream(http.getInputStream()));\n    }\n}\n``````\n\nThere was a way to do it in a manner to avoid the dreaded cast exception between javax.net.ssl.SSLSocketFactory and Apache's own HTTP Component's SSLSocket factory\n\nWhat I did initially was this: https.setDefaultSSLSocketFactory(MyCustomSSLSocketHandler.getSocketFactory()); which resulted in a cast exception. The above code is stated to work by using the HttpsURLConnection's setDefaultSSLSocketFactory instead. - FYI for others who may have had difficulty in doing this.\n\nI will verify shortly to ensure that the trust manager is indeed being used, to mitigate MITM attacks....\n"
      },
      {
        "user": "t0mm13b",
        "created_at": "2013-04-08T18:49:32Z",
        "body": "Regarding my previous comment - I can indeed confirm that it is using my own custom keystore trust manager and host name verifier. \n\nThanks! :)\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-10T18:29:40Z",
        "body": "I read all that and didn't understand: do you still have any problem or question?\n"
      },
      {
        "user": "t0mm13b",
        "created_at": "2013-04-10T18:34:32Z",
        "body": "The problem was resolved. I thought I'd leave it here for others in case they encounter similar situation with Apache's HTTP Component :)\n"
      },
      {
        "user": "tapas4git",
        "created_at": "2014-04-29T11:03:11Z",
        "body": "Hi nostra,\nI have been using the universal image loader for my project. I am using ImageLoader object instance.\n\n``` java\nImageLoader imageLoader = ImageLoader.getInstance();\n                @Override\n                public Object instantiateItem(View view, int position) {\n                    final FrameLayout imageLayout = (FrameLayout) inflater.inflate(R.layout.item_gallery_image, null);\n                    final ImageView imageView = (ImageView) imageLayout.findViewById(R.id.image);\n                    final ProgressBar loading = (ProgressBar) imageLayout.findViewById(R.id.loading);\n\n                    selectedPosition=position;\n                    Log.d(\"selected item\", String.valueOf(selectedPosition));\n\n                    DisplayImageOptions options = new DisplayImageOptions.Builder().showImageForEmptyUri(R.drawable.ic_launcher)\n                        .cacheInMemory()\n                        .cacheOnDisc()\n                    //  .decodingType(DecodingType.MEMORY_SAVING)\n                        .build();\n                    imageLoader.displayImage(images[position], imageView, options, new SimpleImageLoadingListener() {\n\n                        @Override\n                        public void onLoadingStarted(String imageUri, View view) {\n                            // TODO Auto-generated method stub\n                            super.onLoadingStarted(imageUri, view);\n                            loading.setVisibility(View.VISIBLE);\n                        }\n\n\n                        @Override\n                        public void onLoadingFailed(\n                                String imageUri,\n                                View view,\n                                com.nostra13.universalimageloader.core.assist.FailReason failReason) {\n                            // TODO Auto-generated method stub\n                            super.onLoadingFailed(imageUri, view, failReason);\n                            loading.setVisibility(View.GONE);\n                            imageView.setImageResource(android.R.drawable.ic_delete);\n\n\n                            switch (failReason.getType()) {\n                            case OUT_OF_MEMORY:\n                                imageLoader.clearMemoryCache();\n                                break;\n                            case NETWORK_DENIED:\n                                Toast.makeText(getApplicationContext(), \"Unable to download image. Network denied\", Toast.LENGTH_LONG).show();\n                                break;\n                        }\n                        }\n\n\n                        @Override\n                        public void onLoadingComplete(String imageUri,\n                                View view, Bitmap loadedImage) {\n                            // TODO Auto-generated method stub\n                            super.onLoadingComplete(imageUri, view, loadedImage);\n                            loading.setVisibility(View.GONE);\n                        }\n\n                    });\n```\n\nCan you guide me to change the above code for HTTPS.  \n"
      },
      {
        "user": "mehmeth",
        "created_at": "2018-03-19T17:28:22Z",
        "body": "@tapas4git  did you find the answer for your question ? I have the same problem. My code is like;\r\n\r\n Map<String,String> authHeaders = new HashMap<>();\r\n        authHeaders.put(\"token\", LocalStorage.getUserToken(ctx));\r\n\r\n        DisplayImageOptions defaults = new DisplayImageOptions.Builder()\r\n                .displayer(new FadeInBitmapDisplayer(300, true, true, false))\r\n                .showImageOnFail(R.drawable.ic_image_fail)\r\n                .showImageForEmptyUri(R.drawable.ic_image_fail)\r\n                .cacheOnDisk(true)\r\n                .cacheInMemory(true)\r\n                .bitmapConfig(Bitmap.Config.RGB_565)\r\n                .extraForDownloader(authHeaders)\r\n                .build();\r\n        ImageLoaderConfiguration.Builder configsBuilder = new ImageLoaderConfiguration.Builder(ctx)\r\n\r\n                .imageDownloader(new AuthImageDownloader(ctx))\r\n                .defaultDisplayImageOptions(defaults);\r\n        ImageLoader.getInstance().init(configsBuilder.build());\r\n\r\n\r\n\r\nHow can make it https ?"
      }
    ]
  },
  {
    "number": 220,
    "title": "Load image one by one instead of by an array",
    "created_at": "2013-03-26T17:14:00Z",
    "closed_at": "2013-04-04T17:56:28Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/220",
    "body": "Hi,\nHow could I load the images one by one instead than using an array? I need to do this because I ask for every image to our server and then I get the urls from amazon server, so it makes really slow the process.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/220/comments",
    "author": "coyarzun89",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-03-26T19:05:43Z",
        "body": "I'm not sure I understood you correctly, but try to set `.threadPoolSize(1)` into configuration.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-04T17:56:27Z",
        "body": "7 days...\n"
      }
    ]
  },
  {
    "number": 218,
    "title": "How import this project to eclipse",
    "created_at": "2013-03-25T02:14:13Z",
    "closed_at": "2013-04-04T17:56:03Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/218",
    "body": "I import this project to eclipse, but can not build this project. it has some error!!!\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/218/comments",
    "author": "bearmingo",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-03-25T07:37:01Z",
        "body": "File -> New -> Other\nAndroid -> Android Project from Existing Code -> Next\nBrowse -> [Choose \"library\" or \"sample\" folder] -> Finish\n"
      },
      {
        "user": "bearmingo",
        "created_at": "2013-03-28T12:22:46Z",
        "body": "Thank you,\nBut eclipse show Error, \"Build path contains duplicate entry: 'src' for project 'universal-image-loader-sample\"\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-28T12:53:46Z",
        "body": "Eclipse screenshots?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-04-04T17:56:03Z",
        "body": "7 days...\n"
      }
    ]
  },
  {
    "number": 207,
    "title": "Delay Loading on first load of Image",
    "created_at": "2013-03-15T15:25:02Z",
    "closed_at": "2013-03-20T03:37:55Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/207",
    "body": "Just throwing out a feature suggestion before I poke my head into this library to try and do this myself or if you know of a way already that would be great. But if you could delay the Image from loading first time around then once its in the memory cache don't delay it from loading again. The way I'm current doing it is querying the memory cache with the key to check if the Image exists in cache if it does use a different DisplayOptions to load the image without a delay. Not sure if this is the best way of doing it but it works for now.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/207/comments",
    "author": "JesseFarebro",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-03-16T10:39:28Z",
        "body": "So you do delay (using `.delayBeforeLoading(...)`?) if image isn't in memory cache and don't do delay if it in memory cache, right?\n"
      },
      {
        "user": "JesseFarebro",
        "created_at": "2013-03-17T21:12:50Z",
        "body": "Correct\n\n``` java\nif(MemoryCacheUtil.findCachedBitmapsForImageUri(uri, ImageLoader.getInstance().getMemoryCache()).size() > 0) {\n        ImageLoader.getInstance().displayImage(uri,imageView,displayOptionsWithoutDelay);\n} else {\n        ImageLoader.getInstance().displayImage(uri,imageView,displayOptionsWithDelay);\n}\n```\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-17T21:20:29Z",
        "body": "One more question - why?\n"
      },
      {
        "user": "JesseFarebro",
        "created_at": "2013-03-18T10:41:02Z",
        "body": "Well, the why part is interesting. Basically let's say you have a Fragment and you use an animation to switch to that fragment and you attempt to load an Image with your library in a List Adapter per say when the animation occurs it will be very choppy. May be my hwcomposer I'm running on a broken phone anyways but if I use the code posted above it will delay the loading until the animation is done and then load the images so the perceived choppiness is gone for the user.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-19T17:00:54Z",
        "body": "Ok, got it. There is not built-in solution for this case and your way is the solution:\n\n``` java\nif (!MemoryCacheUtil.findCachedBitmapsForImageUri(uri, ImageLoader.getInstance().getMemoryCache()).isEmpty()) {\n        ImageLoader.getInstance().displayImage(uri, imageView, displayOptionsWithoutDelay);\n} else {\n        ImageLoader.getInstance().displayImage(uri, imageView, displayOptionsWithDelay);\n}\n```\n\nI think there is no need to implement any special functionality for this case, and I won't.\n"
      },
      {
        "user": "JesseFarebro",
        "created_at": "2013-03-20T03:37:55Z",
        "body": "Fair enough, just a quick little suggestion I guess after further thought it was a very specific problem. Thank you for the timely responses though. No reason for this to be open.\n"
      }
    ]
  },
  {
    "number": 202,
    "title": "making imageLoader load a previusly saved bitmap",
    "created_at": "2013-03-09T16:13:16Z",
    "closed_at": "2013-03-16T10:40:02Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/202",
    "body": "Is there any way to use imageLoader passing it an already created bitmap file?\n\nsomething like :\n\nbitmap=getBitmap(locandina); //my method to lead a bitmap\n imageLoader.displayImage(myBitmap, holder.image,options);\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/202/comments",
    "author": "surfmast3r",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-03-09T19:23:46Z",
        "body": "Why?\nIs `imageView.setImageBitmap(...)` not acceptable for you?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-16T10:39:55Z",
        "body": "7 days, no answer...\n"
      }
    ]
  },
  {
    "number": 176,
    "title": "Load image for display in webview",
    "created_at": "2013-02-20T15:28:39Z",
    "closed_at": "2013-03-14T19:44:14Z",
    "labels": [
      "Problem",
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/176",
    "body": "I have a issue:\nI want to load some images from url -> store on disc -> display image in webview.\nThe problem is: when image is loaded and stored on disc, I don't know how to display those images in webview. (display when network is offline)\n\nSr because my english is bad !\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/176/comments",
    "author": "hoangpn412",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-02-24T18:02:19Z",
        "body": "How do you display image in WebView?\n"
      },
      {
        "user": "hoangpn412",
        "created_at": "2013-02-25T03:44:58Z",
        "body": "I display image in webview:\nimg src = \"imageurl\"   (imageurl is a link of image save on disc)\n\nI want to load image from internet using Imageloader, after that save image on disc -> display image (on disc) in webview.\nThe problem is I don't know how to get Image url from disc (cache) when using Image loader. \n"
      },
      {
        "user": "hoangpn412",
        "created_at": "2013-02-26T04:56:10Z",
        "body": "yeah, is there a way to do this?\n"
      },
      {
        "user": "hoangpn412",
        "created_at": "2013-02-27T08:57:44Z",
        "body": "where is admin ? :(\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-02-28T21:13:18Z",
        "body": "Get image from disc cache:\n\n``` java\nFile imageFile =  imageLoader.getDiscCache().get(imageUri);\nString path = imageFile.getAbsolutePath(); // or imageFile.toURI()\n```\n"
      },
      {
        "user": "hoangpn412",
        "created_at": "2013-03-06T10:25:54Z",
        "body": "Hi, \n\n``` java\nFile imageFile =  imageLoader.getDiscCache().get(imageUri);\nString path = imageFile.getAbsolutePath(); // or imageFile.toURI()\n```\n\nwhen I use: \n\n``` java\nimageloader.loadData(imageUri, imageloadingListener) {\n    public void onloadingcomplete() {\n         File imageFile =  imageLoader.getDiscCache().get(imageUri);\n         String path = imageFile.getAbsolutePath(); // or imageFile.toURI()\n    }\n}\n```\n\nI print \"path\", result is: \"/storage/comic/cache/0\" at all time\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-06T10:41:25Z",
        "body": "Then your `imageUri` is empty string, I guess.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-09T22:29:41Z",
        "body": "Any news?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-03-14T19:44:14Z",
        "body": "No answer...\n"
      },
      {
        "user": "itsvssudheesh",
        "created_at": "2013-04-09T07:17:26Z",
        "body": "Hai, Could you please tell me how to load contact images of the phone using Universal image loader. \n\nContentResolver cr = this.getContentResolver();\n        photoUri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, userId);\nInputStream input = ContactsContract.Contacts.openContactPhotoInputStream(\n                    cr, photoUri);\nBitmapFactory.decodeStream(input);\n\nThis is the conventional way. I need to do this using Universal image loader.  Please help.\n"
      },
      {
        "user": "Ganganaidu",
        "created_at": "2013-12-05T11:56:04Z",
        "body": "Hai, i want to share image to Facebook ,gmail and twitter. for that i need image local file path. i tried like this \n\n   DiscCacheUtil.findInCache(prodcut_url, MyApplication.imageLoader.getDiscCache()).getAbsolutePath();\n   Uri uri = Uri.fromFile(imageFile);\n\n   and i am sharing this link using default intent,but its attaching some string not image. can you guys please help  \n  me. Thanks in advance\n"
      }
    ]
  },
  {
    "number": 138,
    "title": "Remove image from caches",
    "created_at": "2013-01-15T08:12:03Z",
    "closed_at": "2013-01-23T19:59:00Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/138",
    "body": "Hey i'd like to first say this was a lifesaver for an app I am working on. I was plagued with outofmemory issue until I used your library. I would like to request a feature for removing a single image from the cache. The reason for this is in my application I use a listview to display some images. Now the user can change the image by clicking on it. However in my implementation I name the images in a particular way ie. the image in position one will be labeled home_position1.jpg. now when I want to change that image to another one I rename the image with that naming convention and reload the image. however since it is the same name the cache still displays the old image. I know there is the clearCache option but then that blows away the other images when they didn't change and they will be recached. I would think a remove single item from the cache would solve this problem. something like:\nin BaseDiscCache:\n\n``` java\n    public void removeItem(String imageUri) {\n        String fileName = fileNameGenerator.generate(key);\n     File deleteMe = new File(cacheDir, fileName);\n                deleteMe..delete()\n    }\n```\n\nand in BaseMemoryCache\n\n``` java\n    public void removeItem(String imageUri) {\n        ImageSize targetSize = getImageSizeScaleTo(imageView);\n        String memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);\n        softMap.remove(memoryCacheKey);\n    }\n```\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/138/comments",
    "author": "anandkumarpatel",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-01-15T13:08:27Z",
        "body": "To remove image from disc cache:\n\n``` java\nFile imageFile = imageLoader.getDiscCache().get(imageUri)\nif (imageFile.exists()) {\n    imageFile.delete();\n}\n```\n\nTo remove image from memory cache:\n\n``` java\nMemoryCacheUtil.removeFromCache(imageUri, imageLoader.getMemoryCache());\n```\n"
      },
      {
        "user": "daimonkor",
        "created_at": "2013-01-15T21:51:40Z",
        "body": "maybe need create Utils for cache likely MeoryCache\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-01-15T21:53:34Z",
        "body": "Maybe\n"
      },
      {
        "user": "Wolf00Bomber",
        "created_at": "2015-07-05T13:05:32Z",
        "body": "The solution proposed by you doesn't work for removing image from disc cache:\n\nFile imageFile = imageLoader.getDiscCache().get(imageUri)\nif (imageFile.exists()) {\n    imageFile.delete();\n}\n\nCan you please suggest me another solution.\n"
      },
      {
        "user": "parthibanm104",
        "created_at": "2015-10-20T14:47:26Z",
        "body": "Hi, I'm using the below codes for clearing cache memory but it doesn't works for me:\nMemoryCacheUtils.removeFromCache(\n                    ConstantVariables.sellDetails_stringURL,\n                    imageLoader.getMemoryCache());\n            DiskCacheUtils.removeFromCache(\n                    ConstantVariables.sellDetails_stringURL,\n                    imageLoader.getDiskCache());\n\nAlso I've used the following code to clear the disc cache:\n\nFile imageFile = imageLoader.getDiscCache().get(imageUri)\nif (imageFile.exists()) {\n    imageFile.delete();\n}\n\nbut doesn't works for me...\nCan you please give me suggestion?\n"
      },
      {
        "user": "oseamiya",
        "created_at": "2021-06-14T05:44:56Z",
        "body": "public void DeleteCachedImage(String imageUrl){\r\n        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this.context).build();\r\n        (this.imgLoader = ImageLoader.getInstance()).init(config);\r\n        final ImageLoader imgLoader = this.imgLoader;\r\n        ImageLoader.getInstance().getDiskCache().get(imageUrl).delete();\r\n}\r\n\r\nThis should help you ."
      }
    ]
  },
  {
    "number": 123,
    "title": "Does Android-Universal-Image-Loader support Asset folder?",
    "created_at": "2012-12-17T18:14:47Z",
    "closed_at": "2012-12-18T03:46:57Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/123",
    "body": "Hi nostra13,\n\nI was going to use this lib in my project, but after some searches, I couldn't figure out how to use this lib to load images from assets folder, even when I used \"file:///android_asset/... , it didn't work.\n\n``` java\n        mImageLoader.displayImage(\"file:///android_asset/\" + path, \n                iv, Const.displayImageOptions, \n                new SimpleImageLoadingListener()\n        {\n            @Override\n            public void onLoadingComplete(Bitmap loadedImage) {\n                Animation anim = AnimationUtils\n                        .loadAnimation(mContext, R.anim.fade_in);\n                iv.setAnimation(anim);\n                anim.start();\n            }\n        }); \n```\n\nIf it's possible, could you provide me some code? or even if I have to customized some code myself, please let me know how to do it.\n\nThanks in advance and sorry for my bad English :)\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/123/comments",
    "author": "mrleolink",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2012-12-17T18:42:33Z",
        "body": "Hi, \nLook into example project. I implemented example of using images from assets and drawables. Use `ExtendedImageDownloader` and **\"assets://\"** prefix.\n"
      },
      {
        "user": "mrleolink",
        "created_at": "2012-12-18T03:46:57Z",
        "body": "Hi,\nI've got it worked, sorry that I didn't look closely to your example.\nThank you so much.\nLeo!\n"
      },
      {
        "user": "ManojMM026",
        "created_at": "2012-12-31T08:19:12Z",
        "body": "hey @nostra13 @mrleolink  please help me with getting images from drawable folder using this library. can you paste snippet which will guide me to use this library with drawable folder.\nwhen i try to use ExtendedImageDownloader it gives me error ExtendedImageDownloader cannot be resolve to a type.\n\nI tried setting config from Example\n\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())\n            .threadPriority(Thread.NORM_PRIORITY - 2)\n            .memoryCacheSize(2 \\* 1024 \\* 1024) // 2 Mb\n            .denyCacheImageMultipleSizesInMemory()\n            .discCacheFileNameGenerator(new Md5FileNameGenerator())\n            .imageDownloader(new ExtendedImageDownloader(getApplicationContext()))\n            .tasksProcessingOrder(QueueProcessingType.LIFO)\n            .enableLogging() // Not necessary in common\n            .build();\n        // Initialize ImageLoader with configuration.\n        ImageLoader.getInstance().init(config);\n"
      },
      {
        "user": "nostra13",
        "created_at": "2012-12-31T10:01:20Z",
        "body": "@ManojMM026 `ExtendedImageDownloader` is not a part of the library yet. You should copy-paste it from example to your project..\n"
      },
      {
        "user": "YuvPrime",
        "created_at": "2015-02-25T17:27:59Z",
        "body": "@nostra13 Where is `ExtendedImageDownloader`? I couldn't find in your project. Can you pl give me the link?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2015-02-26T18:52:32Z",
        "body": "`assets://...` scheme is supported out of box now\n"
      },
      {
        "user": "YuvPrime",
        "created_at": "2015-02-27T07:28:47Z",
        "body": "Thanks, it's working.\n"
      },
      {
        "user": "zdd",
        "created_at": "2015-08-17T02:48:53Z",
        "body": "Can I use subfolders in assets folder?\nlike this assets://images/test.png\n"
      }
    ]
  }
]