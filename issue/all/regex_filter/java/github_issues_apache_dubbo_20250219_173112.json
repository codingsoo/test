[
  {
    "number": 13933,
    "title": "For HTTP/1 unary mode, use Content-Length instead of chunk",
    "created_at": "2024-03-18T02:44:12Z",
    "closed_at": "2024-04-07T14:19:41Z",
    "labels": [
      "help wanted",
      "type/enhancement",
      "component/sdk"
    ],
    "url": "https://github.com/apache/dubbo/issues/13933",
    "body": null,
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/13933/comments",
    "author": "AlbumenJ",
    "comments": [
      {
        "user": "finefuture",
        "created_at": "2024-03-21T08:42:58Z",
        "body": "I'm working on it, please assign it to me."
      }
    ]
  },
  {
    "number": 13377,
    "title": "Dubbo rest support Overload-method?",
    "created_at": "2023-11-16T08:53:52Z",
    "closed_at": "2024-09-09T06:21:33Z",
    "labels": [
      "help wanted",
      "type/discussion",
      "good first issue",
      "component/sdk"
    ],
    "url": "https://github.com/apache/dubbo/issues/13377",
    "body": "\r\n## sc controller  mapping\r\n```java\r\n@GetMapping\r\npublic R<List<DictDTO>> list(@RequestParam Long applicationId, @RequestParam(required = false) Long dictId) {\r\n    return R.ok(sysDictService.getDetailList(applicationId, dictId));\r\n\r\n```\r\n\r\n## DubboReference interface\r\n```java\r\n@ProvidedBy(name = \"base\")\r\n@RequestMapping(\"dict\")\r\npublic interface DictServiceReference {\r\n    @GetMapping\r\n    R<List<DictDTO>> list(@RequestParam Long applicationId);\r\n    @GetMapping\r\n    R<List<DictDTO>> list(@RequestParam Long applicationId, @RequestParam Long dictId);\r\n}\r\n```\r\nI do it with dubbo verions 3.3.0-beta.1.\r\n```\r\njava.lang.IllegalArgumentException: dubbo rest metadata resolve double path error,and do not  contain path variable  is: PathMatcher{path='/dict', version='null', group='null', port=null, hasPathVariable=false, contextPath='null', httpMethod='GET'}, rest method metadata is: RestMethodMetadata{method=MethodDefinition [name=list, parameterTypes=[java.lang.Long, java.lang.Long], returnType=com.xxx.common.core.result.R], request=RequestMetadata{method='GET', path='/dict', params={applicationId=[{0}], dictId=[{1}]}, headers={}, consumes=[], produces=[]}, urlIndex=null, bodyIndex=null, headerMapIndex=null, bodyType='null', indexToName={0=[applicationId], 1=[dictId]}, formParams=null, indexToEncoded=null, argInfos=[ArgInfo{index=0, annotationNameAttribute='applicationId', paramAnnotationType=interface org.springframework.web.bind.annotation.RequestParam, paramType=class java.lang.Long, paramName='applicationId', urlSplitIndex=0, defaultValue={0}, formContentType=false}, ArgInfo{index=1, annotationNameAttribute='dictId', paramAnnotationType=interface org.springframework.web.bind.annotation.RequestParam, paramType=class java.lang.Long, paramName='dictId', urlSplitIndex=0, defaultValue={1}, formContentType=false}], reflectMethod=public abstract com.xxx.common.core.result.R com.xxx.base.api.DictServiceReference.list(java.lang.Long,java.lang.Long), codeStyle=class org.apache.dubbo.metadata.rest.springmvc.SpringMvcServiceRestMetadataResolver}\r\n\tat org.apache.dubbo.metadata.rest.ServiceRestMetadata.doublePathCheck(ServiceRestMetadata.java:149)\r\n\tat org.apache.dubbo.metadata.rest.ServiceRestMetadata.addPathToServiceMap(ServiceRestMetadata.java:134)\r\n\tat org.apache.dubbo.metadata.rest.ServiceRestMetadata.addRestMethodMetadata(ServiceRestMetadata.java:115)\r\n\tat org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver.processRestMethodMetadata(AbstractServiceRestMetadataResolver.java:302)\r\n\tat org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver.processAllRestMethodMetadata(AbstractServiceRestMetadataResolver.java:157)\r\n\tat org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver.resolve(AbstractServiceRestMetadataResolver.java:121)\r\n\tat org.apache.dubbo.rpc.protocol.rest.annotation.metadata.MetadataResolver.resolveConsumerServiceMetadata(MetadataResolver.java:45)\r\n\tat org.apache.dubbo.rpc.protocol.rest.RestProtocol.protocolBindingRefer(RestProtocol.java:168)\r\n\tat org.apache.dubbo.rpc.protocol.AbstractProtocol.refer(AbstractProtocol.java:137)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:83)\r\n\tat org.apache.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:85)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.refer(ProtocolSecurityWrapper.java:110)\r\n\tat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:74)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.refer(ProtocolSerializationWrapper.java:52)\r\n\tat org.apache.dubbo.rpc.protocol.InvokerCountWrapper.refer(InvokerCountWrapper.java:50)\r\n\tat org.apache.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory.toInvokers(ServiceDiscoveryRegistryDirectory.java:429)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory.refreshInvoker(ServiceDiscoveryRegistryDirectory.java:315)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory.refreshOverrideAndInvoker(ServiceDiscoveryRegistryDirectory.java:199)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory.notify(ServiceDiscoveryRegistryDirectory.java:191)\r\n\tat org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.addListenerAndNotify(ServiceInstancesChangedListener.java:236)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.subscribeURLs(ServiceDiscoveryRegistry.java:329)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.doSubscribe(ServiceDiscoveryRegistry.java:226)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.subscribe(ServiceDiscoveryRegistry.java:188)\r\n\tat org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(ListenerRegistryWrapper.java:88)\r\n\tat org.apache.dubbo.registry.integration.DynamicDirectory.subscribe(DynamicDirectory.java:184)\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory.subscribe(ServiceDiscoveryRegistryDirectory.java:142)\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.doCreateInvoker(RegistryProtocol.java:629)\r\n\tat org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol.getServiceDiscoveryInvoker(InterfaceCompatibleRegistryProtocol.java:65)\r\n\tat org.apache.dubbo.registry.client.migration.MigrationInvoker.refreshServiceDiscoveryInvoker(MigrationInvoker.java:440)\r\n\tat org.apache.dubbo.registry.client.migration.MigrationInvoker.migrateToApplicationFirstInvoker(MigrationInvoker.java:246)\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleHandler.refreshInvoker(MigrationRuleHandler.java:76)\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleHandler.doMigrate(MigrationRuleHandler.java:60)\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleListener.onRefer(MigrationRuleListener.java:249)\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.interceptInvoker(RegistryProtocol.java:594)\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:564)\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:546)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:80)\r\n\tat org.apache.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:85)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.refer(ProtocolSecurityWrapper.java:110)\r\n\tat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:71)\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.refer(ProtocolSerializationWrapper.java:52)\r\n\tat org.apache.dubbo.rpc.protocol.InvokerCountWrapper.refer(InvokerCountWrapper.java:48)\r\n\tat org.apache.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)\r\n\tat org.apache.dubbo.config.ReferenceConfig.createInvoker(ReferenceConfig.java:621)\r\n\tat org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:467)\r\n\tat org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:354)\r\n\tat org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:239)\r\n\tat org.apache.dubbo.config.ReferenceConfigBase.get(ReferenceConfigBase.java:379)\r\n\tat org.apache.dubbo.config.spring.ReferenceBean.getCallProxy(ReferenceBean.java:413)\r\n\tat org.apache.dubbo.config.spring.ReferenceBean.access$100(ReferenceBean.java:109)\r\n\tat org.apache.dubbo.config.spring.ReferenceBean$DubboReferenceLazyInitTargetSource.getTarget(ReferenceBean.java:420)\r\n\tat org.apache.dubbo.config.spring.util.LazyTargetInvocationHandler.invoke(LazyTargetInvocationHandler.java:52)\r\n\tat com.xxx.base.api.DictServiceReferenceDubboProxy0.list(DictServiceReferenceDubboProxy0.java)\r\n\tat com.xxx.service.DictService.list(DictService.java:21)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)\r\n\tat com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/13377/comments",
    "author": "Godfunc",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2023-11-20T02:15:50Z",
        "body": "@suncairong163 PTAL"
      },
      {
        "user": "Chenjp",
        "created_at": "2024-04-17T14:29:29Z",
        "body": "Overloading-method may violate REST style best practise, I do think it's not a good idea for rest-protocol.\nA well-designed Rest service (\"URL\" representatively) should be semantically accurate, without any misunderstanding.\nEven if we add rest-protocol overload support arbitrarily, other non-dubbo rest-http caller may unable to work correctly. \n\n"
      },
      {
        "user": "oxsean",
        "created_at": "2024-07-30T07:30:52Z",
        "body": "```groovy\n    def \"override mapping test\"() {\n        given:\n            def request = new TestRequest(path: path)\n        expect:\n            runner.run(request, String.class) == output\n        where:\n            path                          | output\n            '/say?name=sam&count=2'       | '2'\n            '/say?name=sam'               | '1'\n            '/say~SL'                     | '2'\n            '/say~S'                      | '1'\n            '/say~S?name=sam&count=2'     | '1'\n            '/say~S.yml?name=sam&count=2' | '1'\n    }\n\n    String say(String name, Long count)\n\n    String say(String name)\n```\nIn the latest REST Triple, support method override has been added by passing the method signature abbreviation.\nHowever, in the case of spring, it is recommended that you set up a different path to distinguish between overload methods."
      }
    ]
  },
  {
    "number": 13365,
    "title": "Simplify dubbo-maven-plugin configuration in native scenaios",
    "created_at": "2023-11-15T05:45:15Z",
    "closed_at": "2023-11-29T13:06:24Z",
    "labels": [
      "help wanted",
      "type/proposal"
    ],
    "url": "https://github.com/apache/dubbo/issues/13365",
    "body": "Current\r\n```\r\n                    <plugin>\r\n                        <groupId>org.apache.dubbo</groupId>\r\n                        <artifactId>dubbo-maven-plugin</artifactId>\r\n                        <version>${dubbo.version}</version>\r\n                        <configuration>\r\n                            <mainClass>org.apache.dubbo.nativeimage.provider.NativeDemoProviderApplication</mainClass>\r\n                        </configuration>\r\n                        <executions>\r\n                            <execution>\r\n                                <phase>process-sources</phase>\r\n                                <goals>\r\n                                    <goal>dubbo-process-aot</goal>\r\n                                </goals>\r\n                            </execution>\r\n                        </executions>\r\n                    </plugin>\r\n```\r\nHope simplify main class configuration, and dubbo can automatically identify and configure the main class.\r\n\r\n```\r\n                    <plugin>\r\n                        <groupId>org.apache.dubbo</groupId>\r\n                        <artifactId>dubbo-maven-plugin</artifactId>\r\n                        <version>${dubbo.version}</version>\r\n                        <executions>\r\n                            <execution>\r\n                                <phase>process-sources</phase>\r\n                                <goals>\r\n                                    <goal>dubbo-process-aot</goal>\r\n                                </goals>\r\n                            </execution>\r\n                        </executions>\r\n                    </plugin>\r\n```",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/13365/comments",
    "author": "CrazyHZM",
    "comments": [
      {
        "user": "anabasalo",
        "created_at": "2023-11-23T01:05:28Z",
        "body": "hello, can I work on this issue, please?\r\nthanks"
      },
      {
        "user": "FoghostCn",
        "created_at": "2023-11-23T06:52:09Z",
        "body": "> hello, can I work on this issue, please? thanks\r\n\r\n@anabasalo  I'm already working on this,thank you"
      },
      {
        "user": "FoghostCn",
        "created_at": "2023-11-23T10:31:50Z",
        "body": "@CrazyHZM pls assign to me to prevent other people take this issue again"
      }
    ]
  },
  {
    "number": 12485,
    "title": "Zookeeper node sessionTimeout in provider side",
    "created_at": "2023-06-09T09:24:08Z",
    "closed_at": "2024-11-20T09:20:50Z",
    "labels": [
      "help wanted",
      "type/enhancement",
      "component/sdk"
    ],
    "url": "https://github.com/apache/dubbo/issues/12485",
    "body": "\r\n请问 CuratorFrameworkUtils 这个类的 buildCuratorFramework 方法中创建 CuratorFramework 时为什么没有执行 builder.sessionTimeoutMs(connectionURL.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS)) 方法，不能自己设置  sessionTimeout 呢\r\n\r\n```\r\npublic class ZookeeperServiceDiscovery extends AbstractServiceDiscovery {\r\n    // ......\r\n  \r\n    public ZookeeperServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {\r\n        super(applicationModel, registryURL);\r\n        try {\r\n            this.curatorFramework = buildCuratorFramework(registryURL, this);\r\n            // ......\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(\"Create zookeeper service discovery failed.\", e);\r\n        }\r\n    }\r\n\r\n    public static CuratorFramework buildCuratorFramework(URL connectionURL, ZookeeperServiceDiscovery serviceDiscovery) throws Exception {\r\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\r\n            .connectString(connectionURL.getBackupAddress())\r\n            .retryPolicy(buildRetryPolicy(connectionURL));\r\n        String userInformation = connectionURL.getUserInformation();\r\n        if (StringUtils.isNotEmpty(userInformation)) {\r\n            builder = builder.authorization(\"digest\", userInformation.getBytes());\r\n            builder.aclProvider(new ACLProvider() {\r\n                @Override\r\n                public List<ACL> getDefaultAcl() {\r\n                    return ZooDefs.Ids.CREATOR_ALL_ACL;\r\n                }\r\n\r\n                @Override\r\n                public List<ACL> getAclForPath(String path) {\r\n                    return ZooDefs.Ids.CREATOR_ALL_ACL;\r\n                }\r\n            });\r\n        }\r\n        CuratorFramework curatorFramework = builder.build();\r\n        // ......\r\n        return curatorFramework;\r\n    }\r\n   // ......\r\n```\r\n作为 provider，当该 provider 下线之后，/services/xxx 节点仍然存在，等到默认 60s 之后才会删除，这期间当consumer 端请求该 provider 时就会报如下错误\r\n```\r\norg.apache.dubbo.rpc.StatusRpcException: DEADLINE_EXCEEDED : Waiting server-side response timeout by scan timer. start time: 2023-06-09 17:00:09.431, end time: 2023-06-09 17:00:12.447, timeout: 3000 ms, service: xxx.xxx.xxx\r\n```\r\n\r\n现在想改短一点 sessionTimeout 就只能修改 zookeeper 配置中的 maxSessionTimeout 或 tickTime 了吗",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/12485/comments",
    "author": "niguibin",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2023-06-12T12:24:19Z",
        "body": "May fixed in #9317"
      },
      {
        "user": "niguibin",
        "created_at": "2023-06-13T03:48:20Z",
        "body": "> May fixed in\r\n\r\n这个 #9317 中的 CuratorZookeeperClient 应该是控制 /dubbo/xxx.xxx/providers 节点的，而 ZookeeperServiceDiscovery 中的 CuratorFramework 是控制 /services/xxx 节点的，这是两个客户端，我很疑惑，为什么在 CuratorZookeeperClient 中是设置了 sessiontimeout 的，在 ZookeeperServiceDiscovery 中没有设置 sessiontimeout。但是 consumer 端是只有在 /dubbo/xxx.xxx.providers/ 节点和 /services/xxx 节点都不存在时才认为该 provider 不存在了，所以这两个节点的 sessiontimeout 应该要保持一致才对"
      }
    ]
  },
  {
    "number": 12401,
    "title": "希望 validation 增加对spring-boot-starter-validation的支持",
    "created_at": "2023-05-25T08:13:16Z",
    "closed_at": "2024-03-08T06:59:59Z",
    "labels": [
      "help wanted",
      "type/proposal"
    ],
    "url": "https://github.com/apache/dubbo/issues/12401",
    "body": "目前validation还是基于javax来实现，希望在未来版本中支持jakarta以及hibernate-validator最新版 和 spring-boot-starter-validation\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/12401/comments",
    "author": "MrLiuFang",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2023-06-06T09:55:31Z",
        "body": "@suncairong163 PTAL"
      },
      {
        "user": "road2master",
        "created_at": "2023-09-10T10:52:13Z",
        "body": "Can assign this task for me？@AlbumenJ "
      },
      {
        "user": "AlbumenJ",
        "created_at": "2023-09-11T07:53:03Z",
        "body": "> Can assign this task for me？@AlbumenJ\r\n\r\nYou can submit a PR directly"
      },
      {
        "user": "AlbumenJ",
        "created_at": "2024-03-08T07:00:00Z",
        "body": "May fixed in #9552"
      }
    ]
  },
  {
    "number": 11953,
    "title": "metrics need to merge old and new implementations",
    "created_at": "2023-03-28T13:28:28Z",
    "closed_at": "2024-11-20T08:12:31Z",
    "labels": [
      "help wanted",
      "good first issue"
    ],
    "url": "https://github.com/apache/dubbo/issues/11953",
    "body": "Before 3.2, if the config did not set the Prometheus protocol, MetricsFilter would be used to count requests and thread pools, and the observation format would be customized. After 3.2, a relatively complete observability has been provided, whether the new and old implementations should be integrated. My idea is to migrate the old protocol spi extension to the new implementation, while providing a simple custom metrics format output (if it is a custom protocol).\r\n\r\n\r\n\r\n    /**\r\n     * @deprecated After metrics config is refactored.\r\n     * This filter should no longer use and will be deleted in the future.\r\n     */\r\n    @Deprecated\r\n    public class MetricsFilter implements Filter, ExtensionAccessorAware, ScopeModelAware {\r\n    }\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/11953/comments",
    "author": "wxbty",
    "comments": [
      {
        "user": "songxiaosheng",
        "created_at": "2023-03-28T13:45:52Z",
        "body": "yes，some metrics config such as Metrics port need be remove too."
      },
      {
        "user": "wcy666103",
        "created_at": "2024-04-11T08:44:02Z",
        "body": "I'm willing to do that ，May you give me more detail for this task？"
      },
      {
        "user": "wxbty",
        "created_at": "2024-04-11T09:53:28Z",
        "body": "> Prometheus protocol\r\n\r\nIt turns out that the MetricsFilter of the Dubbo-Monitor module includes the data export function of the custom Protocol. It has been removed in version 3.3. You can refer to the implementation of dubbo-2.7.23 branch to migrate this function to the metrics module of 3.3. The background of this feature is that some users want to be compatible with private indicator formats instead of using the existing general Prometheus protocol."
      },
      {
        "user": "Shivam1-123",
        "created_at": "2024-10-15T04:44:49Z",
        "body": "I am intrested in working on it. May you give me details?\r\n\r\n"
      },
      {
        "user": "linhexu",
        "created_at": "2024-11-06T15:09:43Z",
        "body": "give me some simple task，please"
      },
      {
        "user": "wxbty",
        "created_at": "2024-11-20T08:12:20Z",
        "body": "This task is quite old, so it is temporarily closed and may be reopened in the future"
      }
    ]
  },
  {
    "number": 10490,
    "title": "ThreadPoolExhaustedListener 在最新版本中未发现用户配置的入口在哪",
    "created_at": "2022-08-21T14:49:24Z",
    "closed_at": "2022-10-11T02:34:18Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/10490",
    "body": "ThreadPoolExhaustedListener 在最新版本中未发现用户配置的入口，这个功能的设计初衷我理解，是发生线程池耗尽通知给应用，目前没看到应用如何添加监听的地方。",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/10490/comments",
    "author": "stoneapple",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2022-08-22T09:27:11Z",
        "body": "看了下应该是之前改 EventDispatcher 的时候把入口给搞没了，目前看起来是需要有一个重新配置的入口"
      },
      {
        "user": "stoneapple",
        "created_at": "2022-08-24T07:05:35Z",
        "body": "> 看了下应该是之前改 EventDispatcher 的时候把入口给搞没了，目前看起来是需要有一个重新配置的入口\r\n那这个我回头整理下，提个PR修复掉"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2022-09-16T06:46:23Z",
        "body": "@stoneapple \r\nany progress on this?\r\n"
      }
    ]
  },
  {
    "number": 9171,
    "title": "dubbo是否支持懒加载呢",
    "created_at": "2021-11-01T01:11:20Z",
    "closed_at": "2021-11-01T16:21:39Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/9171",
    "body": "类似于spring的懒加载，启动的时候不初始化服务，只是注册到注册中心或者消费者能够直连，只有真正使用调用的时候才进行实例化，主要是加快启动速度，调试开发使用",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/9171/comments",
    "author": "asm2356",
    "comments": [
      {
        "user": "asm2356",
        "created_at": "2021-11-01T16:21:49Z",
        "body": "自己已处理"
      },
      {
        "user": "hehuang139",
        "created_at": "2022-06-16T10:05:12Z",
        "body": "> 自己已处理\r\n\r\n能问下是怎么实现的吗？目前也遇到同样的需求，为了提升app的启动速度，我是打算用spring自带的@Lazy机制实现，但是发现这个机制需要@Autowired来识别inject，但是ServiceConfig的ref字段没有@Autowired导致无法识别，目前考虑了几种方案\r\n1. AutowiredAnnotationBeanPostProcessor参考，在加一个BeanPostProcessor来实现，识别Ref字段，注入TargetSource，\r\n2. 还是在AutowiredAnnotationBeanPostProcessor基础上，修改dubbo的源码，构造DependencyDescriptor和TargetSource来实现。\r\n我先自己实现，如果先做完就提个pr上来。"
      }
    ]
  },
  {
    "number": 8838,
    "title": "dubbo使用nacos作为注册中心，使用多注册中心时，服务被覆盖",
    "created_at": "2021-09-17T10:50:21Z",
    "closed_at": "2021-10-29T05:09:42Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8838",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.7.12\r\n* Nacos version: 1.4.2\r\n* Java version: 1.8\r\n\r\n### Steps to reproduce this issue\r\n\r\n1. 配置多个nacos注册中心\r\n2. 启动provider和consumer服务\r\n3. 重启某个注册中心的provider服务，会导致另一个注册中心的provider也变成这个重启的provider\r\n\r\n### 源码解读发现逻辑问题\r\n1. com.alibaba.nacos.client.naming.core.HostReactor#processServiceJson里会发布InstancesChangeEvent，这个事件会通知所有naocs注册中心的服务。\r\n2. 会触发这个方法org.apache.dubbo.registry.nacos.NacosRegistry#subscribeEventListener里定义的eventListener。\r\n3. 之后org.apache.dubbo.registry.integration.RegistryDirectory#refreshOverrideAndInvoker 会更新routerChain.setInvokers(newInvokers)。\r\n4. 这里的newInvokers代表重启后的服务provider\r\n5. 最后的结果就导致不同nacos注册中心的对应的RegistryDirectory对象，invokers都被更新成了一个",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8838/comments",
    "author": "zjutbang",
    "comments": [
      {
        "user": "plusmancn",
        "created_at": "2021-09-18T03:44:14Z",
        "body": "@zjutbang  Similar to #7822 "
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-29T05:09:42Z",
        "body": "Resolved in #8588"
      },
      {
        "user": "feng996",
        "created_at": "2021-11-16T12:20:40Z",
        "body": "dubbo 3.0.4 + nacos 2.0.3 + tri有同样的问题，有解决的嘛 @zjutbang @plusmancn @CrazyHZM @"
      }
    ]
  },
  {
    "number": 8657,
    "title": "dubbo3.0.2 Serializer error",
    "created_at": "2021-09-02T01:36:31Z",
    "closed_at": "2021-10-15T06:20:21Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8657",
    "body": "\r\njava.lang.RuntimeException: java.lang.NullPointerException\r\n\tat org.apache.dubbo.common.function.ThrowableFunction.execute(ThrowableFunction.java:54) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.common.function.ThrowableFunction.execute(ThrowableFunction.java:69) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery.doInServiceDiscovery(ZookeeperServiceDiscovery.java:194) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery.getInstances(ZookeeperServiceDiscovery.java:121) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.lambda$subscribeURLs$2(ServiceDiscoveryRegistry.java:313) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat java.lang.Iterable.forEach(Iterable.java:75) ~[?:1.8.0_172]\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.lambda$subscribeURLs$3(ServiceDiscoveryRegistry.java:312) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat java.util.HashMap.computeIfAbsent(HashMap.java:1127) ~[?:1.8.0_172]\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.subscribeURLs(ServiceDiscoveryRegistry.java:309) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.doSubscribe(ServiceDiscoveryRegistry.java:243) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.subscribe(ServiceDiscoveryRegistry.java:220) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(ListenerRegistryWrapper.java:106) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.DynamicDirectory.subscribe(DynamicDirectory.java:136) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.doCreateInvoker(RegistryProtocol.java:514) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol.getServiceDiscoveryInvoker(InterfaceCompatibleRegistryProtocol.java:65) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.migration.MigrationInvoker.refreshServiceDiscoveryInvoker(MigrationInvoker.java:426) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.migration.MigrationInvoker.migrateToApplicationFirstInvoker(MigrationInvoker.java:241) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleHandler.refreshInvoker(MigrationRuleHandler.java:81) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleHandler.doMigrate(MigrationRuleHandler.java:65) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.client.migration.MigrationRuleListener.onRefer(MigrationRuleListener.java:148) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.interceptInvoker(RegistryProtocol.java:485) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:467) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:452) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:74) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:68) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:73) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:392) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:328) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:205) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.utils.ReferenceConfigCache.lambda$get$3(ReferenceConfigCache.java:114) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) ~[?:1.8.0_172]\r\n\tat org.apache.dubbo.config.utils.ReferenceConfigCache.get(ReferenceConfigCache.java:113) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.lambda$referServices$8(DubboBootstrap.java:1342) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat java.util.HashMap$Values.forEach(HashMap.java:981) ~[?:1.8.0_172]\r\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.referServices(DubboBootstrap.java:1321) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:1100) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(DubboBootstrapApplicationListener.java:70) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onApplicationContextEvent(DubboBootstrapApplicationListener.java:63) ~[dubbo-3.0.0.jar:3.0.0]\r\n\tat com.alibaba.spring.context.OnceApplicationContextEventListener.onApplicationEvent(OnceApplicationContextEventListener.java:52) ~[spring-context-support-1.0.8.jar:?]\r\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:400) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:354) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:888) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]\r\n\tat com.lazyaudio.yyting.core.provider.Application.main(Application.java:16) [classes/:?]\r\n\r\n\r\nThe error msg as above,the reason is  serializer the registerInfo from zookeeper error,cause the port is null \r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8657/comments",
    "author": "zlw-9536",
    "comments": [
      {
        "user": "plusmancn",
        "created_at": "2021-09-03T03:21:30Z",
        "body": "Relate to #8666 "
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-28T09:12:38Z",
        "body": "@zlw-9536 Please provide more information to help reproduce."
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-15T06:20:21Z",
        "body": "No feedback for a long time, please close the issue temporarily. If there is still a problem, you can reopen it."
      }
    ]
  },
  {
    "number": 8450,
    "title": "entity中含有EnumMap属性，有时候反序列化之后解析，会报 Class [Ljava.util.HashMap$Node; does not implement the requested interface java.util.Set",
    "created_at": "2021-08-09T02:19:19Z",
    "closed_at": "2021-10-09T14:15:50Z",
    "labels": [
      "status/waiting-for-feedback",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8450",
    "body": "entity中含有EnumMap属性，有时候反序列化之后解析，会报 Class [Ljava.util.HashMap$Node; does not implement the requested interface java.util.Set",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8450/comments",
    "author": "jack-baitao",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2021-08-11T04:36:02Z",
        "body": "could you please describe more about this?"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-09T14:15:50Z",
        "body": "No feedback for a long time, please close the issue temporarily. If there is still a problem, you can reopen it."
      }
    ]
  },
  {
    "number": 8469,
    "title": "AwaitingNonWebApplicationListener blocks the application exit",
    "created_at": "2021-08-07T03:37:00Z",
    "closed_at": "2022-01-06T12:34:13Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8469",
    "body": "Since some bean is not initialized successfully,  spring boot application failed to start. Because the ExecutorService in AwaitingNonWebApplicationListener didn't shutdown, it blocked the application to exist, but the Spring boot application has stopped.\r\n\r\nSolution suggestion：\r\nLet AwaitingNonWebApplicationListener listen to ApplicationFailedEvent and release the resource(shutdown ExecutorService) when it receive ApplicationFailedEvent 。\r\n\r\n======Below is Chinese description============== \r\n\r\n\r\n因为某个bean没有初始化成功， spring boot application启动失败。 但是因为AwaitingNonWebApplicationListener 里面的ExecutorService没有shutdown， 造成应用程序的进程没有退出，但是 Spring boot application 已经stop了。\r\n\r\n解决方案：\r\n让 AwaitingNonWebApplicationListener 支持 ApplicationFailedEvent， 在应用收到该事件后，release 资源。\r\n\r\n另外好奇的问一下： 之前有监听 ContextClosedEvent， 并且在收到该事件后 release 资源，但是该事件在 2.7.8 版本里面被去掉了，不 知道是什么原因。",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8469/comments",
    "author": "wangbin77",
    "comments": [
      {
        "user": "wangbin77",
        "created_at": "2021-09-04T11:05:24Z",
        "body": "Is anyone handling this issue?"
      },
      {
        "user": "wangbin77",
        "created_at": "2021-09-10T06:43:20Z",
        "body": "@AlbumenJ  Can you take a look at this issue. I've translated it into English."
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-12-03T14:53:51Z",
        "body": "@wangbin77 Please provide the dubbo version, and confirm whether the latest version has this problem."
      },
      {
        "user": "CrazyHZM",
        "created_at": "2022-01-06T12:34:13Z",
        "body": "No feedback for a long time, please close the issue temporarily. If there is still a problem, you can reopen it."
      }
    ]
  },
  {
    "number": 8408,
    "title": "注册中心问题：如何定义注册到的注册中心上的dubbo server 名称",
    "created_at": "2021-07-30T08:40:11Z",
    "closed_at": "2021-09-23T03:39:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8408",
    "body": "因为有些原因，没有办法使用公用的api模块暴露接口给consumer，只能在consumer内部自定义一个包路径和类名称一摸一样的接口，有没有办法自定义这个名称，因为我看注册到nacos上的名称都是 （包路径+类名+版本号）这种形式。",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8408/comments",
    "author": "sephiroka",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2021-08-11T03:31:03Z",
        "body": "可以尝试自己实现一个注册中心以自定义写入格式"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-23T03:39:34Z",
        "body": "The above answer should solve your problem, temporarily close the issue, if there are other problems, you can open the issue at any time\r\n@sephiroka "
      }
    ]
  },
  {
    "number": 8339,
    "title": "EventPublishingServiceDiscovery destroy check duplicated",
    "created_at": "2021-07-22T16:43:38Z",
    "closed_at": "2021-09-28T00:08:43Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8339",
    "body": "In the org.apache.dubbo.registry.client.EventPublishingServiceDiscovery.destroy():\r\n```java\r\n    public void destroy() {\r\n\r\n        assertDestroyed(DESTROY_ACTION); // 内部调用了isDestroyed方法,如果已经destroy则抛出异常\r\n\r\n        if (isDestroyed()) { // 此处再次进行判断,如果已经destroy,则打印日志\r\n            if (logger.isWarnEnabled()) {\r\n                logger.warn(\"It's ignored to stop current ServiceDiscovery, because it has been stopped.\");\r\n            }\r\n            return;\r\n        }\r\n```\r\n\r\nCan this place be optimized? If necessary, I can submit a PR.",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8339/comments",
    "author": "hengyoush",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2021-07-27T12:31:17Z",
        "body": "Do it with confidence."
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-23T05:44:34Z",
        "body": "@hengyoush \r\nAre you still paying attention to this issue?"
      }
    ]
  },
  {
    "number": 8133,
    "title": "dubbo2.7.8 之后没有监听spring的ContextClosedEvent 事件了？",
    "created_at": "2021-06-24T08:41:05Z",
    "closed_at": "2021-12-23T12:16:25Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8133",
    "body": "",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8133/comments",
    "author": "thedownup",
    "comments": [
      {
        "user": "thedownup",
        "created_at": "2021-06-24T08:42:07Z",
        "body": "springboot 关闭后 dubbo的executorService 没有关闭"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-06-24T11:10:07Z",
        "body": "can you provider a demo to reproduce this problem ? \r\nIn my impression, ContextClosedEvent is used."
      },
      {
        "user": "thedownup",
        "created_at": "2021-06-28T07:00:16Z",
        "body": "> can you provider a demo to reproduce this problem ?\r\n> In my impression, ContextClosedEvent is used.\r\n\r\nAwaitingNonWebApplicationListener.java\r\n protected void onApplicationReadyEvent(ApplicationReadyEvent event) {\r\n\r\n        final ConfigurableApplicationContext applicationContext = event.getApplicationContext();\r\n\r\n        if (!isRootApplicationContext(applicationContext) || isWebApplication(applicationContext)) {\r\n            return;\r\n        }\r\n\r\n        if (applicationContextId.compareAndSet(UNDEFINED_ID, applicationContext.hashCode())) {\r\n            await();\r\n            releaseOnExit();\r\n        }\r\n    }\r\n\r\n  好像引入 devtools 时候 这个isWebApplication方法 会返回false 实际上是web环境 就导致执行了 await()  开启了线程 但是没有监听springboot的关闭事件 没关掉release()  项目报错后进程会一直在 2.7.8之前 这个类有onContextClosedEvent 没问题\r\n\r\n\r\n"
      },
      {
        "user": "stone-98",
        "created_at": "2021-09-30T03:13:03Z",
        "body": "org.apache.dubbo.config.spring.context.DubboDeployApplicationListener\r\n```java\r\n@Override\r\npublic void onApplicationEvent(ApplicationContextEvent event) {\r\n    if (event instanceof ContextRefreshedEvent) {\r\n        onContextRefreshedEvent((ContextRefreshedEvent) event);\r\n    } else if (event instanceof ContextClosedEvent) {\r\n        onContextClosedEvent((ContextClosedEvent) event);\r\n    }\r\n}\r\n```\r\n调用了release()"
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-18T12:20:12Z",
        "body": "The problem has been solved."
      }
    ]
  },
  {
    "number": 8121,
    "title": "Dubbo2.7.12 TagRouter能否让tag标签在一次远程调用后继续传递",
    "created_at": "2021-06-23T03:36:26Z",
    "closed_at": "2021-09-24T13:18:28Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8121",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.7.12\r\n* Operating System version: windows10\r\n* Java version: 1.8\r\n\r\n### Steps to reproduce this issue\r\n1. 准备 consumer 和 provider 各一个服务，consumer 为A应用，provider 为B应用。\r\n2. 应用A有方法 test  应用B有两个方法 b1、b2\r\n3.  A应用的test()方法中，远程调用B应用的b1和b2方法，调用B.b1()前设置tag路由标签\r\n\r\n测试代码如下：\r\n```\r\n public void test() {\r\n      RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY,\"tag1\");\r\n      B.b1();\r\n      B.b2();\r\n }\r\n```\r\n### Expected Result\r\n 使用dubbo2.7.12的TagRouter，在程序中多次串行的远程调用后，还能进行tag标签传递，\r\n 比如：调用B.b1()后，能把tag标签继续传递下去，使得B.b2()执行时，也能拿到tag标签，使得TagRouter可以按照tag去路由指定的节点。\r\n\r\n\r\n### Actual Result\r\n远程调用B.b1()时，通过debug，发现RpcContext.getContext().getAttachment(CommonConstants.TAG_KEY) 能正常拿到tag1的标签，但当B.b2()的时候，RpcContext.getContext().getAttachment(CommonConstants.TAG_KEY)就为null了\r\n\r\n\r\n目前的尝试：当第一次调用时，把tag存起来（使用ThreadLocal等），当第二次远程调用b2方法的时候，使用自定义Filter，把tag标签再set到Attachment里。但是尝试中发现，目前的dubbo版本中，Router在Filter前先执行了，所以即使自定义Filter，也没法在以在Router执行前塞入tag。导致无法正确路由。\r\n\r\n### Help\r\n**除了自定义一个TagRouter外，是否有个方案，可以把当前tag标签在Router执行前塞到Attachment里**\r\n\r\n如果可以，是否能在2.7.13的版本里能作为一个enhancement，支持这样的策略。\r\n\r\n \r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8121/comments",
    "author": "ericren",
    "comments": [
      {
        "user": "24kpure",
        "created_at": "2021-06-24T07:09:47Z",
        "body": "Tag route has two implements, flow tag and  service tag.\r\nSticking tag in sevice slove this problem ，for example， add vm params -Ddubbo.tag=yourTag.\r\n"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-24T13:18:28Z",
        "body": "Try to use the above answer to solve the problem, temporarily close it, if there are other problems, you can reopen the issue.\r\n@ericren "
      },
      {
        "user": "JayeShen",
        "created_at": "2021-11-02T10:37:29Z",
        "body": "正如你说的：Router在Filter前先执行了，所以即使自定义Filter，也没法在以在Router执行前塞入tag。导致无法正确路由。\r\n所以你可以扩展一个cluster，在这个阶段讲tag塞入，或者扩展一个其他的阶段，我目前是这样实现的。"
      },
      {
        "user": "AlbumenJ",
        "created_at": "2021-11-09T02:20:55Z",
        "body": "> 正如你说的：Router在Filter前先执行了，所以即使自定义Filter，也没法在以在Router执行前塞入tag。导致无法正确路由。 所以你可以扩展一个cluster，在这个阶段讲tag塞入，或者扩展一个其他的阶段，我目前是这样实现的。\r\n\r\nDubbo 3.0 中可以使用 ClusterFilter"
      }
    ]
  },
  {
    "number": 8052,
    "title": "WARN org.apache.dubbo.config.spring.beans.factory.config.DubboConfigEarlyInitializationPostProcessor CommonAnnotationBeanPostProcessor is not registered yet, the method addIntoConfigManager() will be invoked directly",
    "created_at": "2021-06-15T09:23:22Z",
    "closed_at": "2021-06-16T11:42:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/8052",
    "body": "log WARN org.apache.dubbo.config.spring.beans.factory.config.DubboConfigEarlyInitializationPostProcessor CommonAnnotationBeanPostProcessor is not registered yet, the method addIntoConfigManager() will be invoked directly\r\n\r\nhow to resolve ?",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/8052/comments",
    "author": "NickZhang1024",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2021-06-16T11:42:30Z",
        "body": "The reason for this alarm log may be that your project does not use any annotations, such as @Resource annotations, to trigger bean loading. At this time, in order to ensure that the ConfigManage required in dubbo is initialized normally, addIntoConfigManager() will be executed automatically. If annotations are added, CommonAnnotationBeanPostProcessor will be created in the spring container, thereby triggering the addIntoConfigManager() method in CommonAnnotationBeanPostProcessor.\r\nYou can try to add some comments, or you can choose to ignore the log."
      }
    ]
  },
  {
    "number": 7831,
    "title": "AbstractMetadataReport里的Local disk cache properties对象能否用于本地自定义metadata-report",
    "created_at": "2021-05-22T16:53:37Z",
    "closed_at": "2021-05-28T01:41:04Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/7831",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.7.10\r\n* Operating System version: xxx\r\n* Java version: jdk11\r\n\r\n1 AbstractMetadataReport里的Local disk cache properties对象我看只做了保存操作，并没有读取使用的操作，这是为什么？\r\n就是这个对象：\r\n    // Local disk cache, where the special key value.registries records the list of metadata centers, and the others are the list of notified service providers\r\n    final Properties properties = new Properties();\r\n\r\n2 我能否借用这个properties去实现自己定义的metadata-report读取，因为我不想依赖zk或redis等远程服务，希望把元数据放在本地保存和读取\r\n\r\n谢谢！",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/7831/comments",
    "author": "jackjoesh",
    "comments": [
      {
        "user": "xiaoheng1",
        "created_at": "2021-05-23T07:32:09Z",
        "body": "In this scenario, I understand that you can extend a MetadataReport implementation class."
      },
      {
        "user": "jackjoesh",
        "created_at": "2021-05-23T08:24:25Z",
        "body": "是的我可以继承MetadataReport，但是我想问的是final Properties properties = new Properties();这个对象我能否用来做读取查询呢？  因为我看它在AbstractMetadataReport里已经被保存了，但却没有被使用过"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-05-23T08:33:04Z",
        "body": "properties are used, and will be loaded in the AbstractMetadataReport constructor. see loadProperties method please."
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-05-23T08:37:14Z",
        "body": "If you use this for query, I think it is possible."
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-05-23T08:39:08Z",
        "body": "Please take a look at the getExportedURLs method, it's just that no data is read from the cache file now, it should be implemented in the future."
      },
      {
        "user": "jackjoesh",
        "created_at": "2021-05-23T08:53:04Z",
        "body": "thank you for help！"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-05-26T06:10:33Z",
        "body": "&READY-TO-CLOSE&"
      }
    ]
  },
  {
    "number": 7673,
    "title": "dubbo2.7.8 And above，report errors：<dubbo:service interface=\"\" /> interface not allow null!，but Version 2.7.7 and below is normal",
    "created_at": "2021-05-05T08:22:06Z",
    "closed_at": "2021-12-24T07:29:26Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/7673",
    "body": "* Dubbo version: 2.7.8 And above\r\n* Operating System version: win10\r\n* Java version: 1.8\r\n\r\nVersion 2.7.7 and below is normal\r\n### Steps to reproduce this issue\r\n\r\n@DubboService(version = \"${platform.service.version}\", interfaceClass = ISysUserManageService.class)\r\npublic class SysUserManageServiceImpl extends BaseServiceImpl implements ISysUserManageService {\r\n    @DubboReference(version = \"${platform.service.version}\", url = \"${dubboReference.url}\", lazy = true)\r\n    ICompanyService companyService;\r\n\r\nnested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/7673/comments",
    "author": "gang0713",
    "comments": [
      {
        "user": "horizonzy",
        "created_at": "2021-05-06T07:42:42Z",
        "body": "Hi, Is there detail stack info for this error, I can't reproduce it."
      },
      {
        "user": "gang0713",
        "created_at": "2021-05-10T01:19:47Z",
        "body": "\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'consoleLoginServiceImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\sysuser\\scm-service-sysuser-impl\\target\\classes\\com\\xykq\\modules\\sysuser\\services\\impl\\ConsoleLoginServiceImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.company.services.ICompanyService:1.0.0': Cannot resolve reference to bean 'companyServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'companyServiceImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\company\\scm-service-company-impl\\target\\classes\\com\\xykq\\modules\\company\\services\\impl\\CompanyServiceImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.credit.services.ICreditServices:1.0.0': Cannot resolve reference to bean 'creditServicesImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'creditServicesImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\credit\\scm-service-credit-impl\\target\\classes\\com\\xykq\\modules\\credit\\services\\impl\\CreditServicesImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143) ~[spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405) [spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.8.RELEASE.jar:2.3.8.RELEASE]\r\n\tat com.xykq.platform.PlatformApplication.main(PlatformApplication.java:16) [classes/:?]\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.company.services.ICompanyService:1.0.0': Cannot resolve reference to bean 'companyServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'companyServiceImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\company\\scm-service-company-impl\\target\\classes\\com\\xykq\\modules\\company\\services\\impl\\CompanyServiceImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.credit.services.ICreditServices:1.0.0': Cannot resolve reference to bean 'creditServicesImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'creditServicesImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\credit\\scm-service-credit-impl\\target\\classes\\com\\xykq\\modules\\credit\\services\\impl\\CreditServicesImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:342) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'companyServiceImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\company\\scm-service-company-impl\\target\\classes\\com\\xykq\\modules\\company\\services\\impl\\CompanyServiceImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.credit.services.ICreditServices:1.0.0': Cannot resolve reference to bean 'creditServicesImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'creditServicesImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\credit\\scm-service-credit-impl\\target\\classes\\com\\xykq\\modules\\credit\\services\\impl\\CreditServicesImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.credit.services.ICreditServices:1.0.0': Cannot resolve reference to bean 'creditServicesImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'creditServicesImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\credit\\scm-service-credit-impl\\target\\classes\\com\\xykq\\modules\\credit\\services\\impl\\CreditServicesImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:342) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'creditServicesImpl' defined in file [E:\\app\\workspace\\scm-boot\\modules\\credit\\scm-service-credit-impl\\target\\classes\\com\\xykq\\modules\\credit\\services\\impl\\CreditServicesImpl.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceBean:com.xykq.modules.sysuser.services.ISysUserManageService:1.0.0': Cannot resolve reference to bean 'sysUserManageServiceImpl' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:342) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysUserManageServiceImpl': Injection of @DubboReference dependencies is failed; nested exception is java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:146) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\nCaused by: java.lang.IllegalStateException: <dubbo:service interface=\"\" /> interface not allow null!\r\n\tat org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs(ServiceConfig.java:237) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:190) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:338) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1697) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1442) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1115) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.getServiceBean(ReferenceAnnotationBeanPostProcessor.java:344) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(ReferenceAnnotationBeanPostProcessor.java:336) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(ReferenceAnnotationBeanPostProcessor.java:329) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:157) ~[dubbo-2.7.10.jar:2.7.10]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.getInjectedObject(AbstractAnnotationBeanPostProcessor.java:359) ~[spring-context-support-1.0.6.jar:?]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor$AnnotatedFieldElement.inject(AbstractAnnotationBeanPostProcessor.java:539) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat com.alibaba.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.postProcessPropertyValues(AbstractAnnotationBeanPostProcessor.java:142) ~[spring-context-support-1.0.6.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]\r\n\t... 16 more\r\n\r\n2021-05-10 09:17:21.310  WARN 7204 --- [      Thread-46] c.a.n.c.n.NotifyCenter                   : [NotifyCenter] Start destroying Publisher\r\n2021-05-10 09:17:21.310  WARN 7204 --- [      Thread-46] c.a.n.c.n.NotifyCenter                   : [NotifyCenter] Destruction of the end\r\n2021-05-10 09:17:21.310  WARN 7204 --- [      Thread-29] c.a.n.c.h.HttpClientBeanHolder           : [HttpClientBeanHolder] Start destroying common HttpClient\r\n2021-05-10 09:17:21.312  WARN 7204 --- [      Thread-29] c.a.n.c.h.HttpClientBeanHolder           : [HttpClientBeanHolder] Destruction of the end\r\n\r\nProcess finished with exit code 1\r\n"
      },
      {
        "user": "gang0713",
        "created_at": "2021-05-10T01:23:36Z",
        "body": "> Hi, Is there detail stack info for this error, I can't reproduce it.\r\nadd @Lazy，No effect"
      },
      {
        "user": "horizonzy",
        "created_at": "2021-05-10T02:37:52Z",
        "body": "Hi, add @lazy also can't reproduce it, can you put the demo in your github repository, I will run it."
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-12-24T07:29:26Z",
        "body": "No feedback for a long time, please close the issue temporarily. If there is still a problem, you can reopen it."
      }
    ]
  },
  {
    "number": 7519,
    "title": "标签路由问题",
    "created_at": "2021-04-08T01:51:38Z",
    "closed_at": "2021-09-27T07:30:53Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/7519",
    "body": "java -jar xxx-provider.jar -Ddubbo.provider.tag={the tag you want, may come from OS ENV}\r\n\r\n请问我用的2.7.8版本测试，没有生效？",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/7519/comments",
    "author": "houwen0",
    "comments": [
      {
        "user": "gentryhuang",
        "created_at": "2021-04-28T09:21:58Z",
        "body": "检查是否同时使用了动态打标方式，动态打标优先级更高。"
      },
      {
        "user": "BigBlackSheep",
        "created_at": "2021-05-24T13:15:44Z",
        "body": "customer 如何调用的？"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-27T07:30:53Z",
        "body": "If you haven’t received feedback for a long time, close the issues first, and reopen it if you have any problems."
      },
      {
        "user": "wuwen5",
        "created_at": "2021-12-30T03:29:03Z",
        "body": "#9512 "
      },
      {
        "user": "wuwen5",
        "created_at": "2022-01-18T06:42:00Z",
        "body": "@AlbumenJ @CrazyHZM   这个问题简单验证了一下，的确是不生效啊。\r\n\r\n```TagRouter```\r\n```java\r\nprivate <T> List<Invoker<T>> filterUsingStaticTag(List<Invoker<T>> invokers, URL url, Invocation invocation) {\r\n        List<Invoker<T>> result;\r\n        // Dynamic param\r\n        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\r\n                invocation.getAttachment(TAG_KEY);\r\n        // Tag request\r\n        if (!StringUtils.isEmpty(tag)) {\r\n            // invoker.getUrl().getParameter(TAG_KEY)这里拿不到值的，详见#9512\r\n            result = filterInvoker(invokers, invoker -> tag.equals(invoker.getUrl().getParameter(TAG_KEY)));\r\n            if (CollectionUtils.isEmpty(result) && !isForceUseTag(invocation)) {\r\n                result = filterInvoker(invokers, invoker -> StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\r\n            }\r\n        } else {\r\n            result = filterInvoker(invokers, invoker -> StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\r\n        }\r\n        return result;\r\n    }\r\n```"
      }
    ]
  },
  {
    "number": 7430,
    "title": "关于DubboProtocol#initClient() 中 client type校验问题",
    "created_at": "2021-03-23T03:33:02Z",
    "closed_at": "2021-09-28T12:09:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/7430",
    "body": "dubbo中用到了SPI技术，比如在Transporter 中，可以分别自定义server和client；\r\n但在DubboProtocol#initClient() 有这样一段校验：\r\n```\r\n // client type setting.\r\n        String str = url.getParameter(CLIENT_KEY, url.getParameter(SERVER_KEY, DEFAULT_REMOTING_CLIENT));\r\n\r\n// BIO is not allowed since it has severe performance issue.\r\nif (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\r\n\tthrow new RpcException(\"Unsupported client type: \" + str + \",\" +\r\n                    \" supported client type is \" + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), \" \"));\r\n}\r\n```\r\n\r\n即client端如果没有配置，会默认使用server的配置。\r\n\r\n这样会导致一个问题，即在生产环境中，如果有多个consumer业务方，如果provider先上线，会导致client端报\"Unsupported client type: \" ，只能等consumer端所有业务都上线后，才能上线provider端。\r\n\r\nTransporter 分别配置了client 和server，目的就是可以分别配置，例如mynetty，如果有了上述检查，无法做到平滑上线。\r\n\r\n此处检查，是否可以删除？删除后会导致什么后果？或者有什么平滑上线方案？",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/7430/comments",
    "author": "fsx379",
    "comments": [
      {
        "user": "xiaoheng1",
        "created_at": "2021-03-29T03:28:19Z",
        "body": "let me have a look."
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-03-29T04:16:27Z",
        "body": "@fsx379  Under what scenario is the transmission protocol of the provider and the consumer inconsistent?"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-03-29T06:20:28Z",
        "body": "Can you configure the client parameters on the consumer side to solve this problem?"
      },
      {
        "user": "fsx379",
        "created_at": "2021-03-30T01:30:28Z",
        "body": "> Can you configure the client parameters on the consumer side to solve this problem?\r\n\r\nconsumer 和provider 都配置了，但是面对复杂的生产环境，无法要求consumer全部升级上线后，才能让provider升级上线。所以核心问题还是在于无法平滑上线。在生产过程投产过程中，如果任意节点上线，对上下游都是兼容和无感的，那是最好的，否则成本极大，极易造成在线故障。"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-03-30T01:40:21Z",
        "body": "> > Can you configure the client parameters on the consumer side to solve this problem?\r\n> \r\n> consumer 和provider 都配置了，但是面对复杂的生产环境，无法要求consumer全部升级上线后，才能让provider升级上线。所以核心问题还是在于无法平滑上线。在生产过程投产过程中，如果任意节点上线，对上下游都是兼容和无感的，那是最好的，否则成本极大，极易造成在线故障。\r\n\r\nWhy does the configuration of the client on the consumer side cause Unsupported client type errro? In my opinion, if the client is configured on the consumer side, the configuration on the consumer side will be used"
      },
      {
        "user": "fsx379",
        "created_at": "2021-04-04T02:30:59Z",
        "body": "> > > Can you configure the client parameters on the consumer side to solve this problem?\r\n> > \r\n> > \r\n> > consumer 和provider 都配置了，但是面对复杂的生产环境，无法要求consumer全部升级上线后，才能让provider升级上线。所以核心问题还是在于无法平滑上线。在生产过程投产过程中，如果任意节点上线，对上下游都是兼容和无感的，那是最好的，否则成本极大，极易造成在线故障。\r\n> \r\n> Why does the configuration of the client on the consumer side cause Unsupported client type errro? In my opinion, if the client is configured on the consumer side, the configuration on the consumer side will be used\r\n\r\n根本原因，还是因为在复杂的生产环境里面，无法保证所有consumer的改造上线，一定在provider之前"
      },
      {
        "user": "huibinliupush",
        "created_at": "2021-04-04T02:45:22Z",
        "body": "不是有Default remote tpye作为默认值么？为什么会报unsupported client type？"
      },
      {
        "user": "xiaoheng1",
        "created_at": "2021-04-04T22:51:25Z",
        "body": "> > > > Can you configure the client parameters on the consumer side to solve this problem?\r\n> > > \r\n> > > \r\n> > > consumer 和provider 都配置了，但是面对复杂的生产环境，无法要求consumer全部升级上线后，才能让provider升级上线。所以核心问题还是在于无法平滑上线。在生产过程投产过程中，如果任意节点上线，对上下游都是兼容和无感的，那是最好的，否则成本极大，极易造成在线故障。\r\n> > \r\n> > \r\n> > Why does the configuration of the client on the consumer side cause Unsupported client type errro? In my opinion, if the client is configured on the consumer side, the configuration on the consumer side will be used\r\n> \r\n> 根本原因，还是因为在复杂的生产环境里面，无法保证所有consumer的改造上线，一定在provider之前\r\n\r\n@AlbumenJ What is your opinion?"
      },
      {
        "user": "fsx379",
        "created_at": "2021-05-27T12:40:17Z",
        "body": "最后，我们通过在resources/META-INF/dubbo/internal下放置com.alibab.dubbo.remoting.Transporter，并将netty4 指到自定义的实现上，才避免provider上线时，consumer还没有上线，导致consumer找不到 自定义的Transporter的问题。"
      },
      {
        "user": "AlbumenJ",
        "created_at": "2021-05-28T09:37:20Z",
        "body": "> 此处检查，是否可以删除？删除后会导致什么后果？或者有什么平滑上线方案？\r\n\r\n@fsx379 这里如果删除后，Invoker 正常构造，会导致在 RPC 调用过程中发现无法找到 SPI，导致 RPC 流量调用失败。这里是个尽早报错的操作。如果升级版本需要切换 Transport 这种的建议使用 version 标记接口，避免低版本的 consumer 使用这部分地址。"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-28T12:09:30Z",
        "body": "No feedback.\r\nTemporarily close the issues first, if there are still problems, you can open the issues at any time."
      }
    ]
  },
  {
    "number": 7151,
    "title": "Filter不执行问题",
    "created_at": "2021-01-29T03:50:50Z",
    "closed_at": "2021-09-27T04:18:14Z",
    "labels": [
      "status/waiting-for-feedback",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/7151",
    "body": "@Reference(version = \"1.0.0\",group = \"XXX\",owner = \"XXX\",filter = \"rpcSendFilter\")\r\n使用注解配置Filter在多个类中引用, 其中某个类不设置filter, 会导致其他类中引用该接口 的filter失效",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/7151/comments",
    "author": "cjx-object",
    "comments": [
      {
        "user": "xiaoheng1",
        "created_at": "2021-01-29T07:19:00Z",
        "body": "能提供一个 demo 不？"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-09-27T04:18:14Z",
        "body": "There is no feedback for a long time, temporarily close this issue."
      }
    ]
  },
  {
    "number": 6994,
    "title": "请问dubbo2.7怎样通过配置中心获得一组属性配置？类似于springboot的@@ConfigurationProperties(\"XXX\")形式来获取yaml的值",
    "created_at": "2020-12-07T03:02:57Z",
    "closed_at": "2021-12-23T11:24:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/6994",
    "body": "```\r\ntest:\r\n    key1: |\r\n      kind:\r\n        - kind1:\r\n            name: \"fruit\"\r\n    key2: |\r\n      kind:\r\n        - kind2:\r\n            name2: \"fruit2\"\r\n```\r\n上面是我想要配置的属性格式，但是我发现properties配置文件里面都是key:value的形式。我想通过：get属性（test）,或者key1和key2的属性值为map形式（eg,key1:kind:- kind1:name: \"fruit\"）,因为我后面想进一步把value的值近一步转换为map。\r\n2.dubbo中有可以直接使用yaml配置文件的案例吗？如果可以直接读取yaml，上面的问题也就解决了，只是我看文档没有发现可以这么操作的。希望能得到指教一下。十分感谢。",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/6994/comments",
    "author": "develpoerX",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2021-12-23T11:24:32Z",
        "body": "在最新版本中已经支持读取yaml的配置方式了。"
      }
    ]
  },
  {
    "number": 5929,
    "title": "有关泛化调用的一些问题",
    "created_at": "2020-03-27T08:29:44Z",
    "closed_at": "2021-11-06T02:47:25Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/5929",
    "body": "1. 不管服务提供方抛出什么异常，消费方接收到的都是 RpcException 且 异常堆栈被以字符串的方式 放在 exceptionMessage中\r\n2. 消费方传输的参数中一旦包含有数组字段，且数组中包含 null元素，服务提供方会抛NullPointerException\r\n3. 涉及到泛型的时候，为什么需要消费方在数据中增加class字段？ 我在使用spring mvc或者其他框架时没有遇到过有需要调用方传输类型才能够正确工作的情况\r\n4. 如果服务提供方的Dubbo Filter中抛出了异常，那么消费方接收到的RpcException的code均为 RpcException.NETWORK_EXCEPTION，给消费方的异常判断造成了困扰\r\n5. 在早期的版本中，泛化调用时，路由规则是不生效的\r\n\r\n以上我均可以提供相关示例代码",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/5929/comments",
    "author": "chocotan",
    "comments": [
      {
        "user": "powerttt",
        "created_at": "2020-03-28T01:29:29Z",
        "body": "同样遇到此类问题，重写GenericFilter拦截自定义的异常无效了,还没有找到优雅的绝决方案。泛化调用时，提供者返回的结果对象，都会加入class属性。"
      },
      {
        "user": "chickenlj",
        "created_at": "2020-03-28T15:28:26Z",
        "body": "> 消费方传输的参数中一旦包含有数组字段，且数组中包含 null元素，服务提供方会抛NullPointerException\r\n\r\n>如果服务提供方的Dubbo Filter中抛出了异常，那么消费方接收到的RpcException的code均为 RpcException.NETWORK_EXCEPTION，给消费方的异常判断造成了困扰\r\n\r\n以上两点在接下来的版本会进行修复"
      },
      {
        "user": "chickenlj",
        "created_at": "2020-03-28T15:29:34Z",
        "body": "> 如果服务提供方的Dubbo Filter中抛出了异常，那么消费方接收到的RpcException的code均为 RpcException.NETWORK_EXCEPTION，给消费方的异常判断造成了困扰\r\n\r\n> 在早期的版本中，泛化调用时，路由规则是不生效的\r\n\r\n这两点会进一步予以确认"
      },
      {
        "user": "Jijun",
        "created_at": "2020-07-10T09:22:37Z",
        "body": "> 消费方传输的参数中一旦包含有数组字段，且数组中包含 null元素，服务提供方会抛NullPointerException\r\n\r\n我们遇到了同样的问题。同样是数组中有null元素。"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-11-06T02:47:25Z",
        "body": "After confirming, the above problems have not been reproduced in the new version, please provide your version number, or try it with the latest version, if you still have problems, you can reopen the issue."
      },
      {
        "user": "HRsGIT",
        "created_at": "2022-10-16T07:07:33Z",
        "body": "> 1. 不管服务提供方抛出什么异常，消费方接收到的都是 RpcException 且 异常堆栈被以字符串的方式 放在 exceptionMessage中\r\n> 2. 消费方传输的参数中一旦包含有数组字段，且数组中包含 null元素，服务提供方会抛NullPointerException\r\n> 3. 涉及到泛型的时候，为什么需要消费方在数据中增加class字段？ 我在使用spring mvc或者其他框架时没有遇到过有需要调用方传输类型才能够正确工作的情况\r\n> 4. 如果服务提供方的Dubbo Filter中抛出了异常，那么消费方接收到的RpcException的code均为 RpcException.NETWORK_EXCEPTION，给消费方的异常判断造成了困扰\r\n> 5. 在早期的版本中，泛化调用时，路由规则是不生效的\r\n> \r\n> 以上我均可以提供相关示例代码\r\n\r\n\r\n\r\n> 1. 不管服务提供方抛出什么异常，消费方接收到的都是 RpcException 且 异常堆栈被以字符串的方式 放在 exceptionMessage中\r\n> 2. 消费方传输的参数中一旦包含有数组字段，且数组中包含 null元素，服务提供方会抛NullPointerException\r\n> 3. 涉及到泛型的时候，为什么需要消费方在数据中增加class字段？ 我在使用spring mvc或者其他框架时没有遇到过有需要调用方传输类型才能够正确工作的情况\r\n> 4. 如果服务提供方的Dubbo Filter中抛出了异常，那么消费方接收到的RpcException的code均为 RpcException.NETWORK_EXCEPTION，给消费方的异常判断造成了困扰\r\n> 5. 在早期的版本中，泛化调用时，路由规则是不生效的\r\n> \r\n> 以上我均可以提供相关示例代码\r\n\r\n请问可以提供示例代码吗 我在复现时候好像并没有遇到2和4问题"
      }
    ]
  },
  {
    "number": 5683,
    "title": "获取Adaptive扩展时存在循环注入的问题",
    "created_at": "2020-01-17T09:09:51Z",
    "closed_at": "2021-10-31T11:14:43Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/5683",
    "body": "dubbo获取Adaptive扩展时会先调用injectExtension方法,通过set方法注入之后再返回暴露给外界使用.注入的对象来源是通过SpiExtensionFactory得到的,但是SpiExtensionFactory也是获取的Adaptive扩展.如果此时有A,B两个类,两者都有对方的set方法,那么虽然在启动时不会报错(注入时会catch到栈溢出异常退出),但其实创建了很多个A和B的对象.关键的是,获取到的A和B内部的对象不是对方,使用时会出现问题",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/5683/comments",
    "author": "eye-gu",
    "comments": [
      {
        "user": "xylsh",
        "created_at": "2020-02-29T14:52:48Z",
        "body": "循环依赖的时候，代码抛出的stackoverflowerror会被捕获后logger打印，然后这个error就不管了，dubbo继续运行。个人认为这种情况dubbo不应该继续执行？   @chickenlj "
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-31T11:14:43Z",
        "body": "The relevant logic has changed, try it with the latest version, if you still have problems, you can reopen the issue"
      }
    ]
  },
  {
    "number": 5658,
    "title": "Dubbo2.7.5 报Could not initialize class org.springframework.beans.factory.BeanCreationException",
    "created_at": "2020-01-15T12:47:21Z",
    "closed_at": "2020-01-16T06:40:00Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/5658",
    "body": "我的项目配置-Xss时候会引起Could not initialize class org.springframework.beans.factory.BeanCreationException 错误。\r\n\r\n1. 当java_mem_opts= -server -Xmx2g -XX:MetaspaceSize=128m -Xss256k  \r\n报\r\nException in thread \"main\" java.lang.NoClassDefFoundError: Could not initialize class org.springframework.beans.factory.BeanCreationException\r\n\r\n2. java_mem_opts= -server -Xmx2g -XX:MetaspaceSize=128m -Xss512k\r\n就不会报，可以正常启动\r\n\r\n完成错误日志如下：\r\nException in thread \"main\" java.lang.NoClassDefFoundError: Could not initialize class org.springframework.beans.factory.BeanCreationException\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:510)\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)\r\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\r\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846)\r\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863)\r\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)\r\n        at org.apache.dubbo.container.spring.SpringContainer.start(SpringContainer.java:50)\r\n        at org.apache.dubbo.container.Main.main(Main.java:90)",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/5658/comments",
    "author": "cookieka",
    "comments": [
      {
        "user": "mercyblitz",
        "created_at": "2020-01-16T06:40:00Z",
        "body": "It's not an issue, because of a lot API in Spring Framework uses Java reflection or recursive invocations, their stack require more space."
      }
    ]
  },
  {
    "number": 5074,
    "title": "Use the echo test to throw a ClassCastException",
    "created_at": "2019-09-17T07:04:22Z",
    "closed_at": "2021-09-26T14:12:25Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/5074",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.7.3\r\n* Operating System version: mac\r\n* Java version: 1.8\r\n\r\n### Steps to reproduce this issue\r\n```\r\n@Service\r\npublic class DubboEchoService {\r\n\r\n    @Reference(version=\"1.0.0\")\r\n    private DemoService demoService;\r\n\r\n    public void test(){\r\n        EchoService echoService = (EchoService) demoService;\r\n        Object status = echoService.$echo(\"OK\");\r\n        System.out.println(status);\r\n    }\r\n}\r\n```\r\n\r\n```\r\njava.lang.ClassCastException: com.sun.proxy.$Proxy55 cannot be cast to org.apache.dubbo.rpc.service.EchoService\r\n```\r\n\r\nI found all the examples were through  <dubbo:reference />\r\n, but we have no XML file in spring boot and can only use the annotation, but found the error\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/5074/comments",
    "author": "kiwiflydream",
    "comments": [
      {
        "user": "CodingSinger",
        "created_at": "2019-09-19T06:26:09Z",
        "body": "yes, it's a bug, because the annotation processor only use the DemoService as the proxy interface. we will fix it soon."
      },
      {
        "user": "kiwiflydream",
        "created_at": "2019-09-19T06:36:34Z",
        "body": "Thanks."
      },
      {
        "user": "Leishunyu",
        "created_at": "2019-10-14T08:52:24Z",
        "body": "I did not reproduce this problem."
      },
      {
        "user": "hhofchina",
        "created_at": "2019-12-20T01:46:02Z",
        "body": "reproduce: annotation config dubbo \r\n\r\n        Assert.assertEquals(\"OK\", ((EchoService) yourDubboService).$echo(\"OK\"));\r\n\r\nclass com.sun.proxy.$Proxy106 cannot be cast to class org.apache.dubbo.rpc.service.EchoService (com.sun.proxy.$Proxy106 and org.apache.dubbo.rpc.service.EchoService are in unnamed module of loader 'app')"
      },
      {
        "user": "changfubai",
        "created_at": "2021-09-26T12:53:56Z",
        "body": "I did not reproduce on master, I guess it has been fixed.\r\nmay @CrazyHZM  close it ?"
      }
    ]
  },
  {
    "number": 4280,
    "title": "dubbo tps 元数据类StatItem 内存可见性问题",
    "created_at": "2019-06-12T02:56:18Z",
    "closed_at": "2021-10-30T02:28:50Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/4280",
    "body": "Environment\r\nDubbo version: master\r\nStep to reproduce this issue\r\n\r\n```java\r\npublic boolean isAllowable() {\r\n        long now = System.currentTimeMillis();\r\n        if (now > lastResetTime + interval) {\r\n            token.set(rate);\r\n            lastResetTime = now;\r\n        }\r\n\r\n        int value = token.get();\r\n        boolean flag = false;\r\n        while (value > 0 && !flag) {\r\n            flag = token.compareAndSet(value, value - 1);\r\n            value = token.get();\r\n        }\r\n\r\n        return flag;\r\n    }\r\n```\r\n\r\nExpected Result\r\nlastResetTime 共享变量是否有内存可见性问题\r\n\r\n```java\r\n if (now > lastResetTime + interval) {\r\n            token.set(rate);\r\n            lastResetTime = now;\r\n        }\r\n```\r\n\r\n有并发问题吗？\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/4280/comments",
    "author": "wangqingchengsg",
    "comments": [
      {
        "user": "kexianjun",
        "created_at": "2019-06-14T01:12:04Z",
        "body": "I think it will."
      },
      {
        "user": "wangqingchengsg",
        "created_at": "2019-06-14T07:08:33Z",
        "body": "> I think it will.\r\n\r\n那 亲们会改吗，或者亲们认为这不是一个bug"
      }
    ]
  },
  {
    "number": 4108,
    "title": "Remove the incubating word in README",
    "created_at": "2019-05-22T02:28:47Z",
    "closed_at": "2019-05-22T13:21:13Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/4108",
    "body": "Dubbo has graduated, remove the incubating word in README.",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/4108/comments",
    "author": "ralf0131",
    "comments": [
      {
        "user": "Leishunyu",
        "created_at": "2019-05-22T03:19:07Z",
        "body": "i had remove"
      }
    ]
  },
  {
    "number": 3884,
    "title": "metadata report doesn't support the placeholder",
    "created_at": "2019-04-16T13:38:40Z",
    "closed_at": "2021-12-17T05:28:06Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3884",
    "body": "In the application.yml, the address contains place holder, couldn't be replaced at runtime.\r\nInstead, the address of metadata-report would be zookeeper://\r\n\r\n```\r\ndubbo:\r\n  application:\r\n    name: test\r\n  registry:\r\n    protocol: zookeeper\r\n    address: ${middleware.zk.address}\r\n    simplified: true\r\n  metadata-report:\r\n    address: zookeeper://${middleware.zk.address}\r\n    valid: true\r\n  config:\r\n    multiple: false\r\n```",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3884/comments",
    "author": "iapplejohn",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2021-12-17T05:28:06Z",
        "body": "Try it with the latest version, if you still have problems, you can reopen the issue"
      }
    ]
  },
  {
    "number": 3721,
    "title": "make sure all files has ASF license header.",
    "created_at": "2019-03-22T08:51:40Z",
    "closed_at": "2019-05-06T06:25:42Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3721",
    "body": "Source file have ASF headers. There are a few xml files and shell scripts that are missing ASF headers.",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3721/comments",
    "author": "beiwei30",
    "comments": [
      {
        "user": "wanghbxxxx",
        "created_at": "2019-03-24T09:48:17Z",
        "body": "i'd like to fix it, pls assign it to me"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2019-03-24T16:31:21Z",
        "body": "> i'd like to fix it, pls assign it to me\r\n\r\n\r\nPlease feel free to submit"
      },
      {
        "user": "htynkn",
        "created_at": "2019-03-29T07:18:53Z",
        "body": "we should have maven plugin to do this check?\r\ndo we have any configuration issue for that plugin?"
      },
      {
        "user": "lovepoem",
        "created_at": "2019-03-29T09:30:59Z",
        "body": "Now rat plugin can check the asf header , but some file type is excluded. @beiwei30, can you please point out the file type check list ?"
      }
    ]
  },
  {
    "number": 3627,
    "title": "Describe org.apache.dubbo.registry.ZKTools",
    "created_at": "2019-03-11T02:23:01Z",
    "closed_at": "2020-08-07T03:30:20Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3627",
    "body": "The code is just for testing purpose.\r\n\r\nI found that when using zkcli to write node value with new line character, the \"\\n\" will be treated as \"\\\\\" and \"n\" by zkcli. \r\n\r\nThe work around is to use the Java API provided by curator, this is why the ZKTools class is written.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3627/comments",
    "author": "ralf0131",
    "comments": [
      {
        "user": "JerryChin",
        "created_at": "2019-03-11T02:45:24Z",
        "body": "I'm a bit confused, `org.apache.dubbo.registry.ZKTools` has resided in the test directory of `dubbo-registr-api` in `master` branch since its creation, as observed from its version history, am I missing something?"
      },
      {
        "user": "ralf0131",
        "created_at": "2019-03-11T02:49:00Z",
        "body": "You are right, my bad... Maybe it is better add some description to the class."
      }
    ]
  },
  {
    "number": 3535,
    "title": "ProtocolConfig配置不生效",
    "created_at": "2019-02-21T09:37:06Z",
    "closed_at": "2021-06-14T09:13:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3535",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.7.0\r\n* Operating System version: Windows\r\n* Java version: 1.8\r\n\r\n我从dubbo2.6.5升级到2.7.0之后，通过ProtocolConfig配置，如下：\r\n```java\r\n        @Bean\r\n\tpublic ProtocolConfig protocolConfig() {\r\n\t\tProtocolConfig config = new ProtocolConfig();\r\n\t\tconfig.setName(\"dubbo\");\r\n\t\tconfig.setServer(\"netty4\");\r\n\t\tconfig.setPort(10003);\r\n\t\tconfig.setHost(\"192.168.1.11\");\r\n\t\tconfig.setSerialization(\"hessian2\");\r\n\t\tconfig.setThreads(500);\r\n\t\treturn config;\r\n\t}\r\n```\r\n来配置我要暴露的地址，结果通过zk客户端工具查看到providers下面注册的内容value是127.0.0.1，我的consumer也一直都连不上这个服务，consumer在另外的局域网地址上。请问如何解决此问题，在dubbo2.6.5的时候是192.168.1.11",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3535/comments",
    "author": "haozi000005",
    "comments": [
      {
        "user": "limng06",
        "created_at": "2019-02-22T01:47:08Z",
        "body": "我从dubbo2.6.5升级到2.7.0之后 xml中的 rest protocol配置也失效了"
      },
      {
        "user": "chickenlj",
        "created_at": "2019-02-27T07:07:26Z",
        "body": "@haozi000005 有问题原因的进展么？我来尝试复现一下问题"
      },
      {
        "user": "AlbumenJ",
        "created_at": "2021-06-14T09:13:32Z",
        "body": "可以使用指定绑定网卡的方式"
      }
    ]
  },
  {
    "number": 3475,
    "title": "Dubbo2.6.5 with spring-boot 2.1.1.release can not running with tomcat",
    "created_at": "2019-02-14T08:30:33Z",
    "closed_at": "2021-06-14T09:12:33Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3475",
    "body": "The project use :\r\n<dubbo.starter.version>0.2.1.RELEASE</dubbo.starter.version>\r\n\t\t<dubbo.version>2.6.5</dubbo.version>\r\n\t\t<zk.client.version>0.10</zk.client.version>\r\n\t\t<dubbo.spring.context.version>1.0.2</dubbo.spring.context.version>\r\n\t\t<curator-framework.version>2.12.0</curator-framework.version>\r\n               <spring.boot.version>2.1.1.RELEASE</spring.boot.version>\r\n\r\ncould running well in embed tomcat with jar type/application start-up, but when I want to deploy and running with external tomcat, met system-errors: \r\norg.apache.catalina.core.ApplicationContext.log 2 Spring WebApplicationInitializers detected on classpath\r\n13-Feb-2019 18:44:28.447 信息 [main] org.apache.catalina.core.ApplicationContext.log Initializing Spring embedded WebApplicationContext\r\n13-Feb-2019 18:44:38.209 严重 [main] org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class [org.springframework.web.context.ContextLoaderListener]\r\n java.lang.IllegalStateException: Cannot initialize context because there is already a root application context present - check whether you have multiple ContextLoader* definitions in your web.xml!\r\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:262)\r\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)\r\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4643)\r\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5105)\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\r\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:740)\r\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:716)\r\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:703)\r\n\tat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:976)\r\n\tat org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1847)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\r\n\tat java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)\r\n\tat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:761)\r\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:431)\r\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1575)\r\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\r\n\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\r\n\tat org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\r\n\tat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\r\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:964)\r\n\tat org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:839)\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\r\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1425)\r\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1415)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\r\n\tat java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)\r\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:941)\r\n\tat org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:258)\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\r\n\tat org.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\r\n\tat org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:770)\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\r\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:671)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:353)\r\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:493)\r\n\r\nSo I decrease the dubbo version to 2.6.2, it's running well on external tomcat.\r\n\r\nTomcat server version : Apache Tomcat/9.0.1.\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3475/comments",
    "author": "tone316",
    "comments": [
      {
        "user": "AlbumenJ",
        "created_at": "2021-06-14T09:12:33Z",
        "body": "Please try upgrade to Dubbo 2.7."
      }
    ]
  },
  {
    "number": 3468,
    "title": "ConsistentHashLoadBalance can not actor load balance when the method does not have argument",
    "created_at": "2019-02-13T12:16:15Z",
    "closed_at": "2021-10-20T07:14:37Z",
    "labels": [
      "type/bug",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3468",
    "body": "I have noticed in mailingList, @一直以来 279377921@qq.com ask an interesting question\r\n\r\n> ConsistentHash LoadBalance：一致性 Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，会平摊到其它提供者，不会引起剧烈变动。缺省只对第一个参数进行Hash运算。\r\n第一个参数指什么？？是每个接口中方法的第一个参数吗，如果是的话，如果方法没有参数是什么行为？请教，感谢！\r\n\r\nabout the last question, I have made some test in my local machine, when using ConsistentHashLoadBalance and a method has no argument, Dubbo can'nt actor load balance, maybe we should do something with it.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3468/comments",
    "author": "kexianjun",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-11T06:08:43Z",
        "body": "We should consider this scenario."
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-13T02:43:26Z",
        "body": "With no arguments, how do we perform the load balance ?"
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-13T14:14:43Z",
        "body": "3.0分支中#8948 对一致性Hash算法进行了优化，现采用的是有限负载一致性哈希算法。就算是没有参数，也会进行有限负载一致性哈希算法的负载。（达到最大负荷时会进行负载），但是对于ConsistentHashLoadBalance还是有一点看法。\r\n\r\n- 现在的负载比例是硬编码1.5，最新版本已经失去了之前版本一致性哈希算法的特性，所以应该支持配置动态配置。\r\n\r\n如果确定需要优化，我应该可以解决它。"
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-13T14:17:45Z",
        "body": "@CrazyHZM "
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-13T14:39:10Z",
        "body": "其实仔细想想，#8948 并没有解决一致性哈希算法的热点问题， 而是把一致性哈希算法的特性改变了。热点问题和一致性哈希算法本身就是冲突的。我觉得就不应该改变一致性哈希算法的特性。或者以现在的实现来说，我们应该支持动态配置负载比例来保留原来的特性。而在原来的特性之外提供一种新的算法（有限负载一致性哈希算法）。"
      },
      {
        "user": "stone-98",
        "created_at": "2021-10-13T14:46:42Z",
        "body": "但是如果保持原来一致性哈希算法的特性，又回到了这个issue，对于没有参数的方法我们应该以什么规则进行负载？"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2021-10-20T07:14:36Z",
        "body": "Resolved in #8948.\r\n@candyaaa Any suggestions can be re-established issues feedback."
      }
    ]
  },
  {
    "number": 3258,
    "title": "We should use type inference instead of explicit type parameters",
    "created_at": "2019-01-16T15:50:19Z",
    "closed_at": "2019-01-28T14:32:03Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3258",
    "body": "The source code contains many explicit type parameter use cases, such as:\r\n\r\n```\r\nMap<String, String> newMap = new HashMap<String, String>(reserveParams.length);\r\n```\r\n\r\nThe old style is not suitable now, since we will support Java 8 from Dubbo 2.7, so I think we can improve it.\r\n\r\nSince the source code is big, some tools or scripts may be helpful.\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3258/comments",
    "author": "kun-song",
    "comments": [
      {
        "user": "ralf0131",
        "created_at": "2019-01-20T00:44:56Z",
        "body": "+1 Many users contribute to fix issues like this. I think we can leave to users who would like to help."
      },
      {
        "user": "kezhenxu94",
        "created_at": "2019-01-20T00:49:33Z",
        "body": "Users are glad to help but review progress seems really slower than other types of PRs and they have to resolve conflicts over and over"
      },
      {
        "user": "ralf0131",
        "created_at": "2019-01-20T01:02:35Z",
        "body": "\r\n> Users are glad to help but review progress seems really slower than other types of PRs and they have to resolve conflicts over and over\r\n\r\nYes, it is a problem, I am thinking of adding a label called `level/easy` for these prs but that requires a committer to label it manually, which is not desired.\r\nThe other way is to invite more people to be a committer, who can help to review and merge. The community is on the way.\r\nYou can also help to review the pr and approve it even if you are not a committer. :) "
      },
      {
        "user": "kun-song",
        "created_at": "2019-01-27T11:17:52Z",
        "body": "> +1 Many users contribute to fix issues like this. I think we can leave to users who would like to help.\r\n\r\nYes, many contributors has done great work about this, I was looking for something like maven plugins, but failed. So let's leave it to contributors :)"
      },
      {
        "user": "ralf0131",
        "created_at": "2019-01-28T14:23:02Z",
        "body": "Anything we can do in this issue? Shall we close this issue now? "
      },
      {
        "user": "kun-song",
        "created_at": "2019-01-28T14:32:03Z",
        "body": "I think it's OK to close it now."
      }
    ]
  },
  {
    "number": 3165,
    "title": "Qos功能心跳问题",
    "created_at": "2019-01-07T12:20:07Z",
    "closed_at": "2019-01-16T07:27:49Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3165",
    "body": "### 背景\r\n在看Qos模块的时候发现，pipeline中添加了IdleStateHandler来检测心跳，但是后面的Handler中，并没有发现处理心跳事件的地方，这个是不是漏掉了心跳的处理，超过5分钟断开连接呢？\r\n\r\n```\r\n @Override\r\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\r\n        if (in.readableBytes() < 1) {\r\n            return;\r\n        }\r\n\r\n        // read one byte to guess protocol\r\n        final int magic = in.getByte(in.readerIndex());\r\n\r\n        ChannelPipeline p = ctx.pipeline();\r\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\r\n        if (isHttp(magic)) {\r\n            // no welcome output for http protocol\r\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\r\n                welcomeFuture.cancel(false);\r\n            }\r\n            p.addLast(new HttpServerCodec());\r\n            p.addLast(new HttpObjectAggregator(1048576));\r\n            p.addLast(new HttpProcessHandler());\r\n            p.remove(this);\r\n        } else {\r\n            p.addLast(new LineBasedFrameDecoder(2048));\r\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\r\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\r\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));  //心跳检测\r\n            p.addLast(new TelnetProcessHandler());\r\n            p.remove(this);\r\n        }\r\n    }```\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3165/comments",
    "author": "lkj41110",
    "comments": [
      {
        "user": "gudegg",
        "created_at": "2019-01-07T14:45:25Z",
        "body": "netty已经帮你实现了；可以看下IdleStateHandler的实现，里面有定时器"
      },
      {
        "user": "lkj41110",
        "created_at": "2019-01-08T06:22:37Z",
        "body": "> netty已经帮你实现了；可以看下IdleStateHandler的实现，里面有定时器\r\n\r\nIdleStateHandler里面也只是触发userEventTriggered事件，但是在qos里好像没有找到相关的userEventTriggered处理"
      },
      {
        "user": "CrazyHZM",
        "created_at": "2019-01-08T06:38:02Z",
        "body": "你的意思是需要对检测到断开后加上处理对吗\r\n"
      },
      {
        "user": "carryxyh",
        "created_at": "2019-01-08T07:03:47Z",
        "body": "@lkj41110 \r\n这个地方好像确实是没加。提交个PR加上吧，idle的情况下直接close掉channel即可。"
      }
    ]
  },
  {
    "number": 3070,
    "title": "Duplicate code",
    "created_at": "2018-12-27T02:45:53Z",
    "closed_at": "2019-01-03T07:58:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/3070",
    "body": "1. org.apache.dubbo.common.utils.ClassHelper#isTypeMatch\r\n2. org.apache.dubbo.config.AbstractConfig#isTypeMatch\r\n\r\nThe second one is never used, it can be removed.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/3070/comments",
    "author": "ralf0131",
    "comments": [
      {
        "user": "CrazyHZM",
        "created_at": "2018-12-27T03:41:11Z",
        "body": "I will submit a pr to remove this duplicate code"
      }
    ]
  },
  {
    "number": 2891,
    "title": "DubboMonitor类 bug",
    "created_at": "2018-12-05T09:42:12Z",
    "closed_at": "2020-08-07T03:20:47Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2891",
    "body": "1.DubboMonitor 类的属性scheduledExecutorService 并不是 static ,虽然DubboMonitor 在项目里面只会实例化一次,但是这样的代码风格并不好,建议单例模式\r\n2.send方法bug \r\n\r\nwrong code:\r\n\r\npublic void send() {\r\n        logger.debug(\"Send statistics to monitor \" + getUrl());\r\n        String timestamp = String.valueOf(System.currentTimeMillis());\r\n        for (Map.Entry<Statistics, AtomicReference<long[]>> entry : statisticsMap.entrySet()) {\r\n            // get statistics data\r\n            Statistics statistics = entry.getKey();\r\n            AtomicReference<long[]> reference = entry.getValue();\r\n            long[] numbers = reference.get();\r\n            long success = numbers[0];\r\n            long failure = numbers[1];\r\n            long input = numbers[2];\r\n            long output = numbers[3];\r\n            long elapsed = numbers[4];\r\n            long concurrent = numbers[5];\r\n            long maxInput = numbers[6];\r\n            long maxOutput = numbers[7];\r\n            long maxElapsed = numbers[8];\r\n            long maxConcurrent = numbers[9];\r\n            String version = getUrl().getParameter(Constants.DEFAULT_PROTOCOL);\r\n\r\n            // send statistics data\r\n            URL url = statistics.getUrl()\r\n                    .addParameters(MonitorService.TIMESTAMP, timestamp,\r\n                            MonitorService.SUCCESS, String.valueOf(success),\r\n                            MonitorService.FAILURE, String.valueOf(failure),\r\n                            MonitorService.INPUT, String.valueOf(input),\r\n                            MonitorService.OUTPUT, String.valueOf(output),\r\n                            MonitorService.ELAPSED, String.valueOf(elapsed),\r\n                            MonitorService.CONCURRENT, String.valueOf(concurrent),\r\n                            MonitorService.MAX_INPUT, String.valueOf(maxInput),\r\n                            MonitorService.MAX_OUTPUT, String.valueOf(maxOutput),\r\n                            MonitorService.MAX_ELAPSED, String.valueOf(maxElapsed),\r\n                            MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent),\r\n                            Constants.DEFAULT_PROTOCOL, version\r\n                    );\r\n            monitorService.collect(url);\r\n\r\n            // reset\r\n            long[] current;\r\n            long[] update = new long[LENGTH];\r\n            do {\r\n                current = reference.get();\r\n                if (current == null) {\r\n                    update[0] = 0;\r\n                    update[1] = 0;\r\n                    update[2] = 0;\r\n                    update[3] = 0;\r\n                    update[4] = 0;\r\n                    update[5] = 0;\r\n                } else {\r\n                    update[0] = current[0] - success;\r\n                    update[1] = current[1] - failure;\r\n                    update[2] = current[2] - input;\r\n                    update[3] = current[3] - output;\r\n                    update[4] = current[4] - elapsed;\r\n                    update[5] = current[5] - concurrent;\r\n                }\r\n            } while (!reference.compareAndSet(current, update));\r\n        }\r\n    }\r\n\r\n\r\n\r\n现在 send方法里面的逻辑,是\r\n步骤1发送数据,\r\n步骤2 compareAndSet去重置数据\r\n\r\n重置的时候做了保护,但是保护做的不够,丢了current 6到9 的数据\r\n\r\nfix code:\r\n\r\n public void send() {\r\n        logger.debug(\"Send statistics to monitor \" + getUrl());\r\n        String timestamp = String.valueOf(System.currentTimeMillis());\r\n        for (Map.Entry<Statistics, AtomicReference<long[]>> entry : statisticsMap.entrySet()) {\r\n            // get statistics data\r\n            Statistics statistics = entry.getKey();\r\n            AtomicReference<long[]> reference = entry.getValue();\r\n            long[] numbers;\r\n            long[] update = new long[LENGTH];\r\n            // reset\r\n            do {\r\n                numbers = reference.get();\r\n            } while (!reference.compareAndSet(numbers, update));\r\n            \r\n            if (numbers == null){\r\n                return;\r\n            }\r\n            long success = numbers[0];\r\n            long failure = numbers[1];\r\n            long input = numbers[2];\r\n            long output = numbers[3];\r\n            long elapsed = numbers[4];\r\n            long concurrent = numbers[5];\r\n            long maxInput = numbers[6];\r\n            long maxOutput = numbers[7];\r\n            long maxElapsed = numbers[8];\r\n            long maxConcurrent = numbers[9];\r\n            String version = getUrl().getParameter(Constants.DEFAULT_PROTOCOL);\r\n\r\n            // send statistics data\r\n            URL url = statistics.getUrl()\r\n                    .addParameters(MonitorService.TIMESTAMP, timestamp,\r\n                            MonitorService.SUCCESS, String.valueOf(success),\r\n                            MonitorService.FAILURE, String.valueOf(failure),\r\n                            MonitorService.INPUT, String.valueOf(input),\r\n                            MonitorService.OUTPUT, String.valueOf(output),\r\n                            MonitorService.ELAPSED, String.valueOf(elapsed),\r\n                            MonitorService.CONCURRENT, String.valueOf(concurrent),\r\n                            MonitorService.MAX_INPUT, String.valueOf(maxInput),\r\n                            MonitorService.MAX_OUTPUT, String.valueOf(maxOutput),\r\n                            MonitorService.MAX_ELAPSED, String.valueOf(maxElapsed),\r\n                            MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent),\r\n                            Constants.DEFAULT_PROTOCOL, version\r\n                    );\r\n            monitorService.collect(url);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2891/comments",
    "author": "yinghonghui",
    "comments": [
      {
        "user": "nzomkxia",
        "created_at": "2018-12-06T02:49:49Z",
        "body": "后续会基于dubbo的metrics api来实现dubbo monitor的数据采集"
      },
      {
        "user": "cvictory",
        "created_at": "2018-12-11T04:37:21Z",
        "body": "@yinghonghui \r\nyou can commit a pr to optimize the code."
      }
    ]
  },
  {
    "number": 2842,
    "title": "SPI entires dup by 3 times.",
    "created_at": "2018-11-28T07:48:35Z",
    "closed_at": "2019-01-25T03:17:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2842",
    "body": "Recently, a user commit a issue[1] about that the dubbo.internal's files\r\nhas repeated content like this:\r\n\r\n```\r\nnetty=com.alibaba.dubbo.remoting.transport.netty.NettyTransporter\r\nnetty4=com.alibaba.dubbo.remoting.transport.netty4.NettyTransporter\r\nmina=com.alibaba.dubbo.remoting.transport.mina.MinaTransporter\r\ngrizzly=com.alibaba.dubbo.remoting.transport.grizzly.GrizzlyTransporter\r\n\r\nnetty=com.alibaba.dubbo.remoting.transport.netty.NettyTransporter\r\nnetty4=com.alibaba.dubbo.remoting.transport.netty4.NettyTransporter\r\nmina=com.alibaba.dubbo.remoting.transport.mina.MinaTransporter\r\ngrizzly=com.alibaba.dubbo.remoting.transport.grizzly.GrizzlyTransporter\r\n\r\nnetty=com.alibaba.dubbo.remoting.transport.netty.NettyTransporter\r\nnetty4=com.alibaba.dubbo.remoting.transport.netty4.NettyTransporter\r\nmina=com.alibaba.dubbo.remoting.transport.mina.MinaTransporter\r\ngrizzly=com.alibaba.dubbo.remoting.transport.grizzly.GrizzlyTransporter\r\n```\r\n\r\nLooks like the entries are dup by 3 times, see details from #2828 ",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2842/comments",
    "author": "beiwei30",
    "comments": [
      {
        "user": "carryxyh",
        "created_at": "2018-12-18T07:48:33Z",
        "body": "Hi, @beiwei30 \r\nI can't reproduce this on my mac.\r\nI use this command: mvn clean install -Prelease -Dmaven.test.skip=true (before this, I have remove the maven-gpg-plugin).\r\n\r\nAfter doing install, the spi file in dubbo-all/target/ looks nice...                                                                                                                                                                                       \r\n"
      },
      {
        "user": "chickenlj",
        "created_at": "2019-01-21T06:21:31Z",
        "body": "I also tried locally, but cannot reproduce.\r\n1. clone `dubbo-2.6.4` tag\r\n2. run `mvn clean install -DskipTests`"
      },
      {
        "user": "beiwei30",
        "created_at": "2019-01-22T06:06:57Z",
        "body": "I cannot reproduce it either on 2.6.5"
      },
      {
        "user": "mercyblitz",
        "created_at": "2019-01-22T06:23:33Z",
        "body": "It's present in the binary and source jar files of 2.6.5."
      }
    ]
  },
  {
    "number": 2531,
    "title": "UT failure,  ClientReconnectTest.testReconnect",
    "created_at": "2018-09-20T01:09:53Z",
    "closed_at": "2019-02-11T09:57:31Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2531",
    "body": "Failed tests: \r\n  ClientReconnectTest.testReconnect:58 expected:<true> but was:<false>",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2531/comments",
    "author": "chickenlj",
    "comments": [
      {
        "user": "diecui1202",
        "created_at": "2018-09-20T01:18:55Z",
        "body": "more details?"
      },
      {
        "user": "John-Smile",
        "created_at": "2018-11-26T12:48:27Z",
        "body": "Does this fixed? I run the newest code and pass the UT"
      }
    ]
  },
  {
    "number": 2460,
    "title": "Add comment for unusual ips using in UTs: 127.0.0.2/3 ",
    "created_at": "2018-09-07T01:47:56Z",
    "closed_at": "2018-09-13T08:56:43Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2460",
    "body": "New issues\r\n==========\r\n\r\nTests seem to expect 127.0.0.2 to be a valid IP. If this is the case,\r\nconsider documenting the requirements to run the tests somewhere obvious\r\nin the source tree. Trivial issue. New RC not required.",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2460/comments",
    "author": "chickenlj",
    "comments": [
      {
        "user": "diecui1202",
        "created_at": "2018-09-13T03:09:20Z",
        "body": "change them to 192.168.0.1/2/3?"
      }
    ]
  },
  {
    "number": 2178,
    "title": "Please consider supporting Java 8 Date/Time type when serializing with Kryo",
    "created_at": "2018-08-03T06:43:42Z",
    "closed_at": "2018-08-13T02:48:41Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2178",
    "body": "### Environment\r\n\r\n* Dubbo version: 2.6.2\r\n* Java version: 1.8\r\n\r\nI am using java.time.LocalDateTime and Dubbo complains \"**class java.time.LocalDateTime has no zero-arg constructor and this will affect the serialization performance**\", which is caused by Dubbo's wrapper class \"**CompatibleKryo**\"\r\n\r\nAny thoughts ??\r\n\r\n```\r\npackage com.alibaba.dubbo.common.serialize.kryo;\r\n\r\nimport com.alibaba.dubbo.common.logger.Logger;\r\nimport com.alibaba.dubbo.common.logger.LoggerFactory;\r\nimport com.alibaba.dubbo.common.serialize.kryo.utils.ReflectionUtils;\r\n\r\nimport com.esotericsoftware.kryo.Kryo;\r\nimport com.esotericsoftware.kryo.Serializer;\r\nimport com.esotericsoftware.kryo.serializers.JavaSerializer;\r\n\r\npublic class CompatibleKryo extends Kryo {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(CompatibleKryo.class);\r\n\r\n    @Override\r\n    public Serializer getDefaultSerializer(Class type) {\r\n        if (type == null) {\r\n            throw new IllegalArgumentException(\"type cannot be null.\");\r\n        }\r\n\r\n        if (!type.isArray() && !type.isEnum() && !ReflectionUtils.checkZeroArgConstructor(type)) {\r\n            if (logger.isWarnEnabled()) {\r\n                logger.warn(type + \" has no zero-arg constructor and this will affect the serialization performance\");\r\n            }\r\n            return new JavaSerializer();\r\n        }\r\n        return super.getDefaultSerializer(type);\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2178/comments",
    "author": "kennyliao1982",
    "comments": [
      {
        "user": "jtanza",
        "created_at": "2018-08-03T16:20:18Z",
        "body": "hi, I haven't contributed before but would like to take this one on, is that okay? I am not actually sure of how to best address this one, but may get a better handle on things after taking a closer look at this portion of the code"
      },
      {
        "user": "beiwei30",
        "created_at": "2018-08-05T14:22:32Z",
        "body": "@jtanza, feel free to give it a try, pls. submit a pull request once you finish it :)"
      },
      {
        "user": "jtanza",
        "created_at": "2018-08-06T21:07:11Z",
        "body": "Awesome, will do!"
      },
      {
        "user": "chickenlj",
        "created_at": "2018-08-09T02:50:31Z",
        "body": "I think this snippet works, only too much warn logs, is that right?\r\n```java\r\nif (!type.isArray() && !type.isEnum() && !ReflectionUtils.checkZeroArgConstructor(type)) {\r\n            if (logger.isWarnEnabled()) {\r\n                logger.warn(type + \" has no zero-arg constructor and this will affect the serialization performance\");\r\n            }\r\n            return new JavaSerializer();\r\n        }\r\n```"
      },
      {
        "user": "chickenlj",
        "created_at": "2018-08-09T03:37:33Z",
        "body": "It seems that Kryo 4.0.1 used by Dubbo already support Java 8 Date types. It's the CompatibleKryo short-circuited that logic by checking zero-arg constructor."
      },
      {
        "user": "kennyliao1982",
        "created_at": "2018-08-10T03:20:15Z",
        "body": "Thank you all guys for working on this issue.\r\nMay I know what's the plan to release this fix??"
      }
    ]
  },
  {
    "number": 2112,
    "title": "如何自定义serviceName、methodName？",
    "created_at": "2018-07-22T01:55:10Z",
    "closed_at": "2018-12-24T09:19:10Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/2112",
    "body": "最近在扩展dubbo来支持brpc协议，遇到serviceName和methodName无法自定义问题。\r\n我能想到的是，在接口方法上加注解，但是dubbo貌似没提供设置这两个字段？",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/2112/comments",
    "author": "wenweihu86",
    "comments": [
      {
        "user": "tswstarplanet",
        "created_at": "2018-07-22T03:56:36Z",
        "body": "这个好像目前不行，因为dubbo要靠这两个属性去路由，否则怎么知道调哪个接口哪个方法？"
      },
      {
        "user": "beiwei30",
        "created_at": "2018-07-23T09:53:29Z",
        "body": "@wenweihu86, would you mind explain a little bit more why these two fields are needed to customize?"
      },
      {
        "user": "wenweihu86",
        "created_at": "2018-07-25T05:44:53Z",
        "body": "@beiwei30 brpc中namespace和method的命名规则和java都不一样，比如c++中namespace不会命名成java的包名，methodName一般是首字母大写的。所以对于brpc提供的服务，java client需要做自定义serviceName和methodName。"
      },
      {
        "user": "notlate",
        "created_at": "2018-12-17T13:10:58Z",
        "body": "你这里所说的自定义，其实generic泛型服务可以做到自定义servicename，提供者跟sericename、methodname完全解耦，自定义实现，具体可以查看generic的使用例子。@wenweihu86  "
      }
    ]
  },
  {
    "number": 1814,
    "title": "graceful shutdown time shoud could be configured in xml file",
    "created_at": "2018-05-18T06:25:46Z",
    "closed_at": "2020-08-07T03:30:16Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1814",
    "body": "see #465 ,dubbo.service.shutdown.wait / dubbo.service.shutdown.wait.seconds can only be configured in dubbo.properties file or jvm arguments, we should  also support in xml format and put this config into ApplicationConfig.what do you think? @chickenlj  ",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1814/comments",
    "author": "qinliujie",
    "comments": [
      {
        "user": "caneo",
        "created_at": "2018-08-28T03:37:23Z",
        "body": "[Dubbo-1814][Baiji-4] configure \"provider.XML\" \r\nadd a tag named Wait <dubbo:registry>: set timeout time for graceful downtime configuration in the registry.\r\n<dubbo:registry address=\"multicast://224.5.6.7:1234\" wait=\"100000\"/>"
      },
      {
        "user": "lisirrx",
        "created_at": "2018-08-28T03:41:13Z",
        "body": "In dubbo.properties, `dubbo.service.shutdown.wait` is used for config wait timeout of graceful shutdown. So we can use `dubbo:parameter` of `dubbo:service` to pass a timeout value to `DubboProtocal` to overide the value of `dubbo.service.shutdown.wait`\r\n\r\nHowever a static field `wait` is added into `DubboProtocal`, I can't find a more elegance way to implement it.\r\n#2375 "
      }
    ]
  },
  {
    "number": 1769,
    "title": "我自己实现了一个Container，如何在使用com.alibaba.dubbo.container.Main启动应用的时候传递参数进来?",
    "created_at": "2018-05-10T05:08:39Z",
    "closed_at": "2020-08-07T03:30:16Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1769",
    "body": "我自己实现了一个Container，在里面引导启动了我的程序。现在我想借助在java -jar 启动时传递额外参数到MyContainer以覆盖内部参数的效果",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1769/comments",
    "author": "liangjihua",
    "comments": [
      {
        "user": "xiabobin",
        "created_at": "2018-05-11T04:31:42Z",
        "body": "> public static void main(String[] args) {\r\n\t//TODU 你的逻辑 \r\n\tcom.alibaba.dubbo.container.Main.main(args);\r\n}\r\n\r\n这种吗？"
      },
      {
        "user": "liangjihua",
        "created_at": "2018-05-13T08:22:36Z",
        "body": "我的代码是这样的：\r\n```java\r\npublic class ServiceContainer implements Container {\r\n\tprivate static final Constants constants = new Constants();\r\n\tprivate static final Plugins plugins = new Plugins();\r\n\tprivate static final Interceptors interceptors = new Interceptors();\r\n\tprivate static final AgentServiceConfig myconfig=new AgentServiceConfig();\r\n\tprivate static final Logger logger=LoggerFactory.getLogger(ServiceContainer.class);\r\n\t@Override\r\n\tpublic void start() {\r\n\t\tmyconfig.configConstant(constants);\r\n\t\tmyconfig.configPlugin(plugins);\r\n\t\tstartPulgins();\r\n\t\tmyconfig.configInterceptor(interceptors);\r\n\t\tmyconfig.afterJFinalStart();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void stop() {\r\n\t\tmyconfig.beforeJFinalStop();\r\n\t\tstopPulgins();\r\n\t}\r\n````\r\n然后使用spi \r\nserviceContainer=com.my.ServiceContainer\r\n使用 `java -jar my.jar serviceContainer`启动容器"
      },
      {
        "user": "liangjihua",
        "created_at": "2018-05-13T08:28:43Z",
        "body": "因为我没有使用spring框架，完全使用api集成，所以想实现自己的容器"
      },
      {
        "user": "ralf0131",
        "created_at": "2018-07-12T09:36:09Z",
        "body": "Hi, \r\n\r\nI am afraid that there isn't a way to do so.\r\n\r\nSince you can specify multiple container, how can you know which args should go with which container?\r\n\r\ne.g. \r\n\r\n```\r\njava -jar my.jar container1 container2 container3\r\n```\r\n\r\nHow to specify args for container2?\r\n\r\nMaybe sth. like this:\r\n\r\n```java\r\njava -jar my.jar -container containerA arg1 arg2 -container containerB arg1 arg2 \r\n```\r\n\r\nBut this may require change for the current code, also you need consider the compatibility. Therefore it is kind of difficult.\r\n\r\nDo you have interested in implement this feature? Please let me know.\r\n\r\nWhat I can suggest is using system properties instead for now.\r\n\r\n\r\n"
      },
      {
        "user": "liangjihua",
        "created_at": "2018-07-16T01:17:07Z",
        "body": "Using system properties is a good solution, but it may not be convenient in the case of automatic integration publishing.\r\nAnd this:\r\n\r\n`java -jar my.jar -container containerA arg1 arg2 -container containerB arg1 arg2 `\r\n\r\nThis should be the effect I want, I am willing to implement it, but I am afraid I don't have time.\r\nForgive me for my bad English."
      },
      {
        "user": "ralf0131",
        "created_at": "2018-07-16T02:06:29Z",
        "body": "@yjx1045072812 \r\n\r\n1.  Implement that feature don't require your English but coding skill :)\r\n2. Your English is totally understandable, so don't be afraid of that! You can also add Chinese after English to describe your ideas.\r\n\r\nYou can implement it whenever you have time!"
      },
      {
        "user": "scy251147",
        "created_at": "2018-09-12T01:49:00Z",
        "body": "@yjx1045072812  @ralf0131  都是中国人，说啥外文。  "
      },
      {
        "user": "ralf0131",
        "created_at": "2018-09-12T01:52:28Z",
        "body": "@scy251147 Dubbo is a global community. Please understand the users varies from all over the world."
      }
    ]
  },
  {
    "number": 1711,
    "title": "The Random of loadbalance  unaverage Load",
    "created_at": "2018-04-27T10:16:50Z",
    "closed_at": "2020-08-07T03:30:15Z",
    "labels": [
      "type/need-triage",
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1711",
    "body": "Using virtualization cluster, using 5 nodes, each node host configuration and application are consistent, each node has three Dubbo services.\r\n\r\n1000 concurrent stress tests are carried out through JMeter, and the configuration (loadbalance=random, dispatcher=message, threadpool=fixed services are accessed asynchronously).\r\n\r\nIn theory, loadbalance=random has 300 performance per service configuration and is fully satisfied with consumption calls.\r\n\r\nBut it is found that Dubbo service must be configured with 1000 threads, otherwise it will output dump information wrongly.\r\n\r\nLeastActiveLoadBalance can not solve the problems.\r\n\r\nWhat is the reason for this?",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1711/comments",
    "author": "jieyisoft",
    "comments": [
      {
        "user": "imsunv",
        "created_at": "2018-04-27T13:17:37Z",
        "body": "Actually, LeastActiveLoadBalance  will not take effect unless you configure `active` for the consumer.\r\n@chickenlj  need to be repaired ?\r\n"
      },
      {
        "user": "beiwei30",
        "created_at": "2019-02-18T09:13:07Z",
        "body": "this should not happen, not sure if it's caused by wrongly configured jmeter, which route all traffic to one single provider."
      }
    ]
  },
  {
    "number": 1701,
    "title": "Enhance the test coverage part-22 : hessian-lite module ",
    "created_at": "2018-04-26T06:06:23Z",
    "closed_at": "2018-06-12T08:54:16Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1701",
    "body": "Add unit test to hessian-lite module\r\n\r\nAbout 12877 lines ,a bit heavy work",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1701/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "htynkn",
        "created_at": "2018-06-07T02:20:34Z",
        "body": "hessian-lite is moved to the ecosystem, we don't need this task anymore. refer to f4974c69b5fedcb896259bcc06ee2e7e7c00111a"
      }
    ]
  },
  {
    "number": 1697,
    "title": "Enhance the test coverage part-18 : dubbo-rpc/dubbo-rpc-memcached(dubbo-rpc-redis|dubbo-rpc-rest) modules",
    "created_at": "2018-04-26T06:01:19Z",
    "closed_at": "2018-06-01T04:30:06Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1697",
    "body": "  Add test to the modules: \r\n  dubbo-rpc/dubbo-rpc-memcached\r\n   dubbo-rpc/dubbo-rpc-redis\r\n   dubbo-rpc/dubbo-rpc-rest",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1697/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "htynkn",
        "created_at": "2018-05-17T07:39:49Z",
        "body": "@lovepoem I would like to work on this card"
      },
      {
        "user": "lovepoem",
        "created_at": "2018-05-17T08:29:15Z",
        "body": "ok it's yours"
      }
    ]
  },
  {
    "number": 1694,
    "title": "Enhance the test coverage part-15 :    dubbo-remoting/dubbo-remoting-p2p(dubbo-remoting-zookeeper) module",
    "created_at": "2018-04-26T05:57:29Z",
    "closed_at": "2018-06-29T02:29:53Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1694",
    "body": "Add unit test to the modules:\r\n   dubbo-remoting/dubbo-remoting-p2p\r\n   dubbo-remoting/dubbo-remoting-zookeeper ",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1694/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "htynkn",
        "created_at": "2018-06-02T00:33:38Z",
        "body": "@lovepoem I will pick up this"
      },
      {
        "user": "lovepoem",
        "created_at": "2018-06-29T02:29:53Z",
        "body": "close via #1958"
      }
    ]
  },
  {
    "number": 1692,
    "title": " Enhance the test coverage part-13 :    dubbo-remoting/dubbo-remoting-api(dubbo-remoting-grizzly|dubbo-remoting-http) modules",
    "created_at": "2018-04-26T05:55:41Z",
    "closed_at": "2019-01-28T11:51:51Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1692",
    "body": "add unit test to the modules  \r\n dubbo-remoting/dubbo-remoting-api\r\n   dubbo-remoting/dubbo-remoting-grizzly/\r\n   dubbo-remoting/dubbo-remoting-http/",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1692/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "dreamquster",
        "created_at": "2018-06-16T14:23:59Z",
        "body": "@lovepoem I will pick up this."
      },
      {
        "user": "lovepoem",
        "created_at": "2018-06-20T06:23:19Z",
        "body": "@dreamquster ok ，it's yours\r\n"
      },
      {
        "user": "lovepoem",
        "created_at": "2018-07-07T15:55:14Z",
        "body": "This issue has been around for a while. What is the progress now? Please give me a feedback."
      },
      {
        "user": "htynkn",
        "created_at": "2018-11-06T13:38:34Z",
        "body": "for module `dubbo-remoting-http`, the test coverage is 73.59%\r\nfor module `dubbo-remoting-api`, the test coverage is 57.22%\r\nbut for module `dubbo-remoting-grizzly`, it's zero. \r\n\r\nso we still need someone working on this task, but let's focus on module `dubbo-remoting-grizzly`"
      }
    ]
  },
  {
    "number": 1691,
    "title": " Enhance the test coverage part-12: dubbo-registry/dubbo-registry-multicast(dubbo-registry-redis|dubbo-registry-zookeeper)",
    "created_at": "2018-04-26T05:52:25Z",
    "closed_at": "2018-06-08T03:41:09Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1691",
    "body": "Add unit test to the modules: \r\ndubbo-registry/dubbo-registry-multicast\r\n   dubbo-registry/dubbo-registry-redis\r\n  dubbo-registry/dubbo-registry-zookeeper ",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1691/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "kun-song",
        "created_at": "2018-05-03T06:28:53Z",
        "body": "Let me try this :)"
      }
    ]
  },
  {
    "number": 1690,
    "title": "Enhance the test coverage part-11 :  dubbo-registry/dubbo-registry-api and dubbo-registry/dubbo-registry-default modules",
    "created_at": "2018-04-26T05:51:11Z",
    "closed_at": "2018-12-30T10:18:46Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1690",
    "body": "Add unit test to \r\ndubbo-registry/dubbo-registry-api and dubbo-registry/dubbo-registry-default modules",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1690/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "ralf0131",
        "created_at": "2018-05-20T08:34:06Z",
        "body": "Hi, I am willing to take this."
      },
      {
        "user": "lovepoem",
        "created_at": "2018-06-29T02:34:31Z",
        "body": "This issue has been around for a while. What is the progress now? Please give me a feedback."
      },
      {
        "user": "ralf0131",
        "created_at": "2018-06-29T02:40:46Z",
        "body": "Hi, I do not have enough time to do this recently... My plan is start to work on this in July..."
      },
      {
        "user": "lixiaojiee",
        "created_at": "2018-12-19T14:27:26Z",
        "body": "Can you assign me this task? I'll finish it by Sunday."
      },
      {
        "user": "lovepoem",
        "created_at": "2018-12-20T01:16:58Z",
        "body": "Ok ,It's yours "
      },
      {
        "user": "lixiaojiee",
        "created_at": "2018-12-30T07:52:42Z",
        "body": "The unit test under this issue are all finished, if there's no problem, please close this issue. @lovepoem "
      }
    ]
  },
  {
    "number": 1684,
    "title": "Enhance the test coverage part-6 : dubbo-config/dubbo-config-spring module",
    "created_at": "2018-04-26T05:47:22Z",
    "closed_at": "2018-06-01T05:07:04Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1684",
    "body": "Add unit test\r\n dubbo-config/dubbo-config-spring module",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1684/comments",
    "author": "lovepoem",
    "comments": [
      {
        "user": "htynkn",
        "created_at": "2018-05-06T07:50:30Z",
        "body": "@lovepoem I would like to pick up this task"
      },
      {
        "user": "lovepoem",
        "created_at": "2018-05-08T14:31:59Z",
        "body": "ok"
      }
    ]
  },
  {
    "number": 1343,
    "title": "A port conflict problem of dubbo provider when multiple services start concurrently.",
    "created_at": "2018-02-07T13:50:15Z",
    "closed_at": "2018-08-17T06:42:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/1343",
    "body": "如果用动态端口，dubbo是先探测，再listen，如果多个进程并发启动，会导致偶尔用到同样的端口listen\r\n\r\n简单的fix是如果listen失败了，就重新探测动态端口\r\n\r\n修改 ServiceConfig.java\r\n\r\n\r\n```\r\n    private static void clearRandomPort(String protocol) {\r\n        protocol = protocol.toLowerCase();\r\n        RANDOM_PORT_MAP.remove(protocol);\r\n    }\r\n\r\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n    private void doExportUrls() {\r\n        List<URL> registryURLs = loadRegistries(true);\r\n        for (ProtocolConfig protocolConfig : protocols) {\r\n            while(true) {\r\n                try {\r\n                    doExportUrlsFor1Protocol(protocolConfig, registryURLs);\r\n                    break;\r\n                } catch (RpcException e) {\r\n                    if (e.getMessage().contains(\"Failed to bind to\")) {\r\n                        logger.error(\"doExportUrls port failure and try again: \" + e.getMessage(), e);\r\n                        clearRandomPort(getProtocolName(protocolConfig));\r\n                        try {\r\n                            Thread.sleep(1000);\r\n                        } catch (InterruptedException ignored) {}\r\n                    } else {\r\n                        throw e;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private String getProtocolName(ProtocolConfig protocolConfig) {\r\n        String name = protocolConfig.getName();\r\n        if (name == null || name.length() == 0) {\r\n            name = \"dubbo\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\r\n        String name = getProtocolName(protocolConfig);\r\n        ...........\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/1343/comments",
    "author": "wxiaoguang",
    "comments": [
      {
        "user": "lovepoem",
        "created_at": "2018-02-07T13:52:27Z",
        "body": "You can create a PR. @wxiaoguang "
      },
      {
        "user": "kimmking",
        "created_at": "2018-02-08T09:16:36Z",
        "body": "good idea"
      },
      {
        "user": "chickenlj",
        "created_at": "2018-02-17T03:41:13Z",
        "body": "@wxiaoguang @lovepoem @kimmking  Do you guys think it will be better to catch this exception earlier? For example catch it in `DubboProtocol` or `Server` and reassign port.\r\n\r\nOr instead of wrapping with RpcException in DubboProtocol can we throw the original Exception directly to ServiceConfig? Just as HessianProtocol do."
      },
      {
        "user": "tswstarplanet",
        "created_at": "2018-07-29T11:56:57Z",
        "body": "I think your solution code is not appropriate. If one has configged the port of protocol. And the port that he/she want to use. It will also throw the RpcException. And the application will retry to bind the same port in the infinite loop."
      },
      {
        "user": "beiwei30",
        "created_at": "2018-08-17T06:42:34Z",
        "body": "it's rare race case on different process level, no need to fix. "
      }
    ]
  },
  {
    "number": 936,
    "title": "nc is not stable in dubbo's bootstrap script",
    "created_at": "2017-11-28T01:29:37Z",
    "closed_at": "2019-01-31T06:06:25Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/936",
    "body": "启动脚本的nc命令不稳定，经常无法获取dubbo的状态，使用telnet的成功率会更高\r\nCOUNT=`(sleep 1;echo \"^M\";sleep 1;echo status;sleep 1)|telnet 127.0.0.1 $SERVER_PORT | grep -c OK`",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/936/comments",
    "author": "ycfang",
    "comments": [
      {
        "user": "Loveless070",
        "created_at": "2017-12-08T07:15:43Z",
        "body": "这个想法不错,,,,,,另外我想问你一些事情,,,那个启动脚本中,,有些地方 用的 ps -f ,,有些地方用的 ps -ef ,,,,,,,那些 ps -f 命令有什么意义吗,,,,比如 ps -f | grep java | grep -v grep | grep \"$DEPLOY_DIR\" | awk '{print $2}' | wc -l \r\n我试了几次 这个命令 并不能获取什么 东西,,,,ps -ef 可以"
      },
      {
        "user": "diecui1202",
        "created_at": "2018-08-06T08:06:24Z",
        "body": "@ycfang @Loveless070 Could you fix this and start a PR ? "
      }
    ]
  },
  {
    "number": 856,
    "title": "请问dubbo.io有计划增加中文吗？",
    "created_at": "2017-11-15T04:58:15Z",
    "closed_at": "2017-11-22T06:39:24Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/856",
    "body": "看到dubbo.io全是英文，还以为文档也是英文的，结果点进去才发现是中文的，建议标识一下语言。谢谢。",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/856/comments",
    "author": "pruidong",
    "comments": [
      {
        "user": "chickenlj",
        "created_at": "2017-11-21T01:42:28Z",
        "body": "你好，文档我们计划在以下两方面投入一些精力：\r\n1. 当前中文文档继续完善，查缺补漏\r\n2. 提供对应的English edition\r\n"
      }
    ]
  },
  {
    "number": 743,
    "title": "什么时候能支持log4j2啊",
    "created_at": "2017-10-17T02:17:24Z",
    "closed_at": "2017-10-17T09:27:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/743",
    "body": "什么时候能支持log4j2啊",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/743/comments",
    "author": "gang0713",
    "comments": [
      {
        "user": "chickenlj",
        "created_at": "2017-10-17T09:26:49Z",
        "body": "建议slf4j+log4j2的形式使用"
      }
    ]
  },
  {
    "number": 738,
    "title": "XML配置项重新梳理",
    "created_at": "2017-10-13T06:00:33Z",
    "closed_at": "2017-11-03T14:39:33Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/738",
    "body": "目前有一些配置项存在暴露的位置不正确、暴露不全面、文档和含义不匹配等问题，期望在2.5.7版本将已知问题予以整理修复\r\n\r\n**如果使用中有遇到的配置问题，请在评论中列出以便改进**",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/738/comments",
    "author": "chickenlj",
    "comments": [
      {
        "user": "chickenlj",
        "created_at": "2017-10-13T06:11:00Z",
        "body": "tcp通信方式(netty mina)相关的配置项存在问题  \r\n1. 涉及的配置项\r\n```xml\r\n<dubbo:registry transporter=\"\" />\r\n<dubbo:protocol transporter=\"\" client=\"\" server=\"\" />\r\n<dubbo:service 无/>\r\n<dubbo:reference client=\"\" />\r\n```\r\n\r\n2. 存在的问题\r\n* reference中的client配置应删除，统一在protocol层级做配置\r\n* 提供端配置的transporter不应该传递到消费端，影响消费端的默认通信协议\r\n* registry中的transporter确定是不是无意义的，是否要删除\r\n* client/server配置、transporter配置是同等效果，如果都保留应该文档予以说明推荐配置形式\r\n"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-13T06:42:17Z",
        "body": "```xml\r\n<dubbo:protocol />\r\n<dubbo:provider />\r\n```\r\n两个中的线程池相关配置项是否有同等作用，文档说明一下避免混淆"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-13T07:36:53Z",
        "body": "shutdown.timeout  warmup dump.directory等这些参数应该在properties级别支持配置"
      },
      {
        "user": "zhangyinyue",
        "created_at": "2017-10-14T03:12:31Z",
        "body": "在发布服务时，有个scope的配置，这个配置有点奇怪，文档里好像没看到在哪里配置，是不是应该在service端配置呢 String scope = url.getParameter(Constants.SCOPE_KEY);"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-16T03:02:13Z",
        "body": "<dubbo:application />增加对<dubbo:parameter/>子元素的配置支持\r\n<dubbo:consumer/>增加对<dubbo:reference/>子元素的配置支持"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-21T09:51:56Z",
        "body": "<dubbo:provider monitor=\"group:version\" />\r\n是为了兼容老版本配置，可以删掉"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-25T08:26:52Z",
        "body": "@zhangyinyue  在<dubbo:service scope=\"\" />配置"
      },
      {
        "user": "mercyblitz",
        "created_at": "2017-10-26T02:02:00Z",
        "body": "@chickenlj 确实太多重复配置了，这块可以讨论一下"
      }
    ]
  },
  {
    "number": 668,
    "title": "dubbo服务部署在容器中，注册发现的问题",
    "created_at": "2017-09-20T03:18:09Z",
    "closed_at": "2017-11-01T13:41:06Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/668",
    "body": "dubbo服务部署在容器中，存在需求，既有容器集群内部的访问，又有集群外部的访问。\r\n\r\n希望dubbo服务能够提供灵活的注册机制。\r\n\r\n比如： 1、通过指定IP 端口注册，通过配置项或者命令行参数\r\n2、与docker的集成方案，通过配置项灵活选择 采用docker的宿主机IP或容器IP注册。\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/668/comments",
    "author": "wuhy198607",
    "comments": [
      {
        "user": "chickenlj",
        "created_at": "2017-10-16T09:52:29Z",
        "body": "@wuhy198607 你好，我们打算通过支持命令行参数配置要注册的ip、port，来支持类似docker bridage网络环境下的服务注册和访问问题，这样就要求使用者明确指定注册那些能够与外部通信的ip、port\r\n如：docker run -it --name dubbo dubbo-sample-image  -p serverip:20880:20880 --env JAVA_OPTS=\"-Ddubbo.address.ip=serverip -Ddubbo.address.port=20880\""
      },
      {
        "user": "chickenlj",
        "created_at": "2017-10-16T09:58:55Z",
        "body": "> 2、与docker的集成方案，通过配置项灵活选择 采用docker的宿主机IP或容器IP注册。\r\n\r\n请问你提到的集成方案的思路是什么，能否描述一下？"
      },
      {
        "user": "chickenlj",
        "created_at": "2017-11-01T13:41:06Z",
        "body": " 1、通过指定IP 端口注册，通过配置项或者命令行参数 \r\n #778 "
      },
      {
        "user": "ThorinChen",
        "created_at": "2017-11-28T03:30:07Z",
        "body": "@chickenlj    \r\n\r\n请问一下，在K8S里面，有没有什么比较好的方案？解决消费pod调用的随机IP的服务端pod？"
      },
      {
        "user": "wuhy198607",
        "created_at": "2018-03-08T03:09:22Z",
        "body": "其实按照现在的这样方案，容器部署还是会有问题，就是当我采用集群部署的时候，因为我存在多个容器，无法去指定IP 端口。\r\n我现在实践的方案是绑定SLB或者NGINX，但是会存在一个健康检查的问题。\r\n传入的IP设置为SLB或者NGINX\r\n暂时没想到更好的方案。\r\n"
      },
      {
        "user": "wuhy198607",
        "created_at": "2018-03-08T03:09:58Z",
        "body": "@chickenlj "
      },
      {
        "user": "ijaychang",
        "created_at": "2018-04-28T08:20:07Z",
        "body": "mark"
      }
    ]
  },
  {
    "number": 533,
    "title": "consumer 为什么无法配置序列化方式？",
    "created_at": "2017-08-17T08:24:06Z",
    "closed_at": "2020-06-08T10:57:39Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/533",
    "body": "我想请问下，为什么consumer无法配置序列化方式？\r\n    <!-- 配置消费者 -->\r\n    <dubbo:consumer id=\"goodsServiceConsumer\" registry=\"goodsServiceClientRegistry\"\r\n                    init=\"false\" check=\"${goodsService.dubbo.consumer.check}\" retries=\"0\"/>\r\n\r\n在provider里面是可以配置并且使用成功的\r\n    <!--服务-->\r\n    <dubbo:provider registry=\"goodsRegistry\"\r\n                    protocol=\"goodsProtocol\"\r\n                    cluster=\"${goodsService.dubbo.provider.cluster}\"\r\n                    loadbalance=\"${goodsService.dubbo.provider.loadbalance}\"\r\n                    serialization=\"${goodsService.dubbo.provider.serialization}\"\r\n                    retries=\"${goodsService.dubbo.provider.retries}\"\r\n                    timeout=\"${goodsService.dubbo.provider.timeout}\"\r\n                    proxy=\"javassist\"\r\n                    delay=\"-1\"/>\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/533/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "chickenlj",
        "created_at": "2017-08-19T04:43:05Z",
        "body": "可以先配置在dubbo:protocol标签。consumer、provider存在配置的不对等，会考虑在consuemr xsd中增加配置项"
      },
      {
        "user": "ghost",
        "created_at": "2017-09-05T03:02:15Z",
        "body": " 在consumer端配置感觉不合理！需要客户端、服务端场景外沟通协议，脱离代码控制。\r\n\r\n客户端只需要最少的服务端信息，这样用起来便捷很多；变更也只需要服务端维护即可～\r\n\r\n个人建议：\r\n//=========================\r\n1、序列化方式应该由服务端指定\r\n2、通过协议传到客户端\r\n3、当客户端不存在相应的反序列化方式时，抛序列化方式不存在异常\r\n4、协议支持自定义序列化方式。\r\n//=========================\r\n欢迎指正～\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2018-02-27T13:25:54Z",
        "body": "因为client 都是由服务提供者编写的，我们采用common server client模式，并不是楼上那样，所以不存在不透明沟通难的问题。"
      },
      {
        "user": "uglycow",
        "created_at": "2019-05-17T02:50:53Z",
        "body": "the provider is aware of what serialize protocol is  suitable for the DO. So, i also think\r\nit's the provider's work to choose which serialization to use."
      }
    ]
  },
  {
    "number": 512,
    "title": "使用com.alibaba.dubbo.config.annotation.Service描述的服务与springAop冲突导致服务无法暴露",
    "created_at": "2017-08-11T09:55:14Z",
    "closed_at": "2020-08-07T03:30:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/512",
    "body": "# 问题代码\r\n          @Service(owner = \"jc\")\r\n           public class UserBusiness implements UserBusinessInterface {\r\n                 @LOG\r\n                 @Override\r\n               public UserResponse regist(UserRegistDTO userRegistDTO) {\r\n                          return staUserService.regist(userRegistDTO);\r\n              }\r\n           }\r\n\r\n\r\n# 场景\r\n1.用com.alibaba.dubbo.config.annotation.Service标签修饰UserBusiness 服务\r\n2.@LOG是一个自定义标签，并且配置了spring的Aop进行了拦截,配置如下\r\n             @Pointcut(\"@annotation(com.*.*.core.aop.LOG)\")\r\n\r\n# 现象\r\ndubbo无法暴露UserBusiness  这个服务\r\n\r\n# 原因分析\r\n配置有Spring aop的bean生成了代理对象\r\ncom.alibaba.dubbo.config.spring.AnnotationBean 这个类的postProcessAfterInitialization方法的 \r\nService service = bean.getClass().getAnnotation(Service.class); 这一行获取到的是由cglib代理出来的对象，所以无法得到@Service 注解，导致服务未暴露\r\n\r\n# 解决方法\r\nService service = bean.getClass().getAnnotation(Service.class); 将此方法改成如下代码\r\n\r\n\r\n\r\n\r\n      Service service;\r\n      if (AopUtils.isAopProxy(proxy) ){\r\n               service =（根据代理对象获得到的cglib或者jdkproxy的原始对象）\r\n      }else{\r\n               service = bean.getClass().getAnnotation(Service.class);\r\n      }\r\n\r\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/512/comments",
    "author": "spjich",
    "comments": [
      {
        "user": "Noodles-Buddy",
        "created_at": "2017-08-30T08:53:19Z",
        "body": "厉害"
      },
      {
        "user": "CXL6688",
        "created_at": "2017-08-30T10:17:02Z",
        "body": "使用xml注解方式也可以避免这个问题"
      },
      {
        "user": "sxc9870",
        "created_at": "2017-11-06T10:06:06Z",
        "body": "   if (AopUtils.isAopProxy(bean)|| AopUtils.isCglibProxy(bean)||  AopUtils.isJdkDynamicProxy(bean)) {\r\n            clazz = AopUtils.getTargetClass(bean);\r\n        }\r\n\r\nif (\"$$\".contains(clazz.getName())||clazz.getSimpleName().contains(\"$$\")) {  \r\n            clazz =clazz. getSuperclass();     \r\n        }\r\n再加一段这个试试"
      }
    ]
  },
  {
    "number": 355,
    "title": "dubbo在集成spring注解扫描时，对于spring代理/字节码增强后的Bean无法处理",
    "created_at": "2016-12-08T05:04:29Z",
    "closed_at": "2018-07-19T14:20:20Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/355",
    "body": "> 高版本的Spring对于事物或者其他需要aop的bean处理，已经不在使用代理机制了，很多都是通过字节码增强，然后委派处理。\r\n\r\n> dubbo的AnnotationBean对class的判断在遇到增强后的class通过反射会得不到com.alibaba.dubbo.config.annotation.Service/com.alibaba.dubbo.config.annotation.Reference注解信息，导致服务的发布/引入失败。\r\n\r\n> 对于原有的获取方式：`Service service = bean.getClass().getAnnotation(Service.class);` 需要修改一下。\r\n> 我这里 改成了：\r\n```java\r\n        Class<?> clazz = getBeanClass(bean);\r\n        Service service = clazz.getAnnotation(Service.class);\r\n        private Class<?> getBeanClass(Object bean) {\r\n\t\tClass<?> clazz = bean.getClass();\r\n\t\tif (AopUtils.isAopProxy(bean)) {\r\n\t\t\tclazz = AopUtils.getTargetClass(bean);\r\n\t\t}\r\n\t\treturn clazz;\r\n\t}\r\n```\r\n同样，对于`postProcessBeforeInitialization`注入时注解的获取也改成此方式",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/355/comments",
    "author": "roc-cn",
    "comments": [
      {
        "user": "ralf0131",
        "created_at": "2018-07-16T23:30:38Z",
        "body": "Hi, could you please send a pull request?"
      },
      {
        "user": "ralf0131",
        "created_at": "2018-07-19T14:20:20Z",
        "body": "dup with #512"
      }
    ]
  },
  {
    "number": 291,
    "title": "服务注册失败重试问题",
    "created_at": "2016-07-20T08:58:28Z",
    "closed_at": "2019-02-21T02:54:17Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/291",
    "body": "前些天我们的zookeeper 有个节点(应用只配置了一个节点)卡了1分钟左右，导致小部分服务状态丢失，当zk恢复正常后服务并没有重新注册去，请问怎么调整注册(非调用)重试时间间隔和总次数?谢谢~\n\n以下是provider日志信息\n\n```\n2016-07-14 17:22:41.385 [main-SendThread(10.0.0.52:2181)] WARN  org.apache.zookeeper.ClientCnxn - Session 0x155e8b67af300a3 for server 10.0.0.52/10.0.0.52:2181, unexpected error, closing socket connection and attempting reconnect\njava.io.IOException: Connection reset by peer\n    at sun.nio.ch.FileDispatcherImpl.read0(Native Method) ~[na:1.7.0_79]\n    at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39) ~[na:1.7.0_79]\n    at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223) ~[na:1.7.0_79]\n    at sun.nio.ch.IOUtil.read(IOUtil.java:192) ~[na:1.7.0_79]\n    at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379) ~[na:1.7.0_79]\n    at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:68) ~[zookeeper-3.4.6.jar:3.4.6-156\n9965]\n    at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:366) ~[zookeeper-3.4.6.jar:3\n.4.6-1569965]\n    at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081) ~[zookeeper-3.4.6.jar:3.4.6-1569965]\n2016-07-14 17:22:41.487 [main-EventThread] INFO  o.a.curator.framework.state.ConnectionStateManager - State change: SUSPENDED\n2016-07-14 17:22:42.458 [main-SendThread(10.0.0.52:2182)] INFO  org.apache.zookeeper.ClientCnxn - Opening socket connection to server 10.0.0.52/10.0.0.52:2182. Will not attempt to authenticate using SASL (unknown error)\n2016-07-14 17:22:42.460 [main-SendThread(10.0.0.52:2182)] INFO  org.apache.zookeeper.ClientCnxn - Socket connec\ntion established to 10.0.0.52/10.0.0.52:2182, initiating session\n2016-07-14 17:22:42.462 [main-SendThread(10.0.0.52:2182)] INFO  org.apache.zookeeper.ClientCnxn - Session estab lishment complete on server 10.0.0.52/10.0.0.52:2182, sessionid = 0x155e8b67af300a3, negotiated timeout = 40000\n2016-07-14 17:22:42.463 [main-EventThread] INFO  o.a.curator.framework.state.ConnectionStateManager - State change: RECONNECTED\n2016-07-14 17:22:42.499 [DubboRegistryFailedRetryTimer-thread-1] INFO  c.a.dubbo.registry.zookeeper.ZookeeperRegistry -  [DUBBO] Notify urls for subscribe url provider://***], dubbo version: 2.8.4, current host: 10.0.0.122\n2016-07-14 17:23:17.457 [New I/O worker #2] WARN  c.alibaba.dubbo.remoting.transport.AbstractServer -  [DUBBO] All clients has discontected from /10.0.0.122:20991. You can graceful shutdown now., dubbo version: 2.8.4, current host: 10.0.0.122\n```\n\n后面一直重复\n\n```\n2016-07-14 17:25:31.172 [New I/O worker #1] WARN  c.alibaba.dubbo.remoting.transport.AbstractServer -  [DUBBO] All clients has discontected from /10.0.0.122:20991. You can graceful shutdown now., dubbo version: 2.8.4, current host: 10.0.0.122\n```\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/291/comments",
    "author": "freelingchang",
    "comments": [
      {
        "user": "duguyixiaono1",
        "created_at": "2018-05-17T09:11:58Z",
        "body": "遇到过相同的问题，后来有什么解决方案吗？ @freelingchang "
      },
      {
        "user": "ralf0131",
        "created_at": "2018-07-19T00:47:02Z",
        "body": "I am afraid currently Dubbo does not support retry on service registration. I think this can be an improvement."
      },
      {
        "user": "beiwei30",
        "created_at": "2019-02-21T02:54:17Z",
        "body": "现在应该没有这个问题，你试试最新版本。"
      }
    ]
  },
  {
    "number": 262,
    "title": "监控怎么配置监听的ip地址呢",
    "created_at": "2016-06-16T02:55:35Z",
    "closed_at": "2019-02-21T03:08:29Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/apache/dubbo/issues/262",
    "body": "我只想配置监听内网访问，不允许外网访问\n目前只有一个dubbo.jetty.port可以配置端口\n",
    "comments_url": "https://api.github.com/repos/apache/dubbo/issues/262/comments",
    "author": "0x55aa",
    "comments": [
      {
        "user": "ralf0131",
        "created_at": "2018-07-19T12:33:43Z",
        "body": "I think Dubbo does not support this feature right now. Feel free to contribute."
      }
    ]
  }
]