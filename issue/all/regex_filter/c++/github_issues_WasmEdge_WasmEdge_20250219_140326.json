[
  {
    "number": 3767,
    "title": "question: Plugin circular dependencies make WasmEdge upgrades and releases complex.",
    "created_at": "2024-09-16T08:33:51Z",
    "closed_at": "2024-10-20T12:00:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/3767",
    "body": "### Summary\n\nThe situation I encountered while verifying the `burn.rs` plugin was that the WasmEdge API had been upgraded, but since it hadn't been released yet, there was a version mismatch, causing the plugin registration to fail.\r\n\r\nA similar issue/behavior will occur after the WasmEdge release, where both the Rust SDK  and the plugin SDK crates need to be upgraded. After the upgrades, we will have to return to WasmEdge to upgrade the burn.rs plugin for it to load successfully (circular upgrade dependency).\n\n### Appendix\n\n_No response_",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/3767/comments",
    "author": "CaptainVincent",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2024-09-18T14:59:14Z",
        "body": "Let's separate the burnrs plugin and all future Rust plugins into a new repo."
      },
      {
        "user": "hydai",
        "created_at": "2024-09-23T16:48:29Z",
        "body": "@CaptainVincent \r\nThe repo is created, please move the burnrs plugin to the new repo."
      },
      {
        "user": "CaptainVincent",
        "created_at": "2024-10-15T06:40:56Z",
        "body": "Waiting for #3830."
      }
    ]
  },
  {
    "number": 3570,
    "title": "[Plugin] WASI_LOGGING support Windows",
    "created_at": "2024-07-17T15:41:53Z",
    "closed_at": "2024-08-06T11:42:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/3570",
    "body": "### Summary\r\n\r\nI need to run the LlamaEdge api-server.wasm on Windows, but it must use WASI_LOGGING.\r\n\r\nTherefore, I expect that wasi_logging can support Windows.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/3570/comments",
    "author": "L-jasmine",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2024-07-17T16:16:46Z",
        "body": "WASI_LOGGING supports Windows. However, we don't set up the release workflow for it. As a workaround, please build the plugin manually until we publish the pre-built assets."
      },
      {
        "user": "hydai",
        "created_at": "2024-08-06T11:42:16Z",
        "body": "This is not planned. We are going to embed the wasi-logging into the wasmedge library. No longer need to do this."
      }
    ]
  },
  {
    "number": 3509,
    "title": "call openai",
    "created_at": "2024-06-27T06:10:07Z",
    "closed_at": "2024-06-27T16:52:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/3509",
    "body": "### Summary\n\nMay I ask how _Wasedge_ can directly call _openai_ like _Python_? Is there a similar example available?\n\n### Appendix\n\n_No response_",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/3509/comments",
    "author": "17862687921",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2024-06-27T16:52:47Z",
        "body": "WasmEdge is a runtime to execute wasm applications.\r\n\r\nYou can write a program in Rust, C++, or other languages to interact with OpenAI, compile it into Wasm, and execute it with WasmEdge."
      },
      {
        "user": "17862687921",
        "created_at": "2024-06-28T01:09:21Z",
        "body": "Thank you, but when compiling, many dependencies are required. Can the following **_python_** functions be compiled into **_wasm_**? If so, can you provide the process? The **_python_** code is as follows:\r\n```\r\nimport json\r\nimport openai\r\ndef get_chat_response(messages, api_key, model=\"gpt-3.5-turbo\", temperature=0, max_tokens=256, n=1, patience=100, sleep_time=0):\r\n    while patience > 0:\r\n        patience -= 1\r\n        try:\r\n            response = openai.ChatCompletion.create(model=model,\r\n                                                messages=messages,\r\n                                                api_key=api_key,\r\n                                                temperature=temperature,\r\n                                                max_tokens=max_tokens,\r\n                                                n=n)\r\n            if n == 1:\r\n                prediction = response['choices'][0]['message']['content'].strip()\r\n                if prediction != \"\" and prediction != None:\r\n                    return prediction\r\n            else:\r\n                prediction = [choice['message']['content'].strip() for choice in response['choices']]\r\n                if prediction[0] != \"\" and prediction[0] != None:\r\n                    return prediction\r\n\r\n        except Exception as e:\r\n            print(e)\r\n            if sleep_time > 0:\r\n                time.sleep(sleep_time)\r\n    return \"\"\r\n```"
      }
    ]
  },
  {
    "number": 3024,
    "title": "bug: AWS Sample not working",
    "created_at": "2023-11-08T15:49:36Z",
    "closed_at": "2023-11-20T06:13:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/3024",
    "body": "### Summary\n\nI followed all the instructions  but the  AWS sample, even localy, does not work.\r\n\r\n```08 Nov 2023 15:43:39,186 [INFO] (rapid) exec '/var/runtime/bootstrap' (cwd=/var/task, handler=)\r\n08 Nov 2023 15:45:15,569 [INFO] (rapid) extensionsDisabledByLayer(/opt/disable-extensions-jwigqn8j) -> stat /opt/disable-extensions-jwigqn8j: no such file or directory\r\n08 Nov 2023 15:45:15,569 [INFO] (rapid) Configuring and starting Operator Domain\r\n08 Nov 2023 15:45:15,569 [INFO] (rapid) Starting runtime domain\r\n08 Nov 2023 15:45:15,570 [WARNING] (rapid) Cannot list external agents error=open /opt/extensions: no such file or directory\r\n08 Nov 2023 15:45:15,570 [INFO] (rapid) Starting runtime without AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN , Expected?: false\r\nSTART RequestId: d98b552a-1281-4d32-891c-d1d55b345ff9 Version: $LATEST\r\n2023-11-08T15:45:15.683Z        409935d8-dd5a-4112-a34c-be10ae894ee2    ERROR   Invoke Error      {\"errorType\":\"TypeError\",\"errorMessage\":\"Cannot read properties of undefined (reading 'match')\",\"stack\":[\"TypeError: Cannot read properties of undefined (reading 'match')\",\"    at exports.handler (/var/task/hello.js:24:46)\",\"    at Runtime.handleOnceNonStreaming (file:///var/runtime/index.mjs:1173:29)\"]}\r\nEND RequestId: 409935d8-dd5a-4112-a34c-be10ae894ee2\r\nREPORT RequestId: 409935d8-dd5a-4112-a34c-be10ae894ee2  Init Duration: 1.02 ms  Duration: 115.63 ms       Billed Duration: 116 ms Memory Size: 3008 MB    Max Memory Used: 3008 MB\n```\n\n### Current State\n\n_No response_\n\n### Expected State\n\n_No response_\n\n### Reproduction steps\n\n```bash\n1. Build with options '...'\r\n2. Execute with flags '....'\r\n3. Execute with inputs '....'\r\n4. Get error\n```\n\n\n### Screenshots\n\n```bash\n![DESCRIPTION](LINK.png)\n```\n\n\n### Any logs you want to share for showing the specific issue\n\n_No response_\n\n### Components\n\nOthers\n\n### WasmEdge Version or Commit you used\n\n0.13.5\n\n### Operating system information\n\nMac \n\n### Hardware Architecture\n\narm64\n\n### Compiler flags and options\n\n_No response_",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/3024/comments",
    "author": "barum",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2023-11-08T17:52:12Z",
        "body": "Hi @barum \r\nWhich example do you follow?\r\nI cannot get any related information from your log. Could you please share more information?"
      },
      {
        "user": "hydai",
        "created_at": "2023-11-20T06:13:19Z",
        "body": "Lack of information. Closing it. Please provide more details and re-open this issue."
      }
    ]
  },
  {
    "number": 2818,
    "title": "Can wasmedge now support model training?",
    "created_at": "2023-09-18T03:47:20Z",
    "closed_at": "2023-09-26T03:23:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/2818",
    "body": "Can wasmedge now support model training?",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/2818/comments",
    "author": "17862687921",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2023-09-18T03:51:21Z",
        "body": "Are you talking about AI model training? If so, do you have any use cases?"
      },
      {
        "user": "17862687921",
        "created_at": "2023-09-18T04:01:26Z",
        "body": "Yes. You can take Cifar-10 model training as an example, use the AlexNet model as a pre-training model, and train the model through the Cifar-10 data set."
      },
      {
        "user": "hydai",
        "created_at": "2023-09-21T10:41:07Z",
        "body": "Hi @17862687921 \r\nI am afraid that we don't have such a plan for supporting model training now. The reason is that WASI-NN doesn't define and is not designed for model training. Instead of using WASI-NN, we have to devise a solution for the model training. However, there is a big issue: what kinds of APIs do we need? We need a clear answer to this. So, we are open to talk and welcome any contribution to this feature."
      },
      {
        "user": "17862687921",
        "created_at": "2023-09-21T11:41:16Z",
        "body": "@hydai Hello, I want to use pytorch or tensorflow to implement model training. Similar to python, model training can be completed by directly giving the data set, hyperparameters and training code (including model architecture)."
      }
    ]
  },
  {
    "number": 2788,
    "title": "How can other runtimes directly use the result memory of main.wasm?",
    "created_at": "2023-09-06T03:18:19Z",
    "closed_at": "2023-09-18T00:20:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/2788",
    "body": "```\r\n//main.rs\r\npub fn main() {\r\n  let mut results = [0u32; 10];\r\n\r\n  for i in 0..10 {\r\n    let result = i + 10;\r\n    results[i] = result;\r\n  }\r\n}\r\n```\r\nWe converted the above code into `main.wasm` through `cargo build --release --target=wasm32-wasi`, and then run it in the terminal using`wasmedge --dir .:. main.wasm`. How can we directly use the memory of the running result instead of writing it to a file. For example, in the python language, directly use the result of `results[2]` in `main.wasm` to complete subsequent calculations (such as `num=main.wasm.results[2]+100`). Thanks.",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/2788/comments",
    "author": "17862687921",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2023-09-06T04:51:47Z",
        "body": "1. CLI doesn't support this feature.\r\n2. You can retrieve the `memory instance` via SDK. And use the `offset + length` to get the value. However, you must know the data structure's `memory offset` first. There is no way to know which memory section belongs to the `results` after it is compiled into the Wasm format from the WasmEdge side."
      },
      {
        "user": "hydai",
        "created_at": "2023-09-18T00:20:07Z",
        "body": "Closing this. If you have any more questions, please feel free to re-open it or raise a new issue."
      }
    ]
  },
  {
    "number": 1820,
    "title": "run rust binding demo error",
    "created_at": "2022-09-03T17:03:23Z",
    "closed_at": "2022-09-04T14:32:15Z",
    "labels": [
      "question",
      "binding-rust"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/1820",
    "body": "## Description\r\n\r\n### Current State\r\n\r\n/Users/lux/.cargo/bin/cargo build --color=always --message-format=json-diagnostic-rendered-ansi --bin wasmedge-demo --manifest-path /Users/lux/src/github.com/xunfeng1980/rust-study/crates/wasmedge-demo/Cargo.toml\r\n   Compiling wasmedge-sys v0.9.0\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_CompilerCompileFromBuffer` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/compiler.rs:102:24\r\n     |\r\n102  |               check(ffi::WasmEdge_CompilerCompileFromBuffer(\r\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_CompilerCompile`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:2258:5\r\n     |\r\n2258 | /     pub fn WasmEdge_CompilerCompile(\r\n2259 | |         Cxt: *mut WasmEdge_CompilerContext,\r\n2260 | |         InPath: *const ::std::os::raw::c_char,\r\n2261 | |         OutPath: *const ::std::os::raw::c_char,\r\n2262 | |     ) -> WasmEdge_Result;\r\n     | |_________________________- similarly named function `WasmEdge_CompilerCompile` defined here\r\n\r\nerror[E0412]: cannot find type `WasmEdge_CallingFrameContext` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/frame.rs:12:33\r\n    |\r\n12  |     pub(crate) ctx: *const ffi::WasmEdge_CallingFrameContext,\r\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `WasmEdge_ConfigureContext`\r\n    |\r\n   ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:964:1\r\n    |\r\n964 | pub struct WasmEdge_ConfigureContext {\r\n    | ------------------------------------ similarly named struct `WasmEdge_ConfigureContext` defined here\r\n\r\nerror[E0412]: cannot find type `WasmEdge_CallingFrameContext` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/frame.rs:16:43\r\n    |\r\n16  |     pub(crate) fn create(ctx: *const ffi::WasmEdge_CallingFrameContext) -> Self {\r\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `WasmEdge_ConfigureContext`\r\n    |\r\n   ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:964:1\r\n    |\r\n964 | pub struct WasmEdge_ConfigureContext {\r\n    | ------------------------------------ similarly named struct `WasmEdge_ConfigureContext` defined here\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_CallingFrameGetExecutor` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/frame.rs:22:33\r\n   |\r\n22 |         let ctx = unsafe { ffi::WasmEdge_CallingFrameGetExecutor(self.ctx) };\r\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_CallingFrameGetModuleInstance` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/frame.rs:42:33\r\n   |\r\n42 |         let ctx = unsafe { ffi::WasmEdge_CallingFrameGetModuleInstance(self.ctx) };\r\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_CallingFrameGetMemoryInstance` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/frame.rs:66:33\r\n   |\r\n66 |         let ctx = unsafe { ffi::WasmEdge_CallingFrameGetMemoryInstance(self.ctx, idx) };\r\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0412]: cannot find type `WasmEdge_CallingFrameContext` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:17:33\r\n    |\r\n17  |     call_frame_ctx: *const ffi::WasmEdge_CallingFrameContext,\r\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `WasmEdge_ConfigureContext`\r\n    |\r\n   ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:964:1\r\n    |\r\n964 | pub struct WasmEdge_ConfigureContext {\r\n    | ------------------------------------ similarly named struct `WasmEdge_ConfigureContext` defined here\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ResultGen` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:62:22\r\n     |\r\n62   |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_UserLevelError, code)\r\n     |                      ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ResultOK`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:1331:5\r\n     |\r\n1331 |     pub fn WasmEdge_ResultOK(Res: WasmEdge_Result) -> bool;\r\n     |     ------------------------------------------------------- similarly named function `WasmEdge_ResultOK` defined here\r\n\r\nerror[E0425]: cannot find value `WasmEdge_ErrCategory_UserLevelError` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:62:46\r\n   |\r\n62 |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_UserLevelError, code)\r\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ResultGen` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:65:22\r\n     |\r\n65   |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_WASM, code)\r\n     |                      ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ResultOK`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:1331:5\r\n     |\r\n1331 |     pub fn WasmEdge_ResultOK(Res: WasmEdge_Result) -> bool;\r\n     |     ------------------------------------------------------- similarly named function `WasmEdge_ResultOK` defined here\r\n\r\nerror[E0425]: cannot find value `WasmEdge_ErrCategory_WASM` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:65:46\r\n   |\r\n65 |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_WASM, code)\r\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0412]: cannot find type `WasmEdge_CallingFrameContext` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:75:33\r\n    |\r\n75  |     call_frame_ctx: *const ffi::WasmEdge_CallingFrameContext,\r\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `WasmEdge_ConfigureContext`\r\n    |\r\n   ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:964:1\r\n    |\r\n964 | pub struct WasmEdge_ConfigureContext {\r\n    | ------------------------------------ similarly named struct `WasmEdge_ConfigureContext` defined here\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ResultGen` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:121:22\r\n     |\r\n121  |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_UserLevelError, code)\r\n     |                      ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ResultOK`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:1331:5\r\n     |\r\n1331 |     pub fn WasmEdge_ResultOK(Res: WasmEdge_Result) -> bool;\r\n     |     ------------------------------------------------------- similarly named function `WasmEdge_ResultOK` defined here\r\n\r\nerror[E0425]: cannot find value `WasmEdge_ErrCategory_UserLevelError` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:121:46\r\n    |\r\n121 |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_UserLevelError, code)\r\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ResultGen` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:124:22\r\n     |\r\n124  |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_WASM, code)\r\n     |                      ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ResultOK`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:1331:5\r\n     |\r\n1331 |     pub fn WasmEdge_ResultOK(Res: WasmEdge_Result) -> bool;\r\n     |     ------------------------------------------------------- similarly named function `WasmEdge_ResultOK` defined here\r\n\r\nerror[E0425]: cannot find value `WasmEdge_ErrCategory_WASM` in module `ffi`\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:124:46\r\n    |\r\n124 |                 ffi::WasmEdge_ResultGen(ffi::WasmEdge_ErrCategory_WASM, code)\r\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ModuleInstanceWASIGetNativeHandler` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/module.rs:682:18\r\n     |\r\n682  |               ffi::WasmEdge_ModuleInstanceWASIGetNativeHandler(\r\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ModuleInstanceWASIGetExitCode`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:2659:5\r\n     |\r\n2659 | /     pub fn WasmEdge_ModuleInstanceWASIGetExitCode(\r\n2660 | |         Cxt: *const WasmEdge_ModuleInstanceContext,\r\n2661 | |     ) -> u32;\r\n     | |_____________- similarly named function `WasmEdge_ModuleInstanceWASIGetExitCode` defined here\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_ResultGetCategory` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/utils.rs:44:34\r\n     |\r\n44   |     let category = unsafe { ffi::WasmEdge_ResultGetCategory(result) };\r\n     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_ResultGetCode`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:1339:5\r\n     |\r\n1339 |     pub fn WasmEdge_ResultGetCode(Res: WasmEdge_Result) -> u32;\r\n     |     ----------------------------------------------------------- similarly named function `WasmEdge_ResultGetCode` defined here\r\n\r\nerror[E0531]: cannot find unit struct, unit variant or constant `WasmEdge_ErrCategory_UserLevelError` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/utils.rs:54:14\r\n   |\r\n54 |         ffi::WasmEdge_ErrCategory_UserLevelError => Err(WasmEdgeError::User(code)),\r\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0531]: cannot find unit struct, unit variant or constant `WasmEdge_ErrCategory_WASM` in module `ffi`\r\n  --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/utils.rs:55:14\r\n   |\r\n55 |         ffi::WasmEdge_ErrCategory_WASM => gen_runtime_error(code),\r\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `ffi`\r\n\r\nerror[E0425]: cannot find function, tuple struct or tuple variant `WasmEdge_PluginLoadWithDefaultPaths` in module `ffi`\r\n    --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/utils.rs:317:19\r\n     |\r\n317  |     unsafe { ffi::WasmEdge_PluginLoadWithDefaultPaths() }\r\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `WasmEdge_Plugin_loadWithDefaultPluginPaths`\r\n     |\r\n    ::: /Users/lux/src/github.com/xunfeng1980/rust-study/target/debug/build/wasmedge-sys-043900d69375825d/out/wasmedge.rs:4391:5\r\n     |\r\n4391 |     pub fn WasmEdge_Plugin_loadWithDefaultPluginPaths();\r\n     |     ---------------------------------------------------- similarly named function `WasmEdge_Plugin_loadWithDefaultPluginPaths` defined here\r\n\r\nerror[E0308]: mismatched types\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:225:22\r\n    |\r\n225 |                 Some(wraper_fn),\r\n    |                 ---- ^^^^^^^^^ types differ in mutability\r\n    |                 |\r\n    |                 arguments to this enum variant are incorrect\r\n    |\r\n    = note: expected fn pointer `unsafe extern \"C\" fn(_, _, *mut WasmEdge_MemoryInstanceContext, _, _, _, _) -> WasmEdge_Result`\r\n                  found fn item `extern \"C\" fn(_, _, *const [type error], _, _, _, _) -> WasmEdge_Result {wraper_fn}`\r\nnote: tuple variant defined here\r\n   --> /Users/lux/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:526:5\r\n    |\r\n526 |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\r\n    |     ^^^^\r\n\r\nerror[E0308]: mismatched types\r\n   --> /Users/lux/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasmedge-sys-0.9.0/src/instance/function.rs:287:22\r\n    |\r\n287 |                 Some(wraper_fn_single),\r\n    |                 ---- ^^^^^^^^^^^^^^^^ types differ in mutability\r\n    |                 |\r\n    |                 arguments to this enum variant are incorrect\r\n    |\r\n    = note: expected fn pointer `unsafe extern \"C\" fn(_, _, *mut WasmEdge_MemoryInstanceContext, _, _, _, _) -> WasmEdge_Result`\r\n                  found fn item `extern \"C\" fn(_, _, *const [type error], _, _, _, _) -> WasmEdge_Result {wraper_fn_single}`\r\nnote: tuple variant defined here\r\n   --> /Users/lux/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:526:5\r\n    |\r\n526 |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\r\n    |     ^^^^\r\n\r\nerror: aborting due to 23 previous errors\r\n\r\nSome errors have detailed explanations: E0308, E0412, E0425, E0531.\r\nFor more information about an error, try `rustc --explain E0308`.\r\nThe following warnings were emitted during compilation:\r\nwarning: [wasmedge-sys] Use default dir: \"/Users/lux/.wasmedge\"\r\nerror: could not compile `wasmedge-sys` due to 24 previous errors\r\nProcess finished with exit code 101\r\n### Expected\r\n\r\nit work\r\n\r\n## Environment\r\n\r\nDarwin luxdeMacBook-Pro.local 22.1.0 Darwin Kernel Version 22.1.0: Mon Aug 15 20:06:40 PDT 2022; root:xnu-8792.40.29.161.2~1/RELEASE_ARM64_T8103 arm64\r\n\r\n\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- Please provide as much information as necessary to reproduce the bug. -->\r\n",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/1820/comments",
    "author": "xunfeng1980",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2022-09-04T13:59:34Z",
        "body": "Hi @xunfeng1980 \r\n\r\nAccording to your error msg `error[E0425]: cannot find function, tuple struct or tuple variant WasmEdge_CompilerCompileFromBuffer in module ffi`, it looks like your wasmedge library version is not updated to the latest one. This API is added in the 0.11.0 release. Please check that you have updated the wasmedge version. Thanks."
      },
      {
        "user": "xunfeng1980",
        "created_at": "2022-09-04T14:32:15Z",
        "body": "thx,it work."
      }
    ]
  },
  {
    "number": 1325,
    "title": "Import WASI doesn't import \"wasi_unstable\"",
    "created_at": "2022-03-06T13:38:43Z",
    "closed_at": "2022-03-07T09:09:00Z",
    "labels": [
      "question",
      "wontfix"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/1325",
    "body": "## Motivation\r\n\r\nSome Wasm files are using `wasi_unstable`, but the Wasi module only contains `wasi_snapshot_preview1`.\r\n\r\n## Details\r\n\r\nGot an error `When linking module: \"wasi_unstable\", function name: \"proc_exit\"` when I tried to load a specific Wasm file.\r\n",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/1325/comments",
    "author": "spacewander",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2022-03-07T09:09:00Z",
        "body": "The `wasi_unstable` is called `old/snapshot_0` now, which is deprecated and replaced with `wasi_snapshot_preview1`.\r\n\r\nUnfortunately, we don't have plan to implement it in the near future."
      }
    ]
  },
  {
    "number": 3503,
    "title": "O_TRUNC print bug.",
    "created_at": "2024-06-24T07:52:21Z",
    "closed_at": "2024-07-24T11:08:07Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted",
      "WASI",
      "fuzz-different-behavior"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/3503",
    "body": "### Summary\r\n\r\nThe file is opened with O_RDWR and O_TRUNC, but do not print`Access mode: O_TRUNC`.\r\nI'm not sure whether this is a bug.\r\n\r\n### Current State\r\n\r\nWasmEdge print:\r\n```\r\nGet file descriptor of file subdir_2/subfile_3 succeed!\r\nAccess mode: Read/Write\r\nEnter function fd_fdstat_set_flags_00018_ZJtyU\r\nSetting flags succeed!\r\nAfter setting flags\r\nAccess mode: Read/Write\r\nAccess mode: O_APPEND\r\n```\r\n\r\n### Expected State\r\nPrint:\r\n```\r\nGet file descriptor of file subdir_2/subfile_3 succeed!\r\nAccess mode: Read/Write\r\nAccess mode: O_TRUNC\r\nEnter function fd_fdstat_set_flags_00018_ZJtyU\r\nSetting flags succeed!\r\nAfter setting flags\r\nAccess mode: Read/Write\r\nAccess mode: O_TRUNC\r\nAccess mode: O_APPEND\r\n```\r\n\r\n### Reproduction steps\r\n\r\nThe test case is :\r\n```\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n\r\nint get_fd(const char *filename, int flags) {\r\n    int fd = open(filename, flags);\r\n    \r\n    if (fd == -1) {\r\n        printf(\"Get file descriptor of file %s failed!\\n\", filename);\r\n        return -1;\r\n    } else {\r\n        printf(\"Get file descriptor of file %s succeed!\\n\", filename);\r\n        return fd;\r\n    }\r\n}\r\n\r\nvoid closebyfd(int fd) {\r\n    if (close(fd) == -1) {\r\n        printf(\"Close the file %d by descriptor failed!\\n\", fd);\r\n    }\r\n}\r\n\r\nvoid fd_fdstat_set_flags_00018_ZJtyU(int fd) {\r\n    printf(\"Enter function fd_fdstat_set_flags_00018_ZJtyU\\n\");\r\n\r\n    int flags = fcntl(fd, F_GETFL);\r\n    flags = flags | O_APPEND;\r\n    \r\n    if (fcntl(fd, F_SETFL, flags) == -1) {\r\n        printf(\"Setting flags failed!\\n\");\r\n    } else {\r\n        printf(\"Setting flags succeed!\\n\");\r\n    }\r\n}\r\n\r\n\r\n    \r\nvoid print_flags(int fd){\r\n    int flags1 = fcntl(fd, F_GETFL);\r\n    int access_mode1 = flags1 & O_ACCMODE;\r\n    if (access_mode1 == O_RDONLY) {\r\n        printf(\"Access mode: Read Only\\n\");\r\n    }\r\n    if (access_mode1 == O_WRONLY) {\r\n        printf(\"Access mode: Write Only\\n\");\r\n    }\r\n    if (access_mode1 == O_RDWR) {\r\n        printf(\"Access mode: Read/Write\\n\");\r\n    }\r\n    if (flags1 & O_TRUNC) {\r\n        printf(\"Access mode: O_TRUNC\\n\");\r\n    }\r\n    if (flags1 & O_APPEND) {\r\n        printf(\"Access mode: O_APPEND\\n\");\r\n    }\r\n    if (flags1 & O_CREAT) {\r\n        printf(\"Access mode: O_CREAT\\n\");\r\n    }\r\n    if (flags1 & O_EXCL) {\r\n        printf(\"Access mode: O_EXCL\\n\");\r\n    }\r\n    if (flags1 & O_NONBLOCK) {\r\n        printf(\"Access mode: Non-blocking\\n\");\r\n    }\r\n    if (flags1 & O_SYNC) {\r\n        printf(\"Access mode: Synchronous Write\\n\");\r\n    }\r\n    if (flags1 & O_DSYNC) {\r\n        printf(\"Access mode: Data Synchronization Write\\n\");\r\n    }\r\n}\r\n    \r\nint main() {\r\n    \r\n    int fd = get_fd(\"subdir_2/subfile_3\", O_RDWR | O_TRUNC);\r\n\r\n    if (fd == -1) {\r\n        return 1;\r\n    }\r\n\r\n    \r\n    print_flags(fd);\r\n    fd_fdstat_set_flags_00018_ZJtyU(fd);\r\n    printf(\"After setting flags\\n\");\r\n    print_flags(fd);\r\n\r\n\r\n    closebyfd(fd);\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\nSteps to reproduce:\r\n(1)compile to wasm:`./wasi-sdk-21.0/bin/clang --target=wasm32-unkown-wasi --sysroot=./wasi-sdk-21.0/share/wasi-sysroot test.c -o test.wasm`\r\n\r\n(2)Running wasm:\r\n(Before run the Wasm file, subdir_2/subfile_3 exists.)\r\nwasmedge --dir=. test.wasm\r\n\r\n\r\n\r\n### Components\r\n\r\nCLI\r\n\r\n### WasmEdge Version or Commit you used\r\n\r\n0.13.5 and 0.13.3\r\n\r\n### Operating system information\r\n\r\nUbuntu 20.04\r\n\r\n### Hardware Architecture\r\n\r\nx86_64\r\n",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/3503/comments",
    "author": "Userzxcvbvnm",
    "comments": [
      {
        "user": "ayushrakesh",
        "created_at": "2024-06-28T07:50:47Z",
        "body": "@Userzxcvbvnm In which file is error coming?"
      },
      {
        "user": "Userzxcvbvnm",
        "created_at": "2024-06-29T02:33:11Z",
        "body": "> @Userzxcvbvnm In which file is error coming?\r\n\r\nWasmEdge does not print \"Access mode: O_TRUNC\""
      },
      {
        "user": "arujjval",
        "created_at": "2024-07-02T05:26:12Z",
        "body": "@Userzxcvbvnm Can you give more info on the `subdir_2/subfile_3` file? I guess the file above is reading it. "
      },
      {
        "user": "Userzxcvbvnm",
        "created_at": "2024-07-03T04:33:39Z",
        "body": "It is a file with random generated string as the content \"asadsdwedfwe34r34r\""
      },
      {
        "user": "guojidan",
        "created_at": "2024-07-17T07:50:58Z",
        "body": "This is not a bug. `O_TRUNC` is not a flag of `fcntl`, so the `fcntl` function cannot be used to obtain this flag.  \r\nEven if we run this test case directly, such as `gcc test.c -o test` and then `./test`, it still does not output the text `Access mode: O_APPEND`.  \r\n\r\nand, I ran this test case mentioned above and it worked well, the size of `subdir_2/subfile_3` is 0"
      },
      {
        "user": "Userzxcvbvnm",
        "created_at": "2024-07-24T11:08:05Z",
        "body": "Thanks for your reply!"
      }
    ]
  },
  {
    "number": 2503,
    "title": "Update libsql integration to 0.12",
    "created_at": "2023-05-16T23:03:18Z",
    "closed_at": "2024-08-16T00:18:23Z",
    "labels": [
      "help wanted",
      "integration"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/2503",
    "body": "## Motivation\r\n\r\nThe libsql UDF runtime and examples are still in WasmEdge 0.11. We should update that.\r\n\r\n## Details\r\n\r\n* Update the integration WasmEdge version to 0.12.1\r\n* Update the TFLite UDF example to WASI NN + TFLite plugin\r\n* Update the web service UDF example to HTTPS + TLS plugin\r\n",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/2503/comments",
    "author": "juntao",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2024-06-04T19:46:26Z",
        "body": "What's the status of this issue?"
      },
      {
        "user": "hydai",
        "created_at": "2024-06-06T23:12:33Z",
        "body": "Ping @L-jasmine "
      },
      {
        "user": "hydai",
        "created_at": "2024-08-16T00:18:23Z",
        "body": "Closing due to inactive."
      }
    ]
  },
  {
    "number": 2104,
    "title": "Tracking issue for missing network functions on macOS.",
    "created_at": "2022-11-22T08:49:56Z",
    "closed_at": "2022-11-23T08:32:43Z",
    "labels": [
      "bug",
      "help wanted",
      "platform-macos",
      "c-Internal"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/2104",
    "body": "There are a few unimplemented network functions on macOS.\r\n\r\n- [x] `sockGetLoaclAddr`\r\n- [x] `sockGetPeerAddr`",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/2104/comments",
    "author": "MediosZ",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2022-11-23T08:32:43Z",
        "body": "I think this is fixed after #2104 got merged."
      }
    ]
  },
  {
    "number": 1548,
    "title": "[Cmake] Enable WasmEdge C API static library on MacOS",
    "created_at": "2022-06-15T08:45:29Z",
    "closed_at": "2022-06-16T13:50:22Z",
    "labels": [
      "enhancement",
      "help wanted",
      "priority:low",
      "platform-macos"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/1548",
    "body": "## Motivation\r\n\r\nThe static library of WasmEdge C API will build failed on MacOS:\r\n\r\n```bash\r\nFAILED: lib/api/CMakeFiles/wasmedge_c_static /Users/q82419/proj/WasmEdge/build/lib/api/CMakeFiles/wasmedge_c_static\r\ncd /Users/q82419/proj/WasmEdge/build/lib/api && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/spdlog::spdlog && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/thirdparty/spdlog/libspdlog.a --output=objs/spdlog::spdlog && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeSystem && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/system/libwasmedgeSystem.a --output=objs/wasmedgeSystem && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeCommon && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/common/libwasmedgeCommon.a --output=objs/wasmedgeCommon && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgePO && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/po/libwasmedgePO.a --output=objs/wasmedgePO && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeLoaderFileMgr && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/loader/libwasmedgeLoaderFileMgr.a --output=objs/wasmedgeLoaderFileMgr && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeLoader && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/loader/libwasmedgeLoader.a --output=objs/wasmedgeLoader && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeValidator && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/validator/libwasmedgeValidator.a --output=objs/wasmedgeValidator && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeExecutor && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/executor/libwasmedgeExecutor.a --output=objs/wasmedgeExecutor && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeHostModuleWasi && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/host/wasi/libwasmedgeHostModuleWasi.a --output=objs/wasmedgeHostModuleWasi && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgePlugin && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/plugin/libwasmedgePlugin.a --output=objs/wasmedgePlugin && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E make_directory objs/wasmedgeVM && /Library/Developer/CommandLineTools/usr/bin/ar -x /Users/q82419/proj/WasmEdge/build/lib/vm/libwasmedgeVM.a --output=objs/wasmedgeVM && /Library/Developer/CommandLineTools/usr/bin/ar -qcs libwasmedge_c.a /Users/q82419/proj/WasmEdge/build/lib/api/CMakeFiles/wasmedgeCAPI.dir/./wasmedge.cpp.o objs/*/*.o && /usr/local/Cellar/cmake/3.21.4/bin/cmake -E rm -rf objs\r\nar: --output=objs/spdlog::spdlog: not found in archive\r\n```\r\n\r\n## Details\r\n\r\nFix this.\r\n\r\n## Appendix\r\n\r\nBuild with `-DWASMEDGE_BUILD_STATIC_LIB` on MacOS.",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/1548/comments",
    "author": "q82419",
    "comments": [
      {
        "user": "MediosZ",
        "created_at": "2022-06-15T15:07:14Z",
        "body": "I think this error is caused by using `ar` from `Xcode toolchain`, which is the default `CMAKE_AR`.\r\nWhen using the `ar` from `binutils`, the error disappeared.\r\n\r\n```bash\r\n➜  api git:(fix-static-macos) ✗ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar -x /Users/tricster/Documents/Code/WasmEdge/build/_deps/spdlog-build/libspdlog.a --output=objs/spdlog::spdlog\r\nar: --output=objs/spdlog::spdlog: not found in archive\r\n➜  api git:(fix-static-macos) ✗ /usr/local/opt/binutils/bin/ar -x /Users/tricster/Documents/Code/WasmEdge/build/_deps/spdlog-build/libspdlog.a --output=objs/spdlog::spdlog \r\n```"
      },
      {
        "user": "q82419",
        "created_at": "2022-06-16T04:04:03Z",
        "body": "Thanks for the information!\r\nAre you interested in creating a PR to fix this for the contribution?\r\nThanks."
      },
      {
        "user": "MediosZ",
        "created_at": "2022-06-16T04:29:41Z",
        "body": "Sure, I am on it."
      },
      {
        "user": "hangedfish",
        "created_at": "2023-07-30T16:22:32Z",
        "body": "Fail to build with `-GXcode`\r\n\r\n```bash\r\n% cmake -S. -B_builds -GXcode -DWASMEDGE_BUILD_AOT_RUNTIME=OFF\r\n% cmake --build _builds --config Release --target wasmedge_static\r\nCommand line invocation:\r\n    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project WasmEdge.xcodeproj build -target wasmedge_static -parallelizeTargets -configuration Release -hideShellScriptEnvironment\r\n\r\nUser defaults from command line:\r\n    HideShellScriptEnvironment = YES\r\n    IDEPackageSupportUseBuiltinSCM = YES\r\n\r\n2023-07-31 00:18:39.218 xcodebuild[2435:44460] Writing error result bundle to /var/folders/x8/53t4h3ld537db31300h6j2mr0000gn/T/ResultBundle_2023-31-07_00-18-0039.xcresult\r\nxcodebuild: error: The project 'WasmEdge.xcodeproj' does not contain a target named 'wasmedge_static'.\r\n```"
      },
      {
        "user": "MediosZ",
        "created_at": "2023-08-02T08:58:23Z",
        "body": "I am not sure if this an issue with Xcode or with macOS.\r\nActually the wasmedge_static target does not exist on macos with or without Xcode and does not exist on Ubuntu neither."
      },
      {
        "user": "hydai",
        "created_at": "2023-08-02T08:59:39Z",
        "body": "Hi @hangedfish \r\nDo you use `-DWASMEDGE_BUILD_STATIC_LIB=ON` when doing the configuration?"
      },
      {
        "user": "MediosZ",
        "created_at": "2023-08-02T09:04:06Z",
        "body": "I can confirm that when building with `-DWASMEDGE_BUILD_STATIC_LIB=ON`, targeting Xcode, there will be a target named `wasmedge_static_target`.\r\nSo just use `cmake --build _builds --config Release --target wasmedge_static_target`."
      },
      {
        "user": "hangedfish",
        "created_at": "2023-08-02T12:44:03Z",
        "body": "Thx, the `wasmedge_static_target` has worked. However, during the Xcode build process, other issues occurred. I will check again to investigate.\r\n"
      }
    ]
  },
  {
    "number": 1448,
    "title": "The installer should copy plugins into the installed folder",
    "created_at": "2022-05-13T10:12:24Z",
    "closed_at": "2022-05-27T15:37:07Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/WasmEdge/WasmEdge/issues/1448",
    "body": "## Motivation\r\n\r\nThe file structure of the latest pre-release 0.10.0-alpha.1:\r\n\r\n```\r\n.\r\n├── bin\r\n│   ├── wasmedge\r\n│   └── wasmedgec\r\n├── include\r\n│   └── wasmedge\r\n│       ├── dense_enum_map.h\r\n│       ├── enum_configure.h\r\n│       ├── enum_errcode.h\r\n│       ├── enum.inc\r\n│       ├── enum_types.h\r\n│       ├── int128.h\r\n│       ├── spare_enum_map.h\r\n│       ├── version.h\r\n│       └── wasmedge.h\r\n└── lib64\r\n    ├── libwasmedge_c.so\r\n    └── wasmedge\r\n        └── libwasmedgePluginWasmEdgeProcess.so\r\n```\r\n\r\nWe have moved the WasmEdge process host functions into an external shared library. The default installed path should be `~/.wasmedge/plugin`.\r\n\r\nIt's better that the installer and uninstaller to support copy and remove these files.",
    "comments_url": "https://api.github.com/repos/WasmEdge/WasmEdge/issues/1448/comments",
    "author": "hydai",
    "comments": [
      {
        "user": "hydai",
        "created_at": "2022-05-13T10:12:54Z",
        "body": "Hi @SAtacker,\r\n\r\nCould you please help with this issue?"
      },
      {
        "user": "SAtacker",
        "created_at": "2022-05-14T13:15:32Z",
        "body": "> Hi @SAtacker,\r\n> \r\n> Could you please help with this issue?\r\n\r\nYes, thanks for notifying me."
      },
      {
        "user": "SAtacker",
        "created_at": "2022-05-14T14:23:04Z",
        "body": "Can you please point me to the resource where the details of these are mentioned?\r\nDetails like why was it done? How the user achieves it?\r\nAlso, I need to make the default directory to `~/.wasmedge/plugin` for this version and beyond. Is that it?"
      },
      {
        "user": "hydai",
        "created_at": "2022-05-15T09:50:10Z",
        "body": "Yes, after 0.10.0, the default directory will have a new folder called `plugin` which contains all the default installed plugins from the tarball. You may need to check the tarball on every distros to make sure the resource path."
      },
      {
        "user": "SAtacker",
        "created_at": "2022-05-15T11:47:38Z",
        "body": "> Yes, after 0.10.0, the default directory will have a new folder called `plugin` which contains all the default installed plugins from the tarball. You may need to check the tarball on every distros to make sure the resource path.\r\n\r\nThanks. Another thing is, with the new plugins, shouldn't the directory tree you have mentioned be something like\r\n```\r\n.wasmedge/\r\n                  ├── bin\r\n                  │   ├── wasmedge\r\n                  │   └── wasmedgec\r\n                  ├── include\r\n                  │   └── wasmedge\r\n                  │       ├── dense_enum_map.h\r\n                  │       ├── enum_configure.h\r\n                  │       ├── enum_errcode.h\r\n                  │       ├── enum.inc\r\n                  │       ├── enum_types.h\r\n                  │       ├── int128.h\r\n                  │       ├── spare_enum_map.h\r\n                  │       ├── version.h\r\n                  │       └── wasmedge.h\r\n                  └── lib64\r\n                      └── libwasmedge_c.so\r\n.wasmedge/plugin/\r\n                              └── libwasmedgePluginWasmEdgeProcess.so\r\n```"
      },
      {
        "user": "SAtacker",
        "created_at": "2022-05-15T11:51:05Z",
        "body": "It'll be best if I could get access to a temporary tarball to avoid any implicit thoughts.\r\nThanks"
      },
      {
        "user": "hydai",
        "created_at": "2022-05-16T08:20:52Z",
        "body": "@ibmibmibm Could you please explain the current file structure and default loaded path?"
      },
      {
        "user": "ibmibmibm",
        "created_at": "2022-05-16T08:26:28Z",
        "body": "Currently the tarball is for system-wide installation, so it follows the system-wide plugin installation path, which is `PREFIX/LIB/wasmedge`, but the per-user plugin installation path is at `$HOME/.wasmedge/plugin`."
      }
    ]
  }
]