[
  {
    "number": 2003,
    "title": "Build of perspective-Python for win32",
    "created_at": "2022-11-01T23:20:11Z",
    "closed_at": "2022-11-02T00:42:38Z",
    "labels": [
      "question",
      "Python"
    ],
    "url": "https://github.com/finos/perspective/issues/2003",
    "body": "## Support Question\r\n\r\nI see that there is no win32 py37 wheel on pypi.  We work with win32 Python and would like to use the latest perspective Python api.  Would it be possible to build for that target?\r\n\r\nThank you\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/2003/comments",
    "author": "scp871",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2022-11-02T00:42:38Z",
        "body": "Windows is annoying to build for in general, so at this time we're limiting our builds to amd64. Having built for win32 in the past, there were issues with apache-arrow's support for win32."
      }
    ]
  },
  {
    "number": 1861,
    "title": "Title for `PerspectiveWidget`",
    "created_at": "2022-06-20T16:21:24Z",
    "closed_at": "2022-06-21T11:14:26Z",
    "labels": [
      "question",
      "Jupyter",
      "Python"
    ],
    "url": "https://github.com/finos/perspective/issues/1861",
    "body": "## Feature Request\r\nAdd support for title in the perspective widget. In the demo gif, there is an [untitled] title, but I do not think that this is supported in the jupyter widget?",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1861/comments",
    "author": "wangkev",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2022-06-21T11:14:26Z",
        "body": "The example is demoing perspective workspace which is a collection of linked perspective viewers. Perspective workspace lets you do things like rearrange a layout of perspective viewers, cross filter, etc, and one of the features is to name the viewer's window. Perspective viewer has no notion of a \"window\" on its own, so it does not support setting a title on a window.\r\n\r\nThe python widget is a wrapper around a perspective viewer, not perspective workspace, so it cannot support setting a title. There is ongoing work to make a python widget out of perspective workspace, and that will support this functionality. "
      }
    ]
  },
  {
    "number": 1860,
    "title": "manually select gradient scheme for column in JupyterLab",
    "created_at": "2022-06-19T19:35:44Z",
    "closed_at": "2022-06-21T11:18:38Z",
    "labels": [
      "question",
      "Python"
    ],
    "url": "https://github.com/finos/perspective/issues/1860",
    "body": "## Support Question\r\n\r\nHello, how can I specify in the PerspectiveWidget constructor call that I want to use a gradient (or bar) view scheme for certain columns?\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1860/comments",
    "author": "zxweed",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2022-06-21T11:18:38Z",
        "body": "Gradient:\r\n`plugin_config={'columns': {'YOUR COLUMN NAME': {'gradient': MAX VALUE FOR GRADIENT, 'number_color_mode': 'gradient'}}}`\r\n\r\nBar\r\n`plugin_config={'columns': {'YOUR COLUMN NAME': {'gradient': MAX VALUE FOR GRADIENT, 'number_color_mode': 'bar'}}}`"
      }
    ]
  },
  {
    "number": 1255,
    "title": "Binding to a database on the server",
    "created_at": "2020-11-29T13:16:20Z",
    "closed_at": "2021-03-27T01:20:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/1255",
    "body": "## Support Question\r\n\r\nThe remote server example nicely demonstrates hosting a local file as a table.\r\n\r\nWondering what does it take to host a real table (from a local database)? For example, say we have a SQLite or some other database and want to bind one of its tables - what kind of API marshalling need to be done?\r\n\r\nIs there some kind of interface / class that can be implemented so that **any** datasource can potentially become a table?\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1255/comments",
    "author": "KrishnaPG",
    "comments": [
      {
        "user": "nevi-me",
        "created_at": "2020-12-03T08:30:11Z",
        "body": "Hi @KrishnaPG. I've been able to successfully use perspective on the browser, and serve it data separately from a SQL backend. To do this, I was using JDBC > Apache Arrow via the provided utilities in the Arrow project. I then converted the Arrow data into batches, which I streamed to the browser via gRPC-web. Then on the browser, I read the Arrow data into Perspective.\r\n\r\nWould a workflow like that work for you?"
      },
      {
        "user": "KrishnaPG",
        "created_at": "2020-12-03T10:25:46Z",
        "body": "Thank you @nevi-me That sounds reasonable. Perhaps the question would be then,:\r\n\r\n-  how do we map the frontEnd (perspective viewer's) filters, sort, scroll position etc. into the SQL / NoSQL queries on the backend\r\n\r\nOne way binding from server/DB -> frontEnd/Perspectiv Viewer (streaming the results one way) is straight forward. But how to achieve the two-way binding, specifically being able to apply the filters, sort etc. on the fly and get (only) the relevant data from the very large DB.\r\n\r\nAs user keeps changing the filters, sort etc. on the Perspective viewer, these need to be somehow sent to the server /DB adapter to tune the data that is streamed to the frontend. Is there some example / API to demonstrate the conversion of front-end params to query params?"
      }
    ]
  },
  {
    "number": 1192,
    "title": "Composing filters with 'or'",
    "created_at": "2020-09-10T12:59:11Z",
    "closed_at": "2022-03-14T01:53:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/1192",
    "body": "## Support Question\r\n\r\nIs it possible to compose different filter conditions with 'or'. For example, I want to have a filter definition like this:\r\n[[[\"Freq\", \"<\", 10], 'or', [\"Freq\", \">\", 90]]]\r\n\r\nIf not so, is this a feature that may be implemented?",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1192/comments",
    "author": "TimeWanderer",
    "comments": [
      {
        "user": "kryaksy",
        "created_at": "2020-09-10T13:15:31Z",
        "body": "Similar question. How about \"between\" and \"not between\"?"
      },
      {
        "user": "timkpaine",
        "created_at": "2020-09-10T21:18:32Z",
        "body": "@kryaksy \"between\" and \"not between\" reduces to \"and\" and \"or\""
      },
      {
        "user": "TimeWanderer",
        "created_at": "2020-09-11T11:45:51Z",
        "body": "@timkpaine AFAIK, there are no filters \"between\" and \"not between\". I believe @kryaksy was asking whether those filters could be implemented or not as a feature. "
      },
      {
        "user": "kryaksy",
        "created_at": "2020-09-11T11:50:38Z",
        "body": "@TimeWanderer That's right. Also I don't want to spoil the main question above. It would be useful if there are \"and\", \"or\" operators for numeric filtering."
      },
      {
        "user": "timkpaine",
        "created_at": "2020-09-11T12:37:05Z",
        "body": "Between is \" > small and < large\" and not between is \" < small or > large\", so you're asking the same question "
      },
      {
        "user": "smalltalk96",
        "created_at": "2020-12-29T10:21:43Z",
        "body": "\"in\" operator is also required"
      },
      {
        "user": "TimeWanderer",
        "created_at": "2020-12-29T20:33:46Z",
        "body": "@timkpaine 'or' has wider implications than just the numeric comparison filter, and in some cases, they are not reducible to other filter compositions."
      },
      {
        "user": "timkpaine",
        "created_at": "2020-12-29T20:55:57Z",
        "body": "> @timkpaine 'or' has wider implications than just the numeric comparison filter, and in some cases, they are not reducible to other filter compositions.\r\n\r\nI haven't said anything about 'or', only that 'between' and not 'between' is reducible to operations composed of 'and' and 'or'"
      },
      {
        "user": "texodus",
        "created_at": "2022-03-14T01:53:59Z",
        "body": "This (as well as arbitrary row-wide filter conditions) has been supported since ~`0.10` or so via ExprTK expressions of `boolean` type.  Example\r\n\r\n```javascript\r\n{\r\n    \"expressions\": [\"\\\"Sales\\\" > 100 or \\\"Profit\\\" < 0\"],\r\n    \"filter\": [[\"\\\"Sales\\\" > 100 or \\\"Profit\\\" < 0\", \"==\", true]],\r\n    // ...\r\n}"
      }
    ]
  },
  {
    "number": 1190,
    "title": "JS Expanded Schema Definition",
    "created_at": "2020-09-09T11:39:49Z",
    "closed_at": "2021-01-14T15:12:15Z",
    "labels": [
      "question",
      "C++"
    ],
    "url": "https://github.com/finos/perspective/issues/1190",
    "body": "## Feature Request\r\nInclude native arrow types in JS schema definition as an option.\r\n\r\n### Description of Problem:\r\nI could not decide whether this is a bug, or it is intentional/out of inevitability but here is the problem:\r\n\r\nWhen we start a table with a schema and update the table with arrow types, there can be type mismatches as JS types are more simplistic than Arrow types. To my knowledge, the 'number' type defaults to int32, but when we update it with an arrow type of UInt64, perspective complains about a type mismatch.\r\n\r\nThis problem also relates to  #1189 as this feature helps us circumvent it for the time being.\r\n\r\n### Potential Solutions:\r\nIncluding native arrow types in the schema parameters would solve this issue.",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1190/comments",
    "author": "TimeWanderer",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2020-09-10T06:42:37Z",
        "body": "Thanks for the report!  This is a good catch.  The short answer is, Perspective currently doesn't officially support Arrow updates to schema-created `Table()` - you should just create your `Table()` directly from your dataset as in `worker.Table(arrow)`.\r\n\r\nArrow and Pandas' `DataFrame` are the only input data formats Perspective can currently read which are column-typed and come with a schema;  due to the latter, I figured the use case for explicitly re-declaring this schema for a new, empty Perspective `Table` would be fairly rare.  Internally, we do have an array of integer and float types for columns, unsigned and bitwidth variants.  When the engine was ported to WebAssembly, we discarded most numeric types that were not natively supported in Javascript, the reasoning being that this level of specificity was overkill in a language that effectively only implemented Double.  However, when reading an Arrow, we still use these more specific types for the internal Perspective `Table()`, both to preserve memory and optimize read performance, even though Perspective `table.schema()` still just reports simple family types `\"integer\"` and `\"float\"`.\r\n\r\nThere are a _lot_ of design issues to consider around this unfortunately, especially wrt `.update()` with heterogenous formats.  We've discussed exposing the full range of \"internal\" Perspective types to the public API, and letting `\"integer\"` and `\"float\"` continue to be aliases for `\"int32\"` and `\"float64\"` (respectively), which would make declaring a schema for Apache Arrow possible, but there would still be issues as ultimately Perspective, Arrow and `DataFrame` support slightly different type sets (eg #1189).\r\n\r\n"
      },
      {
        "user": "TimeWanderer",
        "created_at": "2020-09-10T09:37:44Z",
        "body": "> There are a lot of design issues to consider around this unfortunately, especially wrt .update() with heterogenous formats.\r\n\r\nI believed this was the case. I just wanted to confirm. We also use the suggested workaround. Do these limitations also make it impossible to fix #1189 ? That problem seems to be not just demoting the data type, but interpreting date type from arrow wrong. So it seems fixable."
      }
    ]
  },
  {
    "number": 1161,
    "title": "unable to install using pip",
    "created_at": "2020-08-21T03:56:06Z",
    "closed_at": "2020-08-23T13:36:15Z",
    "labels": [
      "question",
      "Python"
    ],
    "url": "https://github.com/finos/perspective/issues/1161",
    "body": "## Bug Report\r\n\r\nGetting error when I'm building perspective with pip\r\n\r\n  CMake Error at cmake/modules/FindPyArrow.cmake:52 (message):                                                                                     \r\n    message called with incorrect number of arguments                                                                                              \r\n  Call Stack (most recent call first):                                                                                                             \r\n    CMakeLists.txt:406 (find_package)                                                                                                              \r\n                                                                                                                                                   \r\n                                                                                                                                                   \r\n  CMake Error at cmake/modules/FindPyArrow.cmake:53 (string):                                                                                      \r\n    string sub-command REPLACE requires at least four arguments.                                                                                   \r\n  Call Stack (most recent call first):                                                                                                             \r\n    CMakeLists.txt:406 (find_package)                                                                                                              \r\n                                                                                                                                                   \r\n                                                                                                                                                   \r\n  CMake Error at cmake/modules/FindPyArrow.cmake:54 (message):                                                                                     \r\n    message called with incorrect number of arguments                                                                                              \r\n  Call Stack (most recent call first):                                                                                                             \r\n    CMakeLists.txt:406 (find_package)                                                                                                              \r\n                                                                                                                                                   \r\n                                                                                                                                                   \r\n  CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:165 (message):                                                       \r\n    Could NOT find PyArrow (missing: PYTHON_PYARROW_INCLUDE_DIR                                                                                    \r\n    PYTHON_PYARROW_LIBRARY_DIR) (found version \"\")                                                                                                 \r\n  Call Stack (most recent call first):                                                                                                             \r\n    /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:458 (_FPHSA_FAILURE_MESSAGE)                                                      \r\n    cmake/modules/FindPyArrow.cmake:81 (find_package_handle_standard_args)                                                                         \r\n    CMakeLists.txt:406 (find_package)                                                                                                              \r\n                                           \r\n\r\n### Steps to Reproduce:\r\n 1. run pip3 install perspective-python\r\n\r\n### Expected Result:\r\nshould install\r\n\r\n### Actual Result:\r\nget error\r\n\r\n### Environment:\r\nlinux mageia\r\n\r\n### Additional Context:\r\n...add any other context about the problem here. If applicable, add screenshots to help explain...\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1161/comments",
    "author": "joequant",
    "comments": [
      {
        "user": "sc1f",
        "created_at": "2020-08-21T21:29:49Z",
        "body": "You'll need to install `pyarrow==0.16.0` before installing Perspective. We will have wheels in the next release that will make the install process easier."
      }
    ]
  },
  {
    "number": 1145,
    "title": "How can one control the number of TBB threads being used? ( perspective-python )",
    "created_at": "2020-07-31T15:34:49Z",
    "closed_at": "2020-08-10T04:19:52Z",
    "labels": [
      "question",
      "Python"
    ],
    "url": "https://github.com/finos/perspective/issues/1145",
    "body": "While trying out perspective-python we noticed our CPU usage skyrocketed to use almost all 36 cores on our box.\r\nProfiling one of those threads shows TBB as the top hitter\r\n  47.97%  python   libtbb.so            [.] tbb::internal::rml::private_worker::run\r\n  20.77%  python   libtbb.so            [.] tbb::internal::rml::private_server::wake_some\r\n  17.21%  python   libtbb.so            [.] tbb::internal::custom_scheduler<tbb::internal::IntelSchedulerTraits>::receive_or_steal_task\r\n...\r\n\r\nwe dont use tbb in our code and i see TBB is used in perspective.  Is there a way to control how many cores are dedicated here?",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1145/comments",
    "author": "robambalu",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2020-07-31T15:42:07Z",
        "body": "This is more of a question for intel, does `TBB_NUM_THREADS` env var work?"
      },
      {
        "user": "timkpaine",
        "created_at": "2020-07-31T15:48:08Z",
        "body": "alternatively we can make it a parameter and implement this:\r\n`tbb::global_control c(tbb::global_control::max_allowed_parallelism, nthreads)`\r\n\r\n"
      },
      {
        "user": "robambalu",
        "created_at": "2020-07-31T15:50:54Z",
        "body": "configuration option would be preferable to env var if thats doable"
      },
      {
        "user": "texodus",
        "created_at": "2020-08-10T04:22:22Z",
        "body": "Thanks @robambalu and @timkpaine  - I've added `set_threadpool_size()`method which allows specifying the TBB threadpool size, it will be released in `v0.5.3`."
      },
      {
        "user": "robambalu",
        "created_at": "2020-08-10T18:40:56Z",
        "body": "great thank you!"
      }
    ]
  },
  {
    "number": 1117,
    "title": "perspective viewer notifyResize() api doesnt work!",
    "created_at": "2020-07-10T14:43:08Z",
    "closed_at": "2020-10-08T07:55:35Z",
    "labels": [
      "question",
      "JS",
      "needs-repro"
    ],
    "url": "https://github.com/finos/perspective/issues/1117",
    "body": "\r\n Hi,\r\nI have developing own plugin for perspective, \r\nfrom perspepective viewer I am invoking \r\n\r\n`viewer.notifyresize() ` but idoesnt invoke my plugin code for resize which I have configured\r\n\r\n`global.registerPlugin(viewRef.plugin.type, {\r\n        ...viewRef.plugin,\r\n        selectMode: \"toggle\",\r\n        deselectMode: \"pivots\",\r\n        create: drawView(viewRef),\r\n        update: update,\r\n        resize: resizeView,\r\n        save: save,\r\n        restore: restoreView,\r\n        delete: deleteView\r\n    });`\r\n\r\nany help would be appreciated!.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1117/comments",
    "author": "Madasamy26",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2020-09-07T06:46:04Z",
        "body": "Thanks for the report!\r\n\r\nThese plugin API functions are `async` (or `Promise()` returning), which are notorious for swallowing errors - perhaps your `resizeView` is throwing an exception that is uncaught?  The supplied snippet trivially invokes `resizeView = x => console.log(x)` for me, and the functionality itself is somewhat cornerstone to all resize scenarios, so I'd be surprised if it simply did not work, though there may be bugs;  if you have a more complete repro, feel free to re-open and I can take a look."
      }
    ]
  },
  {
    "number": 1113,
    "title": "Lazy loading with perspective-python backend",
    "created_at": "2020-07-08T13:47:22Z",
    "closed_at": "2020-07-09T15:00:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/1113",
    "body": "Does exist a way to provide lazy loading of data from perspective-python backend?\r\nWhen I use remote Perspective via perspective-python and Tornado server as in example:\r\n\r\n```python\r\nfrom perspective import Table, PerspectiveManager, PerspectiveTornadoHandler\r\nimport tornado.ioloop\r\nimport tornado.web\r\n\r\n# Create an instance of PerspectiveManager, and host a Table\r\nMANAGER = PerspectiveManager()\r\n\r\nTABLE = Table(large_dataset)\r\nVIEW_2015 = TABLE.view(filter=[[\"Year\", \"==\", \"2015\"]])\r\n\r\nMANAGER.host_view(\"view_2015\", VIEW_2015)\r\n\r\napp = tornado.web.Application([\r\n    # create a websocket endpoint that the client Javascript can access\r\n    (r\"/websocket\", PerspectiveTornadoHandler, {\"manager\": MANAGER, \"check_origin\": True})\r\n])\r\n\r\n# Start the Tornado server\r\napp.listen(8888)\r\nloop = tornado.ioloop.IOLoop.current()\r\nloop.start()\r\n```\r\nand on my frontend load this VIEW:\r\n\r\n```javascript\r\nperspectiveViewer.load(websocket.open_view(\"view_2015\"))\r\n```\r\nIs there a way to make immediate render of visible rows (or some first chunk of data) and load rest data in background (or by user scroll events)?\r\n\r\nMy dataset that pushing to browser through websocket is ~135Mb, and I need to wait all this data before see any rows.",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1113/comments",
    "author": "Yuri2b",
    "comments": [
      {
        "user": "sc1f",
        "created_at": "2020-07-08T14:27:16Z",
        "body": "For larger datasets, use `host_table` and `websocket.open_table`. The user will get whatever data they are currently seeing, i.e. whatever is rendered in the grid.\r\n\r\nWe're working on a smoother/faster API for hosted views and large datasets."
      },
      {
        "user": "Yuri2b",
        "created_at": "2020-07-09T08:09:02Z",
        "body": "Now it's really blazing fast! Thank you"
      },
      {
        "user": "sc1f",
        "created_at": "2020-07-09T15:00:46Z",
        "body": "No problem - glad to hear it!"
      },
      {
        "user": "Harry040",
        "created_at": "2022-03-21T11:18:52Z",
        "body": "If my server only has 1G, large_dataset is 4G, Could I  use `TABLE = Table(large_dataset)`?\r\n\r\n"
      },
      {
        "user": "Harry040",
        "created_at": "2022-03-21T11:21:50Z",
        "body": "I have large data using feather format，It's out of memory, how to transform `Table`? @sc1f "
      }
    ]
  },
  {
    "number": 1100,
    "title": "Expanding Perspective as an educational tool for better understanding of finance.",
    "created_at": "2020-06-21T11:12:17Z",
    "closed_at": "2023-11-23T23:14:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/1100",
    "body": "## Feature Request\r\n\r\n## Pause the real-time data in Perspective Tool to analyse the stocks or understand anomalies.\r\n\r\n### Description of Problem:\r\nCurrently there is no option to pause the real time data changes in the perspective viewer to study and understand stalks.\r\nWhen we try to pause the display whether in Datagrid or Y-line graph, it doesn't pause long enough and begins to run at erratic speed and timing.This doesn't give the viewer a window of time long enough to analyse the stock prices or spot any anomaly.\r\n\r\n\r\n### Potential Solutions:\r\nWant to enable the viewer with a click or a button to stop for as long as they please ,at a particular stock exchange at a particular instance to pause and study the stock exchange or any anomaly.\r\nThis will empower any non finance background client to understand the stocks and enable them to take a deeper dive in the money business at their ease.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1100/comments",
    "author": "AgnivarnaTrivedi",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2023-11-23T23:14:03Z",
        "body": "This can be done at the API level, and probably should in most practical cases as the engine cannot have enough knowledge to prevent a significant memory leak in this case (as it must prepare for being un-paused at any time).\r\n\r\nAs Perspective is moving away from direct control over the data engine, for now this is out-of-scope, closing."
      }
    ]
  },
  {
    "number": 1088,
    "title": "Table.Clear() Usage",
    "created_at": "2020-06-15T17:56:37Z",
    "closed_at": "2020-09-11T20:49:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/1088",
    "body": "## Support Question\r\n\r\nHey!\r\n\r\nI just wanted to clarify the usage of `table.clear()` and whether it frees up column data for GC. I understand `table.delete()` explicitly mentions that in the documentation, but could not find any information about `table.clear()`.\r\n\r\nI am trying to understand the performance of my table when loaded with large and specific datasets. One benchmark I am consulting is the memory footprint in Chrome Task Manager. After updating my table of 4 columns with ~1.5 million rows, the memory footprint spikes to ~2.6GB. However, once I clear the table and update it with ~16,000 rows, the memory footprint remains at a similar size. Similarly, taking heap snapshots also show the same result.",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/1088/comments",
    "author": "yipalber",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2020-06-21T13:16:44Z",
        "body": "Clear empties without reclaiming memory, while delete does both."
      },
      {
        "user": "timkpaine",
        "created_at": "2020-09-11T20:49:23Z",
        "body": "closing, feel free to ask additional questions or reopen if there are specific issues/concerns"
      }
    ]
  },
  {
    "number": 972,
    "title": "`await Table.size()` doesn't return up-to-date results?",
    "created_at": "2020-03-12T00:58:56Z",
    "closed_at": "2020-03-17T21:23:54Z",
    "labels": [
      "question",
      "JS"
    ],
    "url": "https://github.com/finos/perspective/issues/972",
    "body": "## Bug Report\r\n\r\n### Steps to Reproduce:\r\n 1. Create `table: Table` in node.js with a schema and index via `const table = perspective.table(schema, { index })`.\r\n 2. Call `await table.update(rows)` where `n = rows.length`.\r\n 3. Next call `const m = await table.size()` and compare `n` to `m`.\r\n\r\n### Expected Result:\r\nI expected the result of `await table.size()` to reflect the change from the previous call to `await table.update()`.\r\n\r\n### Actual Result:\r\nIt seems to sometimes return the size from before the execution of the update (i.e. `m = 0`). Here is some example logging:\r\n\r\n```\r\nINFO\t[1]\tPerspective updated data in table XXX with 251 new rows, leaving a total of 0 rows\r\n```\r\nwhere `n = 251` and `m = 0`. The rows exist in the table and are visible in the UI.\r\n\r\n### Environment:\r\n\r\nUsing Node.js 12.x, Perspective 0.4.5, Typescript 3.8.3, running on linux (typically inside docker).\r\n\r\n### Additional Context:\r\n\r\nI am trying to keep an up-to-date count of the number of rows in each of the tables. We have many tables and users may select one in the UI, upon which the client will connect to the table via websocket. However it would be convenient to know the size of the tables (particularly e.g. if they are empty) before selecting it, without having to create a connection to each and every table. Thus we are attempting to have the node.js backend track this seperately after each data update.",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/972/comments",
    "author": "andyferris",
    "comments": [
      {
        "user": "sc1f",
        "created_at": "2020-03-17T21:23:54Z",
        "body": "This issue was fixed in PR #961, and should be in the latest `0.4.6` release of Perspective. I have added a test for this issue on a separate branch to prevent regression as well.\r\n\r\nThanks for the report!"
      }
    ]
  },
  {
    "number": 941,
    "title": "mouseover error with some charts in perspective-viewer",
    "created_at": "2020-02-21T17:23:35Z",
    "closed_at": "2023-11-23T22:59:46Z",
    "labels": [
      "question",
      "JS"
    ],
    "url": "https://github.com/finos/perspective/issues/941",
    "body": "## Bug Report\r\n\r\n### Steps to Reproduce:\r\n 1. use `<perspective-viewer>`\r\n 2. select a chart type\r\n 3. move mouse cursor over the chart\r\n 4. view error in console\r\n 5. repeat steps 2–3 until step 4 occurs\r\n\r\n```\r\nmodule.js:1 Uncaught TypeError: Cannot read property 'sourceEvent' of null\r\n    at e.a (module.js:1)\r\n    at Module.e.a (mouse.js:6)\r\n    at HTMLElement.e (d3fc.js:6661)\r\n    at HTMLElement.<anonymous> (on.js:27)\r\n```\r\n\r\n### Environment:\r\n```\r\n\"@finos/perspective-viewer\": \"0.4.3\",\r\n\"@finos/perspective-viewer-d3fc\": \"0.4.3\",\r\n\"@finos/perspective-viewer-hypergrid\": \"0.4.3\",\r\n\"@finos/perspective-webpack-plugin\": \"0.4.1\",\r\n```\r\nNode.js: `12.16.1`\r\nmacOS `10.15.3`\r\n\r\n### Additional Context:\r\n~~This didn't happen with `0.4.1` (of all plugins). Reverting only `@finos/perspective-viewer-d3fc` to `0.4.1` does not solve the issue.~~",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/941/comments",
    "author": "stevenvachon",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2023-11-23T22:59:46Z",
        "body": "I can't repro this, so closing. If you (or anyone) has a better repro steps then \"use charts until it breaks\", please feel free to re-open.\r\n\r\nIn general, for external libraries we depend on like `d3fc`, while I'm not pleased they can be log noisy, we also need to know that it causes an actual runtime error to have a plan to fix it. I would presume a hover effect of some sort is not displayed?"
      }
    ]
  },
  {
    "number": 929,
    "title": "Recommended way of loading Arrow data",
    "created_at": "2020-02-18T16:38:48Z",
    "closed_at": "2020-02-18T16:56:21Z",
    "labels": [
      "question",
      "JS"
    ],
    "url": "https://github.com/finos/perspective/issues/929",
    "body": "## Support Question\r\n\r\nI have an endpoint that receives a stream of Arrow data (coming from Rust). The data is streamed via gRPC as record batches, which I then join when the stream completes, and generate an Arrow table with JavaScript.\r\n\r\nI'm comfortable that Rust generates the correct data, as I can read it correctly in JS, but I'm struggling with figuring out how to create a table out of this data.\r\n\r\nI have the below snippet;\r\n\r\n```typescript\r\n\r\nimport * as Arrow from \"@apache-arrow/esnext-umd/Arrow\";\r\nimport * as viewer from \"@finos/perspective-viewer\";\r\n\r\n// ... getting a stream of bytes and joining them\r\nconst data: Uint8Array[] = streamData; // already collected\r\n\r\n// create JS table\r\nlet table = Arrow.Table.from(data); // this works as I can read the schema and the data\r\n\r\n// get the viewer\r\nlet pV: viewer.HTMLPerspectiveViewerElement = components.perspectiveViewer.nativeElement;\r\n\r\n// option 1: loading arrow data from the table\r\npV.load(table);\r\n\r\n// option 2: loading the bytes\r\npV.load(data);\r\n\r\n```\r\n\r\n__Option 1__\r\n\r\nThis fails with the below, I presume because I'm actually passing a JavaScript object, which might be unsupported:\r\n\r\n```javascript\r\nperspective.wasm.worker.js:7 Uncaught Could not determine data format for {\"_nullCount\":-1,\"_type\":{\"children\":[ ...\r\n```\r\n\r\n__Option 2__\r\n\r\nI would have expected this to work as I'm passing raw data which would be compatible with cpp/wasm. I however get OOMs even if I'm passing a very small table.\r\n\r\n___\r\n\r\nIs there a way that I can pass this data without converting it to CSV or the like? I can't stream a table through via websockets.\r\n\r\n___\r\n\r\n__Similar issue(s)__\r\n\r\nThis is similar to #601, but after looking at what RandomFractals was doing for the vscode-preview, I couldn't find a workaround.\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/929/comments",
    "author": "nevi-me",
    "comments": [
      {
        "user": "nevi-me",
        "created_at": "2020-02-18T16:56:21Z",
        "body": "I found a solution after @sc1f pointed out that I need to pass my data as an `ArrayBuffer`.\r\n\r\nMy solution looks like:\r\n\r\n```typescript\r\nlet data: Uint8Array[] = [all, my, data, as, arrays, of, record, batches];\r\nlet table = Arrow.Table.from(data); // arrow seems to be flexible in what it takes\r\n\r\n// count the length of the chunked data\r\nlet length = 0;\r\ndata.forEach(d => length += d.length);\r\n// create a new array (couldn't figure out how to combine the other arrays without creating a new one\r\nlet buffer = new Uint8Array(length);\r\nlet offset = 0;\r\ndata.forEach(d => {\r\n  // append the data\r\n  buffer.set(d, offset);\r\n  offset = offset + d.length;\r\n});\r\n\r\n// finally load the data from an array buffer\r\npV.load(<any>buffer.buffer);\r\n```\r\n\r\nInterestingly, I had to cast my buffer to `<any>` because the `load()` function expects a `string` or `object[]`. I think if the typings had an `ArrayBuffer` I could have self-discovered what I needed to do.\r\n\r\n"
      },
      {
        "user": "timkpaine",
        "created_at": "2020-02-18T16:58:21Z",
        "body": "@nevi-me since the project is not in typescript, the typings arent always to be trusted :-)"
      },
      {
        "user": "sc1f",
        "created_at": "2020-02-18T19:21:46Z",
        "body": "@nevi-me you should also be able to call `update` on the viewer instance after you've loaded the first batch:\r\n\r\n```javascript\r\nlet data: Uint8Array[] = [all, my, data, as, arrays, of, record, batches];\r\nlet loaded: boolean = false;\r\n\r\ndata.forEach(d => {\r\n  if (loaded) {\r\n    pV.update(<any>d.buffer);\r\n  } else {\r\n    pV.load(<any>d.buffer);\r\n    loaded = true;\r\n  }\r\n}\r\n``` "
      }
    ]
  },
  {
    "number": 888,
    "title": "Feature request: Reference data as argument for computed columns.",
    "created_at": "2020-01-28T23:10:56Z",
    "closed_at": "2020-02-13T06:23:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/888",
    "body": "Hello,\r\n\r\nIf we can embed a custom object of map type to computation specification object and inject it to computation function, we could do a lot of cool things with it. A simple example would be:\r\n\r\n`{\r\n  column: \"StateString\",\r\n  type: \"string\",\r\n  lookup: {\r\n    id1: val1,\r\n    id2: val2\r\n  },\r\n  func: (st, lookup) => {\r\n    return lookup[st];\r\n  },\r\n  inputs: [\"State\"]\r\n}`\r\n\r\nOr for generating custom brackets based on column: \r\n\r\n`{\r\n  column: \"Bracket\",\r\n  type: \"string\",\r\n  lookup: {\r\n    lowCutoff: 10,\r\n    highCutoff: 90,\r\n  },\r\n  func: (fq, lookup) => {\r\n    if (fq < lookup[lowCutoff]) return \"low\";\r\n    else if (fq > lookup[lowCutoff] and fq < lookup[highCutoff]) return \"middle\";\r\n    return \"high\";\r\n  },\r\n  inputs: [\"Frequency\"]\r\n}`\r\n\r\nThese can easily be implemented outside of table api before ingestion but this api would be much cleaner.\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/888/comments",
    "author": "TimeWanderer",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2020-02-13T06:23:01Z",
        "body": "Thanks for the feature request!\r\n\r\nDue to the way WebAssembly integrates with Javascript, calling functions and marshaling data across the boundary between these languages for this feature was quite costly.  As of 0.4.2, Perspective no longer supports Javascript functions to `computed_columns`, as the evaluation of these has moved to C++ entirely.\r\n\r\nWithin the next few releases, this new high-performance `computed_column` implementation will support expression editing w/incremental rendering within `<perspective-viewer>` - and at this point, your example might look a bit like this:\r\n\r\n```javascript\r\nconst view = table.view({\r\n    columns: [\"Bracket\"],\r\n    computed: {\r\n        Bracket: `Frequency < 10 ? \"low\" : Frequency > 90 ? \"high\" : \"middle\"`;\r\n    }\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 774,
    "title": "How to get started on perspective!",
    "created_at": "2019-10-20T15:40:04Z",
    "closed_at": "2019-10-20T15:43:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/774",
    "body": "Hello, I am interested on contributing to perspective but am confused by the process of going about todo so. I believe that I have to sign an ICLA before I can contribute, then if I do where do I sumbit too and also how would you guys be able to tell then when I make a request that I signed an icla?",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/774/comments",
    "author": "wildaces215",
    "comments": [
      {
        "user": "timkpaine",
        "created_at": "2019-10-20T15:43:17Z",
        "body": "@wildaces215 please reach out to help@finos.org, they can put the ICLA on file."
      }
    ]
  },
  {
    "number": 645,
    "title": "Feature request: Add virtual column pairs to show or search",
    "created_at": "2019-07-04T08:36:43Z",
    "closed_at": "2019-08-14T05:08:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/645",
    "body": "now column name is transferred in table data, not in metaData.\r\nI mean table data is like:\r\n[\r\n{\"column1\":value1,\"column2\":value2 .....}\r\n{\"column1\":value1,\"column2\":value2 .....}\r\n...\r\n]\r\nor like:\r\n[\r\n[value1,value2...]\r\n[value1,value2...]\r\n...\r\n]\r\na virtual column pairs is like:\r\n{\"aaa\":\"column1\", \"bbb\":\"column2\",...}\r\nthen the table is showing:\r\n-----------------\r\naaa       | bbb\r\n-----------------\r\nvalue1  |  value2\r\nvalue1  |  value2\r\n-----------------\r\n",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/645/comments",
    "author": "akan",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2019-07-05T18:52:39Z",
        "body": "Thanks for the report!  Unfortunately I have no idea what you're asking - you can't name your columns \"aaa\" and \"bbb\"?"
      },
      {
        "user": "texodus",
        "created_at": "2019-08-14T05:08:48Z",
        "body": "If you come up with some details, feel free to open a new issue."
      }
    ]
  },
  {
    "number": 331,
    "title": "localStorage backed table",
    "created_at": "2018-12-01T08:46:32Z",
    "closed_at": "2018-12-29T23:21:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/finos/perspective/issues/331",
    "body": "Would it make sense to back table with localStorage in browser ?",
    "comments_url": "https://api.github.com/repos/finos/perspective/issues/331/comments",
    "author": "jbremmer",
    "comments": [
      {
        "user": "texodus",
        "created_at": "2018-12-29T23:21:25Z",
        "body": "I don't believe this would make sense \"by default\", but it is quite easy to do in your application if you choose:\r\n```javascript\r\nconst table = perspective.worker().table(localStorage.getItem(NAME));\r\nconst view = table.view();\r\nview.on_update(async () => localStorage.setItem(NAME, await view.to_json()));\r\n```\r\n"
      }
    ]
  }
]