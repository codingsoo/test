[
  {
    "number": 16676,
    "title": "Resizing sometimes make links unclickable",
    "created_at": "2024-02-06T22:51:50Z",
    "closed_at": "2024-04-29T17:22:14Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-TerminalControl",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/16676",
    "body": "### Windows Terminal version\n\n1.18.3181.0\n\n### Windows build number\n\n10.0.22621.3007\n\n### Other Software\n\nPowerShell 7.4.1\n\n### Steps to reproduce\n\nEnter a command that contains or will output a link. \r\nResize the terminal window.\r\nHover over the link.\n\n### Expected Behavior\n\nAn underline should appear and the link should still be clickable.\n\n### Actual Behavior\n\nThe underline may not appear and the link may not be clickable.\r\nThis behavior can be remedied easily by scrolling in the terminal or entering some input.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/16676/comments",
    "author": "applesarefum",
    "comments": [
      {
        "user": "timelmer-uw",
        "created_at": "2024-02-07T15:36:56Z",
        "body": "This also seems to be triggered by the terminal window losing focus."
      }
    ]
  },
  {
    "number": 16546,
    "title": "Complete the 8-bit interface architecture",
    "created_at": "2024-01-09T10:57:20Z",
    "closed_at": "2024-02-21T21:15:09Z",
    "labels": [
      "Issue-Feature",
      "Product-Conhost",
      "Help Wanted",
      "Area-VT",
      "In-PR"
    ],
    "url": "https://github.com/microsoft/terminal/issues/16546",
    "body": "# Description of the new feature/enhancement\r\n\r\nThis is a DEC extension which introduced the concept of 96-character graphic sets (ISO Latin-1 being the first of those), and allowed for replacing the DEC supplemental set with Latin-1. That became known as the user-preference supplemental set (UPSS), and later models allowed you to replace it with other character sets as well.\r\n\r\nWe already support much of this functionality, but what we're missing is the `DECAUPSS` sequence which handles the UPSS character set assignment, and the `DECRQUPSS` sequence, which queries the active UPSS assignment. Also a couple of sequences which are used to initialize the G-set and GL/GR mappings for ANSI conformance.\r\n\r\nI suspect this functionality isn't widely used, so I can understand if you don't want to include it, but it is a level 3 conformance requirement. It is also implemented by XTerm, so you can think of it as an improvement in our XTerm compatibility.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nIn the `TerminalOutput` class we'll need a new `wstring_view` field to track the active UPSS translation table, and then whenever someone tries to designate character set ID `<`, we'll use that value instead of `Latin1`.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/16546/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "j4james",
        "created_at": "2024-01-13T14:33:13Z",
        "body": "There's something else that I wanted to address at the same time as this. It's related to the way we switch between UTF8 and 8-bit mode with a `DOCS` sequence.\r\n\r\nAt the time I implemented the `DOCS` support, I thought it would be a good idea to make the soft reset (`DECSTR`) switch the code page back to its initial state, because the character sets are somewhat dependent on that, and `DECSTR` is expected to reset the character sets. In retrospect, though, I think that was a mistake.\r\n\r\nIf you've used a `DOCS` sequence to switch to 8-bit mode, it's likely because you're trying to run a legacy app that produces 8-bit output. But if that app happens to use a `DECSTR` sequence at some point (which isn't that unlikely), it will unexpectedly switch back to UTF8 (or some DOS code page), and the rest of the output will now be corrupted.\r\n\r\nThere's a similar problem with the `DECSC`/`DECRC` sequences. They save and restore the character set designations, so again I made them save and restore the code page too. However, the way things are implemented, this can leave the system in a disjoint state where it thinks 8-bit is enabled, but the code page is actually UTF8 (or vice versa).\r\n\r\nSo for both `DECSTR` and `DECRC`, I think it might be best if they just had no effect on the code page, and the only way to reset things after using a `DOCS` sequence is with a hard reset (`RIS`).\r\n\r\nIt's also worth mentioning that XTerm doesn't restore UTF8 with `DECSTR` or `DECRC`, so this change would improve our XTerm compatibility."
      },
      {
        "user": "lhecker",
        "created_at": "2024-01-15T15:14:53Z",
        "body": "Yeah I think this is a good idea, in particular if it gets us closer to something as established as xterm."
      }
    ]
  },
  {
    "number": 16338,
    "title": "Should references to markdown files point to the GitHub link or use relative paths?",
    "created_at": "2023-11-19T09:38:26Z",
    "closed_at": "2023-11-27T23:41:18Z",
    "labels": [
      "Help Wanted",
      "Issue-Docs",
      "Needs-Tag-Fix",
      "In-PR",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/16338",
    "body": "Currently, README.md and other files point the GitHub.com link whenever referencing another markdown file that is part of this repository. Other repositories such as the WinUI repository have chosen to use relative links which would also allow browsing the files on your local machine without a browser opening. \r\n\r\nWould this be a welcome change to the documentation or should we keep things as is? \r\n\r\nIf the former is the case, I would gladly contribute these changes.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/16338/comments",
    "author": "marcelwgn",
    "comments": [
      {
        "user": "lhecker",
        "created_at": "2023-11-21T11:51:40Z",
        "body": "Yes, I believe that change would be fine."
      },
      {
        "user": "DHowett",
        "created_at": "2023-11-21T22:50:39Z",
        "body": "Relative would be great! Thank you for asking :smile:"
      }
    ]
  },
  {
    "number": 15482,
    "title": "Can we drop the telemetry for VT sequences?",
    "created_at": "2023-05-30T15:11:18Z",
    "closed_at": "2023-06-05T16:41:34Z",
    "labels": [
      "Help Wanted",
      "Product-Meta",
      "Issue-Task",
      "Needs-Tag-Fix",
      "In-PR",
      "Priority-2"
    ],
    "url": "https://github.com/microsoft/terminal/issues/15482",
    "body": "# Description of the new feature/enhancement\r\n\r\nWe've now reached the point that if we add another VT sequence to the telemetry tracker, the `TraceLoggingWriteActivity` call will fail to compile. I'm not exactly sure what the problem is, but the initial warning/error is: `pasting '_tlg_FOR_imp' and '(' does not result in a valid preprocessing token`, after which there are another 20 or so lines of errors.\r\n\r\nIt's possible there is a way to work around that, but if we don't really need this telemetry, it would be nicer if we could just drop it altogether. And maybe that will save a bit of parsing overhead in the process.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nDrop the `TermTelemetry` class, and then remove all code that was making calls to it.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/15482/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2023-05-30T15:17:28Z",
        "body": "I'm all for it. This was more valuable when we like, hardly implemented any sequences. I don't think this is even hooked up to anything at this point. "
      },
      {
        "user": "DHowett",
        "created_at": "2023-05-30T15:28:13Z",
        "body": "YES. PLEASE. Thank you!"
      },
      {
        "user": "DHowett",
        "created_at": "2023-05-30T15:29:56Z",
        "body": "The way we implemented this telemetry is wrong, anyway - `TraceLogging` is supposed to be zero-cost if it is not enabled, so every time we put the log behind a function call we're wasting a branch and likely cache fault to determine we aren't supposed to be doing anything."
      },
      {
        "user": "bishalkar10",
        "created_at": "2023-05-30T20:57:26Z",
        "body": "I am very new to programming. I am confused how can I contribute to open source. I am proficient in html, css, javascript and learning react now.  Can I contribute somehow?"
      }
    ]
  },
  {
    "number": 15459,
    "title": "About Dialog update check **crashes** after some time when network is slow or unreachable",
    "created_at": "2023-05-27T02:14:29Z",
    "closed_at": "2023-09-20T11:35:55Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Severity-Crash",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "In-PR",
      "Severity-Blocking"
    ],
    "url": "https://github.com/microsoft/terminal/issues/15459",
    "body": "Coroutines and exceptions, man, coroutines and exceptions. Wrap it in a try, it still don't catch.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/15459/comments",
    "author": "DHowett",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2023-05-30T15:12:59Z",
        "body": "~This you? MSFT:43091127~\n\nWAIT NO, that's 12% of our **1.17** crashes, and the about refactor isn't in 1.17. "
      }
    ]
  },
  {
    "number": 15109,
    "title": "Add support for horizontal scrolling sequences",
    "created_at": "2023-04-04T20:29:28Z",
    "closed_at": "2023-05-25T20:36:58Z",
    "labels": [
      "Product-Conhost",
      "Help Wanted",
      "Area-VT",
      "Issue-Task",
      "In-PR"
    ],
    "url": "https://github.com/microsoft/terminal/issues/15109",
    "body": "# Description of the new feature/enhancement\r\n\r\nThere are a number of VT sequences that were introduced by the VT420, which provide a way for applications to scroll the screen horizontally.\r\n\r\nThere's `DECFI` (forward index) and `DECBI` (backward index), which are the horizontal equivalents of the `IND` (index) and `RI` (reverse index) operations. They move the cursor position forward or backwards by one column, but once you reach the edge of the screen (or margin area), the buffer is forced to scroll.\r\n\r\nThere's also `DECIC` (insert column) and `DECDC` (delete column), which are the horizontal equivalents of the `IL` (insert line) and `DL` (delete line) operations. As the names suggest, they insert or delete a column at the active cursor position, forcing the area to the right of that to scroll forward or backward.\r\n\r\nMy main motivation for adding them is because they're useful for optimizing side-scrolling games. But the other reason is that they're necessary to meet the requirements of the horizontal scrolling extension (along with the horizontal margin operations from PR #15084).\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nOnce PR #15084 is done (assuming that's accepted), the implementation for these ops should be fairly trivial. It's mostly a matter of calling the existing `_ScrollRectHorizontally` method with the appropriate coordinates.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/15109/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2023-04-17T20:45:00Z",
        "body": "Yep sounds good to us!"
      }
    ]
  },
  {
    "number": 14810,
    "title": "The Explorer context menu should be run as admin when holding `ctrl`",
    "created_at": "2023-02-09T00:13:22Z",
    "closed_at": "2023-04-04T16:24:36Z",
    "labels": [
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "In-PR",
      "Area-ShellExtension"
    ],
    "url": "https://github.com/microsoft/terminal/issues/14810",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\nWhen Windows Terminal (WT) is pinned to the taskbar or the start menu, and I need to run it quickly as administrator, I just have to press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>left click</kbd> over its icon, this way is faster than going to the WT icon in the taskbar (or the start menu icon), then right click, hover over \"Terminal\", then another right click and finally select \"Run as administrator\".\r\n\r\nBut this keyboard shortcut doesn't work for the WT item in the context menu of Windows Explorer. When I try the combination <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>left click</kbd>, it only opens a normal (not elevated) WT session.\r\n\r\nSometimes I need to run some script as admin contained in some folder, and for that I have to open WT as admin. As Ctrl+Shift+Left click doesn't work with \"Open in Terminal\" from the context menu of Windows Explorer, I have to use the longer path:\r\n-Win+X (or the long path example I mentioned when WT is pinned to the taskbar)\r\n-Click on Terminal (Admin)\r\n-And when WT is open as admin I have to type `cd Folder_path_to_work_with `\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n\r\nI would like that WT, in the context menu of Windows Explorer, can be executed as administrator just by using the shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>left click</kbd>, this way there would be no need to add another entry in the context menu such as `Open in Terminal as admin` to run WT as administrator.\r\n\r\nThis way, it would be faster to open WT as admin. When a user needs to open a folder with WT as admin, he just has to right click on the folder (or on an empty field inside the folder), then use the shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>left click</kbd> in \"Open in Terminal\" from the context menu to make WT open as admin, and when WT is open it is ready with the path of the folder to work with. \r\n\r\nBut if it is not possible that Ctrl+Shift+left click to work for WT to open as admin, then it is necessary for WT to add another entry in the context menu so that it can be run as admin.\r\n\r\nWhat do you think about it?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/14810/comments",
    "author": "Dhyfer1",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2023-02-10T11:33:22Z",
        "body": "At first I thought I'd just close this as a dupe of #9903, but you may have a point about the <kbd>ctrl</kbd>+clicking on the menu entry. That could probably be done _trivially_. \r\n\r\nIt's kinda a hidden magic feature, but I'm not totally opposed to it. I wonder idly if the old Command Prompt / PowerShell shortcuts had that secretly baked in.\r\n\r\n> **Note**\r\n> ## Walkthrough\r\n\r\nI'd look at `OpenTerminalHere::Invoke`, and in there, I'd check to see if <kbd>ctrl</kbd> is pressed when the entry is invoked. If it is, then I'd either start up `elevate-shim` in the same way that `TerminalPage::_maybeElevate` does, or I'd just skip a step and go straight to doing exactly what the body of `elevate-shim`'s `main` does. "
      },
      {
        "user": "Dhyfer1",
        "created_at": "2023-02-11T03:25:53Z",
        "body": "Hi. Thank you for your interest.\r\n\r\nThis is not a duplicate, but what the author of issue #9903 and I agree is that Windows Terminal can be easily run as admin. It would be very useful if WT could be run as admin by just using the shortcut I mentioned, which works very well when WT is pinned to the taskbar and/or the start menu. \r\n\r\n> I wonder idly if the old Command Prompt / PowerShell shortcuts had that secretly baked in.\r\n\r\nJust to test, first I uninstalled WT, then I pinned the old Command Prompt to both as the taskbar as the start menu, then I used the keyboard shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>left click</kbd>, and surprise! Command Prompt also opens as admin.😀\r\n\r\nI hope you can solve this issue. Because for me it would be very useful to be able to run WT as admin with just use a shortcut over its entry in the context menu."
      },
      {
        "user": "JVimes",
        "created_at": "2023-02-17T17:37:37Z",
        "body": "I think Ctrl+Shift+Click is an OS feature. I use it with various apps. Would be nice to have similar behavior in Explorer menu. Ctrl alone would be easier."
      },
      {
        "user": "JVimes",
        "created_at": "2023-02-17T17:38:00Z",
        "body": "Can non-elevated WT detect Ctrl and relaunch elevated?"
      }
    ]
  },
  {
    "number": 14491,
    "title": "Update the Device Attributes report",
    "created_at": "2022-12-04T17:02:03Z",
    "closed_at": "2023-04-26T16:56:24Z",
    "labels": [
      "Product-Conhost",
      "Help Wanted",
      "Area-VT",
      "Issue-Task",
      "Needs-Tag-Fix",
      "In-PR"
    ],
    "url": "https://github.com/microsoft/terminal/issues/14491",
    "body": "# Description of the new feature/enhancement\r\n\r\nUp to now, we've been identifying as a VT100, since we haven't fully met the conformance requirements for any of the higher level devices. But with the recent support that's been added for several VT extensions, I think it's time to consider an updated `DA` response.\r\n\r\nThe structure of a `DA` report is as follows: the first parameter value indicates the conformance level with a number in the range 61 to 69 (representing levels 1 to 9); subsequent parameters indicate the supported feature extensions. The early VT terminals didn't follow this standard, but their initial `DA` parameter would have always been below 60.\r\n\r\nWe still don't meet the requirements for level 2, so the first parameter in our `DA` response will have to be 61. But we do now support a number of feature extensions, which we can indicate with additional parameter values. Some of the more useful ones include:\r\n\r\n7 = Soft Fonts (since PR #13965)\r\n28 = Rectangular Editing (since PR #14285)\r\n32 = Text Macros (since PR #14402, if accepted)\r\n\r\nApplications that wish to take advantage of these features would be able to do so automatically if they could tell from the `DA` report that the terminal supported the necessary extensions.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nUpdating the `DA` report seems like it ought to be a trivial change. However, the complication for us is this it's handled on the conhost side, but it needs to take into account the capabilities of the conpty client. For example, conhost supports _Soft Fonts_, but they won't work over conpty unless the conpty client also supports them (and for Terminal that's dependent on the configured renderer).\r\n\r\nMy proposed solution for this is that we fire off a `DA` request to the conpty client on startup (similar to the way we sometimes send a `CPR` request on startup). We then save the relevant information from the client's response (for now just the _Soft Font_ support), and use that to determine what features we can include in our `DA` response.\r\n\r\nDoes that seem like a reasonable approach to take?",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/14491/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2022-12-12T15:19:52Z",
        "body": "Seems sensible to me, though, we might want to be careful to be sure that the client can reply. Maybe we should gate it on `--inheritCursor`? er. Maybe not. There was some WSL issue IIRC that precipitated the need for `--inheritCursor`, rather than passing it all the time. Like, some scenarios where there was nothing actually processing the input, so if ConPTY just waits on startup for a reply, conpty might just HANG if no one ever replies. We might need some sort of timeout on startup to have conpty bail if conpty fires off a `DA` and doesn't get a response. \r\n\r\nMaybe we could just not block startup on this. Fire off the `DA`, and just keep going. If we get a reply, then _great_, if not, then just keep 'er movin."
      },
      {
        "user": "j4james",
        "created_at": "2022-12-12T21:24:36Z",
        "body": "> Maybe we should gate it on `--inheritCursor`? er. Maybe not.\r\n\r\nYeah, `--inheritCursor` isn't an option since it doesn't seem to get used most of the time, and this has to be called every time if we want it to work correctly every time.\r\n\r\n> We might need some sort of timeout on startup to have conpty bail if conpty fires off a `DA` and doesn't get a response.\r\n\r\nThat kind of sucks, because if that really is necessary, we're again left with a solution that isn't going to work some of the time. And any apps that rely on the `DA` information being correct are going to then have inconsistent behavior - sometimes they'll work and sometimes they won't.\r\n\r\nI'd love to know under what conditions this is expected to fail, and whether that's fixable. Like could we maybe delay sending the `DA` request until the client has reached a certain steady state?"
      }
    ]
  },
  {
    "number": 13255,
    "title": "Wild behavior from ANSI esq in batch variables",
    "created_at": "2022-06-09T02:28:25Z",
    "closed_at": "2022-06-10T20:37:38Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Priority-2",
      "Area-Commandline"
    ],
    "url": "https://github.com/microsoft/terminal/issues/13255",
    "body": "### Windows Terminal version\r\n\r\n1.12.10982.0\r\n\r\n### Windows build number\r\n\r\n10.0.19044.1706\r\n\r\n### Other Software\r\n\r\njava\r\n\r\n### Steps to reproduce\r\n\r\n`wt new-tab --focus --title \"Test App 1.0.0\" -d \"C:\\Users\\jredfox\\Documents\\dev\\OpenTerminal\" -p \"Command Prompt\" cmd /c call \"C:\\Users\\jredfox\\AppData\\Roaming\\OpenTerminal\\scripts\\boot\\boot.bat\" \"\u001b[48;2;0;255;255m\u001b[38;2;255;255;255m\" \"Test App 1.0.0\" \",C:\\Program Files\\Java\\jre1.8.0_333/bin/java, -Dot.l -cp ,C:\\Users\\jredfox\\Documents\\dev\\OpenTerminal\\bin, jml.ot.OTMain\" \"true\"`\r\n\r\nthe batch file\r\n```batch\r\n@ECHO OFF\r\nIF NOT \"%~1%\" == \"\" (\r\n   echo \"%~1%\"\r\n   cls ::hotfix for Windows Terminal\r\n)\r\ntitle %~2%\r\nset boot=%~3\r\nset boot=%boot:,=^\"% ::RE-MAP the boot command to double quotes\r\ncall %boot%\r\nIF \"%~4%\" == \"true\" (\r\nset /p DUMMY=Press ENTER to continue...\r\n)\r\nexit 0 ::Work around from a command prompt bug\r\n```\r\n\r\nIt opens up like 20 tabs instead of one. with the ansi escape sequence in the batch variable string. \r\n\r\n\r\n### Expected Behavior\r\n\r\nit opens up the my java program in wt with the colored output. \r\n\r\n### Actual Behavior\r\n\r\ninstead it opens up 20 tabs. it's having some wild behavior. switching to conhost.exe and cmd fixes the issue. I am going to work around this by changing the ansi escape to another character but this is just very silly",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/13255/comments",
    "author": "jredfox",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2022-06-09T03:00:25Z",
        "body": "This may be because wt treats `;` as a subcommand separator. It's intended for use in composite commands, such as `wt new-tab ; split-tab`, but it can also be used to launch a number of programs side by side (`wt cmd ; pwsh ; wsl`).\n\nYour best bet would be to escape them, or use `--` as a WT command terminator (which may not work, honestly, I don't remember if it applies before or after `;` splitting.)"
      },
      {
        "user": "jredfox",
        "created_at": "2022-06-09T03:01:27Z",
        "body": "but it's inside of the scripts `\"\"` is this not a bug?"
      },
      {
        "user": "DHowett",
        "created_at": "2022-06-09T03:01:53Z",
        "body": "We should probably leave things in quotes alone. I suspect that we do, *if* the quote is sent to us. Quoted string parsing is one of the inconsistencies in shell command line handling across all of Windows, so I bet you'll get different results depending on what shell you call wt from."
      },
      {
        "user": "jredfox",
        "created_at": "2022-06-09T03:03:52Z",
        "body": "@DHowett like this it has the same result `wt new-tab --focus --title \"Test App 1.0.0\" -d \"C:\\Users\\jredfox\\Documents\\dev\\OpenTerminal\" -p \"Command Prompt\" -- cmd /c call \"C:\\Users\\jredfox\\AppData\\Roaming\\OpenTerminal\\scripts\\boot\\boot.bat\" \"\u001b[48;2;0;255;255m\u001b[38;2;255;255;255m\" \"Test App 1.0.0\" \",C:\\Program Files\\Java\\jre1.8.0_333/bin/java, -Dot.l -cp ,C:\\Users\\jredfox\\Documents\\dev\\OpenTerminal\\bin, jml.ot.OTMain\" \"true\" \b\r\n`\r\n\r\nI am calling it from a program with each space being a separate param except the java command if that matters"
      },
      {
        "user": "jredfox",
        "created_at": "2022-06-09T04:36:25Z",
        "body": "Also replacing the `;` to `,` resulted in windows terminal instantly closing upon open. changing the `;` to a non special character fixes it. nothing like this happens with batch files I think the issue is caused by not only `�` but also `;` and it's ignoring the fact that it's inside a parameter"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-06-09T11:35:22Z",
        "body": "IIRC we had to do the subcommand splitting on `;` before the `--` parsing. The `--` is handled by CLI11, but we hand each \"subcommand\" to CLI11 separately. This is definitely a tricky edge case. Case in point\r\n\r\n```\r\nwt nt -- foo.exe \"bar;baz\" \"nt;nt ; nt\"\r\n```\r\n\r\nShould that get split into subcommands? Probably, right? I know there are folks just doing `wt nt;nt;sp` in the wild, so we can't rely on spaces by the `;`.\r\n\r\nI'm not sure this could be fixed without some sort of slightly breaking change, but if anyone's got a good idea I'm open to it."
      },
      {
        "user": "jredfox",
        "created_at": "2022-06-09T16:35:31Z",
        "body": "Linux has -e then a string command. Since you have the ability for multiple commands what about only slices it into new commands if the meta chars are outside of the quotes to begin with. It would work regardless of a single parameters or multiple called by a program. This includes but not limited to :;,\n"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-06-10T20:37:38Z",
        "body": "#13264 is a little closer to the target here, so we're gonna use that one here. Thanks!\r\n\r\n/dup #13264"
      },
      {
        "user": "ghost",
        "created_at": "2022-06-10T20:37:42Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 12473,
    "title": "Dragging a non-focused tab should make it the active tab",
    "created_at": "2022-02-11T19:44:39Z",
    "closed_at": "2023-02-07T23:45:37Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "In-PR",
      "Priority-2"
    ],
    "url": "https://github.com/microsoft/terminal/issues/12473",
    "body": "### Windows Terminal version\n\n_No response_\n\n### Windows build number\n\n_No response_\n\n### Other Software\n\n_No response_\n\n### Steps to reproduce\n\n1. Create several terminal tabs\r\n2. Focus on one tab to make it the current terminal view\r\n3. Drag one of the unfocused tabs to change its order among the other tabs\r\n4. The focus remains on the previous tab (step 2)\n\n### Expected Behavior\n\nClicking on a tab to reposition it should also cause it to become the active tab.  This is how Edge works, and so this breaks a popular consistency expectation in the UI. Clicking a tab (on mousedown or dragstart) should also make that tab the active terminal.\r\n\r\nA potentially dangerous result from this is assuming the moved tab has also made it the currently active terminal view when in fact it isn't. Typing a destructive command into that terminal may be applied to the wrong view.  In the case of several ssh sessions, possibly with many different theming colors that could make it non-obvious which tab is active, this could impact the wrong server.\r\n\r\n If there is a configurable setting for this, I propose the default behavior be changed to be safer. (I'd also like to know what that setting is)\n\n### Actual Behavior\n\nClicking and dragging a tab to reposition it moves it in the tab bar, but leaves the active terminal view where it was rather than making the moved tab the current terminal view.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/12473/comments",
    "author": "morganwdavis",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2022-02-14T12:05:22Z",
        "body": "Yea, it probably should!"
      },
      {
        "user": "marcelwgn",
        "created_at": "2023-01-28T12:43:16Z",
        "body": "I would like to work on this."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2023-01-29T12:18:01Z",
        "body": "Go for it!"
      }
    ]
  },
  {
    "number": 12378,
    "title": "Empty path to OSC 9;9; crashes Terminal window",
    "created_at": "2022-02-04T19:47:41Z",
    "closed_at": "2023-04-27T18:16:55Z",
    "labels": [
      "Help Wanted",
      "Area-VT",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Priority-2"
    ],
    "url": "https://github.com/microsoft/terminal/issues/12378",
    "body": "### Windows Terminal version\r\n\r\n1.13.10336.0\r\n\r\n### Windows build number\r\n\r\n10.0.19042.1466\r\n\r\n### Other Software\r\n\r\n_No response_\r\n\r\n### Steps to reproduce\r\n\r\nIn WSL bash, `echo $'\\e]9;9;\\e\\\\'`\r\n\r\n### Expected Behavior\r\n\r\nTerminal should keep running. I don't know if the devs think an empty path should be treated as a no-op or like a well-formed path to a non-existent directory. For example, `\\e]9;9;/foo\\e\\\\\\` sets the directory to /.\r\n\r\n### Actual Behavior\r\n\r\nTerminal window hangs immediately (tested by running  `date` in a tight loop in the background) and crashes a second later.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/12378/comments",
    "author": "kstauffer",
    "comments": [
      {
        "user": "j4james",
        "created_at": "2022-02-06T13:58:32Z",
        "body": "This was something I was planning to look at as a followup PR #12247. In the same way that `AdaptDispatch` and `ConGetSet` are designed to throw exceptions for error handling, the equivalent Terminal classes `TerminalDispatch` and `ITerminalApi` should be doing the same thing. That way exceptions like this would be caught in the `StateMachine` and recovered gracefully.\r\n\r\nI had initially planned to leave this till I was further along refactoring the conhost side of things, but maybe it's a good idea to get it done sooner rather than later if it'll save users from having a crashed terminal. Any objections to that?"
      },
      {
        "user": "j4james",
        "created_at": "2022-02-06T14:02:08Z",
        "body": "I should add that this isn't necessarily a fix for the `OSC 9;9` handling - I'm not sure what the correct behaviour is for that. I just want to make sure the terminal isn't needlessly crashing in situations like this."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-02-07T13:18:54Z",
        "body": "I agree. At the very least, we should fix this crash now, so we can service the fix to the in-market builds. "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-02-10T22:14:01Z",
        "body": "Hey @j4james should this be closed by #12432? Since the crashing doesn't happen anymore? I think right now we just ignore an empty path, which sure seems reasonable to me"
      },
      {
        "user": "j4james",
        "created_at": "2022-02-10T22:47:23Z",
        "body": "I'd prefer to keep it open. I'm not actually sure what the correct behaviour is meant to be - I haven't had a chance to check that in ConEmu. But even if ignoring the path is the right thing to do, I'd expect that to be handled as a deliberate condition in the path parser - not just something that happens coincidentally because of a buffer overflow."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-02-10T22:54:04Z",
        "body": "Fine by me ☺️ I _am_ gonna move it out of the 1.14 milestone though, just for the sake of work tracking. The bug that needed immediate fixing is gone. We can double check the real behavior later. Thanks again!"
      },
      {
        "user": "j4james",
        "created_at": "2022-02-10T22:58:55Z",
        "body": "> I am gonna move it out of the 1.14 milestone though, just for the sake of work tracking.\r\n\r\nYeah, that makes perfect sense. I've just checked ConEmu now and it looks like a blank path is simply ignored, i.e. it retains the last valid path that was set. So what we have is technically correct - it's just a code health issue now."
      }
    ]
  },
  {
    "number": 11875,
    "title": "Settings tab scroll is lost after every save",
    "created_at": "2021-12-03T12:02:53Z",
    "closed_at": "2023-11-27T19:40:48Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "In-PR",
      "Priority-3",
      "good first issue",
      "Area-SettingsUI"
    ],
    "url": "https://github.com/microsoft/terminal/issues/11875",
    "body": "### Windows Terminal version\n\n1.11.2921.0\n\n### Windows build number\n\n10.0.22000.0\n\n### Other Software\n\n_No response_\n\n### Steps to reproduce\n\n1) Open Settings tab (Ctrl + ,)\r\n2) Go to some profile from sidebar \r\n3) Vertically scroll to some position\r\n4) Hit 'Save' button\n\n### Expected Behavior\n\nJust saving with no extra effect\n\n### Actual Behavior\n\nThe entire page flashes and the page scroll bar is reset at the top (It seems that a full refresh of page is happening).\r\nIt's more annoying if you want to change something not at the top of page (like background settings) and want to see the actual result and refine the settings many times.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/11875/comments",
    "author": "inlineHamed",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2021-12-06T14:22:38Z",
        "body": "This might not be too hard to fix. I believe that a ScrollViewer has a method for getting the current scroll position, so we _should_ be able to persist that across saves."
      },
      {
        "user": "Jcabza008",
        "created_at": "2022-01-31T03:07:15Z",
        "body": "Hi, I wanted to start contributing to open source project and I found this one to be of great interest to me. I took a shot at this issue and submitted a PR #12296. I'd appreciate it if I could get some feedback on this. Thank you."
      },
      {
        "user": "yashwantpradhan",
        "created_at": "2023-10-19T13:41:01Z",
        "body": "I want to work on this issue. Please assign me this issue."
      },
      {
        "user": "radu-cernatescu",
        "created_at": "2023-11-01T17:55:47Z",
        "body": "Hello, I will take over this issue if no one is working on it. Please assign to me, thanks!"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2023-11-01T21:55:32Z",
        "body": "Y'all can just go for it - we don't _really_ utilize the \"assigned to\" field. There's very rarely multiple people who are trying to work on the same issue at the same time."
      }
    ]
  },
  {
    "number": 11185,
    "title": "No keyboard input while the `Get-Credential` dialog is open",
    "created_at": "2021-09-09T01:49:15Z",
    "closed_at": "2022-05-30T16:01:11Z",
    "labels": [
      "Help Wanted",
      "Needs-Repro",
      "Product-Conpty",
      "Area-Input",
      "Issue-Bug",
      "Needs-Author-Feedback",
      "Needs-Triage",
      "No-Recent-Activity",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/11185",
    "body": "I read issue #4448 and checked that the `Touch Keyboard and Handwriting Panel Service` is running correctly (restarts, etc.)\r\n\r\nHowever I still have this issue: if I'm running a Terminal (PowerShell) and I start a second one with this command:\r\n```\r\nStart-Process -FilePath \"powershell\" -Credential $(Get-Credential -Message 'Domain admin password required.' -UserName <some valid username>) -ArgumentList '-NoExit', '-Command', \"cd $(Get-Location)\"\r\n```\r\nA new PowerShell window opens, but the behaviour of it is very odd. Keyboard input doesn't seem to arrive at it, but when I type something (for example `whoami` to check it worked), it does show up *after* I switch focus away from the new window. The same behaviour applies to the Terminal Windows I started it from. It now only shows entered input after switching focus away from it.\r\n\r\nIf I close either window, the other will start working normally again immediately. I do not have this issue when starting a separate PowerShell window from the Start menu, regardless of whether I start it as myself, as local admin or as the same other user.\r\n\r\nNote that the user account I'm starting the new PowerShell as is a domain admin account, while the account running the original Terminal window is not. Not sure if it matters, I don't have a spare non-domain admin account on hand to try if the same problem occurs when using a non-admin account.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/11185/comments",
    "author": "jaapvandervelde",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2021-09-09T21:10:56Z",
        "body": "Hmmmmm. There's something weird about the way the credential manager window is interacting with the console window here. It's like, blocking the Console window from being focused, like it's a `MessageBox` or something. I wonder if it does something _extra_ weird when the console is a conpty without a real window. "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-05-18T20:40:37Z",
        "body": "Okay I think this is fixed as of 33b8a20. Or at least, I can't seem to repro it anymore. Admittedly, I can't exactly repro this on 1.12 either. I don't think I ever see the \"new\" powershell window open. The credential dialog does open, but there's no other console window around failing to receive input.  "
      },
      {
        "user": "ghost",
        "created_at": "2022-05-27T13:01:43Z",
        "body": "This issue has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **4 days**. It will be closed if no further activity occurs **within 3 days of this comment**."
      }
    ]
  },
  {
    "number": 10730,
    "title": "Launching in Focus mode doesn't start at the correct size",
    "created_at": "2021-07-20T16:11:37Z",
    "closed_at": "2024-04-25T12:54:48Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "In-PR",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/10730",
    "body": "Is there any plan to make focus mode respect the number of rows and padding settings, especially at startup?",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/10730/comments",
    "author": "vefatica",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2021-07-20T16:18:56Z",
        "body": "Given that nobody's ever told us that it didn't do so, there was no plan to. After all, we can't plan for something we don't know needs to be done."
      },
      {
        "user": "vefatica",
        "created_at": "2021-07-20T16:25:38Z",
        "body": "OK, it doesn't.  My preference would be that focus mode (startup too) remove the tab portion of the window, making it smaller but respecting the rows and paddings settings (as opposed to converting the tab portion to output)."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2024-04-16T14:04:58Z",
        "body": "This may also be related to the fact that FOMO starts at the wrong size after a session restore. Fixing this might be the easiest way of fixing that, honestly. "
      }
    ]
  },
  {
    "number": 10163,
    "title": "Saving SETTINGS.JSON starts 11 processes",
    "created_at": "2021-05-24T16:07:51Z",
    "closed_at": "2021-05-24T16:47:40Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-Settings",
      "Needs-Triage",
      "Product-Terminal",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/10163",
    "body": "### Windows Terminal version (or Windows build number)\n\nMicrosoft Windows 10 Pro for Workstations 10.0.19042.985 (2009, 20H2) WindowsTerminal: 1.8.1092.0\n\n### Other Software\n\n_No response_\n\n### Steps to reproduce\n\nWith none of the WSL-related services running, open SETTINGS.JSON vie the settings UI and save it, noting the time.\r\n\r\nObserve the processes that were started at that time.\n\n### Expected Behavior\n\nSaving SETTINGS.JSON should not cause new processes to start.\n\n### Actual Behavior\n\nI saved the file at 11:53:21 and got\r\n\r\n```\r\nStart  Time            Pid       CPU(s)     WS(M)  Name\r\n--------------------------------------------------------------------------------\r\n05/24  11:53:21.392  10204        0.156      12.4  LxssManager             LxssManager\r\n05/24  11:53:21.439   6980        0.016      10.9  vmcompute               Hyper-V Host Compute Service\r\n05/24  11:53:21.587   5088        0.078      12.9  hns                     Host Network Service\r\n05/24  11:53:21.604   5204        0.078       7.5  nvagent                 Network Virtualization Service\r\n05/24  11:53:21.622   7548        0.031      18.8  SharedAccess            Internet Connection Sharing (ICS)\r\n05/24  11:53:21.666   9552        0.125       6.7  NetSetupSvc             NetSetupSvc\r\n05/24  11:53:21.457   9376        0.125      19.3  vmwp.exe\r\n05/24  11:53:21.478   3556        0.531     418.0  vmmem\r\n05/24  11:53:22.215  10188        0.016       4.8  wslhost.exe\r\n05/24  11:53:22.222   8164        0.000      10.9  conhost.exe\r\n05/24  11:53:22.235   3612        0.016       8.8  dllhost.exe\r\n```\r\n\r\nThat does not happen when I start WindowsTerminal, possibly because I have \"Windows.Terminal.Wsl\" among \"disabledProfileSources\".  My guess is that it need not happen when the settings are reloaded.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/10163/comments",
    "author": "vefatica",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2021-05-24T16:24:39Z",
        "body": "Huh. Weird that we'd boot WSL even if it is disabled. We probably shouldn't do that."
      },
      {
        "user": "vefatica",
        "created_at": "2021-05-24T16:46:32Z",
        "body": "Hmmm!  Apparently it's happening when the startingDirectory path in my user-defined Ubuntu profile is validated.  It doesn't happen if I comment out the startingDirectory.  Does it have to do that?\r\n\r\n```\r\n\"startingDirectory\": \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\vefatica\"\r\n```\r\n"
      },
      {
        "user": "DHowett",
        "created_at": "2021-05-24T16:47:25Z",
        "body": "Fortunately, I think we just removed the code that does that."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-05-24T16:47:40Z",
        "body": "Oh good catch! Turns out, _it won't anymore_! See #10045. We're gonna stop doing that in 1.9."
      },
      {
        "user": "vefatica",
        "created_at": "2021-05-24T16:49:42Z",
        "body": "That sounds good."
      }
    ]
  },
  {
    "number": 9765,
    "title": "Community Guidance Requests no longer exist but still in contributing.md documentation",
    "created_at": "2021-04-09T23:56:47Z",
    "closed_at": "2021-04-19T16:20:43Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Docs",
      "Product-Meta",
      "Area-CodeHealth",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/9765",
    "body": "<!-- Briefly describe which document needs to be corrected and why. -->\r\nTerminal Contributor's Guide states we should file a Community Guidance Request if we don't know how to do something. I think this might need to be updated, because Community Guidance Requests no longer exist as a type of Issue.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/9765/comments",
    "author": "hessedoneen",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2021-04-12T09:52:05Z",
        "body": "Huh, I'm not sure that type of issue _ever_ existed 😆 We should definitely just yank that from `CONTRIBUTING.md`."
      }
    ]
  },
  {
    "number": 9243,
    "title": "Windows Magnifier doesn't follow text cursor",
    "created_at": "2021-02-22T09:21:42Z",
    "closed_at": "2022-01-31T17:58:18Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Bug",
      "Area-TerminalControl",
      "Area-Accessibility",
      "Product-Terminal",
      "Priority-1"
    ],
    "url": "https://github.com/microsoft/terminal/issues/9243",
    "body": "The Windows Magnifier application does not follow the text cursor in the Windows Terminal when the text cursor follow option is enabled in Windows Magnifier. This also affects the ZoomText third party screen magnification software.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/9243/comments",
    "author": "errestan",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2021-02-23T01:47:35Z",
        "body": "I could have sworn we had another copy of this in our issue tracker. Thanks for the report!"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-01-31T17:58:18Z",
        "body": "I suspect this was also fixed by #12210, which should be in 1.13"
      }
    ]
  },
  {
    "number": 8106,
    "title": "Feature Request: show an indicator if there's a bell in the tab",
    "created_at": "2020-10-30T03:33:34Z",
    "closed_at": "2021-01-22T23:48:21Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Area-UserInterface",
      "Product-Terminal",
      "Issue-Task",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/8106",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\nThis is a pretty straight-forward one. I know iTerm2 has this. As a ex-iOS developer I found it very useful to not only hear the bell but also know *which tab* is actually triggering the bell.\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nI think we need a spec for this, to display some kind of accessories in the tab, besides icon and title.\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/8106/comments",
    "author": "skyline75489",
    "comments": [
      {
        "user": "skyline75489",
        "created_at": "2020-10-30T09:54:08Z",
        "body": "OK now that I think of it, the title is kinda bad. @zadjii-msft Please help me with my English and change the title to something more explanatory."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-30T10:12:47Z",
        "body": "> OK now that I think of it, the title is kinda bad. @zadjii-msft Please help me with my English and change the title to something more explanatory.\r\n\r\n\r\nOh I knew exactly what you meant by this, don't sweat 😆 \r\n\r\nWe've had mockups of this dating back to some of the earliest Terminal mockups actually. I'm surprised we didn't already have an issue for it, but that makes sense considering we only just landed the bell in #7679. \r\n\r\nI'm _mildly_ worried that we're going to be stuffing a lot of info into the tab pretty soon - the \"zoom\" indicator, the progress ring, the bell/mute indicator, but I'm not _that_ worried. I think the number of people who are doing all simultaneously will be fairly low."
      },
      {
        "user": "mdtauk",
        "created_at": "2020-10-30T13:25:16Z",
        "body": "> > OK now that I think of it, the title is kinda bad. @zadjii-msft Please help me with my English and change the title to something more explanatory.\r\n> \r\n> Oh I knew exactly what you meant by this, don't sweat 😆\r\n> \r\n> We've had mockups of this dating back to some of the earliest Terminal mockups actually. I'm surprised we didn't already have an issue for it, but that makes sense considering we only just landed the bell in #7679.\r\n> \r\n> I'm _mildly_ worried that we're going to be stuffing a lot of info into the tab pretty soon - the \"zoom\" indicator, the progress ring, the bell/mute indicator, but I'm not _that_ worried. I think the number of people who are doing all simultaneously will be fairly low.\r\n\r\nIf you decide to implement the status bar, things like Zoom indication could go there.  I see little reason you need to know a tab's console has been zoomed, unless it is the current active tab."
      },
      {
        "user": "j4james",
        "created_at": "2020-10-31T13:03:29Z",
        "body": "This is closely related to #1608, if not a duplicate."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-11-02T11:11:21Z",
        "body": "I agree that this is closely related, but I'm gonna hold off calling this a dupe. I think I'd rather have this issue specifically track displaying the bell icon in the _tab_, and the other issue for displaying the alert in the taskbar. They're pretty similar, but I could see people wanting one or the other (or neither, or both), so we should probably have them all configurable independently.\r\n\r\nI'll add both of them over to #6700, because they're sorta related. They're all about displaying some state to the user either with the tab or the taskbar. "
      },
      {
        "user": "mpela81",
        "created_at": "2020-11-16T15:48:24Z",
        "body": "How long should a bell indicator stay on the tab btw?"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-11-16T16:24:58Z",
        "body": "Maybe like 1 second, then a 1 second fade? I suppose it should be just about the same as if a Edgium tab played a bell, for consistency."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-11-16T16:28:25Z",
        "body": "Also, @mpela81, if you're interested in working on this, you might want to hold off until #8227 is merged. That might make adding the XAML element to the header a bit easier 😉 "
      },
      {
        "user": "sarim",
        "created_at": "2021-02-02T18:50:55Z",
        "body": "While the audible bell is very annoying, the visual bell is kinda hard to notice. Maybe instead of plan bell icon, 🔔 can be used? Also bell icon only prepends to tab title, maybe It can be appended to taskbar title too. Or superimpose a little bell icon to taskbar's terminal icon...."
      }
    ]
  },
  {
    "number": 8075,
    "title": "Set tab color in command line ",
    "created_at": "2020-10-28T15:05:43Z",
    "closed_at": "2020-11-20T04:36:19Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Area-Commandline",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/8075",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\nWhen opening tabs/panes with the `wt` command, It would be great to be able to set the **color** of a tab, in a similar way as we can currently set the `title` with `wt --title something`.\r\n\r\nI use the `wt` to command to open my terminal \"workspace\", and I use colours to easily distinguish the different tabs, so allowing this to be set by command line instead of manually each time the tabs are opened would be even nicer.\r\n\r\nThis could be as simple as something like the following, allow a hex value to be set:\r\n```bash\r\nwt --color \"#111111\" ; new-tab --color \"#FF0000\"\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/8075/comments",
    "author": "alisd23",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-28T15:12:57Z",
        "body": "This isn't a bad idea. We've already got `tabColor` in the profile, might as well be able to override that from the commandline. We've already got the precedent with `--title` for `tabTitle`. Thanks for the request!\r\n\r\nI'd probably make this `--tabColor`, for parity with the setting in the profile, and I probably wouldn't give it a short version. I think this should probably be an acceptable arg for `split-pane`, and just update the `NewTerminalArgs` to also accept the optional color."
      },
      {
        "user": "Don-Vito",
        "created_at": "2020-10-28T19:12:44Z",
        "body": "@alisd23 - do you plan to implement this? If not I can work on this - sounds quite useful and straightforward."
      },
      {
        "user": "alisd23",
        "created_at": "2020-10-28T21:38:11Z",
        "body": "> @alisd23 - do you plan to implement this? If not I can work on this - sounds quite useful and straightforward.\n\nHey, I don't really have enough time at the moment so I won't be able to any time soon, so please go ahead - that'd be great!"
      },
      {
        "user": "Don-Vito",
        "created_at": "2020-10-30T00:27:09Z",
        "body": "@zadjii-msft - I added an optional tab color to the NewTerminalArgs, and used it to override terminal settings.... and it was a very bad decision on my side 😆. I mean everything worked but then during the testing I noticed that the color disappears after splitting the pane, or reloading the settings. This was a very hard way (aka at least an hour of my life) to learn that there is a runtime tab color :smile:. So I switched to setting it. \r\n\r\n@zadjii-msft - Can you explain why we would want to use it for split-pane? I can understand why we might want it for duplicate tab though."
      }
    ]
  },
  {
    "number": 7934,
    "title": "Scoop install ",
    "created_at": "2020-10-15T16:50:55Z",
    "closed_at": "2020-10-19T20:08:38Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Docs",
      "Issue-Bug",
      "Product-Meta",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7934",
    "body": "The documentation for installing Terminal via scoop is not correct, you have missed a first step which is to add the extras bucket to the searchable list of repos\r\nWhen I type: \r\n> scoop install windows-terminal\r\nReponse:\r\nCouldn't find manifest for 'windows-terminal'.\r\n\r\nTo add the extras bucket into the list of known repos:\r\nscoop bucket add extras\r\n\r\nIt then installs!",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7934/comments",
    "author": "guestdj",
    "comments": [
      {
        "user": "WSLUser",
        "created_at": "2020-10-16T19:25:09Z",
        "body": "@DHowett I'm looking to bump the Super-Linter GH Action version to remove some bugs and update the linters. This doc change would seem to be perfect for testing everything works as it should. Would it be ok if I submitted both in the same PR and use the README update as the tester?"
      },
      {
        "user": "DHowett",
        "created_at": "2020-10-16T19:32:11Z",
        "body": "Sure."
      },
      {
        "user": "WSLUser",
        "created_at": "2020-10-16T21:05:17Z",
        "body": "PR added. Everything looks good."
      }
    ]
  },
  {
    "number": 7931,
    "title": "FuzzWrapper project is failing to build",
    "created_at": "2020-10-15T12:20:19Z",
    "closed_at": "2020-10-26T22:42:17Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Bug",
      "Area-Build",
      "Product-Terminal",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7931",
    "body": "# Environment\r\n\r\nWindows build number: Version 10.0.18362.1082\r\nWindows Terminal version (if applicable): commit f78687453cd63a2e92a146441fc482f1ec5ad598\r\nVisual Studio version: 16.7.1 (community 2019)\r\n\r\n# Steps to reproduce\r\n\r\n1. Checkout latest code (commit f78687453cd63a2e92a146441fc482f1ec5ad598)\r\n2. Open the _OpenConsole_ solution in Visual Studio.\r\n3. Build the solution.\r\n\r\n# Expected behavior\r\n\r\nThe entire solution should build successfully.\r\n\r\n# Actual behavior\r\n\r\nThe _FuzzWrapper_ project is failing with multiple link errors.\r\n\r\n```\r\n3>ConTermParser.lib(OutputStateMachineEngine.obj) : error LNK2001: unresolved external symbol \"class std::vector<class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> >,class std::allocator<class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> > > > __cdecl Microsoft::Console::Utils::SplitString(class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> >,wchar_t)\" (?SplitString@Utils@Console@Microsoft@@YA?AV?$vector@V?$basic_string_view@_WU?$char_traits@_W@std@@@std@@V?$allocator@V?$basic_string_view@_WU?$char_traits@_W@std@@@std@@@2@@std@@V?$basic_string_view@_WU?$char_traits@_W@std@@@5@_W@Z)\r\n3>ConTermParser.lib(OutputStateMachineEngine.obj) : error LNK2001: unresolved external symbol \"bool __cdecl Microsoft::Console::Utils::StringToUint(class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> >,unsigned int &)\" (?StringToUint@Utils@Console@Microsoft@@YA_NV?$basic_string_view@_WU?$char_traits@_W@std@@@std@@AEAI@Z)\r\n3>ConTermParser.lib(OutputStateMachineEngine.obj) : error LNK2001: unresolved external symbol \"class std::optional<struct til::color> __cdecl Microsoft::Console::Utils::ColorFromXTermColor(class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> >)\" (?ColorFromXTermColor@Utils@Console@Microsoft@@YA?AV?$optional@Ucolor@til@@@std@@V?$basic_string_view@_WU?$char_traits@_W@std@@@5@@Z)\r\n3>C:\\...\\terminal\\bin\\x64\\Release\\ConTerm.Parser.FuzzWrapper.exe : fatal error LNK1120: 3 unresolved externals\r\n3>Done building project \"FuzzWrapper.vcxproj\" -- FAILED.\r\n```\r\n\r\nI think those functions were only recently added in PR #7578, and maybe it's just a lib reference that now needs to be added to the _FuzzWrapper_ project.\r\n\r\nThat said, I'm not sure if this is just my problem, because it doesn't seem to be failing in the CI builds.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7931/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "PankajBhojwani",
        "created_at": "2020-10-15T17:47:18Z",
        "body": "It repros for me as well! Thanks for the catch"
      },
      {
        "user": "skyline75489",
        "created_at": "2020-10-16T02:48:05Z",
        "body": "I've seen this when I was working on #7578 but it's not consistent. I thought it's just some random & transient compiler glitches.  "
      },
      {
        "user": "j4james",
        "created_at": "2020-10-16T21:02:10Z",
        "body": "I suppose it could be a transient error - I have had issues like that before - but I can usually get them to resolve by rebuilding a few times. This error just isn't going away for me, no matter how many times I rebuild."
      },
      {
        "user": "skyline75489",
        "created_at": "2020-10-19T09:48:12Z",
        "body": "I figured it out. It's because `FuzzWrapper` does not have `ConTypes.lib` as its dependency. Thus the linker could not find the symbols needed. "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-19T12:14:30Z",
        "body": "Ah, that's certainly weird, and explains why it might be hitting so inconsistently. ConTypes is used by just about every project, so by building _any other project_, you've probably built contypes already."
      }
    ]
  },
  {
    "number": 7820,
    "title": "Performance: slow first run and slow new tab opening when lot of profiles",
    "created_at": "2020-10-03T17:39:10Z",
    "closed_at": "2020-12-10T20:15:08Z",
    "labels": [
      "Help Wanted",
      "Area-Performance",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7820",
    "body": "\r\n# Environment\r\n\r\n```\r\nWindows build number: 10.0.19041.508\r\nWindows Terminal version): 1.4.2652.0\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nAdd lot of profiles. At least 200. (my case is 190)\r\n\r\n# Expected behavior\r\n\r\nOpening of WT and opening new tabs should be fast.\r\n\r\n# Actual behavior\r\n\r\nOpening WT takes like 2-3sec. Opening the new tab also takes 2-3sec. The same with closing tabs. \r\nWhen I have few profiles everything is super fast.\r\n\r\nHardware config if someone thinks its question of power: Ryzen 7 4800H, 32GB RAM.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7820/comments",
    "author": "kszymukowicz",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-05T09:01:41Z",
        "body": "Well, the \"opening a new tab\" case is certainly interesting. Not sure why that would be slower with that many profiles. As far as the startup delay goes, that's being tracked over in #7791.\r\n\r\nDo new all new tabs take a long time to open, or is it specific to certain profiles? Is there any difference between cmd, powershell, wsl profiles?"
      },
      {
        "user": "kszymukowicz",
        "created_at": "2020-10-05T09:44:13Z",
        "body": "1. No difference between cmd, powershell, wsl profiles - the same lag.\r\n2. The lag is when:\r\n    a) opening application \r\n    a) later when clicking \"plus\" icon (or by ctrl+shift+d)\r\n    b) later when clicking close tab button"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-05T09:53:16Z",
        "body": "Oh jeez do we do something contrived when the user clicks the new tab button to figure out which of the profiles is the default profile? I'll leave this open to investigate, thanks!"
      },
      {
        "user": "kszymukowicz",
        "created_at": "2020-10-05T10:16:14Z",
        "body": "\"do we do something contrived when the user clicks the new tab button to figure out which of the profiles is the default profile\" - but why its slow on closing tab also? I suppose you do not need to know default profile when you close tab."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-05T13:33:43Z",
        "body": "That's a really good question. By all accounts, there's no reason that there's any logic associated with closing a tab that should _scale with the number of profiles_. That's just madness. "
      },
      {
        "user": "DHowett",
        "created_at": "2020-10-05T19:17:04Z",
        "body": "Moving this forward to 1.5. Reproduced open, close, exit and launch delay with 100 profiles.\r\nGood lord.\r\n\r\n```\r\n(1..100) | %{ \"{`\"name`\":`\"$_`\"},\" } | set-clipboard\r\n```\r\n\r\npowershell snippet that puts 100 profile blobs on your clipboard for pasting into WT."
      },
      {
        "user": "DHowett",
        "created_at": "2020-10-05T22:43:28Z",
        "body": "@zadjii-msft \r\n\r\n``` \tTerminalApp.dll!winrt::TerminalApp::implementation::TerminalPage::_ExpandCommands(winrt::Windows::Foundation::Collections::IMapView<winrt::hstring,winrt::TerminalApp::Command> commandsToExpand, winrt::Windows::Foundation::Collections::IVectorView<winrt::TerminalApp::Profile> profiles, winrt::Windows::Foundation::Collections::IMapView<winrt::hstring,winrt::TerminalApp::ColorScheme> schemes) Line 2163\tC++\r\n>\tTerminalApp.dll!winrt::TerminalApp::implementation::TerminalPage::_UpdateCommandsForPalette() Line 2175\tC++\r\n \tTerminalApp.dll!winrt::TerminalApp::implementation::TerminalPage::_OnTabItemsChanged(const winrt::Windows::Foundation::IInspectable & __formal, const winrt::Windows::Foundation::Collections::IVectorChangedEventArgs & eventArgs) Line 1946\tC++\r\n```\r\n\r\nBIG OLE LOOP"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-10-06T02:33:51Z",
        "body": "oh no, I was the murderer the whole time -.-\r\n\r\n\r\nWait, does that even _do anything_? Did I leave that there as a \"maybe some day we'll want to be able to expand commands on `tabs`\", but we don't currently, but we still regenerate the list of commands? Oh lawd that's so bad"
      },
      {
        "user": "ghost",
        "created_at": "2020-10-10T22:35:57Z",
        "body": "I have a question, I don't know if I should open a new issue for it: \r\nHow does the terminal team monitor performance regressions, particularly startup performance regressions? "
      },
      {
        "user": "Don-Vito",
        "created_at": "2020-12-10T18:41:28Z",
        "body": "@zadjii-msft, @PankajBhojwani - is this one still relevant? I believe it was resolved"
      },
      {
        "user": "kszymukowicz",
        "created_at": "2020-12-10T20:15:08Z",
        "body": "Yes. Its ok now."
      },
      {
        "user": "kczx3",
        "created_at": "2021-05-26T14:23:31Z",
        "body": "What is the expected startup time exactly?  I only have 4 profiles but it takes like 3-4 seconds just for the window to appear.  I'd argue everything should be done to make the window appear as fast as possible even if that means the profile and console load time is perceived to be slower then."
      },
      {
        "user": "DHowett",
        "created_at": "2021-05-26T16:38:04Z",
        "body": "_definitely not that long_. if you run `wsl -l` is it slow?"
      },
      {
        "user": "kczx3",
        "created_at": "2021-05-26T17:31:09Z",
        "body": "Less than a second running that command from cmd."
      },
      {
        "user": "kczx3",
        "created_at": "2021-05-27T13:39:14Z",
        "body": "I suppose my problem is somewhat different because it isn't just on first run.  It is on any load really.  I have a bunch of shortcuts that launch a new-tab with a command line to launch into ssh and it takes about 4 seconds for those too."
      }
    ]
  },
  {
    "number": 7542,
    "title": "Please add scrollHome and scrollEnd",
    "created_at": "2020-09-05T16:17:35Z",
    "closed_at": "2020-12-08T17:28:42Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Area-TerminalControl",
      "Area-Settings",
      "Product-Terminal",
      "Issue-Task"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7542",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\nactions:\r\nscrollHome - scroll to earliest history\r\nscrollEnd - return to input line\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n bindings:\r\nscrollHome - Ctrl+Shift+Home\r\nscrollEnd - Ctrl+Shift+End\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7542/comments",
    "author": "vefatica",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2020-09-09T00:21:36Z",
        "body": "Proposal: `scrollToTop` and `scrollToBottom`.\r\nCounterbalance: `selectAll` (part of #715)\r\n\r\nIf there was a special mode, selection mode, that you could enter and it would let you move around the cursor with all your keys... would that be acceptable?\r\n\r\nIf so, #5804 is a spec for that mode. :smile:"
      },
      {
        "user": "vefatica",
        "created_at": "2020-09-09T00:59:48Z",
        "body": "It's not a matter of acceptability.  I didn't follow that thread well.  I don't want to move the cursor; I want to scroll the history. If you're suggesting more than one keystroke to scroll the history, I won't like it.  Up, down, pgup and pgdn are fine as they are ... it just needs a couple more."
      },
      {
        "user": "vadimkantorov",
        "created_at": "2020-09-17T21:44:43Z",
        "body": "This would be very useful, since when the program prints very fast and scrollbar isn't at very bottom, then it's impossilbe to dock it back to bottom, since printing is faster than human moving the scrollbar"
      }
    ]
  },
  {
    "number": 7454,
    "title": "CLI: Support tilde (~) shortcut to user profile in -d argument",
    "created_at": "2020-08-28T17:08:22Z",
    "closed_at": "2022-03-03T17:07:48Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Priority-2",
      "Area-Commandline",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7454",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\nCurrently, if I want to open a Terminal tab that starts in a specific folder in my user profile, I have to write `-d C:\\Users\\MyUser\\somefolder`. I wish I could use the shortcut ~ to say \"that's my user folder\".\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\nFor example, I could use the command `wt -d ~/somefolder`, which would be equivalent to `wt -d C:\\Users\\MyUser\\somefolder`.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7454/comments",
    "author": "Ariane-B",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2020-09-04T00:39:04Z",
        "body": "Hey, this is a good idea."
      },
      {
        "user": "kaifee-haque",
        "created_at": "2020-09-05T16:15:42Z",
        "body": "Looks like we can already open a Terminal tab that starts in `C:\\Users\\MyUser\\somefolder` by using the command `wt -d somefolder`."
      },
      {
        "user": "Ariane-B",
        "created_at": "2020-09-05T16:29:56Z",
        "body": "That is cool, but it would be nice if it were clearer in the docs, because I was convinced the root for the -d parameter was \"My PC\" or \"C:\"."
      },
      {
        "user": "DHowett",
        "created_at": "2020-09-05T18:27:15Z",
        "body": "As with all Windows applications, the root of any relative directory parameter is the current working directory.\r\n\r\nThis means that if you run `wt -d x` from `C:\\a` it will start a profile in `C:\\a\\x`.\r\n\r\nWe opted not to document behavior that is either incidental or not a deviation from other applications :)"
      },
      {
        "user": "Ariane-B",
        "created_at": "2020-09-05T18:45:51Z",
        "body": "Oh, that's what you meant! I thought you meant that the -d argument was always based on the current user's directory. If the base is the current command line directory, then my suggestion stands. \r\n\r\nWhat you describe makes perfect sense. But in the context of a startup shortcut, for example, the directory it runs from is not immediately obvious. Add in general, I don't think it's entirely safe to assume everyone will always be running the shell command line from their home folder.\r\n\r\nAlso, there might be cases where a single shell file will be run by several users, who'd want the starting directory to be in -their- user folder. \r\n\r\nFinally, some people like to specify things when they're insecure about what the automatic behaviour would be. Simply mentioning the thing is sometimes simpler than researching the default behaviour, after all. \r\n\r\nFor all these reasons, I think I'll stand behind my suggestion. "
      },
      {
        "user": "KnapSac",
        "created_at": "2020-09-09T13:14:35Z",
        "body": "Can I pick this up?"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-09-09T15:05:15Z",
        "body": "I'm a little worried about this request. Treating `~` as `%USERPROFILE%`seems like a good idea, but what if someone wants to use `~` as their WSL `~` directory, not their Windows one?\r\n\r\nIMO I'd want that question answered before we ship this."
      },
      {
        "user": "KnapSac",
        "created_at": "2020-09-09T15:13:26Z",
        "body": "Maybe that should depend on the profile you're targeting? For instance, when opening a WSL profile we could treat ```~``` as their WSL ```~``` directory, and for other profiles we could treat it as ```%USERPROFILE%```."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-09-09T15:27:10Z",
        "body": "Ah but how do we know for certain if they\"re targeting a WSL profile? The user could make other WSL profiles other than the dynamically generated ones. In that case, we wouldn't have the `source` data to tell use that the profile is a WSL profile. Maybe we need to add another `wslDistro` property that identifies which distro the profile is for. That might play into #592 (et al) as well.\r\n\r\n/cc @DHowett since we've been having discussion about this in the past"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-03-03T17:07:48Z",
        "body": "We might have low key done this unintentionally. \r\n\r\n#12437\r\n\r\n> If we find that we were unable to mangle ~ into the user's WSL commandline, then we will re-evaluate that startingDirectory as %USERPROFILE%, which is at least something sensible, if albeit not what they wanted.\r\n\r\nI mean, it makes sense. `~` isn't a valid path for a Windows process, but it is for a WSL process. We've already got some magic to make this work for WSL processes. Now we've got different magic to make it work for anything other than wsl.exe. If we see a startingDirectory of `~`, we're gonna treat it like `%USERPROFILE%` now.\r\n\r\nThis should be in `Terminal v1.12.10393.0`, `Terminal Preview v1.13.10395.0`"
      }
    ]
  },
  {
    "number": 7443,
    "title": "New \"actions\" structure not recognized in schema",
    "created_at": "2020-08-28T06:11:49Z",
    "closed_at": "2021-06-10T18:10:49Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Docs",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-Schema",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7443",
    "body": "Missing a few things in the schema:\r\n- \"actions\" (in place of \"keybindings\")\r\n   - it'd be nice if we could do a schema deprecation thing for \"keybindings\" but it might be too soon for that :/\r\n- \"name\" (in the context of commands, not profiles)\r\n   - this also means that \"keys\" is no longer required\r\n- \"commands\"\r\n   - should accept a list of \"command\" objects\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7443/comments",
    "author": "carlos-zamora",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2020-08-28T12:58:57Z",
        "body": "We'll also need `icon`, `iterateOn` added as well.\r\n\r\nAlso `name` can also be an object in `{ \"key\": string }` format."
      }
    ]
  },
  {
    "number": 7279,
    "title": "Feature Request: Randomize background images from an array of filesystem paths",
    "created_at": "2020-08-13T19:39:09Z",
    "closed_at": "2022-10-05T22:12:01Z",
    "labels": [
      "Resolution-Duplicate",
      "Issue-Feature",
      "Help Wanted",
      "Area-Extensibility",
      "Area-Settings",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7279",
    "body": "# Description of the new feature/enhancement\r\n\r\nAt the moment, a `backgroundImage` can be specified in a Windows Terminal profile. However, if I `splitPane`, the same background image is used in my duplicate pane. I would like the ability to specify an array of filesystem paths in the `backgroundImage` property, in my profile(s), and have Windows Terminal randomly select one from the array upon initialization.\r\n\r\nUsing a different background image for each pane helps to keep the interface lively and makes each pane more visually distinguishable from the others.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nUnsure\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7279/comments",
    "author": "pcgeek86",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2020-08-13T23:33:03Z",
        "body": "Hey, I like this. I'll tag it up as a possible extension idea!\r\nRef: #4000."
      },
      {
        "user": "carlos-zamora",
        "created_at": "2022-10-05T22:11:56Z",
        "body": "Consolidating this with #3900 \r\n\r\n/dup #3900 "
      },
      {
        "user": "ghost",
        "created_at": "2022-10-05T22:12:00Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 7011,
    "title": "[Preview] Keep the Command Palette around after executing a command",
    "created_at": "2020-07-22T18:07:09Z",
    "closed_at": "2020-07-27T22:43:58Z",
    "labels": [
      "Resolution-Won't-Fix",
      "Help Wanted",
      "Area-UserInterface",
      "Area-Settings",
      "Product-Terminal",
      "Issue-Task",
      "good first issue"
    ],
    "url": "https://github.com/microsoft/terminal/issues/7011",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\nI tested using the Command Palette after finding how to bind it in the PR (perhaps adding an entry bound to null in defaults.json would be in order). First I enabled the AlwaysonTop Mode. Then I wanted to do another command from the Command Palette. But as soon as I enabled the AlwaysonTop Mode, the Command Palette exited. If I open it and then press ESC, it will close the Command Palette. So we have a way to exit without executing a command. Therefore from a usability point of view, please don't close it unless the user explicitly closes it using ESC (or any other bound key used for exiting). This would help someone open and close multiple tabs/panes quickly as well as enabling/disabling different visual modes quickly. \r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\nAlter the method used for closing the Command Palette to require a user explicitly do so. We can add a setting to change this behavior (which I guess could also be toggable, inception anyone?) to always close after executing a command but I think not many users will want that behavior.\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/7011/comments",
    "author": "WSLUser",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2020-07-23T13:37:59Z",
        "body": "So the command palette was inspired heavily by the ones in VsCode and Sublime, both of which dismiss by default after executing a command. I'm open to the idea of making this a setting, but keeping the current behavior as the default. "
      },
      {
        "user": "DHowett",
        "created_at": "2020-07-24T00:21:54Z",
        "body": "If we can find good examples of other applications that _don't_ dismiss, I'd be glad to see them.\r\n\r\nMost of our actions change the terminal in some way that is immediately attention-switching for the user. Not dismissing the command list would get in the user's way."
      },
      {
        "user": "WSLUser",
        "created_at": "2020-07-24T15:25:33Z",
        "body": "I would still prefer having an option to keep it around and closing it myself when I'm done with it. This is basically an alternative to constantly typing out wt arguments or enabling certain settings in the json file (such as retro and alwaysontop). It's not easy remembering all the argument syntax and I can't always have the page in front of me that tells me how to do it. So this provides a useful alternative to getting things how I want without messing with typing out an argument. I'd also argue it's a much faster way too for some users once the option to keep it around is available."
      },
      {
        "user": "DHowett",
        "created_at": "2020-07-27T22:43:58Z",
        "body": "So, okay, I've thought about this over the weekend.\r\n\r\nI'd rather reduce the need to run back-to-back commands instead of making running back-to-back commands easier.\r\n\r\nThe right way to run multiple commands back to back to get the terminal into a known state is going to be through #5970. If a user has multiple things they need to do to a specific terminal before it's _usable_, and they're all things that are exposed via commands or config options, that's what a **profile** is for.\r\n\r\nIn the future, when we have 5970, \"enter fullscreen and toggle retro mode\" can be a single command so you don't need to run them back-to-back.\r\n\r\nPlease feel free to continue the discussion, but for now I'm gonna mark this one rejected."
      }
    ]
  },
  {
    "number": 6251,
    "title": "Become C++20-compliant in our use of span",
    "created_at": "2020-05-29T12:36:51Z",
    "closed_at": "2020-07-14T18:31:00Z",
    "labels": [
      "Product-Conhost",
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Area-CodeHealth",
      "Priority-2"
    ],
    "url": "https://github.com/microsoft/terminal/issues/6251",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\nAfter discussing with @DHowett about the issues with updating gsl due to gsl shifting to C++20 std:span behavior and in accordance with below, use of span will be updated to C++20 to minimize changes needed by the update.\r\n\r\n# A clear and concise description of what the problem is that the new feature would solve.\r\nThis will allow us to update gsl.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/6251/comments",
    "author": "WSLUser",
    "comments": [
      {
        "user": "DHowett",
        "created_at": "2020-06-02T19:58:09Z",
        "body": "It's more likely that we'll just move to GSL 3 and become C++20-compliant in our use of `span` so we can transition off `gsl::span` with minimal changes later :smile:"
      },
      {
        "user": "WSLUser",
        "created_at": "2020-06-02T22:06:58Z",
        "body": "I'll update this issue to reflect that then as a status tracker. Feel free to edit to add checkboxes if multiple issues need to be created that would tracked in this master issue."
      },
      {
        "user": "DHowett",
        "created_at": "2020-06-02T22:14:07Z",
        "body": "Thanks! :smile:"
      }
    ]
  },
  {
    "number": 5936,
    "title": "Opening a new tab with ctrl+shift+1 provides no spoken feedback with NVDA",
    "created_at": "2020-05-16T09:24:01Z",
    "closed_at": "2022-02-16T00:00:47Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-Accessibility",
      "Product-Terminal",
      "Priority-1"
    ],
    "url": "https://github.com/microsoft/terminal/issues/5936",
    "body": "# Environment\r\n\r\n```none\r\nWindows build number: 10.0.19041.264\r\nWindows Terminal version (if applicable): latest 0.11 preview\r\nNVDA: latest master snapshot alpha-20220,1c4519a6\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n1. With NVDA running, open terminal. Press ctrl+shift+1 to open a new tab.\r\n\r\n# Expected behavior\r\n\r\nNVDA informs me about the newly opened tab. Output from subsequent commands in this new tab are automatically read out by NVDA.\r\n\r\n# Actual behavior\r\n\r\nSilence. No feedback is provided. Additionally, new text is not read until tabbing away and back into terminal (i.e, it needs to regain focus).",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/5936/comments",
    "author": "Neurrone",
    "comments": [
      {
        "user": "codeofdusk",
        "created_at": "2020-05-16T11:02:08Z",
        "body": "Cc @carlos-zamora @DHowett-MSFT."
      },
      {
        "user": "DHowett",
        "created_at": "2020-05-18T23:58:26Z",
        "body": "Thanks! Triaged into near-term."
      },
      {
        "user": "carlos-zamora",
        "created_at": "2022-02-16T00:00:47Z",
        "body": "Looks like this got fixed in #10971 and I'm unable to get a repro of this on 1.13.10395.0 too.\r\n\r\nI'm going to close this issue out as \"Resolution-Fix-Available\", but if you're still experiencing it, let me know and I'll reopen it."
      },
      {
        "user": "Neurrone",
        "created_at": "2022-02-16T06:35:32Z",
        "body": "I can confirm this is fixed now, thanks!"
      }
    ]
  },
  {
    "number": 5120,
    "title": "An option to swallow the trailing CRLF on paste",
    "created_at": "2020-03-25T21:00:16Z",
    "closed_at": "2021-12-09T18:32:24Z",
    "labels": [
      "Help Wanted",
      "Area-TerminalControl",
      "Area-Settings",
      "Needs-Attention",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/5120",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\nWhenever I paste a line with a trailing CRLF in Terminal, it gets executed immediately. I'd like to have an option for Terminal to swallow the trailing CRLF, so it would be safe to paste text.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n\r\nI don't have any suggestions on implementation, but ConEmu has an option like that.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/5120/comments",
    "author": "wasker",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-03-26T01:09:10Z",
        "body": "Yeah, we might as well have something like this. Somebody needs to suggest a config option (and whether it's profile-specific), and explain how it works when there's multiple newlines.\r\n\r\nFor reference, #395 is the holistic solution to this problem when all shells and applications eventually support it."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-12-09T15:23:17Z",
        "body": "You know, we also discussed this over in 9400 and have a proposed fix in #11473. To quoth:\r\n\r\n> just to trim the trailing newline if that's the only one in the paste contents. To quote: \"It doesn't make sense to be warned for multiple lines, but copy a single line and try to paste it AND ONLY SEE ONE LINE IN THE DIALOG. That's dumb\".\r\n\r\n@wasker you think that'll work for you?"
      },
      {
        "user": "wasker",
        "created_at": "2021-12-09T18:29:22Z",
        "body": "@zadjii-msft Yeah, I think this is a decent resolution for this bug, thanks!"
      }
    ]
  },
  {
    "number": 4772,
    "title": "Add a feature/option to automatically relaunch terminated profiles (vs closeOnExit)",
    "created_at": "2020-03-02T12:31:27Z",
    "closed_at": "2021-02-09T15:41:28Z",
    "labels": [
      "Resolution-Duplicate",
      "Issue-Feature",
      "Help Wanted",
      "Area-TerminalConnection",
      "Area-Settings",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4772",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\nAutomatically attempt to reconnect terminated sessions.\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\nIn profiles.json, profile.closeOnExit, add a \"reconnect\" option that automatically reconnects a terminated session alternatively keeps attempting to do so every, say, ten seconds until connection is made or tab is closed.\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n# Description\r\nWhen I wake up my computer from hibernation alternatively restart a remote server, I'd like to not have to manually reopen tabs.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4772/comments",
    "author": "vlork",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-03-05T23:58:35Z",
        "body": "Thanks for the feature request! I've tagged it up into backlog."
      },
      {
        "user": "pernu",
        "created_at": "2020-04-15T22:42:11Z",
        "body": "This would be a significant quality of life improvement.\r\n\r\nI think the profile setting should take a couple of options, maybe something like \"automatic\" to work as the reporter described, and \"manual\", where the user would be required to hit the enter key to initiate the relaunch."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-02-09T15:41:25Z",
        "body": "You know what, I think this is actually the same thing as #4379 \"Feature Request: option to relaunch a profile when it exits\". I'm gonna use that as the megathread for tracking this (and related) issues for now. Thanks!\r\n\r\n/dup #4379 "
      },
      {
        "user": "ghost",
        "created_at": "2021-02-09T15:41:27Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 4667,
    "title": "Add C# and F# Interactive Profile Generators",
    "created_at": "2020-02-20T21:04:56Z",
    "closed_at": "2020-02-21T03:04:38Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Area-Settings",
      "Product-Terminal",
      "Issue-Task"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4667",
    "body": "# Description of the new feature/enhancement\r\n\r\nRelated to #3821, also add support for the C# and F# interactive prompts which are shipped with VS.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nI use something similar to this for my profiles:\r\n\r\n{\r\n            \"commandline\": \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\MSBuild\\\\Current\\\\Bin\\\\Roslyn\\\\csi.exe\",\r\n            \"name\": \"C#\",\r\n            \"tabTitle\": \"C#\"\r\n}, {\r\n            \"commandline\": \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\FSharp\\\\fsi.exe\",\r\n            \"name\": \"F#\",\r\n            \"tabTitle\": \"F#\"\r\n}",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4667/comments",
    "author": "deoradh",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-02-21T03:04:35Z",
        "body": "Thanks for the request! I've been redirecting requests for additional dynamic shells to /dup #2303, because that'll allow _those applications_ to register their shells too. Terminal's only going to autodetect a scant few of them, and I'd like to keep that list small to avoid making users upset that we keep running roughshod over their profiles list :smile:"
      },
      {
        "user": "ghost",
        "created_at": "2020-02-21T03:04:37Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 4665,
    "title": "Coalesce adjacent glyph scale corrections to reduce total run count and split activity",
    "created_at": "2020-02-20T20:38:10Z",
    "closed_at": "2024-10-10T13:04:37Z",
    "labels": [
      "Help Wanted",
      "Area-Rendering",
      "Area-Performance",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4665",
    "body": "To correct the scaling factor of glyphs (the vertical height) to fit inside a single cell, a correction factor is added in `CustomTextLayout`.\r\n\r\nThis takes the form of filling the `_glyphScaleCorrections` vector as we do `_CorrectGlyphRun` and then turns into splits around each glyph in the parent `_CorrectGlyphRuns`.\r\n\r\nThis represents identifying when two or more adjacent characters need the same scale factor and reducing the number of corrections/splits created as the original algorithm is relatively naive.\r\n\r\nExample:\r\nIf B and C both need a scale factor of 0.5...\r\n```\r\nA   B   C   D\r\n1   .5  .5   1\r\n```\r\n`_glyphScaleCorrections` will have two values\r\nIDX = 1, SCALE = 0.5 (for the B)\r\nIDX = 2, SCALE = 0.5 (for the C)\r\n\r\nand 4 runs will be created\r\nRun0 = A @ 1\r\nRun1 = B @ 0.5\r\nRun2 = C @ 0.5\r\nRun3 = D @ 0.5\r\n\r\nThe thought here is that we could collapse `_glyphScaleCorrections` into one record\r\nIDX = 1, SCALE = 0.5, LEN = 2 (for the B and C together)\r\n\r\nand then only 3 runs would be created\r\nRun0 = A @ 1\r\nRun1 = B C @ 0.5\r\nRun2 = D @ 1\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4665/comments",
    "author": "miniksa",
    "comments": [
      {
        "user": "beviu",
        "created_at": "2020-02-20T20:58:36Z",
        "body": "```diff\r\n  Run0 = A @ 1\r\n  Run1 = B @ 0.5\r\n  Run2 = C @ 0.5\r\n- Run3 = D @ 0.5\r\n+ Run3 = D @ 1\r\n```\r\n\r\n(I think)"
      },
      {
        "user": "lhecker",
        "created_at": "2024-10-10T13:04:37Z",
        "body": "Since scaling glyphs resulted in complaints about the skewed look, we've since replaced the renderer with one that supports arbitrary overlaps and replaced the common box drawing glyphs with ones that are builtin and always \"correct\"."
      }
    ]
  },
  {
    "number": 4546,
    "title": "Update CLIUtils/CLI11",
    "created_at": "2020-02-12T17:04:42Z",
    "closed_at": "2020-06-22T19:57:10Z",
    "labels": [
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-CodeHealth"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4546",
    "body": "From #4295, I asked @jsoref to upstream the spelling issue in CLIUtils.\r\nIt was done here: CLIUtils/CLI11#429\r\n\r\nNow we need to ingest the update.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4546/comments",
    "author": "miniksa",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-02-13T08:06:56Z",
        "body": "Yoinking triage. 1.x."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-06-22T19:57:10Z",
        "body": "Oh wait I've totally done this already. #6307 "
      }
    ]
  },
  {
    "number": 4542,
    "title": "Inconsistent touch screen scrolling",
    "created_at": "2020-02-12T01:22:40Z",
    "closed_at": "2020-02-19T03:04:30Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-TerminalControl",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4542",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nIf this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category \"Apps > Windows Terminal (Preview)\" and choose \"Share My Feedback\" after submission to get the link.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: 10.0.18363.628\r\nWindows Terminal version (if applicable): 543f5339d73ed49ccf3392627663c59cd5e51aec\r\n\r\nAny other software?\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nScroll the terminal viewport using touch screen.\r\n<!-- A description of how to trigger this bug. -->\r\n\r\n# Expected behavior\r\n\r\nViewport should move consistently, line by line, and the scrolling should \"follow the finger\".\r\n<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->\r\n\r\n# Actual behavior\r\n\r\nScrolling is not consistent, and jellying/jumping. This is very apparent especially when scrolling the viewport up, where the line moves by 2 instead of 1. Also when scrolling quickly, the actual scrolling lags a little bit.\r\n\r\n<!-- What's actually happening? -->\r\n\r\n# Proposed Fix\r\n\r\nSince this is caused by rounding errors, I modified the scrolling to operate on `_scrollBar`'s `Value` directly (which uses `double`) instead of calculating the previous offset from `GetScrollOffset` in `TermControl.cpp`. \r\n\r\nTested this and I didn't found any glitches with this approach, and now the touch screen scrolling works as expected.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4542/comments",
    "author": "jamestut",
    "comments": [
      {
        "user": "jamestut",
        "created_at": "2020-02-12T12:10:23Z",
        "body": "I applied the same fix for the regular mouse wheel scrolling handling, and now precision touchpad scrolling works perfectly, just like the original built-in conhost.\r\n\r\nBy using non integral scrolling delta, precision touchpad's scrolling speed is also adjustable via the `rowsToScroll` setting.\r\n\r\nModerators, once you agree with my proposed changes, I will create a PR."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-02-12T16:01:34Z",
        "body": "I mean, it's kinda hard to agree with the proposed changes without having the PR to look at 😄. I think it'd be easier to just look at the PR and discuss in the PR. That's my opinion at least - @DHowett-MSFT can feel free to override me here"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-02-12T20:25:40Z",
        "body": "I would love to evaluate a PR here. :smile:"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-02-12T20:26:00Z",
        "body": "Triaged into v1.x, but if it can land sooner that'd be neat."
      }
    ]
  },
  {
    "number": 4430,
    "title": "Split pane from command prompt yields inconsistent results",
    "created_at": "2020-01-31T18:23:56Z",
    "closed_at": "2020-04-03T06:00:37Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/4430",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nIf this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category \"Apps > Windows Terminal (Preview)\" and choose \"Share My Feedback\" after submission to get the link.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: 10.0.18363.0\r\nWindows Terminal version: 0.9.271.0\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n1. Create desktop shortcut with `wt.exe ; split-pane ; split-pane`.\r\n2. Run shortcut, observe Terminal's pane layout, close Terminal.  Repeat several times.\r\n3. For me this has resulted in all of the following at different times\r\n    * 3 panes with half vertical left and two quarters on the right\r\n    * 3 panes with two quarters on left, half vertical on right\r\n    * 2 vertical panes\r\n    * once I even got a single pane\r\n\r\n# Expected behavior\r\n\r\nExpecting first bullet under step 3 above. Absent changes in screen dimension, command line invocation should produce same results each time.\r\n\r\n# Actual behavior\r\n\r\nGetting variable results rather than consistent results.  I do seem to get the expected one most often, but not 100% of the time.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/4430/comments",
    "author": "tedhudek",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-02-10T20:49:53Z",
        "body": "This one fortunately has a quick workaround: specify `-V` or `-H` explicitly. :smile: Thanks for the report."
      },
      {
        "user": "FRANK3NST31N",
        "created_at": "2020-02-16T12:52:40Z",
        "body": "I have observed inconsistent results as well while specifying the -V or -H \r\n\r\nOS Name:                   Microsoft Windows 10 Pro\r\nOS Version:                10.0.18363 N/A Build 18363\r\nwt Version:                 0.9.433.0\r\n\r\nI followed the same procedure but used a script.\r\n\r\nI created : test-terminal-split.CMD\r\n\r\nFile : test-terminal-split.CMD\r\nContents :\r\n\r\nwt  ; split-pane -V  ; split-pane -H\r\n\r\nthen i execute this script several times.  \r\n\r\nrun 1 : two panes\r\nrun 2 : three panes OK\r\nrun 3 : two panes\r\nrun 4 : two panes\r\nrun 5 : three panes OK \r\n\r\n"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-04-03T05:59:53Z",
        "body": "I think this was fixed with #5090, for 0.11 (and soon, internal selfhost)"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-04-03T06:00:22Z",
        "body": "/dup #4618 (sorry to dupe you to a higher number, but that's the one closed by the PR :smile:)"
      },
      {
        "user": "ghost",
        "created_at": "2020-04-03T06:00:34Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 3785,
    "title": "Fullscreen on secondary display has has more than double the expected width",
    "created_at": "2019-11-30T09:24:48Z",
    "closed_at": "2020-01-06T21:12:31Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/3785",
    "body": "# Environment\r\n\r\n```none\r\nWindows build number: 10.0.18363.0\r\nWindows Terminal version (if applicable): 0.7.3291.0\r\n```\r\n\r\nTwo displays on same nvidia GPU (441.41 drivers). Primary is 2560x1440, secondary positioned to the left is 1920x1200.\r\n\r\n# Steps to reproduce\r\n\r\nUse powershell `$Host.UI.RawUI.WindowSize` to check dimensions of terminal both maximized and fullscreen.\r\n\r\n# Expected behavior\r\n\r\nFullscreen terminal should report at most a handful of extra rows/cols compared to a maximized window (accounting for space consumed by window border/task bar).\r\n\r\n# Actual behavior\r\n\r\nFor primary monitor as expected:\r\nMaximized: 229x61\r\nFullscreen: 231x63\r\n\r\nOn secondary monitor *gigantic* width in fullscreen:\r\nMaximized: 171x50\r\nFullscreen: **348**x52\r\n\r\nThe fullscreen window itself is still correctly sized to the display.  The left/top/bottom edges of the terminal content are aligned to the matching edges of the window (or approximately when fullscreened directly from maximized ala #3709).  The extra columns aren't visible beyond the right edge of the window.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/3785/comments",
    "author": "krage",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-12-02T20:54:36Z",
        "body": "This may (???) be helped by #3721?"
      },
      {
        "user": "krage",
        "created_at": "2019-12-03T21:51:53Z",
        "body": "I've built a copy of that branch in #3721 and it does appear to fix this behavior for me.\r\n\r\nI removed my settings file to directly compare the powershell-reported dimensions of the built-in defaults across both:\r\n\r\n## Release Build\r\nPrimary Display Maximized 280x64\r\nPrimary Display Fullscreen (from non-maximized) 280x67\r\nPrimary Display Fullscreen (from maximized) 283x67\r\nSecondary Display Maximized 209x52\r\nSecondary Display Fullscreen (from non-maximized) 423x56\r\nSecondary Display Fullscreen (from maximized) 425x55\r\n\r\n## #3721 Build\r\nPrimary Display Maximized 280x64\r\nPrimary Display Fullscreen (from non-maximized) 280x67\r\nPrimary Display Fullscreen (from maxmimized) 280x67\r\nSecondary Display Maximized 209x52\r\nSecondary Display Fullscreen (from non-maximized) 209x56\r\nSecondary Display Fullscreen (from maximized) 209x56\r\n\r\nSo can confirm on my setup at least that it fixes both the incorrect width on secondary display and the fullscreen from maximize issues.\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 3176,
    "title": "Windows Clipboard History conflicts with Windows Terminal",
    "created_at": "2019-10-13T08:42:25Z",
    "closed_at": "2020-01-13T18:00:39Z",
    "labels": [
      "Help Wanted",
      "Resolution-External",
      "Issue-Bug",
      "Area-TerminalControl",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/3176",
    "body": "Pressing Win+V on Windows 10 (to access your clipboard history) doesn't allow you to use your keyboard to navigate the clipboard. The Windows Terminal intercepts all keystrokes, not allowing Windows Clipboard History to be keyboard accessible.\r\n\r\nThe expected behaviour is when the user presses Win+V, Windows Terminal should not intercept keystrokes, and allow Windows Clipboard History to do its job with Keyboard",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/3176/comments",
    "author": "mohamedmansour",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-10-14T19:52:19Z",
        "body": "This has hints of #459 in it (it looks like cloud clipboard is using an IME now?) but broadly it seems to be something they're doing wrong. Now, critically, when you _select_ something from cloud clipboard their inflexibility in what an application should use as its \"paste\" key binding will make it so that you can't even _paste_ the selected entry..."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-13T18:00:39Z",
        "body": "Since the IME landed, I can't reproduce this any more. Pasting still doesn't work, but that's not part of the original report. :smile:"
      }
    ]
  },
  {
    "number": 3169,
    "title": "Extraordinarily sluggish response to input over busy ssh session",
    "created_at": "2019-10-12T21:28:40Z",
    "closed_at": "2020-04-22T16:00:10Z",
    "labels": [
      "Help Wanted",
      "Area-Performance",
      "Issue-Bug",
      "Needs-Author-Feedback",
      "No-Recent-Activity",
      "Product-Terminal",
      "Priority-1"
    ],
    "url": "https://github.com/microsoft/terminal/issues/3169",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nIf this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category \"Apps > Windows Terminal (Preview)\" and choose \"Share My Feedback\" after submission to get the link.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]\r\n\r\n`Microsoft Windows [Version 10.0.18999.1]`\r\n\r\nWindows Terminal version (if applicable):\r\n`0.5.2762.0`\r\n\r\nAny other software? \r\n`ssh`, `cmd`\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n1. ssh to an Ubuntu 18.04 host; log in to `bash` session.\r\n2. start `byobu`\r\n2. run command\r\n```$ while :; do echo 'All work and no play makes Jack a dull boy.';  done```\r\n3. press `F2` key to create new `byobu` window\r\n4. press `F3` and `F4` to toggle screens back and forth several times\r\n\r\n# Expected behavior\r\nSteps  4 and 5 respond quickly.\r\n\r\n<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->\r\n\r\n# Actual behavior\r\nSteps 4 and 5 can take very long times to process the keystroke and respond.\r\nSometimes 10, 20, 30 seconds, sometimes immediate.\r\n\r\n<!-- What's actually happening? -->\r\n\r\nCompare to doing the same process from `cmd.exe` (in its native window), which responds immediately as expected.\r\n\r\nCtrl-C also is sluggish. \r\n\r\n[edited to correct EB and AB and add Ctrl-C comment]\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/3169/comments",
    "author": "hwinkler",
    "comments": [
      {
        "user": "ZimGil",
        "created_at": "2020-01-29T17:00:33Z",
        "body": "# Environment\r\n\r\n```none\r\nWindows build number: Microsoft Windows [Version 10.0.18363.592]\r\nWindows Terminal version (if applicable): 0.8.10261.0\r\n```\r\n\r\nI feel the same sluggish response to ssh `Connection to <IP> closed by remote host` that will also not be solved by Ctrl-C\r\nMaybe related...?\r\n"
      },
      {
        "user": "hwinkler",
        "created_at": "2020-01-31T04:07:39Z",
        "body": "Just a note for context:\r\n\r\nThe purpose of running the shell script infinite loop is to force the remote session to spew a torrent of text. Consuming the torrent seems to block Terminal from prompt handling of control sequences. There are probably simpler ways to repro. But the repro I described still clearly demonstrates the behavior on Terminal  0.8.10261.0\r\n\r\nAlso, I omitted in the original description to say I am running a `wsl` Ubuntu session locally, and from that I am ssh-ing to a remote host to run `byobu` and the infinite loop script.\r\n\r\n\r\n"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-04-13T16:57:07Z",
        "body": "@hwinkler Are you using `ssh.exe` that comes with Windows, or the `ssh` from your linux distro?\r\n\r\nAre you possibly using `\"experimental.retroTerminalEffect\": true` in your `profiles.json`? \r\n\r\nDoes this repro _without_ `ssh`? or does it require `ssh` to be in the middle? I'm trying this locally w/o `ssh` in the middle and I can't seem to get it to repro at all. \r\n\r\nMaybe this just got resolved on it's own in the last few releases?\r\n\r\nEDIT: @ future me: #1311 specifically mentions being under CPU load. Lets try that. "
      },
      {
        "user": "ghost",
        "created_at": "2020-04-19T13:00:10Z",
        "body": "This issue has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **4 days**. It will be closed if no further activity occurs **within 3 days of this comment**."
      }
    ]
  },
  {
    "number": 3102,
    "title": "Enforce a minimum window size when resizing",
    "created_at": "2019-10-07T01:36:30Z",
    "closed_at": "2020-01-23T21:49:58Z",
    "labels": [
      "Help Wanted",
      "Area-UserInterface",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/3102",
    "body": "\r\n\r\n# Set the window size to be of minimum fixed size. I mean is that, allow the user to resize the whole window to a limit.\r\n\r\nIt would solve the issue on multiple tabs not being shown plus there's a bug when we completely resize to very small window then resize back to normal the path is not shown.  \r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nWe could come up within minimum window size that every user is allowed to resize, this could be done by comparing using the user's screen resolution, to be not biased\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/3102/comments",
    "author": "jj10133",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-10-07T23:50:29Z",
        "body": "Yep, this is solid. Thanks!"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-10-07T23:50:57Z",
        "body": "So good an idea is this that I'm tagging it for v1.0."
      },
      {
        "user": "jj10133",
        "created_at": "2019-10-08T04:02:14Z",
        "body": "Thank you Sir"
      },
      {
        "user": "JipDol2",
        "created_at": "2019-10-24T00:39:22Z",
        "body": "hello, i wonder this issue. \r\ni want this problem to solve so i found serveral document.(To find out where the documents and sources are related to this part)\r\nbut i cant find ,,,,,ㅠㅠㅠ \r\nsorry where i find \"this issue related source and docs?\""
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-23T21:49:58Z",
        "body": "It looks like we actually shipped this with @mcpiroman's grid resize PR. Filed #4349 to enable it by default."
      }
    ]
  },
  {
    "number": 2871,
    "title": "Feature Request: Add nextPane and prevPane keybindings",
    "created_at": "2019-09-24T17:46:53Z",
    "closed_at": "2020-12-11T18:36:06Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Area-UserInterface",
      "Product-Terminal",
      "Issue-Task"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2871",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\nThere's `nextTab` and `prevTab`, but since I work in a single-tab, multi-pane environment, those keybindings do nothing for me. How about being able to bind `ctrl+tab` to `nextPanel`?\r\n\r\n(Would fit in nicely with the rest of #1000 .)\r\n\r\n_Edit: I can't believe I typoed that last `nextPanel` as `nextTab`, making the sentence and request completely nonsensical._ :D",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2871/comments",
    "author": "moswald",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-09-24T17:51:23Z",
        "body": "As of #1910, you can move the focus between panes \"directionally\", with `moveFocus{Up|Down|Left|Right}`.\r\n\r\nFor example:\r\n```json\r\n            { \"keys\": [\"alt+left\"], \"command\": \"moveFocusLeft\" },\r\n            { \"keys\": [\"alt+right\"], \"command\": \"moveFocusRight\" },\r\n            { \"keys\": [\"alt+up\"], \"command\": \"moveFocusUp\" },\r\n            { \"keys\": [\"alt+down\"], \"command\": \"moveFocusDown\" },\r\n```\r\n\r\nI suppose though there's also room for moving focus \"in order\" or \"in MRU order\" through panes as well. MRU order makes sense, but I'm not really sure how \"in order\" would work\r\n\r\nI'm going to leave this open because this makes sense as a potential feature, though I believe that #1910 will probably satisfy your needs."
      },
      {
        "user": "moswald",
        "created_at": "2019-09-24T17:56:36Z",
        "body": "Yeah, I'm using the current `moveFocus` bindings, but they're just not as natural as the `ctrl+tab` muscle memory I've built up using other apps. I usually switch between just two tabs so MRU would work great, but \"in order\" could be implemented by remembering the order in which tabs were created."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-10-07T23:31:26Z",
        "body": "Yanking the triage tag on this one, since it's a worthwhile thing we should probably have. \"Backlog\" status stays!"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-08-05T20:32:13Z",
        "body": "From @mfeiertag  in #7194\r\n\r\n> New panes get assigned increasing IDs.\r\n> `{ \"command\": { \"action\": \"moveFocus\", \"direction\": \"next\" }, \"keys\": \"ctrl+alt+tab\" }`\r\n> focuses the pane with the next ID\r\n> `{ \"command\": { \"action\": \"moveFocus\", \"direction\": \"prev\" }, \"keys\": \"ctrl+alt+shift+tab\" }`\r\n> focuses the pane with the previous ID\r\n> \r\n> IDs could be in order of creation or in order of last used.\r\n> Property \tNecessity \tType \tDefault \tDescription\r\n> `paneCycleMode` \tOptional \tString \t`created` \tDefines the order of panes when cycling. Possible values: `created` or `lastUsed`\r\n> \r\n> Related to #5803 and #5464\r\n> Similar to #4692\r\n> ### Example (pane in focus bold):\r\n> \r\n> Single Pane:\r\n> | **1** |\r\n> Duplicate pane:\r\n> | 1 | | **2** |\r\n> Pressing ctrl+alt+tab:\r\n> | **1** | | 2 |\r\n> Duplicate Pane 1, than pane 2:\r\n> | 1 | | 2 |\r\n> | 3 | | **4** |\r\n> Pressing ctrl+alt+tab would go to pane 1:\r\n> | **1** | | 2 |\r\n> | 3 | | 4 |\r\n> Pressing ctrl+alt+shift+tab would go back to pane 4:\r\n> | 1 | | 2 |\r\n> | 3 | | **4** |\r\n> Pressing ctrl+alt+shift+tab again would go to pane 3:\r\n> | 1 | | 2 |\r\n> | **3** | | 4 |\r\n\r\n"
      },
      {
        "user": "DHowett",
        "created_at": "2020-12-11T18:40:06Z",
        "body": "`moveFocus` with `direction: previous` will be how you do this."
      },
      {
        "user": "Rosefield",
        "created_at": "2021-07-29T21:08:31Z",
        "body": "This item seems incomplete, specifically the `next` portion is missing from the current implementation and the linked spec. To me the idea of having the \"in order\" style cycling is important (equivalent to just cyclically alt-tabbing between panes) that lets me get to any pane through one keybinding. The \"in order\" order can be fairly arbitrary (so long as it is consistent), but just iterating through the tree leaves from first-leaf to last-leaf seems reasonable. \r\n\r\nAlso, the current implementation of the `previous` movement seems tangential to the \"in order backwards\" version, in that it only cycles between two panes. e.g. if you have 3 panes, 1| 2 | 3, and you go from 2 to 3, pressing previous will go to 2, then pressing previous will go back to 3 again, with no way to go back to 1. This can be separately useful, but seems to be solving a different feature request.\r\n\r\nI would be happy to implement the \"in order\" next/previous version, but I'm not sure if that goes against the grand plan."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-08-03T14:02:17Z",
        "body": "You know, that's a fair point. We never did come up with an in-order traversal method - that was seemingly lost part of the discussion. I think we got so focused on the MRU previous element, the in-order bit was lost. \r\n\r\nI'll bring this up in team sync. See what other folks think. Thanks for bringing this up!"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-08-09T21:11:50Z",
        "body": "After discussion, yea, we totally forgot about the inOrder version of this. `\"moveFocus\": \"nextInOrder\"` and `\"moveFocus\": \"previousInOrder\"` seemed like they were likely candidates for the param to mean \"take me to ++paneId\" / \"take me to --paneId\".\r\n\r\nI'll move this to a new issue. Thanks for keeping us honest!"
      }
    ]
  },
  {
    "number": 2756,
    "title": "Highlighting (copying) from left edge of window with cursor in full screen fails",
    "created_at": "2019-09-14T05:00:12Z",
    "closed_at": "2019-09-21T14:43:09Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Area-TerminalControl",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2756",
    "body": "# Environment\r\n10.0.18362.0 Terminal: 0.4.2382.0\r\n\r\n# Steps to reproduce\r\n\r\nMaximize the terminal window.  Move cursor all the way to the left of the screen and start dragging to highlight the text on that row.\r\n\r\n# Expected behavior\r\n\r\nIt starts highlighting the row you are on (the text).  This is similar to putty, cmd, and powershell outside of terminal.\r\n\r\n# Actual behavior\r\n\r\nThe row you are on is not highlighted.  You must click on the first character of the row, not to the left of it.\r\n\r\nThis requires for more precise highlighting to avoid missing what you want to copy and is far slower.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2756/comments",
    "author": "mitchcapper",
    "comments": [
      {
        "user": "mcpiroman",
        "created_at": "2019-09-21T12:13:11Z",
        "body": "Does this happen also in non-maximized window and not happen if you disable padding?\r\nIf yes, then this is #1367"
      },
      {
        "user": "mitchcapper",
        "created_at": "2019-09-21T14:43:09Z",
        "body": "@mcpiroman indeed, good catch lets hope #1672 or a similar fix gets merged soon.  For now padding off works to solve:)  Closing as dupe."
      }
    ]
  },
  {
    "number": 2723,
    "title": "`_ReorderProfilesToMatchUserSettingsOrder` could almost certainly not be O(N^2)",
    "created_at": "2019-09-10T23:36:59Z",
    "closed_at": "2021-12-09T17:05:08Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Area-CodeHealth",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2723",
    "body": "Follow up to #2603 \r\n\r\nIn #2515, we added a function that reorders profiles to match the order in the user's `profiles.json`. Unfortunately, it runs in O(N^2), and it almost certainly can _not_. While we don't believe that the number of profiles is ever high enough that this n^2 loop is ever limiting, it could always be better.\r\n\r\nThis issue represents re-writing that method to be better.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2723/comments",
    "author": "zadjii-msft",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-09-16T17:09:14Z",
        "body": "Pulling this one out of Backlog and into v1.0 -- people _will_ have pathological case performance if they have a bunch of profiles :/"
      },
      {
        "user": "ZhaoMJ",
        "created_at": "2020-01-12T09:14:46Z",
        "body": "So I tried to optimize it to O(n) but the effect is minimal since even though it's O(n^2), the constant of swap sort is small and `_ReorderProfilesToMatchUserSettingsOrder` only costs <2% CPU usage on startup anyway. The actual bottleneck is `_FindMatchingProfile`, which takes >60% CPU usage and causes `_LayerOrCreateProfile` to be O(n^2) with a very large constant from `ShouldBeLayered`. \r\nAs per 8/2 Rule, I think `_ReorderProfilesToMatchUserSettingsOrder` is not worth any optimization, but if you still want an optimization, I'm of course willing to open a PR.\r\nIf we really want to optimize the loading of profiles, we have to change `_FindMatchingProfile` from iterating _profiles every time to an O(1) finding algorithm, probably using std::map as an indexer.\r\n\r\nFYI, I tried thousands of hidden profiles and it would take ~10s to start up. Anyway, I think the time of loading is acceptable now since no one actually wants such a crazy number of profiles.  "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-12-09T17:05:08Z",
        "body": "Oh look, that function doesn't exist anymore. Easy enough!"
      }
    ]
  },
  {
    "number": 2714,
    "title": "Powershell session ssh-keygen.exe not accepting text",
    "created_at": "2019-09-10T18:43:03Z",
    "closed_at": "2020-04-30T15:06:31Z",
    "labels": [
      "Help Wanted",
      "Product-Conpty",
      "Area-Input",
      "Area-VT",
      "Issue-Bug",
      "Needs-Attention",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2714",
    "body": "Open a powershell session, using the profile settings below.\r\nexecute the command ssh-keygen.exe \r\nno input will be accepted.\r\nCtrl-C is not accepted either.\r\n\r\n```\r\nOpenSSH enabled in Windows 10 features\r\n[System.Environment]::OSVersion.Version\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n10     0      18362  0               \r\n                                                                                                                                                                                       \r\n$PSVersionTable.PSVersion\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n5      1      18362  145                    \r\n                                                                                                                                                                           \r\nWindows Terminal (Preview)\r\nVersion: 0.4.2382.0\r\n```\r\n\r\n<details>\r\n\r\nProfile settings\r\n```\r\n{\r\n    \"globals\": {\r\n        \"alwaysShowTabs\": true,\r\n        \"defaultProfile\": \"{17abeef8-4b3b-426f-9281-2063504d6ab0}\",\r\n        \"initialCols\": 120,\r\n        \"initialRows\": 30,\r\n        \"keybindings\": [\r\n            {\r\n                \"command\": \"closeTab\",\r\n                \"keys\": [\r\n                    \"ctrl+w\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTab\",\r\n                \"keys\": [\r\n                    \"ctrl+t\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile0\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+1\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile1\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+2\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile2\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+3\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile3\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+4\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile4\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+5\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile5\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+6\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile6\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+7\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile7\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+8\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"newTabProfile8\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+9\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"nextTab\",\r\n                \"keys\": [\r\n                    \"ctrl+tab\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"openSettings\",\r\n                \"keys\": [\r\n                    \"ctrl+,\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"prevTab\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+tab\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"scrollDown\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+down\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"scrollDownPage\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+pgdn\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"scrollUp\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+up\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"scrollUpPage\",\r\n                \"keys\": [\r\n                    \"ctrl+shift+pgup\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab0\",\r\n                \"keys\": [\r\n                    \"alt+1\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab1\",\r\n                \"keys\": [\r\n                    \"alt+2\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab2\",\r\n                \"keys\": [\r\n                    \"alt+3\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab3\",\r\n                \"keys\": [\r\n                    \"alt+4\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab4\",\r\n                \"keys\": [\r\n                    \"alt+5\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab5\",\r\n                \"keys\": [\r\n                    \"alt+6\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab6\",\r\n                \"keys\": [\r\n                    \"alt+7\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab7\",\r\n                \"keys\": [\r\n                    \"alt+8\"\r\n                ]\r\n            },\r\n            {\r\n                \"command\": \"switchToTab8\",\r\n                \"keys\": [\r\n                    \"alt+9\"\r\n                ]\r\n            }\r\n        ],\r\n        \"requestedTheme\": \"system\",\r\n        \"showTabsInTitlebar\": true,\r\n        \"showTerminalTitleInTitlebar\": true,\r\n        \"wordDelimiters\": \" ./\\\\()\\\"'-:,.;<>~!@#$%^&*|+=[]{}~?\\u2502\"\r\n    },\r\n    \"profiles\": [\r\n                {\r\n                    \"acrylicOpacity\": 0.69999998807907104,\r\n                    \"background\": \"#000000\",\r\n                    \"closeOnExit\": true,\r\n                    \"colorScheme\": \"Campbell\",\r\n                    \"commandline\": \"powershell.exe\",\r\n                    \"cursorColor\": \"#FFFFFF\",\r\n                    \"cursorShape\": \"bar\",\r\n                    \"fontFace\": \"Consolas\",\r\n                    \"fontSize\": 10,\r\n                    \"guid\": \"{ef68be69-15f7-4713-86ae-49480c267c05}\",\r\n                    \"historySize\": 9001,\r\n                    \"icon\": \"ms-appx:///ProfileIcons/{61c54bbd-c2c6-5271-96e7-009a87ff44bf}.png\",\r\n                    \"name\": \"SSH Session\",\r\n                    \"padding\": \"0, 0, 0, 0\",\r\n                    \"snapOnInput\": true,\r\n                    \"startingDirectory\": \"E:/repo/PartnerRepo\",\r\n                    \"useAcrylic\": true\r\n                }\r\n],\r\n    \"schemes\": [\r\n        {\r\n            \"background\": \"#0C0C0C\",\r\n            \"black\": \"#0C0C0C\",\r\n            \"blue\": \"#0037DA\",\r\n            \"brightBlack\": \"#767676\",\r\n            \"brightBlue\": \"#3B78FF\",\r\n            \"brightCyan\": \"#61D6D6\",\r\n            \"brightGreen\": \"#16C60C\",\r\n            \"brightPurple\": \"#B4009E\",\r\n            \"brightRed\": \"#E74856\",\r\n            \"brightWhite\": \"#F2F2F2\",\r\n            \"brightYellow\": \"#F9F1A5\",\r\n            \"cyan\": \"#3A96DD\",\r\n            \"foreground\": \"#F2F2F2\",\r\n            \"green\": \"#13A10E\",\r\n            \"name\": \"Campbell\",\r\n            \"purple\": \"#881798\",\r\n            \"red\": \"#C50F1F\",\r\n            \"white\": \"#CCCCCC\",\r\n            \"yellow\": \"#C19C00\"\r\n        },\r\n        {\r\n            \"background\": \"#282C34\",\r\n            \"black\": \"#282C34\",\r\n            \"blue\": \"#61AFEF\",\r\n            \"brightBlack\": \"#5A6374\",\r\n            \"brightBlue\": \"#61AFEF\",\r\n            \"brightCyan\": \"#56B6C2\",\r\n            \"brightGreen\": \"#98C379\",\r\n            \"brightPurple\": \"#C678DD\",\r\n            \"brightRed\": \"#E06C75\",\r\n            \"brightWhite\": \"#DCDFE4\",\r\n            \"brightYellow\": \"#E5C07B\",\r\n            \"cyan\": \"#56B6C2\",\r\n            \"foreground\": \"#DCDFE4\",\r\n            \"green\": \"#98C379\",\r\n            \"name\": \"One Half Dark\",\r\n            \"purple\": \"#C678DD\",\r\n            \"red\": \"#E06C75\",\r\n            \"white\": \"#DCDFE4\",\r\n            \"yellow\": \"#E5C07B\"\r\n        },\r\n        {\r\n            \"background\": \"#FAFAFA\",\r\n            \"black\": \"#383A42\",\r\n            \"blue\": \"#0184BC\",\r\n            \"brightBlack\": \"#4F525D\",\r\n            \"brightBlue\": \"#61AFEF\",\r\n            \"brightCyan\": \"#56B5C1\",\r\n            \"brightGreen\": \"#98C379\",\r\n            \"brightPurple\": \"#C577DD\",\r\n            \"brightRed\": \"#DF6C75\",\r\n            \"brightWhite\": \"#FFFFFF\",\r\n            \"brightYellow\": \"#E4C07A\",\r\n            \"cyan\": \"#0997B3\",\r\n            \"foreground\": \"#383A42\",\r\n            \"green\": \"#50A14F\",\r\n            \"name\": \"One Half Light\",\r\n            \"purple\": \"#A626A4\",\r\n            \"red\": \"#E45649\",\r\n            \"white\": \"#FAFAFA\",\r\n            \"yellow\": \"#C18301\"\r\n        },\r\n        {\r\n            \"background\": \"#073642\",\r\n            \"black\": \"#073642\",\r\n            \"blue\": \"#268BD2\",\r\n            \"brightBlack\": \"#002B36\",\r\n            \"brightBlue\": \"#839496\",\r\n            \"brightCyan\": \"#93A1A1\",\r\n            \"brightGreen\": \"#586E75\",\r\n            \"brightPurple\": \"#6C71C4\",\r\n            \"brightRed\": \"#CB4B16\",\r\n            \"brightWhite\": \"#FDF6E3\",\r\n            \"brightYellow\": \"#657B83\",\r\n            \"cyan\": \"#2AA198\",\r\n            \"foreground\": \"#FDF6E3\",\r\n            \"green\": \"#859900\",\r\n            \"name\": \"Solarized Dark\",\r\n            \"purple\": \"#D33682\",\r\n            \"red\": \"#D30102\",\r\n            \"white\": \"#EEE8D5\",\r\n            \"yellow\": \"#B58900\"\r\n        },\r\n        {\r\n            \"background\": \"#FDF6E3\",\r\n            \"black\": \"#073642\",\r\n            \"blue\": \"#268BD2\",\r\n            \"brightBlack\": \"#002B36\",\r\n            \"brightBlue\": \"#839496\",\r\n            \"brightCyan\": \"#93A1A1\",\r\n            \"brightGreen\": \"#586E75\",\r\n            \"brightPurple\": \"#6C71C4\",\r\n            \"brightRed\": \"#CB4B16\",\r\n            \"brightWhite\": \"#FDF6E3\",\r\n            \"brightYellow\": \"#657B83\",\r\n            \"cyan\": \"#2AA198\",\r\n            \"foreground\": \"#073642\",\r\n            \"green\": \"#859900\",\r\n            \"name\": \"Solarized Light\",\r\n            \"purple\": \"#D33682\",\r\n            \"red\": \"#D30102\",\r\n            \"white\": \"#EEE8D5\",\r\n            \"yellow\": \"#B58900\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n</details>",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2714/comments",
    "author": "ebmarquez",
    "comments": [
      {
        "user": "dynahcatq",
        "created_at": "2020-04-30T03:48:06Z",
        "body": "@ebmarquez I've been trying to reproduce this issue without luck. Since this was opened in Sep 2019, do you mind checking to see if this issue still persist in current v0.11?"
      },
      {
        "user": "ebmarquez",
        "created_at": "2020-04-30T15:06:31Z",
        "body": "it appears to work correctly.  I'm not seeing this error any longer.  Please close the bug."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-04-30T16:05:25Z",
        "body": "Thank you for coming back around and closing it!"
      }
    ]
  },
  {
    "number": 2707,
    "title": "Opening a WSL tab really quickly upon sign in does not add Windows Paths to PATH variable",
    "created_at": "2019-09-09T22:51:34Z",
    "closed_at": "2019-11-04T20:54:29Z",
    "labels": [
      "Help Wanted",
      "Needs-Repro",
      "Issue-Bug",
      "Area-TerminalConnection",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Resolution-No-Repro"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2707",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nIf this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category \"Apps > Windows Terminal (Preview)\" and choose \"Share My Feedback\" after submission to get the link.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: 18972\r\n\r\nAny other software?: WSL installed\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n- Sign out of Windows\r\n- Sign back in\r\n- Start Terminal really quickly and open up a WSL instance\r\n- The WSL instance does not have Windows file paths connected to it (e.g: typing in `cmd.exe` fails)\r\n\r\n<!-- A description of how to trigger this bug. -->\r\n\r\n# Expected behavior\r\n\r\n- Even if you open up WSL quickly it should add Windows paths correctly. \r\n\r\n<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->\r\n\r\n# Actual behavior\r\n\r\n- Opening WSL quickly from Windows Terminal upon signing in does not add in Windows file paths correctly\r\n\r\n<!-- What's actually happening? -->\r\n\r\n# Additional notes\r\n\r\nWe (the WSL team) don't think this is a WSL specific issue since we use environment variables to add the Windows path. If you open up a CMD window and run `wsl` very quickly upon startup you still get the correct Windows paths added. This seems to be an issue with how Windows Terminal treats environment variables.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2707/comments",
    "author": "craigloewen-msft",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-09-09T22:54:26Z",
        "body": "Windows Terminal _doesn't_ treat environment variables in any particular way. Perhaps this is #1125?"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-11-04T20:54:29Z",
        "body": "Unless WSL is somehow loading the user's `PATH` from some source other than _the actual active environment_, there's nothing we can do about this. `PATH` is set by winlogon when you, you know, log on. 🤷‍♂ "
      }
    ]
  },
  {
    "number": 2353,
    "title": "Bug Report: Double Click Selection should span delimiter runs",
    "created_at": "2019-08-08T16:10:42Z",
    "closed_at": "2019-08-08T17:12:21Z",
    "labels": [
      "Help Wanted",
      "Area-Interaction",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2353",
    "body": "# Environment\r\n\r\nCaused by #1197.\r\nMore apparent in #2184.\r\n\r\n# Steps to reproduce\r\n\r\n1. ensure double click delimiters includes \" \"\r\n2. double click on empty line\r\n\r\n# Expected behavior\r\n\r\nSelection should encompass entire line.\r\n\r\n# Actual behavior\r\n\r\nSelection encompasses one cell.\r\n\r\n# Additional Info\r\n\r\nThis one's on me. Idk why I thought that double clicking a delimiter should only select the delimiter itself. That's not useful.\r\n\r\nInstead, the selection seems like it should expand to the first non-delimiter in either direction (exclusive range). For example,\r\n`O` is non-delimiter\r\n`X` is delimiter\r\nDouble clicking on any of the X would result in the following selection (denoted by [ and ])\r\n`OOOXXXXXXOOO`\r\n`OOO[XXXXXX]OOO`",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2353/comments",
    "author": "carlos-zamora",
    "comments": [
      {
        "user": "carlos-zamora",
        "created_at": "2019-08-08T16:12:27Z",
        "body": "Not sure if I'll be able to get to this one on time. I'm hoping that the PRs referenced above provide enough guidance to get started. Feel free to tackle this on (just be sure to mention that here)."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-08-08T17:12:21Z",
        "body": "This looks like #2206 :wink:"
      }
    ]
  },
  {
    "number": 2233,
    "title": "Reports that terminal can't launch applications marked [Run as Administrator]",
    "created_at": "2019-08-04T09:48:36Z",
    "closed_at": "2020-01-28T22:20:44Z",
    "labels": [
      "Resolution-By-Design",
      "Help Wanted",
      "Area-Interop",
      "Issue-Bug",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2233",
    "body": "# Description of the new feature/enhancement\r\n\r\n## Descriptor\r\nI had an issue where my Windows Terminal was consistently crashing and had a lot of frustration on my personal part) trying to self resolve the issue.\r\n\r\n## Problem\r\nLong story short, I had a the same issue as a few other people \"My terminal opens and then closed at launch with very little information\"\r\n\r\n## Solution\r\nIt was simple in the end - I have Powershell Core 7 preview installed and the \"pwsh.exe\" file was set to \"Run as Administrator\". I removed the \"Run as Administrator\" for the pwsh.exe and boom, problem instantly solved and the terminal now opens when i just run it.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nThe solution options I thought of were:\r\n\r\n1. Warn the user on install that their shells are in \"Run as administrator\" mode, and they will have to run the terminal as administrator to facilitate this setting.\r\n2. Warn the user that the administrator setting is active for the shell as above, and offer to change this setting.\r\n2. Allow the App to be permanently run as administrator, if this is relevant for the user (I don't see this as the optimal solution)\r\n\r\nI hope this is a relevant place to put this request. Thanks Microsoft team for creating and enhancing a product that has long needed some love and attention. With Windows Terminal, I see a springboard of future opportunities to make it a powerful tool! ",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2233/comments",
    "author": "braithair",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-08-05T04:47:41Z",
        "body": "(1) seems like a real bug -- we should be able to activate shells marked \"run as administrator.\" (3) will be #1032 "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-08-05T13:40:16Z",
        "body": "@miniksa Might also be interested, I think he had a collection of issues that this might be relevant for"
      },
      {
        "user": "braithair",
        "created_at": "2019-08-08T14:44:53Z",
        "body": "Thanks for your awesome work @DHowett -- True Hero dude!\r\n"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-28T22:20:44Z",
        "body": "Unfortunately, this is just going to have to be by design. We can't force the OS to launch an application at a privilege level higher than us, and this'll need some treatment similar to #1032. With the recent `closeOnExit` changes, you will at least get an error message instead of a terminal that instantly tastes clay."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-28T22:20:48Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 2210,
    "title": "Binding Ctrl-C to \"copy\" prevents using Ctrl-C for cancelling a command",
    "created_at": "2019-08-03T08:13:42Z",
    "closed_at": "2019-08-13T13:26:38Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Area-Input",
      "Issue-Bug",
      "Area-Settings",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2210",
    "body": "# Description of the new feature/enhancement\r\n\r\nRight now when you add the following to your keybindings:\r\n\r\n```\r\n{\r\n                \"command\" : \"copy\",\r\n                \"keys\" : \r\n                [\r\n                    \"ctrl+c\"\r\n                ]\r\n            },\r\n```\r\n\r\nIt prevents Ctrl-C from terminating processes, even when there's no current text selection.\r\n\r\nIf I remove the keybinding (or change it to \"ctrl+shift+c\"), then I get my Ctrl-C for terminating processes back, but lose the ability to copy with Ctrl-C when text is selected.\r\n\r\nCompare this with the current command prompt, where pressing Ctrl-C when no text is selected cancels/terminates whatever process is running, while pressing Ctrl-C with text selected copies the text.\r\n\r\nMy guess is that keybindings probably need to have an extra additional option for \"this keybinding is only active while text is selected\".",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2210/comments",
    "author": "hach-que",
    "comments": [
      {
        "user": "Luuk34",
        "created_at": "2019-08-03T10:29:12Z",
        "body": "This is fixed in 0.3, \r\n\"copy\" is now bound to \"ctrl+shift+c\" \r\n(see #2014, # 2014, #1093, and possibly others...)"
      },
      {
        "user": "hach-que",
        "created_at": "2019-08-03T10:42:14Z",
        "body": "I don't want to use Ctrl-Shift-C for copy; I'd like to use Ctrl-C for copy when I have text selected, as I can in both the native Windows terminal and ConEmu (as well as Ctrl-C being \"copy\" in every other Windows application)."
      },
      {
        "user": "mehmetilker",
        "created_at": "2019-08-03T15:46:51Z",
        "body": "ctrl+shift+c still does not work.\r\n\r\nCtrl+c is a standard is another thing... And one of the most important thing we can expect from shell environment. There should be a way to extract info...\r\n\r\nVersion: 0.3.2142.0\r\n"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-08-05T19:51:08Z",
        "body": "The copy key handler should be returning `false` if there was no active selection."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-08-13T13:26:38Z",
        "body": "Oh hey, #2285 is totally a dupe of this issue, but that thread has a bit more details in it, so I'm gonna close this one as a dupe of that one."
      }
    ]
  },
  {
    "number": 2119,
    "title": "Add some tests for invalid GUIDs in JSON",
    "created_at": "2019-07-26T16:13:45Z",
    "closed_at": "2024-04-09T20:14:18Z",
    "labels": [
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-CodeHealth",
      "In-PR"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2119",
    "body": "> \r\n> \r\n> Should we add tests for the following?\r\n> \r\n>     * [ ]  GUID in different GUID format\r\n> \r\n>     * [ ]  completely invalid GUID (i.e.: guid = )\r\n> \r\n>     * [ ]  GUID with letters in caps\r\n> \r\n> \r\n> Or would the first two just be examples of invalid settings values anyways so there's no point?\r\n\r\nFrom @carlos-zamora in #2117 ",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2119/comments",
    "author": "zadjii-msft",
    "comments": [
      {
        "user": "marcelwgn",
        "created_at": "2024-04-07T16:23:29Z",
        "body": "I would like to take my shot at this"
      },
      {
        "user": "DHowett",
        "created_at": "2024-04-08T16:37:07Z",
        "body": "Go for it!"
      }
    ]
  },
  {
    "number": 2075,
    "title": "Unexpected debug logs when typing in a conhost WSL shell",
    "created_at": "2019-07-24T11:54:07Z",
    "closed_at": "2019-08-06T17:24:01Z",
    "labels": [
      "Product-Conhost",
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Area-Input",
      "Issue-Bug"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2075",
    "body": "# Environment\r\n\r\nWindows build number: Version 10.0.18362.175\r\nWindows Terminal version (if applicable): Built locally from commit dca0ffe6dd0f76ca7997807424a2c08684e07751\r\n\r\n# Steps to reproduce\r\n\r\n1. Start conhost (Host.exe) from within the Visual Studio debugger.\r\n2. From the cmd prompt, open a WSL bash shell.\r\n3. Begin typing something on the command line.\r\n4. Watch the Output/Debug window in Visual Studio.\r\n5. Note the constant stream of debug messages being generated as you type.\r\n\r\n# Expected behavior\r\n\r\nI wouldn't expect to see much of anything in the debug output unless there was a genuine error condition.\r\n\r\n# Actual behavior\r\n\r\nIt seems that for every key press I get a pair of debug messages similar to this:\r\n\r\n    ...\\terminal\\src\\host\\directio.cpp(317)\\OpenConsole.exe!00007FF764908C40: (caller: 00007FF76494E601) ReturnHr(19) tid(2c6c) D0030001\r\n    ...\\terminal\\src\\host\\directio.cpp(387)\\OpenConsole.exe!00007FF764908D00: (caller: 00007FF76494E606) ReturnHr(20) tid(2c6c) D0030001\r\n\r\nAs far as I can make out, the issue is that `_DoGetConsoleInput` method can successfully return either a `STATUS_SUCCESS` or a `CONSOLE_STATUS_WAIT`, but the latter is considered an error by the `RETURN_NTSTATUS` macro, so it's logged in the debug output.\r\n\r\nI guess it's possible that's intentional, but I suspect it's more likely an oversight. If it's an expected outcome, I wouldn't think you'd want to keep flooding the logs with those messages. It makes it difficult to spot any real errors, and it's probably not helping performance.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2075/comments",
    "author": "j4james",
    "comments": [
      {
        "user": "miniksa",
        "created_at": "2019-08-01T22:27:47Z",
        "body": "Yes, that's an oversight. It should be using either the _EXPECTED version of the macros so it doesn't report or somehow skipping the macro for those scenarios as the debug message is not useful."
      }
    ]
  },
  {
    "number": 2069,
    "title": "Remove v141 from vsconfig",
    "created_at": "2019-07-23T12:24:40Z",
    "closed_at": "2019-07-24T16:57:14Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Product-Meta",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-CodeHealth"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2069",
    "body": "As we have moved to v142, we can remove v141 from vsconfig. If it is fixed, Visual Studio will not say that v141 is required.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2069/comments",
    "author": "overridelim",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-23T16:03:30Z",
        "body": "@fcharlie is incidentally doing this as part of #2065 "
      }
    ]
  },
  {
    "number": 2055,
    "title": "touch keyboard doesn't auto-trigger",
    "created_at": "2019-07-22T03:48:30Z",
    "closed_at": "2020-01-23T22:01:24Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Area-Input",
      "Area-UserInterface",
      "Area-TerminalControl",
      "Product-Terminal",
      "Issue-Task"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2055",
    "body": "When using a touch device (such as a Surface Pro 4) in tablet mode, I expect the touch keyboard  to be presented when  you tap on the input area of the terminal, however it does not. it is the same behavior with PS, cmd, wsl. the cursor appears and waits for input but no keyboard.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2055/comments",
    "author": "LordObsidian01",
    "comments": [
      {
        "user": "miniksa",
        "created_at": "2019-07-23T01:01:07Z",
        "body": "I am relatively sure that #1919 will resolve this. I think touch and pen input is activated via a TSF context. If we have a TSF context, I think it will show the keyboard."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-23T22:01:21Z",
        "body": "Moving discussion to /dup #3639 "
      },
      {
        "user": "ghost",
        "created_at": "2020-01-23T22:01:23Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 1971,
    "title": "Ctrl+W doesn't terminate shells properly (so they can't do teardown and cleanup things)",
    "created_at": "2019-07-14T23:02:53Z",
    "closed_at": "2020-12-17T17:24:51Z",
    "labels": [
      "Help Wanted",
      "Area-Interop",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1971",
    "body": "# Environment\r\n\r\nWindows build number: Microsoft Windows [Version 10.0.18917.1000]\r\nWindows Terminal version (if applicable): 0.2.1831.0\r\n\r\n# Steps to reproduce\r\n\r\nExit a mingw bash shell using a keyboard shortcut to close the tab\r\n\r\n# Expected behavior\r\n\r\n`exit` is sent to the shell, process is terminated, if closing a running process the user is warned\r\n\r\n# Actual behavior\r\n\r\nTerminal is detached and not killed",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1971/comments",
    "author": "axfelix",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-07-15T21:51:54Z",
        "body": "Maybe we need to consider having an `exitCommand` setting? Though, what would happen if you launched a process from bash where `exit` did _not_ exit the program? For example, `vim`. How would we determine when to send `exit` to the commandline application?"
      },
      {
        "user": "axfelix",
        "created_at": "2019-07-15T22:15:51Z",
        "body": "Most terminal apps I've used on other platforms will warn when pressing Ctrl+W if anything else is running, on the assumption that the user probably doesn't want to kill the shell after all, and if they really do then probably all bets are off (you could send Ctrl+C then exit but that's a much less predictable use case anyway). "
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-15T22:16:15Z",
        "body": "This is absolutely a bug, we shouldn't go and add a new \"command to send on exit\". That's probably not a winning strategy.\r\n\r\nWe constrain our shells into job objects, so they _should_ absolutely be getting terminated when the tab is closed."
      },
      {
        "user": "wuss912",
        "created_at": "2019-10-25T20:57:22Z",
        "body": "CTRL + W is also used in a number of curses based apps... need a way to disable it as a kill switch so it can pass through instead"
      },
      {
        "user": "axfelix",
        "created_at": "2019-10-25T21:06:15Z",
        "body": "yup, that's why Mac has separation between Ctrl and Cmd, and Linux terminals use Ctrl+Shift for any terminal window shortcuts so that Ctrl shortcuts can be sent directly to the term. Not sure if you want to adopt that convention here too."
      },
      {
        "user": "tats-u",
        "created_at": "2019-10-29T01:46:30Z",
        "body": "Ctrl+Shift+W must be used to close the terminal instead.\r\n\r\nCtrl + W -> Split, Toggle, or something else panes (with alphabetic keys) in Vim, or Cut selected text or Write current file (with Ctrl +X) in Emacs\r\nCtrl + C -> Quit current application\r\nCtrl + V -> Start selecting text in Vim or PageDown in Emacs"
      },
      {
        "user": "shtirlic",
        "created_at": "2020-01-29T13:42:37Z",
        "body": "+1 to `exitCommand `\r\nI use terminal with docker desktop, running as default ENV for development, every new tab started with command like `docker start -ti dev_env zsh`, so when I close the tab, I would like to send `exit 0` to the zsh process, and then tab will be closed since exit code is 0."
      },
      {
        "user": "shtirlic",
        "created_at": "2020-03-18T18:32:52Z",
        "body": "Also update I can autoclose background zsh process with setting TMOUT env for idle timeout as workaround but it's not good because when you leave tabs open it's closes after  TMOUT time, since there is no SIGALRM handling."
      },
      {
        "user": "fprimex",
        "created_at": "2020-12-10T04:58:21Z",
        "body": "I was editing in vim and using `:vert sp` when I discovered this behavior trying to change between splits. There should be an option or default behavior to not close the window with Ctrl+W. On non-mac systems, as @tats-u mentioned, ctrl+shift+w is the keyboard shortcut for window closing.\r\n\r\nI feel like this is perhaps a separate issue from not cleaning up the shells. If that's the case I can open a new issue."
      },
      {
        "user": "DHowett",
        "created_at": "2020-12-10T05:17:14Z",
        "body": "Hey @fprimex! Thanks for sticking with us since version 0.2! We actually changed the default for all new users to have `closePane` bound to `ctrl+shift+w` back in v0.3, in July 2019.\r\n\r\nIt might be a good time to refresh your settings file! Back up the bindings and profiles you care about, delete the file, and let Terminal make a new one. Things have changed _a lot_ since the default was `ctrl+w` for that action. :smile: "
      },
      {
        "user": "fprimex",
        "created_at": "2020-12-10T05:24:58Z",
        "body": "Hmm. This is a fresh install from the app store on a recently new-to-me machine that I only got in the past month. All I have changes are the prev & next tab bindings. I will review everything & see if I went wrong somewhere doing the install."
      },
      {
        "user": "fprimex",
        "created_at": "2020-12-10T05:33:18Z",
        "body": "Alrighty, seems fine. Not sure where I went wrong. Maybe I managed to fat finger across ctrl and shift twice earlier lol. Thanks!"
      },
      {
        "user": "axfelix",
        "created_at": "2020-12-17T17:24:22Z",
        "body": "This seems to be working now -- I think I'll close this issue. Thanks!"
      }
    ]
  },
  {
    "number": 1844,
    "title": "Profile::Set...(std::wstring param) not using std::move",
    "created_at": "2019-07-05T18:36:29Z",
    "closed_at": "2019-08-06T18:33:33Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-CodeHealth"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1844",
    "body": "<!-- \r\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\nLet me start by saying I did not read the whole source so I might have missed important details.\r\n\r\nI was looking at the source code to understand how you're handling the `commandline` setting and saw that many methods in the `Profile` class do not move the instance of the `std::wstring` received and instead create a copy. \r\n\r\nAlso, why do you mark the methods `noexcept` when some strings might not be small enough to allow SSO? (e.g. a long command line)\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n```\r\nvoid Profile::SetCommandline(std::wstring cmdline) noexcept\r\n{\r\n    _commandline = std::move(cmdline);\r\n}\r\n\r\n```\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1844/comments",
    "author": "yves-dolce",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-07-08T13:24:28Z",
        "body": "I'm sure that no one really thought too hard about it - seems like that would work to me. \r\n\r\nI'm not sure I know why they're marked noexcept. I bet that we assumed that all the setters in `Profile` were just simple setters that couldn't possibly throw."
      },
      {
        "user": "yves-dolce",
        "created_at": "2019-07-08T18:00:30Z",
        "body": "If I'm confident you'll take the PR, I can spend time forking and submitting a PR. Just tell me."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-08T21:36:20Z",
        "body": "We would definitely take any PR that makes our code better. Thanks :smile:"
      },
      {
        "user": "yves-dolce",
        "created_at": "2019-07-09T22:36:56Z",
        "body": "OK. So I'm ready to submit it but when I follow the README.MD and call testcon, it ends with:\r\n\r\n```\r\nSummary of TAEF Warnings:\r\n    Warning: TAEF: The test file \"......\\terminal.fork\\bin\\x64\\Debug\\ConHost.Api.Tests.dll\" does not exist.\r\n    Warning: TAEF: The test file \"file ......\\terminal.fork\\bin\\x64\\Debug\\ConHost.Resize.Tests.dll\" does not exist.\r\n    Warning: TAEF: The test file \"file ......\\terminal.fork\\bin\\x64\\Debug\\ConHost.CJK.Tests.dll\" does not exist.\r\n\r\nSummary of Non-passing Tests:\r\n    ClipboardTests::CanConvertCharsOutsideKeyboardLayout [Failed]\r\n\r\nSummary: Total=1054, Passed=1053, Failed=1, Blocked=0, Not Run=0, Skipped=0\r\n```\r\nIs this a known issue of the UT?"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-09T23:02:02Z",
        "body": "I believe so. The UTs might not work if your system codepage is not 1252 :smile:"
      },
      {
        "user": "yves-dolce",
        "created_at": "2019-07-10T00:07:23Z",
        "body": "Just submitted my first ever Open Source PR  #1899 ..."
      }
    ]
  },
  {
    "number": 1686,
    "title": "Feature Request - F11 for Fullscreen Mode",
    "created_at": "2019-06-27T22:51:34Z",
    "closed_at": "2019-06-27T22:53:04Z",
    "labels": [
      "Resolution-Duplicate",
      "Issue-Feature",
      "Help Wanted",
      "Area-Interaction",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1686",
    "body": "# For productive workflow \r\nMost of programmers have lots of screens and I personally use it thanks to virtual desktop spaces<br>WIN + TAB\r\nI know this is not critical but having the Fullscreen mode option will be apreciated, just for making lots of instances in every virtual desktop space or screen.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1686/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-06-27T22:53:04Z",
        "body": "#531 please make sure you search before suggesting!"
      }
    ]
  },
  {
    "number": 1634,
    "title": "Bug Report: clipboard bugs with some unicode characters or emoji",
    "created_at": "2019-06-26T09:16:55Z",
    "closed_at": "2020-01-28T22:27:10Z",
    "labels": [
      "Help Wanted",
      "Area-Interaction",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix",
      "Resolution-No-Repro",
      "Priority-2"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1634",
    "body": "<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number:  10.0.18362.175\r\nWindows Terminal version (if applicable): 04e808fd0a5e60821af02a6dcc284e816521abf9 [04e808f]\r\n```\r\n\r\n# Steps to reproduce\r\n1. Using Windows File Explorer, create a file with filename \"🀀🀁🀂🀃🀄🀅🀆🀇🀈🀉🀊🀋🀌🀍🀎🀏.docx\" under a directory (e.g. D:\\folder).\r\n2. Launch Windows Terminal and run \"cmd.exe\" or \"wsl.exe\" command.\r\n3. Change directory to the folder where the file you created locates, and type \"dir\" or \"ll\" command.\r\n4. Check if the filename shows on the list correctly.  \r\n5. Try to select and copy the filename from the Windows Terminal.\r\n6. Paste the filename you copied in Notepad.exe and check if it is \"🀀🀁🀂🀃🀄🀅🀆🀇🀈🀉🀊🀋🀌🀍🀎🀏.docx\"\r\n\r\n\r\n# Expected behavior\r\nExpect to see the filename 🀀🀁🀂🀃🀄🀅🀆🀇🀈🀉🀊🀋🀌🀍🀎🀏.docx correctly displays itself with font 'Segoe UI Emoji' or 'Segoe UI Symbol' after type \"dir\" or \"ll\" command, and which should be able to be selected and copied correctly.\r\n\r\n# Actual behavior\r\nThe filename will display as something like  🀀����������������docx.\r\nYou won't get 🀀🀁🀂🀃🀄🀅🀆🀇🀈🀉🀊🀋🀌🀍🀎🀏.docx in your clipboard after you try to copy it from the Windows Terminal.\r\n\r\nUnder a wsl.exe process in Windows Terminal, the app might crash when you try to select and copy it from the list given by the \"ll\" command.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1634/comments",
    "author": "zhwghl",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-06-26T17:36:12Z",
        "body": "@carlos-zamora we may have an issue copying these characters :smile:"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-01-28T22:27:10Z",
        "body": "I can't reproduce this any longer. Please let me know if it's still an issue."
      }
    ]
  },
  {
    "number": 1437,
    "title": "Feature Request: Option to open new tabs in the same directory as the current tab",
    "created_at": "2019-06-22T20:43:34Z",
    "closed_at": "2019-06-27T21:35:11Z",
    "labels": [
      "Issue-Feature",
      "Resolution-Won't-Fix",
      "Help Wanted",
      "Area-Interaction",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1437",
    "body": "# Summary of the new feature/enhancement\r\n\r\nVery often when I'm working on a project, I want to open multiple tabs in the same directory. For example, for a web React project, I might want one tab for `npm start`, another for `npm test --watch`, and probably keep another around for various console commands I want to run (like `git`). It'd be very convenient to `cd` into my project directory and then just hit Ctrl-T a few times to open up more tabs in that project directory. \r\n\r\nInstead, each tab current seems to be opened in the normal \"startingDirectory\", which is `%USERPROFILE%` by default, so you have to `cd` into the desired working directory for every new tab.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1437/comments",
    "author": "dallonf",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-06-24T22:36:07Z",
        "body": "This is a \"hard problem\".. Technically, Terminal can't know the working directory of the process hosted inside it. This will be easier with #1131, but still \"hard\" for shells that don't actually _set_ the working directory. PowerShell, for example, doesn't set the working directory!"
      },
      {
        "user": "Jaykul",
        "created_at": "2019-06-26T15:25:59Z",
        "body": "Yeah, I always set the working directory in my PowerShell prompt function, because I can't understand why it doesn't do that on it's own ...\r\n\r\nBut certainly it's tricky or impossible when some tabs are going to be purely remote (e.g. [azshell](/yangl900/azshell)). \r\n\r\nMaybe a solution would be to have a command line that could be run to start a new tab, and which would therefore know which directory it was running in?"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-06-27T21:35:11Z",
        "body": "On account of this one isn't possible in the general sense (for all types of connections, and all types of applications), I'm going to close it out. Sorry."
      },
      {
        "user": "jarrodek",
        "created_at": "2019-08-06T02:09:06Z",
        "body": "This is disappointing.  As a person with Linux background staring a new tab in a directory of previously selected tab is a normal thing. When working on a project I often need 2-3 tabs running stuff from the project. For a developer UX I would reconsider how to incorporate this behavior. \r\nI am trying to switch from Ubuntu to Windows for some time now and the only blocker left is usable console which is at leas as good as Bash. I don't feel that current release is as close."
      },
      {
        "user": "FXschwartz",
        "created_at": "2019-08-20T19:29:12Z",
        "body": "Same as @jarrodek I'm coming from a Linux background trying to make the 100% switch to Windows.\r\n\r\nReally the only thing that was keeping me from it was the console. This new console is so far incredible and makes me super excited for the future of developing on Windows.\r\n\r\nBeing able to \r\n1. Open a console\r\n2. Go to the working project directory\r\n3. Duplicate tab (with directory path) multiple times\r\n\r\nis something I do multiple times daily.\r\n\r\nObviously, not a deal-breaker but would be absolutely incredible to have."
      },
      {
        "user": "dallonf",
        "created_at": "2019-08-20T22:18:34Z",
        "body": "What are some ways this could work in a narrow use case? I'm personally fine if I can't duplicate an ssh tab or something like that, but for the common case of having a cmd/PowerShell/WSL terminal open and just wanting another one, it'd be very useful. "
      },
      {
        "user": "davidhewitt",
        "created_at": "2019-10-04T11:35:59Z",
        "body": "Also coming from a linux background, it's very helpful to be able to quickly open console tabs in the same directory. (It's disruptive to thinking to have to `cd` to some folder far from the terminal default when you want to briefly run a new command while some other long-lived command is running in your existing terminal.)\r\n\r\nI understand it can't work in all cases, but I'd love to contribute a PR where the existing `ctrl+shift+d` shortcut can preserve the working directory in cases where Terminal can detect the working directory.\r\n\r\nOnly blocker to me submitting that PR is it doesn't seem obvious to me how to inspect the current working directory of a child process using the Windows APIs (equivalent of Linux's `/proc/<PID>/cwd`)! If anyone is able to suggest a method to me for that bit, I would happily do the rest."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-10-04T13:25:35Z",
        "body": "I'd certainly review a PR that enabled this :)\r\n\r\nI remain worried that this will not work more often than it will work, but if we have a prototype, then it'll certainly be easier to make the call. \r\n\r\nUnfortunately, I don't really know how to get the working dir of another process myself. Presumably there must be a way... @DHowett-MSFT thoughts?"
      },
      {
        "user": "rigwild",
        "created_at": "2020-04-06T22:02:31Z",
        "body": "Any news on this ? This feature would be really useful."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2020-04-08T16:38:03Z",
        "body": "@rigwild I'd follow #3158 - that issue actually has a bit more detail on how such a feature might actually be possible to implement, so we've been using that one to track this feature."
      },
      {
        "user": "slon872",
        "created_at": "2021-02-01T12:48:57Z",
        "body": "Suppose I run `wt nt` command from Windows Terminal.\r\nChild wt process can determine current directory and environment.\r\nCan it communicate with parent wt to open new tab in it instead of launching new terminal?"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-02-01T12:53:03Z",
        "body": "@slon872 You might be interested in #4472, #5000, #8135, and #8898."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-05-18T17:41:02Z",
        "body": "@davidhiber Oh man, you'd be so interested in #8933. Feel free to continue the discussion in that thread. "
      },
      {
        "user": "michaldudak",
        "created_at": "2021-06-23T14:31:44Z",
        "body": "Could it be achieved by allowing to run custom code in the 'source' tab to find out the CWD in a way specific to the shell? This could be specified per profile, so each shell could have its own method of determining the working directory."
      },
      {
        "user": "leon-strong",
        "created_at": "2021-10-08T06:00:13Z",
        "body": "For those coming here after the fact this acheived pretty much what i wanted (ctrl-shift-d to work as expected): \r\n\r\nAdd this to your .bashrc\r\n\r\nexport PROMPT_COMMAND='printf \"\\e]9;9;%s\\e\\\\\" \"$(wslpath -m \"$PWD\")\"'\r\n"
      }
    ]
  },
  {
    "number": 1370,
    "title": "App-level keybindings are routed through the control, this causes some weirdness",
    "created_at": "2019-06-21T18:18:54Z",
    "closed_at": "2022-04-15T10:44:35Z",
    "labels": [
      "Help Wanted",
      "Area-UserInterface",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix",
      "Area-CodeHealth"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1370",
    "body": "<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: Microsoft Windows [Versión 10.0.18362.175]\r\nWindows Terminal version (if applicable): 0.0.10\r\n\r\nAny other software?\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nClick any tab, you'll notice that the console's blinking cursor will stop, then hit `Ctrl`+`Shift`+`1` to start another PowerShell console tab.\r\n<!-- A description of how to trigger this bug. -->\r\n\r\n# Expected behavior\r\nLaunch another PowerShell console tab\r\n\r\n<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->\r\n\r\n# Actual behavior\r\nIt doesn't do anything. Until you click the current console area (not tab) in order to see the blinking cursor again, then the hotkey will work.\r\n<!-- What's actually happening? -->\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1370/comments",
    "author": "vhanla",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-07-01T19:11:41Z",
        "body": "This frankly seems like #528 "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2022-04-15T10:44:35Z",
        "body": "This has been largely resolved in past releases. #6680 was tracking most of them."
      }
    ]
  },
  {
    "number": 1368,
    "title": "Adjust selection when resizing window",
    "created_at": "2019-06-21T14:07:30Z",
    "closed_at": "2020-05-13T18:04:18Z",
    "labels": [
      "Issue-Feature",
      "Help Wanted",
      "Area-TerminalControl",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1368",
    "body": "# Environment\r\n\r\ncommit 0846464\r\n\r\n# Steps to reproduce\r\n\r\n1. Start new terminal session\r\n2. Have some long line that fits viewport, e.g. write `a` 40 times\r\n3. Select text in that line\r\n4. Gradually shrink window horizontally (reduce width)\r\n\r\n# Expected behavior\r\n\r\nWhen selected text gets wrapped or moves downward (due to previous lines being wrapped), selection should follow.\r\n\r\n# Actual behavior\r\n\r\nSelection stays at one line and doesn't move.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1368/comments",
    "author": "mcpiroman",
    "comments": [
      {
        "user": "carlos-zamora",
        "created_at": "2020-05-12T23:54:12Z",
        "body": "At some point, I changed the behavior to be that selection clears on resize.\r\n\r\nI'm treating this issue now as a feature request for adjusting the selection when resizing."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-05-12T23:55:57Z",
        "body": "I'm not sure the value in keeping the selection during resize. Why should we do it?"
      },
      {
        "user": "carlos-zamora",
        "created_at": "2020-05-13T18:04:18Z",
        "body": "Actually, yeah. I just realized this issue was submitted almost a year ago haha. The issues with maintaining the selection on a resize is that (as noted by this issue) the selection anchors can't be guaranteed to point to the same text once text wraps in the buffer. It's a lot of extra work and not really worth it, considering that the user can easily just do another selection.\r\n\r\nI'll close this out, for now, until proven otherwise that there's value in keeping a selection after a resize."
      }
    ]
  },
  {
    "number": 1367,
    "title": "When using padding, starting selection from empty area continues previous selection",
    "created_at": "2019-06-21T13:42:43Z",
    "closed_at": "2020-01-28T22:58:42Z",
    "labels": [
      "Resolution-Duplicate",
      "Help Wanted",
      "Issue-Bug",
      "Area-TerminalControl",
      "Product-Terminal",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1367",
    "body": "# Environment\r\ncommit 08464648\r\n\r\n# Steps to reproduce\r\n\r\n1. Set some left padding eg. 20.\r\n2. Make some selection or just click one cell.\r\n3. In some other place try to make new selection that starts at first char in line. But don't point cursor directly on the first char, but instead little to the left, on the \"padded\" area.\r\n\r\n# Expected behavior\r\n\r\nSelection should start at first character in line.\r\n\r\n# Actual behavior\r\n\r\nPrevious selection is continued.\r\nThis is also the case for other padding sites (e.g. selecting line form right to left), but left is most noticable.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1367/comments",
    "author": "mcpiroman",
    "comments": [
      {
        "user": "mcpiroman",
        "created_at": "2019-06-21T13:55:13Z",
        "body": "Oh and of course, when there is not previous selection, the new one doesn't start"
      },
      {
        "user": "carlos-zamora",
        "created_at": "2020-01-28T22:56:52Z",
        "body": "/dup #4282"
      },
      {
        "user": "ghost",
        "created_at": "2020-01-28T22:58:41Z",
        "body": "Hi! We've identified this issue as a duplicate of another one that already exists on this Issue Tracker. This specific instance is being closed in favor of tracking the concern over on the referenced thread. Thanks for your report!"
      }
    ]
  },
  {
    "number": 1313,
    "title": "When side-by-side builds of Visual Studio are installed, build is picking the wrong one",
    "created_at": "2019-06-19T01:10:07Z",
    "closed_at": "2021-11-23T12:35:22Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Bug",
      "Area-Build",
      "Product-Meta",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1313",
    "body": "Unsure if this a build.exe issue or a Razzle issue. Based on experiments, Razzle appears to be okay.\r\n\r\n# Environment\r\nVisual Studio 16.2.0 Preview 4.0 [29018.107.d16.2stg] (installed to C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\)\r\nVisual Studio 16.1 (installed to C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\RTM\\)\r\n\r\n# Steps to reproduce\r\n\r\n1. From a _Developer Command Prompt For VS 2019 Preview_, run: \r\n\r\n```\r\n> .\\tools\\razzle.cmd\r\n> bcz\r\n```\r\n\r\n# Expected behavior\r\n\r\nBuild to succeed.\r\n\r\n# Actual behavior\r\n\r\nBuild fails with:\r\n\r\n```\r\nStarting build...\r\nMSBuild auto-detection: using msbuild version '16.200.19.31001' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.2\\MSBuild\\Current\\bin'.\r\nAll packages listed in packages.config are already installed.\r\nSkipping building appx...\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.1\\MSBuild\\Current\\Bin\\MSBuild.exe\" E:\\terminal\\OpenConsole.sln /t:Clean,Build /m /p:Configuration=Debug /p:Platform=x64 /p:AppxBundle=false\r\nMicrosoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 6/19/2019 10:58:30 AM.\r\n     1>Project \"E:\\terminal\\OpenConsole.sln\" on node 1 (Clean;Build target(s)).\r\n     1>ValidateSolutionConfiguration:\r\n         Building solution configuration \"Debug|x64\".\r\n     1>Project \"E:\\terminal\\OpenConsole.sln\" (1) is building \"E:\\terminal\\src\\cascadia\\TerminalApp\\TerminalApp.vcxproj.\r\n       metaproj\" (2) on node 1 (Clean target(s)).\r\n     2>Project \"E:\\terminal\\src\\cascadia\\TerminalApp\\TerminalApp.vcxproj.metaproj\" (2) is building \"E:\\terminal\\src\\cas\r\n       cadia\\TerminalSettings\\TerminalSettings.vcxproj\" (6) on node 2 (Clean target(s)).\r\n     6>E:\\terminal\\src\\cppwinrt.build.pre.props(45,3): error MSB4019: The imported project \"C:\\Program Files (x86)\\Micr\r\n       osoft Visual Studio\\2019\\16.1\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.Cpp.Default.props\" was not found. Confirm that\r\n       the path in the <Import> declaration is correct, and that the file exists on disk. [E:\\terminal\\src\\cascadia\\Ter\r\n       minalSettings\\TerminalSettings.vcxproj]\r\n```\r\n\r\nThe build is failing because its using/looking in the wrong location for these targets files. \r\n\r\nThe first line says that its picked up the correct MSBuild (\"16.2\"):\r\n\r\n```\r\nMSBuild auto-detection: using msbuild version '16.200.19.31001' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.2\\MSBuild\\Current\\bin'.\r\n```\r\n\r\nBut a few lines down, you can see that its picking up MSBuild from the 16.1 folder:\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.1\\MSBuild\\Current\\Bin\\MSBuild.exe\" E:\\terminal\\OpenConsole.sln /t:Clean,Build /m /p:Configuration=Debug /p:Platform=x64 /p:AppxBundle=false\r\n```",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1313/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "davkean",
        "created_at": "2019-06-19T01:15:07Z",
        "body": "Actually, I think that build.exe isn't respecting any of the Developer Command Prompt environment _at all_, if I run from 16.1:\r\n\r\n```\r\nStarting build...\r\nMSBuild auto-detection: using msbuild version '16.200.19.31001' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.2\\MSBuild\\Current\\bin'.\r\n```\r\n\r\nThis should say:\r\n\r\n```\r\nStarting build...\r\nMSBuild auto-detection: using msbuild version '16.200.19.31001' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\16.1\\MSBuild\\Current\\bin'.\r\n```"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-06-19T12:04:50Z",
        "body": "If you look at bcz.cmd, you'll see there are two steps here that are picking up different msbuild versions. There's a `nuget.exe` call, to restore dependencies, which is the one that's auto-detecting msbuild `16.200.19.31001`. Then, there's a second step that actually builds the solution, which uses the msbuild that was found by `vswhere` in `razzle.cmd`. \r\n\r\nPresumably, changes could be made to `razzle.cmd` that could enable it to _not_ lookup msbuild if it can tell it's already running in a developer command prompt."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-06-19T14:52:57Z",
        "body": "This is, unfortunately, an issue that seems to have always existed in NuGet. There isn't terribly much we can do about it without tying our hands unnecessarily. I know `nuget` supports `-msbuildversion`, but producing the right value to supply to that argument is challenging."
      },
      {
        "user": "davkean",
        "created_at": "2019-06-19T22:57:20Z",
        "body": "@DHowett-MSFT Can you help me dig into \"there isn't terrible much we can do about it  without tying our hands unnecessarily.\"? Lots of teams have solved this, so trying to understand that statement. "
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-10T00:41:12Z",
        "body": "@davkean I almost certainly spoke before thinking :smile: Sorry about that.\r\nI'm honestly not sure how best to solve this. I feel like we should not be depending too heavily on trying to detect the actual VS version in use and string-splitting that to pop it into `-msbuildversion` for NuGet's sake... especially since it doesn't support three-part versions (it fails for `-msbuildversion 15.9.11` but succeeds for `15.9`. I think it fails for `15.0`).\r\n\r\nI can't find an environment variable present in devcmd that specifies the minor version in use (`%VisualStudioVersion%` reports 15.0, but i think that fails as above)"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-11-22T18:38:13Z",
        "body": "You know, maybe our guidance should just be \"If you want to build the Terminal from 'Developer Command Prompt', just don't use `tools\\razzle\" but then I went ahead and just did the msbuild detection because that's easier\r\n"
      }
    ]
  },
  {
    "number": 1278,
    "title": "Crash on `exit` after previously closing a pane with non-leaf sibling",
    "created_at": "2019-06-15T13:22:19Z",
    "closed_at": "2019-06-29T01:17:32Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1278",
    "body": "<!--\r\nThis bug tracker is monitored by Windows Terminal development team and other technical folks.\r\n\r\n**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.\r\nInstead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.\r\n\r\nPlease use this form and describe your issue, concisely but precisely, with as much detail as possible.\r\n\r\n-->\r\n\r\n# Environment\r\n\r\n```none\r\nWindows build number: Microsoft Windows [Version 10.0.18362.175]\r\nWindows Terminal version (if applicable): master\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nOpen terminal and split the main pane vertically. Then split the left-hand pane horizontally. You should now have 3 panes, named A, B, C shown in the configuration and tree structure below:\r\n\r\n```none\r\n+---+---+   1: parent\r\n| A |   |   ├── 2: parent\r\n+---+ B |   |   ├── 3: A\r\n| C |   |   |   └── 4: C\r\n+---+---+   └── 5: B\r\n```\r\n\r\nNow `exit` pane B, then `exit` either of panes A or C.\r\n\r\n# Expected behavior\r\n\r\nThe second exited pane will close, leaving one pane open.\r\n\r\n# Actual behavior\r\n\r\nTerminal crashes.\r\n\r\n# More information\r\n\r\nI believe this is due to a bug in Pane::_CloseChild where close event handlers are not correctly revoked when the remaining child pane is non-leaf. Proposed fix: #1279 ",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1278/comments",
    "author": "peterdn",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-03T00:41:59Z",
        "body": "Hey, thanks for identifying and fixing this bug. This was just submitted to the store with the v0.2.1831.0 servicing release. It may take some time for the store to process it."
      }
    ]
  },
  {
    "number": 946,
    "title": "Share PCH files",
    "created_at": "2019-05-22T20:40:52Z",
    "closed_at": "2019-07-18T19:18:27Z",
    "labels": [
      "Resolution-Won't-Fix",
      "Help Wanted",
      "Area-Build",
      "Product-Meta",
      "Issue-Task"
    ],
    "url": "https://github.com/microsoft/terminal/issues/946",
    "body": "Update the build to share PCH files which will decrease the number of PCH's and thus decrease incremental build times.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/946/comments",
    "author": "bitcrazed",
    "comments": [
      {
        "user": "miniksa",
        "created_at": "2019-05-28T16:26:44Z",
        "body": "Also decrease the on-disk size (hopefully) as each PCH is MASSIVE."
      },
      {
        "user": "miniksa",
        "created_at": "2019-07-18T19:18:27Z",
        "body": "This wasn't any faster. Closing."
      }
    ]
  },
  {
    "number": 930,
    "title": "PowerShell Build Instructions/build module seem incomplete",
    "created_at": "2019-05-21T23:15:06Z",
    "closed_at": "2019-06-07T20:20:27Z",
    "labels": [
      "Help Wanted",
      "Issue-Docs",
      "Area-Build",
      "Product-Meta"
    ],
    "url": "https://github.com/microsoft/terminal/issues/930",
    "body": "I just installed 1903 so I wanted to take another pass at building this again. After getting the latest `master` (`git pull origin master && git submodule update --init --recursive`) I tried following the powershell build steps in the README.\r\n\r\nI can import `./tools/OpenConsole.psm1` just fine:\r\n\r\n```powershell\r\nC:\\Users\\Nathan\\projects\\Terminal [master ≡]\r\nλ  Import-Module .\\tools\\OpenConsole.psm1 -Verbose\r\nVERBOSE: Importing function 'Debug-OpenConsole'.\r\nVERBOSE: Importing function 'Invoke-OpenConsoleBuild'.\r\nVERBOSE: Importing function 'Invoke-OpenConsoleTests'.\r\nVERBOSE: Importing function 'Set-MsbuildDevEnvironment'.\r\nVERBOSE: Importing function 'Start-OpenConsole'.\r\n```\r\n\r\nHowever, `Set-MsbuildDevEnvironment` seems broken or assumes some specific folder structure:\r\n\r\n```powershell\r\nC:\\Users\\Nathan\\projects\\Terminal [master ≡]\r\nλ  Set-MsbuildDevEnvironment\r\npushd : The path 'C:\\..\\..' referred to an item that was outside the base 'C:'.\r\nAt C:\\Users\\Nathan\\projects\\Terminal\\tools\\OpenConsole.psm1:11 char:5\r\n+     pushd $path\r\n+     ~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Push-Location], PSArgumentException\r\n    + FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.PushLocationCom\r\n   mand\r\n\r\npushd : The path 'C:\\..\\..' referred to an item that was outside the base 'C:'.\r\nAt C:\\Users\\Nathan\\projects\\Terminal\\tools\\OpenConsole.psm1:11 char:5\r\n+     pushd $path\r\n+     ~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Push-Location], PSArgumentException\r\n    + FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.PushLocationCom\r\n   mand\r\n\r\n'vcvarsall.bat' is not recognized as an internal or external command,\r\noperable program or batch file.\r\nDev environment variables set\r\n```\r\n\r\nHowever, `Invoke-OpenConsoleBuild` seems to pass just fine (after forcing the platform to `x64`). Can these warnings be ignored? Is this a bug with the tool module?",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/930/comments",
    "author": "nlowe",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-22T17:11:56Z",
        "body": "Summoning @adiviness who wrote these"
      },
      {
        "user": "adiviness",
        "created_at": "2019-05-22T19:27:18Z",
        "body": "Yeah, setting the dev environment in the powershell module is a bit hacky. I have a branch somewhere that improves it by searching more directories but I've been told about a tool that does all that for you. I think it was called vswhere?"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-30T21:37:50Z",
        "body": "This is now the meta-issue tracking making `OpenConsole.psm1` better. Congrats!"
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-30T21:38:29Z",
        "body": "Also: use vswhere. :P"
      },
      {
        "user": "strega-nil",
        "created_at": "2019-05-30T22:02:53Z",
        "body": "It's a pretty easy thing to fix, I'll see if I can do something for it later today."
      }
    ]
  },
  {
    "number": 898,
    "title": "Documentation Issue - \"Build the Code\" section",
    "created_at": "2019-05-19T14:10:32Z",
    "closed_at": "2019-05-21T21:44:23Z",
    "labels": [
      "Help Wanted",
      "Issue-Docs",
      "Area-Build",
      "Product-Meta"
    ],
    "url": "https://github.com/microsoft/terminal/issues/898",
    "body": "`/README.md` needs to be updated to show correct path of build tools in `Building the Code` section. Following the current version of instruction the user will get\r\n```\r\n'bcz' is not recognized as an internal or external command, operable program or batch file.\r\n```\r\n\r\nSide note: after using `bcz` command from within `tools` folder it looks it is being added to the path for the current session.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/898/comments",
    "author": "coderitual",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-19T20:28:40Z",
        "body": "If you use `.\\tools\\razzle` from within CMD, `bcz` will be on your path.\r\nIf you use it from within PowerShell, don't do that. The `razzle` tool somewhat expects that it's been run from CMD.\r\nThere's a (somewhat underdocumented!) PowerShell module @adiviness maintains for building this code."
      },
      {
        "user": "coderitual",
        "created_at": "2019-05-19T20:44:18Z",
        "body": "Thanks @DHowett-MSFT ! Didn't know that. I have run both commands from within `git-bash`. What do you suggest to have this fixed? Maybe a simple comment that `cmd.exe` is recommended would work?\r\n\r\nDo you want me to push this PR further and edit according to the comment I received from @oising ?"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-20T15:12:53Z",
        "body": "Yea, I'd change the PR to simply mention that the commands should be called from `cmd.exe`."
      },
      {
        "user": "coderitual",
        "created_at": "2019-05-20T19:13:35Z",
        "body": "@zadjii-msft @DHowett-MSFT Done."
      }
    ]
  },
  {
    "number": 768,
    "title": "Investigate memory leak over time",
    "created_at": "2019-05-14T12:35:35Z",
    "closed_at": "2019-05-30T15:54:46Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-TerminalConnection",
      "Area-TerminalControl",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/768",
    "body": "From discussion in #745\r\n> I do not have very concrete data on it yet, but I also see a massive memory leak in WindowsTerminal.exe, even with only ever having just one tab open.\r\nI tend to see this memory consumption happen most aggressively with any sort of application that continuously updates the screen like mtr or htop (I'm using the version of OpenSSH bundled with Windows build 18362 to connect to a Linux machine to run these). A session that run for just under 40 minutes got up to over 1000 MB of memory usage according to Task Manager.\r\n\r\n> Another bit of information, all that memory seems to be released over time, that same session, now sitting at a shell over SSH calms down and now roughly 3 hours later, it is using an efficient and trim 8.5 MB of RAM according to Task Manager.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/768/comments",
    "author": "zadjii-msft",
    "comments": [
      {
        "user": "Robo210",
        "created_at": "2019-05-29T17:16:19Z",
        "body": "It looks like at least one stack that's doing constant allocations is\r\n\r\n|Commit   Stack | Size (MB)|\r\n|-- | --|\r\n[Root] | 3.609\r\nntdll.dll!RtlUserThreadStart | 3.609\r\nkernel32.dll!BaseThreadInitThunk | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::RenderThread::s_ThreadProc | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::Renderer::PaintFrame | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::Renderer::_PaintFrameForEngine | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::Renderer::_PaintBufferOutput | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::Renderer::_PaintBufferOutputHelper | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::DxEngine::PaintBufferLine | 3.609\r\nTerminalControl.dll!Microsoft::Console::Render::CustomTextLayout::_AnalyzeRuns | 3.609\r\n\\|-   TerminalControl.dll!Microsoft::Console::Render::CustomTextLayout::_AnalyzeFontFallback | 3.133\r\n\\|      DWrite.dll!DWriteFontFallback::MapCharacters | 3.133\r\n\\|      DWrite.dll!FontFallback::MapCharacters | 3.133\r\n\\|      \\|- DWrite.dll!MatchFamilyToText | 1.641\r\n\\|      \\|- DWrite.dll!GetFontFamily | 1.492\r\n\r\nThis came from 10 seconds of tracing while a progress bar was being printed to the console."
      },
      {
        "user": "Biswa96",
        "created_at": "2019-05-30T08:24:48Z",
        "body": "How did you find? "
      }
    ]
  },
  {
    "number": 738,
    "title": "better move focus to right if possible when removing focus, rather than to left",
    "created_at": "2019-05-13T13:49:10Z",
    "closed_at": "2019-06-04T12:38:35Z",
    "labels": [
      "Resolution-Fix-Committed",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/738",
    "body": "The more often used tabbed application, Chrome (as well as Edge), uses the strategy to move the focus to right when removing focus.\r\nThat is: a **b** c d => a **c** d, when b removed\r\n\r\nWhile, currently we: a **b** c d => **a** c d, when b removed",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/738/comments",
    "author": "bef178",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-13T14:50:59Z",
        "body": "Seems like a good and just fix to me.\r\n\r\nIf someone wanted to take a look at this, the code for controlling the tabs behavior is largely in `TerminalApp/App.cpp`"
      },
      {
        "user": "Summon528",
        "created_at": "2019-06-04T03:26:24Z",
        "body": "Shouldn't we close this one because of #767 ? "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-06-04T12:38:35Z",
        "body": "Yes we should, I guess the \"the\" in that PR broke github's auto-linking."
      }
    ]
  },
  {
    "number": 708,
    "title": "Incorrect tab behavior after using Ctrl+w",
    "created_at": "2019-05-11T17:11:27Z",
    "closed_at": "2019-05-14T13:14:24Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface"
    ],
    "url": "https://github.com/microsoft/terminal/issues/708",
    "body": "* Your Windows build number: \r\n  * Microsoft Windows [Version 10.0.18362.86]\r\n  * Did a `git pull master` before using VS2019 to deploy locally.\r\n\r\n\r\n* What you're doing and what's happening:\r\n  1. To start, have 4 tabs open.\r\n  2. Go to the 1st tab\r\n  3. Hit Ctrl + w to close it. Terminal behaves as expected and closes the tab\r\n  4. Both a and b below are where the bug shows up:\r\n    a. Hit Ctrl + w again. The new 2nd tab (originally the 3rd tab) closes instead\r\n    b. Hit Ctrl + Tab to cycle. Focus will change from the 1st tab to the 3rd tab (originally 4th) tab. 1st tab will also retain focused coloring.\r\n\r\n  Also: If you start with 3 tabs open and then close the first one with Ctrl + w, you're not able to use Ctrl + Tab to cycle to the next tab.\r\n\r\n  4a and 4b are not consecutive steps. They're different actions which can mess up after step 3\r\n\r\n* What's wrong / what should be happening instead:\r\n  For 4a: focused tab should close\r\n  For 4b: 2nd tab should become selected, not the 3rd.\r\n\r\nIf there's any more information you need, please let me know!",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/708/comments",
    "author": "sasmithjr",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-13T13:19:20Z",
        "body": "Oh lawd that looks messed up. Good catch.\r\n\r\nAnyone who's taking a look at this, I'd direct your attention to `src/cascadia/TerminalApp/App.cpp`. That manages the entire list of tabs, so it's probably where we're focusing tabs incorrectly."
      },
      {
        "user": "bef178",
        "created_at": "2019-05-13T13:20:17Z",
        "body": "This is even worse with mouse-click.\r\nRepo:\r\n1 open 4 tabs, say a, b, c and d\r\n2 activate a\r\n3 click a's close button, then b\r\n4 actual: tabview exists; all items in tabview is grayed; tab shows b's content and user can still operate on it"
      }
    ]
  },
  {
    "number": 627,
    "title": "Closing the last tab doesn't close the Terminal",
    "created_at": "2019-05-09T16:46:29Z",
    "closed_at": "2019-05-31T01:50:46Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/627",
    "body": "From #460:\r\n\r\n> Closing the terminal when the last tab is closed is also something we should be doing, but that might be a bit trickier of a PR. I think we're manually suppressing the close action on the last tab currently, but that could be replaced with just closing the app (somehow).\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/627/comments",
    "author": "zadjii-msft",
    "comments": [
      {
        "user": "mdtauk",
        "created_at": "2019-05-09T21:35:39Z",
        "body": "You could disable the tabs ability to close when it is the only tab, so to exit you must click on the close button on the window itself"
      },
      {
        "user": "tkmikan",
        "created_at": "2019-05-10T08:29:19Z",
        "body": "With `\"alwaysShowTabs\": true`, the terminal is closed after a middle/wheel click at the last tab, but it takes about 3-5 sec or more.\r\n(nothing happens when clicking the close button of the last tab).\r\n\r\n"
      },
      {
        "user": "bef178",
        "created_at": "2019-05-13T08:03:58Z",
        "body": "Do we settle what is the expected behavior?"
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-13T14:30:40Z",
        "body": "@mdtauk that seems like a good and reasonable _setting_, like preventing accidental closing with Ctrl+W. \r\n\r\n@tkmikan I believe the behavior you're seeing is that the terminal actually _crashes_ when you middle click the last tab. I believe that fix is #648, though that just prevents closing the last tab with middle click. \r\n\r\nShould closing the last tab with the tab's close button and Ctrl+W be enabled, we should also make sure it's possible to close the last tab with middle-click again."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-29T16:45:11Z",
        "body": "I believe this is done? Somebody fact-check me?"
      }
    ]
  },
  {
    "number": 573,
    "title": "shortcut \"alt-1\" \"alt-2\" \"alt-3\" should change active tab",
    "created_at": "2019-05-08T09:59:16Z",
    "closed_at": "2019-05-10T16:48:37Z",
    "labels": [
      "Issue-Feature",
      "Help Wanted",
      "Area-Interaction"
    ],
    "url": "https://github.com/microsoft/terminal/issues/573",
    "body": "Shortcut \"alt-1\" \"alt-2\" \"alt-3\" should change active tab.\r\nShortcut to switch tab really improve productivity and those keys are defaulted in Linux terminal.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/573/comments",
    "author": "bef178",
    "comments": [
      {
        "user": "coldiron",
        "created_at": "2019-05-08T10:44:01Z",
        "body": "> those keys are defaulted in Linux terminal\r\n\r\n\r\nThis strongly depends upon which terminal app you're using."
      },
      {
        "user": "bef178",
        "created_at": "2019-05-08T14:03:54Z",
        "body": "> What about Ctrl + Tab like cmder to switch between open tabs?\r\n\r\n<kbd>ctrl</kbd>-<kbd>tab</kbd> and <kbd>ctrl</kbd>-<kbd>shift</kbd>-<kbd>tab</kbd> is already there to iterate tabs. I need a better shortcut to activate a specific tab."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-08T16:13:20Z",
        "body": "Adding keybindings to go to a specific tab sounds like a swell idea. \r\n\r\nAnd we'll make them re-mappable, so if you don't like the defaults, you're free to change them!"
      },
      {
        "user": "miniksa",
        "created_at": "2019-05-09T21:26:31Z",
        "body": "We're mildly concerned about stealing more keys away before remapping is complete, but #537 should make this a non-issue when it's done."
      },
      {
        "user": "krokofant",
        "created_at": "2019-05-11T00:24:10Z",
        "body": "This makes a bell noise everytime I switch to a tab via alt+1, alt+2 etc."
      }
    ]
  },
  {
    "number": 507,
    "title": "On Build error xcopy on not english localized machines",
    "created_at": "2019-05-07T14:21:16Z",
    "closed_at": "2019-05-17T00:48:01Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-Build"
    ],
    "url": "https://github.com/microsoft/terminal/issues/507",
    "body": "On a non english localized machine the xcopy command lines in the file:\r\n\r\n**cppwinrt.build.post.props**\r\n\r\ngenerate an error while building.\r\n\r\nthe \"echo f\" in front of the 4 commands (look for xcopy) works only if the word \"file\" in your language begins also with an \"f\".\r\n\r\nIn germany it's a \"D\" for \"Datei\".",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/507/comments",
    "author": "Hardt-Coded",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-07T14:24:02Z",
        "body": "wait _really_\r\n\r\nThat seems insane to me, but that can be fixed. `echo f | xcopy` always seemed like a hack to me anyways."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-07T14:30:30Z",
        "body": "We should address this by removing manual `xcopy` steps :)"
      },
      {
        "user": "schuettecarsten",
        "created_at": "2019-05-13T22:04:36Z",
        "body": "> We should address this by removing manual `xcopy` steps :)\r\n\r\nOr use robocopy, which should have the same command syntax for all languages."
      }
    ]
  },
  {
    "number": 431,
    "title": "Default profile should be powershell, rather than cmd",
    "created_at": "2019-05-06T21:45:07Z",
    "closed_at": "2019-05-13T14:37:14Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug"
    ],
    "url": "https://github.com/microsoft/terminal/issues/431",
    "body": "@bitcrazed can hopefully back me up here, but `cmd` is frozen and not getting any more changes, and we generally want people to be using the latest Powershell release.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/431/comments",
    "author": "mikemaccana",
    "comments": [
      {
        "user": "miniksa",
        "created_at": "2019-05-06T21:47:06Z",
        "body": "ARGH. We meant to do that before pushing this. We were talking about this last week for exactly this reason."
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-05-09T04:08:29Z",
        "body": "We may also want to follow the Windows Shell option that dictates what shell lives in your `WIN+X` menu."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-09T13:31:59Z",
        "body": "@DHowett-MSFT if that's something we can query, let's please do that.\r\n\r\n*sponsored by the cmd squad*"
      },
      {
        "user": "mdtauk",
        "created_at": "2019-05-09T21:13:01Z",
        "body": "The Windows team should allow read only access to the user's chosen default, so the Terminal can respect that"
      },
      {
        "user": "binarycrusader",
        "created_at": "2019-05-09T21:41:41Z",
        "body": "The registry key set by taskbar settings is:\r\n\r\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\DontUsePowerShellOnWinX\r\n\r\nThe default is 0 to use powershell I believe.\r\n\r\nIs it ok to query that?\r\n\r\n@zadjii-msft @DHowett-MSFT "
      },
      {
        "user": "zadjii-msft",
        "created_at": "2019-05-13T14:37:14Z",
        "body": "This PR was successfully merged, so I'm closing this issue, and moving discussion of querying the user's default shell to #740"
      }
    ]
  },
  {
    "number": 398,
    "title": "Scrolling up in 'less' is very slow.",
    "created_at": "2019-03-27T17:32:13Z",
    "closed_at": "2019-05-25T04:00:19Z",
    "labels": [
      "Product-Conhost",
      "Help Wanted",
      "Needs-Repro",
      "Area-Performance",
      "Issue-Bug",
      "Needs-Author-Feedback",
      "No-Recent-Activity"
    ],
    "url": "https://github.com/microsoft/terminal/issues/398",
    "body": "> Please use this form and describe your issue, concisely but precisely, with as much detail as possible\r\n\r\n> * Your Windows build number:  (Type `ver` at a Windows Command Prompt)\r\n\r\nMicrosoft Windows [Version 10.0.17763.379]\r\n\r\n> * What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)\r\n\r\nIn less, scrolling down (f) is instantaneous, but scrolling up (u) is extremely slow.  For example, if I open `man man` and hold `f`, it takes about 1 second to scroll to the end, but if I hold `u`, it will take about 10 seconds to scroll back to the top.\r\n\r\nBehavior is similar if I run `less` on a remote system through SSH, although in that case scrolling up gives the appearance of being 'jerkier'. ",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/398/comments",
    "author": "henniss",
    "comments": [
      {
        "user": "miniksa",
        "created_at": "2019-03-27T19:54:46Z",
        "body": "I'm relatively certain this is a duplicate of #339. Can you (or someone) please check it with an insider build to see if it's resolved? "
      },
      {
        "user": "ghost",
        "created_at": "2019-05-22T03:00:21Z",
        "body": "This issue has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **4 days**. It will be closed if no further activity occurs **within 3 days of this comment**."
      }
    ]
  },
  {
    "number": 392,
    "title": "Export current schemes does not include all color information",
    "created_at": "2019-03-22T09:18:17Z",
    "closed_at": "2019-04-03T09:37:16Z",
    "labels": [
      "Product-Colortool",
      "Help Wanted"
    ],
    "url": "https://github.com/microsoft/terminal/issues/392",
    "body": "When exporting a scheme and reaplieing it after another scheme was applied, it will not result in the original colors.\r\n\r\n\r\n* Your Windows build number: Microsoft Windows [Version 10.0.17763.316]\r\n\r\n* What you're doing and what's happening:\r\n```\r\nColorTool.exe -o .\\Documents\\WindowsPowerShell\\programs\\colortool\\schemes\\powershell-default.ini\r\nColorTool.exe onehalfdark\r\nColorTool.exe powershell-default\r\n\r\n```\r\n\r\n* What's wrong / what should be happening instead:\r\noneHalfDark is changing the background color. when reaplieing the previous exported scheme the background color index is not restored.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/392/comments",
    "author": "LokiMidgard",
    "comments": [
      {
        "user": "LokiMidgard",
        "created_at": "2019-03-29T07:18:28Z",
        "body": "I think I could look into it and create a pull request.\r\n\r\nIs there a specific documentation to the used format of the ini file? Or can I just add more sections?"
      },
      {
        "user": "LokiMidgard",
        "created_at": "2019-03-29T16:35:50Z",
        "body": "I created a [pullrequest](#400 ) that adds support in persisting the color indexes."
      },
      {
        "user": "LokiMidgard",
        "created_at": "2019-04-03T09:37:16Z",
        "body": "should be resolved by #400"
      },
      {
        "user": "miniksa",
        "created_at": "2019-04-03T15:09:07Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 377,
    "title": "ColorTool switches --both and --xterm throw error",
    "created_at": "2019-02-25T23:29:54Z",
    "closed_at": "2019-05-18T02:41:18Z",
    "labels": [
      "Issue-Question",
      "Product-Colortool",
      "Help Wanted",
      "Area-Interaction",
      "Resolution-Answered"
    ],
    "url": "https://github.com/microsoft/terminal/issues/377",
    "body": "Microsoft Windows [Version 10.0.17763.346]\r\ncolortool v1.0.1810.02002\r\n\r\n* What I'm doing and what's happening: \r\nOccurs in both user and elevated command prompt\r\n`ColorTool.exe` and `/schemes/` directory are both in `C:\\WINDOWS\\system32`\r\n```\r\nC:\\WINDOWS\\system32>colortool campbell -b -x\r\nCould not find or load \"-x\"\r\n```\r\n```\r\nC:\\WINDOWS\\system32>colortool campbell -b\r\nCould not find or load \"-b\"\r\n```\r\n```\r\nC:\\WINDOWS\\system32>colortool campbell -x\r\nCould not find or load \"-x\"\r\n```\r\n```\r\nC:\\WINDOWS\\system32>colortool campbell --both\r\nCould not find or load \"--both\"\r\n```\r\n```\r\nC:\\WINDOWS\\system32>colortool campbell --xterm\r\nCould not find or load \"--xterm\"\r\n```\r\n* What's wrong / what should be happening instead:\r\nSwitches should not throw error and work",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/377/comments",
    "author": "ianmcl",
    "comments": [
      {
        "user": "Megasware128",
        "created_at": "2019-03-08T12:01:34Z",
        "body": "`colortool.exe [options] <schemename>`\r\nPlace options first, after that the scheme name ;)"
      }
    ]
  }
]