[
  {
    "number": 4608,
    "title": "Add Upscaling",
    "created_at": "2025-01-11T23:26:06Z",
    "closed_at": "2025-01-11T23:38:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4608",
    "body": "Can we add upscaling like dgvoodoo2 etc offers?\r\n\r\nSo that we can set a target resolution and choose between different scalers (lanczos, spline, bicubic etc)\r\n\r\nwith dgvoodoo2 you can then even set the ingame resolution to small to prevent small HUDs for games which dont scale the HUD with res, and the dgvoodoo resolution to \"desktop\", which makes the game show the HUD big like the small resolution, but the rest of the rendering is big resolution.\r\n\r\nSome older games also dont offer big resolutions and then you would be forced to play it in lower resolution.\r\n\r\nSo: Upscaling would be nice addition.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4608/comments",
    "author": "De-M-oN",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2025-01-11T23:37:59Z",
        "body": "Comes up every now and then, TL;DR no, getting that right would be exceptionally difficult and is way out of scope of the project.\r\n\r\nWe can't just take the rendered image and make it bigger, we'd need to make the application window bigger too. This alone would already break a million games without targeted workarounds as well as extremely good understanding of every little detail on window messages and relelvant GDI APIs (which we don't have) since games can reasonably assume that their 640x480 window is actually 640x480 and not 2880x2160 or something, but even if that worked, we'd also have to remap all mouse input etc as well.\r\n\r\nOn Linux, Gamescope is the way to go to run games at weird resolutions.\r\n\r\n> which makes the game show the HUD big like the small resolution, but the rest of the rendering is big resolution.\r\n\r\nThis is also not possible to do at all in a generic way, we cannot know when a game does \"normal\" rendering as opposed to drawing its UI or doing internal computations that *must* happen at a specific resolution to be correct, it all looks the same to us. You're looking at manually patching shaders etc for thousands of games if you don't want to limit this kind of functionality to the most basic of D3D8 / early D3D9 games."
      },
      {
        "user": "De-M-oN",
        "created_at": "2025-01-11T23:51:00Z",
        "body": "Probably D3D8 would be enough, D3D9 and higher mostly allow any resolution themself. Some older games arent smart enough to just pull the resolution list from gpu driver and offer these resolutions. So there is e.g. NFS 4 High Stakes which offers only 4:3 resolutions which makes no sense with a widescreen patched dll and exe.\r\n\r\nBut ok then I will use dgvoodoo 2 for these games, because dgvoodoo 2 can do it for any game."
      }
    ]
  },
  {
    "number": 4552,
    "title": "D3D8 backend",
    "created_at": "2024-12-25T02:37:08Z",
    "closed_at": "2024-12-25T14:13:08Z",
    "labels": [
      "question",
      "windows"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4552",
    "body": "why does DXVK's d3d8 require d3d9 to function ? Why isn't it like d8vk ? It worked fine without d3d9.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4552/comments",
    "author": "triatomic",
    "comments": [
      {
        "user": "Blisto91",
        "created_at": "2024-12-25T09:01:37Z",
        "body": "In dxvk d3d8 is implemented through the d3d9 parts since they have alot of similarities and so can share a lot of the same code. Same goes for d3d10 which is implemented through d3d11 in dxvk.\r\nBack in the d8vk times this was also the case, but for a time the d3d9 code was statically compiled in the d3d8 dll instead of dynamically linked via a external file. It might seem like a long time because there never was another stable release after 1.0, but bleeding edge code wise d8vk kept the two file separately through most of its life.\r\nThe reason for going back to dynamically linking again was that there were some games on Windows, when doing testing there, that didn't work properly with the statically linked d3d9 (I don't know the reason at hand). Since then it has just been kept as two files like it was originally."
      },
      {
        "user": "triatomic",
        "created_at": "2024-12-25T11:45:49Z",
        "body": "iam using global windows method (chaging d3d8 in windows dir) it works fine with d8vk; but with dxvk it requires both the original d3d8 and d3d9 changed which is not a optimal."
      },
      {
        "user": "Blisto91",
        "created_at": "2024-12-25T11:53:48Z",
        "body": "It might not be optimal but for the most common use case of dxvk of using all or nothing it works fine."
      },
      {
        "user": "triatomic",
        "created_at": "2024-12-25T14:05:11Z",
        "body": "would it be possible to compile dxvk d3d8 to be a single dll ?"
      },
      {
        "user": "K0bin",
        "created_at": "2024-12-25T14:12:47Z",
        "body": "> chaging d3d8 in windows dir\r\n\r\nThat is a terrible idea. Just drop d3d8.dll and d3d9.dll in the folder where the exe of your game sits and it should work fine.\r\n\r\n> would it be possible to compile dxvk d3d8 to be a single dll ?\r\n\r\nIt's possible but we're not gonna offer builds that do that. Windows is not really a supported platform for DXVK anyways."
      }
    ]
  },
  {
    "number": 4265,
    "title": "Change DLL override to Native",
    "created_at": "2024-09-15T10:51:00Z",
    "closed_at": "2024-09-15T12:37:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4265",
    "body": "Hi Folks,\r\n\r\ndo i have to perform a DLL override for:\r\n\r\n- d3d8\r\n- d3d9\r\n- d3d10core\r\n- d3d11\r\n- dxgi\r\n\r\nAs far as i remember i had to to this some years ago. I wonder why this is not mentioned in the Readme.md?\r\n\r\nGreetings,\r\nJ.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4265/comments",
    "author": "jotkah",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2024-09-15T10:59:12Z",
        "body": "Yes, it is necessary. I don't know why this was removed from the README, probably an oversight but we definitely used to mention it at *some* point."
      },
      {
        "user": "jotkah",
        "created_at": "2024-09-15T11:05:29Z",
        "body": "Thank you for your fast reply!"
      }
    ]
  },
  {
    "number": 4235,
    "title": "Is it ok to ask questions here? â€” Question about project scope",
    "created_at": "2024-09-04T12:26:55Z",
    "closed_at": "2024-09-04T14:07:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4235",
    "body": "Hello,\r\n\r\nI looked through this repo for suggestions on where to go for asking a general project question, but couldn't find a GitHub Q&A section or a link elsewhere. The only issue template was \"bug report\". Sorry if this is still the wrong place to ask. \r\n\r\nI was curious to know about the reasons/factors that decide which Direct3D versions to support? Time, energy, resources, etc. are a given, but I was thinking about those factors in relation to e.g. \"how different are the D3D versions to each other (e.g. version 8 vs. 7 or 6)?\", \"how much effort does it take to push downwards, i.e. adding support for v. 7, v. 6...\" and \"is there even a point in supporting earlier versions than 8?\"  \r\n\r\nI got curious after running a D3D 6 game in Wine and hearing the fans on full blast, realizing I'm not using DXVK and that I don't know the details of why that is. \r\n\r\nThis is not a feature request, I'm just interested in hearing about the complexities at work in this kind of project. \r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4235/comments",
    "author": "anohren",
    "comments": [
      {
        "user": "K0bin",
        "created_at": "2024-09-04T14:07:30Z",
        "body": "D3D versions before 8 are part of DirectDraw. Because of that we don't support older versions than 8.\r\n\r\nBefore that, support mostly came down to whether someone was interested in it and wrote the code.\r\n@Joshua-Ashton originally started D9VK and I started contributing that soon after.\r\n@AlpyneDreams originally started D8VK and @WinterSnowfall started contributing to it.\r\nThe code existed and was good, the people working on it were nice, so the projects got integrated into DXVK.\r\n\r\nAside from that:\r\n- D3D10 made sense because it's basically a subset of D3D11. (It's implemented in DXVK by translating it to D3D11 essentially)\r\n- D3D9 made sense because it's used by a LOT of great games and a bunch of those can still be demanding to run.\r\n- D3D8 made sense because it's basically a subset of D3D9. (It's implemented in DXVK by translating it to D3D9 essentially)\r\n"
      },
      {
        "user": "AlpyneDreams",
        "created_at": "2024-09-04T14:47:46Z",
        "body": "I have looked into implementing DirectDraw (and therefore D3D7 and perhaps older versions of D3D). I did manage to get a couple D3D7 samples working ages ago, so it is probably possible but would be a much much bigger project than D3D8 and would require a significant time investment that I can't spare at present. But after the initial hurdle of getting minimum viable DDraw functionality, many of the older DX versions would probably be able to be done relatively quickly. For now just use WineD3D, it's pretty good."
      },
      {
        "user": "WinterSnowfall",
        "created_at": "2024-09-04T15:06:00Z",
        "body": "Even if let's say you wanted to ignore DDraw altogether and not implement it, focusing exclusively on the D3D side of things, the problem with D3D versions below 8 is that they involve some degree of DDraw inter-op, which is somewhat of a tangled mess. And since we're dealing with relatively crude APIs, untangling everything isn't exactly straight-forward. In that respect, it would be a far more challenging proposition (IMHO) than d8vk was. \r\n\r\nAnd, as @K0bin mentioned, because of the technical debt it would entail, there's basically very little (if any) interest to support any of the older D3D APIs in dxvk.\r\n\r\nIf you *really* want to get them onto dxvk for some reason, feel free to use wrappers that translate between said APIs and D3D9 or D3D11. It's what I had been doing for years in the case of D3D8 by using d3d8to9 with dxvk/d9vk, long long before d8vk came along."
      },
      {
        "user": "dungeon007",
        "created_at": "2024-09-04T16:58:14Z",
        "body": ">I got curious after running a D3D 6 game in Wine and hearing the fans on full blast, realizing I'm not using DXVK and that I don't know the details of why that is.\r\n\r\n All ddraw games are 32bit and single CPU core, by design.\r\nWiNE have csmt enabled by default, feature that aim to speed up some things in rendering and that uses a second CPU core, sometimes even when it is not really needed.\r\nIn case you have somewhat high IPC CPU, then perf might be fine enough already on a single CPU core, so you can try even to disable that, with variable like  **WINE_D3D_CONFIG=\"csmt=0\"**"
      },
      {
        "user": "anohren",
        "created_at": "2024-09-05T01:24:45Z",
        "body": "Thank you for the explanations. Interesting situation. \r\n\r\n@AlpyneDreams, what was your motivation for trying, if I may ask?\r\n\r\nWith regards to workarounds I'll probably continue to dig up an XP/7 machine, which handles e.g. D3D6 much better than 10. While WineD3D looked to perform correctly (in contrast to Windows 10), I couldn't hear the game very well. \r\n\r\nThanks for the tip @dungeon007, I'll try it next time and see what happens. "
      },
      {
        "user": "shmerl",
        "created_at": "2024-09-27T02:23:01Z",
        "body": "> For now just use WineD3D, it's pretty good.\r\n\r\nJust to point out, the big benefit of DX7 / DirectDraw over Vulkan could be that it can work efficiently with new wow64 avoiding the need for 32-bit libraries.\r\n\r\nCurrent implementation of DirectDraw in Wine requires OpenGL and that doesn't work with new wow64 well due to lacking OpenGL features needed for thunking to work efficiently."
      }
    ]
  },
  {
    "number": 4199,
    "title": "Add Direct3D 7 support",
    "created_at": "2024-08-09T19:23:17Z",
    "closed_at": "2024-08-09T20:21:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4199",
    "body": "Is that possible?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4199/comments",
    "author": "Sagatt",
    "comments": [
      {
        "user": "Blisto91",
        "created_at": "2024-08-09T19:55:45Z",
        "body": "Yes. But the devs have also stated they aren't interested in having anything like that merged in to this repository, so if  someone decides to make a go at d3d7 it will be a separate project."
      },
      {
        "user": "K0bin",
        "created_at": "2024-08-09T20:21:51Z",
        "body": "Duplicate of #3234 and Blisto answered it."
      },
      {
        "user": "WinterSnowfall",
        "created_at": "2024-08-09T20:51:52Z",
        "body": "> so if someone decides to make a go at d3d7 it will be a separate project.\r\n\r\nStop making me sneeze!"
      }
    ]
  },
  {
    "number": 4189,
    "title": "Documentation: 32 bit and 64 bit mixed?",
    "created_at": "2024-08-06T14:30:09Z",
    "closed_at": "2024-08-06T14:50:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/4189",
    "body": "Under \"How to Use\" in the README/documentation we see\r\n\r\n```\r\nexport WINEPREFIX=/path/to/wineprefix\r\ncp x64/*.dll $WINEPREFIX/drive_c/windows/system32\r\ncp x32/*.dll $WINEPREFIX/drive_c/windows/syswow64\r\nwinecfg\r\n```\r\n\r\nIs that correct?  It seems that 32 and 64 bits are mixed.  Should it be\r\n\r\n```\r\nexport WINEPREFIX=/path/to/wineprefix\r\ncp x32/*.dll $WINEPREFIX/drive_c/windows/system32\r\ncp x64/*.dll $WINEPREFIX/drive_c/windows/syswow64\r\nwinecfg\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/4189/comments",
    "author": "lrfinotti",
    "comments": [
      {
        "user": "K0bin",
        "created_at": "2024-08-06T14:50:39Z",
        "body": "\"syswow64\" is short for \"system(32) windows on windows64\". So while it seems confusing at first, the README gets it right."
      }
    ]
  },
  {
    "number": 3830,
    "title": "Is possible run command inside Steam Proton for install DXVK alternate versions ?",
    "created_at": "2024-02-03T15:34:31Z",
    "closed_at": "2024-11-08T11:40:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/3830",
    "body": "Hello.\r\nThanks for reading my topic.\r\nHere Ubuntu 20.04.6 and Steam for Linux with Proton 8 and Experimental.\r\nIs possible run command for internally install DXVK current and alternate versions inside Steam Proton installation ?\r\nOnly manually copying DXVK files not work. Is as if need change in registry settings too.\r\n\r\nHave an nice day.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/3830/comments",
    "author": "Augusto7743",
    "comments": [
      {
        "user": "Blisto91",
        "created_at": "2024-02-03T15:46:30Z",
        "body": "It should work if you replace the Proton dxvk files that Proton copies over.\r\nSo e.g if i wanted to replace them in Proton Experimental i would extract them in `~/.steam/steam/steamapps/common/Proton - Experimental/files/lib64/wine/dxvk/` (default system install path not using flatpak or similar) for the 64-bit files. And also do the same for 32-bit in it's respective path.\r\nThough note these will be overwritten when the Proton files are updated."
      },
      {
        "user": "Augusto7743",
        "created_at": "2024-02-03T16:31:06Z",
        "body": "Thanks very much for your reply.\r\nI have done exactly it. Not work and that error not is related with video card drivers or game trying load own d3d files.\r\nI want try install dxvk using command because the install mode does changes in registry settings. Perhaps doing it can work."
      },
      {
        "user": "Blisto91",
        "created_at": "2024-02-04T00:39:41Z",
        "body": "All the wine overrides using the old install script are already default in Proton. I assume that is what you mean by command?\r\nThe method described in my comment above should work if the game is also using the same proton as the one you replaced the files in as that is how it is commonly done. "
      },
      {
        "user": "Sterophonick",
        "created_at": "2024-02-06T17:10:11Z",
        "body": "@Augusto7743 You can also copy the files from the DXVK release that you want into the executable's directory since both Windows and WINE prioritize the nearest DLL it can load, it'll work by default in Proton since the necessary DLL overrides are already set."
      },
      {
        "user": "Blisto91",
        "created_at": "2024-02-06T17:17:45Z",
        "body": "Do note though that for some games it's possible for that to lead to a situation where it will try to load some of the dxvk files from the local folder and some of the dxvk files from the system folder. So it can be finicky.\r\nThough for most part games should be fine in general with it and just load the local ones. Just something to keep in mind"
      },
      {
        "user": "Augusto7743",
        "created_at": "2024-02-06T19:56:25Z",
        "body": "I have done copy of dxvk old version compatible with kepler in correct paths and not work.\r\nWell ... I have done an test using Proton 7 and was possible run a DX11 game using kepler.\r\nPerhaps doing an test downloading an DX12 demo is possible see if run using Proton 7 with kepler.\r\nHave some good DX12 games not requiring powerful GPUs .. perhaps can run in kepler.\r\n\r\nHowever I want understand if is possible run command or scripts internally for Proton.\r\nThanks for all replies."
      },
      {
        "user": "Blisto91",
        "created_at": "2024-02-08T16:41:49Z",
        "body": "You could modify the proton script in your proton installation i guess, but that would also get overridden when a Proton update occurs ofc."
      }
    ]
  },
  {
    "number": 3466,
    "title": "Analyze v17 DXVK state cache entry",
    "created_at": "2023-05-31T21:22:13Z",
    "closed_at": "2023-06-01T19:20:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/3466",
    "body": "I'm analyzing DXVK state cache files in Kotlin.\r\n\r\n**Basically I just need to know ByteArray size and shifting of the new header values.**\r\n\r\n```cpp\r\nstruct DxvkStateCacheEntryHeader {\r\n    uint32_t entryType : 1;\t\t/* New */\r\n    uint32_t stageMask : 5;\t\t/* Changed */\r\n    uint32_t entrySize : 26;\t/* Changed */\r\n};\r\n```\r\n\r\n\r\n## My previous implementation (7 < Version < 17)\r\n\r\nThis information is probably not needed, however I'll just provide it here if so\r\n\r\n### DXVK state cache header\r\n\r\n```kotlin\r\n/* Reading state cache header, still working as nothing changed */\r\n\r\nDxvkStateCacheHeader(\r\n    val magic: String,\r\n    val version: UInt,\r\n    val entrySize: UInt\r\n) {\r\n    companion object {\r\n        fun fromReader(reader: FileChannel): DxvkStateCacheHeader {\r\n            val magic = ByteBuffer.allocate(4)\r\n            reader.read(magic)\r\n\r\n            return DxvkStateCacheHeader(\r\n\t\t\t\tmagic = String(magic.array()),\r\n\t\t\t\tversion = reader.readU32(ByteOrder.LITTLE_ENDIAN),\r\n\t\t\t\tentrySize = reader.readU32(ByteOrder.LITTLE_ENDIAN)\r\n\t\t\t)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### DXVK entry header\r\n\r\n```kotlin\r\n/* Reading entry header, not working as it changed */\r\n\r\nDxvkEntryHeader(\r\n    val stageMask: UInt,\r\n    val entrySize: UInt\r\n) {\r\n    companion object {\r\n        fun fromReader(reader: FileChannel): DxvkEntryHeader {\r\n            val magic = ByteBuffer.allocate(4)\r\n            reader.read(magic)\r\n\r\n            return DxvkEntryHeader(\r\n\t\t\t\tstageMask = reader.readU8(),\r\n\t\t\t\tentrySize = reader.readU24(ByteOrder.LITTLE_ENDIAN)\r\n\t\t\t)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Read(ing) methods\r\n\r\n```kotlin\r\nfun FileChannel.readU32(order: ByteOrder? = null): UInt {\r\n    val bytes = ByteBuffer.allocate(4)\r\n    order?.let { bytes.order(it) }\r\n    val state = this.read(bytes)\r\n\r\n    if (state == -1) {\r\n        throw Exception(\"EOF while reading U32\")\r\n    }\r\n\r\n    return bytes[0].unsignedInt(order) +\r\n                bytes[1].unsignedShl(8, order) +\r\n                bytes[2].unsignedShl(16, order) +\r\n                bytes[3].unsignedShl(24, order)\r\n}\r\n\r\nfun FileChannel.readU24(order: ByteOrder? = null): UInt {\r\n    val bytes = ByteBuffer.allocate(3)\r\n    order?.let { bytes.order(it) }\r\n    val state = this.read(bytes)\r\n\r\n    if (state == -1) {\r\n        throw Exception(\"EOF while reading U24\")\r\n    }\r\n\r\n    return bytes[0].unsignedInt(order) +\r\n                bytes[1].unsignedShl(8, order) +\r\n                bytes[2].unsignedShl(16, order)\r\n}\r\n\r\nfun FileChannel.readU8(order: ByteOrder? = null): UInt {\r\n    val bytes = ByteBuffer.allocate(1)\r\n    order?.let { bytes.order(it) }\r\n    val state = this.read(bytes)\r\n\r\n    if (state == -1) {\r\n        throw Exception(\"EOF while reading U8\")\r\n    }\r\n\r\n    return bytes[0].unsignedInt(order)\r\n}\r\n```\r\n\r\n### Byte reading & shifting\r\n\r\n```kotlin\r\nfun Byte.unsignedInt(order: ByteOrder?): UInt {\r\n    val byte = this.toUByte()\r\n    return if (order == ByteOrder.LITTLE_ENDIAN) {\r\n        byte.toUShort().toUInt()\r\n    } else {\r\n        byte.toUInt()\r\n    }\r\n}\r\n\r\nfun Byte.unsignedShl(bitCount: Int, order: ByteOrder?): UInt {\r\n    return unsignedInt(order).shl(bitCount)\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/3466/comments",
    "author": "DatL4g",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2023-05-31T21:28:55Z",
        "body": "`DxvkStateCacheEntryHeader` is a single 32-bit bitfield with `entryType` being stored in the least significant bit, then 5 bits for the stage mask (shifted by 1).\r\n\r\nWe should make this more explicit on our end actually since I don't think the exact layout is guaranteed per spec."
      },
      {
        "user": "DatL4g",
        "created_at": "2023-06-01T18:52:21Z",
        "body": "Aight got it, thanks.\r\nCan be closed if you don't wanna keep it open for documentation purposes."
      }
    ]
  },
  {
    "number": 3440,
    "title": "Less of an issue, more of a question; regarding shader cache files and Steam",
    "created_at": "2023-05-22T03:56:18Z",
    "closed_at": "2023-08-22T20:24:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/3440",
    "body": "Question, when Steam writes a game's shader cache files to the shadercache folder due to the shader pre-cache option being enabled, does that prevent the game in question from reading its related cache files?\r\n\r\n(game in question is Black Mesa btw; dxvk dll used is 2.2)",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/3440/comments",
    "author": "ShinChaosBahamut",
    "comments": [
      {
        "user": "mbriar",
        "created_at": "2023-05-22T06:41:18Z",
        "body": "No, the game will read the cache file just fine. Side note, but with dxvk >= 2.0 and GPL the cache file doesn't really help that much anymore either way and probably doesn't exactly nothing for games that don't use tessellation or geometry shaders like Black Mesa."
      }
    ]
  },
  {
    "number": 3297,
    "title": "[question - DXVK Native] ETS2/ATS and mods supporting only DX11",
    "created_at": "2023-03-20T23:58:05Z",
    "closed_at": "2023-03-21T00:17:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/3297",
    "body": "I have a question about DXVK Native but since the native repository has been closed, I have to ask here.\r\n\r\nThe games ETS2 and ATS both have native linux versions but modders, whether due to laziness, ignorance or carelessness don't generate the mipmaps for the textures when creating their mods. Textures without mipmaps appear black when the mod is used in the native Linux version of the game.\r\n\r\nSo my question is: does the presence of DXVK native mean that I can put the .so files where the linux game executable file is and if I use a mod without mipmaps, it will appear normal - as it would on Windows?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/3297/comments",
    "author": "rado84-github",
    "comments": [
      {
        "user": "K0bin",
        "created_at": "2023-03-21T00:17:39Z",
        "body": "No. DXVK Native has to be implemented by the game developer. It's not a drop in solution.\n\nJust use the Windows version with Proton to fix your problem."
      }
    ]
  },
  {
    "number": 2940,
    "title": "[request] Expose VXAO via DXVK?",
    "created_at": "2022-09-19T10:52:48Z",
    "closed_at": "2022-09-28T21:01:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/2940",
    "body": "So DXVK is able to emulate all DirectX9-10-11 calls through Vulkan. \r\n\r\nDXVK also allows to set a custom device ID, for device spoofing.\r\n\r\nIs it possible to make DXVK expose Nvidia's VXAO option in games, if you don't have a Maxwell GPU or newer?\r\n\r\nIt's only present in like 4 games total to my knowledge. Rise of the Tomb Raider, Final Fantasy 15, I think Division 1 and I think Shadow of the Tomb Raider. And it's only present in DX11, not DX12.\r\n\r\nIt's a voxel based AO solution, similar to a path traced AO option like ReShade MXAO. Or you can think of it a precursor to Nvidia's work on RT ambient occlusion.\r\n\r\nI'm really not sure if this is within's DXVK or any developer's means, but I wanted to ask.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/2940/comments",
    "author": "RareMv",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2022-09-19T13:11:27Z",
        "body": "VXAO works in FFXV if you have a supported GPU (even AMD). I don't know about the other games, they may require some sort of nvapi magic that probably doesn't work on Linux."
      },
      {
        "user": "RareMv",
        "created_at": "2022-09-19T13:15:51Z",
        "body": "I only tried on Windows, on 5700 XT and NimeZ 22.8.2 drivers. Used DXVK 1.10.3, set the Nvapi to not report as an AMD GPU (so False) and set the device ID to an RTX 3080.\r\n\r\nRise of the Tomb Raider in DX11 would still not expose VXAO.\r\n\r\nI am aware DXVK is not meant for Windows necessarily, but was curious about this possibility in regards to VXAO. There's nobody else on the internet doing any work on this topic."
      },
      {
        "user": "doitsujin",
        "created_at": "2022-09-19T13:25:48Z",
        "body": "DXVK supports all the features necessary, if the game decides to only expose VXAO on an actual Nvidia GPU due to some vendor library interactions (which cannot ever work with DXVK on Windows) then there's nothing we can do on our end."
      }
    ]
  },
  {
    "number": 2531,
    "title": "Vulkan requirements?",
    "created_at": "2022-03-09T21:45:45Z",
    "closed_at": "2022-07-04T13:20:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/2531",
    "body": "Looking at the wiki page I can see these:\r\n\"\r\nDXVK aims to provide support for D3D11, feature level 11_1, and D3D10, feature level 10_1.\r\n\r\nCurrently unsupported features:\r\n\r\nD3D11: Shared Resources.\r\nD3D11: Class linkage.\r\nD3D11: Predication.\r\nD3D11.1: Target-independent rasterization (behaves incorrectly; no MSAA16x support).\r\nD3D11.2: Tiled resources (optional).\r\nD3D11.3: Rasterizer Ordered Views (optional).\r\nD3D11.4: D3D12 interop.\r\n\"\r\nIs there any indication of the Vulkan API version and extensions requirement to get D3D11.1 support and to get D3D10.1 support?\r\nWhat the Vulkan drivers need to support? Is it currently a matter of trial and error?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/2531/comments",
    "author": "christophe-lunarg",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2022-03-09T21:57:44Z",
        "body": "DXVK generally requires a Vulkan 1.1 driver to run at all with the following device features:\r\n```\r\ngeometryShader\r\nrobustBufferAccess\r\nshaderStorageImageWriteWithoutFormat\r\nshaderDrawParameters\r\ndepthClamp\r\ndepthBiasClamp\r\nfillModeNonSolid\r\npipelineStatisticsQuery\r\nsampleRateShading\r\nshaderClipDistance\r\nshaderCullDistance\r\ntextureCompressionBC\r\nocclusionQueryPrecise\r\nindependentBlend\r\nmultiViewport\r\nfullDrawIndexUint32\r\nshaderImageGatherExtended\r\ntransformFeedback\r\ngeometryStreams\r\n```\r\n\r\nFor feature level 10_1:\r\n```\r\ndualSrcBlend\r\nimageCubeArray\r\n```\r\n\r\nFor feature level 11_0:\r\n```\r\ndrawIndirectFirstInstance\r\nfragmentStoresAndAtomics\r\nmultiDrawIndirect\r\ntessellationShader\r\n```\r\n\r\nFor feature level 11_1:\r\n```\r\nlogicOp\r\nvariableMultisampleRate\r\nvertexPipelineStoresAndAtomics\r\n```\r\n\r\nThere's also a whole bunch of semi-optional features that we use to either implemement certain optional D3D features, ensure correctness, or to achieve good performance:\r\n```\r\nextendedDynamicState\r\nformatA4B4G4R4\r\nformatA4R4G4B4\r\nshaderFloat64\r\nshaderInt64\r\nshaderStorageImageReadWithoutFormat\r\ndepthClipEnable\r\nhostQueryReset\r\nsamplerAnisotropy\r\npipelineStatisticsQuery\r\nvertexAttributeInstanceRateDivisor\r\nvertexAttributeInstanceRateZeroDivisor\r\nshaderDemoteToHelperInvocation\r\nrobustBufferAccess2\r\nrobustImageAccess2\r\nnullDescriptor\r\nmemoryPriority\r\ndepthBounds\r\n```\r\n\r\nNote that all of this is subject to change and we will likely move on to Vulkan 1.2 in the future and make `hostQueryReset` a hard requirement, which allows us to get rid of a slow and more or less untested code path. Portability and compatibility with mobile drivers is not a priority for us."
      },
      {
        "user": "Augusto7743",
        "created_at": "2022-03-19T10:02:21Z",
        "body": "Thanks very much for any improvement.\r\nInstalling DXVK is much time in WINE even being few files to copy to WINE path."
      },
      {
        "user": "K0bin",
        "created_at": "2022-07-04T13:20:34Z",
        "body": "FYI upcoming versions will require null descriptors and dynamic rendering.\r\n\r\nI'm closing this issue, I think the question has been answered. Feel free to reopen if there's anything else you want to know."
      },
      {
        "user": "Augusto7743",
        "created_at": "2022-07-04T19:06:24Z",
        "body": "You are saying future version will be compatible with any Vulkan version installed in OS ?"
      },
      {
        "user": "Blisto91",
        "created_at": "2022-07-04T20:09:05Z",
        "body": "Null descriptors (`VK_EXT_robustness2`) have been supported for a couple of years. On linux at least.\r\n\r\nFor `VK_KHR_dynamic_rendering` you need atleast `510.39.01` for nvidia and mesa `22.0.0` (radv & anv) for amd and intel."
      },
      {
        "user": "K0bin",
        "created_at": "2022-07-04T20:09:38Z",
        "body": "> You are saying future version will be compatible with any Vulkan version installed in OS ?\r\n\r\nIt will be compatible with any Vulkan driver that supports those features and works correctly."
      }
    ]
  },
  {
    "number": 2489,
    "title": "Is Dx8 Implementation Possible",
    "created_at": "2022-02-10T01:03:25Z",
    "closed_at": "2022-02-10T02:11:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/2489",
    "body": "I tried to combine @crosire's  d3d8to9 libraries to first convert Dx8 to Dx9 then used your Dxvk to convert Dx9 to Vulkan, placed d3d8.dll and d3d9.dll to the same folder but game that i tried is crashed. Is it possible to Dxvk to handle Dx8 too please",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/2489/comments",
    "author": "ufukbakan",
    "comments": [
      {
        "user": "K0bin",
        "created_at": "2022-02-10T02:11:12Z",
        "body": "It's absolutely possible but no one is interested in doing the work to implement D3D8 right now. DXVK should work with D3D8to9 if you install Microsofts D3DX9. The Wine implementation is not good enough.\r\n\r\nBut honestly, we're talking about D3D8 games here. Just play those with WineD3D. It's not like performance is gonna be a big problem with those games anyway."
      }
    ]
  },
  {
    "number": 2191,
    "title": "Is there a way to enable alpha supersampling in the config?",
    "created_at": "2021-07-28T15:49:30Z",
    "closed_at": "2021-07-28T17:54:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/2191",
    "body": "Is there a way to enable alpha supersampling in the config?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/2191/comments",
    "author": "Fritomaster",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2021-07-28T17:54:44Z",
        "body": "No, and that kind of feature is not a simple on/off toggle so it needs to be implemented by the game."
      },
      {
        "user": "Fritomaster",
        "created_at": "2021-07-28T18:11:01Z",
        "body": "> No, and that kind of feature is not a simple on/off toggle so it needs to be implemented by the game.\r\nOh ok. Thanks!"
      }
    ]
  },
  {
    "number": 2083,
    "title": "GW2 dxvk with other addons?",
    "created_at": "2021-06-05T20:49:56Z",
    "closed_at": "2021-06-05T21:26:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/2083",
    "body": "Hello, is there a possible way to use dxvk with other addons like radial mount, arcdps, and reshade? \r\nI tried putting the dll of the dxvk next to the exe of the gw2 and the dll of radial mount and arcdps in the bin64 but only radial and arcpds was being detected and I tried using just reshade along as well but even when installing reshade for vulkan it didnt detected while the dll of the dxvk was in the 64 or next to the exe.\r\n\r\nIf there is no possible way to get all this addons to work together with dxvk then I will just continue using d912pxy for now. ",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/2083/comments",
    "author": "YamiN0Neko",
    "comments": [
      {
        "user": "misyltoad",
        "created_at": "2021-06-05T21:26:55Z",
        "body": "For Reshade you can use the env var `RESHADE_MODULE_PATH_OVERRIDE` to point to a directory containing DXVK dlls for Reshade to use.\r\n\r\nAs for the others, you'd need to ask their authors. AFAIK ArcDPS uses some weird DWM stuff for it's overlay so it should work in theory. I have no idea about Radial Mount."
      }
    ]
  },
  {
    "number": 1919,
    "title": "Install missing folders",
    "created_at": "2021-02-05T18:07:46Z",
    "closed_at": "2021-02-06T08:05:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1919",
    "body": "i did a git clone of the repo and when i run the installer its looking for x32 and x64 directories inside the git repo which dont exist.\r\n\r\n ./setup_dxvk.sh install                                                                                                                                           î‚² âœ”\r\nwine: configuration in L\"/home/yabbo/.wine\" has been updated.\r\nwine: configuration in L\"/home/yabbo/.wine\" has been updated.\r\n/home/yabbo/dxvk/x64/dxgi.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x32/dxgi.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x64/d3d9.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x32/d3d9.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x64/d3d10core.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x32/d3d10core.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x64/d3d11.dll: File not found. Skipping.\r\n/home/yabbo/dxvk/x32/d3d11.dll: File not found. Skipping.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1919/comments",
    "author": "Yabbo",
    "comments": [
      {
        "user": "ZachBacon",
        "created_at": "2021-02-05T18:24:33Z",
        "body": "So... You cloned the project and tried to install it, before building the project?"
      },
      {
        "user": "misyltoad",
        "created_at": "2021-02-06T08:05:18Z",
        "body": "Use ./package_release.sh to actually build the project then run the setup in that."
      }
    ]
  },
  {
    "number": 1716,
    "title": "Windows 10  DXGI implementation vs DXVK's version / Question",
    "created_at": "2020-08-10T06:31:44Z",
    "closed_at": "2020-08-10T10:17:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1716",
    "body": "\r\nHi i was wondering would there be any performance impact or gains from using Window 10's own DXGI instead of DXVK's DXGI implementation ?\r\n\r\nSpecifically with GW2 64bit.\r\n\r\nThank you ",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1716/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "DadSchoorse",
        "created_at": "2020-08-10T07:24:22Z",
        "body": "DXVK's d3d10 and d3d11 do not work with the windows dxgi. GW2 uses d3d9 iirc and d3d9 doesn't use dxgi, so it doesn't matter which one you use."
      },
      {
        "user": "doitsujin",
        "created_at": "2020-08-10T10:17:25Z",
        "body": "You *cannot* use DXVK with the Windows implementation of DXGI. It simply won't work.\r\n\r\nGW2 is a D3D9 game, so it shouldn't need DXGI in the first place."
      }
    ]
  },
  {
    "number": 1704,
    "title": "DLSS/NGX support?",
    "created_at": "2020-07-31T09:15:16Z",
    "closed_at": "2020-08-01T20:13:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1704",
    "body": "Hello\r\n\r\n Will dxvk support DLSS 2.0 which was introduced in nvidia 450.57? Would it work at all?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1704/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "K0bin",
        "created_at": "2020-07-31T09:38:48Z",
        "body": "That driver brought the infrastructure for DLSS over to Linux, not DLSS itself."
      },
      {
        "user": "ghost",
        "created_at": "2020-07-31T09:43:58Z",
        "body": "Does that mean we can't use the calls through wine? Shouldn't it be the same API?"
      },
      {
        "user": "K0bin",
        "created_at": "2020-07-31T09:47:26Z",
        "body": "DLSS itself is still behind NDA and I don't think the ML model itself or the API for it is available on Linux."
      },
      {
        "user": "ghost",
        "created_at": "2020-07-31T09:55:46Z",
        "body": "If the API is not available then what would be the point of that update? If games can't use it then it's pointless."
      },
      {
        "user": "doitsujin",
        "created_at": "2020-08-01T20:13:50Z",
        "body": "> Does that mean we can't use the calls through wine? Shouldn't it be the same API?\r\n\r\nYes, but someone would still need to write a bridge of some sort and that's just not going to happen as long as the it is NDA'd.\r\n\r\nTL;DR not happening any time soon."
      }
    ]
  },
  {
    "number": 1636,
    "title": "Can you disable TripleBufferning when using DXVK",
    "created_at": "2020-05-21T11:48:16Z",
    "closed_at": "2020-07-13T06:02:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1636",
    "body": "Is there a setting that would allow disabling of triple buffering when using DXVK with Nvidia?\r\nI've been trying with MoI (a modeling 3d app, a kind of CAD sketchbook). With regular wine (without DXVK) it had a drawing issue as well (what you see on the screen seems to be a one state behind, so you don't get proper object highlight when you hover over it and so on) - but I've been able to get around it by setting:\r\n\r\n__GL_MaxFramesAllowed=1\r\n\r\nAs mentioned I'm running it on Nvidia, where it seems that triple buffering seems to be broken for years (at least with WINE).\r\nI have my fingers crossed that there's a setting that would allow a workaround with Vulkan as well, knowing that next version of MoI will rely on DX even more.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1636/comments",
    "author": "Pshemas",
    "comments": [
      {
        "user": "bno1",
        "created_at": "2020-05-21T11:56:16Z",
        "body": "Are you using a laptop with nvidia optimus or a desktop?"
      },
      {
        "user": "doitsujin",
        "created_at": "2020-05-22T09:30:01Z",
        "body": "In what way exactly does this application rely on triple buffering being disabled? In case Vsync is enabled, we *always* request one more swap chain image than required since otherwise we'd end up with terrible frame pacing, \r\n\r\nThere are several settings that (may) affect presentation latency in various ways:\r\n- `dxgi.numBackBuffers = 1` overrides the app's desired back buffer count, setting this to 1 may or may not help.\r\n- `dxgi.syncInterval = 0` disables Vsync, which may or may not open up a lower-latency presentation path for the Vulkan swap chain.\r\n- `dxgi.maxFrameLatency = 1` introduces more aggressive GPU->CPU synchronization on presentation which may reduce latency, but it's usually the applicaction's job to do this.\r\n\r\nAlso, your window manager may introduce multiple frames of latency, but we can't really do anything about that; disabling desktop effects if possible may improve that though."
      },
      {
        "user": "DaRkL3AD3R",
        "created_at": "2021-08-16T21:51:42Z",
        "body": "Is .numBackBuffers = 1 supposed to do anything? The conf file specifies that the only supported values are greater than or equal to 2. I'm attempting to engage typical double buffered v-sync with DXVK for the sake of flawless presentation pacing and instead I'm getting stuttery triple buffered v-sync. Eg - GPU running at 128 fps on a 144hz monitor instead of dropping to 72 fps for perfect 2:1 refresh cycles."
      },
      {
        "user": "doitsujin",
        "created_at": "2021-08-17T23:30:18Z",
        "body": "That won't work, and it's not expected to work, I don't think X11 is even able to support \"true\" double-buffering in the first place. All Vulkan drivers require 3-4 swap chain images in practice anyway, the option was originally intended to work around cases where drivers behave weirdly and cause frame pacing issues.\r\n\r\nYou can use `dxgi.syncInterval = 2` to force games to run at half your monitor's refresh rate."
      },
      {
        "user": "DaRkL3AD3R",
        "created_at": "2021-08-17T23:47:58Z",
        "body": "The funny thing is, the only game I currently possess that exhibits this behavior is RDR2 under DX12. I assume if a DX12 game can support proper double buffered v-sync then surely DX11 and under can too. I haven't found a Vulkan game that experiences this yet however so it's likely not possible under DXVK."
      },
      {
        "user": "doitsujin",
        "created_at": "2021-08-18T00:32:52Z",
        "body": "D3D11 can technically support double-buffered Vsync but that doesn't help when the graphics stack that our D3D11 implementation is running on can't. Even if it could, it probably wouldn't work very well with DXVK without some changes to how presentation is handled.\r\n\r\nI'd also argue that it's not all that important, pretty much every modern game defaults to triple buffering anyway, most high-refresh displays support VRR, and there are more reliable ways to limit frame rates and ensure reasonably smooth frame intervals."
      }
    ]
  },
  {
    "number": 1456,
    "title": "(Question) Any way to always force triple-buffering?",
    "created_at": "2020-02-16T15:49:00Z",
    "closed_at": "2020-02-16T18:41:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1456",
    "body": "Ä°'m asking because Ä° got sick of framerates bouncing around on my 60 Hz monitor.\r\nTriple-buffering would at least allow a more graceful change of pace of the fluidity of animations on-screen.\r\n\r\nÄ°'ve already tried setting `dxgi.numBackBuffers = 4`, but it only seems to make a difference when Vsync is disabled, which in itself causes way more frame-pacing issues than simply having it on all the time.\r\n\r\nThat's why Ä° hope there could be a simple & universal way of always enforcing triple-buffering with activated Vsync, even if the games have not been coded with multiple buffers in mind.\r\n\r\nThanks for any response in advance!",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1456/comments",
    "author": "yaskme",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2020-02-16T18:41:49Z",
        "body": "Triple-buffering is active when the app requests it or if you set `dxgi.numBackBuffers = 3` or higher. If that doesn't work, something is broken on your system.\r\n\r\nNote that XWayland seems to have this issue for some people, and some window managers may also cause this behaviour."
      },
      {
        "user": "yaskme",
        "created_at": "2020-02-16T19:16:47Z",
        "body": "@doitsujin \r\nThanks for answering!\r\n\r\nLike Ä° already said, `dxgi.numBackBuffers` does make a difference, but _only_ if Ä° disable Vsync; otherwise, framerate is still locked to a multiple of my 60 Hz monitor.\r\n\r\nÄ°s there anything else Ä° could try to get variable FPS with activated Vsync?"
      },
      {
        "user": "misyltoad",
        "created_at": "2020-02-16T19:29:27Z",
        "body": "> Ä°s there anything else Ä° could try to get variable FPS with activated Vsync?\r\n\r\nThe whole point of vsync is that it syncs to the vertical blank of your display."
      },
      {
        "user": "yaskme",
        "created_at": "2020-02-16T20:45:16Z",
        "body": "@Joshua-Ashton \r\nObviously Ä°'m aware of what Vsync is supposed to do...\r\n\r\nLet me give an example to make my point more clear:\r\n\r\nOn my nVidia system, Ä° can activate triple-buffering system-wide by putting this into xorg.conf:\r\n`Option \"TripleBuffering\" \"True\"`\r\nThis way, when Ä° run an OpenGL-utilising app (i.e. Unigine benchmarks), Ä° can observe that the FPS are gradually changing instead of jumping between 60, 30, 20, 15, â€¦\r\nAll of the above while still having a tear-free experience, since Vsync is still applying correctly, even though the FPS are now changing independently from my monitor's refresh rate!\r\n\r\nÄ° hope the above example could make my point clear enough;\r\nreally, all Ä° want to achieve is for my GPU to keep producing new frames, without having to wait on the refresh rate of my monitor, while at the same time still enjoying an absolutely tear-free experience thanks to active Vsync!\r\n\r\nÄ° really hope there is a way this can also be achieved with DXVKâ€¦"
      },
      {
        "user": "doitsujin",
        "created_at": "2020-02-16T22:04:55Z",
        "body": "Well as mentioned, that *should* work fine as it is, and on both my AMD and Nvidia GPUs it *does* work just fine. Can't really do much here, especially with zero details on your hardware and software setup."
      }
    ]
  },
  {
    "number": 1413,
    "title": "A question about DXVK_HUD",
    "created_at": "2020-02-06T23:15:53Z",
    "closed_at": "2020-02-07T00:40:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1413",
    "body": "There is a new HUD called MangoHud that looks like MSI Afterburner, and one of the things that it can provide is GPU_load, and that doesn't work with old GPUs like mine, but DXVK_HUD shows GPU_load for my GPU, so could you explain what is the method DXVK_HUD use to get GPU_load readings, and if it can be used with other HUDs like MangoHud?\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1413/comments",
    "author": "Ahmed-E-86",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2020-02-06T23:59:10Z",
        "body": "The explanation is a bit technical, but DXVK essentially has a thread that mostly just waits for the GPU to finish executing rendering commands, and measures the time it spends waiting for the GPU, as well as the time spent on doing nothing at all. 100% GPU load means that it *always* waits for the GPU.\r\n\r\nThis is not *perfect*, but quite accurate in practice and works on all systems.\r\n\r\nThe Mango HUD does not have access to this information and thus cannot trivially implement such a feature. Instead it relies on the GPU load to be reported by your graphics driver, which may or may not work on very old GPUs."
      },
      {
        "user": "Ahmed-E-86",
        "created_at": "2020-02-07T00:40:44Z",
        "body": "Ok, thanks for your simple explanation."
      }
    ]
  },
  {
    "number": 1339,
    "title": "[Feature Request] DLL Chainloading",
    "created_at": "2020-01-14T05:49:45Z",
    "closed_at": "2020-01-14T09:51:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1339",
    "body": "Would it be possible to implement DLL chainloading into DXVK, to make it easier to load D3D wrappers like ENB, Reshade etc.? I'm not sure if this would be of much use on Linux, but on Windows it would allow these to be used without using DXVK system-wide, which is currently (as far as I am aware) the only way to do this. I am aware wrappers like these have no official support, but it would be nice to at least have the ability to load them.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1339/comments",
    "author": "NikoofDeath",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2020-01-14T09:49:37Z",
        "body": "No, because these D3D wrappers don't get loaded by D3D11 on Windows, they load D3D11 themselves. If anything, they are responsible for loading the \"correct\" implementation, but I wouldn't expect any of those projects to ever support anything other than the Microsoft D3D11 runtime.\r\n\r\nBoth ENB and Reshade work on Linux, so there's that."
      },
      {
        "user": "misyltoad",
        "created_at": "2020-01-14T14:56:44Z",
        "body": "I actually PRed this functionality into Reshade and Apitrace.\r\n\r\nAs for ENB, that's not open source so you'll need to bug that man yourself and I don't care to do that."
      }
    ]
  },
  {
    "number": 1026,
    "title": "[QUESTION] Will be async patches in future version of DXVK",
    "created_at": "2019-04-24T05:23:56Z",
    "closed_at": "2019-04-24T12:10:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/1026",
    "body": "Some guy made async shader compile patches for DXVK, but it little buggy\r\n\r\nSo, maybe if Wine Esync merged to staging - DXVK async will be?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/1026/comments",
    "author": "t14462",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2019-04-24T12:10:46Z",
        "body": "Short version: No.\r\n\r\nLong version: It alters rendering without the game being aware of it, which is unacceptable especially in the context of multi-player games. I know it helps some games tremendously, but use it at your own risk."
      },
      {
        "user": "Kerrung",
        "created_at": "2019-04-24T21:22:12Z",
        "body": "@doitsujin But can it be at least possible to add this as a disabled option by default in the configuration file?\r\n\r\n> Short version: No.\r\n> \r\n> Long version: It alters rendering without the game being aware of it, which is unacceptable especially in the context of multi-player games. I know it helps some games tremendously, but use it at your own risk.\r\n\r\n"
      },
      {
        "user": "doitsujin",
        "created_at": "2019-04-24T21:47:03Z",
        "body": "No."
      }
    ]
  },
  {
    "number": 952,
    "title": "macOS compilation",
    "created_at": "2019-03-06T04:02:44Z",
    "closed_at": "2019-10-09T16:47:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/952",
    "body": "Is it possible to make native macOS compilation like meson --buildtype release --prefix /opt build.a64?\r\nWine compilation successful with Xcode10,1 (clang 10.0)\r\nI got an error\r\n~~~\r\nThe Meson build system\r\nVersion: 0.49.2\r\nSource dir: /Volumes/MacHD/Users/sergey/Documents/Projects/dxvk\r\nBuild dir: /Volumes/MacHD/Users/sergey/Documents/Projects/dxvk/build.a64\r\nBuild type: native build\r\nProject name: dxvk\r\nProject version: v1.0\r\nNative C compiler: cc (clang 10.0.0 \"Apple LLVM version 10.0.0 (clang-1000.11.45.5)\")\r\nNative C++ compiler: c++ (clang 10.0.0 \"Apple LLVM version 10.0.0 (clang-1000.11.45.5)\")\r\nBuild machine cpu family: x86_64\r\nBuild machine cpu: x86_64\r\nChecking if \"winelib check\" compiles: NO\r\n\r\nmeson.build:46:2: ERROR:  C++ library 'vulkan-1' not found\r\n~~~\r\n\r\nI see no explanation where it expected the library to be.\r\n\r\nThe cross-compilation is successful but I got too large files\r\n~~~\r\nMacBook-Pro-Sergey:dxvk sergey$ ls -la bin/\r\ntotal 140576\r\ndrwxr-xr-x   8 sergey  staff       272  5 Ð¼Ð°Ñ€ 22:19 .\r\ndrwxr-xr-x  26 sergey  staff       884  6 Ð¼Ð°Ñ€ 06:58 ..\r\n-rw-r--r--@  1 sergey  staff      6148  5 Ð¼Ð°Ñ€ 19:58 .DS_Store\r\n-rwxr-xr-x   1 sergey  staff  13334312  5 Ð¼Ð°Ñ€ 22:19 d3d10.dll\r\n-rwxr-xr-x   1 sergey  staff  13334312  5 Ð¼Ð°Ñ€ 22:19 d3d10_1.dll\r\n-rwxr-xr-x   1 sergey  staff  13333800  5 Ð¼Ð°Ñ€ 22:19 d3d10core.dll\r\n-rwxr-xr-x   1 sergey  staff  16563965  5 Ð¼Ð°Ñ€ 22:19 d3d11.dll\r\n-rwxr-xr-x@  1 sergey  staff  15392460  5 Ð¼Ð°Ñ€ 22:19 dxgi.dll\r\nMacBook-Pro-Sergey:dxvk sergey$ \r\n~~~\r\nIs it normal? ",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/952/comments",
    "author": "SergeySlice",
    "comments": [
      {
        "user": "cdavis5e",
        "created_at": "2019-03-06T05:39:52Z",
        "body": "> ```\r\n> Checking if \"winelib check\" compiles: NO\r\n> ```\r\n\r\nWhat's `build.a64/meson-logs/meson-log.txt` say? Look for this line in there, and paste all the lines from \"Running compile:\" up to it.\r\n\r\n> Is it normal?\r\n\r\nDid you build using the debug configuration? That's pretty normal for a debug build; the debug info in particular takes up a lot of space. If you aren't sure, you almost certainly did, because that's the default."
      },
      {
        "user": "SergeySlice",
        "created_at": "2019-03-06T07:53:08Z",
        "body": "You mean  --buildtype release? Yes, I set it."
      },
      {
        "user": "lieff",
        "created_at": "2019-03-06T09:24:37Z",
        "body": "But IIRC MoltenVK still do not supports all needed features for DXVK? Or that's changed?"
      },
      {
        "user": "SergeySlice",
        "created_at": "2019-03-06T16:57:35Z",
        "body": "It is fast changing. I can start some vulkan application and want to test DX10/DX11 application with dxvk.\r\nI can compile just a question about too large files. Or may be make native compilation.\r\nThe log is not helpful\r\n`Running test binary command: /Volumes/MacHD/Users/sergey/Documents/Projects/dxvk/build.a64/meson-private/sanitycheckcpp.exe\r\nNative C++ compiler: c++ (clang 10.0.0 \"Apple LLVM version 10.0.0 (clang-1000.11.45.5)\")\r\nBuild machine cpu family: x86_64\r\nBuild machine cpu: x86_64\r\nRunning compile:\r\nWorking directory:  /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp359k27x3\r\nCommand line:  c++ /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp359k27x3/testfile.cpp -pipe -c -o /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp359k27x3/output.obj -O0 -fpermissive \r\n\r\nCode:\r\n #ifndef __WINE__\r\n#error 1\r\n#endif\r\nCompiler stdout:\r\n \r\nCompiler stderr:\r\n /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp359k27x3/testfile.cpp:2:2: error: 1\r\n#error 1\r\n ^\r\n1 error generated.\r\n\r\nChecking if \"winelib check\" compiles: NO\r\nRunning compile:\r\nWorking directory:  /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp56qhmz9k\r\nCommand line:  c++ /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp56qhmz9k/testfile.cpp -pipe -o /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp56qhmz9k/output.exe -O0 -fpermissive \r\n\r\nCode:\r\n #include<stdio.h>\r\n        \r\n        int main(int argc, char **argv) {\r\n            printf(\"%ld\\n\", (long)(sizeof(void *)));\r\n            return 0;\r\n        };\r\nCompiler stdout:\r\n \r\nCompiler stderr:\r\n \r\nProgram stdout:\r\n\r\n8\r\n\r\nProgram stderr:\r\n\r\n\r\nRunning compile:\r\nWorking directory:  /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp9vdx46e0\r\nCommand line:  c++ /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp9vdx46e0/testfile.cpp -pipe -c -o /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp9vdx46e0/output.obj -O0 -fpermissive --print-search-dirs \r\n\r\nCode:\r\n \r\nCompiler stdout:\r\n programs: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\nlibraries: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0\r\n\r\nCompiler stderr:\r\n \r\n\r\nmeson.build:46:2: ERROR:  C++ library 'vulkan-1' not found\r\n`"
      },
      {
        "user": "cdavis5e",
        "created_at": "2019-03-06T17:02:14Z",
        "body": "> But IIRC MoltenVK still do not supports all needed features for DXVK? Or that's changed?\r\n\r\nI'm working on that.\r\n\r\n> Command line: c++ /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp56qhmz9k/testfile.cpp -pipe -o /var/folders/_h/yd9ch_cj15x5vc1p9fhnk90r0000gn/T/tmp56qhmz9k/output.exe -O0 -fpermissive\r\n\r\nDid you pass `--cross-file build-wine64.txt` to `meson(1)`? That sets the compiler to `winegcc`. You should probably change the `system = 'linux'` line to say `system = 'darwin'` in that file, too."
      },
      {
        "user": "SergeySlice",
        "created_at": "2019-03-06T17:38:58Z",
        "body": "OK, I set --cross-file build-wine64.txt and changed 'linux' to darwin. There is a some progress stoped at error '--no-gnu-unique' is invalid option for clang.\r\nThen I erase this option and meson finished successfully.\r\nThen stop with ninja\r\n~~~\r\nfatal error: 'support/win32/locale_win32.h' file not found\r\n# include <support/win32/locale_win32.h>\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\nwinegcc: clang failed\r\nninja: build stopped: subcommand failed.\r\n~~~\r\n\r\n "
      },
      {
        "user": "cdavis5e",
        "created_at": "2019-03-07T20:04:34Z",
        "body": "Hmm... I think what's happening is: `winegcc(1)` defines `_WIN32`, since it's a Windows-like environment, and as a result libc++ is trying to pull in its Windows headers... which Apple naturally doesn't distribute with Xcode. You may need to build and install libc++ yourself. You may also then need to pass `-nostdinc++ -isystem /path/to/libc++/headers` to make this work. Oh, and you'll probably need to use `-mno-cygwin`, since it wants to use a Windows C library.\r\n\r\nI probably need to work on making libc++ play nice with `winegcc(1)`..."
      },
      {
        "user": "SergeySlice",
        "created_at": "2019-03-18T04:39:45Z",
        "body": "Somehow I can compile winehq in this environment with existing clang and libraries."
      },
      {
        "user": "cdavis5e",
        "created_at": "2019-03-18T04:54:27Z",
        "body": "That's because Wine itself isn't written in C++. DXVK is."
      },
      {
        "user": "natbro",
        "created_at": "2019-07-20T15:32:30Z",
        "body": "not sure if y'all sorted this out in a different way by manually building libc++, but it also works against vanilla Xcode 9.4.1 and 10+ to build DXVK by making sure you're passing -U_WIN32 when compiling and -lstdc++ when linking. Undefining _WIN32 when calling winegcc is enough to prevent the low-level __locale header from trying to look for <support/win32/locale_win32.h> without causing other windows header problems."
      }
    ]
  },
  {
    "number": 848,
    "title": "(Shader/dxbc) Reasons to use opNMax,min,clamp instead of opFxxx one?",
    "created_at": "2019-01-08T09:48:55Z",
    "closed_at": "2019-01-21T14:11:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/848",
    "body": "Hi, I am trying to use your dxbc funcs to convert some pre-compiled dx11 shaders to spirv,\r\nthen convert it back to pseudo-hlsl with spirv-cross --hlsl --shader-model 40.\r\n\r\nThe problem is spirv-cross does not process opcodes like unsupported_glsl450_nmax,nmin,nclamp.\r\nI do not know well about shader standards actually.\r\nSo is it safe to change those nmax,nmin,nclamp in your dxbc funcs to FMax,FMin,FClamp?\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/848/comments",
    "author": "Klanly",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2019-01-08T10:05:23Z",
        "body": "The difference between `NMin` and `FMin` is how NaN operands are handled, and `NMin` is needed to emulate Direct3D behaviour. If you know that your shaders don't generate NaNs, then it is safe to make the change."
      },
      {
        "user": "Klanly",
        "created_at": "2019-01-08T14:51:13Z",
        "body": "Ok thanks.\r\nBTW I also found that I have to make this change\r\n\r\n const uint32_t stageOffset = 0; //128 + 160 * uint32_t(shaderStage);\r\n\r\nin **computeResourceSlotId** to let fxc compile the generated code (otherwise it says \"maximum cbuffer exceeded\").\r\n\r\nIs that made for some optimization (not for exact code translating)?\r\nAre there other places also contains this kind of trick(?)s ?\r\n"
      },
      {
        "user": "doitsujin",
        "created_at": "2019-01-08T15:05:11Z",
        "body": "It's not an optimization, it's done to map the D3D11 binding model to something that DXVK can more easily work with internally.\r\n\r\nThere are a lot of DXVK-specific things in the generated code since a lot of D3D11 abstractions don't exist in Vulkan at all (like append/consume buffers) or are handled differently (like raw and structured buffers), and the generated shader code **will** reflect that."
      },
      {
        "user": "Klanly",
        "created_at": "2019-01-09T03:26:39Z",
        "body": "Ok I understand :)"
      }
    ]
  },
  {
    "number": 773,
    "title": "0.80 binary release sha256sum change",
    "created_at": "2018-11-17T22:20:35Z",
    "closed_at": "2018-11-19T15:38:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/773",
    "body": "@doitsujin \r\n\r\n@austin987 and I, are wondering how and/ or why the sha256sum for the tar.gz binary build of **dxvk** version **0.80** has changed since the release date??\r\n\r\nFor reference:\r\n```\r\nsha256sum ~/.cache/winetricks/dxvk80/dxvk-0.80.tar.gz \r\nf9e736cdbf1e83e45ca748652a94a3a189fc5accde1eac549b2ba5af8f7acacb  /home/robert_gentoo/.cache/winetricks/dxvk80/dxvk-0.80.tar.gz\r\n\r\nsha256sum ~/Downloads/dxvk-0.80.tar.gz \r\n7058a834bb006cad5462933110449b434df561e67d83f68d3965ecc74e2e1cbc  /home/robert_gentoo/Downloads/dxvk-0.80.tar.gz\r\n```\r\nThe former file was downloaded on **23 September 2018**.\r\nThe latter file was downloaded today, **17 November 2018**.\r\n\r\nI wasn't aware of re-release of version **0.80**.\r\nThe hash change has been confirmed by multiple other Wine users on IRC.\r\n\r\nIs Github suffering bitrot now that Microsoft have taken over? ;-)\r\nHas the binary been rebuilt for some reason?\r\n\r\nAny thoughts?\r\n\r\nThanks, Bob\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/773/comments",
    "author": "bobwya",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2018-11-17T22:25:37Z",
        "body": "The current file is definitely valid, the checksum matches that of the file that I still have lying around. It was rebuilt with a clean GCC 8.2 toolchain, IIRC because someone was complaining about seeing references to two different gcc versions in the binaries."
      },
      {
        "user": "austin987",
        "created_at": "2018-11-17T23:22:13Z",
        "body": "It would be helpful for us if that was documented somewhere. Even better if you use a different filename, e.g. -r1, but your call, of course."
      },
      {
        "user": "bobwya",
        "created_at": "2018-11-19T15:38:56Z",
        "body": "@doitsujin \r\n\r\nThanks for the info!"
      }
    ]
  },
  {
    "number": 743,
    "title": "Q- Does RenderDoc run with DXVK on?",
    "created_at": "2018-10-30T14:45:51Z",
    "closed_at": "2018-10-30T17:44:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/743",
    "body": "Does RenderDoc run with DXVK on or should I turn it off?\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/743/comments",
    "author": "Ahmed-E-86",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2018-10-30T15:06:46Z",
        "body": "Renderdoc generally works with DXVK."
      },
      {
        "user": "Ahmed-E-86",
        "created_at": "2018-10-30T15:25:29Z",
        "body": "I couldn't run any DX11 games with DXVK on. It works with DXVK off."
      },
      {
        "user": "Ahmed-E-86",
        "created_at": "2018-10-30T17:44:12Z",
        "body": "Oh sorry, I can use the Linux version and capture using Vulkan. My mistake!"
      }
    ]
  },
  {
    "number": 682,
    "title": "Self Compiled Wine",
    "created_at": "2018-10-03T14:46:46Z",
    "closed_at": "2018-11-24T19:06:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/682",
    "body": "I compile wine from source, and use that exclusively to play WoW.  When I install the new dxvk releases, using winetricks and the setup verb, if I compile and install a new copy of wine, do I need to reinstall dxvk? Are the dxgi and other files overwritten by my wine builds when I install my compiled wine?",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/682/comments",
    "author": "SteveEbey73742",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2018-10-03T15:26:48Z",
        "body": "Don't know, why don't you just try it out?"
      },
      {
        "user": "tgharib",
        "created_at": "2018-10-03T18:59:25Z",
        "body": "No, you shouldn't need to reinstall DXVK. DXVK are DLLs in your game directory which aren't affected by a wine re-installation."
      },
      {
        "user": "Guy1524",
        "created_at": "2018-10-03T19:05:34Z",
        "body": "@tgharib that is just false, DXVK dlls are copied to the prefix's system32 and syswow64 directories.  There is a good chance wine overwrites these."
      },
      {
        "user": "ryao",
        "created_at": "2018-10-03T19:12:31Z",
        "body": "Just set DXVK_HUD=1 in the environment after a wine upgrade and check to see if the HUD still appears."
      },
      {
        "user": "Leopard1907",
        "created_at": "2018-10-03T19:23:54Z",
        "body": "Probably compiling a new build every time will nuke DXVK and probably prefixes you've made.\r\n\r\nIf you're not cherry picking , why not use Wine normally? Let it be staging or devel."
      },
      {
        "user": "SteveEbey73742",
        "created_at": "2018-10-03T19:47:20Z",
        "body": "@doitsujin , I will, and let you know how it goes, staging updates about every 3 days, so that is how often I build new wine from source.  On the next build, after install I will run and see if the fps are affected.\r\n@Leopard1907, No, the prefix is not nuked, when I install new versions, that I compiled.  Been compiling since wine 2.19. Wine staging is the only way WoW would run, and before PBA and DXVK, the best fps was around 12, using same settings as my windows 10, which was running around 130 in the same areas in game. PBA was the first external patch I used, and it was good, but BFA dropped DX9 support, and DXVK gives good DX11 support. PBA does not benefit DX11 much, because wine itself is still working on DX11. \r\n@ryao, I have that already, and as stated to @doitsujin , I will see if my next compile and install overwrites the dlls that DXVK installs.\r\n@tgharib , what @Guy1524  told you is correct, if you look at the setup_dxvk.verb in the dxvk folder, you will see it copes to the windows system folders, in your wine prefix."
      },
      {
        "user": "Leopard1907",
        "created_at": "2018-10-03T19:51:41Z",
        "body": "Then why don't you use Staging binaries if you're not cherry picking? I'm also using Staging with binaries and DXVK stays there after updates."
      },
      {
        "user": "SteveEbey73742",
        "created_at": "2018-10-03T19:54:43Z",
        "body": "@Leopard1907 , I compile, to take maximum advantage of my CPU, by compiling the code to match the architecture of my CPU.  "
      },
      {
        "user": "jrugia",
        "created_at": "2018-10-03T22:38:27Z",
        "body": "If you want to be on the safe side, simply put the dll's in the game's folder, set them to native from winecfg and you're done.\r\n\r\nWhenever I upgrade to a newer version of Wine, I normally move the game's folder outside the prefix then I recreate the prefix anew and move the game back in."
      },
      {
        "user": "SveSop",
        "created_at": "2018-10-04T06:14:56Z",
        "body": "@Jrugia That will most likely not work, as windows uses \"system dll's\" most of the time. Putting the DXVK dll's in the gamefolder (World of Warcraft) i do not think works, as loads of other stuff also loads alongside (Battle.net++) that are in different folders, and tend to load .dll's from windows system folders. (Also think this has been explained someplace else... has to do with some way windows 7 and newer loads stuff)\r\n\r\n@SteveEbey73742 I dont use the winetricks install, so i am not entirely sure HOW that is done... But i think the setup script in the DXVK archive does pretty much the same i do:\r\n1. Compile/extract whatever version of DXVK in a folder of your choosing. (eg. $HOME/dxvk)\r\n2. Delete the wine created d3d11.dll and other DXVK dll's and then replace them with symlinks to the respective 32 and 64 bit dll's in your wineprefix windows/system32 (64 bit) and windows/syswow64 (32 bit).\r\n3. Set up .DLL overrides in winecfg\r\n\r\nThat way the only thing you need to do when upgrading DXVK is to replace your DXVK folder (Symlinks still works). Upgrading wine does NOT replace symlinks inside your prefix, so you can swap wine versions as much as you want with that wineprefix.\r\n\r\nIf you want to disable DXVK, delete the symlinks and dll overrides and do a wineboot -u or similar to replace the missing dll's with wine defaults.\r\n\r\nPS. I am at work atm, so typing a guide from memory would probably suck... If you want @SteveEbey73742 i can make up a quick one for all the symlink creation you want?"
      },
      {
        "user": "SteveEbey73742",
        "created_at": "2018-10-04T12:03:31Z",
        "body": "@SveSop , I am running the latest dxvk and there is no setup script, just the winetricks verb. as to the other comments made, I have the windows folders for WoW symlinked to the wine prefix I use, and that works just fine. As stated in one of my earlier replies here, I will compile wine when staging updates, and see what happens when I install wine.  If it does overwrite the dlls for dxvk, I will know.  Once I do that I will post here, and close this issue."
      },
      {
        "user": "SveSop",
        "created_at": "2018-10-04T13:11:15Z",
        "body": "@SteveEbey73742 Oh, i see that now. It used to have a \"install script\" included.\r\n\r\nI can't say i know how to read or interpret the setup_dxvk.verb... Probably winetricks \"understands\" whatever references in that one :) (\"/usr/lib64/wine/dxvk\" ? What folder is that?)\r\n\r\nWhen i do it \"my way\", its a bit more work when i do it, but no need to ever change it for that wineprefix, and it works with changing wine versions and dxvk versions :)\r\n\r\nHmm.. i might fire up a VM just to check what that script does tho :)"
      },
      {
        "user": "jrugia",
        "created_at": "2018-10-04T19:29:46Z",
        "body": "> @Jrugia That will most likely not work, as windows uses \"system dll's\" most of the time. Putting the DXVK dll's in the gamefolder (World of Warcraft) i do not think works, as loads of other stuff also loads alongside (Battle.net++) that are in different folders, and tend to load .dll's from windows system folders. (Also think this has been explained someplace else... has to do with some way windows 7 and newer loads stuff)\r\n> \r\n> @SteveEbey73742 I dont use the winetricks install, so i am not entirely sure HOW that is done... But i think the setup script in the DXVK archive does pretty much the same i do:\r\n> \r\n>     1. Compile/extract whatever version of DXVK in a folder of your choosing. (eg. $HOME/dxvk)\r\n> \r\n>     2. Delete the wine created d3d11.dll and other DXVK dll's and then replace them with symlinks to the respective 32 and 64 bit dll's in your wineprefix windows/system32 (64 bit) and windows/syswow64 (32 bit).\r\n> \r\n>     3. Set up .DLL overrides in winecfg\r\n> \r\n> \r\n> That way the only thing you need to do when upgrading DXVK is to replace your DXVK folder (Symlinks still works). Upgrading wine does NOT replace symlinks inside your prefix, so you can swap wine versions as much as you want with that wineprefix.\r\n> \r\n> If you want to disable DXVK, delete the symlinks and dll overrides and do a wineboot -u or similar to replace the missing dll's with wine defaults.\r\n> \r\n> PS. I am at work atm, so typing a guide from memory would probably suck... If you want @SteveEbey73742 i can make up a quick one for all the symlink creation you want?\r\n\r\nI don't know about WoW, but it works well with the offline games I play."
      },
      {
        "user": "SteveEbey73742",
        "created_at": "2018-10-11T16:20:38Z",
        "body": "Updated wine, installed it, and it appears to leave the dxvk files alone.  I ran WoW, and dxvk shows to have the same performance, maybe 1-2 fps higher, with the latest staging patches.  I have also had vulkan update, and installed the newest dxvk release, so will test those as well.  "
      },
      {
        "user": "garpu",
        "created_at": "2018-10-31T23:40:08Z",
        "body": "Can confirm. I use wine-staging I've compiled myself and dxvk for WoW. I've never needed to reinstall dxvk after upgrading WINE."
      }
    ]
  },
  {
    "number": 675,
    "title": "Using dxvk to faciliate game engine porting",
    "created_at": "2018-09-28T16:19:39Z",
    "closed_at": "2019-02-28T14:17:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/675",
    "body": "Hello, fellow developers. \r\n\r\nI am wondering, how hard using DXVK as a wrapper for Linux ports to minimize work?\r\n\r\nAll that I understood on this moment: DXVK provides DXGI(which initializes the D3D10/11 driver) and D3D10/11 implementation DLLs. For build it requires Wine headers. \r\nSo, for example, I am porting some game engine with D3D10 and D3D11 renderer backends. Game engine successfully initializes Vulkan with SDL2. Windows build already works fine with DXVK on Wine. Then... \r\n1) Do I need DXVK's DXGI to be compiled-in to engine? Can I use just DXVK's D3D10/11 wrapper? \r\n2) Can I just use Wine's definitions, not the code(winelib) itself?\r\n\r\nDon't know if it was posted before, if so, sorry for taking your time.",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/675/comments",
    "author": "a1batross",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2018-09-28T16:54:42Z",
        "body": "It's an interesting use case, but I don't think it's feasible to use DXVK for porting right out of the box **unless** your entire port is based on winelib. DXGI is tightly coupled to the win32 window management API, which causes a number of issues: \r\n\r\n- Implementations of `IDXGISwapChain` and `IDXGIOutput` would have to be rewritten against whatever you use for window management (in this case, SDL2). It currently uses raw win32 functions.\r\n- Linux window system support would need to be added to the backend so that DXVK can create a `VkSurface` for your window.\r\n- Some other win32-specific stuff would need to be rewritten or removed, but those should be simple.\r\n\r\nI haven't explored the option of using DXVK for native apps yet, so there might be more potential issues."
      },
      {
        "user": "a1batross",
        "created_at": "2018-09-28T17:16:24Z",
        "body": "Thanks for answer! :)\n\nPort isn't based on winelib, as using wine is not an option. \nIf I will get something working, I will send a PR. Currently I just patched meson buildscripts a little."
      },
      {
        "user": "shmerl",
        "created_at": "2018-09-30T04:06:26Z",
        "body": "Why using Wine/winelib is not an option though, if you are ready to use wrapping in general?"
      },
      {
        "user": "gasinvein",
        "created_at": "2018-10-05T22:38:02Z",
        "body": "Feral would be interested in this, for sure."
      },
      {
        "user": "a1batross",
        "created_at": "2018-10-06T00:46:03Z",
        "body": "@shmerl because it needs wine as a dependency. Also, winelib doesn't give any serious advantages at all.\r\n@gasinvein for sure."
      }
    ]
  },
  {
    "number": 8,
    "title": "d3d11-triangle sample crashes nvidia shader compiler",
    "created_at": "2018-01-16T20:05:28Z",
    "closed_at": "2018-02-03T07:41:04Z",
    "labels": [
      "bug",
      "help wanted",
      "nvidia proprietary"
    ],
    "url": "https://github.com/doitsujin/dxvk/issues/8",
    "body": "The d3d11-triangle sample program crashes with the attached backtrace.\r\n\r\n**System information:**\r\nWine version: 2.21 (Staging)\r\nGPU: GTX 1050\r\nDriver version: 384.111\r\n\r\nTweaking the vertex shader code in the sample to remove the buffer and fixing the color output runs without errors.\r\n\r\n```\r\n$ WINEDLLOVERRIDES=d3d11,dxgi,d3dcompiler_47=n  /opt/wine-staging/bin/winedbg d3d11-triangle.exe \r\nfixme:winediag:start_process Wine Staging 2.21 is a testing version containing experimental patches.\r\nfixme:winediag:start_process Please mention your exact version when filing bug reports on winehq.org.\r\nWineDbg starting on pid 002e\r\n0x7b461733: subl        $8,%esp\r\nWine-dbg>c\r\nfixme:vulkan:vkGetInstanceProcAddr \"vkCreateDebugReportCallbackEXT\" not supported\r\nfixme:vulkan:vkGetInstanceProcAddr \"vkDestroyDebugReportCallbackEXT\" not supported\r\nfixme:vulkan:vkGetInstanceProcAddr \"vkDebugReportMessageEXT\" not supported\r\nUnhandled exception: page fault on read access to 0x00000008 in 32-bit code (0x797d633d).\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nerr:dbghelp_stabs:stabs_pts_read_type_def Unknown type ','\r\nRegister dump:\r\n CS:0023 SS:002b DS:002b ES:002b FS:0063 GS:006b\r\n EIP:797d633d ESP:0090d900 EBP:7c7cd0a8 EFLAGS:00010246(  R- --  I  Z- -P- )\r\n EAX:00000000 EBX:00000000 ECX:00002d3c EDX:7aef1ae0\r\n ESI:0090d910 EDI:00000000\r\nStack dump:\r\n0x0090d900:  7ad83880 0090d910 00000000 00000000\r\n0x0090d910:  00000000 00002d3c 00000000 00000000\r\n0x0090d920:  00000000 7ad5b338 00000021 00000000\r\n0x0090d930:  00000000 00000548 00000000 00000000\r\n0x0090d940:  00000000 00000000 00000000 00000000\r\n0x0090d950:  00000000 00000000 0090d978 7ad42a99\r\nBacktrace:\r\n=>0 0x797d633d in libnvidia-glcore.so.384.111 (+0x3d733d) (0x7c7cd0a8)\r\n  1 0x79889c98 in libnvidia-glcore.so.384.111 (+0x48ac97) (0x7ad42a47)\r\n  2 0x7989619a in libnvidia-glcore.so.384.111 (+0x497199) (0x7c6d7d2c)\r\n  3 0x79897f8f in libnvidia-glcore.so.384.111 (+0x498f8e) (0x00000000)\r\n  4 0x7976753f in libnvidia-glcore.so.384.111 (+0x36853e) (0x00000000)\r\n  5 0x79767dee in libnvidia-glcore.so.384.111 (+0x368ded) (0x7c7cd918)\r\n  6 0x7a6100ef in libnvidia-glcore.so.384.111 (+0x12110ee) (0x0090dfb8)\r\n  7 0x7a621903 in libnvidia-glcore.so.384.111 (+0x1222902) (0x00006100)\r\n  8 0x7a623f59 in libnvidia-glcore.so.384.111 (+0x1224f58) (0x7d623338)\r\n  9 0x7ac4c286 in libnvidia-glcore.so.384.111 (+0x184d285) (0x7d6210b8)\r\n  10 0x7ac4c739 in libnvidia-glcore.so.384.111 (+0x184d738) (0x00168a98)\r\n  11 0x7ac51b80 in libnvidia-glcore.so.384.111 (+0x1852b7f) (0x7d6210b8)\r\n  12 0x7ac5ac66 in libnvidia-glcore.so.384.111 (+0x185bc65) (0x00000000)\r\n  13 0x7ed27fed vkCreateGraphicsPipelines+0x7c() in vulkan (0x0090e948)\r\n  14 0x6a5d5c7c _ZNK4dxvk2vk8VulkanFnIPU7stdcallF8VkResultP10VkDevice_TyjPK28VkGraphicsPipelineCreateInfoPK21VkAllocationCallbacksPyEEclES4_yjS7_SA_SB_+0x4b(args#0=0x7dd89ac0, args#1=0x7d822f58, args#2=0x1, args#3=0x90ea28, args#4=(nil), args#5=0x90ea20) [/home/kant/Source/dxvk/build.win32/../src/dxvk/./vulkan/dxvk_vulkan_loader_fn.h:39] in d3d11 (0x0090e998)\r\n  15 0x6a56c288 _ZNK4dxvk20DxvkGraphicsPipeline15compilePipelineERKNS_29DxvkGraphicsPipelineStateInfoEy+0x9ef(state=0x926918, baseHandle=0) [/home/kant/Source/dxvk/build.win32/../src/dxvk/dxvk_graphics.cpp:239] in d3d11 (0x0090f4e8)\r\n  16 0x6a56b757 _ZN4dxvk20DxvkGraphicsPipeline17getPipelineHandleERKNS_29DxvkGraphicsPipelineStateInfoE+0x156(state=0x926918) [/home/kant/Source/dxvk/build.win32/../src/dxvk/dxvk_graphics.cpp:83] in d3d11 (0x0090fae8)\r\n  17 0x6a5645da _ZN4dxvk11DxvkContext27updateGraphicsPipelineStateEv+0x109() [/home/kant/Source/dxvk/build.win32/../src/dxvk/dxvk_context.cpp:1011] in d3d11 (0x0090fb38)\r\n  18 0x6a565b85 _ZN4dxvk11DxvkContext19commitGraphicsStateEv+0x4e() [/home/kant/Source/dxvk/build.win32/../src/dxvk/dxvk_context.cpp:1262] in d3d11 (0x0090fb58)\r\n  19 0x6a562393 _ZN4dxvk11DxvkContext4drawEjjjj+0x14(vertexCount=0x3, instanceCount=0x1, firstVertex=0, firstInstance=0) [/home/kant/Source/dxvk/build.win32/../src/dxvk/dxvk_context.cpp:464] in d3d11 (0x0090fb88)\r\n  20 0x6a54702b _ZN4dxvk18D3D11DeviceContext4DrawEjj@12+0x38(this=0x924d18, VertexCount=0x3, StartVertexLocation=0) [/home/kant/Source/dxvk/build.win32/../src/d3d11/d3d11_context.cpp:759] in d3d11 (0x0090fba8)\r\n  21 0x0041e518 _ZN11TriangleApp3runEv+0x2bf() [/home/kant/Source/dxvk/build.win32/../tests/d3d11/test_d3d11_triangle.cpp:281] in d3d11-triangle (0x0090fc18)\r\n  22 0x00401731 WinMain@16+0x200(hInstance=0x400000, hPrevInstance=(nil), lpCmdLine=\"\", nCmdShow=0xa) [/home/kant/Source/dxvk/build.win32/../tests/d3d11/test_d3d11_triangle.cpp:407] in d3d11-triangle (0x0090fd48)\r\n  23 0x004b839d in d3d11-triangle (+0xb839c) (0x0090fd68)\r\n  24 0x004013e3 in d3d11-triangle (+0x13e2) (0x0090fe40)\r\n  25 0x7b460519 call_process_entry+0x18() in kernel32 (0x0090fe68)\r\n  26 0x7b46173d in kernel32 (+0x4173c) (0x0090feb8)\r\n  27 0x7bca5f80 call_thread_func_wrapper+0xb() in ntdll (0x0090fedc)\r\n  28 0x7bca9379 in ntdll (+0x69378) (0x0090ffcc)\r\n  29 0x7bca5f5e RtlRaiseException+0x49() in ntdll (0x0090ffec)\r\n0x797d633d: movl        0x8(%eax),%eax\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/doitsujin/dxvk/issues/8/comments",
    "author": "dpalacio",
    "comments": [
      {
        "user": "doitsujin",
        "created_at": "2018-02-03T07:41:04Z",
        "body": "Fixed in a567f6a5a51c3478f7ba9b0ed39f22a83be1f6cc."
      }
    ]
  }
]