[
  {
    "number": 2988,
    "title": "whether isObject is correct for new Boolean",
    "created_at": "2023-09-15T13:43:10Z",
    "closed_at": "2023-09-19T19:57:42Z",
    "labels": [
      "fixed",
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2988",
    "body": "```javascript\r\nconsole.log(_.isObject(new Boolean(true))) // true\r\nconsole.log(typeof new Boolean(0)) // 'object'\r\n```",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2988/comments",
    "author": "yihan12",
    "comments": [
      {
        "user": "yihan12",
        "created_at": "2023-09-15T14:09:35Z",
        "body": "And these...\r\n```javascript\r\n\r\nconsole.log(_.isString(new String())) // true\r\nconsole.log(typeof new String()) // 'object'\r\n\r\nconsole.log(_.isNumber(new Number())) // true\r\nconsole.log(typeof new Number()) // 'object'\r\n\r\n\r\nconsole.log(_.isBoolean(new Boolean())) // true\r\nconsole.log(typeof new Boolean()) // 'object'\r\n\r\nconsole.log(_.isArray(new Array())) // true\r\nconsole.log(typeof new Array()) // 'object'\r\n\r\n```"
      },
      {
        "user": "jgonggrijp",
        "created_at": "2023-09-19T19:57:42Z",
        "body": "@yihan12 Thank you for reaching out.\r\n\r\nThe `typeof` operator distinguishes only six types: `undefined`, `boolean`, `number`, `string`, `function` and `object`. You will notice that Underscore can distinguish more types than that.\r\n\r\nWhen you do `new Number()`, you create an object-wrapped number. It is a number and an object at the same time. Consider the following series:\r\n\r\n```js\r\n_.isNumber(4) // true\r\n_.isObject(4) // false\r\n_.isNumber(new Number(4)) // true\r\n_.isObject(new Number(4)) // true\r\n_.isNumber({}) // false\r\n_.isObject({}) // true\r\n_.isNumber(new Number(4).valueOf()) // true\r\n_.isObject(new Number(4).valueOf()) // false\r\n```\r\n\r\nUnderscore can also distinguish arrays, dates, buffers, maps and many other creatures. The `typeof` operator would say `object` to all of those."
      }
    ]
  },
  {
    "number": 2811,
    "title": "How do you display total number of records in a template?",
    "created_at": "2019-06-10T18:28:08Z",
    "closed_at": "2020-04-07T19:37:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2811",
    "body": "I'm having trouble getting any answers on underscore.js on stackoverflow, so I'm just going to ask here. How do you display the total number of records in a template? In this example, how would I display totalNum?\r\n\r\n<script type=\"text/template\" id='templatePropertyLot'>\r\n    <%  _.each(items,function(item,key,list) { %>\r\n        <div class=\"popup_wrapper\">\r\n            <div class=\"header\" id=\"count_of_addresses\"><span id=\"currNum\"><%- key + 1 %></span> of <span id=\"totalNum\"></span> addresses in this search</div>\r\n        </div>  \r\n    <% }); %>\r\n</script>",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2811/comments",
    "author": "lschneiderman",
    "comments": [
      {
        "user": "spattanaik75",
        "created_at": "2019-07-03T14:17:56Z",
        "body": "shouldn't it be \r\n\r\n_.each(items,function(item,key,items) { %>\r\n<%- items.length %> of addresses in this search\r\n<% });\r\n\r\n"
      },
      {
        "user": "jgonggrijp",
        "created_at": "2020-04-07T19:37:33Z",
        "body": "For future reference, if your `items` looks like this:\r\n\r\n```js\r\n[{id: 100}, {id: 101}]\r\n```\r\n\r\nThen you can render something for each `item` and then display the total number of them at the end like this:\r\n\r\n```erb\r\n<% _.each(items, function(item, index, list) { %>\r\n    <!-- print whatever you want about each `item` here -->\r\n<% }); %>\r\nTotal number of items: <%= items.length %>\r\n```\r\n\r\nIf you want to tally during iteration to show something like “item 5 of 10”, this will work:\r\n\r\n```erb\r\n<% _.each(items, function(item, index, list) { %>\r\n    This is item <%= index %> of <%= list.length %>.\r\n<% }); %>\r\n```\r\n\r\n@lschneiderman @spattanaik75 "
      }
    ]
  },
  {
    "number": 2797,
    "title": "Logic attempting to reference the global object is overly complicated",
    "created_at": "2019-01-25T19:27:58Z",
    "closed_at": "2019-01-30T17:38:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2797",
    "body": "In the way this line is run, the - this - object *is* a reference to the global (referred to as \"root\" here) object, so the rest of this can be discarded. Found it odd that there was a fallback to a newly constructed Object object (what good would that do in this context?), which seemed to indicate a lack of confidence in the expression leading up to it. The comment doesn't match the logic either.\r\n\r\n  // Establish the root object, `window` (`self`) in the browser, `global`\r\n  // on the server, or `this` in some virtual machines. We use `self`\r\n  // instead of `window` for `WebWorker` support.\r\n  var root = typeof self == 'object' && self.self === self && self ||\r\n            typeof global == 'object' && global.global === global && global ||\r\n            this ||\r\n            {};",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2797/comments",
    "author": "david-mark",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2019-01-30T17:38:51Z",
        "body": "David Mark! Good to hear from you!\r\n\r\nPeople have used Underscore in all kinds of strange places — old browsers, Node.js, Narwhal, Adobe Illustrator, with AMD, UMD, various module systems, and so on...\r\n\r\nThat initial bit of code attempts to safely find the global namespace, whatever the JS environment might be, so that we can restore the previous definition of `_`, in the case that you later call `_.noConflict()` (and also to sniff for old browser globals).\r\n\r\nIf no global namespace exists, we use an empty one, instead of putting conditionals everywhere the script later mentions `root`. Of course, you could do it either way."
      },
      {
        "user": "david-mark",
        "created_at": "2019-01-30T20:24:27Z",
        "body": "Nothing strange about any of those places. And ISTM that it should just throw an exception if no global object is found (a scenario impossible in a standards-compliant ECMAScript implementation).\r\n\r\nAnyway, as mentioned, you need only:\r\n\r\nvar root = this;\r\n\r\n...and I expect you previously had a 'use strict' directive in here, right? That's the only possible way that you could have been led down the path to the current code (not that it would be right in that case either, but similar mistakes are common).\r\n\r\nAfter nine years and who knows how many sets of eyes, it would be nice to get the first line right. ;)"
      },
      {
        "user": "david-mark",
        "created_at": "2019-01-30T20:42:32Z",
        "body": "Also, why do you feel the need to \"sniff for old browser globals\"? As in host objects found only in old browsers? I don't have the stomach to read past the first line of this thing (certainly not in 2019), but that sure sounds like browser sniffing.\r\n\r\nI assume this library has come and gone. Found it in a framework and experienced deja vu with that first line. React and other libraries do similar things; as do AMD implementations, UMD, jQuery, etc. Open source developers have a responsibility to set good examples, but few seem to live up to it; always in a hurry to close issues without taking the time to understand them.\r\n\r\nGood luck to you! :)\r\n"
      }
    ]
  },
  {
    "number": 2780,
    "title": "Documentation Site has very small font.",
    "created_at": "2018-10-08T08:58:18Z",
    "closed_at": "2021-12-15T14:49:11Z",
    "labels": [
      "question",
      "documentation"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2780",
    "body": "Hi,\r\n\r\nDocumentation is in small font, have to zoom in every time needs to see document. can you increase font?\r\n\r\nThanks,\r\nGajanan.",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2780/comments",
    "author": "GajananMore",
    "comments": [
      {
        "user": "HZooly",
        "created_at": "2018-12-01T22:40:00Z",
        "body": "@GajananMore Font size seems correct. I'm using Chrome 70 on macOS"
      },
      {
        "user": "jgonggrijp",
        "created_at": "2020-04-20T23:56:56Z",
        "body": "@GajananMore Sorry to hear that you found the documentation difficult to read. Do you still have this problem?\r\n\r\nIf you still have this problem, please tell us some details about your operating system, hardware and browser version. Perhaps also show us a screenshot. Thanks in advance."
      },
      {
        "user": "bnjmnt4n",
        "created_at": "2020-05-04T09:42:15Z",
        "body": "This is probably related to the website being not very mobile-friendly."
      }
    ]
  },
  {
    "number": 2776,
    "title": "_.template, how could I handle variables with whitespace",
    "created_at": "2018-08-09T04:42:31Z",
    "closed_at": "2020-04-21T00:23:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2776",
    "body": "i have a json with key having whitespace within it (e.g. key 1)\r\nhow could I pass the value to <%= key 1 %> without error?",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2776/comments",
    "author": "aczone",
    "comments": [
      {
        "user": "skaarj1989",
        "created_at": "2018-12-09T18:07:55Z",
        "body": "`<%= obj[\"key 1\"] %>` or `<%= obj[\\\"key 1\\\"] %>`"
      },
      {
        "user": "jgonggrijp",
        "created_at": "2020-04-21T00:23:46Z",
        "body": "I think the answer by @skaarj1989 is correct."
      }
    ]
  },
  {
    "number": 2712,
    "title": "about isFunction",
    "created_at": "2017-11-19T06:34:02Z",
    "closed_at": "2017-12-04T15:19:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2712",
    "body": "\r\n`if (typeof /./ != 'function' && typeof Int8Array != 'object') {\r\n    _.isFunction = function(obj) {\r\n      return typeof obj == 'function' || false;\r\n    };\r\n  }`\r\nif the expression\r\n(typeof /./ != 'function' && typeof Int8Array != 'object')\r\nresult is false, the isFunciton will be undefined\r\nthere will be error when some else function call isFunction?\r\nthanks\r\n[english bad, sorry]",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2712/comments",
    "author": "zhangenming",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2017-12-04T15:19:22Z",
        "body": "This is, if I recall correctly, a bugfix for Safari.\r\n\r\nIn the future please ask questions to StackOverflow or the mailing list. Thanks!"
      }
    ]
  },
  {
    "number": 2705,
    "title": "_.uniq iteratee function, when run on sorted array, can return extra value sometimes ",
    "created_at": "2017-10-25T08:22:36Z",
    "closed_at": "2017-11-09T20:06:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2705",
    "body": "My understanding is that iteratee in these examples will transform the array to true or false values, get the two unique values, and then return the original values that were the cause of the two unique transformations. \r\n\r\nSo in Ex 1 below, the transformed array would be: [false, false, false, true, false, false], so the two unique values would be 1 (false) and 3 (true). For sorted arrays like this, when the 'odd man out' value is separated by at least one other number from the first of the 'commoners', and has some different numbers following it, the result includes the following 'opposite' value as well (in this case, 4).\r\n\r\n(tested 10/24/17 in jsbin with \"underscore\" library added - no version number given)\r\n\r\n```\r\n\r\nvar numbers = [1, 2, 2, 3, 4, 4];\r\n\r\nvar iteratee = function(value) { return value === 3; };\r\nvar un = _.uniq(numbers, true, iteratee); // [1, 3, 4]    <-------- Ex 1\r\nvar un = _.uniq(numbers, false, iteratee); // [1, 3]\r\n\r\nvar iteratee = function(value) { return value === 1; };\r\nvar un = _.uniq(numbers, true, iteratee); // [1, 2]  <--- is ok\r\nvar un = _.uniq(numbers, false, iteratee); // [1, 2]\r\n\r\nvar iteratee = function(value) { return value === 4; };\r\nvar un = _.uniq(numbers, true, iteratee); // [1, 4]  <--- is ok\r\nvar un = _.uniq(numbers, false, iteratee); // [1, 4]\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2705/comments",
    "author": "darren-a",
    "comments": [
      {
        "user": "darren-a",
        "created_at": "2017-10-25T20:01:15Z",
        "body": "As a point of comparison results for lodash 4.x (tested with jsbin today; slightly different function, does not care about ordering -> so really is no different to underscore with isSorted = false) returns following:\r\n\r\n```\r\nvar numbers = [1, 2, 2, 3, 4, 4];\r\n\r\nvar iteratee = function(value) { return value === 3; };\r\nvar un = _.uniqBy(numbers, iteratee); // [1, 3]\r\n\r\n//var iteratee = function(value) { return value === 1; };\r\n//var un = _.uniqBy(numbers, iteratee); // [1, 2]\r\n\r\n//var iteratee = function(value) { return value === 4; };\r\n//var un = _.uniqBy(numbers, iteratee); // [1, 4]\r\n```\r\n"
      },
      {
        "user": "darren-a",
        "created_at": "2017-10-28T06:11:12Z",
        "body": "I see why this is happening. In my \"transform\" there is no 1 to 1 mapping from x to f(x), as it's actually a test and not a transform. Therefore the iSorted efficiency gain won't yield expected results; or to put it another way, I shouldn't have fed _.uniq with a non-transforming iteratee.\r\n\r\n(comment added 25min after writing the above):\r\n\r\n**...but** the whole point of the transform is: \"If you want to compute unique items based on a transformation, pass an iteratee function.\" The corollary of this is that the uniqueness properties of the o/p set X' could possibly be different to the uniqueness properties of the i/p set X (otherwise why bother looking at the transformed values?). \r\n\r\nThis then implies that we can't always rely on the ordering of the original array - when an iteratee is in use - as the ordering may be affected by the transform. IOW should this:\r\n\r\n``` \r\nif (isSorted) {\r\n  if (!i || seen !== computed) result.push(value);\r\n  seen = computed;\r\n```\r\n\r\nbe this: ( ! before 'i' could be confusing, hence parens))\r\n\r\n```\r\nif (isSorted && !(iteratee)) {\r\n  if (!i || seen !== computed) result.push(value);\r\n  seen = computed; \r\n```\r\n"
      },
      {
        "user": "xcoderYang",
        "created_at": "2017-10-31T07:35:04Z",
        "body": "if isSorted is true, 'computed' just compare with 'seen'.in Ex1,numbers is not sorted actually.\r\n\r\n`computed = iteratee ? iteratee(value, i, array) : value;`\r\n\r\nin Ex1 numbers = [1, 2, 2, 3, 4, 4] . it is just look like sorted . but the array is [false, false, false,true, false, false] .The array is not sorted.\r\n\r\nand  numbers = [1, 2, 2, 4, 4, 3] or numbers = [3, 1, 2, 2, 4, 4]  is sorted\r\n\r\nbecause the array is [false, false, false, false, false, true] or [true, false, false, false, false, false] "
      },
      {
        "user": "darren-a",
        "created_at": "2017-10-31T07:58:57Z",
        "body": "Ex1 does use a sorted array, prior to applying any kind of transform. I assume the caller of uniq can only really specify the 'sortedness' of the collection prior to applying a transform.\r\n\r\nIt seems that, if given a sorted collection, the transform that uniq applies cannot impose its own ordering, ie. 'un-order' the collection, since that could render an inaccurate result."
      },
      {
        "user": "jashkenas",
        "created_at": "2017-11-09T20:06:10Z",
        "body": "I'm afraid this is behaving as expected: You passed `isSorted=true`, but the values you were trying to compare were `[false, false, false, true, false, false]` ... which isn't sorted. This will break every time."
      }
    ]
  },
  {
    "number": 2667,
    "title": "Uncaught TypeError: _.where is not a function",
    "created_at": "2017-04-20T08:11:22Z",
    "closed_at": "2017-04-20T20:53:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2667",
    "body": "Hello there,\r\n\r\nI imported Underscore in the following way.\r\n\r\nImport _ from 'underscore'\r\n\r\nBut when calling the .where method I get a Uncaught TypeError: _.where is not a function error.\r\n\r\nExample code:\r\n\r\nVar people = [\r\n     {Name: \"Tom\", age: 21},\r\n     {Name: \"Tom\", age: 22},\r\n     {Name: \"Tom\", age: 22}\r\n];\r\n\r\nVar found = _.where (people, {age: 22})",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2667/comments",
    "author": "abizden",
    "comments": [
      {
        "user": "abizden",
        "created_at": "2017-04-20T08:12:13Z",
        "body": "Version: \"underscore\": \"^1.8.3\""
      },
      {
        "user": "akre54",
        "created_at": "2017-04-20T20:53:07Z",
        "body": "Please use StackOverflow or the gitter channel for debugging help. "
      }
    ]
  },
  {
    "number": 2664,
    "title": "Syntax highlighting in IDE ?",
    "created_at": "2017-03-26T05:19:19Z",
    "closed_at": "2017-04-04T14:53:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2664",
    "body": "Any known syntax highlighting options for Javascript templates using the default Underscore delimiters \"<% ... %>\"?\r\n\r\nI'm using Visual Studio Code. Would like to have:\r\n`<%` Highlighted Javascript in here `%>` \r\nRecommendations ?",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2664/comments",
    "author": "safizn",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2017-04-04T14:53:03Z",
        "body": "No clue, sorry. Maybe bring up with the VSCode folks..."
      }
    ]
  },
  {
    "number": 2662,
    "title": "_.map on undefined/null returns an empty array",
    "created_at": "2017-03-15T15:45:35Z",
    "closed_at": "2017-03-15T15:46:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2662",
    "body": "Current behaviour of ```_.map```: \r\n```js\r\nconst foo = _.map(undefined, x => x) // []\r\nconst bar = _.map(null, x => x) // []\r\n``` \r\nIs this normal behaviour? I would expect calling _.map on undefined/null to also return undefined/null.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2662/comments",
    "author": "wizzy25",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2017-03-15T15:46:55Z",
        "body": "I believe that's something that was requested and settled in the past — there's probably a ticket lying around deep in the pile somewhere describing exactly why. Good luck finding it! ;)"
      }
    ]
  },
  {
    "number": 2648,
    "title": "why .isJSON is out of scope?",
    "created_at": "2017-01-31T16:38:07Z",
    "closed_at": "2017-02-03T19:03:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2648",
    "body": "Hi !\r\n\r\nI would like know why `.isJSON()` is out of scope ?\r\n\r\nRelated to #2592 and #2639.\r\n\r\nThank you !",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2648/comments",
    "author": "antoine-pous",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2017-02-03T19:03:59Z",
        "body": "I can't speak for the rest of the team but I'll take a crack. Underscore is meant to be a library of small composable general-purpose functional utilities. Checking whether a string is JSON is too narrow of a use case for us to support in the main library and doesn't fit with our mission. It's much better left for your own code or for a specialized toolkit.\r\n\r\nIn the future please don't open a separate issue, just comment on the first one or ask on StackOverflow. Thanks!"
      }
    ]
  },
  {
    "number": 2602,
    "title": "Issue with each loop in client side template - undefined variable",
    "created_at": "2016-10-06T16:31:26Z",
    "closed_at": "2016-10-06T19:29:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2602",
    "body": "```\nNot working code:\n                        <% _.each(rc.rec,function(item,key,list){ %>\n                        <tr>\n                            <td><%= item.id %></td>\n                            <td><%= item.u_id %></td>                           \n                        </tr>\n                        <% }); %>\n\nIn above code, \"**item**\" is found as undefined\n\n\nWorking code:\n                                        <script type=\"text/html\">\n                        <% _.each(rc.rec,function(item,key,list){ %>\n                    </script>\n                        <tr>\n                            <td><%= item.id %></td>\n                            <td><%= item.u_id %></td>                           \n                        </tr>\n                    <script type=\"text/html\">\n                        <% }); %>\n                    </script>\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2602/comments",
    "author": "sainikumar",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-10-06T19:29:27Z",
        "body": "Please use StackOverflow or the mailing list for questions. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 2574,
    "title": "Why using `slice.call(obj)` when `_.isArray(obj)` is true?",
    "created_at": "2016-07-30T13:31:49Z",
    "closed_at": "2016-07-30T16:48:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2574",
    "body": "In `_.toArray`:\n\n```\nif (_.isArray(obj)) return slice.call(obj);\n```\n\nWhy using `slice.call(obj)` when `_.isArray(obj)` is true?\nWhy not just return obj ? I don't understand, please tell me :)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2574/comments",
    "author": "ahonn",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-07-30T16:48:59Z",
        "body": "It's to create a new instance of an array, so modifications do the original do not affect the returned value.\n"
      },
      {
        "user": "ahonn",
        "created_at": "2016-07-31T10:21:26Z",
        "body": "Oh, I get it. Thank you for your response : )\n"
      }
    ]
  },
  {
    "number": 2551,
    "title": "_.isObject for functions is true?",
    "created_at": "2016-06-22T11:36:25Z",
    "closed_at": "2016-06-22T15:56:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2551",
    "body": "Hey,\n\nwhy the fudge is `_.isObject(function() {}) === true`? This makes no sense. If function is an object, array should be one as well, otherwise it's pretty inconsistent. To check, whether it's a function or not they should use `_.isFunction`.\n\nCan someone explain this to me?\n\nCheers\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2551/comments",
    "author": "sateffen",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-06-22T15:56:37Z",
        "body": "It's because you can `fn.prop = 'value'`, making them \"objects\".\n\n> If function is an object, array should be one as well, otherwise it's pretty inconsistent.\n\nThey both are. 😉 \n"
      },
      {
        "user": "sateffen",
        "created_at": "2016-06-22T16:19:08Z",
        "body": "Right, `typeof []` is an object, I wasn't there for a moment.\n\nSeeing it from that point of view, you're right. And while driving home, I came across something else: A class (`class foo {}`) should be an object as well, but `typeof foo` is still `function`, because it's a prototype (so basically an \n\nI should have known this :-D Sorry for the unnecessary issue\n\nCheers\n"
      }
    ]
  },
  {
    "number": 2547,
    "title": "Some questions for source code！",
    "created_at": "2016-06-16T06:54:59Z",
    "closed_at": "2016-06-17T19:04:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2547",
    "body": "First, thx for you repo, this gives me so much help. And when I read the source code, I had some questions. The code below, could you please give me some help about why you define _ with these code?\n`// Create a safe reference to the Underscore object for use below.`\n`var _ = function(obj) {`\n`if (obj instanceof _) return obj;`\n`if (!(this instanceof _)) return new _(obj);`\n`this._wrapped = obj;`\n`}`\n\nthx again!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2547/comments",
    "author": "Zhang-Yida",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-06-17T19:04:39Z",
        "body": "We want the `_` variable to be accessible as both a function and an object&mdash;you should be able to call the methods using either `_.each(arr, fn)` or `_(arr).each(fn)`. This bit of code allows us to handle both cases.\n"
      }
    ]
  },
  {
    "number": 2416,
    "title": "_.isElement should add a property existing detect",
    "created_at": "2016-01-17T03:08:45Z",
    "closed_at": "2016-01-17T03:27:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2416",
    "body": "``` javascript\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n```\n\nis it necessary to add `!!` before `obj && obj.nodeType === 1`?\nand to avoid an exception been thrown,we should add a detection for the property \"nodeType\" first.\n\n``` javascript\n  _.isElement = function(obj) {\n    return (obj && \"nodeType\" in obj && obj.nodeType === 1);\n  };\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2416/comments",
    "author": "zzzgit",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-01-17T03:27:10Z",
        "body": "It's to coerce a Boolean return value. Imagine if `obj` was `null`.\n\nNo need for the `in` check, though.\n"
      }
    ]
  },
  {
    "number": 2413,
    "title": "please tell me what's the purpose of this sentence",
    "created_at": "2016-01-13T04:47:13Z",
    "closed_at": "2016-01-13T04:54:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2413",
    "body": "sorry but I wonder why this sentence exist in the method _.throttle\n`if (!timeout) context = args = null;`\nwhat's the purpose?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2413/comments",
    "author": "zzzgit",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-01-13T04:54:41Z",
        "body": "To allow `context` and `args` to be garbage collected, but only if the invocation above it didn't call the throttled function.\n"
      },
      {
        "user": "akre54",
        "created_at": "2016-01-15T16:38:28Z",
        "body": "Github repos aren't your personal question and answer service. Please use StackOverflow, the Gitter channel or the mailing list. \n"
      }
    ]
  },
  {
    "number": 2378,
    "title": "Checkmarx Issue - Divide by Zero",
    "created_at": "2015-12-09T16:11:02Z",
    "closed_at": "2015-12-09T16:25:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2378",
    "body": "Hello,\n\nWe are using underscorejs in our application and we ran Checkmarx against it. It returned a security issue with the minified script:\n\n| # | Issue | Code in question |\n| --- | --- | --- |\n| 1 | Divide by zero | var e, u, i = 1 / 0, |\n| 2 | Divide by zero | o = 1 / 0; |\n| 3 | Divide by zero | (o > u |\n| 4 | Divide by zero | var e, u, i = -1 / 0, |\n| 5 | Divide by zero | o = -1 / 0 |\n| 6 | Divide by zero | (u > o |\n| 7 | Divide by zero | return x(n, t, 1 / 0) |\n\nNote that this is in the minified version - the actual source code makes use of Infinity instead of dividing by zero.\n\nWe just wish to check if this is a valid issue or a false positive.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2378/comments",
    "author": "callmekatootie",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-12-09T16:25:58Z",
        "body": "This isn't an issue in JS because it gives `Infinity` (or `-Infinity` for `-1 / 0`) and doesn't throw an error.\n"
      },
      {
        "user": "callmekatootie",
        "created_at": "2015-12-09T16:43:31Z",
        "body": "Thank you for your quick response.\n"
      }
    ]
  },
  {
    "number": 2316,
    "title": "Is it possible to make \"_\" not global?",
    "created_at": "2015-10-07T08:48:36Z",
    "closed_at": "2015-10-07T09:16:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2316",
    "body": "Hi :)\n\nMy issue is that I developed a third-party tag (full vanilla JS) used by many of my customer's websites. Some of them already have a use for a global \"_\" variable (not always an alias for Underscore.js) and even when they use Underscore it's often not in noConflict mode (I can't ask them to modify their code for me).\n\nI wanted to integrate Underscore to my tag for a nice refactoring (knowing my tag is wrapped in a closure of course). However, it seems the _ variable is in the window object when I load the library, and I fear it will override some of my customers variables. How can I restrict the Underscore library to my closure scope ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2316/comments",
    "author": "JulienBonnin-ABTasty",
    "comments": [
      {
        "user": "JulienBonnin-ABTasty",
        "created_at": "2015-10-07T09:15:52Z",
        "body": "Okay sorry...\n\nI just discovered that Underscore kept the previous value of \"_\" and restored it if we use noConflict \n\n``` js\nwindow['_'] = \"my value\";\n// INSERTING UNDERSCORE LIBRARY\nvar __ = _.noConflict();\n\nconsole.log(_); // return \"my value\"\n```\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-10-07T12:15:57Z",
        "body": "Yup, even better: use a module loader and you avoid the whole sticky mess in the first place. \n"
      }
    ]
  },
  {
    "number": 2304,
    "title": "_.isNumber( NaN ) == true",
    "created_at": "2015-09-23T00:44:09Z",
    "closed_at": "2015-09-23T00:48:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2304",
    "body": "Why `_.isNumber( NaN ) == true` ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2304/comments",
    "author": "judsonbsilva",
    "comments": [
      {
        "user": "jdalton",
        "created_at": "2015-09-23T00:48:56Z",
        "body": "Hi @judsonbsilva! \n\n`_.isNumber( NaN )` is `true` because `NaN` is classified as a number just as\n`Infinity` and `-Infinity` are.\n\nThe `_.isNumber` method is not intended for numeric validation just as `_.isDate` will not validate whether a date object is a valid date, `new Date(Infinity)`.\n\nIf you're looking for validation there's `_.isFinite` or\nES6 `Number.isFinite`, `Number.isNaN`, `Number.isInteger`, and `Number.isSafeInteger`.\n"
      },
      {
        "user": "judsonbsilva",
        "created_at": "2015-09-23T00:57:46Z",
        "body": ":) Ohh... nice, thank's\n"
      },
      {
        "user": "bjmiller",
        "created_at": "2015-09-24T10:24:09Z",
        "body": "Can this explanation go in the documentation?  We get this question in some form quite frequently.\n"
      }
    ]
  },
  {
    "number": 2225,
    "title": "_.has({}, []) should return true",
    "created_at": "2015-07-01T03:19:20Z",
    "closed_at": "2015-07-01T05:39:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2225",
    "body": "`_.has({}, [])` and `_.has({})` should technically return true, because the object does have nothing?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2225/comments",
    "author": "reggi",
    "comments": [
      {
        "user": "megawac",
        "created_at": "2015-07-01T05:39:37Z",
        "body": "`_.has` don't (document) taking an array or undefined as the second argument so returning false seems correct\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-07-01T13:21:33Z",
        "body": "I think you're misunderstanding the use of `has`. It's only really used to check if the key (a string) exists in the object. An array isn't an empty value, and neither is `undefined`. \n"
      },
      {
        "user": "reggi",
        "created_at": "2015-07-01T14:55:02Z",
        "body": "Thanks all.\n\nI create a `hasOnly` mixin to return true if object has only the provided keys\n\n``` javascript\n_.mixin({\n  hasOnly: function(obj, keys){\n    if(_.difference(_.keys(obj), keys) == 0) return true\n    return false\n  },\n})\n```\n\nSo when you run `console.log(_.hasOnly({}, []))` you are kind of expecting `true` I realize it's not the same for `_.has`. At the time of writing this issue I was using `_.has` for a more complicated version of this mixin. At the time I misread the `_.has` documentation for `_.has(object, key*)` and I thought it accepted an array.\n"
      }
    ]
  },
  {
    "number": 2220,
    "title": "Tests missing from nodejs.org package",
    "created_at": "2015-06-24T00:42:38Z",
    "closed_at": "2015-06-24T13:58:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2220",
    "body": "Hello, I'm working on creating a distro package for underscorejs and we'd like to run the test suite before we install anything. The tarball I get from github has the `test` directory, but the one from npmjs.org doesn't. I think this is because of the 'files' entry in package.json? If so, might you include the tests?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2220/comments",
    "author": "orlitzky",
    "comments": [
      {
        "user": "orlitzky",
        "created_at": "2015-06-24T00:46:43Z",
        "body": "Ah, I just noticed `docs` is missing too.\n\nI can always grab these from github, but it's nice to have everything available through the npm registry because then we can script the creation of new packages.\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-06-24T13:58:38Z",
        "body": "I'm not sure what you mean by \"script the creation of new packages\", but it seems like your use case would be better served by simply cloning the git repository. npm is doing too much (and giving you too little) for your needs.\n"
      },
      {
        "user": "orlitzky",
        "created_at": "2015-06-24T14:05:36Z",
        "body": "I'm creating a distro package for underscore.js. Using git is undesirable, because now every end user needs to have git installed before he can install underscore. That adds between 20 and 100 dependencies to the list, all to fetch a few files. It's easier to just grab the tarball from the github releases page where it's not missing the tests/docs.\n\nI'm only bugging you because the default \"get everything from npmjs.org, build it, test it, and install it\" code is already written. Having to get underscore from a different place means we can't use the default implementation, but it's not a big deal.\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2015-06-24T14:07:51Z",
        "body": "Underscore is far from the only package not including its tests in the npm distribution. It's considered a best practice. You were going to have to deal with this eventually.\n"
      }
    ]
  },
  {
    "number": 2201,
    "title": "toArray increasing order keys",
    "created_at": "2015-05-29T14:17:14Z",
    "closed_at": "2015-05-29T15:01:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2201",
    "body": "Hello,\n\nThank you very much for such a great project.\n\nI found one interesting undocumented feature of toArray.\nIf you try to convert object, where the keys are numbers. to Array will convert them in increasing order.\n\nvar ob = {'4':1,'2':2,'1':3}\nvar b = _.toArray(ob)\n//[3 2 1]\n\nCan you confirm that this is a consistent behavior?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2201/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-05-29T15:01:07Z",
        "body": "That's browser implementation specific, and not guaranteed. It just happens most browsers will sort keys on an object, then iterate over them in sorted order.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2015-05-29T15:04:38Z",
        "body": "Iteration order is now specified in ES2015.\n"
      },
      {
        "user": "ghost",
        "created_at": "2015-05-29T15:20:19Z",
        "body": "I am using it in node.js from console\n"
      },
      {
        "user": "jdalton",
        "created_at": "2015-05-29T15:26:13Z",
        "body": "Yap, it's been largely consistent across engines for a while.\nThe spec just standardized the de-facto behavior.\n"
      },
      {
        "user": "jridgewell",
        "created_at": "2015-05-29T15:33:21Z",
        "body": "Awesome, I wasn't aware object iteration was defined.\n"
      }
    ]
  },
  {
    "number": 2186,
    "title": "How to sortBy by second level (subkey) of JSON object?",
    "created_at": "2015-05-23T17:21:05Z",
    "closed_at": "2015-05-23T18:42:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2186",
    "body": "I have an example JSON array I would like to sort. However, I would like to sort by attributes.Country (a second level) rather than a first level like label.\n\n``` javascript\n[\n   {\n      \"label\":\"Ha Dae-sung\",\n      \"id\":\"268\",\n      \"attributes\":{\n         \"Country\":\"South Korea\"\n      }\n   },\n   {\n      \"label\":\"Maxi Pereira\",\n      \"id\":\"486\",\n      \"attributes\":{\n         \"Country\":\"Uruguay\"\n      }\n   },\n   {\n      \"label\":\"Manabu Saito\",\n      \"id\":\"441\",\n      \"attributes\":{\n         \"Country\":\"Japan\"\n      }\n   }\n]\n```\n\nI can sort just fine on the first level using _.sortBy. For instance, to sort by just the label.\n\n``` javascript\nsearched = _.sortBy(searched, \"label\"); \n```\n\nHowever, I want to get a sorted array by Country within attributes. How would I set up a second level sort?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2186/comments",
    "author": "blueridgemountains1",
    "comments": [
      {
        "user": "alexZielonko",
        "created_at": "2015-05-23T18:16:26Z",
        "body": "Getting an array sorted by country can be achieved by using a function as the iteratee. This should work for you -\n\n```\nsearched = _.sortBy(searched, function(obj) { return obj.attributes.Country; });\n```\n"
      },
      {
        "user": "blueridgemountains1",
        "created_at": "2015-05-23T18:42:09Z",
        "body": "thank you so much! this worked!\n"
      }
    ]
  },
  {
    "number": 2173,
    "title": "_.template function does not accept inline data variable.",
    "created_at": "2015-05-12T09:05:56Z",
    "closed_at": "2015-05-12T13:06:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2173",
    "body": "As title suggests _.template function does not accept inline data variable. It was working fine previously. But since I tried version 1.8 as it supports _.findkey but it stopped working with inline Data variables for the _.template function.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2173/comments",
    "author": "aamir2007",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-05-12T13:06:36Z",
        "body": "We removed the data from `_.template`, you now have to invoke the returned function.\n\n``` javascript\n_.template(templateString)(data);\n_.template(templateString, options)(data);\n```\n"
      },
      {
        "user": "aamir2007",
        "created_at": "2015-05-13T07:17:55Z",
        "body": "Hello jridgewell,\n\nThanks for your response and clarification. I am aware of this change. But what about those apps which are previously using data variable inline with _.template function. They will stop working something that happened with my app. It has so many template calls and will require to revise all of them. So all existing apps that are using data variable inline does not support the latest version of underscore.js \nI think there should have been a way for backward compatibility as this is a great framework and is being used in many modern apps and should be taken care of the backward compatibility while disclosing new versions. Currently it's giving impression of immature framework.\n"
      }
    ]
  },
  {
    "number": 2151,
    "title": "underscore is sometimes a string in opera",
    "created_at": "2015-04-13T10:52:47Z",
    "closed_at": "2015-04-13T14:44:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2151",
    "body": "Hi,\n\nsometimes `_` is a string in opera under Windows which then results into\n\n```\nTypeError: string is not a function\n```\n\nHave you experienced similar errors? Do you know why this could happen?\n\nThanks for your awesome library,\n\nJohannes\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2151/comments",
    "author": "joker-777",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2015-04-13T14:44:31Z",
        "body": "Some other script is overwriting the `_` variable. Try using `_.noConflict()` in your app.\n"
      },
      {
        "user": "joker-777",
        "created_at": "2015-04-14T14:17:08Z",
        "body": "Thanks for your quick reply. Doesn't this mean that we have to find a variable where we are certain that no external plugin/extension would overwrite it? Then we would have to replace all `_` with this new variable. Is there no other way to ensure that this doesn't happen?\n"
      },
      {
        "user": "jridgewell",
        "created_at": "2015-04-14T14:46:32Z",
        "body": "You can already do that with `#noConflict`\n\n``` html\n<script src=\"underscore.js\"/></script>\n<script>\n    var myUnderscoreVar = _.noConflict();\n</script>\n```\n\nEither way, it's untenable to choose a globally unique name. Using a module system will prevent these issues, or open an issue against whatever's clobbering `_`.\n"
      }
    ]
  },
  {
    "number": 2111,
    "title": "question about _.template rendering context",
    "created_at": "2015-03-13T20:02:05Z",
    "closed_at": "2015-03-13T20:13:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2111",
    "body": "Hello and sorry if this is the wrong place to just ask a question about functionality. We use jQuery.tmpl() to do things like:\n\n{{each getUniquePrograms(4)}}\n    <li>\n        ${$value.getDisplayName()}\n    </li>\n{{/each}}\n\nwhere getUniquePrograms() is a method on the data object passed to .tmpl() and getDisplayName() is a method on a rich object of the iterated collection. I see that _.template allows for javascript eval via <% %> but in playing around I can't get the rendering context to execute methods on the passed-in data object. Is it possible to create an api-style rendering context like this so that we can expose methods that might return a collection of rich objects?\n\nThanks in advance,\n\n-Thom\n\np.s. moving away from jQuery.tmpl() for obvious reasons, looking for the all-out speed demon of templating engines.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2111/comments",
    "author": "thomhickey",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2015-03-13T20:13:00Z",
        "body": "```\n<%= value.getDisplayName() %>\n```\n\nVoilá.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2015-03-13T20:15:14Z",
        "body": "Also, the context of the template is accessible as `this` because templates are just functions! :smiley_cat:\n\n``` js\nvar view = {\n  foo: function() { return 'x'; },\n  template: _.template('<%= this.foo() %>')\n};\nview.template() // 'x'\n```\n"
      },
      {
        "user": "thomhickey",
        "created_at": "2015-03-13T20:36:26Z",
        "body": "Awesome ... I guess the question then becomes how to code the iteration. And we nest loops:\n\n{{each getSomeList()}}\n  {{each $value.getAnotherList()}}\n  {{/each}}\n{{/each}}\n\nDo I do something like this in underscore:?\n\n<% _.each(this.getSomeList(), function(item) { %> <strong><%= name %></strong> <% }); %>\n\nThat would handle the outer loop, what about the inner? Just throw another _.each in there?\n"
      },
      {
        "user": "megawac",
        "created_at": "2015-03-13T20:57:17Z",
        "body": "I think you want `<% _.each(this.getSomeList(), function(item) { %> <%= item.name %> <% }); %>` (note the `item.name`)\n"
      },
      {
        "user": "thomhickey",
        "created_at": "2015-03-13T21:30:06Z",
        "body": "getting: Object [object global] has no method 'getSomeList' doing:\n\nrenderedListing = _.template('<% _.each(this.getSomeList(), function(item) { %> <strong><%= item.name %></strong> <% }); %>',  this);\n\nobject 'this' definitely has a getSomeList() method when _.template is invoked\n"
      },
      {
        "user": "bnjmnt4n",
        "created_at": "2015-03-14T05:56:32Z",
        "body": "Try `renderedListing = _.template('...').call(this);`.\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-03-15T14:17:22Z",
        "body": "Or `this.renderedListing = _.template('...'); this.renderedListing();`\n"
      }
    ]
  },
  {
    "number": 2040,
    "title": "not to be bounded to window by default",
    "created_at": "2015-02-09T12:39:06Z",
    "closed_at": "2015-02-09T13:09:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2040",
    "body": "Hi all,\n\nIn my scenario where one of my client has different version of Underscore and my library is using different version of underscore.\n\nWe ended up overriding our window._\n\nIs there a way to source underscore and not to be bounded to window. Instead bind to the reference provided.\n\nKind regards,\nPhani.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2040/comments",
    "author": "pasupulaphani",
    "comments": [
      {
        "user": "megawac",
        "created_at": "2015-02-09T13:09:31Z",
        "body": "There are several ways you can address this:\n1. You can build your application using a build tool such as browserify or esperanto, which will respect the version ranges you set per module\n2. you can load the multiple versions of underscore via a script tag and call `_.noConflict()`\n\nAssuming you load 3 underscore versions\n\n``` js\n// The last loaded underscore version\nvar _3 = _.noConflict();\n// The second loaded version\nvar _2 = _.noConflict();\n// The first one\nvar _1 = _;\n```\n"
      },
      {
        "user": "pasupulaphani",
        "created_at": "2015-02-09T14:19:13Z",
        "body": "Thank you.\n"
      }
    ]
  },
  {
    "number": 2016,
    "title": "I don't understand the meaning of this sentence.",
    "created_at": "2015-01-23T09:20:26Z",
    "closed_at": "2015-01-23T14:55:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2016",
    "body": "```\n_.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n```\n\nWhy use this sentence？ delete obj[0];???\n\n> if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n\nPlease tell me！ thanks！\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2016/comments",
    "author": "booles",
    "comments": [
      {
        "user": "michaelficarra",
        "created_at": "2015-01-23T14:48:15Z",
        "body": "You might want to try deleting it and see which tests break.\n"
      },
      {
        "user": "megawac",
        "created_at": "2015-01-23T14:55:33Z",
        "body": "See #397 and #1807. You won't notice tests breaking unless you're on IE8. This line could probably do with a comment in the source (feel free to pr one)\n"
      },
      {
        "user": "booles",
        "created_at": "2015-01-23T16:01:04Z",
        "body": "@michaelficarra  @megawac Thanks！\n"
      }
    ]
  },
  {
    "number": 1944,
    "title": "create convenience for _.compact(_.map",
    "created_at": "2014-11-19T23:41:46Z",
    "closed_at": "2014-11-20T01:20:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1944",
    "body": "I often want to do both validation of a collection and transformation in the same loop.  Right now, the quickest way to express that in backbone (as far as I know) is to do something like\n\n```\n_.map(_.select(collection, fun...), fun...)\n```\n\nor \n\n```\n_.compact(_.map(collection, fun...), ...)\n```\n\nAnd while chaining is arguably helpful in the syntax department, it doesn't affect the performance of this.  Rather than loop through twice, I'd like to be allowed to write a method that either returns a map'd value or a falsy value, and the underscore method takes care of not adding the falsy values for me.\n\nThoughts on this feature?  Would a PR be considered?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1944/comments",
    "author": "thataustin",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-11-20T01:20:19Z",
        "body": "Give `reduce` a try.\n"
      },
      {
        "user": "megawac",
        "created_at": "2014-11-20T01:31:43Z",
        "body": "@thataustin if you have `jQuery` around consider using `$.map` which will exclude any items where you return `undefined`\n"
      },
      {
        "user": "thataustin",
        "created_at": "2014-11-20T07:33:43Z",
        "body": "@jashkenas - I imagine that you probably want to guard the methods that make it into in this widely-used library, but I don't think reduce has the same semantic intention or simplicity of what I'm suggesting.  The concept of `reduce` doesn't typically mean \"start with an array and keep mutating it with additions as you go\".  That's barely different from `.map` with an outer `results` array.\n\nAlso, I run into cases where I want to map over a collection, but the method I want to use to transform the values is a mixin from another place.  If that other place - maybe another module or even a 3rd party method - decides to return a falsy value when the input isn't transformable - not an entirely uncommon practice - then I have to setup a logic branch of my own to decide whether or not to `.push` onto the array that `reduce` has provided me.  Again, that's just extra syntax I don't need if I had a well-named utility method that expressed that logic branch was going to be there anyway.  Eg:\n\n```\n_.reduce( collection, function(obj, context) {\n    var potentialThingIWantToPush;\n    // Do I really need this logic branch?  Even if I squeeze the whitespace or make it a ternary, it's the logic that's the wasted effort / complexity\n    if (potentialThingIWantToPush = thirdPartyMethod(obj) ) context.push(potentialThingIWantToPush);\n}, []);\n```\n\nvs.\n\n```\n// not saying mapOrReject is a good name...\n_.mapOrReject(collection, thirdPartyMethod);\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-11-20T15:38:31Z",
        "body": "That's what `_.mixin` is for.\n"
      },
      {
        "user": "thataustin",
        "created_at": "2014-11-20T18:50:56Z",
        "body": "fair enough :)\n"
      }
    ]
  },
  {
    "number": 1884,
    "title": "_.cobin(array1,array2,....arrayN)",
    "created_at": "2014-09-29T19:50:20Z",
    "closed_at": "2014-09-29T20:53:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1884",
    "body": "I have this json\n\"ranges\": { \"a\": [0,1,2,3,4,5], \"b\": [0,1,2],, \"c\": [0,1,2,3] }\n\ni need to get all the combinations for a,b,c:\na:0,B:0,c:0\na:0,B:1,C:0\n.....\n\nthanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1884/comments",
    "author": "akelmj",
    "comments": [
      {
        "user": "michaelficarra",
        "created_at": "2014-09-29T20:53:47Z",
        "body": "This is not a proposal. You may want to try Stack Overflow or something for help. Closing.\n"
      }
    ]
  },
  {
    "number": 1794,
    "title": "FEATURE REQUEST: get the max value instead of the max object",
    "created_at": "2014-08-20T17:57:37Z",
    "closed_at": "2014-08-20T18:18:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1794",
    "body": "Suppose I want to find the maximum age in a certain database of people, where the age is calculated using a function (e.g. a function that subtracts the birth year from the current year). Currently I can get the person with the maximum age, and then I have to ask again for his age, like this:\n\n```\nvar stooges = [{name: 'moe', birth_year: 1900}, {name: 'larry', birth_year: 1950}, {name: 'curly', birth_year: 1960}];\n_.max(stooges, function(stooge){ return stooge.age(); }).age()\n=> 114\n```\n\nThe function \"age\" is used twice in the code, which is inefficient both for the code writer and for the computer. There can be functions that are much more lengthy and complicated then \"age\", in which case the inefficiency will be much larger.\n\nI suggest to add a function to get, not the object with the max value, but the max value itself (as  returned from the iterator), like this:\n\n```\n    _.maxval(stooges, function(stooge){ return stooge.age(); });\n```\n\nIn case there is no iterator, the return value will be identical to _.max. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1794/comments",
    "author": "erelsgl",
    "comments": [
      {
        "user": "megawac",
        "created_at": "2014-08-20T18:03:36Z",
        "body": "Try plucking in this case\n\n``` js\n_.chain(stooges)\n .invoke(\"age\")\n .max()\n .value();\n```\n\nor\n\n``` js\n_.chain(stooges)\n .pluck(\"birth_year\")\n .max()\n .value();\n```\n"
      },
      {
        "user": "erelsgl",
        "created_at": "2014-08-20T18:49:50Z",
        "body": "Doesn't \"invoke\"/\"pluck\" create a temporary array to hold the values of \"age\"/\"birth_year\"?\n\nIf the stooges array is very large, this might be very wasteful to create another array of the same size, when all I need is a single maximum value...\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2014-08-20T19:15:37Z",
        "body": "Then fold instead.\n"
      }
    ]
  },
  {
    "number": 1783,
    "title": "uniq should use isEqual for equality?",
    "created_at": "2014-08-07T15:20:59Z",
    "closed_at": "2014-08-27T20:13:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1783",
    "body": "I was wondering if it would better for `uniq` to use `isEqual` instead of `===` for equality?\n\n``` javascript\na = { id: 1 }\nb = { id: 1 }\n\n_.uniq([a,b]) // now we get [a,b]\n\n_.uniq([a,b]) // but could get [a]\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1783/comments",
    "author": "krisleech",
    "comments": [
      {
        "user": "jdalton",
        "created_at": "2014-08-07T21:18:31Z",
        "body": "Hi @krisleech!\nThis has been brought up before and I don't think it's going to change.\n\nI've addressed this partially in my own implementation by allowing devs to customize `_.indexOf` which would affect all other strictish checks in methods like `_.uniq`.\n\nI recently changed `_.indexOf` to match `NaN` which aligns with the proposed ES7 `Array#contains` so `_.indexOf([0, NaN, 2], NaN) //=> 1`. This has the side effect of then applying to `_.uniq`, so `_.uniq([NaN, 1, NaN]) //=> [NaN, 1]`.\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-08-18T19:43:57Z",
        "body": "You can pass an iterator to compare by property currently (`_.uniq([a,b], _.property('id'))`).\n\nAbsent a lodash-style rewrite to allow a customized equality function on `_.indexOf`, `_.contains` and all of the related methods that's probably your best bet. \n"
      },
      {
        "user": "krisleech",
        "created_at": "2014-08-19T16:59:22Z",
        "body": "Thanks both for the information\n"
      }
    ]
  },
  {
    "number": 1769,
    "title": "Proposal of adding: `_.repeat(obj, count)`",
    "created_at": "2014-07-29T10:25:39Z",
    "closed_at": "2014-07-29T12:50:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1769",
    "body": "Sorry if I duplicated an issue..\nThis function makes simple arrays easily.\n\n``` js\nvar el = undefined\nvar arr = _.repeat(el, 4)\n// -> [undefined, undefined, undefined, undefined]\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1769/comments",
    "author": "fritx",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-07-29T12:50:49Z",
        "body": "It's already built into the language:\n\n``` js\nvar arr = new Array(4); // [undefined × 4]\n```\n"
      },
      {
        "user": "megawac",
        "created_at": "2014-07-29T13:07:04Z",
        "body": "For other values you can just use constant and times\n"
      },
      {
        "user": "fritx",
        "created_at": "2014-07-29T14:27:14Z",
        "body": "@akre54 thanks, but they might not be the same thing:\n\n``` js\nnew Array(4) // [undefined × 4] , which can not be traversed\n_.repeat(undefined, 4) // [undefined, undefined, undefined, undefined]\n```\n\n@megawac thanks, `_.times(4, _.constant(3)) // [3, 3, 3, 3]` is cool.\n"
      }
    ]
  },
  {
    "number": 1732,
    "title": "_.each(list, iterator, [context])",
    "created_at": "2014-07-10T08:34:20Z",
    "closed_at": "2014-07-10T12:54:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1732",
    "body": "var list = [];\n\nlist['one'] = 1;\nlist['two']  =  2;\nlist['three'] = 3;\n\n_.each(list, alert);// alert can't be invoked, but set list={}, it'll run\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1732/comments",
    "author": "guxima",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-07-10T12:54:44Z",
        "body": "Because that's not how arrays work in Javascript. \n\nThe issue tracker is for feature requests and problems with the framework only. Please use StackOverflow, the mailing list, or the IRC channel for questions.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2014-07-10T13:29:34Z",
        "body": "If Underscore has `_.forOwn`, you'd be able to use that.\n"
      }
    ]
  },
  {
    "number": 1654,
    "title": "_.template code examples. Make <%- more like default/base choice",
    "created_at": "2014-05-30T07:45:21Z",
    "closed_at": "2015-02-19T22:31:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1654",
    "body": "After using both _.template and handlebars I find very positive that handlebars have escaped interpolation '{{' as default/base one, and non-escaped '{{{' as additional . For some reason I feel like current _.template documentation position '<%=' as default/base one and '<%-' as additional (like \"If you really need it\") I find it a bit disturbing and this might lead young and not as smart devs use unescaped thing as default.\n\nI don't know how to make it right, but what about rewriting documentation so that <%- will be default/base and <%= as additional?\n\nFor example current <%= example is not right at all. Because it compiles HTML! But if I just change this <%= to <%- there won't be example of <%=.\n\nAnd one more thing. What about changing templateSettings example to match what mustache and handlebars use (where {{ for escaped and {{{ for unescaped) ? In one of legacy projects someone copy-pasted it from documentation and because code base was already there I added escaped one with {{{. Now I have several projects with original handlebar and pseudo one (_.template) with {{ / {{{ have different meaning =)\n\nBtw, it took some time to figure out how to make {{{ regexp. Here is my solution:\n\n``` javascript\ntemplateSettings: {\n    interpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n    escape: /{{([^{}]+?)}}(?!})/g\n}\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1654/comments",
    "author": "soswow",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-08-04T21:55:29Z",
        "body": "The current documentation says:\n\n> Template functions can both interpolate variables, using <%= … %>, \n> as well as execute arbitrary JavaScript code, with <% … %>. If you \n> wish to interpolate a value, and have it be HTML-escaped, use <%- … %>\n\nI think that's a fine and accurate description of the available options.\n"
      }
    ]
  },
  {
    "number": 1648,
    "title": "_.isEqual on \"[object HTMLCanvasElement]\" elements with different content",
    "created_at": "2014-05-22T09:50:59Z",
    "closed_at": "2014-05-22T12:30:44Z",
    "labels": [
      "question",
      "duplicate"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1648",
    "body": "With two canvas of the same size and same properties, but different contents (and different results from \"toDataURL()\"), _.isEqual returns true.\n\nI'm not sure what should be the expected result in this case. Maybe it's a bug, maybe it should lead to a warning in the documentation.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1648/comments",
    "author": "Volune",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-05-22T12:30:44Z",
        "body": "`_.isEqual` is undefined for Elements (do a search through the issues for some background). It's much better to write the comparison by hand and `mixin` it into your own Underscore copy if you need it.\n\n``` js\n_.mixin({\n  isCanvasEqual: function(a, b) { return a.toDataUrl() === b.toDataUrl() }\n});\n```\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2014-05-22T14:30:42Z",
        "body": "You could also define `HTMLCanvasElement.prototype.isEqual`.\n\n``` js\nHTMLCanvasElement.prototype.isEqual = function(otherCanvas) {\n  return this.toDataUrl() === otherCavas.toDataUrl();\n};\n```\n"
      },
      {
        "user": "Volune",
        "created_at": "2014-05-22T14:56:58Z",
        "body": "A \"isCanvasEqual\" function is not usable for objects that may or may not contain a canvas (as it was in my case)\n\nThe HTMLCanvasElement.prototype.isEqual function is a good solution, thanks.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2014-05-22T15:53:00Z",
        "body": "Yap, the current Underscore method of handling DOM elements puts devs in a jam because it either works on some browsers, doesn't, or locks up the browser. That's not a good experience and seems to be common enough to warrant action.\n\nExtending DOM prototypes is a losing game too (see Prototype.js).\n\nUnderscore could detect DOM elements, avoid crawling, and do a strict equality check, `===`. This prevents the inconsistent behavior and browser freezes. Then Underscore could add support for a customizing callback to allow devs to tailor `_.isEqual` to their needs.\n\n``` js\nvar eq = _.partial(_.isEqual, _, _, function(value, other) {\n  if (_.isElement(value) && _.isElement(other) &&\n        value.nodeName.toLowerCase() == 'canvas' &&\n        other.nodeName.toLowerCase() == 'canvas'\n      ){\n    return value.toDataUrl() == other.toDataUrl();\n  }\n});\n```\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-05-22T17:46:28Z",
        "body": "Yeah extending prototypes is usually a no-go. @jdalton's solution is the way to go here. Given the number of edge cases and the murkily-defined equality semantics for elements of any type, it's much better to add this yourself to your own app.\n"
      }
    ]
  },
  {
    "number": 1647,
    "title": "Syntax errors when file(underscore-min.js) open in Eclipse",
    "created_at": "2014-05-21T15:27:35Z",
    "closed_at": "2014-08-27T17:07:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1647",
    "body": "Syntax error on token \")\", \n { expected at line 5, 8177.\n\nDue to this my application not loading any screen\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1647/comments",
    "author": "Kumaraswamy18",
    "comments": [
      {
        "user": "Kumaraswamy18",
        "created_at": "2014-05-21T15:31:02Z",
        "body": "Same issue found with 1.4, so update to 1.6, Even getting the same issue\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-08-27T17:07:27Z",
        "body": "I don't know what to tell you. It's a minified file, and it's syntactically valid JavaScript. Perhaps it's too long of a line for Eclipse to handle.\n"
      }
    ]
  },
  {
    "number": 1388,
    "title": "Version bump Underscore.",
    "created_at": "2013-12-22T17:13:04Z",
    "closed_at": "2014-02-10T16:47:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1388",
    "body": "It's been 4 months since 1.5.2 so it's time to release an update.\nThere have been several bug fixes and methods added.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1388/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "rogerz",
        "created_at": "2013-12-23T12:36:23Z",
        "body": ":+1:\n\nI need `component.json` for installation.\n"
      },
      {
        "user": "codeaholics",
        "created_at": "2013-12-23T13:39:59Z",
        "body": ":+1: I'm especially interested in the AMD support. Please could you do a 1.5.3 release? Thanks.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-02-10T16:47:52Z",
        "body": "Will, do, as soon as we work through the tickets...\n"
      }
    ]
  },
  {
    "number": 1383,
    "title": "Could You make an unGroup/unIndex?",
    "created_at": "2013-12-19T23:34:40Z",
    "closed_at": "2013-12-20T06:49:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1383",
    "body": "I want to be able to take an object that was created by groupBy/indexBy and reduce it back down to an array. The only issue would be sorting, but I don't that should really matter.\n\nI should work regardless of whether or not the object was actually created by groupBy/indexBy, as long as it follows a similar format (groupBy would require that every property be an array of something, whereas indexBy would just make an array out of the properties, no matter the type).\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1383/comments",
    "author": "joezimjs",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-12-20T00:26:20Z",
        "body": "Hi @joezimjs!  I think you could probably already do this with `_.values` and `_.flatten`.\n\n``` js\n_.flatten(_.values(_.groupBy([...], '...')))\n```\n\nHow does that work for you?\n"
      },
      {
        "user": "joezimjs",
        "created_at": "2013-12-20T06:49:40Z",
        "body": "That works fine. I just realized I could do it with `_.toArray` instead of `_.values` too. Seems to work either way.\n"
      }
    ]
  },
  {
    "number": 1370,
    "title": "Support more HTML entities with _.escape and _.unescape",
    "created_at": "2013-12-09T10:16:54Z",
    "closed_at": "2013-12-18T02:52:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1370",
    "body": "Currently `_.escape` only replaces these:\n`&`, `<`, `>`, `\"`, `'`\n\nAnd `_.unescape` only replaces these:\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#x27;`\n\nWhat are your thoughts on supporting more replacements?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1370/comments",
    "author": "alanhamlett",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2013-12-09T17:03:10Z",
        "body": "`_.escape` / `_.unescape` are mainly helpful in dealing with the 5 characters significant in XML (and therefore in HTML) for preventing XSS in templates. What's your use case for adding more? It should be pretty easy to add them in yourself if you need it.\n\nAlso check out #1189 for some recent discussion and background.\n"
      }
    ]
  },
  {
    "number": 1357,
    "title": "Issue with Bower package",
    "created_at": "2013-11-20T08:40:09Z",
    "closed_at": "2013-11-20T11:29:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1357",
    "body": "While there's `ignore` option in `bower.json` file, when I run `bower install underscore` all ignored files and directories are still present and the size of the package is ~1.2MB - probably `bower.json` was added after the latest release.\n\nAny chances to release a new, slimmer version of Bower package?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1357/comments",
    "author": "szimek",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-11-20T11:29:17Z",
        "body": "Certainly. If we have to tag a new release to do it, then it'll happen along with the next one ;)\n"
      },
      {
        "user": "anodynos",
        "created_at": "2014-01-21T12:26:39Z",
        "body": "Still tag 1.5.2 has no `bower.json` file - apart from huge size, `$ bower list -p` doesnt work properly for underscore - any news ? \n"
      },
      {
        "user": "stevenharman",
        "created_at": "2014-02-08T20:59:34Z",
        "body": "Until a > 1.5.3 release is made, you can pin to `master` via `bower install underscore=jashkenas/underscore#master --save`.\n"
      }
    ]
  },
  {
    "number": 1335,
    "title": "just a little confuse about chain() style",
    "created_at": "2013-11-07T08:00:47Z",
    "closed_at": "2013-11-07T12:26:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1335",
    "body": "sorry ,poor english,but i really love the undersocre source code ,i read it literally\n\ni fond when i use chain style like this:\n\n```\n_.chain([1,2,3,4]).map(function(arr){return arr+100}).each(function(e){\n    alert(e);//101,102,103,104 ,all is ok\n});\n```\n\ni find it this chain style will create 3 instance,Am i righ ??\nwhich i think not necessory,it is too waste，why no just create only once,\nis it possible to be imporve it ?? sorry again my poor english....thanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1335/comments",
    "author": "exhibit",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-11-07T12:26:41Z",
        "body": "> why no just create only once,\n> is it possible to be imporve it ??\n\nPerhaps it is. If you find a way, feel free to submit a pull request with your fix, and get all the credit ;)\n"
      }
    ]
  },
  {
    "number": 1322,
    "title": "find with index",
    "created_at": "2013-10-29T07:21:31Z",
    "closed_at": "2013-11-06T17:51:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1322",
    "body": "Is there a possibility to find element in array/object, and return both element value and index/property name?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1322/comments",
    "author": "sshikov",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-11-06T17:51:13Z",
        "body": "Underscore doesn't generally have an API that returns multiple different types of information. But you can certainly do this with `_.reduce`.\n"
      }
    ]
  },
  {
    "number": 1257,
    "title": "isObject not correctly detected objects and arrays.",
    "created_at": "2013-08-14T03:05:23Z",
    "closed_at": "2013-08-14T12:45:52Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1257",
    "body": "Hi. I use your module and I like it, but don't understand how working isObject method?\nIf I use isObject({}), isObject([]) then get result true, true and I think what it not correctly. I _.mixin underscore isObject method to:\n_.mixin({\n    isObject: function(obj) {\n        'use strict';\n        return obj ? (obj.toString() === '[object Object]') : false;\n    }\n});\n\nNow I correctly get result for object and arrays. Correctly me if I'm wrong.\nIt worked on node.js 0.10.15, google chrome and opera.\nSorry my English.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1257/comments",
    "author": "EvilDevRu",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2013-08-14T03:14:58Z",
        "body": "Arrays are objects. `_.isObject` is slightly different from the other `_.isXYZ` methods—instead of distinguishing _object instances_ from arrays (`_.isArray`), regular expressions (`_.isFunction`), and dates (`_.isDate`), it distinguishes objects from _primitives_.\n\n`_.isObject(X) == false` only if `X` is a Boolean, number, string, `undefined`, or `null`. It's `true` for everything else, including arrays.\n"
      },
      {
        "user": "EvilDevRu",
        "created_at": "2013-08-14T03:34:27Z",
        "body": "Thank for answer but [] is not {} and introduce confusion in the logic of application.\n"
      },
      {
        "user": "zaggino",
        "created_at": "2013-08-14T04:11:11Z",
        "body": "Something like `_.isHash` would be more appropriate to distinguish {} from [] and other native classes. \n`_.isObject` works fine right now, because `[] instanceof Object` also returns `true`.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-08-14T12:45:52Z",
        "body": "Hi @EvilDevRu!  @kitcambridge is correct, arrays are objects too.  Also, there is a great deal more discussion on this topic in old issues if you would like to dig in to it.  :)\n"
      }
    ]
  },
  {
    "number": 1238,
    "title": "Feature Request: _.not",
    "created_at": "2013-07-30T18:05:57Z",
    "closed_at": "2013-07-30T19:25:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1238",
    "body": "I want an _.not function, defined as:\n\n```\n_.not = function(input) { return !input; }\n```\n\nSo for example to get all non-empty lists from an input, you could do:\n\n```\n_.filter(_.compose(_.not, _.isEmpty), input)\n```\n\nObviously not hard to define myself, but I've found myself wanting it in a few projects now.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1238/comments",
    "author": "thurn",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-07-30T19:25:50Z",
        "body": "Check out Underscore-Contrib.\n"
      }
    ]
  },
  {
    "number": 1184,
    "title": "Integrate Array mutator methods directly into library",
    "created_at": "2013-07-04T13:45:44Z",
    "closed_at": "2013-07-06T13:40:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1184",
    "body": "In working on a separate pull request for `pipe` (#1183) I came across a minor issue.  In order to preserve chaining syntax, underscore has a section of code where it adds \"all mutator Array functions to the wrapper\".  As `pipe` actually does away with the wrapper altogether in favor of building a chain with a recursive function, to allow for the same use cases, there needed to be a way to access these mutator methods.\n\nHere is an example chain (as found in the test suite) using mutators:\n\n```\nnumbers = _(numbers).chain()\n  .reverse()\n  .concat([5, 5, 5])\n  .unshift(17)\n  .pop()\n  .map(function(n){ return n * 2; })\n  .value();\n```\n\nThe first odd thing I noticed about this was that some of these methods (i.e. `reverse`, `concat`, `unshift`, `pop`) are not actual underscore methods.  I found that they were added to the wrapper to preserve the ability to chain in an obvious manner.\n\nThis feels like a kludge especially when the elegant solution is to simply add those methods to underscore.  The bit of code that then modifies the wrapper object just disappears.\n\nAnother problem: I noticed that these wrapper-appended methods were not the same as their native counterparts.  For example `pop` doesn't return the removed item but the `initial` items.  And `splice` doesn't return the removed items but the modified array.  There are several more inconsistencies like this.  What was decided was that the array itself was the significant piece of data and thus the item that's uniformly returned.  \n\nI understand that and it makes some sense when you consider that underscore provides helpers primarily for arrays and not so many for other primitives.  However, I don't see the need.  In some of the situations there is already a perfect counterpart that does the trick.  That is, you could call `initial` rather than `pop` if you want the array without the last item.  Why shouldn't `pop` follow suit with the native method and simply return the last item?  One could argue that `pop` is not even needed as part of the chaining syntax since either `last` or `initial` would fill in just fine and these offer a choice between the actual return result or the adjusted array.  Furthermore, both `last` and `initial` have no connotation of mutating anything.  \n\nIf `pop` is desired for the sake of familiarity why not offer an alias?  But therein is another issue: is it an alias for `last` or `initial`?  If I were to pick one, I'd pick the one that is most consistent with the native API.  That'd be `last`.  Bear in mind, `initial` is readily available if you need it.  As you can see dealing with these mutating methods is problematic.  Per their current implementation within a chaining context they don't actually mutate anything and they also don't abide by the native API.  They're nonintuitive.  I'd recommend either they be excluded from the library or they do exactly what their native counterparts do: mutate.\n\nThere is a similar issue with `push` and `unshift`.  Natively these return the modified length of the array.  If what you want is the modified array why not offer `append` and `prepend` to do just that and leave `push` and `unshift` as is?  I understand that underscore emphasizes arrays right now, but as I recall underscore is extensible.  One can readily `mixin` new features maybe even ones that target other primitives like integers and so on.  And by preserving the API of natives even as we're wrapped up in a chain, it allows for a more natural use.  In fact, one could argue that underscore's utility could then be used in a lot more situations.  Lots of libraries that either extend or wrap natives in order to provide features could go away simply by offering underscore flavors of featured methods.  And to take advantage of these underscorified libraries you simply open a chain.\n\nWhat I'm advocating here is to simplify the codebase and do away with the kludge of modifying the wrapper object.  Instead, just add the mutator method features (or the non-mutating substitutes) to underscore directly.  This cleans up the code (see PR) by doing away with the bit that makes exceptions for how to handle array like methods in the context of a chain. Those methods will already be there. \n\nOffering these methods through underscore is useful especially when it comes to composition (i.e. using `compose` or the proposed `pipe`).  Plus by integrating the Array methods into underscore directly, you can trick them out with useful features that are not part of their native counterparts (in ways that are entirely backward compatible).\n\nOne of the most useful features I've found in a while is to overload `pop` and `shift` to accept a predicate.  This way, you can pluck an item from an array only when it satisfies the predicate.  I have found this immensely helpful with one of Javascript's most common tasks: argument processing.\n\n```\nfunction addAttr(){\n  var args = _.toArray(arguments),\n      key = args.shift(_.isString),\n      template = args.shift(_.isObject),\n      ...\n      options = args.shift();\n  if (key) {\n    ...\n  } else if (template) {\n    ...        \n  }\n  ...\n}\n\n//that beats:\nfunction addAttr(){\n  var args = _.toArray(arguments),\n      key =  _.isString(_.first(args)) ? args.shift() : undefined,\n      template = _.isObject(_.first(args)) ? args.shift() : undefined,\n      ...\n      options = args.shift();\n  if (key) {\n    ...\n  } else if (template) {\n    ...        \n  }\n  ...\n}\n```\n\nTo accomplish something like this in underscore you might actually permit mutator methods to mutate the wrapped object and provide non-mutating alternatives just as `rest` is the alternative to `shift`.  Or if you're not fond of offering mutation in a functional library, just do away with the names that are synonymous with mutation like `shift` and `pop` and provide alternatives like `append` and `prepend` that have no such connotation.  Using mutating names that don't actually mutate and that return results that aren't the same as their native counterparts is nonintuitive.\n\n```\nkey = _.shift(args, _.isString) //tricked out version of shift\noptions = _.shift(args) //mutates args\noptions = _.first(args) //no mutation\noptions = _.rest(args) //no mutation\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1184/comments",
    "author": "mlanza",
    "comments": [
      {
        "user": "mlanza",
        "created_at": "2013-07-04T15:12:37Z",
        "body": "Here is an example of how we could achieve the best of both worlds.  We offer methods directly lifted from Array that do exactly what their native counterparts do and we offer alternates that do things functionally without mutation.  (Again, as illustrated above -- in the argument processing example -- having mutating functions can prove useful.)\n\n```\n// included detach which is handy in general but especially so in this situation\n_.detach = function(fn){ //extract an object function for general use\n  return function(obj){\n    return fn.apply(obj, _.rest(arguments));\n  }\n}\n\n_.concat = _.detach(Array.prototype.concat);\n\n_.unshift = _.detach(Array.prototype.unshift);\n\n_.prepend = function(list, item){ //instead of unshift if you don't want the new length\n  return [item].concat(list);\n}\n\n_.push = _.detach(Array.prototype.push);\n\n_.append = function(list, item){ //instead of push if you don't want the new length\n  return list.concat([item]);\n}\n\n_.pop = _.detach(Array.prototype.pop); //instead of initial if mutation is desired\n\n_.shift = _.detach(Array.prototype.shift) //instead of rest if mutation is desired\n\n_.reverse = _.detach(Array.prototype.reverse);\n\n_.backward = _.compose(_.reverse, _.clone); //instead of reverse if mutation is undesired\n\n_.join = _.detach(Array.prototype.join);\n\n_.sort = _.detach(Array.prototype.sort);\n\n_.sorted = _.compose(_.sort, _.clone); //instead of sort if mutation is undesired\n\n_.splice = _.detach(Array.prototype.splice);\n\n_.ammend = function(list, idx, removeCount){ //instead of splice if mutation is undesired\n  var additions = Array.prototype.slice.call(arguments, 3);\n  return _.slice(list, 0, idx).concat(additions).concat(_.slice(list, idx));\n}\n\n_.slice = _.detach(Array.prototype.slice);\n```\n\nSee #1166 for `attach` which is the counterpart to `detach`.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-07-06T13:40:55Z",
        "body": "There are a number of ideas explored in this ticket -- all of which would probably be better looked at in isolation. Feel free to send a pull request that implements native methods in terms of a `detach`, or one that removes the native method proxies, or one that makes an argument for the functional flavors of array mutation, if you'd like. \n\nFYI, in general, we're fine with providing mutating methods in Underscore.\n"
      }
    ]
  },
  {
    "number": 1181,
    "title": "IE8 Error - Expected Identifier",
    "created_at": "2013-07-03T20:43:39Z",
    "closed_at": "2013-07-03T20:53:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1181",
    "body": "When using IE8, I'm receiving an error on line 1157 character 7 - Expected Identifier.\n\nThe line in question is:\n\n<code>render = new Function(settings.variable || 'obj', '_', source);</code>\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1181/comments",
    "author": "jsweet83",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-07-03T20:53:48Z",
        "body": "Hi @jsweet83!  This is likely due to a compilation error in your template.  If you check the `source` variable you'll likely find a syntax error which will fix your issue.\n"
      }
    ]
  },
  {
    "number": 1165,
    "title": "Self-currying methods",
    "created_at": "2013-06-26T15:38:13Z",
    "closed_at": "2013-07-06T14:08:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1165",
    "body": "In #1155 my accepted proposal presented the idea of allowing certain methods like `has` and `match` to curry themselves.  That is, if the method received only one of its two arguments it would assume the subject was omitted and return a curried version of itself.\n\n```\nvar curly = {name: 'Curly', type: 'stooge'};\n_.has(curly, 'type') // => true\nvar isTyped = _.has('type'); // => curried fn\nisTyped(curly) // => true\n```\n\nUnfortunately, a self-currying method has the extra overhead of having to determine if it was called in a self-currying manner.  Those who don't care to utilize the self-currying feature might frown on this.  As a compromise, we could leave `has` in its vanilla incarnation allowing those who like the self-currying feature to opt in.\n\n```\n_.has = _.selfCurrying(_.has)\n```\n\n`selfCurrying` would extend the method to layer this feature on top.  There are several methods that could benefit from this: `has`, `match`, `result`, `omit`, and `pick`.  To opt-in for this feature to be made available to all these methods, the developer would simply call `selfCurrying` with no arguments similar to the way `noConflict` might be called.\n\nThis illustrates the elegance provided by self-currying methods:\n\n```\n_.map(stooges, _.pick('name')) // vs...\n_.map(stooges, function(stooge){\n  return _.pick(stooger, 'name');\n})\n```\n\nI like the elegance -- a wow-factor -- even as I do recognize it comes at an expense.  #1163 offers an alternative to self-currying:\n\n```\n_.map(stooges, _.partial(_.pick, _, 'name'))\n```\n\nHonestly, I don't like having to present the developer with this decision about whether or not to use the feature, but I'm at odds with wanting to preserve performance and still use the elegant self-currying syntax.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1165/comments",
    "author": "mlanza",
    "comments": [
      {
        "user": "mlanza",
        "created_at": "2013-07-02T12:15:54Z",
        "body": "I found this very feature just last night in wu.js.  It goes by the name `autoCurry`.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-07-06T14:08:30Z",
        "body": "I think that making this decision at the time when you reference the function you'd like to partially apply is a nice way to go (instead of having it be global). Your partial way works, or perhaps an even more specialized function that simply converts Underscore functions into versions which prefill all arguments except the first (data) argument.\n\n```\n_.map(stooges, _.forward(_.pick, 'name'))\n```\n\n... or whatever. In any case, best explored through a pull request.\n"
      }
    ]
  },
  {
    "number": 1160,
    "title": "version bump to push license info into npm listing",
    "created_at": "2013-06-23T09:41:56Z",
    "closed_at": "2013-06-24T16:04:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1160",
    "body": "It appears that the commit that added the license to package.json was pushed after the latest commit. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1160/comments",
    "author": "redchair123",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-06-24T16:04:09Z",
        "body": "It very well might have been ;) It'll go out with the next release.\n"
      }
    ]
  },
  {
    "number": 1155,
    "title": "Use better composition to deprecate _.where and _.findWhere",
    "created_at": "2013-06-20T12:35:28Z",
    "closed_at": "2013-06-24T16:29:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1155",
    "body": "Both `_.where` and `_.findWhere` are useful; however, it's obvious that the former's counterpart is `_.filter` and the latter's `_.find`.  I think the level of granularity could be improved by extracting the matching algorithm into `_.match`.\n\n`match` would essentially have two possible uses:\n\n```\nvar moe       = {name: 'Moe', type: 'stooge'},\n    curly     = {name: 'Curly', type: 'stooge'},\n    larry     = {name: 'Larry', type: 'stooge'},\n    abbott    = {name: 'Abbott'},\n    costello  = {name: 'Costello'},\n    comedians = [moe, curly, larry, abbott, costello];\n\n// 1. direct use\n_.match(moe, {type: 'stooge'}) // => true\n\n// 2. indirect use -- use partial application (omitting the object) to get a matching fn\nvar isStooge = _.match({type: 'stooge'}) // => fn\nisStooge(curly) // => true\nisStooge(abbott) // => false\n```\n\nThe benefit of this approach is the reusability with the other parts of underscore.\n\n```\n_.filter(comedians, _.match({type: 'stooge'}))\n_.find(comedians, _.match({type: 'stooge'}))\n_.reject(comedians, _.match({type: 'stooge'}))\n_.any(comedians, _.match({type: 'stooge'}))\n_.all(comedians, _.match({type: 'stooge'}))\n\n//or keep the matching fn around for a while if that proves useful...\n_.filter(comedians, isStooge)\n_.find(comedians, isStooge)\n_.reject(comedians, isStooge)\n_.any(comedians, isStooge)\n_.all(comedians, isStooge)\n```\n\nThe more granular use provides more opportunity for reuse without sacrificing anything.\n\n```\n_.where(comedians, {type: 'stooge'}) // becomes...\n_.filter(comedians, _.match({type: 'stooge'}))\n\n_.findWhere(comedians, {type: 'stooge'}) // becomes...\n_.find(comedians, _.match({type: 'stooge'}))\n```\n\nThis seems more consistent since the potential in the future is to provide other fns that get the first of something or get all of something.  This approach always relegates getting the first of something to `_.find` and getting all of something to `_.filter`.  \n\nUsing this philosophy, there is potential to provide other helper methods that vend functions and provide greater opportunity for composition.  For example, we could do the same kind of thing with the `_.has` method by omitting the object to get a fn.\n\n```\nvar isTyped = _.has('type')\n_.filter(comedians, isTyped)\n_.filter(comedians, _.has('type')) // vs. the longhand...\n_.filter(comedians, function(comedian){\n    return _.has(comedian, 'type')\n})\n```\n\nIn fact, the `has` method itself -- which already accepts keys -- could be extended to accept an object template so that we have a more robust `has` instead of a new `match` method.\n\n```\n_.findWhere(comedians, {type: 'stooge'}) // becomes...\n_.find(comedians, _.has({type: 'stooge'}))\n_.has(curly, {type: 'stooge'}) // => true\n```\n\nWould be happy to make a pull request if you accept the proposal.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1155/comments",
    "author": "mlanza",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-06-20T14:33:56Z",
        "body": "I like this idea :+1:\n"
      },
      {
        "user": "jdalton",
        "created_at": "2013-06-20T19:58:16Z",
        "body": "@mlanza I dig your composition ideas.\n\nI've done something kind of related to this in Lo-Dash, passing `callback` to `_.createCallback`, in methods that accept a `callback`, to handle shortcuts like `_.find(comedians, { type: 'stooge' })` or `_.filter(comedians, 'type')`, allowing `_.findWhere` to be an alias of `_.find` and `_.where` to be an alias of `_.filter`.\n"
      },
      {
        "user": "mlanza",
        "created_at": "2013-06-20T23:26:25Z",
        "body": "@caseywebdev @jdalton Thanks for the affirmation.  \n\n@jdalton Will spend some time studying Lo-Dash in the near future.  I see you also use stooges in your examples so clearly we think we alike. :)\n"
      },
      {
        "user": "lfac-pt",
        "created_at": "2013-06-21T10:10:09Z",
        "body": ":+1:  This would be really cool!\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-06-24T16:29:18Z",
        "body": "@mlanza -- Love it. Feel free to send in the pull request, and get the credit.\n"
      },
      {
        "user": "mlanza",
        "created_at": "2013-06-27T22:04:28Z",
        "body": "It dawned on me that this could work too\n\n```\n_.find(comedians, {type: 'stooge'}) //match\n_.find(comedians, 'type') //has\n_.filter(comedians, {type: 'stooge'})\n_.filter(comedians, 'type')\n```\n\nby making use of `match` and `has` internally.  The interesting consideration is that every new feature comes with a slight cost to all the old use cases.  I'm not necessarily advocating this. It's hard to know where to draw the line between a robust api and performance.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2013-06-27T22:08:02Z",
        "body": "I think the `has` shortcut looks more like a `pluck`, which is just property access without the `has` check.\n"
      }
    ]
  },
  {
    "number": 1144,
    "title": "Optimize _.debounce(fn, 0)",
    "created_at": "2013-06-09T19:11:27Z",
    "closed_at": "2013-06-09T19:12:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1144",
    "body": "I find _.debounce immensely useful, but perhaps the most useful application is with a wait of 0.  This simply allows a flood of events to be cascaded into one event handler.  For example:\n\n``` javascript\n// a backbone collection with a lot of models\n// second argument to _.debounce isn't technically needed \n// (jasmine 1.3.1 mock clock needs it)\ncollection.on(\"change\", _.debounce(handleChangeEvent, 0));\n// models fire a ton of events; handleChangeEvent invoked only once\nchangeAllOfTheModelsInCollection();\n```\n\nThe problem is that _.debounce isn't optimized very well for this situation.  Every invocation will call clearTimeout/setTimeout.  To be sure these native methods are fast (at least in Chrome) but the performance hit is not insignificant, as the script below illustrates.\n\nI personally feel the the best solution is to optimize _.debounce, but a new method would work as well.\n\nMy output from this script:\n\n_.debounce: 609ms\noptimized debounce: 4ms\n\n``` javascript\n(function() {\n    var _ = window._;\n    var console = window.console;\n\n    function optimizedDebounce(fn) {\n        var pending = false;\n        return function () {\n            if (!pending) {\n                var context = this, args = arguments;\n                pending = true;\n                setTimeout(function () {\n                    pending = false;\n                    fn.apply(context, args);\n                }, 0);\n            }\n        };\n    }\n\n    function elapsedTime(fn) {\n        var start = new Date();\n        fn();\n        return (new Date().getTime() - start.getTime()) + \"ms\";\n    }\n\n    function speedTest(debounceFn) {\n        var invocations = 99999;\n        var debounced = debounceFn(_.identity, 0);\n\n        return elapsedTime(function () {\n            for (var i = 0; i < invocations; i++) {\n                debounced();\n            }\n        });\n    }\n\n    console.info(\"_.debounce: \" + speedTest(_.debounce));\n    console.info(\"optimized debounce: \" + speedTest(optimizedDebounce));\n\n}());\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1144/comments",
    "author": "johnomalley",
    "comments": [
      {
        "user": "johnomalley",
        "created_at": "2013-06-09T19:12:29Z",
        "body": "I forgot to mention that I would, of course, be happy to submit a pull request.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-06-09T19:12:45Z",
        "body": "That'd be great. Go for it.\n"
      }
    ]
  },
  {
    "number": 1129,
    "title": "Why used \"concat.apply\" in _.pick and _.omit",
    "created_at": "2013-05-25T09:14:15Z",
    "closed_at": "2013-05-25T11:01:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1129",
    "body": " I found following code in _.pick and _.omit when I review the code\n\n``` javascript\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n```\n\nI don't know why we have to `concat` the `slice.call(arguments, 1)`, since we already got a new array by `slice.call(arguments, 1)`, even there's only empty array, it will no affect on the code below.\n\nseems the code can be shorten as following, any ideas?\n\n``` javascript\n\n  _.pick = function(obj) {\n    var copy = {};\n    each(slice.call(arguments, 1), function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = slice.call(arguments, 1);\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1129/comments",
    "author": "qivhou",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-05-25T11:01:21Z",
        "body": "Morning @qivhou!  `concat` is used because it also flattens the array.\n\n``` js\nconcat.apply(ArrayProto, [[1, 2, 3], [4, 5, 6]]); // [1, 2, 3, 4, 5, 6]\n```\n"
      },
      {
        "user": "qivhou",
        "created_at": "2013-05-25T13:50:25Z",
        "body": "@braddunbar , thanks for your answer!\nI checked the unit test and found the following cases, they do make sense!\n\n``` javascript\n result = _.pick({a:1, b:2, c:3}, ['a'], 'b');\n    ok(_.isEqual(result, {a:1, b:2}), 'can restrict properties to those named in mixed args');\n```\n\nThanks again!\n"
      }
    ]
  },
  {
    "number": 1119,
    "title": "_.partial does not carry over arity (Function.prototype.length)",
    "created_at": "2013-05-17T16:19:26Z",
    "closed_at": "2013-05-17T18:05:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1119",
    "body": "Doing `_.partial(function(a, b) {}, 1)` ends up returning a function with a `length` of 0, whereas it should be `1`.\n\nIf all's merry, I can send a patch (or as the new kids say: _pull request_).\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1119/comments",
    "author": "moll",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-05-17T18:05:54Z",
        "body": "All's merry. Request away.\n"
      },
      {
        "user": "moll",
        "created_at": "2013-05-17T18:49:18Z",
        "body": "Turns out not to be as easy as I thought. I naively thought `Function.prototype.length` is writable. It isn't.\nThe best alternative I can think of now would be to use `Function` to dynamically create a delegator function with X arity, though I don't know the performance impact of that.\n\nI stumbled upon the problem with `_.partial` just recently in the server side context where it's not uncommon for functions' arities to be checked.\n\nWhat's your take on correctness over [possibly] performance?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-05-17T18:54:49Z",
        "body": "My take is that I believe we previously discussed it and figured that the current approach is the lesser of the evils. Probably in previous tickets.\n"
      },
      {
        "user": "moll",
        "created_at": "2013-05-17T19:18:45Z",
        "body": "Fair enough. Though the only related thing I could find was #1031 which didn't offer a working solution at all.\nPerhaps once there are more people reporting this.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-05-17T19:22:40Z",
        "body": "> didn't offer a working solution at all\n\n... well, then. Feel free to take a PR crack at it!\n"
      },
      {
        "user": "vendethiel",
        "created_at": "2013-05-17T19:23:44Z",
        "body": "As said there, this isn't equivalent for `partial`\n"
      }
    ]
  },
  {
    "number": 1107,
    "title": "isNumber, where is isInt or isFloat",
    "created_at": "2013-05-09T05:24:04Z",
    "closed_at": "2013-05-09T06:12:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1107",
    "body": "I guess this is really more of a feature request rather than a bug/issue.\n\nWhy is there no isInt or isFloat function?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1107/comments",
    "author": "sgarbesi",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-05-09T06:12:28Z",
        "body": "JavaScript only has one kind of number, a Number. There are no ints, only doubles.\n"
      }
    ]
  },
  {
    "number": 1081,
    "title": "Please support both fromIndex and isSorted on indexOf",
    "created_at": "2013-04-23T14:58:01Z",
    "closed_at": "2013-07-06T14:47:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1081",
    "body": "As the title suggests, it'd be nice to see both fromIndex and isSorted as features of underscore's indexOf() function.\n\nThis would likely require sortedIndex() to be extended to add a fromIndex variable as a fifth parameter, but the aim to avoid the need to use slice() in order to binary search from a given index.\n\nThe change shouldn't harm indexOf()'s current signature, which could remain in use, it would simply be a condition of isSorted that if it is a numeric value, then the next parameter will be used, but if isSorted is a boolean then it will ignore further parameters as normal.\n\nAlso, is it possible to support isSorted on lastIndexOf as well? I haven't had a chance to give sortedIndex() a good luck but I believe a binary search can be made to work in reverse.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1081/comments",
    "author": "Haravikk",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-07-06T14:47:19Z",
        "body": "Sounds like the argument juggling could get a little hairy (and perhaps make the method a bit harder to use). If you think it'll work out well, feel free to send in this change as a pull request.\n"
      }
    ]
  },
  {
    "number": 1080,
    "title": "_.templateSettings: evaluate can't be omitted",
    "created_at": "2013-04-23T00:08:31Z",
    "closed_at": "2013-04-23T14:08:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1080",
    "body": "Doc says:\n\n> Define an interpolate regex to match expressions that should be interpolated verbatim, an escape regex to match expressions that should be inserted after being HTML escaped, and an evaluate regex to match expressions that should be evaluated without insertion into the resulting string. **You may define or omit any combination of the three.**\n\nBut after this:\n\n```\n_.templateSettings = {\n    escape:     /<%[=\\-](.+?)%>/g,\n    interpolate:    /<%#(.+?)%>/g\n};\n```\n\ndefault evaluate <%…%> doesn't work anymore. This works fine:\n\n```\n_.templateSettings = {\n    evaluate:   /<%(.+?)%>/g,\n    escape:     /<%[=\\-](.+?)%>/g,\n    interpolate:    /<%#(.+?)%>/g\n};\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1080/comments",
    "author": "powerman",
    "comments": [
      {
        "user": "jdalton",
        "created_at": "2013-04-23T00:16:14Z",
        "body": "Yap, by omitting the `evaluate` delimiter, you're basically saying drop support for it.\nIf you don't want to pave the entire settings object but still customize a few options:\n\n``` js\n_.extend(_.templateSettings, {\n  'escape': /<%[=\\-](.+?)%>/g,\n  'interpolate': /<%#(.+?)%>/g\n});\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-04-23T14:08:16Z",
        "body": "Yep yep, no need to overwrite `_.templateSettings`.  Just replace whatever you need.  :)\n"
      }
    ]
  },
  {
    "number": 1021,
    "title": "_.object with single value",
    "created_at": "2013-03-15T17:46:09Z",
    "closed_at": "2013-03-17T10:13:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1021",
    "body": "I'm finding I often have code that looks like this:\n\n``` javascript\nvar hash = {};\n_.each(list, function (item) {\n  hash[item.keyOfSorts] = defaultValue;\n});\n\n// later\nif (hash[item.keyOfSorts] === defaultValue)\n...\nhash[item.keyOfSorts] = otherValue;\n```\n\nSince `_.object` already takes an array and converts it to an object, it could be a way to create the initial hash. Right now, though, the code looks like this:\n\n``` javascript\nvar hash = _.object(_.map(list, function (item) {\n  return [item.keyOfSorts, defaultValue];\n}));\n```\n\nIt would be easier if `_.object` could take a singular value as the second argument:\n\n``` javascript\nvar hash = _.object(_.pluck(list, 'keyOfSorts'), defaultValue);\n\n// or with the item being the key:\nvar hash = _.object(list, defaultValue);\n```\n\nThe downside is that anyone thinking they could set every key to the same array by\ndoing `_.object(list, array)` will be surprised. I don't see that being something anyone would want to do.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1021/comments",
    "author": "jacobsandlund",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-03-17T10:13:54Z",
        "body": "I dunno about extending the API in this direction. Have you tried using `_.defaults` for this?\n"
      },
      {
        "user": "estani",
        "created_at": "2016-09-19T12:07:47Z",
        "body": "I use this list to hash conversion a lot for fast lookups. Most of the time this is enough:\n\n``` javascript\n    var list = ['id1', 'id2', 'id3'];\n    var hash = _.object(list, [undefined]);\n    // hash -> {id1:undefined, id2:undefined, id3:undefined};\n```\n\nwhich allows a lookup in O(1) by doing `'id4' in hash`. Sometimes it would be nicer to allow for `if (hash.id1) {...}` which would work if the default value were true. Something like:\n\n``` javascript\n    _.object(list, true);\n```\n\nor more flexible with:\n\n``` javascript\n    _.object(list, function(){return true});\n```\n\nis there a better way of doing this?\n"
      },
      {
        "user": "Florian-R",
        "created_at": "2016-09-19T12:38:03Z",
        "body": "@estani If you don't have a lot of lookups, my gut feeling is that using `_.contains` will be much more efficient (and cleaner).\n\nIf you do a lot of lookups on the same list and you know the overhead of the initial `_.object` is worth it, you might want to do something like : \n\n``` js\nvar list = ['id1', 'id2', 'id3'];\nvar hash = _.object(list, _.times(list.length, () => true));\n// hash -> {id1:true, id2:true, id3:true}\n```\n"
      }
    ]
  },
  {
    "number": 1009,
    "title": "_.wrap doesn't support wrapping function with argument",
    "created_at": "2013-03-09T04:47:02Z",
    "closed_at": "2013-03-09T11:50:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1009",
    "body": "Today while writing code using underscore and backbone i had to wrap some functions. I saw following example on underscorejs.org\n\nvar hello = function(name) { return \"hello: \" + name; };\nhello = _.wrap(hello, function(func) {\n  return \"before, \" + func(\"moe\") + \", after\";\n});\nhello();\n=> 'before, hello: moe, after'\n\non the second last line \nwhat if the function call is like \nhello(\"umar\");\nI means to say that arguments are coming from outside.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1009/comments",
    "author": "umarfarooq125",
    "comments": [
      {
        "user": "knowtheory",
        "created_at": "2013-03-09T11:50:36Z",
        "body": "Wrap already takes care of most of this for you.  The source for wrap is pretty short to read through.  That or you can take a gander at the extended example below:\n\n``` Javascript\nvar greet = function(name, language){\n  var response\n  if (language === \"sp\") {\n    response = \"Hola\"\n  } else if (language === \"fr\") {\n    response = \"Bonjour\"\n  } else {\n    response = \"Hello\"\n  }\n  return response + \" \" + name\n}\ngreet(\"Ted\", \"fr\"); // => \"Bonjour Ted\"\ngreet = _.wrap(greet, function(old_greet, lang){ return old_greet(\"Ted\", lang); } );\ngreet(\"sp\"); // => \"Hola Ted\"\n\n```\n"
      },
      {
        "user": "umarfarooq125",
        "created_at": "2013-03-10T09:10:29Z",
        "body": "Thanks for this quick response. It was very much helpful.\nI am using backbone to develop an enterprise app.\nview.js\nvar view = Backbone.View.extend({\n\nauthorizeCreateAction: function (){\n//here \"this\" points to view\nthis.createAlert: _.wrap(this.createAlert, function(_createAlert, _type){\n    //authorize create action\n    return _createAlert(_type);\n  });\n},\ncreateAlert: function(type){\n    //PROBLEM:\n    // Here \"this\" points to [window global]\n  }\n});\nsee inside createAlert function when I was calling createAlert function directally it was pointing to view but when I wrote wrapper function it started pointing to [window global]\nI want to change referance of this to be pointing to \"view\"\n\nI am new to underscore, please ignore if question is irrelevant.\nBTW underscore is awesome\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-03-10T12:56:34Z",
        "body": "You'll need to call `_createAlert` with a context like below.  Hope that helps.  :)\n\n``` js\nreturn _createAlert.call(this, _type);\n```\n"
      },
      {
        "user": "zarehb",
        "created_at": "2015-03-11T00:24:20Z",
        "body": "it seems underscore _wrap only supports one parameter , use this instead:\n\nfn = (function(fn,before,after, self) {\n                return function() {\n                    if(before) before.apply(self,arguments);\n                    var res = fn.apply(self,arguments);\n                    if(after) after.apply(self,arguments);\n                    return res;\n                }\n            })(fn, before, after, this )\n"
      },
      {
        "user": "megawac",
        "created_at": "2015-03-11T00:32:15Z",
        "body": "You can also use partial for that zarehb\n"
      },
      {
        "user": "zarehb",
        "created_at": "2015-03-11T00:40:23Z",
        "body": "tnx megawac, partial is more for pre-filling the arguments not calling a before and after function\n"
      },
      {
        "user": "megawac",
        "created_at": "2015-03-11T00:43:01Z",
        "body": "Wrap is implemented via `_.partial` fyi\n\n``` js\nfn = _.partial(function(fn, before, after, self) {\n    var args = _.rest(arguments, 4);\n    if (before) before.apply(self,args);\n    var res = fn.apply(self,args);\n    if (after) after.apply(self,args);\n    return res;\n})(fn, before, after, this )\n```\n"
      },
      {
        "user": "zarehb",
        "created_at": "2015-03-11T00:49:25Z",
        "body": "that's correct and it will work, but in case anyone wants a pure js solution can take mine specially that using underscore doesn't give you any benefit in this case!\n"
      }
    ]
  },
  {
    "number": 919,
    "title": "Adding some function that is map and filter at the same time",
    "created_at": "2012-12-25T08:30:20Z",
    "closed_at": "2012-12-28T02:25:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/919",
    "body": "Hello people,\n\nI'm here wondering if it would be useful to have a function like that implemented. I've seen an example in the underscore site were you do it using the chain method, and out of curiosity I've implemented some method that does it (_.comprehend), and using it is faster than using the chained version( at least in my tests). \n\nI thought of sending a pull request, but since I don't know if it's useful or not, I'm just leaving this message here to hear what you guys think of it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/919/comments",
    "author": "jvfl",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-12-28T02:25:58Z",
        "body": "Because Underscore is about having atomic functions that compose nicely together. Instead of adding new functions for particular combinations, it's better just to use both, in turn.\n"
      },
      {
        "user": "JavaScriptDude",
        "created_at": "2023-10-05T16:56:18Z",
        "body": "LOL - I just wrote a comprehend for the exact same usecase. Seems like the name is a winner at least ;-)"
      }
    ]
  },
  {
    "number": 851,
    "title": "_.difference, _.union & _.intersection and deep object comparison?",
    "created_at": "2012-11-05T12:44:40Z",
    "closed_at": "2012-11-12T03:06:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/851",
    "body": "Can I use _.difference, _.union & _.intersection with arrays of objects? I'm testing it and seems like the objects `{ id=1,  alias_id=null }` and `{ id=1,  alias_id=null }` are not considered equals by those methods:\n\n**My variables**\n\n`console.log( favs );` displays  \n `[Object { id=1,  alias_id=null }, Object { id=12,  alias_id=null }]`\n\n`console.log( [currentFund] );`displays  \n`[Object { id=1,  alias_id=null }]`\n\n**difference**\n\n`console.log( _.difference(favs, [currentFund]));` displays  \n\n`[Object { id=1,  alias_id=null }, Object { id=12,  alias_id=null }]`\n\n**union**\n\n`console.log(_.union(favs, [currentFund]));` displays  \n\n```\n[ \n      Object { id=1,  alias_id=null }, \n      Object { id=12,  alias_id=null }, \n      Object { id=1,  alias_id=null }\n] \n```\n\n**intersection**\n\n`console.log(_.intersection(favs, [currentFund]));` displays  `[ ]`\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/851/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-11-12T03:06:10Z",
        "body": "Yes, the only Underscore operator which uses deep equality semantics is `_.isEqual`. Everything else is by normal JS equality semantics.\n"
      }
    ]
  },
  {
    "number": 789,
    "title": "_.max Documentation error on underscorejs.org",
    "created_at": "2012-09-20T18:28:18Z",
    "closed_at": "2012-09-20T18:29:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/789",
    "body": "The existing code example for _.max:\n\n```\nvar stooges = [{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}];\n_.max(stooges, function(stooge){ return stooge.age; });\n=> {name : 'curly', age : 60};\n```\n\nI couldn't get `return stooge.age;` to work, but I can do `return stooge.get('age');`\n\nIf there is a place for me to fork the underscorejs.org code and fix this, I can do that. Sorry if this is the wrong place to put this issue, but I couldn't find a repository for the docs.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/789/comments",
    "author": "nackjicholson",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-09-20T18:29:43Z",
        "body": "Thanks for the note, but it sounds like you're mixing Underscore and Backbone. The example on that page is valid for the code that it lists.\n"
      }
    ]
  },
  {
    "number": 787,
    "title": "_.max & _.min functions should always return number as Math.max do.",
    "created_at": "2012-09-20T12:33:04Z",
    "closed_at": "2012-09-20T15:11:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/787",
    "body": "now it gives unexpected results sometimes:\n\n_.max(['1','4']);\n\"4\"\n\n_.max([1,'4']);\n4\n\nMath.max('1','4');\n4\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/787/comments",
    "author": "SergeyKashulin",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-09-20T15:11:22Z",
        "body": "I'm afraid we're not going to coerce types for you. Pass numbers into `max` and `min`. \n"
      },
      {
        "user": "SergeyKashulin",
        "created_at": "2012-09-20T15:43:55Z",
        "body": "It's not about doing something for me. It's about predictable behaviour of function.\nIf you think _.max should return whatever given _.max([1,'4']) should return '4'(string) not 4(int).\nBut i still think function should behave like similar one in core JavaScript - always return number.\nI can implement both if that's the issue.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-09-20T15:52:32Z",
        "body": "Hey @SergeyKashulin!  I think the crux of the matter is that `_.max` can't guess your intention.  Do you mean to compare '4' as an integer or 1 as a string?  Should all be coerced to strings?  or numbers?  compared in place?  what about strings that coerce to NaN?\n\nSince `_.max` can't guess your intentions, passing mixed arrays is an undefined behavior.  You just need to coerce the values before passing to `_.max`.\n"
      },
      {
        "user": "SergeyKashulin",
        "created_at": "2012-09-20T16:55:08Z",
        "body": "JavaScript Specification ECMA-262 makes behaviour of the Math.max pretty much defined:\n15.8.2.11 max ( [ value1 [ , value2 [ , ... ] ] ] )\nGiven zero or more arguments, calls ToNumber on each of the arguments and returns the largest of the\nresulting values.\n\nI can't see why JS library should use another way especially if it delegates call to native Math.max in some cases:\n257: if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n258:   return Math.max.apply(Math, obj);\n259: }\nLooks like simple imperfection to me. \n\nAnd yes i think library developers have more responsibility then library users.\n"
      }
    ]
  },
  {
    "number": 776,
    "title": "Incompatibility between underscore, modernizr and iOS",
    "created_at": "2012-09-15T06:19:46Z",
    "closed_at": "2012-09-17T16:44:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/776",
    "body": "On mobile safari, I kept seeing `Can't find variable: slice` messages. Turns out, the Function.prototype.bind polyfill in Modernizr 2.5 was the root of the problem, and removing it fixes the issue.\n\nJust putting this here in case someone else runs into the same problem. Took me a damn long time to trace it to the root.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/776/comments",
    "author": "ejholmes",
    "comments": [
      {
        "user": "jdalton",
        "created_at": "2012-09-15T14:06:41Z",
        "body": "Related to #742.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2012-09-15T14:16:57Z",
        "body": "This affects Modernizr 2.5.1 too\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-09-17T16:44:39Z",
        "body": "Continuing the conversation from #742... I still don't think it's Underscore's business to be hard-testing against your native functions. If you use a broken shim, then that's a problem, but it's not necessarily a problem that Underscore should be masking -- and even if we did, it wouldn't prevent you from running into bugs with your shim down the road.\n\nBut I can imagine valid use cases for wanting to override native methods as well. For example, if @jdalton decided that his optimized JS-side replacement for `forEach` was an across-the-board improved version of the native function, he could override `[].forEach` in his application, and Underscore would happily use that version. If the function works, I don't think we should be blacklisting it.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2012-09-17T17:56:25Z",
        "body": "@jashkenas So far devs have only run into problems with Underscore's blind native use. It seems more beneficial to add the check than to be without it.\n\nMost dev's don't replace native implementations nowadays, but they do shim. So as it stands Underscore cannot be used as a low level lib in widgets which may be embedded in other pages and may suffer slowdowns or errors because of its blind use of shimmed code, all issues that Lo-Dash avoids.\n"
      }
    ]
  },
  {
    "number": 763,
    "title": "Memoize constructors",
    "created_at": "2012-09-07T08:42:38Z",
    "closed_at": "2012-09-12T15:04:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/763",
    "body": "It would be great if memoize could handle constructors as well as normal functions.\n\nThis would i.e. be used when rendering a list of search results, where we'd want to make sure we don't re-instantiate the Views for each result.\nThe way it works right now, I have to create a proxy function that creates my new objects, and memoize that proxy function.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/763/comments",
    "author": "magnhaug",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-09-07T11:00:55Z",
        "body": "Good morning @magnhaug, thanks for opening an issue!  What do you mean by handles constructors?  I would think that memoize already handles constructors.  Maybe you could provide an example?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-09-12T15:04:16Z",
        "body": "`memoize` is normally used for computations that return numeric or string results, not objects. That said, you should be able to pass the `hasher` argument to `memoize` in order to better handle equality semantics for complex objects ... in the case of constructors, perhaps returning an `id` for the object. Should work just fine.\n"
      }
    ]
  },
  {
    "number": 695,
    "title": "Compare function to _.uniq",
    "created_at": "2012-08-08T11:15:50Z",
    "closed_at": "2012-08-30T19:18:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/695",
    "body": "I need a compare function for _.uniq so that I can compare two \"equal\" items that differ slightly. E.g. I have two records but one is slightly newer than the other, so I'll want to only keep the newest.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/695/comments",
    "author": "arniarent",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-08-30T19:18:07Z",
        "body": "Then it sounds like they aren't equal. Try `reject` instead of `uniq`.\n"
      }
    ]
  },
  {
    "number": 692,
    "title": "Add function to order an array or collection of objects by an array of one of their attributes",
    "created_at": "2012-08-06T17:21:12Z",
    "closed_at": "2012-08-06T17:27:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/692",
    "body": "Say I have a collection of objects, each having an ID. I want to re-order them in the order specified by an array containing only the objects' IDs.\n\nRight now, I'm using `sortBy`, but I'm sure a specific function would be much more efficient (O(n) instead of a sort)\n\n``` javascript\nthis.models = this.sortBy(function(post){\n    return _.indexOf(order, post.id);\n});\n```\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/692/comments",
    "author": "julien-c",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-08-06T17:27:36Z",
        "body": "Hi @julien-c!  You'll definitely want to use a hash mapping ids to indexes here.\n\n``` js\nvar lookup = {};\n\nfor (var i = 0; i < order.length; i++) {\n  lookup[order[i]] = i;\n}\n\n_.sortBy(collection, function(post) {\n  return lookup[post.id];\n});\n```\n\nHope that helps.  :)\n"
      },
      {
        "user": "julien-c",
        "created_at": "2012-08-06T19:06:59Z",
        "body": "Thanks for the response @braddunbar ! \n\nWell, there's still a sort, so it's still kind of computationally intensive... I guess I'm going to rebuild my array by hand.\n"
      }
    ]
  },
  {
    "number": 685,
    "title": "Add a JSLint friendly alias",
    "created_at": "2012-07-26T09:40:30Z",
    "closed_at": "2012-07-26T12:10:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/685",
    "body": "It would be nice if underscore included an alias which doesn't start with `_` and therefore was JSLint friendly (JSLint complains when variables start with `_`).\n\nTherefore there would be two ways of using underscore:\n\n```\n_.forEach([1, 2, 3], function (item) {\n    console.log(item);\n});\n```\n\nand for example:\n\n```\nUnderscore.forEach([1, 2, 3], function (item) {\n    console.log(item);\n});\n```\n\nOther libraries as jQuery allow two forms of invoking their functions (eg: `$(\"#id\")` or `jQuery(\"#id\")`).\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/685/comments",
    "author": "eliOcs",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-07-26T12:10:41Z",
        "body": "Yep -- you can certainly do this.\n\n```\nvar Underscore = _.noConflict();\n```\n"
      },
      {
        "user": "catearcher",
        "created_at": "2012-07-26T12:11:03Z",
        "body": "Or you could simply add this to your script:\n\n/*jslint nomen: true */\n"
      },
      {
        "user": "eliOcs",
        "created_at": "2012-07-26T13:14:23Z",
        "body": "@jashkenas thanks, completely missed that utility method.\n"
      }
    ]
  },
  {
    "number": 644,
    "title": "_.uniq is unable to do his job with objects",
    "created_at": "2012-06-15T12:26:11Z",
    "closed_at": "2012-06-15T15:45:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/644",
    "body": "var a = _.uniq([{u:\"k\"},{u:\"k\"}]);\n\nJSON.stringify(a);\n\ngives :\n\"[{\"u\":\"k\"},{\"u\":\"k\"}]\"\n\nReason ? Underscore uses === and not _.isEqual to test equality of objects.\n\nI know it's slower, but in the real world we don't use map, fold, filter and all theses good functions you provide in your lib to use it with integer, string or char !\n\nMaybe you could give the choice to the user ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/644/comments",
    "author": "ontologiae",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-06-15T15:45:10Z",
        "body": "You're in luck, `_.uniq` already takes a custom iterator function which can be used to use `isEqual` semantics, or any other equality semantics you like. Check the docs.\n"
      },
      {
        "user": "ontologiae",
        "created_at": "2012-06-15T23:21:51Z",
        "body": "Sorry, it is not a good answer for me.\n\nTry one day in your life a true functionnal language like OCaml, Haskell or Scala and you will see that the default equality test is your isEqual.\nWe should not to be forced to use an iterator to do that. \nThe semantic of your function is just false.\n"
      },
      {
        "user": "ontologiae",
        "created_at": "2012-06-15T23:22:01Z",
        "body": "So my own fork\n"
      },
      {
        "user": "ghost",
        "created_at": "2013-03-10T15:57:36Z",
        "body": "Try iterator function\n\nx = [['a',1],['b',2],['a',1]]\n\n_.uniq(x,false,function(i){  \n\n   return i[0]   //'a','b'\n\n})\n=> [['a',1],['b',2]]\n"
      }
    ]
  },
  {
    "number": 641,
    "title": "Why is _._ defined?",
    "created_at": "2012-06-13T20:30:06Z",
    "closed_at": "2012-06-13T20:39:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/641",
    "body": "For underscore.1.3.3, why is _._ defined?\n\n```\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = _;\n    }\n    exports._ = _;\n} else {\n    root['_'] = _;\n}\n```\n\nShouldn't `exports = module.exports = _;` be `exports = module.exports;`?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/641/comments",
    "author": "LarryBattle",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2012-06-13T20:37:42Z",
        "body": "Compatibility with CommonJS environments that don't support the non-standard `module.exports` property (in these implementations, Underscore has to be loaded as `var _ = require(\"_\")._`.\n"
      },
      {
        "user": "LarryBattle",
        "created_at": "2012-06-13T20:39:37Z",
        "body": "Ok. Thanks.\n"
      },
      {
        "user": "LarryBattle",
        "created_at": "2012-06-13T20:39:50Z",
        "body": "Solved.\n"
      }
    ]
  },
  {
    "number": 634,
    "title": "Strange behavior with _.range function",
    "created_at": "2012-06-08T14:44:06Z",
    "closed_at": "2012-06-08T14:52:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/634",
    "body": "Some example:\n_.range(4) or _range(0, 4) or  _.range(\"4\")  produce [0, 1, 2, 3]  - OK\n_.range(\"0\", 4) or _range(\"0\", \"4\") produce [\"0\", \"01\", \"011\", \"0111\"] I was expected [0, 1, 2, 3]\n\nfrom the above examples I've conclude that star parameter is not parse as stop parameter \n\nI tested in  iceweasel 10.0.4 / Debian 6.5 with Underscore.js 1.3.3\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/634/comments",
    "author": "yoander",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-06-08T14:51:31Z",
        "body": "`_.range` is defined for numbers, not for strings, I'm afraid. If you pass in other objects as well, it similarly won't work.\n"
      },
      {
        "user": "yoander",
        "created_at": "2012-06-08T14:53:33Z",
        "body": "Ok, I agree why _.range(\"4\") produce [0, 1, 2, 3] then?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-06-08T14:56:25Z",
        "body": "It shouldn't -- ideally it would throw an error. But, this being a dynamic language, we don't hard police the input arguments to every single function. It's entirely possible to pass a function bad values and get strange results. Just don't do it. ;)\n"
      }
    ]
  },
  {
    "number": 601,
    "title": "include returns incorrect result for undefined in IE ",
    "created_at": "2012-05-10T22:48:10Z",
    "closed_at": "2012-05-11T19:47:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/601",
    "body": "Reproduce the issue with the following in developer tools console: \n_.include([undefined],undefined)\n\nExpected result: true\n\nResult in IE 8: false\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/601/comments",
    "author": "kopious",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2012-05-10T23:48:11Z",
        "body": "This is actually a rather infamous bug: IE <= 8 treats `undefined` array elements as elisions—it's as if you wrote `_.include(Array(1), undefined)`, which is `false` in all browsers. Nothing much to be done, I'm afraid.\n"
      }
    ]
  },
  {
    "number": 548,
    "title": "Eliminating `with`",
    "created_at": "2012-04-10T01:52:19Z",
    "closed_at": "2012-04-10T02:58:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/548",
    "body": "Given that `with` seems to slow things down (in addition to it being deprecated): Two – possibly silly – ideas.\n1. Extract the variables used in the template (e.g. \"foo\" and \"bar\") and, instead of `with`, wrap:\n   \n   ```\n   (function (foo, bar) {\n       ...\n   }(obj.foo, obj.bar));\n   ```\n2. Prefix each interpolated variable with \"obj.\", drop the `with` statement.\n\nAlas, not nearly as versatile as `with`, especially when arbitrary expressions are interpolated.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/548/comments",
    "author": "rauschma",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-04-10T02:58:09Z",
        "body": "Very interesting, but I'm afraid they won't quite work out.\n1. This works when providing all variables with `data` at compile time.  However, if some variables are left undefined or a data object is not provided (the template is precompiled) then no variables will be used.\n2. This works when the interpolated string is a property name (e.g. `<%= foo %>`) but not if it's an expression like `<%= Math.min(i, 10) %>`.\n\nThanks for sharing these, I hadn't thought of these approaches.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-10T14:29:44Z",
        "body": "Axel, are you aware of Brad's recent `{variable: 'data'}` patch? In Underscore 1.3.2, you can avoid `with` if you like.\n"
      },
      {
        "user": "rauschma",
        "created_at": "2012-04-10T14:35:09Z",
        "body": "I am, thanks! `obj` was previously already helpful, in this regard (e.g. when checking whether a property existed):\n\n```\nif (typeof foo === \"undefined\") ... // with\nif (obj.foo) ... // no with\n```\n"
      }
    ]
  },
  {
    "number": 545,
    "title": "1.3.2 / 1.4.0 release?",
    "created_at": "2012-04-09T16:59:07Z",
    "closed_at": "2012-04-09T18:00:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/545",
    "body": "Would love to see a new release made and pushed to npm.  Seems there's a bunch of new stuff merged in, which would be good to start using (without pointing the package.json directly to github).\n\nLet me know if there's anything that can be done to help expedite that.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/545/comments",
    "author": "cleishm",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-04-09T18:00:26Z",
        "body": "Your wish is my command. I'll get started on cutting one now...\n"
      }
    ]
  },
  {
    "number": 509,
    "title": "Need of nested templates - Idea for implementation",
    "created_at": "2012-03-17T02:26:11Z",
    "closed_at": "2012-03-19T16:35:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/509",
    "body": "I would like to be able to nest templates and searching on Google it seems a common request.\n\nThese is my suggestions:\n1. Extend _ . template function to ve used as _ . template(templateString, [ _templateName_ ], [context]) \n   -  _templateName_ is optional and it can be distinguished with typeof from _context_ because _templateName_ is a **string** while _context_ is an **object**. So you can also use syntax like _.template(templateString, templateName) or _.template(templateString, context).\n   - if _templateName_ is specified the compiled function is saved in an internal array\n2.  Use <%t templateName (param1, param2, etc) %> or <%# templateName (param1, param2, etc) %>  to use the previously defined template inside the new template\n\nLet me know what you think and if you want I can implement that.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/509/comments",
    "author": "ChrisCinelli",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-03-19T16:35:21Z",
        "body": "I think it's quite unnecessary because nested templates are already easy to do:\n\n```\n<div>\n  <%= otherTemplate(data) %>\n</div>\n```\n"
      },
      {
        "user": "ChrisCinelli",
        "created_at": "2012-03-19T21:59:14Z",
        "body": "I does not work for me.\nThe _.template needs to be called twice for the template and the other template and, in my case, _.template is called in 2 different closures.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-20T14:25:19Z",
        "body": "_.template only ever needs to be called once for _any_ template string. You get back a compiled template function which you can pass around anywhere you like -- including into other template calls.\n"
      },
      {
        "user": "ChrisCinelli",
        "created_at": "2012-03-23T18:59:15Z",
        "body": "Yes, I wanted to call _.template only once. I did not think about passing the compiled function to the other template. After adding {formatTime: formatTime} it works, thanks.\n\nThis is what I did:\n\n```\n    var formatTime = (function(){\n        var compiled = _.template($(\"#format-time-template\").html());\n        return function(seconds){\n            return compiled({seconds: seconds});\n        };\n    })();\n\n    var createVideoEvidence = (function(){\n        var compiled = _.template($(\"#create-video-evidence-template\").html());\n        return function(evidence, videoId){\n            return compiled({formatTime: formatTime, evidence: evidence, videoId: videoId});\n        };\n    })();\n```\n\nAnd then in the template #create-video-evidence-template I can use <%= formatTime(...) %> \n"
      }
    ]
  },
  {
    "number": 480,
    "title": "_.create Feature",
    "created_at": "2012-02-16T21:23:45Z",
    "closed_at": "2012-02-16T21:26:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/480",
    "body": "Would underscore be interested in something along the lines of a utility method that takes an arbitrary number of arguments and returns a new object like Object.create() but cross browser. The general use is the ability to use a merge like .extend() without having to clone the initial object.\n\nExample use case,\n```{events: _.create(Parent.prototype.events, {})}\n\n```\n\n\nWhat is the typical or recommended approach to this? Are people using Object.create and shimming it? Perhaps using ``_.extend({}, obj, obj2)``?\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/480/comments",
    "author": "iammerrick",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T21:26:31Z",
        "body": "Nope -- historically Underscore has tried to stay out of the \"how-to-do-OOP-in-JS\" fight. See lots of previous tickets...\n\nThe recommended approach is to _never_ shim any native. Lots of websites shim `Object.create` in a way that's entirely incompatible with the native implementation. Use prototypes if you're doing it raw ... use a library function that sets the prototype chain for you if you're doing it with a library.\n"
      },
      {
        "user": "iammerrick",
        "created_at": "2012-02-16T21:30:09Z",
        "body": "I am not so much making a recommendation for any sort of OOP. I realize people use object.create for that as well but what I am really looking for is a method that merges objects and returns  new one with mutating any source object. Like I said for Backbone child views when the parent uses an events hash, one currently has to clone the parent and merge the new ones; seems a bit silly when you ought to be able to just create a new object from children. I would argue methods like extend and defaults lend just as much to OOP opinion as a create from all these sub children would.\n\nThanks for the quick response and opinion, you are an excellent maintainer.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T21:32:08Z",
        "body": "Ah, you've already got that -- just as you said. The `Object.create` talk threw me off the scent.\n\n```\n_.extend({}, a, b, c, d);\n```\n"
      },
      {
        "user": "iammerrick",
        "created_at": "2012-02-16T21:33:11Z",
        "body": "Ok that is all I wanted. Thank you sir. :-D.\n"
      }
    ]
  },
  {
    "number": 461,
    "title": "difference() behaviour change between 1.1.7 and 1.3.1",
    "created_at": "2012-02-06T05:50:53Z",
    "closed_at": "2012-04-02T20:55:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/461",
    "body": "In 1.1.7, difference() seems to identify differences between objects:\n\n```\n_.difference({a: \"b\", c: \"d\", e: \"f\"}, {a: \"b\"})\n[\"d\", \"f\"]\n```\n\nIn 1.3.1, difference() fails to identify differences.  Perhaps it's comparing reference equality rather than value equality now?\n\n```\n_.difference({a: \"b\", c: \"d\", e: \"f\"}, {a: \"b\"})\n[\"b\", \"d\", \"f\"]\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/461/comments",
    "author": "duncan-bayne",
    "comments": [
      {
        "user": "michaelficarra",
        "created_at": "2012-02-06T17:34:41Z",
        "body": "I don't know what kind of undocumented behaviour you were relying upon before, but the documentation for `_.difference` pretty clearly states\n\n> // Take the difference between one array and a number of other arrays.\n> // Only the elements present in just the first array will remain.\n\nand\n\n> Similar to `without`, but returns the values from `array` that are not present in the `other` arrays.\n\nYou're not using arrays or even array-like objects as arguments. Though, admittedly, the code does look generic enough to support arbitrary object difference if we wanted.\n\n```\n_.difference = function(array) {\n  var rest = _.flatten(slice.call(arguments, 1), true);\n  return _.filter(array, function(value){ return !_.include(rest, value); });\n};\n```\n\n`_.flatten`, when called on a list of objects like the ones you are giving it just produces the list of `other`s. `_.filter` is filtering based on the values of the first argument (the three strings you see in your result) and testing if the `other` array contains any of those values. Obviously it doesn't because it contains a bunch of objects, not (in your case) strings. We would have to `_.map` `_.values` over `other`s before flattening.\n\n```\n_.difference = function(array) {\n  var rest = _.flatten(_.map(_.tail(arguments), _.values), true);\n  return _.filter(array, function(value){ return !_.include(rest, value); });\n};\n```\n\nThat should genericise `_.difference`.\n"
      },
      {
        "user": "duncan-bayne",
        "created_at": "2012-02-06T21:28:31Z",
        "body": "Thanks for your help sorting this out.  I was relying on the very best sort of undocumented behaviour: behaviour that someone who's worked on the code prior to me has assumed :-)\n\nAre you interested in the above change making it into Underscore?  If so I'll fork underscore, make the change (appropriately tested, of course) & submit a pull request.  \n\nIf you'd rather stick with the existing array-only behaviour, I'll just monkey-patch it in our project.\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2012-02-08T18:47:06Z",
        "body": "That's a question for @jashkenas and the other underscore collaborators. Personally, I'm indifferent to the change.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-02T20:55:08Z",
        "body": "I think we should stick with the existing \"array-only\" semantics. Diffing objects opens up a whole can of worms about shallow equality versus deep equality, and representing changes to nested arrays and objects, and we probably don't want to go there.\n"
      }
    ]
  },
  {
    "number": 449,
    "title": "_.each() does not work on Backbone.Collection instance",
    "created_at": "2012-01-27T21:05:09Z",
    "closed_at": "2012-01-27T21:26:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/449",
    "body": "Some how, the following iteration code does not seem to work:\n\n```\n    var objCol = new Backbone.Collection( [{attr: 'value1'}, {attr: 'value2'}] );\n    _.each( objCol, function( obj ){ alert(obj); } );\n```\n\nBut this works:\n\n```\n    var objCol = new Backbone.Collection( [{attr: 'value1'}, {attr: 'value2'}] );\n    objCol.each( function( obj ){ alert(obj); } );\n```\n\nIs it a bug with Underscore.js or a bug with Backbone.js?  It would be great if the iteration works both ways. Thanks\n\nBTW, this happens in Underscore.js v1.3.1 with Backbone 0.5.3 collection instance on IE8. I did not test against other versions.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/449/comments",
    "author": "skang",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-27T21:26:49Z",
        "body": "It ain't a bug.\n\nAn instance of a Backbone.Collection is an object, not an array -- if you want direct access to the array of models:\n\n```\n_.each(objCol.models ...\n```\n\n... but really, that's what `objCol.each` is there for.\n"
      }
    ]
  },
  {
    "number": 443,
    "title": "_.intersection bug",
    "created_at": "2012-01-24T15:08:50Z",
    "closed_at": "2012-01-24T15:31:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/443",
    "body": "Try `_.intersect ['1', '10'], [ '10', '1' ] isnt _.intersect [ '10', '1' ], ['1', '10']` which would wrongly be `true`.  The latter intersection returns just `[ '10' ]`.  \n\nIf '1' were '01' it's all good.  Something to do with sorting strings?  However, I tried it with numbers (i.e. without quotes) and it fails all the same.  Still something to do with the order, I suppose.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/443/comments",
    "author": "orlin",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-24T15:31:12Z",
        "body": "Two different arrays are never equal to each other in JavaScript.\n\n```\n> [1] !== [1]\ntrue\n```\n"
      },
      {
        "user": "orlin",
        "created_at": "2012-01-24T19:51:35Z",
        "body": "Perhaps I mis-stated the `isnt` expression (checking for it differently).  Didn't realize it was **underscore.string** causing it -- will post one there too.  Here is how to reproduce the issue:\n\n```\n_ = require \"underscore\"\n_.mixin require \"underscore.string\"\n\nconsole.log _.intersect [ '10', '1' ], [ '1', '10' ]\n\n# the result should be `[ '10', '1' ]`\n# it's `[ '10' ]` instead\n```\n\nJust made sure I have underscore updated.  Same thing.\n"
      }
    ]
  },
  {
    "number": 422,
    "title": "_.index function",
    "created_at": "2012-01-03T16:10:59Z",
    "closed_at": "2012-01-04T20:07:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/422",
    "body": "Something I've added as a hacky mixin in my project, and was wondering if it was worth considering for underscore proper, is an `index` function that creates an object which maps the values of a particular property to the object. It works similarly to the the `pluck` function, but instead of returning an array containing the property values, it returns an object where the object's properties are the values, and the value of each property is the object from the original array.\n\n``` javascript\nvar stooges = [{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}];\n\n_.index(stooges, 'name');\n\n=> { 'moe': {name : 'moe', age : 40},\n     'larry': {name : 'larry', age : 50},\n     'curly': {name : 'curly', age : 60} }\n```\n\nI've found this to be very useful when dealing with collections of objects that have one or more unique properties which you need to use identify them instead of the object reference, for example when binding to a DOM element's value property, or as a parameter or result value in a web service call.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/422/comments",
    "author": "jonrimmer",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-04T20:04:40Z",
        "body": "Interesting.\n\nWhat's the behavior when multiple objects in the list have identical indexes? What does your implementation look like?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-04T20:07:40Z",
        "body": "Actually, nevermind -- this already exists in Underscore. Check out `groupBy`.\n\n```\n_.groupBy(stooges, 'name');\n```\n"
      }
    ]
  },
  {
    "number": 418,
    "title": "Mutation-safe version of each",
    "created_at": "2011-12-23T18:54:36Z",
    "closed_at": "2012-01-04T20:06:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/418",
    "body": "I noticed when iterating over a Backbone.collection with each and destroying a model, it skips one, for instance\n\n``` coffeescript\n  foos.add [\n    {x: '1'}\n    {x: '2'}\n    {x: '3'}\n  ]\n\n  foos.each (m) -> # or _(foos.models).each\n    m.destroy()\n```\n\nOnly the first and third get destroyed. Should a version of each be made that will still provide every element, or should I get the length and make a regular for loop and decrement the iterator after destroying?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/418/comments",
    "author": "lorensr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-04T20:06:20Z",
        "body": "This isn't really an Underscore question, but no -- we shouldn't be providing a \"mutation-safe\" version of `each`. Instead, clone the array before you iterate it for mutation:\n\n```\n_.each(_.clone(collection.models), function(model){ model.destroy(); });\n```\n"
      }
    ]
  },
  {
    "number": 407,
    "title": "give _.invoke iterator option",
    "created_at": "2011-12-16T17:48:20Z",
    "closed_at": "2011-12-16T17:52:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/407",
    "body": "feature request:\n\ni would love doing something like\n\n_.invoke(list, methodName, function(num,key) {return key})\n\niterator providing arguments for the method\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/407/comments",
    "author": "dev-bjoern",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-16T17:52:12Z",
        "body": "You're looking for `each`, not `invoke`.\n\n```\n_.each(list, function(item){ item.method(key); });\n```\n"
      },
      {
        "user": "dev-bjoern",
        "created_at": "2011-12-16T18:12:37Z",
        "body": "i wanted to do\n\nvar $get = _.invoke(list, $.get, function(num) { return num } )\n\n$get now would contain an array with list.length $.deferred objects\n\nthis would be very convenient\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-12-16T18:17:33Z",
        "body": "```\n$get = _.map(list, function(item){ return $.get(item, num); });\n```\n"
      },
      {
        "user": "dev-bjoern",
        "created_at": "2011-12-16T18:29:03Z",
        "body": "thx :)\n"
      }
    ]
  },
  {
    "number": 398,
    "title": "Class-based OOP",
    "created_at": "2011-12-07T03:20:09Z",
    "closed_at": "2011-12-07T03:52:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/398",
    "body": "are there any plans of implementing prototypes' class-based OOP system?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/398/comments",
    "author": "madevelopers",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-07T03:52:40Z",
        "body": "Nope -- no plans to do so.\n"
      }
    ]
  },
  {
    "number": 387,
    "title": "Returning result from throttled function",
    "created_at": "2011-12-02T00:56:33Z",
    "closed_at": "2011-12-02T20:56:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/387",
    "body": "Is there some reason that throttled functions don't return a value? I ran into this problem and adding a `return` before `func.apply(context, args);` fixed things.\n\nAm I misunderstanding how throttle should be used?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/387/comments",
    "author": "KyleAMathews",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-02T20:56:45Z",
        "body": "Yes -- throttle won't return any value except for once every _wait_ milliseconds. Because of that -- it's impossible to get all of the return values. Not returning anything is more consistent.\n"
      }
    ]
  },
  {
    "number": 367,
    "title": "toArray should convert a single element into an array",
    "created_at": "2011-11-10T21:45:30Z",
    "closed_at": "2011-11-14T15:55:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/367",
    "body": "One of the patterns i use in Ruby is \n\ndef foo (category)\n Array(category).each{|item| puts item}\nend\n\nIt would be nice to have something like this with toArray as well. Instead of (in coffeescript)\n\n```\nkeywords =  if _.isArray(doc.keywords) then doc.keywords else [doc.keywords]\n```\n\nIs there a better way of doing this?\n\nIf you think it is useful, i can provide a patch for it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/367/comments",
    "author": "sreeix",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-11-14T15:55:11Z",
        "body": "Sure, just use \"flatten\"\n\n```\nkeywords = _.flatten([doc.keywords])\n```\n"
      },
      {
        "user": "sreeix",
        "created_at": "2011-11-14T16:00:08Z",
        "body": "Aaarg. Thanks.\n"
      },
      {
        "user": "stevo11101",
        "created_at": "2013-09-19T05:28:56Z",
        "body": "I think this solution is too obtuse. I am in favor of adding _.asArray. Rarely do I want to iterate over characters, and that the library lacks a clear obvious way to do so is frustrating.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-19T14:40:41Z",
        "body": "While I don't think we should change `_.toArray`, I often mix in `_.wrapArray` as an analogue to rails' `Array.wrap`.\n\n``` js\n_.mixin({                                                                       \n\n  wrapArray: function(obj) {                                                    \n    if (obj == null) return [];                                                 \n    if (_.isArray(obj)) return obj;                                             \n    return [obj];                                                               \n  }                                                                             \n\n});\n```\n"
      },
      {
        "user": "stevo11101",
        "created_at": "2013-09-20T18:59:31Z",
        "body": "I dont think we should change <code>_.toArray</code> either. I think <code>_.wrapArray</code> should be in the library. I just had an inferior name for it (<code>_.asArray</code>).\n\nI wrote that exact mixin, verbatim. Ill bet lots of people have. It just seems natural to include it in the library.\n\nIt seems that you would usually want to deal with a string as wrapped in an array, rather than treating it as a list of characters.\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2013-09-20T19:22:23Z",
        "body": "@stevo11101: I'd be strongly against including something like that in underscore. No offence to you or @braddunbar, but you should really always know what type of data you are working with. If you don't, you're designing your program wrong, plain and simple. I've _never_ needed something like this because I make sure to either be working with consistently typed data or a data structure like `Either` that explicitly differentiates between the possible types of data.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-20T19:30:41Z",
        "body": "None taken, certainly.  :)\n\nI don't care much whether or not this is pulled in, but I sometimes use `Array.wrap` or `_.wrapArray` to normalize an api.  For instance, a function that takes either an id or an array of ids.\n\n``` js\nvar foo = function(ids) {\n  _.each(_.wrapArray(ids), function(id) {\n    // ...\n  });\n};\n\nfoo(null);\nfoo(1);\nfoo([1, 2, 3]);\n```\n\nI'm curious, how do you normally handle this situation?\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2013-09-20T19:55:27Z",
        "body": "I would either always expect a list (single-element and empty lists are lists, too, you know!) or write a variable-arity function, which is pretty much the same thing.\n\nIn ES5+:\n\n``` js\nfunction foo(/* ...ids */) { return [].map.call(arguments, function(id){ /* ... */ }); }\n```\n\nUsing underscore:\n\n``` js\nfunction foo() { return _.map(arguments, function(id){ /* ... */ }); }\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-20T19:57:05Z",
        "body": "Gotcha.  Thanks @michaelficarra!\n"
      },
      {
        "user": "mlanza",
        "created_at": "2014-01-25T05:36:28Z",
        "body": "+1 for `wrapArray`.  I've always created my own mixin for just same.  It's useful esp. when you consider that the brunt of underscore deals with enumerables.\n"
      }
    ]
  },
  {
    "number": 297,
    "title": "each cannot iterate localStorage",
    "created_at": "2011-09-21T13:27:29Z",
    "closed_at": "2011-09-21T21:06:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/297",
    "body": "The issue of testing the length property in **each** has been already discussed, but what is the final decision?\n\nJust to mention that localStorage is not an array but has a (numerical) length property, and therefore cannot be iterated with each.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/297/comments",
    "author": "bambax",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-09-21T21:06:46Z",
        "body": "The final decision is that you should iterate `localStorage` yourself, and not rely on `_.each`.\n"
      },
      {
        "user": "bambax",
        "created_at": "2011-09-21T22:37:54Z",
        "body": "OK, but why not update the doc to point to the behavior about the length property?\n"
      }
    ]
  },
  {
    "number": 257,
    "title": "Uncaught SyntaxError: Unexpected identifier",
    "created_at": "2011-07-24T00:14:28Z",
    "closed_at": "2011-08-03T14:30:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/257",
    "body": "I am getting this error in my application, while using this library:\n\n`Uncaught SyntaxError: Unexpected identifier`\n\nMy code is \n\n`window.JST['product_icon'] = _.template('<div\\nid=\"product_icon_<%= product.id %>\"\\nclass=\"product_icon itemSpacer\"\\ndata-product-id=\"<%= product.id %>\">\\n\\n  <div\\n  class=\"sticker item hide\"\\n  <% if (product.images and product.images.length) { %>\\n  style=\"background-image:url(\\'/assets/products/<%= product.images[0].id %>/small/<%= product.images[0].attachment_file_name %>\\');\"\\n  <% } %>>\\n\\n    <div class=\"data-container\">\\n      <small class=\"id\"><%= product.id %></small>\\n      <div class=\"description\">\\n        <div class=\"background\"></div>\\n        <div class=\"text\">\\n          <a href=\"#\" class=\"add-to-cart\">\\n            Add to cart\\n          </a><br/>\\n          <a href=\"<%= \\'/products/\\' + product.permalink %>\" class=\"view-sticker-details\">\\n            View this sticker\\n          </a>\\n          <br/>\\n          <a href=\"#\" class=\"FPO-load-brands\">\\n            View all brand Stickers\\n          </a>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n');`\n\nI tried every thing but can not identify the problem. Please help me its urgent. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/257/comments",
    "author": "nazarhussain",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-08-03T14:30:18Z",
        "body": "\"Unexpected identifier\" means that you have a variable you're trying to reference that hasn't been declared. Make sure you pass all the variables you're trying to use into your template.\n"
      },
      {
        "user": "viliush",
        "created_at": "2020-04-28T06:45:20Z",
        "body": "lisencijos$"
      },
      {
        "user": "pratishtha25-gif",
        "created_at": "2020-11-06T15:38:51Z",
        "body": "i am having the same error please help!\r\n"
      },
      {
        "user": "pratishtha25-gif",
        "created_at": "2020-11-06T15:39:53Z",
        "body": "> \"Unexpected identifier\" means that you have a variable you're trying to reference that hasn't been declared. Make sure you pass all the variables you're trying to use into your template.\r\n\r\nyou have copied it right"
      }
    ]
  },
  {
    "number": 218,
    "title": "_.all has an unecessary backward-incompatible change",
    "created_at": "2011-05-24T19:54:53Z",
    "closed_at": "2011-05-24T20:41:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/218",
    "body": "I updated my underscore.js file today and my project broke.  After a bit of debugging, I found out it's because _.all now requires the iterator argument, instead of it being optional.  What is the point of this?\n\nIf no iterator is provided, why not use the identity iterator automatically?  That would preserve backward compatibility.  Also, it would allow me to use _.all all over the place without having to repeat that identity function argument every time for the simple case of checking my list items for truthiness.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/218/comments",
    "author": "nickretallack",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-24T20:41:28Z",
        "body": "... because we need to stick close to the ES5 API -- and the ES5 API requires the iterator argument, I'm afraid. You can take a look at the github issues to see the discusccion about the change.\n"
      }
    ]
  },
  {
    "number": 217,
    "title": "google group?",
    "created_at": "2011-05-23T19:53:45Z",
    "closed_at": "2011-05-25T18:27:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/217",
    "body": "Can you add a google group. It is a better place to ask \"how to\" questions.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/217/comments",
    "author": "RobKohr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-25T18:27:07Z",
        "body": "I'm afraid that I don't think the volume of \"how to\" questions merits its own Google Groups quite yet -- but thanks for the idea. Maybe if there are more questions later.\n\nFor now, lots of folks use StackOverflow for this sort of thing.\n"
      }
    ]
  },
  {
    "number": 216,
    "title": "debugging template code - needs line numbers",
    "created_at": "2011-05-23T19:51:40Z",
    "closed_at": "2011-07-13T15:05:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/216",
    "body": "Is there a way to make it so errors return line numbers from template code? Tracking down errors is tricky when it just tells you the problem in the compiled code.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/216/comments",
    "author": "RobKohr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-07-13T15:05:33Z",
        "body": "Nope, I'm afraid there are no such thing as line numbers in templates that are compiled from strings.\n"
      }
    ]
  },
  {
    "number": 181,
    "title": "Alternative to <%= and %>",
    "created_at": "2011-04-24T16:46:47Z",
    "closed_at": "2011-04-24T18:07:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/181",
    "body": "I would like to use Underscore.js templates within a JSP, but cannot figure out a way to prevent JSP from processing the <%= and %>.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/181/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "samuelclay",
        "created_at": "2011-04-24T17:35:30Z",
        "body": "Does this help? From the docs:\n\n_.templateSettings = {\n  interpolate : /{{(.+?)}}/g\n};\n\nvar template = _.template(\"Hello {{ name }}!\");\ntemplate({name : \"Mustache\"});\n=> \"Hello Mustache!\"\n"
      },
      {
        "user": "ghost",
        "created_at": "2011-04-24T18:08:28Z",
        "body": "Just what I needed. Sorry for not RTFM.\n"
      }
    ]
  },
  {
    "number": 167,
    "title": ".clone question",
    "created_at": "2011-03-30T14:21:08Z",
    "closed_at": "2011-03-31T02:28:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/167",
    "body": "it is much faster to clone object using this instead of ._extend method:\n\n```\nfunction F(){};\nF.prototype = obj;\nreturn new F;\n```\n\nDo I missing something?\n\nThanks,\nOleg\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/167/comments",
    "author": "kof",
    "comments": [
      {
        "user": "dvv",
        "created_at": "2011-03-30T15:38:17Z",
        "body": "May be that changes to the original object go to the clone as well...\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-03-31T02:28:02Z",
        "body": "Yes -- this method isn't the same thing as `clone` at all.\n"
      },
      {
        "user": "ghost",
        "created_at": "2011-03-31T03:19:19Z",
        "body": "@kof Your proposed method will only create a new object that inherits from `obj`. This is problematic for two reasons: first, the new object will not have any own properties, and thus cannot be effectively used as a hash. More importantly, however, changes to the original object will propagate down the prototype chain and mutate the clone, as @dvv has mentioned above.\n"
      },
      {
        "user": "kof",
        "created_at": "2011-03-31T08:35:06Z",
        "body": "@dvv, @kitgoncharov thanks, too stupid question ...\n"
      }
    ]
  },
  {
    "number": 88,
    "title": "Extend nested objects?",
    "created_at": "2010-12-29T22:57:24Z",
    "closed_at": "2010-12-30T23:14:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/88",
    "body": "say i have:\n    var a = {\"foo\": { \"bar\":\"baz\" }}\n    var b = {\"foo\": { \"alice\":\"bob\" }}\n    var c = _.extend(a, b) // gives me {\"foo\": { \"alice\":\"bob\" }}\n\nWhat's the best way to make:\n    c = {\"foo\": { \"bar\":\"baz\", \"alice\":\"bob\" }}\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/88/comments",
    "author": "cly",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-30T15:13:54Z",
        "body": "Hmm ... you're looking for a \"deep merge\" sort of function. One trick about that is that Objects within the hash will also be merged instead of replaced. For example:\n\n```\nvar a = {person: new Alice()};\nvar b = {person: new Bob()};\nvar c = deepMerge(a, b);\n```\n\n... now, instead of replacing Alice with Bob, you have some sort of funky Alice-Bob hybrid. I believe that's one of the reasons why this sort of function isn't commonly used.\n\nBut, genetic experimentation aside, let's try to write one anyway.\n\n```\ndeepMerge = function(target, source) {\n  for (var key in source) {\n    var original = target[key];\n    var next = source[key];\n    if (original && next && typeof next == \"object\") {\n      deepMerge(original, next);\n    } else {\n      target[key] = next;\n    }\n  }\n  return target;\n};\n```\n"
      },
      {
        "user": "cly",
        "created_at": "2010-12-30T21:57:23Z",
        "body": "This is awesome thanks! Any chance this will make it into _? Hmm, or maybe I can try a different approach.\n\nMy use case is overriding a common config file with an environment's config file. Using log4js, I have nested configs and I have to maintain entire logging configs for each of the environments when all I want to do is override a few parameters.\n\nThe alternative I have is to have a config template with parameters for overridable values. Then I can have flat common, prod, dev config files that replaces those overridable parameters as necessary. This will work with arrays as well whereas deepMerge will not. Hey, I can use _.templates! Cool, i think ill try this approach.\n\nCheers!\n"
      }
    ]
  },
  {
    "number": 85,
    "title": "Uniq/unique returns undefined on an empty array in WebKit on OS X",
    "created_at": "2010-12-22T04:05:59Z",
    "closed_at": "2010-12-22T23:11:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/85",
    "body": "Since, Underscore is influenced by Ruby, I figured that unique-ing an empty array would just return an empty array.\n\nIn Ruby 1.8.7:\n\n[].uniq\n=> []\n\nOf course the uniq! method does return a nil on an empty array, but it's a destructive method and Underscore doesn't really have those.\n\nRuby 1.8.7:\n\n[].uniq!\n=> nil\n\nIs undefined the correct output when calling uniq on an empty array or should it just return itself or an empty array?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/85/comments",
    "author": "eddorre",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2010-12-22T06:01:46Z",
        "body": "Nope, it shouldn't return `undefined`...you mentioned that you're using Prototype 1.6.0.1 alongside Underscore; this is why. Older versions of Prototype redefine `Array#reduce()`, which is required for `uniq` to work correctly (see #84 for a more detailed explanation).\n\nTry removing Prototype and then running `_.uniq([])`. The result should be an empty array.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-22T15:10:38Z",
        "body": "Thanks for figuring that out, **kitgoncharov** -- I might have gone chasing down the rabbit hole after that one.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T16:21:54Z",
        "body": "No problem. Before **eddorre** said that he was using Prototype in his project, this had me scratching my head, too.\n"
      },
      {
        "user": "eddorre",
        "created_at": "2010-12-23T05:32:00Z",
        "body": "Sorry for the false alarm guys. Thanks for looking into this so quickly.\n"
      }
    ]
  },
  {
    "number": 84,
    "title": "uniq/unique doesn't seem to work in Webkit (Chrome/Safari) on OS X",
    "created_at": "2010-12-22T03:59:27Z",
    "closed_at": "2010-12-22T12:08:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/84",
    "body": "I'm using version 1.1.3 and here is a sample from the console:\na\n[1, 2, 1, 3, 1, 4]\na[0]\n1\na[2]\n1\na[0] === a[2]\ntrue\n_.uniq(a);\n[1, 2, 1, 3, 1, 4]\n\nYou'll notice that a[0] and a[2] are equal according to the \"threequals\" operator and according to the documentation, there should only be one \"1\" after unique-ing the array \"a\".\n\nIs there something that I'm doing wrong or is this a bug?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/84/comments",
    "author": "eddorre",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:05:35Z",
        "body": "`_.uniq()` returns a new array; it doesn't mutate the original. Try this:\n\n```\nvar a = [1, 2, 1, 3, 1, 4], b = _.uniq(a);\na; // [1, 2, 1, 3, 1, 4]\nb; // [1, 2, 3, 4]\n```\n"
      },
      {
        "user": "eddorre",
        "created_at": "2010-12-22T04:09:31Z",
        "body": "kitgoncharov,\n\nThanks for the quick reply. It doesn't seem to work for me:\n\nThis is output from the WebInspector in Safari:\n\nvar a = [1, 2, 1, 3, 1, 4], b = _.uniq(a);\nundefined\nb\n[1, 2, 1, 3, 1, 4]\na\n[1, 2, 1, 3, 1, 4]\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:10:54Z",
        "body": "Hmm...it seems to work as expected for me under Safari 5.0.2. Which version are you using?\n"
      },
      {
        "user": "eddorre",
        "created_at": "2010-12-22T04:11:40Z",
        "body": "5.0.3 - it was released just a little while ago.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:13:21Z",
        "body": "Interesting...I'll update my version and see what's wrong.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:20:00Z",
        "body": "Sorry, I can't reproduce this under 5.0.3, either. Not sure what the problem is.\n"
      },
      {
        "user": "eddorre",
        "created_at": "2010-12-22T04:24:33Z",
        "body": "kitgoncharov,\n\nStarted taking out JavaScript libraries. Seems to be an incompatibility with an older version of Prototype; 1.6.0.1 to be exact.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:35:42Z",
        "body": "Aha...that's why. Older versions of Prototype define an `Array#reduce()` method that returns the first element of an array if it contains only one element, or the original array if it contains multiple elements. ECMAScript 5, however, defines a separate `Array#reduce()` function that behaves completely differently from Prototype's version (this version of `reduce` is similar to Ruby's `inject`).\n\nUnderscore's `uniq` method uses `reduce` internally, which delegates to the native implementation if available. Unfortunately, it can't distinguish between the native ECMAScript 5 version and the Prototype version, which overrides the former without checking for it.\n\nPrototype 1.6.1 and higher fix this problem; I'd recommend updating to the latest version if you can.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T04:44:32Z",
        "body": "As a side note, however, it's generally considered bad practice to include multiple JavaScript libraries. Prototype's `Enumerable` module provides iteration functions comparable to Underscore's, so I'd suggest using one or the other. Incidentally, this will also avoid conflicts like these, since Prototype augments native prototypes extensively.\n"
      }
    ]
  },
  {
    "number": 38,
    "title": "Extend",
    "created_at": "2010-09-26T10:56:44Z",
    "closed_at": "2010-09-28T02:35:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/38",
    "body": "Why \"without extending any of the built-in JavaScript objects\" ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/38/comments",
    "author": "trans",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-09-27T19:35:16Z",
        "body": "Because extending built-ins is often makes your code incompatible with other libraries and scripts. If you want to extend built ins, because you're certain that your JS is going to be run in isolation, I suggest taking a look at Prototype.js, which provides many of the same helpers as Underscore, in a more object-oriented fasion.\n\nBut Prototype is also a good example of how extending native objects can bite you -- in previous versions of Prototype, and `Array#reduce` function was added to the native Array object. ECMAScript 5 standardized a version of `Array#reduce`, a couple years later, and browsers implemented it as a native function. Unfortunately, JavaScript's reduce isn't compatible with Prototype's reduce, and any page that loads those versions of Prototype will monkey-patch the native version of the function out of existence...\n"
      },
      {
        "user": "trans",
        "created_at": "2010-09-28T19:08:05Z",
        "body": "Sure. I understand the hazards, but it could be an option. If one knows it won't be an issue it sure can be convenient.\n\nAlso, there is another way to avoid these issues buy still extend the built-in: using a single access method, e.g. in this case maybe `_` could work.\n\n```\n[]._.reduce()\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-09-28T19:15:26Z",
        "body": "If you'd like to extend Array.prototype with the Underscore methods, feel free to add them yourself...\n\n```\n// Underscore methods that we want to implement on Array.\nvar methods = ['each', 'map', 'reduce', 'reduceRight', 'detect', 'select',\n  'reject', 'all', 'any', 'include', 'invoke', 'pluck', 'max', 'min', 'sortBy',\n  'sortedIndex', 'toArray', 'size', 'first', 'rest', 'last', 'without',\n  'indexOf', 'lastIndexOf', 'isEmpty'];\n\n// Mix in each method as a proxy.\n_.each(methods, function(method) {\n  Array.prototype[method] = function() {\n    return _[method].apply(_, [this].concat(_.toArray(arguments)));\n  };\n});\n```\n"
      },
      {
        "user": "trans",
        "created_at": "2010-09-28T20:42:28Z",
        "body": "Nice. Thanks.\n"
      }
    ]
  },
  {
    "number": 28,
    "title": "Problem with single quote and curly braces in templates",
    "created_at": "2010-07-01T20:15:31Z",
    "closed_at": "2010-08-03T15:03:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/28",
    "body": "I tried doing this:\n_.templateSettings = {\n  start: '{',\n  end: '}',\n  interpolate: /{([^}]+?)}/g\n};\n\nand then create a template like this:\n_.template(\"I like to '{verb}'!\")\n\nI get unexpected string. I even tried this with your mustache templateSettings and same thing.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/28/comments",
    "author": "robrbecker",
    "comments": [
      {
        "user": "moll",
        "created_at": "2010-08-02T22:21:28Z",
        "body": "Probably an issue because your delimiters are the same as in the interpolate regexp. Try using different delimiters (start/end).\n"
      }
    ]
  },
  {
    "number": 26,
    "title": "Install underscore in npm?",
    "created_at": "2010-06-14T19:39:03Z",
    "closed_at": "2010-06-15T03:19:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/26",
    "body": "I was creating a new npm package that depends on underscore.js and was wondering if I should list underscore as a dependency, in which case it will need to be installed into npm, or if I should include it in my package?  I see there is a package.json in the root so it seems to me that it might be good to publish it to npm, I didn't see it in the npm list yet.  \n\nThanks,\n\nJohn\n\n(Wanted to label this with a question but can't seem to get the label control to work.)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/26/comments",
    "author": "mrjjwright",
    "comments": [
      {
        "user": "documentcloud",
        "created_at": "2010-06-14T20:19:06Z",
        "body": "Hi John.\n\nI've pushed the latest Underscore (1.0.3), up to the npm registry. After running `npm install underscore`, you should be able to use it like so:\n\n```\nvar _ = require('underscore')._\n```\n\nBe careful with the Node REPL, as it overrides _ to mean \"the return value of the last command\". You might want to use a different alias if you're REPL-ing around.\n\nLet me know if it doesn't work for you.\n"
      },
      {
        "user": "mrjjwright",
        "created_at": "2010-06-14T20:43:52Z",
        "body": "Thanks, perfect!\n"
      }
    ]
  },
  {
    "number": 15,
    "title": "conflict with jQuery#map",
    "created_at": "2010-02-17T19:38:44Z",
    "closed_at": "2010-02-17T19:45:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/15",
    "body": "If I have the following:\n\n_($(\".something\")).map(function() {});\n\nJquery defines the map function with the index and collection item arguments reversed.\nThis makes it confusing, because normally underscore has the collection item first.\n\nThe source of the issue is the check for the object containing the map function.\nif (obj && _.isFunction(obj.map)) return obj.map(iterator, context);\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/15/comments",
    "author": "jenmei",
    "comments": [
      {
        "user": "btakita",
        "created_at": "2010-02-17T19:39:19Z",
        "body": "Oops, I reported this on the wrong account.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-02-17T19:44:26Z",
        "body": "Right -- this is one of the whole reasons for preferring Underscore's `map` function to jQuery's -- Underscore uses the same method signature as ECMAScript 5, meaning that we can delegate to the native implementation when it exists. I've heard rumblings about jQuery moving towards the standard ordering, but it hasn't happened yet, and would be a **huge** backwards-incompatible change if they do.\n\nSo, if you want to use Underscore to map a jQuery object:\n\n```\n_($('.something').toArray()).map(  ...  );\n```\n\nSound reasonable?\n"
      },
      {
        "user": "btakita",
        "created_at": "2010-02-17T20:19:50Z",
        "body": "Yeah, that's what we are doing in some circumstances. We also added the following methods.\n\n```\n$.fn._ = function() {\n  return _(this.toArray());\n};\n\n_$ = function() {\n  return $.apply($, arguments)._();\n};\n```\n"
      },
      {
        "user": "btakita",
        "created_at": "2010-02-17T20:23:44Z",
        "body": "The unfortunate thing though is that I would expect underscores implementation of .map. It's kindof surprising to have it revert to jquery's implementation.\n\nThe same is true for any other object that implements .map. Maybe you can check to see if the target object is an Array?\n"
      },
      {
        "user": "btakita",
        "created_at": "2010-02-17T20:29:45Z",
        "body": "I don't mean to belabor this, but I want to expand on this a bit.\n\nWhen I use underscore, I expect an underscore object with a consistent api, no matter what. At least, that is the expectation when using such a wrapping api (e.g. jQuery).\n\nUsing the object's implementation introduces the case where the wrapped object can make unexpected api changes.\nI can see the native Javascript 1.6 functions are better because of speed improvements. The difference is that you can guarantee that the interface is the same as underscore's. With any other arbitrary object, you cannot.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-02-17T21:37:12Z",
        "body": "Don't worry -- you're not belaboring it at all. This is precisely the sort of discussion that's important to have on the record.\n\nUnderscore delegating to the underlying object's implementation of `map` is a design feature, and one that permeates the library. If you think of JavaScript's collection of enumeration functions (`forEach`, `map`, `reduce`, `filter` ...) as being the interface for an enumerable object, much in the same way that Ruby's Enumerable module is, then Underscore allows you to work seamlessly with objects that implement that interface.\n\nIn the case of a jQuery object, if we performed an `isArray` check as you suggest, our choices would either be to raise an exception when trying to iterate over jQuery with a for-loop, or to iterate over jQuery like a hash, returning all of the method names and function values, neither of which is what you want.\n\nSo, pass what you mean. Either pass a real Array or Object into the Underscore collection functions, or pass a custom object that implements the JavaScript enumerable interface.\n"
      }
    ]
  }
]