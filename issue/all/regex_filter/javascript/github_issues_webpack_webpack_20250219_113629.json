[
  {
    "number": 16507,
    "title": "Genereate a unique id for each compilation and use the id as key for map rather than reference",
    "created_at": "2022-11-23T15:10:21Z",
    "closed_at": "2022-11-28T03:25:04Z",
    "labels": [
      "enhancement",
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/16507",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nCurrent behavior: `NormalModule.getCompilationHooks` is using a map whose key is the reference of compilation.\r\nexpected behavior: give each compilation a unique id, and use the id as the key of the map to find hooks.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nFor myself, I am developing a successor of speed-measure-webpack-plugin to measure the time of each loader and plugin, to do this, I use Proxy(like speed-measure-webpack-plugin) to warp loader and tap method so that I could run extra logic before and after each loader and hook is really executed.\r\nHowever, to proxy tap method, I need to proxy everything between compiler and the tap, including the compilation.\r\nBut if webpack is using reference-equal for some map, because the proxied compilation and the real compilation is different, there is some strange error.\r\n\r\nThere might be some other ways to do the trick, but it will be pretty good if webpack is able to make this small change.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nWhen each compilation is created, generate a uuid as ID. Then use the ID as the key of the internal map inside `NormalModule.getCompilationHooks` to get hooks.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/16507/comments",
    "author": "ShuiRuTian",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2022-11-25T12:14:57Z",
        "body": "In theory you can do the same on the plugin side, I am not agains it, but just want to verify we can't solve it on the plugin side"
      },
      {
        "user": "ShuiRuTian",
        "created_at": "2022-11-26T08:59:48Z",
        "body": "Sure, let me dig into code and have some more investigation...."
      },
      {
        "user": "ShuiRuTian",
        "created_at": "2022-11-28T03:25:04Z",
        "body": "I found that we could hack `WeakMap` to try to use a custom ID. So we do not need to change webpack itself. This approach works fine for now.\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 16158,
    "title": "Should contentHash happen before the moduleIds process?",
    "created_at": "2022-08-17T07:36:40Z",
    "closed_at": "2022-12-14T03:11:54Z",
    "labels": [
      "question",
      "inactive",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/16158",
    "body": "## Feature request\r\n\r\nI notice our static dependency file's hash will be changed sometimes. After my investigation it's caused by different `moduleIds`.\r\nI take an experiment to prove it. \r\nFirst, I saved my project in two version while their `monaco-editor` versions are identity. When I used the `moduleIds: 'named'` and built my  project in prod env. They got the same content hash. \r\nBut when I changed the `modulesIds` to an Id type, e.g. 'deterministic', 'size'. They got different hash values. \r\nI did not have idea for why it happened since it was hard to read in prod env. But I think it was caused by importing different modules.\r\nHowever, the dependencies's content are identity. So I expect the content hash will be identity.\r\n\r\n\r\n**What is the expected behavior?**\r\nHash content should not be disturbed by `moduleIds`.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nTo avoid the content hash being disturbed by moduleIds\r\n\r\n**How should this be implemented in your opinion?**\r\nHash content before moduleIds optimization will avoid this issue.\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/16158/comments",
    "author": "adamma1024",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2022-08-17T12:25:40Z",
        "body": "How many chunks you have? Do you extract runtime? If you have dymanic chunks their names are changed so contenthash is different. Maybe you can provide small example?"
      },
      {
        "user": "adamma1024",
        "created_at": "2022-08-18T11:20:12Z",
        "body": "> How many chunks you have? Do you extract runtime? If you have dymanic chunks their names are changed so contenthash is different. Maybe you can provide small example?\r\n\r\nThanks for your reply. I found this issue on `monaco-editor` package. It's a third part package, I never change its codes. And I don't know if it used the dymanic chunks within. \r\nDo you mean the `moduleIds` differences are caused by dymanic chunks? Sure, it could have some additional dymanic chunks in our new codes. And it would cause the `moduleIds` difference indeed.\r\nBut I think it should not become a factor to change a file's contenthash which is never been changed, right?\r\nSo my question is \"Should the contenthash be influenced by moduleIds?\" That's the thing I feel weird. \r\nFrom my perspective, the calculating `contenthash` process should be earlier than calculating `moduleIds` to ensure the content hash is only influenced by content, not others.\r\n"
      },
      {
        "user": "adamma1024",
        "created_at": "2022-08-18T11:27:29Z",
        "body": "Btw, what's the rule for calculating the `moduleIds` ? Is there another way to let all of `moduleIds` fixed in the `monaco-editor`. I just know a way is to set `moduleIds: 'named'`. Unfortunately, t will increase the size of the bundle."
      },
      {
        "user": "vankop",
        "created_at": "2022-08-19T06:35:14Z",
        "body": "> I saved my project in two version while their monaco-editor versions are identity.\r\n\r\nwhat does it means? The important thing is when\r\n```js\r\nimport(\"monaco-editor\") /* add a non-initial chunk */\r\n```\r\nhappens with same configuration it should have same content hash (if editor was not changed)"
      },
      {
        "user": "vankop",
        "created_at": "2022-08-19T06:37:23Z",
        "body": "if you have something like 1st webpack config with one `moduleIds` ( result in 1st content hash ) and change webpack config to another `moduleIds` => this will change content hash since module ids alaso a part of content.."
      },
      {
        "user": "alexander-akait",
        "created_at": "2022-08-19T16:01:56Z",
        "body": "@adamma1024 Do you have the special plugin for `monaco-editor` (if I remember right there is bug there, it was reported multiple times). Also maybe you can create small reprocible test repo?"
      },
      {
        "user": "adamma1024",
        "created_at": "2022-08-23T09:26:44Z",
        "body": "> > I saved my project in two version while their monaco-editor versions are identity.\r\n> \r\n> what does it means? The important thing is when\r\n> \r\n> ```js\r\n> import(\"monaco-editor\") /* add a non-initial chunk */\r\n> ```\r\n> \r\n> happens with same configuration it should have same content hash (if editor was not changed)\r\n\r\nYes, indeed, but it will be changed in the following scenario:\r\nMonday, we released our project named `version1`, the release contained a `monaco.1.js`\r\nTuesday, some guys add new `dynamic`  modules to the project and released the `version2`. Will it still be calculated to `monaco.1.js`? I think it should be. But the fact is as @alexander-akait  said, it probably was `monaco.2.js` since the `module number changed`.\r\nWhat is its effect of it? It will let our user's browser cache doesn't work. They need to download `monaco.2.js` when we publish our `version2`. The worse thing is it won't just influence one module. I am not sure how many packages will be influenced.\r\nAny time we add new `dynamic` modules it probably happens. That's why I want to report it. It's not friendly and it's weird. Because I never change the `monaco` version. But its content hash probably is changed.\r\n"
      },
      {
        "user": "adamma1024",
        "created_at": "2022-08-23T09:35:09Z",
        "body": "> @adamma1024 Do you have the special plugin for `monaco-editor` (if I remember right there is bug there, it was reported multiple times). Also maybe you can create small reprocible test repo?\r\n\r\nI just used `new MonacoWebpackPlugin({ globalAPI: true })`.\r\nI am not sure that I can provide a reproducible test repo. As we all know, the dependency's module id won't be changed at any time. And I have not found a way to repro it.\r\nBut I can promise that I will provide it to you as long as I create a reproducible repo."
      },
      {
        "user": "adamma1024",
        "created_at": "2022-08-23T09:42:04Z",
        "body": "> if you have something like 1st webpack config with one `moduleIds` ( result in 1st content hash ) and change webpack config to another `moduleIds` => this will change content hash since module ids alaso a part of content..\r\n\r\nThe webpack's config was never changed. But the module id in Monaco has been changed. Just like:\r\n```\r\n//monaco.js\r\nimport A from 'A'\r\n```\r\nAfter compiled:\r\n```\r\nimport A from [1] // 1 is module id\r\n```\r\nIf we import a new dynamic module it probably be that:\r\n```\r\nimport A from [2] // Since the 1 is taken by the dynamic module.\r\n```\r\nSo the content hash will be changed when it happens.\r\n"
      },
      {
        "user": "alexander-akait",
        "created_at": "2022-08-29T13:59:41Z",
        "body": "Sounds like a bug in `MonacoWebpackPlugin` (i faced with it some time ago), is it possible to check this bug without this plugin (because we don't have reproducible test repo we should check all possible places)"
      },
      {
        "user": "webpack-bot",
        "created_at": "2022-11-29T00:41:56Z",
        "body": "<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2022-12-14T03:11:55Z",
        "body": "<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 15466,
    "title": "Support exclude rules config for cache.buildDependencies",
    "created_at": "2022-03-03T12:32:25Z",
    "closed_at": "2022-03-03T12:36:36Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/15466",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nExclude some files/directories from the buildDependencies collected by `FileSystemInfo.resolveBuildDependencies()`\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nSometimes some loader reads config from `projectRoot/package.json` by `require()` (for example `postcss-load-config -> lilconfig`) in this case `projectRoot/package.json` will be collected as a buildDependency by `FileSystemInfo.resolveBuildDependencies()`, and any change of `projectRoot/package.json` (such as project dependency update) will cause the invalidation of the full filesystem cache.\r\n\r\nActually I have not written any postcss config in my package.json file, so I want a exclude rules config to remove `projectRoot/package.json` from the buildDependencies. \r\n\r\n**How should this be implemented in your opinion?**\r\nSupport exclude rules config for cache.buildDependencies\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/15466/comments",
    "author": "hiyuki",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2022-03-03T12:34:46Z",
        "body": "I don't think it is right direction to solve a problem, we should invalid cache when you change `package.json`, so it is expected"
      },
      {
        "user": "vankop",
        "created_at": "2022-03-03T12:36:36Z",
        "body": "@hiyuki this behaviour is expected, since this `package.json` is a build dependency "
      },
      {
        "user": "hiyuki",
        "created_at": "2022-03-03T13:28:18Z",
        "body": "But in this case I know I have no postcss config in the `package.json`, but in the `postcss.config.js`, because of `lilconfig` trying to `require` both of them, the `package.json` has been regarded as a build dependency, actually the change of `package.json` has no side effect to the webpack compilation. "
      },
      {
        "user": "vankop",
        "created_at": "2022-03-03T13:31:29Z",
        "body": "for webpack it is impossible to determine this, so it adds all to build dependencies."
      },
      {
        "user": "hiyuki",
        "created_at": "2022-03-03T13:32:47Z",
        "body": "> for webpack it is impossible to determine this, so it adds all to build dependencies.\r\n\r\nYes I know so I want a config to customize the build dependencies."
      },
      {
        "user": "alexander-akait",
        "created_at": "2022-03-03T13:33:02Z",
        "body": "You can't do it"
      },
      {
        "user": "hiyuki",
        "created_at": "2022-03-03T13:37:25Z",
        "body": "Ok, actually I can pass a load config to `lilconfig` to read `package.json` by `fs.readFile` instead of `require` to avoid this problem. \r\nThanks for your replies. @vankop @alexander-akait "
      },
      {
        "user": "starmooms",
        "created_at": "2022-03-18T08:48:00Z",
        "body": "In my case, we have to change the version number of `package.json` when we release the project. This leads to cache invalidation. In fact, the dependent module has not changed.\r\n\r\nI agree that the cache should be cleared when dependency changes. It would be better to provide some options for more precise control.\r\n\r\nFor example, some options are provided to control the generation of cache 'hash' of some files?"
      },
      {
        "user": "vankop",
        "created_at": "2022-03-18T09:02:08Z",
        "body": "@starmooms not all cache invalidates in your case"
      },
      {
        "user": "starmooms",
        "created_at": "2022-03-18T09:12:10Z",
        "body": "But, it will take more than `30s` to re resolve build dependencies..."
      },
      {
        "user": "IMalyugin",
        "created_at": "2024-01-25T09:17:26Z",
        "body": "Upvoting the request a lot. Have a similar build, we got a shared monorepository with all the common packages in an enterprise build. Build takes about 10 minutes, if cached it can run 30 seconds.\r\n\r\nUnfortunately our common packages are all published on each change, even if there aren't changes in one of the packages.\r\nWebpack build is based on `@scope/conf` package, which contains core config shared throughout all of the projects, once `@scope/conf/package.json` version is raised (which is every build), buildDependencies are mismatched and the entire cache invalidated. (Even though the @scope/conf contents aren't actually changed)\r\n\r\nSpent a good couple of days trying to hack into `PackFileCacheStrategy` and `FileSystemInfo`, to allow exclusion of package.json in build dependencies with no luck, good job on isolating it :)\r\n\r\nInstead I had to copy/paste the cache section of `WebpackOptionsApply` into a custom plugin to monkeyPatch `PackFileCacheStrategy.createSnapshot` into filtering out `package.json` files. That fixed the issue, but the price is a bit too expensive.\r\n\r\nIt would be nice to have:\r\n- a simple `tapable` before `createSnapshot` method call to insert custom plugin logic (maybe a `tapable` inside `Cache` to return an instance of `the Strategy`?);\r\n- a way to output the list of mismatched buildDependencies paths, so that it's possible to rewrite configuration files avoiding mismatch (possibly another `tapable`, or a publicly available field inside `PackFileCacheStrategy`)."
      },
      {
        "user": "alexander-akait",
        "created_at": "2024-01-26T13:21:35Z",
        "body": "@IMalyugin I am fine to look at PRs"
      }
    ]
  },
  {
    "number": 14298,
    "title": "Allow to use [contenthash] (of minified JS file) for building the name of an external source map file",
    "created_at": "2021-09-21T11:04:15Z",
    "closed_at": "2021-09-21T11:46:32Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/14298",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nWhen storing a source maps in a separate file, it should be possible to use the same filename (despite the file extension) for the source map as is used for the minified JS source file. This does currently not work when the minified source file uses the [contenthash] in its name.\r\n\r\nExample:\r\n```\r\noutput: {\r\n  chunkFilename: \"[name].[contenthash:8].js\",\r\n  filename: \"[name].[contenthash:8].js\"\r\n},\r\n```\r\nproduces filenames like `something.5482zd820.js`.\r\n\r\nWhen using `[contenthash:8]` for the filename of the source map, too, a content hash is included in the generated source map file as well, but of course that is the hash for the source map's own content and different from the hash of the minified JS file.\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to have something similar to [contenthash] that allows to refer to the minified JS file's content hash rather than the source map file's own hash when building its name, so I can get the following:\r\n\r\n```\r\nsomething.5482zd820.js\r\nsomething.5482zd820.js.map\r\n```\r\n(both files using the same hash value here)\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nIn my use case I don't know the \"public path\" upfront. It is determined at runtime. So I don't can't insert a static hint/comment into the minified JS file which directs to browser to the absolute location of the corresponding source map file. Instead, I use the Sourcemap response header when delivering the minified JS files computing the location for the corresponding source map file. This computation (deriving the URL of the source map file form the URL of the minified JS file) is much easier when the source map file has the same filename (despite the extension of coursed) than the minified JS file.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/14298/comments",
    "author": "henning-meinhardt",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-09-21T11:08:29Z",
        "body": "It is wrong usage, name should be same, i.e. for `script.12345678.js` should be `script.12345678.map.js` file"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-09-21T11:09:02Z",
        "body": "If you need something non standard, we have plugin API and you can do it using API"
      },
      {
        "user": "henning-meinhardt",
        "created_at": "2021-09-21T11:21:44Z",
        "body": "@alexander-akait thanks. Right, the name should be the same, this is actually what I wanted to archive. Regarding the API, can you give me a hint where to get started (not an experienced webpack contributor)"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-09-21T11:24:47Z",
        "body": "We already generate the same name, what is the problem?"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-09-21T11:25:05Z",
        "body": "Just use:\r\n```\r\noutput: {\r\n  chunkFilename: \"[name].[contenthash:8].js\",\r\n  filename: \"[name].[contenthash:8].js\"\r\n},\r\n```"
      },
      {
        "user": "henning-meinhardt",
        "created_at": "2021-09-21T11:36:09Z",
        "body": "@alexander-akait I can't see the difference from the output section you posted from the the one i'm using. Using that, I get:\r\n```\r\nfile.12345678.js\r\nfile.js.map\r\n```\r\nwhen having the following applied for source map generation:\r\n```\r\nplugins: [\r\n\tnew webpack.SourceMapDevToolPlugin ({\r\n\t\t// filename: \"[name].[contenthash:8].js.map\",\r\n\t\tappend: false\r\n\t})\r\n]\r\n```\r\nWhen enabling the commented out line, I get the following instead:\r\n```\r\nfile.12345678.js\r\nfile.57402411.js.map\r\n```\r\nbecause [contenthash] computes to the hash of the source map file.\r\n"
      },
      {
        "user": "henning-meinhardt",
        "created_at": "2021-09-21T11:46:31Z",
        "body": "@alexander-akait I think I just found the solution in @fregante's comment on issue 7103. Using the following works:\r\n```\r\n  new webpack.SourceMapDevToolPlugin({\r\n    filename: '[file].map[query]', // Default value\r\n    publicPath: 'etc……',\r\n})\r\n```\r\nSo I'm wondering if `[file].map[query]`is really the default value here. Leaving it out completely should have produced the same results, right? Anyway, that way it works as expected.\r\n\r\nKind regards\r\nHenning"
      }
    ]
  },
  {
    "number": 13899,
    "title": "Allow to replace asset/resource with `new URL(import.meta.url, '...')` when `output.libraryTarget` is 'module'",
    "created_at": "2021-07-31T13:44:23Z",
    "closed_at": "2021-08-02T13:40:53Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13899",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nCurrently asset/resource works like this:\r\n\r\n```js\r\nimport mainImage from './images/main.png';\r\n\r\nimg.src = mainImage; // '/dist/151cfcfa1bd74779aadb.png'\r\n```\r\n\r\nHowever, this does not work when using webpack to build a library. But luckily, if the `output.libraryTarget` is 'module', we can use `import.meta.url` like this:\r\n\r\n```js\r\nimport mainImage from './images/main.png';\r\n\r\nimg.src = mainImage; // new URL(import.meta.url, './151cfcfa1bd74779aadb.png')\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThis make assets work for libraries. The output of the library may not compatible with all bundlers, but at lease it works with the browser's native es module.\r\n\r\nAlse see: #2933\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13899/comments",
    "author": "hronro",
    "comments": [
      {
        "user": "webpack-bot",
        "created_at": "2021-07-31T13:44:25Z",
        "body": "<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] webpack-4\n* [x] webpack-5\n* [ ] bug\n* [ ] critical-bug\n* [ ] enhancement\n* [ ] documentation\n* [ ] performance\n* [ ] dependencies\n* [x] question"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-08-02T13:40:48Z",
        "body": "Sorry, out of scope webpack, please use custom plugin for this, `import mainImage from './images/main.png';` should not be used in libraries, please migrate code on `new URL(...)` or create custom loader for this"
      }
    ]
  },
  {
    "number": 13850,
    "title": "webpack 4/5 incompatible when dynamic load commonjs module exports promise",
    "created_at": "2021-07-23T09:56:33Z",
    "closed_at": "2021-10-23T13:44:47Z",
    "labels": [
      "question",
      "inactive",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13850",
    "body": "# Bug report\r\ntwo code files:\r\n\r\nx.js (maybe a npm commonjs module):\r\n\r\n```js\r\nmodule.exports = new Promise((resolve)=>resolve(1));\r\n```\r\n\r\nmain.js\r\n\r\n```js\r\nimport('./x').then(m=>console.log(m))\r\n```\r\n\r\n**What is the current behavior?**\r\n\r\nwebpack4:  console `{default:<Promise>}`\r\n\r\nwebpack5: console `1`\r\n\r\n**What is the expected behavior?**\r\n\r\nwebpack4 ?\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13850/comments",
    "author": "yiminghe",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-07-23T11:55:30Z",
        "body": "~~Expected, it is breaking change between v4 and v5~~ I am wrong, it is bug, sorry"
      },
      {
        "user": "sokra",
        "created_at": "2021-07-23T14:21:52Z",
        "body": "That's working as expected.\r\n\r\nA ESM with a `then` export will lead to executing that function on `import()`.\r\nSimilar to that a CommonJS module will have a `then` export (from the Promise object) and will lead to execution of that `then` method, which will lead to the promise result."
      },
      {
        "user": "webpack-bot",
        "created_at": "2021-10-23T03:21:58Z",
        "body": "<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-10-23T13:44:47Z",
        "body": "Closed, limitation... Feel free to feedback"
      }
    ]
  },
  {
    "number": 13800,
    "title": "Module Federation runtime-dynamic share scope",
    "created_at": "2021-07-15T15:07:25Z",
    "closed_at": "2021-07-21T15:40:49Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13800",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nWe're trying to have a very strict setup, where all versions of MFEs get the exact versions of packages they were tested with locally. We're having a few hiccups with peer dependencies - mainly react UI libraries where react is marked as a peer dependency. Two MFEs could have the same version of a react UI library, but different versions of react.\r\n\r\nFor now, we've got a share scope with a convention to use the name and version of singleton package (i.e. `shareScope: \"react@17.0.1\"` - as below). However, this won't scale well past more than one singleton package.\r\n\r\nI've noticed the code outputs this for container initialization:-\r\n\r\n```js\r\nvar init = (shareScope, initScope) => {\r\n\tif (!__webpack_require__.S) return;\r\n\tvar oldScope = __webpack_require__.S[\"react@17.0.1\"];\r\n\tvar name = \"react@17.0.1\"\r\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\r\n\t__webpack_require__.S[name] = shareScope;\r\n\treturn __webpack_require__.I(name, initScope);\r\n};\r\n```\r\n\r\nIf we changed this to:-\r\n\r\n```diff\r\n- var init = (shareScope, initScope) => {\r\n+ var init = (shareScope, initScope, name) => {\r\n+\tif (!name) name = \"react@17.0.1\"\r\n\tif (!__webpack_require__.S) return;\r\n-\tvar oldScope = __webpack_require__.S[\"react@17.0.1\"];\r\n+\tvar oldScope = __webpack_require__.S[name];\r\n-\tvar name = \"react@17.0.1\"\r\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\r\n\t__webpack_require__.S[name] = shareScope;\r\n\treturn __webpack_require__.I(name, initScope);\r\n};\r\n```\r\n\r\nThen I think we have most of what we need to support this - with this pseudo-code,\r\n\r\n```js\r\nconst webpackScopes = [];\r\n\r\nconst loadMFE = async (name, singletonPackages) => {\r\n  let scope = webpackScopes.find((scope) => {\r\n    return singletonPackagesAreCompatible(\r\n      singletonPackages,\r\n      scope.singletonPackages\r\n    );\r\n  });\r\n\r\n  if (!scope) {\r\n    scope = { name, singletonPackages };\r\n    await __webpack_init_sharing__(scope.name);\r\n    webpackScopes.push(scope);\r\n  } else {\r\n    updateScopeWithNewSingletonPackages(scope, singletonPackages);\r\n  }\r\n\r\n  const container = await loadMFERemoteEntry(name);\r\n\r\n  // @ts-expect-error Webpack internals\r\n  await container.init(__webpack_share_scopes__[scope.name], undefined, scope.name);\r\n\r\n  const initModule = await container.get(\".\");\r\n\r\n  return initModule();\r\n};\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nnil\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nDynamic scope generation\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nDetailed in description\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nyes\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13800/comments",
    "author": "jacobp100",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-07-15T15:43:04Z",
        "body": "Because it is expected, and should not be used in this way?"
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-15T15:47:24Z",
        "body": "@alexander-akait What's wrong with the approach set out? I don't think we'll be the only ones that want to dynamically create share scopes at runtime"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-07-15T16:11:30Z",
        "body": "two reacts with different versions?"
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-15T16:38:45Z",
        "body": "Yeah, it is possible for our use case. Each MFE gets one HTML element - and can use whatever framework it wants to on that element. So each MFE using React basically does `ReactDOM.render(<MFE />, element)`.\r\n\r\nThe MFEs server render too, so we need to make sure that if they're using react, they'll hydrate the MFE with the same version of react on the server.\r\n\r\nDid the description in the initial post make sense for the issue we're having regarding peer dependencies?"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-07-15T16:44:57Z",
        "body": "We stringy recommend don't do it, there are a lot of side effect which will break your app"
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-20T16:39:45Z",
        "body": "I did find another reason this might be necessary - you could have the following setup,\r\n\r\n```js\r\nnew ModuleFederationPlugin({\r\n  shared: {\r\n    'normal-package': { scopeName: 'default' },\r\n    'package-a': { scopeName: 'a' },\r\n    'package-b': { scopeName: 'b' }\r\n  },\r\n  shareScope: 'default'\r\n})\r\n```\r\n\r\nThis can be necessary for peer dependencies.\r\n\r\nHowever, there's no way to initialise sharing for both `package-a` and `package-b` - so you could end up with extra network requests. If either of those packages rely on being singletons - like event busses - you'll also get correctness issues.\r\n\r\nWith this suggestion, you'd be able to do,\r\n\r\n```js\r\nawait Promise.all([\r\n  __webpack_init_sharing__('default'),\r\n  __webpack_init_sharing__('a'),\r\n  __webpack_init_sharing__('b')\r\n])\r\n\r\nconst container = window['example-package'];\r\n\r\nconst initScope = [];\r\nawait Promise.all([\r\n  container.init(__webpack_share_scopes__['default'], initScope, 'default'),\r\n  container.init(__webpack_share_scopes__['a'], initScope, 'a'),\r\n  container.init(__webpack_share_scopes__['b'], initScope, 'b')\r\n])\r\n```\r\n\r\nThis seems to be the only way to have these scoped packages avoid extra network requests."
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-20T16:47:39Z",
        "body": "Possibly one way we could make this API nicer is doing the following,\r\n\r\n```js\r\n// ...\r\nvar init = (shareScope, initScope) => {\r\n\treturn initSharing(\"react@17.0.1\", shareScope, initScope);\r\n};\r\n\r\nvar initSharing = (name, shareScope, initScope) => {\r\n\tif (!__webpack_require__.S) return;\r\n\tvar oldScope = __webpack_require__.S[name];\r\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\r\n\t__webpack_require__.S[name] = shareScope;\r\n\treturn __webpack_require__.I(name, initScope);\r\n}\r\n\r\n// This exports getters to disallow modifications\r\n__webpack_require__.d(exports, {\r\n\tget: () => (get),\r\n\tinit: () => (init),\r\n\tinitSharing: () => (initSharing)\r\n});\r\n```"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-07-20T16:50:50Z",
        "body": "still can break, better solve it on own side"
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-20T17:22:16Z",
        "body": "Out of interest, what do you expect could break? (Assuming the user is using the API correctly)"
      },
      {
        "user": "jacobp100",
        "created_at": "2021-07-21T15:40:48Z",
        "body": "Closing in favour of #13834 (listed as bug report rather than feature request)"
      }
    ]
  },
  {
    "number": 13623,
    "title": "splitChunks: new `issuer` option for `cacheGroups`",
    "created_at": "2021-06-23T11:55:09Z",
    "closed_at": "2021-06-23T12:18:00Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13623",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\nI need separate some polyfills and vendor chunk by new option -- `splitChunks.cacheGroups.{cacheGroup}.issuer`.\r\n\r\n## Feature request\r\n\r\nAnd i try write code, using undocumented field `module.resourceResolveData`. This work well only first build. \r\nBut second build (with cache enabled) `module.resourceResolveData` already empty.\r\n\r\nThis code is not a bug report, but just an example:\r\n```js\r\n\r\nconst corejsDir = path.dirname(require.resolve('core-js'));\r\nconst polyfillsDir = path.join(__dirname, 'source/js/polyfills/');\r\nconst polyfillsEntry = path.join(__dirname, 'source/js/polyfills.js');\r\n\r\n...\r\nsplitChunks: {\r\n    cacheGroups: {\r\n        polyfills: {\r\n            chunks: 'initial',\r\n            enforce: true,\r\n            test: ({ resource, resourceResolveData }) => {\r\n                if ((\r\n                    resourceResolveData\r\n                    && resourceResolveData.context\r\n                    && resourceResolveData.context.issuer\r\n                    && resourceResolveData.context.issuer.indexOf(polyfillsDir) === 0\r\n                ) || (\r\n                    resource\r\n                    && (\r\n                        resource.indexOf(corejsDir) === 0\r\n                        || resource.indexOf(polyfillsEntry) === 0\r\n                        || resource.indexOf(polyfillsDir) === 0\r\n                    )\r\n                )) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            name: 'vendor.polyfills',\r\n            priority: 10,\r\n        },\r\n    },\r\n},\r\n...\r\n```\r\n**What is the expected behavior?**\r\n...\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nI need separate some polyfills and vendor chunk for modern browser build\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n```js\r\n...\r\nsplitChunks: {\r\n    cacheGroups: {\r\n        polyfills: {\r\n            chunks: 'initial',\r\n            enforce: true,\r\n            issuer: /[\\\\/]source[\\\\/]js[\\\\/]polyfills/, // <-- here\r\n            test: /[\\\\/]node_modules[\\\\/]/, \r\n            name: 'vendor.polyfills',\r\n            priority: 10,\r\n        },\r\n    },\r\n},\r\n...\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13623/comments",
    "author": "dkrnl",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-06-23T11:57:54Z",
        "body": "You can have multiple `issuers`, also some modules just don't have issuers, relying only on it is not always a good idea. \r\n\r\nBut if you really need this your solution is good, I don't think we really need this in core "
      },
      {
        "user": "dkrnl",
        "created_at": "2021-06-23T12:16:51Z",
        "body": "Ok, thank you!\r\n\r\nCan i write bug-report for empty `module.resourceResolveData` (undocumented field) in cached build?"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-06-23T12:17:32Z",
        "body": "`resourceResolveData` can be empty too, it is expected"
      }
    ]
  },
  {
    "number": 13435,
    "title": "Bundling for Node and Browser using performance and perf_hooks",
    "created_at": "2021-05-24T19:31:24Z",
    "closed_at": "2021-06-17T13:02:39Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13435",
    "body": "I posted a question on stack overflow for this but didn't get any engagement. I've done a lot of research on this but have been unable to find how to do this with Webpack and not sure if its even possible. If this is not possible currently, then I'd like this to be a feature request.\r\n\r\nI'm making a module that I would like to be available in the browser and Node. It relies on performance, which is giving me trouble with Webpack and the perf_hooks module in Node. No matter what I do I can only get it where it works in one or the other, but not both. I'm using webpack 5.37.\r\n\r\nBelow are most of the things I've tried. My question is, how do I configure Webpack to require perf_hooks in node, but use the built in performance global when in the browser?\r\n\r\nHere is my base Webpack config:\r\n\r\n```\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/UpdateLoop.js',\r\n  mode: 'development',\r\n  output: {\r\n    library: 'UpdateLoop',\r\n    libraryTarget: 'umd',\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'updateloop.js',\r\n    globalObject: 'this',\r\n  },\r\n};\r\n```\r\n\r\nCode thats giving me trouble:\r\n\r\n```\r\nconst { performance } = require('perf_hooks');\r\n```\r\n\r\nThis errors in webpack with:\r\n\r\n    Field 'browser' doesn't contain a valid alias configuration\r\n        resolve as module\r\n          C:\\Users\\joe.jankowiak\\projects\\update-loop\\src\\node_modules doesn't exist or is not a directory\r\n\r\nI've seen similar suggestions for 'fs' to do the following but I think this is going in the other direction (where fs is available in node but not the browser)\r\n\r\n```\r\n// configuration.node has an unknown property 'perf_hooks'\r\n  node: {\r\n    perf_hooks: false,\r\n  },\r\n\r\n// configuration has an unknown property 'browser'.\r\n  browser: {\r\n    perf_hooks: false,\r\n  },\r\n```\r\n\r\nI then saw people recommending using 'resolve':\r\n\r\n```\r\n// Compiles, but complains performance doesn't exist in node or browser. This sets perf_hooks to false in node?\r\nresolve: {\r\n  fallback: {\r\n    perf_hooks: false,\r\n  }\r\n},\r\n```\r\n\r\n```\r\n// Works in browser but doesn't work in node. Node complains about using performance before its defined:\r\nperformance = performance || require('perf_hooks').performance;\r\n```\r\n\r\n```\r\n// Doesn't work in either\r\nconst performance = performance || require('perf_hooks').performance;\r\n```\r\n\r\n```\r\n// Trying to check if its node, but with resolve its making perf_hooks null in node\r\nif(typeof __webpack_require__ === 'function') {\r\n  global.performance = require('perf_hooks').performance;\r\n}\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13435/comments",
    "author": "joezappie",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-05-25T09:19:27Z",
        "body": "> I'm making a module that I would like to be available in the browser and Node.\r\n\r\nYou can't use `perf_hooks` in browser. You need to use multi compiler mode and build two versions for `Node.js` and `browser`. \r\n\r\nPlease use `Discussion` in future if you want to ask question(s) or do not use the issue template\r\n"
      }
    ]
  },
  {
    "number": 13420,
    "title": "use group matched in resourceQuery",
    "created_at": "2021-05-20T14:18:54Z",
    "closed_at": "2021-06-01T11:23:20Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13420",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nIn rule definition when using resourceQuery it's a good idea to have ability to use matched group and queryParams\r\n\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n```\r\n  resourceQuery: /(color-.*)/\r\n  generator: {\r\n    dataUrl: (content, meta) => {\r\n         // somehow access matched query and use given color in creating dataUrl\r\n    } \r\n  }\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nwhen using mini-svg-data-uri to creating dataURI for svgs you can use queryParam to give color and set it in dataURI and having mulltiple colors of a same svg icon  \r\n\r\n```\r\n                    generator: {\r\n                        dataUrl: (content, meta) => {\r\n                            content = content.toString().replace(/currentColor/g, meta.matchedQuery /* example red or #fc2*/);\r\n                            return svgToMiniDataURI(content);\r\n                        },\r\n                    },\r\n\r\n```\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nno",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13420/comments",
    "author": "mh-alahdadian",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-05-20T14:22:43Z",
        "body": "You can setup this on rules level using `matchedQuery`"
      },
      {
        "user": "sokra",
        "created_at": "2021-05-20T15:06:45Z",
        "body": "Best use a custom loader for that. Inside of the loader you can access `this.resourceQuery`"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-06-01T11:23:20Z",
        "body": "Answered, feel free to feedback"
      }
    ]
  },
  {
    "number": 13370,
    "title": "TypeError: this.generator.getConcatenationBailoutReason is not a function",
    "created_at": "2021-05-12T14:31:34Z",
    "closed_at": "2021-05-12T15:39:27Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13370",
    "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I run my build I get the following exception:\r\n\r\n```\r\nTypeError: this.generator.getConcatenationBailoutReason is not a function\r\n    at NormalModule.getConcatenationBailoutReason (webpack/lib/NormalModule.js:1018:25)\r\n    at webpack/lib/optimize/ModuleConcatenationPlugin.js:132:36\r\n    at Hook.eval [as callAsync] (eval at create (tapable/lib/HookCodeFactory.js:33:10), <anonymous>:7:1)\r\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (tapable/lib/Hook.js:18:14)\r\n    at webpack/lib/Compilation.js:2408:36\r\n    at Hook.eval [as callAsync] (eval at create (tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (tapable/lib/Hook.js:18:14)\r\n    at Compilation.seal (webpack/lib/Compilation.js:2399:27)\r\n    at webpack/lib/Compiler.js:1094:20\r\n    at webpack/lib/Compilation.js:2216:4\r\n\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI'm in the process of (trying to) migrate from v4 to v5; I have a custom config, similar to the one from create-react-app (in fact the project was created with it, but later ejected); I don't think it would be very useful to share my config _right now_ because I still probably have things to change; however, this is like a blocker, because it's a Webpack internal TypeError. \r\n\r\n**What is the expected behavior?**\r\n\r\nI guess that it should print  the result of \"getConcatenationBailoutReason\" to the console... \r\n\r\n**Other relevant information:**\r\nwebpack version:  5.37.0\r\nNode.js version:  16.1.0\r\nOperating System: iOS 11.3.1\r\n\r\nThanks for your patience. \r\nCheers!",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13370/comments",
    "author": "nuragic",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-05-12T14:44:50Z",
        "body": "> If the current behavior is a bug, please provide the steps to reproduce.\r\n\r\n> I'm in the process of (trying to) migrate from v4 to v5; I have a custom config, similar to the one from create-react-app (in fact the project was created with it, but later ejected); I don't think it would be very useful to share my config right now because I still probably have things to change; however, this is like a blocker, because it's a Webpack internal TypeError.\r\n\r\nPlease provide configuration, nobody can't help"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-05-12T14:45:22Z",
        "body": "You have incompatibility plugin with invalid API"
      },
      {
        "user": "nuragic",
        "created_at": "2021-05-12T15:39:26Z",
        "body": "Ok many thanks for the hint. I'll try to fix all the deprecation warnings about the plugins first. However, I think you should consider to convert those warnings to just errors, because if v5 breaks plugins then it's pointless to follow with any migration... there're lot of plugins which are not compatible with v5 and for many of them there's no response from authors about supporting the new API. Just a suggestion... thanks again!"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-05-12T15:43:20Z",
        "body": "We are trying to avoid many breaking change between 4 and 5 in API, but in some cases it is impossible"
      },
      {
        "user": "nuragic",
        "created_at": "2021-05-12T16:15:01Z",
        "body": "@alexander-akait FYI I just managed to remove all the DeprecationWarning, but the error still persist... the stack trace is different tho; the error is originated from `html-webpack-plugin/lib/cached-child-compiler.js:237:53`. I'll try to investigate more on that… it's weird because I'm using the latest version of this plugin (5.3.1). In the meantime I try to invoke @jantimon hoping to get some more hint. 😄 "
      },
      {
        "user": "nuragic",
        "created_at": "2021-05-12T16:35:34Z",
        "body": "Another update: if I remove html-webpack-plugin from my build config the error is still there, the stack trace is the one I posted above... so this is not something related to this plugin (or any plugin)... I guess it's something that Webpack doesn't like about my config? ¯\\_(ツ)_/¯ If I can set up a repo to enable reproduce it I'll reopen. Thanks!"
      },
      {
        "user": "HughG-50",
        "created_at": "2021-09-23T13:23:06Z",
        "body": "@nuragic were you able to solve this issue? I currently experiencing the same problem."
      },
      {
        "user": "nuragic",
        "created_at": "2021-09-23T13:41:56Z",
        "body": "Hey! Nope sorry, I gave up on doing the migration for now... if you finally sort it out please let it know! Thanks!"
      },
      {
        "user": "nuragic",
        "created_at": "2021-09-23T13:43:48Z",
        "body": "If you use create react app, I think they were already done doing the switch, check their repo."
      }
    ]
  },
  {
    "number": 13312,
    "title": "Module Federation Plugin: force single runtime chunk to concatenate with container",
    "created_at": "2021-05-05T22:09:18Z",
    "closed_at": "2021-05-07T18:04:41Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13312",
    "body": "When using next.js 10.2, im unable to successfully re-join the container code with the single runtime chunk. \r\n\r\nI was previously able to re-merge them with a simple plugin\r\n\r\n```\r\n    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation) => {\r\n      const { assets } = compilation;\r\n      const assetArray = Object.keys(assets);\r\n\r\n      let runtimePath = assetArray.find((asset) => {\r\n        return asset.includes(this._options.runtime);\r\n      });\r\n      const runtime = assets[runtimePath];\r\n      let remoteEntryPath = assetArray.find((asset) => {\r\n        return asset.includes(this._options.fileName);\r\n      });\r\n      const remoteEntry = assets[remoteEntryPath];\r\n      const mergedSource = new ConcatSource(runtime, remoteEntry);\r\n      assets[remoteEntryPath] = mergedSource;\r\n    });\r\n```\r\n\r\nHowever, this no longer works and I get a \"container does not exist\" error, even when typing directly into the browser console `window.remoteName` will return undefined. \r\n\r\nMy idea is to try and get the runtime requirements added to the normal webpack runtime, then duplicate the asset and strip the hashed name off of it. This should give me a \"normal\" functioning container capable of booting and running without having to track down and load both the webpack runtime and the container.js file of the remote\r\n\r\n@sokra, do you have any ideas around how I can force the usually code split runtime requirement back into the standard webpack runtime?\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13312/comments",
    "author": "ScriptedAlchemy",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2021-05-07T11:28:41Z",
        "body": "It might be easier to opt-out from creating a runtime chunk for this entry at all.\r\n\r\n``` js\r\n\t\tcompiler.hooks.thisCompilation.tap(\"...\", compilation => {\r\n\t\t\tcompilation.hooks.addEntry.tap(\r\n\t\t\t\t\"...\",\r\n\t\t\t\t(_, { name: entryName }) => {\r\n\t\t\t\t\tif (entryName !== \"name-of-mf-entry\") return;\r\n\t\t\t\t\tconst data = compilation.entries.get(entryName);\r\n\t\t\t\t\tdata.options.runtime = undefined;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n```"
      },
      {
        "user": "sokra",
        "created_at": "2021-05-07T11:30:03Z",
        "body": "But you can use MF with runtime chunk too. Just make sure to load both, the runtime chunk and the remote entry, into the target page."
      },
      {
        "user": "ScriptedAlchemy",
        "created_at": "2021-05-07T18:04:31Z",
        "body": "Thanks Tobias, ill give this a try - I was able to get the ConcatSource to work again - it looks like when I try to make react an external in next, remote seems to stop attaching to scope so its always retuning undefined. \r\n\r\nI changed to resolve.alias for react \r\n`Object.assign(config.resolve.alias,{ react: require.resolve(\"./react.js\")})`\r\n\r\nand here's my react file\r\n```\r\nif (global.React) {\r\n  module.exports = global.React;\r\n} else if (process.browser && window.React) {\r\n  module.exports = window.React;\r\n} else if (process.browser) {\r\n  window.React = require(\"react\");\r\n  module.exports = window.React;\r\n} else {\r\n  global.React = require(\"react\");\r\n  module.exports = global.React;\r\n}\r\n```\r\n\r\nThis gets singleton sharing of react to work in the nextjs world (next is missing the async bootstrap)"
      }
    ]
  },
  {
    "number": 13067,
    "title": "Using \"source-map\" as a option for devtool is breaking ",
    "created_at": "2021-04-06T17:19:00Z",
    "closed_at": "2021-04-07T09:35:38Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13067",
    "body": "# Bug report\r\n\r\nAfter migrating to web pack's latest version and using devtool: \"source-map\" is breaking, getting type error\r\n\r\n**What is the current behavior?**\r\n\r\nUnhandledPromiseRejectionWarning: TypeError: asset.map is not a function\r\n    at getTaskForFile (/Users/Desktop/webpack/node_modules/webpack/lib/SourceMapDevToolPlugin.js:82:47)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nThis is my webpack configuration =>\r\n\r\n```\r\n{\r\n  \"mode\": \"development\",\r\n  \"context\": \"/Users/Desktop/webpack\",\r\n  \"entry\": {\r\n    \"app\": [\r\n      \"/Users/Desktop/2020/app/src/main.js\"\r\n    ]\r\n  },\r\n  \"output\": {\r\n    \"filename\": \"js/[name].[chunkhash:10].js\",\r\n    \"path\": \"/Users/Desktop/2020/app/dist/development\",\r\n    \"pathinfo\": false,\r\n    \"publicPath\": \"/\"\r\n  },\r\n  \"resolve\": {\r\n    \"extensions\": [\r\n      \".jsx\",\r\n      \".js\",\r\n      \".tsx\",\r\n      \".ts\"\r\n    ],\r\n    \"modules\": [\r\n      \"/Users/Desktop/2020/app/src\",\r\n      \"node_modules\"\r\n    ],\r\n    \"symlinks\": false,\r\n    \"fallback\": {\r\n      \"url\": \"/Users/Desktop/webpack/node_modules/url/url.js\"\r\n    }\r\n  },\r\n  \"stats\": {\r\n    \"children\": false\r\n  },\r\n  \"performance\": {\r\n    \"hints\": false\r\n  },\r\n  \"bail\": false,\r\n  \"module\": {\r\n    \"rules\": [\r\n      {\r\n        \"test\": {},\r\n        \"use\": {\r\n          \"loader\": \"babel-loader\",\r\n          \"options\": {\r\n            \"cacheDirectory\": true,\r\n            \"babelrc\": false,\r\n            \"configFile\": false,\r\n            \"presets\": [\r\n                require('@babel/preset-typescript'),\r\n                require('@babel/preset-env'), {\r\n                    useBuiltIns: 'entry',\r\n                    modules: false,\r\n                    corejs: 3,\r\n                },\r\n                require('@babel/preset-react'),\r\n            ],\r\n            \"plugins\": [\r\n                [\r\n                    require('@babel/plugin-transform-runtime'),\r\n                    {\r\n                        'corejs': 3,\r\n                    },\r\n                ],\r\n                require('@babel/plugin-proposal-object-rest-spread'),\r\n                require('@babel/plugin-proposal-optional-chaining'),\r\n                require('@babel/plugin-proposal-class-properties'),\r\n                require('react-hot-loader/babel'),\r\n            ],\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"test\": {},\r\n        \"use\": [\r\n          {\r\n            \"loader\": \"/Users/Desktop/webpack/node_modules/mini-css-extract-plugin/dist/loader.js\",\r\n            \"options\": {\r\n              \"publicPath\": \"../../\"\r\n            }\r\n          },\r\n          {\r\n            \"loader\": \"css-loader\",\r\n            \"options\": {\r\n              \"importLoaders\": 1,\r\n              \"import\": false,\r\n              \"modules\": true\r\n            }\r\n          },\r\n          {\r\n            \"loader\": \"postcss-loader\",\r\n            \"options\": {}\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"test\": {},\r\n        \"use\": [\r\n          {\r\n            \"loader\": \"file-loader\",\r\n            \"options\": {\r\n              \"name\": \"assets/[name].[ext]\",\r\n              \"publicPath\": \"/\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"devtool\": \"source-map\",\r\n  \"plugins\": [\r\n    new CopyPlugin(\r\n      conf.copy.map(f => {\r\n        const ext = path.extname(f.filename);\r\n        const dir = ext === '.js'\r\n            ? 'js' : ext === '.css'\r\n                ? 'css' : 'assets';\r\n        return {\r\n            from: path.resolve(f.filename),\r\n            to: conf.if.hashFiles(\r\n                `${dir}/${f.name}.[chunkhash:10].[ext]`,\r\n                `${dir}/${f.name}.[ext]`\r\n            ),\r\n            toType: 'template',\r\n        };\r\n    }),\r\n    new webpack.LoaderOptionsPlugin({\r\n        sourceMap: true,\r\n        minimize: conf.if.minification(),\r\n        compress: conf.if.minification(),\r\n        debug: conf.if.debug(),\r\n    }),\r\n    new WebpackManifestPlugin({\r\n        filter: f => (!f.isAsset || !f.isModuleAsset) && !/\\.map$/.test(f.name),\r\n        map: f => {\r\n            f.name = f.name.replace(\r\n                /^(?:(?:js|css|assets)\\/)([^.]*)(?:\\.[a-f0-9]{10})?(\\..*)$/, '$1$2');\r\n            return f;\r\n        },\r\n    }),\r\n  ],\r\n  \"optimization\": {\r\n    \"splitChunks\": {\r\n        cacheGroups: {\r\n          vendor: {\r\n            test: (mod, { chunkGraph }) => {\r\n              const isExcluded = str => setupExcludedModules(str, conf.includedModules);\r\n              if (mod.nameForCondition && isExcluded(mod.nameForCondition())) {\r\n                  return true;\r\n              }\r\n              for (const chunk of chunkGraph.getModuleChunks(mod)) {\r\n                  if (chunk.name && isExcluded(chunk.name)) {\r\n                      return true;\r\n                  }\r\n              }\r\n              return false;\r\n            },\r\n          name: 'vendor',\r\n          chunks: chunk => chunk.name === 'app',\r\n        },\r\n      },\r\n    },\r\n    minimizer: [\r\n        new TerserPlugin({\r\n            parallel: true,\r\n        }),\r\n        new CssMinimizerPlugin({\r\n            include: /^((?:(?!whitelabel).)*)\\.css$/g,\r\n            parallel: true,\r\n        }),\r\n    ],\r\n  }\r\n}\r\n```\r\n\r\nmy package.json =>\r\n```\r\n{\r\n    \"main\": \"./index.js\",\r\n    \"bin\": {\r\n        \"webpack\": \"./bin/webpack\"\r\n    },\r\n    \"scripts\": {\r\n        \"lint\": \"eslint .\"\r\n    },\r\n    \"peerDependencies\": {\r\n        \"@hot-loader/react-dom\": \"^16.8.4\",\r\n        \"react\": \"^16.8.4\",\r\n        \"react-dom\": \"^16.8.4\",\r\n        \"react-hot-loader\": \"^4.8.0\"\r\n    },\r\n    \"dependencies\": {\r\n        \"@babel/core\": \"^7.12.3\",\r\n        \"@babel/plugin-proposal-class-properties\": \"^7.12.1\",\r\n        \"@babel/plugin-proposal-object-rest-spread\": \"^7.12.1\",\r\n        \"@babel/plugin-proposal-optional-chaining\": \"^7.12.1\",\r\n        \"@babel/plugin-transform-runtime\": \"^7.12.1\",\r\n        \"@babel/preset-env\": \"^7.12.1\",\r\n        \"@babel/preset-react\": \"^7.12.1\",\r\n        \"@babel/preset-typescript\": \"^7.12.1\",\r\n        \"@babel/runtime\": \"^7.12.1\",\r\n        \"@babel/runtime-corejs2\": \"^7.12.1\",\r\n        \"@babel/runtime-corejs3\": \"^7.12.1\",\r\n        \"@hot-loader/react-dom\": \"^16.11.0\",\r\n        \"@token-io/eslint-config\": \"^1.0.6\",\r\n        \"babel-eslint\": \"^10.0.3\",\r\n        \"babel-loader\": \"^8.2.2\",\r\n        \"chai\": \"^3.5.0\",\r\n        \"copy-webpack-plugin\": \"^8.1.0\",\r\n        \"core-js\": \"^3.6.4\",\r\n        \"css\": \"^2.2.4\",\r\n        \"css-hot-loader\": \"^1.4.4\",\r\n        \"css-loader\": \"^4.3.0\",\r\n        \"css-minimizer-webpack-plugin\": \"^1.3.0\",\r\n        \"css-mqpacker\": \"^7.0.0\",\r\n        \"eslint\": \"^5.16.0\",\r\n        \"eslint-plugin-import\": \"^2.20.0\",\r\n        \"eslint-plugin-react\": \"^7.18.0\",\r\n        \"file-loader\": \"^2.0.0\",\r\n        \"js-yaml\": \"^3.13.1\",\r\n        \"karma\": \"^5.2.0\",\r\n        \"karma-bamboo-reporter\": \"^0.1.2\",\r\n        \"karma-chai\": \"^0.1.0\",\r\n        \"karma-chrome-launcher\": \"^2.2.0\",\r\n        \"karma-es6-shim\": \"^1.0.0\",\r\n        \"karma-mocha\": \"^2.0.1\",\r\n        \"karma-mocha-reporter\": \"^2.2.5\",\r\n        \"karma-phantomjs-launcher\": \"^1.0.4\",\r\n        \"karma-sinon\": \"^1.0.5\",\r\n        \"karma-sourcemap-loader\": \"^0.3.7\",\r\n        \"karma-webpack\": \"^5.0.0\",\r\n        \"mini-css-extract-plugin\": \"^1.4.0\",\r\n        \"minimist\": \"^1.2.5\",\r\n        \"mocha\": \"^8.1.3\",\r\n        \"postcss-advanced-variables\": \"^3.0.0\",\r\n        \"postcss-atroot\": \"^0.1.3\",\r\n        \"postcss-extend-rule\": \"^2.0.0\",\r\n        \"postcss-hexrgba\": \"^1.0.2\",\r\n        \"postcss-import\": \"^12.0.0\",\r\n        \"postcss-loader\": \"^3.0.0\",\r\n        \"postcss-nested\": \"^4.2.1\",\r\n        \"postcss-preset-env\": \"^6.7.0\",\r\n        \"postcss-property-lookup\": \"^2.0.0\",\r\n        \"react\": \"^16.12.0\",\r\n        \"react-dom\": \"^16.12.0\",\r\n        \"react-hot-loader\": \"^4.12.19\",\r\n        \"regenerator-runtime\": \"^0.13.3\",\r\n        \"sinon\": \"^6.3.4\",\r\n        \"source-map-loader\": \"^2.0.1\",\r\n        \"style-loader\": \"^2.0.0\",\r\n        \"typescript\": \"^4.2.3\",\r\n        \"url\": \"^0.11.0\",\r\n        \"webpack\": \"^5.30.0\",\r\n        \"webpack-dev-middleware\": \"^4.1.0\",\r\n        \"webpack-hot-middleware\": \"^2.25.0\",\r\n        \"webpack-manifest-plugin\": \"^3.1.1\",\r\n        \"webpack-sentry-plugin\": \"^2.0.3\"\r\n    }\r\n}\r\n\r\n``` \r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack fails to bundle, though if I have chosen `devtool: \"eval\"`, webpack build goes through fine but I want to generate source-map rather going with `eval` option\r\n\r\n**Other relevant information:**\r\n\r\nThe error occurs inside function `getTaskFromFile` of SourceMapDevtoolPlugin below - \r\n```\r\n/**\r\n * Creating {@link SourceMapTask} for given file\r\n * @param {string} file current compiled file\r\n * @param {Source} asset the asset\r\n * @param {AssetInfo} assetInfo the asset info\r\n * @param {MapOptions} options source map options\r\n * @param {Compilation} compilation compilation instance\r\n * @param {ItemCacheFacade} cacheItem cache item\r\n * @returns {SourceMapTask | undefined} created task instance or `undefined`\r\n */\r\nconst getTaskForFile = (\r\n\tfile,\r\n\tasset,\r\n\tassetInfo,\r\n\toptions,\r\n\tcompilation,\r\n\tcacheItem\r\n) => {\r\n\tlet source;\r\n\t/** @type {SourceMap} */\r\n\tlet sourceMap;\r\n\t/**\r\n\t * Check if asset can build source map\r\n\t */\r\n\tif (asset.sourceAndMap) {\r\n\t\tconst sourceAndMap = asset.sourceAndMap(options);\r\n\t\tsourceMap = /** @type {SourceMap} */ (sourceAndMap.map);\r\n\t\tsource = sourceAndMap.source;\r\n\t} else {\r\n\t\tsourceMap = /** @type {SourceMap} */ (asset.map(options));        **<=   Error location**\r\n\t\tsource = asset.source();\r\n\t}\r\n\tif (!sourceMap || typeof source !== \"string\") return;\r\n\tconst context = compilation.options.context;\r\n\tconst root = compilation.compiler.root;\r\n\tconst cachedAbsolutify = absolutify.bindContextCache(context, root);\r\n\tconst modules = sourceMap.sources.map(source => {\r\n\t\tif (!source.startsWith(\"webpack://\")) return source;\r\n\t\tsource = cachedAbsolutify(source.slice(10));\r\n\t\tconst module = compilation.findModule(source);\r\n\t\treturn module || source;\r\n\t});\r\n\r\n\treturn {\r\n\t\tfile,\r\n\t\tasset,\r\n\t\tsource,\r\n\t\tassetInfo,\r\n\t\tsourceMap,\r\n\t\tmodules,\r\n\t\tcacheItem\r\n\t};\r\n};\r\n```\r\n\r\nThe actual asset which is passed to the above function is `obj.source` below:\r\n```\r\nconst obj = {\r\n  name: 'css/app.whitelabel.css',\r\n  source: { source: [Function: source], size: [Function: size] },\r\n  info: {}\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13067/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2021-04-07T08:09:52Z",
        "body": "```\r\nsource: { source: [Function: source], size: [Function: size] }\r\n```\r\n\r\nThis is not a valid `Source` class instance. I guess this is added by some other plugin, but I don't which one should cause that. Is that the correct config? Have you run `npm/yarn install`? I don't see `mini-css-extract-plugin` used in the config, so I wonder how css files are generated."
      },
      {
        "user": "ghost",
        "created_at": "2021-04-07T09:25:39Z",
        "body": "Thank you @sokra for the response, indeed this asset's source object does not match with others so, I guess while comparing this object with other source objects, this structure probably is not the correct one because I have to use whitelabeling in css and so had to replace the map file like below =>\r\n\r\n```\r\n// Extract Whitelabel CSS\r\nconst result = extractWhitelabelCSS(assetSource, options);\r\n\r\nif (result.trim()) {\r\n    // add new chunk with whitelabel css file\r\n    compilation.assets[whitelabelFileName] = {\r\n        source: function() {\r\n            return result;\r\n        },\r\n        size: function() {\r\n            return result.length;\r\n        },\r\n    };\r\n\r\n    const map = new sourceMap.SourceMapGenerator({\r\n        file: options.from,\r\n    });\r\n\r\n    const newMap = map.toString();\r\n    compilation.assets[mapFileName] = {\r\n        source: function() {\r\n            return newMap;\r\n        },\r\n        size: function() {\r\n            return newMap.length;\r\n        },\r\n    };\r\n}\r\n``` \r\n\r\nCould you please suggest how should I build this source map object in above code. This was working fine with webpack v4. Thanks."
      },
      {
        "user": "sokra",
        "created_at": "2021-04-07T09:35:38Z",
        "body": "``` js\r\ncompilation.assets[whitelabelFileName] = new webpack.sources.RawSource(result);\r\n```"
      }
    ]
  },
  {
    "number": 13007,
    "title": "ESM re-exports to umd",
    "created_at": "2021-03-29T06:03:15Z",
    "closed_at": "2021-07-14T05:31:56Z",
    "labels": [
      "question",
      "inactive",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/13007",
    "body": "**What is the current behavior?**\r\nESM re-exports to umd transpiler produce big bundle size.\r\nWhen i used to have the same functions in 1 single file, a bundle was significantly less. however, when i migrate to esm and put each function into a separate file and create index.js with re-export, bundle size has been blown. per my bundle analuze i realize that the biggest file is index.js.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\ncreate a few files per with single function (in my case 207).\r\ncrearte index.js with re-exports like\r\n```\r\nexport { default as a1 } from './a1'\r\nexport { default as a2 } from './a2'\r\nexport { default as a3 } from './a3'\r\n.....\r\nexport { default as aN } from './aN'\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would expect that bundle size with re-exports would be the same as having all functions in one file. or at least some steps for pre-build to concatenate all files into one before transpile to umd.\r\n\r\n\r\nwebpack version:  5.23.0\r\nNode.js version: 12.18.0\r\nOperating System: mac os\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/13007/comments",
    "author": "fireridlle",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-03-29T11:32:06Z",
        "body": "Now you have more modules, so size is more"
      },
      {
        "user": "sokra",
        "created_at": "2021-03-29T14:27:07Z",
        "body": "In production mode webpack concatenates modules when they use ESM exports and imports.\n\nIt would be great if you reduce your issue to a small reproducible example. Best put this example into a github repository together with instructions how to get to the problem."
      },
      {
        "user": "webpack-bot",
        "created_at": "2021-06-29T03:01:54Z",
        "body": "<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2021-07-14T05:31:58Z",
        "body": "<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 12925,
    "title": "Compiled app doesn't start",
    "created_at": "2021-03-18T01:44:48Z",
    "closed_at": "2021-03-22T16:29:45Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12925",
    "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nI've been trying to understand this all day. If I specify `runtimeChunk`, and (maybe?) it gets minified my app doesn't start. If I comment out `runtimeChunk` my app starts. The sources all look okay and are loading, but the entry point doesn't exec.\r\n\r\n**What is the current behavior?**\r\nBlank screen after build.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI've been trying to isolate this but haven't yet. I'm sorry. I just wanted to get this out there hoping someone else has ideas.\r\n\r\n**What is the expected behavior?**\r\nthe entry point should execute.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.26.3\r\nNode.js version: 15.12.0\r\nOperating System: linux\r\nAdditional tools:\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12925/comments",
    "author": "jsg2021",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T12:15:27Z",
        "body": "Sorry, information is not enough to help you, maybe you forget to add something to your HTML file"
      },
      {
        "user": "vadimka123",
        "created_at": "2021-03-18T12:49:22Z",
        "body": "I has same problem on rebuild on watch mode or build when not have previous build \r\nProblem started after upgrade to 5.26.0, in version 5.25.1 all working fine "
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T12:50:26Z",
        "body": "@vadimka123 Maybe you can create example?"
      },
      {
        "user": "vadimkuragkovskiy",
        "created_at": "2021-03-18T13:14:17Z",
        "body": "hey Guys, \r\n\r\nI'm using MacOS and also have similar issue. My teammates don't have it on linux. \r\n\r\nSo we upgraded our webpack to the version `\"webpack\": \"5.26.3\"` and the initial build is ok but the rebuild is broken. \r\n\r\nHere is command \r\n```\r\nwebpack --progress --watch --mode development\r\n```\r\n\r\nwhen I apply some changes to the file, my webpack does rebuild automatically and I'm getting blank screen without any errors in console. \r\n\r\nHow I fixed this issue temporary. I reverted my webpack to the version \"webpack\": \"5.25.1\" and on this version everything works well. Perhaps 5.26.0 works also fine, I just didn't check that.\r\n\r\n\r\nwebpack config looks like\r\n```js\r\nmodule.exports = {\r\n\tmode: NODE_ENV,\r\n\tentry: ['./app/App.jsx'],\r\n\toutput: {\r\n\t\tpath: buildDir,\r\n\t\tfilename: DEBUG_ON ? '[name].[fullhash].js' : '[name].[contenthash].js',\r\n\t\tpublicPath: cdn_url + '/build/',\r\n\t},\r\n\twatchOptions: {\r\n\t\tignored: /node_modules/,\r\n\t\taggregateTimeout: 300,\r\n\t},\r\n\tplugins: plugins,\r\n\tdevtool: DEBUG_ON ? 'eval-source-map' : 'source-map',\r\n\tresolve: {\r\n\t\talias: {\r\n\t\t\tringlead_utils: path.resolve(__dirname, 'app/utils'),\r\n\t\t},\r\n\t\textensions: ['.js', '.jsx'],\r\n\t\tfallback: { url: false },\r\n\t},\r\n\toptimization: {\r\n\t\truntimeChunk: 'single',\r\n\t\tsplitChunks: {\r\n\t\t\tautomaticNameDelimiter: '.',\r\n\t\t\tchunks: 'all',\r\n\t\t\tmaxAsyncRequests: 10,\r\n\t\t\tmaxInitialRequests: 10,\r\n\t\t\tcacheGroups: {\r\n\t\t\t\tdefaultVendors: {\r\n\t\t\t\t\treuseExistingChunk: true,\r\n\t\t\t\t\tenforce: true,\r\n\t\t\t\t},\r\n\t\t\t\tmain: {\r\n\t\t\t\t\treuseExistingChunk: true,\r\n\t\t\t\t\ttest: /[\\\\/]app[\\\\/]/,\r\n\t\t\t\t},\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tminChunks: 1,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tmodule: {\r\n\t\trules: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.jsx?$/,\r\n\t\t\t\texclude: /(node_modules|bower_components)/,\r\n\t\t\t\tuse: {\r\n\t\t\t\t\tloader: 'babel-loader',\r\n\t\t\t\t\toptions: {\r\n\t\t\t\t\t\tpresets: [\r\n\t\t\t\t\t\t\t['@babel/env', { targets: '> 0.25%, not dead' }],\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t'@babel/preset-react',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\truntime: 'automatic',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tplugins: [\r\n\t\t\t\t\t\t\t['@babel/plugin-proposal-decorators', { legacy: true }],\r\n\t\t\t\t\t\t\t'@babel/plugin-proposal-class-properties',\r\n\t\t\t\t\t\t\t'@babel/plugin-syntax-dynamic-import',\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t'@babel/plugin-transform-classes',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tloose: true,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t'@babel/plugin-transform-computed-properties',\r\n\t\t\t\t\t\t\t'@babel/plugin-transform-shorthand-properties',\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/i,\r\n\t\t\t\texclude: [path.resolve(__dirname, 'node_modules/react-phone-input-2/lib/style.css')],\r\n\t\t\t\tuse: [DEBUG_ON ? 'style-loader' : MiniCssExtractPlugin.loader, 'css-loader'],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/i,\r\n\t\t\t\tinclude: [path.resolve(__dirname, 'node_modules/react-phone-input-2/lib/style.css')],\r\n\t\t\t\tuse: ['style-loader', 'css-loader'],\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n```\r\n\r\npackage.json config (removed couple private things):\r\n\r\n```js\r\n\r\n{\r\n\t\"name\": \"\",\r\n\t\"description\": \"\",\r\n\t\"version\": \"2.0.0\",\r\n\t\"scripts\": {\r\n\t\t\"build\": \"NODE_ENV=production webpack --progress --mode production\",\r\n\t\t\"watch\": \"webpack --progress --watch --mode development\",\r\n\t\t\"watch-analyze\": \"webpack --progress --watch --display-modules\",\r\n\t\t\"analyze\": \"webpack --progress --json --display-modules | webpack-bundle-size-analyzer\",\r\n\t\t\"build-win\": \"NODE_ENV=production webpack --progress --mode production\",\r\n\t\t\"watch-win\": \"webpack --progress --watch\",\r\n\t\t\"test\": \"webpack\",\r\n\t\t\"eslint\": \"node_modules/.bin/eslint --ext .jsx,.js,.json --fix --ignore-pattern='!.eslintrc.js' --max-warnings=0 ./app\"\r\n\t},\r\n\t\"license\": \"ISC\",\r\n\t\"dependencies\": {\r\n\t\t\"@clientio/rappid\": \"file:vendor/rappid.tgz\",\r\n\t\t\"@date-io/dayjs\": \"1.3.13\",\r\n\t\t\"@material-ui/core\": \"4.11.3\",\r\n\t\t\"@material-ui/icons\": \"4.11.2\",\r\n\t\t\"@material-ui/pickers\": \"3.3.10\",\r\n\t\t\"axios\": \"0.21.1\",\r\n\t\t\"backbone\": \"1.4.0\",\r\n\t\t\"clsx\": \"1.1.1\",\r\n\t\t\"connected-react-router\": \"6.8.0\",\r\n\t\t\"dayjs\": \"1.10.4\",\r\n\t\t\"highcharts\": \"9.0.1\",\r\n\t\t\"history\": \"4.10.1\",\r\n\t\t\"jquery\": \"3.6.0\",\r\n\t\t\"js-cookie\": \"2.2.1\",\r\n\t\t\"lodash\": \"4.17.21\",\r\n\t\t\"notistack\": \"1.0.5\",\r\n\t\t\"nprogress\": \"0.2.0\",\r\n\t\t\"object-hash\": \"2.1.1\",\r\n\t\t\"prop-types\": \"15.7.2\",\r\n\t\t\"react\": \"17.0.1\",\r\n\t\t\"react-dnd\": \"14.0.1\",\r\n\t\t\"react-dnd-html5-backend\": \"14.0.0\",\r\n\t\t\"react-dom\": \"17.0.1\",\r\n\t\t\"react-dropzone\": \"11.3.1\",\r\n\t\t\"react-phone-input-2\": \"2.13.9\",\r\n\t\t\"react-redux\": \"7.2.2\",\r\n\t\t\"react-router\": \"5.2.0\",\r\n\t\t\"react-router-dom\": \"5.2.0\",\r\n\t\t\"react-select\": \"[custom private repo was here]\",\r\n\t\t\"react-window\": \"1.8.6\",\r\n\t\t\"redux\": \"4.0.5\",\r\n\t\t\"redux-logger\": \"3.0.6\",\r\n\t\t\"redux-thunk\": \"2.3.0\",\r\n\t\t\"reselect\": \"4.0.0\",\r\n\t\t\"socket.io-client\": \"4.0.0\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"@babel/core\": \"7.13.10\",\r\n\t\t\"@babel/eslint-parser\": \"7.13.10\",\r\n\t\t\"@babel/parser\": \"7.13.11\",\r\n\t\t\"@babel/plugin-proposal-class-properties\": \"7.13.0\",\r\n\t\t\"@babel/plugin-proposal-decorators\": \"7.13.5\",\r\n\t\t\"@babel/plugin-syntax-dynamic-import\": \"7.8.3\",\r\n\t\t\"@babel/plugin-transform-classes\": \"7.13.0\",\r\n\t\t\"@babel/plugin-transform-computed-properties\": \"7.13.0\",\r\n\t\t\"@babel/plugin-transform-runtime\": \"7.13.10\",\r\n\t\t\"@babel/plugin-transform-shorthand-properties\": \"7.12.13\",\r\n\t\t\"@babel/preset-env\": \"7.13.10\",\r\n\t\t\"@babel/preset-react\": \"7.12.13\",\r\n\t\t\"@babel/runtime\": \"7.13.10\",\r\n\t\t\"babel-loader\": \"8.2.2\",\r\n\t\t\"css-loader\": \"5.1.3\",\r\n\t\t\"eslint\": \"7.22.0\",\r\n\t\t\"eslint-config-prettier\": \"8.1.0\",\r\n\t\t\"eslint-config-react-app\": \"6.0.0\",\r\n\t\t\"eslint-plugin-flowtype\": \"5.4.0\",\r\n\t\t\"eslint-plugin-import\": \"2.22.1\",\r\n\t\t\"eslint-plugin-json\": \"2.1.2\",\r\n\t\t\"eslint-plugin-jsx-a11y\": \"6.4.1\",\r\n\t\t\"eslint-plugin-prettier\": \"3.3.1\",\r\n\t\t\"eslint-plugin-react\": \"7.22.0\",\r\n\t\t\"eslint-plugin-react-hooks\": \"4.2.0\",\r\n\t\t\"eslint-plugin-simple-import-sort\": \"7.0.0\",\r\n\t\t\"eslint-plugin-sonarjs\": \"0.6.0\",\r\n\t\t\"html-webpack-plugin\": \"5.3.1\",\r\n\t\t\"husky\": \"4.3.8\",\r\n\t\t\"lint-staged\": \"10.5.4\",\r\n\t\t\"mini-css-extract-plugin\": \"1.3.9\",\r\n\t\t\"prettier\": \"2.2.1\",\r\n\t\t\"style-loader\": \"2.0.0\",\r\n\t\t\"webpack\": \"5.25.1\",\r\n\t\t\"webpack-bundle-tracker\": \"0.4.3\",\r\n\t\t\"webpack-cli\": \"4.5.0\"\r\n\t},\r\n\t\"lint-staged\": {\r\n\t\t\"*.{js,jsx,json}\": [\r\n\t\t\t\"node_modules/.bin/eslint --fix --ignore-pattern '!.eslintrc.js' --max-warnings=0\",\r\n\t\t\t\"prettier --write\"\r\n\t\t]\r\n\t},\r\n\t\"husky\": {\r\n\t\t\"hooks\": {\r\n\t\t\t\"pre-commit\": \"lint-staged\"\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n```\r\n"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T13:18:22Z",
        "body": "Please avoid posting configurations in posts, it is unreadable and very rare helps, thanks"
      },
      {
        "user": "vadimkuragkovskiy",
        "created_at": "2021-03-18T13:31:19Z",
        "body": "hey @alexander-akait could you please let me the desired way? I'll update my previous post to keep it looks good for the rest community "
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T13:37:54Z",
        "body": "@vadimkuragkovskiy \r\n\r\n> hey @alexander-akait could you please let me the desired way?\r\n\r\nYep, just create small reproducible test repo in own account, it is easy to debug and search a problem(s)"
      },
      {
        "user": "jsg2021",
        "created_at": "2021-03-18T14:35:41Z",
        "body": "> Sorry, information is not enough to help you, maybe you forget to add something to your HTML file\n\nYeah, i know. This is a project that's been fine for years. I'm still trying to figure out the minimum reproduction. \n\nI think it has something to do with mixing mode: development and runtimeChunk... but i'm not 100% there. \n\nI'll keep trying to find a min repro."
      },
      {
        "user": "vadimka123",
        "created_at": "2021-03-22T08:36:48Z",
        "body": "Working fine in version 5.27.1\r\nCan be closed"
      },
      {
        "user": "sokra",
        "created_at": "2021-03-22T12:00:31Z",
        "body": "@jsg2021 Could you try 5.27.1?"
      },
      {
        "user": "jsg2021",
        "created_at": "2021-03-22T15:27:01Z",
        "body": "I will give it a try today"
      },
      {
        "user": "jsg2021",
        "created_at": "2021-03-22T16:29:44Z",
        "body": "This does appear to be fixed."
      }
    ]
  },
  {
    "number": 12816,
    "title": "Tree Shaking does not work on \"const X = FN()\"",
    "created_at": "2021-03-05T11:07:16Z",
    "closed_at": "2021-10-02T23:02:00Z",
    "labels": [
      "question",
      "inactive",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12816",
    "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nconsider you've a index file like \r\n\r\n```js\r\nimport {trans_de} from \"./generated/trans/trans.countries\";\r\nconsole.log(trans_de);\r\n```\r\nwebpack does not tree shake the file `trans/trans.countries` as i expected.\r\n\r\nIn this examples the final output contains trans_de and trans_at. **i expected that it contains only foo and trans_de**.\r\nthere is no reason to include `trans_at` here.\r\n\r\n```js\r\nconst /*#__PURE__*/ foo = /*#__PURE__*/ (v) => ({trans: v});\r\nexport const trans_de = /*#__PURE__*/ foo(['Deutschland', 'Germany'])\r\nexport const trans_at = /*#__PURE__*/ foo(['Österreich', 'Austria'])\r\n```\r\n\r\nit seems to be related to the foo function, these cases **it works as expected**:\r\n\r\n```js\r\nconst /*#__PURE__*/ foo1 = /*#__PURE__*/ (v) => ({trans: v});\r\nconst /*#__PURE__*/ foo2 = /*#__PURE__*/ (v) => ({trans: v});\r\nexport const trans_de = /*#__PURE__*/ foo1(['Deutschland', 'Germany'])\r\nexport const trans_at = /*#__PURE__*/ foo2(['Österreich', 'Austria'])\r\n```\r\n\r\n```js\r\nconst /*#__PURE__*/ foo = /*#__PURE__*/ (v) => ({trans: v});\r\nexport const trans_de = /*#__PURE__*/ () => foo(['Deutschland', 'Germany'])\r\nexport const trans_at = /*#__PURE__*/ () => foo(['Österreich', 'Austria'])\r\n```\r\n\r\n```js\r\nconst /*#__PURE__*/ foo = /*#__PURE__*/ (v) => ({trans: v});\r\nexport const trans_de = /*#__PURE__*/ foo(['Deutschland', 'Germany'])\r\nexport const trans_at = ['Österreich', 'Austria']\r\n```\r\n\r\ni tryed it with different `usedExports` and `sideEffects` settings, but it does not make a difference.\r\n\r\nrelated config: \r\n\r\n```\r\noptimization: {\r\n            innerGraph: true,\r\n            minimize: !is_development,\r\n            minimizer: [\r\n                new TerserPlugin({\r\n                    parallel: true,\r\n                    terserOptions: {\r\n                        compress: {\r\n                            passes: 30\r\n                        }\r\n                    }\r\n                }),\r\n                new CssMinimizerPlugin({\r\n                    parallel: true,\r\n                    sourceMap: is_development,\r\n                }),\r\n            ],\r\n        },\r\n```\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.21.2\r\nNode.js version: 12.16.1\r\nOperating System: Ubuntu\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12816/comments",
    "author": "timglabisch",
    "comments": [
      {
        "user": "webpack-bot",
        "created_at": "2021-06-05T03:11:58Z",
        "body": "<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-06-05T13:20:01Z",
        "body": "bump"
      },
      {
        "user": "sokra",
        "created_at": "2021-06-18T10:39:21Z",
        "body": "I'm unable to reproduce it.\r\n\r\nWith your example the output is:\r\n\r\n``` js\r\n(()=>{\"use strict\";const s=(s=>({trans:s}))([\"Deutschland\",\"Germany\"]);console.log(s)})();\r\n```\r\n\r\nIt correctly tree-shakes the `trans_at` export"
      },
      {
        "user": "webpack-bot",
        "created_at": "2021-10-02T23:02:00Z",
        "body": "<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 12812,
    "title": "How to log result to terminal with colors using Node API?",
    "created_at": "2021-03-05T07:24:36Z",
    "closed_at": "2021-03-05T12:08:06Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12812",
    "body": "Hi. How can i log webpack work result when using Node API exactly same as with CLI (colored text in terminal)?\r\n\r\nThere is some kind of default callback for `webpack(options, callback)`?",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12812/comments",
    "author": "krutoo",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-03-05T11:49:11Z",
        "body": "Please use `Discussions` for questions\r\n```js\r\nconst webpack = require('webpack');\r\n\r\nwebpack({}, (error, stats) => {\r\n    if (error) {\r\n        throw error;\r\n    }\r\n\r\n    console.log(\r\n        stats.toString({\r\n            colors: true,\r\n        }),\r\n    );\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 12564,
    "title": "Way to recognize when initial compilation with lazy plugin has finished.",
    "created_at": "2021-02-02T15:53:28Z",
    "closed_at": "2021-02-03T21:08:27Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12564",
    "body": "\r\n## Feature request\r\n\r\nI have tried the new lazy compilation option and it's awesome!\r\nI am creating a Create-React-App type of app using webpack-dev-middleware and one thing I noticed is that Webpack marks itself as ready (using `done` hook) before the entry point is compiled. This means if I cold start my app and immediately open the browser, I get an empty white page.\r\n\r\nIt would be nice to have a way to figure out when the initial compilation is done so only then we can open the browser for better DX. Does something like this in form of a hook already exist?\r\n\r\n**What is the expected behavior?**\r\nWebpack only changing to a ready state once the webapp can be visited\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nBetter developer experience\r\n\r\n**How should this be implemented in your opinion?**\r\nFor example using a hook, or changing when when Webpack calls the 'done' hook. The PR #12553 which could disable lazy importing for certain files also looks promising, because then maybe I could disable it for my entry files.\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12564/comments",
    "author": "JonnyBurger",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-02-02T15:58:31Z",
        "body": "I don't think you need hook here, you can do it on tool/application side"
      },
      {
        "user": "JonnyBurger",
        "created_at": "2021-02-02T16:03:03Z",
        "body": "@alexander-akait Can you tell me how I could implement it on the application side?"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-02-02T16:09:24Z",
        "body": "You have `__webpack_hash__` so you can check it was changed or not"
      },
      {
        "user": "sokra",
        "created_at": "2021-02-02T18:39:41Z",
        "body": "There are multiple things that you could do about that:\r\n\r\nIf your application has only a single entrypoint it make sense to disable lazy compilation for entrypoints, because there is no benefit in only compiling it when visited (since you can only visit this entrypoint). We should make this the default when there is only a single entrypoint.\r\n\r\nAbove thing will also give the the experience that the browser only opens when the page is ready.\r\n\r\nLazy Compilation has the option to create a custom User Interface when lazy compiling via the `experiments.lazyCompilation.client` option. This allows to disable e. g. a spinner and a message in the browser.\r\n\r\n"
      },
      {
        "user": "JonnyBurger",
        "created_at": "2021-02-03T21:08:27Z",
        "body": "Thanks a lot! With the new webpack version that came out today, I can do the following:\r\n\r\n```console\r\n\texperiments: {\r\n\t\tlazyCompilation: {\r\n\t\t\tentries: false,\r\n\t\t},\r\n\t}\r\n```\r\n\r\nand it works perfectly! 🥳 \r\n\r\nThanks a lot for the swift help and my issue is resolved!"
      },
      {
        "user": "rodrigofariow",
        "created_at": "2021-10-08T16:04:25Z",
        "body": "Hey there!\r\n\r\nThis looks very helpful! Thanks @sokra \r\n\r\n> We should make this the default when there is only a single entrypoint.\r\n\r\nI was wondering if it is still your intent to do this by default. \r\nFrom my tests with `webpack@5.58.1` and the following config\r\n```\r\n  ...\r\n  entry: './src/index.tsx', // single entry point\r\n  experiments: {\r\n    lazyCompilation: true,\r\n  },\r\n```\r\nIt doesn't look like `entries=false` is the default yet.\r\n\r\nMaybe you will only do this when `lazyCompilation` is no longer experimental but I wanted to confirm so.\r\n\r\nThank you for your time!"
      }
    ]
  },
  {
    "number": 12563,
    "title": "No source maps in production mode",
    "created_at": "2021-02-02T15:34:44Z",
    "closed_at": "2021-02-03T08:45:30Z",
    "labels": [
      "question",
      "webpack-4"
    ],
    "url": "https://github.com/webpack/webpack/issues/12563",
    "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nUnable to create sourcemaps in production mode.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSo we have 3 environments:\r\ndevelopment  (dev build with source maps)\r\nstaging           (prod build with source maps)\r\nproduction     (prod build without source maps)\r\n\r\nThis was working fine with webpack 4.41.0, but something changed after 4.42.0 -> 4.46.0.\r\n\r\nIt kinda works, it generates source map for stuff in the node_modules, but not our src folder.\r\nwebpack --progress --env.staging --mode production --env.extractCss --optimize-minimize --devtool source-map\r\n\r\nBut if i change mode to development, like:\r\nwebpack --progress --env.staging --mode development --env.extractCss --optimize-minimize --devtool source-map\r\n\r\nThen it generates sourcemap for both node_modules and our src folder.\r\nBut then we get development source code. Not minified etc. Not a production build.\r\n\r\n**What is the expected behavior?**\r\nGenerate source map when i tell it to generate source maps.\r\nEven if i build a production build.\r\n\r\nWhat am i missing ? :)\r\n\r\n**Other relevant information:**\r\nwebpack version:   4.46.0\r\nNode.js version:  14.15.4\r\nOperating System: Windows 10\r\nAdditional tools: \r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12563/comments",
    "author": "blarsern",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-02-02T15:45:14Z",
        "body": "> If the current behavior is a bug, please provide the steps to reproduce.\r\n\r\nSorry command line arguments without configuration can't help to help you, nobody know, won't fix"
      },
      {
        "user": "blarsern",
        "created_at": "2021-02-03T08:45:30Z",
        "body": "Humm this kinda fixed it self when upgrading:\r\nts-loader, @types/node or sass-loader i think..\r\n\r\nSome strange dependencies here..\r\n\r\n"
      }
    ]
  },
  {
    "number": 12449,
    "title": "passing variables to imported js module",
    "created_at": "2021-01-19T09:20:30Z",
    "closed_at": "2021-01-19T09:31:14Z",
    "labels": [
      "question",
      "webpack-4",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12449",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nIt would be great if we can pass variables to the files that we import so we can do stuff before importing for example\r\n`import './modules1?color=blue';`\r\n\r\n**What is the motivation or use case for adding/changing the behavior?**\r\nI'm trying to import jquery UI widgets dynamically and as you may know, each widget could have its dependencies on other widgets so I should control this manually I was thinking of something like this.\r\n`import './jquery-ui/widgets=menu+tabs+autocomplete;`\r\nand in the jquery file, I'd have something like this\r\n`if(widgets.includes('autocomplete') || widgets.includes('menu'))`\r\n`import './widgets/menu';`\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12449/comments",
    "author": "Ibrahimrahhal",
    "comments": [
      {
        "user": "webpack-bot",
        "created_at": "2021-01-19T09:20:33Z",
        "body": "<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] webpack-4\n* [x] webpack-5\n* [ ] bug\n* [ ] critical-bug\n* [ ] enhancement\n* [ ] documentation\n* [ ] performance\n* [ ] dependencies\n* [x] question"
      },
      {
        "user": "sokra",
        "created_at": "2021-01-19T09:31:14Z",
        "body": "> import './modules1?color=blue';\r\n\r\nyes you can do that this way.\r\n\r\n```js\r\nconst query = import.meta.url.replace(/^.(\\?|$)/, \"\");\r\n```"
      }
    ]
  },
  {
    "number": 12447,
    "title": "Type 'HotModuleReplacementPlugin' is not assignable to type '((this: Compiler, compiler: Compiler) => void) | WebpackPluginInstance'.",
    "created_at": "2021-01-19T08:37:24Z",
    "closed_at": "2021-01-19T09:57:58Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12447",
    "body": "I saw this error after make `checkJs` in jsconfig enabled,\r\nthis is the code:\r\n```js\r\nplugins: [\r\n        new webpack.HotModuleReplacementPlugin()\r\n    ]\r\n```\r\n\r\nwebpack version : ^5.1.3",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12447/comments",
    "author": "HomyeeKing",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2021-01-19T09:32:56Z",
        "body": "I guess you mixed `@types/webpack` (webpack 4) and the types of `webpack` (webpack 5)"
      },
      {
        "user": "HomyeeKing",
        "created_at": "2021-01-19T09:57:58Z",
        "body": "maybe you are right , I don't trust the jsconfig's checkjs, it's  a js project , so the type is not that accurate"
      }
    ]
  },
  {
    "number": 12204,
    "title": "Getting \"n is not a function\" while loading federated component",
    "created_at": "2020-12-15T12:52:38Z",
    "closed_at": "2021-02-14T14:55:36Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12204",
    "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nI get error\r\n```\r\nTypeError: n is not a function\r\nwhile loading \"./App\" from 77301\r\n```\r\nwhen navigating federated component.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nHost app Module Federation config:\r\n```\r\nnew ModuleFederationPlugin({\r\n    name: 'morda',\r\n    library: { type: 'var', name: 'morda' },\r\n    filename: 'remoteEntry.js',\r\n    remotes: {\r\n      'locale-permissions-admin': 'locale_permissions_admin'\r\n    },\r\n    exposes: {\r\n      './Host': './index'\r\n    },\r\n    shared: {\r\n      react: {\r\n        singleton: true,\r\n      },\r\n      'react-dom': {\r\n         singleton: true,\r\n      }\r\n    }\r\n})\r\n```\r\n\r\nRemote app Module Federation config:\r\n```\r\nnew ModuleFederationPlugin({\r\n    name: 'locale-permissions-admin',\r\n    library: { type: 'var', name: 'locale_permissions_admin' },\r\n    filename: 'remoteEntry.js',\r\n    exposes: {\r\n      './App': '../src/components/App'\r\n    },\r\n    shared: {\r\n      react: {\r\n        singleton: true,\r\n      },\r\n      'react-dom': {\r\n         singleton: true,\r\n      },\r\n      …otherDeps\r\n    }\r\n})\r\n```\r\nThis worked for version 5.0.0-beta29, but after upgrading to 5.10.0 started to get error. After reading troubleshooting section of docs added host remoteEntry, but problem hasn’t solved\r\n\r\n**What is the expected behavior?**\r\nFederated component should be shown when navigating the route\r\n\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.10.0\r\nNode.js version: 12.6\r\nOperating System: MacOS 10.4.6\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12204/comments",
    "author": "alyaptsev",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2020-12-15T13:06:45Z",
        "body": "Something wrong with your code, I can't say what, because you don't provide more information"
      },
      {
        "user": "csvan",
        "created_at": "2020-12-15T13:40:34Z",
        "body": "@alyaptsev are you using the dev-server to serve your federated module?"
      },
      {
        "user": "alyaptsev",
        "created_at": "2020-12-15T14:12:36Z",
        "body": "Umm, what kind of additional information do you need?\r\n\r\nI'm including component via React.lazy\r\n```\r\nconst LocalePermissionsPage = React.lazy(() => import('locale-permissions-admin/App'))\r\n<Route\r\n  path=\"myPath\"\r\n  component={\r\n    <React.Suspense fallback=\"Loading...\">\r\n     <LocalePermissionsPage />\r\n    </React.Suspense>\r\n  }\r\n/>\r\n```\r\nLocalePermissionsPage is a full-featured React component with store, hooks and 3rd-parties\r\n\r\nI ensured that host remoteEntry.js and page remoteEntry.js loaded"
      },
      {
        "user": "alexander-akait",
        "created_at": "2020-12-15T14:16:46Z",
        "body": "Minimum - reproducible example, module federation is not simple and there are a lot of places where can a mistake be made (you can see your configuration is simple). Do you understand that after copying your code, I did not get an error? So I can't say what is wrong.\r\n\r\nAnd yes webpack-dev-server is not supported module federation yet"
      },
      {
        "user": "alyaptsev",
        "created_at": "2020-12-15T14:17:24Z",
        "body": "@csvan no, it's served as static files"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-02-08T17:33:15Z",
        "body": "@alyaptsev friendly ping"
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-02-14T14:55:36Z",
        "body": "Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!"
      },
      {
        "user": "tm-bonrepublic",
        "created_at": "2024-10-15T09:00:58Z",
        "body": "I experienced this issue with webpack 5. `webpackConfig.output.uniqueName` was missing in my case, defaulting to name from package.json, causing this runtime error in production build only. "
      }
    ]
  },
  {
    "number": 12089,
    "title": "Allow dynamic imports to be GC'd",
    "created_at": "2020-11-30T23:01:36Z",
    "closed_at": "2020-12-09T16:24:31Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12089",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nOne of the main motivations for code-splitting is to limit the amount of JS that a user needs to use in order to render an app.\r\n\r\nIn the context of a SPA, this means downloading only the code necessary to render the current page, and to then dynamically import additional chunks to render other pages to which the user navigates.\r\n\r\nCurrently, references to resolved dynamic imports seem to be preserved in a global variable, `webpackChunkapp`, preventing them from being GC'd.\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nWhen dynamically importing a module, do not save references to it in any global variables. Alternatively, if this is not possible, you could allow a method to \"unregister\" a module.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nTo allow the user's device to GC unused imports, releasing occupied JS heap space on large, code-split apps.\r\n\r\nProperly configured, hashed filenames and cache-control directives for assets can prevent unnecessarily re-downloading assets, but still allow devices to GC dynamic imports that aren't in use.\r\n\r\n**How should this be implemented in your opinion?**\r\nGlobal references to dynamically imported modules should be destroyed once the import is complete and subscribers to the success / error events have been called.\r\n\r\nIf this is a breaking change or off-spec for dynamic imports (I haven't looked into the spec in detail), I imagine this being an opt-in feature could potentially work.\r\n\r\n**Are you willing to work on this yourself?**\r\nThis feels like a very core change that I currently lack the context to complete, but if required I might be able.",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12089/comments",
    "author": "jnields",
    "comments": [
      {
        "user": "rjgotten",
        "created_at": "2020-12-09T14:59:54Z",
        "body": "> Global references to dynamically imported modules should be destroyed once the import is complete\r\n\r\nThat should imho be a hard disagree. That violates the semantics of both a CJS require _and_ a dynamic ES import, which both have import-once semantics. I.e. no matter when the module is requested, it will only be actually loaded _once_ and all resolves get handed the same module instance. Opt-in or not, it's a bad idea.\r\n\r\nBetter to encode _very_ situational behavior like this into a loader/plugin and let Webpack facilitate such a loader/plugin by offering the infrastructural tools to load/delete an existing module reference using e.g. vendor-specific `__webpack__*` prefixed variables or even hooks into formal code generation templates.\r\n\r\nCould maybe also expose it as a vendor extension onto `require` or `import` for _weak resolves_.\r\nE.g.\r\n\r\n```js\r\nconst other = require.weak(\"./other\");\r\n```\r\n```js\r\nconst other = await import.meta.weak( \"./other\" );\r\n```\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 11930,
    "title": "Webpack TypeScript types don't export 'Mode'",
    "created_at": "2020-11-05T09:35:13Z",
    "closed_at": "2020-11-05T10:44:53Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/11930",
    "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWriting Webpack v5 configuration methods cannot be typed correctly:\r\n\r\n```ts\r\nfunction vendors({ mode }: { mode: string }): Configuration {\r\n  return {\r\n    mode,    // Type 'string' is not assignable to type 'Mode'.ts(2322)\r\n    entry: {\r\n      vendor: [npmExportsFile],\r\n    },\r\n    output: {\r\n      filename: '[name].[contenthash:8].packages.js',\r\n      library: '[name]_packages',\r\n      path: OUTPUT_DIR,\r\n      publicPath: PUBLIC_PATH,\r\n    },\r\n    plugins: [\r\n      new webpack.DllPlugin({\r\n        name: '[name]',\r\n        path: path.join(OUTPUT_DIR, '[name].json'),\r\n      }),\r\n    ],\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nBecause `Mode` is not exported, it can't be used as the type in the above type signature instead of `string` here\r\n\r\n**Other relevant information:**\r\n\r\nwebpack version:  5.4.0\r\nNode.js version: 15.1.0\r\nOperating System: Linux x86_64\r\nAdditional tools: Typescript v4.0.5\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/11930/comments",
    "author": "anaisbetts",
    "comments": [
      {
        "user": "webpack-bot",
        "created_at": "2020-11-05T09:35:16Z",
        "body": "<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] webpack-4\n* [x] webpack-5\n* [ ] bug\n* [ ] critical-bug\n* [ ] enhancement\n* [ ] documentation\n* [ ] performance\n* [ ] dependencies\n* [x] question"
      },
      {
        "user": "sokra",
        "created_at": "2020-11-05T10:44:53Z",
        "body": "You don't need the type. Pass `\"development\"` or `\"production\"`. If you want to declare a type for it use: `{ mode: \"development\" | \"production\" }`"
      },
      {
        "user": "anaisbetts",
        "created_at": "2020-11-05T12:06:47Z",
        "body": "@sokra oof, duplicating the type seems really Gross, why would you not export it? Even in your reply you messed up the type, because it's `\"development\" | \"production\" | \"none\"`"
      },
      {
        "user": "alexander-akait",
        "created_at": "2020-11-05T12:11:03Z",
        "body": "You can get the `Mode` type using `Configuration[\"mode\"]`"
      }
    ]
  },
  {
    "number": 11816,
    "title": "Hooks to implement chunk retry on failed downloads",
    "created_at": "2020-10-25T18:06:30Z",
    "closed_at": "2020-10-29T10:52:43Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/11816",
    "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nBe able to intercept async load failures and retry by recreating the script tag with cache busted url\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nWe found that retrying the download with the use of cache busting params is very effective, and we could not find a way to utilize it correctly. existing plugins replace the jsonp loading code which is not possible with version 5, causing the need to duplicate the logic and patch it to use the duplicated code instead of the original\r\n\r\n**How should this be implemented in your opinion?**\r\nEither expose a way to be able to add search params for the purpose of cache busing in user land. or add a hook to augment the `loadingEnded` function in jsonp runtime\r\n\r\n**Are you willing to work on this yourself?**\r\nyes, with guidance from a contributer  \r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/11816/comments",
    "author": "salzhrani",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2020-10-26T08:46:42Z",
        "body": "Try something like this:\r\n\r\n``` js\r\nconst old = __webpack_get_script_filename__;\r\nconst queryMap = new Map();\r\n__webpack_get_script_filename__ = (chunkId) => {\r\n  const filename = old(chunkId);\r\n  return filename + (queryMap.get(chunkId) || \"\");\r\n};\r\n\r\nconst old2 = __webpack_chunk_load__;\r\n__webpack_chunk_load__ = (chunkId) => {\r\n  const result = old2(chunkId);\r\n  return result.catch(err => {\r\n    queryMap.set(chunkId, \"?\" + Math.random());\r\n    // you may add automatic retry here\r\n    throw err;\r\n  });\r\n}\r\n```\r\n\r\nNote that query should be constant when no error occurs to not break prefetching, etc. which also use the filename"
      },
      {
        "user": "salzhrani",
        "created_at": "2020-10-29T10:52:43Z",
        "body": "Thank you for your assistance "
      }
    ]
  },
  {
    "number": 7211,
    "title": "what does the file 'webpack.web.js' in the lib folder for?",
    "created_at": "2018-05-06T11:59:25Z",
    "closed_at": "2018-05-06T18:56:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/7211",
    "body": "In the package.json, I find a this mapping '\"web\": \"lib/webpack.web.js\"', but i have not found anyone else use this file, so i want to the the usage scenarios of that file. Thank you all! ",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/7211/comments",
    "author": "webfrontzhifei",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2018-05-06T18:56:41Z",
        "body": "For run webpack in browser, also please don't remove issue template in future."
      },
      {
        "user": "webfrontzhifei",
        "created_at": "2018-05-07T03:05:08Z",
        "body": "thank you"
      },
      {
        "user": "SeifESlimene",
        "created_at": "2023-12-01T03:07:59Z",
        "body": "> For run webpack in browser,\r\n\r\n@alexander-akait What does it mean \"For run webpack in browser\"?\r\nHow this field \"web\" is called from?\r\nI wanna know the code or tool that use it\r\n\r\nI don't find anything on the web about a package.json field called \"web\", this is enigmatic for me now."
      }
    ]
  },
  {
    "number": 3376,
    "title": "Webpack and electron",
    "created_at": "2016-11-25T07:19:15Z",
    "closed_at": "2017-03-18T09:56:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/3376",
    "body": "Hi,\r\n\r\nI have been developing an electron application, but been using a lot the browser during development.\r\nI have 2 webpack configs, one for electron (with the appropriate target) and a second one for the web build.\r\n\r\nThe problem I came across is that when I import any electron modules, the web build fails with an error\r\n\r\n```\r\nERROR in ./~/electron/index.js\r\nModule not found: Error: Cannot resolve module 'fs'\r\n```\r\n\r\nI know it is electron related, because when I comment out the import everything works\r\nI tried wrapping the imports in a if statement checking an environment variable, but this did not work either\r\n\r\nAnyway, to make this work?\r\n\r\nRegards\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3376/comments",
    "author": "bellostom",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-11-25T11:14:57Z",
        "body": "You can't use `fs` in the web. If you building for the electron renderer use the electron renderer target."
      },
      {
        "user": "bellostom",
        "created_at": "2016-11-25T11:21:59Z",
        "body": "Hi\r\nI am not using fs in the web. Electron must be, but since webpack sees an electron import it tries to load/include? the module, causing the error\r\nAs I said, I have 2 configs. The electron one does use the electron renderer\r\n\r\nMy question is how can I maintain the same codebase, even with conditional imports, without the web build failing\r\n\r\nThanks"
      },
      {
        "user": "iamstarkov",
        "created_at": "2016-12-15T16:42:40Z",
        "body": "@bellostom can you show us you configs? or even electon/web app?"
      },
      {
        "user": "bellostom",
        "created_at": "2016-12-19T07:00:34Z",
        "body": "Hi there\r\n\r\nBelow are the 2 configs\r\nLet me mention that in the mean time, I found a workaround by using the DefinePlugin and setting an environment variable, which I found out that it actually removes any code wrapped in an if statement and evaluates to false, at build time.\r\nNot ideal, but does the job right now\r\nHowever, if you believe there is a more straight forward solution, I would be glad to hear it\r\nRegards\r\n\r\nWEB config\r\n\r\n\r\n`\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst autoprefixer = require('autoprefixer');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\n\r\nconst output = ('dist');\r\n\r\nmodule.exports = {\r\n    context: __dirname,\r\n    devtool: 'source-map',\r\n    entry: {\r\n        main: './app/main.js',\r\n        vendor: ['react', 'react-dom']\r\n    },\r\n    watchOptions: {\r\n        poll: 2000\r\n    },\r\n    output: {\r\n      // path: './dist',\r\n      path: path.join(__dirname, 'dist'),\r\n      filename: '/[name]-bundle.js',\r\n    },\r\n    resolve: {\r\n        extensions: ['', '.scss', '.js', '.json'],\r\n        packageMains: ['browser', 'web', 'browserify', 'main', 'style'],\r\n        modulesDirectories: [\r\n            'node_modules',\r\n            path.resolve(__dirname, './node_modules'),\r\n        ],\r\n        root: [\r\n            path.resolve('./app'),\r\n        ],\r\n    },\r\n  module: {\r\n    loaders: [\r\n      {\r\n          test: /\\.(js)$/,\r\n          exclude: /(node_modules)/,\r\n          loader: 'babel',\r\n          query: {\r\n              presets: ['es2015', 'stage-0', 'stage-1', 'react'],\r\n              plugins: ['transform-decorators-legacy', 'transform-class-properties']\r\n          }\r\n      },\r\n        {\r\n            test: /\\.(scss)$/,\r\n            loader: ExtractTextPlugin.extract('style', 'css!resolve-url?sourceMap!postcss!sass')\r\n        },\r\n        {\r\n            test: /\\.(eot|svg|ttf|woff|woff2)$/,\r\n            loader: 'file?name=fonts/[name].[ext]'\r\n        },\r\n        {\r\n            test: /\\.(png)$/,\r\n            loader: 'url-loader?limit=8192&name=/images/[name].[ext]'\r\n        }\r\n    ]\r\n  },\r\n    postcss: [autoprefixer],\r\n    sassLoader: {\r\n        includePaths: [\r\n            './node_modules',\r\n        ]\r\n    },\r\n\r\n\r\n  devServer: {\r\n      port: 8089,\r\n      contentBase: path.join(__dirname, 'dist'),\r\n      outputPath: path.join(__dirname, 'dist')\r\n  },\r\n  plugins: [\r\n      new ExtractTextPlugin('/[name].css', { allChunks: false }),\r\n      new webpack.optimize.OccurenceOrderPlugin(),\r\n      new webpack.HotModuleReplacementPlugin(),\r\n      new webpack.NoErrorsPlugin(),\r\n      new HtmlWebpackPlugin({\r\n          template: __dirname + '/dist/tpl/index.tpl.html',\r\n          filename: 'index.html',\r\n          inject: 'body'\r\n      }),\r\n      new webpack.DefinePlugin({\r\n          'process.env':{\r\n              'NODE_ENV': JSON.stringify('development'),\r\n              'CHANNEL': JSON.stringify('web')\r\n          }\r\n      })\r\n  ]\r\n};\r\n`\r\n\r\nELECTRON CONFIG\r\n\r\n`\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst autoprefixer = require('autoprefixer');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nconst webpackTargetElectronRenderer = require('webpack-target-electron-renderer');\r\n\r\nconst output = ('Public/');\r\n\r\nlet options = {\r\n    context: __dirname,\r\n    devtool: 'source-map',\r\n    entry: {\r\n        main: './app/main.js',\r\n        vendor: ['react', 'react-dom']\r\n    },\r\n    output: {\r\n        path: path.join(__dirname, output),\r\n        filename: 'static/build/js/[name]-bundle.js',\r\n    },\r\n    resolve: {\r\n        extensions: ['', '.scss', '.js', '.json'],\r\n        packageMains: ['browser', 'web', 'browserify', 'main', 'style'],\r\n        modulesDirectories: [\r\n            'node_modules',\r\n            path.resolve(__dirname, './node_modules'),\r\n        ],\r\n        root: [\r\n            path.resolve(__dirname, 'app'),\r\n        ],\r\n    },\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.js$/,\r\n                exclude: /(node_modules)/,\r\n                loader: 'babel',\r\n                query: {\r\n                    presets: ['es2015', 'stage-0', 'stage-1', 'react'],\r\n                    plugins: ['transform-decorators-legacy', 'transform-class-properties']\r\n                }\r\n            },\r\n            {\r\n                test: /\\.scss$/,\r\n                loader: ExtractTextPlugin.extract('style', 'css!resolve-url?sourceMap!postcss!sass')\r\n            },\r\n            {\r\n                test: /\\.svg$/,\r\n                loader: 'url?limit=65000&mimetype=image/svg+xml&name=static/build/fonts/[name].[ext]'\r\n            },\r\n            {\r\n                test: /\\.woff$/,\r\n                loader: 'url?limit=65000&mimetype=application/font-woff&name=static/build/fonts/[name].[ext]'\r\n            },\r\n            {\r\n                test: /\\.woff2$/,\r\n                loader: 'url?limit=65000&mimetype=application/font-woff2&name=static/build/fonts/[name].[ext]'\r\n            },\r\n            {\r\n                test: /\\.[ot]tf$/,\r\n                loader: 'url?limit=65000&mimetype=application/octet-stream&name=static/build/fonts/[name].[ext]'\r\n            },\r\n            {\r\n                test: /\\.eot$/,\r\n                loader: 'url?limit=65000&mimetype=application/vnd.ms-fontobject&name=static/build/fonts/[name].[ext]'\r\n            },\r\n            {\r\n                test:   /\\.(png|jpg)$/,\r\n                loader: 'url?limit=8192&name=static/build/images/[name].[ext]'\r\n            },\r\n            {\r\n                test: /\\.json$/,\r\n                loader: 'json'\r\n            }\r\n        ]\r\n    },\r\n    postcss: [autoprefixer],\r\n    sassLoader: {\r\n        includePaths: [\r\n            './node_modules',\r\n        ]\r\n    },\r\n\r\n    plugins: [\r\n        new ExtractTextPlugin('static/build/css/[name].css', { allChunks: false }),\r\n        new webpack.optimize.OccurenceOrderPlugin(),\r\n        new webpack.NoErrorsPlugin(),\r\n        new HtmlWebpackPlugin({\r\n            template: __dirname + '/dist/tpl/index.tpl.html',\r\n            filename: 'index.html',\r\n            inject: 'body'\r\n        }),\r\n        new webpack.DefinePlugin({\r\n            'process.env':{\r\n                'NODE_ENV': JSON.stringify('development'),\r\n                'CHANNEL': JSON.stringify('electron'),\r\n            }\r\n        })\r\n    ]\r\n};\r\noptions.target = webpackTargetElectronRenderer(options);\r\nmodule.exports = options;\r\n`"
      },
      {
        "user": "bebraw",
        "created_at": "2017-03-18T09:56:53Z",
        "body": "I'm closing this since you found a workaround. Please try Stack Overflow for more ideas."
      }
    ]
  },
  {
    "number": 3157,
    "title": "Loading a library chunk used by multiple async chunks in parallel",
    "created_at": "2016-10-17T10:09:49Z",
    "closed_at": "2017-08-26T12:01:58Z",
    "labels": [
      "question",
      "X3: discussion required",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/3157",
    "body": "**I'm submitting a feature request**\n\n**Webpack version:**\n1.10.x\n\n**Expected/desired behavior:**\nI have two pages (P1 and P2), loading two different SPA's. Both use the same library. A user may or may not load both pages, so for caching purposes I'd like to load the chunk for P1 in parallel with a separate chunk (L) containing the library, then if/when the user goes to P2,  L is cached and only the P1 chunk needs to be loaded.\n\nI do not know what page I am on (P1 or P2) before executing Javascript (meaning I cannot add L as a scripttag from a normal commons chunk (I might actually be on P3 and not need L at all)).\n\nSo:\n- I visit P1, P1 chunk and L are loaded in parallel (and executed when both are loaded).\n- I visit P2, P2 chunk is loaded, L is already in cache.\n\nI am unsure if this is possible right now, and if it is, I have not seen it described anywhere.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3157/comments",
    "author": "hkrutzer",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-10-18T10:51:36Z",
        "body": "CommonsChunkPlugin in async mode\n"
      },
      {
        "user": "hkrutzer",
        "created_at": "2016-10-20T12:05:42Z",
        "body": "I want to explicitly configure which modules are inserted into the commons chunk, is that possible with CommonsChunkPlugin?\n\nAlso: this was probably not clear, but P1 and P2 are not (and cannot be) entry chunks.\n\nEdit: I tried this:\n\n``` javascript\n  new webpack.optimize.CommonsChunkPlugin(\"init.js\"),\n  new webpack.optimize.CommonsChunkPlugin({\n    name: \"react\",\n    filename: \"vendor.js\",\n    minChunks: Infinity,\n    async: true,\n  }),\n\n```\n\nwith\n\n```\n  entry: {\n    footer: './inline_footer.js',\n    header: './inline_head.js',\n    react: ['react', 'react-dom'],\n  },\n```\n\nwhich didn't work.\n"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:31:56Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:01:58Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 3140,
    "title": "CSS in Root Folder of JavaScript not found",
    "created_at": "2016-10-14T16:53:18Z",
    "closed_at": "2017-08-26T12:31:59Z",
    "labels": [
      "question",
      "X2: answer required",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/3140",
    "body": "My Project structure is like this (simplified)\n\n```\n-- app\n    -- app.ts\n    -- vendor.ts\n\n-- styles\n   -- theme\n       -- style.css\n```\n\nnow I want to include the style.css in the app.\nso in **vendor.ts** I got\n\n`import '../styles/theme/style.css'`\n\nBut I get\n\n> ERROR in ./app/vendor.ts\n> Module not found: Error: Cannot resolve 'file' or 'directory' ../styles/theme/style.css in D:\\dev\\pluto_v2\\src\\Hosts\\Pluto.Host.Core.Web\\app\n>  @ ./app/vendor.ts 9:0-36\n\nYou can see the webpack config below\n\n```\nvar webpack = require('webpack');\nvar commonsChunkPlugin = new webpack.optimize.CommonsChunkPlugin({\n    name: ['app', 'vendor', 'polyfills']\n});\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n    entry: {\n        app: './app/app.ts',\n        polyfills: './app/polyfills.ts',\n        vendor: './app/vendor.ts'\n    },\n    output: {\n        filename: './wwwroot/scripts/[name].js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts','.css']\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.ts$/,\n                loader: 'awesome-typescript-loader',\n                include: /app/\n            },\n              {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n            },\n        ],\n    },\n    plugins: [\n        commonsChunkPlugin, new ExtractTextPlugin(\"[name].css\")\n    ]\n};\n```\n\nWhat am I missing?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3140/comments",
    "author": "BoasE",
    "comments": [
      {
        "user": "jzzj",
        "created_at": "2016-12-06T08:31:11Z",
        "body": "Um, it seems nothing wrong to me, but you can try alias see if that work:\r\n```js\r\nresolve: {\r\n    extensions: ['', '.js', '.jsx'],\r\n    alias: {\r\n        \"@styles\": path.join(__dirname, \"styles\")\r\n    }\r\n}\r\n```\r\nin app.ts:\r\n```js\r\nimport '@styles/theme/style.css'\r\n```"
      },
      {
        "user": "SpaceK33z",
        "created_at": "2016-12-28T13:02:20Z",
        "body": "@Gentlehag, did the above fix your issue?"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T10:01:56Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:31:59Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 3072,
    "title": "Require.ensure + Require.context to have multiple dynamic loaded chunks",
    "created_at": "2016-09-27T23:19:33Z",
    "closed_at": "2017-01-20T18:41:22Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3072",
    "body": "I was wondering if something like the following is possible.\n\nGiven the data structure:\n- docs\n  - doc1.json\n  - doc2.json\n\nAnd the following code:\n\n``` js\nfunction loadDoc(name, cb) {\n    require.ensure([], function (require) {\n        cb(require(\"./docs/\" + name));\n    });\n} \n```\n\nIf I understand the current behaviour would be that doc1.json and doc2.json both end up in one chunk together (one external JS file that will be loaded dynamic). But is there any way to change the code so that doc1.json and doc2.json get there individual bundle without having to hardcode for each file a require.ensure?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3072/comments",
    "author": "fkrauthan",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-29T02:37:29Z",
        "body": "System.import in webpack 2 will have the expected semantic. `System.import(\"./docs/\" + name)`\n"
      },
      {
        "user": "fkrauthan",
        "created_at": "2016-09-29T04:36:22Z",
        "body": "Unfortunately webpack2 will not work for me as I need the ability of (custom) named chunks which is currently not possible with webpack2\n"
      },
      {
        "user": "fkrauthan",
        "created_at": "2016-11-02T17:54:46Z",
        "body": "Any news on this? It seems like based on @sokra answer that it is not possible at all with webpack1 and with webpack2 it would work like that but I would not be able to name my chunks (and in some cases merge chunks with the same name). So both webpack versions wouldn't really work for me...\n"
      },
      {
        "user": "jharris4",
        "created_at": "2017-01-20T15:57:10Z",
        "body": "FYI, this seems like the same issue: #3364 "
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-20T18:41:22Z",
        "body": "Closing as a duplicate."
      },
      {
        "user": "fkrauthan",
        "created_at": "2017-01-20T18:42:16Z",
        "body": "Why do you close the original ticket as duplicate and not the newer one?"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-20T18:43:31Z",
        "body": "That thread is more complete, but I can reverse the decision if you insist."
      },
      {
        "user": "fkrauthan",
        "created_at": "2017-01-20T18:44:28Z",
        "body": "No it's ok. I was just curious. I really love webpack. It helped me a lot. Thank you for all the work."
      }
    ]
  },
  {
    "number": 3071,
    "title": "Exclude JSON Files",
    "created_at": "2016-09-27T20:51:34Z",
    "closed_at": "2016-12-24T07:58:41Z",
    "labels": [
      "question",
      "X3: discussion required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3071",
    "body": "Im using the json-loader to load in son to my module.\nThat works fine but it bundles the json with the output file and instead, i want web pack to not bundle the json file so anyone can update it without having to rebuild the code.\nAny ideas - with example please.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3071/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mnpenner",
        "created_at": "2016-09-27T21:48:13Z",
        "body": "How do you propose this work?\n\nIf your target is Node, you can `fs.readFile` and `JSON.decode` the file.\n\nIf it's for the browser, just load your data with `jQuery.ajax` (or your favorite AJAX lib).\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-09-29T02:38:47Z",
        "body": "For target node externals could also be used.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T07:58:41Z",
        "body": "Closing as solutions were presented."
      },
      {
        "user": "pimboden",
        "created_at": "2017-02-03T08:54:02Z",
        "body": "What is the solution then?"
      },
      {
        "user": "bebraw",
        "created_at": "2017-02-03T08:56:11Z",
        "body": "@pimboden Going through `externals`, you have to mark the JSON files to exclude like that. Please re-open at Stack Overflow for more ideas as the issue tracker isn't used for support anymore."
      }
    ]
  },
  {
    "number": 3067,
    "title": "Split asynchronous loaded chunks using a regular expression",
    "created_at": "2016-09-26T20:39:19Z",
    "closed_at": "2016-09-29T02:55:11Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3067",
    "body": "Consider i have the following directory tree in my application:\n\n```\n - app.js\n - locale/\n  - es/\n    - module1/\n       - form1.json\n       - form2.json\n    - module2/\n       - form3.json\n       - form4.json\n  - en/\n    - module1/\n       - form1.json\n       - form2.json\n    - module2/\n       - form3.json\n       - form4.json\n```\n\nAnd app.js has this content:\n\n```\n/* ... */\nfunction loadLazyModule (moduleName)\n{\n    require.ensure ([], function ()\n    {\n        var lang = /* Browser language */;      \n        var forms = ['form1', 'form2'] /* Get dynamically the array of forms? */\n\n        for (var i = 0; i < forms.length; i++)\n        {\n            var translations = require (\n                'locale/'+ lang +'/'+ moduleName +'/'+ form[i] +'.json');\n            registerTranslations (translations);\n        }\n    });\n}\n/* ... */\n```\n\nI need a main chunk with the core of my app, but i need to split every language translations of every module in diferent chunks and load them only when requested from the user. Im already using the json-loader for json files and the 'split-by-name-webpack-plugin' but it doesn't works with dynamic loading (require.ensure).\n\nThe output should be as follows:\n- myApp.js\n- locale.module1.es.js\n- locale.module2.es.js\n- locale.module1.en.js\n- locale.module2.en.js\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3067/comments",
    "author": "juan-ferrer-toribio",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-29T02:55:11Z",
        "body": "Possible in webpack 2 with System.import\n"
      },
      {
        "user": "jharris4",
        "created_at": "2017-01-20T16:00:58Z",
        "body": "FYI, this seems like the same issue: #3364"
      },
      {
        "user": "juan-ferrer-toribio",
        "created_at": "2017-01-29T00:19:20Z",
        "body": "I've tried webpack 2.2.0 with System.import but it puts every json file in its own bundle.\r\n\r\nThere is any way to tell webpack (via config) to group json files in a specific bundles using a unique dynamic import? Ej:\r\n\r\n```\r\nfunction loadFormLocale (module, form, callback)\r\n{\r\n\tvar lang = navigator.languages[0].substr (0, 2);\r\n\tvar url = 'locale/'+ lang +'/'+ module +'/'+ form +'.json';\r\n\t\r\n\tSystem.import (url).then (function(translations)\r\n\t{\r\n\t\taddTranslation (translations[i]);\r\n\t\tcallback ();\r\n\t});\r\n}\r\n```\r\nWich should result in the following bundles:\r\n\r\n- locale.module1.es.js <- es/module1/form1.json, es/module1/form2.json\r\n- locale.module2.es.js <- es/module2/form1.json, es/module2/form2.json\r\n- locale.module1.en.js <- en/module1/form1.json, en/module1/form2.json\r\n- locale.module2.en.js <- en/module2/form1.json, en/module2/form2.json\r\n "
      },
      {
        "user": "zhenyong",
        "created_at": "2017-03-29T09:41:31Z",
        "body": "@juan-ferrer-toribio \r\n\r\nThere is no option to make it sense. What you can do is to write code split every place like\r\n\r\n```\r\nrequire.ensure([], function(require)) {\r\n    require('locale.module1.es.js')\r\n    require('es/module1/form1.json')\r\n...\r\n}\r\n\r\nrequire.ensure([], function(require)) {\r\n    require('locale.module2.es.js')\r\n    require('es/module1/form2.json')\r\n...\r\n}\r\n```\r\n\r\n\r\nIf you think it's clumsy with duplicate codes. You can make your owner webpack loader to generate codes. "
      }
    ]
  },
  {
    "number": 3059,
    "title": "add the google map script to angular-cli scripts array does not work",
    "created_at": "2016-09-23T17:29:57Z",
    "closed_at": "2016-09-24T20:41:14Z",
    "labels": [
      "question",
      "S4: Broken",
      "X3: discussion required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3059",
    "body": "1. OS?  Windows 7, 8 or 10. Linux (which distribution). Mac OSX (Yosemite? El Capitan?)\n   Windows 10 x64\n2. Versions. Please run `ng --version`. If there's nothing outputted, please run\n   in a Terminal: `node --version` and paste the result here:\n   angular-cli: 1.0.0-beta.15\n   node: 6.5.0\n   os: win32 x64\n3. Repro steps. Was this an app that wasn't created using the CLI? What change did you\n   do on your code? \n   In our application before switching to the CLI and webpack, we were able to add this script in our index.html like this.\n   \n   <script src=\"//maps.googleapis.com/maps/api/js?v=3.exp&libraries=places\"></script>\n\nI added the same script to the the angular-cli.json scripts like this:\n \"scripts\": [\n                \"//maps.googleapis.com/maps/api/js?v=3.exp&libraries=places\"\n            ],\nbut that does not work, any ideas?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3059/comments",
    "author": "daBishMan",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-09-24T16:48:55Z",
        "body": "Can you try asking at angular-cli? This feels like an upstream issue. I'm not sure if there's much we can do about it in the core.\n"
      }
    ]
  },
  {
    "number": 3021,
    "title": "inside the loader: get the chunk(s) file belongs too.",
    "created_at": "2016-09-20T08:11:25Z",
    "closed_at": "2017-08-11T09:24:54Z",
    "labels": [
      "question",
      "X2: answer required",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/3021",
    "body": "**Webpack version:**\n2.x\n\nThis is a question on webpack internals that I don not expect to get the answer on SO, so I write it here.\n\nI'm making a loader that has a following need: to get to which chunk(s) do this module belong to?\n\nSimple case:\n\n1) A System.import(B) (dynamic import, so B will be in separate chunk)\n2) B import C (normal import)\n3) C import D (normal import)\n\nSay `D` is loading using my loader, I need to figure out that it belongs not to whole A chunk, but to B chunk.\n\nI think about passing though `this._module.reasons` (recursively) and checking each reason for `dependency.block` value to get when parent modules that where dynamically imported using `System.import` or `require.ensure`, but maybe there more proper and reliable way to accomplish this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3021/comments",
    "author": "wclr",
    "comments": [
      {
        "user": "wclr",
        "created_at": "2016-09-21T22:01:07Z",
        "body": "@sokra could you elaborate on this?\n"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:21:55Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      }
    ]
  },
  {
    "number": 3010,
    "title": "Can't load SASS and CSS",
    "created_at": "2016-09-19T08:37:07Z",
    "closed_at": "2016-12-24T13:51:32Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3010",
    "body": "Hi all!\nI can not using \"ExtractTextPlugin\" for css and sass\n\nI set \n`webpack.config.js`\n\n```\n       {\n          test: /\\.sass$/,\n          loaders: ExtractTextPlugin.extract(['style', 'css!sass'])\n        },\n        {\n          test: /\\.css$/,\n          loaders: ExtractTextPlugin.extract({ fallbackLoader:'style', loader: 'css' })\n        }\n```\n\nand \n`app.component.ts`\n\n```\nstyles: [\n        require('../../bower_components/animate.css/animate.min.css').toString(),\n        require('../../bower_components/k-flex/dist/css/k-flex.css').toString(),\n        require('../../bower_components/font-awesome/css/font-awesome.min.css').toString(),\n        require('../styles/main.sass').toString()\n    ]\n```\n\nand i run it still error \nUncaught Error: Expected 'styles' to be an array of strings. zone.js:129\n\nHelp me, thank so much \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3010/comments",
    "author": "baonguyenyam",
    "comments": [
      {
        "user": "tomgeorge",
        "created_at": "2016-09-22T00:03:01Z",
        "body": "This works for me:\n\nIn webpack.config.js\n\n```\n     // all scss outside of src/ will be bundled in an external css file\n      {\n        test: /\\.scss$/,\n        exclude: root('src'),\n        loader: isTest ? 'null' : ExtractTextPlugin.extract({fallbackLoader: 'style', loader: 'css?sourceMap!postcss!sass'})\n      },\n      // all scss required in src/app files will be merged in js files\n      {\n        test: /\\.scss$/,\n        include: root('src'),\n        loaders: ['raw-loader', 'sass-loader']\n      },\n```\n\nand in my app.component.ts file \n\n```\n@Component({\n  selector: 'app-root',\n  template: require('./app.component.html'),\n  styles: [require('./app.scss')],\n  encapsulation: ViewEncapsulation.None,\n})\n```\n\nThe `ViewEncapsulation` isn't necessary.  I use it for a global look and feel in my app.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T13:51:32Z",
        "body": "Please re-open at Stack Overflow. Thanks."
      }
    ]
  },
  {
    "number": 3000,
    "title": "Is there a bug using $router Provider from AngularJS Component Router?",
    "created_at": "2016-09-16T06:13:04Z",
    "closed_at": "2016-09-18T07:58:55Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/3000",
    "body": "I am trying to get my Angular/Webpack/ocLazyLoad app to work. My app code looks like this:\n\n``` js\n     var app = angular.module('app', ['oc.lazyLoad', 'ngComponentRouter']);\n     app.config(function ($locationProvider) {\n      $locationProvider.html5Mode(true);\n       });\n\n           app.value('$routerRootComponent', 'app');\n\n             app.component('app', {\n              template: [\n             '<a ng-link=\"[\\'Home\\']\">Home</a> |',\n                '<a ng-link=\"[\\'Heroes\\']\">Heroes</a> |',\n             '<a ng-link=\"[\\'CrisisCenter\\']\">Crisis Center</a>',\n               '<hr>',\n              '<ng-outlet></ng-outlet>',\n\n             ].join('\\n'),\n\n              controller: ['$router', '$ocLazyLoad', function($router, $ocLazyLoad) {\n\n              $router.config([\n               {path: '/', name: 'Home', component: 'home', usaAsDefault: true},\n\n                //Heroes Route\n    {\n        path: '/heroes/...',\n        name: 'Heroes',\n        loader: function () {\n            // lazy load Heroes\n            /*return $ocLazyLoad.load([require('heroes.module')])\n                .then(function () {\n                    return 'heroes';\n                });*/\n        }\n    },\n\n    //Crisis Center Route\n    {\n        path: '/crisis-center/...',\n        name: 'CrisisCenter',\n        loader: function () {\n            // lazy load CrisisCenter\n            /*return $ocLazyLoad.load([require('')])\n                .then(function () {\n                    return 'crisisCenter';\n                });*/\n        }\n\n    }\n\n       ]);\n     }]\n\n    });\n```\n\nI injected all dependencies etc, it debugs also to the $router, but I get an unkown provider error. \nWhen I delete all Webpack related code, it works. \nIf I change the version of webpack, I get a changed Errormessage: Component \"Root\" has no route config.\nSince it works without webpack, I have a suspicion it could have to do with webpack?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/3000/comments",
    "author": "liasrose",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-18T07:58:55Z",
        "body": "Please ask on StackOverflow.\n"
      }
    ]
  },
  {
    "number": 2987,
    "title": "Require and parse webpack bundles",
    "created_at": "2016-09-12T21:23:06Z",
    "closed_at": "2016-09-18T22:52:54Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/2987",
    "body": "**I'm submitting a feature request**\n\nI have several internal libraries which I want to bundle separately. Some of them are 5/6 years old. Now, let's imagine I have a main product which includes those libraries (already bundled). \n\nI tried to do so, but when the libraries are bundled the require statements are transformed to something like __webpack_require(n) which results in this: 't.exports = image.hash.gif'. \n\nWhen compiling the main product (which requires those bundles), webpack does not parse/resolve the 't.exports = image.hash.gif' and therefore, those assets are not consider for the main product bundle. The only solution I see is to transform the assets of the libraries to base64 so that they end up embedded in the code.\n\nImo, webpack should be capable of parsing those **webpack__require** and spit another bundle without ignoring the assets referenced on libraries. \n\nAre you aware of this? Are you planning to support this? Any workaround for now?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2987/comments",
    "author": "pvieira91",
    "comments": [
      {
        "user": "pvieira91",
        "created_at": "2016-09-15T17:35:50Z",
        "body": "Sorry for insisting, does anyone have an (quick) answer for this?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-09-18T08:08:37Z",
        "body": "You need to require the unbundled version of your library.\n\ni. e. with `resolve.alias = { lib: \"lib/src/index\" }`\n"
      },
      {
        "user": "pvieira91",
        "created_at": "2016-09-18T21:46:17Z",
        "body": "Thanks @sokra \nThat seems the most reasonable thing to do. I tried that approach and in fact it was the best option for us. However, it's important to mention that it comes with trade-offs. For example, as we use typescript and babel, we must enforce the same configuration for the main project and library. This might sound ok but when you have libraries 5 years older than the main app it becomes cumbersome. More over, the building time increases considerably. \nI know that webpack is this amazing tool that can perfom several optmizations and requiring libraries which are already bundled kinda beats the purpose but it would be really helpful. \n\nthank you\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-09-18T22:52:54Z",
        "body": "I know... I have currently no good solution for this. But I know the problem and hope to find a solution in long-term.\n"
      }
    ]
  },
  {
    "number": 2962,
    "title": "How to use `webpack` `require.include`?",
    "created_at": "2016-09-06T01:49:32Z",
    "closed_at": "2016-09-06T07:13:31Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/2962",
    "body": "After read the `webpack` doc about `require.include`, I still don't understand what does it mean. I write a demo, get the bundle file like this:\n\n``` js\nundefined/*! require.include ./a.js */;\n__webpack_require__(/*! ./b.js */ 2);\n```\n\nAs you can see, `require.include('./a.js')` do not execute the `__webpack_require__` function, `require('./b.js')` execute the `__webpack_require__` function. What's the `require.include` meaning ? How to use it in real world? Thanks for answer!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2962/comments",
    "author": "mrdulin",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-06T07:13:31Z",
        "body": "It includes the module in the bundle/chunk, but don't execute it.\n"
      },
      {
        "user": "mrdulin",
        "created_at": "2016-09-06T09:07:03Z",
        "body": "@sokra If it does not execute, how do I use it ?\n"
      }
    ]
  },
  {
    "number": 2948,
    "title": "There is a error of  '$ is not a function', when I package jquery-1.9.1.min.js",
    "created_at": "2016-09-03T02:14:24Z",
    "closed_at": "2016-09-05T14:58:29Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/2948",
    "body": "I package jquery-2.2.4.min.js, everthing is well, but when I use jquery-1.9.1.min.js, there is a error in browser console\n\n> Uncaught TypeError: $ is not a function\n\nwebpack.config.js:\n\n```\n\nplugins: [\n  new webpack.ProvidePlugin({\n     $: 'jquery',\n     jQuery: 'jquery'\n  })\n],\n\nalias: {\n    \"jquery\": path.join(__dirname, \"src/js/lib/jquery-1.9.1.min.js\")\n}\n```\n\nIs there any way to solve it?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2948/comments",
    "author": "treadpit",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-05T14:58:29Z",
        "body": "Use stackoverflow\n"
      }
    ]
  },
  {
    "number": 2946,
    "title": "I think webpack cli `--no-color` option is useless, does it?",
    "created_at": "2016-09-02T05:52:31Z",
    "closed_at": "2016-09-02T06:30:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2946",
    "body": "I really don't know why are you add this `cli` option. \nwhat case will use this option?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2946/comments",
    "author": "mrdulin",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-09-02T06:30:52Z",
        "body": "webpack uses `supports-color` to detect whether or not a terminal supports colors. There are times when you might want to disable colors explicitly, hence the option.\n"
      }
    ]
  },
  {
    "number": 2940,
    "title": "Uncaught ReferenceError: webpackJsonp is not defined",
    "created_at": "2016-08-31T17:43:24Z",
    "closed_at": "2016-09-03T08:11:56Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/2940",
    "body": "Hi,\n\nI know this is might seem to be redundant but I tried all possible solutions with no luck.\n\nHere is my webpack.config.js file:\n\n``` javascript\nvar webpack = require('webpack');\nvar path = require('path');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry:{\n        'polyfills': './app/polyfills.ts',\n        'vendor': ['./app/vendor.ts', 'lodash'],\n        'app': './app/main.ts' // our angular app\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: \"[name].js\",\n        sourceMapFilename: '[name].map',\n        chunkFilename: '[id].chunk.js',\n        pathinfo: true\n    },\n    externals: checkNodeImport,\n    resolve: {\n        root: [ path.join(__dirname, 'app') ],\n        extensions: ['', '.ts', '.js', '.json'],\n        modulesDirectories: ['node_modules']\n    },\n    module: {\n      loaders: [\n        // TypeScript\n        { test: /\\.ts$/, loaders: ['ts-loader', 'angular2-template-loader'] },\n        { test: /\\.html$/, loader: 'html-loader' },\n        { test: /\\.css$/, loader: 'raw-loader' },\n        { test: /\\.json$/, loader: 'raw-loader' }\n      ]\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            name: ['app', 'vendor', 'polyfills']\n        }),\n        new HtmlWebpackPlugin({\n            template: 'app/index.html'\n        })\n    ],\n    node: {\n        global: 'window',\n        crypto: 'empty',\n        process: true,\n        module: false,\n        clearImmediate: false,\n        setImmediate: false\n  },\n};\n\n// Helpers\nfunction checkNodeImport(context, request, cb) {\n  if (!path.isAbsolute(request) && request.charAt(0) !== '.') {\n    cb(null, 'commonjs ' + request); return;\n  }\n  cb();\n}\n```\n\nThis is my tsconfig.json file:\n\n``` json\n{\n  \"compilerOptions\": {\n    \"declaration\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es6\", \"dom\"],\n    \"mapRoot\": \"./\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"../dist/out-tsc\",\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"../node_modules/@types\"\n    ]\n  }\n}\n```\n\nWhen I run webpack command line, I always get \"Uncaught ReferenceError: webpackJsonp is not defined\"\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2940/comments",
    "author": "JihadMotii-REISys",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-31T18:34:13Z",
        "body": "Can you try changing `name: ['app', 'vendor', 'polyfills']` to `name: ['app', 'vendor', 'polyfills', 'manifest']`? Just a hunch.\n\nBy the way, Stack Overflow would fit these kind of questions better.\n"
      },
      {
        "user": "JihadMotii-REISys",
        "created_at": "2016-08-31T18:36:42Z",
        "body": "Thanks @bebraw but, it didn't fix it\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-31T18:38:05Z",
        "body": "Hard to say more than that without seeing the project itself. Stack Overflow is a better bet if you can provide enough info.\n"
      }
    ]
  },
  {
    "number": 2914,
    "title": "How to make webpack run eslint task on file save?",
    "created_at": "2016-08-25T07:42:50Z",
    "closed_at": "2016-10-31T11:33:59Z",
    "labels": [
      "question",
      "X2: answer required"
    ],
    "url": "https://github.com/webpack/webpack/issues/2914",
    "body": "I'm trying to implement webpack into my ReactJS project. Here is my webpack.config.js file:\n\n> module.exports = {\n>   entry: \"./src/js/main.js\",\n>   output: {\n>     path: \"./dist\",\n>     filename: \"bundle.js\",\n>     publicPath: \"/\"\n>   },\n>   devServer: {\n>     inline: true,\n>     contentBase: \"./dist\"\n>   },\n>   module: {\n>     preLoaders: [\n>       {\n>         test: /.js$/,\n>         exclude: /(node_modules|bower_components)/,\n>         loader: \"eslint-loader\"\n>       }\n>     ],\n>     loaders: [\n>       {\n>         test: /.jsx?$/,\n>         exclude: /(node_modules|bower_components)/,\n>         loader: \"babel\",\n>         query: {\n>           presets: [\"es2015\", \"react\"]\n>         }\n>       }\n>     ]\n>   },\n>   eslint: {\n>     plugins: [\"react\"],\n>     parserOptions: {\n>       ecmaVersion: 6,\n>       sourceType: \"module\",\n>       ecmaFeatures: {\n>         \"jsx\": true\n>       }\n>     },\n>     env: {\n>       es6: true,\n>       browser: true\n>     },\n>     rules: {\n>       quotes: 0\n>     }\n>   }\n> };\n\nNow, on save, my browser reloads, which is a nice built-in feature of Webpack. But I can't make it run the ESLint tests upon save as well.\n\nAlso - I'm planning to implement some unit testing and less-to-css compilation, also happening on file save. That's why I decided to see how such things are done, and to try such automatic feature with ESLint ... but still no success.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2914/comments",
    "author": "peshoicov",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-31T04:05:40Z",
        "body": "`test: /.js$/,` doesn't capture your jsx files so perhaps that's it?\n"
      },
      {
        "user": "SpaceK33z",
        "created_at": "2016-10-09T17:49:09Z",
        "body": "ping @peshoicov, see above\n"
      },
      {
        "user": "SpaceK33z",
        "created_at": "2016-10-31T11:33:59Z",
        "body": "I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n"
      }
    ]
  },
  {
    "number": 2907,
    "title": "can't support Object(es6)?",
    "created_at": "2016-08-23T04:58:53Z",
    "closed_at": "2016-08-23T06:14:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2907",
    "body": "I am use webpack2.1.0-beta.15,when run my code i get error:Object.entries() is not a function.\nbelow is babel config in webpack\n\n```\n{\n        test: /\\.js$/,\n        exclude: /(node_modules|backup)/,\n        loader: 'babel', // 'babel-loader' is also a legal name to reference\n        query: {\n          presets: ['es2015']\n        }\n      },\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2907/comments",
    "author": "keyiis",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-23T05:15:55Z",
        "body": "You need to `import 'babel-polyfill'` at the top of your entry point.\n"
      },
      {
        "user": "keyiis",
        "created_at": "2016-08-23T05:34:14Z",
        "body": "@Kovensky when added babel-polyfill,Object.entries() work well,but sequelizer can't work(No any error message),\nhas conflict between babel-polyfill and sequelizer? \n"
      },
      {
        "user": "keyiis",
        "created_at": "2016-08-23T06:02:04Z",
        "body": "i used core-js replace babel-polyfill,all work fine.\n"
      }
    ]
  },
  {
    "number": 2903,
    "title": "error using mime.load(path.join(__dirname, 'types/mime.types'));",
    "created_at": "2016-08-22T11:39:22Z",
    "closed_at": "2016-12-24T13:52:48Z",
    "labels": [
      "question",
      "X0: need more information"
    ],
    "url": "https://github.com/webpack/webpack/issues/2903",
    "body": "I noticed this pattern in a node module -\n\n`mime.load(path.join(__dirname, 'types/mime.types'));`\n\nIs there an easy fix I can recommend?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2903/comments",
    "author": "joshunger",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T15:56:50Z",
        "body": "Can you provide more information? Based on the code I would say it's trying to do something with the file system. It might be hard to get that working in the browser.\n"
      }
    ]
  },
  {
    "number": 2893,
    "title": "--watch changes in many files and folders",
    "created_at": "2016-08-20T13:44:05Z",
    "closed_at": "2016-08-21T11:02:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2893",
    "body": "Hello!\n\nwe have this webpack config for our project\n\n```\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: './bin',\n        filename: 'index.webpack.js'\n    },\n    devtool: 'eval',\n    watch: true,\n    module: {\n        loaders: [\n            { test: /\\.json$/, loader: 'json', },\n            { test: /\\.md$/, loader: \"html!markdown\" },\n            { test: /\\.js$/, loader: 'babel' }\n        ]\n    },\n};\n```\n\nas we can see --watch option webpack rebuild entry point (./src/index.js) well each time index.js changed. But this index.js requires many other .js files from ./model, ./app and other folders. My question is how we can configure webpack to watch changes **in all this folders**?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2893/comments",
    "author": "alexey2baranov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-08-21T11:02:10Z",
        "body": "It should do this automatically.\n"
      }
    ]
  },
  {
    "number": 2888,
    "title": "best editor / ide for viewing bundles",
    "created_at": "2016-08-18T22:22:02Z",
    "closed_at": "2016-08-19T02:55:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2888",
    "body": "What is the best editor / ide for viewing bundles?  WebStorm and Atom both choke.  \n\nbundle.js - 5.6M.\n\nAtom 4 - 7 second load time.\nWebStorm - still waiting for it to index... hah.\n\nAtom 4 - minimize and maximize - never returns.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2888/comments",
    "author": "joshunger",
    "comments": [
      {
        "user": "andreypopp",
        "created_at": "2016-08-18T22:37:03Z",
        "body": "vim\n"
      },
      {
        "user": "TheLarkInn",
        "created_at": "2016-08-19T01:02:00Z",
        "body": "That or simply webpack dev server in chrome. \n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-19T02:55:32Z",
        "body": "Yup. Either would work. Atom isn't great with big files.\n\nStack Overflow might work better for questions btw. :+1: \n"
      }
    ]
  },
  {
    "number": 2860,
    "title": "Can't extract css from async module",
    "created_at": "2016-08-11T12:31:28Z",
    "closed_at": "2016-08-11T17:52:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2860",
    "body": "**I'm submitting a bug report**\n\n**Webpack version:**\n1.13.1\n\n**Please tell us about your environment:**\ncentos 6.4 x86_64\n- **Language:** [all] \n\nI can't extract css from async module. I already give allChunks: true options for the extract-text-plugin instance, but I still don't work, please help me, thanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2860/comments",
    "author": "cage1618",
    "comments": [
      {
        "user": "cage1618",
        "created_at": "2016-08-11T13:14:25Z",
        "body": "I am so sorry, I have a mistake, the css extracted but have an error order, how can I resilve this issue?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-11T17:52:39Z",
        "body": "Could you re-open with more information at Stack Overflow as that has a better reach? Thanks. 👍 \n"
      }
    ]
  },
  {
    "number": 2851,
    "title": "what's the difference of \"style!css!./style.css\" and \"!style!css!./style.css\"?",
    "created_at": "2016-08-09T02:06:46Z",
    "closed_at": "2016-08-10T01:31:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2851",
    "body": "as question,\ncan't understand the character \"!\",any one can explain it ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2851/comments",
    "author": "zppro",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-09T08:37:18Z",
        "body": "If you set up your `loaders` correctly, you almost never need any `!` in any of your requires.\n\n`!` separates loaders. Note that, on the second string, you are passing the `./style.css` file to the `css` loader, then to `style` loader, then to the empty string loader, which will crash.\n"
      },
      {
        "user": "zppro",
        "created_at": "2016-08-10T01:31:15Z",
        "body": "> `./style.css file to the css loader, then to style loader, then to the empty string loader, which will crash.`\n> i test two of them ,they both run ok!\n> but make me see that `!` is separtator to the loader.\n"
      }
    ]
  },
  {
    "number": 2829,
    "title": "Why webpack generate unused code?",
    "created_at": "2016-08-02T06:10:06Z",
    "closed_at": "2016-08-13T03:42:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2829",
    "body": "I use webpack to pack vue project. Webpack version is `1.13.1`. After build, i find the chunk js include unused code like below\n\n``` js\n    if (false) {(function () {  module.hot.accept()\n      var hotAPI = require(\"vue-hot-reload-api\")\n      hotAPI.install(require(\"vue\"), false)\n      if (!hotAPI.compatible) return\n      var id = \"./welcome.vue\"\n      if (!module.hot.data) {\n        hotAPI.createRecord(id, module.exports)\n      } else {\n        hotAPI.update(id, module.exports, __vue_template__)\n      }\n    })()}\n```\n\nWho can tell me why?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2829/comments",
    "author": "tonyzheng121",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-02T08:28:47Z",
        "body": "It's unused because you're not using `webpack-dev-server` or `webpack-dev-middleware` with hot reloading enabled. If it was enabled, it'd become `if (true)` instead.\n\nIf you're not sure about what I mean, the point of it becoming obviously unused code is that the `UglifyJsPlugin` can completely delete the `if` when you are making a production build.\n"
      }
    ]
  },
  {
    "number": 2825,
    "title": "webpackJsonp is not defined ",
    "created_at": "2016-07-31T12:05:42Z",
    "closed_at": "2016-08-08T09:26:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2825",
    "body": "We are working on one large scale app, and one part of app is using the vuejs, but for some reasons, this vuejs part of app doesn't work and we got this error:\n\n> Uncaught ReferenceError: webpackJsonp is not defined\n\nOur webpack.config.js file looks like this\n\n```\nvar webpack = require('webpack'),\n    path    = require('path');\n\nmodule.exports = {\n  resolve: {\n    modulesDirectories: ['./node_modules', './resources/assets/scripts']\n  },\n\n  entry: {\n    // Commons and Libraries\n    common: ['jquery', './resources/assets/scripts/main.js'],\n\n    // Chunks per Page\n    home: './resources/assets/scripts/home.js',\n    blog: './resources/assets/scripts/blog.js',\n    about: './resources/assets/scripts/about.js',\n    contact: './resources/assets/scripts/contact.js',\n    shop: './resources/assets/scripts/shop.js', // This is VueJS chunk\n  },\n\n  output: {\n    path: path.join(__dirname, 'public/assets/js'),\n    filename: '[name].min.js'\n  },\n\n  devtool: \"source-map\",\n\n  module: {\n    loaders: [\n      {\n        test:     /\\.js$/,\n        loader:   'babel-loader',\n        query: {\n          presets: ['es2015']\n        }\n      },\n      {\n        test: /\\.vue$/,\n        loader: 'vue'\n      },\n      { test: /jquery\\.js$/, loader: 'expose?$' },\n      { test: /jquery\\.js$/, loader: 'expose?jQuery' },\n      {\n        test: /\\.(png|jpg)$/,\n        loader: 'url',\n        query: {\n            // limit for base64 inlining in bytes\n            limit: 10000,\n            // custom naming format if file is larger than\n            // the threshold\n            name: '[name].[ext]?[hash]'\n          },\n        },\n        {\n      // Use SVG File loader\n      test: /\\.svg$/,\n      loader: 'svg-url-loader'\n    }\n    ],\n  },\n\n  plugins: [\n    new webpack.ResolverPlugin(\n      new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin(\"package.json\", [\"main\"])\n    ),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'common',\n      minChunks: 2\n    }),\n\n    new webpack.optimize.UglifyJsPlugin({minimize: true, preserveComments: 'license'})\n  ]\n};\n\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2825/comments",
    "author": "bedakb",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-01T04:37:57Z",
        "body": "You have to include the `common` chunk before any other chunks, and it cannot be `async`. The `common` chunk defines `webpackJsonp`, that the other chunks will use to register themselves.\n"
      }
    ]
  },
  {
    "number": 2819,
    "title": "overwrite watch config from CLI",
    "created_at": "2016-07-29T20:42:41Z",
    "closed_at": "2016-08-01T08:19:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2819",
    "body": "I have a webpack.config.js with watch:true and I would like to overwrite that setting when I call \"webpack\" from the CLI in a certain environment. Is this possible? Like `webpack --watch=false` would be nice\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2819/comments",
    "author": "flyon",
    "comments": [
      {
        "user": "rafde",
        "created_at": "2016-08-01T05:56:28Z",
        "body": "why does it need to be in your config? why not use `--watch` through a separate script?\n"
      },
      {
        "user": "flyon",
        "created_at": "2016-08-01T06:25:12Z",
        "body": "Because we already have three scripts for dev/staging/deployment and I now\nwant to create nonminified bundles for staging and deployment too, so I was\nhoping to re-use the dev script for that, but it has watch:true for local\ndevelopment. Its totally possible to create another script, was just\nlooking for other options\n"
      },
      {
        "user": "rafde",
        "created_at": "2016-08-01T07:40:27Z",
        "body": "You could provide your own argument that is read in your dev config like --no-watch and process.argv.indexOf(\"--no-watch\") >= 0 that's read from inside the config file\n"
      },
      {
        "user": "flyon",
        "created_at": "2016-08-01T08:19:42Z",
        "body": "ah, that's how that works! thanks, thats perfect!\n"
      }
    ]
  },
  {
    "number": 2792,
    "title": "webpack-dev-server and HMR",
    "created_at": "2016-07-22T02:31:32Z",
    "closed_at": "2016-08-07T00:39:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2792",
    "body": "when I use webpack-dev-server and HMR,\nmy config.js:\n\n>    devServer:{\n>       historyApiFallback:true,\n>       hot:true,\n>       inline:true,\n>       progress:true,\n>     }\n> \n> plugins: [\n>         new webpack.HotModuleReplacementPlugin()\n>     ]\n\nI use **Command line mode,**such as \n\n> webpack-dev-server --inline --hot\n\n,when change ths less file,Command line tell me something has changed,but the page do not show the change,I want to know,which reason cause it;\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2792/comments",
    "author": "Thstone37",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-07-22T05:23:34Z",
        "body": "Please note that `webpack-dev-server --inline --hot` injects`new webpack.HotModuleReplacementPlugin()` so you probably have it twice in your configuration now.\n"
      },
      {
        "user": "Thstone37",
        "created_at": "2016-07-22T07:45:39Z",
        "body": "I figure out it the command line tell me,this change has exsit in memory,but the output js file doesn't change,when I add publicPath to the output options,It can work \n"
      },
      {
        "user": "joshwiens",
        "created_at": "2016-07-22T14:45:46Z",
        "body": "For reference, @bebraw is correct. You are currently duplicating HMR which could make for some funky debugging though I'd have to try and make that break to say what the ramifications are.\n"
      },
      {
        "user": "Thstone37",
        "created_at": "2016-07-23T12:24:54Z",
        "body": " @bebraw,when I add publicPath to the output options,It can work.\n"
      }
    ]
  },
  {
    "number": 2790,
    "title": "Import modules to different directory levels - There is another module with equal name",
    "created_at": "2016-07-21T10:20:23Z",
    "closed_at": "2016-09-01T19:38:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2790",
    "body": "I am importing same module to different files at different directory levels.\n\nfile1.js\n`import Mediator from '../../../Mediator/core.mediator';`\n\n.file2.js\n`import Mediator from '../../../../core/Mediator/core.mediator';`\n\nbut I get following error. How can I fix it?\n\n`WARNING in ./core/Mediator/core.mediator.js\nThere is another module with an equal name when case is ignored.\nThis can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\nRename module if multiple modules are expected or use equal casing if one module is expected.`\n\nNB: I modules have same name/casing only difference is relative path.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2790/comments",
    "author": "Shavindra",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-07-21T11:36:27Z",
        "body": "> casing only difference\n\nThat's not allowed, because there are filesystems with different casing semantics\n"
      },
      {
        "user": "Shavindra",
        "created_at": "2016-07-21T12:36:13Z",
        "body": "@sokra I understand that. but the problem is with the relative file path. NOT the casing. Unless webpack interpreting different file paths as different casings?\n\ne.g.\n\n`/core/Mediator/core.mediator` vs\n`/Mediator/core.mediator`\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-07-22T12:06:19Z",
        "body": "It compares the absolute paths of the modules.\n"
      },
      {
        "user": "Shavindra",
        "created_at": "2016-07-22T13:33:52Z",
        "body": "so this should work right?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-09-01T19:38:09Z",
        "body": "yep, webpack 2 give more detailed error message here\n"
      }
    ]
  },
  {
    "number": 2778,
    "title": "I am sure this has been reported, but I am stumped on this one",
    "created_at": "2016-07-16T20:10:24Z",
    "closed_at": "2016-09-08T11:14:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2778",
    "body": "Receive following error when running Webpack.  This has been working forever, but for some reason, it is now a problem\n\n```\nERROR in ./index.js\nModule build failed: Error: Final loader didn't return a Buffer or String\n    at DependenciesBlock.onModuleBuild (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:299:42)\n    at nextLoader (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:275:25)\n    at /Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at runSyncOrAsync (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:160:12)\n    at nextLoader (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:290:3)\n    at /Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at Object.context.callback (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object.module.exports (/Users/mikee/Documents/Projects/dev/angular/angular-sandbox/node_modules/babel-loader/index.js:89:8)\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2778/comments",
    "author": "mikeerickson",
    "comments": [
      {
        "user": "mikeerickson",
        "created_at": "2016-07-16T20:11:06Z",
        "body": "Followup with the ./index.js file\n\n```\n/**\n * index.js\n * Created: 5/10/2016 2:24 PM (merickson)\n * =============================================================================\n */\n\n// Initialize angular module and require any dependencies and global css (less)\nimport app  from './app.module'\nimport '!style!css!less!./app.less'\n\n// all components are constructors `component` suppress from filename\n// adopting React class filename convention\n// all components filename's are singular (ie `Compliment` vs `Compliments`)\n\nimport Complient from './components/compliments'\nimport User      from './components/users'\n\n```\n"
      },
      {
        "user": "mikeerickson",
        "created_at": "2016-07-16T20:22:00Z",
        "body": "And webpack.config.js\n\n```\n/**\n * webpack.config.js\n * Mike Erickson <codedungeon@gmail.com>\n * 2016.06.06 18:40 (mikee)\n * =============================================================================\n */\n\n\nvar path                = require('path')\nvar ProgressBarPlugin   = require('progress-bar-webpack-plugin')\nvar CopyWebpackPlugin   = require('copy-webpack-plugin');\nvar BuildNotifierPlugin = require('webpack-build-notifier')\nvar ESLintWebpackPlugin = require('eslint-loader')\nvar msg                 = require('gulp-messenger')\nvar webpack             = require('webpack')\n\nvar outputPath     = path.join(__dirname, '/dist')\nvar outputFilename = 'bundle.js'\nvar publicPath     = outputPath\n\nvar webpackConfig = {\n  context: __dirname + '/src',\n  devtool: 'eval', // source-map\n  entry:   './index.js',\n  output: {\n    path:       outputPath,\n    filename:   outputFilename,\n    publicPath: publicPath\n  },\n  // devServer: {\n  //   contentBase: outputPath,\n  //   hot: true\n  // },\n  module: {\n    preLoaders: [\n      {test: /\\.(less|css)$/, loader: 'stylelint' },\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ],\n    loaders: [\n      {test: /\\.js?$/, loaders: ['ng-annotate','babel'], exclude: /node_modules/},\n      {test: /\\.html?$/, loaders: ['raw']},\n      {test: /\\.less?$/, loaders: ['style!css!less?strictMath&noIeCompat']},\n      {\n        test: /\\.css$/,\n        loaders: [\n          'style',\n          'css?sourceMap&modules&localIdentName=[name]__[local]___[hash:base64:5]'\n        ]\n      },\n    ]\n  },\n  stylelint: {\n    configFile: path.join(__dirname, './.stylelintrc'),\n    configOverrides: {\n      rules: {\n        // Your rule overrides here\n      }\n    }\n  },\n  plugins: [\n\n    // Display notification when build completed\n    new BuildNotifierPlugin(),\n\n    // Removes duplicate modules from the build\n    new webpack.optimize.DedupePlugin(),\n\n    // Configure ProgressBar\n    new ProgressBarPlugin({\n      format: msg.chalk.yellow.bold('  Building [:bar] ') + msg.chalk.green.bold(':percent') + msg.chalk.bold(' (:elapsed seconds)'),\n      clear:   false,\n      summary: true\n    }),\n\n    // Copy assets not part of bundle\n    new CopyWebpackPlugin([\n      { from: './index.html', to: './index.html' },\n      { from: './fonts',      to: './fonts' },\n      { from: './css',        to: './css' },\n      { from: './data',       to: './data' },\n    ]),\n\n    // Compress build\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    }),\n\n  ]\n};\n\nmodule.exports = webpackConfig;\n\n```\n"
      },
      {
        "user": "ojacobson",
        "created_at": "2016-07-21T20:36:32Z",
        "body": "> `import '!style!css!less!./app.less'`\n\nTwo observations:\n1. The leading `!` in the module name shouldn't be there: the syntax is `'loader!module'`.\n2. As you have a section in `webpack.config.js` that sets up a loader chain for `.less` files, you don't need to specify the loaders when `import`ing Less stylesheets.\n\nI believe you should be able to replace this line with\n\n``` js\nimport './app.less'\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T00:41:21Z",
        "body": "@mikeerickson Did that help?\n"
      }
    ]
  },
  {
    "number": 2761,
    "title": "CSS file mix with LESS files into a single bundle gets ignored",
    "created_at": "2016-07-12T14:14:39Z",
    "closed_at": "2016-12-24T13:52:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2761",
    "body": "**I'm submitting a bug report**\n\n**Webpack version:**\n1.10.x/2.x\n\n**Please tell us about your environment:**\nOSX 10.10.x\n\n**Current behavior:**\nWhen generating a single bundle.css made when LESS and compiled CSS, the CSS files get ignored and not included into the bundle.css.\nAm using extractplugin to generated the bundle css, and css!less loaders to read the Less files and compile them.\n\n**Expected/desired behavior:**\nWebpack should grab all require files and included them into bundle.css, when it sees the CSS file it should be smart enough to know that no compiling is needed only aggregation.\n- **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem along with a gist/jsbin of your webpack configuration.** \n\ncreate a file and called it whatever. i.e. main.js with the following content:\n\nrequire('./css/bootstrap/bootstrap.less');\nrequire('./css/bootstrap-material/dist/bootstrap-material-design.css'); //this file gets ignore by webpack\nrequire('./css/bootstrap-material/ripples.less');\n\nCreate a a css folder and add bootstrap Less files.\nCreate webpack.config file that uses extractPlugin.\nCreate a index.html that loads bundle.css\n- **What is the expected behavior?**\n  webpack should read and pull content of each require line in main.js, if the file getting pulled happens to be a file with .css extension it should ignore the compiling but still include the file onto the bundle.\n- **What is the motivation / use case for changing the behavior?**\n  All CSS files, whether precompile or compiled should be included in output file. Error message or info message should also be provided in the terminal if for some reason a file gets excluded by webpack.\n- **Browser:** [Chrome XX  ] \n  Chrome xx\n- **Language:** [ ES5] \n  ES5\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2761/comments",
    "author": "jorgecas99",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-07-12T14:30:11Z",
        "body": "Have you applied the ExtractTextPlugin to the css loader too?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-13T03:45:12Z",
        "body": "@jorgecas99 Any update?\n"
      }
    ]
  },
  {
    "number": 2760,
    "title": "cannot load css on demand in one single entry",
    "created_at": "2016-07-12T02:16:46Z",
    "closed_at": "2017-07-19T10:19:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2760",
    "body": "for maintaining purpose, I have merged several entries into one single entry, and I am using `require.ensure([], function(require) {})` to include my js and css file on demand, which looks like:\n\n``` javascript\n// common.js\nif($('#is_a_page').length) {\n require.ensure(['a.js', 'a.css'], function(require) {\n      require('a.js');\n      require('a.css');\n    });\n}\nelse if($('#is_b_page').length) {\n require.ensure(['b.js', 'b.css'], function(require) {\n      require('b.js');\n      require('b.css');\n    });\n}\n\n\n// a.js\nalert('its page A');\n\n// b.js\nalert(\"its page B\");\n```\n\n``` css\n/*a.css*/\nbody{\n  backgroung: #fff;\n}\n\n/*b.css*/\nbody{\n  backgroung: #000!important;\n}\n```\n\nthen on both of page A and page B, I require the common.js and common.css\n\nnow, when I visit page A, it alerts \"its page A\" as expect, and \"its page B\" alerts on page B as well,\neverything is perfectly fine, HOWEVER, on both page A and page B, the body's background turns to #000, it seems \"require.ensure\" only works on separating JS file whereas there is no way to separate two css files. Is that correct? any suggestions?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2760/comments",
    "author": "edwardfxiao",
    "comments": [
      {
        "user": "ecmadao",
        "created_at": "2016-07-12T07:09:56Z",
        "body": "same problem here\n"
      },
      {
        "user": "Jessidhia",
        "created_at": "2016-07-12T08:01:18Z",
        "body": "Sounds like something ExtractTextWebpackPlugin would do\n"
      },
      {
        "user": "edwardfxiao",
        "created_at": "2016-07-12T08:16:35Z",
        "body": "@Kovensky \nthx!\n\n``` javascript\n new ExtractTextPlugin('[name]_bundle.css', {\n    allChunks: false\n  }),\n```\n\nsolved the load-all css problem\n\nbut once I set it to false, css turned inline in the head, which is not what I expected.\nAnd it seems like it wont load the css that was included inside JS file\n"
      },
      {
        "user": "sokra",
        "created_at": "2017-07-19T10:19:30Z",
        "body": "This is an old issue. I guess the problem was solved in the meantime. If not please open a new issue."
      }
    ]
  },
  {
    "number": 2759,
    "title": "Webpack 2.1.0-beta.15 -- Handling circular references",
    "created_at": "2016-07-12T00:50:57Z",
    "closed_at": "2016-07-13T06:49:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2759",
    "body": "```\n// a.js, the entry point\nimport b from './b'\nimport d from './d'\n\nconsole.log('b -- the circular reference', b) // prints\nconsole.log('d -- the non-circular reference', d)\n```\n\n```\n// b.js\nimport c from './c'\n\nexport default function () {\n  return c()\n}\n\nexport var doesntShow = 5\n```\n\n```\n// c.js\nimport b from './b'\n\nexport default function doesntShow() {\n  return b()\n}\n```\n\n```\n// d.js\nexport default {\n  foo: 5\n}\n```\n\nFirefox 46 on OS X El Capitan console prints\n\n> b -- the circular reference function exports.a()\n> d -- the non-circular reference Object { foo: 5 }\n\nWhen the circular reference of b and c is loaded up by **webpack_require**:\n\n```\n// The require function\nfunction __webpack_require__(moduleId) {\n\n    // Check if module is in cache\n    if(installedModules[moduleId])\n        return installedModules[moduleId].exports;\n\n    // Create a new module (and put it into the cache)\n    var module = installedModules[moduleId] = {\n        i: moduleId,\n        l: false,\n        exports: {}\n    };\n\n    // Execute the module function\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n    // Flag the module as loaded\n    module.l = true;\n\n    // Return the exports of the module\n    return module.exports;\n}\n```\n\nIt looks when b goes to require c, its exports are `{}`. When c pulls in b's exports from `installedModules[moduleId]`, they're `{}`. Is this the intended behavior?\n\n_Edit_: fixed export mix up, b should have been exporting `doesntShow` in addition to `default`.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2759/comments",
    "author": "wegry",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-07-12T07:58:27Z",
        "body": "Look at the actual parts that call `__webpack_require__`.\n\nThat's a consequence of `export default` -- unlike other exports, `export default` is not hoisted, is not a live binding, and it does not export an identifier, but an expression.\n\nImporting something that was exported with `export default` will take a _copy_ of the export. It's not defined yet, because of the circular dependency, so one of them is going to see `undefined`.\n\nIf you want to do a default export while keeping it a live binding, then you could do something like `function doesShow () {}; export { doesShow as default }`. Webpack generates getters in that case[^1], which will always DWIM. Unless you actually read/invoke them at the top level. Then it's up to the nasal demons.\n\n[^1]: something roughly equivalent to `exports = { get default () { return doesShow } }` and replacing `b()` with `importedB.default()`\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-07-13T06:49:43Z",
        "body": "The semantic of `export default` often confuse people...\n"
      }
    ]
  },
  {
    "number": 2749,
    "title": "cant use fs",
    "created_at": "2016-07-07T22:52:22Z",
    "closed_at": "2016-07-08T08:38:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2749",
    "body": "I can not use fs with this. Would it be possible to make webpack make/read files from cookies or a localStorage item?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2749/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "thattomperson",
        "created_at": "2016-07-08T06:49:54Z",
        "body": "I haven't tested this but you could probably use `memory-fs` in the browser\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-07-08T08:38:19Z",
        "body": "> Would it be possible to make webpack make/read files from cookies or a localStorage item?\n\nyes, but that makes no sense. The semantics are different.\n\nYou can still do this manually via `resolve.alias = { fs: \"your-browser-fs\" }`\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-07-08T14:39:40Z",
        "body": "Still have no clue about this, I will try to not use fs in my projects which may be hard but I'll do it.\n"
      }
    ]
  },
  {
    "number": 2744,
    "title": "problem running localhost:3000",
    "created_at": "2016-07-06T23:38:37Z",
    "closed_at": "2016-09-01T19:26:44Z",
    "labels": [
      "question",
      "X0: need more information"
    ],
    "url": "https://github.com/webpack/webpack/issues/2744",
    "body": "hello there. I got stuck at the final stage of environment creation. just when i typed browser-sync start --server --directory --files \"*\" it ran but error occured (event.js:141 throw er;) <--this was the error shown. please tell me how to rectify such error.\n\nI have version 4.4.7 of node.js and 3.10.3 version of npm installed in my windows pc.\n\nplease reply soon..\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2744/comments",
    "author": "Shashank7gits",
    "comments": [
      {
        "user": "andreicek",
        "created_at": "2016-07-12T10:03:22Z",
        "body": "Can you provide your `webpack.config.js`, and a full stack trace of the error?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-13T03:47:23Z",
        "body": "@Shashank7gits Did you figure it out?\n"
      }
    ]
  },
  {
    "number": 2737,
    "title": "Including mxClient into webpack. Correct way of exposing library's variables from import/require?",
    "created_at": "2016-07-05T15:52:55Z",
    "closed_at": "2016-08-28T07:55:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2737",
    "body": "Basically I'm trying to add mxClient to be imported through webpack.\nOut current webpack.dev.js looks like this: \n\n> module.exports = {\n>     entry: {\n>         app: './index.ts',\n>         vendor: [\n>             'angular', 'angular-ui-router', 'angular-ui-bootstrap', 'angular-sanitize',\n>             'bootstrap/dist/css/bootstrap.css',\n>             'ng-draggable',\n>             'ag-grid', 'ag-grid/dist/styles/ag-grid.css',\n>             'rx/dist/rx.lite.js',\n>             'angular-perfect-scrollbar-2',\n>             'tinymce'\n>             , 'mxClient'\n>         ]\n>     },\n>     output: {\n>         filename: 'app.js',\n>         path: 'dist/appName'\n>     },\n>     resolve: {\n>         root: __dirname,\n>         extensions: ['', '.ts', '.js', '.json'],\n>         alias: {\n>             tinymce: 'tinymce/tinymce'\n>             , mxClient: path.join(__dirname, '../libs/mxClient/js/mxClient.js')\n>         }\n>     }\n\nAnd my loader right now looks like this: \n`{\n        test: require.resolve(path.join(__dirname, '../libs/mxClient/js/mxClient.js')),\n        loaders: [\n            'imports?mxBasePath=>\"./appName/libs/mxClient\", mxLoadStylesheets=>false, mxLoadResources=>false',\n            'exports?MedianCellSorter,mxAbstractCanvas2D,mxActor,....'\n        ]\n    }`\nThere are like at least 60 more globals i'm trying to export from mxClient.\n\nSo my first question is that, is there a better way to load all of these without using a scripts loader?\n\nWe'd like to use the the import/require to import the module where necessary, but using the scripts loader will just load it as soon as the app is loaded.\n\nThe second problem is that with what i have above, I can only use the module when i do something like this: \n`let mxClientTest: any = require(\"mxClient\");`\nand access them through this variable. \nWhat would be the ideal case, is if I could just call `import \"mxClient\"` and it'll get added into the global context of my app, so i can just use the mx variables directly without going through a variable.\n\nAnyone know how I can achieve this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2737/comments",
    "author": "awong91",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:55:45Z",
        "body": "Can you re-open at Stack Overflow for a better response? Thanks.\n"
      }
    ]
  },
  {
    "number": 2721,
    "title": "Sourcemaps created also included @Angular2, rxjs, etc maps",
    "created_at": "2016-06-29T19:10:03Z",
    "closed_at": "2016-08-14T05:29:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2721",
    "body": "Hi All\n\nI am working in a @angular2 project so I am creating bundles for it and also sourcemaps but maps are huge for the app that I am creating so i think libs maps are also being included.\n\nany idea how to exclude everything from node_modules ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2721/comments",
    "author": "acostaf",
    "comments": [
      {
        "user": "AndreVarandas",
        "created_at": "2016-07-04T09:26:18Z",
        "body": "Hi @acostaf adding the exclude property in your config should work.\n\n```\n{\n        test: /\\.js$/,\n        loader: 'source-map-loader',\n        exclude: 'node_modules'\n}\n```\n"
      }
    ]
  },
  {
    "number": 2717,
    "title": "Cannot resolve module",
    "created_at": "2016-06-29T09:40:57Z",
    "closed_at": "2016-08-09T05:12:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2717",
    "body": "**I'm submitting a bug report**\n**Webpack version:**\n1.10.x/2.x\n**Please tell us about your environment:**\nOSX 10.x\n\nError:\nModule not found: Error: Cannot resolve module 'Home' in /Users/craigcosmo/Desktop/minigame/app\n\nSo this is my folder structure\n\n```\nproject\n   | app\n      | component\n         | Home.js\n         | Header.js\n      | sass\n         | home.scss\n      | index.js\n  | webpack.config.js\n```\n\nwepack config\n\n```\nvar path = require('path')\n\nmodule.exports = {\n    entry: \"./app/index.js\",\n    output: {\n        path: __dirname + '/public',\n        filename: \"bundle.js\",\n        publicPath: '/public/'\n    },\n    module: {\n        loaders : [\n            {\n                test: /\\.js$/, \n                exclude : /(node_modules|bower_components)/,\n                loader: \"babel-loader\", \n                query: {presets: ['react', 'es2015']}\n            },\n            {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") \n            },\n            {\n                test: /\\.scss$/,\n                loader: ExtractTextPlugin.extract(\"css-loader!sass-loader\")\n            },\n        ]\n    },\n    resolve: {\n        root: [\n            path.resolve('./app')\n        ]\n    }\n}\n```\n\nthis is how I import those module in Home.js\n\n```\nimport Header from 'header'\nimport 'home.scss'\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2717/comments",
    "author": "applemate",
    "comments": [
      {
        "user": "stevewillard",
        "created_at": "2016-06-29T15:02:58Z",
        "body": "In your webpack config I think you need to specify the full path\n\n```\npath.resolve(__dirname, 'app')\n```\n\nYou would need to modify your imports to\n\n```\nimport Header from 'components/Header'\nimport 'sass/home.scss'\n```\n\nOr could also just use relative paths\n\n```\nimport Header from './Header'\nimport '../sass/home.scss'\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:12:04Z",
        "body": "Closing given a solution was presented. Feel free to re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 2683,
    "title": "How to pass backend variable to Webpack module?",
    "created_at": "2016-06-23T15:17:01Z",
    "closed_at": "2016-06-23T20:56:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2683",
    "body": "I've tried to pack entry points into AMD libraries and include the following code on pages:\n\n``` javascript\n<script type=\"text/javascript\">\n;(function(){\n      var Entry = require('./entries/users/index');\n      var entry = new Entry({\n        ... // <--- PHP-generated parameters here\n      });\n})();\n</script>\n```\n\nBut browser says: `require is not defined`.\nOk. Maybe that approach is totally incorrect? How to handle the situations when I need to pass dynamicly created variables by my backend (PHP/Node/etc) to a module with webpack?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2683/comments",
    "author": "lexkrstn",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-06-23T20:56:18Z",
        "body": "With `output.library = \"Entry\"` you can do this:\n\n``` js\n<script src=\"bundle.js\"></script>\n<script>\nvar entry = new Entry({\n  ... // <--- PHP-generated parameters here\n});\n</script>\n```\n\n---\n\nFor security reasons I recommend to avoid inline scripts and read the PHP data from the bundle itself:\n\n``` js\n<script type=\"text/data\" id=\"server-data\">\n  ... // <--- PHP-generated parameters here\n</script>\n<script src=\"bundle.js\"></script>\n```\n"
      },
      {
        "user": "ryancwalsh",
        "created_at": "2017-03-19T20:17:21Z",
        "body": "@sokra Thank you so much for this hint! Today I'm trying to learn Webpack, and I'm seeing your comment almost a year after you wrote it. I've spent hours trying to figure out how bundle.js could read from `<script type=\"text/data\" id=\"server-data\">` as you indicated above. Would you be able to give another hint / point me in the right direction? I'd very much appreciate it. People recommend Webpack, so I'm very interested in getting this basic functionality working. \r\n\r\nActually, are you saying to do something like this? `<div id=\"someInvisibleDiv\" data-var1=\"here is a value\" data-var2=\"I could add a ton of attributes like this\"></div>`\r\n\r\nThen, bundle.js could look for `#someInvisibleDiv` after the doc loaded and read those attributes.\r\n\r\nWould that work? If not, or if using `<script type=\"text/data\" id=\"server-data\">` is superior, I'd love to know how to specify key-value pairs in there and how to access them from bundle.js.\r\n\r\nThanks!!"
      },
      {
        "user": "bartaz",
        "created_at": "2019-04-18T09:57:34Z",
        "body": "> For security reasons I recommend to avoid inline scripts\r\n\r\n@sokra What are the security concerns of using inline scripts to pass data?\r\n\r\nUsing something like:\r\n```html\r\n<script>\r\nentry.init({ params });\r\n</script>\r\n```\r\n\r\nseems much more explicit and controlled then:\r\n```html\r\n<script id=\"init-params\">{ params }</script>\r\n```\r\nand having this specific element found by id inside of bundled module, data parsed, etc.\r\n\r\nAre there any webpack docs that explain it in a bit more detail?"
      },
      {
        "user": "gds03",
        "created_at": "2021-01-12T15:52:52Z",
        "body": "Looking for the same... Searching on the web I can't find nothing as well!"
      },
      {
        "user": "gds03",
        "created_at": "2021-01-12T16:12:50Z",
        "body": "@sokra any update on this thread?"
      }
    ]
  },
  {
    "number": 2671,
    "title": "webpack electron sequelize error!",
    "created_at": "2016-06-20T15:13:39Z",
    "closed_at": "2016-08-09T05:13:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2671",
    "body": "when i add sequelize to my project then build fail.\nMy environment:\nnode 6.2.1\npart of package.json\n\n```\n  \"devDependencies\": {\n    \"compression-webpack-plugin\": \"^0.3.1\",\n    \"copy-webpack-plugin\": \"^3.0.1\",\n    \"css-loader\": \"^0.23.1\",\n    \"electron-packager\": \"latest\",\n    \"electron-prebuilt\": \"latest\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"file-loader\": \"^0.8.5\",\n    \"html-loader\": \"^0.4.3\",\n    \"html-webpack-plugin\": \"^2.16.1\",\n    \"json-loader\": \"^0.5.4\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"source-map-loader\": \"^0.1.5\",\n    \"style-loader\": \"^0.13.1\",\n    \"ts-loader\": \"^0.7.2\",\n    \"typescript\": \"^1.8.10\",\n    \"typings\": \"^1.1.0\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-server\": \"^1.14.1\",\n    \"webpack-merge\": \"^0.14.0\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.2\",\n    \"@angular/compiler\": \"2.0.0-rc.2\",\n    \"@angular/core\": \"2.0.0-rc.2\",\n    \"@angular/http\": \"2.0.0-rc.2\",\n    \"@angular/platform-browser\": \"2.0.0-rc.2\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.2\",\n    \"@angular/router\": \"2.0.0-rc.2\",\n    \"@angular/router-deprecated\": \"2.0.0-rc.2\",\n    \"@angular/upgrade\": \"2.0.0-rc.2\",\n    \"bootstrap\": \"^3.3.6\",\n    \"core-js\": \"^2.4.0\",\n    \"crypto\": \"0.0.3\",\n    \"es6-shim\": \"^0.35.1\",\n    \"reflect-metadata\": \"^0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"sequelize\": \"^3.23.3\",\n    \"sqlite3\": \"^3.1.4\",\n    \"zone.js\": \"^0.6.12\"\n  }\n```\n\n**my typescript code:**\n\n```\nimport Sequelize = require(\"sequelize\");\nlet sequelize = new Sequelize(\"test\", \"\", \"\", {\n                storage: \"./test.db\",\n                logging: true,\n                dialect: \"sqlite\"\n            });\n```\n\n**apart of webpack.config.js**\n\n```\nmodule.exports = {\n  entry: {\n    'polyfills': helpers.rootAngular('polyfills.ts'),\n    'vendor': helpers.rootAngular('vendor.ts'),\n    'app': helpers.rootAngular('app/main.ts')\n  },\n\n  resolve: {\n    extensions: ['', '.js', '.ts']\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.ts$/, loader: 'ts' },\n      { test: /\\.json$/, loader: 'json' },\n      { test: /\\.html$/, loader: 'html' },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'file?name=assets/[name].[hash].[ext]'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.rootAngular('app'),\n        loader: ExtractTextPlugin.extract('style', 'css?sourceMap')\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.rootAngular('app'),\n        loader: 'raw'\n      }\n    ]\n  },\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['app', 'vendor', 'polyfills']\n    }),\n\n    new HtmlWebpackPlugin({\n      template: helpers.rootAngular('index.html')\n    })\n  ]\n```\n\n**When i run webpack to build my app, below is error:**\n\n```\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/sequelize.js\nCritical dependencies:\n680:60-73 the request of a dependency is an expression\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/sequelize.js 680:60-73\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mssql/connection-manager.js\nCritical dependencies:\n18:15-71 the request of a dependency is an expression\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mssql/connection-manager.js 18:15-71\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mysql/connection-manager.js\nCritical dependencies:\n18:17-60 the request of a dependency is an expression\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mysql/connection-manager.js 18:17-60\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/connection-manager.js\nCritical dependencies:\n20:14-57 the request of a dependency is an expression\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/connection-manager.js 20:14-57\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/sqlite/connection-manager.js\nCritical dependencies:\n22:15-71 the request of a dependency is an expression\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/sqlite/connection-manager.js 22:15-71\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mysql/connection-manager.js\nModule not found: Error: Cannot resolve module 'mysql' in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\mysql\nresolve module mysql in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\mysql\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql doesn't exist (module as directory)\n    resolve 'file' mysql in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql.js doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql.ts doesn't exist\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql doesn't exist (module as directory)\n    resolve 'file' mysql in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql.js doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql.ts doesn't exist\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql.js]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\mysql.ts]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql.js]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\mysql.ts]\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/mysql/connection-manager.js 20:17-33\n\nWARNING in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/connection-manager.js\nModule not found: Error: Cannot resolve module 'pg' in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\postgres\nresolve module pg in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\postgres\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg doesn't exist (module as directory)\n    resolve 'file' pg in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg.ts doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg.js doesn't exist\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg doesn't exist (module as directory)\n    resolve 'file' pg in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg.js doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg.ts doesn't exist\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg.ts]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg.js]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg.js]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg.ts]\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/connection-manager.js 22:14-27\n\nERROR in D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/hstore.js\nModule not found: Error: Cannot resolve module 'pg-hstore' in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\postgres\nresolve module pg-hstore in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\lib\\dialects\\postgres\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore doesn't exist (module as directory)\n    resolve 'file' pg-hstore in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore.ts doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore.js doesn't exist\n  looking for modules in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n    D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore doesn't exist (module as directory)\n    resolve 'file' pg-hstore in D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\n      resolve file\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore.ts doesn't exist\n        D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore.js doesn't exist\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore.ts]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\sequelize\\node_modules\\pg-hstore.js]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore.ts]\n[D:\\work\\nodejs\\angular\\angular2-electron\\node_modules\\pg-hstore.js]\n @ D:/work/nodejs/angular/angular2-electron/~/sequelize/lib/dialects/postgres/hstore.js 3:13-33\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2671/comments",
    "author": "keyiis",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:13:34Z",
        "body": "Could you re-open at Stack Overflow as that works better for support? Thanks.\n"
      },
      {
        "user": "christianmalek",
        "created_at": "2016-10-01T22:08:49Z",
        "body": "Did he/she find a solution for this? I have the same problem.\n"
      }
    ]
  },
  {
    "number": 2663,
    "title": "Webpack can't support some devided css property",
    "created_at": "2016-06-18T11:24:22Z",
    "closed_at": "2016-08-09T05:17:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2663",
    "body": "Like this，I want the border's color and width is divided in bottom and top of selector, Because I need box model property and paint property is devided in box model property place and paint property place, but webpack can not correct to build 'border'(Sorry, the built code is lose, It's in online)\n\n>  position: relative;\n>   float: left;\n>   width: 100px;\n>   padding-bottom: 10px;\n>   border-style: solid;\n>   border-width: 0;\n>   border-right-width: 1px;\n>   border-bottom-width: 1px;\n>   margin-bottom: 0;\n>   border-color: #dee5ec;\n>   cursor: pointer;\n\nI have to do like this, I don't like\n\n> position: relative;\n>   float: left;\n>   width: 100px;\n>   padding-bottom: 10px;\n>   border: 0 solid #dee5ec;\n>   border-width: 0 1px 1px 0;\n>   margin-bottom: 0;\n>   cursor: pointer;\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2663/comments",
    "author": "dudy5",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:17:11Z",
        "body": "Can you re-open at Stack Overflow with more details? That works better for support as then your question is likely to get noticed better.\n"
      }
    ]
  },
  {
    "number": 2658,
    "title": "descriptionFiles  resolve only package.json webpack - 2",
    "created_at": "2016-06-16T11:21:07Z",
    "closed_at": "2016-06-16T12:56:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2658",
    "body": "i have \n\n``` js\nmodule.exports = {\n    entry: {index: \"./index.js\"},\n    context: __dirname,\n    output: {\n        filename: \"dist/[name].js\"\n    },\n    resolve: {\n        modules: [\n            \"bower_components\",\n            path.resolve('./'),\n        ],\n    },\n    descriptionFiles: [\"bower.json\"],\n    mainFields: [\"main\"],\n    devServer: {\n        host: \"localhost\",\n        port: 3001,\n    }\n};\n```\n\nand this configuration not resolve files from main field in  bower.json.\nBut if using `descriptionFiles: [\"package.json\"]`, it is work.\ninfo:\n webpack 2.1.0-beta.13\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2658/comments",
    "author": "arshtepe",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-06-16T12:56:48Z",
        "body": "Please use StackOverflow for questions.\n\ndescriptionFiles and mainFields should be children of resolve.\n"
      }
    ]
  },
  {
    "number": 2624,
    "title": "webpack   angular ui-router  package   error ,is this a bug?",
    "created_at": "2016-06-09T06:58:29Z",
    "closed_at": "2016-06-13T03:39:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2624",
    "body": "angular code the router \n\n``` javascript\n$stateProvider.state('fileZone.privateSpace', {\n        url: '/privateSpace',\n        controller: \"PrivateSpaceCtrl\",\n// here , ref this page once\n        template : require(\"../templates/import/fileList.html\")\n\n    }).state('fileZone.groupfiles',\n        {\n            url: '/groupFiles/:groupId',\n            params: {group: null},\n            controller: 'GroupFileCtrl',\n//   here,  again   ref  this page\n            template: require(\"../templates/import/fileList.html\")\n\n        }\n    ).state('fileZone.groupMembers',\n        {\n            url: '/groupMembers',\n            params: {group: null},\n            controller: 'GroupMembersCtrl',\n            //templateUrl: 'fileZone.group.members.html'\n            template: require(\"../templates/fileZone.group.members.html\")\n        }\n    )\n```\n\nwebpack config\n\n``` javascript\n/**\n * Created by yang on 2016/4/4.\n */\n\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar path = require('path');\nvar node_modules_dir = path.join(__dirname, 'node_modules');\n\nmodule.exports = {\n    entry: {\n        home: './app/home/main.js',\n        admin: './app/admin/main.js',\n        login: './app/login/main.js',\n        links: './app/links/main.js',\n        views: './app/views/main.js'\n    },\n    output: {\n        path: '../_/',\n        filename: 'app/[name].js'\n    },\n    resolve: {\n        extensions: ['', '.js'],\n        alias: {\n            \"photoswipe.js\": path.resolve(__dirname, 'libs/vender/photoswipe/photoswipe.js'),\n            \"photoswipe-ui-default.js\": path.resolve(__dirname, 'libs/vender/photoswipe/photoswipe-ui-default.js'),\n\n        }\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js$/,\n                loader: 'ng-annotate!babel',\n                //query: {\n                //    presets: ['es2015']\n                //},\n                exclude: /node_modules/\n            },\n            //{\n            //    test: /\\.less/,\n            //    loader: 'style!css!less'\n            //},\n            {\n                test: /\\.less/,\n                loader: ExtractTextPlugin.extract('style', 'css!less')\n            },\n            //{\n            //    test: /\\.css$/,\n            //    loader: 'style!css'\n            //},\n            {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract('style', 'css')\n            },\n            {\n                test: /\\.(png|jpg|jpeg|gif)/,\n                loader: 'url?limit=2500&name=img/[name]_[hash:8].[ext]'\n            },\n            {\n                test: /\\.(svg|woff|woff2|ttf|eot|swf)/,\n                loader: 'file?name=font/[name]_[hash:8].[ext]'\n            },\n            {\n                test: /\\.html$/,\n                loader: 'html'\n            },\n\n        ]\n    },\n    plugins: [\n        //new webpack.optimize.DedupePlugin(),\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'commons',\n            chunks: ['login', 'home', 'admin', 'links', 'views'],\n            minChunks: 2\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'login.html',\n            template: 'pages/login.html',\n            inject: 'body',\n            chunks: ['login']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'home.html',\n            template: 'pages/home.html',\n            inject: 'body',\n            chunks: ['home']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'admin.html',\n            template: 'pages/admin.html',\n            inject: 'body',\n            chunks: ['admin']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'links.html',\n            template: 'pages/links.html',\n            inject: 'body',\n            chunks: ['links']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'views.html',\n            template: 'pages/views.html',\n            inject: 'body',\n            chunks: ['views']\n        }),\n        new ExtractTextPlugin('[name].css'),\n        new webpack.optimize.UglifyJsPlugin()\n    ]\n};\n```\n\nthe error is :\n\n`Cannot find module \"../templates/import/fileList.html\"`\n\nif  remove  \n\n```\n  new webpack.optimize.UglifyJsPlugin()\n\n```\n\ncan run ok! \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2624/comments",
    "author": "jiuyuehe",
    "comments": [
      {
        "user": "adamdicarlo",
        "created_at": "2016-06-11T02:43:49Z",
        "body": "I don't think this has anything to do with `angular-ui-router`, does it -- the `require()` statement that is failing just happens to be where you're declaring your routes, right?\n"
      },
      {
        "user": "jiuyuehe",
        "created_at": "2016-06-13T00:53:47Z",
        "body": "Yes， I found.   the reason is use  ng-class=｛xxx:xxxx｝,  lost  `''`.  please close @adamdicarlo  @bebraw \n"
      }
    ]
  },
  {
    "number": 2615,
    "title": "Sourcemapped code is truncated in Chrome Developer Tools",
    "created_at": "2016-06-07T04:09:38Z",
    "closed_at": "2016-12-31T13:31:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2615",
    "body": "All the source files found inside webpack:// in Chrome developer tools are missing a large portion of code and they all end with a similar comment line `WEBPACK FOOTER`. I'm trying to debug React and a npm module that I'm working on. I'm unable to evaluate code/set breakpoints because of this. Any clue? I tried uninstalling Chrome, deleting Profile data (Mac OS)\nex:\n\n``````\nmodule.exports = {\n  areSame: function (values) {\n    var isUniq = false;\n    for (var i = 0, l = values.length; i < l; i++) {\n      var next = values[i+1];\n      var curr = values[i];\n      if (next) {\n        isUniq = next === curr;\n      }\n    }\n    return isUniq;\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/SomeComponent.js\n ** module id = 623\n ** module chunks = 0\n **/```\n``````\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2615/comments",
    "author": "praveenaj",
    "comments": [
      {
        "user": "rafde",
        "created_at": "2016-08-01T06:10:18Z",
        "body": "I think this is resolved and can be closed. I haven't found any issues, and I have a common chunk file that is 5mb in size.\n"
      }
    ]
  },
  {
    "number": 2613,
    "title": "Visual Studio Debugging DataTips",
    "created_at": "2016-06-07T01:43:54Z",
    "closed_at": "2016-08-08T08:53:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2613",
    "body": "After many hours, I have got debugging working with Visual Studio and Typescript, but datatips do not work. The reason for this is that Visual Studio thinks that the source is not the true source so is in \"dynamic mode\". Because of this many debugging capabilities are lost.  But for some odd reason webpack appends *\\* WEBPACK FOOTER *\\* to the source map. I hacked the source map by hand and removed this and it all worked perfectly. Why is this footer there? is it necessary? Is it possible to switch off?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2613/comments",
    "author": "liamcarter111",
    "comments": [
      {
        "user": "liamcarter111",
        "created_at": "2016-06-09T13:44:39Z",
        "body": "Temporary hack to get it working is to add `output: {\n  devtoolModuleFilenameTemplate: \"file://[absolute-resource-path]\",\n  devtoolFallbackModuleFilenameTemplate: \"file://[absolute-resource-path]?[hash]\",\n}` to webpack.config.js\n\nThen add fixSourceMap.js to project \n\n```\n// REMOVE WEBPACK FOOTER FROM SOURCE MAP AS VS DEBUGGING DOESNT LIKE IT\n\nconst sourceMapFile = process.argv[2];\n\nvar fs = require('fs');\n\nfunction readLines(input, func) {\n    var remaining = '';\n\n    input.on('data', function (data) {\n        remaining += data;\n    });\n\n    input.on('end', function () {\n        if (remaining.length > 0) {\n            func(remaining);\n        }\n    });\n}\n\nfunction func(data) {\n    data = data.replace(/\\\\n\\\\n\\\\n\\/\\*\\* WEBPACK FOOTER \\**\\\\n \\*\\* (.*?)\\\\n \\*\\*\\//g, \"\");\n\n    fs.writeFile(sourceMapFile, data, function (err) {\n        if (err) {\n            return console.log(err);\n        }\n\n        console.log(\"The file was saved!\");\n    });\n}\n\nvar input = fs.createReadStream(sourceMapFile);\nreadLines(input, func);\n```\n\nThen Run `node ./fixSourceMap.js ./Build/bundle.js.map` after webpack\n\nThe main issue is that VS debugging features are limited when not debugging the true source.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-08T08:53:47Z",
        "body": "Can you re-open at Stack Overflow? I hope you get a good response there. Thanks.\n"
      },
      {
        "user": "acostaf",
        "created_at": "2016-09-30T10:24:01Z",
        "body": "Hi Guys\n\nAt this time I am using \"typescript\": \"2.0.3\" and \"webpack\": \"2.1.0-beta.24\" \n\nI found a fix for this, so in order to stop the whole ... // WEBPACK FOOTER // // ./~/tslint-loader! .... which breaks Visual studio 2015 debugging, you have to set noSources: true for your SourceMapDevToolPlugin\n\n```\nplugins: [\n    ....\n    new webpack.SourceMapDevToolPlugin({\n        filename: '[file].map', noSources: true,\n        include: ['commonBundle.js', 'adminBundle.js', 'tradeReportingBundle.js']\n    })\n    ....\n]\n```\n"
      },
      {
        "user": "raaad",
        "created_at": "2017-04-07T16:33:35Z",
        "body": "I've been able to solve this datatips-problem by some little hijacking:\r\n\r\n```\r\nvar webpack = require('webpack');\r\nwebpack.ModuleFilenameHelpers.createFooter = function () { return \"\"; };\r\n\r\nmodule.exports = {\r\n...\r\n devtool: \"source-map\",\r\n...\r\n};\r\n```"
      },
      {
        "user": "avesus",
        "created_at": "2018-01-07T21:15:50Z",
        "body": "It yet adds 4 empty lines in the end of file :-("
      }
    ]
  },
  {
    "number": 2608,
    "title": "re-bundle css + js which split by System.import",
    "created_at": "2016-06-06T13:18:53Z",
    "closed_at": "2016-06-07T14:04:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2608",
    "body": "``` js\nSystem.import('1.js')\nSystem.import('2.js')\n\n// After `ExtractTextPlugin.extract('style')` , output:\n// 1.js, 1.css, 2.js, 2.css\n```\n\nHow to inline the css, get a new full-bundle like:\n\n `1.js` = `1.js` + `1.css`\n\nIt's useful for reduce http request\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2608/comments",
    "author": "leecade",
    "comments": [
      {
        "user": "sethkinast",
        "created_at": "2016-06-06T17:07:59Z",
        "body": "Why are you using ExtractTextPlugin if you want to inline the CSS as part of your JS module?\n"
      },
      {
        "user": "leecade",
        "created_at": "2016-06-06T17:58:25Z",
        "body": "@sethkinast\nI use `System.import` to split files and there is a big entry js, extract `entry.css` is a better way, not sure maybe I can ignore extract css from chunk files\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-06-07T06:23:12Z",
        "body": "> not sure maybe I can ignore extract css from chunk files\n\nThere is an option in the ExtractTextPlugin: `allChunks`, it defaults to `false`. So by default it should ignore css in chunks.\n"
      },
      {
        "user": "leecade",
        "created_at": "2016-06-07T14:04:14Z",
        "body": "Great @sokra thank you\n"
      },
      {
        "user": "monkindey",
        "created_at": "2017-03-20T08:09:46Z",
        "body": "hi , @leecade , I suffering the react-router code splitting. When I switch different route and just download this route's static file, the js is OK, but the css not work. Can you provide your webpack.config.js or any suggestion to make it ?"
      }
    ]
  },
  {
    "number": 2591,
    "title": "Cannot resolve modules 'fs' 'net' 'tls' when using Couchbase",
    "created_at": "2016-06-02T18:21:23Z",
    "closed_at": "2016-06-04T17:40:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2591",
    "body": "Good afternoon,\n\nWe are trying to use the node module for Couchbase. When just using var couchbase = require('couchbase') we ran into this while building:\n\nmy webpack.config looks like:\n\n``` js\nvar webpack = require('webpack');\nvar path = require('path');\n\nmodule.exports = {\n    context: path.join(__dirname, \"src\"),\n    devtool: debug ? \"inline-sourcemap\" : null,\n    entry: \"./js/client.js\",\n    module: {\n        loaders: [\n                {\n                test: /\\.json$/,\n                loader: 'json'\n            },\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loader: 'babel-loader',\n                query: {\n                    presets: ['react', 'es2015', 'stage-0'],\n                    plugins: ['react-html-attrs', 'transform-class-properties', 'transform-decorators-legacy'],\n                }\n            }\n        ]\n    },\n    node: {\n      fs: 'empty',\n      net: 'empty',\n      tls: 'empty',\n      dns: 'empty'\n},\n    output: {\n        path: __dirname + \"/src/\",\n        filename: \"client.min.js\"\n    },\n    plugins: debug ? [\n        new webpack.IgnorePlugin(/^(buffertools)$/)\n    ] : [\n        new webpack.IgnorePlugin(/^(buffertools)$/),\n        new webpack.optimize.DedupePlugin(),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false }),\n    ],\n    devServer: {\n        historyApiFallback: true\n    }\n};\n```\n\nI recently added the node: {} element and now I'm getting:\n\nWARNING in ./~/bindings/bindings.js\nCritical dependencies:\n76:22-40 the request of a dependency is an expression\n76:43-53 the request of a dependency is an expression\n @ ./~/bindings/bindings.js 76:22-40 76:43-53\nwebpack: bundle is now VALID.\n\nIn chrome console i am seeing error:\n\nUncaught ReferenceError: require is not defined\n\nWe are on Node 6.2.0, please let me know if you need anymore details\n\njames\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2591/comments",
    "author": "jashachik",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-06-04T17:40:32Z",
        "body": "> The official Couchbase Node.js Client Library.\n\nIt's a library for node.js not for in-browser usage.\n"
      }
    ]
  },
  {
    "number": 2587,
    "title": "specified loader not loaded",
    "created_at": "2016-06-02T06:54:44Z",
    "closed_at": "2016-06-03T06:19:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2587",
    "body": "I specify `babel-loader` to handle files `/\\.jsx?$/`, but when load `xx.js`,  `babel-loader` do nothing.\n\nI means `xx.js` file (written in ES6) is saved to dest with original source. Then I inject `console.log` to `babel-loader`'s entry function, and find the `babel-loader` even not loaded.\n\nMy config:\n\n``` js\n  {\n        test: /\\.jsx?$/,\n        loader: 'babel',\n        include: [APP_PATH],\n        exclude: /(node_modules|bower_components)/,\n        query: {\n            presets: ['es2015', 'stage-0', 'react']\n        }\n    }\n```\n\nCompiled `xx.js`:\n\n``` js\nwebpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports) {\n\n    import React from 'react';\n        ...\n        ...\n/***/ }\n]);\n```\n\nwebpack version:\n\n``` bash\n    \"babel-core\": \"^6.8.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"webpack\": \"^1.13.0\"\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2587/comments",
    "author": "creeperyang",
    "comments": [
      {
        "user": "creeperyang",
        "created_at": "2016-06-02T08:50:48Z",
        "body": "And is there a way to know which loaders are used to handle one file really?\n\nWe specify loaders by `test`, and then do these loaders really handle the file when running?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T03:06:13Z",
        "body": "@bebraw I wrote a plugin to log out some info, maybe it will help to solve the problem.\n\n``` bash\n# compilation.plugin('normal-module-loader'...)   log format: console.log('nml', module.debugId, module.request)\n\n# default will run into success\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/MyProj/front/viewer/index.html\nnml 1002 /MyProj/node_modules/react-dom/index.js\nnml 1003 /MyProj/node_modules/react/react.js\nnml 1004 /MyProj/node_modules/react-router/lib/index.js\nnml 1005 /MyProj/node_modules/babel-loader/index.js?{\"presets\":[\"/MyProj/node_modules/babel-preset-es2015/index.js\",\"/MyProj/node_modules/babel-preset-react/index.js\",\"/MyProj/node_modules/babel-preset-stage-0/index.js\"]}!/MyProj/front/viewer/app.js\nbabel-loader loaded------------------- # babel-loader loaded (inject console.log into babel-loader lib)\nnml 1006 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1007 /MyProj/node_modules/react/lib/ReactDOM.js\n...\n\n# Then I move /MyProj/front/viewer --> /tmp/xxx/viewer\n# sad, babel-loader even not loaded\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/private/tmp/xxx/viewer/index.html\nnml 1002 /private/tmp/xxx/viewer/app.js # why js file not processed by babel-loader?\nnml 1003 /MyProj/node_modules/react-dom/index.js\nnml 1004 /MyProj/node_modules/react/react.js\nnml 1005 /MyProj/node_modules/react-router/lib/index.js\nnml 1006 /MyProj/node_modules/react/lib/ReactDOM.js\nnml 1007 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1008 /MyProj/node_modules/react/lib/React.js\n...\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T04:58:10Z",
        "body": "It might be that move causing the issues. Try changing `include: [APP_PATH],` to form `include: [APP_PATH, TMP_PATH],` where `TMP_PATH` points to `/private/tmp/xxx/`.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T05:24:32Z",
        "body": "~~I tried but it does not work.~~\n\nIt makes sense.\n\nSeems I should write **`/private/tmp` rather than `/tmp`**. Um, maybe it's better to point out the problem about symbol link in document.\n\nThanks very much.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T05:39:43Z",
        "body": "> Seems I should write /private/tmp rather than /tmp. Um, maybe it's better to point out the problem about symbol link in document.\n\nI don't know how it goes with symlinks. Did you get it to work?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T06:17:46Z",
        "body": "Yes, `babel-loader` is loaded to handle js files.\n\nI should specify `include: ['/private/tmp/xxx/viewer']` instead of  `include: ['/tmp/xxx/viewer']`.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T06:18:35Z",
        "body": "Ok. Safe to close?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T06:19:28Z",
        "body": "Yep. Thanks.\n"
      }
    ]
  },
  {
    "number": 2581,
    "title": " Unknown plugin ..., attempted to resolve relative to 'an npm linked modules'",
    "created_at": "2016-06-01T10:50:47Z",
    "closed_at": "2016-06-04T17:44:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2581",
    "body": "Hi,\n\nI have a project '**users**' (_/home/bertho/oa/users_) with a '**react-components**' module linked (_/home/bertho/oa/react-components_).\n\nIf I compile when the module are linked then i have : \n\n> /home/bertho/oa/test-app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:204\n>           throw new ReferenceError(messages.get(\"pluginUnknown\", plugin, loc, i, dirname));\n>           ^\n> \n> ReferenceError: Unknown plugin \"transform-runtime\" specified in \"base\" at 0, attempted to resolve relative to \"/home/bertho/oa/react-components/build\"\n>     at /home/bertho/oa/test-app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:204:17\n>     at Array.map (native)\n>     at Function.normalisePlugins (/home/bertho/oa/test-app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:180:20)\n>     at OptionManager.mergeOptions (/home/bertho/oa/test-app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:300:36)\n>     at OptionManager.init (/home/bertho/oa/test-app/node_modules/babel-core/lib/transformation/file/options/option-manager.js:488:10)\n>     at compile (/home/bertho/oa/test-app/node_modules/babel-register/lib/node.js:112:69)\n>     at loader (/home/bertho/oa/test-app/node_modules/babel-register/lib/node.js:158:14)\n>     at Object.require.extensions.(anonymous function) [as .js](/home/bertho/oa/test-app/node_modules/babel-register/lib/node.js:168:7)\n>     at Module.load (module.js:458:32)\n>     at tryModuleLoad (module.js:417:12)\n>     at Function.Module._load (module.js:409:3)\n>     at Module.require (module.js:468:17)\n>     at require (internal/module.js:20:19)\n>     at Object.<anonymous> (SettingsContainer.js:29:11)\n>     at Module._compile (module.js:541:32)\n>     at loader (/home/bertho/oa/test-app/node_modules/babel-register/lib/node.js:158:5)\n>     at Object.require.extensions.(anonymous function) [as .js](/home/bertho/oa/test-app/node_modules/babel-register/lib/node.js:168:7)\n\nAnd this work when I run 'npm unlink react-components && npm i' before.\n\nmy configuration : \n\n```\n{\n  devtool: 'cheap-module-eval-source-map',\n  entry: entryFile,\n  output: {\n    path: path.dirname( tmpFile ),\n    filename: path.basename( tmpFile )\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        loader: 'babel',\n        exclude: new RegExp( 'node_modules\\\\/(?!' + ourOwnModules.join( '|' ) + ')' )\n      },\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      {\n        test: /\\.ejs$/,\n        loader: 'ejs'\n      },\n      {\n        test: /\\.(css|html|tblr)$/,\n        loader: 'raw'\n      }\n    ]\n  },\n  progress: true,\n  resolve: {\n    extensions: [ '', '.js', '.jsx' ],\n    moduleDirectories: [ path.join( process.cwd(), 'node_modules' ) ],\n    fallback: path.join( process.cwd(), 'node_modules' )\n  },\n  resolveLoader: {\n    root: path.join( process.cwd(), 'node_modules' ),\n    fallback: path.join( process.cwd(), 'node_modules' )\n  },\n  plugins: [\n    new webpack.DefinePlugin( {\n      'process.env': {\n        NODE_ENV: '\"development\"'\n      },\n      __CLIENT__: true,\n      __SERVER__: false,\n      __DEVELOPMENT__: true,\n      __DEVTOOLS__: true\n    } ),\n    new webpack.IgnorePlugin( /(.*)/, /node_modules\\/(imagesloaded|get-size|outlayer|fizzy-ui-utils)/ )\n  ],\n  node: {\n    fs: 'empty'\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2581/comments",
    "author": "bertho-zero",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-06-04T17:44:03Z",
        "body": "not related to webpack --> babel\n"
      }
    ]
  },
  {
    "number": 2578,
    "title": "\"There is another module with an equal name when case is ignored.\" with UMD dependencies",
    "created_at": "2016-06-01T09:32:18Z",
    "closed_at": "2017-01-29T15:18:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2578",
    "body": "My project requires React and has dependency to a component which also requires React. This component is written as a UMD. I think this is the reason why I get `\"There is another module with an equal name when case is ignored.\"`warnings, because my project does `import React from 'react';` and the component does something like `root[\"React\"]` to access `window.React`. Is this intended behaviour?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2578/comments",
    "author": "donaldpipowitch",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-06-04T17:45:22Z",
        "body": "> and the component does something like root[\"React\"] to access window.React\n\nthat's not the cause\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-29T15:18:34Z",
        "body": "It could be something path related (two different ways to import for example). Please re-open at Stack Overflow as this is a common question."
      }
    ]
  },
  {
    "number": 2572,
    "title": "ContextReplacementPlugin does not apply",
    "created_at": "2016-05-30T16:46:57Z",
    "closed_at": "2017-08-26T12:22:00Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2572",
    "body": "I want to use ContextReplacementPlugin to remove unused language files in moment . I tried both  ContextReplacementPlugin and IgnorePlugin but none of them work. I debuged into the source code and found the plugin is created, but `ContextReplacementPlugin.prototype.apply` function never called. I am blocked in this problem, could anyone help me? Thanks very much!\n\nThe usage of plugin:\n\n```\nplugins: [\n    new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /de|fr|hu/)\n    // new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n  ]\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2572/comments",
    "author": "yufengyw",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-12-26T05:52:34Z",
        "body": "Can you try with webpack 2? Can you set up a standalone project to test?"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:52:12Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:22:01Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 2567,
    "title": "The tag table was unable to be supported build for vuejs",
    "created_at": "2016-05-29T12:59:34Z",
    "closed_at": "2016-08-14T08:04:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2567",
    "body": "I plan to build vue demo into my project, but I get the below error while use vue demo component.\n\n------------------------------------------the error--------------------------------------------------------\nERROR in ./~/babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./~/vue-loader/lib/selector.js?type=script&index=0!./src/components/pms/dashboard.vue\nModule build failed: SyntaxError: D:/WorkSpace/YongTai/src/components/pms/dashboard.vue: Unexpected token (2:0)\n script type=\"text/x-template\" id=\"grid-template\">\n\n> 2 | `table>\n>     | ^\n>   3 |     <thead>\n>   4 |     <tr>\n>   5 |         <th v-for=\"key in columns\"\n>     at Parser.pp.raise (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\location.js:22:13)\n>     at Parser.pp.unexpected (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\util.js:89:8)\n>     at Parser.pp.parseExprAtom (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:517:12)\n>     at Parser.pp.parseExprSubscripts (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:272:19)\n>     at Parser.pp.parseMaybeUnary (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:252:19)\n>     at Parser.pp.parseExprOps (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:183:19)\n>     at Parser.pp.parseMaybeConditional (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:165:19)\n>     at Parser.pp.parseMaybeAssign (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:128:19)\n>     at Parser.pp.parseExpression (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\expression.js:92:19)\n>     at Parser.pp.parseStatement (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\statement.js:163:19)\n>     at Parser.pp.parseBlockBody (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\statement.js:529:21)\n>     at Parser.pp.parseTopLevel (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\statement.js:36:8)\n>     at Parser.parse (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\parser\\index.js:129:19)\n>     at parse (D:\\WorkSpace\\YongTai\\node_modules\\babylon\\lib\\index.js:47:47)\n>     at File.parse (D:\\WorkSpace\\YongTai\\node_modules\\babel-core\\lib\\transformation\\file\\index.js:540:58)\n>     at File.parseCode (D:\\WorkSpace\\YongTai\\node_modules\\babel-core\\lib\\transformation\\file\\index.js:626:20)\n>     at D:\\WorkSpace\\YongTai\\node_modules\\babel-core\\lib\\transformation\\pipeline.js:52:12\n>     at File.wrap (D:\\WorkSpace\\YongTai\\node_modules\\babel-core\\lib\\transformation\\file\\index.js:586:16)\n>     at Pipeline.transform (D:\\WorkSpace\\YongTai\\node_modules\\babel-core\\lib\\transformation\\pipeline.js:50:17)\n>     at transpile (D:\\WorkSpace\\YongTai\\node_modules\\babel-loader\\index.js:14:22)\n>     at Object.module.exports (D:\\WorkSpace\\YongTai\\node_modules\\babel-loader\\index.js:88:12)\n>  @ ./src/components/pms/dashboard.vue 2:17-189\n\n`\n\n---\n\nmy webpack config and vue source code were in the attachment\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2567/comments",
    "author": "xinshouke",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-08T04:53:48Z",
        "body": "Is this relevant still? Did you try poking the vue folks?\n"
      }
    ]
  },
  {
    "number": 2566,
    "title": "Trying to use mongoose in nodejs app using Webpack as module Bundler",
    "created_at": "2016-05-28T19:15:09Z",
    "closed_at": "2016-08-09T05:22:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2566",
    "body": "I am trying to integrate mongoDB in my nodejs-react application. I'm using mongoose as orm.\nIt started with the folowing errors\n\n```\nWARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./win32/x64/bson in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext\n @ ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js 6:10-37\n\n```\n\nI came across as similar question on stackoverflow but no luck there. However I have mede the following changes in my webpack config file.\n\nAdded node and json loader.\n\n```\n{ test: /.json$/, loader: 'json-loader' },\n\n{ test: /.node$/, loader: 'node-loader' }\n\n```\n\nAdded resolve and node object.\n\n```\nresolve: {\n\n\nextensions: [ '', '.js', '.json', '.jsx', '.es6', '.babel', '.node'],\n\nmodulesDirectories: [ 'node_modules', 'app' ] },\n\nnode: {\n\nconsole: true,\n\nfs: 'empty',\n\nnet: 'empty',\n\ntls: 'empty' },\n\n```\n\n`npm install json-loader \n`\n`npm install node-loader\n`\nHere's how my webpack config file looks like now.\n\n```\nvar path = require('path')\nvar webpack = require('webpack')\nvar autoprefixer = require('autoprefixer')\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nvar assetPath = '/assets/'\nvar absolutePath = path.join(__dirname, 'build', assetPath)\n\nmodule.exports = {\n  devtool: 'cheap-module-eval-source-map',\n  entry: [\n    'webpack-hot-middleware/client',\n    './src/index'\n  ],\n  target: 'node-webkit',\n  output: {\n    path: absolutePath,\n    filename: 'bundle.js',\n    publicPath: assetPath\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new ExtractTextPlugin(\"bundle.css\")\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loaders: [ 'babel' ],\n        exclude: /node_modules/,\n        include: path.join(__dirname, 'src')\n      },\n      // fonts and svg\n      { test: /\\.woff(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"url?limit=10000&mimetype=application/font-woff\" },\n      { test: /\\.woff2(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"url?limit=10000&mimetype=application/font-woff\" },\n      { test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"url?limit=10000&mimetype=application/octet-stream\" },\n      { test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"file\" },\n      { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"url?limit=10000&mimetype=image/svg+xml\" },\n      {\n        // images\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: \"file\"\n      },\n      {\n        // for some modules like foundation\n        test: /\\.scss$/,\n        exclude: [/node_modules/], // sassLoader will include node_modules explicitly\n        loader: ExtractTextPlugin.extract(\"style\", \"css!postcss!sass?outputStyle=expanded\")\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\"style\", \"css!postcss\")\n      },\n      { test: /\\.json$/, loader: 'json-loader' },\n      {\n                test: /\\.node$/,\n                loader: 'node-loader'\n      }\n    ]\n  },\n  resolve: {\n      extensions: [ '', '.js', '.json', '.jsx', '.es6', '.babel', '.node'],\n      modulesDirectories: [ 'node_modules', 'app' ]\n  },\n  node: {\n    console: true,\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  },\n  postcss: function(webpack) {\n    return [\n      autoprefixer({browsers: ['last 2 versions', 'ie >= 9', 'and_chr >= 2.3']})\n    ]\n  },\n  sassLoader: {\n    includePaths: [path.resolve(__dirname, \"node_modules\")]\n  }\n}\n\n```\n\nAll the errors are gone but i’m still getting the following warnings and bundle is not getting generated.\n\n```\nWARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./win32/ia32/bson in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext\n @ ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js 8:10-38\n\n\n\n  WARNING in ./~/mongoose/lib/drivers/index.js\n    Critical dependencies:\n    8:11-74 the request of a dependency is an expression\n     @ ./~/mongoose/lib/drivers/index.js 8:11-74\n\n\nWARNING in ./~/mongoose/lib/drivers/SPEC.md\nModule parse failed: /Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/mongoose/lib/drivers/SPEC.md Unexpected character '#' (2:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected character '#' (2:0)\n    at Parser.pp.raise (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:920:13)\n    at Parser.pp.getTokenFromCode (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2813:8)\n    at Parser.pp.readToken (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2508:15)\n    at Parser.pp.nextToken (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2500:71)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1615:10)\n    at Object.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:882:44)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:310:10)\n    at nextLoader (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:275:25)\n @ ./~/mongoose/lib/drivers ^\\.\\/.*$\n\nWARNING in ./~/mongoose/~/mongodb/~/es6-promise/dist/es6-promise.js\nModule not found: Error: Cannot resolve module 'vertx' in /Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/mongoose/node_modules/mongodb/node_modules/es6-promise/dist\n @ ./~/mongoose/~/mongodb/~/es6-promise/dist/es6-promise.js 132:20-30\n\nWARNING in ./~/mongoose/~/bson/lib/bson/index.js\nCritical dependencies:\n20:16-29 the request of a dependency is an expression\n44:18-31 the request of a dependency is an expression\n71:19-32 the request of a dependency is an expression\n @ ./~/mongoose/~/bson/lib/bson/index.js 20:16-29 44:18-31 71:19-32\n\nWARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional/index.js\nCritical dependencies:\n63:18-42 the request of a dependency is an expression\n71:20-44 the request of a dependency is an expression\n78:35-67 the request of a dependency is an expression\n @ ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional/index.js 63:18-42 71:20-44 78:35-67\n\nWARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional/LICENSE\nModule parse failed: /Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/require_optional/LICENSE Unexpected token (1:40)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (1:40)\n    at Parser.pp.raise (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:920:13)\n    at Parser.pp.unexpected (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1483:8)\n    at Parser.pp.semicolon (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1462:73)\n    at Parser.pp.parseExpressionStatement (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1976:8)\n    at Parser.pp.parseStatement (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1754:188)\n    at Parser.pp.parseTopLevel (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1648:21)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1616:17)\n    at Object.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:882:44)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/NormalModule.js:104:16)\n @ ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional ^\\.\\/.*$\n\nWARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional/README.md\nModule parse failed: /Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/require_optional/README.md Unexpected character '#' (1:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected character '#' (1:0)\n    at Parser.pp.raise (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:920:13)\n    at Parser.pp.getTokenFromCode (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2813:8)\n    at Parser.pp.readToken (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2508:15)\n    at Parser.pp.nextToken (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:2500:71)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:1615:10)\n    at Object.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/acorn/dist/acorn.js:882:44)\n    at Parser.parse (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/lib/NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:310:10)\n    at nextLoader (/Users/nitesh/Documents/learnReact/day1/r3-foundation-boilerplate/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:275:25)\n @ ./~/mongoose/~/mongodb/~/mongodb-core/~/require_optional ^\\.\\/.*$\nChild extract-text-webpack-plugin:\n    chunk    {0} extract-text-webpack-plugin-output-filename 221 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./src/styles/app.css 219 kB {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\nChild extract-text-webpack-plugin:\n    chunk    {0} extract-text-webpack-plugin-output-filename 8.56 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./src/styles/styles.css 7.06 kB {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\nChild extract-text-webpack-plugin:\n    chunk    {0} extract-text-webpack-plugin-output-filename 7.92 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./src/styles/slider.css 6.42 kB {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\nChild extract-text-webpack-plugin:\n    chunk    {0} extract-text-webpack-plugin-output-filename 234 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./src/styles/app_override.css 232 kB {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\nChild extract-text-webpack-plugin:\n                                     Asset     Size  Chunks       Chunk Names\n      404a525502f8e5ba7e93b9f02d9e83a9.eot  75.2 kB               \n    926c93d201fe51c8f351e858468980c3.woff2  70.7 kB               \n     891e3f340c1126b4c7c142e5f6e86816.woff  89.1 kB               \n      fb650aaf10736ffb9c4173079616bf01.ttf   151 kB               \n      bae4a87c1e5dff40baa3f49d52f5347a.svg   386 kB               \n    chunk    {0} extract-text-webpack-plugin-output-filename 41.4 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./src/styles/index.css 264 bytes {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n        [2] ./~/css-loader!./~/font-awesome/css/font-awesome.css 39.1 kB {0} [built]\n        [3] ./~/font-awesome/fonts/fontawesome-webfont.eot 82 bytes {0} [built]\n        [4] ./~/font-awesome/fonts/fontawesome-webfont.eot?v=4.6.1 82 bytes {0} [built]\n        [5] ./~/font-awesome/fonts/fontawesome-webfont.woff2?v=4.6.1 84 bytes {0} [built]\n        [6] ./~/font-awesome/fonts/fontawesome-webfont.woff?v=4.6.1 83 bytes {0} [built]\n        [7] ./~/font-awesome/fonts/fontawesome-webfont.ttf?v=4.6.1 82 bytes {0} [built]\n        [8] ./~/font-awesome/fonts/fontawesome-webfont.svg?v=4.6.1 82 bytes {0} [built]\nChild extract-text-webpack-plugin:\n    chunk    {0} extract-text-webpack-plugin-output-filename 88.8 kB [rendered]\n        [0] ./~/css-loader!./~/postcss-loader!./~/sass-loader?outputStyle=expanded!./src/styles/foundation.scss 87.3 kB {0} [built]\n        [1] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2566/comments",
    "author": "nitte93",
    "comments": [
      {
        "user": "n3v3rf411",
        "created_at": "2016-06-26T10:51:10Z",
        "body": "I got a somewhat similar issue (cryptic logs) but after further investigation, I accidentally indirectly imported mongoose into browser-land.\n\n```\nWARNING in ./~/mongoose/lib/drivers/index.js\nCritical dependencies:\n8:11-74 the request of a dependency is an expression\n @ ./~/mongoose/lib/drivers/index.js 8:11-74\n\nWARNING in ./~/require_optional/index.js\nCritical dependencies:\n63:18-42 the request of a dependency is an expression\n71:20-44 the request of a dependency is an expression\n78:35-67 the request of a dependency is an expression\n @ ./~/require_optional/index.js 63:18-42 71:20-44 78:35-67\n\nWARNING in ./~/mongoose/lib/drivers/SPEC.md\nModule parse failed: 1234567\\node_modules\\mongoose\\lib\\drivers\\SPEC.md Unexpected character '#' (2:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected character '#' (2:0)\n    at Parser.pp.raise (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:920:13)\n    at Parser.pp.getTokenFromCode (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2813:8)\n    at Parser.pp.readToken (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2508:15)\n    at Parser.pp.nextToken (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2500:71)\n    at Parser.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1615:10)\n    at Object.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:882:44)\n    at Parser.parse (1234567\\node_modules\\webpack\\lib\\Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (1234567\\node_modules\\webpack\\lib\\NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)\n    at nextLoader (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:275:25)\n    at 1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:259:5\n    at Storage.finished (1234567\\node_modules\\enhanced-resolve\\lib\\CachedInputFileSystem.js:38:16)\n    at 1234567\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:404:3)\n @ ./~/mongoose/lib/drivers ^\\.\\/.*$\n\nWARNING in ./~/require_optional/README.md\nModule parse failed: 1234567\\node_modules\\require_optional\\README.md Unexpected character '#' (1:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected character '#' (1:0)\n    at Parser.pp.raise (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:920:13)\n    at Parser.pp.getTokenFromCode (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2813:8)\n    at Parser.pp.readToken (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2508:15)\n    at Parser.pp.nextToken (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:2500:71)\n    at Parser.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1615:10)\n    at Object.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:882:44)\n    at Parser.parse (1234567\\node_modules\\webpack\\lib\\Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (1234567\\node_modules\\webpack\\lib\\NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)\n    at nextLoader (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:275:25)\n    at 1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:259:5\n    at Storage.finished (1234567\\node_modules\\enhanced-resolve\\lib\\CachedInputFileSystem.js:38:16)\n    at 1234567\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:404:3)\n @ ./~/require_optional ^\\.\\/.*$\n\nWARNING in ./~/require_optional/LICENSE\nModule parse failed: 1234567\\node_modules\\require_optional\\LICENSE Unexpected token (1:40)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (1:40)\n    at Parser.pp.raise (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:920:13)\n    at Parser.pp.unexpected (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1483:8)\n    at Parser.pp.semicolon (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1462:73)\n    at Parser.pp.parseExpressionStatement (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1976:8)\n    at Parser.pp.parseStatement (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1754:188)\n    at Parser.pp.parseTopLevel (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1648:21)\n    at Parser.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:1616:17)\n    at Object.parse (1234567\\node_modules\\webpack\\node_modules\\acorn\\dist\\acorn.js:882:44)\n    at Parser.parse (1234567\\node_modules\\webpack\\lib\\Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (1234567\\node_modules\\webpack\\lib\\NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)\n    at nextLoader (1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:275:25)\n    at 1234567\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:259:5\n    at Storage.finished (1234567\\node_modules\\enhanced-resolve\\lib\\CachedInputFileSystem.js:38:16)\n    at 1234567\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:404:3)\n @ ./~/require_optional ^\\.\\/.*$\n\nERROR in ./~/require_optional/index.js\nModule not found: Error: Cannot resolve module 'fs' in 1234567\\node_modules\\require_optional\n @ ./~/require_optional/index.js 2:7-20\n\nERROR in ./~/require_optional/~/resolve-from/index.js\nModule not found: Error: Cannot resolve module 'module' in 1234567\\node_modules\\require_optional\\node_modules\\resolve-from\n @ ./~/require_optional/~/resolve-from/index.js 3:13-30\n\nERROR in ./~/muri/lib/index.js\nModule not found: Error: Cannot resolve module 'fs' in 1234567\\node_modules\\muri\\lib\n @ ./~/muri/lib/index.js 240:2-15\n\nERROR in ./~/mongodb/lib/gridfs/grid_store.js\nModule not found: Error: Cannot resolve module 'fs' in 1234567\\node_modules\\mongodb\\lib\\gridfs\n @ ./~/mongodb/lib/gridfs/grid_store.js 42:7-20\n\nERROR in ./~/mongodb-core/lib/connection/connection.js\nModule not found: Error: Cannot resolve module 'net' in 1234567\\node_modules\\mongodb-core\\lib\\connection\n @ ./~/mongodb-core/lib/connection/connection.js 5:10-24\n\nERROR in ./~/mongodb-core/lib/connection/connection.js\nModule not found: Error: Cannot resolve module 'tls' in 1234567\\node_modules\\mongodb-core\\lib\\connection\n @ ./~/mongodb-core/lib/connection/connection.js 6:10-24\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:22:59Z",
        "body": "Can you re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 2557,
    "title": "webpack2 : remove comments with LoaderOptionsPlugin",
    "created_at": "2016-05-27T06:46:32Z",
    "closed_at": "2016-05-28T08:19:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2557",
    "body": "Hi there,\n\nBefore with the UglifyPlugin, I could pass { comments: false } as options, how to do the same with LoaderOptionsPlugin ?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2557/comments",
    "author": "Makio64",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-27T12:13:34Z",
        "body": "The UglifyPlugin is not affected by the change. LoaderOptionsPlugin is only relevant for loaders that has minimizer includes (i. e. css, html).\n"
      },
      {
        "user": "Makio64",
        "created_at": "2016-05-28T08:19:05Z",
        "body": "Ok, I was thinking LoaderOptionsPlugin replace the UglifyPlugin.\nThanks to clarify.\n"
      },
      {
        "user": "aegyed91",
        "created_at": "2016-07-24T12:31:04Z",
        "body": "@sokra is there anything else that tells the affected loaders to use the minimizer option?\n\nfor example `NODE_ENV=production` or the `-p` flag\n"
      }
    ]
  },
  {
    "number": 2544,
    "title": "Specifying a salt for bundle/chunk hashes?",
    "created_at": "2016-05-24T15:43:02Z",
    "closed_at": "2016-06-04T18:13:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2544",
    "body": "I don't see it in the docs, and from skimming the source, it doesn't seem like there's a configuration option anywhere either. Is there a straightforward way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2544/comments",
    "author": "kmck",
    "comments": [
      {
        "user": "heylookltsme",
        "created_at": "2016-06-03T18:30:28Z",
        "body": "bump. I also need this. \n"
      },
      {
        "user": "enapupe",
        "created_at": "2018-07-23T21:46:14Z",
        "body": "this feature just saved my ass! \r\nsome users cached files with wrong encoding so my only option was changing file names.\r\n\r\nwebpack rocks! thanks"
      }
    ]
  },
  {
    "number": 2539,
    "title": "Questions about 'require-ensure' ",
    "created_at": "2016-05-24T01:15:40Z",
    "closed_at": "2016-08-09T05:25:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2539",
    "body": "Thank you guys for such a wonderful tool, but some of the problems I shall not said when I packed when'CommonsChunkPlugin'this plugin in the output file has all the JS relies on the information in the, each package will create new files, so that is not conducive to the browser's cache is used, so I here suggestions in'require-ensure' plug-in judge whether or not to use the'require.ensure'and then again in the output code. Good wishes.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2539/comments",
    "author": "iwangx",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:25:26Z",
        "body": "Can you re-open at Stack Overflow with more details? Thanks.\n"
      }
    ]
  },
  {
    "number": 2536,
    "title": "When can I except the release of webpack 2",
    "created_at": "2016-05-23T12:37:53Z",
    "closed_at": "2016-08-28T07:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2536",
    "body": "I really excited about the new webpack 2, I don't want to use the beta in to my production\ndo u have any time line for the release?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2536/comments",
    "author": "adithyan",
    "comments": [
      {
        "user": "dmr",
        "created_at": "2016-06-10T13:33:47Z",
        "body": "Is there a list of pending release blocker issues?\n"
      },
      {
        "user": "TheLarkInn",
        "created_at": "2016-06-10T13:37:57Z",
        "body": "I don't believe we have a blocking tag, however the issues labeled 'webpack2' and 'bug' is a great place to start.\n"
      },
      {
        "user": "pastelsky",
        "created_at": "2016-06-11T12:48:44Z",
        "body": "Aren't there always going to be bugs? When does it become stable enough for release?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:54:29Z",
        "body": "Closing in favor of #1545.\n"
      }
    ]
  },
  {
    "number": 2531,
    "title": "Thoughts on dynamic resource loading progress indicator ",
    "created_at": "2016-05-22T02:37:47Z",
    "closed_at": "2016-08-09T05:27:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2531",
    "body": "i want webpack could do\n\n```\nvar xhr =  require.ensure([],function(require){\n   require('a.js')\n   require('b.css')\n})\nxhr.on('progress',function(evt){\n//show progress\n})\n```\n\ni want load every async resouces through ajax,and i could inject 'progress' listener to show progress indicator .  is there any way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2531/comments",
    "author": "aaronwng",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:27:26Z",
        "body": "Not in webpack 1. Webpack 2 supports `System.import`. It's a promise based interface. That allows you to track progress on file level.\n"
      }
    ]
  },
  {
    "number": 2530,
    "title": "Webpack watch doesn't output the new build",
    "created_at": "2016-05-21T11:27:37Z",
    "closed_at": "2016-05-24T04:49:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2530",
    "body": "Watch recognizes a change in the file and the command line shows it works on a new build, but the file on the file system never gets updated. As soon as I quit the watching process and start it again the correct output is produced. Also running it manually with the following command doesn't give any more insight nor output:\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n```\n## webpack.config.js\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname + '/App',\n    entry: './index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n\nThe file in question is quite simple and I'm only changing text in the paragraph for testing:\n## index.tsx\n\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nclass Dashboard extends React.Component<{}, {}> {\n    render(){\n        return(\n            <p>Hello!</p>\n        );\n    }\n}\n\nReactDOM.render(<Dashboard />, document.getElementById('app'));\n```\n## Output\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n 10% 0/1 build modulests-loader: Using typescript@1.8.10 and c:\\Development\\Enterprise Net2 Manager\\Portal\\tsconfig.json\n1481ms build modules\n8ms seal\n8ms optimize\n10ms hashing\n20ms create chunk assets\n2ms additional chunk assets\n354ms optimize chunk assets\n 90% optimize assetsemiting\n450ms optimize assets\n41ms emit\nHash: 80d04fe372c49da68b8f\nVersion: webpack 1.13.0\nTime: 2404ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n204ms build modules\n3ms seal\n10ms optimize\n4ms hashing\n9ms create chunk assets\n2ms additional chunk assets\n382ms optimize chunk assets\n 90% optimize assetsemiting\n372ms optimize assets\n39ms emit\nHash: 93b94d46db379ef92759\nVersion: webpack 1.13.0\nTime: 1028ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2530/comments",
    "author": "janpieterz",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-22T19:18:00Z",
        "body": "Does this only apply to typescript files or does the same happen with normal js files?\n"
      },
      {
        "user": "janpieterz",
        "created_at": "2016-05-23T04:17:07Z",
        "body": "I tried, same behavior. Then I removed the '/App' from the context and specified the entry with /App and it started working (both JS and TS(x)).\n\nSince the output did pick up the change but never the file, should this be a bug? Below my (now working) config:\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname,\n    entry: './App/index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-05-23T16:46:02Z",
        "body": "Just spotted that you are using windows. This means `__dirname + \"/App\"` is an invalid path as windows uses `\\` as separator. Better use `path.resolve(__dirname, \"App\")`.\n"
      },
      {
        "user": "janpieterz",
        "created_at": "2016-05-24T04:49:14Z",
        "body": "Thanks! I'll close the issue.\n"
      }
    ]
  },
  {
    "number": 2523,
    "title": "Webpack2, export class in modules",
    "created_at": "2016-05-20T00:39:01Z",
    "closed_at": "2016-06-04T17:22:04Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2523",
    "body": "Hello !\n\nIn a module, some export doesn't works:\n\nmodule a, `index.js`\n\n``` js\nexport default class A {}\nexport class B{}\n\nexport const c = 'c';\n```\n\nGenerated:\n\n``` js\nfunction(module, exports, __webpack_require__) {\n\n    \"use strict\";\n    'use strict';\n\n    class A {}\n    class B {}\n\n    var c = 'c';/* unused harmony export c */\n\n/***/ \n```\n\n`c` is detected, but not A or B.\n\nIt works like this: \n\n``` js\nclass A {}\nexport default A;\n```\n\nGenerated:\n\n``` js\n/***/ function(module, exports, __webpack_require__) {\n\n    \"use strict\";\n    'use strict';\n\n    class A {}\n    /* harmony default export */ exports[\"a\"] = A;\n    class B {}\n\n    var c = 'c';/* unused harmony export c */\n\n\n/***/ },\n```\n\nIt works when it is in my app, however (when it's not in a module):\n\n``` js\nexport default class A{};\n```\n\nGenerated:\n\n``` js\n/***/ function(module, exports, __webpack_require__) {\n    var A = class A {};\n\n    /* harmony export */ Object.defineProperty(exports, \"a\", {configurable: false, enumerable: true, get: function() { return A; }});\n\n/***/\n```\n\nCan you help me ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2523/comments",
    "author": "christophehurpeau",
    "comments": [
      {
        "user": "helloyou2012",
        "created_at": "2016-05-20T01:59:02Z",
        "body": "@christophehurpeau you can use `es2015` instead of `es2015-webpack`. But `tree-shaking` will not work.\n"
      },
      {
        "user": "sikanhe",
        "created_at": "2016-05-20T19:03:14Z",
        "body": "it is webpack 2's tree-shaking feature, working as intended. \n"
      },
      {
        "user": "christophehurpeau",
        "created_at": "2016-05-20T19:39:46Z",
        "body": "@helloyou2012 I know, and it works with `es2015`, but I am trying to use the tree shaking\n@sikanhe I require the default export, so no it is not \"working as intended\". As you can see, `c` is parsed by webpack `/* unused harmony export c */` but not A nor B, but it works when the export is after:\n\n``` js\nclass A {}\nexport default A;\n```\n"
      },
      {
        "user": "todoubaba",
        "created_at": "2016-05-22T19:23:41Z",
        "body": "Same issue with angular2-rc.1 esm files, `export class X {}` does not been exported in generated files, even if it has been imported by other source files.\n"
      },
      {
        "user": "SurealCereal",
        "created_at": "2016-05-28T15:37:03Z",
        "body": "I seem to be experiencing this issue too.  I am not using Babel - I am trying to use pure ES6 modules generated by Typescript.  For some reason some classes are not exported. \n\nI see lines like  /\\* harmony import */**WEBPACK_IMPORTED_MODULE_1__shared_custom_models_SomeModule**[\"SomeClass\"]\nbut that property \"SomeClass\" was not previously defined.\n Is there a known workaround?\n"
      },
      {
        "user": "aeosynth",
        "created_at": "2016-06-04T01:13:56Z",
        "body": "@christophehurpeau posted a workaround:\n\n```\nclass A {}\nexport default A;\n```\n"
      }
    ]
  },
  {
    "number": 2518,
    "title": "Question about __dirname",
    "created_at": "2016-05-19T09:35:53Z",
    "closed_at": "2016-08-14T06:25:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2518",
    "body": "Im sure this has been asked here before but I couldnt find the answer.\n\nIn one of my javascripts I have the following line to resolve `package.json`\n\n`var pkg = require(path.resolve('package.json'))`\n\nUnfortunately, this results in a weird output in the bundle file as below which throws an error.\n\n`var pkg = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());`\n\nAnyway around this ?\n\nI ofcourse tried using `var pkg = require(__dirname + '/package.json')` with below config,\n\n```\nnode: {\n  __dirname: false\n}\n```\n\nBut this has no affect either.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2518/comments",
    "author": "day0ops",
    "comments": [
      {
        "user": "day0ops",
        "created_at": "2016-05-19T10:05:57Z",
        "body": "I alternatively used `const packageJSON = JSON.parse(fs.readFileSync('package.json', 'utf8'));` which is probably a better solution\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T06:25:47Z",
        "body": "One handy way to solve this is to pass `package.json` data through `DefinePlugin` and consume it through that.\n\nFeel free to re-open at Stack Overflow for more ideas.\n"
      }
    ]
  },
  {
    "number": 2513,
    "title": "webpack: how to ordering dependencies between entries",
    "created_at": "2016-05-18T18:16:38Z",
    "closed_at": "2016-05-26T01:26:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2513",
    "body": "in my webpack config file I have two multy entries:\n\n```\nmodule.exports = {\n      entry:{\n             lib:[\"./scripts/file1.js\",\"./scripts/fil2.ts\"],\n             app:[\"./scripts/login.js\",\"./public/HSplitLayout.js\"]\n      },\n      output: {\n        path: 'builds',\n        filename: '[name].js',\n        publicPath: 'builds/',\n        libraryTarget: \"var\"\n    }\n}\n```\n\nI want to ensure that the lib.js file is completely loaded before app.js is loaded.\n\nThank you for your help\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2513/comments",
    "author": "Trispa",
    "comments": [
      {
        "user": "megakoresh",
        "created_at": "2016-05-25T09:38:11Z",
        "body": "Just put `<script src=\"lib.js\"/>` before `<script src=\"app.js\" />` in your page...\nBrowser loads scripts in order synchronously. \nIt is more complicated when you bundle multiple entries in one file, I noticed it sometimes does mangle the order. The best solution in this case is to just have your main application as an entry, and from there just `require` or `import` your library.\n"
      },
      {
        "user": "Trispa",
        "created_at": "2016-05-26T01:26:24Z",
        "body": "thanks @megakoresh  i did that and it work well now \n"
      }
    ]
  },
  {
    "number": 2505,
    "title": "peerDependencies with webpack",
    "created_at": "2016-05-17T17:46:23Z",
    "closed_at": "2016-08-13T03:52:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2505",
    "body": "Ex - I have a project `A` which is dependent on `react`. project `B` is dependant on project `A`. project `C` is dependant on `B`.\n\nreact is peerDependencies for project A. So when I create bundle for project `A`, I do not want to include react in the bundle.\n\n`A` is peerDependencies for project B. So when I create bundle for project `B`, I do not want to include `A` in the bundle.\n\n`B` is peerDependencies for project C. So when I create bundle for project `C`, I do not want to include `B` in the bundle.\n\nProject A,B,C are using webpack. Project A, B are published on npm. Project A, B and C has demo folders too. \nNow problem start here.\nI want to build Project A which do not have dependency so I am adding react in webpack external config. But at the same time Project A has code for demo too. So I want to use `include` react for demo purpose !\nsame problem with other Project  B and C.\n\nPlease guide me.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2505/comments",
    "author": "nsisodiya",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-05-17T17:51:34Z",
        "body": "What if you fix React version as a `devDependency` for demo purposes? It should resolve as you expect then.\n"
      },
      {
        "user": "nsisodiya",
        "created_at": "2016-05-18T04:52:49Z",
        "body": "@bebraw I do not understand !\nI have one webpack configuration. which has two entry points. One entry is library itself.\nanother entry point is \n\n``` js\n{\nentry: {\n    \"ReactComponents\": \"./src/index.js\",\n    \"external\": \"./example/external.js\"\n  },\nexternals: {\n    \"@nsisodiya/flux\": {\n      commonjs: \"flux\",\n      commonjs2: \"flux\",\n      amd: \"name\",\n      root: \"name\"\n    },\n    \"react\": {\n      commonjs: \"react\",\n      commonjs2: \"react\",\n      amd: \"React\",\n      root: \"React\"\n    },\n    \"react-dom\": {\n      commonjs: \"react-dom\",\n      commonjs2: \"react-dom\",\n      amd: \"ReactDOM\",\n      root: \"ReactDOM\"\n    }\n  }\n}\n```\n\nfirst entry point is the library itself. because I have added externals in webpack config, react is not including the both entry points. second entry point belongs to demo. which look like this\n\n`/example/external.js`\n\n``` js\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nconsole.error(React);\n//Register Globally\nwindow.React = React;\nwindow.ReactDom = ReactDom;\n```\n\nSo the problem is here. I want external libraries not to be included in first entry point and to be included in second entry point because it belongs to demo where `ReactComponents.min.js` require these libraries as global !\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-05-18T05:48:26Z",
        "body": "I think you are going to need separate configuration for demo. You could return an array of configurations and omit that React externals configuration for it there.\n"
      },
      {
        "user": "nsisodiya",
        "created_at": "2016-05-18T09:08:02Z",
        "body": "multiple configuration , means multiple webpack-dev-server instance ?\nI will try to do it and respond here !\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-05-18T15:07:31Z",
        "body": "I mean\n\n``` javascript\nmodule.exports = [{...}, {...}];\n```\n\nI guess **webpack-dev-server** should pick that up.\n"
      }
    ]
  },
  {
    "number": 2496,
    "title": "Get the entry name from within the loader ",
    "created_at": "2016-05-16T03:43:47Z",
    "closed_at": "2017-01-18T09:54:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2496",
    "body": "Is there any way one can get this?\nI've tried to hack it with `[name]`, didn't work (got the name of the file being loaded).\n\nI understand this would be difficult (read impossible) to do for every file since a single module (file) can be required in multiple entry files - but what if the loader is used specifically on the entry?\n\nFor example:\n\n```\n...\nentry: {\n  entry1: \"myloader!./file.js\"\n}\n...\n```\n\nWould it be possible then?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2496/comments",
    "author": "nikolakanacki",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-18T17:58:16Z",
        "body": "Can't you just pass the name as query param?\n\n``` js\n...\nentry: {\n  entry1: \"myloader?entry1!./file.js\",\n  entry2: \"myloader?entry2!./file.js\"\n}\n...\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-18T09:54:46Z",
        "body": "Can you re-open at Stack Overflow for more ideas?"
      }
    ]
  },
  {
    "number": 2495,
    "title": "How to change UMD order",
    "created_at": "2016-05-16T03:04:47Z",
    "closed_at": "2016-08-14T06:20:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2495",
    "body": "``` javascript\n\nvar webpackConfig = {\n        module: {\n            loaders: [\n                { test: /\\.(es6|js|jsx)$/, loader: babelLoader},\n                // { test: /\\.less$/, loader: lessArr.join('!')},\n                { test: /\\.scss$/, loader: sassArr.join('!')}\n            ]\n        },\n        postcss: function () {\n            return [precss, autoprefixer];\n        },\n        externals: [\n            {\n                react: {\n                  amd: 'react',\n                  root: 'React',\n                  commonjs2: 'react',\n                  commonjs: 'react'\n                }\n            }\n        ],\n        entry: [\n            entry\n        ],\n        output: {\n          filename: 'main.js',\n          path: output,\n          library: lab,\n          libraryTarget: 'umd'\n        },\n        resolve: {\n          extensions: ['', '.js', '.jsx'],\n        }\n    };\n```\n\nthe head of output file is like this\n\n``` js\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory(require(\"react\"));\n    else if(typeof define === 'function' && define.amd)\n        define([\"react\"], factory);\n    else if(typeof exports === 'object')\n        exports[\"table\"] = factory(require(\"react\"));\n    else\n        root[\"table\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\n```\n\nI wonder if I can set the order of umd ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2495/comments",
    "author": "linxixuan",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-17T11:52:15Z",
        "body": "Why do you need this?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T06:20:24Z",
        "body": "Closing due to inactivity. Feel free to re-open at Stack Overflow if still relevant.\n"
      },
      {
        "user": "linxixuan",
        "created_at": "2016-08-15T02:32:24Z",
        "body": "Ok, Thanks.\n"
      }
    ]
  },
  {
    "number": 2491,
    "title": "A loader's test function disregards other settings, like include or exclude",
    "created_at": "2016-05-15T08:08:38Z",
    "closed_at": "2017-08-26T12:21:56Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2491",
    "body": "So, I need to pass some files through some processing (book-keeping), without modifying them, and my idea was to use **a loader** to just pass them through, while processing them in some manner.\n\nI was planning on writing a loader that would do that, and in the process stumbled upon this:\n\n```\nconst PATH = require('path');\n\nconst webpack = require('webpack');\n\nconst APP_FOLDER = PATH.resolve(__dirname, 'src/');\nconst APP_ENTRY_FILE = PATH.resolve(APP_FOLDER, 'index.js');\n\nconst BUILD_FOLDER = PATH.resolve(__dirname, 'dist/');\n\nconst NODE_MODULES = PATH.resolve(__dirname, 'node_modules/');\n\nmodule.exports = {\n    entry: {\n        app: [APP_ENTRY_FILE]\n    },\n    output: {\n        path: BUILD_FOLDER,\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [\n            {\n                test: (path) => {\n                    console.log(path);\n                    return true;   \n                }, \n                exclude: [NODE_MODULES],\n                loader: 'raw'\n            },\n            {\n                test: /\\.js$/, include: [APP_FOLDER], loader: 'babel',\n                query: {compact: false, cacheDirectory: true}\n            }\n        ]\n    },\n    plugins: [     \n        new webpack.NoErrorsPlugin()\n    ]\n};\n\n```\n\n**My expectation was that only files that satisfy `exclude` (i.e. not in `node_modules` folder), would get processed through the `test` function** and, consequently, `raw-loader`.\n\nAlas. All files, **regardless of combinations of `include` and `exclude`** are passed through.\n\nIs this the expected behavior and `test` function is expected to implement `include` and `exclude`?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2491/comments",
    "author": "dnutels",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-12-24T07:35:11Z",
        "body": "Can you try against webpack 2 beta?"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:52:08Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:21:56Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 2487,
    "title": "Import property or method with dependency injection",
    "created_at": "2016-05-14T02:33:27Z",
    "closed_at": "2016-08-14T05:21:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2487",
    "body": "how to load h, render, component etc into module ?\n\n```\nimport { h, render, Component } from 'preact'\n\nnew webpack.ProvidePlugin({\n  _: 'lodash',\n  moment: 'moment',\n  $: 'jquery',\n  jQuery: 'jquery',\n  Preact: 'preact',\n  Router: 'preact-router',\n  h: 'preact/h'\n})\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2487/comments",
    "author": "crapthings",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-14T05:21:46Z",
        "body": "Can you re-open at Stack Overflow for a better response? Thanks. 👍 \n"
      }
    ]
  },
  {
    "number": 2483,
    "title": "Hashing output files only when needed",
    "created_at": "2016-05-13T10:09:14Z",
    "closed_at": "2016-08-14T06:08:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2483",
    "body": "I would like to hash all my js output files less the main.js file and the vendor.js file.\n\nI have many entry points and everything is working as expected, but I would like to have a set of output of the type:\nmain.js\nvendor.js\nldkqfjmlqjk.js\netc\n\nmy output is:\n\n```\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js',\n        publicPath: '/'\n    }\n```\n\nI tried something as:\n\n```\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js' == 'main.js' ? '[name].js' : '[hash].js',\n        publicPath: '/'\n    }\n```\n\nbut this is not working. All the files are created less the main file!!\nWhat is wrong with my approach?\nIs there a proper way to achieve this?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2483/comments",
    "author": "maiopirata",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-14T06:08:16Z",
        "body": "If you need more control per entry, consider using the multicompiler mode. You would end up with something like this:\n\n``` javascript\nmodule.exports = [{...}, {...}]; // configuration per entry\n```\n\nYou can configure it per entry this way.\n\nFeel free to re-open at Stack Overflow if that doesn't do the trick.\n"
      }
    ]
  },
  {
    "number": 2479,
    "title": "Hide \"Critical dependencies error\"",
    "created_at": "2016-05-12T12:37:09Z",
    "closed_at": "2017-01-22T16:47:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2479",
    "body": "How to hide this error? \n\nI'm totally fine with \"This seems to be a pre-built javascript file\", because I do not need tons of npm dependencies of a package, that I will only use on client.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2479/comments",
    "author": "DimitryDushkin",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2017-01-22T16:47:34Z",
        "body": "Can you re-open at Stack Overflow? I have a feeling there might be a `stats` option. You could also try digging the error from the source and see if that gives any better idea."
      }
    ]
  },
  {
    "number": 2472,
    "title": "expose handlebars template in the app.js",
    "created_at": "2016-05-11T15:39:17Z",
    "closed_at": "2016-08-09T05:31:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2472",
    "body": "We had setup with browserify where we had different offerings having same handlebars templates with some changes. We used to expose a template and make a different build for each offerings and then require it from app.js\n\n{\nsrc: path.join('hsn-common/assets', customer, 'receipts/shop.hbs'),\nexpose: 'receiptTemplates/shop'\n}\n\nand in a commonjs file we were requiring the shop as \n\nrequire(receiptTemplates/shop)\n\napp.js used to be common. I guess it was called browserify external require.\n\nIs it possible to get this setup work with webpack ?        \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2472/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:31:45Z",
        "body": "Could you re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 2470,
    "title": "Webpack got error when I modify my package.json ",
    "created_at": "2016-05-11T09:50:58Z",
    "closed_at": "2016-05-15T14:49:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2470",
    "body": "error msg: \n`ERROR in Entry module not found: Error: Cannot resolve 'file' or 'directory' ./demo1/js/demo1.js in /Users/Youngbye/pro/github/webpack_`\n\nWhen I recover package.json,  webpack is OK. Why?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2470/comments",
    "author": "kidbai",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-05-11T16:03:36Z",
        "body": "Could you provide the files (package.json, webpack configuration) in question? It's hard to tell what's going on without additional information.\n"
      },
      {
        "user": "kidbai",
        "created_at": "2016-05-12T02:27:37Z",
        "body": "package.json \n\n```\n{\n  \"name\": \"webpack_\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"webpack\": \"^1.13.0\",\n    \"webpack-stream\": \"^3.2.0\"\n  },\n  \"dependencies\": {\n    \"gulp-base64\": \"^0.1.3\"\n  }\n}\n```\n\nwebpack.config.js\n\n```\nvar webpack = require('webpack');\nmodule.exports = {\n    entry: {\n        demo1: './demo1/js/demo1.js'\n    },\n    output: {\n        path: __dirname,\n        filename: './demo1/build/[name].js'\n    },\n    plugins: [\n       new webpack.optimize.UglifyJsPlugin({\n           compress: {\n               warnings: false\n           }\n       })\n    ]\n}\n```\n\nIt will be error when I execute webpack command line if I delete \"webpack-stream\": \"^3.2.0\" this line in package.json.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-05-12T05:36:16Z",
        "body": "You could try an absolute path over `'./demo1/js/demo1.js'`. I mean something like `path.join(__dirname, 'demo1', 'js', 'demo1.js')`.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-05-14T11:55:08Z",
        "body": "You propably caused the package.json to be invalid JSON. Also remove the dangling comma in the file:\n\n``` diff\n     \"gulp\": \"^3.9.1\",\n-    \"webpack\": \"^1.13.0\",\n-    \"webpack-stream\": \"^3.2.0\"\n+    \"webpack\": \"^1.13.0\"\n   },\n\n```\n"
      }
    ]
  },
  {
    "number": 2454,
    "title": "Why will produce these directory named like '[1~7]..' after execute \"webpack -w\"",
    "created_at": "2016-05-09T02:12:59Z",
    "closed_at": "2016-05-10T11:18:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2454",
    "body": "```\nvar webpack = require('webpack');\nvar uglifyJsPlugin = webpack.optimize.UglifyJsPlugin;\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\nvar path = require('path');\n\nvar devFlagPlugin = new webpack.DefinePlugin({\n    __DEV__: JSON.stringify(JSON.parse(process.env.DEBUG || 'false'))\n});\n\nvar CommonsChunkPlugin = require('webpack/lib/optimize/CommonsChunkPlugin');\n\nvar query = {\n    presets: ['es2015', 'react'],\n    plugins: ['transform-es3-member-expression-literals', 'transform-es3-property-literals']\n};\nvar filter = 'babel?' + JSON.stringify(query);\nmodule.exports = {\n    entry: [\n        './js/index.js'\n    ],\n    output: {\n        filename: './build/bundle.js'\n    },\n    module: {\n        loaders:[\n            { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=81920'},\n            { test: /\\.css$/, loader: 'style-loader!css-loader' },\n            {\n                test: /\\.(js|jsx)$/,\n                exclude: /node_modules/,\n                // es3ify required for IE8\n                loaders: ['es3ify', filter],\n                include: path.join(__dirname,'.')\n            }\n        ]\n    },\n    plugins:[\n\n    ],\n    devtool:\"source-map\"\n}\n\n```\n\nWhen  after I execute \"webpack -w\",  It will produce these directory named like '1.., 2..,3..', and have only one  file named build/bundle.js under theses directory, Who can help to tell me why?\n\n```\nhujiabaos-MacBook-Pro:plugins hujiabao$ ls -alF\ntotal 472\ndrwxr-xr-x  26 hujiabao  staff     884 May  9 00:09 ./\ndrwxr-xr-x  29 hujiabao  staff     986 May  8 14:24 ../\n-rw-r--r--@  1 hujiabao  staff   10244 Apr 25 15:43 .DS_Store\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 1../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 2../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 3../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 4../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 5../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 6../\ndrwxr-xr-x   3 hujiabao  staff     102 May  8 21:43 7../\n-rw-r--r--   1 hujiabao  staff  177571 Apr 11 11:16 8bd56d93488332b8935861b2da2aa87b.png\n-rw-r--r--   1 hujiabao  staff   24940 May  6 22:36 README.md\n-rw-r--r--   1 hujiabao  staff    1230 May  9 00:09 a.js\ndrwxr-xr-x   4 hujiabao  staff     136 Mar 11 14:41 apidoc/\ndrwxr-xr-x  29 hujiabao  staff     986 Apr 11 11:16 assets/\ndrwxr-xr-x   5 hujiabao  staff     170 Apr 19 17:52 build/\n\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2454/comments",
    "author": "hujb2000",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-10T11:17:52Z",
        "body": "Instead of \n\n``` js\n    output: {\n        filename: './build/bundle.js'\n    },\n```\n\ndo this\n\n``` js\n    output: {\n        path: path.resolve(\"./build\"),\n        filename: 'bundle.js'\n    },\n```\n\nwhere `var path = require(\"path\")`\n"
      }
    ]
  },
  {
    "number": 2448,
    "title": "I found a strange issue",
    "created_at": "2016-05-07T14:38:34Z",
    "closed_at": "2016-08-08T04:55:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2448",
    "body": "when i open the chrome sources , some reducer files would not appear in webpack. I don't  know why was that.     Have anyone happened this issue?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2448/comments",
    "author": "beiciye",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-08T04:55:05Z",
        "body": "Can you re-open at Stack Overflow with more details?\n"
      }
    ]
  },
  {
    "number": 2432,
    "title": "npm ERR! Windows_NT 6.1.7601 when 'npm start'",
    "created_at": "2016-05-04T12:16:36Z",
    "closed_at": "2016-08-08T04:57:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2432",
    "body": "Hello, guys.\nI'm trying to start webpack-dev-server, following one tutorial, and It works perfectly on my home Windows 7 PC. But I have a problem when I try to start the same on my Windows 7 PC at work - it says 'npm ERR! Windows_NT 6.1.7601'. I also tried it on a Linux virtual machine at work, and again everything was fine. \nI couldn't find solution for my problem, so I hope you could help me. Here's my npm-debug.log:\n\n> 0 info it worked if it ends with ok\n> 1 verbose cli [ 'C:\\nodejs\\node.exe',\n> 1 verbose cli   'C:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n> 1 verbose cli   'start' ]\n> 2 info using npm@2.15.1\n> 3 info using node@v4.4.3\n> 4 verbose run-script [ 'prestart', 'start', 'poststart' ]\n> 5 info prestart reacttest2@1.0.0\n> 6 info start reacttest2@1.0.0\n> 7 verbose unsafe-perm in lifecycle true\n> 8 info reacttest2@1.0.0 Failed to exec start script\n> 9 verbose stack Error: reacttest2@1.0.0 start: `webpack-dev-server`\n> 9 verbose stack spawn ;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd ENOENT\n> 9 verbose stack     at exports._errnoException (util.js:870:11)\n> 9 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:178:32)\n> 9 verbose stack     at onErrorNT (internal/child_process.js:344:16)\n> 9 verbose stack     at nextTickCallbackWith2Args (node.js:442:9)\n> 9 verbose stack     at process._tickCallback (node.js:356:17)\n> 10 verbose pkgid reacttest2@1.0.0\n> 11 verbose cwd C:\\xampp\\htdocs\\temp\\reacttest2\n> 12 error Windows_NT 6.1.7601\n> 13 error argv \"C:\\nodejs\\node.exe\" \"C:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"start\"\n> 14 error node v4.4.3\n> 15 error npm  v2.15.1\n> 16 error file ;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd\n> 17 error path ;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd\n> 18 error code ELIFECYCLE\n> 19 error errno ENOENT\n> 20 error syscall spawn ;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd\n> 21 error reacttest2@1.0.0 start: `webpack-dev-server`\n> 21 error spawn ;C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd ENOENT\n> 22 error Failed at the reacttest2@1.0.0 start script 'webpack-dev-server'.\n> 22 error This is most likely a problem with the reacttest2 package,\n> 22 error not with npm itself.\n> 22 error Tell the author that this fails on your system:\n> 22 error     webpack-dev-server\n> 22 error You can get information on how to open an issue for this project with:\n> 22 error     npm bugs reacttest2\n> 22 error Or if that isn't available, you can get their info via:\n> 22 error\n> 22 error     npm owner ls reacttest2\n> 22 error There is likely additional logging output above.\n> 23 verbose exit [ 1, true ]\n\nBest Regards\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2432/comments",
    "author": "stoyanmkd",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-05T08:17:08Z",
        "body": "Is webpack-dev-server installed locally?\n"
      },
      {
        "user": "stoyanmkd",
        "created_at": "2016-05-05T08:46:10Z",
        "body": "Webpack-dev-server is installed globally. It seems this repo is not the right place for my question, because a test of starting a server with the official Angular js seed causes an analogical error.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-08T04:57:59Z",
        "body": "Can you re-open at Stack Overflow with more details?\n"
      }
    ]
  },
  {
    "number": 2429,
    "title": "vendors.js: Uncaught TypeError: Cannot read property 'apply' of undefined while using webpack",
    "created_at": "2016-05-02T15:51:20Z",
    "closed_at": "2016-08-09T05:35:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2429",
    "body": "This occurs on hot module reload or refresh. Not sure why is this happening. I have to restart the build process to bootstrap the app again. Below is my config file:\n\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar path = require('path');\nvar VendorChunkPlugin = require('webpack-vendor-chunk-plugin');\nmodule.exports = {\n  'devtool': 'eval-source-map',\n\n  'entry': {\n    'vendor': [\n      'react',\n      'react-dom',\n      'react-router',\n      'react-redux',\n      'redux-thunk',\n      'react-bootstrap',\n      'redux',\n      'redux-form',\n      'axios'\n    ],\n    'app':  __dirname + '/src/main.js'\n  },\n  'output': {\n    'path': __dirname + '/build',\n    'publicPath': '/',\n    'chunkFilename': '[id].[name].chunk.js',\n    'filename': '[name].[hash].js'\n  },\n\n  'module': {\n    'loaders': [\n      // JSX and JS transpilation using babel\n      {\n        'test': [/\\.js$/, /\\.jsx$/],\n        'exclude': /(node_modules|bower_components)/,\n        'loader': 'babel'\n      },\n      // SASS modularization using style, css and postcss sass loader\n      {\n        'test': [/\\.css$/, /\\.scss$/],\n        'loader': 'style!css!sass'\n      },\n      // Font path loader\n      {\n        'test': /\\.(ttf|eot|svg|woff(2)?)(\\?[a-z0-9]+)?$/,\n        'loader': 'file-loader?name=fonts/[name].[ext]'\n      },\n      // Image path loader\n      {\n        'test': /\\.(jpe?g|png|gif|svg)$/i,\n        'loaders': [\n          'url-loader?limit=15000&name=images/[name].[ext]',\n          'image-webpack?bypassOnDebug&optimizationLevel=7&interlaced=false'\n        ]\n      }\n    ],\n  },\n\n  'sassLoader': {\n    'includePaths': [\n      path.resolve(__dirname, 'src/components/'),\n      path.resolve(__dirname, 'src/components/common/assets/')\n    ]\n  },\n\n  'resolve': {\n    'root': [\n      path.resolve(__dirname, 'src'),\n      path.resolve(__dirname, 'src/components/common/assets/'),\n      path.resolve(__dirname, 'src/components/common/'),\n      path.resolve(__dirname, 'node_modules')\n    ],\n    'extensions': ['', '.js', '.jsx', '.scss'],\n  },\n\n  'plugins': [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.BannerPlugin(\"App has been developed by PRDXN.\"),\n    new HtmlWebpackPlugin({\n      'template': __dirname + '/src/index.tmpl.html'\n    }),\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendors.js', Infinity),\n    new VendorChunkPlugin('vendor'),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin({\n      'minimize': true,\n      'screw-ie8': true,\n      'mangle': false,\n      'compress': {\n        'warnings': false\n      },\n      'output': {\n        'comments': false,\n        'semicolons': true,\n      }\n    }),\n    new webpack.optimize.DedupePlugin()\n  ],\n\n  'devServer': {\n    'contentBase': './build',\n    'host': '0.0.0.0',\n    'https': true,\n    'colors': true,\n    'compress': true,\n    'hot': true,\n    'historyApiFallback': true,\n    'inline': true,\n    // Display only errors to reduce the amount of output.\n    'stats': 'errors-only',\n  }\n};\n```\n\nI can't find much about this bug. I have also cleared my browser cache and deleted all the cookies but to no avail.\n\nI have also checked the vendor.js file. It's minified, but I can see it breaking on the hot module reload function. Any help would be much appreciated.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2429/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:35:08Z",
        "body": "It's better to use `CommonsChunkPlugin` only for your production configuration. Please don't mix it with `HotModuleReplacementPlugin` as that's bound to lead to problems.\n\nIf it's still problematic after that change, please re-open at Stack Overflow.\n"
      },
      {
        "user": "mikelambert",
        "created_at": "2016-12-19T23:06:25Z",
        "body": "Hey @bebraw , I ran into this problem as well (also using CommonsChunkPlugin).\r\n\r\nIn my case, I was relying on CommonsChunkPlugin to factor out common libraries (ie jQuery) that might have been relied on in multiple files (that were each included in my page). By removing CommonsChunkPlugin, it resulted in two jQuerys being loaded into the page and sometimes causing subtle interactions with each other.\r\n\r\nI assume the correct fix is \"you should only import one script per page, and only import a second (CommonsChunk) script if you're running in production\".\r\n\r\nSeems a bit limiting (and not sure it was documented as such, so thanks for responding on this thread). But if this is the hoop I need to jump through for hot reloading, then I'll do it... :P"
      },
      {
        "user": "mikelambert",
        "created_at": "2016-12-19T23:14:38Z",
        "body": "And if these are incompatible, can/should there be some sort of check in webpack or a plugin, to error-out when these two plugins coexist?"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-20T09:34:12Z",
        "body": "@mikelambert I would need a concrete example to study to say anything more. Could you open a question at Stack Overflow and link to that?"
      },
      {
        "user": "mbraint",
        "created_at": "2017-01-26T10:31:14Z",
        "body": "I also had this issue when forgot to add 'new' before webpack.optimize.CommonsChunkPlugin (...)\r\n**before**:          `webpack.optimize.CommonsChunkPlugin (...)`\r\n**after**:     `new webpack.optimize.CommonsChunkPlugin (...)`\r\n"
      },
      {
        "user": "anilapu",
        "created_at": "2017-02-21T12:00:22Z",
        "body": "Even I add new before webpack.optimize.CommonsChunkPlugin (...) still I am getting Cannot read property 'apply' of undefined while using webpack (sometimes) "
      },
      {
        "user": "hejsek",
        "created_at": "2017-02-26T00:16:18Z",
        "body": "I'm having same issue. Strange is than I'm getting this error only on Android default browser and IE."
      }
    ]
  },
  {
    "number": 2423,
    "title": "Moving files after build OR output images to specific directory when using resolve-url",
    "created_at": "2016-05-01T04:58:51Z",
    "closed_at": "2016-08-28T07:49:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2423",
    "body": "I'm trying to build all my assets and have them output to three specific subdirectories: `images`, `stylesheets`, and `javascripts`. (Yes, just like Rails.)\n\nGetting my CSS and JS into the `stylesheets` and `javascripts` subdirectories is easy:\n\n``` js\nvar extractCSS = new ExtractTextPlugin('stylesheets/[name].css')\n\nconfig.output = {\n  filename: 'javascripts/[name].js'\n}\n```\n\nBut I can't figure out how to get images/fonts/etc. into an `images` subdirectory. Right now, I have a file loader configured like this:\n\n``` js\nconfig.module = {\n  loaders: [\n    { test: /\\.(ttf|eot|svg|png|jpg|gif)$/, loader: \"file-loader\" }\n  ]\n}\n```\n\nThe loader spits out all images to the base context directory, whereas I want them to go into an `images` subdirectory. So I tried this:\n\n``` js\nconfig.module = {\n  loaders: [\n    { test: /\\.(ttf|eot|svg|png|jpg|gif)$/, loader: \"file-loader?name=images/[hash].[ext]\" }\n  ]\n}\n```\n\nThis configuration works nicely, but then it messes up my resolve-url loaders, which are configured like this:\n\n``` js\nconfig.module = {\n  loaders: [\n    { test: /\\.scss$/, loader: extractCSS.extract([\"css?sourceMap\", \"resolve-url\", \"sass?sourceMap\"]) },\n    { test: /\\.css$/, loader: extractCSS.extract([\"css?sourceMap\", \"resolve-url\"]) },\n  ]\n}\n```\n\nWhat ends up happening is that the resolve-url loader replaces all the URL's in my SASS and CSS with filenames that are prefixed with `images`. However, I don't want this because my server won't serve from an `images` subdirectory (_cough cough_ Rails _cough cough_). I want the URL's in SASS/CSS to remain unprefixed but I want the images/fonts/etc. to go into an `images` subdirectory.\n\nHow can I do this with webpack? My thoughts are either 1) do some kind of configuration with the file and resolve-url loaders that I'm not familiar with, or 2) move the files after the build from the context base path to an `images` subdirectory.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2423/comments",
    "author": "ersinakinci",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:49:01Z",
        "body": "Can you re-open at Stack Overflow for more input?\n"
      }
    ]
  },
  {
    "number": 2416,
    "title": "\"ERROR in Entry module not found\" for module that exists",
    "created_at": "2016-04-29T21:01:16Z",
    "closed_at": "2016-04-30T22:27:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2416",
    "body": "Bash log:\n\n``` bash\n~/code/blockai/merkletree$ npm run gh-pages:build\n\n> merkletree@1.4.0 gh-pages:build /Users/olalonde/code/blockai/merkletree\n> cd demo && rm -rf dist && webpack\n\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.13.0\nTime: 25ms\n\nERROR in Entry module not found: Error: Cannot resolve module 'app.js' in /Users/olalonde/code/blockai/merkletree/demo/src\n~/code/blockai/merkletree$ ls /Users/olalonde/code/blockai/merkletree/demo/src\napp.js\n~/code/blockai/merkletree$ cat demo/webpack.config.js\nmodule.exports = {\n  context: `${__dirname}/src`,\n  entry: 'app.js',\n  output: {\n    filename: 'bundle.js',\n    path: `${__dirname}/dist`,\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['react', 'es2015'],\n        },\n      },\n    ],\n  },\n}\n~/code/blockai/merkletree$ node --version\nv6.0.0\n```\n\nThe module exists on the filesystem, etc. but webpack says it can't resolve the module. Here's the content of `app.js`:\n\n``` javascript\nimport ReactDOM from 'react-dom'\nimport React from 'react'\n\nconst App = () => (\n  <p>hello world!</p>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2416/comments",
    "author": "olalonde",
    "comments": [
      {
        "user": "olalonde",
        "created_at": "2016-04-29T21:05:58Z",
        "body": "Hmm, replacing\n\n``` javascript\n  context: `${__dirname}/src`,\n  entry: 'app.js',\n```\n\nwith \n\n``` javascript\n  // context: `${__dirname}/src/`,\n  entry: `${__dirname}/src/app.js`,\n```\n\nfixed the error. Maybe I'm misunderstanding the meaning of the `context` option?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-04-30T22:23:38Z",
        "body": "``` js\n  context: `${__dirname}/src`,\n  entry: './app.js',\n```\n\nentry is a module request, `app.js` will look for a module named `app.js` in your node_modules\n"
      },
      {
        "user": "olalonde",
        "created_at": "2016-04-30T22:27:54Z",
        "body": "Oh, thanks.\n"
      }
    ]
  },
  {
    "number": 2409,
    "title": "Multiple entry generates multiple CSS， How to merge css？",
    "created_at": "2016-04-28T07:57:01Z",
    "closed_at": "2016-04-29T10:42:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2409",
    "body": "Webpack.config\n\n```\nvar path = require('path');\nvar glob = require('glob');\nvar webpack = require('webpack');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar config = {\n    entry: {\n        post: \"./post\",\n        about: \"./about\"\n    },\n    output: {\n        path: path.join(__dirname, './dist'),\n        filename: '[name].js',\n        publicPath: './dist/',\n        chunkFilename: '[id].chunk.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js?$/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015']\n            },\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n        }, {\n            test: /\\.less$/,\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader!less-loader\")\n        }, {\n            test: /\\.(png|jpe?g|gif)$/,\n            loader: 'url-loader?limit=8192&name=imgs/[name]-[hash].[ext]'\n        }]\n    },\n    plugins: [\n        new ExtractTextPlugin(\"app.css\", {\n            allChunks: true\n        })\n    ]\n};\nmodule.exports = config;\n```\n\npost.js\n\n```\nrequire('./post.css');\n```\n\npost.css\n\n```\n.post {\n    width: 100px;\n    height: 100px;\n}\n```\n\nabout.js\n\n```\nrequire('./about.css');\n```\n\nabout.css\n\n```\n.about {\n    font-size: 12px;\n}\n```\n\nI use ExtractTextPlugin, Now generates app.css\n\n```\n.post {\n    width: 100px;\n    height: 100px;\n}\n```\n\nLooks only post.css,how can i merge about.css and post.css\nLike this\n\n```\n.about {\n    font-size: 12px;\n}\n.post {\n    width: 100px;\n    height: 100px;\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2409/comments",
    "author": "QzhouZ",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-29T10:42:00Z",
        "body": "`new ExtractTextPlugin(\"[name].css\", {`\n"
      },
      {
        "user": "cpsubrian",
        "created_at": "2016-06-17T20:42:36Z",
        "body": "This works to create multiple files with the correct (entry-based) names. What I'd like to do (and maybe the OP too?) is create one chunk from all the css.\n\n`new webpack.optimize.LimitChunkCountPlugin({maxChunks: 1})` would work if I wanted all chunks merged but I only want the css chunks merged.\n\nSo it would seems this could be solved with either:\n1. A way to add a plugin targeting a specific file type (regex?)\n2. A way to merge extracted text (by extract id?)\n\nAny ideas thoughts would be appreciated 😄 \n"
      },
      {
        "user": "e-e-e",
        "created_at": "2018-04-05T07:09:52Z",
        "body": "It seems that this issue was closed when the question was not really answered. \r\nIs it possible to reopen this issue? An answer was given for how to separate the css into individual files, not how to merge them, or if merging was at all a possibility.  "
      },
      {
        "user": "montogeek",
        "created_at": "2018-04-05T07:11:40Z",
        "body": "@e-e-e Create a new issue please"
      },
      {
        "user": "e-e-e",
        "created_at": "2018-04-05T07:37:14Z",
        "body": "@montogeek I am not sure if the issue template was the same as when this was first raised - but looking at opening a new issue for this, it seems like it would be closed immediately as its not really a feature request or a bug, but a question."
      }
    ]
  },
  {
    "number": 2406,
    "title": "WebPacked node.js MDNS app missing module after packing.",
    "created_at": "2016-04-28T06:05:25Z",
    "closed_at": "2016-08-07T01:08:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2406",
    "body": "_From @TekSiDoT on April 27, 2016 12:20_\n\nThe (very basic) app follows the local tutorial and works fine after transpiling from Typescript to .js as standalone app.\n\nSource:\n\n```\n/// <reference path='../typings/node.d.ts' />\n/// <reference path='../typings/browser/ambient/mdns/index.d.ts' />\n\nimport mdns = require('mdns');\n\nexport default function main():void {\nlet ad = mdns.createAdvertisement(mdns.tcp('http'), 4322)\nad.start();    \n\nlet browser = mdns.createBrowser(mdns.tcp('http'));\n\nbrowser.on('serviceUp', function(service) {\n  console.log(\"service up: \", service);\n});\nbrowser.on('serviceDown', function(service) {\n  console.log(\"service down: \", service);\n});\nbrowser.start();\n}\nmain();\n```\n\nWebpack config:\n\n```\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nvar CleanWebpackPlugin = require('clean-webpack-plugin');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/app.ts',\n  output: {\n    filename: './dist/lib/PAKvhc.js'\n  },\n  target: \"node\",\n  resolve: {\n    extensions: ['', '.webpack.js', '.web.js', '.ts', '.js', '.node']\n  },\n  module: {\n    loaders: [\n      { test: /\\.ts$/, loader: 'ts-loader' },\n      { test: /\\.node$/, loader: 'node-loader' }\n    ]\n  },\n  node: {\n      tls: 'empty',\n      fs: 'empty'\n    },\n    plugins: [\n        new CleanWebpackPlugin(['dist'], {\n            verbose: true, \n            dry: false\n        }),\n        new webpack.optimize.UglifyJsPlugin({\n            compress: {\n                warnings: false\n            },\n            comments: false,\n            sourceMap: false\n        }),                \n        new CopyWebpackPlugin([\n            { from: 'src/dist', to: 'dist' },\n        ])\n    ]    \n}\n```\n\nNode-mdns succesfully compiles using node-gyp, webpack itself throws a warning during its run:\n\n```\nclean-webpack-plugin: D:\\git\\PAKmagellan\\dist has been removed.\nts-loader: Using typescript@1.8.10 and D:\\git\\PAKmagellan\\tsconfig.json\nHash: ebcb42357b35fff3155d\nVersion: webpack 1.13.0\nTime: 1397ms\n                            Asset       Size  Chunks             Chunk Names\n             ./dist/lib/PAKvhc.js    13.6 kB       0  [emitted]  main\n                 dist\\config.json  130 bytes          [emitted]\n               dist\\node\\node.exe    14.3 MB          [emitted]\n               dist\\node\\node.lib     625 kB          [emitted]\ndist\\licenses\\node.js\\LICENSE.txt    54.6 kB          [emitted]\n         dist\\licenses\\ws\\license    1.36 kB          [emitted]\n     dist\\licenses\\xmldom\\LICENSE  143 bytes          [emitted]\n    + 17 hidden modules\n\nWARNING in ./~/mdns/lib/dns_sd.js\nCritical dependencies:\n24:19-46 the request of a dependency is an expression\n32:21-50 the request of a dependency is an expression\n @ ./~/mdns/lib/dns_sd.js 24:19-46 32:21-50\n```\n\nRunning the bundled causes the following error:\n\n```\n.\\node\\node .\\lib\\PAKvhc.js\nD:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:187\n                return map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n                                                 ^\n\nError: Cannot find module '..\\build\\Release\\dns_sd_bindings'.\n    at D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:187:42\n    at webpackContextResolve (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:187:90)\n    at webpackContext (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:184:30)\n    at Object.<anonymous> (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:143:45)\n    at __webpack_require__ (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:20:30)\n    at Object.<anonymous> (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:74:16)\n    at __webpack_require__ (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:20:30)\n    at Object.<anonymous> (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:52:13)\n    at __webpack_require__ (D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:20:30)\n    at D:\\git\\PAKmagellan\\dist\\lib\\PAKvhc.js:40:18\n```\n\nI've unsuccesfully tried numerous combinations of combining webpack and the built version with different folder structures.\n\n_Copied from original issue: agnat/node_mdns#162_\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2406/comments",
    "author": "TekSiDoT",
    "comments": [
      {
        "user": "TekSiDoT",
        "created_at": "2016-04-28T06:05:26Z",
        "body": "_From @agnat on April 27, 2016 21:23_\n\nSince mdns works fine in a vanilla node environment I suspect this is a webpack issue. I don't know webpack, so I'm not much help in debugging this... I'm afraid.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-04-29T10:45:23Z",
        "body": "`mdns` is a native module. You need to use the `externals` option to exclude it from the bundle provide the npm installed module in the target environment\n"
      }
    ]
  },
  {
    "number": 2405,
    "title": "How to retain the directory structure of the bundle.js of entry ",
    "created_at": "2016-04-28T02:27:07Z",
    "closed_at": "2016-08-07T19:58:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2405",
    "body": "``` js\ncontext: __dirname + \"/page\",\nentry: {\n  pageOne: './pageone/index.js',\n  pageTwo: './pagetwo/index.js'\n},\noutput: {\n  path: path.join(__dirname, 'dist'),\n  filename: \"[name].js\",\n  publicPath: '/assets/'\n},\n```\n\ndirectory structure\n\npage\n--pageone\n----index.js\n--pageTwo\n----index.js\n\nretult\n\ndist\n--pageone\n----pageOne.js\n--pagetwo\n----pageTwo.js\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2405/comments",
    "author": "liximomo",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-29T10:46:30Z",
        "body": "``` js\nentry: {\n  \"pageone/pageOne\": \"...\"\n```\n"
      }
    ]
  },
  {
    "number": 2400,
    "title": "how to throw an error",
    "created_at": "2016-04-26T12:06:51Z",
    "closed_at": "2016-04-29T15:22:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2400",
    "body": "In some cases, i want throw an error and break \nlike \n`if(xxx) {\nthrow 'tip';\n}`\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2400/comments",
    "author": "fanjunzhi",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-29T15:22:52Z",
        "body": "not related to webpack\n"
      }
    ]
  },
  {
    "number": 2389,
    "title": "Inconsistencies within DefinePlugin output",
    "created_at": "2016-04-25T06:49:16Z",
    "closed_at": "2017-01-22T16:46:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2389",
    "body": "Hi,\n\nI've noticed following strange behavior.\n\nInput file:\n\n```\nvar gg = 5, isServer = (typeof window == 'undefined');\n\nif (typeof window) {\n  gg = 6;\n}\n\nif (!(typeof window)) {\n  gg = 7;\n}\n\nif (typeof window === true) {\n  gg = 8;\n}\n\nif (typeof window === false) {\n  gg = 9;\n}\n\nif (isServer) {\n  gg = 10;\n}\n\nif (!isServer) {\n  gg = 11;\n}\n\nif (isServer === true) {\n  gg = 12;\n}\n\nif (isServer === false) {\n  gg = 13;\n}\n```\n\nwith this config:\n\n```\nnew webpack.DefinePlugin({\n    isServer: false,\n    'typeof window': true\n})\n```\n\nI get this output:\n\n```\nvar gg = 5, isServer = (typeof window == 'undefined');\n\nif (true) {\n  gg = 6;\n}\n\nif (false) {\n  gg = 7;\n}\n\nif (true) {\n  gg = 8;\n}\n\nif (false) {\n  gg = 9;\n}\n\nif (isServer) {\n  gg = 10;\n}\n\nif (!isServer) {\n  gg = 11;\n}\n\nif (isServer === true) {\n  gg = 12;\n}\n\nif (isServer === false) {\n  gg = 13;\n}\n```\n\n– one instance of `typeof window` wasn't replaced.\n\nwith this config:\n\n```\nnew webpack.DefinePlugin({\n    isServer: false,\n    'typeof window': '\"object\"'\n})\n```\n\nI get this output:\n\n```\nvar gg = 5, isServer = (\"object\" == 'undefined');\n\nif (true) {\n  gg = 6;\n}\n\nif (false) {\n  gg = 7;\n}\n\nif (\"object\" === true) {\n  gg = 8;\n}\n\nif (\"object\" === false) {\n  gg = 9;\n}\n\nif (isServer) {\n  gg = 10;\n}\n\nif (!isServer) {\n  gg = 11;\n}\n\nif (isServer === true) {\n  gg = 12;\n}\n\nif (isServer === false) {\n  gg = 13;\n}\n```\n\n– all instances of `typeof window` were replaced.\n\nPS. In both cases no instances of `isServer` haven't been touched.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2389/comments",
    "author": "alexindigo",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-29T11:19:48Z",
        "body": "It doesn't make sense to define `typeof window` to `true`. `typeof` always returns a string.\n\nIt's correct that `isServer` is not replaced. It's not used a \"free variable\" (because of the `var isServer`). Only free variables are replaced.\n"
      },
      {
        "user": "alexindigo",
        "created_at": "2016-04-29T15:32:26Z",
        "body": "@sokra I just experimented to see how replacement works, and this inconsistency stroke me as the odd one.\n\nAnd by free variable, do you global ones, or not explicitly defined in the current context or something else? Is there a doc I can read more about free variables?\n\nGiving existing example what would the best way (within webpack universe) to get that `if (isServer) {` branches to be removed from the bundle?\n\nThank you.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-22T16:46:45Z",
        "body": "> And by free variable, do you global ones, or not explicitly defined in the current context or something else? Is there a doc I can read more about free variables?\r\n\r\nFree as in not global, local, or anything. If the free variables were not replaced, the code would crash (one way to put it).\r\n\r\n> Giving existing example what would the best way (within webpack universe) to get that if (isServer) { branches to be removed from the bundle?\r\n\r\nI would do `if (env === 'SERVER')` or similar (could be `process.env` too if you like that convention).\r\n\r\nFeel free to re-open at Stack Overflow for more answers."
      }
    ]
  },
  {
    "number": 2388,
    "title": "Errors when trying to build with `mocha-loader`",
    "created_at": "2016-04-25T01:41:32Z",
    "closed_at": "2016-08-07T01:09:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2388",
    "body": "I'm trying to build test files with webpack using `mocha-loader` and `babel-loader` and when I try running `webpack` I get these warnings/errors:\n\n```\nWARNING in ./~/mocha-loader/EnhancedMocha.js\nCritical dependencies:\n29:24-37 the request of a dependency is an expression\n @ ./~/mocha-loader/EnhancedMocha.js 29:24-37\n\nWARNING in ./~/mocha/lib/mocha.js\nCritical dependencies:\n167:20-37 the request of a dependency is an expression\n199:17-30 the request of a dependency is an expression\n219:26-39 the request of a dependency is an expression\n @ ./~/mocha/lib/mocha.js 167:20-37 199:17-30 219:26-39\n\nWARNING in ./~/mocha/~/minimatch/minimatch.js\nCritical dependencies:\n6:5-12 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/mocha/~/minimatch/minimatch.js 6:5-12\n\nWARNING in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'markdown' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 66:11-30\n\nWARNING in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'discount' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 69:13-32\n\nWARNING in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'markdown-js' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 72:15-37\n\nWARNING in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'marked' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 75:17-34\n\nERROR in ./~/mocha/index.js\nModule not found: Error: Can't resolve './lib-cov/mocha' in '/Users/calebmer/Projects/pbx.me/node_modules/mocha'\n @ ./~/mocha/index.js 2:4-30\n\nERROR in ./~/jade/index.js\nModule not found: Error: Can't resolve './lib-cov/jade' in '/Users/calebmer/Projects/pbx.me/node_modules/jade'\n @ ./~/jade/index.js 3:4-29\n\nERROR in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'sass' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 24:15-30\n\nERROR in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'stylus' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 35:17-34\n\nERROR in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'less' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 50:4-19\n\nERROR in ./~/jade/lib/filters.js\nModule not found: Error: Can't resolve 'coffee-script' in '/Users/calebmer/Projects/pbx.me/node_modules/jade/lib'\n @ ./~/jade/lib/filters.js 94:13-37\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2388/comments",
    "author": "calebmer",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:09:47Z",
        "body": "Can you re-open at Stack Overflow?\n"
      }
    ]
  },
  {
    "number": 2385,
    "title": "Hot reload after runtime error (ReferenceError)",
    "created_at": "2016-04-24T12:05:27Z",
    "closed_at": "2016-08-07T01:12:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2385",
    "body": "Say have I a module that is `accepted` for hot reload (maybe not by itself but by parents) - so full page reload is not happening.\n\nI made some changes (**add ABC** reference somwhere) to file and after say I have a `ReferenceError` in the the file:\n\n> ReferenceError: ABC is not defined\n\n**This errors occures when you try to use ABC but had forgot to import it**\n\nAfter this I make corrections (**add import of ABC**) and error goes away. But hot reload stops working. Need to do a page reload (manually).\n\nIs possible to fix this behaviour?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2385/comments",
    "author": "wclr",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:12:33Z",
        "body": "Can you reopen at Stack Overflow?\n"
      }
    ]
  },
  {
    "number": 2381,
    "title": "Can we upgrade the project to the latest version of node?",
    "created_at": "2016-04-23T15:08:53Z",
    "closed_at": "2016-08-07T01:11:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2381",
    "body": "It would be nice to use arrow functions, const, let, etc.. I see a lot of big projects sticking to ES5 though, like React, while some are converting to ES6+. Is there anyway we could upgrade to Node v.5.5.0? And if not, may I ask the reasoning behind that?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2381/comments",
    "author": "zwhitchcox",
    "comments": [
      {
        "user": "Someguy123",
        "created_at": "2016-04-23T23:13:44Z",
        "body": "I'd say that's a terrible idea. The current LTS is Node 4.4.3 - and that needs to be supported, because that's what most people will be using in production.\n\nThings like React get around it thanks to Webpack+BabelJS, so that you can use either ES5 or ES6.\n"
      },
      {
        "user": "zwhitchcox",
        "created_at": "2016-04-24T00:44:42Z",
        "body": "Could we use babel on this?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:11:58Z",
        "body": "Probably not going to happen as someone still needs to do all that work of porting over and transpiling.\n"
      }
    ]
  },
  {
    "number": 2371,
    "title": "Debugging a segmentation fault",
    "created_at": "2016-04-21T12:15:35Z",
    "closed_at": "2016-04-21T13:01:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2371",
    "body": "Getting a seg fault when running my webpack:\n`69% 352/354 build modulesSegmentation fault: 11`\nI understand this is unlikely an issue with webpack itself but I'm not sure the best way to go about debugging this issue. I've tried some other versions of node and node-sass, which I've seen looks like the culprit for some others with this issue, but still getting this error. It has recently arisen as a cached version I have been working on works fine, just a fresh install that I'm seeing this.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2371/comments",
    "author": "robcalcroft",
    "comments": [
      {
        "user": "robcalcroft",
        "created_at": "2016-04-21T12:18:25Z",
        "body": "Deps\n\n```\n{\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.6.5\",\n    \"babel-eslint\": \"^6.0.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"eslint\": \"^2.5.3\",\n    \"exports-loader\": \"^0.6.3\",\n    \"file-loader\": \"^0.8.5\",\n    \"html-webpack-plugin\": \"^2.15.0\",\n    \"image-webpack-loader\": \"^1.6.3\",\n    \"imports-loader\": \"^0.6.5\",\n    \"node-sass\": \"^3.4.2\",\n    \"sass-loader\": \"^3.2.0\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"^1.12.14\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^2.0.0\",\n    \"express\": \"^4.13.4\",\n    \"jquery\": \"^2.2.2\",\n    \"json-loader\": \"^0.5.4\",\n    \"localforage\": \"^1.4.0\",\n    \"materialize-css\": \"^0.97.6\",\n    \"moment\": \"^2.12.0\",\n    \"morgan\": \"^1.7.0\",\n    \"react\": \"^0.14.8\",\n    \"react-dom\": \"^0.14.8\",\n    \"react-router\": \"^2.0.1\",\n    \"request\": \"^2.69.0\",\n    \"sweetalert\": \"^1.1.3\"\n  }\n}\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-21T12:58:45Z",
        "body": ">  It has recently arisen as a cached version I have been working on works fine, just a fresh install that I'm seeing this.\n\nYou could try locking the version of `sass-loader` to the cached version and then bumping version a step at a time to see when it starts crashing. That will give us the offending version. Hopefully the resulting diff between a working and not working version helps.\n"
      },
      {
        "user": "robcalcroft",
        "created_at": "2016-04-21T13:01:13Z",
        "body": "Yeh i've just fixed it by using 3.4.2 over 3.5.2 gonna close this as its a node-sass issue thanks :)\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-21T13:06:39Z",
        "body": "@robcalcroft Ok, make sure the issue has been reported upstream. 👍\n"
      },
      {
        "user": "robcalcroft",
        "created_at": "2016-04-21T13:09:11Z",
        "body": "@bebraw have done!\n"
      }
    ]
  },
  {
    "number": 2365,
    "title": "require is not defined when using resolve.alias/noParse for minified react ",
    "created_at": "2016-04-20T11:46:57Z",
    "closed_at": "2016-04-23T15:09:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2365",
    "body": "I'm using a following config to use provided minified version (React 15.0):\n\n```\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/client.js',\n  devtool: 'eval',\n  output: { ... },\n  module: {\n    noParse: /\\.min\\.js/,\n    loaders: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loaders: ['babel-loader'],\n      query: {\n        presets: ['es2015', 'react'],\n      }\n    }]\n  },\n  resolve: {\n    modulesDirectories: ['node_modules'],\n    alias: {\n      'react': 'react/dist/react.min.js',\n      'react-dom': 'react-dom/dist/react-dom.min.js'\n    }\n  }\n};\n```\n\nIt seems that webpack correctly merges minified libraries but \"require\" function is not provided and the whole bundle fails at point when the first require function is used within these two libs with `require is not defined`. What could I use for webpack 2.x to make this work?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2365/comments",
    "author": "quirm",
    "comments": [
      {
        "user": "Someguy123",
        "created_at": "2016-04-23T15:00:43Z",
        "body": "@quirm From the docs on **noParse**:\n\n> The files are expected to have no call to require, define or similar. They are allowed to use exports and module.exports.\n"
      },
      {
        "user": "quirm",
        "created_at": "2016-04-23T15:09:01Z",
        "body": "Right, thank you for info. I got it to the same size as minified version with properly set webpack config.\n"
      }
    ]
  },
  {
    "number": 2361,
    "title": "Question - can a Webpack project import another Webpack library.",
    "created_at": "2016-04-19T19:27:41Z",
    "closed_at": "2016-12-24T18:13:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2361",
    "body": "Hey there,\n\nSimple question - what's the best way for a Webpack project to depend on another Webpack project?\n\nAre there any caveats we need to be aware of?\n\nSo far I have configured a Webpack build to create a dist/bundle.js file - but how does Webpack manage dependencies which have been packed into a single dist/bundle.js file by another version of Webpack?\n\nWe currently have dependent NPM packages which are built using Browserify - can we convert these to Webpack relatively easily?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2361/comments",
    "author": "davewthompson",
    "comments": [
      {
        "user": "Someguy123",
        "created_at": "2016-04-23T23:32:19Z",
        "body": "I would recommend building that other project using your existing WebPack setup, rather than trying to import the bundle. Could have various issues trying to import an already bundled file, but I don't really know.\n\nYou should be able to use any npm package with Webpack just by using `require('the-package');` or `import * as Something from 'package'` (ES6)\n"
      },
      {
        "user": "davewthompson",
        "created_at": "2016-05-20T10:41:40Z",
        "body": "Great - thanks @Someguy123 - I'll try that.\n"
      },
      {
        "user": "moo3",
        "created_at": "2016-07-15T03:47:08Z",
        "body": "I have a similar situation; where I need an already WebPack bundled project (Core) into another WebPack project (App). I don't see a cleaner way to do this. \n\nThe only way I could get the Core to work with App is by exposing it as a global (window.) variable, which I'm not inclined to do. I've tried DLL, Library approaches - both works as long as the source (Core) is exported as Var, when exported as AMD, at runtime, there is an expectation that an AMD module loader must be available, something like RequireJS to handle define.\n\nPerhaps, I'm overcomplicating. Any pointers? \n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T18:13:42Z",
        "body": "Set `module` field at package.json. webpack 2 can pick that up making it possible to consume other webpack projects.\r\n\r\nFeel free to re-open at Stack Overflow more ideas."
      }
    ]
  },
  {
    "number": 2346,
    "title": "Under devServer key in webpack.config.js, I set hot: true option, but it dosen't work ",
    "created_at": "2016-04-16T08:22:17Z",
    "closed_at": "2016-04-17T07:39:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2346",
    "body": "CLI: webpack-dev-server --hot works, \nbut\n\n``` js\ndevServer:{\n    hot: true\n}\n```\n\nit throws Uncaught Error: [HMR] Hot Module Replacement is disabled.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2346/comments",
    "author": "Authorlove",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-16T08:30:25Z",
        "body": "If you use `hot: true` that way, I think you need to set\n\n``` javascript\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\nA little confusing, yeah.\n"
      },
      {
        "user": "Authorlove",
        "created_at": "2016-04-18T04:51:11Z",
        "body": "Thanks for your help!\n"
      }
    ]
  },
  {
    "number": 2343,
    "title": "[plugins] Injecting a dependency and source code into a top-level module",
    "created_at": "2016-04-15T18:39:52Z",
    "closed_at": "2017-08-26T12:41:57Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2343",
    "body": "Hi! I'm trying to accomplish something a little weird with a webpack plugin and I think it should be possible, I'm just not sure how with webpack's internals.\n\nI have multiple entry points that become named chunks. For each chunk, I want to take the top-level module and inject a dependency into it, and also add source code to the front of the module to execute the dependency's code. There's nothing special about the dependency; it's just a file on the filesystem, and it's also used in some other modules.\n\nSo my question is - what hooks do I need to plug into? At the moment i'm trying to use `\"optimize-chunks\"`, and then check if the chunk has a name and an origin. If it does, I feed the Compilation object a dependency I made up with addModuleDependencies:\n\n``` javascript\nMyPlugin.prototype.apply = function(compiler) {\n    compiler.plugin('compilation', function( compilation, params ) {\n\n        compilation.plugin('optimize-chunks', function( chunks ) {\n            chunks.forEach( function ( chunk ) {\n                if ( chunk.origins.length === 0 ) {\n                    return;\n                }\n\n                var chunkOrigin = chunk.origins[ 0 ];\n\n                if ( chunkOrigin.name ) {\n                    compilation.addModuleDependencies(\n                        chunkOrigin,\n                        [ [ {\n                            module: null,\n                            request: 'owen/user-timing',\n                            userRequest: 'owen/user-timing',\n                            optional: false\n                        } ] ]\n                    );\n                }\n            } );\n        });\n    });\n};\n```\n\nThis is pretty clearly wrong since it doesn't work but I haven't been able to find the right point at which I can get into where Webpack figures out what files are being resolved. A pointer to the right line would be awesome.\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2343/comments",
    "author": "wayspurrchen",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-20T21:12:05Z",
        "body": "What's the use case for this?\n\nRun some code before each chunk?\n"
      },
      {
        "user": "wayspurrchen",
        "created_at": "2016-04-21T00:59:57Z",
        "body": "@sokra Yes, pretty much, but we also want to run some code after the contents of the top chunk. I have a lot of chunks and would like to emit analytics data to our servers about the performance of each chunk.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-29T15:11:50Z",
        "body": "@TheLarkInn This is related to analytics so you might want to have a good look."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T10:12:01Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:41:57Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 2339,
    "title": "ProvidePlugin can't provide function for TS `__awaiter` call",
    "created_at": "2016-04-15T10:08:35Z",
    "closed_at": "2017-08-11T10:08:25Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2339",
    "body": "Compiled code:\n\n```\n    /***/ 405:\n    /***/ function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */(function(__decorate, __metadata) {\"use strict\";\n    const core_1 = __webpack_require__(4);\n    const router_1 = __webpack_require__(367);\n    __webpack_require__(121);\n    let RedirectService = class RedirectService {\n        constructor(router) {\n            this.router = router;\n        }\n        redirect(link, delay = 0) {\n            return __awaiter(this, void 0, Promise, function* () {\n                yield this.delay(delay);\n                this.router.navigate([link]);\n            });\n        }\n        delay(delay) {\n            return new Promise((resolve) => setTimeout(resolve, delay));\n        }\n    };\n    RedirectService = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [router_1.Router])\n    ], RedirectService);\n    exports.RedirectService = RedirectService;\n\n    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3)))\n\n/***/ },\n\n```\n\nConfig:\n\n```\n plugins: [\n            new webpack.ProvidePlugin({\n                '__awaiter': 'typescript-awaiter',\n                '__decorate': 'typescript-decorate',\n                '__metadata': 'typescript-metadata'\n            })\n        ]\n```\n\nProblem: ProvidePlugin can't provide function for TS `__awaiter` call.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2339/comments",
    "author": "sanex3339",
    "comments": [
      {
        "user": "sanex3339",
        "created_at": "2016-04-15T10:19:44Z",
        "body": "\"Dan\"\n\n> This may be because typescript-decorate exports its function as a named, rather than default, export.\n\nHi, no. I changed all these modules to \nmodule.exports = function (thisArg, _arguments, P, generator) { //... }\nbut same problem.\n"
      },
      {
        "user": "sanex3339",
        "created_at": "2016-04-16T10:42:39Z",
        "body": "still looking for solution\n"
      },
      {
        "user": "Delagen",
        "created_at": "2016-09-07T06:24:10Z",
        "body": "I am looking for solution when import JS files from node_modules. Seems that filed does not processed at all\n"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:11:59Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      }
    ]
  },
  {
    "number": 2337,
    "title": "Does publicPath supported variables?",
    "created_at": "2016-04-15T07:50:31Z",
    "closed_at": "2016-08-07T19:59:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2337",
    "body": "webpack.config.js:\n\n``` javascript\nmodule.exports = {\n    entry: {\n        \"trip\": path.resolve(__dirname, \"./trip/main.js\"),\n        \"o2o\": path.resolve(__dirname, \"./o2o/main.js\")\n    },\n    output: {\n        path: path.resolve(__dirname, \"./dist\"),\n        publicPath: \"./dist/[name]/\",  // has any way to replace [name] with keys set in \"entry\" like \"trip\", \"o2o\"?\n        filename: '[name].[chunkhash:6].js'\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2337/comments",
    "author": "luozhihua",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-20T19:45:53Z",
        "body": "`[name]` is not supported in public path.\n\n``` js\nvar entry = {\n        \"trip\": path.resolve(__dirname, \"./trip/main.js\"),\n        \"o2o\": path.resolve(__dirname, \"./o2o/main.js\")\n};\nmodule.exports = Object.keys(entry).map(function(name) {\n  return {\n    entry: entry[name],\n    output: {\n        path: path.resolve(__dirname, \"./dist\"),\n        publicPath: \"./dist/\" + name + \"/\",\n        filename: name + '.[chunkhash:6].js'\n    }\n  };\n});\n```\n"
      }
    ]
  },
  {
    "number": 2335,
    "title": "Webpack dev server with multiple entry files and dedupe plugin does not properly update",
    "created_at": "2016-04-14T14:58:53Z",
    "closed_at": "2016-12-24T07:25:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2335",
    "body": "When using the dev server with multiple entry points the initial render works fine. As soon as a file is changed though, the next execution will throw\n\n`Uncaught TypeError: Cannot read property 'apply' of undefined`\n\nWhen both apps are open, one of them will receive hot updates and break when refreshing the page. The other one will not receive hot updates, but render correctly when refreshing the page.\n\nIs there anything special that needs to be taken into account when using multiple entry points?\n\n// edit\nIt does not matter whether hot reloading is enabled or not - as soon as two entry points are present and one gets updated, the build is broken after refreshing the page.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2335/comments",
    "author": "johanneslumpe",
    "comments": [
      {
        "user": "johanneslumpe",
        "created_at": "2016-04-14T15:41:28Z",
        "body": "After investigating more, it seems that it has to do with the dedupe plugin. So the actually issue seems to be that when having multiple entry points and the dedupe plugin, something breaks.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T07:25:51Z",
        "body": "I'm closing this as there's no `DedupePlugin` in webpack 2 anymore."
      }
    ]
  },
  {
    "number": 2331,
    "title": "\"Invalid chunkNames argument\" in CommonsChunkPlugin, when using UglifyJsPlugin",
    "created_at": "2016-04-13T23:58:50Z",
    "closed_at": "2016-12-24T18:03:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2331",
    "body": "I'm getting an \"Invalid chunkNames argument\" in my gulp/webpack build task.\n\n```\nError: Invalid chunkNames argument\n    at Compilation.<anonymous> (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\optimize\\CommonsChunkPlugin.js:65:11)\n    at Compilation.applyPlugins (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\tapable\\lib\\Tapable.js:26:37)\n    at Compilation.seal (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\Compilation.js:522:7)\n    at Compiler.<anonymous> (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\Compiler.js:397:15)\n    at C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\tapable\\lib\\Tapable.js:103:11\n    at Compilation.<anonymous> (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\Compilation.js:445:10)\n    at C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\Compilation.js:417:12\nProcess terminated with code 8.\n    at C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\webpack\\lib\\Compilation.js:332:10\n    at C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\async\\lib\\async.js:52:16\n    at done (C:\\source\\swyfft\\swyf-website\\Swyfft.Web\\node_modules\\async\\lib\\async.js:246:17)\n```\n\nHere's the actual task:\n\n```\ngulp.task(\"min:js\", function () {\n    gulp.src('./App/App.ts')\n        .pipe(webpack({\n            entry: {\n                address: './App/Address.ts',\n                confirmation: './App/Confirmation.ts',\n                contact: './App/Contact.ts',\n                crm: './App/Crm.ts',\n                error: './App/Error.ts',\n                history: './App/History.ts',\n                login: './App/Login.ts',\n                map: './App/Map.ts',\n                purchase: './App/Purchase.ts',\n                scratch: './App/Scratch.ts',\n                quote: './App/Quote.ts',\n                agentPage: './App/AgentPage.tsx',\n                imsQueuePage: './App/ImsQueuePage.tsx'\n            },\n            output: {\n                filename: '[name].bundle.js'\n            },\n            resolve: {\n                // Add `.ts` and `.tsx` as resolvable extensions.\n                extensions: ['', '.webpack.js', '.web.js', '.ts', '.tsx', '.js']\n            },\n            module: {\n                loaders: [\n                  // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`\n                  { test: /\\.tsx?$/, loader: 'ts-loader' }\n                ]\n            },\n            plugins: [\n                new UglifyJsPlugin({\n                    sourceMap:true\n                }),\n                new CommonsChunkPlugin({\n                    name: \"commons\",\n                    minChunks: 2\n                })\n            ],\n            devtool: 'source-map'\n        }))\n        .pipe(gulp.dest(\"./App/\"));\n});\n```\n\nWhat's odd is that the error is clearly in the CommonsChunkPlugin, but it goes away if I remove the UglifyJsPlugin:\n\n```\n                // new UglifyJsPlugin({\n                //    sourceMap:true\n                // }),\n```\n\nAny ideas? (I should note that it also happens if I run webpack directly, without gulp, using the equivalent webpack.config.js file.)\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2331/comments",
    "author": "smithkl42",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2016-04-15T06:24:06Z",
        "body": "Did you try switching the order of the plugins? I'd guess that since plugins are defined as an array that webpack executes them in the order they were defined. Perhaps the CommonsChunkPlugin has trouble dealing with minified code. This is just I wild guess though (I haven't checked with webpacks source code).\n\nIf that's not the case I'd imagine that devs can better help you when you set up a quick sample repository where the bug can be reproduced easily.\n"
      },
      {
        "user": "smithkl42",
        "created_at": "2016-04-15T17:17:09Z",
        "body": "Yeah, I tried them in both orders. The problem showed up whether the UglifyJsPlugin() was listed first or second.\n"
      }
    ]
  },
  {
    "number": 2330,
    "title": "use production react",
    "created_at": "2016-04-13T17:54:22Z",
    "closed_at": "2016-04-17T07:38:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2330",
    "body": "",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2330/comments",
    "author": "FintanK",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-13T18:20:46Z",
        "body": "If you want to force webpack to use the production version of React, set\n\n``` javascript\nnew webpack.DefinePlugin({\n  'process.env.NODE_ENV': '\"production\"'\n}\n```\n"
      }
    ]
  },
  {
    "number": 2321,
    "title": "webpack ensure have number filename",
    "created_at": "2016-04-12T08:27:52Z",
    "closed_at": "2016-08-13T04:00:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2321",
    "body": "Code :\nrouter.map({\n    '/index' : {\n        component : function( resolve ){\n            require.ensure([\"../webcomponent/index/module-index.js\"], function(require) {\n               require( \"../webcomponent/index/module-index.js\" );\n            },'module-index');\n\n```\n    }\n},\n'/foo': {\n    component: function( resolve ){\n        require.ensure([\"../webcomponent/foo/foo.js\"], function(require) {\n           require( \"../webcomponent/foo/foo.js\" );\n        },'foo');\n    }\n}\n```\n\n})\nwhen I webpack the Code,while built file will has number fillname,example 1.module-index.js or 2.foo.js and so on;\nI want to know that why built file is that;\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2321/comments",
    "author": "DebugIsFalse",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-13T07:44:02Z",
        "body": "It depends on the `output.chunkFilename` option, which defaults to `[id].[name].js`\n"
      }
    ]
  },
  {
    "number": 2310,
    "title": "webpack init",
    "created_at": "2016-04-10T14:30:59Z",
    "closed_at": "2016-04-10T20:32:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2310",
    "body": "I havn't found an issue for that, but will webpack ever support init like npm does to quickly create a webpack.config.json?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2310/comments",
    "author": "MartinMuzatko",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-10T20:32:09Z",
        "body": "no, that's up to the user.\n"
      }
    ]
  },
  {
    "number": 2295,
    "title": "[Question]: when will `module` be undefined in UMD webpackBootstrap.",
    "created_at": "2016-04-07T22:45:26Z",
    "closed_at": "2016-04-08T15:06:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2295",
    "body": "In webpack UMD wrap, the 2nd **else** is detecting the `exports` ONLY here,  when would the `module` be empty and we have chance to attach it to the `exports`?  I saw when we call with any module, we always passing it as `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);`\n\nDoes it related with nodejs `module.exports=exports={};`?\n\n``` js\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory();\n    else if(typeof define === 'function' && define.amd)\n        define([], factory);\n    else {\n        var a = factory();\n        for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n    }\n})(this, function() {\n});\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2295/comments",
    "author": "pwang2",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-08T14:39:59Z",
        "body": "CommonJs 1.0 only specifies the `exports` object. node.js added `module` (CommonJs 1.1.1).\n"
      },
      {
        "user": "pwang2",
        "created_at": "2016-04-08T15:06:46Z",
        "body": "Gotcha, I am still too new to the awesomeness.  Thank you.\n"
      }
    ]
  },
  {
    "number": 2294,
    "title": "$ missing at runtime despite ProvidePlugin",
    "created_at": "2016-04-07T22:03:11Z",
    "closed_at": "2016-08-14T06:19:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2294",
    "body": "Webpack seems to not notice the use of globals intended to be provided by ProvidePlugin if they are not at the top-level of the file?\n\nIn the config I have:\n\n```\nnew webpack.ProvidePlugin({\n  $: 'jquery'\n}),\n```\n\nIf the source file uses \"$\" at the top-level things are fine; if the first use is in a callback then there are problems. E.g., \n\n```\nconsole.log($); // If I comment this out, the call below fails (ReferenceError: $ is not defined)\n\nclass Foo {\n  post() {\n    $.ajax(); // Error here if log above is commented out.\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2294/comments",
    "author": "richburdon",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-08T15:01:51Z",
        "body": "webpack 1 doesn't understand ES6 syntax. webpack 2 will do.\n"
      }
    ]
  },
  {
    "number": 2290,
    "title": "Module parse error (need an appropriate loader)",
    "created_at": "2016-04-07T05:31:37Z",
    "closed_at": "2016-04-07T07:17:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2290",
    "body": "Error msg is:\n\n``` bash\nERROR in ./config.js\nModule parse failed: /xxx/config.js Line 1: Unexpected token\nYou may need an appropriate loader to handle this file type.\n| import { resolve } from 'path';\n| \n| /// env\n```\n\nIt looks like a regular error reported by other issues. But it's not  exactly.\n\nThe webpack reported error about `import` syntax in `config.js`, but other files who use `import` remains ok.\n\nAnd my loaders config:\n\n``` js\n{\n    test: /\\.jsx?$/,\n    loader: ['babel'],\n    include: APP_PATH,\n    exclude: /(node_modules|bower_components)/,\n    query: {\n        presets: ['es2015', 'stage-0', 'react'],\n        plugins: DEBUG ? [['react-transform', {\n            transforms: [{\n                transform: 'react-transform-hmr',\n                imports: ['react'],\n                locals: ['module']\n            }, {\n                transform: 'react-transform-catch-errors',\n                imports: ['react', 'redbox-react']\n            }]\n        }]] : [],\n        babelrc: false\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2290/comments",
    "author": "creeperyang",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2016-04-07T05:39:57Z",
        "body": "You only apply the babel loader for .jsx and not .js files in your configuration.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-07T06:22:38Z",
        "body": "Instead of `loader: ['babel']` you should use either `loaders: ['babel']` or `loader: 'babel'`.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-04-07T07:06:22Z",
        "body": "@bebraw tested, and the same error.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-04-07T07:08:27Z",
        "body": "@marvinhagemeister `test: /\\.jsx?$/` is ok for both `js` and `jsx`.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-04-07T07:17:23Z",
        "body": "I checked the loader config again, and finally I recognize the reason:\n\nMy `config.js` is at the same dir with `APP_PATH`, so `babel-loader` wont handle it.\n\nThanks for all.\n"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2016-04-07T08:13:32Z",
        "body": "@creeperyang oh your right! My bad!\n"
      }
    ]
  },
  {
    "number": 2282,
    "title": "Compatibily of bundled file syntax  with web browsers",
    "created_at": "2016-04-05T11:43:49Z",
    "closed_at": "2016-04-08T07:47:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2282",
    "body": "Hi !\n\nI try to use a biojs module in a new component and I use webpack to bundle modules. When I use the bundled file in a html file , I obtain these error messages :\n\n« SyntaxError: class is a reserved identifier »  in the bundle file with  mozilla firefox 44.0\n\n« Uncaught SyntaxError: Unexpected token [ » in the bundle file with google chrome 48.0.2564.116 \n\nMy understanding is that the syntax use in the bundled file is not supported by web browsers. \nIs it  possible to modified the syntax use for write the bundled file ? \n\nMy system is Ubuntu 15.04.\n\nThank you in advance.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2282/comments",
    "author": "maudema",
    "comments": [
      {
        "user": "igor-im",
        "created_at": "2016-04-06T13:17:09Z",
        "body": "@maudema it sounds like you aren't preprocessing with Babel. Class is an ES2015 feature that needs to be transpiled to ES5. Are you using React?\n"
      },
      {
        "user": "maudema",
        "created_at": "2016-04-08T07:47:44Z",
        "body": "I had not use React . It would seem that the problem took from one of my dependencies.\nThe issue is resolved now.\n\nThank you for your answer.\n"
      }
    ]
  },
  {
    "number": 2269,
    "title": "are there any way to dynamically provide context map by server",
    "created_at": "2016-04-02T08:17:30Z",
    "closed_at": "2016-08-14T06:24:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2269",
    "body": "when i use dynamic require i get this map on chunk\n\nvar map = {\n\"./AboutPage\": 247,\n\"./AboutPage.jsx\": 247,\n\"./DashBoardPage\": 249,\n\"./DashBoardPage.jsx\": 249,\n\"./FeedChannelPage\": 251,\n\"./FeedChannelPage.jsx\": 251,\n\"./HostPage\": 253,\n\"./HostPage.jsx\": 253,\n\"./LoginPage\": 255,\n\"./LoginPage.jsx\": 255,\n\"./ProfilePage\": 257,\n\"./ProfilePage.jsx\": 257\n}\n\nare there any way to dynamically provide context map by server instead and put it in redux store or something\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2269/comments",
    "author": "pawawat",
    "comments": [
      {
        "user": "pawawat",
        "created_at": "2016-05-02T10:45:34Z",
        "body": "any suggestion?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T06:24:24Z",
        "body": "The problem is that webpack still needs to walk through filesystem to generate a `require.context` (static analysis). I don't see how it could work dynamically. Maybe I'm missing something.\n\nCould you re-open at Stack Overflow with more details?\n"
      }
    ]
  },
  {
    "number": 2268,
    "title": "Can't require bundle on node.js",
    "created_at": "2016-04-02T02:40:06Z",
    "closed_at": "2016-07-20T14:26:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2268",
    "body": "I can't require my bundle on the server side.\nLooks like this is because the `module.exports`statement is missing at the beginning of the file.\nI fixed the issue by using the BannerPlugin\n\n```\nnew webpack.BannerPlugin({ banner:\"module.exports = \", raw: true, entryOnly: false })\n```\n\nDid I miss something or this is a bug in 2.0 ?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2268/comments",
    "author": "maxs15",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-07-20T14:26:18Z",
        "body": "`target: \"node\"` `output.libraryTarget: \"commonjs\"`\n"
      }
    ]
  },
  {
    "number": 2265,
    "title": "Resolving path to external module",
    "created_at": "2016-04-01T06:23:21Z",
    "closed_at": "2017-01-29T15:10:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2265",
    "body": "Hi,\n\nI've have an external module where the path is being re-written in my webpack externals config. So, I can write `require('../../config.json')` and it resolves just fine as `require('./config.json')`.\n\nThat's all good. The problem is that I need to resolve the absolute path to the module at runtime. I can't use `__non_webpack_require__` directly because I don't know the `'./config.json'` path at runtime (it can vary depending on application configuration).\n\nThe following is the hacky solution I came up with which involves parsing the module's function definition. There would surely be a better way if the feature was implemented natively in webpack. What do you think? Thanks.\n\n``` javascript\n/**\n * Resolve the path to a webpack external given the webpack module ID.\n * Example:\n *   resolveWebpackExternal(require.resolve('../config.json'))\n *   returns the absolute path to config.json which varies depending on application\n *  configuration.\n * @param  {[number]} moduleId The id returned from webpack's `require.resolve(...)`\n * @return {[string]} The absolute path to the module.\n */\nexport function resolveWebpackExternal(moduleId) {\n    if(moduleId >= 0) {\n        const module = __webpack_modules__[moduleId];\n        const m = module && module.toString()\n            .match(/require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/i);\n        return m && m[1] && __non_webpack_require__.resolve(m[1]);\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2265/comments",
    "author": "zamb3zi",
    "comments": [
      {
        "user": "zamb3zi",
        "created_at": "2016-04-01T09:22:23Z",
        "body": "Perhaps the solution should be that `require.resolve(...)` should resolve to a path for externals and an id for internals? If so, do externals even belong in the modules array? Shouldn't they be handled by just rewriting the `require()`d path as necessary?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-04-10T22:28:37Z",
        "body": "replace all `require('../../config.json')` with `require('../../config')` in your app.\ncreate a `config.js` file that calls `require(\"config.json\")`.\nconfigurate `config.json` as external (`\"commonjs ./config.json\"`)\n"
      },
      {
        "user": "effectivecui",
        "created_at": "2019-12-18T08:28:41Z",
        "body": "`yarn add resolve` will help you."
      }
    ]
  },
  {
    "number": 2259,
    "title": "server is running and I include the export line its not throwing an error",
    "created_at": "2016-03-30T20:46:18Z",
    "closed_at": "2016-08-14T08:14:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2259",
    "body": "- I am facing a weird error\n- when the server is running and I include the export line its not throwing an error and able to see the application...even it shows webpack is valid\n  export { SportsTopPortion  };\n- but after including this line and start the server again I am facing the error\n  Error: Invariant Violation:\n- i am using webpack,node and react\n- since I am using webpack for build I am thinking the error will be due to webpack\n- checked React code for errors there is no problem in syntax.\n- can you tell me how to fix it..\n- the reason I am using export is to write unit test case\n- whole code and test code can be seen in gist below\n- I am debugging for past four days not able to find out\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2259/comments",
    "author": "js08",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2016-04-15T06:38:00Z",
        "body": "I'd love to have a go at this. Do you have a link to your mention gist or better a small sample repository where the specified behaviour can be reproduced?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:14:39Z",
        "body": "Can you re-open at Stack Overflow with more info? Thanks.\n"
      }
    ]
  },
  {
    "number": 2257,
    "title": "What webpack do in \"optimize-chunk-assets\" and \"optimize-assets\" stages?",
    "created_at": "2016-03-30T16:16:00Z",
    "closed_at": "2016-04-01T10:07:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2257",
    "body": "This is how my build looks like in incremental (watch) mode:\n\n```\n744ms build modules   \n13ms seal\n90ms optimize\n28ms hashing\n32ms create chunk assets\n6ms additional chunk assets \n2368ms optimize chunk assets\n1792ms optimize assets\n58ms emit\nHash: d3cedff3f49d9942031a\nVersion: webpack 1.12.14\nTime: 5363ms\n```\n\nThis is not initial build. As you see, most time spent on optimize-chunk-assets and optimize-assets steps.\nWhat webpack do in that stages?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2257/comments",
    "author": "Strate",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-30T17:02:49Z",
        "body": "by default nothing. Plugins do stuff here. i. e. the minimizing happens in optimize-chunk-assets.\n"
      },
      {
        "user": "Strate",
        "created_at": "2016-03-30T18:49:50Z",
        "body": "but I have no plugins at all in my config. Seems that there is some built-in thing... How can I debug that?\n"
      },
      {
        "user": "Strate",
        "created_at": "2016-03-31T11:40:47Z",
        "body": "RemoveParentModulesPlugin built-in runs in \"optimize chunk assets\"\nSourceMapDevToolPlugin builtin runs in \"optimize assets\"\n"
      },
      {
        "user": "PaquitoSoft",
        "created_at": "2017-04-11T16:21:41Z",
        "body": "@Strate did you find any way to disable _RemoveParentModulesPlugin_ in development mode?\r\nThanks."
      },
      {
        "user": "Strate",
        "created_at": "2017-04-11T19:15:07Z",
        "body": "@PaquitoSoft no, I did not. But I don't look to that deeply."
      }
    ]
  },
  {
    "number": 2247,
    "title": "using commonChunk",
    "created_at": "2016-03-29T07:11:39Z",
    "closed_at": "2016-04-05T14:00:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2247",
    "body": "It says unexpect token,but I don't know how to solve it,thanks for reply.\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n    \"vendor\":['react','react-dom']\n},\n\nresolve: {\n        alias: {\n            'react':require('react'),\n            'react-dom':require('react-dom')\n\n        }\n    },\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.js\",Infinity)\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'react-hot',\n        loader:'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2247/comments",
    "author": "EasonWang01",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-30T17:36:31Z",
        "body": "`'react':require('react'),` -> `'react':require.resolve('react'),`\n"
      },
      {
        "user": "EasonWang01",
        "created_at": "2016-04-05T14:00:14Z",
        "body": "Thanks for reply!  the config below works good\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n  vendor:['react','react-dom']\n},\n\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n     new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.bundle.js\"),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015','stage-0', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n\n\n```\n"
      }
    ]
  },
  {
    "number": 2244,
    "title": "code dependencies webpack plugin result, how to write the plugin",
    "created_at": "2016-03-27T10:50:46Z",
    "closed_at": "2016-08-12T19:17:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2244",
    "body": "I write a plugin. At  the compiler emit, I collect  all image url and  write to a file foo.json.\nBut in my code, I need the  image url , so  I must  run  `webpack` twice, that  I  can  get  correct result.\nThe first time  is used to collect  image url. \nThis didn't turn out the way I expected.Maybe I can  replace module in the compiler emit?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2244/comments",
    "author": "zhangsanshi",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-12T19:17:41Z",
        "body": "Can you re-open at Stack Overflow with more details? Thanks. :+1: \n"
      }
    ]
  },
  {
    "number": 2238,
    "title": "You may need an appropriate loader to handle this file type",
    "created_at": "2016-03-25T20:02:35Z",
    "closed_at": "2016-03-30T17:10:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2238",
    "body": "I have a little nodejs project with webpack. Iam relatively new to webpack so i think thats the problem.\n\nIf i install log4js, winston or other logger libraries and run the application i am getting \n\n```\nWARNING in ./~/log4js/lib/log4js.js\nCritical dependencies:\n388:21-38 the request of a dependency is an expression\n @ ./~/log4js/lib/log4js.js 388:21-38\n\nWARNING in ./~/log4js/lib/appenders/logstashUDP.js.orig\nModule parse failed: /Users/me/Development/jstemplate/node_modules/log4js/lib/appenders/logstashUDP.js.orig Line 31: Unexpected token <<\nYou may need an appropriate loader to handle this file type.\n| \n|     var logObject = {\n| <<<<<<< HEAD\n|       '@timestamp': (new Date(loggingEvent.startTime)).toISOString(),\n|       type: type,\n @ ./~/log4js/lib/appenders ^\\.\\/.*$\n```\n\nhere is my webpack config\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\n\nvar APP_DIR = path.join(__dirname, '..', 'src');\n\nvar devFlagPlugin = new webpack.DefinePlugin({  \n  __DEV__: JSON.stringify(JSON.parse(process.env.DEBUG || 'false'))\n});\n\nmodule.exports = {\n  debug: true,\n  devtool: 'eval',\n  entry: ['webpack-hot-middleware/client', './src/index.tsx'],\n  module: {\n    preLoaders: [{\n      test: /\\.tsx?$/,\n      loader: 'tslint',\n      include: APP_DIR\n    }],\n    loaders: [{\n        test: /\\.tsx?$/,\n        loaders: ['babel', 'ts'],\n        include: APP_DIR\n    }]\n  },\n  output: {\n    filename: 'app.js',\n    path: path.join(__dirname, '..', 'build'),\n    publicPath: '/static/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    devFlagPlugin\n  ],\n  resolve: {\n    root: [path.resolve('../src')],\n    extensions: ['', '.jsx', '.js', '.tsx', '.ts', '.json']\n  },\n  resolveLoader: {\n    root: '../node_modules'\n  },\n  node: {\n    fs: \"empty\"\n  }\n};\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2238/comments",
    "author": "Knaackee",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-30T17:10:54Z",
        "body": "`<<<<<<< HEAD` --> git\n"
      }
    ]
  },
  {
    "number": 2216,
    "title": "Using Webpack loaders with require.extensions?",
    "created_at": "2016-03-21T19:42:16Z",
    "closed_at": "2016-08-13T04:03:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2216",
    "body": "I want to run some mocha tests on modules that rely on Webpack loaders to work (eg. loading underscore templates). In the past, I've used `require.extensions` to get the behavior I want from similar Browserify transform plugins.\n\nIs there a recommended way to use a stack of Webpack loaders as function that transforms a file or string? Some of the loaders themselves seem to rely on internal stuff from the way Webpack invokes them (eg. `this.options`, `this.query`, etc.), and I figured I'd see if someone already has this figured out before I go nuts mocking out objects.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2216/comments",
    "author": "kmck",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-13T04:03:42Z",
        "body": "Can you re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 2203,
    "title": "How to strip some default preserved comments when use '--optimize-minimize' option.",
    "created_at": "2016-03-18T02:37:12Z",
    "closed_at": "2016-03-21T20:36:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2203",
    "body": " When using '--optimize-minimize' option to minimize scripts, it seems that webpack preserves some comments. Like comments with @license, @preserve or starting with /*! are preserved.\n\nHow to make webpack don't preserve those comments.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2203/comments",
    "author": "sdhhqb",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-21T20:36:18Z",
        "body": "use the UglifyJsPlugin instead of `--optimize-minimize` and provide options.\n"
      }
    ]
  },
  {
    "number": 2197,
    "title": "Ng annotate error while using eval dev tool ",
    "created_at": "2016-03-16T19:38:54Z",
    "closed_at": "2016-03-21T20:37:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2197",
    "body": "I am trying to use eval devtool for source maps but it seems to be breaking the ng annotate plugin for my angular app. Does this mode remove comments from the mapped file?  As this is pivotal to the implementation of ng annotate. If yes, can this be disabled? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2197/comments",
    "author": "asulaiman",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-21T20:37:33Z",
        "body": "report this to the ng annotate plugin\n"
      }
    ]
  },
  {
    "number": 2196,
    "title": "conditional require style",
    "created_at": "2016-03-16T17:04:27Z",
    "closed_at": "2016-08-14T08:10:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2196",
    "body": "Is it possible to actually add conditional require?\nI mean, i'm trying to add something like:\n\nif (typeof window !== 'undefined' && process.env.ENV === 'z') {\n    require('../../../../../public/stylesheets/admin.scss');\n}\n\nBut it will add always that style (i mean the webpack) no matter what ENV i will set (you can see that by simply commeting this / uncommeting) the difference is maybe not big but I'm needing similar stuff few times in more places, which makes Webpack build time increase from 12sec to 30sec.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2196/comments",
    "author": "shiroganee",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-21T20:38:42Z",
        "body": "Yes, with the DefinePlugin\n"
      }
    ]
  },
  {
    "number": 2192,
    "title": "Force re-compile of file from loader",
    "created_at": "2016-03-16T11:55:22Z",
    "closed_at": "2016-03-24T20:08:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2192",
    "body": "I have file A that requires a file B. When compiling file A I either know about B in advance or I know there might possibly exists file B in future (without knowing its path so I can't use dependency system). When A doesn't know B, it emits error. When I come across valid file B (in loader), I need to recompile A to reflect dependency on discovered B.\n\nIs there a way to force re-compile of A when I discover file B without setting anything in advance? It can even be some internal API that Watcher uses to emit changes. I did go through source code, but wasn't able to find my answer.\n\nFyi, I'm finishing goog-loader for Google Closure Library with advanced compilation for production. I have a good enough version, but recovery of invalid dependency without editing file A would be nice.\n\nThank you.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2192/comments",
    "author": "aleskafka",
    "comments": [
      {
        "user": "aleskafka",
        "created_at": "2016-03-17T11:08:05Z",
        "body": "Allow me one more question with possible solution. I just need to know some edgy implementation details I could take advantage of.\n\nHow does async callback and emitWarning/emitError works? Does emitted warning cancel pending callback or not? Documentation provides no clue about this behaviour.\n\nWhen I find that A is missing required file B, can I emitWarning and store pending callback for latter when I discover file B?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-03-21T20:43:54Z",
        "body": "You could add a context dependency, which is a dependency to a whole directory. Is this enough for your use case?\n\nIf not you can flag the file as not cacheable and call `invalidate` on the watcher.\n\n> When I find that A is missing required file B, can I emitWarning and store pending callback for latter when I discover file B?\n\nno. compilation will not finish until callback is invoked.\n"
      },
      {
        "user": "aleskafka",
        "created_at": "2016-03-21T22:06:52Z",
        "body": "Thank you. Yes, context dependency could be solution. I'd imagine it could expect glob pattern as argument, but even dirname is fine. I did notice this method exists, but not that it works with directories.\n\nAllow me two follow-up questions.\n\nHow does file dependency works? Say I have file A dependent on B and file B dependent on C. Only file C is changed. Which files are recompiled?\n\nHow much overhead is there when I addContextDependency for all application files, but in 99% cases callback is provided with cached source from previous compilation (because there wasn't change that would force re-compilation of those files). Is webpack internally optimized when same source is provided to callback? Or is overhead minimum?\n\nThank you for your time.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-03-24T18:10:39Z",
        "body": "> Say I have file A dependent on B and file B dependent on C. Only file C is changed.\n\nIt really A' depends on A and B, B' depends on B and C. Where A' and B' are the generated files from A and B. So when C changes only B' is recomplied.\n\n> Is webpack internally optimized when same source is provided to callback?\n\nyes, if it results in the same hash it is not threaded as changed module.\n"
      },
      {
        "user": "aleskafka",
        "created_at": "2016-03-24T20:08:16Z",
        "body": "Thank you for your support. I can finalize goog-loader now, thanks to your input. If it stops acting weird on wrong namespace detection (with automatic revival of all files), I will release it for community.\n"
      }
    ]
  },
  {
    "number": 2179,
    "title": "Why does Webpack include in an output bundle variables that are not used in entry chunks?",
    "created_at": "2016-03-13T08:26:20Z",
    "closed_at": "2017-01-29T15:09:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2179",
    "body": "Question of the topic: Is this Webpack's behavior configurable? Turn it off/on?\n\nHere is an example.\n\nWebpack config:\n\n```\n    entry: {\n        'public/js/bundle': './assets/js/react/dev/bundle.js'\n    }\n    output: {\n        filename: '[name].js',\n    }\n```\n\nAn entry chunk `bundle.js`. It requires  some variables from `parent.js`:\n\n```\n// bundle.js\n\nconst a = require('./parent').a;\nconst func2 = require('./parent').func2;\n```\n\n`parent.js` itself. Read comments:\n\n```\n// parent.js\n\n/**\n * I export only these two:\n *     a\n *     func2\n * And they depend on:\n *     b\n *     func1\n */\nconst a = \"a\";\nconst b = \"b\";\n\nconst func1 = function () {};\nconst func2 = function () {\n    let _b = b;\n    return func1();\n};\n\n\n/**\n * I dont need any of these in my output bundle. \n * And none of these are used by instances that I require.\n * Why does Webpack has them in the output bundle?\n */\nconst foo = 10;\nconst bar = 100;\nconst baz = function () {\n    let _bar = bar;\n}\n\n\nmodule.exports = {\n    a: a,\n    func2: func2\n};\n```\n\nWebpack's output bundle. You can see that it has `foo`, `bar`, `baz` the instances I don't need and that are not used by instances I do require:\n\n```\nwebpackJsonp([0],[\n/* 0 */\n/*!***************************************!*\\\n  !*** ./assets/js/react/dev/bundle.js ***!\n  \\***************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    var a = __webpack_require__(/*! ./parent */ 1).a;\n    var func2 = __webpack_require__(/*! ./parent */ 1).func2;\n\n/***/ },\n/* 1 */\n/*!***************************************!*\\\n  !*** ./assets/js/react/dev/parent.js ***!\n  \\***************************************/\n/***/ function(module, exports) {\n\n    'use strict';\n\n    /**\n     * I export only these two:\n     *     a\n     *     func2\n     * And they depend on:\n     *     b\n     *     func1\n     */\n\n    var a = \"a\";\n    var b = \"b\";\n\n    var func1 = function func1() {};\n    var func2 = function func2() {\n        var _b = b;\n        return func1();\n    };\n\n    /**\n     * I dont need these in my bundle.\n     * Why does Webpack include them in bundle?\n     */\n    var foo = 10;\n    var bar = 100;\n    var baz = function baz() {\n        var _bar = bar;\n    };\n\n    module.exports = {\n        a: a,\n        func2: func2\n    };\n\n/***/ }\n]);\n//# sourceMappingURL=bundle.js.map\n```\n\nWhy?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2179/comments",
    "author": "wzup",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-03-13T08:39:48Z",
        "body": "Dead code stripping is incredibly hard in JavaScript. Take a google trip, youll find out why very, very fast.\n\nTree-Shaking can strip unused stuff dependant on imports/exports…but not variables, as far as I know.\n"
      },
      {
        "user": "wzup",
        "created_at": "2016-03-13T09:51:19Z",
        "body": "`UglifyJS` easily throws warnings that the variable is not used and doesn't include it in mangled output. And it is even configurable, though I don't remember for sure. So it is possible. \n\nI was just unexpected to me when I started digging why my app with Webpack's bundles loads slow on mobile, that Webpack doesn't remove unused stuff by default.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-29T15:09:31Z",
        "body": "As long as you are using ES6 modules, webpack 2 can do this type of work for you."
      }
    ]
  },
  {
    "number": 2170,
    "title": "Proxy not working after updating to Babel 6 (webpack ^1.12.13)",
    "created_at": "2016-03-11T16:46:01Z",
    "closed_at": "2016-08-07T01:18:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2170",
    "body": "I upgraded to Babel 6 but now all proxy entries have no effect (i.e. no proxying happens). I did not do any other changes.\n\nI researched it but I could not find any similar issue and I am not sure if this is a problem with Babel, webpack or 'node-http-proxy' (or combined).\n\nDo you have any clues please and what needs to be fixed?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2170/comments",
    "author": "afilp",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-09T14:24:04Z",
        "body": "Can you set up a little demo showing this behavior?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:18:10Z",
        "body": "Can you reopen at Stack Overflow?\n"
      }
    ]
  },
  {
    "number": 2166,
    "title": "Env agnostic assets",
    "created_at": "2016-03-11T01:09:45Z",
    "closed_at": "2016-05-09T17:28:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2166",
    "body": "I have an isomorphic app with the config.js file pulling variables from `process.env.XXX`.\n\nI want to compile my assets to be agnostic and pull the variables from `process.env.XXX` at runtime (or from the server as window.process.env = {}) rather than using EnvironmentPlugin or DefinePlugin which replaces the variables at compile time.\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2166/comments",
    "author": "mmahalwy",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-11T22:36:17Z",
        "body": "``` js\nnew DefinePlugin({\n  \"provess.env.XXX\": \"(typeof process === 'object' ? process.env.XXX : 'browser constant')\"\n});\n```\n"
      },
      {
        "user": "mmahalwy",
        "created_at": "2016-03-13T02:24:22Z",
        "body": "@sokra what does the `.XXX` stand for?\n"
      }
    ]
  },
  {
    "number": 2160,
    "title": "require.resolve for chunks",
    "created_at": "2016-03-09T16:56:06Z",
    "closed_at": "2016-08-28T07:43:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2160",
    "body": "Is there a way to \"get\" a chunk's Id based on it's name ?\nThe same way `require.resolve` return a module Id.\nWhat I am looking for is something like `require.resolveChunk('chunkName')` or `__webpack_resolve_chunk__('chunkName')` accessible inside modules...\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2160/comments",
    "author": "etienne-dldc",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:43:31Z",
        "body": "Can you re-open at Stack Overflow for more input?\n"
      },
      {
        "user": "etienne-dldc",
        "created_at": "2016-08-28T08:26:21Z",
        "body": "What do you mean by \"more input\" ?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T08:45:16Z",
        "body": "@etienne-dldc Your question didn't receive an answer here. Stack Overflow is used for support these days so you might get an answer there better.\n"
      },
      {
        "user": "etienne-dldc",
        "created_at": "2016-08-28T09:32:17Z",
        "body": "@bebraw Ok, but by the time I have found an other solution. I needed this to be able to manually load async chunks and detect errors.\nThe solution I found was to move to webpack 2 and and use the promise returned by require.ensure.\nThanks for you help :)\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T09:33:34Z",
        "body": "Ok, cool to hear you found a solution.\n"
      }
    ]
  },
  {
    "number": 2151,
    "title": "Chunk file names with new System.import syntax?",
    "created_at": "2016-03-07T22:17:37Z",
    "closed_at": "2016-12-24T07:21:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2151",
    "body": "Is it possible to specify a name or uses the filename as chunk name for code splitting in webpack 2.0? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2151/comments",
    "author": "sikanhe",
    "comments": [
      {
        "user": "kesne",
        "created_at": "2016-03-09T05:25:37Z",
        "body": "I've asked this myself: #1949.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T07:21:59Z",
        "body": "Closing as duplicate."
      }
    ]
  },
  {
    "number": 2141,
    "title": "Default parameters for loader",
    "created_at": "2016-03-05T13:00:55Z",
    "closed_at": "2017-01-23T10:29:21Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2141",
    "body": "I would like to have some default parameters for a loader in webpack config that can be overriden/extended in the (babel's) import statement.\n\nSomething like\n\n```\n    {\n        test: /\\.html$/,\n        loader: 'ngtemplate?relativeTo=' + (path.resolve(__dirname, './src/client')) + '/!html'\n    }\n```\n\nwhich will be extended with the module param when used as\n\n```\nimport 'ngtemplate?module=app.!./template.html'\n```\n\nMeaning, the loader would be passed with the relativeTo param and the module param as well.\n\nIs this possible in webpack? I would like to reduce as much typing as I can, ES6 import syntax is already quite exhaustive.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2141/comments",
    "author": "redhead",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-07T08:30:12Z",
        "body": "you can write a loader which does that. Loaders can change other loaders query parameters...\n"
      },
      {
        "user": "redhead",
        "created_at": "2016-03-07T12:23:32Z",
        "body": "Is there some example or tutorial for changing other loaders' params?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-01-23T10:29:21Z",
        "body": "@redhead I think that would have to be a pitch loader. You should have enough access there. Feel free to re-open this question at Stack Overflow for more ideas. Often digging into the existing loaders is a cool idea too."
      }
    ]
  },
  {
    "number": 2135,
    "title": "Re-usable JS artifact that can be used with different variables",
    "created_at": "2016-03-03T21:00:52Z",
    "closed_at": "2016-08-28T07:44:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2135",
    "body": "Dear all,\n\nThis is a question on how to build / compile some Javascript modules into an entrypoint **once** and then be able to re-use the output in different environments, with potentially different configurations in each one.\n\nA quick search on ways to pass variables into modules produces:\n1. the webpack DefinePlugin\n2. aliasing an environment-specific configuration module to have a fixed name in the Javascript code\n\nHowever both of the above require that the configurations are known in advance and in order to be changed the whole entrypoint needs to be re-compiled.\n\nIs there a way around this?\n\nI'm wondering whether to look into the direction of DllPlugin and DllReferencePlugin, but I'd like to hear some more input on this in case I'm missing something simpler.\n\nEnd-goal: I want to end up with a Docker container that houses a compiled version of the app and can be given different variables to run with, but not have to be recompiled.\n\nThanks in advance!\n\nYannis\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2135/comments",
    "author": "yannispanousis",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-07T08:16:35Z",
        "body": "> the webpack DefinePlugin\n\nuse a runtime variable here instead.\n\n> aliasing an environment-specific configuration module to have a fixed name in the Javascript code\n\nuse a switch here instead.\n"
      },
      {
        "user": "yannispanousis",
        "created_at": "2016-03-07T09:12:06Z",
        "body": "Hi @sokra thanks for your reply!\n\nboth your suggestions sound like exactly what I need, but\n\nre DefinePlugin: I can't see a `runtime` option on the DefinePlugin parameters or something similar. How can I achieve a runtime variable?\n\nre aliasing configuration module: that also sounds like what I need but given a compiled JS entrypoint I don't know how to abstract that concept. Are we assuming the use of the DllPlugin?\n\nEDIT: If you literally mean use a `switch` statement then my issue there is that I don't know in advance the possible configurations that I'm going to want, therefore I can't bundle them all up in advance.\n\nMaybe I'm missing something obvious so sorry about that!\n\nYannis\n"
      },
      {
        "user": "yannispanousis",
        "created_at": "2016-03-08T00:04:59Z",
        "body": "We've chosen to abstract this by a fixed name JS file that gets imported at runtime by HTML, and we can set all our variables in there. Thanks for your help!! Feel free to close the question\n\nYannis\n"
      },
      {
        "user": "mknapik",
        "created_at": "2017-07-06T12:10:59Z",
        "body": "@yannispanousis Could you share an example configuration which solved your problem?\r\nThat would be very helpful to implement our delivery pipeline efficiently."
      }
    ]
  },
  {
    "number": 2115,
    "title": "webpack-dev-server and node-webkit",
    "created_at": "2016-02-28T12:09:05Z",
    "closed_at": "2016-08-07T20:04:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2115",
    "body": "Please tell me, is it possible to configure webpack-dev-server and node-webkit for development? I want to use nw modules and node modules for my application. If I build application (app.js, vendors.js, styles.css, index.html), then all is well, but but it is inconvenient for the development.\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2115/comments",
    "author": "YaroslavLyzlov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-29T16:06:13Z",
        "body": "There is also `webpack --watch`...\n"
      },
      {
        "user": "YaroslavLyzlov",
        "created_at": "2016-03-01T07:09:26Z",
        "body": "And each time to build the physical files?\n"
      },
      {
        "user": "YaroslavLyzlov",
        "created_at": "2016-03-01T07:13:22Z",
        "body": "I have another question. I build sqlite3 for node-webkit 0.12.3, but I can not require it.\n\n`Module parse failed: /home/ylyzlov/inkaffe/inkaffe-desktop/node_modules/sqlite3/node_modules/node-pre-gyp/node_modules/rc/index.js Line 1: Unexpected token ILLEGAL\nYou may need an appropriate loader to handle this file type.\n`\n\nand \n\n`Module not found: Error: Cannot resolve module 'aws-sdk' in /home/ylyzlov/inkaffe/inkaffe-desktop/node_modules/sqlite3/node_modules/node-pre-gyp/lib\n @ ./~/sqlite3/~/node-pre-gyp/lib/unpublish.js 15:14-32\n`\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T20:04:27Z",
        "body": "Can you try Stack Overflow with the latter question?\n"
      }
    ]
  },
  {
    "number": 2100,
    "title": "Is it possible to specify a different context per entry point?",
    "created_at": "2016-02-24T22:02:32Z",
    "closed_at": "2016-12-24T13:32:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2100",
    "body": "So I am working on a project that has 'N' number of entry points and we would like each entry point to be able to have a different version of React, for example. This would allow our development team to upgrade different pages to React v15.0.0 while leaving other pages running on older versions while still taking advantage of the ability to use the CommonsChunkPlugin. \n\nEssentially we are looking for a way to have our cake and eat it too :)\n\nIs this possible using webpack today? If it's not, would it be considered as a future feature?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2100/comments",
    "author": "jguillen1984",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-25T08:46:05Z",
        "body": "Modules resolve relative to the requesting module. So you can create a directory structure like this:\n- app\n  - node_modules (common stuff)\n  - part1\n    - node_modules (react A)\n    - index1.js\n  - part2\n    - node_modules (react B)\n    - index2.js\n\nindex1.js will use react A. index2.js will use react B.\n"
      },
      {
        "user": "jguillen1984",
        "created_at": "2016-02-25T14:16:11Z",
        "body": "Awesome thanks so much @sokra! We will try it out and let others know how this works out for us.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T13:32:32Z",
        "body": "If this is still a problem, please open a question at Stack Overflow."
      }
    ]
  },
  {
    "number": 2097,
    "title": "Bundling two libs into one",
    "created_at": "2016-02-24T14:54:40Z",
    "closed_at": "2016-08-07T01:19:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2097",
    "body": "I have an issue to compile my library `b` properly that depends on my other library `a`. \nTo keep my story short:\n- I build a first Typescript library `a` that is bundled in `a.js` (es5).\n- I'd like to build a second Typescript library `b` that should be bundled in `b.js` (es5).\n- `b.js` should contain `a.js`\n\nUnfortunately the bundling of project B fails miserably (see code and config below).\nWhat's wrong with my Webpack config files?\n- Is my webpack.conf.js for project B well written to bundle `a.js` into `b.js`?\n- Is it correct to bundle a in `var alib = ...`? If yes how can my import statement in project B understand/find class A without prefixing with alib? \n\nPS: there is also a Typescript-specific compilation issue that I'm aware in project B.\n# Project a\n\n`src/a.ts`\n\n``` ts\nexport class A {\n    public constructor() {\n        console.log(\"new A\");\n    }\n\n    public a() {\n        console.log(\"a() call\");\n    }\n}\n```\n\n`src/api.ts`\n\n``` ts\nexport * from \"./a\"\n```\n\n`package.json`\n\n``` json\n{\n  \"devDependencies\": {\n    \"awesome-typescript-loader\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"typings\": \"latest\",\n    \"typescript\": \"latest\",\n    \"webpack\": \"1.12.13\"\n  },\n  \"dependencies\": {\n    \"d3\": \"latest\"\n  },\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"prebuild\": \"npm update && npm run clean\",\n    \"build\": \"webpack --config webpack.conf.js && copy /Y \\\"dist\\\\a.js\\\" \\\"..\\\\TB\\\\src\\\"\"\n  }\n}\n```\n\n`test.html`\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test A</title>\n</head>\n<body>\n\n<script src=\"dist/a.js\"></script>\n\n<script>\n    new alib.A().a();\n</script>\n</body>\n</html>\n```\n\n`tsconfig.json`\n\n``` json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"removeComments\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"exclude\": [\n    \"typings/browser.d.ts\",\n    \"typings/browser\",\n    \"node_modules\"\n  ]\n}\n```\n\n`webpack.conf.js`\n\n``` js\nvar webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        'a': './src/api.ts'\n    },\n    output: {\n        path: './dist',\n        filename: '[name].js',\n        library: ['alib']\n    },\n    devtool: 'source-map',\n    resolve: {\n        extensions: ['', '.ts', '.js']\n    },\n    module: {\n        loaders: [{test: /\\.ts$/, loader: 'awesome-typescript-loader'}]\n    }\n};\n```\n# Project b\n\n`typings.json`\n\n``` json\n{\n  \"dependencies\": {\n    \"a\": \"file:typings/local/a/a.d.ts\"\n  }\n}\n```\n\n`package.json`\n\n``` json\n{\n  \"devDependencies\": {\n    \"awesome-typescript-loader\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"typings\": \"latest\",\n    \"typescript\": \"latest\",\n    \"webpack\": \"1.12.13\"\n  },\n  \"dependencies\": {\n    \"d3\": \"latest\"\n  },\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"prebuild\": \"npm update && npm run typings:install && npm run clean\",\n    \"typings:install\": \"node_modules/.bin/typings install --no-insight\",\n    \"build\": \"webpack --config webpack.conf.js\"\n  }\n}\n```\n\n`tsconfig.json`\n\n``` json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"removeComments\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"typings/browser.d.ts\",\n    \"typings/browser\",\n    \"typings/local\",\n    \"dist\"\n  ]\n}\n```\n\n`typings/local/a/a.d.ts`\n\n``` ts\nexport declare class A {\n    public constructor();\n    public a();\n}\n```\n\n`src/b.ts`\n\n``` ts\nexport class B {\n    private _a:any;\n\n    public constructor() {\n        console.log(\"new B\");\n        this._a = new a.A();\n    }\n\n    public b() {\n        console.log(\"b() call\");\n        this._a.a();\n    }\n}\n```\n\n`src/a.js`\n\n``` js\nvar a =\n/******/ (function(modules) { // webpackBootstrap\n/******/    // The module cache\n/******/    var installedModules = {};\n/******/\n/******/    // The require function\n/******/    function __webpack_require__(moduleId) {\n/******/\n/******/        // Check if module is in cache\n/******/        if(installedModules[moduleId])\n/******/            return installedModules[moduleId].exports;\n/******/\n/******/        // Create a new module (and put it into the cache)\n/******/        var module = installedModules[moduleId] = {\n/******/            exports: {},\n/******/            id: moduleId,\n/******/            loaded: false\n/******/        };\n/******/\n/******/        // Execute the module function\n/******/        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/        // Flag the module as loaded\n/******/        module.loaded = true;\n/******/\n/******/        // Return the exports of the module\n/******/        return module.exports;\n/******/    }\n/******/\n/******/\n/******/    // expose the modules object (__webpack_modules__)\n/******/    __webpack_require__.m = modules;\n/******/\n/******/    // expose the module cache\n/******/    __webpack_require__.c = installedModules;\n/******/\n/******/    // __webpack_public_path__\n/******/    __webpack_require__.p = \"\";\n/******/\n/******/    // Load entry module and return exports\n/******/    return __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n    \"use strict\";\n    function __export(m) {\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n    __export(__webpack_require__(1));\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n    \"use strict\";\n    var A = (function () {\n        function A() {\n            console.log(\"new A\");\n        }\n        A.prototype.a = function () {\n            console.log(\"a() call\");\n        };\n        return A;\n    }());\n    exports.A = A;\n\n\n/***/ }\n/******/ ]);\n//# sourceMappingURL=a.js.map\n```\n\n`test.html`\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test B</title>\n</head>\n<body>\n\n<script src=\"dist/b.js\"></script>\n\n<script>\n    new blib.B().b();\n</script>\n</body>\n</html>\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2097/comments",
    "author": "Ludo09",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:19:44Z",
        "body": "Can you reopen at Stack Overflow?\n"
      }
    ]
  },
  {
    "number": 2093,
    "title": "Is there any good way to disable UglifyJS warning while using '-p' option?",
    "created_at": "2016-02-23T14:04:44Z",
    "closed_at": "2016-02-24T09:02:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2093",
    "body": "Is there any good way to disable UglifyJS warning while using `-p` option?\n\nYou'll get _535_ lines of warnings when you minify react codes. `-p` option of webpack just adds new UglifyJS plugin without checking existing plugin so there's no way to disable CLI-added UglifyJS's warning except running UglifyJS twice (which is highly undesired).\n\nHelp!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2093/comments",
    "author": "simnalamburt",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-02-24T09:02:45Z",
        "body": "Based on the code, no.\n\nIf you want to disable the warnings, skip using `-p` and set it up manually.\n"
      }
    ]
  },
  {
    "number": 2090,
    "title": "How can I get the entry file name in the loaders?",
    "created_at": "2016-02-23T07:17:52Z",
    "closed_at": "2017-12-02T19:01:58Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2090",
    "body": "If I have a entry `hello.js` like this:\n\n```\nrequire('./images/test.png');\n```\n\nand I use `file-loader` to handle this, then I want the built image named as \"hello.test.png\",how can I make it?\n\nThe following example can not fill my need:\n\n```\n{\n  test: /\\.(jpe?g|png|gif|svg)$/i,\n  loaders: ['file?hash=sha512&digest=hex&name=[path][hash].[ext]']\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2090/comments",
    "author": "weekeight",
    "comments": [
      {
        "user": "jeffijoe",
        "created_at": "2016-02-24T12:24:19Z",
        "body": "I doubt this is possible unless the `file-loader` lets you run arbitrary functions to format the file name.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-02-24T19:43:49Z",
        "body": "``` js\n{\n  test: path.resolve(\"./images/test.png\"),\n  loader: \"file?name=hello.test.png\"\n}\n```\n"
      },
      {
        "user": "weekeight",
        "created_at": "2016-02-25T05:07:05Z",
        "body": "@sokra The project has multiple entry file,not just one.I want the built image name prefixs with its related entry file name?Can we make it?\n"
      },
      {
        "user": "indieveed",
        "created_at": "2016-03-29T13:34:10Z",
        "body": "Seems duplicate to #1381.\nInterested in this issue too, though.\n"
      },
      {
        "user": "wojohowitz",
        "created_at": "2016-09-01T00:43:32Z",
        "body": "recursive issue references here #1381 is pointing back to this one each citing a duplicate of the other  :)\n"
      },
      {
        "user": "oleggromov",
        "created_at": "2017-01-17T15:10:17Z",
        "body": "Finally, guys, is there a way to get entry point name in a custom loader?"
      },
      {
        "user": "FuriouZz",
        "created_at": "2017-02-14T00:42:38Z",
        "body": "The only way, I found was to explore the `reasons` of the module directly in the loader.\r\n\r\n```\r\nvar findEntry = function( mod ) {\r\n  if (mod.reasons.length > 0) {\r\n    return findEntry( mod.reasons[0].module )\r\n  }\r\n  return mod.resource\r\n}\r\n\r\nmodule.exports = function MyLoader() {\r\n  var entry = findEntry( this._module )\r\n  ...\r\n}\r\n```"
      },
      {
        "user": "mcm-ham",
        "created_at": "2017-05-19T08:32:27Z",
        "body": "Thanks FuriouZz, here's a small modification to make it work with HMR as well:\r\n\r\n```js\r\nfunction findEntry(mod) {\r\n    if (mod.reasons.length > 0 && mod.reasons[0].module.resource) {\r\n        return findEntry(mod.reasons[0].module)\r\n    }\r\n    return mod.resource;\r\n}\r\n```"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-11-17T16:31:59Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-12-02T19:01:59Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      },
      {
        "user": "PierBJX",
        "created_at": "2020-05-26T21:54:38Z",
        "body": "@mcm-ham Your solution is not working anymore. Do you have any idea?"
      },
      {
        "user": "MuhammadMabrouk",
        "created_at": "2021-07-08T22:37:36Z",
        "body": "Any updates on this issue?!"
      },
      {
        "user": "lishichao1002",
        "created_at": "2022-02-25T09:46:10Z",
        "body": "why this._module is undefind ?? @mcm-ham "
      }
    ]
  },
  {
    "number": 2083,
    "title": "Node target, possible to get a list of compiled assets from within the bundle?",
    "created_at": "2016-02-22T04:55:02Z",
    "closed_at": "2016-02-22T09:03:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2083",
    "body": "I'm trying to use webpack with \"target: node\". It works fine but I need a way to get access to all the compiled assets from within the bundle to put them in my html header. Is such a thing possible?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2083/comments",
    "author": "olalonde",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-22T08:23:09Z",
        "body": "Yes, this information is in the Stats. You get from the callback in the node.js API, or with `--json` in the CLI, or in a `done` plugin.\n\nBut the words `\"target: node\"` and `my html header` doesn't make sense together. target node is for consuming via `require` in node.js, target web is for consuming in a HTML page.\n"
      },
      {
        "user": "olalonde",
        "created_at": "2016-02-22T09:03:12Z",
        "body": "I see, thanks. I'm rendering a React component server side which is why I need that info.\n"
      }
    ]
  },
  {
    "number": 2051,
    "title": "Code splitting and chunks inter-dependency",
    "created_at": "2016-02-15T22:07:27Z",
    "closed_at": "2017-11-26T17:51:57Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2051",
    "body": "Hi, I'd like to inform webpack that a lazily loaded chunk should depend on another to save some downloading and I think it's not currently possible.\n\nThere are basically two kind of users we support, clients and internal users. The internal users are able to use the client's features but additional features are supported for them. So, I'd like to lazily load some code for both clients and internals, but in the case of internal users, when they would require the advanced features, I'd like to instruct the system to only load the additional code, which is much smaller than the full chunk it currently generates, which is pretty similar to the other chunk for view-mode which is the only one enabled for clients. Here's some example to illustrate\n\nviewer.js\nrequire('./base.js')\n// some code for the view mode\n\nedit.js\nrequire('./base.js')\n// some code for the edit mode\n\nUsually the edit mode would be launched after the view mode is active. Currently it will redownload 'base.js' and any other common dependencies which are not in the entry JS, while it would be much better if it could require 'viewer.js' if it's not yet loaded and then only load the code which is not shared by viewer.js. So, edit.js would contain some require.ensure(['./viewer.js']) before running the code. Additionally, when generating the edit.js chunk it would assume all modules required by viewer.js are already available.\n\nPlease let me know if I wasn't able to express myself very clearly.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2051/comments",
    "author": "rosenfeld",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-16T07:39:52Z",
        "body": "I hope I understand you correctly. \n\nAn on-demand chunk doesn't include modules of the parent chunk, as they are already available. If you require.ensure `viewer.js` from `edit.js`, `base.js` would only be in the edit-chunk and not in the viewer-chunk\n"
      },
      {
        "user": "rosenfeld",
        "created_at": "2016-02-16T14:27:00Z",
        "body": "This is a bit tricky. What you are proposing is to write edit.js like this:\n\n``` javascript\nrequire(['./viewer.js'], function() {\n  require('./base.js')\n  window.Edit = function(){...}\n})\n\n// then it would be called like this:\n\nrequire(['feature/edit.js'], function(){console.log(window.Edit)}) // obviously it would undefined in the first call\n```\n\nOne problem is that the call back will be called before edit.js actual code was processed. I have to add some setTimeout work-around to wait for window.Edit to become available before trying to use it.\n\nIs there API I could call in some module to notify when it's considered loaded?\n\nAnother problem is that it was creating 2 chunks in the original example containing the View code. I had to use require.ensure and provide it a name in both places requiring 'viewer.js', so that webpack could understand that code should belong to the same chunk.\n\nAlso, from a design point of view, edit.js do not really depend on viewer.js. It only depends on base.js, but for performance optimization I prefer to bundle base and viewer in the same chunk and make the edit.js chunk depend on the view.js chunk because I think that makes sense due to how those codes are used in our application.\n\nIt would be awesome if webpack could provide me some means to specify such chunks dependencies and actually only run the handler once the parent chunk has been completely evaluated rather than running just after requesting the child chunk.\n\nPlease let me know if this explanation is confusing.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2017-05-13T06:40:04Z",
        "body": "@rosenfeld Did you manage to figure this out?"
      },
      {
        "user": "rosenfeld",
        "created_at": "2017-05-13T12:26:07Z",
        "body": "To these days I'm still running a setTimeout and checking whether or not Edit is available every 10 ms. Something like this:\r\n\r\n```CoffeeScript\r\n    lazyRun = =>\r\n      (setTimeout lazyRun, 10; return) unless window?.Edit # the actual name is a bit different\r\n      @_runActualThing()\r\n    require.ensure ['transactions/edit.js.coffee'],\r\n      (-> require ['transactions/edit.js.coffee'], lazyRun), 'transaction-edit'\r\n```"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-11-11T15:21:56Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-11-26T17:51:57Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 2046,
    "title": "Simple functions as plugins",
    "created_at": "2016-02-14T12:28:00Z",
    "closed_at": "2016-02-17T09:00:21Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2046",
    "body": "When webpack encounters a function as plugin, it is invoked to create a plugin object.\n\nSince the plugin API is miraculously similar to the `function` API, wouldn't it be nicer to \"inline\" simple plugins that don't need to be parameterized just as functions?\n\nInstead of \n\n``` javascript\n    plugins: [\n        {\n             apply: function (compiler) {\n                 ...\n             }\n        }\n    ]\n```\n\nyou could write\n\n``` javascript\n    plugins: [\n        function (compiler) {\n            ...\n        }\n    ]\n```\n\nI even think that this used to work. Why has this been changed?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2046/comments",
    "author": "jhnns",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-16T14:16:36Z",
        "body": "``` js\n     plugins: [\n        function () {\n            var compiler = this;\n            ...\n        }\n    ]\n```\n"
      },
      {
        "user": "jhnns",
        "created_at": "2016-02-16T14:22:22Z",
        "body": "What? ^^ Why isn't the `compiler` passed as argument?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-02-16T14:28:00Z",
        "body": "To keep it difficult to use ;)\n"
      },
      {
        "user": "jhnns",
        "created_at": "2016-02-16T14:35:11Z",
        "body": "nice... :grin: \n"
      },
      {
        "user": "sokra",
        "created_at": "2016-02-17T07:28:20Z",
        "body": "The real reason is that plain function work because of `Function.prototype.apply`.\n"
      },
      {
        "user": "jhnns",
        "created_at": "2016-02-17T09:00:08Z",
        "body": "Yeah, that I was trying to say with:\n\n> Since the plugin API is miraculously similar to the function API\n\nBut that seems logical to me... the `compiler` is passed as first argument to `apply()` ^^\n"
      }
    ]
  },
  {
    "number": 2038,
    "title": " eval-source-map breakpoints do not get hit, and when setting breakpoint, breakpoint jumps to different line",
    "created_at": "2016-02-13T00:41:05Z",
    "closed_at": "2016-08-07T01:21:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2038",
    "body": "I am trying for the life of me to get one of the more efficient source map option working.\n\nWhen I use any `source-map` oriented devtool setting, if I try and set a breakpoint in Chrome 48.0.2564.82, it jumps to a different line that what I selected.\n\nIf I use `eval-source-map` not only do I get the line number jump, but I also never get a break point stop even on the line it jumped to.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2038/comments",
    "author": "duro",
    "comments": [
      {
        "user": "sesteva",
        "created_at": "2016-02-20T22:38:01Z",
        "body": "+1\n"
      },
      {
        "user": "duro",
        "created_at": "2016-03-05T21:54:15Z",
        "body": "This appears to be the same issue as #1487\n"
      },
      {
        "user": "TroyLDay",
        "created_at": "2016-03-07T17:22:26Z",
        "body": "I've noticed this as well. It does not occur in all methods of my code, but //comments seem to make it happen more often than not in code that follows the comment.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:21:41Z",
        "body": "Closing as duplicate.\n"
      }
    ]
  },
  {
    "number": 2036,
    "title": "Re-exporting library",
    "created_at": "2016-02-12T15:45:07Z",
    "closed_at": "2016-08-07T01:22:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2036",
    "body": "I have 2 libraries A and B. \n- A is bundled using webpack in a first pass then published to a npm repository and later consumed by B.\n- B depends on A among other libraries and all libraries are bundled together in B (=> A is bundled in B).\n- B should re-export certain parts of A to make them visible from the outside world.\n\nHow can I achieve this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2036/comments",
    "author": "Ludo09",
    "comments": [
      {
        "user": "Ludo09",
        "created_at": "2016-02-18T13:57:04Z",
        "body": "In `webpack.conf.js` I have:\n\n```\nmodule.exports = {\n  entry: {\n     'b': ['./src/MyB.js', './js/a.js']\n```\n\nIn `a.js` (compiled by webpack) I have:\n\n```\nvar mya = \n.... \nfunction(module, exports, __webpack_require__) {\n   var MyA_1 = __webpack_require__(1);\n   exports.MyA = MyA_1.MyA;\n}\n```\n\nIn `b.js` bundle I end up with:\n\n```\nfunction(module, exports) {\n   // here we are in MyB\n   var a = new MyA(); // this is not found, even if prefixed with mya\n},\nfunction(module, exports) {\n   // a.js code is bundled with b in b.js\n   var mya = ...\n} \n```\n\nWhat is missing is something like `exports.MyA = mya;` in the final `b.js` bundle. And also something like `var MyA_1 = __webpack_require__(2);` where MyA is used. Otherwise how can B (the code that uses MyA) know about `MyA`?\nAnd of course MyA is not visible anywhere outside.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:22:22Z",
        "body": "Can you reopen at Stack Overflow?\n"
      }
    ]
  },
  {
    "number": 2035,
    "title": "Do you support requires wrapped in try blocks?",
    "created_at": "2016-02-12T15:10:15Z",
    "closed_at": "2016-08-07T01:23:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2035",
    "body": "I'm having an issue using webpack with the latest version of ws.js.\n\nI'm getting the following errors:\n\n```\nWARNING in ./~/ws/lib/Validation.js\nModule not found: Error: Cannot resolve module 'utf-8-validate' in /Volumes/Data/Users/fabera/Sites/app-engine/server/src/node_modules/ws/lib\n @ ./~/ws/lib/Validation.js 10:19-44\n\nWARNING in ./~/ws/lib/BufferUtil.js\nModule not found: Error: Cannot resolve module 'bufferutil' in /Volumes/Data/Users/fabera/Sites/app-engine/server/src/node_modules/ws/lib\n @ ./~/ws/lib/BufferUtil.js 10:19-40\n\nERROR in ./~/ws/lib/WebSocketServer.js\nModule not found: Error: Cannot resolve module 'tls' in /Volumes/Data/Users/fabera/Sites/app-engine/server/src/node_modules/ws/lib\n @ ./~/ws/lib/WebSocketServer.js 15:10-24\n\nERROR in ./~/ws/~/options/lib/options.js\nModule not found: Error: Cannot resolve module 'fs' in /Volumes/Data/Users/fabera/Sites/app-engine/server/src/node_modules/ws/node_modules/options/lib\n @ ./~/ws/~/options/lib/options.js 6:9-22\n```\n\nWS has the following conditional statements in the code:\n\n```\ntry {\n  module.exports = require('bufferutil');\n} catch (e) {\n  module.exports = require('./BufferUtil.fallback');\n}\n```\n\nbufferutil is a `devDependency` so in the production version of ws the try will fail and it will use the fallback require. However, it seems that webpack doesn't understand this and attempts to require bufferutil anyway, with the resulting errors. Any advice on how to get around this? \n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2035/comments",
    "author": "shnist",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T01:23:59Z",
        "body": "It doesn't distinguish this case separately. Most likely you have to set up a resolve.alias to shim it.\n\nPlease reopen at Stack Overflow.\n"
      },
      {
        "user": "paul-hammant",
        "created_at": "2018-05-20T16:37:48Z",
        "body": "```\r\nERROR in Entry module not found: Error: Can't resolve './src/index.js' in '<dir>' \r\n```\r\n\r\n^ Would be more clear."
      },
      {
        "user": "jgriffith3433",
        "created_at": "2020-04-20T03:05:14Z",
        "body": "This is still an issue version 6.14.4"
      }
    ]
  },
  {
    "number": 2033,
    "title": "Rewrite __dirname relative to output directory when targeting node",
    "created_at": "2016-02-12T12:57:23Z",
    "closed_at": "2017-10-04T08:51:56Z",
    "labels": [
      "enhancement",
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/2033",
    "body": "As is, `__dirname` isn't useful if we want to refer to static resources within a node package. One simple solution is to set `__outputdir` to be `__dirname` as is, and just refer to static resources relative to the output directory.\n\nI also experimented with recovering the original __dirname semantic by calculating it relative to the output directory (assuming that the output directory is nested within the context).\n\nHere's what I mean in terms of a plugin:\n\n``` js\nfunction DirnamePlugin() {\n}\n\nDirnamePlugin.prototype.apply = function(compiler) {\n  compiler.parser.plugin(\"expression __outputdir\", function() {\n    this.state.current.addVariable(\"__outputdir\", \"__dirname\");\n  });\n\n  compiler.parser.plugin(\"expression __moduledir\", function() {\n    const moduleRelativePathFromContext = path.relative(compiler.context, this.state.module.context);\n\n    const outputDir = \"__dirname\";\n    // TODO: Figoure out the package dir relative to outputdir. Now just assumes it to be the parent of outputdir.\n    const packageDir = `${outputDir} + '/../'`;\n\n        this.state.current.addVariable(\"__moduledir\", `${packageDir} + ${JSON.stringify(moduleRelativePathFromContext)}`);\n        return true;\n    });\n}\n```\n\nRight now I use `__moduledir` to mean `__dirname`. Would you consider something like this to be merged into NodeStuffPlugin?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2033/comments",
    "author": "hayeah",
    "comments": [
      {
        "user": "GuillaumeLeclerc",
        "created_at": "2016-02-19T14:09:37Z",
        "body": "I'm having this same problem. __dirname is not correct when targeting nodeJs\n"
      },
      {
        "user": "hayeah",
        "created_at": "2016-02-22T04:48:35Z",
        "body": "@GuillaumeLeclerc try copy and paste the DirnamePlugin to your webpack.config, and see if `__moduledir` works for you.\n\n```\nconfig.plugins.push(new DirnamePlugin());\n```\n\nYou may need to tweak the relative path to `packageDir` depending on where your output file is.\n"
      },
      {
        "user": "hayeah",
        "created_at": "2016-02-22T04:51:49Z",
        "body": "@bebraw any suggestion for dealing with this problem?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-02-22T06:01:01Z",
        "body": "@hayeah Nope. I don't know the Node specific portion that well. :disappointed: \n"
      },
      {
        "user": "ariporad",
        "created_at": "2017-02-03T02:24:47Z",
        "body": "Seconding this... It would be really great to have an option for this."
      },
      {
        "user": "anboxer",
        "created_at": "2017-03-20T04:47:07Z",
        "body": "I solve this issue by using  the **DefinePlugin** plugin\r\n```\r\nplugins: [\r\n         new webpack.DefinePlugin({\r\n            \"__dirname\": \"__dirname\"\r\n        })\r\n    ]\r\n```\r\nAfter adding this definition, webpack will not create **VAR INJECTION** for `__dirname`\r\n\r\nPS: webpack@2.2.1 "
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-09-18T17:02:00Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-10-04T08:51:56Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 2029,
    "title": "Split modules bundled via context into separate chunks",
    "created_at": "2016-02-11T09:58:44Z",
    "closed_at": "2016-09-02T06:00:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2029",
    "body": "Considering I have the following context requirement in my application:\n\n```\n// entry.js\nconst reqFixtures = require.context('./components', true, /^\\.\\/.*\\-fixture\\.js$/);\n```\n\nIs there anyway, with existing plugins/features, I could tell webpack to split the output into a chunk per file found within the above context?\n\nIf my tree looks like:\n\n```\n- components/\n  - button/\n    - button-fixture.js\n  - input/\n    - input-fixture.js\n\n```\n\nin the case above I'd end up with chunks:\n\n```\n- button-fixture.js\n- input-fixture.js\n- entry.js\n```\n\nMy use case is having a large test/playground application which can reference tens of fixtures with hundreds of components. I don't want to load all that if we only want to look at a single fixture for a single component, I'd much rather lazy load on demand.\n\n---\n\nIf there are no existing mechanisms or plugins to achieve this it'd be great to have some pointers on how to approach a plugin to do this? I was thinking we could look at the emitted modules and if the module path matches against the same expression as the context used then we could pull that module out into a new chunk. That bit seems like it might be relatively trivial but then how to handle pulling dependencies of those matching modules into the chunks? Or would this be handled by `DedupePlugin`?\n\nAnyway, thanks in advance and sorry if this has been discussed before!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2029/comments",
    "author": "chrisui",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-11T11:37:37Z",
        "body": "for webpack 1 you can use the `bundle-loader` or the `promise-loader`: `require.context(\"bundle!./components\", ...)`\n\nfor webpack 2 it's the default behavior for `System.import(\"./components/\" + ...)`\n"
      },
      {
        "user": "chrisui",
        "created_at": "2016-02-11T11:50:01Z",
        "body": "Didn't even think of using loaders in context! I'll give this a try later.\n\nThanks!\n"
      }
    ]
  },
  {
    "number": 2010,
    "title": "I have a question __dirname setting of node config",
    "created_at": "2016-02-06T08:41:52Z",
    "closed_at": "2016-02-09T01:39:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2010",
    "body": "Hi there.\n\nI'm using express with webpack.\nI found __dirname needs set for node and i set like below\n\n```\nnode: {\n  __dirname: false\n}\n```\n\nDocs comment `__dirname: true` is real __dirname, but Above works. Not `true` (true output '')\nIs Docs correct, or not ?\n\nthanks about greate tool!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2010/comments",
    "author": "blackpost38",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-08T08:40:18Z",
        "body": "`__dirname: false` disables webpack processing of `__dirname`. If you run the bundle in node.js it falls back to the __dirname of node.js (which makes sense for target: node).\n`__dirname: true` let webpack replace `__dirname` with the path relative to you `context`. Makes sense for target: web if you need the path.\n"
      },
      {
        "user": "krzkaczor",
        "created_at": "2016-02-09T00:02:14Z",
        "body": "I just have the same problem. I think that documentation is very unclear about what it will do:\n\n```\n__dirname: true (real dirname), \"mock\" (\"/\") or false\n```\n"
      },
      {
        "user": "blackpost38",
        "created_at": "2016-02-09T01:39:56Z",
        "body": "Great answer thanks!\nI wish to apply that comment to docs :)\n"
      },
      {
        "user": "jmlane",
        "created_at": "2016-03-23T19:55:19Z",
        "body": "Yeah, this is confusing. The documentation reads as if the boolean values should have the opposite effect in the resulting bundle.\n"
      },
      {
        "user": "tejohnso",
        "created_at": "2018-01-30T21:10:15Z",
        "body": "> __dirname: false disables webpack processing of __dirname. If you run the bundle in node.js it falls back to the __dirname of node.js (**which makes sense for target: node**).\r\n\r\n@sokra given what you said above re what makes sense, why is webpack unexpectedly breaking node's behaviour? Shouldn't the node options all be *false* automatically if target is *node*? The mangling of __dirname is counter intuitive and without warning. And in most cases, the output built for node will operate incorrectly rather than failing."
      }
    ]
  },
  {
    "number": 2008,
    "title": "Explicit vendor chunk doesn't work with ProvidePlugin",
    "created_at": "2016-02-06T06:25:36Z",
    "closed_at": "2016-08-14T08:14:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2008",
    "body": "I have the following config:\n\n```\nmodule.exports = {\n  entry:  {\n    index: './src/index.js',\n    page: './src/page.js',\n    vendor: ['a', 'b', 'jquery']\n  },\n  output: {\n    path: path.resolve(__dirname, '../dist/'),\n    publicPath: '/',\n    filename: '[name].js'\n  },\n  plugins: [\n    new webpack.ProvidePlugin({\n      '$': 'jquery'\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      filename: 'vendor.bundle.js',\n      chunks: ['a', 'b', 'jquery']\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'commons',\n      filename: 'commons.bundle.js',\n      minChunks: 2\n    }) \n  ]\n}\n```\n\nIf I use jquery as $ in index.js or other entry, jquery will not bundle into vendor chunk but into commons chunk.\nIf I doesn't use ProvidePlugin to expose jquery, jquery will bundle into vendor chunk, as well as if I doesn't use $ which is set to exports of jquery in index.js or other entry.\nIf I ues expose-loader to expose jquery as $ and I use $ in index.js or other entry , there is no problem.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2008/comments",
    "author": "sharkrice",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-08T08:42:26Z",
        "body": "`chunks: ['a', 'b', 'jquery']` chunks names are expected here, not module names\n"
      }
    ]
  },
  {
    "number": 2007,
    "title": "asynchronous error call stack",
    "created_at": "2016-02-06T04:10:09Z",
    "closed_at": "2016-09-01T09:22:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2007",
    "body": "Is there any way to show the asynchronous error call stack? \n\nGetting an error like this:\n\n``` shell\nERROR in   ReferenceError: React is not defined\n\n  - index.html:50 Object.<anonymous>\n    /home/zane/3ashworth/app/index.html:50:19\n\n  - index.html:21 __webpack_require__\n    /home/zane/3ashworth/app/index.html:21:30\n\n  - index.html:41 \n    /home/zane/3ashworth/app/index.html:41:18\n\n  - index.html:44 \n    /home/zane/3ashworth/app/index.html:44:10\n\n  - index.js:178 HtmlWebpackPlugin.evaluateCompilationResult\n    [3ashworth]/[html-webpack-plugin]/index.js:178:26\n\n  - index.js:93 \n    [3ashworth]/[html-webpack-plugin]/index.js:93:21\n\n  - util.js:11 tryCatcher\n    [3ashworth]/[bluebird]/js/release/util.js:11:23\n\n  - promise.js:491 Promise._settlePromiseFromHandler\n    [3ashworth]/[bluebird]/js/release/promise.js:491:31\n\n  - promise.js:548 Promise._settlePromise\n    [3ashworth]/[bluebird]/js/release/promise.js:548:18\n\n  - promise.js:593 Promise._settlePromise0\n    [3ashworth]/[bluebird]/js/release/promise.js:593:10\n```\n\nis not very helpful, because I don't know what created the promise.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2007/comments",
    "author": "zwhitchcox",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-09-01T09:22:19Z",
        "body": "html-webpack-plugin issue\n"
      }
    ]
  },
  {
    "number": 1993,
    "title": "Why have to install webpack twice",
    "created_at": "2016-02-04T09:01:26Z",
    "closed_at": "2016-02-04T15:49:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1993",
    "body": "I first install webpack global and I think it should work, but when to run webpack command at the project folder it throw error which said can't find module webpack. \n\nI read the guide of webpack it recommend to setup webpack as the project dependence. I can't understand why has this design. \n\nso many known issue I didn't find a similar one so create this.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1993/comments",
    "author": "baotongw",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-04T13:35:43Z",
        "body": "You don't have to install it globally.\n\nLocal installation is better because every project could have a different webpack version.\n"
      },
      {
        "user": "baotongw",
        "created_at": "2016-03-07T10:03:19Z",
        "body": "sorry response late. for the issue I tried again today that if I only install webpack locally and run the webpack command at the project root it said webpack command is not found, it was searching the command from global package. if I only install it global it throw the error above. so I have to install webpack in two places. \n\nIs that right, anything I missing? my platform is windows 10 with node 0.10.32.\n"
      },
      {
        "user": "devboell",
        "created_at": "2016-03-07T16:10:15Z",
        "body": "If you installed it globally then `webpack ./entry.js bundle.js` should work.\nMaybe you uninstalled it, and forgot? You can check like this:\n`npm list --depth 0 --global webpack | grep webpack`\n\nIf you only have it installed locally, then you should execute:\n`node_modules/.bin/webpack ./entry.js bundle.js` from you project root. Or you could add it to your package.json scripts like this:\n\n```\n\"scripts\" : {\n  \"build\" : \"webpack ./entry.js bundle.js\"\n}\n```\n\nand execute: `npm run build`. This will still run the local version because npm will first look in `./node_modules/.bin/`\n\nThis is not so much a webpack issue as an npm feature. It's just the way npm works.\n\nI hope I understood your question and answered it correctly.\n"
      },
      {
        "user": "baotongw",
        "created_at": "2016-03-08T07:17:40Z",
        "body": "thanks for your feekback @devboell, it is clearly from your answer, with either global or local copy I need to run command in specify format, and seems it only compile one file each time not full compile, that may not good for big project which contain many export files.\nWhat I expected is if I install webpack globally, I can run 'webpack' command at the project root folder, then it will read webpack-config.js file and execute full compile logic, in that way I can share the same webpack copy across different projects and make the compile much easy. \nWith local copy it just a javascript lib, and need npm command to run each compile, also bring more work I think.\n"
      },
      {
        "user": "devboell",
        "created_at": "2016-03-08T10:39:11Z",
        "body": "sure, I just used the simplest example from webpack docs. But even in this example it will not just compile entry.js, it will compile every file that is required/imported by entry.js, ie. the entire dependency tree. Of course in a real project you would use webpack.config,js.\n  The reason why people recommend using the local copy, has to do with managing versions. And as I said, this is not webpack specific, it is how npm has been designed. It works really well.\n\n  I suggest you read some more on npm and webpack and experiment with it. Good luck.\n"
      },
      {
        "user": "codeofsumit",
        "created_at": "2016-10-20T09:45:30Z",
        "body": "well, `node_modules/.bin/webpack ./entry.js bundle.js` that stuff is needed in the documentation where it shows how to use webpack globally but says we should only install it locally.\n"
      },
      {
        "user": "zhaoshengjun",
        "created_at": "2016-10-20T12:09:35Z",
        "body": "> and seems it only compile one file each time not full compile, that may not good for big project which contain many export files.\n\nThat's not entirely true. webpack is a powerful tool but highly depends on how you use it. Lot's of projects are using it to generate a complex website/web app, not just compile one file at a time.\n\n> What I expected is if I install webpack globally, I can run 'webpack' command at the project root folder, then it will read webpack-config.js file and execute full compile logic, in that way I can share the same webpack copy across different projects and make the compile much easy. \n\nYou probably had it wrong regarding how node.js works. Installing global package is not recommended if you have multiple projects to run. And certainly lots of CLI tools are working as the same way webpack does, reading each individual configuration files per project, not globally. Because each projects are different. If you have similar projects, you can either copy them around or create a git branch to achieve the result.\n\n> With local copy it just a javascript lib, and need npm command to run each compile, also bring more work I think.\n\nwebpack **IS** a npm package after all. If that's not what you expect, you probably got it wrong from the beginning.\n"
      }
    ]
  },
  {
    "number": 1986,
    "title": "How to completely ignore a require from webpack?",
    "created_at": "2016-02-03T14:06:03Z",
    "closed_at": "2017-09-14T16:11:59Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/1986",
    "body": "Is there a way to tell webpack to completely ignore a specific line with a require?\n\nI have a need for a `require(unknownName)` in my application, with pre-configured paths and aliases. The current options are to use `requirejs(unknownName)` or `System.import(unknownName)`, since these are ignored by webpack.\n\nWe would like to migrate to `System.import()` along with webpack, but in webpack 2.0, we will not be able to use `System.import()` for this. \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1986/comments",
    "author": "blink1073",
    "comments": [
      {
        "user": "blink1073",
        "created_at": "2016-02-03T14:52:43Z",
        "body": "This does exactly what I'd like (in Webpack 1.0): `__non_webpack_require__([unknownName], ...)`\n"
      },
      {
        "user": "Twipped",
        "created_at": "2016-03-20T17:32:04Z",
        "body": "I'd like to know how to do this as well. I have a require that conditionally loads components based on attributes on DOM nodes. Webpack sees the require call and turns it into a pattern match, bundling every file in the components directory. I don't want to ignore that entire directory because I will require.ensure the components that will actually be on the page, I just want it to ignore that one line.\n\nSomething like a `// webpack-disable` comment, ala eslint, would be very useful.\n"
      },
      {
        "user": "blink1073",
        "created_at": "2016-04-07T18:24:49Z",
        "body": "As a workaround, we are planning to use `window.System.import()`.\n"
      },
      {
        "user": "anovi",
        "created_at": "2016-07-06T22:02:54Z",
        "body": "Same problem. I am using Electron to build a desktop application. I need to `require` user's plugins dynamically. For now i have only came to solution with `eval`:\n\n```\nvar plugin = eval('require(pak.mainPath)'); // eslint-disable-line\n```\n"
      },
      {
        "user": "samiskin",
        "created_at": "2017-03-01T01:08:42Z",
        "body": "@anovi I dealt with this in my Electron app by using `module.require`  (though this wouldn't have worked if my main process code was also webpacked)"
      },
      {
        "user": "anovi",
        "created_at": "2017-03-01T09:08:02Z",
        "body": "@samiskin I need `require` in a renderer process. For now i use this:\r\n`var plugin = eval('require(pak.mainPath)'); // eslint-disable-line`"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-30T13:41:59Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-09-14T16:12:00Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 1972,
    "title": "module loaders - exclude a specific file instead of a directory",
    "created_at": "2016-02-02T00:18:50Z",
    "closed_at": "2017-08-26T12:02:08Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/1972",
    "body": "want to exclude a specific file trying this \nexclude: /(node_modules|bower_components|unitTest|models\\/myTestModel.js)\\//,\n\nwant to exclude only this file inside models directory. Is this possible?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1972/comments",
    "author": "sanathko",
    "comments": [
      {
        "user": "piecyk",
        "created_at": "2016-02-02T07:12:46Z",
        "body": "yes, try it like this:\n\n``` js\nexclude: [\n  /(node_modules|bower_components|unitTest)/,\n  path.resolve(__dirname, 'models/myTestModel.js.js'),\n]\n\n```\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-02-06T17:39:35Z",
        "body": "@sanathko Did @piecyk 's answer help?\n"
      },
      {
        "user": "warmhug",
        "created_at": "2016-11-14T16:19:43Z",
        "body": "hi, I want to exclude a directory in `node_modules`, such as `node_modules/xx/xx.../my_key_word_dir/lib/style/assets/*.svg`, the \"my_key_word_dir\" maybe anywhere in the sub dir of node_modules. How to do it? Someone can help me? Thanks very much. \n"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:32:01Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:02:08Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 1971,
    "title": "Problem installing in docker",
    "created_at": "2016-02-02T00:08:40Z",
    "closed_at": "2016-02-02T09:11:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1971",
    "body": "This could be a complicated problem, and I don't know where to put it, so I start by putting it here.\n\nWhat happens on a regular basis is that when building a Docker image containing webpack that the build bails out with a \n\n```\n> jpegtran-bin@3.0.6 postinstall /var/www/node_modules/image-webpack-loader/node_modules/imagemin/node_modules/imagemin-jpegtran/node_modules/jpegtran-bin\n> node lib/install.js\n\n\n\nThe command '/bin/sh -c npm install' returned a non-zero code: 1\n```\n\nThis only happens when building inside Docker, never when doing an `npm install` on my dev machine. What makes this problem hard is that the module that fails during the install changes. Sometimes it's this one, sometimes it's `caniuse`, sometimes it's the png code ...\n\nThe only constant I find is that it always seems to happen during webpack install. I have plenty of Docker files in several projects and only these seem to fail. All the others build without any issues whatsoever (nodejs app, php, .... )\n\nSometimes deleting all docker images/caches and rebuilding again solves the problem, sometimes it doesn't.\n\nI have no idea on how to figure out what happens here, so any clues as on how to tackle the problem would be welcome.\n\nthis is my package.json declaration:\n\n```\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.0.3\",\n    \"babel\": \"^5.8.23\",\n    \"babel-core\": \"^5.8.25\",\n    \"babel-loader\": \"^5.3.2\",\n    \"copy-webpack-plugin\": \"^0.2.0\",\n    \"css-loader\": \"^0.21.0\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"handlebars-template-loader\": \"^0.5.4\",\n    \"image-webpack-loader\": \"^1.6.2\",\n    \"json-loader\": \"^0.5.3\",\n    \"postcss\": \"^5.0.10\",\n    \"postcss-custom-properties\": \"^5.0.0\",\n    \"postcss-focus\": \"^1.0.0\",\n    \"postcss-import\": \"^7.1.0\",\n    \"postcss-loader\": \"^0.7.0\",\n    \"postcss-nested\": \"^1.0.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"react-hot-loader\": \"^1.3.0\",\n    \"redux-devtools\": \"^2.1.5\",\n    \"style-loader\": \"^0.13.0\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.1\",\n    \"webpack-module-hot-accept\": \"^1.0.3\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.7.0\",\n    \"classnames\": \"^2.2.0\",\n    \"co\": \"^4.6.0\",\n    \"color-string\": \"^0.3.0\",\n    \"es6-promise\": \"^3.0.2\",\n    \"express\": \"^4.13.3\",\n    \"geojson\": \"^0.2.1\",\n    \"handlebars\": \"^4.0.3\",\n    \"history\": \"^1.12.5\",\n    \"immutable\": \"^3.7.5\",\n    \"material-ui\": \"^0.13.0\",\n    \"normalize.css\": \"^3.0.3\",\n    \"react\": \"^0.14.0\",\n    \"react-color\": \"^1.2.1\",\n    \"react-dom\": \"^0.14.0\",\n    \"react-redux\": \"^4.0.0\",\n    \"react-router\": \"^1.0.0-rc3\",\n    \"react-tap-event-plugin\": \"^0.2.1\",\n    \"redux\": \"^3.0.4\",\n    \"redux-logger\": \"^2.0.4\",\n    \"redux-promise-middleware\": \"^2.0.0\",\n    \"redux-router\": \"^1.0.0-beta3\",\n    \"validator\": \"^4.2.1\"\n  }\n\n```\n\nmy Dockerfile is built upon node 4.2.4 , and before running `npm install` I install the latest version of npm inside my image using `RUN npm install npm@latest -g`\n\nHopefully someone can help me out.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1971/comments",
    "author": "ir-fuel",
    "comments": [
      {
        "user": "ir-fuel",
        "created_at": "2016-02-02T09:11:33Z",
        "body": "Seems that this dockerfile was node 4, not 4.2.4. For some reason that solved it.\nStill don't understand why though.\n"
      },
      {
        "user": "Ch4s3",
        "created_at": "2016-04-07T15:29:41Z",
        "body": "I'm having the same problem.\n"
      },
      {
        "user": "casprian",
        "created_at": "2019-06-21T09:07:18Z",
        "body": "did you solve this?"
      }
    ]
  },
  {
    "number": 1961,
    "title": "Loader the executes JS and returns its exports",
    "created_at": "2016-01-31T11:05:07Z",
    "closed_at": "2017-08-11T20:04:29Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/1961",
    "body": "I'm trying to write a loader that takes an object and returns a string:\n\n``` js\nfunction myLoader(content: object): string {\n    return myTransform(content);\n}\n```\n\nI want to be able to apply this loader to JS module files with a custom extension:\n\n``` js\n// some-file.my-ext\nexport default { some: 'object' }\n```\n\nSo I'm looking for a loader that can be run before mine, that will read the file and give me its exported contents:\n\n``` js\n{ default: { some: 'object' } };\n```\n\nDoes anything like this already exist?\n\n---\n### Additional Notes\n\n**The loader should Import other JS files from these custom files**\n\n``` js\n// normal-js-file.js\nexport default 42;\n\n// other-file.my-ext\nimport value from './normal-js-file';\nexport const x = `the value is ${value}`; \n```\n\nSo I want my loader to receive:\n\n``` js\n{ x: { 'the value is 42' } }\n```\n\n**The loader should mark all imported files as dependencies**\nIn the example above, the loader should mark `normal-js-file.js` as a dependency.\nAlso, if `normal-js-file.js` itself had dependencies, they should be marked as well.\n\n**Use other loaders to load the custom file and its dependencies**\nSince the user is using his own JS loaders (like babel, ts, etc.), I want the loader to use these user-defined `.js` loaders to also load my custom `.my-ext` files, and all imports from `.my-ext` should work as usual (with existing loaders):\n\n``` js\n// some-file.my-ext\nimport jsFile from 'js-file';\nimport es6File from 'file.es6';\nimport pngFile from 'file.png';\n\nexport { jsFile, es6File, pngFile };\n```\n\n---\n\nSo, does something like this exist? Or am I going about it all wrong?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1961/comments",
    "author": "bayov",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2017-02-05T09:13:37Z",
        "body": "What's the use case for this? Is the problem relevant with webpack 2?"
      },
      {
        "user": "bayov",
        "created_at": "2017-02-07T00:12:46Z",
        "body": "I haven't looked much into webpack 2 yet. I still think this is relevant, unless webpack 2 somehow addresses this issue already.\r\n\r\nA year ago I've worked on a small project to create a \"js-to-css\" transpiler. I wanted to create a loader for this transpiler. The idea was to transform Javascript objects such as:\r\n```js\r\n{ body: { \"background-color\":  \"black\" } }\r\n```\r\nto corresponding CSS declarations:\r\n```css\r\nbody { background-color: red; }\r\n```\r\n\r\nOf course, there would be many utility functions and all other possible JS-goodness that would contribute to create these CSS JS objects, so I want a loader that can simply take the exported object of a module after all relevant Webpack transformations have been applied to it."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T10:21:55Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "TheLarkInn",
        "created_at": "2017-08-11T20:04:29Z",
        "body": "Feel free to look at webpack.js.org/api/loaders for all of the options that you can use. Since this is more support/question, I'm going to close this issue in favor of recommending you reach out to gitter.im/webpack/webpack or StackOverflow, etc.  "
      }
    ]
  },
  {
    "number": 1954,
    "title": "Can webpack accept required loaders?",
    "created_at": "2016-01-29T16:19:56Z",
    "closed_at": "2016-08-14T08:04:39Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1954",
    "body": "When adding a loader, we usually write:\n\n```\n{ tests: /\\.js$/, loader: 'babel', query, include }\n```\n\nI was wondering if it is possible to provide the loader directly, e.g.:\n\n```\n{ tests: /\\.js$/, loader: require('babel-loader'), query, include }\n```\n\nAlso, for query parameters:\n\n```\n{ ...babelLoader, query: { plugins: [require('babel-plugin-transform-es2015-classes')] } }\n```\n\nI'm guessing webpack expects the query to be serializable, but it can be useful to do the above... Currently, webpack loaders receive the query as `{ plugins: [null] }`.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1954/comments",
    "author": "bayov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-30T08:45:38Z",
        "body": "No. But you can use `loader: require.resolve('babel-loader')`\n"
      }
    ]
  },
  {
    "number": 1953,
    "title": "OptimizeOccurenceOrderPlugin breaks build silently",
    "created_at": "2016-01-29T15:46:06Z",
    "closed_at": "2016-08-28T07:37:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1953",
    "body": "Adding -p to the webpack command or OptimizeOccurenceOrderPlugin to my plugins array causes my bundle.js to look like the following: \n\n`!function(t){function r(o){if(e[o])return e[o].exports;var n=e[o]={exports:{},id:o,loaded:!1};return t[o].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}var e={};return r.m=t,r.c=e,r.p=\"/\",r(0)}([function(t,r,e){t.exports=e.p+\"index.html\"}]);`\n\nEverything is working fine for me without that plugin, in production and development. For the time being, I'm not using code splitting. Could that be causing the above issue? Should there be an error/warning thrown in the console so this doesn't fail silently? \n\nThe thing that threw me off was this plugin being included with -p. After taking a closer look at it, it doesn't appear to be necessary for my purposes. Does this sound reasonable, or am I missing something?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1953/comments",
    "author": "bzalasky",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-30T08:47:31Z",
        "body": "What's wrong with this bundle.js? What do you expect? The plugin just reorders the modules...\nDo you have a small repro case?\n"
      },
      {
        "user": "bzalasky",
        "created_at": "2016-01-30T17:51:35Z",
        "body": "I'd expect the bundle.js to be an artifact that I could deploy to production. The generated code is missing my entire app and all the dependencies. I'll try to whittle it down to a small repro case for now, as not using the plugin resolves my issue. \n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:37:58Z",
        "body": "Can you re-open the question at Stack Overflow with more details? Thanks.\n"
      }
    ]
  },
  {
    "number": 1945,
    "title": "Any Way to Reverse the Order of Require.Context?",
    "created_at": "2016-01-28T16:30:44Z",
    "closed_at": "2016-01-30T11:23:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1945",
    "body": "In my particular use case, I have a folder structure like this:\n- angular\n  - directives\n    - date-range\n      - index.js\n    - module.js\n- module.js\n\nAnd id like to simply do\n\n``` javascript\nrequire.context('./angular');\n```\n\nRight now it seems to include files in the bundle in child first order. So my directives are getting put in the file before the module definitions. Essentially Id like files higher up in the hierarchy to appear before files deeper in the hierarchy.\n\nIs there anyway to do this with require.context?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1945/comments",
    "author": "pixelshaded",
    "comments": [
      {
        "user": "agundermann",
        "created_at": "2016-01-28T18:46:29Z",
        "body": "I don't think the order in which they are included in the bundle should really make a difference, should it? I'm guessing you're concerned about the order in which they are executed if you have implicit dependencies like\n\n``` js\n// a.js\nwindow.ModuleA = ...;\n\n// b.js\nwindow.ModuleB = /* using window.ModuleA */;\n```\n\nIn that case, I think you can achieve it like this:\n\n``` js\nvar context = require.context('./angular');\nvar modules = context.keys();\n\n// sort them\nvar sortedModules = modules.slice().sort(function(a, b) {\n  // by directory depth\n  var diff = a.match(/\\//g).length - b.match(/\\//g).length;\n  if ( diff !== 0) return diff;\n\n  // if depth is the same, sort alphabetically to make it stable\n  return a < b ? -1 : (a > b ? 1 : 0);\n});\n\n// execute them\nsortedModules.forEach(function(key) {\n  context(key);\n});\n```\n"
      },
      {
        "user": "pixelshaded",
        "created_at": "2016-01-29T12:57:22Z",
        "body": "For this use case, the module files create the modules. The directive files then add directives to those modules. If those modules aren't run and exist before the directive code is run, things won't work right. These aren't commonjs at the moment. I'm really just using webpack process (es6 babel etc) and concat all the files together.\n\nSo I started comparing the output for better understanding, and it seems I totally misunderstood what's going on. I haven't gotten to the point yet of testing the bundle on a page and had assumed that the order in which the modules appeared in output was the order they would be executed (aka a pure concat). WRONG. I didn't realize an array of module functions was being passed to the bootstrapper. This is commonjs for front end. Nothing is run until you require a module. All require.context was doing was setting up the modules. So yes, the order of modules passed to the bootstrapper doesn't matter. The order in which you require those modules does, hence your example of re-ordering the keys based on directory depth and then executing them in that new order.\n\nThanks for taking the time to answer my question.\n"
      }
    ]
  },
  {
    "number": 1941,
    "title": "How does HMR event bubble in async modules?",
    "created_at": "2016-01-27T08:58:44Z",
    "closed_at": "2016-01-29T05:30:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1941",
    "body": "I noticed that `module.hot.accpet` does not work for the files loaded with `require.ensure` and does not work in those files. So I think the bubbling is different there, but how does it work?\n\nAnd I'm using Webpack `1.x`, would there be difference between `1.x` and `2.x`.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1941/comments",
    "author": "tiye",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-28T11:58:36Z",
        "body": "It's not different. `require.ensure` just loads the modules into the modules container. Every module is loaded via `require`.\n"
      },
      {
        "user": "tiye",
        "created_at": "2016-01-28T12:43:00Z",
        "body": "Any example I can follow please?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-28T13:43:00Z",
        "body": "``` js\nrequire.ensure([], function() {\n  var x = require(\"x\");\n  module.hot.accept(\"x\", function() {\n    x = require(\"x\");\n    // do something when x was updated\n  });\n});\n```\n"
      },
      {
        "user": "tiye",
        "created_at": "2016-01-28T14:03:06Z",
        "body": "So the `hot.accept` method should be called in the same function body where it's `require`d, that's why I my attempts failed. Thanks, I'll close this issue tomorrow when I confirm in my project.\n"
      }
    ]
  },
  {
    "number": 1938,
    "title": "[Plugin] Injecting dependencies based on contents of module",
    "created_at": "2016-01-26T19:05:45Z",
    "closed_at": "2016-01-27T16:38:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1938",
    "body": "I'm currently struggling to find a way to inject dependencies based on the contents of my module.\n\nI'm using `compiler.parser.plugin` to determine which modules I need to inject dependencies into, but it seems to be too late to inject `require` statements into the source. If I do they're not parsed and converted to the `__webpack_require__` I'm used to seeing.\n\nWhat is the recommended workflow here?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1938/comments",
    "author": "rbhalla",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-27T07:01:59Z",
        "body": "write a loader instead.\n"
      },
      {
        "user": "rbhalla",
        "created_at": "2016-01-27T16:38:10Z",
        "body": "Yep that makes a lot more sense, thanks!\n"
      }
    ]
  },
  {
    "number": 1929,
    "title": "Should webpack build exit error code when a loader fail?",
    "created_at": "2016-01-25T10:12:04Z",
    "closed_at": "2016-01-26T19:31:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1929",
    "body": "I wrote a very simple async loader, following the documentation step by step, and calling the callback with error when some, **but** webpack just log the error in console and continue, exiting 0 as everything went fine.\n\nIs this an issue or am I missing something?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1929/comments",
    "author": "JSteunou",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-26T18:32:54Z",
        "body": "This changes with webpack 2 to a non-zero exit code. webpack 1 stays for backward compatiblitity.\n"
      },
      {
        "user": "JSteunou",
        "created_at": "2016-01-26T19:31:50Z",
        "body": "Nice, thank you @sokra looking forward for v2 then ;)\n"
      },
      {
        "user": "gmfun",
        "created_at": "2016-12-17T16:55:29Z",
        "body": "With webpack 2, when I deploy to heroku the builds fails and deploy gets rejected because of exit code 2. @sokra is there any way to disable this new feature or force webpack to exit with code 0"
      }
    ]
  },
  {
    "number": 1926,
    "title": "install webpack is just spinning... why is it taking so long??",
    "created_at": "2016-01-24T19:09:38Z",
    "closed_at": "2016-08-14T05:28:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1926",
    "body": "using npm install webpack in a fresh local phoenix project, this thing just spins indefinitely. What the heck is going on?\n\n> Brennans-iMac:phoenix_react_redux_example brs$ npm install webpack\n> npm WARN package.json phoenix_react_redux_example@1.0.0 No repository field.\n> \n> fsevents@1.0.6 install /Users/brs/Code/Phoenix/phoenix_react_redux_example/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents\n> node-pre-gyp install --fallback-to-build\n> \n> [fsevents] Success: \"/Users/brs/Code/Phoenix/phoenix_react_redux_example/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote`\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1926/comments",
    "author": "brennanreese",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-14T05:28:40Z",
        "body": "Can you re-open at Stack Overflow for a better response? Thanks.\n\nIt definitely shouldn't get stuck, although installing webpack can take a while due to the sheer amount of dependencies.\n"
      }
    ]
  },
  {
    "number": 1925,
    "title": "Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element. ",
    "created_at": "2016-01-24T15:59:33Z",
    "closed_at": "2016-01-26T18:36:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1925",
    "body": "Trying to setup Webpack but keep getting \"Target container is not a DOM element.\" when rendering the page. bundle.js was created successfully and I can see that both hello.jsx and world.jsx contents are available within the file. Can anyone please help me up?\n\nHere's my webpack.config.js\n\n> var path = require(\"path\")\n> var webpack = require('webpack')\n> module.exports = {\n>  context: __dirname,\n>  entry: './src/js/main', \n>  output: {\n>      path: path.resolve('./dist/js/'),\n>      filename: \"bundle.js\",\n>  },\n>  module: {\n>    loaders: [\n>      { test: /.jsx?$/, \n>        exclude: /node_modules/, \n>        loader: 'babel-loader', \n>        query: \n>        {\n>          presets:['es2015', 'react']\n>        }\n>      }\n>    ],\n>  },\n> }\n\nMy main.js\n\n> import Hello from './hello.jsx';\n> import World from './world.jsx';\n\nMy hello.jsx\n\n> import React from 'react';\n> import ReactDOM from 'react-dom';\n> \n> class Hello extends React.Component {\n>  render() {\n>    return `<h1>Hello</h1>`\n>  }\n> }\n> \n> ReactDOM.render(`<Hello/>` ,document.getElementById('hello'));\n\nMy world.jsx\n\n> import React from 'react';\n> import ReactDOM from 'react-dom';\n> \n> class World extends React.Component {\n>  render() {\n>    return `<h1>World</h1>`\n>  }\n> }\n> \n> ReactDOM.render(`<World/>` ,document.getElementById('world'));\n\nDisplaying through a very simple html.\n\n>    `<script src=\"{% static 'dist/js/bundle.js' %}\"></script>\n>    <div>\n>        <div id=\"hello\"></div>\n>        <div id=\"world\"></div>\n>    </div>`,,,\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1925/comments",
    "author": "tention",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-01-25T20:43:03Z",
        "body": "Can you try tweaking `ReactDOM.render(, document.getElementById('world'));` to form `ReactDOM.render(<World />, document.getElementById('world'));`? It can't pick up the React element otherwise. It's the same in that other case.\n"
      },
      {
        "user": "tention",
        "created_at": "2016-01-26T00:33:08Z",
        "body": "Sorry just edited the post. For some reason the `<Hello/>` and `<World/>` were omitted. That's the exact same code I used but still getting the error.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-01-26T07:37:43Z",
        "body": "@tention Can you set up a standalone example on GitHub I can run? Faster to debug.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-26T18:36:27Z",
        "body": "This is the webpack issue tracker, not a generic react.js support channel\n"
      },
      {
        "user": "tention",
        "created_at": "2016-01-30T03:17:16Z",
        "body": "In case anyone bumped into the same error, please make sure you load the bundle.js right before your `</body>` tag, after your other html tag. Solved mine this way.\n\nExample\n\n> `<body>`\n> `<div id=\"hello\"></div>`\n> `<script src=\"{% static 'dist/js/bundle.js' %}\"></script>`\n> `</body>`\n"
      }
    ]
  },
  {
    "number": 1924,
    "title": "Code splitting and exports",
    "created_at": "2016-01-24T15:17:09Z",
    "closed_at": "2016-04-09T17:27:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1924",
    "body": "I have a number of entry points, one for each page of my app, which all output files which export a component. I also have a commons chunk which I would like to contain the code which mounts the component. Is there a way to not output the commons chunk to the browser but output the other entries say in `__component__`?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1924/comments",
    "author": "calebmer",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-09T14:28:27Z",
        "body": "> Is there a way to not output the commons chunk to the browser but output the other entries say in **component**?\n\nCan you expand on this idea? What sort of output do you need exactly?\n"
      },
      {
        "user": "calebmer",
        "created_at": "2016-04-09T17:27:28Z",
        "body": "I opened this issue a long time ago and it is not applicable anymore. The way I worded it was confusing (even to me 😖) so I can't jump back into my mindset to clarify. Closing…\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-09T17:28:34Z",
        "body": "It's ok. Thanks. :+1:\n"
      }
    ]
  },
  {
    "number": 1918,
    "title": "Images passed somewhere else",
    "created_at": "2016-01-22T23:12:12Z",
    "closed_at": "2016-08-14T08:11:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1918",
    "body": "I use react, but it can be any other framework.\n\nSo, the problem is – I import image in one module, and then pass it as a property to another. And inside another module, when I try to render, it just shows me initial path – actual image isn't processed by url-loader and paths are unchanged.\n\nHas anyone encountered in such problem, and how is it possible to workaround it?\n\nI don't want to pass just path, and dynamically require it, it seems to be a very bad solution.\n\nThanks a lot!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1918/comments",
    "author": "Bloomca",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-09T06:19:32Z",
        "body": "How should the path change in this case? Webpack relies on static analysis so any sort of dynamic bits relying on code evaluation won't work. It's better if you can require the assets where you need them.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:11:45Z",
        "body": "Can you please re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 1917,
    "title": "Files on server not being updated when using Webpack HMR",
    "created_at": "2016-01-22T15:06:59Z",
    "closed_at": "2016-08-14T08:12:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1917",
    "body": "Hello,\n\nI have tried using different tools for hot reloading code on the server but it doesn't seem to work. I have tried, webpack-dev-server, webpack-hot-middleware, webpack-dev-middleware, webpack --watch, webpack/hot/signal, webpack/hot/poll, piping and delete `require.cache`. Followed many tutorials, researched many issues.\n\nI am using reactjs for the client and react-transform with webpack. When I edit my files, the changes are taking place on the client and webpack seems to be rebundling the changes on the server because I get a message like this:\n\n```\nVersion: webpack 1.12.9\nTime: 631ms\n                               Asset      Size  Chunks             Chunk Names\n                           bundle.js   2.21 MB       0  [emitted]  main\n                         1.bundle.js    145 kB       1             IntlBundle\n0.08d991a0f88c05497b95.hot-update.js   4.64 kB       0  [emitted]  main\n08d991a0f88c05497b95.hot-update.json  36 bytes          [emitted]\nwebpack: bundle is now VALID.\n```\n\nHowever, when I reload my webpage, react complains with the following message;\n\n```\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) =10=22.b:$/=10.5.0\">So we are <\n (server) =10=22.b:$/=10.5.0\">We are </\n```\n\nI guess that means that the code on server was not updated at all. Is this an issue with react or webpack? If it is for webpack, then what can I do to solve it?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1917/comments",
    "author": "Dindaleon",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-01-23T07:02:09Z",
        "body": "Can you set up a little example repo to study? It's hard to say anything concrete without.\n\nBasically the error says that your server returns different markup than what the client expects. Maybe you could drop server side rendering for development usage.\n"
      }
    ]
  },
  {
    "number": 1906,
    "title": "Multiple entries with nested folder structure - error resolving 'file' or 'directory' due to missing named files in folder(s)",
    "created_at": "2016-01-19T20:52:57Z",
    "closed_at": "2016-01-25T18:42:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1906",
    "body": "Hi. I apologize if this was asked; I could not find duplicate(s).\n\nI basically have a hierarchical folder structure like a lot of people probably. The issue I'm having is that I'm getting errors like so: `ERROR in multi components Module not found: Error: Cannot resolve 'file' or 'directory'`. After delving deeper into the details it looks like `webpack` is looking for a `charting.js` or a `charting/index.js` kind of structure, but I basically want the folders to organize my files; not necessarily force what files should be in there as dictated by webpack.\n\n```\n|-- node_modules\n|-- public\n  |-- components\n    |-- charting\n    |-- reporting\n    ...\n```\n\nFor example, another folder hierarchy is:\n\n```\n|-- public\n  |-- components\n    |-- routing\n      |-- views\n        |-- admin\n          |-- App.jsx\n```\n\nWebpack is requiring that I add an index.js or something like that to each nested folder, but that is something I want to avoid. Any ideas how I can improve this? Should I try and flatten? Thanks!\n\nMy config:\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar glob = require('glob');\n\nvar config = require('./gulp/config.js');\n\nvar rawScriptsPath = path.resolve(__dirname + '/' + config.path.publicBase + '/scripts');\n\nmodule.exports = {\n  context: rawScriptsPath,\n  entry: {\n    core: rawScriptsPath + '/core/application.js',\n    components: glob.sync(rawScriptsPath + '/components/**/!(sf\\.)*'),\n    reporting: glob.sync(rawScriptsPath + '/reporting/**/!(\\.clients)')\n  },\n  output: {\n    path: path.resolve(__dirname, 'public/dist/scripts'),\n    filename: '[name].js'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx'],\n    modulesDirectories: [\n      'node_modules',\n      rawScriptsPath\n    ],\n    root: rawScriptsPath\n  },\n  module: {\n    loaders: [      \n      { \n        test: /\\.js(x?)$/, \n        exclude: /node_modules/, \n        loader: 'babel', \n        query: { \n          stage: 0\n          // presets: ['es2015', 'stage-0', 'react']\n        } \n      },\n      { \n        test: /\\.css$/, \n        exclude: /node_modules/, \n        loaders: [\n          'style',\n          'css'\n          // 'autoprefixer?browsers=last 3 versions',\n          // 'sass?outputStyle=expanded'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new webpack.NoErrorsPlugin(),\n    new webpack.IgnorePlugin(/\\.svn$/)\n  ]\n};\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1906/comments",
    "author": "ConAntonakos",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-23T11:20:08Z",
        "body": "Not sure what's your problem.\n\nwebpack only looks for an `index.js` if request a folder.\n"
      },
      {
        "user": "ConAntonakos",
        "created_at": "2016-01-25T18:42:53Z",
        "body": "Thanks, @sokra. That may be my misunderstanding. I'm trying to just grab all files under specific directory paths to transpile/compile them as you can see in my hierarchy without necessarily needing an index.js in every single folder. This is simply for organizing my JavaScript files in a custom way I deem necessary. Is my approach with webpack incorrect? Sorry for creating an issue for this if it's inappropriate. I'll close it since it seems like it's an isolated, specific issue with how I want to use this module.\n"
      }
    ]
  },
  {
    "number": 1902,
    "title": "Help for a dynamic require",
    "created_at": "2016-01-18T02:18:14Z",
    "closed_at": "2017-08-26T12:21:55Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/1902",
    "body": "I am trying to use `ContextReplacementPlugin` but I keep getting `Error: Cannot find module './example/containers/'.`\n\n```\nnew webpack.ContextReplacementPlugin(\n  /extensions[\\\\\\/]$/,\n  /^\\.\\/(components|otherFolders|xyz)\\/[^\\/]+\\index.js$/\n)\n```\n\nTo use it like this: \n\n```\nvar exampleContainerPath = './example/containers/'\nvar example = require(exampleContainerPath)\n```\n\nor\n\n```\nvar exampleContainerPath = '../extensions/example/containers/'\nvar example = require(exampleContainerPath)\n```\n\nThe relative path I need to match is this:\n\n```\n'../extensions/example/containers'\n```\n\nwhere example and containers are variables. It may or may not have index.js at the end.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1902/comments",
    "author": "Dindaleon",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-12-24T06:53:06Z",
        "body": "Can you try this against webpack 2?"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:52:08Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-26T12:21:56Z",
        "body": "Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."
      }
    ]
  },
  {
    "number": 1895,
    "title": "Question: How to tell webpack to also include source maps from an imported module?",
    "created_at": "2016-01-15T19:25:25Z",
    "closed_at": "2016-09-02T05:53:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1895",
    "body": "I have a module that compiles itself with `babel -s -d lib/ src/` and generates `.js` and `.js.map` in `lib`.\n\nIn an app I use `webpack` at, I `import x from 'my-module'`, but source maps are not present in dev tools. Is there a way to tell webpack to also include the source maps?\n\nInline source maps currently generate an error `Module build failed: Error: No element indexed by 1`, open issues: #1485 #1071 \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1895/comments",
    "author": "elado",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-18T21:23:38Z",
        "body": "`source-map-loader`\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-09-02T05:53:57Z",
        "body": "Feel free to re-open at Stack Overflow if `source-map-loader` didn't work out.\n"
      }
    ]
  },
  {
    "number": 1894,
    "title": "bower module not found",
    "created_at": "2016-01-15T18:33:14Z",
    "closed_at": "2016-04-09T05:38:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1894",
    "body": "I'm currently having an issue resolving some bower dependancies.\n\nMy bower.json, references a module that has more dependancies.\n\nI'm currently getting this error:\n`ERROR in ./bower_components/ui-toolkit/dist/ui-toolkit.js`\n`Module not found: Error: Cannot resolve module 'TweenMax' in /Users/xx/Documents/project/bower_components/ui-toolkit/dist`\n\nIt appears the webpack is not looking in the root `bower_components` directory.\n\nHere is my webpack file:\n\n```\nvar webpackConfig = { \n  entry: {\n    vendor: require('wiredep')()['js'],\n    app: './src/app/index.module.js',\n  },\n  output: {\n    path: './.tmp/serve/app',\n    filename: '[name].js'\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: [/node_modules/, /bower_components/],\n        loaders: [\"babel\"],\n      },\n    ]\n  },\n  plugins: [\n    new webpack.ResolverPlugin(\n        new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin('bower.json', ['main'])\n    ),\n    new CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: Infinity,\n    })\n  ]\n};\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1894/comments",
    "author": "gibo",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-18T21:25:25Z",
        "body": "You never told webpack to look into `bower_components`... Try adding it to `resolve.modulesDirectories`\n"
      }
    ]
  },
  {
    "number": 1891,
    "title": "Can HMR allow entry point modules with exports to be accepted by sibling entry point modules?",
    "created_at": "2016-01-15T03:02:03Z",
    "closed_at": "2016-09-02T05:54:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1891",
    "body": "I have the following entries setup:\n\n``` js\n\"entry\": {\n      \"article\": [\n        \"babel-polyfill\",\n        \"router/initializer\",\n        \"views/article.jsx\"\n      ],\n      \"articles\": [\n        \"babel-polyfill\",\n        \"router/initializer\",\n        \"views/articles.jsx\"\n      ],\n      \"home\": [\n        \"babel-polyfill\",\n        \"router/initializer\",\n        \"views/home.jsx\"\n      ]\n    },\n```\n\nSo a different entry chunk is generated for each view, and the `router/initializer` module can load arbitrary views by name (using `require.ensure` + contexts). Since the  initializer is always packaged into the same chunk as a particular view, requiring that view (using `require.ensure`) simply resolves immediately - it only every downloads a new chunk when trying to load a different view. This all works fine so far.\n\nThe problem is that HMR never considers the \"current\" view (i.e. the one packaged into that chunk) to be a dependency of anyone (not the initializer, nor the `views/*.jsx` context module). `module.hot.accept(viewsContext.id, ...)` doesn't do anything (nor does `module.hot.accept(viewsContext.resolve('./home.jsx', ...)`. `module.hot.apply({ignoreUnaccepted: true}, ...)` never applies it. Only `module.hot.accept()` in `home.jsx` itself does. I assume this is because HMR only looks as far as \"is this module an entry point?\" and since it is, assumes there are no exports and it can only accept itself. That's not the case here though - there _are_ exports - and they are used by _another_ entry point module.\n\nIs that what's actually happening, or is something else the problem?\n\nIf that is the case, can HMR be made to go through the dependency checking of entry point modules anyway, as long as they have exports?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1891/comments",
    "author": "clarabstract",
    "comments": [
      {
        "user": "clarabstract",
        "created_at": "2016-01-16T00:38:11Z",
        "body": "Nvm actually...  problem was I shouldn't have set up my entries that way. I keep forgetting entry chunks can't do double duty as dynamically loadable non-entry chunks.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-18T21:31:22Z",
        "body": "You can try it this way: \n\n``` js\n\"entry\": {\n      \"article\": \"./entry?views/article.jsx\",\n      \"articles\": \"./entry?views/articles.jsx\",\n      \"home\": \"./entry?views/home.jsx\"\n},\n```\n\n``` js\n// entry.js\nrequire(\"babel-polyfill\");\nrequire(\"router/initializer\");\nrequire(__resourceQuery.substr(1));\nmodule.hot.accept(__resourceQuery.substr(1), function() {\n  // here your accept handler\n});\n```\n\nOr if you don't like the magic query string at the module, you can write a entry point per view...\n"
      }
    ]
  },
  {
    "number": 1886,
    "title": "[Plugin] No events on begin/end of compiling entry points",
    "created_at": "2016-01-14T09:18:04Z",
    "closed_at": "2016-01-14T22:44:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1886",
    "body": "Hi, \n\nI'm creating a custom plugin and I need to know the begin/end event of every entry point as I should change the plugin's configuration depending on a specific entry point.\n\nReading through the docs, I can't find that event.\n\nThanks,\nJakob\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1886/comments",
    "author": "jakob101",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-01-14T10:27:45Z",
        "body": "Can you go a bit into detail?\n\nAs in, as far as I understand, you want to change your plugin’s config per-entrypoint, right? If so, then the this-compilation event is what you need. That is used per entry.\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T10:35:16Z",
        "body": "Thank you, yeah, that's exactly what I need. Let me try that and get back to you.\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T10:43:00Z",
        "body": "I'm listening on this-compilation. It's getting called once, but I have 2 entrypoints. This is my code:\n\n<pre><code>entry: {\n   textX: legacyStylesShared.concat(styles),\n   textY: styles,\n },\n</code></pre>\n\nPlugin config:\n\n<pre><code>compiler.plugin(\"this-compilation\", function(compilation) {\n       console.log(\"xxx\");\n       compilation.plugin(\"normal-module-loader\", function(loaderContext, module) {\n           console.log(\"yyy\");\n       });\n   });\n</code></pre>\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-14T20:50:13Z",
        "body": "I don't know what you try to do, but I'm pretty sure it doesn't work that way.\n\nInstead you should use multiple compilation:\n\n``` js\n[\n  { entry: \"a\", plugins: [ new YourPlugin(\"a\") ] },\n  { entry: \"b\", plugins: [ new YourPlugin(\"b\") ] }\n]\n```\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T22:44:17Z",
        "body": "I had only 1 compilation object. This will be helpful. Thank you for your help!\n"
      }
    ]
  },
  {
    "number": 1878,
    "title": "Externals still end up in bundle?",
    "created_at": "2016-01-12T10:17:31Z",
    "closed_at": "2016-08-28T08:00:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1878",
    "body": "I am using Webpack to create a bundle for the server-side (Node JS) as well as the client side. It is working alright except for one thing: The bundle is becoming huge because Webpack is bundling all node_modules in it.\n\nI am filling an object with all external modules from the `node_modules` folder and setting it as the `externals` option, like so:\n\n``` js\nvar node_modules = {};\nfs.readdirSync('node_modules')\n.filter(function(x){\n    return ['.bin'].indexOf(x) === -1;\n})\n.forEach(function(mod){\n    node_modules[mod] = 'commonjs ' + mod;\n});\n\n// ...\n\n// Specify dependencies that shouldn’t be resolved by webpack, \n// but should become dependencies of the resulting bundle. \n// The kind of the dependency depends on output.libraryTarget.\nexternals: node_modules,\n```\n\nIf I print the webpack.config.js to the console, I see this (snipped for brevity)\n\n``` js\nserver.config.js= { context: 'C:\\\\ws\\\\bridalappnode',\n  entry: [ './src/server' ],\n  resolve:\n   { root: 'C:\\\\ws\\\\bridalappnode',\n     extensions: [ '', '.js', '.jsx' ] },\n  module: { loaders: [ [Object] ], noParse: /\\.min\\.js/ },\n  target: 'node',\n  node: { __dirname: true, __filename: true },\n  output: { path: '', filename: 'server.js', libraryTarget: 'commonjs2' },\n  externals:\n   { accepts: 'commonjs accepts',\n     'align-text': 'commonjs align-text',\n     amdefine: 'commonjs amdefine',\n     // loads more here\n     yargs: 'commonjs yargs' },\n  plugins:\n   [ BannerPlugin { options: [Object], banner: '#!/bin/env node' },\n     OccurrenceOrderPlugin { preferEntry: true } ] }\n```\n\nI think it looks fine, but still these modules can be found inside the generated bundle.js...\n\nAm I missing something? How can I prevent Webpack from including the modules from `node_modules` in the bundle.js?\n\nI tried various settings for `libraryTarget` (and leaving it out) but it makes no difference.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1878/comments",
    "author": "Download",
    "comments": [
      {
        "user": "Download",
        "created_at": "2016-01-12T11:23:36Z",
        "body": "Mmmm I think I understand now what is happening.\nMy code runs over all directories under node_modules, but actually there are also libraries that are deeper nested. So the list is incomplete.\n\nI changed the `externals` config to use this function instead:\n\n``` js\nexternals: function(context, request, callback/*(err, result)*/){\n    if ((context.indexOf('node_modules') !== -1) || (request.indexOf('.') !== 0)) {\n        callback(null, 'commonjs ' + request);\n    }\n    else {\n        callback();\n    }\n},\n```\n\nAnd this works!!  \n\nHoping this may help someone else at least.  :)\n"
      },
      {
        "user": "Download",
        "created_at": "2016-01-13T23:47:04Z",
        "body": "I'm sorry I thought I had it.\n\nBut now I'm not sure. The above function shrinks my module from ~900kB to just 40kB... But then I get errors about module `/webpack/hot/poll` not found. If I just use the technique of scanning the node_modules folder and assigning an object with module mappings to externals, my app works but it's back to being 900kB...\n\nHere is what I find really perplexing. If I `console.log` the mappings object, here is what I get (shortened for brevity):\n\n { accepts: 'commonjs accepts',\n  'align-text': 'commonjs align-text',\n  // ....\n  invariant: 'commonjs invariant',\n  // ...\n  react: 'commonjs react',\n  // ...\n  yargs: 'commonjs yargs' }\n\n`invariant` and `react` are in this list. So I would expect them to be excluded from my bundle. However when I inspect the generated bundle I find this:\n\n``` js\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n    /**\n     * Copyright 2013-2015, Facebook, Inc.\n     * All rights reserved.\n     *\n     * This source code is licensed under the BSD-style license found in the\n     * LICENSE file in the root directory of this source tree. An additional grant\n     * of patent rights can be found in the PATENTS file in the same directory.\n     *\n     * @providesModule invariant\n     */\n\n    'use strict';\n```\n\nWhen I generate the bundle with debug enabled, I get this instead:\n\n``` js\n/***/ },\n/* 1 */\n/*!*********************************!*\\\n  !*** ./~/fbjs/lib/invariant.js ***!\n  \\*********************************/\n/***/ function(module, exports) {\n// lots of code here\n```\n\nI notice here that the path webpack adds in the comments there is not in my list... Could that be the reason? But how to predict these kinds of paths? I don't think I have seen them before?\n"
      },
      {
        "user": "Download",
        "created_at": "2016-01-13T23:49:22Z",
        "body": "Is there maybe a way to turn it around and tell webpack to _only_ include files that are in a certain folder (my source folder)? Because I'm really having trouble building this list to tell webpack to exclude everything but my own code.\n"
      },
      {
        "user": "Download",
        "created_at": "2016-01-13T23:53:03Z",
        "body": "When I use the function I mentioned before, it seems to work in production, but when I try to start webpack with `--inline --watch` I get this error on startup:\n\n> Error: Cannot find module 'webpack/hot/poll?500'\n\nI don't get this, as this path can easily be located under my node_modules folder... Why can't the module be found?\n"
      },
      {
        "user": "Download",
        "created_at": "2016-01-14T00:01:47Z",
        "body": "Summary:\n\nIf I use the function, my bundle shrinks to 39kB. Sweet. And it works... In production mode. However with that same function in dev mode, I get the error that `webpack/hot/poll` can't be found. \n\nSo now I am using the config object, build by scanning the node_modules folder, in development (resulting in a ~900kB bundle) and the function for the production build... But I don't understand why I need different configs?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-14T20:59:22Z",
        "body": "Try something similar to this:\n\n``` js\nvar node_modules = fs.readdirSync('node_modules');\n\nexternals: function(context, request, callback/*(err, result)*/) {\n    if(node_modules.some(function(dir) {\n      return request.indexOf(dir + \"/\") === 0 || request === dir;\n    })) {\n        callback(null \"commonjs \" + request);\n    } else {\n        callback();\n    }\n},\n```\n"
      },
      {
        "user": "Download",
        "created_at": "2016-01-14T22:37:35Z",
        "body": "I tried this and it results in a bundle of 111kB (still pretty sweet), but unfortunately it also gives the error.\n\n> Cannot find module 'webpack/hot/poll'\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-19T18:20:40Z",
        "body": "``` js\nvar node_modules = fs.readdirSync('node_modules').filter(function(n) { return n !== \"webpack\"; })\n```\n"
      },
      {
        "user": "fritx",
        "created_at": "2016-01-24T04:50:17Z",
        "body": "Why `target: node` still bundles node_modules for me?\nAnd I have to use the below:\n\n``` js\nplugins: [\n  new webpack.ExternalsPlugin('commonjs', [\n    'koa',\n  ])\n],\n```\n\n---EDIT\n\n``` js\nexternals: [\n  (ctx, req,  cb) => {\n    if (/^\\.\\//.test(req)) return cb()\n    cb(null, `commonjs ${req}`)\n  },\n],\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T08:00:04Z",
        "body": "Closing as a solution was presented. If still relevant, feel free to re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 1873,
    "title": "Dynamic require fails with two variables",
    "created_at": "2016-01-11T11:19:34Z",
    "closed_at": "2016-01-11T19:32:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1873",
    "body": "``` js\nlet mode = \"javascript\";\nrequire(\"codemirror/mode/javascript/\" + mode);\n```\n\n`codemirror/mode/javascript/javacript.js` becomes bundled\n\n``` js\nlet mode = \"javascript\";\nrequire(\"codemirror/mode/\" + mode + \"/\" + mode);\n```\n\nAll files from `codemirror/mode/` become bundled.\n\nLooks like a bug but one never can be sure about Webpack ;)\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1873/comments",
    "author": "ivan-kleshnin",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-01-11T14:43:44Z",
        "body": "If I've understood right, this sets up a require context. In the first case it bundles from `codemirror/mode/javascript/` whereas the latter picks all from `codemirror/mode` as that becomes the context. As a result you get all those files there.\n\nI'm leaving this open for now to get a confirmation from the author.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-11T19:32:46Z",
        "body": "Working as expected.\n"
      }
    ]
  },
  {
    "number": 1852,
    "title": "DataTables: Cannot read property 'defaults' of undefined",
    "created_at": "2016-01-06T05:35:38Z",
    "closed_at": "2016-08-07T20:11:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1852",
    "body": "I don't know what I changed in my environment to cause this but I'm not getting an error in my application I cannot seem to resolve: \n\n> Uncaught TypeError: Cannot read property 'defaults' of undefined   (dataTables.jqueryui.js)\n\nMy entry.js (loader.js):\n\n```\nrequire('expose?$!expose?jQuery!jquery');\nrequire('bootstrap');\nrequire('bootstrap/dist/css/bootstrap.css');\nrequire('angular');\nrequire('angular-animate');\nrequire('angular-sanitize');\nrequire('angular-resource');\nrequire('angular-ui-bootstrap');\nrequire('angular-ui-router');\nrequire('angular-ui-select/select');\nrequire('angular-ui-select/select.css');\nrequire('jquery-ui/themes/vader/jquery-ui.css');\nrequire('lodash');\nrequire('expose?Promise!bluebird');\nrequire('expose?toastr!toastr');\nrequire('toastr/toastr.scss');\nrequire('../../lib/jquery.SPServices-2014.02');\nrequire('../../lib/SPError');\nrequire('font-awesome/scss/font-awesome.scss');\nrequire('animate.css/animate.css');\nrequire('expose?moment!moment');\nrequire('datatables.net');\nrequire('datatables.net-jqui');\nrequire('datatables.net-jqui/css/dataTables.jqueryui.css');\n```\n\nWebconfig;\n\n```\nvar webpack = require('webpack')\nmodule.exports = {\n  entry: {\n    'spdash': './app/js/loader.js'\n  },\n  output: {\n    filename: 'bundle/bundle.js'\n  },\n  module: {\n    exports: {\n      resolve: {\n        alias: {\n          jquery: \"jquery/src/jquery\"\n        }\n      }\n    },\n    loaders:\n    [\n        {test: /\\.js?$/, loader: 'babel-loader?cacheDirectory', exclude: /(node_modules|bower_components|lib)/ },\n        {test: /\\.jsx?$/, loader: 'babel-loader?cacheDirectory', exclude: /(node_modules|bower_components|lib)/ },\n        {test: /\\.css$/, loader: \"style-loader!css-loader\" },\n        {test: /\\.scss?$/, loaders: ['style', 'css', 'sass']},\n        {test: /\\.(jpe?g|png|gif|svg)$/i, loader: 'url?limit=10000!img?progressive=true' },\n        {test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: 'file-loader?name=bundle/font-[sha512:hash:base64:7].[ext]?mimetype=image/svg+xml'},\n        {test: /\\.woff(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"file-loader?name=bundle/font-[sha512:hash:base64:7].[ext]?mimetype=application/font-woff\"},\n        {test: /\\.woff2(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"file-loader?name=bundle/font-[sha512:hash:base64:7].[ext]?mimetype=application/font-woff\"},\n        {test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"file-loader?name=bundle/font-[sha512:hash:base64:7].[ext]?mimetype=application/octet-stream\"},\n        {test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: \"file-loader?name=bundle/font-[sha512:hash:base64:7].[ext]\"},\n    ]\n  },\n  devtool: 'source-map',\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n      minimize: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, [/moment$/])\n  ]\n};\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1852/comments",
    "author": "simkessy",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T20:11:19Z",
        "body": "Can you reopen at Stack Overflow? Also see datatables tracker for ideas.\n"
      }
    ]
  },
  {
    "number": 1851,
    "title": "require.ensure arrow function fails",
    "created_at": "2016-01-06T05:31:00Z",
    "closed_at": "2016-01-06T21:13:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1851",
    "body": "When compiling code that uses require.ensure, an arrow function causes weird broken behavior. 1.bundle.js isn't created, the require() isn't rewritten, and the require.ensure call is just stripped.\n\nTo repro run `webpack a.js bundle.js` with these files and no webpack.config.js.\n\n``` js\n// a.js\nrequire.ensure([], () => {\n  require('./b');\n});\n\n// b.js (empty)\n```\n\nExcerpt from bundle.js\n\n``` js\n!/* require.ensure */(() => {\n  require('./b');\n}(__webpack_require__));\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1851/comments",
    "author": "brigand",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-06T21:13:30Z",
        "body": "fixed in webpack 2\n"
      }
    ]
  },
  {
    "number": 1850,
    "title": "compress of UglifyJsPlugin cannot work",
    "created_at": "2016-01-06T03:11:24Z",
    "closed_at": "2016-08-09T07:51:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1850",
    "body": "when i wirte as the following , the UglifyJsPlugin will remain stagnant with nothing to show. But i change to wirte with new webpack.optimize.UglifyJsPlugin() and i will work well. Is it a bug ?\nvar uglyPlugin = new webpack.optimize.UglifyJsPlugin({\n    compress: {\n        warnings: false\n    }\n});\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1850/comments",
    "author": "YaraDuan",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T07:51:07Z",
        "body": "Hard to see anything obviously wrong. Could you reopen at Stack Overflow with more details?\n"
      }
    ]
  },
  {
    "number": 1843,
    "title": "[question] How to make webpack split bundle by individual files?",
    "created_at": "2016-01-05T07:09:29Z",
    "closed_at": "2016-08-28T07:37:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1843",
    "body": "Hi webpack folks,\nI got a requirement (and I know it might seem a bit silly at first sight) to make webpack output unconcatenated javascript files. I hope it won't be necessary in the end, but I need to prove that it's possible. \n\nMy project is based on TypeScript and we use ES6 module format transpiled to CommonJS, so webpack's wrapping of file content (module.exports, etc..) is needed. Also no async loading is necessary, the individual files will be simply concatenated later in the process.\n\nIs it possible to achieve something like this?:\n\nInput:\n\n```\nsrc/\n    index.ts // imports file-a.ts and file-b.ts\n    file-a.ts\n    file-b.ts\n```\n\nExpected output:\n\n```\nout/\n    index.js // including commons chunk with webpackJsonp stuff, etc.\n    file-a.js\n    file-b.js\n```\n\nThe configuration will be of course generated based on the files in project directory.\n\nI tried using split-by-name-webpack-plugin and generating regexes for every file with some partial success - I didn't manage to split the commons chunk (or to make it go with the entry chunk), which has to go first into the concatenation.\n\nIf webpack outputs all files like this one then I'm perfectly fine with that and I'm sure these can be concatenated without any problem:\n\n```\nwebpackJsonp([2],{\n/***/ 3:\n/***/ function(module, exports) {\n    var CompB = (function () {\n        function CompB() {\n        }\n        CompB.prototype.hello = function () {\n            console.log(\"CompB.hello()\");\n        };\n        return CompB;\n    })();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = CompB;\n/***/ }\n});\n```\n\nThanks a lot for help!\nLukas\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1843/comments",
    "author": "lukasholcik",
    "comments": [
      {
        "user": "grimen",
        "created_at": "2016-01-10T19:53:17Z",
        "body": "I wonder this too.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:37:16Z",
        "body": "You would have to `glob` separate entries and then output using a `[name]` pattern to get something like this going. There's no support out of box so you have go through the existing interface.\n\nFree free to re-open at Stack Overflow for more ideas.\n"
      },
      {
        "user": "franleplant",
        "created_at": "2018-05-21T21:02:13Z",
        "body": "Any new ideas about this? I still couldn't make it work with `globa` and `[name]`"
      }
    ]
  },
  {
    "number": 1835,
    "title": "Generating dependencies (in `make` style)",
    "created_at": "2016-01-03T14:22:44Z",
    "closed_at": "2016-01-04T15:32:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1835",
    "body": "I would like to integrate **webpack** in embedded software project, which I build using _GNU Make_. I need the dependencies list like this:\n\n```\nclient.js: src/client.coffee src/client.less\nsrc/client.coffee: src/module1.coffee src/module2.coffee\nsrc/client.less: src/basic.less src/theme.less\n...\n```\n\nI.e. I need execute **webpack** from **Makefile** only when one or more dependencies was changed.\n\nIs there a simple way to do it? Or does I need to implement plugin?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1835/comments",
    "author": "katyo",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-01-03T14:41:11Z",
        "body": "Can you describe more indetail what you want? Do you want to have Webpack print which files depend on what? For that to work, you have to run one build, no matter what.\n\nSince I never worked with Make, I will do a blunt assumption:\n\n```\noutput: dep1 dep2\n```\n\nis the style of Make dependencies.\n\nGoing by that assumption, you can feed WebPack multiple entry-points. For instance if you configured it with a setting of `output:{ filename: \"[name].js\" }`, you can use inlined node-js to run webpack:\n\n```\nnode -e \"require('./make-webpack')('$makeInput', $makeOutput);\"\n```\n\n`$makeInput` would be the space-separated string of your dependencies you want as entries.\n`$makeOutput` would be the name of the output. in your `client.js` example, it would be `client`. i THINK if you set `filename: \"[name]\"` only, then you can even use `client.js` as the entrypoint name.\n\n`make-webpack.js` could look like this (pseudo):\n\n``` javascript\nvar webpack = require(\"webpack\");\nvar config = require(\"./webpack.config\");\nmodule.exports = function(deps, name) {\n    config.entry = {};\n    config.entry[name] = deps.split(\" \");\n    var compiler = webpack(config);\n    compiler.run(SomeCallbackHandler);\n}\n```\n\nAnd presto, you made a little tool that you can use underneath Make.\n\nI only know Ninja.. so in Ninja, I would define a rule like so:\n\n``` ninja\nrule webpack\n  command = node -e 'require(\"./make-webpack\")(\"$in\", \"$out\")'\n  description = WebPack: Making $out of: $in\n```\n\nYou can also customize the script to utilize `argv` if you prefer, but this is a quick and dirty solution!\n\nI hope this helps. :)\n"
      },
      {
        "user": "katyo",
        "created_at": "2016-01-04T08:15:18Z",
        "body": "Thanks.\n\nMy own solution is a simple plugin, which looks like this (CoffeeScript):\n\n``` CoffeeScript\n#\n# makedeps-webpack-plugin.coffee\n#\n\n{resolve} = require \"path\"\n{writeFile} = require \"fs\"\n\nclass @MakeDepsPlugin\n  constructor: ({@output, @target, @depends} = {})->\n\n  apply: (compiler)->\n    {output, target, depends} = @\n    compiler.plugin \"emit\", ({fileDependencies, chunks}, done)->\n      output ?= \"webpack-makedeps.mk\"\n      target ?= chunks[0]?.files?.join \" \"\n      extraDeps = (resolve dep for dep in depends or [])\n      depends = [extraDeps..., fileDependencies...].join \" \\\\\\n  \"\n      writeFile output, \"#{target}: \\\\\\n  #{depends}\", done\n```\n\nFor example, this plugin can be used like so (CoffeeScript):\n\n``` CoffeeScript\n{MakeDepsPlugin} = require \"makedeps-webpack-plugin\"\n\n...\n  plugins: [\n    new MakeDepsPlugin\n      output: \"depends.mk\"\n      depends: [\n        \"package.json\"\n        \"Cakefile\"\n      ],\n      ...\n  ]\n```\n\nThe result is a file _depends.mk_ which contains that:\n\n```\nclient.js client.css: \\\n  /home/kayo/project/package.json \\\n  /home/kayo/project/Cakefile \\\n  /home/kayo/project/client.coffee \\\n  /home/kayo/project/client.less \\\n  /home/kayo/project/bootstrap.js \\\n  <...>\n```\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-01-04T10:15:36Z",
        "body": "Looks good to me! :)\n\nAnything else you would like to know?\n"
      },
      {
        "user": "katyo",
        "created_at": "2016-01-04T15:32:20Z",
        "body": "No, thanks. I think, this issue can be closed.\n"
      }
    ]
  },
  {
    "number": 1820,
    "title": "How to access current module path inside NormalModuleReplacementPlugin in webpack?",
    "created_at": "2015-12-30T08:19:05Z",
    "closed_at": "2017-08-11T10:35:40Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/1820",
    "body": "I am trying to extend/reimplement `webpack.NormalModuleReplacementPlugin` to allow using filter callback instead of RegExp.\n\nI am able to inject into `normal-module-factory/after-resolve` hook and to replace resolved module path with the one I need. But the problem is that I also need to support \"requiring of replaced module inside of replacing\".\n\nI mean that if module `A` is being replaced with `B`, then module `B` should be able to require module `A` without circular loop. (it is very similar to calling `super` inside of a subclass)\n\nHere's an example:\n\n``` javascript\n//module A: ./core/A.jsx\nexport default class A extends React.Component {\n render() {\n  return <div>A</div>;\n }\n}\n\n//module B which replaces module A: ./override/A.jsx\nimport A from '../core/A.jsx'; //here's a circular loop as now we are requiring ourself\nexport default class A extends React.Component {\n render() {\n  return (\n   <div><A/>is overridden!</div>\n  );\n }\n}\n```\n\n**And here is the question:** is there any way to access path of current module trying to require module `A` to check if it is equal to the path of the module `B` and skip replacement?\n\nAll I have found is `result.context` property inside `after-resolve` callback, but it's only a directory containing current module, not the module itself.\n\nIf I'm using wrong plugin hook, what should I use then? I tried to dig into `ResolverPlugin` and `file` hook but I believe it's not the proper way as long as I don't need to resolve anything but only substitute the module.\n\nTIA\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1820/comments",
    "author": "raveclassic",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2017-01-16T12:21:53Z",
        "body": "Hi,\r\n\r\nDid you manage to progress with this? I expect the API might be a little different with webpack 2."
      },
      {
        "user": "raveclassic",
        "created_at": "2017-01-16T12:45:50Z",
        "body": "@bebraw Nope, I ended up with checking `result.context`. It turned out to be enough.\r\nI haven't looked at webpack2 yet - waiting for release."
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T10:02:02Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "raveclassic",
        "created_at": "2017-08-11T10:35:40Z",
        "body": "Webpack 2 is officially released so I'm closing this."
      }
    ]
  },
  {
    "number": 1804,
    "title": "How to make the loader options dynamic with the inline loader require",
    "created_at": "2015-12-26T19:45:16Z",
    "closed_at": "2016-08-14T08:13:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1804",
    "body": "I want to do something like this.\n\n```\nvar options = {foo: 1, bar: 2} or defined somethere else...\n\nrequire('loader?--options goes here--!./file')\n\n```\n\nIf i do `require('loader?options=' + options + '!./file')` it will enable the require.context thing, but not that i needed.\n\nIs there a way to pass dynamic parameters inside the loader's node.js context?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1804/comments",
    "author": "NXTaar",
    "comments": [
      {
        "user": "kurdin",
        "created_at": "2016-01-12T18:44:04Z",
        "body": "+1\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:13:29Z",
        "body": "If still relevant, please re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 1798,
    "title": "How does webpack search path?",
    "created_at": "2015-12-24T11:21:32Z",
    "closed_at": "2015-12-24T11:54:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1798",
    "body": "//webpack.config.js\nalias: {\n     header: \"./static/js/app/src/common/header.js\"\n  }\n\n//entry.js\nrequire(\"header\");\n\nModule not found: Error: Cannot resolve 'file' or 'directory' ./static/js/app/src/common/header.js in c:\\demo\\static\\js\\app\\src\\price\n\nSo,how import header.js correctly? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1798/comments",
    "author": "ibufu",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-12-24T11:30:26Z",
        "body": "@ibufu Can you try `path.join(__dirname, \"./static/js/app/src/common/header.js\")`? Just a hunch.\n"
      },
      {
        "user": "ibufu",
        "created_at": "2015-12-24T11:54:37Z",
        "body": "@bebraw thank you very much!\n"
      }
    ]
  },
  {
    "number": 1795,
    "title": "How to hide context map of dynamic require?",
    "created_at": "2015-12-23T15:45:39Z",
    "closed_at": "2016-12-31T13:33:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1795",
    "body": "when i use dynamic require i get this map on chunk\n\nvar map = {\n        \"./AboutPage\": 247,\n        \"./AboutPage.jsx\": 247,\n        \"./DashBoardPage\": 249,\n        \"./DashBoardPage.jsx\": 249,\n        \"./FeedChannelPage\": 251,\n        \"./FeedChannelPage.jsx\": 251,\n        \"./HostPage\": 253,\n        \"./HostPage.jsx\": 253,\n        \"./LoginPage\": 255,\n        \"./LoginPage.jsx\": 255,\n        \"./ProfilePage\": 257,\n        \"./ProfilePage.jsx\": 257\n}\n\nHow could I hide this map and dynamically manipulate this map in code?\n\nplease help?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1795/comments",
    "author": "pawawat",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-12-23T22:36:34Z",
        "body": "By not using it.\n\nWhen you use a context, you usually have something like:\n\n```\n\"./file/\"+aVar+\".js\"\n```\n\naVar in this case would be the basename for the file. As you see, the path is constructed dynamically. WebPack can not tell what the paths may look like, and your aVar will indeed contain the raw basename. So in order to allow you to build contexts, it needs to lay out the require calls as string.\n\nSo there is no way to hide it, unless you don’t use it, i’m afraid.\n"
      },
      {
        "user": "pawawat",
        "created_at": "2015-12-24T08:36:50Z",
        "body": "My idea is I've try to write some kind of web admin with redux react. And wondering how can I restrict page access of user based on role \n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-12-24T09:46:09Z",
        "body": "That is the job of your backend’s RBAC. A proper RBAC will be able to pick up a malicious attempt and cancel it out.\n"
      },
      {
        "user": "pawawat",
        "created_at": "2016-03-30T09:09:13Z",
        "body": "@sokra @IngwiePhoenix Well, are there any way to dynamically provide context map by server instead and put it in redux store or something\n"
      },
      {
        "user": "pawawat",
        "created_at": "2016-07-04T18:29:20Z",
        "body": "any suggesstion?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-31T13:33:13Z",
        "body": "Can you re-open at Stack Overflow for more ideas?"
      }
    ]
  },
  {
    "number": 1762,
    "title": "Bundled output on Unix-like systems fail to load a web application in the browser",
    "created_at": "2015-12-16T01:01:08Z",
    "closed_at": "2015-12-18T00:30:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1762",
    "body": "Howdy there.\n\nI've got a bit of a _seemingly_ esoteric platform-related error with creating a `bundle.js` using Webpack. I'm hoping that somebody recognises this as being a silly blunder I might have done with configuration. On my Windows machine when I run up Webpack against my configuration file, I can load the bundled output in a browser. However, on any Unix-like system, the bundled output when loaded in a browser produces a `require is not defined` error (snippet below makes this obvious). This is appears to be coming from module chunks mainly involving style-loader (`imports-loader` as well) - though this might be a red herring.\n\nI did a diff between the `bundle.js` files produced by each platform and I noticed the ones churned out by the Unix-like systems have a module chunk which looks like:\n\n``` js\n...\n/***/ },\n/* 77 */\n/***/ function(module, exports) {\n// style-loader: Adds some css to the DOM by adding a <style> tag\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./animate.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n...\n```\n\nWhereas locating a similar-looking chunk in the Windows version looks like:\n\n``` js\n...\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n// style-loader: Adds some css to the DOM by adding a <style> tag\n// load the styles\nvar content = __webpack_require__(78);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(80)(content, {});\n...\n```\n\nI've already tried re-installing all my project dependencies via npm too.\n\nAnd the relevant snippet from my Webpack configuration:\n\n``` js\nmodule: {\n  noParse: [],\n  loaders: [\n    { test: /[\\\\\\/]bootstrap(\\.min)?\\.js$/, loader: 'imports?jQuery=jquery'},\n    { test: /\\.html$/, loader: 'html' },\n    { test: /\\.css$/, loader: 'style!css' },\n    { test: /\\.(scss|sass)$/, loader: 'style!css!sass' },\n    { test: /.*/, loader: 'file?name=assets/[name].[ext]&context=./src/app/',\n      include: [\n        /assets[\\\\\\/]images.+/,\n        /assets[\\\\\\/]data.+/\n      ]\n    },\n    { test: /\\.(png|woff|woff2|eot|ttf|svg)$/, loader: 'url',\n      include: [\n        /bower_components.+/,\n        /assets[\\\\\\/]fonts.+/\n      ]\n    }\n  ]\n}\n```\n\nAny advice as to why Webpack might not be transforming those `require` calls?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1762/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-12-16T22:58:10Z",
        "body": "Looks like an incorrect `noParse` configuration.\n"
      },
      {
        "user": "ghost",
        "created_at": "2015-12-18T00:30:59Z",
        "body": "Turned out to be a configuration blunder on my behalf.\n\nI was populating the `noParse` array with some code further on from the main Webpack configuration object, but doing it in a way that apparently didn't play well with the `UglifyJsPlugin`. After a bit of tweaking, I was able to get bundled distributions churned out across all platforms without problem. It still puzzles me why the bundling was working when I built with Windows to begin with.\n\n@sokra, thank you for the helpful hint.\n"
      }
    ]
  },
  {
    "number": 1755,
    "title": "webpack-dev server",
    "created_at": "2015-12-14T09:54:19Z",
    "closed_at": "2016-08-07T01:25:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1755",
    "body": "Dev的時候可以跑 api server + webpack-dev-server(hot load)\nProduction的時候可以跑 api server + webpack build\n有什么解决方案？\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1755/comments",
    "author": "sundyxfan",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-12-14T17:51:45Z",
        "body": "Can you ask the same in English?\n"
      }
    ]
  },
  {
    "number": 1728,
    "title": "Electron:  window is not defined",
    "created_at": "2015-12-08T12:48:24Z",
    "closed_at": "2016-08-07T16:00:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1728",
    "body": "When I run the app built with a webpack I get an error:  window is not defined. Here is my webpack.config:\n\n``` javascript\nmodule.exports = \n{\n  entry: \n  {\n    \"app\": \n    [\n      // Angular 2 Deps\n      \"rxjs\",  \n      \"zone.js\",\n      \"reflect-metadata\",    \n      // to ensure these modules are grouped together in one file\n      \"angular2/angular2\",\n      \"angular2/core\",\n      \"angular2/router\",\n      \"angular2/http\",\n      // app\n      \"./src/app\"\n    ]\n  },\n  output: \n  {\n    path: __dirname + \"/public/\",\n    filename: '[name].js',\n    sourceMapFilename: '[name].js.map',\n  },\n  resolve: {\n    extensions: ['','.ts','.js','.json', '.css', '.html'],\n    // ignore these since they will be fixed in the next release\n    alias: {\n      'rxjs/operators/toPromise': 'rxjs/operator/toPromise.js',\n      'rxjs/subjects/ReplaySubject': 'rxjs/subject/ReplaySubject',\n      'rxjs/operators/take': 'rxjs/operator/take'\n    }\n  },  \n  target: \"electron\",\n  node: \n  {\n    __dirname: true,\n    __filename: true\n  },\n  module: \n  {\n    loaders: [\n      // Support for *.json files.\n      { test: /\\.json$/, loader: 'json' },\n\n      // Support for CSS as raw text\n      { test: /\\.css$/, loader: 'raw' },\n\n      // support for .html as raw text\n      { test: /\\.html$/, loader: 'raw' },\n\n      { \n        test: /\\.ts$/, \n        exclude: /node_modules/,\n        query: { 'ignoreDiagnostics': [ 2403 ] }, // 2403 -> Subsequent variable declarations\n        loader: \"ts-loader\" \n      },\n\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loaders: [\"style\", \"css\", \"sass\"]\n      }\n    ]\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1728/comments",
    "author": "disshishkov",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T16:00:31Z",
        "body": "Can you re-open at Stack Overflow? Thanks!\n"
      }
    ]
  },
  {
    "number": 1723,
    "title": "Render a component server side",
    "created_at": "2015-12-08T04:47:13Z",
    "closed_at": "2015-12-23T04:13:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1723",
    "body": "I have a react component. `<myFooter>`. It is a simple footer.\n\n```\nimport React from 'react';\nimport './my-footer.scss';\n\nexport default class myFooter extends React.Component {\n  render() {\n    return (\n    <footer className=\"col-xs-12\">\n      hello !\n    </footer>\n    );\n  }\n}\n```\n\nI want to render it from the server-side. On the backend, I have an express server. For that I wrote this:\n\n```\nimport myFooter from '../components/my-footer.jsx';\n\napp.get('/footer', function(req, res) {\n  var string1 = ReactDOMServer.renderToString(myFooter);\n  res.send(string1);\n});\n```\n\nNow the problem is that server cannot read sass files. For client side rendering, I am using webpack. Webpack builds everything and gives a bundle file.\n\nBut i'm not sure what happens if its the server side. How can I compile using webpack. If I can, will i need to compile my app for each request on node server ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1723/comments",
    "author": "ateev",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-12-22T20:42:36Z",
        "body": "> How can I compile using webpack.\n\n`target: \"node\"`\n\n> If I can, will i need to compile my app for each request on node server ?\n\nNo you can compile it once.\n"
      }
    ]
  },
  {
    "number": 1719,
    "title": "Errors in preLoaders are not caught, breaking build process",
    "created_at": "2015-12-06T16:10:23Z",
    "closed_at": "2016-12-31T08:22:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1719",
    "body": "I have both `jshint-loader` and `jscs-loader` configured as preLoaders to check my code. If there's a problem, webpack reports the error in lovely red text and exits gracefully. As of yesterday, however, the error is uncaught, which breaks my \"watch\" process.\n\nHere's what I get if I introduce a missing semicolon error:\n\n```\n/Users/brianchirls/www/VR/webpack-vr-template/node_modules/webpack-core/lib/NormalModuleMixin.js:151\n                throw e;\n                ^\nError: ModuleError: jshint results in errors\n  Missing semicolon. @ line 158 char 31\n        }, { normalizeRGB: true }),ModuleBuildError: Module build failed: Error: Module failed in cause of jshint error.\n    at Object.jsHint (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/jshint-loader/index.js:127:9)\n    at Object.<anonymous> (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/jshint-loader/index.js:146:11)\n    at Object.<anonymous> (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/jshint-loader/index.js:37:12)\n    at respond (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/rcloader/index.js:68:7)\n    at respond (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/rcfinder/index.js:140:7)\n    at next (/Users/brianchirls/www/VR/webpack-vr-template/node_modules/rcfinder/index.js:167:16)\n    at doNTCallback0 (node.js:430:9)\n    at process._tickCallback (node.js:359:13)\n```\n\nI'm pretty sure the problem is not with jscs, jshint or either of their loaders, since I get a similar error if I put the semicolon back and change to mixed tabs/spaces, which bugs jscs but not jshint. And the problem isn't with my own code or configuration, since I still see the same error if I roll my own code back to several days ago. I notice there hasn't been an update to webpack, webpack-core or gulp (which I'm using) in the last couple days, so maybe there's another dependency buried in there somewhere that changed?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1719/comments",
    "author": "brianchirls",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-07T20:14:58Z",
        "body": "Is this relevant still?\n"
      }
    ]
  },
  {
    "number": 1718,
    "title": "webpack config support set more publicPath ?",
    "created_at": "2015-12-06T15:15:43Z",
    "closed_at": "2015-12-22T20:50:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1718",
    "body": "Sometimes, I need more publicPaths. Like this:\n\n```\nsrc/js/module_a/main.jsx  => dist/js/module_a/main.js\nsrc/js/module_b/main.jsx  => dist/js/module_b/main.js\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1718/comments",
    "author": "jiangtao",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-12-22T20:50:48Z",
        "body": "There is only one publicPath. Either go up to a common parent or use multiple compilations.\n"
      }
    ]
  },
  {
    "number": 1717,
    "title": "Using CommonsChunkPlugin with ProvidePlugin",
    "created_at": "2015-12-05T13:49:58Z",
    "closed_at": "2016-08-09T05:36:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1717",
    "body": "I have the following config:\n\n``` js\n{\n    entry: {\n        main: './src/public/js/main.js',\n        vendor: [\n            'whatwg-fetch'\n        ]\n    },\n    output: { filename: 'main-bundle.js' },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({ name: 'vendor', filename: 'vendor-bundle.js' }),\n        new webpack.ProvidePlugin({\n            fetch: 'imports?this=>global!exports?global.fetch!whatwg-fetch'\n        })\n    ]\n}\n```\n\nAlthough I am specifying that `what-wg` should be bundled by the `CommonsChunkPlugin` into `vendor-bundle.js`, it ends up in both `main-bundle.js` and `vendor-bundle.js`. This only happens when I use loaders in the module ID, as shown in the `ProvidePlugin` config.\n\nI am able to workaround this by ensuring the module IDs are identical for both plugins:\n\n``` js\n{\n    entry: {\n        main: './src/public/js/main.js',\n        vendor: [\n            'imports?this=>global!exports?global.fetch!whatwg-fetch'\n        ]\n    },\n    output: { filename: '[name]-bundle.js' },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({ name: 'vendor', filename: 'vendor-bundle.js' }),\n        new webpack.ProvidePlugin({\n            fetch: 'imports?this=>global!exports?global.fetch!whatwg-fetch'\n        })\n    ]\n}\n```\n\nHowever, should this really be necessary?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1717/comments",
    "author": "OliverJAsh",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-09T05:36:52Z",
        "body": "Can you re-open at Stack Overflow? Thanks. 👍 \n"
      }
    ]
  },
  {
    "number": 1711,
    "title": "Complex paths breaks watch functionality",
    "created_at": "2015-12-04T15:41:36Z",
    "closed_at": "2015-12-22T20:52:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1711",
    "body": "I've created a simple project for education purposes.\nWhen project has complex path like \"/home/kds/files/! STUDY/learn.javascript.ru/code\"\n\n\"Watch\" feature completely breaks, it waits silently while I editing sources and do nothing.\nSo moving files to something like \"/home/kds/code\" resolves issue.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1711/comments",
    "author": "koutsenko",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-12-22T20:52:17Z",
        "body": "webpack doesn't support `!` in paths. Sorry, but you need to rename that folder if you want to use webpack here.\n"
      }
    ]
  },
  {
    "number": 1708,
    "title": "Who is using webpack",
    "created_at": "2015-12-04T10:10:24Z",
    "closed_at": "2015-12-04T12:49:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1708",
    "body": "Hey, just wanted to know which companies are using webpack?\n\nSo far I got the following:\n- wordpress (Calypso Theme)\n- Instagram\n- Süddeutsche Zeitung\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1708/comments",
    "author": "davidreher",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-12-04T12:49:55Z",
        "body": "Closing in favor of #1565 (same question). Please continue there.\n"
      }
    ]
  },
  {
    "number": 1691,
    "title": "SourceMapDevToolPlugin not working",
    "created_at": "2015-12-01T07:16:34Z",
    "closed_at": "2016-08-14T08:09:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1691",
    "body": "Hi,\n\nI am trying to use the SourceMapDevToolPlugin because I do not want to generate source maps for third party libs (vendor). However it does not work. I am using webpack 1.12.2.\n\nI have removed the devtool: and replaced it with this:\n\n```\nplugins: [\n            new webpack.optimize.AggressiveMergingPlugin(),\n            new webpack.optimize.DedupePlugin(),\n            new webpack.optimize.OccurenceOrderPlugin(),\n            new webpack.SourceMapDevToolPlugin({\n                filename: '[name].js.map',\n                include: ['app.js', 'components.js'],\n                exclude: ['vendors.js', 'testVendor.js']\n            })\n        ];\n```\n\nWhat am I doing wrong here?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1691/comments",
    "author": "waeljammal",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-12-02T17:47:16Z",
        "body": "`filename: '[name].js.map'` -> `filename: '[file].map',`\n"
      },
      {
        "user": "hannadrehman",
        "created_at": "2019-03-19T22:31:24Z",
        "body": "```    \r\nnew webpack.SourceMapDevToolPlugin({\r\n      filename: 'sourcemaps/[file].map',\r\n      exclude: ['vendors.js'],\r\n    }),\r\n```\r\n\r\nhow to resolve it? i am getting sourcemaps for vendors.js file"
      }
    ]
  },
  {
    "number": 1688,
    "title": "Use CommonsChunkPlugin twice on one page",
    "created_at": "2015-11-30T19:56:25Z",
    "closed_at": "2015-12-07T22:01:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1688",
    "body": "As part of our caching strategy, I have set up a configuration where we have two instances of CommonsChunkPlugin: one for vendor scripts; one for common app code. Now we want to include both on every page. But the generated `vendor.js` and `commons.js` each include the webpack runtime, which doesn't work.\n\nIs there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1688/comments",
    "author": "andrewbranch",
    "comments": [
      {
        "user": "fredericgrati",
        "created_at": "2015-12-02T10:09:12Z",
        "body": "I have two instances of CommonsChunkPlugin : vendor and common.\nwebpack.conf:\n\n```\nvar entry = {\n        profile: [ './app/frontend/javascripts/profile/main.es6'],\n        projects: [ './app/frontend/javascripts/projects/main.es6'],\n        // the vendor entry point\n        vendor: ['babel-polyfill', 'lodash', 'jquery']\n    };\n```\n\n```\n    var plugins = [\n        new webpack.optimize.CommonsChunkPlugin(\"common\", 'common' + (options.longTermCaching ? '-[chunkhash].js' : '.js'), ['projects', 'profile']),\n        new webpack.optimize.CommonsChunkPlugin(\"vendor\", 'vendor' + (options.longTermCaching ? '-[chunkhash].js' : '.js' ), ['common', 'vendor'], Infinity)\n    ];\n```\n\nThe webpack runtime is only present into the vendor bundle and I can use them like this :\n\n```\n  <script src=\"[...]/assets/vendor.js\"></script>\n  <script src=\"[...]/assets/common.js\"></script>\n  <script src=\"[...]/assets/profile.js\"></script>\n```\n\nI hope this will help you (I don't know if it is the correct way to do it but it seems to work)\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-12-02T17:54:14Z",
        "body": "> Is there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n\n@andrewbranch You can do it the way @fredericgrati does it. One of the Plugins should have the name of the other commons chunk in the `chunks` property.\n"
      },
      {
        "user": "andrewbranch",
        "created_at": "2015-12-07T22:01:37Z",
        "body": "I'm a little confused but that seems to work nicely. Thanks!\n"
      }
    ]
  },
  {
    "number": 1677,
    "title": "Unable to set an entry on the ./scripts subpath",
    "created_at": "2015-11-28T01:45:33Z",
    "closed_at": "2016-09-02T05:43:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1677",
    "body": "I'm not able to set an entry which is on a `./scripts` subpath.\n\nThis throws:\n\n```\n{\n  entry: './scripts/norf'\n}\n\nERROR in multi main\nModule not found: Error: Cannot resolve 'file' or 'directory' ./scripts/norf in /example\n@ multi main\n```\n\nMoving to a different path works:\n\n```\n{\n  entry: './foo/norf' // Profit\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1677/comments",
    "author": "langri-sha",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-28T07:26:19Z",
        "body": "Can you set up a standalone test case to illustrate the issue?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-09-02T05:43:13Z",
        "body": "Closing due to inactivity. Feel free to re-open the question at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 1662,
    "title": "how to exclude files from loader",
    "created_at": "2015-11-23T14:43:43Z",
    "closed_at": "2015-11-23T17:13:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1662",
    "body": "I have the next config for webpack loaders:\n\n``` javascript\n module: {\n    loaders: [{\n      test: /\\.js$/,\n      include: rootDir + '/src',\n      loader: 'babel?presets[]=es2015'\n    }, {\n      test: /\\.css$/,\n      loader: 'style!css!autoprefixer?browsers=last 2 versions'\n    }, {\n      test: /\\.(png|gif|jpg|svg|ttf|eot|woff|woff2)$/,\n      loader: 'file?name=[path][name].[ext]'\n    }]\n  }\n```\n\nI want to exclude some files from autoprefixer loader. How can I do this? If I do like this:\n\n``` javascript\n{\n  test: /\\.css$/,\n  exclude: 'someFile',\n  loader: 'style!css!autoprefixer?browsers=last 2 versions'\n}\n```\n\nsomeFile will be excluded not only from autoprefixer loader, it will be excluded from styles, css and autoprefixer loader, but I need exclude file only from autoprefixer loader. How can I do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1662/comments",
    "author": "pavel06081991",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:21:37Z",
        "body": "What if you had another rule like\n\n``` javascript\n{\n  test: /\\.css$/,\n  include: 'someFile',\n  loader: 'style!css'\n}\n```\n\nto deal with that requirement?\n"
      },
      {
        "user": "pavel06081991",
        "created_at": "2015-11-23T16:44:21Z",
        "body": "What about second rule which I wrote in the privious post, in this case it will not get someFile anymore? only your rule will get this file?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:45:25Z",
        "body": "The idea was to write separate rules based on your requirements. You would include/exclude (accepts arrays) based on your exact need.\n"
      },
      {
        "user": "pavel06081991",
        "created_at": "2015-11-23T16:47:35Z",
        "body": "I understood. Thanks, Juho.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:54:13Z",
        "body": "Safe to close?\n"
      }
    ]
  },
  {
    "number": 1648,
    "title": "Make TemplatedPathPlugin's replacePathVariables available as a utility.",
    "created_at": "2015-11-19T17:31:34Z",
    "closed_at": "2015-11-20T19:06:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1648",
    "body": "I am working on writing a plugin that produces a manifest file when a webpack build completes.\n\nAs options to the plugin, I want to be able to let the user specify filenames/paths using webpack's available values such as `[chunk]`, etc.\n\nRight now, that logic is tied up with the TemplatedPathPlugin.\n\nI would like to break it out so that I can do something like this for my own webpack plugin:\n## Plugin\n\n```\nvar replacePathVariables = require( 'webpack/lib/TemplatedPathHelper' ).replacePathVariables;\n\nfunction manifestPluginFactory( opts ) {\n    return function() {\n        this.plugin( 'done', function( stats ) {\n            var manifestContents = _.chain( stats.compilation.namedChunks )\n                .map( function( chunk ) {\n                    // The key is the canonical way to reference the\n                    // file.\n                    var key = chunk.name;\n                    // Get the root directory\n                    var serverPath = path.join( opts.root, opts.path, opts.fileName );\n                    // Leverage existing webpack replacePathVariables method\n                    stats.chunk = chunk;\n                    serverPath = replacePathVariables( serverPath, stats );\n                    return [ key, serverPath ];\n                } )\n                .object()\n                .value();\n            fs.writeFileSync( opts.manifestDest, JSON.stringify( manifestContents ) );\n        } );\n    }\n}\n```\n## Webpack Config\n\n```\n{ plugins: [\n    manifestPluginFactory( {\n        root: '/webpack/build/',\n        path: '[hash]/mobile/',\n        fileName: '[name].js',\n        manifestDest: 'path.join( process.cwd(), 'webpack/build/manifest.json' )'\n    } )\n] }\n```\n## Output\n\nContents of file written to manifestDest:\n\n```\n{ \"mobile/store-test\": \"/webpack/build/366c982a5175bd728f12/mobile/store-test.js\",\n  \"mobile/store\": \"/webpack/build/366c982a5175bd728f12/mobile/store.js\" }\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1648/comments",
    "author": "lzilioli",
    "comments": [
      {
        "user": "lzilioli",
        "created_at": "2015-11-19T17:35:56Z",
        "body": "Submitted #1649 to address this issue. Feedback welcome, I would love to get this into a release if possible.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T07:56:48Z",
        "body": "You can use it in your plugin.\n\n`TemplatedPathPlugin` is not this thing that does the replacement. It's just a plugin that add some replacements. The actual API is the hook `asset-path` that's usable by everything that has a reference to the mainTemplate (which is in the compilation).\n\n``` js\nmainTemplate.applyPluginsWaterfall(\"asset-path\", \"some string [hash]\", {\n    hash: hash,\n    chunk: chunk\n})\n```\n\nIf you want to improve something here, add a `getAssetPath(string, options)` function to the `MainTemplate` that calls the hook and replace all occurences. That would look better.\n\nsee also #427\ncc @diurnalist\n"
      },
      {
        "user": "lzilioli",
        "created_at": "2015-11-20T19:05:59Z",
        "body": "@sokra Thanks a lot for the detailed response. This does, in fact meet my needs.\n"
      }
    ]
  },
  {
    "number": 1645,
    "title": "Build failed but no line number shows",
    "created_at": "2015-11-19T08:07:36Z",
    "closed_at": "2016-09-02T05:49:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1645",
    "body": "My code works properly on windows, but I got an error on `mac ox`\n\nI am using the newest babel `6.x` and here are the error ouputs:\n\n```\nVersion: webpack 1.12.6\nTime: 1321ms\n             Asset     Size  Chunks       Chunk Names\nbasic/js/bundle.js  10.3 kB    0, 1       basic\n      js/common.js  23.2 kB       1       js/common.js\nchunk    {0} basic/js/bundle.js (basic) 7.65 kB {1} [rendered]\n    [0] multi basic 40 bytes {0} [built] [1 error]\n    [2] ../~/webpack-hot-middleware/client.js 3.24 kB {0} [built]\n    [3] ../~/webpack/buildin/module.js 251 bytes {0} [built]\n    [4] ../~/webpack-hot-middleware/~/strip-ansi/index.js 161 bytes {0} [built]\n    [5] ../~/webpack-hot-middleware/~/strip-ansi/~/ansi-regex/index.js 145 bytes {0} [built]\n    [6] ../~/webpack-hot-middleware/client-overlay.js 883 bytes {0} [built]\n    [7] ../~/webpack-hot-middleware/process-update.js 2.93 kB {0} [built]\nchunk    {1} js/common.js (js/common.js) 0 bytes [rendered]\n\nERROR in ./src/exseed_contrib_basic/flux/boot.js\nModule build failed: TypeError: Cannot read property '__esModule' of null\n    at Function.normalisePlugin (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/options/option-manager.js:156:20)\n    at /Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/options/option-manager.js:197:30\n    at Array.map (native)\n    at Function.normalisePlugins (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/options/option-manager.js:173:20)\n    at OptionManager.mergeOptions (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/options/option-manager.js:271:36)\n    at OptionManager.init (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/options/option-manager.js:416:10)\n    at File.initOptions (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/index.js:190:75)\n    at new File (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/file/index.js:121:22)\n    at Pipeline.transform (/Users/gocreating/projects/exseed/node_modules/babel-core/lib/transformation/pipeline.js:42:16)\n    at transpile (/Users/gocreating/projects/exseed/node_modules/babel-loader/index.js:14:22)\n    at /Users/gocreating/projects/exseed/node_modules/babel-loader/lib/fs-cache.js:140:16\n    at /Users/gocreating/projects/exseed/node_modules/babel-loader/lib/fs-cache.js:27:23\n    at fs.js:263:20\n    at FSReqWrap.oncomplete (fs.js:95:15)\n @ multi basic\n```\n\nThe file `boo.js` which caused the weird error:\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Routes from '../routes';\n\nrender(<Routes />, document.getElementById('exseed_root'));\n```\n\nThis file only contains 4 lines of codes, but it still showed error even when I switched to es5 syntax...\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1645/comments",
    "author": "gocreating",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-19T09:21:51Z",
        "body": "Any better luck with Babel 5?\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T08:01:06Z",
        "body": "Please report this to babel.\n"
      },
      {
        "user": "jednano",
        "created_at": "2015-12-18T18:31:15Z",
        "body": "Any progress on this issue? I'm experiencing the same.\n"
      },
      {
        "user": "gocreating",
        "created_at": "2015-12-19T03:46:24Z",
        "body": "@jedmao It seems that I didn't install `babel-loader` properly. I think you can try to reinstall it.\n"
      },
      {
        "user": "jednano",
        "created_at": "2016-01-04T19:58:25Z",
        "body": "Thanks @gocreating, but unfortunately I'm still getting the same error, even after a fresh install of `babel-loader`.\n"
      },
      {
        "user": "BlackGlory",
        "created_at": "2016-01-16T16:28:46Z",
        "body": "I encountered this problem today, then I tried to debug the option-manager.js, and I find the cause of the problem is that the babel-loader.plugins array contained a null value in the webpack.config.js file.\nLike this\n\n``` js\nplugins: [\n, 'transform-runtime'\n, 'syntax-do-expressions'\n, 'syntax-async-functions'\n, 'syntax-async-generators'\n, 'transform-async-to-generator'\n]\n// plugins[0] === null\n```\n\nChanged\n\n``` js\nplugins: [\n  'transform-runtime'\n, 'syntax-do-expressions'\n, 'syntax-async-functions'\n, 'syntax-async-generators'\n, 'transform-async-to-generator'\n]\n// It works!\n```\n"
      }
    ]
  },
  {
    "number": 1636,
    "title": "is it possible to specify sourceMappingURL?",
    "created_at": "2015-11-16T15:51:38Z",
    "closed_at": "2015-11-16T22:43:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1636",
    "body": "Hi guys.\n\nHelp, please, with the specifying of sourceMappingURL.\nWe have our own dev-server, so we need to specify sourceMappingURL as a static asset URL like **/dist/bundle.js.map**, but the default output of the webpack is \n**# sourceMappingURL=bundle.js.map**.\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1636/comments",
    "author": "pkantsedalov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-16T19:25:28Z",
        "body": "You can use the `append` option for the SourceMapDevToolPlugin. i. e. `append: \"\\n//# sourceMappingURL=/dist/\"`\n"
      },
      {
        "user": "pkantsedalov",
        "created_at": "2015-11-16T22:13:59Z",
        "body": "Thanx a lot for the response.\n\nThe final result is the next one: \n\n```\nnew webpack.SourceMapDevToolPlugin({\n    filename: '[file].map',\n    append: `\\n//# sourceMappingURL=${path}[url]`\n})\n```\n"
      }
    ]
  },
  {
    "number": 1635,
    "title": "Got error when using require.context",
    "created_at": "2015-11-16T15:41:23Z",
    "closed_at": "2015-11-20T17:13:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1635",
    "body": "I got an error\n\n```\nvar req = require.context(path.join(ROOT, \"src/pages\"), false, /^\\.\\/.*\\.js$/);\n                  ^\n\nTypeError: require.context is not a function\n```\n\nand I am on Node@v5.0.0 webpack@1.12.6\n\nAny idea on how to resolve this?\n\nThanks,\n\nHao\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1635/comments",
    "author": "haohcraft",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-16T16:54:20Z",
        "body": "Can you provide a little test case? It's easier to figure out what's going on that way.\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-11-17T10:02:06Z",
        "body": "Why does that seem that you are trying to use `require.context` in an unbundled file?\n\nBasically, did you compile your code or did you try running it raw? webPack does not modify `require` at all - it only transpiles it's usage within the bundle during compilation.\n\nWould be nice if you could provide a bit more detail on your scene. :)\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T17:11:01Z",
        "body": "> require.context(path.join(ROOT, \"src/pages\"),\n\nYou can't use an expression as first argument to require.context. It **must** be a compile-time constant string.\n"
      }
    ]
  },
  {
    "number": 1620,
    "title": "Webpack-bundled files not defining 'require'",
    "created_at": "2015-11-12T13:07:10Z",
    "closed_at": "2016-08-30T01:35:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1620",
    "body": "I'm using web pack bundle some js & jsx files to load them unto the browser. All runs well but the moment the browser opens them it logs an error `ReferenceError: Can't find variable: require`.\n\nMy current configuration is the following:\n\n``` javascript\nvar path = require('path');\nvar fs = require('fs');\n\nvar nodeModules = {};\nfs.readdirSync('node_modules')\n  .filter(function (x) {\n    return ['.bin'].indexOf(x) === -1;\n  })\n  .forEach(function (mod) {\n    nodeModules[mod] = 'commonjs ' + mod;\n  });\n\nmodule.exports = [\n  {\n    name: 'server',\n    target: 'node',\n    context: path.join(__dirname, 'src', 'cloud'),\n    entry: ['babel-polyfill', './app.js'],\n    output: {\n      path: __dirname,\n      filename: 'app.bundle.js'\n    },\n    module: {\n      loaders: [\n        {test: /\\.jsx?$/, exclude: /node_modules/, loader: 'babel'}\n      ]\n    },\n    externals: nodeModules,\n    node: {\n      __dirname: true\n    }\n  },\n  {\n    name: 'client',\n    target: 'web',\n    context: path.join(__dirname, 'src', 'static', 'scripts'),\n    entry: {\n      index: ['babel-polyfill', './index.js']\n    },\n    output: {\n      path: path.join(__dirname, 'src', 'public', 'bundles'),\n      filename: '[name].bundle.js'\n    },\n    module: {\n      loaders: [\n        {test: /\\.html$/, loader: 'raw'},\n        {test: /\\.css$/, loader: 'style'},\n        {test: /\\.css$/, loader: 'css'},\n        {test: /\\.jsx?$/, loader: 'babel'}\n      ]\n    },\n    externals: nodeModules\n  }\n];\n```\n\nAny idea as to why could this be happening? Thanks in advance\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1620/comments",
    "author": "alewaros",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T12:17:42Z",
        "body": "Can you set up a standalone project at GitHub so it's easier to examine this problem?\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-14T23:42:11Z",
        "body": "Remove `externals: nodeModules` from the client config to include node_modules in the client bundle.\n"
      }
    ]
  },
  {
    "number": 1615,
    "title": "Can not resolve UglifyJS error",
    "created_at": "2015-11-11T10:25:24Z",
    "closed_at": "2015-11-17T10:18:55Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1615",
    "body": "This:\n\n```\nERROR in 790e10db00a27b6dd6c9-upload.js from UglifyJs\nTypeError: Cannot read property 'indexOf' of undefined\n    at AST_Node.eval [as has_directive] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:3281:28)\n    at Object.TreeWalker.has_directive (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:1277:44)\n    at AST_Node.eval [as hoist_declarations] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:6203:24)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5086:25)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at AST_Node.eval [as optimize] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5110:24)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5090:21)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:6897:60)\n    at AST_Node.eval [as optimize] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5107:23)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5090:21)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:3031:33)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5089:9)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2896:25)\n    at doit (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:125:23)\n    at MAP (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:151:52)\n    at do_list (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2895:16)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:3027:27)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5089:9)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2896:25)\n    at doit (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:125:23)\n    at MAP (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:151:52)\n    at do_list (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2895:16)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2990:21)\n    at Object.merge.before (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:5089:9)\n    at AST_Node.eval [as transform] (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2877:35)\n    at eval (eval at <anonymous> (/Users/Ingwie/Work/BIRD3/node_modules/webpack/node_modules/uglify-js/tools/node.js:22:1), <anonymous>:2908:31)\n```\n\nhappens as long as this\n\n``` javascript\nvar filedrop = require(\"legacy!filedrop\").fd;\n```\n\nexists. Commenting it out silences the error.\n\nWhat exactly is Uglify's problem?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1615/comments",
    "author": "IngwiePhoenix",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T12:20:29Z",
        "body": "Can you reproduce this in isolation directly through Uglify? If so, please push this issue upstream and link here.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-14T21:31:28Z",
        "body": "Looks like a UglifyJs error to me.\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-11-17T10:18:55Z",
        "body": "I forgot to close this. 2.6.0 actually fixed that.\n"
      }
    ]
  },
  {
    "number": 1609,
    "title": "new webpack.SourceMapDevToolPlugin append option is buggy",
    "created_at": "2015-11-09T19:15:41Z",
    "closed_at": "2015-11-14T21:33:20Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1609",
    "body": "This plugin has an append option which could be either a bool or a string, but if I set append to true, I got this error:\ncurrentSourceMappingURLComment.replace is not a function\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1609/comments",
    "author": "gtournie",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-14T21:33:20Z",
        "body": "Updated the documentation. Only `false` is allowed. `true` is invalid.\n"
      }
    ]
  },
  {
    "number": 1607,
    "title": "Add custom code from plugin to the main chunk (or random chunk)",
    "created_at": "2015-11-09T16:46:51Z",
    "closed_at": "2016-09-02T06:03:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1607",
    "body": "Hi everyone.\n\nI wrote plugin that has one place where it generates some js code, that I need for work.\nIt looks like, e.g.:\n\n```\nvar a = 'my custom code';\nconsole.log(a);\n```\n\nAnd i want to add it to one of the chunks, so I can open page and see my message in console.\n\nHow can I do it?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1607/comments",
    "author": "lgordey",
    "comments": [
      {
        "user": "lgordey",
        "created_at": "2015-11-10T08:17:47Z",
        "body": "For example, I know that i can add my cystom asset to compilation.assets array as:\n\n``` javascript\ncompiler.plugin('emit', function(compilation, callback) {\n  compilation.assets[name] = {\n    size: function() { return Buffer.byteLength(source, 'utf8'); },\n    source: function() { return new Buffer(source); }\n  };\n  callback();\n});\n```\n\nSo I need just name and source of my cystom asset to do this.\n\nCan I do the same but for js code injection?\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-11-17T10:31:10Z",
        "body": "You should be able to `addModule()`... but honestly, this is one very undocumented API.\n\nBut please look at the currently available plugin docs. We are working on upgrading the docs too! :)\n"
      },
      {
        "user": "lgordey",
        "created_at": "2015-11-18T11:23:49Z",
        "body": "Now I'v done it as it works in BannerPlugin:\n\n``` javascript\nchunkWrapper = options.chunk;\ncompilation.plugin('optimize-chunk-assets', function(chunks, callback) {\n  chunks.forEach(function(chunk) {\n    if (options.entryOnly && !chunk.initial) return;\n    if (chunk.name === chunkWrapper) {\n      chunk.files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options)).forEach(function(file) {\n        if (/\\.js?$/.test(file)) {\n          compilation.assets[file] = new ConcatSource(myCustomCode, '\\n', compilation.assets[file]);\n        }\n      });\n    }\n  });\n  callback();\n});\n```\n\nTo add `myCustomCode` to chunk, that I can set in plugin options(`chunkWrapper`).\nIt works but looks ugly.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T17:30:05Z",
        "body": "Or you can just use the `BannerPlugin` with the `raw` option.\n\nBut think twice before adding custom code to the bundle. Is is possible to put the custom code in a module and add it as entry point?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-09-02T06:03:26Z",
        "body": "If still relevant, feel free to re-open at Stack Overflow. Thanks.\n"
      }
    ]
  },
  {
    "number": 1589,
    "title": "about  the callback of  'require.ensure'",
    "created_at": "2015-11-05T08:47:39Z",
    "closed_at": "2016-09-02T06:03:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1589",
    "body": "at first time, the callback of  'require.ensure'  execute asynchronous,but the second time ,it execute synchronous.\nbut, the logic in the callback may different while the callback execute asynchronous or synchronous!\nhow to fix this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1589/comments",
    "author": "meiyouqing",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-11-17T10:42:13Z",
        "body": "`require.ensure` ensures that the modules that are listed exist. Once they do, it become ssync. This is the way it is intended to work. Use `require(array Deps, function Callback[, string Chunkname])` if you want it to always be async. As far as i know, the \"normal\" function is never sync, if given an array and function as params.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T17:42:34Z",
        "body": "> Use require(array Deps, function Callback[, string Chunkname]) if you want it to always be async\n\nIt also behaves sometimes sync, sometimes async.\n\n---\n\nI also notices that this behavior is against best pratices with async functions and the behavior is different for webpack 2. In webpack 2 it is always async. But I can't change it for webpack 1 because this would be a breaking change.\n"
      }
    ]
  },
  {
    "number": 1588,
    "title": "Behavior change for Promise.resolve(backbone_collection.fetch()).then(function A() {..})",
    "created_at": "2015-11-05T00:40:54Z",
    "closed_at": "2015-11-20T18:17:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1588",
    "body": "When I create a vendor js with webpack the behavior of Promise.resolve changes:\n\n``` javascript\nPromise.resolve(backbone_collection.fetch()).then(function A() {..})\n```\n\nFunction A is called before fetch resolves when I use the CommonsChunkPlugin to create a vendor js. Everything is normal when webpack is let to create regular bundle of the entry point with chunks and such.\n\nWebpack Config that creates broken Javascript:\n\n``` javascript\n{\n        context: path.join(__dirname, 'src'),\n        entry: {\n            'popup_wide': \"./popup_wide/index.html.js\",\n            'stream': './stream/index.html.js',\n            'vendor.js': [\n                \"async\",\n                \"backbone\",\n                \"backbone-localstorage\",\n                \"chart.js\",\n                \"classnames\",\n                \"firebase\",\n                \"fuse.js\",\n                \"jquery\",\n                \"marked\",\n                \"moment\",\n                \"node-filepicker\",\n                \"react\",\n                \"semantic-ui\",\n                \"sjcl\",\n                \"urijs\"\n            ]\n        },\n        output: {\n            path: path.join(__dirname, 'build'),\n            filename: '[name]/index.html.js',\n            publicPath: \"/capi/build/\"\n        },\n        resolve: {\n            extensions: [\"\", \".webpack.js\", \".web.js\", \".js\", '.jsx'],\n            alias: {\n                'capi': path.join(__dirname, \"src\"),\n                'semantic-ui': path.join(__dirname, 'semantic/dist/semantic.min.js')\n            }\n        },\n        module: {\n            loaders: [\n                {\n                    test: /\\.html$/,\n                    loader: 'file?name=[path][name].[ext]'\n                },\n                {\n                    test: /\\.jsx?$/,\n                    exclude: /node_modules/,\n                    loader: \"babel\",\n                    query: {\n                        optional: ['runtime']\n                    }\n                }\n            ]\n        },\n        plugins: [\n            new webpack.IgnorePlugin(/event-queue/),\n            new webpack.ProvidePlugin({\n                $: \"jquery\",\n                jQuery: \"jquery\"\n            }),\n            new webpack.optimize.CommonsChunkPlugin(\n                \"vendor.js\",\n                \"vendor.bundle.js\"\n            ),\n            new HtmlWebpackPlugin({\n                filename: 'stream/index.html',\n                inject: false,\n                minify: false,\n                template: 'src/stream/index.html'\n            }),\n            new HtmlWebpackPlugin({\n                filename: 'popup_wide/index.html',\n                inject: false,\n                minify: false,\n                template: 'src/popup_wide/index.html'\n            })\n\n        ]\n    }\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1588/comments",
    "author": "ctulek",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T12:31:01Z",
        "body": "What does `backbone_collection.fetch()` return? If it returns a promise, you probably want to use `Promise.resolve(backbone_collection.fetch)...`.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T17:44:46Z",
        "body": "> Promise.resolve(backbone_collection.fetch()).then(function A() {..})\n\nThis code has nothing to do with webpack API. I don't think webpack will change the behavior...\n"
      },
      {
        "user": "ctulek",
        "created_at": "2015-11-20T18:17:56Z",
        "body": "I think it was a mistake on my end. Sorry for taking your time.\n"
      }
    ]
  },
  {
    "number": 1581,
    "title": "Webpack doesn't generate correct ensure code when use with CommonsChunkPlugin",
    "created_at": "2015-11-03T10:00:46Z",
    "closed_at": "2016-08-30T01:41:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1581",
    "body": "Hi,\n\nI'm building a multi-page web app with webpack, I use CommonsChunkPlugin to extract two lib JS files (boot.js and common.js), I don't want webpack do the code split for me base on my \"require\" calls, so I have the build config,\n\n``` javascript\nvar CommonsChunkPlugin = require(\"webpack/lib/optimize/CommonsChunkPlugin\");\n\nvar JS_PATH = \"./assets/js/\";\nvar BUILD_PATH = \"./build/\";\n\n\nmodule.exports = {\n    entry: {\n        boot: JS_PATH + \"module/boot\",\n        common: [\n            JS_PATH + \"module/startup\",\n            ...\n        ],\n        index: JS_PATH + \"index\",\n    },\n    output: {\n        path: BUILD_PATH,\n        publicPath: \"/\",\n        filename: JS_PATH + \"[name].js\",\n        chunkFilename: JS_PATH + \"[name].js\",\n    },\n    plugins: [\n        new CommonsChunkPlugin({\n            names: [ \"common\", \"boot\" ],\n            minChunks: Infinity,\n        }),\n    ],\n}\n\n```\n\nafter built I get 4 types of JS files for each page\n\n```\nboot.js\ncommon.js\n[page_name].js\n[other webpack chunks...]\n```\n\nand my html file looks like this,\n\n``` html\n<html>\n<head>\n<script src=\"/assets/js/boot.js\"></script>\n</head>\n<body>\n    ...\n    <script src=\"/assets/js/[page_name].js\"></script>\n</boby>\n</html>\n```\n\nI expect my page work like this,\n1. boot.js contains webpack runtime and loads first\n2. common.js is loaded by [page_name].js, asynced, indirectly when a \"common module\" is required\nso I have my index.js\n\n``` javascript\nrequire([\"./module/startup\"], function(startup) {\n    startup.doSomething();\n});\n```\n\nHowever, when I deployed and ran my page \"common.js\" is never loaded, I noticed \"**webpack_require**.e\" is not call in the generated code.\n\nI thought webpack knows startup.js is bundled in common.js, so when I require startup asynced, webpack would loaded common.js for me.  Do I expect too much from webpack?  What's the work around?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1581/comments",
    "author": "skatou",
    "comments": [
      {
        "user": "ctulek",
        "created_at": "2015-11-05T00:48:43Z",
        "body": "I think you need to also include common.js in the `<head>`\n"
      },
      {
        "user": "skatou",
        "created_at": "2015-11-05T04:09:15Z",
        "body": "@ctulek Yes I can, however I want to load it async with code, so that I have the option to handle error on load failure (with plugin say async-module-plugin).\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T17:56:33Z",
        "body": "Doing `entry: common` and `require([\"./module/startup\"` will create two **separate** chunks.\n\nSo you either only use the `common` entry point and include it in your HTML.\n\nOR you require it async, don't use it as entry point and don't use it in the CommonChunkPlugin. This way you have to require everything formerly in the common chunk async. I would recommend to use the optimization plugins for merging the chunks into fewer chunks, but you could also enforce everything in a single chunk by giving the `require.ensure` a chunk name (`require.ensure([], f() {}, \"common\")`).\n"
      }
    ]
  },
  {
    "number": 1541,
    "title": "Question: passing string rather than path as entry",
    "created_at": "2015-10-22T23:37:36Z",
    "closed_at": "2015-11-21T22:51:02Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1541",
    "body": "Just wondering whether there is a way to provide raw strings as entries to webpack (i.e. code I would have generated myself and only existing in ram) instead of paths. \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1541/comments",
    "author": "Yomguithereal",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-21T20:51:49Z",
        "body": "yes, you can provide a alternative inputFileSystem to the Compiler.\n"
      },
      {
        "user": "Yomguithereal",
        "created_at": "2015-11-21T22:51:02Z",
        "body": "Thanks @sokra. Will look into it\n"
      }
    ]
  },
  {
    "number": 1519,
    "title": "How to make all modules from one bundle available for another bundle to require",
    "created_at": "2015-10-16T23:25:57Z",
    "closed_at": "2016-08-14T08:14:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1519",
    "body": "Jasmine poses a problem since it relies on injecting variables into the local scope of a module.\n\nHere's what I want to accomplish.\n- Create my dev/production server bundle as usual in one file\n- Create a separate bundle for running via Jasmine whose modules can `require` any module out of the main server bundle.\n- None of those modules should be duplicated in the test bundle -- it should be able to access the same modules containing the realtime state of the server.\n- It must work with `target: 'node'`.  I tried using CommonsChunkPlugin to do this but it doesn't seem to work with `target: 'node'`?\n\nIs there a way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1519/comments",
    "author": "jedwards1211",
    "comments": [
      {
        "user": "aackerman",
        "created_at": "2015-10-28T00:38:33Z",
        "body": "Can you post your webpack config? This sounds like it would be possible.\n\nHave you tried using two separate entry points for your bundles? One as your normal entry point and one to run all of your Jasmine tests.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:14:07Z",
        "body": "If still relevant, please re-open at Stack Overflow.\n"
      },
      {
        "user": "jedwards1211",
        "created_at": "2016-08-14T15:19:43Z",
        "body": "Our project setup has changed since then.  I haven't tried it, but `DllPlugin` sounds like what I was looking for.\n"
      }
    ]
  },
  {
    "number": 1514,
    "title": "How do I include edge.js (it has .DLL files)",
    "created_at": "2015-10-14T15:06:44Z",
    "closed_at": "2016-04-09T05:25:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1514",
    "body": "Really stuck here.  My app needs to require edge.js but it has a bunch of dll files that it needs to work.  I don't get how to add those.  Any help please?\n\nthis is my webpack.config.js:\n\n```\nvar path = require('path');\nvar fs = require('fs');\n\nvar nodeModules = {};\nfs.readdirSync('node_modules')\n  .filter(function (x) {\n      return ['.bin'].indexOf(x) === -1;\n  })\n  .forEach(function (mod) {\n      console.log('mod: ' + mod);\n      nodeModules[mod] = 'commonjs ' + mod;\n  });\n\nmodule.exports = getConfig({\n    port: 9090,\n    hostname: '0.0.0.0',\n    in: 'src/main.js',\n    out: 'public',\n    clearBeforeBuild: true,  \n    target: 'node',\n    externals: nodeModules,\n    output: {\n        library: \"require\",\n        libraryTarget: \"var\"\n    }\n});\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1514/comments",
    "author": "deejbee",
    "comments": [
      {
        "user": "Phoenixmatrix",
        "created_at": "2015-10-15T12:39:13Z",
        "body": "You won't be able to use native modules in the browser...\n"
      }
    ]
  },
  {
    "number": 1498,
    "title": "Question: Pass-Thru Plugin",
    "created_at": "2015-10-07T19:12:08Z",
    "closed_at": "2016-08-14T06:12:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1498",
    "body": "I'm trying to write a plugin that will simply \"pass-thru\" the original entry source directly to its own output file via webpack.   This seems to work, but it add the output file rather than replacing the output of the original entry file.  How do fully replace the output of the entry file, and get it to still show up in assetsByChunkName in stats.json?\n\n``` javascript\n//new PassthruPlugin([{entry: 'analytics', output: 'analytics.js'}]),\n\nfunction PassthruPlugin(options) {\n    this.options = options || {};\n}\n\nPassthruPlugin.prototype.apply = function(compiler) {\n\n    var options = this.options;\n    var rawRequest = '';\n\n    function checkRequest(module) {\n        return module.rawRequest === rawRequest;\n    }\n\n    compiler.plugin('emit', function(compilation, callback) {\n\n        for(var i in options){\n\n            var filename = options[i].entry;\n            rawRequest = compilation.options.entry[filename];\n\n            var foundModule = compilation.modules.filter(checkRequest);\n            var source = foundModule[0]._source._value;\n\n            compilation.assets[options[i].output] = {\n                source: function() {\n                    return source.toString('utf8');\n                },\n                size: function() {\n                    return source.toString('utf8').length;\n                }\n            };\n        }\n\n        callback();\n    });\n};\n\nmodule.exports = PassthruPlugin;\n\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1498/comments",
    "author": "adjavaherian",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-14T06:12:44Z",
        "body": "Can you re-open at Stack Overflow as that works better for support? Thanks.\n"
      }
    ]
  },
  {
    "number": 1476,
    "title": "Detecting which files changed in a Plugin",
    "created_at": "2015-09-26T05:06:44Z",
    "closed_at": "2016-08-28T12:32:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1476",
    "body": "Is there a recommended way to check whether a compilation asset (output file) changed, as part of a webpack rebuild (changed since the previous build, in watch mode).\n\nIn other words, if I wanted to write a simple Plugin to write out the names of the files that changed (different contents than previous output) from one rebuild to the next another, what would be the best way to achieve this?\n\nAny pointers or examples to help me in the right direction would be greatly appreciated.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1476/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T12:32:39Z",
        "body": "Can you re-open the question at Stack Overflow? I hope you get a better response there.\n"
      }
    ]
  },
  {
    "number": 1464,
    "title": "Adding modules programaticaly (loader or plugin)",
    "created_at": "2015-09-21T17:05:26Z",
    "closed_at": "2016-08-14T19:41:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1464",
    "body": "Hey guys. \n\nI am working on creating a loader around Uniter, which transpiles PHP into javascript that can run together with a runtime. Since I get to have the raw AST, i want to traverse the AST fand include the required modules. How do I tell webpack to load an additional module into the bundle?\n\nTake for instance, this PHP code:\n\n``` php\n<?php $util = require(\"util\");\n```\n\nThis will give me this AST:\n\n``` javascript\n{ statements: \n   [ { expression: \n        { left: { variable: 'util', name: 'N_VARIABLE' },\n          right: \n           [ { operator: '=',\n               operand: \n                { path: { string: 'util', name: 'N_STRING_LITERAL' },\n                  name: 'N_REQUIRE_EXPRESSION' } } ],\n          name: 'N_EXPRESSION' },\n       name: 'N_EXPRESSION_STATEMENT' } ],\n  name: 'N_PROGRAM' }\n```\n\nSo I can now iterate over this AST, find `N_EXPRESSION_*` and actually see, that it had `\"util\"` as parameter. Nice - something that WebPack would understand, theoretically. But how do I tell WebPack to do so - to indeed understand, that this code is loading additional modules, and that they should be included?\n\nAnd yes, I have a way to indeed import a JS module into this PHPy environment. But I just need a way to tell webpack to bundle the specified modules.\n\nAny thoughts?\n\nKind regards Ingwie.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1464/comments",
    "author": "IngwiePhoenix",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-09-22T07:01:49Z",
        "body": "write a `require` into the resulting code.\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-09-22T09:42:21Z",
        "body": "@sokra sounds hacky, but looks like thats all I can do.\n\nI did see, by grepping over the `lib/` folder, that Compilation.js has a call to `this.addModule`. I thought maybe that would help but there is no docs on it.\n\nIf there is a more \"natural way\" to do so than patching in some require's, that'd be nice.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-09-22T10:30:57Z",
        "body": "> @sokra sounds hacky, but looks like thats all I can do.\n\nThat's not hacky. Your loader generate a module with dependencies.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T13:41:46Z",
        "body": "@IngwiePhoenix Any luck with this?\n"
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-11-14T13:45:16Z",
        "body": "Nope, unfortunately.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T19:41:52Z",
        "body": "Given a solution was presented, I'm closing this one. Feel free to re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 1414,
    "title": "Output name handling with multiple entry points",
    "created_at": "2015-09-03T05:52:38Z",
    "closed_at": "2016-08-14T19:46:17Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1414",
    "body": "Having config like:\n\nentry: {\n        header_basket: './header-basket/main.jsx',  \n        basket: './basket/main.jsx'\n    },\n    output: {\n        path: path.join(process.env['HOME'], 'project/js/'),\n        filename: '[name].js',\n        sourceMapFilename: '[name].map',\n        libraryTarget: 'var',\n        library: '[name]'\n    }\n\nI want webpack to build bundles with names 'header_basket' and 'basket', but libraries names should be in CamelCase. Is it possible?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1414/comments",
    "author": "WhackoJacko",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-09-13T20:20:38Z",
        "body": "Nope. Sorry.\n"
      }
    ]
  },
  {
    "number": 1413,
    "title": "Are DefinePlugin and jshint-loader incompatible?",
    "created_at": "2015-09-02T20:50:23Z",
    "closed_at": "2016-08-14T08:45:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1413",
    "body": "Given: the following minimal test module:\n\n```\n   module.exports = __DEF__;\n```\n\nGiven: the following plugin configuration for webpack:\n\n```\n   plugins: [ new webpack.DefinePlugin({ \"__DEF__\": \"hi there\" }) ]\n```\n\nGiven: the following preloader:\n\n```\n   {\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: \"jshint-loader\"\n}\n```\n\n**Expected result:** the DefinePlugin replaces `__DEF__` with `\"hi there\"`, and jshint has nothing to complain about.\n\n**Actual result:** jshint-loader reports `W117 '__DEF__' is not defined.`\n\n**Note:** moving the jshint-loader into the loaders or the postLoaders makes no difference. Apparently the jshint-loader is always invoked before the DefinePlugin gets to work. The reason may be in the design of both extensions, but the combination of definitions and hinting is certainly not rare in development environments, and it would be helpful if they worked better together.\n\n**Question:** I don't fully understand the DefinePlugin implementation, but couldn't the DefinePlugin listen to a different event that is fired BEFORE all loaders have been invoked, **or** at least before the postLoaders are invoked (with jshint-loader being used as a postLoader, although it sure wasn't intended as such)?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1413/comments",
    "author": "rondonjon",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-09-03T12:28:36Z",
        "body": "DefinePlugin runs after all loaders, because it extends the webpack parser.\n"
      },
      {
        "user": "phdesign",
        "created_at": "2016-05-13T12:53:05Z",
        "body": "You could add \n\n```\n\"globals\": {\n  \"__DEF__\": true\n}\n```\n\nto `.jshintrc` or `.eslintrc`.\n"
      }
    ]
  },
  {
    "number": 1411,
    "title": "Conditional sourcemaps?",
    "created_at": "2015-09-02T15:10:37Z",
    "closed_at": "2016-04-14T10:07:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1411",
    "body": "The current biggest bottleneck in my build time is in generating sourcemaps. But it seems to me like I don't want to use the same strategy throughout the whole app - namely, it would make a lot of sense to use `eval` or `cheap-eval-source-map` on anything under `node_modules` because I know I'm not running any transforms on that content and don't particularly care about the original source. Meanwhile, I'd like to use `inline-source-map` or `eval-source-map` for all of my own code. \n\nIf there isn't a way to do this already that I'm missing, I think it would be very useful and speed up the development process significantly!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1411/comments",
    "author": "dallonf",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-09-13T20:21:33Z",
        "body": "You can decide on file-level, but not in module level.\n"
      },
      {
        "user": "dallonf",
        "created_at": "2015-09-14T01:48:00Z",
        "body": "Not sure I understand the response. Do you mean configurable by output file? In that case, is it possible to set everything from node_modules to be part of a different output file with a different `devtool` setting?\n"
      },
      {
        "user": "klzns",
        "created_at": "2015-10-16T18:35:41Z",
        "body": "@dallonf, what @sokra is saying is that you can exclude files from generating sourcemaps. \n\nYou should remove the `devtool` option from your config and use SourceMapDevToolPlugin instead.\n\nAn example of how you could achieve what you want is to create a separate entry point for you vendor modules and exclude its sourcemap.\n\nExample:\n\n``` js\n{\n  entry: {\n    'main': './src/index.js',\n    'vendor': [\n      'react',\n      'react-dom'\n    ]\n  },\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['vendor'],\n      minChunks: Infinity\n    }),\n    new webpack.SourceMapDevToolPlugin({\n      filename: '[file].map',\n      exclude: ['vendor.js']\n    })\n  ]\n}\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-14T10:07:08Z",
        "body": "Just realized @brenoc's answer covers this nicely. Closing. :+1:\n"
      }
    ]
  },
  {
    "number": 1408,
    "title": "Npm install error",
    "created_at": "2015-09-01T19:31:03Z",
    "closed_at": "2015-11-14T17:13:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1408",
    "body": "node -v\nv0.12.7\nnpm -v\n2.11.3\n\nnpm ERR! install trying to install 3.0.2 to /node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob\nnpm ERR! install but already installed versions [ '3.0.2' ]\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1408/comments",
    "author": "niln1",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-09-08T20:13:38Z",
        "body": "I cannot help you with this information...\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:13:58Z",
        "body": "Closing as there's not enough info. Please open again if you can repro.\n"
      }
    ]
  },
  {
    "number": 1401,
    "title": "How likely is resolve.unsafeCache to fail?",
    "created_at": "2015-08-29T06:56:19Z",
    "closed_at": "2016-08-30T01:39:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1401",
    "body": "I'm debating whether I should enable it for my build tool (rocket:module for Meteor). Do you have sample cases of when it fails? How much time can we save compared to having a top-level `cache` object?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1401/comments",
    "author": "trusktr",
    "comments": [
      {
        "user": "erictheswift",
        "created_at": "2015-08-31T09:04:44Z",
        "body": "Give it a try.\nPersonally used it and found no reasons to keep it - there were no statistic difference when building/watching a large project (4-5k modules)\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:16:40Z",
        "body": "@trusktr Any update? I wonder if the situation has changed since August. Please note that Webpack 2 is near so maybe that will help.\n"
      },
      {
        "user": "trusktr",
        "created_at": "2015-11-14T23:01:59Z",
        "body": "@bebraw I haven't played with it. I might just update to 2.0 when that's ready and evaluate the options at that point. Caching (safe) had wished fine.\n"
      }
    ]
  },
  {
    "number": 1394,
    "title": "How to create a loader that can handle loader style requires?",
    "created_at": "2015-08-25T20:35:12Z",
    "closed_at": "2015-11-14T17:19:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1394",
    "body": "Hello,\n\nI'm wondering if there is a way to make a loader that can itself process require statements, offloading the actual loading to WebPack and get back the result. The reason is I want to be able to add functionality to SASS like so:\n\n```\n@import 'image-size!someImage.png' as $myImage;\n\ndiv {\n    $width: $myImage.width;\n    $height: $myImage.height;\n}\n```\n\nWhich is translated to:\n\n```\n$myImage: (\n   width: 100px,\n   height: 200px,\n   url: './someImage/png'\n);\n\ndiv {\n   width: map-get($myImage,width);\n   height: map-get($myImage,height);\n}\n```\n\nThe loader would take in the original SASS, find the `@import` statement, run it through web pack. Get the resulting Javascript, convert it to a SASS map, and replace the import statement with the newly created SASS map.\n\nI really, really feel like this is possible, but I have no idea where to start.\n\nThanks,\nKyle\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1394/comments",
    "author": "kkirby",
    "comments": [
      {
        "user": "kkirby",
        "created_at": "2015-08-25T20:52:09Z",
        "body": "After looking around, I think I found what I was looking for: `this.loadModule` inside the loader. If I'm mistaken, let me know. Thanks!\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-08-26T10:34:13Z",
        "body": "`this.loadModule` is what you are looking for.\n"
      }
    ]
  },
  {
    "number": 1381,
    "title": "Getting current entry name within loader",
    "created_at": "2015-08-23T04:44:36Z",
    "closed_at": "2016-08-28T12:38:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1381",
    "body": "**How to get the current entry point's name from within a loader?**\n\nIt is needed for a customized `file-loader` that uses `loaderUtils.interpolateName` by default which obviously interpolates the `[name]` to the currently required file name.\n\nIn `extract-text-webpack-plugin` the `[name]` is interpolated to the **entry point name** and that's what I'm for in the customized `file-loader` _(the purpose of which is to aid in toggling source-maps for `.less` files depending on current environment)_\n\nHence the question. Thanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1381/comments",
    "author": "steven-pribilinskiy",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-28T12:38:40Z",
        "body": "Closing as duplicate of #2090.\n\nYou can also consider asking the same question at Stack Overflow.\n"
      },
      {
        "user": "zba",
        "created_at": "2022-09-30T07:25:55Z",
        "body": "> Closing as duplicate of #2090.\r\n> \r\n> You can also consider asking the same question at Stack Overflow.\r\n\r\nthere is common sense rule - to not close as duplicate tickets with lower id..."
      }
    ]
  },
  {
    "number": 1370,
    "title": "Question: Suggestion: Webpack hard to build desired structure",
    "created_at": "2015-08-19T16:53:57Z",
    "closed_at": "2016-04-17T08:00:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1370",
    "body": "If we have \n\n```\n.\n├── src\n|   ├── css\n|   |    └──  style.css\n|   ├── images\n|   |    └── image.png\n|   └── js\n|        └── main.js\n.\n```\n\n``` css\n/* src/css/style.css*/\nbody{\n   background:url(../images/image.png)\n}\n```\n\n``` javascript\n/* src/js/main.js*/\nrequire('../css/style.css')\n```\n\nI want compile to `dist` folder as the same structure like \n\n```\n.\n├── dist\n|   ├── css\n|   |    └──  main-bundle.css\n|   ├── assets\n|   |    └── image.png\n|   └── js\n|        └── main-bundle.js\n├── src\n.   └── ...\n```\n\nso we wrote webpack.config.js using ExtractTextPlugin to extract css file seperately like\n\n``` javascript\nentry: {\n    main:\"main.js\"\n},\noutput: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"./js/[name].bundle.js\"\n},\nmodule: {\n    loaders: [\n        { test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") },\n        { test: /\\.png$/, loader: \"file-loader?name=./assets/[name].[ext]\" }\n    ],\n    plugins: [\n        new ExtractTextPlugin(\"./css/[name]-bundle.css\")\n    ]\n}\n```\n\nSo we got\n\n``` css\n/* dist/css/main-bundle.css*/\nbody{\n   background:url(./assets/image.png)\n}\n```\n\nBut actually ,we want it to be `url(../assets/image.png)` when I config png loader `file-loader?name=../images/[name].[ext]` it put the image file to outside dist folder instead. I have found out that it's impossible to set url correctly\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1370/comments",
    "author": "thakerng",
    "comments": [
      {
        "user": "adjavaherian",
        "created_at": "2015-08-20T19:13:30Z",
        "body": "I've stopped using file loader for images. I think its easier to no-op mime/images in webpack and build your images with gulp.  You can gulp with imagemin and rev like this:\n\n``` javascript\nvar gulp       = require('gulp');\nvar imagemin   = require('gulp-imagemin');\nvar debug      = require('gulp-debug');\nvar assetManifest   = require('gulp-asset-manifest');\nvar rev             = require('gulp-rev');\n\ngulp.task('images', function() {\n   return gulp.src('images/**/*.+(jpg|jpeg|ico|png|gif|svg)')\n    .pipe(imagemin()) // Optimize\n    .pipe(rev())\n    .pipe(gulp.dest('public/dist/images'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('public/dist'));\n});\n```\n\nAnd then create a manifest loader for your css\n\n``` javascript\n//manifest loader for replacing rev'd sources\n// params url(manifest-loader?relativeSplit=images/&prefix=dist/images&manifest=rev-manifest&outputDir=public/dist!../images/logo.png)\n\nvar loaderUtils = require('loader-utils');\nvar path = require('path');\nvar gutil = require('gulp-util');\n\nmodule.exports = function(content) {\n\n    this.cacheable && this.cacheable();\n    var callback = this.async();\n\n    var options = loaderUtils.parseQuery(this.query);\n    var manifest = require(path.join(options.outputDir, options.manifest));\n    var relativeSplit = options.relativeSplit || '/';\n    var fileName = this.resourcePath.split(relativeSplit)[1] || '';\n    var prefix = options.prefix || '';\n    var result = manifest[fileName] ? path.join(prefix, manifest[fileName]) : '';\n\n    gutil.log('webpack manifest loader', fileName, ' > ', result);\n    callback(null, 'module.exports = \"' + result + '\"');\n\n};\n\nmodule.exports.raw = true;\n```\n\nI haven't tried this in css urls, but it works fine in js components that require images.  Please let me know if you get this working in css urls.\n"
      },
      {
        "user": "thakerng",
        "created_at": "2015-08-20T20:40:36Z",
        "body": "Thank you for your approach I've never use manifest before it seems useful for me\n\nI've already carelessly hacked `file-loader`\n\n``` javascript\nmodule.exports = function(content) {\n    this.cacheable && this.cacheable();\n    if(!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var query = loaderUtils.parseQuery(this.query);\n\n    var url = loaderUtils.interpolateName(this, query.name || \"[hash].[ext]\", {\n        context: query.context || this.options.context,\n        content: content,\n        regExp: query.regExp\n    });\n\n    var to = (query.to)&& loaderUtils.interpolateName(this, query.to, {\n        context: query.context || this.options.context,\n        content: content,\n        regExp: query.regExp\n    });\n\n    this.emitFile((to)?to:url, content);\n    return \"module.exports = __webpack_public_path__ + \" + JSON.stringify(url);\n}\nmodule.exports.raw = true;\n\n```\n\nI separate url from emitFile method by replacing with another parameter `to` that means url() in css would be written with `name` but the image file will emit to different location `to`\n\nusing\n\n``` javascript\n{ test: /\\.png$/, loader: \"file-loader?name=../assets/[name].[ext]&to=./assets/[name].[ext]\" }\n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-08-26T11:09:25Z",
        "body": "There is a `publicPath` option for the ExtractTextPlugin which allows to specify the path to the assets.\n"
      },
      {
        "user": "chemdemo",
        "created_at": "2016-03-09T14:39:23Z",
        "body": "You can just change the file-loader like this:\n\n``` js\n{ test: /\\.png$/, loader: \"file-loader?name=assets/[name].[ext]\" }\n```\n"
      }
    ]
  },
  {
    "number": 1362,
    "title": "loading non-required files",
    "created_at": "2015-08-17T10:03:40Z",
    "closed_at": "2015-11-14T17:49:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1362",
    "body": "is it possible to use a loader on files that you don't require anywhere?\n\nfor example:\nI'm building my front-end code with Webpack but I also want to lint all *.js files in a server specific folder.\n\nthanks in advance.\nGeoffrey\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1362/comments",
    "author": "geoffreydhuyvetters",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-08-17T10:24:18Z",
        "body": "Separate entrypoint. You dont have to use it’s output, but that way you can lint the server code.\n"
      },
      {
        "user": "geoffreydhuyvetters",
        "created_at": "2015-08-17T10:26:24Z",
        "body": "@IngwiePhoenix but there will always be an output?\n"
      },
      {
        "user": "geoffreydhuyvetters",
        "created_at": "2015-08-18T10:08:43Z",
        "body": "is there a plugin or way to ignore a file for output?, I only need to lint it\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:25:23Z",
        "body": "@duivvv Maybe it's better to deal with linting your backend code outside of Webpack? When do you want to trigger the process?\n"
      },
      {
        "user": "geoffreydhuyvetters",
        "created_at": "2015-11-14T17:48:17Z",
        "body": "I'm linting on nodemon restart now, works perfect\n"
      }
    ]
  },
  {
    "number": 1335,
    "title": "Has someone met this error: Maximum setlocal recursion level reached",
    "created_at": "2015-08-08T07:01:10Z",
    "closed_at": "2015-11-16T06:30:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1335",
    "body": "I'm on window 10,\nwhen I run `webpack` from cmd\nI see this error: Maximum setlocal recursion level reached\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1335/comments",
    "author": "littlee",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:35:43Z",
        "body": "@littlee Can you try against the current version? We are going to need a lot more information than that.\n"
      },
      {
        "user": "littlee",
        "created_at": "2015-11-16T03:45:16Z",
        "body": "current version works. I will provide more error information when I see it again. Thanks.\n"
      }
    ]
  },
  {
    "number": 1329,
    "title": "duplicated dependencies in the output bundle",
    "created_at": "2015-08-07T08:21:59Z",
    "closed_at": "2015-11-16T06:32:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1329",
    "body": "I have `require('moment')` in my own module, also I use `bootstrap-daterangepicker` which also depends on `moment`, then I saw this in my build log:\n\n```\n ./~/moment/moment.js 104 kB {0} [built]\n ...\n[10] ./~/bootstrap-daterangepicker/~/moment/moment.js 104 kB {0} [built]\n```\n\nit seems `moment.js` has been bundled two times by webpack, and I have enabled `DedupePlugin` \n\n``` javascript\n    plugins: [\n        new webpack.optimize.DedupePlugin(),\n        new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/), \n...\n    ],\n```\n\nHow to get rid of the duplication?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1329/comments",
    "author": "Zane-XY",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-08-08T10:16:22Z",
        "body": "`npm dedupe`\n"
      },
      {
        "user": "gsklee",
        "created_at": "2015-09-10T10:52:45Z",
        "body": "@sokra what's the purpose of the dedupe plugin then?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:37:49Z",
        "body": "@Zane-XY Any luck? Have you tried it with npm 3?\n"
      },
      {
        "user": "Zane-XY",
        "created_at": "2015-11-16T02:10:58Z",
        "body": "@bebraw I didn't. I solved the problem by externalize the dependencies, and include them outside of webpack.\n"
      }
    ]
  },
  {
    "number": 1292,
    "title": "Production mode compilation throws socket.io 404 error",
    "created_at": "2015-07-24T15:13:53Z",
    "closed_at": "2016-04-07T00:30:15Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1292",
    "body": "I compiled my app.jsx file using the command, webpack -p (webpack versioned 1.8.9). And i tried to load my index.html page using a node-static server. Webpack now bombards my shell terminal with warning messages as, \n\n``` javascript\n20:28:48 [404]: /socket.io/?EIO=3&transport=polling&t=1437749928591-2656\n..............................................................................(repetitively prints same stuff)\n```\n\nMy webpack.config.js looks like,\n\n``` javascript\nvar webpack = require('webpack');\nvar path = require('path');\n\nmodule.exports = {\n  entry: {\n    'app.js': './client/app.jsx'\n  },\n  output: {\n    filename: path.join('dist', 'app.js')\n  },\n  resolve : {\n    extensions: ['', '.js', '.jsx']\n  },\n  module: {\n    loaders: [\n      {test: /\\.jsx$/, loaders: ['babel']},\n    ],\n  }\n};\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1292/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:49:13Z",
        "body": "@madhavan020985 Are you still seeing the same issue?\n"
      },
      {
        "user": "yonimor",
        "created_at": "2015-11-15T13:47:24Z",
        "body": "I'm having the same issue.\n"
      },
      {
        "user": "ghost",
        "created_at": "2015-11-17T06:40:55Z",
        "body": "@Bartekus ebraw, i can't confirm, since i moved out from this work...... but i will keep it open, to address on @ghyonimor \n"
      }
    ]
  },
  {
    "number": 1286,
    "title": "Vendor common file + entrypoints common file",
    "created_at": "2015-07-23T16:18:51Z",
    "closed_at": "2015-11-14T17:50:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1286",
    "body": "I have 3 application bundles (3 entrypoints) and also a bunch of vendor files. I'd like to create a bundle that has all the common code from the 3 entrypoints as well as the bundle of vendor files (or put the common code also in the vendor bundle).\n\n```\nplugins = [\n    new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.bundle.js\"),\n    new webpack.NormalModuleReplacementPlugin(appModuleRegex, function(result) {\n        result.request = result.request.replace(appModuleRegex, \"/web/app/$1/src/$2\");\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.optimize.LimitChunkCountPlugin({maxChunks: 1}),\n    new webpack.optimize.OccurenceOrderPlugin(true)\n];\n```\n\n```\nentrypoints = {\n    framework: 'framework/app',\n    operations: 'operations/app',\n    platform: 'platform/app',\n    vendor: \n        ['babel-core',\n         'crypto-js',\n         'classnames',\n         'd3',\n         'fetch',\n         'lodash',\n         'moment',\n         'moment-timezone',\n         'react',\n         'react-router',\n         'react-select',\n         'zxcvbn2']\n};\n```\n\nCurrently I'm seeing a lot of code duplicated across the app bundles. I also need to keep maxChunks at 1.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1286/comments",
    "author": "evandegr",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-07-23T21:36:14Z",
        "body": "> Currently I'm seeing a lot of code duplicated across the app bundles.\n\nThis is working as intended. Code is only moved to the commons chunk if it is shared by all 3 entry chunks. The idea is to keep initial download time minimal. The client shouldn't download unneeded code.\n"
      }
    ]
  },
  {
    "number": 1279,
    "title": "for... of raises an \"Unexpected identifier\" error",
    "created_at": "2015-07-22T23:37:13Z",
    "closed_at": "2015-11-14T17:54:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1279",
    "body": "test.js\n\n```\n'use strict'\n\nvar set = new Set(['foo', 'bar'])\n\nfor (var item of set) {\n  console.log(item)\n}\n```\n\nrun\n`webpack test.js bundle.js`\n\nResult:\n\n```\nsonny@sonny-laptop /tmp> webpack test.js bundle.js\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.10.1\nTime: 51ms\n   [0] ./test.js 0 bytes [built] [failed]\n\nERROR in ./test.js\nModule parse failed: /private/tmp/test.js Line 5: Unexpected identifier\nYou may need an appropriate loader to handle this file type.\n| var set = new Set(['foo', 'bar'])\n|\n| for (var item of set) {\n|   console.log(item)\n| }\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1279/comments",
    "author": "sonnyp",
    "comments": [
      {
        "user": "SimenB",
        "created_at": "2015-07-25T08:18:49Z",
        "body": "`for .. of` (and `Set`) is ES6, isn't it? Add `babel` or wait for webpack-2\n"
      },
      {
        "user": "sonnyp",
        "created_at": "2015-07-25T09:10:14Z",
        "body": "It's a special case where I don't want to use babel. I'll wait for webpack-2 and use an alternative meanwhile thanks.\n"
      },
      {
        "user": "targos",
        "created_at": "2015-08-26T11:37:37Z",
        "body": "Looks like we don't need to wait for webpack-2 after all.\nThe esprima update in v1.12.0 fixed this :smiley: \n"
      }
    ]
  },
  {
    "number": 1251,
    "title": "Can we group multiple entry points, and make multiple commons files?",
    "created_at": "2015-07-14T22:13:37Z",
    "closed_at": "2016-08-30T01:30:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1251",
    "body": "For example, the code-splitting docs show us we can do\n\n``` js\n{\n    entry: { a: \"./a\", b: \"./b\" },\n    output: { filename: \"[name].js\" },\n    plugins: [ new webpack.optimize.CommonsChunkPlugin(\"init.js\") ]\n}\n```\n\nHow can we do something like the following?\n\n``` js\n{\n    entry: [\n      { a: \"./a\", b: \"./b\" },\n      { c: \"./c\", d: \"./d\" }\n    ],\n    output: { filename: \"[name].js\" },\n    plugins: [\n      new webpack.optimize.CommonsChunkPlugin([\"shared-a-b.js\", \"shared-c-d.js\"])\n    ]\n}\n```\n\nso that we can have multiple shared files for different sets of entry points?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1251/comments",
    "author": "trusktr",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-30T01:30:31Z",
        "body": "I think you might want to leverage the multi-compiler mode here (return an array of configurations). Feel free to re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 1250,
    "title": "Numbered chunks not loading correctly per config",
    "created_at": "2015-07-14T21:52:30Z",
    "closed_at": "2016-12-31T08:24:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1250",
    "body": "So I have two different webpack configs I'm passing in an array that looks something like this:\n\n```\n[\n    {\n        entry: entrypointsIE,\n        output: outputIE,\n        module: {\n            loaders: [\n                  // set of loaders that has one difference to load SCSS variables from a different location\n            ]\n        },\n        resolveLoader: resolveLoader,\n        resolve: resolve,\n        plugins: plugins,\n        devServer: devServer\n    },\n    {\n        entry: entrypoints,\n        output: output,\n        module: {\n            loaders: [\n                 // loaders all the same as the IE9 except one difference in sass loader    \n            ]\n        },\n        resolveLoader: resolveLoader,\n        resolve: resolve,\n        plugins: plugins,\n        devServer: devServer\n    }\n]\n```\n\n```\noutput = {\n    path: '/web/dist',\n    filename: '[name].bundle.js',\n    chunkFilename: '[id].bundle.js'\n};\n\noutputIE = {\n    path: '/web/dist',\n    filename: '[name].ie.bundle.js',\n    chunkFilename: '[id].ie.bundle.js'\n};\n```\n\nand\n\n```\napps.forEach(function(appName, index) {\n    entrypoints[appName] = [ 'webpack/hot/dev-server', appName + '/app' ];\n});\n\nappsIE = apps;\n\nappsIE.forEach(function(appName, index) {\n    entrypointsIE[appName] = [ 'webpack/hot/dev-server', appName + '/app.ie' ];\n});\n```\n\nThe entrypoints are the exact same files (and this is where I think my problem is coming from). I have a conditional in my index.html which loads `framework.ie.js` if it detects IE, and `framework.js` if it does not. This works as expected. The problem is that it does not load the numbered chunks consistently. Sometimes I see `0.bundle.js` getting loaded, and sometimes I see `0.bundle.ie.js` getting loaded (regardless of whether `framework.ie.js` or `framework.js` got loaded).\n\nIs there some way to make it consistently load the correct chunk or is there a way to just make sure that everything I need just gets loaded into the framework bundles without any chunks getting loaded by webpack?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1250/comments",
    "author": "evandegr",
    "comments": [
      {
        "user": "evandegr",
        "created_at": "2015-07-17T14:07:57Z",
        "body": "Any input here? Need help with this.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-07-22T21:29:54Z",
        "body": "I don't know... Sounds pretty weird. If I should take a looks please prepare a minimal test repo.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T07:27:25Z",
        "body": "@evandegr Could you set up a minimal repository showcasing the issue?\n"
      }
    ]
  },
  {
    "number": 1238,
    "title": "webpackMissingModule on webpack reload",
    "created_at": "2015-07-10T07:12:12Z",
    "closed_at": "2016-08-14T08:07:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1238",
    "body": "I am using webpack to compile my backend (because my frontend uses reactjs, and I'm rendering my html on my server using react)\n\nI'm trying to use an email module, and I've tried both nodemailer and sendgrid. When I require/import them in my server code, my server is able to successfully run at first, but when I make a change (and webpack reloads the code), I get this error:\n\n`\ndesmond@deshome:~/Projects/deslee-rebirth/build$ node server.js \n/home/desmond/Projects/deslee-rebirth/build/server.js:15312\nd module \\\"./../package.json\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n                                                                     ^\nError: Cannot find module \"./../package.json\"\n    at webpackMissingModule (/home/desmond/Projects/deslee-rebirth/build/server.js:15312:85)\n    at Object.<anonymous> (/home/desmond/Projects/deslee-rebirth/build/server.js:15312:179)\n    at __webpack_require__ (/home/desmond/Projects/deslee-rebirth/build/server.js:26:30)\n    at Object.<anonymous> (/home/desmond/Projects/deslee-rebirth/build/server.js:15304:19)\n    at __webpack_require__ (/home/desmond/Projects/deslee-rebirth/build/server.js:26:30)\n    at Object.<anonymous> (/home/desmond/Projects/deslee-rebirth/build/server.js:15253:18)\n    at __webpack_require__ (/home/desmond/Projects/deslee-rebirth/build/server.js:26:30)\n    at Object.<anonymous> (/home/desmond/Projects/deslee-rebirth/build/server.js:126:24)\n    at __webpack_require__ (/home/desmond/Projects/deslee-rebirth/build/server.js:26:30)\n    at newObj (/home/desmond/Projects/deslee-rebirth/build/server.js:61:18)\n`\n\nAnd the error happens when I try to include an email related module.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1238/comments",
    "author": "deslee",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-14T18:03:31Z",
        "body": "Can you set up a standalone test case so it's easier to study this?\n"
      }
    ]
  },
  {
    "number": 1228,
    "title": "coffee 2 js Module not found",
    "created_at": "2015-07-08T10:00:50Z",
    "closed_at": "2016-04-17T07:58:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1228",
    "body": "When I  `$ webpack --display-error-details`\nI got some error log: `Module not found: Error: Cannot resolve module 'fs' ...`\nI search the solution, add node to config file like:\n\n```\n...\nnode: {\n  console: false,\n  fs: 'empty',\n  net: 'empty',\n  pg-hstore: 'empty'\n}\n```\n\nBut the pg-hstore still throw error log, all of the middle line name will ignored, thanks any help.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1228/comments",
    "author": "timnity",
    "comments": [
      {
        "user": "timnity",
        "created_at": "2015-07-08T10:06:53Z",
        "body": "my webpack.config.js\n\n```\nmodule.exports = {\n  entry: {\n    mobile: './api/server.coffee'\n  },\n  output: {\n    filename: './apibuild/[name].js'\n  },\n  devtool: 'inline-source-map',\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: 'json-loader',  },\n      { test: /\\.coffee$/, loader: 'coffee-loader', exclude: /node_modules/ }\n    ]\n  },\n  resolve: {\n    extensions: ['', '.coffee', '.json', '.js', '.web.coffee', '.web.js']\n  },\n  node: {\n    console: false,\n    fs: 'empty',\n    net: 'empty'\n  }\n};\n```\n"
      },
      {
        "user": "shama",
        "created_at": "2015-07-14T22:01:26Z",
        "body": "If a module is relying on `fs` you're likely going to have a hard time using the module on the client side. `fs` is for interfacing with the file system which a web browser doesn't have. There are potential `fs` shims out there but it's a big guess whether they'll satisfy the requirements of specific modules.\n"
      },
      {
        "user": "timnity",
        "created_at": "2015-07-15T02:43:53Z",
        "body": "Before I use gulp to transform, uglify, test ... I try to use webpack instead gulp work, but it's hard. thank you\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T18:06:31Z",
        "body": "@timnity Safe to close?\n"
      }
    ]
  },
  {
    "number": 1225,
    "title": "Invalid arguments: 'delay' error",
    "created_at": "2015-07-07T14:20:10Z",
    "closed_at": "2015-11-14T18:06:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1225",
    "body": "The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nif(typeof delay !== \"number\")\n    throw new Error(\"Invalid arguments: 'delay'\");\n\nAccording our research the delay parameter, which is expected as a number, is in fact an object as you can see below: \n{ aggregateTimeout: 200 }\n\nWe used the same version in a previous project and this issues wasn't throwed there so it's posible that some change in the way delay is built introduced this error. \n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1225/comments",
    "author": "amilcar-infante",
    "comments": [
      {
        "user": "gihrig",
        "created_at": "2015-07-09T05:44:16Z",
        "body": "> The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nLatest as of July-8-2015, is 1.10.1 - solved that error for me :-)\n\n```\n\"webpack\": \"1.10.1\", \"\n \"webpack-dev-server\": \"1.10.1\"\n```\n"
      },
      {
        "user": "amilcar-infante",
        "created_at": "2015-07-10T11:56:17Z",
        "body": "Excellent, thanks gihrig!!!\n"
      }
    ]
  },
  {
    "number": 1202,
    "title": "When will modules in ensure() be loaded to page? ",
    "created_at": "2015-06-27T03:37:43Z",
    "closed_at": "2015-11-16T06:31:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1202",
    "body": "After reading the docs and examples of Code Split,\nI don't really understand it.\n\n``` js\nvar a = require(\"a\");\nvar b = require(\"b\");\nrequire.ensure([\"c\"], function(require) {\n    require(\"b\").xyz();\n    var d = require(\"d\");\n});\n```\n\nMy question is when will \"c\" be loaded?\nWhen should I use require.ensure()?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1202/comments",
    "author": "littlee",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-06-27T07:18:40Z",
        "body": "A module that is targeted using require.ensure is loaded asynchronously. That means, it is loaded /after/ the page itself. Imagine you had a jQuery plugin, that you only wanted to load in certain situations, then you would use this. Here is a bit of code that I use to autoload Highlight.JS only when code blocks are there. This allows me to keep the main script’s filesize low, but load additional code on-demand.\n\n```\nif($(\"body\").find(\"pre code\").length > 0) {\n    require.ensure([\n        // Should only load the hljs stuff we need...\n        \"highlight.js\",\n        // Stylesheet.\n        \"highlight.js/styles/hybrid.css\"\n    ], function(hljs){\n        hljs.configure({\n            tabReplace: Array(5).join(\" \")\n        });\n        $(\"body\").find(\"pre code\").each(function(i,v){\n            if($(v).prop(\"class\").match(/language-.+/ig) != null) {\n                // The current block has a language- class.\n                $(v).addClass(\"hascode\");\n                $(v).parent().addClass(\"hascode\");\n                hljs.highlightBlock(v);\n            }\n        });\n    });\n}\n```\n\nwhenever you use require.ensure, that module is put into a separate chunk (aka. another file) which is added to the page once the call occurs. That is also why you have to supply a callback. It will only then be called when the async loading is done and the module is ready to be used.\n\nOn Sa. Juni 27 2015 05:37:48 Littlee wrote:\n\n> After reading the docs and examples of Code Split,\n> I don't really understand it.\n> \n> var a = require(\"a\"\n> );\n> \n> var b = require(\"b\"\n> );\n> \n> require.ensure([\"c\"], function(require\n> ) {\n> \n> require(\"b\"\n> ).xyz();\n> \n> var d = require(\"d\"\n> );\n> });\n> \n> My question is when will \"c\" be loaded?\n> When should I use require.ensure()?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "littlee",
        "created_at": "2015-06-27T08:27:25Z",
        "body": ":smile: :+1: \n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T18:12:44Z",
        "body": "@littlee Did you understand the explanation?\n"
      },
      {
        "user": "littlee",
        "created_at": "2015-11-16T03:38:11Z",
        "body": "yes, if what @IngwiePhoenix said is true.\n"
      }
    ]
  },
  {
    "number": 1183,
    "title": "Replacing module ID with module relative path",
    "created_at": "2015-06-21T19:32:16Z",
    "closed_at": "2016-12-24T07:57:49Z",
    "labels": [
      "enhancement",
      "question",
      "S2: Inconvenient",
      "P4: Nice To Have"
    ],
    "url": "https://github.com/webpack/webpack/issues/1183",
    "body": "A was used to from Browserify to use \"dynamic\" module loading using path, that identified module, to make work my Python / Node app.\n\nExample:\nI have Django app that uses Node to render React files.\nRight into server-side rendered react template I also paste relative path (relative to my main.js file that requires everything for frontend - every .jsx file) of the current rendered react file.\nSo than I had in my template inline js like this:\n\n``` javascript\n<script>\ncurrentTemplate = '../relative/path/to/reactTemplate.jsx';\n</script>\n```\n\nAnd then I could do in my main.js file, where are all .jsx files already required, this:\n\n``` javascript\nReact.render(<currentTemplate {...STATE}/>, document.body)\n```\n\nBrowserify simply matched relative path of current rendered react file from global variable currentTemplate among all required .jsx files.\nAnd that worked brilliantly.\n\nHowever, Webpack identifies modules using ID's that are generated on the server.\nDo you know about any workaround how to make this work again?\nIt would be great, if webpack just used relatives path instead of ID's, but I don't want to fork Webpack because of that :)\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1183/comments",
    "author": "vojtatranta",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-30T01:32:33Z",
        "body": "I know it's possible to override the id generation mechanism using a plugin so perhaps that's the key. If I remember right, there's something known as `NamedModulesPlugin` in the source illustrating the idea.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-12-24T07:57:49Z",
        "body": "Closing due to inactivity. Feel free to re-open at Stack Overflow if this is still relevant."
      }
    ]
  },
  {
    "number": 1163,
    "title": "Troubles using multiple CommonsChunkPlugins",
    "created_at": "2015-06-12T16:41:42Z",
    "closed_at": "2016-08-14T08:15:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1163",
    "body": "I have a project that contains a module named `Table`.  Until now, it was just another module, but now I need `Table` and its three dependencies to run in a WebWorker, and thus need those four modules in their own file, while still allowing my main bundle.js to load like any other module.\n\nI've tried multiple things, such as adding `table.js` in the array of entries next to `app.js`, adding it as its own entry point, both as a string and as an array, and adding `table.js` and its dependencies to their own entry point.\n\nNone of those methods have worked.  The common chunk generates a `table.js` file, but it doesn't have anything in it; `Table` ends up either in bundle.js or vendors.js (the common chunk I've had previously with a bunch of required node modules in it) depending on which CommonChunkPlugin I list first in my `plugins` array.\n\nCould you write an example snippet of a webpack.config.js and also how to import my `Table` module in my other code?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1163/comments",
    "author": "dfoverdx",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-16T07:46:54Z",
        "body": "Here is how I would do it:\n\n``` javascript\n{\n  entry: {\n    ...\n    table: ['dep1', 'dep2', ...]\n  },\n  plugins: {\n    new webpack.optimize.CommonsChunkPlugin(\n      'table',\n      '[name].[chunkhash].js'\n    )\n  }\n}\n```\n\nThis is just the basic setup I use for splitting my vendor dependencies. I might be missing something that's needed for your case specifically.\n\nAn interesting alternative would be to write a separate configuration altogether (return an array of configurations) that would bundle your `Table` related bits. In that case you could skip `CommonsChunkPlugin` altogether.\n"
      }
    ]
  },
  {
    "number": 1108,
    "title": "[production mode] Using webpack for automatic cordova app update and customization",
    "created_at": "2015-05-23T12:15:34Z",
    "closed_at": "2016-08-14T08:01:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1108",
    "body": "Coming back here after years, I'm glad to see webpack has evolved well, and I'm interested to give it another try, remodularising my angular requirejs project into multiple configurable chunks.\n\nHaving around 1mb minified script logic, a lot of images and crosswalk (15mb) bundled in with ionic, the android app has 30mb size, quite expensive for a consumer to download over mobile network. This is already very optimized and probably cannot be avoided initially. \nBut for updates, I see great potential to augment the business logic and ui with incremental chunk downloads with webpack.\n\nSo, does webpack work in a cordova/ionic app (entrypoint on file://, possibly multiple remote servers)? Could it do script caching, updating and possibly even hot reloading?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1108/comments",
    "author": "Phoscur",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:01:56Z",
        "body": "Can you re-open this question at Stack Overflow? That works better for questions like this. 👍 \n"
      }
    ]
  },
  {
    "number": 1069,
    "title": "webpack -w does not output subsequent errors",
    "created_at": "2015-05-16T20:31:40Z",
    "closed_at": "2016-08-14T08:07:18Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1069",
    "body": "STR:\n1. run `webback -w`\n2. Add a syntax error at line 5 in a file\n3. Webpack outputs `Module build failed: Error: Parse Error: Line 5: ....` to console\n4. Add another syntax error at line 15\n5. Fix the error at line 5\n\nI would expect a new error message to be output referring to line 15, but it seems that there is no new console output. Is this intended behaviour?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1069/comments",
    "author": "k88hudson",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-09T05:20:05Z",
        "body": "@k88hudson Can you try again with a fresh version?\n"
      }
    ]
  },
  {
    "number": 1021,
    "title": "Question: How does one use __non_webpack_require__?",
    "created_at": "2015-04-29T01:43:10Z",
    "closed_at": "2015-11-14T19:32:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1021",
    "body": "Trying to figure out how to use this.  Do I need to require('webpack') in my commonjs module?\n\nI basically want Webpack to ignore a module that I'm requiring.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1021/comments",
    "author": "adjavaherian",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-04-29T14:11:47Z",
        "body": "`__non_webpack_require__` is the original `require` function which exists in the environment before webpack comes in.\n\n---\n\nIgnoring modules is a separate thing.\n\nYou can do that with the `browser` field, the IgnorePlugin or resolve.alias.\n"
      },
      {
        "user": "FallingSnow",
        "created_at": "2017-11-20T23:53:24Z",
        "body": "I cannot believe how long it has taken me to find `__non_webpack_require__`. All I wanted to do was require at runtime and I ended up finding `require.ensure`, `System.import`, `await import()`. All of which didn't work for a fully dynamic require.\r\n\r\nIs it possible to get more documentation for this keyword? Also why isn't there a `require.dynamic()` or `require.runtime()` function, is there a reason webpack doesn't do this?\r\n\r\nP.S. My use case was to read a config.js file which has its filename provided at runtime via a command line flag."
      },
      {
        "user": "LeslieOA",
        "created_at": "2020-08-11T00:19:37Z",
        "body": "> `__non_webpack_require__` is the original `require` function which exists in the environment before webpack comes in.\r\n> \r\n> Ignoring modules is a separate thing.\r\n> \r\n> You can do that with the `browser` field, the IgnorePlugin or resolve.alias.\r\n\r\n&nbsp;\r\n\r\n_Just_ incase the above isn't clear enough for anyone who stumbles upon this in the future, \r\nyou literally just have to replace:\r\n\r\n`const someModule = require('some-module)`\r\n\r\n...with:  \r\n\r\n`const someModule = __non_webpack_require__('some-module)`"
      },
      {
        "user": "tungnat97",
        "created_at": "2021-08-11T09:53:28Z",
        "body": "I got this error when using \\_\\_non_webpack_require\\_\\_: Cannot find name '\\_\\_non_webpack_require\\_\\_'."
      }
    ]
  },
  {
    "number": 1010,
    "title": "noParse + deps",
    "created_at": "2015-04-24T21:38:44Z",
    "closed_at": "2016-08-14T08:13:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1010",
    "body": "Some libraries are huge, e.g. highcharts.js, but they depend on other libraries like jQuery. I would like to add highcharts to noParse list, but then the order of bundling is not guaranteed - i.e. jQuery needs to be executed before highcharts so that it's available at window.$.\n\nIs there any way around that?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1010/comments",
    "author": "KidkArolis",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-16T10:37:49Z",
        "body": "Please note that the entry order matters a lot. I think something like `entry: ['jquery', 'highcharts']` should do the trick and force jQuery to be loaded before highcharts. Please give it a go and let me know how it goes.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-14T08:13:00Z",
        "body": "If still relevant, please re-open at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 999,
    "title": "Is there any way to update options.entry of a webpack instance",
    "created_at": "2015-04-22T02:29:09Z",
    "closed_at": "2016-08-30T01:36:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/999",
    "body": "[webpack-with-common-libs example](/webpack/webpack-with-common-libs/blob/master/gulpfile.js#L51)\n\n``` javascript\n// gulpfile.js\n/*myDevConfig = {\n    entry: {\n        index: ['./src/main.js'],\n        post: ['./src/post.js'],\n    },\n    output: {\n        path: './dist'\n    },\n}*/\ngulp.task(\"build-dev\", [\"webpack:build-dev\"], function() {\n    gulp.watch([\"src/**/*\"], [\"webpack:build-dev\"]);\n});\n// create a single instance of the compiler to allow caching\nvar devCompiler;\ngulp.task('webpack:build-dev', function(callback) {\n    devCompiler = devCompiler || webpack(myDevConfig);\n    devCompiler.options.entry = { // dont' work\n        index: ['./src/main.js', './src/test.js'],\n    };\n    // run webpack\n    devCompiler.run(function(err, stats) {\n        if(err) throw new gutil.PluginError(\"webpack:build-dev\", err);\n        gutil.log(\"[webpack:build-dev]\", stats.toString({\n            colors: true\n        }));\n        callback();\n    });\n});\n```\n\nThe `./dist/index.js` does not include the contents of the `./src/test.js` after rebuild.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/999/comments",
    "author": "kairyou",
    "comments": [
      {
        "user": "kairyou",
        "created_at": "2015-04-22T09:27:02Z",
        "body": "My project has about 30 entry and 200+ asset files(running on an Amazon EC2 small instance).\nFull rebuild takes about ~20+ seconds,  rebuild with `gulp.watch` and `cache:false` takes about ~15 seconds, and rebuild with `gulp.watch` and `cache:true` takes about ~5 seconds.\nHope for a solution for faster rebuild(save and cache build results to `/tmp` folder?)\n"
      },
      {
        "user": "SimenB",
        "created_at": "2015-04-22T11:05:34Z",
        "body": "This works for me\n\n``` js\ngulp.task('webpack:dev', [ 'move' ], function () {\n  var webpackOptions = {\n    debug: true,\n    devtool: '#source-map',\n    entry: './hpp/scripts/index.js'\n  };\n\n  return gulp\n    .src(CONFIG_FILENAME)\n    .pipe(webpack.configure(webpackConfig))\n    .pipe(webpack.overrides(webpackOptions))\n    .pipe(webpack.compile())\n    .pipe(webpack.format({\n      version: false,\n      timings: true\n    }))\n    .pipe(webpack.failAfter({\n      errors: true,\n      warnings: true\n    }))\n    .pipe(gulp.dest(''));\n});\n```\n\nTry `devCompiler.overrides`, maybe?\n"
      },
      {
        "user": "kairyou",
        "created_at": "2015-04-23T01:51:12Z",
        "body": "@SimenB Thanks. `webpack` has no function named \"overrides\", (it will throw an error `undefined is not a function`). I've tried with `gulp-webpack-build` and `overrides`, but it also can't update `options.entry` after rebuild. \n"
      },
      {
        "user": "SimenB",
        "created_at": "2015-04-23T05:40:21Z",
        "body": "@kairyou My code is from `gulp-webpack-build`, yeah.\nI noticed when trying to do something similar that `resolve.alias` was not overridden as well. The problem seems to be that it doesn't actually override any condfing present. If the entry is missing from the config file, it's added, but not _overridden_.\n\n@sokra, thoughts?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-30T01:36:32Z",
        "body": "If still relevant, can you re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 998,
    "title": "Using hardcoded configuration variables",
    "created_at": "2015-04-21T23:28:35Z",
    "closed_at": "2016-08-07T15:53:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/998",
    "body": "I am looking to 'pack' along certain configuration variables, without packing the _entire_ configuration file.\n\n**Usecase:** My application has a `config.json` that specifies a maximum filesize for uploads, but also contains things like the database configuration and API keys. Because I have client-side feedback when the maximum filesize is exceeded, I want to 'export' the configured maximum filesize to my frontend bundle.\n\nHowever, simply `require`ing the configuration file would also include the database configuration and API keys in the bundle, which is obviously not desirable - this data is not meant to be accessible to the end user. I'd still like to keep all my configuration variables in a single file on the server, though.\n\nI've been looking around the Webpack documentation and Webpack plugins on npm for a while now, and I've been unable to find any solutions to this problem. Any suggestions?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/998/comments",
    "author": "joepie91",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-04-22T11:53:38Z",
        "body": "`DefinePlugin`\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T10:04:11Z",
        "body": "@joepie91 Did `DefinePlugin` do the trick for you?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-07T15:53:48Z",
        "body": "Closing due to inactivity.\n"
      }
    ]
  },
  {
    "number": 990,
    "title": "Asynchronously loading scripts for an isomorphic app ",
    "created_at": "2015-04-18T14:33:39Z",
    "closed_at": "2017-08-12T08:34:30Z",
    "labels": [
      "question",
      "inactive"
    ],
    "url": "https://github.com/webpack/webpack/issues/990",
    "body": "In my isomorphic app, I have an entry point `application.js` file that runs on both the client and the server. \n\n``` javascript\nvar NotFoundPage = require(\"./pages/not-found\");\nvar ErrorPage = require(\"./pages/error\");\nvar LoadingPage = require(\"./pages/loading\");\nvar LoginPage = require(\"./pages/auth/login\");\nvar JoinPage = require(\"./pages/auth/join\");\n\n// some routing logic to render different pages given above\n...\n```\n\nMy problem is, when I attempt to use the following syntax to load scripts depending on the requested route :\n\n```\nrequire.ensure([], function(){\n     // the page scripts\n});\n```\n\nI get errors like `TypeError: undefined is not a function`, but yet if I use the synchronous syntax `require(...)`, my scripts will all be bundled up into a giant js file. \n\nWhat can I do to tell webpack to create async chunks for me given an isomorphic entry point? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/990/comments",
    "author": "geekyme",
    "comments": [
      {
        "user": "jregeimbal",
        "created_at": "2015-05-05T03:55:40Z",
        "body": "Having the same problem, although I'm not quite sure if webpack context will work they way I am anticipating.  Regardless require.ensure is not being processed correctly.\n\n```\nrequire.ensure(['react-router-proxy!./'+component], function(require) {\n                return require('react-router-proxy!./'+component)\n            }) : require('./' + component)) \n```\n\nis compiling to:\n\n```\n__webpack_require__(29).ensure(['react-router-proxy!./'+component], function(require) {\n                    return require('react-router-proxy!./'+component)\n                }) : require('./' + component)) \n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-05-06T06:51:49Z",
        "body": "You cannot have a expression in `require.ensure`. Just omit the `require.ensure`. It wrong here and `react-router-proxy` already uses async loading.\n\nIf you are doing this for prerendering this won't work, because the prerendered html doesn't fit the to rendered html. React will warn you!\n\nInstead you need to replace the proxied component with a empty component (react-router-proxy should provide it), because in the initial page load the async component is not loaded yet.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T10:08:15Z",
        "body": "@geekyme Did you figure it out based on the tip?\n"
      },
      {
        "user": "jypblue",
        "created_at": "2016-08-12T08:35:18Z",
        "body": "also, i have the same problem\n"
      },
      {
        "user": "rcalabro",
        "created_at": "2016-10-16T23:05:03Z",
        "body": "Hi, if you are using `webpack-isomorphic-tools` you should set `patch_require: true`, it is false by default.\n\nFrom documentation:\n\n> // enables support for `require.context()` and `require.ensure()` functions. \n> // is turned off by default  \n> // to skip unnecessary code instrumentation \n> // because not everyone uses it. \n> // \n> // patch_require: true, // is false by default  \n"
      },
      {
        "user": "webpack-bot",
        "created_at": "2017-08-11T09:22:01Z",
        "body": "**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days."
      },
      {
        "user": "TheLarkInn",
        "created_at": "2017-08-12T08:34:30Z",
        "body": "Closing as this is question."
      }
    ]
  },
  {
    "number": 910,
    "title": "Single file loaded with sync and async require()",
    "created_at": "2015-03-24T20:26:18Z",
    "closed_at": "2016-08-28T12:44:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/910",
    "body": "I have the latest version of webpack and Firefox, currently.\n\nWhen using `require()` for the same file but using two different methods _sync_ `require(\"./file.js\")` and _async_ `require([\"./file.js\"], ...)` Firefox could not load _async_ file and basically left the browser hanging forever, loading something that never loads.\n\nMoreover other tabs/sites also started hanging -- loading something (presumably dynamically .js) forever.\n\nThis is how my requires looked like:\n\n1) `root code` ---> _async_ `require([\"./file.js\"], ...)`\n\n2) `root code` ---> _async_ `require([\"./some_middle_file.js\", ...)` ---> _sync_ `require(\"./file.js\")`\n\nBrowser hangs on the first _async_ require.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/910/comments",
    "author": "streamich",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-03-25T13:01:51Z",
        "body": "Did you test other browser?\n"
      },
      {
        "user": "jhnns",
        "created_at": "2015-03-25T13:11:00Z",
        "body": "Crashing other tabs sounds like an infinite loop to me. However, I'm sure we have your described situation in several projects too and had never an issue like that.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T10:23:47Z",
        "body": "@streamich Can you still see the issue?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T12:44:28Z",
        "body": "Closing due to inactivity. Feel free to re-open with a standalone test case. See the new issue template.\n"
      }
    ]
  },
  {
    "number": 898,
    "title": "How to use with cucumber",
    "created_at": "2015-03-19T17:14:37Z",
    "closed_at": "2016-04-09T12:48:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/898",
    "body": "I'm migrating some tests from using enhanced require to `target: \"node\"`. The problem is that cucumber-js automatically loads files from the test folder. \n\nWhat is the best approach to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/898/comments",
    "author": "totty90",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-03-27T13:29:14Z",
        "body": "You can put your `node_modules` in `options.externals` so they don't go into the bundle.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T10:25:35Z",
        "body": "@totty90 Did you figure this out?\n"
      }
    ]
  },
  {
    "number": 879,
    "title": "output.publicPath ignored when creating production files",
    "created_at": "2015-03-12T11:39:17Z",
    "closed_at": "2016-10-16T09:34:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/879",
    "body": "In my `webpack.config.js` file shown below I have the `publicPath` output option set and in the html file I'm prefixing the URLs with this path, which works fine with the devServer. \nHowever, when building the modules for production they are all put into the root of the dist folder and ignore the `publicPath` path that the html files will be looking for them at.\n\nAm I missing something obvious or just doing it wrong?\nThanks! (coming from Gulp I'm loving the possibilities of Webpack :) )\n\n``` javascript\nvar webpack = require('webpack');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar node_modules = __dirname + '/node_modules';\n\nconfig = {\n  addVendor: function (name, path) {\n    this.resolve.alias[name] = path;\n    this.module.noParse.push(new RegExp(path));\n  },\n\n\n  entry: {\n    app: ['./src/main.js'],\n    vendor: ['react']\n  },\n\n\n  output: {\n    path: './dist',\n    publicPath: '/assets/',\n    filename: '[name].js'\n  },\n\n\n  resolve: {\n    alias: {},\n    extensions: ['', '.js', '.jsx', '.coffee']\n  },\n\n\n  module: {\n    noParse: [],\n    loaders: [\n      {test: /\\.(js|jsx)$/, loader: 'babel', exclude: /node_modules/},\n      {test: /\\.scss$/, loader: ExtractTextPlugin.extract('css?root=..&sourceMap!autoprefixer?{browsers:[\"last 1 version\",\"iOS 6\"]}!sass?sourceMap'), exclude: /node_modules/},\n      {test: /\\.(png|jpg|gif|svg)$/, loader: 'url?limit=4192', exclude: /node_modules/} \n    ]\n  },\n\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.js'),\n    new ExtractTextPlugin('[name].css', {allChunks: true})\n  ],\n\n\n  devServer: {\n    contentBase: './src',\n    historyApiFallback: true,\n    cached: false,\n    progress: true,\n    stats: {\n      colors: true,\n      exclude: [\n        /node_modules[\\\\\\/]react(-router)?[\\\\\\/]/\n      ]\n    }\n  }\n};\n\n\nconfig.addVendor('react', node_modules + '/react/dist/react-with-addons.min.js');\n\n\nif (process.env.NODE_ENV === 'production') {\n  config.plugins.push(\n    new webpack.optimize.UglifyJsPlugin(),\n    new webpack.optimize.DedupePlugin()\n  );\n}\n\nmodule.exports = config;\n\n```\n\nand a simple html file:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Test page</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/app.css\">\n</head>\n<body>\n  <script src=\"assets/vendor.js\"></script>\n  <script src=\"assets/app.js\"></script>\n</body>\n</html>\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/879/comments",
    "author": "subblue",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-08-06T06:54:04Z",
        "body": "@subblue Did you figure this out?\n"
      },
      {
        "user": "SpaceK33z",
        "created_at": "2016-10-16T09:34:53Z",
        "body": "Closing because of inactivity.\n"
      }
    ]
  },
  {
    "number": 806,
    "title": "Is there a way to provide the file contents",
    "created_at": "2015-02-19T23:31:36Z",
    "closed_at": "2016-12-24T15:48:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/806",
    "body": "When a module has been resolved as a file, there doesn't seem to be any plugin for providing the content.\n\nThe callback seems to only search valid paths but no content byte array/string option.\n\nOr is there? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/806/comments",
    "author": "thepian",
    "comments": [
      {
        "user": "thepian",
        "created_at": "2015-02-20T11:02:47Z",
        "body": "I'm looking at after-resolve, is that the place to provide the content ? It seems that resource might be the thing, but I see no documentation for that.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-02-20T14:06:38Z",
        "body": "There is no way.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-02-20T14:06:58Z",
        "body": "Ok, you could provide a custom inputFileSystem to the compiler...\n"
      },
      {
        "user": "thepian",
        "created_at": "2015-02-20T17:08:14Z",
        "body": "That seems like an acceptable solution even if a bit of a workaround\n"
      },
      {
        "user": "thepian",
        "created_at": "2015-02-22T16:40:29Z",
        "body": "This doesn't seem to work with watching\n\nThe build keeps being triggered.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-02-22T16:41:35Z",
        "body": "you also need a custom `watchFileSystem`.\n"
      },
      {
        "user": "thepian",
        "created_at": "2015-02-22T22:55:20Z",
        "body": "I made a simple modification to the new Watcher.\n\n```\nNewWatchingPlugin.prototype.apply = function(compiler) {\n    compiler.plugin(\"environment\", function() {\n        compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem.forWatching || compiler.inputFileSystem);\n    });\n};\n```\n\nThis works except for having virtual entry files. It seems to work differently. I need to add a couple of require statements in addition to the main JS to kick off the application. Is there another way I might do that, perhaps with a loader.\n"
      },
      {
        "user": "thepian",
        "created_at": "2015-02-23T19:09:21Z",
        "body": "It seems that the watching is relying on something other than inputFileSystem.stat / readFile (although stat doesn't seem to be called before the re-compile is triggered)\n\nAfter looking around quite a bit I can't seem to find anything. Even so the rebuild gets constantly triggered.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-17T07:52:44Z",
        "body": "@thepian Any luck with this?\n"
      }
    ]
  },
  {
    "number": 799,
    "title": "Question: circular angular dependencies?",
    "created_at": "2015-02-18T11:46:14Z",
    "closed_at": "2015-11-15T10:51:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/799",
    "body": "Hi, i have two files\n\n``` javascript\n//app.js\n(function(){\n  //initialize myApp\n  var myApp = angular.module('myApp', []);\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n  myApp.config(function ($routeProvider, USER_ROLES) {\n    //something with USER_ROLES, e.g. call $routeProvider\n    $routeProvider\n        .when('/admin', {\n            templateUrl: 'admin.tpl.html',\n            controller: 'adminController',\n            access: {\n                authorizedRoles: [USER_ROLES.admin]\n            }\n        });\n    //...\n  });\n  module.exports = myApp;\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //Uncaught ReferenceError: myApp is not defined\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n\nconstant.js dependent on app.js and vice versa\nhow can I resolve circular dependencies, to prevent **Uncaught ReferenceError: myApp is not defined**, that constant USER_ROLES use myApp.\nCan anyone give me advice? Thx\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/799/comments",
    "author": "f0def",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2015-02-19T00:42:33Z",
        "body": "Welcome to Angular.js and its cool module system :grin: \n\nThere are two possibilities:\n\nMake `constant.js` just return an object instead of registering the constants automatically:\n\n``` javascript\n// constants.js\nmodule.exports = {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n};\n\n// app.js\nmyApp.constant('USER_ROLES', require('./constants.js'));\n```\n\nOr inject myApp to `constants.js`\n\n``` javascript\n// constants.js\nmodule.exports = function (myApp) {\n    myApp.constant('USER_ROLES', {\n        'all': '*',\n        'admin': 'ROLE_ADMIN',\n        'user': 'ROLE_USER'\n    });\n};\n\n// app.js\nrequire('./constants.js')(myApp);\n```\n"
      },
      {
        "user": "f0def",
        "created_at": "2015-02-19T05:04:46Z",
        "body": "@jhnns thanks you for possibilities\nAs you think, and this option can be used? Or is it a bad practice?\nsomething like this:\n\n``` javascript\n//app.js\n(function(){\n  var myApp = angular.module('myApp', []);\n  //calling module.exports in the middle of the app.js\n  module.exports = myApp;\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //requiring app.js\n  var myApp= require('app');\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n"
      },
      {
        "user": "f0def",
        "created_at": "2015-02-19T11:15:02Z",
        "body": "@jhnns thx again, I began to use both methods (I do not use the method of last my response)\n"
      }
    ]
  },
  {
    "number": 786,
    "title": "How to keep require expressions for express lib/view.js",
    "created_at": "2015-02-12T04:17:41Z",
    "closed_at": "2016-08-08T04:40:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/786",
    "body": "Code from express/lib/view.js\n\n``` javascript\nfunction View(name, options) {\n  options = options || {};\n  this.name = name;\n  this.root = options.root;\n  var engines = options.engines;\n  this.defaultEngine = options.defaultEngine;\n  var ext = this.ext = extname(name);\n  if (!ext && !this.defaultEngine) throw new Error('No default engine was specified and no extension was provided.');\n  if (!ext) name += (ext = this.ext = ('.' != this.defaultEngine[0] ? '.' : '') + this.defaultEngine);\n  this.engine = engines[ext] || (engines[ext] = require(ext.slice(1)).__express);\n  this.path = this.lookup(name);\n}\n```\n\nhow to keep \n\n``` javascript\nrequire(ext.slice(1)).__express\n```\n\ncode here ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/786/comments",
    "author": "jetiny",
    "comments": [
      {
        "user": "jetiny",
        "created_at": "2015-02-12T05:53:56Z",
        "body": "my current solution\n\n``````\n    compiler.parser.plugin(\"call require\", function(expr) {\n        //@SEE lib/CompatibilityPlugin.js\n        // express lib/view.js  ``` require(ext.slice(1)).__express) ```\n        if (expr.arguments.length === 1 ){\n            var callee = expr.arguments[0].callee;\n            if (callee && callee.object && callee.property){\n                if (callee.object.name === 'ext' && callee.property.name === 'slice'){\n                    //ext.slice\n                    return true;\n                }\n            }\n        }\n    });\n``````\n\nMay I use this way ?\n\n```\n    compiler.parser.plugin(\"??? require(ext.slice(1)).__express)\", function(expr) {\n        return true;\n    });\n```\n\nand the ??? should be ?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-09T05:52:43Z",
        "body": "Is this relevant still?\n"
      }
    ]
  },
  {
    "number": 768,
    "title": "Optimizations",
    "created_at": "2015-02-08T15:54:09Z",
    "closed_at": "2016-04-24T09:16:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/768",
    "body": "I have not found any place to ask general questions , so dropping them here..\n## UglifyJs\n\nIt is too slow for some reason, uglify using command line is 10 times faster then webpack.\n## Loaders\n\nWe can pass regular expressions to match file extension , why not specific file extension inside a directory.\n\n``` javascript\nloaders: [\n        {\n          test: /\\.js$/,\n          loader: 'some-loader'\n       }\n]\n```\n\nCan i pass something like `core/*.js` or `'core/app.js'`\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/768/comments",
    "author": "thetutlage",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2015-02-09T08:27:46Z",
        "body": "`test` is just a regular expression. You can do all the magic you want. What you're asking for are glob patterns (which imho provide not enough flexibility in this situation)\n"
      },
      {
        "user": "thetutlage",
        "created_at": "2015-02-09T09:04:22Z",
        "body": "No issues with that, later i was able to build better regExp , any thoughts on UglifyJs \n"
      },
      {
        "user": "Chrazy",
        "created_at": "2015-02-09T10:23:57Z",
        "body": "Remove the use of sourcemaps when you're minifying and it will speed up.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T10:58:39Z",
        "body": "@thetutlage Did generating sourcemaps explain the difference?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-04-24T09:16:29Z",
        "body": "Closing. Feel free to open specific questions at Stack Overflow.\n"
      }
    ]
  },
  {
    "number": 584,
    "title": "Is that possible to load  all chunks asynchronous?",
    "created_at": "2014-11-14T08:59:54Z",
    "closed_at": "2016-08-28T12:46:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/584",
    "body": "I want to try webpack on my site and just use it to manage js modules. Here are the code:\n\n``` javascript\n//webpack.config.js\nvar webpack = require('webpack'),\n    commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');\n\n\nmodule.exports = {\n  entry: {\n    guide: './web_modules/guide.js',\n    index: './web_modules/index.js'\n  },\n  output: {\n    path: 'assets/js',\n    filename:  \"[name].bundle.js\",\n    chunkFilename: \"[id].chunk.js\"\n  },\n  resolve: {\n    extensions: ['', '.js', '.json']\n  }\n  ,plugins: [commonsPlugin]\n};\n```\n\n``` javascript\n//entry guide.js\nrequire.ensure(['a'],function(require){\n    require('a');\n});\n```\n\n``` javascript\n//entry index.js\nrequire.ensure(['b'],function(require){\n    require('b')\n});\n```\n\n``` javascript\n// a.js\nrequire('c')\nconsole.log('a')\n```\n\n``` javascript\n//b.js\nrequire('c')\nconsole.log('b')\n```\n\n``` javascript\n//c.js\nconsole.log('c')\n```\n\nI will put the content in common.js and guide.bundle.js(or index.bundle.js) as inline script into each page, use them as a async loader. But the generate chunks don't split module c out. Each chunk has module c's code. Is there a way to achieve this ? Thanks.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/584/comments",
    "author": "szrenwei",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2014-11-17T15:35:16Z",
        "body": "Mhmmm ... this code should work as expected and move `c.js` into `common.js` as far as I can tell.\n"
      },
      {
        "user": "szrenwei",
        "created_at": "2014-11-20T01:42:40Z",
        "body": "actually not, you can have try.\n"
      },
      {
        "user": "sokra",
        "created_at": "2014-11-20T09:52:46Z",
        "body": "The CommonsChunkPlugin only move modules from entry chunks into the commons chunk. Additional chunks are not affected.\n\n``` js\n//entry guide.js\nrequire('a');\n```\n\n``` js\n//entry index.js\nrequire('b')\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-15T11:23:52Z",
        "body": "@szrenwei Any luck with this?\n"
      },
      {
        "user": "szrenwei",
        "created_at": "2015-11-16T02:56:51Z",
        "body": "@bebraw nope.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-08-28T12:46:16Z",
        "body": "Can you re-open at Stack Overflow? Thanks.\n"
      }
    ]
  },
  {
    "number": 504,
    "title": "What exactly happens during recompilation?",
    "created_at": "2014-10-01T17:02:10Z",
    "closed_at": "2014-10-16T09:42:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/504",
    "body": "I'm experimenting with moving a large project to a webpack build system, and am having trouble figuring out what's going on w/ some weird errors I'm encountering on recompilation.\n\nBasically, what I want to do is, after _any_ compilation completes (first or subsequent), get a list of all bundles (JS assets) outputted by the compilation and write their paths into an HTML page.\n\nHowever, it seems like the list of assets is different on a first vs subsequent compilation. What do the flags like `emitted` mean in the context of a recompilation? Furthermore, how are the Chunk objects created/stored? Are new Chunk hierarchies created on every recompilation? I'm using some plugins that modify the chunk hierarchy, and am wondering if that's wrecking havoc. Haven't had much time to dig into the internals yet, so I thought I'd just ask before diving too deep :)\n\nThanks in advance!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/504/comments",
    "author": "diurnalist",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2014-10-06T19:29:39Z",
        "body": "@sokra \n"
      },
      {
        "user": "diurnalist",
        "created_at": "2014-10-07T12:44:03Z",
        "body": "FWIW, I figured out that my issue was because I had a local cache of chunks, but the cache was scoped to the compiler level - not the _compilation_. Since new chunks are created on every compilation, it was actually trying to reference chunks from previous compilations erroneously... leading to some weird bugs.\n\nStill, it'd be nice to know a bit more about what the different flags are intended to mean :)\n"
      },
      {
        "user": "sokra",
        "created_at": "2014-10-07T14:05:00Z",
        "body": "`emitted` is true when the file was written to disk and false if it already exists and was not written to disk (cached).\n\nThere is a similar flag on module level `built`.\n\nIt creates a new chunk hierachy for every compilation.\n"
      }
    ]
  },
  {
    "number": 203,
    "title": "It should be possible to remove or provide a relative publicPath",
    "created_at": "2014-03-14T01:34:38Z",
    "closed_at": "2014-03-31T10:35:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/203",
    "body": "For example, with a tree like:\n\n```\nbuild/\n├── ef4bdee1324f2c59f59f\n│   ├── 3ff1ccb0e6961c99761c38ee635d8dfe.jpg\n│   ├── bundle.js\n│   └── bundle.map\n```\n\nWhere css in bundle.js references the jpg, right now I have to do `publicPath='build/[hash]/'` ... but that makes the css not portable. If instead I could just say `publicPath='.'` or something to indicate that it should relatively pull from wherever bundle.js was included, that would be awesome.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/203/comments",
    "author": "hunterloftis",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2014-03-14T08:31:03Z",
        "body": "A relative publicPath would be relative to the html file.\n\nYou need to set the public path on runtime. Add this to your entry point or add this as additional entry point:\n\n``` javascript\nvar scripts = document.getElementsByTagName(\"script\");\nvar src = scripts[scripts.length - 1].getAttribute(\"src\");\n__webpack_public_path__ = src.substr(0, src.lastIndexOf(\"/\") + 1);\n```\n"
      }
    ]
  },
  {
    "number": 55,
    "title": "Relative Path Resolution",
    "created_at": "2013-01-22T07:51:46Z",
    "closed_at": "2013-01-22T17:03:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/55",
    "body": "Hi sokra,\n\nwhen I try to build the following setup\n\n```\nproject root\n|__ lib\n|    |__ lib.js\n|__ src\n|    |__ main.js\n|__ build.js\n```\n\nwith `webpack 0.8.2`, where `lib.js` is some arbitrary library and `main.js` is as simple as\n\n```\n// main.js\n'use strict';\n\n/*global require:true */\nrequire = require('enhanced-require')(module, {\n    recursive: true\n});\n\nvar Lib = require('../lib/lib.js');\n```\n\nthen `node build` (i.e. basically a clone of your build script) would throw the following error:\n\n```\nERROR: Cannot find module '../lib/lib.js'\n Error: Error: Module \"jshint\" not found in context \"<project root>\\src\"\n  Error: <project root>\\node_modules\\webpack\\buildin\\jshint-webpack-web-loader is not a directory\n @ <project root>\\src\\main.js (line 8, column 14)\n```\n\nThis sample works if `lib.js` is moved to `src` and the import in `main.js` is changed accordingly. By the way, it does not matter if `require` or `enhanced-require` is used.\n\nBest regards,\nmiffels\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/55/comments",
    "author": "miffels",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2013-01-22T09:10:12Z",
        "body": "check the build script... You applied a post loader for any file in `lib` (`postLoaders`). You want to post load the files with `jshint-loader`, but it's not `npm install`ed.\n\nTry `npm install jshint-loader` if you want to post load the files.\n\nOr remove the `postLoader` from you config.\n"
      },
      {
        "user": "miffels",
        "created_at": "2013-01-22T17:03:37Z",
        "body": "Gosh, of course:\n\n```\n    ...\n    preLoaders\": [\n        {\n            \"test\": \"\\\\.js$\",\n            \"include\": \"lib\",\n            \"exclude\": [\n                \"jam\",\n                \"web_modules\",\n                \"node_modules\"\n            ],\n            \"loader\": \"jshint\"\n        }\n    ],\n    ...\n```\n\nshould be\n\n```\n            ...\n            \"include\": \"src\",\n            ...\n```\n\nand the loader was missing, too. There were no postLoaders, though.\n\nFor some reason I knew that the moment would come when I just misconfigured something and created an embarassing issue for no reason :smile:\n\nThanks for pointing out the real issue!\n\nBest regards,\nmiffels\n"
      }
    ]
  },
  {
    "number": 38,
    "title": "Another request for `require.context(./somedir)`",
    "created_at": "2012-11-09T18:01:41Z",
    "closed_at": "2013-01-28T20:11:48Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/38",
    "body": "Hi @sokra \n\nWith a components directory that looks like this:\n\n```\nA.js\nB.js\nB.web.js\nC.js\n```\n\nAnd my ComponentLoader that requires it like this:\n\n```\nvar ComponentLoader = {\n  get: function(name) {\n    return require('../components/' + name);\n  },\n  available: function() {\n    var components = require.context('../components').keys();\n\n    return components.map(function(fileName) {\n      return fileName.replace('./', '').replace('.js', '');\n    });\n  }\n};\n```\n\nIt would be super cool if the context included only \n\n```\nA.js\nB.web.js\nC.js\n```\n\nin the browser, and\n\n```\nA.js\nB.js\nC.js\n```\n\nin node.\n\nCurrently the context includes all files in the browser and node. (And webpack throws a little error, because `B.js` includes `net`.)\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/38/comments",
    "author": "rdrey",
    "comments": [
      {
        "user": "rdrey",
        "created_at": "2012-11-09T18:15:34Z",
        "body": "Sorry, I'm not sure whether this belonged here, in `enhanced-require` or `enhanced-resolve`.\n\nI'm reading the `enhanced-resolve` docs and maybe this could be done with a `postprocess: {context: fn}`?\n"
      },
      {
        "user": "rdrey",
        "created_at": "2012-11-09T18:49:33Z",
        "body": "No'pe, that's a dead end. I thought I could modify the context in the postprocess method, but it only supplies me with the context's path.\n"
      },
      {
        "user": "sokra",
        "created_at": "2012-11-10T17:46:10Z",
        "body": "`require.context` is currently really unflexible... It includes all files that are requirable with a string added to the context string. This means if you can write `./B.js` it's included. `webpackOptions.extensions` is used to match possible files.\n\nThis is required for compatibility. I.e. `require(\"../components/\" + expr)`\n\nCurrent problems for using it for other intents:\n- Subdirectories are included. No opt-out possible.\n- No file filters.\n- enhanced-require do not include subdirectories. (Bug)\n\nYou can solve all these problems with a custom loader, but would be more pretty if you could use `require.context`.\n\nSo the idea is to add two more parameters to `require.context` in one of the next webpack versions to make it more useable:\n\n`require.context(context: String, recursive: Boolean = true, regExp: RegExp = null)`\n- `recusive` include subdirectories.\n- `regExp` filter included files. You promise that the string you pass to the generated function will match (after the `\"./\"`).\n\nAn example\n\n``` javascript\nvar fn = require.context(\"../components\", false, /^[^\\.]*$/);\n```\n\nThis would include the correct files.\n\nAny comments/ideas?\n"
      },
      {
        "user": "rdrey",
        "created_at": "2012-11-10T23:03:39Z",
        "body": "Thanks, yeah here are some comments:\n1. I like how you usually pass in options objects, since they make handling default/optional/named arguments easier to handle.\n2. If the third parameter could take a filter function, it would be a bit more flexible than with just RegExp objects. \n\nI might look at how to do this tomorrow, I've spent all of today outside in the sun. :)\n"
      },
      {
        "user": "sokra",
        "created_at": "2012-11-11T08:55:38Z",
        "body": "Sounds good and usually I would do so. It would be no problem for enhanced-require but for webpack. Webpack has to parse this function by statical code analysis so it has some restrictions. I. e. a function cannot be a closure, an object cannot contain references to variables. I think passing primitive values make this more clear.\n\n``` javascript\nrequire.context(\"../abc\", { a: \"text\" }); // ok\nrequire.context(\"../abc\", { a: variable }); // bad\nrequire.context(\"../abc\", function(name) { return name.substr(2, 4) == \"aa\"}); // ok\nrequire.context(\"../abc\", function(name) { return name.substr(2, 4) == start}); // bad\n\nrequire.context(\"../abc\", true, /^[a-z]+$/); // ok\nrequire.context(\"../abc\", true, regExp); // bad\n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2013-01-22T18:01:15Z",
        "body": "This is sheduled for 0.9...\n"
      },
      {
        "user": "sokra",
        "created_at": "2013-01-28T20:11:48Z",
        "body": "Done\n"
      },
      {
        "user": "FezVrasta",
        "created_at": "2016-06-28T14:58:04Z",
        "body": "@sokra sorry if I'm writing in a so old issue but I'm facing issues with the proposed syntax of the post above.\n\nI thought I could be able to do\n\n```\nrequire.context('../../app', name => ['app.js', 'reducers.js', 'routes.js', 'store.js'].indexOf(name) === -1)\n```\n\nto exclude the files listed in the array, but it doesn't seem to work at all.\n\nAm I missing something or this feature has been removed?\n"
      },
      {
        "user": "sontek",
        "created_at": "2016-08-21T14:45:21Z",
        "body": "I'm with @FezVrasta, is this not supported anymore?\n"
      }
    ]
  }
]