[
  {
    "number": 15754,
    "title": "Feature Post Update Bug",
    "created_at": "2022-11-02T05:15:07Z",
    "closed_at": "2023-03-28T10:04:31Z",
    "labels": [
      "bug",
      "affects:admin",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15754",
    "body": "### Issue Summary\r\n\r\nWhen you go to make a change to a published post and only toggle the \"Feature this post\" checkbox, the Update button isn't activated. You can get around this by going and adding and removing a space to the post content (which makes it think there's been a change made).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Go edit a post in the dashboard\r\n2. Don't make any changes other than step 3\r\n3. Toggle the \"Feature this post\" checkbox\r\n4. Try to update the post (you can't)\r\n\r\n### Ghost Version\r\n\r\nLatest (Ghost Pro)\r\n\r\n### Node.js Version\r\n\r\nGhost Pro (not sure what they're running)\r\n\r\n### How did you install Ghost?\r\n\r\nN/A\r\n\r\n### Database type\r\n\r\nWhichever Ghost Pro uses\r\n\r\n### Browser & OS version\r\n\r\nChrome  106.0.5249.121 & Windows 11\r\n\r\n### Relevant log / error output\r\n\r\n_No response_\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15754/comments",
    "author": "mackenly",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-11-15T15:09:15Z",
        "body": "Hey there, thank you so much for the detailed bug report.\r\n\r\nThat does look like something that shouldn't happen! A PR to fix this issue would be very welcome 🙂\r\n\r\nIn the meantime a workaround is that the standard keyboard shortcut for saving -  `cmd+s` or `ctrl+s` depending on your OS - will always save the post."
      },
      {
        "user": "h2akim",
        "created_at": "2022-11-15T16:27:31Z",
        "body": "Hi 👋\r\n\r\nI've checked on this bug.\r\n\r\nThe published post seems to update automatically when you change anything from the post settings. So, clicking on `Feature this post` checkbox will toggle the featured post instantly. \r\n\r\nThe update button will only be available if you edit the title / post itself"
      },
      {
        "user": "mackenly",
        "created_at": "2022-11-15T19:14:20Z",
        "body": "> The published post seems to update automatically when you change anything from the post settings. So, clicking on `Feature this post` checkbox will toggle the featured post instantly.\r\n> \r\n> The update button will only be available if you edit the title / post itself\r\n\r\nSo is this a feature rather than a bug? haha"
      },
      {
        "user": "nimsaraakash",
        "created_at": "2022-11-15T19:15:39Z",
        "body": "Hello there,\r\n\r\nI think it's not a bug. As @h2akim said it's updating automatically.\r\n\r\nNot only on the feature post but also when we change the Post URL, Meta title, meta description, etc."
      },
      {
        "user": "ErisDS",
        "created_at": "2022-11-15T20:17:25Z",
        "body": "Hmm I'd need to check with @kevinansfield but I thought none of the changes should auto-apply on a published post 🤔 "
      },
      {
        "user": "kevinansfield",
        "created_at": "2022-11-21T09:06:17Z",
        "body": "@ErisDS the post settings menu has always been a bit of an odd one in that respect, changes there save instantly. From what I can remember it was mostly to do with validations, where server-side validation could trigger and put the post into an invalid state but if the post settings menu was closed when saving via the update button - as it would always have been before the recent sticky sidebar introduction - the validation message would effectively be invisible.\r\n\r\nIt's one of those things that's \"expected but a bit odd\" and has been waiting for more comprehensive design review for a long time."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-03-21T10:04:30Z",
        "body": "Our bot has automatically marked this issue as stale because there has not been any activity here in some time.\n\nThe issue will be closed soon if there are no further updates, however we ask that you do not post comments to keep the issue open if you are not actively working on a PR.\n\nWe keep the issue list minimal so we can keep focus on the most pressing issues. Closed issues can always be reopened if a new contributor is found. Thank you for understanding 🙂"
      }
    ]
  },
  {
    "number": 15542,
    "title": "Custom theme settings (Site Design settings) not restored from import",
    "created_at": "2022-10-06T14:19:13Z",
    "closed_at": "2022-10-21T14:02:34Z",
    "labels": [
      "bug",
      "help wanted",
      "Hacktoberfest"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15542",
    "body": "### Issue Summary\n\n(Probably not too relevant, but worth mentioning just in case) I upgraded an ancient < v1 by exporting its data into a fresh v1.26.2 (I think), I then exported the data from the v1.26.2 instance and imported it into the latest version v5.17.2. All was well.\r\n\r\nIts using the default theme casper (v5.3.1), I fiddled with the admin ui a little including changing some of the things under Site Design such as enabling Show logo in navigation, disabling Show publication cover and changing a few other things. I added a twitter url, added some primary and secondary navigation links. That was about it.\r\n\r\nI realised that I would need to make some changes to the theme, so I installed ghost locally with ghost install local. I took an export from the other system and imported it into the local one. Everything seems to have imported with the exception of the changes made under Site Design. The navigation menus are there, the twitter url is there, the posts are there.\r\n\r\nI took a look in the export file I can see things like:\r\n\"custom_theme_settings\": [..., {\"id\":\"633dae33554f811bb2335f53\",\"theme\":\"casper\",\"key\":\"show_logo_in_navigation\",\"type\":\"boolean\",\"value\":\"true\"}, ...] \r\n\r\nI checked a few of the other settings that are missing too and they look correct in the export.\r\n\r\nThere were a few warnings during import for things that were ignored. My User, Newsletter, a couple of Product and 'Settings: Theme not imported, please upload in Settings - Design'. The last one is a little suspicious, but I think it's just the theme itself not being imported due to it already existing rather than the Site Design settings themselves?\r\n\r\nOn the off chance doing this from an export was wrong, I use ghost backup to create a backup and imported the data file within it to a clean local instance of ghost instead of the exported one. It has the exact same issue.\r\n\r\nTo rule out the rest of my content as a problem I setup a fresh local instance, changed the settings under Site Design. Exported the data. Setup another fresh local instance. Imported the data. Looked at the settings under Site Design. They are not set to the ones in the export which I would expect them to be.\r\n\r\nAm I doing something wrong? Should I expect these settings to import ok?\r\n\r\nThanks\r\n\n\n### Steps to Reproduce\n\n1. Install ghost with ghost cli: ghost install local\r\n2. Open resultant ghost in browser and setup\r\n3. Go to settings -> Design\r\n4. Under Homepage, disable Show publication cover\r\n5. Save changes\r\n6. Go to Settings -> Labs, Export\r\n7. Install another ghost instance (I did ghost stop, removed the entire first instance) using ghost cli: ghost install local\r\n8. Open resultant ghost in browser and setup\r\n9. Go to Settings -> Labs, Import... Select the file exported a moment go\r\n10. Go to Settings -> Design.\r\n11. Under Homepage, note Show publication cover is enabled whereas it should be disabled\n\n### Ghost Version\n\nv5.17.2\n\n### Node.js Version\n\nv16.13.1\n\n### How did you install Ghost?\n\nghost cli: ghost install local\n\n### Database type\n\nSQLite3\n\n### Browser & OS version\n\n_No response_\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [x] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15542/comments",
    "author": "ashak",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-10-06T16:16:25Z",
        "body": "You are correct, the importer has not been updated to handle these settings.\r\n\r\nThey're in the export, so not lost, but the importer needs to have code added to it so that they get restored on import.\r\n\r\nWould absolutely love a PR for this! "
      },
      {
        "user": "illiteratewriter",
        "created_at": "2022-10-07T08:04:13Z",
        "body": "@ErisDS Can I give this a shot?"
      },
      {
        "user": "ashak",
        "created_at": "2022-10-07T08:24:49Z",
        "body": "Something else I noticed in relation to this is that if I switch theme the same settings mentioned above also seem to get reset.\r\n\r\nI don't know if that's intentional or also needs fixing."
      },
      {
        "user": "illiteratewriter",
        "created_at": "2022-10-07T08:31:05Z",
        "body": "I think that's because that setting is actually applied to the theme rather than as an overall setting change in Ghost. I believe this is intentional, but I might be wrong. But if you put Casper as the theme again, the settings in Casper should still be there."
      },
      {
        "user": "illiteratewriter",
        "created_at": "2022-10-10T14:45:48Z",
        "body": "@ErisDS I have created an importer which imports but right now it is not editing the existing entries but creating new entries. So I created an `edit` method in `ghost/core/core/server/models/custom-theme-settings.js` but it is still using the default edit method from `crud.js`. Any idea what I might be doing wrong? "
      },
      {
        "user": "ErisDS",
        "created_at": "2022-10-10T18:17:18Z",
        "body": "> I think that's because that setting is actually applied to the theme rather than as an overall setting change in Ghost. I believe this is intentional, but I might be wrong. But if you put Casper as the theme again, the settings in Casper should still be there.\r\n\r\nCorrect - different themes have different settings, so the settings are tied to the theme.\r\n\r\n> @ErisDS I have created an importer which imports but right now it is not editing the existing entries but creating new entries. So I created an edit method in ghost/core/core/server/models/custom-theme-settings.js but it is still using the default edit method from crud.js. Any idea what I might be doing wrong?\r\n\r\nI am not sure I understand - why do you need to create an edit method? \r\n\r\nCould you perhaps raise a PR and talk me through what you're trying to do?"
      },
      {
        "user": "illiteratewriter",
        "created_at": "2022-10-12T05:11:47Z",
        "body": "@ErisDS I didn't have to create an edit method. I misunderstood some functionality. I've created a PR. \r\n\r\nThere is one issue; even though the DB is getting updated, the UI doesn't seem to reflect the changes immediately. It is taking some time after importing to reflect the changes. If I restart the server, the changes get reflected."
      },
      {
        "user": "ErisDS",
        "created_at": "2022-10-12T13:45:04Z",
        "body": "Hey @illiteratewriter Thanks for the PR, I'll leave some comments about this problem over there 🙂 "
      },
      {
        "user": "ErisDS",
        "created_at": "2022-10-21T14:04:16Z",
        "body": "Thanks to @illiteratewriter the fix for this will go out in today's release 🎉 "
      }
    ]
  },
  {
    "number": 15450,
    "title": "Keyboard shortcut to save does not save data in admin members form",
    "created_at": "2022-09-21T15:44:38Z",
    "closed_at": "2022-10-10T12:59:50Z",
    "labels": [
      "bug",
      "affects:admin",
      "help wanted",
      "Hacktoberfest"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15450",
    "body": "### Issue Summary\n\nWhen using the cmd+s keyboard shortcut while editing a Member _when the input field is focused_  the change not actually saved - When the page is reloaded, the data is not present.  *This only seems to happen if the input field is focused*.  If no field is focused (no green outline) then the save works as expected.\n\n### Steps to Reproduce\n\n1. default install of ghost 5.15\r\n2. create a member\r\n3. select (focus) the \"Note\" input and add some content\r\n4. keeping the note field focused (green outline) use the cmd+s \"save\" shortcut.  The \"saved\" green button indicator is shown (top right of right admin panel)\r\n5. reload the page - observe the data added to note field is not saved\r\n\r\nnote: the shortcut works if the field is not focused.\n\n### Ghost Version\n\n5.15\n\n### Node.js Version\n\n16\n\n### How did you install Ghost?\n\nself hosted (EC2) on Ubuntu 22.04. followed self-host guide from ghost documentation\n\n### Database type\n\nMySQL 8\n\n### Browser & OS version\n\nChrome (105.0.5195.125) & Mac OS (12.4)\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15450/comments",
    "author": "adamrhunter",
    "comments": [
      {
        "user": "ryansechrest",
        "created_at": "2022-09-21T20:48:38Z",
        "body": "I can reproduce this. It looks like the value isn't updated in the DOM until that particular field is blurred, because it simply sends the existing value in the payload when the form is saved using the keyboard shortcut. I tested this on Staff, Tags, and Navigation, and everything works as expected there."
      }
    ]
  },
  {
    "number": 15295,
    "title": "Changing emoji in callout card causes page jump in Safari",
    "created_at": "2022-08-23T15:23:30Z",
    "closed_at": "2023-02-02T12:59:26Z",
    "labels": [
      "bug",
      "help wanted",
      "Hacktoberfest"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15295",
    "body": "### Issue Summary\n\nWhen trying to update an emoji in a callout card using Safari, it jumps to the top of the editor (and successfully changes the icon).\r\n\r\n\n\n### Steps to Reproduce\n\n1. Open Safari\r\n2. Create a new post with several paragraphs of content, and insert a call out card after them\r\n3. Try to change the emoji of the callout card, observe you're jumped up to the top of the editor\r\n\n\n### Ghost Version\n\n5.10\n\n### Node.js Version\n\n16\n\n### How did you install Ghost?\n\nghost install\n\n### Database type\n\nMySQL 8\n\n### Browser & OS version\n\nSafari 15.6 (17613.3.9.1.5) / Mac OS 12.5\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15295/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "akp111",
        "created_at": "2022-10-12T20:24:43Z",
        "body": "I want to take this up @ErisDS "
      }
    ]
  },
  {
    "number": 15267,
    "title": "Links with cyrillic characters are not being redirected",
    "created_at": "2022-08-19T09:39:38Z",
    "closed_at": "2022-10-13T10:41:21Z",
    "labels": [
      "bug",
      "help wanted",
      "Hacktoberfest"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15267",
    "body": "### Issue Summary\n\nI added some redirects through `Ghost admin panel → Settings → Labs → Redirects`. But the redirects with Cyrillic characters are not working - it just shows the 404 page. Here's the content of a YAML file I uploaded:\r\n\r\n```\r\n301:\r\n    /joloonii-surgaltuud/b-angilal/: /joloonii-angilal/#в-ангилал\r\n    /joloonii-surgaltuud/c-angilal/: /joloonii-angilal/#с-ангилал\r\n    /joloonii-surgaltuud/а-ангилал/: /joloonii-angilal/#а-ангилал\r\n    /joloonii-surgaltuud/м-ангилал: /joloonii-angilal/#м-ангилал\r\n```\r\nThe first two works fine, but not the last two (I assume it's because they contain Cyrillic characters like `л, г, н`, etc)\n\n### Steps to Reproduce\n\n1. Upload a `.yaml` file containing redirects with Cyrillic characters on `Ghost admin panel → Settings → Labs → Redirects`\r\n2. Check if the redirect works\n\n### Ghost Version\n\n5.9.4\n\n### Node.js Version\n\nv16.14.2\n\n### How did you install Ghost?\n\nUbuntu 20.04.4 LTS\n\n### Database type\n\nMySQL 8\n\n### Browser & OS version\n\n_No response_\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15267/comments",
    "author": "zolbayars",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-08-19T10:41:53Z",
        "body": "Hey @zolbayars, thank you so much for the detailed bug report.\r\n\r\nThat does look like something that shouldn't happen! A PR to fix this issue would be very welcome 🙂"
      },
      {
        "user": "zolbayars",
        "created_at": "2022-08-20T02:22:08Z",
        "body": "Hi @ErisDS, I'm gonna take a look 🙂"
      }
    ]
  },
  {
    "number": 15042,
    "title": "Lazy loading images above the fold breaks CLS",
    "created_at": "2022-07-18T08:27:46Z",
    "closed_at": "2022-07-27T09:42:27Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/15042",
    "body": "### Issue Summary\n\nLazy loading images in Ghost 4 is a nice improvement. But it looks to include a lazy loading attribute on all images and not just the images below the fold. Marking images shown above the fold with lazy makes Cumulative Layout Shift (CLS) in PageSpeed Insights break with the following message:\r\n\r\n> Above-the-fold images that are lazily loaded render later in the page lifecycle, which can delay the largest contentful paint.\n\n### Steps to Reproduce\n\n1. Add a new image section in the top of a Ghost post.\r\n2. The `img` element is marked with `loading=\"lazy\"`.\n\n### Ghost Version\n\n5.2.3\n\n### Node.js Version\n\n12\n\n### How did you install Ghost?\n\nDigitalOcean\n\n### Database type\n\nMySQL 8\n\n### Browser & OS version\n\n_No response_\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/15042/comments",
    "author": "ThomasArdal",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-07-26T14:39:47Z",
        "body": "I am not sure how we would approach calculating what is/isn't above the fold, given that Ghost has custom theme support. This seems to me like it's really an issue with the browser's interpretation / implementation of lazy-load (after all - in a dynamic contact environment the browser has a more information than the server about how content is going to render). \r\n\r\nHowever, I'd love to hear any ideas you have about how to solve this."
      },
      {
        "user": "ThomasArdal",
        "created_at": "2022-07-26T15:07:56Z",
        "body": "I totally understand why it is not possible to make this dynamic. Maybe a setting on the image when uploading it on Ghost and including it in the post."
      },
      {
        "user": "ErisDS",
        "created_at": "2022-07-26T16:18:11Z",
        "body": "This is not the kind of thing we put into the UI because the majority of our users are non-technical and wouldn't know what to do with it. \r\n\r\n"
      },
      {
        "user": "ThomasArdal",
        "created_at": "2022-07-26T19:32:48Z",
        "body": "Yeah, I guess you're right. Not sure how this could be done. Let's close."
      },
      {
        "user": "ErisDS",
        "created_at": "2022-07-27T09:42:27Z",
        "body": "Cool ok - I'm totally all ears for any suggestions anyone comes up with for how to solve this - but I am fairly sure this is one of those things that either requires additions to the spec for lazy loading or the browsers will have to sort amongst themselves.\r\n\r\n"
      }
    ]
  },
  {
    "number": 14440,
    "title": "AMP pages have no alt text on images",
    "created_at": "2022-04-07T21:36:36Z",
    "closed_at": "2022-04-28T10:33:23Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/14440",
    "body": "### Issue Summary\n\nThis issue was reported by SEMRush. None of the /amp/ versions of the pages on our Ghost blog have alt text on the images.\r\n\r\nIt looks like <amp-img> supports the alt tag. Is there a reason it doesn't get set in the amp pages?\r\n\r\nThanks.\n\n### Steps to Reproduce\n\n1. Create a post with image\r\n2. look at /amp page for that post\n\n### Ghost Version\n\n4\n\n### Node.js Version\n\nunknown\n\n### How did you install Ghost?\n\nHosted by mymidnight\n\n### Database type\n\nSQLite3\n\n### Browser & OS version\n\n_No response_\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/14440/comments",
    "author": "nlaughton",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-04-08T11:33:58Z",
        "body": "We'd welcome a PR to improve this behaviour."
      }
    ]
  },
  {
    "number": 14383,
    "title": "MacOS text replacements get inserted automatically.",
    "created_at": "2022-03-29T09:48:26Z",
    "closed_at": "2022-08-14T15:04:55Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/14383",
    "body": "### Issue Summary\n\nI have a lot of text replacements for my Mac to replace a shortcode with a longer word/sentence. For example; eg gets replaced by e.g. \r\n\r\nHowever, the Ghost editor always inserts this text replacement no matter what. Normally it's after a space. The Medium editor handles this well though. \r\n\r\nFor me, it's not possible to write my blog posts in the Ghost editor because of my text replacements.\n\n### Steps to Reproduce\n\n1. Add a text replacement for macOS in System Preferences -> Keyboard -> Text\r\n2. Replace \"eg\" with \"e.g.\"\r\n3. Open the Ghost editor\r\n4. Write egg\r\n\r\n```\r\n# Normally\r\neg+space -> e.g.\r\n# Ghost editor:\r\negg -> e.g.g\r\n```\r\n\n\n### Ghost Version\n\n4.33\n\n### Node.js Version\n\nv14.18.1\n\n### How did you install Ghost?\n\nGhost CLI on Ubuntu 20.04\n\n### Database type\n\nMySQL 8\n\n### Browser & OS version\n\nMacOS Big Sur Version 11.6 - Chrome Version 99.0.4844.83 (Official Build) (arm64)\n\n### Relevant log / error output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/14383/comments",
    "author": "MrAtiebatie",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-04-08T19:51:18Z",
        "body": "I've not seen this crop up before. Would be happy to accept a PR improving the behaviour :) "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-08-07T15:04:48Z",
        "body": "Our bot has automatically marked this issue as stale because there has not been any activity here in some time.\n\nThe issue will be closed soon if there are no further updates, however we ask that you do not post comments to keep the issue open if you are not actively working on a PR.\n\nWe keep the issue list minimal so we can keep focus on the most pressing issues. Closed issues can always be reopened if a new contributor is found. Thank you for understanding 🙂"
      }
    ]
  },
  {
    "number": 14287,
    "title": "Editor's toolbar is hidden under android's text menu.",
    "created_at": "2022-03-09T11:05:16Z",
    "closed_at": "2022-10-03T15:06:02Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/14287",
    "body": "### Issue Summary\r\n\r\nHi\r\nWhen I use the post editor on my android phone, the \"copy/cut/past\" pops over ghost's text toolbar.\r\nAs android's is set to display on the upper side of the selected text, I suggest that ghost's should be updated to appear downer at leat for smartphones.\r\n\r\nThanks !\r\n\r\n### Steps to Reproduce\r\n\r\n1. Go in ghost's post editor with an android 11 smartphone\r\n2. Select a piece of text\r\n\r\n### Ghost Version\r\n\r\nLas\r\n\r\n### Node.js Version\r\n\r\nLas\r\n\r\n### How did you install Ghost?\r\n\r\nSsh\r\n\r\n### Database type\r\n\r\nMySQL 8\r\n\r\n### Browser & OS version\r\n\r\nChrome and android 11 both updated to last version\r\n\r\n### Relevant log / error output\r\n\r\n_No response_\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/14287/comments",
    "author": "GregFdz",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-03-23T11:05:58Z",
        "body": "This issue is currently awaiting triage from @ErisDS. We're having a busy time right now, but we'll update this issue ASAP. If you have any more information to help us triage faster please leave us some comments. Thank you for understanding 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-04-06T11:06:43Z",
        "body": "This issue is currently awaiting triage from @ErisDS. We're having a busy time right now, but we'll update this issue ASAP. If you have any more information to help us triage faster please leave us some comments. Thank you for understanding 🙂"
      },
      {
        "user": "ErisDS",
        "created_at": "2022-04-08T19:36:08Z",
        "body": "Ghost's editor isn't at all optimised for mobile. There are many much deeper issues that this. If you'd like to submit a PR to fix this particular problem, we'd be happy to merge it."
      },
      {
        "user": "jdaviescoates",
        "created_at": "2022-05-28T20:02:37Z",
        "body": "> Ghost's editor isn't at all optimised for mobile.\r\n\r\nThis is a mighty shame. I was hoping to start offering all sorts of people and project Ghost hosting, but with an unusable mobile editor in a mobile-first world it makes Ghost as good as useless for many :( such a shame :( "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-26T15:05:18Z",
        "body": "Our bot has automatically marked this issue as stale because there has not been any activity here in some time.\n\nThe issue will be closed soon if there are no further updates, however we ask that you do not post comments to keep the issue open if you are not actively working on a PR.\n\nWe keep the issue list minimal so we can keep focus on the most pressing issues. Closed issues can always be reopened if a new contributor is found. Thank you for understanding 🙂"
      }
    ]
  },
  {
    "number": 13971,
    "title": "AssetHelper not working with svg ",
    "created_at": "2022-01-13T08:45:22Z",
    "closed_at": "2022-02-07T15:07:19Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/13971",
    "body": "### Issue Summary\r\n\r\nThe asset helper does not work with svg images using # because it adds a query param.\r\n\r\n### Steps to Reproduce\r\n\r\n```\r\n <svg class=\"icon icon__primary quote__line\">\r\n        <use xlink:href=\"{{asset \"images/solid.svg#minus\"}}\"></use>\r\n</svg>\r\n```\r\n\r\nUsing this does not show the svg images it renders to:\r\nxlink:href=\"/assets/images/solid.svg#minus?v=094ca0c660\"\r\n\r\nWhen I remove the param it works fine and also of cource if  I don't use the helper but this raises a gscan error\r\n\r\n### Ghost Version\r\n\r\n4.32.0\r\n\r\n### Node.js Version\r\n\r\n14.18.2\r\n\r\n### How did you install Ghost?\r\n\r\nDocker Image\r\n\r\n### Database type\r\n\r\nSQLite3\r\n\r\n### Browser & OS version\r\n\r\nChrome / safari\r\n\r\n### Relevant log / error output\r\n\r\n_No response_\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to be friendly and polite to people in this repository",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/13971/comments",
    "author": "torstenzander",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2022-01-14T17:27:25Z",
        "body": "Hi @torstenzander thanks for the report. A PR that fixes this issue would be very welcome :)"
      }
    ]
  },
  {
    "number": 13097,
    "title": "Keyboard suggestions / autocorrect do not work on iOS",
    "created_at": "2021-06-27T21:06:27Z",
    "closed_at": "2021-12-09T16:42:16Z",
    "labels": [
      "bug",
      "affects:editor",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/13097",
    "body": "### Issue Summary\r\n\r\nWhen typing in the post editor on iOS, keyboard suggestions and autocorrect do not work.\r\n\r\nIn most apps and websites, you should see suggested words show above the keyboard as you type. These don't appear in the Ghost editor - that section is blank. Also, if you make a typo, the keyboard will automatically correct it; this doesn't happen in the Ghost editor.\r\n\r\nI did a bit of investigation on my own, and this seems to have something to do with calling preventDefault() on the key events.\r\n\r\n### To Reproduce\r\n\r\n1. Create a new post.\r\n2. Start typing in the body. Notice that the suggestion bar at the top of the keyboard stops updating after one or two keypresses.\r\n3. Make a typo in a word. Notice that the keyboard does not suggest or correct it, as it would in other apps.\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 4.6.3\r\n* Node Version: 14.7.1\r\n* Browser/OS: Safari iOS 14.6\r\n* Database: MySQL 8.0.25\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/13097/comments",
    "author": "JBYoshi",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2021-06-28T10:14:02Z",
        "body": "Until recently, we had a big banner saying we didn't officially support the editor on mobile. We took that away as it largely works, especially on iPad and the banner got in the way. However, no work has been done to make the editor experience tailored to mobile.\r\n\r\nI use the editor on my phone a lot and this also bugs me, would love to see a PR which makes this work!"
      },
      {
        "user": "johlym",
        "created_at": "2021-07-12T04:45:22Z",
        "body": "Could `contenteditable=\"true\"` and or `spellcheck=\"true\"` be helpful on each of the `div`s in the editor? \r\n\r\nPoking at this for a moment, and using textbox.io as a comparison, that appears to be the only big difference I can see. \r\n\r\nAlso curiously enough, I can reproduce this, but only if I don't tap a predictive suggestion first. If I do that, it works fine for as long as I want 🤔\r\n\r\n"
      },
      {
        "user": "JBYoshi",
        "created_at": "2021-08-20T15:44:26Z",
        "body": "After a bit of experimentation, I found that switching to `preventDefault()` on the `beforeinput` event (instead of `keydown`) *does* work as expected with autocorrect/suggestions. Although it does have a different API, it should provide the same behavior, along with support for other inputs like pastes."
      },
      {
        "user": "JBYoshi",
        "created_at": "2021-12-09T16:42:16Z",
        "body": "This is reproducible with just mobiledoc-kit, so I'm moving the issue there."
      }
    ]
  },
  {
    "number": 12801,
    "title": "Scrolling glitch in post editor on iOS",
    "created_at": "2021-03-21T02:49:57Z",
    "closed_at": "2021-11-30T15:09:29Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/12801",
    "body": "### Issue Summary\n\nThe scrolling behavior in the post editor on iOS Safari feels inconsistent. It seems that Safari thinks there are two scrollable areas in the post editor, one inside the other.\n\n### To Reproduce\n\n1. Open a post in the admin client that takes up at least two screens worth of content.\n2. Flick up on the screen to scroll as far down as Safari will let you until the screen bounces at the end. Notice the last three lines or so are covered up, along with the word count.\n3. Pause for a few seconds and swipe up again. The screen will slide up the rest of the way, and a second scroll bar will briefly appear on top of the first. Also notice that the top bar has now disappeared.\n4. Flick-scroll back to the top of the page. Notice that the scroll bar bounces before reaching the top with the title. To see the title, you need to pause and scroll up again.\n\nI'd expect to be able to scroll from the top to the bottom without having to pause in the middle of scrolling. Having to wait in the middle feels awkward and unnatural.\n\n### Technical details:\n\n* Ghost Version: 4.1.0\n* Node Version: 12.21.0\n* Browser/OS: Safari iOS 14.4.1\n* Database: MySQL 8.0.23-0ubuntu0.20.04.1",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/12801/comments",
    "author": "JBYoshi",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2021-06-22T17:56:35Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "JBYoshi",
        "created_at": "2021-06-27T20:12:32Z",
        "body": "Still happens on Ghost 4.8.3 / Safari iOS 14.6."
      },
      {
        "user": "concentrateddon",
        "created_at": "2021-08-06T19:05:43Z",
        "body": "Not experiencing this on iPadOS 15 beta 4."
      }
    ]
  },
  {
    "number": 12762,
    "title": "Discrepancies in time fields precision between Admin API responses and Webhook requests for Posts",
    "created_at": "2021-03-14T15:09:20Z",
    "closed_at": "2021-07-01T21:01:38Z",
    "labels": [
      "bug",
      "affects:api",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/12762",
    "body": "### Issue Summary\r\n\r\nTime values in `updated_at` field and other time fields are different between API responses and Webhook requests.\r\nAPI response nullifies milliseconds while Webhook request includes milliseconds.\r\n\r\nExample API response:\r\n```\r\n{\r\n  \"posts\": [\r\n    {\r\n      \"uuid\": \"39c42a38-5c4a-4405-981f-ff3f84b86568\",\r\n      \"created_at\": \"2021-03-14T15:02:26.000Z\",\r\n      \"updated_at\": \"2021-03-14T15:02:26.000Z\",\r\n      \"published_at\": \"2021-03-14T15:02:26.000Z\",\r\n```\r\n\r\n\"Post published\" Webhook request for this post:\r\n```\r\n{\r\n  \"posts\": [\r\n    {\r\n      \"uuid\": \"39c42a38-5c4a-4405-981f-ff3f84b86568\",\r\n      \"created_at\": \"2021-03-14T15:02:26.033Z\",\r\n      \"updated_at\": \"2021-03-14T15:02:26.033Z\",\r\n      \"published_at\": \"2021-03-14T15:02:26.034Z\",\r\n```\r\n\r\nYou can see milliseconds included into latter request but missing in former. I've encountered this issue during writing sync engine to replicate posts between Ghost and other sources. Since I use same server for updating Ghost and receiving webhooks, I use `updated_at` field do determine if post was edited by my system or by user.\r\n\r\n### To Reproduce\r\n\r\n1. Create POST via admin API. \r\n2. Receive webhook for created post.\r\n3. Notice difference in milliseconds.\r\n\r\nExcepted result: datetime fields are exactly same.\r\n\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 3.41.3\r\n* Node Version: v12.19.0\r\n* Browser/OS: Linux\r\n* Database: SQLite\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/12762/comments",
    "author": "rozhok",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2021-03-16T12:22:24Z",
        "body": "Thanks for the report! I can see why that would be an issue. \r\n\r\nWe'll try to take a look at this soon but in the meantime a PR would be welcome!"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-06-22T17:56:39Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 12511,
    "title": "Editor: Images flicker/reload when Ctrl-Z Undo'ing",
    "created_at": "2021-01-07T00:30:05Z",
    "closed_at": "2021-06-22T17:57:39Z",
    "labels": [
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/12511",
    "body": "### Issue Summary\r\n\r\nEditor: Images flicker/reload when Ctrl-Z Undo'ing\r\n\r\n### To Reproduce\r\n\r\n1. Write some text\r\n2. Add an image or a few images\r\n3. Edit some text\r\n4. Press Ctrl-Z to undo\r\n\r\n### Expected\r\nText edit is undone, nothing else jumps around on the screen.\r\n\r\n### Actual\r\nText edit is undone, and often (but not every time), the images flicker on/off: it seems like they're reloading. While they're reloading, the page re-layouts: text jumps up and down as the images disappear then reappear.\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: whatever's in prod right now\r\n* Node Version: whatever's in prod right now\r\n* Browser/OS: macOS, Chrome and Safari both experience this\r\n* Database: whatever's in prod right now\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/12511/comments",
    "author": "mhansen",
    "comments": [
      {
        "user": "aidenmitchell",
        "created_at": "2021-03-03T20:05:39Z",
        "body": "BTW \"whatever's in prod right now\" changes a lot, so I'd recommend adding version numbers."
      },
      {
        "user": "mhansen",
        "created_at": "2021-03-04T09:42:03Z",
        "body": "Not sure how to find what version of node ghost.io is running.\r\n\r\nIt's been happening for about a year so shouldn't be too hard to repro."
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-06-09T02:52:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 12114,
    "title": "Dialog Boxes do not gain focus using a screen reader.",
    "created_at": "2020-08-08T23:09:08Z",
    "closed_at": "2021-11-19T15:06:51Z",
    "labels": [
      "affects:admin",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/12114",
    "body": "When using a screen reader, on any browser, dialog boxes do not automatically gain focus.\r\n\r\nFor example, upon first signing up, and creating a new blog, I hit the link, create a new blog, but was completely unaware that a dialog beneath the footer opened in order to confirm the action.\r\n\r\nThis, unfortunately, is happening across the whole dashboard with all dialog boxes.\r\nIdeally, I'd like the dialog box to pop up and instantly gain focus, as well as the ability to interact with it with the keyboard independent of the rest of the page. \r\n \r\n### Technical details:\r\n\r\n* Ghost Version:\r\n3.2.3\r\n* Browser/OS:\r\n\r\n\r\nFirefox 79, Windows 10, 2004.",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/12114/comments",
    "author": "rkingett",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2021-06-09T02:53:07Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "rkingett",
        "created_at": "2021-06-09T03:02:03Z",
        "body": "Unfortunately, this issue is still a problem in 4.0."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-12T15:05:14Z",
        "body": "Our bot has automatically marked this issue as stale because there has not been any activity here in some time.\n\nThe issue will be closed soon if there are no further updates, however we ask that you do not post comments to keep the issue open if you are not actively working on a PR.\n\nWe keep the issue list minimal so we can keep focus on the most pressing issues. Closed issues can always be reopened if a new contributor is found. Thank you for understanding 🙂"
      }
    ]
  },
  {
    "number": 11809,
    "title": "Database backup causes Out of memory ",
    "created_at": "2020-05-10T01:40:42Z",
    "closed_at": "2020-09-05T18:40:04Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/11809",
    "body": "### Issue Summary\r\n\r\nGhost have defined a db backup hook that is used by knex-migrator tool in `core/server/data/migrations/hooks/migrate/before.js`.  This hook causes Out of memory error in my server when database size is 170 Mb and I have 700 Mb free memory left on device.\r\n\r\nIn file `core/server/data/db/backup.js` I can see that whole database is firstly stored as a Javascript Object and later stringified to JSON and finally saved to backup file. \r\n\r\n### To Reproduce\r\n\r\n1. Create a hudge database (for example of size thet is equal half of your RAM)\r\n2. Start database backup by executing `knex-migrator migrate` (in starts from executing database backup)\r\n\r\nI was wondering if it would be possible to stream database backup directly to file without creating huge Javascript objects. What do you think? \r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 3.13.4\r\n* Node Version:  v10.20.1\r\n* Browser/OS: Ubuntu 18LTS\r\n* Database: mysql\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/11809/comments",
    "author": "cryptoethic",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2020-08-29T08:26:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 11763,
    "title": "Importer fails to replace image paths with new path if mobiledoc exists. Also fails to take into account external-host storage adapters.",
    "created_at": "2020-04-22T00:29:07Z",
    "closed_at": "2020-09-05T18:40:05Z",
    "labels": [
      "bug",
      "import / upgrade",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/11763",
    "body": "### Issue Summary\r\n\r\nImporting a zip fails to work due to the post html not being properly rewritten to reference the new image paths. I believe this is also related to the stale #9821 .\r\n\r\n### To Reproduce\r\n\r\n1. Export the database from an existing up-to-date Ghost installation. The installation will need to have at least one image saved from a _prior_ month.\r\n2. Create a zip with the database plus the images nested into content/images within the zip.\r\n3. Create another fresh Ghost installation. Import the zip file.\r\n\r\nExpected:\r\nYou will be able to navigate to the imported post and see the image.\r\n\r\nActual:\r\nThe post will be imported, but the image will 404.\r\n\r\n### Technical details:\r\nThis seems to be happening due to two things:\r\n1. We do not find/replace the image paths within the post `mobiledoc`\r\n2. Within `PostsImporter#beforeImport` we override the html with new html generated from the `mobiledoc`.\r\n\r\nThe fix here is to _also_ find/replace the image paths inside the post `mobiledoc` that we are importing.\r\n\r\n* Ghost Version: 3.13.3\r\n* Node Version:  v12.16.1\r\n* Browser/OS: Firefox / Fedora 31\r\n* Database: sqlite3",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/11763/comments",
    "author": "kevinlang",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2020-08-29T08:26:48Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 11657,
    "title": "Ghost import function validate file extension instead of its content",
    "created_at": "2020-03-14T03:04:45Z",
    "closed_at": "2020-09-05T18:40:07Z",
    "labels": [
      "bug",
      "import / upgrade",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/11657",
    "body": "\r\n### Issue Summary\r\n\r\nWhen we export blog using ghost-cli `ghost export`, we can name it using any filename and extension. But when we import it into the other ghost server using ghost-cli `ghost import`, if we use the file which is not a JSON extension (.json) the cli vaidation will thow an error.\r\n\r\n### Expected\r\nit shouldn't validate using file extension and using JSON (content) validation instead.\r\nSo any file name without .json but contain the JSON content should've worked as well.\r\n\r\n```\r\n✖ Running blog import\r\nAn error occurred.\r\nMessage: 'Response code 415 (Unsupported Media Type)'\r\n\r\n```\r\n\r\n### To Reproduce\r\n\r\n1. `ghost export testimportfile`\r\n2. `ghost import testimportfile`\r\n\r\n### Technical details:\r\n\r\nDebug Information:\r\n    OS: Ubuntu, v18.04.4 LTS\r\n    Node Version: v10.19.0\r\n    Ghost Version: 3.11.0\r\n    Ghost-CLI Version: 1.13.1\r\n    Environment: production\r\n    Command: 'ghost import bckfile'\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/11657/comments",
    "author": "z3niths",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2020-08-29T08:26:47Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "MohAnghabo",
        "created_at": "2021-04-05T04:42:19Z",
        "body": "I've solved this problem by adding `.json` to the name of the export file."
      }
    ]
  },
  {
    "number": 11008,
    "title": "Move nql-map-key-values module from ./core/shared to NexesJS/mongo-utils",
    "created_at": "2019-08-13T01:40:52Z",
    "closed_at": "2020-06-10T17:17:26Z",
    "labels": [
      "help wanted",
      "pinned"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/11008",
    "body": ":ronseal:\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/11008/comments",
    "author": "allouis",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2019-11-11T02:07:55Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2020-02-09T04:06:01Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2020-05-10T17:05:09Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 10815,
    "title": "`grunt dev` loses log output after file-change restart",
    "created_at": "2019-06-26T13:46:15Z",
    "closed_at": "2019-10-01T14:36:08Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/10815",
    "body": "### Issue Summary\r\n\r\nAfter starting the development server with `grunt dev` you can see log output from Ghost ok. However, after changing a file which triggers a restart of the Ghost process you can no longer see any log output which makes development+debugging tricky.\r\n\r\n### To Reproduce\r\n\r\n1. Run `grunt dev`\r\n2. Load the ghost site in the browser to trigger some request logs\r\n3. Make a change to one of the core Ghost server files (a save with no changes may work)\r\n4. Ensure you see the restart message in the console (see below)\r\n5. Refresh the ghost site to trigger further request logs\r\n6. Note that no new logs are seen after the `Running \"watch\" task` entry\r\n\r\n```\r\n>> File \"core/server/api/v2/posts.js\" changed.\r\n\r\nRunning \"express:dev\" (express) task\r\nStopping Express server\r\nStarting background Express server\r\n[2019-06-26 13:44:47] WARN Ghost has shut down\r\n[2019-06-26 13:44:47] WARN Ghost was running for 4 minutes\r\n[2019-06-26 13:44:51] INFO Ghost is running in development...\r\n[2019-06-26 13:44:51] INFO Listening on: 127.0.0.1:2368\r\n\r\nRunning \"watch\" task\r\n```",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/10815/comments",
    "author": "kevinansfield",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2019-09-24T14:21:04Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 10507,
    "title": "iOS: Cursor becomes invisible in editor",
    "created_at": "2019-02-19T21:58:56Z",
    "closed_at": "2019-07-03T17:58:17Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/10507",
    "body": "### Issue Summary\r\n\r\nWhen using the editor, sometimes the cursor becomes invisible. You can still type and edit, you just don’t see the blinking cursor. \r\n\r\nTapping in the browser’s URL bar and then back into the editor makes it reappear.\r\n\r\n### To Reproduce\r\n\r\nDon’t have a 100% reproduction yet but it happens consistently enough that I had to report it.\r\n\r\n1. Start editing a post in Safari or Chrome on iPad\r\n2. Tab between tabs in the browser? Tab between apps? Then come back\r\n3. Note how the cursor is no longer visible\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: latest\r\n* Browser/OS: iPad 11”, latest iOS, Chrome & Safari",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/10507/comments",
    "author": "littke",
    "comments": [
      {
        "user": "kirrg001",
        "created_at": "2019-03-11T16:34:56Z",
        "body": "@kevinansfield ping 🙂"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-06-26T17:14:25Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 10470,
    "title": "Delete all content triggers a 504 gateway timeout",
    "created_at": "2019-02-08T13:12:02Z",
    "closed_at": "2019-08-18T11:05:58Z",
    "labels": [
      "server / core",
      "affects:api",
      "help wanted",
      "later",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/10470",
    "body": "### Issue Summary\r\n\r\nUsing the Delete all content feature in Labs times out with a collection exceeding 3400 stories. This is not a limit I have explored, but the current situation I am in.\r\n\r\n### To Reproduce\r\n\r\nImport 3400+ stories in to ghost, try to delete all content.\r\n\r\nI had to batch this import as the 5.5Mb file times out also, but that is probably due to my connection speed.\r\n\r\n**Any other info e.g. Why do you consider this to be a bug? What did you expect to happen instead?**\r\n\r\nI expected the request not to timeout.\r\n\r\nThis is a development environment, and I would not expect this operation to be carried out under normal production circumstances. Of course I can nuke the instance and start again with no issues. \r\n\r\nJust though I would let you know of the issue.\r\n\r\n### Technical details:\r\n\r\n* Ghost-CLI version: 1.9.9\r\n* Node Version: 10.15.0\r\n* Browser/OS: N/A\r\n* Database: mysql  Ver 14.14 Distrib 5.7.25, for Linux (x86_64) using  EditLine wrapper\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/10470/comments",
    "author": "Bouncey",
    "comments": [
      {
        "user": "naz",
        "created_at": "2019-02-10T23:59:54Z",
        "body": "Hey @Bouncey :wave: Was able to reproduce the timeout with just over 1k of posts. Not marking it as a bug, as the content gets removed correctly but we definitely could use some help to make this process snappier :+1:  "
      },
      {
        "user": "vikaspotluri123",
        "created_at": "2019-02-11T02:17:01Z",
        "body": "This could probably be done using the same abstract polling class (and very similar implementation) that's being done in #10340 "
      },
      {
        "user": "Bouncey",
        "created_at": "2019-02-11T08:20:36Z",
        "body": "@gargol completely understand you not marking it as a bug. I'm glad you managed to reproduce this issue👍\r\n\r\nKeep up the great work Ghost people!"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-05-12T08:54:24Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "naz",
        "created_at": "2019-05-13T10:14:23Z",
        "body": "Not stale"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-08-11T10:28:52Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 10437,
    "title": "iOS: CMD+S shortcut works intermittently in editor",
    "created_at": "2019-01-30T17:06:15Z",
    "closed_at": "2019-05-09T01:08:41Z",
    "labels": [
      "bug",
      "affects:editor",
      "affects:admin",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/10437",
    "body": "### Issue Summary\r\n\r\nSometimes CMD + S does not work when saving edits to a published post in the new editor. Sometimes it does. \r\n\r\nI know mobile editing is not yet supported, but I thought I’d submit issues here for a potential day where you decide to support it. Please close if you don’t want these reports.\r\n\r\n### To Reproduce\r\n\r\n1. Edit a published post in the admin using iPad\r\n2. Hit CMD-S\r\n\r\nExpected: Saves\r\nActual: Sometimes it saves, sometimes it doesn’t\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: latest\r\n* Node Version: ?\r\n* Browser/OS: iOS\r\n* Database: ?\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/10437/comments",
    "author": "littke",
    "comments": [
      {
        "user": "kevinansfield",
        "created_at": "2019-01-30T17:21:20Z",
        "body": "> This is a problem because without CMD + S, there’s no obvious way of saving edits made to a draft\r\n\r\nChanges to drafts are auto-saved, you shouldn't need to hit CMD+S at all.\r\n\r\nMobile support is not currently a core-team focus but any PRs are welcome."
      },
      {
        "user": "littke",
        "created_at": "2019-01-30T19:01:46Z",
        "body": "Okay, I’ve updated the post to not mention drafts. I haven’t seen drafts auto-saving properly so perhaps that’s another bug, I’ll check.\r\n\r\nDo you still appreciate bugs filed for iOS despite it not being a core-team focus? \r\n\r\nThanks for your great work."
      },
      {
        "user": "littke",
        "created_at": "2019-01-31T23:40:51Z",
        "body": "Auto-saving works fine on iOS. ✅ "
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-05-02T00:37:10Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 10020,
    "title": "GET /ghost/api/v3/admin redirects to /ghost#",
    "created_at": "2018-10-16T11:25:15Z",
    "closed_at": "2018-11-26T09:35:38Z",
    "labels": [
      "server / core",
      "affects:api",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/10020",
    "body": "This is due to how the routers are mounted, if we don't exactly match the path of an api, we redirect to the admin, this is unexpected behaviour!\r\n\r\nWe should create router for the `/api` mount point and 404 any unmatched paths! ",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/10020/comments",
    "author": "allouis",
    "comments": [
      {
        "user": "anaplian",
        "created_at": "2018-10-26T10:43:51Z",
        "body": "I'd like to take a look at this :slightly_smiling_face: "
      }
    ]
  },
  {
    "number": 9906,
    "title": "Editor: Ctrl+Backspace not working in Debian 9.5",
    "created_at": "2018-09-26T02:22:59Z",
    "closed_at": "2019-01-23T22:52:58Z",
    "labels": [
      "affects:editor",
      "affects:admin",
      "help wanted",
      "needs:info",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/9906",
    "body": "### Issue Summary\r\n\r\nA user noticed that <kbd>ctrl</kbd>+<kbd>backspace</kbd>, which usually deletes the entire word before the curser, does not work in Koenig. It seems to work fine in the search input field, and other application.\r\n\r\nUsing the editor in incognito mode didn't fix it.\r\n\r\nAny other info e.g. Why do you consider this to be a bug? What did you expect to happen instead?\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 2.1.3 Ghost(Pro)\r\n* Browser/OS: Chrome version is 69.0.3497.100 (Official Build) (64-bit) / Debian 9.5\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/9906/comments",
    "author": "aileen",
    "comments": [
      {
        "user": "davidgomes",
        "created_at": "2018-09-30T18:43:39Z",
        "body": "I can also replicate this on Firefox (v60.2) on Debian using Ghost Pro."
      },
      {
        "user": "ErisDS",
        "created_at": "2019-01-23T22:52:58Z",
        "body": "Closing due to inactivity"
      }
    ]
  },
  {
    "number": 9878,
    "title": "Editor scrolling in Safari is slow if the post contains code snippets.",
    "created_at": "2018-09-17T00:58:22Z",
    "closed_at": "2019-05-01T14:44:22Z",
    "labels": [
      "bug",
      "affects:editor",
      "affects:admin",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/9878",
    "body": "### Issue Summary\r\n\r\nVertical scrolling through a long blog post with code snippets in the admin/editor view in Safari is slow and laggy. I notice that scrolling seems smooth until an instance of a code snippet comes into view of the browser window. As soon as that happens, scrolling begins to become janky.\r\n\r\nIn Chrome it is quite smooth and does not exhibit this behavior.\r\n\r\n### To Reproduce\r\n\r\n1. Load a long blog post in the admin editor in Safari. (I tested using Version 11.1.2 (13605.3.8)).\r\n2. Scroll quickly\r\n\r\nAny other info e.g. Why do you consider this to be a bug? What did you expect to happen instead?\r\n\r\nIn Chrome, scrolling is quite fast, so I believe this bug to be specific to Safari.\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 2.1.2\r\n* Node Version: 8.12.0\r\n* Browser/OS: Safari Version 11.1.2 (13605.3.8), macOS High Sierra 10.13.6\r\n* Database: MySQL\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/9878/comments",
    "author": "nicksergeant",
    "comments": [
      {
        "user": "nicksergeant",
        "created_at": "2018-09-17T13:16:15Z",
        "body": "Actually, this issue only appears on Retina screens. I'm not sure there's anything specific that can be done to prevent this. I'm going to do further testing with other editors that include code snippets and see if there's any tuning that can help."
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-04-24T14:17:52Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 9787,
    "title": "Group importer problems",
    "created_at": "2018-08-15T19:08:23Z",
    "closed_at": "2019-08-21T06:08:24Z",
    "labels": [
      "import / upgrade",
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/9787",
    "body": "If you are importing a larger database, it can happen that you will see lot's of warnings.\r\n\r\n> Entry was imported, but we were not able to resolve the following user references\r\n\r\nWe could group these warnings and optimise the messages in general.\r\n\r\nLike\r\n\r\n> Entry was imported, but we were not able to resolve the user references.\r\n> Entries: [{id: 'ObjectId', keys: ['updated_at']}]\r\n\r\n@peterzimon even reported that he got so many warnings, that his browser almost freezes.\r\n\r\nGhost: master",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/9787/comments",
    "author": "kirrg001",
    "comments": [
      {
        "user": "dexterleng",
        "created_at": "2018-12-17T07:35:10Z",
        "body": "Should we ignore the `problem.help` when grouping?"
      },
      {
        "user": "kirrg001",
        "created_at": "2018-12-17T14:08:18Z",
        "body": "Yeah i think so. But maybe we can achieve this? 🤔 \r\n\r\ne.g.\r\n\r\n```\r\nmessage: 'grouped-error-message-1',\r\ncontext: JSON.stringify(\r\n  {\r\n    posts: [post, post, post],\r\n    users: [user, user]\r\n  }\r\n)\r\n```"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-03-17T14:47:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "kirrg001",
        "created_at": "2019-03-17T14:59:56Z",
        "body": "Not stale"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-06-15T15:28:11Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "naz",
        "created_at": "2019-06-17T08:36:24Z",
        "body": "Not stale"
      },
      {
        "user": "ErisDS",
        "created_at": "2019-08-21T06:08:24Z",
        "body": "Duplicate of #9584"
      }
    ]
  },
  {
    "number": 9695,
    "title": "Lowercase slug values before sending the query to the database",
    "created_at": "2018-06-20T11:07:59Z",
    "closed_at": "2019-01-31T23:40:53Z",
    "labels": [
      "server / core",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/9695",
    "body": "As MySQL is not case sensitive, but Sqlite3 is, some database queries fail when used in a case sensitive context.\r\n\r\nWe need to transform values to lowercase before sending the query to the database, to make sure it works correctly in both env.\r\n\r\nEdited by @kirrg001\r\n```\r\n{{#get \"posts\" filter=\"tag:TEST\"}}\r\n```",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/9695/comments",
    "author": "aileen",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2018-06-26T12:26:17Z",
        "body": "This is an awkward one, as it's really MySQL that is doing the wrong thing here, not SQLite3. \r\n\r\nBut then we know that slugs have to be a strict set of valid characters ([a-z0-0\\-]), so we should probably at least reject a query with uppercase as a BadRequest?\r\n\r\nTransforming upper-to-lower isn't hard though, so we could do this, but does this just add to the confusion, and help proliferate the myth that filtering for `tags` works on the name, rather than the slug?\r\n\r\nNot sure what the best fix for this is 🤔 "
      },
      {
        "user": "tiendq",
        "created_at": "2018-06-29T01:52:09Z",
        "body": "Don't we make URL to lowercase for all requests as soon as possible in routers?"
      },
      {
        "user": "kirrg001",
        "created_at": "2018-09-10T13:01:22Z",
        "body": "> {{#get \"posts\" filter=\"tag:TEST\"}}\r\n> {{#get \"posts\" filter=\"slug:TEST\"}}\r\n\r\nIt's not only about relational slugs, it's about **any slug query using uppercase notation**."
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-01-24T19:51:24Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 9346,
    "title": "[API] Incorrect HTTP response code sent when username / password not provided for token retrieval",
    "created_at": "2017-12-18T02:03:01Z",
    "closed_at": "2018-01-11T15:17:04Z",
    "labels": [
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/9346",
    "body": "### Issue Summary\r\n\r\nWhen POSTing `/ghost/api/v0.1/authentication/token` with an empty password, a 500 error is thrown. A 401 error would probably be better, since this is a client error rather than a server error, and a 401 is thrown when an empty client_id / client_secret is sent.\r\n\r\nForm Data (as interpreted as ghost; I added a middleware function to log `req.body` to the console):\r\n\r\n```\r\n{ grant_type: 'password',\r\n  username: 'bot@your-awesome.blog',\r\n  password: '',\r\n  client_id: 'ghost-test',\r\n  client_secret: 'secret' }\r\n```\r\nNote: The empty password was provided because of a typo\r\n[Another] Note: A similar error occured when username was not provided\r\n\r\n\r\n<details>\r\n<summary> Error Log</summary>\r\n\r\n```\r\nERROR [2017-12-18 01:48:37] \"POST /ghost/api/v0.1/authentication/token\" 500 77ms\r\n\r\nNAME: InternalServerError\r\nCODE: invalid_request\r\nMESSAGE: Missing required parameter: password\r\n\r\nlevel:normal\r\n\r\nInternalServerError: Missing required parameter: password\r\n    at new GhostError ({ghost}/versions/1.19.0/core/server/lib/common/errors.js:9:26)\r\n    at prepareError ({ghost}/versions/1.19.0/core/server/web/middleware/error-handler.js:39:19)\r\n    at Layer.handle_error ({ghost}/versions/1.19.0/node_modules/express/lib/router/layer.js:71:5)\r\n    at trim_prefix ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:315:13)\r\n    at {ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:284:7\r\n    at Function.process_params ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:335:12)\r\n    at next ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:275:10)\r\n    at Layer.handle_error ({ghost}/versions/1.19.0/node_modules/express/lib/router/layer.js:67:12)\r\n    at trim_prefix ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:315:13)\r\n    at {ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:284:7\r\n    at Function.process_params ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:335:12)\r\n    at next ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:275:10)\r\n    at {ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:635:15\r\n    at next ({ghost}/versions/1.19.0/node_modules/express/lib/router/index.js:260:14)\r\n    at next ({ghost}/versions/1.19.0/node_modules/express/lib/router/route.js:127:14)\r\n    at {ghost}/versions/1.19.0/node_modules/oauth2orize/lib/middleware/token.js:57:25\r\n\r\nTokenError: Missing required parameter: password\r\n    at Object.password [as handle] ({ghost}/versions/1.19.0/node_modules/oauth2orize/lib/exchange/password.js:90:32)\r\n    at next ({ghost}/versions/1.19.0/node_modules/oauth2orize/lib/server.js:419:15)\r\n    at Server._exchange ({ghost}/versions/1.19.0/node_modules/oauth2orize/lib/server.js:427:3)\r\n    at token ({ghost}/versions/1.19.0/node_modules/oauth2orize/lib/middleware/token.js:56:12)\r\n    at generateAccessToken ({ghost}/versions/1.19.0/core/server/auth/oauth.js:182:35)\r\n    at Layer.handle [as handle_request] ({ghost}/versions/1.19.0/node_modules/express/lib/router/layer.js:95:5)\r\n    at next ({ghost}/versions/1.19.0/node_modules/express/lib/router/route.js:137:13)\r\n    at authenticate ({ghost}/versions/1.19.0/core/server/auth/authenticate.js:68:24)\r\n    at Strategy.strategy.success ({ghost}/versions/1.19.0/node_modules/passport/lib/middleware/authenticate.js:214:18)\r\n    at verified ({ghost}/versions/1.19.0/node_modules/passport-oauth2-client-password/lib/strategy.js:50:10)\r\n    at then ({ghost}/versions/1.19.0/core/server/auth/auth-strategies.js:24:32)\r\n    at tryCatcher ({ghost}/versions/1.19.0/node_modules/bluebird/js/release/util.js:16:23)\r\n    at Promise._settlePromiseFromHandler ({ghost}/versions/1.19.0/node_modules/bluebird/js/release/promise.js:512:31)\r\n    at Promise._settlePromise ({ghost}/versions/1.19.0/node_modules/bluebird/js/release/promise.js:569:18)\r\n    at Promise._settlePromise0 ({ghost}/versions/1.19.0/node_modules/bluebird/js/release/promise.js:614:10)\r\n    at Promise._settlePromises ({ghost}/versions/1.19.0/node_modules/bluebird/js/release/promise.js:693:18)\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 1.19.0\r\n* Node Version: 6.12.2\r\n* Browser/OS: got (node request lib) / Windows subsystem for Linux\r\n* Database: sqlite3\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/9346/comments",
    "author": "vikaspotluri123",
    "comments": [
      {
        "user": "kirrg001",
        "created_at": "2018-01-02T09:52:50Z",
        "body": "@vikaspotluri123 Thanks. \r\n\r\nThe error message is correct, but the status code shouldn't be a 500.\r\n\r\n> Missing required parameter: password\r\n\r\nPR is welcome 🙃"
      }
    ]
  },
  {
    "number": 8612,
    "title": "useGravatar privacy flag is not respected",
    "created_at": "2017-06-22T09:46:53Z",
    "closed_at": "2017-07-06T09:33:16Z",
    "labels": [
      "bug",
      "good first issue",
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/8612",
    "body": "Ghost admin fetches a bunch of configuration from the server, of which one flag is `useGravatar`.\r\nIf this is set to false, there should be no attempt to fetch a gravatar for a user.\r\n\r\nOn the server side, this flag is honoured. Although this flag is passed to the admin client, the`gh-profile.image.js` component doesn't make use of this flag currently.\r\n\r\nThis is hopefully a small issue, and good for a beginner 😄 ",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/8612/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "TomKeyte",
        "created_at": "2017-06-23T15:21:03Z",
        "body": "Hey, I think I'll take a look at this :) "
      },
      {
        "user": "kirrg001",
        "created_at": "2017-06-23T15:34:43Z",
        "body": "@TomKeyte Cool, Thanks 👍 "
      },
      {
        "user": "letsjustfixit",
        "created_at": "2017-06-25T14:36:50Z",
        "body": "@TomKeyte are you working on this? "
      },
      {
        "user": "TomKeyte",
        "created_at": "2017-06-25T17:08:04Z",
        "body": "@letsjustfixit Yes, sorry I just took a bit of time getting things set up and getting to know the project."
      },
      {
        "user": "TomKeyte",
        "created_at": "2017-06-25T23:28:55Z",
        "body": "in gh-profile-image, within the imageBackground property declaration I am accessing the configuration variable via \r\n\r\n    this.get('config.useGravatar');\r\n\r\nIs that correct? It is returning undefined in gh-profile-image-test but true during normal usage\r\n\r\n    "
      },
      {
        "user": "TomKeyte",
        "created_at": "2017-06-26T15:33:56Z",
        "body": "I guess I'll leave this as @letsjustfixit has a solution which is pretty much identical to what I had done"
      }
    ]
  },
  {
    "number": 8512,
    "title": "Bug: Importer - archives with invites are not mapped",
    "created_at": "2017-06-01T11:16:35Z",
    "closed_at": "2018-08-19T21:40:21Z",
    "labels": [
      "import / upgrade",
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/8512",
    "body": "### Issue Summary\r\n\r\nIf you invite a user on alpha then create an export in labs you get a JSON file with invites. These invites are not then mapped anywhere during import. \r\n\r\nFor lts exports the users are still in the users block of the export and added as locked users requiring a password reset to activate them.  \r\n\r\n### Technical details:\r\n\r\n* Ghost Version: master e2dcdd28661caaae743b12c0c9e199f328b50ad6\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/8512/comments",
    "author": "cobbspur",
    "comments": [
      {
        "user": "kirrg001",
        "created_at": "2018-08-19T21:40:21Z",
        "body": "Closing. This is actually not a bug, it's a missing feature. We do not import invites. Let's wait if people vote for it on forum.ghost.org :)"
      }
    ]
  },
  {
    "number": 8370,
    "title": "[Error Display] Import file with no right server upload limit",
    "created_at": "2017-04-21T14:30:53Z",
    "closed_at": "2017-06-22T23:22:56Z",
    "labels": [
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/8370",
    "body": "### Issue Summary\r\n\r\nHaving a server Nginx/Apache with no right file upload size limit and trying to import a file with more than the default allowed wont display any error. The partial of the file exist on \"content/data\".\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set up nginx default conf\r\n2. Try to import Ghost data (+5Mb).\r\n3. No error display\r\n\r\nShouldnt Ghost tell at least \"File corrupted\" or something like that ?\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.11.7\r\n* Node Version: 6.9.0\r\n* Browser/OS: Chrome\r\n* Database: MySQL\r\n* Eyes color: Brown\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/8370/comments",
    "author": "cristiandley",
    "comments": [
      {
        "user": "kevinansfield",
        "created_at": "2017-04-24T08:29:41Z",
        "body": "Hey @cristiandley 👋 \r\n\r\nThere should be code in place to display an error when this happens, I'm not sure why it's not showing for you. Are you able to try this again whilst you have the Network tab of Chrome's Web Inspector open (right-click on the page and click `Inspect` then click on the `Network` tab)? You should see an entry appear in red, click on that then take a screenshot. Any errors that you see in the `Console` tab will also be very useful. Thanks!"
      },
      {
        "user": "cristiandley",
        "created_at": "2017-06-22T23:22:55Z",
        "body": "Noob Issue. The issue is Nginx... sorry the delay. Just adding the file size limit does the trick.\r\n\r\nThanks @kevinansfield "
      }
    ]
  },
  {
    "number": 8317,
    "title": "Code injection not sanitized correctly",
    "created_at": "2017-04-11T17:32:56Z",
    "closed_at": "2017-08-03T09:11:11Z",
    "labels": [
      "bug",
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/8317",
    "body": "### Issue Summary\r\n\r\nThe code in the Code Injection page is not correctly sanitized.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Put a dollar sign followed by a single quote `$'` within a `<script>` tag in either the Blog Header or Blog Footer fields. For example:\r\n```HTML\r\n<!-- Some HTML here -->\r\n<script>\r\nvar test = '$';\r\nconsole.log(test)\r\n</script>\r\n<!-- Some other HTML here -->\r\n```\r\n2. Save the changes you made on the Code Injection screen\r\n3. Refresh any page on your Ghost blog\r\n4. Look at the source code at the end of the `<head>` or `<body>` tags (wherever you put the `$'`)\r\n\r\n### Expected Result\r\n\r\nI expect the characters `$` and `'` to be treated just like they would be everywhere else in javascript. So the above example should print the string `$` to the console. Instead, the `$'` string is replaced with something else, which makes the variable `test` invalid, so nothing gets logged to the console. No error is raised in the console.  \r\n\r\n### Observed Result\r\n\r\nIf you put the above example in the Blog Header, the `$'` string is replaced by the the closing head tag, and the entire body of the page, and the closing HTML tag. Then the *actual* closing head tag, body, and closing HTML tag are appended after that. It ends up looking like this:\r\n\r\n```HTML\r\n <!-- Some HTML here -->\r\n<script>\r\nvar test = '\r\n</head>\r\n<body>\r\n<!-- ENTIRE BODY CONTENT OF YOUR GHOST BLOG PAGE HERE -->\r\n</body>\r\n</html>\r\n;\r\nconsole.log(test)\r\n</script>\r\n<!-- Some other HTML here -->\r\n</head>\r\n<body>\r\n<!-- ENTIRE BODY CONTENT OF YOUR GHOST BLOG PAGE HERE -->\r\n</body>\r\n</html>\r\n```\r\n\r\nIf you put the  above example in the Blog Footer, the `$'` string is replaced by two newlines, the closing body tag, and the closing HTML tag. It ends up looking like this:\r\n```HTML\r\n<!-- Some HTML here -->\r\n<script>\r\nvar test = '\r\n\r\n</body>\r\n</html>\r\n;\r\nconsole.log(test)\r\n</script>\r\n<!-- Some other HTML here -->\r\n```\r\n\r\nI'm guessing it's some escaping issue when jQuery is used to do the code injection. \r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.11.7\r\n* Node Version: 4.8.1\r\n* Browser/OS: Chrome Version 57.0.2987.133 (64-bit) on Mac OSX 10.11.6\r\n* Database: sqlite3\r\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/8317/comments",
    "author": "corychainsman",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2017-08-03T09:11:11Z",
        "body": "This issue occurs both on LTS and on master, however we have only ever had one report.\r\n\r\nI'm not 100% sure what the underlying cause is, however it is an extreme edge case, where the only impacted strings I can find are either:\r\n-  `'$'` (single quote, dollar, single quote).\r\n-  `'abc$'` (single quote, one-or-more chars, dollar, single quote).\r\n\r\nIf the single quotes are swapped for double quotes, the problem does not occur. E.g. `var test = \"$\";`\r\nIf any chars are placed after the dollar sign, the problem goes away again E.g. `var test = '$test';`\r\n\r\nAs double quotes are valid JavaScript and a simple workaround for this case, I'm going to close this issue. If we get more reports, we can investigate further."
      }
    ]
  },
  {
    "number": 6922,
    "title": "robots.txt is blocking some CSS",
    "created_at": "2016-06-03T09:41:56Z",
    "closed_at": "2017-07-31T11:32:55Z",
    "labels": [
      "bug",
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6922",
    "body": "### Issue Summary\n\nI was seeking the Google Webmaster report when noticed that it is saying I have a blocked resource on subscribe page (a new feature to leave email addresses located at `ghost.com/subscribe/`. Actually we have a CSS there which has the following link: `ghost.com/ghost/ghost.min.css` but our **robots.txt** has this rule:\n\n```\nDisallow: /ghost/\n```\n\nMeans that we are blocking our CSS and Google for example is unable to locate it.\n\nP.S.: Also used **View as Googlebot** function now and it really sees this page without any styles.\n### Technical details:\n- Ghost Version: 0.8.0\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6922/comments",
    "author": "alexbagirov",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2016-06-09T21:01:34Z",
        "body": "If I'm not mistaken, Google strongly discourages blocking CSS and JS that is used to render web pages, as it has a negative impact on search rankings.\n\nDoes anyone know the reason everything in the /ghost/ directory is being disallowed?\n"
      },
      {
        "user": "nuclearpengy",
        "created_at": "2016-06-09T21:12:43Z",
        "body": "@tlyman `/ghost` is the admin directory. It should not be indexed as your site content is not hosted or published at this URL.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-06-09T21:58:02Z",
        "body": "Correct - the problem is not that the robots.txt is blocking the file - it's doing the right thing ✅ \n\nThe problem here is that we need to register these assets to be served over a shared URL where they are needed for the blog. There is a similar problem with the icons being served when the admin panel is set to be served over https but the blog is not.\n"
      },
      {
        "user": "sakulstra",
        "created_at": "2016-06-25T20:48:56Z",
        "body": "I tried to fix this but I couldn't really find a solution :/\nI think I basically have to do the same than middleware/index.js does with the favicon - the problem is, that ghost.css isn't in the shared folder - could someone give me a hint where to look at?\nRegards and thanks in advance.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2017-07-31T11:32:55Z",
        "body": "In Ghost 1.0.0 we no longer serve the admin CSS for the frontend of the blog - so I think this issue should be resolved."
      }
    ]
  },
  {
    "number": 6912,
    "title": "Have tags input autocomplete on Tab instead of Return",
    "created_at": "2016-05-31T17:50:52Z",
    "closed_at": "2017-08-04T06:26:52Z",
    "labels": [
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6912",
    "body": "Currently, when you are typing in a tag, as it starts to autocomplete with the existing tags, if you press tab, it does not auto complete, but creates a new tag with what was typed in. If you press return, then it auto completes.\n\nI think this should be switched to having tab be the auto complete, and return being the creating a tag functionality. This is the way auto complete on google, facebook, and twitter work, so I think it makes sense for the tags functionality to work this way as well.\n\nWhat do you think?\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6912/comments",
    "author": "dbalders",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2016-06-01T14:12:34Z",
        "body": "@dbalders this sounds like it makes sense to me? If we're doing the opposite of what everyone else is doing then we should very probably change ours.\n\nThat probably explains why I seem to battle the tag input!\n"
      },
      {
        "user": "acburdine",
        "created_at": "2016-06-04T18:27:18Z",
        "body": "This may unfortunately have to wait until the tags input is converted to ember-power-select. It's easy to do there, but it doesn't seem like it's possible in selectize (See selectize/selectize.js#335) 😞 \n"
      },
      {
        "user": "nickgoodliff",
        "created_at": "2016-06-23T12:52:52Z",
        "body": "This option does exist in selectize settings object: selectOnTab\n\n`.selectize({ selectOnTab : true })`\n"
      },
      {
        "user": "dbalders",
        "created_at": "2016-07-20T04:15:53Z",
        "body": "In messing around with this, adding the ability to select on tab was as easy as stated above. Just add the option in. The problem then is that selectize is now selecting on tab and on return. There doesn't seem to be an option and I couldn't figure out a way to not have it auto-complete on return. If anyone actually knows a way to do this, I can finish the PR for it. If not, might not be worth the time with power-select in the pipeline.\n"
      },
      {
        "user": "ava-cassiopeia",
        "created_at": "2016-08-23T02:13:00Z",
        "body": "Looking through the current master for Selectize, it looks like there's no current way to disable the auto-complete on return functionality:\n\n```\ncase KEY_RETURN:\n    if (self.isOpen && self.$activeOption) {\n        self.onOptionSelect({currentTarget: self.$activeOption});\n        e.preventDefault();\n    }\n    return;\n```\n\nThere's also no issue open for that enhancement at the moment.\n"
      },
      {
        "user": "kevinansfield",
        "created_at": "2017-08-04T06:26:52Z",
        "body": "Closing as I have added this as a sub-task to the issue proposing to replace `selectize` for the tags input - #6458"
      }
    ]
  },
  {
    "number": 6845,
    "title": "\"Last seen\" date for active users on the team page is misleading",
    "created_at": "2016-05-17T01:37:07Z",
    "closed_at": "2016-06-09T10:46:04Z",
    "labels": [
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6845",
    "body": "### Issue Summary\n\nThe \"Last seen\" date on the team page is based on the lastLogin user field. This field is only updated when the credentials are checked. If the user's auth is stored in session wont the \"Last seen\" date technically contain stale data? A user could potentially remain signed in for several days without the \"Last seen\" date ever updating. I think the \"Last seen\" date should be based on a different/new field, or \"Last seen\" should be re-labeled to more accurately represent the data it displays. \n### Steps to Reproduce\n1. Login and go to /ghost/team. Note the \"Last seen\" date.\n2. Maintaining the same session, return to /ghost/team at a later date. Note that the \"Last seen\" date is unchanged. \n### Technical details:\n- Ghost Version: 0.7.9\n- Node Version: 0.10.29\n- Browser/OS: Chrome/Windows\n- Database: mysql\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6845/comments",
    "author": "shawntoffel",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2016-05-17T19:25:05Z",
        "body": "@shawntoffel thanks for the bug report, we used to have a 1 day session length, so this was pretty accurate, but now that we've increased the session length you're spot on that the \"last seen date\" is no longer a good reflection of reality.\n\nWe need to find a new way to update this, which keeps the balance of not updating the user model too frequently (because it's just not that useful at the moment) but also accurately reflects that the user has been online. \n\nPerhaps token refreshes (which happen once per hour, I believe) would be a good option?\n"
      },
      {
        "user": "nuclearpengy",
        "created_at": "2016-05-17T21:42:51Z",
        "body": "Not sure how to approach it technically but what about if as long as the user is logged in and has admin open in a tab, the site considers the user as \"being seen\".\n"
      },
      {
        "user": "shawntoffel",
        "created_at": "2016-05-18T04:01:12Z",
        "body": "Okay. So I think the first step is to define one or more scenarios in which the last seen date will be updated. \n\nI can think of a few different approaches:\n1. The obvious and expensive _update on every action_. This provides the most accurate results, however since the data isn’t particularly important the cost isn’t necessarily justified. \n2. Update on specific actions. We define a set of relatively infrequent yet unavoidable actions that count towards user activity. This seems like a good balance between accuracy and write-frequency. The caveat here is that actions will need to be carefully chosen such that a change in user flow will not lead to potential inaccuracies in the last seen date.  This approach might be what @nuclearpengy is suggesting. \n3. On events that occur at regular intervals. This is the token refresh approach suggested by @ErisDS.  This is also a good balance between accuracy and write-frequency. This also seems like the easiest to implement. A potential caveat here is that the accuracy of our data has a direct dependency on the token refresh frequency. If the frequency were to change it would impact the data, which may put us in a situation similar to the session timeout adjustment. We might also want to introduce custom messages, such as “Last seen: Less than an hour ago”.\n\nPersonally I’m leaning towards option 2. This provides a decent balance between accuracy, write-frequency, control, and a lack of dependencies.  The difficulty here lies in defining the actions and creating a middleware or such to manage the data. I'm not yet familiar enough with the code to call out the specific actions. \n\nThese are my thoughts anyway. Open to feedback and suggestions. \n"
      },
      {
        "user": "nuclearpengy",
        "created_at": "2016-05-18T07:54:04Z",
        "body": "I assume the _token refresh_ is what is used to keep the user session alive? If yes, then I guess that might be the simplest approach.\n\nAs far as I can tell, all the \"last seen\" is doing is telling us when last a person was in the backend/admin.\n\nI like this:\n\n> “Last seen: Less than an hour ago”.\n"
      },
      {
        "user": "shawntoffel",
        "created_at": "2016-06-09T13:24:45Z",
        "body": "Thank you!\n"
      }
    ]
  },
  {
    "number": 6493,
    "title": "Move `builtFilesExist` check into utils/startup-check.js",
    "created_at": "2016-02-12T11:09:24Z",
    "closed_at": "2016-02-14T19:58:31Z",
    "labels": [
      "good first issue",
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6493",
    "body": "I think that the `builtFilesExist` check should be moved out of the server index / boot flow, and into the startup checks, which live in `server/utils/startup-check.js`. I can't see any reason why this needs to live in `core/server/index.js`, it depends on a single key from the config, but so do other startup checks.\n\nIt also makes sense to me to do this particular check quite early on - if the files aren't present there's not much point trying to do anything else :wink: So placing it after the `contentPath()` checks makes sense IMO.\n\nThis will also result in it not needing to be translated, which as a console warning I don't think it should be anyhow.\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6493/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "javorszky",
        "created_at": "2016-02-12T11:12:52Z",
        "body": "Dibs! I might actually be able to do this! :)\n"
      },
      {
        "user": "halfdan",
        "created_at": "2016-02-12T11:14:01Z",
        "body": "Go go go @javorszky \n"
      }
    ]
  },
  {
    "number": 6483,
    "title": "Bug: Unable to transition from new post to Tags screen",
    "created_at": "2016-02-11T11:42:42Z",
    "closed_at": "2016-02-18T09:08:09Z",
    "labels": [
      "bug",
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6483",
    "body": "### Steps to Reproduce\n1. Click the New Post link in the sidebar\n2. Click the Tags link in the sidebar\n3. Nothing happens, this error is shown in the console: `Uncaught Error: Assertion Failed: When ember-selectize is in multiple mode, the provided selection must be an array.`\n\nThis is a bug because you should be able to transition to the Tags screen from the editor screen. It also puts you in a state where it's not possible to add new tags via the PSM's tags input.\n### Technical details\n- Ghost Version: master - latest commit:  c9e0a70\n- Client OS: OS X\n- Browser: Chrome 48.0.2564.103 (64-bit)\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6483/comments",
    "author": "kevinansfield",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2016-02-14T17:16:42Z",
        "body": "FYI: (not sure if this is helpful or if you already know) this only occurs if you have tags.\n\nIf you delete all content, it's fine. Once you add a single tag, not fine :)\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-02-16T11:27:45Z",
        "body": "I've added the fix-wanted label here. I'm kinda guessing the thought is that as the underlying dependencies are being replaced this bug will get auto-squashed (i.e. by #6458), but I think it may need a quick fix short term?\n\nI can't judge ember issues, but if it's simple, adding the `beginner` tag is always good for encouraging fixes :grin: \n"
      },
      {
        "user": "acburdine",
        "created_at": "2016-02-18T04:24:37Z",
        "body": "Figured out a fix :tada: \n"
      }
    ]
  },
  {
    "number": 6315,
    "title": "'Are you sure you want to leave this page' message appearing unneccessarily",
    "created_at": "2016-01-11T10:35:55Z",
    "closed_at": "2016-01-12T09:39:59Z",
    "labels": [
      "bug",
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6315",
    "body": "There is an easy to reproduce case in which the 'Are you sure you want to leave this page?' message which indicates you have unsaved changes is appearing and should not be.\n### Steps to Reproduce\n1. Go to the Ghost admin\n2. Hit 'New Post'\n3. Do nothing, except open the post settings menu\n4. Hit 'Content'\n5. Get the message\n\nNo typing has occurred and no settings have been manually changed, so as far as the user is concerned there should be nothing to change at this point.\n\nNote, the following steps do not reproduce the message:\n1. Go to the Ghost admin\n2. Hit 'New Post'\n3. Do nothing, don't even open post settings menu\n4. Hit 'Content'\n### Technical details:\n- Ghost Version: master \n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6315/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "kevinansfield",
        "created_at": "2016-01-11T10:47:48Z",
        "body": "Interesting. To extend on the reproduction steps a little, the first time you go through the above steps (after a fresh reload) you won't see the modal but on subsequent tries you will see it.\n"
      }
    ]
  },
  {
    "number": 6290,
    "title": "Tag & Author RSS feeds still available in private mode",
    "created_at": "2016-01-05T13:08:46Z",
    "closed_at": "2016-01-11T14:04:19Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6290",
    "body": "When a blog is in private mode, all of the RSS feeds should be disabled. \n\nAt present, the main `/rss/` route is disabled, and is correctly showing a 404. \nHowever the tag and author RSS feeds are both still working. \n\nE.g. if you have a tag 'getting-started' and navigate to `/tag/getting-started/rss/` this is expected to 404 but is currently displaying the RSS feed.\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6290/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "halfdan",
        "created_at": "2016-01-05T13:25:04Z",
        "body": "Dibbedidibs\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-01-05T14:26:05Z",
        "body": "Assigned but fair warning - I want this in the next release :wink: \n"
      },
      {
        "user": "halfdan",
        "created_at": "2016-01-05T17:18:56Z",
        "body": "@ErisDS You'll have a PR tomorrow :)\n"
      },
      {
        "user": "novaugust",
        "created_at": "2016-01-05T18:01:27Z",
        "body": "@halfdan I want this _yesterday_ :straight_ruler: \n"
      },
      {
        "user": "halfdan",
        "created_at": "2016-01-05T18:32:31Z",
        "body": "@novaugust This isn't Star Trek. OTOH if I get up early enough I might be able to submit it early in the morning which will be yesterday for you. I win.\n"
      },
      {
        "user": "halfdan",
        "created_at": "2016-01-07T13:44:31Z",
        "body": "@ErisDS Well, this turns out to be much more fun than I thought. In addition to author / tag rss feed still being available, current implementation prevents viewing any post that starts with rss or sitemap (which are protected keywords - but `/sitemap-xml-is-great` is not).\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-01-07T13:56:11Z",
        "body": "Nice find :cookie: :) \n"
      }
    ]
  },
  {
    "number": 6205,
    "title": "Add `limit`, `from` and `to` attributes for `{{tags}}` and `{{#foreach}}` helpers",
    "created_at": "2015-12-10T18:07:08Z",
    "closed_at": "2016-05-12T15:16:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6205",
    "body": "Both the `{{#foreach}}` and `{{tags}}` helpers are used to loop through collections of data in Ghost themes.\n\n`{{#foreach}}` allows for looping over any collection and executing a template block for each item in the collection. `{{tags}}` automatically loops through a tag collection if there is one in the current scope / context, and outputs a link for each tag in a comma separated list. \n\nBoth of these loops are a little bit limited in that they loop over all the data, without much control, beyond things like the `@first` or `@odd` properties available inside the `{{#foreach}}` list.\n\nTo give theme developers more control over their templates, this proposal is to add `from`, `to` and `limit` as attributes to both of these helpers.\n\nThe rules are as follows:\n- `limit` allows for setting how many items to loop over. If there are not enough items, the loop will have to stop early ;)\n- `from` determines the first item that should be output\n- `to` determines the last time that should be output. \n- As `from` and `to` are explicit, they take precedence over `limit`, and if both are set, `limit` will be ignored.\n- The default value for `from` is the beginning of the collection\n- The default value for `to` is the end of the collection\n\nThe result will allow for the following:\n\n`{{tags limit=\"1\"}}` - output just one tag\n`{{tags from=\"1\" to=\"1\"}}` - also outputs just the first tag\n\n`{{#foreach \"posts\" from=\"1\" to=\"3\"}}` - outputs the first, second and third post\n`{{#foreach \"posts\" from=\"4\" limit=\"3\"}}` - outputs 3 posts starting from the 4th post\n`{{#foreach \"posts\" from=\"3\"}}` - outputs all posts starting from the third post until the end of the list\n`{{#foreach \"users\" to=\"5\"}}` - outputs posts until and including the 5th post - the same as `limit=\"5\"`\n`{{#foreach \"posts\" from=\"4\" to=\"5\" limit=\"3\"}}` - outputs just the 4th and 5th post\n\nNote: I'm proposing`from` and `to` are both 1-indexed, not 0-indexed, that is, we start at item 1, not at item 0. I started writing examples with a 0-index, which is normal for a loop in JS and it made a lot less sense and started to confuse me just as I was writing examples - that's not a good sign, so I switched! E.g. With a 1-index, `to=\"5\"` and `limit=\"5\"` are equivalent, with a 0-index `limit=\"5\"` becomes equivalent to `to=\"4\"`.\n\nThis is consistent with the first item being called `@first` and not `@zeroth`. Additionally, we recently added a `@number` property which is 1-indexed because the default handlebars `@index` property was 0-indexed which is not that useful. However, I'm very open to hearing arguments for the alternative version.\n- [x] Add `limit` to `{{tags}}`\n- [x] Add `limit` to `{{foreach}}`\n- [x] Add `from` to `{{tags}}`\n- [x] Add `from` to `{{foreach}}`\n- [x] Add `to` to `{{tags}}`\n- [x] Add `to` to `{{foreach}}`\n- [x] Fix `@last` when using `limit` with `{{#foreach}}`\n- [ ] Support negative indexes in `from` and `to` on both `{{tags}}` & `{{foreach}}`\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6205/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "twanlass",
        "created_at": "2015-12-10T21:02:13Z",
        "body": "@ErisDS this is looking good. Agreed on the 1 based index as well (just document this!).\n\nThoughts on how you could grab the last X items of a resource? Negative indexes?\n`{{#foreach \"posts\" from=\"-1\" to=\"-5\"}}`\n\nSomething else?\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-12-10T21:24:56Z",
        "body": "@twanlass That's an interesting question. Negative indexes make sense, I think?\n"
      },
      {
        "user": "twanlass",
        "created_at": "2015-12-11T19:46:56Z",
        "body": "Yea, just an easy way to get posts from the end as well. Granted there's not a huge use case I'm sure so it may not be needed. I think w/ the new get helper and filtering you can do just about anything now :-D\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-12-16T20:41:20Z",
        "body": "Limit has shipped in 0.7.3, but whilst writing documentation, it occurred to me that my implementation did not account for making `{{@last}}` work when using `{{#foreach}}` and `limit`. Whoops. That'll need resolving when this gets tackled.\n"
      },
      {
        "user": "johnny94",
        "created_at": "2015-12-27T10:24:13Z",
        "body": "Hello, I am new to this project. I think I can help to add these attributes to the helpers. May I take this?\n"
      },
      {
        "user": "KyleSevenoaks",
        "created_at": "2016-05-02T10:51:22Z",
        "body": "When outputting multiple foreach loops, each with a {{#has tag...}} helper, one limit attribute applies to all the foreach loops, is this by design? :) \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-05-03T21:20:45Z",
        "body": "@KyleSevenoaks interesting, could you provide an extended example? It doesn't sound correct but it would be helpful to have a full reproduction case to be sure.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-05-12T15:16:34Z",
        "body": "@KyleSevenoaks I've not been able to reproduce what you're describing. If you can provide an example that breaks that would be great.\n\nThis issue has been sat open with the intention of potentially adding reverse/negative indexes, but I'm struggling to think of a clear use case for this behaviour. If anyone has one please post here, and we'll consider reopening but for now I'm going to close this issue as complete.\n"
      }
    ]
  },
  {
    "number": 6040,
    "title": "Regression: Export throws 'access denied' ",
    "created_at": "2015-11-03T18:06:58Z",
    "closed_at": "2015-11-16T09:00:22Z",
    "labels": [
      "bug",
      "help wanted",
      "P2 - High"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/6040",
    "body": "Exports are currently broken - they appear to do nothing, but are throwing 401 errors behind the scenes\n### Steps to Reproduce\n1. Login to your Ghost admin\n2. Go to the 'labs' page\n3. Hit 'export'\n4. Nothing happens\n5. Terminal / server console shows 'Access denied' error\n\nThis has happened quite recently and may be related to #5972\n### Technical details:\n- Ghost Version: master (latest commit: d81ddc9)\n- Not browser or node version dependent\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/6040/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "acburdine",
        "created_at": "2015-11-03T18:08:18Z",
        "body": "I can look at this. Shouldn't be too difficult of a fix.\n"
      },
      {
        "user": "channprj",
        "created_at": "2015-11-04T07:14:08Z",
        "body": "Same thing happened to me. \n\n``` js\n// Failed to load resource: the server responded with a status of 401 (Unauthorized)\n{\"errors\":[{\"message\":\"Access denied.\",\"errorType\":\"UnauthorizedError\"}]}\n```\n"
      }
    ]
  },
  {
    "number": 5599,
    "title": "Use `updated_at` to prevent overwriting new data with old data.",
    "created_at": "2015-07-23T22:38:52Z",
    "closed_at": "2017-04-19T13:53:33Z",
    "labels": [
      "server / core",
      "affects:api",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/5599",
    "body": "Ghost's editor is not yet collaborative, which is a sizeable issue that we want to resolve properly in the not too distant future. However, I think in the short-term we could be preventing issues like #4999 and #5450 by preventing overwrites of data when we know we already have a newer version in the database.\n\nWhen a PUT request is made, it is made with a complete resource that includes the `updated_at` timestamp. With our Ember admin, that data is returned from the server, and simply resent with the next save - the timestamp is not modified by the client (and nor should it be).\n\nOn the server, we could use this information to determine whether or not it is safe to save. If the `updated_at` timestamp is the same or newer than the one currently in the table, then we can safely save the data, however, if the `updated_at` timestamp is older than the one in the table then we have a more recent version of the data in the database and should not overwrite it with the data that was sent to the API. \n\nIt is also possible to implement a slightly smarter version of this which also checks if any of the other data in the table is different. If the two versions are the same, there's no need to do anything.\n\nThe request to lookup what is in the table, and the request to update it, if safe, should be contained within a transaction, to ensure that we don't end up with race conditions.\n\nI believe the correct thing to do, in the case that the `updated_at` timestamp is out of date and the data cannot be saved, is to return a `409 Conflict` error. The recommendation is to return enough data to resolve the conflict, but I'm not aware of any recommendations on the form of the response. I think using our normal error format is fine. \n\nShort term, there's no need to do fancy conflict resolution handling, as long term we will hopefully solve all of this with a more advanced solution like Operational Transforms. \n\nFor now, showing an error and warning the user to save their version elsewhere and then refresh is one option, perhaps a slightly nicer option is showing the warning in a modal and giving the user the option to save anyway. This would require adding a force save flag to the PUT request.\n\nThis is a slightly dirty short term solution, but my thought is that it is better to prevent overwrites, than to mask that they are happening by doing them blindly.\n\nAlthough this mostly applies to posts, I think it makes sense to implement it in such a way that overriding `updated_at` is prevented across all models by default.\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/5599/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "psvet",
        "created_at": "2015-09-22T23:20:32Z",
        "body": "@ErisDS — if this is still necessary, I'd like to take it on myself!\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-09-23T13:07:50Z",
        "body": "@psvet For sure it's still needed :+1: \n"
      },
      {
        "user": "psvet",
        "created_at": "2015-09-25T20:57:09Z",
        "body": "@ErisDS, a few questions:\n\nI have the basic `409 Conflict` working by checking `updated_at`, but so far not checking which information has changed. For that implementation, which attributes do you want to be checked? The priority is probably the actual post text, but what about other editable content (`status`, `title`, `slug`, etc.)? And in the case of multiple conflicting attributes, how detailed should the error message be? Right now it's pretty simple: `409 Conflict. Back up newest changes in separate document before refreshing page.`\n\nAlso, I added the functionality to `models/base` thinking it would work with all models, but as far as I can tell, the only ones whose `edit` method interacts with the base edit are `post` and `user`. What do you suggest regarding that and implementing it across all models?\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-10-12T19:48:59Z",
        "body": "@psvet looks like you've updated your PR since that comment - sorry for the slow reply. I think the key thing to check is always the markdown content which is edited and we definitely shouldn't count the `updated_at`key - but you seem to have quite a smart version implemented ;)\n"
      }
    ]
  },
  {
    "number": 5018,
    "title": "'Enter' keystroke behavior when editing blog logo and cover",
    "created_at": "2015-03-10T05:05:21Z",
    "closed_at": "2016-01-12T21:11:39Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/5018",
    "body": "When changing the URL of the blog logo and blog cover with `fileStorage: false`, pressing enter after typing the URL does not add the image, but behaves like the \"Cancel\" button was clicked. Clicking \"Save\" adds the image as expected.\n\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/5018/comments",
    "author": "percygrunwald",
    "comments": [
      {
        "user": "felixrieseberg",
        "created_at": "2015-03-11T17:22:19Z",
        "body": "I can take a look at this (once #4998 is merged).\n"
      },
      {
        "user": "iainjp",
        "created_at": "2015-10-19T21:56:50Z",
        "body": "Hi! I'm currently working on a fix for this just now. Should be with you as an MR shortly :smile: \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-10-20T07:03:55Z",
        "body": ":+1: \n"
      }
    ]
  },
  {
    "number": 4825,
    "title": "Wish: Better diagnostics when unsupported NODE_ENV is set",
    "created_at": "2015-01-19T02:03:37Z",
    "closed_at": "2015-05-28T15:50:47Z",
    "labels": [
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/4825",
    "body": "If `NODE_ENV` happens to already be set to an unsupported value, several `grunt` command will fail to work, with no indication of what the problem is. This could happen to potential contributors who checking out the project, but happen to have a different `NODE_ENV` value already set via `.bashrc`. (That was my case). \n\nHere's what the failure looks like:\n\n```\n$ grunt express:dev\nRunning \"express:dev\" (express) task\nStarting background Express server\nStopping Express server\n```\n\nYou you can try explicitly setting `NODE_ENV=boom` to see what happens.\n\nIdeally a diagnostic would be printed in this case like `NODE_ENV=boom` is not supported.`\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/4825/comments",
    "author": "markstos",
    "comments": [
      {
        "user": "jaswilli",
        "created_at": "2015-01-19T17:35:04Z",
        "body": "Agreed.\n\nThe code to output an error in this situation is actually already in place.  I think it stopped working at some point as a result of a side-effect in how the error logging module is configured, combined with some refactoring of the Ghost bootstrapping process.\n\nThe error handling in the bootstrap process as well as the filtering in those logging methods should probably given a once-over to fix up issues like this.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-05-28T15:50:47Z",
        "body": "After trawling the codebase a bit today, I have all this in my brain reasonably clearly. Therefore I took the opportunity to write this up as a more detailed issue: #5358 \n\nGoing to close this one in favour of it.\n"
      }
    ]
  },
  {
    "number": 4556,
    "title": "Post Settings Menu: Cmd/Ctrl + S doesn't save date or slug",
    "created_at": "2014-12-01T11:52:13Z",
    "closed_at": "2016-05-11T10:59:56Z",
    "labels": [
      "bug",
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/4556",
    "body": "There are still a few bugs with the post settings menu saving with cmd/ctrl + s. \n\nThis is because (I think) the properties aren't explicitly set in the editor controller's save method? I believe it would be good to do something to make this behaviour require less manual wiring. Perhaps implement a save method on the PSM controller that gets called by the editor controller.\n\nIt might be good to abstract out the concept of 'scratch' properties as well, again to reduce the amount of manual wiring.\n### Steps to Reproduce\n1. Open the PSM\n2. Change the date or slug, but don't focus out of the field\n3. Press cmd/ctrl + s\n4. Reload the editor\n5. Notice your changes are lost\n### Technical details:\n- Ghost Version: master \n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/4556/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "naz",
        "created_at": "2014-12-07T21:41:44Z",
        "body": "If it's ok, would love to work on this one this week. \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2014-12-08T08:55:36Z",
        "body": "@Gargol :+1: \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2015-10-09T17:44:25Z",
        "body": "This is still an issue in Ghost 0.7.1 - it'd be great to look at resolving it, perhaps along with #5777 and #5062. @kevinansfield is it perhaps worth putting together a plan for an overhaul of the PSM?\n"
      },
      {
        "user": "kevinansfield",
        "created_at": "2016-01-08T15:34:41Z",
        "body": "Just had a quick look at this. I think short-term solution is to capture <kbd>Ctrl-S</kbd> in those inputs and perform the necessary actions. If we call those actions on the main `save` action then any resulting validation errors will be hidden if the PSM isn't visible which is not a good user experience.\n\nLong-term I think both the current PSM concept and the `scratch` values/general data flow in the editor need overhauling. The PSM as it stands strikes me as a bit odd as it's in a bit of a weird middle-ground where changing image, slug, author, or meta data all immediately save but publish date, tags and feature toggles are only saved when the main Save button is hit.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2016-01-08T15:38:55Z",
        "body": "This sounds sane to me. I agree that the PSM is a bit of a mix-and-match for how it works and needs to be unified / overhauled to work in a consistent way.\n\nThe short term fix also sounds like a good plan, I run into this one quite often, but not sure if it's just cos I'm a cmd+s-aholic\n"
      }
    ]
  },
  {
    "number": 2285,
    "title": "Reformat month based image upload directories",
    "created_at": "2014-02-27T23:13:10Z",
    "closed_at": "2014-09-16T18:00:35Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/2285",
    "body": "I'm honestly just opening this before someone else does. Currently we save uploads in the folder structure `/images/2014/jan/image.jpg` - which is pretty fucking weird.\n\nIt would probably make a lot more sense if it was `/images/2014/01/image.jpg`\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/2285/comments",
    "author": "JohnONolan",
    "comments": [
      {
        "user": "ErisDS",
        "created_at": "2014-02-27T23:26:49Z",
        "body": "Can you please provide some reasoning? \n"
      },
      {
        "user": "JohnONolan",
        "created_at": "2014-02-27T23:41:53Z",
        "body": "1. It flies in the face of our date based URL structure\n2. It goes against the standard naming convention of every other large CMS\n3. It completely screws sorting on every major OS which sorts folders alphabetically\n4. It's in English.\n"
      },
      {
        "user": "jwillmer",
        "created_at": "2014-03-07T11:05:36Z",
        "body": "Wouldn't it make more sense to store images sorted by categorys rather than date? So that the user can preview his images by category and maybe use the same for another post. The date of the image upload could be stored in the db or even in the file. Maybe it is just me but I'm not a fan of the folder hierarchy. \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2014-03-07T11:13:44Z",
        "body": "@jwillmer what sort of category? Informed from where? We don't store image meta data in a DB - that adds overhead and complexity that isn't needed.\n"
      },
      {
        "user": "jwillmer",
        "created_at": "2014-03-07T16:22:54Z",
        "body": "We could use the name as date field if we need an upload date. Is the upload date important after all? \n"
      },
      {
        "user": "halfdan",
        "created_at": "2014-03-07T16:40:44Z",
        "body": "> could use the name as date field\n\nWhat are you trying to say?\n\nTo be honest - it doesn't really matter where your images end up. It's just a directory on the file system. The user won't care from where they are served the images. \n"
      },
      {
        "user": "hswolff",
        "created_at": "2014-03-08T03:28:36Z",
        "body": "Just to chime in, I do agree with @JohnONolan that moving the format to `/images/YYYY/MM/` would be best.  It was a stumbling point when migrating from WordPress as that is the format it uses as well.  Also it was just entirely unexpected to see the month name abbreviation there as I don't think that's common in most software (I have no facts to support this claim :)).\n"
      },
      {
        "user": "JohnONolan",
        "created_at": "2014-08-18T21:28:17Z",
        "body": "Bump. The longer this goes without a fix the more debt we get into when we want to change it later.\n"
      },
      {
        "user": "hswolff",
        "created_at": "2014-08-18T21:29:00Z",
        "body": "I'd be happy to take this on.\n"
      }
    ]
  },
  {
    "number": 2182,
    "title": "Optimise Ghost boot-up",
    "created_at": "2014-02-12T12:57:15Z",
    "closed_at": "2017-03-14T10:24:26Z",
    "labels": [
      "server / core",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/2182",
    "body": "This is a bit of a case of me thinking out loud. Perhaps it's part of #1789, but it is also related to #2156 and #2179 (package.json support).\n\nAt the moment we have:\n- bootstrap (initialise the config file)\n- server init (does a whole tonne of stuff, finally calling server.listen)\n- serve first request = middleware\n\nI'm wondering if the server init could be streamlined into only things that are absolutely necessary to happen before Ghost even starts.\n\nSurely a whole heap of this isn't actually needed until we serve the first request which needs it. For example, mail - it might never ever be needed, so why bother initialising it before we start Ghost?\n\nSimilarly with the new package.json stuff, should we be loading this into config? That's certainly convenient, but should it be somewhere else, loaded only if and when it is necessary? Or should it be passed to config later on in the flow... generated when requested?\n\nThis is a pretty different way of working, but I'm thinking it could lead us to much more streamlined, more modular code, it could give us a faster boot time, and a smaller memory footprint by default. \n\nBut I am just thinking out loud :wink: \n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/2182/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "hswolff",
        "created_at": "2014-02-13T02:33:02Z",
        "body": "There's also a lot of middleware currently that performs redundant tasks upon every request that could be reduced to just a one-time initialization.  \n\nAdding lazy loading to many modules would be superb as well.  Would also encourage a more modular and task-oriented design and layout of code.\n\n#2170 should help in easing the conceptualization of ways we can ease the app run-time.\n"
      },
      {
        "user": "ThisIsMissEm",
        "created_at": "2014-02-13T04:00:44Z",
        "body": "This indeed sounds like a different way of thinking. I look forward to hearing more!\n"
      },
      {
        "user": "eastwood",
        "created_at": "2014-02-13T12:41:31Z",
        "body": "This would greatly help with issues such as the ordering of CSRF and Routing in #2171 and #2188\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2017-03-14T10:07:26Z",
        "body": "@kirrg001 maybe an idea to look at this as part of the work to try to minimise the boot time.\r\n\r\nMaybe there are things we can do to improve the structure. If not - it would be good to close this, it's pretty old."
      },
      {
        "user": "kirrg001",
        "created_at": "2017-03-14T10:24:26Z",
        "body": "Thanks for pointing me to this issue, wasn't aware of this one 🙈\r\n\r\nWhen i have debugged the Ghost bootstrap last week, the most slow down parts where:\r\n\r\n- we have required all kinds of bigger modules, which eat time to read them from disk, but they weren't needed on bootstrap\r\n- lot's of sub dependencies had strict dependencies e.g. lodash, debug etc - this caused node to load a dependency multiple times, because e.g. lodash was installed 5 times with a different version (this has eaten bootstrap time and memory usage)\r\n- all the other init calls where pretty fast (i have used `time-require` to make the whole bootstrap process visible)\r\n- database connection eats lot's of time. one database connection is created by Ghost and one by knex-migrator to check the health of the database (this could be optimised by passing a database connection into knex-migrator) - will raise this as separate issue.\r\n\r\nThere are for sure pieces which we don't have to load on bootstrap, but i assume they won't bring a big boost. Closing for now."
      }
    ]
  },
  {
    "number": 2092,
    "title": "Handle session expiry gracefully",
    "created_at": "2014-02-01T16:14:22Z",
    "closed_at": "2014-12-15T14:57:12Z",
    "labels": [
      "affects:admin",
      "help wanted"
    ],
    "url": "https://github.com/TryGhost/Ghost/issues/2092",
    "body": "Ghost's sessions last 12 hours. Some people keep the window open a lot lot longer than that. If they do, their session goes away and when they go to save they get an unhelpful error message which just says 'Unknown Error'.\n\nFirstly, it would be great to upgrade that message to say something sensible like 'Oops, you're not logged in' - this is now covered by issue #2171 - this issue focuses on improving the overall handling of sessions.\n\nSecondly, I would like to notify a user that they are logged out before they attempt to save. It would be great to have a background script that pings the server checking for the session.\n\nThirdly, at the moment, even if you log back in again via a separate tab, you still can't save your post. It would be super great if we could make this possible.\n",
    "comments_url": "https://api.github.com/repos/TryGhost/Ghost/issues/2092/comments",
    "author": "ErisDS",
    "comments": [
      {
        "user": "alexlehm",
        "created_at": "2014-02-01T16:22:57Z",
        "body": "Ideally the save button would go grey if the session is timed out (this requires a 12 hour javascript timer, no idea if this works).\nSaving the data as draft would be nice if the session already expired but that would require a session that is invalid but still remembers the login name.\n"
      },
      {
        "user": "javorszky",
        "created_at": "2014-02-01T17:03:31Z",
        "body": "WP has something called the heartbeat API. I think that's a generaly good idea to have for stuff like this. Thoughts? \n"
      },
      {
        "user": "ErisDS",
        "created_at": "2014-02-01T17:22:30Z",
        "body": "@javorszky Can you explain what the heartbeat API is, how/why it works, and why it's a good idea?\n"
      },
      {
        "user": "javorszky",
        "created_at": "2014-02-01T18:22:15Z",
        "body": "Basically it's a client side javascript thing that pings to the backend periodically. It's sortof like \"this client is still here, anything important happened?\". Current core implementation is showing a login window as a modal when the logged in session is expired.\n\nDevs can also hook into the heartbeat api, so they can add their own checks / payload to / from the client side.\n\n## How it could benefit Ghost\n\n• Session expiry can be checked against\n• Autosaves can be implemented that don't depend on localstorage or cookies\n• notifications can be pushed to client side. Say... messaging\n• multiuser: XYZ is editing this post, lock it. Left, heartbeat no longer reports client present, unlock.\n"
      },
      {
        "user": "PaulAdamDavis",
        "created_at": "2014-02-02T02:01:39Z",
        "body": "Just thought I'd add that the heartbeat stuff in WP is a real nice touch, saved me plenty of pain when myself and a client are both populating a site.\n"
      },
      {
        "user": "sebgie",
        "created_at": "2014-02-02T14:42:09Z",
        "body": "I would like to add some detail to what is described in the issue:\n1. The `401 forbidden` response from the server is not handled correctly by the client side JavaScript atm. So it becomes an Unknown Error.\n2. see number 1; If the client side JavaScript handles the error correctly it could show a login dialog and ask the user to reauthenticate.\n3. This one is a bit tricky, because the CSRF token from the new session is unknown to the old window. So any request is denied without refreshing the window.\n\nThe improvements discussed here should in my opinion cover two different situations:\n- User is authenticated and browser is running for more than 12 hrs without shutting down the computer. In this case a heartbeat would help to reset the session timeout with every ping to the server.\n- User is authenticated and browser is running. Computer goes to sleep. In this case  the session will time out after 12 hrs and the client side save function should handle the invalid session correctly. Additionally a heartbeat can proactively check and ask for reauthentication whenever the browser window becomes active.\n"
      },
      {
        "user": "reconbot",
        "created_at": "2014-09-06T17:39:32Z",
        "body": "I'd like to note that in our current released version. While the session will stay around, you often need to reload the admin in order for it to function. It appears to think it's logged out however that is not the case. When you let it leave the editor and bring you to the login screen, the login action is skipped and you end up at the content page.\n"
      },
      {
        "user": "ErisDS",
        "created_at": "2014-09-14T08:36:40Z",
        "body": "Hi @reconbot sorry I missed this comment. What you're describing sounds like it might have been an issue we were having with Ghost(Pro). If you run into issues whilst using our hosted platform you can always contact our support team on support@ghost.org - they have tools to help you directly with your blog.\n"
      }
    ]
  }
]