[
  {
    "number": 4283,
    "title": "Will updating backbone also update jquery? [answered: no]",
    "created_at": "2023-08-31T18:56:37Z",
    "closed_at": "2023-09-01T00:51:39Z",
    "labels": [
      "fixed",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4283",
    "body": "Hi does updating to the latest backbone also update jquery? Thanks",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4283/comments",
    "author": "gisraelsplunk",
    "comments": [
      {
        "user": "jcbrand",
        "created_at": "2023-08-31T19:42:41Z",
        "body": "No, jQuery is not an NPM dependency (i.e. it's not in the package.json file)."
      }
    ]
  },
  {
    "number": 4241,
    "title": "Backbonejs (1.4) version compact with jQuery (3.4.1) ?",
    "created_at": "2020-05-21T12:49:06Z",
    "closed_at": "2023-07-27T21:13:26Z",
    "labels": [
      "question",
      "documentation"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4241",
    "body": "Hi Guys,\r\n\r\nNot an issue just clarify my doubt, My backbonejs version is **1.1.2** shall i proceed with jQuery version **3.4.1** ? ",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4241/comments",
    "author": "sivaprabug",
    "comments": [
      {
        "user": "jgonggrijp",
        "created_at": "2022-01-07T15:34:34Z",
        "body": "@gsivaprabu Sorry for the long silence. Please clarify: are you using Backbone 1.1.2, Backbone 1.4.0 or upgrading from the former to the latter?\r\n\r\nFrom my experience, Backbone 1.4 works fine with jQuery 3.x, but I haven't tried 1.1.2. If you try it, please report back your findings here. Thanks in advance!"
      },
      {
        "user": "jgonggrijp",
        "created_at": "2023-07-27T21:13:26Z",
        "body": "Closing this as the question no longer seems current. In general, the answer to \"is Backbone version X compatible with jQuery version Y\" is very likely to be \"yes\"."
      }
    ]
  },
  {
    "number": 4177,
    "title": "base backbone class",
    "created_at": "2017-12-15T23:30:53Z",
    "closed_at": "2017-12-15T23:37:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4177",
    "body": "is there any chance that Model, Collection and View will be derived from one base backbone class in next release?\r\n```\r\nBackbone.Model.prototype instanceof BaseBackbone == true\r\nBackbone.Collection.prototype instanceof BaseBackbone == true\r\nBackbone.View.prototype instanceof BaseBackbone == true\r\n```\r\nthis will help in some cases to determine is a function is known backbone constructor or not\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4177/comments",
    "author": "taburetkin",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2017-12-15T23:37:27Z",
        "body": "I'm afraid there isn't any chance."
      }
    ]
  },
  {
    "number": 4172,
    "title": "updating a model in a collection with Collection.create( ,merge: true) updates the backend with only the new attributes",
    "created_at": "2017-12-05T08:30:02Z",
    "closed_at": "2017-12-05T19:06:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4172",
    "body": "Consider a model m with id 0 and attributes { a: 10 } in a collection c\r\n\r\nnow do c.create({ id: 0, b: 20}, { merge: true })\r\n\r\nit's supposed to update the model and save it.\r\n\r\nthe resulting model indeed has attributes: { a: 10, b: 20}\r\nhowever, the RESTful PUT has only { b:20 }\r\nFollowing the definition of PUT, it will replace the content of the resource with the new content,\r\nwhich is { b: 20}\r\n\r\nFor PATCH this is Ok, but for UPDATE you need to put the merge attribute list.\r\n\r\nOne way to solve this, is to save the merged model (returned by add) iso the temporarily created model.\r\nHowever, this will be more complicated with the combination with options.wait\r\n\r\nA workaround is to use the patch option.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4172/comments",
    "author": "rianwouters",
    "comments": [
      {
        "user": "paulfalgout",
        "created_at": "2017-12-05T14:26:59Z",
        "body": "I the issue here is that `create` is for `POST`ing  From the docs \"The create method can accept either an attributes hash or an existing, unsaved model object.\"  _unsaved_ meaning there is no id.  You should not `create` with an id.  `create` is expecting an `id` to be returned from the server.  If anything `create` should error if it finds an `idAttribute`"
      },
      {
        "user": "rianwouters",
        "created_at": "2017-12-08T23:09:11Z",
        "body": "I see the point.\r\n\r\nFor completeness sake, my workaround: \r\n\r\n(get(id) || add({id})).save(attrs)\r\n"
      }
    ]
  },
  {
    "number": 4156,
    "title": "what do you mean by this mistake?",
    "created_at": "2017-08-30T03:33:15Z",
    "closed_at": "2017-12-05T17:04:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4156",
    "body": "When I require `backbone.js`. It throw an error like this: `backbone.js:1410 Uncaught TypeError: this.$el.off is not a function`. So how can I solution it?",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4156/comments",
    "author": "buyouzzj",
    "comments": [
      {
        "user": "paulfalgout",
        "created_at": "2017-08-30T13:58:38Z",
        "body": "maybe you don't have jQuery?"
      }
    ]
  },
  {
    "number": 4152,
    "title": "model.omit('attr') returns POJO?",
    "created_at": "2017-08-08T20:21:16Z",
    "closed_at": "2017-08-08T21:20:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4152",
    "body": "I think #4024 is a working solution to this, but I'm not entirely sure.\r\n\r\nExample:\r\n```\r\nlet model = new Backbone.Model({ foo: 'bar', baz: 'qux' });\r\nmodel.omit('foo') // returns { baz: 'qux' }\r\n```\r\nAs a proxied underscore method, I can understand the default behavior. It seems like in the context of a backbone model though, it should somehow return the model with the omitted fields by default?\r\n\r\nOther than by overriding the method chain, possibly supering or calling another util/_ method to have the intended effect, or by instantiating a new model, I'm not sure what the most ideal solution to this would be and whether or not the entity context should be accounted for by default.\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4152/comments",
    "author": "nnnoel",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2017-08-08T21:20:58Z",
        "body": "It's intended to return a plain object copy of the attributes with your desired keys omitted. \r\n\r\nIf you want to mutate your model by removing a key, and firing all of the related `change` events, you're looking for `model.unset('foo')`."
      }
    ]
  },
  {
    "number": 4141,
    "title": "Canvas with backbone",
    "created_at": "2017-05-27T00:05:43Z",
    "closed_at": "2017-06-15T18:04:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4141",
    "body": "I wish to integrate canvas tag with backbone.js\r\nI am stuck on the position of defining the view. Would appreciate if some one can direct me. How can we associate a view with the canvas.\r\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4141/comments",
    "author": "yuvrajm",
    "comments": [
      {
        "user": "wesvetter",
        "created_at": "2017-05-31T18:50:39Z",
        "body": "I'm not familiar with canvas but it should be the same as creating any other native HTML element.\r\n\r\nIf there's no existing canvas element:\r\n\r\n```javascript\r\nvar CanvasView = Backbone.View.extend({\r\n\r\n  tagName: \"canvas\",\r\n\r\n  render: function() {\r\n    // modify canvas element here...\r\n  }\r\n\r\n});\r\n```\r\n\r\nor if the element already exists on the page:\r\n\r\n```javascript\r\nvar CanvasView = Backbone.View.extend({\r\n\r\n  el: \"#my-canvas\", // your selector\r\n\r\n  render: function() {\r\n    // modify canvas element here...\r\n  }\r\n\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 4082,
    "title": "JQuery not present as a dependency in package.json / bower.json",
    "created_at": "2016-10-03T16:28:46Z",
    "closed_at": "2016-10-03T17:19:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4082",
    "body": "Installing backbone as a dependency trough npm, doesn't raise any warning about the fact that requires a peer dependency or directly installing it.\nWould be nice to have jquery as a peerDependency or dependency in package.json / bower.json files.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4082/comments",
    "author": "gabriellupu",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-10-03T17:19:30Z",
        "body": "jQuery is an optional dependency of Backbone. You don't need it to build a Backbone app.\n\nIf your app uses jQuery, you need to depend on it explicitly. Expose it to Backbone through a script tag or your build tool and Backbone will automatically pick it up. \n"
      },
      {
        "user": "gabriellupu",
        "created_at": "2016-10-04T09:56:01Z",
        "body": "Thanks for the feedback @akre54\n"
      }
    ]
  },
  {
    "number": 4076,
    "title": "when will the var changing be true at line527",
    "created_at": "2016-09-18T11:01:45Z",
    "closed_at": "2016-09-19T22:04:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4076",
    "body": "This could be a naive issue as I'm not quite good at JavaScript and backbone.\n\nI changed the the line527 as below, and play with it for a while, and never throw the exception.\n`if (changing) { throw \"the changing is changed, WOW . . . I thought this ex won't be trigerred anyway\"; return this; }\n`\n\nthe variable 'changing' won't be true at line527 unless we assign true to it. there is just one assignment in the set function at line 490:\n`var changing   = this._changing;\n      this._changing = true;`\n\nbut the this._changing is always false unless we assign true to it, i can see it's assigned to true at line 491, but it's assigned to false again at line536:\n`this._changing = false;`\n\nthere is one way to skip this asssignment, that's to return at line527:\n`if (changing) return this;`\n\nunforturnetly, the changing is always set to false at the beginning. \n\nthis looks like a evil loop. \n\nand I went through the whole file and only found another place where use the variable _changing at line566 function changedAttributes, but it's just an read operation so won't have an impact on its' value. \n\nThanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4076/comments",
    "author": "tylerxue",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-09-19T22:04:49Z",
        "body": "This is meant for nested change operations.\n\nIn the future please use the mailing list or StackOverflow for questions. Github issues are for maintaining the framework only.\n"
      }
    ]
  },
  {
    "number": 4056,
    "title": "ie10 & safari backbone's router not normal work, when i refresh page in browser",
    "created_at": "2016-06-27T02:02:53Z",
    "closed_at": "2016-06-29T18:31:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4056",
    "body": "first request page,router has work; i refresh page ,it router's routes has not work;\nex: \nhttp:/xxx/index.html#sc\nroutes:\"sc\" : 'simulationComb',\n## this is function (simulationComb) has not work;\n\nwhy not normal work?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4056/comments",
    "author": "owen-jia",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-06-29T18:31:45Z",
        "body": "Please use StackOverflow for questions. Github issues are for maintaining the framework only.\n"
      }
    ]
  },
  {
    "number": 4054,
    "title": "How can I know this event is not triggered in Backbone events",
    "created_at": "2016-06-20T05:26:37Z",
    "closed_at": "2016-06-20T18:58:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4054",
    "body": "I am actually using Backbone events with React.js. I want to save something if a particular Backbone event triggered otherwise I want to save something else. How can I do it?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4054/comments",
    "author": "ItsMrAkhil",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-06-20T18:58:01Z",
        "body": "Please use StackOverflow, the mailing list, or the Gitter channel for questions. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 4032,
    "title": "backbone.router  nomatch event",
    "created_at": "2016-05-20T10:48:04Z",
    "closed_at": "2016-05-20T16:57:49Z",
    "labels": [
      "question",
      "duplicate"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4032",
    "body": "why no event has been trigger, which is no matching route?\n\nI want to do something when there is no matching route.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4032/comments",
    "author": "kospot",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-05-20T16:57:49Z",
        "body": "You can add the splat route as the final:\n\n``` js\nroutes: {\n    \"help\":                 \"help\",\n    \"search/:query\":        \"search\",\n    \"*nomatch\": \"nomatch\"\n  },\n```\n"
      },
      {
        "user": "kospot",
        "created_at": "2016-05-21T01:31:58Z",
        "body": "how does it work? i cant not find any key word about \"nomatch\" in the source\n"
      },
      {
        "user": "ffflabs",
        "created_at": "2016-05-21T02:57:11Z",
        "body": "Splat is like a variable. You can name it whatever you like:\n\n``` js\n\"*anyname\": \"myfunction\"\n\n...\n\nmyfunction: function() {\n  // Use arguments[] bc there can be any var inputs\n}\n```\n"
      }
    ]
  },
  {
    "number": 4030,
    "title": "Navigate silently",
    "created_at": "2016-05-13T16:16:53Z",
    "closed_at": "2016-05-13T17:35:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4030",
    "body": "I was wondering why there is not no option to `navigate()` **without** updating the url or history. Is there an historical reason for this, or would a PR be considered?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4030/comments",
    "author": "mbrevda",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-05-13T17:35:47Z",
        "body": "You can just call the function? History is specifically to manage the history state.\n"
      }
    ]
  },
  {
    "number": 4005,
    "title": "Backbone Security",
    "created_at": "2016-04-04T08:07:24Z",
    "closed_at": "2016-04-04T14:37:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4005",
    "body": "Hi)\nI'm offering you to write new module(Security module), which will be based on Backbone framework, but will be separated from it. For beginning will be enough  to provide Oauth2 realization of security.\nMain features of this module will: easy to configure(just overwrite based class and include routers, models, collection, witch will be use this provider), provider will be created only once and manage token session(expired time of token), after succeed authorization this provider will be adding \"Authorization\" header with values witch it got after authorization, and of course provider have to provide \"logout\" function.\nWhat you think about my idea?  \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4005/comments",
    "author": "KraytsMan",
    "comments": [
      {
        "user": "linus-amg",
        "created_at": "2016-04-04T14:26:05Z",
        "body": "cool idea, go ahead, backbone plugins are always welcome\n"
      },
      {
        "user": "akre54",
        "created_at": "2016-04-04T14:37:58Z",
        "body": "Yup! Sounds like a great plugin. Looking forward to see it.\n"
      }
    ]
  },
  {
    "number": 4001,
    "title": "Backbone Models and DTO",
    "created_at": "2016-03-29T19:47:31Z",
    "closed_at": "2016-03-29T20:38:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/4001",
    "body": "Can you create a new structure(or model) which will be consists of other models.(Something like DTO(Data transfer object))?\nBecause, sometimes are situations, when you need to send or operate model with some additional data.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4001/comments",
    "author": "KraytsMan",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2016-03-29T20:38:04Z",
        "body": "HI @KraytsMan, please use StackOverflow, the Gitter Channel, or the mailing list for questions. Github issues are for maintaining the framework only. Thanks!\n"
      }
    ]
  },
  {
    "number": 3925,
    "title": "Lodash _.flatten function work differently from v3.0.0",
    "created_at": "2016-01-12T14:31:09Z",
    "closed_at": "2016-01-12T16:40:18Z",
    "labels": [
      "question",
      "inappropriate"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3925",
    "body": "Hi, I wrote a small piece of code for test _.flatten. the code is as below\n\n```\nobjects = [{ 'a': [1] }, { 'a': [2, 3] }];\nconsole.log(_.flatten(objects, 'a')); \n```\n\nversion<=2.4.2  the result is [ 1, 2, 3 ]\nbut while I use version>=3.0.0  result is [ { a: [ 1 ] }, { a: [ 2, 3 ] } ]\n\nI got some confused here, is there any definition change for this function?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3925/comments",
    "author": "bbkingtw",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-01-12T16:40:18Z",
        "body": "lodash has `_.flattenDeep` that follows the v2 behavior.\n\nPS. this is the Backbone.js repo, not lodash.\n"
      }
    ]
  },
  {
    "number": 3881,
    "title": "ES6 Module Conventions with $, _ and Backbone libraries",
    "created_at": "2015-12-09T04:15:06Z",
    "closed_at": "2015-12-09T15:14:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3881",
    "body": "I am in the process of refactoring my code Backbone codebase to leverage new the ES6 features. One of the features I am most excited about is the Module system introduced in ES6. I am still playing around with different bundlers to be able to load it into current browsers that don't support ES6 yet.\n\n**Just curious to see how people are using Backbone in conjunction with ES6 Modules?**\n\nI have seen two approaches with regards to Underscore, jQuery, and Backbone libraries:\n\nAssuming the following html file:\n\n``` html\n<!-- index.html -->\n<script src=\"underscore.js\"></script>\n<script src=\"jquery.js\"></script>\n<script src=\"backbone.js\"></script>\n<script src=\"one.js\"></script>\n<script src=\"two.js\"></script>\n<script src=\"main.js\"></script>\n```\n\n**Load the libraries onto the global window object and access them via the window object.**\nThis seems like the traditional way of declaring library dependencies. It doesn't require adding boilerplate imports in all of your custom Backbone files/modules.\n\n``` javascript\n// File: one.js\n// access Backbone via the global object\nexport default OneView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: two.js\n// access Backbone via the global object\nexport default TwoView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: main.js\nimport OneView from './one.js';\nimport TwoView from './two.js';\n\n// access backbone via global\nvar m = new Backbone.Model();\nvar v1 = new OneView();\nvar v2 = new TwoView();\n```\n\n**Explicitly import the libraries for each new module you create**\nThis is very explicit but each individual file is very clear about what it is dependent on. If you unit test a file in isolation, all of it's dependencies are stated and should be more self-contained. It feels kind of bloated though to include all those imports in each custom Backbone file. This type of format will also play nicely with browserify/webpack and other bundlers. It also feels like how other languages module systems work.\n\n``` javascript\n// File: one.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nexport default OneView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: two.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nexport default TwoView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: main.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nimport OneView from './one.js';\nimport TwoView from './two.js';\n\n// access backbone via global\nvar m = new Backbone.Model();\nvar v1 = new OneView();\nvar v2 = new TwoView();\n```\n\nI could probably combine the jquery, underscore and backbone imports into one helper module that exports all three so that it would only be one export:\n`export {$, _, Backbone} from './BackboneHelper';`\n\nCurious to see if anyone else has found some useful conventions or wanted to discuss the tradeoffs they've experienced between the two methods.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3881/comments",
    "author": "msiconolfi",
    "comments": [
      {
        "user": "mr47",
        "created_at": "2015-12-09T09:27:58Z",
        "body": "I think second is better. It's more cleaner for future reader. He know where and what we are using.\n\nFor backbone more important things to be clear.\n\nBad idea is webpack define plugin.\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-12-09T15:14:03Z",
        "body": "This is really a question for StackOverflow or the mailing list, but personally I prefer the import everything way. It's much more explicit and easier to refactor. \n"
      },
      {
        "user": "jridgewell",
        "created_at": "2015-12-09T15:39:21Z",
        "body": "> Explicitly import the libraries for each new module you create\n\n:+1: \n"
      }
    ]
  },
  {
    "number": 3880,
    "title": "H5 route bug",
    "created_at": "2015-12-09T01:36:01Z",
    "closed_at": "2015-12-09T15:14:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3880",
    "body": "``` javascript\nroutes:{\n        'home/*':                             'home',\n        'home/:id/*:                         'homeA',\n}\n```\n\nwhen user h5 pushstate history and  link to /home?a=111\nI hope route ‘home’\nbut In fact , it route 'homeA'\nplease check it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3880/comments",
    "author": "mishe",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-12-09T15:14:44Z",
        "body": "Please use StackOverflow or the mailing list for questions. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 3851,
    "title": "missing () invocation",
    "created_at": "2015-11-05T23:02:03Z",
    "closed_at": "2015-11-06T17:04:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/pull/3851",
    "body": "missing history () invocation\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3851/comments",
    "author": "juanramirezc2",
    "comments": [
      {
        "user": "captbaritone",
        "created_at": "2015-11-06T00:08:38Z",
        "body": "The `()` is optional when not passing any arguments, so this comes down to a style choice.\n\nI did a quick check and this is the only time we construct and object with no arguments, so whichever way we go, it's guaranteed to be consistent. ;)\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-11-06T17:04:58Z",
        "body": "Yup yup. Looks a little cleaner when we don't need it. Thanks @captbaritone \n"
      }
    ]
  },
  {
    "number": 3838,
    "title": "Backbone object is duplicated when imported",
    "created_at": "2015-10-27T04:02:28Z",
    "closed_at": "2015-10-27T16:39:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3838",
    "body": "When Backbone is imported into a file a new copy of `Backbone` is created each time.\n\nConsider these 2 files:\n\n**router.js:**\n\n``` javascript\nimport Backbone from 'backbone';\n\nwindow.BB1 = Backbone;\n\nexport default Backbone.Router.extend( /* stuff here */ );\n```\n\n**main.js:**\n\n``` javascript\nimport Backbone from 'backbone';\nimport Router from './router';\n\nwindow.BB2 = Backbone; // NOT THE SAME OBJECT AS window.BB1\n\nnew Router();\n\n// DOES NOT TRIGGER ROUTER\n// BECAUSE ROUTER IS USING A\n// DIFFERENT COPY OF BACKBONE\nBackbone.history.start();\n```\n\nWhen I make the same test with another library like jquery.\n\n``` javascript\nimport $ from 'jquery';\n```\n\nIt is always the same object (never duplicated.) I have looked at the source of both and I am not seeing what is causing backbone to get duplicated each time. I may try again later though, if I figure out the cause I'll make a PR (assuming that would be wanted -- I don't see why it would be intentionally duplicated.)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3838/comments",
    "author": "jisaacks",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-10-27T16:39:21Z",
        "body": "This looks like a problem with your module loader setup or your package.json dependencies (usually if Marionette is depending on a different version of Backbone than the one in your package.json). \n\nTry StackOverflow, the mailing list, or the Gitter page to debug this further, Backbone isn't doing anything special here. \n"
      }
    ]
  },
  {
    "number": 3791,
    "title": "Make some of the model's attribute do not to sync to server",
    "created_at": "2015-09-11T02:12:15Z",
    "closed_at": "2015-09-11T13:33:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3791",
    "body": "Hi,\n\nI have saw in some cases, we have to store some states of the view, like\nin a dropdown of countries, the data of country list is get from the server:\n\n``` javascript\n[\n    {\n      \"name\":'USA',\"id\":1\n    },{\n      \"name\":\"England\",\"id\":2\n    }\n...\n]\n```\n\nBut i want to add a \"selected\" attribute to country model so that i just need to change this \"selected\" value, my view get to rendered.\n\nBut this \"selected\" attribute is meanless to the server, i don't want to sent it to the server.\n\nSo i am about to have a \"local\" attribute on Backbone.Model, which you can use set,get to set to modify some attributes of this \"local\" attribute, it also fires events,but it will not to be sync to the server\n\nIs that a right way?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3791/comments",
    "author": "anianj",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-09-11T13:33:18Z",
        "body": "Hi! Please use the mailing list or StackOverflow for questions like this. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 3716,
    "title": "Overriding Backbone model.parse()",
    "created_at": "2015-07-15T23:18:10Z",
    "closed_at": "2015-07-16T18:52:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3716",
    "body": "Hi all\n\nI overrode Backbone.Model instance.parse like so:\n\n``` javascript\n  parse: function (resp, options) {\n                    /*\n                     parse converts a response into the hash of attributes to be set on the model.\n                     The default implementation is just to pass the response along.\n                     */\n                    if(resp.success){\n                        return resp.success;\n                    }\n                    else{\n                        return {};\n                    }\n                }\n```\n\nBTW this is in my model \"class\", it is not passed in as an option, hope that's not a problem.\n\nIn my API, if everything is successful, I do this with Node\n\n``` javascript\nres.send({success:model};\n```\n\nif there is an error, I do:\n\n``` javascript\nres.send({error:model});\n```\n\nso as you can see, in the my overridden parse function it returns resp.success. I think this part is correct. _However_ when I return {}, then some problems seems to happen.\n\nBackbone seems to create whole new Backbone models if I return an empty object {} in the parse function.\n\nIn any case, what is the best way to handle different responses from the server in the parse method?\n\nFor example, ss this a good idea?\n\n``` javascript\n  parse: function (resp, options) {\n\n                    if(resp.success){\n                        return resp.success;\n                    }\n                    else{\n                        return this.attributes; /// is this a good idea?\n                    }\n                }\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3716/comments",
    "author": "ORESoftware",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-07-16T18:52:44Z",
        "body": "Try asking these questions on the mailing list, the gitter board, or on StackOverflow. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 3666,
    "title": "Type Error with html 5 canvas ",
    "created_at": "2015-06-04T19:13:44Z",
    "closed_at": "2015-06-04T19:27:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3666",
    "body": "Hello, I get a type error with backbone 1.2 from the cdnjs when rendering a model from within a view...\n$(document).ready(function(){\nvar Box = Backbone.Model.extend({defaults: {x: 0,y: 0, w: 1,h: 1,}\n});\nvar BoxSet = Backbone.Collection.extend({model:Box });\nvar BoxView= Backbone.View.extend({\n    render : function() {var model=this.model, ctx=this.options.ctx;}\n});\nvar SetView= Backbone.View.extend({ \n    initialize: function() {this.collection.on(\"all\",this.render,this);},\n    render: function() {var canvas=this.$el.get(0) , ctx=canvas.getContext(\"2d\");}\n});  \nvar c=new BoxSet();\nc.add({x:10,y:10,w:100,h:100});  \nvar v=new SetView({el:$(\"canvas\"),collection :c});\nv.render();\n})\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3666/comments",
    "author": "billyholt",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-06-04T19:27:31Z",
        "body": "We no longer attach `options` to the view. You're error is in your `#render` trying to access the `ctx` property.\n"
      },
      {
        "user": "billyholt",
        "created_at": "2015-06-04T20:38:13Z",
        "body": "Thanks\n\nSent from my Sony Xperia™ smartphone\n\n---- Justin Ridgewell wrote ----\n\n> We no longer attach options to the view. You're error is in your #render trying to access the ctx property.\n> \n> —\n> Reply to this email directly or view it on GitHub.￼\n"
      }
    ]
  },
  {
    "number": 3619,
    "title": "Default (complex) attributes are by reference for multiple instances of a model.",
    "created_at": "2015-05-20T19:09:15Z",
    "closed_at": "2015-05-20T19:13:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3619",
    "body": "If you have an object specified as a 'default' attribute in your model, all instances of this model will share a reference to that object. Is there a reason we don't do a deep clone on the defaults object when creating a new Model instance?\n\nAs it is currently, if you make changes to a deep attribute of that object, you will be updating all model instances. Is this by design?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3619/comments",
    "author": "slikrik98",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-05-20T19:13:40Z",
        "body": "That's a common gotcha in _all_ JavasScript, not just Backbone. You're better off using a function that returns your defaults instead.\n\n``` js\nvar Model = Backbone.Model.extend({\n  defaults: function() {\n    return {\n      deep: { object: true }\n    };\n  }\n});\n```\n"
      },
      {
        "user": "slikrik98",
        "created_at": "2015-05-21T14:26:46Z",
        "body": "Does Backbone discourage the use of objects for model attributes?\n"
      },
      {
        "user": "Florian-R",
        "created_at": "2015-05-21T15:20:07Z",
        "body": "Yap, see #3457\n"
      }
    ]
  },
  {
    "number": 3608,
    "title": "modelId getter doesn't work with polymorphic Model getter",
    "created_at": "2015-05-15T14:38:03Z",
    "closed_at": "2015-05-15T14:43:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3608",
    "body": "I think i found a bug inside the 1.2.0 version. My Collection contains different Models, so i've used a getter to solve this.\n\n```\nnew Collection(\n   model: function(attrs){\n      if (attrs.foo) {\n          return new FooModel(attrs);\n      }\n      else {\n         return new BarModel(attrs);\n      }\n   }\n)\n```\n\nafter upgrading i had some trobles with my app because the collection couldnt find already exsiting models inside of it `collection.get(1) # => undefined`. So I've digged into the source and found this \"bug\".\n`this.model` isn't always a Model it can be function sometimes. \n\n```\n    modelId: function (attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n```\n\nSo I think everybody who is using a function in `this.model` and has a custom idAttribute defined, backbone won't find already existing models.\n\n```\n  modelId: function (attrs, options) {\n    return this.model(attrs, options).id;\n  },\n```\n\nThis is the overridden function i'm using inside my collection now, and it works for me.\nSo maybe the `modelId` function needs something like this:\n\n```\n  if (_.isFunction(this.model)) { \n    return this.model(attrs, options).id;\n  } \n  else {\n    return attrs[this.model.prototype.idAttribute || 'id'];\n  }\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3608/comments",
    "author": "antpaw",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-05-15T14:43:36Z",
        "body": "If `this.model` is a plain function, its `prototype.idAttribute` will be undefined and that line will fall back to `'id'`, catching the common case. If your models have a more advanced idAttribute you have to override `modelId` too (though I wouldn't recommend creating a new model instance just to get its id property).\n"
      },
      {
        "user": "antpaw",
        "created_at": "2015-05-15T14:48:34Z",
        "body": "Thanks, I see, the only reason I've submitted it because I after updating from 1.1.2 to 1.2.0 my code didn't work properly and I think I'm not the only one who will run into this issue especially because there is no mentioning about this in the documentation, just in the changelog without any warnings.\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-05-15T15:00:48Z",
        "body": "You're right, we should totally document that. Let me put something together.\n"
      },
      {
        "user": "akre54",
        "created_at": "2015-05-15T15:31:45Z",
        "body": "@antpaw #3609\n"
      }
    ]
  },
  {
    "number": 3557,
    "title": "Router.execute doesn't return anything",
    "created_at": "2015-04-04T17:49:38Z",
    "closed_at": "2015-04-05T16:36:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3557",
    "body": "If the route callback returns false, a route event is not supposed to be fired. i.e.\n`if (router.execute(callback, args, name) !== false) {//trigger 'route' event...}`\n\nHowever, execute() doesn't actually return the callback functions return value:\n`if (callback) callback.apply(this, args);`\n\nShouldn't this be:\n`if (callback) return callback.apply(this, args);`\n\nIs this by design, or am I missing something?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3557/comments",
    "author": "emersonyu",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-04-05T16:36:40Z",
        "body": "Nope, this is in place so folks can override `execute` in their apps to act as a `beforeAction`-like method (see #3016). We don't want the route handler's return value to affect the transition. \n"
      },
      {
        "user": "emersonyu",
        "created_at": "2015-04-05T17:04:04Z",
        "body": "Thanks, makes sense. Didn't read the comments closely enough :)\n"
      }
    ]
  },
  {
    "number": 3541,
    "title": "When there will be the next release?",
    "created_at": "2015-03-20T07:19:47Z",
    "closed_at": "2015-03-20T15:32:04Z",
    "labels": [
      "question",
      "duplicate"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3541",
    "body": "When there will be the next release?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3541/comments",
    "author": "ericrange",
    "comments": [
      {
        "user": "Florian-R",
        "created_at": "2015-03-20T09:11:45Z",
        "body": "It's in the pipe. See #3285 \n"
      }
    ]
  },
  {
    "number": 3532,
    "title": "Event \"change\" doesn't work when define el:[object jquery]",
    "created_at": "2015-03-12T20:47:16Z",
    "closed_at": "2015-03-12T21:32:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3532",
    "body": "when set \" el \" with selector like el:\"#page\" the \"change\" event of View works , but is set to object jquery does not work, like el:$(\"#page\"), the page html is load. I am creating a View.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3532/comments",
    "author": "FranklinBarroso",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-03-12T21:32:52Z",
        "body": "Try StackOverflow for questions. \n"
      }
    ]
  },
  {
    "number": 3479,
    "title": "Unable to remove view & related events",
    "created_at": "2015-02-07T14:45:59Z",
    "closed_at": "2015-02-07T20:06:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3479",
    "body": "window.web.form_view = new FormView({ el: $(\"#form\"),  });\nwindow.web.form_view.remove()\n\nor other any of tried code not working to remove.\n\nHow can we do this ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3479/comments",
    "author": "tejastank",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-02-07T20:06:06Z",
        "body": "Hi @tejastank, try the mailing list or the IRC channel for questions like this. Github issues are for maintaing the framework only.\n"
      },
      {
        "user": "tejastank",
        "created_at": "2015-02-08T10:23:28Z",
        "body": "I prefer to post bug/issue in github, instead of IRC, I do not prefer IRC.\n\nIs someone can help or fix let me know\n\nits complete bug, unable to remove create object from memory. it keep memory leak & wrong framework affects.\n\nKindly reopen it.\n"
      }
    ]
  },
  {
    "number": 3451,
    "title": "Give collection.set a parse option this is an undocumented feature",
    "created_at": "2015-01-21T05:05:13Z",
    "closed_at": "2015-01-24T17:57:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3451",
    "body": "Please, add description in docs. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3451/comments",
    "author": "vladlutkov",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2015-01-24T17:57:40Z",
        "body": "These types of things you should just open a pull and we'll see how it looks, no need to open an issue first. \n"
      }
    ]
  },
  {
    "number": 3446,
    "title": "validate on set",
    "created_at": "2015-01-17T21:36:58Z",
    "closed_at": "2015-05-13T20:50:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3446",
    "body": "Reading an old tutorial, I see that a Model used to validate on set as well as save. I can understand why it would have been reduced to just save, but I've definitely found a case where it breaks a Model, not having it on set.\n- I have a model with a defined validate function.\n- I set an invalid value for a field.\n- I set another invalid value for another field.\n- I then validate on save.\n- I now have two invalid values, and no fallback for the first set invalid value.\n\nI like the way that the previous values are saved for fallbacks, and replaced on invalid validation, but as discovered above, it's not quite fool-proof as a system. Having validation on set is definitely fool-proof, as invalid values can't get passed over and inadvertently remain on a model.\n\nWhat are your thoughts on this @jashkenas, I'd love to hear the reasoning why it was reduced to just set. As I'm learning, I've just added the following into my Model.\n\n``` js\n    set: function (key, val, options) {\n        // Handle both `\"key\", value` and `{key: value}` -style arguments.\n        if (typeof key === 'object') {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options = _.extend({}, options, {\n            validate: true\n        });\n\n        Backbone.Model.prototype.set.call(this, attrs, options);\n    },\n```\n\nThis overrides the behaviour, but to have to do this in every Model will get tiresome.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3446/comments",
    "author": "designermonkey",
    "comments": [
      {
        "user": "platinumazure",
        "created_at": "2015-02-10T04:16:33Z",
        "body": "Maybe I'm missing something here, but why not simply specify `{ validate: true }` when calling model set?\n"
      },
      {
        "user": "jamiebuilds",
        "created_at": "2015-02-10T05:10:32Z",
        "body": "> This overrides the behaviour, but to have to do this in every Model will get tiresome.\n\nYou could also create your own base model class.\n"
      },
      {
        "user": "designermonkey",
        "created_at": "2015-02-10T09:23:04Z",
        "body": "So you're both saying I should, by default, put in extra leg work to fix a bug?\n\nIf the current behaviour can cause invalid data to be present, then it is a bug by design, and should be fixed, without having to rely on a developer fixing it every time they use it.\n"
      },
      {
        "user": "platinumazure",
        "created_at": "2015-02-10T14:44:06Z",
        "body": "It's not a bug. Disagreement about the design of a project does not automatically imply a bug.\n\nForcing validation every time is a breaking change and the maintainers have simply decided that this was not the direction they wanted to go. They have left it open to consumers to choose whether to validate on every set (using `{ validate: true }`) or merely on save. That allows for more flexibility.\n\nYou can argue that validation should be on by default and people should pass `{ validate: false }` to disable it during model set, but again, that's a breaking change and not something the maintainers are likely to choose to do without cutting a new release version at the very least.\n"
      },
      {
        "user": "designermonkey",
        "created_at": "2015-02-10T14:49:03Z",
        "body": "Then the minimum that needs to be fixed is that all previous values are saved until validation is run, so they can be correctly reset to the last valid value.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2015-02-10T15:41:33Z",
        "body": "> Then the minimum that needs to be fixed is that all previous values are saved until validation is run, so they can be correctly reset to the last valid value.\n\nYes. That sounds like an interesting idea — although one that might be trickier to figure out in practice than in theory. It would be worth exploring in a PR.\n"
      },
      {
        "user": "megawac",
        "created_at": "2015-02-10T15:53:55Z",
        "body": "Epitome does this by having a `options` object set on each models prototype that is merged with the options argument (breaking). Lets you do both of these\n\n``` js\nlet M = Backbone.Model.extend({\n   options: {\n       validate: true\n    }\n})\nlet m = new M;\n\n// Nearly equivalent to doing this in this system\nlet m = new Backbone.Model({}, {validate: true})\n```\n"
      },
      {
        "user": "platinumazure",
        "created_at": "2015-02-16T23:31:57Z",
        "body": "> Yes. That sounds like an interesting idea — although one that might be trickier to figure out in practice than in theory. It would be worth exploring in a PR.\n\nHmm... Maybe that could be the beginning of a record-replay-reverse sort of thing too? Suppose this were implemented as a stack of attributes objects: each level could also have a valid metadata property to indicate if each set attempt is valid or invalid.\n\nBut that sounds a little much... I bet one of the plugins could handle this sort of thing.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2015-05-13T20:50:00Z",
        "body": "Seems like this conversation has run it's course. Still happy to entertain a PR that explores the notion of continuous tracking of unvalidated changes.\n"
      },
      {
        "user": "sgpinkus",
        "created_at": "2015-05-30T06:30:21Z",
        "body": "> Reading an old tutorial, I see that a Model used to validate on set as well as save. I can understand why it would have been reduced to just save.\n\nI can't understand. Efficiency? But why not have the option? i think there should be an option `alwaysValidate`. I find `Model exists if and only if Model valid` to be a useful and simplifying invariant. The alternative is more complex semantics, and off loading the work of handling contingencies to the client of the library.\n"
      }
    ]
  },
  {
    "number": 3422,
    "title": "Address bar shows in mobile Safari when calling router.navigate()",
    "created_at": "2014-12-22T13:05:36Z",
    "closed_at": "2014-12-22T16:59:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3422",
    "body": "Not sure if this is a bug...\n\nIt seems that always when the router updates the URL, Safari shows the address bar. Is it possible to somehow disable it with Backbone?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3422/comments",
    "author": "cydgit",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-12-22T16:59:04Z",
        "body": "I doubt it?\n\nDo the research, let us know...\n"
      }
    ]
  },
  {
    "number": 3413,
    "title": "Collection.set iteration i+1 tests variable 'model' of iteration i",
    "created_at": "2014-12-12T16:18:01Z",
    "closed_at": "2015-02-17T22:01:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3413",
    "body": "Hello and thanks for your work.\n\nsee Version 1.1.2\nsee Collection.set\nsee loop \"for (i = 0, l = models.length; i < l; i++)\"\n- iteration i; \n  line 686: suppose 'attrs' is not an instance of 'Model' => variable 'model' is not set.\n  ...\n  line 706, 713: variable 'model' is set.\n- iteration i+1\n  line 686: suppose 'attrs' is not an instance of 'Model' => variable 'model' is not changed.\n  ...\n  line 697: test \"attrs = attrs === model ? model.attributes : attrs;\"\n  => 'attrs' of iteration i+1 is test against 'model' of iteration i.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3413/comments",
    "author": "eloubout",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2014-12-12T17:49:24Z",
        "body": "Would you rather set `model = null;` at the beginning of the for loop? It's not necessary, since in your case `model !== attrs` it'll take the second condition of the ternary: `attrs = attrs`.\n"
      },
      {
        "user": "arshabh",
        "created_at": "2015-01-08T10:24:41Z",
        "body": "+1 @jridgewell \n"
      }
    ]
  },
  {
    "number": 3403,
    "title": "Release schedule",
    "created_at": "2014-12-02T19:41:59Z",
    "closed_at": "2014-12-11T23:11:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3403",
    "body": "I was wondering if there is a release schedule or plans for the next release of Backbone. The reason I'm asking is the current release (`1.1.2` as of this writing) has a bug with Models with custom `idAttribute` s. There is a fix for it on master where you can specify `modelId` on a collection but without a new release, dependency tools like Bower won't get it unless you point it to master which isn't what you want to be doing.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3403/comments",
    "author": "agrberg",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-12-02T19:49:44Z",
        "body": "Yessir. BackboneConf the Third is in two weeks. We should cut a `1.2.0` either before or during.\n"
      },
      {
        "user": "agrberg",
        "created_at": "2014-12-02T20:04:38Z",
        "body": ":+1: Awesome\n"
      },
      {
        "user": "Florian-R",
        "created_at": "2014-12-03T09:18:51Z",
        "body": "> dependency tools like Bower won't get it unless you point it to master which isn't what you want to be doing\n\nFWIW, you can point to a specific commit hash with Bower and npm, if you want grab an untagged version but don't want to take the risk to point on master.\n"
      },
      {
        "user": "appleboy",
        "created_at": "2014-12-05T02:30:18Z",
        "body": ":+1: Awesome\n"
      },
      {
        "user": "agrberg",
        "created_at": "2015-02-05T21:16:10Z",
        "body": "Any update on the release schedule of Backbone?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2015-02-05T21:18:15Z",
        "body": "Ah yes, this slipped on by. It would be good to cut a release as soon as possible, but I'm afraid I don't have any particular plan for you.\n"
      }
    ]
  },
  {
    "number": 3402,
    "title": "What is the Best Way to Show the  Data from Database to Leaflet POP UP.",
    "created_at": "2014-12-01T03:37:38Z",
    "closed_at": "2014-12-01T16:45:57Z",
    "labels": [
      "question",
      "inappropriate"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3402",
    "body": "Good Day too all! I just wanna ask a little question. Ahmm how do you show data from database to leaflet pop up?\n\nHere is my code in php select command\n\n<?php \n$db = new PDO('mysql:host=localhost;dbname=poi', 'root', ''); \n$sql = \"SELECT name,user_date,user_time,address,lat,lng,icon_name FROM tblmarker\"; \n\n$rs = $db->query($sql); \nif (!$rs) { \n    echo \"An SQL error occured.\\n\"; \n    exit; \n} \n\n$rows = array(); \nwhile($r = $rs->fetch(PDO::FETCH_ASSOC)) { \n    $rows[] = $r; \n    $name[] = $r['name'];\n    $user_date[] = $r['user_date'];\n    $user_time[] = $r['user_time'];\n    $address[] = $r['address'];\n    $icon_name[] = $r['icon_name'];\n} \nprint json_encode($rows); \n$db = NULL; \n?> \nand here is my code in showing the marker in the map from database\n\nfunction getInfo() { \n        $.getJSON(\"get_info.php\", function (data) { \n          for (var i = 0; i < data.length; i++) { \n            var location = new L.LatLng(data[i].lat, data[i].lng); \n            var marker = new L.Marker(location,{icon:Icon1}); \n            var ll = marker.getLatLng();\nmarker.bindPopup(\"$name<br>$user_date<br>$user_time<br>$address<br>$icon_name\").addTo(map); \n             } \n        }); \n      } \nI thought it works because when i refresh it the marker from my database shows in the map but when i click the marker for the pop up the pop up shows only is like this.\n\n$name\n$user_date\n...\nWhats wrong with my code? Am I missing something? TYFH and IA\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3402/comments",
    "author": "pauledwardpagente",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-12-01T16:45:57Z",
        "body": "Please use StackOverflow, the mailing list, or the IRC channel for questions. Github issues are for developing the framework only.\n"
      }
    ]
  },
  {
    "number": 3385,
    "title": "Backbone.Model.save() problem on Large JSON",
    "created_at": "2014-11-18T12:31:24Z",
    "closed_at": "2014-11-18T16:39:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3385",
    "body": "the model I'm trying to save  have one nested array object of some 700+ objects, _schedule will have 1000+ children_\n\n``` javascript\nvar TaskSchema = new Schema({\n    kiosk_id    : Number,\n    task_id     : Number,\n    title       : String,\n    app_id      : Number,\n    app_type    : String,\n    start       : Date,\n    end         : Date,\n    content_slot: [{\n        slot_guid        : String,\n        schedule         : [ {\n            media_guid   : String,\n            duration     : Number,\n            start        : Date,\n            name         : String\n        } ]\n    }]\n});\n```\n\nanything beyond 700 object in that array makes problem,\nmy express server take few seconds to realize what happened and don't get the model data at all.\n\nbelow 700 nested children in that array all works fine,\n\nany suggestion? do I have to break my json to parts? \nstream it from browser? \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3385/comments",
    "author": "metaory",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-11-18T16:39:13Z",
        "body": "This doesn't look like Backbone. Try the mailing list or the IRC channel for questions like this.\n"
      },
      {
        "user": "metaory",
        "created_at": "2014-11-18T17:25:38Z",
        "body": "is the issue related to XHR limitation?\n\nbackbone model.save() with many nested elements, 1k+ \n"
      }
    ]
  },
  {
    "number": 3372,
    "title": "documentFragment instead of creareElement",
    "created_at": "2014-11-06T20:12:58Z",
    "closed_at": "2014-11-12T21:56:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3372",
    "body": "why you do not create documentFragment instead of default 'div' element if property 'el' is not set? I think it would be very usefull for views that uses templates\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3372/comments",
    "author": "0xff00ff",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-11-12T21:56:07Z",
        "body": "Because a Backbone view is defined as an element, not as potentially a fragment of multiple elements.\n\nIf it were defined to be a fragment, instead, then `className` wouldn't make any sense. `view.el` wouldn't make any sense. `view.attributes` wouldn't make any sense. And most importantly, all of the event delegation machinery would break.\n"
      }
    ]
  },
  {
    "number": 3370,
    "title": "Incoherence: different sort behaviour when setting models and collections",
    "created_at": "2014-11-05T13:11:43Z",
    "closed_at": "2014-11-05T19:37:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3370",
    "body": "Let's assume a collection is sorted by an attribute called `name`. In other words, its `comparator` is `'name'`. \n\n_Model behaviour_: If we take one of the collection's models and `set` the `name` attribute, the collection will not be re-sorted and no `sort` event will be triggered. This is well explained in the documentation.\n\n_Collection behaviour_: Now, if we take the collection as a whole and call `set` on it, passing it the existing model but with a modified `name`, it will indeed re-sort the collection and trigger a `sort` event; refer to the following line:\n\n``` javascript\nif (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n```\n\nIs this intended? IMHO, it would be better if either both of them caused a re-sort, or none of them.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3370/comments",
    "author": "guigrpa",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-11-05T19:37:29Z",
        "body": "Yes, this is intended.\n"
      },
      {
        "user": "guigrpa",
        "created_at": "2014-11-06T15:03:00Z",
        "body": "@jashkenas And why, may I ask?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-11-06T16:32:09Z",
        "body": "Because models entering and exiting a collection are supposed to be sorted into their proper place. `Collection.set` adds and removes models from a collection.\n\nHowever, once inside a collection, the collection can't know — in the general case — when a model has changed properties that need to be resorted. `comparator` can be an arbitrary function. So if your application is the type where a particular models sort properties _can_ change, then you'll want to tell their collection to re-sort itself at the appropriate time.\n"
      },
      {
        "user": "guigrpa",
        "created_at": "2015-01-26T07:47:59Z",
        "body": "Thanks @jashkenas! It's all clear now\n"
      }
    ]
  },
  {
    "number": 3355,
    "title": "Why does Collection.create call save after adding a non-unique model?",
    "created_at": "2014-10-22T18:46:01Z",
    "closed_at": "2014-10-22T19:17:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3355",
    "body": "```\nvar MyModel = Backbone.Model.extend({\n    defaults: {\n        id: null\n    }\n});\n\nvar MyCollection = Backbone.Collection.extend({\n    url: '/foo',\n    model: MyModel\n});\n\nvar myCollection = new MyCollection();\nmyCollection.create({ id: 1 });\nmyCollection.create({ id: 1 });\n```\n\nIn the above example, two PUT requests are sent to the given URL. This seems odd to me because the second 'add' is a no-op and I did not pass 'wait: true'.\n\nIs this intended?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3355/comments",
    "author": "MeoMix",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-10-22T19:17:36Z",
        "body": "It's not odd. You're trying to create a `/foo/1` resource ... and then trying to create another one.\n\nBackbone.js does not have psychic powers. It doesn't know if `/foo/1` still exists on the server, or if it has been deleted, or if its time has expired, or if it's an ephemeral non REST-ful resource, or whatever other crazy scheme you might have cooked up.\n"
      }
    ]
  },
  {
    "number": 3352,
    "title": "Using pushState and hashes together",
    "created_at": "2014-10-21T21:34:06Z",
    "closed_at": "2014-10-21T21:47:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3352",
    "body": "According current implementation we can use or pushState or hashes for routing. But what if we need to have direct routes and hashes routes?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3352/comments",
    "author": "romamatusevich",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-10-21T21:47:41Z",
        "body": "Please try the mailing list, StackOverflow, or the IRC channel for questions. Github issues are for maintaining the framework only. \n"
      }
    ]
  },
  {
    "number": 3321,
    "title": "Is this project still alive?",
    "created_at": "2014-09-25T09:32:42Z",
    "closed_at": "2014-09-25T12:27:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3321",
    "body": "Many issues are getting ignored. Nothing new seems to be getting done recently. Is this project still alive?\n\nI invested a lot of time in learning this framework, and it seems to me it's not receiving much attention from its developers lately.\n\nMaybe just considering some PRs with a little less cynicism could bring some life in here.\n\nCheers.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3321/comments",
    "author": "The11thPlague",
    "comments": [
      {
        "user": "Florian-R",
        "created_at": "2014-09-25T09:45:25Z",
        "body": "#3302\n"
      },
      {
        "user": "magalhas",
        "created_at": "2014-09-25T09:49:23Z",
        "body": "This project is obviously alive (just follow it) and it's up to you to give it even more life :)\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-09-25T12:27:13Z",
        "body": "It's alive, but also fairly \"stable\". If there's a specific example of something new that you think needs to get done — propose it. Open source, right?\n"
      }
    ]
  },
  {
    "number": 3293,
    "title": "Are backbone events \"synchronous\" or \"asynchronous\"?",
    "created_at": "2014-09-04T17:49:37Z",
    "closed_at": "2014-09-04T18:17:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3293",
    "body": "I realize that in the browser, Javascript runs in a single thread and that's that.\n\nNevertheless, I have to ask:\n\n```\nvar m = new Backbone.Model();\n\nm.on(\"change\", function() {\n    console.log('callback #1');\n});\n\nm.on(\"change\", function() {\n    console.log('callback #2');\n});\n\nm.on(\"change\", function() {\n    console.log('callback #3');\n});\n\nm.set('foo','bar');\n```\n\nIs the order of those callbacks garaunteed? Is that something I can rely on? Looking at triggerEvents(), I believe that this is the case but I'd like some confirmation. Thank you.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3293/comments",
    "author": "alex-dow",
    "comments": [
      {
        "user": "megawac",
        "created_at": "2014-09-04T17:55:18Z",
        "body": "Synchronous. The result will always be the same assuming `console` exists in your environment\n"
      }
    ]
  },
  {
    "number": 3271,
    "title": "backbone prototype events",
    "created_at": "2014-08-21T06:05:12Z",
    "closed_at": "2014-08-21T18:30:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3271",
    "body": "var GUI = Backbone.View.extend({\n    events:{\n          'click': clickHandler\n    }\n});\n\nvar GUI =  GUI.extend({\n    events:{\n        'click': deleteHandler\n    }\n });\nI want to use prototype to inheritance of the incident, how to use the prototype in Backbone?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3271/comments",
    "author": "xiangbai",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-08-21T18:30:54Z",
        "body": "Please use StackOverflow, the mailing list, or the IRC channel for questions. Github issues are for maintaining the framework only.\n"
      }
    ]
  },
  {
    "number": 3269,
    "title": "Backbone.js in IE compatibility view",
    "created_at": "2014-08-20T10:28:52Z",
    "closed_at": "2014-08-20T16:26:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3269",
    "body": "Will the backbone api works under IE compatibility view ? Is there list of browsers that are supported by backbone.js ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3269/comments",
    "author": "Karthik-Nagendiran",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-08-20T16:26:41Z",
        "body": "Backbone should work in every commonly-used browser. If you find one where it isn't working ... file a bug.\n"
      }
    ]
  },
  {
    "number": 3257,
    "title": "How to fire an error when overriding the \"parse\" method",
    "created_at": "2014-08-05T21:11:06Z",
    "closed_at": "2014-08-12T20:24:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3257",
    "body": "I am trying to throw on error when the server response I receive within the `parse()` method is not valid.\n\nI tried setting the `error` key in the options parameter to `false` or call the `options.xhr.error(this, resp, options);` method within my overidden `parse()` method of my model, but none of them causing the `error` callback of the `fetch()` method to trigger.\n\nAny clue?\n\nHere the actual example:\n\n``` javascript\nBackbone.Model.extend({\n\n  parse: function parse(resp, options){\n\n    if(resp && resp.meta.success){\n      return resp.response;\n    }else{\n      //Throw an error which cause the \"error\" callback of the fetch method to get triggered\n    }\n  }\n});\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3257/comments",
    "author": "roundrobin",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-08-12T20:24:05Z",
        "body": "The error callback is for an actual network connection error or server error — it's not for local errors. There might be a way to trigger it, but `parse` isn't the place to do so. Try `validate`, instead.\n"
      },
      {
        "user": "jamiebuilds",
        "created_at": "2014-08-12T23:06:33Z",
        "body": "@jashkenas I wouldn't describe this as a local error. If I understand correctly, this is for APIs that will give a valid response with json even when there's some kind of error:\n\n``` js\n{ \"status\": { \"code\": 500, \"text\": \"Internal Server Error\" } }\n```\n\nThis particular example looks like it's from Django Tastypie or something similar, where all responses are like this:\n\n``` js\n{\n  \"meta\": { ... } // information related to the resource/response\n  \"objects\": [...] // resource data \n}\n```\n\nWhich is why `parse` is being used.\n\nHowever, I think that it would make sense in this case to overwrite Backbone.sync to error when you get a json response containing a server error.\n\nThen again, I might be interpreting this wrong... @roundrobin?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-08-13T00:20:43Z",
        "body": "That doesn't seem correct. The API should -- even when returning an error JSON object -- return it with a 500 error code. That will indeed trigger the error callback.\n"
      },
      {
        "user": "roundrobin",
        "created_at": "2014-08-13T00:22:31Z",
        "body": "@jashkenas  yeah true, but sometimes you are not in control over that.\n"
      },
      {
        "user": "roundrobin",
        "created_at": "2014-08-13T00:22:53Z",
        "body": "@thejameskyle no, you got it right.\n"
      },
      {
        "user": "erikhazzard",
        "created_at": "2014-08-13T21:57:05Z",
        "body": "I have the same problem - all API calls are go through a CDN, but the CDN only properly handles the \"200\" status code. If something fails, I can't set the status code to be anything other than 200 as the CDN won't properly handle it. \nI can also imagine other cases where sending over a 200 status code is acceptable (e.g., if something happens and an \"internal server error\" code isn't explicit enough).\n"
      }
    ]
  },
  {
    "number": 3230,
    "title": "events selector by name or complex id names",
    "created_at": "2014-07-21T10:36:07Z",
    "closed_at": "2014-07-21T10:41:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3230",
    "body": "I have an input with this complex name:\n\n``` html\n<input ... name=\"bic_voucher_entitybundle_company[name]\" id=\"bic_voucher_entitybundle_company[name]\" >\n```\n\nThe problem comes when I want to assign this name or id to an event:\n\n``` js\n        events: {\n            'click #bic_voucher_entitybundle_company[name]': 'limitLength',\n            'click [name=\"bic_voucher_entitybundle_company[name]\"]': 'limitLength',\n```\n\nBoth do not work.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3230/comments",
    "author": "bichotll",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2014-07-21T10:41:47Z",
        "body": "Hi @bichotll!  I believe you'll need to escape the inner brackets with slashes.\n\n``` js\nevents: {\n  'click #bic_voucher_entitybundle_company\\\\[name\\\\]': 'limitLength',\n  'click [name=\"bic_voucher_entitybundle_company\\\\[name\\\\]\"]': 'limitLength'\n}\n```\n"
      },
      {
        "user": "bichotll",
        "created_at": "2014-07-21T12:03:15Z",
        "body": "Great. Thanks for it ;)\n"
      }
    ]
  },
  {
    "number": 3182,
    "title": "Modular routing dummy route workaround fix requested",
    "created_at": "2014-06-06T16:47:26Z",
    "closed_at": "2014-06-17T20:55:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3182",
    "body": "In my current project we're building a large-scale modular web app, and we've setup a modularized routing structure. We encountered that the handoff between our app-level (master) controller and our modular controller was not working properly, and in reviewing several solutions online, we found that calling a dummy route from the modular router solved the issue. However, why is this dummy route call required? Is there a permanent fix to this workaround?\n\nFlow:\napp/main.js --> app/master-router.js --> module1/main.js --> module1/module1-router.js\n\n```\n/**\n* Module1 main: /modules/module1/main.js\n**/\ndefine([\n    'modules/module1/routes/module1-router',\n],function (DashboardRouter, DashboardController) {\n    'use strict';\n\n    var router = new ModuleRouter ();\n\n    //dummy route call is a known workaround to get modular routers to work in Backbone\n    router.navigate('module1/dummy', {replace: true});  //Had to include replace:true to avoid it getting into the history, but it does anyway, will open separate issue for that\n});\n\n/**\n* Module1 router: /modules/module1/routes/module1-router.js\n**/\nBackbone.Router.Extend({\n   routes:{\n       'module/home' : 'home'\n   },\n   home: function(){\n      //Some action here\n   }\n});\n\n/**\n* Master router: /app/scripts/routes/master-router.js\n**/\nBackbone.Router.Extend({\n   routes:{\n       'module/:fragment' : 'module'\n   },\n   module: function(fragment){\n      //We've setup a path on requireJS that points 'modules' to its appropriate folder, \n      //so we don't have to specify the full path here\n      require(['modules/module1/main'], function () {\n          Backbone.history.navigate(fragment, true);\n      });\n   }\n);\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3182/comments",
    "author": "egpierro",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2014-06-06T19:18:38Z",
        "body": "Hi @egpierro!  I'm having some trouble following exactly what you want to do here.  Would you mind posting an example?\n\nThat said, I usually recommend using only one router and calling `#route` from other modules if you want to break up your routes.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-06-17T20:55:44Z",
        "body": "Like I said above, I wouldn't recommend using multiple router instances at the same time.  If you want to split up your routing modules (which I recommend for large routers), use the pattern below with your favorite bundler.\n\n``` js\n// routers/foo.js\nmodule.exports = {\n  foo: function(){ ... }\n};\n\n// routers/bar.js\nmodule.exports = {\n  bar: function(){ ... }\n};\n\n// routers/router.js\nmodule.exports = Backbone.Router.extend({\n  routes: _.extend({\n    baz: function(){ },\n  }, require('./foo'), require('./bar'))\n});\n\n```\n\nI'm gonna close this for now but if you've got a failing test case please post it and I'll be happy to take a look.\n"
      }
    ]
  },
  {
    "number": 3179,
    "title": "How could I manage all the template files?",
    "created_at": "2014-06-05T09:04:29Z",
    "closed_at": "2014-06-05T15:17:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3179",
    "body": "```\nCould I put the templates in different folders for maintainance and is there any build tool like grunt which can compress all the template files into one? If I put all the template script tags in index.html, it'll be a mess! Thank you~ :)\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3179/comments",
    "author": "hwoarangzk",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2014-06-05T15:17:37Z",
        "body": "Hi @hwoarangzk!  There are certainly tools for combining your templates and scripts.  With `_.template` it's fairly easy to do from a node environment.\n\nThat said, this sort of question is probably better suited for Stack Overflow or the irc channel (`#documentcloud` on freenode).  Github issues are only for questions regarding development of Backbone itself.\n"
      },
      {
        "user": "hwoarangzk",
        "created_at": "2014-06-06T01:16:26Z",
        "body": "Sorry for putting question here, but due to the network policy, I can't sign up on stack overflow, sorry :(\n"
      }
    ]
  },
  {
    "number": 3166,
    "title": "Backbone's View constructor is adding a call to this.delegateEvents in the min version and the dev version is not",
    "created_at": "2014-05-28T03:34:11Z",
    "closed_at": "2014-05-28T13:43:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3166",
    "body": "```\nvar View = Backbone.View = function(options) {\n        this.cid = _.uniqueId('view');\n        options || (options = {});\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n};\n\nvar w = e.View = function (t) {\n        this.cid = i.uniqueId(\"view\");\n        t || (t = {});\n        i.extend(this, i.pick(t, E));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents()\n};\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3166/comments",
    "author": "markwise",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2014-05-28T03:45:41Z",
        "body": "Yes, this change was added in #3060 in master but is not yet on the current release (and therefore not in the minified version). Are there any  issues you see with this change in behavior?\n"
      },
      {
        "user": "markwise",
        "created_at": "2014-05-28T04:03:56Z",
        "body": "I recently inherited a codebase that is using views as abstract classes.\n\nFor example:\n\n``` js\nvar AbstractView = Backbone.View.extend({\n    initialize: function () {\n        _.extend(self.events || (self.events = {}), {\n            'click .element': 'handler'\n        }\n    }\n});\n\nvar MyView = AbstractView.extend({\n    initialize: function () {\n        AbstractView.prototype.initialize.apply(this);    \n    }\n});\n```\n\nThe AbstractView events get attached with the min version, but not the dev version.\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-05-28T05:03:14Z",
        "body": "Better to set those in an `events` method on the AbstractView:\n\n``` js\nvar AbstractView = Backbone.View.extend({\n    events: function() {\n        return {\n            'click .element': 'handler'\n        };\n    }\n});\n\nvar MyView = AbstractView.extend({\n    events: function() {\n      return _.extend(AbstractView.prototype.events.call(this), {\n        ...\n      });\n    }\n});\n```\n\nLooks even nicer in CoffeeScript:\n\n``` coffeescript\nclass AbstractView extends Backbone.View\n  events: ->\n    'click .element': 'handler'\n\nclass MyView extends AbstractView\n  events: ->\n    _.extend super, \n      'click .otherelement': 'other handler'\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-05-28T13:43:17Z",
        "body": "Yep, @akre54's example above is a good strategy.\n"
      },
      {
        "user": "markwise",
        "created_at": "2014-05-28T15:43:41Z",
        "body": "I agree that the above solution is a better way to handle attaching events in an abstract view. However, I think you guys are missing the point here. The dev and min version should be the same and they are not. This begs the question of how many other things are different between the two. This is indeed a bug and can result in different behavior based on my example above despite the suggested work around.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-05-28T15:45:07Z",
        "body": "> The dev and min version should be the same and they are not.\n\nThe minified file is only updated for releases to keep commit noise to a minimum.\n"
      },
      {
        "user": "markwise",
        "created_at": "2014-05-28T16:10:37Z",
        "body": "Can I assume the dev version is correct and this.delegateEvents was removed from the  Backbone.View constructor?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-05-28T16:30:43Z",
        "body": "@markwise That's right.  `#delegateEvents` is already called in `#setElement` so we found it redundant to call it twice.  Sorry about the breakage.\n\nIf you need to call it anyway you can always add it in an override of the constructor while you migrate.\n"
      },
      {
        "user": "markwise",
        "created_at": "2014-05-28T17:14:28Z",
        "body": "Right on, thanks.\n"
      }
    ]
  },
  {
    "number": 3157,
    "title": "Collection.set() takes a long amount of time for high number of models",
    "created_at": "2014-05-21T12:06:37Z",
    "closed_at": "2014-05-21T15:11:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3157",
    "body": "I'm working on a Cordova based mobile app, utilising Backbone (employers choice, not personal). We have a collection that could contain up to 50k+ models. We stored these in WebSQL using a Backbone.sync adapter, and when we load the attributes from WebSQL the `collection.set` function takes a long amount of time to process on older mobile devices.\n\nIf there anyway to improve this function, or simply quickly add the models to the collection?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3157/comments",
    "author": "tombell",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2014-05-21T15:07:49Z",
        "body": "You're probably better off keeping 50k of anything in a simpler data structure and then creating full-blown Models/Collections for whatever subset you're working with at the time. `set` probably _could_ get a little faster, but for all the functionality Models/Collections provide they aren't designed to be super performant with that many records.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-05-21T15:11:23Z",
        "body": "It's supposed to be as fast as we can possibly make it — so if you have a specific section of code you think needs looking at, or a specific patch you'd like to suggest, feel free to suggest it. See previous tickets.\n\nThat said, when you really want to get down to the metal in JavaScript — you have to stop using external libraries, and write things out by hand with reusable arrays full of strings and integers and for loops.\n"
      }
    ]
  },
  {
    "number": 3134,
    "title": "Collection.model not called with collection as context",
    "created_at": "2014-04-24T15:45:52Z",
    "closed_at": "2014-05-04T14:16:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3134",
    "body": "The issue can be demonstrated with the following code:\n\n```\nvar modelContext;\n\nvar C = Backbone.Collection.extend({\n    model: function() {\n        modelContext = this;\n        return new Backbone.Model();\n    }\n});\n\nvar c = new C();\n\nc.add({foo:\"bar\"});\n\nconsole.log(\"The model function is not called in the collection context\", c===modelContext);\n```\n\nThe console.log will be false because the function is not called with the collection object as context.\n\nSeems to be a problem with Collection._prepareModel, it always calls `new this.model()`\n\nI was beating my head on this for a while today when I wanted to access a collection attribute in the model function. Seems like `_prepareModel` should somehow check if the model is a constructor vs a regular fn (not sure if that is possible) or the docs should be updated to be clear about what context this function gets called in. Note, you can still access the collection in the `model` function, just as `options.collection` rather than `this`.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3134/comments",
    "author": "scottaj",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2014-05-04T00:14:47Z",
        "body": "Also, when using model function as a factory, and if the key is not known by the factory it would be nice if the _prepareModel handled undefined return and cancelled model creation.\n\n```\nvar C = Backbone.Collection.extend({\n   model: function() {\n      if (knownKey1) {\n         return new Key1Model(attrs, options);\n      } else if (knownKey2) {\n         return new Key2Model(attrs, options);\n      }\n      else {\n         return undefined;\n      }\n});\n```\n\nedit:\nfor me this kind of patch is suffisent\n\n```\n _prepareModel: function(attrs, options) {\n      if (attrs instanceof Model) return attrs;\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var creator = this.model(attrs, options);\n      if (_.isUndefined(creator)) {return false;}\n      var model = new creator.constructor(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n```\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-05-04T14:16:08Z",
        "body": "You can access the `collection` that's creating the model via `options.collection`, no need to mess with the context.\n\n``` js\nmodel: function (attrs, options) {\n  // options.collection.whatever\n},\n```\n"
      },
      {
        "user": "scottaj",
        "created_at": "2014-05-04T15:20:56Z",
        "body": "I'm aware that you can access the collection that way, as I stated in my original post. My point was that this behavior is not obvious or documented. I would assume, without having read the source code, that defining model as a function would have the same context as any other function on the collection class.\n\nWould you be at least open to a PR that attempts to clarify this with documentation?\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-05-04T15:28:36Z",
        "body": "> Would you be at least open to a PR that attempts to clarify this with documentation?\n\nFeel free, it'll be up to @jashkenas to decide whether the extra documentation is appropriate.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-05-05T13:46:08Z",
        "body": "> Would you be at least open to a PR that attempts to clarify this with documentation?\n\nSure.\n"
      }
    ]
  },
  {
    "number": 3121,
    "title": "NuGet Package Dependancy Problem",
    "created_at": "2014-04-15T00:59:49Z",
    "closed_at": "2014-04-15T15:59:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3121",
    "body": "Hi Jeremy,\n\nThe [Backbone.js v1.1.0](www.nuget.org/packages/Backbone.js/1.1.0) [nuget.org] package still depends on underscore.js > 1.3.1. Could you please update this for people using NuGet.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3121/comments",
    "author": "ichpuchtli",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-04-15T15:59:58Z",
        "body": "We don't control anything about what NuGet has. You'd do better asking them, it seems.\n"
      }
    ]
  },
  {
    "number": 3119,
    "title": "Complement for parse",
    "created_at": "2014-04-11T08:26:56Z",
    "closed_at": "2014-04-11T13:40:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3119",
    "body": "Hello,\n\nSome of my models have timestamp fields that the server sends/receives as UTC. In my app though I like to work with Moment.js objects.\n\nWhen I receive a response from the server, I use `parse` to transform the UTC string to an object. However, when I send data there's no complementing (`export`?) function I can use.\n\nWould it make sense to add such a function that, similar to `parse`, would be a no-op, but otherwise will let you process the attributes before they're sent to the server...?\n\n(if not, could anyone point me in a better direction? :)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3119/comments",
    "author": "elad",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2014-04-11T13:40:13Z",
        "body": "`toJSON` is the complement of `parse`.\n\n``` js\ntoJSON: function () {\n  var attrs = _.clone(this.attributes);\n  attrs.myDate = attrs.myDate.toUTC(); // or whatever you want\n  return attrs;\n}\n```\n"
      }
    ]
  },
  {
    "number": 3105,
    "title": "Backbone.Model.save not calling success/error functions",
    "created_at": "2014-04-02T20:37:50Z",
    "closed_at": "2014-04-02T20:55:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3105",
    "body": "Looks like `(_.isObject(serverAttrs) && !model.set(serverAttrs, options))` is true because our backend is not passing the object back and this causes the success AND error method to never execute.  \n\n```\n  var success = options.success;\n  options.success = function(resp) {\n    // Ensure attributes are restored during synchronous saves.\n    model.attributes = attributes;\n    var serverAttrs = model.parse(resp, options);\n    if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n    if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n      return false;\n    }\n    if (success) success(model, resp, options);\n    model.trigger('sync', model, resp, options);\n  };\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3105/comments",
    "author": "henrytseng",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-04-02T20:55:39Z",
        "body": "Hey @henrytseng, `model.save` expects the response to be a JSON representation of your model, passed first through `parse`. If your API doesn't implement this form of RESTfulness, you might just return an empty object from `parse`.\n\nYou will have better luck with this question on the `#documentcloud` IRC channel or the mailing list. These issues are for development of Backbone only.\n"
      }
    ]
  },
  {
    "number": 3099,
    "title": "Router fails to load optional query param",
    "created_at": "2014-03-31T13:39:12Z",
    "closed_at": "2014-03-31T14:56:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3099",
    "body": "I tried with an url like this-\npath/:pathParam1?queryParam1=:q1&queryParam2=:q2(&queryParam3=:q3)\n\nIt appends the the last param (q3), if supplied with q2.\n\nmodifying it like -\npath/:pathParam1?queryParam1=:q1&queryParam2=:q2&(queryParam3=:q3)\nsolves this issue but when the optional parameter is absent, the url has to be like \npath/p1?queryParam1=qp1&queryParam2=qp2&\n\n(You have to supply the dangling '&', which is not quite desirable.)\n\nIs there any particular reason for which you have not considered to add '&' as another delimiter in the regular expression('([^/?]+)') replacing  'namedParam'?\n\nLet me know if I'm missing something.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3099/comments",
    "author": "sankalan",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2014-03-31T14:56:50Z",
        "body": "Hi @sankalan!  Yes, there are reasons for not adding `&` as a delimiter.  The main problem would be that query parameters are not generally guaranteed to be in a specific order and so matching them with a regular expression is not sufficient.\n\nWhat version of Backbone are you using?  Since version 1.1.1, query params have been available for custom parsing, but in a slightly different form.  In your case, you could use something like the following and just parse the query string however is best for you.\n\n``` js\nvar Router = Backbone.Router.extend({\n  routes: {\n    'path/:param': function(param, search) {\n      console.log(param); // p1\n      console.log(search); // foo=bar&baz=bam&boom=1\n    }\n  }\n});\n```\n\nHope that helps!  :smiley:\n"
      }
    ]
  },
  {
    "number": 3097,
    "title": "Any reason to ignore the minified files in bower.json?",
    "created_at": "2014-03-28T23:18:42Z",
    "closed_at": "2014-04-07T18:52:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3097",
    "body": "According to the bower.json spec, recommends to not include the minified version in the \"main\" attribute.  But I'm wondering if there is any reason to ignore it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3097/comments",
    "author": "damianignacio",
    "comments": [
      {
        "user": "wyuenho",
        "created_at": "2014-04-07T16:56:21Z",
        "body": "It speeds up bower install and make your package look clean? You'll most likely concat and minify your own JS bundle anyway, why include the minified version?\n\nI think a better question will be, how come files like component.json and CNAME aren't ignored?\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-04-07T18:46:09Z",
        "body": "I think the speed issue is probably negligible (after all, the whole point of the min file is that it's faster to download). That said I would assume that anyone using bower is probably comfortable with build tools and if you're at the position that you _really_ need the download speed boost that a minified file gives you, you probably know how to run other build tools yourself with the rest of your application. \n"
      },
      {
        "user": "akre54",
        "created_at": "2014-04-07T18:49:36Z",
        "body": "> I think a better question will be, how come files like component.json and CNAME aren't ignored?\n\nGood call. #3111\n"
      },
      {
        "user": "franz-josef-kaiser",
        "created_at": "2015-08-24T10:21:29Z",
        "body": "We are currently in the situation where we build a click dummy first (plain HTML) and then build a WordPress theme from it. The clickdummy has it's asset pipelines, but WordPress ships with its own versions of _Backbone_ and _Underscore_. For that reason we can't add _Backbone_ and _Underscore_ (and _jQuery_ ) to our asset pipelines. It still would be nice to not have to maintain separate pipelines for those libraries and instead have `.min.js` files shipped _along_ the unminified files. Any chance that this behavior changes?\n"
      }
    ]
  },
  {
    "number": 3081,
    "title": "backbone local storage",
    "created_at": "2014-03-20T13:02:54Z",
    "closed_at": "2014-03-20T15:10:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3081",
    "body": "hello, As presently i'm working on backbonejs, i want to know is there any method to save data locally or temporarily, i mean, no need to send data to server,..but i dont wanna use backbone.localstorage.js as it completely removes the option to store data into the server,..i want to use both of them i.e storing locally and sending it to server,..as per my need,..how can i do this,...please help me,..\n\n```\n                            Thanks in advance\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3081/comments",
    "author": "naseerhussain",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-03-20T15:10:06Z",
        "body": "Hey @naseerhussain! You might try the mailing list, StackOverflow or the IRC channel for questions like this. GitHub issues are only used to talk about the framework itself. \n"
      }
    ]
  },
  {
    "number": 3080,
    "title": "Questions about generateId",
    "created_at": "2014-03-19T21:52:54Z",
    "closed_at": "2014-04-23T18:11:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3080",
    "body": "Alright, so I was admittedly in favor of `generateId` mainly because it could be used for things like composite keys, and allow for different models to be grouped together into one collection even if they had conflicting `idAttribute`'s.\n\nBut now that I'm playing around with it in practice, it feels like half the solution... since it actually sets the `model.id` attribute and isn't just used for collection purposes, it breaks the \"url\" construction magic, unless you want your \"generated\" id to act as your restful endpoint identifier. And if it is intended to be used as the restful endpoint identifier, you'd presumably be sending that as the id from the server in the first place.\n\n@caseywebdev just wanted to get your opinions on this, is this something you've run into in the situations you've used it in? Alternatively, would it make sense for this to be defined as a method on the collection rather than the model?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3080/comments",
    "author": "tgriesser",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-03-19T21:58:28Z",
        "body": "Uuugh...\n\nShould we remove it? At least it hasn't shipped yet...\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-03-19T22:01:54Z",
        "body": "> it breaks the \"url\" construction magic\n\nIf you're using `generateId`, you are already doing something that would break the default url construction magic so I don't see this as really relevant to the change.\n\n> you'd presumably be sending that as the id from the server in the first place\n\nI don't think a server response should have to conform to Backbone's method of uniquely identifying models. I want my model's `attributes` hash to be a pristine copy from the server. I don't want to mess with it, adding fake keys and what not just so it can be stored as a proper set in a Backbone.Collection.\n\n> is this something you've run into in the situations you've used it in\n\nI haven't run into any issues yet, but I haven't been using it for terribly long either.\n\n> Alternatively, would it make sense for this to be defined as a method on the collection rather than the model?\n\nI'd be curious to see an implementation of that, but I'm not sure if the collection is really a better place for it or not.\n\n> Uuugh...\n> \n> Should we remove it? At least it hasn't shipped yet...\n\nI'm not seeing the issue here. If anything `generateId` gives Backbone users more flexibility. Trying to do what `generateId` does now without it feels _very_ hacky.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2014-03-19T22:24:48Z",
        "body": "> I don't think a server response should have to conform to Backbone's method of uniquely identifying models.\n\nYeah, agreed, and that's why I thought it would be a nice potential workaround to the strict \"one-id-per-collection\" rule that is enforced on collections.\n\n> If you're using generateId, you are already doing something that would break the default url construction magic so I don't see this as really relevant to the change.\n\nI'm not sure it should though... let's say I have 2 different collections and I want to combine the models into a third collection ad-hoc for the purposes of sorting, display, etc. \n\nAll that's needed is a guarantee the models won't have conflicting id's from the collection's viewpoint. \n\nIt doesn't seem like this should be the model's responsibility to come up with a unique id scheme just for the temporary collection.\n\n> > Uuugh...\n> > \n> > Should we remove it? At least it hasn't shipped yet...\n> \n> I'm not seeing the issue here. If anything generateId gives Backbone users more flexibility. Trying to do what generateId does now without it feels very hacky.\n\nI'm not sure, I just wanted to raise a point to think about it a bit more before it does ship after noticing it can't be easily used without breaking the restful niceties.\n\n> I don't want to mess with it, adding fake keys and what not just so it can be stored as a proper set in a Backbone.Collection.\n\nAgreed, taking this off the model and putting it on the collection could presumably be used to the same effect you're intending, and without confusing the logic around `model.set`, `generate-id`, etc.\n\nI can put something together in a bit.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-03-19T22:31:52Z",
        "body": "> I'm not sure it should though... let's say I have 2 different collections and I want to combine the models into a third collection ad-hoc for the purposes of sorting, display, etc.\n> \n> All that's needed is a guarantee the models won't have conflicting id's from the collection's viewpoint.\n> \n> It doesn't seem like this should be the model's responsibility to come up with a unique id scheme just for the temporary collection.\n\nThat's definitely a good point and a good argument toward `Collection#generateId`.\n\n> I can put something together in a bit.\n\nI'm curious to see what you come up with. Seems like the collection may have to listen to the `change` event to keep `_byId` up-to-date? I'll let you futz with that :wink:\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-03-20T13:04:30Z",
        "body": "Thought about it more and there is probably a way for `Model::generateId` and some sort of `Collection::generateId` to coexist. That way a user can have composite keys at the model level when their model truly has a composite/nested key and at the collection level when they have a group of simple but different model types.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-04-23T15:14:26Z",
        "body": "One unexpected consequence of this addition I found this morning:\n\n``` js\nvar model = new Backbone.Model;\nmodel.id = 1;\nmodel.set({x: 2});\nmodel.id; // undefined\n```\n\nI agree that this seems like a half solution.  I don't think minting a new event gains us anything and I'm not convinced of the need for and benefit of composite keys in Backbone.  At best, it's support and documentation is lacking.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-04-23T15:16:19Z",
        "body": "> I agree that this seems like a half solution. \n\nLet's back it out of master for the time being...\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-04-23T15:16:34Z",
        "body": "Why would you set `id` directly? That's an anti-pattern....\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-04-23T15:19:12Z",
        "body": "Perhaps, but it was included in our documentation until this morning (#3130).\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-04-23T15:22:01Z",
        "body": "> I'm not convinced of the need for and benefit of composite keys in Backbone.\n\nI don't think Backbone can't be un-opinionated and force single-column keys at the same time. If you really want to revert this, I can try to turn it into a plugin but my gut instinct is it's going to be quite invasive and not trivial to implement.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-04-23T15:36:35Z",
        "body": "Please revert it for now ... and we'll keep talking about a way to implement it that solves the problem more completely.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-04-23T17:10:36Z",
        "body": "Revert PR: #3132\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2014-04-23T18:11:16Z",
        "body": "`Model#generateId` has been reverted. Closing for now, `Collection#generateId` discussion should be continued in #3133.\n"
      }
    ]
  },
  {
    "number": 3059,
    "title": "listenTo",
    "created_at": "2014-03-13T03:20:54Z",
    "closed_at": "2014-03-13T03:26:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3059",
    "body": "Could listenTo be applied to window.location.pathname?\n\nI know it can be applied to a model and other objects.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3059/comments",
    "author": "MarcusSorealheis",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2014-03-13T03:26:56Z",
        "body": "The `Events` object can be extended onto any JavaScript object. It doesn't not do dirty checking for changes as I suspect you're looking for, but merely provide the facilities to trigger and listen for events on that object. It would be up to you to establish your own \"has changed\" event in this case.\n"
      },
      {
        "user": "MarcusSorealheis",
        "created_at": "2014-03-13T04:58:16Z",
        "body": "Thanks for the swift response Casey! I thought it should work but I was running into a few problems earlier. Our error was probably not Backbone related then.\n"
      }
    ]
  },
  {
    "number": 3050,
    "title": "Control over PUT vs POST for models with supplied IDs",
    "created_at": "2014-03-07T14:51:55Z",
    "closed_at": "2014-03-07T15:37:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3050",
    "body": "``` javascript\n\nvar UserModel = Backbone.Model.extend({\n    idAttribute: \"username\",\n    urlRoot: \"/userapi\"\n});\n\nvar newUser = new UserModel();\nnewUser.set('username','v0idnull');\nnewUser.save();\n```\n\nI can not create a new user with this code.\n\nBackbone makes the assumption that whatever API you are calling, the unique identifier for resource you're manipulating is generated on creation. But this is not always the case. In this above example, the unique identifier is the username, and so the ID is provided.\n\nBut that code will always try to do a PUT request on /userapi/v0idnull and it will always fail with a 404.\n\nI think there are many different ways of solving this, from providing create() and update() methods on the model (that save() can use), to changing\n\n``` javascript\nmethod = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n```\n\nto exposing the method through the options hash of the save() method:\n\n``` javascript\nmethod = options.method ? options.method : (this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n```\n\nWith a change like this, I can do one of two things:\n\nMy application is aware of when I'm creating a user and when I'm updating a user and call the appropriate method / set the appropriate option\n\nOR\n\nI call save normally which tries a PUT, gets a 404, and an error handler tries save again, forcing a POST.\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3050/comments",
    "author": "alex-dow",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-03-07T15:37:51Z",
        "body": "> But that code will always try to do a PUT request on /userapi/v0idnull\n\nThat's correct. PUT vs POST isn't about create vs update. If you know the URL where your resource should belong, it's as simple as PUT-ing a representation of it there.\n\nFeel free to override sync if you'd like to do something different.\n"
      },
      {
        "user": "magalhas",
        "created_at": "2014-03-07T15:57:12Z",
        "body": "Or just override the isNew method if needed.\n"
      },
      {
        "user": "alex-dow",
        "created_at": "2014-03-07T16:55:52Z",
        "body": "you guys are indeed correct. Sorry for causing some noise ;)\n"
      }
    ]
  },
  {
    "number": 3033,
    "title": "Accessing view options during `el` construction",
    "created_at": "2014-03-03T14:07:02Z",
    "closed_at": "2014-03-03T14:25:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3033",
    "body": "Hi,\n\n`View#options` has been removed since Backbone 1.1.0, and the usual recommandation is to set it ourselves if we need to inside the initialize constructor. That's what we're doing currently.\n\nHowever, we have a few views with this kind of pattern :\n\n``` js\nPopupView.extend( {\n\n    el : function ( ) {\n        return Templates.get( 'popups/upload/settings', {\n            filename : this.options.filename\n        } );\n    }\n\n} );\n```\n\nAs you can see, the root element constructor is currently requiring the options to be functional. Since the initialize constructor is only called after creating the node, it fails.\n\nFor what it worth, this error can be somewhat fixed by overloading the entire `View` constructor :\n\n``` js\nvar View = ( function ( ) {\n\n    var View = function ( options ) {\n        this.options = options;\n        Backbone.View.apply( this, arguments );\n    };\n\n    var F = function ( ) { };\n    F.prototype = Backbone.View.prototype;\n    View.prototype = new F( );\n\n    return View;\n\n} ( ) );\n```\n\nBut I think we agree to say that it's not the best code snippet ever :)\n\nWhat do you think of this issue ? Should it be solved ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3033/comments",
    "author": "arcanis",
    "comments": [
      {
        "user": "wyuenho",
        "created_at": "2014-03-03T14:13:30Z",
        "body": "Can you do this?\n\n``` javascript\nvar MyView = Backbone.View.extend({\n  initialize: function(options) {\n    this.setElement(Templates.get('popups/upload/settings', {\n      filename: options.filename\n    }));\n  }\n});\n```\n"
      },
      {
        "user": "arcanis",
        "created_at": "2014-03-03T14:25:42Z",
        "body": "Hm, it is indeed possible. It does introduce a little delta between the elements which need the options and those which don't, but nothing really serious. I haven't thought of using setElement myself, thanks : )\n\nI'm closing my issue since I don't see immediate use case where your snippet wouldn't work\n"
      },
      {
        "user": "cobbweb",
        "created_at": "2014-03-04T01:18:01Z",
        "body": "If it makes it any easier for you @arcanis you can override the constructor like this:\n\n``` js\nvar MyView = Backbone.View.extend({\n  constructor: function() {\n    console.log('test');  \n    Backbone.View.prototype.constructor.apply(this, arguments);\n  }\n});\n```\n"
      },
      {
        "user": "mllocs",
        "created_at": "2014-03-21T10:37:11Z",
        "body": "I'm having the same issue defining `className`, `attributes`, `id` or `tagName` as a function. It's specially handy to use the passed `options` to customise the class or attributes of the element. The workaround is to set the classes or attributes in the `onRender` method... :disappointed: \n"
      },
      {
        "user": "wyuenho",
        "created_at": "2014-03-21T11:08:16Z",
        "body": "@mllocs You can still pass the functions as options to the constructor.\n\n``` javascript\nnew View({id: function () { return 'foo'; }});\n```\n"
      },
      {
        "user": "mllocs",
        "created_at": "2014-03-21T11:17:32Z",
        "body": "I meant using the passed `options` in those functions. After the 1.1.0 update you no longer have `options` automatically attached to the context before calling those methods. \n"
      },
      {
        "user": "wyuenho",
        "created_at": "2014-03-21T11:21:57Z",
        "body": "Save `options` in your overridden initialize method or the constructor.\n"
      },
      {
        "user": "mllocs",
        "created_at": "2014-03-21T11:32:48Z",
        "body": "Initialize is called afterwards...\n\n``` javascript\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement(); // here we resolve className, id, attributes and tagName\n    this.initialize.apply(this, arguments);  // initialize... \n    this.delegateEvents();\n  };\n```\n\nand overriding the constructor looks too much for what I need to accomplish... \n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-03-21T11:36:15Z",
        "body": "Nah, overriding the constructor is a good plan.  It's pretty common and should be moreso.  :+1:\n"
      },
      {
        "user": "mllocs",
        "created_at": "2014-03-21T13:02:53Z",
        "body": "Overriding the constructor in every view declaration seems too much boilerplate to me... there was any reason to remove `options` from the context or to not pass it to the `ensureElement` methods? I would like to understand this change... for me this was a pretty common pattern:\n\n``` javascript\nvar MyView = Backbone.View.extend({\n  attributes: function() {\n    return {'tabindex': this.options.tabindex};\n  }\n});\n```\n\nany 'bad practice' in this pattern?\n"
      },
      {
        "user": "arcanis",
        "created_at": "2014-03-21T13:14:32Z",
        "body": "For my use case, every view in my application comes from a Backbone indirection. Something like this :\n\n``` js\nvar View = Backbone.View.extend( {\n    constructor : function ( options ) {\n        this.options = options;\n        Backbone.View.apply( this, arguments );\n    }\n} );\n\nvar UserView = View.extend( {\n} );\n\nvar CommentView = View.extend( {\n} );\n\n...\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2014-03-21T13:49:12Z",
        "body": "@mllocs Yes, I would say accessing `this.options.foo` is an anti-pattern.  Instead, use `options` as a vehicle and attach properties directly as follows.\n\n``` js\nvar MyView = Backbone.View.extend({\n  constructor: function(options) {\n    _.extend(this, _.pick(options, 'tabindex', 'foo', 'bar', 'baz'));\n    Backbone.View.apply(this, arguments);\n  }\n  attributes: function() {\n    return {'tabindex': this.tabindex};\n  }\n});\n```\n\nThere's a great deal more detail in #2458 if you're interested.\n"
      },
      {
        "user": "mllocs",
        "created_at": "2014-03-21T14:07:36Z",
        "body": "Thanks @braddunbar, that options whitelisting is interesting... I'll investigate how to apply that idea when using Backbone.Marionette... \n"
      }
    ]
  },
  {
    "number": 3022,
    "title": "Bower install issue",
    "created_at": "2014-02-26T00:08:39Z",
    "closed_at": "2014-02-26T19:51:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3022",
    "body": "I'm not sure if it's related to Backbone or Bower but whenever I'm trying to upgrade to 1.1.2, I'm getting the following error:\n\n```\nbower ENOTFOUND     Package jashkenas/backbone=jashkenas/backbone not found\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3022/comments",
    "author": "gkorland",
    "comments": [
      {
        "user": "magalhas",
        "created_at": "2014-02-26T00:20:58Z",
        "body": "I'm not having any problem at all. Are you running the following command?\n\n```\nbower install backbone --save\n```\n\nAnyway this could be due to a temporary issue.\n"
      },
      {
        "user": "gkorland",
        "created_at": "2014-02-26T19:51:32Z",
        "body": "Thanks, I fixed it, cleaning bower cache done it.\n"
      },
      {
        "user": "nickfishman",
        "created_at": "2014-03-04T22:46:04Z",
        "body": "I also ran into this issue today. I haven't spent much time investigating the underlying cause but I can confirm that running\n\n```\nbower cache clean\n```\n\nbefore doing an update fixes it.\n"
      }
    ]
  },
  {
    "number": 3019,
    "title": "BB 1.1.2 + lodash + requirejs",
    "created_at": "2014-02-24T06:09:27Z",
    "closed_at": "2014-02-24T07:31:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3019",
    "body": "Hi.\nHow to implement lodash with new version of BB 1.1.1 or 1.1.2, which has AMD wrapper?\nAnd how to exports Backbone into global scope,  with requirejs?\n\n1.1.0 - without amd wrapper, works good.\nThnk's.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3019/comments",
    "author": "sshmyg",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-02-24T07:31:03Z",
        "body": "Try asking these questions to StackOverflow, the IRC channel, or the listserve. GitHub issues are for problems with the framework.\n"
      }
    ]
  },
  {
    "number": 3014,
    "title": "Adding a model to a collection sets the model's collection property, how to set not to do it?",
    "created_at": "2014-02-21T15:15:06Z",
    "closed_at": "2014-02-21T15:34:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3014",
    "body": "I checked the source, setting the collection is added to the options in the _prepareModel method of Collection. Is it possible to tell not set the collection of the model?\n\nI want to create a selection of an existing collection, the collections created should have the same models, but want to keep the reference to the original collection. All the collections are immutable.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3014/comments",
    "author": "gfrivolt",
    "comments": [
      {
        "user": "gfrivolt",
        "created_at": "2014-02-21T15:33:34Z",
        "body": "sorry, invalid issue, when the model is already a Backbone.Model instance, _prepareModel is not called and its collection property is not changed.\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-02-21T15:34:30Z",
        "body": "Glad it worked for ya ;)\n"
      }
    ]
  },
  {
    "number": 3009,
    "title": "Backbone is unable to find the dynamic div created by template",
    "created_at": "2014-02-20T08:04:58Z",
    "closed_at": "2014-02-20T10:27:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/3009",
    "body": "I am sorry guys i am new to backbonejs. Everything is working fine but when it goes in `addOne` method of `MyApp.Views.Projects.IndexView` view `$(\".row-fluid\")` div doesnot founded, ( i have verified it in firebug ) but when everything run's and i checked the DOM 'row-fluid' div exist. I have been looking into this issue from 5 6 hours. Looking forward a help from you guys. \n\n``` coffee\nclass MyApp.Routers.ProjectsRouter extends Backbone.Router\n\n  initialize: ->\n    @projects = new MyApp.Collections.ProjectsCollection()\n\n  routes:\n    \"projects\" : \"projects\"\n\n  projects: ->\n    @projects.fetch().done =>\n      @view = new MyApp.Views.Projects.IndexView(collection: @projects)\n      $(\"#projects\").html(@view.render().el)\n\nclass MyApp.Views.Projects.IndexView extends Backbone.View\n\n  addAll: =>\n    @collection.each(@addOne)\n\n  addOne: (project) =>\n    view = new MyApp.Views.Projects.ProjectView({ model: project })\n    **$(\".row-fluid\").append(view.render().el)**\n\n  render: =>\n    @$el.html(\"<div class=\"row-fluid\"></div>\")\n    @addAll()\n    this\n\nclass MyApp.Views.Projects.ProjectView extends Backbone.View\n  template: JST[\"backbone/templates/projects/project\"]\n\n  render: ->\n    @$el.append(@template())\n    this\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3009/comments",
    "author": "awaisilyastkxel",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2014-02-20T10:27:54Z",
        "body": "Mornin' @awaisilyastkxel!  `$(\".row-fluid\")` will search the document for elements matching `.row-fluid`.  However, when rendering your index view it has not yet been inserted into the document so you need to search the views element instead.  You can do this with `this.$('.row-fluid')` instead.\n\nGenerally you should try IRC or the mailing list for this type of question.  Github issues are for questions on Backbone itself and aren't used for debugging.  Hope that helps!  :smiley:\n"
      }
    ]
  },
  {
    "number": 2977,
    "title": "Nested optional parts of route route string are captured",
    "created_at": "2014-01-29T18:47:48Z",
    "closed_at": "2014-02-13T18:54:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2977",
    "body": "`Backbone.Router.prototype._routeToRegExp('foo(/:bar(/:baz))')`\n\nyields\n\n`/^foo(?:/([^/]+)(/([^/]+))?)$/` - captures three params, and params are mandatory\n\nBut it should be\n\n`/^foo(?:/([^/]+)(?:/([^/]+))?)?$/` - captures two params\n\nFor example, matching against the route `/foo/a/b`, the parameters passed to the handler are `('a', '/b', 'b')`, when it should be `('a', 'b')`\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2977/comments",
    "author": "forivall",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-02-13T18:54:17Z",
        "body": "Optional parts in Backbone routes do not support nesting.\n"
      },
      {
        "user": "forivall",
        "created_at": "2014-02-14T19:51:10Z",
        "body": "Would you welcome a pull request?\n"
      },
      {
        "user": "magalhas",
        "created_at": "2014-02-14T19:58:33Z",
        "body": "I would say that if not a PR please release it as a plugin. I don't know @jashkenas opinion, but I don't see why this shouldn't be a part of Backbone.Router core.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-02-14T20:13:21Z",
        "body": "Depends on how fancy it ends up being — but yes, sure, feel free to take a crack at it.\n"
      }
    ]
  },
  {
    "number": 2964,
    "title": "Multiple Backbone.Routers and the default route — order of matching routes/loading routers",
    "created_at": "2014-01-17T14:11:49Z",
    "closed_at": "2014-01-17T15:06:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2964",
    "body": "Application that i'm coding is getting bigger and bigger and so far i've been using just one router for everything. I wanted to split it into two separate routers (for starters, more coming of course) like this:\n\n```\nclass window.UFO.Routers.App extends Backbone.Router\n  routes:\n    #root\n    ''                         : 'root'\n    #not found\n    '*notFound'                : 'notFound'\n\nclass window.UFO.Routers.Companies extends Backbone.Router\n  routes:\n    'companies/new/:angellist' : 'companiesNew'\n    'companies/new'            : 'companiesNew'\n    'companies/:id/edit'       : 'companiesEdit'\n    'companies/:id/edit/people': 'companiesPeople'\n    'companies/:id/edit/people/:preselect': 'companiesPeople'\n```\n\nThere is an issue though: notFound route is triggered every time i try to access one of companies routes. I'm guessing it's because App router is loaded and initailized first (i'm using rails asset pipeline).\n\nDo you know any workaround for this problem? Maybe a way to force Backbone to check all available routers before matching to *notFound route?\n\nbtw. we are using Backbone.Marionette, so solutions may use tools and code from it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2964/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-01-17T15:06:23Z",
        "body": "Load the other router first?\n\nAnd ask questions on the mailing list, stackoverflow, or irc channel, please.\n"
      }
    ]
  },
  {
    "number": 2962,
    "title": "Model.isNew() is true but PUT is still issued rather than POST",
    "created_at": "2014-01-16T16:31:05Z",
    "closed_at": "2014-01-16T16:42:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2962",
    "body": "Not sure if this is expected behaviour but the docs say that if isNew() is true then a POST is sent on save() but if I include the id attribute in the data from the form, a PUT is sent even when isNew() is true:\n\nmodel.isNew() : true\nview.on(\"form:submit\", function(data){\n  delete data.id; // need to do this to get POST otherwise it's a PUT\nmodel.save(data); // of course, useless as id is now null\n}\n\nin this case, model id is set by the user not the server. So the POST/PUT is determined by data and not model.isNew().\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2962/comments",
    "author": "codebrane",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-01-16T16:42:56Z",
        "body": "If the model has an ID, then the model has a URL. If the model has a URL, then you want to PUT the model to that URL — it's how REST goes.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-01-16T16:43:11Z",
        "body": "Ask questions on the mailing list or IRC channel, not in bug tickets.\n"
      },
      {
        "user": "codebrane",
        "created_at": "2014-01-16T17:11:38Z",
        "body": "OK but it said to put 'general discussion' in here\n"
      }
    ]
  },
  {
    "number": 2956,
    "title": "Collection.create adds a model even if it's not valid",
    "created_at": "2014-01-14T19:56:32Z",
    "closed_at": "2014-01-16T22:08:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2956",
    "body": "Adding an invalid model with `collection.create({..})` triggers an `add` and modifies the collection. Is this normal?\n\nThe documentation says the contrary: « Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. »\n\nThis seems to be the way: `Collection.extend({ this.on('error invalid', this.remove) })`\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2956/comments",
    "author": "yamsellem",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2014-01-16T22:08:50Z",
        "body": "> Is this normal?\n\nNope. It shouldn't be. Your model should be returned to you with errors.\n"
      },
      {
        "user": "melnikov-s",
        "created_at": "2014-03-27T03:44:11Z",
        "body": "@yamsellem @jashkenas  I ran into this issue as well, turns out you need to add it with {validate: true} as the options for an invalid model not to be added to the collection. I'm guessing this is the intended behaviour since there exists a test for it. \n\nIt should probably be documented. \n"
      }
    ]
  },
  {
    "number": 2937,
    "title": "Backbone events still fired the old event",
    "created_at": "2013-12-26T09:10:16Z",
    "closed_at": "2013-12-26T16:16:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2937",
    "body": "hello there,\nim new in backbone.. and i have a question about backbone events,\nthis is the scenario,\ni have a button(save) inside my edit view, at the first edit when i click the save it fires only one event.. but when i reroute and go to another item( new edit view with other model )..  and click save.. it looks like the click event of save in the first view is still binded..\n\nis there a way to unbind the first event ?\nsorry for my grammar, thank you\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2937/comments",
    "author": "kiro112",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-12-26T16:16:34Z",
        "body": "Hi @kiro112!  I'm afraid that's not enough information to give you any advice.  If you could post a working jsfiddle/jsbin it would be a bit easier.  Also, you may want to try the IRC channel or mailing list for this sort of issue.\n"
      },
      {
        "user": "kiro112",
        "created_at": "2013-12-27T03:03:38Z",
        "body": "Hi @braddunbar, ok i will try the mailing list and the IRC.. thanks\n"
      },
      {
        "user": "kiro112",
        "created_at": "2013-12-27T05:22:06Z",
        "body": "@braddunbar ive search and ive read articles about backbone zombie/ghost events..\ncan you suggest to me the best way to prevent this zombie/ghost ?\n\ni think this is my issue\nthanks\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-12-27T12:34:29Z",
        "body": "Zombie views are views that are no longer attached to the DOM but are kept in memory because a model or collection still has a reference to them, usually due to an event handler.  To prevent this, you can either stop using the model/collection along with the view or sever any ties you might have already.  Either way is fine and the choice depends on the situation.\n"
      },
      {
        "user": "kiro112",
        "created_at": "2013-12-28T01:15:05Z",
        "body": "ok, thanks \n"
      }
    ]
  },
  {
    "number": 2927,
    "title": "Ajax options on errors triggers",
    "created_at": "2013-12-18T11:52:15Z",
    "closed_at": "2013-12-18T14:48:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2927",
    "body": "I have a problem in save, when I do a save the server is returning a error which I can capture with error and treat it. But in our case the server is returning an error code which we use to show a pop-up asking for confirmation with a server message and if the user confirm then we have to send again the request but adding some request parameters which are given from the server. This parameters tell the server that this request come from a confirm. \n\nI noted than in the error handlers we don't have the ajax options. If I listen \".ajaxError\" I have it and I can resend it but If I listen \"error\" from backbone, then I cant. I fork the project and I add a change which allow to have this options in error and to use it. \n\nWith this change the api of error will be: \n\n(model, xhr, options, ajaxOptions)\n\nWhat do you think about? \n\nHere  is my commit: e0aa9e93dc2eac2041c498fd8d933f6f798a2744\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2927/comments",
    "author": "josejamart",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-12-18T14:48:30Z",
        "body": "Hi @josejamart!  The xhr object is attached to the `options` passed to the handler.  You should be able to get whatever you need there.\n\n``` js\nmodel.save(null, {\n  error: function(model, resp, options) {\n    console.log(options.xhr.responseText);\n  }\n});\n```\n"
      },
      {
        "user": "josejamart",
        "created_at": "2013-12-18T15:01:08Z",
        "body": "Thank @braddunbar  for your quick response. I know that you say but I haven't been able to resend a request with the xhr object. With it you can consult the object but not to send it again, if I try to modify the url of the request and resend it, it don't work. \n\nWhat I need to do is: \n\noptions.url = restRoot+\"/rest/\"+result;\nBackbone.ajax(options);\n\nIf I try to do it with the xhr, the request ajax don't keep the headers, the post data and other request configurations. \n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-12-18T15:44:10Z",
        "body": "Hmm...couldn't you just save again with the same options though?\n\n``` js\nvar retried = false;\nvar options = {\n  // ...\n  error: function() {\n    if (retried) return;\n    retried = true;\n    options.url = '...';\n    model.save(null, options);\n  }\n};\nmodel.save(null, options);\n```\n"
      },
      {
        "user": "josejamart",
        "created_at": "2013-12-18T16:05:24Z",
        "body": "Yes this is my other option, but, the logic is to have a collection of models, iterate this models doing saves, in each save the server could response with an error or an confirmation, if the response is error I continue with other saves and if it's a confirmation I show a pop-up to the user and with the user decision I resend the request or I continue with others so I have more than 100 lines in the error callback so I have some afraid of the state of the vars if I call recursively as you comment. \n\nBut I try it to see if it can work. \n"
      }
    ]
  },
  {
    "number": 2908,
    "title": "how to break backbone collection such that each of the child collection also listen to the events that will be registered by parent collection",
    "created_at": "2013-12-10T11:49:54Z",
    "closed_at": "2013-12-10T14:07:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2908",
    "body": "i want to break up a backbone collection such that each of the child collection also listen to the events that will be registered by parent collection.\n\nfor example i have collection\n\n```\nparent = {\nmodels : [model1, model2, model3, model4, model5 ]\n//other properties of collections\n}\n```\n\nto break in children grouped by a specific attribute (say 'a')\n\n```\nchild1 = {\nmodels : [model1, model2, model4],\n//other properties of collection\n}\n\nchild2 = {\nmodels : [model3, model5],\n//other properties of collection\n}\n```\n\nPS: number of child collections is not specific. these are to be dynamic created.\n\nNow i want whenever any event (custom or predefined) occurs on parent collection.\nAll child collection should listen to those.\n\nIs there any suitable approach for the same?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2908/comments",
    "author": "Koka5",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2013-12-10T14:07:03Z",
        "body": "Please use StackOverflow, the mailing list, or the IRC channel for questions like this.\n"
      }
    ]
  },
  {
    "number": 2828,
    "title": "destroy 方法逻辑错误",
    "created_at": "2013-10-25T06:10:36Z",
    "closed_at": "2013-10-25T11:19:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2828",
    "body": "注释中写道：If `wait: true` is passed, waits for the server to respond before removal.\n但是，设置了 options.wait = true，仍然会在服务器返回结果之前销毁 model。这个和注释不符。\n问题代码：\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2828/comments",
    "author": "dongnan",
    "comments": [
      {
        "user": "ivanzhaowy",
        "created_at": "2013-10-25T07:16:53Z",
        "body": "In English pls. Most people here are not Chinese speaker...\n"
      },
      {
        "user": "Yahasana",
        "created_at": "2013-10-25T08:20:38Z",
        "body": "哥们，是你理解的有问题，把问题关了吧\n"
      },
      {
        "user": "j03w",
        "created_at": "2013-10-25T11:12:34Z",
        "body": "> Notes wrote: If wait: true is passed, waits for the server to respond before removal.\n> However, setting up options.wait = true, the server returns the results will still be destroyed before model. This and the comments do not match.\n> Code in question:\n\nfrom Google translate… anyway, it seems correct to me why do you think it should do otherwise? `wait: true` option means it should wait for the server response before Backbone will take action right? From your snippet that exactly what it does it is calling the `destroy()` function from within success callback if you have `wait: true`\n"
      }
    ]
  },
  {
    "number": 2820,
    "title": "Removing Backbone Models from a collection using the Collections.forEach method can cause models to be missed",
    "created_at": "2013-10-17T15:46:31Z",
    "closed_at": "2013-10-17T15:51:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2820",
    "body": "When removing models from a collection like:\n\n```\nmycollection.forEach(mymodel) {\n    // doing stuff before possibly removing the model\n    mycollection.remove(mymodel);\n    // doing stuff after possibly removing the model\n}\n```\n\n...all models may not be removed from the collection.  The underlying _.each method prematurely considers mycollection.models to be fully iterated.\n\nA workaround for this is:\n\n```\n_.each(_.extend({}, mycollection.models), function(mymodel) {\n    // doing stuff before possibly removing the model\n    mycollection.remove(mymodel);\n    // doing stuff after possibly removing the model\n}\n```\n\nShould the .forEach method be using the code in the workaround above?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2820/comments",
    "author": "arfordweb",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-10-17T15:51:20Z",
        "body": "Hi @arfordweb!  Modification during iteration is a pretty classic mistake (I've fallen prey to it many times myself) and modifying `forEach` in the way you suggest above would be prohibitively expensive.  I'd suggest creating a list of models to remove during iteration and removing them afterwards.\n\n``` js\nvar remove = [];\ncollection.each(function(model) {\n  if (shouldRemove(model)) remove.push();\n});\ncollection.remove(remove);\n```\n\nOr, perhaps more succinctly\n\n``` js\ncollection.remove(collection.filter(function(model) {\n  return shouldRemove(model);\n}));\n```\n"
      }
    ]
  },
  {
    "number": 2809,
    "title": "collection's 'create' method seems to need 'index' option.",
    "created_at": "2013-10-15T05:16:22Z",
    "closed_at": "2013-10-15T11:53:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2809",
    "body": "While collection's 'add' method supports 'index' option,\nbut 'create' method doesn't seem to support it. \nIs there any way to set the index position when creating a model in collection?\nIf no, it seems to need 'index' option.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2809/comments",
    "author": "oigil",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2013-10-15T05:42:40Z",
        "body": "There's no `index` option, but there's an `at` option which you can pass in through options (`Collection#create` uses `add` under the hood.) Give it a try.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-10-15T11:54:46Z",
        "body": "Hey @akre54 -- would you be interested in \"Collaborator\" status on the Backbone repo, so that you can tag and close questions as you see fit?\n"
      },
      {
        "user": "akre54",
        "created_at": "2013-10-15T14:38:57Z",
        "body": "sure. thanks!\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-10-15T14:40:41Z",
        "body": "Done. Enjoy. And welcome.\n"
      },
      {
        "user": "oigil",
        "created_at": "2013-10-16T05:38:56Z",
        "body": "wow! 'at' option works nicely.\n@akre54 Thanks!!\n"
      }
    ]
  },
  {
    "number": 2808,
    "title": "Passing parameters into a view",
    "created_at": "2013-10-14T23:42:58Z",
    "closed_at": "2013-10-14T23:55:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2808",
    "body": "I was developing my app using v1.0.0 and between beginning work and now there has been an update to v1.1.0. So where I used to be able to do,\n\n``` javascript\nvar myView = new MyView({hash: 'something'});\n```\n\nAnd access `hash` inside the view using,\n\n``` javascript\nthis.options.hash\n```\n\nThis no longer works. I now get the following error:\n\n> Uncaught TypeError: Cannot read property 'hash' of undefined\n\nSo what's the new way of doing this? I would very much like to be able to pass properties into my view.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2808/comments",
    "author": "baudday",
    "comments": [
      {
        "user": "baudday",
        "created_at": "2013-10-14T23:48:21Z",
        "body": "I guess I could do,\n\n``` javascript\nmyView.options = {hash: 'something'};\n```\n\nbefore rendering the view, but that seems clunky.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-10-14T23:55:32Z",
        "body": "Instead of opening a bug ticket, try asking the mailing list or the IRC room first, or just searching.\n"
      }
    ]
  },
  {
    "number": 2800,
    "title": "No longer able to set url of a collection in collection constructor function",
    "created_at": "2013-10-11T03:42:53Z",
    "closed_at": "2013-10-11T10:34:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2800",
    "body": "is there a particular reason why the url can no longer be set in the collection constructor?\n\nin particular, it seems to have been removed in commit 3bfbcd4123a19f9ec31c5d64d3d4322140adc2fa\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2800/comments",
    "author": "karabijavad",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2013-10-11T03:54:06Z",
        "body": "Because it breaks the `url` property on models created by that collection.\n\nsee #1705 #2416 #2426 #2430 #2533 #2578 #2797\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-10-11T10:34:45Z",
        "body": "Yep yep.  Thanks @akre54!\n"
      }
    ]
  },
  {
    "number": 2763,
    "title": "I have problem with append my collection.",
    "created_at": "2013-09-18T12:55:44Z",
    "closed_at": "2013-09-18T14:55:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2763",
    "body": "all working me when I add into console this :\n\n`$('body').append(tablesView.render().el);`\n\nI see all my names in li from json file. After that I can with :\n\n`tablesCollection.create({ name:'Next Table Name' });`\n\nadd next object which is immediately rendered.\n\nMy code :\n\n```\nwindow.App = {\n    Models: {},\n    Views: {},\n    Collections: {}\n};\n\nwindow.template = function (id) {\n\n    return _.template($('id' + id).html());\n};\n\nApp.Models.Table = Backbone.Model.extend({\n\n    defaults: {\n            name: 'Table Name',\n        },\n});\n\nApp.Collections.Tables = Backbone.Collection.extend({\n\n    model: App.Models.Table,\n\n    url: 'tables.json'\n});\n\nApp.Views.Tables = Backbone.View.extend({\n\n    tagName: 'ul',\n\n\n    initialize: function() {\n        this.collection.fetch({reset:true});\n        this.collection.on('reset', this.render);\n        this.collection.on('add', this.addOne, this );\n\n    },\n\n    render: function () {\n\n        this.collection.each(this.addOne, this);\n\n        return this;\n\n        },\n\n    addOne: function(table) {\n\n        var table = new App.Views.Table({ model: table });\n\n        this.$el.append( table.render().el );\n\n        table.render();\n\n        }\n\n});\n\nApp.Views.Table = Backbone.View.extend({\n\n    tagName: 'li',\n\n    initialize: function() {\n\n      this.model.on('destroy', this.remove, this)  \n\n    },\n\n    render: function () {\n\n        this.$el.html( this.model.get('name') );\n\n        return this;\n\n    },\n});\nvar tablesCollection = new App.Collections.Tables();\nvar tablesView = new App.Views.Tables({ collection: tablesCollection });\n```\n\nThanks for answers !!!!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2763/comments",
    "author": "makromat",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2013-09-18T14:51:49Z",
        "body": "Please use the mailing list or IRC channel for these types of questions. \n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-18T14:55:57Z",
        "body": "Yep yep, IRC or the mailing list is a more appropriate place for this sort of question.\n"
      }
    ]
  },
  {
    "number": 2754,
    "title": "collection.on(\"myevent\") original model?",
    "created_at": "2013-09-10T15:21:14Z",
    "closed_at": "2013-09-10T15:42:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2754",
    "body": "Hi guys,\n\nIs there any way I can get the original model who trigger an event inside a collection without having to passing it ?\n\n``` javascript\nvar collection = new Backbone.Collection();\nvar myModel = new Backbone.Model({});\ncollection.add(myModel);\nmyModel.trigger(\"foo\", 42);\n// ...\ncollection.on(\"foo\", function (number) {\n  // how can I get the original model object here?\n});\n```\n\nThis is a limitation I experiment on different projects, Is there an existing way to get that model without having to pass it at the trigger time?\n\nThe workaround of this I found is quite boring:\nsomething like:\n\n``` javascript\nfunction bindModel (model) {\n  model.on(\"foo\", function (number) {\n    // model in the scope\n  });\n}\nfunction unbindModel (model) {} // erf need to keep somewhere the original reference of the bound function...\ncollection.each(bindModel);\ncollection.on(\"add\", bindModel);\ncollection.on(\"remove\", unbindModel);\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2754/comments",
    "author": "gre",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-09-10T15:32:05Z",
        "body": "What's the problem with simply passing the model as the first arg? It's the convention Backbone uses everywhere in core.\n\n``` js\ncollection.add(model).on('foo', function (model, n) { ... });\nmodel.trigger('foo', model, 42);\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-10T15:42:30Z",
        "body": "Yep yep, passing the model as the first argument is the preferred way to do this.  I think you'll find it works rather well.\n"
      },
      {
        "user": "gre",
        "created_at": "2013-09-10T15:47:18Z",
        "body": "That just looks not so DRY. I would prefer the trigger method to do that for me. \nBut anyway, that's fine!\nThanks.\n"
      }
    ]
  },
  {
    "number": 2750,
    "title": "Changes to a collection's models doesn't change toJSON()",
    "created_at": "2013-09-10T01:53:31Z",
    "closed_at": "2013-09-10T02:09:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2750",
    "body": "While it's possible remove attributes from a collection's models, it doesn't translate into the view (via `toJSON()`).\n\n**Steps to reproduce:**\n\n``` javascript\n  a         = new Backbone.Model({id: 3, label: 'a'});\n  b         = new Backbone.Model({id: 2, label: 'b'});\n  c         = new Backbone.Model({id: 1, label: 'c'});\n  d         = new Backbone.Model({id: 0, label: 'd'});\n  e         = null;\n  col       = new Backbone.Collection([a,b,c,d]);\n  otherCol  = new Backbone.Collection();\nvar expected = [{ id :3 },{ id:2 },{ id:1 },{ id:0 }];\nvar newCol = col.map(function(model) {\n  return model.omit('label');\n});    \ncol.set(newCol);\ndeepEqual(col.toJSON(), expected); // toJSON still fetches the old attributes, so this fails\nok(!col.at(0).label); // label is removed from the collection's models, so this is true\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2750/comments",
    "author": "dotnetCarpenter",
    "comments": [
      {
        "user": "philfreo",
        "created_at": "2013-09-10T02:07:25Z",
        "body": "This doesn't seem like a bug. You're just performing a no-op by re-setting the IDs of each model in the collection. But since `merge:true` by default in Collection#set then the `label` attrs aren't going to go away. Try adding `{merge:false}` in your `col.set(newCol)` call OR `label:undefined` in each object and it should work.\n\nAm I missing something?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-09-10T02:09:38Z",
        "body": "@philfreo is correct - you'll want to do that with `{merge: false}`, or just `col.invoke('unset', 'label')`.\n"
      }
    ]
  },
  {
    "number": 2739,
    "title": "Problem with parse and create",
    "created_at": "2013-08-30T06:24:22Z",
    "closed_at": "2013-09-11T17:16:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2739",
    "body": "I want to add a model to a collection and immediately trigger the 'add' event so that a view is instantly rendered.\n\nHowever, I also want it to be persisted and saved as well.\n\nI do not want to wait for save to return before add is triggered.\n\nAll of this should be fine, except that I have data in the model that needs to be created on parse.  An example is a url to a map whose value is dependent on the client's browser type.\n\nIf I call `collection.create(model)`, the model will be added to the collection, parsed, then saved.\n\nThe problem is that I want that parsing to be done, but I don't want that parsed data to be saved to the server.\n\nI can fix this by doing `collection.create(model, {wait: true})`, but then there is a delay from when the model is created until the view is rendered.\n\nAny ideas on this?  Essentially I want the data created in `parse` in the model to never be persisted to the server, just accessed locally.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2739/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "j03w",
        "created_at": "2013-08-30T11:38:24Z",
        "body": "How about override `model.toJSON()`?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-08-30T13:38:26Z",
        "body": "@blairvanderhoof - might be easier if you just saved & added...\n\n``` js\nvar model = new collection.model(data)\nmodel.save(data);\ncollection.add(model.parse());\n```\n\nor if you just set the attributes you don't want saved as properties on the model rather than in the model's attributes hash.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-09-11T17:16:08Z",
        "body": "That works. It's also a not-very-great way to create a client-side-only view onto your data. Simply having a method on the model that generates the URL for you is _way_ nicer than having to keep data in sync.\n\n```\nmodel.urlForBrowser()\n```\n"
      },
      {
        "user": "ghost",
        "created_at": "2013-09-11T18:03:37Z",
        "body": "Thanks Jeremy, looks like staying away from setting properties on the attributes is the way to go and instead use instance/generated variables.\n"
      }
    ]
  },
  {
    "number": 2722,
    "title": "couldn't pass string as an argument to Backbone View",
    "created_at": "2013-08-14T13:47:09Z",
    "closed_at": "2013-08-14T13:52:26Z",
    "labels": [
      "wontfix",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2722",
    "body": "e.g. new MyView(\"Hello\");\nTypeError: invalid 'in' operand n\nBackbone version: 1.0.0\n\nThrows the above javascript error from Underscore.js, on passing string as an argument to backbone view. Accepts only object. Worked for Version 0.9.2, but not 1.0.0.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2722/comments",
    "author": "shanvel26",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-08-14T13:52:26Z",
        "body": "Hi @shanvel26!  That's correct, `Backbone.View` accepts an object as an argument.  The fact that it previously allowed a string is just coincidence.  I'd recommend using `new View({key: 'value'})` instead.\n"
      },
      {
        "user": "shanvel26",
        "created_at": "2013-08-14T14:00:17Z",
        "body": "Hi @braddunbar Thank you, and yes its time to update my project with those changes :)\n"
      }
    ]
  },
  {
    "number": 2703,
    "title": "The \"request\" event is fired after \"sync\" when model is fetching with \"async\": \"false\" options",
    "created_at": "2013-07-31T13:04:52Z",
    "closed_at": "2013-07-31T17:56:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2703",
    "body": "$.extend(Backbone.Model.prototype, {\n        initialize: function() {\n            this.on('request', this.start, this);\n            this.on('sync', this.stop, this);\n            this.on('error', this.stop, this);\n        },\n\n```\n    start: function() {\n        console.log('show');\n    },\n\n    stop: function() {\n        console.log('hide');\n    }\n```\n\n}\n\n```\n        var User = new UserModel();\n        User.fetch({\n            async: false,\n            success: function (model, response) {\n                console.log('User.fetch success');\n            }\n            complete: function() {\n                console.log('User.fetch complete');\n            }\n        });\n```\n\nExpected result:\nshow\nUser.fetch success\nhide\nUser.fetch complete \n\nReal result:\nUser.fetch success \nhide\nUser.fetch complete\nshow \n\nWith the best regards!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2703/comments",
    "author": "oleksii-novikov",
    "comments": [
      {
        "user": "j03w",
        "created_at": "2013-07-31T15:12:11Z",
        "body": "well… async: false make your ajax blocking hence 'request' get triggered after your ajax has been completed while your 'sync' event is triggered within success callback. \n\n``` javascript\n$.ajax({\n   async: false, \n   success: function(){alert('success!');}, \n   complete: function(){alert('completed!');}\n}); \nalert('outside ajax');\n```\n\nWhy do you expect otherwise?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-07-31T17:56:33Z",
        "body": "Yep, Backbone assumes that the request is asynchronous, see #2340 for more information.\n"
      }
    ]
  },
  {
    "number": 2697,
    "title": "Know when a model exists but attributes aren't changed during fetch merge",
    "created_at": "2013-07-25T14:06:26Z",
    "closed_at": "2013-07-25T23:42:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2697",
    "body": "Does anyone have any suggestions around knowing if a model exists when a fetch happens but no attributes are changed during a merge? I originally thought `change` might have fired for it matching, but it doesn't.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2697/comments",
    "author": "tombell",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-07-25T23:42:08Z",
        "body": "If a model exists already on the client-side, and no changes are made to it during a `fetch`, then its state hasn't changed, has it? It's a feature that you're not getting an incorrect event here.\n\nIf you just care that the fetch finished, just listen for the `success` on the request, not for a state change.\n"
      }
    ]
  },
  {
    "number": 2696,
    "title": "Catching JSON parse errors",
    "created_at": "2013-07-25T10:59:16Z",
    "closed_at": "2013-07-25T12:18:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2696",
    "body": "Due to a flakey web service our requests for JSON data sometimes return incomplete/malformed JSON, and Chrome throws the following error:\n\n`Uncaught SyntaxError: Unexpected end of input`\n\nAny pointers on how to catch/handle this exception from Backbone sync? I've looked through the Backbone source and can't even work out where the actual server response parsing is happening ... any help appreciated!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2696/comments",
    "author": "jedrichards",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-07-25T12:18:59Z",
        "body": "It's happening inside of jQuery, and to be more precise, the native `JSON.parse` is used, it it's available. Handle the error by listening for errors, either at the jQuery or at the Backbone level.\n\nRegardless, better to ask questions like this on the mailing list or IRC channel, instead of opening a ticket.\n"
      }
    ]
  },
  {
    "number": 2685,
    "title": "Discussion: Breaking backwards compatibility",
    "created_at": "2013-07-20T16:17:46Z",
    "closed_at": "2013-07-23T19:55:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2685",
    "body": "Is there a reason that upgrading version of Backbone.js requires one to change their code to keep things working the way they are/were in a previous version? If you add a new feature or new functionality, it makes sense (to me) that I would need to change my code to get this new benefit. However we almost always see the reverse of that situation here. \n\nTwo instances of these breaking changes are `options.reset` and `options.wait`. In both cases we wanted some of the fixes, but in order to upgrade and maintain the current functionality, all our code had to be updated to account for these new options. In both cases, it seems the default settings were set to break existing users instead of allow people to opt-in to the new hotness.\n\nDo you intend to continually break backwards compatibility even after 1.0?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2685/comments",
    "author": "fearphage",
    "comments": [
      {
        "user": "jscheel",
        "created_at": "2013-07-23T16:08:02Z",
        "body": "I'm gonna guess that breaking changes are probably going to slow down now that 1.0.0 is out, but @jashkenas can speak more to that. IIRC, there was a warning on the site that said backbone was in alpha and would have breaking changes until 1.0. The good thing is, you can usually read the change log and get a good idea of what's changed, and how to get around it. For example. the `fetch` change has a note about passing `{reset: true}` for the old functionality.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-07-23T19:55:29Z",
        "body": "> Do you intend to continually break backwards compatibility even after 1.0?\n\nWhen necessary, yes. The `reset` and `wait` semantics were important new defaults to have.\n\nThat said, Backbone doesn't often (maybe ever) have critical security fixes, or anything you need to jump on immediately. Feel free to use any version you like, and take your time upgrading. \n"
      }
    ]
  },
  {
    "number": 2679,
    "title": "attributes of model's constructor misleading",
    "created_at": "2013-07-17T14:58:09Z",
    "closed_at": "2013-07-17T15:15:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2679",
    "body": "Not sure whether it is a bug or a feature but I found this really misleading:\n\n```\nvar Model = Backbone.Model.extend({\n  initialize: function(attr, opts){\n    console.log('?unexpected: ' + attr.name);\n    console.log('as expected: ' + this.get('name'));\n  },\n  parse: function(res){\n    return {\n      name: res.crazyNamedName\n    };\n  }\n});\nvar Collection = Backbone.Collection.extend({\n  model: Model\n});\n\nvar model1 = new Model({name: 'neo'}); // works as expected\nvar model1 = new Model({crazyNamedName: 'neo'}, {parse: true}); // not entirely\n```\n\nNow I know that I should've used only `this.get('name')` but I still feel like if I use `parse=true` then attr should be already parsed.\n\nIn fact you can assume that from reading the docs:\n\n```\nWhen creating an instance of a model, you can pass in the initial values of the attributes, which will be set on the model.\n```\n\nIn the above case the attributes won't be set on the model.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2679/comments",
    "author": "neojski",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-07-17T15:15:33Z",
        "body": "Hi @neojski!  The original arguments are passed to `initialize` unchanged and you can access them or the current value in `this.attributes`, whichever works best.  There was some discussion about this in #1545 if you're interested in the rationale.  Hope that helps.  :)\n"
      }
    ]
  },
  {
    "number": 2653,
    "title": "Backbone.history.start does not find route ",
    "created_at": "2013-07-03T21:48:15Z",
    "closed_at": "2013-07-04T12:15:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2653",
    "body": "Suppose I have a web page called `test.html` and I want my `Backbone.Router` to be capable of handling routes like `test.html?new` and also `new`. I've written sth like:\n\n```\nroutes: {\n  'new': function(){alert('new');},\n  'test.html?new': function(){alert('test.html?new');}\n}\n```\n\nBut if I visit `test.html?new` nothing happens. In particular \n\n```\nconsole.log(Backbone.history.start({pushState:true})); // returns false\n```\n\nHowever both:\n\n```\nBackbone.history.navigate('test.html?new', {trigger:true})\nBackbone.history.navigate('new', {trigger:true})\n```\n\ntriggers the route.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2653/comments",
    "author": "neojski",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-07-04T12:15:50Z",
        "body": "Hi @neojski!  Backbone routers ignore the query string entirely in favor of using the path name (`/test.html/new`, or similar).  Check out #891 if you want all the gory details.  :)\n"
      },
      {
        "user": "neojski",
        "created_at": "2013-07-04T12:30:00Z",
        "body": "So sad. Thanks for the reference.\n"
      }
    ]
  },
  {
    "number": 2628,
    "title": "Validation on object construction",
    "created_at": "2013-06-22T20:28:19Z",
    "closed_at": "2013-06-22T20:39:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2628",
    "body": "Giving a validating Model, I would have expected that validation also happens with on demand validation on object construction. \n\n``` javascript\nvar Todo = Backbone.Model.extend({\n  defaults: {\n    completed: false\n  },\n\n  validate: function(attribs){\n    if(attribs.title === undefined){\n        return \"Remember to set a title for your todo.\";\n    }\n  },\n\n  initialize: function(){\n    console.log('This model has been initialized.');\n    this.on(\"invalid\", function(model, error){\n        console.log(error);\n    });\n  }\n});\n```\n\nOn\n\n``` javascript\nvar emptyTodo = new Todo(null, {validate: true});\n```\n\nBackbone creates a new Todo object, though with an embedded error, and\n\n``` javascript\nconsole.log(emptyTodo.validationError);\n```\n\nlogs \"Remember to set a title for your todo,\" but the callback is never invoked, due to the fact that the constructor function first invokes set and then initialize.\n\nPerhaps there should be a preinitialize, so that one could refactor\n\n``` javascript\nTodo.initialize = function() { console.log('This model has been initialized.'); };\nTodo.preinitialize = function() {\n    this.on(\"invalid\", function(model, error){\n        console.log(error);\n    })};\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2628/comments",
    "author": "tinne",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-06-22T20:39:13Z",
        "body": "See previous tickets. In brief, you can override `constructor` ... or you can create, and then `.set` (cleaner).\n"
      }
    ]
  },
  {
    "number": 2580,
    "title": "Options no longer accessible in Views",
    "created_at": "2013-05-31T14:50:09Z",
    "closed_at": "2013-05-31T14:54:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2580",
    "body": "I recently upgraded from 0.9.9 to 1.0. \n\nIt seems that in version 1.0, the options object on a view is no longer existing.\n\nAny code within a view that tries to access this.options.property always fails and this.options is always undefined.\n\nI am using Underscore 1.4.3 and also tried 1.4.4 with no difference. Rolling back to Backbone 0.9.9 makes everything work again.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2580/comments",
    "author": "tysonnero",
    "comments": [
      {
        "user": "tysonnero",
        "created_at": "2013-05-31T14:53:14Z",
        "body": "Note: I am experiencing this issue when using the version from this Github repo.\n\nIf I use the version from backbonejs.org, it works.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-05-31T14:54:07Z",
        "body": "@tysonnero yep, it looks like you upgraded to the edge version, not the 1.0.0 release, see #2458 for a bit more info.\n"
      },
      {
        "user": "tysonnero",
        "created_at": "2013-05-31T15:12:47Z",
        "body": "Awesome.Thanks for the quick response. Also, sorry for the duplicate. I did a search, but for some reason I didn't see the other bug.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-05-31T15:21:32Z",
        "body": "No problem - sometimes they can be tough to find.\n"
      }
    ]
  },
  {
    "number": 2575,
    "title": "Backbonejs fetches values only when we pass asyc:false as the parameter for fetch() method",
    "created_at": "2013-05-30T16:25:11Z",
    "closed_at": "2013-05-30T16:29:50Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2575",
    "body": "userNames is populated only when i use users.fetch({async: false}); if i use users.fetch() i get an empty array;\n\n$(document).ready(function(){\n    var booking_model = Backbone.Model.extend({});\n\n```\nvar UserList = Backbone.Collection.extend({ \nmodel: booking_model,\nurl: 'js/bookings.json',\nparse: function(response) {return response};\n```\n\n});\n\n```\nvar users = new UserList(); //Line 26\nusers.fetch({async: false});\nvar userNames = users.pluck(\"bookingId\");\nconsole.log(userNames)\n```\n\n});\n\nMy JSON\n\n[\n        {\n            \"bookingId\": 260,\n            \"bookingSourceId\": \"Online\",\n            \"bookingTime\": \"Jan1391312: 00: 00AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"ThuJan0200: 00: 00IST3913\",\n            \"restId\": 200,\n            \"timing_id\": 200\n        },\n        {\n            \"bookingId\": 280,\n            \"bookingTime\": \"Dec25 20121: 43: 49AM\",\n            \"noOfPeople\": \"6\",\n            \"reserveDate\": \"ThuJan2600: 00: 00IST2012\",\n            \"restId\": 220,\n            \"timing_id\": 205\n        },\n        {\n            \"bookingId\": 300,\n            \"bookingTime\": \"Dec26 20122: 12: 00AM\",\n            \"noOfPeople\": \"4\",\n            \"reserveDate\": \"FriJan2700: 00: 00IST2012\",\n            \"restId\": 260,\n            \"timing_id\": 220\n        },\n        {\n            \"bookingId\": 320,\n            \"bookingTime\": \"Dec27 20122: 14: 54AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"SunJan2900: 00: 00IST2012\",\n            \"restId\": 260,\n            \"timing_id\": 201\n        },\n        {\n            \"bookingId\": 340,\n            \"bookingTime\": \"Dec25 20122: 35: 19AM\",\n            \"noOfPeople\": \"8\",\n            \"reserveDate\": \"TueJan2400: 00: 00IST2012\",\n            \"restId\": 220,\n            \"timing_id\": 205\n        },\n        {\n            \"bookingId\": 360,\n            \"bookingSourceId\": \"Online\",\n            \"bookingTime\": \"May30 391312: 00: 00AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"FriMay3000: 00: 00IST3913\",\n            \"restId\": 200,\n            \"timing_id\": 200,\n            \"bookingUser\": \"hareesh\",\n            \"bookingPhoneNo\": \"9052228181\",\n            \"bookingEmail\": \"makamhareesh@gmail.com\"\n        }\n\n```\n]\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2575/comments",
    "author": "sri85",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-05-30T16:29:50Z",
        "body": "`fetch` is async, you'll need a success/error handler or to use the promise on the jqxhr.\n"
      },
      {
        "user": "sri85",
        "created_at": "2013-06-13T08:33:31Z",
        "body": "Thanks @tgriesser it worked \n"
      }
    ]
  },
  {
    "number": 2570,
    "title": "IE form elements under the same name as the variable name",
    "created_at": "2013-05-29T06:52:25Z",
    "closed_at": "2013-05-29T07:39:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2570",
    "body": "In the template, IE form element's name under the same name with a variable, the variable will affect the normal.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2570/comments",
    "author": "lamomm",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-05-29T07:39:31Z",
        "body": "I'm afraid you'll have to give us a little more information than that, if you want help. But first, try the mailing list or the IRC channel.\n"
      }
    ]
  },
  {
    "number": 2563,
    "title": "\" this.$el.height() \" always return 0. why ? ",
    "created_at": "2013-05-27T14:33:03Z",
    "closed_at": "2013-05-27T14:56:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2563",
    "body": "Hi,\nI have a Backbone view and I try to retrieve the height of the el element after applying the view template like this \n\n``` javascript\nrender: function () {\n  this.$el.html(this.template);\n  console.log(this.$el.height());\n  // It always returns 0 \n}\n```\n\nWhy the result is always 0 ? \n\nThanks in advance\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2563/comments",
    "author": "first-developer",
    "comments": [
      {
        "user": "lfac-pt",
        "created_at": "2013-05-27T14:51:00Z",
        "body": "Templates are usually functions, shouldn't `this.template` be `this.template()`?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-05-27T14:56:11Z",
        "body": "It doesn't have a height until the element is inserted in the DOM... try this:\n\n``` js\nrender: function () {\n  this.$el.html(this.template);\n  _.defer(function() { console.log(this.$el.height()); });\n}\n```\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2013-05-27T16:34:05Z",
        "body": "His code is in the DOM as soon as it hits the `html` method.  The problem is that his View is not _inserted_ into the Document where it will have its height calculated.\n\nBasically `_.defer` may work, or it may have unintended side consequences depending on what is happening above-the-hood.  We're not getting a full scope of what @first-developer's code looks like.\n\nThis is why we have `afterRender` hooks in LM.   You can simulate your own by defining an `afterRender` method on your View, and triggering it after your code inserts the View into the Document.\n\n``` javascript\nafterRender: function() {\n  console.log(this.$el.height());\n}\n```\n\nand then later on:\n\n``` javascript\nmyView.$el.appendTo(\"body\");\nmyView.afterRender();\n```\n"
      },
      {
        "user": "first-developer",
        "created_at": "2013-05-29T06:33:29Z",
        "body": "@tgriesser You were right! I try this and it works fine for my case. However, what's @tbranyen said is also interesting and I think I will change my previous implementation to what he'was mentioning above. :+1: Guys you rock.\n"
      }
    ]
  },
  {
    "number": 2562,
    "title": "Error as a result of object.listenTo on a null/undefined 'other' is difficult to debug.",
    "created_at": "2013-05-27T06:13:24Z",
    "closed_at": "2013-06-02T03:54:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2562",
    "body": "When you accidentally pass in a null/undefined reference to the Events.listenTo method you'll get a `Cannot read property '_listenerId' of null` error at some point in the future, unfortunately this gives you very little to work with when tracking down the actual cause. \n\nIt would be great if this could be improved a little. For example, either throw an error or ignore any calls to listenTo with a null/undefined 'other'. Alternatively throw out a little more info when the error state is detected... thoughts? \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2562/comments",
    "author": "danwashusen",
    "comments": [
      {
        "user": "ifishing",
        "created_at": "2013-05-27T16:39:09Z",
        "body": "I found many methods in Backbone has not check the  passed parameter. It may cause the error info is matterless to the true root cause.It is unfriendly to the developer.\n"
      },
      {
        "user": "danwashusen",
        "created_at": "2013-05-27T23:09:44Z",
        "body": "@ifishing generally agree but the stack trace generated by this scenario is particularly frustrating as it provides little or no context to the actual issue.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-05-31T11:21:07Z",
        "body": "It seems that you're describing passing `null` as the first argument by accident (`model.listenTo(accidentallyNull, ...)`), in which case you get the error right away.  If that's the case, I think we should leave this as is.\n"
      }
    ]
  },
  {
    "number": 2556,
    "title": "How to contribute to docs?",
    "created_at": "2013-05-22T22:19:50Z",
    "closed_at": "2013-05-22T22:54:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2556",
    "body": "I'd like to add some things to the docs that have brought me trouble: lack of examples and details on some method's parameters, specifically.\n\nFor example, I just found out that Collection.remove can work like\n\n`col.remove([id1, id2, id3, id4])` or like `col.remove(new Model(col.at(2).toJSON()))`, but not like `col.remove(col.at(2).toJSON())` (that is, it can take ids, or Models, but not attribute hashes).\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2556/comments",
    "author": "Lacrymology",
    "comments": [
      {
        "user": "philfreo",
        "created_at": "2013-05-22T22:20:23Z",
        "body": "The docs are just at `index.html` in the repository.\n"
      },
      {
        "user": "Lacrymology",
        "created_at": "2013-05-22T22:28:33Z",
        "body": "So I'd have to manually edit HTML?\n\nI'm sorry, but what's this, 1996? =P\n\nNo, but seriously, I cannot do that, it'd be way beyond my time limits. I'll see about writing some markup and have it render to the proper HTML, maybe\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-05-23T16:01:03Z",
        "body": "LOL. Favorite ticket of the month.\n"
      }
    ]
  },
  {
    "number": 2546,
    "title": "Views listen to the same model, both use contenteditable elements",
    "created_at": "2013-05-20T08:28:06Z",
    "closed_at": "2013-07-26T06:38:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2546",
    "body": "In my case, there are two views both listening and editing the data in the model.\nI'm not sure if this the right way to use Backbone here, if not please close this :(\nSo both views is listening to `change:data` for changes and will update it self.\n\nIn each view there's a `.data` element which is `contenteditable`.\nWell, if a view respose to a change made by itself, then there would be a dead loop.\nI tried using `document.activeElement` to find out where I'm editing, but saw limitations.\nThen here's one I tried later. I passed the name of the view I'm editing to `model.set`,\nand verify it at the `render` method to see if that's produce by it self.\nFake code like:\n\n``` coffee\n\nclass ViewA\n  events:\n    \"blur .data\": \"update\"\n\n  render: (model, value, options) ->\n    if (not options?) or (options.triggerBy isnt 'A')\n      @$('.data').val @.model.get('data')\n\n  update: (event) ->\n    data = \"something got from a contenteditable of view\"\n    @model.set \"title\", data, triggerBy: 'A'\n\nclass ViewB\n  events:\n    \"blur .data\": \"update\"\n\n  render: (model, value, options) ->\n    if (not options?) or (options.triggerBy isnt 'B')\n      @$('.data').val @.model.get('data')\n\n  update: (event) ->\n    data = \"something got from a contenteditable of view\"\n    @model.set \"title\", data, triggerBy: 'B'\n```\n\nAnd comes another problem, there are events triggered without a `triggerBy` attribute.\nFor example, events triggered by Ajax, and will not be recognized.\nAnd I even have no idea about adding `silent: yes` to mute that event.\nSo this is not an available solution either.\n\nTo such a case, what's the solution in a Backbone way?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2546/comments",
    "author": "tiye",
    "comments": [
      {
        "user": "petermichaux",
        "created_at": "2013-07-26T04:12:35Z",
        "body": "You have two views. Each view has a contenteditable element. Both views observe the same model.\n\nWhen one of the contenteditable elements has a DOM event that focuses that element, the related view can know that and set some state on the related view. That view will then know it is currently being edited. When the model fires a change event, that view ignores the event because it is currently being edited. On the other hand, the other view is not currently being edited so it updates its contenteditable element with the current model data. \n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-07-26T06:38:38Z",
        "body": "> I'm not sure if this the right way to use Backbone here\n\nThen it's probably not appropriate to open a bug ticket about it ;) Try the mailing list or the IRC channel instead.\n"
      }
    ]
  },
  {
    "number": 2543,
    "title": "Backbone.js BasicAuth for IE 9",
    "created_at": "2013-05-17T12:49:40Z",
    "closed_at": "2013-05-17T13:14:55Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2543",
    "body": "I am doing BasicAuth with Backbone.js. I have added this js file backbone.basicauth.js in order to be able to use the BasicAuth.\n\nIn Chrome, Firefox and Safari the call works fine, first Backbone is sending OPTIONS request method and then GET request method and I am getting the response that I need.\n\nIn IE 9 there is no OPTIONS request method and in the GET request method in the Request Heders there is no 'Authorization: Basic YUBtay5tazoxMjM='\n\nI am using js libraries xdr.js and base64.js that should make it work in IE but with no result.\n\nI know that there is not CORS support in IE 9 that is causing the problem.\n\nThe web application works fine in IE 10.\n\nThe API server is in php.\n\nHad anyone had this kind of problem with IE?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2543/comments",
    "author": "onetwo12",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-05-17T13:14:54Z",
        "body": "Hi @onetwo12 - this problem sounds application specific and would be better suited to the google group or the #documentcloud IRC. The github issues are strictly for issues/features dealing with Backbone. Thanks.\n"
      }
    ]
  },
  {
    "number": 2540,
    "title": "Lost input focus after view re-render",
    "created_at": "2013-05-15T20:16:55Z",
    "closed_at": "2013-05-17T13:18:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2540",
    "body": "I have a form with several input fields. When changing values in inputs, view with form is re-rendering. Here is some piece of Backbone.View code:\n\n``` coffee\ninitialize: ->\n      @model.on('change', @render, @)\n\nevents:\n      'change input': 'change'\n\nchange: (event) ->\n      ctrl  = @$(event.currentTarget)\n      @model.set(ctrl.data('name'), ctrl.val())\n\nrender: ->\n      @$el.html(@template(@model.toJSON()))\n```\n\nBut re-rendering occurs also when I press tab key to set focus in next input and focus is lost. Is it possible to solve this problem with a little portion of code?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2540/comments",
    "author": "windheart",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-05-17T13:18:28Z",
        "body": "You might want to try not re-rendering the view on change... doesn't seem like there'd be any need to here.\n"
      }
    ]
  },
  {
    "number": 2535,
    "title": "Model.set attrs is instance of model",
    "created_at": "2013-05-14T16:34:17Z",
    "closed_at": "2013-06-05T15:42:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2535",
    "body": "Hello,\n\nI am in the process of upgrading the project I am working on from 0.9.2 to 1.0.0. I noticed a difference between 0.9.2 and 0.9.9 that was not documented:\n\n0.9.2:\n\n```\nset: function (key, value, options) {\n    ...\n    // Extract attributes and options.\n    options || (options = {});\n    if (!attrs) return this;\n    if (attrs instanceof Model) attrs = attrs.attributes;\n    if (options.unset) for (attr in attrs) attrs[attr] = void 0;\n    ...\n}\n```\n\nSpecifically:\n\n```\nif (attrs instanceof Model) attrs = attrs.attributes; \n```\n\nThis conditional behavior does not appear to be present in 0.9.9 and later.\nJust to be sure, was the removal of this line (and thus the removal of the ability to pass a model into the set method) intended? If so, can you please update the change log to reflect this?\n\nI could not find any issues or documentation about this, so I apologize if this had already been addressed.\n\nThanks for the help.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2535/comments",
    "author": "keibutler",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-05-17T13:28:10Z",
        "body": "Yep, this was an intended change - @braddunbar pointed out the reasoning for this one in #2536. I'll keep this open as a reminded to update the change log.\n"
      },
      {
        "user": "PedroNorte",
        "created_at": "2013-06-05T15:13:59Z",
        "body": "I just spent ages debugging an issue caused by this.  Please update the change log...\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-06-05T15:25:37Z",
        "body": "It's a bit of a retro fix since 0.9.9 was a couple of versions ago, but I'll patch it up.  Pull incoming.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-06-05T15:29:45Z",
        "body": "Addressed in #2591.\n"
      }
    ]
  },
  {
    "number": 2532,
    "title": "Router: Query Parameters are being ignored when using pushState but not when using hashChange.",
    "created_at": "2013-05-14T14:06:06Z",
    "closed_at": "2013-05-14T14:15:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2532",
    "body": "Since Backbone 1.0.0 the router ignores all the query parameters sent as ?something=something when using the pushState mode, but when using the hashChange mode (on pushState incompatible browsers, such as IE 9) the query strings are not ignored and when they are sent, they won't match any route.\n\neg.\nroute: 'books/backbone'\n\nurl: '#books/backbone?utm_source=twitter'\n\nThe url does not match the route because it has query strings in it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2532/comments",
    "author": "juuliaans",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-05-14T14:15:19Z",
        "body": "Hi @juliansantaana!  Query parameters are in fact ignored, but the url `#books/backbone?utm_source=twitter` does not contain any, only a hash fragment that looks like it.  If you use this url instead `?utm_source=twitter#books/backbone` I think you'll have better results.  Hope that helps.  :)\n"
      },
      {
        "user": "juuliaans",
        "created_at": "2013-05-14T14:18:42Z",
        "body": "@braddunbar \nOh, i get what you mean.\nIs there any way of using query parameters with backbone? Is there any particular reason they are being ignored?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-05-14T14:20:13Z",
        "body": "There are quite a few reasons, most of which are outlined in #891.  That thread also includes solutions using the fragment instead.\n"
      },
      {
        "user": "juuliaans",
        "created_at": "2013-05-14T15:56:18Z",
        "body": "@braddunbar \nThanks, that helped a lot. I ended up using the parameters that i was sending as query string as pretty urls. I have a question regarding this, do you know any way of \"creating\" or linking to URL that has parameters in that way, the thing is i need to change my URL on the fly depending on a date range selected, so for example the url is /something/date=20110205 and when a calendar is changed i need to change my url with router.navigate(), is there any way to replace that date= parameter that's built in with backbone?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-05-15T20:08:31Z",
        "body": "@juliansantaana Nothing in particular.  I generally just generate the url over again based on the UI parameters.\n"
      },
      {
        "user": "juuliaans",
        "created_at": "2013-05-16T00:39:43Z",
        "body": "@braddunbar thanks, i used a regexp to replace the **date=** param from the Backbone.history.fragment with the new date param. It turned out to be a pretty consistent solution.\n"
      }
    ]
  },
  {
    "number": 2522,
    "title": "Performance problem with off and stopListening. ",
    "created_at": "2013-05-08T12:13:42Z",
    "closed_at": "2013-05-08T15:16:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2522",
    "body": "I have a very big performance problem. I have a big table created with thousands views. I have a cell view because it has complex behaviour and I need that this object be a view. Each of this cell have some listenTo  to listen the events. \nSo I have a very big array _event with all events more or less 42.000 events and some of them have 42.000 callbacks. As I know that some events are only listened by the cells I off it directly by the model because is easier and quicker. \n`model.off(\"change:view\")`\nBut when a view do a stopListening(), the method off try to find the event that has this view, but this event don't exist because it was deleted by the before off. The performance problem is that the method off have to loop through 42.000 events and in some events through 42.000 context to find itself and delete it. Then we have a 42.000^42.000 loop to find nothing because this event is already deleted.\n\nShould have a way to loop the events by event, other to loop by callback and other to loop by context to do this loops efficiently. Because in this case it only loop by context and as the context don't exist the off do nothing and finish. \n\nOther problem with off is that the callback or context aren't being deleted unless this event only have one context or one callback. See the off code:\n\n``` javascript\nif (callback || context) {\n    for (j = 0, k = events.length; j < k; j++) {\n         ev = events[j];\n         if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n         }\n    }\n}\nif (!retain.length) delete this._events[name];\n```\n\nThis loop search if an event have a callback or a context different than me, and if this don't happen then it delete the event. BUT if there are a context or callback then don't delete anything, when as I think, it must delete the context or the callback if it find it, and delete the event if the event is empty after. \n\nI want to do a fork to improve all this things, but before I would like to know your opinion. What do you think about this issue?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2522/comments",
    "author": "josejamart",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-05-08T15:16:18Z",
        "body": "Morning @josejamart!  Thanks for posting.  :)\n\nI'd be glad to review a patch that increases performance of `Events#off`, but if I were you I'd start with reducing the number of events and views.  Thousands of views and tens of thousands of events is gonna put stress on your browser regardless.  If you can reduce the number of elements, I'd start there (no one can look at thousands of views at once, why not lazy load them in?).  If not, I would look at reducing the number of listeners.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-05-08T15:37:08Z",
        "body": "@josejamart - and then once you reduce the number of views/listeners, it might also be best for your case if you replaced `view.remove` and avoid `stopListening` altogether, instead manually tracking what needs to be `on` and `off`'ed for performance rather than using `listenTo`.\n"
      },
      {
        "user": "josejamart",
        "created_at": "2013-05-08T16:47:24Z",
        "body": "I think is to early to close this issue. Because you say that the solution is reduce the view, maybe. But I have other question, Why the browser needs seven seconds to create and paint 42.000 view but needs 4 minutes to delete the memory created by this view. I think is an api implementation problem. I can reduce the views but always I need more time to delete the memory than to create it. I don't understand. \n\nOn the other hand, you must review the off method because if you have two context listening one event and you launch an off to this context, when the method off finish the context isn't deleted. Why? \n\nI can help you, if you want, but I think the method off isn't well defined. We are trying to implement an single page application and we need a hight control of memory. We are doing test with the chrome profiler and in some cases the memory of the event is not releasing. \n\n@tgriesser If I need to replace remove and stopListening, Why they are defined? only to simple applications. It isn't better to do a well implementation. I think this isn't too difficult. What happen when backbone changes and add new functionality to this methods?, Should we need to change our hundred of js files to adapt it?\n"
      },
      {
        "user": "josejamart",
        "created_at": "2013-05-09T06:28:26Z",
        "body": "I'm sorry if I'm so direct. My English is bad and I don't know if I'm expressing well. I only want to help you. My questions are to make you think about it and not to complain. Sorry.\n"
      }
    ]
  },
  {
    "number": 2510,
    "title": "Model.save() with options and no key/val",
    "created_at": "2013-05-01T19:49:21Z",
    "closed_at": "2013-05-01T20:03:14Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2510",
    "body": "Using backbone 1.0.0.\n\nI have not been able to figure out how to call Model.save and pass options (success, error) and have it skip the key/val logic.\n\nWhat I've done for now is override Model.save changing the following line (50) in from:\n      if (key == null || typeof key === 'object') {\nTo:\n      if (key === null || typeof key === 'object') {\n\nThis allows me to call save as Model.save(undefined, undefined, {succes: mySuccess, error: myError}); and not have the options wiped out in the parameter logic of save.\n\nMaybe there is another way around this but I was unable to find it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2510/comments",
    "author": "cfator",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-05-01T19:56:39Z",
        "body": "@cfator is there a reason you're saving as `Model.save(undefined, undefined, opts)` rather than `Model.save(undefined, opts)`? The latter should work just fine.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-05-01T19:57:57Z",
        "body": "Or `model.save(null, {...})`, which is a bit shorter.  :)\n"
      },
      {
        "user": "cfator",
        "created_at": "2013-05-01T20:08:26Z",
        "body": "Yup that's the magic I was looking for.  I do find the parameters of Model.save() and the parameter switching behavior a bit cryptic but now that I know I can get back to business.  Thanks guys.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-05-01T20:09:22Z",
        "body": "@braddunbar right, of course :)\n"
      }
    ]
  },
  {
    "number": 2502,
    "title": "Collection firing 'change' event on added model",
    "created_at": "2013-04-24T15:07:35Z",
    "closed_at": "2013-04-24T23:05:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2502",
    "body": "I am using `listenTo` to listen for 'add' and 'change' events on a collection. When a model is added to this collection it fires both 'add' and 'change', I get that adding 'changes' the collection in a sense, is this intended behaviour and if so is there an event for when a model in a collection changes. Or if this is not intended, is it a bug?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2502/comments",
    "author": "tombell",
    "comments": [
      {
        "user": "n1vlac",
        "created_at": "2013-04-24T16:39:32Z",
        "body": "Do you have some sample code?\n\n`add` gets fired when it's a new Model. `change` gets fired when it's an existing model in the Collection and there's some change in attribute values.\n\nIt's great to set breakpoints inside Backbone (or entry points into Backbone) and watch what Backbone is actually doing. I've found it to be pretty valuable to learn how Backbone is actually implemented!\n"
      }
    ]
  },
  {
    "number": 2500,
    "title": "module.save() overwrites model data with passed options data",
    "created_at": "2013-04-24T06:41:55Z",
    "closed_at": "2013-04-24T08:14:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2500",
    "body": "Hi,\n\nIf you have \n\n<pre><code>Backbone.emulateHTTP = true\nBackbone.emulateJSON = true;</code></pre>\n\nAnd pass additional data to the ajax request on save like this:\n\n<pre><code>model.save({title: _title},{\n                    data: {\n                        action: 'dosomething' \n                    }\n                });</code></pre>\n\nIt will overwrite the module's data. So i think that before doing this inside Backbone.sync: \n\n<pre><code>var xhr = options.xhr = Backbone.ajax(_.extend(params, options));</code></pre>\n\nIt should first copy the data attributes:\n\n<pre><code>_.extend(options.data, params.data);</code></pre>\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2500/comments",
    "author": "sularome",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-04-24T08:14:48Z",
        "body": "It's supposed to be able to overwrite the model's data. If you'd like to _also_ include the model's data, simply include it where you override.\n"
      },
      {
        "user": "sularome",
        "created_at": "2013-04-25T09:06:18Z",
        "body": "Yes, but i think it's more intuitive to copy the properties that re not set like _method. Otherwise you have to set it too.\n"
      }
    ]
  },
  {
    "number": 2493,
    "title": "Don't replace a \"new\" model with the persisted model when calling Collection#set",
    "created_at": "2013-04-19T04:39:57Z",
    "closed_at": "2013-10-10T19:52:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2493",
    "body": "I'm building nested models/collections, and upon the `sync` event on my top model, I call `#set` on my nested collection, because at the `POST /api/events/` endpoint the server responds back the persisted Child models. Following is some sample code of the models/collections.\n\n``` coffee\nclass ParentModel extends Backbone.Model\n  urlRoot: '/api/parents/'\n\n  initialize: ->\n    @_setupNestedModels()\n    @on 'sync', @_setupNestedModels\n\n   _setupNestedModels: ->\n     @childCollection ?= new ChildCollection\n     @childCollection.set(@attributes.child_collection) # this is from a rails backend\n     @unset('child_collection')\n\nclass Child extends Backbone.model\n\nclass ChildCollection extends Backbone.Collection\n  model: Child\n```\n\nLet's say I create a new `Child` like so, render a view that's dependent on the child, and hit save:\n\n``` coffee\nnewChild = new Child(some: 'attribute')\n(new View model: newChild, el: $someEl).render()\n@parent.childCollection.add newChild\n@parent.save()\n```\n\nWhat happens is that the original model `ChildCollection#set` in my `#_setupNestedModels` gets removed from the collection, and in it's place is a new `Child` model that is no different other than having an `id` set. This, to me, seems a bit clunky, as I had assumed that `#set` will automatically do this merge for me since there's a `merge` option. I understand that sometimes order can't be guaranteed in a response, but I'd rather do a single `#set` (maybe even passing in an explicit options to not remove/add models) rather than manually loop through the response's attributes and update each model individually. This way, by maintaining the same model object, I won't have to re-render that view.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2493/comments",
    "author": "johnkchow",
    "comments": [
      {
        "user": "Crisfole",
        "created_at": "2013-05-06T19:45:15Z",
        "body": "I _think_ you're supposed to be using the `parse` method for what you're trying to accomplish with `_setupNestedModels`.\n\nSecondly.  Why not just call `save` on the child in this case?  That _would_ result in the behavior you're expecting.\n"
      },
      {
        "user": "johnkchow",
        "created_at": "2013-05-08T16:45:50Z",
        "body": "True about the `#parse` method, that's something I became aware of recently. Gotta refactor that eventually :)\n\nIn my case, I want a single endpoint to save the nested models. And I've wrestled with the idea of having multiple endpoints vs a single one, we as a team decided on the single endpoint. So calling `#save` on a single nested model may work (as we can just point nested model's `#url` to be the parent model's `#url`), but in my case of multiple nested models, this direction gets messy (what if I had 3 nested models but only want to update 2 of them?)\n\nI realize this is a big problem, probably too big and too specific for Backbone to address. However, I thought I'd present this issue just to start a dialogue, hopefully get to some kind of solution that doesn't require actual code changes into Backbone itself.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-10-10T19:52:50Z",
        "body": "I'm not sure that I follow what's going on in this ticket -- especially if you were to refactor your approach to take advantage of `parse`. If there's something specific you'd like to have addressed, feel free to try again.\n"
      },
      {
        "user": "Crisfole",
        "created_at": "2013-10-11T11:59:02Z",
        "body": "@jkchow So you also need to remember `toJSON` which let's you serialize data however you want.  It's the inverse of `parse`.\n"
      }
    ]
  },
  {
    "number": 2483,
    "title": "this.root undefined in line 1351",
    "created_at": "2013-04-14T11:19:38Z",
    "closed_at": "2013-04-14T12:19:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2483",
    "body": "I shim Backbone with Require.js\n\n```\nrequire.config\ndeps: ['main']\n\npaths:\n    components: '../components',\n    jquery: '../components/jquery/jquery.min',\n    bootstrap: 'vendor/bootstrap'\n    backbone: '../components/backbone/backbone'\n    underscore: '../components/underscore/underscore'\n    text: '../components/requirejs-text/text'\n    handlebars: '../components/handlebars/handlebars'\n\nshim:\n    bootstrap: \n        deps: ['jquery'],\n        exports: 'jquery'\n    underscore:\n        exports: '_'\n    backbone: \n        deps: ['jquery', 'underscore']\n        exports: 'Backbone'\n```\n\nWhen upgrading to Backbone v, 1.0 I get an error on line 1351\n\n```\nvar root = this.root.replace(trailingSlash, '');\n```\n\nThis it she content of 1347 - 1358\n\n```\ngetFragment: function(fragment, forcePushState) {\n  if (fragment == null) {\n    if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n      fragment = this.location.pathname;\n      var root = this.root.replace(trailingSlash, '');\n      if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);\n    } else {\n      fragment = this.getHash();\n    }\n  }\n  return fragment.replace(routeStripper, '');\n},\n```\n\nI don't understand why the root object is undefined on Backbone.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2483/comments",
    "author": "exoer",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-04-14T12:19:55Z",
        "body": "Mornin' @exoer!  The `root` property is set in `History#start` and would only be `null` if you've passed `null` to that function, otherwise overwritten the property, or haven't yet started `Backbone.history`.\n"
      }
    ]
  },
  {
    "number": 2474,
    "title": "Pass all $.ajax options for fetch, save, and destroy",
    "created_at": "2013-04-11T19:24:28Z",
    "closed_at": "2013-04-11T19:26:41Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2474",
    "body": "It seems like success and error callbacks are the only options passed to $.ajax. What is the benefit of this? I'm finding it very hard to add a custom header to a single API call because the only thing that has worked so far is $.ajaxSetup, but then the custom header is added to every subsequent API call. Is there an easier way to add a custom header for a single ajax call?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2474/comments",
    "author": "briansorahan",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-04-11T19:26:41Z",
        "body": "Hi @briansorahan!  Actually, all options passed to `fetch`/`save`/`destroy` are already passed through to `$.ajax`.  Enjoy!\n\n``` js\nmodel.fetch({complete: function(){ ... }});\n```\n"
      },
      {
        "user": "briansorahan",
        "created_at": "2013-04-11T19:57:01Z",
        "body": "So it is. This was def my bad. Thx!\n"
      }
    ]
  },
  {
    "number": 2472,
    "title": "pushstate navigation problem in same url?",
    "created_at": "2013-04-11T10:10:05Z",
    "closed_at": "2013-04-12T15:34:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2472",
    "body": "I have two routes. The first is the global routes and second is settings routes. I use pushstate in  my case\n\n```\nnew Demo.Routers.Root()\nBackbone.history.start({pushState: true, silent: false})\n```\n\n```\nclass Demo.Routers.Root extends Backbone.Router\n\n  initialize: (options) ->\n    this.route(/settings\\/*/, 'settings');\n\n  settings: () ->\n    if !@routeSettings\n      @routeSettings = new Demo.Routers.Settings()\n```\n\nand in my setting routes\n\n```\nclass Demo.Routers.Settings extends Backbone.Router\n\n  initialize: () ->\n    this.route(/settings\\/show/, 'show');\n    @navigate('settings/show', {trigger: true, replace: false});\n\n  show: () ->\n    console.log 12\n```\n\nwhen i press /settings/show, it doesn't fire show function?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2472/comments",
    "author": "MQuy",
    "comments": [
      {
        "user": "MQuy",
        "created_at": "2013-04-11T10:22:50Z",
        "body": "after debug backbone i found how to fix that problem\nadd <code>if (this.getHash()) fragment += '#' + this.getHash();</code> below line 1350\nand change line 1468 into <code>if (this.fragment === fragment && this._hasPushState == false) return;</code>\nIs there any conflict if I do that\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-04-12T15:35:25Z",
        "body": "The bug tracker is not your personal support forum. Please try the IRC channel or the mailing list if you're having trouble.\n"
      }
    ]
  },
  {
    "number": 2442,
    "title": "Model save callback for error",
    "created_at": "2013-03-28T10:10:27Z",
    "closed_at": "2013-03-29T13:13:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2442",
    "body": "Using backbone 1.0, I have this bit of code here:\n\n``` javascript\nmodel.save(model.attributes, {\n     success: function(model, response) {\n       console.log(model, response);\n     },\n     error: function(model, xhr, options) {\n       return console.log(model, xhr, options);\n     }\n   });\n```\n\nIs something wrong with the code above? because i get the same model object on the first two parameters, and not the actual response in the second param (this doesn't happen on backbone 0.9)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2442/comments",
    "author": "andrei4002",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-03-29T13:13:42Z",
        "body": "Hi @andrei4002!  The only things I notice is that you don't need to pass `model.attributes` since `null` will do the same thing and you don't need to return from `error`.  Otherwise, it looks correct to me.\n\n``` js\nmodel.save(null, {\n  success: function(model, response){\n    // ...\n  },\n  error: function(model, xhr, options) {\n    // ...\n  }\n});\n```\n\nWould you mind posting a fiddle/bin that illustrates this issue?  I'd be glad to take a look.\n"
      },
      {
        "user": "ellmo",
        "created_at": "2013-11-29T11:38:35Z",
        "body": "Sorry to gravedig and reopen, but I'm dealing with the same problem.\n\n``` coffeescript\n@Mario.module \"DeviseApp.Register\", (Register, App, Backbone, Marionette, $, _) ->\n\n  class Register.New extends Marionette.ItemView\n    template: 'devise/register/templates/new'\n\n    events:\n      'click #submit' : 'onSubmit'\n\n    (...)\n\n    onSubmit: ->\n      # console.log event\n      @model.save null,\n        success: (model, response) ->\n          debugger\n        error: (model, xhr, options) ->\n          debugger\n```\n\nWhen debugger session opens on `error` I get the following:\n\n```\n▹ model\n▶︎ UserRegistration {cid: \"c2\", attributes: Object, _changing: false, _previousAttributes: Object, changed: Object…}\n▹ xhr\n▶︎ UserRegistration {cid: \"c2\", attributes: Object, _changing: false, _previousAttributes: Object, changed: Object…}\n▹ xhr === model\ntrue\n▹ options\n▶︎ Object {validate: true, success: function, error: function, parse: true}\n```\n\nAs you can see the returned 2nd and 3rd params are the same object. `options` param seems to be ok, but `xhr` is nowhere to be found.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-11-29T16:24:58Z",
        "body": "Hi @ellmo!  If you can put this into a fiddle/gist/jsbin I'll be glad to take a look.\n"
      }
    ]
  },
  {
    "number": 2437,
    "title": "\"reset\" or \"sync\" Collection event ?",
    "created_at": "2013-03-27T15:50:39Z",
    "closed_at": "2013-03-27T21:21:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2437",
    "body": "I've upgraded my app with BB 1.0.\n\nI was using the \"reset\" event , like in most of BB app examples (todos mvc...) i've studied, to trigger a function after initial fetch of my Collection and this doesn't work anymore.\n\nI've changed with \"sync\" event and it works but is il normal ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2437/comments",
    "author": "benoit-nadaud",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-03-27T21:21:35Z",
        "body": "This is a change in `1.0` to use the new `Collection.set` rather than `Collection.reset` in updating the collection after a fetch. You could either listen on the `sync` event, use the `add` or `remove` events to individually add or remove items after the fetch, or pass `{reset: true}` as an option in the fetch call to trigger a full reset.\n"
      }
    ]
  },
  {
    "number": 2425,
    "title": "How get response headers after ajax request??",
    "created_at": "2013-03-25T19:51:44Z",
    "closed_at": "2013-03-25T19:54:14Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2425",
    "body": "",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2425/comments",
    "author": "amyalichkin",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-03-25T19:54:14Z",
        "body": "The ajax `xhr` object is set as `options.xhr` on the success/error handlers, you can access it there.\nAlso in the future please use the IRC or mailing list for specific questions such as this.\n"
      }
    ]
  },
  {
    "number": 2409,
    "title": "Backbone.Model.validate via callback",
    "created_at": "2013-03-20T21:38:07Z",
    "closed_at": "2013-03-20T23:42:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2409",
    "body": "There are certain cases when I want to validate my Backbone.Model values against something via AJAX. Unfortunately, Backbone's default model validation is currently done synchronously. Is it possible to convert it to a callback system instead (or offer a callback option), so that asynchronous validation is possible without having to overwrite Model save()?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2409/comments",
    "author": "EvHaus",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-03-20T23:42:18Z",
        "body": "Simply return an HTTP error code from your server and the `error` callback will be invoked.\n\n``` js\nmodel.save(attrs, {\n  success: ...\n  error: function (model, xhr) {\n    alert('Error! ' + xhr.responseText);\n  }\n});\n```\n"
      },
      {
        "user": "EvHaus",
        "created_at": "2013-03-21T00:36:18Z",
        "body": "But won't model.isValid return true, even if an error returned?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-21T00:48:18Z",
        "body": "The answer is no, it wouldn't be possible without rewriting a ton of the internals to allow for an async `model.validate`, it is only intended to be used with simple, client side validations.\n\nYou'll have to create a custom function that performs the ajax request, and then accepts a handler to determine whether you do something (like perform a model.save happen, or whatever else).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-21T01:17:22Z",
        "body": "This already works.\n\n```\nmodel.save(attributes, {wait: true})\n```\n\n... if you fail the model save with validation on the server side, the client will not see any changes.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-21T01:19:40Z",
        "body": "I don't think the question here was just for saving though, it was also for allowing async capability on `model.isValid()`.\n"
      },
      {
        "user": "EvHaus",
        "created_at": "2013-03-21T01:25:19Z",
        "body": "That's correct. Let's say I have a \"Create Model\" HTML form, which I want to validate. Some of the fields can be validated locally, but some require me to ask the server for a list of valid results (as I cannot know what they are on the client).\n\nI suppose both caseywebdev's and jashkenas' solutions would work in this case, but I thought I'd throw the suggestion out there as there are several other scenarios where it could also be useful.\n\nThe biggest issue with caseywebdev's approach is that it gets messy with model events. As a \"success\" event will fire, and then a second later (after the server returns an error) an \"error\" event will fire. But it's too late by then, because you would have already displayed a \"All good\" message to the user.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-21T01:27:07Z",
        "body": "Yeah as @jashkenas said, in that case you want `{wait: true}` on save, so if it fails on the server validation (where it can check all that stuff) it won't fire success, etc.\n"
      }
    ]
  },
  {
    "number": 2405,
    "title": "className function not being called",
    "created_at": "2013-03-20T19:00:47Z",
    "closed_at": "2013-03-20T19:20:47Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2405",
    "body": "Backbone 0.9.10\n\nI have a className function in a view, but it's not being called.  Instead, the function's string representation is being dumped into the class attribute in the element.\n\nDid support for className get removed?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2405/comments",
    "author": "mikesnare",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-03-20T19:04:24Z",
        "body": "Hi @mikesnare!  The following seems to work correctly for me.  Would you mind posting a code snippet that illustrates your problem?\n\n```\nnew Backbone.View({className: function(){ return 'x'; }}).el.className;\n'x'\n```\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-20T19:20:47Z",
        "body": "Yep, I'm not seeing any issue with this either, we can reopen if there's an example of where it's not working.\n"
      },
      {
        "user": "mikesnare",
        "created_at": "2013-03-20T20:19:14Z",
        "body": "Ugh.  Yep.  This is a bug in my code somewhere.  We have an intermediate class between our views and Backbone.View, and we extend that instead of extending Backbone.View directly.  That's causing the problem.  \n\nThanks for the response.\n"
      }
    ]
  },
  {
    "number": 2384,
    "title": "Add Backbone.Events getCallbacksCount() or hasCallbacks()",
    "created_at": "2013-03-18T00:45:44Z",
    "closed_at": "2013-03-19T01:32:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2384",
    "body": "We use Backbone.Events extensively in our application. Sometimes we would like to destroy Events object if there are no bindings left. Problem is there is no easy way to check that, as _events/_callbacks variable is \"private\" and also has been changed lately with no notice.\n\nWe would like to avoid using priv variable and have at least public method to get bindCount or just a check if there is any left. \n\nPlease let me know which one if any is ok with you guys, I can make pull-request then.\nThanks,\nTomasz\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2384/comments",
    "author": "tomaszdurka",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-03-18T02:23:06Z",
        "body": "If you're using `off`/`stopListening` when you're done with a binding the event objects are being destroyed automatically. Can you provide an example of what you're trying to achieve?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-19T01:32:25Z",
        "body": "I'm not sure what you mean by \"destroy Events object\". JavaScript is a garbage-collected language. If there are no events left, and you're not referring to the object any more, it should go away by itself.\n"
      },
      {
        "user": "tomaszdurka",
        "created_at": "2013-03-19T01:42:01Z",
        "body": "@caseywebdev \nWill describe specifically our usage: \n1. I am using Backbone.Events to bind on messages from specific channel of websockets. \n2. Each channel has its dispatcher created on first bind, I also subscribe to that websocket's channel.\n3. Whenver I unbind all of the callbacks, I want to unsubscribe from that ws channel.\nAt the moment I have no way to easily check if I can unsubscribe - are there any listeners active...?\n\n@jashkenas \nYour garbage collector example is actually up for this feature. Problem is I still have the reference to this Events object - I actually want to remove that reference, but I have no idea if there are still some callbacks left.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-19T01:48:49Z",
        "body": "Got it. Either:\n- Leave the reference, and don't worry about it. Backbone Events objects don't use up hardly any resources, unless you have millions of them.\n- Maintain a \"listeners\" count yourself, or some other form of reference counting.\n- Use the \"private\" variable.\n\nIt's not a public API that we're going to support, as 99% of Backbone apps have no use for it.\n"
      },
      {
        "user": "tomaszdurka",
        "created_at": "2013-03-19T02:03:47Z",
        "body": "1. Unfortunately, doesnt solve our problem at all.\n2. Its unmaintainable as if I bind twice the same event name I would need to reprocude the same whole Events logic in my app to get the count well. \n3. That's the only, but still awful solution. Did it first, but private api \"just\" changed. That's actually why I'm here.\n\nAll this makes Backbone.Events kinda magic box you put stuff into and cant really be sure whats there, unless you reproduce whole thing on your own (which probably is/should be nature of events dispatcher). \nYes maybe 99% will not use it, but I don't think you should always go for whatever majority do, needs.\nWe don't want heavy API change - just simple checker `return events && _.size(events) > 0;`, which would help maintain our Backbone code better.\n\nIf this would be still possible, I would be happy to write pull-request.\nThanks.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-19T02:12:15Z",
        "body": "```\nvar originalOn = Backbone.Events.on;\n\nBackbone.Events.on = function() {\n  this.eventCount++;\n  originalOn.apply(this, arguments);\n};\n```\n\n... I'm sure you can think of something.\n"
      },
      {
        "user": "tomaszdurka",
        "created_at": "2013-03-20T12:54:24Z",
        "body": "Unfortunately I see this discussion is going nowhere.\n\nJust to clarify. There is no easy way to monitor all we need as you pointed. Your example is just about counting usages of bind not counting actual bindings. I can count all the external, public stuff with no problem - only the private \"magic\" is unreachable.\n\ne.g.\n\n``` javascript\nvar dispatcher = _.clone(Backbone.events);\ndispatcher.on('foo', function () { console.log(1); });\ndispatcher.on('foo', function () { console.log(2); });\ndispatcher.off('foo');\n```\n\nYou can't easily count bindings left. You need to reproduce the whole logic of mutiple layers using event, callback, context dimensions.\n\nWe use Events lots of times in our application. It's quite heavy logic and we need to callback whenever there is no binding keft. There is no clear way to do that except _private_ variable and you need to admit that Events are a \"black box\" at the moment. Having method I asked for would enable simple way of having small preview over Events' current state. Even though 99% would not use it, doesn't matter its bad to have it. \n\nBelieve me, we tried a lot of solutions before coming to Backbone project. I think you should distinguish issues done by users who provide a lot of info instead of simple \"please-do\" requests.\nIf (I hope not) this request will be not implemented I would still like to hear what is the actual reason. For me it seems all previous solutions/recommendations are either dirty or bad.\n\nThanks,\nTomasz\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-20T13:48:18Z",
        "body": "> If (I hope not) this request will be not implemented\n> I would still like to hear what is the actual reason.\n\nNo problem. The reason is because at least 95% of Backbone apps will have no use for this method -- and we don't extend the public API for things that the vast majority of Backbone apps don't need.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-03-20T14:04:12Z",
        "body": "@tomaszdurka You can add\n\n```\nBackbone.Events.numBindings = function (name) {\n  var events = this._events || {};\n  return _.size(name ? events[name] : events);\n}:\n```\n\nto your app and simply update that method if the internal API changes. At most you'd have to do it once per BB release, but it would be isolated to a one line change.\n"
      }
    ]
  },
  {
    "number": 2379,
    "title": "Something to note about Backbone.history.navigate",
    "created_at": "2013-03-15T19:55:19Z",
    "closed_at": "2013-03-17T10:08:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2379",
    "body": "I am utilizing history with pushstates, and in the URL it requests items from our API via a middleware.  Some of those items have plus symbols (which I know is unfortunate because + is the same as a space for urlencoding).  Anytime I run a query against that item... I would return zero results (since it is asking for a space instead of a plus).\n\nI had to modify backbone very slightly to get it working\n\n``` javascript\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: options};\n      fragment = this.getFragment(fragment || '');\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n      var url = this.root + fragment.replace(\"+\", \"%2B\");\n```\n\njust added the `.replace(\"+\", \"%2B\");`\n\nTotally not a bug, but a strange edgecase you may need to be aware of.\n\nThanks for this amazing framework.  Been my goto for the last couple of years.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2379/comments",
    "author": "djwglpuppy",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2013-03-17T10:08:45Z",
        "body": "No worries -- we can't patch that, because it would be incorrectly decoding plus symbols. Instead, make sure that you encode your plusses before sending them to the server, and everything should work out just fine.\n"
      }
    ]
  },
  {
    "number": 2377,
    "title": "Don't trigger the request event if the request is cancelled?",
    "created_at": "2013-03-15T16:20:42Z",
    "closed_at": "2013-03-15T22:35:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2377",
    "body": "Is there an argument to be made for triggering the `request` event (ec97a1c) only if the request is actually made, i.e. not cancelled by a `beforeSend` returning `false` for example?\n\nPresumably backward compatibility would actually dictate adding another event which fires only if the return value of all `beforeSend` are truthy, but in general does an event indicating the actual execution of a request sound reasonable?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2377/comments",
    "author": "al",
    "comments": [
      {
        "user": "wookiehangover",
        "created_at": "2013-03-15T22:35:48Z",
        "body": "@al thanks for opening an issue.\n\nI think that the current behavior is fine as-is: modifying (or canceling) $.ajax falls outside the scope of what backbone should provide defaults for, since it strays outside of a normal RESTful workflow in Backbone.\n\nIf you need some extra complexity around $.ajax for whatever reason (cancelling requests, etc) you have a couple of options. You can implement a custom sync method, either on the Model or Collection that needs to use it or globally by overriding Backbone.sync, or you can overwrite Backbone.ajax (which just proxies to $.ajax) entirely. \n"
      }
    ]
  },
  {
    "number": 2352,
    "title": "Can't save Sublime Text 2. Keep Getting Error 2? Help!?",
    "created_at": "2013-03-09T03:13:27Z",
    "closed_at": "2013-03-09T03:36:31Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2352",
    "body": "I have no idea what is happening but earlier today i could save just fine but now I get the following Error:\n\n[Error 2] The system cannot find the file specified\n[cmd:  [u'node', u'C:\\Users\\Weber\\Desktop\\The Real Sublime Text\\Data\\Packages/JSLint/linter.js', u'--sloppy', u'--indent', u'2', u'--node', u'--nomen', u'--vars', u'--plusplus', u'--stupid', u'--todo', u'C:\\Users\\Weber\\Desktop\\HTML,JAVA Projects\\Browser Layout.html']]\n[dir:  C:\\Users\\Weber\\Desktop\\HTML,JAVA Projects]\n[path: C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\AMD APP\\bin\\x86_64;C:\\Program Files (x86)\\AMD APP\\bin\\x86;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\Program Files (x86)\\Panda Security\\WaAgent\\Common;C:\\Program Files\\Java\\jdk1.7.0_11\\bin]\n[Finished]\n\nI don't know what is happening i am a beginner. please help.\nI am on 64 bit operating system. \nthanks for even reading this.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2352/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "wookiehangover",
        "created_at": "2013-03-09T03:36:30Z",
        "body": "Not a Backbone issue. Try Freednode IRC if you have a support request and maybe someone will help you out.\n"
      },
      {
        "user": "ghost",
        "created_at": "2013-03-09T15:03:03Z",
        "body": "ok Thanks\n"
      }
    ]
  },
  {
    "number": 2349,
    "title": "delegating events on inherited views",
    "created_at": "2013-03-08T14:40:31Z",
    "closed_at": "2013-03-08T14:56:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2349",
    "body": "I have a BaseView which defines some events delegation specifying an events hash.\n\nThen I have a CustomView (extending BaseView) that also defines their own events, by also specifying an event hash.\n\nIf I'm not wrong, BaseView's event hash is overwritten, so theirs events are not processed by delegateEvent.\n\nThe documentation says to use an events function instead of a hash to handle this case.\n\nI solved it with something like this:\n\non the parent's render method I mix the parent's events with those from the child\n\n``` javascript\n    this.delegateEvents(_.merge(this.events, {\n      'show .accordion': 'collapsePanelGroup',\n      'hide .accordion': 'collapsePanelGroup'\n    }));\n```\n\nI guess this could be a pretty common scenario, so I was wondering if it's worth the effort to add something like this to delegateEvents:\n\n``` javascript\ndelegateEvents: function(events, preserve) {\n```\n\nPassing a preserve = true, would just add this.events to events and then process, or maybe define some addEvent method\n\nWhat would be the most appropriate to hadle this scenario?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2349/comments",
    "author": "opensas",
    "comments": [
      {
        "user": "dgbeck",
        "created_at": "2013-03-08T14:44:25Z",
        "body": "In the CustomView class definition, you can do:\n\n``` javascript\nevents : { return _.extend( {}, BaseView.prototype.events, {\n   'show .accordion': 'collapsePanelGroup',\n   'hide .accordion': 'collapsePanelGroup'\n} ); },\n```\n\nNot super pretty, but gets the job done!\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-03-08T14:56:55Z",
        "body": "Hi @opensas!  I often use the approach @dgbeck suggests as well.  By using a function for `events`, you can choose to extend the parent view or not.\n\n``` js\nvar Parent = Backbone.View.extend({\n  events: function() {\n    return {...};\n  }\n});\n\nvar Child = Parent.extend({\n  events: function() {\n    return _.extend(Parent.prototype.events.call(this), {\n      ...\n    });\n  }\n});\n```\n\nIf you dig through the issues you'll find a good deal of discussion on this topic and probably some good tips.\n"
      },
      {
        "user": "opensas",
        "created_at": "2013-03-09T13:29:10Z",
        "body": "Thanks a lot for the tips, I'll give them a try. (Sorry I opened a ticket for this, I guess I should have asked at stackoverflow instead).\n"
      }
    ]
  },
  {
    "number": 2343,
    "title": "Collection.create saves model even if Collection.add fails",
    "created_at": "2013-03-07T20:50:23Z",
    "closed_at": "2013-03-07T21:56:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2343",
    "body": "I have many collections where I have overridden the add function so that the collection cannot contain duplicates (duplicate defined by some properties of the model, not by id). My implementation of the add function returns false to indicate that the model was not added to the collection. \n\nI would still like to be able to use Collection.create, but create ignores the return value of my add function and saves the model regardless.\n\nIs there any reason not to change\n`if (!options.wait) this.add(model, options);`\nto\n`if (!options.wait && !this.add(model, options)) return false;`\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2343/comments",
    "author": "dehrgg",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-03-07T21:56:44Z",
        "body": "The reason is because that would only make sense for you, not the broader user base. Go ahead and override `create` if that's your desired functionality.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-07T22:02:30Z",
        "body": "Hey @dehrgg - yeah, the idea for `wait` is not to perform the `add` (on collections) or `set` (on models) until the server response has returned successfully. It might be useful to use `model.validate` to check whether the model would be valid based on your conditions and then it would block save that way, so you could continue to use the standard `Collection#create`.\n"
      },
      {
        "user": "dehrgg",
        "created_at": "2013-03-07T22:10:25Z",
        "body": "@caseywebdev I don't see how it changes anything for the broader user base, but it is understandable not to incorporate an edge case.\n\n@tgriesser `model.validate` won't work because my model is valid, just not in the context of the collection I am adding to\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-07T22:14:59Z",
        "body": "@dehrgg - It changes the semantics of `wait` from \"waiting to add until the server saves successfully\" to \"adding immediately to see if we can save\" - it defeats the purpose of `wait:true`.\n\nYou could pass a custom flag to the options, and have a line in your validate function that checked for that options item:\n\n``` js\ncollection.create(model, {creating: true});\n\n// elsewhere\nmodel.validate = function (attr, options) {\n  if (options.creating && this.collection.contains(attr.otherKey)) return \"invalid key check\";\n\n  // the rest of your validations go here.\n\n}\n```\n"
      },
      {
        "user": "dehrgg",
        "created_at": "2013-03-07T22:29:15Z",
        "body": "@tgriesser If `wait:true` was passed, the statement `!this.add(model, options)` would never be evaluated. Anyway, thanks for the help.\n"
      }
    ]
  },
  {
    "number": 2341,
    "title": "Why didn't call `model.stopListenting()` in `Collection._removeReference` when remove a model?",
    "created_at": "2013-03-07T05:09:37Z",
    "closed_at": "2013-03-07T05:17:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2341",
    "body": "This may lead to memory leak.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2341/comments",
    "author": "ivanzhaowy",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-03-07T05:17:09Z",
        "body": "Because a model can exist outside of a collection or in multiple collections. In those instances you don't want to remove events just because a model is removed from a certain collection.\n"
      },
      {
        "user": "unstoppablecarl",
        "created_at": "2013-08-16T19:08:01Z",
        "body": "Couldn't stopListening() accomplish the same thing?\n"
      }
    ]
  },
  {
    "number": 2333,
    "title": "Problem with Collection add where merge:true",
    "created_at": "2013-03-04T16:56:41Z",
    "closed_at": "2013-03-04T20:05:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2333",
    "body": "I understand there have been some existing issues to do with creating models in the as part of the update process in order to validate and parse against and I'm not sure if this is related.\n\nHow can the line:\nexisting.set(attrs === model ? model.attributes : attrs, options);\n\never do anything other than set attrs?\n\nIf you were expecting a parse to have reshaped the attrs then it is simply thrown away.\n\nEither attrs === model in which case nothing needs doing as the two objects are the same object reference.\n\nor I should be setting model.attributes over existing?\n\nFeel like I'm missing something here.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2333/comments",
    "author": "eggbeard",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-03-04T20:05:43Z",
        "body": "> Either attrs === model in which case nothing needs doing as the two objects are the same object reference.\n\nThis means that a `model` was passed into `add`, rather than a naked object. If this is the case, we need to set the `existing` model in the collection's value to the passed in model's attributes.\n"
      },
      {
        "user": "eggbeard",
        "created_at": "2013-03-05T08:30:24Z",
        "body": "Can't you always just set existing model in the collection to models attributes at this point?\n\nEither you passed in a model and it works like you describe above (thanks for the clarification - it helped me)\n\nor you have a model as a result of _prepare model (with the advantage of having been through model parse) and you can still set the existing model attributes to model.\n\nexisting.set(model.attributes, options);\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-03-05T16:04:23Z",
        "body": "> you can still set the existing model attributes to model\n\nThis is how it was implemented previously, but it turns out this leads to a bug because of the `defaults` functionality. A new model's default values would override the existing model's, which is not intended. However, I did notice that we can skip the set in the case of `attrs === existing`, thanks!\n"
      }
    ]
  },
  {
    "number": 2326,
    "title": "Original state of a model",
    "created_at": "2013-03-01T04:02:45Z",
    "closed_at": "2013-03-19T07:04:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2326",
    "body": "as backbone decided to remove `{silent}` potion from model::set #2113 . the model now is only maintenance its previous state. every change of an attribute has to sync to remote database. that is not good for performance.\n\nIn a common form, use edit fields and then submit to database. he may change his `user name` from 'foo' to 'halo' (previous: foo, current: halo), and then he change his mind to use 'foobar' (previous: halo, current: foobar). we do only need to take care the original state (previous: foo, current: foobar). but the original 'foo' lost.\n\nhow to solve this kind of user case\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2326/comments",
    "author": "Yahasana",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-03-01T04:13:01Z",
        "body": "Hi @Yahasana, thanks for your question. Every change of an attribute does not need to sync to a remote database, the `{silent: true}` changes aren't at all related to the `model.save`, unless your save was triggered by a model's change event. \n\nIn that case, you'll need to pick a different trigger for saving the model, such as a form submission, button click, or some other event that isn't a model's `change` event. \n\nDoes that help answer your question?\n"
      },
      {
        "user": "Yahasana",
        "created_at": "2013-03-01T04:35:13Z",
        "body": "Yup, I know it. I mean I want to only post changed fields but not all the attributes (model.save does). how can I get the changed fields? `model.changedAttributes` does not tell the true.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-01T04:47:07Z",
        "body": "You'll probably need to implement that functionality yourself - you could save the attributes directly on the model after a fetch and then calculate the diff against the current attributes before saving.\n\n``` js\nmodel.fetch({\n  success: function (model, resp, options) {\n    model.syncedAttributes = resp;\n  }\n});\n```\n\nthen:\n\n``` js\nvar toSave = {};\n_.each(model.attributes, function (value, key) {\n  if (!_.has(model.syncedAttributes, key) || !_.isEqual(model.syncedAttributes[key], value)) {\n    toSave[key] = value;\n  }\n});\n```\n"
      },
      {
        "user": "Yahasana",
        "created_at": "2013-03-01T04:53:04Z",
        "body": "@tgriesser thanks. `model.syncedAttributes` is kinda original state. I hope backbone gives me such kind of feature ;-). as the `model.previousAttributes` useless for this case, which is the most truly life.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-03-01T04:55:17Z",
        "body": "It's come up a few times recently. Can I ask why you're looking to only sync specific attributes?\n"
      },
      {
        "user": "Yahasana",
        "created_at": "2013-03-01T05:00:24Z",
        "body": "I have a form with dozens of models and each model has more than a dozen fields. post all these fields every times are heavy burden for the server. l'm building a survey / quiz builder base on amazing backbone.\n"
      },
      {
        "user": "Yahasana",
        "created_at": "2013-03-01T05:36:10Z",
        "body": "In a real perfect world. a model should maintenance 3 states: origin,  previous and current\n\n`origin` is the server state\n`previous` is the temporary state, which use for event triggers (origin state)\n`current` is what the model is now, which is also useful for event triggers.\n\nwhen sync to remote server, we only take care of the `origin` and `current` state of a model. the `previous` state is ignore.\n\nsync `previous` and `current` state to remote server is expensive. if we have 10 fields and sync every changes, it'll be 10 request. amazon will very happy as it count on the request times. if we sync 10 changes in one request, it'll save 9x money.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-19T07:05:07Z",
        "body": "Please do not open a bug ticket to ask a question. Ask on the mailing list or in the IRC channel instead.\n"
      }
    ]
  },
  {
    "number": 2313,
    "title": "model.change removed from 0.9.10?",
    "created_at": "2013-02-26T16:42:12Z",
    "closed_at": "2013-03-19T07:13:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2313",
    "body": "Why was model.change removed from 0.9.10?  We're building a python based big data visualization library, where we push models down over websockets from python, and render a graph of models into a variety of plots.\n\nWe have infrastructure for interdependent computed properties which facilitate interactions on the plots.\n\nwhen we push models down from the server, we instantiate them all, set all the attributes silently, and call change on all of them.  This allows us to ensure that all the interdependent models are ready before the change events fire.\n\nWe can easily add change into our superclass, is there something wrong though with using the approach to model.change that will break in the future?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2313/comments",
    "author": "hhuuggoo",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-02-26T17:00:22Z",
        "body": "Hi @hhuuggoo - it looks like it's mentioned as the last item in the change log:\n\n> The Model#change method has been removed, as delayed attribute changes are no longer available.\n\nIs there a reason that you go through the process of instantiating them manually, as opposed to instantiating them through a collection `reset`, which would prevent the change events from firing by default? Then you'd be able to listen on the `reset` event to know that all of the models had been properly instantiated.\n\nCan you describe a little more about your use case - and why the `change` event is necessary for the individual models?\n"
      }
    ]
  },
  {
    "number": 2309,
    "title": "How to send data to JAVA actions in Backbone",
    "created_at": "2013-02-25T01:59:06Z",
    "closed_at": "2013-02-25T02:42:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2309",
    "body": "For example,I can get data from JAVA action by fetch method,but how can I save a model to JAVA action?How to use the save method?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2309/comments",
    "author": "xulianghhu",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-02-25T02:42:49Z",
        "body": "Try redirecting this question to the Backbone.js IRC or Stack Overflow. The GitHub issues are for Backbone.js itself, rather than specific applications of it.\n"
      }
    ]
  },
  {
    "number": 2305,
    "title": "Maybe a bug in model.get(), model.set() - maybe intention",
    "created_at": "2013-02-22T10:20:09Z",
    "closed_at": "2013-02-26T18:47:33Z",
    "labels": [
      "wontfix",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2305",
    "body": "Hey,\nI am not sure if this is happening by design or a bug.\n\nI want to retrieve a value from a model, modify it and then set it back to the model, for example like so:\n\n```\nvar members = mymodel.get('members');\nmembers.push('somebody');\nmymodel.set('members', members);\n```\n\nThe problem is: since the value is returned by reference, my `members.push()` directly affects the content of `mymodel.attributes.members`.\nWhen I call the `mymodel.set()`, it won't trigger a change event, since it assumes that the model has already been changed.\n\nI would assume that .get() returns a clone of the model value to avoid unintended changes of the model. If this is the desired behavior, I would suggest to add a little notice in the docs of the `model.get()` function.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2305/comments",
    "author": "Paratron",
    "comments": [
      {
        "user": "Paratron",
        "created_at": "2013-02-22T16:13:23Z",
        "body": "Update:\nThis also happens when you call the `getJSON()` method of the model.\n\n```\nvar dta = mymodel.getJSON();\ndta.members.push('test');\n```\n\nAfter this code, the `mymodel.attributes.members` object is compromised.\n"
      },
      {
        "user": "moudy",
        "created_at": "2013-02-22T16:35:50Z",
        "body": "@Paratron by `getJSON` do you mean `toJSON`? in that case a clone of the attributes is returned but it's not a deep clone so the array is copied by reference.\n\nre your first point about `model.get()` returning a reference and not a clone... thats only an issue when the value is not a primitive value. i've solved this issue by just cloning it myself `var members = _.clone(mymodel.get('members'))` but it would be nice to not have to keep track of when that's necessary.\n\nnot sure what the solution is to avoid this confusion, maybe `model.get()` should return a clone of the value if it's not primitive?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-02-22T16:38:45Z",
        "body": "Hi @Paratron!  This is definitely by design.  Model#get is a fairly hot code path and thus shouldn't do any cloning.  Model#toJSON, on the other hand, is used for persisting the model to the server.  Besides having lesser performance requirements, it is generally assumed that data may be altered in Model#toJSON before being sent to the server.  Such alterations are usually not done to data returned from Model#get, so no cloning is necessary.\n\n_Edit: I'm assuming you meant Model#toJSON, not Model#getJSON.  If not, please let me know._\n"
      },
      {
        "user": "Paratron",
        "created_at": "2013-02-22T16:41:43Z",
        "body": "@moudy\nYes, of course, I meant `toJSON()`. sorry.\n\nI am aware of the performance loss it will cause to clone every value returned by get but this way one does always have to be careful about what he's doing with the retrieved values...\n\nI think for the beginning, I am going to extend Backbone.Model with a method `gets()` (short for get safe), which returns a cloned value.\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-02-26T18:47:32Z",
        "body": "@Paratron - sounds like a good option - another option as I mentioned in #2315, would be to replace the `get/toJSON` on the Model's prototype, if you would prefer using deep cloned attributes across your application:\n\n``` js\nBackbone.Model.prototype.toJSON = function () {\n  return JSON.parse(JSON.stringify(this.attributes));\n};\n\nBackbone.Model.prototype.get = function (key) {\n  var attrs = JSON.parse(JSON.stringify(this.attributes));\n  return attrs[key];\n};\n```\n"
      }
    ]
  },
  {
    "number": 2302,
    "title": "Error at previous attributes when you do some sets in the same model. ",
    "created_at": "2013-02-21T12:30:18Z",
    "closed_at": "2013-02-25T23:59:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2302",
    "body": "Related with #2301, \nIf we have this model { code : 2, text : \"hi\", value : 20 }\nand we do some sets on a model as:\n\nmodel.set(\"text\",\"good bye\");\nmodel.set(\"code\",1);\nmodel.set(\"text\",\"hello again\");\nmodel.seet(\"value\",25);\n\nand then we ask to\n\nmodel.previousAttributes()\n\nthen this returns \n\n{ code : 1, text : \"hello again\", value : 20 }  but this must be {code: 2, text : \"good bye\", value: 20}\n\nThe method set is overriding the previous attributes in each call without checking if each attribute is changed or not. The previous attributes must contains the previous value of each property independently of the other property changes.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2302/comments",
    "author": "josejamart",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-02-25T23:59:03Z",
        "body": "Discussion moved to #2301\n"
      }
    ]
  },
  {
    "number": 2277,
    "title": "Shouldn't .get() return a copy of the attributes data?",
    "created_at": "2013-02-15T14:34:29Z",
    "closed_at": "2013-02-15T14:38:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2277",
    "body": "",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2277/comments",
    "author": "wemakeweb",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-02-15T14:38:18Z",
        "body": "If you're looking to get a copy of the attributes data, you can use `model.toJSON()` or `_.clone(model.attributes)`.\n"
      }
    ]
  },
  {
    "number": 2273,
    "title": " parameter 'invalid' in options when using collection.create",
    "created_at": "2013-02-14T13:48:25Z",
    "closed_at": "2013-03-19T05:13:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2273",
    "body": "if Model validation fails then the 'invalid' event is fired from the model...but if we are using collection.create, we do not have a reference to model yet:\n\ncreate: function(model, options) {\n   ...\n   model.save(null, options);\n   return model;\n}\n\nwe currently have success and error parameters for the options object...can we add an invalid parameter to handle this case?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2273/comments",
    "author": "arieljake",
    "comments": [
      {
        "user": "wookiehangover",
        "created_at": "2013-03-19T05:13:52Z",
        "body": "@arieljake the 'invalid' event is triggered on the collection and is passed the invalid model. The `success` and `error` callbacks from the `options` object are passed as options to model.save (and ultimately to $.ajax), so having an `invalid` callback wouldn't make much sense in context with the other two. And since model validation errors emit an 'invalid' event on both the model _and_ the collection, you've already got everything you need to handle this use case.\n\nHere's an example:\n\n``` javascript\ncollection.on('invalid', function(model){\n  // do stuff with `model`\n});\n\ncollection.create({ some: 'invalid model' }, { validate: true });\n```\n"
      }
    ]
  },
  {
    "number": 2248,
    "title": "Model.save 202 status code = error?",
    "created_at": "2013-02-07T15:53:36Z",
    "closed_at": "2013-02-14T15:11:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2248",
    "body": "Hi - I have an API which returns a status code of 202 when creating a new user that still needs information before it is usable (e.g. email verification).  When I save my model in Backbone, it comes up in the error handler (rather than in \"success\").\n\nShouldn't all 2xx level status codes come up as success?\n\nThanks for your input.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2248/comments",
    "author": "switzer",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-02-07T15:57:08Z",
        "body": "Hi @switzer!  I believe so, but Backbone relies on `Backbone.$` (usually `jQuery`) for this decision so whatever ajax library you're using is more likely the culprit.\n\nAlso, jQuery has recently started treating json responses that are not valid as errors.  For instance, if your endpoint returns an empty response then jQuery will consider it failed.  This is probably the most likely case.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-02-14T15:11:56Z",
        "body": "Gonna close this since the choice to fire `success` or `error` based on the AJAX response is the AJAX library's choice, not Backbone's, as @braddunbar says.\n"
      },
      {
        "user": "alex-dow",
        "created_at": "2017-02-28T17:57:30Z",
        "body": "searching for jquery 202 error, this thread comes up in the top ten results.\r\n\r\nas such I will just add a comment here that jQuery adheres to HTTP protocol in a very strict way. As such, a 202 response that contains an empty body will cause jQuery to consider the request in error (it wants to parse something but nothing is there). I've been trying to find the justification for this behavior from jQuery itself but haven't been able to do so. Either have your API return a body with the 202 or have the API return a 204."
      }
    ]
  },
  {
    "number": 2229,
    "title": "sync event firing",
    "created_at": "2013-01-31T21:33:18Z",
    "closed_at": "2013-02-01T17:14:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2229",
    "body": "I want an event like 'sync' to be triggered before the success function so that I can bind the event in the success function without it being executed right away\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2229/comments",
    "author": "jkbailey",
    "comments": [
      {
        "user": "jkbailey",
        "created_at": "2013-01-31T21:39:07Z",
        "body": "maybe something like a 'response' event\n\n``` javascript\n...\n    var success = options.success;\n    options.success = function(resp) {\n++      model.trigger('response', model, resp, options);\n      if (success) success(model, resp, options);\n      model.trigger('sync', model, resp, options);\n    };\n...\n```\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-01-31T21:52:23Z",
        "body": "Would the `request` event work? This is called by `Backbone.sync` before every request regardless of success/error.\n\n> \"request\" (model, xhr, options) — when a model (or collection) has started a request to the server.\n\nOtherwise, you could just trigger an event in your success handler:\n\n``` js\nmodel.fetch({\n  success: function (model, resp, options) {\n    model.trigger('response', model, resp, options);\n    //... rest of your success handler here\n  }\n});\n```\n"
      },
      {
        "user": "jkbailey",
        "created_at": "2013-01-31T22:13:06Z",
        "body": "Well, the request event won't work because i don't it to trigger if there is an error.\n\nHere is my dilemma, I have a collection of messages. I initially fetch the messages and in the success of that fetch I create a new view to display those messages. On the init of that view I want to attach a trigger so that whenever a new messages is added to the collection and successfully saved to the DB it updates my list of messages. So I could use the add event, but that is triggered before the data is saved to the DB. That is why I chose to use the 'sync' event, but then realized that right after the view is initialized (from the success function of fetch) the sync event is firing. Does that make sense?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-01-31T22:27:08Z",
        "body": "It sounds like what you probably want to do is add `wait:true` in the options when you're creating the new model, so the add event isn't fired until it syncs with the database.\n\n> Pass {wait: true} if you'd like to wait for the server before adding the new model to the collection.\n"
      },
      {
        "user": "jkbailey",
        "created_at": "2013-01-31T22:42:04Z",
        "body": "from my experience the `add` event doesn't fire a database sync, does it?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-01-31T23:13:54Z",
        "body": "The `create` method on the collection does an `add` and `save` at the same time, I assumed that's what you'd be using, then you would just listen on add rather than `sync`.\n"
      },
      {
        "user": "jkbailey",
        "created_at": "2013-02-01T17:08:37Z",
        "body": "wow... don't I feel dumb...\n"
      },
      {
        "user": "jkbailey",
        "created_at": "2013-02-01T17:09:16Z",
        "body": "for some reason i never knew the create method existed :(\n"
      },
      {
        "user": "jkbailey",
        "created_at": "2013-02-01T17:11:27Z",
        "body": "I had this in the init of my collection...\n\n```\n        t.on('add',function(msg,opt) {\n\n            msg.save(msg.attributes,{\n                success: function(m,r,x) {\n                    m.trigger('response', m, r, x);\n                    console.log('message sent successfully');\n                },error: function() {\n                    console.log('error saving message');\n                }\n            });\n\n        });\n```\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2013-02-01T17:14:27Z",
        "body": "Glad you got it sorted out!\n"
      }
    ]
  },
  {
    "number": 2227,
    "title": "Is set supposed clear changed?",
    "created_at": "2013-01-31T18:20:30Z",
    "closed_at": "2013-01-31T18:29:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2227",
    "body": "Is this supposed to be happening?\n\n``` javascript\nmodel = new Backbone.Model;\nmodel.set('one', 1, {silent:true});\nmodel.changed  // returns {one: 1}\nmodel._previousAttributes // returns {}\n\nmodel.set('two', 2, {silent:true});\nmodel.changed // returns {two: 2}\nmodel._previousAttributes // returns {one: 1}\n```\n\nThis is with backbone 0.9.10\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2227/comments",
    "author": "vizjerai",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-01-31T18:28:40Z",
        "body": "Hi @vizjerai!  Prior to 0.9.10, `changed` was cleared after each change.  However, it is now preserved until the next change and reflects all the changes from the last change set.  This allows us to find out if an attribute was changed during the last `set`.\n\n``` js\nvar model = new Backbone.Model;\nmodel.set({x: 1});\nmodel.hasChanged('x') // true\nmodel.hasChanged('y') // false\n```\n\nOn an unrelated note, `silent` will not change the outcome in this case and I would discourage its use altogether (#2113).\n\n_Edit: Forgot to add code_\n"
      }
    ]
  },
  {
    "number": 2225,
    "title": "'Fetch' can't be bound to a 'change' event",
    "created_at": "2013-01-31T10:38:01Z",
    "closed_at": "2013-01-31T13:19:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2225",
    "body": "Hi,\n\nI have a collection that listens to changes in a model to then update itself, like this:\n\n```\nthis.listenTo(this.user, \"change:addresses\", this.fetch);\n```\n\nAnd it was getting back the user's own data, instead of the expected. After some probing I figured that `change` events pass `(model, value, options)` to the callbacks, which in this case meant `sync` was eventually getting the user model as it's `option` param.\n\nThe user model has its own url, and 8478567 means it is then overriding the collection's url for the request.\n\nI understand this is an edge case, and can be easily circumvented by using `function(){ this.fetch(); }` instead, but maybe it deserves some looking into. Specially since I believe this also means `fetch` can't be bound to any event.\n\nRight now I can't think of a good way to solve it that won't break 8478567, though. Maybe needing to explicitly state you want to override the request settings in `sync`?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2225/comments",
    "author": "Dhekke",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-01-31T13:19:26Z",
        "body": "Mornin' @Dhekke!  Thanks for pointing this out.  I don't think there's any action Backbone should take here though.  You'll have to deal with function arguments in any case and the extra wrapper function is a pretty standard pattern.  I often create a separate handler, which I think is cleaner sometimes, but it's really just adding a bit of indirection.\n\n``` js\ninitialize: function() {\n  this.listenTo(this.user, 'change:addresses', this.changed);\n},\nchanged: function() {\n  this.fetch();\n}\n```\n"
      },
      {
        "user": "Dhekke",
        "created_at": "2013-01-31T13:35:31Z",
        "body": "@braddunbar Yeah, I imagined it wasn't worthy of a patch. Thanks for the reply!\n"
      }
    ]
  },
  {
    "number": 2203,
    "title": "JSDoc support for better code completion in IDEs (especially, in PHPStorm)",
    "created_at": "2013-01-27T15:33:05Z",
    "closed_at": "2013-01-28T14:47:24Z",
    "labels": [
      "wontfix",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2203",
    "body": "Is it ok to add \n\n```\n/** @lends Backbone.Model */ \n```\n\nand other JSDoc comments to make better code completion for methods in IDE. I can write pull request by myself, but do you want such request in your code?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2203/comments",
    "author": "gugu",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-01-28T14:47:24Z",
        "body": "Hi @gugu!  Thanks for asking about this.  While I understand the reasons for such changes, Backbone's source is written in a literate style meant to improve readability of comments as a standalone document and I don't think that JSDoc comments will be included any time soon.\n"
      }
    ]
  },
  {
    "number": 2179,
    "title": "options.context not being passed to success function in Backbone.sync ",
    "created_at": "2013-01-22T19:22:41Z",
    "closed_at": "2013-03-19T11:17:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2179",
    "body": "I just upgraded from 0.9.2.  I am doing something like this:\n                xhrOptions = {};\n                xhrOptions.url = validationUrl;\n                xhrOptions.context = myContext;\n                xhrOptions.success = function (resp, status, xhr) {\n                    this.validationSuccess(resp, attrs, options);\n                };\n                xhrOptions.data = JSON.stringify(_.extend(this.toJSON(), attrs));\n                xhrOptions.contentType = 'application/json';\n                Backbone.sync(\"create\", this, xhrOptions);\n\nPreviously, the success function would have this set to myContext from the options, so it would call myContext.validationSuccess. It no longer has the context set from the options.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2179/comments",
    "author": "bkujala",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2013-01-22T19:46:50Z",
        "body": "`success`/`error` callbacks aren't called with a specific context. The new `success` signature is also `(model, resp, options)`. Your best bet is to use\n\n``` js\nxhrOptions.success = function (model, resp, options) {\n  myContext.validationSuccess(resp, attrs, options);\n  // or if you can't reach `myContext` for whatever reason...\n  options.context.validationSuccess(resp, attrs, options);\n}\n```\n"
      },
      {
        "user": "bkujala",
        "created_at": "2013-01-22T20:06:41Z",
        "body": "In 0.9.2, they were called with the specific context. \nThe Backbone documentation for options says:\n\n> options – success and error callbacks, and all other jQuery request options\n\nIn the jQuery.ajax documentation, context says:\n\n> This object will be made the context of all Ajax-related callbacks. By default, the context is an object\n> that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).\n\nIs this an intentional deviation?\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-01-22T20:21:35Z",
        "body": "This is a side effect of Backbone trying to be more agnostic as to the method of persistence you're choosing.\n"
      }
    ]
  },
  {
    "number": 2160,
    "title": "Weird behavior when model.save if option.validate is not set",
    "created_at": "2013-01-18T19:45:06Z",
    "closed_at": "2013-01-18T20:34:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2160",
    "body": "When validate is not set when calling model.save, it will call 'model.set' in 'model.save' with option passed in, so no validation. Later, option will be extended with {validate : true}, which makes 'model.save' fail. However, since the 'model.set' is done, the data presented wrongly in the view.\n\nI think the behaviors should be consistent, maybe. If no validate: true in option, it doesn't extend the option and check when save.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2160/comments",
    "author": "LLLLKKKK",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-01-18T20:22:46Z",
        "body": "@LLLLKKKK - I believe the best way to go about this would be to pass `wait:true` into the `model.save` so that the `set` call isn't applied until the model is both validated and a success is returned by the server. The other option, if you don't want to wait on the server call, would be to get a copy of the attributes, and if the `model.save` returns false, reset the model to those attributes.\n\n``` js\nvar currentAttr = _.clone(model.attributes);\nif (!model.save(attr)) {\n  model.clear({silent:true}).set(currentAttr);\n}\n```\n"
      },
      {
        "user": "LLLLKKKK",
        "created_at": "2013-01-18T20:34:59Z",
        "body": "@tgriesser Thanks a lot\n"
      }
    ]
  },
  {
    "number": 2105,
    "title": "Suggestion: in Model.set and/or Model.save - call Model.parse() or something equivalent?",
    "created_at": "2013-01-10T19:57:09Z",
    "closed_at": "2013-03-19T11:53:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2105",
    "body": "I am finding situations where I would like the Model to \"intercept\" the attribute being set (or saved to it) and calculate other \"attributes\" which I'd like to add to the set of attributes currently being set/saved.  \n\nSeems it would be more efficient to have this ability cooked into the Model definition (just like parse), rather than having the Model or Collection \"listen\" for the change in question and react to it.  I get concerned about registering so many \"listeners\" on the _events stacks.\n\nOverloading \"parse\" with this is probably not a good idea, since parsing the attribute data being sent/returned from server may likely need different \"intercept / transform\" logic than what I am proposing above.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2105/comments",
    "author": "kidplug",
    "comments": [
      {
        "user": "philfreo",
        "created_at": "2013-01-10T19:59:40Z",
        "body": "See #2013 for the same question/suggestion, and my comment there. I wouldn't worry about having too many listeners if you're just wanting to do some basic derived attributes.\n"
      },
      {
        "user": "kidplug",
        "created_at": "2013-01-10T21:04:47Z",
        "body": "I looked at that and also saw @braddunbar comment about using `o.set(o.parse(attr))` which could definitely work.\n\nBut why should i clutter up my code, and also force all the other models / views to know they need to call that particular model that way?  Better design to have the Model definition itself \"opt\" to transform the data/attr being set/saved to it.  The concept is similar to a database table \"trigger\" which has the opportunity / ability to intercept data and change it before it is entered into the table.   \n\nNow certainly the whole concept of `on(\"change\")` in Backbone is suited to this.  But when it is the very **Model** listening to **Itself**, that seems inefficient / sub-optimal.  Especially since you're talking about listening for a `self.change event` in order to do another `self.set()` which will trigger another **change** event!\n\nAgain - I don't think using the existing `parse()` function is appropriate - rather a `transform() or intercept()` method which can be optionally added to a `Model`, and be called during `set() and save() (if wait:true)`.  (Note: in `save() with wait:true`, the `transform()` should happen in `save()` versus in `set()` ).\n"
      },
      {
        "user": "philfreo",
        "created_at": "2013-01-10T21:09:06Z",
        "body": "What you're asking for is mutator / computed properties functionality (with setter support). While I'd +1 this in Backbone also if there was a good pull request for it, for now I'd suggest something like the gist I linked to.\n"
      },
      {
        "user": "kidplug",
        "created_at": "2013-01-10T21:28:40Z",
        "body": "@caseywebdev did my earlier suggestion today ;)\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-01-10T21:30:57Z",
        "body": "@kidplug getter/setter support has been turned down many times in the past, but if you can convince the masses you could get it merged\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-01-10T22:40:22Z",
        "body": "Hi @kidplug!  What type of functionality would you use this feature for?  Are you actually experiencing performance problems with listening for `\"change\"` events or are you just anticipating them?  Listening for `\"change:attr\"` will prevent an extra `\"change\"` event.\n\nIn all cases I've seen, listening for change events was sufficient and performant.  If you need more speed/control than that, you can always override the method (despite requiring a small amount of boilerplate, this is certainly the best way to intercept and mutate arguments).  There are already two viable ways to accomplish this functionality and I think a third would just cause confusion.\n"
      },
      {
        "user": "kidplug",
        "created_at": "2013-01-11T06:32:58Z",
        "body": "Thanks for the feedback.  @caseywebdev  - can you explain what you mean by getter/setter support?  I don't follow what you mean in this context.  I'm talking about an optional `intercept()` method on a Model, which would be called automatically during `set()` just like `parse()` is called automatically (if it exists) during `fetch()` .\nIt would function the same way:\n`intercept: function(attr) {\n     return attr_modified_or_enhanced;\n}`\n\n@braddunbar  an example use case here is to automatically convert an incoming Date string, converting it to a Date object, or millisecond timestamp which i want to have on the Model for filtering and for the View to properly position the corresponding element for the model.   I may also want to calculate another \"derived\" value - like duration.\nAnd NO - i am not experiencing performance issues now - just anticipating a performance impact at some point once I have thousands of models adding the \"weight\" of all these unwanted listeners, and trying to have optimal (i.e. low) numbers of event listeners as much as possible.  (The page in question is very dynamic, data-wise and UI-wise).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-03-19T11:53:45Z",
        "body": "Define a new method, and use it instead of `set` ... or override `set` and wrap it with your transformations, and call `super`. There are many easy ways to go.\n"
      }
    ]
  },
  {
    "number": 2089,
    "title": "Model id no longer settable via attributes hash",
    "created_at": "2013-01-08T11:52:28Z",
    "closed_at": "2013-01-08T14:26:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2089",
    "body": "I have a model which I create using:\nvar model =  new MyModel({ id: 42 });\n\nIn Backbone 0.9.2 this worked fine, however in Backbone 0.9.9 this no longer works and I must:\nvar model = new MyModel();\nmodel.id = 42;\n\nThe same issue is exhibited when performing:\nmodel.set({'id': 42});\n\nThe backbone documentation states that the id may be set via the attributes hash, but this appears not to be true for 0.9.9. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2089/comments",
    "author": "bazwilliams",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-01-08T12:17:39Z",
        "body": "Hi @bazwilliams!  Thanks for pointing this out.  I can't seem to reproduce it using 0.9.9 though.  Would you mind posting your code for `MyModel`?\n"
      },
      {
        "user": "bazwilliams",
        "created_at": "2013-01-08T13:49:36Z",
        "body": "Hi @braddunbar, I can't provide the original Model, but when reproducing on a smaller scale everything worked correctly. \n\nHowever, I eventually found the problem; it occurs when there is a validation function on the model. If the ID is set via the hash or constructor style and there is a validation function, the set will be aborted leaving the id undefined. In our case we were creating a model with the id in the constructor and then calling fetch(). The fetch failed due to a missing id in the URL, which wasn't set because the validation fails due to missing mandatory fields. \n\nI.e:\n\nvar model = new MyModel({id: 42});\nmodel.fetch();\n\nBecause the validation fails due to missing fields, the ID is not assigned to model.id which results in the fetch() using an incorrect URL. \n\nSetting model.id explicitly resolves the issue. \n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-01-08T14:26:38Z",
        "body": "I see.  What version of Backbone are you using?  In the master branch, `validate` has been changed a bit.  In particular, models are validated by default during `save`, but only by request (via `options.validate`) during `set`.  Glad you figured it out.  :)\n"
      }
    ]
  },
  {
    "number": 2087,
    "title": "`route` event now fired by router and history",
    "created_at": "2013-01-08T02:38:54Z",
    "closed_at": "2013-01-08T13:18:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2087",
    "body": "Since PR #2062 got merged into master there are now two places that `route` is triggered:\n1.  On the router \n2.  On BB.History\n\nIt seems odd to me that there is an identical event name being triggered in two different locations.\n\nIs there a particular reason why this behavior is desired?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2087/comments",
    "author": "hswolff",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-01-08T03:35:30Z",
        "body": "It feels similar to how the `change` or `remove` events are fired on both the model and the collection containing the model - but @braddunbar might have a better idea.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-01-08T12:26:14Z",
        "body": "Hi @hswolff!  `Backbone.history` triggers `route` for all routes on all routers.  Triggering the event on the route itself is just a shortcut for filtering out route events by router.\n\n``` js\n// This...\nBackbone.history.on('route', function(router, name, args) {\n  if (router === myRouter) {\n    // ...\n  }\n});\n// is more easily written as...\nmyRouter.on('route', function(name, args) {\n  // ...\n});\n```\n\n@hswolff It's mostly sugar, but I think it's a nice addition for folks that use multiple routers in a page.\n"
      },
      {
        "user": "hswolff",
        "created_at": "2013-01-08T13:18:53Z",
        "body": "Fair enough.  Seemed redundant to me at first glance but that makes sense.  Thanks for the explanation @braddunbar \n"
      }
    ]
  },
  {
    "number": 2078,
    "title": "Collection fetch does not render on \"add\" event",
    "created_at": "2013-01-06T14:43:46Z",
    "closed_at": "2013-01-12T18:24:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2078",
    "body": "I've set up this AppView that triggers the overall Backbone's application!\nI want to fetch my collection and dynamically add items when the \"add\" event is thrown!\n\n```\nvar AppView = Backbone.View.extend({\n    el: $('#pics'),\n\n    initialize: function () {\n\n        // Fetch contents\n        this.collection = new PLibrary;\n        this.collection.on(\"add\", this.renderMessage, this);\n\n        $.ajaxSetup({async: false});\n        this.collection.fetch({update: true});  // fires an \"add\" event for every new model\n        $.ajaxSetup({async: true});\n\n        _.bindAll(this, 'render');\n    },\n\n    renderMessage: function(p){\n        var mV = new PRow({model: p});\n        this.$el.append(mV.render().el);\n    }\n\n});\n```\n\nThe code above sends the Ajax request to the server, but nothing gets displayed.\nInstead... If I make use of render() like this... the application works.\n\n```\nvar AppView = Backbone.View.extend({\n    el: $('#pics'),\n\n    initialize: function () {\n\n        // Fetch contents\n        this.collection = new PLibrary;\n        this.collection.on(\"add\", this.renderMessage, this);\n\n        $.ajaxSetup({async: false});\n        this.collection.fetch();\n        $.ajaxSetup({async: true});\n\n        _.bindAll(this, 'render');\n        this.render();\n    },\n\n    renderMessage: function(p){\n        var mV = new PRow({model: p});\n        this.$el.append(mV.render().el);\n    },\n\n    render: function() {\n        var self = this;\n        _.each(this.collection.models, function (item) {\n            self.renderMessage(item);\n        }, this);\n    }\n\n});\n```\n\nIt seems that the \"add\" event doesn't get thrown!\nHelp me please\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2078/comments",
    "author": "omsoft",
    "comments": [
      {
        "user": "yuku",
        "created_at": "2013-01-06T16:14:17Z",
        "body": "`Collection#fetch` uses `Collection#reset` internally by default and it triggers `\"reset\"` event on the collection instance but doesn't tigger `\"add\"` event.\nIf `{update: true}` is given to `Collection#fetch` then `Collection#update` is executed and it may trigger `\"add\"`, `\"remove\"` and `\"change\"` events.\nSo, there are two solutions.\n1. Set `render` as callback of collection's `\"reset\"` event\n2. Give `{update: true}` to `Collection#fetch`\n\nI like 1. Because it is easy to implement and `update` is a little heavier than `reset`.\n"
      },
      {
        "user": "omsoft",
        "created_at": "2013-01-06T17:14:04Z",
        "body": "If you take a closer look at my first code snippet, you'll see the call fetch({update: true}).\nMy question is, infact, why it doesn't work?\n"
      },
      {
        "user": "yuku",
        "created_at": "2013-01-06T18:50:54Z",
        "body": "Oh, excuse me. The first code looks correct. ummm\nCould you show me the console string of following code?\n\n``` javascript\nconsole.log(Backbone.VERSION);\nvar collection = new PLibrary();\ncollection.on('all', function () { console.log(arguments); }); \ncollection.fetch({update: true, async: false});\ncollection.fetch();\n```\n\nExpect:\n\n```\n0.9.9\n['add', ModelObject, CollectionObject, OptionObject]\n['add', ModelObject, CollectionObject, OptionObject]\n...\n['reset', CollectionObject, OptionObject]\n```\n\n`Model#update`was added at 0.9.9.\n"
      },
      {
        "user": "omsoft",
        "created_at": "2013-01-12T15:08:17Z",
        "body": "Thank you very much! I was working with an old version of Backbone. Updated to 0.9.9 and now it works as expected!\n"
      }
    ]
  },
  {
    "number": 2072,
    "title": "Stack overflow in iOS 6 relating to linked lists callbacks 0.9.2",
    "created_at": "2013-01-04T18:47:22Z",
    "closed_at": "2013-01-04T18:58:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2072",
    "body": "Hello,\n\nWhile working on a fairly large code base I noticed that when backbone triggers events (lines 159-175)  the linked list traversal crashes in iOS 6 and only iOS 6.  More than likely Apple changed the browser behavior relating to callbacks.\n\n```\n      while (event = events.shift()) {\n        if (node = calls[event]) {\n          tail = node.tail;\n          while ((node = node.next) !== tail) {\n            node.callback.apply(node.context || this, rest);\n          }\n        }\n        if (node = all) {\n          tail = node.tail;\n          args = [event].concat(rest);\n          while ((node = node.next) !== tail) {\n            node.callback.apply(node.context || this, args);\n          }\n        }\n      }\n\n      return this;\n    }\n```\n\nUpgrading to .9.9 isn't feasible at this time and I was wondering if converting it to a dynamic array could perhaps help.  Not sure if this could break something somewhere else so I have not attempted to modify the underpinnings yet.  Any help or guidance would be most appreciated.  Thanks. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2072/comments",
    "author": "jstxx",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2013-01-04T18:58:40Z",
        "body": "@jstxx - Backbone.Events is completely isolated - you could try grabbing the current Backbone.Events object from 0.9.9 and dropping it into 0.9.2 and see if that helps. There were significant speed improvements with events in the most recent release. Other than that I can't provide much advice without knowing more about the situation, and what the other factors are causing the issue (whether there are any memory leaks, etc). You may also want to try the mailing list or the #documentcloud IRC for application/device specific questions such as these.\n"
      }
    ]
  },
  {
    "number": 2070,
    "title": "When upgrade to 0.99, the console report an error: \"_.pick is not a function\"  ",
    "created_at": "2013-01-04T16:18:36Z",
    "closed_at": "2013-01-04T18:00:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2070",
    "body": "Hello.\nWhen upgrade to 0.99, the console report an error: \"_.pick is not a function\"  . Why?\nPrevious version: 0.9.1\n\nRegards\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2070/comments",
    "author": "vicenrele",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2013-01-04T16:21:14Z",
        "body": "Hi @vicenrele!  Have you updated your copy of underscore as well?  Backbone 0.9.9 requires underscore 1.4.3 or higher.\n"
      },
      {
        "user": "vicenrele",
        "created_at": "2013-01-04T17:38:44Z",
        "body": "Thanks for help @braddunbar! That was the problem. \n"
      }
    ]
  },
  {
    "number": 2066,
    "title": "Problem with nested external templates",
    "created_at": "2013-01-03T20:37:35Z",
    "closed_at": "2013-01-03T21:01:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2066",
    "body": "So I have 2 main templates, one for if user is logged in and one if logged out. I have these working fine.  \nI want the logged in template to have multiple nested templates that are rendered at different times as if different pages. \nLike if your logged in you can go to home page or go to bio page or etc.\nBut doing this causes the whole page to break, any way around this or fix or??\n\n```\n        <script id=\"logged_in\" type=\"text/template\">\n                   <div class=\"nav\">    //Navigation for page 1 and page 2    </div>\n\n                   <script id=\"page_1\" type=\"text/template\">\n                   //Page 1 - home\n                   </script>\n\n                   <script id=\"page_2\" type=\"text/template\">\n                   //Page 2 - bio\n                   </script>\n\n        </script>\n        <script id=\"logged_out\" type=\"text/template\">\n        //Form to login\n        </script>\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2066/comments",
    "author": "DusanMilko",
    "comments": [
      {
        "user": "tbranyen",
        "created_at": "2013-01-03T20:57:53Z",
        "body": "You can't nest scripts like that.  Many libraries exist that augment Backbone in order to achieve a nice way of nesting templates into Views.  Check out LayoutManager, Marionette, Chaplin, ViewMaster, etc.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-01-03T21:01:23Z",
        "body": "Yep, you'll probably want to encapsulate those templates with views.  Then, you can compose those views to create an entire page.\n\n``` js\nvar Home = Backbone.View.extend({\n  template: _.template($('#page_1').html()),\n  render: function() {\n    this.$el.html(this.template(...));\n    return this;\n  }\n});\n```\n"
      }
    ]
  },
  {
    "number": 2007,
    "title": "new View(string) returns error after upgraded to 0.9.9 from 0.9.2",
    "created_at": "2012-12-21T21:49:14Z",
    "closed_at": "2012-12-21T21:52:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/2007",
    "body": "If initialize parameter is string instead of json object, I got the following error\n\nUncaught TypeError: Cannot use 'in' operator to search for 'model' in B06jRlQrPbU7eAs53KlINk1 underscore.js:779\n_.pick underscore.js:779\n_.each._.forEach underscore.js:78\n_.pick underscore.js:778\n_.extend._configure backbone.js:1369\nBackbone.View backbone.js:1258\nchild backbone.js:1502\nchild\n\nLooked at the changes in _configure() found it is now using _.pick(), but it doesn't check if the passed parameter is object or string, so got the error.\n\nI can consider to change all new View calls from (string) to json object, but from usage viewpoint, it is a regression issue. My quick fix is to add check in _.pick() \nif (typeof(obj) !== 'object') return {};\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2007/comments",
    "author": "lucozhao",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-12-21T21:52:42Z",
        "body": "Views are passed an options object, not a string. If you're passing a string, that's undefined behavior.\n"
      }
    ]
  },
  {
    "number": 1967,
    "title": "listenTo with events hash?",
    "created_at": "2012-12-18T12:01:15Z",
    "closed_at": "2012-12-18T14:56:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1967",
    "body": "Could (or does) `listenTo` accept a hash of events?\n\n```\nview.listenTo(model, { \n  \"change:title\": titleView.update,\n  \"change:author\": authorPane.update,\n  \"destroy\": bookView.remove\n});\n```\n\nIf not the docs need updating: \n\n> All Backbone event methods also support an event map syntax, as an alternative to positional arguments.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1967/comments",
    "author": "meleyal",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-12-18T14:48:02Z",
        "body": "Yup that works.\n"
      }
    ]
  },
  {
    "number": 1948,
    "title": "Collection 'add' event handlers no longer receive options.index",
    "created_at": "2012-12-15T00:54:49Z",
    "closed_at": "2012-12-17T16:34:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1948",
    "body": "Great release guys, thanks all of the improvements to Backbone!\n\nI noticed that options.index is still provided to handlers of the 'remove' event, but not the 'add' event. Any chance that I could get an explanation of why this change was made?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1948/comments",
    "author": "cdata",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-12-15T14:19:17Z",
        "body": "Hi @cdata!  For some background, #1667 discusses the change and its reasons.  Since `Collection#add` sorts via `Array#sort`, there is no way to retrieve the index of each model without traversing the entire collection.  What are you using this for currently?\n"
      },
      {
        "user": "cdata",
        "created_at": "2012-12-15T18:47:51Z",
        "body": "Thanks for the response and the background. \n\nThe optimization makes sense; checking the index of the added model is a minority use case for me. At work I was using it to facilitate insertion of new item views into a list component that recycles its item elements as it scrolls. The index can just as easily be determined by me at the time of handling the 'add' event, but the disparity between add and remove in this case suggested to me that the change might have been unintended.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-12-17T16:20:27Z",
        "body": "Should we also remove it from the `remove` event?\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2012-12-17T16:21:30Z",
        "body": "Is there any other way to figure out what index the model was at without `options.index` in the `remove` event?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-12-17T16:34:11Z",
        "body": "Ah ha! Good point. It's gone by then. I really dislike the asymmetry of the two -- so if anyone has any brilliant ideas about how to address that...\n"
      },
      {
        "user": "cdata",
        "created_at": "2012-12-17T19:17:32Z",
        "body": ":+1: for symmetry fwiw\n"
      }
    ]
  },
  {
    "number": 1946,
    "title": "    listenTo - can't specify context for the callback",
    "created_at": "2012-12-14T21:39:15Z",
    "closed_at": "2012-12-14T21:43:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1946",
    "body": "Would you say context param should be added?\n\nlistenTo: function(object, events, callback) {\n...\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1946/comments",
    "author": "AjaxSolutions",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-12-14T21:43:58Z",
        "body": "Nope. The whole idea with `listenTo` is that the object you're calling it from _is_ the context.\n\n```\nview.listenTo(model, 'change', ...)\n```\n\n`view` is the context.\n"
      },
      {
        "user": "spacenick",
        "created_at": "2012-12-15T13:40:25Z",
        "body": "Why not adding an optional context? It would definately speed up things for this kind of callbacks : \n\n``` javascript\nview.listenTo(object,'some events',this.$el.show,this.$el)\n```\n\nInstead of having to write manually trivial functions on the view that will just delegate to the exact same jQuery method on $el. What do you think?\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2012-12-15T16:53:03Z",
        "body": "Maybe, `view.listenTo(object, 'some events', _.bind(this.$el.show, this.$el));` ?\n"
      },
      {
        "user": "anthonyshort",
        "created_at": "2012-12-15T20:57:29Z",
        "body": "Using the same context means events can easily be removed and cleaned up when the view is destroyed. Having another context would mean this wouldn't happen and you'd need to manually clean up the events like with `on`\n"
      },
      {
        "user": "spacenick",
        "created_at": "2012-12-16T13:22:23Z",
        "body": "Yeah ok it makes more sense the way it is and @tbranyen solution is perfect, ty!\n"
      }
    ]
  },
  {
    "number": 1935,
    "title": "listenTo on jQuery objects?",
    "created_at": "2012-12-14T14:48:35Z",
    "closed_at": "2012-12-14T15:17:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1935",
    "body": "I just started doing my upgrade for event listening, listenTo is a great addition to Backbone! \n\nI had a question about usage though. I listen for click events on DOM objects in some cases and attempted to translate the listeners from:\n\n$('#div').on(event, callback) \n\nto \n\nview.listenTo($('#div'), event, callback)\n\nand it doesn't seem to work.\n\nUsing jQuery 1.8.3, I'm getting the following error:\n\n``` javascript\n((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply is not a function\n    at dispatch(Object) (/iBEnergyCore/js/libs/jquery/jquery-1.8.3.js:3058)\n    at eventHandle(MouseEvent) (/iBEnergyCore/js/libs/jquery/jquery-1.8.3.js:2676)\n```\n\nIf the listenTo function will not work with jQuery objects that's fine. Just wasn't sure if I uncovered a bug.\n\nThanks again for the update!!\n\n-Tim\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1935/comments",
    "author": "tsneed290",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2012-12-14T15:06:15Z",
        "body": "Sorry, listenTo only applies to objects that have the Backbone.Events mixed in, so it would work on a `Backbone.View`, `Backbone.Collection`, or `Backbone.Model`, but not on a jQuery object.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-12-14T15:17:58Z",
        "body": "Right -- Backbone.Events methods work with Backbone.Events -- not DOM events. You've got jQuery for that.\n"
      },
      {
        "user": "tsneed290",
        "created_at": "2012-12-14T15:23:24Z",
        "body": "Thanks for the quick response!\n"
      },
      {
        "user": "davidfou",
        "created_at": "2013-12-30T15:10:34Z",
        "body": "Hi,\n\nI'm using Backbone before the magic `listenTo` method. Right now I'm migrating from my custom `bindTo` library to `Backbone.Events`. Using `listenTo` on a jQuery element would be perfect to prevent memory leak. Any workaround to do that ?\n\nBest,\nDavid\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-01-02T17:40:06Z",
        "body": "Hey @dfournier, try using namespaces for this (which `View#delegate` and `View#undelegate` use under the hood.) Removing all jQuery events bound by your View is as easy as calling `this.$el.off('.delegateEvents' + this.cid)` from within your view instance for example. (You can use any custom namespace you want for your events too)\n"
      }
    ]
  },
  {
    "number": 1934,
    "title": "Different event firing behavior after silent model changes",
    "created_at": "2012-12-14T14:33:12Z",
    "closed_at": "2012-12-14T15:50:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1934",
    "body": "So I have a problem with Backbone 0.9.9 in my existing application not firing certain events that previously got fired:\n\n``` javascript\nvar\n  model = new Backbone.Model({ selected: false }),\n  calls = 0;\n\nmodel.on('change:selected', function () {\n  calls++;\n});\n\nmodel.set('selected', true, {silent: true});\nmodel.set('selected', false);\n// calls is 0 in Backbone 0.9.9\n// calls is 1 in Backbone 0.9.2\n```\n\nModel._computeChanges in 0.9.9 is responsible for this behavior and it's obviously a performance optimization for not firing events that don't need to be fired. But I wonder if this is really the right behavior.\n\nImagine a Backbone view with subviews and many models with a selected state. Now the user can select multiple items by clicking on each of the items to select multiple single items. No problem here. But now I have a functionality \"select all / deselect all items\" which sets the selected value of each model silently, so it won't trigger a rerender for each subview in the loop, which would make sense because the Backbone documentation itself states this as a way to do it:\n\n> Passing {silent: true} as an option will defer both the validation and the event. This is useful when you want to change attributes provisionally or rapidly, without propagating the change through the rest of the system. That said, silent doesn't mean that the change (and event) won't happen, it's merely silenced until the next change.\n\n\"until the next change\" is what's different from 0.9.2 to 0.9.9. Previously a \"change\" was just a change of the model value (what's correct IMHO). Now in 0.9.9 a \"change\" is a change of the model value **from its previous non-silent change**. That's a huge difference and will affect code that expected the previous behavior.\n\nIn my \"select all / deselect all\" example my problem is that the user can't change single items anymore after doing \"select all / deselect all\" because the bulk changes got executed silently and after that I execute a custom event to rerender my whole view instead of each subview for performance reasons -  now if the user tries to change an single item the change will be made in the model but the events won't get fired anymore and the subview won't get rerendered.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1934/comments",
    "author": "chrizel",
    "comments": [
      {
        "user": "tgriesser",
        "created_at": "2012-12-14T15:26:21Z",
        "body": "@chrizel this was discussed mostly in #1478 and #1664 - The `Model._computeChanges` along with seeing a performance boost, was actually put in place to fix the incorrect functionality in 0.9.2. The idea is that \"change\" events should only be triggered when an event is loudly changed - so changing from A -> B (silent) -> A should not trigger a change.\n\nThat said, I see how your application's functionality would have issues with how 0.9.9 presents changes. Reading your example, it sounds like the \"select all\" functionality should actually not be set to `silent`, as changing it should update both the \"selected\" state of the model, and also the View attached to that model, and it isn't a provisional change. \n\nAre the performance reasons you mention for the custom re-render significant enough that you need to need to re-render the whole view rather than letting the subviews render themselves independently?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-12-14T15:50:15Z",
        "body": "In that particular example, if `calls == 1` under 0.9.2, then it was a bug. A state change from `false` to `false` isn't a change at all.\n\nFor your particular use case, there are probably a number of good ways to model it. Let me know if you want to explore it more.\n"
      }
    ]
  },
  {
    "number": 1932,
    "title": "Model constructor now triggers validation before initialize is called",
    "created_at": "2012-12-14T11:01:58Z",
    "closed_at": "2012-12-14T15:55:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1932",
    "body": "Model constructor calls `this.set(attributes, {silent: true})`.\n\nAs of 0.99 { silent: true } always triggers validation, so `validate()` gets called on our models before `initialize()` - which means our custom validation falls over as we're relying on certain things to have been set up by `initialize()`.\n\nI like the idea of validation always running, to prevent bad defaults, but I think it would make more sense to be triggered once after initialize() completes... but this wouldn't be compatible with silent triggering validation.\n\nCould the workflow instead be something like:\n- model constructor runs, setting attributes (but not triggering validation) and binds a one-off event to 'initialize' which will call validate passing in the attrs\n- initialize gets called, and triggers 'initialize'\n- validate then gets called\n\nOr is this too specific-a-case / hacky?\n\nFor now I'll put an 'initialized' flag in initialize() for now and silently return from validate if it's not yet set, or try and mess around with overriding the Backbone.Model constructor.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1932/comments",
    "author": "alextreppass",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-12-14T15:55:53Z",
        "body": "This is an important use case, but I also feel that the \"always be in a valid state\" change that 0.9.9 makes is valuable. Passing a flag is one work around, but this might be easier:\n\n```\nnew MyModel(MyModel.prepare(attributes))\n```\n\n... instead of putting the attribute preparation logic in `initialize`. Using a flag, or overriding the constructor both work as well.\n"
      }
    ]
  },
  {
    "number": 1883,
    "title": "Problem with IE8 and sorted models in collection detected in Version 0.9.2",
    "created_at": "2012-12-09T12:43:03Z",
    "closed_at": "2012-12-09T17:04:59Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1883",
    "body": "IE8 displays: error on page\n\nNumber expected\nbackbone.js  Line: 724 (it's the \"sort\" function)\nCode: 0   Char: 9\nif I use a sorted collection with:\n\n```\ncomparator: function() {\n    return this.get('pageNo');\n},\n```\n## \n\npageNo is an integer in the model\n\nthis error doesn't occur in IE9 or Firefox but every time in IE8\nmy workaround was to throw out the comparator function and use the where clauses to find the correct model\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1883/comments",
    "author": "lka",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-12-09T17:02:19Z",
        "body": "What you want is\n\n``` js\ncomparator: function(model) {\n    return model.get('pageNo');\n},\n```\n\nThe comparator function isn't called with the model context, it's called with the collection context. It is passed the model as the first argument, however, which is what you want.\n"
      },
      {
        "user": "lka",
        "created_at": "2012-12-09T18:19:45Z",
        "body": "works well\nthank you for advise\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2012-12-09T18:21:36Z",
        "body": "And actually on `master` (not 0.9.2) you can do this\n\n``` js\ncomparator: 'pageNo',\n```\n\nwhich is some pretty sweet sugar if you ask me :+1:\n"
      }
    ]
  },
  {
    "number": 1872,
    "title": "Need to be able to define if we want updates from the server on .save()",
    "created_at": "2012-12-05T16:28:11Z",
    "closed_at": "2012-12-05T16:31:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1872",
    "body": "I rarely want updates from the server when I saving, usually its for specific fields like primary key, date modified, etc.   But there are plenty of times where re-setting my model on a save screws things up.  Especially if there is a slow response.\n\nI like to be very responsive and show my views right away, so I don't wait for the server to finish saving, but if I don't want and make changes, those changes get reset when the response from the server comes back.\n\nI currently hack this when I don't want any attributes updated by calling .copy() and then .save() but once in awihle I do want _some_ attributes to come back.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1872/comments",
    "author": "sontek",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-12-05T16:31:51Z",
        "body": "It's up for your server response to determine what you want it to send back. If you don't ever want to sync attributes on the client-side, then never return anything more than `{}`. If you just want a subset of attributes, return a subset of attributes.\n"
      }
    ]
  },
  {
    "number": 1847,
    "title": "Please please up the version number. ",
    "created_at": "2012-11-28T01:23:41Z",
    "closed_at": "2012-11-28T06:15:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1847",
    "body": "Instead of my usual quick look to see if Backbone had been updated which until now has meant \"nope, still 0.92, I downloaded the latest and ran a compare.\n\nThis gave me a sea of red.\n\n1.0 anyone ?   At least 0.93 JIT for the festive coding season ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1847/comments",
    "author": "robvon",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-11-28T04:33:54Z",
        "body": "It's coming as soon as the issue count gets a bit lower, see #1594 and close this one please :+1:\n"
      },
      {
        "user": "wookiehangover",
        "created_at": "2012-11-28T06:15:03Z",
        "body": "thanks @caseywebdev\n"
      }
    ]
  },
  {
    "number": 1830,
    "title": "Wondering if underscore should be included in package.json",
    "created_at": "2012-11-19T10:18:30Z",
    "closed_at": "2012-11-19T18:27:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1830",
    "body": "Indeed, as I use lodash, it shoudn't download underscore when I \"bower install backbone\".\n\nI know, there's a huge dependency between backbone and underscore but it downloads a package which I don't need.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1830/comments",
    "author": "kud",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-11-19T18:27:26Z",
        "body": "> Wondering if underscore should be included in package.json\n\nYes, it should. Feel free to remove it if you don't want it.\n"
      },
      {
        "user": "OliverJAsh",
        "created_at": "2013-03-24T01:33:03Z",
        "body": "A lot more people are using Lodash now. In the same way you can change the `$` (jQuery isn't a hard dependency), so too should you be able to change `_`. @jashkenas \n"
      }
    ]
  },
  {
    "number": 1821,
    "title": "Question about instantiating Backbone View",
    "created_at": "2012-11-15T09:48:45Z",
    "closed_at": "2012-11-15T12:15:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1821",
    "body": "Hi, just a quick query someone can hopefully clarify for me:\n\nWhy is it that I can instantiate a Backbone View using the following code...\n\n``` js\nvar Test = Backbone.View.extend({\n    initialize: function(){\n        alert(123);\n    },\n\n    el: $('#js-some-element'),\n\n    events: {\n        'click': 'do_something'\n    },\n\n    do_something: function(){}\n});\n\nnew Test();\n```\n\n...but I can't with...\n\n``` js\nnew Backbone.View.extend({\n    initialize: function(){\n        alert(123);\n    },\n\n    el: $('#js-some-element'),\n\n    events: {\n        'click': 'do_something'\n    },\n\n    do_something: function(){}\n});\n```\n\n...is it something to do with how the function is referenced by the variable `Test`? Just trying to better understand the underlying code set-up that prevents me from creating a new instance until assigning result to a variable? What is the `extend` method doing that would prevent that?\n\nSorry if this is off topic, but it seemed to be the best place to ask considering they'll likely be lots of Backbone experts around here.\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1821/comments",
    "author": "Integralist",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-11-15T12:15:12Z",
        "body": "Hi @Integralist!  You can definitely initialize a view with the second form.  You just need extra parentheses.\n\n``` js\nvar view = new (Backbone.View.extend({...}))({...});\n```\n\nI wouldn't recommend it, however, as it's somewhat unclear.  :)\n"
      }
    ]
  },
  {
    "number": 1815,
    "title": "Backbone.js routes not always being saved to history",
    "created_at": "2012-11-12T21:30:37Z",
    "closed_at": "2012-11-16T21:49:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1815",
    "body": "We have a full app using Backbone.js and sometimes when navigating through a directory structure, it doesn't seem to save to the history.  Meaning, when we use the back button, it will skip over some pages.\n\nAny ideas what could be causing this? We get it most frequently on Chrome in windows.\n\nThank you\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1815/comments",
    "author": "btmdave",
    "comments": [
      {
        "user": "WillsB3",
        "created_at": "2012-11-13T06:37:50Z",
        "body": "I've had this problem too.\n\nI'm convinced it's something I've done, but I've no idea how since we are just calling router.navigate the same way every time.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-11-16T21:49:03Z",
        "body": "I'm afraid that without a test case or a way to reproduce this somehow ... there isn't much that we're going to be able to do to help here. I've never observed this before.\n\nI'd suggest keeping using live app, and adding a test script that quickly tries to run through a number of routes in a predefined order.\n"
      }
    ]
  },
  {
    "number": 1805,
    "title": "Best practice to skip model validation on fetch",
    "created_at": "2012-11-07T09:27:53Z",
    "closed_at": "2012-11-16T21:52:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1805",
    "body": "When I do fetch the model from the server the model performs validation.\nHow can I relax model validation on fetch and at the same time to have all the regular events (change, reset, etc) being triggered?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1805/comments",
    "author": "starkovv",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-11-16T21:52:21Z",
        "body": "You can't (well, you can, but shouldn't). The point of validation is to ensure that your model never enters an invalid state. If your server wants to send down an incomplete model, just relax your validation, and add another function that does the more restrictive version.\n"
      },
      {
        "user": "starkovv",
        "created_at": "2012-11-17T13:19:41Z",
        "body": "I see your point.\n\nProbably skipping validation can be meaningful if you create authentication logic (current example based on cookies).\n\nFor example, you have model (for validation here used a plugin backbone-validation.js):\n\n```\nclass Session extends Backbone.Model\n  urlRoot: '/sessions'\n  idAttribute: 'user_id'\n\n  defaults:\n    authenticated: null\n    email: null\n    password: null\n    csrf_token: null\n\n  validation:\n    email:\n      required: true\n      pattern: 'email'\n      minLength: 6\n    password:\n      required: true\n      minLength: 8\n\n  initialize: ->\n    @on('sync', @resetPassword, this)\n\n  resetPassword: ->\n    @set({ password: null }, { silent: true })\n```\n\nOn App initialization the model fetches itself from the back-end (url: /sessions/current), and the back-end answers in response json whether the current user (token in cookie HTTP header) is authenticated and includes additional params (user_id, email and csrf_token) to response. As you see, on initial GET there is no password, so the model validation will fail (so that I asking how to relax validation at least for this initial GET).\n\nThen, say it turns out that the current user is not authenticated on back-end, so that login dialog-box appears. Then the user enters her email and password and push LOGIN button, which calls @model.save({login_and_password_here}).\n\nAfter sync for security purposes you'd like to reset password attribute of the model.\n\nMakes sense?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-11-19T19:11:02Z",
        "body": "Yep. I wouldn't use `validation` for this. Just have an `isAuthenticated` function instead.\n"
      }
    ]
  },
  {
    "number": 1804,
    "title": "Call delegateEvents() first on View",
    "created_at": "2012-11-06T17:57:51Z",
    "closed_at": "2012-11-16T21:57:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1804",
    "body": "When instantiate a view, function initiliaze is called first of delegateEvents. \n\nIf I want disable or unbind event in specific situation, the better place for this would initialize? But with call delegateEvents after initialize, I can't.\n\nWhy not call delegateEvents first, and after initialize?\n\n``` javascript\n\nvar View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    this._configure(options || {});\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1804/comments",
    "author": "gustavokloh",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-11-16T21:57:33Z",
        "body": "We could, but often times folks want to change their events or update things in initialize, before the events are attached.\n\nFor example, you could get your behavior by removing the event inside of `initialize`, instead of disabling it after the fact.\n"
      },
      {
        "user": "rinatio",
        "created_at": "2013-03-09T00:22:09Z",
        "body": "Hmm... events could be a function. Sometimes i need to trigger event with handler on initialize\n"
      },
      {
        "user": "wulftone",
        "created_at": "2013-05-16T21:07:55Z",
        "body": "Just for people who might find this, you can modify the events object in your `initialize` method like so:\n\n``` js\nvar MyView = Backbone.View.extend({\n\n  events: {\n    'click .foo': 'handleClickFoo'\n  },\n\n  initialize: function(options) {\n\n    // Add an event\n    if ( /* something */ ) {\n      this.events['click .save'] = function() {\n        //do stuff\n      };\n    }\n\n    // Remove an event\n    if ( /* something else */ )\n      delete this.events['click .foo'];\n  }\n\n});\n```\n\n`delegateEvents` will get called after initialize, and your events hash will be dynamically changed by all the fiddling you do in the `initialize` method.\n"
      }
    ]
  },
  {
    "number": 1781,
    "title": "Binding view states and routes",
    "created_at": "2012-10-30T08:57:16Z",
    "closed_at": "2012-11-16T22:08:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1781",
    "body": "This is a general question ticket about Backbone best practices.\n\nI'm thinking about the optimal way to structure my Backbone application. The problem is that I have various complex states, each made by some views showing while all the others are hidden.\n\nWhat is the canonical way to handle this in Backbone? Two things that I've thought are either controlling the state by the router (calling views hide / show methods) or making the views listen for route event.\n\nThe problem with the first method is that the router must be aware of all the views existing in the application.\n\nThe problem with this second solution is that I have to make all the views listen to all the events and hide for any of them but a couple that make them show.\n\nThanks for pointing me to a lean solution.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1781/comments",
    "author": "pistacchio",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-30T13:12:20Z",
        "body": "Hi @pistacchio!  I'd say that either of those approaches is fine if it works for your application.  If you have a very large application, the event driven model can help keep your code modular and testable.  If you have a smaller app, or at least one with less pages, then keeping the logic central to the router might work out better.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-11-16T22:08:16Z",
        "body": "Using mutually-exclusive CSS classes is a real nice way to do this.\n\n```\n$.fn.setMode : function(state, group) {\n  group = group || 'mode';\n  var re = new RegExp(\"\\\\w+_\" + group + \"(\\\\s|$)\", 'g');\n  var mode = (state === null) ? \"\" : state + \"_\" + group;\n  this.each(function(){\n    this.className = (this.className.replace(re, '') + ' ' + mode).replace(/\\s\\s/g, ' ');\n  });\n  return mode;\n}\n```\n\nThen:\n\n```\n$('.workspace').setMode('help', 'tab');\n\n... \n\n$('.workspace').setMode('search', 'tab');\n```\n"
      }
    ]
  },
  {
    "number": 1770,
    "title": "Extension points for attribute setter",
    "created_at": "2012-10-23T20:16:59Z",
    "closed_at": "2012-10-26T04:56:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1770",
    "body": "Sometimes it would be nice to have ability to extend attribute setters. \n\nIt can be done by changing current version:\n\n``` JavaScript\noptions.unset ? delete now[attr] : now[attr] = val;\n```\n\nto:\n\n``` JavaScript\nif (options.unset) \n  this.deleteAttribute(now, attr)\nelse \n  this.setAttribute(now, attr, val)\n```\n\nI believe with V8 optimizations speed should be the same.\n\n**Use case.**\n\nOne of possible use cases is to make attributes available directly on the model with 100% backward compatibility. I.e. acces it with both ways - direct`model.attr` and usual `model.get('attr')`.\n\nWith extendable setter it can be done as simple as:\n\n``` JavaScript\ndeleteAttribute: function(now, attr){\n  delete now[attr]\n  delete this[attr]  \n} \n\nsetAttribute: function(now, attr, value){\n  now[attr] = value\n  this[attr] = value\n}\n```\n\nWhat do You think?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1770/comments",
    "author": "al6x",
    "comments": [
      {
        "user": "wookiehangover",
        "created_at": "2012-10-26T04:55:59Z",
        "body": "@alexeypetrushin thanks for opening an issue. This would confuse the line between properties on a model instance and a model attributes--and would likely cause lots of breaking changes.\n"
      },
      {
        "user": "al6x",
        "created_at": "2012-10-26T07:56:24Z",
        "body": "Maybe I didn't explained it clearly, I didn't mean that we should implement that new type of setter that change behavior - it was just a showcase for one of many possible usage for attribute setter extensions.\n\nI.e. the only proposed change is this, it won't change anything (but gives users ability to easy extend setter if they wish to, right now it's not easy).\n\n``` JavaScript\nif (options.unset) \n  this.deleteAttribute(now, attr)\nelse \n  this.setAttribute(now, attr, val)\n\ndeleteAttribute: function(now, attr){delete now[attr]} \nsetAttribute: function(now, attr, value){now[attr] = value}\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-26T15:41:18Z",
        "body": "Hi @alexeypetrushin!  You definitely have this ability already (though I agree with @wookiehangover's comments above and don't recommend it).  The following code will do what you want without altering Backbone.\n\n``` js\nvar Model = Backbone.Model.extend({\n  initialize: function() {\n    for (var attr in this.attributes) this[attr] = this.get(attr);\n    this.on('change', function() {\n      for (var attr in this.changed) this[attr] = this.get(attr);\n    }, this);\n  }\n});\n```\n"
      },
      {
        "user": "al6x",
        "created_at": "2012-10-26T19:57:37Z",
        "body": "Also though about it, but I'm not sure about this `... this.on('change' ...` - attribute will be set on the 'change' event, I'm not sure how it will behave with other listeners that expect this attribute, or if someone will call `model.off()`.\n"
      }
    ]
  },
  {
    "number": 1760,
    "title": "Question: Backbone & testing & Angular",
    "created_at": "2012-10-20T10:08:10Z",
    "closed_at": "2012-10-20T12:02:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1760",
    "body": "I talked with someone. He said \"angularjs is a framework. backbonejs is just a library\". is this stmt correct? As far as I know BB is also a type of Framework.\n\nWhat testing tool u'r using to test BB? Qunit?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1760/comments",
    "author": "rashidul0405",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-20T12:02:13Z",
        "body": "@rashidul04 I'm not sure how important the distinction is, but I would call it a library and that's usually how I hear it described.\n\nYes, QUnit is used to test Backbone.  It's an excellent unit testing tool and I often use it to test my application code as well.\n"
      },
      {
        "user": "rashidul0405",
        "created_at": "2012-10-20T13:18:49Z",
        "body": "Thanks for ur answer. \"how important the distinction is\": I agree with you. I think so.\n"
      }
    ]
  },
  {
    "number": 1753,
    "title": "Question - Routing + URL rewrite in IE",
    "created_at": "2012-10-19T11:43:09Z",
    "closed_at": "2012-10-19T12:51:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1753",
    "body": "I've encountered a peculiar issue when dealing with Backbone routing.\n\nOur app is being hosted in `example.com/photo/index.php`, and we'd like to hook an event on it which when triggered, appear in the address bar as `example.com/photo/<ID>`. Below is how we set up our rewrite rule androuter settings:\n\n```\nRewriteRule ^/photo/([0-9]+)?$ /photo/index.php/photo/$1 [L]\n```\n\n**Inside Backbone.Router.extend:**\n\n```\nroutes: {\n    'photo/:ID': 'viewPhoto'\n},\n```\n\n**After router has been instantiated:**\n\n```\n$(function() {\n    Backbone.history.start({\n        pushState: 'pushState' in window.history,\n        root: '/'\n    });\n});\n```\n\nThis works great in Firefox/Chrome/Safari, but in IE9 you have to access the event hook with `example.com/photo/#photo/<ID>`, which is not very cool.\n\nSo we tried toggling the pushState option on (`pushState: true`) and hope it could help, but now whenever accessing `example.com/photo/<ID>` in IE9, page will be redirected to `example.com/#photo/<ID>` instead, and actually displaying the content of `example.com/index.php`.\n\nI suppose (?) this can be a non-issue if we change the event hooking URL to something like `example.com/photo/view/<ID>`, however we can't touch that part.\n\nIs there anyway to make either `example.com/photo/<ID>`, `example.com/#photo/<ID>`, or `example.com/photo/#<ID>` working as expected under IE9, with or without pushState?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1753/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-19T12:51:36Z",
        "body": "Mornin' @gsklee!  You can definitely do what you're describing.  From the docs:\n\n> To indicate that you'd like to use HTML5 pushState support in your application, use Backbone.history.start({pushState: true}).\n\nYou don't need to feature test with `pushState: 'pushState' in window.history`, Backbone will do that for you.  Further, using `pushState: true` tells Backbone that, when you're in IE, you would like to translate `/photo/5` to `#photo/5`.  Let me know if that doesn't fix your problem.\n"
      },
      {
        "user": "gsklee",
        "created_at": "2012-10-20T10:38:53Z",
        "body": "Hello @braddunbar - what we really woud like to achieve is to get rid of the `#` sign in IE's address bar. Is there any way to stop `#` from appearing inside the address bar when using Backbone routing, pushState or not?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-20T11:49:57Z",
        "body": "You can use `hashChange: false`, but this will prevent client side routing and make all navigation use a full page reload.  Is that what you're looking for?\n"
      },
      {
        "user": "gsklee",
        "created_at": "2012-10-22T07:54:53Z",
        "body": "Nevermind - we figured it out that what we'd like to achieve is technically impossible on IE / browsers without pushState =)\n"
      }
    ]
  },
  {
    "number": 1740,
    "title": "Question - retrieving model by attribute",
    "created_at": "2012-10-16T07:07:26Z",
    "closed_at": "2012-10-16T11:27:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1740",
    "body": "Is there a way to retrieve a model inside collection by the model's attribute?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1740/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "philfreo",
        "created_at": "2012-10-16T07:14:49Z",
        "body": "Yep. See `collection.where` for multiple models being returned, or use `collection.find` if you just want one model returned.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-16T11:27:11Z",
        "body": "Yep, `where` and `find` are good candidates.  :)\n"
      }
    ]
  },
  {
    "number": 1738,
    "title": "Can't fetch a model from a collection when idAttribute is set",
    "created_at": "2012-10-15T13:55:22Z",
    "closed_at": "2012-10-15T13:58:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1738",
    "body": "I'm using a MongoDB backend, so I'm setting an `idAttribute` of __id_ within my models, however Backbone can't reference these id's when the models are placed in collections.\n\nExample:\n\n``` javascript\n\n// Define my Model with a custom idAttribute\nvar Meal = Backbone.Model.extend({\n  idAttribute: \"_id\"\n});\n\n// Define a collection\nvar Meals = Backbone.Collection.extend();\n\n\n// Create a model\nvar m = new Meal({ _id: 1, name: \"Cake\" });\n\n// Create a collection and insert the model I just created\nc = new Meals({model: m})\n\n// Find model where id is 1 within my collection (this doesn't seem to match idAttribute for some reason)\nc.get(1)\n```\n\nreturns `undefined` when I expect the Cake model.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1738/comments",
    "author": "dhruv-bhatia",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-15T13:58:44Z",
        "body": "Mornin' @dhruv-bhatia!  I think your problem is that you've got the method signature for the collection constructor a bit mixed up.  Try `var c = new Meals([m]);` instead of `c = new Meals({model: m})`.\n"
      }
    ]
  },
  {
    "number": 1728,
    "title": "Question - Assign index to models on instantiation",
    "created_at": "2012-10-12T09:39:41Z",
    "closed_at": "2012-10-12T09:49:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1728",
    "body": "Is there anyway to let the newly instantiated model know of its 0-based index inside its collection, and assign it? Something like:\n\n``` javascript\n    var m = Backbone.Model.extend({\n        initialize: function() {\n            this.set('index', '// 0-based index inside the parent collection//');\n        }\n    });\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1728/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "vincentbriglia",
        "created_at": "2012-10-12T09:44:45Z",
        "body": "You can get the index of a model on a collection by using indexOf\n\n``` javascript\ncollection.indexOf(model)\n```\n\nor if you don't have access to the collection in your view but you know the model is inside a particular collection, you can always get the collection like this:\n\n``` javascript\nmodel.collection.indexOf(model)\n```\n\nI wouldn't recommend storing the index on a model, because then each time you add an additional model you will have to update the index values for each model on a collection.\n"
      },
      {
        "user": "gsklee",
        "created_at": "2012-10-12T09:50:55Z",
        "body": "Feeling stupid, thanks =D\n"
      }
    ]
  },
  {
    "number": 1727,
    "title": "Model.fetch() does not remove attributes no longer found in model",
    "created_at": "2012-10-11T20:42:09Z",
    "closed_at": "2012-10-11T20:56:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1727",
    "body": "If a model has pre-existing attributes (either from a previous load or a manual set() operation), they are not removed during a fetch() if they are not contained in the server response.\n\n```\nmodel = new Backbone.Model\nmodel.url = \"/api/model\"\nmodel.set(\"bogus\", \"the quick brown fox\")\nmodel.fetch()\n\nmodel.get(\"bogus\") --> \"the quick brown fox\"\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1727/comments",
    "author": "normelton",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-10-11T20:56:39Z",
        "body": "That's correct. The server is allowed to only update the attributes that it cares to set -- it doesn't have to return _all_ of the attributes in a (potentially large) response. These are the same semantics as `.set()`\n\nIf you want to clear out value, set them to `null`.\n"
      }
    ]
  },
  {
    "number": 1722,
    "title": "Dependencies?",
    "created_at": "2012-10-10T11:31:29Z",
    "closed_at": "2012-10-10T16:02:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1722",
    "body": "Hi,\n\nCan you confirm what Underscore and jQuery methods are needed for Backbone to work? \n\nI want to implement my own code rather than using those libraries. \n\nThanks. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1722/comments",
    "author": "Integralist",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-10-10T15:58:38Z",
        "body": "I don't think that's going to be in your best interest. Those libraries have had lots of work put into them by lots of people.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-10T16:02:49Z",
        "body": "I can't, but it should be pretty easy for you to determine them. Grep for `_.` for Underscore methods, and grep for `$.` for jQuery methods.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2012-10-10T16:04:43Z",
        "body": "Don't forget the array of Underscore methods that are mapped to Collections...\n"
      }
    ]
  },
  {
    "number": 1721,
    "title": ".fetch({add: true}) attaching phantom object into collection",
    "created_at": "2012-10-10T11:11:14Z",
    "closed_at": "2012-10-10T16:00:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1721",
    "body": "`collection.fetch({add: true})` currently adds an empty object `{}` into the original collection even if the fetched response is `undefined` or `null`:\n\n``` javascript\n[..., {\"id\" : 39, attr: \"whatever\"}, {}]\n```\n\nThis can lead to unexpected errors when processing the collection data. Is this intended?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1721/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-10-10T15:54:24Z",
        "body": "It's because `Collection#add(undefined | null | false | 0 | '' | {})` all add an empty model to the collection. What you want is `Collection#add([])` which means you have an array of models, but it's empty, so nothing is added. The question is why isn't your fetched JSON returning `[]`?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-10T16:00:30Z",
        "body": "Quite right.  You can use `Collection#parse` to ensure that undefined results return an empty array.  Thanks @caseywebdev!\n"
      },
      {
        "user": "gsklee",
        "created_at": "2012-10-11T02:23:45Z",
        "body": "Great explanation, thanks @caseywebdev =D\n"
      }
    ]
  },
  {
    "number": 1715,
    "title": "By reference inheritance",
    "created_at": "2012-10-05T23:05:36Z",
    "closed_at": "2012-10-05T23:08:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1715",
    "body": "Have a question, potentially a bug - hopefully just a question.\n\nTrying to create a slightly enhanced view, and then create instances of that view as below.\n\n// enhanced view\nvar Enhanced = Backbone.View.extend({\nfoo: [],\ntest: function () {\nthis.foo.push(Math.random());\n}\n});\n\n// couple of new objects\nvar Foo = Enhanced.extend({});\nvar Bar = Enhanced.extend({});\n\n// instantiating\nvar foo = new Foo();\nvar bar = new Bar();\n\n// trying to push a random number into foo\nfoo.test();\nbar.test();\n\n// expecting to see something like [0.11767047128388153][0.8575983647365905]\nconsole.log(foo.foo, bar.foo);\n\nOne would expect to see 2 different values for the output above, however one gets the same array of length 2 with identical values in both instances.\n\nLooking @ the code around line 1400, one can see the following:\n\nctor.prototype = parent.prototype;\n\nIn order to create a truly new instance wouldn't:\n\nctor.prototype = $.extend(true,{},parent.prototype);\n\nbe suited better?\n\nThat would solve the problem I described above. As is, array foo feels like a static, not instance variables.\n\nI know that the prescribed version is to use \"initialize\" for instance variables, but why would the above suggested \"fix\" be wrong?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1715/comments",
    "author": "ndanson",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-05T23:08:40Z",
        "body": "Hi @ndanson!  Give this a try instead:\n\n``` js\nvar View = Backbone.View.extend({\n  initialize: function() {\n    this.foo = [Math.random()];\n  }\n});\n```\n\nPrototype properties are indeed shared between javascript instances.  For a unique value on each instance, you'll need to set it explicitly as above.\n"
      },
      {
        "user": "ndanson",
        "created_at": "2012-10-05T23:25:10Z",
        "body": "Suppose we have the following:\n\nvar Foo = View.extend({\n    initialize: function () {\n        console.log('toast is yummy!');\n    }\n});\n\nvar foo = new Foo();\n\nView's initialize will be overwritten by Foo's initialize, thereby variable foo won't be available in Foo anymore. Is that by design?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-05T23:27:04Z",
        "body": "It is, but you can always call the method on the prototype like so:\n\n``` js\nvar Sub = View.extend({\n  initialize: function() {\n    View.prototype.initialize.apply(this, arguments);\n    // …\n  }\n});\n```\n"
      },
      {
        "user": "ndanson",
        "created_at": "2012-10-05T23:32:12Z",
        "body": "Thank you for your prompt replies. Indeed, the above does solve the issue.\nMy question is, why not provide a deep copy option, rather than keep writing the same boilerplate code over and over again - assuming that our project will likely have hundreds if not more views?\n\nThanks!\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-05T23:36:06Z",
        "body": "Glad to help.  :)\n\nI'm not sure what boilerplate you're talking about.  If you're referring to the super call, that's just the reality of inheritance in javascript.  Calling super methods is rather verbose.\n"
      },
      {
        "user": "ndanson",
        "created_at": "2012-10-05T23:43:35Z",
        "body": "Thank you for your patience! Much appreciated.\n\nI do understand inheritance in JS. That's a fact. My question would rather be: why not provide the option of deep copying within the Backbone framework? My example when describing the problem included a potential solution for such functionality.\n\nTo rephrase even more, what would be the real world scenario where objects X and Y that extend Foo would share the same instance variables (within Backbone views for example) - not JavaScript in general.\n\nThanks!\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-05T23:47:40Z",
        "body": "> To rephrase even more, what would be the real world scenario where objects X and Y that extend Foo would share the same instance variables (within Backbone views for example) - not JavaScript in general.\n\nIn all the examples above, each instance shares prototype variables for `initialize`, so functions are one example.  Also, default values such as `disabled` or `hidden` are good examples, assuming you need them.\n"
      },
      {
        "user": "ndanson",
        "created_at": "2012-10-05T23:54:23Z",
        "body": "Last question: why isn't there an option for deep copying?\n"
      },
      {
        "user": "tgriesser",
        "created_at": "2012-10-06T00:00:22Z",
        "body": "@ndanson - only objects and arrays are passed by reference when they are object properties (as they are on the prototype), so those are the only items that you'll need to set explicitly per instance. Deep copying is very costly from a performance standpoint (and in almost every case a different solution would be better suited) - if it's something you still want to do, you'll have to find something other than backbone to do it with.\n"
      }
    ]
  },
  {
    "number": 1706,
    "title": "Model#get() as alias of toJSON()",
    "created_at": "2012-10-04T10:51:01Z",
    "closed_at": "2012-10-04T11:25:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1706",
    "body": "I'm using coffeescript, and write code that looks like:\n\n``` coffeescript\n{foo, bar} = model.toJSON()\n```\n\n`toJSON` seems out of place here, as well as in the example for view rendering.\n\nedit: allowing multiple arguments to `get` would also work\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1706/comments",
    "author": "aeosynth",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-04T11:25:00Z",
        "body": "Mornin' @aeosynth!  You can just use `attributes` for this purpose.\n\n``` coffeescript\n{foo, bar} = model.attributes\n```\n"
      },
      {
        "user": "aeosynth",
        "created_at": "2012-10-04T20:44:07Z",
        "body": "I can, but the docs specifically warn against doing so. Also, if i used\nattributes for multiple values, I'd use it for single values as well, and\nignore `get` entirely.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-04T20:45:41Z",
        "body": "That's a fine way to go. `get` is mainly there for parallelism with `set`, and so you can override it to do something special if you wish...\n"
      },
      {
        "user": "aeosynth",
        "created_at": "2012-10-04T21:58:09Z",
        "body": "in that case, the warning should be removed or modified. Currently it's\nvery explicitly against directly reading the attributes hash.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-04T22:05:16Z",
        "body": "From the docs:\n\n> Please use set to update the attributes instead of modifying them directly. If you'd like to retrieve and munge a copy of the model's attributes, use toJSON instead.\n\nYou shouldn't _modify_ `attributes`, but using it to retrieve values is perfectly good practice.\n"
      }
    ]
  },
  {
    "number": 1705,
    "title": "Set a collection's URL on instantiation",
    "created_at": "2012-10-04T07:26:29Z",
    "closed_at": "2012-10-04T15:39:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1705",
    "body": "Currently it's impossible to do this:\n\n``` javascript\nvar Collection = Backbone.Collection.extend({\n    ....\n});\n\nvar c = new Collection({\n    url: '/path/to/api'\n});\n```\n\nSo a constructor wrapper is required to achieve it:\n\n``` javascript\nvar Wrapper = function(options) {\n    var Collection = Backbone.Collection.extend({\n        ....\n        url: options.url,\n        ....\n    });\n\n    return new Collection();\n};\n\nvar c = new Wrapper({\n    url: '/path/to/api'\n});\n```\n\nWhile this workaround is not overly complex, why not enable the ability to set a few attributes (eg. URL) of the collection on instantiation? This would be very handy in situations where the API URLs have to be dynamically generated, but you don't want to redefine the collection over and over.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1705/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "caseywebdev",
        "created_at": "2012-10-04T13:45:29Z",
        "body": "``` js\nvar Collection = Backbone.Collection.extend({\n    ....\n});\n\nvar c = new Collection;\nc.url = '/path/to/api';\n```\n\nSeems like a pretty simple solution\n"
      }
    ]
  },
  {
    "number": 1703,
    "title": "Can't Pass \"data-\" attributes within View's Attributes method",
    "created_at": "2012-10-03T21:07:26Z",
    "closed_at": "2012-10-03T21:08:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1703",
    "body": "I am a fan of setting attributes within a view as such...\n\n<pre>Backbone.View.extend({\n    attributes: {\n        data-attr: 'mydata'\n    }\n});\n</pre>\n\n\n... however, this throws an error due to the hyphen in the key \"data-attr\".\n\n<pre>Uncaught SyntaxError: Unexpected token -</pre>\n\n\nI realize this is an illegal token in a JavaScript key-value object, however I was hoping Backbone offered some work around for this, given the fact that passing data attributes is one of the most likely scenarios.\n\nI have been working around it by setting the attribute within the render function using jQuery:\n\n<pre>render: function () {\n    this.$el.attr( 'data-attr', 'mydata\"');\n}\n</pre>\n\n\nThis works, but I thought to ask if there is another option.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1703/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T21:08:35Z",
        "body": "Yep -- it's just a JavaScript object. Use quoted keys.\n\n```\nattributes: {\n    \"data-attr\": \"mydata\"\n}\n```\n"
      },
      {
        "user": "ghost",
        "created_at": "2012-10-03T21:09:37Z",
        "body": "Ahh, I thought I tried that! Thanks!\n"
      },
      {
        "user": "ghost",
        "created_at": "2012-10-03T21:15:45Z",
        "body": "What do you suggest for passing a data attribute to the View's DOM element from the attributes within the View's Model? As such...\n\n<pre>\nattributes: {\n    \"data-attr\": this.model.foo\n}\n</pre>\n\nI am losing scope for reference to \"this\".\n\n<pre>\nUncaught TypeError: Cannot read property 'model' of undefined \n</pre>\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-03T21:16:49Z",
        "body": "You can use a function like so:\n\n``` js\nattributes: function() {\n  return {\n    'data-attr': this.model.foo\n  };\n}\n```\n"
      },
      {
        "user": "ghost",
        "created_at": "2012-10-03T21:22:23Z",
        "body": "Awesome. That works perfectly. Thank you for the prompt responses!\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T21:27:05Z",
        "body": "You're welcome, but in the future, please don't use the bug tickets for tech support like this -- try the IRC channel or the mailing list first.\n"
      },
      {
        "user": "ghost",
        "created_at": "2012-10-03T21:42:38Z",
        "body": "Happy to. I tried that first, but there is only one other user in DocumentCloud IRC, Turjakas who was not responding.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T22:01:12Z",
        "body": "Must've mistyped -- there are 242 folks in #documentcloud on freenode right now.\n"
      }
    ]
  },
  {
    "number": 1702,
    "title": "Alternative to events: { \"trigger select\" : \"functor\" }?",
    "created_at": "2012-10-03T18:31:37Z",
    "closed_at": "2012-10-03T18:45:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1702",
    "body": "Hi,\n\nI was wondering if there was an alternative to the standard Backbone.View.extend({ events: { \"trigger selector\" : \"functor\", ...} ... }).\n\nIs there a special alternative function that gets called that lets you bind events for that specific view without having to mix the trigger and CSS selector into a string, and without having to pass the callback as a string rather than as a reference?\n\nThe latter's less important than the former: if there's a way to at least do even binding in a way that keeps the trigger and the view selector separate, that would be awesome. Is there such an alternative?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1702/comments",
    "author": "Pomax",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-10-03T18:39:57Z",
        "body": "> Is there a special alternative function that gets called that lets you bind events for that specific view without having to mix the trigger and CSS selector into a string\n\nI'm afraid not.  Is there a reason you would rather not concatenate the event and the selector?  I've found that the object syntax is rather succinct.\n\n> and without having to pass the callback as a string rather than as a reference?\n\nYou can pass a function instead of a string as the callback.\n\n``` js\nvar View = Backbone.View.extend({\n  events: {\n    click: function(e) {\n      e.preventDefault();\n      // ...\n    }\n  }\n});\n```\n\nThis will also work when calling `delegateEvents` directly.\n\n``` js\nview.delegateEvents({click: function(){...}});\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T18:45:43Z",
        "body": "Just use jQuery?\n\n```\n$(view.el).on('click', '.target', function(){ ... })\n```\n"
      },
      {
        "user": "Pomax",
        "created_at": "2012-10-03T19:13:24Z",
        "body": "the syntax is succinct, but it puts two completely different things in the same string, effectively making it a mystery string (the first word is a trigger, then there's whitespace, then there's a selector, but how do you get the trigger back out? split on whitespace? is that always going to be true? maybe, maybe not).\n\nUsing jQuery for the el is a good suggestion, thank you!\n"
      }
    ]
  },
  {
    "number": 1700,
    "title": "Unbind from topic when processing this topic",
    "created_at": "2012-10-03T14:00:28Z",
    "closed_at": "2012-10-03T18:50:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1700",
    "body": "I have 2 callbacks (named \"1\" and \"2\") binded to event \"A\".\nWhen event \"A\" happens, callback \"1\" is processed.\nWhile processing callback \"1\", this callback \"1\" unbind from event \"A\" and also event \"A\" happens again.\nInmediatly callback \"2\" is processed because of the second event \"A\" and during this process callback \"2\" unbind from event \"A\".\nThen, first event \"A\" continues and callback \"2\", which is now unbinded from event \"A\" ¡is called again!.\n¿Is it the expected behaviour?. \nI suppose it is but ,¿is goint to be an option to setup an \"asynchronous\" behaviour?.\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1700/comments",
    "author": "fralmei",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T18:50:10Z",
        "body": "If you want to unbind a callback asynchronously ... just do it asynchronously.\n\n```\n_.defer(function(){ \n  model.off('change', null, view);\n});\n```\n"
      }
    ]
  },
  {
    "number": 1699,
    "title": "Backbone.sync - overriding partially?",
    "created_at": "2012-10-03T12:26:04Z",
    "closed_at": "2012-10-03T12:31:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1699",
    "body": "Is there any way to override Backbone.sync partially, say, only `create`, and leave the rest untouched, using native Backbone.sync? If no then perhaps there can be a way to do so, because this is what I need right now due to restrictions imposed by existing APIs.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1699/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T12:31:44Z",
        "body": "Nope. Either avoid `create` by only creating models where you already know their ID, or copy-paste `sync` and put an `if (create)` in there...\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-03T14:00:41Z",
        "body": "You can certainly do this without copy paste.  Just return the results of the original `sync` unless the method is `create`.\n\n``` js\nvar sync = Backbone.sync;\nBackbone.sync = function(method, model, options) {\n  if (method !== 'create') return sync.apply(this, arguments);\n  // Your code here.\n};\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-03T14:02:05Z",
        "body": ".... a much, much better idea.\n"
      }
    ]
  },
  {
    "number": 1690,
    "title": "Concerned about Model security?",
    "created_at": "2012-10-01T13:52:44Z",
    "closed_at": "2012-10-01T13:58:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1690",
    "body": "Hi,\n\nI have a simple Backbone Model/View combo that is validating a login field and then calling `.save` so the data is sent to the server to process. \n\nThe problem I've just realised is that when inspecting the Model after calling `.save` I can see the password is being stored in the Model as plain text so all a developer has to do is dynamically change the JavaScript via the standard built-in browser developer tools to see the user's password.\n\nHow can I implement a username/password login securely with Backbone?\n\nMy current Model/View code is as follows...\n## Model:\n\n``` js\ndefine(['Backbone'], function(){\n\n    return Backbone.Model.extend({\n        url: '/login/',\n\n        validate: function (attributes) {\n            var errors = [];\n\n            if (attributes.account.indexOf('@') === -1) {\n                errors.push({\n                    field: 'account',\n                    value: attributes.account\n                });\n            }\n\n            if (attributes.password === '') {\n                errors.push({\n                    field: 'password',\n                    value: attributes.password\n                });\n            }\n\n            if (errors.length) {\n                return errors\n            }\n        }\n    });\n\n});\n```\n## View:\n\n``` js\ndefine(['../Models/CustomerLogin', 'Backbone'], function (CustomerLogin) {\n\n    return Backbone.View.extend({\n        initialize: function(){\n            // Store the form element and hide it\n            this.form = this.$el.find('form');\n\n            // Store the Model object for easy reference\n            this.model = new CustomerLogin();\n\n            // Store reference to error message box\n            this.error_message = $('#js-loginerror')\n        },\n\n        // The containing element\n        el: $('#js-customerlogin'),\n\n        // Selectors are scoped to the parent element\n        events: {\n            'click #js-loginbtn': 'toggle_display',\n            'submit form': 'store_user_details'\n        },\n\n        toggle_display: function(){\n            this.form.slideToggle();\n        },\n\n        store_user_details: function (e) {\n            // I stored this hash in a variable as it looked cleaner passing it to `save` method below\n            var fields = {\n                account: this.form[0].elements[0].value,\n                password: this.form[0].elements[1].value\n            };\n\n            // Scope of `this` is lost within the error callback below\n            var self = this;\n\n            // When we call `save` it automatically validates all data\n            // So if there are any errors with what we're trying to save then it'll fail\n            this.model.save(fields, {\n                error: function(){\n                    self.error_message.addClass('is-error');\n                },\n                success: function(data){\n                    self.error_message.removeClass('is-error');\n                    alert('LOG USER IN - WARNING!!! Backbone.Model has plain text storage of password!!!');\n                    console.log(self.model.attributes, 'ALL DEVELOPER HAS TO DO IS CHANGE JS DYNAMICALLY AND HE HAS PASSWORD!');\n                }\n            });\n\n            e.preventDefault();\n        }\n    });\n\n});\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1690/comments",
    "author": "Integralist",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-10-01T13:58:21Z",
        "body": "I'm afraid this has nothing to do with Backbone. Any insecure JavaScript on your website is able to sniff passwords. Don't allow insecure JavaScript on your site (XSS, third party scripts, etc.), use HTTPS, and don't store the password on the client side for a moment longer than it takes you to send it to the server to be hashed.\n"
      },
      {
        "user": "Integralist",
        "created_at": "2012-10-01T14:04:24Z",
        "body": "@jashkenas so what's the best procedure for using Backbone with a logon area when you don't have HTTPS?\n\nI totally understand that passwords shouldn't be stored - hence why my concern when I realised what this Model code was actually doing.\n\nWhat I'm getting at is: how should this be handled using the concepts of Models/Views?\n\nI was using a Model so I could validate the data (username/password) and make sure it was in the correct format. But should I even have a Model? Should I have just a View and I manually validate fields and then not use AJAX to send data to the server but have the form's POST action handle that in the standard/traditional way?\n\nIf I did have HTTPS available would it be safe AJAX'ing the data across? I assume not because the JavaScript is still client side and can be intercepted. Unless I'm missing something here.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-01T14:21:54Z",
        "body": "Do **not** have a login form under HTTP. The password can be sniffed by a man in the middle, or by anyone on the same unencrypted wifi network as you. Ideally, your entire site runs under HTTPS -- but certainly, any page that provides logged-in functionality needs to.\n\nAs for Backbone -- again -- it has nothing to do with this. Having your password present in an `<input type=\"password\">` field is no more or less secure than having it present in a model on the same page.\n"
      },
      {
        "user": "Integralist",
        "created_at": "2012-10-01T14:32:10Z",
        "body": "@jashkenas no problem, I understand this is not a Backbone issue - but can I ask that you take a brief moment to look at the following code and advise whether this would be safe (under the assumption that I was running HTTPS on the site). \n\nEffectively I'm not storing the form fields any where (I no longer have a Model). I'm literally validating and letting the form submit itself to the server as per traditional POST method...\n\n``` js\ndefine(['../Models/CustomerLogin', 'Backbone'], function (CustomerLogin) {\n\n    return Backbone.View.extend({\n        model: new CustomerLogin(),\n\n        initialize: function(){\n            // Store the form element and hide it\n            this.form = this.$el.find('form');\n\n            // Store reference to error message box\n            this.error_message = $('#js-loginerror');\n        },\n\n        // The containing element\n        el: $('#js-customerlogin'),\n\n        // Selectors are scoped to the parent element\n        events: {\n            'click #js-loginbtn': 'toggle_display',\n            'submit form': 'validate_fields'\n        },\n\n        toggle_display: function(){\n            this.form.slideToggle();\n        },\n\n        validate_fields: function (e) {\n            var errors = false;\n            var username = this.form[0].elements[0].value;\n            var password = this.form[0].elements[1].value;\n\n            if (username.indexOf('@') === -1) {\n                errors = true;\n            }\n\n            if (password === '') {\n                errors = true;\n            }\n\n            if (errors) {\n                this.error_message.addClass('is-error');\n            } else {\n                this.error_message.removeClass('is-error');\n                this.form.submit();\n            }\n\n            e.preventDefault();\n        }\n    });\n\n});\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-10-01T14:34:05Z",
        "body": "Yep -- if you use HTTPS from end-to-end on your site, and don't have any XSS holes, then sending over the password to the server should be fine. It doesn't matter if you keep it around temporarily in a model, or not.\n"
      },
      {
        "user": "Integralist",
        "created_at": "2012-10-01T14:34:53Z",
        "body": "@jashkenas OK thanks.\n"
      }
    ]
  },
  {
    "number": 1680,
    "title": "Multiple Backbone file",
    "created_at": "2012-09-25T20:09:04Z",
    "closed_at": "2012-09-28T16:59:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1680",
    "body": "Maybe this question maybe silly but on million pages views site there is any possibility to create backbone hub to backbone childs ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1680/comments",
    "author": "kimont",
    "comments": [
      {
        "user": "philfreo",
        "created_at": "2012-09-25T20:09:54Z",
        "body": "Can you clarify what you mean by \"backbone hub to backbone childs\"?\n"
      },
      {
        "user": "kimont",
        "created_at": "2012-09-25T20:11:54Z",
        "body": "tree:\nbackbonehub.js - main query for main index\nbackbonechild.js - for rest\n\ni just notice that some of main sites use 'individual js'\nlike.. em.. main DB table to childs childs?\nAs i say it could be silly question coz I am more in DB 'cloud' opt that js.\n"
      }
    ]
  },
  {
    "number": 1648,
    "title": "is possible extend from extended view?",
    "created_at": "2012-09-14T09:00:33Z",
    "closed_at": "2012-09-14T11:08:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1648",
    "body": "I have common view and want extend from it. here is code\n\n``` javascript\nvar fb = Backbone.View.extend({\n        id: 'fb-root',\n       setup:function(id){\n           ...\n       }\n});\n\nvar wp = fb.extend({\n      initialize: function (ops){\n        this.setup(ops.id);\n      }\n})\n```\n\nhow can do something like this?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1648/comments",
    "author": "Mirodil",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-09-14T11:08:41Z",
        "body": "Mornin' @Mirodil, thanks for posting!  You can certainly extend extended views.  Just call `extend` on the child view.\n\n``` js\nvar View = Backbone.View.extend({\n  tagName: 'span'\n});\nvar A = View.extend({…});\nvar B = View.extend({…});\n\n// span, span\nconsole.log(new A().tagName, new B().tagName);\n```\n\nHope that helps.  :)\n"
      }
    ]
  },
  {
    "number": 1632,
    "title": "Unroute method",
    "created_at": "2012-09-07T14:59:57Z",
    "closed_at": "2012-09-07T15:27:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1632",
    "body": "Would be great if I would have the possibility to define a \"unroute\" method to clean up resources when exiting from a route.\nI think it would be great if I could return a callback function on my route event, that would be called when another route is activated. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1632/comments",
    "author": "gmussi",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-09-07T15:27:26Z",
        "body": "You already have a global event, whenever a route is matched:\n\n```\nBackbone.history.on(\"all\", function(event) { ... });\n```\n\nFeel free to use it for cleanup.\n"
      },
      {
        "user": "gmussi",
        "created_at": "2012-09-07T16:04:23Z",
        "body": "To whomever it might be useful, I could unroute using the following technique:\n\n<pre>\nunrouter = function (router, route, vars){\n    if (this.lastRoute && (unrouteMethod = router.unroutes[this.lastRoute])) {\n        router[unrouteMethod].apply(this, this.lastVars);\n    }\n    this.lastRoute = route;\n    this.lastVars = vars;\n}\nBackbone.history.on(\"route\", unrouter);\n</pre>\n\nAnd declaring my unroutes:\n\n<pre>\nApp = Backbone.Router.extend({\n    routes : {\n        '' : 'welcome',\n        'view/:id' : 'view'\n    },\n    unroutes: {\n        'welcome': 'unwelcome',\n        'view': 'unview'\n    },\n...\n</pre>\n"
      }
    ]
  },
  {
    "number": 1600,
    "title": "Custom Indexes on A Collection",
    "created_at": "2012-08-29T22:30:07Z",
    "closed_at": "2012-08-30T02:41:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1600",
    "body": "It would be nice if you could specify custom indexes so that gets on a collection would be faster. I am not sure on what is the best way of declaring these but maybe just having and array on the collection like this.\n\n``` json\n{ \"indexes\" : [\"title\",\"author\"] }\n```\n\nIn cases where there are large amounts data looping through all of the models is not efficient. If that could be stored when the item is added to the collection this could be much faster.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1600/comments",
    "author": "arhea",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-08-30T02:41:05Z",
        "body": "Totally. Feel free to add whatever indexes you'd like to your collections.\n\n```\nthis.byAuthor = _.groupBy(this.models, 'author');\n```\n"
      }
    ]
  },
  {
    "number": 1586,
    "title": "_.bindAll(this, 'render'), etc.",
    "created_at": "2012-08-26T14:35:59Z",
    "closed_at": "2012-08-26T14:44:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1586",
    "body": "Just a simple question: Is it still necessary to use `_.bindAll(this, 'render');` when initializing new views?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1586/comments",
    "author": "gsklee",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-08-26T14:44:50Z",
        "body": "It depends on your intended usage of `render`.  For instance, `_.bindAll(this, 'render')` is not needed in the following (contrived) example because methods in `events` are bound via `delegateEvents` and the third argument of `on` handles context.  Otherwise, you probably need to bind it via `_.bindAll` or `_.bind`.  In my experience, it's not needed often.\n\n``` js\nvar View = Backbone.View.extend({\n  events: {\n    click: 'render'\n  },\n\n  initialize: function() {\n    this.model.on('change', this.render, this);\n  }\n});\n```\n"
      }
    ]
  },
  {
    "number": 1564,
    "title": "Feature request: Collections.refresh()",
    "created_at": "2012-08-20T12:15:12Z",
    "closed_at": "2012-08-20T13:33:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1564",
    "body": "I've been using backbone.js for my nodejs apps. I have this setup in my Backbonejs code where a model has a property that is not being save in the database. It will have a default value of say 'checked' when added. Now, I used Collections.reset() to bootstrap my Collections every page reload. When I set some models to 'unchecked' status, it's get the default of  'checked' back when redirecting/reloading the page. What I want is a method on the collection that during bootstrapping, it only adds models that are not in the Collections. Is this feature already in backbone.js?\n\nFor the meantime, I wrote my own bootstrap method for my Collections. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1564/comments",
    "author": "sydcanem",
    "comments": [
      {
        "user": "vincentbriglia",
        "created_at": "2012-08-20T12:39:03Z",
        "body": "The only thing I can think of is that If you'd like to add the models to the current collection, instead of replacing the collection's contents is to pass {add: true} as an option to fetch. But seen you're bootstrapping, I have difficulty understanding how you would keep state between page reloads.Could you elaborate ?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-08-20T13:33:35Z",
        "body": "Yes -- when you refresh the page, you're going to lose any state that's only stored in JavaScript memory. \n\nIf you don't want to store \"checked\" in the database, but you _do_ want to store it, then you're going to have to put it in a cookie or a session instead. This doesn't have anything to do with Backbone in particular.\n"
      }
    ]
  },
  {
    "number": 1552,
    "title": "Delegate event in View does not return original event",
    "created_at": "2012-08-15T10:48:20Z",
    "closed_at": "2012-08-15T12:08:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1552",
    "body": "To process some attributes i need access to $(this) in event callback, but receive only event object. This event object contain target (child html element) but does not contain the original event.\n\nFor example\n\n```\n<div class=\"test\"><div class=\"sub\">TEXT</div></div>\n\nevents: {\n    \"click .test\": \"func\"\n}\n```\n\nThis backbone uses \n\n```\nvar eventName = match[1], selector = match[2];\nmethod = _.bind(method, this);\n```\n\nyes, it is okay. But maybe the original \"this\" should returned too as 2d argument?\n\nit can be dome for example as $.delegate eventData\n\nps of course i can get access to parent by jquery parents() but it adds some complexity\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1552/comments",
    "author": "artyomtrityak",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-08-15T12:01:44Z",
        "body": "Mornin' @artyomtrityak, thanks for opening an issue!  I'm not sure which element you're trying to get to, but I'm fairly certain that you can grab a reference to it using one of the following:\n- event.target\n- event.currentTarget\n- event.delegateTarget\n\nCould you be a bit more specific?  Maybe some extra context in the code would help me understand the issue.\n"
      },
      {
        "user": "artyomtrityak",
        "created_at": "2012-08-15T12:08:39Z",
        "body": "oh,, sry, i have missed event.currentTarget, sorry \n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-08-15T12:27:22Z",
        "body": "No problem, glad you got it worked out!  :)\n"
      }
    ]
  },
  {
    "number": 1538,
    "title": "command+click or ctrl+click to open a new tab",
    "created_at": "2012-08-09T21:44:52Z",
    "closed_at": "2012-08-10T14:10:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1538",
    "body": "In Backbone.History.navigate functionality to be added to open new tab on ctrl+click or cmd+click, unable to extend the history function as well, the following piece of code could be added for the functionality\n\nif(event.preventDefault() || event.metaKey || event.ctrlKey) {\n  window.open(location.origin + fragment, '_blank');\n}\n\nThank you\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1538/comments",
    "author": "ramkumarceg-zz",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-08-10T14:09:57Z",
        "body": "Backbone.History has nothing to do with `click` events, I'm afraid.\n"
      },
      {
        "user": "ramkumarceg-zz",
        "created_at": "2012-08-10T15:25:35Z",
        "body": "May be i should rephrase the question, what would be best way to implement cmd+click in backbone?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-08-10T15:27:27Z",
        "body": "Ah, yep -- listen for the type of click you care about (middle-click, command-click, control-click) ... and open the URL you desire.\n"
      }
    ]
  },
  {
    "number": 1536,
    "title": "Why is there no \"create\" event to differentiate between a sync create and a sync update",
    "created_at": "2012-08-09T18:19:54Z",
    "closed_at": "2012-08-10T14:24:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1536",
    "body": "I currently listen to the \"sync\" event of a Backbone model and manually detect the 201 status code for a newly created resources. There are many times when various listening views need to know whether or not an object was created for the first time or simply updated.\n\nIf there is no good reason why not, then could an \"create\" event be added and triggered in the save method of Models?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1536/comments",
    "author": "emorikawa",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-08-10T14:12:05Z",
        "body": "Shouldn't views be more interested when the new model is `add`-ed to a collection? Why isn't that working for your use case?\n"
      },
      {
        "user": "emorikawa",
        "created_at": "2012-08-10T14:22:36Z",
        "body": "In this case, I care about the difference between when a singular model is created vs when it us updated. In the default `option.success` method in `Model.save`, I wanted to get an additional 'create' event instead of having to determine it after the fact from the 'sync' event.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-08-10T14:24:14Z",
        "body": "If you care about the singular model being created, you can't just use `options.success`?\n\n... or failing that, how about this:\n\n```\nsuccess: function(model) {\n  model.trigger('create');\n}\n```\n"
      },
      {
        "user": "emorikawa",
        "created_at": "2012-08-10T14:40:14Z",
        "body": "The `success` method on `Model.save` will fire both when a model is updated (return status code 200) AND when it is created (return status 201) right? The issue is being able to always discriminate between the two.\n\nIt would be unfortunate to have to pass a custom success method each and every time I call 'save' just to get my create event. I also don't want to have a top-level extension overriding the save's success method, because that would also override anytime I did want a one-off custom success method elsewhere in the code.\n\nI know I could also listen to the 'change:id' event, but that still doesn't semantically say to me that the server created a new single object with a 201 code.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-08-10T14:46:23Z",
        "body": "What exactly are you doing with the `create` event that's so specific you can't use `add` or `sync` ... but so generic that you can't use the singular `success` callback?\n\nAn elaboration of a bit more of your use case would help.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-08-10T14:48:01Z",
        "body": "This is a great use for a custom `Backbone.sync`.  It's easy to add and takes very little code.\n\n``` js\nvar sync = Backbone.sync;\nBackbone.sync = function(method, model, options) {\n  sync.apply(this, arguments).done(function(resp, status, xhr) {\n    if (xhr.status === 201) model.trigger('create', model, options);\n  });\n};\n```\n"
      },
      {
        "user": "emorikawa",
        "created_at": "2012-08-10T15:09:06Z",
        "body": "I like braddunbar's idea of using the `.done` method to extend this onto sync.\n\nSome places I use a singular model and need to differentiate between `create` and `sync` include:\n- A singular Membership object for a user joining a group, or the ticket to an event. Create implies a new membership, whereas an update from a sync implies the details of that Membership updated.\n- The representation for a singular current_user for authentication. Create implies a login whereas an update from a sync implies info of the user changed.\n- Just about any other singular resource.\n"
      },
      {
        "user": "evanhammer",
        "created_at": "2013-03-05T01:15:26Z",
        "body": "I agree that a `create` event would be useful. If I want to notify a user that an object has been created successfully. I used @braddunbar 's method.\n"
      },
      {
        "user": "albertpeiro",
        "created_at": "2013-04-29T01:19:05Z",
        "body": "Absolutely agree with the request here expressed. My use case is similar to Twitter's home timeline:\n\n1) Fetch collection with {update: true, remove: false} and wait: true\n2) Collection's 'add' is binded to .append() which adds new pages items below the last visible at the bottom. This is useful for say infinite scroll. I add things to the bottom.\n3) Creates over the collection will fire 'add' which binds to .append. But I wanted to add things to the top.\n\nHere comes the problem. I want creates to .prepend() instead of appending items (just like Twitter prepends only new things to the top, while appending old things to the bottom). isNew() doesn't seem to solve this use case either.\n\nBottomline: you want to display things in different ways when add or create happen, and there is just no easy way/hack around telling where 'add' was called back from.\n"
      },
      {
        "user": "ajsharp",
        "created_at": "2013-11-04T19:48:58Z",
        "body": "I'm going to chime in here to try to revive this thread ;)\n\nI have this use-case as well. @jashkenas to address a question you asked a few replies back:\n\n> What exactly are you doing with the create event that's so specific you can't use add or sync ... but so generic that you can't use the singular success callback?\n\nMy use case is that _I actually want to trigger the collection's add event when a new model is created_. To do that, I need to know when a new model is created. So, I want to do this in my code:\n\n``` coffeescript\nclass OC.Contact extends Backbone.Model\n  # ...\n\nclass OC.Contacts extends Backbone.Collection\n  model: OC.Contact\n\nclass OC.ContactsListView extends Backbone.View\n  initialize: (opts) =>\n    opts.collection ||= new OC.Contacts\n    OC.Contact.on 'create', (instance) =>\n      opts.collection.add(instance)\n```\n\nThis could be accomplished with an explicit success callback where the save happens, but in many cases it's preferable (I would argue) to organize that logic as events.\n\nThe problem with using the \"sync\" event in this case is that it's fired every time the model interacts with the server, which includes updates and deletes.\n\nThanks.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2013-11-06T02:37:42Z",
        "body": "I'm afraid I don't follow that pseudocode. You're trying to listen to an event on the Contact constructor function directly? There shouldn't be any events there. \n\nAnd if you're actually listening to a collection instead -- then \"add\" is the event you're looking for. Right?\n"
      },
      {
        "user": "ajsharp",
        "created_at": "2013-11-06T05:28:59Z",
        "body": "Yea, my apologies. The pseudo-code was correct, the event listener on the constructor does not exist, but it'd be convenient if it did IMHO.\n\nOn the other hand, after posting this I saw that there's a suggested solution for this on the documentation site via Backbone.Collection.create. So it seeks like that may be a better solution than a global\n\nThanks for the quick reply :)\n- alex\n\n> On Nov 5, 2013, at 6:38 PM, Jeremy Ashkenas notifications@github.com wrote:\n> \n> I'm afraid I don't follow that pseudocode. You're trying to listen to an event on the Contact constructor function directly? There shouldn't be any events there.\n> \n> And if you're actually listening to a collection instead -- then \"add\" is the event you're looking for. Right?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      }
    ]
  },
  {
    "number": 1522,
    "title": "shouldn't Collection#add always reference collection on the model?",
    "created_at": "2012-08-02T12:52:11Z",
    "closed_at": "2012-08-02T13:22:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1522",
    "body": "",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1522/comments",
    "author": "kof",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-08-02T13:18:28Z",
        "body": "Hi @kof, thanks for opening an issue.\n\nI'm afraid I don't quite understand your question though.  Are you referring to the arguments for `\"add\"` events, or something else having to do with Collection#add?\n"
      },
      {
        "user": "kof",
        "created_at": "2012-08-02T13:22:08Z",
        "body": "sorry, my bad, I thought the model created via Collection#add hasn't referenced the collection, but it was other model, which was created directly.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-08-02T13:24:48Z",
        "body": "No problem.  Glad you figured it out.  :)\n"
      }
    ]
  },
  {
    "number": 1514,
    "title": "model.change() does not call validate",
    "created_at": "2012-07-27T15:24:53Z",
    "closed_at": "2012-07-27T17:48:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1514",
    "body": "All methods that change attributes call validate (set, create), but change doesn't. Is this a feature?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1514/comments",
    "author": "ichernev",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-07-27T17:48:02Z",
        "body": "Hi @ichernev!  This is definitely working as intended.  `set` is the only method that mutates attribute state (even if it's at the behest of another method).  To be more specific, only methods that change attributes (`set`) or call `sync` (`save`, `destroy`, `create`) need to validate attributes.  Since `change` does neither, there is no need to validate.\n\nHope that helps!  :)\n"
      }
    ]
  },
  {
    "number": 1482,
    "title": "Why do parse happens before initialize ?",
    "created_at": "2012-07-12T11:54:38Z",
    "closed_at": "2012-07-12T11:59:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1482",
    "body": "when I do in collection \nthis.add(data, {parse: true});\n\nstart calling parse than initialize ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1482/comments",
    "author": "ButuzGOL",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-07-12T11:59:55Z",
        "body": "Hi @ButuzGOL!  `parse` is called before `initialize` so that the canonical (parsed) representation of the model is used to initialize the model's attributes.  Doing this in the opposite order would cause attributes to change after `initialize` with no opportunity to re-initialize the model.\n"
      }
    ]
  },
  {
    "number": 1480,
    "title": "Extended classes reference the same object from the extended class.",
    "created_at": "2012-07-11T14:13:01Z",
    "closed_at": "2012-07-11T19:34:21Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1480",
    "body": "In the following example \"this.ajax\"  in the Search collection references the same object for both PhotoSearch and VideoSearch.  \n\nIs this normal behaviour? I am creating a new instance of PhotoSearch and VideoSearch, I do not see why they share the same reference to ajax.\n\n``` javascript\nvar Search = Backbone.Collection.extend({\n\n    ajax : $.ajax(),\n\n    search : function(options) {\n\n        if(!this.ajax.isResolved())\n            this.ajax.abort();\n\n        this.reset();\n        this.loadmore(options);\n\n    }\n\n});\n\nvar VideoSearch = Search.extend({\n\n    loadmore : function(options) {\n        this.ajax = $.get(\"/video\");\n    }\n\n});\nvar PhotoSearch = Search.extend({\n\n    loadmore : function(options) {\n        this.ajax = $.get(\"/photo\");\n    }\n\n});\n\nvar videoSearch = new VideoSearch();\nvar photoSearch = new PhotoSearch();\n\nconsole.log(videoSearch.ajax === photoSearch.ajax); // true\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1480/comments",
    "author": "peeter-tomberg",
    "comments": [
      {
        "user": "knowtheory",
        "created_at": "2012-07-11T15:14:49Z",
        "body": "Just to point out, you're not actually setting either videoSearch.ajax or photoSearch.ajax here.  Since they're contained within function bodies that aren't called, they should be set to the default ajax you've specified in your base Search object.\n\nif you do `console.log(videoSearch.ajax === (new Search).ajax);`  You'll notice that it also returns true.\n"
      },
      {
        "user": "peeter-tomberg",
        "created_at": "2012-07-11T19:06:38Z",
        "body": "I could have sworn videoSearch.ajax === photoSearch.ajax AFTER the search function was called, but for the life of me, I cannot replicate it now. \n"
      },
      {
        "user": "knowtheory",
        "created_at": "2012-07-11T19:34:50Z",
        "body": "Well, let us know if you do manage to reproduce it\n"
      }
    ]
  },
  {
    "number": 1476,
    "title": "fetch() should allow optional URL parameters to be passed",
    "created_at": "2012-07-09T14:43:21Z",
    "closed_at": "2012-07-09T15:19:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1476",
    "body": "I find in my Backbone code that I need to pass URL parameters in with the fetch() method on Collections - some example use cases are a Pinterest-like autoloading feature, where you grab some additional items from the entire list (and I would need to pass in some parameters letting the server know which models are already loaded on the client), or a setup with 2 comboboxes, with the first one being the state, and the 2nd one auto-loading cities based on the state chosen (and I would need to pass in the state name to the cities controller to get back only the appropriate cities from the server).\n\nI've created a Mixin to do this and use it in my code, but I think it would be beneficial (and relatively easy) to add to the Backbone source code itself.\n\n```\nBackbone.ParamFetchCollection = Backbone.Collection.extend({\n\n    fetchWithParams : function(options, params) {\n        options = options ? _.clone(options) : {};\n        var url = options.url || this.url;\n        // loop through additional parameters here, appending them to url\n        if (params) {\n            url += \"?\";\n            _.each(_.keys(params), function(key){\n                url += key + \"=\" + params[key] + \"&\";\n            });\n        }\n        options.url = url;\n        return this.fetch(options);\n    }\n\n});\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1476/comments",
    "author": "bluedevil2k",
    "comments": [
      {
        "user": "fahad19",
        "created_at": "2012-07-09T14:53:08Z",
        "body": "why aren't you using Collection's url as a method?\n"
      },
      {
        "user": "bluedevil2k",
        "created_at": "2012-07-09T14:57:59Z",
        "body": "That'd be poor encapsulation of the Collection object.  In my examples from above, the View (or even the Router) would be the only object that knows about the other parameter values, and those classes in turn would be responsible for resetting the models in the collection.  You wouldn't want to write the Collection's url() to have references to multiple other objects.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-07-09T15:19:31Z",
        "body": "You can already do this just fine -- jQuery options such as `data` are respected and forwarded to the `jQuery.ajax` request for all Backbone sync methods.\n"
      }
    ]
  },
  {
    "number": 1450,
    "title": "route & page reload on IE",
    "created_at": "2012-06-25T10:35:14Z",
    "closed_at": "2012-06-25T16:26:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1450",
    "body": "Hi guys \nI have the following issue I am not sure if this is how backbone is supposed to behave\n\nI start Backbone history on my auth path \n\n``` javascript\nBackbone.history.start({pushState: true, root: '/auth/'});\n```\n\nwhen IE users hit /auth/join backbone switch the url to #auth/join as the browser does not support the history api. But this \nalso reload the page. Can't this be done without reloading the page ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1450/comments",
    "author": "pgherveou",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-06-25T16:26:23Z",
        "body": "Nope -- there's absolutely no way to change the URL without reloading the page in old IEs. That's exactly the problem that `pushState` solves.\n"
      },
      {
        "user": "pgherveou",
        "created_at": "2012-06-25T16:44:14Z",
        "body": "Thks Jeremy. You said Old IE but I was experiencing this issue under IE9. old IE is a pleonasm ? ;-)\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-06-25T16:45:53Z",
        "body": "Just covering my bases -- I never remember exactly which IE supports what.\n"
      }
    ]
  },
  {
    "number": 1427,
    "title": "public inherits helper",
    "created_at": "2012-06-19T09:40:26Z",
    "closed_at": "2012-06-19T12:43:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1427",
    "body": "It would be great if inherits helper function was somehow publicly reachable outside backbone. It's a neat implementation and I'm usually copypasting it to use it as I please.\n\nIs there a reason it's private?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1427/comments",
    "author": "nejcjelovcan",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-06-19T10:30:14Z",
        "body": "Morning @nejcjelovcan, thanks for your issue.  I think `inherits` is private because providing inheritance is only an incidental piece of Backbone rather than a goal in and of itself.  You can read more about it in #1333, #1026, #1029, and #351.\n"
      }
    ]
  },
  {
    "number": 1419,
    "title": "Can I specify HTTP method when calling save?",
    "created_at": "2012-06-16T20:09:11Z",
    "closed_at": "2012-06-16T20:14:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1419",
    "body": "For save method, as per document,  “If the model isNew, the save will be a \"create\" (HTTP POST), if the model already exists on the server, the save will be an \"update\" (HTTP PUT).”\nThe flow that we’ve is: \n1) From a GET, there is a bunch of object-IDs received\n2) Fill in an object (a new backbone model) with the object-id from the GET and additional known fields\n3) Update these objects with a HTTP PUT\n\nWhat is the easy way to get around the “isNew-> POST otherwise, PUT” default  without overly complicated logic.  Would also be possible to over-ride the default behavior by passing the specific method “POST/PUT” to the save method?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1419/comments",
    "author": "cardinal27513",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-06-16T20:14:31Z",
        "body": "Howdy @cardinal27513, thanks for your question.  Since `options` are passed along to `$.ajax`, you can specify a custom HTTP method like so:\n\n``` js\nmodel.save(..., {type: 'PUT'});\n```\n\nAlso, you can override `model.sync` or `Backbone.sync` to do this by default.\n\n``` js\nvar Model = Backbone.Model.extend({\n  sync: function(method, model, options) {\n    // Custom logic here.\n  }\n});\n\nvar sync = Backbone.sync;\nBackbone.sync = function(method, model, options) {\n  // Custom logic here.\n};\n```\n"
      }
    ]
  },
  {
    "number": 1410,
    "title": "toJSON function's parameter misleading",
    "created_at": "2012-06-14T11:27:16Z",
    "closed_at": "2012-06-14T14:18:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1410",
    "body": "Lines 224-226:\n\n```\ntoJSON: function(options) {\n  return _.clone(this.attributes);\n},\n```\n\n`options` parameter never used - why is it there? \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1410/comments",
    "author": "aoboturov",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-06-14T14:18:56Z",
        "body": "Morning @aoboturov!  Thanks for pointing this out.  It's actually intentional and is meant to remind you that `collection.toJSON(options)` passes along the `options` argument to each of its models by default.  See #1222 and #1098 for details.\n"
      }
    ]
  },
  {
    "number": 1376,
    "title": "general collection event",
    "created_at": "2012-06-04T07:29:19Z",
    "closed_at": "2012-06-04T11:42:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1376",
    "body": "Hello!\nFor my HTML/JavaScript table I have my own slider. Everytime the number of entries in the Backbone Collection changes, I have to adjust the size of this slider. So I have to \"listen\" to 3 Events (reset, add and remove) in the slider widget. If there would be a general \"lengthchange\"?! event, I would only have to listen to this one event.\nMaybe some other developers would also benefit from this change?\nThanks a lot\nWolfgang\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1376/comments",
    "author": "wolfgang-adamec",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-06-04T11:42:54Z",
        "body": "Hi @wolfgang-adamec.  I don't know if you're aware of this, but it's fairly easy to use space separated events to listen to the collection changes.\n\n``` js\n// this\ncollection.on('add remove reset', ...);\n\n// instead of this\ncollection.on('add', ...);\ncollection.on('remove', ...);\ncollection.on('reset', ...);\n```\n\nIn this way, you can just proxy those events through a custom collection class like so:\n\n``` js\nvar Collection = Backbone.Collection.extend({\n\n  initialize: function() {\n    this.on('add remove reset', function() {\n      this.trigger('change:length', this, this.length);\n    }, this);\n  }\n\n});\n```\n\nSince this is rather easy to do, I think we should probably leave it up to the user as to how it's implemented.  Hope it helps!\n"
      },
      {
        "user": "wolfgang-adamec",
        "created_at": "2012-06-04T11:54:34Z",
        "body": "Thank you!\n"
      }
    ]
  },
  {
    "number": 1370,
    "title": "Backbone.View -- this._ensureElement();",
    "created_at": "2012-06-02T06:52:08Z",
    "closed_at": "2012-06-08T17:05:16Z",
    "labels": [
      "wontfix",
      "question",
      "change"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1370",
    "body": "I consider ‘this._ensureElement();’  this processing operations into 'this.initialize.apply(this, arguments);' more reasonable to facilitate the flexible configuration of the el.\nThank you.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1370/comments",
    "author": "lamomm",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-06-02T09:35:04Z",
        "body": "Thanks for your issue @lamomm.  I'm not sure what you're asking though.  Do you mean that `_ensureElement` should be called after `initialize`?\n"
      },
      {
        "user": "lamomm",
        "created_at": "2012-06-02T09:40:39Z",
        "body": "This, but may be other operations need to be adjusted before the initialize configuration.\nNot very sure whether it is more reasonable, but will facilitate flexible configuration of the el, especially in the View class instance object.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-06-02T09:50:20Z",
        "body": "I think the main idea is to ensure that a view has an element at all times.  Changing that invariant means breaking a lot of assumptions in existing code.\n\nWhat type of configuration do you need to do before the element is created?\n"
      },
      {
        "user": "ronadams",
        "created_at": "2012-06-07T21:17:57Z",
        "body": "I agree that _ensureElement should be processed AFTER initialize but before delegateEvents.  I feel as though the only place a user should assume this.$el is present is at render time or thereafter in the View lifecycle.\n\nIf this type of change would break existing user implmentations, there should be some sort of dynamic attribute formatting function called just prior to _ensureElement.  This way the user is free to assign dynamically generated attributes to the element generated by the View.\n\nI get around all of this by simply extending Backbone.View with my own custom View and using constructor to override the order of execution.\n\nMyView = Backbone.View.extend({\n\n```\nconstructor : function(options) {\n    this.cid = _.uniqueId('view');\n    this._configure(options || {});\n    this.initialize.apply(this, arguments);\n    this._ensureElement();\n    this.delegateEvents();\n}\n```\n\n});\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-06-07T22:15:09Z",
        "body": "@ronadams Why not just do this:\n\n``` js\nvar View = Backbone.View.extend({\n\n  attributes: function() {\n    return {\n      // ...\n    };\n  }\n\n});\n```\n"
      },
      {
        "user": "ronadams",
        "created_at": "2012-06-07T23:55:36Z",
        "body": "True, good point @braddunbar.....that is a good alternative solution for most use cases.\n\nHowever, my solution works better for my particular application.  I create a prototype application View that extends Backbone's so I can add sugar to BB View that doesn't exist in the current library (additional lifecycle methods/properties/a common View Model and View Model config, etc).  I then have subclasses that extend my application View which provide common functionality and best practice encapsulation for different purposes (ListViews/ContentViews/TabViews).  Instead of forcing those subclasses to do a MyView.prototype.attributes.apply(), I just let them handle attributes however they want and then do final manipulation of the attributes in my application View initialize function.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-06-08T17:05:15Z",
        "body": "Backbone views are designed to have an element at all times, whether that element is created via `_ensureElement` or passed in via `el`.  If you need to alter options it should be done in the constructor (before calling the super constructor) or after element creation/attachment.\n\n@ronadams I understand your use case, but I think you should probably either do initialization in the constructor or just alter the element after creation.\n"
      },
      {
        "user": "ronadams",
        "created_at": "2012-06-08T17:10:24Z",
        "body": "Fair enough\n"
      }
    ]
  },
  {
    "number": 1352,
    "title": "Is there a way to get defaults via function?",
    "created_at": "2012-05-28T16:58:00Z",
    "closed_at": "2012-05-28T18:20:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1352",
    "body": "We’ve a custom ID field and it is part of the object sending back to the server.\nIt needs be different for each model. Is there an easy way to just specify that field to get its initial value using  function that generates the ID. I’ve tried this but it does not seem to work..\n\n``` javasript\ndefaults : {\nmyID : function () {return genID();}\n}\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1352/comments",
    "author": "cardinal27513",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-05-28T18:20:57Z",
        "body": "Hi @cardinal27513, thanks for the issue.  I think you're looking for something like this:\n\n``` js\nvar Model = Backbone.Model.extend({\n\n  defaults: function(){ \n    return {myID: genID()};\n  }\n\n});\n```\n"
      }
    ]
  },
  {
    "number": 1347,
    "title": "optimistic model.destroy()",
    "created_at": "2012-05-25T15:03:49Z",
    "closed_at": "2012-05-25T15:05:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1347",
    "body": "Hi\n\nthere's a way (without rewrite the model.destroy() method) to prevent the destroy event bubbles up to collection that contains the model istance?\n\nI want to check the server response(the json content not the HTTP code) on HTTP DELETE response and in some case (for example when the server's response contains 'error_messege' inside the json) do not remove the model from collection. \n\nI know there's success callback inside the model.destroy(), but when it's call, the destroy event was already triggered and bubbles up to collection\n\nthanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1347/comments",
    "author": "a-ursino",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-05-25T15:05:47Z",
        "body": "How about:\n\n```\nmodel.destroy({wait: true});\n```\n\n?\n"
      },
      {
        "user": "a-ursino",
        "created_at": "2012-05-25T15:23:16Z",
        "body": "Sure, i know the behaviour of {wait: true}, but my question is different.\nWhen HTTP DELETE returns, the destroy's success callback is call, but i cant prevent (if for example the server response contains an error message) that the destroy event bubbles up till the collection.\n\nfrom Backbone.destroy(): \n\n``` javascript\noptions.success = function(resp) {\n        if (options.wait) triggerDestroy();\n        if (success) {\n          success(model, resp);\n        } else {\n          model.trigger('sync', model, resp, options);\n        }\n      };\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-05-25T15:24:48Z",
        "body": "If your server has an error, then return your error message with a non-200 HTTP status code, and the `success` callback won't be triggered.\n"
      },
      {
        "user": "a-ursino",
        "created_at": "2012-05-25T15:37:33Z",
        "body": "So either in destroy() either in create(), all the non-200 http return code invoke error callback instead of success?\n"
      }
    ]
  },
  {
    "number": 1334,
    "title": "Parameters structure on model.save() with mongoid",
    "created_at": "2012-05-20T15:43:51Z",
    "closed_at": "2012-05-21T13:18:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1334",
    "body": "I have an application in rails 3 with mysql and i am migrating to mongoid. I am using backbone.js to make my application more friendly.\n\nWhen I use @model.save with my mysql version, i got an ajax call like this : \n\n```\n{\"created_at\"=>\"2012-05-19 11:05:57\",\n \"email\"=>\"toto@test.com\",\n \"id\"=>\"13\",\n \"invitation_accepted_at\"=>nil,\n \"invitation_limit\"=>nil,\n \"invitation_sent_at\"=>\"2012-05-19 11:05:57\",\n \"invitation_token\"=>\"MACzLtucjtVSwY5Qz2Pp\",\n \"invited_by_id\"=>1,\n \"invited_by_type\"=>\"User\",\n \"role\"=>\"2\",\n \"updated_at\"=>\"2012-05-19 11:05:57\",\n \"user\"=>{\"email\"=>\"toto@test.com\",\n \"role\"=>\"1\"}}\n```\n\nSo i can use params[:user] in my controller because i have a key :user in my params. But now with mangoid, i got params : \n\n```\n{\"_id\"=>\"4fb8febe7d552d0a5e000010\", \n\"email\"=>\"toto@test.com\", \n\"invited_by_id\"=>nil, \n\"invited_by_type\"=>nil, \n\"role\"=>\"2\", \n\"id\"=>\"4fb8febe7d552d0a5e000010\"}\n```\n\nThe user key disappear... How can i solve this problem?\n\nThank you\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1334/comments",
    "author": "sebfie",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-05-21T13:18:23Z",
        "body": "No idea. Feel free to try the mailing list or IRC if you need more help, but this sounds like a mongoid thing.\n"
      }
    ]
  },
  {
    "number": 1330,
    "title": "How can I Stop the view add parent element to the template",
    "created_at": "2012-05-18T06:44:15Z",
    "closed_at": "2012-05-18T11:23:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1330",
    "body": "I know the Backbone.js's view have a some parameter like id,tagName,className\n\n``` javascript\nvar DocumentRow = Backbone.View.extend({\n\n  tagName: \"li\",\n\n  className: \"document-row\",\n\n});\n```\n\nit use for the insert template's parents property,when I does't set it ,it will add a div to the template as the template's parent\n\nbut it really annoy me cuz something I don't need the parent! \n\nAll I need already have in my template,\n\nso how can I cancel it?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1330/comments",
    "author": "hh54188",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-05-18T11:23:59Z",
        "body": "You can prevent Backbone views from creating their own element by passing in your own via the `el` option.\n\n``` js\nvar el = $(_.template(...));\nvar view = new Backbone.View({el: el});\n```\n\nHope this helps.  :)\n"
      },
      {
        "user": "hh54188",
        "created_at": "2012-05-21T05:43:50Z",
        "body": "@braddunbar :I still don't quite understand,my way to create a view is :\n\n``` javascript\nwindow.AudioManageView = Backbone.View.extend({\n            //el:$(_.template($(\"#manage-template-audio\").html()));?\n\n              template: $(\"#manage-template-audio\").html(),\n\n              render: function () {\n\n                  var tmpl = _.template(this.template);\n\n                  this.$el.html(tmpl(this.model.toJSON()));\n                  return this;\n              }\n        });\n```\n\nhow can I it apply to my script?just like my commet?but it doesn't work\n"
      }
    ]
  },
  {
    "number": 1249,
    "title": "backbone save - success error callback issue",
    "created_at": "2012-04-26T11:19:07Z",
    "closed_at": "2012-04-30T20:41:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1249",
    "body": "I am trying to save a backone model with error and success callbacks. As the documentation says\n\n> save accepts success and error callbacks in the options hash, which are passed(model, response) as arguments. The error callback will also be invoked if the model has a validate method, and validation fails. If a server-side validation fails, return a non-200 HTTP response code, along with an error response in text or JSON.\n\nWhen the server validation fails, I am sending a non-200 response with the error object, but still, the success callback is called.\n\nHere is the save function \n\n``` js\nthis.model.save(item, {\n  wait: true,\n  success: function (model, response) {\n    // even if there is a non-200 response this is being called\n    app.navigate('items/'+model.id, {trigger: true, replace: true})\n    self.undelegateEvents();\n  },\n  error: function (model, response) {\n    // doesn't get called when there is a non-200 response\n    self.undelegateEvents()\n    self.delegateEvents()\n  }\n});\n```\n\nAnd this is what I am doing on the server\n\n``` js\nimager.upload(req, res, function (err, files, cdnUri, res){\n  if (err) return res.json(err, 403)\n  item.image = { cdnUri : cdnUri, files : files }\n  item.save(function (err) {\n    // when there is an error, this is sent (which is non-200 response with error object)\n    if (err) return res.json(err.errors, 403) \n    res.json(item)\n  })\n}, 'items')\n```\n\nBut the above works fine when I don't send the error object in response. i.e, if I only send the response code `if (err) return res.send(403)`\n\nI am using backbone v0.9.2\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1249/comments",
    "author": "madhums",
    "comments": [
      {
        "user": "madhums",
        "created_at": "2012-04-26T12:11:58Z",
        "body": "The response object has the proper status code of 403. I guess there is something going on with the headers not being properly interpreted? \n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-30T20:41:52Z",
        "body": "I'm afraid I don't know the answer to your question -- our `success` callback is just using jQuery's `success` callback ... so perhaps you'd better debug your example with them.\n"
      }
    ]
  },
  {
    "number": 1233,
    "title": "Conflict with other plugin's click events",
    "created_at": "2012-04-17T08:46:03Z",
    "closed_at": "2012-04-18T18:50:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1233",
    "body": "Hi, I'm trying to use Backbone.js with a jQuery plugin (easyTabs) but it seems that Backbone is highjacking the click event from the plugin.. It does the same thing when I try to use jQuery UI Tabs.\n\nI have no errors and my anchor from my link is in my URL but it seems that the click event is blocked.. Someone already have this issue?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1233/comments",
    "author": "mathvallee",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-04-17T13:42:31Z",
        "body": "Hi @mathvallee!  Thanks for your issue.  Judging from your description there could be many reasons why your click event isn't firing.  Can you provide us with some code to look at?\n"
      },
      {
        "user": "wookiehangover",
        "created_at": "2012-04-17T15:11:28Z",
        "body": "sounds like event.stopPropagation() is missing in the event handler...\n"
      },
      {
        "user": "mathvallee",
        "created_at": "2012-04-18T07:26:05Z",
        "body": "I can't really show you some code because it's only one line where I call the plugin.. \n\n@wookiehangover In the plugin's event handler or Backbone.js ?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-18T18:50:47Z",
        "body": "... probably not a backbone problem -- but feel free to ask on the mailing list, or in IRC. \n"
      },
      {
        "user": "RamaKrishnanGanesan",
        "created_at": "2014-10-09T12:44:02Z",
        "body": "Hi, Have the same problem,\nall events are fired expect 'click' event. I am using a plugin(contextMenu) on backbone.\n"
      },
      {
        "user": "ndelaforge",
        "created_at": "2014-10-14T12:43:28Z",
        "body": "Easytab uses the # notation to trigger the display of tabs.\nThe # notation is also used by backbone to trigger routes. So when you click a tab with easytab, it is interpreted by backbone as a routing event.\n\nThat's why you have no error logged in the console. This is a design issue, not a JS error.\n"
      }
    ]
  },
  {
    "number": 1217,
    "title": "Difference in objects returned from collection.reset and collection.add",
    "created_at": "2012-04-13T03:07:04Z",
    "closed_at": "2012-04-18T19:25:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1217",
    "body": "Backbone.Collection.reset and Backbone.Collection.add are clearly used for different things.  However, there are similarities between the two.  For one, both have a trigger (reset and add respectively) and both take a list of models as input.  The documentation states that reset could be used to bootstrap a collection during initial page load.  This example really doesn't make sense though because if a page is being loaded for the first time, won't the collection be empty anyway?  In fact, a much more realistic use case would be to refresh the entire collection after the page was already loaded.  Furthermore, you could just as easily use Backbone.Collection.add to bootstrap that collection in the beginning.\n\nHowever, using reset is appealing because you could technically use it to bootstrap initially and to refresh the collection at any point during runtime.  The question that I have is around the object that is returned from these two methods (reset and add).  The reset method includes an object with multiple keys, one of them being the models key which points to the array of models that were added during the reset method.  That key is really useful because you can use it to pass to a template for rendering.  Likewise, that same array, is also present in the add method.  This is where the behavior becomes different.\n\nThe reset method triggers the \"reset\" trigger and passes \"this\" back to whatever function is listening, plus options.  The \"this\" is the scope of the reset method, unless bound to a higher scope using a bind technique (I didn't look that far).  The reset trigger from the reset method differs from the add trigger in the add method in that instead of passing the \"this\" variable to listening functions, it passes instead, the models array.  I think it's a lot easier to deal with when the trigger passes the models array instead of passing the \"this\" context to the listening functions.\n\nOn line 746: if (!options.silent) this.trigger('reset', this, options);\n\nOn line 631: model.trigger('add', model, this, options);\n\nI understand that the reset method only throws the reset trigger one time, whereas the add method throws the add trigger for each model.  What though, is the usefulness of returning the \"this\" context to listening functions?  Aren't those functions just interested in the models: Array?  Ultimately those are going to get snagged and passed to a render function anyway.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1217/comments",
    "author": "sneakywombat",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-04-18T19:25:09Z",
        "body": "I'm not really sure what you're looking for here as an answer, but you may have better luck finding it in a live conversation on IRC, or on the mailing list.\n\nIn any event, the fundamental important difference (and reason for exisistence) between `add` and `reset` is that with the former, you get one event for each model added ... and with the latter, you get a single event for _all_ the models being added. It's just an efficiency thing, when you want to completely blow away the contents of the collection with a new set of models.\n"
      },
      {
        "user": "sneakywombat",
        "created_at": "2012-04-18T21:51:25Z",
        "body": "did you read the entire post or stop in the middle?  I said at the end...\n\n\"I understand that the reset method only throws the reset trigger one time, whereas the add method throws the add trigger for each model. What though, is the usefulness of returning the \"this\" context to listening functions?\"\n\nYou repeated this and I know that already.  I want to know why it's useful to return \"this\", the collection itself to the reset trigger as opposed to an array of models that the collection was reset to.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-18T21:52:30Z",
        "body": "... so that you can chain a call off of it. \n"
      }
    ]
  },
  {
    "number": 1198,
    "title": "collection.sortedIndex does not use collection.comparator",
    "created_at": "2012-04-06T01:37:17Z",
    "closed_at": "2012-04-06T14:15:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1198",
    "body": "`collection.sortedIndex` does not use `collection.comparator`, so it always returns 0\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1198/comments",
    "author": "mikepb",
    "comments": [
      {
        "user": "aterris",
        "created_at": "2012-04-06T03:15:24Z",
        "body": "I hadn't actually had a use for sortedIndex yet and I don't use the comparators all that often, so I just spent the last few minutes playing around in the console.\n\nsince sortedIndex is just a proxied underscore method writing `collection.sortedIndex` is essentially just syntax sugar for `_.sortedIndex(collection.models, ...`\n\nIt looks like you are actually expecting it to automatically pass the comparator on to sortedIndex, but these methods are simply proxied with the models being passed as the first argument.  You will need to just pass it yourself.\n\nHere is the final code that I ran in the backbone docs site console that I feels recreates your issue and shows how to get the correct result.\n\n```\nc = new Backbone.Collection();\nc.comparator = function(model){ return model.get('score')}\n\nc.add(new Backbone.Model({score: 3}));\nc.add(new Backbone.Model({score: 0}));\nc.add(new Backbone.Model({score: 9}));\nc.add(new Backbone.Model({score: 6}));\n\nc.pluck('score');\n# [0,3,6,9]\n\nc.sortedIndex(new Backbone.Model({score: 7}));\n# 0 \n\nc.sortedIndex(new Backbone.Model({score: 7}), c.comparator);\n# 3\n\n```\n\nBecause the underscore method are passed models, it will never be able to figure out the order (will always return 0) unless a comparator of some kind is passed, so it knows what \"sorting the models\" even means.  This is actually the correct behavior, and I think it makes sense to keep it the same as every other proxy method.\n\nI am pretty sure that should addresses your issue, but if I missed something or I am way off base with what you are talking about just lemme know :+1:\n"
      },
      {
        "user": "mikepb",
        "created_at": "2012-04-06T03:18:35Z",
        "body": "What you say is true! I was thinking about having collections default to using its own comparator, but since I am not using the method anymore, and not many people actually use it, it's probably fine to just leave it as is.\n"
      },
      {
        "user": "aterris",
        "created_at": "2012-04-06T03:29:46Z",
        "body": "Cool :octocat:\n"
      }
    ]
  },
  {
    "number": 1183,
    "title": "success and error callbacks are not undefined.",
    "created_at": "2012-04-04T20:57:52Z",
    "closed_at": "2012-04-04T21:16:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1183",
    "body": "The problem is that when the view passes an options object literal to the model's sync method, the error and success methods have been stubbed out as function() {} and therefore cannot be extended with the _.extend(params, options) pattern.\n\nI propose leaving those methods undefined unless specifically declared.  That way extending the objects produces the desired effect.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1183/comments",
    "author": "jpgrace",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-04-04T21:16:34Z",
        "body": "I'm not sure what you mean by this, as our `success` and `error` callbacks are only ever defined if they're being used for some purpose. \n\nPlease submit a pull request or failing test case with your proposed problem / change.\n"
      },
      {
        "user": "jpgrace",
        "created_at": "2012-04-04T21:18:37Z",
        "body": "I just did some digging and discovered Backbone.wrapError() which is the fallback error event.  I'm in the process of figuring out how to utilize it.  If I can figure it out, I'll close this ticket.  Otherwise I'll elaborate.\n"
      },
      {
        "user": "jpgrace",
        "created_at": "2012-04-04T21:19:03Z",
        "body": "Looks like you beat me to it.\n"
      }
    ]
  },
  {
    "number": 1157,
    "title": "Models added in collection's constructor are overwritten when initialised",
    "created_at": "2012-03-29T17:38:16Z",
    "closed_at": "2012-03-29T17:49:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1157",
    "body": "This is a new bug i came across today when upgrading backbone..\nWhen adding a model to a collection in the constructor... such as:\n(coffeescript below)\n\n```\nclass exports.Tags extends Backbone.Collection\n    model: Tag\n\n    initialize: ->\n        @add(new Tag({name:\"All\",id:'all'})\n```\n\nThen when initializing...\n\n```\n@tags = new Tags(data.tags)\n```\n\nThe \"All\" model no longer exists:\n\n```\n@tags.get('all')    # undefined\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1157/comments",
    "author": "miketucker",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-03-29T17:49:58Z",
        "body": "That's correct.  As discussed in #814 and #962, the collection should be fully initialized (including having called `initialize`) when the first models are added.  You have two choices in this situation:\n1. Add the model in the constructor (after calling the super constructor).\n2. Add the model after creating the collection.\n\nHope this helps!\n"
      }
    ]
  },
  {
    "number": 1149,
    "title": "Method name conflict on prototype chain for event binding",
    "created_at": "2012-03-28T19:26:31Z",
    "closed_at": "2012-04-09T20:33:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1149",
    "body": "Ok so this is kind of hard to explain, but I will try and offer a test case that should be reproducible. I should also note that I discovered this in version 0.5.3. I know that there have been some changes to the way event binding works in subsequent versions, but it's worth checking out anyway.\n\nIt could also be a bug in Chrome, not sure.\n\nThe problem I discovered is that if I store a reference to a view on another view, and both views have a method with the same name, and I bind that method to an event with both views, I am unable to successfully unbind the event from the method on the referenced view.\n\nExample (please read comments):\n\n```\nvar ParentView = Backbone.View.extend({\n\n    views: {},\n\n    initialize: function () {\n        this.model.bind(\"myCustomEvent\", this.render, this);\n\n        _.bindAll(this, \"render\", \"onClose\");\n    },\n\n    render: function () {\n        console.log(\"parent just rendered\");\n    },\n\n    onClose: function () {\n        // this method gets called when I want to remove the view and unbind events\n\n        this.model.unbind(\"myCustomEvent\", this.render); // this works great\n    }\n\n});\n\nvar ChildView = Backbone.View.extend({\n\n    views: {},\n\n    initialize: function () {\n        this.model.bind(\"myCustomEvent\", this.render, this);\n\n        _.bindAll(this, \"render\", \"onClose\");\n    },\n\n    render: function () {\n        console.log(\"child just rendered\");\n    },\n\n    onClose: function () {\n        // this method gets called when I want to remove the view and unbind events\n\n        // In Chrome 17 I noticed that this.render is function() { [ Native Code ]}\n        // this.render !== ChildView.prototype.render, which is why the unbind fails on line 92 of Backbone.js\n        // In this case, you would not expect render to appear as a property of this, but in fact it does\n        // The expected behavior is for render to appear as a property on the prototype chain\n\n        this.model.unbind(\"myCustomEvent\", this.render); // this does not do anything\n    }\n\n});\n\nvar App = {\n    views: {}\n};\n\nApp.views.parent = new ParentView({\n    model: new MyCustomModel()\n});\n\nApp.views.parent.views.child = new ChildView({\n    model: new MyCustomModel()\n});\n\n// If I call App.views.parent.views.child.onClose() then render is not unbound from the myCustomEvent event. \n// I get a zombie view.\n```\n\nThe hack to solve this problem is to change the name of the referenced (child) view's render method. If I change it to, say, \"renderMe\" then it works properly. When inspecting the view, renderMe is not a property of the view itself, but instead is found one level up on the prototype chain where it is expected.\n\nI think there is a conflict going on with the prototype chain where method names are colliding.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1149/comments",
    "author": "adambom",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-04-09T20:33:18Z",
        "body": "I'm not sure if I follow this quite enough to help you out here -- you may have better luck asking on the mailing list, or on IRC.\n\nIn general, in JavaScript, a reference on the prototype chain is just a reference -- it can be shared, or overwritten, or whatever.\n"
      }
    ]
  },
  {
    "number": 1142,
    "title": "Why no error message when trying to add a model to the same collection twice?",
    "created_at": "2012-03-26T02:52:25Z",
    "closed_at": "2012-03-26T13:37:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1142",
    "body": "0.9.1 just threw a \"Can't add the same model to a collection twice\" error. This helped me identify and resolve a serious server-side bug that might have gone unnoticed for some time if the client-side error had not been thrown.\n\nI see that duplicates are ignored silently as of 0.9.2 and this was clearly a conscious decision so I just wondered what the motivation for this was.\n\nI can't think of a reason (other than a bug) for trying to add a duplicate model to a collection that can't support duplicates and I would therefore expect to see an error message even if the code is able to mitigate the error as 0.9.2 does.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1142/comments",
    "author": "alexgoldstone",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-03-26T13:37:05Z",
        "body": "For a long time -- our position and reasoning was along the same lines as yours: Duplicate models in a collection indicate an application logic error, and should be warned early.\n\nBut there are a number of folks who appreciate \"sloppy\" adds, where you can just keep trying to add models to a collection without checking if they're in there first -- so we made the change to be more forgiving.\n\nFeel free to override your copy of `Backbone.Collection.prototype.add` with an early check and error if you like.\n"
      }
    ]
  },
  {
    "number": 1133,
    "title": "Backbone.history.navigate ",
    "created_at": "2012-03-22T17:22:26Z",
    "closed_at": "2012-03-25T00:48:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1133",
    "body": "With the functionality of Backbone.history.navigate the new page / route is opened but the scroll of the page remains in the same position as it  was . Could something be done so that the navigate automatically leads to scrolling to the top of page \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1133/comments",
    "author": "alokmandloi",
    "comments": [
      {
        "user": "aterris",
        "created_at": "2012-03-23T19:49:47Z",
        "body": "You would likely want to just do this on your, as opposed to adding it to backbone.  While understand why you might want that functionality, it feels to specific for backbones goals.\n\nYou can just swoop in and take control of the navigate method and do whatever you want there\n\nHere is a quick sample where I do something similar to track page view via Google analytics directly thru the navigate method\n\n```\ntrack_navigate: =>\n    track_pageview = @track_pageview\n    navigate = window.Backbone.History.prototype.navigate\n\n    window.Backbone.History.prototype.navigate = (fragment, options) ->\n      track_pageview(fragment)\n      navigate.apply(this, arguments)\n```\n\nYou can adjust this so when you navigate it also calls a method of your creation (which in your case would scroll to the top, likely just with a jquery oneliner\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-03-25T00:48:09Z",
        "body": "@aterris has this right.  Overriding `navigate` or listening for the `'route'` event is likely the best way to go.\n"
      }
    ]
  },
  {
    "number": 1125,
    "title": "getting \"Uncaught RangeError: Maximum call stack size exceeded\" after using super",
    "created_at": "2012-03-19T18:46:04Z",
    "closed_at": "2012-03-19T18:50:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1125",
    "body": "After this code :\n\n``` javascript\n\nvar V = Backbone.View.extend({\n    initialize: function() {}\n});\n\nvar V1 = V.extend({\n    initialize: function() {\n        this.constructor.__super__.initialize.call(this);\n    }\n});\n\nvar V2 = V1.extend({\n    initialize: function() {\n        this.constructor.__super__.initialize.call(this);\n    }\n});\n\nvar v = new V2();\n\n```\n\nI get \n\n```\nUncaught RangeError: Maximum call stack size exceeded\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1125/comments",
    "author": "drinchev",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-03-19T18:50:19Z",
        "body": "You must use `V1.__super__` or `V2.__super__` instead of `this.constructor.__super__`.  The reason for this is that `this.constructor` will always evaluate to the same function, the one used to instantiate the object.\n"
      },
      {
        "user": "drinchev",
        "created_at": "2012-03-19T18:53:50Z",
        "body": "What if I it happens I don't know which is the parent View Constructor at this point in my script ?\n\ne.g. :\n\n``` javascript\n\nif ( options.user === 'true' ) {\n     V1 = Views.User;\n} else {\n     V1 = Views.Guest;\n}\n\nvar V2 = V1.extend({\n    initialize: function() {\n        this.constructor.__super__.initialize.call(this);\n    }\n});\n\nvar v = new V2();\n\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-19T18:54:34Z",
        "body": "That's correct -- you're changing the value of `this` when you use `.call`, naturally. Inside of `V1`'s initialize, the value of `this` is the instance of `V`.\n\nInstead, reference your classes by name.\n\n```\nV1.prototype.initialize.call(this);\n```\n"
      }
    ]
  },
  {
    "number": 1087,
    "title": "unable to bind \"error\" event on model after collection.create",
    "created_at": "2012-03-10T00:44:22Z",
    "closed_at": "2012-03-12T14:23:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1087",
    "body": "I just started using Backbone.js yesterday. I may be misunderstanding how it should work.\n\nBasically, I tried\n`collection.create({ attribute: \"value\" })`\nthat will create a model instance in _prepareModel method and trigger \"error\" event on that instance, though I don't see a way to bind the event on that instance object or obtain the object before the event is triggered or even after the event is triggered.\n\nAlternatively, I tried to initialize the instance myself and pass that into \"create\", but that simply skips the \"validate\" (or i should validate myself?). It may be related to Issue #1057.\n\nIn the end, I can probably get around with \"set\" or \"save\" to bind the event beforehand.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1087/comments",
    "author": "DavyC",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-03-12T14:23:36Z",
        "body": "Right, if you want to bind to an object's error event, you'll need a reference to that object first.\n\n```\nvar model = new Model;\nmodel.bind(\"error\", function ... );\nmodel.set(attributes);\n```\n"
      },
      {
        "user": "DavyC",
        "created_at": "2012-03-14T17:59:56Z",
        "body": "Though doesn't that defeat the purpose of having nice \"error\" event out there, but I cannot bind the object? Or I am supposed to use \"new\" and then \"set\" or \"save\", instead of \"create\"? I am just curious on why \"create\" being a little different from \"new\" and then \"save\".\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-14T18:11:26Z",
        "body": "It's just the logical order of things. How can you possibly listen to an event on an object before you have a reference to that object?\n"
      },
      {
        "user": "DavyC",
        "created_at": "2012-03-15T18:40:47Z",
        "body": "Yes, I understand that. I think what misled me is that:\n- without giving the model object to the collection.create(), it will create a new model object, validate, trigger (if error), and then save.\n- giving the model object i've binded to the collection.create(), it will skip the validation and go straight to save.\n\nBasically, it triggers when i cannot bind the object and it doesn't trigger when i can bind to the object. Perhaps, that is just not the natural way of using collection.create().\n\nSorry. I am not trying to argue with you here. I just want to understand.\n"
      }
    ]
  },
  {
    "number": 1080,
    "title": "Back button not registering with Backbone.history",
    "created_at": "2012-03-08T02:48:44Z",
    "closed_at": "2012-03-12T15:08:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1080",
    "body": "I have this issue sporadically. I'm not sure of the cause or how to debug:\n\nBackbone.history.fragment returns X\nand on the same page\nBackbone.history.getFragment() returns Y\n\nThis occurs when I click Back in Chrome. Shouldn't fragment and getfragment always be in sync? Is the back action not registring with Backbone.history? (when this occurs, none of my routes are called)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1080/comments",
    "author": "paton",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-03-12T15:08:49Z",
        "body": "I'm afraid that if you don't know how to reproduce the problem, then there probably isn't much that we can do to help. Let's reopen this if you have a test case we can check.\n"
      }
    ]
  },
  {
    "number": 1066,
    "title": "model.destroy foreign key",
    "created_at": "2012-03-04T02:48:31Z",
    "closed_at": "2012-03-12T15:30:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1066",
    "body": "Hi,\n\nHow does one go about deleting nested resources that need to be authorized server-side? I'm using Backbone in a Rails app and I have multiple nested layers and I am obviously not going to just let anyone delete any resource without proper authorization.\n\nSo I have the standard `current_user` as my \"session\" method, which I scope everything through, but now I need to go two levels (or more) deep, this is when the issues arise.\n\nHere's a basic example:  User > Bookshelf > Book\n\nServer-side controller\n\n``` ruby\nclass BooksController < ApplicationController\n  respond_to :json\n\n  def destroy\n    respond_with current_user.bookshelves.find(params[:bookshelf_id]).books.find(params[:id]).destroy\n  end\nend\n```\n\nIn CoffeeScript:\n\n``` coffee\nbook.destroy()\n```\n\nIn the shell:\n\n``` shell\nStarted DELETE \"/books/4f52d3518aa92a91e4000003\"\n```\n\nIt hits the proper URL, but it would be nice to somehow be able to pass in the foreign key for the Bookshelf model so I don't have to first load every Bookshelf by the current user in memory on the server just to map through them to find the Book.\n\nSo I tried something like this:\n\n``` coffee\nbook.destroy({data: { bookshelf_id: book.get(\"bookshelf_id\") }})\n```\n\nThen, printing out the params on the DELETE request: `Parameters: {\"object Object\"=>nil, \"id\"=>\"4f52d5878aa92a9203000004\"}`\n\nI also tried it without nesting the params in `data:` but that didn't help: `Parameters: {\"id\"=>\"4f52d5878aa92a9203000004\"}`\n\nSo if I didn't just overlook it, and this is not supported, can anyone tell me how one handles the deletion of nested resources?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1066/comments",
    "author": "mrrooijen",
    "comments": [
      {
        "user": "mrrooijen",
        "created_at": "2012-03-04T02:53:18Z",
        "body": "One way I thought of getting around this would be to work my way backwards on the server-side. But would anyone recommend against doing this (in terms of performance)?\n\n``` ruby\ndef destroy\n  @book = Book.find(params[:id])\n  if @book.bookshelf.user == current_user # verify that this user owns the book\n    respond_with @book.destroy\n  end\nend\n```\n\nAnother way would be to also add the `user_id` foreign key to the `Book` model itself, on which I can do a direct look up without going through the Bookshelf layer like so:\n\n``` ruby\ndef destroy\n  respond_with current_user.books.find(params[:id])\nend\n```\n\nIt would be a little more redundant, but this would spare lots of queries, especially once you start nesting even deeper than these two levels. I'm using MongoDB after all so redundancy in order to gain performance by denormalizing isn't that abnormal. But let's assume this is using a RDBMS.\n\nPlease advise.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-12T15:30:40Z",
        "body": "This is more of server-side question, so you'll probably have better luck on IRC or on the mailing list, than you will on the bug ticket tracker.\n\nAssuming an RDBMS, lookup the Book, validate that the current user has edit access to it, and then delete it.\n"
      },
      {
        "user": "codeodor",
        "created_at": "2013-12-18T00:12:20Z",
        "body": "For what it's worth, I don't think this is a server side question at all.\n\n> So I tried something like this:\n> \n> `book.destroy({data: { bookshelf_id: book.get(\"bookshelf_id\") }})`\n> \n> Then, printing out the params on the DELETE request: `Parameters: {\"object Object\"=>nil, \"id\"=>\"4f52d5878aa92a9203000004\"}`\n\nThe problem is that sending params like that which you expect to be passed along to jQuery (because all the advice you read when looking for \"how to send extra params with backbone destroy model\" says you can do that), it gets passed but not serialized. I haven't dug into the source to find out why, but if you do this instead:\n\n`book.destroy({data: \"bookshelf_id=\" + book.get(\"bookshelf_id\")})`\n\nit will send the information you were hoping for.\n"
      }
    ]
  },
  {
    "number": 1017,
    "title": "It would be better to merge routing params into single hash instead of separate params",
    "created_at": "2012-02-16T18:37:37Z",
    "closed_at": "2012-02-16T19:22:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1017",
    "body": "If there would be single hash param you could also automatically add all querystring params there.\n\nWhat you think?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1017/comments",
    "author": "lexer",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T19:22:42Z",
        "body": "Go for it.\n\n```\nroutes: {\n  \"*params\": \"route\"\n}\n```\n\nYou're done.\n"
      },
      {
        "user": "lexer",
        "created_at": "2012-02-17T06:16:18Z",
        "body": "*params will return unparsed querystring. So I should handle it myself, right?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-02-17T14:14:55Z",
        "body": "That's correct.  See #668 and #891 for more info.\n"
      }
    ]
  },
  {
    "number": 1015,
    "title": "Set URL before starting history?",
    "created_at": "2012-02-16T13:41:29Z",
    "closed_at": "2012-02-16T16:53:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/1015",
    "body": "I have an app that needs to be aware of whether or not our user is logged in. Depending on the state, we need to redirect the user to the `/login` page before doing anything else.\n\nHere's what I am doing now, but it causes an extra reload as it uses `window.location`. Is there a way to change the URL prior to calling `Backbone.History`?\n\n```\nif (!myApp.loggedIn() && window.location.href.indexOf(\"login\") === -1) {\n    window.location = \"/login\";\n    return;\n}\n\nBackbone.history.start({pushState: true});\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1015/comments",
    "author": "jockster",
    "comments": [
      {
        "user": "vincentbriglia",
        "created_at": "2012-02-16T15:06:30Z",
        "body": "You could always see if you can fetch the current user's state, and use the jQuery error callback (as long as your server framework returns any relevant HTTP error code)\n\n``` javascript\nvar user = new UserModel();\nuser.url = '/user/getloggedinuser';\nuser.fetch({\n    success: function (model, response) {\n        Backbone.history.start();\n    },\n    error: function (model, response) {\n        window.location = \"/login\";\n    }\n});\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T16:53:32Z",
        "body": "Other than manually, I don't think so. Why not just start History first, but have it know not to run routes that aren't valid if you're not logged in?\n"
      }
    ]
  },
  {
    "number": 998,
    "title": "Collection.add event callbacks trigger after all models are added in 0.9.1 instead of serially like 0.5.3",
    "created_at": "2012-02-13T21:28:11Z",
    "closed_at": "2012-03-19T20:58:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/998",
    "body": "Something in my code broke with the recent update from 0.5.3 -> 0.9.1 and I believe I've traced it down to a difference in how Collection.add works.\n\nIn 0.5.3, when the \"add\" event fired on a collection, the state of the collection was such that the last model in the collection was the one being passed through the add. Put another way, in the add callback on a collection the length was accurate and in sync with the model being added. Does that make sense?\n\nThe code was like:\nfor (var i = 0, l = models.length; i < l; i++) {\n          this._add(models[i], options);\n        }\n\nSo when the add callback say hits a viewer listening for 'add' the length of the collection would increment on each add callback.\n\nNow, the code is more decoupled and the collection is fully populated when add events are triggered.\n\nsplice.apply(this.models, [index, 0].concat(models));\n      if (this.comparator) this.sort({silent: true});\n      if (options.silent) return this;\n      for (i = 0, length = this.models.length; i < length; i++) {\n        if (!cids[(model = this.models[i]).cid]) continue;\n        options.index = i;\n        model.trigger('add', model, this, options);\n      }\n\nThis seems like strange behavior - meaning that add callbacks aren't really callbacks per add but rather a batch after all the models have been added.\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/998/comments",
    "author": "elsigh",
    "comments": [
      {
        "user": "elsigh",
        "created_at": "2012-02-13T21:35:17Z",
        "body": "I do see that you can compare options.index to collection.length but still feel like the state connection between the add event and the collection is off now.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-02-14T02:55:14Z",
        "body": "Would you mind providing more specifics on the nature of your problem?  You're correct that the semantics of `add` have changed and I have several concerns here as well.\n\nBy the way, #81 states the reasons for the change, which I think are good.  Hopefully we can address both sides of the issue.\n"
      },
      {
        "user": "elsigh",
        "created_at": "2012-02-14T05:32:16Z",
        "body": "I can effectively do what I need to do with options.index, but anyhow here was my situation.\n\nI have collection and a view for that collection.\nThe collection reads out a list of items to add from a server and then adds a bunch in from a sync call.\nI'd bound \"add\" events to a function which looked at the length of the models array to determine whether or not to set the last element in my collection to a selected state(which did something to its view).\nBut now in my add callback, the collection.length is not incrementing with each add, it's the resulting total length of the collection.\nSo it feels wrong inasmuch as it's not a serial callback on each add it's a bulk callback on each one after they've all been added.\nEasy enough fix for me - it's just not intuitive feeling.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-02-14T14:39:26Z",
        "body": "In taking a closer look, there are several bugs with nested events.  For instance, adding or removing another model during the `'add'` or `'remove'` events can cause models to be skipped or index out of range errors:\n\n``` javascript\nvar c = new Backbone.Collection();\nvar m1 = new Backbone.Model({id: 1});\nvar m2 = new Backbone.Model({id: 2});\nvar m3 = new Backbone.Model({id: 3});\nc.on('add', function(model, collection, options) {\n  if (model === m1) c.add(m3, {at: 1});\n});\nc.add([m1, m2]);\n```\n\nI'm not sure how to reconcile this type of problem.  It seems that reporting the index and adding with one sort operation are at odds.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-19T20:51:08Z",
        "body": "@braddunbar: Have those particular issues been addressed in the past month or are we still at an impasse on this? If push comes to shove, I don't think we need to be religious about being able to handle every possible recursive `add` pattern.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-03-19T20:57:25Z",
        "body": "No, I haven't been able to resolve this.  I'm still not sure how to address it and I'm inclined to agree with you that handling the recursive cases isn't necessarily desirable.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-19T20:58:52Z",
        "body": "Alright, then given that the `index` value solves this particular ticket, let's leave this be for now -- and entertain pull requests, if anyone has use cases for the combinations you listed.\n"
      }
    ]
  },
  {
    "number": 995,
    "title": "Encourage Examples to include links to source code / writeups",
    "created_at": "2012-02-13T17:41:21Z",
    "closed_at": "2012-03-19T20:39:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/995",
    "body": "Backbone obviously leaves a lot up to the developer, and this is partially what makes the list of examples on the documentation site and wiki page encouraging: \"All of these other people figured it out, why can't I\"? \n\nBut it's still tough, and frustrating to see that an app has solved a problem you're facing, and having it be nearly impossible to understand how they did it due to minified source.\n\nIt would be awesome if people contributing examples for entry in the Examples section were encouraged to provide a link to either source code, if it's available, or a writeup(s) explaining how an entry was able to get around a particular problem they faced. \n\nI realize it's not practical to expect all source to be open, but encouraging folks to have a writeup also encourages knowledge to be shared, and this helps everyone! It could even be a point of pride: the reason for someone to be included on the examples page could be based on the quality of their writeup as well.\n\nAny thoughts? Is this just silly? \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/995/comments",
    "author": "kirbysayshi",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-13T17:43:25Z",
        "body": "No, this is great ... and for those of the example sites that use Jammit, the unminified JS source is also available, with `?debug_assets=true`. We should gather up the links.\n"
      },
      {
        "user": "kirbysayshi",
        "created_at": "2012-02-13T22:47:57Z",
        "body": "Not having used Jammit before, I didn't realize that flag existed!\n\nAside from brute force, can you think of a practical way to start?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-13T22:54:39Z",
        "body": "Nope!\n"
      }
    ]
  },
  {
    "number": 977,
    "title": "`sync` event isn't triggered when a success callback is provided",
    "created_at": "2012-02-08T20:07:08Z",
    "closed_at": "2012-02-08T21:53:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/977",
    "body": "Around line #327\n\n``` javascript\n      var success = options.success;\n      options.success = function(resp, status, xhr) {\n        //...\n        if (success) {\n          success(model, resp);\n        } else {\n          model.trigger('sync', model, resp, options);\n        }\n      };\n```\n\nI'd like to bind to `sync` as well as accept a callback. If this behavior is intentional I'm just curious why.\n\nPS. Thanks for the amazing framework, we love & use a variety of documentcloud projects at Art.sy.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/977/comments",
    "author": "craigspaeth",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-02-08T20:13:00Z",
        "body": "I'm curious about this as well.  I can't seem to find a discussion on why `'sync'` is not fired when a success callback is provided...\n\nAlso, any reason not to implement `'sync'` with the promise returned by `$.ajax`?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-08T20:22:34Z",
        "body": "The behavior is intentional -- the idea being that you use a specific success callback to _override_ the default evented behavior ... you can always trigger the event yourself from within the callback if you like, but the reverse is not true.\n\nThat said, we can certainly change it if y'all think there are more compelling use cases for the other way around.\n\nFinally, after Art.sy launches to the general public, I hope you'll submit it for the Backbone homepage. ;)\n"
      },
      {
        "user": "craigspaeth",
        "created_at": "2012-02-08T21:53:16Z",
        "body": "Cool cool, that makes enough sense to me. (Someone else can re-open this if they feel strongly enough for the other way around)\n\nI'll also be happy to submit Art.sy to the Backbone homepage when we're open to the general public :)\n"
      },
      {
        "user": "danmalcolm",
        "created_at": "2012-02-17T10:28:21Z",
        "body": "I think that always triggering the event would be less confusing - isn't the event orthogonal to the success callback? Perhaps a \"silent\" property on the options argument could be used to suppress the event if required?\n"
      },
      {
        "user": "roasm",
        "created_at": "2012-03-31T16:21:13Z",
        "body": "I don't have permission to reopen this issue, but I'd love to add a \"Me, too!\" comment.  The way our app works, we want to bind to the 'sync' event _and_ occasional provide a success callback. Thanks!\n"
      }
    ]
  },
  {
    "number": 962,
    "title": "Models not available in Collection.initialize()",
    "created_at": "2012-02-06T12:28:24Z",
    "closed_at": "2012-02-06T15:00:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/962",
    "body": "In 0.5.3, the Collection's constructor used to set the models before calling `initialize()`. However, with 0.9, the models get set only after `initialize()`. \n\nOur existing `initialize()` code relies on models existing in order to run some aggregate calculations. Now, all that is broken. Why the change?\n\nAdditionally, when `reset()` is called to set the models, it is done silently, so we can't even listen to the \"reset\" event to perform the calculations.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/962/comments",
    "author": "anush",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-06T15:00:45Z",
        "body": "The change was made so that the collection can dynamically set it's `model` attribute and others during initialization, before any models have been created.\n\nAlthough there are use cases for doing it both ways, the change was deemed to be correct, because a collection should be fully initialized before it receives its first model.\n\nHopefully, you can fix your code by writing:\n\n```\nvar collection = new Collection(models);\ncollection.performCalculations();\n```\n"
      },
      {
        "user": "anush",
        "created_at": "2012-02-06T15:42:03Z",
        "body": "Would you be open to adding a new \"ready\" event, once the collection is fully initialized... models and all?\n\nDoing the calculations outside the collection's initialize is quirky because then the collection is no longer self-sufficient.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-06T15:46:34Z",
        "body": "> Would you be open to adding a new \"ready\" event, once the \n> collection is fully initialized... models and all?\n\nNo. Firstly because it's not an evented thing -- you're in control of when you create a collection. If the two-liner doesn't float your boat, why not just create your own method?\n\n```\nCollection.create = function(models, options) {\n  var col = new Collection(models, options);\n  col.trigger(\"ready\"); // or whatever...\n  return col;\n};\n```\n"
      },
      {
        "user": "anush",
        "created_at": "2012-02-06T19:50:06Z",
        "body": "Yeah, you're right, thinking more on it, it's not an event-worthy situation. Ugh, ok, I suppose I'll write a whole extra line of code to trigger the calculations :)\n\nThanks for the quick response.\n"
      }
    ]
  },
  {
    "number": 944,
    "title": "Just like 'set' has {silent:true}, add a {force:true} option",
    "created_at": "2012-02-03T10:58:04Z",
    "closed_at": "2012-02-03T15:38:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/944",
    "body": "In our current project we are more than once running into the situation where a value is set, but the value is identical to the previous value. This makes the chain of events come to a halt.\nThis happens for example when calling a server with a second search query, which also has zero results. So the first time you have zero results, it could trigger some user feedback, but the second time, it won't work.\nOf course it is possible to set the value twice, passing a random value first, with the silent parameter, and the second time the real results.\nBut a way to force the Event would be much more elegant and in line with the {silent:true} functionality.\n\nThank you for any feedback on this!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/944/comments",
    "author": "micros123",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-03T15:38:16Z",
        "body": "Yep, there's certainly a way to force the event -- just `.trigger` it on your model.\n\nBut what you're describing here definitely **isn't** a \"change\" event. Perhaps you want to be firing a \"search\" event instead?\n"
      },
      {
        "user": "PaulTondeur",
        "created_at": "2012-02-03T15:51:37Z",
        "body": "I was about to do the exact same request and see that this has been closed. I'm wondering if trigger is what you really want to do, as this means that the flow would be:\n\n``` javascript\nmodel.set({someProperty:'value'}, {silent:true})\nmodel.trigger('change:SomeProperty')\n```\n\nI don't think this is as nice as:\n\n``` javascript\nmodel.set({someProperty:'value'}, {force:true})\n```\n\nThat is much looking much better isn't it?\n\nYou're right that the change event not really is a change, its more a 'set' event then. Maybe every set should always trigger a \"set:someProperty\" event, while you only trigger a \"change:someProperty\" event when something has really changed.\n\nThat, or the force property would be a really good addition in my point of view. Therefore I'd suggest reopening this feature request.\n"
      },
      {
        "user": "gmac",
        "created_at": "2013-01-14T18:17:37Z",
        "body": "I second this. It would be really handy to parameterize the setter operation so that the setting intention can be reliably recognized with an event, regardless of whether the underlying value changed as a result.\n"
      },
      {
        "user": "dreadrocksean",
        "created_at": "2014-06-12T20:02:09Z",
        "body": "I agree with Paul.  That flow is exactly what I had to do.  Not elegant.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2014-06-12T20:11:57Z",
        "body": "The whole point of rendering based on data, is that if the data hasn't changed, you don't need to re-render. Why would you?\n\nIf your application isn't set up that way, then what you want is — to not be listening for changes. Instead, just re-render your UI from scratch.\n\nForcing this through a `\"change\"` event, when no change has occurred, would be a very foolish thing for Backbone to do.\n"
      },
      {
        "user": "hardboiled",
        "created_at": "2015-06-30T14:48:55Z",
        "body": "I wouldn't write off a need to know whether a model has been set to a valid data set that happened to already match the data in the model. In my application, I have a member that's loaded at login. Our application requires that we be able to ship products to them, so we need to make sure that they have real information in their account. Thus, we walk them through some steps to verify their data.\n\nThe UX chosen has only one button on the design that advances through each step (e.g. first name/last name section, an address section, a phone number section, etc.). The model is filled out in piecemeal due to there being only one aggregate endpoint for member data. Thus, multiple views map to this one model and the model info is collected in steps until the confirmation step that actually sends the entire dataset to the back-end. I chose to control transitions between steps by listening on the \"change\" event and a custom event by overriding \"set\" whose purpose is to prevent the UI from locking up if the user is satisfied with the existing data we have and just opts to click the \"next\" button without changing the model.\n\nI'm not requesting this feature to be added, but it was something that I needed to address for my purposes. Thanks for making a great library for the public to consume.\n\nIt looks like this in coffee script:\n\n```\nset:(attrs,options)->\n  comparisonObject = {}\n  for k,v of attrs\n    comparisonObject[k] = @get(k)\n  if not _.isEqual(attrs, comparisonObject) then super(attrs,options)\n  else @trigger('set-no-change')\n```\n"
      }
    ]
  },
  {
    "number": 937,
    "title": "submit event not working on prod version",
    "created_at": "2012-02-02T18:45:29Z",
    "closed_at": "2012-02-02T18:47:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/937",
    "body": "I'm currently working on a project using Backbone for which I want to bind the submit event of a form (instead of attaching an event to the click on the submit button or an Enter keypress). Doing 'submit #form': 'someFunction' works perfect on the Dev version (0.9.0) but when I switch to the prod version this won't work at all. However, if I handle click and keypress events works just fine, even with the Prod version, this issue is just happening with the minified file.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/937/comments",
    "author": "lopezgonzaloe",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-02T18:47:06Z",
        "body": "I'm afraid that Internet Explorer bugs will not allow you to delegate `submit` events in IE. Use a regular jQuery bind instead...\n"
      },
      {
        "user": "lopezgonzaloe",
        "created_at": "2012-02-02T18:52:39Z",
        "body": "That's what I thought. What got my attention is that this actually works on IE, but only with the Development version.\n"
      }
    ]
  },
  {
    "number": 926,
    "title": "Need more guidance with nested models and localstorage",
    "created_at": "2012-02-02T01:47:39Z",
    "closed_at": "2012-02-08T22:16:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/926",
    "body": "I know there are many issues and forum threads on this issue already, but I just need a little more guidance.  There seem to be a variety of approaches but I keep hitting roadblocks with each one, and I haven't found yet a complete example that uses nested models and collections along with localstorage.\n\nI am trying to create a simple app that has Project models and Task Models.  Each Project can have more than one Task, and there can be more than one Project.  Additionally, I will eventually need Tasks to potentially contain other tasks, but I can leave that aside for now.\n\nIf anyone can provide a full working (simple) example for any of the approaches that are out there it would go a long way at helping newbs like me.  Most approaches, like the example in the FAQ and backbone-relational all rely, at some point, on having a collection embedded in a model in some way, and they set the url on that collection to retrieve the right models.  This doesn't seem to play nicely with localstorage.\n\nAdditionally, the FAQ example does something like this:\n\n``` javascript\nvar Mailbox = Backbone.Model.extend({\n\n  initialize: function() {\n    this.messages = new Messages;\n    this.messages.url = '/mailbox/' + this.id + '/messages';\n    this.messages.on(\"reset\", this.updateCounts);\n  },\n\n  ...\n\n});\n\nvar Inbox = new Mailbox;\n\n// And then, when the Inbox is opened:\n\nInbox.messages.fetch();\n```\n\nSo, instead of setting the collection URL, I initially tried to create a new Store with a custom name like 'taskStore-projectid'.  That mirrors the example where it sets the collection url to something with 'this.id' in it.  First, I had trouble figuring out if I could create the collection store in my model initialize function, or would I need to pass the id to the collection initialize function and have it create the store.  Next, I discovered, that in my model initialize function, 'this.id' is still undefined.  I _think_ this is because in the example, the Mailbox is created with 'var Inbox= new Mailbox', and in my app, the Mailbox equivalent (Project for me) is created from my Mailbox(Project) Collections 'create' function.  \n\nBut I don't know.  I just am too new to backbone to know.  Heck, I don't even know if it will work to create the store that way even if I just gave it a random string.  Plus, I'm not relishing the idea of having a giant list of stores like that, as it seems horribly un-normalized.\n\nThe backbone-relational approach seems good too, but it also hinges on setting a url parameter that is meant to only return the proper models, so I have the same issue there.\n\nThe FAQ goes on to list a few other approaches like:\n- Mirror an SQL database's structure, or the structure of a NoSQL database.\n- Use models with arrays of \"foreign key\" ids, and join to top level collections (a-la tables).\n- For associations that are numerous, use a range of ids instead of an explicit list.\n- Avoid ids, and use direct references, creating a partial object graph representing your data set.\n- Lazily load joined models from the server, or lazily deserialize nested models from JSON documents.\n\nSome of which sound good, and some sound pretty similar to each other, but none of which have some good examples.  I'd love to see some of those bullet points fleshed out.\n\nI guess, ideally, I'd like something that allowed me to use just two stores, one for projects and one for tasks, and a performant way to easily get the tasks for each project, and still be able to leverage collections and all they bring.  \n\nI know I could work around this by setting a project id in each task model, like the 'foreign key' approach above, but is that going to cause any other issues?  Is it backboney enough?\n\nanyway, thanks for letting me vent a bit.  Any help will be appreciated. ;-) \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/926/comments",
    "author": "meecect",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2012-02-02T08:59:13Z",
        "body": "Generally, some combination of your own `sync` implementation and an abstraction library like amplify.js should handle the basic mechanics of persisting to local storage for you. \n\nUnfortunately, you won't ever see a \"simple\" nested model implementation anywhere because there is no such thing. You'll get some of the basic get/set logic working and be happy for a while, then you'll realize that you want observers to be able to register for change notifications on just the top level object to avoid ridiculously tight coupling and spend a ton of time on an event proxying system that relays messages from child objects all the way up the chain by turning everything into a tree (good luck fighting cyclical references to parent objects!). Then you'll notice that `previous` and `escape` don't work anymore because of the strange way they're implemented and rewrite those. Then you'll want a generic validator that can handle child objects and have to fight for that. Then you'll encounter a bunch of crazy bugs the first time you try to `clone` something because that not only doesn't work, but Backbone actively prevents you from even trying to use it for that purpose, and oh yeah `_.clone` only does shallow copies so you'll end up with a big mess of references if you think that's going to save you. Eventually your `toJSON` override will end up so full of special cases you'll just want to scream and start over. Lord help you if you'd like a change notification to reliably inform you of which specific fields actually changed so you don't have to validate/transmit them all on a save.\n\nBy the time you're done, you'll have replaced most every line of Backbone's `Model` code and come to hold the terribly cynical belief that all the people who tell you how silly you are for not realizing how easy adding your own nested model support to the framework is are probably having their opinions colored by the fact that they've never gone too far beyond the first step of making get/set work. They'll call you a liar but still refuse to produce that \"simple\" example that exists in fairy tales and legends ;)\n"
      },
      {
        "user": "meecect",
        "created_at": "2012-02-02T14:18:27Z",
        "body": "well, now I'm thoroughly depressed.\n\nDoes amplify.js have advantages over backbone.localStorage.js?  That is what I'm using at the moment.  It seems that there are a number of live applications using backbone so it must be possible and this problem must have been solved over and over again by different groups. \n\nSet aside my request about eventually supporting tasks within tasks; limit the example to one level of nesting.  Just many projects that contain many tasks, and each task has one project.  It can't be that complicated.\n\nOf course many of the live backbone apps are backed by some online storage, not localstorage, but it must be possible to just make localstorage mimic a SQL db or whatever the live apps are backed up by.\n\nThe most frustrating part of all of this is I had my app working fine, albeit with no persistance, as a proof of concept UI design, and now trying to add basic persistance is absolutely killing me.\n\nI had just been using the jquery .data command to keep all my required references, like an array of children tasks, an a link to a given tasks parent, etc.\n\nBut it was getting messy keeping all that info in the DOM, but it was working.  I thought i\"d make it much easier with an actual MVC pattern so that I could keep my objects in some model layer and then I'd get some advantages:\n- separation of model code and view code\n- automatic binding between model and view\n- persistance\n\nBut truthfully I'm losing hair at a very fast pace right now, as I've broken a perfectly working app that I was demoing to a client to get persistance.\n\nIn some ways, it was much easier doing this stuff the 'old fashioned way' with most of the model logic in a php layer on the server.  That shouldn't be the case, because the same issues exist, they are just in a different layer. \n\nI tried the simple example in the FAQ again to see if it was my use of collections that were throwing me off.  I verified their example does not work, as the model they create does not have an id when it is being initialized, so there is no way to create a nested collection of 'messages' with that id, and no way to associate a url for that collection based on that id at that point.  Sure there would be a way around it, like waiting for the Mailbox model to save first and then going in to create the collection, but, as written, their proposal doesn't work.  I suppose that is one of the perils of asynchronous design.  I'd wish though, since the framework is already so dependent on events, that they had just written example to use events to show how one would initialize a child collection on a successful save of the parent object.  It would have been more helpful.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-02T14:27:15Z",
        "body": "Hey fellas -- this is fun and all, but -- @meecect -- if you're looking to get immediate help with a particular app, you'll have better luck on IRC (Freenode, #documentcloud), or the mailing list. \n\nStill, let's leave this ticket open for a while as a place for folks to vent.\n"
      }
    ]
  },
  {
    "number": 888,
    "title": "Removal of \"_add\" and \"_remove\"",
    "created_at": "2012-01-24T16:56:19Z",
    "closed_at": "2012-01-24T17:26:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/888",
    "body": "I'd like to discuss the removal of `Collection._add` and `Collection._remove`. I realize these methods were not part of the \"public\" API of course, but they were quite useful nonetheless.\n\nThese methods exposed functionality that is not otherwise available in Backbone, and were therefore very useful as hook points for extensions (not least of all for me in Backbone-relational). Both of these took a single snippet of data (either a model, or an object that might contain an `id` somewhere... or not) and return the model operated upon. Since both `add` and `remove` simply return the complete collection, they can not be used to determine this, especially when passing in JSON.\n\nI have a sort-of-working workaround for Backbone-relational (using `_.clone(this.models)` before adding, then calling `add`, using `_.difference( this.models, clone )` afterwards and iterating over the diff), but this is quite a performance penalty when compared to the current situation. Especially considering many people use relational  exactly because it automates the handling of a very large amount of models, and this whole process is repeated for every single addition.\n\nAny chance these two could be re-instated?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/888/comments",
    "author": "PaulUithol",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-24T17:26:08Z",
        "body": "I'm afraid they can't be -- part of the point of the new change is to be able to optimize `add` and `remove` by slicing in the list of models in a single operation. Breaking out `_add` and `_remove` into individual functions, as previous, would revert this improvement. \n\nHopefully, there's a better override you'll be able to come up with ;) Perhaps you can wrap `add` and `remove`, record the ids to the models to be added or removed beforehand, and then proceed from there?\n"
      },
      {
        "user": "PaulUithol",
        "created_at": "2012-01-24T17:59:28Z",
        "body": "\"they can't be\" - well, that sounds dramatic enough alright :).\n\nSome optimization will probably be possible, but it's going to be quite tricky - since it's far from uncommon to be adding stuff that doesn't have an `id` yet, or isn't even a `Backbone.Model` yet (just a plain object that'll only have a `cid` afterwards).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-24T18:54:17Z",
        "body": "Another idea for you ... override `prepareModel` so that you know when new models are coming in. Then, when `add` finishes, you can run through all the recorded new ones.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-01-24T19:01:13Z",
        "body": "@PaulUithol I have been able to work around this by overriding `add` and calling `_prepareModel` on each object passed in.  This essentially renders the call to `_prepareModel` in `add` to a noop and gives you a list of added models.\n\nLet me know if this solution doesn't work for you.  I'd be very interested in the reasons.\n"
      },
      {
        "user": "tomasztunik",
        "created_at": "2012-01-24T19:42:35Z",
        "body": "overlooked this one, will have to look how it plays with our extensions to backbone we have two major things basing on hooking up to backbone to handle what `_add` was doing and to either use default backbone behavior or take control over the adding action. Will let you know - i'm surprised it didn't throw any errors when i was testing Wunderkit vs master :)\n"
      },
      {
        "user": "PaulUithol",
        "created_at": "2012-01-24T19:55:28Z",
        "body": "Thanks, yes, I had been looking at that, but I was a bit reluctant to be relying on an internal method again. But if `_prepareModel` is not in danger of being eliminated, I'll give that a try. Looks like it should work pretty well.\n"
      }
    ]
  },
  {
    "number": 855,
    "title": "model.destroy don't send id in request header",
    "created_at": "2012-01-12T12:46:13Z",
    "closed_at": "2012-01-12T17:21:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/855",
    "body": "I use default behavior (REST) with PHP server\n\nI defined url for my model and everything is right with create and update.\n\nBut with delete method, ID is not send in the header like for others methods\n\nIn the source code, I find : \n\n```\nif (!params.data && model && (method == 'create' || method == 'update')) {\n  params.contentType = 'application/json';\n  params.data = JSON.stringify(model.toJSON());\n}\n```\n\nWhy dont include delete method ?\n\n```\nif (!params.data && model && (method == 'create' || method == 'update' || method == 'delete' )) {\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/855/comments",
    "author": "dcz-switcher",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-12T17:21:09Z",
        "body": "Yes, delete requests have no body -- the URL itself should contain the ID of the model being deleted.\n"
      },
      {
        "user": "dcz-switcher",
        "created_at": "2012-01-13T10:41:33Z",
        "body": "Thanks for your reply,\n\nI understand now, but it works only with urlRoot, not with url ?!?\n\nso, I can't call destroy() method from a model in a collection\n\nmyCollection.get( id ).destroy() ; //don't work (the ID is not in the URL\n\nBut ...\nmyCollection.get(id).save({name : 'newName' }) ; //works\n\nThanks again\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-13T15:37:09Z",
        "body": "The ID should be in the URL -- unless you've overridden the `url()` function to prevent it from being there.\n"
      },
      {
        "user": "dcz-switcher",
        "created_at": "2012-01-16T07:45:06Z",
        "body": "Thanks a lot, I undestrand know and it's so logic !\n\nsorry for the mistake\n"
      }
    ]
  },
  {
    "number": 849,
    "title": "Routing issues created by (merged) Pull Request #599",
    "created_at": "2012-01-07T08:00:05Z",
    "closed_at": "2012-01-11T17:12:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/849",
    "body": "## Copying my comments from #599\n###### Issue 1 -- Breaks old routes\n\nThis needs to be documented somewhere because it breaks the Router from the current 0.5.3 release. In the currently available 0.5.3 release on the public Github pages site (documentcloud.github.com/backbone), calling `router.navigate('/search', true)` will match only the route `\"/search\"`. This change causes the only matched route to be `\"search\"` (no leading slash). \n\nI support this being the correct action, but it will break EVERY site's routing that used a leading slash. I discovered this because I was not using pushState and was routing all my paths as `abc.com/#/search` because it gave the path a nice structure with that leading fragment slash.\n###### Issue 2 -- Preventing re-routing to the same fragment\n\nA further complication introduced by this is that Backbone no longer knows if you are trying to route to the same page. Previously, if you tried to route to the same page, the Router would never receive the request. Now, it routes again. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/849/comments",
    "author": "jashenson",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-09T17:06:13Z",
        "body": "Yes, both of those need to be addressed, or the patch reverted -- preferably in #599.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-11T17:12:14Z",
        "body": "Whew, you scared me, but what you're saying in Issue 2 isn't the case. The router still correctly only fires when the route actually changes.\n\nAs to documenting the change that leading slashes are a bad idea -- yes, it will be documented when the next version of Backbone is released.\n"
      },
      {
        "user": "jashenson",
        "created_at": "2012-01-12T21:25:58Z",
        "body": "@jashkenas looking at your test, it doesn't break the examples that you're giving. It breaks passing `router.navigate('/search')` multiple times. Note the leading slash (or whatever is defined as the Router's rootURL).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-12T21:32:05Z",
        "body": "Right, and you should never use leading slashes, as described above. We could always strip them on the way in, I guess?\n"
      },
      {
        "user": "jashenson",
        "created_at": "2012-01-12T22:17:34Z",
        "body": "Why should Backbone be prescriptive like that? If a developer wants their URL structure to be `abc.com/#/search`, how would they make their URL look like that without using the leading slash? Is that somehow supported with the newer rootURL feature?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-12T22:19:39Z",
        "body": "Backbone should be prescriptive here because leading slashes won't play well with pushState.\n"
      },
      {
        "user": "danroberts",
        "created_at": "2012-04-09T16:59:11Z",
        "body": "I would much, much rather be able to have clean urls and the choice not to use pushState than be forced in my routes when I am not using pushState to begin with. Also, breaks all the routes on my page and is a MAJOR pita.\n\nNot to mention breaking links and/or favorites on an already deployed site. Can you expose at least and optional hook to not use pushState and allow for leading slashes, even if the default is the opposite?\n"
      }
    ]
  },
  {
    "number": 832,
    "title": "Weird behaviour of Collection.without",
    "created_at": "2011-12-30T16:26:38Z",
    "closed_at": "2011-12-30T21:28:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/832",
    "body": "Hi,\n\nI noticed a weird behaviour for `without` method on collections with the following code.\n\n``` coffee\nremainingTerritories = allTerritories.without(territoriesToReject)\n```\n\nBoth `allTerritories` and `territoriesToReject` are `Territories` collections containing Territory objects, and some of these territories to reject come from the pool of territories, matching with `===`).\n`remainingTerritories` contains a regular Array containing all the Territory objects  no one is filtered out.\nI would expect to get all the territories minus the ones to reject.\n\nTo achieve my goal, I had to write:\n\n``` coffee\nremainingTerritories = new Territories(allTerritories.reject (t)-> territoriesToReject.include(t))\n```\n\nIt's not a big deal but I would be glad to know why, and if I can help fixing that if it's not the expected behaviour.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/832/comments",
    "author": "Sephi-Chan",
    "comments": [
      {
        "user": "nordyke",
        "created_at": "2011-12-30T20:50:14Z",
        "body": "@Sephi-Chan  `allTerritories.without` expects `territoriesToReject` to be an array.  Have you tried \n\n`remainingTerritories = allTerritories.without(territoriesToReject.models)`?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-12-30T21:28:31Z",
        "body": "Yep -- you have to pass an array to `without`.\n"
      },
      {
        "user": "Sephi-Chan",
        "created_at": "2011-12-30T22:44:42Z",
        "body": "Okay. Thanks. :)\n"
      }
    ]
  },
  {
    "number": 830,
    "title": "Callback vs event handler priority",
    "created_at": "2011-12-30T02:11:23Z",
    "closed_at": "2011-12-30T14:04:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/830",
    "body": "What's the reasoning for event handlers getting priority over the passed in callback?\n\n```\n# taken from destroy method\n...\noptions.success = function(resp) {\n   model.trigger('destroy', model, model.collection, options);\n   if (success) success(model, resp);\n};\n...\n```\n\nThe callback is provided by the object making the call in the first place, so it seems natural that it would get first rights to act on the result and then any event handlers would be handled second.  No?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/830/comments",
    "author": "rymohr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-30T14:04:31Z",
        "body": "I'm afraid not. The `destroy` event and the `success` callback aren't quite the same thing. The former notifies listeners that the model has been destroyed, the latter is a callback that indicates that the operation (including the `destroy` handlers) have finished successfully. You certainly wouldn't want the `success` callback to fire if one of the `destroy` handlers raised an exception. \n"
      },
      {
        "user": "rymohr",
        "created_at": "2011-12-30T19:49:31Z",
        "body": "Oh, ok.  I misunderstood the intent of the `success` and `error` callbacks then.  I thought their purpose was to abstract the sync call, not wrap the entire life of the operation.\n\nMight be good to clarify this in the docs.  Thanks for the quick answer.\n"
      }
    ]
  },
  {
    "number": 829,
    "title": "Document callback signature",
    "created_at": "2011-12-30T00:39:37Z",
    "closed_at": "2012-01-12T20:43:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/829",
    "body": "The official backbone documentation lacks the signature of some (most!) function callbacks. For example, Event.bind, Model.set, Model.save, etc.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/829/comments",
    "author": "JustinDrake",
    "comments": [
      {
        "user": "tbranyen",
        "created_at": "2011-12-30T00:53:35Z",
        "body": "Patch welcome for this.\n"
      },
      {
        "user": "paulyoder",
        "created_at": "2012-01-01T19:15:03Z",
        "body": "Should I update the index.html documentation and/or the doc/backbone.html documentation?\n\nAlso, does anyone have suggestions how to format the callback signatures?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-12T20:43:06Z",
        "body": "Just index.html, please, and try to keep it light if you can. Closing this ticket in favor of the impending pull request that'll do this ;)\n"
      }
    ]
  },
  {
    "number": 827,
    "title": "IE 7,8,9 The object don't accept this property o method. Line 1160",
    "created_at": "2011-12-29T16:17:05Z",
    "closed_at": "2011-12-30T14:21:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/827",
    "body": "I'm testing my backbone application.\nI use backbone with coffeescript and requirejs.\n\nI chrome the application run without any problem, but in IE (7,8 y 9) give and error in lin 1160\n\n``` javascript\n\n// Wrap an optional error callback with a fallback error event.\nvar wrapError = function(onError, model, options) {\n  return function(model, resp) {\n    var resp = model === model ? resp : model;\n    if (onError) {\n      onError(model, resp, options);\n    } else {\n      model.trigger('error', model, resp, options);\n    }\n  };\n};\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/827/comments",
    "author": "matiasfha",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-30T14:21:45Z",
        "body": "I'm afraid this isn't nearly enough information to reproduce your problem ... but you're probably passing an improper object somewhere. Hope that helps.\n"
      }
    ]
  },
  {
    "number": 825,
    "title": "events and default actions",
    "created_at": "2011-12-27T22:32:12Z",
    "closed_at": "2011-12-27T23:55:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/825",
    "body": "If Backbone is designed to build single-page apps, why aren't default actions on links/forms within views automatically prevented?  \n\nEven though links aren't required to have an `href`, I've noticed some browsers mishandling focus when an `href` is missing.  Hence the `href=\"#\"` you see in common practice.  The problem with `href=\"#\"` though is that it'll force the page to scroll to top unless explicitly prevented.\n\nDoes anyone else find all the unnecessary `event.preventDefault()` calls as annoying as I do?  Is there a simple solution that I'm overlooking?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/825/comments",
    "author": "rymohr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-27T23:55:32Z",
        "body": "Yep -- don't use links if they're fake ... or hijack them unobtrusively if they're real. Either way, this has nothing to do with Backbone.js itself, and is all about how you prefer to write your HTML and jQuery. \n"
      },
      {
        "user": "rymohr",
        "created_at": "2011-12-28T00:19:57Z",
        "body": "If it looks like a link and behaves likes a link, isn't it still a link?  The `<button>` tag looks like the only sensible alternative, but I typically reserve buttons for content-modifying actions and links for navigation.\n\nThe way it relates to backbone is it would be convenient if any link in a backbone view without an `href` value was given `href=\"#\"` and automatically prevented the default action for you.  That way normal links work as expected, and \"fake\" links don't have to be hijacked.\n"
      }
    ]
  },
  {
    "number": 817,
    "title": "Why don't views have a `model` property by default?",
    "created_at": "2011-12-25T19:06:19Z",
    "closed_at": "2011-12-26T06:42:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/817",
    "body": "As you say, \"Backbone views are almost more convention than they are code\". It seems the de facto convention is for views to keep track of their model using the `model` property. Why not formalize this, in the same way we have `initialize`, `el`, `render`, etc. acting as placeholders?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/817/comments",
    "author": "JustinDrake",
    "comments": [
      {
        "user": "tbranyen",
        "created_at": "2011-12-25T19:35:48Z",
        "body": "Because you pass instances to Views.  Creating instances and putting them in View definitions sounds like an anti-pattern.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-12-26T06:41:14Z",
        "body": "I believe it is formalized already ... \n\n```\nvar view = new Backbone.View({model: someModel});\n\nview.model === someModel;\n```\n"
      }
    ]
  },
  {
    "number": 798,
    "title": "how to find help about understanding backbone if i am not too experienced",
    "created_at": "2011-12-19T02:07:35Z",
    "closed_at": "2011-12-19T15:21:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/798",
    "body": "hi guys, sorry for such a question but i am sick of not finding any help in some basic question. The backbone.js docs are too abstract for me to understand. can some one throw some light on the strategy of binding different views listening to same model and collections . More specific i want is how to automate the rendering of the element with just the change in model or collection. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/798/comments",
    "author": "khurramijazm",
    "comments": [
      {
        "user": "blocka",
        "created_at": "2011-12-19T08:16:51Z",
        "body": "You can start by not putting littering the issue tracker with non-requests.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-12-19T15:21:05Z",
        "body": "IRC or the mailing list are the best place to have conversations.\n"
      }
    ]
  },
  {
    "number": 793,
    "title": "Supporting polymorphic collections",
    "created_at": "2011-12-16T19:09:28Z",
    "closed_at": "2011-12-19T16:05:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/793",
    "body": "Howdy!\n\nRight now backbone seems to only support collections of one type, we're working on a stream with many polymorphic types that all quack the same.\n\nIt'd be nice to implement this via inheritance(extend), rather than our current technique of creating proxies/mixins in the base class.\n\nbackbone collection seems to have a hardcoded new this.model in it,\n\nI was thinking about doing something like:\n\n```\nmodelClass : function(){\n   return  this[postType]\n}\n```\n\n   this.model = this.model || this.modelClass()\n\n```\nnew this.model\n```\n\nis this a change you would like to have implemented, or are you opposed to it for an ideological reason?\n\nIf you want it, I'll implemented, as it will help me on a couple projects I'm working on.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/793/comments",
    "author": "dnsco",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-19T16:04:59Z",
        "body": "Fortunately, because of the (in my opinion, buggy) way that JavaScript constructors work, you can already do collections with polymorphic models. Like so:\n\n```\nvar Library = Backbone.Collection.extend({\n\n  model: function(attrs, options) {\n    if (condition) {\n      return new PublicDocument(attrs, options); \n    } else {\n      return new PrivateDocument(attrs, options);\n    }\n  }\n\n});\n```\n"
      },
      {
        "user": "dnsco",
        "created_at": "2012-01-17T22:05:42Z",
        "body": "Thanks dude, I wrote this issue when I was working on a client project, but now Imma integrate it into diaspora and it will be better <3333333\n"
      }
    ]
  },
  {
    "number": 776,
    "title": "How to handle Friendly URL as ID?",
    "created_at": "2011-12-06T15:06:34Z",
    "closed_at": "2011-12-06T15:26:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/776",
    "body": "How would I go about allowing Backbone.Model to fetch and update `/widgets/my-cool-widget`, as opposed to `/widgets/02938282`?\n\nI'd prefer to avoid passing 'my-cool-widget' to Backbone.Model's id property, for that introduces a number of other inconsistencies (for example, if the user changes the URL, it's not updated client-side).\n\nIdeas?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/776/comments",
    "author": "kendagriff",
    "comments": [
      {
        "user": "yuchi",
        "created_at": "2011-12-06T15:21:40Z",
        "body": "A Model's url can be a function, so it would be as simple as...\n\n``` javascript\n// ...\n  url : function () {\n    return '/widgets/'+this.get('name');\n  },\n// ...\n```\n"
      }
    ]
  },
  {
    "number": 774,
    "title": "Collection Reset",
    "created_at": "2011-12-04T19:10:37Z",
    "closed_at": "2011-12-05T15:42:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/774",
    "body": "I'm using the suggested method of loading data models from the backend, to prevent fetching data from the server twice on a page load like this:\n\n``` javascript\n<script>\n  collection.reset(<%= @accounts.to_json %>);\n</script>\n```\n\nThe issue is my models are being rendered in my php views, the code above just adds the models to the collection, therefore no views rendering is happening when collection.reset is called, however I do have a view for this model but it's only rendered when collection.add is called with some click events in it, so the click events are obviously  not being called with the already rendered html because backbone.js didn't render the views itself.\n\nIs there a way of taking the already rendered html tags and bind it to my views so the click events I have work for those tags ?\nCheers\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/774/comments",
    "author": "pablofierro",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-12-05T15:42:48Z",
        "body": "I'm not sure that I entirely understand what you're trying to ask ... but if you're having a hard time, perhaps this is one way of tackling it.\n\n```\n<script>\n  collection.reset(<%= @accounts.to_json %>);\n  renderTheCollection();\n</script>\n```\n"
      },
      {
        "user": "judofyr",
        "created_at": "2011-12-06T10:49:35Z",
        "body": "You can also bind reset: `collection.bind('reset', …)`.\n"
      },
      {
        "user": "pablofierro",
        "created_at": "2011-12-09T21:45:36Z",
        "body": "collection.bind('reset') is what I'm currently using to render the views, what I meant is if I can make backbone.js take a bash of ALREADY rendered html tags, i.e:\n\n``` HTML\n<div class=\"item\">\n <a href=\"#\" class=\"trash\"></a>\n</div>\n<div class=\"item\">\n <a href=\"#\" class=\"trash\"></a>\n</div>\n```\n\nAnd use that within the view to bind events such as \"click\"\n"
      },
      {
        "user": "pablofierro",
        "created_at": "2012-04-24T07:03:06Z",
        "body": "I still haven't got a solution for this, let me give you an example, let's say you need to render html in the backend for indexing purposes(google), how can i force backbone to bind these existing html elements to my views ? so binded click events work on these **already** rendered html elements.\n\nI could think of a way of doing this but it would require to render in the backend and then re-render in the frontside, which i think it's very inefficient.\n\nHas anyone else faced this issue ?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-04-24T11:45:19Z",
        "body": "You can certainly attach Backbone views to existing html.  For instance, the following code would work for your html snippet above.\n\n``` javascript\nvar View = Backbone.View.extend({\n\n  events: {\n    'click .trash': 'trash'\n  },\n\n  trash: function() {\n    ...\n  }\n\n});\n\nvar views = $(html).map(function(i, el) {\n  return new View({el: el});\n});\n```\n\nAny reason you can't do something like that?\n"
      },
      {
        "user": "pablofierro",
        "created_at": "2012-06-02T04:48:34Z",
        "body": "Well, It works, but I guess my problem is when handling models with those views.\n\nHow is backbone.js going to know which models from a given collection correspond to the already existing html (views). ?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-06-02T09:42:39Z",
        "body": "That's a good question, and could certainly be handled several ways.  Off the top of my head, you can either re-render the list on the client with fresher data or you can store an `id` in the html that you then match up with a model.\n\n```\n<div data-model='5117'>...</div>\n<div data-model='6192'>...</div>\n```\n"
      },
      {
        "user": "pablofierro",
        "created_at": "2012-06-02T17:43:59Z",
        "body": "thanks @braddunbar will give it a shot using that suggestion.\n\nCheers\n"
      }
    ]
  },
  {
    "number": 728,
    "title": "Ability to completely unbind all events for a view in dynamic situations",
    "created_at": "2011-11-08T08:56:11Z",
    "closed_at": "2011-11-08T15:20:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/728",
    "body": "I'm hitting an issue that I haven't found a good solution for. My page is extremely dynamic, and I load in views which may bind to the same elements. \nI may also create the same view once, create a different view, then recreate the first one. The issue though is the event handlers persist and I will find the event is firing twice.\n\nSo my 'flow' would be viewA --> viewB --> vewA which causes the newest A view to double fire events.\n\nIt feels like for completely dynamic pages, an application would want the ability to completely 'destroy' or 'unbindAllEvents' for a given view, which I cant seem to figure out. Is there a known solution for this? If not, is it something others feel is needed? I could code it and provide a pull request if others want.\n\nOne other note - a view can have multiple views in it, so you would expect it to unbind all subviews as well.\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/728/comments",
    "author": "csmaster2005",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-11-08T15:20:00Z",
        "body": "jQuery can handle this for you:\n\n```\n$(element).unbind();\n```\n"
      },
      {
        "user": "csmaster2005",
        "created_at": "2011-11-08T17:31:40Z",
        "body": "$(element).unbind does handle the issue I mentioned above. I want to do this for an entire view.\nNow, if I do $(theView.el).unbind() that still doesnt work, I would have to do - $(theView.el).unbind('.delegateEvents' + theView.cid);\n\nBut now the problem is that does not unbind all child views, thus an app would have to traverse all child views and manually unbind those as well.\n"
      },
      {
        "user": "vincentbriglia",
        "created_at": "2011-11-08T17:52:25Z",
        "body": "@csmaster2005: Take a look at #682 and think about implementing a baseclass for your views that has a noop destroy method on it that you can call/extend.\n"
      },
      {
        "user": "csmaster2005",
        "created_at": "2011-11-08T23:55:33Z",
        "body": "Thanks for the relevant response. \nThat solution is something I had in mind to do, but it feels like something that should be rolled into backbone.\nAlso,one thing I noticed in #682 is you did this.unbind()\nShouldn't it instead be $(this.el).unbind('.delegateEvents' + this.cid); ?\nI tested this.unbind() and I still have the events defined in the events object of the view firing.\n"
      }
    ]
  },
  {
    "number": 687,
    "title": "Better native support for non-REST applications",
    "created_at": "2011-10-24T20:41:59Z",
    "closed_at": "2011-10-24T20:44:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/687",
    "body": "I'd like to see Backbone have better support when REST isn't being used in an application. Some of the methods (like Collection.create) have dependencies on the Backbone.sync and a URL isn't defined on an object an error is thrown.\n\nCurrently I've been using something like the following to skip trying to run sync operations when no URL is found:\n\n``` js\n(function (){\n    var originalBackboneSync = Backbone.sync;\n    Backbone.sync = function (method, model, options){ \n        var url = (!(model && model.url)) ? null : _.isFunction(model.url) && (model.url !== Backbone.Model.prototype.url) ? model.url() : null;\n        if( !url ){\n            options.success(model);\n            return true;\n        } else {\n            originalBackboneSync.apply(this, arguments);\n        }\n    };\n})();\n```\n\nI'd love to see some way to just tell Backbone that if no \"URL\" is present to not throw an error, but instead just process the success callback natively.\n\nWhile I understand REST is a huge part of Backbone, not every application platform supports it and conversion can take a while.\n\nMaybe the best solution would be to implement a Backbone.noREST flag. By default this is false and the behavior would continue to throw an error. If set to true, then the Backbone.sync would just run the success callback and not attempt to contact the server if no URL is defined. If a URL is defined for an object, then it would behave normally.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/687/comments",
    "author": "dswitzer",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-10-24T20:44:38Z",
        "body": "Right -- just don't use `create`, `destroy`, and `save`... Instead:\n\n```\nlibrary.add(new Book);\n```\n"
      },
      {
        "user": "dswitzer",
        "created_at": "2011-10-24T23:15:48Z",
        "body": "One problem is the add() method doesn't return a reference to the new model like create() does. So these two lines return different values:\n\n```\nvar collection = library.add(new Book);\nvar book = library.create(new Book);\n```\n\nProbably a different issue altogether, but it seems like the Collection.add should return either the new model created or an array of models created, but I'm sure that would break code. I could use Collection._add(), but since that's a private method that felt wrong.\n"
      }
    ]
  },
  {
    "number": 685,
    "title": "Chrome history strange behavior.",
    "created_at": "2011-10-23T21:58:04Z",
    "closed_at": "2011-10-24T13:40:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/685",
    "body": "Chrome 14.0.835.202 m\nBackbone 0.5.3\nI have router with couple of 'urls' linked to handlers.\nWhen I walking through the app, on each hash not only current handler is calling, but all previously called handlers too. So, on each step I see calling of growing chain of handlers.\n\nIt happens only when I'm typing hash by hands. When I'm calling Router.navigate() manualy — all is ok.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/685/comments",
    "author": "iuriikomarov",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-10-24T13:40:18Z",
        "body": "First off, that sounds broken -- all previously called handlers should not be called. Second off, you don't want to set the hash manually ... always use `navigate()`. \n"
      }
    ]
  },
  {
    "number": 636,
    "title": "Regression with routes in IE6",
    "created_at": "2011-09-27T19:08:28Z",
    "closed_at": "2012-01-13T21:07:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/636",
    "body": "In Backbone 0.3.3, the Controller routes specs passed.\n\nIn Backbone 0.5.3, Router spec 67 fails. (They do pass in IE7 and IE8)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/636/comments",
    "author": "deleteme",
    "comments": [
      {
        "user": "deleteme",
        "created_at": "2011-09-27T19:11:32Z",
        "body": "Here's the content of the failing spec:\n\n```\nBackbone.Router: Router: routes (query) (2, 0, 2)\n\nfailedExpected:  \"mandel\" \nResult:  undefined \nDiff:  \"mandel\" undefined  \n\nfailedExpected:  \"a=b&c=d\" \nResult:  undefined \nDiff:  \"a=b&c=d\" undefined  \n```\n"
      },
      {
        "user": "wookiehangover",
        "created_at": "2011-11-02T05:35:57Z",
        "body": "<del>confirmed in IE6</del>\n"
      },
      {
        "user": "wookiehangover",
        "created_at": "2011-11-02T05:56:43Z",
        "body": "@tbranyen informed me that Backbone.js only supports IE7+...\n\nBUT this isn't clearly documented anywhere, so we need to fix that. tagging this ticket as \"documentation\" \n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-13T21:07:30Z",
        "body": "I'm inclined to let sleeping dogs lie unless we get more complaints -- I think that folks developing JavaScript-heavy web applications and targeting IE6 are very few and far between.\n"
      },
      {
        "user": "deleteme",
        "created_at": "2012-01-13T21:09:03Z",
        "body": "@jashkenas Agreed. The issue was worth noting, but not important enough for me to provide a fix.\n"
      }
    ]
  },
  {
    "number": 619,
    "title": "collections within collections",
    "created_at": "2011-09-18T21:34:42Z",
    "closed_at": "2012-01-13T21:28:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/619",
    "body": "I'm not sure if I'm doing something wrong here or not...I imagine I am since this seems like a very common use-case:\n\nI've got one class extended from Backbone.collection, which is meant to contain another class extended from Backbone.collection.\n\nThe problem I hit was that when I'd call outerClass.add(instanceOfInnerClass); that for some reason I was getting an extra collection object in between...in other words, the structure looked something like this:\n\nouterClass\n&nbsp;&nbsp;&nbsp;&nbsp;2ndInstanceOfOuter\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerClass\n\nI tracked down the \"problem\" to this function:\n\n```\n// Prepare a model to be added to this collection\n    _prepareModel: function(model, options) {\n      if (!(model instanceof Backbone.Model)) {\n        var attrs = model;\n        model = new this.model(attrs, {collection: this});\n        if (model.validate && !model._performValidation(attrs, options)) model = false;\n      } else if (!model.collection) {\n        model.collection = this;\n      }\n      return model;\n    },\n```\n\nwhat was happening is that my \"instanceOfInner\" was not an instance of model (but of collection), and therefore this function was creating a new object and passing instanceOfInner into it...this line is the important one:\n\n```\n if (!(model instanceof Backbone.Model)) {\n```\n\nchanging it to this has solved my problem, but it's nagging me that there's something I'm missing:\n\n```\n  if (!(model instanceof Backbone.Model) && !(model instanceof Backbone.Collection) ) {\n```\n\nCan anyone offer any insight?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/619/comments",
    "author": "JediMindtrick",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-13T21:28:43Z",
        "body": "You're not intended to nest collections and models in this fashion. Instead, simply:\n\n```\nouterCollection.innerCollection = instanceOfInnerCollection\n```\n"
      }
    ]
  },
  {
    "number": 612,
    "title": "model.set(..., {silent: true}) supresses validations",
    "created_at": "2011-09-13T19:30:38Z",
    "closed_at": "2011-09-14T16:57:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/612",
    "body": "Hi there,\n\nI'm trying to do a bunch of updates to my model, then finally update my ui at the end,but It appears that as long as I pass silent:true into my model.sets, then I never get validations.\n\nIs this intended behaviour, and if so, how should I sidestep it?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/612/comments",
    "author": "Esteth",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-09-14T16:56:59Z",
        "body": "Yes, this is intended behavior -- a silent change is silent, and allows you to tweak attributes temporarily without any of the consequences.\n\nSee #324, #398.\n\nSidestep it by running your validations before you update your UI.\n"
      }
    ]
  },
  {
    "number": 548,
    "title": "Maps in Collections",
    "created_at": "2011-08-09T14:19:49Z",
    "closed_at": "2012-01-17T22:05:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/548",
    "body": "Hi, it seems to me that backbone Collections currently supports only array/list of models.\n\nI'm just wondering how Collections could be used to allow maps.\n\nInstead of `new Collections ([ model1, model2, model3] )` one could do  `new Collections ({ key1: model1, key2: model2, key3: model3} )`\n\nThe reason for using maps would be that keys could be used to look up collections quickly, instead of having to use filter each time.\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/548/comments",
    "author": "zz85",
    "comments": [
      {
        "user": "benbro",
        "created_at": "2011-10-01T13:46:29Z",
        "body": "You can use mycollection.get('model-id') or mycollection.getByCid('model-cid') which are implemented as maps (I think).\nThe cid(client id) is automatically generated by the collection because models that are not saved yet don't have an id.\nMaybe you can set cid to your key or override the way backbone assign it.\n"
      },
      {
        "user": "yuchi",
        "created_at": "2011-10-01T14:25:03Z",
        "body": "As a reference, indexes are stored in `collection._byId` (which maps by `.idAttribute`) and in `collection._byCid`.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-17T22:05:12Z",
        "body": "Yes, collections are both ordered arrays, and maps indexed by `model.id`. Feel free to use whatever keys you like as the `id` of your models.\n"
      }
    ]
  },
  {
    "number": 544,
    "title": "Where is the C in MVC?",
    "created_at": "2011-08-08T11:47:21Z",
    "closed_at": "2011-08-08T13:56:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/544",
    "body": "Backbone doesn't have a Controller object (what used to be called Controller is in fact a Router and was fortunately renamed as such). In fact, why should it? As far as I see, Model, Collection and View objects are all that is needed:\n- The Model and Collection objects contain both data and business logic. They both know how to persist/restore their data to/from a remote server or a local storage.\n- The View object is tied to the DOM, contains UI logic, and is bound to a Model and/or a Collection.\n\nSo where does the Controller fit in here? Sound to me like it has disappeared.\n\nThoughts and comments?\n\nP.S. I don't know if this GitHub Issues is the right place to discuss this. It is the right audience though.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/544/comments",
    "author": "martindrapeau",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-08-08T13:56:37Z",
        "body": "If the terminology is throwing you off, try thinking of your templates as views, and the Backbone.Views as a controller. I prefer to use template/view, because Backbone.Views are usually tied to a specific DOM element ... but whatever floats your boat.\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2011-08-08T13:57:32Z",
        "body": "Does it matter?\n\nBackbone is definitely modeled after MVC, but strict adherence? No, its much like Django in that regard.  You're free to set up your architecture in a meaningful way related to your project.\n\nWe've done projects that don't use Routers, and I have been using views without the DOM.  There is no definition that I must follow in order to use this framework.\n\nHave you found yourself using Backbone and find there is a missing component that you need in order to satisfy your architecture? I don't feel as though the concept of a controller is necessary, and if you want something like one, just make a constructor and work with that.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-08-08T13:59:07Z",
        "body": "@tbranyen +1.\n\nSometimes I'll use an object to orchestrate and coordinate a number of views ... and I'll call that a controller -- but there isn't a particular pattern there that should be codified into Backbone: a regular JS object does nicely.\n"
      },
      {
        "user": "jeremyckahn",
        "created_at": "2011-08-08T14:22:34Z",
        "body": "Protip: It's just JavaScript. :)\n\n``` javascript\nBackbone.Controller = Backbone.View;\n```\n"
      },
      {
        "user": "martindrapeau",
        "created_at": "2011-08-08T16:39:12Z",
        "body": "Thanks for the comments. Your answers are in line with mine - put the C wherever you fancy.\n"
      }
    ]
  },
  {
    "number": 526,
    "title": "[question] how to handle scroll event for window?",
    "created_at": "2011-08-02T00:51:08Z",
    "closed_at": "2011-08-03T18:39:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/526",
    "body": "``` javascript\nevents: {\n  \"scroll\": \"loadMore\"\n}\n```\n\nI'm not sure how to do it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/526/comments",
    "author": "amrnt",
    "comments": [
      {
        "user": "jeremyckahn",
        "created_at": "2011-08-02T01:48:14Z",
        "body": "I'm assuming that this is an `events` key for a `View` bound to the window?  If so, then that looks like it should work.  `loadMore` just needs to be a method of that View Object.\n\nIf not, I think you have to manually bind the scroll event to the window:\n\n``` javascript\nvar example = Backbone.View.extend({\n  initialize: function () {\n    var self = this;\n\n    $(window).bind('scroll', function (ev) {\n      self.loadMore(ev);\n    });\n  },\n\n  loadMore: function () {\n    console.log('Loading more.');\n  }\n});\n```\n"
      },
      {
        "user": "amrnt",
        "created_at": "2011-08-02T08:55:45Z",
        "body": "in the first case, the `el` of the view should be `window` right?\n"
      },
      {
        "user": "jeremyckahn",
        "created_at": "2011-08-02T11:09:53Z",
        "body": "Yes, that's correct.  Does that work?\n"
      },
      {
        "user": "amrnt",
        "created_at": "2011-08-03T23:36:04Z",
        "body": "``` javascript\nclass window.MainView extends Backbone.View\n  el: \"window\"\n  events:\n    \"scroll\": \"render\"\n\n  initialize: ->\n    _.bindAll(@, \"render\")\n    @render()\n\n  render: ->\n    console.log \"scroll\"\n```\n\n``` javascript\n  routes:\n    '': 'welcome'\n\n  welcome: ->  \n    new MainView\n```\n\nWhen loading the main page, it will appear on console \"scroll\". but when scroll nothing happened.\n"
      },
      {
        "user": "jeremyckahn",
        "created_at": "2011-08-04T12:46:11Z",
        "body": "Try removing the code you have in `initialize` - just leave that blank.\n\nLet me make sure I'm understanding this; the `render` method gets called once, only on page load?  That's because you have an explicit call to `render` in your `initialize` method.  Try removing all the code you have in `initialize`.  Also, I think you need to replace this line:\n\n``` javascript\nel: \"window\"\n```\n\nwith this:\n\n``` javascript\nel: $(window)\n```\n\nI'm pretty unfamiliar with CoffeeScript's syntax, so perhaps that's implicit or I missed something else.  In either case, I believe that `el` needs to be a jQuery Object, not a raw DOM node or `window` Object.\n"
      },
      {
        "user": "amrnt",
        "created_at": "2011-08-04T12:48:53Z",
        "body": "yep. That just works!\n\nThanks\n"
      }
    ]
  },
  {
    "number": 523,
    "title": "href in template not working",
    "created_at": "2011-08-01T18:00:17Z",
    "closed_at": "2011-08-03T18:43:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/523",
    "body": "Hi,\nI'm using backbone and its working fine expect for one issue: href tags in templates don't work.\n\nIf I create a template like this: \n\n``` javascript\nshow_template: _.template('<a href=\"{{value}}\"><h2>{{name}}</h2></a>')\n```\n\nit works.\n\nbut if I change the template to:\n\n``` javascript\n        show_template: _.template($('#show-link-template').html())\n```\n\nwhere show-link-template is:\n\n``` javascript\n<div id=\"show-link-template\" style=\"display:none\"><a href=\"{{value}}\"><h2>{{name}}</h2></a></div>\n```\n\nthe {{value}} is not overwritten.\n\nNote: I've changed template settings to:\n\n``` javascript\n_.templateSettings = {\n        interpolate : /\\{\\{(.+?)\\}\\}/g\n      };\n```\n\nCan anyone help me?\nBest regards,\nMigrate\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/523/comments",
    "author": "Migrate",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-08-03T18:43:20Z",
        "body": "Probably not here, but feel free to ask your question on the mailing list, or in the IRC channel.\n"
      }
    ]
  },
  {
    "number": 464,
    "title": "Is model.collection a good thing ?",
    "created_at": "2011-07-06T08:47:00Z",
    "closed_at": "2012-01-23T17:12:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/464",
    "body": "Hi,\nwhen a model is added to a collection, the collection points to the model, and the model points to the collection. As far as I understand, this is to allow the model to compute its URL from the collection's URL when model.fetch() is invoked.\nThe drawback of this is that a model cannot be added to several collections, which could be really convenient.\n\nI'm working on a large AJAX application and you're be glad to know that we are intensively using Backbone. Same data need to be displayed in many places, and sometimes the same collections appears here unsorted and there sorted/filtered. Today I have to workaround this either by adding indirections (intermediate models) between my widgets and my collections, or by having two instances of my models, one for each collection, which is not satisfactory at all.\n\nI suggest that a model does not point to the collection it belongs to. It would not be that hard to set the URL of the model before to fetch it (if you really need that), and it would allow to design more powerful application models.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/464/comments",
    "author": "Xophe",
    "comments": [
      {
        "user": "pdelanauze",
        "created_at": "2011-07-18T20:12:33Z",
        "body": "I've just run into the exact same problem. +1\n"
      },
      {
        "user": "wookiehangover",
        "created_at": "2012-01-15T22:52:25Z",
        "body": "-1\n\nI don't see a real need to support polymorphic model - collection relationships. I'd be happy to reconsider in if someone could provide a practical, real-world use case where that pattern is the only acceptable solution (to a common problem), but until then I'm pretty skeptical of this.\n"
      },
      {
        "user": "Xophe",
        "created_at": "2012-01-16T08:25:59Z",
        "body": "Well I finally found that using intermediate models between my list widget and my backbone collections is the best approach. Doing so I'm able to wrap my model into a sort model, a filter model, or I can write custom modem that rely on several collections.\nIf I'm not opposed to model.collection anymore, I do see why it's useful. I've checked my code, the only place I used it in my 60K+ LOC (not including libraries) is a hack, I got to find time to rewrite it. Can anyone explain me how useful it is ?\n\nEdit: I'm ok to close this issue, it is just a discussion about usage of backbone now.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-23T17:12:47Z",
        "body": "A model's reference to its collection is what allows a model to compute it's URL based on the collection that it happens to be in. `/documents/10/notes/1` vs. `/documents/700/notes/1` for example. The current behavior is to allow a model to be added to multiple collections at once, but the last collection that a model has been added to is the one it will use to compute its URL ... I think that this behavior is desirable -- you can still freely add a model to multiple collection and override `url()` as you wish.\n"
      }
    ]
  },
  {
    "number": 462,
    "title": "Sync return changed from 0.3.3 to 0.5.1",
    "created_at": "2011-07-05T19:37:53Z",
    "closed_at": "2011-07-05T19:38:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/462",
    "body": "Under 0.3.3, when you called fetch() on a collection, it returned the collection.\n\nUnder 0.5.1, when you call fetch() on a collection, it returns the jQuery ajax object.\n\nThis prevents you from chaining the creation of a collection to an immediate fetch:\n\ntweets = new Tweets().fetch();\n\nrequiring you to do:\n\ntweets = new Tweets();\ntweets.fetch();\n\nIs this an intended change?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/462/comments",
    "author": "edwardmsmith",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-07-05T19:38:11Z",
        "body": "Yes!\n"
      },
      {
        "user": "edwardmsmith",
        "created_at": "2011-07-05T19:40:40Z",
        "body": "I should have asked this in my original question, but what's the benefit of this change?  The ability to access the promise?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-07-05T19:42:58Z",
        "body": "... yes.\n"
      }
    ]
  },
  {
    "number": 455,
    "title": "Is it possible to have multiple routers on a single page?",
    "created_at": "2011-07-02T19:24:17Z",
    "closed_at": "2011-07-05T13:16:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/455",
    "body": "I've started to build a widget using backbone that can be easily dropped into any webpage. Someone might want to include multiple instances of this widget on the same page. Or I might create additional widgets and need to include more than one on a page. This widget allows cross-domain retrieval of data to be displayed on an external site.\n\nThis widget is actually a mini-app and needs to be able to display different views based on actions a user takes. I'm using a backbone router/controller to display the right view. The selected view needs to be bookmarkable and browser back/forward buttons should navigated through user interactions.\n\nBut what if multiple mini-apps are embedded on a single page? Is this possible using backbone's routers? How would having multiple routers work? Can a router listen to just part of the hash string?\n\nSo you can better understand the use case, imagine a sports league that wants to display schedules and standings. A widget can be included onto their webpage that displays a list of divisions. Clicking a division displays a list of teams and a game schedule for the division. Clicking on a team displays the schedule just for that team. A team might want to send a link out to their users of their own schedule, so each team's schedule needs to be bookmarkable.\n\nThis works fine if there is only one \"schedule widget\" on the page. But what if the league wants to include two instances of this widget? Perhaps they have a widget displaying the \"current season\" and another one displaying \"last season\" so that people can go and view the standings and results.\n\nLastly, how about interacting with non-backbone hash-string interactions on the page? I'm assuming there really isn't anything I could do if something on the page has a link like `<a href=\"#top\">Back to top</a>`.\n\nAny thoughts or suggestions would be appreciated!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/455/comments",
    "author": "tauren",
    "comments": [
      {
        "user": "threepointone",
        "created_at": "2011-07-04T05:39:20Z",
        "body": "Not sure how this belongs on the issues page (probably more suitable for support/forum/wiki?) Lemme have a shot at this. \nYou should probably consider a redesign of your widget/page interaction; ideally relook at splittg up this widget into separate types (and with different routes). Also, consider what happens when people click on both the widgets? Should I bookmark to the last clicked widget route, or some other criteria? \n\nAnyway, You should probably define your widget as having a parent controller that looks for instances of the widget on the page (or in a namespace), and define the router there. Have sub controllers per widget type/page then maybe? That way you can link up to a main controller on a page (no matter how many there are)\n\nHTH\n"
      },
      {
        "user": "tauren",
        "created_at": "2011-07-04T11:48:42Z",
        "body": "@threepointone Thanks for the response. I did ask a similar question on IRC first, but didn't get any reply. I didn't realize there was a backbone support group -- when I started working with Backbone last year I don't think one existed. Now that I just checked the site, I see there is a Google Group. That's great! I'll follow up there.\n\nBut in reply to your suggestions, I guess the main thing I'm trying to figure out is how to best create master and sub-routers. I'd like to build a _master_ router that simply knows how to route requests to the appropriate sub-router. Whichever widget is created first on the page would create the master router and inject its sub-router into it. Other widgets would inject their sub-routers.\n\nPerhaps the master router would need a splat route:\n\n```\nroutes: {\"*path\": \"router\"}\n```\n\nActually, dynamically adding routes via `masterRouter.route()` might be a better way to go.\n\nThe other thing that I'm unsure how to handle is maintaining state across multiple widgets. Perhaps a hashbang that supports multiple paths with some sort of delimiter might work? Perhaps one of these:\n\n```\n#![/scheduleWidget/36/division/23/team/77][/otherWidget/action/5]\n#!/scheduleWidget/36/division/23/team/77,/otherWidget/action/5\n```\n\nIt would be nice if each portion of the path could be sent to the appropriate sub-router for routing.\n"
      },
      {
        "user": "threepointone",
        "created_at": "2011-07-05T08:49:45Z",
        "body": "btw - You'll have to make sure that the page the widget is being included on doesn't use #fragment identifiers. \n\nI'm not sure a router makes sense for widgets, anyway. You should really consider breaking down your widget into smaller ones, and have each one do a _specific_ thing. \n\nBest of luck.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-07-05T13:16:00Z",
        "body": "You certainly can use multiple routers on the same page ... but @threepointone is quite correct: it's a really bad idea to change the URL for small widgets. URL changes should only be used when it can be considered a new page. Pressing the back button repeatedly only to have a little widget flutter around is going to frustrate your visitors.\n"
      },
      {
        "user": "tauren",
        "created_at": "2011-07-05T17:18:47Z",
        "body": "Thanks for the suggestions. Just to be clear, my \"widgets\" are actually intended to consume the entire content area and provide large chunks of embedded functionality. Having #!hashbangs control them does make sense in my situation and will not seem frustrating to users. \n\nThe problem is that a user _could_ put multiple widgets onto a page. These widgets are made to allow people with wordpress sites or other external sites embed mini-apps into their pages. And I can't control if they put more than one onto a page. Of course, I can recommend against it, but I mainly just want to see if there is a way to support it.\n"
      },
      {
        "user": "msaspence",
        "created_at": "2013-11-29T10:06:04Z",
        "body": "@tauren what solution did you go with in the end? Your comma delimitated routes is pretty much what I had in mind, but I'm wondering if I can achieve this with out writing my own routing system?\n"
      }
    ]
  },
  {
    "number": 452,
    "title": "Hashbangs and Routing",
    "created_at": "2011-07-02T06:27:52Z",
    "closed_at": "2011-07-02T13:56:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/452",
    "body": "I'm having issues since upgrading to .5.0 with hashbangs and routing. This worked before and is no longer working after changing Controller to Router.\n\nExample:\n\n```\nRouter = Backbone.Router.extend({\n  routes: {\n    \"!/\" : \"index\"\n  },\n  index: function() {\n    console.log('test');\n  }\n});\n\nnew Router();\nBackbone.history.start();\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/452/comments",
    "author": "joshvermaire",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-07-02T13:56:03Z",
        "body": "I'm afraid that hashbangs were never a good idea before -- unless your webapp was actually generating `?_escaped_fragment_` pages... Now, with pushState, you should _really_ never need 'em.\n\nThat said, improved support for them is present in 0.5.0. You can now just write:\n\n```\nroutes: {\n  \"/\" : \"index\"\n},\n```\n\n... And still match against a hash of: `/#!/`\n"
      }
    ]
  },
  {
    "number": 416,
    "title": "Automatic binding of this",
    "created_at": "2011-06-14T10:14:26Z",
    "closed_at": "2011-06-30T01:58:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/416",
    "body": "I know this has been asked before around the 'nets, but I find this one of the biggest pain points of Backbone.  Below are some problems with the way `this` currently works:\n1. Easy to forget - when adding a new method, you have to remember to add it to TWO places (the method itself and your binding call in the initializer method)\n2. Tedious to maintain - with a large class, you get a massive list of these bindings\n3. `_.bindAll(this)` doesn't work as the (underscore) documentation would lead one to believe\n4. Counterintuitive - just going `this.model.bind('remove', this.remove);` in the `initialize` of a view doesn't do what's expected (additionally, due to how jQuery works, it won't generate an error either)\n5. Some methods DO have automatic binding of `this` (for example the methods named in the events-hash)\n\nAre there technical reasons preventing automatic binding of all methods from working?  Or are there use cases where it is beneficial to have `this` freely bound?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/416/comments",
    "author": "jareware",
    "comments": [
      {
        "user": "bradphelan",
        "created_at": "2011-06-14T16:59:42Z",
        "body": "Just use coffeescript and this is automatic for you.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-06-30T01:57:45Z",
        "body": "I'm afraid that this is just the way that JavaScript works. Everything is lexically scoped ... except for the `this` keyword, which is dynamically scoped. It's a longstanding, well-known gotcha of the language.\n\nBackbone tries to help where it can, such as the automatic binding of event callbacks -- but binding every method in all Backbone objects is neither consistent with JavaScript, nor a good idea: there's a significant performance hit involved, and it may not be necessary, depending on how the method is called. \n\n`_.bind` and `_.bindAll` are there to help as well.\n"
      },
      {
        "user": "jareware",
        "created_at": "2011-07-11T16:44:43Z",
        "body": "Fair enough. :)\n"
      }
    ]
  },
  {
    "number": 411,
    "title": "Strategy for pulling huge collections?",
    "created_at": "2011-06-13T18:33:35Z",
    "closed_at": "2011-06-30T02:23:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/411",
    "body": "Hello,\nWe love Backbone, and we have a use case where the client application needs to get a huge collection from the server side.\nWe're not sure what the right solution is and I'm coming here for help. Loading all the elements at once cannot work, as it would require the client app to wait for more than a couple seconds and up to minutes... :(\n\nWhat do you guys suggest?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/411/comments",
    "author": "superfeedr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-06-30T02:23:02Z",
        "body": "... don't load all of the elements at once.\n\nIf you'd like more concrete / useful advice, try the Backbone Google Group, or the #documentcloud IRC room.\n"
      }
    ]
  },
  {
    "number": 402,
    "title": "Backbone getUrl default implementation doesn't work right with model.fetch",
    "created_at": "2011-06-10T11:19:15Z",
    "closed_at": "2012-01-23T17:55:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/402",
    "body": "Model.fetch should generate something like /[collection]/[id], but it generates /[collection]/\n\nIm using last version from master branch.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/402/comments",
    "author": "lexer",
    "comments": [
      {
        "user": "lexer",
        "created_at": "2011-06-10T11:45:25Z",
        "body": "Seems that i should use model.urlRoot to specify base uri for model that are not associated with a collection. Is this right?\n"
      },
      {
        "user": "lexer",
        "created_at": "2011-06-10T12:02:56Z",
        "body": "However i think that there is a problem with priorities. collection.url is preferable option, but I think that model.urlRoot should be preferable, because collection url often contains some criteria in its url.\n\nExample:\n\nUserOrdersCollection (url: \"/orders/user_orders/:user_id\")\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-23T17:55:37Z",
        "body": "Yes, you can use `model.urlRoot` ... or override `model.url` entirely, if your model exists outside of a collection.\n"
      }
    ]
  },
  {
    "number": 401,
    "title": "Silent routing",
    "created_at": "2011-06-10T08:32:40Z",
    "closed_at": "2011-06-30T02:46:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/401",
    "body": "I've got view which contains list and details views.\n\n/product/ - should show first product and list of products\n/proudct/1 - should show product with id = 1 and list of products\n\nWhen user click on product in the list, new product should appear in details, also hash should be changed.\n\nBut because of hash change, router render page once again and list is reloaded.\n\nIs there any way to solve this or this is limitaion of backbonejs routing?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/401/comments",
    "author": "uoksana",
    "comments": [
      {
        "user": "lexer",
        "created_at": "2011-06-10T08:40:52Z",
        "body": "Use Backbone.history.saveLocation method when you don't want to trigger routing.\n"
      }
    ]
  },
  {
    "number": 398,
    "title": "When model.set is triggered with {silent: true} option, subsequent set method fires a change event",
    "created_at": "2011-06-08T04:15:59Z",
    "closed_at": "2011-06-30T02:51:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/398",
    "body": "When model.set is triggered with {silent: true} option, subsequent set method fires a change event., even if the model has not been changed. \n\nReproduction steps.\n\nvar response = new Backbone.Model();\nresponse.bind('change', function(){alert('hello')});\nresponse.set({name: 'bob'}, {silent: true});\nresponse.set({name: 'bob'});\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/398/comments",
    "author": "senthoor",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-06-30T02:51:40Z",
        "body": "Ah, but the model has been changed. It now has a `name` of `\"bob\"`. Silent allows you to batch up your changes, and delay the change event ... not to pretend like they never occurred.\n\n```\nvar response = new Backbone.Model();\nresponse.set({name: 'bob'}, {silent: true});\nresponse.hasChanged(\"name\") // => true\n```\n"
      }
    ]
  },
  {
    "number": 385,
    "title": "Binding collection refresh to view has no effect",
    "created_at": "2011-05-31T21:03:44Z",
    "closed_at": "2012-01-23T17:57:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/385",
    "body": "``` javascript\n/* Bind collection refresh to view */\nwindow.SomeCollectionView = Backbone.View.extend({\n  ...\n  initialize: function() {\n    _.bindAll(this, 'render');\n    this.collection.bind('refresh', this.render);\n    this.collection.view = this;\n  },\n/* Fetch collection */\nSomeCollection.fetch()\n/* NO EFFECT */\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/385/comments",
    "author": "peterb",
    "comments": [
      {
        "user": "lwille",
        "created_at": "2011-06-10T10:44:04Z",
        "body": "Did you pass the SomeCollection instance to the SomeCollectionView constructor?\n\n```\nwindow.SomeCollection = new SomeCollection();\nwindow.SomeCollectionView = new SomeCollectionView({collection:window.SomeCollection});\n```\n\nBinding any function to the refresh event should also work:\n\n```\nwindow.SomeCollection.bind('refresh',function(){console.log('collection refreshed')})\n```\n"
      },
      {
        "user": "Luan97",
        "created_at": "2011-07-29T20:03:20Z",
        "body": "I got the same issue, even if I tried to make sure someCollectionView has collection reference and still no luck.\nI actually jump into the fetch function and add a line to trigger refresh event, like this:\n\nfetch : function(options) {\n      options || (options = {});\n      var collection = this;\n      var success = options.success;\n      options.success = function(resp, status, xhr) {\n      collection[options.add ? 'add' : 'reset'](collection.parse%28resp, xhr%29, options);\n      if (success) success(collection, resp);\n      collection.trigger('refresh', this);\n      };\n      options.error = wrapError(options.error, collection, options);\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);\n}\n\nAnd then it works.\n"
      },
      {
        "user": "immunda",
        "created_at": "2011-08-26T15:34:02Z",
        "body": "I had this same issue.\n\nThe 'refresh' event was changed to 'reset' in 0.5.0.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-23T17:57:30Z",
        "body": "Bingo.\n"
      }
    ]
  },
  {
    "number": 383,
    "title": "refresh event in collection",
    "created_at": "2011-05-31T10:50:35Z",
    "closed_at": "2012-01-23T17:58:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/383",
    "body": "I suggest to add an \"refresh\" event into the \"collection.add\" method.\nThis will give the opportunity be aware when all models will be added (in case when you give array of models)\n\n add : function(models, options) {\n      if (_.isArray(models)) {\n        for (var i = 0, l = models.length; i < l; i++) {\n          this._add(models[i], options);\n        }\n      } else {\n        this._add(models, options);\n      }\n      !options.silent && this.trigger('refresh', this, options);\n      return this;\n    },\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/383/comments",
    "author": "roman-manchenko",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-23T17:58:31Z",
        "body": "It's not a `reset` unless the entire collection has been `reset`. You can either use the `success` or `sync` callbacks ... or a debounced version of `add` for this pretty easily.\n"
      }
    ]
  },
  {
    "number": 369,
    "title": "backbone doesn't find objects in (sub?)collections when saved with {silent: true}",
    "created_at": "2011-05-25T15:12:49Z",
    "closed_at": "2011-05-26T17:46:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/369",
    "body": "Hi, say we have a Dokuments collection and a Notes collection within Dokuments.\nI added this note and saved it later on silently. The id is returned from the server and is copied to the object, but it can't be found by get:\n\n> > > dok = Dokuments.get('4ddd0c2de8e6870c5e00000c')\n> > > dok.notes.get('4ddd1359e8e6870c5e00013f')\n> > > undefined\n\nbut:\n\n> > > dok.notes.last().get('id')\n> > > \"4ddd1359e8e6870c5e00013f\"\n\nThank you in advance for any hints\n--Frank\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/369/comments",
    "author": "fwoeck",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T17:46:11Z",
        "body": "That's correct -- the model's id isn't considered to have changed until the next \"change\" event fires. The model can still be found by its old id until that happens. If you'd like to trigger the \"change\" event yourself, just call `model.change()`.\n"
      },
      {
        "user": "fwoeck",
        "created_at": "2011-05-26T18:44:26Z",
        "body": "ahh I see, thank you for your reply!\n"
      }
    ]
  },
  {
    "number": 368,
    "title": "Controller Documentation",
    "created_at": "2011-05-24T21:32:59Z",
    "closed_at": "2011-05-26T17:48:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/368",
    "body": "The documentation of controller usage is extremely lacking - not one example is given, and the sample application does not use any controllers.  It is difficult to determine exactly when and how controllers are to be used given this limitation.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/368/comments",
    "author": "idbentley",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T17:48:04Z",
        "body": "This should be fixed soon-ish on the **0.5.0** branch. Backbone.Controller is being renamed to Backbone.Router for clarity, and although it's still not going to be used in the example app, the documentation should better motivate how/why you'd want to use it, including perhaps pointing at the DocumentCloud workspace as a live example.\n"
      }
    ]
  },
  {
    "number": 361,
    "title": "Collection batch loading",
    "created_at": "2011-05-19T03:04:12Z",
    "closed_at": "2011-05-26T18:01:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/361",
    "body": "Collections are great for loading small numbers of models, but when many hundreds, thousands, or even more models exist, it is impractical to load all models at once via fetch().\n\nA better method is to batch operations so only X number of models are fetched (and held in memory) at a time. A good example is paging items. \n\nI think fetch() should be modified to allow a hash of parameters (that gets passed through to sync), so the sync layer knows exactly which models to load (can be used for paging, querying for certain models, etc). \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/361/comments",
    "author": "sentientmatter",
    "comments": [
      {
        "user": "vibornoff",
        "created_at": "2011-05-19T11:50:50Z",
        "body": "I think it's on your app logic what to `sync` or what not. Furthermore you can always override `Collection.url` to tell server what you want to get.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:00:54Z",
        "body": "Not only can you override `url` to fetch whatever page of items you want, you can also pass the jQuery.ajax options directly to `fetch()`\n\n```\nDocuments.fetch({data: {page: 3}})\n```\n"
      }
    ]
  },
  {
    "number": 356,
    "title": "Creating multiple models with defaults not deeply cloned",
    "created_at": "2011-05-14T20:42:52Z",
    "closed_at": "2011-05-26T18:26:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/356",
    "body": "When the defaults are an object and not a function, Backbone uses underscore's extend to copy the defaults onto newly created instances. I'm not 100% clear on this, but it seems if any of the default attributes are themselves other objects underscore's extend doesn't deeply clone them. That means multiple instances of a Backbone model will have shared attributes; which leads to crazy-town.\n\njQuery's extend does a better job of deeply cloning. The other solution I've found locally is to simply define the defaults to be a function that returns a new anonymous object rather than assigning the anonymous object to the defaults property of the model class.\n\nI'm not sure what (if anything) Backbone should do about this. Maybe use jQuery's extend. Maybe deprecate using an object as the default property value of a model. Maybe just document this in the annotations so others can learn.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/356/comments",
    "author": "dougalcorn",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:26:08Z",
        "body": "This is a common JavaScript gotcha, and isn't unique to Backbone, or to `defaults` -- it's all over the place when passing objects by reference. In addition, there's no reliable function for a deep clone, jQuery's works in the simple cases, and fails on complex ones.\n\nI've added a warning in the above commit.\n"
      }
    ]
  },
  {
    "number": 355,
    "title": "[Question] Is it possible (and ok) to init view inside model?",
    "created_at": "2011-05-12T01:13:30Z",
    "closed_at": "2011-05-26T18:35:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/355",
    "body": "Hi All,\n\nI'm new to backbone, so please forgive me for asking this stupid questions. Anyhow, I read lots of tutorials but most focused generating the objects that are not already on the page, but how about the ones already there? I need to generate these elements onload (server side) because I need search engines to be see them.\n\nAnyhow, on document ready Im doing something like this to put them into the collection with views:\n<code>\nvar documents = new App.Collections.Documents();\n    $('.block').each(function(index, element){\n        documents.add({el:element});\n    });\n\n```\ndocuments.each(function(document){\n    var view = new App.Views.Document({model: document, el: document.get('el')});\n});\n```\n\n</code>\nI think my above code has at least one problem: I need to save the element into the model attribute just so that I can reuse it later when create view. How should I do this the correct way?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/355/comments",
    "author": "yellow1912",
    "comments": [
      {
        "user": "yellow1912",
        "created_at": "2011-05-12T05:42:52Z",
        "body": "erm, I think this is better:\n<code>\nvar documents = new App.Collections.Documents();\n    $('.block').each(function(index, element){\n        var titleElement = $(element).find('.title .editable-content:first');\n        var contentElement = $(element).find('.content .editable-content:first');\n        var document = new App.Models.Document({title: titleElement.text(), content: contentElement.text()});\n        var view = new App.Views.Document({model: document, el: element, titleElement: titleElement, contentElement: contentElement});\n        documents.add(document);\n    });\n</code>\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:35:29Z",
        "body": "Yes -- passing the DOM element `el` into the view when you initialize it is the way to go for elements that are already extant on the page.\n"
      }
    ]
  },
  {
    "number": 353,
    "title": "the latest code not published to npm? o_O",
    "created_at": "2011-05-11T21:20:07Z",
    "closed_at": "2011-05-26T18:38:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/353",
    "body": "I was looking at the source on github and the file length is ~1100 lines -- but when I do\n\n```\n$ npm install backbone\n```\n\nMy backbone.js file is only ~ 1011 lines (as well as there being some minor differences in the source)\n\nThe package.json in github's master says the version = \"0.3.3\"\n\nand when i npm ls i also get 0.3.3 ...\n\nam i crazy? \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/353/comments",
    "author": "fat",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:37:30Z",
        "body": "You're not crazy. \n\n**master**, and now the **0.5.0** branch, is a good bit ahead of **0.3.3**. When it's released, it'll be pushed to npm.\n"
      },
      {
        "user": "fat",
        "created_at": "2011-05-26T18:42:19Z",
        "body": "ahh gotcha.\n"
      }
    ]
  },
  {
    "number": 351,
    "title": "Expose helper functions",
    "created_at": "2011-05-11T01:13:38Z",
    "closed_at": "2011-05-26T18:45:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/351",
    "body": "Backbone contains lots of small helper functions, like `wrapHTML`, `getUrl`,  `inherits` etc. it would be cool to expose them in `Backbone.util` or similar.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/351/comments",
    "author": "kkaefer",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:45:40Z",
        "body": "Perhaps, but we don't want to enlarge Backbone's public API with just grab-bag stuff. Feel free to copy-and-paste it for your own codebase if you like it -- that's a large part of the reason why the source code is all annotated.\n"
      }
    ]
  },
  {
    "number": 346,
    "title": "Backbone.History.loadUrl = undefined?",
    "created_at": "2011-05-05T00:05:31Z",
    "closed_at": "2011-05-26T18:55:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/346",
    "body": "I'm having the problem with backbone routing breaking in Internet Explorer 7.\n\nI'm trying to use the fix \nthis.SaveLocation()\nBackbone.History.loadUrl()\n\nafter the route is called so that it stays on the current route and not jump back to the previous route.  \n\nHowever, while I see the loadUrl definition in Backbone.History, when I look at it in firebug, it says undefined.  And calling it in IE says this object attribute doesn't exist.\n\nhelp?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/346/comments",
    "author": "benchow",
    "comments": [
      {
        "user": "benchow",
        "created_at": "2011-05-05T00:14:38Z",
        "body": "btw, I also tried to read about a fix that you can add to the Backbone.js file.\n\nthis.iframe.document.open().close(); \nthis.iframe.location.hash = window.location.hash;\n\nThis code made things worse for me.  I didn't get a js error, but for some reason my backbone views didn't render\n"
      },
      {
        "user": "benchow",
        "created_at": "2011-05-05T07:53:30Z",
        "body": "I should also add that in both internet explorer 8 and 7, after I trigger a hashchange or route, I get a never ending stream of object doesn't exist errors.\n\nI'm guessing that may be the backbone polling thread is being used and it keeps trying to call loadUrl which doesn't exist\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T18:55:23Z",
        "body": "You're looking for `Backbone.history.loadUrl()`, buddy. \n"
      }
    ]
  },
  {
    "number": 341,
    "title": "Dispose views resources",
    "created_at": "2011-04-29T11:30:46Z",
    "closed_at": "2011-04-29T13:02:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/341",
    "body": "Let's say I have a view \"#myView1\" and in my render() method I start a setInterval/setTimeout that is triggered every 2000ms.\n\nLet's say \"#myView1\" has a link to \"#myView2\". If I click on the \"#myView2\" link the setInterval/setTimeout is still running.\n\nIs there any way to ensure that all the resources used by a View are disposed when the view is not visible/used anymore?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/341/comments",
    "author": "licx",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-04-29T13:02:22Z",
        "body": "Sure -- that's what `clearTimeout` if for in JavaScript. Call it on your timeout id when the view is removed.\n"
      },
      {
        "user": "licx",
        "created_at": "2011-04-29T14:25:27Z",
        "body": "So I have to redefine MyView1.remove() and put a clearTimeout inside it.\n\nInside MyView1 I have to handle every \"click\" event on links that point to MyView2.\nInside this click handler I have to explicitly call MyView1.remove() and then window.location=\"#MyView2\"\n\n<pre><code>\n//MyView1 code\nevents: {\n      'click a[href=\"#MyView2\"]' : 'clickMyView2Link'\n},\n\nclickMyView2Link: function (event) {\n    event.preventDefault();\n    this.remove(); //Removes MyView1\n    window.location=\"#MyView2\";\n}\n</code></pre>\n\nIs that right or I am doing something terribly wrong? This looks very tricky.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-04-29T14:27:03Z",
        "body": "You don't want to ever do `window.location = ...` if you want things to work properly in IE, (use saveLocation()), but otherwise, I don't see anything the matter with it.\n"
      },
      {
        "user": "licx",
        "created_at": "2011-04-29T14:39:06Z",
        "body": "There is a route in my controller that points to MyView2\n\n<pre><code>\n//My Controller code\nroutes: {\n  \"MyView1\":         \"loadMyView1\",\n  \"MyView2\":         \"loadMyView2\",\n },\n\nloadMyView1: function() {\n   var v1= new MyView1();\n   $(\"body\").append(v1.render().el);\n},\nloadMyView2: function() {\n   var v2= new MyView2();\n   $(\"body\").append(v2.render().el);\n},\n</code></pre>\n\nIf I want to load MyView2 I need to trigger hashChange by setting the hash directly. If I call saveLocation() MyView2 just won't load.\n\nThank you very much for your advice.\n"
      }
    ]
  },
  {
    "number": 338,
    "title": "Backbone.history: Exception thrown when route contains % character",
    "created_at": "2011-04-27T09:56:38Z",
    "closed_at": "2011-05-26T19:12:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/338",
    "body": "in Backbone.history ->     checkUrl : function() {}\n\nthis function contains a call to decodeURIComponent(this.fragment)\nbut the fragment appears to already be decoded.\n\nAn encoded fragment might contain \"top%2020%25\" \nso its decoded equivalent will contain \"top 20%\"\n\nNow when checkUrl decodes the already decoded URI, it encounters the % character so it expects to find a special character there, and throws an error when it does not.\n\nPerhaps there is browser specific behaviour at work here, where some browsers will decode the URI for you, while others will not. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/338/comments",
    "author": "halfbaked",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T19:12:18Z",
        "body": "Yes, unfortunately there's a longstanding bug in Safari, and in Android, which will incorrectly pre-decode the URL at all times. I'm afraid there's not much we can do about it, but I've nudged them on the Webkit bugzilla tracker.\n"
      },
      {
        "user": "reconbot",
        "created_at": "2011-06-16T14:32:48Z",
        "body": "Would it be worth doing a try catch?\n"
      }
    ]
  },
  {
    "number": 335,
    "title": "Pub/Sub between modules would be nice",
    "created_at": "2011-04-26T07:50:54Z",
    "closed_at": "2011-05-26T19:24:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/335",
    "body": "I'm just starting with Backbone so I may be wrong, but my understanding is that in order to be able to pass data between different modules (from one view to another for instance), one needs to have one module being created inside the other one or to specifically bind them.\n\nIMHO, this makes it more difficult to have modular code with loosely coupled modules.\n\nWouldn't it be nice to have a kind of pub/sub between modules ?\n\nView1 = Backbone.View.extend({\n   initialize: function(){\n     this.subscribe('custom event', callback);\n   }\n  // ...\n})\n\nView2 = Backbone.View.extend({\n  // ...\n  foo: function(){\n    this.publish('custom event', data);\n  }\n})\n\nAs i said, I'm just starting to learn backbone so i may have missed something obvious.  If it is already possible to implement this, I would appreciate any pointers.\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/335/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T19:24:20Z",
        "body": "You can implement notifications by listening for events on specific models... but it looks like you want to have a single global message interchange. (A bad pattern, IMO, but hey, whatever floats your boat.) You could build one quite easily like this:\n\n```\nvar pubsub = new Backbone.Model;\n\nView1 = Backbone.View.extend({\n  initialize: function(){\n    pubsub.bind('custom event', callback);\n  }\n  // ...\n});\n\nView2 = Backbone.View.extend({\n  // ...\n  foo: function(){\n    pubsub.trigger('custom event', data);\n  }\n});\n```\n"
      }
    ]
  },
  {
    "number": 334,
    "title": "Saving a model does return a model but not all attributes are accessible.",
    "created_at": "2011-04-24T12:45:08Z",
    "closed_at": "2011-05-26T19:28:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/334",
    "body": "Using the following model:\n\n```\nArtistModel = Backbone.Model.extend({\n    url: function() {\n        return \"/api/g_favartists/\";\n    }    \n}); \n```\n\nWhen saving the model the returned value isn't what I'd expected it to be.\n\n```\nnew_model = new ArtistModel();\nnew_model.set(this.newAttributes());\nn = new_model.save(this.newAttributes());\n\nconsole.log(n); // returns an object with visible attributes\nconsole.log(n.attributes); // this also prints out the objects hooked to the attributes object.\n// but when printing the attributes they are undifined ?\nconsole.log(n.attributes.created; // returns undefined\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/334/comments",
    "author": "jonas-grgt",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T19:28:28Z",
        "body": "No idea -- sorry. Check for typos.\n"
      }
    ]
  },
  {
    "number": 321,
    "title": "Backbone.sync issue",
    "created_at": "2011-04-15T08:07:51Z",
    "closed_at": "2011-04-18T06:13:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/321",
    "body": "If I use localstorage as persistence strategy, I will override it. but the function is global. If in an app, need CRUD JSON RESTful and Local Storage both, How to do it?\nI suggest specify a sync object to model, If no sync is specified for a model, use the default implementation.\nBackbone.sync should be refined to an interface, but a global object.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/321/comments",
    "author": "JacksonTian",
    "comments": [
      {
        "user": "JacksonTian",
        "created_at": "2011-04-18T06:13:21Z",
        "body": "Maybe I am wrong. I have seed these lines: (this.sync || Backbone.sync).call(this, 'read', this, options);\nThe Model object will use itself's sync method first, if the sync doesn't exist, use the global sync instead. \n"
      },
      {
        "user": "JacksonTian",
        "created_at": "2011-04-18T06:14:35Z",
        "body": "But the documentation is not clear. \n"
      },
      {
        "user": "mattfysh",
        "created_at": "2011-05-13T02:25:18Z",
        "body": "deleting this comment - hadn't realised the documentation relates to the 0.3.3 tag and not the latest backbone.js - new to git, my bad.\n"
      }
    ]
  },
  {
    "number": 315,
    "title": "How to debounce view events?",
    "created_at": "2011-04-13T11:50:59Z",
    "closed_at": "2011-04-13T15:31:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/315",
    "body": "How would you debounce this keyup listener so the subdomain check only happens after a delay?\n\nThis kind of works, but the `_checkSubdomain` function is still called for each keyup event, the calls just get delayed:\n\n```\nevents: {\n  'keyup #subdomain' : 'checkSubdomain'\n},\n\ncheckSubdomain: function(e){\n  this.debounced = _.debounce(_.bind(this._checkSubdomain, this, e), 2000);\n  this.debounced();\n},\n\n_checkSubdomain: function(e){\n  // called once for each keyup event :(     \n  console.log(e.target.value);\n}\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/315/comments",
    "author": "meleyal",
    "comments": [
      {
        "user": "meleyal",
        "created_at": "2011-04-13T15:31:55Z",
        "body": "I ended up solving it like this:\n\n```\nevents: {\n  'keyup #subdomain' : 'checkSubdomain'\n},\n\ninitialize: function(){\n  this._getSubdomain = _.debounce(_.bind(this.getSubdomain, this), 2000);    \n},\n\ncheckSubdomain: function(e){\n  var subdomain = e.target.value;    \n  this._getSubdomain(subdomain);\n},\n\ngetSubdomain: function(subdomain){\n  // called only once every 2 seconds :)\n  console.log(subdomain);\n}\n```\n"
      },
      {
        "user": "joshmosh",
        "created_at": "2011-10-26T21:23:45Z",
        "body": "@meleyal: Thank you for documenting this. I found this very useful on a project I am working on.\n"
      },
      {
        "user": "kirbysayshi",
        "created_at": "2012-02-17T06:28:14Z",
        "body": "I came across this same issue, and solved it this way:\n\n```\nevents: {\n  'keyup #subdomain' : 'checkSubdomain'\n},\n\ninitialize: function(){\n  this.getSubdomain = _.debounce(this.getSubdomain, 2000);    \n},\n\ncheckSubdomain: function(e){\n  // called only once every 2 seconds :)\n  console.log(subdomain);\n}\n```\n\nBecause you're defining the events in the events object, the method is already bound to the proper context. Seems to be working fine so far!\n"
      },
      {
        "user": "jsoncorwin",
        "created_at": "2012-07-24T21:01:10Z",
        "body": "I know this is already closed, but I was looking for a solution and just tested out the following, it's a bit strange, but I suppose no stranger than any previous ones, and seems to work:\n\n``` javascript\nevents: {\n    'keyup #subdomain': 'checkSubdomain'\n},\n\ncheckSubdomain: _.debounce(function(){\n    // do something\n}, 2000)\n```\n"
      },
      {
        "user": "achur",
        "created_at": "2012-09-06T20:43:54Z",
        "body": "@jsoncorwin nothing strange about it:\n\nThe problem with the original code by @meleyal was that `_.bind` returns a new debounced function each time, so though it was technically debounced, a new one was created/called on each keyup (defeating the point of debouncing; each call is merely delayed -- since it is only called once, it waits and is never called again so it executes).  The right solution is to call `debounce` _once_, then to use the return value _every_ time (which you accomplish by calling `debounce` at model-definition time).\n\nHopefully this brings some clarity as to why this was happening/why these solutions work.\n"
      },
      {
        "user": "mohandere",
        "created_at": "2016-01-22T16:37:43Z",
        "body": "Either you can write also,\n\n```\nevents: {\n   'keyup #subdomain': _.debounce(function(){\n      this. getSubdomain();\n   }, 500),\n},\n```\n"
      },
      {
        "user": "linus-amg",
        "created_at": "2016-01-23T22:46:20Z",
        "body": "you should always create the debounced (edit: bound, throttled, memoized) version of a function in the initialize method (if not earlier) when the 'delay' is not dynamic.\n"
      },
      {
        "user": "valecarlos",
        "created_at": "2017-02-21T21:37:45Z",
        "body": "it's been a while now, but is @jsoncorwin 's approach the best yet?"
      }
    ]
  },
  {
    "number": 314,
    "title": "reverse sort order of models in a collection",
    "created_at": "2011-04-11T19:55:40Z",
    "closed_at": "2011-04-18T16:08:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/314",
    "body": "hey,\n\nwhat's the best way to reverse the sort order a collection? my comparator sorts all models by date,\nbut i would need them in reverse order. using `toArray()` and `reverse()` seems pretty ugly.\n\ngiven i'm not missing something important here, i'd vote for a backbone model attribute to set the\nsort order along with the comparator.\n\ncheers,\ndaniel\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/314/comments",
    "author": "rubiii",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-04-18T16:07:58Z",
        "body": "The best way to reverse the sort of the collection is to return a negative value from your comparison criterion.\n\n```\ncomparator : function(model) {\n  return -model.get('date');\n}\n```\n"
      },
      {
        "user": "kkaefer",
        "created_at": "2011-08-10T00:14:16Z",
        "body": "How is this supposed to work when sorting alphabetically on a string value?\n"
      },
      {
        "user": "inf0rmer",
        "created_at": "2012-01-12T11:11:14Z",
        "body": "If all you have are string values, then maybe convert to a Date before?\nI had the same problem and this solved it.\n\n``` javascript\ncomparator : function(model) {\n  return -new Date(model.get('date'));\n}\n```\n"
      },
      {
        "user": "kkaefer",
        "created_at": "2012-01-12T12:55:11Z",
        "body": "That only works for dates (which are converted into numbers when you prefix them with -), but not for arbitrary strings that you want to sort alphabetically.\n"
      },
      {
        "user": "inf0rmer",
        "created_at": "2012-01-12T13:20:09Z",
        "body": "You're of course right, I assumed you were still talking about dates (like the OP), but that your date was a convertible string. My mistake then :).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-12T15:59:08Z",
        "body": "The next version of Backbone (and the current master) will support `sort` orderings for comparators (instead of just `sortBy`), so you'll be able to define it in the usual way.\n\n```\ncomparator: function(a, b) {\n  ...\n}\n```\n"
      },
      {
        "user": "elwayman02",
        "created_at": "2013-09-24T19:15:58Z",
        "body": "What do you do if you have multiple use-cases for the same collection, some of which should be shown in one order, and the other in the reverse?  Your comparator and sort implementations can only pick one direction or the other, there doesn't seem to be a Collection.reverse() to be able to quickly switch sort directions (ascending vs descending).\n"
      },
      {
        "user": "philfreo",
        "created_at": "2013-09-24T19:18:28Z",
        "body": "@elwayman02 You can just maintain 2 collection instances (Collection#clone may help)\n"
      },
      {
        "user": "elwayman02",
        "created_at": "2013-09-24T19:54:46Z",
        "body": "That's not particularly useful...take for example a situation where the collection represents a grid of data that I will be repeatedly sorting in multiple directions.  It doesn't make sense to try and maintain two different sources of data and switch between them.  There should be one data object that we manipulate as needed.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-09-24T20:24:25Z",
        "body": "I've stored multiple comparators on a collection, and swapped them out as needed.\n\n``` js\nvar Collection = Backbone.Collection.extend({\n  comparators: {\n    a: function () {},\n    b: function () {}\n  },\n\n  setComparator: function (key) {\n    this.comparator = this.comparators[key];\n    return this;\n  }\n});\nvar collection = new Collection();\ncollection.setComparator('a').sort();\ncollection.setComparator('b').sort();\n```\n"
      },
      {
        "user": "elwayman02",
        "created_at": "2013-09-24T20:26:46Z",
        "body": "That's a better workaround, although I still don't understand why a workaround is necessary instead of backbone simply supporting a reverse() method.\n"
      },
      {
        "user": "caseywebdev",
        "created_at": "2013-09-24T20:28:52Z",
        "body": "You could also do\n\n``` js\ncollection.set(collection.models.reverse(), {sort: false});\n```\n"
      }
    ]
  },
  {
    "number": 308,
    "title": "Add a \"404\" callback to Backbone.Controller?",
    "created_at": "2011-04-06T15:40:39Z",
    "closed_at": "2011-04-18T18:06:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/308",
    "body": "Hey all,\n\nHow do you feel about extending Backbone.Controller to optionally call a function when a hashchange event is triggered, but no matching route is found. For example:\n\n```\nnew Backbone.Controller({\n\n      routes : {\n           \"foo\": \"onFoo\",\n           \"bar\"  \"onBar\"\n       },\n\n      // Backbone will call this function when there's no matching route.\n      routeNotFound : function () {\n             alert(\"This page doesn't exist\");\n      },\n\n      ....\n});\n```\n\nThanks,\nMatt\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/308/comments",
    "author": "clutchski",
    "comments": [
      {
        "user": "licx",
        "created_at": "2011-04-18T15:35:59Z",
        "body": "I added this entry  \n\n<pre><code>\n\".*\": \"show404Page\"\n</code></pre>\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-04-18T18:06:40Z",
        "body": "Yes, you can either bind a catch-all route as your \"404\" handler, or just rely on the fact that `Backbone.history.start()` returns `false` if no initial route matches.\n\n```\nif (!Backbone.history.start()) {\n  // render 404 page.\n}\n```\n"
      },
      {
        "user": "clutchski",
        "created_at": "2011-04-20T17:13:08Z",
        "body": "Great info. Thanks.\n"
      },
      {
        "user": "ghost",
        "created_at": "2011-05-09T17:04:15Z",
        "body": "The problem with adding an entry like \"._\" is when you need to add routes after initialization. Routes are matched in the order they were inserted, so all routes added after a \"._\" route will never been matched. The history.start() solution only works on page load.\n\nI still think this is a worthwhile feature to add.\n"
      },
      {
        "user": "krunkosaurus",
        "created_at": "2012-06-09T00:29:26Z",
        "body": "Just a note that \"._\" did not work for me as a 404 catch all but  \"_path\" did.\n"
      },
      {
        "user": "morficus",
        "created_at": "2012-08-02T18:37:16Z",
        "body": "to jeremiahlee point, routes are evaluated in the order they are defined.\nso just make sure to add your \"catch all\" route AT THE END, always\n"
      },
      {
        "user": "cgarvis",
        "created_at": "2012-08-27T16:46:19Z",
        "body": "When working with multiple routers, this becomes an issue.  There needs to be a better solution.\n"
      },
      {
        "user": "dwt",
        "created_at": "2012-10-11T11:21:56Z",
        "body": "Same here, I'd like to detect dead links, either inside the application or from an external source while the application adds routes at arbitrary times. :-/\n\nSo I'd like a callback if no route matches.\n\nThat could be an event on the router that you can listen for, no?\n"
      },
      {
        "user": "morficus",
        "created_at": "2012-10-12T16:34:19Z",
        "body": "I'm currently achiving this by adding the following catch-all route AT THE END of my routes:\n\nrouter : {\n'*invalidRoute' : 'showErrorPage'\n}\n"
      },
      {
        "user": "dwt",
        "created_at": "2012-10-14T16:40:27Z",
        "body": "I'd love to, but I do not have a clear time when all my routes have been added. :/\n\nMight suffice as a workaround for now if I reset all routes when they are added, but this will spawn more problems later.\n\nMuch nicer would be to just get a callback if no route matches.\n\nPretty please?\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-15T18:44:57Z",
        "body": "You can also just patch `Backbone.history` and trigger whatever events you like.  For instance:\n\n``` js\nvar loadUrl = Backbone.History.prototype.loadUrl;\nBackbone.History.prototype.loadUrl = function() {\n  if (!loadUrl.apply(this, arguments)) this.trigger('route-not-found');\n};\n```\n"
      },
      {
        "user": "dwt",
        "created_at": "2012-10-16T07:14:30Z",
        "body": "Am 15.10.2012 um 20:45 schrieb brad dunbar:\n\n> You can also just patch `Backbone.history` and trigger whatever events you like.  For instance:\n> \n> ``` js\n> var loadUrl = Backbone.History.prototype.loadUrl;\n> Backbone.History.prototype.loadUrl = function() {\n>  if (!loadUrl.apply(this, arguments)) this.trigger('route-not-found');\n> };\n> ```\n\nGood point - thats probably what I do.\n\nStill I feel this functionality should be supported by the framework. Monkey-Patching is not the most reliable way to do this.\n\nRegards,\nMartin\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-16T12:13:30Z",
        "body": "You're right, altering `Backbone.History` is not ideal.  If `History` included `extend` then you could just use a custom history like the following.  The History API is rather stable and relying on it's behavior is a fine idea.\n\n``` js\nvar History = Backbone.History.extend({\n  loadUrl: function() {\n    var match = Backbone.History.prototype.loadUrl.apply(this, arguments);\n    if (!match) this.trigger('route-not-found');\n    return match;\n  }\n});\n(Backbone.history = new History).start(...);\n```\n\nI'll write up a patch for it.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2012-10-16T17:12:50Z",
        "body": "`Backbone.History.extend` was added in #1741.\n"
      }
    ]
  },
  {
    "number": 306,
    "title": "Nested Views",
    "created_at": "2011-04-04T16:20:55Z",
    "closed_at": "2011-04-05T09:17:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/306",
    "body": "I have a situation where one of my views is nested inside another. The relationship between the models is not nested. One of my views is a tr and the other view is a single td inside that tr.\n\nI cannot bind events to the td because they get consumed by the tr and as far as I know there is no option not consume the event with my handler.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/306/comments",
    "author": "linusnorton",
    "comments": [
      {
        "user": "juggy",
        "created_at": "2011-04-04T18:43:28Z",
        "body": "View events in backbone are the same as a jQuery event. So you can stop the propagation but you can let it continue if needed. Have a look at how to handle events in jQuery and you should be all good to go.\n"
      },
      {
        "user": "linusnorton",
        "created_at": "2011-04-05T09:17:42Z",
        "body": "I didn't realise it used the jQuery events - thanks.\n"
      }
    ]
  },
  {
    "number": 301,
    "title": "\"No element found\" when fetching no results",
    "created_at": "2011-04-01T03:01:22Z",
    "closed_at": "2011-04-18T18:19:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/301",
    "body": "I have a case that my server isn't returnng any results when the application is in the initial state without any entries in the DB.\n\nGET returns no response (empty array) and for strange reasons I can't understand from Firebug's stack trace this error message \"no element found\".\n\nProbably a null reference somewhere and Backbone can't cope with it?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/301/comments",
    "author": "binarykitchen",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-04-18T18:19:27Z",
        "body": "Dunno. I'm afraid I can't debug your app from that brief description of the problem. Turning on your browser debugger should let you get a full stacktrace of what exactly is going on.\n"
      }
    ]
  },
  {
    "number": 300,
    "title": "Support WebSocket",
    "created_at": "2011-04-01T01:04:37Z",
    "closed_at": "2011-04-18T18:21:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/300",
    "body": "With socket.io / node.js on the raise it could be a big plus to enhance Backbone with a light WebSocket adapter. Something similiar to the LocalStorage you have here.\n\nsocket.io contains too many code lines and slows down the app. So why not implement a light adapter straight for Backbone.sync() so that the handler in that adapter maps CRUD to WebSockets instead of REST to speeden up communication and to make Backbone more attractive for real time applications?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/300/comments",
    "author": "binarykitchen",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-04-18T18:20:51Z",
        "body": "WebSockets are great, and Backbone models should be well-equipped to work together smoothly with them. This isn't something that Backbone itself should have built-in, but an external plugin that integrates Backbone with a WebSockets solution like Socket.io.\n"
      }
    ]
  },
  {
    "number": 295,
    "title": "Display constructor name when logging out objects with console.log",
    "created_at": "2011-03-27T17:19:48Z",
    "closed_at": "2011-03-28T12:35:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/295",
    "body": "Currently (under chrome) console.log(<some backbone object>) displays the following\n\n_r.d_\n\nDebugging would be simplified if console.log(<some backbone object>) instead displayed\n\n_Backbone.View_\n\nOr appropriate subclass.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/295/comments",
    "author": "srobertson",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-03-28T12:35:07Z",
        "body": "Sounds like you're programming with the minified version ... not a great idea. In development, use the development version.\n"
      }
    ]
  },
  {
    "number": 292,
    "title": "how to unbind events when switching between views",
    "created_at": "2011-03-23T16:55:30Z",
    "closed_at": "2011-04-18T18:46:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/292",
    "body": "is there a way to unbind all event handlers added in a view?\n\nMy problem is that I've an app with separated views for index/show/edit. When I switch between these, the event bindings remain which causes several issues.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/292/comments",
    "author": "gr2m",
    "comments": [
      {
        "user": "jareware",
        "created_at": "2011-03-30T07:25:56Z",
        "body": "I've solved this issue by extending the \"remove\" method of the view, and making sure I call that method when I leave the view.  The view method simply uses \"unbind\" for all event handlers that \"initialize\" used \"bind\" on.  It's actually pretty straightforward and it'd be pretty hard to handle that with some magic provided by the framework, at least with the current event implementation.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2011-04-18T18:46:41Z",
        "body": "```\n$(view.el).unbind();\n```\n\n... should remove all DOM events on the view's element. If you're sharing a DOM element among multiple views, you'll have to use a more custom approach, as you're doing. \n"
      },
      {
        "user": "apaatsio",
        "created_at": "2011-09-28T08:54:09Z",
        "body": "I found this issue when searching a solution for a similar problem. Recently a new function called undelegateEvents was committed: ef40512d8441201e01f8d46c271fcf23235e9bc5 \n\nHTH\n"
      }
    ]
  },
  {
    "number": 283,
    "title": "Collection Parse",
    "created_at": "2011-03-20T15:13:24Z",
    "closed_at": "2011-03-21T13:38:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/283",
    "body": "I think that a collection parse operation should not be a no op.  The model already is a no op and if a parse is created for the model, then the collection should automatically take that into account instead of requiring the developer to also create a parse on the collection. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/283/comments",
    "author": "agad",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-03-21T13:37:58Z",
        "body": "I'm afraid this isn't possible with the current implementation of `Model#parse`. It's an instance method on a model, where you have no model to call it on ... and it also may take advantage of the model's internal state, which may or may not exist at the time.\n\nYou can implement _your_ `Collection#parse` function in terms of `Model#parse`, if you see fit to do so.\n"
      },
      {
        "user": "KidkArolis",
        "created_at": "2011-09-02T16:28:36Z",
        "body": "For example in collection do:\n\n```\nparse: function (notes) {\n  return _.map(notes, new this.model().parse);\n},\n```\n\n?\n"
      },
      {
        "user": "tedmeftah",
        "created_at": "2012-09-03T15:41:10Z",
        "body": "I know this is old but...\n@KidkArolis thanks for the suggestion, also you don't have to create a new  instance of the model, you can just use:\n\n``` javascript\nparse:function(response){\n    return _.map(response, this.model.prototype.parse);\n}\n```\n"
      }
    ]
  },
  {
    "number": 269,
    "title": "WebSQL backend (localStorage exists...)",
    "created_at": "2011-03-13T20:02:57Z",
    "closed_at": "2011-05-26T20:27:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/269",
    "body": "Hey,\n\nAnyone has implemented a WebSQL backend for Backbone?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/269/comments",
    "author": "superfeedr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T20:27:30Z",
        "body": "Apparently not. You might want to try the Backbone google group.\n"
      }
    ]
  },
  {
    "number": 266,
    "title": "problem with template in View",
    "created_at": "2011-03-08T00:07:16Z",
    "closed_at": "2011-05-26T20:28:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/266",
    "body": "Hello all,\n\nI have a strange error. In the view, template: _.template($('#item-template').html()), do not work. I get : \"Uncaught TypeError: undefined is not a function\" \n\nBut when I am using _.template($('#item-template').html()) in the initialize or render function, it's working.\n\nThank you for your help\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/266/comments",
    "author": "jeremymarc",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T20:28:24Z",
        "body": "Sounds like you're trying to access the DOM before it's been initialized.\n"
      }
    ]
  },
  {
    "number": 253,
    "title": "Empty Comparator Reverses Model Order In Collection",
    "created_at": "2011-03-01T06:34:21Z",
    "closed_at": "2011-05-26T21:06:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/253",
    "body": "When I have this in my Collection:\n\n,comparator: function(model){return;}\n\nThe order of my models reverses.  I would expect it to keep them in the order that they are inserted.  Is this a bug or am I just wrong in my expectations? \n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/253/comments",
    "author": "ibjhb",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-26T21:06:20Z",
        "body": "Considering that if all models return the same value for a comparator, their order would be undefined, I don't think is is particularly surprising. If you don't want to use a comparator, just don't pass one.\n"
      }
    ]
  },
  {
    "number": 252,
    "title": "Outdated backbone-min.js",
    "created_at": "2011-02-28T14:30:58Z",
    "closed_at": "2011-02-28T14:32:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/252",
    "body": "backbone-min.js from the repository is minified old version of the lib that doesn't match backbone.js. \n\nI've just spent 2 hours trying to figure out why it doesn't work the way it should because I was looking at backbone.js on github (as it's hard to analyze minified version ;-))\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/252/comments",
    "author": "ku1ik",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-02-28T14:32:27Z",
        "body": "`backbone-min.js` is only updated whenever there's a point release of Backbone.js. \n"
      }
    ]
  },
  {
    "number": 247,
    "title": "How to generally enable validation?",
    "created_at": "2011-02-26T09:42:47Z",
    "closed_at": "2011-05-27T14:01:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/247",
    "body": "Why do i need to enable validation for each `save()` call? I think validation should be enabled by default.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/247/comments",
    "author": "janpieper",
    "comments": [
      {
        "user": "juggy",
        "created_at": "2011-03-19T13:26:31Z",
        "body": "Define a validate function on your model. It will be called on each set call.\n"
      },
      {
        "user": "stimpy77",
        "created_at": "2013-01-21T23:35:23Z",
        "body": "Please reopen. As of I assume 0.9.10+, current behavior requires options param {validation: true} to be passed in to .set() even if the validate function is on the model. This makes it impossible to generally enable validation without redefining .set() itself. `if (!options.validate || !this.validate) return true;` cancels out validation.\n"
      }
    ]
  },
  {
    "number": 227,
    "title": "on update (PUT) - send only delta",
    "created_at": "2011-02-11T10:53:37Z",
    "closed_at": "2011-05-27T15:45:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/227",
    "body": "To my understanding, upon update the whole updated object is sent in the payload..\n\nTo avoid this I currently do something like this:\n\n<pre><code>\n$.extend(this.changed, this.changedAttributes());\n</code></pre>\n\n\nfor every \"changed\" event, and then:\n\n<pre><code>\nvar zinc = Backbone.sync;\nBackbone.sync = function(method, model) {\n    zinc(method, {}, {data: JSON.stringify(model.changed), url: model.url});\n};\n</code></pre>\n\n\nIs there some better way to handle this?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/227/comments",
    "author": "ayal",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-27T15:40:37Z",
        "body": "Yes, the Backbone default is to do the REST-ful thing, and PUT the complete representation of the resource up to the server. If you'd like to only send changed state by default, overriding `Backbone.sync` is the way to go.\n"
      }
    ]
  },
  {
    "number": 226,
    "title": "updating models based on nested JSON objects ",
    "created_at": "2011-02-11T10:38:05Z",
    "closed_at": "2011-05-27T15:46:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/226",
    "body": "consider this case:\n\n<pre><code>\nvar zomg = new Zomg({\n    id: 6, foo: {bar: 1, mat: {cat: 4}}\n});\n</code></pre>\n\n\nNow, say I want to change \"cat\" to be 5 without setting the WHOLE \"foo\" object..\n\nIs there some hacking that can be done to acheive this with the current version? I think something like the following wouldn't be too hard to implement:\n\n<pre><code>\nzomg.set({\n    \"foo.mat.cat\": 5\n});\n</code></pre>\n\n\ncould this be considrered?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/226/comments",
    "author": "ayal",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-05-27T15:46:54Z",
        "body": "I'm afraid not -- `\"foo.mat.cat\"` is a perfectly valid key for a JavaScript object.\n\nIf you want to have custom object comparison/traversal, you're going to have to write that logic.\n"
      }
    ]
  },
  {
    "number": 213,
    "title": "Mailing List",
    "created_at": "2011-02-04T16:58:06Z",
    "closed_at": "2011-02-04T17:07:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/213",
    "body": "Is there a mailing list out there which can be used for discussion on best practices or general advice or is the general consensus to use Githubs Issues system for discussion?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/213/comments",
    "author": "oschrenk",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-02-04T17:06:53Z",
        "body": "I'd like to stick with Github Issues for the time being -- I've had poor experiences in the past with Google Groups' spam control, etc.\n\nFeel free to ask questions here, or for instant discussion, ask in `#documentcloud` on IRC.\n"
      }
    ]
  },
  {
    "number": 208,
    "title": "question Behavior of self-propagating extend() function?",
    "created_at": "2011-02-01T18:50:21Z",
    "closed_at": "2011-02-06T22:05:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/208",
    "body": "Hi, I'm trying to make sense of the extend() and the internal inherits() function to see if it is possible to have another level of inheritance in the model layer. But I don't quite get the expected behavior for class methods:\n\n```\nA = Backbone.Model.extend({ }, {classMethod: function() { console.log('classMethod invoked') } });\nA.classMethod();  // \"classMethod invoked\"\n\nB = A.extend({question: \"Shouldn't B.classMethod() work?\"})\nB.classMethod()\nTypeError: Result of expression 'B.classMethod' [undefined] is not a function.\n```\n\nAm I misunderstanding how extend() is supposed to work once it's been propagated out of Backbone.Model into my own model (A)?\n\nThanks,\nGreger.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/208/comments",
    "author": "gregerolsson",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-02-06T14:05:07Z",
        "body": "JavaScript prototypes don't support inheritance for class-level properties ... only for instance-level properties. So, this is the expected behavior. \n\nWe could start manually copying class properties over, but that's a fragile thing to do. Calling `A.classMethod()` is the way to go, for now ... or using an instance method that doesn't care about \"this\" ... or using a different object entirely.\n"
      },
      {
        "user": "gregerolsson",
        "created_at": "2011-02-06T14:37:01Z",
        "body": "Yeah, I eventually understood why it didn't work as expected. I solved it using a class helper, augment(), that works similar to extend() but does not return a new constructor function. It introduces a new prototype though which is linked to the original so that I can override methods in the old prototype (class/constructor methods are just appended, thogh). It's a little hacky, but it works for us for now.\n\n```\naugment: function(protoProps, classProps) {\n  ctor = function() { };\n  ctor.prototype = this.prototype;\n  this.prototype = new ctor();\n  this.prototype.constructor = this;\n  this.prototype.__super__ = ctor.prototype;\n  if (protoProps) _.extend(this.prototype, protoProps);\n  if (classProps) _.extend(this, classProps);\n  return this;\n}\n```\n\nWe have some Rack middleware that automatically generates Backbone-models from all the ActiveRecord classes, with some support for I18N and validators, but we wanted to be able to extend those classes further in the application code. With the function above we can augment them with extra methods while still allowing us to call the original methods if we need overrides.\n"
      }
    ]
  },
  {
    "number": 192,
    "title": "question: backbone best practice for file upload?",
    "created_at": "2011-01-17T22:28:47Z",
    "closed_at": "2011-02-07T23:22:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/192",
    "body": "From the DocumentCloud website, it's clear that the DocumentCloud app includes file uploads. I'm curious how you guys handle this in the context of a backbone app. Do you use a jQuery plugin to abstract, pull in an iframe, force a page load, etc?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/192/comments",
    "author": "tonydewan",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-02-07T15:22:22Z",
        "body": "We actually use a (modified) version of a Flash uploader ... Uploadify, in order to get multiple document uploads in all browsers. It doesn't have much to do with Backbone ... except that the server's response creates a new document model, that then polls for updates. When document is ready, and the server responds with complete attributes, they're then `set()` on the document model, the view updates, and polling stops.\n"
      },
      {
        "user": "tchak",
        "created_at": "2011-02-07T17:03:05Z",
        "body": "In one of my projects, I do some uploading in my backoffice. Backoffice is targeting only modern browsers so I use xhr upload with FormData. I implemented a jquery 1.5 ajax transport to handle xhr uploads. I can directly set a model attribute with File object. This way it is working with default backbone sync :)\nPS: Juste for info, on server side I use rails with carierwave.\n"
      },
      {
        "user": "thiloplanz",
        "created_at": "2011-11-16T05:58:00Z",
        "body": "@tchak: \"I implemented a jquery 1.5 ajax transport to handle xhr uploads. I can directly set a model attribute with File object. This way it is working with default backbone sync \"\n\nDo you have any sample code for how to do that?\n"
      },
      {
        "user": "jasonm",
        "created_at": "2012-03-14T11:40:13Z",
        "body": "@thiloplanz @tchak Did you guys ever discuss the transport?  @tchak Was the xhr upload was a separate request (via formdata) from the backbone attribute request (via $.ajax with dataType: json, the Backbone.sync default), or did you serialize the model attributes into FormData too? \n"
      }
    ]
  },
  {
    "number": 177,
    "title": "options.success/error called multiple times",
    "created_at": "2011-01-09T03:58:18Z",
    "closed_at": "2011-02-08T00:19:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/177",
    "body": "Since `options` started to get passed by `trigger`, I fell into situations where `success/error` callbacks got called multiple times. Consider this case of cascading model fetches:\n    model.bind('change', function(options) {\n        anotherModel.fetch(options);\n    });\n    model.fetch({\n      success: function() {\n        console.log('Fetch model success!');\n      },\n      error: function() {\n        console.log('Fetch model Error.');\n      }\n    );\nBoth `model` and `anotherModel` will trigger the same success callback whereas only `model` should. The solution I implemented was to remove the `success` and `error` properties on the `options` object inside `fetch`:\n    fetch : function(options) {\n      options || (options = {});\n      var onsuccess = options.success; if (options.success) delete options.success;\n      var onerror = options.error; if (options.error) delete options.error;\n      var model = this;\n      var success = function(resp) {\n        if (!model.set(model.parse(resp), options)) return false;\n        if (onsuccess) onsuccess(model, resp);\n      };\n      var error = wrapError(onerror, model, options);\n      (this.sync || Backbone.sync)('read', this, success, error);\n      return this;\n    }\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/177/comments",
    "author": "martindrapeau",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-02-07T16:18:22Z",
        "body": "Yes -- if you share an options object, you're going to share callbacks ... I don't think there's any special behavior here that Backbone should be handling differently...\n"
      },
      {
        "user": "martindrapeau",
        "created_at": "2011-02-07T21:03:09Z",
        "body": "Case closed then.\n"
      }
    ]
  },
  {
    "number": 176,
    "title": "Undo a set() after a failed save()",
    "created_at": "2011-01-08T12:49:57Z",
    "closed_at": "2011-01-09T00:53:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/176",
    "body": "I'm just wondering what you guys think would be the best practice to undo a failed save.\n\nI understand that when saving a model backbone will use a set() and save() where validate() on the model gets called 2 times. First time before the save (which will succeed). Now let's say the server is unreachable or does not want to save the model for some reason and the model is not persisted.\nIt would result in an error but how can i roll my first set() which set the new data on the model back to the old version before the save?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/176/comments",
    "author": "smrchy",
    "comments": [
      {
        "user": "dvv",
        "created_at": "2011-01-08T16:48:01Z",
        "body": "I guess the only way is to call `.fetch` on that model.\n"
      },
      {
        "user": "smrchy",
        "created_at": "2011-01-08T16:53:36Z",
        "body": "Nevermind. Just found out about model.previousAttributes()  \n\nSorry. This can be closed i guess.\n"
      },
      {
        "user": "dvv",
        "created_at": "2011-01-08T16:57:18Z",
        "body": "That's right. However, be prepared that in multi-user environment `model.previousAttributes()` can become outdated.\n"
      }
    ]
  },
  {
    "number": 169,
    "title": "Adding different models to a collection",
    "created_at": "2011-01-05T10:16:07Z",
    "closed_at": "2011-01-05T22:43:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/169",
    "body": "Does it make sense to have a collection which includes models of different types? They all share a common \"interface\" so that collection can work with them (sorting etc).\n\nExample: I have a component on a page, which consists of sorted image or text elements (mixed together). The collection concept in Backbone seems to be a bit more single-model-specific.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/169/comments",
    "author": "ondrejhlavacek",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-01-05T14:42:50Z",
        "body": "Yes -- that should work perfectly fine, with a couple of caveats:\n- The models can't have conflicting ids.\n- You won't be able to use `Collection.create()` to make new instances.\n"
      },
      {
        "user": "ondrejhlavacek",
        "created_at": "2011-01-13T14:52:46Z",
        "body": "Conflicting IDs might be an issue. That means I should use an ID mapper or ID prefix. Thanks for your reply.\n"
      }
    ]
  },
  {
    "number": 165,
    "title": "View html instantiation and event binding",
    "created_at": "2011-01-03T23:10:04Z",
    "closed_at": "2012-01-24T16:18:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/165",
    "body": "My understanding is that Backbone needs to create and insert html generated from each view instance into the Dom to bind events to.  With my project, having thousands of models which each can be viewed with several different view instances, appending all that html into the dom as models are viewed could degrade performance.  What would be great is if there were some way to bind to the el element cached in the view instance, and then simply swap out the view instance into the Dom as needed with the render function.  Is something like this feasible or possible now?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/165/comments",
    "author": "gibsonf1",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-01-24T16:17:51Z",
        "body": "Yes, totally, and that's a large part of what Backbone is good for.\n\n```\nview.model = otherModel;\nview.render();\n```\n"
      }
    ]
  },
  {
    "number": 160,
    "title": "Can't get view events to bind",
    "created_at": "2010-12-31T03:53:25Z",
    "closed_at": "2010-12-31T20:16:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/160",
    "body": "I've been trying many different approaches, but I can't get the click function to bind.\n\nHere is the view I'm using:\n<code>\nsfProjectView = Backbone.View.extend({\n  el: $(\"#header-project\"),\n      events: {\n      \"click .click-project\": \"linkProject\"\n        },\n      linkProject: function() {\n      sfController.changeObject(currentTab(),this.model.sfAttrib(\"project\"));\n    },\n      superHtml: function() {\n      var supers = this.model.get(\"superprojects\");\n      var output = \"\";\n      if (supers) {\n         _.each(supers, function(super) {\n             output = output + \"<a href'#'>\" + sfObjects.get(super).get(\"name\") + \" > \" + \"</a>\";\n           });\n         return output;\n      } else {\n        return \"&nbsp;\";\n      }\n    },\n      initialize: function() {\n      _.bindAll(this, \"render\", \"linkProect\");\n      this.render();\n    },\n      render: function() {\n\n```\n  var project = this.model.sfGet(\"project\");\n  var projectActiveP = this.model.sfActive(\"project\");\n  var projectType = this.model.sfGet(\"projectType\");\n  var projectDom = \"#ajaxProject\";\n  var projectTypeDom = \"#projectType\";\n  var superProjectsDom = \"#superProjects\";\n  if (project) {\n    $(projectDom).text(project).css(\"display\",\"block\");\n    $(superProjectsDom).html(this.superHtml());\n    if (projectActiveP) {\n      $(projectDom).removeClass(\"inactive\");\n      $(projectDom).addClass(\"active\");\n      $(projectTypeDom + \" span:eq(1)\").html(\"\");\n    } else {\n      $(projectDom).removeClass(\"active\");\n      $(projectDom).addClass(\"inactive\");\n      $(projectTypeDom + \" span:eq(1)\").html(\"&nbsp;Project Complete\").addClass(\"green\");\n    }\n    if (projectType) {\n      $(projectTypeDom).css(\"display\",\"block\");\n      $(projectTypeDom + \" span:eq(0)\").text(\"Type:\");\n      $(projectTypeDom + \" a\").text(projectType);\n    }\n  } else {\n    $(this.id).css(\"display\",\"none\");\n  }\n  return this;\n}\n```\n\n</code>\nAny ideas greatly appreciated!\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/160/comments",
    "author": "gibsonf1",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-31T04:12:38Z",
        "body": "Are you sure that `#header-project` is actually a DOM element on the page at the time that the JS is first loaded?\n"
      },
      {
        "user": "gibsonf1",
        "created_at": "2010-12-31T07:42:32Z",
        "body": "Yes, I moved all the Backbone code after document ready at one point, and also tried with id, none of which worked.  I'm stumped.  What is going on conceptually in achieving the binding?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-31T12:16:33Z",
        "body": "What's going on is that you're replacing `this.el` with a new element manually -- probably something you don't want to be doing. Try removing the line:\n\n```\nel: $(\"#header-project\")\n```\n\nAnd adding this to the bottom of `initialize` instead, right before calling `this.render()`.\n\n```\n$(\"#header-project\").append(this.el);\n```\n"
      },
      {
        "user": "gibsonf1",
        "created_at": "2010-12-31T13:54:01Z",
        "body": "Wow, that almost did it.  Backbone made a new div subordinate to the selector with the event, but it was unclickable.  I changed it to this:\n <code>  \n initialize: function() {\n      _.bindAll(this, \"render\");\n      this.render();\n      $(\"#ajaxProject\").wrap(this.el);\n    },\n</code>\nUsing this wrap, I now have events!  I had to narrow the selector of the wrap to the element I wanted to have clicked only.  Is this new element strictly made for event rendering and the view displays itself regardless?\n\nThanks Jeremy!\n"
      }
    ]
  },
  {
    "number": 152,
    "title": "exceptional errors on the server",
    "created_at": "2010-12-19T00:37:14Z",
    "closed_at": "2010-12-21T01:24:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/152",
    "body": "I'm confused about how I should communicate exceptional events from the server back to models. For example, I don't have a client side validation for, say, uniqueEmail. However this does happen on the server...\n\nMy present solution is to set the email to NOT_UNIQUE and check for that string in my backbone user model. Is there a better way?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/152/comments",
    "author": "flippyhead",
    "comments": [
      {
        "user": "flippyhead",
        "created_at": "2010-12-19T00:38:02Z",
        "body": "What's more, if my responses tend to send back model attributes, how should I handle non model related errors but that I want to return in JSON, such as 404 or whatever else\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-20T17:24:03Z",
        "body": "When your server-side validation fails, return an appropriate non-200 HTTP code, like say, `400`, and the error message you'd like to send, which can be in a format of your choosing, text or JSON.\n\nIf you passed an `error` callback to the `.save()` call, it will be invoked, with the model and the response. If you didn't pass a callback, you'll get an `\"error\"` event triggered on the model, also passing the response as the second argument.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-20T17:32:29Z",
        "body": "I added a bit more explanation about this at SHA: e3aa5751ac3af91b0890d3b37b39512b0db0bb92\n"
      }
    ]
  },
  {
    "number": 144,
    "title": "Question: localstorage / server combination",
    "created_at": "2010-12-15T10:25:48Z",
    "closed_at": "2010-12-15T15:02:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/144",
    "body": "Hi,\n\nFor fast loading i'd like to store my collections via localstorage and request new items from the server (besides crud). What are some good possible solutions?\n\nI've used the localstorage module but it overrides syncing with the server. For fast loading syncing with a localstorage may be also overkill. Just a dump with when exiting the app to refresh the collection on next \"startup\" would be enough.\n\nOr is it possible to add 2 different collections or 2 sync methods on the same collection?\n\nPenny for your thoughts ;)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/144/comments",
    "author": "benvds",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-15T15:02:22Z",
        "body": "If I were you, I'd override `sync` with a \"smart\" function that knows whether to check LocalStorage, or make the ajax request. Just to throw some pseudocode out there:\n\n```\nBackbone.sync = function(method, model, options) {\n  if (model._checkedLocal) {\n    syncAjax(method, model, options);\n  } else {\n    attemptToSyncLocal(method, model, options);\n    model._checkedLocal = true;\n  }\n};\n```\n\nBackbone should give you the tools you need to make this work well ... it doesn't matter which side your data originates from; when it arrives, `model.set(attributes)`, and you're good to go.\n"
      }
    ]
  },
  {
    "number": 139,
    "title": "Destroying all models from a collection",
    "created_at": "2010-12-14T09:51:39Z",
    "closed_at": "2010-12-18T03:13:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/139",
    "body": "Not so obviously 'collection.invoke(\"destroy\")' does not work. How would one empty a collection?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/139/comments",
    "author": "luniki",
    "comments": [
      {
        "user": "martindrapeau",
        "created_at": "2010-12-14T14:06:42Z",
        "body": "I ended up extending both Model and Collection with methods for those. Here those are:\nMyModel = Backbone.Model.extend({\n    destroy : function(options) {\n        options || (options = {});\n        if (this.selected) this.unselect(options);\n        if (!options.silent) this.trigger('destroy', this, options);\n        if (this.collection) this.collection.remove(this, options);\n        return this;\n    }\n});\nMyCollection = Backbone.Collection.extend({\n    clear: function(options) {\n        options || (options = {});\n        while (this.length > 0) {\n            this.at(0).destroy(options);\n        }\n        if (!options.silent) this.trigger('clear', this, options);\n        return this;\n    }\n});\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-17T19:12:51Z",
        "body": "So, there are two things here. The first is destroying all the models in a collection on both the client _and the server_, and the second is simply removing all the models from a collection, client-side.\n\nThe reason why backbone doesn't have the former built-in is because it's not standard in basic REST, and we won't want to encourage folks to be submitting 100 individual HTTP requests, one to destroy each item. You should have a special endpoint to perform a bulk destroy, and then empty your collection client-side, which can be done like so:\n\n```\ncollection.refresh();\n```\n"
      },
      {
        "user": "martindrapeau",
        "created_at": "2010-12-26T13:28:40Z",
        "body": "What happens if you have code that watches a particular model? It would never know it got removed.\nWould be nice to have the event triggered but the REST call not made. Hence in my implementation the destroy/clear are not REST (no calls to server). I have specialized methods delete/deleteAll to do that. But each model does trigger the destroy event so watchers get notified. I'll admit I don't like my current implementation because it is not clean. So if server calls could be made optional, and events always triggered, I'd be happy.\n"
      },
      {
        "user": "jwogan5",
        "created_at": "2019-12-12T21:32:04Z",
        "body": "@martindrapeau \r\n\r\nI have been searching for a long time but I came across this and was wondering if you could send me your deleteAll method for a backbone collection.   Here is my issue.  I hit an api to get a list of items and I store them in a collection.  I then want to completely remove all items in the collection and refresh them with a nw list.  I can do that locally but when I call fetch on the collection all the items come back again as they are not removed from the server.  I can also do the whole removing one item at a time from the server but that can take 15 seconds to finish if I have about 200 items.  Preferably I want to both call refresh locally and one call to remove all items on the server to speed up the removal process.  Any help would be appreciated."
      }
    ]
  },
  {
    "number": 138,
    "title": "Can a collection hold different types of Models",
    "created_at": "2010-12-13T14:18:10Z",
    "closed_at": "2010-12-13T14:22:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/138",
    "body": "Or Models with different attributes?\n\nConsider a fictitious car hire application, which keeps track of a collection of vehicles that are hired out. There might be common attributes among the vehicles, but other parameters might be different therefor there could be models for Car, Van, Truck, Moped etc.. \n\nOr would another approach be better?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/138/comments",
    "author": "timc3",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-13T14:22:19Z",
        "body": "Certainly, a collection can hold different types of models, as well as models that have different sets of attributes defined. You should be able to listen for `\"change:attribute\"` events on any of the defined attributes.\n"
      }
    ]
  },
  {
    "number": 129,
    "title": "How can I access a collection from one of its models",
    "created_at": "2010-12-08T22:03:42Z",
    "closed_at": "2010-12-08T22:04:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/129",
    "body": "I defined some methods in my Backbone.Collection that need to be invoked from the contained models. How can I do this? Is there a `collection` property or something similar?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/129/comments",
    "author": "fbuchinger",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-08T22:04:23Z",
        "body": "Indeed there is. Try `model.collection`.\n"
      }
    ]
  },
  {
    "number": 126,
    "title": "Collection.create does not return a server response in the success callback",
    "created_at": "2010-12-08T08:15:03Z",
    "closed_at": "2010-12-08T22:23:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/126",
    "body": "After creating a new model (using 'create'), I want to assign an id to the model that corresponds to the id the server generated. Unfortunately there is currently a bug in the create function that removes the response from the model.save success callback.\n\nIt's easy to fix but is there a specific reason for doing this that I'm missing? Should server-generated id's be assigned to models in a different way?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/126/comments",
    "author": "dickbrouwer",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-08T14:23:20Z",
        "body": "There's a couple things here... `create` should not be throwing away the `success` callback.\n\n```\ncollection.create(attrs, {success: function(model, response){ ... }});\n```\n\nBut, also, if your server responds with a JSON representation of the model, all of the attributes you send down, including the `id`, should be set on the model for you. There's no need to use the `success` callback for this -- only for triggering some side-effect.\n"
      },
      {
        "user": "dickbrouwer",
        "created_at": "2010-12-11T08:35:40Z",
        "body": "Great - success response is preserved now.\n\nSorry, you're right about how to update the id. My server JSON response wasn't namespaced as 'model'. That works  beautifully now.\n\nThanks for the great work on Backbone!\n"
      }
    ]
  },
  {
    "number": 122,
    "title": "model.previous() example abuses scope in change event callback",
    "created_at": "2010-12-07T06:47:29Z",
    "closed_at": "2010-12-08T00:06:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/pull/122",
    "body": "The example uses `bill.previos(\"name\")` instead of `model.previous(\"name\")` in the `change` callback defined on `bill`.\n\nThe example works just fine, but the callback will not work if `bill` is redefined or lost from scope (pardon if I'm wrong, I'm not as intricately knowledgable in JS as I'd like).\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/122/comments",
    "author": "mtodd",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-07T16:06:13Z",
        "body": "Hey Matt.\n\nIn JavaScript, using either `model` or `bill` is fine here. `bill` is closed over by the anonymous function, and cannot be lost from its scope. I chose to use `bill` in this example because it's a slightly more descriptive word than `model`, but both are interchangeable.\n"
      },
      {
        "user": "mtodd",
        "created_at": "2010-12-08T04:23:50Z",
        "body": "My main concern, contrived though it was (ironic since this is all contrived API documentation, lol), was if `bill` was overwritten that it would break. But, as API documentation, it matters not :)\n"
      }
    ]
  },
  {
    "number": 108,
    "title": "View / rendering of a single item",
    "created_at": "2010-12-01T22:06:59Z",
    "closed_at": "2010-12-02T04:34:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/108",
    "body": "We currently have an application under development and are looking in backbone.js as a framework. So far everything has worked out fine - thanks for that great piece of software.\n\nNonetheless we stumbled upon a problem (Maybe it's not even an issue, but I did not know where exactly to post this). We have large sets of data coming from ajax request. We use Collection.add([ ]) to get this data into the collection and we use a View (Backbone.view.extend) to ultimately render a single item out of this collection appending this item to a DOM element using an application view (just like the todo example).\n\nWhat we want to accomplish is this kind of html code:\n\n```\n<div id=\"container\">\n    <input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\n    <input type=\"checkbox\" id=\"check2\" /><label for=\"check2\">text</label>\n    <input type=\"checkbox\" id=\"check3\" /><label for=\"check3\">text</label>\n</div>\n```\n\nEvery \"<input...\" represents an item, thus a model rendered by it's view. The view class though always binds to a single element (tagName) which is created within the view. So I currently don't see any way creating something \"<input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\" using the standard backbone functionality because backbone.view would use the tagname to create a new element which can be filled with content but would always wrap around this content. So backbone.view would create something like\n\n```\n<span>\n    <input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\n</span>\n```\n\nwhen using \"span\" as the tagname.\n\nIs there a way to create this kind of html code with backbone functionality, or is it necessary to write something custom to accomplish this?\n\nThanks in advance for your work & answer.\n- Exinferis\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/108/comments",
    "author": "exinferis",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-02T04:34:14Z",
        "body": "If I were you -- I wouldn't worry about the wrapper. It's good practice to have the view nested under a single node, so that it can be easily removed from the DOM, when the time comes. \n\nIf you really want to avoid having the view have an element, you can do it, but you'll have to avoid using methods that depend on `this.el` -- event binding, the scoped selector, and so on ... so I wouldn't recommend it.\n"
      }
    ]
  },
  {
    "number": 107,
    "title": "View id initialization",
    "created_at": "2010-12-01T20:30:14Z",
    "closed_at": "2010-12-03T02:31:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/107",
    "body": "As I understand it the .id, .className etc, need to be explicitly passed in to .extend, for .el to be correctly intialized with an id and so forth. \n\nSo to set the html id of .el correctly, you would do something like:\n\n```\nvar showView = new Show({\n    model: document,\n    id: document.id\n});\n```\n\nThe question is, can I circumvent this behavior so it is inferred from the model.id (or .cid)? The use case being every single one of my views requires an el.id to be set, and rather than having to re-add it in view.intiailize ala my current method:\n\n```\n$(this.el).attr('id', this.model.id);\n```\n\nOr, the uglier version:\n\n```\nvar Show = Backbone.View.extend({\n    initialize: function () {\n        this.el = false;\n        this.id = this.model.cid;\n        this._ensureElement();\n    }\n});\n```\n\nIs there a nicer (more centralized) way of handling this without having to add code to every view or directly patching backbone?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/107/comments",
    "author": "brendanhay",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-02T14:39:25Z",
        "body": "There isn't a more centralized way than the options you already laid out: either passing in the `id` as you create a new view, or setting it in `initialize` or `render`.\n\nThis may be a red herring, though. Part of the idea with Backbone is that most of your views maintain a reference to their model object, so it's not necessary to ever look up a model from an ID stored in the DOM. Very few of our model-backed views have \"id\" properties on their HTML element.\n\nIs there a specific patch, or way of auto-setting DOM ids, that you'd like to propose?\n"
      },
      {
        "user": "brendanhay",
        "created_at": "2010-12-02T18:31:15Z",
        "body": "It's not so much looking up the `id` from the model, or accessing the model via `id` outside the context of the view as giving the view's DOM element a random-but-meaningful `id` attribute (which in my case `cid`, original intention aside, fits perfectly).\n\nBut I could definitely be following a red herring .. I'll outline one of my recent scenarios; turning a `collection` into a jQuery UI sortable list. \nEach `model` in the `collection` has a `view`, whose `el` is a `<li/>`, which gets rendered/appended into the sortable and require an `id` to support the ordering, update etc. callbacks.\n\nMy problems almost certainly stem from trying to mix in legacy code (in this case lots of vanilla jQuery UI widgets and their respective events).\n\nI didn't have a specific patch in mind .. more of a conclusion that I was doing something wrong by having to manually assign `id` or curry `Backbone.extend`.\n\nCheers for the help,\nB\n"
      }
    ]
  },
  {
    "number": 95,
    "title": "Fix and test for Backbone.sync DELETE dataType",
    "created_at": "2010-11-24T23:22:54Z",
    "closed_at": "2010-12-02T17:15:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/pull/95",
    "body": "When calling `Backbone.sync` with a DELETE request the dataType is set to json. If the server does not return a json response for the delete action then the error callback will be fired (instead of success) and `collection.remove` will not be fired.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/95/comments",
    "author": "mkelly12",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-11-27T17:46:40Z",
        "body": "Thanks for the patch. Before merging it, I have a question:\n\nIt seems like there are plenty of valid reasons to return out-of-band JSON data in the response to a `DELETE` request. Something like this, for example:\n\n```\n\"affected_models\": [13, 27, 109]\n```\n\nDoesn't this change prevent any data from being sent down as a consequence of the delete?\n"
      },
      {
        "user": "mkelly12",
        "created_at": "2010-12-02T17:15:30Z",
        "body": "Yeah, I think you're right. It was a tricky bug to track down, but ultimately my fault.\n"
      }
    ]
  },
  {
    "number": 91,
    "title": "TypeError: Result of expression 'list[i]' [undefined] is not an object.",
    "created_at": "2010-11-23T20:22:19Z",
    "closed_at": "2010-11-23T22:13:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/91",
    "body": "Using backbone with jquery mobile I've come up against this bug when calling model#save.\n\n```\nTypeError: Result of expression 'list[i]' [undefined] is not an object.\nBackbone.js:102\n```\n\nThe bug is in `trigger`. I've fixed it like so:\n\n```\nif (list = calls['all']) {\n  for (i = 0, l = list.length; i < l; i++) {\n    if(list[i]){\n      list[i].apply(this, arguments);\n    }\n  }\n}\n```\n\nIs this something that needs to be fixed in backbone or is jquery messing up the arrays somehow? I'm not using prototype.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/91/comments",
    "author": "bnolan",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-11-23T20:28:36Z",
        "body": "When callbacks are removed, using `unbind`, the array should be correctly spliced -- you shouldn't need this extra check. Do you mind doing a bit more logging to figure out what the current state of `list` is, how many elements it thinks it has, and why the callback was removed?\n"
      },
      {
        "user": "bnolan",
        "created_at": "2010-11-23T21:39:03Z",
        "body": "Well that's weird - `Venues.first()._callbacks['all']` is set to `[undefined]` from the first page load. Any ideas?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-23T22:13:17Z",
        "body": "We got this sorted out in `#documentcloud` ... overriding a constructor without calling `super()` ... Closing the ticket...\n"
      }
    ]
  },
  {
    "number": 90,
    "title": "Access a collection from a model",
    "created_at": "2010-11-23T19:36:47Z",
    "closed_at": "2010-11-24T04:24:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/90",
    "body": "I need to access a collection from a model, and I get an error\n\nRelevant code:\n\n```\n$( function() {\n    var namespace = window;\n\n    namespace.Move = Backbone.Model.extend({\n        markable: function(){\n            var below = namespace.Moves.find(function(move) { // <= HERE !!!\n                return move.get(\"i\") === that.get('i')-1;\n            });\n            if(below !== undefined && !below.isNew()) return true;\n            return false;\n        }\n    });\n\n    namespace.Moves = Backbone.Collection.extend({\n        model: Move,\n        localStorage: new Store(\"moves\")\n    });\n});\n```\n\nStack trace (chromium):\n\n```\nUncaught TypeError: Object function (){return a.apply(this,arguments)} has no method 'find'\nj.c.each.c.forEach:9292/javascripts/vendor/underscore-min.js:9\nnamespace.RowView.Backbone.View.extend.render:9292/javascripts/views.js:30\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.add:9292/javascripts/views.js:72\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.render:9292/javascripts/views.js:66\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.initialize:9292/javascripts/views.js:60\ne.View:9292/javascripts/vendor/backbone-min.js:22\nr.d:9292/javascripts/vendor/backbone-min.js:26\n(anonymous function):9292/javascripts/views.js:77\nc.extend.ready:9292/javascripts/vendor/jquery-1.4.2.min.js:26\nL\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/90/comments",
    "author": "clyfe",
    "comments": [
      {
        "user": "clyfe",
        "created_at": "2010-11-23T19:51:07Z",
        "body": "Note that Model#markable gets called from an `_.template()` via `this.model.markable()`\n\n```\nnamespace.MoveView = Backbone.View.extend({\n    tagName:  \"td\",\n    template: _.template($('#move-template').html()),\n    initialize: function() {\n        _.bindAll(this, \"render\");\n    },\n    render: function() {\n        $(this.el).html(this.template(this.model.toJSON()));\n        return this;\n    }\n});\n\n\n<script type=\"text/html\" id=\"move-template\">\n\n    <%= console.log(this.model.cid) %>\n    <%= console.log(this.model.markable()) %>\n\n  <div\n    id=\"square-<%= i %>-<%= j %>\"\n    class=\"square square-row-<%= i %> square-column-<%= j %>\"\n    ><%= mark %></div>\n\n</script>\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-23T20:24:16Z",
        "body": "Looks like `Moves` doesn't actually have a `find` method defined. Right? Are you looking for `detect`?\n"
      },
      {
        "user": "clyfe",
        "created_at": "2010-11-24T09:41:51Z",
        "body": "Changing `find` with `detect` doesn't work either\n\n```\nUncaught TypeError: Object function (){return a.apply(this,arguments)} has no method 'detect'\n```\n\nThe thing is either the `namespace.Moves` from inside `Move#markable` is not the same with the later-on-defined `namespace.Moves`, in witch case this seems like a \"chicken and egg\" issue, either `namespace.Moves` is hidden behind some proxy function somewhere...\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-24T13:14:19Z",
        "body": "Oh, of course. `namespace.Moves` is the collection class (the constructor function) -- not an instance of the collection. If you'd like to make an instance of it, you'll need:\n\n```\nnew namespace.Moves\n```\n"
      },
      {
        "user": "clyfe",
        "created_at": "2010-11-24T15:31:34Z",
        "body": "Indeed that is the issue, basic mistake. Thank you. \n"
      }
    ]
  },
  {
    "number": 88,
    "title": "Changing view initialization flow (pt. 2)",
    "created_at": "2010-11-22T20:29:01Z",
    "closed_at": "2010-12-08T19:46:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/88",
    "body": "Hi Jeremy,\n\nHere is simplified example of what I want to achieve. I want to create view only if it is needed and create root element for it only if view is instantiated. Basically I want to have my markup as clean as possible and hold all View related things in on place (all related code in its class and <i>all</i> markup in template). Sure I can create element for a view before creating instance of view but it would be interesting to have all view related things encapsulated in a View's class. \n\nAlso I don't want to have View.el be set to body in this example because I want to keep container element as narrow as possible.\n\n(This is really simplified example in real application I render template instead of creating elements on the fly)\n\n```\nTestView = Backbone.View.extend({\n    el: \"#home\",\n\n    events: {\n        \"click #test\" : \"test\"\n    },\n\n    test: function() {\n        alert(\"test\");\n    },\n\n    initialize: function() {\n        container = $(\"<div/>\").attr(\"id\", \"home\").appendTo(\"body\");\n        $(\"<a/>\").attr(\"id\", \"test\").attr(\"href\", \"#\").text(\"test\").appendTo(container);\n    }\n})\n```\n\nTo achieve this behavior it is needed to call both _ensureElement() and delegateEvents() after calling initialize method. _ensureElement could be called before initialize but in such case it will create useless element. What do you think about controlling this flow using options hash?\n\nI fully understand that moving _ensureElement call after initialize is a bad idea because current applications could rely on existence of element in initialize method, but I just want to share me experience of using Backbone and maybe give you some ideas on its gotchas in using in real environments. \n\nIn my application I've worked around this issue by having my own base class for a views that extends Backbone.View and using events hash with different name that is called and processed after calling descendant initialize method.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/88/comments",
    "author": "iafonov",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-08T19:46:21Z",
        "body": "Thanks for the feedback here, but for default backbone, I think we're going to keep the `this.el` pattern as it is. It's _awfully_ convenient for a view to have an element at all times, so that it can render regardless of if it happens to be in the DOM or not...\n"
      }
    ]
  },
  {
    "number": 86,
    "title": "Changing view initialization flow",
    "created_at": "2010-11-20T21:26:44Z",
    "closed_at": "2010-11-22T19:31:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/pull/86",
    "body": "Hi,\n\nI faced the situation when I want to create view's content in initialize method (for example render template) and put it into the element. The problem is that delegateEvents call is called before initialize method and view's events will not be bound. \n\nTo make this a little bit more clearer lets take Todo demo application as example suppose I don't want to have Todo list and its new Todo form controls markup to be statically built into page but want to create it conditionally if the whole AppView is initialized. In this case in current backbone implementation events for creating new Todo will not be bound.\n\nPlease let me know if I'm doing something wrong.\n\nP.S: Tests are passing without changes and demo Todo application is working fine.\n\nThanks,\nIgor\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/86/comments",
    "author": "iafonov",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-11-22T19:31:27Z",
        "body": "Hi Igor. \n\nBecause `delegateEvents` uses JS event delegation, it shouldn't matter if you populate the contents of your view before or after you render its contents. In fact, the purpose of delegating is that you can continue to change the DOM inside of your view at will, without having to rebind the events... If something was going wrong for you that caused the view's events to not be hooked up, that sounds like a separate issue.\n"
      }
    ]
  },
  {
    "number": 66,
    "title": "Model validate() is not called properly",
    "created_at": "2010-11-09T21:07:59Z",
    "closed_at": "2011-10-29T17:49:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/66",
    "body": "I was playing with the example called 'Todos' from the wiki and wanted to add a validate method to it. I added the following:\n`\n    validate: function(att) {\n        if(att.content.length < 4) {\n            return \"TOO SHORT TODO\";\n        }\n    }\n`\n\nBut this did not work. The function would be called twice. Once with the expected object {content, order, done} but then once where the object had a simple key called **proto** containing a lot of garbage.\n\nI can't seem to find any way to actually get the vaildate function to work.\n\nI modified the Todos code minimanlly to add this validate method and we must assume that the example is coded correctly, so I can only assume that there is a bug in Backbone.js\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/66/comments",
    "author": "Ralle",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-11-09T21:46:23Z",
        "body": "This is actually working correctly...\n\nWhen you call `save()` on a Model, the default implementation of Backbone with trigger two calls to `set()` (and thus, two calls to `validate()`) ... once on the client-side, before the model is sent to the server, and once again when the server responds with new attributes to be updated on the client.\n\nTaking the Todo list as an example: If you toggle the checkbox on a todo item, you'll first get a call to `validate()` with just the `{done: true}` change to the attributes. Once LocalStorage has finished saving the model, you'll get another call to `validate()`, this time including the `id` (generated by the localstorage plugin), as well as the `order`.\n"
      },
      {
        "user": "Ralle",
        "created_at": "2010-11-09T23:48:07Z",
        "body": "So how would you change my validate to make it work?\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-09T23:59:17Z",
        "body": "Something like this...\n\n```\nvalidate: function(attrs) {\n  if (\"content\" in attrs && attrs.content.length < 4) {\n    return \"Content is too short\";\n  }\n}\n```\n\nAnd then:\n\n```\nvar todo = new Todo();\ntodo.bind('error', function(err) { ... });\n\ntodo.set({content: \"\"});\n```\n"
      },
      {
        "user": "Ralle",
        "created_at": "2010-11-12T19:59:51Z",
        "body": "Well it still gets added even if it fails on the validation. I honestly see no value in the validate method when it works this way. I get new todo's without content even though the validate works as you said.\n"
      },
      {
        "user": "beseku",
        "created_at": "2010-11-23T07:00:06Z",
        "body": "I don't know if this is related, and will happily move this to a new issue ...\n\nI found that calling the Collection.create method results in the validation being called with an empty attributes object, but creating a new model and then running the save method on that model triggers the validation correctly. Is the create method passing the attributes correctly to the model?\n\n```\nvar item = new Pmm.ItemModel();\nitem.save({\n    'name': this.$('input[name=\"name\"]').val(),\n    'date-start': this.$('input[name=\"date-start\"]').val(),\n    'date-until': this.$('input[name=\"date-until\"]').val()\n}, {error: this.onError, success: this.onSuccess});\n```\n\nReturns attributes in the validation method ... \n\n```\nPmm.items.create({\n    'name': this.$('input[name=\"name\"]').val(),\n    'date-start': this.$('input[name=\"date-start\"]').val(),\n    'date-until': this.$('input[name=\"date-until\"]').val()\n}, {error: this.onError, success: this.onSuccess});\n```\n\nReturns an empty attributes object in the model's validate method.\n"
      },
      {
        "user": "Ralle",
        "created_at": "2010-11-23T17:18:13Z",
        "body": "beseku.\n\nDoes the thing you said still not append something useless to the view as you create an instance of the object?\n"
      },
      {
        "user": "beseku",
        "created_at": "2010-11-24T02:29:27Z",
        "body": "Nope, it seems to work fine...\n"
      },
      {
        "user": "dermatthias",
        "created_at": "2011-02-25T22:23:03Z",
        "body": "Are there any news on this issue? I also tried to use the validate() function and can't really get my head around this. It get's called twice, which is somehow understandably explained by jashkenas, but I still can't see a good reason for this behavior. \n\nBut besides this, keep up the good work on backbone. I really enjoy working with it.\n"
      },
      {
        "user": "supasympa",
        "created_at": "2011-03-27T01:41:45Z",
        "body": "Hi I'm having a problem similar with the create method.\nI expected the following to work:\n\n```\n  this.collection.create(newModel);\n    {\n      success:function() {\n        this.collection.view.trigger(\"tripList:change\")\n      },\n      error:function() {\n```\n\n//            //TODO - implement somethign better?\n          }\n        });\n\nbut end up having to do this as the callback 'success' never seems to get called. \n      //HACK\n      //TODO - this is a hack - I don't know how to do this right now!\n      var that = this;\n      this.collection.fetch({\n        success:function() {\n          that.collection.view.trigger(\"tripList:change\")\n        },\n        error:function() {\n          //TODO - implement somethign better?\n          alert('failed to load collection');\n        }\n      });\n\nHaven't looked into it further than just implement the second bit of code. Is this the expected behaviour?\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2011-08-17T21:27:57Z",
        "body": "I looked into the issue regarding validate not working correctly in the Todo's demo.  This is what I tried and what worked for me:\n\nSaving a 4 letter word:\n\n``` javascript\nwindow.Todo.prototype.validate = function(attrs) {\n  console.log(attrs);\n}\n\nObject\ncontent: \"test\"\ndone: false\norder: 1\n__proto__: Object\n\nObject\ncontent: \"test\"\ndone: false\nid: \"77c6f96e-71ae-0d12-bc83-091ac601cb8b\"\norder: 1\n__proto__: Object\n```\n\nI then modify the code slightly:\n\n``` javascript\nwindow.Todo.prototype.validate = function(attrs) {\n  if (attrs.content.length < 4) {\n    return 'Todo is too short, need > 4 characters';\n  }\n};\n\nwindow.Todo.prototype.initialize = function() {\n  var _init = window.Todo.prototype.initialize;\n\n  return function() {\n    this.bind('error', function(model, msg) {\n      console.log(msg);\n    });\n  };\n}();\n```\n\nwith the expected result `Todo is too short, need > 4 characters` in my console and the item not added.\n"
      },
      {
        "user": "tbranyen",
        "created_at": "2011-10-29T17:49:18Z",
        "body": "Please reopen if you have further questions.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-01-23T23:19:27Z",
        "body": "This should now be overhauled on master. Validations will get the complete new state instead of just the delta: ab164c450da4d5c883d5b2b2817fa6a416a4b55a\n"
      }
    ]
  },
  {
    "number": 58,
    "title": "Can't update model from within a change callback",
    "created_at": "2010-11-05T15:37:20Z",
    "closed_at": "2010-11-06T02:58:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/58",
    "body": "I'm trying to figure out how to act on a changed select dropdown. My view renders multiple select controls and changing each one might trigger a change in subsequent ones (think \"Country\" -> \"City\" select sequence).\n\nProblem is, according to \"cautionary notes\" in the docs, \"change\", \"submit\", and \"reset\" events do not bubble in current versions of Internet Explorer. Which means I can't use the view's event delegation, I suppose.\n\nSo, I tried attaching my change handler directly to the select element:\n\n```\n.change(function(e) { currentView.model.set({selectedAttribute: $(this).val()}); })\n```\n\nThis doesn't work, because I end up in a render function that has \"this\" set to the model (?), not the view. The call stack is:\n\nmy view's render function (this is where I end up)\nbackbone.js:92\nbackbone.js:291\nbackbone.js:168\nmy .change() function\n\nSo it seems that changing the model triggers an immediate re-rendering of the view (which is fine), but I end up with this.model being undefined, because this points to my model.\n\nI'm surely doing something wrong, but any pointers appreciated.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/58/comments",
    "author": "jwr",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-11-05T19:58:20Z",
        "body": "Give this a try:\n\n```\n.change(function(e) { \n  currentView.model.set({selectedAttribute: $(e.target).val()}); \n})\n```\n"
      },
      {
        "user": "jwr",
        "created_at": "2010-11-05T20:18:38Z",
        "body": "No, that doesn't change anything.\n\nPerhaps I haven't explained precisely what happens. What I get is:\n\"TypeError: Result of expression 'this.model' [undefined] is not an object.\"\n\nin my render function. Same view that has the select control and that defines the change() event handler.\n\nFrom what I understand, the change event fires for the select control, which causes the model to get updated, which causes the model's change event to fire, which causes the view's render function to get called. This is all fine. What I don't understand is why this.model is undefined within the render function. It is only undefined if render is triggered by the change event.\n\nPerhaps I'm doing something really stupid — but I can't figure out another way to have select controls that update the model (which should cause the view to change).\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-05T20:24:37Z",
        "body": "Ahh, I'm sorry. Try adding this line to your `initialize` function (which will bind `render` to the current instance).\n\n```\n_.bindAll(this, 'render');\n```\n\nYou can add any other functions to that call, to ensure that their `this` is preserved. Take a look at the docs on Underscore's `bindAll` for the details.\n"
      },
      {
        "user": "jwr",
        "created_at": "2010-11-05T20:40:46Z",
        "body": "Ah, that seems to do the trick. I will do this from now on. I don't understand how the render method can be useful to people without this, though — I thought most people would eventually see render() called from within an event handler.\n\nMany thanks for your help and for the great code you share!\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-11-05T20:45:46Z",
        "body": "It depends on how you call it from within the event handler. If you're calling it like this:\n\n```\nbind(\"event\", model.render);\n```\n\n... you'll have to bind it in advance. If you're calling it like this:\n\n```\nbind(\"event\", function(){ model.render(); });\n```\n\n... you'll have no such problem.\n"
      }
    ]
  },
  {
    "number": 40,
    "title": "Relations between models",
    "created_at": "2010-10-28T15:44:12Z",
    "closed_at": "2010-11-29T18:37:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/40",
    "body": "How can I specify relations between models and query them? Take a simple tagging application as an example: you have one model representing your main entity (source code snippet, photo, comment etc) and one model representing a tag.\n\nHow can I query all main entities that have a certain tag assigned? Or all entities without tag?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/40/comments",
    "author": "fbuchinger",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-10-28T16:24:02Z",
        "body": "Querying logic is part of the interface with your application -- there are a number of ways you can handle it:\n- Change the `url()` that the Collection returns to include your current search query. The next time you `fetch()` it's models, they'll be replaced by models that match the current search. This is useful for collections that contain search results.\n- Just run your regular jQuery Ajax call, and `refresh` the collection with the results. This can happen in a method that you add to your collection, like `fetchForTag`...\n  \n  ```\n  $.getJSON('/photos/tagged/china.json', {}, function(response) {\n    Photos.refresh(response);\n  });\n  ```\n- If you want to include tags nested in the same response as the photos, you can have your model pull them out, and turn them into Tag objects of their own...\n  \n  ```\n  extractTags : function() {\n    this.tags.refresh(this.get('tags'));\n  }\n  ```\n\n... just some thoughts.\n"
      }
    ]
  },
  {
    "number": 32,
    "title": "Is there a specific reason why filter/map/reject/etc don't return new Collections?",
    "created_at": "2010-10-19T19:53:46Z",
    "closed_at": "2010-10-20T03:01:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/32",
    "body": "I would expect those methods to return new Collections, because generally when you map over something, you return a new type of that same something. For example, I would expect `stillAlive` to be a collection:\n\n```\nvar coll = new MyCollection([foo, bar, baz, quux]);\nvar stillAlive = coll.filter(function (o) { return o.get(\"HP\") > 0; });\n```\n\nIs this by design?\n\nAside: I really wish Github would make mailing lists or forums for projects, so that these types of issues wouldn't clog up the issues page...\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/32/comments",
    "author": "fitzgen",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-10-19T20:00:58Z",
        "body": "I figured that because the series of Underscore functions can return different types of things, it was more useful to return the naked array of filter'd, or reject'd models. And actually, those are the only methods that it would make sense to return a collection for. If you map a collection of Books:\n\n```\nvar titles = Books.map(function(book){ return book.get('title'); });\n```\n\nYou expect an array of strings, not a collection of models containing a single attribute.\n\nAnd finally, the Collection's constructor function might have some sort of important side effect or Ajax call it performs -- we can't just call it willy-nilly.\n"
      },
      {
        "user": "fitzgen",
        "created_at": "2010-10-19T20:03:06Z",
        "body": "Makes perfect sense; clears up a lot, thanks!\n"
      }
    ]
  },
  {
    "number": 22,
    "title": "App specific base classes",
    "created_at": "2010-10-18T19:21:49Z",
    "closed_at": "2010-10-19T02:29:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/22",
    "body": "This question/problem is probably due to my complete deficiency in Javascript skills, but hopefully you will know the answer :) I want to create a base Model, that sets up the conventions for my application, and then create individual models from that base that simply overrides where needed. If I do this:\n\napp.view.MyBase = Backbone.Model.extend({ ..});\n\nWhat I want to do is this:\n\napp.view.NewModel = app.view.MyBase.extend({...});\n\nBut I get an error that .extend isn't a method on app.view.MyBase. Is there a simple way to achieve what I'm after? Thanks for your time. \n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/22/comments",
    "author": "PlasticLizard",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-10-18T19:29:21Z",
        "body": "Because Backbone properly sets up the prototype chain, you should be able to extend subclasses of Model, View, and Collection as far as you see fit. If this isn't working, something screwy is going on. For example:\n\n```\nvar Base = Backbone.Model.extend({a: 1});\nvar Sub = Base.extend({});\nalert((new Sub).a);  // alerts \"1\".\n```\n\nHope that helps -- check for typos in your code.\n"
      },
      {
        "user": "PlasticLizard",
        "created_at": "2010-10-18T21:31:01Z",
        "body": "Yep, I had a bug. Very sorry for the interruption, and thanks for the fast response!\n"
      }
    ]
  },
  {
    "number": 21,
    "title": "Should models have direct access to views?",
    "created_at": "2010-10-18T08:54:54Z",
    "closed_at": "2010-10-20T20:23:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/backbone/issues/21",
    "body": "I'd like to see more separation between the application layers. From looking through the documentation it seems like models can directly access views and even insert content. The problem with this is that if you want to swap out view components you will also need to make changes to the model code. IMO models should know as little as possible about the rest of the system and changes should occur solely through events dispatched when data is changed.\n\nP.S. I haven't had much chance to seriously investigate the framework so these thoughts are based on reading the documentation and my initial discoveries when creating a couple of extremely simple hello world apps. Very possible I'm just misunderstanding something...\n",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/21/comments",
    "author": "rlayte",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-10-18T12:48:14Z",
        "body": "It's entirely up to you, how much you'd like to have your model and view layers connected (or disconnected). Models have no reference to any specific view by default, although you can certainly pass them one should you choose to.\n\nAt one end of the extreme, you can have models and views separated entirely, with a controller creating a data object for the view to render from...\n\n```\n// Inside a controller.\n\nvar data = {\n  title: model.get(\"title\"),\n  author: model.authorFullName()\n};\n\nview.render(data);\n```\n\nOr you can have a model reference a view, if it corresponds one-to-one with it.\n\n```\nvar RowModel = BackBone.Model.extend({\n  initialize: function() {\n    this.view = new RowView({model: this});\n  }\n});\n```\n\nBackbone tries to provide a minimal set of ground-level functionality, while being as undogmatic as possible, with respect to how you structure your client-side code. \n"
      },
      {
        "user": "rlayte",
        "created_at": "2010-10-18T13:10:16Z",
        "body": "I agree that frameworks shouldn't completely prescribe how you structure your code, but I think the whole point of them is to do that to some extent. What I like about application frameworks (instead of using a custom MVC implementation) is that they provide a common structure between applications allowing developers to quickly get up to speed on projects.\n\nAs you mention in another ticket, MVC is very vague and implementations vary wildly. However, the key concept of the 'pattern' is to decouple code and allow for a more modular approach to development. Creating concrete references to views inside the model layer makes this extremely difficult and IMO should be at least discouraged by the framework's architecture.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-10-18T13:15:35Z",
        "body": "I agree -- for me, the most frequent pattern is one-to-many between a model and its views, in most cases. Often a model will be rendered (or partially represented) in many different pieces of UI. The model knows nothing about this, but the views naturally contain references to the model that serves as their data source.\n\nIs there any particular piece of the documentation that you'd like to see changed or clarified to make this point more clear? \n"
      }
    ]
  }
]