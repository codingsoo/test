[
  {
    "number": 3527,
    "title": "Cannot find module 'preact/hooks' or its corresponding type declarations.",
    "created_at": "2022-04-28T11:58:52Z",
    "closed_at": "2022-04-28T12:44:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/3527",
    "body": "- [ x] Check if updating to the latest Preact version resolves the issue\r\n\r\n**Describe the bug**\r\nI can't import `useEffect` from `preact/hooks`:\r\n\r\n```\r\nimport { useEffect } from 'preact/hooks';\r\n```\r\n\r\nThe error is as follows:\r\n```\r\nCannot find module 'preact/hooks' or its corresponding type declarations.\r\n```\r\n**To Reproduce**\r\n\r\nI created a preact project with TypeScript and webpack and the following configurations:\r\n\r\n```\r\n/** package.json */\r\n{\r\n    \"name\": \"whatever\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"Preact widget for whatever\",\r\n    \"main\": \"index.js\",\r\n    \"module\": \"dist/bundle.js\",\r\n    \"private\": true,\r\n    \"scripts\": {\r\n        \"build\": \"webpack\",\r\n        \"test\": \"testcafe all tests/testcafe\"\r\n    },\r\n    \"author\": \"Gerard\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n        \"@babel/cli\": \"^7.17.3\",\r\n        \"@babel/core\": \"^7.17.5\",\r\n        \"@babel/plugin-transform-react-jsx\": \"^7.17.3\",\r\n        \"@babel/preset-env\": \"^7.16.11\",\r\n        \"@babel/preset-react\": \"^7.16.7\",\r\n        \"@babel/preset-typescript\": \"^7.16.7\",\r\n        \"babel-loader\": \"^8.2.5\",\r\n        \"core-js\": \"^3.22.2\",\r\n        \"css-loader\": \"^6.7.1\",\r\n        \"file-loader\": \"^6.2.0\",\r\n        \"jest\": \"^28.0.2\",\r\n        \"regenerator-runtime\": \"^0.13.9\",\r\n        \"style-loader\": \"^3.3.1\",\r\n        \"testcafe\": \"^1.18.6\",\r\n        \"typescript\": \"^4.6.3\",\r\n        \"webpack-cli\": \"^4.9.2\"\r\n    },\r\n    \"dependencies\": {\r\n        \"preact\": \"^8.5.3\",\r\n        \"ts-loader\": \"^9.2.8\",\r\n        \"webpack\": \"^5.72.0\"\r\n    },\r\n    \"babel\": {\r\n        \"inputSourceMap\": true,\r\n        \"sourceMap\": true,\r\n        \"ignore\": [\r\n            \"node_modules\"\r\n        ],\r\n        \"presets\": [\r\n            [\r\n                \"@babel/env\",\r\n                {\r\n                    \"debug\": true,\r\n                    \"loose\": true,\r\n                    \"modules\": false,\r\n                    \"useBuiltIns\": \"usage\"\r\n                }\r\n            ]\r\n        ],\r\n        \"plugins\": []\r\n    },\r\n    \"browserslist\": [\r\n        \"Chrome 68\",\r\n        \"Edge 17\",\r\n        \"Explorer 11\",\r\n        \"Firefox 61\",\r\n        \"iOS 11\",\r\n        \"Safari 11\"\r\n    ]\r\n}\r\n\r\n```\r\n\r\n```\r\n/** tsconfig.json */\r\n{\r\n    \"compilerOptions\": {\r\n        \"removeComments\": true,\r\n        \"sourceMap\": true,\r\n        \"noUnusedLocals\": true,\r\n        \"noUnusedParameters\": true,\r\n        \"noImplicitReturns\": true,\r\n        \"noFallthroughCasesInSwitch\": true,\r\n        \"module\": \"commonjs\",\r\n        \"jsx\": \"react\",\r\n        \"jsxFactory\": \"h\",\r\n        \"target\": \"es5\",\r\n        \"lib\": [\"DOM\", \"ES5\", \"ES2015.Promise\"]\r\n    },\r\n    \"include\": [\"src/*.ts\", \"src/*.tsx\", \"src/shared/custom.d.ts\"],\r\n    \"exclude\": [\"./node_modules\"]\r\n}\r\n```\r\n\r\n```\r\n/** webpack.config.js */\r\nmodule.exports = {\r\n  mode: 'production',\r\n  devtool: 'source-map',\r\n  entry: ['./src/index'],\r\n  output: {\r\n    path: __dirname + \"/dist/\",\r\n    filename: `whatever.iife.js`,\r\n    iife: true\r\n  },\r\n  resolve: {\r\n    extensions: ['', '.ts', '.tsx', '.js', '.jsx'],\r\n    /**\r\n     * Configure your build system to redirect any imports/requires\r\n     * looking for react or react-dom with preact-compat.\r\n     */\r\n    alias: {\r\n      \"react\": \"preact-compat\",\r\n      \"react-dom\": \"preact-compat\"\r\n    }\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.tsx?$/,\r\n        exclude: [/node_modules/],\r\n        use: [\r\n          {\r\n            loader: \"babel-loader\",\r\n            options: {\r\n              babelrc: false,\r\n              plugins: [\r\n                [\r\n                  \"@babel/plugin-transform-react-jsx\",\r\n                  { pragma: \"h\", pragmaFrag: \"Fragment\" }\r\n                ]\r\n              ],\r\n              presets: [[\"@babel/typescript\", { jsxPragma: \"h\" }]]\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.(sa|sc|c)ss$/,\r\n        use: [\"style-loader\", \"css-loader\"]\r\n      },\r\n      {\r\n        test: /\\.(png|jp(e*)g|svg|gif)$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: 'images/[hash]-[name].[ext]',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ]\r\n  },\r\n  devServer: {\r\n    static: {\r\n      directory: __dirname + '/tests/development/firefox/firefox-hbbtv',\r\n    },\r\n    compress: true,\r\n    port: 9000,\r\n  },\r\n};\r\n```\r\n**Expected behavior**\r\nShouldn't I be able to import `useEffect` normally?\r\n\r\nThank you in advance for your time.\r\n\r\nKind Regards,\r\n\r\nGerard\r\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/3527/comments",
    "author": "gerardcsaperas",
    "comments": [
      {
        "user": "ForsakenHarmony",
        "created_at": "2022-04-28T12:44:41Z",
        "body": "> Shouldn't I be able to import `useEffect` normally?\r\n\r\nYou're using preact 8, it doesn't have hooks yet\r\n```json\r\n\"preact\": \"^8.5.3\",\r\n```\r\n\r\nIf you update to preact 10 you can use hooks (and also change the alias from `preact-compat` to `preact/compat` in your webpack config)"
      }
    ]
  },
  {
    "number": 2812,
    "title": "How does one modify child props in Preact?",
    "created_at": "2020-10-31T21:55:16Z",
    "closed_at": "2020-11-02T07:24:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/2812",
    "body": "I couldn’t find anywhere in the docs how to modify props of child components.\r\n\r\nIn my case, if the parent component `<Modal padding={true}>` has a `padding: true` prop, I’d like one of its children `<ModalContent>` to automatically also be assigned a `padding: true` prop as well (but not to some of `<Modal>`’s other children).\r\n\r\n```js\r\nconst Modal = ({ padding, ...props }) => {\r\n  return (\r\n    <div {...{ padding }}>\r\n      {/* How does one conditionally modify prop of the `ModalContent` child to include `padding: true` */}\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n```",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2812/comments",
    "author": "heymartinadams",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2020-11-02T07:23:42Z",
        "body": "Note that strong coupling between parent and direct children is discouraged, because it breaks the composition model of components. By doing so you'd effectively disallow consumers to use their own components.\r\n\r\nIn general there are two ways to do that:\r\n\r\n## cloneElement\r\n\r\nThe `cloneElement` function can be used to clone a child and to pass new props to it.\r\n\r\n```jsx\r\nimport { toChildArray, cloneElement } from \"preact\";\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <div class=\"modal\">\r\n      {toChildArray(props.children).map((child, i) => {\r\n        return cloneElement(child, { key: i, padding: props.padding });\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nThe `cloneElement` approach has the disadvantage that consumers of that component can't pass in their own children anymore. Code like this will break because the props will be assigned to the `Fragment` instead of `ModalContent`:\r\n\r\n```jsx\r\n<Modal>\r\n  {someCondition && (\r\n    <>\r\n      <ModalHeader />\r\n      <ModalContent />\r\n    </>\r\n  )}\r\n  <OtherModalContent />\r\n</Modal>\r\n```\r\n\r\n## Context (recommended)\r\n\r\nA better approach is to leverage the context api instead.\r\n\r\n```jsx\r\nconst ModalContext = createContext({ padding: null });\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <div class=\"modal\">\r\n      <ModalContext.Provider value={{ padding: props.padding }}>\r\n        {props.children}\r\n      </ModalContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\n// And then in ModalContent\r\nfunction ModalContent(props) {\r\n  const ctx = useContext(ModalContext); \r\n  return <div style={...ctx.padding}>{props.children}</div>\r\n}\r\n```"
      },
      {
        "user": "heymartinadams",
        "created_at": "2020-11-03T03:15:46Z",
        "body": "Herzlichen Dank, @marvinhagemeister 🙏 🎉"
      }
    ]
  },
  {
    "number": 2606,
    "title": "createContext Update Flag",
    "created_at": "2020-07-08T19:25:36Z",
    "closed_at": "2020-07-12T06:23:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/2606",
    "body": "So, `React.createContext` has a barely, if at all documented feature, in that it takes a second argument, which is a function that returns a binary, which somehow can be used by Consumers to determine whether they need to update. I'm not super clear on the specifics of how it works, because I don't actually use it for it's intended purpose. Instead, by passing `() => 0b0`, I can can create a context that never triggers a render when the value updates, and for whatever reason this doesn't render the Provider itself, but consumers still see the updated value when they render by other means.\r\n\r\nThis seems a bit niche, but I've found this pattern cropping up time and time again in the boilerplate of my application, because it's a really convenient way to pass callbacks and utilities around in a sort of plug-and-play manner without a bunch of prop drilling. Having this feature in Preact would be great.\r\n\r\n(Or, if someone wants to point out that this is a ridiculous strategy that can be accomplished via more mainstream means, that would also be welcome.)",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2606/comments",
    "author": "Myrdden",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2020-07-12T06:23:56Z",
        "body": "It's undocumented for a reason as it's a pretty weird API and an experiment that didn't lead to the results initially everyone hoped for. The experiment was done at a time when `react-redux` was trying to leverage the new context API for fine granular updates. The trouble is that those semantics are specific to the library in use and there are many competing ways to to those, which all have their different strengths and tradeoffs. Forcing state management to chose a particular tradeoff by (P)React is wrong.\r\n\r\n> I'm not super clear on the specifics of how it works, because I don't actually use it for it's intended purpose. Instead, by passing () => 0b0, I can can create a context that never triggers a render when the value updates, and for whatever reason this doesn't render the Provider itself, but consumers still see the updated value when they render by other means.\r\n\r\nIt mainly works by setting a bitmask and using that to mark properties as new. You can get the same behaviour of not updating the provider by mutating the value passed to the `Provider` instead of passing a new value on each render."
      },
      {
        "user": "Myrdden",
        "created_at": "2020-07-22T18:47:40Z",
        "body": "@marvinhagemeister \r\n> It mainly works by setting a bitmask and using that to mark properties as new. You can get the same behaviour of not updating the provider by mutating the value passed to the `Provider` instead of passing a new value on each render.\r\n\r\nNot sure what you mean by this. If it's not too much trouble, could you provide an example?"
      },
      {
        "user": "ForsakenHarmony",
        "created_at": "2020-07-23T10:22:01Z",
        "body": "very simplified:\r\n\r\n```js\r\n// possibly in a `useRef`\r\nlet val = { callback: () => {} };\r\n\r\n<Provider value={val}>...</Provider>\r\n\r\n// then later\r\nval.callback = function cb() { ... }\r\n```\r\n"
      }
    ]
  },
  {
    "number": 2269,
    "title": "Recommended configuration for typescript",
    "created_at": "2020-01-22T10:03:12Z",
    "closed_at": "2024-05-01T10:02:04Z",
    "labels": [
      "question",
      "discussion"
    ],
    "url": "https://github.com/preactjs/preact/issues/2269",
    "body": "Hello,\r\nI'm planing to do a project where I would like to use typescript and preact.\r\nI don't see anything about typescript in the documentations and was wondering if anyone has a good way to get started with typescript and preact, what would be the recommended way of setting up the configuration for webpack.config and tsconfig, and is there anything else that would be good to know about typescript and preact.\r\nThanks.",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2269/comments",
    "author": "KristinaLomartire",
    "comments": [
      {
        "user": "ForsakenHarmony",
        "created_at": "2020-01-22T12:30:22Z",
        "body": "`preact-cli` with the `typescript` template\r\n\r\nfor more info #2222 #2150 "
      },
      {
        "user": "Frikki",
        "created_at": "2020-03-26T15:22:59Z",
        "body": "```ts\r\n{\r\n    \"compilerOptions\": {\r\n        /* Basic Options */\r\n        \"target\": \"esnext\" /* Specify ECMAScript target version. Permitted values are 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020' or 'esnext'. */,\r\n        \"module\": \"esnext\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015' or 'esnext'. */,\r\n        \"lib\": [\r\n            \"es2015\",\r\n            \"es2016\",\r\n            \"es2017\",\r\n            \"dom\"\r\n        ] /* Specify library file to be included in the compilation. */,\r\n        // \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n        // \"checkJs\": true /* Report errors in .js files. */,\r\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react', or 'react-native'. */,\r\n        \"jsxFactory\": \"h\" /* Specify the JSX factory function to use when targeting react JSX emit, e.g. 'React.createElement' or 'h'. Requires TypeScript version 2.1 or later. */,\r\n        \"declaration\": true /* Generates corresponding d.ts files. */,\r\n        \"declarationDir\": \"dist\" /* Specify output directory for generated declaration files. */,\r\n        // \"declarationMap\": true, /* Generates a sourcemap for each corresponding '.d.ts' file. */\r\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\r\n        // \"outFile\": \"./\", /* Concatenate and emit output to single file. */\r\n        \"outDir\": \"dist\" /* Redirect output structure to the directory. */,\r\n        // \"rootDir\": \"./src\" /* Specifies the root directory of input files. Use to control the output directory structure with --outDir. */,\r\n        // \"composite\": true /* Enables building for project references. */,\r\n        \"removeComments\": true /* Do not emit comments to output. */,\r\n        // \"noEmit\": true /* Do not emit output. */,\r\n        // \"importHelpers\": true /* Do not emit output. */,\r\n        // \"downlevelIteration\": true /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,\r\n        // \"isolatedModules\": true /* Unconditionally emit imports for unresolved files. */,\r\n\r\n        /* Strict Type-Checking Options */\r\n        \"strict\": true /* Enable all strict type checking options. */,\r\n        \"noImplicitAny\": true /* Warn on expressions and declarations with an implied 'any' type. */,\r\n        \"strictNullChecks\": true /* Enable strict null checks. */,\r\n        \"strictFunctionTypes\": true /* Disable bivariant parameter checking for function types. */,\r\n        \"strictBindCallApply\": true /* Enable stricter checking of of the `bind`, `call`, and `apply` methods on functions.   */,\r\n        \"strictPropertyInitialization\": true /* Ensure non-undefined class properties are initialized in the constructor. */,\r\n        \"noImplicitThis\": true /* Raise error on 'this' expressions with an implied any type. */,\r\n        \"alwaysStrict\": true /* Parse in strict mode and emit 'use strict' for each source file. */,\r\n\r\n        /* Additional Checks */\r\n        \"noUnusedLocals\": true /* Report errors on unused locals.   */,\r\n        \"noUnusedParameters\": true /* Report errors on unused parameters. */,\r\n        // \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\r\n        \"noFallthroughCasesInSwitch\": true /* Report errors for fallthrough cases in switch statement. */,\r\n\r\n        /* Module Resolution Options */\r\n        \"moduleResolution\": \"node\" /* Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6). */,\r\n        \"baseUrl\": \".\" /* Base directory to resolve non-relative module names. */,\r\n        \"paths\": {\r\n            \"~*\": [\"./*\"]\r\n        } /*Specify path mapping to be computed relative to baseUrl option. */,\r\n        // \"rootDirs\": [\"./src\"] /* Specify list of root directories to be used when resolving modules. */,\r\n        \"typeRoots\": [\r\n            \"types\",\r\n            \"node_modules/@types\"\r\n        ] /* Specify list of directories for type definition files to be included. */,\r\n        // \"types\": [] /* Type declaration files to be included in compilation. */,\r\n        \"allowSyntheticDefaultImports\": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,\r\n        \"esModuleInterop\": true /* Emit '__importStar' and '__importDefault' helpers for runtime babel ecosystem compatibility and enable '--allowSyntheticDefaultImports' for typesystem compatibility. */,\r\n        \"preserveSymlinks\": true /* Do not resolve symlinks to their real path; treat a symlinked file like a real one. */\r\n\r\n        /* Source Map Options */\r\n        // \"sourceRoot\": \"\" /* Specifies the location where debugger should locate TypeScript files instead of source locations. */,\r\n        // \"mapRoot\": \"\" /* Specifies the location where debugger should locate map files instead of generated locations. */,\r\n        // \"inlineSourceMap\": true /* Emit a single file with source maps instead of having a separate file. */,\r\n        // \"inlineSources\": true /* Emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap to be set. */\r\n\r\n        /* Experimental Options */\r\n        // \"experimentalDecorators\": true /* Enables experimental support for ES7 decorators. */,\r\n        // \"emitDecoratorMetadata\": true /* Emit design-type metadata for decorated declarations in source. */\r\n    },\r\n    \"exclude\": [\"node_modules\", \"src/**/*.__test__.ts\"],\r\n    \"include\": [\"src/**/*\", \"types/**/*.d.ts\"]\r\n}\r\n```\r\n\r\nAdjust to your own needs."
      }
    ]
  },
  {
    "number": 2250,
    "title": "preact 10.X.X, missing lib directory ?",
    "created_at": "2020-01-15T12:05:28Z",
    "closed_at": "2020-01-15T13:47:39Z",
    "labels": [
      "question",
      "wontfix",
      "discussion"
    ],
    "url": "https://github.com/preactjs/preact/issues/2250",
    "body": "Hello,\r\nI have problem using preact 10.2.1 (haven't tried earlier versions). After installing and setting aliases i try to compile project but it throws errors on each component:\r\nModule not found: Error: Cannot resolve module 'preact/compat/lib/ReactMount'\r\n\r\nAs I can see there is no such a directory \"lib\" in react/compat and, obviously, no libraries inside.\r\nI checked that 'stand-alone' preact-compat had those libraries (tried using it and project compiled successfuly with preact-compat).\r\nCould you help me with this?\r\n\r\nReact is 15.4.2",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2250/comments",
    "author": "Breadbuddy",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2020-01-15T13:46:11Z",
        "body": "We deprecated supporting APIs from react that are older than react 0.15. we did support than back in the 8.x release line which requires `preact-compat` as you noted. If you must rely on these to be present there is no other solution than to downgrade to 0reaft 8.x and use `preact-compat`."
      }
    ]
  },
  {
    "number": 2216,
    "title": "Delete stale branches",
    "created_at": "2019-12-28T13:40:30Z",
    "closed_at": "2020-01-02T12:58:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/2216",
    "body": "The project has 101 branches in total and at least 60 of them are stale. Something definitely should be done about that.",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2216/comments",
    "author": "zlatanvasovic",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2020-01-02T12:58:59Z",
        "body": "We do encourage room for experimentation. I've been able to delete 10 of them, but others are ideas or experiments which may prove useful in the future. I'm not aware of any limits regarding the number of branches here on GitHub.\r\n\r\nWe have 2 main branches:\r\n\r\n- `master` is the current release line.\r\n- `8` is for the previous `8.x` release line."
      },
      {
        "user": "JoviDeCroock",
        "created_at": "2020-01-02T13:59:15Z",
        "body": "That's only the case if you'd check out all branches, most of the time you only checkout `master`"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2020-01-02T14:37:51Z",
        "body": "@zdroid please don't make such wild assumptions without checking them against the numbers. I just tried it out locally with two fresh clones. One with a standard clone which downloads all branches and another which just clones the `master` branch. Here are the results:\r\n\r\n| Checkout type | Repo size |\r\n|---|---|\r\n| All branches | 6.02 MB |\r\n| only `master` |  5.16 MB |\r\n\r\n_To get the repo size I used this command: `git count-objects -vH`_\r\n\r\nTo clone a single branch of a repo git has added the `--single-branch` flag since April 2012. It can be used like this:\r\n\r\n```bash\r\ngit clone <url> --branch <branch> --single-branch [<folder>]\r\n```"
      }
    ]
  },
  {
    "number": 1678,
    "title": "hooks not mentioned on preactjs.com",
    "created_at": "2019-06-03T20:19:13Z",
    "closed_at": "2019-06-03T20:40:13Z",
    "labels": [
      "question",
      "known issue"
    ],
    "url": "https://github.com/preactjs/preact/issues/1678",
    "body": "It's unclear how hooks work in Preact as they are not documented on the site. How can we add a blurb about this?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1678/comments",
    "author": "bionicles",
    "comments": [
      {
        "user": "pmkroeker",
        "created_at": "2019-06-03T20:21:30Z",
        "body": "#1670 is related. Things will start being documented once X is out of beta"
      }
    ]
  },
  {
    "number": 1669,
    "title": "preact.memo or preact.PureComponent?",
    "created_at": "2019-06-02T00:14:04Z",
    "closed_at": "2019-06-02T05:29:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1669",
    "body": "I am using `preact@next` and can't seem to find the `memo` function or the `PureComponent` class.\r\nare they included in Preact? If not, what's the best way to use a \"memo\" functional component?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1669/comments",
    "author": "alshdavid",
    "comments": [
      {
        "user": "pmkroeker",
        "created_at": "2019-06-02T00:35:42Z",
        "body": "Both of those reside within `preact/compat`, not within the base."
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-06-02T05:29:03Z",
        "body": "As @pmkroeker said: These functions are part of the `preact/compat` export.\r\n\r\n```js\r\nimport { memo, PureComponent } from \"Preact/compat\"\r\n```"
      }
    ]
  },
  {
    "number": 1541,
    "title": "[preact 10.0.0-alpha.4] Could preact x-alpha.4 use in production environment ?",
    "created_at": "2019-04-16T13:20:12Z",
    "closed_at": "2019-04-16T13:37:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1541",
    "body": "I'd like to replace react with preact in order to impove the performance, my SPA built with Hooks + ErrorBoundary, ",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1541/comments",
    "author": "diyijing",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-16T13:37:40Z",
        "body": "The `alpha` tag in software development is used to signal that the provided software may contain bugs. Some of those are known, some of them may not be discovered yet. That's why the typical disclaimer for any alpha release is usually something like: \"Do not use alpha software in production\".\r\n\r\nThat said, there are a couple of users that messaged us who are using it already in production. We landed quite a few important fixes in the past weeks that fix some high priority bugs where Preact rendered an incorrect result with `Fragments`. The code in `master` right now feels very well tested and I'm hoping that there won't be much issues left to tackle after our next release.\r\n\r\nPersonally I'd wait for at least the beta phase before using it in production. Ultimately this is up to you though. If you do find any bugs please file an issue, so that our final release can be rock solid :+1: "
      }
    ]
  },
  {
    "number": 1522,
    "title": "Video player in Preact",
    "created_at": "2019-04-08T06:46:38Z",
    "closed_at": "2019-04-08T09:33:23Z",
    "labels": [
      "question",
      "compat"
    ],
    "url": "https://github.com/preactjs/preact/issues/1522",
    "body": "Is there a Video Player component we can use for Preact like in React? I found some in my search but they didn't seem to be used too often.  Can you direct me to one that you recommend? I would like to create an onclick to a button that will open a modal with a video. Thank you! ",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1522/comments",
    "author": "elaineleeworld",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-08T09:33:23Z",
        "body": "One of the big selling points of Preact is that one can use all components that were originally written for React. There is no need to convert them to Preact or anything. This is typically done via aliasing `react` and `react-dom` to `preact/compat`:\r\n\r\n```js\r\n// webpack.config.js\r\nmodule.exports = {\r\n  // ...rest of your webpack config\r\n  resolve: {\r\n    alias: {\r\n      react: 'preact/compat',\r\n      'react-dom': 'preact/compat'\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nAnd then you can import react libraries as usual. If that somehow doesn't work with any of the react libraries you're using, we'd love to take a look 🙂 "
      },
      {
        "user": "elaineleeworld",
        "created_at": "2019-04-08T21:13:53Z",
        "body": "ah okay!  I will give it a whirl!  this is my first preact project, you can take a look at the repo of the same name on my GitHub.  I already had the alias. Just didn't know how to use react components with it.  For example,  I just npm installed react player and am getting this warning in my terminal `react-player@1.10.0 requires a peer of react@* but none is installed. You must install peer dependencies yourself.`  Does that mean I have to install react? and if yes, won't that make the K weight larger?"
      },
      {
        "user": "ForsakenHarmony",
        "created_at": "2019-04-08T21:53:14Z",
        "body": "no it's just a warning"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-09T05:25:05Z",
        "body": "yup, as @ForsakenHarmony said this is a warning that can be safely ignored. The reason it pops up is that npm doesn't support aliasing packages. It has no clue that we replace\r\n all `react` and `react-dom` imports with `preact/compat` at build time with webpack 👍"
      },
      {
        "user": "elaineleeworld",
        "created_at": "2019-04-10T21:40:33Z",
        "body": "thanks everyone! that was helpful explanation! "
      }
    ]
  },
  {
    "number": 1263,
    "title": "Prefixing event handlers (a-la onWebkitAnimationEnd)",
    "created_at": "2018-11-30T17:23:34Z",
    "closed_at": "2019-01-10T08:07:07Z",
    "labels": [
      "question",
      "wontfix",
      "workaround"
    ],
    "url": "https://github.com/preactjs/preact/issues/1263",
    "body": "The following works great for browsers that don't need a prefix, but fails for browsers that do.\r\n\r\n`<div onAnimationEnd={this.onAnimationEnd} />`\r\n\r\n\r\nWhat is the best way to handle this for browsers that need the `webkit` prefix for this event?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1263/comments",
    "author": "bartlewis",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2018-12-05T20:02:06Z",
        "body": "You could use a simple helper function to add prefixes:\r\n\r\n```jsx\r\nfunction addPrefix(name, fn) {\r\n  const renamed = name.charAt(0).toUpperCase() + name.slice(1);\r\n  return {\r\n    [name]: fn,\r\n    [\"webkit\" + renamed]: fn,\r\n  }\r\n}\r\n\r\n// Usage\r\n<div {...addPrefix(\"onAnimationEnd\", this.onAnimationEnd)} />\r\n\r\n// output:\r\n<div onAnimationEnd={this.onAnimationEnd} webkitOnAnimationEnd={this.onAnimationEnd} />\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-06T02:30:47Z",
        "body": "Love it! Here's a vnode hook that will apply it globally & automatically:\r\n\r\n```js\r\nimport { options } from 'preact';\r\n\r\nconst mapping = {};\r\nfor (let prop in document.body) {\r\n  let prefixedProp = 'webkit' + prop;\r\n  if (prefixedProp in document.body) {\r\n    mapping[prop] = prefixedProp;\r\n  }\r\n}\r\n\r\nlet old = options.vnode;\r\noptions.vnode = vnode => {\r\n  if (typeof vnode.nodeName === 'string') {\r\n    for (let i in vnode.props) {\r\n      let lc = i.toLowerCase();\r\n      if (mapping.hasOwnProperty(lc)) {\r\n        vnode.props[mapping[lc]] = vnode.props[i];\r\n      }\r\n    }\r\n  }\r\n  if (old) old(vnode);\r\n};\r\n```"
      },
      {
        "user": "bartlewis",
        "created_at": "2018-12-07T02:47:06Z",
        "body": "I played with this a little bit tonight, but not seeing any of the prefix extensions fire. Tried all of the following variations. The only way I can get a prefix to fire is via `addEventListener`.\r\n\r\n```javascript\r\n<div\r\n  onwebkitTransitionEnd={() => {\r\n    console.log('onwebkitTransitionEnd'); // never fires\r\n  }}\r\n  onWebkitTransitionEnd={() => {\r\n    console.log('onWebkitTransitionEnd'); // never fires\r\n  }}\r\n  webkitTransitionEnd={() => {\r\n    console.log('webkitTransitionEnd'); // never fires\r\n  }}\r\n  webkitOnTransitionEnd={() => {\r\n    console.log('webkitOnTransitionEnd'); // never fires\r\n  }}\r\n  ref={el => {\r\n    if (el) {\r\n      el.addEventListener('webkitTransitionEnd', () => {\r\n        console.log('addEventListener webkitTransitionEnd'); // does fire\r\n      });\r\n    }\r\n  }}\r\n/>\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-07T18:52:35Z",
        "body": "Ah - it looks like this is a result of `webkitTransitionEnd` being case-sensitive, whereas `transitionend` is lowercased. Preact currently has trouble dealing with mixed-case event names (#788)."
      },
      {
        "user": "developit",
        "created_at": "2018-12-07T18:56:46Z",
        "body": "You could use a global polyfill to emulate `transitionend` for browsers that only support `webkitTransitionEnd`:\r\n\r\n```js\r\nif (!('ontransitionend' in document.body) {\r\n  addEventListener('webkitTransitionEnd', e => {\r\n    const event = new Event('transitionend', { bubbles: true });\r\n    e.target.dispatch(event);\r\n  });\r\n}\r\n```"
      },
      {
        "user": "bartlewis",
        "created_at": "2018-12-07T23:24:08Z",
        "body": "Thanks a ton @developit . This is working well.\r\n\r\nMy final solution looks something like this:\r\n\r\n```javascript\r\nfunction getAnimationEndEventName() {\r\n  const animations = {\r\n    animation: 'animationend',\r\n    WebkitAnimation: 'webkitAnimationEnd',\r\n  };\r\n\r\n  for (let key in animations) {\r\n    if (document.body.style[key] !== undefined) {\r\n      return animations[key];\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst animationEndEventName = getAnimationEndEventName();\r\nif (animationEndEventName !== 'animationend') {\r\n  window.addEventListener(animationEndEventName, e => {\r\n    const event = new Event('animationend', { bubbles: true });\r\n    e.target.dispatchEvent(event);\r\n  });\r\n}\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-08T00:33:26Z",
        "body": "Love it! Now it's super easy to remove that workaround once browser support requirements eventually shift, without having to change your components 👍 "
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-01-10T08:07:07Z",
        "body": "Closing, as this isn't an issue with preact 👍 "
      }
    ]
  },
  {
    "number": 1217,
    "title": "Bug with blinking input value in ie11.",
    "created_at": "2018-09-21T15:25:38Z",
    "closed_at": "2019-04-14T13:49:27Z",
    "labels": [
      "question",
      "needs-more-info"
    ],
    "url": "https://github.com/preactjs/preact/issues/1217",
    "body": "When you have controlled input and the value is from state, once you change it -> 1.) it shows new input value before state was updated. 2.) once state updated input show its value.\r\nThis is issue is only in ie, there was same issue in react, but it was fixed, i will search for the link and will provide it soon.\r\n\r\n- preact 8.2.5\r\n- IE 11  \r\n\r\nExample code:\r\n\r\n```js \r\nonInputChange = ({ target: { value = '' } }) => {\r\n  const amount = Math.min((value ? parseInt(value.replace(/\\D/g, ''), 10) : 0), 100)\r\n  this.setState({amount});\r\n};\r\n\r\n// ...\r\n\r\nconst { amount } = this.state;\r\n<input\r\n    name=\"amount\"\r\n    type=\"text\"\r\n    value={`$${amount}`}\r\n    onInput={this.onInputChange}\r\n/>\r\n```\r\n\r\n\r\nSteps to reproduce in IE 11;\r\nenter 100 then press quickly number for example 1 it will show $1001 then $100",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1217/comments",
    "author": "Rootmafia",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-09-21T18:49:12Z",
        "body": "Update Preact - there was a release in the `8.2.x` series that switched momentarily to setTimeout and that causes the issue you described.\r\n\r\nYou can test to see if that's causing the issue by trying out this hack (do not use this in prod):\r\n\r\n```js\r\nimport { options } from 'preact'\r\noptions.debounceRendering = f => f()\r\n```"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-14T13:49:27Z",
        "body": "Closing: Just checked with the code in `master` and I'm unable to reproduce the described issue."
      }
    ]
  },
  {
    "number": 1216,
    "title": "How to integrate preact in angular 1 ?",
    "created_at": "2018-09-21T09:08:53Z",
    "closed_at": "2018-09-21T18:47:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1216",
    "body": "Hi \r\nWe have integrated react into angular 1.6 based framework which we have written, We are using ReactDom.render api to render the react component from angular context. Also this API allows to pass properties to React component.\r\nCan we integrate preact with angular same wat? I saw there is preact. render API but it does not accept any parameters or properties.\r\nPlease suggest\r\nThanks\r\nPrasad",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1216/comments",
    "author": "prasad0612",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-09-21T18:47:16Z",
        "body": "The methods are all the same as React, not sure where you read there are no parameters.\r\n\r\n```\r\nimport FooComponent from './foo'\r\nimport { createElement, render } from 'preact'\r\n\r\nrender(\r\n  createElement(FooComponent, props),\r\n  this._el[0]  // or whatever it's called in angular\r\n);\r\n```"
      }
    ]
  },
  {
    "number": 1213,
    "title": "Dealing with exceptions",
    "created_at": "2018-09-18T08:43:49Z",
    "closed_at": "2019-03-05T13:09:47Z",
    "labels": [
      "question",
      "in X"
    ],
    "url": "https://github.com/preactjs/preact/issues/1213",
    "body": "Thanks to the new componentDidCatch lifecycle method it's possible for parent components to intercept exceptions raised by child component constructors or lifecycle methods.  The problem I currently have is that I would like to catch all exceptions in my Preact app and respond to them.  ",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1213/comments",
    "author": "photz",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-09-21T18:48:00Z",
        "body": "How do you intend to respond to them?  You can define a component at the root of your application that accepts all errors."
      },
      {
        "user": "photz",
        "created_at": "2018-09-24T09:04:58Z",
        "body": "Thanks for your response.  When an exception is caught (globally, in my entire app), then I would like a method of my root component to get called so that I can, for instance, change its state to display an error message.  Maybe I'm being a bit thick, but I fail to see how this could be accomplished without messing with Preact itself. "
      },
      {
        "user": "developit",
        "created_at": "2018-10-10T02:01:03Z",
        "body": "This is how componentDidCatch works - it catches all errors for all descendent components (not just parent/child).  You can do something like:\r\n\r\n```js\r\nclass App extends Component {\r\n  componentDidCatch(err) {\r\n    this.setState({ error: err });\r\n  }\r\n}\r\n```"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-03-05T13:09:47Z",
        "body": "We released an alpha for next version of Preact just a few hours ago. It includes full support for `componentDidCatch` 👍 "
      }
    ]
  },
  {
    "number": 1105,
    "title": "External API methods for a component",
    "created_at": "2018-05-17T15:07:37Z",
    "closed_at": "2018-05-22T09:37:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1105",
    "body": "First up, let me say I'm an old school Javascript person; Preact (and React) is new to me, so if I'm talking rubbish, feel free to shoot me down :).\r\n\r\nBasically what I'm looking to be able to do is define methods on a class I am creating (extending `preact.Component`) and then use those methods. Defining them is easy - using them, not so much. In plain Javascript I'd just do `new ClassName()`, but in Preact you use the `render` function, which returns a DOM node.\r\n\r\nI found #955 which relates to this and using the solution there I can get my instance and call its methods:\r\n\r\n```js\r\n\tlet instance;\r\n\tlet ref = c => { instance = c; };\r\n\tpreact.render(<Menu ref={ref} />, menu.parent[0], menu[0] );\r\n\t\r\n\t// Then sometime later - after a socket update with new menu items:\r\n\tinstance.data( ... );\r\n```\r\n\r\nThat feels really messy and doesn't feel like the right way of doing it with Preact. Its a lot of messing around just to get the class instance (rather than `let instance = new Menu()`).\r\n\r\nIs there a better way of doing this? Should I in fact be passing the `data` in as a property to a new `preact.render(<Menu...)` call? Does that reuse the old instance (it looks like a factory method, so I'm guessing not).\r\n\r\nI guess I'm just haven't a little trouble knowing what the right way to do it would be and meshing that with my old school way of thinking!",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1105/comments",
    "author": "DataTables",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-05-17T17:08:35Z",
        "body": "Hi @DataTables! While that's the best way to call methods on a component instance, it seems like what you want to do is re-render in response to new data.  I'd recommend re-invoking `render()` for that:\r\n\r\n```js\r\nlet parent = menu.parent[0];  // I'm assuming this is coming from jQuery or something\r\nlet root = menu[0];\r\n\r\npreact.render(<Menu data={{}} />, parent, root);\r\n\r\nonSocketUpdate = newData => {\r\n  preact.render(<Menu data={newData} />, parent, root);\r\n};\r\n```\r\n\r\nThis will update your tree of components (including `Menu`) in-place.  If you want to Menu to detect when it gets a new `data` value, define a `componentWillReceiveProps()` method on that class:\r\n\r\n```js\r\nclass Menu extends preact.Component {\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.data !== this.props.data) {\r\n      // got new data\r\n    }\r\n  }\r\n  render(props) {\r\n    // do stuff with props.data here\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\nFor what it's worth, it's often easier to \"set up\" things like socket connections and external data sources from within your root component (Menu) or a provider component:\r\n\r\n```js\r\n// wrapper component that maintains the socket connection and renders its child with new data\r\nclass DataProvider {\r\n  componentDidMount() {\r\n    this.connection = new SocketConnection();\r\n    this.connection.ondata = data => {\r\n      this.setState({ data });\r\n    };\r\n  }\r\n  componentWillUnmount() {\r\n    this.connection.close();\r\n  }\r\n  render(props, state) {\r\n    return props.children[0](state.data)\r\n  }\r\n}\r\n\r\n// usage:\r\n\r\npreact.render(\r\n  <DataProvider>\r\n    { data => <Menu data={data} /> }\r\n  </DataProvider>,\r\n  menu.parent[0],\r\n  menu[0]\r\n)\r\n```\r\n\r\nThe above keeps things nicely in the component tree, so your setup code is left clean."
      },
      {
        "user": "DataTables",
        "created_at": "2018-05-18T10:55:22Z",
        "body": "That's super-helpful thanks! The socket is going to be shared, so I'll probably pass it in as a proper and let the component listen to the event it needs to.\r\n\r\nThat said, I'm a little confused about `componentWillReceiveProps()` and the first bit of code you posted:\r\n\r\n```js\r\npreact.render(<Menu data={{}} />, parent, root);\r\n\r\nonSocketUpdate = newData => {\r\n  preact.render(<Menu data={newData} />, parent, root);\r\n};\r\n```\r\n\r\nTo my preact uneducated mind this will create two instances of the `Menu` component (one replacing the other, doing the DOM diffing stuff). But the `componentWillReceiveProps()` code suggests that actually there is something doing magic somewhere to see if there is already an instance, and then reuse that. Is that correct? Does it just use DOM elements to keep track of unique instances?"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2018-05-20T07:26:44Z",
        "body": "@DataTables yep, preact diffs directly against the DOM and not another vdom-tree like react does."
      },
      {
        "user": "DataTables",
        "created_at": "2018-05-22T09:37:20Z",
        "body": "Super - thanks!"
      }
    ]
  },
  {
    "number": 1028,
    "title": "Export vnode class",
    "created_at": "2018-03-05T15:55:53Z",
    "closed_at": "2018-03-13T10:37:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1028",
    "body": "I have my own h()-like function that wraps preact's h() function but it would be nice if I could skip the middle man and just import vnode and return them from my function.",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1028/comments",
    "author": "Qrokqt",
    "comments": [
      {
        "user": "yaodingyd",
        "created_at": "2018-03-05T16:43:10Z",
        "body": "I think you can set this up in your .babelrc via transform-react-jsx plugin:\r\n\r\n```json\r\n{\r\n  \"plugins\": [\r\n    [\"transform-react-jsx\", {\r\n      \"pragma\": \"h\" // your own h-like function name\r\n    }]\r\n  ]\r\n}\r\n```\r\n\r\nand then import your h-like function in class file"
      },
      {
        "user": "developit",
        "created_at": "2018-03-08T04:10:45Z",
        "body": "Also - worth noting that h() does more than just instance VNode. It normalizes arguments in a way that is required by the diff. "
      },
      {
        "user": "Qrokqt",
        "created_at": "2018-03-12T20:32:34Z",
        "body": "@yaodingyd Thanks, but I'm not using jsx or babel.\r\n\r\n@developit Could you elaborate on that?\r\n\r\nIt looks like VNode is just an empty class so this works just fine, in which case there's no need to import vnode. Thanks.\r\n```\r\nvar vnode = {\r\n\tnodeName: 'div',\r\n\tchildren: ['test']\r\n};\r\nrender(vnode, document.body);\r\n```"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2018-03-13T10:37:32Z",
        "body": "@Qrokqt yep, `VNode` is an empty class and your code will work fine. Just be aware that when somebody else uses your code they may expect `h` to work like preact's `h`. That's what @developit meant.\r\n\r\nFor example when props has a children property wie move copy that over to the vnode's children property and delete it from props.\r\n\r\n```js\r\nh(\"div\", { children: \"foo\", bar: \"baz\" })\r\n\r\n// Without normalization\r\nconst VNode = {\r\n  nodeName: \"div\",\r\n  attributes: { children: \"foo\", bar: \"baz\" },\r\n  children: [],\r\n}\r\n\r\n// Compare that to with normalization by preact's built-in h function\r\nconst VNode = {\r\n  nodeName: \"div\",\r\n  attributes: { bar: \"baz\" },\r\n  children: [\"foo\"],\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1010,
    "title": "Identifier 'h' has already been declared",
    "created_at": "2018-02-21T07:58:31Z",
    "closed_at": "2018-02-23T02:20:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1010",
    "body": "I have a project with `rollup`, `preact`, `preact-compat`.\r\nAll worked fine, until i added `preact-portal` and then i got this error:\r\n```\r\n[!] (commonjs plugin) SyntaxError: Identifier 'h' has already been declared (2:9) in /Users/amir/projects/reacttag/node_modules/preact-portal/src/preact-portal.js\r\nnode_modules/preact-portal/src/preact-portal.js (2:9)\r\nSyntaxError: Identifier 'h' has already been declared (2:9) in /Users/amir/projects/reacttag/node_modules/preact-portal/src/preact-portal.js\r\n    at error (/Users/amir/projects/reacttag/node_modules/rollup/dist/rollup.js:168:15)\r\n    at /Users/amir/projects/reacttag/node_modules/rollup/dist/rollup.js:17955:17\r\n```\r\n\r\nHere is my rollup config:\r\n```javascript\r\n// rollup.config.js\r\nimport babel from 'rollup-plugin-babel';\r\nimport resolve from 'rollup-plugin-node-resolve';\r\nimport commonjs from 'rollup-plugin-commonjs';\r\nimport sass from 'rollup-plugin-sass';\r\nimport replace from  'rollup-plugin-replace';\r\n\r\nexport default {\r\n  input: 'src/main.js',\r\n  output: {\r\n    file: 'dist/bundle.dev.js',\r\n    format: 'iife',\r\n    name: 'MyLib',\r\n    sourcemap: 'inline',\r\n  },\r\n  plugins: [\r\n    replace({\r\n      'process.env.NODE_ENV': JSON.stringify( 'production' )\r\n    }),\r\n    sass({\r\n      insert: true\r\n    }),\r\n    babel({\r\n      'exclude': [\r\n        'node_modules/preact/**',\r\n        'node_modules/preact-compat/**'\r\n      ]\r\n    }),\r\n    resolve({\r\n      browser: true,\r\n      jsnext: true,\r\n      extensions: ['.js', '.jsx']\r\n    }),\r\n    commonjs({\r\n      namedExports: {\r\n        './node_modules/preact/dist/preact.js': [\r\n          'h',\r\n          'render',\r\n          'Component',\r\n          'cloneElement',\r\n          'options'\r\n        ],\r\n        './node_modules/react/react.js': [\r\n          'cloneElement',\r\n          'createElement',\r\n          'PropTypes',\r\n          'Children',\r\n          'PureComponent',\r\n          'Component',\r\n          'isValidElement'\r\n        ],\r\n        'node_modules/redux-logger/dist/redux-logger.js': [\r\n          'createLogger'\r\n        ]\r\n      }\r\n    }),\r\n  ]\r\n};\r\n```\r\n\r\nand my babelrc:\r\n```javascript\r\n{\r\n  \"env\": {\r\n    \"build\": {\r\n      \"presets\": [\"flow\", \"react\"],\r\n      \"plugins\": [\r\n        [\r\n          \"transform-react-jsx\",\r\n          {\r\n            \"pragma\": \"h\"\r\n          }\r\n        ],\r\n        [\r\n          \"babel-plugin-jsx-pragmatic\", {\r\n          \"module\": \"preact\",\r\n          \"import\": \"h\",\r\n          \"export\": \"h\"\r\n        }\r\n        ],\r\n        [\r\n          \"module-resolver\",\r\n          {\r\n            \"alias\": {\r\n              \"react\": \"preact-compat\",\r\n              \"react-dom\": \"preact-compat\",\r\n              \"react-addons-transition-group\": \"preact-transition-group\",\r\n              \"react-addons-css-transition-group\": \"preact-css-transition-group\",\r\n              \"indexof\": \"component-indexof\"\r\n            }\r\n          }\r\n        ],\r\n        \"transform-class-properties\",\r\n        \"transform-object-rest-spread\",\r\n        \"external-helpers\"\r\n      ]\r\n    }\r\n}\r\n```\r\n\r\nAny idea what is the problem?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1010/comments",
    "author": "amirharel-fyber",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-02-23T02:20:13Z",
        "body": "You're importing `{ h }` from Preact, but using `babel-plugin-jsx-pragmatic`.\r\n\r\nI would recommend using one or the other, but not both."
      },
      {
        "user": "amirharel-fyber",
        "created_at": "2018-02-23T09:00:49Z",
        "body": "@developit where do i import `{ h }` from Preact? \r\nYou mean from the `commonjs` plugin? \r\n\r\n```\r\n'./node_modules/preact/dist/preact.js': [\r\n          'h',\r\n          'render',\r\n          'Component',\r\n          'cloneElement',\r\n          'options'\r\n        ],\r\n``` \r\nshould i remove this h from there? because i tried it and it didn't work. "
      },
      {
        "user": "developit",
        "created_at": "2018-02-23T16:13:56Z",
        "body": "You can just remove the whole jsx-pragmatic plugin from your `babelrc`:\r\n\r\n```diff\r\n-        [\r\n-          \"babel-plugin-jsx-pragmatic\", {\r\n-          \"module\": \"preact\",\r\n-          \"import\": \"h\",\r\n-          \"export\": \"h\"\r\n-        }\r\n-        ],\r\n```"
      },
      {
        "user": "andrebautista",
        "created_at": "2018-06-27T23:51:54Z",
        "body": "Using the following `.babelrc` configuration I still need to import h into every component. Is this to be expected? If I add `babel-plugin-jsx-pragmatic` then I no longer need to import it into every component.\r\n```\r\n   plugins: [\r\n        \"transform-object-rest-spread\",\r\n        \"transform-class-properties\",\r\n        \"transform-decorators\",\r\n        \"syntax-dynamic-import\",\r\n        [\"transform-react-jsx\", { \"pragma\": \"h\" }]\r\n    ]\r\n```"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2018-06-28T07:36:26Z",
        "body": "See developit's comment above. That's the whole point of `babel-plugin-jsx-pragmatic` that you do not have to import `h` yourself."
      }
    ]
  },
  {
    "number": 984,
    "title": "error, redirectLocation, renderProps all are undefined",
    "created_at": "2018-01-23T10:13:36Z",
    "closed_at": "2018-02-23T02:44:08Z",
    "labels": [
      "question",
      "feedback needed"
    ],
    "url": "https://github.com/preactjs/preact/issues/984",
    "body": "I am using Preact along with React Router 3.2. I am getting all the parameters undefined in the callback function. Tried same thing with React and thing are working as desired. Please help.\r\n\r\n```\r\nfunction renderApp (req, res, next) {\r\n  match({ \r\n    routes: routes, \r\n    location: req.url\r\n  }, (error, redirectLocation, renderProps) => {\r\n\r\n    console.log (error, redirectLocation, renderProps)\r\n\r\n    if (renderProps) {\r\n      const  content = renderToString(\r\n        <Provider store={store}>\r\n          <RouterContext {...renderProps}/>\r\n        </Provider>\r\n      )\r\n\r\n      res.render('index', { content })\r\n      res.end()\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/984/comments",
    "author": "Arun1048576",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-01-24T20:20:10Z",
        "body": "Hmm - that part of your code doesn't seem to even have anything to do with Preact. Are you sure this is related?\r\n\r\nIf you're not already, make sure you're using `preact-compat`.  React Router 3 and prior require it."
      },
      {
        "user": "ztoben",
        "created_at": "2022-07-18T17:42:50Z",
        "body": "Surprisingly I have ran into the same issue when trying to upgrade an older project to preact that is still on react-router 3.2. I'm guessing the key will be upgrading that package first, but it's interesting that it doesn't seem to be fixed by preact/compat alone."
      }
    ]
  },
  {
    "number": 934,
    "title": "Render position",
    "created_at": "2017-11-17T13:29:40Z",
    "closed_at": "2017-11-20T20:30:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/934",
    "body": "I don't think it is possible to render a Component with a specific position, e.g., insert first rather than append? Would there be any consequences if I did something like:\r\n\r\n```js\r\nconst node = render(<Component />, element);\r\nelement.insertBefore(element.firstElementChild, node);\r\n```\r\n?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/934/comments",
    "author": "z-vr",
    "comments": [
      {
        "user": "developit",
        "created_at": "2017-11-20T20:30:15Z",
        "body": "Hiya @z-vr - that would work fine, or you can insert a marker node and have Preact replace it:\r\n\r\n```js\r\nlet marker = document.createElement('span');\r\nelement.insertBefore(element.firstElementChild, marker);\r\n\r\nrender(<Component />, element, marker);\r\n```"
      }
    ]
  },
  {
    "number": 910,
    "title": "Bug: how did you develop this ??",
    "created_at": "2017-10-13T03:07:10Z",
    "closed_at": "2017-10-14T19:43:35Z",
    "labels": [
      "question",
      "discussion"
    ],
    "url": "https://github.com/preactjs/preact/issues/910",
    "body": "@developit  I can't exercise enough how I'm grateful to you, maintainers and contributors 😍😍😍 for such an awesome work. Oops!, It's not an issue by the way. 👏👏👏",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/910/comments",
    "author": "nerdeveloper",
    "comments": [
      {
        "user": "developit",
        "created_at": "2017-10-14T19:43:35Z",
        "body": "lol thanks! it's basically just 2 years worth of pushing on the same tiny idea :)"
      }
    ]
  },
  {
    "number": 878,
    "title": "preact-transition-group we still need it???  update v2",
    "created_at": "2017-09-16T16:52:58Z",
    "closed_at": "2019-08-11T17:10:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/878",
    "body": "I use the version of react-transition-group in v2 , and compiled from source with preact\r\n\r\n \"react-transition-group\": path.resolve(__dirname, './temp/react-transition-group-master/src/'), \r\n\r\n i did not found any issue to use it with preact, \r\ni watched your code preact-transition-group  who is from first stable v1 of react-transition-group,\r\n\r\ni don't see the interest to keep it ... who is not updated \r\nI work with material-ui who use react-transition-group api v2 all works as expected with preact (touch ripple work)\r\nSo i deleted the preact-transition-group of my deps .. \r\n\r\nSimo\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/878/comments",
    "author": "simonjoom",
    "comments": [
      {
        "user": "developit",
        "created_at": "2017-09-18T01:44:35Z",
        "body": "Hi - I wasn't aware of the v2 release! I think it requires preact-compat, right?"
      },
      {
        "user": "simonjoom",
        "created_at": "2017-09-18T21:45:47Z",
        "body": "hello, material-ui is working on the v2 release, \r\nyes i use preact-compat and it's fully working (no need to add a preact-transition-group)"
      },
      {
        "user": "developit",
        "created_at": "2017-09-20T14:04:43Z",
        "body": "Nice."
      }
    ]
  },
  {
    "number": 846,
    "title": "require IMG",
    "created_at": "2017-08-30T12:57:01Z",
    "closed_at": "2017-08-31T17:08:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/846",
    "body": "Hello, if anyone can help me thanks, I'm only using Preact in my setup.\r\n\r\nWhen I resolve to import an image I do this:\r\n<Img src = '. / Porcoes-01.png' />, and it does not work!\r\n\r\nWhen I do this:\r\n<Img src = {require ('./ porcoes-01.png')} />, IT WORKS\r\n\r\nBut, if I remove require later, this way:\r\n<Img src = ('./ porcoes-01.png') />, IT WORKS\r\n\r\nOnly works if I give this command require! Would it work without requiring it?\r\n\r\nMy Webpack Configuration dev:\r\n...\r\n     Output: {\r\n         Path: PUBLIC,\r\n         Filename: 'app.js',\r\n         PublicPath: '/'\r\n     },\r\n\r\n     Module: {\r\n         Rules: [\r\n             {Test: / \\. (Svg | jpe? G | png | gif) (\\?. *)? $ / I, exclude: [/ (node_modules) /], loader: 'file-loader', options: {name : '[Name]. [Ext]'}},\r\n         ]\r\n     },",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/846/comments",
    "author": "allexon",
    "comments": [
      {
        "user": "developit",
        "created_at": "2017-08-31T17:08:11Z",
        "body": "Without the `require()` statement, the value is just an opaque String.  Adding the `require()` runs the image through Webpack's loaders - that's the only way to get it to be output in `assets/` after your build.\r\n\r\nThis is definitely more of a webpack question by the way, it doesn't really relate to Preact at all."
      }
    ]
  },
  {
    "number": 833,
    "title": "Callback when preact finishes rendering",
    "created_at": "2017-08-24T08:43:45Z",
    "closed_at": "2017-09-20T19:29:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/833",
    "body": "How can I get a notifiction when preact finished rendering the DOM?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/833/comments",
    "author": "fab1an",
    "comments": [
      {
        "user": "developit",
        "created_at": "2017-08-24T15:04:12Z",
        "body": "top-level `render()` is synchronous, so there's no need for a callback.  `setState()` accepts a callback as a second argument, which is invoked after the DOM has been updated:\r\n\r\n```js\r\nthis.setState({ foo: 'bar' }, () => {\r\n  console.log('updated');\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 451,
    "title": "PReact works only with es2015-minimal & stage-0 presets?",
    "created_at": "2016-12-14T16:06:07Z",
    "closed_at": "2016-12-15T17:20:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/451",
    "body": "I want to use env preset? but dependencies required those presets.\r\nWhat should I do?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/451/comments",
    "author": "budarin",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-12-14T20:58:24Z",
        "body": "Preact doesn't care which Babel presets you use - are you referring to preact-boilerplate?"
      },
      {
        "user": "budarin",
        "created_at": "2016-12-15T06:23:29Z",
        "body": "may be it's something wrong with my work configuration...\r\nthanks, will try to solve"
      },
      {
        "user": "developit",
        "created_at": "2016-12-15T17:20:37Z",
        "body": "Alright :)"
      }
    ]
  },
  {
    "number": 425,
    "title": "how to get e.keycode or e.which from event",
    "created_at": "2016-12-01T08:48:17Z",
    "closed_at": "2016-12-01T16:23:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/425",
    "body": "how to get e.keycode or e.which from event (tried using preact | preact + preact-compat)\r\n\r\n```\r\nimport { h, Component } from 'preact';\r\n\r\nexport default class Comp extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n        handleChange(e) {\r\n\t\tconsole.log(e.which);   // undefined\r\n       }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input type=\"text\" onInput={this.handleChange}/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/*\r\nevent object contains\r\nEvent {\r\n   bubbles: true\r\n   cancelBubble:false\r\n   cancelable:false\r\n   composed:false\r\n   currentTarget:null\r\n   defaultPrevented:false\r\n   eventPhase:0\r\n   isTrusted:true\r\n   path:Array[13]\r\n   returnValue:true\r\n   srcElement:input\r\n   target:input\r\n   timeStamp:5857.87\r\n   type:\"change\"\r\n   __proto__:Event\r\n}\r\n/*\r\n\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/425/comments",
    "author": "aamirshahx",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-12-01T14:28:58Z",
        "body": "Hi @nopantsmonkey! If you need to respond to keyboard input specifically, you'll want to use the onkey* handlers:\r\n\r\n```js\r\nimport { h, Component } from 'preact';\r\n\r\nexport default class Comp extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\r\n\t}\r\n\r\n        handleKeyDown(e) {\r\n\t\tconsole.log(e.which);   // the key code\r\n       }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input type=\"text\" onKeyDown={this.handleChange} />\r\n\t\t);\r\n\t}\r\n}\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2016-12-01T14:29:22Z",
        "body": "Let me know if that answers your question and we can close this issue out :)"
      },
      {
        "user": "aamirshahx",
        "created_at": "2016-12-01T16:23:55Z",
        "body": "Thank You. Closing the issue"
      }
    ]
  },
  {
    "number": 389,
    "title": "Inputs pre-filled with old values",
    "created_at": "2016-11-07T12:18:16Z",
    "closed_at": "2016-11-07T14:24:23Z",
    "labels": [
      "question",
      "discussion"
    ],
    "url": "https://github.com/preactjs/preact/issues/389",
    "body": "I'm not sure if this is a bug or my mistake, but I'm getting inputs pre-filled with old information (ex. dashboard input has username pre-filled from a signup page)\r\n\r\nI've added keys to each of the top-level pages:\r\n\r\n```js\r\ndiv.key('Login')(\r\n  input.type('text')()\r\n)\r\n```\r\n\r\n```js\r\ndiv.key('Dashboard')(\r\n  input.type('text')()\r\n)\r\n```\r\n\r\nI am able to fix this by adding keys directly to the inputs, but this makes me worry that other things aren't properly being diffed. Do parent keys apply to children in the tree as well?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/389/comments",
    "author": "matthewmueller",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-11-07T13:58:32Z",
        "body": "Hmm - I'm thinking you're getting a full diff because the old keyed root gets immediately recycled as the new one. Adding a keyed component to the tree would likely fix that. \n\nAlso the input value issue is because preact doesn't constrain DOM properties it hasn't been used to set - that means adding a value property to the inputs would reset their state when they get recycled across pages. \n"
      },
      {
        "user": "matthewmueller",
        "created_at": "2016-11-07T14:24:16Z",
        "body": "ahh got it! so the proper approach would probably be to always use controlled inputs with a value. \n\npreact's diffing algorithm is still a little bit of dark magic for me, but i'll probably dig in soon. that's a good thing though, it means it's doing it's job well!\n"
      }
    ]
  },
  {
    "number": 268,
    "title": "Question: Rendering (inserting) before instead of appending",
    "created_at": "2016-08-14T16:06:33Z",
    "closed_at": "2016-08-14T17:54:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/268",
    "body": "Maybe I've missed something. If `render` is the proper way to generate code with Preact, I can't seem to figure out the proper way to generate and insert code out-of-order. What I mean: `render` appends.\n\nFor example:\n\n``` js\nrender(<div>Post 1: Hello World</div>, document.body);\nrender(<div>Post 2: Blah Blah</div>, document.body);\n```\n\nWhich outputs:\n\n``` html\n<div>Post 1: Hello World</div>\n<div>Post 2: Blah Blah</div>\n```\n\nI want this instead:\n\n``` html\n<div>Post 2: Blah Blah</div>\n<div>Post 1: Hello World</div>\n```\n\nOther than the obvious (switching the order), or inserting proxy elements that I target instead, what should I be doing in the 2nd line so it goes before the 1st element; Or specifically, so it inserts at the top of `document.body` instead of the bottom?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/268/comments",
    "author": "mikekasprzak",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-08-14T16:55:50Z",
        "body": "@povrazor Hmm - It's fairly odd to invoke render() multiple times for a single use-case.  Is there a reason you want two top-level renders?\n\nNormally your example would be written as a component:\n\n``` js\nclass Example extends Component {\n  state = {\n    posts: [\n      { title: 'Post 1', body: 'Hello World' },\n      { title: 'Post 2', body: 'Blah Blah' }\n    ]\n  };\n  render(props, state) {\n    // we can reverse-sort posts as part of the UI rendering:\n    let posts = state.posts.slice().reverse();\n    return (\n      <div>\n        { posts.map( post => (\n          <div>\n            {post.title}: {post.body}\n          </div>\n        )) }\n      </div>\n    );\n  }\n}\n\n// finally, and generally only in one place per app, we initialize rendering:\nrender(<Example />, document.body);\n```\n\n---\n\nedit: Sorry if I missed the point here, let me know if I answered the wrong question 😛\n"
      },
      {
        "user": "mikekasprzak",
        "created_at": "2016-08-14T17:18:15Z",
        "body": "What I'm building is a bit twitter-like. It regularly polls a server for posts, and when there's something new, I need to insert the new posts at the top of the list.\n\nI guess I missed the part where render is supposed to be a one-time call. :). Apparently I made a few too many assumptions about how I should be using Preact from the samples.\n"
      },
      {
        "user": "developit",
        "created_at": "2016-08-14T17:46:46Z",
        "body": "You can definitely re-render using `render()`, just you lose a lot of the benefits of component-based design.  It's also mildly confusing because there is `render()` (`import { render } from 'preact'`) and there is also a `render()` method on components.\n\nHere's a little more fully-featured example continuing from above:\n\n``` js\nimport { h, Component, render } from 'preact';\n\nclass App extends Component {\n  state = {\n    posts: []   // we'll keep all received posts in an array\n  };\n\n  // when App is mounted, start polling for updates\n  componentDidMount() {\n    this.getUpdates();\n  }\n\n  // fetches new posts, then calls itself (to poll)\n  getUpdates = () => {\n    fetch('/updates')\n      .then( r => r.json() )\n      .then( newPosts => {\n        // grab existing posts:\n        let { posts } = this.state;\n\n        // append new ones:\n        posts = posts.concat(newPosts);\n\n        // save updated posts to state (this automatically re-renders):\n        this.setState({ posts });\n\n        // wait a sec before polling again:\n        setTimeout(this.getUpdates, 1000);\n      });\n  }\n\n  // render gets called whenever state changes.\n  // The returned JSX gets intelligently diffed against the dom.\n  render(props, state) {\n    // we can reverse-sort posts as part of the UI rendering:\n    let posts = state.posts.slice().reverse();\n    return (\n      <div>\n        { posts.map( post => (\n          <div>\n            {post.title}: {post.body}\n          </div>\n        )) }\n      </div>\n    );\n  }\n}\n\n// render and mount App. This kicks everything off.\nrender(<App />, document.body);\n```\n\nOne thing worth noting:  React/preact/etc actually simplify this kind of UI nicely, but it takes a little while to get used to the different way of doing things.  Whereas with jquery/etc you might have to know \"I want to insert new posts above existing posts\", with this component model, you only have to tell it how to render _all_ posts (whether they are new or old).  This way, determining whether new posts get injected first or last is simply a matter of choosing where to put them in an Array.\n"
      },
      {
        "user": "mikekasprzak",
        "created_at": "2016-08-14T17:53:47Z",
        "body": "Awesome. Thank you so much for the example. I think `state` and `setState` was the other detail I misunderstood that tied this all together (the re-render).\n\nThanks again for your help!\n"
      },
      {
        "user": "developit",
        "created_at": "2016-08-14T17:59:05Z",
        "body": "Happy to help :) Hopefully I'll have some time to put better documentation together - I'd like to do some tutorials and such, perhaps on EggHead.io.\n"
      }
    ]
  },
  {
    "number": 166,
    "title": "Gulp/Browserify integration",
    "created_at": "2016-05-29T18:05:51Z",
    "closed_at": "2016-05-29T20:54:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/166",
    "body": "Hi,\n\nI love the idea, but I'm not sure how to get it to compile jsx for preact.\n\nThis is my gulp task:\n\n``` javascript\ngulp.task('scripts', function() {\n    var b = browserify({\n            \"entries\": ['app/js/app.js'],\n            transform: [babelify]\n        });\n\n    return b.bundle()\n        .pipe(source('app.min.js'))\n        .pipe(buffer())\n        .pipe(sourcemaps.init({loadMaps: true}))\n            .on('error', gutil.log)\n        .pipe(sourcemaps.write('../maps/js'))\n        .pipe(gulp.dest('dist/js'))\n        .pipe(notify(\"Built JS!\"));\n});\n```\n\nIf I added `reactify` to the transforms, it compiled, but transformed my code into `React.createElement`.\n\nI'm obviously way off course. What's the right way to do this?\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/166/comments",
    "author": "whatisjasongoldstein",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-05-29T18:12:06Z",
        "body": "Reactify doesn't seem to provide an option to set the JSX pragma. I would recommend using `babelify` to do your JSX transformation instead, since that's the officially supported method both for react and preact. For Babel 6, you need to install `babel-preset-react`, and then tell the JSX plugin to use `h` for JSX.\n\nExample `.babelrc`:\n\n``` js\n{\n  \"presets\": [\"react\"],\n  \"plugins\": [\n    [\"transform-react-jsx\",{\"pragma\":\"h\"}]\n  ]\n}\n```\n\nLet me know if that makes sense!\n"
      },
      {
        "user": "whatisjasongoldstein",
        "created_at": "2016-05-29T20:54:14Z",
        "body": "Yes, that worked. Thanks!\n"
      },
      {
        "user": "developit",
        "created_at": "2016-05-29T20:54:41Z",
        "body": "Awesome :)\n"
      },
      {
        "user": "foreshadow",
        "created_at": "2017-09-18T09:29:26Z",
        "body": "Hi, i am new to preact.\r\nAfter reading comments above, i still cannot figure out how to compile jsx for preact.\r\nI used to use\r\n```javascript\r\ngulp.src('*.jsx')\r\n    .pipe(react())\r\n    .pipe(gulp.dest('dist/js'))\r\n```\r\nto compile it.\r\nSo what should I replace `react()` with?"
      },
      {
        "user": "bestwestern",
        "created_at": "2018-02-01T18:54:10Z",
        "body": "@whatisjasongoldstein could you please post what you did to make it work? "
      },
      {
        "user": "whatisjasongoldstein",
        "created_at": "2018-02-03T00:16:06Z",
        "body": "I would but unfortunately I'm not even sure which project I was working in when I asked the question. From the comments, I think the `.babelrc` file, which configures babel in the directory, was the only thing I was missing."
      }
    ]
  },
  {
    "number": 1279,
    "title": "TS: createRef not an exported member",
    "created_at": "2018-12-18T13:14:11Z",
    "closed_at": "2018-12-22T18:36:50Z",
    "labels": [
      "help wanted",
      "beginner-friendly",
      "types"
    ],
    "url": "https://github.com/preactjs/preact/issues/1279",
    "body": "```bash\r\n ERROR [at-loader] ./src/components/AppNavbar.tsx:1:21\r\n    TS2305: Module '\"/home/solarliner/Documents/Projects/Website/test-rest-framework/preact-frontend/node_modules/preact/dist/preact\"' has no exported member 'createRef'.\r\n```\r\n\r\nI have version 8.4.2, and checked the installed package to see if the javascript contains the function (it does). It seems that the TypeScript definition file hasn't been updated for the inclusion of `createRef` yet.",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1279/comments",
    "author": "SolarLiner",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-12-19T21:51:25Z",
        "body": "Good catch! Want to PR it? :)"
      },
      {
        "user": "SolarLiner",
        "created_at": "2018-12-19T22:14:57Z",
        "body": "I've been playing with the definitions file and couldn't find a way to make it work. If somebody finds a way before me, please do send a PR, otherwise when I do I will!"
      }
    ]
  }
]