[
  {
    "number": 2809,
    "title": "Object Destructuring - which is the best style if value is not guaranteed to exist?",
    "created_at": "2023-08-09T16:33:00Z",
    "closed_at": "2023-08-09T20:42:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2809",
    "body": "Question, please: \r\n\r\nIn the following example, it is not guaranteed that `dates` will always exist. \r\n\r\n```js\r\n   #handleDates(event) {                                                                                  \r\n      const { currentValue } = event?.dates;                                                               \r\n      const hasBothDates = this.#checkDates(currentValue);                                                 \r\n                                                                                                           \r\n      if (hasBothDates) {                                                                                  \r\n        this.#fetchResources();                                                                            \r\n      }                                                                                                    \r\n    }                                                                                                      \r\n                                                                                                           \r\n    ngOnChanges(event: SimpleChanges) {                                                                    \r\n      this.#handleDates(event);                                                                            \r\n    }   \r\n ```\r\n In which case, would this be better would Case A or Case B be better? \r\n\r\nCase A\r\n```js\r\n    #handleDates(event) {\r\n      const { currentValue } = event.dates ?? { currentValue: '' };\r\n      const hasBothDates = this.#checkDates(currentValue);\r\n                                               \r\n      if (hasBothDates) {                      \r\n        this.#fetchResources();                \r\n      }                                        \r\n    }  \r\n```\r\nCase B\r\n```js\r\n    #handleDates(event) {\r\n      const hasBothDates = this.#checkDates(event?.dates?.currentValue);\r\n                                               \r\n      if (hasBothDates) {                      \r\n        this.#fetchResources();                \r\n      }                                        \r\n    } \r\n```\r\n\r\n \r\n ",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2809/comments",
    "author": "dman777",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2023-08-09T20:42:11Z",
        "body": "These are different; A only calls checkDates with `event.dates` or an empty string, B calls it with `event.dates` or `undefined`.\r\n\r\nIf these have the same semantics - in particular, if checkDates defaults the value to `''` or doesn't care when it's a non-string - then i'd probably go with B to avoid creating a throwaway object."
      }
    ]
  },
  {
    "number": 2691,
    "title": "How can I contribute to this great open-source ?",
    "created_at": "2022-12-11T16:13:16Z",
    "closed_at": "2022-12-11T17:40:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2691",
    "body": "Hi everyone ✋🏾, I found this project quite interesting, so I yearn to contribute. As a newbie, how can I start contributing to this great project ?\r\n\r\nI mean, what are the steps I need to follow or go through fundamentally so that I am in a position to contribute fruitfully ??",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2691/comments",
    "author": "ProPhycient5",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2022-12-11T17:40:53Z",
        "body": "There's not much that needs contribution here, but you could look for issues with the \"help wanted\" label."
      },
      {
        "user": "ProPhycient5",
        "created_at": "2022-12-12T16:01:51Z",
        "body": "okay @ljharb "
      }
    ]
  },
  {
    "number": 2656,
    "title": "What is the monorepo best practice using airbnb-base and airbnb",
    "created_at": "2022-10-14T04:42:05Z",
    "closed_at": "2022-10-14T04:48:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2656",
    "body": "I gonna make monorepo project which has two difference env project.( node version and react version ) \r\n\r\nSo I want to build like this\r\n```\r\n// .eslintrc.root.js\r\nmodule.export = {\r\n  \"extends\": [\r\n    \"airbnb-base\",\r\n  ]\r\n};\r\n```\r\n\r\n// react-project/eslintrc.js\r\n```\r\nmodule.export = {\r\n  \"extends\": [\r\n    \"../.eslintrc.root.js\",\r\n    \"airbnb-react\" // there isn't yet\r\n  ]\r\n};\r\n```\r\n\r\n// node-project/eslintrc.js\r\n```\r\nmodule.export = {\r\n  \"extends\": [\r\n    \"../.eslintrc.root.js\"\r\n  ]\r\n};\r\n```\r\n\r\nI was able to find only `airbnb-base` and `airbnb` plugin.\r\n\r\nCan I make `airbnb-base` root settings and extend the react rules in `airbnb` at sub-workspaces?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2656/comments",
    "author": "jiwon-mun",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2022-10-14T04:44:35Z",
        "body": "That seems fine, it's just that the react one is `\"extends\": [\"airbnb\"]`."
      },
      {
        "user": "jiwon-mun",
        "created_at": "2022-10-14T04:48:02Z",
        "body": "Thank you for quick response. :)"
      },
      {
        "user": "eudinnou",
        "created_at": "2023-11-03T14:23:12Z",
        "body": "@ljharb but doesn't this mean that the rules will run twice? or if a rule option in the root eslintrc file is changed, it's going to be ignored?"
      },
      {
        "user": "ljharb",
        "created_at": "2023-11-03T14:27:10Z",
        "body": "No, rules can’t run twice, but yes, it means that an override at the root won’t affect the nested directory."
      },
      {
        "user": "eudinnou",
        "created_at": "2023-11-03T14:32:22Z",
        "body": "you are fast, thanks!"
      }
    ]
  },
  {
    "number": 2585,
    "title": "Since use of 'ForOfStatement' is not allowed and 'no-param-reassign'",
    "created_at": "2022-04-01T06:13:23Z",
    "closed_at": "2022-04-01T06:23:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2585",
    "body": "I have read the whole thread of #1271 and #851, knowing this has been discussed thousands of times. However I still have problems with how to update a property of each item in an array like following code?\r\n\r\n```js\r\nfor (const item of list) {\r\n  item.prop1.prop2.prop3 += 1;\r\n}\r\n```\r\n\r\nIt's not allowed to rewrite as following code for 'no-param-reassign'.\r\n\r\n```js\r\nlist.forEach((item) => {\r\n  item.prop1.prop2.prop3 += 1;  // 'no-param-reassign' issue\r\n})\r\n```\r\n\r\nIt seems that the only way is replacing with a new array by `Array.map()` but what if the property is deep level as above? Should I write like this?\r\n```js\r\nlist = list.map((item) => ({\r\n  ...item,\r\n  prop1: {\r\n    ...item.prop1,\r\n    prop2: {\r\n      ...item.prop1.prop2,\r\n      prop3: item.prop1.prop2.prop3 + 1,\r\n    },\r\n  },\r\n}));\r\n```\r\n\r\nThanks for suggestions!",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2585/comments",
    "author": "SeasideLee",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2022-04-01T06:23:18Z",
        "body": "Yes, you should write it like that last example - mutation should be avoided, as should loops. I'd also suggest not reassigning to `list`, and making a new variable instead."
      }
    ]
  },
  {
    "number": 2570,
    "title": "Style for Negative Variables",
    "created_at": "2022-03-09T04:02:23Z",
    "closed_at": "2022-03-09T04:47:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2570",
    "body": "Hello, and thanks for the excellent style guide.\r\n\r\nDoes Airbnb take a stance on negative variables? For example,\r\n\r\n```js\r\nconst foo = bar * -1;\r\n```\r\n```js\r\nconst foo = -bar;\r\n```\r\n\r\nWhich is preferred? Which is easier to read, if any? Which could lead to less bugs, if any?\r\nThese are all questions I am thinking about, but the answer isn't clear to me.\r\n\r\nRelated: Rule 19.4 says to \"Set off operators with spaces\". Thus, it seems that the second code snippet isn't compliant with this rule. On the other hand, I'm not sure that it would apply in this situation.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2570/comments",
    "author": "Zamiell",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2022-03-09T04:47:56Z",
        "body": "I don't think \"negative variables\" is really a term that exists :-)\r\n\r\nPersonally I'd use the latter, but I think it depends on the context - if it's next to other multiplications, maybe the former would make more sense. I don't think it's a common enough problem to have come up.\r\n\r\n19.4 refers to binary operators; unary operators like `-` here should not have a space between the operator and the operand."
      }
    ]
  },
  {
    "number": 2497,
    "title": "Incorrect error `no-promise-executor-return`",
    "created_at": "2021-11-10T17:04:48Z",
    "closed_at": "2021-11-10T20:52:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2497",
    "body": "This is new error when using `eslint-config-airbnb-base` 15.0, it was not present in 14.x\r\n\r\nThis syntax\r\n```js\r\n  const wait= new Promise((resolve) => setTimeout(() => resolve(true), time));\r\n```\r\nTriggers:\r\n> error  Return values from promise executor functions cannot be read  no-promise-executor-return\r\n\r\nSimply wrapping function like this makes the problem disappear\r\n```js\r\n  const wait= new Promise((resolve) => setTimeout(() => { resolve(true), time); });\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2497/comments",
    "author": "vladmandic",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-11-10T20:52:28Z",
        "body": "The bug (in the core rule) is that the second one works. The proper way to do this is:\r\n\r\n```js\r\nconst wait= new Promise((resolve) => { setTimeout(() => resolve(true), time); });\r\n```\r\n\r\nUsing the concise form of an arrow function is good when the return value matters; it's harmful when the return value does not matter, which is the case for Promise executor functions."
      }
    ]
  },
  {
    "number": 2447,
    "title": "[react] - which one good and which one isn't?",
    "created_at": "2021-07-06T19:35:54Z",
    "closed_at": "2021-07-06T23:19:34Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2447",
    "body": "# Hi Developers :wave: \r\n\r\n## which one is better?\r\n> 1, 2, 3, 4, 5\r\n>\r\n> and why? :thinking: \r\n\r\n> NOTE : i using class instead className, just for clean view :hugs: :v: \r\n\r\n**1**\r\n```jsx\r\nfunction Parent({ children }) {\r\n  return <div class=\"parent\">{children}</div>;\r\n}\r\n```\r\n---\r\n\r\n**2**\r\n```jsx\r\nfunction Parent({ children }) {\r\n  return <div class=\"parent\">{children.map((child) => child)}</div>;\r\n}\r\n```\r\n---\r\n\r\n**3**\r\n```jsx\r\nfunction Parent({ children }) {\r\n  return (\r\n    <div class=\"parent\">{React.Children.map(children, (child) => child)}</div>\r\n  );\r\n}\r\n```\r\n---\r\n\r\n**4**\r\n```jsx\r\nfunction Parent({ children }) {\r\n  return (\r\n    <div class=\"parent\">\r\n      {children.map((Child) => (\r\n        <Child />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n```\r\n---\r\n\r\n**5**\r\n```jsx\r\nfunction Parent({ children }) {\r\n  return (\r\n    <div class=\"parent\">\r\n      {React.Children.map(children, (Child) => (\r\n        <Child />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n```\r\n---\r\n\r\n\r\nthanks for your answering :heart: :+1: ",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2447/comments",
    "author": "mikoloism",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-07-06T23:19:33Z",
        "body": "2 and 3 are completely useless. 4 and 5 only works if every child is a component, which it probably won’t be. \r\n\r\nSo, only 1 makes even the tiniest amount of sense."
      },
      {
        "user": "mikoloism",
        "created_at": "2021-07-07T18:53:35Z",
        "body": "> 2 and 3 are completely useless. 4 and 5 only works if every child is a component, which it probably won’t be.\r\n> \r\n> So, only 1 makes even the tiniest amount of sense.\r\n\r\n# Thankfully :heart: :v: \r\n\r\n\r\nand what about below syntax? :thinking: \r\n```jsx\r\nfunction Parent({ children }) {\r\n  return <div class=\"parent\">{...children}</div>;\r\n}\r\n``` "
      },
      {
        "user": "ljharb",
        "created_at": "2021-07-07T19:55:35Z",
        "body": "I don't believe that's valid syntax in JSX, so that wouldn't even compile. Have you tried it?"
      },
      {
        "user": "mikoloism",
        "created_at": "2021-07-08T18:57:46Z",
        "body": "> I don't believe that's valid syntax in JSX, so that wouldn't even compile. Have you tried it?\r\n\r\nyes, I'm tried and give me **ERROR** :smile: \r\n\r\n\r\nthankful :heart: :heart: "
      }
    ]
  },
  {
    "number": 2442,
    "title": "JSX Syntax or Call As Functions?",
    "created_at": "2021-06-29T18:08:48Z",
    "closed_at": "2021-06-29T18:17:14Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2442",
    "body": "# Which one is SIMPLE?\r\n- [x] jsx syntax\r\n- [ ] call as function\r\n\r\n## ??????\r\n\r\n### Components\r\n\r\n``` jsx\r\n// ./MyComponent.jsx\r\nimport React from 'react';\r\n\r\nfunction MyComponent(props){\r\n  return <span style=\"color: red\"> my-component </span>;\r\n}\r\n\r\nexport default MyComponent;\r\n```\r\n\r\n### JSX Syntax\r\n\r\n> i meant JSX-DOM :sweat_smile: \r\n\r\n``` jsx\r\n// ./MyParent.jsx\r\nimport React from 'react';\r\nimport MyComponent from './MyComponent.jsx';\r\n\r\nfunction MyParent(props){\r\n  return (\r\n    <main>\r\n      <h1> my-parent </h1>\r\n      <MyComponent />\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default MyParent;\r\n```\r\n### Call As Function\r\n\r\n``` jsx\r\n// ./MyParent.jsx\r\nimport React from 'react';\r\nimport MyComponent from './MyComponent.jsx';\r\n\r\nfunction MyParent(props){\r\n  return (\r\n    <main>\r\n      <h1> my-parent </h1>\r\n      { MyComponent() }\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default MyParent;\r\n```\r\n\r\n\r\n## OR\r\n\r\nthis is possible use CAF (call-as-function)? :thinking: \r\nand this is good or bad style guid for react? :thinking: \r\n\r\nthank everyone :hugs: \r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2442/comments",
    "author": "mikoloism",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-06-29T18:17:14Z",
        "body": "Never, ever, call a component as a function. This breaks hooks and a bunch of other aspects of React."
      },
      {
        "user": "mikoloism",
        "created_at": "2021-06-29T19:26:40Z",
        "body": "> Never, ever, call a component as a function. This breaks hooks and a bunch of other aspects of React.\r\n# Thanks @ljharb :heart: \r\n"
      },
      {
        "user": "mikoloism",
        "created_at": "2021-06-29T19:37:45Z",
        "body": "# And ...\r\n\r\nand what about variables?\r\nalike\r\n``` jsx\r\n// ./MyComp.jsx\r\nconst MyComp = (<div> ... </div>);\r\n\r\nexport default MyComp;\r\n```\r\nand import usage\r\n``` jsx\r\n// ./MyParent.jsx\r\nimport React from 'react';\r\nimport MyComp from './MyComp.jsx';\r\n\r\nfunction MyParent(){\r\n  return(\r\n    <main>\r\n    ... stuff jsx\r\n    { logic && (MyComp) }\r\n    </main>\r\n  )\r\n}\r\n\r\n```\r\n\r\n- [x] is this possible? :thinking: "
      },
      {
        "user": "ljharb",
        "created_at": "2021-06-29T19:40:39Z",
        "body": "That is quite possible, but it's pretty weird to make jsx at module level (as opposed to inside a component), and it's even weirder to export it. The atom you should be preferring is \"component\", not \"jsx\"."
      },
      {
        "user": "mikoloism",
        "created_at": "2021-06-29T20:03:35Z",
        "body": "# Thanks Again :heart: :star:"
      }
    ]
  },
  {
    "number": 2441,
    "title": "Is `constructor` required for class components?",
    "created_at": "2021-06-29T16:28:28Z",
    "closed_at": "2021-06-29T16:51:54Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2441",
    "body": "# Is `constructor` required for class components?\r\n\r\nHi Everyone :wave:,\r\nso, can i use class component alike below? :thinking: \r\n```jsx\r\n// is this good?\r\nclass MyComponent extends React.Component {\r\n  render(){\r\n    return <div>...</div>;\r\n  }\r\n};\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2441/comments",
    "author": "mikoloism",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-06-29T16:32:47Z",
        "body": "It is not required, and should be omitted from any class that doesn’t use constructor arguments directly.\r\n\r\nIn this case, that should be a functional component."
      },
      {
        "user": "mikoloism",
        "created_at": "2021-06-29T16:43:15Z",
        "body": "> It is not required, and should be omitted from any class that doesn’t use constructor arguments directly.\r\n> \r\n> In this case, that should be a functional component.\r\n\r\n### :heart: :star_struck:\r\n**thank you** :heart_eyes:\r\n> yes, i should use function component, but i did it **simple** :+1: "
      }
    ]
  },
  {
    "number": 2439,
    "title": "why javascript have to be like c ?",
    "created_at": "2021-06-25T02:47:30Z",
    "closed_at": "2021-08-20T18:52:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2439",
    "body": "why there are so much rules that match c language syntax, that mean the es will to be next generation c language?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2439/comments",
    "author": "nfwyst",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-06-25T02:49:04Z",
        "body": "I'm not sure what you mean specifically, but C was one of the major inspirations for JS, so it's not an accident that they're similar in a lot of ways.\r\n\r\nWhat rules do you think match idiomatic C and are also surprising?"
      },
      {
        "user": "VilgotanL",
        "created_at": "2021-08-20T18:49:57Z",
        "body": "This question is kinda weird because half of all programming languages are inspired by C\r\nSuch as Java, Javascript, C++, C#, PHP, Rust, Dart, and many more\r\nThose have similar syntax to C but almost all others are inspired in some way by C"
      }
    ]
  },
  {
    "number": 2409,
    "title": "Why not commit lockfiles? (package-lock.json)",
    "created_at": "2021-03-30T18:10:11Z",
    "closed_at": "2021-03-30T18:12:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2409",
    "body": "I just noticed that you guys have decided to not commit the npm lockfile `package-lock.json`, although the general consensus is to do so. I'm curious why you have done that, as I don't really understand the purpose of it either.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2409/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-03-30T18:12:08Z",
        "body": "Only apps should have lockfiles.\r\n\r\nDev-only lockfiles (package-lock.json and yarn.lock) achieve nothing in a package except artificially insulating maintainers from problems their users will experience. It's thus hostile to a package's consumers to use a lockfile.\r\n\r\nThere is no \"general consensus\" to do so, there's mostly just \"npm's default behavior\" which the majority cargo-cults."
      },
      {
        "user": "ghost",
        "created_at": "2021-03-30T18:22:21Z",
        "body": "@ljharb Thanks for answering, but I'd just like to clarify what you're saying here: Because the only packages declared in `package.json` are for development, there's no need for a lockfile? Shouldn't the lockfile still provide consistency across development environments because it contains the whole dependency tree? I also don't really understand how having a lockfile would affect consumers of the `eslint-config-airbnb*` packages negatively?"
      },
      {
        "user": "ljharb",
        "created_at": "2021-03-30T18:30:39Z",
        "body": "No, that's not what I'm saying. I'm saying that package-lock doesn't get published - so, consumers of a package don't \"get\" that lockfile. So, consumers will get the latest version of both direct and transitive dependencies - but the package was only tested with \"whatever is in its lockfile\", so the package's tests might be passing while the consumers' code is broken."
      },
      {
        "user": "ghost",
        "created_at": "2021-03-30T18:35:14Z",
        "body": "@ljharb And how are misleading CI test results and broken consumer code good? ^^"
      },
      {
        "user": "ljharb",
        "created_at": "2021-03-30T18:59:30Z",
        "body": "They're not - that's what \"having a lockfile\" gets you."
      }
    ]
  },
  {
    "number": 2395,
    "title": "How to Properly Setup the Extends Array",
    "created_at": "2021-02-23T09:23:01Z",
    "closed_at": "2021-02-23T16:18:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2395",
    "body": "This is my current setup of the `extends` array in my `.eslintrc.js` file:\r\n\r\n```\r\n  extends: [\r\n    'plugin:react/recommended',\r\n    'plugin:react-hooks/recommended',\r\n    'airbnb',\r\n    'airbnb/hooks',\r\n    'plugin:@typescript-eslint/recommended',\r\n    'plugin:prettier/recommended',\r\n  ],\r\n```\r\n\r\nI am not sure, though, that I did this the right way.  Here are my questions.\r\n\r\nFirst, do I need to include either `'plugin:react/recommended'` or `'plugin:react-hooks/recommended'`?\r\n\r\nSecondly, if I do need to include those plugins, do I place them **before** `airbnb` and `airbnb/hooks` or **after**?  In other words, should it be like this:\r\n\r\n```\r\n  extends: [\r\n    'plugin:react/recommended',\r\n    'plugin:react-hooks/recommended',\r\n    'airbnb',\r\n    'airbnb/hooks',\r\n    ...\r\n  ],\r\n```\r\n\r\nOr like this:\r\n\r\n```\r\n  extends: [\r\n    'airbnb',\r\n    'airbnb/hooks',\r\n    'plugin:react/recommended',\r\n    'plugin:react-hooks/recommended',\r\n    ...\r\n  ],\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2395/comments",
    "author": "thecodeclimber",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-02-23T15:31:55Z",
        "body": "Generally you wouldn’t want to include either of those, since the Airbnb config handles both:\r\n```\r\n“extends”: [\r\n  “airbnb”,\r\n  “airbnb/hooks”,\r\n]\r\n```\r\nshould be sufficient."
      },
      {
        "user": "thecodeclimber",
        "created_at": "2021-02-23T16:01:25Z",
        "body": "Thanks :)"
      }
    ]
  },
  {
    "number": 2375,
    "title": "arrow-body-style / max-len conflict",
    "created_at": "2021-02-10T13:25:07Z",
    "closed_at": "2021-02-10T15:23:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2375",
    "body": "Hi,\r\n\r\nI hope this is the right place to report this, but I'm having the following issue:\r\n\r\nI have this code that throws a \"**This line has a length of 108. Maximum allowed is 100. eslint(max-len)**\" error.\r\n`UserSchema.methods.comparePassword = (password, hashPassword) => bcrypt.compareSync(password, hashPassword);`\r\n\r\nIf I create a block for the function I get another error: \"**Unexpected block statement surrounding arrow body; move the returned value immediately after the \\`=>\\`. eslint(arrow-body-style)**\".\r\n`UserSchema.methods.comparePassword = (password, hashPassword) => {`\r\n`  return bcrypt.compareSync(password, hashPassword);`\r\n`};`\r\n\r\nIs there a way to fix this without disabling any of the rules?\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2375/comments",
    "author": "NYKOL4Z",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-02-10T15:23:39Z",
        "body": "Here’s a few possibilities:\r\n```jsx\r\nUserSchema.methods.comparePassword = (password, hashPassword) => bcrypt.compareSync(\r\n  password,\r\n  hashPassword,\r\n);\r\n```\r\n\r\n```jsx\r\nUserSchema.methods.comparePassword = (\r\n  password,\r\n  hashPassword,\r\n) => bcrypt.compareSync(\r\n  password,\r\n  hashPassword,\r\n);\r\n```"
      }
    ]
  },
  {
    "number": 2367,
    "title": "Receiving defined but never used while using in another file ",
    "created_at": "2021-01-25T09:41:41Z",
    "closed_at": "2021-01-25T21:38:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2367",
    "body": "I am not using es6 modules I just include my scripts in the html file.\r\n`    <script language=\"javascript\" type=\"text/javascript\" src=\"./scripts/processhandling.js\"></script>\r\n`\r\n\r\nI call the functions in the html or in other scripts but the linter says `aodv_clear_statistics' is defined but never used.eslintno-unused-vars` because I don't call it in the same file.\r\n\r\nHow can I avoid this or how can I turn off this rule?\r\n\r\nHere my .eslintrc.json\r\n```\r\n{\r\n    \"env\": {\r\n        \"browser\": true,\r\n        \"es2021\": true,\r\n        \"node\": true\r\n    },\r\n    \"extends\": [\r\n        \"airbnb-base\"\r\n    ],\r\n    \"parserOptions\": {\r\n        \"ecmaVersion\": 12\r\n    },\r\n    \"rules\": {\r\n    }\r\n}\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2367/comments",
    "author": "CreaTorAlexander",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2021-01-25T21:38:22Z",
        "body": "This guide assumes that you're using modules - whether CJS or ESM modules - which is something modern web dev requires.\r\n\r\nYou can add `/* globals aodv_clear_statistics */`, i believe, to tell eslint to treat that variable like it's a global, but the proper solution is to use modules (CJS modules, with a bundler, is just fine) and *not* to have any globals whatsoever."
      }
    ]
  },
  {
    "number": 2345,
    "title": "Ambiguous rules",
    "created_at": "2020-11-25T17:43:45Z",
    "closed_at": "2020-11-25T23:43:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2345",
    "body": "16.1\r\n// good\r\nif (test) return false;\r\n// bad\r\nfunction foo() { return false; }\r\n\r\n19.14\r\n// good\r\nfunction foo() { return true; }\r\nif (foo) { bar = 0; }\r\n\r\nDo I need braces for if with only one line of statements?\r\nIs the writing of this function good or bad?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2345/comments",
    "author": "sailxy",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2020-11-25T23:43:39Z",
        "body": "The guide requires braces with multiline statements; it strongly recommends using them with one-line statements, but the linter config does not enforce it on one-line statements."
      }
    ]
  },
  {
    "number": 2273,
    "title": "about array add a item question",
    "created_at": "2020-08-17T06:40:51Z",
    "closed_at": "2020-08-18T01:51:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2273",
    "body": "* please see this\r\n```js\r\n  let arr = []\r\n  const template = new Array(100).fill(1)\r\n  /**********************method first***********************/\r\n  template.forEach(i=>{\r\n    arr.push(i)  // look this arr\r\n  })\r\n```\r\n```js\r\n  let arr = []\r\n  const template = new Array(100).fill(1)\r\n  /**********************method second***********************/\r\n  template.forEach((i,index)=>{\r\n    arr[index] = i //look this arr\r\n  })\r\n```\r\nI wonder what is the difference between these two methods!\r\nplease tell me, thank you!!!\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2273/comments",
    "author": "zhoufanglu",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2020-08-17T06:48:04Z",
        "body": "Don't ever use `new Array`, for one - that creates a sparse array.\r\n\r\nSpecifically, this is what you should be doing for this case:\r\n```js\r\nconst template = Array.from({ length: 100 }, (, i) => i);\r\n```"
      },
      {
        "user": "zhoufanglu",
        "created_at": "2020-08-17T06:51:29Z",
        "body": "> Don't ever use `new Array`, for one - that creates a sparse array.\r\n> \r\n> Specifically, this is what you should be doing for this case:\r\n> \r\n> ```js\r\n> const template = Array.from({ length: 100 }, (, i) => i);\r\n> ```\r\n\r\nOk, Thank you for telling me about array creation, But my problem is the new items in the array"
      },
      {
        "user": "ljharb",
        "created_at": "2020-08-17T06:53:51Z",
        "body": "What new items?"
      },
      {
        "user": "zhoufanglu",
        "created_at": "2020-08-17T07:04:03Z",
        "body": "> What new items?\r\n\r\nI made a mistake in the demo before, so I modified it. Please check it again\r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2020-08-17T07:11:57Z",
        "body": "I'm still confused. This guide tells you to avoid mutation, so if you want a range of 0 to 99 in an array, you do it when creating that array - not via `push`.\r\n\r\nIn other words, never add anything to an array - create a new array with `concat` that has the original items, and the new ones."
      },
      {
        "user": "zhoufanglu",
        "created_at": "2020-08-17T07:22:58Z",
        "body": "> I'm still confused. This guide tells you to avoid mutation, so if you want a range of 0 to 99 in an array, you do it when creating that array - not via `push`.\r\n> \r\n> In other words, never add anything to an array - create a new array with `concat` that has the original items, and the new ones.\r\n\r\nsorry, My English is a little bad, using software translation.   \r\nLook at the example above, The `arr` results are the same, What is the difference between the two implementations？"
      },
      {
        "user": "ljharb",
        "created_at": "2020-08-17T20:06:53Z",
        "body": "Between the two you provided - both of which you should avoid - the difference is that `.push` is a clearer and also likely more optimized way to add an item to an array than \"writing an index just out of bounds\" is."
      },
      {
        "user": "zhoufanglu",
        "created_at": "2020-08-18T01:51:57Z",
        "body": "> Between the two you provided - both of which you should avoid - the difference is that `.push` is a clearer and also likely more optimized way to add an item to an array than \"writing an index just out of bounds\" is.\r\n\r\nThank you for your answer！"
      }
    ]
  },
  {
    "number": 2199,
    "title": "the demo of 4.7 in 'Table of Contents'",
    "created_at": "2020-03-22T06:27:56Z",
    "closed_at": "2020-03-22T06:29:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2199",
    "body": "the demo is the same\r\n```js\r\n// bad\r\ninbox.filter((msg) => {\r\n  const { subject, author } = msg;\r\n  if (subject === 'Mockingbird') {\r\n    return author === 'Harper Lee';\r\n  } else {\r\n    return false;\r\n  }\r\n});\r\n\r\n// good\r\ninbox.filter((msg) => {\r\n  const { subject, author } = msg;\r\n  if (subject === 'Mockingbird') {\r\n    return author === 'Harper Lee';\r\n  }\r\n\r\n  return false;\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2199/comments",
    "author": "shuyanzi",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2020-03-22T06:29:52Z",
        "body": "It's functionally equivalent, but the code is different - in the \"bad\" case, there's an unnecessary \"else\"."
      },
      {
        "user": "shuyanzi",
        "created_at": "2020-03-22T06:40:07Z",
        "body": "> It's functionally equivalent, but the code is different - in the \"bad\" case, there's an unnecessary \"else\".\r\n\r\noh! I didn't see, tks for your reply\r\n\r\nit's more concise, right?"
      }
    ]
  },
  {
    "number": 2191,
    "title": "Question about the naming convention",
    "created_at": "2020-03-07T14:08:14Z",
    "closed_at": "2020-03-07T21:54:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2191",
    "body": "I have a question about the naming convention, I need to define and export namespace object, should it be PascalCased or not?\r\nthe styleguide specifies:\r\n_23.3 Use PascalCase only when naming constructors or classes. eslint: new-cap_\r\nbut then, there is this statement:\r\n_23.8 Use PascalCase when you export a constructor / class / singleton / function library / bare object._\r\nIt looks for me like a contradiction. I can't wrap my head around it, please help.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2191/comments",
    "author": "bfunc",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2020-03-07T17:02:11Z",
        "body": "Can you provide some code? “export namespace object” sounds like you’re using export syntax, but also exporting a single object rather than using individual named exports."
      },
      {
        "user": "bfunc",
        "created_at": "2020-03-07T21:21:06Z",
        "body": "Sure, should be a diffrence in regular naming i.e defining a const and export?\r\n\r\n**Code examples:**\r\nfirst one, pretty sure the naming in camelCase is right here\r\n```javascript\r\nconst someState = {\r\n    pages: {\r\n        selected: 'info',\r\n        list: [\r\n            { key: 'info', name: 'Info' },\r\n            { key: 'users', name: 'Users' }\r\n        ]\r\n    }\r\n}\r\n\r\nexport default someState ;\r\nexport { someState as intialState};\r\n```\r\nand second one, PascalCased as stated in guide (23.8), is it right? it is basically the same object (not constructor) as first one..\r\n```javascript\r\nconst MyApp = {\r\n    author: 'Peter Griffin'\r\n}\r\n\r\nexport default MyApp;\r\nexport { MyApp as App};\r\n```\r\n\r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2020-03-07T21:30:24Z",
        "body": "That looks right (altho it’s not good to export it twice; it’s either what the module *is*, and thus the default export, or it’s something the module *has*, and thus a named export)"
      },
      {
        "user": "bfunc",
        "created_at": "2020-03-07T21:36:51Z",
        "body": "Please do not pay attention for export twice, is just for example. My question is more about defining constant name rather that export name.\r\nI cannot understand why in one case naming should be in CamelCase and in other in PascalCase, while it is same instance types? Yes, in this example there is difference in meaning, but it is subtle and easly can be messed up in different cases.. is there a strict rule how those cases can be differentiated? "
      },
      {
        "user": "ljharb",
        "created_at": "2020-03-07T21:38:48Z",
        "body": "No, like many things, it's a conceptual difference, and requires human decision."
      },
      {
        "user": "bfunc",
        "created_at": "2020-03-07T21:43:46Z",
        "body": "Ok, I got the point. Just double check\r\n```javascript\r\n// this is bad\r\nconst InitialState = {\r\n    pages: {\r\n        selected: 'info'\r\n    }\r\n}\r\n```\r\n```javascript\r\n// this is not good (better to be PascalCase), but ok\r\nconst myApp = {\r\n    title: 'SuperApp'\r\n}\r\n```\r\nIs it right?\r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2020-03-07T21:46:28Z",
        "body": "Yes, both of those seem incorrect to me."
      },
      {
        "user": "bfunc",
        "created_at": "2020-03-07T21:48:33Z",
        "body": "@ljharb thank you for clearing things up"
      }
    ]
  },
  {
    "number": 2082,
    "title": "How to address consistent-return & array-callback-return with condition",
    "created_at": "2019-08-28T12:07:46Z",
    "closed_at": "2019-08-28T14:53:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2082",
    "body": "How should I properly address the following:\r\n\r\n```js\r\nconst things = [\r\n  {\r\n    toy: 'lego',\r\n  },\r\n  {\r\n    ball: 'football',\r\n  },\r\n  {\r\n    series: 'spongebob',\r\n  },\r\n]\r\n\r\nconst newThings = things.map((item) => {\r\n  if (item.toy) {\r\n    return item.toy.toUpperCase();\r\n  }\r\n}).filter((n) => n);\r\n\r\n```\r\n\r\n// eslint error for consistent-return & array-callback-return",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2082/comments",
    "author": "gkatsanos",
    "comments": [
      {
        "user": "alfredosalzillo",
        "created_at": "2019-08-28T13:05:44Z",
        "body": "Function and Arrow with at least one return should always return. In your case, if `item.toy` is falsy you return nothing.\r\n\r\n```javascript\r\nconst newThings = things.map((item) => {\r\n  if (item.toy) {\r\n    return item.toy.toUpperCase();\r\n  }\r\n return null;\r\n}).filter((n) => n);\r\n```"
      },
      {
        "user": "gkatsanos",
        "created_at": "2019-08-28T13:24:33Z",
        "body": "I figured inverting the methods solves my issue: \r\n```js\r\nconst newThings = things\r\n  .filter((n) => n)\r\n  .map((item) => item.toy.toUpperCase());\r\n```"
      },
      {
        "user": "ljharb",
        "created_at": "2019-08-28T14:53:46Z",
        "body": "Also, `.filter(Boolean)`."
      }
    ]
  },
  {
    "number": 2034,
    "title": "Is it okay to use code formatter such as Prettier ? ",
    "created_at": "2019-05-08T04:19:46Z",
    "closed_at": "2019-05-08T04:40:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2034",
    "body": "Hi, i would like to ask a question, while following Airbnb Javascript React Styleguide is it okay to use code formatter such as Prettier ?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2034/comments",
    "author": "mramadhanrh",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2019-05-08T04:40:14Z",
        "body": "At the moment, our config conflicts with prettier, so you’d have to use eslint-config-prettier to disable all the conflicting rules. However, theoretically you wouldn’t need prettier, since eslint already has autofix."
      }
    ]
  },
  {
    "number": 2024,
    "title": "Install eslint airbnb packages in parent folder of project root?",
    "created_at": "2019-03-18T21:33:36Z",
    "closed_at": "2019-03-19T05:03:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/2024",
    "body": "----update-----\r\n\r\nYes it works. If you want to install airbnb related packages (for instance `eslint-config-airbnb`, `eslint-plugin-import`, `eslint-plugin-jsx-a11y`, `eslint-plugin-react`) but don't want to change the team repo, install them in the parent folder of the repo. It does work. Although I only tested when the team repo doesn't have any form of eslint settings on its own.\r\n\r\n----original-----\r\n\r\nI'm working on a team project which doesn't have and will not have a shared `.eslintrc` file. I use the eslint plugin for VSCode and put my `.eslintrc` in the parent folder of the project. I imagine other team members are doing similar things.\r\n\r\nNow I want to set up airbnb for myself to use, but that involves adding quite a few packages into `package.json`, which I don't want to do, because I'm afraid of affecting other people. \r\n\r\nI tried to `npm init` the parent folder and set up airbnb there, but it doesn't seem to have any effect inside the project folder. \r\n\r\nMy question is: \r\n\r\n1. Is there a way to set up airbnb packages in the parent folder of project root?\r\n\r\n2. If not, I think I can just go ahead and set up airbnb, and put the `.eslintrc` into `.gitignore`. I'm sure the current `package.json` does not have any packages named `eslint*`. If I add those packages, will that possibly affect other team members?\r\n\r\n(May or may not be relevant: the project root is actually a node app which contains a folder called `client` as the front end, which is a react project that has \r\nits own `package.json`. I'm actually working in `client`)\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/2024/comments",
    "author": "ZYinMD",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2019-03-18T21:40:27Z",
        "body": "I'm a bit confused. What affect are you worried it will have on other people to have the deps in the root package.json?\r\n\r\nYou can always make a package.json and an `.eslintrc` in your subfolder, and install the deps there as well."
      },
      {
        "user": "ZYinMD",
        "created_at": "2019-03-18T22:12:29Z",
        "body": "Thanks for the reply. I didn't understand what you meant by \"making a subfolder and install the deps there\". My original goal was \"secretly do my own linting without committing my setup to the repo\", that's why I was trying to install the packages in the parent folder of the repo.\r\n\r\nTo answer your question about what I was worrying: since the project doesn't have a committed `.eslintrc`, I think everybody secretly has their own `.eslintrc`. I'm new to the team and don't want to make the decision to add a bunch of new packages, of course they may have no effect, but I thought they may have, because I was actually not very clear on how those packages work. For example: what if another team member does an `npm install` and suddenly see a hundred squiggles.\r\n\r\nNew update on my situation here: after submitting this issue, I realized the packages I put in the repo's parent folder actually seem to work, it's just super super slow to lint (first squiggles took 10+ minutes to show). I'll observe more and report back."
      },
      {
        "user": "ljharb",
        "created_at": "2019-03-19T05:03:01Z",
        "body": "If you want to secretly do your own linting; then I'd install all the relevant packages globally - however, I'd suggest not applying linting tools to a project where it's not enforced in CI and used by all developers. Every dev in a project should use the same standards, even if those are \"no linting\".\r\n\r\nRegardless, this is more of a general discussion of how eslint works, and isn't specific to this styleguide, so I'm going to close it - feel free to continue discussing here."
      },
      {
        "user": "ZYinMD",
        "created_at": "2019-03-19T14:33:51Z",
        "body": "I've concluded my test and updated the original post for future googlers. Thanks."
      }
    ]
  },
  {
    "number": 1958,
    "title": "prefer-const makes destructuring redundant",
    "created_at": "2018-11-16T03:40:58Z",
    "closed_at": "2018-11-26T16:23:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1958",
    "body": "The rule `prefer-const` with the option  `{\"destructuring\": \"any\"}` will report an error on `unit is never reassigned.  Use 'const' instead`\r\n\r\n```js\r\nfunction foo(value) {\r\n  let [, v, unit] = value.toLowerCase().match(/(\\d+)([a-z]*)/) || [];\r\n  if (unit === 'rpx') {\r\n    v *= 1.5;\r\n  }\r\n  return v ? parseInt(v, 10) : 0;\r\n}\r\n```\r\nIf I modify the code for fixing this error, the code will become not elegant.\r\n```js\r\nfunction foo2(value) {\r\n  const result = value.toLowerCase().match(/(\\d+)([a-z]*)/) || [];\r\n  let [, v] = result;\r\n  const [, , unit] = result;\r\n  if (unit === 'rpx') {\r\n    v *= 1.5;\r\n  }\r\n  return v ? parseInt(v, 10) : 0;\r\n}\r\n```\r\nIs there any better suggestion?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1958/comments",
    "author": "kaiye",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-11-16T04:47:27Z",
        "body": "```js\r\nfunction foo(value) {\r\n  const [, v, unit] = value.toLowerCase().match(/(\\d+)([a-z]*)/) || [];\r\n  const parsed = parseInt(v, 10);\r\n  if (!parsed) {\r\n    return 0;\r\n  }\r\n  return unit === 'rpx' ? parsed * 1.5 : parsed;\r\n}\r\n```\r\n\r\nNote how I’ve also fixed the bug of multiplying by 1.5 on an unparsed string, as well as a string that is truthy but parses to NaN will now return 0 :-)"
      },
      {
        "user": "kaiye",
        "created_at": "2018-11-16T07:24:59Z",
        "body": "@ljharb  Thanks for your bugfix. 🤣\r\nIf properties are destructuring from an Object, you prefer setting them all `const` first, and reassign the some of the properties to another variables, or just divide them into `const` and `let` from the beginning?\r\n```js\r\nfunction foo(obj) {\r\n  const { a, b, c, d, e, f } = obj;\r\n  const _d = bar(a, b, c, d);\r\n  const _e = bar(a, b, c, e);\r\n  const _f = bar(a, b, c, f);\r\n  return { ...obj, d: _d, e: _e, f: _f };\r\n}\r\n```\r\n```js\r\nfunction foo2(obj) {\r\n  const { a, b, c } = obj;\r\n  let { d, e, f } = obj;\r\n  d = bar(a, b, c, d);\r\n  e = bar(a, b, c, e);\r\n  f = bar(a, b, c, f);\r\n  return { ...obj, d, e, f };\r\n}\r\n```\r\nI think the second one is better, because I don't need to think another name for the properties, and assemble a new Object very quickly by the property shorthand.\r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2018-11-16T07:28:34Z",
        "body": "I mean, ideally you don't need `let` at all - but yes, I'd say the second one is better in that case."
      },
      {
        "user": "petersendidit",
        "created_at": "2018-11-26T15:04:42Z",
        "body": "Can also avoid the interim variables and assign directly to the object properties. \r\n```js\r\nfunction foo2(obj) {\r\n  const { a, b, c, d, e, f } = obj;\r\n  return {\r\n    ...obj,\r\n    d: bar(a, b, c, d),\r\n    e: bar(a, b, c, e),\r\n    f: bar(a, b, c, f),\r\n  };\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1947,
    "title": "[Suggestion] `import ... from ...` should specify file extensions",
    "created_at": "2018-10-30T09:41:37Z",
    "closed_at": "2018-10-30T15:00:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1947",
    "body": "In systems that use ECMAScript Modules, many developers (me included) declare `import` like this:\r\n\r\n```javascript\r\nimport util from '../util';\r\n```\r\n\r\nIt works. But the declaration is somehow confusing.  To module loaders, they have to guess the path of '../util' by querying the file system at multiple locations, it might be '../util.js', or '../util/index.js', or some other types (e.g, '../util/index.vue', or '../util.vue'). To developers who are not quite familiar with the project, the same confusion exists.\r\n\r\nRyan Dahl gave a talk at JSConf EU 2018 titled \"10 Things I Regret About Node.js\". One of the regrets is **require(\"module\") without the extension \".js\"**:\r\n\r\n+ Needlessly less explicit.\r\n+ Not how browser javascript works. You cannot omit the \".js\" in a script tag src attribute.\r\n+ The module loader has to query the file system at multiple locations trying to guess what the user intended.\r\n\r\nI think it's time to make a change: specify the file extension we import from. Like this:\r\n\r\n```javascript\r\nimport util from '../util.js'\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1947/comments",
    "author": "zilong-thu",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-10-30T15:00:18Z",
        "body": "It is very critical to always omit the file extension to allow for maximum refactorability, and our linting config enforces this.\r\n\r\nModule loaders can always trivially use `require.resolve`, or similar, to resolve a specifier to a full path.\r\n\r\nThat particular talk is full of attempts to “regret” the very reasons node is successful, and I’d recommend not taking it to heart. (browsers entirely ignore extensions, so as long as your webserver can find the file, you absolutely *can* omit the extension in browser JavaScript and it works fine)\r\n\r\nThis will not be changing, and the best practice for the entire ecosystem will remain to always omit the extension."
      }
    ]
  },
  {
    "number": 1931,
    "title": "Since use of 'ForOfStatement' is not allowed ...",
    "created_at": "2018-10-06T18:49:21Z",
    "closed_at": "2018-10-07T00:56:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1931",
    "body": "Pretty sure this has been discussed thousands of times but haven't found a perfect replacement for my code snippet below.\r\n\r\nSince the use of `for...of` construct is not allowed, how can I write following code?\r\n\r\n``` javascript\r\n// lines is an array of strings\r\nlet value = ''\r\nfor (const line of lines) {\r\n   try {\r\n      const json = JSON.parse(line)\r\n      if (json) {\r\n        value = json.whatever \r\n        /* \r\n           more logic irrelevant to this question\r\n        */\r\n        // As soon as first jsonable line is found and processed, short-circuit the loop\r\n        break\r\n      }\r\n    } catch (err) {\r\n      // Handle error\r\n      // throw / reject / console.error() / return - could be anything\r\n    }  \r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1931/comments",
    "author": "hvkale",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-10-06T22:11:07Z",
        "body": "```js\r\nconst value = lines.reduce((prev, line) => prev.then((lastValue) => {\r\n  if (lastValue) { return lastValue; }\r\n  const result = JSON.parse(line);\r\n  if (result) {\r\n    return value.whatever;\r\n  }\r\n}).catch(errorHandling), Promise.resolve());\r\n```\r\nas long as `errorHandling` returns a falsy value to continue processing, a truthy value to stop processing, or re-throws, then `value` should end up as a promise for your desired value."
      },
      {
        "user": "hvkale",
        "created_at": "2018-10-07T00:56:16Z",
        "body": "@ljharb Thank you."
      }
    ]
  },
  {
    "number": 1926,
    "title": "Best way to deal with `operator-linebreak` and long line length",
    "created_at": "2018-10-01T19:30:56Z",
    "closed_at": "2018-10-01T21:29:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1926",
    "body": "In a few places where code is indented a bit and we have something like this: `myObject.ProbablyTooLong.PropertyName = somethingElse.That.IsLong;`\r\n\r\nWe had previously broken the line up to avoid `max-len` violations:\r\n```\r\nmyObject.ProbablyTooLong.PropertyName\r\n       = somethingElse.That.IsLong;\r\n```\r\n\r\nA recent update now gives us `operator-linebreak` errors, `There should be no line break before or after '='`\r\n\r\nDoes anyone have suggestions on best practice here? Thank you\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1926/comments",
    "author": "KayakinKoder",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-10-01T20:43:51Z",
        "body": "I'd disable the `max-len` rule for this case; line length is a poor proxy anyways for managing complexity.\r\n\r\nOur guide also discourages mutation - what object are you deeply modifying?"
      },
      {
        "user": "KayakinKoder",
        "created_at": "2018-10-01T21:24:52Z",
        "body": "Thanks, we'll do that. Not exactly sure what you mean by \"what object\", but a custom object. I can't reveal our app code of course but an example might be:\r\n\r\n```\r\nconst person = { email: 'john@doe.com', visits: {} };\r\n\r\n// some business logic\r\n\r\nperson.visits.visitsToCheckoutPage= 1;\r\n```"
      },
      {
        "user": "ljharb",
        "created_at": "2018-10-01T21:26:57Z",
        "body": "In that case i'd probably do `const { visits } = person; visits.visitsToCheckoutPage = 1`, but i'd still recommend avoiding mutations entirely."
      },
      {
        "user": "KayakinKoder",
        "created_at": "2018-10-01T21:29:39Z",
        "body": "As always, thanks, I'll have to do some reading on how to avoid mutations."
      }
    ]
  },
  {
    "number": 1925,
    "title": "Is \"[eslint] Do not use 'new' for side effects. (no-new)\" rule still correct for singleton class?",
    "created_at": "2018-10-01T02:13:58Z",
    "closed_at": "2018-10-01T03:04:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1925",
    "body": "I have created a singleton class as an application level cache to fulfil my business logic. Since it's a singleton, I just need to instantiate the class using \"new\" at the start of my application.\r\n```\r\nnew ConfigSingleton(configFilePath);\r\n```\r\nIs this a valid use case of using new here, since I treat the class as singleton?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1925/comments",
    "author": "RonWang",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-10-01T03:04:32Z",
        "body": "No, it’s not, that should be a function instead of a class."
      }
    ]
  },
  {
    "number": 1921,
    "title": "Use of classes in javascript ?",
    "created_at": "2018-09-24T08:32:39Z",
    "closed_at": "2018-09-24T14:01:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1921",
    "body": "Hi there!\r\nCan one explain me please if i should use classes in javascript or using prototype...\r\nI have this doubt.\r\nCan someone clarify this point in 2018...\r\n\r\nThanks in advance.\r\nCarlos VIeira",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1921/comments",
    "author": "ShintaroNippon",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-09-24T14:01:10Z",
        "body": "If you are using inheritance (`new` or `this` or prototypes), *only* use `class` (when using babel or targeting new enough engines), since 2014 or so.\r\n\r\nAlso, prefer composition over inheritance."
      }
    ]
  },
  {
    "number": 1881,
    "title": "From the source code to the execution?",
    "created_at": "2018-08-10T09:00:06Z",
    "closed_at": "2018-08-10T17:46:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1881",
    "body": "reading from different ressources really got me lost , can you please guide me through these steps :\r\n\r\n1- source code\r\n\r\n2- compiler :\r\n\r\n===> 1-Hoisting , set variables to undifined and functions to ( ??? i don’t know )\r\n===> 2-declare a var or a function after a validation from the scope engine\r\n===> 3-tokenize our code\r\n===> 4-create AST\r\n===> 5-convert source code to byte code\r\n\r\n3- execution context (done with the compiler, now the engine turn : V8 or spidermonkey … ) :\r\n\r\nvar age = 30 ;\r\n\r\nhere the engine ;\r\n\r\n----------------- the creation phase of the execution context --------------------\r\n\r\n===> 1 : create a property in the \"Global \"variable object nammed age and set the value to undifined\r\n===> 2 : check with the scope engine\r\n===> 3 : determine the value of ‘this’ (unnecessary here )\r\n\r\n------------------ the execution phase ---------------------------------------\r\n\r\nthe engine assign a LHS referrence to the age variable",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1881/comments",
    "author": "ahmedbenammar029",
    "comments": [
      {
        "user": "ahmedbenammar029",
        "created_at": "2018-08-10T10:46:08Z",
        "body": "can you pelase guys respond i can't really move forward from this point "
      },
      {
        "user": "ljharb",
        "created_at": "2018-08-10T17:46:57Z",
        "body": "This repo is a style guide for JavaScript; you seem to be asking how JavaScript engines might work, which is a more general question - this really isn't the right venue for this.\r\n\r\nEither way, the answer will be unique to a single implementation, and won't be helpful in a generic sense."
      }
    ]
  },
  {
    "number": 1868,
    "title": "no-unused-expressions ?",
    "created_at": "2018-07-12T09:07:21Z",
    "closed_at": "2019-08-10T05:49:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1868",
    "body": "In zepto.js :\r\n```\r\nwindow.$ === undefined && (window.$ = Zepto);\r\n```\r\nI'm using vscode + eslint + eslint-config-airbnb-base@latest, then show\r\n```\r\n[eslint] Expected an assignment or function call and instead saw an expression. (no-unused-expressions)\r\n\r\n```\r\nand I change .eslintrc: \r\n```\r\n\"extends\": \"standard\",\r\n```\r\nthe warning disappeared.\r\n\r\nIs this a bug or improper grammar ?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1868/comments",
    "author": "terminalqo",
    "comments": [
      {
        "user": "terminalqo",
        "created_at": "2018-07-12T10:07:05Z",
        "body": "Alright, I found this:\r\npackages/eslint-config-airbnb-base/rules/best-practices.js\r\n```\r\n// disallow usage of expressions in statement position\r\n    'no-unused-expressions': ['error', {\r\n      allowShortCircuit: false,\r\n      allowTernary: false,\r\n      allowTaggedTemplates: false,\r\n    }],\r\n```\r\nAnd this :\r\neslint-config-standard/eslintrc.json\r\n```\r\nno-unused-expressions\": [\"error\", { \r\n\"allowShortCircuit\": true, \r\n\"allowTernary\": true, \r\n\"allowTaggedTemplates\": true \r\n}],\r\n```\r\n\r\nbut I don't know which is better, in this circumstance ?\r\nchange it to `if..else..` statement ?"
      },
      {
        "user": "ljharb",
        "created_at": "2018-07-12T16:02:55Z",
        "body": "The issue is that you’re abusing value selection operators for control flow (and also conflating assignment with expressions). Use an `if`."
      },
      {
        "user": "fleksin",
        "created_at": "2018-09-14T02:41:09Z",
        "body": "> The issue is that you’re abusing value selection operators for control flow (and also conflating assignment with expressions). Use an `if`.\r\n\r\nHi, could you elaborate why using value selection operators in this case is a bad practice? Just personally interested in the topic.\r\n\r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2018-09-14T07:50:41Z",
        "body": "@fleksin because their purpose is to select a value. Using them for control flow is using them for something other than their intended purpose - abusing them."
      }
    ]
  },
  {
    "number": 1865,
    "title": "feat: enable no-negated-condition for readability",
    "created_at": "2018-07-11T13:21:52Z",
    "closed_at": "2018-07-11T16:08:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/pull/1865",
    "body": "is there any discussion to disable it?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1865/comments",
    "author": "aladdin-add",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-07-11T16:08:09Z",
        "body": "There’s not; and an issue would be appropriate to do so before a pull request.\r\n\r\nI don’t find that this always increases readability, personally i find that it can decrease it. Either way, there’s no interest internally in legislating this."
      }
    ]
  },
  {
    "number": 1860,
    "title": "why not recommended to use `array.length` directly in if statements ？",
    "created_at": "2018-07-08T13:43:02Z",
    "closed_at": "2018-07-09T03:16:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1860",
    "body": "In NO. 15.3.\r\n```\r\n// bad\r\nif (collection.length) {\r\n  // ...\r\n}\r\n\r\n// good\r\nif (collection.length > 0) {\r\n  // ...\r\n}\r\n```\r\nwhy use `collection.length>0` is better than `collection.length`?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1860/comments",
    "author": "momodiy",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-07-08T18:12:54Z",
        "body": "Because `.length` isn't a boolean - which means you're relying on the implicit conversion of a number to a boolean. Using `> 0` is explicit (and explicit > implicit), and avoids any possible confusion about what you mean."
      },
      {
        "user": "momodiy",
        "created_at": "2018-07-09T03:16:40Z",
        "body": "I see,thanks for your wonderful reply. @ljharb "
      }
    ]
  },
  {
    "number": 1840,
    "title": "What's the general consensus for nested destructuring assignment?",
    "created_at": "2018-06-24T23:26:07Z",
    "closed_at": "2018-06-25T02:41:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1840",
    "body": "I wanted to know if there's some general consensus on whether or not it's okay to use nested destructuring assignment:\r\n\r\n```javascript\r\nconst obj = { a: { b: 'foo' } }; // obj.a.b = 'foo'\r\nconst { a: { b } } = obj; // b = 'foo'\r\n```\r\n\r\nIs this something discouraged? Currently, I refrain from it because it looks messy and a bit unreadable, but is there an opinion from airbnb?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1840/comments",
    "author": "Li357",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-06-25T02:33:04Z",
        "body": "We don't have any sort of internal consensus - which means it's an individual judgement call. I'd say that the benefits of destructuring, nested or otherwise, are primarily that you don't have to repeat the property name. If nested destructuring can provide that without sacrificing readability, then it seems great."
      },
      {
        "user": "ericblade",
        "created_at": "2018-06-25T16:35:29Z",
        "body": "I had avoided doing this because I thought (without verifying first) it would pollute the variable namespace with 'a', but I just actually tested it, and it does not.  FWIW, in case anyone else might've thought that.\r\n"
      }
    ]
  },
  {
    "number": 1826,
    "title": "Consider turning on exception ignoreEOLComments for no-multi-spaces rule",
    "created_at": "2018-06-05T12:15:38Z",
    "closed_at": "2019-08-10T05:50:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1826",
    "body": "When you have a longer chain in your code, like an observable chain, or promise one, or lodash flow one, we sometimes comment the chain to make it more understandable what happens and why each step is there. To make it easier to read, we align the comments, but the current rule settings give errors on this.\r\n\r\nSo why is the ignoreEOLComments turned off? Is there a special reason for this? Imho, it should be turned on, to make it possible to align comments like:\r\n\r\n```\r\nmyObservable\r\n  .pipe(\r\n    map(inACertainWayFunction),              // Step explanation\r\n    filter(byPropBFunction),                 // Step explanation\r\n    distinctUntilChanged(comparisonFunction) // Step explanation\r\n  );\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1826/comments",
    "author": "dietergeerts",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-06-05T18:20:21Z",
        "body": "What's the value in visual alignment there? The guide prefers this:\r\n```js\r\nmyObservable\r\n  .pipe(\r\n    map(inACertainWayFunction), // Step explanation\r\n    filter(byPropBFunction), // Step explanation\r\n    distinctUntilChanged(comparisonFunction) // Step explanation\r\n  );\r\n```\r\n\r\nIn other words, never visually align anything except with semantic indentation."
      },
      {
        "user": "dietergeerts",
        "created_at": "2018-06-05T19:04:41Z",
        "body": "The value: easier to read. Readability is very important, and in the example, it's easier to read the steps than to figure out the actual code. When the comments tell you enough, you can continue. Without lining them out, you do have to read all the code first, so then the comments become less useful."
      },
      {
        "user": "ljharb",
        "created_at": "2018-06-05T20:04:08Z",
        "body": "My initial reaction is that anywhere comments appear and are explaining \"what\" (as opposed to \"why\" or history/motivation), that's a failure of the code to be self-documenting enough. In other words, I think the code itself should be readable enough that no comments are required to know what it's doing."
      },
      {
        "user": "hornta",
        "created_at": "2018-06-05T21:15:48Z",
        "body": "Can you try and write it like this? Does that help the readability?\r\n```javascript\r\nmyObservable\r\n  .pipe(\r\n    map(inACertainWayFunction), //              Step explanation\r\n    filter(byPropBFunction), //                 Step explanation\r\n    distinctUntilChanged(comparisonFunction) // Step explanation\r\n  );\r\n```"
      },
      {
        "user": "dietergeerts",
        "created_at": "2018-06-06T06:20:03Z",
        "body": "@ljharb, It's actually the 'why' they explain. In very long difficult chains, we'll always explain the functional part behind the steps, so we know 'why' they are there, that's what I mean with step explanation. Off course it's bad to explain what the code does, that should be clear by the line of code itself.\r\n\r\nSome real code of the current project to better show what I mean:\r\n```\r\n/**\r\n * Switch to single getter to enable single source of truth.\r\n *\r\n * @param {ModelStore<*>} store\r\n * @returns {function(Observable<OBJ>): Observable<OBJ>}\r\n * @template OBJ\r\n */\r\nexport function switchGet(store) {\r\n\r\n  return source => source\r\n    .do(setModelCache(store.readModel)) // Set reader cache for individual model,\r\n    .do(nextOn(store.modelUpdated))     // And throw event, as may be already subscribed...\r\n    .map(get('id'))                     // Get the id from the model to use in the get.\r\n    .switchMap(store.getModel)          // Then use get to enable single source of truth.\r\n    .distinctUntilChanged(isEqual);     // Because of internal (re-)subscription, we got multiple updates...\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 1821,
    "title": "How to style currying properly?",
    "created_at": "2018-05-31T04:01:28Z",
    "closed_at": "2018-06-01T20:31:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1821",
    "body": "Currying was mentioned here a couple times but I could find any clear explanation how to \"style\" it properly.\r\n\r\nConsider this code for example\r\n\r\n```js\r\nlet fn = a => b => c => {\r\n  // there will be some complex logic\r\n  console.log(a, b, c);\r\n  return a + b + c;\r\n}\r\n```\r\n\r\nESLint throws the error **arrow-parens** `Expected parentheses around arrow function argument having a body with curly braces` and forces me to style the code this way (which looks a bit \"off\" and inconsistent to me)\r\n\r\n```js\r\nlet fn = a => b => (c) => {\r\n  // there will be some complex logic\r\n  console.log(a, b, c);\r\n  return a + b + c;\r\n}\r\n```\r\n\r\nIf I try to achieve consistency by using the following styling, I will get another error **arrow-parens** `Unexpected parentheses around single function argument having a body with no curly braces`\r\n\r\n```js\r\nlet fn = (a) => (b) => (c) => {\r\n  // there will be some complex logic\r\n  console.log(a, b, c);\r\n  return a + b + c;\r\n}\r\n```\r\nIs there any \"convention\" on how to style curryed functions?\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1821/comments",
    "author": "sstativa",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-05-31T05:03:47Z",
        "body": "That the functions are curried has no impact on what this guide recommends; the second example above is indeed the correct way."
      },
      {
        "user": "jacktuck",
        "created_at": "2018-06-01T08:48:41Z",
        "body": "@sstativa I agree with you there it looks inconsistent I prefer 1 and 3 over 2. That said that's just my opinion and all the rules here are naturally very opinionated xD"
      }
    ]
  },
  {
    "number": 1810,
    "title": "Which is more appropriate in a promise callback with a extra arg? function pointer or function",
    "created_at": "2018-05-16T21:29:41Z",
    "closed_at": "2018-05-16T21:50:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1810",
    "body": "Which style is more appropriate when there is a extra argument in a callback? \r\n\r\nA function pointer using a bind to pass the extra arg:\r\n```javascript\r\npromise\r\n  .then(foo.bind(this, bar))\r\n```\r\n\r\nOr a callback without using a function pointer:\r\n```javascript\r\npromise\r\n  .then(foobar => foo(bar, foobar))\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1810/comments",
    "author": "dman777",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-05-16T21:38:16Z",
        "body": "The latter, primarily because `.bind` is often slow outside of super-modern v8 - but also because most functions don't need `this`, so in your example, the lack of reliance on `this` is more clear."
      },
      {
        "user": "dman777",
        "created_at": "2018-05-16T21:50:47Z",
        "body": "👍 Thanks!"
      }
    ]
  },
  {
    "number": 1788,
    "title": "Group export - yay or nay?",
    "created_at": "2018-04-19T13:44:45Z",
    "closed_at": "2019-08-10T05:53:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1788",
    "body": "I was wondering which one is better, to do a group export or do individual exports:\r\n\r\n```javascript\r\nexport const a = 1;\r\nexport const b = 2;\r\n\r\n// vs\r\n\r\nconst a = 1;\r\nconst b = 2;\r\n\r\nexport {\r\n  a,\r\n  b\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1788/comments",
    "author": "tpiros",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-04-19T14:21:37Z",
        "body": "I’m not sure either is clearly better in every case; so far we’ve been leaving it as a judgement call for the developer."
      },
      {
        "user": "praveeno",
        "created_at": "2018-05-18T12:58:53Z",
        "body": "I like second one"
      },
      {
        "user": "Bamieh",
        "created_at": "2018-05-20T09:57:47Z",
        "body": "for a few exports and a small file I use the second one. For a large file with only named exports I explicitly export each one to reduce mistakes. "
      }
    ]
  },
  {
    "number": 1786,
    "title": "Prefer default export not working for const variable",
    "created_at": "2018-04-17T12:51:15Z",
    "closed_at": "2018-04-19T04:30:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1786",
    "body": "If I have single export in a file like this\r\n```\r\nexport const url = \"google.com\";\r\n```\r\nIt shows me linting error for prefer-default-export, but making it default would throw me this error\r\n`Parsing error: Unexpected token const`",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1786/comments",
    "author": "AjayPoshak",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-04-17T14:05:31Z",
        "body": "Because that’s not a default export; if you want it default you’ll have to do it in two lines:\r\n```jsx\r\nconst url = ‘google.com’;\r\nexport default url;\r\n```"
      },
      {
        "user": "AjayPoshak",
        "created_at": "2018-04-19T04:30:51Z",
        "body": "This solves my problem. Cool, thanks 🎉 "
      }
    ]
  },
  {
    "number": 1763,
    "title": "Is it recommended to start a function name with is? Since it is not a typical verb ",
    "created_at": "2018-03-13T19:07:51Z",
    "closed_at": "2018-03-14T19:30:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1763",
    "body": "When using a shortcut for a boolean variable, the example convention given is great:\r\n\r\n```\r\n// good\r\nif (isValid) {\r\n  // ...\r\n}\r\n```\r\n\r\nI try to start all my named functions with a verb....a name to express it does something. \r\n\r\nIn the case of a function that returns a Boolean, is it acceptable to start it with `is` like you would a true or false variable? The guide does not explicitly state but I was wondering if a personal preference could be given.  \r\n\r\n```javaScript\r\nconst isValid = () => true;\r\n\r\nif (isValid()) {\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1763/comments",
    "author": "dman777",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-03-14T06:40:05Z",
        "body": "Yes, I think that it's fine - ideal, even - to name predicates with an \"is\" or \"has\" prefix."
      },
      {
        "user": "dman777",
        "created_at": "2018-03-14T19:30:50Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 1739,
    "title": "Why should we not use Generators in react native according to Airbnb",
    "created_at": "2018-02-19T20:31:52Z",
    "closed_at": "2018-02-19T20:39:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1739",
    "body": "I have an app that uses React saga that uses generators. I was getting some syntax error with Eslint \r\n[eslint] Unexpected unnamed generator function. (func-names). I was reading the documentation and found this. \r\n\r\n11.2 Don’t use generators for now.\r\nWhy? They don’t transpile well to ES5.\r\n\r\nI am new to react native. Can someone help me understand? \r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1739/comments",
    "author": "Ayyagaries",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-02-19T20:39:55Z",
        "body": "Our styleguide is primarily written for web react (and universal node code), and generators transpile into something too heavyweight for web usage.\r\n\r\nIn React Native, generators can be used natively, so this advice doesn’t apply - although there are many other reasons to avoid generators, they aren’t enumerated by the guide at this time. So, your best bet is to override the syntax rule that forbids generators (func-names is something different, your generator functions should still have names)."
      },
      {
        "user": "ghost",
        "created_at": "2019-05-14T11:25:05Z",
        "body": "@ljharb Is this restriction still actual in mid 2019? I mean it's still in the config, but conceptually is it still makes sense to disallow generators?"
      },
      {
        "user": "ljharb",
        "created_at": "2019-05-14T13:37:11Z",
        "body": "Yes."
      }
    ]
  },
  {
    "number": 1738,
    "title": "Exposed endpoint for non-style based rules only",
    "created_at": "2018-02-19T19:17:09Z",
    "closed_at": "2018-02-19T20:35:59Z",
    "labels": [
      "question",
      "wontfix"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1738",
    "body": "I want to use all the non-style based rules from airbnb. I am trying to start a new project and i want to enforce non-styles rules first.\r\n\r\nIf this endpoint doesn't exists then is it possible to enhance the api to have such an endpoint?\r\nI am willing to do the work. Thanks",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1738/comments",
    "author": "gyandeeps",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-02-19T20:35:59Z",
        "body": "Typically, calling some rules “style” is used to marginalize their importance.\r\n\r\nStyle-based rules are *every bit as critical* as any other kind of rules, and catch bugs just the same.\r\n\r\nAlthough our rule files are split by eslint’s categories, one of which is “style”, we won’t be making t any easier for people to catch fewer bugs based on a belief that “style” is something that can be deferred."
      },
      {
        "user": "gyandeeps",
        "created_at": "2018-02-27T15:44:29Z",
        "body": "because i have been using `prettier` for styling."
      },
      {
        "user": "ljharb",
        "created_at": "2018-02-27T16:13:44Z",
        "body": "Our linter configs are not yet compatible with prettier; with the next release, you should be able to use prettier-eslint with our guide and it should correct all the incorrect styles prettier outputs. You won’t want to disable any of our rules, however, or you won’t be following this guide.\r\n\r\nPrettier has its own eslint config already that disables all the core rules it conflicts with; i wouldn’t recommend using that, but it may suffice in the meantime."
      }
    ]
  },
  {
    "number": 1717,
    "title": "Trailing semicolons for chained methods",
    "created_at": "2018-02-01T18:20:02Z",
    "closed_at": "2018-02-02T06:01:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1717",
    "body": "Following the rationale for additional trailing commas, doesn't it also follow that chained method calls should end with semicolons on a new line?\r\n\r\n```\r\ndoAThing()\r\n  .doAnotherThing()\r\n  .doYetAnotherThing()\r\n;\r\n```\r\n\r\nYou'll get better diffs, and debugging will be easier.\r\n\r\nSometimes you want to change the order of execution, e.g.:\r\n```\r\ndoAThing()\r\n  .doYetAnotherThing() // Moved this line up.\r\n  .doAnotherThing()\r\n;\r\n```\r\nAnd it will still work, even if you change which method gets called last, without shuffling your semicolons around. \r\n\r\nSimilarly, you can tack a function on the end without doing the semicolon shuffle:\r\n```\r\ndoAThing()\r\n  .doAnotherThing()\r\n  .doYetAnotherThing()\r\n  .doOneLastThing()\r\n;\r\n```\r\nYou also have the freedom to comment out the last line without losing your semicolon:\r\n```\r\ndoAThing()\r\n  .doAnotherThing()\r\n//.doYetAnotherThing()\r\n;\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1717/comments",
    "author": "okaybenji",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-02-01T23:37:49Z",
        "body": "That's certainly an interesting suggestion, and it definitely would follow the \"minimize diffs\" category.\r\n\r\nHowever, chained method calls are a fundamentally different concept than \"lists of things\", and the likelihood that those will change is pretty low - it's not simply reordering a list; the logic will likely be fundamentally different in a different order."
      },
      {
        "user": "okaybenji",
        "created_at": "2018-02-02T01:19:51Z",
        "body": "I can see why some would see chained method calls as fundamentally different from \"lists of things.\" It probably depends quite a bit on the sorts of projects you work on and your coding style. Functional programmers may see chained method calls as a list of transformations. And in my work, we have a lot of chunks of code that look something like this:\r\n\r\n```\r\nconst aTextEntity = new TextEntity()\r\n  .text('This is a text entity')\r\n  .textAlign('center')\r\n  .fontSize('40px')\r\n  .fontWeight('bold')\r\n  .shadowSize(1)\r\n  .shadowBlur(6)\r\n  .strokeSize(6)\r\n  .strokeColor('#000')\r\n  .shadowColor('rgba(0, 0, 0, 0.75)')\r\n  .center(0)\r\n  .bottom(50);\r\n```\r\n\r\nYou can probably see how adding properties like this could lead to several instances of ugly diffs. I wonder how difficult it would be to collect data from Github to find out how common this problem is."
      },
      {
        "user": "ljharb",
        "created_at": "2018-02-02T06:01:54Z",
        "body": "A truly functional style would use a pipeline operator, and not be chained :-)\r\n\r\nAt any rate, while I certainly agree that your reasoning is consistent with the trailing comma reasoning, and I think it'd be totally defensible to define this style in your own project, it's not one Airbnb will likely ever use."
      },
      {
        "user": "okaybenji",
        "created_at": "2018-02-02T14:16:04Z",
        "body": "That's fair enough, thanks for reading it over and evaluating the idea.\r\n\r\nJust BTW, you're wrong about the functional style. This is pretty common for functional-leaning JS programmers:\r\n\r\n```\r\nconst dataIWant = someArray\r\n  .filter(removeSomeItems)\r\n  .map(doSomeTransformation)\r\n  .sort(arrangeThemInSomeWay)\r\n  .etc(youGetTheIdea);\r\n```"
      }
    ]
  },
  {
    "number": 1692,
    "title": "prop-types in react router",
    "created_at": "2018-01-10T03:19:28Z",
    "closed_at": "2018-01-10T05:45:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1692",
    "body": "I use `eslint-config-airbnb` rules. and here is my code example.\r\n```jsx\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props => (\r\n      authLogin ?\r\n        <Component {...props} /> :\r\n        <Redirect to={{\r\n          pathname: '/login',\r\n          state: { from: props.location },\r\n        }}\r\n        />\r\n    )}\r\n  />\r\n);\r\nPrivateRoute.propTypes = {\r\n  component: PropTypes.element.isRequired,\r\n};\r\n```\r\n[eslint] 'location' is missing in props validation (react/prop-types)\r\n\r\nI wonder what should I do to fix it? I've attempted to fix but useless\r\n  ",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1692/comments",
    "author": "GravityMsc",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2018-01-10T04:43:49Z",
        "body": "For the record, our style guide prohibits arrow function SFCs; that should be `function PrivateRoute(`.\r\n\r\nThe error message is that your propTypes lack \"location\"; as you can see in `PrivateRoute.propTypes = {`, you haven't specified `location`.\r\n\r\nTry:\r\n```jsx\r\nPrivateRoute.propTypes = {\r\n  component: PropTypes.element.isRequired,\r\n  location: Redirect.propTypes.state.from, // if this doesn't work because Redirect badly specifies its propTypes, then:\r\n  location: PropTypes.object, // or whatever the most precise propType you can come up with is\r\n};\r\n```"
      },
      {
        "user": "GravityMsc",
        "created_at": "2018-01-10T06:17:56Z",
        "body": "Thank you. And I misunderstand the 'props'. I rewrite it in `Route.propTypes`. Sorry for bothering you "
      }
    ]
  },
  {
    "number": 1653,
    "title": "How to avoid \"Assignment to property of function parameter 'elem'\"",
    "created_at": "2017-12-06T13:34:22Z",
    "closed_at": "2017-12-07T11:22:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1653",
    "body": "Hi guys, I want to understand how you guys avoid the eslint warning \"Assignment to property of function parameter 'elem'\". I know that is a good pattern do not change function parameters values. This keeps our code decoupled and with high maintenance. However, in some cases, I come across with the following situation.\r\nI need to retrieve all elements with a specific class, and then, change its display style property.\r\nThis is my code:\r\n```JavaScript\r\nconst setDisplayStyleToElementsArray = (arr, display) => {\r\n  arr.map((elem) => {\r\n    elem.style.display = display;\r\n    return elem;\r\n  });\r\n};\r\n\r\nconst elements = document.getElementsByClassName('.myClass');\r\n\r\nconst myFields = [].slice.call(elements, 0);\r\n\r\nsetDisplayStyleToElementsArray(myFields, 'block');\r\n``` \r\nIn this case, I'm changing the property \"style\" of all my `.myClass`  elements. What is the correct way of doing that? How would airbnb development team handle such case?\r\n\r\nThanks in advance\r\n\r\nPablo Darde\r\nfront end engineer",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1653/comments",
    "author": "darde",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-12-06T22:46:13Z",
        "body": "We avoid it because we use React, and thus we never work with DOM nodes directly.\r\n\r\nIn this case, I'd suggest using an eslint override comment for the places you find you need to do that."
      }
    ]
  },
  {
    "number": 1642,
    "title": "What are the risks of mixing shorthand properties with valued ones?",
    "created_at": "2017-11-21T20:40:03Z",
    "closed_at": "2019-08-10T05:52:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1642",
    "body": "The BOM PR is still on my todo, don't worry. I hope it's ok to ask the next explanation nonetheless, becuase I just found another part I don't understand. As for rule 3.5 \"Group your shorthand properties…\" it states:\r\n\r\n> Why? It’s easier to tell which properties are using the shorthand.\r\n\r\nWhat's the benefit thereof? Why is it important to see what's shorthand? What are the risks of mixing them?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1642/comments",
    "author": "mk-pmb",
    "comments": [
      {
        "user": "lencioni",
        "created_at": "2017-11-21T20:49:26Z",
        "body": "Oddly enough, we were discussing just this thing internally this morning. Stay tuned."
      },
      {
        "user": "ljharb",
        "created_at": "2017-11-22T03:28:03Z",
        "body": "This user's questions about it in IRC prompted the internal discussion ;-)"
      },
      {
        "user": "mk-pmb",
        "created_at": "2017-11-22T12:55:45Z",
        "body": "Probably not; I only found charmander's question in the IRC log hours later. I'm Sven_vB."
      },
      {
        "user": "mk-pmb",
        "created_at": "2018-02-09T00:02:41Z",
        "body": "Did the discussion yield any news yet?"
      },
      {
        "user": "ljharb",
        "created_at": "2018-02-09T04:31:05Z",
        "body": "I'm afraid we still haven't achieved any consensus."
      },
      {
        "user": "mk-pmb",
        "created_at": "2019-08-10T14:45:20Z",
        "body": "So what's the news? Are there reasons now?"
      },
      {
        "user": "ljharb",
        "created_at": "2019-08-10T14:55:37Z",
        "body": "No consensus was able to be reached. If that changes, this can be reopened."
      }
    ]
  },
  {
    "number": 1614,
    "title": "Initialize some property for each object in a list",
    "created_at": "2017-10-24T09:11:26Z",
    "closed_at": "2017-10-25T06:59:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1614",
    "body": "I want to do this\r\nthis.someList.forEach(item => item.someProperty = 'Some Value');\r\n\r\nBut i get these\r\nno-return-assign   Arrow function should not return assignment\r\nno-param-reassign  Assignment to property of function parameter 'item'\r\n\r\nHow do i do it diffrently?\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1614/comments",
    "author": "kirantambe",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-10-24T20:17:11Z",
        "body": "First,\r\n```js\r\nthis.someList.forEach(item => { item.someProperty = 'Some Value'; });\r\n```\r\nsince you're not trying to return a value from the arrow function.\r\n\r\nAs for `no-param-reassign`, the intent is specifically not to mutate - if `item` is a plain object, you could do:\r\n```js\r\nconst newList = this.someList.map(item => ({ ...item, someProperty: 'Some Value' }));\r\n```"
      },
      {
        "user": "kirantambe",
        "created_at": "2017-10-25T06:59:08Z",
        "body": "Yes they are plain objects so ill use map.\r\nDidnt know about the ... syntax. \r\nThanks"
      }
    ]
  },
  {
    "number": 1520,
    "title": "Confusing dot-notation and no-underscore-dangle",
    "created_at": "2017-08-14T16:18:19Z",
    "closed_at": "2017-08-21T19:49:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1520",
    "body": "Hi!\r\nI have an object returned to me from third-party API. Object has following structure:\r\n`object = {\r\n    _links: ...\r\n}`\r\n\r\nWhen I'm trying to access `_links` object using dot-notation like this: `object._links` I've got `no-underscore-dangle` error while trying to get object property with brakets `object['_links']` leads to `dot-notation` error. How to deal with such rules confusion?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1520/comments",
    "author": "whoisvadym",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-08-14T18:18:01Z",
        "body": "If you don't control the object structure, you'll have to use an override comment for `no-underscore-dangle`."
      },
      {
        "user": "whoisvadym",
        "created_at": "2017-08-14T18:52:35Z",
        "body": "@ljharb so `no-underscore-dangle` has higher priority to be overwritten, right?\r\nMany thanks!"
      },
      {
        "user": "ljharb",
        "created_at": "2017-08-14T19:47:41Z",
        "body": "It's not about \"priority\", it's that it has a leading underscore, so that's the rule that's complaining about it."
      }
    ]
  },
  {
    "number": 1519,
    "title": "Clarification regarding react/prop-types validation and react router dom",
    "created_at": "2017-08-10T20:37:53Z",
    "closed_at": "2017-08-10T20:55:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1519",
    "body": "I am getting the alert, that I have to validate in prop types match, but I think it is not necessary.\r\n\r\nimport React from 'react';\r\n\r\n```javascript\r\nconst Header = (props) => {\r\n  const { match } = props; // 'match' is missing props validation (react/prop-types)\r\n  return (\r\n    <div>\r\n      <h1>Hello</h1>\r\n      <h3>ID: {match.params.id}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n```\r\n\r\nDo I need to validate it? What's the new convention?\r\n\r\nRegards",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1519/comments",
    "author": "rsancheza09",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-08-10T20:55:18Z",
        "body": "It's definitely necessary; every prop should have a propType (also, every SFC should be a non-arrow function, per this guide).\r\n\r\nIn your case, it looks like:\r\n```jsx\r\nmatch: PropTypes.shape({\r\n  params: PropTypes.shape({\r\n    id: PropTypes.node,\r\n  }).isRequired,\r\n}).isRequired\r\n```\r\nwould be the minimal propType - you could restrict it further to `PropTypes.string`, perhaps?"
      },
      {
        "user": "rsancheza09",
        "created_at": "2017-08-11T16:13:27Z",
        "body": "Thanks @ljharb but compiling the project and using this piece of code\r\n```javascript\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n  const { match } = props;\r\n  return (\r\n    <div>\r\n      <h1>Hello</h1>\r\n      <h3>ID: {match.params.id}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      id: PropTypes.string,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Header;\r\n```\r\n\r\nI am getting now this error, that's the reason that I think that **'match'** maybe should not be necessary.\r\n\r\n> propType \"match\" is not required, but has no corresponding defaultProp declaration.  react/require-default-props"
      },
      {
        "user": "ljharb",
        "created_at": "2017-08-11T16:15:00Z",
        "body": "My original code has isRequireds, use them and you wont have that error."
      },
      {
        "user": "rsancheza09",
        "created_at": "2017-08-11T16:17:24Z",
        "body": "Cool thanks."
      }
    ]
  },
  {
    "number": 1509,
    "title": "Eslint installation issues",
    "created_at": "2017-07-31T16:07:04Z",
    "closed_at": "2017-07-31T16:10:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1509",
    "body": "Hi,\r\nI am very new to Eslint but I would like to use your eslint configuration. Therefore I've created a new .eslintrc.json file in the root folder and put \r\n```\r\n{\r\n  \"extends\": \"airbnb\"\r\n}\r\n```\r\ninto it. Then I tried to install your config with `npm install --save eslint-config-airbnb` which threw some errors though:\r\n\r\n> +-- UNMET PEER DEPENDENCY eslint@^3.19.0 || ^4.3.0                                                                                                                             \r\n> +-- eslint-config-airbnb@15.1.0                                                                                                                                                \r\n> | +-- UNMET PEER DEPENDENCY eslint@^3.19.0 || ^4.3.0                                                                                                                           \r\n> | `-- UNMET PEER DEPENDENCY eslint-plugin-import@^2.7.0                                                                                                                        \r\n> +-- UNMET PEER DEPENDENCY eslint-plugin-import@^2.7.0                                                                                                                          \r\n> +-- UNMET PEER DEPENDENCY eslint-plugin-jsx-a11y@^5.1.1                                                                                                                        \r\n> `-- UNMET PEER DEPENDENCY eslint-plugin-react@^7.1.0      \r\n\r\n                                                                                                                     \r\n                                                                                                                                                                               \r\n\r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint@^3.19.0 || ^4.3.0 but none was installed.                                                                       \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-jsx-a11y@^5.1.1 but none was installed.                                                                  \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-import@^2.7.0 but none was installed.                                                                    \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-react@^7.1.0 but none was installed.                                                                     \r\n> npm WARN eslint-config-airbnb-base@11.3.1 requires a peer of eslint@^3.19.0 || ^4.3.0 but none was installed.                                                                  \r\n> npm WARN eslint-config-airbnb-base@11.3.1 requires a peer of eslint-plugin-import@^2.7.0 but none was installed.                                                               \r\n> npm WARN brawlstats.io@1.0.0 No description                                                                                                                                    \r\n> npm WARN brawlstats.io@1.0.0 No repository field.                                                                                                                              \r\n> PS C:\\Users\\user\\Documents\\project-express> ^C^C                                                                                                                         \r\n> ESLint!\r\n> Ln 1, Col 1 (27 selected)Spaces: 2UTF-8CRLFJSON master* 0↓ 2↑00\r\n> Close\r\n\r\nVSCode shows:\r\n> InfoCannot find module 'eslint-config-airbnb' Referenced from: c:\\Users\\user\\Documents\\project-express\\.eslintrc.json\r\n\r\n\r\nWhat am I doing wrong?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1509/comments",
    "author": "weeco",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-07-31T16:10:01Z",
        "body": "You're using the wrong install command: read the readme for eslint-config-airbnb for the proper one. Additionally, `--save` is for production deps, whereas eslint is a dev dep."
      },
      {
        "user": "weeco",
        "created_at": "2017-07-31T17:01:34Z",
        "body": "Thanks @ljharb that worked!\r\n\r\nFor my frontend javascript Eslint is going crazy because I don't use ES6 there and because of jquery ('$' is not defined). Is there a good solution to enable some sort of jquery configuration or do I need to disable all the rules which pop up there?"
      },
      {
        "user": "ljharb",
        "created_at": "2017-07-31T17:05:59Z",
        "body": "1) you should use ES6 + babel there\r\n2) if you don't, you'll have to use a different set of eslint rules for the non-ES6 code - you can use nested .eslintrc files for example, and extend `airbnb-base/legacy`. Separately, you can set `\"env\": { \"jquery\": true }` in your eslint config to enable jquery usage."
      }
    ]
  },
  {
    "number": 1493,
    "title": "JSX Expression Formatting (spaces after opening and before closing braces)",
    "created_at": "2017-07-15T18:08:13Z",
    "closed_at": "2017-07-15T18:12:31Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1493",
    "body": "What is Airbnb's interpretation for the formatting rules for spaces after opening and before closing braces? To illustrate:\r\n\r\n```javascript\r\n// Option 1: No spaces\r\n<div>{foo(1, \"abc\")}</div>\r\n\r\n// Option 2: Yes spaces\r\n<div>{ foo(1, \"abc\") }</div>\r\n```\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1493/comments",
    "author": "ecbrodie",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-07-15T18:12:21Z",
        "body": "Option 1. JS curlies should have padding spaces; jsx curlies never should."
      },
      {
        "user": "ecbrodie",
        "created_at": "2017-07-15T18:39:57Z",
        "body": "Thank you for the fast reply @ljharb "
      },
      {
        "user": "ecbrodie",
        "created_at": "2017-07-15T18:41:53Z",
        "body": "Sorry, one more question @ljharb . Do you think this should be explicitly mentioned in this project's style guide? If so, I can make the PR."
      },
      {
        "user": "ljharb",
        "created_at": "2017-07-15T18:47:01Z",
        "body": "Yes, it should, and that'd be great!"
      }
    ]
  },
  {
    "number": 1461,
    "title": "(comma-dangle) is a false positive in a arrow function predicate",
    "created_at": "2017-06-20T21:45:52Z",
    "closed_at": "2017-06-21T02:12:45Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1461",
    "body": "The line in the filter is an example and actual implementations might vary.\r\n\r\nThis produces an error in the line (max-len) which is reasonable\r\n```js\r\nconst fruits = ['apples', 'oranges', 'bananas', 'pears']\r\n  .filter(veryLongFruitVariableNameForExample => veryLongFruitVariableNameForExample === 'oranges' ||  veryLongFruitVariableNameForExample === 'pears'  );  // Error (max-len) here\r\n```\r\nThis produces a (coma-dangle) in the multiline conditional which is wrong.\r\n```js\r\nconst fruits = ['apples', 'oranges', 'bananas', 'pears']\r\n  .filter(veryLongFruitVariableNameForExample => veryLongFruitVariableNameForExample === 'oranges' ||  \r\n   veryLongFruitVariableNameForExample === 'pears'  // <---- coma-dangle error here\r\n);\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1461/comments",
    "author": "ddaza",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-06-21T02:12:45Z",
        "body": "Indeed, it's correct - comma-dangle in our config requires trailing commas on function arguments (which is part of ES2017, and transpired by babel-preset-airbnb).\r\n\r\nIn this case, \"pears\" ends the function that's passed to filter; since the closing invocation paren isn't on the same line as the opening one, all args should be on their own line (in this case, your long arrow function needs to be on a line by itself, with a trailing comma)."
      }
    ]
  },
  {
    "number": 1446,
    "title": "react/jsx-no-bind: how to borrow some methods and pass them as props to child?",
    "created_at": "2017-06-11T14:48:27Z",
    "closed_at": "2017-06-12T18:16:43Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1446",
    "body": "I'm making a text editor via ACE Editor, and now I re-crafted a search box as a child component.\r\n\r\nIn parent component, I stored the Ace Editor ref in `this.editorRef` and I can access the instance by 'this.editorRef.editor', the editor instance provides some methods like find, findNext, findPrev, replace, replaceAll and others.\r\n\r\nI  want to pass some methods of the editor instance to child `<SearchBox />`, I wrote codes like\r\n\r\n```\r\nrender () {\r\n  const { editor } = this.editorRef\r\n  const { find, findNext, findPrev, replace, replaceAll } = editor\r\n  return (\r\n    <SearchBox\r\n      find={find.bind(editor)}\r\n      findNext={findNext.bind(editor)}\r\n      findPrev={findPrev.bind(editor)}\r\n      replace={replace.bind(editor)}\r\n      replaceAll={replaceAll.bind(editor)}\r\n    />\r\n  )\r\n}\r\n```\r\n\r\ndoes the jsx-no-bind lint consider this situation? Or any suggestion to improve these codes?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1446/comments",
    "author": "zheeeng",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-06-11T16:48:07Z",
        "body": "In general, passing around a stateful object like `editor` is very unidiomatic for React - so what you're trying to do (passing the methods) is better than passing `editor`.\r\n\r\nWhat I'd probably recommend is - in the same ref callback that assigns `this.editorRef` - store all the bound functions on the instance. iow, `this.editor = { find: find.bind.editor(), findNext: findNext.bind(editor) }` etc - that way, you can pass `this.editor.find` around in the render path without having to rebind it."
      },
      {
        "user": "zheeeng",
        "created_at": "2017-06-12T14:52:56Z",
        "body": "@ljharb thx for your suggestion."
      }
    ]
  },
  {
    "number": 1444,
    "title": "In 7.4, another good expression",
    "created_at": "2017-06-11T03:13:04Z",
    "closed_at": "2017-06-11T07:07:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1444",
    "body": "`\r\nlet test;\r\nif (currentUser) {\r\n test = function bar() {\r\n   console.log('Yup.');\r\n };\r\n}\r\n`\r\nIs that a good expression ?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1444/comments",
    "author": "pftom",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-06-11T03:48:51Z",
        "body": "Sure - but I'd probably do `const test = currentUser ? function bar() { … } : undefined;` to avoid the `let`."
      },
      {
        "user": "pftom",
        "created_at": "2017-06-11T06:47:04Z",
        "body": "Oh! Thanks!"
      }
    ]
  },
  {
    "number": 1430,
    "title": "Spread syntax",
    "created_at": "2017-05-26T10:09:39Z",
    "closed_at": "2019-08-10T05:56:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1430",
    "body": "In section 3.8 of the JavaScript styleguide, you suggest to use the spread operator to copy an object.\r\nBut by default, aren't objects non-iterable in JavaScript?\r\n\r\n\r\n>     3.8 Prefer the object spread operator over Object.assign to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.\r\n\r\n```\r\n    // very bad\r\n    const original = { a: 1, b: 2 };\r\n    const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ\r\n    delete copy.a; // so does this\r\n\r\n    // bad\r\n    const original = { a: 1, b: 2 };\r\n    const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\r\n\r\n    // good\r\n    const original = { a: 1, b: 2 };\r\n    const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\r\n\r\n    const { a, ...noA } = copy; // noA => { b: 2, c: 3 }\r\n\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1430/comments",
    "author": "NorthFred",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-05-26T16:01:20Z",
        "body": "Yes, but the object spread operator (which is a stage 3 language proposal) uses Object.assign semantics, while the array spread operator uses iterator protocol semantics."
      }
    ]
  },
  {
    "number": 1386,
    "title": "import/no-duplicates vs import/no-named-default",
    "created_at": "2017-04-24T18:13:42Z",
    "closed_at": "2017-04-24T21:09:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1386",
    "body": "In a module with both `const` and `default` exports, how do I import both? It seems to fail with either `import/no-duplicates` or `import/no-named-default`.\r\n\r\n```\r\nexport const schema = {...}\r\n...\r\nconst config = ...\r\nexport default config;\r\n```\r\n```\r\nimport config from '.../config';\r\nimport { schema } from '.../config';\r\n\r\nerror config.js imported multiple times import/no-duplicates\r\n```\r\n```\r\nimport { default as config, schema } from '.../config';\r\n\r\nerror Use default import syntax to import 'config' import/no-named-default\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1386/comments",
    "author": "kozhevnikov",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-04-24T19:30:20Z",
        "body": "Are you looking for `import config, { schema } from '../config';`?"
      },
      {
        "user": "kozhevnikov",
        "created_at": "2017-04-24T21:08:58Z",
        "body": "Yes, thank you. Had a little brain fart."
      }
    ]
  },
  {
    "number": 1384,
    "title": "Question: Using Enzyme and React",
    "created_at": "2017-04-24T10:20:18Z",
    "closed_at": "2017-04-24T15:37:04Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1384",
    "body": "By default `comma-dangles` on functions are set to `always-multiline`. How do you actually handle the following test example:\r\n\r\n```js\r\nconst wrapper = shallow(\r\n  <Component>\r\n    <MyComponent />\r\n  </Component> // this will require a comma-dangle here\r\n);\r\n```\r\n\r\nDo you disable this specific rule in tests if you use `enzyme` or do you have an internal workaround?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1384/comments",
    "author": "JPeer264",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-04-24T15:37:04Z",
        "body": "This isn't specifically an enzyme question, but it does come up a lot with `shallow`.\r\n\r\nHere's what the rule requires:\r\n```jsx\r\nconst wrapper = shallow(\r\n  <Component>\r\n    <MyComponent />\r\n  </Component>,\r\n);\r\n```\r\nor\r\n```jsx\r\nconst wrapper = shallow((\r\n  <Component>\r\n    <MyComponent />\r\n  </Component>\r\n));\r\n```"
      },
      {
        "user": "ljharb",
        "created_at": "2017-04-24T15:37:25Z",
        "body": "(for the record, we comply with the rule)"
      }
    ]
  },
  {
    "number": 1350,
    "title": "Using special characters in JSX.",
    "created_at": "2017-03-27T08:29:58Z",
    "closed_at": "2017-03-27T17:51:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1350",
    "body": "Sometimes it's desired to render special characters in text in JSX that must be somehow escaped, for example single quotes.\r\n\r\nInvalid:\r\n```jsx\r\n<p>This isn't valid</p>\r\n```\r\n\r\nMethod 1:\r\n```jsx\r\n<p>{\"This isn't valid\"}</p>\r\n```\r\n\r\nMethod 2:\r\n```jsx\r\n<p>This isn&apos;t valid</p>\r\n```\r\n\r\nI personally prefer method 1, but my coworker seems to prefer method 2. I believe consistency is the most important here.\r\n\r\nI think this is a common issue and the airbnb style guide could recommend one of these two methods.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1350/comments",
    "author": "remcohaszing",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-03-27T17:51:36Z",
        "body": "Straight quotes are typographically incorrect; always use `“ ” ‘ ’` instead in text.\r\n\r\nNote that `{\"This isn\\'t valid\"}` would be quite valid."
      }
    ]
  },
  {
    "number": 1349,
    "title": "Configuration for rule \"no-param-reassign\" is invalid ",
    "created_at": "2017-03-27T06:56:52Z",
    "closed_at": "2017-03-27T07:03:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1349",
    "body": "I think the latest version of eslint-config-airbnb-base v11.1.2 is giving me an error whenever I use the airbnb config with eslint. \r\n\r\nError log:\r\n\r\n```\r\nError: <project>/node_modules/eslint-config-airbnb-base/rules/best-practices.js:\r\n\tConfiguration for rule \"no-param-reassign\" is invalid:\r\n\tValue \"data[\"0\"].ignorePropertyModificationsFor\" has additional properties.\r\n\r\nReferenced from: <project>/node_modules/eslint-config-airbnb-base/index.js\r\nReferenced from: airbnb\r\n```\r\n\r\nAm I doing something wrong?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1349/comments",
    "author": "kartiklad",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-03-27T06:59:18Z",
        "body": "That means you didn't update eslint along with it - ie, you didn't update the peer deps.\r\n\r\nRerun the install command in the package readme to update the peer deps to the right versions."
      },
      {
        "user": "kartiklad",
        "created_at": "2017-03-27T07:03:47Z",
        "body": "@ljharb oh ok! Thanks a lot that a very quick response. It works now. "
      }
    ]
  },
  {
    "number": 1346,
    "title": "SQL Table/Column names and Javascript named in a isomorphic way",
    "created_at": "2017-03-23T14:13:23Z",
    "closed_at": "2017-03-28T06:39:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1346",
    "body": "How should I name sql database columns and tables as nodejs code always is using its reference as object keys. How to name essentially id names but columns too. \r\n\r\n**The way things is right now**\r\n```\r\nmysql> SHOW COLUMNS FROM Person;\r\n+------------+----------+------+-----+---------+----------------+\r\n| Field \r\n+------------+----------+------+-----+---------+----------------+\r\n| Id \r\n| Name\r\n| LivingCountry\r\n+------------+----------+------+-----+---------+----------------+\r\n5 rows in set (0.00 sec)\r\n```\r\n\r\nWill be used on the javascript nodejs app like \r\n\r\n```\r\n        let city = {\r\n            Id: 2,\r\n            Name: 'Kent',\r\n            LivingCountry: 'New Yourk'\r\n        }\r\n```\r\n\r\n**Is is correct to do like below?**\r\n\r\n```\r\nmysql> SHOW COLUMNS FROM person;\r\n+------------+----------+------+-----+---------+----------------+\r\n| Field\r\n+------------+----------+------+-----+---------+----------------+\r\n| personId\r\n| name\r\n| livingCountry\r\n+------------+----------+------+-----+---------+----------------+\r\n5 rows in set (0.00 sec)\r\n```\r\n\r\nSo, object on nodejs app will be used like this:\r\n\r\n```\r\n        let city = {\r\n            personId: 2,\r\n            name: 'Kent',\r\n            livingCountry: 'New Yourk'\r\n        }\r\n```\r\n\r\nThe question is important because I would like to easy code and maintain the code. SQL has its pattern but the app is essentially javascript typed. It will be better if I make SQL Table/Column names and Javascript named in a isomorphic way.\r\n\r\n**What do you experts say about that?**\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1346/comments",
    "author": "calebeaires",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-03-23T17:51:01Z",
        "body": "It's more correct, yes. Only constructor functions should be capitalized.\r\n\r\nIt's also uncommon in my experience in SQL to capitalize column names in that manner; they're typically lowercased and snake_cased."
      },
      {
        "user": "typehorror",
        "created_at": "2017-03-28T06:11:26Z",
        "body": "@ljharb How would you deal with such situation: if your data layer was to return your model's attributes snake_cased but your front end was to expect its object attributes to be camelCase ?\r\n\r\nI find myself wondering if it would be better to adopt a global convention (snake_case vs camelCase on both sides) or to have a point of conversion at the backend or the front end (middleware ?) doing the conversion from one to the other format. \r\n"
      },
      {
        "user": "ljharb",
        "created_at": "2017-03-28T06:13:19Z",
        "body": "Two choices:\r\n 1. use camelCase everywhere, but keep using snake_case only for server-generated attributes\r\n 1. always manually convert to camelCase after you get the data back from the network, and use camelCase everywhere.\r\n\r\nIf you have to pick a global convention on both sides, JavaScript should win - ie, camelCase."
      },
      {
        "user": "typehorror",
        "created_at": "2017-03-28T06:14:39Z",
        "body": "Good advice, thank you!"
      }
    ]
  },
  {
    "number": 1338,
    "title": "Question about Object in Arrays",
    "created_at": "2017-03-14T19:34:01Z",
    "closed_at": "2017-03-19T06:48:00Z",
    "labels": [
      "question",
      "pull request wanted"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1338",
    "body": "I did not found any style definitions about object in arrays. Which one of the following is preferred?\r\n\r\n```js\r\nconst someArray = [{\r\n  one: 'value',\r\n  two: 'value',\r\n}, {\r\n  one: 'value',\r\n  two: 'value',\r\n}];\r\n```\r\nor\r\n```js\r\nconst someArray = [\r\n  {\r\n    one: 'value',\r\n    two: 'value',\r\n  },\r\n  {\r\n    one: 'value',\r\n    two: 'value',\r\n  },\r\n];\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1338/comments",
    "author": "JPeer264",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-03-15T05:32:55Z",
        "body": "The latter would be most consistent with the rest of the guide, but I think either could be fine as long as you're consistent throughout your codebase."
      },
      {
        "user": "dani-sc",
        "created_at": "2017-03-15T12:15:20Z",
        "body": "The second one has the advantage that it leads to cleaner git diffs when adding additional objects."
      },
      {
        "user": "ljharb",
        "created_at": "2017-03-15T21:18:50Z",
        "body": "Well stated - that's why it's most consistent with the rest of the guide, and is also the sole motivation for adding trailing commas everywhere."
      },
      {
        "user": "JPeer264",
        "created_at": "2017-03-15T21:21:32Z",
        "body": "Wouldn't it be good to put that into the styleguide? "
      },
      {
        "user": "ljharb",
        "created_at": "2017-03-16T01:48:28Z",
        "body": "Sure! If someone wants to write up a PR adding that section, that'd be great."
      },
      {
        "user": "JPeer264",
        "created_at": "2017-03-16T07:47:38Z",
        "body": "Alright I will do an PR 👍 "
      }
    ]
  },
  {
    "number": 1331,
    "title": "Cannot find module 'estraverse-fb'",
    "created_at": "2017-03-06T23:52:15Z",
    "closed_at": "2017-03-06T23:53:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1331",
    "body": "Error:\r\n\r\n`Cannot find module 'estraverse-fb`\r\n\r\nAfter running:\r\n\r\n```\r\n(\r\n  export PKG=eslint-config-airbnb;\r\n  npm info \"$PKG@latest\" peerDependencies --json | command sed 's/[\\{\\},]//g ; s/: /@/g' | xargs npm install --save-dev \"$PKG@latest\"\r\n)\r\n```\r\n\r\nand then running `eslint app` the above error is show.",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1331/comments",
    "author": "garrettmaring",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-03-06T23:53:04Z",
        "body": "You're running the globally installed eslint - you should `npm uninstall -g eslint`.\r\n\r\nYour locally installed eslint should only be ran via an `npm run-script`, configured in the \"scripts\" field of your `package.json`."
      }
    ]
  },
  {
    "number": 1305,
    "title": "React-Native + AirBnB's ESLint configuration",
    "created_at": "2017-02-16T13:33:25Z",
    "closed_at": "2017-07-17T16:28:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1305",
    "body": "We have started using ESLint in our react-native project and I am interested to find out what the ideal settings are.\r\n\r\nI currently have the following in my .eslintrc.json file.\r\n\r\n```\r\n{\r\n    \"extends\": [\"airbnb\", \"plugin:react-native/all\"],\r\n    \"plugins\": [\r\n        \"react-native\"\r\n    ]\r\n}\r\n```\r\n\r\nSome questions I have: I keep seeing this \"parser\": 'babel-eslint' but when I went to their github they mention this is no longer neccesary. Should I be using it or not?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1305/comments",
    "author": "ItsNoHax",
    "comments": [
      {
        "user": "ItsNoHax",
        "created_at": "2017-02-16T14:20:20Z",
        "body": "Also if someone could Label this as a question, would be great!"
      },
      {
        "user": "tomkel",
        "created_at": "2017-04-13T19:21:09Z",
        "body": "Only stage 4 features are supported. If you are using something stage 3 and below, use `\"babel-eslint\"`.\r\n\r\nBasically, use `parser: \"eslint\"` until something breaks, which indicates that you are using an ES feature which hasn't made it into acorn yet. Then switch to `\"babel-eslint\"`."
      },
      {
        "user": "ItsNoHax",
        "created_at": "2017-07-17T16:28:25Z",
        "body": "Got all info I need"
      }
    ]
  },
  {
    "number": 1284,
    "title": "Generator/coroutine: \"Missing function expression name (func-names)\"",
    "created_at": "2017-02-01T05:27:11Z",
    "closed_at": "2017-02-01T05:32:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1284",
    "body": "I have a simple example of code here which fails eslint, is there a preferred way of expressing the following?\r\n\r\n``` js\r\nconst render = co.wrap(function* (itemId, opts = {}) {\r\n   ...yield...\r\n   ...yield...\r\n})\r\n```\r\n\r\nusing bluebird instead of co gives same results:\r\n\r\n```js\r\nconst render = P.coroutine(function* (itemId, opts = {}) {\r\n   ...yield...\r\n   ...yield...\r\n)}\r\n```\r\n\r\nThe lint error is \"Missing function expression name (func-names)\"\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1284/comments",
    "author": "pickworth",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-02-01T05:32:16Z",
        "body": "This style guide does not allow use of generators.\r\n\r\nThe `func-name` rule, however, requires that you name your functions - ie, `function* foo(…) {…}`."
      }
    ]
  },
  {
    "number": 1277,
    "title": "how can we stop a `nodejs` server started?",
    "created_at": "2017-01-23T18:28:41Z",
    "closed_at": "2017-01-23T18:37:11Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1277",
    "body": "hello,\r\ni start my `server.js` by the command line \r\n\r\n>  node server.js>node.log &\r\n\r\ni use the `proc_open` function to execute the cmd\r\n\r\nnow is there a way to stop it,althought i use the `proc_close` function but it still running,i try the `exec('kill'.PID);` too but it's not stoped att all ,how can i do it?",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1277/comments",
    "author": "fatimazbouj",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-01-23T18:37:11Z",
        "body": "This repo is about our JavaScript style guide, and isn't for general-purpose questions - I recommend visiting #node.js on Freenode IRC."
      },
      {
        "user": "fatimazbouj",
        "created_at": "2017-01-24T10:41:15Z",
        "body": "okey i'm sorry for this "
      }
    ]
  },
  {
    "number": 1265,
    "title": "new error",
    "created_at": "2017-01-18T02:47:51Z",
    "closed_at": "2017-01-18T06:23:58Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1265",
    "body": "\r\nconst foo = [1, 2];\r\nconst bar = foo;\r\n\r\nbar[0] = 9;\r\n\r\nconsole.log(foo[0], bar[0]);\r\n\r\nVM403:1 Uncaught SyntaxError: Identifier 'foo' has already been declared\r\n    at <anonymous>:1:1 \r\nin chrome\r\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1265/comments",
    "author": "zhiyongsun",
    "comments": [
      {
        "user": "vsemozhetbyt",
        "created_at": "2017-01-18T03:39:07Z",
        "body": "It seems you try to run this code twice in the console, so in the second attempt all identifiers are redeclared."
      },
      {
        "user": "ljharb",
        "created_at": "2017-01-18T06:23:58Z",
        "body": "Indeed, the console/repl isn't truly reflective of a real environment. You'll want to create block-level variables inside a block, or else restart the repl when you want to reuse a variable name."
      }
    ]
  },
  {
    "number": 1237,
    "title": " why?  [] = 1 [] = '1'",
    "created_at": "2017-01-08T14:33:35Z",
    "closed_at": "2017-01-08T17:59:34Z",
    "labels": [
      "invalid",
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1237",
    "body": "```\r\n> [0][0] = '1'\r\n'1'\r\n> [0][0]\r\n0\r\n> [] = 1\r\nTypeError: undefined is not a function\r\n> [] = '1'\r\n'1'\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1237/comments",
    "author": "zhangbowei",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2017-01-08T17:59:34Z",
        "body": "The first example is because assignments return their value.\r\nThe second is because the 0th element in the array `[0]` is zero.\r\nThe third is just broken; I suspect that if it wasn't a repl you'd get a different error.\r\nThe fourth is the same as the first."
      }
    ]
  },
  {
    "number": 1231,
    "title": "QUESTION: react/jsx-no-bind",
    "created_at": "2016-12-31T08:26:11Z",
    "closed_at": "2016-12-31T08:46:42Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1231",
    "body": "What do you think about this way of written instead of bind in constructor ?\r\n```\r\nclass Foo extends React.Component {\r\n  foo = () => {\r\n    doSomething();\r\n  }\r\n\r\n  render() {\r\n    return <button type=\"button\" onClick={this.foo}>blah</button>\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1231/comments",
    "author": "ButuzGOL",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-12-31T08:46:42Z",
        "body": "Nope, that's less efficient, because instead of the meat of the function being on the prototype, and the own property merely being a bound form of the (optimized) prototype function, the entire function is created wholesale for every instance.\r\n\r\nIn other words, using a class property with an arrow function is equivalent to `this.foo = () => { doSomething(); };` in the constructor - not `this.foo = this.foo.bind(this);`.\r\n\r\nEven when class properties are stage 3, and this guide permits their use, it will be a bad idea to use them in this fashion."
      }
    ]
  },
  {
    "number": 1199,
    "title": "Expected 'this' to be used by class method 'render'",
    "created_at": "2016-12-09T09:32:02Z",
    "closed_at": "2016-12-09T18:23:08Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1199",
    "body": "Hi, from what I've read this has already been fixed in the eslint-config-airbnb package but I'm getting this error. I've probably set up my .eslintrc file incorrectly or something so if anyone could point out my mistake I'd really appreciate it.\r\n\r\n\r\n.eslintrc\r\n\r\n```\r\n{\r\n    \"extends\": \"airbnb/base\",\r\n    \"parser\": \"babel-eslint\",\r\n    \"parserOptions\": {\r\n        \"sourceType\": \"module\",\r\n        \"allowImportExportEverywhere\": false,\r\n        \"ecmaFeatures\": {\r\n          \"jsx\": true,\r\n        },\r\n    },\r\n    \"plugins\": [\r\n        \"react\",\r\n    ],\r\n    \"env\": {\r\n        \"node\": true,\r\n        \"jasmine\": true,\r\n    },\r\n    \"rules\": {\r\n        \"id-length\": 0,\r\n        \"indent\": [1, 4],\r\n        \"jsx-quotes\": 1,\r\n        \"no-console\": 0,\r\n        \"no-unused-vars\": [1, {\"vars\": \"local\", \"args\": \"none\"}],\r\n        \"react/forbid-prop-types\": 1,\r\n        \"react/jsx-boolean-value\": 1,\r\n        \"react/jsx-closing-bracket-location\": 1,\r\n        \"react/jsx-curly-spacing\": 1,\r\n        \"react/jsx-indent-props\": 1,\r\n        \"react/jsx-key\": 1,\r\n        \"react/jsx-max-props-per-line\": 1,\r\n        \"react/jsx-no-duplicate-props\": 1,\r\n        \"react/jsx-no-undef\": 1,\r\n        \"react/jsx-sort-props\": 1,\r\n        \"react/jsx-uses-react\": 1,\r\n        \"react/jsx-uses-vars\": 1,\r\n        \"react/no-danger\": 1,\r\n        \"react/no-did-mount-set-state\": 1,\r\n        \"react/no-did-update-set-state\": 1,\r\n        \"react/no-direct-mutation-state\": 1,\r\n        \"react/no-multi-comp\": 1,\r\n        \"react/no-set-state\": 1,\r\n        \"react/no-unknown-property\": 1,\r\n        \"react/prefer-es6-class\": 1,\r\n        \"react/prop-types\": 1,\r\n        \"react/react-in-jsx-scope\": 1,\r\n        \"react/require-extension\": 1,\r\n        \"react/self-closing-comp\": 1,\r\n        \"react/sort-comp\": 1,\r\n        \"react/sort-prop-types\": 1,\r\n        \"react/wrap-multilines\": 1,\r\n        \"strict\": 0,\r\n    },\r\n}\r\n```\r\n\r\npackage.json\r\n\r\n```\r\n{\r\n  \"name\": \"KHTestApp\",\r\n  \"version\": \"0.0.1\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@exponent/ex-navigation\": \"^2.1.5\",\r\n    \"@exponent/vector-icons\": \"^2.0.3\",\r\n    \"babel-eslint\": \"6\",\r\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\r\n    \"babel-preset-react-native-stage-0\": \"^1.0.1\",\r\n    \"exponent\": \"^12.0.0-rc.5\",\r\n    \"react\": \"15.4.1\",\r\n    \"react-native\": \"0.39.0\",\r\n    \"react-native-code-push\": \"latest\",\r\n    \"react-native-vector-icons\": \"^3.0.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel-jest\": \"17.0.2\",\r\n    \"babel-preset-react-native\": \"1.9.0\",\r\n    \"eslint\": \"^3.11.1\",\r\n    \"eslint-config-airbnb\": \"^13.0.0\",\r\n    \"eslint-plugin-import\": \"^2.2.0\",\r\n    \"eslint-plugin-jsx-a11y\": \"^2.2.3\",\r\n    \"eslint-plugin-react\": \"^6.8.0\",\r\n    \"jest\": \"17.0.3\",\r\n    \"react-test-renderer\": \"15.4.1\"\r\n  },\r\n  \"jest\": {\r\n    \"preset\": \"react-native\"\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1199/comments",
    "author": "antsmo",
    "comments": [
      {
        "user": "SimenB",
        "created_at": "2016-12-09T13:52:24Z",
        "body": "What does your component look like?"
      },
      {
        "user": "antsmo",
        "created_at": "2016-12-09T13:55:33Z",
        "body": "I have it in a few but this is a very simple component that is receiving the error:\r\n\r\n```\r\nimport React, { Component } from 'react';\r\n\r\nimport KHNavigator from './navigation/KHNavigator';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <KHNavigator />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nSeems pointless having it just return another component but it's just a placeholder, there will be more login in here eventually."
      },
      {
        "user": "SimenB",
        "created_at": "2016-12-09T15:20:17Z",
        "body": "It's probably because your component could be an SFC, it doesn't need to be a class"
      },
      {
        "user": "antsmo",
        "created_at": "2016-12-09T15:45:22Z",
        "body": "Shouldn't eslint-config-airbnb block this error for lifecycle methods?"
      },
      {
        "user": "ljharb",
        "created_at": "2016-12-09T18:13:21Z",
        "body": "@MyGuySi First, `airbnb/base` is legacy - you want `eslint-config-airbnb-base` for that - but second, if you're using react, you need to use `airbnb` - ie, the top-level one."
      },
      {
        "user": "ljharb",
        "created_at": "2016-12-09T18:13:44Z",
        "body": "Separately, that component absolutely should be an SFC, and our main (react-compatible) config will enforce that."
      },
      {
        "user": "ljharb",
        "created_at": "2016-12-09T18:14:36Z",
        "body": "Your `eslintrc` should just be:\r\n```js\r\n{\r\n    \"extends\": \"airbnb\",\r\n    \"parser\": \"babel-eslint\",\r\n    \"env\": {\r\n        \"node\": true,\r\n        \"jasmine\": true,\r\n    },\r\n    \"rules\": {\r\n        \"id-length\": 0,\r\n        \"indent\": [1, 4],\r\n        \"no-console\": 0,\r\n        \"no-unused-vars\": [1, {\"vars\": \"local\", \"args\": \"none\"}],\r\n        \"strict\": 0,\r\n    },\r\n}\r\n```"
      },
      {
        "user": "antsmo",
        "created_at": "2016-12-09T18:19:28Z",
        "body": "@ljharb That's great, thank you for all of that :)\r\n\r\nI'm still a noob so thank you all for helping out. I'll try what you've suggested after the weekend"
      },
      {
        "user": "ljharb",
        "created_at": "2016-12-09T18:23:08Z",
        "body": "np, please reopen if it's still a problem"
      }
    ]
  },
  {
    "number": 1135,
    "title": "imports/prefer-default-export idiomatic use",
    "created_at": "2016-10-17T12:01:42Z",
    "closed_at": "2016-12-12T07:08:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1135",
    "body": "hi,\n\nhow is the case where a file grows from containing only 1 function to containing 2 handled best?\n\nexample:\n\nlet's say i have a file called `window.js`, which contains only one function, `showWindow()`.\nit's imported as `import { showWindow } from 'window'`.\n\nof course this goes against imports/prefer-default-export. how should this be fixed? i guess i move the code to `window/showWindow.js`.\n\nif i do that, then my import becomes `import showWindow from 'window/showWindow'`.\nnow what happens when a want to create another function, `countWindows()` ?\n\n2 possibilities:\n\nA.\ni move `showWindow` back to `window.js` and add `countWindows` there.\nif i do this, now i have to find all the places that imports `showWindow` and change those imports.\n\nB.\ni create another file called `window/countWindows.js` and put the function there.\nif i do this, it means that nearly all my files will only contain 1 function.\n\nso i wonder, how does airbnb handle this?\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1135/comments",
    "author": "gabor",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-10-18T00:46:06Z",
        "body": "The best solution is `B` - not every file contains only one function, obviously, but that's the best default (there are clear exceptions: constants, flux action creators, etc).\n\nIf you export `showWindow`, the guide requires that you name the file `showWindow.js`. Thus, `countWindows` would live in `countWindows.js`.\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-10-18T01:46:18Z",
        "body": "Hmm.. I'll usually go with a more generic filename containing the exported function while disabling the rule for a default export. For the exact reason you mention.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-10-18T05:11:36Z",
        "body": "@tleunen that's potentially a fine way to go also - it really depends on the use case.\n\nI'm suggesting that the _default_ be one function default exported per file - and that if you think carefully about a use case, and you need multiple exports, then great! Make an exception.\n\nThe point of the defaults is so that you _have_ to think about if and why you deviate - not that you can _never_ deviate.\n"
      },
      {
        "user": "gabor",
        "created_at": "2016-10-25T11:28:09Z",
        "body": "@ljharb thank you for the information.\n\nthe thing i do not like about the approach is that you and up with different things based on past actions... what i mean:\n- if i start `window.js` with both `showWindow()` and `countWindows()` , then it will be fine for the linter and everything is great\n- if i start `window.js` only with `showWindow()`, the linter will complain and i will have to move it to a separate file, and later `countWindows()` becomes a new file\n\nso here we are, in one case we have: `window.js`,\nin the other case `window/showWindow.js` and `window/countWindows.js` simply based on past decision (did i start with one function in the file or two functions in the file).\n\nwhile, the important thing should be whether having just `window.js` is better or having `window/showWindow.js` and `window/countWindows.js` is better right now.  though i do not know how this could be handled with a linter :)\n\n[EDIT]\n\nafter reading your response to @tleunen ... shouldn't maybe the linter simply disallow named exports (meaning: only allow default exports)? obviously there are situations where that is not preferred, but as you wrote you can disable it in those situations... that seems to me as a more consistent approach\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-10-25T17:08:34Z",
        "body": "Yes, it should disable named exports - the problem is that named exports make sense for a few specific use cases, like reducers, action_creators, constants, exporting a wrapped HOC for testing, etc - and a rule that prevented all named exports would be too restrictive.\n\nWe try to make the linter cover as much as possible, but there are times when you do still have to read the guide and apply human judgement :-)\n"
      }
    ]
  },
  {
    "number": 1130,
    "title": "Question about modifying with forEach",
    "created_at": "2016-10-15T02:12:52Z",
    "closed_at": "2016-10-15T05:37:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1130",
    "body": "The example for 13.6 contains the snippet\n\n``` javascript\narray.forEach((value) => {\n  value += 1;\n});\n```\n\nHowever, this style guide forbids modifying the value of an element.\n\nWhat's the recommended way to change a property of all elements in an array? I'm working with changing the `.style` of DOM nodes in an array, so using `.map()` doesn't really feel right to me...\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1130/comments",
    "author": "controversial",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-10-15T03:13:16Z",
        "body": "Whoops, that's not a very good example :-) I'll fix it.\n\nIn the case of DOM nodes, because \"the DOM\", you can't avoid mutation. So, in that case only, it'd be appropriate to use an inline eslint override comment. At Airbnb we don't tend to run into that problem because we use React.\n"
      },
      {
        "user": "controversial",
        "created_at": "2016-10-15T10:36:01Z",
        "body": "Ok. Thanks for the swift response!\n"
      }
    ]
  },
  {
    "number": 1119,
    "title": "React: Best practice of render multiple components with another types",
    "created_at": "2016-10-11T17:39:53Z",
    "closed_at": "2016-11-06T04:25:04Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1119",
    "body": "What do you think?\n\n```\nrender() {\n    return (\n        <div>\n            {items.map(item => {\n                if(item.type === 'shop') {\n                    return (\n                        <itemShop {...this.props} />\n                    );\n                }\n                return (\n                    <item {...this.props} />\n                )\n            }})}\n        </div>\n    );\n}\n```\n\nor\n\n```\nrender() {\n    const renderItems = [];\n    items.forEach(() => {\n        if(item.type === 'shop') {\n            renderItems.push(<itemShop {...this.props} />);\n        } else {\n            renderItems.push(<Item {...this.props} />);\n        }\n    });\n    return (\n        <div>{renderItems}</div>\n    );\n}\n```\n\nor\n\n```\nrender() {\n    const renderItems = items.map(() => {\n        if(item.type === 'shop') {\n            return <itemShop {...this.props} />;\n        }\n        return <Item {...this.props} />;\n    });\n    return (\n        <div>{renderItems}</div>\n    );\n}\n```\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1119/comments",
    "author": "petyappetrov",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-10-11T22:21:35Z",
        "body": "I'm not sure this really needs mentioning in the guide - to me, the latter approach is much better than the former, but I'd probably turn the mapper function into its own SFC instead.\n"
      }
    ]
  },
  {
    "number": 1087,
    "title": "PascalCase or camelCase for HOC filenames",
    "created_at": "2016-09-23T07:42:27Z",
    "closed_at": "2016-09-23T10:41:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1087",
    "body": "What is a correct filename  for that HOC component? `withFoo.jsx` or `WithFoo.jsx`?\n\n```\nexport default function withFoo(WrappedComponent) {\n    function WithFoo(props) {\n      return <WrappedComponent {...props} foo />;\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName\n      || WrappedComponent.name\n      || 'Component';\n\n    WithFoo.displayName = `withFoo(${wrappedComponentName})`;\n    return WithFoo;\n  }\n```\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1087/comments",
    "author": "danturu",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-09-23T10:41:49Z",
        "body": "The default export is `withFoo`, so `withFoo.jsx`.\n"
      },
      {
        "user": "danturu",
        "created_at": "2016-09-23T11:56:20Z",
        "body": "@ljharb thank you!\n"
      }
    ]
  },
  {
    "number": 1086,
    "title": "Suggestion for React Methods - binding event handlers",
    "created_at": "2016-09-21T19:53:24Z",
    "closed_at": "2016-09-21T22:26:03Z",
    "labels": [
      "question",
      "react"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1086",
    "body": "While I do agree with binding event handlers in the constructor, I've seen a huge trend in creating arrow functions and assigning them to a variable like\n\n```\nonClickDiv = () => {\n  // Do stuff\n}\n```\n\nBy doing this, there is no need for having to bind `this`. I was wondering whether this would make for a cleaner, less error-prone convention? Thoughts?\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1086/comments",
    "author": "joelseq",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-09-21T22:25:58Z",
        "body": "This is a very bad idea. This creates one function-valued instance property per instance - as opposed to one optimized function on the prototype that's simply bound per instance.\n\nIn other words, both approaches have per-instance properties, but only the latter will have a single, shared, optimized function that's accessible on the prototype.\n\nSeparately, this syntax is \"public fields\", which is a stage 2 proposal - in other words, it's not part of JavaScript yet, and this guide does not permit/encourage things to be used before stage 4 (stage 3 on a case-by-case basis).\n"
      },
      {
        "user": "joelseq",
        "created_at": "2016-09-25T07:43:45Z",
        "body": "@ljharb thanks a lot for the detailed explanation!\n"
      }
    ]
  },
  {
    "number": 1045,
    "title": "Variable Ordering",
    "created_at": "2016-08-29T17:18:24Z",
    "closed_at": "2016-09-07T06:01:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/1045",
    "body": "In your style guide, your only rule that is somewhat about variable order is to assign them where you need them.\n\nIf that rule is taken care of and you have multiple variable declarations, do you have an order preference? Alphabetical, logical (`start` before `end`), etc.\n\nSame question applies to object key order and JSX attributes\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1045/comments",
    "author": "merlinstardust",
    "comments": [
      {
        "user": "lencioni",
        "created_at": "2016-08-29T17:20:35Z",
        "body": "I'm not sure we have a preference in this style guide (I could be wrong!), but my personal preference is alphabetical because it is a simple and unambiguous rule that can be consistently and easily applied in all situations.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-08-29T17:33:59Z",
        "body": "As far as I'm aware, we do not have a preference for ordering of anything, except for \"absolute imports/requires should come before relative imports/requires\", and React component methods. \n\nAlphabetical certainly is simple and unambiguous, but is usually the kind of decision you want to make on a per-project level with the team.\n"
      }
    ]
  },
  {
    "number": 958,
    "title": "Promises indentation",
    "created_at": "2016-07-20T19:42:33Z",
    "closed_at": "2016-07-20T21:15:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/958",
    "body": "What do you prefer when writing promises?\n\n``` javascript\ncaches.open('cache').then(function (cache) {\n  cache.put(event.request, clonedResponse);\n});\n```\n\n---\n\n``` javascript\ncaches.open('cache')\n  .then(function (cache) {\n    cache.put(event.request, clonedResponse);\n  });\n```\n\nSome things that could alter the answer could be the `catch`, i found the second one clearer when using `catch`, but i also find the first one more clear when `catch` is ommited. Also if the promise is long like: `someObjectThatContains.someMethod(SomeVariable)`, chaining `then` in the same line can slip past the `then` method.\n\nAnyway, Do you have preference? \n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/958/comments",
    "author": "felixsanz",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-07-20T20:24:08Z",
        "body": "In general, every promise chain should have a `.catch` on it to ensure errors are handled.\n\nThat said, I think either approach is fine, and it likely depends on the specific context.\n"
      },
      {
        "user": "felixsanz",
        "created_at": "2016-07-20T20:45:30Z",
        "body": "So both of this are ok? That doesn't seem consistent :(\n\n``` javascript\ncaches.open('cache').then(function (cache) {\n  cache.put(event.request, clonedResponse);\n}).catch(function(e) {\n  //\n};\n```\n\n---\n\n``` javascript\ncaches.open('cache')\n  .then(function (cache) {\n    cache.put(event.request, clonedResponse);\n  })\n  .catch(function(e) {\n    //\n  });\n```\n\n(Btw ignore the other rules, i know i'm not using arrows, etc)\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-07-20T20:56:46Z",
        "body": "The goal is readability and consistency, and occasionally one takes a small hit in favor of the other.\n\nI suppose given those two I'd lean towards the former, but I don't think we have an official stance on it.\n"
      }
    ]
  },
  {
    "number": 927,
    "title": "Array with objects",
    "created_at": "2016-06-23T08:11:50Z",
    "closed_at": "2016-09-07T06:10:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/927",
    "body": "What's prefered?\n\n``` javascript\nconst x = [{\n  y: 'foo',\n  z: 'bar',\n}, {\n  y: 'foo',\n  z: 'bar',\n}]\n```\n\nor\n\n``` javascript\nconst x = [\n  {\n    y: 'foo',\n    z: 'bar',\n  },\n  {\n    y: 'foo',\n    z: 'bar',\n  },\n]\n```\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/927/comments",
    "author": "felixsanz",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-06-23T08:24:07Z",
        "body": "Either seem acceptable to me.\n"
      },
      {
        "user": "felixsanz",
        "created_at": "2016-06-23T08:31:52Z",
        "body": "The first is more beautiful but in the second you don't modify closing characters when adding new elements :confused: \n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-06-23T17:06:42Z",
        "body": "Thats a good point which does push more towards the second example.\n"
      },
      {
        "user": "zbinxp",
        "created_at": "2016-06-24T01:34:41Z",
        "body": "I prefer the latter, it's clear and easy to modify. However the last comma should be removed .\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-06-24T01:35:41Z",
        "body": "@zbinxp the final comma is required by our styleguide and linter config.\n"
      },
      {
        "user": "dlwalsh",
        "created_at": "2016-06-24T07:27:23Z",
        "body": "I don't see the issue with adding a new element to the first example:\n\n``` js\n   const x = [{\n     y: 'foo',\n     z: 'bar',\n   }, {\n     y: 'foo',\n     z: 'bar',\n+  }, {\n+    y: 'foo',\n+    z: 'bar',\n   }];\n```\n\nThe change is still perfectly clear.\n"
      },
      {
        "user": "felixsanz",
        "created_at": "2016-06-24T14:30:22Z",
        "body": "@dlwalsh you are modifying a line from the previous object just to add other object. If you want to add a new item, you shouldn't modify the others.\n"
      },
      {
        "user": "dlwalsh",
        "created_at": "2016-06-27T08:14:07Z",
        "body": "I get what you're saying, but it doesn't strike me as an issue. No meaningful information was modified. The `}, {` line is just a glorified separator.\n"
      },
      {
        "user": "LeanNetwork",
        "created_at": "2016-06-27T14:14:41Z",
        "body": "I prefer to use the second one.\n"
      },
      {
        "user": "alexander-akait",
        "created_at": "2016-09-06T10:39:44Z",
        "body": "@ljharb what style is preferred final? \n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-09-07T06:10:30Z",
        "body": "``` js\nconst x = [\n  {\n    y: 'foo',\n    z: 'bar',\n  },\n  {\n    y: 'foo',\n    z: 'bar',\n  },\n]\n```\n"
      }
    ]
  },
  {
    "number": 872,
    "title": "eslint-config-airbnb-base/legacy 'func' was used before it was defined",
    "created_at": "2016-05-09T11:44:08Z",
    "closed_at": "2016-05-09T16:23:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/872",
    "body": "Why the linter throws an error with this code?\n\n``` javascript\na();\n\nfunction a() {\n  // ...\n}\n```\n\nI have bypassed the error in this way, but I don't like the idea of overriding the rules of the style guide.\n\n``` json\n\"no-use-before-define\": [\"error\", { \"functions\": false }]\n```\n\nShould't it be the default behavior, instead of throw the error?\nAm I forced to declare the function before the use, even if I use the \"function declaration syntax\"?\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/872/comments",
    "author": "raxell",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-05-09T16:22:55Z",
        "body": "Indeed the function should be declared before its use, whether it's an expression or a declaration - we discourage relying on hoisting.\n"
      },
      {
        "user": "chirag04",
        "created_at": "2016-05-25T02:21:42Z",
        "body": "@ljharb what about circular dependencies among functions?\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-05-25T07:35:10Z",
        "body": "@chirag04 Luckily those are incredibly rare. Typically I see a circular dependency as a code smell, between functions or between modules. However, there are definitely a few cases where it's necessary - and that's what inline eslint comments are good for.\n\nIt's OK if, eyes open, your code deviates from a style guide, but the code should be profusely apologizing for it with comments, as opposed to the guide bending to allow for usually-bad patterns.\n"
      }
    ]
  },
  {
    "number": 863,
    "title": "Peer dependencies changed within a specific version",
    "created_at": "2016-05-04T15:31:36Z",
    "closed_at": "2016-05-04T16:08:29Z",
    "labels": [
      "question",
      "wontfix"
    ],
    "url": "https://github.com/airbnb/javascript/issues/863",
    "body": "When depending on `eslint-config-airbnb` and specific versions of it's peer dependencies, the release of  `eslint-config-airbnb-base 1.0.4` made npm start to complain about `UNMET PEER DEPENDENCY` because it upgraded the peer dependency `eslint-plugin-import` from `^1.5.0` to `^1.6.0`.\n\nIn the project where this problem occurred, we depend on specific versions of all dependencies rather than specifying versions with caret or version ranges, because we want all developers to have the same environment. When `eslint-config-airbnb 8.0.0`, we updated the dependencies to be:\n\n```\n    \"eslint\": \"2.8.0\",\n    \"eslint-config-airbnb\": \"8.0.0\",\n    \"eslint-plugin-import\": \"1.5.0\",\n    \"eslint-plugin-jsx-a11y\": \"1.0.2\",\n    \"eslint-plugin-react\": \"5.0.1\"\n```\n\n`eslint-config-airbnb` depends on `eslint-config-airbnb-base ^1.0.2`. The latest version at the time were `1.0.2`, so that were installed. Both `eslint-config-airbnb 8.0.0` and `eslint-config-airbnb-base 1.0.2` specifies the peer dependency `eslint-plugin-import ^1.5.0`, so that worked fine.\n\nHowever, when `eslint-config-airbnb-base 1.0.4` were released, it changed the peer dependency to `eslint-plugin-import ^1.6.0`. Since `eslint-config-airbnb` specifies the dependency with a caret, `eslint-config-airbnb-base 1.0.4` is now installed. Since `eslint-plugin-import 1.5.0` doesn't match the peer dependency `eslint-plugin-import ^1.6.0`, you get an `UNMET PEER DEPENDENCY` error.\n\nI don't think one release of `eslint-config-airbnb` should change peer dependencies over time, which is in effect what happened here. I'm not completely sure what the best solution is, but maybe it would be to depend on a specific version of `eslint-config-airbnb-base`, instead of a caret version.\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/863/comments",
    "author": "trygveaa",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-05-04T15:58:58Z",
        "body": "Depending on specific versions at the top level does not, in fact, ensure all developers have the same environment. The only way to ensure that is to check `node_modules` into version control, or, to use shrinkwrap - both of which would have prevented the issue you're running into.\n\nDependencies can change with every release, as they're not directly part of the API that semver governs. More to the point, this could happen just as easily with two entirely unrelated packages (and often does in the React ecosystem), and you wouldn't usually have the recourse of filing an issue to a single repo about it.\n\nWhat I'd recommend is for you to use semver ranges in package.json (to convey the right semantics for the version you expect) and then use shrinkwrap to ensure that, in fact, all developers have the same dependency tree. That way, you won't have sub-dependencies updating out from underneath you on every `npm install`.\n"
      }
    ]
  },
  {
    "number": 862,
    "title": "Difference in Linters? (JSHint vs ESLint)",
    "created_at": "2016-05-04T13:00:27Z",
    "closed_at": "2016-05-04T16:02:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/862",
    "body": "Hi guys,\nJust a simple question... Is there any difference in using the JSHint config file versus the eslint file (including all required packages)???\n\nAre there any rules skipped (especially in JSHint which has smaller size than all base rules of ESLint)?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/862/comments",
    "author": "mitsos1os",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-05-04T16:02:51Z",
        "body": "We don't use the jshint config, so I'm not actually sure how up to date it is. In general, jshint does not deal with style rules, so there's bound to be a lot of gaps in what jshint supports vs what eslint supports.\n\nPRs are welcome to keep the jshint config up to date!\n"
      }
    ]
  },
  {
    "number": 848,
    "title": "Naming convention for Promise.",
    "created_at": "2016-04-22T09:46:36Z",
    "closed_at": "2016-09-07T06:17:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/848",
    "body": "I'm so confused. In general case, we name the function like 'verb-what' like `getItem`, `setQuantity`, `request`, etc.\n\nOn case of GET functions, we can guess what type or what kind of values will return.\n\nHow about the function which return promise witch will return some other values?\nOr, a just Promise. How should I name that?\n\nFor example, there are a promise which will query the user's name from database, should the promise name be `getName` ? or `getNamePromise`?\n\nIn first case(getName), other co-worker could misguess that this function will return name synchronously, so he could directly assign the variables value, like this,\n\n```\nconst name = getName();\nconsole.log(name) // Promise {[[PromiseStatus]]: \"pending\"....}\n```\n\nit doesn't seem good to add 'Async' suffix (`getNameAsync`). \nadding prefix 'promise' ( `promiseGetName` ) neither.\n\n`promiseGettingName`\n`gettingName`\n...\nhmm....\n\nAny good idea for this? \n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/848/comments",
    "author": "namse",
    "comments": [
      {
        "user": "namse",
        "created_at": "2016-04-22T09:57:54Z",
        "body": "Do the verbs, like 'fetch' or 'load', look like return promise?\nBecause when I use Fetch API, it was ok for name of 'fetch' which return promise.\n\nif were, using 'loadName' instead 'getName' could be a solution, I think.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-04-22T16:09:13Z",
        "body": "We haven't yet written up best practices for Promises (see #597 #216).\n\nI'm not convinced any special naming is needed. Certainly add \"Async\" or \"Promise\" would be subpar.\n"
      },
      {
        "user": "namse",
        "created_at": "2016-04-25T05:21:42Z",
        "body": "But so many of .NET frameworks and libraries use 'Async' suffix so it make sure that function will return Task<> (promise) or that would need `await`.\n\nHow can we think `function getBoo` is Sync or Async? \nIn browser(specifically react-redux environment), the programmer might not consider about Promise's naming because there are a few Promise work against Node.js. So maybe I feel more sensitive about this problem. I'm on hard with Nodejs, Promise Things...\n\nGenerally functions that name with prefix 'get' really seem that it return some value immediately, isn't it?\nI think this could make developer confused it is Async function or Sync function. Should we have to check always it is really return value immediately or promise?\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-04-25T05:33:52Z",
        "body": "JS doesn't have types - so you know what the function will return the same way as with every other function: by referring to its implementation/documentation. A convention in a codebase can certainly allow you to pre-memorize what it means, but you still have to learn its meaning in the first place.\n\nAlso, `async function` and `Async function` and \"async function that takes a node-style callback\" all mean that the term is confusing - at this point, `async function` means only a function that is syntactically guaranteed to return a Promise.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-09-07T06:17:36Z",
        "body": "Closing this in favor of #216.\n"
      },
      {
        "user": "chardskarth",
        "created_at": "2017-08-14T03:46:20Z",
        "body": "I was searching for something like this: A naming convention to let my code readers know instantly that the variable is a promise. How about prepending **when**?\r\n\r\n```\r\nlet fsJetpack = require(\"fs-jetpack\");\r\nlet whenCurrentTree = fsJetpack.inspectTreeAsync(contentsPath);\r\n```\r\n\r\nI thought of the word when because of the ff reasons:\r\n\r\n- it sounds like then. a promise standard word\r\n- in english terms, it should mean 'when this happens'"
      },
      {
        "user": "RichAyotte",
        "created_at": "2019-08-01T23:56:13Z",
        "body": "Now that `async/await` is the norm, how about prefixing with  **for**?\r\n```js\r\nconst forCustomerData = async () => new Promise(...)\r\nconst customerData = await forCustomerData()\r\n```"
      }
    ]
  },
  {
    "number": 782,
    "title": "Allow arrow functions in JSX props",
    "created_at": "2016-03-09T17:02:13Z",
    "closed_at": "2016-03-21T22:10:05Z",
    "labels": [
      "question",
      "semver-patch: loosen/fix/document rules"
    ],
    "url": "https://github.com/airbnb/javascript/pull/782",
    "body": "Rationale: \n- Improves code readability. \n- Results in simpler solutions than the alternative.\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/782/comments",
    "author": "gilbox",
    "comments": [
      {
        "user": "kesne",
        "created_at": "2016-03-09T19:54:45Z",
        "body": "You should reference the eslint rule (which in this case is also `react/jsx-no-bind`).\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-09T19:56:25Z",
        "body": ":-1: \nYou can always find a way to avoid this. For example passing the item and the index as props, with the onClick callback.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-09T19:57:04Z",
        "body": "@tleunen what about at the bottom level, where you directly create a native DOM element?\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-10T02:01:42Z",
        "body": "What do you mean by that?\n\nTo me, it's way better to have\n\n``` jsx\nfunction ItemList(props) {\n  return (\n    <ul>\n      {props.items.map((item, index) => (\n        <Item\n          key={item.key}\n          item={item}\n          listIndex={index}\n          onItemClick={doSomethingWith}\n        />\n      ))}\n    </ul>\n  );\n}\n```\n\nAnd then Item can attach the `onClick` event where needed and call `props.doSomethingWith(props.item.name, props.listIndex)`\n\nThe downside is that it has to know the list index, but well.. I think it's better than creating a new bound function every time.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-10T02:03:28Z",
        "body": "@tleunen ok so what does the implementation of `Item` look like? _somewhere_ you are creating the `<a>` or `<input>` and that place needs to create a new function for the event handler.\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-10T02:07:19Z",
        "body": "Sure, but you only create it once\n\n``` jsx\nclass Item extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(e) {\n        this.props.doSomethingWith(props.item.name, props.listIndex);\n    }\n    render() {\n        return <button onClick={this.handleClick}>Click me</button>\n    }\n}\n```\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-10T02:15:37Z",
        "body": "Right, so the question is really whether `Item` should be an SFC with an arrow function in `onClick`, or whether it should be a `class`-based component like in your example.\n"
      },
      {
        "user": "kesne",
        "created_at": "2016-03-10T02:17:29Z",
        "body": "To me, the arrow function seems a lot cleaner: \n\n``` javascript\nfunction Item({ doSomethingWith, item, listIndex }) {\n  return <button onClick={() => doSomethingWith(item.name, listIndex)}>Click me</button>;\n}\n```\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-10T02:19:08Z",
        "body": "I know React can apply some performance optimizations on the SFC, but would that be better than having the class without recreating the function at every render?\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-10T02:22:20Z",
        "body": "First, as I have recently learned, the only advantage with the constructor-binding is that `.bind` is slow - creating new functions is not.\nSecond, performance should always be a secondary concern to code clarity and readability - something would have to be _very_ slow to trump readability concerns, and I've been convinced that creating non-bound functions as event handlers (not as props, however, just as bottom-level event handlers) is not a performance hit due to the design of React.\n\nThus this is mostly a question of subjective readability, I think.\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-10T02:29:04Z",
        "body": "Make sense. So creating non-bound functions is fine, but not otherwise.\n"
      },
      {
        "user": "lelandrichardson",
        "created_at": "2016-03-18T22:12:38Z",
        "body": "I am in favor of allowing arrow functions in render methods. We should continue disallowing `.bind(this)` though\n"
      },
      {
        "user": "tleunen",
        "created_at": "2016-03-18T23:13:32Z",
        "body": "@lelandrichardson Would `this` be allowed in an arrow function?\nI know Babel doesn't create a bound function, but how does the browser see the arrow function with the usage of `this` inside?\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-18T23:14:26Z",
        "body": "@tleunen the same as one without. it basically does a `var self = this` and creates a closure.\n"
      },
      {
        "user": "gilbox",
        "created_at": "2016-03-21T21:00:30Z",
        "body": "Which is more readable?\n\n_(A)_ `Foo` passes the data down and `Bar` passes it back up in `onSomething`\n\n```\nfunction Foo({ data }) {\n  return (\n    <Bar onSomething={Actions.zoom} data={data} />\n  )\n}\n```\n\n_(B)_ Use a closure\n\n```\nfunction Foo({ data }) {\n  return (\n    <Bar onSomething={() => Actions.zoom(data)} />\n  )\n}\n```\n\nThe answer is _(B)_ because you don't need to look at the code of `Bar` to understand what data is being passed into `Actions.zoom`. This is why we should usually favor using closures even for non-leaf nodes. Passing the same data down and then back up again is an anti-pattern imo.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-03-21T21:02:09Z",
        "body": "I agree that B is more readable - however with the rules as-is on master, you'd model that as a stateful component.\n"
      }
    ]
  },
  {
    "number": 725,
    "title": "Ternary with parens around the conditional?",
    "created_at": "2016-02-11T08:42:27Z",
    "closed_at": "2016-02-11T08:44:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/725",
    "body": "Is this bad or good?\n\n`(row.isRootItem === 'N')? '' : row.qty`\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/725/comments",
    "author": "surfer190",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-02-11T08:44:11Z",
        "body": "(nit: `( )` are parens, `[  ]` are brackets, `{ }` are braces)\n\nI'd consider those parens redundant, and in fact there is an `eslint` rule (`no-extra-parens`) that forbids redundant parens.\n"
      }
    ]
  },
  {
    "number": 723,
    "title": "Always use const to declare variables. ???",
    "created_at": "2016-02-10T14:46:49Z",
    "closed_at": "2016-02-10T18:26:54Z",
    "labels": [
      "question",
      "wontfix",
      "editorial"
    ],
    "url": "https://github.com/airbnb/javascript/issues/723",
    "body": "Shouldn't it be something along these lines :\n- Always use `let` to declare variables. Always use `const` to declare constantes or references. Avoid using `var`. Not doing so will result in global variables...\n- Use one `const` or `let` declaration per variable.\n\nMaybe the \"references\" and \"variables\" parts should be merged, linked or moved next to each other.\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/723/comments",
    "author": "e-hamon",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-02-10T16:42:20Z",
        "body": "Nope! Everything should be `const`, because reassignment is something that should be avoided.\n"
      },
      {
        "user": "e-hamon",
        "created_at": "2016-02-10T17:10:30Z",
        "body": "Then they should be called \"references\" not \"variables\" anymore.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-02-10T18:26:54Z",
        "body": "ah, lol, now I see what you mean. I think that colloquially, the name is \"variable\" even when the value doesn't vary.\n\nUsing the term \"reference\", I think, is very dangerous in a language that is exclusively pass-by-value, where the concept of \"references\" is already poorly understood.\n"
      },
      {
        "user": "BMorearty",
        "created_at": "2016-02-11T07:02:38Z",
        "body": "I agree that the word \"variable\" should not be used to describe something declared with `const`. If we're going to insist on immutability, heck, let's do it.\n\nPerhaps the word \"local\" will do (not just here but thoughout the doc).\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-02-11T07:06:50Z",
        "body": "In JS, `const` does not mean immutable. It simply means \"can not be reassigned\". `const a = {}; a.foo = 3;` is perfectly valid.\n"
      },
      {
        "user": "nivesh2",
        "created_at": "2016-02-11T12:25:18Z",
        "body": "declaring objects as `const` is best practice,\nbut declaring everything as `const` is something else,\nif we have to use variable `i` in `for loop` we would not be declaring it as a `const`.\n\nSo, i think what @e-hamon wanted to say was that it's a good practice to declare objects as `const` but other local variables as `let`\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-02-11T17:05:31Z",
        "body": "@nivesh2 that is true, because in a `for` loop, it would be reassigned. If you used a `for..in` or `for..of` loop, you would use `const` (of course, you're not using loops at all, because that's against the guide, right?)\n\nThe best practice is to declare **everything** as `const`, only use `let` when you're forced to reassign the variable (which should be avoided), and _never_ `var`.\n"
      },
      {
        "user": "e-hamon",
        "created_at": "2016-02-11T22:29:08Z",
        "body": "Thanks all, for your replies. Things are getting clearer for me.\nYes, I'm new on ES6, and that \"`const` is a variable\" thing puzzled me. I'm glad, I'm not alone.\nAfter carefully reading the style guide again, I think what also got me are a few inconsistencies between the 'types', 'references' and 'variables' sections.\nI'll let it brew and maybe offer some editorial fixes in a few days. I guess a pull request is the best channel.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-02-11T22:30:00Z",
        "body": "That'd be great, thanks!\n"
      },
      {
        "user": "Kagami",
        "created_at": "2016-11-17T20:47:43Z",
        "body": "This is old issue, but here is my 5 cents. How I use `var`, `let` and `const` in my projects:\n- Never use `var` (obvious, not needed anymore)\n- Use `const` for variables that aren't reassigned and mutated\n- Use `let` for everything else\n\nExamples:\n\n``` js\nconst SOME_CONSTANT = 1;\nconst SOME_COMPLEX_CONSTANT = {\n  a: 1,\n  b: 2,\n};\n// SOME_COMPLEX_CONSTANT is never mutated.\n\nfunction test() {\n  let a = [];\n  a.push(1);\n  a.push(2);\n  // a is not reassigned but mutated.\n  const b = [1, 2, 3];\n  // b is never mutated.\n}\n```\n\nWhy? Because that way you can easily see whether some object is mutated during the function execution. With `const` you can't know that.\n\nOf course you can't distinguish reassignment and mutability with that style, but mutability guarantees are more important in my opinion.\n\nAny thoughts?\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-11-17T21:09:56Z",
        "body": "`const` means \"constant reference\", not \"constant value\" - as such, mutability is irrelevant. Using `let` for something that's never reassigned but is mutated furthers developer ignorance and misunderstanding about what `const` is. Your `a` there should be a `const`.\n"
      },
      {
        "user": "WangXiZhu",
        "created_at": "2016-11-18T06:36:05Z",
        "body": "if you want to create a object immutable,you can use method Object.freeze()\n\n```\n  const CONSTANT = {key:1};\n  Object.freeze(CONSTANT);\n  CONSTANT.key = 2;  //2\n  console.log(CONSTANT);   //{key:2}\n```\n\nas @ljharb mention,const  means \"constant reference\"\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-11-18T06:48:52Z",
        "body": "@WangXiZhu `Object.freeze` only creates an object that's shallowly immutable - values of arrays, objects, Sets, and Maps won't be made immutable, and even if you `Object.freeze` a Set or a Map, it can't ever be made immutable.\n"
      },
      {
        "user": "WangXiZhu",
        "created_at": "2016-11-18T07:12:18Z",
        "body": "thanks, yeah, i create an object - values of Sets,it isn't immutable when  `Object.freeze` the Set.\n`Object.freeze` work on the object like `{key: 1}`,but how can i create an Object immutable?\nthere is a way to use facebook's Immutable.js.  thank  you again\n"
      },
      {
        "user": "Mujaddadi",
        "created_at": "2017-12-18T12:06:31Z",
        "body": "I know it's an old thread but I am also wondering the same. Why use constant for everything? For me It's not semantically correct. I tend to follow Kyle Simpson for it.  In all the languages I have written programs, constant means a constant such as value of PI. I use const for only constants. I think we are forgetting the semantic aspect of programming. Just because const is available to us, which will stop us reassigning the variable, it doesn't mean we should use const for everything. Maybe it's good for lazy programmer but we are abusing it. \r\n\r\nHere is what my typical JavaScript file looks like\r\n\r\nconst PI =3.4;\r\n\r\nfunction some(){\r\n  var someVar = 36; // So I know that this variable is available in all inner scopes of function \r\n    \r\n  if(doSome){\r\n      let innerScopevar = 56; //Now I know it's only available in this scope. \r\n   }\r\n   \r\n}"
      },
      {
        "user": "ljharb",
        "created_at": "2017-12-18T16:33:03Z",
        "body": "@Mujaddadi `const` means “constant reference”, not “constant value”, so it’s semantically correct for every value that is not reassigned.\r\n\r\nIf you are using `const` like “constant value” - even if that’s what it means in other languages (it’s not as many as you’d think), then that’s abuse - you’re not using JavaScript like it’s JavaScript.\r\n\r\nWhen declared at the top of a function, all of `var`, `let`, and `const` have identical scope, so you shouldn’t need `var` to signal that there."
      },
      {
        "user": "Mujaddadi",
        "created_at": "2017-12-18T17:11:20Z",
        "body": "@ljharb I understand that the `const` is constant reference”, not “constant value” in JavaScript but that doesn't change my intended purpose of using the `const` because even if we are defining constant values with const, the JavaScript datatypes other than objects are immutable.  So they will emit the same behavior as constants. \r\n\r\nI tried to find the reference from ECMAScript specification regarding their intended use for the `const` but couldn't find it. Perhaps if you can point me towards the right section. \r\n\r\nI agree that `var`, `let`, and `const` will have similar scope but that's not the intent use of `var` there. By using `var`, I visually mean that `let` can be used in inner scopes to semantically and also effectively signal that this variable belongs to that inner scope. If will use `let` also for variables which are required in inner scope, that will not create any visual signal for me. \r\n\r\nMy pint is, why creating confusion in a language, which has already many confusing parts. People take meaning of `const` literally and which creates more confusion.  "
      },
      {
        "user": "ljharb",
        "created_at": "2017-12-18T17:18:05Z",
        "body": "As Kyle Simpson would say, people need to learn how the language works :-)\r\n\r\nCreating confusion happens when `const` is misused to connote “constant value” (perhaps by only using it for primitives), or when “var” is used to mean “has function scope” when let/const, definedin a function scope, also have function scope."
      },
      {
        "user": "Mujaddadi",
        "created_at": "2017-12-18T17:39:57Z",
        "body": "And as Kyle Simpson will ask for the proper reference of using `const` other than the constants :D\r\n\r\nI probably didn't explain properly about my use of `var` there. Anyway, I think to each his own.  "
      },
      {
        "user": "ljharb",
        "created_at": "2018-05-19T13:54:17Z",
        "body": "const means “constant reference”, not “constant value” - your intended purpose is irrelevant if it contradicts what the keyword means in the language."
      }
    ]
  },
  {
    "number": 660,
    "title": "Minor updates on eslint-airbnb-config keep breaking my tests",
    "created_at": "2016-01-06T19:36:54Z",
    "closed_at": "2016-01-06T20:18:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/660",
    "body": "It seems every once in a while eslint-airbnb-config introduces changes that break my lint tests. Most recently: \n\n```\n    9:13  error  There should be no space after '['            array-bracket-spacing\n    9:51  error  There should be no space before ']'           array-bracket-spacing\n   10:5   error  Unquoted reserved word `default` used as key  quote-props\n   16:5   error  Unquoted reserved word `default` used as key  quote-props\n   21:5   error  Unquoted reserved word `default` used as key  quote-props\n   22:13  error  There should be no space after '['            array-bracket-spacing\n   22:36  error  There should be no space before ']'           array-bracket-spacing\n   26:5   error  Unquoted reserved word `default` used as key  quote-props\n   27:13  error  There should be no space after '['            array-bracket-spacing\n   27:26  error  There should be no space before ']'           array-bracket-spacing\n   31:5   error  Unquoted reserved word `default` used as key  quote-props\n```\n\nThose errors were not present in 3.0.0 but started showing up after I updated to 3.2.3. Could maintainers bump the major version of the npm package when such breaking changes are introduced?\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/660/comments",
    "author": "olalonde",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2016-01-06T19:40:49Z",
        "body": "@olalonde 3.0.0 was just released 2 days ago, and 3.0.1 an hour ago. Did you mean v3.0.1?\n\nThe reality of a linter config is that almost every change could be \"breaking\" by typical semver standards. If I strictly followed what semver conventionally implies, there would only be patch (loosening enforcement of something, which almost never happens) or major (tightening enforcement of something, the primary purpose of a linter config).\n\nThe rubric I'm applying here is: if a linter rule is simply enabling enforcement of something our styleguide already recommends, it's minor. If it's dropping enforcement because our styleguide doesn't actually require it, it's patch. The only time it's a major bump is if the eslint config is changing as a result of an actual styleguide change.\n"
      },
      {
        "user": "olalonde",
        "created_at": "2016-01-06T20:18:45Z",
        "body": "Ok thanks for the clarification. I'm not sure where I got that version number :/\n"
      }
    ]
  },
  {
    "number": 619,
    "title": "Minor cleanup for the React styleguide",
    "created_at": "2015-12-14T02:40:02Z",
    "closed_at": "2015-12-23T23:04:00Z",
    "labels": [
      "question",
      "semver-breaking: guide change",
      "editorial"
    ],
    "url": "https://github.com/airbnb/javascript/pull/619",
    "body": "This fixes some minor things that I thought were missing from the styleguide.\n\nIf people are unhappy about enforcing names for event handlers or additional render methods, I'm happy to discuss/remove.\n\n---\n- Obey our own styleguide for modules.\n- Added missing rule for `true` props.\n- New rule on event handler binding.\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/619/comments",
    "author": "kesne",
    "comments": [
      {
        "user": "koistya",
        "created_at": "2015-12-14T16:47:47Z",
        "body": "> Prefix the name of event handlers with `on`.\n\n``` jsx\n<button onClick={handleClick}>Click me</button>\n           │          │\n           │          └─ (verb) component's action\n           └─ (noun) component's property\n```\n\nIn many cases the event handlers (actions) should be named so that it's easy to understand what a particular function is doing. For example:\n\n``` jsx\n<button onClick={pokePlayer}>Poke Player</button>\n           │          │\n           │          └─ (verb) a function performing a specific action\n           └─ (noun) a property holding a reference to the component's action(s)\n```\n\nIn both these examples using the `on` prefix for action names (as this PR suggests) doesn't make any sense to me. I would rather prefix my components' actions with verbs (`handleClick`, `deleteUser`, `closeModal` etc.).\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-14T20:03:08Z",
        "body": "That is a pretty convincing counterpoint.\n"
      },
      {
        "user": "kesne",
        "created_at": "2015-12-14T20:44:35Z",
        "body": "The one issue with that is it makes the `sort-comp` rule pretty useless, assuming those methods exist on the component.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-15T00:20:44Z",
        "body": "That is true. However, I'm not convinced we want to retain that rule (obv it'll need further discussion)\n"
      },
      {
        "user": "kesne",
        "created_at": "2015-12-15T06:27:35Z",
        "body": "I'm happy to drop that from this PR and leave it for another conversation.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-15T06:33:55Z",
        "body": "@kesne yeah let's split the naming section into a separate PR, and keep the rule fix and the rest of the guide cleanups?\n"
      },
      {
        "user": "charpeni",
        "created_at": "2015-12-17T16:31:46Z",
        "body": "I think we should use arrow functions instead of `.bind(this)`, it's more ES6.\n\n``` javascript\n// bad\n  class extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.onClickDiv = this.onClickDiv.bind(this);\n    }\n\n    onClickDiv() {\n      // do stuff\n    }\n\n    render() {\n      return <div onClick={this.onClickDiv} />\n    }\n  }\n\n// good\n  class extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    onClickDiv = () => {\n      // do stuff\n    }\n\n    render() {\n      return <div onClick={this.onClickDiv} />\n    }\n  }\n```\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-17T16:55:20Z",
        "body": "@Charpeni That would require the class properties proposal, which we don't yet use at Airbnb because it's too far from being finalized.\n"
      },
      {
        "user": "goatslacker",
        "created_at": "2015-12-17T20:36:22Z",
        "body": "> it's more ES6.\n\nIt's actually not even ES7 :sob: \n"
      },
      {
        "user": "charpeni",
        "created_at": "2015-12-18T16:18:43Z",
        "body": "@ljharb  I did not noticed that class properties was only a proposal, thank you for the clarification.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-23T20:34:27Z",
        "body": "LGTM pending one final rebase. (This is a breaking change, fwiw)\n"
      }
    ]
  },
  {
    "number": 548,
    "title": "consistent-return and promises",
    "created_at": "2015-10-16T08:56:43Z",
    "closed_at": "2016-07-05T08:44:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/548",
    "body": "I kind of like the consistent-return rule except when using promises. I often find myself writing this style of code:\n\n``` javascript\nconst something = () => {\n    return somePromise().then((someval) => {\n      if (!someval) return;\n      return someOtherPromise();\n   });\n};\n```\n\nWhat should I put as return value in the first return? `return null` fixes the \n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/548/comments",
    "author": "olalonde",
    "comments": [
      {
        "user": "ljharb",
        "created_at": "2015-10-16T16:16:57Z",
        "body": "`return null` or `return undefined` or `return Promise.resolve()` or `if (someval) { return someOtherPromise(); }` are all some options\n"
      },
      {
        "user": "justjake",
        "created_at": "2015-10-19T17:00:53Z",
        "body": "I don't like consistent return and usually turn it off on a file by file basis, or across a project. \n"
      },
      {
        "user": "graingert",
        "created_at": "2016-07-05T08:41:39Z",
        "body": "@ljharb `if (someval) { return someOtherPromise(); }` doesn't work, because there's an implicit return undefined, which is what this rule is trying to prevent.\n"
      },
      {
        "user": "ljharb",
        "created_at": "2016-07-05T08:44:26Z",
        "body": "Ah, true. in that case, `return someval ? someOtherPromise() : Promise.resolve();` is probably ideal.\n"
      }
    ]
  },
  {
    "number": 335,
    "title": "[Question] Wrapping conditionals",
    "created_at": "2015-05-05T09:28:42Z",
    "closed_at": "2015-12-23T21:53:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/335",
    "body": "Is there any prefered way of doing this kind of things?\n\n``` javascript\nif ((a == b) && (c > d * 2))\n```\n\n``` javascript\nif (a == b && c > d * 2)\n```\n\n``` javascript\nif ((a == b) && (c > (d * 2)))\n```\n\netc\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/335/comments",
    "author": "felixsanz",
    "comments": [
      {
        "user": "goatslacker",
        "created_at": "2015-05-05T09:40:10Z",
        "body": "No we don't have any set styles for this sort of thing, that I'm aware of at least. cc @hshoff?\n\nI'd favor the 2nd one only because it's obvious (to me) what takes precedence.\n"
      },
      {
        "user": "felixsanz",
        "created_at": "2015-05-05T09:57:51Z",
        "body": "plus... what about multiline? \n\n``` javascript\nif (a == b && c > d * 2 && e <= f)\n```\n\nVS\n\n``` javascript\nif (a == b\n&& c > d * 2\n&& e <= f)\n```\n\nWould be nice to add a section about this with your best practices\n"
      },
      {
        "user": "nkbt",
        "created_at": "2015-05-05T10:06:21Z",
        "body": "``` javascript\nif (a == b &&\n  c > d * 2 &&\n  e <= f)\n```\n\nBut only if exceeds max line width\n"
      },
      {
        "user": "nkbt",
        "created_at": "2015-05-05T10:12:20Z",
        "body": "If conditions look too complex to read or are too long, then we take them out of `if` into separate nicely named vars.\n\n``` javascript\nconst isSomething = c > d * 2;\nconst isAnotherThing= e <= f;\nif (isSomething && isAnotherThing)\n```\n"
      },
      {
        "user": "ljharb",
        "created_at": "2015-12-23T21:17:46Z",
        "body": "I definitely would never want multiline, and definitely would prefer adding the extra parens for readability (only for comparison and boolean operations).\n"
      },
      {
        "user": "felixsanz",
        "created_at": "2015-12-23T21:53:18Z",
        "body": "Forgot to close it. Thanks guys!\n"
      }
    ]
  },
  {
    "number": 71,
    "title": "Prefer hash for event payloads?",
    "created_at": "2013-06-18T18:38:40Z",
    "closed_at": "2013-07-01T21:12:25Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/airbnb/javascript/issues/71",
    "body": "I came across this issue today and thought it might be worth adding to the style guide:\n\nWhen attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), I think it's preferable to pass a hash instead of a raw value. For example, instead of:\n\n``` js\n$(this).trigger('listingUpdated', listing.id);\n\n...\n\n$(this).on('listingUpdated', function(e, listingId) {\n  // do something with listingId\n});\n```\n\nprefer:\n\n``` js\n$(this).trigger('listingUpdated', { listingId : listing.id });\n\n...\n\n$(this).on('listingUpdated', function(e, data) {\n  // do something with data.listingId\n});\n```\n\nWhy? Well, in the second example, if one were to add more data to the event, one wouldn't need to find and update every handler for `listingUpdated`. It's similar to how it can be preferable to pass an options hash in Ruby instead of optional parameters.\n\nIf we like this, I can write it up and submit a pull request.\n\n**Edit:** Added `e` as the first argument to the callback functions. Thanks @jamesreggio.\n",
    "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/71/comments",
    "author": "iamnirav",
    "comments": [
      {
        "user": "jamesreggio",
        "created_at": "2013-06-18T19:40:57Z",
        "body": ":thumbsup:  I agree with this convention for the reasons above, plus:\n- jQuery only allows you to pass one data argument to `trigger` (other systems lack this limitation)\n- it is more straightforward to re-raise an event when you only have one data argument, versus having to slice or apply `arguments` in order to coordinate with a multi-argument calling convention\n\nOn that subject, I believe you have a bug in your example code.  The callbacks passed to `jQuery.fn.on` will receive a `jQuery.Event` instance as the first argument, followed by the data passed to `trigger`.\n\nI do have the following hesitations, which I hope somebody else will second or assuage:\n- `Backbone.Events` bucks this convention; when subscribing to the `all` event, the first argument will be the event name followed by the remaining `trigger` payload\n- Furthermore, a significant number of `Backbone.Events` will pass an instance to the object that triggered the event as the first (and often only) argument\n"
      },
      {
        "user": "iamnirav",
        "created_at": "2013-06-18T19:46:50Z",
        "body": "@jamesreggio Ah, good catch. Updated my examples. However, I'm not sure how your hesitations apply—it seems like whenever you're passing a data payload with an event, you can pass an object instead of a value, regardless of the system involved.\n"
      }
    ]
  }
]