[
  {
    "number": 2116,
    "title": "Patents, web seeds, and separating out",
    "created_at": "2021-06-28T15:54:30Z",
    "closed_at": "2021-09-09T12:05:25Z",
    "labels": [
      "question",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/2116",
    "body": "Patent number 9614907, owned by BitTorrent Inc, seems to describe web seeds.\r\n\r\nHas someone already established whether BitTorrent would make claims on businesses that used WebTorrents?\r\n\r\nAnd would it be possible to separate out the functionality in the WebTorrent library to avoid known patents?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/2116/comments",
    "author": "tom-adsfund",
    "comments": [
      {
        "user": "tom-adsfund",
        "created_at": "2021-06-28T16:57:11Z",
        "body": "Since BEP19 was released in 2008, I guess web seeds themselves are probably not an issue..."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-09-01T12:05:23Z",
        "body": "Is this still relevant? If so, what is blocking it? Is there anything you can do to help move it forward?"
      }
    ]
  },
  {
    "number": 2016,
    "title": "How to reseed a torrent with the same magnetURI ??",
    "created_at": "2021-03-10T23:59:28Z",
    "closed_at": "2021-05-19T17:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/2016",
    "body": "**`How to reseed a torrent from browser with the same magnetURI after being deleted by all peers ??`**                                                                                                                  ",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/2016/comments",
    "author": "ibrahemesam",
    "comments": [
      {
        "user": "anesuc",
        "created_at": "2021-03-16T20:51:56Z",
        "body": "You won't believe the answer. Actually it's pretty believable if you think about it. Assuming you have the same variables (i.e same trackers) just restart it with .seed, the magnetURI is the same."
      },
      {
        "user": "SilentBot1",
        "created_at": "2021-05-19T17:00:35Z",
        "body": "Hi @ibrahemesam,\r\n\r\nAs noted by @anesuc, the infohash for a torrent is determined by the content, so as long as you call .seed on the same content that was downloaded, this should re-create the same torrent and start seeding this, though if you want this to be available via the old magnet address, you will need to ensure to re-add the same trackers on the old link.\r\n\r\nAs this is a question and not an issue, I'm going to close this, but If you have any troubles getting this to work, please don't hesitate to let us know.\r\n\r\nMany thanks,\r\nBrad"
      }
    ]
  },
  {
    "number": 1918,
    "title": "Watching the media file in real time on mobile device using WebTorrent?",
    "created_at": "2020-09-17T00:06:08Z",
    "closed_at": "2020-11-11T03:10:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1918",
    "body": "Hello everyone, I have been looking for a solution to the problem of how to apply WebTorrent to mobile devices, but I still have no idea. My question is:\r\n\r\n1: The user expects to watch the media files in the torrent in real time on the mobile device without waiting for the download to be completed (we assume that the download speed is fast and does not affect the viewing experience).\r\n\r\n2: On mobile devices, the system player function is too simple, users expect to be able to use a custom player to play the media files in the torrent\r\n\r\nI have tried the solution of \"libtorrent+local HTTP server\" to solve these problems, and Popcorn Time For Mobile also uses this solution. The realization principle is: create a local HTTP server for the downloading media file, through this local HTTP server, we can access the local cache of this media file. The external player can directly play the link of this local server, so that we can use the custom player to play the media files in the torrent in real time.\r\n\r\nLibtorrent is written in C++, so this solution can be implemented for mobile devices. I want to use WebTorrent, which is more lightweight. But WebTorrent is based on JavaScript. If we implement this solution based on WebTorrent on mobile devices, users can only use our services through a browser. I have checked WebTorrent related APIs and other materials, but I have not found how to implement this solution using WebTorrent.\r\n\r\nSo I want to know: how to implement a solution similar to \"libtorrent+local HTTP server\" based on WebTorrent? Or does WebTorrent have any other solutions for the above problems on mobile devices?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1918/comments",
    "author": "arlins",
    "comments": [
      {
        "user": "I-Cat",
        "created_at": "2020-11-02T00:17:42Z",
        "body": "It has to be downloaded in order of blocks, to be able to play back from an active downloading torrent.\r\nThen call the Loop back\r\nCashing is needed of course. I'd say min 2gb cash would be needed Wich is most lower quality videos.\r\n@arlins "
      },
      {
        "user": "feross",
        "created_at": "2020-11-11T03:10:17Z",
        "body": "If you have the ability to make a native app – i.e. you're not limited to running your code in the web browser – then you can just use the `torrent.createServer()` function to create a local HTTP server and then serve the content to whatever video player you want which supports HTTP streaming."
      }
    ]
  },
  {
    "number": 1882,
    "title": "Progressive JPG",
    "created_at": "2020-06-30T02:03:40Z",
    "closed_at": "2020-09-04T19:31:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1882",
    "body": "is it possible to implement progressive JPG ?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1882/comments",
    "author": "jadsongmatos",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2020-09-04T19:31:17Z",
        "body": "If the downloading strategy matches order for it, I don't see why not :)\r\n\r\nNobody is working on that, but if you'd like to, feel free to open an PR, would be an amazing addition"
      },
      {
        "user": "jadsongmatos",
        "created_at": "2020-09-06T02:25:26Z",
        "body": "Does anyone know how browser implements this ?"
      }
    ]
  },
  {
    "number": 1768,
    "title": "How to use the torrent file which generated by utorrent",
    "created_at": "2019-10-27T00:02:00Z",
    "closed_at": "2020-09-19T06:52:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1768",
    "body": "<!-- DO NOT POST LINKS OR REFERENCES TO COPYRIGHTED CONTENT IN YOUR ISSUE. -->\r\n\r\n**What version of this package are you using?**\r\n\r\n**What problem do you want to solve?**\r\n\r\n**What do you think is the correct solution to this problem?**\r\n\r\n**Are you willing to submit a pull request to implement this change?**\r\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1768/comments",
    "author": "tiger2014",
    "comments": [
      {
        "user": "meotimdihia",
        "created_at": "2019-11-19T05:06:56Z",
        "body": "> To make BitTorrent work over WebRTC (which is the only P2P transport that works on the web) we made some protocol changes. Therefore, a browser-based WebTorrent client or \"web peer\" can only connect to other clients that support WebTorrent/WebRTC.\r\n> \r\n> To seed files to web peers, use a client that supports WebTorrent, e.g. WebTorrent Desktop, a desktop client with a familiar UI that can connect to web peers, webtorrent-hybrid, a command line program, or Instant.io, a website. Established torrent clients like Vuze have already added WebTorrent support so they can connect to both normal and web peers. We hope other clients will follow.\r\n> \r\n> \r\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2020-09-05T05:02:23Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 1707,
    "title": "Ice connection keeps switching from connected to disconnected",
    "created_at": "2019-08-14T10:58:15Z",
    "closed_at": "2019-08-14T20:55:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1707",
    "body": "**What version of this package are you using?**\r\n0.107.3\r\n**What operating system, Node.js, and npm version?**\r\n12.8.0\r\n\r\nHi,\r\nHere is my problem: right after one peer starts sharing and another starts leeching (sometimes a few Ko of data are shared and it stops right after), the state of the ice connection keeps switching from connected to disconnected.\r\nCould anyone point me to where should I look in order to fix this problem?\r\n(The strange thing is that everything worked fine on my website until I made a git fetch/reset to update a few files with nothing (if I'm not mistaken) related to webtorrent)\r\n\r\nThanks a lot for your help!\r\n\r\nfrom the console:\r\n> bittorrent-protocol [8955f413] got interested +162ms\r\nbrowser.js:96 bittorrent-protocol [8955f413] unchoke +0ms\r\nbrowser.js:96 bittorrent-protocol [8955f413] got request index=38 offset=0 length=2239 +91ms\r\nbrowser.js:96 bittorrent-protocol [8955f413] piece index=38 offset=0 +492ms\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: disconnected) (gathering: complete) +7s\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: connected) (gathering: complete) +3s\r\nbrowser.js:96 simple-peer [fff8bb0] maybeReady pc true channel true +1ms\r\nbrowser.js:100 engine.io-client:socket writing ping packet - expecting pong within 5000ms +15s\r\nbrowser.js:100 engine.io-client:socket flushing 1 packets in socket +0ms\r\nbrowser.js:100 engine.io-client:socket socket receive: type \"pong\", data \"undefined\" +33ms\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: disconnected) (gathering: complete) +9s\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: connected) (gathering: complete) +1s\r\nbrowser.js:96 simple-peer [fff8bb0] maybeReady pc true channel true +1ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +23s\r\nbrowser.js:96 simple-peer [1175445] destroy (error: undefined) +3s\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [f121415] destroy (error: undefined) +1ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +2ms\r\nbrowser.js:96 simple-peer [4e48551] destroy (error: undefined) +2ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [d2b3dfb] destroy (error: undefined) +1ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +0ms\r\nbrowser.js:96 simple-peer [2c8dd5e] destroy (error: undefined) +0ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [2ae3ff2] destroy (error: undefined) +1ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +2ms\r\nbrowser.js:96 simple-peer [04fe70d] destroy (error: undefined) +3ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [fc9a94b] destroy (error: undefined) +0ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [f75e0eb] destroy (error: undefined) +1ms\r\nbrowser.js:96 bittorrent-tracker:websocket-tracker tracker timeout: destroying peer +1ms\r\nbrowser.js:96 simple-peer [dae7948] destroy (error: undefined) +1ms\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: disconnected) (gathering: complete) +4s\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: connected) (gathering: complete) +2s\r\nbrowser.js:96 simple-peer [fff8bb0] maybeReady pc true channel true +0ms\r\nbrowser.js:100 engine.io-client:socket writing ping packet - expecting pong within 5000ms +25s\r\nbrowser.js:100 engine.io-client:socket flushing 1 packets in socket +1ms\r\nbrowser.js:100 engine.io-client:socket socket receive: type \"pong\", data \"undefined\" +32ms\r\nbrowser.js:96 simple-peer [fff8bb0] iceStateChange (connection: disconnected) (gathering: complete) +8s\r\nbrowser.js:96 simple-peer [fff8bb0] on channel close +3s\r\nbrowser.js:96 simple-peer [fff8bb0] destroy (error: undefined) +0ms\r\nbrowser.js:96 webtorrent:peer destroy 2d5757303030372d324e63313431643848565064 (error: undefined) +39s\r\nbrowser.js:96 simple-peer [fff8bb0] destroy (error: undefined) +1ms\r\n\r\nfrom chrome://webrtc-internals\r\n>14/08/2019 à 12:50:02 | icegatheringstatechangecomplete\r\n-- | --\r\n14/08/2019 à 12:50:02 | iceconnectionstatechangeconnected\r\n14/08/2019 à 12:50:02 | iceconnectionstatechange (legacy)connected\r\n14/08/2019 à 12:50:03 | connectionstatechangeconnected\r\n14/08/2019 à 12:50:04 | onRemoteDataChannellabel: fdcac08121283cdddf9272dd5496807cf38a9019, reliable: true\r\n14/08/2019 à 12:50:09 | iceconnectionstatechangedisconnected\r\n14/08/2019 à 12:50:09 | iceconnectionstatechange (legacy)\r\n14/08/2019 à 12:50:09 | connectionstatechangedisconnected\r\n14/08/2019 à 12:50:10 | iceconnectionstatechangeconnected\r\n14/08/2019 à 12:50:10 | iceconnectionstatechange (legacy)connected\r\n14/08/2019 à 12:50:10 | connectionstatechangeconnected\r\n14/08/2019 à 12:50:18 | iceconnectionstatechangedisconnected\r\n14/08/2019 à 12:50:18 | iceconnectionstatechange (legacy)disconnected\r\n14/08/2019 à 12:50:18 | connectionstatechangedisconnected\r\n14/08/2019 à 12:50:21 | iceconnectionstatechangeconnected\r\n14/08/2019 à 12:50:21 | iceconnectionstatechange (legacy)connected\r\n14/08/2019 à 12:50:21 | connectionstatechangeconnected\r\n14/08/2019 à 12:50:28 | iceconnectionstatechangedisconnected\r\n14/08/2019 à 12:50:28 | iceconnectionstatechange (legacy)disconnected\r\n14/08/2019 à 12:50:28 | connectionstatechangedisconnected\r\n14/08/2019 à 12:50:31 | iceconnectionstatechangeconnected\r\n14/08/2019 à 12:50:31 | iceconnectionstatechange (legacy)connected\r\n14/08/2019 à 12:50:31 | connectionstatechangeconnected\r\n14/08/2019 à 12:50:38 | iceconnectionstatechangedisconnected\r\n\r\nedit: after turning off/on my CPE (I hope it's the correct translation for \"box internet\") once again, everything works fine now",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1707/comments",
    "author": "Tinouga",
    "comments": [
      {
        "user": "feross",
        "created_at": "2019-08-14T20:55:40Z",
        "body": "Glad you got your issue resolved. Connection issues depending on network conditions are unfortunately part of life in distributed systems like WebTorrent."
      }
    ]
  },
  {
    "number": 1670,
    "title": "Is numPeers deprecated?",
    "created_at": "2019-07-18T10:27:31Z",
    "closed_at": "2020-09-19T06:51:56Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1670",
    "body": "**What version of WebTorrent?**\r\n0.105.0\r\n**What operating system and Node.js version?**\r\nMacOS Mojave & v12.1.0\r\n**What did you expect to happen?**\r\nI am trying to check how many peers there is but numPeers doesnt exist.\r\n**What actually happened?**\r\nnumPeers doesnt exist. Is the docs outdated?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1670/comments",
    "author": "nimabrownlee",
    "comments": [
      {
        "user": "SilentBot1",
        "created_at": "2019-07-20T15:55:40Z",
        "body": "Hi @nimabrownlee \r\n\r\nCan you provide an example of the code you are experiencing the issue with?\r\n\r\nI'm running the following code under Windows 10 and Node v10.16.0 using WebTorrent version 0.105.0 and `torrent.numPeers` is working as expected.\r\n\r\n```javascript\r\n\r\nvar WebTorrent = require('webtorrent')\r\nvar Client = new WebTorrent()\r\n\r\nvar torrent = Client.add('magnet:?xt=urn:btih:08ada5a7a6183aae1e09d831df6748d566095a10&dn=Sintel&tr=udp%3A%2F%2Fexplodie.org%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.fastcast.nz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F')\r\ntorrent.on('wire', (_)=>{\r\n    console.log(`[WebTorrent-v${WebTorrent.VERSION}] [${torrent.infoHash}] Current peers: ${torrent.numPeers}`)\r\n})\r\n\r\n```\r\n\r\nKind regards\r\nBrad"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-10-18T19:39:40Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2020-09-05T05:02:30Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 1635,
    "title": "My Cloud Home",
    "created_at": "2019-05-29T09:33:48Z",
    "closed_at": "2019-09-10T22:10:39Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1635",
    "body": "Could someone develop an app similar to Webtorrent that would run on WD's My Cloud Home Storage Device.  It seems WD made a right hash it's creation however the NAS still sells and I am sure someone could make some money by developing and selling such an app. Jim\r\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1635/comments",
    "author": "Jimnaebother",
    "comments": [
      {
        "user": "SilentBot1",
        "created_at": "2019-07-21T18:58:49Z",
        "body": "Hi @Jimnaebother \r\n\r\nJust from a quick look, applications developed for the My Cloud Home are required to be in Java making it impossible to use the already created WebTorrent library application causing a large amount of complexity in developing the application.\r\n\r\nIf there is enough demand for this, I'm sure a member of the team would have a full look into the feasibility of developing this.\r\n\r\nKind regards\r\nBrad"
      }
    ]
  },
  {
    "number": 1628,
    "title": "Possible to get streamable URL?",
    "created_at": "2019-05-14T14:07:01Z",
    "closed_at": "2019-07-27T02:31:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1628",
    "body": " Is it possible to get a streamable URL from a torrent. The file.appendTo function can stream the file. But to get the blobUrl the file needs to be fully downloaded first. Is there a way to get a streamable URL that i can hand to a custom player?\r\n\r\nI'm writing an react app that has a custom player i use for synchronizing video with other ppl. It just needs a URL to play. Is that possible?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1628/comments",
    "author": "Daniele122898",
    "comments": [
      {
        "user": "jimmywarting",
        "created_at": "2019-05-14T15:04:59Z",
        "body": "What i think you want is actually `file.renderTo(elm)`\r\n(you don't get the blob url, but you get to play it within your own player)\r\nit has to put up some listener like seeking and all of that, so just having a blob url isn't enough"
      },
      {
        "user": "feross",
        "created_at": "2019-07-27T02:31:38Z",
        "body": "Exactly what @jimmywarting said. There's not way to just get a URL to pass to your video player since the file has not been downloaded yet. We have to listen for seek events on the player, and prioritize downloaded pieces of the video that the user is trying to watch.\r\n\r\nWe may be able to solve this with the use of a Service Worker but it is currently not possible.\r\n\r\nIf you are running in Node.js you can use `createServer()` to get a URL that works even before the video is fully downloaded because then we can respond to the HTTP requests which are made to that server and use that to prioritize which pieces of the video to download."
      }
    ]
  },
  {
    "number": 1623,
    "title": "Failed to minify the bundle. Error: static/js/main.XXXXXX.js from UglifyJs",
    "created_at": "2019-05-04T03:41:30Z",
    "closed_at": "2019-08-02T06:47:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1623",
    "body": "Failed to minify the bundle. Error: static/js/main.XXXXXX.js from UglifyJs\r\nUnexpected token: name (index) [static/js/main.XXXXX.js:XXXXX,5]\r\n\r\n```\r\n\r\nconst c = 'color: ' + this.color;\r\nargs.splice(1, 0, c, 'color: inherit');\r\n\r\n// The final \"%c\" is somewhat tricky, because there could be other\r\n// arguments passed either before or after the %c, so we need to\r\n// figure out the correct index to insert the CSS into\r\n\r\nlet index = 0; //XXXXX  error line\r\n\r\n\r\nlet lastC = 0;\r\nargs[0].replace(/%[a-zA-Z%]/g, match => {\r\n\tif (match === '%%') {\r\n\t\treturn;\r\n\t}\r\n\tindex++;\r\n\tif (match === '%c') {\r\n\t\t// We only are interested in the *last* %c\r\n\t\t// (the user may have provided their own)\r\n\t\tlastC = index;\r\n\t}\r\n});\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1623/comments",
    "author": "yingapp",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2019-08-02T03:48:12Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs.\n"
      },
      {
        "user": "feross",
        "created_at": "2019-08-02T06:47:49Z",
        "body": "You need to use `babel-minify` or another minifier that supports modern ES syntax."
      }
    ]
  },
  {
    "number": 1562,
    "title": "Prevent downloading to disk",
    "created_at": "2018-12-30T22:16:03Z",
    "closed_at": "2019-04-09T15:08:41Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1562",
    "body": "Is there any possibility to retrieve torrent data strictly through `.createReadStream({ start, end });` ? This way it is high bandwidth and low disk usage? I cannot find functionality to suppress the library from writing to /tmp (or any other path I specify). I was thinking of mounting a path to memory (linux only) but that would be far fetched.\r\n\r\nAny ideas?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1562/comments",
    "author": "waseemshahwan",
    "comments": [
      {
        "user": "KayleePop",
        "created_at": "2019-01-02T00:10:43Z",
        "body": "```js\r\nclient.add(torrentId, { store: require('memory-chunk-store') }, (torrent) => {\r\n  torrent.files[0].createReadStream({start, end})\r\n})\r\n```"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-04-02T15:00:58Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs.\n"
      }
    ]
  },
  {
    "number": 1534,
    "title": "When seeding a file, if I acccidentally close the webpage, how can I reconnect and seed again?",
    "created_at": "2018-10-30T19:58:54Z",
    "closed_at": "2018-10-31T02:40:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1534",
    "body": "Sometime browsers crash, is there a way to reconnect to the swarm?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1534/comments",
    "author": "iamjoshleung",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2018-10-31T02:40:44Z",
        "body": "If the seeding is auto, just re opening the page would suffice. If you are using a client, re seeding the file should work"
      }
    ]
  },
  {
    "number": 1533,
    "title": "Is it possible to createServer without waiting to finish hash checks?",
    "created_at": "2018-10-26T08:59:37Z",
    "closed_at": "2018-10-26T13:16:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1533",
    "body": "F.e. if 10 GB movie is already downloaded, it takes almost a minute to hash torrent and only then i can `torrent. createServer`. If it's a new torrent I can start playback in 10 seconds so it's faster to delete files and start over.\r\nWould it be possible to start `createServer` while hashing is still in progress?",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1533/comments",
    "author": "untitledlt",
    "comments": [
      {
        "user": "SilentBot1",
        "created_at": "2018-10-26T13:16:40Z",
        "body": "Hey @untitledlt,\r\n\r\nCould I ask for you to show code examples of what you are talking about?\r\n\r\n>if 10 GB movie is already downloaded, it takes almost a minute to hash torrent and only then i can torrent. createServer\r\n\r\nHow are you adding the already downloaded torrent? Are you calling `client.seed` or `client.add`?\r\n\r\nIf you are sure you have the entire torrent downloaded, you can pass the option `skipVerify: true` in `client.add` to disable verifying downloaded chunks, note if the full file isn't downloaded and this option is set to true, the torrent will think it has all the parts and not continue the partial download.\r\n\r\nAlso seeding via `client.add` will require either another peer to already have the metadata or require the torrent to be added via its metadata (either .torrent or saved `parse-torrent` object) but will allow all verification to be skipped in conjunction with the option `skipVerify`. \r\n\r\nAs this is a question I'm going to close this, but feel free to continue the discussion, I'll be happy to help."
      },
      {
        "user": "untitledlt",
        "created_at": "2018-10-26T13:53:36Z",
        "body": "Thanks for an answer!\r\nI'm gonna keep all `.torrent` files in separate folder and i'll add them with `client.add` on every app restart. \r\nNew `.torrent`s will be added the same way while application is running.\r\n\r\nI guess I should store every torrent state to database so i would know which torrent is completed and use `skipVerify: true` for completed ones. Or is there a better way?\r\n\r\nBut still i don't understand when i should use `client.seed` and why it's better than `client.add`?"
      },
      {
        "user": "SilentBot1",
        "created_at": "2018-10-26T14:14:07Z",
        "body": "@untitledlt I don't help with `webtorrent-desktop` too much but I believe that is similar to how they handle it. I would recommend taking a look at how `webtorrent-desktop` handles things but the code is complex and not the easiest to read.\r\n\r\n`client.seed` should be used when you want to create a torrent from complete files, this includes creating the .torrent file which needs to generate the hash of each chunk for verification. \r\n\r\n`client.add` should be used when you want to add an existing torrent and don't want to re-generate the metadata (though verifying the integrity of the file against the .torrent file before you start seeding is recommended but takes time).\r\n\r\nHope this helps."
      },
      {
        "user": "untitledlt",
        "created_at": "2018-10-26T14:19:24Z",
        "body": "Looks like `client.add` is all i need then.\r\nIs it possible to trigger hash check later if i add torrent with `skipVerify: true`?"
      },
      {
        "user": "SilentBot1",
        "created_at": "2018-10-26T14:55:40Z",
        "body": "You can't re-verify the torrent easily after passing `skipVerify` currently. Possibly a option to re-verify a torrent would be something that could be looked into in the future."
      }
    ]
  },
  {
    "number": 1414,
    "title": "ERROR: Cannot create so many PeerConnections",
    "created_at": "2018-06-11T11:20:12Z",
    "closed_at": "2018-08-24T00:44:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1414",
    "body": "**What version of WebTorrent?**\r\n0.100.0\r\n\r\n**What browser and version? (if using WebTorrent in the browser)**\r\nChrome latest and also Chrome Canary latest\r\n\r\nMy browser app needs to share about 100 torrents per client.\r\n\r\nEven when I seed 'only' 12 torrents I get a constant flood of this error:\r\n```\r\nwebtorrent.min.js:1\r\nUncaught DOMException:\r\nFailed to construct 'RTCPeerConnection':\r\nCannot create so many PeerConnections\r\n```\r\n\r\nAm I allowed to seed a hundred files in the browser? Is 0.100.0 production ready?\r\nThanx for any help!",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1414/comments",
    "author": "robertheessels",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2018-08-24T00:44:55Z",
        "body": "WebTorrent creates many simple-peers in order to send WebRTC offers to the tracker, this is about 10 per torrent. So this is a limitation of the browser (a good one). If you are seeding so many, you should try using server side seeds."
      }
    ]
  },
  {
    "number": 1394,
    "title": "How long does it take to retry  when there is no seeders found?",
    "created_at": "2018-05-17T02:52:57Z",
    "closed_at": "2018-05-17T09:38:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1394",
    "body": "We set up a designated server to seed our files (more than 10000). This server app is designed to seeding files according to HTTP request.\r\n\r\nFor example, when a user want certain file, the web app send a http request to the server and then start the download process. On the server side, when it gets seed request, it will find the right file and start to seed it.\r\n\r\nThe problem is, it always takes 40~60 seconds before the downloading starts. We have tried solutions such as \"set up our own tracker server\" and \"using webseed\". The problem still exists.\r\n\r\nSo, we wondered:  How long does it take to retry  when there is no seeders found?\r\nSince when the user side starts to try downloading the first time, the file hasn't been really seeded on the server side. It takes 5~10 seconds for server to really start seeding the file. So we thought this might be the problem, if the retry interval is big.\r\n\r\nPlease help, are we right? If this is the case, how can we make it small?\r\nThanks. \r\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1394/comments",
    "author": "hz0324",
    "comments": [
      {
        "user": "feross",
        "created_at": "2018-05-17T09:38:42Z",
        "body": "> How long does it take to retry when there is no seeders found?\r\n\r\nWebTorrent treats the web seed as just another peer, so it should start to make HTTP requests to the webseed URL at the same time as connecting to other peers.\r\n\r\n> Since when the user side starts to try downloading the first time, the file hasn't been really seeded on the server side. It takes 5~10 seconds for server to really start seeding the file. So we thought this might be the problem, if the retry interval is big.\r\n\r\nIt sounds like you're making the server become an actual torrent peer, not a webseed peer. A webseed peer means you're just making the files available over HTTP, like hosting any other files on a website.\r\n\r\nIf you're only making your server become a seeding peer once the client asks you to, it might take a minute before the client retries since the client only searches for peers on a defined interval. It queries the DHT and trackers every so often (don't remember how much off the top of my head).\r\n\r\nHowever, if you know when the server has completed seeding, then you can tell the client (maybe using a WebSocket) and the client can call `torrent.addPeer(peer)` (The peer argument must be an address string in the format `12.34.56.78:4444`)\r\n\r\n---\r\n\r\nThe correct way to do this, IMO, is webseeds. Host your files over HTTP and make sure to include both an `xs` and `ws` parameter.\r\n\r\nExample of a proper magnet link: `magnet:?xt=urn:btih:dd8255ecdc7ca55fb0bbf81323d87062db1f6d1c&dn=Big+Buck+Bunny&tr=udp%3A%2F%2Fexplodie.org%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.fastcast.nz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F&xs=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2Fbig-buck-bunny.torrent`"
      }
    ]
  },
  {
    "number": 1348,
    "title": "please make youtube example video",
    "created_at": "2018-04-07T04:23:46Z",
    "closed_at": "2018-05-15T11:20:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1348",
    "body": "please make proper demo video that must consist each library method description it wont take more than 2 hours but it will become great step to lead your efforts and also help to developer to host file in future by torrent sreaming ",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1348/comments",
    "author": "hulkfunweb",
    "comments": [
      {
        "user": "feross",
        "created_at": "2018-05-15T11:20:25Z",
        "body": "@hulkfunweb Thanks for the suggestion. I don't have time to do this at the moment. If you or someone in the community wants to take a stab at this, it would be greatly appreciated.\r\n\r\nThis is a volunteer effort so it's helpful when others pitch in to help :)"
      }
    ]
  },
  {
    "number": 1246,
    "title": "MPEG-DASH With Webtorrent",
    "created_at": "2017-12-18T18:32:09Z",
    "closed_at": "2017-12-19T21:09:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1246",
    "body": "Webtorrent version 0.98.20, Ubuntu Gnome 16.04, Node 8.9.3, Opera 49.0.2725.56\r\n\r\nIs there an way to use webtorrent side by side with dash.js, or just use segmented videos with webtorrent directly? Actually, either I use webtorrent with normal videos, such as mp4 files, or I use dash.js to make use of segmented videos.",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1246/comments",
    "author": "DanielRios549",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-12-19T21:09:34Z",
        "body": "Not right now. WebTorrent is supported by videostream package which only supports one mp4 file to be streamed.\r\n\r\nI don't know if any implementation to use webtorrent's file in dash to join them"
      },
      {
        "user": "feross",
        "created_at": "2018-04-19T00:27:27Z",
        "body": "You can always pull the raw data out of the files you need with `file.createReadStream({ start, end })` to make your DASH player implementation work."
      }
    ]
  },
  {
    "number": 1124,
    "title": "Obfuscation of WT connection.",
    "created_at": "2017-05-11T14:21:11Z",
    "closed_at": "2017-05-12T01:58:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1124",
    "body": "Not an issue but rather a question.\r\n\r\nHow do I encrypt the BitTorrent protocol with obfuscation or by using OpenVPN in Electron, since I'd like to give my users the opportunity of easy anonymity when streaming through my app.",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1124/comments",
    "author": "marcus-sa",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-05-12T01:58:19Z",
        "body": "Right now, it is not possible. Users would need to have a system-wide VPN to hide the connection."
      }
    ]
  },
  {
    "number": 946,
    "title": "Seed and download file on the local machine sometimes successfully",
    "created_at": "2016-10-12T17:53:36Z",
    "closed_at": "2016-10-13T00:10:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/946",
    "body": "Hi, I am using the Webtorrent API to seed and download files locally. When there are many files being seeded locally and each file is being seeded by one seed(that's why only 0 in torrentSeeds[0] below), some downloaders could block at 'torrent.on('done', callback). In other words, after those downloader calls addPeer(), torrent will not be done forever and there is not any error message. I am really confused why some wait forever, while some can download successfully. Here is the code:\n\nSeeder:\n\n```\nvar torrent = new WebTorrent({ dht: false, tracker: false })\n  torrent.seed(filePath , function (value) {\n    callback(filemeta)\n  })\n```\n\nDownloader:\n\n```\n  var client = new WebTorrent({ dht: false, tracker: false })\n  var torrent = client.add(torrentSeeds[0].infoHash)\n\n  torrent.addPeer(torrentSeeds[0].ipAddr + ':' + torrentSeeds[0].torrentPort)\n\n  torrent.on('done', function() {\n      torrent.files.forEach(function(file){\n        var ws = fs.createWriteStream(downloadedFilePath)\n        var rs = file.createReadStream()\n        rs.pipe(ws)\n        rs.on('end', function(){\n          callback()\n        })\n     })\n  })\n\n```\n- WebTorrent version: \n- Node.js version: v6.5.0\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/946/comments",
    "author": "tailiu",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-10-13T00:10:57Z",
        "body": "It looks like you are creating a separate webtorrent client instance for each torrent. That will probably overwhelm your network with DHT traffic. Try using a single webtorrent client across your whole webtorrent process.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T03:50:10Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 803,
    "title": "Avoiding that the complete file gets downloaded after call of file.createReadstream([opts])",
    "created_at": "2016-05-16T14:32:28Z",
    "closed_at": "2016-05-17T20:12:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/803",
    "body": "- WebTorrent version: 0.91.4\n\nHow can I avoid that the WebTorrent client downloads the entire file as fast as possible after I have called file.createReadstream([opts])? I want to configure the maximum amount of data that createReadstream buffers before I read the next chunk of data.\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/803/comments",
    "author": "triangle42",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-05-17T20:12:46Z",
        "body": "Right now, there's no way to do this. Eventually, we're going to make the client switch to a rarest-first strategy (#375) once there's sufficient data buffered to satisfy all `file.createReadStream()` calls. But the plan is always going to be to download as fast as possible to make the best use of available network capacity (modulo throttling, once that gets implemented #163).\n\nBut in the meantime, you can accomplish what you want by calling createReadStream with `opts`.\n\nYou can pass opts to stream only a slice of a file.\n\n```\n{\n  start: startByte,\n  end: endByte\n}\n```\n\nBoth `start` and `end` are inclusive.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T08:50:00Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 792,
    "title": "non-deterministic behavior: undefined property errors on console",
    "created_at": "2016-05-08T14:43:55Z",
    "closed_at": "2016-05-18T01:03:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/792",
    "body": "- WebTorrent version: v0.91.4 - 2016-05-05\n- Browser name/version (if using WebTorrent in the browser): chrome 38\n\nsometimes webtorrent works fine, but sometimes it does not (nothing changed - just page reloading)\n- torrent.numPeers is updated but torrent.downloadSpeed stays 0.\n- console shows the following errors (several times):\n\nUncaught TypeError: Cannot read property 'peerPieces' of undefined\nUncaught TypeError: Cannot read property 'isSeeder' of undefined\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/792/comments",
    "author": "miguelfreitas",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-05-08T14:48:17Z",
        "body": "@miguelfreitas Thanks for the report. Can you share a complete stack trace? If you keep the Web Console open when you refresh the page, you might be able to get a more complete trace, which would aid in debugging. Thanks!\n"
      },
      {
        "user": "miguelfreitas",
        "created_at": "2016-05-08T15:15:37Z",
        "body": "guess what, it was very common behavior but now it seems difficult to reproduce...\n\ni can't say i didn't changed anything because now i did (on my side, still the same webtorrent.min.js). but i'm pretty sure at one point i had it working/nonworking with just a browser reload.\n\ni'll keep trying.\n"
      },
      {
        "user": "miguelfreitas",
        "created_at": "2016-05-08T19:30:18Z",
        "body": "Got it:\n\n```\nUncaught TypeError: Cannot read property 'peerPieces' of undefined VM644474:1\nr.recalculate VM644474:1\nt._onWire VM644474:1\nr.emit VM644474:3\no._onWire VM644474:1\nr.onHandshake VM644474:1\n(anonymous function) VM644474:1\nn VM644474:3\nr.emit VM644474:3\no._onHandshake VM644474:2\n(anonymous function) VM644474:2\no._write VM644474:2\nd VM644474:6\nf VM644474:6\ns.write VM644474:6\ns VM644474:5\nr.emit VM644474:3\ni VM644474:5\no.push VM644474:5\nr._onChannelMessage VM644474:8\nr._setupData.t._channel.onmessage\n```\n\n```\nUncaught TypeError: Cannot read property 'isSeeder' of undefined VM644474:1\n(anonymous function) VM644474:1\no._rechoke VM644474:1\n(anonymous function) VM644474:1\n(anonymous function)\n```\n"
      },
      {
        "user": "feross",
        "created_at": "2016-05-18T01:02:43Z",
        "body": "Aha! I think I've figured this one out!\n\nIf a peer disconnects, but the handshake they already sent hasn't been\nprocessed by the wire yet (rare!) then `onHandshake` could be called\nafter the peer is destroyed.\n\nAt this point `self.wire` is `null`, so that will get pushed into the\n`self.swarm.wires` array and cause this issue when `wire.peerPieces` is accessed.\n"
      },
      {
        "user": "feross",
        "created_at": "2016-05-18T01:03:27Z",
        "body": "Released as v0.93.4.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T08:49:56Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 780,
    "title": "Can't seeding a file via nodejs",
    "created_at": "2016-04-29T11:47:04Z",
    "closed_at": "2016-04-29T12:20:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/780",
    "body": "- WebTorrent version: 0.91.1\n- Node.js version: v5.2.0\n- Browser name/version (if using WebTorrent in the browser): Chromium 49.0.2623.108 Built on 8.3, running on Debian 8.3 (64-bit)\n\nI can't seeding a file via nodejs (browser is very good). Here is my code:\n\n``` javascript\nvar WebTorrent = require ('webtorrent')\nvar client = new WebTorrent();\n\nclient.seed('a.mp4', function (torrent) {\n    console.log('Seeding ...' + torrent.magnetURI);\n})\n```\n\nI copy the magnetURI then paste to a bittorrent client (same as instance.io or webtorrent-desktop) but i can't see any peers. What i am missing?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/780/comments",
    "author": "ngnguyen1",
    "comments": [
      {
        "user": "ngnguyen1",
        "created_at": "2016-04-29T12:20:27Z",
        "body": "It's fixed by using webtorrent-hybrid package.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T10:49:30Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 665,
    "title": "filesystem paths do not work in the browser",
    "created_at": "2016-03-10T07:01:40Z",
    "closed_at": "2016-03-11T03:30:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/665",
    "body": "- WebTorrent version: latest \n- Node.js version: 4.0\n- Browser name/version (if using WebTorrent in the browser): Chrome/Electron\n\nI am unable to seed the torrent file as it throws me an error \"filesystem paths do not work in the browser\". Electron as wrapped file system with path attribute after uploading file. Is there any way to get around this problem.\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/665/comments",
    "author": "ajainvivek",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-03-11T03:30:59Z",
        "body": "Works fine for me in Electron. You must be changing what `require('fs')` returns somehow. Are you browserify the script? Or using `webtorrent.min.js`? Don't do that -- just use `require('webtorrent')`.\n\nThe error you're seeing comes from this code in `create-torrent`:\n\n``` js\n    if (typeof fs.stat !== 'function') {\n      throw new Error('filesystem paths do not work in the browser')\n    }\n```\n"
      },
      {
        "user": "ajainvivek",
        "created_at": "2016-03-11T06:21:12Z",
        "body": "I was using webtorrent.min.js. Thanks @feross . \n"
      },
      {
        "user": "feross",
        "created_at": "2016-03-11T06:48:34Z",
        "body": "Glad you got it figured out :)\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T15:38:41Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 647,
    "title": "client always downloads all torrent files, even those marked with file.deselect()",
    "created_at": "2016-02-29T16:25:41Z",
    "closed_at": "2016-02-29T17:10:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/647",
    "body": "<!--\nThis template is for bug reports. If you are NOT reporting a bug, you can delete this starter template.\n-->\n\nusing latest version from jsdelivr CDN, in Firefox 44.0.2\n\n`$scope.simpletest = function(hash){\n\n```\nvar torrentId = 'magnet:?xt=urn:btih:'+hash;\n\nclient.add(torrentId, function (torrent) {\n    torrent.files.forEach(file => file.deselect());\n    var file = torrent.files[0];\n    file.getBlobURL(function (err, bUrl) {\n        console.log(bUrl);\n    });\n});\n```\n\n}`\n\nthis code should donwload only the first file in the torrent, but instead, it downloads all of them\nis it something wrong with the code ?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/647/comments",
    "author": "enorrmann",
    "comments": [
      {
        "user": "enorrmann",
        "created_at": "2016-02-29T17:08:45Z",
        "body": "found duplicated issue #164 \nand solved  with  torrent._selections = []\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T16:38:27Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 644,
    "title": "Question: Livestreaming, like Twitch?",
    "created_at": "2016-02-28T19:36:36Z",
    "closed_at": "2016-02-29T17:20:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/644",
    "body": "Heyo! Thanks for releasing this, super excited about the possibilities!\n\nWould it be possible to livestream using webtorrent? I have been doing some research and somewhere someone said you COULD livestream, but you'd need to make 15-30s chunks of video into individual torrents. \n\nHow would that work without causing all kinds of stutters/gaps? How quickly will webtorrent be able to download the next magnet(?) link, connect to new peers, and pick up the video stream? I could maybe have it so each time the client starts streaming, have like a 2-5second delay before it starts playing the torrent to give some time to pickup subsequent torrents + peers??\n\nThanks for reading, appreciate all the hard work put into this!\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/644/comments",
    "author": "ckcollab",
    "comments": [
      {
        "user": "rom1504",
        "created_at": "2016-02-28T20:07:18Z",
        "body": "duplicate of  #14, #243 and #448\n\nThere is a search bar in issues ;)\n"
      },
      {
        "user": "ckcollab",
        "created_at": "2016-02-28T20:10:34Z",
        "body": "I swear I searched! Thanks for those references.\n\nSo, the answer seems to be: webtorrent (BitTorrent) is for static unchanging files. Bah! I'll keep trying to find options, thank you!\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T16:38:39Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 632,
    "title": "Sock proxy",
    "created_at": "2016-02-20T08:59:26Z",
    "closed_at": "2016-02-22T02:56:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/632",
    "body": "Is it possible to connect to peers via a sock 4/5 proxy ?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/632/comments",
    "author": "dragonpiper",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-02-22T02:56:03Z",
        "body": "Support for proxies is not built-in to WebTorrent. Maybe when/if we have a desktop client with a UI we can look at supporting proxies.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T17:38:39Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 612,
    "title": "A new peer takes too long to connect to other peers.",
    "created_at": "2016-02-10T11:55:28Z",
    "closed_at": "2016-02-10T22:41:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/612",
    "body": "Hi, I am using the bittorrent tracker and Webtorrent both in my application. I am using Webtorrent just to seed a file using \"seed\" method. Here is the code snippet:\n\n``` js\nvar file = fs.createWriteStream(\"C:/\"+filename);\n    console.log(filename);\n    var request = needle.get(UrlPath).pipe(file);\n    var client=new WebTorrent();\n    file.on('finish', function() {\n        file.close(createTorrent(\"C:/\"+filename, function (err, torrent) {\n            if (!err) {\n                client.seed(\"C:/\"+filename);\n                fs.writeFile(config.torrentFilePath, torrent);\n                res.send(torrent);\n            }\n   });\n});\n```\n\nA new peer connects to the other peers after around 10-15 minutes, maybe in the second announce interval. Earlier I was using just the bittorrent tracker and I was seeding the file manually using a torrent client. This approach did not take much time to discover a newly added peer.But, after seeding the file using Webtorrent's \"seed\" method, I observed this behaviour. I don't know if it has something to do with the client(Utorrent) that I am using to download the file. Could somebody please help me out with this?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/612/comments",
    "author": "parth1729",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-02-10T22:40:25Z",
        "body": "@parth1729 What exactly are you trying to do?\n\nIt seems like you're sending back the created `.torrent` file in an http response, right?\n\nYou might consider waiting until the client has completed fully seeding the file (creating the `.torrent`, announcing to trackers and the DHT, etc.) before doing that. `client.seed` takes a callback that will get called once the client is actually seeding the file.\n\nTry this:\n\n``` js\nvar file = fs.createWriteStream('C:/' + filename)\nconsole.log(filename)\nvar request = needle.get(UrlPath).pipe(file)\nvar client = new WebTorrent()\nfile.on('finish', function () {\n    file.close(function () {\n        client.seed('C:/' + filename, function (torrent) {\n            fs.writeFile(config.torrentFilePath, torrent.torrentFile)\n            res.send(torrent.torrentFile)\n        })\n    })\n})\n```\n\nI eliminated the unnecessary call to `createTorrent` since that's already done internally for you in `client.seed`. You can get the generated `.torrent` file with the `.torrentFile` property.\n"
      },
      {
        "user": "parth1729",
        "created_at": "2016-02-11T07:29:47Z",
        "body": "@feross Tried the approach you mentioned, but still no luck. It functions same as before.\nActually, I'm developing an application in which the user will initially be served a torrent file. When the user starts downloading the file, I want to seed the file from one end so that the user can download the file. And yes, I'm sending the torrent file as Http response for the user to download the torrent file. \n@feross Any help on this would be really appreciated.\n"
      },
      {
        "user": "godigex",
        "created_at": "2016-02-19T15:44:19Z",
        "body": "Ditto for this problem. I find that downloading clients can't connect to any seeds/peers for 10~20 minutes, generally after the second or third announce. It behaves the same way with subsequent downloads from additional clients - always after a few announces regardless of how long the client has been seeding. Any ideas about what's going on here?\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T18:38:17Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 562,
    "title": "Video streaming",
    "created_at": "2016-01-08T09:59:10Z",
    "closed_at": "2016-01-09T02:35:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/562",
    "body": "How do I make videos streaming in node client? Browser is not working for me\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/562/comments",
    "author": "guigaoliveira",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-01-09T02:35:42Z",
        "body": "Using the command line, you can stream videos to a video program like VLC like this:\n\n```\nwebtorrent \"magnet_uri\" --vlc\n```\n\nYou can get more information by running:\n\n```\n$ webtorrent help\n               _     _                            _\n __      _____| |__ | |_ ___  _ __ _ __ ___ _ __ | |_\n \\ \\ /\\ / / _ \\ '_ \\| __/ _ \\| '__| '__/ _ \\ '_ \\| __|\n  \\ V  V /  __/ |_) | || (_) | |  | | |  __/ | | | |_\n   \\_/\\_/ \\___|_.__/ \\__\\___/|_|  |_|  \\___|_| |_|\\__|\n\n\nUsage:\n    webtorrent [command] <torrent-id> <options>\n\nExample:\n    webtorrent download \"magnet:...\" --vlc\n\nCommands:\n    download <torrent-id>   Download a torrent\n    seed <file/folder>      Seed a file or folder\n    create <file>           Create a .torrent file\n    info <torrent-id>       Show info for a .torrent file or magnet uri\n\nSpecify <torrent-id> as one of:\n    * magnet uri\n    * http url to .torrent file\n    * filesystem path to .torrent file\n    * info hash (hex string)\n\nOptions (streaming):\n    --airplay               Apple TV\n    --chromecast            Chromecast\n    --mplayer               MPlayer\n    --mpv                   MPV\n    --omx [jack]            omx [default: hdmi]\n    --vlc                   VLC\n    --xbmc                  XBMC\n    --stdout                standard out (implies --quiet)\n\nOptions (simple):\n    -o, --out [path]        set download destination [default: current directory]\n    -s, --select            select individual file in torrent (by index)\n    -i, --index [number]    stream a particular file from torrent (by index)\n    -v, --version           print the current version\n\nOptions (advanced):\n    -p, --port [number]     change the http server port [default: 8000]\n    -t, --subtitles [path]  load subtitles file\n    -b, --blocklist [path]  load blocklist file/http url\n    -q, --quiet             don't show UI on stdout\n    --on-done [script]      run script after torrent download is done\n    --on-exit [script]      run script before program exit\n    --verbose               show torrent protocol details\n```\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T23:19:45Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 480,
    "title": "How to disable seeding ?",
    "created_at": "2015-11-09T00:26:57Z",
    "closed_at": "2015-12-03T03:29:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/480",
    "body": "Hey guys , how to disabled Torrent seeding when it starts downloading ? i am using NodeJS\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/480/comments",
    "author": "roonie007",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2015-12-03T03:21:56Z",
        "body": "You can't. You don't.\n"
      },
      {
        "user": "feross",
        "created_at": "2015-12-03T03:28:53Z",
        "body": "As @DiegoRBaquero says, there's no way to disable seeding.\n\nThe best you can do is to call `torrent.destroy()` after the download is complete to remove the torrent from the client and stop seeding.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-05T05:19:47Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 456,
    "title": "Persisting torrent download state",
    "created_at": "2015-10-08T07:21:42Z",
    "closed_at": "2015-10-09T02:34:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/456",
    "body": "Hey guys, nice job!\n\nI have a question, if I start downloading a file like this:\n\n``` javascript\nvar WebTorrent = require('webtorrent')\n\nvar client = new WebTorrent()\nvar magnetUri = '...'\n\nclient.download(magnetUri, function (torrent) {\n})\n```\n\nAnd the download reaches 50%, but for some reason my server crashes, if I restart the server, and add the same torrent again with the same destination path, will it continue downloading from where it stopped?\n\nAlso, there's any event in client that notifies when a torrent was completed?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/456/comments",
    "author": "lucaswxp",
    "comments": [
      {
        "user": "lucaswxp",
        "created_at": "2015-10-09T02:34:32Z",
        "body": "Alright,\n\nI have done some testing and apparently the torrent starts from where it left off.\n\nAlso, the event I was looking for is called 'done' in the torrent object itself.\n\nCode example:\n\n``` javascript\nclient.download(magnetUri, {path: process.cwd() + '/data'}, function (torrent) {\n      // Got torrent metadata!\n      console.log('Torrent info hash:', torrent.infoHash)\n      console.log('Save location: ' + torrent.path);\n\n      // this is called every time we receive a chunk\n      torrent.on('download', function(chunkSize){\n        console.log('chunk size: ' + chunkSize);\n        console.log('total downloaded: ' + torrent.downloaded);\n        console.log('download speed: ' + torrent.downloadSpeed());\n        console.log('progress: ' + torrent.progress);\n        console.log('======');\n      })\n\n      torrent.on('done', function(){\n        console.log('torrent downloaded!');\n        torrent.files.forEach(function(file){\n           // do something with file\n        })\n      })\n    })\n```\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T19:38:35Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 438,
    "title": "Webtorrent without tracker.",
    "created_at": "2015-09-20T07:43:46Z",
    "closed_at": "2015-09-21T05:47:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/438",
    "body": "Hi Feross.\n\nI'm using webtorrent, but I don't use bitorrent-tracker, to add a peer to download I use torrent.addPeer(addr). But, I really run on LAN network with \"addr\" is IP and port of computers.\nWhen two computers in the different LAN network, I don't know what is \"addr\".\nBecause a computer has public IP address and private IP address.\n\nPlease help me.\nThanks!\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/438/comments",
    "author": "bachlx-bitmark",
    "comments": [
      {
        "user": "feross",
        "created_at": "2015-09-21T05:47:52Z",
        "body": "You can usually just use the built-in list of torrents in a .torrent file or magnet link. If your use case is your own private torrents, then you should consider running your own bitorrent-tracker instance to make peer discovery automatic and easy.\n\nThat said, if you want to use `torrent.addPeer(addr)`, you need to know an IP address that will let you reach another peer. Usually it's safest to just use the public IP address. But you can try passing in the private IP address as well, especially if you know the peers are on the same network.\n\nDon't worry if the host at the IP address might not be reachable – the torrent client is smart enough to try and give up after a number of consecutive connect failures. Just add both the public and private IPs.\n\nYou can get the port that the torrent client is listening on by calling `client.address().port`.\n"
      },
      {
        "user": "bachlx-bitmark",
        "created_at": "2015-09-21T09:12:46Z",
        "body": "Thanks, I will try.\n"
      },
      {
        "user": "feross",
        "created_at": "2015-09-21T18:04:32Z",
        "body": "Great - feel free to ask additional questions if you run into trouble.\n"
      }
    ]
  },
  {
    "number": 434,
    "title": "Client does not add file if tracker is set to false",
    "created_at": "2015-09-16T05:16:03Z",
    "closed_at": "2016-02-28T07:36:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/434",
    "body": "Any help again is welcome. Works when tracker is set to true. But when set to false, nothing appends. \n\nclient defined here:\n\n```\nself.client = new WebTorrent({tracker: false, dht: true, torrentPort: addr});\n```\n\n```\n    self.client.add(self.file, function(torrent) {\n      // Got torrent metadata!\n      //torrent.addPeer(addr);\n      var file = torrent.files[0]; // Let's say the first file is an audio file...\n\n      console.log('Client is downloading:', torrent.infoHash);\n      console.log('Client is listening for:', addr);\n\n      torrent.files.forEach(function(file) {\n        // Display the file by appending it to the DOM. Supports video, audio, images, and\n        // more. Specify a container element (CSS selector or reference to DOM node).\n        var playerTarget = document.querySelector('.track-details');\n\n        file.appendTo(playerTarget, function(err, elem) {\n          if (err) throw err; //file failed to download or display in DOM\n          console.log('New DOM node with the content', elem);\n        });\n      });\n    });\n```\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/434/comments",
    "author": "VoR0220",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-02-28T07:36:17Z",
        "body": "@VoR0220 I assume this is in the browser?\n\nRight now, WebTorrent in the browser requires the use of trackers. There is no DHT. So this outcome is not surprising to me.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T17:38:17Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 408,
    "title": "Previous downloads cached?",
    "created_at": "2015-08-24T19:14:32Z",
    "closed_at": "2016-01-09T22:41:56Z",
    "labels": [
      "question",
      "area/node",
      "good first contribution",
      "need more info"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/408",
    "body": "Is there a cache for previous downloads? I downloaded a torrent, killed node, removed the directory from disk, but when i re-download the same one, it's goes to done right away and the full file(s) are there.\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/408/comments",
    "author": "btmdave",
    "comments": [
      {
        "user": "btmdave",
        "created_at": "2015-08-24T19:17:37Z",
        "body": "In some cases it goes straight to done, but the files are zero bytes (for different previous downloads i killed partially through).\n"
      },
      {
        "user": "feross",
        "created_at": "2015-08-30T21:17:07Z",
        "body": "If you don't specify a path option with `webtorrent --path <path>`, then a temporary path at `/tmp/webtorrent` is used. If you re-run WebTorrent than that previously downloaded data can be reused.\n"
      },
      {
        "user": "feross",
        "created_at": "2015-08-30T21:18:25Z",
        "body": "@btmdave\n\nCan you elaborate on your second comment? Are you saying that if a torrent was previously downloaded successfully that later downloads with `--out <path>` won't actually download anything to the given path?\n"
      },
      {
        "user": "feross",
        "created_at": "2016-01-09T22:41:56Z",
        "body": "Closing this issue – it's so old that the parameter is now named `--out`.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-04T23:19:35Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 255,
    "title": "Add without starting download?",
    "created_at": "2015-01-28T15:36:53Z",
    "closed_at": "2015-07-01T00:23:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/255",
    "body": "Is there anyway to add a torrent and get it's info, but not start downloading?\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/255/comments",
    "author": "btmdave",
    "comments": [
      {
        "user": "feross",
        "created_at": "2015-01-28T22:26:41Z",
        "body": "From the command line you can list the files in a torrent using the `--list` option:\n\n``` bash\n$ webtorrent --list \"magnet:?xt=urn:btih:a97cf38232f073cbe83c34197437edfd702237c0&dn=Sintel+4k+UHD+ENG+FLAC+ITA+ENG+Sub+DMRip+1744p+X265+ZMachine&xl=3489948077&dl=3489948077\"\n\n0   : Sintel.4k.UHD.ENG.FLAC.ITA.ENG.Sub.DMRip.1744p.X265_ZMachine.mkv (3.49 GB)\n```\n\nFrom the API, there's no simple way to do this at the moment, but you can print out the metadata and then remove the torrent from the client. That would do the trick.\n\n``` js\nvar WebTorrent = require('webtorrent')\nvar client = new WebTorrent()\nclient.add(magnetUri, function (torrent) {\n  console.log(torrent.parsedTorrent) // or torrent.metadata, torrent.files, etc.  \n  client.remove(torrent)\n})\n```\n"
      },
      {
        "user": "Svenskunganka",
        "created_at": "2015-01-29T05:32:25Z",
        "body": "@feross how would I go with getting seeder / leecher list from a set of trackers in an array (or from a parsed torrent) without downloading the torrent? I'm a bit confused on this one.\n\nThanks in advance!\n"
      },
      {
        "user": "alexeisavca",
        "created_at": "2015-05-18T17:39:27Z",
        "body": "How about\n\n```\nclient.add(magnetUri, function (torrent) {\n  torrent.files.forEach(file => file.deselect())\n})\n```\n\nThat way you wouldn't be downloading any files, but still stay in the swarm, i guess. Would that work?\n"
      },
      {
        "user": "feross",
        "created_at": "2015-07-01T00:23:25Z",
        "body": "@Svenskunganka Please open a new issue for your question (it has nothing to do with this issue).\n\n@alexeisavca You solution would work :+1: \n\n@btmdave You can do this:\n\n``` js\nclient.add(torrentId, function (torrent) {\n  // gets called once we have the torrent metadata\n  console.log(torrent.files) // access the metadata, etc.\n  torrent.destroy()\n})\n```\n\nThe callback is called as soon as the client has the torrent metadata (and before downloading has started), so destroying the torrent immediately will allow you to just access the metadata.\n"
      }
    ]
  },
  {
    "number": 2238,
    "title": "Allow controlling mpv from the terminal when using `--mpv` (useful when running webtorrent and mpv on a remote machine)",
    "created_at": "2022-01-09T15:37:58Z",
    "closed_at": "2022-06-05T12:06:49Z",
    "labels": [
      "enhancement",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/2238",
    "body": "<!-- DO NOT POST LINKS OR REFERENCES TO COPYRIGHTED CONTENT IN YOUR ISSUE. -->\r\n\r\n**What version of this package are you using?**\r\n4.0..2. (1.5.8)\r\n\r\n**What problem do you want to solve?**\r\nI often use `DISPLAY=:0 mpv <url>` through ssh, which allows me opening the `mpv` window not on the client, but on the host. In my case the benefit is I can control my media center from the terminal of my phone and display mpv on the big screen. Since mpv keybindings also work in the terminal that launched the process, and not only in the video window, this allows me controlling mpv from the client as well: fullscreen, seek forward/backward, subtitles, play/pause, *etc.*\r\n\r\nWith `webtorrent`, however, this is not possible because the terminal is busy showing the download details. Would it be possible to either (1) convey keybindings anyway, or else (2) add another option which would hide the webtorrent output and instead give focus to the mpv stdout so that keybindings pressed while focusing in the terminal on the client are conveyed to the mpv video window on the host?\r\n\r\n**What do you think is the correct solution to this problem?**\r\nI believe silently conveying keybindings as in (1) would be best since there would be no downsides, but I don't think that would be possible, so an option to show the mpv regular terminal output instead of webtorrent's (option (2)) could work. A third solution could be to add an option to webtorrent so that it opens another terminal window for mpv controls when mpv is detached to a non-default screen, *e.g.*, altering what webtorrent does behind `webtorrent magnet --mpv --remote` (with `--remote` being an example option to request that mode) into something like `$TERMINAL -e bash -c \"DISPLAY=:0 mpv localhost-url\"`, but I failed to code that in node \r\n\r\n**Are you willing to submit a pull request to implement this change?**\r\nUnfortunately I don't think I have enough coding skills for that, but I'm happy to try and iterate if this feature is deemed relevant. I don't think many users use webtorrent through ssh, but for those who do, I think it would really be a game changer since this would simply fully remove the need for any media remote control application (often GUI and requiring separate installations on both machines) such as KDE-connect",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/2238/comments",
    "author": "Kabouik",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-03-11T12:05:52Z",
        "body": "Is this still relevant? If so, what is blocking it? Is there anything you can do to help move it forward?"
      },
      {
        "user": "Kabouik",
        "created_at": "2022-03-11T12:32:22Z",
        "body": "This is still relevant, dear bot."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-05-29T12:06:42Z",
        "body": "Is this still relevant? If so, what is blocking it? Is there anything you can do to help move it forward?"
      },
      {
        "user": "Kabouik",
        "created_at": "2022-06-05T17:16:53Z",
        "body": "It was still relevant, bot."
      }
    ]
  },
  {
    "number": 2215,
    "title": "Return Torrent when client.seed finds a duplicate",
    "created_at": "2021-11-02T22:14:14Z",
    "closed_at": "2022-02-16T14:53:24Z",
    "labels": [
      "help wanted",
      "good first contribution",
      "accepted"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/2215",
    "body": "When calling `client.seed` we correctly throw an error if the torrent would be a duplicate, but it should somehow pass back (via. return or callback) the actual Torrent instance, because there's no clean way to know WHICH torrent is the duplicate without searching by filename+length which is ugly and also not guaranteed to find the correct one.",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/2215/comments",
    "author": "Clay-Ferguson",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-01-02T12:05:49Z",
        "body": "Is this still relevant? If so, what is blocking it? Is there anything you can do to help move it forward?"
      },
      {
        "user": "Bruce-Hopkins",
        "created_at": "2022-01-07T13:23:46Z",
        "body": "Can I be assigned the fix?"
      },
      {
        "user": "DiegoRBaquero",
        "created_at": "2022-01-07T13:58:25Z",
        "body": "Feel free to create a PR :)\n\nDiego\n\n> On 7/01/2022, at 8:24 AM, Bruce Hopkins ***@***.***> wrote:\n> \n> ﻿\n> Can I be assigned the fix??\n> \n> —\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you are subscribed to this thread.\n"
      },
      {
        "user": "Bruce-Hopkins",
        "created_at": "2022-01-07T18:13:51Z",
        "body": "Great! I'll get started on the PR."
      },
      {
        "user": "Bruce-Hopkins",
        "created_at": "2022-01-09T18:27:55Z",
        "body": "I refactored to pass the duplicate torrent in the callback, but I didn't add any way to know if you are handling a new torrent or a duplicate. I'm thinking about passing a boolean to represent if the torrent is original or a duplicate, but I'm not sure if it's necessary."
      },
      {
        "user": "Bruce-Hopkins",
        "created_at": "2022-02-16T14:32:32Z",
        "body": "Can we close this issue?"
      }
    ]
  },
  {
    "number": 1698,
    "title": "Add browser testing for Safari",
    "created_at": "2019-08-09T20:42:54Z",
    "closed_at": "2020-11-04T09:23:41Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area/browser",
      "good first contribution"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1698",
    "body": "We currently only test WebTorrent on Chrome and Firefox. Let's add Safari to the list.",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1698/comments",
    "author": "feross",
    "comments": [
      {
        "user": "axelonet",
        "created_at": "2019-10-26T05:16:05Z",
        "body": "I just ran the HTML file from docs and added a magnet link. It started streaming the file. In safari of course. What else do I need to do to make webtorrent safari compatible,  "
      },
      {
        "user": "neuronsupport",
        "created_at": "2020-01-07T16:18:30Z",
        "body": "Looks like removing a torrent from seeding corrupts Webtorrent on Safari."
      },
      {
        "user": "stale[bot]",
        "created_at": "2020-09-05T05:02:08Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "feross",
        "created_at": "2020-11-04T09:23:41Z",
        "body": "I added Safari to the airtap testing list a while ago. So this task is complete now."
      }
    ]
  },
  {
    "number": 1181,
    "title": "webtorrent resolve but do not download - FR",
    "created_at": "2017-08-30T20:22:28Z",
    "closed_at": "2018-01-19T07:26:39Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1181",
    "body": "**What version of WebTorrent?** 0.98.19\r\n\r\n**What operating system and Node.js version?** Windows, Node 8+\r\n\r\n**What did you expect to happen?**\r\n```\r\nvar client = new WebTorrent();\r\nclient.resolve(torrentId, function (torrent) {\r\n       console.log(torrent); // torrent information but don't download\r\n});\r\n```\r\n**What actually happened?**\r\nthis starts downloading file automatically\r\n\r\n  ```\r\nvar client = new WebTorrent();\r\nclient.add(torrentId, function (torrent) {\r\n       /* ... */\r\n });\r\n```\r\nis there any method available to get torrent information including \r\n```\r\ntorrent.torrentFile\r\ntorrent.torrentFileBlobURL\r\n```\r\nfeature to not start downloading files automatically will be nice. or am I missing something\r\n\r\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1181/comments",
    "author": "sibiraj-s",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-08-31T00:10:52Z",
        "body": "The only thing that you could get without actually downloading any data is the metadata of the torrent. Not the files, not the blob url.\r\n\r\nresolve is not in the API, so this is not a bug, is a feature request."
      },
      {
        "user": "sibiraj-s",
        "created_at": "2017-08-31T03:48:42Z",
        "body": "Yes @DiegoRBaquero, that was a feature request. I am not referring that as a bug\r\n\r\nAs a workaround to get torrent files I am doing this\r\n\r\n```\r\nvar torrentInfo;\r\n\r\nvar newClient = client.add(torrentId, function (torrent) {\r\n     torrentInfo = torrent;  // save torrent info\r\n});\r\n\r\nclient.on('torrent', function () {\r\n     newClient.destroy(); // once I get the information. \r\n     // I am destroying the client to stop download\r\n});\r\n```"
      },
      {
        "user": "sibiraj-s",
        "created_at": "2017-11-02T20:01:41Z",
        "body": "@DiegoRBaquero Any updates on this FR?"
      },
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-11-02T20:55:56Z",
        "body": "I don’t think that anyone is working on this\n\n> On Nov 2, 2017, at 3:01 PM, Sibiraj <notifications@github.com> wrote:\n> \n> @DiegoRBaquero Any updates on this FR?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
      },
      {
        "user": "sibiraj-s",
        "created_at": "2017-11-03T07:02:28Z",
        "body": "it will be nice to know what are the files that we are going to download. before start downloading. also, we can save that as a .torrent file"
      },
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-11-03T11:06:37Z",
        "body": "can you not do that with the code you posted?\n\n> On Nov 3, 2017, at 2:02 AM, Sibiraj <notifications@github.com> wrote:\n> \n> it will be nice to know what are the files that we are going to download. before start downloading. also, we can save that as a .torrent file\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"
      },
      {
        "user": "sibiraj-s",
        "created_at": "2017-11-03T11:31:51Z",
        "body": "yeah, I have been doing that. But that is a cool feature to have. isn't it"
      },
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-11-03T13:02:55Z",
        "body": "It'd be best to have it as another module built on top of the core lib. Feel free to publish your code as a standalone npm module. I'm gonna leave this open for anyone (or you) who wants to build it :)"
      }
    ]
  },
  {
    "number": 1105,
    "title": "When you call .seed method, the tracker receives a START event with a \"left\" parameter greater than zero",
    "created_at": "2017-04-18T14:06:03Z",
    "closed_at": "2019-08-18T20:04:16Z",
    "labels": [
      "help wanted",
      "bug",
      "good first contribution"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/1105",
    "body": "Version: webtorrent-hybrid 1.0.5\r\nOS: Archlinux\r\nNode: v.6.10.0\r\n\r\n**What did you expect to happen?**\r\nI expect the tracker receives the \"left\" parameter with 0, because I'm seeding directly a file I have.\r\n \r\n**What actually happened?**\r\nThe tracker got a \"left\" with the actual size of the file. \r\n\r\nI'm trying to detect when a user is going to download a file, and I think this is a false positive.",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/1105/comments",
    "author": "segmentati0nf4ult",
    "comments": [
      {
        "user": "DiegoRBaquero",
        "created_at": "2017-04-18T22:15:27Z",
        "body": "Another message with a left=0 is sent shortly after."
      },
      {
        "user": "feross",
        "created_at": "2018-04-21T02:13:33Z",
        "body": "This could be addressed by waiting to start peer discovery until after file verification is complete. Though I haven't considered all the implications of doing this."
      }
    ]
  },
  {
    "number": 524,
    "title": "Seeding re-stores chunks even if they are already stored",
    "created_at": "2015-12-11T17:37:48Z",
    "closed_at": "2018-11-28T22:24:44Z",
    "labels": [
      "help wanted",
      "area/browser",
      "area/node",
      "good first contribution",
      "area/perf",
      "accepted"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/524",
    "body": "When you seed a file, it doesn't matter if the pieces are already on the store, it will create a ChunkStoreWriteStream and re-store them.\n\nThe verifying happens in Torrent._onMetadata, called on Torrent._onSwarnListening\nThe re-storing happens in Torrent.load, called in WebTorrent.seed\n\n``` log\nwebtorrent:torrent got metadata +5ms\nwebtorrent:torrent verifying existing torrent data +3ms\nwebtorrent:torrent piece verified 0 +34ms\nwebtorrent:torrent piece verified 1 +1ms\nwebtorrent:torrent piece verified 2 +1ms\nwebtorrent:torrent done verifying +2ms\nwebtorrent:torrent on store +1ms\nwebtorrent:torrent select 0-2 (priority 0) +1ms\nwebtorrent:torrent file done: PMC-InformelaMuestra.pdf +3ms\nwebtorrent:torrent torrent done: 307f97a2e9264a5c17d04dd83aae6069d249a287 +1ms\nbittorrent-tracker send `complete` +0ms\nfunction onData(chunk) {\n    if (self.destroyed) return\n    store.put(index, chunk)\n    index += 1\n  }\nput 0 from function (index, buf, cb) {\n  console.info(arguments.callee.caller.toString())\n  var self = this\n  self.mem[index] = buf\n  self.store.put(index, buf, function (err) {\n    self.mem[index] = null\n    if (cb) cb(err)\n  })\n}\nfunction onData(chunk) {\n    if (self.destroyed) return\n    store.put(index, chunk)\n    index += 1\n  }\nput 1 from function (index, buf, cb) {\n  console.info(arguments.callee.caller.toString())\n  var self = this\n  self.mem[index] = buf\n  self.store.put(index, buf, function (err) {\n    self.mem[index] = null\n    if (cb) cb(err)\n  })\n}\nfunction onData(chunk) {\n    if (self.destroyed) return\n    store.put(index, chunk)\n    index += 1\n  }\nput 2 from function (index, buf, cb) {\n  console.info(arguments.callee.caller.toString())\n  var self = this\n  self.mem[index] = buf\n  self.store.put(index, buf, function (err) {\n    self.mem[index] = null\n    if (cb) cb(err)\n  })\n}\nwebtorrent:torrent torrent done: 307f97a2e9264a5c17d04dd83aae6069d249a287 +54ms\nbittorrent-tracker send `complete` +1ms\n```\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/524/comments",
    "author": "DiegoRBaquero",
    "comments": [
      {
        "user": "feross",
        "created_at": "2016-02-11T05:48:28Z",
        "body": "You're right. We can make two improvements here:\n1. Eliminate the verification step for ALL `input` types to `client.seed`, since it'll obviously be correct.\n2. Eliminate the call to `torrent.load` (streaming into the store) when `input` is a filesystem path.\n"
      }
    ]
  },
  {
    "number": 357,
    "title": "When seeding a file/folder from disk, don't perform extra copy to /tmp",
    "created_at": "2015-06-12T14:10:10Z",
    "closed_at": "2015-06-28T11:38:10Z",
    "labels": [
      "help wanted",
      "area/node",
      "bug",
      "good first contribution"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/357",
    "body": "Hi !\n\nIf I want to seed a file from (just an example) _/home/me/videos/awesome.webm_ I see that webtorrent copy it as _/tmp/webtorrent/xxx/xxx.webm_. I wanted to know if this was really needed, since the file is already on the disk. \n\nThis could be annoying with big videos (1Go), disk space would rapidly decrease and the seeding would take much time since the disk should copy 1Go before it.\n\nThanks :)\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/357/comments",
    "author": "Chocobozzz",
    "comments": [
      {
        "user": "ericwooley",
        "created_at": "2015-06-12T15:08:30Z",
        "body": "I'm sure feross can enlighten us, but I'll take a stab at the question. From my limited work with the file api, it's not easy to access data from the outside of the web sandbox (by that I mean not possible). So the options would be too keep the data in memory (hope you have a lot!) or write it to disk somewhere you can access.\n"
      },
      {
        "user": "Chocobozzz",
        "created_at": "2015-06-12T15:10:57Z",
        "body": "Oh sorry, I forgot an important thing. It's with webtorrent in a node server (_webtorrent-hybrid_).\n\nOf course in a browser I agree there is no many options.\n"
      },
      {
        "user": "feross",
        "created_at": "2015-06-12T20:31:31Z",
        "body": "@Chocobozzz You're right, copying to /tmp is not really needed if you're seeding a file that you already have on disk. This is a bug!\n\nPR welcome!\n"
      },
      {
        "user": "feross",
        "created_at": "2015-06-28T11:39:06Z",
        "body": "Released as 0.50.1, thanks to a PR from @janza :+1: \n"
      },
      {
        "user": "Chocobozzz",
        "created_at": "2015-06-28T14:12:18Z",
        "body": "Thanks guys !\n"
      }
    ]
  },
  {
    "number": 338,
    "title": "Improve webrtc peer connection handling",
    "created_at": "2015-06-01T18:20:43Z",
    "closed_at": "2016-01-01T20:47:39Z",
    "labels": [
      "help wanted",
      "area/browser",
      "bug"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/338",
    "body": "- [x] need to cleanup closed/errored webrtc peers from the swarm\n- [x] need to cleanup unused peers when tracker doesn't respond any answers (add a timeout)\n- [ ] ~~need to increase number of offers (maybe to 25?)~~\n- [x] need to re-announce to tracker every 5 minutes (instead of 15 minutes) since peers are probably shorter-lived\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/338/comments",
    "author": "feross",
    "comments": [
      {
        "user": "feross",
        "created_at": "2015-07-29T09:13:29Z",
        "body": "I just pushed an improvement to the tracker module, so we now try to look for new peers every 30 seconds on the already-established WebSocket connection to the tracker.\n"
      },
      {
        "user": "DiegoRBaquero",
        "created_at": "2015-12-14T23:38:18Z",
        "body": "@feross The first two, I think they can be checked with the recent peer destroy update.\n"
      },
      {
        "user": "feross",
        "created_at": "2016-01-01T20:47:38Z",
        "body": "@DiegoRBaquero Yep, thanks. Going to close this now.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-05-05T01:19:39Z",
        "body": "This thread has been automatically locked because it has not had recent activity. To discuss futher, please open a new issue.\n"
      }
    ]
  },
  {
    "number": 208,
    "title": "Support http .torrent urls in browser",
    "created_at": "2014-12-16T09:26:28Z",
    "closed_at": "2015-06-30T23:46:28Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area/browser"
    ],
    "url": "https://github.com/webtorrent/webtorrent/issues/208",
    "body": "I got error \"Uncaught Error: invalid torrent id\" with webtorrent in the browser (use webtorrent.min.js). This is my simple code:\n\nvar client = new WebTorrent();\nvar magnet_uri = '<redacted>';\nclient.download(magnet_uri, function (torrent) {\n  console.log('Torrent info hash:', torrent.infoHash)\n});\n\nPlease help me fix the error\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webtorrent/webtorrent/issues/208/comments",
    "author": "phambanhan",
    "comments": [
      {
        "user": "feross",
        "created_at": "2014-12-16T20:39:05Z",
        "body": "http .torrent urls are not supported in the browser yet. I changed the title of this issue to reflect the real problem.\n\nAlso, worth nothing that:\n\n> Until BitTorrent clients support WebTorrent, \"pure\" WebTorrent clients can only download from other WebTorrent clients.\n"
      },
      {
        "user": "feross",
        "created_at": "2014-12-16T23:58:50Z",
        "body": "On second thought, I don't want to support http .torrent urls in the browser.\n\nMost .torrent files are going to be hosted on servers that don't set the correct cross-origin resource header (`Access-Control-Allow-Origin`). So, the XHR request to load the .torrent file will always fail. This is true of the .torrent file you were trying to load.\n\nIf the site actually does support CORS, then you can simply fetch it yourself and pass the blob/buffer into `client.download` and it'll use the .torrent file.\n"
      },
      {
        "user": "Wingman4l7",
        "created_at": "2015-06-03T22:16:38Z",
        "body": "Unless I'm misunderstanding, CORS shouldn't be an issue if you're trying to make an XHR request to load a .torrent from the current domain, which you might be doing if you were using webtorrent as part of a browser extension.\n"
      },
      {
        "user": "feross",
        "created_at": "2015-06-06T21:27:28Z",
        "body": "@Wingman4l7 You're right. Is this an important feature to you?\n"
      },
      {
        "user": "Wingman4l7",
        "created_at": "2015-06-11T03:52:17Z",
        "body": "@feross Definitely!  It's a crucial feature in using webtorrent as part of a browser extension.  Of course, so is webtorrent using TCP / UDP within the browser, which is currently only does in nodejs... but that's another problem.  :P\n"
      },
      {
        "user": "feross",
        "created_at": "2015-06-12T00:46:08Z",
        "body": "Okay, PR welcome!\n"
      }
    ]
  }
]