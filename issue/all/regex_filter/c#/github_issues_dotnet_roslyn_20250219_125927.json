[
  {
    "number": 75804,
    "title": "locals declared with VarPatternSyntax have their type annotated as nullable, even when expression in IsExpressionSyntax is clearly not null",
    "created_at": "2024-11-07T17:19:41Z",
    "closed_at": "2024-11-07T17:38:57Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75804",
    "body": "**Version Used**: \n4.12.0.0\n\n**Steps to Reproduce**:\n\n```\n        #nullable enable\n\n        public class Person {\n            public string Name { get; set; } = string.Empty;\n            public int Age { get; set; }\n        }\n        public class TestClass {\n            public static string IsNotNull(Person c) {\n                if(c.Name is var x)\n                    return x.ToString();\n                return string.Empty;\n            }\n        }\n```\n\n**Expected Behavior**:\nthe ```x``` variable should be reported as of type **string**\n\n**Actual Behavior**:\nthe ```x``` variable is reported as of type **string?**\nIn IDE, it is manifested when I hover mouse cursor over x. The tooltip says that this local is of type **string?**.\nWhen I call ```semanticModel.GetSymbolInfo(x, cancellationToken)```, where x represents identifier for \"x\" variable from the above code, I get ILocalSymbol instance. Its type is returned with NullableAnnotation.Annotated.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75804/comments",
    "author": "Przemyslaw-W",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-07T17:38:57Z",
        "body": "The local type is `string?` as we do allow you to assign null to that variable.  That's very much the design and intent or NRT.  It's not htat 'nulls' are not allowed here.  It's that if you put in null, we will later warn you if it would cause a null ref."
      },
      {
        "user": "Przemyslaw-W",
        "created_at": "2024-11-07T18:12:31Z",
        "body": "Got it. Thank you for your explanation!"
      }
    ]
  },
  {
    "number": 75703,
    "title": "Allow Source Generation based on down stream project references",
    "created_at": "2024-11-01T16:17:50Z",
    "closed_at": "2024-11-26T03:35:17Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75703",
    "body": "Since building a project also kicks-off and awaits for building referenced and transitive projects. Wouldn't it make sense to also allow source generators to have access to the syntax of down stream projects as well? Or at least make it configurable from the host/target project which of the down stream projects you want to include as source projects. Or allow the source generator to filter projects based on certain expressions.\n\nFor example, we have code in our domain layer for which we want to generate code in our application layer. This seems not to be possible with the out-of-the-box design and probably would require custom tooling and/or build actions to achieve this.\n\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75703/comments",
    "author": "ThomasHeijtink",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-01T16:42:27Z",
        "body": "There is no way to pass this information along. The product of one compilation is a dll, and it's only that dll that is passed to the downstream compilation. \n\nNote that that dll may not even include IL (it may just be metadata in the case of a ref assembly).  So all you have are the types and members signatures to work off of. \n\n"
      },
      {
        "user": "ThomasHeijtink",
        "created_at": "2024-11-01T17:57:37Z",
        "body": "Yes, you told me. But that doesn't mean it can't be made possible. \n\nMaybe it wasn't clear that this is a feature request.\n\nAfter building one project, MSBuild could keep it in memory and pass it to the next project it builds, right?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T03:35:17Z",
        "body": "Closing out as this is very intentional and we cannot pass information to downstream compilations.  that information literally does not exist and the compiler has no way to get it."
      }
    ]
  },
  {
    "number": 74415,
    "title": "[Bug]: funny interaction between verbatim strings and the preprocessor",
    "created_at": "2024-07-17T13:57:16Z",
    "closed_at": "2024-07-17T17:55:50Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74415",
    "body": "### Issue Description\n\nit won't compile when preprocessor directives are inside verbatim strings.\n\n### Steps to Reproduce\n\nsee following sections.\n\n### Expected Behavior\n\nraw strings work okay:\r\n\r\n```C#\r\n#if true\r\nConsole.WriteLine(\"\"\"\r\n#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\r\n\"\"\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\n\n### Actual Behavior\n\nnow, consider verbatim strings:\r\n\r\n```C#\r\n#if false\r\nConsole.WriteLine(@\"#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\r\n\r\ncorresponding errors copied from Visual Studio's Error List, formatted manually as a table for better readability:\r\n\r\n|Severity|Code|Description|Project|File|Line|Suppression State|Details|\r\n|-|-|-|-|-|-|-|-|\r\n|Error|CS1025|Single-line comment or end-of-line expected|CollectiveSuicide|C:\\Users\\Bento\\source\\repos\\CollectiveSuicide\\Program.cs|4|Active||\r\n|Error|CS1028|Unexpected preprocessor directive|CollectiveSuicide|C:\\Users\\Bento\\source\\repos\\CollectiveSuicide\\Program.cs|5|Active||\r\n|Error|CS1028|Unexpected preprocessor directive|CollectiveSuicide|C:\\Users\\Bento\\source\\repos\\CollectiveSuicide\\Program.cs|7|Active||\n\n### Analysis\n\neither one of:\r\n\r\n1. parse verbatim strings correctly\r\n2. a) prohibit preprocessor directives inside verbatim strings, b) document this limitation in every page that mentions conditional compilation and verbatim strings, c) improve warnings and errors and d) suggest raw strings if such error occurs\n\n### Versions & Configurations\n\nI hope the MREs are enough. if you really need more info, tell me.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74415/comments",
    "author": "bottle2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-17T17:55:50Z",
        "body": "This is by design.  You're in an `#if false` section.  Within that, nothign has meaning until you get to the next `#else` `#elif` or `#endif`.  We have no processing of strings within these non-processed sections (that's been how thigns have worked in  c# 1)."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-17T17:58:11Z",
        "body": "> now, consider verbatim strings:\r\n\r\nYour cases are not the same:\r\n\r\nuse either:\r\n\r\n## Both true:\r\n\r\n```\r\n#if true\r\nConsole.WriteLine(\"\"\"\r\n#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\r\n\"\"\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\r\n\r\n```\r\n#if true\r\nConsole.WriteLine(@\"\r\n#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\r\n\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\r\n\r\n## Both false:\r\n\r\n```\r\n#if false\r\nConsole.WriteLine(\"\"\"\r\n#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\r\n\"\"\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\r\n\r\n```\r\n#if false\r\nConsole.WriteLine(@\"\r\n#if NET6_0_OR_GREATER\r\n    return T.Construct();\r\n#endif\r\n\");\r\n#else\r\nConsole.WriteLine(\"Hello, world!\");\r\n#endif\r\n```\r\n\r\n---\r\n\r\nYou will see the same behavior for each.  That's because there is no processing of strings.  There is simply a question about if we run into pp directives in the intervening section.  And a pp directive is defined by being at the start of the line (modulo whitespace),having a `#` and then a word."
      },
      {
        "user": "bottle2",
        "created_at": "2024-07-17T18:25:34Z",
        "body": "I understand. thanks!"
      }
    ]
  },
  {
    "number": 74385,
    "title": "implicit `return 0` for <top-level-statements-entry-point>",
    "created_at": "2024-07-14T13:55:23Z",
    "closed_at": "2024-07-14T16:12:35Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74385",
    "body": "no error:\r\n\r\n```c#\r\nConsole.WriteLine(\"Hello World!\");\r\n```\r\n\r\nerror `CS0161: '<top-level-statements-entry-point>': not all code paths return a value`\r\n\r\n```c#\r\nif (args.Length < 3)\r\n{\r\n    Console.WriteLine(\"Insufficient arguments.\");\r\n    return 1;\r\n}\r\n\r\nConsole.WriteLine(\"Hello World!\");\r\n```\r\n\r\ncompiler can assume it's 0 in second case as well.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74385/comments",
    "author": "kasperk81",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-14T16:11:55Z",
        "body": "In the first case, there's just a `void Main` method.  In the second, there's an `int Main` so that contract needs to be abided by. \n\n> compiler can assume it's 0 in second case as well.\n\nWe never assume an implicit return anywhere.  If you want the language to support this, this will have to start as a discussion on csharplang to change the language. Thanks!"
      }
    ]
  },
  {
    "number": 74187,
    "title": "IEventSymbol.DeclaringSyntaxReferences Syntax is VariableDeclaratorSyntax not EventDeclarationSyntax",
    "created_at": "2024-06-27T19:29:17Z",
    "closed_at": "2024-06-27T20:00:47Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74187",
    "body": "**Version Used**: \r\nMicrosoft.CodeAnalysis.CSharp\" Version=\"4.9.2\"\r\nMicrosoft.CodeAnalysis.Analyzers\" Version=\"3.3.4\"\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a class with a simple event declaration\r\n2. Get Event Symbols from class\r\n\r\n```csharp\r\n// Dummy Class with Event\r\npartial class SomeClass\r\n{\r\n    public event EventHandler? SomeEvent;\r\n}\r\n```\r\n```csharp\r\n// SourceGenerator\r\nprivate static void GetEvent(ITypeSymbol classSymbol) {\r\n    classSymbol\r\n        .GetAllMembers()\r\n        .Where(x => x.Kind == SymbolKind.Event)\r\n        .OfType<IEventSymbol>()\r\n        .Where(x => x.DeclaredAccessibility == Accessibility.Public)\r\n        .Where(x => !x.IsStatic)\r\n        .ToList()\r\n        .ForEach(evt =>\r\n        {\r\n            var syntax = evt.DeclaringSyntaxReferences.First().GetSyntax(); // VariableDeclaratorSyntax\r\n        });\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThe syntax variable should be of type `EventDeclarationSyntax`\r\n\r\n**Actual Behavior**:\r\nSee the syntax variable is of type `VariableDeclaratorSyntax` and not of type `EventDeclarationSyntax`\r\n\r\n**Additional info**\r\nWhen I declare the event with the add/remove body, the syntax is a `EventDeclarationSyntax`:\r\n\r\n```csharp\r\n// Dummy Class with Event Property\r\npartial class SomeClass\r\n{\r\n    public event EventHandler? SomeEvent { add => /*...*/; remove => /*...*/; }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74187/comments",
    "author": "LWehmschulteAtRosenxt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-06-27T20:00:47Z",
        "body": "This is by design.  The following is legal/expected in C#:\r\n\r\n```c#\r\n    public event Action a, b, c;\r\n```\r\n\r\nThe declaring syntax reference points to the respective variabledeclarators for `a`, `b`, or `c` to uniquely identify them."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-06-27T20:01:50Z",
        "body": "> When I declare the event with the add/remove body, the syntax is a EventDeclarationSyntax:\r\n\r\nRight, in this form, you can only have one event, so the entire declaration is returned.\r\n\r\nThis is the same with fields versus properties.  Fields give you back the variable declarators.  Properties give back the full declaration."
      }
    ]
  },
  {
    "number": 74057,
    "title": "Missing CS8602 for calculated property",
    "created_at": "2024-06-19T08:08:24Z",
    "closed_at": "2024-06-19T14:37:54Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74057",
    "body": "**Version Used**:8.0.302, 8.0.101\r\n\r\n**Steps to Reproduce**:\r\n\r\ncall dotnet build for code\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\n#nullable enable\r\n\r\nclass ValueProvider\r\n{\r\n    private int _counter;\r\n\r\n    public List<double>? NumberList\r\n    {\r\n        get\r\n        {\r\n            if (_counter++ == 0)\r\n                return new List<double>();\r\n\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var provider = new ValueProvider();\r\n\r\n        if (provider.NumberList != null)\r\n        {\r\n            var a = provider.NumberList;\r\n\r\n            if (a.Count == 0)\r\n            {\r\n                Console.WriteLine(\"Success\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nWarning CS8602\r\n\r\n**Actual Behavior**:\r\nNo warning",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74057/comments",
    "author": "eugene-rw",
    "comments": [
      {
        "user": "eugene-rw",
        "created_at": "2024-06-19T08:12:55Z",
        "body": "It seems, compiler incorrectly use condition \"provider.NumberList != null\" as proof of non-nullability of `a`"
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2024-06-19T09:56:01Z",
        "body": "> It seems, compiler incorrectly use condition \"provider.NumberList != null\" as proof of non-nullability of `a`\r\n\r\nIt is the contract of property. Nullability analysis and many other analyzers doesn't expect the get result of property to change randomly. There are also other cases that tooling can invoke the getter of properties."
      },
      {
        "user": "eugene-rw",
        "created_at": "2024-06-19T11:07:59Z",
        "body": "@huoyaoyuan \r\nI would agree, if it was simple variable. But nullability analysis can see that the property is function indeed, and doesn't relay on it constancy. It can be make as configurable though."
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2024-06-19T11:12:49Z",
        "body": "> But nullability analysis can see that the property is function indeed\r\n\r\nNullability analysis and potentially all language features doesn't see through method body of other methods. It only check for the signatures with attributes applied.\r\n\r\nIt's also impractical to understand what can happen in a method in detail.\r\n\r\n> I would agree, if it was simple variable.\r\n\r\nIt's the contract of properties to act similar to simple variables. Many of the tooling including debugger follow this contract."
      },
      {
        "user": "eugene-rw",
        "created_at": "2024-06-19T11:26:05Z",
        "body": "> It's also impractical to understand what can happen in a method in detail.\r\n\r\nYes, of course.\r\n\r\nI supposed, that there is a simple method to distinguish cases when property has simple get accessor with hidden backing field and when property calls function. But PropertyInfo has no info for that, it seems, that it can be compiler internals only."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-06-19T14:38:47Z",
        "body": "Closing as by design. Only the signatures of members are examined to determine their impact on NRT analysis. "
      }
    ]
  },
  {
    "number": 73177,
    "title": "C# Dictionary key initializer statement can throw a surprising KeyNotFoundException (by omitting 'new T')",
    "created_at": "2024-04-22T16:14:02Z",
    "closed_at": "2024-04-22T16:21:09Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/73177",
    "body": "**Version Used**: \r\n\r\nI think I'm using C# version 10? In VS 2022.\r\nWhen I look at build output I see\r\n\r\n`27>    Microsoft (R) Visual C# Compiler version 4.9.0-3.24121.1 (a98c90d5)`\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile this code in a C# console app targeting .net 6 or .net 8 (happens for either).\r\n\r\n```csharp\r\n using Xunit;\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\nawait new Foo().QuorumIsLostWhenImUnhealthyAndAllTheHealthyStatusesAreStale();\r\n\r\nclass Foo\r\n{\r\n\r\n    /// <summary>\r\n    /// This is a safeguard against the health checks failing on the other nodes in the cluster\r\n    /// and making their last health status blob 'stale' when they fail to update it.\r\n    /// </summary>\r\n    [Fact]\r\n    public async Task QuorumIsLostWhenImUnhealthyAndAllTheHealthyStatusesAreStale()\r\n    {\r\n        var testStartTime = DateTimeOffset.Now;\r\n        WhenItIsAThreeNodeCluster();\r\n        WhenHealthStatusIs(new Dictionary<int, Health>\r\n        {\r\n            [0] = new Health\r\n            {\r\n                status = Health.HealthStatus.Healthy,\r\n                timeOfLastHealthCheck = testStartTime.Subtract(TimeSpan.FromMinutes(5)), // Stale\r\n                timeOfLastReboot = null\r\n            },\r\n            [1] = new Health\r\n            {\r\n                status = Health.HealthStatus.Healthy,\r\n                timeOfLastHealthCheck = testStartTime.Subtract(TimeSpan.FromMinutes(5)), // Stale\r\n                timeOfLastReboot = null\r\n            },\r\n            [2] =\r\n                {\r\n                    status = Health.HealthStatus.Healthy,\r\n                    timeOfLastHealthCheck = testStartTime.Subtract(TimeSpan.FromMinutes(5)), // Stale\r\n                    timeOfLastReboot = null\r\n                }\r\n        });\r\n    }\r\n\r\n    private void WhenHealthStatusIs(Dictionary<int, Health> dictionary)\r\n    {\r\n    }\r\n\r\n    private void WhenItIsAThreeNodeCluster()\r\n    {\r\n    }\r\n}\r\n\r\npublic interface IConfig\r\n{\r\n}\r\n\r\npublic class Health : IConfig\r\n{\r\n    public HealthStatus status;\r\n\r\n    public ClusterLeaderHealthCheckStatus clusterLeaderHealthCheckStatus;\r\n\r\n    public DateTimeOffset? timeOfLastHealthCheck;\r\n\r\n    public DateTimeOffset? timeOfLastReboot;\r\n\r\n    public enum HealthStatus\r\n    {\r\n        Healthy,\r\n        Unhealthy\r\n    }\r\n\r\n    public enum ClusterLeaderHealthCheckStatus\r\n    {\r\n        Active,\r\n        Inactive\r\n    }\r\n\r\n    public override string ToString()\r\n        => $\"status : {status}, clusterLeaderHealthCheckStatus : {clusterLeaderHealthCheckStatus}, Time of last health check: {timeOfLastHealthCheck}, Time of last reboot: {timeOfLastReboot}\";\r\n}\r\n```\r\n\r\n**Diagnostic Id**:\r\n\r\nN/A\r\n\r\n**Expected Behavior**:\r\n\r\nExpected: does not throw. [Or possibly: does not compile, since that's better than a surprising runtime error, in my opinion]\r\n\r\nReason: I expect that the app shouldn't actually need to *read* the dictionary key 2, in order to run an initializer statement, which will *write* to the key 2.\r\nAnd if the implementation for some reason _did_ need to read the value, then it should be doing so in a safe way that handles the possibility that item 2 is not already in the collection, and does not throw!\r\n\r\n**Actual Behavior**:\r\n\r\nCompiles, runs, then throws an exception.\r\n\r\nMessage: \r\n  System.Collections.Generic.KeyNotFoundException : The given key '2' was not present in the dictionary.\r\n\r\nStack Trace: \r\n  Dictionary`2.get_Item(TKey key)\r\n  TestClass.TestMethod() line 301 // the line number of 'new Dictionary...'",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/73177/comments",
    "author": "TimLovellSmith",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-04-22T16:21:09Z",
        "body": "Closing out.  This is exactly the expected behavior of the alnguage as specified.  `[0] = new Health` means \"instantiate new value and assign into the 0'th index of teh destination\".  Whereas `[2] = {` means \"grab the value at the 2nd index, and then assign into it the specified property/value pairs within the initializer\".\r\n\r\nTHese are two different sets of semantic intentionally available due to how different types of initialization apis work.  "
      },
      {
        "user": "TimLovellSmith",
        "created_at": "2024-04-22T16:30:14Z",
        "body": "@CyrusNajmabadi \r\nHow is this actually a good feature of the language though?\r\n\r\nIt seems very unlikely to me that I'm going to write\r\n\r\n```\r\n= (new dictionary) {\r\n   [\"magic\"] = {\r\n     prop1 = val1;\r\n   } \r\n}\r\n```\r\n\r\nand expect that the dictionary already contained key \"magic\", unless its a **very special dictionary class indeed**, as opposed to e.g. any of the commonly used ones from the framework."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-04-22T16:38:16Z",
        "body": "> How is this actually a good feature of the language though?\r\n\r\nIt allows for two extremely common forms of initialization. The form where the client is expected to instantiate the values the final object holds onto, and the form where the final object instantiates them and wants the client to fill them in. :)\r\n\r\nBoth are used throughout the ecosystem.\r\n\r\n> It seems very unlikely to me that I'm going to write\r\n\r\nWe do this all the time in roslyn.  As an example, our entire test suite is written that way.  :)\r\n\r\n>  unless its a very special dictionary class indeed,\r\n\r\nThere are many cases of this.  So it's it's not 'very special'. It's just a domain specific choice that many APIs choose to use. "
      }
    ]
  },
  {
    "number": 73104,
    "title": "IDE0028 needs to be split into two for cases where semantics change and for cases where it does not",
    "created_at": "2024-04-19T16:47:55Z",
    "closed_at": "2024-04-19T17:05:58Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Feature Request",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/73104",
    "body": "Version Used:\r\nVisual Studio 17.10.0 Preview 4.0\r\n\r\nSteps to Reproduce:\r\n\r\nAdd code like below:\r\n```\r\nIList<string> strings = new SortedStringCollection();\r\n```\r\n\r\nDiagnostic Id: IDE0028\r\n\r\nExpected Behavior:\r\nWe should be able to globally disable IDE0028 for cases where it changes the semantics while it is not disabled for other cases.\r\n\r\nActual Behavior:\r\nIDE0028 is reported and if suggestion is applied, it changes the code to as shown below:\r\n```\r\nIList<string> strings = new [];\r\n```\r\nCompiler generates below code for:\r\n```\r\nIList<string> strings = new List<string>();\r\n```\r\nIf `SortedStringCollection` inserts the items in a specific sorted order, that will no longer happen when IDE0028 is applied.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/73104/comments",
    "author": "nvmkpk",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-04-19T17:05:56Z",
        "body": "This should already be the case.  Use `dotnet_style_prefer_collection_expression=when_types_exactly_match`"
      }
    ]
  },
  {
    "number": 72108,
    "title": "ParameterSymbol.ToDisplayString/Parts(SymbolDisplayFormat.FullyQualifiedFormat) only outputs the paramter name.",
    "created_at": "2024-02-14T21:26:48Z",
    "closed_at": "2024-02-14T22:36:30Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72108",
    "body": "**Version Used**: 4.8.0\r\n\r\n**Steps to Reproduce**:\r\n1. Define a method like this:\r\n```csharp\r\nprivate void Foo(string a, int b = 1, List<Guid>? list = null) { }\r\n```\r\n2. Run the source generator and get the ParameterSymbol for `List<Guid>? list = null` through `var symbol = semanticModel.GetDeclaredSymbol(parameter)`;\r\n\r\n3. Execute `symbol.ToDisplayParts(SymbolDisplayFormat.FullyQualifiedFormat)` and/or `symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)`.\r\n\r\n**Expected Behavior**:\r\n`ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)` -> `global::System.Collections.Generic.List<global::System.Guid>? list`\r\n`ToDisplayParts(SymbolDisplayFormat.FullyQualifiedFormat)` -> An array consisting of SymbolDispaylParts including global qualification.\r\n\r\n**Actual Behavior**:\r\n`ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)` -> `list`\r\n`ToDisplayParts(SymbolDisplayFormat.FullyQualifiedFormat)` -> An array only containing the `list` display part.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72108/comments",
    "author": "StefanOssendorf",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-14T22:36:31Z",
        "body": "This is correct.  The FullyQualified name of a paramter is just it's name itself.\r\n\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-14T22:37:08Z",
        "body": "of note: we absolutely do not support using ToDisplayString on a symbol to generate code for it *except* for ITypeSymbols.  For other symbol types, you will have to generate the code yourself.  "
      },
      {
        "user": "StefanOssendorf",
        "created_at": "2024-02-15T20:44:56Z",
        "body": "@CyrusNajmabadi \r\nI understand that, but the behavior of said methods feel inconsistent.\r\nThe call of `ToDisplayString()` without any paramters should also output `list`, like you said. But it outputs `System.Collections.Generic.List<System.Guid>? list`. The same goes for the `ToDisplayParts()`.\r\nFurthmore using `ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat)` outputs `List<Guid>? list = null`.\r\nSo for me something looks wrong."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-15T20:51:36Z",
        "body": "Not passing any format uses the `CSharpErrorMessageFormat`.  Which is not the same same as the `MinimallyQualifiedFormat`.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-15T20:54:14Z",
        "body": "> So for me something looks wrong.\r\n\r\nThese are all display formats.  Their only use is to be used to display things (not to generate code).  By default, if you pass nothing, you get the exact output the compiler itself uses when printing out these symbols by default (like in error messages).\r\n\r\nIf you want to customize this, we provide format options.  However, absolutely none of them provide the functionality to use the outputted result as source-code for use in something like a generator.\r\n\r\nNote: for *ITypeSymbols* (and *only* those).  We do allow for .ToDisplayString results to be used in generated code.  But not for any other type of symbol."
      },
      {
        "user": "StefanOssendorf",
        "created_at": "2024-02-15T20:56:50Z",
        "body": "Okay, thanks for clarification :)\r\n\r\nI just found it weird for `FullyQualifiedFormat` and `MinimallyQualifiedFormat` not to output the \"same\" just with different representations."
      }
    ]
  },
  {
    "number": 71066,
    "title": "Question: Can I add nullability info to old referenced assemblies?",
    "created_at": "2023-12-03T09:21:54Z",
    "closed_at": "2023-12-03T17:27:30Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71066",
    "body": "I am pretty sure that I have seen an issue about adding support for providing nullability info for referenced assemblies which were not developed with nullable reference types on, but I can't find it anymore. Did this get implemented? Is it still on the table?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71066/comments",
    "author": "bjornhellander",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-12-03T17:27:20Z",
        "body": "No. Nothing was done here. "
      }
    ]
  },
  {
    "number": 70404,
    "title": "CompletionService cannot be resolved in Blazor WASM",
    "created_at": "2023-10-17T16:52:51Z",
    "closed_at": "2024-11-25T19:58:46Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/70404",
    "body": "**Version: 4.8.0-2 Final** \r\n\r\n**Steps to Reproduce**:\r\n\r\nApologies in advance if I'm missing something, I'm still getting familiar with Roslyn. \r\n\r\nRunning the code below in the Program.cs file in a Blazor WASM project will not resolve the C# CompletionService. In a standard .NET console app, the completion service is resolved.\r\n\r\nIs this supported in WASM? I haven't been able to find the area where these completion providers are registered, if someone can point me there I'm happy to look into it myself.\r\n\r\ncode: \r\n\r\n```csharp\r\nvar adHocWorkspace = new AdhocWorkspace(MefHostServices.DefaultHost);\r\nvar projectInfo = ProjectInfo.Create(\r\n\tProjectId.CreateNewId(),\r\n\tVersionStamp.Create(),\r\n\t\"TemporaryProject\",\r\n\t\"TemporaryProject\",\r\n\tLanguageNames.CSharp,\r\n\tmetadataReferences: references,\r\n\tparseOptions: new CSharpParseOptions(\r\n\t\tkind: SourceCodeKind.Script,\r\n\t\tlanguageVersion: LanguageVersion.Latest));\r\n\r\nvar project = adHocWorkspace.AddProject(projectInfo);\r\nvar completionService = project.Services.GetService<CompletionService>();\r\n\r\nvar document = project.AddDocument(\"program.cs\", \"using System;\\r\\nvar g = Guid.NewGuid();\");\r\nvar completionService2 = CompletionService.GetService(document);\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nCompletion Service is resolved\r\n\r\n**Actual Behavior**:\r\n\r\nnull value returned by `CompletionService.GetService` and `project.Services.GetService<CompletionService>`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/70404/comments",
    "author": "ConnerPhillis",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-17T17:06:52Z",
        "body": "> Is this supported in WASM?\r\n\r\nWe don't do anything to support this.  But we don't block it either.\r\n\r\nSomeone (ideally someone who is doing wasm development :D) would have to debug through to see what's failing."
      },
      {
        "user": "ConnerPhillis",
        "created_at": "2023-10-17T17:15:45Z",
        "body": "Hey Cyrus,\r\n\r\nI've got no problem debugging through - but I also have zero clue where these services are being sourced from. I've worked through Project, ProjectInfo, and Solution, but haven't turned anything up yet. Any chance you have some pointers on where would be the best place to look for those things?\r\n\r\nAlso, am I correct in assuming that there is some sort of DI container going on behind the scenes for these services?\r\n\r\nNo problem if I'm asking too much, I'm fine to keep brute forcing it just hoping you can give me a shortcut :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-17T17:16:57Z",
        "body": "@ConnerPhillis .  Yes, we use MEF to discover and inject all these services.  Actually calling into GetService should actually step into that, and will show if *anything* is being discovered, or if it's just an incomplete set.  In other case, taht wil give more hints as to what is going wrong :)"
      },
      {
        "user": "ConnerPhillis",
        "created_at": "2023-10-17T17:18:17Z",
        "body": "Great! Thanks!\r\n\r\nThis is a project I've been doing in my free time, so I'll be working on it again later tonight. Hopefully I can turn something up :)"
      },
      {
        "user": "ConnerPhillis",
        "created_at": "2023-10-18T01:03:41Z",
        "body": "@CyrusNajmabadi \r\n\r\ntl;dr; - stupid error on my end\r\n\r\nTurns out I hadn't cleaned up nuget packages in my testing project so `Microsoft.CodeAnalysis.CSharp.Features` was not referenced in the service layer library that I had built. Adding a package reference for that package in my library resolved the issue, the `CSharpCompletionService` was able to be loaded.\r\n\r\nWho knew you actually had to reference a nuget package to load its types? 🙄\r\n\r\nWhile I was working on debugging this though I came up with a question: I'm guessing since the CSharpCompletionProvider is internal and not referenced by anything except test projects there's a high chance that it'll be trimmed. Since Blazor by default publishes trimmed I'm guessing that means it has to be disabled for this project?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-18T05:06:48Z",
        "body": "The type should be referenced.  Otherwise it wouldn't work in hosts like vs.  Unless you're using a trimmer that throws out types that mef would hook up. "
      },
      {
        "user": "LHK-666",
        "created_at": "2024-07-31T10:18:37Z",
        "body": "Code:\r\npublic CodeCompletionService()\r\n{\r\n    workSpace = new AdhocWorkspace();\r\n}\r\n\r\npublic Project CreateProject(string projectName)\r\n{\r\n    var projectId = ProjectId.CreateNewId(debugName: projectName);\r\n    var projectInfo = ProjectInfo.Create(\r\n        projectId,\r\n        VersionStamp.Create(),\r\n        projectName,\r\n        projectName,\r\n        LanguageNames.CSharp)\r\n         .WithMetadataReferences(new[] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) });\r\n    Project project = workSpace.AddProject(projectName,\"C#\");\r\n    return project;\r\n}\r\nHello, I would like to ask about the execution of var project=workSpace AddProject(projectInfo); When using the AddProject method in the code line. An error message appeared stating 'System. NotSupported Exception:' Language 'C #' is not supported. '"
      }
    ]
  },
  {
    "number": 69868,
    "title": "Stop processing during IncrementalValueProvider",
    "created_at": "2023-09-09T07:21:25Z",
    "closed_at": "2023-09-09T18:38:19Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69868",
    "body": "## Background and Motivation\r\n\r\nNot sure if I missed something here, I'm working on an Incremental Generator, that used the CompilationProvider to first extract some type information. Looking for a type with Compilation.GetTypeByMetadataName might return null in case the type isn't found, if for example the containing assembly was not referenced.\r\nIf that's the case, I would just report a diagnostic to inform the user, which is fine.\r\nThe problem is that there is no way to stop the pipeline at this port. The only two options are:\r\n* throwing an exception \r\n* combine the provider into a IncrementalValuesProvider, carrying over a null and use Where to ignore the value.\r\n\r\nThrowing in my opinion is the wrong approach as it seems the generator malfunctioned and handling the null in a where clause seem very inefficient since there where runs on all nodes from the IncrementalValuesProvider.\r\n\r\nShouldn't there be a way stop processing a IncrementalValueProvider in case the conditions for processing it are not met?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69868/comments",
    "author": "hugener",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-09-09T18:38:19Z",
        "body": "The ivp stops when it produces the same values as the prior run. So just do that and everything will work out. "
      }
    ]
  },
  {
    "number": 69486,
    "title": "Honor DoesNotReturn attribute",
    "created_at": "2023-08-12T18:24:05Z",
    "closed_at": "2023-08-12T18:45:54Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69486",
    "body": "Imagine you are implementing an interface, and for whatever reason you don't want to implement a method right now. You _can_ do\r\n```\r\n  bool method1() => throw new System.NotImplementedException();\r\n```\r\nand magically both compiler and analyzers see \"Aha, code can never flow out of this method; let's disable that (class of) compiler error(s) here\".\r\n\r\nNow imagine you do this for N methods with varying return types. Now you get the urge to refactor that redundant stuff into something more maintainable. You add\r\n\r\n```\r\n  [System.Diagnostics.CodeAnalysis.DoesNotReturn]\r\n  private static void NotImpl([System.Runtime.CompilerServices.CallerMemberNameAttribute] string caller = \"\") { throw new System.NotImplementedException(caller); }\r\n```\r\n\r\nand intend to use that for all places doing this manually, i.e.\r\n\r\n```\r\n  bool method1() => NotImpl();\r\n```\r\n\r\nonly to be greeted with `error CS0029: Cannot implicitly convert type 'void' to 'bool'`.\r\n\r\nThat is ... in lack of better words to describe it, bullshit. I can't view this as anything but a compiler bug.\r\n\r\nSuggestion: Disable **all** code-flow analysis after a sequence point calling a function or method tagged with `System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute`.\r\n\r\nRisk: Nada, zip, zilch, none.\r\n\r\nImpact: Allows writing better code.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69486/comments",
    "author": "tamlin-mike",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-08-12T18:45:54Z",
        "body": "> [System.Diagnostics.CodeAnalysis.DoesNotReturn]\r\n\r\nDoesNotReturn is just a hint.  It has no actual meaning or enforcement.  As such, the compiler must actually behave based on what the signature of the method is (namely that it is void).  \r\n\r\nConsider, for example, even a simple case of compiling against this method, and then the body changing in some future release.  It would have the same binary signature, but would now break badly (since void cannot be converted to bool).\r\n\r\n> I can't view this as anything but a compiler bug.\r\n\r\nCompiler is operating as the language requires.  If you'd like the language to make this a first-class concept, please open a discussion on dotnet/csharplang first.  An approved language change there will be necessary in order to actually change what hte compiler is doing here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-08-12T18:47:24Z",
        "body": "> Risk: Nada, zip, zilch, none.\r\n\r\nThere is def risk here.  Including now making it a breaking change to actually add/remove this attribute to a method (never a breaking change before), and quite possibly causing things like corruption if things are not handled super carefully here."
      }
    ]
  },
  {
    "number": 69251,
    "title": "IDE0065 (Using directives must be placed outside of a namespace declaration) for aliases",
    "created_at": "2023-07-26T22:04:30Z",
    "closed_at": "2023-07-26T22:33:35Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69251",
    "body": "**Version Used**: latest\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\n// file 1\r\n\r\nnamespace ClassNamedAsNamespace;\r\n\r\npublic class ClassNamedAsNamespace;\r\n```\r\n\r\n```c#\r\n// file 2\r\n\r\n// using ClassNamedAsNamespace = ClassNamedAsNamespace.ClassNamedAsNamespace; this doesn't work, `ClassNamedAsNamespace obj` produces ambiguous referefce\r\n\r\nnamespace NamespaceName;\r\n\r\nusing ClassNamedAsNamespace = ClassNamedAsNamespace.ClassNamedAsNamespace; // <- IDE0065\r\n\r\npublic class MyClass\r\n{\r\n    public void Foo(ClassNamedAsNamespace obj)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**Diagnostic Id**: IDE0065 \r\n\r\n**Expected Behavior**: No IDE0065 is produced, since I can't move this using to the top level without modifications (like inventing new neame for alias)\r\n\r\n**Actual Behavior**: IDE0065 is reported\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69251/comments",
    "author": "hankovich",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-26T22:11:28Z",
        "body": "> since I can't move alias using to the top level\r\n\r\nWhy can you not do this?"
      },
      {
        "user": "hankovich",
        "created_at": "2023-07-26T22:30:14Z",
        "body": "@CyrusNajmabadi I've updated the issue with less complicated sample. I can, but I have to invent a new name for alias, I can't just use class name as is"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-26T22:33:35Z",
        "body": "You'll have to suppress in that case.  if you've setup your rules taht this is an error, then it's an error.  You'll have to write references that you would normally want to go to that alias to be written in another form.  \r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 69175,
    "title": "CS0052: Compilation error when trying to compile class with internal protected member which has internal type",
    "created_at": "2023-07-23T05:30:10Z",
    "closed_at": "2023-07-23T06:21:23Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69175",
    "body": "**Version used**:MSBuild version 17.6.8+c70978d4d for .NET\r\n17.6.8.32104\r\n\r\n**Steps to Reproduce**:\r\nMinimal repro file:\r\n```csharp\r\nusing System;\r\ninternal class A\r\n{\r\n}\r\npublic class B\r\n{\r\n    internal protected A AProperty {get;set;}\r\n}\r\n```\r\n\r\n**Diagnostic Id**:\r\nCS0052\r\n\r\n**Expected Behavior**:\r\nCode compiles\r\n\r\n**Actual Behavior**:\r\nCode does not compile, CS0052 is a error code\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69175/comments",
    "author": "mgalczynski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-23T06:21:23Z",
        "body": "This is by design.  a `protected` member has greater accessibility than an internal one.  So *any* subclass of B in *any* assembly would see this member.  But it wouldn't be able to use it because that member references 'A', which is only available in the starting assembly.\r\n\r\n\r\nPut another way, `internal protected` means `internal OR protected`.  So it's available both within the assembly, OR from any subclass.  It's the latter part you are in conflict with.\r\n\r\nIf you want `internal AND protected` we have the terrible syntax `private protected` to reflect that concept.  If you pick `private protected` then the member is only available from subclasses within that assembly."
      }
    ]
  },
  {
    "number": 69103,
    "title": "Generics are assumed to be nullable types and lose nullable annotations",
    "created_at": "2023-07-18T23:12:17Z",
    "closed_at": "2023-07-18T23:45:07Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69103",
    "body": "When annotating an unconstrained generic T as nullable (T?) the compiler treats this as equivalent to T which is only true if it was already a nullable type. if you add where T : struct, then the nullable info is preserved.\r\n\r\n**Version Used**: \r\nCompiler version: '4.6.0-3.23259.8 (c3cc1d0c)'. Language version: 11.0.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\n#nullable enable\r\n\r\n// Case 1\r\nint? a = default(int?);\r\nConsole.WriteLine((a == null)? \"null\" : \"not null\");\r\n\r\n// Case 2\r\nT? dflt<T>() {\r\n    return default(T?);\r\n}\r\n\r\nint? b = dflt<int>();\r\nConsole.WriteLine((b == null)? \"null\" : \"not null\");\r\n\r\n// Case 3\r\nT dflt2<T>() {\r\n    return default(T);\r\n}\r\n\r\nint? c = dflt2<int?>();\r\nConsole.WriteLine((c == null)? \"null\" : \"not null\");\r\n\r\n// Case 4\r\nT? dflt3<T>() where T : struct\r\n{\r\n    return default(T?);\r\n}\r\n\r\nint? d = dflt3<int>();\r\nConsole.WriteLine((d == null)? \"null\" : \"not null\");\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nprints:\r\n\r\n```\r\nnull\r\nnull\r\nnull\r\nnull\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nprints:\r\n\r\n```\r\nnull\r\nnot null\r\nnull\r\nnull\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69103/comments",
    "author": "peter-elliott-ms",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-18T23:45:03Z",
        "body": "This is by design. With *unconstrained* generics, `T?` does not mean 'can be null'. It means 'can be *default*'. \r\n\r\nIn your test you get `default(int)` back, which is just 0 (which is not null). \r\n\r\nFor class-constrained `T?` means (can be reference-null).  For struct-constrained, it means you get `Nullable<T>` back.\r\n\r\nUnfortunately, due to how the runtime fundamentally works, there is no unification here. "
      }
    ]
  },
  {
    "number": 68882,
    "title": "CS1654 for no obvious reason",
    "created_at": "2023-07-05T16:59:55Z",
    "closed_at": "2024-07-23T13:48:10Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68882",
    "body": "I'm using 8.0.100-preview.5.23303.2 SDK.\r\n\r\nWhat is the compiler trying to protect against here? In order to remove the method, I had to change the using statement to manually dispose to avoid the error.\r\n```\r\nusing System;\r\npublic class C {\r\n    public static void Main() {\r\n        using var s = new S();\r\n        s.Value = 42; //  error CS1654: Cannot modify members of 's' because it is a 'using variable'\r\n        //s.SetValue(42); // ok\r\n    }\r\n}\r\n\r\nstruct S : IDisposable\r\n{\r\n    public int Value;\r\n    public void SetValue(int value) => Value = value;\r\n    public void Dispose() { }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68882/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-05T19:55:19Z",
        "body": "`using` variables are 'readonly' so that the user code cannot overwrite the original value with some new value.  This is because it woudl be confusing as to waht that meant.  Specifically, was the original value disposed, or the new value disposed?  \r\n\r\nHowever, 'readonly-ness' is a statement about a storage location.  For a struct, the storage location is the value itself (there's no pointer to the value).  So, because of this, you cannot do anything considered a 'write' to the struct value.  That includes assigning over the value *fully* or potentially assigning over any *portion* of the value."
      },
      {
        "user": "CollinAlpert",
        "created_at": "2023-07-06T19:42:36Z",
        "body": "That makes sense, but if anything considered a 'write' to the struct value is prohibited, why is `s.SetValue(42);` allowed?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-06T20:04:29Z",
        "body": "methods, by default, are assumed to not write (since back then tehre was no way to know for certain if it was a safe method or not).  But distinct setter-calls are assumed to write since properties are intended to represent 'stateful like things'.  Nowadays, we would be able ot mark methods/properties with teh `readonly` modifier as appropriate.  But we didn't have it at the time, so this was a 'good enough' heuristic."
      },
      {
        "user": "danmoseley",
        "created_at": "2023-07-06T20:42:56Z",
        "body": "Cc @stephentoub in our case was the write (previously through a method) causing us to fail to dispose the original? But perhaps that doesn't make functional difference in this case, as the VSB still got disposed (once)\n\nWith respect to the heuristic, should it now be extended to non read only methods (ie requiring everyone add readonly)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-06T20:46:18Z",
        "body": "> With respect to the heuristic, should it now be extended to non read only methods (ie requiring everyone add readonly)\r\n\r\nThat would quite possibly break an enormous amount of code.  A proposal could be made on this.  But it would have a high bar to clear to be considered ok.  This is likely just a thing we live with as choices made in 1.0 that now have 25 years of use cases piled onto them."
      },
      {
        "user": "danmoseley",
        "created_at": "2023-07-06T20:49:08Z",
        "body": "Yeah - perhaps with an analyzer/fixer and a way to opt in. Do you believe many bugs would be caught though? I assume so if we think it's worth an error for field writes."
      },
      {
        "user": "quixoticaxis",
        "created_at": "2023-12-21T01:41:22Z",
        "body": "> > With respect to the heuristic, should it now be extended to non read only methods (ie requiring everyone add readonly)\n> \n> That would quite possibly break an enormous amount of code.  A proposal could be made on this.  But it would have a high bar to clear to be considered ok.  This is likely just a thing we live with as choices made in 1.0 that now have 25 years of use cases piled onto them.\n\nWe use method workaround to change fields of structs in our production codebase.\n\nWhat is the risk of changing a struct? The `using` statement is guaranteed to emit `constrained` call, AFAIU, so there is no ambiguity of what is being disposed."
      }
    ]
  },
  {
    "number": 68767,
    "title": "Implementing IOptionMonad<T, Self> from the dotNext project in a type in another project is impossible",
    "created_at": "2023-06-25T12:20:38Z",
    "closed_at": "2023-06-28T11:41:45Z",
    "labels": [
      "Bug",
      "Question",
      "Area-Compilers",
      "Feature - StaticAbstractMembersInInterfaces"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68767",
    "body": "**Version Used**:\r\n\r\n    Visual Studio 2022 Professional 17.6.4 targeting .NET 6.0.\r\n    Visual Studio 2022 Professional 17.6.4 targeting .NET 7.0.\r\n    Visual Studio 2022 Professional 17.7.0 Preview 2.0 targeting .NET 8.0.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In a Visual Studio 2022 project (e.g., library or console) reference latest version of the dotNext NuGet package. You can target a wide variety of .NET versions or SDKs, including the preview latest.\r\n2. Try to implement IOptionMonad<T, Self>; e.g., in a readonly struct.\r\n3. In .NET 6.0, you will need to opt in for preview features, which is not a smooth task (EnablePreviewFeatures, RequiresPreviewFeaturesAttribute, and if none works then disabling CA2252).\r\n4. Ask Visual Studio to fill a draft implementation of the interface for you (the one that throws NotImplementedException from every method).\r\n\r\n**Expected Behavior**:\r\n\r\nThe program should compile without errors.\r\n\r\n**Actual Behavior**:\r\n\r\nI get these three compilation errors:\r\n    - error CS0570: 'IOptionMonad<T, TSelf>.explicit operator T(in TSelf)' is not supported by the language\r\n    - error CS0570: 'IOptionMonad<T, TSelf>.operator true(in TSelf)' is not supported by the language\r\n    - error CS0570: 'IOptionMonad<T, TSelf>.operator false(in TSelf)' is not supported by the language\r\nThe interface is unusable outside the project it was implemented at in the first place.\r\nIf I include the source code for IOptionMonad<T, TSelf> in my own project (and only that one, not any of the other interfaces IOptionMonad<T, TSelf> itself inherits from), then the errors disappear.\r\n\r\nThank you very much.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68767/comments",
    "author": "carpe7",
    "comments": [
      {
        "user": "svick",
        "created_at": "2023-06-25T15:25:10Z",
        "body": "Since static virtual interface members are only fully supported starting with .Net 7, have you tried using that?\r\n\r\nPreview features are just that: a preview, and they may be buggy or incomplete."
      },
      {
        "user": "carpe7",
        "created_at": "2023-06-25T20:20:43Z",
        "body": "I have tried not only .NET 7, but also .NET 8, to no avail."
      },
      {
        "user": "jcouv",
        "created_at": "2023-06-26T22:45:04Z",
        "body": "I'm able to repro the issue (see code snippet below with errors).\r\nBased on the description in OP, it looks like we get different behavior whether `IOptionMonad<T, TSelf>` is defined in source or in metadata.\r\nAssigned to @AlekseyTs to confirm expected behavior and triage.\r\n\r\n```\r\n// Project includes reference to DotNext nuget package\r\nusing DotNext;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        System.Console.Write(42);\r\n    }\r\n}\r\n\r\nreadonly struct S<T> : IOptionMonad<T, S<T>>\r\n{\r\n    bool IOptionMonad<T>.HasValue => throw new NotImplementedException();\r\n\r\n    T? IOptionMonad<T>.Or(T? defaultValue)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    T? IOptionMonad<T>.OrDefault()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    T IOptionMonad<T>.OrInvoke(Func<T> defaultFunc)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    bool IOptionMonad<T>.TryGet(out T? value)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    static bool IOptionMonad<T, S<T>>.operator true(in S<T> container) // Error CS0570\t'IOptionMonad<T, TSelf>.operator true(in TSelf)' is not supported by the language\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    static bool IOptionMonad<T, S<T>>.operator false(in S<T> container) // Error CS0570\t'IOptionMonad<T, TSelf>.operator false(in TSelf)' is not supported by the language\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public static implicit operator S<T>(T value)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public static explicit operator T(in S<T> container) // Error CS0570\t'IOptionMonad<T, TSelf>.explicit operator T(in TSelf)' is not supported by the language\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```"
      },
      {
        "user": "AlekseyTs",
        "created_at": "2023-06-27T16:32:31Z",
        "body": "It looks like the reason for the error is the fact that compiler is failing to emit `modreq([System.Runtime]System.Runtime.InteropServices.InAttribute)` for `in` parameters of virtual operators:\r\n```\r\n    public interface IOptionMonad<T, TSelf> where TSelf : struct, IOptionMonad<T, TSelf>\r\n    {\r\n        static abstract bool operator true(in TSelf container);\r\n        static abstract bool operator false(in TSelf container);\r\n        static abstract bool M(in TSelf container);\r\n    }\r\n```\r\n\r\nIL:\r\n```\r\n.class interface public auto ansi abstract IOptionMonad`2<T, valuetype .ctor (class IOptionMonad`2<!T, !TSelf>, [System.Runtime]System.ValueType) TSelf>\r\n{\r\n    .param type T\r\n        .custom instance void System.Runtime.CompilerServices.NullableAttribute::.ctor(uint8) = (\r\n            01 00 02 00 00\r\n        )\r\n    .param constraint TSelf, class IOptionMonad`2<!T, !TSelf>\r\n        .custom instance void System.Runtime.CompilerServices.NullableAttribute::.ctor(uint8[]) = (\r\n            01 00 03 00 00 00 01 01 00 00 00\r\n        )\r\n    // Methods\r\n    .method public hidebysig specialname abstract virtual static \r\n        bool op_True (\r\n            [in] !TSelf& container\r\n        ) cil managed \r\n    {\r\n        .param [1]\r\n            .custom instance void [System.Runtime]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = (\r\n                01 00 00 00\r\n            )\r\n    } // end of method IOptionMonad`2::op_True\r\n\r\n    .method public hidebysig specialname abstract virtual static \r\n        bool op_False (\r\n            [in] !TSelf& container\r\n        ) cil managed \r\n    {\r\n        .param [1]\r\n            .custom instance void [System.Runtime]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = (\r\n                01 00 00 00\r\n            )\r\n    } // end of method IOptionMonad`2::op_False\r\n\r\n    .method public hidebysig abstract virtual static \r\n        bool M (\r\n            [in] !TSelf& modreq([System.Runtime]System.Runtime.InteropServices.InAttribute) container\r\n        ) cil managed \r\n    {\r\n        .param [1]\r\n            .custom instance void [System.Runtime]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = (\r\n                01 00 00 00\r\n            )\r\n    } // end of method IOptionMonad`2::M\r\n\r\n} // end of class IOptionMonad`2\r\n```\r\n"
      },
      {
        "user": "jcouv",
        "created_at": "2023-06-27T17:09:36Z",
        "body": "Thanks for confirming the issue. Assigned to @jjonescz to try and fix in .NET 8 timeframe since he's working in the area with `ref readonly` feature."
      },
      {
        "user": "jcouv",
        "created_at": "2023-06-27T17:16:26Z",
        "body": "Moved it back to @AlekseyTs since he's already invested in the investigation and is working on a fix already."
      }
    ]
  },
  {
    "number": 68661,
    "title": "Expected value of GetEnclosingSymbol for PrimaryConstructorBaseTypeSyntax",
    "created_at": "2023-06-16T16:58:24Z",
    "closed_at": "2023-06-19T12:31:12Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68661",
    "body": "Currently `SemanticModel.GetEnclosingSymbol(node.SpanStart)` returns the containing namespace symbol when called on the primary base initializer:\r\n\r\n```C#\r\nclass C(int X) : $$B(X);\r\n```\r\n\r\nIs it intended? I'd expect the method to return the symbol of the primary constructor of `C` since `B(X)` is a base initializer call that's part of the primary constructor body.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68661/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2023-06-16T20:38:53Z",
        "body": "Question for @AlekseyTs "
      },
      {
        "user": "AlekseyTs",
        "created_at": "2023-06-19T12:31:07Z",
        "body": "I do not expect ```PrimaryConstructorBaseTypeSyntax``` to get any special treatment here. It is a base clause as any other and it doesn't represent a call. Arguments, however, represent arguments passed to the base in context of the primary constructor, ```GetEnclosingSymbol``` returns the primary constructor for them, I think we have tests for that.   "
      }
    ]
  },
  {
    "number": 68609,
    "title": "`[MaybeNull]` does not work for parameters",
    "created_at": "2023-06-14T11:59:56Z",
    "closed_at": "2023-06-14T16:33:46Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68609",
    "body": "**Version Used**: 4.6.0-2.23152.6 (1314d090)\r\n\r\n**Steps to Reproduce**:\r\nConsider the following program:\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\n#nullable enable\r\n\r\nvoid Run([MaybeNull] string s)\r\n{\r\n    Console.WriteLine(s.Length);\r\n}\r\n```\r\n\r\n**Diagnostic Id**: CS8321\r\n\r\n**Expected Behavior**: CS8321 gets raised in line 7.\r\n\r\n**Actual Behavior**: No warning is emitted. I also tried using `[param: MaybeNull]`, but that made no difference.\r\n\r\nThe documentation for `MaybeNull` states \"Specifies that an output may be null even if the corresponding type disallows it.\" and I am confused by the \"output\" phrasing, however the `AttributeTargets` also specify parameters, so I would expect it to work like in my example above.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68609/comments",
    "author": "CollinAlpert",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-06-14T16:33:42Z",
        "body": "`MaybeNull` is a postcondition attribute.  it tells the compiler something about a value *after* something has happened (in this case, after `Run` has been called.  It is the caller that will learn something.\r\n"
      },
      {
        "user": "CollinAlpert",
        "created_at": "2023-06-15T11:15:05Z",
        "body": "I see, thanks for the explanation. Does an attribute exist to achieve my use case?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-06-15T12:26:53Z",
        "body": "It's not exactly clear to me what semantics you want. But I imagine that you could just write `string? s` here too get it. "
      }
    ]
  },
  {
    "number": 68163,
    "title": "Operator '.' cannot be applied to operand of type 'void'\t",
    "created_at": "2023-05-11T08:16:05Z",
    "closed_at": "2023-05-11T14:23:40Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68163",
    "body": "  public ActionResult ToplamPersonel()\r\n        {\r\n            var toplamSayis = DepartmanContext.DepartmanPersonelSayilariniGetir().ToList();\r\n            ViewBag.Departmanlari = toplamSayis;\r\n       return View();\r\n        } \r\n\r\nHello how can i solve this error i will be glad if you give a quick answer\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68163/comments",
    "author": "GRALZ",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-05-11T14:23:40Z",
        "body": "One of the things you are dotting off of is a void -returning method.  You are but allowed to do that :-)"
      }
    ]
  },
  {
    "number": 67764,
    "title": "Roslyn IDE is flagging Enum objects in a inheriting c# files as an error.",
    "created_at": "2023-04-12T00:51:30Z",
    "closed_at": "2023-05-10T20:44:10Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/67764",
    "body": "Hi,\r\n\r\nI'm trying to reference a Enum created in the test.dll file.\r\n\r\nThe Enum \"EDKPivotType\" was created in the file \"PathToMyCompiledScript\\test.cs\".\r\nThe file \"test.cs\" compile and create the test.dll file OK.\r\n\r\nIn the code snippet below (which consumes file test.dll) intellisense recognize the enum \"EDKPivotType\" and it shows all the enum selections associated with it. However, the default editor used to demonstrate RoslynPad 17 (4.4.0) underlines the enum variable EDKPivotType in RED. The error is: CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Nevertheless, intellisence paints this enum with a foreground color of green. Reference to System.Private.CoreLib.dll is embedded in the Roslyn  IDE. \r\n\r\n\r\n**Version Used**: \r\nAlthough I'm using RoslynPad 17, Version 4.4.0, the Roslyn real-time debugging is mis flagging the enum line.\r\n\r\n**Steps to Reproduce**:\r\nCreate a CS file with an Enum. Create a second file to consume that enum, like above.\r\n\r\n**Expected Behavior**:\r\nThe sample script above should compile error free.\r\n\r\n**Actual Behavior**:\r\nSee opening comment.\r\n\r\n\r\nDevelopment Package:\r\nRoslynPad 17, 4.4.0\r\nWindows 11\r\nVS 2022 17.5.3\r\n\r\n**Diagnostic Id**:\r\nIf this is a report about a bug in an analyzer, please include the diagnostic if possible (e.g. `\"IDE0030\"`).\r\nThe error is in the GUI display as stated above. It's a pre-build error during design-time.\r\n\r\nThank you for your time and effort.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/67764/comments",
    "author": "kwcoffee1",
    "comments": [
      {
        "user": "dotnet-issue-labeler[bot]",
        "created_at": "2023-04-12T00:51:34Z",
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label."
      },
      {
        "user": "kwcoffee1",
        "created_at": "2023-04-12T00:59:55Z",
        "body": "I think the labels are: Visual Studio 2022; Roslyn; RoslynPad; Roslyn Compiler; .Net 7.0"
      },
      {
        "user": "jcouv",
        "created_at": "2023-04-14T16:14:08Z",
        "body": "@kwcoffee1 Based on your description, here's what I suspect is going on:\r\nYou compiled `test.dll` referencing some version of the core library (that contains `System.Enum`). Then you try to use/reference `test.dll` in a second compilation, and you get \"CS0012: The type 'Enum' is defined in an assembly that is not referenced.\" when you try to build that.\r\nThis indicates that your second project/compilation is not referencing the same core library that you used to build `test.dll`.\r\nThis causes a compilation error, and as a side-effect the IDE also does not recognize your `enum` type as an `enum`.\r\n\r\nHow are you building both projects? Are you trying to manually cook up `csc.exe` command-lines? \r\nThe recommended way to build modern C# projects (ie. on .NET Core) is to use csproj and MSBuild. If that's what you're doing, you could share a binary log (produced by `dotnet build -bl`) so we can take a look. "
      },
      {
        "user": "kwcoffee1",
        "created_at": "2023-04-18T13:54:02Z",
        "body": "Thank you for your quick response. So, for the delay on my part.\r\n\r\nYou inference is correct. The user dynamically creates a module test.dll to be consumed by another dynamically create module.\r\nThe test modules dependences are created and loaded as follows:\r\n\r\n```\r\n    private static string AppPath\r\n    {\r\n       get                                               //** This is how I find the bin folder in the main project to load supporting modules.\r\n        {\r\n            string main = \"CoffeeBot_DeskTop\"; \r\n            string dir = Directory.GetCurrentDirectory();\r\n            int i = dir.IndexOf(main) + main.Length;\r\n\r\n       #if DEBUG\r\n            return Path.Combine(dir.Substring(0, i),\r\n                \"CoffeeBot_DeskTop\\\\bin\\\\Debug\\\\net7.0-windows\\\\\"); \r\n      #else\r\n            return Path.Combine(dir.Substring(0, i),\r\n                \"CoffeeBot_DeskTop\\\\bin\\\\Release\\\\net7.0-windows\\\\\");\r\n     #endif\r\n        }\r\n    }\r\n\r\n    private static IEnumerable<MetadataReference> DefaultReferences()\r\n    {\r\n        // Find the Directory root by one of it's objects.\r\n        var corePath = Path.GetDirectoryName(typeof(object).Assembly.Location) +\r\n                            Path.DirectorySeparatorChar;\r\n        var deskPath = Path.GetDirectoryName(typeof(MessageBox).Assembly.Location) +\r\n                            Path.DirectorySeparatorChar;\r\n\r\n        IEnumerable<string> DLLs = new[]\r\n        {\r\n            AppPath + \"API.dll\",\r\n            AppPath + \"Prism.dll\",\r\n            AppPath + \"Acquisition.dll\",\r\n            AppPath + \"Infrastructure.dll\",\r\n            AppPath + \"CoffeeBot_DeskTop.dll\",\r\n            AppPath + \"Skender.Stock.Indicators.dll\",\r\n\r\n            corePath + \"System.dll\",\r\n            corePath + \"mscorlib.dll\",\r\n            corePath + \"System.Core.dll\",\r\n            corePath + \"System.Linq.dll\",\r\n            corePath + \"System.Runtime.dll\",\r\n            corePath + \"Microsoft.CSharp.dll\",\r\n            corePath + \"System.Reflection.dll\",\r\n            corePath + \"System.Collections.dll\",\r\n            corePath + \"System.Globalization.dll\",\r\n            corePath + \"System.Net.Primitives.dll\",\r\n            corePath + \"System.Private.CoreLib.dll\",        //** Am loading it here this is required\r\n            corePath + \"System.Linq.Expressions.dll\",\r\n            corePath + \"System.Collections.Concurrent.dll\",\r\n            corePath + \"System.Collections.NonGeneric.dll\",\r\n            corePath + \"System.Text.RegularExpressions.dll\",\r\n            corePath + \"System.ComponentModel.Primitives.dll\",\r\n\r\n            deskPath + \"PresentationCore.dll\",\r\n            deskPath + \"PresentationFramework.dll\",\r\n        };\r\n\r\n        var References = new List<MetadataReference>();\r\n\r\n        foreach (var dll in DLLs)\r\n        {\r\n            References.Add(AssemblyMetadata.CreateFromFile(dll).GetReference());\r\n        };\r\n\r\n        return References;\r\n    }\r\n\r\n    // Creating these defaults are redundant and are not required\r\n    private static readonly IEnumerable<string> DefaultNamespaces =\r\n        new[]\r\n        {\r\n            \"API\",\r\n            \"System\",\r\n            \"System.IO\",\r\n            \"System.Net\",\r\n            \"System.Linq\",\r\n            \"System.Text\",\r\n            \"Prism.Events\",\r\n            \"Infrastructure\",\r\n            \"System.Windows\",\r\n            \"System.Collections\",\r\n            \"Infrastructure.Enums\",\r\n            \"Skender.Stock.Indicators\",\r\n            \"System.Collections.Generic\",\r\n            \"System.Collections.ObjectModel\",\r\n            \"System.Text.RegularExpressions\",\r\n        };\r\n\r\n\r\n     //****************  I’m compiling as so:\r\n\r\n        var compilation = CSharpCompilation.Create(\r\n            codeAssemblyFile,\r\n            syntaxTrees: Trees,\r\n            references: DefaultReferences(),\r\n            options: DefaultCompilationOptions);\r\n\r\n```\r\n\r\nI then run roslynpad to create even more modules.  But it appears that the RoslynPad is loading a System.Private.CoreLib.dll from a difference version.\r\n"
      },
      {
        "user": "kwcoffee1",
        "created_at": "2023-04-18T17:56:33Z",
        "body": "PS: I use the dll file that's emitted to compilation file dllFile.\r\n\r\n        string codeAssemblyFile = Path.GetRandomFileName();\r\n\r\n        var compilation = CSharpCompilation.Create(\r\n            codeAssemblyFile,\r\n            syntaxTrees: Trees,\r\n            references: DefaultReferences(),\r\n            options: DefaultCompilationOptions);\r\n\r\n        // Emit this memory code module to a dll in the user folder.\r\n        var DLLName = file1ToCompile + \".dll\";\r\n        var dllFile = new FileStream(DLLName, FileMode.OpenOrCreate);\r\n        EmitResult result = compilation.Emit(dllFile);\r\n"
      },
      {
        "user": "jcouv",
        "created_at": "2023-05-10T20:44:10Z",
        "body": "Thanks for confirming the issue comes from the references given to the compiler. I'll go ahead and close this as there doesn't appear to be a problem with the compiler behavior. Thanks"
      },
      {
        "user": "kwcoffee1",
        "created_at": "2023-05-16T19:29:20Z",
        "body": "Thank you for opening the issue with the right ticket tags. I would like to know if a workaround currently exist.\r\nLike, loading the System.Private.CoreLib.dll assembly Roslyn is expecting or tell Roslyn to use the system default assembly location?  Thanks again"
      }
    ]
  },
  {
    "number": 67710,
    "title": "params for ValueType array",
    "created_at": "2023-04-09T04:55:07Z",
    "closed_at": "2023-04-11T03:07:02Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/67710",
    "body": "```c#\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Test(\"1\", \"2\", \"3\");\r\n        Test(1, 2, 3);\r\n        string[] strs = { \"1\", \"2\", \"3\" };\r\n        int[] ints = { 1, 2, 3 };\r\n        Test(strs);\r\n        Test(ints);\r\n        Console.ReadKey();\r\n    }\r\n\r\n    public static void Test(params object[] args)\r\n    {\r\n        Console.WriteLine(args.Length + \" : \" + string.Concat(args));\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\n3 : 123\r\n3 : 123\r\n3 : 123\r\n1 : System.Int32[]\r\n```\r\n\r\nBug or expected?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/67710/comments",
    "author": "CreateAndInject",
    "comments": [
      {
        "user": "svick",
        "created_at": "2023-04-09T10:24:59Z",
        "body": "This is expected. `string[]` is convertible to `object[]`, thanks to array covariance. But that only works for reference types, which is why `int[]` is not convertible to `object[]`. `int[]` is still convertible to `object`, so it's interpreted as the `params object` argument, not as a `object[]` argument."
      },
      {
        "user": "CreateAndInject",
        "created_at": "2023-04-09T18:17:26Z",
        "body": "But why `ValueType[]` isn't convertible to `object[]` by design like `ReferenceType[]`?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-04-10T00:23:38Z",
        "body": "Because they have different representations in memory. Say you have an int[], that's an array of 32bit integers. If you have a reftype[] then that's an array of pointers. "
      }
    ]
  },
  {
    "number": 66557,
    "title": "Variables captured in a lambda and in a local function are getting different treatment in DefiniteAssignmentPass",
    "created_at": "2023-01-26T16:04:06Z",
    "closed_at": "2024-09-30T20:54:08Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66557",
    "body": "```\r\n        private void ReportUnassignedIfNotCapturedInLocalFunction(Symbol symbol, SyntaxNode node, int slot, bool skipIfUseBeforeDeclaration = true)\r\n        {\r\n            // If the symbol is captured by the nearest\r\n            // local function, record the read and skip the diagnostic\r\n            if (IsCapturedInLocalFunction(slot))\r\n            {\r\n                RecordReadInLocalFunction(slot);\r\n                return;\r\n            }\r\n\r\n            ReportUnassigned(symbol, node, slot, skipIfUseBeforeDeclaration);\r\n        }\r\n```\r\n\r\nThis creates observable differences for region analysis. For example, in DataFlowsIn",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66557/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2023-02-14T17:02:41Z",
        "body": "Thought this was by design though as we consider the invocation of the local function when determining definite assignment of captured locals. Same is not true for lambdas.\r\n\r\n@agocke "
      },
      {
        "user": "agocke",
        "created_at": "2023-02-14T17:44:43Z",
        "body": "I'd have to see an example, but Jared's directionally right. For instance, in the following code\r\n\r\n```C#\r\nvoid M()\r\n{\r\n    int i;\r\n\r\n    void Local()\r\n    {\r\n        i++; // i is considered definitely assigned here, as Local is considered unreachable\r\n    }\r\n}\r\n```\r\n\r\nThis could create some unintuitive results in the region analysis if the region contains a local function definition, but not a use. Intuitively, the definite assignment of local function captured variables happens at the local function call site, not at the variable use site."
      },
      {
        "user": "jcouv",
        "created_at": "2023-04-15T04:46:31Z",
        "body": "@AlekseyTs You mentioned this has observable result on region analysis, could you provide an example? For purpose of triage, I'm not sure if this is a bug or by-design."
      },
      {
        "user": "jcouv",
        "created_at": "2023-05-09T18:46:43Z",
        "body": "Assigned to @AlekseyTs and milestone=Backlog for clarification (confirm whether this is by-design or a bug). Feel free to move to an earlier milestone as needed."
      },
      {
        "user": "AlekseyTs",
        "created_at": "2024-09-30T20:54:08Z",
        "body": "I am satisfied with Andy's response"
      }
    ]
  },
  {
    "number": 66442,
    "title": "Cannot create nuint to UInt32 conversion in custom CoreLib",
    "created_at": "2023-01-17T18:08:24Z",
    "closed_at": "2024-07-22T13:40:41Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66442",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Class1.cs with following content\r\n```csharp\r\nnamespace System\r\n{\r\n    public class Object\r\n    {\r\n        \r\n    }\r\n\r\n    public readonly struct UIntPtr\r\n    {\r\n        // error CS0556: User-defined conversion must convert to or from the enclosing type\r\n        public static explicit operator nuint(uint value) => checked((nuint)value);\r\n    }\r\n\r\n    public class Attribute { }\r\n    public class String { }\r\n    public abstract class ValueType { }\r\n    public struct Void { }\r\n    public struct UInt32 { }\r\n\r\n    namespace Runtime.Versioning\r\n    {\r\n        public class TargetFrameworkAttribute : Attribute\r\n        {\r\n            public TargetFrameworkAttribute(string name)\r\n            {\r\n            }\r\n\r\n            public string FrameworkDisplayName { get; set; }\r\n        }\r\n    }\r\n\r\n    namespace Reflection\r\n    {\r\n        class Dummmy { }\r\n    }\r\n}\r\n```\r\n2. Create nuintissue.csproj with following content\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <ImplicitUsings>disable</ImplicitUsings>\r\n\r\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n    <NoStdLib>true</NoStdLib>\r\n    <NoConfig>true</NoConfig>\r\n    <IsCoreAssembly>true</IsCoreAssembly>\r\n    <RuntimeMetadataVersion>v4.0.30319</RuntimeMetadataVersion>\r\n    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n3. Run `dotnet build`\r\n\r\n**Expected Behavior**:\r\n\r\nNo compilation error\r\n\r\n**Actual Behavior**:\r\n```\r\nerror CS0556: User-defined conversion must convert to or from the enclosing type\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66442/comments",
    "author": "kant2002",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2023-01-20T22:17:58Z",
        "body": "I think this is by-design.\r\nIn frameworks that don't have the `RuntimeFeature.NumericIntPtr` feature flag, `UIntPtr` and `nuint` are not considered identical.\r\nYou have two possible solutions:\r\n1. change the definition of the conversion operator to use `UIntPtr` and `UInt32` instead of corresponding built-in type syntax (`nuint` and `uint`): `public static explicit operator UIntPtr(UInt32 value)`\r\n2. add the `RuntimeFeature.NumericIntPtr` feature flag (after that release we do consider the two types to be strictly equivalent)\r\n\r\nThe test below shows that both of those solutions work.\r\nTagging @cston (who worked on native integers) in case anything to add.\r\n\r\n```\r\n        [Fact]\r\n        public void TODO2()\r\n        {\r\n            var src = \"\"\"\r\nnamespace System\r\n{\r\n    public class Object\r\n    {\r\n\r\n    }\r\n\r\n    public readonly struct UIntPtr\r\n    {\r\n        // error CS0556: User-defined conversion must convert to or from the enclosing type\r\n        public static explicit operator nuint(uint value) => checked((nuint)value);\r\n    }\r\n\r\n    public class Attribute { }\r\n    public class String { }\r\n    public abstract class ValueType { }\r\n    public struct Void { }\r\n    public struct UInt32 { }\r\n\r\n    namespace Runtime.Versioning\r\n    {\r\n        public class TargetFrameworkAttribute : Attribute\r\n        {\r\n            public TargetFrameworkAttribute(string name)\r\n            {\r\n            }\r\n\r\n            public string FrameworkDisplayName { get; set; }\r\n        }\r\n    }\r\n\r\n    namespace Reflection\r\n    {\r\n        class Dummmy { }\r\n    }\r\n}\r\n\"\"\";\r\n            var comp = CreateEmptyCompilation(src);\r\n            comp.VerifyDiagnostics(\r\n                // (11,41): error CS0556: User-defined conversion must convert to or from the enclosing type\r\n                //         public static explicit operator nuint(uint value) => checked((nuint)value);\r\n                Diagnostic(ErrorCode.ERR_ConversionNotInvolvingContainedType, \"nuint\").WithLocation(11, 41)\r\n                );\r\n\r\n            var runtimeFeatures = \"\"\"\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    public static class RuntimeFeature\r\n    {\r\n        public const string NumericIntPtr = \"NumericIntPtr\";\r\n    }\r\n}\r\n\"\"\";\r\n            comp = CreateEmptyCompilation(src + runtimeFeatures);\r\n            comp.VerifyDiagnostics();\r\n\r\n            var src2 = \"\"\"\r\nnamespace System\r\n{\r\n    public class Object\r\n    {\r\n\r\n    }\r\n\r\n    public readonly struct UIntPtr\r\n    {\r\n        // error CS0556: User-defined conversion must convert to or from the enclosing type\r\n        public static explicit operator UIntPtr(UInt32 value) => checked((nuint)value);\r\n    }\r\n\r\n    public class Attribute { }\r\n    public class String { }\r\n    public abstract class ValueType { }\r\n    public struct Void { }\r\n    public struct UInt32 { }\r\n\r\n    namespace Runtime.Versioning\r\n    {\r\n        public class TargetFrameworkAttribute : Attribute\r\n        {\r\n            public TargetFrameworkAttribute(string name)\r\n            {\r\n            }\r\n\r\n            public string FrameworkDisplayName { get; set; }\r\n        }\r\n    }\r\n\r\n    namespace Reflection\r\n    {\r\n        class Dummmy { }\r\n    }\r\n}\r\n\"\"\";\r\n            comp = CreateEmptyCompilation(src2);\r\n            comp.VerifyDiagnostics(\r\n                );\r\n\r\n        }\r\n```"
      },
      {
        "user": "kant2002",
        "created_at": "2023-01-21T03:03:53Z",
        "body": "Thanks a lot, that unblocks me and I really should be looking on `RuntimeFeature` class more in the future."
      },
      {
        "user": "kant2002",
        "created_at": "2023-01-21T04:21:41Z",
        "body": "@jcouv same setup with `RuntimeFeature.NumericIntPtr` added.\r\n\r\nIf  I add this line \r\n\r\n```csharp\r\npublic static bool operator ==(nint value1, nint value2) => value1 == value2;\r\n```\r\n\r\nI receive `error CS0563: One of the parameters of a binary operator must be the containing type` which at this point also strange"
      },
      {
        "user": "jcouv",
        "created_at": "2023-01-22T10:08:55Z",
        "body": "You'll need to provide the complete snippet to get any useful advice. The operator you provided can't work in the code snippet in OP (which doesn't define `IntPtr`)."
      }
    ]
  },
  {
    "number": 63240,
    "title": "Why can't use the same name for Nullable Type",
    "created_at": "2022-08-05T19:38:54Z",
    "closed_at": "2022-08-05T20:13:52Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/63240",
    "body": "Seems C# compiler isn't smart enough, there should not be conflict\r\n```C#\r\nnamespace Test\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            if (Way is Way.A) // right\r\n            {\r\n\r\n            }\r\n\r\n            if (Kind is Kind.A) // wrong, must be : if (Kind is Test.Kind.A)\r\n            {\r\n\r\n            }\r\n        }\r\n\r\n        static Way Way { get; set; }\r\n\r\n        static Kind? Kind { get; set; }\r\n    }\r\n\r\n    enum Way { A, B, C }\r\n\r\n    enum Kind { A, B, C }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/63240/comments",
    "author": "CreateAndInject",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-08-05T20:13:52Z",
        "body": "The primary reason for this is that the spec simply doesn't allow for it.  SPecifically, for it to be ok to access a type *and/or* member with a particular name, then the names must match.  e.g. `Way` the type name and `Way` the property name exactly match.  For the `Kind?` version, the type name is `Nullable<Kind>` which doesn't match `Kind`.  \r\n\r\nIt certainly seems somewhat intuitive that this should work though.  So best would be to look for an existing discussion for this on dotnet/csharplang.  If you can't find one, open a new discussion about the idea.  Thanks!"
      }
    ]
  },
  {
    "number": 63024,
    "title": "IDE0047 is reported even though option is set to 'always_for_clarity'",
    "created_at": "2022-07-28T19:12:29Z",
    "closed_at": "2024-10-25T05:57:48Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Feature - IDE0047"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/63024",
    "body": "**Version Used**: \r\nVersion 17.2.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Configure the following option in **.editorconfig**:\r\n`dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity`\r\n\r\n2. Compile the following line:\r\n`var x = (10 / 2) % 5;`\r\n\r\n**Expected Behavior**:\r\n\r\n**IDE0047** is not reported as **dotnet_style_parentheses_in_arithmetic_binary_operators** is set to **always_for_clarity**.\r\n\r\n**Actual Behavior**:\r\n\r\nIDE0047: Parentheses can be removed\r\n\r\nWhile it's correct that the parentheses can be removed, the diagnostic should not be produced when the aforementioned option is set to **always_for_clarity**.\r\n\r\nRemoving the parentheses results in the following StyleCop diagnostic:\r\n`SA1407: Arithmetic expressions should declare precedence`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/63024/comments",
    "author": "drieseng",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-07-28T21:53:10Z",
        "body": "There no clarification here.  The parentheses are operators that have the same precedence. e.g. all of these are in the `OperatorPrecedence.Multiplicative` class.  \r\n\r\n```\r\n                case SyntaxKind.MultiplyExpression:\r\n                case SyntaxKind.DivideExpression:\r\n                case SyntaxKind.ModuloExpression:\r\n                    return Precedence.Multiplicative;\r\n```\r\n\r\nWe define clarity as the precedence actually being different, so a cursory reading of applying the operators left-to-right woudl be incorrect.  e.g.: `a + (b * c)`.  These parentheses are not actually necessary (as `*` has *different* and *higher* precedence).  But hte parentheses are still needed for clarity as someone might interpret the left to right reading of `a + b * c` as meaning `(a + b) * c`. \r\n\r\nIn your case there is no precedence issue, so a left-to-right reading is correct.  e.g. if you have `10 / 2 % 5` and you interpret that as `(10 / 2) % 5` then you're interpreting correctly.\r\n\r\n--\r\n\r\nNote: if you have `10 / (2 % 5)` then nothing will be suggested as those parens actually change the order of evaluation.  This option keeps parentheses for clarity when the order of operations would not change, but users might not realize that.\r\n\r\n--\r\n\r\n> Removing the parentheses results in the following StyleCop diagnostic:\r\n> SA1407: Arithmetic expressions should declare precedence\r\n\r\nNote: that's a stylecop concern.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:57:48Z",
        "body": "Closing out as by design."
      }
    ]
  },
  {
    "number": 62276,
    "title": "inconsistent back and forth rewrite of `SyntaxTree` and (plain) string sources",
    "created_at": "2022-06-30T14:18:10Z",
    "closed_at": "2022-06-30T14:37:47Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62276",
    "body": "**Version Used**: 4.1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nI'm attaching a program that reproduces the issue.  \r\nIn summary, I'm writing the syntax tree of a C# source with top-level statements into another syntax tree where these (previous) top-level statements are inside a `Main` method. The rewritten syntax (and even the source rewritten from this syntax) look fine, but it the tree contains this diagnostics:\r\n\r\n`error CS1547: Keyword 'void' cannot be used in this context`\r\n\r\nHere's the program with the rewriting logic; below it, the output that I get when running it.\r\n\r\n```\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\r\n\r\npublic class T\r\n{\r\n    public static void Main()\r\n    {\r\n        var source = @\"\r\nusing System;\r\nConsole.Write(1);\r\n\";\r\n\r\n        var originalTree = CSharpSyntaxTree.ParseText(source);\r\n        Console.WriteLine($\"<<<{originalTree}>>>\\n\" +\r\n                          $\"number of diagnostics: {originalTree.GetDiagnostics().Count()}\\n\");\r\n\r\n        Console.WriteLine(\"rewritting the tree...\");\r\n        var rewrittenTree = new EmplaceGlobalStatement().Visit(originalTree.GetRoot()).NormalizeWhitespace().SyntaxTree;\r\n        Console.WriteLine($\"<<<{rewrittenTree}>>>\\n\" +\r\n                          $\"number of diagnostics: {rewrittenTree.GetDiagnostics().Count()}\\n\");\r\n\r\n        if (rewrittenTree.GetDiagnostics().Count() == 1)\r\n        {\r\n            Console.WriteLine(rewrittenTree.GetDiagnostics().First() + \"\\n\\n\" + \r\n                              \"rewritting the rewritten tree (with a diagnostics) back to source...\");\r\n            var rewrittenSource = rewrittenTree.ToString();\r\n            var rewrittenSourceTree = CSharpSyntaxTree.ParseText(rewrittenSource);\r\n            Console.WriteLine($\"<<<{rewrittenSourceTree}>>>\\n\" +\r\n                              $\"number of diagnostics: {rewrittenSourceTree.GetDiagnostics().Count()}\\n\");\r\n\r\n        }\r\n    }\r\n}\r\n\r\npublic class EmplaceGlobalStatement : CSharpSyntaxRewriter\r\n{\r\n    private readonly List<StatementSyntax> __stmtsNodes = new();\r\n\r\n    public override SyntaxNode VisitCompilationUnit(CompilationUnitSyntax node)\r\n    {\r\n        var node_P = (CompilationUnitSyntax)base.VisitCompilationUnit(node);\r\n\r\n        if (!__stmtsNodes.Any())\r\n            return node_P;\r\n\r\n        var methDecl =\r\n            SyntaxFactory.MethodDeclaration(\r\n                    SyntaxFactory.ParseTypeName(\"void\"),\r\n                    \"Main\")\r\n                .WithModifiers(\r\n                    SyntaxFactory.TokenList(\r\n                        SyntaxFactory.Token(SyntaxKind.PublicKeyword),\r\n                        SyntaxFactory.Token(SyntaxKind.StaticKeyword)))\r\n                .WithBody(\r\n                    SyntaxFactory.Block(__stmtsNodes));\r\n\r\n        var tyDecl =\r\n            SyntaxFactory.ClassDeclaration(\"Program\")\r\n                .WithModifiers(\r\n                    SyntaxFactory.TokenList(\r\n                        SyntaxFactory.Token(SyntaxKind.InternalKeyword),\r\n                        SyntaxFactory.Token(SyntaxKind.StaticKeyword)))\r\n                .WithMembers(\r\n                    SyntaxFactory.List<MemberDeclarationSyntax>().Add(methDecl));\r\n\r\n        node_P = node_P.AddMembers(tyDecl);\r\n\r\n        return node_P;\r\n    }\r\n\r\n    public override SyntaxNode VisitGlobalStatement(GlobalStatementSyntax node)\r\n    {\r\n        __stmtsNodes.Add(node.Statement);\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nHere's the output.\r\n\r\n```\r\n<<<<\r\nusing System;\r\nConsole.Write(1);\r\n>>>\r\nnumber of diagnostics: 0\r\n\r\nrewritting the tree...\r\n<<<using System;\r\n\r\ninternal static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Console.Write(1);\r\n    }\r\n}>>>\r\nnumber of diagnostics: 1\r\n\r\n(5,20): error CS1547: Keyword 'void' cannot be used in this context\r\n\r\nrewritting the rewritten tree (with a diagnostics) back to source...\r\n<<<using System;\r\n\r\ninternal static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Console.Write(1);\r\n    }\r\n}>>>\r\nnumber of diagnostics: 0\r\n```\r\n ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62276/comments",
    "author": "ltcmelo",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-06-30T14:37:47Z",
        "body": "hey @ltcmelo :)\r\n\r\nAs mentioned yesterday, the issue is with ParseTypeName.  As you can see if you call that directly, it has the diagnostic on it saying that `void` is not valid.  That's because `void` is not a TypeName as far as the language is concerned.  If you want to construct `void`, you'll need to construct a PredefinedTypeSyntax directly like so:\r\n\r\n`SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.VoidKeyword))`\r\n\r\nI hope this helps! :)"
      },
      {
        "user": "ltcmelo",
        "created_at": "2022-06-30T15:34:13Z",
        "body": "Ah… correct, I felt into this trap before. Sure, I need to use `PredefinedTypeSyntax`.\r\n\r\nBut I didn't notice that you touched this topic yesterday, I thought you were referring to the (in)valid identifiers that I previously had, `<`, `>`, and `$` with IL names.\r\n\r\nIn any case, thanks!\r\n"
      }
    ]
  },
  {
    "number": 62052,
    "title": "Generic methods with same name but different type",
    "created_at": "2022-06-21T15:16:27Z",
    "closed_at": "2022-06-21T15:20:10Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62052",
    "body": "Why can't I have two generic methods, which are differentiated by type, one is class type, the other structure type?\r\nIn principle they would never overlap, right?\r\n\r\n**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2022 (64-bit) - Preview\r\nVersion 17.3.0 Preview 2.0\r\nTargetFramework: net6.0\r\n\r\n**Steps to Reproduce**:\r\n```\r\nprivate async Task<T?> SomeMethod<T>(T x) where T : class => await Task.FromResult<T?>(default);\r\n \r\nprivate async Task<T?> SomeMethod<T>(T x) where T : struct => await Task.FromResult<T?>(default);//Error: CS0111\r\n\r\nOr something like that:\r\n\r\nprivate async Task<T?> SomeMethod2<T>() where T : class => await Task.FromResult<T?>(default);\r\n \r\nprivate async Task<T?> SomeMethod2<T>() where T : struct => await Task.FromResult<T?>(default);//Error: CS0111\r\n// Error: CS0111 Type 'XXXXX' already defines a member called 'SomeMethod' with the same parameter type\r\n```\r\n\r\n**Expected Behavior**:\r\nNo compiler errors\r\n\r\n**Actual Behavior**:\r\nCompiler error: CS0111 Type 'XXXXX' already defines a member called 'SomeMethod' with the same parameter type",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62052/comments",
    "author": "rqueizan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-06-21T15:20:10Z",
        "body": "Because the runtime doesn't treat constraints as part of the signature, so they are duplicates there. If you'd want this relaxed, runtime would need some support for this first. Thanks,!"
      }
    ]
  },
  {
    "number": 61960,
    "title": "Mismatch between CSDiagnostic line number in message and location",
    "created_at": "2022-06-16T09:22:50Z",
    "closed_at": "2022-06-17T19:44:12Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61960",
    "body": "I am having a problem evaluating compilation errors generated during CSharpCompilation.Emit.\r\n\r\nI am using roslyn to generate CS code with #line directives containing unique ids of source objects that were used to generate the source following each #line directive as line number.\r\n\r\nNow when there is an error during compilation (i.e. incompatible argument types), I would like to retrieve the unique id of my source object. \r\n\r\n```\r\nvar result = compilation.Emit(\r\n                    peStream: stream\r\n                    , pdbStream: symbolsStream\r\n                    , embeddedTexts: embeddedTexts\r\n                    , options: emitOptions);\r\n\r\n                messages = result.Diagnostics\r\n                    .Where(diagnostic => diagnostic.Severity == DiagnosticSeverity.Error)\r\n                    .Select(diagnostic =>\r\n                    {\r\n                        var location = diagnostic.Location.GetMappedLineSpan();\r\n                        var message = diagnostic.GetMessage(); // message contains the correct \"line number\" (Id)\r\n                        // message is \"generated.cs(640,1): error CS1503: ... and so on\"\r\n                        return (NetworkError)new UnknownNetworkError(\r\n                            nodeId: location.StartLinePosition.Line,  // Problem here! Line should be 640, but is 639.\r\n                            errorMessage: message);\r\n                    })\r\n                    .ToList();\r\n```\r\n\r\nThe generated code looks like that (method names changed):\r\n```\r\n#line 640\r\n            outputRoot.MethodExpectingFoo(child:\r\n\r\n#line 576\r\n            SomeStaticClass.StaticMethodReturningBar()\r\n\r\n#line 640\r\n);\r\n```\r\n\r\nSo can anyone tell me where I can find the actual line number as it is mentioned inside the error message? I am not sure if this is an error or if I am looking in the wrong location (pun intended).\r\n\r\nThank you!",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61960/comments",
    "author": "goebeler",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2022-06-16T16:15:53Z",
        "body": "From what I understood from your example the diagnostic is printed out with line 640 as the location (as expected), but the `diagnostic.Location.GetMappedLineSpan().StartLinePosition.Line` is 639.\r\n\r\nI'm able to repro with the test below. This feels like a 0-based versus 1-based counting situation. I'll let @cston confirm what is expected.\r\n\r\n```\r\n        [Fact]\r\n        public void TODO2()\r\n        {\r\n            var source = \"\"\"\r\nclass C\r\n{\r\n    int M(int x, int y)\r\n    {\r\n#line 42\r\n        return z;\r\n    }\r\n}\r\n\"\"\";\r\n            var comp = CreateCompilation(source);\r\n            comp.VerifyDiagnostics(\r\n                // (42,16): error CS0103: The name 'z' does not exist in the current context\r\n                //         return z;\r\n                Diagnostic(ErrorCode.ERR_NameNotInContext, \"z\").WithArguments(\"z\").WithLocation(42, 16)\r\n                );\r\n\r\n            var diagnostic = comp.GetDiagnostics().Single();\r\n            Assert.Equal(41, diagnostic.Location.GetMappedLineSpan().StartLinePosition.Line); // expected 42\r\n        }\r\n```"
      },
      {
        "user": "goebeler",
        "created_at": "2022-06-17T10:06:48Z",
        "body": "> .. This feels like a 0-based versus 1-based counting situation. I'll let @cston confirm what is expected.\r\n\r\nIf that's the case and I can rely on that, my problem would be solved."
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2022-06-17T18:55:28Z",
        "body": "Yeah, the APIs are all zero-based indexes for line counting."
      },
      {
        "user": "jcouv",
        "created_at": "2022-06-17T19:44:12Z",
        "body": "Thanks @jasonmalinowski for confirming. I'll close this as by-design."
      }
    ]
  },
  {
    "number": 61655,
    "title": "CSharpCodeFixTest test code with Record keyword, give CS0518 error",
    "created_at": "2022-06-02T10:11:49Z",
    "closed_at": "2022-06-03T16:12:29Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61655",
    "body": "**Version Used**: \r\n\r\nVisual Studio 2022(professional) version 17.2.2.\r\n\r\n**Description**\r\n\r\nI create a project that uses VS2022 **\"Analyzer with Code Fix(.NET Standard)\"** template.\r\nI write blow code in '\\<Project\\>.Test'  to test my custom analyzer, but they give me a 'CS0518 '.\r\nBecause my code has the 'Record' keyword.\r\n\r\n```csharp\r\n\r\n[TestMethod]\r\n        public async Task RecordValueObject_CodeFixed()\r\n        {\r\n            var test = @\"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Diagnostics;\r\n\r\nnamespace TodoApp.Domain.Aggregates.Identity\r\n{\r\n    public record UserName(string FirstName, string LastName)\r\n    {    \r\n    };\r\n}\r\n\";\r\n\r\n            var fixtest = @\"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Diagnostics;\r\n\r\nnamespace TodoApp.Domain.Aggregates.Identity\r\n{\r\n    public record UserName(string FirstName, string LastName)\r\n    {\r\n        public static UserName Create()\r\n        {\r\n            return new UserName();\r\n        }\r\n    };\r\n}\r\n\";\r\n\r\n            await VerifyCS.VerifyCodeFixAsync(test, CreateResult(5, 19), fixtest);\r\n        }\r\n\r\n```\r\n\r\nthe `VerifyCS` is created by the template. and i changed some config. the code is blowing:\r\n\r\n```csharp\r\n\r\npublic static partial class CSharpCodeFixVerifier<TAnalyzer, TCodeFix>\r\n        where TAnalyzer : DiagnosticAnalyzer, new()\r\n        where TCodeFix : CodeFixProvider, new()\r\n    {\r\n        public class Test : CSharpCodeFixTest<TAnalyzer, TCodeFix, MSTestVerifier>\r\n        {\r\n           // I change C# version to latest.!!!!!\r\n            public LanguageVersion LanguageVersion { get; set; } = LanguageVersion.Latest;\r\n\r\n            public Test()\r\n            {\r\n                LanguageVersion = LanguageVersion.CSharp10;\r\n                SolutionTransforms.Add((solution, projectId) =>\r\n                {\r\n                    var compilationOptions = solution.GetProject(projectId).CompilationOptions;\r\n                    solution = solution.WithProjectCompilationOptions(projectId, compilationOptions);\r\n\r\n                    // Add MiCake.DDD.Domain reference\r\n                    var project = solution.GetProject(projectId);\r\n                    project = project.AddMetadataReference(MetadataReference.CreateFromFile(typeof(IAggregateRoot).Assembly.Location));\r\n\r\n                    return project.Solution;\r\n                });\r\n            }\r\n\r\n            protected override CompilationOptions CreateCompilationOptions()\r\n            {\r\n                var compilationOptions = base.CreateCompilationOptions();\r\n                return compilationOptions.WithSpecificDiagnosticOptions(\r\n                    compilationOptions.SpecificDiagnosticOptions.SetItems(CSharpVerifierHelper.NullableWarnings));\r\n            }\r\n\r\n            protected override ParseOptions CreateParseOptions()\r\n            {\r\n                return ((CSharpParseOptions)base.CreateParseOptions()).WithLanguageVersion(LanguageVersion);\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n\r\nthe error message:\r\n\r\n```\r\n Diagnostics:\r\n// /0/Test0.cs(12,35): error CS0518: 预定义类型“System.Runtime.CompilerServices.IsExternalInit”未定义或导入\r\nDiagnosticResult.CompilerError(\"CS0518\").WithSpan(12, 35, 12, 44).WithArguments(\"System.Runtime.CompilerServices.IsExternalInit\"),\r\n// /0/Test0.cs(12,53): error CS0518: 预定义类型“System.Runtime.CompilerServices.IsExternalInit”未定义或导入\r\nDiagnosticResult.CompilerError(\"CS0518\").WithSpan(12, 53, 12, 61).WithArguments(\"System.Runtime.CompilerServices.IsExternalInit\"),\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI want to know how can i avoid this error about 'CS0518'. \r\nAnd I found the 'Analyzer with Code Fix(.NET Standard)' template is outdated. the version is .net472. Is there a plan to upgrade it?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61655/comments",
    "author": "uoyoCsharp",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2022-06-02T11:09:55Z",
        "body": "The analyzer project is (and must be) .NET Standard 2.0. Only VSIX is .NET Framework 4.7.2.\r\n\r\nThe error you see is because init-only accessors require runtime support via `IsExternalInit` type.\r\n\r\nYou need to use reference assemblies of a .NET version that contains `IsExternalInit` (.NET 5 or later versions). To use .NET 5, your test should look like this:\r\n\r\n```csharp\r\n\r\n        [TestMethod]\r\n        public async Task RecordValueObject_CodeFixed()\r\n        {\r\n            var test = @\"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Diagnostics;\r\n\r\nnamespace TodoApp.Domain.Aggregates.Identity\r\n{\r\n    public record UserName(string FirstName, string LastName)\r\n    {    \r\n    };\r\n}\r\n\";\r\n\r\n            var fixtest = @\"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Diagnostics;\r\n\r\nnamespace TodoApp.Domain.Aggregates.Identity\r\n{\r\n    public record UserName(string FirstName, string LastName)\r\n    {\r\n        public static UserName Create()\r\n        {\r\n            return new UserName();\r\n        }\r\n    };\r\n}\r\n\";\r\n\r\n            await new VerifyCS.Test\r\n            {\r\n                TestCode = test,\r\n                FixedCode = fixtest,\r\n                ReferenceAssemblies = ReferenceAssemblies.Net.Net50,\r\n            }.RunAsync(); // NOTE: Add `[|` and `|]` around the span where your analyzer is reporting the error.\r\n        }\r\n\r\n```"
      }
    ]
  },
  {
    "number": 61116,
    "title": "CS0539 implementing interface method with T? explicitly",
    "created_at": "2022-05-03T22:29:43Z",
    "closed_at": "2022-05-03T23:02:06Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61116",
    "body": "**Version Used**:  NET6\r\n\r\nGetting a strange CS0539 error trying to implement an interface method explicitly. Not sure if this is by-design, thought I would ask.\r\n\r\n(Nullable context enabled in this scenario.)\r\n\r\nConsider these two interfaces:\r\n\r\n```csharp\r\ninternal interface Interface1\r\n{\r\n\tvoid Method<T>(T value);\r\n}\r\n\r\ninternal interface Interface2\r\n{\r\n\tvoid MethodNullable<T>(T? value);\r\n}\r\n```\r\n\r\n`Interface2` differs in that it has `T?`. My goal is to accept `T`, `null`, or `Nullable<T>`.\r\n\r\nThese interfaces both work fine when implemented directly/implicitly(?):\r\n\r\n```csharp\r\ninternal sealed class TestClass : Interface1, Interface2\r\n{\r\n\tpublic void Method<T>(T value) { }\r\n\r\n\tpublic void MethodNullable<T>(T? value) { }\r\n}\r\n```\r\n\r\nBut for some reason `Interface2.MethodNullable` generates CS0539 when implemented explicitly:\r\n\r\n```csharp\r\ninternal sealed class TestClassExplicit : Interface1, Interface2\r\n{\r\n\tvoid Interface1.Method<T>(T value) { }\r\n\r\n\t// Generates CS0539\r\n\tvoid Interface2.MethodNullable<T>(T? value) { }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo errors.\r\n\r\n**Actual Behavior**:\r\n\r\n* `CS0535 'TestClassExplicit' does not implement interface member 'Interface2.MethodNullable<T>(T?)'`\r\n* `CS0539 'TestClassExplicit.MethodNullable<T>(T?)' in explicit interface declaration is not found among members of the interface that can be implemented`\r\n* `CS0453 The type 'T' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'Nullable<T>'`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61116/comments",
    "author": "CodeBlanch",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-05-03T22:39:26Z",
        "body": "You need to write your explicit interface impl as:\r\n\r\n```c#\r\n    void Interface2.MethodNullable<T>(T? value) where T : default { }\r\n```\r\n\r\nWill add explanation later as to why this is."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-05-03T23:02:00Z",
        "body": "Ok, so this is a fallout of decisions we made back when we added generics in C# 2, and the later how those were impacted by NRT added in C# 8.\r\n\r\nBack in C#2.0 it was possible to write the following:\r\n\r\n```c#\r\ninterface IFoo\r\n{\r\n    void Foo<T>(T t);\r\n    void Foo<T>(T? t) where T : struct;\r\n}\r\n\r\nclass C : IFoo\r\n{\r\n    void IFoo.Foo<T>(T t) { }\r\n    void IFoo.Foo<T>(T? t) { }\r\n}\r\n```\r\n\r\nNote that when declaring these implementations in 'C' that the methods do *not* have constraints written on them.  This was fine for C# 2.0 as there was never any question about what this might mean.  In other words, the compiler could see `void IFoo.Foo<T>(T? t) { }` and know that `T` was only valid with a `struct` constraint, and so it could find `void Foo<T>(T? t) where T : struct;` in the interface to match this as an implementation of.  \r\n\r\nHowever, once we added NRT this became potentially ambiguous.  Consider for example:\r\n\r\n```c#\r\ninterface IFoo\r\n{\r\n    void Foo<T>(T? t);\r\n    void Foo<T>(T? t) where T : struct;\r\n}\r\n\r\nclass C : IFoo\r\n{\r\n    void IFoo.Foo<T>(T? t) { }  //<-- which method does this correspond to?\r\n}\r\n```\r\n\r\nTo match prior semantics, we wanted to ensure that that impl method still match the `Nullable<T>` method in the interface (e.g. the one with `where T : struct` on it).  But how could a user write the impl method and have it match the NRT method (the top method in the interface)?  \r\n\r\nTo solve that, we added `where T : default` to say \"ok, this is a case where T is actually unconstrained, and if you see the `?` that doesn't mean `Nullable<T>`, instead it means `NRT`'s `?`.  "
      },
      {
        "user": "CodeBlanch",
        "created_at": "2022-05-03T23:13:50Z",
        "body": "Thanks for the explanation @CyrusNajmabadi!"
      }
    ]
  },
  {
    "number": 60283,
    "title": "C# compiler should not produce 'CS8618 Non-nullable field must contain a non-null value when exiting constructor' warning with null check in constructor",
    "created_at": "2022-03-20T16:38:24Z",
    "closed_at": "2022-03-21T19:28:45Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered",
      "Feature - Nullable Reference Types"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60283",
    "body": "**Version Used**: \r\n.NET SDK 6.0.201\r\nVisual Studio Community 2022 Ver 17.1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a class called Class1 with an int property called Number.\r\n2. Create a class called Class2 with a non-nullable uninitialized Class1 field called _class1, an int property called Number and a constructor with a non-nullable Class1 parameter called class1.\r\n3. Within the Class2 constructor, assign class1 to _class1 then follow this with an if statement that checks if _class1 is not null and if true, assign the _class1.Number value to Class2's Number property.\r\n4. In the project properties set 'Nullable' to 'Enable' and 'Treat warnings ass errors' to unchecked\r\n\r\n```C#\r\n    public class Class1\r\n    {\r\n        public int Number { get; set; }\r\n    }\r\n\r\n    public class Class2\r\n    {\r\n        private Class1 _class1;\r\n\r\n        public Class2(Class1 class1)\r\n        {\r\n            _class1 = class1;\r\n\r\n            if (_class1 != null)\r\n                Number = _class1.Number;\r\n        }\r\n\r\n        public int Number { get; set; }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\n~~There should be no errors or warnings.~~\r\nThere should be a different warning that relates to the use of the null check as the one that is produced is ambiguous to the actual problem.\r\n\r\n**Actual Behavior**:\r\nThe following warning is produced\r\n```\r\nCS8618 Non-nullable field '_class1' must contain a non-null value when exiting constructor. Consider declaring the field as nullable.\r\n```\r\n\r\nThe warning is also there if _class1 is assigned a new instance of Class1 instead of the passed in value or if _class1 is a property instead of a field.\r\n```\r\n    // This still produces the warning\r\n    //_class1 = class1;\r\n    _class1 = new Class1();\r\n```\r\nThe warning is **not** there if the 'if statement' (null check) is commented out such that the Class2 Number property is assigned the _class.Number value without it.\r\n```\r\n    // This prevents the warning\r\n    //if (_class1 != null)\r\n    Number = _class1.Number;\r\n```\r\n\r\nAdditional:\r\nI'm not sure of this is related or just a Visual Studio thing but when hovering over the right side of `_class1 = class1;` the pop up message says \r\n\r\n> 'class1' is not null here\r\n\r\n but the left side says \r\n\r\n> '_class1' may be null here\r\n\r\neven though it's just been assigned the former's value.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60283/comments",
    "author": "swardinfo",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2022-03-20T16:56:53Z",
        "body": "This is by-design, I think. When you do an explicit (a.k.a pure) null check, the variable/local state is changed to maybe null."
      },
      {
        "user": "swardinfo",
        "created_at": "2022-03-21T05:37:51Z",
        "body": "I've edited my question to say that the warning given should be relevant to the use of the null check rather than no warning at all.\r\n\r\nWhilst using a null check on a value type such as an 'int' will result in the warning\r\n```\r\nThe result of the expression is always 'false' since a value of type 'int' is never equal to 'null' of type 'int?'\r\n```\r\nSomething else would be needed for a non-nullable type as the null check will still produce true or false. Currently, in Visual Studio, when the warning occurs the class identifier is highlighted with the green underline, whereas I would have thought that the actual null check should have it here. I'm guessing this is a Visual Studio and not a compiler issue but it did lead me into a wild goose chase, trying to figure why the argument I'd passed in was null.\r\n\r\n@Youssef1313 \r\n\r\n> This is by-design, I think. When you do an explicit (a.k.a pure) null check, the variable/local state is changed to maybe null.\r\n\r\nI'm not sure that designing in side effects is a good option. Merely observing an object's state should not change it. Imagine you had the following with a bool that's value gets changed simply using it in an if statement. The result could be disastrous.\r\n\r\n```\r\nbool engineHasOil = true;\r\nif (engineHasOil) // Using the if statement changes engineHasOil to false\r\n{\r\n    DriveCar;\r\n    Console.WriteLine(\"Engine seized, pay $20000 to get repaired\");\r\n}\r\n```"
      },
      {
        "user": "Youssef1313",
        "created_at": "2022-03-21T05:50:31Z",
        "body": "> if (engineHasOil) // Using the if statement changes engineHasOil to false\r\n\r\nThis can't happen and isn't related to the original question. The thing that happens is \"*pure* null checks change the variable *state* to maybe-null\".\r\n\r\nThis doesn't change a variable *value*.\r\n\r\nI'm not sure about producing a different warning. You can wait for the compiler team to say their opinion here :)"
      },
      {
        "user": "jcouv",
        "created_at": "2022-03-21T19:28:09Z",
        "body": "@Youssef1313 is correct. This is by-design. The test `if (_class1 != null)` does not affect the value of `_class1` (no write occurs) but the test updates the compiler's knowledge about `_class1`. \r\nBefore the test, the compiler thinks that `_class1` is not-null (because it was assigned with a not-null value in `_class1 = class1;`, based on declaration of `class1`), but after this test `_class1` is considered maybe-null. Why else would the user have written such a test?\r\n\r\nThe motivating scenario for this behavior (pure null tests affecting nullability tracking) is public API methods, which may declare non-nullable parameters but still null-check them:\r\n```\r\npublic void M(string notNullString)\r\n{\r\n    if (notNullString != null)\r\n    {\r\n        throw new AgumentNullException();\r\n    }\r\n    ... dereference notNullString; // oops, this isn't safe (condition above meant to use `==`)\r\n}\r\n\r\npublic void M2(string notNullString)\r\n{\r\n    if (notNullString == null)\r\n    {\r\n        ... dereference notNullString; // oops, this isn't safe\r\n        throw new AgumentNullException();\r\n    }\r\n}\r\n```"
      },
      {
        "user": "RikkiGibson",
        "created_at": "2022-03-21T19:30:36Z",
        "body": "(oops, some of this became redundant while I was writing)\r\n\r\nWhen we say *state* we specifically mean the *flow state* used in the compile-time nullable analysis.\r\n\r\nThe idea here is when you perform a \"pure\" null check, you're telling us that you think the variable could be null. Otherwise, there's no reason to test it. As with all things related to nullable, the runtime behavior isn't affected by this. In practice this has had the effect of catching \"unnecessary\" null tests.\r\n\r\nWe might be able to improve the diagnostic experience here, but it could be tricky, because we would need to track both:\r\n1. the variable's flow state is maybe-null.\r\n2. the variable's flow state became maybe-null because it was used in a pure null test.\r\n\r\n> I'm not sure of this is related or just a Visual Studio thing but when hovering over the right side of `_class1 = class1;` the pop up message says\r\n> \r\n> > 'class1' is not null here\r\n> \r\n> but the left side says\r\n> \r\n> > '_class1' may be null here\r\n> \r\n> even though it's just been assigned the former's value.\r\n\r\nThis happens because the nullable analysis simulates the zero-initialization of class fields. At the start of the constructor, every field behaves as though the `default` value was just assigned to it, unless the constructor delegates to some other constructor e.g. `MyClass() : this(args)`. At the point where `_class1` is evaluated on the left of an `=`, its flow state doesn't yet reflect that the assignment has occurred.\r\n"
      }
    ]
  },
  {
    "number": 59496,
    "title": "#endif is seen as LeadingTrivia of namespace instead of TrailingTrivia of using statement",
    "created_at": "2022-02-11T19:41:36Z",
    "closed_at": "2022-02-11T21:24:29Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/59496",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n1. Using statement surrounded by `#if` preprocessor directive\r\n```\r\nusing System;\r\n#if UNITY\r\nusing Unity\r\n#endif\r\n\r\nnamespace Namespace\r\n{\r\n   public class ClassName \r\n   { \r\n   } \r\n}\r\n```\r\n\r\n2. Analyze code in roslyn with source generator.\r\n3. Use source generator to move `UsingStatementSyntax` inside of the `NamespaceDeclartionSyntax`\r\n\r\n```\r\nConsole.WriteLine( namespaceSyntax.WithUsingStatements( CompilationUnitSyntax.Usings );\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\nnamespace Namespace\r\n{\r\nusing System;\r\n#if UNITY\r\nusing Unity\r\n#endif\r\n   public class ClassName \r\n   { \r\n   } \r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n#endif\r\n\r\nnamespace Namespace\r\n{\r\nusing System;\r\n#if UNITY\r\nusing Unity\r\n   public class ClassName \r\n   { \r\n   } \r\n}\r\n```\r\n\r\nExploring the syntax tree shows the `#endif` trivia is the `LeadingTrivia` of the `NamespaceDeclarationSyntax` and not the `TrailingTrivia` of the `UsingStatementSyntax`. \r\n\r\nI think it was implemented this way to cover the edge case where there is no token in front of the `#if` directive by assuming there will always be a NamespaceDeclaration, UsingStatment or EndOfFile token after it. However this can lead to \"unintended behavior\" as the formatting becomes incorrect when it attaches the `#if` and `#endif` to different tokens and you try moving those tokens around.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/59496/comments",
    "author": "Jake-Rich",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2022-02-11T20:37:50Z",
        "body": "This is by-design. The rule is that trailing trivia doesn't go past end-of-line.\r\nQuoting from @CyrusNajmabadi elsewhere:\r\n\r\n> The general rule (and i would consider deviations to be bugs) is:\r\n> When creating a token, we consume all trivia up to the token start.  then we consume the token contents.  then we consume all trivia up through the first end of line.\r\n> Then that loops.\r\n> \r\n> If you have:\r\n> ```\r\n> // c1\r\n> int foo; // c2\r\n> \r\n> // c3\r\n> string bar; // c4\r\n> ```\r\n> \r\n> `// c1` and the end-of-line after it belong to `int`.  Then the space after `int` belongs to it.\r\n> Then you have `foo` with no trivia, then `;` with trailing trivia `// c2` (and the end-of-line after that)\r\n> Then the `string` has end of line, `// c3`, end of line \r\n> For comments, this has the benefit of being a heuristic that is intuitive most of the time.\r\n> For directives... it's all non-intuitive no matter what we do.\r\n\r\nThe way this applies in your scenario is that the trailing trivia for `Unity` is an end-of-line, and `#endif` (with new lines) is the leading trivia for `namespace`."
      }
    ]
  },
  {
    "number": 58588,
    "title": "Does .NET still support CSI?",
    "created_at": "2021-12-13T21:45:28Z",
    "closed_at": "2022-01-14T18:58:52Z",
    "labels": [
      "Question",
      "Area-Interactive"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58588",
    "body": "CSI is a C# REPL that was supported in older versions of .NET I believe. However, when I run \"csi /version\" I get 3.11.0-4.21403.6 () which looks like it's not using the preview version of .NET 6 I have installed on my computer. Could some form of CSI be added, possibly to the dotnet command? Being able to rapidly test code snippets makes learning C# easier for me and is something I do in Python all the time.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58588/comments",
    "author": "Keithcat1",
    "comments": [
      {
        "user": "buyaa-n",
        "created_at": "2022-01-04T07:58:04Z",
        "body": "Seems it is included in roslyn, transferring"
      },
      {
        "user": "tmat",
        "created_at": "2022-01-05T00:27:18Z",
        "body": "It is included with Visual Studio msbuild: E.g. `C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Roslyn\\csi.exe`"
      },
      {
        "user": "Keithcat1",
        "created_at": "2022-01-14T18:58:52Z",
        "body": "Okay found it. Had to install Visual Studio build tools 2022, didn't quite know that was a thing."
      },
      {
        "user": "ahdung",
        "created_at": "2024-07-10T07:12:54Z",
        "body": "So how to specify dotnet version in csi?"
      }
    ]
  },
  {
    "number": 58120,
    "title": "Using top-level programs results in analyzer failures",
    "created_at": "2021-12-05T16:25:25Z",
    "closed_at": "2021-12-05T23:31:36Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58120",
    "body": "**Version Used**: \r\nMicrosoft.CodeAnalysis v4.0.1\r\n\r\n**Steps to Reproduce**:\r\nConsider the code below, taken from an existing analyzer. This analyzer is designed to report a diagnostic when a developer declares a type without putting it in a namespace:\r\n```c#\r\nprivate static void AnalyzeNamedType(SymbolAnalysisContext context)\r\n{\r\n    var type = (INamedTypeSymbol)context.Symbol;\r\n\r\n    if (type.ContainingNamespace.IsGlobalNamespace && type.Locations.Any())\r\n    {\r\n        context.ReportDiagnostic(Diagnostic.Create(GlobalTypeRule, type.Locations[0], type.Name, type.ContainingAssembly.Name));\r\n    }\r\n}\r\n```\r\n\r\nThe analyzer incorrectly reports a diagnostic in a top-level program: \"Type 'Program' is declared in the global namespace, which does not match with assembly name 'MyCompany.MyProduct'.\". This analyzer should not report a diagnostic for a top-level program, because the user has not declared the Program type. But it should keep reporting a diagnostic when the user has written code for a class named \"Program\" that is in the global namespace.\r\n\r\nAs the author of the analyzer, I'd like to fix this bug. But there does not seem to be an API to distinguish between there, as `WellKnownMemberNames.TopLevelStatementsEntryPointTypeName` equals \"Program\", a location is reported for a symbol that does not exist in the source code and `type.IsImplicitlyDeclared` returns `false`. This doesn't make any sense to me.\r\n\r\n**Expected Behavior**:\r\n`type.Locations.Any()` to return empty and `type.IsImplicitlyDeclared` to return `true`, or another API to determine whether the Program class is compiler-generated or explicitly defined in source code.\r\n\r\n**Actual Behavior**:\r\n`type.Locations.Any()` returns the location of the first statement within the top-level file, which is something else entirely.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58120/comments",
    "author": "bkoelman",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2021-12-05T17:02:06Z",
        "body": "You can use `type.GetMembers(WellKnownMemberNames.TopLevelStatementsEntryPointMethodName)` to determine whether the given symbol is a top-level class.\r\nThe entry-point method name is still unspeakable, ie, you can't declare one with the same name in source. That's why this should work.\r\n\r\nRegarding `IsImplicitlyDeclared`, this is by design."
      },
      {
        "user": "bkoelman",
        "created_at": "2021-12-05T23:20:43Z",
        "body": "Thanks, that works. I looked at `type.MemberNames`, which returns an empty collection."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-12-05T23:31:36Z",
        "body": "Sounds like this has been answered.  Thanks @Youssef1313  :)"
      }
    ]
  },
  {
    "number": 58112,
    "title": "Provide access to semantic model during filtering phase of incremental source generator",
    "created_at": "2021-12-04T12:02:08Z",
    "closed_at": "2021-12-15T07:02:52Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Feature - Source Generators"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58112",
    "body": "I am trying to port my existing Source Generators to the new Incremental Source Generators. Currently I am relying on a bunch of `ISyntaxContextReceiver`s to discover types on which the Source Generators perform actions for. I am also relying on the `SemanticModel` to check attribute's namespaces etc.\r\n\r\nFrom what I understand, the `predicate` passed to `incrementalGeneratorInitializationContext.SyntaxProvider.CreateSyntaxProvider` is supposed to be fast and filter out types which are needed as soon as possible so the generator does not need to perform more work than strictly necessary. \r\nHowever, the predicate does not give me access to the semantic model, only the `transform` function does this. This leaves me with having to filter out unwanted types a step later than I would like, since I only have access to the semantic model then. This doesn't seem ideal, since it doesn't exclude as many types as possible initially and also it feels a bit weird to do filtering in the \"transform\" step.\r\n\r\nI am wondering if this is the \"correct way\" to do it if one needs access to the semantic model and if so, why this design was intentional. Or is it something which wasn't considered because of missing use cases?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58112/comments",
    "author": "CollinAlpert",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2021-12-14T23:09:34Z",
        "body": "@chsienki "
      },
      {
        "user": "chsienki",
        "created_at": "2021-12-15T03:35:25Z",
        "body": "Yes, this is by design and you're using it correctly. \r\n\r\nFrom our experience with the `ISyntaxReceiver` implementations we know that syntax discovery is often the most expensive part of a generator. By splitting it out we can actually be more efficient. The first lambda allows the compiler to know *which* syntax you (might) be using. Most edits result in only a single syntax tree changing (such as typing in a different file in the IDE) we can know that the syntax hasn't changed in the other files, so there is no need to re-walk their trees (which is expensive).\r\n\r\nThe second lambda then lets you analyze the collected nodes with the semantic model. This can't be cached: typing in one file can change the semantic meaning of a node in another file, so any time any syntax changes we have to re-run the transformation for each selected node.\r\n\r\nIn the pathological case of the first lambda just being `return true` we can still be more efficient as we don't have to re-walk the trees of each file in order to run the second lambda where you have access to the semantic model."
      },
      {
        "user": "CollinAlpert",
        "created_at": "2021-12-15T07:02:42Z",
        "body": "That makes sense, thanks a lot for the clarification!"
      }
    ]
  },
  {
    "number": 59219,
    "title": "Unable to use nuget package with native binaries in Source Generator",
    "created_at": "2021-11-17T21:11:48Z",
    "closed_at": "2022-06-27T16:25:38Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/59219",
    "body": "Hi,\r\n\r\nI'm trying to write a source generator that checks out a git project. I understand that when referencing a nuget package from a source generator, you need to add a `TargetPathWithTargetPlatformMoniker` step, like\r\n```xml\r\n<ItemGroup>\r\n    <PackageReference Include=\"LibGit2Sharp\" Version=\"0.26.2\" GeneratePathProperty=\"true\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"GetDependencyTargetPaths\">\r\n    <ItemGroup>\r\n      <TargetPathWithTargetPlatformMoniker Include=\"$(PKGLibGit2Sharp)\\lib\\netstandard2.0\\*.dll\" IncludeRuntimeDependency=\"false\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\nThis works fine with managed dlls, however the LibGit2Sharp package also has a dependency on LibGit2Sharp.NativeBinaries, which contains all the native binaries it needs to actually execute git commands. \r\n\r\nTrying the naive approach of\r\n```xml\r\n<ItemGroup>\r\n    <PackageReference Include=\"LibGit2Sharp\" Version=\"0.26.2\" GeneratePathProperty=\"true\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"LibGit2Sharp.NativeBinaries\" Version=\"2.0.306\" GeneratePathProperty=\"true\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"GetDependencyTargetPaths\">\r\n    <ItemGroup>\r\n      <TargetPathWithTargetPlatformMoniker Include=\"$(PKGLibGit2Sharp)\\lib\\netstandard2.0\\*.dll\" IncludeRuntimeDependency=\"false\" />\r\n      <TargetPathWithTargetPlatformMoniker Include=\"$(PKGLibGit2Sharp_NativeBinaries)\\runtimes\\**\\*\" IncludeRuntimeDependency=\"false\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\ndoesn't work - I get an error on each native binary saying `PE image doesn't contain managed metadata.`\r\n\r\nI also attempted to directly copy the binaries into the output directory with a `<Content Include=\"\">` step, however although thenative binaries were successfully copied, the references to them were still broken - I got a \"could not find assembly\" error\r\n\r\nAny help, guidance, or fixing of this issue would be greatly appreciated!",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/59219/comments",
    "author": "flo-everett-xero",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2022-03-16T17:32:45Z",
        "body": "@chsienki to triage and advise. Thanks"
      },
      {
        "user": "jaredpar",
        "created_at": "2022-06-27T16:25:38Z",
        "body": "> I'm trying to write a source generator that checks out a git project.\r\n\r\nThis is against the rules of source generators. They should never be making on disk changes directly. Doing so violates both the rules of generators and the correctness of overall builds. \r\n\r\nClosing as this is not a supported action for generators. "
      }
    ]
  },
  {
    "number": 57736,
    "title": ".NET 6 release broke switch expression formatting",
    "created_at": "2021-11-12T16:08:33Z",
    "closed_at": "2021-11-18T01:17:01Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57736",
    "body": "Code like\r\n```csharp\r\nvar x = new { p: \"data\" };\r\nvar y = x switch {\r\n    { p: \"123\" } => 1,\r\n    { p: \"data\"} => 2,\r\n    _ => 3,\r\n};\r\n```\r\nall end up on the same line after latest release, like this:\r\n```csharp\r\nvar x = new { p: \"data\" };\r\nvar y = x switch { { p: \"123\" } => 1, { p: \"data\"} => 2,\r\n    _ => 3,\r\n};\r\n```\r\nSince this looks really bad I assume it is a bug. But if it is a breaking change, what setting should we update to get the former style?\r\nWe use .editorconfig from dotnet runtime plus the change: `csharp_new_line_before_open_brace=methods, types`. Do we need to add some new parameter here for switch expressions or patterns? We could not find any setting that made sense for switch/pattern.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57736/comments",
    "author": "maloo",
    "comments": [
      {
        "user": "maloo",
        "created_at": "2021-11-12T16:30:39Z",
        "body": "It looks like `object_collection_array_initializers` is mixed up with switch/patterns."
      },
      {
        "user": "JoeRobich",
        "created_at": "2021-11-12T20:41:47Z",
        "body": "Moving to Roslyn since dotnet-format runs the Roslyn formatter."
      },
      {
        "user": "maloo",
        "created_at": "2021-11-14T13:45:04Z",
        "body": "> Moving to Roslyn since dotnet-format runs the Roslyn formatter.\r\n\r\nWhere can I find the Roslyn issue? Any reference?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-14T16:44:08Z",
        "body": "@maloo this is the issue. "
      },
      {
        "user": "sharwell",
        "created_at": "2021-11-18T01:16:29Z",
        "body": "Support for this **.editorconfig** option was added in #53110. You'll need to add `object_collection_array_initializers` to the list assigned to `csharp_new_line_before_open_brace` (this value covers all expressions and patterns)."
      },
      {
        "user": "maloo",
        "created_at": "2021-11-18T01:27:31Z",
        "body": "@sharwell But a switch expression is not an object initializer array. Adding this flag might fix this code, but it will add a newline in actual object initializer arrays which we explicitly didn't want.\r\nThere seems to be a flag missing for switch expressions. So I guess that should be added or code that is not object initializer should not be touched or generate check errors. I assume the ability to use editor config is that you should be able to use a code style different than the one in runtime.\r\nAnd this worked fine in .NET 5 with dotnet format (--check)"
      },
      {
        "user": "sharwell",
        "created_at": "2021-11-18T16:10:05Z",
        "body": "> But a switch expression is not an object initializer array\r\n\r\nThis is true. We would like to rename the setting value to `expressions`, but there are compatibility concerns and it's an extremely rarely used/modified setting."
      },
      {
        "user": "maloo",
        "created_at": "2021-11-18T16:19:54Z",
        "body": "But you already made a breaking change between .NET 5 and 6. dotnet format (used in CI by many) can no longer be used and there is no other linting option for dotnet.\r\n1) Why do dotnet format (roslyn?) mess with expressions formats when there is no editor config setting for it, why not just leave the code as is until a setting is available.\r\n2) A shared setting called expressions solves nothing, since it basically force everyone to use { on a new line for all types of expressions. I know dotnet/runtime prefers { on a newline. But forcing everyone to do that (with a breaking change), then why have the option to control this setting at all? When you put { on the same line as previous you do that for object initializer too. But that is very different from putting every switch expression on one line just because it happens to use an object pattern matching."
      },
      {
        "user": "sharwell",
        "created_at": "2021-11-18T16:27:53Z",
        "body": "> Why do dotnet format (roslyn?) mess with expressions formats when there is no editor config setting for it, why not just leave the code as is until a setting is available.\r\n\r\n`object_collection_array_initializers` is the setting for expressions. See #39557.\r\n\r\n> A shared setting called expressions solves nothing, since it basically force everyone to use { on a new line for all types of expressions. I know dotnet/runtime prefers { on a newline. But forcing everyone to do that (with a breaking change), then why have the option to control this setting at all?\r\n\r\nThis is a difficult space, because there are a lot of other cases where it's likely the user does want the brace kept on the preceding line. We may add a forced exclusion in the formatter to not move the brace to the preceding line if:\r\n\r\n1. The `{` is the first token of a switch arm\r\n2. The containing `switch` statement or expression spans multiple lines"
      },
      {
        "user": "maloo",
        "created_at": "2021-11-18T16:39:34Z",
        "body": "I would love to see a forces exclusion for these cases, since it would bring it back to compatibility with .NET 5. In the long run I would like more granular settings for expressions. As seen here, there are many types of expressions... and the current setting for object initializers is a good thing, don't change that. Instead add new ones as needed to replace forced exclusions. But I think the forced exclusion would allow people that use { on previous line to use dotnet format and use switch expressions. "
      },
      {
        "user": "sharwell",
        "created_at": "2021-11-18T17:04:59Z",
        "body": "> In the long run I would like more granular settings for expressions.\r\n\r\nWe've had a few requests for this over time. Eventually things settled into two groups:\r\n\r\n1. People who wish to see granular settings expanded to new options, since it's a natural extension of how things exist today\r\n2. People who have attempted to implement and test a granular settings expansion in the formatter\r\n\r\nWe find the group of people who enter (2) give up when they see how overwhelmingly complex this is and become heavily opposed to any attempt to make new formatter options. There are 2<sup>n</sup> configurations to test, many of which are rarely (or never) used, so every added option makes it significantly more likely that future breaking changes accidentally slip in."
      }
    ]
  },
  {
    "number": 57677,
    "title": "How to get ISymbol from CompletionItem",
    "created_at": "2021-11-10T14:32:33Z",
    "closed_at": "2021-11-10T22:55:20Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57677",
    "body": "How do I get `ISymbol` from a `CompletionItem` returned from `completionService.GetCompletionsAsync`?\r\nFor example, `Recommender.GetRecommendedSymbolsAtPositionAsync` provides such information. As I imagine, the `GetCompletionsAsync` list is partially built using `ISymbol`s. Is there way to access them?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57677/comments",
    "author": "yevgeni-zolotko",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-10T22:55:20Z",
        "body": "You cannot.  It's intentionally by design that ISymbol's are not exposed as:\r\n\r\n1. they wouldn't make sense for other languages (like F# and VB)\r\n2. many normal items won't have them.  There's only a loose connection from a completion item to an ISymbol for it.\r\n3. these apis are intended to work cross process.  As such, rich tree/graph-like data cannot be part of it as it wouldn't be feasible at all to serialize that over the wire\r\n4. eventually this will all be through LSP, which takes an even less-symbolic view of these things.\r\n\r\nIf you want symbols, that's exactly what Recommender is for as it's the C#/VB symbol-centric view of things that other features layer on top of :) \r\n"
      }
    ]
  },
  {
    "number": 57575,
    "title": "Improper precedence of or operator in combination with not in pattern matching?",
    "created_at": "2021-11-04T14:52:58Z",
    "closed_at": "2021-11-04T19:49:59Z",
    "labels": [
      "Bug",
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57575",
    "body": "**Version 5**: \r\n\r\n**Steps to Reproduce**:\r\n\r\nSystem.Data.ParameterDirection.Output is not (System.Data.ParameterDirection.Input or System.Data.ParameterDirection.Output) will return false,\r\n\r\nbut \r\nSystem.Data.ParameterDirection.Output is not System.Data.ParameterDirection.Input or System.Data.ParameterDirection.Output will return true\r\n\r\nHave in mind that the pattern and the second operand of the or operator need to be the same for this to be reproduced.\r\n\r\n**Expected Behavior**:\r\nWhat I expected from an or operator is for the not to be applied after the or. However, it seems that without the parentheses, this is not the case. This has led to some nasty bugs in our products.\r\n\r\nI tried ParameterDirection.Output is not ParameterDirection.Input or not ParameterDirection.Output, however it returned true as well. Soo it seems that there is some very very tricky moment with the operator precedence. Could you elaborate in what order are the operators resolved, and what is the reason behind it? Or is this not expected? I surely did not expect it.\r\n\r\n**Actual Behavior**:\r\nWell, I stated it in the steps to reproduce :)\r\n\r\nHave a great day :)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57575/comments",
    "author": "X-7r3em",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-04T19:49:59Z",
        "body": "This is def by design, and matches normal expression precedence.  if you have `!a || b` then that is `(!a) || b` *not* `!(a || b)`.  It would both be a bad breaking change to change this, and also very inconsistent with teh general rules of the language here in the parallel expression side of things.\r\n\r\n> This has led to some nasty bugs in our products.\r\n\r\nNote: if we were to change this, it would certainly introduce nasty bugs.  And even if we had had this formalization originally, it would also have led to nasty bugs as it would be reasonable for people to think that pattern precedence worked like expression precedence :)\r\n\r\n> Could you elaborate in what order are the operators resolved\r\n\r\nIn general, this will be resolved similarly to expressions (though @RikkiGibson can def correct me if i'm wrong).   \r\n\r\nFor `not System.Data.ParameterDirection.Input or System.Data.ParameterDirection.Output`\r\n\r\nFirst, we'll see what `System.Data.ParameterDirection.Input` evaluates to.  Then we'll apply the `not` pattern to that to flip it.  If this results in `true` we won't bother with the `or` part (as we shortcircuit here just like with expressions.  If it results in `false`, we will then evaluated `System.Data.ParameterDirection.Output` and return that as the result.\r\n\r\nDoing this evaluation `System.Data.ParameterDirection.Output` being the thing tested produces:\r\n\r\n`System.Data.ParameterDirection.Output is System.Data.ParameterDirection.Input` is `false`.  We negate that with `not` to `true`.  As such we skip the RHS of hte `or` and just return `true` (which is what you saw when you ran this).\r\n\r\n--\r\n\r\nFor `not (System.Data.ParameterDirection.Input or System.Data.ParameterDirection.Output)`\r\n\r\nWe'll first evaluate `System.Data.ParameterDirection.Input`.  If that is `true`, we can shortcircuit the other side (because of `or`) and return `false` immediately (because we `not` the `true`) value.  If `System.Data.ParameterDirection.Input` is `false`, then we execute the rhs and immediately `not` the result of that.\r\n\r\nDoing this evaluation `System.Data.ParameterDirection.Output` being the thing tested produces:\r\n\r\n`System.Data.ParameterDirection.Output is System.Data.ParameterDirection.Input` is `false`.  So we need to check the RHS of the `or` pattern.\r\n`System.Data.ParameterDirection.Output is System.Data.ParameterDirection.Output` is `true`.  So the value of the `or` pattern is `true`.  We then negate this with `not`, producing a final value of `false` (which is what you saw when you ran this).\r\n\r\n\r\n"
      },
      {
        "user": "X-7r3em",
        "created_at": "2021-11-05T06:50:39Z",
        "body": "Yes, a few hours after I wrote this, I tried some examples, and I came to the same conclusion that it is as you have written :). It is tricky in the begging before you wrap your head around it though. The tricky part is that \"not\" is not an operator on the \"is\" operator, but rather the result of the \"is\" expression. But eh :D "
      }
    ]
  },
  {
    "number": 57533,
    "title": "Inline diagnostics should be delayed until after a user is done typing",
    "created_at": "2021-11-02T23:03:23Z",
    "closed_at": "2024-11-13T22:25:15Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Feature - Inline Errors"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57533",
    "body": "We should consider delaying inline diagnostics to show up after a user is done typing or after the user types a semicolon at the end of the line. It currently gets in the way of typing. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57533/comments",
    "author": "mikadumont",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-02T23:36:18Z",
        "body": "> to show up after a user is done typing\r\n\r\nThere's no way to know when a user is done typing :)  It's not a state with meaning.  After all, any point we might consider 'done' the user might just end up writing new code a moment later.\r\n\r\n>  It currently gets in the way of typing.\r\n\r\nCan you clarify this?  How does it get in the way?  It should not cover the user text at all, and it should only be visible if there is space for it.\r\n\r\nIf we also require things like a semicolon, we're effectively saying: only show me the errors once the code is 'correct' (by some definition of 'correct').  Which means then if there is an error that we don't show inline diag for, the user can be stuck in a situation where they care about what the diag is (so they can fix it), but we never show it.\r\n\r\n\r\n"
      },
      {
        "user": "ryzngard",
        "created_at": "2021-11-03T00:35:15Z",
        "body": "One follow up: does it matter where the diagnostics are showing? At end of line or right side of window? "
      },
      {
        "user": "akhera99",
        "created_at": "2021-11-04T17:44:27Z",
        "body": "If a user's cursor is located on a line with a diagnostic, should we hide the diagnostic until after the cursor has been moved?\r\nIf yes, should that be an option?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-04T19:55:05Z",
        "body": "That feels weird to me as well.  I thought the purpose of htis was so that a user could easily tell (without error list, and without hover) what issue they had with their code.  Say they write something, and then get the squiggle.  Now they want to know what it means.  Having to move off the line seems problematic.  \r\n\r\nIt's also a bit strange that i might see a squiggle with a message, then move my line up to fix it, only to see the message disappear.  If i wanted to read it again once i was on that line, i wouldn't be able to."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-04T19:56:26Z",
        "body": "Have we considered just slowing down how fast these appear to more jive with the idea of: if the user is flowing with code, don't bother them.  HOwever, if they really stop and are potentially waiting on this info, we then pop up after a suitable delay?\r\n\r\nThis is the concept with have with squiggles.  But there, the delay was tuned based on the value vs annoyance of that adornment.  If the value/annoyance ratio is different here, we should consider tuning the delay based on that."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-13T22:25:15Z",
        "body": "Closing out as speculative.  If this needs to happen, we need to put it in a milestone to get it done."
      }
    ]
  },
  {
    "number": 57311,
    "title": "Variables scopes are incorrect",
    "created_at": "2021-10-21T21:05:42Z",
    "closed_at": "2021-10-21T21:10:07Z",
    "labels": [
      "Question",
      "Resolution-External",
      "Area-Language Design",
      "Area-External",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57311",
    "body": "**C# 8.0**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nvar dict = new Dictionary<int, string>();\r\n\r\nif (dict.TryGetValue(1, out var value1))\r\n{\r\n\tif (dict.TryGetValue(2, out var value2))\r\n\t{\r\n\t\tConsole.WriteLine(value2);\r\n\t}\r\n}\r\n\r\n// here\r\nif (dict.TryGetValue(2, out var value2))\r\n{\r\n\tConsole.WriteLine(value2);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNormal compilation\r\n\r\n**Actual Behavior**:\r\n\r\nOn the Hear line, value2 cannot be declared (the same name used in the inner scope above, but the scope cannot be affected on the Here line).",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57311/comments",
    "author": "mikasoukhov",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-10-21T21:10:07Z",
        "body": "This is by design, and is to prevent mistakes where unintentional variable hiding or overwriting occurs. we do not allow this to overlap, just as we do not allow:\r\n\r\n```c#\r\nvar dict = new Dictionary<int, string>();\r\n\r\nif (dict.TryGetValue(1, out var value1))\r\n{\r\n        string value2;\r\n\tif (dict.TryGetValue(2, out value2))\r\n\t{\r\n\t\tConsole.WriteLine(value2);\r\n\t}\r\n}\r\n\r\n// here\r\nstring value2;\r\nif (dict.TryGetValue(2, out value2))\r\n{\r\n\tConsole.WriteLine(value2);\r\n}\r\n```\r\n\r\nAs this is not an issue with the compiler (which Roslyn is responsible for) i'm going to close this.  If you'd like the language to change to allow for this, please open a discussion over at dotnet/csharplang with your thoughts."
      }
    ]
  },
  {
    "number": 56449,
    "title": "DiagnosticAnalyzer's Initialize method not getting called with VS 2019 upgrade",
    "created_at": "2021-09-16T13:30:39Z",
    "closed_at": "2021-09-22T20:37:42Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/56449",
    "body": "**Version Used**: \r\n3.11.0\r\n**Steps to Reproduce**:\r\n\r\n1. Created a .NET Standard 2.0 Class Library project referring to Microsoft.CodeAnalysis, Microsoft.CodeAnalysis.Analyzers and Microsoft.CodeAnalysis.CSharp.Analyzers. \r\n2. Created couple of DiagnosticAnalyzer analyzers overriding Initialize(AnalysisContext context) method and relevant code for analysis.\r\n3. Added reference of this project to a Vsix project based on .NET Framework 4.7.2 and modified the source.extension.vsixmanifest to add Assets \"Microsoft.VisualStudio.MefComponent\" and \"Microsoft.VisualStudio.Analyzer\" along with Prerequisite \"Visual Studio core editor ([16.0,17.0))\" and Install Targets \"Microsoft.VisualStudio.Pro ([16.0, 17.0))\", \"Microsoft.VisualStudio.Community ([16.0, 17.0))\" and \"Microsoft.VisualStudio.Enterprise([16.0, 17.0))\"  \r\n\r\n4. I had created this project using Visual Studios 2019 version 16.10.2.  and the analyzers were working all good. The `public override void Initialize(AnalysisContext context)` method was getting called as so does the registered Actions.\r\n\r\n5. After upgrading Visual Studios 2019 to version 16.11.0, suddenly the DiagnosticAnalyzer has stopped working. I dont see the calls coming to `public override void Initialize(AnalysisContext context)` to any of the analyzers. There is no exception any where which will help me understanding whats the issue. I dont know where and how to debug this issue.\r\n\r\n6. To counter verify, I also downloaded few open source plugins using DiagnosticAnalyzer which i had referred to during building my application.  All those plugins are not working any more as well.\r\n\r\n7. I have again tried running my plugin and other same ones on VS 2019 16.10.0 and they seem to be working there. \r\n\r\n **Expected Behavior**:\r\nWith upgrade to Visual Studios 2019 16.11.0 or higher, the  DiagnosticAnalyzer  workflow should work.\r\n\r\n**Actual Behavior**:\r\nDiagnosticAnalyzer  workflow is working for Visual Studios 2019 16.10.0 but is not working for Visual Studios 2019 16.11.0 or higher",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/56449/comments",
    "author": "abhijitparkhi1983",
    "comments": [
      {
        "user": "abhijitparkhi1983",
        "created_at": "2021-09-20T06:46:22Z",
        "body": "@shanselman  @AArnott @bratsche @radical  any updates around this issue ? \r\nOne update, i tried using Security Code Scan VS 2019 Plugin on the same version 16.11.0 and its working. So here is some reference or some setting which i am missing in the plugin i am working on. "
      },
      {
        "user": "AArnott",
        "created_at": "2021-09-20T14:06:45Z",
        "body": "@abhijitparkhi1983 Please don't @ mention arbitrary people to get traction on an issue. I and at least one other person on your list don't even work on this repo."
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2021-09-20T16:04:59Z",
        "body": "Hi @AArnott  sorry for that. When i hit the @, ur name was seen. So I assumed that you are one of the contributors as well. \r\nGetting traction is not important, resolving this important issue is more important for me. "
      },
      {
        "user": "sharwell",
        "created_at": "2021-09-22T20:37:42Z",
        "body": "Diagnostic analyzers are executed by default in a separate process from Visual Studio. Attaching the debugger to ServiceHub.RoslynCodeAnalysisService.exe (or ServiceHub.RoslynCodeAnalysisServiceS.exe, depending on system factors) will allow breakpoints to be set. There are a few other ways to impact this:\r\n\r\n* For _all_ analyzer debugging purposes, I recommend writing unit tests for the analyzer and debugging those tests via Test Explorer. The experience will be easier, faster, and simpler than debugging inside Visual Studio, and you'll end up with a nice test suite at the end.\r\n* Unchecking **Tools &rarr; Options... &rarr; Text Editor &rarr; C# &rarr; Advanced &rarr; Use 64-bit process for code analysis** will force the analyzers to run in **devenv.exe** instead of a second process\r\n"
      }
    ]
  },
  {
    "number": 55492,
    "title": "Adding doc xml comment breaks indentation of the next line ",
    "created_at": "2021-08-07T11:23:11Z",
    "closed_at": "2021-09-13T18:50:37Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55492",
    "body": "I had a string `docstring` with embedded newlines that I want to set as the multiline xml doc comment for a type `tds`:\r\n\r\n```cs\r\n  var ds = docstring.Split(new char[] { '\\r', '\\n' }, StringSplitOptions.RemoveEmptyEntries);\r\n  tds = tds.WithLeadingTrivia(\r\n      TriviaList(\r\n          Trivia(\r\n              DocumentationCommentTrivia((SyntaxKind.MultiLineDocumentationCommentTrivia, XmlAttributeSyntax, )\r\n              .WithContent(\r\n                  List<XmlNodeSyntax>(\r\n                      new XmlNodeSyntax[] {\r\n                          XmlSummaryElement(\r\n                              List<XmlNodeSyntax>(\r\n                                  ds.Select(x => XmlText(x).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")))\r\n                              )\r\n                          ).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")),\r\n                          XmlText(\"\\n\"),\r\n                      }\r\n                  )\r\n              )\r\n          )\r\n      )\r\n      );\r\n```\r\n\r\nHowever the resulting text, does not have the expected leading whitespace between the XDC and the type:\r\nResulting code:\r\n```cs\r\n    ///<summary>\r\n    ///An experimental API. Do not use it directly. It may be removed or changed in 0.65. Instead, use the JSI API that uses this API internally.\r\n    ///See the `ExecuteJsi` method in `JsiApiContext.h` of the `Microsoft.ReactNative.Cxx` shared project, or the examples of the JSI-based TurboModules in the `Microsoft.ReactNative.IntegrationTests` project.\r\n    ///Note that the JSI is defined only for C++ code. We plan to add the .Net support in future.</summary>\r\npublic struct JsiSymbolRef\r\n    {\r\n        public ulong Data;\r\n    }\r\n```\r\n\r\nNote how `public struct JsiSymbolRef` is at column 0 instead of 4.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55492/comments",
    "author": "asklar",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2021-08-07T11:38:21Z",
        "body": "I think the current behavior is correct. You're replacing the leading trivia with the doc comment. What you should do is to add the trivia you're generating before the existing trivia instead of replacing the existing trivia."
      },
      {
        "user": "asklar",
        "created_at": "2021-08-07T12:30:37Z",
        "body": "Can you clarify how you'd do that? This is what I tried but I get the same results:\r\n\r\n```cs\r\n    var old = tds.GetLeadingTrivia();\r\n    var @new = old.Prepend(Trivia(\r\n                DocumentationCommentTrivia(SyntaxKind.MultiLineDocumentationCommentTrivia)\r\n                .WithContent(\r\n                    List<XmlNodeSyntax>(\r\n                        new XmlNodeSyntax[] {\r\n                            XmlSummaryElement(\r\n                                List<XmlNodeSyntax>(\r\n                                    ds.Select(x => XmlText(x).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")))\r\n                                )\r\n                            ).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")),\r\n                            XmlText(\"\\n\"),\r\n                        }\r\n                    )\r\n                )\r\n            ));\r\n    tds = tds.WithLeadingTrivia(@new);\r\n```"
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-08-07T14:35:49Z",
        "body": "It can help if you post minimal compilable code"
      },
      {
        "user": "asklar",
        "created_at": "2021-08-07T17:09:09Z",
        "body": "@Youssef1313 here:\r\n\r\n```cs\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        using (var sw = new StreamWriter(@\"C:\\temp\\t.cs\", false))\r\n        {\r\n            var docstring = \"Hello\\nworld\\nthis is a string\\n\";\r\n            var ds = docstring.Split(new char[] { '\\r', '\\n' }, StringSplitOptions.RemoveEmptyEntries);\r\n            var tds = ClassDeclaration(\"Foo\");\r\n            var old = tds.GetLeadingTrivia();\r\n            var @new = old.Prepend(Trivia(\r\n                        DocumentationCommentTrivia(SyntaxKind.MultiLineDocumentationCommentTrivia)\r\n                        .WithContent(\r\n                            List<XmlNodeSyntax>(\r\n                                new XmlNodeSyntax[] {\r\n                                    XmlSummaryElement(\r\n                                        List<XmlNodeSyntax>(\r\n                                            ds.Select(x => XmlText(x).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")))\r\n                                        )\r\n                                    ).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")),\r\n                                    XmlText(\"\\n\"),\r\n                                }\r\n                            )\r\n                        )\r\n                    ));\r\n            tds = tds.WithLeadingTrivia(@new);\r\n\r\n\r\n            var ns = NamespaceDeclaration(ParseName(\"Foo\")).AddMembers(tds).NormalizeWhitespace();\r\n            ns.WriteTo(sw);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\nResult:\r\n```cs\r\nnamespace Foo\r\n{\r\n    ///<summary>\r\n    ///Hello\r\n    ///world\r\n    ///this is a string</summary>\r\nclass Foo\r\n    {\r\n    }\r\n}\r\n```"
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-08-07T17:17:21Z",
        "body": "Looks like a `NormalizeWhitespace` bug to me."
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-08-07T17:29:43Z",
        "body": "A hacky approach would be as follows:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\r\n\r\nnamespace ConsoleApp11\r\n{\r\n    using static SyntaxFactory;\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var sw = new StreamWriter(@\"C:\\t.cs\", false))\r\n            {\r\n                var docstring = \"Hello\\nworld\\nthis is a string\\n\";\r\n                var ds = docstring.Split(new char[] { '\\r', '\\n' }, StringSplitOptions.RemoveEmptyEntries);\r\n                var tds = ClassDeclaration(\"Foo\");\r\n                var trivia = TriviaList(Trivia(\r\n                            DocumentationCommentTrivia(SyntaxKind.MultiLineDocumentationCommentTrivia)\r\n                            .WithContent(\r\n                                List<XmlNodeSyntax>(\r\n                                    new XmlNodeSyntax[] {\r\n                                    XmlSummaryElement(\r\n                                        List<XmlNodeSyntax>(\r\n                                            ds.Select(x => XmlText(x).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")))\r\n                                        )\r\n                                    ).WithLeadingTrivia(DocumentationCommentExterior(\"/// \")),\r\n                                    XmlText(\"\\n\"),\r\n                                    }\r\n                                )\r\n                            )\r\n                        ));\r\n                var annotation = new SyntaxAnnotation();\r\n                tds = tds.WithLeadingTrivia(trivia).WithAdditionalAnnotations(annotation);\r\n\r\n                var ns = NamespaceDeclaration(ParseName(\"Foo\")).AddMembers(tds).NormalizeWhitespace();\r\n                var toReplace = (ClassDeclarationSyntax)ns.GetAnnotatedNodes(annotation).Single();\r\n                var whitespaceTrivia = toReplace.GetLeadingTrivia().Where(t => t.IsKind(SyntaxKind.WhitespaceTrivia));\r\n                ns = ns.ReplaceNode(toReplace, toReplace.ReplaceToken(toReplace.Keyword, toReplace.Keyword.WithLeadingTrivia(toReplace.Keyword.LeadingTrivia.AddRange(whitespaceTrivia))));\r\n                ns.WriteTo(sw);\r\n            }\r\n        }\r\n```\r\n\r\nTagging @CyrusNajmabadi to confirm whether this is indeed `NormalizeWhitespace` bug, and if he has a better workaround."
      },
      {
        "user": "sharwell",
        "created_at": "2021-08-11T19:14:27Z",
        "body": "The first step is verifying that the parse tree produced by the compiler for the same input text matches the parse tree produced by `SyntaxFactory`. If the parse trees are not identical, it means the parse tree produced manually using `SyntaxFactory` is not valid, and the output of `NormalizeWhitespace` is undefined."
      },
      {
        "user": "svick",
        "created_at": "2021-08-12T14:32:37Z",
        "body": "As far as I can tell, the problem is here:\r\n\r\n```c#\r\nXmlText(\"\\n\")\r\n```\r\n\r\nThis creates a node containing a token with kind `XmlTextLiteralToken`, when you need `XmlTextLiteralNewLineToken`. You can achieve that by replacing the above code with:\r\n\r\n```c#\r\nXmlText(XmlTextNewLine(\"\\n\", false))\r\n```\r\n\r\nWith this change, the code is formatted properly:\r\n\r\n```c#\r\nnamespace Foo\r\n{\r\n    ///<summary>\r\n    ///Hello\r\n    ///world\r\n    ///this is a string</summary>\r\n    class Foo\r\n    {\r\n    }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 53965,
    "title": "How to get all analyzers rules in a solution?",
    "created_at": "2021-06-09T15:45:58Z",
    "closed_at": "2021-06-11T11:23:01Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53965",
    "body": "Hi!\r\nI have added some analyzer via NuGet in my solution.\r\nHow to get all added analyzer rules from NuGet references?\r\nI need the ID (e.g. CA1001) and descriptions of all my enabled analyzers.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53965/comments",
    "author": "p-bojkowski",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2021-06-09T19:13:32Z",
        "body": "@p-bojkowski can you describe your scenario in more detail? Do you need to get these values programatically or do you just want to see them in a UI?"
      },
      {
        "user": "p-bojkowski",
        "created_at": "2021-06-09T19:23:52Z",
        "body": "@jmarolf I need to code this stuff...."
      },
      {
        "user": "jmarolf",
        "created_at": "2021-06-09T19:26:03Z",
        "body": "In what context? as a console app? as a Visual Studio extension?"
      },
      {
        "user": "p-bojkowski",
        "created_at": "2021-06-09T19:44:12Z",
        "body": "Console  app"
      },
      {
        "user": "p-bojkowski",
        "created_at": "2021-06-10T15:00:12Z",
        "body": "@jmarolf but I can try it 1st in a VS extension."
      },
      {
        "user": "sharwell",
        "created_at": "2021-06-10T15:12:26Z",
        "body": "This data is reported in the binlog with `/p:ReportAnalyzer=true`. The sarif output might have it in JSON form (#37148)."
      },
      {
        "user": "jmarolf",
        "created_at": "2021-06-10T17:47:33Z",
        "body": "Here is a sample console application that can programmatically load a solution and print out all the analyzer Ids used in the solution\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build.Locator\" Version=\"1.4.1\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp.Workspaces\" Version=\"3.9.0\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.VisualBasic.Workspaces\" Version=\"3.9.0\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Workspaces.MSBuild\" Version=\"3.9.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Build.Locator;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\n\r\nnamespace AnalyzerReader\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            // Attempt to set the version of MSBuild.\r\n            var instance = MSBuildLocator.RegisterDefaults();\r\n\r\n            Console.WriteLine($\"Using MSBuild at '{instance.MSBuildPath}' to load projects.\");\r\n\r\n            using var workspace = MSBuildWorkspace.Create();\r\n\r\n            // Print message for WorkspaceFailed event to help diagnosing project load failures.\r\n            workspace.WorkspaceFailed += (o, e) => Console.WriteLine(e.Diagnostic.Message);\r\n\r\n            var solutionPath = args[0];\r\n            Console.WriteLine($\"Loading solution '{solutionPath}'\");\r\n\r\n            // Attach progress reporter so we print projects as they are loaded.\r\n            var solution = await workspace.OpenSolutionAsync(solutionPath, new ConsoleProgressReporter());\r\n            Console.WriteLine($\"Finished loading solution '{solutionPath}'\");\r\n\r\n            // Get all analyzers in the project\r\n            var diagnosticDescriptors = solution.Projects\r\n                .SelectMany(project => project.AnalyzerReferences)\r\n                .SelectMany(analyzerReference => analyzerReference.GetAnalyzersForAllLanguages())\r\n                .SelectMany(analyzer => analyzer.SupportedDiagnostics)\r\n                .Distinct().OrderBy(x => x.Id);\r\n\r\n            Console.WriteLine($\"{nameof(DiagnosticDescriptor.Id),-15} {nameof(DiagnosticDescriptor.Title)}\");\r\n            foreach (var diagnosticDescriptor in diagnosticDescriptors)\r\n            {\r\n                Console.WriteLine($\"{diagnosticDescriptor.Id,-15} {diagnosticDescriptor.Title}\");\r\n            }\r\n        }\r\n\r\n        private class ConsoleProgressReporter : IProgress<ProjectLoadProgress>\r\n        {\r\n            public void Report(ProjectLoadProgress loadProgress)\r\n            {\r\n                var projectDisplay = Path.GetFileName(loadProgress.FilePath);\r\n                if (loadProgress.TargetFramework != null)\r\n                {\r\n                    projectDisplay += $\" ({loadProgress.TargetFramework})\";\r\n                }\r\n\r\n                Console.WriteLine($\"{loadProgress.Operation,-15} {loadProgress.ElapsedTime,-15:m\\\\:ss\\\\.fffffff} {projectDisplay}\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```"
      },
      {
        "user": "p-bojkowski",
        "created_at": "2021-06-11T11:01:59Z",
        "body": "@jmarolf thank you very very much !!!!!"
      }
    ]
  },
  {
    "number": 53656,
    "title": "Cannot find Microsoft.CodeAnalysis.dll -- for some people in the same build system",
    "created_at": "2021-05-24T23:06:53Z",
    "closed_at": "2021-08-26T22:08:36Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53656",
    "body": "**Version Used**: \r\n\r\nRoslyn 3.9, Visual Studio 16.9.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Install our custom analyzer\r\n2.  Do a build.\r\n3.  You (on some machines) get the following error:\r\n```\r\nCSC : error CS8032: An instance of analyzer <redacted>Analyzer cannot be created from F:\\src\\packages\\<redactedanalyzer>\\3.21.519.2\\analyzers\\dotnet\\cs\\redactedanalyzer.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=3.9.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.. [F:\\<redacted>\\redacted.csproj]\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nSince we have Visual Studio 16.9 and Roslyn 3.9, it should find it right?\r\n\r\n**Actual Behavior**:\r\n\r\nWe get the cannot find Microsoft.CodeAnalysis.dll error.\r\n\r\nThe strange this is that once it happens, it seems to always happen, even if you revert back to a previous version of the custom analyzer. So there seems to be a cache somewhere that remembers a bad state.\r\n\r\nThis does not seem to get fixed by:\r\n1) Stamping Roslyn 3.9 on the dependencies of the analyzer nuget\r\n2) Clearing .nuget package cache and rebuilding\r\n3) Reverting to an earlier working version of the custom analyzer.\r\n4) `dotnet --version` doesn't seem to be relevant, as the same version install can or cannot show the result (repros under dotnet 3.1.409)\r\n\r\nQ: How can I debug this? \r\nQ: Are there other caches to clear?\r\n\r\nNote: the custom analyzer package does not have Microsoft.CodeAnalysis.dll included in the nuget. The documentation seems to indicate they are to be excluded.\r\n\r\nWe cannot have customers use or analyzers if it randomly fails. Blocking issue.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53656/comments",
    "author": "nschuessler",
    "comments": [
      {
        "user": "dotnet-issue-labeler[bot]",
        "created_at": "2021-05-24T23:06:57Z",
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label."
      },
      {
        "user": "nschuessler",
        "created_at": "2021-05-25T20:28:13Z",
        "body": "It seems part of the issue is when you build a .Net standard analyzer with .Net 50 and then try to run with `dotnet build` under .Net Core 3.1.  I will try to debug why this matters."
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-05-25T20:31:17Z",
        "body": "@nschuessler Analyzers should target .NET Standard. They cannot target .NET 5 (or .NET Core or .NET Framework)"
      },
      {
        "user": "nschuessler",
        "created_at": "2021-05-25T20:33:43Z",
        "body": "I did target .Net standard, but there may be some dependency that got picked up that ties them to .Net 5 along the way.\r\ni.e. Roslyn 3.9?"
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-05-25T20:34:32Z",
        "body": "It's expected to work with 3.9. So you may wait for someone from the compilers team to better assist then."
      }
    ]
  },
  {
    "number": 52540,
    "title": "Eroor",
    "created_at": "2021-04-10T14:47:57Z",
    "closed_at": "2021-04-12T17:20:20Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/52540",
    "body": "\r\nWhy show this error?\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS1061\t'object' does not contain a definition for 'Wait' and no accessible extension method 'Wait' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)\t\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/52540/comments",
    "author": "akramHossain49119",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2021-04-10T14:54:21Z",
        "body": "It's hard to help without a code that has this problem. But it seems you're trying to access `Task.Wait` method (or any other Wait method), but your object isn't of the correct type. You may need to cast it to the type if it's guaranteed that it will be of that type. Or if this object was returned by some method, you may have the return type of that method incorrect."
      }
    ]
  },
  {
    "number": 52542,
    "title": "Array of nullable generic parameter has unexpected default value",
    "created_at": "2021-04-08T20:20:07Z",
    "closed_at": "2021-04-12T17:22:00Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/52542",
    "body": "I have the following structure:\r\n```\r\nclass MyClass<T> {\r\n  public T? array;\r\n\r\n  MyClass() {\r\n    array = new T?[1];\r\n  }\r\n}\r\n\r\nstruct MyStruct {\r\n  string fields;\r\n}\r\n```\r\n\r\nNow let's say I do the following:\r\n```\r\nMyClass<MyStruct> instance = new();\r\nConsole.WriteLine(instance.array[0] is null);\r\n```\r\n\r\nI would expect to see `True` however what I get is `False`. The array initializes itself with a bunch of empty structs while I would expect a bunch of `null`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/52542/comments",
    "author": "Lancelotbronner",
    "comments": [
      {
        "user": "dotnet-issue-labeler[bot]",
        "created_at": "2021-04-08T20:20:09Z",
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-04-12T17:22:00Z",
        "body": "You need to do:\r\n\r\n```c#\r\nclass MyClass<T> where T : struct {\r\n  public T? array;\r\n\r\n  MyClass() {\r\n    array = new T?[1];\r\n  }\r\n}\r\n```\r\n\r\nWithout the `T : struct` constraint, `T?` means: \"can be default(T)\".  `default(MyStruct)` is not nullable, so it can't be null.  With the `T : struct` constraint means `can be Nullable<T>` so it can be null."
      },
      {
        "user": "Lancelotbronner",
        "created_at": "2021-04-13T19:31:05Z",
        "body": "But what if I need T to be either a reference or value type? I thought that was the whole point of nullable?\n\n> On Apr 12, 2021, at 1:22 PM, CyrusNajmabadi ***@***.***> wrote:\n> \n> ﻿\n> You need to do:\n> \n> class MyClass<T> where T : struct {\n>   public T? array;\n> \n>   MyClass() {\n>     array = new T?[1];\n>   }\n> }\n> Without the T : struct constraint, T? means: \"can be default(T)\". default(MyStruct) is not nullable, so it can't be null. With the T : struct constraint means can be Nullable<T> so it can be null.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-04-13T20:22:27Z",
        "body": "> But what if I need T to be either a reference or value type? \r\n\r\nThen you do just `Foo<T>` with no constraints.  An uncosntrained type parameter can be a reference or value type. \r\n\r\n> I thought that was the whole point of nullable?\r\n\r\nI don't know that means here.  The point of \"nullable value types\" was to allow one to represent a null state for any value type without high overhead.  The point of \"nullalbe reference types\" was to allow annotating your reference type usages to avoid null ref exceptions."
      },
      {
        "user": "Lancelotbronner",
        "created_at": "2021-04-13T21:43:58Z",
        "body": "Oh thank you that makes more sense, I just expected it to work more like Swift’s optionals.\n\nI instead made my own Optional<T> which had the behavior I was looking for.\n\nThank you for your explanations!\n\n> On Apr 13, 2021, at 4:22 PM, CyrusNajmabadi ***@***.***> wrote:\n> \n> ﻿\n> But what if I need T to be either a reference or value type?\n> \n> Then you do just Foo<T> with no constraints. An uncosntrained type parameter can be a reference or value type.\n> \n> I thought that was the whole point of nullable?\n> \n> I don't know that means here. The point of \"nullable value types\" was to allow one to represent a null state for any value type without high overhead. The point of \"nullalbe reference types\" was to allow annotating your reference type usages to avoid null ref exceptions.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n"
      }
    ]
  },
  {
    "number": 51772,
    "title": "Record ToString shows no difference between null or an empty string",
    "created_at": "2021-03-10T09:35:11Z",
    "closed_at": "2021-03-10T10:02:46Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/51772",
    "body": "**Version Used**: To be honest, NFI - whatever comes with the latest version of Visual Studio (v16.9). If I knew how to find out, I'll let you know.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a record class with a string property\r\n2. Create one instance with the property as `null`\r\n3. Create another instance with the property as `string.Empty`\r\n4. Call `ToString` on both and look at the output\r\n\r\n**Expected Behavior**:\r\n\r\nVisually be able to determine that one is `null` vs the other being an empty string.\r\n\r\n**Actual Behavior**:\r\n\r\nBoth display nothing which seems that both are `null`.\r\n\r\n**Background:**\r\n\r\nThis caught me out during test where I was calling `Assert.AreEqual(recordA, recordB)`. MSTest calls `ToString` on the objects when showing they weren't equal.\r\n\r\nBasically, I got this and had no idea what was actually wrong.\r\n\r\n> Assert.AreEqual failed.\r\nExpected:<VersionDetails { MajorVersion = 1, MinorVersion = 2, PatchVersion = 4, PreRelease = , BuildMetadata = , CommitHash = abcdef, CommitHeight = 0, IsTaggedRelease = True }>.\r\nActual:<VersionDetails { MajorVersion = 1, MinorVersion = 2, PatchVersion = 4, PreRelease = , BuildMetadata = , CommitHash = abcdef, CommitHeight = 0, IsTaggedRelease = True }>. \r\n\r\nIt had me going around in circles checking if strings in records were compared by reference or by value. Honestly, nearly was just going to scrap using records because I thought it was broken - only by chance did I use the debugger in the tests and see through VS that one property was `null` and one was an empty string.\r\n\r\nAll I'm thinking that is necessary is just adding double quotes around strings when calling `ToString` on a record.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/51772/comments",
    "author": "Turnerj",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-03-10T10:02:46Z",
        "body": "I'm going to close this as by design.  This is the .net behavior for strings, and appears in any sort of context where string printing occurs.  It's also consistent with how things like anonymous types and other entities print themselves.  If we wanted to change this, it would likely go through the runtime deciding on different forms of printing strings out."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-03-10T10:03:45Z",
        "body": "Another core point: dotnet/roslyn is for the compiler implementation.  Here, the compiler is doing the right thing by implementing the spec as written.  If you wanted the spec to be changed, you'dneed to start a discussion over at dotnet/csharplang about this topic.  Thanks!"
      },
      {
        "user": "Turnerj",
        "created_at": "2021-03-10T10:36:26Z",
        "body": "Thanks for responding on this fast!\r\n\r\n> This is the .net behavior for strings, and appears in any sort of context where string printing occurs. It's also consistent with how things like anonymous types and other entities print themselves.\r\n\r\nThis is the first time I think I've specifically noticed something like this. I guess I'm not usually comparing the string outputs of two types. Never realised that anonymous types even had a ToString override!\r\n\r\n> If you wanted the spec to be changed, you'dneed to start a discussion over at dotnet/csharplang about this topic.\r\n\r\nOuch. From what you said, I get _why_ that is the case but I can imagine it being pretty difficult to change and will take a sweet long time. It sucks because this is a rough edge case to hit with no real indication on what is going wrong unless you already knew about this seemingly quirky behaviour.\r\n\r\nI wonder why no one thought it would have been a good idea in the spec to have it be in quotes given the possible ambiguity. Given things like ToString are helpful for debugging/logs, not being able to tell the difference between two completely different values seems like a big oversight."
      }
    ]
  },
  {
    "number": 50115,
    "title": "Roslyn + MSBuild + VS19 fails to build ",
    "created_at": "2020-12-23T13:54:05Z",
    "closed_at": "2021-01-08T17:47:58Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/50115",
    "body": "This roslyn + MSBuild integration is driving me crazy... insanity. And sorry for being so direct.\r\nI created a NET 48 console application which references a lot of Microsoft.Build and Microsoft.CodeAnalysis nuget references. The job is to load a solution and get all projects, easy task imho.\r\nSo I created another project, a NET 48 WPF project to be clear, which references the console application and use the \"SolutionReader\" class I created.\r\nHowever, after failing reading a solution for no reasons (amount of projects = 0), As I'm not new to Microsoft, I knew they have some troubles with their nuget dependencies, so I started to add Microsoft.Build and Microsoft.CodeAnalysis nugets even to the WPF project. I needed to set \"ExlucdeAssets=runtime\" to the Microsoft.Build* packages because Visual Studio was complaining.\r\nNow when I run the WPF application again and try to load a solution, is says that it cannot load Microsoft.Build.Locator because one of its dependencies could not be loaded (why don't give the nuget all the dependencies it's based on?!).\r\nThe only package missing is \"Microsoft.Build.Runtime\". However, as soon as I add this package, VS19 goes crazy. It cannot build the WPF project anymore and best thing: it doesn't output anymore why the build failed.\r\n\r\nWhen I remove the \"Microsoft.Build.Runtime\", the project still does not compile. I have to restart the whole computer!\r\n\r\nSo what hell is going on here? Has somebody a clue? \r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/50115/comments",
    "author": "Thaval",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2021-01-06T17:51:22Z",
        "body": "> However, after failing reading a solution for no reasons (amount of projects = 0),\r\n\r\nI assume you attached to the `WorkspaceFailed` and gave a progress reporter like below and nothing was returned?\r\n\r\n```cs\r\nusing (var workspace = MSBuildWorkspace.Create())\r\n{\r\n    workspace.WorkspaceFailed += (o, e) => Console.WriteLine(e.Diagnostic.Message);\r\n    var solution = await workspace.OpenSolutionAsync(solutionPath, new LoadingProgressReporter());\r\n}\r\n\r\nprivate class LoadingProgressReporter: IProgress<ProjectLoadProgress>\r\n{\r\n    public void Report(ProjectLoadProgress loadProgress)\r\n    {\r\n        var projectDisplay = Path.GetFileName(loadProgress.FilePath);\r\n        if (loadProgress.TargetFramework != null)\r\n        {\r\n            projectDisplay += $\" ({loadProgress.TargetFramework})\";\r\n        }\r\n\r\n        Console.WriteLine($\"{loadProgress.Operation,-15} {loadProgress.ElapsedTime,-15:m\\\\:ss\\\\.fffffff} {projectDisplay}\");\r\n    }\r\n}\r\n```\r\n\r\n> so I started to add Microsoft.Build and Microsoft.CodeAnalysis nugets even to the WPF project. I needed to set \"ExlucdeAssets=runtime\" to the Microsoft.Build* packages because Visual Studio was complaining.\r\n\r\nBy default, we encourage you to not take any direct dependencies on `Microsoft.Build.*` and instead use the msbuild locator class to locate and register an msbuild installation. Otherwise you are responsible for not only deploying all msbuild assemblies but all necessary default targets and props files. This does not make sense for most applications. You need to ensure that this code is called by your application before any msbuild workspace types are created.\r\n\r\n```cs\r\nvar instance = MSBuildLocator.QueryVisualStudioInstances().First();\r\nMSBuildLocator.RegisterInstance(instance);\r\n```\r\n\r\n> When I remove the \"Microsoft.Build.Runtime\", the project still does not compile. I have to restart the whole computer!\r\n\r\nCan you give the specific compile errors you are seeing? It would also be helpful if you could share your code."
      },
      {
        "user": "Thaval",
        "created_at": "2021-01-08T17:47:58Z",
        "body": "Meatime, the compile error is gone. There are so many dependencies that I just often run into situations where I say \"Oh, it suddenly works. Why? Dunno. Didn't change a thing.\" I guess that's a huge disadvantage when working on multiple projects simultaneously: loosing track of what's going on under the hood."
      }
    ]
  },
  {
    "number": 49959,
    "title": "NormalizeWhitespace(\"\", \"\") break ElseClause and QueryExpression",
    "created_at": "2020-12-14T14:11:36Z",
    "closed_at": "2020-12-14T20:32:43Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49959",
    "body": "**Version Used**: \r\nMicrosoft.CodeAnalysis.CSharp 3.8.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nCall `NormalizeWhitespace` on a SyntaxNode containing a ElseClauseSyntax or QueryExpressionSyntax\r\n\r\nfor example\r\n\r\n```C#\r\nvar syntaxTree = CSharpSyntaxTree.ParseText(@\"\r\npublic class Def\r\n{\r\n    public object M1()\r\n    {\r\n        if (true) Console.Write(0);\r\n        else Console.Write(1);\r\n\r\n        var array = new DateTime[3];\r\n\r\n        return from d in array\r\n               where d.DayOfYear < 200\r\n               orderby d.Year\r\n               select d.DayOfWeek;\r\n    }\r\n}\r\n\");\r\nvar syntaxRoot = syntaxTree.GetRoot().NormalizeWhitespace(string.Empty, string.Empty);\r\nvar text = syntaxRoot.GetText().ToString();\r\nConsole.WriteLine(text);\r\n```\r\n\r\n\r\n**Expected Behavior**:\r\n\r\n```C#\r\npublic class Def{public object M1(){if (true)Console.Write(0);else Console.Write(1);var array = new DateTime[3];return from d in array where d.DayOfYear < 200 orderby d.Year select d.DayOfWeek;}}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```C#\r\npublic class Def{public object M1(){if (true)Console.Write(0);elseConsole.Write(1);var array = new DateTime[3];returnfrom d in arraywhere d.DayOfYear < 200orderby d.Yearselect d.DayOfWeek;}}\r\n```\r\n\r\n`else`, `where` and other query keywords are broken.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49959/comments",
    "author": "kzrnm",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-12-14T20:32:43Z",
        "body": "I don't believe normalizewhitespace is well-defined or well implemented for an empty EOL specifier.  EOL specifier is there so you an pick between actual newlines you want, not an absence of a new line.  "
      }
    ]
  },
  {
    "number": 49316,
    "title": "Array Initializer returns nullable?",
    "created_at": "2020-11-12T16:21:52Z",
    "closed_at": "2020-11-12T18:09:51Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49316",
    "body": "**Version Used**: \r\n\r\n5.0 RTM\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following code is from a test framework putting together an oauth message. Note that the error is NOT related to the actual use, it is purely demonstrating:\r\n\r\n            var nvc = new KeyValuePair<String, String>[]\r\n            {\r\n                new KeyValuePair<String, String>(\"grant_type\", \"refresh_token\"),\r\n                new KeyValuePair<String, String>(\"refresh_token\", context.refresh_token)\r\n            };\r\n\r\n            var req = new HttpRequestMessage(HttpMethod.Post, \"/token\")\r\n            {\r\n                Content = new FormUrlEncodedContent(nvc)\r\n            };\r\n\r\nNote that this is the whole code using nvc. nvc is NOT ever touched again further in the method.\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings shown. The variable nvc is defined as not nullable.\r\n\r\n**Actual Behavior**:\r\n\r\nThe line new FormUrlEncodedContent(nvc) shows a warning:\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\tCS8620\tArgument of type 'KeyValuePair<string, string>[]' cannot be used for parameter 'nameValueCollection' of type 'IEnumerable<KeyValuePair<string?, string?>>' in 'FormUrlEncodedContent.FormUrlEncodedContent(IEnumerable<KeyValuePair<string?, string?>> nameValueCollection)' due to differences in the nullability of reference types.\tOpenDataCore.ServerTestSupport\tC:\\Work\\CoreLibraries\\OpenDataCore\\Source\\OpenDataCore.ServerTestSupport\\TestSupport.cs\t85\tActive\r\n\r\nThe popup under the waning line also tells me \"nvc is not null here\".\r\n\r\nThe ultimate error seems to be that the first line of the example code:\r\n\r\nvar nvc = new KeyValuePair<String, String>[]\r\n\r\ndefines the var as nullable. This (local) variable is defined there and not never ever reused.\r\n\r\nA current workaround is to tell the compiler it is not null, by changing the usage line to:\r\n\r\n               Content = new FormUrlEncodedContent(nvc!)\r\n\r\n(note the added !). This should not be needed.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49316/comments",
    "author": "NetTecture",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-11-12T18:09:45Z",
        "body": "> defines the var as nullable. \r\n\r\nThis is not the issue.  The compiler does think of htis as nullable, but knows it has a non-null state.  The issue you're seeing is that you have `KeyValuePair<string, string>` but the method you're calling expects `KeyValuePair<string?, string?>`s.  \r\n\r\nYou can likely fix this by doing:\r\n\r\n```c#\r\n        var nvc = new KeyValuePair<string?, string?>[]\r\n        {\r\n            new(\"grant_type\", \"refresh_token\"),\r\n            new(\"refresh_token\", context.refresh_token)\r\n        };\r\n```"
      }
    ]
  },
  {
    "number": 53333,
    "title": "Inaccurate CS8602 warning generated on nullable enabled project after a conditional statement",
    "created_at": "2020-11-12T03:26:53Z",
    "closed_at": "2021-05-13T17:12:33Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53333",
    "body": "Modify a .net core project file by adding the line below to enable nullable annotation and warning.\r\n```\r\n<Nullable>enable</Nullable>\r\n```\r\n\r\nIn any cs code file, such a function below will cause a CS8602 on line 5.\r\n```\r\n1    void Test(string s)\r\n2    {\r\n3        if (s != null)\r\n4            Console.WriteLine(\"not null\");\r\n5        Console.WriteLine(s.Length);\r\n6    }\r\n```\r\n\r\nThe warning message is: \"Dereference of a possibly null reference.\"\r\n\r\nThe parameter `s` is not nullable so the warning should be on line 3 instead of line 5.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53333/comments",
    "author": "stcmz",
    "comments": [
      {
        "user": "canton7",
        "created_at": "2021-05-12T08:49:04Z",
        "body": "IIRC this is by design.\r\n\r\nThe compiler assumes that you know more than it does. If you test `s != null`, the compiler assumes that you know what you're talking about and that the variable can be null at that point, and updates the nullable state of that variable to \"maybe-null\"."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-05-13T17:12:52Z",
        "body": "@canton7 Is 100% correct here."
      }
    ]
  },
  {
    "number": 49060,
    "title": "[Loc] Assistance with translation",
    "created_at": "2020-10-29T23:38:08Z",
    "closed_at": "2020-11-24T22:08:08Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49060",
    "body": "String Resource ID | 0; \"Inline_and_keep_0\"\r\n-- | --\r\nSource String | Inline and keep '{0}'\r\nFilename | Features\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\nQuestion | What will {0} be replaced with? Is \"Inline\" a verb in this context\"",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49060/comments",
    "author": "cristianosuzuki77",
    "comments": [
      {
        "user": "cristianosuzuki77",
        "created_at": "2020-10-29T23:38:21Z",
        "body": "vcq 328632"
      },
      {
        "user": "Cosifne",
        "created_at": "2020-11-03T22:09:51Z",
        "body": "> vcq 328632\r\n\r\n@cristianosuzuki77 \r\n{0} will be replaced by a method name. \r\nFor example, if I have\r\n```C#\r\npublic void Method()\r\n{\r\n     Bar();\r\n}\r\n\r\nprivate void Bar()\r\n{\r\n}\r\n```\r\nThis string will show as a code refactoring option as\r\n'Inline and keep Bar'\r\nInline and Keep are both verbs here"
      }
    ]
  },
  {
    "number": 49058,
    "title": "[loc] Update comments in XLF",
    "created_at": "2020-10-29T23:29:13Z",
    "closed_at": "2024-11-11T20:20:19Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49058",
    "body": "\r\nString Resource ID | 0; \"Using_directives_must_be_placed_outside_of_a_namespace_declaration\"\r\n-- | --\r\nSource String | Using directives must be placed inside of a namespace declaration\r\nFilename | Analyzers\\CSharp\\Analyzers\\xlf\\CSharpAnalyzersResources.[language].xlf\r\nQuestion | is the note about \"using\" in this string still valid? If so the source string must be changed to  be \"using\" lowered to match with the note  {Locked=\"using\"}. The string in the \"locked\" statement is case-sensitive.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49058/comments",
    "author": "cristianosuzuki77",
    "comments": [
      {
        "user": "cristianosuzuki77",
        "created_at": "2020-10-29T23:29:23Z",
        "body": "vcq 326041"
      },
      {
        "user": "cristianosuzuki77",
        "created_at": "2021-06-04T21:14:57Z",
        "body": "@crsuzukimsft "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-11T20:20:19Z",
        "body": "Closing out due to lack of movement."
      }
    ]
  },
  {
    "number": 48769,
    "title": "Error in displaying array of some type in class member xml description.",
    "created_at": "2020-10-19T18:41:38Z",
    "closed_at": "2020-10-20T19:36:45Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-By Design",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48769",
    "body": "**Version Used**: \r\nVisual Studio 2019 16.7.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write example code\r\n```csharp\r\n/// <summary>\r\n/// Computes the hash value for the specified <see cref=\"Byte[]\"/>.\r\n/// </summary>\r\n/// <param name=\"buffer\">\r\n/// The input to compute the hash code for.\r\n/// </param>\r\n/// <returns>\r\n/// The computed hash code.\r\n/// </returns>\r\nprotected abstract byte[] ComputeHash(byte[] buffer);\r\n```\r\n2. Check description of this method either on hover or in the ObjectBrowser.\r\n3. We have an error `byte` instead of `byte[]`\r\n\r\n**Expected Behavior**:\r\nWe have  `byte[]` in method description.\r\n\r\n**Actual Behavior**:\r\nWe have an error `byte` instead of `byte[]` in method description.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48769/comments",
    "author": "anreton",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-10-20T19:36:45Z",
        "body": "`byte[]` is not a type that can be referenced directly by a `cref` element, because it doesn't have a source definition anywhere. If you enable XML documentation output, you will see CS1584 reported:\r\n\r\n> Warning CS1584 XML comment has syntactically incorrect cref attribute 'byte[]'"
      }
    ]
  },
  {
    "number": 48666,
    "title": "EditorConfig: How to eliminate new line before else?",
    "created_at": "2020-10-16T06:14:57Z",
    "closed_at": "2020-10-16T20:44:52Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Area-Analyzers",
      "Resolution-Answered",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48666",
    "body": "I have the following:\r\nIf(condition)\r\n{\r\n}\r\n\r\nnaughty blank lines\r\nelse\r\n{\r\n}\r\n\r\nIs there any rule that will either warn me or automatically format it to:\r\n\r\nif(condition)\r\n{\r\n ...\r\n}\r\nelse\r\n{\r\n...\r\n}",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48666/comments",
    "author": "kennethrazo",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-16T20:44:52Z",
        "body": "There is not.  However, you can write your own analyzer to look for stylistic violations like this that you don't like :)"
      }
    ]
  },
  {
    "number": 48470,
    "title": "NullReferenceException when updating from 3.3.1 to 3.4.0",
    "created_at": "2020-10-09T14:48:01Z",
    "closed_at": "2021-09-15T23:03:02Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Need More Info",
      "fabric-bot-test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48470",
    "body": "Getting:\r\n```\r\n   at Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.FuncWithBoundArgument`3.<Bind>b__0_0(T1 arg1)\r\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyArguments(Diagnostic diagnostic, Compilation compilationOpt, Func`2 isSupportedDiagnostic)\r\n   at Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Diagnostic diagnostic)\r\n```\r\n\r\nWhen running unit tests using 3.4.0 to 3.8.0-3.final, works when using 3.3.1",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48470/comments",
    "author": "JohanLarsson",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-09T17:15:27Z",
        "body": "Can you give more of the callstack?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-09T17:16:12Z",
        "body": "Tagging @sharwell in case there's an issue with FuncWithBoundArgument itself.  It's not clear to me if the crash is inside that, or inside teh bound func that that is calling. "
      },
      {
        "user": "sharwell",
        "created_at": "2020-10-09T18:19:55Z",
        "body": "This can occur if `SyntaxNodeAnalysisContext.ReportDiagnostic` is called after the syntax node callback returns (e.g. the code is trying to run on another thread, or the code has nested lambdas and accessed a context object in the wrong scope). Can you show the analyzer code which led to this?"
      },
      {
        "user": "ghost",
        "created_at": "2021-09-15T23:03:04Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 48366,
    "title": "[loc][query] Assistance with translations.",
    "created_at": "2020-10-06T18:12:38Z",
    "closed_at": "2022-03-17T16:28:26Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48366",
    "body": "\r\nString Resource ID | 0; \"ERR_UnexpectedVarianceStaticMember\"\r\n-- | --\r\nSource String | Invalid variance: The type parameter '{1}' must be {3} valid on '{0}' unless language version '{4}' or greater is used. '{1}' is {2}.\r\nFilename | Compilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\nQuestion | could you confirm if \"language\" refers to a language like English? And, could you provide the meaning of the placeholders?First part of source string not fully clear, understood like this for now:The type parameter '{1}' must have the value {3} and must be valid on '{0}' ...\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48366/comments",
    "author": "cristianosuzuki77",
    "comments": [
      {
        "user": "cristianosuzuki77",
        "created_at": "2021-06-04T21:15:04Z",
        "body": "@crsuzukimsft "
      },
      {
        "user": "jcouv",
        "created_at": "2022-03-17T05:24:58Z",
        "body": "\"language version\" refers to C# language version.\r\n\r\nHere's an example to illustrate the placeholders:\r\n```\r\n\r\n        [Fact]\r\n        public void VarianceSafety_13()\r\n        {\r\n            var source1 =\r\n@\"\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        I2<string, string>.P1 = \"\"a\"\";\r\n        I2<string, string>.P2 = \"\"b\"\";\r\n        System.Console.WriteLine(I2<string, string>.P1);\r\n        System.Console.WriteLine(I2<string, string>.P2);\r\n    }\r\n}\r\n\r\ninterface I2<out T1, in T2>\r\n{\r\n    static T1 P1 { get; set; }\r\n    static T2 P2 { get; set; }\r\n}\r\n\";\r\n\r\n            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugExe,\r\n                                                 parseOptions: TestOptions.Regular8,\r\n                                                 targetFramework: TargetFramework.NetCoreApp);\r\n            compilation1.VerifyDiagnostics(\r\n                // (15,12): error CS8904: Invalid variance: The type parameter 'T1' must be invariantly valid on 'I2<T1, T2>.P1' unless language version '9.0' or greater is used. 'T1' is covariant.\r\n                //     static T1 P1 { get; set; }\r\n                Diagnostic(ErrorCode.ERR_UnexpectedVarianceStaticMember, \"T1\").WithArguments(\"I2<T1, T2>.P1\", \"T1\", \"covariant\", \"invariantly\", \"9.0\").WithLocation(15, 12),\r\n                // (16,12): error CS8904: Invalid variance: The type parameter 'T2' must be invariantly valid on 'I2<T1, T2>.P2' unless language version '9.0' or greater is used. 'T2' is contravariant.\r\n                //     static T2 P2 { get; set; }\r\n                Diagnostic(ErrorCode.ERR_UnexpectedVarianceStaticMember, \"T2\").WithArguments(\"I2<T1, T2>.P2\", \"T2\", \"contravariant\", \"invariantly\", \"9.0\").WithLocation(16, 12)\r\n                );\r\n```\r\n\r\nAlso, here's the code that produces the diagnostic, for additional context:\r\n```\r\n                diagnostics.Add(ErrorCode.ERR_UnexpectedVarianceStaticMember, location, context, unsafeTypeParameter, actualVariance.Localize(), expectedVariance.Localize(),\r\n                                new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers.RequiredVersion()));\r\n```"
      },
      {
        "user": "cristianosuzuki77",
        "created_at": "2022-03-17T16:28:26Z",
        "body": "Thank you"
      }
    ]
  },
  {
    "number": 48365,
    "title": "[loc][query] Assistance with translation",
    "created_at": "2020-10-06T18:10:55Z",
    "closed_at": "2020-10-21T16:39:27Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48365",
    "body": "\r\nString Resource ID | 0; \"IDS_FeatureDiscards\"\r\n-- | --\r\nSource String | discards\r\nSubtenant | dotnet_roslyn\r\nSource Control Link |  \r\nFilename | Compilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\nQuestion | Is this a verb (3. person singular) or a noun in plural? Where will it occur? Please provide a screenshot, if possible. So far, we interpreted this as a noun.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48365/comments",
    "author": "cristianosuzuki77",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-10-09T13:13:39Z",
        "body": "@cristianosuzuki77  It's a noun (the name of a language feature).\r\nAn example where it appears in a full sentence is:\r\n\r\n> Feature 'discards' is not available in C# 6. Please use language version 7.0 or greater."
      }
    ]
  },
  {
    "number": 48011,
    "title": "IDE0008 when combining \"type apparent\" expressions with null-coalescing operator",
    "created_at": "2020-09-24T14:12:00Z",
    "closed_at": "2020-09-25T16:28:40Z",
    "labels": [
      "Question",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48011",
    "body": "With the following settings:\r\n``` ini\r\ncsharp_style_var_for_built_in_types = false:warning\r\ncsharp_style_var_when_type_is_apparent = true:suggestion\r\ncsharp_style_var_elsewhere = false:warning\r\n```\r\na false-positive IDE0008 is generated when combining two \"type is apparent\" expressions with the null-coalescing operator `??`, for example:\r\n\r\n``` csharp\r\nvar myList = enumerableOfInt as List<int> ?? enumerableOfInt.ToList();\r\n```\r\nNo warning is generated when using the expressions either side of the `??` in isolation.\r\n\r\n**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019\r\nVersion 16.7.3\r\nVisualStudio.16.Release/16.7.3+30503.244\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new console app project\r\n2. Add a new .editorconfig file and ensure the options for `charp_style_var_*` are set as follows:\r\n``` ini\r\n[*.cs]\r\n# var preferences\r\ncsharp_style_var_for_built_in_types = false:warning\r\ncsharp_style_var_when_type_is_apparent = true:suggestion\r\ncsharp_style_var_elsewhere = false:warning\r\n```\r\n3. Add the following code to `Main`\r\n``` csharp\r\nIEnumerable<int> empty = Enumerable.Empty<int>();\r\n\r\nvar emptyAsList = empty as List<int>;\r\nvar emptyToList = empty.ToList();\r\nvar emptyAsListOrToList = empty as List<int> ?? empty.ToList();\r\n```\r\n\r\n**Expected Behavior**:\r\nNo IDE0008, because `csharp_style_var_when_type_is_apparent  = true:suggestion`\r\n\r\n**Actual Behavior**:\r\nIDE0008 on third example of `var` because `csharp_style_var_elsewhere = false:warning`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48011/comments",
    "author": "jimpaton-ufx",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-24T16:09:04Z",
        "body": "I don't believe the type is apparent there. Is requires descending into both sides of the expression, then mentally comparing both to know of they're the same. This is not apparent. \r\n\r\nIn general we do not done into expressions on the way you're thinking about. "
      },
      {
        "user": "jimpaton-ufx",
        "created_at": "2020-09-25T06:15:14Z",
        "body": "I'm sorry, but I disagree. Given the following lines of code:\r\n\r\n``` csharp\r\nvar first = String.Empty;\r\nvar second = String.Empty;\r\nvar result = first ?? second;\r\n```\r\n\r\nwith  `csharp_style_var_for_built_in_types` to `false:warning`, all three lines generate an IDE0008 warning, as expected. If you change value of the setting to `true:warning` then all three IDE0008 warnings disappear. My expectation is that the rules should behave in a consistent manner. If `var x = expressionA;` and `var y = expressionB;` don't generate warnings under a particular rule, then why should `var z = expressionA ?? expressionB;` be different?\r\n\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-25T08:02:53Z",
        "body": "> My expectation is that the rules should behave in a consistent manner\r\n\r\nThere is no reason for this to be.  `csharp_style_var_for_built_in_types` depends only on the type of hte variable.  if it is `built in` (i.e. `int`, `string`, etc.) you can use 'var'.  that's the only thing that controls it.\r\n\r\n`csharp_style_var_when_type_is_apparent` is entirely unrelated.  It says \"you can use `var` if the type is apparent/obvious from the expression\".  When you have `expr1 ?? expr2` the type is not apparent/obvious, so you cannot use 'var' here.\r\n\r\n> then why should `var z = expressionA ?? expressionB`; be different?\r\n\r\nYou'd have to explain why `var z = expressionA ?? expressionB;` would be the same.  it's a `??` expression, nothing about it make the type `apparent`.  The same is true for things like `x ? y : z`.  Is the type of that apparent just by looking at it?  No.  So you can't use 'var' there."
      },
      {
        "user": "jimpaton-ufx",
        "created_at": "2020-09-25T08:58:59Z",
        "body": "I understand. My (I think reasonable) assumption was that both rules would be looking at the type of the RHS of the assignment - from a human being's point of view, I can't tell whether `var x` is a built-in type or not!\r\nThanks for clarifying."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-25T16:28:40Z",
        "body": "Yup yup. I'm going to close this as by design. Glad this could be cleared up for you. "
      }
    ]
  },
  {
    "number": 47884,
    "title": "How to tell the analyzer to ignore generated code?",
    "created_at": "2020-09-21T09:44:14Z",
    "closed_at": "2020-09-21T10:20:46Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47884",
    "body": "Hello, I wrote a custom code analyzer and it runs on my solution code, but it also runs on generated code.\r\nFor example when `AssemblyInfo.cs` files get generated, my analyzer also analyzes these files and throws warnings inside of them. How can I tell my custom analyzer to not analyze generated code?\r\n\r\nI know I could add something like this into my `.editorconfig`:\r\n```\r\n[*.{AssemblyAttributes.cs,AssemblyInfo.cs}]\r\ngenerated_code = true\r\ndotnet_diagnostic.***.severity = none\r\n...\r\n```\r\nBut is there a better way to do it?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47884/comments",
    "author": "DasOhmoff",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-09-21T09:57:05Z",
        "body": "You can do that using `ConfigureGeneratedCodeAnalysis` on the `AnalysisContext` (that is the parameter of the `Initialize` method):\r\n\r\n```csharp\r\ncontext.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\r\n```"
      },
      {
        "user": "DasOhmoff",
        "created_at": "2020-09-21T10:20:46Z",
        "body": "Thank you, this is exactly what I needed!"
      }
    ]
  },
  {
    "number": 47824,
    "title": "[Generators] Generators run in the context of the IDE don't copy their dependencies",
    "created_at": "2020-09-18T02:11:13Z",
    "closed_at": "2020-09-22T20:24:11Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Feature - Source Generators"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47824",
    "body": "**Version Used**: 16.8 Pre 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an analyzer that depends on an additional assembly\r\n2. Build and use the analyzer\r\n\r\n**Expected Behavior**:\r\n\r\nThe IDE and intellisense pick up the changes.\r\n\r\n**Actual Behavior**:\r\n\r\nThe analyzer fails to load properly because of a missing DLL, because the IDE moves the analyzer assembly to a temporary location, without the dependency. (e.g.  `file:///C:\\Users\\xx\\AppData\\Local\\Temp\\VS\\AnalyzerAssemblyLoader\\8737209f7d6e4328a4b6095c319d8520\\1\\Uno.Core.dll`)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47824/comments",
    "author": "jeromelaban",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-09-22T20:24:11Z",
        "body": "An example of this can be seen in #47275. You need the `GetDependencyTargetPaths` target hooked up to provide the dependencies to the project system."
      }
    ]
  },
  {
    "number": 47759,
    "title": "Adding analyzer to analyze its own project in which it is created?",
    "created_at": "2020-09-16T19:10:08Z",
    "closed_at": "2020-09-22T17:32:38Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47759",
    "body": "Hello, thank you for your help.\r\n\r\nImagine the following scenario: I create a project called \"AnalyzerProject\" in which a analyzer gets defined.\r\nIs it possible to use this very same analyzer to analyze the very same project?\r\nSo that this analyzer that gets build analyzes the project \"AnalyzerProject\"?\r\n\r\nIf so, how can I make this happen?\r\nI have three projects in my solution, a analyzer project (net standard 2.0), a code fixes project (net standard 2.0), a package project (which combines both, and is also net standard 2.0), and a vsix project (so that I can test the analyzer by starting another visual studio instance. This one is a net472 project). I am sure you know what I mean. How can I make it happen so that all these 4 projects inside my solution are analyzed by the analyzer that is defined inside the projects themselves?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47759/comments",
    "author": "DasOhmoff",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2020-09-16T19:50:14Z",
        "body": "@DasOhmoff You can add a package reference to an older/published version of AnalyzerProject NuGet package to the project itself. This will ensure the already published version of the analyzer packages runs on your AnalyzerProject. You would then publish a new analyzer package with your changes, and upgrade your package reference to the latest version to get later changes."
      },
      {
        "user": "DasOhmoff",
        "created_at": "2020-09-22T17:32:37Z",
        "body": "Thank you!\r\n"
      }
    ]
  },
  {
    "number": 47499,
    "title": "WebApplicationError CS1061 'int' does not contain a definition for 'Visible' and no extension method 'Visible' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?)",
    "created_at": "2020-09-06T12:30:02Z",
    "closed_at": "2020-09-06T15:16:57Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47499",
    "body": "```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\nnamespace WebApplicationHello\r\n{\r\n    public partial class _Default : Page\r\n    {\r\n        private int Imagecamera;\r\n\r\n        protected void Page_Load(object sender, EventArgs e)\r\n        {\r\n\r\n        }\r\n\r\n        protected void Buttonhello_Click(object sender, EventArgs e)\r\n        {\r\n            Imagecamera.Visible = !Imagecamera.Visible;\r\n            if (TxtFirstname.Text !=\"\" && TxtFirstname.Text!=\"\")\r\n            {\r\n                LabelOutput.Text= \"Hello\" + TxtFirstname.Text +\" \" +\r\n                    TxtSecondname.Text + \",where is the bear?\";\r\n            }\r\n        }\r\n\r\n        protected void TxtFirstname_TextChanged(object sender, EventArgs e)\r\n        {\r\n\r\n        }\r\n\r\n        protected void TxtSecondname_TextChanged(object sender, EventArgs e)\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS1061\t'int' does not contain a definition for 'Visible' and no extension method 'Visible' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?)\tWebApplicationHello\tC:\\Users\\user\\OneDrive\\awd mrjoel\\WebApplicationHello\\WebApplicationHello\\Default.aspx.cs\t21\tActive\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47499/comments",
    "author": "abdonkasengo",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-09-06T12:40:26Z",
        "body": "The error is correct. You defined the variable `Imagecamera` of type `int`, and `int` doesn't contain a definition of \"Visible\".\r\nIt seems like the type of `Imagecamera` should have been something else other than \"int\"."
      }
    ]
  },
  {
    "number": 47449,
    "title": "CSharpSyntaxTree.ParseText not returning MethodDeclarationSyntax",
    "created_at": "2020-09-04T01:54:53Z",
    "closed_at": "2020-09-04T20:07:57Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47449",
    "body": "**3.7.0**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nstring method = @\"\r\n                 public void test()\r\n                 {{\r\n                 \tConsole.WriteLine(\"\"Hello World\"\");\r\n                 }}\r\n                 \";\r\nSyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(method);\r\nIEnumerable<SyntaxNode> syntaxNodes = syntaxTree.GetRoot().DescendantNodes();\r\nMethodDeclarationSyntax methodDeclarationSyntax = syntaxNodes.OfType<MethodDeclarationSyntax>().FirstOrDefault();\r\n\r\n```\r\n**Expected Behavior**:\r\nmethodDeclarationSyntax should have a value. It works on 3.6.0 and older versions.\r\n**Actual Behavior**:\r\nmethodDeclarationSyntax is null.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47449/comments",
    "author": "parxal",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-09-04T11:33:19Z",
        "body": "This behavioral change could be very related to the new top-level statements feature.\r\nYou need to have a class wrapping the method to get MethodDeclarationSyntax as a child of ClassDeclarationSyntax.\r\n\r\nHave you tried to pass a `CSharpParseOptions` with LanguageLevel = 8 (or any version before top-level statements), which will *probably* produce the output you want?\r\n\r\nBy the way, the SyntaxTree you're dealing with seems invalid whether before or after top-level statements feature.\r\n\r\nYou probably need also to wait for the compilers team to get a better answer than mine."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-04T20:07:57Z",
        "body": "This is by design.  when you call ParseText, you are parsing the input the same way the parser would parse a complete file.  IN that case, this is not a method declaration (which can only exist inside a type).\r\n\r\nTo parse just a method decl, without needing to surround with anything, call SyntaxFactory.ParseMemberDeclaration."
      }
    ]
  },
  {
    "number": 47219,
    "title": "[loc][query] translation question.",
    "created_at": "2020-08-27T23:38:44Z",
    "closed_at": "2020-09-09T06:11:55Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47219",
    "body": "\r\nString Resource ID | 0; \"Name_is_not_a_valid_0_identifier\"\r\n-- | --\r\nSource String | Name is not a valid {0} identifier.\r\nSubtenant | dotnet_roslyn\r\nSource Control Link |  \r\nFilename | VisualStudio\\Core\\Def\\xlf\\ServicesVSResources.xlf\r\nQuestion | Please clarify the placeholder.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47219/comments",
    "author": "cristianosuzuki77",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2020-08-31T01:28:36Z",
        "body": "> Please clarify the placeholder.\r\n\r\nIt is the name of the programming language for which this name is not a valid identifier.\r\n\r\nExamples would be\r\n\r\n- `Name is not a valid C# identifier.`\r\n- `Name is not a valid Visual Basic identifier.`"
      }
    ]
  },
  {
    "number": 46152,
    "title": "How to set the value of the readonly field in dynamic compilation?",
    "created_at": "2020-07-21T01:26:49Z",
    "closed_at": "2020-07-21T16:47:44Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46152",
    "body": "This is very helpful for dependency injection.   \r\nWith this feature, we can do dependency injection without a constructor.  \r\nI know this can be done through both reflection and Emit.\r\nSo is there a way for roslyn to do this? \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46152/comments",
    "author": "NMSAzulX",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2020-07-21T16:47:44Z",
        "body": "The Roslyn C# compiler does not permit C# source code to violate the rules of the C# programming language.\r\n"
      }
    ]
  },
  {
    "number": 45745,
    "title": "Compiler warning CS8618: How can I get around it.",
    "created_at": "2020-07-07T16:38:33Z",
    "closed_at": "2020-08-12T19:55:25Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Feature - Nullable Reference Types"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45745",
    "body": "**Net Standard 2.1**: \r\n\r\n**Steps to Reproduce**:\r\nSee following code:\r\n```\r\npublic class Class1\r\n{\r\n  public string MyProperty { get; set; }\r\n  public string MyProperty2 { get; set; }\r\n  public string MyProperty3 { get; set; }\r\n\r\n  public Class1() //Warning CS8618\r\n  {\r\n    Init();\r\n  }\r\n\r\n  public Class1(string myproperty2) //Warning CS8618\r\n  {\r\n    Init();\r\n    MyProperty2 = myproperty2;\r\n  }\r\n\r\n  private void Init()\r\n  {\r\n    MyProperty = \"\";\r\n    MyProperty2 = \"\";\r\n    MyProperty3 = \"\";\r\n  }\r\n}\r\n```\r\n\r\nIs there a way to tell the compiler that the Init() function takes care of initializing the properties?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45745/comments",
    "author": "FStapenhorst",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2020-07-07T16:58:02Z",
        "body": "In your scenario you may consider applying `[MemberNotNull(nameof(MyProperty), nameof(MyProperty2), nameof(MyProperty3)]` to your `Init()` method."
      },
      {
        "user": "FStapenhorst",
        "created_at": "2020-07-07T17:12:58Z",
        "body": "Thank you!\r\n\r\nI did this:\r\n```\r\n[MemberNotNull(nameof(MyProperty), nameof(MyProperty2), nameof(MyProperty3))]       \r\nprivate void Init()\r\n{   \r\n  MyProperty = \"\";\r\n  MyProperty2 = \"\";\r\n  MyProperty3 = \"\";\r\n}\r\n```\r\nBut now I get error CS0246 - it doesn't recognize the MemberNotNull attribute. Do I need any additional reference or using statement?\r\n\r\n\r\n"
      },
      {
        "user": "RikkiGibson",
        "created_at": "2020-07-07T17:32:04Z",
        "body": "The attribute seems to be only present in .NET 5, and requires `<LangVersion>preview</LangVersion>`. The feature will be part of C# 9 once that officially ships.\r\n\r\nYou can declare the attribute internally in your project (not officially supported):\r\n\r\n```cs\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\r\n    internal sealed class MemberNotNullAttribute : Attribute\r\n    {\r\n        public MemberNotNullAttribute(params string[] members) { }\r\n        public MemberNotNullAttribute(string member) { }\r\n    }\r\n}\r\n\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\r\n    internal sealed class MemberNotNullWhenAttribute : Attribute\r\n    {\r\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\r\n        public MemberNotNullWhenAttribute(bool when, string member) { }\r\n    }\r\n}\r\n```\r\n\r\nYou can also use`= null!` initializers on your properties instead, which are expected to be elided in codegen in Release mode. This has the effect of just suppressing the CS8618 (uninitialized non-nullable member) warnings.\r\n\r\n```cs\r\npublic class Class1\r\n{\r\n  public string MyProperty { get; set; } = null!;\r\n  public string MyProperty2 { get; set; } = null!;\r\n  public string MyProperty3 { get; set; } = null!;\r\n}\r\n```"
      },
      {
        "user": "FStapenhorst",
        "created_at": "2020-07-08T10:33:02Z",
        "body": "I installed .NET Runtime 5.0.0-preview.6.20305.6 and added the following in my csproj file:\r\n```\r\n  <PropertyGroup>\r\n    <LangVersion>preview</LangVersion>\r\n  </PropertyGroup>\r\n```\r\nBut still \r\n`[MemberNotNull(nameof(MyProperty), nameof(MyProperty2), nameof(MyProperty3))] `\r\nis unknown.\r\nMaybe it is not yet in the latest preview.\r\nI'll stick with `= null!;` for now"
      },
      {
        "user": "RikkiGibson",
        "created_at": "2020-08-12T19:55:25Z",
        "body": "Closing out since the question appears to have been addressed. Feel free to follow up here if needed. Thanks!"
      }
    ]
  },
  {
    "number": 45350,
    "title": "PooledObjects for Stack<T>?",
    "created_at": "2020-06-21T17:04:34Z",
    "closed_at": "2020-06-21T19:04:14Z",
    "labels": [
      "Question",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45350",
    "body": "Is there a shared pool available for `Stack<T>`?\r\nIf so where is it located?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45350/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-21T19:04:13Z",
        "body": "Questions like this are better suited to gitter.im/dotnet/roslyn, or discord.gg (#roslyn channel), thanks!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-21T19:04:36Z",
        "body": "`ArrayBuilder` is the appropriate pooled entity to use here."
      }
    ]
  },
  {
    "number": 45221,
    "title": "InvocationExpressionSyntax.WithArgumentList adds list after TrailingTrivia",
    "created_at": "2020-06-16T05:27:21Z",
    "closed_at": "2020-06-16T19:11:17Z",
    "labels": [
      "Question",
      "Resolution-By Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45221",
    "body": "Only other maybe related mention of this is in #41923, but that is just a guess\r\nThis might also be totally correct, just odd to me\r\n\r\n**Version Used**: \r\n.NET 4.7.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Get a `InvocationExpressionSyntax` instance for `SubName` from this VB code\r\n```VB.NET\r\nPublic Sub SubName()\r\n    SubName  ' recursive call\r\nEnd Sub\r\n```\r\n2. This should have a `.GetText()` of: `\"        SubName  ' recursive call\\r\\n\"`\r\n3. Àdd an empty ArgumentList: `invocationNode.WithArgumentList(SyntaxFactory.ArgumentList());`\r\n4. Check resulting `.GetText()`\r\n\r\nArgumentList ends up after TrailingTrivia, (and there is no TrailingTrivia in the resulting node)\r\n\r\n**Expected Behavior**:\r\n`\"        SubName()  ' recursive call\\r\\n\"`\r\nExpected TrailingTrivia to be on InvocationExpressionSyntax\r\n**Actual Behavior**:\r\n`\"        SubName  ' recursive call\\r\\n()\"`\r\nInvocationExpressionSyntax.Expression has TrailingTrivia, and ArgumentList is added after that trivia\r\n\r\nTrying to use this in a codefix gives incorrect code, but maybe there is other issues in this function.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45221/comments",
    "author": "NiKiZe",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-16T19:11:17Z",
        "body": "This is by design.  The 'With' methods do exactly one thing, they update the existing child node with the node you specified.  SO, in this case, the existing invocation points at an expression `SubName ' recursive call` and no arg list.  When you add the arg list, it only updates the arglist portion of the node, it doesn't touch anything else.\r\n\r\nIf you want trivia to move, that's something to take care of in your own code."
      },
      {
        "user": "NiKiZe",
        "created_at": "2020-06-17T01:13:51Z",
        "body": "I havily dissagre, but ok thanks."
      },
      {
        "user": "NiKiZe",
        "created_at": "2020-06-17T02:09:15Z",
        "body": "You are saying that everyone needs to handle trivia on their own, and you do realize that very few will actually create testcases that has trivia in them, and that will cause a number of bugs when fixes are applied to code with trivia.\r\n\r\nAlso I have not seen any documentation, or examples where this is done, you need to work on that part."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-17T08:41:52Z",
        "body": "> You are saying that everyone needs to handle trivia on their own,\r\n\r\nI'm saying that the syntax API does no processing of this sort.  It is outside of its domain.  It is similar to a low-level data structure API.  If you have a list and you say you want to add a value to it, it adds it at the end always.  It doesn't attempt to look at the items in the list to decide that sometimes it will, in fact, not add it at the end :)\r\n\r\nOur syntax is a raw, *concrete*, tree.  It does not convey anything beyond a structured model of code that represents every character in a completely consistent manner.  We don't put in 'smarts' in this layer because it means that any higher level layer now has to understand all those smarts and not get thrown off by how all the different parts might behave differently.  We actually had a model at one point that *did* try to be smart, and it turned out to be almost impossible to use effectively because no one was ever sure what any particular manipulation of it would do.  Similarly, any tweak or revision in behavior could and did break vast swaths of consumers.\r\n\r\nBased on this, we went to a model that is completely simple and consistent.  Specifically, all this is a raw concrete-syntax-tree model with no interpretation around any sort of behavior.  When you ask to do something, *precisely* that single thing is done.  No more, no less.  This means clients can always trust that given a particular input tree , they will know exactly what output tree they should expect based on their calls.\r\n\r\nThis has already borne itself out over the lifetime of Roslyn as producing *far* less confusion and difficulty for clients than our previous 'smart' system had.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-17T08:45:35Z",
        "body": "> Also I have not seen any documentation, or examples where this is done, you need to work on that part.\r\n\r\nEffectively, the tree is just a tree.  We describe Nodes/Tokens/Trivia in several documents.  You can then manipulate those producing new trees however you want.  i.e. we leave it to you to decide what you would think is best in a particular scenario.  For some domains this would be taking trivia like that and keeping it where it it.  For others it might be moving it *after* the node that was added.  For others it might be removing the trivia and placing *before* the statement containing the node being updated.   etc. etc.  \r\n\r\nIn general, the recommendatation is simply:\r\n\r\nTake the 'before' code and look at it in some sort of syntax visualizer.   Then take your desired 'after' code and do the same. You will easily be able to see the structure of both trees, and can then fairly trivially (no pun intended) figure out what operations to perform on the former to transform it to the latter.\r\n\r\nCheers!\r\n\r\n--\r\n\r\nAlso: if you need any help with this, we have several community channels that are useful for asking questions and engaging with other roslyn devs and team members.  I recommend gitter.im/dotnet/roslyn and discord.gg/csharp (#roslyn channel).  Good luck! :)"
      }
    ]
  },
  {
    "number": 45027,
    "title": "Declaration to suppress backward compatibility",
    "created_at": "2020-06-10T05:36:03Z",
    "closed_at": "2021-09-15T23:03:26Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Need More Info",
      "fabric-bot-test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45027",
    "body": "Declaration to suppress backward compatibility\r\n\r\nI have been coding C# since C#1.0.\r\nThe first C# was a language that was easier to learn compared to other languages.\r\nAfter a long time, the C# specification adds advanced grammar and modern language grammar, and the newly added grammar coexists with the past.\r\n\r\nSome grammars replace existing complex blocks of code. Currently, C# can be used for both.\r\n\r\nWhat I'm suggesting is to force the new grammar added in C# through declarations that suppress backward compatibility, and the old grammar throws an error. It would be great if I could declare this declaration at the top of each CS file. It still maintains backward compatibility when connecting.\r\n\r\n#using cs9\r\n\r\nComputer languages ​​are very important for maintaining backward compatibility, but there are limitations to actively applying new designs. If you can remove these restrictions on a file-by-file basis, can't you move slowly in the right direction?\r\n\r\nVarious examples, but still a concept. Please comment if you have any thoughts.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45027/comments",
    "author": "dimohy",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-10T06:48:24Z",
        "body": "You can do this today just by adding your own analyzer and disallowing constructs you no longer want to use.  :)"
      },
      {
        "user": "svick",
        "created_at": "2020-06-10T08:52:43Z",
        "body": "Out of curiosity, what features do you consider to be \"old\" that would produce an error in the \"cs9\" mode?\r\n\r\nAnonymous methods (e.g. `Action a = delegate { };`) are pretty much the only grammar I can think of that could be treated this way. But they are harmless, it's quite unlikely that using them would introduce a bug, their main problem is that they're too verbose.\r\n\r\nAnother problematic historical feature that comes to mind is array covariance, but that's a much more subtle feature, with no grammar of its own and it also can't be fully disabled by static analysis."
      },
      {
        "user": "ghost",
        "created_at": "2021-09-15T23:03:28Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 44746,
    "title": "SymbolFinder.FindReferencesAsync doesn't find anything. ",
    "created_at": "2020-06-01T12:59:03Z",
    "closed_at": "2022-11-11T23:02:26Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Need More Info",
      "IDE-MSBuildWorkspace"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44746",
    "body": "Hey guys,\r\n\r\nI don't know if this is a bug or whether I am doing something wrong. \r\nUsing roslyn compiler I am trying to find references to properties such as:\r\n\r\npublic SomeClass SomeProperty { get; private set; } \r\n\r\nWhen I first started to work with Roslyn I got this error:\r\n\r\n> The tools version \"Current\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\".\r\n\r\nI fixed it by installing Build Tools 2019, and adding this line of code: \r\n\r\n> Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe\");\r\n\r\n(Don't know if the build tools is related to the issue which I am experiencing but thought it worth mentioning) \r\n\r\nWhen loading the solution:\r\n\r\n> _solution = msWorkspace.OpenSolutionAsync(solutionPath).Result;\r\n\r\nUsing msWorkspace.Diagnostics I see errors such as: \r\n\r\n> Found project reference without a matching metadata reference: ......\r\n\r\nAnd as I search for the properties references using SymbolFinder.FindReferencesAsync, it doesn't find anything.\r\n\r\nCould you please advise?\r\nHow could this issue be resolved? \r\nAm I doing something wrong?\r\n\r\nThanks,\r\nYaniv.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44746/comments",
    "author": "YanivFromIsrael",
    "comments": [
      {
        "user": "YanivFromIsrael",
        "created_at": "2020-06-02T07:38:08Z",
        "body": "It seems the issue was with ModelExtensions.GetSymbolInfo which always returned null. \r\nI changed it to ModelExtensions.GetDeclaredSymbol and now I am getting back result. "
      },
      {
        "user": "jinujoseph",
        "created_at": "2020-06-10T19:26:02Z",
        "body": "@YanivFromIsrael has this been resolved?"
      },
      {
        "user": "ghost",
        "created_at": "2022-11-11T23:02:28Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 44665,
    "title": "Flow Insensitive Analysis performed by GetAnalyzerDiagnsoticAsync() ",
    "created_at": "2020-05-29T14:36:42Z",
    "closed_at": "2020-11-12T22:33:50Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44665",
    "body": "**Version Used**: \r\nMicrosoft.CodeAnalysis 2.10.0\r\n**Steps to Reproduce**:\r\n\r\n1. Two different documents are being passed to VerifyCSharpDiagnostic() while unit testing. I am trying to perform an interprocedural test against my analyzer\r\n2. Document 1 contains a call to a function in Document 2\r\n3. Document 1 and Document 2 are added to sources of VerifyCSharpDiagnostic()\r\n\r\n**Expected Behavior**:\r\nDocument 1 should be analyzed first followed by Document 2\r\n**Actual Behavior**:\r\nDocument 2 is analyzed first followed by Document 1.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44665/comments",
    "author": "pavanupb",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-05-29T16:13:25Z",
        "body": "Can you show an example test that reproduces this? I've fixed a number of ordering issues over time but I'm not sure which one this is."
      },
      {
        "user": "pavanupb",
        "created_at": "2020-05-29T17:34:06Z",
        "body": "Example: Document 1 contains\r\n```\r\npublic void SummaryReuseTest()\r\n        {\r\n            IdentityFuncTest identityFuncTest = new IdentityFuncTest();\r\n            string alias1 = \"This is a secret message\";\r\n            string alias2 = alias1;\r\n            identityFuncTest.Identity(alias1);\r\n            string alias3 = alias2;\r\n            string alias4 = alias3;        \r\n\r\n        }\r\n```\r\n\r\nDocument 2 contains \r\n```\r\npublic void Identity(string parameters)\r\n        {\r\n            string mapped = parameters;\r\n        }\r\n```\r\n\r\nI registered a syntax node action for MethodDeclaration type.\r\n\r\nI see that the syntax node action gets hit first with the Identity() of Document 2 then gets hit with SummaryReuseTest() of Document 1.\r\n\r\nI have also registered a CodeBlockEndAction. The CodeBlockEndAction() is also not being executed in the right order. \r\n\r\n\r\n\r\n"
      },
      {
        "user": "sharwell",
        "created_at": "2020-11-12T22:33:37Z",
        "body": "This behavior is by design. The callbacks are allowed to occur in any order, and are even allowed to occur in parallel."
      },
      {
        "user": "sharwell",
        "created_at": "2020-11-12T22:34:46Z",
        "body": "/cc @mavasani who may have additional suggestions regarding options for interprocedural analysis"
      }
    ]
  },
  {
    "number": 44427,
    "title": "IBuildEngine7 is not provided in Microsoft.Build.Framework",
    "created_at": "2020-05-20T18:20:08Z",
    "closed_at": "2020-07-29T21:42:47Z",
    "labels": [
      "Question",
      "Area-IDE",
      "IDE-MSBuildWorkspace"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44427",
    "body": "**Version Used**: 16.5.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use 3.6 version of roslyn nuget packages which are using IBuildEngine7 under the hood.\r\n\r\n**Expected Behavior**:\r\n\r\nMsbuildWorkspace and other roslyn features should work\r\n\r\n**Actual Behavior**:\r\n\r\nTypeLoadException because IBuildEngine7 is not located in Microsoft.Build.Framework\r\n\r\nIt's not complicated to test! just install Microsoft.Build.Framework in any project and IBuildEngine6 is the most recent version of IBuildEngine you can find!",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44427/comments",
    "author": "ysmoradi",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2020-07-29T20:31:01Z",
        "body": "@ysmoradi looking into fixing this but could use some help. Are you referencing _both_ the latest MSBuildWorkspace version and Microsoft.Build.Framework? Can you explain to me why you are doing that?"
      },
      {
        "user": "ysmoradi",
        "created_at": "2020-07-29T21:39:45Z",
        "body": "I'm fine with 3.7"
      },
      {
        "user": "jmarolf",
        "created_at": "2020-07-29T21:42:47Z",
        "body": "ah, I'll close this as fixed than"
      }
    ]
  },
  {
    "number": 42956,
    "title": "How to change node location for diagnostic messages (not only line)?",
    "created_at": "2020-03-31T21:11:01Z",
    "closed_at": "2020-03-31T21:59:48Z",
    "labels": [
      "Question",
      "Resolution-External",
      "Resolution-Not Applicable"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42956",
    "body": "Hello!\r\n\r\nI want to create simple programming language for my diploma and compile it via Roslyn. I made translating code in my language to `CSharpSyntaxTree` object and now I can compile this syntax tree using Roslyn. But I have a problem with diagnostic messages because tokens' positions in program in my language don't match with positions in CSharpSyntaxTree. For example, program in my language\r\n```\r\nprint a;\r\n```\r\nmatches with this C# program (it was gotten by `SyntaxTree.ToString()` method)\r\n```\r\nusingSystem;namespaceApp{publicclassProgram{staticvoidMain(){Console.WriteLine(a);}}}\r\n```\r\nFor example, in my code the `a` identifier has position `(1;7)` (or just **7**) but in showed C# code a position of identifier's node is **80**.\r\n\r\nI want that source positions in my language will be contained in `Diagnostic` objects after compilation.\r\n\r\nI read that Roslyn keep offset of nodes instead of position `(row;column)` and I shouldn't change it manually because it depends from values of other nodes. So, I added `LexLocation` property to `SyntaxNode` class, the structure which contains `lineStart`, `lineEnd`, `colStart`, `colEnd`. But I couldn't change diagnostic's logic for showing my `LexLocation` in diagnostic's messages. \r\n\r\nCan you get me advice, how to do this?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42956/comments",
    "author": "nikitaodnorob",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-31T21:59:48Z",
        "body": "Hi Nikita,\r\n\r\nIn general, questions like this should be taken to gitter.im/dotnet/roslyn, or discord.gg/csharp (#roslyn channel).\r\n\r\nI'm going to close this out.  however, as a general idea, the way you'd want to do this is to keep track of the original location that your generated code spans map to.  Since you're hte one generating the new code, it should be easy for you to keep an auxiliary structure to store that mapping info.\r\n\r\nThen, when you get diagnostics, you can translate those positoins backward from teh the roslyn tree location to your own original location."
      }
    ]
  },
  {
    "number": 42891,
    "title": "Getting solution",
    "created_at": "2020-03-30T04:36:47Z",
    "closed_at": "2020-04-01T23:01:18Z",
    "labels": [
      "Resolution-Duplicate",
      "Question",
      "Area-IDE",
      "IDE-MSBuildWorkspace"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42891",
    "body": "I need to get existing solution. I used MSBuildWorkspace, but there're 0 projects in solution, what I can do? (variant with AdhocWorkspace doesn't work too)\r\n`using (var workspace = MSBuildWorkspace.Create())\r\n            {\r\n                var solution = workspace.OpenSolutionAsync(SolutionPath).Result;\r\n            }`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42891/comments",
    "author": "typicalHuman",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-30T05:00:54Z",
        "body": "If you listen to `workspace.WorkspaceFailed` do you get notified about any issues?"
      },
      {
        "user": "sharwell",
        "created_at": "2020-04-01T23:01:18Z",
        "body": "Duplicate of #41331"
      }
    ]
  },
  {
    "number": 41980,
    "title": "Not all InvocationExpression are rewritten",
    "created_at": "2020-02-27T07:14:38Z",
    "closed_at": "2020-02-29T07:56:03Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41980",
    "body": "**Version Used**: \r\nCore3.1 ConsoleApp\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nprivate class Rewriter : CSharpSyntaxRewriter\r\n    {\r\n        public int Id { get; set; }\r\n        public override SyntaxNode VisitInvocationExpression(InvocationExpressionSyntax node)\r\n        {\r\n            var invokName = node.Expression.ToString();\r\n            if (invokName == \"MyMethod\")\r\n            {\r\n                var argus = node.ArgumentList.AddArguments(\r\nSyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal(Id))));\r\n                return node.Update((ExpressionSyntax)Visit(node.Expression), argus);\r\n            }\r\n            return node;\r\n        }\r\n    }\r\n    static void Main(string[] args)\r\n    {\r\n        SyntaxTree oriTree = CSharpSyntaxTree.ParseText(@\"\r\n        public class MyClass\r\n        {\r\n            public string MyMethod(int id)\r\n            {\r\n                return $\"\"{id}\"\";\r\n            }\r\n            public void Say()\r\n            {\r\n                var tmp = MyMethod();//worked\r\n                var tmp1 = MyMethod();//worked\r\n                var tmp2 = \"\"Hi \"\" + MyMethod();//worked\r\n                Console.WriteLine($\"\"Say {MyMethod()}\"\");//Not worked\r\n                Console.WriteLine(\"\"Hello \"\" + MyMethod());//Not worked                    \r\n            }\r\n        }\");\r\n        var syntaxRoot = oriTree.GetCompilationUnitRoot();\r\n        var visitor = new Rewriter();\r\n        visitor.Id = 0;\r\n        var changedSyntaxTree = visitor.Visit(syntaxRoot).SyntaxTree;\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nI want to rewrite all InvocationExpression of \"MyMethod\" in a SyntaxTree to add a literal param 0\r\n**Actual Behavior**:\r\nNot all InvocationExpression are rewritten.\r\n\r\n`var methods = syntaxRoot.DescendantNodes().OfType<InvocationExpressionSyntax>().Where(o => o.Expression.ToString() == \"MyMethod\");` can enumerate all InvocationExpression of \"MyMethod\".",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41980/comments",
    "author": "zhusheping",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2020-02-28T23:29:17Z",
        "body": "do you need to call `base.Visit(node)` in order to visit nested invocation expressions?"
      },
      {
        "user": "zhusheping",
        "created_at": "2020-02-29T05:47:24Z",
        "body": "> do you need to call `base.Visit(node)` in order to visit nested invocation expressions?\r\n```\r\nif (invokName == \"MyMethod\")\r\n {\r\n    var argus = node.ArgumentList.AddArguments(\r\nSyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal(Id))));\r\n    return node.Update((ExpressionSyntax)Visit(node.Expression), argus);\r\n }\r\n//???\r\nelse if (node.ArgumentList.Arguments.Any(o => o.Expression.ToString().Contains(\"MyMethod\")))\r\n {\r\n     //???\r\n }\r\nreturn node;\r\n```\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-02-29T07:38:59Z",
        "body": "you need to do this instead:\r\n\r\n```c#\r\n        public override SyntaxNode VisitInvocationExpression(InvocationExpressionSyntax node)\r\n        {\r\n            node = (InvocationExpressionSyntax)base.VisitInvocationExpression(node);\r\n            // now, the rest of your code:\r\n            var invokName = node.Expression.ToString();\r\n            // etc.\r\n```\r\n\r\nNote: i would recomment using SyntaxEditor instead of a rewriter here.  it will make the code a lot easier and cleaner."
      },
      {
        "user": "zhusheping",
        "created_at": "2020-02-29T07:56:03Z",
        "body": "@CyrusNajmabadi \r\nWow, It's done. Thands a lot!\r\nI haven't learned to use the syntax editor yet, and I can find very little information\r\n"
      }
    ]
  },
  {
    "number": 41932,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"Found_0_assemblies_for_1\"",
    "created_at": "2020-02-25T13:03:17Z",
    "closed_at": "2020-03-10T12:55:09Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41932",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nFound '{0}' assemblies for '{1}':\r\n\r\nFile Name:\r\nEditorFeatures\\CSharp\\xlf\\CSharpEditorResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nPlease specify the meaning of the placeholders.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41932/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-02-26T16:03:49Z",
        "body": "{0}: The number of matching assemblies (non-negative integer)\r\n{1}: An assembly name, such as `System` or `Microsoft.CodeAnalysis.Workspaces`"
      },
      {
        "user": "PDostalek",
        "created_at": "2020-03-10T12:55:09Z",
        "body": "Thanks"
      }
    ]
  },
  {
    "number": 41931,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"_0_items_in_cache\"",
    "created_at": "2020-02-25T12:56:59Z",
    "closed_at": "2020-03-10T12:52:46Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41931",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\n'{0}' items in cache\r\n\r\nFile Name:\r\nEditorFeatures\\CSharp\\xlf\\CSharpEditorResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWhat will {0} be replaced with?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41931/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-02-26T16:02:35Z",
        "body": "{0} will be replaced with an integer value. The cache contains 0 or more items of an unspecified type. The replacement is this count."
      },
      {
        "user": "PDostalek",
        "created_at": "2020-03-10T12:52:46Z",
        "body": "Thanks @sharwell  for the reply."
      }
    ]
  },
  {
    "number": 41930,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"WRN_ShouldNotReturn\"",
    "created_at": "2020-02-25T10:31:45Z",
    "closed_at": "2020-02-26T07:42:35Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41930",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nA method marked [DoesNotReturn] should not return.\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nDoes \"return\" mean \"return a value\" in this context?\r\n\r\n0; \"WRN_ShouldNotReturn\"\r\n0; \"WRN_ShouldNotReturn_Title\"",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41930/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "YairHalberstadt",
        "created_at": "2020-02-25T12:52:20Z",
        "body": "Return means it should not exit the method normally.\r\n\r\nIn a non-void method that would be return a value.\r\nIn a void method that would mean either it has an explicit reachable return statement, or the end of the method is reachable.\r\n\r\nFor example these would trigger the error:\r\n\r\n```csharp\r\n[DoesNotReturn]\r\nvoid M(){}\r\n\r\n[DoesNotReturn]\r\nvoid M(){ return; }\r\n\r\n[DoesNotReturn]\r\nint M(){ return 5; }\r\n```\r\n\r\nBut this wouldn't:\r\n\r\n```csharp\r\n[DoesNotReturn]\r\nvoid M() { throw new Exception(); }\r\n```"
      }
    ]
  },
  {
    "number": 41929,
    "title": "[loc][Query][Roslyn] Localizability of  0; \"WRN_ParameterConditionallyDisallowsNull\"",
    "created_at": "2020-02-25T10:03:37Z",
    "closed_at": "2020-03-10T12:31:44Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41929",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nParameter '{0}' may not have a null value when exiting with '{1}'.\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nPlease specify the meaning of the placeholders.\r\n\r\nWhat's the correct meaning?\r\n\r\n1) The parameter can't have a null value\r\n2) It's possible that the parameter has a null value\r\n\r\n0; \"WRN_ParameterConditionallyDisallowsNull\"\r\n0; \"WRN_ParameterConditionallyDisallowsNull_Title\"",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41929/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-02-26T16:01:11Z",
        "body": "@jcouv I believe you added this one?"
      },
      {
        "user": "jcouv",
        "created_at": "2020-02-26T20:55:19Z",
        "body": "Here's an example:\r\n\r\n```\r\nbool M([NotNullWhen(true)] out string? p)\r\n{\r\n  p = null;\r\n  return true; // Parameter 'p' may not have a null value when exiting with 'true'.\r\n}\r\n```\r\n\r\nThe warning means that the compiler detected that the parameter may hold a `null` value by the time we reach a statement that isn't `return false;` (ie. a possible `true` value being returned). This happens when the parameter is annotated with `[NotNullWhen(true)]`."
      }
    ]
  },
  {
    "number": 41651,
    "title": "Cannot find the controlFlowGraph class in roslyn flow analysis package",
    "created_at": "2020-02-13T13:14:07Z",
    "closed_at": "2020-02-14T11:12:49Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41651",
    "body": "I cannot understand why I am getting an error (using VS2017) for the code in below related to not finding the class ControlFlowGraph which is supposed to be part of the package Microsoft.CodeAnalysis.FlowAnalysis:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Build.Locator;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.CSharp.Symbols;\r\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\nusing Microsoft.CodeAnalysis.FlowAnalysis;\r\n\r\nnamespace CodeAnalysisApp3\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            // Attempt to set the version of MSBuild.\r\n            var visualStudioInstances = MSBuildLocator.QueryVisualStudioInstances().ToArray();\r\n            var instance = visualStudioInstances[0];\r\n\r\n            Console.WriteLine($\"Using MSBuild at '{instance.MSBuildPath}' to load projects.\");\r\n\r\n            // NOTE: Be sure to register an instance with the MSBuildLocator \r\n            //       before calling MSBuildWorkspace.Create()\r\n            //       otherwise, MSBuildWorkspace won't MEF compose.\r\n            MSBuildLocator.RegisterInstance(instance);\r\n\r\n            using (var workspace = MSBuildWorkspace.Create())\r\n            {\r\n                // Print message for WorkspaceFailed event to help diagnosing project load failures.\r\n                workspace.WorkspaceFailed += (o, e) => Console.WriteLine(e.Diagnostic.Message);\r\n\r\n                var solutionPath = args[0];\r\n                Console.WriteLine($\"Loading solution '{solutionPath}'\");\r\n\r\n                // Attach progress reporter so we print projects as they are loaded.\r\n                var solution = await workspace.OpenSolutionAsync(solutionPath, new ConsoleProgressReporter());\r\n                Console.WriteLine($\"Finished loading solution '{solutionPath}'\");\r\n\r\n                // TODO: Do analysis on the projects in the loaded solution\r\n                CSharpParseOptions options = CSharpParseOptions.Default\r\n                .WithFeatures(new[] { new KeyValuePair<string, string>(\"flow-analysis\", \"\") });\r\n\r\n                var projIds = solution.ProjectIds;\r\n\r\n                var project = solution.GetProject(projIds[0]);\r\n\r\n                Compilation compilation = await project.GetCompilationAsync();\r\n\r\n                if (compilation != null && !string.IsNullOrEmpty(compilation.AssemblyName))\r\n                {\r\n                    var mySyntaxTree = compilation.SyntaxTrees.First();\r\n\r\n                    // get syntax nodes for methods\r\n                    var methodNodes = from methodDeclaration in mySyntaxTree.GetRoot().DescendantNodes()\r\n                               .Where(x => x is MethodDeclarationSyntax)\r\n                                      select methodDeclaration;\r\n\r\n                    foreach (MethodDeclarationSyntax node in methodNodes)\r\n                    {\r\n                        var model = compilation.GetSemanticModel(node.SyntaxTree);\r\n                        node.Identifier.ToString();\r\n                        if (node.SyntaxTree.Options.Features.Any())\r\n                        {\r\n                            var graph = ControlFlowGraph.Create(node, model); // CFG is here\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private class ConsoleProgressReporter : IProgress<ProjectLoadProgress>\r\n        {\r\n            public void Report(ProjectLoadProgress loadProgress)\r\n            {\r\n                var projectDisplay = Path.GetFileName(loadProgress.FilePath);\r\n                if (loadProgress.TargetFramework != null)\r\n                {\r\n                    projectDisplay += $\" ({loadProgress.TargetFramework})\";\r\n                }\r\n\r\n                Console.WriteLine($\"{loadProgress.Operation,-15} {loadProgress.ElapsedTime,-15:m\\\\:ss\\\\.fffffff} {projectDisplay}\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nHowever, when I compile the above code I am getting the following error message with VS2017:\r\n\r\n```\r\n1>Program.cs(67,41,67,57): error CS0103: The name 'ControlFlowGraph' does not exist in the current context\r\n1>Done building project \"CodeAnalysisApp3.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n\r\n**Version Used**: \r\n```\r\nMicrosoft (R) Visual C# Compiler version 4.8.3761.0\r\nfor C# 5\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. compiling the code in above with VS 2017\r\n\r\n\r\n**Expected Behavior**:\r\n\r\ncorrect compilation \r\n\r\n**Actual Behavior**:\r\n```\r\n1>Program.cs(67,41,67,57): error CS0103: The name 'ControlFlowGraph' does not exist in the current context\r\n1>Done building project \"CodeAnalysisApp3.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41651/comments",
    "author": "beillahi",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2020-02-13T15:08:16Z",
        "body": "could you list which nuget package versions you are using? I would assume you are on the latest?"
      },
      {
        "user": "beillahi",
        "created_at": "2020-02-13T15:21:12Z",
        "body": "I am using the following packages:\r\n```\r\nCodeAnalysis.CSharp.Workspaces (2.9.0-beta4-63006-05)\r\nCodeAnalysis.FlowAnalysis.Utilities (2.9.6)\r\nCodeAnalysis.Workspaces.MSBuild (2.9.0-beta4-63006-05)\r\n```\r\n"
      },
      {
        "user": "mavasani",
        "created_at": "2020-02-13T19:28:21Z",
        "body": "Can you please switch to version 3.x of `CodeAnalysis.CSharp.Workspaces`? ControlFlowGraph was an experimental API in 2.9 and was made a supported public API in 3.0"
      },
      {
        "user": "beillahi",
        "created_at": "2020-02-14T11:12:49Z",
        "body": "Changing to the following packages:\r\n```\r\nCodeAnalysis.CSharp.Workspaces (3.4.0)\r\nCodeAnalysis.FlowAnalysis.Utilities (2.9.6)\r\nCodeAnalysis.Workspaces.MSBuild (3.4.0)\r\n```\r\nIt fixes the problem when using as the target framework ```.NETFramework 4.7.2```\r\n\r\nThanks for help.\r\n"
      }
    ]
  },
  {
    "number": 41388,
    "title": "How can i disable xml document generation in c# project",
    "created_at": "2020-02-04T10:08:49Z",
    "closed_at": "2020-02-04T20:06:35Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41388",
    "body": "**Version Used**: \r\nVisual studio 2019 16.4.4\r\n**Steps to Reproduce**:\r\n\r\n1. add `<GenerateDocumentation>false</GenerateDocumentation>` to a csproj file\r\n2. clieck build\r\n3. document always generated\r\n\r\n**Expected Behavior**:\r\nHow can i disable xml document generation ?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41388/comments",
    "author": "endink",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-02-04T20:05:28Z",
        "body": "The property is `GenerateDocumentationFile` 👍 "
      }
    ]
  },
  {
    "number": 41387,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"DocumentIsOutOfSyncWithDebuggee\"",
    "created_at": "2020-02-04T09:00:00Z",
    "closed_at": "2020-02-25T07:25:20Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Globalization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41387",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nThe current content of source file '{0}' does not match the built source. Any changes made to this file while debugging won't be applied until its content matches the built source.\r\n\r\nFile Name:\r\nFeatures\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nDoes \"built source\" mean \"compiled source code\"?\r\n\r\nAffected IDs:\r\n0; \"UnableToReadSourceFileOrPdb\"\r\nUnable to read source file '{0}' or the PDB built for the containing project. Any changes made to this file while debugging won't be applied until its content matches the built source.\r\n\r\nQ2: Containing what? The source file or PDB?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41387/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "tmat",
        "created_at": "2020-02-21T21:17:35Z",
        "body": "> Does \"built source\" mean \"compiled source code\"?\r\n\r\nYes. The source code that was used to compile the assembly.\r\n\r\n> Q2: Containing what? The source file or PDB?\r\n\r\nWe mean the project that contains the source file listed in `'{0}'`. The issue is that we can't read the source file itself, or the PDB that is built for this project.\r\n\r\n"
      },
      {
        "user": "PDostalek",
        "created_at": "2020-02-25T07:25:20Z",
        "body": "Thank you"
      }
    ]
  },
  {
    "number": 41386,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"ERR_AssgReadonly\"",
    "created_at": "2020-02-04T08:52:01Z",
    "closed_at": "2020-02-06T12:21:32Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Globalization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41386",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nA readonly field cannot be assigned to (except in a constructor of the class in which the field is defined or a variable initializer))\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\ncan the sentence be rephrased as \"A readonly field cannot be assigned (...)\", as the object the field can not be assigned to does not exist?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41386/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "ryzngard",
        "created_at": "2020-02-04T20:16:18Z",
        "body": "@PDostalek It might be more helpful to reword entirely. \"A readonly field cannot be assigned a value (except in a constructor of the class in which the field is defined or a variable initializer)\" \r\n\r\n\"A readonly field cannot be assigned (...)\" still gives the same meaning and is more correct grammatically than the original.  \r\n\r\nEdit: \r\n\r\nAfter consideration and some research, I believe \"assigned to\" to be more common usage. It has implicit indication that there is an item altering the state of the field. Without the \"to\", that relation isn't know. \r\n\r\nThat said, this sentence should be interpreted as \"A readonly field cannot be assigned a value (except in a constructor of the class in which the field is defined or a variable initializer)\"  for the purposes of translation. All present English usages will be interpreted correctly. \r\n"
      },
      {
        "user": "PDostalek",
        "created_at": "2020-02-06T12:21:32Z",
        "body": "Many thanks"
      }
    ]
  },
  {
    "number": 41337,
    "title": "Need some clarification on how to debug PDB/Source embedding",
    "created_at": "2020-01-31T18:22:45Z",
    "closed_at": "2024-10-21T19:11:44Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41337",
    "body": "Hey Team,\r\n\r\nI am hoping you could help me figure out how to confirm, given a DLL, that it has an embedded PDB with embedded Source in the PDB?\r\n\r\nI am familiar with the C++ Build Tools, and the use up dumpbin /headers to confirm that the PDB is embedded.\r\n\r\nI also need a way to confirm that the source is embedded in the PDB.\r\n\r\nI am using the following cjproj configuration to embed my pdb in the dll, and to embed source in the pdb:\r\n\r\n```\r\n<EmbedSources>true</EmbedSources>\r\n<EmbedAllSources>true</EmbedAllSources>\r\n<DebugType>embedded</DebugType>\r\n<Optimize>false</Optimize>\r\n```\r\n\r\nBONUS QUESTION: it seems that I do in fact have my sources embedded based on being able to Go To Definition on a method in the DLL.  However, I am still not able to Step-Into the code while Debugging.  What am I missing?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41337/comments",
    "author": "iCodeWebApps",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:11:44Z",
        "body": "Closing out due to lack of responses here."
      }
    ]
  },
  {
    "number": 41311,
    "title": "Add a public member of CompletionContext that allows callers to get a snapshot of the completion items for testing purposes",
    "created_at": "2020-01-30T14:23:13Z",
    "closed_at": "2022-11-01T19:16:07Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41311",
    "body": "**Version Used**: \r\nMicrosoft.CodeAnalysis.Features, Version=2.6.0.0\r\n\r\nFor the purposes of testing completion providers, it will be useful for the CompletionContext class to provide a public method that returns a snapshot of the completion items saved in the currently internal Items property.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41311/comments",
    "author": "ymassad",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-01-30T19:18:05Z",
        "body": "It's intentionally not exposed.  There may be no actual backing \"snapshot\" of items to give the user.  That's currently an implementation detail.\r\n\r\nIf you want a snapshot for testing purposes, you can wrap the existing context object in your own type and expose that for testing.  Your own type then forwards everything along to the real type."
      },
      {
        "user": "Dreamescaper",
        "created_at": "2020-01-30T22:50:56Z",
        "body": "Had same issue, used reflection to get Items in tests.\r\n\r\n> you can wrap the existing context object in your own type and expose that for testing. \r\n\r\nNot sure how it's going to work - CompletionContext is sealed class."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-01-30T22:57:36Z",
        "body": "> Not sure how it's going to work - CompletionContext is sealed class.\r\n\r\nComposition:\r\n\r\n`class MyWhatever { private CompletionContext _context; }`\r\n\r\nyour MyWhatever can track all the information you need for tests, and it will pass along the data as appropriate to the underlying CompletionContext type."
      },
      {
        "user": "Dreamescaper",
        "created_at": "2020-01-30T23:02:40Z",
        "body": "Sure, but I cannot pass this to `ProvideCompletionsAsync` method, which I want to test. So how it helps?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-01-30T23:13:40Z",
        "body": "> Sure, but I cannot pass this to ProvideCompletionsAsync method, which I want to test. \r\n\r\nHave an overload that you can test.  Pass it this guy.  Have the normal guy call this guy as well.  "
      },
      {
        "user": "sharwell",
        "created_at": "2020-02-05T00:21:56Z",
        "body": "It's not possible to test the `CompletionContext.Items` directly, but you can test through `CompletionServiceWithProviders.GetCompletionsAsync`."
      },
      {
        "user": "ymassad",
        "created_at": "2020-02-06T10:19:05Z",
        "body": "@sharwell, how can I test my custom completion provider using the solution you suggested? Can you provide an example?"
      },
      {
        "user": "sharwell",
        "created_at": "2020-02-06T13:55:06Z",
        "body": "@ymassad One example would be the testing in `AttributeNamedParameterCompletionProviderTests` in the context of #40097 (prior to this pull request, the class uses internal-only access points for testing, but starting with that pull request it should work like any other completion provider using public APIs)."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T19:16:07Z",
        "body": "This would need to go through an API proposal.  in general, the reason we don't just make things public is because it increases maintenance costs and locks down our ability to change things in teh future.  We can open things up, but we have a process that requests need to go through to make sure the appropriate people weigh in and the right API shape is determined and shipped.  "
      }
    ]
  },
  {
    "number": 40810,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"Error_reading_content_of_source_file_0_1\"",
    "created_at": "2020-01-08T13:55:21Z",
    "closed_at": "2020-01-20T13:03:08Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40810",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nError reading content of source file '{0}' -- '{1}'.\r\n\r\nID:\r\n0; \"Error_reading_content_of_source_file_0_1\"\r\n\r\nFile Name:\r\nWorkspaces\\Core\\Portable\\xlf\\WorkspacesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWhat does the placeholders stand for?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40810/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2020-01-17T00:46:02Z",
        "body": "@tmat may want to confirm, but the {0} place holder is the path to the file on the user's machine. The {1} is filled in with an exception message. So you might see something like:\r\n\r\n> Error reading content of source file 'Foo.cs' -- 'Access denied'."
      },
      {
        "user": "PDostalek",
        "created_at": "2020-01-20T13:03:08Z",
        "body": "Thanks @jasonmalinowski "
      }
    ]
  },
  {
    "number": 40809,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"Open_Documents_and_Projects\"",
    "created_at": "2020-01-08T13:52:14Z",
    "closed_at": "2020-01-21T13:51:35Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40809",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nOpen Documents and Projects\r\n\r\nID:\r\n0; \"Open_Documents_and_Projects\"\r\n\r\nFile Name:\r\nVisualStudio\\Core\\Def\\xlf\\ServicesVSResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nIs Open a verb or an adjective here, i.e. are the documents and projects open already or is this the action to open them?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40809/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2020-01-17T00:47:54Z",
        "body": "@PDostalek Open is an adjective. This is saying \"process documents that are already open\". Did we also make further changes here @mavasani?"
      },
      {
        "user": "mavasani",
        "created_at": "2020-01-17T00:49:43Z",
        "body": "Yes, I just removed this resource string yesterday and replaced it with \"Open documents\""
      },
      {
        "user": "PDostalek",
        "created_at": "2020-01-21T13:51:35Z",
        "body": "thx for reply"
      }
    ]
  },
  {
    "number": 40808,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"Extract_method_plus_local\"",
    "created_at": "2020-01-08T13:49:26Z",
    "closed_at": "2020-02-25T07:26:27Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40808",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nExtract method + local\r\n\r\nID:\r\n0; \"Extract_method_plus_local\"\r\n\r\nFile Name:\r\nFeatures\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nDoes \"local\" mean \"local data?\"",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40808/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "ryzngard",
        "created_at": "2020-02-22T03:46:53Z",
        "body": "In this case local is a local variable that may be moved into the extracted method "
      },
      {
        "user": "PDostalek",
        "created_at": "2020-02-25T07:26:26Z",
        "body": "Thank you"
      }
    ]
  },
  {
    "number": 40807,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"Extract_interface\"",
    "created_at": "2020-01-08T13:42:34Z",
    "closed_at": "2020-01-20T14:00:43Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40807",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nExtract interface...\r\n\r\nID:\r\n0; \"Extract_interface\"\r\n\r\nFile Name:\r\nFeatures\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nIs \"Extract\" an imperative, infinitive or noun?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40807/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "ryzngard",
        "created_at": "2020-01-14T21:16:58Z",
        "body": "@PDostalek \"Extract\" is a commanding verb in this context, which makes it imperative. "
      },
      {
        "user": "PDostalek",
        "created_at": "2020-01-20T14:00:43Z",
        "body": "thanks"
      }
    ]
  },
  {
    "number": 40805,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"Convert_to_switch_expression\"",
    "created_at": "2020-01-08T13:31:44Z",
    "closed_at": "2020-01-15T16:52:29Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40805",
    "body": "Hello developers,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nConvert to 'switch' expression\r\n\r\nID:\r\n0; \"Convert_to_switch_expression\"\r\n\r\nFile Name:\r\nVisualStudio\\Core\\Def\\xlf\\Commands.vsct.xlf\r\n\r\n==========================================\r\nQuery:\r\nWe assume \"switch\" is not localizable. Just an expression . Please confirm",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40805/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2020-01-15T16:48:58Z",
        "body": "Hi @PDostalek,\r\n\r\n`switch` is a keyword in C#, and should not be localized."
      },
      {
        "user": "PDostalek",
        "created_at": "2020-01-20T13:05:37Z",
        "body": "Thanks"
      }
    ]
  },
  {
    "number": 40687,
    "title": "Property IsImplicitlyDeclared returns false for MySettings and similar symbols",
    "created_at": "2020-01-01T15:49:47Z",
    "closed_at": "2020-01-20T11:48:19Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40687",
    "body": "**Version Used**: 3.4.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Visual Basic .NET Framework 4.7.2 Class Library\r\n2. Enumerate symbols in this library\r\n```csh\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Build.Locator;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\n\r\ninternal static class Program\r\n{\r\n    private static async Task Main(string[] args)\r\n    {\r\n        MSBuildLocator.RegisterDefaults();\r\n\r\n        using (var workspace = MSBuildWorkspace.Create())\r\n        {\r\n            var project = await workspace.OpenProjectAsync(@\"E:\\Projects\\Mix\\Foo\\Foo.vbproj\");\r\n            Compilation compilation = await project.GetCompilationAsync().ConfigureAwait(false);\r\n            var namespaceOrTypeSymbols = new Stack<INamespaceOrTypeSymbol>();\r\n            namespaceOrTypeSymbols.Push(compilation.Assembly.GlobalNamespace);\r\n\r\n            while (namespaceOrTypeSymbols.Count > 0)\r\n            {\r\n                INamespaceOrTypeSymbol namespaceOrTypeSymbol = namespaceOrTypeSymbols.Pop();\r\n\r\n                foreach (ISymbol symbol in namespaceOrTypeSymbol.GetMembers())\r\n                {\r\n                    switch (symbol.Kind)\r\n                    {\r\n                        case SymbolKind.Namespace:\r\n                            {\r\n                                namespaceOrTypeSymbols.Push((INamespaceSymbol)symbol);\r\n                                break;\r\n                            }\r\n                        case SymbolKind.NamedType:\r\n                            {\r\n                                if (symbol.Name.StartsWith(\"My\"))\r\n                                {\r\n                                    var namedType = (INamedTypeSymbol)symbol;\r\n                                    Console.WriteLine($\"{namedType.Name} {namedType.IsImplicitlyDeclared}\");\r\n                                    namespaceOrTypeSymbols.Push(namedType);\r\n                                }\r\n\r\n                                break;\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\nOutput:\r\n```\r\nMyApplication False\r\nMyComputer False\r\nMyProject False\r\nMySettings False\r\nMySettingsProperty False\r\nMyWebServices False\r\n```\r\n\r\n**Expected Behavior**:\r\nproperty `IsImplicitlyDeclared` returns `true` for My... symbols\r\n**Actual Behavior**:\r\nproperty `IsImplicitlyDeclared` returns `false` for My... symbols",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40687/comments",
    "author": "josefpihrt",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2020-01-02T18:49:19Z",
        "body": "@333fred @AlekseyTs Do you have an opinion on whether the behavior of the API is correct or not?"
      },
      {
        "user": "AlekseyTs",
        "created_at": "2020-01-02T19:38:27Z",
        "body": "I assume this is for types from \"My\" template. Those are actually declared in code that is embedded by the compiler itself. I assume there is an actual syntax behind the symbol. Also, I believe these types can be extended by the user by providing other partial declarations. I doubt the current behavior is an accident. An implementation for \"My\" template types is intentionally different from other \"embedded\" types. If a client needs to filter those out, I think this can be done by checking DeclaringSyntaxReferences or Locations (I think the Kind is None).    "
      },
      {
        "user": "josefpihrt",
        "created_at": "2020-01-20T11:48:19Z",
        "body": "@AlekseyTs Thanks for explanation."
      }
    ]
  },
  {
    "number": 40423,
    "title": "Question: Indirect References for a DTO and Entity",
    "created_at": "2019-12-16T22:16:55Z",
    "closed_at": "2019-12-19T18:59:29Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40423",
    "body": "Dear fellows, \r\n\r\nI was wondering if is it possible to create an indirect connection between two properties at different classes, so  Intelisense would recognizes as one for indication 'references count'? (without inheritance or other language feature)\r\n\r\nLike (concept):\r\n\r\n```csharp\r\nclass Person {\r\n  string Name {get; set;}\r\n}\r\n\r\n\r\nclass PersonDto {\r\n  ///<feature-connect>Person.Name</feature-connect> // or any other thing  \r\n  string Name {get; set;}\r\n}\r\n```\r\n\r\nSo when I see though IDE would appear 1 references at Name property.\r\n\r\nHow could that be achieved?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40423/comments",
    "author": "lixaotec",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-12-19T18:50:35Z",
        "body": "You can use the `seealso` documentation element for this:\r\n\r\n```\r\n/// <seealso cref=\"Person.Name\"/>\r\n```"
      },
      {
        "user": "lixaotec",
        "created_at": "2019-12-19T18:59:29Z",
        "body": "Thanks @sharwell "
      }
    ]
  },
  {
    "number": 39496,
    "title": "implementing a nullable guard method",
    "created_at": "2019-10-24T13:21:29Z",
    "closed_at": "2020-04-02T22:43:38Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Feature - Nullable Reference Types"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39496",
    "body": "Is there any way I can write the guard method `Guard.ThrowIfNotNull` for the example below so that the compiler warning CS8602 goes away?\r\n\r\n```\r\npublic void SomeMethod(object? someArgument)\r\n{\r\n    Guard.ThrowIfNotNull(nameof(someArgument), someArgument);\r\n    Console.WriteLine(someArgument.ToString()); // CS8602: Dereference of a possibly null reference.\r\n}\r\n```\r\n\r\nFor reference, this is what I could write for the ReSharper/Rider code analysis. I could use the attribute ` [ContractAnnotation(\"halt <= argument:null\")]` to tell the analyzer that the guard method will not return if its argument named `argument` is null.\r\n\r\n```\r\ninternal static class Guard\r\n{\r\n    // ReSharper disable once ParameterOnlyUsedForPreconditionCheck.Global\r\n    [DebuggerStepThrough]\r\n    [ContractAnnotation(\"halt <= argument:null\")]\r\n    public static void ThrowIfArgumentNull([InvokerParameterName] string argumentName, object argument)\r\n    {\r\n        if (argument == null)\r\n        {\r\n            throw new ArgumentNullException(argumentName);\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39496/comments",
    "author": "bitbonk",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2019-10-24T20:44:15Z",
        "body": "As dotnet/csharplang#2814 describes, just put `[NotNull]` on `object argument`. "
      }
    ]
  },
  {
    "number": 39359,
    "title": "Analyze solution with WPF projects - MSBuildWorkspace",
    "created_at": "2019-10-17T17:55:05Z",
    "closed_at": "2024-01-23T00:19:15Z",
    "labels": [
      "Question",
      "Area-IDE",
      "IDE-MSBuildWorkspace"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39359",
    "body": "**Version Used**: VS 2017, \r\n\r\n**Steps to Reproduce**:\r\nAdded binding redirect to config file\r\n```\r\n<dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n    </dependentAssembly>\r\n```\r\n\r\n ```\r\nvar properties = new Dictionary<string, string>() {                                 \r\n                                    { \"DesignTimeBuild\", \"true\" },\r\n                                    { \"BuildingInsideVisualStudio\", \"true\" }\r\n                                };\r\nvar sourceCodePath = \"path to wpf project\";\r\nvar msBuildWorkSpace = MSBuildWorkspace.Create(properties);\r\nvar solution = msBuildWorkSpace.OpenSolutionAsync(sourceCodePath).Result;\r\nforeach (Microsoft.CodeAnalysis.Project project in solution.Projects)\r\n{\r\n  var projectCompilation = solution.GetProject(project.Id).GetCompilationAsync().Result;\r\n}\r\n\r\n```\r\nproject compilation fails with this error \"error CS5001: Program does not contain a static 'Main' method suitable for an entry point\"\r\n\r\n**Expected Behavior**:\r\nNo compilation errors.\r\n**Actual Behavior**:\r\nerror CS5001: Program does not contain a static 'Main' method suitable for an entry point",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39359/comments",
    "author": "sk78v",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2019-10-23T19:38:22Z",
        "body": "cc @jasonmalinowski , @jmarolf "
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2019-10-23T20:38:22Z",
        "body": "@sk78v You should need to do more binding redirects than just that one. What happens if you also add redirects for Microsoft.Build.Framework and Microsoft.Build.Engine?"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2024-01-23T00:19:15Z",
        "body": "Closing out as stale -- in any case with the latest 4.9 packages we'll handle redirects for you in our own separate process so nothing should be needed to be done anymore."
      }
    ]
  },
  {
    "number": 39286,
    "title": " [loc][Query][Roslyn] Localizability of 0; \"cmdidErrorListSetSeverityHidden|ButtonText\"",
    "created_at": "2019-10-15T11:05:27Z",
    "closed_at": "2020-10-19T09:05:54Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39286",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\n&Silent\r\n\r\nFile Name:\r\nVisualStudio\\Core\\Def\\xlf\\Commands.vsct.xlf\r\n\r\n==========================================\r\nQuery:\r\nIs silent translatable in this context?\r\nIt seems to be a command (other strings):\r\nNow interpreted as \"not logged\". Please confirm or advise. This concerns the following strings: \r\nSilent 0; \"cmdidErrorListSetSeverityHidden|LocCanonicalName\"\r\nSilent 0; \"cmdidSetSeverityHidden|LocCanonicalName\"\r\n0; \"cmdidErrorListSetSeverityHidden|ButtonText\"\r\n0; \"cmdidErrorListSetSeverityHidden|LocCanonicalName\"\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39286/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-10-15T12:33:01Z",
        "body": "@mavasani I believe we should be using \"Refactoring\" here for consistency with Tools&rarr;Options."
      },
      {
        "user": "mavasani",
        "created_at": "2019-10-15T20:45:19Z",
        "body": "> Is silent translatable in this context?\r\n\r\nNo, all the context menu commands here map to the exact string value that will added in the .editorconfig file by that command.\r\n\r\n> I believe we should be using \"Refactoring\" here for consistency with Tools→Options.\r\n\r\nI have been part of internal email threads where the preferred editorconfig term was \"silent\". If we decide to change this, then we need to update all the other tooling where we auto-generate silent in editorconfig files and also update the unit tests accordingly.\r\n\r\n"
      },
      {
        "user": "PDostalek",
        "created_at": "2019-11-21T08:52:58Z",
        "body": "@mavasani  Could you please provide us strings that should not be translated in this command menu ? We would like to check consistency. Thanks"
      },
      {
        "user": "PDostalek",
        "created_at": "2019-11-21T08:56:13Z",
        "body": "Are we talking about strings from this file ? VisualStudio\\Core\\Def\\xlf\\Commands.vsct.xlf "
      },
      {
        "user": "mavasani",
        "created_at": "2019-11-21T11:43:12Z",
        "body": "@PDostalek All the commands starting with `cmdidErrorListSetSeverity` in Commands.vsct should not be translated."
      },
      {
        "user": "PDostalek",
        "created_at": "2019-11-21T13:44:44Z",
        "body": "I will make changes according to your comment. Thanks !"
      },
      {
        "user": "janbaltus",
        "created_at": "2020-10-07T07:23:47Z",
        "body": "@mavasani \r\nall 3 examples need to be locked or only command  cmdidErrorListSetSeverityDefault|CommandName?\r\n\r\n0; \"cmdidErrorListSetSeverityDefault|ButtonText\"\r\n0; \"cmdidErrorListSetSeverityDefault|CommandName\"\r\n0; \"cmdidErrorListSetSeverityDefault|LocCanonicalName\""
      },
      {
        "user": "cristianosuzuki77",
        "created_at": "2020-10-07T20:18:58Z",
        "body": "@wli3 "
      },
      {
        "user": "wli3",
        "created_at": "2020-10-07T20:28:31Z",
        "body": "@sharwell @mavasani please work with @janbaltus @cristianosuzuki77 to resolve the issue soon. We are closing on 16.8 loc"
      },
      {
        "user": "mavasani",
        "created_at": "2020-10-08T18:08:52Z",
        "body": "@janbaltus @cristianosuzuki77 Yes, all those strings should be locked and not localized."
      }
    ]
  },
  {
    "number": 38956,
    "title": "Compile without switch optimizations",
    "created_at": "2019-09-30T18:40:53Z",
    "closed_at": "2019-09-30T20:41:33Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38956",
    "body": "# Issue Title\r\n\r\nIs possible to specify some flags in the compiler for disable some optimizations? \r\n\r\n# General\r\n\r\nAs i know, when a switch have a lot of entries, is added a method `ComputeStringHash` is possible to prevent this optimizations?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38956/comments",
    "author": "shargon",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-09-30T19:00:30Z",
        "body": ">  is possible to prevent this optimizations?\r\n\r\nThe only exposed option is `-optimize[+|-]                Enable optimizations (Short form: -o)`.  You cannot control individual optimizations."
      },
      {
        "user": "gafter",
        "created_at": "2019-09-30T20:41:33Z",
        "body": "@shargon This is not really an optimization.  It is just efficiently generating code for the construct.\r\n"
      }
    ]
  },
  {
    "number": 38579,
    "title": "Why does compiler generate a br instruction?",
    "created_at": "2019-09-08T17:47:18Z",
    "closed_at": "2019-09-09T19:16:50Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38579",
    "body": "```\r\n        static string GetString()\r\n        {\r\n            return \"Test\";\r\n        }\r\n```\r\n\r\nCompile it, view IL\r\n\r\n**Expected Behavior**:\r\n```\r\nldstr     \"Test\"\r\nret\r\n```\r\n\r\n**Actual Behavior**:\r\n```\r\nIL_0000: nop\r\nIL_0001: ldstr     \"Test\"\r\nIL_0006: stloc.0\r\nIL_0007: br.s      IL_0009\r\nIL_0009: ldloc.0\r\nIL_000A: ret\r\n```\r\n\r\nWhy does compiler generate so many IL instructions?  Especially, why does compiler generate a br instruction?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38579/comments",
    "author": "CreateAndInject",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2019-09-08T18:06:45Z",
        "body": "Is this debug or release build?"
      },
      {
        "user": "CreateAndInject",
        "created_at": "2019-09-08T18:16:30Z",
        "body": "I test it just now.\r\nRelease generates only 2 instructions : ldstr ret\r\nWhy does debug generate a br instruction?"
      },
      {
        "user": "Joe4evr",
        "created_at": "2019-09-09T06:09:01Z",
        "body": "So there's places where the debugger can break execution. "
      },
      {
        "user": "CreateAndInject",
        "created_at": "2019-09-09T06:47:57Z",
        "body": "Why does compiler use `br` rather than `nop`?"
      },
      {
        "user": "jaredpar",
        "created_at": "2019-09-09T16:56:05Z",
        "body": "@tmat can best explain why this is done. "
      },
      {
        "user": "gafter",
        "created_at": "2019-09-09T19:16:50Z",
        "body": "The designed debugging behavior for a method is that when you set a breakpoint on the close curly brace, you get stopped at that breakpoint when any return statement is executed.  Moreover, there are circumstances in which the debugger arranges to display the returned value.  In order to arrange those, when in debug mode the compiler places the returned value into a temp and jumps to the end of the method, where the value is loaded and returned.  You are seeing that code sequence."
      }
    ]
  },
  {
    "number": 38369,
    "title": " [loc][Query][roslyn] Localizability of \"0; \"WRN_UninitializedNonNullableField\"",
    "created_at": "2019-08-29T08:28:10Z",
    "closed_at": "2019-09-09T21:24:24Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38369",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nNon-nullable {0} '{1}' is uninitialized. Consider declaring the {0} as nullable.\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nassumed that the placeholder {0} will be replaced with \"field\" and translated accordingly. Please kindly inform us what this placeholder will be replaced with.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38369/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "miloush",
        "created_at": "2019-08-29T12:15:45Z",
        "body": "If you just searched this codebase for WRN_UninitializedNonNullableField, you would have found out that {0} can be either \"field\" or \"event\" or \"property\" and {1} is the name of that member."
      },
      {
        "user": "jaredpar",
        "created_at": "2019-09-09T21:24:24Z",
        "body": "As @miloush stated `{0}` can be replaced with \"field\", \"event\" or \"property\" while `{1}` is the name of the former."
      },
      {
        "user": "PDostalek",
        "created_at": "2019-09-12T12:44:26Z",
        "body": "@miloush @jaredpar I can not see any comment in your code about placeholders so I had to ask.\r\n\r\nThanks"
      }
    ]
  },
  {
    "number": 38368,
    "title": " [loc][Query][Roslyn] Localizability of \"0; \"IDS_CSCHelp\"",
    "created_at": "2019-08-29T08:15:44Z",
    "closed_at": "2019-09-09T21:25:53Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38368",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\n\\r\\n                             Visual C# Compiler Options\\r\\n\\r\\n                       - OUTPUT FILES -\\r\\n-out:<file>                   Specify output file name (default: base name of\\r\\n                              file with main class or first file)\\r\\n-target:exe                   Build a console executable (default) (Short\\r\\n                              form: -t:exe)\\r\\n-target:winexe                Build a Windows executable (Short form:\\r\\n                              -t:winexe)\\r\\n-target:library               Build a library (Short form: -t:library)\\r\\n-target:module                Build a module that can be added to another\\r\\n                              assembly (Short form: -t:module)\\r\\n-target:appcontainerexe       Build an Appcontainer executable (Short form:\\r\\n                              -t:appcontainerexe)\\r\\n-target:winmdobj              Build a Windows Runtime intermediate file that\\r\\n                              is consumed by WinMDExp (Short form: -t:winmdobj)\\r\\n-doc:<file>                   XML Documentation file to generate\\r\\n-refout:<file>                Reference assembly output to generate\\r\\n-platform:<string>            Limit which platforms this code can run on: x86,\\r\\n                              Itanium, x64, arm, arm64, anycpu32bitpreferred, or\\r\\n                              anycpu. The default is anycpu.\\r\\n\\r\\n                       - INPUT FILES -\\r\\n-recurse:<wildcard>           Include all files in the current directory and\\r\\n                              subdirectories according to the wildcard\\r\\n                              specifications\\r\\n-reference:<alias>=<file>     Reference metadata from the specified assembly\\r\\n                              file using the given alias (Short form: -r)\\r\\n-reference:<file list>        Reference metadata from the specified assembly\\r\\n                              files (Short form: -r)\\r\\n-addmodule:<file list>        Link the specified modules into this assembly\\r\\n-link:<file list>             Embed metadata from the specified interop\\r\\n                              assembly files (Short form: -l)\\r\\n-analyzer:<file list>         Run the analyzers from this assembly\\r\\n                              (Short form: -a)\\r\\n-additionalfile:<file list>   Additional files that don't directly affect code\\r\\n                              generation but may be used by analyzers for producing\\r\\n                              errors or warnings.\\r\\n-embed                        Embed all source files in the PDB.\\r\\n-embed:<file list>            Embed specific files in the PDB.\\r\\n\\r\\n                       - RESOURCES -\\r\\n-win32res:<file>              Specify a Win32 resource file (.res)\\r\\n-win32icon:<file>             Use this icon for the output\\r\\n-win32manifest:<file>         Specify a Win32 manifest file (.xml)\\r\\n-nowin32manifest              Do not include the default Win32 manifest\\r\\n-resource:<resinfo>           Embed the specified resource (Short form: -res)\\r\\n-linkresource:<resinfo>       Link the specified resource to this assembly\\r\\n                              (Short form: -linkres) Where the resinfo format\\r\\n                              is <file>[,<string name>[,public|private]]\\r\\n\\r\\n                       - CODE GENERATION -\\r\\n-debug[+|-]                   Emit debugging information\\r\\n-debug:{full|pdbonly|portable|embedded}\\r\\n                              Specify debugging type ('full' is default,\\r\\n                              'portable' is a cross-platform format,\\r\\n                              'embedded' is a cross-platform format embedded into\\r\\n                              the target .dll or .exe)\\r\\n-optimize[+|-]                Enable optimizations (Short form: -o)\\r\\n-deterministic                Produce a deterministic assembly\\r\\n                              (including module version GUID and timestamp)\\r\\n-refonly                      Produce a reference assembly in place of the main output\\r\\n-instrument:TestCoverage      Produce an assembly instrumented to collect\\r\\n                              coverage information\\r\\n-sourcelink:<file>            Source link info to embed into PDB.\\r\\n\\r\\n                       - ERRORS AND WARNINGS -\\r\\n-warnaserror[+|-]             Report all warnings as errors\\r\\n-warnaserror[+|-]:<warn list> Report specific warnings as errors\\r\\n-warn:<n>                     Set warning level (0-4) (Short form: -w)\\r\\n-nowarn:<warn list>           Disable specific warning messages\\r\\n-ruleset:<file>               Specify a ruleset file that disables specific\\r\\n                              diagnostics.\\r\\n-errorlog:<file>              Specify a file to log all compiler and analyzer\\r\\n                              diagnostics.\\r\\n-reportanalyzer               Report additional analyzer information, such as\\r\\n                              execution time.\\r\\n\\r\\n                       - LANGUAGE -\\r\\n-checked[+|-]                 Generate overflow checks\\r\\n-unsafe[+|-]                  Allow 'unsafe' code\\r\\n-define:<symbol list>         Define conditional compilation symbol(s) (Short\\r\\n                              form: -d)\\r\\n-langversion:?                Display the allowed values for language version\\r\\n-langversion:<string>         Specify language version such as\\r\\n                              `latest` (latest version, including minor versions),\\r\\n                              `default` (same as `latest`),\\r\\n                              `latestmajor` (latest version, excluding minor versions),\\r\\n                              `preview` (latest version, including features in unsupported preview),\\r\\n                              or specific versions like `6` or `7.1`\\r\\n-nullable[+|-]                Specify nullable context option enable|disable.\\r\\n-nullable:{enable|disable|warnings|annotations}\\r\\n                              Specify nullable context option enable|disable|warnings|annotations.\\r\\n\\r\\n                       - SECURITY -\\r\\n-delaysign[+|-]               Delay-sign the assembly using only the public\\r\\n                              portion of the strong name key\\r\\n-publicsign[+|-]              Public-sign the assembly using only the public\\r\\n                              portion of the strong name key\\r\\n-keyfile:<file>               Specify a strong name key file\\r\\n-keycontainer:<string>        Specify a strong name key container\\r\\n-highentropyva[+|-]           Enable high-entropy ASLR\\r\\n\\r\\n                       - MISCELLANEOUS -\\r\\n@<file>                       Read response file for more options\\r\\n-help                         Display this usage message (Short form: -?)\\r\\n-nologo                       Suppress compiler copyright message\\r\\n-noconfig                     Do not auto include CSC.RSP file\\r\\n-parallel[+|-]                Concurrent build.\\r\\n-version                      Display the compiler version number and exit.\\r\\n\\r\\n                       - ADVANCED -\\r\\n-baseaddress:<address>        Base address for the library to be built\\r\\n-checksumalgorithm:<alg>      Specify algorithm for calculating source file\\r\\n                              checksum stored in PDB. Supported values are:\\r\\n                              SHA1 or SHA256 (default).\\r\\n-codepage:<n>                 Specify the codepage to use when opening source\\r\\n                              files\\r\\n-utf8output                   Output compiler messages in UTF-8 encoding\\r\\n-main:<type>                  Specify the type that contains the entry point\\r\\n                              (ignore all other possible entry points) (Short\\r\\n                              form: -m)\\r\\n-fullpaths                    Compiler generates fully qualified paths\\r\\n-filealign:<n>                Specify the alignment used for output file\\r\\n                              sections\\r\\n-pathmap:<K1>=<V1>,<K2>=<V2>,...\\r\\n                              Specify a mapping for source path names output by\\r\\n                              the compiler.\\r\\n-pdb:<file>                   Specify debug information file name (default:\\r\\n                              output file name with .pdb extension)\\r\\n-errorendlocation             Output line and column of the end location of\\r\\n                              each error\\r\\n-preferreduilang              Specify the preferred output language name.\\r\\n-nosdkpath                    Disable searching the default SDK path for standard library assemblies.\\r\\n-nostdlib[+|-]                Do not reference standard library (mscorlib.dll)\\r\\n-subsystemversion:<string>    Specify subsystem version of this assembly\\r\\n-lib:<file list>              Specify additional directories to search in for\\r\\n                              references\\r\\n-errorreport:<string>         Specify how to handle internal compiler errors:\\r\\n                              prompt, send, queue, or none. The default is\\r\\n                              queue.\\r\\n-appconfig:<file>             Specify an application configuration file\\r\\n                              containing assembly binding settings\\r\\n-moduleassemblyname:<string>  Name of the assembly which this module will be\\r\\n                              a part of\\r\\n-modulename:<string>          Specify the name of the source module\\r\\n\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please check if the elements wihtin angle brackets can be translated?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38368/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "miloush",
        "created_at": "2019-08-29T12:04:46Z",
        "body": "At least make sure someone will be willing to read your question...\r\n\r\n```\r\n\r\n Visual C# Compiler Options\r\n\r\n - OUTPUT FILES -\r\n-out: Specify output file name (default: base name of\r\n file with main class or first file)\r\n-target:exe Build a console executable (default) (Short\r\n form: -t:exe)\r\n-target:winexe Build a Windows executable (Short form:\r\n -t:winexe)\r\n-target:library Build a library (Short form: -t:library)\r\n-target:module Build a module that can be added to another\r\n assembly (Short form: -t:module)\r\n-target:appcontainerexe Build an Appcontainer executable (Short form:\r\n -t:appcontainerexe)\r\n-target:winmdobj Build a Windows Runtime intermediate file that\r\n is consumed by WinMDExp (Short form: -t:winmdobj)\r\n-doc: XML Documentation file to generate\r\n-refout: Reference assembly output to generate\r\n-platform: Limit which platforms this code can run on: x86,\r\n Itanium, x64, arm, arm64, anycpu32bitpreferred, or\r\n anycpu. The default is anycpu.\r\n\r\n - INPUT FILES -\r\n-recurse: Include all files in the current directory and\r\n subdirectories according to the wildcard\r\n specifications\r\n-reference:= Reference metadata from the specified assembly\r\n file using the given alias (Short form: -r)\r\n-reference: Reference metadata from the specified assembly\r\n files (Short form: -r)\r\n-addmodule: Link the specified modules into this assembly\r\n-link: Embed metadata from the specified interop\r\n assembly files (Short form: -l)\r\n-analyzer: Run the analyzers from this assembly\r\n (Short form: -a)\r\n-additionalfile: Additional files that don't directly affect code\r\n generation but may be used by analyzers for producing\r\n errors or warnings.\r\n-embed Embed all source files in the PDB.\r\n-embed: Embed specific files in the PDB.\r\n\r\n - RESOURCES -\r\n-win32res: Specify a Win32 resource file (.res)\r\n-win32icon: Use this icon for the output\r\n-win32manifest: Specify a Win32 manifest file (.xml)\r\n-nowin32manifest Do not include the default Win32 manifest\r\n-resource: Embed the specified resource (Short form: -res)\r\n-linkresource: Link the specified resource to this assembly\r\n (Short form: -linkres) Where the resinfo format\r\n is [,[,public|private]]\r\n\r\n - CODE GENERATION -\r\n-debug[+|-] Emit debugging information\r\n-debug:{full|pdbonly|portable|embedded}\r\n Specify debugging type ('full' is default,\r\n 'portable' is a cross-platform format,\r\n 'embedded' is a cross-platform format embedded into\r\n the target .dll or .exe)\r\n-optimize[+|-] Enable optimizations (Short form: -o)\r\n-deterministic Produce a deterministic assembly\r\n (including module version GUID and timestamp)\r\n-refonly Produce a reference assembly in place of the main output\r\n-instrument:TestCoverage Produce an assembly instrumented to collect\r\n coverage information\r\n-sourcelink: Source link info to embed into PDB.\r\n\r\n - ERRORS AND WARNINGS -\r\n-warnaserror[+|-] Report all warnings as errors\r\n-warnaserror[+|-]: Report specific warnings as errors\r\n-warn: Set warning level (0-4) (Short form: -w)\r\n-nowarn: Disable specific warning messages\r\n-ruleset: Specify a ruleset file that disables specific\r\n diagnostics.\r\n-errorlog: Specify a file to log all compiler and analyzer\r\n diagnostics.\r\n-reportanalyzer Report additional analyzer information, such as\r\n execution time.\r\n\r\n - LANGUAGE -\r\n-checked[+|-] Generate overflow checks\r\n-unsafe[+|-] Allow 'unsafe' code\r\n-define: Define conditional compilation symbol(s) (Short\r\n form: -d)\r\n-langversion:? Display the allowed values for language version\r\n-langversion: Specify language version such as\r\n latest (latest version, including minor versions),\r\n default (same as latest),\r\n latestmajor (latest version, excluding minor versions),\r\n preview (latest version, including features in unsupported preview),\r\n or specific versions like 6 or 7.1\r\n-nullable[+|-] Specify nullable context option enable|disable.\r\n-nullable:{enable|disable|warnings|annotations}\r\n Specify nullable context option enable|disable|warnings|annotations.\r\n\r\n - SECURITY -\r\n-delaysign[+|-] Delay-sign the assembly using only the public\r\n portion of the strong name key\r\n-publicsign[+|-] Public-sign the assembly using only the public\r\n portion of the strong name key\r\n-keyfile: Specify a strong name key file\r\n-keycontainer: Specify a strong name key container\r\n-highentropyva[+|-] Enable high-entropy ASLR\r\n\r\n - MISCELLANEOUS -\r\n@ Read response file for more options\r\n-help Display this usage message (Short form: -?)\r\n-nologo Suppress compiler copyright message\r\n-noconfig Do not auto include CSC.RSP file\r\n-parallel[+|-] Concurrent build.\r\n-version Display the compiler version number and exit.\r\n\r\n - ADVANCED -\r\n-baseaddress:\r\nBase address for the library to be built\r\n-checksumalgorithm: Specify algorithm for calculating source file\r\n checksum stored in PDB. Supported values are:\r\n SHA1 or SHA256 (default).\r\n-codepage: Specify the codepage to use when opening source\r\n files\r\n-utf8output Output compiler messages in UTF-8 encoding\r\n-main: Specify the type that contains the entry point\r\n (ignore all other possible entry points) (Short\r\n form: -m)\r\n-fullpaths Compiler generates fully qualified paths\r\n-filealign: Specify the alignment used for output file\r\n sections\r\n-pathmap:=,=,...\r\n Specify a mapping for source path names output by\r\n the compiler.\r\n-pdb: Specify debug information file name (default:\r\n output file name with .pdb extension)\r\n-errorendlocation Output line and column of the end location of\r\n each error\r\n-preferreduilang Specify the preferred output language name.\r\n-nosdkpath Disable searching the default SDK path for standard library assemblies.\r\n-nostdlib[+|-] Do not reference standard library (mscorlib.dll)\r\n-subsystemversion: Specify subsystem version of this assembly\r\n-lib: Specify additional directories to search in for\r\n references\r\n-errorreport: Specify how to handle internal compiler errors:\r\n prompt, send, queue, or none. The default is\r\n queue.\r\n-appconfig: Specify an application configuration file\r\n containing assembly binding settings\r\n-moduleassemblyname: Name of the assembly which this module will be\r\n a part of\r\n-modulename: Specify the name of the source module\r\n```"
      },
      {
        "user": "miloush",
        "created_at": "2019-08-29T12:10:22Z",
        "body": "And if by angle brackets you mean `[]` there is only two words in the whole text you are asking about, which are ` [,[,public|private]]`, which are command line parameters and should not be translated.\r\n\r\nI hope you are not translating any of the words after hyphen either."
      },
      {
        "user": "jaredpar",
        "created_at": "2019-09-09T21:26:10Z",
        "body": "Please let us know if you need anything beyond @miloush answer."
      },
      {
        "user": "PDostalek",
        "created_at": "2019-09-12T12:34:14Z",
        "body": "Thanks for now"
      }
    ]
  },
  {
    "number": 38275,
    "title": "Roslyn needs Reference for compilation but does not add it to the Metadata Table",
    "created_at": "2019-08-25T07:16:44Z",
    "closed_at": "2019-08-27T17:52:36Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38275",
    "body": "**Version Used**: \r\nVS2019 16.2.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new ClassLibrary (4.6.2) (ClassLibrary1) and add following Code: (and a Reference to System)\r\n\r\n        using System.ComponentModel.Design;\r\n        namespace ClassLibrary1\r\n        {\r\n            public interface IClass1 : IServiceContainer\r\n            {\r\n                object Resolver { get; }\r\n            }\r\n        }\r\n\r\n\r\n2. Create a new ClassLibrary (4.6.2) (ClasLibrary2) and add following Code: (and a Reference to System and to ClassLibrary1)\r\n\r\n        using ClassLibrary1;\r\n        namespace ClassLibrary2\r\n        {\r\n            public class Class2\r\n            {\r\n                public void Test()\r\n                {\r\n                    var a = (IClass1)new object();\r\n                    var b = a.Resolver;\r\n                }\r\n            }\r\n        }\r\n\r\n3. compile (it works)\r\n4. Remove Reference to System from ClassLibrary2\r\n5. It does not compile\r\n\r\nBut If you look at the DLL ClassLibrary2 from step 3 (with ILSPY or DotPeek) there is no Reference to System\r\n\r\n**Expected Behavior**:\r\nstep 5. Should also compile or reference should be added to the metadata\r\n\r\n**Actual Behavior**:\r\nStep 5 does not compile",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38275/comments",
    "author": "jogibear9988",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2019-08-27T17:52:36Z",
        "body": "I don't think this is a bug.  The references in metadata are not intended to tell you what references are required.  Constants such as enum constants do not appear as references.  Primitive types have type codes in IL that avoid the need for a metadata reference."
      },
      {
        "user": "jogibear9988",
        "created_at": "2019-08-27T21:00:02Z",
        "body": "@gafter what is then the task of the metadata references?\r\nAnd I also don't understand why exactly the reference is needed.\r\nIf you do this:\r\n\r\n        public void Test(IClass1 par)\r\n         {\r\n         }\r\n\r\nyou do not need the reference for compilation. "
      },
      {
        "user": "gafter",
        "created_at": "2019-08-29T17:35:36Z",
        "body": "The metadata references given to a compilation are those assemblies needed by the compiler to resolve types needed in making sense of the language used in the compilation.\r\n\r\nThe references appearing in the assembly produced as output by a compilation are symbols referenced in IL and in signatures of symbols that do not have a shorter representation in the assembly.  Many built-in types have a short representation in the assembly and do not require references in the generated assembly.\r\n\r\nDoes that answer your question?"
      }
    ]
  },
  {
    "number": 37759,
    "title": "VS2017 Debugging - Use the legacy C# and VB Expression Evaluators - Deprecated",
    "created_at": "2019-08-06T15:41:54Z",
    "closed_at": "2024-11-06T03:09:09Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Interactive-Debugging"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37759",
    "body": "**Version Used**: VS 2017 15.9.14\r\n\r\n**Steps to Reproduce**:\r\nWith Use the legacy C# and VB Expression Evaluators, unchecked\r\n1. `Dim strTest as String = <someobjectValue> & vbcrlf & <someotherobjectvalue>`\r\n2. Debug and set breakpoint on next line.\r\n3. In Immediate window type `?strTest`.\r\n**Expected Behavior**: Display `\"firstvalue secondvalue\"`\r\n\r\n**Actual Behavior**: Displays `\"firstvalue\" & vbcrlf & \"secondvalue\"`\r\n\r\nIt is necessary to have the expected behavior for many debugging reasons.\r\nEither have the new version display properly or leave in the legacy option.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37759/comments",
    "author": "alphonseg",
    "comments": [
      {
        "user": "tmat",
        "created_at": "2019-08-06T15:57:33Z",
        "body": "Why is it necessary?"
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T16:07:47Z",
        "body": "While debugging, it is sometimes necessary to evaluate the content of a variable - in order to debug.\r\nThis is common. One thing in particular, when working with databases, string together parameters for a stored procedure, which can sometimes be quite long. Evaluate in in the Immediate window, then copy the value to SQL Server Management Studio and run (and/or debug) the proc there, using the same exact values that the app was supplying. SSMS can't evaluate \"firstvalue\" & vbcrlf & \"secondvalue\"."
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T16:08:57Z",
        "body": "Sorry, my first time posting here and accidently closed it."
      },
      {
        "user": "tmat",
        "created_at": "2019-08-06T16:43:54Z",
        "body": "Why wouldn't you use `<someobjectValue> & \" \" & <someotherobjectvalue>` instead of `vbcrlf` though?"
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T17:58:36Z",
        "body": "Like everything else, it depends. Maybe it's a string will be presented to a user, added to a memo, email, etc. In the case of SQL parameters, makes it easier to read. There are lots of reasons. However, I can't think of one reason why anyone would want to see the construct. It is also common sense, If the value of an object is asked for, that is what should be provided - the value - not the internals."
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T17:58:38Z",
        "body": "Like everything else, it depends. Maybe it's a string will be presented to a user, added to a memo, email, etc. In the case of SQL parameters, makes it easier to read. There are lots of reasons. However, I can't think of one reason why anyone would want to see the construct. It is also common sense, If the value of an object is asked for, that is what should be provided - the value - not the internals."
      },
      {
        "user": "tmat",
        "created_at": "2019-08-06T18:22:08Z",
        "body": "> Like everything else, it depends\r\n\r\nIndeed. But you as the author of the expression you know how you want the string to be presented. The debugger does not know what are you gonna do with the output.\r\n\r\n>  I can't think of one reason why anyone would want to see the construct\r\n\r\nWhen you're debugging an issue with code that outputs incorrect white space into a string you'd want to see the exact kind of white space that is actually present in the string, so printing line break as a space would be confusing in that case. You wouldn't know if the original string contained the line break or not."
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T18:32:19Z",
        "body": "We could go around forever. Obviously, there are always different needs. Because of that, why not let the developer display it the way needed at the time?"
      },
      {
        "user": "tmat",
        "created_at": "2019-08-06T18:41:08Z",
        "body": "How should we determine \"the way they needed\"? "
      },
      {
        "user": "alphonseg",
        "created_at": "2019-08-06T18:52:34Z",
        "body": "There are the 2 methods that we have discussed. All I'm saying is to leave (or provide in some other way), the option to decide which we want to use. The expression evaluator is deprecated. Either don't deprecate it or provide a new setting to output strings the old way."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-06T03:09:09Z",
        "body": "Closing out due to lack of feedback and movement here."
      }
    ]
  },
  {
    "number": 37342,
    "title": "Generalize InternalImplementationOnlyAttribute Usage",
    "created_at": "2019-07-18T19:23:54Z",
    "closed_at": "2019-07-18T19:35:27Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37342",
    "body": "**Version Used**: \r\n.NET Core 3.0 preview 6\r\n\r\nThis isn't a bug per-se. I just noticed recently that I can't create a class that inherits from `ISymbol`. After digging around a bit, I finally realized that the interface (`IOperation` has this as well) has the `InternalImplementationOnlyAttribute` on it. Apparently, this lets Roslyn define public interfaces that can't be part of a class's inheritance hierarchy if it's not within its assembly.\r\n\r\nSince `InternalImplementationOnlyAttribute` is `internal`, .NET developers can't use this attribute. But the compiler already knows to create an error (RS1009 is the code) if an interface has it. I've had cases myself where I wanted a public interface that could not be a base type unless it was within the assembly. If `InternalImplementationOnlyAttribute` was made `public`, would it be possible to make this a feature for general consumption by any .NET developer?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37342/comments",
    "author": "JasonBock",
    "comments": [
      {
        "user": "agocke",
        "created_at": "2019-07-18T19:34:33Z",
        "body": "With default interface implementations, you don't even need a new feature:\r\n\r\n```C#\r\npublic interface I1\r\n{\r\n    internal void InternalImplementationOnly();\r\n}\r\n```"
      },
      {
        "user": "JasonBock",
        "created_at": "2019-07-18T20:00:23Z",
        "body": "@agocke but your answer is different than what `ISymbol` is doing. It's a public interface with public members, and it's done this way so clients can use the types derived from `ISymbol` and its members. While you're right that DIM allows interface members to be `internal`, a client outside of the assembly that `I1` is defined couldn't \"see\" that internal method."
      },
      {
        "user": "agocke",
        "created_at": "2019-07-18T20:17:02Z",
        "body": "Right, that method is just a dummy method to prevent people from implementing outside your assembly. You should make all your normal interface members public, but to implement the interface they would have to implement everything, including that internal member, which they can't."
      },
      {
        "user": "JasonBock",
        "created_at": "2019-07-18T20:22:57Z",
        "body": "OK, that makes sense, and it's a neat \"trick\". But it also forces implementors to have one outlier member that they have to implement, and it has to be known that it's just a dummy member that has no meaning other than preventing clients outside the assembly from implementing it. The `[InternalImplementationOnly]` approach seems much cleaner. But this has already been closed, so there's that :)."
      },
      {
        "user": "agocke",
        "created_at": "2019-07-18T20:30:02Z",
        "body": "Oh, that's just because this isn't actually a compiler feature. It's an analyzer we ship with the CodeAnalysis APIs. You could ship one yourself if you want."
      },
      {
        "user": "JasonBock",
        "created_at": "2019-07-18T20:36:31Z",
        "body": "Yeah, I figured with the Code value starting with \"RS\" that it wasn't a compiler feature, but I wasn't sure. And I could ship my own, but if it was something that was kind of \"done\"-ish, it would be easier to make it available to everyone."
      },
      {
        "user": "agocke",
        "created_at": "2019-07-18T20:38:02Z",
        "body": "Since it's just for our SDK it's not really \"public feature\"-level quality."
      }
    ]
  },
  {
    "number": 37103,
    "title": "[loc][Query][Roslyn] Localizability of 0; \"Configure_0_code_style\"",
    "created_at": "2019-07-10T12:20:17Z",
    "closed_at": "2024-10-22T16:51:36Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37103",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nConfigure {0} code style\r\n\r\nFile Name:\r\nFeatures\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWhat will go into the placeholder? We assumed the name of a code style for now, please advise.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37103/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "PDostalek",
        "created_at": "2019-10-02T11:12:26Z",
        "body": "Still not processed, please leave us the comment for this question. @jinujoseph "
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-03-23T08:24:10Z",
        "body": "@PDostalek Well, it's a bit late :smile:\r\n\r\nA diagnostic id will go in the placeholder. (e.g, \"Configure IDE0078 code style\")"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:51:36Z",
        "body": "Closing out due to staleness."
      }
    ]
  },
  {
    "number": 36774,
    "title": " [loc][Query][Roslyn] Localizability of \"such_as___comma__1_comma__2_comma_etc\" ",
    "created_at": "2019-06-26T11:56:09Z",
    "closed_at": "2019-06-28T00:14:52Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36774",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nAvoid unnecessary value assignments in your code, as these likely indicate redundant value computations. If the value computation is not redundant and you intend to retain the assignment, then change the assignment target to a local variable whose name starts with an underscore and is optionally followed by an integer, such as '_', '_1', '_2', etc. These are treated as special discard symbol names.\r\n\r\nFile Name:\r\nFeatures\\Core\\Portable\\xlf\\FeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nOur current translation deviates from the source, but we believe in conveys the idea correctly. Backtranslation:\r\n\r\nThese names are considered special names for the variables being released?\r\n\r\nIf our guess is not correct, please advise on the meaning\r\n\r\n0; \"(...) such_as___comma__1_comma__2_comma_etc\"\r\n0; \"(...) special_discard_symbol_names\"",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36774/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2019-06-27T15:47:30Z",
        "body": "Tagging @tmeschter @mavasani who appear in the git history for the entry with that text."
      },
      {
        "user": "mavasani",
        "created_at": "2019-06-27T15:59:48Z",
        "body": "Looks good to me."
      }
    ]
  },
  {
    "number": 36204,
    "title": "[loc][Query][Roslyn] Localizability of the \"cmdidCSharpOrganizeSortUsings\"",
    "created_at": "2019-06-06T07:48:11Z",
    "closed_at": "2019-06-27T00:42:22Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36204",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nSortUsings\r\n\r\nID:\r\n0; \"cmdidCSharpOrganizeSortUsings\"\r\n\r\nFile Name:\r\nVisualStudio\\Core\\Def\\xlf\\Commands.vsct.xlf\r\n\r\n==========================================\r\nQuery:\r\nPlease confirm if this string can be translated",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36204/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "JoeRobich",
        "created_at": "2019-06-25T16:30:50Z",
        "body": "@PDostalek This string is a LocCanonicalName and does not need to be translated. "
      }
    ]
  },
  {
    "number": 36019,
    "title": "[loc][Query][Roslyn] Localizability of  the meaning of \"base\"",
    "created_at": "2019-05-29T10:23:06Z",
    "closed_at": "2019-06-29T00:00:16Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Documentation",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36019",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nThe symbol has no base.\r\n'{0}' bases\r\n\r\nID:\r\n0; \"The_symbol_has_no_base\"\r\n0; \"_0_bases\"\r\n\r\nFile Name:\r\nEditorFeatures\\Core\\xlf\\EditorFeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nPlease clarify the meaning of \"base\".",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36019/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "ryzngard",
        "created_at": "2019-06-28T23:59:50Z",
        "body": "Base in this case refers to a base symbol that is overridden or implemented, such as overriding an abstract method or implementing an interface. I'm going to mark as resolved, but please let me know if you need more information."
      }
    ]
  },
  {
    "number": 35658,
    "title": "can stackalloc be allowed in ref struct constructors?",
    "created_at": "2019-05-11T01:29:44Z",
    "closed_at": "2019-05-12T17:44:23Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35658",
    "body": "**Version Used**: \r\n\r\nc# 7.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n ```\r\n   public ref struct Matrix<T> where T: unmanaged\r\n    {\r\n        private readonly int w;\r\n        private readonly int h;\r\n        private readonly Span<T> span;\r\n\r\n        public Matrix(int w, int h)\r\n        {\r\n            this.w = w;\r\n            this.h = h;\r\n            this.span = stackalloc T[w*h];\r\n        }\r\n```\r\n\r\nresults in error \r\n`CS8353: A result of a stackalloc expression of type 'Span<T>' cannot be used in this context because it may be exposed outside of the containing method` \r\n\r\nI think I understand the error message and why it is necessary to prevent it. \r\nBut in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot \"be exposed outside the context\".\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35658/comments",
    "author": "xtofs",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2019-05-11T05:51:26Z",
        "body": "> But in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot \"be exposed outside the context\".\r\n\r\nPresumably you're trying to say that since a `ref struct` lives on the stack that means that it can contain a pointer to a stack allocated buffer. It can but there's no way for that pointer to be valid once the `Matrix` constructor returns. That's why it is a stack after all, you cannot add or remove things at random."
      },
      {
        "user": "jcouv",
        "created_at": "2019-05-12T15:43:49Z",
        "body": "A constructor is just a regular method. If you invoke it and it returns, the stack frame of that method goes away (along with any `stackalloc` storage it may hold. \r\nThis diagnostic prevents leaking a reference to such storage outside the method body, and in this case the method is a constructor body."
      },
      {
        "user": "xtofs",
        "created_at": "2019-05-12T17:05:53Z",
        "body": "Thanks for clarifying. I think I understand. The constructor is a regular method and the parameters need to be cleaned from the stack, and with that the stackalloc'ed memory is gone.\r\n\r\nDon't want to be difficult but we could ask ourselves if (in the case of a ref struct constructor) it has to be a regular method or if there is another way. \r\nThis would essentially allow variable size stack allocated structures and that sounds powerful.   "
      },
      {
        "user": "jcouv",
        "created_at": "2019-05-12T17:44:23Z",
        "body": "\"variable size structures\" sound like trouble for the runtime, whether they are stack-allocated or not. I don't know if that's supported.\r\n\r\n> that sounds powerful\r\n\r\nIt would be good to identify some motivating examples and start a discussion on `csharplang` repo for a language design idea.\r\nIn the meantime, I'll close this `roslyn` issue since the compiler behaves correctly per current language design. Thanks"
      },
      {
        "user": "mikedn",
        "created_at": "2019-05-12T19:00:51Z",
        "body": "> This would essentially allow variable size stack allocated structures and that sounds powerful.\r\n\r\nIt's powerful until someone passes large `w` and `h` and you get a stack overflow :)\r\n\r\nThe only way to do this today is to allocate stack memory in the caller but that's going to be cumbersome, at least because you can no longer rely on the `Matrix` constructor to initialize the struct. \r\n\r\nC++, which usually can do a lot of crazy things, is too rather limited in this regard - you can have a variable sized struct but the language doesn't offer much support for that, practically none. Its only advantage would be \"placement new\" that allows you to construct an object in previously allocated memory. Not sure if that's something that would make sense in C#, most likely not.\r\n\r\nUltimately you might be better served by something like:\r\n```C#\r\npublic ref struct Matrix<T> where T: unmanaged\r\n{\r\n       private readonly int w;\r\n       private readonly int h;\r\n       private readonly Span<T> span;\r\n\r\n       public Matrix(int w, int h, Span<T> span)\r\n       {\r\n           this.w = w;\r\n           this.h = h;\r\n           if (span.Length != w * h) throw ArgumentException();\r\n```\r\nwhich allows the caller to decide how the memory is allocated."
      }
    ]
  },
  {
    "number": 35625,
    "title": " [loc][Query][Roslyn] Localizability of \"TypeOrNamespaceUsageInfo_Qualify\" ",
    "created_at": "2019-05-10T08:20:04Z",
    "closed_at": "2019-05-29T10:31:04Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Tenet-Localization"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35625",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nQualify\r\n\r\nFile Name:\r\nWorkspaces\\Core\\Portable\\xlf\\WorkspacesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please let me know if this string is translatable? If yes, would you please clarify its meaning?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35625/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2019-05-10T19:13:19Z",
        "body": "Tagging @mavasani to comment"
      },
      {
        "user": "mavasani",
        "created_at": "2019-05-14T22:04:30Z",
        "body": "Qualify: This string is used as one of the possible values of Find All References \"Kind\" column to indicate a reference to a type or namespace when used as a left hand side of a member access or qualification, such as 'x' in 'x.Method()' or 'NS1' in 'NS1.Type1'"
      },
      {
        "user": "PDostalek",
        "created_at": "2019-05-29T10:31:04Z",
        "body": "Thanks for clarification"
      }
    ]
  },
  {
    "number": 35624,
    "title": "[loc][Query][Roslyn] Localizability of \"ref_local_or_expression\" ",
    "created_at": "2019-05-10T08:11:34Z",
    "closed_at": "2019-05-15T11:07:32Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35624",
    "body": "Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nref local or expression\r\n\r\nFile Name:\r\nFeatures\\CSharp\\Portable\\xlf\\CSharpFeaturesResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nWhat does \"local\" mean here?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35624/comments",
    "author": "PDostalek",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2019-05-10T17:58:49Z",
        "body": "\"local\" means \"local variable\".\r\n\r\nFor example, `x` is a local and `y` is a ref local in:\r\n```C#\r\nclass C\r\n{\r\n  void M()\r\n  {\r\n    string x = \"\";\r\n    ref string y = x;\r\n  }\r\n}\r\n```"
      },
      {
        "user": "PDostalek",
        "created_at": "2019-05-15T11:07:32Z",
        "body": "Thanks for explanation"
      }
    ]
  },
  {
    "number": 35522,
    "title": "I got this massage when ever use csc",
    "created_at": "2019-05-05T19:35:34Z",
    "closed_at": "2019-07-12T21:36:28Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35522",
    "body": "This compiler is provided as part of the Microsoft (R) .NET Framework, but only\r\nsupports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see HTTP\r\n://go.microsoft.com/fwlink/?LinkID=533240",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35522/comments",
    "author": "Almark20",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2019-05-06T13:51:30Z",
        "body": "@Almark20 The compiler included in the .NET framework only supports language versions up to C# 5. That's correct.\r\nIf you want to use newer versions of C#, you can install Visual Studio (2019 was recently released) or .NET Core (2.2 for instance)."
      }
    ]
  },
  {
    "number": 34751,
    "title": "EditorConfig not working under Visual Studio 2019",
    "created_at": "2019-04-04T11:55:15Z",
    "closed_at": "2019-04-09T17:53:21Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34751",
    "body": "**Version Used**: \r\nMicrosoft Visual Studio Professional 2019\r\nVersion 16.0.0\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\n**Steps to Reproduce**:\r\n1. Create .editorconfig at solution level\r\n2. Add Rules\r\n3. Open .cs file and add new method.\r\n4. Apply autoformatting (CTRL + K, CTRL + D)\r\n\r\n**Expected Behavior**:\r\nFormatting is applied. Methods where formatting isn't applied are displayed as errors.\r\n\r\n**Actual Behavior**:\r\nNothing happens.\r\n\r\n**Other Information**:\r\nThis was working fine for me in Visual Studio Professional 2017.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34751/comments",
    "author": "Ragowit",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-04-08T17:47:37Z",
        "body": "The experimental Code Cleanup on Format Document feature was removed for Visual Studio 2019. The new Code Cleanup feature is available via the broom icon at the bottom of editor windows. I was sure there was a duplicate issue for this already, but I'm having trouble finding it."
      },
      {
        "user": "metoule",
        "created_at": "2019-06-07T16:40:45Z",
        "body": "Does that mean we have to use both features on the same document to have the same behavior as in VS2017? Or does the Code Cleanup feature also triggers the Format Document feature?"
      }
    ]
  },
  {
    "number": 34347,
    "title": "Cannot find path 'D:\\roslyn\\System.Windows.Forms.dll' because it does not exist.",
    "created_at": "2019-03-22T02:35:09Z",
    "closed_at": "2020-10-12T20:13:33Z",
    "labels": [
      "Question",
      "Area-Infrastructure"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34347",
    "body": "**Version Used**: \r\n Windows 8.1\r\n**Steps to Reproduce**:\r\n\r\n1. build a release version of the powershell rc set PATH in the Control Panel replace old system powershell env variable. sign out sign back in to set variable not using a sandbox.\r\n2. open Visual 2017 CMD prompt\r\n3. runt the restore.cmd batch file.\r\n\r\n**Expected Behavior**:\r\nrestore.cmd to complete \r\n**Actual Behavior**:\r\nCannot find path 'D:\\roslyn\\System.Windows.Forms.dll' because it does not exist.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34347/comments",
    "author": "jonathanlyonmoore",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2019-03-22T13:20:59Z",
        "body": "@jdm7dv are you trying to build roslyn or some other project? If you are trying to build the master branch of roslyn it requires a preview installation of VS 2019 now"
      },
      {
        "user": "333fred",
        "created_at": "2020-10-12T20:13:33Z",
        "body": "This happened because the version of pwsh you compiled does not have a reference to Windows Forms, which some of the integration tests scripts need. This was fixed a while ago, we only import those things if the integration tests are being run. For that scenario, you will need to use a version of powershell that has a reference to WindowsForms."
      }
    ]
  },
  {
    "number": 33492,
    "title": "Question - C# - Release/Debug build options.",
    "created_at": "2019-02-19T19:54:04Z",
    "closed_at": "2019-07-15T04:12:35Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/33492",
    "body": "Hi,\r\n\r\nI've never understood what _Release/Debug_ actually amounts to when we compile C# code. I know that _Release_ performs various optimizations but do not know if this optimizes the _generated IL_ or if it causes the JIT to generate optimized _machine instruction sequences_ or both.\r\n\r\nSome info about this would be great (also any articles or blog posts too would be neat).\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/33492/comments",
    "author": "Korporal",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2019-02-19T21:47:11Z",
        "body": "@gafter \tor @agocke \tcan probably supply a more complete answer.\r\n\r\nIn general there is not much code gen difference for C# between debug and release.  Release doesn't need to emit as many sequence points because we assume no one is going to be debugging but I am not aware of codegen optimizations or transformations that only happen in release."
      },
      {
        "user": "agocke",
        "created_at": "2019-02-19T22:21:07Z",
        "body": "> I know that _Release_ performs various optimizations but do not know if this optimizes the _generated IL_ or if it causes the JIT to generate optimized _machine instruction sequences_ or both.\r\n\r\nBoth.\r\n\r\n> I am not aware of codegen optimizations or transformations that only happen in release.\r\n\r\nLots"
      },
      {
        "user": "jmarolf",
        "created_at": "2019-02-20T15:37:59Z",
        "body": ">> I am not aware of codegen optimizations or transformations that only happen in release.\r\n\r\n>Lots\r\n\r\nLol"
      },
      {
        "user": "jcouv",
        "created_at": "2019-07-15T04:12:35Z",
        "body": "I'll go ahead and consider this question answered since no activity for a while. Please re-open if otherwise. Thanks"
      }
    ]
  },
  {
    "number": 31939,
    "title": "local variable messes up async result (goto loop vs. scope of captured variable)",
    "created_at": "2018-12-19T15:27:01Z",
    "closed_at": "2018-12-21T11:18:50Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31939",
    "body": "**Version Used**: \r\nVisual Studio Professional 2017 15.9.4\r\n\r\n**Steps to Reproduce**:\r\n- Console Application\r\n- .NET Framework 4.7.1\r\n- Any CPU  \r\n\r\nCompile and run following code:\r\n\r\n```\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n\tstatic void Main()\r\n\t{\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tBegin:\r\n\t\t\tvar result = await FooAsync();\r\n\t\t\tTask.Run(async () =>\r\n\t\t\t{\r\n\t\t\t\tawait Task.Yield();\r\n\t\t\t\tConsole.WriteLine(result);\r\n\t\t\t});\r\n\t\t\tif (result < 9) goto Begin;\r\n\t\t}).Wait();\r\n\t\tConsole.ReadKey();\r\n\t}\r\n\r\n\tstatic int i = 0;\r\n\tstatic object o = new object();\r\n\r\n\tstatic async Task<int> FooAsync()\r\n\t{\r\n\t\tawait Task.Yield();\r\n\t\tlock (o)\r\n\t\t\treturn i++;\r\n\t}\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNumbers 0...9 are displayed once.\r\n\r\n**Actual Behavior**:\r\nSome numbers are missing and some numbers are displayed more than once.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31939/comments",
    "author": "maggo23",
    "comments": [
      {
        "user": "0xd4d",
        "created_at": "2018-12-19T17:20:34Z",
        "body": "`result` is a captured variable and can get overwritten by the 1st Task.Run(). You can extract out the 2nd Task.Run() to a new method with `result` as an argument and you should get the result you expect. You can also await the 2nd Task.Run() call."
      },
      {
        "user": "maggo23",
        "created_at": "2018-12-20T08:02:37Z",
        "body": "Thanks for the quick response and your proposal. I found another workaround too (see example below). With this modification the output is as expected. I think this should not be the solution and I want to point to a possible bug.\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n\tstatic void Main()\r\n\t{\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tfor (; ; )\r\n\t\t\t{\r\n\t\t\t\tvar result = await FooAsync();\r\n\t\t\t\tTask.Run(async () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tawait Task.Yield();\r\n\t\t\t\t\tConsole.WriteLine(result);\r\n\t\t\t\t});\r\n\t\t\t\tif (result >= 9) break;\r\n\t\t\t}\r\n\t\t}).Wait();\r\n\t\tConsole.ReadKey();\r\n\t}\r\n\r\n\tstatic int i = 0;\r\n\tstatic object o = new object();\r\n\r\n\tstatic async Task<int> FooAsync()\r\n\t{\r\n\t\tawait Task.Yield();\r\n\t\tlock (o)\r\n\t\t\treturn i++;\r\n\t}\r\n}\r\n```"
      },
      {
        "user": "HaloFour",
        "created_at": "2018-12-21T00:31:36Z",
        "body": "This behavior is expected.  Captures are by reference, not value.  When you modify `result` all lambdas that have captured that variable will immediately see that change.  When you add a `for` loop you are introducing a new scope so the compiler allocates a separate version of `result` for each capture."
      },
      {
        "user": "maggo23",
        "created_at": "2018-12-21T11:15:17Z",
        "body": "Thank you for the explanation and hint. It was not clear to me that implementing a loop with ```goto``` could lead to problems with scope. Now I found a simpler example to illustrate the problem and solution:\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nclass Program\r\n{\r\n       static void Main()\r\n       {\r\n             var l = new List<Func<int>>();\r\n             var i = 0;\r\n             start:\r\n             var v = i; // not in separate scope\r\n             l.Add(() => v);\r\n             if (++i <= 9) goto start;\r\n             foreach (var f in l)\r\n                    Console.Write(f());\r\n             Console.ReadLine();\r\n       }\r\n}\r\n```\r\nOutput: 9999999999\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nclass Program\r\n{\r\n       static void Main()\r\n       {\r\n             var l = new List<Func<int>>();\r\n             var i = 0;\r\n             start:\r\n             {\r\n                    var v = i;\r\n                    l.Add(() => v);\r\n             }\r\n             if (++i <= 9) goto start;\r\n             foreach (var f in l)\r\n                    Console.Write(f());\r\n             Console.ReadLine();\r\n       }\r\n}\r\n```\r\nOutput: 0123456789\r\n"
      }
    ]
  },
  {
    "number": 31285,
    "title": "Re-use existing functionality in my code fix provider?",
    "created_at": "2018-11-20T22:02:57Z",
    "closed_at": "2022-10-31T21:47:37Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Concept-API"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31285",
    "body": "I apologize in advance if this is the wrong place for my question.\r\n\r\nI wrote a `DiagnosticAnalyzer` that generates a certain diagnostic. Now I would like to write a `CodeFixProvider` that reacts to this diagnostic by offering neither more nor less than the existing \"Introduce local\". So my question is: can I re-use the existing functionality of, say, an `IIntroduceVariableService` in my `CodeFixProvider`?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31285/comments",
    "author": "emilefokkema",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-11-21T00:01:21Z",
        "body": "@emilefokkema Nothing to apologize for :)\r\n\r\n1. you cannot reuse IIntroduceVariableService currently.  However, there may be other services that can help out.\r\n2. There is a channel over at gitter.im/dotnet/roslyn that can be useful for asking questions and getting help.  You'll almost always get responses in a short time (or within a day at hte worst).  However, Thanksgiving is coming up, so that may not be the case for the next few days. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T21:47:37Z",
        "body": "Closing out as answered."
      }
    ]
  },
  {
    "number": 30631,
    "title": "Cannot retrieve symbols under a type alias",
    "created_at": "2018-10-20T14:10:40Z",
    "closed_at": "2019-01-16T19:32:53Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30631",
    "body": "Hi,\r\n\r\nI'm used **Microsoft.CodeAnalysis.CSharp.2.8.2** and they dependents.\r\n\r\nI cannot retrieve `ISymbol` and `ITypeSymbol` (they are just nothing in the relevant `Info` structures) using `SemantciModel.GetSymbolInfo` and `SemantciModel.GetTypeInfo` for the type alias identifier (`KNFE`) in the code below:\r\n\r\n```c#\r\nusing KNFE = System.Collections.Generic.KeyNotFoundException;\r\n```\r\n\r\nAt first, I tried append before these using a something that will be used this alias:\r\n\r\n```c#\r\n/// <see cref=\"KNFE\"/>\r\nusing KNFE = System.Collections.Generic.KeyNotFoundException;\r\n```\r\nand I still cannot receive symbols for `KNFE` identifier under `NameEqualsSyntax`, but can for the identifier under the `NameMemberCrefSyntax`. I checked that the boths `IdentifierNameSyntax` have the same kind.\r\n\r\nAt second, I assumed it can be due that using was determined as unused, so I added reference on it:\r\n\r\n```c#\r\n/// <see cref=\"KNFE\"/>\r\nusing KNFE = System.Collections.Generic.KeyNotFoundException;\r\n\r\nclass Some\r\n{\r\n    KNFE field;\r\n}\r\n```\r\nbut I still cannot receive symbols.\r\n\r\nAs workaround I can receive symbols from the right hand of equals in the using directive\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30631/comments",
    "author": "GeorgeAlexandria",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2019-01-14T23:55:53Z",
        "body": "@GeorgeAlexandria You need to invoke `SemanticModel.GetDeclaredSymbol` API on the `UsingDirectiveSyntax` to fetch the declared alias symbol."
      },
      {
        "user": "GeorgeAlexandria",
        "created_at": "2019-01-15T18:03:39Z",
        "body": "@mavasani, I actually wrote that I know a way to retrieve the corresponding symbol from `UsingDirectiveSyntax.Name` or just from `UsingDirectiveSyntax`, but my question was why `ISymbol` cannot be retrieved from identifier under the alias node: `UsingDirectiveSyntax.Alias.Name`. "
      },
      {
        "user": "mavasani",
        "created_at": "2019-01-15T18:14:06Z",
        "body": "Tagging @dotnet/roslyn-compiler - semantic model API question."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-01-16T00:01:22Z",
        "body": "> @mavasani, I actually wrote that I know a way to retrieve the corresponding symbol from UsingDirectiveSyntax.Name or just from UsingDirectiveSyntax, but my question was why ISymbol cannot be retrieved from identifier under the alias node: UsingDirectiveSyntax.Alias.Name.\r\n\r\nBecause that's the design of the semantic model :)  At a declaration, we basically only have a single node that we consider 'the declaration'.  The same holds true for all our other declarations.  If you have a 'class declaration' you can use GetDeclaredSymbol on it to get the INamedTypeSymbol.  However, you can't call anything on hte 'Name' of the class.  \r\n\r\nThis was intentional to avoid ambiguity and open questions about \"which subnodes should we support GetDeclaredSymbol on?\"  The answer is always pretty simple: it's on the topmost node that is still specific to that symbol.  "
      },
      {
        "user": "GeorgeAlexandria",
        "created_at": "2019-01-16T18:29:53Z",
        "body": "> At a declaration, we basically only have a single node that we consider 'the declaration'\r\n\r\n>it's on the topmost node that is still specific to that symbol.\r\n\r\n@CyrusNajmabadi, I know about a declaration and you can check that I didn't write anything about `GetDeclaredSymbol`. Besides, I asked not about `GetDeclaredSymbol`, but `GetSymbolInfo`. So just to be more clear, I detail question: \r\nwhy do `SemanticModel.GetSymbolInfo` return nothing (doesn't return any symbols) for `UsingDirectiveSyntax.Alias.Name`, which is `IdentifierNameSyntax`, but returns symbols for the other `IdentifierNameSyntax` nodes from the my original post?\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-01-16T18:59:27Z",
        "body": "> why do SemanticModel.GetSymbolInfo return nothing (doesn't return any symbols) for \r\n\r\nBecause GetSymbolInfo is for figuring out what something means at  *referencing* location.  THis is not a referencing location.  It is the *declaration point*.  As such, only GetDeclaredSymbol is defined to work there.  This is how things work for all our nodes.  At the declaration point you use GetDeclaredSymbol and at a reference point you use GetSymbolInfo.  These APIs are behaving consistently with that design.\r\n\r\n> but returns symbols for the other IdentifierNameSyntax nodes from the my original post?\r\n\r\nYour other Identifiers are at reference location, they're not the actual declaration location itself.  So GetSymbolInfo properly returns the symbol being referenced.\r\n\r\n--\r\n\r\nIf it helps, think about things as if the names were actually:\r\n\r\nGetDeclaredSymbol\r\nGetReferencedSymbolInfo\r\n\r\nIt's just that instead of calling it GetReferencedSymbolInfo we called it GetSymbolInfo for short.  It's somewhat unfortunate since the name doesn't really convey that it's only intended for use at a reference location.  But i think people liked the simplicity and brevity of the name, even if it could lead to confusion like what you're having.  Given the above two names, it then becomes clear why GetReferencedSymbolInfo would not work on `Foo` in `using Foo = ...`.  In that location `Foo` is not a reference, it is a declaration.  ergo, the functions are working as designed."
      },
      {
        "user": "GeorgeAlexandria",
        "created_at": "2019-01-16T19:32:52Z",
        "body": "> Because GetSymbolInfo is for figuring out what something means at *referencing* location\r\n\r\n@CyrusNajmabadi, It's explaining why it doesn't work for `IdentifierNameSyntax` as `UsingDirectiveSyntax.Alias.Name`. \r\n\r\nThanks for answer."
      }
    ]
  },
  {
    "number": 30589,
    "title": "[VB] PooledObjects usage in FlowAnalysis",
    "created_at": "2018-10-18T19:16:04Z",
    "closed_at": "2018-10-31T00:05:14Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30589",
    "body": "The following flow analysis use hashsets and dictionaries, that have the potential to be changed to their pooled variants.\r\n```\r\nAbstractFlowPass\r\nAbstractFlowPass.Regions\r\nAlwaysAssignedWalker\r\nDataFlowPass\r\nDatFlowsInWalker\r\nDataFlowsOutWalker\r\nReadWriteWalker\r\nIteratorAndAsyncCaptureWalker\r\n```\r\nIs there some aspect of these implementation, that are not suitable to be pooled?\r\nWhere should the pooled object be `.Free()` in. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30589/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-10-18T19:23:32Z",
        "body": "> Is there some aspect of these implementation, that are not suitable to be pooled?\r\n\r\n@AdamSpeight2008 Isn't that something you should be answering :)   ?"
      },
      {
        "user": "gafter",
        "created_at": "2018-10-19T19:05:58Z",
        "body": "@AdamSpeight2008 We don't have any specific reason to think that changing these data structures to use a pooled variant would be a performance (space or time) win. If we did have a specific reason to think it would be a win, we'd probably advocate for making such a change. Do you have any performance measurements to share that would shed light on this? Or were you just wondering?"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2018-10-20T19:54:46Z",
        "body": "@gafter Mainly curious, just wondering and exploring. *(hence the questions eg \"Beware here be dragons\")* Initial impression (no hard data) is that the of 56 test partitions that are tested, they seem to executate quicker. Slowing down during the last few."
      }
    ]
  },
  {
    "number": 29164,
    "title": "Covariance is not supported in generic class",
    "created_at": "2018-08-08T13:52:36Z",
    "closed_at": "2018-08-08T15:33:30Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/29164",
    "body": "**Version Used**: \r\nDotNet Core 2.1.202\r\n\r\n**Steps to Reproduce**:\r\nCompile the following code:\r\n``` c#\r\nusing System;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n\tstatic void Main()\r\n\t{\r\n\t\tFactory<Entity> f = null;\r\n\t\tFactory<IEntity> i;\r\n\t\r\n\t\ti = f;\t\r\n\t}       \r\n    }\r\n\r\n\tinterface IEntity {}\r\n\tdelegate TEntity Factory<out TEntity>() where TEntity : IEntity;\r\n\r\n\tclass Entity : IEntity {}\r\n\r\n\tclass FactoryClass<TEntity> where TEntity : IEntity {\r\n\t\r\n\t\tpublic void Create(Factory<TEntity> factory) \r\n\t\t{\r\n\t\t\tFactory<IEntity> i;\r\n\t\t\r\n\t\t\ti = factory;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n**Expected Behavior**:\r\nThe compilation should succeed as the Factory delegate is covariant.\r\n\r\nPlease observe that the three lines in Main compiles:\r\n``` c#\r\nFactory<Entity> f = null;\r\nFactory<IEntity> i;\r\ni = f;\t\r\n```\r\n**Actual Behavior**:\r\nCompiler error:\r\n```\r\nProgram.cs(27,8): error CS0029: Cannot implicitly convert type 'test.Factory<TEntity>' to 'test.Factory<test.IEntity>' [C:\\Users\\bc3586\\Desktop\\test\\test.csproj]\r\n```\r\n\r\nAlso explicit cast does not work either giving rise to the following error:\r\n```\r\nProgram.cs(27,8): error CS0030: Cannot convert type 'test.Factory<TEntity>' to 'test.Factory<test.IEntity>' [C:\\Users\\bc3586\\Desktop\\test\\test.csproj]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/29164/comments",
    "author": "thosylve",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2018-08-08T15:33:30Z",
        "body": "Covariance only works between reference types. `TEntity` is not a reference type. If you change the first line of the declaration of `FactoryClass<TEntity>` to\r\n\r\n``` c#\r\n\tclass FactoryClass<TEntity> where TEntity : class, IEntity {\r\n```\r\n\r\nThen the code compiles.\r\n"
      }
    ]
  },
  {
    "number": 28851,
    "title": "What is the good option to trace/log the custom analyzer implementation? ",
    "created_at": "2018-07-26T13:31:12Z",
    "closed_at": "2018-09-21T21:48:27Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Concept-API",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28851",
    "body": "**Version Used**: \r\nRoslyn v2.6.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. We are getting intermittent crashes and additional file load issues from build machine. \r\n    Unfortunately this happens only in build machine where we run automated scripts.\r\n2. This we are unable to trace as we don't have tracing or logging mechanism in place.\r\n\r\n**Expected Behavior**:\r\nThis is not an issue reporting. But wanted to know what is the good option to log/trace analyzers for troubleshooting such scenarios. It would be great if we could get additional tracing/logs in the msbuild output.\r\n\r\n**Actual Behavior**:\r\nCurrently we only have findings reported gets printed to msbuild log.\r\n\r\nRegards\r\nBasanth",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28851/comments",
    "author": "msbasanth",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-07-31T17:05:51Z",
        "body": "@mavasani Do you have a recommended strategy for this that you've found helpful in the past?"
      },
      {
        "user": "msbasanth",
        "created_at": "2018-08-17T15:31:42Z",
        "body": "Just adding what I did in our analyzer package which works Ok with few open points.\r\n\r\n1. Added a simple logger class which will open a file and write the log (Info, Debug, Error, Exceptiopn).\r\n2. Made each write thread safe using lock.\r\n3. Used static methods and each traces used this class to write to log file.\r\n4. Control enabling and disabling of tracing using setings file which is passed in as AdditionalFile to analyzer.\r\n\r\n**Observations:**\r\nConsidered log4net initially, the cons is we have to deploy log4net dll along with our analyzer dlls in the _Globals folder.\r\n\r\nAnother one tried is System.Diagnostics.Trace with TraceListener (even if we don’t have full features in netstandard1.6).\r\nHere,\r\nWe have to add TraceListener like,\r\n        Trace.Listeners.Add(myFileListener);\r\nand we add tracing using,\r\n        Trace.WriteLine(traceString);\r\nand we have to keep listener/file open and we don’t have(with my understanding) an event with which we can close or dispose the trace file.\r\nSo to keep it simple and to close the trace file each time, used a file writer. **Issue is** cost when we we enable tracing.\r\n\r\nAny better approach you tried or come across which will keep the trace file open & close gracefully.\r\n\r\nRegards\r\nBasanth"
      },
      {
        "user": "sharwell",
        "created_at": "2018-08-17T15:48:59Z",
        "body": "One approach that I like is using performance tracing tools to log exceptions. I'll see if I can find the old branch where I did this for Roslyn as an experiment. The files are very big, but it will have the data you need to deal with the problem."
      },
      {
        "user": "msbasanth",
        "created_at": "2018-08-17T15:52:36Z",
        "body": "@sharwell that would be helpful if you could share."
      },
      {
        "user": "sharwell",
        "created_at": "2018-09-21T21:47:28Z",
        "body": "@msbasanth You can see the approach in #29448."
      }
    ]
  },
  {
    "number": 28235,
    "title": "Does RunAsync gurantee running on a separate thread?",
    "created_at": "2018-07-02T02:42:32Z",
    "closed_at": "2018-07-02T20:54:42Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Interactive",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28235",
    "body": "I was doing some performance bechmarking and found that RunAsync is actually running on my current thread, so I have two questions:\r\n\r\n1. Is this behavior expected? Because I'm trying to do this and RunAsync being actually synchronous will break my code:\r\n```csharp\r\nvar task = script.RunAsync(globals);\r\ntask.Wait(1000/*ms*/);\r\n```\r\nsince RunAsync only returns after script completes the run, there's no point in task.Wait(...).\r\n\r\n2. But I don't want to simply \"wrap up\" the RunAsync in a separate thread either, because it could be the case that under some circumstances the RunAsync would _actually_ truely run asynchronously (is it?)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28235/comments",
    "author": "pongba",
    "comments": [
      {
        "user": "ufcpp",
        "created_at": "2018-07-02T03:09:37Z",
        "body": "Yes, it is expected.\r\n\r\n```cs\r\nasync Task RunAsync()\r\n{\r\n    // runs synchronously\r\n    await Task.Run(() => {});\r\n    // runs with TaskScheduler (ThreadPool by default)\r\n}\r\n```\r\n"
      },
      {
        "user": "pongba",
        "created_at": "2018-07-02T04:33:14Z",
        "body": "@ufcpp Thanks! Could you elaborate a little bit? I'm not sure I follow. Why would a method called XxxAsync not run asynchronously?"
      },
      {
        "user": "ufcpp",
        "created_at": "2018-07-02T05:14:03Z",
        "body": "```cs\r\nasync void RunAsync()\r\n{\r\n    // A\r\n    await Task.Delay(1);\r\n    // B\r\n    await Task.Delay(1);\r\n    // C\r\n}\r\n```\r\n\r\n↓\r\ncompiler-generated code:\r\n\r\n```cs\r\n    Action a = null;\r\n    int state = 0;\r\n\r\n    a = () =>\r\n    {\r\n        Task t = null;\r\n        switch (state)\r\n        {\r\n            case 0:\r\n                // A\r\n                state = 1;\r\n                t = Task.Delay(1);\r\n                break;\r\n            case 1:\r\n                // B\r\n                state = 2;\r\n                t = Task.Delay(1);\r\n                break;\r\n            case 2:\r\n                // C\r\n                state = 3;\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n        if (t.IsCompleted) a();\r\n        else t.ContinueWith(_1 => a());\r\n    };\r\n    a();\r\n}\r\n```\r\n\r\n↓\r\n\r\nsimilar execution flow:\r\n\r\n```cs\r\nvoid RunAsync()\r\n{\r\n    // A\r\n    Task.Delay(1).ContinueWith(_ =>\r\n    {\r\n        // B\r\n        await Task.Delay(1).ContinueWith(__ =>\r\n        {\r\n            // C\r\n        }\r\n    })\r\n}\r\n```\r\n"
      },
      {
        "user": "sharwell",
        "created_at": "2018-07-02T16:15:20Z",
        "body": "@pongba This appears to be an external issue, but to point you in the right direction I need to know the type of `script` in your example."
      },
      {
        "user": "pongba",
        "created_at": "2018-07-02T19:06:18Z",
        "body": "@sharwell thanks. Here's my code:\r\n\r\n**script.csx**\r\n```csharp\r\n#r \"System\"\r\n\r\nusing System;\r\nusing System.Threading;\r\n\r\nConsole.WriteLine(\"I'm a sleeping beauty..\");\r\nThread.Sleep(1000000); \r\n```\r\n\r\n**main.cs**\r\n```csharp\r\nvar content = File.ReadAllText(\"script2.csx\");\r\nvar script = CSharpScript.Create<int>(content);\r\nvar c = script.Compile();\r\nvar task = script.RunAsync();\r\nConsole.WriteLine(\"script should still be running..\");\r\n```\r\n\r\n**Expected Behavior**:\r\nI'm a sleeping beauty..\r\nscript should still be running..\r\n\r\n**Actual Behavior**:\r\nI'm a sleeping beauty..\r\n\r\n**Remarks**\r\nIt's not that I don't understand why the behavior is so, what I don't get is why the API semantics is \"synchronously run the script\" while the naming is xxxAsync - I don't see where the async behavior is, did I miss anything?"
      },
      {
        "user": "pongba",
        "created_at": "2018-07-02T20:21:03Z",
        "body": "I think I know the reason now, here's what I think: (@sharwell @ufcpp correct me if I'm wrong here)\r\n\r\nThe Run**Async** **doesn't** mean the C#script is being put onto a separate thread to execute, but rather it means the script can use `await` to make itself `async`, e.g.:\r\n\r\n**script2.csx**\r\n```csharp\r\n#r \"System\"\r\n\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nawait Task.Run(()=> { Console.WriteLine(\"I'm a sleeping beauty...\"); Thread.Sleep(1000*10); Console.WriteLine(\"I'm awake..\"); });\r\nConsole.WriteLine(\"ending script\");\r\n123\r\n```\r\n**main.cs**\r\n```csharp\r\nstatic void test0()\r\n{\r\n    var content = File.ReadAllText(\"script2.csx\");\r\n    var script = CSharpScript.Create<int>(content);\r\n    var c = script.Compile();\r\n    var task = script.RunAsync();\r\n    Console.WriteLine(\"{0}: script should still be running..\", DateTime.Now);\r\n    Console.WriteLine(\"{1}: script result: {0}\", task.Result.ReturnValue, DateTime.Now);\r\n}\r\n```\r\nor more precisely, the (generated-by-Roslyn since C#script doesn't explicitly declare entry point method) implicit entry point method of the C#script is marked as an `async` method:\r\n```csharp\r\n// in ScriptBuilder.cs\r\nprivate Func<object[], Task<T>> Build<T>(\r\n    // ...\r\n    return runtimeEntryPoint.CreateDelegate<Func<object[], Task<T>>>();\r\n}\r\n```\r\n\r\nIn short, Run**Async** means the scripting code is treated effectively as an `async` method, not that the method itself is invoked on a seprate thread.\r\n\r\n`I still think the method naming is misleading though, because RunAsync is not a true 'async' method, and it returns a Task object, one might naturally expect to be able to Wait(scriptTimeout) on the Task object`"
      },
      {
        "user": "sharwell",
        "created_at": "2018-07-02T20:54:42Z",
        "body": "> In short, RunAsync means the scripting code is treated effectively as an async method, not that the method itself is invoked on a separate thread.\r\n\r\nYes, this is correct. The behavior of `RunAsync` is consistent with the general guarantees of other asynchronous methods in the framework (i.e. the method is allowed but not guaranteed to yield before returning). If you want to force the code to run asynchronously, you can call the method like this:\r\n\r\n```csharp\r\nvar task = Task.Run(() => script.RunAsync());\r\n```"
      }
    ]
  },
  {
    "number": 28035,
    "title": "VS.NET doesn't use .NET framework 4.7.2",
    "created_at": "2018-06-20T23:21:55Z",
    "closed_at": "2018-06-22T18:30:52Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28035",
    "body": "**Version Used**: \r\nVS.NET Community 15.7.4\r\n\r\n**Steps to Reproduce**:\r\n1. Install .Net framework 4.7.2 runtime\r\n2. Install .Net framework 4.7.2 DevPack\r\n3. Show About VS.NET box.\r\n\r\n**Expected Behavior**:\r\nVS.NET should use .Net framework 4.7.2 .\r\n\r\n**Actual Behavior**:\r\nAbout box says VS.NET uses .Net framework 4.7.03062 .\r\nI get an error when I try to use the HashSet<T>.TryGetValue method, which is new in .Net framework 4.7.2\r\n\r\nIs there any thing I should do to make VS.NEt use .Net framework 4.7.2?\r\n\r\nUpdate:\r\nI uninstalled Framework 4.7 and 4.7.2, and then re-install 4.7.2 but VS.NET still saying it deals with framework 4.7.03062 but when I loaded a project that targets 4.7 I got a message saying it is not found, so, I chosed version 4.6.1. When I opened the project properties I found 4.7.2 in the list for the first time, so I choosed it, and it works fine.\r\nI think IDE need some work to fix this strange behaviour!\r\nThanks.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28035/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-06-21T02:41:50Z",
        "body": ":memo: 4.7.03062 is the internal version number for 4.7.2.\r\n\r\n> I get an error when I try to use the HashSet.TryGetValue method, which is new in .Net framework 4.7.2\r\n\r\nCan you provide steps to reproduce this?"
      },
      {
        "user": "ghost",
        "created_at": "2018-06-21T10:43:10Z",
        "body": "@sharwell \r\n> 4.7.03062 is the internal version number for 4.7.2.\r\n\r\nThis is strange 😊\r\n\r\nI fist set up v4.7.2 runtime but it didn't appear in the version list in project properties. So, I setup the devpac but I didn't look in project properties because of the v4.7.03062 thibg!\r\nThere is still one odd behavior, after I uninstalled v4.7 and re-instaaled v4.7.2, vs.net aaked me to change the project frsmework to 4.6.1 not to 4.7.2!\r\n"
      },
      {
        "user": "jinujoseph",
        "created_at": "2018-06-22T16:34:09Z",
        "body": "cc @Pilchie "
      },
      {
        "user": "Pilchie",
        "created_at": "2018-06-22T16:44:49Z",
        "body": "Note that there are two different things at play here:\r\n\r\n1. The version of the .NET Framework that VS runs against.  This is the version that comes with windows (for Windows 10), or that you install.  Often we call this the \"runtime\".\r\n2. The version of the .NET Framework that any particular project in VS targets. This is completely orthogonal to the version that is installed. This allows you to target older or newer runtimes, and uses reference assemblies that contain the exact APIs that a particular version of the framework supports.\r\n\r\nIn order to target various versions of the .NET Framework, you need to install the \"Targeting Pack\" for that version of the .NET Framework, and then it should show up in the values at Project Properties where you choose what version to target.\r\n\r\nThe error message that tells you to target 4.6.1 is the default message you get when your project says that it targets a version of the framework that you don't have a targeting pack for (it's hard-coded to just say 4.6.1).\r\n\r\nTo get more targeting packs, start the VS installer and look at the optional components, and make sure the one for the versions of the framework you want to install is checked.\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2018-06-22T18:18:33Z",
        "body": "@Pilchie \r\nThanks for the details."
      }
    ]
  },
  {
    "number": 27680,
    "title": "Comment Trivia looks to be incorrectly placed.",
    "created_at": "2018-06-09T18:16:15Z",
    "closed_at": "2018-06-09T19:17:14Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27680",
    "body": "Take the following code.\r\n```vbnet\r\n        If cond1 Then\r\n            '\r\n            '\r\n            Console.WriteLine(\"If\")\r\n            '\r\n            '\r\n        ElseIf cond2 Then\r\n            '\r\n            '\r\n            Console.WriteLine(\"ElseIf 1\")\r\n            '\r\n            '\r\n        Else\r\n            '\r\n            '\r\n            Console.WriteLine(\"Else\")\r\n            '\r\n            '\r\n        End If\r\n```\r\nI'd expect\r\n```\r\n        If cond1 Then\r\n{|          '\r\n            '\r\n            Console.WriteLine(\"If\")\r\n            '\r\n            '|}\r\n{|        ElseIf cond2 Then\r\n            '\r\n            '\r\n            Console.WriteLine(\"ElseIf 1\")\r\n            '\r\n            '|}\r\n{\\        Else\r\n            '\r\n            '\r\n            Console.WriteLine(\"Else\")\r\n            '\r\n            '\r\n|}\r\n{|       End If |}\r\n```\r\nbut actually get is\r\n```\r\n        If cond1 Then\r\n{|          '\r\n            '\r\n            Console.WriteLine(\"If\")|}\r\n{|            '\r\n            '\r\n         ElseIf cond2 Then\r\n            '\r\n            '\r\n            Console.WriteLine(\"ElseIf 1\")|}\r\n{|          '\r\n            '\r\n        Else|}\r\n{|          '\r\n            '\r\n            Console.WriteLine(\"Else\") |}\r\n{|          '\r\n            '\r\n         End If|}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27680/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2018-06-09T19:17:14Z",
        "body": "Trivia is attached to the previous token or node if it appears on the same line. It is attached to the next token or node if there is no token preceding it on the same line.\r\n\r\nThis is by design."
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2018-06-09T19:48:45Z",
        "body": "@gafter \r\nIt looks wrong because I'm expecting the comments to part of the `ElseIf` body, not leading trivia on the `ElseIf` keyword."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-10T22:17:57Z",
        "body": "@AdamSpeight2008 This is how trivia works in roslyn.  There are no exceptions.  Trivia operates entirely lexically and is determined when we scan out the tokens.  Nothing is adjusted based on what nodes the tokens go into.  This gives an entirely consistent and uniform system that all higher layers of roslyn can depend on."
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2018-06-11T18:40:27Z",
        "body": "@CyrusNajmabadi \r\nMy reason that I believe it _appears wrong_ is the following case. \r\n\r\nSome that should be as simple highlighting the `Else If ... Then` and its code block\r\n```\r\nIf\r\nElse If ... Then\r\n  ' comment\r\n  Code\r\n  '\r\nElse\r\nEnd If\r\n```\r\nshould relatively simple as `[elseif].FullSpan` isn't it's\r\n```vb\r\n                    Dim [ElseIf] = node.ElseIfBlocks(idx)\r\n                    Dim NextElseIf = If(idx < node.ElseIfBlocks.Count - 1, node.ElseIfBlocks(idx + 1), Nothing)\r\n                    Dim start = [ElseIf].SpanStart\r\n                    Dim finish As Int32?\r\n                    If NextElseIf IsNot Nothing Then\r\n                        finish = GetEndOfPreviosComment(NextElseIf)\r\n\r\n                    ElseIf node.ElseBlock IsNot Nothing Then\r\n                        finish = GetEndOfPreviosComment(node.ElseBlock)\r\n\r\n                    ElseIf node.EndIfStatement IsNot Nothing Then\r\n                        finish = GetEndOfPreviosComment(node.EndIfStatement)\r\n\r\n                    End If\r\n                    If finish.HasValue Then\r\n                        Dim span = Text.TextSpan.FromBounds(start, finish.Value)\r\n                        Dim blockSpan = CreateBlockSpan(\r\n                                                    span,\r\n                                                    span,\r\n                                        bannerText:=\"Else If\",\r\n                                      autoCollapse:=False,\r\n                                              type:=BlockTypes.Conditional,\r\n                                     isCollapsible:=True,\r\n                                isDefaultCollapsed:=False)\r\n                        Debug.Assert(blockSpan IsNot Nothing)\r\n                        spans.AddIfNotNull(blockSpan)\r\n                    End If\r\n```\r\n\r\n```vbnet\r\n        Private Function GetEndOfPreviosComment(node As SyntaxNode) As Integer?\r\n            Dim LeadingTrivia = node.GetLeadingTrivia\r\n            Dim LastComment As SyntaxTrivia? = LeadingTrivia.LastOrDefault(Function(t) t.IsRegularOrDocComment)\r\n            Dim finish As Integer?\r\n            If LastComment.HasValue Then\r\n                finish = LastComment.Value.Span.End\r\n            Else\r\n                finish = node.SpanStart\r\n            End If\r\n            Return finish\r\n        End Function\r\n```\r\n\r\nEspecially if you consider the indenting, suggests the Comments within  the  `Else If` code block are part of it. Not at the same indents else the `Else`. _where the comment is part of it's leading trivia_"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-11T18:49:31Z",
        "body": "> My reason that I believe it appears wrong is the following case.\r\n\r\nRegardless, this will not change.  It is a core part of hte Roslyn syntax model and there are millions of lines of code that now depend on this.  It's a core value of this syntax model that we be completely consistent here.\r\n\r\n--\r\n\r\nIf you want, you are *welcome* to write your own helper functions that present whatever \"view\" you want over the core syntax.  We do this in the IDE codebase all over hte place when appropriate.  But that allows us to take particular domain specific views of trivia when appropriate.  However, the actual core model is not touched (and will not be touched)."
      }
    ]
  },
  {
    "number": 27323,
    "title": "Question: Why is VBCSCompiler.exe named as such?",
    "created_at": "2018-06-01T11:44:15Z",
    "closed_at": "2018-06-05T06:06:38Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27323",
    "body": "I would've expected `CSVBCompiler`, simply because alphabetical ordering just makes more sense...",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27323/comments",
    "author": "IanKemp",
    "comments": [
      {
        "user": "0xd4d",
        "created_at": "2018-06-01T15:16:03Z",
        "body": "There are two hidden names in that name.\r\n\r\n<details>\r\n<summary>Spoiler</summary>\r\nvbc + csc = vbcsc\r\n</details>"
      },
      {
        "user": "IanKemp",
        "created_at": "2018-06-05T06:06:38Z",
        "body": "Hahaha, I got it :D"
      }
    ]
  },
  {
    "number": 27302,
    "title": "A command to close all code pages",
    "created_at": "2018-05-31T20:34:39Z",
    "closed_at": "2018-05-31T23:22:23Z",
    "labels": [
      "Question",
      "Area-External",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27302",
    "body": "Sometimes I open too many code files in the IDE (i.e in a search and replace operation), and I have to close them one by one!\r\nI wish to have a button or context menu command to close all open code pages at once.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27302/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jhinder",
        "created_at": "2018-05-31T21:03:03Z",
        "body": "The IDE can already do this. You can either right-click a tab and select \"Close All Documents\", or you can use Window > Close All Documents. Both do exactly the same thing. You can even assign a keyboard shortcut to it in Tools > Options > Environment > Keyboard (search for Window.CloseAllDocuments)."
      },
      {
        "user": "ghost",
        "created_at": "2018-05-31T23:18:27Z",
        "body": "@jhinder \r\nThanks. I always right-click on the empty part of the bar, so I never saw this!\r\nMaybe you should show the context menu at this part too.\r\n"
      },
      {
        "user": "sharwell",
        "created_at": "2018-05-31T23:26:53Z",
        "body": "> Thanks. I always right-click on the empty part of the bar, so I never saw this! Maybe you should show the context menu at this part too.\r\n\r\nThe best way to submit this would be using the Report a Problem tool in the IDE. It will end up routed to the team that works in that area. A screenshot, especially one with a circle or arrow indicating the part of the UI you are referring to, would be a big help as well."
      }
    ]
  },
  {
    "number": 26333,
    "title": "CompletionItemSelectionBehavior for LINQ methods",
    "created_at": "2018-04-23T08:52:59Z",
    "closed_at": "2024-10-21T17:14:06Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26333",
    "body": "**Version Used**: 2.7.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Call CompletionService.GetCompletionsAsync for following code: `string.Format(s`\r\n2. Call CompletionService.GetCompletionsAsync for following code: `new[] { 1 }.Where(s`\r\n3. Compare SelectionBehavior of all items in these two cases\r\n\r\n**Expected Behavior**:\r\nI expect that in first case SelectionBehavior at least for some items would be HardSelection (or Default?) and in second case - SoftSelection, because in VS if I press space after s in frist case - it commits selected value from auto-complete dropdown, while in second case not. \r\n\r\n**Actual Behavior**:\r\nSelectionBehavior is default for all items.\r\n\r\n\r\nDo I wrongly understand meaning of SelectionBehavior? If yes, can you suggest me which flag do I need to check to have the same behavior in my code editor as in VS? ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26333/comments",
    "author": "denisbredikhin",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T17:14:06Z",
        "body": "Closing out due to lack of feedback on this issue."
      }
    ]
  },
  {
    "number": 25745,
    "title": "Add a cs file as reference to a CSharpCompilation",
    "created_at": "2018-03-27T12:17:35Z",
    "closed_at": "2018-03-28T07:57:14Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25745",
    "body": "I am reading a cs file and use its content SyntaxTree to create its CSharpCompilation instance. here is the cs file : \r\n\r\n```\r\nusing System;\r\nnamespace appconsole\r\n{\r\n    public class CallerClass\r\n    {      \r\n        public void CallerMethod()\r\n        {\r\n            TestClass obj = new TestClass();\r\n            obj.TestMethod();\r\n        }       \r\n    }\r\n}\r\n```\r\n\r\nand here is way i use to get CSharpCompilation of this file : \r\n\r\n```\r\nvar compilation = CSharpCompilation.Create(\"name\")\r\n    .AddReferences(\r\n    MetadataReference.CreateFromFile(\r\n    typeof(object).Assembly.Location))\r\n    .AddSyntaxTrees(this.Tree);    \r\nvar semantic = compilation.GetSemanticModel(this.Tree);\r\n```\r\n\r\nAs you can see there is an object of the class TestClass. if I use the following code to get the ISymbole of `obj` object it returns `Error TestClass` which the ContaningNamespace property is null.\r\n\r\n`semantic.GetTypeInfo({obj node}).Type`\r\n\r\n\r\nSo I need to add my TestClass file to this CSharpCompilation somehow. is it possible to do this?so when I get `semantic.GetTypeInfo({obj node}).Type.ContaningNamespace` it should return the namespace of the file containing `TestClass` class\r\n\r\nFYI here is my TestClass file : \r\n\r\n```\r\nusing System;\r\nnamespace appconsole\r\n{\r\n    public class TestClass\r\n    {        \r\n        public void TestMethod()\r\n        {            \r\n        }        \r\n    }\r\n}\r\n```\r\n\r\nso in this case semantic.GetTypeInfo({obj node}).Type.ContaningNamespace should returns `appconsole`. Obviusly this behavoir is correct because `semantic` doesnt know anything about TestClass. thats the reason i want to add that file as a reference to my CSharpCompilation\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25745/comments",
    "author": "Foroughi",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2018-03-27T16:36:20Z",
        "body": "You need to pass a second syntax tree (the one with `TestClass` definition) into the compilation.\r\nYou can do that by passing an enumerable of syntax trees when you create the compilation, or in your call to `AddSyntaxTrees`."
      },
      {
        "user": "Foroughi",
        "created_at": "2018-03-28T07:57:14Z",
        "body": "@jcouv  thanks. that worked."
      }
    ]
  },
  {
    "number": 25577,
    "title": "Error CS1902. How to solve it?",
    "created_at": "2018-03-19T02:13:44Z",
    "closed_at": "2018-03-19T07:49:46Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25577",
    "body": "**Version Used**: \r\n**.NET Framework 4.6\r\nMsBuild Engine Version 15.4.0.0\r\nubuntu14.4  \r\nmono 5.10.0.140**\r\nCommand: MSBuild MyApp.csproj\r\n\r\nCSC : error CS1902: Invalid option 'portable' for /debug; must be full or pdbonly [/vsts/agent/_work/1/s/MajorHazard.MonitorWarning.WebApi/MajorHazard.MonitorWarning.WebApi.csproj]\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25577/comments",
    "author": "NMSAzulX",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2018-03-19T03:18:58Z",
        "body": "Tagging @tmat "
      },
      {
        "user": "NMSAzulX",
        "created_at": "2018-03-19T03:28:36Z",
        "body": "@jcouv  Thanks a lot.  I had solved the problem. Solution : Update the Microsoft.Net.Compilers.  But why csc(or vs) don't suggest me updating the package?"
      },
      {
        "user": "jcouv",
        "created_at": "2018-03-19T07:49:46Z",
        "body": "Glad to hear this is resolved. I'll go ahead and close. \r\nI suspect you encountered a bug which was fixed. No way for the old csc to know about that. "
      },
      {
        "user": "mkumar100",
        "created_at": "2018-09-09T08:57:08Z",
        "body": "@NMSAzulX \r\nThanks. I also updated Microsoft.Net.Compliers. After that I build the project and then the error went away."
      }
    ]
  },
  {
    "number": 25311,
    "title": "Not able to get symbols for Referenced dlls when loading a solution async",
    "created_at": "2018-03-07T10:46:13Z",
    "closed_at": "2022-11-22T05:02:15Z",
    "labels": [
      "Bug",
      "Question",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25311",
    "body": "**Version Used**: 2.6.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Load any C# solution for compilation async\r\n2. Try to find symbols for a any referenced library\r\n3. References comes as empty\r\n\r\nSample Code\r\n\r\ncompilation.GetTypeByMetadataName(fullyQualifiedMetadataName)\r\nTried with alternative method as well \r\n```C#\r\n            foreach (var project in _solution.Projects)\r\n            {\r\n                foreach (var document in project.Documents)\r\n                {\r\n                    var model = document.GetSemanticModelAsync().Result;\r\n\r\n                    var methodInvocation = document.GetSyntaxRootAsync().Result;\r\n                    InvocationExpressionSyntax node = null;\r\n                    try\r\n                    {\r\n                        node = methodInvocation.DescendantNodes().OfType<InvocationExpressionSyntax>()\r\n                             .Where(x => ((MemberAccessExpressionSyntax)x.Expression).Name.ToString() == methodName).FirstOrDefault();\r\n\r\n                        if (node == null)\r\n                            continue;\r\n                    }\r\n                    catch (Exception exception)\r\n                    {\r\n                        // Swallow the exception of type cast. \r\n                        // Could be avoided by a better filtering on above linq.\r\n                        continue;\r\n                    }\r\n\r\n                    methodSymbol = model.GetSymbolInfo(node).Symbol;\r\n                    found = true;\r\n                    break;\r\n                }\r\n```\r\n**Expected Behavior**:\r\nReferences should be loaded as part of compilation\r\n**Actual Behavior**:\r\nReferences metadata is not loading as part of solution compilation\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25311/comments",
    "author": "ukhimesra",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-29T00:47:03Z",
        "body": "Would need to know if oepning the workspace produced any diagnostics. "
      },
      {
        "user": "ghost",
        "created_at": "2022-11-22T05:02:18Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 24470,
    "title": "Clarity on the design process for VB and C#",
    "created_at": "2018-01-26T07:49:58Z",
    "closed_at": "2018-01-29T03:06:36Z",
    "labels": [
      "Question",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/24470",
    "body": "Both the VB and C# language repositories have a read me document that outlines the process for language features. I've extracted out two sections that I think did further clarity.\r\n\r\n>3. A prototype owner (who may or may not be proposal owner) should implement a prototype in their own fork of the Roslyn repo and share it with the design team and community for feedback. A prototype must meet the following bar:\r\n>\r\n> * Parsing (if applicable) should be resilient to experimentation--typing should not cause crashes.\r\n> * Include minimal tests demonstrating the feature at work end-to-end.\r\n> * Include minimal IDE support (keyword coloring, formatting, completion).\r\n>\r\n>4. Once a prototype has proven out the proposal and the proposal has been approved-in-principle by the design team, a feature owner (who may or may not be proposal or prototype owner(s)) implemented in a feature branch of the Roslyn repo. The bar for implementation quality can be found here.\r\n\r\nEspecially the following part of `3` \r\n > share it with the design team and community for feedback\r\n\r\nHow can they share it with the design team and community for feedback?\r\nSubmitting a PR to the Roslyn repo, seems to go against section 4. \r\nFeedback could be a useful especially if the need eyes and helping hands of their communities to overcome tricky parts. They may just be out of reach for the current level of knowledge. \r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/24470/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2018-01-26T08:02:46Z",
        "body": "You share a prototype for feedback by pointing people to a fork of the Roslyn repository. Microsoft employees tend to use a git branch on the dotnet/roslyn repo, but you can use a branch in your own repo."
      },
      {
        "user": "gafter",
        "created_at": "2018-01-26T08:07:53Z",
        "body": "The kind of feedback step 3 of this process is intended to support is feedback about the proposed language feature as designed and prototyped, not the code that implements its prototype. Submitting a PR would not solicit feedback about the language feature, but rather solicits feedback about its prototype implementation, which is not what should be happening in step 3."
      },
      {
        "user": "gafter",
        "created_at": "2018-01-26T08:23:49Z",
        "body": "@jaredpar Do you want to add anything about how an external contributor can prepare a usable prototype of a proposed language feature? Is there a documented way to do that?"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2018-01-26T08:35:39Z",
        "body": "@gafter @jaredpar Sorry if I've been a pain on these points, it just frustrating *(probably on both sides)* that I feel really excited to be close to getting the feature working *(at least to my low standards)*. And the key or help to reach it, is not forthcoming. *I understand that it isn't an automatic right, but the occasional scraps from table of the languages gods would be treasured and respected.*"
      },
      {
        "user": "jaredpar",
        "created_at": "2018-01-26T17:32:48Z",
        "body": "@AdamSpeight2008 \r\n\r\n> How can they share it with the design team and community for feedback?\r\n\r\nI think the best way to do this is to start a discussion on the appropriate language repo, provide a speclet of the feature and link to the implementation branch.\r\n\r\n> Submitting a PR to the Roslyn repo, seems to go against section 4.\r\n\r\nCorrect. That's creating a PR that has almost 0 chance of being merged. \r\n\r\nThis is not a limitation we apply to the community, it's one we apply to ourselves as well. Language features are **hard**. They don't just encompass compiler changes but have to take into account every aspect of the language experience: Intellisense, coloring, API shape, ENC, debugging, etc ... It usually takes many iterations and contributions from developers who are knowledgable in those specific areas to complete a feature. \r\n\r\nThis is why we typically don't do PRs for language features into our release branches. It's simply not realistic to complete a language feature in a single PR. Merging a partially completed feature into a release branch is not acceptable because our mentality is to have these branches in an \"always ready to ship\" state. Partial features go against this. \r\n\r\n> And the key or help to reach it, is not forthcoming\r\n\r\nAdam we've provided the feedback and documentation on how to approach these problems for some time now. Several of the docs you've referenced were created specifically in reaction to PRs you sent in order to give clarity to you and the community. \r\n\r\nYet no matter how many times we provide certain pieces of feedback or guidance you simply do not follow it. I've lost track of the number of times we've had to ask you to:\r\n\r\n1. Stop including large code formatting changes in PR. \r\n1. Stop sending PRs for surprise language features and asking for review.\r\n1. Stop opening a PR, quickly closing a PR and then opening a new PR for the same change. \r\n\r\nI'm not sure what the disconnect is here but we feel we've been **extremely** clear on this points. I understand you don't agree with these, in particular the code formatting, but those are the rules by which we run this repository. \r\n\r\nThat being said though I'm happy to continue answering questions and provide guidance on how to move forward with changes. \r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "gafter",
        "created_at": "2018-01-29T03:06:36Z",
        "body": "Closed, question answered."
      }
    ]
  },
  {
    "number": 23902,
    "title": "Cannot obtain symbol for nameof(Method)",
    "created_at": "2017-12-21T13:43:34Z",
    "closed_at": "2018-01-08T18:24:52Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23902",
    "body": "**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nclass Foo\r\n{\r\n    void Method()\r\n    {\r\n        string methodName = nameof(Method);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nSemanticModel should return symbol for expression 'Method' inside nameof.\r\n\r\n**Actual Behavior**:\r\nSemanticModel returns null.\r\n\r\nI tested property, field and event inside nameof and they all return a symbol.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23902/comments",
    "author": "josefpihrt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-27T19:14:37Z",
        "body": "It may be because this is a method group."
      },
      {
        "user": "agocke",
        "created_at": "2018-01-08T18:24:27Z",
        "body": "@JosefPihrt Cyrus is right -- this is because `Method` is a method group. The reason why it works this way is because method groups don't have their own symbol, they are instead a group of individual method symbols.\r\n\r\nConsider what would happen if you had overloads for your method, e.g.\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    void Method()\r\n    {\r\n        string methodName = nameof(Method);\r\n    }\r\n    void Method(string s) { }\r\n    void Method(int i) { }\r\n}\r\n```\r\n\r\nThere's no single method to choose from -- `Method` could refer to any of those methods. Rather than have different behavior when there are no overloads, the compiler provides the same behavior each time: GetSymbolInfo on a method group produces a SymbolInfo where the `Symbol` property returns `null`, but `CandidateSymbols` returns all the methods (overloads) in the method group.\r\n\r\nThe reason why fields, events, and properties behave differently is that there is no way to overload those members, so there is only ever a single symbol.\r\n\r\nThe preferred way of dealing with method groups would be to normally look at `Symbol`, but if `Symbol` is null and `CandidateReason` is `MemberGroup`, then you know that the target is a method group and all the method symbols you're interested in will be in `CandidateSymbols`.\r\n  "
      },
      {
        "user": "josefpihrt",
        "created_at": "2018-01-08T21:03:56Z",
        "body": "That makes sense, thanks for explanation @agocke."
      }
    ]
  },
  {
    "number": 23131,
    "title": "Unexpected behavior for is operator",
    "created_at": "2017-11-11T02:09:40Z",
    "closed_at": "2017-11-11T22:24:52Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23131",
    "body": "**Version Used**: \r\nVS 15.4.2 Project set to current minor version of C#.\r\n**Steps to Reproduce**:\r\n\r\n\r\n\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tTestWithConcreteOption();\r\n\t\t\tTestWithInterfaceOption();\r\n\t\t\tTestWithDerivedOption();\r\n\t\t\tTestWithObjectOption();\r\n\r\n\t\t\tConsole.ReadKey();\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithConcreteOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithInterfaceOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateInterfaceOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithDerivedOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateDerivedOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithObjectOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateObjectOption();\r\n\t\t\tvar context = CreateContext(interfaceOption as IOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithObjectOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithObjectOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static IOption CreateInterfaceOption()\r\n\t\t{\r\n\t\t\treturn CreateOption();\r\n\t\t}\r\n\r\n\t\tprivate static DefaultOption CreateDerivedOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static object CreateObjectOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static GeneratorOption CreateOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static IToolContext<T> CreateContext<T>(T option) where T : class, IOption\r\n\t\t{\r\n\t\t\treturn new DefaultContext<T>(option);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class GeneratorOption : DefaultOption, IGeneratorOption\r\n\t{\r\n\t}\r\n\r\n\tpublic class DefaultOption : IOption\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\tpublic class DefaultContext<T> : IToolContext<T> where T : class, IOption\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tpublic DefaultContext(IOption option)\r\n\t\t{\r\n\t\t\tOption = option;\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tpublic IOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IToolContext\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IToolContext<out T> where T : class, IOption\r\n\t{\r\n\t\tIOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IGeneratorOption : IOption\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IOption\r\n\t{\r\n\t}\r\n\r\n**Expected Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Expected behavior.\"\r\nTestWithDerivedOption -> \"Expected behavior.\"\r\nTestWithObjectOption -> \"Expected behavior.\"\r\n\r\n**Actual Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Unexpected behavior.\"\r\nTestWithDerivedOption -> \"Unexpected behavior.\"\r\nTestWithObjectOption -> \"Unexpected behavior.\"\r\n\r\nI would expect this to work the way i pointed out. Am i wrong in thinking that? \r\n\r\nIf pattern matching is merely a feature which works with compile time information this issue would make sense i suppose - however in that case i would expect an analyzer to point out this potential issue if that is possible.\r\n\r\n**PS: using \"as\" results in the same results.**\r\n**Only TestWithDerivedOption provides a diagnostic pointing out this potential flaw.**",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23131/comments",
    "author": "taori",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2017-11-11T16:59:26Z",
        "body": "You are testing for types that are not the dynamic type of the object.\r\n\r\n``` c#\r\n\t\tvar interfaceOption = CreateInterfaceOption(); // of type IOption\r\n\t\tvar context = CreateContext(interfaceOption); // of type IToolContext<IOption>\r\n\t\tif (context is IToolContext<IGeneratorOption> gen) // no, it is of type IToolContext<IGeneratorOption>\r\n```\r\n"
      },
      {
        "user": "taori",
        "created_at": "2017-11-11T21:39:06Z",
        "body": "@gafter Yeah. i guess i can see why it isn't working.\r\n\r\nDo you disagree though, that adding analyzer warnings should be added to interface+object creation to avoid this?\r\n\r\nMy guess is that the is operator works this way to avoid doing reflection on runtime objects to see if the object matches the type which it is being checked for."
      },
      {
        "user": "gafter",
        "created_at": "2017-11-11T22:24:49Z",
        "body": "@taori You are confusing the static type of the container, `IToolContext<IOption>`, with the dynamic type of the thing it contains, `IGeneratorOption`. The type argument of the former does not have to be the same as the latter. The container might not even contain anything that could be checked at runtime, or it may contain multiple things of different types (e.g. if it is a `List<T>`).\r\n\r\nI'm not sure what the analyzer you suggest would do here.\r\n"
      }
    ]
  },
  {
    "number": 22629,
    "title": "How to get the actual StartLine of a Method/Class having attributes",
    "created_at": "2017-10-10T05:51:44Z",
    "closed_at": "2018-02-09T22:54:41Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22629",
    "body": "**Version Used**: \r\n2.3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In our code we are finding the start line of a Method or a Class based on the below code:\r\n`node.GetLocation().GetMappedLineSpan().StartLinePosition.Line;`\r\nhere the node is SyntaxNode for the class/method in picture.\r\n2. The above code works well for all the methods and classes who do not have any attribute decoration associated with it. But in case if the class / method is decorated with an attribute, the above code returns the start line as the first attribute decorated above the class /method.\r\n3. We understand that when we have a attribute for a given class or a method, the attribute is part of the class / method declaration. \r\n```\r\n1        using System;\r\n2        using System.Threading.Tasks;\r\n3        using NUnit.Framework;\r\n4        namespace Quartz.Tests.Unit\r\n5        {\r\n6              [DisallowConcurrentExecution]\r\n7              [PersistJobDataAfterExecution]\r\n8              public class TestAnnotatedJob : IJob\r\n9              {\r\n10                   public Task Execute(IJobExecutionContext context)\r\n11                    {\r\n12                        return Task.FromResult(0);\r\n13                     }\r\n14              }\r\n15                  \r\n16              public class TestJob : IJob\r\n17              {\r\n18                     public Task Execute(IJobExecutionContext context)\r\n19                    {\r\n20                         return Task.FromResult(0);\r\n21                     }\r\n22             }\r\n23        }\r\n```\r\n4. In the above class, when we try to find the start line of the class **TestJob** using the code `node.GetLocation().GetMappedLineSpan().StartLinePosition.Line` we get the start line as 16 which is logical. \r\nBut when we try to find the start line of the class **TestAnnotatedJob** using the code `node.GetLocation().GetMappedLineSpan().StartLinePosition.Line` we get the start line as 6 instead of 8, which though logical, but does not give the exact line number.\r\n\r\n**Expected Behavior**:\r\nSome mechanism in which we can get the actual line number of the start line for a class/method decorated with attribute.\r\n \r\n**Actual Behavior**:\r\nThere is no mechanism which we can use.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22629/comments",
    "author": "abhijitparkhi1983",
    "comments": [
      {
        "user": "alrz",
        "created_at": "2017-10-10T06:10:56Z",
        "body": "probably you should get the line number off of the Identifier (method name), since attributes are part of that node and `6` is correct as its start line."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-10-10T08:23:11Z",
        "body": "> get the actual line number of the start line\r\n\r\nAs you mentioned, you are getting the actual line number :)   If you want a different line number, you'll have to be more specific about what you want.  For example, a method might look like:\r\n\r\n```c#\r\n[attr1]\r\n[attr2]\r\npublic\r\nstatic\r\nvoid\r\nMain\r\n(\r\n)\r\n{\r\n     Console.WriteLine(\r\n          0);\r\n}\r\n```\r\n\r\nWhich of these lines do you consider the \"actual line\" that the method starts on?\r\n\r\nOnce you answer that, you'll likely be able to trivially write the code that gives you the value you want :)"
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2017-10-10T09:25:44Z",
        "body": "@alrz this is what it should be. Thanks for your quick reply.\r\n\r\n@CyrusNajmabadi very interesting and valid scenario which you have put in. Like i mentioned, the approach suggested by @alrz sounds the way to go. Thanks for your valuable views  "
      },
      {
        "user": "mrn-aglic",
        "created_at": "2019-12-23T15:53:38Z",
        "body": "I have a similar question to this one. Looking at the code in Visual studio, the class keyword and name are at line 7, but when I try to get the start of the span, I get the value 6 back (which is the line that contains an open curly bracket). \r\n\r\nIs this by design? I'm a bit confused. I'm loading the code from file. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-12-23T20:46:36Z",
        "body": "@mrn-aglic you may be confusing Roslyn's 0-based indices with VS' 1-based ui"
      },
      {
        "user": "mrn-aglic",
        "created_at": "2019-12-23T20:55:32Z",
        "body": "Yeah, I was... I noticed it a bit too late, and didn't find the time to remove my comment. "
      }
    ]
  },
  {
    "number": 22592,
    "title": "Inappropriate generation of CS 1612",
    "created_at": "2017-10-08T22:01:33Z",
    "closed_at": "2017-11-11T22:27:41Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22592",
    "body": "**Version Used**: \r\nVisual C# 2017 - 00369-60000-00001-AA549\r\n\r\n**Steps to Reproduce**:\r\nUnfortunately this error can be inappropriately generated when assigning to a property (i.e. invoking a property setter). An immutable struct can still have a valid property setter, as long as the property setter doesn't actually assign to any fields in the struct. For example, \r\n\r\n```csharp\r\n   public struct Relay { \r\n       public Relay(Func<string> getText, Action<string> setText) \r\n       { \r\n               this.GetText = getText; \r\n               this.SetText = setText; \r\n       } \r\n       private readonly Func<string> GetText; \r\n       private readonly Action<string> SetText; \r\n       public string Text { \r\n           get { return this.GetText(); } \r\n           set { this.SetText(value); } \r\n       } \r\n   } \r\n   class Example { \r\n       private Relay Relay { \r\n           get { return new Relay(() => this.text, t => { this.text = t; });  } \r\n       } \r\n       private string text; \r\n       public Method() { \r\n           var r = new Relay(); \r\n           r.Text = \"hello\"; // not a compile error (although there is a null reference) \r\n           this.Relay.Text = \"hello\";  // error 1612 inappropriately generated by the compiler \r\n           r = this.Relay; \r\n           r.Text = \"hello\"; // no compiler error is generated, and none would be appropriate\r\n   } \r\n```\r\n\r\n**Expected Behavior**:\r\nSee above. The compiler error should only be generated when a field in the struct is going to be assigned, not when a property is being assigned. \r\n\r\n**Actual Behavior**:\r\nThe compiler error is generated when assigning to a property, not only a field. \r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22592/comments",
    "author": "sjb-sjb",
    "comments": [
      {
        "user": "svick",
        "created_at": "2017-10-09T07:20:04Z",
        "body": "Since property setters *very often* write the value to a field and the compiler has no way of knowing whether it does so, I think producing the error makes sense: If the error was not produced, it would be too easy to write buggy code.\r\n\r\nThis means that in the rare, but valid cases where the property setter does not write to a field, you have to work around this by creating a local variable. I think that's a cost that's worth paying."
      },
      {
        "user": "sjb-sjb",
        "created_at": "2017-10-10T14:16:04Z",
        "body": "I would suggest making cs1612 be a warning rather than an error. This would draw the situation to the programmers attention, preventing buggy code, but still allow the compiler to compile perfectly valid code. The warning at least can be suppressed by the programmer where appropriate; with an error you are stuck. \n\nIt doesn't make sense to have valid code that the compiler refuses to compile simply because some other programmers might not be aware of what they are doing. A warning makes more sense. \n\nI don't agree with working around it using a temporary variable. First of all this is creating ugliness in user code to make up for a compiler deficiency. But in addition it is not always possible for the programmer to introduce the temporary variable, because the programmer may not have control over how the struct use -- for example in binding scenarios or possibly in generics, where the context of usage cannot be easily changed to introduce a temporary variable. \n\n\nSent from my iPhone\n"
      },
      {
        "user": "sharwell",
        "created_at": "2017-10-10T14:32:40Z",
        "body": ":memo: CS1612 is the following:\r\n\r\n> Cannot modify the return value of '{0}' because it is not a variable"
      },
      {
        "user": "gafter",
        "created_at": "2017-11-11T19:49:22Z",
        "body": "`this.Relay` is an rvalue, not an lvalue, so you can't modify one of its fields."
      },
      {
        "user": "svick",
        "created_at": "2017-11-12T15:47:22Z",
        "body": "@gafter The point here is that `this.Relay.Text = \"hello\";` does not try to modify any `Relay` fields, it tries to set a property. And yet the compiler does not allow it."
      },
      {
        "user": "gafter",
        "created_at": "2017-11-12T16:01:33Z",
        "body": "Calling a property set method requires passing a `this` parameter by reference, which can only be done for an lvalue."
      }
    ]
  },
  {
    "number": 22267,
    "title": "Should we offer a fixer to change \"readonly ref\" to \"ref readonly\"?",
    "created_at": "2017-09-21T21:18:45Z",
    "closed_at": "2017-09-28T22:07:12Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Feature - Readonly References"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22267",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22267/comments",
    "author": "OmarTawfik",
    "comments": [
      {
        "user": "alrz",
        "created_at": "2017-09-21T21:27:05Z",
        "body": "isn't it a (potentially) different thing? in that case, suggesting to \"fix\" it makes less sense."
      },
      {
        "user": "jcouv",
        "created_at": "2017-09-22T02:16:38Z",
        "body": "At this point `readonly ref` isn't used. Until it does, a fix makes sense."
      },
      {
        "user": "jcouv",
        "created_at": "2017-09-28T22:07:12Z",
        "body": "Based on latest LDM decision, this is no longer relevant. Closing"
      }
    ]
  },
  {
    "number": 22168,
    "title": "Formatter.FormatAsync does not seem to do anything.",
    "created_at": "2017-09-18T17:32:40Z",
    "closed_at": "2017-09-25T20:27:11Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22168",
    "body": "**Version Used**: \r\nDifferent\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    using System;\r\n    using System.Linq;\r\n    using System.Threading;\r\n    using System.Threading.Tasks;\r\n    using Microsoft.CodeAnalysis;\r\n    using Microsoft.CodeAnalysis.CSharp;\r\n    using Microsoft.CodeAnalysis.CSharp.Syntax;\r\n    using Microsoft.CodeAnalysis.Editing;\r\n    using Microsoft.CodeAnalysis.Formatting;\r\n    using Microsoft.CodeAnalysis.Simplification;\r\n    using NUnit.Framework;\r\n\r\n    public class Repro\r\n    {\r\n        [Test]\r\n        public async Task MakeSealed()\r\n        {\r\n            var testCode = @\"\r\nnamespace RoslynSandbox\r\n{\r\n    public class Foo\r\n    {\r\n    }\r\n}\";\r\n\r\n            var projectId = ProjectId.CreateNewId(\"Test\");\r\n            var sln = new AdhocWorkspace()\r\n                .CurrentSolution\r\n                .AddProject(projectId, \"Test\", \"Test\", LanguageNames.CSharp)\r\n                .WithProjectCompilationOptions(\r\n                    projectId,\r\n                    new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary, allowUnsafe: true))\r\n                .AddDocument(DocumentId.CreateNewId(projectId), \"Foo.cs\", testCode);\r\n\r\n            var editor = await DocumentEditor.CreateAsync(sln.Projects.First().Documents.First()).ConfigureAwait(false);\r\n            var type = ((CompilationUnitSyntax)editor.OriginalRoot)\r\n                .Members.OfType<NamespaceDeclarationSyntax>()\r\n                .First()\r\n                .Members.OfType<ClassDeclarationSyntax>()\r\n                .First();\r\n            editor.SetModifiers(type, DeclarationModifiers.From(editor.SemanticModel.GetDeclaredSymbol(type)).WithIsSealed(isSealed: true));\r\n            var expected = @\"\r\nnamespace RoslynSandbox\r\n{\r\n    public sealed class Foo\r\n    {\r\n    }\r\n}\";\r\n            var actual = await GetCodeAsync(editor.GetChangedDocument(), CancellationToken.None);\r\n            Console.Write(actual);\r\n            Assert.AreEqual(expected, actual);\r\n        }\r\n\r\n        private static async Task<string> GetCodeAsync(Document document, CancellationToken cancellationToken)\r\n        {\r\n            var simplifiedDoc = await Simplifier.ReduceAsync(document, Simplifier.Annotation, cancellationToken: cancellationToken).ConfigureAwait(false);\r\n            var formatted = await Formatter.FormatAsync(simplifiedDoc, Formatter.Annotation, cancellationToken: cancellationToken).ConfigureAwait(false);\r\n            var sourceText = await formatted.GetTextAsync(cancellationToken).ConfigureAwait(false);\r\n            return sourceText.ToString();\r\n        }\r\n    }\r\n```\r\n\r\nPrints:\r\n\r\n```\r\nnamespace RoslynSandbox\r\n{\r\n    public sealedclass Foo\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI expected the formatter to format `public sealedclass Foo`, chances are I used it wrong. Writing this issue any way in case it is a repro for a real bug.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22168/comments",
    "author": "JohanLarsson",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2017-09-25T16:02:20Z",
        "body": "Does it work if you do `.WithAdditionalAnnotations(Formatter.Annotation)` on the node you want formatted?"
      },
      {
        "user": "JohanLarsson",
        "created_at": "2017-09-25T16:08:01Z",
        "body": "Does the repro code not compile? Sorry about that if so.\r\nFor the question: I had `.WithAdditionalAnnotations(Formatter.Annotation)` but could not get the formatted output."
      },
      {
        "user": "dpoeschl",
        "created_at": "2017-09-25T16:17:21Z",
        "body": "Ahh, okay. You're formatting an entire document which isn't decorated with the `Formatter.Annotation`, so just get rid of the `Formatter.Annotation` argument to `Formatter.FormatAsync` to get it to format the whole thing -- that is, `var formatted = await Formatter.FormatAsync(simplifiedDoc, cancellationToken: cancellationToken).ConfigureAwait(false);` -- Does that work for you?\r\n\r\n[Note: updated explanation for clarity]"
      },
      {
        "user": "JohanLarsson",
        "created_at": "2017-09-25T19:40:30Z",
        "body": "Yes, removing the `Formatter.Annotation` made it format the document. Do you have a link to relevant docs for this?"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2017-09-25T20:24:22Z",
        "body": "I realize that you're looking for something a bit more, and that we could do much, much better with documentation. However, the XML doc comment does have some of this information:\r\n\r\n```C#\r\n/// <summary>\r\n/// Formats the whitespace in areas of a document corresponding to annotated nodes.\r\n/// </summary>\r\n/// <param name=\"document\">The document to format.</param>\r\n/// <param name=\"annotation\">The annotation used to find on nodes to identify spans to format.</param>\r\n/// <param name=\"options\">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>\r\n/// <param name=\"cancellationToken\">An optional cancellation token.</param>\r\n/// <returns>The formatted document.</returns>\r\npublic static Task<Document> FormatAsync(Document document, SyntaxAnnotation annotation, OptionSet options = null, CancellationToken cancellationToken = default)\r\n    => FormatAsync(document, annotation, options, rules: null, cancellationToken: cancellationToken);\r\n```\r\n\r\nNote the documentation for the `annotation` parameter above."
      },
      {
        "user": "dpoeschl",
        "created_at": "2017-09-25T20:27:11Z",
        "body": "The code is working now, so I'm going to close this. If there's a specific problem with the documentation, let's file and track that separately. Thanks!"
      }
    ]
  },
  {
    "number": 21988,
    "title": "Switch case is not block level: variable defined in different case is global to all cases.",
    "created_at": "2017-09-08T16:44:08Z",
    "closed_at": "2017-09-08T21:51:38Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21988",
    "body": "**Version Used**: C# in VS2017.3.3 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. This does not compile (Use of unassigned local variable 'b'\r\n```\r\n        public void TestSwitch()\r\n        {\r\n            var a = 2;\r\n            switch (a)\r\n            {\r\n                case 1:\r\n                    var b = 2;\r\n                    break;\r\n                case 2:\r\n                    b = b + 4;\r\n                    break;\r\n            }\r\n        }\r\n```\r\n\r\n2. This compiles and works:\r\n\r\n```\r\n        public void TestSwitch()\r\n        {\r\n            var a = 2;\r\n            switch (a)\r\n            {\r\n                case 1:\r\n                    var b = 2;\r\n                    break;\r\n                case 2:\r\n                    b = 1;\r\n                    b = b + 4;\r\n                    break;\r\n            }\r\n        }\r\n```\r\n\r\nIs this by design, since this works but is unexpected.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21988/comments",
    "author": "mpaine-act",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2017-09-08T17:42:10Z",
        "body": "Yes, this is by-design and expected.\r\n\r\nThe locals in a switch statement are actually scoped to the entire switch statement, so `b` is considered declared even in `case 2`.\r\nBut flow analysis (which determines if you use a variable before it was initialized) can see that `b = b + 4` will read variable `b` before it is initialized (when the control flow enters `case 2`)."
      }
    ]
  },
  {
    "number": 21541,
    "title": "How to get an instance of  Microsoft.CodeAnalysis.Solution for the solution already loaded in the current Visual Studios instance",
    "created_at": "2017-08-16T02:07:02Z",
    "closed_at": "2017-08-16T17:44:38Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21541",
    "body": "**Version Used**: \r\n2.3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Currently we are using **MSBuildWorkspace.OpenSolutionAsync** to open a particular Solution programatically. \r\n2. Instead, we want to get the Microsoft.CodeAnalysis.Solution object for the solution which is already open in the current instance of Visual Studios. \r\n3. The initial reference which we have got is to use following code: \r\n\r\n```\r\nvar componentModel = (IComponentModel)this.GetService(typeof(SComponentModel));\r\nvar workspace = componentModel.GetService<Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace>();\r\n```\r\nBut guess the **this.GetService** code will only work in the context of .vsix plugin and we are not very sure if this is the required code. Is this the right code to be used in the context of .vsix plugin mode?\r\n\r\nIs there any way in which we can get the currently loaded solution instance in a console application without using the **OpenSolutionAsync** method.\r\n\r\n**Expected Behavior**:\r\nSome way in which we can get the instance of Microsoft.CodeAnalysis.Solution object for the solution which is already open in the current instance of Visual Studios. \r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21541/comments",
    "author": "abhijitparkhi1983",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-08-16T14:24:32Z",
        "body": "The code you have above is right for an extension loaded in VS.\r\n\r\nWe do not have any way to get this information from another process."
      },
      {
        "user": "sharwell",
        "created_at": "2017-08-16T14:28:24Z",
        "body": "> Is there any way in which we can get the currently loaded solution instance in a console application \r\n\r\nThe workspace APIs are not available in the context of a build-integrated diagnostic analyzer. You can use the workspace APIs in a VSIX-installed analyzer, but there are two limitations to be aware of:\r\n\r\n1. VSIX-installed analyzers will only run inside Visual Studio, and will not run as part of the build.\r\n2. The workspace dependency means you cannot use the same analyzer in both VSIX and build-integrated (typically NuGet) forms without rather uncomfortable workarounds."
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2017-08-16T16:26:14Z",
        "body": "Thanks @Pilchie.\r\n\r\n@sharwell , sorry I dint really get the 2nd point which you have mentioned. Can you please elaborate on this one. "
      },
      {
        "user": "Pilchie",
        "created_at": "2017-08-16T17:44:38Z",
        "body": "If you are writing an *analyzer*, and you want it to be usable by csc.exe during command line builds, it can't depend on the Workspace APIs, since the compiler doesn't construct a workspace during builds."
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2017-08-17T14:57:03Z",
        "body": "Thanks @Pilchie and @sharwell  for the inputs. These inputs are very helpful to proceed ahead."
      }
    ]
  },
  {
    "number": 21522,
    "title": "Quick question regarding access to Project object from analyzers",
    "created_at": "2017-08-15T16:35:09Z",
    "closed_at": "2017-08-15T16:38:59Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21522",
    "body": "Is there any way for analyzers to access the related Microsoft.CodeAnalysis.Project object?  As far as I can tell, this is not possible.  In my very limited understanding of Roslyn, it would seem logical to have the project as a property on Microsoft.CodeAnalysis.Compilation.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21522/comments",
    "author": "jonathanbyrne",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2017-08-15T16:37:42Z",
        "body": "No, analyzers are not allowed to reference Microsoft.CodeAnalysis.Workspaces. Attempts to use a type from that, or any type which depends on it, will result in an exception at runtime. The easiest way to avoid problems is to make sure your analyzer project does not reference this assembly when you compile your analyzers.\r\n\r\n:memo: Implementing this approach requires you move all code fixes to a second assembly, since code fixes do require access to Microsoft.CodeAnalysis.Workspaces."
      },
      {
        "user": "jonathanbyrne",
        "created_at": "2017-08-15T16:38:53Z",
        "body": "That is a big help.  Thanks for the fast response!"
      },
      {
        "user": "sharwell",
        "created_at": "2017-08-15T16:40:33Z",
        "body": "No problem. If you were trying to accomplish something in particular and running into challenges, let me know your specific question and I can probably point you to either an example where someone did something similar or to a bug related to the issue. :smile:"
      }
    ]
  },
  {
    "number": 20771,
    "title": "Analyze C# and VB in same app?",
    "created_at": "2017-07-10T22:57:29Z",
    "closed_at": "2022-11-08T02:02:56Z",
    "labels": [
      "Question",
      "Area-Infrastructure",
      "Resolution-Answered",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20771",
    "body": "How can I write a single app (say a console app) that can analyze C# source files and VB? In a (C#) test app I put together, I added Nuget package Microsoft.CodeAnalysis. That added a bunch of assemblies including Microsoft.CodeAnalysis.CSharp (which is where SyntaxFactory lives).\r\n\r\nThis works fine and I can parse a .cs file and see the tree - all good.\r\n\r\nBut now I want to also analyze VB source files - since the static class SyntaxFactory is C# specific I guess I need to add another assembly (perhaps Microsoft.CodeAnalysis.VB?) but how?\r\n\r\nThe libraries for C# were added when I added the Nuget package and it looks like it somehow deduced that my app is written in C# and so added the C# specific libraries.\r\n\r\nThe Nuget package seems language agnostic and at no point was I asked \"Do you want to add the C# or VB analysis library?\" so somehow it decided to add C# and only C# libraries.\r\n\r\nSo what must I do to my console app project (as I say its written in C# and in VS 2017 with .Net 4.6) so that I can access both the C# and VB versions of SyntaxFactory?\r\n\r\nThanks\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20771/comments",
    "author": "Korporal",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-07-10T23:06:40Z",
        "body": "SyntaxFactory is in a C# namespace.  You can add references to our VB nuget packages, and then use the VB specific syntax factory (in Microsoft.CodeAnalysis.VisualBasic...)"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-07-10T23:09:23Z",
        "body": "You should have gotten references to both languages when you added the package."
      },
      {
        "user": "Korporal",
        "created_at": "2017-07-11T15:26:22Z",
        "body": "@Pilchie - The only \"Roslyny\" assembly references in the project are:\r\n\r\nMicrosoft.CodeAnalysis\r\nMicrosoft.CodeAnalysis.CSharp\r\nMicrosoft.CSharp (this was already present before adding the Nuget package).\r\n\r\nNow of course I can explicitly add an assembly file references to the VB assembly within the packages folder, but that then creates an inconsistent setup. I spend time often at work \"fixing\" messes created by Nuget's idiosyncrasies including this where a developer has added a file ref to an assembly in the packages folder rather than a package ref. \r\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-07-11T15:42:26Z",
        "body": "What exact package ids do you have referenced?  We have:\r\n\r\n## Language Neutral\r\n* Microsoft.CodeAnalysis.Common\r\n* MIcrosoft.CodeAnalysis.Workspaces.Common\r\n\r\n## C#\r\n* Microsoft.CodeAnalysis.CSharp\r\n* Microsoft.CodeAnalysis.CSharp.Workspaces\r\n\r\n## VB\r\n* Microsoft.CodeAnalysis.VisualBasic\r\n* Microsoft.CodeAnalysis.VisualBasic.Workspaces\r\n\r\n## Both languages\r\n* Microsoft.CodeAnalysis"
      },
      {
        "user": "Korporal",
        "created_at": "2017-07-11T15:53:51Z",
        "body": "@Pilchie - Thanks, here's the full packages.config in the project to which I added the Nuget package:\r\n\r\n` <package id=\"Microsoft.CodeAnalysis.Analyzers\" version=\"1.1.0\" targetFramework=\"net46\" />\r\n  <package id=\"Microsoft.CodeAnalysis.Common\" version=\"2.2.0\" targetFramework=\"net46\" />\r\n  <package id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.2.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.AppContext\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Collections\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Collections.Concurrent\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Collections.Immutable\" version=\"1.3.1\" targetFramework=\"net46\" />\r\n  <package id=\"System.Console\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Diagnostics.Debug\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Diagnostics.FileVersionInfo\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Diagnostics.StackTrace\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Diagnostics.Tools\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Dynamic.Runtime\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Globalization\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.IO.Compression\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.IO.FileSystem\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.IO.FileSystem.Primitives\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Linq\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Linq.Expressions\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Reflection\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Reflection.Metadata\" version=\"1.4.2\" targetFramework=\"net46\" />\r\n  <package id=\"System.Resources.ResourceManager\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Runtime\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Runtime.Extensions\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Runtime.InteropServices\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Runtime.Numerics\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Security.Cryptography.Algorithms\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Security.Cryptography.Encoding\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Security.Cryptography.Primitives\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Security.Cryptography.X509Certificates\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Text.Encoding\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Text.Encoding.CodePages\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Text.Encoding.Extensions\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Threading\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Threading.Tasks\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Threading.Tasks.Parallel\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Threading.Thread\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.ValueTuple\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Xml.ReaderWriter\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Xml.XDocument\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Xml.XmlDocument\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Xml.XPath\" version=\"4.3.0\" targetFramework=\"net46\" />\r\n  <package id=\"System.Xml.XPath.XDocument\" version=\"4.3.0\" targetFramework=\"net46\" />`\r\n\r\nAlmost all of these were added indirectly as a result of me adding the 2.2.0 of Microsoft.CodeAnalaysis package (to my rudimentary C# console app - .Net 4.6).\r\n\r\nYou'll notice that no entry exists for Microsoft.CodeAnalysis.VisualBasic.\r\n"
      },
      {
        "user": "Korporal",
        "created_at": "2017-07-11T16:06:49Z",
        "body": "Also, will the VB code analysis allow me to analyze old VB ASP Classic VB source code/pages?\r\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-07-11T16:13:51Z",
        "body": "> You'll notice that no entry exists for Microsoft.CodeAnalysis.VisualBasic.\r\n\r\nRight - you added `Microsoft.CodeAnalysis.CSharp`, not `Microsoft.CodeAnalysis`.  You can add `Microsoft.CodeAnalysis.VisualBasic` to add compiler level support for VB, or add `Microsoft.CodeAnalysis` to get VB *and* the Workspaces layer.\r\n\r\n> Also, will the VB code analysis allow me to analyze old VB ASP Classic VB source code/pages?\r\n\r\nNo - Roslyn only supports VB.NET, not VB6."
      },
      {
        "user": "ghost",
        "created_at": "2022-11-08T02:02:58Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 20538,
    "title": "[Question] Using custom Roslyn dlls under custom built VS Next",
    "created_at": "2017-06-29T08:17:03Z",
    "closed_at": "2024-11-05T18:51:06Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20538",
    "body": "I successfully built the Roslyn project with some of my added syntax and am running VisualStudioSetup.Next in which I loaded a test project which uses the syntax I added. I wanted to include the Microsoft.CodeAnalysis.CSharp (and etc.) DLLs that were built in my project to write a SyntaxWalker to capture nodes using my new syntax. Upon building that test project, I get the following error:\r\n```\r\nSystem.IO.FileLoadException: 'Could not load file or assembly 'Microsoft.CodeAnalysis.CSharp, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'\r\n\r\n```\r\nThe DLLs were loaded from `C:\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424`\r\n\r\nAm I doing something wrong or unsupported?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20538/comments",
    "author": "Hsn723",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-06-29T18:49:38Z",
        "body": "Can you provide more information about *exactly* how you mean by: \"running VisualStudioSetup.Next\", and how you referenced things in your test project, etc?"
      },
      {
        "user": "Hsn723",
        "created_at": "2017-06-30T04:28:07Z",
        "body": "Hi, thanks for the reply. What I did was load the Roslyn project on VS, apply my changes and after making sure it builds properly I selected VisualStudioSetup.Next as the startup project and ran it with F5 in Debug (and Release) configurations.\r\n\r\nOnce on the experimental VS instance that gets launched from it, I created a test console project (.NET Core), tried to add the `Microsoft.CodeAnalysis.dll`, `Microsoft.CodeAnalysis.CSharp.dll` etc. that were built above using Add Reference on the test project and browsing to the DLLs. Then, I wrote a CSharpSyntaxWalker for the new syntax that I added. Then, when attempting to launch the test project in the experimental VS instance with F5 I run into the error message I mentioned previously. The DLLs are referenced in my test project's .csproj file like so:\r\n```\r\n<ItemGroup>\r\n    <Reference Include=\"Microsoft.CodeAnalysis\">\r\n      <HintPath>..\\..\\..\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424\\Microsoft.CodeAnalysis.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.CodeAnalysis.CSharp\">\r\n      <HintPath>..\\..\\..\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424\\Microsoft.CodeAnalysis.CSharp.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.CodeAnalysis.CSharp.Workspaces\">\r\n      <HintPath>..\\..\\..\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424\\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.CodeAnalysis.Workspaces\">\r\n      <HintPath>..\\..\\..\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424\\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.CodeAnalysis.Workspaces.Desktop\">\r\n      <HintPath>..\\..\\..\\Users\\antoine\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_90ef690dRoslynDev\\Extensions\\Microsoft\\Roslyn Language Services\\42.42.42.42424\\Microsoft.CodeAnalysis.Workspaces.Desktop.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nEdit: Also, to elaborate on the additional syntax I made to the Roslyn source, I added a new TypeSyntax. It shows up in the generated manifest file `Microsoft.CodeAnalysis.xml` in the build directory alongside the DLL, so could the error message I am getting \"The located assembly's manifest definition does not match the assembly reference\" mean that because my assembly manifest has some additional stuff in it it cannot be loaded because it is being compared to some reference file somewhere?"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-06-30T16:24:01Z",
        "body": "Interesting.  I'm not sure where else it's finding those assemblies from, but my guess is that it's from the .NET Core Shared Runtime.\r\n\r\nCan you:\r\n1. Opt out of using the shared runtime?\r\n2. Make sure that those references are copied into your output directory (may need to set CopyLocal on them in the properties window)?\r\n\r\n@srivatsn - any ideas here for the .NET Core aspect of this?"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-06-30T16:24:53Z",
        "body": "BTW - you can just reference the binaries out of your `Binaries\\Debug\\Dlls\\` directory after building Roslyn - no need to go rummaging around in %LocalAppData%."
      },
      {
        "user": "Hsn723",
        "created_at": "2017-07-01T05:38:35Z",
        "body": "Hi,\r\nI have made sure that the references are copied to the output directory. I am not sure how to opt out of using the shared runtime though. I didn't see that option in the `dotnet` command line options or in VS. Though looking under Dependencies -> SDK of my Solution, I see a Microsoft.CodeAnalysis (1.3.0) under `Microsoft.NETCore.App`. Could that be the problem?\r\n\r\nAlso, I am not sure if it helps, but I tried recreating the test console project as a classic console app targeting .NET Framework 4.6 instead of using .NET Core. After manually importing some of the missing DLLs that `Microsoft.CodeAnalysis.dll` depended on I was able to run my test project successfully.\r\n\r\nI am curious why I can't get it to run under .NET Core, but if that's not possible at the moment using .NET Framework is a good enough interim workaround."
      },
      {
        "user": "Pilchie",
        "created_at": "2017-07-03T18:03:11Z",
        "body": "@srivatsn or @davkean or @livarcocc - Do you know what you need to to to reference a local DLL that also happens to be in the shared runtime in a .NET Core App?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-05T18:51:06Z",
        "body": "Closing out due to lack of movement."
      }
    ]
  },
  {
    "number": 20392,
    "title": "How to do multiple replacements in a SyntaxTree correctly?",
    "created_at": "2017-06-22T13:58:32Z",
    "closed_at": "2017-06-22T17:28:23Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20392",
    "body": "I'm writing a code-fix provider that just wraps a InvocationExpression around a string.\r\nAnd it also adds a `using static ...;` if its not already present.\r\n\r\nSomehow I cannot get the code fix to apply both changes.\r\nOn the first run it adds the using, on the second run (when it detects that it doesn't have to add the using again) it wraps the expression.\r\nBut it never does both at the same time.\r\nI think that's because one change modifies the original tree and thus the second source node cannot be found anymore.\r\n\r\nI read on stackoverflow that using \"ReplaceNodes\" with a dictionary would work, but it doesn't work for me.\r\n\r\nI could reorder my replacements maybe, but that seems to be extremely brittle because I want to add maybe one or two more minor things to the rewriter and I can foresee that it might even become impossible to solve this by only doing my replacement calls in the right order :(\r\n\r\n\r\nHere's what I have\r\n\r\n```csharp\r\n\r\nasync Task<Document> WrapInCallAsync(Document document, ExpressionSyntax syntax, CancellationToken c, string functionName, string usingStatic)\r\n{\r\n\t// Keep track of all replaced nodes\r\n\tDictionary<SyntaxNode, SyntaxNode> dict = new Dictionary<SyntaxNode, SyntaxNode>();\r\n\r\n\t// If the caller provides us with a using to add, we do that here\r\n\tif(usingStatic != null)\r\n\t{\r\n\t\t// Looking upwards, take the first namespace declaration we can see\r\n\t\tvar ns = syntax.Ancestors().OfType<NamespaceDeclarationSyntax>().FirstOrDefault();\r\n\t\tif(ns != null)\r\n\t\t\tif(ns.Usings.All(u => u.StaticKeyword == null || (u.Name as IdentifierNameSyntax)?.Identifier.ValueText != usingStatic))\r\n\t\t\t{\r\n\t\t\t\t// Create our \"using static ...;\"\r\n\t\t\t\tvar u = SyntaxFactory\r\n\t\t\t\t\t.UsingDirective(SyntaxFactory.IdentifierName(usingStatic))\r\n\t\t\t\t\t.WithStaticKeyword(SyntaxFactory.Token(SyntaxKind.StaticKeyword));\r\n\r\n\t\t\t\t// Change the namespace to include that using\r\n\t\t\t\tvar changedNs = ns.WithUsings(ns.Usings.Add(u));\r\n\t\t\t\tdict.Add(ns, changedNs);\r\n\t\t\t}\r\n\t}\r\n\r\n\r\n\t// Step 2: We want to wrap our call around the given expression, first create the call\r\n\tvar memberAccess = SyntaxFactory.ParseExpression(functionName);\r\n\tvar args = SyntaxFactory.SeparatedList(new[] { SyntaxFactory.Argument(syntax) });\r\n\tvar call = SyntaxFactory.InvocationExpression(memberAccess, SyntaxFactory.ArgumentList(args));\r\n\r\n\t// Then replace the original expression with that call\r\n\t// \"text\" --> Method(\"text\")\r\n\tdict.Add(syntax, call);\r\n\r\n\r\n\t// Finally get the root, apply all our changes, and return the changed root.\r\n\tvar root = await document.GetSyntaxRootAsync(c);\r\n\troot = root.ReplaceNodes(dict.Keys, (original, rewritten) => dict[original]);\r\n\treturn document.WithSyntaxRoot(root);\r\n}\r\n```\r\n\r\nI feel like my code just doesn't have the right structure, surely there is some way to maybe find `syntax` again in the newly modified tree, or maybe some other way to avoid this problem altogether?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20392/comments",
    "author": "rikimaru0345",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-06-22T16:59:27Z",
        "body": "At purely the compiler layer, you can use `SyntaxAnnotations` to mark nodes to be able to find them again.\r\n\r\nIf you move up to the workspaces layer, the `SyntaxEditor` class exists to help make this easier."
      },
      {
        "user": "rikimaru0345",
        "created_at": "2017-06-22T17:28:23Z",
        "body": "I see, that is good to know. After adding SyntaxAnnotations everything works. Thank you."
      }
    ]
  },
  {
    "number": 20241,
    "title": "CS0465 (Introducing Finalize method) on interfaces",
    "created_at": "2017-06-15T15:36:15Z",
    "closed_at": "2017-06-15T17:57:18Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20241",
    "body": "**Version Used**: 15.3 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\ninterface IBla\r\n{\r\n    void Finalize();\r\n}\r\n```\r\n**Actual Behavior**:  CS0465: Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?\r\n\r\n**Expected Behavior**: Does this warning make sense on interfaces? I definitely can't declare a destructor and I am not exactly sure how the interface declaration could interfere with the destructor invocation either.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20241/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2017-06-15T15:46:33Z",
        "body": ":memo: The internal name for a destructor is `Finalize`. C# uses the `~TypeName()` syntax to define one but the compiler emits the method as one that overrides `Object.Finalize`. Someone from the compiler team will be able to give you more specifics about the intent of this particular warning."
      },
      {
        "user": "jaredpar",
        "created_at": "2017-06-15T17:57:18Z",
        "body": "The issue here is more about the problems it will create when the interface is used.  Consider the following:\r\n\r\n``` c#\r\nclass C : IBla {\r\n  ~C() { } \r\n  public void Finalize() { } \r\n}\r\n```\r\n\r\nThis code won't compile because `~C` maps down to `Finalize` (as @sharwell pointed out). Hence this creates a conflict. So while the interface doesn't directly have a problem with `Finalize`, it's indirectly creating one for anyone who implements it. "
      },
      {
        "user": "miloush",
        "created_at": "2017-06-17T13:32:50Z",
        "body": "OK so the 'Did you intend to declare a destructor?' part was not intended for interface authors.\r\n\r\n```C#\r\nclass C {\r\n  ~C() { } \r\n  public void Finalize() { } \r\n}\r\n```\r\nwould fail compilation regardless of whether it implements the interface or not.\r\n\r\nSo theoretically all objects would implement such interface, except for that the Finalize method is not public, so it cannot implement interface methods. And directly declaring Finalize method is not allowed.\r\n\r\nBasically the interface can be implemented only explicitly. \r\nThanks!"
      }
    ]
  },
  {
    "number": 20002,
    "title": "SyntaxGenerator: support generating extension methods",
    "created_at": "2017-06-03T21:06:27Z",
    "closed_at": "2017-06-12T04:41:21Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20002",
    "body": "Does the SyntaxGenerator support generating extension methods?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20002/comments",
    "author": "tmds",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-06-06T00:21:35Z",
        "body": "I would think this would be just a matter of adding the`this` modifier?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-06-09T23:01:35Z",
        "body": "That would work for C#, but not for VB.  For VB you'd have to add the right attribute.  And that will be difficult to do correctly since these APIs don't take in compilations.  We could just hack it for VB by manually adding ```<Global.System.Runtime.CompilerServices.Extension>```, but it wouldn't properly simplify.  \r\n\r\nDo you think we should do that @Pilchie ?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-06-09T23:48:14Z",
        "body": "@tmds Do you need to generate VB as well?  or just C#?  "
      },
      {
        "user": "tmds",
        "created_at": "2017-06-12T03:09:19Z",
        "body": "@CyrusNajmabadi c# is my interest. Is it possible using the C# SyntaxFactory.MethodDeclaration?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-06-12T04:41:18Z",
        "body": "Yes.  It would be trivial with SyntaxFactory.  Just pass the right modifiers when you call SyntaxFactory.Parameter so that it has the 'this' modifier on it."
      }
    ]
  },
  {
    "number": 19386,
    "title": "How to check if a Class or a Method is a Partial Class or Partial Method",
    "created_at": "2017-05-10T09:33:58Z",
    "closed_at": "2017-05-11T20:58:09Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19386",
    "body": "**Version Used**: \r\n2.0.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. For any Partial Class/Method, the corresponding **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node data does not give any information if the given class is Partial class/method. \r\n2. We dont get this information even from any property of **INamedTypeSymbol** for Class or **IMethodSymbol** for Method.\r\n3. We can get this information only using **node.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword))**.\r\n\r\n**Expected Behavior**:\r\nThere has to be some property in **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node or in **INamedTypeSymbol** for Class or **IMethodSymbol** for Method which gives us the information that the node is a partial type. \r\n\r\n**Actual Behavior**:\r\nThere isnt any property currently  in **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node or in **INamedTypeSymbol** for Class or **IMethodSymbol** for Method which gives us the information that the node is a partial type. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19386/comments",
    "author": "abhijitparkhi1983",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-05-11T20:58:09Z",
        "body": "Do you care if hte symbol was *declared* partial?  Or actually has multiple partial types.  For example, you might have:\r\n\r\n```c#\r\npartial class C { }\r\n\r\npartial class D { }\r\npartial class D { }\r\n```\r\n\r\nDo you want C and D to report that they're partial?  Or just D?\r\n\r\nIf the former, then you can do this just by checking the modifiers of these class declarations.\r\nIf you only care about the latter, then just get the ```INamedTypeSymbol``` for the type, and check. ```ISymbol.Locations.Length``` or ```INamedTypeSymbol.DeclaringSyntaxReferences.Length``` to see if hey are ```> 1```."
      }
    ]
  },
  {
    "number": 18938,
    "title": "VB.NET Shadowing property in Interface generating 2 properties in class implementation",
    "created_at": "2017-04-23T18:32:36Z",
    "closed_at": "2017-04-25T06:43:20Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18938",
    "body": "**Version Used**: \r\nVisual Studio Community 2017 4.7.02046\r\n\r\n**Steps to Reproduce**:\r\n\r\nGiven these interfaces\r\n```vb.net\r\nPublic Interface IEntity\r\n    Property Id As Object\r\nEnd Interface\r\n\r\nPublic Interface IEntity(Of T)\r\n    Inherits IEntity\r\n    Shadows Property Id As T\r\nEnd Interface\r\n```\r\n\r\nCreate a new class implementation for `IEntity(Of T)`, and after pressing enter it generates implementations for 2 properties?\r\n\r\n**Expected Behavior**:\r\nShouldn't the implementation be this?\r\nAs the Id property has been shadowed by the generic interface.\r\n\r\n```vb.net\r\nPublic MustInherit Class Entity(Of T)\r\n    Implements IEntity(Of T)\r\n\r\n    Public Property Id As T Implements IEntity(Of T).Id\r\n        Get\r\n            Throw New NotImplementedException()\r\n        End Get\r\n        Set(value As T)\r\n            Throw New NotImplementedException()\r\n        End Set\r\n    End Property\r\nEnd Class\r\n```\r\n**Actual Behavior**:\r\n```vb.net\r\nPublic MustInherit Class Entity(Of T)\r\n    Implements IEntity(Of T)\r\n\r\n    Public Property Id As T Implements IEntity(Of T).Id\r\n        Get\r\n            Throw New NotImplementedException()\r\n        End Get\r\n        Set(value As T)\r\n            Throw New NotImplementedException()\r\n        End Set\r\n    End Property\r\n\r\n    'Why is this also being generated?\r\n    Private Property IEntity_Id As Object Implements IEntity.Id\r\n        Get\r\n            Throw New NotImplementedException()\r\n        End Get\r\n        Set(value As Object)\r\n            Throw New NotImplementedException()\r\n        End Set\r\n    End Property\r\nEnd Class\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18938/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2017-04-23T20:54:13Z",
        "body": "It is true it has been shadowed. But it still needs to be implemented."
      },
      {
        "user": "AnthonyDGreen",
        "created_at": "2017-04-25T04:35:27Z",
        "body": "This is the correct behavior. It's what happens today with IEnumerable(Of T)."
      }
    ]
  },
  {
    "number": 18470,
    "title": "Getting absolute path to CompilationOption.CryptoKeyFile",
    "created_at": "2017-04-05T17:56:30Z",
    "closed_at": "2018-02-09T20:52:29Z",
    "labels": [
      "Question",
      "Resolution-Won't Fix",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18470",
    "body": "I have a `Project` which `CompilationOption.CryptoKeyFile` is a relative path. I want to get access to `CryptoKeyFile`, so I need an absolute path to `CryptoKeyFile`. As far as I understand `CompilationOption.StrongNameProvider` should resolve relative paths to key files, however It does not have public API. I suggest to add a way to get an absolute path of `CryptoKeyFile` without using internal Roslyn API.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18470/comments",
    "author": "vladimir-koshelev",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2018-02-09T20:52:11Z",
        "body": "The compiler has to resolve many different paths (e.g. source files) but it does not provide APIs to get those in absolute form either. It would seem odd to have an API for just this one. Unless there is a widespread need demonstrated for this, I don't see it happening."
      }
    ]
  },
  {
    "number": 18346,
    "title": "Datetime keyword missing on SyntaxKind",
    "created_at": "2017-03-31T10:38:01Z",
    "closed_at": "2017-04-05T17:12:50Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18346",
    "body": "**Version Used**: Latest master (commit: 940f119)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Read visual basic syntax tree for translate it into c# code\r\n2. Find a date keyword\r\n3. Try to translate to datetime c# keyword and try to find it in SyntaxKind enum\r\n\r\nSo, ¿what keyword I should write/use? And I miss some other keywords like, dynamic.\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18346/comments",
    "author": "Nassiel",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2017-04-03T19:13:43Z",
        "body": "There is no `Date` keyword in C#. You'll need to use the underlying type `DateTime` instead.\r\n\r\nHere's one way you can create a syntax node for this type:\r\n\r\n```csharp\r\nTypeSyntax dateTimeTypeSyntax = SyntaxFactory.ParseTypeName(typeof(DateTime).FullName)\r\n    .WithAdditionalAnnotations(Simplifier.Annotation)\r\n```"
      },
      {
        "user": "Nassiel",
        "created_at": "2017-04-05T17:12:50Z",
        "body": "Hi, thanks! \r\n\r\nIn the end I needed another function: `SyntaxFactory.IdentifierName(typeof(DateTime).FullName)` But you raise the right event in my mind.\r\n\r\nSo, solved. 👍 "
      }
    ]
  },
  {
    "number": 18222,
    "title": "Help request: Synthsized locals and LookupSymbolsInSingleBinder/BuildLocals",
    "created_at": "2017-03-27T23:07:00Z",
    "closed_at": "2018-09-06T22:23:23Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18222",
    "body": "Hello,\r\n\r\nmay I asked a question to the people who know the internals better?\r\n\r\nI have a **named**(!) synthesized long living local - that is `ref T field = ref <mySemiAutoProp>K__backingField` - and I do not find the point where I can get the identifier `field` into visible scope.\r\n\r\nCould it be, that synthesized locals are never ever added to any symbol table? Can anyone give me a hint on how to achieve that?\r\n\r\nOr would that require a big major change just for this single feature? Then I will try to go with\r\n`set => <mySemiAutoProp>U__setref (ref T <mySemiAutoProp>K__backingField, value);` and make it a compiler generated method.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18222/comments",
    "author": "lachbaer",
    "comments": [
      {
        "user": "VSadov",
        "created_at": "2017-07-07T18:03:31Z",
        "body": "Synthesized symbols are rarely bindable. Making them bindable will require documenting their presence, since there would be easily observable effects - you can use the symbol in the source without explicitly declaring it, it could have conflict with things that have the same name in the source or with other synthetics, etc...\r\n\r\nAlso, most of the synthesized stuff comes into being after the program is already fully bound and compiler is in the stage of lowering/emitting.\r\n\r\nAn example of a bindable synthetic local could be the case where in VB every named method (not an operator or a constructor or the like) contains an implicitly declared local with the same name as the containing method. The local contains or can be assigned a return value. This is fully described in the language spec.\r\n\r\nIntroducing bindable synthetics is a fairly big hammer with long list of consequences so is generally avoided. Thus there is no general/convenient mechanism to inject bindable synthetics.\r\n\r\nIf really needed the synthetics are added to the appropriate binders/scopes very early - in the process of binding.\r\n"
      }
    ]
  },
  {
    "number": 17713,
    "title": "(Named) value tuples and Linq",
    "created_at": "2017-03-10T18:47:08Z",
    "closed_at": "2017-03-11T01:01:16Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/17713",
    "body": "**Steps to Reproduce**:\r\n```\r\nvar list = new(int value, string name)[] { (1, \"a\"), (2, \"b\"), (3, \"c\") };\r\nvar item = list.FirstOrDefault(w => w.value > 5);\r\n```\r\n\r\n**Expected Behavior**:\r\nI would expect `item` to be `(int, string)?` so I can use `??` or test of failure in a meaningful way.\r\n\r\n**Actual Behavior**:\r\nWhat I actually get is an actual value type with default values inside. This may or may not be useful (and indeed it is not in my case), since 0/null values inside the tuple can easily be valid entries.\r\n\r\nThis is worsened by functions such as this:\r\n```\r\n        internal static TValue SafeTryGet<TKey, TValue>(this IDictionary<TKey, TValue> list, TKey key) =>\r\n            key != null && list.TryGetValue(key, out TValue ret) ? ret : default(TValue);\r\n```\r\n There's no (obvious) way of overloading this function to return a nullable type for value types and a plain `default` for classes. The closest I've gotten is with a second helper function, but this isn't anywhere as clean as it could be:\r\n```\r\n        internal static TValue? SafeTryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> list, TKey key) where TValue : struct =>\r\n            key != null && list.TryGetValue(key, out TValue ret) ? ret : new TValue?();\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/17713/comments",
    "author": "myblindy",
    "comments": [
      {
        "user": "alrz",
        "created_at": "2017-03-10T22:11:24Z",
        "body": "That's not how `FirstOrDefault` works, it literally returns `default(T)` where `T` is `(int, string)`.\r\n\r\nYou could use this instead:\r\n```cs\r\nvar list = new(int value, string name)?[] { (1, \"a\"), (2, \"b\"), (3, \"c\") };\r\nvar item = list.FirstOrDefault(w => w.value > 5);\r\n```"
      },
      {
        "user": "gafter",
        "created_at": "2017-03-11T01:01:16Z",
        "body": "This appears to be a question about the way the `FirstOrDefault` API works. I think @alrz has answered it."
      },
      {
        "user": "myblindy",
        "created_at": "2017-03-13T18:36:57Z",
        "body": "It's more about the limitation of the API to work with the new named tuples. I know it returns `default(T)`, I'm just saying that's not good enough when working with value types. It wasn't really an issue until now mostly because we (at least I) used classes, but named tuples are values and all these `*OrDefault()` functions don't return useful information for them. "
      }
    ]
  },
  {
    "number": 17254,
    "title": "Diagnostic clarity: misleading error message",
    "created_at": "2017-02-20T13:54:27Z",
    "closed_at": "2017-02-21T11:15:06Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Blocked",
      "Feature - Pattern Matching"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/17254",
    "body": "Error messages for constant patterns under `is` can be misleading comparing to similar situation with `switch` statement patterns:\r\n```c#\r\nclass C {\r\n  public const int X = 42;\r\n}\r\n\r\nclass D {\r\n  public const string C = \"abc\";\r\n\r\n  // error CS0426: The type name 'X' does not exist in the type 'C'\r\n  public bool M1(object o) => o is C.X;\r\n    \r\n  public bool M2(object o) {\r\n      switch (o) {\r\n          // error CS1061: 'string' does not contain a definition for 'X' and no extension\r\n          // method 'X' accepting a first argument of type 'string' could be found\r\n          // (are you missing a using directive or an assembly reference?)\r\n          case C.X:\r\n              return true;\r\n          default:\r\n              return false;\r\n      }\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/17254/comments",
    "author": "controlflow",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2017-02-20T18:19:53Z",
        "body": "The message is different because the meaning is different.\r\n\r\n`e is A.B` looks for a type named `A.B` as its first choice for how to interpret this. That is required for backward compatibility.\r\n\r\n`case A.B` looks for an expression named `A.B` (which is hoped to be a constant). That too is required for backward compatibility.\r\n\r\nThat is the reason the errors are different.\r\n\r\nDoes this answer address your concern/question? What would you prefer to be different?"
      },
      {
        "user": "alrz",
        "created_at": "2017-02-20T18:29:42Z",
        "body": ">That is required for backward compatibility.\r\n\r\nCould that be relaxed to allow those cases but with a precedence for binding according to previous versions to retain backward compatibility? e.g. `e is X` first look for a type and then a constant, conversely, `case X` look for a constant and then for a type?"
      },
      {
        "user": "gafter",
        "created_at": "2017-02-20T18:48:04Z",
        "body": "@alrz That is exactly what we already do."
      },
      {
        "user": "controlflow",
        "created_at": "2017-02-20T18:50:02Z",
        "body": "@gafter the error states that \"The type name 'X' does not exist in the type 'C'\", so it looks like the `C` reference in `o is C.X` is bound to type `C`, but in fact it is bound to constant `D.C`. Removing `D.C` constant fixes the error."
      },
      {
        "user": "gafter",
        "created_at": "2017-02-20T19:38:25Z",
        "body": "@controlflow The name `C.X` must be bound either as a type or as a (constant) expression. As an expression it fails (because there is no constant named `X` inside `D.C`, which is what `C` as an expression binds to). As a type it fails because there is no such type `C.X` anywhere. Since the backward-compatible behavior is to treat it as a type, we select which of these two errors to report by doing so in a way analogous to the way the previous compiler did it, by reporting the error when looking up the type."
      },
      {
        "user": "controlflow",
        "created_at": "2017-02-21T00:07:33Z",
        "body": "@gafter the only confusing part is \"does not exist in the type 'C'\". If expression `C` is bound to `D.C`, it has type `string`, not `C`, isn't it?"
      },
      {
        "user": "gafter",
        "created_at": "2017-02-21T01:12:20Z",
        "body": "@controlflow When we're looking up a type, we don't bind the part before the dot as an expression."
      },
      {
        "user": "controlflow",
        "created_at": "2017-02-21T11:15:06Z",
        "body": "OK, I think I finally got it 👍"
      }
    ]
  },
  {
    "number": 17064,
    "title": "[Jenkins] Seems to be not using correct compiler.",
    "created_at": "2017-02-09T18:35:04Z",
    "closed_at": "2017-02-09T21:31:12Z",
    "labels": [
      "Question",
      "Area-Infrastructure",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/17064",
    "body": "The following PR #17055 should at a minimum build, and fail with unittest failures.\r\nDoes this local on my machine.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/17064/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "TyOverby",
        "created_at": "2017-02-09T21:26:00Z",
        "body": "The CI servers use a bootstrapped version of the compiler. \r\n\r\nYou changed binding resolution, so when you try to build Roslyn.sln again, you are running into the binding resolution errors that were introduced."
      }
    ]
  },
  {
    "number": 16743,
    "title": "Why assign Func using ternary operator give me Error ?",
    "created_at": "2017-01-25T15:56:52Z",
    "closed_at": "2021-03-14T17:54:59Z",
    "labels": [
      "Question",
      "Language-C#",
      "Area-Language Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16743",
    "body": "Why the statements 1 and 2 compile, but 3 give me the following error ?\r\n\r\n> Error CS0173 Type of conditional expression cannot be determined because there is no implicit conversion between 'lambda expression' and 'lambda expression\r\n\r\n\r\n1. `var func = step >= 0 ? (Func<int, int, bool>)((a, b) => a >= b) : (a, b) => a <= b;`\r\n2. `var func = step >= 0 ? new Func<int, int, bool>((a, b) => a >= b) : (a, b) => a <= b;`\r\n3. `Func<int, int, bool> func = step >= 0 ? (a, b) => a >= b : (a, b) => a <= b; `\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16743/comments",
    "author": "leandromoh",
    "comments": [
      {
        "user": "jveselka",
        "created_at": "2017-01-25T17:26:06Z",
        "body": "@leandromoh Because in order to successfully determine type of ternary expression both branches must be of the same type or one must be implicitly convertible to the other. Expressions \"target\" does not contribute to type inference anywhere in C# as far as I know.\r\nSimilar problem:\r\n```C#\r\npublic T GetValue<T>(string name);\r\npublic void Process(int value);\r\n...\r\nProcess(GetValue(\"index\")) //Fails to compile even though T could be inferred to be int\r\n```\r\nHowever there have been some proposals. I would love to see them implemented."
      },
      {
        "user": "leandromoh",
        "created_at": "2021-03-14T17:54:50Z",
        "body": "resolved with C# 9 feature \"Target-typed conditional expressions\".\r\n\r\nboth examples works\r\n\r\n1) \r\n```c#\r\nvar func = true\r\n    ? (Func<int, int>)(a => a + 1) \r\n    : a => a - 1;\r\n``` \r\n2)\r\n```c#\r\nFunc<int, int> func = true \r\n    ? a => a + 1 \r\n    : a => a - 1;\r\n```"
      }
    ]
  },
  {
    "number": 16560,
    "title": "Disable resolving conflicts during rename",
    "created_at": "2017-01-17T20:57:03Z",
    "closed_at": "2017-01-20T18:47:18Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16560",
    "body": "It looks like conflicts during renaming refactoring are resolved automatically. Is there a way to disable that? For example, I want to rename a method parameter to a name that is already declared in the class scope and this feature is blocking me.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16560/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-01-18T19:10:03Z",
        "body": "We do not have a way to do this when there is an automatic resolution to the conflict."
      },
      {
        "user": "miloush",
        "created_at": "2017-01-18T19:41:34Z",
        "body": "I thought I have seen  \"developers know what they are doing\" somewhere but never mind, thanks for confirmation. :-)"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-01-18T20:27:29Z",
        "body": "We do allow you to commit even if you have unresolvable conflicts, but we don't currently have a way to prevent the resolution of the ones we know how to commit.  It's an interesting idea."
      }
    ]
  },
  {
    "number": 16457,
    "title": "New caret position when formatting source with Formatter class",
    "created_at": "2017-01-12T07:29:11Z",
    "closed_at": "2017-01-12T17:22:52Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16457",
    "body": "**Version Used**: 1.3.2\r\nI am creating a simple WPF control to edit small snippets. \r\n\r\nWith regards to the Formatter class, how can I preserve the correct position of the **caret** after the Formatter returns the new text for the source document?\r\n\r\nThank you",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16457/comments",
    "author": "raffaeler",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-01-12T17:22:52Z",
        "body": "Inside Visual Studio we use the editor's `ITrackingPoint` support to do that.  Outside Visual Studio, we provide no explicit support.  My recommendation would be to use `Formatter.GetFormattedChanges()` and then apply the changes yourself, tracking adjustments to the caret position as you see fit."
      }
    ]
  },
  {
    "number": 16332,
    "title": "merge partial class  to one ClassDeclarationSyntax",
    "created_at": "2017-01-08T14:45:07Z",
    "closed_at": "2017-01-09T02:22:57Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16332",
    "body": "Is there an easy way to merge partial class  to one “ClassDeclarationSyntax” ?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16332/comments",
    "author": "yanghuan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-01-08T18:18:37Z",
        "body": "Get all the parts, pull out the members, and then create a new ClassDeclaration with all those members in it?"
      },
      {
        "user": "yanghuan",
        "created_at": "2017-01-09T02:22:54Z",
        "body": "Thank you for the reply,I will try."
      }
    ]
  },
  {
    "number": 16199,
    "title": "Bug? implicit operator of tuple",
    "created_at": "2017-01-03T13:47:25Z",
    "closed_at": "2017-01-09T18:31:08Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Feature - Tuples"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16199",
    "body": "An implicit operator from a type to a tuple type is not accepted in an assignment to an unnamed tuple. \r\nVersion: Visual Studio 2017 RC2.\r\n\r\n```csharp\r\n\r\npublic class Point\r\n{\r\n    public int X, Y;\r\n    public static implicit operator (int x, int y) (Point p)\r\n    {\r\n        return (p.X, p.Y);\r\n    }\r\n    public static implicit operator int (Point p)\r\n    {\r\n        return p.X;\r\n    }\r\n}\r\n\r\n  ...\r\n  var point = new Point { X = 1, Y = 2 };\r\n  int i = point; \r\n  // this works as expected\r\n\r\n  (int x, int y) t = point;\r\n  // works as expected\r\n\r\n  (int x, int y) = point;\r\n  // The compiler gives two errors here:\r\n  // CS1061 'Point' does not contain a definition for 'Deconstruct' ....\r\n  // CS8129 No Deconstruct instance or extension method was found for type 'Point', with 2 out parameters.\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16199/comments",
    "author": "mharthoorn",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2017-01-03T14:46:46Z",
        "body": "That's not an assignment to an \"unnamed tuple\", that's a deconstruction.  I'd wager that the compiler doesn't consider an implicit cast to a tuple as an intermediate step when attempting to deconstruct an arbitrary type that doesn't have a `Deconstruct` method.  If you add the following method it will work as expected:\r\n\r\n```cs\r\npublic static void Deconstruct(out int x, out int y) {\r\n    x = this.X;\r\n    y = this.Y;\r\n}\r\n```"
      },
      {
        "user": "DavidArno",
        "created_at": "2017-01-03T15:41:40Z",
        "body": "As @HaloFour says, you are mixing implicit conversions and deconstructions. \r\n\r\nOne small point, `static` shouldn't be used for the `Deconstruct` method:\r\n````cs\r\npublic void Deconstruct(out int x, out int y) \r\n{\r\n    x = this.X;\r\n    y = this.Y;\r\n}\r\n````\r\n\r\nSo for the line:\r\n````cs\r\n(int x, int y) t = point;\r\n````\r\nYou are assigning `point` to an `(int x, int y)` tuple named `t` and eg the `X` value of the point can then be accessed via `t.x`.\r\n\r\nFor the line:\r\n````cs\r\n(int x, int y) = point;\r\n````\r\nYou are declaring two variables, `x` and `y`, which are assigned via \"deconstructing\" `point`, ie it's just syntactic sugar for:\r\n````cs\r\npoint.Deconstruct(out int x, out int y);\r\n````\r\n\r\nOf course there's grounds for arguing that deconstruction should use an implicit cast if it exists, but that's a feature enhancement, rather than I bug (I think). "
      },
      {
        "user": "HaloFour",
        "created_at": "2017-01-03T15:58:27Z",
        "body": "@DavidArno \r\n\r\nOops, started out writing that as an extension method.  My bad."
      },
      {
        "user": "mharthoorn",
        "created_at": "2017-01-03T15:59:43Z",
        "body": "I'm aware that a deconstruct method will work here. But to me it's not obvious behavior.\r\n\r\n```csharp\r\n    (int x, int y) t = // deconstruct does not work, implicit operator works\r\n    (int x, int y) = // deconstruct works, implicit operator does not work\r\n```\r\n\r\nI suspect for most developers, adding the t here feels like a matter of naming your tuple, not a switch from a deconstruction to a declaration on the other side of the equals sign. And of course the logic behind it can be justified. But you would prefer to avoid having to explain it till the end of days...\r\n\r\n"
      },
      {
        "user": "HaloFour",
        "created_at": "2017-01-03T16:04:12Z",
        "body": "It would be important for developers to understand that `(int x, int y)` and `(int x, int y) t` are **very** different things, so the distinction, I think, is quite important.  It's also important to understand that \"(un)named tuple\" refers specifically to the tuple elements.\r\n\r\nThat isn't to say that deconstruction shouldn't consider an implicit tuple conversion if a `Deconstruct` method isn't found, but it'd be up to the LDM to decide if that's a worthwhile fallback."
      },
      {
        "user": "DavidArno",
        "created_at": "2017-01-03T16:07:32Z",
        "body": "@mharthoorn,\r\n\r\nExplainations are still needed as the difference isn't just \"a matter of naming your tuple\"\r\n\r\n````cs\r\n(int x, int y) t =point; // declare and set variable t\r\nint w = t.x;\r\n\r\n...\r\n\r\n(int x, int y) = point; // declare and set variables x and y\r\nint w = x;\r\n\r\n// use \"var\" and the difference becomes more apparent:\r\nvar (x, y) = point; // declare and set variables x and y\r\nint w = x;\r\n````\r\n\r\nI think the `(int x, int y) = point;` notation is really confusing as it looks too much like a type declaration."
      },
      {
        "user": "mharthoorn",
        "created_at": "2017-01-03T16:08:41Z",
        "body": "I think what will happen a lot here is that people use the unnamed tuple (the deconstruct) and at some point say: \"oh I will refactor my code a bit. I will name this tuple t\" and then realize that it won't work, for no apparent reason.  \r\n\r\n\r\n"
      },
      {
        "user": "HaloFour",
        "created_at": "2017-01-03T16:15:17Z",
        "body": "Maybe.  Like many things that's something that the developer will have to learn.  Deconstruction/conversion or not, `(int x, int y)` and `(int x, int y) t` are fundamentally different declarations."
      },
      {
        "user": "DavidArno",
        "created_at": "2017-01-03T17:14:05Z",
        "body": "@mharthoorn,\r\n\r\n> I think what will happen a lot here is that people use the unnamed tuple (the deconstruct) and at some point say: \"oh I will refactor my code a bit. I will name this tuple t\" and then realize that it won't work, for no apparent reason.\r\n\r\nThat's why ensuring the new deconstruction and tuple features are well documented from the outset. You don't have an \"unnamed tuple\", you have a deconstruction. The tuple syntax is used to deconstruct a type into a series of values.\r\n````\r\nvar (x, y) = point; // there is no tuple here, just a deconstruction of point to x & y\r\n````\r\nIf we start using the wrong terminology from the outset, confusion will indeed reign. If we emphasise the difference between deconstructions and tuples from the outset, then such naive \"refactorings\" are less likely to occur.\r\n\r\nIt's important that the difference between deconstructions and tuples is understood as the two syntaxes have quite different effects, even when used with tuple-returning methods:\r\n````cs\r\nprivate (int x, int y) aTuple() => (1, 2);\r\n....\r\n(int x, int y) t = aTuple(); // assigns (1, 2) to tuple variable t\r\nvar t2 = aTuple(); // assigns (1, 2) to tuple variable t2 \r\n\r\n(int x, int y) = aTuple(); // assigns 1 to int variable x and 2 to int variable y\r\nvar (x2, y2) = aTuple(); // assigns 1 to int variable x2 and 2 to int variable y2\r\n````\r\n"
      },
      {
        "user": "gafter",
        "created_at": "2017-01-03T21:55:41Z",
        "body": "The expression `(int x, int y)` isn't an lvalue, so the ordinary assignment expression (with the possible use of a user-defined conversion) isn't available in this context."
      },
      {
        "user": "DavidArno",
        "created_at": "2017-01-03T22:07:00Z",
        "body": "@gafter, could you put \"The expression `(int x, int y)` isn't an lvalue\" in to layman's terms, please? I thought it meant the left hand side of an assignment statement, but in that case it definitely can be used as an lvalue as the following code compiles and runs just fine:\r\n````cs\r\n[Test]\r\npublic void TestDeconstruct()\r\n{\r\n    (int x, int y) = aTuple();\r\n    Assert.AreEqual(2, y);\r\n}\r\n\r\nprivate (int x, int y) aTuple() => (1, 2);\r\n````\r\nSo I'm guessing it doesn't mean that?"
      },
      {
        "user": "gafter",
        "created_at": "2017-01-03T22:12:29Z",
        "body": "What I mean is that the expression `(int x, int y)` doesn't designate a variable, or a location in memory, to which a value can be assigned. According to the language specification \"The left operand of an assignment must be an expression classified as a variable, a property access, an indexer access, or an event access.\" It used to be that was a requirement of the assignment expression, but now the assignment expression has two forms. The old form has that restriction, and the new deconstruction form requires a tuple on the left-hand-side. They have separate rules for how they work."
      }
    ]
  },
  {
    "number": 16151,
    "title": "Error Recovery Docs?",
    "created_at": "2016-12-29T23:23:24Z",
    "closed_at": "2016-12-30T20:49:09Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16151",
    "body": "Is there any documentation on how the error recovery system works?\r\nIf so, could you signpost me to it.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16151/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-12-30T06:09:19Z",
        "body": "Which error recovery system are you referring to?"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-12-30T07:07:56Z",
        "body": "@CyrusNajmabadi I didn't know there was multiple error recovery systems. \r\nHence the need for documentation, \r\nPrincipally I'm interested in how the parser recovers after it find something it didn't expect.\r\nSince the IDE doesn't just report only the first error. thus it must be able to resync further on in the grammar."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-12-30T07:31:09Z",
        "body": "> Principally I'm interested in how the parser recovers after it find something it didn't expect.\r\n\r\nFirst, realize that parsing is conceptually just looping nested contextual recognizers.  i.e. there is a top level loop that is trying to recognize top level constructs (i.e. usings/namespaces/type-declarations/etc.).  Then, when you parse some construct, it itself may have some nested loop inside of it (and so on and so forth).  For example, a class-declaration parsing function will have a loop that recognizes and parses out the class members.  A parameter list parsing function will have a loop that recognizes and parses out parameters.  etc. etc.  So, at any point in time you're in some (possibly deeply) nested set of parsing loops.\r\n\r\nSecond: we break \"something it didn't expect\" into two concepts:\r\n\r\n1. Something unexpected, which might be the start of something valid in some parsing context we're currently in.\r\n2. Something unexpected which is not.\r\n\r\nFor example, if we have:\r\n\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (a)\r\nclass D\r\n```\r\n\r\nWhile attempting to parse the embedded statement of the 'if-statement' the parser will see a token it does not expect (```class```).  When this happens, it checks what 'loop contexts' its currently parsing and asks if any of them could handle processing ```class```.  In the above example, we're actually have three nested parsing function loops:\r\n\r\n1. The outermost loop that's parsing the top-most file constructs (usings/namespaces/types/etc.)\r\n2. The class-loop that is parsing class members.\r\n3. The block-statement loop (inside 'M') that is parsing out statements.\r\n\r\nIn this case, the block-statement loop will say \"i cannot handle 'class'\".  We then look upwards and ask the class-loop if it can handle 'class'.  It will say 'yes i can'.  Because we know an outer loop will be able to handle this, we simply stop parsing our inner loop and allow the parsing to bubble back up (i.e. popping our literal function call stack).  \r\n\r\nNow, let's say we have something like:\r\n\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (a)\r\n           , return;\r\n```\r\n\r\nIn this case we will perform the same sort of check as above.  Asking each of our containing loop contexts \"can you handle ```,```?\".  However, in this case, none of the loop constructs will be able to handle it.  So we say \"Ok.  We don't know what to do with this token.  So just skip it and continue performing whatever loop we're in\".  In the case above, we're in a block, in a statement-parsing loop.  We'll see 'return' and know how to handle it.\r\n\r\n--\r\n\r\nSo, to sum up: When we encounter something we don't expect, we make a decision if we should stop what we're currently doing and allow someone above us in the stack to take over.  Or we decide if we should just skip over the token.  If we skip, we then go back to our normal parsing routines, repeating hte same sort of error-check as necessary if we can't handle that token, and so on and so forth."
      },
      {
        "user": "jnm2",
        "created_at": "2016-12-30T10:52:30Z",
        "body": "Sounds like a great wiki article."
      }
    ]
  },
  {
    "number": 16059,
    "title": "Predefined type preference for XML documentation",
    "created_at": "2016-12-21T23:13:39Z",
    "closed_at": "2017-01-04T20:48:26Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16059",
    "body": "**Version Used**: 2.0.0.61213\r\n\r\nBy which predefined type preference setting is `<see cref=\"UInt32\" />` judged? Either way, I think there should be a separate setting for usage in XML comments.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16059/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-12-21T23:34:47Z",
        "body": "I don't understand the question."
      },
      {
        "user": "miloush",
        "created_at": "2016-12-21T23:40:30Z",
        "body": "Sorry. The Text Editor > C# > Code Style > General has two options for _predefined type preferences_:\r\n\r\n- for locals, parameters and members\r\n- for member access expressions\r\n\r\nI am getting IDE0013 _Name can be simplified_ on `<see cref=\"UInt32\" />`. The question was which of the two settings above influence the IDE0013 in this case."
      },
      {
        "user": "Pilchie",
        "created_at": "2016-12-31T23:11:21Z",
        "body": "I remember @balajikris debating this, but I don't remember what we came up with as the answer."
      },
      {
        "user": "balajikris",
        "created_at": "2016-12-31T23:54:09Z",
        "body": "It's judged by the latter option \"for member access expressions\". There are detailed notes in the source code as to why that's the case. I vaguely recall filing an IDE issue for this, so it's possible there's a dupe bug for this."
      }
    ]
  },
  {
    "number": 15730,
    "title": "Access to document in DiagnosticAnalyzer",
    "created_at": "2016-12-07T21:51:03Z",
    "closed_at": "2016-12-21T22:59:35Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15730",
    "body": "I'm writing a diagnostic analyzer / code fix provider and i would like to know the document when my analyzer in invoked.\r\nIs this possible to know the document concerned by the analysis ?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15730/comments",
    "author": "doubret",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2016-12-21T22:59:35Z",
        "body": "From the analyzer, if you register a syntax action, you can look at the tree and get the file path from the SyntaxTree. From a CodeFix, the context object will give you the document."
      }
    ]
  },
  {
    "number": 15625,
    "title": "Variance and struct",
    "created_at": "2016-12-01T02:04:10Z",
    "closed_at": "2016-12-02T22:20:55Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15625",
    "body": "I have the following types:\r\n```\r\ninternal partial interface I1 { } \r\ninternal partial struct S1 : I1 { }\r\n```\r\nI use them with this code:\r\n```\r\nIEnumerable<S1> test = Enumerable.Empty<S1>(); \r\nIEnumerable<I1> test2 = test;\r\n```\r\nBut test2 assignment fails with \"Cannot implicitly convert type IEnumerable&lt;S1&gt;' to 'IEnumerable&lt;I1&gt;'\" because  variance does not seem to work with struct. \r\nWhy do we have this restriction?\r\nIs there any plan to support this in the future?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15625/comments",
    "author": "MatthieuMEZIL",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2016-12-01T02:16:35Z",
        "body": "The variance limitations are imposed by the CLR.  My understanding is that this is due to the fact that structs all have different sizes and thus can't share a JITed implementation.  References all have the same size so the JIT can compile the generic type once and share it."
      },
      {
        "user": "mikedn",
        "created_at": "2016-12-01T08:35:00Z",
        "body": "This isn't a \"limitation\" of CLR, it's simply how value and reference types work. An interface is a reference type and going from a value type to a reference type requires a boxing conversion. Variance requires reference conversions since these are basically no-op, the compiler and the runtime can lie and claim that `IEnumerator<RefType>.Current` returns `IRefType` even if it actually returns `RefType`.\r\n\r\nThe C# compiler could implement the cast from `IEnumerable<S1>` to `IEnumerable<I1>` by doing something like `from s in es1 select (I1)s`. But that wouldn't be a reference conversion anymore, it would be some kind of new alien conversion that resembles boxing conversion somewhat and has the weird characteristic that the conversion result cannot be converted back to the original value (it's actually possible but the compiler needs to stand on its head to do that)."
      },
      {
        "user": "MatthieuMEZIL",
        "created_at": "2016-12-01T08:38:10Z",
        "body": "@mikedn I'm completely aware about the boxing conversion. And, of course with IEnumerable&lt;&gt;, it's very easy to workaround. However, in some other scenarios, it would be an interesting feature IMHO."
      },
      {
        "user": "mikedn",
        "created_at": "2016-12-01T08:39:46Z",
        "body": "> It would be an interesting feature IMHO.\r\n\r\nWell, it's an interesting feature that cannot be implemented well :smile:"
      }
    ]
  },
  {
    "number": 15208,
    "title": "<see cref> doesn't accept unqualified member names from base types",
    "created_at": "2016-11-13T14:05:37Z",
    "closed_at": "2018-01-30T19:45:13Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15208",
    "body": "```C#\r\nclass C  {\r\n\t///<summary><see cref=\"ToString\"/></summary>\r\n\tint x;\r\n}\r\n```\r\n\r\nThis gives (on both Roslyn and native compilers)\r\n\r\n> CS1574: XML comment has cref attribute 'ToString' that could not be resolved\r\n\r\nChanging it to `Object.ToString`, or to `x`, works fine.\r\n\r\nWhy does this name lookup ignore base types?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15208/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "SLaks",
        "created_at": "2016-11-13T14:06:02Z",
        "body": "The spec doesn't say anything about this.\n"
      },
      {
        "user": "gafter",
        "created_at": "2018-01-30T19:45:13Z",
        "body": "Agreed, the spec doesn't say anything about this. The Roslyn binder tries to duplicate, approximately, the previous behavior of the native compiler for compatibility. What you see the compiler doing is what you get."
      },
      {
        "user": "christothes",
        "created_at": "2022-10-28T18:03:52Z",
        "body": "It appears to work if the member reference is fully qualified: \r\n\r\n[Sharplab](D4AQTAjAsAUCAMACAQgQwF4G5axAZkXEQGFEBvWRKxAejsQB4BnAVwFs3UAnATwD5K1OjUQAVABYBLJoi4BTJgHsANgDcFjJnLmIAxvIBmAXgBEyAHQAxRYpM0BMarXoBlRYgAmijQBcpM5m09Q1M0LnMAESsbOz5zQSphFBYfRD9pT28ZADtFVMCdfTljEyjrW3sE5xEGGlYObn4q)\r\n\r\n```c#\r\nusing System;\r\nusing Baz;\r\n\r\npublic class C {\r\n    /// <summary>\r\n    /// This resolves <see cref=\"B.Foo\"/>\r\n    /// So does this <see cref=\"Bar.D.Foo\"/>.\r\n    /// But this does not <see cref=\"D.Foo\"/>\r\n    /// </summary>\r\n    public void M() {\r\n    }\r\n}\r\n\r\nnamespace Bar {\r\n    public class D : B\r\n    {\r\n        public override void Foo()\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Baz {\r\n    public abstract class B\r\n    {\r\n        public abstract void Foo();\r\n    }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 15191,
    "title": "CodeFix adds first attribute in invalid place.",
    "created_at": "2016-11-12T05:42:56Z",
    "closed_at": "2016-11-13T01:55:39Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15191",
    "body": "**Version Used**: \r\nVisual Studio 2015 Update 3\r\n\r\n**Steps to Reproduce**:\r\n1. Analyze code with SingleLineDocumentationCommentTrivia\r\n```\r\nclass Class\r\n{\r\n    /// <summary>\r\n    /// This is a Test!\r\n    /// </summary>\r\n    public object Test { get; set; }\r\n```\r\n1. Locate the syntax node of the property declaration (same behavior for other types)\r\n```\r\nPropertyDeclarationSyntax propertySyntaxNode = syntaxRoot.FindNode(diagnosticSpan);\r\n```\r\n2. Add an attribute\r\n```\r\nvar newPropertySyntaxNode = propertySyntaxNode.WithAttributeLists(\r\n    propertySyntaxNode.AttributeLists.Add(GenerateMyAttributeSyntax()))\r\n\r\nroot = root.ReplaceNode(propertySyntaxNode, newPropertySyntaxNode)\r\n```\r\n\r\n**Expected Behavior**:\r\nValid code is generated:\r\n```\r\nclass Class\r\n{\r\n    /// <summary>\r\n    /// This is a Test!\r\n    /// </summary>\r\n    [MyAttribute]\r\n    public object Test { get; set; }\r\n```\r\n\r\n**Actual Behavior**:\r\nWarning CS1587: XML comment is not placed on a valid language element\r\n```\r\nclass Class\r\n{\r\n    [MyAttribute]\r\n    /// <summary>\r\n    /// This is a Test!\r\n    /// </summary>\r\n    public object Test { get; set; }\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15191/comments",
    "author": "tom-englert",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-12T06:59:53Z",
        "body": "The onus is on you to keep code correct.  The APIs will not do it for you.  In this case, you'll have to do something akin to `var newProp = oldProp.WithoutLeadingTrivia().WithAttributes(newAttributes.WithLeadingTrivia(oldProp.GetLeadingTrivia()))`\n"
      },
      {
        "user": "tom-englert",
        "created_at": "2016-11-13T10:59:43Z",
        "body": "So you really say the method \"WithAttributes\" is designed to create invalid code by default, and everyone has to step into this trap and implement dull and ugly workarounds to make it work?\n\nThe workaround described does not work properly, because it fails if the element has already attributes, or if the trivia does not contain any comment!\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-13T16:39:23Z",
        "body": "> So you really say the method \"WithAttributes\" is designed to create invalid code by default\n\nNo.  I would say: none of the 'WithXXX' methods do any sort of validation that they create correct code.  They simply do one thing.  They replace the existing XXX value on the node with the new one you provided.  That's it.  With every single WithXXX method i can create invalid code, and the onus is on the user of the API to not do that.\n\n> The workaround described does not work properly, because it fails if the element has already attributes\n\nWhy would it fail if the element already has attributes.  In that case, the existing comments will be moved over from the old attributes to the new attributes.\n\n> or if the trivia does not contain any comment!\n\nThen only copy the comments :)\n\n> and everyone has to step into this trap and implement dull and ugly workarounds to make it work?\n\nI would describe it more as needing to know the limitations of the APIs.  Just wait till you get to deal with fun stuff like preprocessor directives :)\n\nIf you wanted to write an API to smooth out this experience, that would certainly be nice!\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-13T16:42:55Z",
        "body": "Note: we've considered in the past trying to make it so that the methods only generate 'correct' code.  But we quickly realized htat the set of issues we'd have to codify would be enormous.  Furthermore, it would become extremely difficult for people using the API to get the precise sort of control that we do want sometimes.\n\nFinally, we have scenarios where we do want to be able to create incorrect code (for example, so that we can continue with a refactoring, while telling the user about the issue that will arise).  So we opted for an API that behaves _very uniformly_.  The uniform nature of it precisely allows us to avoid the \"dull and ugly\" workarounds we used to have in our previous codebase where every piece of code needed to know all the interesting quirks of how all the APIs used to work, in their effort to \"do the right thing\".  \n\nIt turned out to be far better to just be consistent than not.\n\nThanks for your feedback!  I hope this helps!\n"
      },
      {
        "user": "tom-englert",
        "created_at": "2016-11-13T17:23:56Z",
        "body": "The problem here is not when the WithXXX replaces existing values with other values - then it's working fine - but when there are no values and the WithXXX generates the first one. \n\nIn the case of attributes the default position of the first attribute just has some unfortunate default. \nIf the first attribute would be located near to the method or property instead of in front of the trivia of the method, the outcome would be much more likely to be correct than with the current default. \nIt does not need to know how to do the right thing - just the probability that its the right thing would be much higher.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-14T00:14:23Z",
        "body": "Tom, as mentioned before, the goal was to make a completely consistent API without the need for consumers to understand when and how the API would actually \"be smart\" in ways that might not be expected or desired.   \n\nI've worked with APIs like this for 15+ years, and i can tell you i vastly prefer an API that works the same way 100% of the time and doesn't have these types of corner cases.\n\n> The problem here is not when the WithXXX replaces existing values with other values - then it's working fine - but when there are no values and the WithXXX generates the first one.\n\nI'm still not seeing the problem.  If there are multiple attributes already, then the code example i specified will get the comments off the start of the node and will attach them to the attributes you are adding.  If there are no values, then the code example works the same way.  It will grab the comments from the start of the node and attach them to the attributes you are adding.\n\nIn either case, the comments that were at teh start of the node will stay at the start of the node.  Another way you could write this would be:\n\n`var newProp = oldProp.WithoutLeadingTrivia().WithAttributes(newAttributes).WithLeadingTrivia(oldProp.GetLeadingTrivia()))`\n\nHere, the intent is clear, you're removing the initial trivia, adding in the attribute, then adding back the initial trivia.  That will ensure that the attributes get added in between the trivia and the node.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-14T00:15:04Z",
        "body": "> just the probability that its the right thing would be much higher.\n\nI'd like an API that works consistently 100% of the time versus one that behaves inconsistently but which may be better for some consumers some of the time :)\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-11-18T17:47:15Z",
        "body": "> I get the feeling that you have never tried to use your on code.\n\nI've used the API extensively and I own a huge amount of the Roslyn C# and VB IDE features that leverage this code and heavily use the 'WithXXX' methods :)\n\n> Since the WithXXX methods are trying to be smart about the indent of the parts they are adding, \n\nThe WithXXX methods do _not_ try to be smart.  They do precisely what you asked.  They leave control of trivia in your hands.\n\n> So I wonder what you mean by \"the API works consistently 100% of the times\" - do you mean it's OK to generate garbage, if it's guaranteed that the same garbage is generated every time, is that what you call consistent?\n\nActually, yes.  THat's how i would describe it.  It means that i know _every time_ what the WithXXX methods will do.  And it means i know _every time_ what things i may need to take care of.  Again, i'd rather have that then have an inconsistent API that behaved differently in lots of circumstances that i would then have to go internalize.  As mentioned before, this comes from ~15 years of experience here, and having first hand usage of APIs that operate in the manner you mentioned.  They turned out to actually be extremely hard to use, and it was very hard to maintain them as it was never clear what subtle behaviors people might be depending on.\n\nThese APIs are extremely simple and are the building blocks for you to layer on additional smarts.  \n\nCheers!\n"
      }
    ]
  },
  {
    "number": 15164,
    "title": "Howto debug VBCSCompiler",
    "created_at": "2016-11-11T10:03:43Z",
    "closed_at": "2016-11-11T20:55:11Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15164",
    "body": "vbcscompiler.exe is consuming a lot of cpu on a specific solution at the moment the unittest projects are build.\r\n It is not Always at the same unittest project\r\n\r\nFor that I like to debug the vbcscompiler\r\n\r\nI can start the vbcscompiler project via vs2015, but when building my solution the vbcscompiler.exe from the C:\\Program Files (x86)\\MSBuild\\14.0\\Bin folder is started and used.\r\n\r\nHow can I debug vbcscompiler?\r\n\r\ntx\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15164/comments",
    "author": "BartNetJS",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-11-11T20:55:10Z",
        "body": "Cause vbcscompiler to be started by compiling a small program.\n\nThen attach to that process using the debugger.\n\nThen run the compiles that you wish to debug the behavior of.\n"
      },
      {
        "user": "BartNetJS",
        "created_at": "2016-11-14T15:08:58Z",
        "body": "This is what I tried so far:\n- Opened the roslyn.sln in VS2015\n- Started the CompilerExtension project in debug mode via VS2015\n  - An experimental VS2015 instance is started\n  - I open my custom solution in the experimental vs2015\n  - initiated a full rebuild\n  - after a while I can see VBCSCompiler is launched and eating all the cpu resources\n  - but it is the VBCSCompiler from \"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\" and not from the running instance that is found under \"C:\\Users\\bauweraert\\AppData\\Local\\Microsoft\\VisualStudio\\14.0RoslynDev\\Extensions\\Microsoft\\Roslyn Compilers\\42.42.42.42424\"\n\nI also tried to overwrite all the file in the bin folder with the files from the folder above, but then VS2015 complains on compile time about versions\n\nAny help welcome\nTx\n"
      }
    ]
  },
  {
    "number": 14886,
    "title": "DataFlowAnalysis: method invocation on struct is reported as write operation",
    "created_at": "2016-11-02T09:25:52Z",
    "closed_at": "2016-11-02T19:06:49Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/14886",
    "body": "**Version Used**: \r\nNuGet Microsoft.CodeAnalysis, v2.0.0-beta5\r\n\r\n**Steps to Reproduce**:\r\nConsider the next program:\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\r\n\r\nnamespace RoslynDataFlowTester\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string code = @\"\r\n                public struct S\r\n                {\r\n                    public void M()\r\n                    {\r\n                    }\r\n                }\r\n\r\n                public class C\r\n                {\r\n                    public void N(S s)\r\n                    {\r\n                        s.M();\r\n                    }\r\n                }\r\n            \";\r\n\r\n            var document = new AdhocWorkspace()\r\n                .AddProject(\"Test\", LanguageNames.CSharp)\r\n                .WithCompilationOptions(new CSharpCompilationOptions(outputKind: OutputKind.DynamicallyLinkedLibrary))\r\n                .AddMetadataReferences(new[] {\r\n                    MetadataReference.CreateFromFile(typeof (object).Assembly.Location),\r\n                })\r\n                .AddDocument(\"Test.cs\", code);\r\n\r\n            Compilation compilation = document.Project.GetCompilationAsync().Result;\r\n\r\n            var type = compilation.GetTypeByMetadataName(\"C\");\r\n            var method = (IMethodSymbol)type.GetMembers(\"N\").First();\r\n            var parameter = method.Parameters[0];\r\n\r\n            var syntaxTree = type.DeclaringSyntaxReferences[0].GetSyntax().SyntaxTree;\r\n            var model = compilation.GetSemanticModel(syntaxTree);\r\n            SyntaxNode body = ((MethodDeclarationSyntax)method.DeclaringSyntaxReferences[0].GetSyntax()).Body;\r\n\r\n            DataFlowAnalysis dataFlowAnalysis = model.AnalyzeDataFlow(body);\r\n            if (dataFlowAnalysis.Succeeded)\r\n            {\r\n                if (dataFlowAnalysis.WrittenInside.Contains(parameter))\r\n                {\r\n                    Console.WriteLine(\"Write to 'p' detected.\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine(\"No writes to 'p' detected.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\"No writes to 'p' detected.\" is written to the console.\r\n\r\n**Actual Behavior**:\r\n\"Write to 'p' detected.\" is written to the console.\r\n\r\nChanging the type of `S` to a `class` results in the expected behavior. I'm observing the same issue in NuGet Microsoft.CodeAnalysis, v1.3.2 and VS 2015 Update 3. \r\n\r\nIf this is not a bug, can anyone please explain why a write is reported in the `struct` case?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/14886/comments",
    "author": "bkoelman",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-11-02T19:06:18Z",
        "body": "This is correct behavior. The implicit `this` parameter of a method in a struct is of type `ref S` and can therefore write the struct itself held by the caller. For a class, however, the `this` parameter is of type `C` and therefore a method cannot change the reference held by the caller.\n"
      },
      {
        "user": "bkoelman",
        "created_at": "2016-11-08T12:50:48Z",
        "body": "I noticed that integral types such as `int`, `bool` are not reported to be written to. Are they special-cased? \n\nI've browsed through the inner workings, but could not find anything to indicate that.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-03-24T03:51:57Z",
        "body": "> I noticed that integral types such as int, bool are not reported to be written to. Are they special-cased?\r\n\r\nYes.  These types are assumed to have well behaved implementation in the runtime such that method calls on them do not mutate state.  This avoids unneeded copying when doing things like operating on readonly instances of them.\r\n\r\nSuch assumptions are not safe to make around general user structs."
      }
    ]
  },
  {
    "number": 14493,
    "title": "Fully-qualified path for Type defined in different Solution (cross solution project reference)",
    "created_at": "2016-10-13T13:24:55Z",
    "closed_at": "2021-09-16T02:02:13Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Blocked",
      "Need More Info",
      "fabric-bot-test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/14493",
    "body": "We are using Roslyn Compiler for generating a Dependency Graph for a given application code. The **application code can span across multiple solutions and can have references between the solutions** (ex. Service code in one solution, common business logic in another solution etc.)\n\nFor the purpose of generating the Dependency Graph, we would require fully-qualified name and exact path of all the custom types refereed (ones which we have created as our application code).\n\nRoslyn happens to give this information using the SemanticModel's Symbol Information.\n\n**Scenario which works**:\nSemanticModel's Symbol Information gives the Location (path) and ContainingSymbol information for any Type if the type is declared in the same Solution (under some project) in which it is getting used.\n\n**Scenario which does not work**:\nIf the refereed Type is not part of the current solution but is part of some other solution which is getting refereed in the existing solution, then the SemanticModel does not give any Symbol Information which can give the Path and Fully Qualified Name.\n\n**Note**:\nWe have already tried using the variants of GetSpeculativeSymbolInfo and GetSpeculativeTypeInfo. But it does not give any information. It just mentions that its a part of MetaData (as if we are using a Type from .NET Class Lib).\n\n//Sample Code for Testing\n\n```\npublic class TestClass\n{\n    Student student = new Student();\n    Person person = new Person();\n}\n\npublic class Student\n{\n    public string Name { get; set; }\n}\n```\n\nNotes:\n\nTestClass is part of project Project_1 which is in Solution_1.\nTestClass has two members: Class Student is part of project Project_2 which is in Solution_1 and Project_1 has a Project Reference to Project_2.\nClass Person is part of project Project_XYZ which is in Solution_XYZ and Project1 from Solution_1 has a dll Reference to Project_XYZ from Solution Solution_XYZ.\nThe .dll of Project_XYZ is getting created at location \"..\\Projects\\SourceCode\\AllBinaries\" and \"Project_1\" from Solution_1 refers the .dll of Project_XYZ from this location \"..\\Projects\\SourceCode\\AllBinaries\"\n\nCode for getting Symbol Information of the Type:\n\n```\nprivate void GetSymbolDetails(TypeSyntax typeSyntax)\n{\n    ISymbol symbol = semanticModel.GetSymbolInfo(typeSyntax).Symbol; \n   //HERE semanticModel = document.GetSemanticModelAsync().Result;\n}\n```\n\n**Scenario which works**:\nWhen the above code is called with input parameter as \"IdentifierNameSyntax IdentifierName Student\", the \"symbol\" gives all the required symbol details of \"Student\" (including fully-qualified name and exact path).\n\n**Scenario which does not work**:\nWhen the above code is called with input parameter as \"IdentifierNameSyntax IdentifierName Person\", the \"symbol\" value is null.\n\nLooking forward to some pointers from the Experts.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/14493/comments",
    "author": "abhijitparkhi1983",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-10-13T16:53:28Z",
        "body": "How are you getting a document in the first place? In general, I would look at your `Compilation` object and see if it has any diagnostics.\n"
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2016-10-14T05:55:25Z",
        "body": "Hello @Pilchie, Thanks for your response. As of now, I dont directly deal with the Compilation.\nAs far as the Document is concerned, this is how we get to the document:\n\n```\nvar workspace = MSBuildWorkspace.Create();\nsolution = workspace.OpenSolutionAsync(solutionPath).Result;\n\nforeach (var project in solution.Projects)\n{\n     project.Documents.ToList().ForEach(ReadDocument);\n}\n```\n\nOnce we get a document from the above code, we do the following:\n\n```\nvar decendendNodes = document.GetSyntaxRootAsync().Result;\nvar semantecModel = document.GetSemanticModelAsync().Result;\n```\n\nWe pass the semantecModel to instance of **CSharpSyntaxWalker** class and finally we call **CSharpSyntaxWalker**'s `Visit(decendendNodes)`.\n\nHope I was able to give you required information. \nFYI: Instead of loading a document as text data, we directly use the Document object. So i am not sure how would a Compilation help here.\n\nLooking forward to your valuable input.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-10-14T14:37:28Z",
        "body": "Does `(await project.GetCompilationAsync()).GetDiagnostics().Where(d => d.Severity == DiagnosticSeverity.Error)` return anything?\n"
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2016-10-17T11:31:32Z",
        "body": "Hello @Pilchie, sorry for coming late on this thread.\n\nThe above code gives 0 Diagnostic. \nIs there any thing else I need to check?\n\nLooking forward to further help from the forum. I am clueless and stuck completely\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-10-17T22:34:15Z",
        "body": "At this point it's getting harder to psychic debug - any way you can share the projects involved?\n"
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2016-10-18T05:01:24Z",
        "body": "Hello @Pilchie, I am not sure what do mean by \"getting harder to psychic debug\".  Should I be giving some more information? \n\nThe crux of the question is simple. In case where the application contains multiple solutions (which is a very regular case. Roslyn source code also has three solutions under it namely **Compilers.sln**, **CrossPlatform.sln** and **Roslyn.sln**), and when there are cross solution references (I am sure there are cross solution references in the above 3 solutions as well), how do we get the details of a Type refereed in one solution but defined in another. \n\nHow do i share the project involved? Have never done it here on github? Is there any facility to share the project against this question?\n"
      },
      {
        "user": "abhijitparkhi1983",
        "created_at": "2016-11-08T05:15:55Z",
        "body": "@Pilchie , looking forward to some insight from the @roslyn team on the above concern \n"
      },
      {
        "user": "jcouv",
        "created_at": "2016-12-08T05:11:50Z",
        "body": "@abhijitparkhi1983 For sharing a repro, you could create a github repo for your project or make a zip file (host it on OneDrive, Google Drive or Dropbox), then copy the link here. The smaller the repro the better."
      },
      {
        "user": "thirstycreative",
        "created_at": "2016-12-08T05:29:12Z",
        "body": "@Pilchie Hello,\r\nI my name is  Roslyn from Australian but I am not in the @roslyn team.\r\nWow I wish I could understand what you are working on.\r\nKindest,\r\nRoslyn"
      },
      {
        "user": "gafter",
        "created_at": "2018-01-31T02:53:22Z",
        "body": "@abhijitparkhi1983 I suspect that the compilation that contains the reference does not have a metadata reference to the compilation or assembly where the type is defined. Please provide is with a small, complete, self-contained program that uses Roslyn and illustrates the issue."
      },
      {
        "user": "ghost",
        "created_at": "2021-09-16T02:02:15Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 14144,
    "title": "Question: Is there a way to abort a running CSharpScript?",
    "created_at": "2016-09-28T06:45:10Z",
    "closed_at": "2024-03-09T05:43:17Z",
    "labels": [
      "Question",
      "Area-Interactive",
      "Interactive-ScriptingLogic"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/14144",
    "body": "If the running script contains an infinite loop, is there a way to stop it?\n\nI am leaning towards finding a way to load the assembly into its own AppDomain and unload the domain to stop it from running and would like to know if there is a better way?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/14144/comments",
    "author": "TzeWey",
    "comments": [
      {
        "user": "tenor",
        "created_at": "2016-09-28T15:15:33Z",
        "body": "This question is a general non Roslyn-related .NET question, and can be rephrased as: is there a way to forcibly terminate a running thread?\n\n**Long Answer:** Yes, there is, but it requires an elaborate setup that cannot be succinctly explained here.\n**Better Answer:** Run your script in another process and terminate that process when you're done.\n"
      }
    ]
  },
  {
    "number": 13573,
    "title": "Policy for argument validation in Roslyn code",
    "created_at": "2016-09-02T21:11:21Z",
    "closed_at": "2016-09-02T22:30:25Z",
    "labels": [
      "Question",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13573",
    "body": "What is the policy for argument validation in Roslyn code? I can see places where I can pass `null` and get `NullReferenceException` instead of `ArgumentNullException`.\n\nAre pull requests adding argument validation a good idea?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13573/comments",
    "author": "ashmind",
    "comments": [
      {
        "user": "tmat",
        "created_at": "2016-09-02T21:16:53Z",
        "body": "Public APIs should throw ArgumentnNullException. If not that'd be a bug. Internal APIs don't need to check anything. It's good to add `Debug.Assert(x != null)` to capture the intent or whenever the null ref would occur later on and might be hard to find where the original problem was. \n"
      }
    ]
  },
  {
    "number": 13544,
    "title": "Should QuickInfo show the declared accessibility or the effective accessibility of symbols?",
    "created_at": "2016-09-01T21:43:36Z",
    "closed_at": "2016-09-06T16:56:06Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13544",
    "body": "``` C#\ninternal class C\n{\n    public void M() {} // QuickInfo on M\n}\n```\n\nShould it show as public or internal?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13544/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2016-09-01T21:43:59Z",
        "body": "/cc: @CyrusNajmabadi because we briefly chatted about this offline\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-09-02T16:47:49Z",
        "body": "Personally I think is should show the _declared_ accessibility - `public` in this case.  That matches what we do for glyphs, etc.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-09-02T16:48:05Z",
        "body": "@DustinCampbell do you have an opinion?\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2016-09-02T17:23:22Z",
        "body": "I think it should be declared. Making it effective without some other indication of what's happening will just serve to confuse.\n"
      }
    ]
  },
  {
    "number": 13362,
    "title": "How to influence the generated files? Like syntax.Generated.vb",
    "created_at": "2016-08-25T09:40:12Z",
    "closed_at": "2016-08-25T18:10:33Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13362",
    "body": "Can someone tell me if it possible influence the generated code produce into the `...Generated.vb` files.?\nIf so how? and where?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13362/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2016-08-25T13:07:51Z",
        "body": "You mean have a generator/analyzer that can intercept and/or modify the source generated by another generator?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-08-25T13:12:45Z",
        "body": "@HaloFour  No, if it generated, and may need change, like removing a null check so it no longer get thrown.\nIf I manually change the source of one of those files. There is a chance that it will be regenerated and lose the change.\n"
      },
      {
        "user": "HaloFour",
        "created_at": "2016-08-25T13:15:21Z",
        "body": "IIRC source generators are executed as a part of the compiler lifecycle.  The tooling will show you the results, but even if you could modify them the generator would simply overwrite your changes.  Unless you compile once and then get rid of the source generator.\n"
      },
      {
        "user": "alrz",
        "created_at": "2016-08-25T14:24:46Z",
        "body": "@AdamSpeight2008 I think `CompilerTools.sln` is what you're looking for.\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-08-25T15:52:49Z",
        "body": "@AdamSpeight2008 Those generated files are produced as a result of processing `Syntax.xml` for the syntax trees and `BoundNodes.xml` for the bound trees. You usually want to edit the `.xml` file to cause a change to be made in the generated sources.\n"
      }
    ]
  },
  {
    "number": 13135,
    "title": "Roslyn on Windows 10 IoT Core",
    "created_at": "2016-08-12T21:53:14Z",
    "closed_at": "2016-08-17T18:30:15Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13135",
    "body": "We would be interested in having the .NET compiler available on Windows 10 IoT Core running on ARM. (RPi and Minnowboard)\n\nThe use case revolves around a web-based IDE for IoT devices (using Blockly or similar) which would generate C# code to be passed on to the device, compiled and run.\n\nIf this is not currently possible, could we get a sense of the magnitude of effort involved?\n\nthanks\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13135/comments",
    "author": "neaorin",
    "comments": [
      {
        "user": "DavidArno",
        "created_at": "2016-08-16T11:23:17Z",
        "body": "There isn't yet a version of the .NET Core CLI that runs on Win 10 IoT with ARM. Until that happens, there's little point in trying to create a version of Roslyn that runs on that environment...\n"
      }
    ]
  },
  {
    "number": 13078,
    "title": "Should ParenthesizedVariableComponentSyntax.Variables be named Components?",
    "created_at": "2016-08-10T19:17:13Z",
    "closed_at": "2016-09-08T15:54:30Z",
    "labels": [
      "Question",
      "Resolution-Won't Fix",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13078",
    "body": "In this syntax node\n\n``` xml\n  <Node Name=\"ParenthesizedVariableComponentSyntax\" Base=\"VariableComponentSyntax\">\n    <Kind Name=\"ParenthesizedVariableComponent\"/>\n    <Field Name=\"OpenParenToken\" Type=\"SyntaxToken\">\n      <Kind Name=\"OpenParenToken\"/>\n    </Field>\n    <Field Name=\"Variables\" Type=\"SeparatedSyntaxList&lt;VariableComponentSyntax&gt;\"/>\n    <Field Name=\"CloseParenToken\" Type=\"SyntaxToken\">\n      <Kind Name=\"CloseParenToken\"/>\n    </Field>\n  </Node>\n```\n\nShould `Variables` be renamed `Components`?\n\nA similar question applies to\n\n``` xml\n  <Node Name=\"ParenthesizedVariableDesignationSyntax\" Base=\"VariableDesignationSyntax\">\n    <Kind Name=\"ParenthesizedVariableDesignation\"/>\n    <Field Name=\"OpenParenToken\" Type=\"SyntaxToken\">\n      <Kind Name=\"OpenParenToken\"/>\n    </Field>\n    <Field Name=\"Variables\" Type=\"SeparatedSyntaxList&lt;VariableDesignationSyntax&gt;\"/>\n    <Field Name=\"CloseParenToken\" Type=\"SyntaxToken\">\n      <Kind Name=\"CloseParenToken\"/>\n    </Field>\n  </Node>\n```\n\n(I'm asking because I'm not sure how much scrutiny these names received during the review)\n\n@jaredpar @VSadov @AnthonyDGreen @jcouv Opinions?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13078/comments",
    "author": "gafter",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2016-08-10T19:48:16Z",
        "body": "For the first one, I'd instead consider renaming `ParenthesizedVariableComponentSyntax` to `ParenthesizedVariablesSyntax`.\n\nFor the second one, I'd consider making `ParenthesizedVariableDesignationSyntax` be plural (`ParenthesizedVariableDesignationsSyntax`) or even simplify to `ParenthesizedDesignationsSyntax`,  and then rename `Variables` to be `Designations`.\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-08-10T23:25:26Z",
        "body": "The first rename you suggest isn't consistent with the pattern we use to name subtypes, and would introduce a confusion with existing nodes representing local variable declarations.\n\nI was only asking about the two field names.\n\n``` xml\n    <Field Name=\"Variables\" Type=\"SeparatedSyntaxList&lt;VariableComponentSyntax&gt;\"/>\n```\n\nand\n\n``` xml\n    <Field Name=\"Variables\" Type=\"SeparatedSyntaxList&lt;VariableDesignationSyntax&gt;\"/>\n```\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-09-08T15:55:37Z",
        "body": "@AndyGerlicher Please stop changing labels on our bugs.\n"
      }
    ]
  },
  {
    "number": 12811,
    "title": "Converting StringLiteralExpression to InterpolatedString requires me to handle special characters",
    "created_at": "2016-07-28T23:30:12Z",
    "closed_at": "2016-08-07T04:39:25Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12811",
    "body": "**Version Used**: \n1.3.2\n**Steps to Reproduce**:\n\n```\nCase SyntaxKind.StringLiteralExpression\n                Dim InvicationRightToken As SyntaxToken = CType(invocation, LiteralExpressionSyntax).Token\n                Dim InvicationRightTokenValueText As String = InvicationRightToken.ValueText.Replace(\"\"\"\", \"\"\"\"\"\")\n                Dim TextToken As SyntaxToken = SyntaxFactory.InterpolatedStringTextToken(InvicationRightToken.LeadingTrivia, InvicationRightTokenValueText, InvicationRightTokenValueText, InvicationRightToken.TrailingTrivia)\n                Dim InterpolatedStringTextToken As InterpolatedStringTextSyntax = SyntaxFactory.InterpolatedStringText(TextToken)\n                Return InterpolatedStringTextToken\n```\n\n**Expected Behavior**:\nWhen converting from a StringLiteralExpression that contains embedded \"'s to a InterpolatedStringTextSyntax I have to deal with spacial characters like \"\n**Actual Behavior**:\nIf I don't include .Replace(\"\"\"\", \"\"\"\"\"\") and I am not sure what other characters I need to deal with the resulting  InterpolatedString get a compile error.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12811/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-08-07T00:54:22Z",
        "body": "You do indeed require different characters inside an interpolated string token than would be required inside a normal string token. You have to escape `{`, and `}` by doubling them.\n\nThe quote character you need to escape the same way in an interpolated string as in a normal string.\n\n@AnthonyDGreen Do you care to look at this?\n"
      },
      {
        "user": "AnthonyDGreen",
        "created_at": "2016-08-07T01:07:42Z",
        "body": "Hey @paul1956,\n\nI'm not sure what you're asking. Could you rephrase?\n"
      },
      {
        "user": "paul1956",
        "created_at": "2016-08-07T01:51:11Z",
        "body": "@AnthonyDGreen if you look at the second line of the sample I need to basically double the number of quotes to make it work correctly (I don't deal with other special characters yet). I start with a StringLiteralExpression which might contain quotes (already doubled to get them in there) or brackets or anything else and I want to convert it to an InterpolatedStringTextToken. Why would I think I need to escape anything and how do I know what I need to escape if I have to do it manually. Even @gafter comment \"The quote character you need to escape the same way in an interpolated string as in a normal string.\" is confusing. The string as already quoted in a StringLiteralExpression so I presumed it was already escaped in an appropriate way.\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-08-07T03:22:21Z",
        "body": "The `.ValueText` of a string has had the escapes processed and removed. If you want the text of the original token, including the original escapes, you could just use `.ToString()` or (I think) `.Text`.\n"
      }
    ]
  },
  {
    "number": 12661,
    "title": "Local Functions and Test attributes",
    "created_at": "2016-07-21T17:49:30Z",
    "closed_at": "2016-10-27T19:53:33Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12661",
    "body": "Would it be possible to the add the `<Test>` attribute (or the other test related one) to a local function, and how much would that screw with the finding of tests?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12661/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-10-27T19:53:33Z",
        "body": "No, it is not possible to add attributes to local functions because the syntax does not permit it. Moreover, even if it were permitted, the testing frameworks do not support that.\n"
      }
    ]
  },
  {
    "number": 11950,
    "title": "ReduceExtensionMethod couldn't reduce the extension methods defined in a different assembly",
    "created_at": "2016-06-12T10:09:33Z",
    "closed_at": "2016-06-12T22:39:06Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11950",
    "body": "**Version Used**: \n1.2.2\n**Steps to Reproduce**:\n\n``` csharp\nvar c1 = CSharpCompilation.Create(\"C1\",\n                new[] { Parse(@\"public class S { }\") },\n                null,\n                TestOptions.ReleaseDll);\n\nvar c2 = CSharpCompilation.Create(\"C2\",\n                new[] { Parse(@\"public static class SExt { public void static M(this S s) { }\") },\n                new[] { new CSharpCompilationReference(c1) },\n                TestOptions.ReleaseDll);\n\nvar @c = c1.GlobalNamespace.GetMember<NamedTypeSymbol>(\"S\");\nvar method = c2.GlobalNamespace.GetMember<NamedTypeSymbol>(\"SExt\").GetMember<MethodSymbol>(\"M\");\n\nvar reduced = method.ReduceExtensionMethod(@c);\n```\n\n**Expected Behavior**:\nreduced != null\n\n**Actual Behavior**:\nreduced is null\n\ni'm not sure, seems NamedTypeSymbol.Equals couldn't handle RetargetingNamedTypeSymbol? should it check its UnderlyingNamedType?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11950/comments",
    "author": "ansyral",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-06-12T22:38:22Z",
        "body": "You looked up `S` in the wrong compilation. If you want to reduce in compilation `c2`, you need to get the symbol from `c2`.\n"
      },
      {
        "user": "ansyral",
        "created_at": "2016-06-13T04:55:48Z",
        "body": "Thanks, gafter. but what i want to do is to find all the extension methods of types defined in `c1`, for example `S`. is there any way I can do that? \n"
      },
      {
        "user": "ansyral",
        "created_at": "2016-06-13T06:19:39Z",
        "body": "add one more comment,  i might not be able to get the extension method from reference. take the following case as an example:\n`c1`: interface `IS`\n`c2`: implementation of `IS`  `S`\n`c3`: extension method of `IS` `M`\nis there any way i can know `M` is extension method of `S`?\n"
      }
    ]
  },
  {
    "number": 11939,
    "title": "Constructor alias",
    "created_at": "2016-06-11T07:07:28Z",
    "closed_at": "2016-06-11T18:50:33Z",
    "labels": [
      "Question",
      "Discussion",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11939",
    "body": "Why don't create this feature?\nI think should help a lot of problems.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11939/comments",
    "author": "darkmaku",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2016-06-11T11:07:06Z",
        "body": "I Maybe an explanation of what this feature actually is, complete with code examples?  And an explanation of the \"problems\" it intends to solve?\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-06-11T18:50:33Z",
        "body": "The answer to \"why don't we create this feature\" is that we don't know what this feature is.\n"
      }
    ]
  },
  {
    "number": 11780,
    "title": "Roslyn & MSBuild NodeReuse issue",
    "created_at": "2016-06-06T11:41:24Z",
    "closed_at": "2019-11-26T13:45:51Z",
    "labels": [
      "Question",
      "Area-Infrastructure"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11780",
    "body": "Referencing this closed issue #8539\n\nMSBuild uses nodereuse by default which causes the Roslyn Compilers to have their DLL being used well after your build is finished.  What this means is if you are running a full clean and rebuild with a build script you will be unable to delete the Roslyn nuget package from your packages directory until you manually kill the MSBuild.exe nodes that are idle.\n\nIs this something that is actively being looked at or is there any valid workaround currently?  \n\nI can set nodereuse to false in the build script but visual studio still has this problem with nodereuse\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11780/comments",
    "author": "TraGicCode",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2016-08-25T00:04:27Z",
        "body": "I believe @jaredpar knows what our current story is here.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-08-25T22:28:43Z",
        "body": "CC @rainersigwald who can answer the MSBuild side of things.\n\nFrom our side there really isn't much we can do here.  The compiler components are loaded by MSBuild and we don't really have a lot of control in how we are loaded.  If there were an attribute, option, etc ... for us to say \"please don't hold onto us after build\" it's absolutely something we'd insert into our NuGet package.  But the default for `msbuild /m` is to have `/nr:true` (at least to my knowledge) and as a result our NuGet package can get pinned by the lingering processes. \n"
      },
      {
        "user": "glucaci",
        "created_at": "2017-06-12T16:45:16Z",
        "body": "It's still opened? I have this problem by using the Compiler from NuGet (V 2.1.0).\r\n\r\nBy running one build after another on the same agent on cleanup will receive the access denied error:\r\n\r\n`##[error]System.UnauthorizedAccessException: Access to the path '...packages\\Microsoft.Net.Compilers.2.1.0\\tools\\Microsoft.CodeAnalysis.CSharp.dll' is denied. ---> System.ComponentModel.Win32Exception: Access is denied`"
      },
      {
        "user": "cyberzed",
        "created_at": "2019-01-11T07:56:07Z",
        "body": "@glucaci can't be closed since we get it quite often with our builds using 2.10.0"
      },
      {
        "user": "TraGicCode",
        "created_at": "2019-11-26T13:45:20Z",
        "body": "Hey,\r\n\r\nThis technically goes away in .net core since packages are stored in the users home directory.  "
      },
      {
        "user": "TraGicCode",
        "created_at": "2019-11-26T13:45:51Z",
        "body": "FYI Closing this as there really isn't much the roslyn team can do for this"
      }
    ]
  },
  {
    "number": 11763,
    "title": "ArgumentException if generated SyntaxTree is not parsed WithFeatures(\"replace\", \"true\")",
    "created_at": "2016-06-04T05:28:31Z",
    "closed_at": "2017-03-09T20:40:07Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Feature - Replace/Original"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11763",
    "body": "To enable the generators feature requires compiling with `csc -features:replace`. However if a generator adds source using `SourceGeneratorContext.AddCompilationUnit(name, tree)` without parsing the tree with the same option (without `WithFeatures(new[] { new KeyValuePair<string, string>(\"replace\", \"true\") })`), the compiler throws `System.ArgumentException: inconsistent syntax tree features`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11763/comments",
    "author": "cston",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-08-10T04:23:28Z",
        "body": "Generators should always use the underlying compilation's parse options. The exception is intended and expected.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2017-03-09T20:40:07Z",
        "body": "Closing based on discussion. "
      }
    ]
  },
  {
    "number": 11753,
    "title": "No Instructions on VS 2013 usage",
    "created_at": "2016-06-03T20:50:48Z",
    "closed_at": "2016-06-05T20:58:37Z",
    "labels": [
      "Question",
      "Area-Infrastructure",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11753",
    "body": "There are no instructions on how to setup Roslyn in VS 2013 even a link to static binaries would suffice\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11753/comments",
    "author": "Steven-Mark-Ford",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2016-06-03T22:22:24Z",
        "body": "Roslyn doesn't work on Visual Studio 2013. The minimum version of vs to build roslyn is Visual Studio 2015 Update 2\n"
      }
    ]
  },
  {
    "number": 11309,
    "title": "How to change the LangVersion used by the compiler?",
    "created_at": "2016-05-14T17:11:18Z",
    "closed_at": "2016-05-14T20:59:24Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11309",
    "body": "I'm work on a language feature for VB, which will be language version dependent. So I've update my version of the compiler to include a higher version, to use. Cheekily it is `VisualBasic15`\nModified the CommandLineParser to be aware of the is version.\n\nEverything appears to work When I run I run it in the new instance of VS\n\nUntil I try to use it in project.\n\nI've tried including `<LangVersion>15.0</LangVersion>` in the project definition.\n\n```\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\n    <ProjectGuid>{E063EB58-7A0F-41DB-B9C2-1C27D883CF68}</ProjectGuid>\n    <OutputType>Exe</OutputType>\n    <StartupObject>ConsoleApplication7.Module1</StartupObject>\n    <RootNamespace>ConsoleApplication7</RootNamespace>\n    <AssemblyName>ConsoleApplication7</AssemblyName>\n    <FileAlignment>512</FileAlignment>\n    <MyType>Console</MyType>\n    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\n    <LangVersion>15</LangVersion>\n  </PropertyGroup>\n```\n\nBut it uses the VB14.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11309/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-05-14T20:59:24Z",
        "body": "We do not support any new language versions at this time. Use a \"feature\" flag to control new features. See the existing code to see how that is done. When we support a new version of the language we'll promote the feature to the language version flag.\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-05-14T22:16:21Z",
        "body": "@gafter I could be targeting an older version, so the question still applies.\n"
      }
    ]
  },
  {
    "number": 11081,
    "title": "Local Functions Questions.",
    "created_at": "2016-05-05T03:16:57Z",
    "closed_at": "2016-05-05T18:53:40Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11081",
    "body": "Say we have the following method, which contains local functions.\n\n``` c#\n... preChecks<T..>( string! fs, T.. obj[] )\n{\n  const int framework_limit = 1_000_000;\n  var ix = 0;\n  var q = fs.length;\n\n  void parse_whitespace( string! fs, ref ix ) { while ( ix < q && fs[ix] == ' ' ) { ix++ }  }\n...\n```\n\n**Questions**\n- Is it valid to have variable / constants declared before the `local function`?\n  - Is it legal to intermingle them between `local functions`?\n- What happens if a `local function` has a parameter with the same identifier, as variable in an outer scope?\n- Is it possible to define a variable within `local function` with an identifier, as variable in an outer scope?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11081/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-05-05T18:53:15Z",
        "body": "This would simply be a syntax error on `string!`. There is no such type syntax.\n\nLocal function declarations are just statements and can be intermingled with other statements.\n\nThe rules for the reuse of names are the same as for lambdas.\n"
      }
    ]
  },
  {
    "number": 10243,
    "title": "[Question] Pattern matching all kinds of a generic class?",
    "created_at": "2016-04-01T05:15:17Z",
    "closed_at": "2016-04-01T15:01:19Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered",
      "Feature - Pattern Matching"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/10243",
    "body": "Basically, I want to replicate something like this, from F#:\n\n``` F#\ntype Result<'a> =\n| Success of 'a\n| Error of string\n\nlet print result = \n  match result with\n  | Error(err) -> err\n  | Success(x) -> match box x with // this line in particular\n                  | :? string as str -> str\n                  | :? int as i      -> i.ToString(\"N\")\n                  | _                -> (string x)\n```\n\nIgnoring for a moment there is no discriminated union support in the current \"15\" build, I got this far:\n\n``` C#\nabstract class Result { }\nabstract class Success : Result\n{\n    public static Result From<T>(T val) => new Success<T> { Result = val };\n}\n\nclass Success<T> : Success\n{\n    public T Result { get; set; }\n}\n\nclass Failure : Result\n{\n    public static Result From(string err) => new Failure { Message = err };\n    public string Message { get; set; }\n}\n```\n\nBut I can't figure out how to replicate that one line with the current C# pattern matching syntax. I cannot just simply do this:\n\n``` C#\nlet result = Result.From(25);\n\nif (result is Success<object>) { ... }\n```\n\nSince there needs to be a boxing operation that occurs _after_ the match to `Success`, and one cannot cast `Success<int>` to `Success<object>`. \n\nMaybe it's a generics problem, and that would make sense, since the F# code uses automatic generalization. However, I don't see any way to replicate the mechanics correctly in C# at any level. \n\nAt a rough translation:\n\n``` C#\nstatic string Print<T>(Result res) => res match (\n    case Success<T> succ : ((Object)succ.Result) match (\n        case string s : s\n        case int i: i.ToString(\"N\")\n        case var x: x.ToString()\n    )\n\n    case Failure f: f.Message\n);\n```\n\nThis works, but only if we know the type of what `Success` is, and we're right back to square one. -1 actually, since now we have to specify the type manually when calling the function.\n\nWill there be any way to pattern match against \"all\" kinds of a generic class, like the automatically generic `'a` and friends from F#? Or is this just not ever going to be possible in C# semantics without some kind of kludge, like:\n\n``` C#\nabstract class Success : Result\n{\n    public abstract object GetResult();\n    public static Result From<T>(T val) => new Success<T> { Result = val };\n}\n\nclass Success<T> : Success\n{\n    public T Result { get; set; }\n    public override object GetResult() => Result;\n}\n\nstatic string Print(Result res) => res match (\n    case Success succ : succ.GetResult() match (\n        case string s : s\n        case int i: i.ToString(\"N\")\n        case var x: x.ToString()\n    )\n\n    case Failure f: f.Message\n);\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/10243/comments",
    "author": "WreckedAvent",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-04-01T15:00:50Z",
        "body": "In your F# code, Result is generic. In your C# code, it isn't. As a consequence your F# code gets the right kind of result right from the start, but your C# code doesn't. Make Print generic on T and take a `Result<T>`.\n\nThe CLR doesn't have any way of efficiently (i.e. without resorting to reflection) doing the kind of matching you're asking about, which is why you can't do it without having a static type in either F# or C#.\n"
      },
      {
        "user": "WreckedAvent",
        "created_at": "2016-04-01T15:11:07Z",
        "body": "Hmm, that seems like it might work. The C# compiler should be able to infer generic of T in that case if Result is also generic on T. \n\nThat would move the problem up one further wherein one couldn't match any `Result` however, but that's probably acceptable for the use cases I'm imagining. \n\nThanks.\n"
      },
      {
        "user": "WreckedAvent",
        "created_at": "2016-04-01T16:13:14Z",
        "body": "Though slightly verbose and not usual for C#, that did work. Here's what I came up with, in case anyone else tries this:\n\n``` C#\npublic abstract class Result<T>\n{\n    internal Result() { }\n}\n\npublic sealed class Success<T> : Result<T>\n{\n    public T Result { get; set; }\n}\n\npublic sealed class Failure<T> : Result<T>\n{\n    public string Message { get; set; }\n}\n\npublic static class Result\n{\n    public static string GetValue<T>(this Result<T> res) => res match (\n        case Success<T> succ : (Object)succ.Result match (\n            case string s : s\n            case int i : i.ToString(\"N\")\n            case var x : x.ToString()\n        )\n\n        case Failure<T> f : $\"Error: {f.Message}\"\n    );\n\n    public static Result<R> Map<T, R>(this Result<T> r, Func<T, R> transform) => r match (\n        case Success<T> s : Success.From(transform(s.Result))\n        case Failure<T> f : Failure.From<R>(f.Message)\n    );\n}\n```\n\nSignature for `map` is a bloody ripper, but at least the actual implementation is quite simple.\n"
      }
    ]
  },
  {
    "number": 9792,
    "title": "Is there any publicly available way to reach the CSharpMetadataAsSourceService?",
    "created_at": "2016-03-16T12:40:35Z",
    "closed_at": "2016-04-12T15:35:54Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Concept-API"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/9792",
    "body": "This is a question, not an issue.\n\nI'm trying to figure out how to reach the `CSharpMetadataAsSourceService` class from non-Roslyn code but it seems like all the factories and interfaces around it are internal.\n\nIs this code publicly unreachable by design or is there a public facing class wrapping all of this somewhere?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/9792/comments",
    "author": "dee-see",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2016-04-07T17:29:44Z",
        "body": "Currently it's not exposed publicly.\n"
      }
    ]
  },
  {
    "number": 9397,
    "title": "Providing consistent behavior for Rename operation in custom files",
    "created_at": "2016-03-02T14:12:23Z",
    "closed_at": "2024-11-05T20:31:39Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/9397",
    "body": "Hi,\nI am working on Visual Studio 2015 extension.\nIs there any API that would let me use the renaming/refactoring dialog like in Code Editor, but inside my custom markup files?\nI know there is `Renamer` class for renaming symbols in roslyn workspace.\nBut I would like to make use of renaming In my custom markup files.\nSo I quess I need to rename symbols in my markup by myself, then use `Renamer` helper class on roslyn workspace.\nBut it would be nice if renaming behaved the same in markup as it does in Code editor.\n\nExample of **markup** i wish to use renaming tools in:\n\n``` html\n@viewmodel MyViewModel, MyAssembly\n<div>\n{{_this.MyPropety}}\n<div>\n```\n\n**Code** file:\n\n``` cs\npublic class MyViewModel\n{\n     public string MyProperty {get; set;}\n}\n```\n\nThe behaviour I want to reproduce in my markup file is:\n1. Whith cursor on MyPropety in markup file I hit Ctrl+R+R\n2. Renaming dialog appears\n3. I rename MyPropety to something else\n4. I commit the rename operation\n5. Here I would like to insert my own behaviour that would rename the symbols in my markup files and then rename it in the workspace. (I already have functionality that gives me resolved roslyn ISymbol for position inside my markup file in place.)\n\nI have read quite a bit of roslyn source but everything thought could use is internal.   \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/9397/comments",
    "author": "Mylan719",
    "comments": [
      {
        "user": "liviriniu",
        "created_at": "2024-03-08T01:22:08Z",
        "body": "This would be very very helpful for at least refactoring scenarios of large code scope / volume that involve markup files and their C# code-behind counterparts. Also would significantly ease tight development where you test & refactor as you go.\r\n\r\nRelevant in situations of highly coupled code files with markup files (by bindings)."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-05T20:31:39Z",
        "body": "Closing out as unplanned.  If this is needed, a real API proposal needs to be made, including likely a PoC that this is even possible."
      }
    ]
  },
  {
    "number": 9313,
    "title": "VB enum matching issues",
    "created_at": "2016-02-29T23:05:47Z",
    "closed_at": "2016-09-21T20:54:33Z",
    "labels": [
      "Question",
      "Language-VB",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/9313",
    "body": "Two errors with matching using enums (VS 2015 update 1)\n\n```\n    Public Enum e1\n        o1\n        o2\n    End Enum\n\n    Public Enum e2\n        o3\n        o4\n    End Enum\n\n    Public Sub s1(e1 As e1, p1 As String)\n    End Sub\n\n    Public Sub s1(s1 As String, p1 As String)\n    End Sub\n\n    Public Sub s2(e2 As e2, p2 As String)\n    End Sub\n\n    Public Sub test()\n        s1(e1.o1, 1) ' show error here. Should match to s1 with enum as first parameter, without errors\n        s2(e1.o1, \"\") ' no error hehe. Should be error because of using incorrect enum \n    End Sub\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/9313/comments",
    "author": "vbcodec",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2016-03-01T00:22:04Z",
        "body": "Both error with `Option Strict On`.\n\nSeems that with `s1` it fails because there are multiple implicit conversions that could be performed and it can't/won't automatically select any of them.\n\n```\nBC30519 Overload resolution failed because no accessible 's1' can be called without a narrowing conversion:\n    'Public Sub s1(e1 As Program.e1, p1 As String)': Argument matching parameter 'p1' narrows from 'Integer' to 'String'.\n    'Public Sub s1(s1 As String, p1 As String)': Argument matching parameter 's1' narrows from 'Program.e1' to 'String'.\n    'Public Sub s1(s1 As String, p1 As String)': Argument matching parameter 'p1' narrows from 'Integer' to 'String'.\n```\n\nAnd `s2` doesn't fail because, with `Option Strict` disabled, VB.NET allows for implicit conversion between enum types.\n"
      },
      {
        "user": "vbcodec",
        "created_at": "2016-03-01T21:02:20Z",
        "body": "@HaloFour \nBut these possible conversion should be limited only to second parameter, while first is stated explicitly.\nAs for second case, there should be implicit conversion from digits, numeric variables, strings, etc, but not from other enum, despite it can be easily interpreted as integer. Other enum have different meaning, and such calls are probably wrong design / logic./ typing\n"
      },
      {
        "user": "HaloFour",
        "created_at": "2016-03-01T21:30:22Z",
        "body": "@vbcodec\n\n> But these possible conversion should be limited only to second parameter, while first is stated explicitly.\n\nSeems that the overload resolution of the compiler disagrees with you and as long as you're willing to coerce some arguments that you're also willing to coerce them all.\n\n> As for second case, there should be implicit conversion from digits, numeric variables, strings, etc, but not from other enum, despite it can be easily interpreted as integer. Other enum have different meaning, and such calls are probably wrong design / logic./ typing\n\nPerhaps, but at the end of the day an `enum` is still just a number.\n\nThese issues are resolved by simply enabled `Option Strict On`, which in my opinion should be a requirement to be allowed to program in VB.NET at all.\n\nUnless either of these cases is a regression from a previous version of the compiler I doubt that anything will be done to change the behavior, especially in the second case where making the compiler \"more strict\" would be a breaking change.\n"
      },
      {
        "user": "miloush",
        "created_at": "2016-03-02T22:24:32Z",
        "body": "Also note that C# allows to unbox enum type into its underlying type or any other enum type (with the same underlying type), which was even explicitly stated in CLI specification until version 3. This looks consistent with that behaviour. \n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-03-06T15:33:40Z",
        "body": "I believe this behavior is by design as @HaloFour noted.  @AlekseyTs can you verify. \n"
      },
      {
        "user": "AlekseyTs",
        "created_at": "2016-09-21T20:54:33Z",
        "body": "Correct the behavior is by design. According to the language specification (section 8.9 Narrowing Conversions), there is a narrowing conversion **\"From an enumerated type to another enumerated type\"**. \n"
      }
    ]
  },
  {
    "number": 8583,
    "title": "[Question] How to open a project with the ProjectId",
    "created_at": "2016-02-11T01:54:59Z",
    "closed_at": "2020-03-14T18:08:41Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8583",
    "body": "Basically, I'm trying to get all references in a project including referenced project.  There is probably a better way to get information for all, but not sure.   I have some simple code to open a workspace and open/return a project.\n\n`\nusing (MSBuildWorkspace msBuildWorkspace = MSBuildWorkspace.Create())\n{\n    return await msBuildWorkspace.OpenProjectAsync(projectPath, cancellationToken);\n}\n`\n\nThen I can convert the references into Assemblies to get the info I need like name, version, etc.\n\n`foreach (var metadataReference in project.MetadataReferences)\n {\n     Assembly assembly = Assembly.LoadFrom(metadataReference.Display);\n}\n`\n\nSo now I'm trying to do something similar for referenced project, but don't know how.\n\n`foreach (var proRef in project.ProjectReferences)\n {\n     // TODO: Get info here\n}\n`\n\nAny thoughts on how to get this and do it a more appropriate way?  Any help is appreciated.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8583/comments",
    "author": "shaggygi",
    "comments": [
      {
        "user": "DustinCampbell",
        "created_at": "2016-02-11T17:42:11Z",
        "body": "@shaggygi -- what is it you're trying to accomplish? You should be able to use `Solution.GetProject(...)` with a ProjectId.\n"
      },
      {
        "user": "shaggygi",
        "created_at": "2016-02-11T18:01:31Z",
        "body": "I want to scan all my project files (csproj and vbproj) to see which ones reference a specific DLL.  This searches for DLL by name, version and location (file path).  Since I have many projects throughout many solution (sometimes with the same project added in multiple solutions), I am scanning each project file instead of opening each solution file, scanning its projects, etc.\n\nIf a project references a DLL by Add Reference in VS, I am able to open the project and check using the following:\n\n`foreach (var metadataReference in project.MetadataReferences)\n {\n Assembly assembly = Assembly.LoadFrom(metadataReference.Display);\n// Other code here to compare name, etc.\n }\n`\n\nSo my question would be... how to search for the DLL when the class project is added to solution and is referenced by project in other projects.  I was assuming I can do it by getting a project, create an Assembly object using similar code above with the project.ProjectReferences ProjectId, get the project and use project's OutputPath.  I'm thinking there might be a better way to search for these types of references... just don't know the best place to look in Roslyn APIs.\n\nI was looking for your suggestion on Solution.GetProject, but don't see using IntelliSense.  Is there a particular NuGet package?\n\nAs always, thanks @DustinCampbell for trying to help :smile: \n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-14T18:08:41Z",
        "body": "> So my question would be... how to search for the DLL when the class project is added to solution and is referenced by project in other projects. \r\n\r\nInsetad of `project.MetadataReferences`, use `project.ProjectReferences`.  With that you can find what other projects are referenced from your project.  You can then examine them to determine information about them (like what their assembly name is) and so on :)"
      }
    ]
  },
  {
    "number": 8163,
    "title": "Disable warning 'no Await in Async function\"",
    "created_at": "2016-01-25T21:33:43Z",
    "closed_at": "2016-05-10T16:53:57Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8163",
    "body": "I have base class with few virtual async functions, and derived classes where overrided function mostly do not use await. All of this creates long list with this warning. Think that no such warning should exist, because there is no way that something can go wrong - producing error. Eventually there should be third category - suggestions. You may change meaning of this warning, by movie it to suggestions, and display only if async function is called without Await inside some other async functions.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8163/comments",
    "author": "vbcodec",
    "comments": [
      {
        "user": "TKharaishvili",
        "created_at": "2016-01-25T22:23:02Z",
        "body": "@vbcodec I believe, you can override the virtual functions without using the `async` modifier in the overriding functions, just matching the method signature is sufficient.\n\nIt would look like this:\n\n``` C#\npublic class Parent\n{\n    public virtual async Task<string> Whatever()\n    {\n        await Task.Delay(3);\n        return \"Parent Method\";\n    }\n}\n\npublic class Child : Parent\n{\n    public override Task<string> Whatever()\n    {\n        return Task.FromResult(\"Child Method\");\n    }\n}\n```\n\nNo `async`modifier in the Child class, no warnings :)\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-01-25T23:39:23Z",
        "body": "You could disable the warning.\n\n``` vb\n#Disable Warning BC42356 ' This async method lacks 'Await' operators and so will run synchronously\n    Overridable Async Function Foo() As Task(Of Object)\n#Enable Warning BC42356 ' This async method lacks 'Await' operators and so will run synchronously\n```\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2016-05-10T16:53:57Z",
        "body": "You could also use the ruleset editor to change the warning level of this warning to an Info so that it just shows up in the messages tab of the error list (similar to your \"suggestions\" suggestion). \n"
      }
    ]
  },
  {
    "number": 8073,
    "title": "No blancs between parameters",
    "created_at": "2016-01-21T12:03:33Z",
    "closed_at": "2016-04-25T21:22:59Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8073",
    "body": "I generate code as in the following example:\n\n``` csharp\nvar constructorDeclaration1 = SyntaxFactory.ConstructorDeclaration(ClassName);\nvar parameter1 = SyntaxFactory.Parameter(default(SyntaxList<AttributeListSyntax>),\n                default(SyntaxTokenList),\n                SyntaxFactory.ParseTypeName(\"string\"),\n                SyntaxFactory.Identifier(\"message\"),\n                null);\nvar constructorDeclaration2 = constructorDeclaration1.AddParameterListParameters(parameter1);\nvar statement1 = SyntaxFactory.ParseStatement(\"System.Console.WriteLine(message);\");\nvar constructorDeclaration3 = constructorDeclaration2.AddBodyStatements(statement1);\n\nConsole.WriteLine(constructorDeclaration3.ToFullString());\n```\n\nI get the following result:\n\n```\nTestClass1(stringmessage){System.Console.WriteLine(message);}\n```\n\nMaybe it is as expected but it is annoying that there are no blancs in the parameter declaration. Is it a bug or by design for some reason?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8073/comments",
    "author": "GeertVL-zz",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-01-21T17:25:16Z",
        "body": "We don't insert trivia for you.\n\n@mattwar What is the right way to use the APIs so that trivia is inserted making the code nicely formatted?\n"
      },
      {
        "user": "axel-habermaier",
        "created_at": "2016-01-21T17:29:04Z",
        "body": "@GeertVL: Try calling `NormalizeWhitespace()` in `Microsoft.CodeAnalysis.SyntaxNodeExtensions` on the syntax node.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2016-01-21T19:06:09Z",
        "body": "Yes, node.NormalizeWhitespace() will give you a very specific whitespace formatting.  You can also use the Formatter API, with all its formatting options. If the constructed nodes are being used to perform a code fix or refactoring using those plug-in API's the formatter will be automatically applied to any changed regions of documents you modify, so you don't have to do anything.\n"
      }
    ]
  },
  {
    "number": 7928,
    "title": "How to change the Wiki",
    "created_at": "2016-01-13T11:44:17Z",
    "closed_at": "2016-01-13T19:19:36Z",
    "labels": [
      "Question",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7928",
    "body": "I found some errors in the code of a wiki page and some obsolete function calls that I want to replace. How do I create a pull request for the wiki pages?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7928/comments",
    "author": "GeertVL-zz",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2016-01-13T18:37:15Z",
        "body": "github does not support pull requests for wikis.  If you could file issues for the incorrect sections we can have a look and make the changes.\n"
      }
    ]
  },
  {
    "number": 7905,
    "title": "Isues calling function with Delegate",
    "created_at": "2016-01-12T18:24:05Z",
    "closed_at": "2016-01-12T20:05:40Z",
    "labels": [
      "Question",
      "Language-VB",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7905",
    "body": "I am trying to call a C# function or VB that wants a delegate (Action<CodeAction> addFix) from VB and getting an error.\n\n```\nPublic Overridable Async Function AddDocumentFixesAsync(ByVal document As Document, ByVal diagnostics As ImmutableArray(Of Diagnostic), ByVal addFix As Action(Of CodeAction), ByVal fixAllContext As FixAllContext) As Task\npublic async virtual Task AddDocumentFixesAsync(Document document, ImmutableArray<Diagnostic> diagnostics, Action<CodeAction> addFix, FixAllContext fixAllContext)\n\n```\n\nI have broken the parameters into small pieces\n\n```\n fixesBag(index) = New List(Of CodeAction)()\n Dim Fix As List(Of CodeAction) = AddressOf fixesBag(index).Add\n Me.AddDocumentFixesAsync(document, documentsAndDiagnosticsToFixMap(document), Fix, fixAllContext).Wait(fixAllContext.CancellationToken)\n```\n\nI get an Error \n\n```\nBC30581 'AddressOf' expression cannot be converted to 'List(Of CodeAction)' because 'List(Of CodeAction)' is not a delegate type\n```\n\nFrom C# the call just works\n\n```\nthis.AddDocumentFixesAsync(document, documentsAndDiagnosticsToFixMap[document], fixesBag[index].Add, fixAllContext).Wait(fixAllContext.CancellationToken);\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7905/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-01-12T20:05:40Z",
        "body": "The offending code is the line\n\n``` vb\n Dim Fix As List(Of CodeAction) = AddressOf fixesBag(index).Add\n```\n\nI think you meant to type the variable `Action(Of CodeAction)`, not `List(Of CodeAction)`.\n"
      }
    ]
  },
  {
    "number": 7879,
    "title": "How to get the Keywords using Roslyn",
    "created_at": "2016-01-11T13:12:08Z",
    "closed_at": "2016-01-11T17:32:53Z",
    "labels": [
      "Resolution-Duplicate",
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7879",
    "body": "I need a script editor that provides intellisense and squiggling (something like  DotNetpad )\n\nWith Recommender I am not able to get the \"keywords\" which was possible using ICompletionService which was public in earlier versions of Roslyn (Roslyn.Services.ICompletionProvider).\n\nCan you please let me know whether we have any thing similar to ICompletionService  in the latest Microsoft.CodeAnalysis version or any update on making \"ICompletionService\" public?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7879/comments",
    "author": "Vidhyakp",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-01-11T17:32:53Z",
        "body": "This is not currently possible, but issue #3538 is tracking that work.\n"
      }
    ]
  },
  {
    "number": 7852,
    "title": "An enumeration value defined to equal another causes the compiler to erroneously report a circular reference",
    "created_at": "2016-01-08T15:41:42Z",
    "closed_at": "2016-01-15T23:54:11Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7852",
    "body": "``` CSharp\nnamespace N {\n    /// <summary>The evaluation of the constant value for 'CS0110.Default' involves a circular definition</summary>\n    public enum CS0110 {\n        Default = Value1, // CS0110: <font color=\"red\">Default</font> = Value1,\n        Value1,\n        Value2\n    }\n    /// <summary>The switch statement contains multiple cases with the label value 'case CS0110.Value2:'</summary>\n    public static class CS0152 {\n        public static void Switch(CS0110 value) {\n            switch (value) {\n                case CS0110.Value1:\n                    break;\n                case CS0110.Value2: // CS0152: <font color=\"red\">case CS0110.Value2:</font>\n                    break;\n            }\n        }\n    }\n\n    /// <summary>Compiles happily</summary>\n    public enum NoCS0110 {\n        //Default = Value1,\n        Value1,\n        Value2\n    }\n    /// <summary>Compiles happily</summary>\n    public static class NoCS0152 {\n        public static void Switch(NoCS0110 value) {\n            switch (value) {\n                case NoCS0110.Value1:\n                    break;\n                case NoCS0110.Value2:\n                    break;\n            }\n        }\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7852/comments",
    "author": "ericwj",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-01-15T23:54:11Z",
        "body": "``` cs\n    public enum CS0110 {\n        Default = Value1, // CS0110: <font color=\"red\">Default</font> = Value1,\n        Value1,\n        Value2\n    }\n```\n\nAccording to the spec, below, this is the same as\n\n``` cs\n    public enum CS0110 {\n        Default = Value1,\n        Value1 = Default + 1,\n        Value2 = Value1 + 1\n    }\n```\n\n> ### 14.3 Enum members\n> \n> The associated value of an enum member is assigned either implicitly or explicitly. If the declaration of the enum member has a constant-expression initializer, the value of that constant expression, implicitly converted to the underlying type of the enum, is the associated value of the enum member. If the declaration of the enum member has no initializer, its associated value is set implicitly, as follows:\n> - If the enum member is the first enum member declared in the enum type, its associated value is zero.\n> - Otherwise, the associated value of the enum member is obtained by increasing the associated value of the textually preceding enum member by one. This increased value must be within the range of values that can be represented by the underlying type, otherwise a compile-time error occurs.\n> \n> ...\n> \n> **The associated value of an enum member may not, directly or indirectly, use the value of its own associated enum member.** ... \n\nSince this is a circular definition given your code, an error is required.\n"
      },
      {
        "user": "ericwj",
        "created_at": "2016-01-19T00:53:53Z",
        "body": "Hmm, sharp. Though it's about the only place in C# where declaration order is important. It got me puzzled for a while although the fix obviously is to define Default one line later. It is at least a bit alien for C#, isn't it?\n\nOne could say that `Value1` is not a constant expression at this point, it's undefined. That'd make for a better error message that'd be instantly obvious to fix, although it may make the compiler look more stupid than it is. Then for another version maybe one line extra in the spec can make this oddity go away? Just evaluate declarations using constant expressions using enumeration values from the same enumeration after all others got their value as described above.\n"
      }
    ]
  },
  {
    "number": 7729,
    "title": "\"ProjectReference\" for Analyzers?",
    "created_at": "2015-12-29T23:24:34Z",
    "closed_at": "2016-01-11T20:27:42Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7729",
    "body": "I'm in the situation where I want to apply an analyzer to a project of the **same** solution that analyzer is in. Project-file wise, is there something like a \"ProjectReference\" for analyzers, something like \n`<ProjectAnalyzer Include=\"..\\MyAnalyzer\\MyAnalyzer.csproj\" />`?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7729/comments",
    "author": "steffenloesch",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2016-01-06T17:44:00Z",
        "body": "No there's no such thing. The primary reason for that is that since analyzers are loaded in the VS process and the CLR doesn't let you unload assemblies, every time a build happens, VS would need to restarted for the new analyzer to take effect. This would reduce any utility a project reference might have and so we decided to not spend time implementing it. You can always add a file reference to the dll in the bin\\debug folder but you'll have the same headache of having to restart on every build. Ideally you have the analyzer in a separate \"toolset\" location which you can choose to update once in a while.\n"
      }
    ]
  },
  {
    "number": 7530,
    "title": "VisualBasic is now required for a C# solution...",
    "created_at": "2015-12-16T19:21:24Z",
    "closed_at": "2016-02-22T21:55:18Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Not Reproducible"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7530",
    "body": "Why is VisualBasic required now ? With 1.1.1, MsBuildWorkspace.Create fails if VB isn't there. Any reasons ?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7530/comments",
    "author": "philippe-lavoie",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-12-18T18:19:03Z",
        "body": "This is not supposed to be the case.  What exception stack are you getting?\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-12-18T18:52:46Z",
        "body": "I am not able to reproduce this.  I created a simple c# project that uses nuget to reference Microsoft.CodeAnalysis.CSharp.Workspaces package (and dependencies).  This does not include VB dlls.  I am able to create the MSBuildWorkspace and successfully open the same C# project.\n"
      },
      {
        "user": "philippe-lavoie",
        "created_at": "2015-12-21T15:25:36Z",
        "body": "Ok, you can close this (or perhaps start another issue ?)\n\nMy issue was that my sln file was corrupt after too many bad merges. It would open and compile fine in VS2013 or VS2015, but it asked for VB when opened with Roslyn and couldn't generate a Compilation unit (see my other bugs). So, my solution was to start a new sln and manually re-import all the project files to that new solution. After that it worked, It was very painfull since we have 70+ projects.\n"
      }
    ]
  },
  {
    "number": 7465,
    "title": "Is not instance of Class syntax",
    "created_at": "2015-12-14T10:54:25Z",
    "closed_at": "2015-12-14T15:50:32Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7465",
    "body": "Hello,\n\nI'm not sure if this place is a right place to ask such questions, but I will try..\n\nIs there a way to change/extend expressions like: !(a is SomeClass)\nto: a is not SomeClass\n\nI think it's more readable.\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7465/comments",
    "author": "omeshechkov",
    "comments": [
      {
        "user": "alrz",
        "created_at": "2015-12-14T11:33:44Z",
        "body": "I would prefer `!is` but I'm not sure if it adds much to be considered in the language.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-12-14T15:50:32Z",
        "body": "The simplest way is to change your programming language to VB.net.\n"
      }
    ]
  },
  {
    "number": 7393,
    "title": "char-based enums",
    "created_at": "2015-12-10T13:06:58Z",
    "closed_at": "2015-12-15T14:53:33Z",
    "labels": [
      "Question",
      "Discussion",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7393",
    "body": "> Every enumeration type has an underlying type, which can be any integral type except char.\n\nWhy not char as well? You can already cast `int` enum values to `char`, but every explicit cast is a potential code smell.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7393/comments",
    "author": "orthoxerox",
    "comments": [
      {
        "user": "svick",
        "created_at": "2015-12-10T20:44:41Z",
        "body": "What's the point? You can already have `enum`s with 16-bit underlying type (`ushort`).\n"
      },
      {
        "user": "orthoxerox",
        "created_at": "2015-12-10T21:05:35Z",
        "body": "@svick but then I have to cast its values to char every time I need to use them.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-12-15T01:40:53Z",
        "body": "@orthoxerox Enums are not implicitly convertible to their underlying type, so allowing char as an underlying type would not prevent you from having to cast its values to char every time you need to use one.\n"
      },
      {
        "user": "orthoxerox",
        "created_at": "2015-12-15T07:40:33Z",
        "body": "@gafter I really shouldn't post issues as soon as I think of them. `ushort`-backed enums are fine.\n"
      }
    ]
  },
  {
    "number": 7358,
    "title": "Generics usage in extensions methods",
    "created_at": "2015-12-09T07:25:31Z",
    "closed_at": "2015-12-09T22:15:08Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7358",
    "body": "Hi all!\n\nI encountered interesting issue within types handling in C#.\n\nImagine that we have 2 classes\n\n```\nclass Class1 { }\n\nclass Class2 { }\n```\n\nAnd then we write 2 different extension methods sets\n\n```\nstatic class TestExtensions\n{\n    public static T DoSomething<T>(this T x) where T : Class1 { return x; }\n}\n\nstatic class TestExtensions2\n{\n    public static T DoSomething<T>(this T x) where T : Class2   { return x; }\n}\n```\n\nNo compilation errors, no warnings.\nThen we try to use extension method with Class1 variable\n\n```\nstatic class Test\n{\n    static void Main()\n    {\n        var c1 = new Class1();\n// And here we are getting ambigous invocation compile-time error\n        c1.DoSomething(); \n    }\n}\n```\n\nWe got \"ambigous invocation\" but this call is type-safe since no constraint violations. i.e. if we reveal this call to direct static method invocation then we are not able to call TestExtensions2.DoSomething() for instance of type Class1 and vice versa.\n\nSo this kind of \"generics polymorphism\" seems not working.\n\nTherefore I have 2 questions:\n1. Is it compiler/language design bug or feature? So should it be fixed and where should I complain/do pull request? :)\n2. How should I rewrite my extension methods that actually should consume instance of specified type (and its inheritors) and return instance exactly of type supplied? I'm writing some fluent things.\n\nthanks!\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7358/comments",
    "author": "pavel-b-novikov",
    "comments": [
      {
        "user": "axel-habermaier",
        "created_at": "2015-12-09T07:35:13Z",
        "body": "Yes, that is unfortunate. An improvement for this and other overload resolution situations is considered in #250.\n"
      }
    ]
  },
  {
    "number": 7246,
    "title": "[Question] SyntaxKindFacts.cs max keyword length",
    "created_at": "2015-12-04T23:59:43Z",
    "closed_at": "2015-12-06T17:14:34Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7246",
    "body": "Hello!\n\nI'm trying to replace the C# keyword with another one (via SyntaxKindFacts.cs).\n\nIs it possible to remove the limit (10 symbols) for c# keywords?\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7246/comments",
    "author": "romanov",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-12-05T18:48:58Z",
        "body": "Try it and see what happens. I think the limit is arbitrary.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2015-12-06T17:14:34Z",
        "body": "Indeed this limit is arbitrary.  It exists in the compiler as an optimization. \n"
      }
    ]
  },
  {
    "number": 7118,
    "title": "C#: compile error when casting a constant with non-predefined typenames in unchecked expression",
    "created_at": "2015-11-30T19:32:40Z",
    "closed_at": "2015-12-01T01:01:27Z",
    "labels": [
      "Question",
      "Language-C#",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7118",
    "body": "Repro code:\n\n``` csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        var a1 = unchecked((byte)1);\n        var a2 = unchecked((byte)-1);\n        var b1 = unchecked((Byte)1);\n        var b2 = unchecked((Byte) - 1); // this line was formatted like this\n        //                  ^^^^\n        // CS0119: 'byte' is a type, which is not valid in the given context\n        var b3 = unchecked((Byte)(-1));\n     }\n}\n```\n\nIn this code, variable `b2` should be 255, but _only_ this definition causes compilation error CS0119.\n\nIn contrast to the `b2`,\n- the definition `a2`: use predefined typename, not a identifier\n- the definition `b1`: the operand `1` is in the value range of `byte` type\n- the definition `b3`: only parenthesize the operand `-1`\n\nthey cause no error. So I think this error is not due to violation of the language specification. It might be a bug of the compiler.\n- C# Compiler Version: 1.0.0.50618, bundled in the Visual Studio 2015 RTM.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7118/comments",
    "author": "takeshik",
    "comments": [
      {
        "user": "svick",
        "created_at": "2015-11-30T21:14:03Z",
        "body": "I agree that this is confusing, but as far as I can tell, it follows the specification. §7.7.6 Cast expressions of the C# 5 specification says:\n\n> The grammar for a _cast-expression_ leads to certain syntactic ambiguities. For example, the expression `(x)–y` could either be interpreted as a _cast-expression_ (a cast of `–y` to type `x`) or as an _additive-expression_ combined with a _parenthesized-expression_ (which computes the value `x – y`).\n> \n> To resolve _cast-expression_ ambiguities, the following rule exists: A sequence of one or more _token_s (§2.3.3) enclosed in parentheses is considered the start of a _cast-expression_ only if at least one of the following are true:\n> - The sequence of tokens is correct grammar for a _type_, but not for an _expression_.\n> - The sequence of tokens is correct grammar for a _type_, and the token immediately following the closing parentheses is the token “~”, the token “!”, the token “(”, an _identifier_ (§2.4.1), a _literal_ (§2.4.4), or any _keyword_ (§2.4.3) except `as` and `is`.\n> \n> The term “correct grammar” above means only that the sequence of tokens must conform to the particular grammatical production. It specifically does not consider the actual meaning of any constituent identifiers. For example, if `x` and `y` are identifiers, then `x.y` is correct grammar for a type, even if `x.y` doesn’t actually denote a type.\n> \n> From the disambiguation rule it follows that, if `x` and `y` are identifiers, `(x)y`, `(x)(y)`, and `(x)(-y)` are _cast-expression_s, but `(x)-y` is not, even if `x` identifies a type. However, if `x` is a keyword that identifies a predefined type (such as `int`), then all four forms are _cast-expression_s (because such a keyword could not possibly be an expression by itself).\n"
      }
    ]
  },
  {
    "number": 7096,
    "title": "Should this not be inferable?",
    "created_at": "2015-11-28T20:38:23Z",
    "closed_at": "2015-11-29T09:15:38Z",
    "labels": [
      "Question",
      "Area-Language Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7096",
    "body": "```\nusing System;\nclass p\n{\n    static T Baz<T>(T t) => t;\n    static Func<T, T> Get<T>() => Baz;\n    static void Ork<T>(Func<T, T> f)  {  }\n    static void Main() \n    {\n        Ork<string>(Get()); // cant resolve arg\n        Ork<string>(Baz); // this is fine\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7096/comments",
    "author": "leppie",
    "comments": [
      {
        "user": "HaloFour",
        "created_at": "2015-11-29T02:21:30Z",
        "body": "That would require #5429, C# doesn't infer generic type arguments based on the expected target type.  `Get` would need to accept an argument that was either of type `T` or of `Func<T>` which would be used by the compiler to infer the generic type arguments:\n\n``` cs\nstatic Func<T, T> Get<T>(T value) => Baz;\n...\nOrk<string>(Get(\"foo\"));\n```\n"
      },
      {
        "user": "leppie",
        "created_at": "2015-11-29T09:15:37Z",
        "body": "@HaloFour Same your linked issue. Closing.\n"
      }
    ]
  },
  {
    "number": 6825,
    "title": "Why doesn't MSBuildWorkspace support adding a project?",
    "created_at": "2015-11-17T16:20:37Z",
    "closed_at": "2015-11-19T21:40:23Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6825",
    "body": "I'm working with the workspaces API and wanted to use the MSBuildWorkspace but it doesn't appear that it supports adding a project. Is there any reason why it couldn't/shouldn't do this?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6825/comments",
    "author": "Giftednewt",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-11-19T20:57:11Z",
        "body": "It is not clear what msbuild project file would be used to represent an new project, as they typically contain more information than is represented in the roslyn project API, and include conditional nodes and target script references. When new projects are created in VS they are done via a template that sets up all the interesting bits. It would be technically possible to create a trivial project file that only contains the exact information needed to get back to an equivalent roslyn project, but that is likely not what a user would want or need for their solution.\n"
      }
    ]
  },
  {
    "number": 6818,
    "title": "Dynamically bound GetIndex operation doesn't pass lhs struct by ref",
    "created_at": "2015-11-17T05:43:02Z",
    "closed_at": "2015-12-17T21:57:14Z",
    "labels": [
      "Question",
      "Resolution-Won't Fix",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6818",
    "body": "Unlike dynamically bound `InvokeMember` call sites do. Repro shown below (also applies for the native compiler, so not a regression):\n\n``` csharp\nusing System;\n\nclass Repro\n{\n  static void Main()\n  {\n    Case1();\n    Case2();\n    Case3();\n    Case4(); // ERROR\n    Case5();\n  }\n\n  static void Case1()\n  {\n    Bar b1 = new Bar();\n    dynamic b2 = new Bar();\n\n    b1.X();\n    b2.X();\n\n    Console.WriteLine(b1.Value + \" == \" + ((Bar)b2).Value);\n  }\n\n  static void Case2()\n  {\n    Bar b1 = new Bar();\n    Bar b2 = new Bar();\n    int x1 = 0;\n    dynamic x2 = 0;\n\n    b1.X(x1);\n    b2.X(x2);\n\n    Console.WriteLine(b1.Value + \" == \" + b2.Value);\n  }\n\n  static void Case3()\n  {\n    Bar b1 = new Bar();\n    dynamic b2 = new Bar();\n\n    var i1 = b1[0];\n    var i2 = b2[0];\n\n    Console.WriteLine(b1.Value + \" == \" + ((Bar)b2).Value);\n  }\n\n  static void Case4()\n  {\n    Bar b1 = new Bar();\n    Bar b2 = new Bar();\n    int x1 = 0;\n    dynamic x2 = 0;\n\n    var i1 = b1[x1];\n    var i2 = b2[x2];\n\n    Console.WriteLine(b1.Value + \" == \" + b2.Value);\n  }\n\n  static void Case5()\n  {\n    Bar b1 = new Bar();\n    dynamic b2 = new Bar();\n\n    var i1 = b1.Y;\n    var i2 = b2.Y;\n\n    Console.WriteLine(b1.Value + \" == \" + ((Bar)b2).Value);\n  }\n\n  struct Bar\n  {\n    public int Value;\n\n    public void X()\n    {\n      Value = 42;\n    }\n\n    public void X(int x)\n    {\n      Value = 42;\n    }\n\n    public int this[int x]\n    {\n      get\n      {\n        Value = 42;\n        return 0;\n      }\n    }\n\n    public int Y\n    {\n      get\n      {\n        Value = 42;\n        return 0;\n      }\n    }\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6818/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "bartdesmet",
        "created_at": "2015-11-17T05:49:57Z",
        "body": "If this is deemed a bug indeed, the issue seems to be the lack of a call to `GetReceiverRefKind` in `MakeDynamicGetIndex` (unlike e.g. in `MakeDynamicSetIndex`) in `LoweredDynamicOperationFactory`.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2015-12-02T21:09:27Z",
        "body": "@VSadov, @gafter is this a bug?  \n"
      },
      {
        "user": "VSadov",
        "created_at": "2015-12-17T21:49:45Z",
        "body": "It is a bug, in theory, but I think it is the same way as it was emitted by the native compiler.\nChanging this behavior would be a breaking change now. \n"
      },
      {
        "user": "VSadov",
        "created_at": "2015-12-17T21:55:54Z",
        "body": "Yes. It seems to be a long standing bug that indexer receivers do not have byref semantics in dynamic.  That would affect mutating indexers in structs when used dynamically and it seems very uncommon scenario, so fixing it would have very limited benefits while there is a risk of compatibility breaks.\nThat, IMO, makes this Won'tFix\n"
      },
      {
        "user": "bartdesmet",
        "created_at": "2015-12-17T22:11:12Z",
        "body": "Ok, my expression tree nodes are bug compatible in that case :-). Thanks!\n"
      }
    ]
  },
  {
    "number": 6758,
    "title": "0b1100_0000, why not just b1100 0000?",
    "created_at": "2015-11-13T04:31:11Z",
    "closed_at": "2015-11-13T17:30:39Z",
    "labels": [
      "Question",
      "Discussion",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6758",
    "body": "Wouldn't it be better if compiler just used space as separator for number so we can read it easier as human beings? I think even prefixing 0 should be optional.\n\nDoes anyone think that b1100 0000 can be interpreted differently than 0b1100_0000 by anyone when reading source code?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6758/comments",
    "author": "krwq",
    "comments": [
      {
        "user": "orthoxerox",
        "created_at": "2015-11-13T06:56:11Z",
        "body": "The parser will have a much tougher job. \"Oh, an identifier `b1100` followed by a zero literal! What does it mean? Oh, great, now I have to check a special case where the identifier begins with a `b` and has only ones and zeroes, and the number is not just a zero, I must take its length into account! Oh, I wish that was the lexer's job!\"\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-11-13T13:07:52Z",
        "body": "Oh, it's tougher - let's just give up and don't do it.\n"
      },
      {
        "user": "SolalPirelli",
        "created_at": "2015-11-13T13:19:14Z",
        "body": "Making the `0` prefix optional would conflict with identifiers.\n"
      },
      {
        "user": "orthoxerox",
        "created_at": "2015-11-13T15:31:04Z",
        "body": "@krwq Just how many binary literals will your code contain? The biggest piece of code where I would have used long binary literals dealt with NaN-packing of values and there were under twenty constants altogether.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-11-13T17:30:39Z",
        "body": "To answer the original questions: we don't need a reason _not_ to do something, and no, it would not be better. We experimented with a few approaches and this felt best.\n"
      }
    ]
  },
  {
    "number": 6391,
    "title": "Roslyn Project.AddProjectReference() throws exception when the referenced project is loaded after the referencing project",
    "created_at": "2015-10-28T17:17:54Z",
    "closed_at": "2015-10-29T16:34:09Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Concept-API",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6391",
    "body": "Repro:\nMake sure both projects are loaded in Roslyn current solution, then call this API:\n        roslynProject.AddProjectReference(projectReference);\nIf the roslynProject is loaded  before the referenced project, then calling this API throws exception saying \"The project is not in the solution\" which is not correct.\n\nIf the roslynProject is loaded  after the referenced project, then calling this API works fine.\n\nExpected:\nProject.AddProjectReference() should just work regardless of the order.\n\nWorkaround:\nUsing Project.WithProjectReferences(projectReferences);\nThis API works fine whether the referenced project is loaded before or after the referencing project.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6391/comments",
    "author": "huizhonglong",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2015-10-28T17:26:34Z",
        "body": "What do you mean by \"if the roslynProject is loaded before the referenced project\"? How did you get referencedProject _without_ \"loading\" it?\n"
      },
      {
        "user": "huizhonglong",
        "created_at": "2015-10-28T17:29:01Z",
        "body": "Both projects are loaded before calling the API. It is just that if the roslynProject is loaded before the referenced project, it throws the exception. If I switch the order, it works fine, which is hard to find out.\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-10-28T17:35:56Z",
        "body": "Can you share a complete code snippet? And what type is roslynProject here? Microsoft.CodeAnalysis.Project?\n"
      },
      {
        "user": "huizhonglong",
        "created_at": "2015-10-28T17:40:06Z",
        "body": "Yes it is Microsoft.CodeAnalysis.Project\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-10-28T17:44:32Z",
        "body": "Ah: so Microsoft.CodeAnalysis.Project is a snapshot of the project within the solution _at the point you get the object_. So if you've grabbed the instance before you've loaded the other project in your workspace, the failure is expected. This is an immutable API -- once you get the Project instance nothing changes about it, and so a later loading of some project cannot affect that instance.\n\nThis is somewhat confusing though that AddProjectReference is enforcing existence, where WithProjectReferences allows you to get into the case where there isn't all of them. @mattwar is that expected?\n"
      }
    ]
  },
  {
    "number": 6315,
    "title": "Unit testing support for <include> documentation elements",
    "created_at": "2015-10-26T04:51:26Z",
    "closed_at": "2015-12-04T21:50:20Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6315",
    "body": "I'm having trouble writing a unit test that includes a documentation comment containing an `<include>` element. I tried using `AddAdditionalDocument` to add the included file to the workspace, and I also tried writing the file to disk. In both cases, the expanded documentation simply included a comment saying the `<include>` element could not be expanded. See sharwell/StyleCopAnalyzers@93749a8 for an example.\n\n:question: Does the `AdhocWorkspace` support resolving `<include>` elements in a documentation comment? If so, where do I place the included file such that it will be located?\n\n:memo: This is part of my work to resolve DotNetAnalyzers/StyleCopAnalyzers#1603.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6315/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2015-12-03T22:46:18Z",
        "body": "CC @jasonmalinowski as he knows `AdhockWorkspace` the best. \n"
      },
      {
        "user": "daveaglick",
        "created_at": "2015-12-03T22:49:43Z",
        "body": "If it helps, I was having this same problem and resolved it by supplying an `XmlReferenceResolver` to the compilation options. Failure to supply one results in the described behavior.\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-12-04T21:41:49Z",
        "body": "I believe @daveaglick's advice is correct: the compiler/workspace tries to abstract files, and so unless there's a resolver doing something the compiler just will skip them.\n"
      },
      {
        "user": "sharwell",
        "created_at": "2015-12-04T21:50:19Z",
        "body": "We successfully implemented unit tests for this functionality in DotNetAnalyzers/StyleCopAnalyzers#1898, based on @daveaglick's suggestions.\n"
      }
    ]
  },
  {
    "number": 6256,
    "title": "Elvis operator doesn't seem to work with value types",
    "created_at": "2015-10-23T00:23:47Z",
    "closed_at": "2015-10-23T05:04:28Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6256",
    "body": "For example, neither of these syntaxes work:\n\n1.) Example 1\n\n```\nvar array = new int[0];\nif (array?.length > 0) { // ...\n```\n\n2.) Example 2\n\n```\nvar array = new int[0];\nif (array?.any()) { // ...\n```\n\nIt would make sense that if an Elvis operator check failed (i.e. the object being checked was null), that it should just return default(T) for value type properties (this would give intuitive behavior for both of the scenarios listed above which should be pretty common for most of us).\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6256/comments",
    "author": "BrainSlugs83",
    "comments": [
      {
        "user": "svick",
        "created_at": "2015-10-23T00:58:01Z",
        "body": "This would be a breaking change, so I don't think doing this makes sense.\n"
      },
      {
        "user": "ufcpp",
        "created_at": "2015-10-23T01:06:23Z",
        "body": "1.\n\n``` cs\nvar array = new int[0];\nif (array?.length ?? 0 > 0) { // ...\n```\n\n2.\n\n``` cs\nvar array = new int[0];\nif (array?.any() ?? false) { // ...\n```\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-10-23T05:04:27Z",
        "body": "Works for me\n\n``` cs\n        var array = new int[1];\n        if (array?.Length > 0) { }\n        if (array?.Any() == true) { }\n```\n"
      }
    ]
  },
  {
    "number": 6229,
    "title": "Should Remove Suppression(s) be more aggressive in deleting pragma suppressions?",
    "created_at": "2015-10-21T22:54:44Z",
    "closed_at": "2015-10-26T19:58:22Z",
    "labels": [
      "Bug",
      "Question",
      "Resolution-Won't Fix",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6229",
    "body": "1. Create a C# project with below code:\n\n``` C#\n#pragma warning disable CC0065 // Remove trailing whitespace\nclass C\n{\n    // Global comment with trailing whitespace    \n}\n#pragma warning restore CC0065 // Remove trailing whitespace\n```\n1. Install the CodeCracker analyzer from nuget.org\n2. Open error list, change the filter for \"Suppression state\" column to also show suppressed issues.\n3. Select suppressed diagnostic CC0065 in error list -> Remove suppression(s)\n\n**Got**: We correctly un-suppress the given diagnostic and it becomes active now. However, the final code seems a bit cluttered - one may have expected just to see existing pragmas getting removed.\n\n``` C#\n#pragma warning disable CC0065 // Remove trailing whitespace\nclass C\n{\n#pragma warning restore CC0065 // Remove trailing whitespace\n    // Global comment with trailing whitespace    \n}\n#pragma warning disable CC0065 // Remove trailing whitespace\n#pragma warning restore CC0065 // Remove trailing whitespace\n```\n\n**Question:** Current implementation for Remove Suppression code fix tries to look for a pragma disable and enable on leading trivia of start token and trailing trivia of end token on the line containing the diagnostic. If we find both, then we just remove them and unsuppress the diagnostic.\nHowever, if we don't find such a pair, we assume that any pragma disable/enable pair suppressing this diagnostic instance is applied on a broader scope (which is true for this example as it is applied for the entire class definition). In this case we instead wrap the current diagnostic line with a pragma enable/disable pair to turn on the diagnostic just for this line.\nThis gets us the desired unsuppression, but leads to lot of cluttered pragmas in code (and the number keeps growing as you roundtrip between suppress/remove suppression).\n\nWe may want to consider being more aggressive here and instead look for any enclosing disable/enable pair (any number of lines apart) and try removing it? We may end up un-suppressing more diagnostics, but that is probably ok as user has option to then apply more fine grain suppressions around individual diagnostics.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6229/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2015-10-26T19:58:22Z",
        "body": "This behavior is less than ideal but if we had remove unused suppressins as a feature then this could get cleaned up with that fix. Won't fixing this bug for that reason.\n"
      }
    ]
  },
  {
    "number": 6225,
    "title": "Suppress active issues generates global suppressions for diagnostics at top level in files",
    "created_at": "2015-10-21T22:07:52Z",
    "closed_at": "2015-12-09T18:37:53Z",
    "labels": [
      "Bug",
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6225",
    "body": "1. Create a C# project with below code:\n   \n   ``` C#\n   \n   // Global comment with trailing whitespace    \n   ```\n2. Install the CodeCracker analyzer from nuget.org\n3. Build solution and verify diagnostic CC0065 in error list.\n4. Increase severity of CC0065 to a warning using the ruleset editor/solution explorer\n5. In the solution explorer click on the project -> Analyze -> Suppress active issues\n\n**Got**: We generate a global suppress message attribute with no target member symbol:\n\n``` C#\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Style\", \"CC0065:Remove trailing whitespace\", Justification = \"<Pending>\")]\n```\n\n**Question:** Above attribute does suppress the diagnostic correctly, but because it does not belong to any specific symbol, the suppression occurs across the entire project. Should we consider generating a pragma suppression for diagnostics at top level of documents?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6225/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2015-10-26T19:48:44Z",
        "body": "The behavior as it stands is worse than doing nothing because this turns off the rule entirely for the project and the point of baselining is to allow for new issues from this rule to be seen. We should probably just not add suppressions at all for such rules.\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2015-12-09T18:37:50Z",
        "body": "We've decided to keep the current behavior and revisit as we get feedback. If we have a different mechanism for scoping suppressions (like maybe attributes everywhere) then this may be doable.\n"
      }
    ]
  },
  {
    "number": 6068,
    "title": "Status/plan for support of NuGet packages (project.json) in Workspace API",
    "created_at": "2015-10-16T13:51:11Z",
    "closed_at": "2015-10-22T03:46:37Z",
    "labels": [
      "Resolution-Duplicate",
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6068",
    "body": "Hi,\ncan you please tell me what is the current status/future plans for support of parsing project.json files by Workspace API ? Are NuGet dependencies stored in project.json file resolved ? Is the API capable to tell which *.dlls are effectively referenced by a project through NuGet dependencies ?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6068/comments",
    "author": "pawel-kedzior-sw",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-10-22T03:46:37Z",
        "body": "There is no status or plan as of now.  Inside Visual Studio, these are added to the VisualStudioWorkspace using the existing shims.  In other hosts (for example OmniSharp) people have their own implementations of workspace that do support DNX more directly.\n\nSee also #3824, which I'm going to mark this a duplicate of.\n"
      }
    ]
  },
  {
    "number": 5819,
    "title": "How do i update roslyn for Visual Studio 2015",
    "created_at": "2015-10-09T12:04:37Z",
    "closed_at": "2015-10-15T23:11:51Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5819",
    "body": "Issue #2790 has been hitting me hard.\nHow do I build and install latest roslyn so that I can use it with Visual Studio 2015?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5819/comments",
    "author": "wanton7",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2015-10-15T23:11:51Z",
        "body": "@wanton7 right now it's not possible to reinstall Roslyn on top of Visual Studio.  There is a limitation in VS that is being addressed in update 1 that will enable us to do this.  \n\nShort term though you can just disable the compiler server so that it doesn't start up at all when building.  To do this add the following line to your csproj / vbproj file\n\n``` xml\n<UseSharedCompilation>false</UseSharedCompilation>\n```\n"
      },
      {
        "user": "flipchart",
        "created_at": "2016-07-20T05:28:11Z",
        "body": "@jaredpar Is this possible now? There are some issues (#12254 and #12530) which have been fixed in master that I would love to have as they are very frustrating for day-to-day work. Alternatively, when is the next VS update that includes these fixes expected?\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-07-20T14:04:04Z",
        "body": "@flipchart yes.  At this point you can clone this repo, run `Restore.cmd`, open Roslyn.sln and F5 the solution.  The resulting Visual Studio instance will reflect changes you make to the code base. \n"
      }
    ]
  },
  {
    "number": 5606,
    "title": "Is CS0273 no longer reported?",
    "created_at": "2015-10-01T09:53:45Z",
    "closed_at": "2015-10-01T12:26:08Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5606",
    "body": "in VS2013 code like:\n\n```\npublic int Property1 { get; public set; }\nprotected int Property2 { get; public set; }\ninternal int Property3 { get; public set; }\nprivate int Property4 { get; public set; }\n```\n\nresulted in error CS0273: The accessibility modifier of the '' accessor must be more restrictive than the property or indexer ''\n\nIn VS2015 such code compiles successfully. Is this intentional?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5606/comments",
    "author": "Przemyslaw-W",
    "comments": [
      {
        "user": "axel-habermaier",
        "created_at": "2015-10-01T11:40:13Z",
        "body": "Which version of Visual Studio are you using? I still get CS0273 when I try to compile your code with VS2015 RTM.\n"
      },
      {
        "user": "Przemyslaw-W",
        "created_at": "2015-10-01T12:26:08Z",
        "body": "my bad. I did not notice that the file was accidentally removed from project. All is ok. Sorry for wasting your time\n"
      }
    ]
  },
  {
    "number": 5482,
    "title": "Memory usage of roslyn",
    "created_at": "2015-09-28T14:50:08Z",
    "closed_at": "2015-12-29T18:18:26Z",
    "labels": [
      "Bug",
      "Question",
      "Area-Compilers",
      "Tenet-Performance"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5482",
    "body": "I'm using the following snippet to produce dll's from in-memory strings (representing C# files). \n\n```\nCSharpCompilation compilation = CSharpCompilation.Create(assemblyName,\n    syntaxTrees: trees,\n    references: references,\n    options: new CSharpCompilationOptions(\n      OutputKind.DynamicallyLinkedLibrary,\n      optimizationLevel: OptimizationLevel.Debug\n      )\n    );\n\n  EmitResult result = compilation.Emit(outputDllPath, pdbPath: $\"{Path.ChangeExtension(outputDllPath, \"pdb\")}\");\n```\n\nAfter this code has run, I use the memory profiler (the vs2015 one) to look at the heap. I see that lot's of Roslyn related files are sticking around (mainly objects from Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.*).\n\nIs there a way to prevent this? And should I try to prevent this, or is there caching involved that improves the speed of compiling? I've done some testing with doing the parsing and compiling in a separate appdomain for every dll. This helps in garbage collection, but it seems wrong.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5482/comments",
    "author": "overeemm",
    "comments": [
      {
        "user": "KevinH-MS",
        "created_at": "2015-12-01T05:09:59Z",
        "body": "I do not _believe_ there are any static caches in the compiler that would result in this behavior.\n\nIt seems most likely that your program is holding on to his “trees” object or the  “compilation” object that is getting created.  If you null those out after calling Emit, I would expect things to get GC’ed eventually.\n"
      },
      {
        "user": "overeemm",
        "created_at": "2015-12-02T20:30:36Z",
        "body": "Could be that it is indeed a problem in our code. We have moved to smaller assemblies (and thus allowing us to release objects faster), and that also seems to help with GC. Thanks for the clarification.\n"
      },
      {
        "user": "KevinH-MS",
        "created_at": "2015-12-29T18:18:26Z",
        "body": "Closing this issue per comments (assume this has been resolved satisfactorily)...if you have any new info that seems to imply a \"leak\" in Emit please re-activate.\n"
      }
    ]
  },
  {
    "number": 5350,
    "title": "Issue changes two items on the same \"line\" using Replace",
    "created_at": "2015-09-18T23:44:39Z",
    "closed_at": "2015-11-30T21:19:20Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5350",
    "body": "I am trying to move end of line comments to the previous line.\n\nOriginal:\n\n```\n Dim I as Integer = 1 ' Initialize 1\n```\n\nDesired\n\n```\n' Initialize 1\nDim I as Integer = 1\n```\n\nWith the line below the trailing trivia gets replaced but the Leading Trivia is unchanged\n\n```\n        Dim newRoot As SyntaxNode = root.ReplaceNode(node.WithTrailingTrivia, node.WithTrailingTrivia(Trailing)).ReplaceToken(FirstTokenOnLine, NewFirstToken)\n```\n\nWhen I try reversing the order of the Replace, the leading trivia is correct but the training trivia is unchanged.\n\n```\n        Dim newRoot As SyntaxNode = root.ReplaceToken(FirstTokenOnLine, NewFirstToken).ReplaceNode(node.WithTrailingTrivia, node.WithTrailingTrivia(Trailing))\n```\n\nI have also tried to do them sequentially but the second change is ignored with no errors and Result = True\n\n```\n        'Dim newRoot As SyntaxNode = root.ReplaceNode(node.WithTrailingTrivia, node.WithTrailingTrivia(Trailing))\n        Dim newRoot1 As SyntaxNode = newRoot .ReplaceToken(FirstTokenOnLine, NewFirstToken)\n        Dim Result As Boolean = newRoot.Equals(newRoot1)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5350/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "brettfo",
        "created_at": "2015-11-30T21:18:33Z",
        "body": "First, I'd like to apologize for us taking so long to get back to you on this; we should have been more proactive and will try to do so in the future.\n\nLooking at your sample code above it appears that you need to add a call to `.WithLeadingTrivia()` to re-add the comment that was originally stripped off.  Without seeing all of your code I can't say for certain, but you'll likely need something like this:\n\n``` VB\nDim comment = node.GetTrailingTrivia() ' this will contain the \"' Initialize I\" comment\nDim newStatement = node.WithTrailingTrivia().WithLeadingTrivia(comment) ' this strips off the comment and re-adds it as leading trivia\nDim newRoot As SyntaxNode = root.ReplaceNode(node, newStatement)\n```\n"
      }
    ]
  },
  {
    "number": 5337,
    "title": "disabling access modifier type checking in roslyn?",
    "created_at": "2015-09-18T18:50:35Z",
    "closed_at": "2015-12-02T15:47:57Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5337",
    "body": "Is it possible to disable access modifier type checking in roslyn?\n\nWill it fail at MSIL level if roslyn just passes it through? I know it can affect semantics of programs that use reflection, but if one doesn't it shouldn't matter right?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5337/comments",
    "author": "roterdam",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2015-12-02T15:47:57Z",
        "body": "At an API level accessibility can be ignored by specifying the `ignoreAccessibility` parameter.  This allows code to run binding and analysis as if everything was `public`.  \n\nThere is no way to run a full compilation with such a setting though.  If one did exist there are scenarios where it would fail at runtime in the CLR.  \n"
      }
    ]
  },
  {
    "number": 5190,
    "title": "Question: How to I modify a VB ForStatementSyntax",
    "created_at": "2015-09-12T09:15:10Z",
    "closed_at": "2015-11-17T19:53:48Z",
    "labels": [
      "help wanted",
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5190",
    "body": "I am trying to add the missing Type information, I am having trouble replacing the Control Variable with anything. I can't find a SyntaxFactory.ControlVariable. And it I try to use VariableDeclarator to replace the ControlVariable Node, I can't convert the original ControlVariable to a SeparatedSyntaxList(Of ModifiedIdentifierSyntax)., and I don't know if that will actually work.\n\nIf this is not the appropriate place to ask How To questions, where should this type of question be asked. I have scanned the Source but I can't find examples for anything like this.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5190/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "AnthonyDGreen",
        "created_at": "2015-11-17T19:53:48Z",
        "body": "@paul1956,\n\nSorry, I hadn't noticed this before. When you write this:\n\n``` VB.NET\nFor i = 1 To 10\nNext\n```\n\nThe way that's represented is that the 'i' is a reference to an implicitly declared local variable. It's not a declaration itself. Syntactically it has to be that way because if 'i' were a local variable, parameter, field (or anything really) in scope 'i' would bind to it, not create a new variable. For that reason, when there isn't an 'As' clause syntactically it's just an IdentifierNameSyntax. By convention IdentifierNames always represent a reference to a symbol, never a declaration.\n\nNow, when one writes:\n\n``` VB.NET\nFor i As Integer = 1 To 10\nNext\n```\n\nThe 'i As Integer' part is unambiguously a declaration and is represented by a VariableDeclarator node. This is the same node used in local variable and field declarations. It contains a list of modified identifiers because such statements could take the form of:\n\n``` VB.NET\nDim x, y, z As Integer\n```\n\nAnd even more convoluted:\n\n``` VB.NET\nDim x?, y(), z As Integer ' Declares three variables of type Integer?, Integer(), and Integer\n```\n\nThe ? and () modifiers on the base identifier token is why we have the ModifiedIdentifierSyntax node. ModifiedIdentifiers are always declarations and have no relation to the IdentifierNameSyntax. The only thing they share is an identifier token.\n\nSo to correctly convert from one to the other you'd write something like:\n\n``` VB.NET\nImports Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory\n\nDim oldControlVariable As IdentifierNameSyntax = forStatement.ControlVariable\nDim newControlVariable =\n        VariableDeclarator(\n            SingletonSeparatedList(ModifiedIdentifier(oldControlVariable.Identifier)),\n            SimpleAsClause(PredefinedType(Token(SyntaxKind.IntegerKeyword))),\n            initializer:=Nothing\n        )\n\nforStatement = forStatement.WithControlVariable(newControlVariable)\n```\n\nThat takes the original identifier content and inserts it in a new declaration.\n\nI doubt you've been blocked on this for two months but hopefully that provides some background to you and/or whomever might stumble on this thread later.\n\nRegards,\n\n**-ADG**\n"
      }
    ]
  },
  {
    "number": 5040,
    "title": "Is error BC30512 expected or is this a bug, recommend fix yields wrong result",
    "created_at": "2015-09-05T23:18:31Z",
    "closed_at": "2015-09-16T21:49:51Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5040",
    "body": "I get error BC30512  Option Strict On disallows implicit conversions from 'UnitTest19.ENdataType?' to 'UnitTest19.ENdataType'\n\nIf expected how do I declare 'ENdataType?\", the recommend CType fix produces the wrong value.\n\n``````\n<TestClass()> Public Class UnitTest19\n    Public Enum ENdataType\n        dtIDTYPE = 0\n        dtGUIDTYPE = 1\n        dtDATETIMETYPE = 5\n    End Enum\n    Private Class Test\n        Public Property Endata As ENdataType\n        Public Function returnEnData() As ENdataType\n            Return returnEnData\n        End Function\n    End Class\n    <TestMethod()> Public Sub T19_TestContracts()\n        Dim x As New Test\n        Dim y As ENdataType = ENdataType.dtDATETIMETYPE\n        ' y = 5\n        y = x?.Endata ' Error BC30512\n        y = CType((x?.Endata), ENdataType) ' Recommended Fix\n        ' y = 0 expected 5\n        y = ENdataType.dtDATETIMETYPE\n        y = CType((x?.returnEnData), ENdataType)\n        ' y = 0 expected 5\n    End Sub\nEnd Class```\n``````\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5040/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-09-06T05:35:40Z",
        "body": "Marking milestone 1.1 to answer the first question and/or redispatch the issue for the second question.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-09-06T05:51:46Z",
        "body": "@gafter from your answer the warning is wrong and it will be fixed in 1.1 or am I misunderstanding.\n\nIf I want the Ctype issue addressed I need to open another issue, correct?\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-09-06T05:56:54Z",
        "body": "What I mean is that we should answer whether the warning is wrong or not in the 1.1 timeframe. Essentially I am scheduling the question to be answered. Once we know the answer to that we can decide what needs to be done next.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-09-06T06:13:28Z",
        "body": "Thanks completely misunderstood. I assume you are tracking the BC30512 elsewhere so I will close this issue. If I need to open a separate issue on CType let me know. \n"
      },
      {
        "user": "gafter",
        "created_at": "2015-09-06T06:17:05Z",
        "body": "No, we are not tracking the question/issue about the diagnostic elsewhere. We are tracking it with _this_ issue.\n"
      },
      {
        "user": "AlekseyTs",
        "created_at": "2015-09-16T21:49:51Z",
        "body": "When I compile the code above with `Option Strict On`, I get the following error:\n\n```\nerror BC30512: Option Strict On disallows implicit conversions from 'UnitTest19.ENdataType?' to 'UnitTest19.ENdataType'.\n\n        y = x?.Endata ' Error BC30512\n            ~~~~~~~~~\n```\n\nThe error is correct, result type of `x?.Endata` is `ENdataType?`, which cannot be implicitly converted to `ENdataType` when `Option Strict On`. \n\nBehavior of CType is correct as well because `x.Endata` is never assigned an explicit value, so it stays equal to 0.\n\nI am not sure there is a value in using conditional access followed by CType in this scenario. Consider making `y` nullable, or stop using conditional access.\n"
      }
    ]
  },
  {
    "number": 4969,
    "title": "Roslyn Semantic Model for Static Constructors does not Match C# Language Spec",
    "created_at": "2015-09-03T07:26:44Z",
    "closed_at": "2015-09-03T16:36:31Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4969",
    "body": "## Abstract\n\nIt seems to me, that the semantic model of Roslyn and the ECMA-334 differ when it comes to static constructors.\nPlease clarify.\n## Roslyn and Static Constructors\n\nRoslyn seems to implicitly add a static constructor to a class containing static fields, even if no static constructor was defined in the textual representation of the program. Try the following example. We parse and analyse three classes, the class `OtherStruct` contains a static field but no static constructor. The class `StructWithCCtor` contains a static constructor.\n\n``` C#\nusing System;\nusing System.Linq;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\n\nnamespace RoslynTest\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var syntaxTree = CSharpSyntaxTree.ParseText(\n                @\"\npublic class SomeStruct\n{\n  public void MyMethod(object o) { }\n}\n\npublic class OtherStruct \n{ \n  public static readonly string Field = \" + \"\\\"Test\\\"\" + @\";\n\n  public void MyOtherMethod(object o) { }\n}\n\npublic class StructWithCCtor\n{\n  static StructWithCCtor() { }\n\n  public void YetAnotherMethod(object o) { }\n}\n\");\n\n            var asts = new[] {syntaxTree};\n            var compilation = CSharpCompilation.Create(\"MyCompilation\", asts, new MetadataReference[0]);\n\n            var model = compilation.GetSemanticModel(syntaxTree);\n\n            var allStructSymbols = syntaxTree.GetRoot()\n                .DescendantNodes()\n                .OfType<ClassDeclarationSyntax>()\n                .Select(x => model.GetDeclaredSymbol(x));\n\n            foreach (var symbol in allStructSymbols)\n            {\n                Console.WriteLine(\n                    $\"Class '{symbol.Name}' static constructor count = {symbol.StaticConstructors.Length}\");\n            }\n        }\n    }\n}\n```\n\nThe program outputs:\n\n> Class 'SomeStruct' static constructor count = 0\n> Class 'OtherStruct' static constructor count = 1\n> Class 'StructWithCCtor' static constructor count = 1\n\nThe static constructor for `OtherStruct` is unexpected, but one _could_ argue that adding an empty static constructor is a valid program transformation as it does not introduce different behaviour.\n## What is the Problem?\n\nECMA-334 §17.4.5.1 describes static field initialization:\n\n> If a static constructor (§17.11) exists in the class, execution of the static field initializers occurs immediately prior to executing that static constructor. Otherwise, the static field initializers are executed at an implementation-dependent time prior to the first use of a static field of that class.\n\nThat means it _does_ make a difference if we add an empty static constructor.\nTry the following example first in _Debug configuration_ and then in _Release configuration_. The Debug configuration outputs two initialisation lines---as expected. In the Release configuration some optimisation kicks in, and the \"implementation-dependent time\" can be noticed: it only outputs the line for `MyClassWithCCtor`.\n\n``` C#\nusing System;\n\nnamespace RoslynTest\n{\n    public class TracerClass\n    {\n        public TracerClass(string s)\n        {\n            Console.WriteLine($\"{s} was created\");\n        }\n    }\n\n    public class MyClass\n    {\n        public static readonly TracerClass X = new TracerClass(\"X in MyClass\");\n    }\n\n    public class MyClassWithCCtor\n    {\n        public static readonly TracerClass Y = new TracerClass(\"Y in MyClassWithCCtor\");\n\n        static MyClassWithCCtor() { }\n    }\n\n    public class TestProgram\n    {\n        public static void Main(string[] args)\n        {\n            var x = new MyClass();\n            var y = new MyClassWithCCtor();\n        } \n    }\n}\n```\n## The Actual Question\n\nIs the behaviour of Roslyn intended? If so, why does the _semantic_ model have different semantics than the language?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4969/comments",
    "author": "cptjazz",
    "comments": [
      {
        "user": "MrJul",
        "created_at": "2015-09-03T12:22:49Z",
        "body": "Fields initializers without an explicit static constructor _are_ compiled to a static constructor (and the class is marked with `beforefieldinit`, as you noted). So Roslyn is correct, and that's not the only symbol created by the compiler you'll find in the semantic model.\n\nIf you want to disambiguate between an user-written constructor and a compiler-generated one, use `IsImplicitlyDeclared`.\n\nThat said, the spec is respected: the input produces the correct output, I don't really see what an intermediate representation of the code has to do with the specification.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-09-03T16:00:08Z",
        "body": "@cptjazz Does @MrJul's response answer your question?\n"
      },
      {
        "user": "cptjazz",
        "created_at": "2015-09-03T16:36:29Z",
        "body": "Thank you for the response.\nI was not aware that Roslyn distinguishes between implicitly and explicitly implemented cctors.\nIt is now clear to me how this case is handled and I was able to get my code analyser right.\n\nThanks for the fast help!\n"
      }
    ]
  },
  {
    "number": 4937,
    "title": "StringInterpolationText.TextToken.ValueText remaining escaped curly braces.",
    "created_at": "2015-09-01T23:26:21Z",
    "closed_at": "2015-09-02T20:23:10Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4937",
    "body": "hello.\n\nI was expected SyntaxToken.ValueText to be unescaped value but StringInterpolationText.TextToken.(Value and ValueText) remaining escaped curly braces.\n\nIs this was intended work?\n\nI wrote a test below.\nThank you.\n\n``` csharp\nusing System;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Text;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace RoslynTest\n{\n    [TestClass]\n    public class RoslynTest\n    {\n        [TestMethod]\n        public void StringInterpolationText_TextToken_ValueText_ExpectedUnescapedValueButRemainingEscapedCurlyBraces()\n        {\n            var test = @\"\nclass A\n{\n    void Main()\n    {\n        var str = $\"\"\\\"\"{{}}\\\"\"\"\";\n    }\n}\";\n\n            var root = SyntaxFactory.ParseCompilationUnit(test);\n            var interpolatedString = root.FindNode(new TextSpan(test.IndexOf(\"$\"), 0)) as InterpolatedStringExpressionSyntax;\n            var interpolatedStringText = interpolatedString.Contents[0] as InterpolatedStringTextSyntax;\n            var token = interpolatedStringText.TextToken;\n\n            Assert.AreEqual(\"\\\\\\\"{{}}\\\\\\\"\", token.Text);\n            Assert.AreEqual(\"\\\"{{}}\\\"\", token.Value);\n            Assert.AreEqual(\"\\\"{{}}\\\"\", token.ValueText);\n            // expected.\n            //Assert.AreEqual(\"\\\"{}\\\"\", token.Value);\n            //Assert.AreEqual(\"\\\"{}\\\"\", token.ValueText);\n        }\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4937/comments",
    "author": "miya2000",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-09-02T20:23:10Z",
        "body": "They are not technically escaped, according to the draft language specification. They are just required to come in pairs except when used for an interpolation. The escaping occurs at runtime when the `string.Format` method is called.\n"
      },
      {
        "user": "miya2000",
        "created_at": "2015-09-02T23:21:54Z",
        "body": "Thank you for your reply.\nI've understood this is runtime work .\n"
      }
    ]
  },
  {
    "number": 4860,
    "title": "Making roslyn run in single-thread mode",
    "created_at": "2015-08-28T08:18:54Z",
    "closed_at": "2015-09-01T23:59:12Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "4 - In Review",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4860",
    "body": "Roslyn will sometimes use all my cores and disturb other process on my machine.\n\nIs it possible to use configuration to make Roslyn use only one thread?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4860/comments",
    "author": "roterdam",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-08-29T00:11:02Z",
        "body": "Are you asking about the compiler specifically?\n"
      },
      {
        "user": "roterdam",
        "created_at": "2015-08-29T00:33:38Z",
        "body": "Yes.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-08-29T05:48:01Z",
        "body": "Use the command-line flag `/parallel-` or `/p-`. I believe you can place that in the standard `.rsp` files where the compilers are installed.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-08-29T05:49:21Z",
        "body": "Please let me know whether or not that addresses your issue.\n"
      },
      {
        "user": "roterdam",
        "created_at": "2015-09-01T23:59:12Z",
        "body": "This does, thank you.\n"
      }
    ]
  },
  {
    "number": 4833,
    "title": "SymbolFinder.FindCallersAsync doesn't include references from libraries",
    "created_at": "2015-08-27T16:41:46Z",
    "closed_at": "2015-08-27T17:01:41Z",
    "labels": [
      "Question",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4833",
    "body": "Is there a way to find callers to a method that are in the projects in a solution AND their referenced libraries?  The problem I'm trying to solve requires to search referenced libraries as well as the projects within a solution.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4833/comments",
    "author": "GaryStonerock",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-08-27T17:01:40Z",
        "body": "Unforuntely, no.  Roslyn does not do any analysis of the IL within referenced libraries, it just imports the metadata.  Consider also, that at least for most of the Microsoft provided reference assemblies, there _is_ no implementation present in the copy passed to the compiler.\n"
      },
      {
        "user": "GaryStonerock",
        "created_at": "2015-08-27T17:01:52Z",
        "body": "I'm using v1.0.0 of the roslyn apis.  \n\nAlso worth noting, it appears SymbolFinder.FindImplementationsAsync includes referenced libraries.\n\nIs there a reason for the inconsistent behavior across the SymbolFinder api?  Not sure if this is a bug or if I should be using the API differently?\n"
      }
    ]
  },
  {
    "number": 4581,
    "title": "Invalid initializer member declarator",
    "created_at": "2015-08-16T02:52:01Z",
    "closed_at": "2015-08-23T13:27:47Z",
    "labels": [
      "Question",
      "Area-Language Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4581",
    "body": "I'm not quite sure if this was a valid syntax in the previous compiler, but I think I had used this syntax already in the past.\n\nThe question is if it was even in the previous compiler not allowed, why?\nIn the current Visual Studio 2015 compiler it is not valid!\n\n``` csharp\npublic class Program\n{\n    public void Main(string[] args)\n    {\n        var collection = new MyCollection\n        {\n            MyProperty = \"42\",\n\n            / / does not compile!!! (\"Invalid initializer member declarator\")\n            new MyItem\n            {\n                MyProperty = 42\n            }\n        };\n    }\n}\n\npublic class MyCollection\n    : IEnumerable<MyItem>\n{\n    public String MyProperty { get; set; }\n\n    public void Add(MyItem @myItem)\n    {\n    }\n\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        throw new NotImplementedException();\n    }\n\n    IEnumerator<MyItem> IEnumerable<MyItem>.GetEnumerator()\n    {\n        throw new NotImplementedException();\n    }\n}\n\npublic class MyItem\n{\n    public int MyProperty { get; set; }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4581/comments",
    "author": "biqas",
    "comments": [
      {
        "user": "svick",
        "created_at": "2015-08-16T09:56:16Z",
        "body": "I don't think it was ever allowed. If you look at §7.6.10 _The new operator_ of the C# 5 spec, the grammar is:\n\n<dl>\n<dt>object-creation-expression:</dt>\n<dd><code>new</code>   <em>type</em>   <code>(</code>   <em>argument-list</em><sub>opt</sub>   <code>)</code>   <em>object-or-collection-initializer</em><sub>opt</sub> </dd>\n<dd><code>new</code>   <em>type</em>   <em>object-or-collection-initializer</em></dd>\n<dt>object-or-collection-initializer:</dt>\n<dd><em>object-initializer</em></dd>\n<dd><em>collection-initializer</em></dd>\n</dl>\n\nSo you can use object initializer _or_ collection initializer, but not both at the same time.\n\nIf I were to guess why, I think it's because collections with settable properties are not common. Do you have a specific use case where this pattern makes sense?\n"
      },
      {
        "user": "biqas",
        "created_at": "2015-08-16T12:17:35Z",
        "body": "@svick \nMaybe the example was misleading, because I choose the name \"MyCollection\". Here the same example but modified. (I also looked up if I had used something similar in the past, and the case was I ended up to write for each relevant property a collection initializer and to distinguish them a wrapper class.)\n\n``` csharp\npublic class Program\n{\n    public void Main(string[] args)\n    {\n        var entityA = new EntityA\n        {\n            MyProperty = \"42\",\n\n            new EntityB\n            {\n                MyProperty = 42\n            },\n\n            new EntityB\n            {\n                MyProperty = 1\n            }\n        };\n    }\n}\n\npublic class EntityA\n    : IEnumerable<EntityB>\n{\n    public String MyProperty { get; set; }\n\n    private IList<EntityB> _EntityBRelations = new List<EntityB>();\n\n    public IEnumerable<EntityB> EntityBRelations\n    {\n        get { return this._EntityBRelations; }\n    }\n\n    public void Add(EntityB @myItem)\n    {\n        this._EntityBRelations.Add(@myItem);\n    }\n\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        throw new NotImplementedException();\n    }\n\n    IEnumerator<EntityB> IEnumerable<EntityB>.GetEnumerator()\n    {\n        throw new NotImplementedException();\n    }\n}\n\npublic class EntityB\n{\n    public int MyProperty { get; set; }\n}\n```\n"
      },
      {
        "user": "svick",
        "created_at": "2015-08-16T12:42:12Z",
        "body": "I think that example is still way too generic. Your code is still just a type that's both a collection and an entity, but it doesn't say anything about _why_ would you want to design it that way (instead of the more common design of entity that contains a collection, not being a collection itself).\n\n Could you give a specific example where you would use this? (Without any placeholders like `MyEntity` or `EntityA`).\n"
      },
      {
        "user": "biqas",
        "created_at": "2015-08-16T13:18:48Z",
        "body": "@svick \n\nIf this is helping you to answer the where question: EnityA => Person EntityB = Address.\n\n``` csharp\npublic class Program\n{\n    public void Main(string[] args)\n    {\n        var person = new Person\n        {\n            Name = \"Alice\",\n\n            new Address\n            {\n                Street = \"Some street\",\n                City   = \"Some city\"\n            },\n\n            new Address\n            {\n                Street = \"Some other street\",\n                City   = \"Some other city\"\n            }\n        };\n\n            // Of course it is only syntactic sugar,\n            // but I can not see any reason why the above should not be possible or limited\n            // only to object initializer or collection initializer?!\n        person = new Person\n        {\n            Name = \"Alice\"\n        };\n\n        person.Add(\n            new Address\n            {\n                Street = \"Some street\",\n                City   = \"Some city\"\n            });\n\n        person.Add(\n            new Address\n            {\n                Street = \"Some other street\",\n                City   = \"Some other city\"\n            });\n        }\n}\n\npublic class Person\n    : IEnumerable<Address>\n{\n    public String Name { get; set; }\n\n    private IList<Address> _Addresses = new List<Address>();\n\n    public IEnumerable<Address> Addresses\n        {\n        get { return this._Addresses; }\n    }\n\n    public void Add(Address @myItem)\n    {\n        this._Addresses.Add(@myItem);\n    }\n}\n\npublic class Address\n{\n    public String Street { get; set; }\n\n    public String City { get; set; }\n}\n```\n\nThe why question is it does not feel currently uniformed from a data flow perspective.\nYou wanted to create an instance and have all data given, but the creation process feels disconnected if you have to use in such cases method chaining/calls afterwards to create full initialized instance.\n\n``` csharp\nperson = new Person\n{\n    Name = \"Alice\"\n};\n\nperson.Add(\n    new Address\n    {\n        Street = \"Some street\",\n        City   = \"Some city\"\n    });\n\nperson.Add(\n    new Address\n    {\n        Street = \"Some other street\",\n        City   = \"Some other city\"\n    });\n```\n"
      },
      {
        "user": "svick",
        "created_at": "2015-08-16T15:44:55Z",
        "body": "That's exactly why I asked for a specific example: I don't think a person should be a collection of addresses. That's not a good design, and I don't see any reason for adding language features that only support bad design.\n"
      },
      {
        "user": "biqas",
        "created_at": "2015-08-16T17:50:33Z",
        "body": "Please first explain what you mean with bad design? And it has nothing to do with supporting design features which should backed into language!\n"
      },
      {
        "user": "svick",
        "created_at": "2015-08-16T19:26:03Z",
        "body": "You're modeling the real world, and in the real world, it's not that person _is_ a collection of addresses, instead, person _has_ a collection of addresses. For example `foreach (var address in person)` doesn't make much sense to me, but `foreach(var address in person.Addresses)` feels completely natural to me.\n\nOther points are about possible changes to the code: If a person also has a collection of phone numbers, will it also implement `IEnumerable<PhoneNumber>`? What if you want to separate postal addresses and billing addresses? You can't implement the same interface twice.\n\nOkay, those are some drawbacks. What are the advantages? Err, I don't see any (maybe you do?). Thus I conclude that it's a bad design.\n\nAnd if you want a feature included included in the language, you need to make a strong case for it, saying that it should be included is not enough.\n"
      },
      {
        "user": "biqas",
        "created_at": "2015-08-23T13:27:47Z",
        "body": "@svick \nAfter considering lot of code what I have written in the past and how the language (C#) is designed I'm now also convinced that mixing both (object-initializer and collection-initializer) wouldn't be a good idea.\n"
      }
    ]
  },
  {
    "number": 4377,
    "title": "Strange compilation error, cannot find attribute reference after applying code fix",
    "created_at": "2015-08-06T15:58:04Z",
    "closed_at": "2015-08-06T17:22:09Z",
    "labels": [
      "Question",
      "Concept-API",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4377",
    "body": "See the code below. What I'm trying to do is fairly simple. Have a code fix which adds an attribute if it's not there. This works fine when I use the non fully qualified name of the attribute, however if I do use the fully qualified name, I'm getting compilation errors. But strangely enough only a single one even when the fully qualified name is used twice. \n\nFor some reason the new attribute is not equivalent to the existing one even though they are equal as a string.\n\nAm I missing something?\n\nHere's the code, needs Roslyn references as well as to the old Composition dll in the GAC (but I'm getting the same results for Obsolete). I've duplicated some code from the template just to make it self-contained.\n\n``` CSharp\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Text;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;\n\nnamespace Test.CodeFixes\n{\n    [TestClass]\n    public class UnitTest1\n    {\n        internal static readonly MetadataReference CorlibReference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\n        internal static readonly MetadataReference SystemCoreReference = MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location);\n        internal static readonly MetadataReference CSharpSymbolsReference = MetadataReference.CreateFromFile(typeof(CSharpCompilation).Assembly.Location);\n        internal static readonly MetadataReference CodeAnalysisReference = MetadataReference.CreateFromFile(typeof(Compilation).Assembly.Location);\n\n        [TestMethod]\n        public void TestCompilationError()\n        {\n            var testCode = @\"\n\nusing System.ComponentModel.Composition;\n\n[System.ComponentModel.Composition.Export(typeof(System.String))]\n[Export(typeof(System.Single))]\npublic class TempClass\n{\n}\";\n\n            var project = CreateProject(testCode);\n\n            var document = project.Documents.Single();\n            CheckForCompilationErrors(project.GetCompilationAsync().Result);\n\n            var newDocument = AddAttributeAsyncFix(document, document.GetSyntaxRootAsync().Result.DescendantNodes().OfType<ClassDeclarationSyntax>().Single()).Result;\n            Console.WriteLine(@\"new code:\n\" + newDocument.GetTextAsync().Result);\n\n            CheckForCompilationErrors(newDocument.Project.GetCompilationAsync().Result);\n        }\n\n        private Project CreateProject(string testCode)\n        {\n            var TestProjectName = \"TestProject\";\n            var projectId = ProjectId.CreateNewId(TestProjectName);\n\n            var solution = new AdhocWorkspace()\n                .CurrentSolution\n                .AddProject(projectId, TestProjectName, TestProjectName, LanguageNames.CSharp)\n                .WithProjectCompilationOptions(projectId, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))\n                .AddMetadataReference(projectId, CorlibReference)\n                .AddMetadataReference(projectId, SystemCoreReference)\n                .AddMetadataReference(projectId, CSharpSymbolsReference)\n                .AddMetadataReference(projectId, CodeAnalysisReference)\n                .AddMetadataReferences(projectId, GetAdditionalReferences());\n\n\n            var documentId = DocumentId.CreateNewId(projectId);\n            solution = solution.AddDocument(documentId, \"test.cs\", SourceText.From(testCode));\n\n            var project = solution.GetProject(projectId);\n            return project;\n        }\n\n        private async Task<Document> AddAttributeAsyncFix(\n            Document document,\n            ClassDeclarationSyntax classDeclaration)\n        {\n            //Add [Export(typeof(TypeName))]\n            var root = await document.GetSyntaxRootAsync();\n\n            var typeofArgument = AttributeArgument(TypeOfExpression(ParseTypeName(\"System.Double\")));\n            var attributeSyntax = Attribute(IdentifierName(\"System.ComponentModel.Composition.Export\"), AttributeArgumentList().AddArguments(typeofArgument));\n            var attributeListSyntax = AttributeList(SeparatedList(new[] { attributeSyntax }));\n            var newClass = classDeclaration.AddAttributeLists(attributeListSyntax);\n            root = root.ReplaceNode(classDeclaration, newClass);\n\n            return document.WithSyntaxRoot(root);\n        }\n\n        private static void CheckForCompilationErrors(Compilation compilation)\n        {\n            var compilationDiagnositics = compilation.GetDiagnostics();\n            var errorDiagnostics = compilationDiagnositics.Where(x => x.Severity == DiagnosticSeverity.Error);\n            if (errorDiagnostics.Any())\n            {\n                Assert.Fail($@\"There are errors in the code to be analyzed. See below:\n{string.Join(\"\\r\\n\", errorDiagnostics.Select(x => x.GetMessage()))}\");\n            }\n        }\n\n        protected MetadataReference[] GetAdditionalReferences()\n        {\n            return new MetadataReference[]\n            {\n                MetadataReference.CreateFromFile(typeof(System.ComponentModel.Composition.ExportAttribute).Assembly.Location)\n            };\n        }\n    }\n}\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4377/comments",
    "author": "hvanbakel",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-08-06T17:22:09Z",
        "body": "You can't create an `IdentifierName` for `System.ComponentModel.Composition.Export`.  An identifier name can only represent a single identifier, not a dotted name.\n\nTry using `ParseName` instead of of `IdentifierName`\n"
      },
      {
        "user": "hvanbakel",
        "created_at": "2015-08-06T17:39:46Z",
        "body": "Works like a charm, thanks!\n"
      }
    ]
  },
  {
    "number": 4287,
    "title": "Representation of operator true invocation",
    "created_at": "2015-08-01T17:27:46Z",
    "closed_at": "2023-02-03T21:11:41Z",
    "labels": [
      "help wanted",
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4287",
    "body": "In this code:\n\n```\nclass C {\n    public static bool operator true(C c) { return false; }\n    public static bool operator false(C c) { return false; }\n\n    public void M() {\n        var c = new C();\n        if (c) { // <------------\n            int x = 0;\n        }\n    }\n}\n```\n\nIs the fact that the marked line invokes operator true somehow represented?\n- `SemanticModel.GetSymbolInfo(ifStatement).Symbol` is null\n- `SemanticModel.GetSymbolInfo(ifStatement.Condition).Symbol` is the LocalSymbol c\n- `SemanticModel.GetTypeInfo(ifStatement.Expression).ConvertedType` is `C`\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4287/comments",
    "author": "erik-kallen",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T21:11:41Z",
        "body": "IOperation should include this information.  That would be the recommended way to get this now."
      }
    ]
  },
  {
    "number": 4089,
    "title": "Is inline rename functionality can be used by languages other than Roslyn based?",
    "created_at": "2015-07-23T22:43:54Z",
    "closed_at": "2015-07-30T18:29:03Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-External"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4089",
    "body": "Is it possible to use inline rename in languages other than based on Roslyn?\nI mean is this Visual Studio SDK API or some Roslyn-specific feature?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4089/comments",
    "author": "xperiandri",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-07-24T18:05:15Z",
        "body": "It is currently a Roslyn-specific feature.\n"
      },
      {
        "user": "xperiandri",
        "created_at": "2015-07-24T18:16:55Z",
        "body": "So this UI when an identifier is highlighted with green background is done by Roslyn integration into Visual Studio and is not exposed via public API, isn't it?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-07-30T18:29:01Z",
        "body": "That is correct.  Tagging @markw-t from the editor team, as we've considered moving it to the VS Editor layer instead.\n"
      },
      {
        "user": "xperiandri",
        "created_at": "2015-07-30T19:37:14Z",
        "body": "@markw-t do you have something to add?\nWe want to use this in F# Power Tools to provide consistent experience across languages.\n"
      },
      {
        "user": "markw-t",
        "created_at": "2015-07-30T23:36:41Z",
        "body": "Not really; it'll be considered as a potential change for future releases, but we don't have concrete plans yet I'm afraid.\n"
      },
      {
        "user": "xperiandri",
        "created_at": "2015-07-30T23:42:25Z",
        "body": "It is a shame.\nSuch gaps reduce interest to F# within .NET community...\n\n\"Future releases\" mean VS vNext or VS 2015 Update X?\n"
      },
      {
        "user": "markw-t",
        "created_at": "2015-07-31T19:05:43Z",
        "body": "No concrete plans at all; I'm afraid I can't say when this might happen at this point.\n"
      }
    ]
  },
  {
    "number": 4074,
    "title": "Not found:Diagnostic with Code Fix (NuGet + VSIX) template",
    "created_at": "2015-07-23T09:34:57Z",
    "closed_at": "2015-07-23T14:13:13Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4074",
    "body": "With visual studio 2015 RC, I had used \"Diagnostic with Code Fix (NuGet + VSIX) template\" to create live code analyser where I could generate a nugget package as well as VSIX file.\n\nThe template is not available after the release of VS 2015 RTM. I have explicitly installed Roslyn SDK but still the template is not there in my Visual Studio 2015 RTM\n\nWhere can I get the similar template for visual studio 2015\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4074/comments",
    "author": "balubchand",
    "comments": [
      {
        "user": "bkoelman",
        "created_at": "2015-07-23T13:25:13Z",
        "body": "Maybe this helps? #4051\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-07-23T14:01:35Z",
        "body": "We've updated the template to indicate that it is only applicable with a Target Framework of .NET 4.5.2 or higher.  Take a look at the Target Framework dropdown at the top of the New Project dialog.\n"
      },
      {
        "user": "balubchand",
        "created_at": "2015-07-23T14:13:13Z",
        "body": "Thanks the framework change option helped\n"
      }
    ]
  },
  {
    "number": 4057,
    "title": "[Bug/Question] VS2015 RTM no longer finds dependencies of analyzer assemblies",
    "created_at": "2015-07-22T16:24:21Z",
    "closed_at": "2015-10-02T19:17:23Z",
    "labels": [
      "help wanted",
      "Question",
      "Area-Analyzers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4057",
    "body": "The following worked with all previous versions of VS2015, but no longer works with VS2015 RTM: I have an assembly A that contains various C# analyzers, referencing version 1.0.0 of the `Microsoft.CodeAnalysis.CSharp` nuget packages. It references assembly B that contains some supporting code. Both A and B lie at the same location on the disk, i.e., in the same directory. When I reference A as an analyzer assembly in some C# project, VS2015 RTM shows the following warning:\n\n`Warning   MissingAnalyzerReference    Analyzer assembly 'C:\\Users\\Axel\\Documents\\Visual Studio 2015\\Projects\\ClassLibrary4\\ClassLibrary1\\bin\\Debug\\ClassLibrary1.dll' depends on 'ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' but it was not found. Analyzers may not run correctly.    \n`\n\nConsequently, the analyzers in A are not working. Is that scenario no longer supported or is it a bug?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4057/comments",
    "author": "axel-habermaier",
    "comments": [
      {
        "user": "axel-habermaier",
        "created_at": "2015-07-22T16:32:25Z",
        "body": "A possible workaround seems to be to _additionally_ add assembly B as an analyzer reference, even though B does not contain any analyzers. Is that how it is supposed to work? If I do that, the problem goes away and my analyzers work correctly. However, it seems strange to me that this would be required as you usually don't have to explicitly reference transitive dependencies.\n"
      },
      {
        "user": "tmeschter",
        "created_at": "2015-07-22T18:56:09Z",
        "body": "@axel-habermaier That is how it is meant to work, yes. By requiring that dependencies be specified we can ensure that builds are consistent (that is, do not happen to depend on the order in which dependencies are loaded) and that we're really loading the dependencies specified (rather than a different copy of a library that just happens to have been loaded for some other purpose).\n"
      },
      {
        "user": "axel-habermaier",
        "created_at": "2015-07-23T05:37:56Z",
        "body": "@tmetscher: Thanks for the info. While it makes sense, the behavior is still surprising and inconsistent with how references normally work. I therefore suggest to rephrase the warning so that it gives a hint to a possible solution to the problem, something like:\n\n`Warning MissingAnalyzerReference Analyzer assembly 'C:\\Users\\Axel\\Documents\\Visual Studio 2015\\Projects\\ClassLibrary4\\ClassLibrary1\\bin\\Debug\\ClassLibrary1.dll' depends on 'ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' but it was not found. Analyzers may not run correctly until you explicitly add the required assemblies as analyzer references as well.`\n"
      }
    ]
  },
  {
    "number": 4038,
    "title": "Flag to allow stopping on analyzer/refactoring exceptions in debugger",
    "created_at": "2015-07-21T21:53:14Z",
    "closed_at": "2015-08-28T18:47:59Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4038",
    "body": "In VS 2015 RTM currently all unhandled exceptions thrown in analyzers/refactorings are catched to show the \"yellow error bars\" on editor's top. When debugging an analyzer with a separate VS instance there seems to be no chance to stop the debugger as soon as the exception occurs. But it used to work in RC and previous CTPs.\n\nWould it be possible to add a configuration flag or something similar to disable the catching behavior in this case? That would help a lot when trying to analyze unhandled exceptions in custom extensions.\n\nThank you very much.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4038/comments",
    "author": "Rpinski",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-07-22T23:41:26Z",
        "body": "You'll need to use the Exceptions tool window, and configure your debugger to break on all first chance exceptions, not just unhandled ones.\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2015-08-28T18:47:59Z",
        "body": "The yellow bar is a feature to not let errant fixers crash VS for end users and so enabling first chance exceptions is the right thing to do here. Since that option exists, the incremental value of adding a configuration flag specifically for this is small.\n"
      }
    ]
  },
  {
    "number": 3963,
    "title": "Roslyn JavaScript compiler",
    "created_at": "2015-07-15T17:53:47Z",
    "closed_at": "2015-07-16T23:01:58Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3963",
    "body": "Is there a Roslyn compiler for JavaScript? Or is there a plan to create one? I'm in the middle of a large ASP.NET project where the server will generate convoluted JS code on the fly, and I was wondering: it would be nice if I could build JS syntax trees, transform them with syntax tree rewriters, and then emit them as JS code. In the short term, I only need to generate code, so I don't really need a compiler, just the SyntaxNodes. I'm thinking about implementing it myself, but contributing to a project this big requires coding standards that only worth the time if there is substantial demand.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3963/comments",
    "author": "BalassaMarton",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-07-16T23:01:57Z",
        "body": "There are no such plans at this time.\n"
      },
      {
        "user": "listepo",
        "created_at": "2016-06-30T09:59:38Z",
        "body": "+1\n"
      }
    ]
  },
  {
    "number": 3960,
    "title": "Generate object creation expression",
    "created_at": "2015-07-15T10:40:30Z",
    "closed_at": "2015-07-16T08:16:10Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3960",
    "body": "Hi,\nBasically I am trying to generate `new System.DateTime(ticks)`\n\nHere is code I am using:\n\n```\nSyntaxFactory.ObjectCreationExpression(\n    SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(nameof(System)), SyntaxFactory.IdentifierName(nameof(DateTime))),\n    SyntaxFactory.ArgumentList().AddArguments(SyntaxFactory.Argument(SyntaxFactory.IdentifierName(\"ticks\"))),\n    null);\n```\n\nBut it generates `newSystem.DateTime(ticks)` - note missing space between `new` and `System`.\nNow, I know I can use different overload and provide my own new token with space in trailing trivia, but I think above should work too. Am I doing something wrong here?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3960/comments",
    "author": "Przemyslaw-W",
    "comments": [
      {
        "user": "bkoelman",
        "created_at": "2015-07-15T13:49:49Z",
        "body": "To get whitespace inserted, I believe you need to tag your new nodes for auto-formatting.\n\n``` csharp\nnewSyntaxNode = newSyntaxNode.WithAdditionalAnnotations(Formatter.Annotation);\n```\n\nThen, depending on your scenario (for example, if you are writing a code fix provider), VS runs the formatter over your code. If not, you can do that yourself, like this:\n\n``` csharp\nvar newRoot = root.ReplaceNode(method, newMethod);\nvar formattedRoot = Formatter.Format(newRoot, Formatter.Annotation, document.Project.Workspace);\n```\n"
      },
      {
        "user": "Przemyslaw-W",
        "created_at": "2015-07-16T08:16:10Z",
        "body": "That worked, thanks :)\n"
      }
    ]
  },
  {
    "number": 3938,
    "title": "Rename class name or namespace",
    "created_at": "2015-07-14T08:50:10Z",
    "closed_at": "2015-07-15T09:46:25Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3938",
    "body": "Hi,\n\nFrom example that I see, Renamer only work with SyntaxToken. Can Renamer be used to rename class or namespace like ReSharper does? I have this snippet but it does not work. Thanks\n\n```\n        var semanticModel = await document.GetSemanticModelAsync(cancellationToken);\n        ITypeSymbol typeSymbol = semanticModel.GetTypeInfo(identifierNameSyntax, cancellationToken).Type;\n        string thisNamespace = SyntaxNodeHelper.GetNamespaceName(document);\n        string className = typeSymbol.ToString();\n        string newName = className.Replace(typeSymbol.ContainingNamespace.ToString(), thisNamespace);\n        var originalSolution = document.Project.Solution;\n        var optionSet = originalSolution.Workspace.Options;\n        var newSolution = await Renamer.RenameSymbolAsync(document.Project.Solution, typeSymbol, newName, optionSet, cancellationToken).ConfigureAwait(false);\n        return newSolution;\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3938/comments",
    "author": "ndung",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2015-07-14T20:07:22Z",
        "body": "The Renamer cannot rename tokens, it accepts symbols and then renames all instances of that symbol across the solution.\n\nA few quick questions:\n\n``` C#\nstring newName = className.Replace(typeSymbol.ContainingNamespace.ToString(), thisNamespace);\n```\n\nIn the snippet above I assume that class name contains the same name as its containing namespace? Like this?\n\n``` C#\nnamespace My\n{\n    class MyClass\n}\n```\n\nand you want to rename the class to be whatever the value of thisNamespace is? So if it was \"ThisNamespace\" the result should be:\n\n``` C#\nnamespace My\n{\n    class ThisNamespaceClass\n}\n```\n\nOr is your goal to change the name of the namespace itself?\n"
      },
      {
        "user": "ndung",
        "created_at": "2015-07-14T21:01:44Z",
        "body": "Hi @jmarolf,\n\nI want to change the name of the namespace itself. The result should be\n\n```\n   namespace ThisNamespace\n   {\n        class MyClass\n   }\n```\n\nI thought I can do it by renaming the full class name.\n\nThanks.\n"
      },
      {
        "user": "jmarolf",
        "created_at": "2015-07-15T01:06:31Z",
        "body": "@ndung The symbol for the class and the symbol for the namespace are two separate things.  You can acquire the fully qualified name of a symbol including its containing namespace, but this is just a string. Modifying it does not cause anything to happen to the namespace itself.  Looks like you want to pass the namespace symbol to the Rename class like this:\n\n``` C#\nvar semanticModel = await document.GetSemanticModelAsync(cancellationToken);\nITypeSymbol typeSymbol = semanticModel.GetTypeInfo(identifierNameSyntax, cancellationToken).Type;\nstring thisNamespace = SyntaxNodeHelper.GetNamespaceName(document);\nvar namespaceSymbol = typeSymbol.ContainingNamespace;\nvar originalSolution = document.Project.Solution;\nvar optionSet = originalSolution.Workspace.Options;\nvar newSolution = await Renamer.RenameSymbolAsync(document.Project.Solution, namespaceSymbol , thisNamespace, optionSet, cancellationToken).ConfigureAwait(false);\nreturn newSolution;\n```\n\nThough it depends on the actual shape of the namespace.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-07-15T01:20:55Z",
        "body": "I suspect he just wants to put the class in a different namespace, and not rename all other occurrences of the original namespace.\n"
      },
      {
        "user": "jmarolf",
        "created_at": "2015-07-15T01:27:25Z",
        "body": "@mattwar good point.  @ndung  please let us know what the end goal is here.  Renamer.RenameSymbolAsync is going to rename every location in your solution that mentions that namespace.  If you just want to rename something in one place, you can replace the single node or token at that location.\n"
      },
      {
        "user": "ndung",
        "created_at": "2015-07-15T09:46:25Z",
        "body": "Hi @jmarolf, I want to rename all other occurrences of the original namespace as well, and your solution works. Thanks!\nThanks also to @mattwar \n"
      }
    ]
  },
  {
    "number": 3916,
    "title": "String Interpolation Question",
    "created_at": "2015-07-12T13:16:54Z",
    "closed_at": "2015-07-12T16:16:18Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3916",
    "body": "Hi,\n\nHow can I do such a simple thing like this, is it meant to work, is it working, can it work?\n\n```\n..\nstring welcome = \"\";\nif (lang==\"en\") { welcome = \"Hello, {name}. How are you?\"; }\nelse if (lang==\"es\") { welcome = \"Hola {name}. Como estas?\"; } \n..\nreturn welcome;\n```\n\nAnd somewhere else in the code I would simple request the string which could come from anywhere, e.g. database, ..\n\n```\npublic void Main()\n{\n  string intro = GiveMeIntro(\"en\");\n  string name = \"Vaclav\";\n  Console.WriteLine($intro);\n}\n```\n\nLet's do not assume that I can send the name here\n\n```\nstring intro = GiveMeIntro(\"en\", \"Vaclav\");\n```\n\nLet's assume that these are coming from database\n\n```\n01 intro en \"Hello, {name}. How are you?\"\n02 intro es \"Hola {name}. Como estas?\"\n```\n\nIf I am right, the old school way it would be working?\n\n```\n..\nstring welcome = \"\";\nif (lang==\"en\") { welcome = \"Hello, {0}. How are you?\"; }\nelse if (lang==\"es\") { welcome = \"Hola {0}. Como estas?\"; } \n..\nreturn welcome;\n```\n\n```\npublic void Main()\n{\n  string intro = GiveMeIntroOldWay(\"en\");\n  string name = \"Vaclav\";\n  Console.WriteLine(intro, name);\n}\n```\n\nIs there any way to make c# 6.0 to work that $ followed by string would interpolate that string? Any work around I am not aware of?\n\nIf that is not possible, don't you think that the new functionality lost a certain feature it could have?\n\nHope that all I wrote makes sense?\n\n**Update**: Just realized, that maybe it is for security reason as I could inject e.g this {DateTime.Now} or anything to such a string if it worked as I would like.\n\n```\n01 intro en \"Hello, {name}. How are you?\"\n02 intro es \"Hola {name}. Como estas?\"\n03 intro fr \"Hola {DateTime.Now}. Got ya?\"\n```\n\nThanks :)\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3916/comments",
    "author": "VaclavElias",
    "comments": [
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-07-12T14:52:05Z",
        "body": "Have you considered multiple argument in the format string?\n"
      },
      {
        "user": "VaclavElias",
        "created_at": "2015-07-12T15:00:12Z",
        "body": "Sure, one argument or multiple I would have the same query about this for c# experts and creators. I just demonstrated one argument :)\n"
      },
      {
        "user": "Bill-McC",
        "created_at": "2015-07-12T15:50:53Z",
        "body": "I doubt thus would be possible as such unless you are doing some on the fly lookup of local variables and parsing of resource strings for code expressions: such a thing would be relatively expensive. So instead of named placeholders you'd have to use {1} etc with string.format.  I guess you could have the resource strings use named placeholders, and at runtime do a replace of {name} with {1} etc.\n"
      },
      {
        "user": "Joe4evr",
        "created_at": "2015-07-12T15:52:18Z",
        "body": "You can't put a `$` in front of a string reference and \"magically\" make it an interpolated string. This is better solved by rewriting it more like this:\n\n``` C#\npublic string Greet(string lang, string name)\n{\n    if(lang == \"en\") return $\"Hello, {name}. How are you?\";\n    else if(lang == \"es\") return $\"Hola {name}. Como estas?\";\n    //etc.\n}\n```\n"
      },
      {
        "user": "VaclavElias",
        "created_at": "2015-07-12T15:58:51Z",
        "body": "Thank you Bill-McC and Joe4evr, both your suggestions would do it and I will stick with them. Thank you for your help. I agree, let's don't do magic :) and let's close this thread.\n"
      },
      {
        "user": "ufcpp",
        "created_at": "2015-07-12T16:25:55Z",
        "body": "``` cs\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Greet(\"en\")); // Hello, {0}. How are you?\n        Console.WriteLine(Greet(\"es\")); // Halo {0}. Como estas?\n    }\n\n    public static string Greet(string lang)\n    {\n        Func<string, FormattableString> f = name =>\n        {\n            if (lang == \"en\") return $\"Hello, {name}. How are you?\";\n            else if (lang == \"es\") return $\"Hola {name}. Como estas?\";\n            //etc.\n            return $\"{name}\";\n        };\n\n        return f(null).Format;\n    }\n    }\n}\n```\n"
      },
      {
        "user": "VaclavElias",
        "created_at": "2015-07-12T17:09:02Z",
        "body": "Thank you ufcpp :+1: I take this also as a very nice option! :)\n"
      }
    ]
  },
  {
    "number": 3882,
    "title": "Optimize away redundant field initializers",
    "created_at": "2015-07-09T17:06:00Z",
    "closed_at": "2015-08-13T06:16:37Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Not Reproducible"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3882",
    "body": "Code in the wild often has redundant field initializers:\n\n```\nclass C {\n    int x = 0;\n    public C() {\n    }\n}\n```\n\nSometimes this is written for bad reasons, sometimes this actually increases clarity (e.g. in the presence of many initialized fields).\n\nRoslyn should optimize this away. This should result in identical semantics.\n\nIn case you wonder: All JITs (x86, x64 and RyuJIT) do not optimize this away. Our .NET JITs are very poor at optimizing in general. Relying on that happening is probably not a good choice.\n\nThis optimization should work for instance fields and for static fields. As far as I can tell the readonly and volatile modifiers don't have any impact here.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3882/comments",
    "author": "GSPP",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2015-07-09T20:46:02Z",
        "body": "Roslyn already optimizes the code in your example. When optimizations are enabled the following IL is produced:\n\n```\n.method public hidebysig specialname rtspecialname instance void .ctor() cil managed\n{\n    .maxstack 8\n    L_0000: ldarg.0 \n    L_0001: call instance void [mscorlib]System.Object::.ctor()\n    L_0006: ret \n}\n```\n\nIt also optimizes static the initialization of static fields but it appears that in that case an empty static constructor is still generated:\n\n```\n.method private hidebysig specialname rtspecialname static void .cctor() cil managed\n{\n    .maxstack 8\n    L_0000: ret \n}\n```\n"
      },
      {
        "user": "GSPP",
        "created_at": "2015-07-09T21:04:46Z",
        "body": "Good! The try Roslyn online service apparently has Debug mode on or an old version. Or, I did something wrong.\n"
      },
      {
        "user": "Joe4evr",
        "created_at": "2015-07-10T06:52:38Z",
        "body": "Try Roslyn also has an option to switch between Debug and Release mode.\n"
      },
      {
        "user": "GSPP",
        "created_at": "2015-07-10T08:55:45Z",
        "body": "OK, I see it now. What's the process to close this issue? Am I supposed to do that?\n"
      },
      {
        "user": "mikedn",
        "created_at": "2015-07-10T10:21:25Z",
        "body": "I suggest you leave it open, perhaps someone from the Roslyn team can comment about the empty static constructor. I don't think it should be generated when all the static initializers are optimized away.\n"
      }
    ]
  },
  {
    "number": 3772,
    "title": "How can I get IdentifierNameSyntax from VariableDeclarationSyntax?",
    "created_at": "2015-07-01T12:49:11Z",
    "closed_at": "2015-07-14T08:54:38Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3772",
    "body": "Hi, I have question. How can I get IdentifierNameSyntax from VariableDeclarationSyntax? Because I want to get the Type from field declaration... Thank you.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3772/comments",
    "author": "ndung",
    "comments": [
      {
        "user": "hvanbakel",
        "created_at": "2015-07-01T15:58:04Z",
        "body": "You will need to call `GetTypeInfo` on your semantic model to get the type of (given node is of type `FieldDeclarationSyntax`):\nnode.Declaration.Type\n"
      },
      {
        "user": "ndung",
        "created_at": "2015-07-14T08:54:38Z",
        "body": "Thanks @hvanbakel \n"
      }
    ]
  },
  {
    "number": 3731,
    "title": "Read file ",
    "created_at": "2015-06-29T15:09:30Z",
    "closed_at": "2015-07-01T12:46:54Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3731",
    "body": "Hi guys, do you know how to load/read file in Roslyn Analyzer project? Because I cannot put file in Resources.resx...\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3731/comments",
    "author": "ndung",
    "comments": [
      {
        "user": "tmeschter",
        "created_at": "2015-06-30T17:13:30Z",
        "body": "@ndung Can you provide more details about this? What sort of information does the file contain?\n"
      },
      {
        "user": "ndung",
        "created_at": "2015-07-01T12:47:16Z",
        "body": "no problem.\n"
      }
    ]
  },
  {
    "number": 3727,
    "title": "What would be the best way to weave the IL of a production assembly to make it more testable but only within the unit test project",
    "created_at": "2015-06-29T05:20:43Z",
    "closed_at": "2015-07-21T21:42:06Z",
    "labels": [
      "Question",
      "Area-Infrastructure",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3727",
    "body": "I am looking for a tool that does something like this:\n- Make class methods, fields and properties virtual so that they can be easily mocked from from unit test code.\n- Do it such that original production assembly is not modified.   But only the version of the production assembly that's placed in the Unit Test project modified.\n\nThere are several add-ins for Fody that will do this, but they all require you to modify the original production assembly.   They're trying to solve a different problem which is to automatically make all methods virtual of a given class without marking such classes as virtual.   That's great, but that's not what I need because for my scenario, I would have no problem with marking those methods virtual.\n\nWhat I do need though not modify the production assembly at all that's within the production project.   But only modify the version of the assembly that gets placed into the unit test output folder as a referenced assembly.\n\nExample: I have a production library called Foo.dll, and a unit test project FooTest.dll and the project that creates FooTest.dll references the project that produces Foo.dll.   Next, Visual Studio, as part of it's build process, copies Foo.dll into the bin output folder of FooTest.dll so that the referenced DLL is in the same folder when the test executes.\n\nI want to ONLY modify the version of Foo.dll that gets copied into the FooTest project as part of the build step.   The original Foo.dll should remain the same.\n\nI looked at Fody to do this, but they told me it won't do that.   In fact, they don't think it's a good idea, which leads me to think that's probably the wrong tool for this job.\n\nI would like to be able to solve this problem because I think it would be really useful to have a general way of making production code testable _without_ having to modify it.   I realize some people will think this is a bad idea, but I believe it will have its uses.\n\nI'm curious if there's anything new in roslyn that will help me write such a tool.   I'm also considering using mono-cecil but I'm not sure if that's needed if I can assume I'm going to target roslyn+\n\nThank you.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3727/comments",
    "author": "kasajian",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-07-21T21:42:06Z",
        "body": "Roslyn provides nothing to help with this.\n"
      }
    ]
  },
  {
    "number": 3576,
    "title": "Inconsistent naming of With* and Replace* methods",
    "created_at": "2015-06-18T14:17:32Z",
    "closed_at": "2015-06-19T15:07:37Z",
    "labels": [
      "Question",
      "Concept-API",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3576",
    "body": "Names and semantics of Replace\\* and With\\* methods of the .NET  Compiler Platform APIs are inconsistent and misleading when talking to developers. Let me give some examples:\n\n```\n        Microsoft.CodeAnalysis.SyntaxNode node;\n```\n\nHere I have some Replace*-methods. Fine so far.\n\n```\n        node.ReplaceNode(...)\n        node.ReplaceNodes(...)\n        node.ReplaceSyntax(...)\n        node.ReplaceToken(...)\n        node.ReplaceTokens(...)\n        node.ReplaceTrivia(...)\n```\n\nHere we have some With\\* -methods that replaces elements. \nI would not expect a replacing action in a With\\* -method. 'With' means to add something.\nThis method should be named as a Replace\\* -method, too.\n\n```\n        // Creates a new node from this node with the leading trivia replaced.\n        node.WithLeadingTrivia(...)\n\n        // Creates a new node from this node with the trailing trivia replaced.\n        node.WithTrailingTrivia(...)\n```\n\nHere we have some Without\\* -methods. Fine so far as well. \n\n```\n        node.WithoutAnnotations(...)\n        node.WithoutLeadingTrivia(...)\n        node.WithoutTrailingTrivia(...)\n        node.WithoutTrivia(...)\n```\n\nBut why do these methods are Remove\\* -methods? \nI would expect them as Without\\* -methods. Or the Without\\* -methods above should be named as Remove\\* -methods. I would prefer Remove\\* -methods to reduce confusion when looking for those methods with IntelliSense. With\\* and Without\\* -methods are mixed up in the IntelliSense list. So there is a risk to take the wrong method.\n\n```\n        node.RemoveNode(...)\n        node.RemoveNodes(...)\n```\n\nNext inconsistency I was wondering about is in the Document class. When implementing a refactoring I have to respin the complete tree. So at the end when updating the document, I have to replace the root node of the syntax tree in the document. Again, the method I have to use is called WithSyntaxRoot.\nI would expect that this method is called something like \"ReplaceSyntaxRoot\" because With\\* -method should add something.\n\n```\n        Microsoft.CodeAnalysis.Document document;\n\n        // Creates a new instance of this document updated to have a syntax tree rooted by the specified syntax node.\n        document.WithSyntaxRoot(...)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3576/comments",
    "author": "robinsedlaczek",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-06-18T15:25:30Z",
        "body": "@mattwar  can you explain the rationale behind the naming here?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-06-18T15:55:47Z",
        "body": "My thought around the naming are\n\n`Remove` / `Replace` affects a Syntax node and changes the shape of the tree.\n`With` / `Without` relate to trivia, not changing the overall shape of the tree.\n"
      },
      {
        "user": "sharwell",
        "created_at": "2015-06-18T16:22:38Z",
        "body": "My observations:\n- `With` generally changes a property of the current node.\n- `Replace` changes a descendant of the current node, which is provided in the call.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-06-18T18:00:23Z",
        "body": "The general naming pattern for updating/changing a single property of a immutable object is the WithXXX pattern. This is both familiar to users of functional programming languages and a good indication to those unfamiliar to the immutable pattern that the API returns a new instance. However, when it came to naming patterns for collection element manipulation there was not a good pattern to follow, so we kept the existing mutable pattern names; Add, Remove, Replace, Insert, etc.  When adding the API's to manipulate tree descendants, this fit closer to the collection operations than the property ones, so Replace, Insert and Remove were used.\n"
      }
    ]
  },
  {
    "number": 3468,
    "title": "Question: Code generation",
    "created_at": "2015-06-12T07:46:50Z",
    "closed_at": "2015-06-12T16:12:27Z",
    "labels": [
      "Question",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3468",
    "body": "Are any parts of Roslyn's codebase auto-generated?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3468/comments",
    "author": "YaakovDavis",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-06-12T16:12:19Z",
        "body": "The syntax model and visitors, as well as the bound tree model are generated.  See src\\Tools\\Source for the source code used to generate things.\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-06-12T16:24:06Z",
        "body": "Thanks.\n"
      }
    ]
  },
  {
    "number": 3378,
    "title": "Question: Is there an exception filter spec?",
    "created_at": "2015-06-08T19:45:16Z",
    "closed_at": "2015-06-08T22:57:25Z",
    "labels": [
      "Question",
      "Language-C#",
      "Documentation",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3378",
    "body": "I was looking to implement exception filters in Microsoft's Razor language but it looks like there's yet to be an exception filter spec published. The syntax seems relatively simple but wanted to drive the added capability off of a spec to be certain.\n\nDoes there happen to be any in-progress specs available for exception filters? If not is there a guestimation for when they may become available?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3378/comments",
    "author": "NTaylorMullen",
    "comments": [
      {
        "user": "MadsTorgersen",
        "created_at": "2015-06-08T22:57:25Z",
        "body": "@NTaylorMullen The C# 6 language spec is still work in progress, but the exception filters happen to be done. I've emailed you a draft. The rest of the world will have to wait a bit (it's not in easily sharable state), but if someone has a need, let me know.\n"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2015-06-08T22:59:34Z",
        "body": "@MadsTorgersen you're awesome, thank you!\n"
      }
    ]
  },
  {
    "number": 3336,
    "title": "Formatter doesn't work with empty workspace",
    "created_at": "2015-06-05T05:52:05Z",
    "closed_at": "2015-06-05T19:11:55Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3336",
    "body": "The following doesn't format the code. Tried also with AdHocWrkspace to no avail.\n\n```\n        var tree = CSharpSyntaxTree.ParseText(code);\n        var ws = MSBuildWorkspace.Create();\n        var root = Formatter.Format(tree.GetRoot(), ws);\n        code = root.ToString();\n```\n\nTried with latest version (6df49c669c3364326830d6156f4ef95221b60c24).\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3336/comments",
    "author": "YaakovDavis",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-06-05T15:11:03Z",
        "body": "Can you give an example of source text this is not formatting?\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-06-05T15:40:40Z",
        "body": "```\n            namespace N1\n            {      \n\n            enum E { A, B, C }\n\n            public class C1\n            {\n            public   object P1 {get;set;}\n            }\n\n            }\n```\n\nThe indentations/spaces aren't corrected.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-06-05T17:22:28Z",
        "body": "I tried this and it succeeds:\n\n``` C#\n        [Fact]\n        public void FormatNode()\n        {\n            var code = @\"\n            namespace N1\n            {      \n\n            enum E { A, b, C }\n\n            public class C1\n            {\n            public   object P1 {get;set;}\n            }\n\n            }\n\";\n\n            var expected = @\"\nnamespace N1\n{\n\n    enum E { A, b, C }\n\n    public class C1\n    {\n        public object P1 { get; set; }\n    }\n\n}\n\";\n\n            var root = SyntaxFactory.ParseCompilationUnit(code);\n            var ws = new AdhocWorkspace();\n            var formattedRoot = Formatter.Format(root, ws);\n            var formattedText = formattedRoot.ToFullString();\n            Assert.Equal(expected, formattedText);\n        }\n```\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-06-05T18:07:54Z",
        "body": "Weird, I tried your snippet, and I get `NotSupportedException`:\n\n```\nAdditional information: The language 'C#' is not supported.\n```\n\nStack trace:\n`at Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetLanguageServices(String languageName) \n   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.GetLanguageServices(String languageName) \n   at Microsoft.CodeAnalysis.Formatting.Formatter.Format(SyntaxNode node, IEnumerable``1 spans, Workspace workspace, OptionSet options, IEnumerable``1 rules, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Formatting.Formatter.Format(SyntaxNode node, Workspace workspace, OptionSet options, CancellationToken cancellationToken)`\n\nPerhaps you have some uncommitted modifications which address this?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-06-05T19:08:35Z",
        "body": "You need to make sure that `Microsoft.CodeAnalysis.Workspaces.CSharp.dll` is deployed beside `Microsoft.CodeAnalysis.Workspaces.dll` so that it can find C# support.\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-06-05T19:11:55Z",
        "body": "Adding the dll solved the issue, thanks.\n"
      }
    ]
  },
  {
    "number": 3334,
    "title": "Can roslyn compile ios and android apps?",
    "created_at": "2015-06-05T03:04:54Z",
    "closed_at": "2017-01-24T03:57:52Z",
    "labels": [
      "Question",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3334",
    "body": "I hope roslyn itself has the ability to compile ios and android apps written by C# without Xamarin which is too expensive. If we can develop ios and android apps using C# and free version of Visual Studio under Windows OS, it would be very good. If Microsoft can't buy Xamarin and make it free, it should consider developing a similar software which is free to use.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3334/comments",
    "author": "ygc369",
    "comments": [
      {
        "user": "GeirGrusom",
        "created_at": "2015-06-05T13:16:38Z",
        "body": "It can compile binaries that can be used by Xamarin, but that is not enough. For Android Xamarin also builds Java libraries for .NET, and for iOS it compiles the Mono binary into native code for the iOS platform (as generating code in runtime is forbidden on iOS by the developer license).\n\nSo no, you can't build iOS or Android applications with Roslyn, because a C# compiler is not all you need.\n"
      },
      {
        "user": "ygc369",
        "created_at": "2015-10-16T02:14:51Z",
        "body": "@GeirGrusom \nCan Roslyn include all libraries needed by Android and IOS?\n"
      },
      {
        "user": "ygc369",
        "created_at": "2017-01-24T03:57:52Z",
        "body": "Sine Xamarin has been free, close this issue."
      }
    ]
  },
  {
    "number": 3213,
    "title": "Remove node fails in Visual Basic.",
    "created_at": "2015-06-01T12:36:24Z",
    "closed_at": "2015-06-02T06:26:25Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3213",
    "body": "Fails while generating preview. \n\n```\n<ExportCodeRefactoringProvider(LanguageNames.VisualBasic, Name:=NameOf(MoveClassToFileCodeRefactoringProvider)), [Shared]>\nFriend Class MoveClassToFileCodeRefactoringProvider\nInherits CodeRefactoringProvider\n\nPublic NotOverridable Overrides Async Function ComputeRefactoringsAsync(context As CodeRefactoringContext) As Task\n    ' TODO: Replace the following code with your own analysis, generating a CodeAction for each refactoring to offer\n\n    Dim root = Await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(False)\n\n    ' Find the node at the selection.\n    Dim node = root.FindNode(context.Span)\n\n    ' Only offer a refactoring if the selected node is a type statement node.\n    Dim typeDecl = TryCast(node, ClassStatementSyntax)\n    If typeDecl Is Nothing Then\n        Return\n    End If\n\n\n    Dim a2 = CodeAction.Create(\"Delete class\", Function(c) MoveClassToFile(context.Document, typeDecl, c))\n\n    ' Register this code action.\n    context.RegisterRefactoring(a2)\n\nEnd Function\n\nPrivate Async Function MoveClassToFile(document As Document, typeDecl As ClassStatementSyntax, cancellationToken As CancellationToken) As Task(Of Document)\n\n    Dim currentSyntaxTree = document.GetSyntaxTreeAsync().Result\n    Dim currentRoot = currentSyntaxTree.GetRootAsync().Result\n    Dim replacedRoot = currentRoot.RemoveNode(typeDecl, SyntaxRemoveOptions.KeepNoTrivia)\n\n    Dim ret = document.WithSyntaxRoot(replacedRoot)\n\n    Return ret\nEnd Function\n\n\nEnd Class\n```\n\nTested in c# by altering the Language to CSharp and the ClassStatementSyntax to ClassDeclarationSyntax, it's working fine :(\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3213/comments",
    "author": "petterek",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-06-02T00:55:18Z",
        "body": "VB is trickier to get right since there are both xxxStatementSyntax nodes and xxxBlockSyntax nodes. You cannot remove a xxxStatementSyntax node if it's part of a xxxBlockSyntax, you have to remove the xxxBlockSyntax node instead.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-06-02T01:12:33Z",
        "body": "You will need to remove the ClassBlockSyntax node that is the ClassStatementSyntax's parent.\n"
      },
      {
        "user": "petterek",
        "created_at": "2015-06-02T06:16:28Z",
        "body": "OK.. I will try it out\n"
      },
      {
        "user": "petterek",
        "created_at": "2015-06-02T06:26:23Z",
        "body": "That worked  :+1: Thank you very much\n"
      }
    ]
  },
  {
    "number": 3058,
    "title": "Symbol equality",
    "created_at": "2015-05-23T16:15:46Z",
    "closed_at": "2022-10-28T18:14:37Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3058",
    "body": "It seems like 2 logically equivalent symbols from 2 different compilations are considered \"unequal\" in the current API.\n\nThis makes it hard to rewrite existing code, since you don't have a reliable way of comparing symbols.\n\nSay I have syntax tree T1, containg a class C1.\nI calculated S1, the symbol for C1.\n\nNow I modified T1 to get T2, and I want to check all references to C1.\nI can't use S1 anymore, and would have to recalculate it.\n\nWhy doesn't the IEquatible implementation of ISymbol consider logical equivalence?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3058/comments",
    "author": "YaakovDavis",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-05-23T16:42:56Z",
        "body": "While its not the same thing as SymbolEquivalenceComparer, there is a few API's that could help.  \n\nIn Microsoft.CodeAnalysis.Editing there is a type SymbolEditor with the API GetCurrentSymbolAsync that will find you the current symbol in the latest solution that corresponds to a symbol from a previous solution.\n\nIf aren't working with solutions, you could also try the API that the SymbolEditor uses; DocumentationCommentId.  (It was made public recently.)  It uses this value to identify a symbol across solutions. You can use it to find the equivalent symbol in a new compilation, as long as names and distinguishing types have not been changed.\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-05-23T16:51:46Z",
        "body": "Thanks, I'll check out the mentioned APIs.\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-05-23T18:16:21Z",
        "body": "The types in the .Editing namespace do seem to help with tree editing.\n\nWhat's missing IMO is a ProjectEditor, that allows you to get the current Compilation after an edit.\n\nOr is there something like this already available? Is there an easy way to get a fresh compilation after editing a node in a single tree?\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-05-23T23:27:48Z",
        "body": "You can use the DocumentEditor to get the changed document, and then do doc.Project to get the project from it, or manually do it with doc.WithSyntaxRoot. Every time you update a document with new tree nodes, you get a new project and solution too.  From a new project you can always get the updated compilation with project.GetCompilationAsync.  Note, you can also bypass the doc & project altogether if you just want a new compilation, since you can call compilation.ReplaceSyntaxTree.\n"
      },
      {
        "user": "YaakovDavis",
        "created_at": "2015-05-23T23:38:22Z",
        "body": "Sure, but if I rely on docEditor.GetChangedDocument().Project I lose the ability to centralize the changes.\n\nSay I modified doc1, and then made another modification to doc2.\nCalling the above from both docs will yield 2 different projects.\n\nI thought the whole point of the *Editor classes is to \"simulate\" a mutable wrapper on top of immutable objects.\n\nSolutionEditor provides a nice solution (hmm..) at the solution level, where you can make unrelated changes to the doc, and them get a commutative updated solution.\n\nThe same approach would be much beneficial at the project level as well.\n\nI have in fact implemented one myself meanwhile, but the framework can better control the internals, providing a more complete solution. (For example, I don't want anyone changing a doc, without the ProjectEditor being aware of that, but my implementation can't achieve that).\n\nFWIW, Immutability seems be a non-trivial barrier for modifying existing code.\nIt's not clear (to a novice user) what actions are expensive, what can be cached, and how to keep different parts of the data in sync.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T18:14:37Z",
        "body": "This would need to go through an API proposal.  in general, the reason we don't just make things public is because it increases maintenance costs and locks down our ability to change things in teh future.  We can open things up, but we have a process that requests need to go through to make sure the appropriate people weigh in and the right API shape is determined and shipped.  "
      }
    ]
  },
  {
    "number": 2318,
    "title": "Making DeclaringSyntaxReferences a DeclaringSyntaxReference",
    "created_at": "2015-04-28T06:17:04Z",
    "closed_at": "2015-04-28T23:42:14Z",
    "labels": [
      "Question",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2318",
    "body": "Why is DeclaringSyntaxReferences an array of declaration references, could there be more than one declaration syntax reference?\n\nMaybe for partial classes and methods? But why are they declaring references?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2318/comments",
    "author": "roterdam",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2015-04-28T10:42:56Z",
        "body": "> could there be more than one declaration syntax reference?\n> Yes.  As you guessed, this happens when you have merged declarations that form one symbol.  Examples of this include partial classes, methods, and namespaces.\n> \n> But why are they declaring references\n\nThe way to read this is \"Declaring\" + \"SyntaxReferences\".  They are 'Declaring' in that they are the actual pieces of code that cause the Symbol to be 'Declared'.  And they are 'SyntaxReferences' in that they are a 'Reference to Syntax Element' as opposed to an actual `SyntaxNode` itself.  The reason for being a 'Reference to a Syntax Element' is so that they don't actually keep the entire SyntaxTree around.  Instead, they represent a way to _get back to_ the syntax element if necessary.\n"
      }
    ]
  },
  {
    "number": 2067,
    "title": "Is looking at ConvertedType of any of the two operands in a expression always valid?",
    "created_at": "2015-04-17T00:06:01Z",
    "closed_at": "2015-05-28T22:44:04Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2067",
    "body": "In cases where an implicit or explicit conversion takes place, you can get TypeInfo for both operands. From the way Roslyn APIs are exposed it seems like looking at either left or right operand and looking at the ConvertedType field is good enough to know the final type of an expression?\n\nDo I have this right?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2067/comments",
    "author": "feinbergcharters",
    "comments": [
      {
        "user": "AnthonyDGreen",
        "created_at": "2015-05-28T22:42:52Z",
        "body": "@halivingston,\n\nSorry for the slow reply. This isn't the case. Take this example:\n\n``` VB.NET\nModule Module1\n    Sub Main()\n        Dim left As New ADerived, right As New BDerived\n\n        Dim result As C = left + right\n    End Sub\nEnd Module\n\nClass A\n    Shared Operator +(left As A, right As B) As CDerived\n        Return New CDerived\n    End Operator\nEnd Class\n\nClass ADerived\n    Inherits A\nEnd Class\n\nClass B\nEnd Class\n\nClass BDerived\n    Inherits B\nEnd Class\n\nClass C\nEnd Class\n\nClass CDerived\n    Inherits C\nEnd Class\n```\n\nIn this example both operands are converted from their actual types to their base types, neither of which is the result type of the expression. And the expression itself is being converted to yet another type. Because when dealing with overloaded operators the result type needn't match either of the types of the operands checking the converted type of the binary expression itself is always necessary.\n\nRegards,\n\n**-ADG**\n"
      }
    ]
  },
  {
    "number": 1797,
    "title": "Readonly Auto-properties Issue",
    "created_at": "2015-04-04T15:29:17Z",
    "closed_at": "2015-04-06T20:55:35Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1797",
    "body": "I used readonly auto-properties in the following code\n\n```\nPublic ReadOnly Property Host As String = \"127.0.0.1\"\nPublic ReadOnly Property Port As Integer = 6379\nPublic Sub New()\n       Me.New(Host, Port)\nEnd Sub\nPublic Sub New(host As String, port As Integer)\n        Me.Host = host\n        Me.Port = port\n        'Code omitted for brevity\nEnd Sub\n```\n\ninstead of duplicate the code in both constructors, I called the parametrized constructor inside the the default one, but I got \"Implicit reference to object under construction is not valid when calling another constructor\".\nSo is this a bug?!!\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1797/comments",
    "author": "hishamco",
    "comments": [
      {
        "user": "Joe4evr",
        "created_at": "2015-04-04T22:41:29Z",
        "body": "It's not the ReadOnly that's the problem, but the fact that you can't call a constructor from another one of the same type (AFAIK). Instead, you can just omit the `Me.New(Host, Port)`, since the compiler will already insert the given values for those properties into the constructor, anyway.\n"
      },
      {
        "user": "hishamco",
        "created_at": "2015-04-05T05:34:50Z",
        "body": "@Joe4evr I'm agree with you but I want to call the parametrized constructor to execute the rest of the code instead of the duplication\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-04-06T20:55:35Z",
        "body": "@hishamco The initialization of `Host` and `Port` occur in the any final constructor (i.e. one that does not chain to another constructor of the current class). Since your first constructor is not a final constructor, it does not initialize `Host` and `Port`. Since you attempt to read `Host` and `Port` before chaining, you would be reading the default values of those fields (`Nothing` and `Nothing`). Since this is obviously not what you want, the compiler is doing you a favor by preventing you from doing it.\n\nYou're welcome ;)\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-04-06T20:56:32Z",
        "body": "@ljw1004 Can you please label this issue \"Verified\" if you agree with the resolution?\n"
      },
      {
        "user": "ljw1004",
        "created_at": "2015-04-06T21:11:21Z",
        "body": "The line in the spec is $9.3.1 Instance Constructors: \"Because Me is not considered to be constructed until after the call to a base class constructor, the parameters to a constructor invocation statement cannot reference Me, MyClass, or MyBase implicitly or explicitly\"\n"
      },
      {
        "user": "hishamco",
        "created_at": "2015-04-06T21:33:50Z",
        "body": "@gafter I never heard that the initialization will happen in the final constructor, thanks for clarification\n@ljw1004 I already seen such chain call in `StreamWriter`  but when I used the readonly auto properties the issue occurs\n\nAnyhow, I modify the code using optional paramters\n\n```\nPublic ReadOnly Property Host As String\nPublic ReadOnly Property Port As Integer\nPublic Sub New(optional host As String=\"127.0.0.1\", port As Integer=6379)\n        Me.Host = host\n        Me.Port = port\n        'Code omitted for brevity\nEnd Sub\n```\n\nplease let me know if there's improvement can I do in the previous snippet ..\n"
      },
      {
        "user": "ljw1004",
        "created_at": "2015-04-07T14:39:46Z",
        "body": "I can't see any improvement. I guess it's impossible to combine autoprop-initializers with a common constructor that uses those initializers. Your workaround looks decent.\n"
      }
    ]
  },
  {
    "number": 1606,
    "title": "Visual Studio 15 Community Edition",
    "created_at": "2015-03-26T07:09:52Z",
    "closed_at": "2015-03-26T15:19:09Z",
    "labels": [
      "Question",
      "Resolution-External",
      "Area-External",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1606",
    "body": "I know normally during the build up to a next version that the pre-releases are typically the Big Daddy of Visual Studio and not broken down by sku.  \n\nWith the open sourcing of Corefx, coreclr, Roslyn, msbuild and perhaps more, is there a chance of releasing a community edition pre release, on par with the 2013 community edition. \n\nEspecially as yall get closer to builds working in visual studio 2015.  \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1606/comments",
    "author": "dhusemann",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-03-26T15:19:09Z",
        "body": "The decision about what SKUs get released when is bigger than the Roslyn project :smile:  Unfortunately, we can't comment about plans here, but we'll pass along the feedback about it.\n\nOut of curiosity, what is the problem with using the Ultimate SKUs from the public CTPs?\n"
      },
      {
        "user": "dhusemann",
        "created_at": "2015-03-26T16:24:12Z",
        "body": "@Pilchie For me currently, it is Size of the package,  I recently moved and currently only option for high speed is Satellite. only get 15 gig a month,  at a relatively slow 10mbs. then it drops to around 150kbs. So the smaller the package is the better.   \n"
      }
    ]
  },
  {
    "number": 1585,
    "title": "nameof expression with local context + semantic checks",
    "created_at": "2015-03-25T22:28:31Z",
    "closed_at": "2015-11-20T16:50:52Z",
    "labels": [
      "Question",
      "Area-Language Design",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1585",
    "body": "``` c#\nusing System;\n\npublic class Foo {\n    public Foo SetOnly { set { } }\n    public string S => nameof(this.SetOnly.SetOnly);\n}\n```\n\nProduces compiler error:\n\n> CS0154: The property or indexer 'Foo.SetOnly' cannot be used in this context because it lacks the get accessor\n\nBut there is no actual read usage here. Can you please clarify how `nameof` should work in cases like this?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1585/comments",
    "author": "controlflow",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-11-20T16:50:45Z",
        "body": "We require the expression to be semantically valid, only suppressing the instance/static check on the last dot.\n"
      }
    ]
  },
  {
    "number": 1559,
    "title": "Warning waves",
    "created_at": "2015-03-25T04:56:56Z",
    "closed_at": "2015-03-25T20:15:13Z",
    "labels": [
      "Resolution-Duplicate",
      "Question",
      "Area-Analyzers",
      "Area-Language Design",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1559",
    "body": "Has the \"warning waves\" feature been discussed in the open yet? There have been multiple references to it in this repo, but I can't find any official information on it. Has the community had the opportunity to offer feedback on the proposed design?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1559/comments",
    "author": "eatdrinksleepcode",
    "comments": [
      {
        "user": "WolfieWerewolf",
        "created_at": "2015-03-25T15:14:09Z",
        "body": "Hi Guys,\n\nI’ve been following this thread with enthusiasm; the work you guys do amazes me.  I have a question though and hoped one of you kind people could shed some light.  I’m running the latest CTP and working with a standard C# console app project; no special build tools, the standard template.  I’m using Roslyn to dynamically compile an assembly as follows:\n\n//Roslyn Test\n            SyntaxTree tree1 = CSharpSyntaxTree.ParseText(swSciTeas[0]);\n            SyntaxTree tree2 = CSharpSyntaxTree.ParseText(swSciTeas[1]);\n            var compilation = CSharpCompilation.Create(\"SkyNetBars\",\n                options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary),\n                     syntaxTrees: new[] { tree1, tree2 },\n                     references: new[] {\n                            MetadataReference.CreateFromAssembly(typeof(object).Assembly),\n                            MetadataReference.CreateFromAssembly(typeof(TeaTime.Time).Assembly),\n                            MetadataReference.CreateFromAssembly(typeof(System.Linq.Enumerable).Assembly),\n                            MetadataReference.CreateFromAssembly(typeof(TeaFile).Assembly),\n                            MetadataReference.CreateFromAssembly(typeof(PriceSeries).Assembly),\n                            MetadataReference.CreateFromAssembly(typeof(PriceBar).Assembly)\n                            });\n\n```\n        using (var memStream = new MemoryStream())\n        {\n            using (var pdbStream = new MemoryStream())\n            {\n                var emitresult = compilation.Emit(peStream: memStream, pdbStream: pdbStream);\n                string compilationDiagnostics = string.Join(Environment.NewLine, from diagnostic in emitresult.Diagnostics\n                                                                                 select diagnostic.GetMessage());\n                compilationStopWatch.Stop();\n                Console.WriteLine(\"Stage 2: Compilation in: \" + compilationStopWatch.Elapsed.ToString() + Environment.NewLine);\n                Console.WriteLine(\"Stage 2: Compilation Diagnostics:\" + Environment.NewLine);\n                Console.WriteLine(\"--------------------------------------------------------\" + Environment.NewLine);\n                Console.WriteLine(compilationDiagnostics);\n                Console.WriteLine(\"--------------------------------------------------------\" + Environment.NewLine);\n\n                Assembly SkyNetBars = Assembly.Load(memStream.GetBuffer(), pdbStream.GetBuffer());\n                //Original Working & Tested\n                Type sciTeaType = SkyNetBars.GetType(\"SkyNet.Bars.SciTea\");\n                object sciTeaInstance = Activator.CreateInstance(sciTeaType, new object[] { _TicksProperty, _TrendProperty, _PullbackProperty, _ReversalProperty });\n                tickPriceSeries = (PriceSeries)sciTeaType.InvokeMember(\"Evaluate\", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public, null, sciTeaInstance, new object[] { });\n                //Original Working & Tested\n\n            }\n\n\n        }\n```\n\nWhen I attach the debugger to the running instance of the console app I can see the new in-memory assembly and that the symbols are loaded (dynamically) but when I attempt to step through the code VS reports that the “Source Code Files” cannot be located.  My assumption is that this has something to do with workspaces and that I need to hook up a workspace to my compilation somehow (I haven’t quiet figured that out yet)…. any advice would be very much appreciated.\n\nKind Regards\n\n/W\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-03-25T20:15:13Z",
        "body": "@eatdrinksleepcode No public issue yet. There were a handful of designs floated internally before Roslyn went open-source. I'll dredge up a recent one and post it as a proposal/issue.\n\n@WolfieWerewolf I don't think you meant to post your question here. It doesn't appear to have anything to do with warning waves.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-03-25T21:44:49Z",
        "body": "See #1580\n"
      }
    ]
  },
  {
    "number": 1469,
    "title": "Nuget packages - Assemblies dependent on packages not listed inside .nuspec file",
    "created_at": "2015-03-22T06:36:34Z",
    "closed_at": "2015-03-23T01:44:58Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-By Design",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1469",
    "body": "Perhaps I'm missing something obvious here...\n\nChecking the Microsoft.CodeAnalysis.dll assembly from the NuGet package with ildasm, it shows a lot of dependencies on assemblies like System.Runtime, System.IO, System.Reflection, System.Collections, etc. A lot of them.\n\nThis refers to the Microsoft.CodeAnalysis.dll found under lib/net45 in the installed package.\n\nThese dependencies will not be found on the machine, because the packages are not installed by NuGet, because they are not listed as dependencies in the Microsoft.CodeAnalysis.Common.nuspec file.\n\nThe nuspec file only lists Collections.Immutable and Reflection.Metadata as dependencies.\n\nHow is this supposed to work?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1469/comments",
    "author": "fengari",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-03-23T01:44:55Z",
        "body": "Historically, things like System.Runtime and the other references you mention are provided by the .NET framework. They are the contract assemblies that define Portable Class Libraries, and are also implemented as type forwarding facade assemblies in the full framework.  These dependencies are implicitly satisfied by the .NET framework you are targeting.\n"
      }
    ]
  },
  {
    "number": 1325,
    "title": "Should UnusedDeclarationsAnalyzer be on be default?",
    "created_at": "2015-03-17T17:35:00Z",
    "closed_at": "2015-03-26T23:43:21Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Verified",
      "Resolution-Fixed"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1325",
    "body": "I'm seeing unused code being grayed out while editing Roslyn.sln in my main hive.  Is that expected?  @srivatsn tells me that the analyzer is currently just a proof-of-concept.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1325/comments",
    "author": "amcasey",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2015-03-17T21:50:41Z",
        "body": "I think @heejaechang did turn it off by default in #1238 but that may not have been part of the toolset that @tmeschter recently did.\nIs it worth doing another toolset update to turn this analyzer off by default? Probably it is also worth implementing #1061 so such cases can be dealt with by just adding a temporary ruleset entry to disable roslyn diagnostics on entire Roslyn.sln, rather then having to do a toolset update for such cases.\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2015-03-26T23:43:21Z",
        "body": "Closing since this is turned off now.\n"
      }
    ]
  },
  {
    "number": 896,
    "title": "KnownMonikers?",
    "created_at": "2015-02-26T16:56:57Z",
    "closed_at": "2015-03-11T23:11:09Z",
    "labels": [
      "Question",
      "Resolution-By Design",
      "Area-Infrastructure",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/896",
    "body": "```\nSeverity    Code    Description Project File    Line\nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 1 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 2 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 3 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 4 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 5 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 6 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 7 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 8 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 9 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Beginning retry 10 in 1000ms. The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process. BasicCodeAnalysis       \nError       Could not copy \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". Exceeded retry count of 10. Failed.   BasicCodeAnalysis       \nError       Unable to copy file \"obj\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll\". The process cannot access the file 'C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process.  BasicCodeAnalysis       \nWarning     The command \"C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\Binaries\\Debug\\\\FakeSign.exe \"obj\\Debug\\Microsoft.VisualStudio.LanguageServices.SolutionExplorer.dll\"\" exited with code 1. SolutionExplorerShim        \nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeInformation' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\AnalyzerItem\\AnalyzerItem.cs 34\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeInformation' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\AnalyzerItem\\AnalyzerItem.cs 42\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeInformation' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\AnalyzersFolderItem\\AnalyzersFolderItem.cs   41\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeInformation' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\AnalyzersFolderItem\\AnalyzersFolderItem.cs   49\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeErrorRule'   SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\DiagnosticItem\\DiagnosticItem.cs 103\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeWarningRule' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\DiagnosticItem\\DiagnosticItem.cs 105\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeInformationRule' SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\DiagnosticItem\\DiagnosticItem.cs 107\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeHiddenRule'  SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\DiagnosticItem\\DiagnosticItem.cs 109\nError   CS0117  'KnownMonikers' does not contain a definition for 'CodeSuppressedRule'  SolutionExplorerShim    C:\\Users\\Adam\\Documents\\GitHub\\roslyn-1\\src\\VisualStudio\\Core\\SolutionExplorerShim\\DiagnosticItem\\DiagnosticItem.cs 111\nWarning     The project 'csc2' cannot be referenced. This is not a .NET assembly.   VBCSCompilerTests       \nWarning     The project 'vbc2' cannot be referenced. This is not a .NET assembly.   VBCSCompilerTests       \n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/896/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "tmeschter",
        "created_at": "2015-02-26T23:12:12Z",
        "body": "@AdamSpeight2008 Could you provide some context on this issue? What solution are you trying to open?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-02-27T01:55:04Z",
        "body": "Same as in #611 (VS205ctp6)\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-03-11T04:15:24Z",
        "body": "I'm guessing these image monikers were added post-CTP6, in which case this code shouldn't be building with /p:CIBuild=true set (or, I think, in RoslynLight.sln). @AdamSpeight2008 - can you confirm what exactly you were building when this failed? /cc: @tmeschter  @srivatsn @jaredpar\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-03-11T14:04:22Z",
        "body": "@dpoeschl I was building Roslyn. They maybe Jenkins console output that shows it,\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-03-11T23:11:04Z",
        "body": "If you were trying to build Roslyn.sln, then these errors are probably expected. Build RoslynLight or use the /p:CIBuild=true flag with BuildAndTest instead. I'm going to close this particular issue, but if you see failures during one of these kinds of builds, or any more discrepancies in the documentation, please let us know!\n"
      }
    ]
  },
  {
    "number": 691,
    "title": "Unit Tests",
    "created_at": "2015-02-19T20:31:10Z",
    "closed_at": "2015-02-19T22:48:45Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/691",
    "body": "Is it possible to test the individual parts of the compiler in isolation?\n- Scanner\n- Parser\n- Semantic \n- etc\n  Or Test the compiler in isolation, eg just the VB / C# compiler? \n  A the moment it test both compilers and Editor features.\n  A 2 hour 15 minute test time is not conducive in finding the source of an issue.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/691/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-02-19T20:41:09Z",
        "body": "You can manually run xunit.console on any particular assembly.\n"
      }
    ]
  },
  {
    "number": 577,
    "title": "Discussion: Type Providers in c#",
    "created_at": "2015-02-17T14:32:18Z",
    "closed_at": "2015-09-13T00:33:57Z",
    "labels": [
      "Question",
      "Language-C#",
      "Discussion",
      "Area-Language Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/577",
    "body": "Hopefully this is the correctly place for c# language discussion. Has there been any proposals to adding F# type providers to the c# language? Just today i was grimising  at the thought of having to update some large wcf proxy classes that we have. Type providers would make this so easy. I sure it will be helpful in a lot of cases where you have disparate data sources that change frequently. \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/577/comments",
    "author": "Ncage1974",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-02-17T18:46:16Z",
        "body": "There is no language proposal for this yet. We'd welcome one!\n"
      },
      {
        "user": "Ncage1974",
        "created_at": "2015-02-17T18:53:00Z",
        "body": "Thanks Neal for the reply. Being unfamiliar with the process is there anything that i need to do other than this issue i created :). I also created an identical issue under the Roslyn project on codeplex. I'm hoping its considered for c# 7.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-02-17T19:59:09Z",
        "body": "We cannot consider a language proposal if there is no language proposal to consider. A suggestion that we consider doing \"something like F# type providers\" isn't a language proposal that we can do anything with. We would need much more detail. Like a draft specification.\n"
      }
    ]
  },
  {
    "number": 521,
    "title": "Debug Thrown Exceptions of Roslyn Analyser / Code Refactoring",
    "created_at": "2015-02-15T19:34:08Z",
    "closed_at": "2015-02-28T17:15:51Z",
    "labels": [
      "Question",
      "Area-Analyzers",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/521",
    "body": "When debugging a codefix (for example) it launches an Experimental instance of VS. \nShould you're codefix throw an exception the VS doesn't go back in to the original instance of VS.\nThis would be very useful to aid in debugging the issue.\n\nInstead it crashes the VS(Experimental) and find some notion of the error, you have to go looking in the ActivityLog.xml\n\nIf the VS(original) was used, and a debug breakpoint was at the line where the exception happened.\nIf the  contents of the variable was also available as well.\n\nie Have the debugger attached to the DLL(s) of you  codefix.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/521/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2015-02-16T01:39:56Z",
        "body": "> VS doesn't go back in to the original instance of VS\n\nDon't know what you mean here.  If you launch an experimental Visual Studio instance with your analyzer/codefix installed as a VSIX (the default way debugging is set up in the templates) your \"original\" instance of Visual Studio (the one attached for debugging) will catch exceptions thrown by your codefix or analyzer.  If the debugger is not catching exceptions thrown by the process its attached to, thats a bug.\n\n> Instead it crashes the VS(Experimental) and find some notion of the error, you have to go looking in the ActivityLog.xml\n\nCurrently we have a one-strike-and-you're-out policy regarding codefixes and analyzers throwing exceptions. If you throw an unhandled exception, we catch it and disable the throwing codefix/analyzer.    I'm working on issue #268 so the user has the option to keep the codefix/analyzer running if they want. It should never be able to bring down Visual Studio, could you please file a bug on this?\n\n> Have the debugger attached to the DLL(s) of you codefix.\n\nWe have a test project that you could debug if you wanted to debug without launching a new Visual Studio process, but I admit this is not ideal. Perhaps we could come up with a more general console application that you could pass files into?  What do you think?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-02-16T02:15:57Z",
        "body": "The VS(original)'s debugger is attached as it is possible to set a breakpoint and step-through my code.\n\nIf my code causes an exception to be thrown _(highly likely I wrote it)_, it should  go back to VS(original), and highlight the section of your code at the point the exception was thrown. Like a crash dump, since it as access to the source.\n\n> Perhaps we could come up with a more general console application that you could pass files into? What do you think? \n> Good, or a simple VS Isolated shell, or a way put the Experimental instance into isolated test mode, which just the minimum required to tryout your analyser etc\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2015-02-16T02:48:06Z",
        "body": "Since we handle the exception in the codefix engine (to turn off the fixer), the original VS wouldn't see this exception as unhandled and wouldn't know to stop. If you, however, turn on first chance exceptions, you should see that the original VS stops at your line of code in the fixer.\n"
      }
    ]
  },
  {
    "number": 236,
    "title": "How can I enable C# interactive window in VS2013.4?",
    "created_at": "2015-02-04T16:48:41Z",
    "closed_at": "2015-02-04T19:52:48Z",
    "labels": [
      "Question",
      "Interactive-Debugging",
      "Area-Interactive",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/236",
    "body": "Is it already available?\n\nDoes it include intellisense and code highlighting?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/236/comments",
    "author": "weitzhandler",
    "comments": [
      {
        "user": "kuhlenh",
        "created_at": "2015-02-04T17:28:21Z",
        "body": "Unfortunately, the C# Interactive Window is not available in VS2013. We are working on the REPL now and yes it will include IntelliSense! You can check out our Interactive Design notes so far: #122, #213.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2015-02-04T19:52:48Z",
        "body": "In general our VSIX projects cannot be loaded into VS 2013.  We have a pretty strong dependency on the VS SDK that ships with 2015 and this isn't compatible with 2013.  \n"
      },
      {
        "user": "weitzhandler",
        "created_at": "2015-02-04T19:58:16Z",
        "body": "Thanks for your kind response.\n"
      }
    ]
  },
  {
    "number": 196,
    "title": "Status of /features:deterministic=true",
    "created_at": "2015-02-01T14:05:42Z",
    "closed_at": "2015-02-02T20:51:45Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Verified",
      "Resolution-Answered",
      "Concept-Determinism"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/196",
    "body": "It seems to me that this feature is not finished yet.\n\nCan someone confirm it's not finished?(maybe I'm using it wrong or I misunderstood what it means)\nIf it's not finished yet... Is there plan to finish it any time soon?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/196/comments",
    "author": "DavidKarlas",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-02-01T20:42:04Z",
        "body": "It will not be finished for VS2015. I will be working on it.\n"
      },
      {
        "user": "DavidKarlas",
        "created_at": "2015-02-01T21:17:55Z",
        "body": "words can't express my feelings... :heart:\n"
      }
    ]
  },
  {
    "number": 77189,
    "title": "Could lang=regex syntax handling apply to consts that are later used in a recognized location?",
    "created_at": "2025-02-12T20:05:21Z",
    "closed_at": "2025-02-13T11:07:55Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/77189",
    "body": "Today if I have:\n```C#\nnew Regex(\"someRegex\")\n```\nI get nice syntax coloring / IntelliSense support for that \"someRegex\" string. Same applies anywhere [StringSyntax(\"Regex\")] is used, or if `/* lang=regex */` is applied.\n\nFrequently, though, I'll see code that has:\n```C#\nprivate const string SomePattern = \"someRegex\";\n...\n... = new Regex(SomePattern);\n```\nand that \"someRegex\" doesn't get the nice support.\n\nCould Roslyn see that SomePattern is passed somewhere that accepts [StringSyntax(\"Regex\")] and implicitly treat it as if it had `/* lang=regex */` applied?\n\ncc: @CyrusNajmabadi ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/77189/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-02-12T20:18:18Z",
        "body": "Yes, it could.  We already do this for locals.  It would not be out of bounds to do this.  \n\nQuestion: in your cases, is the constant and the regex usage located in the file?  or do you sometimes put them in different partial parts.   I'm wary about the expense of looking into different parts during the classification pass.  So it would be nice if this only applied to one part at a time.\n\nIf your pattern is to have them in distinct parts, i'll def look into supporting that, but it's more complex :)"
      },
      {
        "user": "stephentoub",
        "created_at": "2025-02-12T20:27:03Z",
        "body": "> Question: in your cases, is the constant and the regex usage located in the file?\n\nThe 90% case is they're in the same file."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-02-12T20:57:37Z",
        "body": "Ok.  We can start with that and see if that's sufficient :)"
      }
    ]
  },
  {
    "number": 77051,
    "title": "NavTo: Enhance \"Current Document\" scope with results from base types and partial types",
    "created_at": "2025-02-05T16:55:38Z",
    "closed_at": "2025-02-06T02:41:49Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/77051",
    "body": "## Background and Motivation\n\nA common user pattern in Visual Studio is to configure \"Go to Member\" in All-in-one Search to use the \"Current Document\" scope by default. But some users have reported being confused when members from the current type they're looking at don't show up. Typically these additional members are actually declared in base types or partial types, but users often don't memorize which is declared where, and toggling the scope in AIOS is an extra step they don't feel they should have to make.\n\nIncluding these members in the \"Current Document\" scope would add data that feels like it is currently missing.\n\n## Proposed Feature\n\nEnhance the navigation service used to implement `ISearchItemsSourceProvider` for AIOS such that when the \"Current Document\" scope and the \"Members\" filter is selected, instead of taking it literally, instead include the following:\n\n* For each type declared (fully or partially, inner or outer) in the current file:\n  * All of its members\n    * Regardless of which file they are declared in, or whether they come from a base type\n\n## Open Questions\n\n### Is anything missing from the above list?\n\nThe only other thing that came to my mind in the category of \"stuff I know this file does but it turns out it's not really from this file\" is extension methods, but I don't feel like they make sense here, as they're not really _part_ of the type.\n\n### Should this also work for the \"Types\" filter?\n\nIt's probably not as necessary/useful, but perhaps it would be more consistent? I'd probably go with whatever is easier to implement. :-)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/77051/comments",
    "author": "sandyarmstrong",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-02-05T17:10:48Z",
        "body": "I discussed thsi offline with Sandy.  Initially i thought this might not be feasible due to the reliance on semantics, given that our NavTo code operates *entirely* syntactically/textually today.\n\nHowever, it does seem like we can do something viable here.  First, remember that this is only when the 'current document scope' is passed through the search query.  In that case, we can do the following:\n\n1. Kick off the *normal* NavTo textual search system on the actual 'current document'.\n2. Concurrently, we can kick off a new, special, semantic search for this scenario.  This \"semantic current doc search\" would analyze the current file semantically, looking for partial types within it, and examining the inheritance hierarchy of the types declared in the file.  From this, it could come up with the next set of \"related documents\" to examine, specifically only returning documents *not* equal to the true 'current document'.\n3. We'd then perform the normal NavTo textual search on those 'related documents'.\n\nBenefits of this approach:\n\n1. Normal NavTo code is unaffected. \n2. Textual results from the current file still are returned immediately without interference.\n3. We do not get duplicates we have to worry about as the semantic search only returns *other* documents to consider.\n4. The other documents are still searched normally.\n\nIn a sense, this is a normal NavTo search, just scoped down to a small cohort of files instead of just a single file.  And where one file is still prioritized and run immediately, while the cohort set is discovered and eventually passed on for the secondary results.\n\nI would estimate this at 1-2 days of work tops."
      }
    ]
  },
  {
    "number": 76820,
    "title": "Incorrect collapse of expression bodied member with compiler directive",
    "created_at": "2025-01-20T13:57:06Z",
    "closed_at": "2025-01-21T20:53:25Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/76820",
    "body": "I'm unsure which repo this belong in?\n\nThis collapses properly:\n```cs\npublic class Demo1 {\n\n  public int Foo() {\n    return\n    #if DEBUG\n    10;\n    #else\n    20;\n    #endif\n  }\n\n}\n```\n\nThis does not:\n```cs\npublic class Demo2 {\n\n  public int Foo() =>\n    #if DEBUG\n    10;\n    #else\n    20;\n    #endif\n\n}\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/76820/comments",
    "author": "lonix1",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-01-20T17:30:46Z",
        "body": "Can you clarify what you mean by \"incorrect collapse\"?"
      },
      {
        "user": "lonix1",
        "created_at": "2025-01-21T01:26:45Z",
        "body": "One expects this:\n```\npublic class Demo1 {\n\n>  public int Foo() {\n\n}\n```\n\nBut it does this:\n```\npublic class Demo2 {\n\n>  public int Foo() =>\n    #else\n    20; ...\n\n}\n```\n\nAnd I've seen this too:\n```\npublic class Demo2 {\n\n>  public int Foo() =>\n    #endif\n\n}\n```\n\nYou can see for yourself by copy-pasting into a c# file."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-01-21T01:33:55Z",
        "body": "We'd take a targeted community fix here.  Moving to backlog."
      }
    ]
  },
  {
    "number": 75999,
    "title": "`Replace 'Property' with method` erases DIM",
    "created_at": "2024-11-20T23:30:12Z",
    "closed_at": "2024-12-03T02:46:42Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75999",
    "body": "**Version Used**: \n\n.NET SDK 9.0.100\n\n**Steps to Reproduce**:\nExisting code:\n\n```csharp\ninterface I\n{\n    public string Name\n    {\n        get\n        {\n            return string.Empty;\n        }\n    }\n}\n```\n\nAfter fix:\n\n```csharp\ninterface I\n{\n    string GetName();\n}\n```\n\n**Diagnostic Id**:\n\nIDE did not present one, so I'm unsure whether this is the right repo, or if this is implemented in `roslyn-analyzers`\n\n**Expected Behavior**:\n\n```csharp\ninterface I\n{\n    public string GetName()\n    {\n        return string.Empty;\n    }\n}\n```\n\n**Actual Behavior**:\n```csharp\ninterface I\n{\n    string GetName();\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75999/comments",
    "author": "RenderMichael",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-21T00:04:25Z",
        "body": "This is the correct repo for this. "
      }
    ]
  },
  {
    "number": 75870,
    "title": "Extend the \"Use collection expression\" suggestion to scenarios requiring the spread operator",
    "created_at": "2024-11-12T18:56:42Z",
    "closed_at": "2024-11-14T21:38:02Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75870",
    "body": "## Summary\n\nExpand the Roslyn analyzers to suggest using `[.. collection]` syntax where applicable. This is a more concise and expressive way to initialize collection from elements in existing collections.\n\n## Background and Motivation\n\nThe IDE currently suggests collection initialization when a spread operator wouldn't be required. The motivation for this feature is the same as the existing suggestions, informing developers of the existence of a more readable syntax. Notably, ReSharper already suggests using collection expressions in these situations. Adding this feature directly to Roslyn would ensure consistency and improve native support for modern C# practices.\n\n## Proposed Feature\n\nBefore:\n``` cs\nList<int> GetNumbers()\n{\n    return new List<int>(Enumerable.Range(1, 10));\n}\n```\nAfter:\n``` cs\nList<int> GetNumbers()\n{\n    return [.. Enumerable.Range(1, 10)];\n}\n```\n\nBefore:\n``` cs\nImmutableArray<string> GetFormattedNumbers(ImmutableArray<int> numbers)\n{\n    return numbers.Select(n => $\"Number: {n}\").ToImmutableArray();\n}\n```\nAfter:\n``` cs\nImmutableArray<string> GetFormattedNumbers(ImmutableArray<int> numbers)\n{\n    return [.. numbers.Select(n => $\"Number: {n}\")];\n}\n```\n\nBefore:\n``` cs\nImmutableArray<string> GetFormattedRange()\n{\n    return ImmutableArray.CreateRange(Enumerable.Range(1, 10).Select(n => $\"Item {n}\"));\n}\n```\nAfter:\n``` cs\nImmutableArray<string> GetFormattedRange()\n{\n    return [.. Enumerable.Range(1, 10).Select(n => $\"Item {n}\")];\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75870/comments",
    "author": "obonn1",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-12T21:10:31Z",
        "body": "We'd likely take targeted community PRs here.  Thanks for the suggestions :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-13T01:08:01Z",
        "body": "Working on this now."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-14T22:51:36Z",
        "body": "@obonn1 Thanks for the suggestions!"
      },
      {
        "user": "obonn1",
        "created_at": "2024-11-15T02:05:37Z",
        "body": "@CyrusNajmabadi Wow that fast! Thanks for working on this"
      }
    ]
  },
  {
    "number": 75597,
    "title": "Make `langword` a first-class citizen attribute of the `<see />` tag",
    "created_at": "2024-10-23T11:37:58Z",
    "closed_at": "2024-11-26T03:22:29Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75597",
    "body": "## Summary\nPlease, I'm begging you people, stop enforcing tedious edits of `<see cref=\"\"/>` just to get `<see langword\"\" />` for us XML-Doc-savvy developers.\n\n## Background and Motivation\nRight now, the VS text editor never stops for selection of either `cref` or `langword` as attribute, but goes straight for `<see cref=\"|\"/>` (Note: `|` marks cursor's spot).\n\nBut it gets even worse as `langword` is still not offered after removing everything right of `<see` - triggering IntelliSense at `<see|` will only offer `<see cref=\"…` & `<seealso cref=\"…`.\n\nThat leaves us forced to:\n1. Add a single whitespace between `\"` & `/` to make it XML-compliant.\n2. Move the cursor left of `=` in order to delete `cref` & then insert `langword` instead.\n3. Continue with our docs by inserting the language word, e.g., `true`.\n\nEvery.\nSingle.\nTime.\nReally?\n\n## Proposed Feature\nPart I:\n1. Make IntelliSense stop at `<see | />`, prompting to select either `cref` or `langword`.\n2. After either selection, at least in case of `langword`, prompt to select the attribute's value (`<see langword=\"|\" />`).\n3. After completion, move cursor past the closing angle bracket.\n\nPart II (might be done in a separate issue - tell me & I happily create it):\n1. Make the `<see />` tag XML-compliant by inserting a whitespace before the slash (`/`).\n2. Extend this to _any_ self-closing / standalone XML Doc tag, i.e., `<include />`, `<inheritdoc />` & `<seealso />`, too.\n\n## Alternative Designs\nManual edits. Just like above: Every. Single. Time.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75597/comments",
    "author": "Eagle3386",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-23T19:00:03Z",
        "body": "You don't need to type `<see langword=\"the_keyword\"`.  You can just write `the_keyword`, and the lightbulb will automatically give you the option to replace it with `<see langword=\"...\"/>`."
      },
      {
        "user": "Eagle3386",
        "created_at": "2024-10-23T19:21:49Z",
        "body": "@CyrusNajmabadi While that's true, it's nothing but a workaround, because it breaks fluent docs typing & neither solves anything of `Part I` above, i.e., `langword` is still not offered if modifying an _existing_ `<see />` tag, nor does it allow for the optional whitespace prior to `/>`."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-23T19:28:05Z",
        "body": "> While that's true, it's nothing but a workaround\n\nWorkarounds are an acceptable thing for us to consider :)\n\nMoving this to the backlog, will put in an appropriate area we're going to make where we're considering what sort of improvements we want to do in xml doc comments.\n\n"
      },
      {
        "user": "Eagle3386",
        "created_at": "2024-10-23T19:52:53Z",
        "body": "> Workarounds are an acceptable thing for us to consider :)\n\nAnd I thought describing it like that would prevent _exactly_ this comment. 🙈😅\nPlease don't. We need that feature, especially given how small the required amount of work should be - I _really_ put some thoughts in here, please acknowledge it at least _a little bit_! 😉\n\n> Moving this to the backlog, will put in an appropriate area we're going to make where we're considering what sort of improvements we want to do in xml doc comments.\n\nAs long as it's not \"file 13\" (translator's suggestion for \"Ablage P\", which literally translated means \"tray P\" - with \"P\" short for \"Papierkorb\" & called \"Recycle Bin\" in any Windows since '95 or so), I'm fine with that! 🥳"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-23T19:57:01Z",
        "body": "> especially given how small the required amount of work should be -\n\nThis risks breaking people's muscle memory.  We cannot make those changes to behavior that people have been using for 25 years casually.  \n\n> please acknowledge it at least a little bit!\n\nI def have.  That's why this will be in the area where we are tracking potential investment areas to improve here."
      },
      {
        "user": "Eagle3386",
        "created_at": "2024-10-23T20:02:24Z",
        "body": "> This risks breaking people's muscle memory. We cannot make those changes to behavior that people have been using for 25 years casually.\n\nLet's face it: those using XML Doc to such an extend are pretty hardcore anyway (we're talking about 4 (!) tags only) & those people probably adapt quickly, given the time saving improvement - besides, Visual Studio did worse things in the past & got away with it easily. 😉🥳"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-23T20:16:24Z",
        "body": "> & those people probably adapt quickly\n\nThis is very much not the case.  Breaking muscle memory often impacts a lot of people and causes a lot of upset typers.  \n\n> besides, Visual Studio did worse things\n\nRoslyn has tried very hard to not do this.  And when we have, we have received a lot of negative fallout and have often had to revert.  We do not casually break muscle memory scenarios.  Especially when we've had behavior for 25 years, there is a workaround, and there is only a single report from a single customer in all that time.  \n\nWe have millions of customers.  We have to balance the needs of that enormous group versus the desires of individuals who would like the product tweaked to better suit how they want ot use it."
      },
      {
        "user": "Eagle3386",
        "created_at": "2024-10-24T13:29:28Z",
        "body": "> You don't need to type `<see langword=\"the_keyword\"`. You can just write `the_keyword`, and the lightbulb will automatically give you the option to replace it with `<see langword=\"...\"/>`.\n\nThis won't work for `init`, `true`, etc., though. 😞\n\n> > & those people probably adapt quickly\n> \n> This is very much not the case. Breaking muscle memory often impacts a lot of people and causes a lot of upset typers.\n\nThen your mileage _greatly_ varies from mine - yes, there's some \"Boo, that used to be X/Y/Z\". But if the advantage was made very clear & outweighed the \"break in muscle memory\", adoption rate reached 100% after 2 weeks at a max. 😅\n\n> Roslyn has tried very hard to not do this. And when we have, we have received a lot of negative fallout and have often had to revert. We do not casually break muscle memory scenarios. Especially when we've had behavior for 25 years, there is a workaround, and there is only a single report from a single customer in all that time.\n\nWell, that's not fully correct - there are at least 3, see the ❤️ of my OP. 😉\n\nAnd the workaround, as proven above, isn't that much useful as it seems it's pretty much limited to type-keywords - compared to way more language words like `async`, `await`, `false`, `init`, `true`, etc.\n\n> We have millions of customers. We have to balance the needs of that enormous group versus the desires of individuals who would like the product tweaked to better suit how they want ot use it.\n\nNow, that's not fair. I don't ask for a \"tweak\". In fact, I'm asking to just apply the same logic that's used throughout the IDE's text editor for other snippets & stuff like that to rather the _full_ extend than only half of it."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-24T15:27:21Z",
        "body": "> This won't work for init, true, etc., though\n\nThen we can fix that. If you want to submit a pr fixing missing keywords there, we would take that. \n\n> Then your mileage greatly varies from mine \n\nCorrect. We have decades of experience here, and we know just how upset people get when you break muscle memory.\n\n> And the workaround, as proven above, isn't that much useful\n\nWe can address that separately. If we're missing keywords, we can add them. \n\n> I don't ask for a \"tweak\". In fact, I'm asking to just apply the same logic that's used throughout the IDE's text editor for other snippets & stuff like that\n\nYes. That's a tweak.  I get what you're asking for. I'm telling you it's something we will evaluate. I'm also telling you the things we have to take into consideration when doing that evaluation. :-)"
      },
      {
        "user": "Eagle3386",
        "created_at": "2024-10-24T18:35:39Z",
        "body": "> Then we can fix that. If you want to submit a pr fixing missing keywords there, we would take that.\n\nSure, do you mind pointing me in the right direction as to where the necessary file(s) are?\n\n> Correct. We have decades of experience here, and we know just how upset people get when you break muscle memory.\n\nHonestly, I _really_ appreciate talking to you, Cyrus!\nIt's been a productive conversation/suggestion, from which I take your insights for my own developer life - thanks!.\nAnd that's even for when we agree to disagree - awesome! Just keep being like you are, Cyrus. Wow, that almost sounds like a love confession.. 🙈😅\n\n> We can address that separately. If we're missing keywords, we can add them.\n\nI'd love to get this going. The more you could help me on that, the sooner we all got the improvement(s). 😎\n\n> Yes. That's a tweak. I get what you're asking for. I'm telling you it's something we will evaluate. I'm also telling you the things we have to take into consideration when doing that evaluation. :-)\n\nMuch appreciated! Very much! ❤️"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-24T22:03:26Z",
        "body": "Currently traveling. I would look for some tests that validate the langword refactoring and then see what class they are testing.  The fix would be somewhere in that code refactoring provider. \n\nIf you can't find it, lmk, and I'll add the info when I'm settled someplace. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T03:22:29Z",
        "body": "Closing out as working as intended.  If there are missing keywords, please open an issue stating which ones and we can resolve it.  The experince of writing the keyword and using the lightbulb to generate the `<see langword` tag is our desired way of using this experience."
      }
    ]
  },
  {
    "number": 75135,
    "title": "Change property to method refactoring crashes when property used in property pattern",
    "created_at": "2024-09-16T20:18:04Z",
    "closed_at": "2024-09-27T20:05:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/75135",
    "body": "Simplified repro:\r\n```\r\nclass C\r\n{\r\n    public int Property { get { return 0; } } // invoke \"ReplacePropertyWithMethodsRefactoringProvider\"\r\n    public bool M()\r\n    {\r\n        return this is { Property: 1 };\r\n    }\r\n}\r\n```\r\nObserved: refactoring crashes\r\nExpected: refactoring handles this condition gracefully (point to the problem or rewrite if possible)\r\n\r\n----\r\nOriginal repro:\r\nInvoke \"Replace `IsTupleType` with method\" refactoring on `TypeSymbol.IsTupleType` in roslyn.\r\nA gold bar appears providing the following stack trace.\r\nLooking at the stack trace, I suspect the problem is due to the property being used in a property pattern. The refactoring should handle this more gracefully.\r\n\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameColon(NameColonSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSubpattern(SubpatternSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPropertyPatternClause(PropertyPatternClauseSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRecursivePattern(RecursivePatternSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIsPatternExpression(IsPatternExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxNode currentNode,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.UpdateReferencesInDocumentAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.UpdateReferencesAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.ReplacePropertyWithMethodsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorkerAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n   ```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/75135/comments",
    "author": "jcouv",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-09-17T12:34:03Z",
        "body": "We should detect this and report an error annotation on this location as something we cannot update. "
      },
      {
        "user": "jcouv",
        "created_at": "2024-09-17T16:45:16Z",
        "body": "FWIW, it would be useful to give the user a hint of what's blocking the refactoring too, so they have a chance to adjust the code to make this pass (ie. remove property-pattern usages). That's what I ended up doing to unblock my case."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-09-18T06:58:24Z",
        "body": "@jcouv we wouldn't block the refactoring.  We'd still allow it. The annotation just tells the user where there are issues with converting things. "
      }
    ]
  },
  {
    "number": 74897,
    "title": "[Feature] Collapse multiple leading #pragma lines",
    "created_at": "2024-08-26T02:13:33Z",
    "closed_at": "2024-11-26T02:48:46Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74897",
    "body": "Consider this C# file:\r\n```cs\r\n#pragma warning disable 123\r\n#pragma warning disable 456\r\n#pragma warning disable 789\r\n#pragma warning disable abc\r\nusing System.Collections.ObjectModel;\r\nusing System.Net.Mimel\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace Foo;\r\n\r\npublic class Bar {\r\n```\r\n\r\nIf that file is collapsed, the `using` lines will be collapsed into a single line, but the `#pragma` lines will not.\r\n\r\nIn a non-trivial codebase there are many files which deviate from defaults and need top-level pragmas. It would be cleaner and more readable if those would also be collapsible to single lines.\r\n\r\nAfter collapsing:\r\n```cs\r\n> #pragma warning disable 123\r\n> using System.Collections.ObjectModel;\r\n\r\n  namespace Foo;\r\n\r\n  public class Bar {\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74897/comments",
    "author": "lonix1",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T02:48:46Z",
        "body": "Not planning on doing this"
      }
    ]
  },
  {
    "number": 74816,
    "title": "Should collapse separate comment blocks separately",
    "created_at": "2024-08-20T02:06:44Z",
    "closed_at": "2024-11-26T02:46:13Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Concept-Continuous Improvement",
      "Structure (Outlining)"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74816",
    "body": "I am unclear if this repo is the one for roslyn code folding in vscode and vs.\r\n\r\nI have this code:\r\n```cs\r\n// some notes, etc. etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n// etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n// etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n\r\n// some other notes  etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n// etc. etc. etc. etc. etc. etc.\r\n```\r\n\r\nThat will collapse to this:\r\n```cs\r\n// some notes, etc. etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n```\r\n\r\nInstead of this:\r\n```cs\r\n// some notes, etc. etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n\r\n// some other notes  etc. etc. etc. etc. etc. etc. etc. etc. etc.\r\n```\r\n\r\nIn all other collapsings, the code blocks are collapsed separately. But if it is two comments blocks then they are merged.\r\n\r\nI think if they are separated then they are not related and so must be collapsed separately. It is very frustrating that we have many documentations in our code, but they are always collapsed into one mega collapse... hard to find what we are looking for.\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74816/comments",
    "author": "denisz1",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T02:46:13Z",
        "body": "Closing out due to lack of broad feedback here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T02:46:44Z",
        "body": "Note: this is by design so a user can comment out a large section of code and then easily collapse it.  changing this behavior would regress a known scenario we want to keep working. "
      }
    ]
  },
  {
    "number": 74460,
    "title": "IDE0270 creates invalid code",
    "created_at": "2024-07-19T14:37:50Z",
    "closed_at": "2024-08-27T07:21:06Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74460",
    "body": "**Version Used**: \nVersion 17.11.0 Preview 3.0 [35025.322.main]\n\n**Steps to Reproduce**:\n```C#\nstatic void Repro(object? o)\n{\n    IList<int>? list = o as int[];\n    if (list is null)\n    {\n        list = o as List<int>;\n    }\n}\n``` \n\n**Diagnostic Id**:\nIDE0270\n\n**Expected Behavior**:\nDiagnostic is not triggered if the resulting fixer's code won't compile.\n\n**Actual Behavior**:\nDiagnostic fires, and the fixer generates this code:\n```C#\nstatic void Repro(object? o)\n{\n    IList<int>? list = o as int[] ?? o as List<int>;\n}\n```\nwhich fails to compile with:\n```\nerror CS0019: Operator '??' cannot be applied to operands of type 'int[]' and 'List<int>'\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74460/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-19T15:33:40Z",
        "body": "If someone wants to fix this, two options are possible.  Either do not offer the suggestion here.  Or offer, but insert an explicit cast to teh destination type.  \r\n\r\n"
      },
      {
        "user": "Orachor",
        "created_at": "2024-07-19T17:46:06Z",
        "body": "I'll try taking a look at this :)"
      }
    ]
  },
  {
    "number": 74331,
    "title": "Avoid recommending get-only properties without valid settable options in object initializer",
    "created_at": "2024-07-10T13:04:17Z",
    "closed_at": "2024-12-15T03:35:41Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74331",
    "body": "## Version Used\r\nVS 2022 Version 17.10.3\r\nRoslyn 4.10.0 (04fb39164c99c)\r\n\r\nProject info\r\nC# 12.0\r\n.NET 8.0\r\n\r\n## Steps to Reproduce\r\n\r\nConsider the following code:\r\n\r\n```csharp\r\npublic sealed class FreightModel\r\n{\r\n    public double WeightKg { get; init; }\r\n    \r\n    public string Name { get; } = \"some name\";\r\n}\r\n\r\npublic class ModelFactory\r\n{\r\n    public FreightModel Create(double weight)\r\n    {\r\n        return new()\r\n        {\r\n            // $$\r\n        };\r\n    }\r\n}\r\n```\r\n\r\nIn the above example code, place the cursor at `$$`, type `Na`, and notice the autocomplete result including the `Name` get-only property.\r\n\r\n## Expected Behavior\r\n\r\nWe don't get the get-only string property\r\n\r\nReason: we don't need a string get-only property the object initializer. We cannot use that property in any way. The only scenario in which we want to show get-only properties is when they are set using an object or list initializer without the construction of a new instance. For example:\r\n```csharp\r\npublic class Thing\r\n{\r\n    public List<string> SomeList { get; } = [];\r\n}\r\n\r\nnew Thing()\r\n{\r\n    // we are only adding the string below to the list, without setting the property itself\r\n    SomeList = \r\n    {\r\n        \"some string within the list\"\r\n    }\r\n}\r\n```\r\n\r\n## Actual Behavior\r\n\r\nThe get-only property's name is suggested.\r\n\r\n## Notes\r\n\r\nProperties can be set in the following ways:\r\n- Setting their value directly to an instance expression\r\n- Setting their nested properties with an object initializer block\r\n- Adding elements with a list initializer block\r\n\r\nWhen none of the above are applicable, the name of the property should not be suggested.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74331/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-16T15:13:35Z",
        "body": "This is a super minor issue. But if someone wants to fix it, I would not be opposed"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-16T15:16:26Z",
        "body": "Make sure to not break these showing up in patterns"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T02:11:13Z",
        "body": "@Rekkonnect please update this pr."
      }
    ]
  },
  {
    "number": 74327,
    "title": "Avoid recommending synthesizing record parameters in static context within the record",
    "created_at": "2024-07-10T11:56:07Z",
    "closed_at": "2024-12-15T02:23:07Z",
    "labels": [
      "Bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/74327",
    "body": "## Version Used\r\nVS 2022 Version 17.10.3\r\nRoslyn 4.10.0 (04fb39164c99c)\r\n\r\nProject info\r\nC# 12.0\r\n.NET 8.0\r\n\r\n## Steps to Reproduce\r\n\r\nIn the following code:\r\n```csharp\r\npublic record class Point(int X, int Y)\r\n{\r\n    public static Point Parse(string line)\r\n    {\r\n        // $$\r\n    }\r\n}\r\n```\r\n\r\nplace the cursor at `$$`, and type `X`. Examine the suggested symbols.\r\n\r\n## Expected Behavior\r\n\r\nNone of the record's primary constructor parameters appear in the suggestions.\r\n\r\n## Actual Behavior\r\n\r\nThe suggestions include primary constructor parameters within a static context. Note that only parameters that are used to synthesize properties within that record type appear.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/74327/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-16T15:14:50Z",
        "body": "If this is fixed, make sure to not break nameof"
      }
    ]
  },
  {
    "number": 73917,
    "title": "\"Invert if\" does not properly enclose an entire `#region`/`#endregion`",
    "created_at": "2024-06-10T13:48:49Z",
    "closed_at": "2025-01-20T23:18:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/73917",
    "body": "**Version Used**: \r\nVS 17.10.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nAdd something like the following code to a program:\r\n\r\n```cssharp\r\n\t\tpublic void SomeMethod()\r\n\t\t{\r\n\t\t\tobject something = null;\r\n\r\n\t\t\tif (something == null)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t#region A region\r\n\t\t\tsomething = new object();\r\n\t\t\t#endregion\r\n\t\t}\r\n```\r\n\r\nAnd then use the \"Invert if\" refactor on the `if` statement.\r\n\r\n**Diagnostic Id**:\r\n\r\nI don't know the diagnostic id. I'm not 100% sure this refactor is part of this repository.\r\n\r\nThis also might be the case for other code block refactors.\r\n\r\n**Expected Behavior**:\r\n\r\nAfter the refactor the `#endregion` should be inside the `if` block.\r\n\r\n**Actual Behavior**:\r\n\r\nThe refactor puts it outside the closing `}`.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/73917/comments",
    "author": "bzd3y",
    "comments": [
      {
        "user": "GiovanniBraconi",
        "created_at": "2024-06-14T05:22:55Z",
        "body": "I'm taking a look at this 😃 "
      }
    ]
  },
  {
    "number": 73245,
    "title": "`IDE0010: Populate Switch` gives up with simple `or` pattern match",
    "created_at": "2024-04-26T14:35:00Z",
    "closed_at": "2024-05-25T06:49:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/73245",
    "body": "**Version Used**: \r\n.NET 8.0.204\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` csharp\r\npublic bool DummySwitch(Values value)\r\n{\r\n    switch (value)\r\n    {\r\n        case Values.One or Values.Two:\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nenum Values\r\n{\r\n    One,\r\n    Two,\r\n    Three\r\n}\r\n```\r\n1. \r\n2. \r\n3. \r\n\r\n**Diagnostic Id**:\r\n\r\n`IDE0010`\r\n\r\n**Expected Behavior**:\r\n\r\nWarning: Populate switch\r\n\r\n**Actual Behavior**:\r\n\r\nNo Warning\r\n\r\n**Additional Context**\r\n\r\nIf you use the classic switch cases, the warning appears:\r\n\r\n```csharp\r\npublic bool DummySwitch(Values value)\r\n{\r\n    switch (value)\r\n    {\r\n        case Values.One:\r\n        case Values.Two:\r\n            return true;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nenum Values\r\n{\r\n    One,\r\n    Two,\r\n    Three\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/73245/comments",
    "author": "RenderMichael",
    "comments": [
      {
        "user": "RenderMichael",
        "created_at": "2024-04-26T14:43:17Z",
        "body": "I am happy to try and fix this myself, as long as this is desired behavior. The analysis for this can get arbitrarily complex, and there's gotta be a cutoff somewhere, especially for an analyzer this... minor. But the simple `or` case feels like a scenario which should be supported."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-04-26T15:55:44Z",
        "body": "Sure!  Go ahead :)"
      }
    ]
  },
  {
    "number": 73148,
    "title": "Inlining collection expression local into a spread could inline more aggressively",
    "created_at": "2024-04-20T22:27:52Z",
    "closed_at": "2025-01-21T07:18:37Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature - Collection Expressions"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/73148",
    "body": "Invoking \"Inline Temporary Variable\" on the first variable:\r\n```\r\n        string[] eStaticSymbols = [\r\n            \"System.Int32 E.StaticProperty { get; }\",\r\n            \"void E.StaticMethod()\",\r\n            \"E.Nested\",\r\n            \"event System.Action E.StaticEvent\",\r\n            \"System.Int32 E.StaticField\"];\r\n\r\n        string[] allStaticSymbols = [\r\n            .. eStaticSymbols,\r\n            \"System.Int32 E2.StaticProperty { get; }\"];\r\n```\r\nresults in the following:\r\n```\r\n        string[] allStaticSymbols = [\r\n            .. ((string[])([\r\n            \"System.Int32 E.StaticProperty { get; }\",\r\n            \"void E.StaticMethod()\",\r\n            \"E.Nested\",\r\n            \"event System.Action E.StaticEvent\",\r\n            \"System.Int32 E.StaticField\"])),\r\n            \"System.Int32 E2.StaticProperty { get; }\"];\r\n```\r\n\r\nSeems a good opportunity for better inlining.\r\n\r\nFYI @CyrusNajmabadi ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/73148/comments",
    "author": "jcouv",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-04-20T22:42:39Z",
        "body": "Probably better as two features.  Inlining just inlines.  But there could be a suggestion to collapse a spread of individual expressions instead just being those expressions. "
      },
      {
        "user": "MisinformedDNA",
        "created_at": "2024-05-31T14:16:21Z",
        "body": "A suggestion to collapse a spread is valuable, but if inlining could also do that, then it saves us from having to do an additional code fix (unless there are valid scenarios where a user would want to do step 1 without step 2)."
      }
    ]
  },
  {
    "number": 72991,
    "title": "Refactoring suggestion: remove using",
    "created_at": "2024-04-12T09:45:35Z",
    "closed_at": "2024-11-26T01:11:33Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72991",
    "body": "## Summary\r\n\r\nThis is a proposal to introduce a refactoring to remove using, i.e. all the types from the used namespace would get fully qualified (or as needed regarding to other imported namespaces).\r\n\r\n## Background and Motivation\r\n\r\nNamespaces refactoring can lead to this operation. Another use case is trying to use a type conflicting with one currently used but from different namespace. You cannot use both namespaces but you don't want to favoritize any.\r\n\r\n## Proposed Feature\r\n\r\nSetup:\r\n```C#\r\nnamespace MyNamespace.Area1 { class MyClass {} }\r\nnamespace MyNamespace.Area2 { class MyClass {} }\r\n```\r\n\r\nBefore refactoring:\r\n```C#\r\nusing MyNamespace.Area1;\r\n\r\nnamespace MyNamespace\r\n{\r\n    class Foo : MyClass { }\r\n}\r\n```\r\n\r\nAfter refactoring to remove `using MyNamespace.Area1`:\r\n```C#\r\nnamespace MyNamespace\r\n{\r\n    class Foo : Area1.MyClass { }\r\n}\r\n```\r\n\r\nNow `class Boo : Area2.MyClass` can be added without conflict.\r\n\r\nNote that this is difficult to do manually because \"fully qualify\" quick fix cannot be applied file-wise.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72991/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-26T01:11:33Z",
        "body": "Closing out as not planned."
      }
    ]
  },
  {
    "number": 72984,
    "title": "Hot Reload unusable with CS8055 if a file created via \"Move type to X.cs\" is not touched by the user",
    "created_at": "2024-04-11T16:55:42Z",
    "closed_at": "2024-12-02T15:15:44Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Interactive"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72984",
    "body": "## Version Used\r\nVS 2022 Version 17.9.5\r\nRoslyn 4.9.0 (a98c90d5645537)\r\n\r\nProject info\r\nC# 12.0\r\n.NET 8.0\r\n\r\n## Steps to Reproduce\r\n\r\n1. Create a file `XYZ.cs` that contains a type named XYZ\r\n2. Within that same file declare another type named ABC (different than XYZ)\r\n3. Use the \"Move type to ABC.cs\" code action\r\n4. Run the program with a debugger\r\n5. Pause execution at any point\r\n6. Edit any file within the assembly containing the above types (XYZ and ABC)\r\n7. Ensure that there are no compiler errors after the edits\r\n8. Use Hot Reload to load the changes onto the program and continue execution\r\n\r\n## Expected Behavior\r\n\r\nHot Reload works as expected, without any errors.\r\n\r\n## Actual Behavior\r\n\r\nHot Reload fails, and the following is observed in the output of Hot Reload:\r\n```\r\n19:44 51.27 [Error] E:\\repos\\[truncated]\\File.cs (line 1): error CS8055: Cannot emit debug information for a source text without encoding.\r\n19:44 51.27 Invalid changes were found. Please refer to the Error List window to fix those issues.\r\n```\r\n\r\nThe user is prompted to edit the code or rerun the program anew, after Hot Reload fails.\r\n\r\nThe bug can be worked around by manually changing and saving changes to the ABC file before hot reloading, without stopping the current execution. Once the file is manually changed, hot reloading works.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72984/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "danports",
        "created_at": "2024-04-19T04:24:22Z",
        "body": "I've run into this so many times, probably because I have a tendency to add types wherever I feel like it and then use the move to separate file action later on. Thanks @Rekkonnect for the bug report & workaround!"
      },
      {
        "user": "palenshus",
        "created_at": "2024-05-15T00:43:30Z",
        "body": "Wow, amazing job tracking down the repro mechanism for this!"
      },
      {
        "user": "theolivenbaum",
        "created_at": "2024-05-15T16:03:24Z",
        "body": "Any updates on this? I hit this issue constantly on Visual Studio"
      },
      {
        "user": "FabianOswald-WolfSystem",
        "created_at": "2024-07-10T09:51:02Z",
        "body": "Same her, Version 17.10.4"
      },
      {
        "user": "nathan130200",
        "created_at": "2024-07-30T17:19:23Z",
        "body": "Still not fix yet?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-30T17:31:41Z",
        "body": "@nathan130200 nope.  but PRs welcome :)"
      },
      {
        "user": "Rekkonnect",
        "created_at": "2024-07-30T17:33:02Z",
        "body": "Does this not need to have the \"help wanted\" label then?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-07-30T17:57:09Z",
        "body": "PRs always welcome.  Help wanted is more like: better odds of this happening if you just do it :)"
      },
      {
        "user": "nathan130200",
        "created_at": "2025-01-11T02:32:52Z",
        "body": "When an release for this fix will be available? Still getting same problem even with latest VS and .NET 9\n\n`error CS8055: Cannot emit debug information for a source text without encoding.`\n\nNow even worse, even closing/reopening VS don't have any effect, unable to use hot reloading in razor pages, need to restart entire server even for minimal fixes."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-01-11T06:03:00Z",
        "body": "@nathan130200 the linked pr days it went into 17.13p3"
      },
      {
        "user": "nathan130200",
        "created_at": "2025-01-12T23:15:49Z",
        "body": "Thanks for the info. Oh okay, I thought it was already in the release channel, its in preview."
      }
    ]
  },
  {
    "number": 72821,
    "title": "`where` is not suggested when adding the first type constraint to a local function",
    "created_at": "2024-03-31T13:12:56Z",
    "closed_at": "2024-04-02T17:26:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72821",
    "body": "## Version Used\r\nVS 2022 Version 17.9.5\r\nRoslyn 4.9.0 (a98c90d5645537)\r\n\r\n## Steps to Reproduce\r\n\r\n1. Begin declaring a generic local function with at least one type parameter\r\n2. After closing the argument list parentheses, begin typing `where`\r\n\r\nSample code:\r\n```csharp\r\nstatic void Outer()\r\n{\r\n    int Inner<T, U, V>()\r\n        // place cursor here\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n## Expected Behavior\r\n\r\n`where` is suggested, given the presence of type parameter in the local function.\r\n\r\n## Actual Behavior\r\n\r\nThe `where` keyword is not suggested at all. In fact, nothing is suggested in that area.\r\n\r\n### Note\r\n\r\nAfter adding the first `where` clause, typing `where` to initiate another clause properly suggests the `where` keyword.\r\nFor example, in the following code:\r\n```csharp\r\nstatic void Outer()\r\n{\r\n    int Inner<T, U, V>()\r\n        where T : class\r\n        // place cursor here\r\n    {\r\n    }\r\n}\r\n```\r\nthe `where` keyword is suggested.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72821/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "Rekkonnect",
        "created_at": "2024-03-31T16:43:48Z",
        "body": "Can I take this one up?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-03-31T16:47:16Z",
        "body": "yes"
      }
    ]
  },
  {
    "number": 72372,
    "title": "IntelliSense suggests the `readonly` modifier even when it's already present in the incomplete declaration",
    "created_at": "2024-03-03T01:28:34Z",
    "closed_at": "2024-03-05T23:19:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72372",
    "body": "**Version Used**:\r\nVS 2022 Version 17.9.2\r\nRoslyn 4.9.0 (a98c90d5645537)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Begin declaring any member, optionally including an accessibility modifier (`public`)\r\n2. Type `readonly`\r\n3. Begin typing `readonly` again, without completing the word\r\n\r\n**Expected Behavior**:\r\n\r\n`readonly` does not appear again, as it's illegal to include the same modifier more than once.\r\n\r\n**Actual Behavior**:\r\n\r\nThe `readonly` modifier is suggested again.\r\n\r\nNote: `static`, `partial` and other modifiers are not suggested more than once.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72372/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2024-03-04T14:57:50Z",
        "body": "Hey, can I take this?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-03-04T16:09:00Z",
        "body": "Yup"
      }
    ]
  },
  {
    "number": 72337,
    "title": "[Bug]: Suggestion `IDE0300` does not appear for arguments in primary constructor's base class constructor",
    "created_at": "2024-02-29T14:55:26Z",
    "closed_at": "2024-03-21T18:32:37Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72337",
    "body": "### Version Used\r\n\r\n- Compiler version: 4.10.0-2.24102.11 (b14dc4dc)\r\n- VSCode: 1.87.0, 019f4d1419fbc8219a181fab7892ebccf7ee29a2, x64\r\n- C# extension: v2.18.16, C# Dev Kit Extension: v1.3.10\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open or create any C# project in Visual Studio Code.\r\n2.\r\n   ```cs\r\n   class Class1(int[] arr);\r\n   \r\n   class Class2() : Class1(new int[] { 1, 2, 3 });\r\n   ```\r\n   (Side note: this also suffers from #72334, regardless of whether `Class2` has a body or not.)\r\n\r\n### Expected Behavior\r\n\r\nSuggestion `IDE0300` appears on the `new int[] { 1, 2, 3 }` argument.\r\n\r\n### Actual Behavior\r\n\r\nSuggestion `IDE0300` does not appear. For comparison, the suggestion *does* appear if a normal constructor is used.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72337/comments",
    "author": "just-ero",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2024-03-05T19:06:22Z",
        "body": "Hey, can I take this?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-03-05T19:25:33Z",
        "body": "Definitely :)"
      }
    ]
  },
  {
    "number": 72169,
    "title": "Missing opportunity for a collection expression in a value tuple",
    "created_at": "2024-02-19T15:46:27Z",
    "closed_at": "2024-03-27T18:42:34Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle",
      "Feature - Collection Expressions"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/72169",
    "body": "**Version Used**: \r\n17.10.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\npublic (int, List<int>) M() {\r\n  return (42, new List<int>());\r\n}\r\n```\r\n\r\n**Diagnostic Id**: none\r\n\r\n**Expected Behavior**:\r\nI don't see a reason why the `new List<int>()` expression couldn't be replaced by `[]`, so I expect code analysis to suggest that.\r\nDoing it manually works:\r\n```cs\r\npublic (int, List<int>) M() {\r\n  return (42, []);\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\nNothing is suggested.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/72169/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2024-02-21T19:39:25Z",
        "body": "@CyrusNajmabadi "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-21T19:43:06Z",
        "body": "Yup!"
      }
    ]
  },
  {
    "number": 71640,
    "title": "\"Extract interface\" generates invalid code for read-write properties",
    "created_at": "2024-01-14T00:48:42Z",
    "closed_at": "2024-01-31T17:58:41Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71640",
    "body": "**Version Used**: VS 17.8.4\r\n\r\n**Steps to Reproduce**:\r\n\r\nOpen the lightbulb menu on the type, select \"Extract interface…\" and confirm the dialog.\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    public int I { get; set; }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nValid code is generated.\r\n\r\n**Actual Behavior**:\r\nThe unexpected keyword \"readonly\" is placed in front of the \"get\" keyword, making the code syntactically invalid.\r\n\r\n```csharp\r\ninterface IS\r\n{\r\n    int I { readonly get; set; }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71640/comments",
    "author": "jhinder",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2024-01-23T21:10:23Z",
        "body": "Hey, can I take this one?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-01-23T21:13:34Z",
        "body": "@sdelarosbil definitely."
      }
    ]
  },
  {
    "number": 71433,
    "title": "Generate Method isn't offered if a non-applicable extension method exists",
    "created_at": "2024-01-01T21:28:51Z",
    "closed_at": "2024-10-26T18:08:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71433",
    "body": "Given:\r\n\r\n```\r\nvar x = new D();\r\nx.$$DoSomething();\r\n\r\npublic class C\r\n{\r\n}\r\n\r\npublic class D\r\n{\r\n}\r\n\r\npublic static class CExtensions\r\n{\r\n    public static void DoSomething(this C c)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nWith the cursor at `$$` it would be nice to be offered to generate the `DoSomething` method in `D`, but it is not. In fact there isn't even a diagnostic on `DoSomething()`, which might complicate things, but rather CS1929 is present on `x`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71433/comments",
    "author": "davidwengier",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-26T18:08:25Z",
        "body": "We would take a targeted community contribution here."
      }
    ]
  },
  {
    "number": 71418,
    "title": "[Bug]: Code action `Simplify conditional expression` leads to incorrect formatting",
    "created_at": "2023-12-27T23:25:53Z",
    "closed_at": "2024-12-02T23:33:05Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71418",
    "body": "### Version Used\r\n\r\n* Compiler version: '4.9.0-3.23604.10 (3d13136a)'\r\n* VSCode: 1.85.1, 0ee08df0cf4527e40edc9aa28f4b5bd38bbff2b2, x64\r\n* C# extension: v2.14.8, C# Dev Kit extension: v1.2.5\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create or open any C# project in Visual Studio Code.\r\n2. Create a method which includes a multi-line ternary expression including booleans:\r\n    ```cs\r\n    bool Foo() => true;\r\n    bool Bar() => true;\r\n\r\n    return Foo()\r\n        ? Bar()\r\n        : false;\r\n    ```\r\n3. Apply the recommended code action.\r\n\r\n### Expected Behavior\r\n\r\nThe simplified code is formatted correctly:\r\n```cs\r\nreturn Foo()\r\n    && Bar();\r\n```\r\nor:\r\n```cs\r\nreturn Foo() && Bar();\r\n```\r\n\r\n### Actual Behavior\r\n\r\nLeading indentations are removed:\r\n```cs\r\nreturn Foo()\r\n&& Bar();\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71418/comments",
    "author": "just-ero",
    "comments": [
      {
        "user": "just-ero",
        "created_at": "2024-09-13T22:41:58Z",
        "body": "This is still an issue on these versions:\r\n\r\n* Compiler: 4.12.0-3.24430.2 (28052736)  \r\n* .NET: 9.0.100-rc.1.24452.12  \r\n* Visual Studio Code: 1.93.1, `38c31bc77e0dd6ae88a4e9cc93428cc27a56ba40`, x64  \r\n* C# Extension: v2.46.32  \r\n* C# Dev Kit Extension: v1.11.6"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-25T21:15:06Z",
        "body": "We would take a targeted community PR here."
      }
    ]
  },
  {
    "number": 71245,
    "title": "IDE0028 suggests to refactor empty collection expressions",
    "created_at": "2023-12-13T07:50:55Z",
    "closed_at": "2023-12-20T03:01:50Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71245",
    "body": "**Version Used**: 4.8.0-7.23572.1\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nvar x = new List<object[]>();\r\nx.Add([]);\r\n```\r\n**Diagnostic Id**: IDE0028\r\n\r\n**Expected Behavior**:\r\nEither doesn't offer to refactor, or refactors to something that is equivalent and compiles.\r\n\r\n**Actual Behavior**:\r\nRefactors as below, triggering compile error CS0443, CS1003, and CS1525.\r\n```cs\r\nvar x = new List<object[]>()\r\n{\r\n  []\r\n};\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71245/comments",
    "author": "sehra",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2023-12-13T18:38:52Z",
        "body": "This might be a parser bug. If you replace the `[]` with `([])` then things start working."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-12-13T19:54:04Z",
        "body": "@RikkiGibson It's an IDE bug.  We need to parenthesize here.  Because `[]` makes it look like a dictionary initializer."
      },
      {
        "user": "RikkiGibson",
        "created_at": "2023-12-13T21:10:42Z",
        "body": "Is this the case only for `[]`, or for all collection-exprs used as collection initializer elements?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-12-13T21:39:44Z",
        "body": "@RikkiGibson likely *all* collection exprs.  Because `[a]` is a legal indexer for the collection-initializer.  "
      }
    ]
  },
  {
    "number": 71117,
    "title": "IDE0290 refactoring results in nullability error CS8601",
    "created_at": "2023-12-06T14:19:03Z",
    "closed_at": "2023-12-06T23:04:20Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/71117",
    "body": "**Version Used**: 4.8.0-7.23572.1+7b75981cf3bd520b86ec4ed00ec156c8bc48e4eb\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\npublic class Test\r\n{\r\n\tprivate object? _parameter;\r\n\r\n\tpublic Test(object parameter)\r\n\t{\r\n\t\t_parameter = parameter;\r\n\t}\r\n\tpublic void Remove()\r\n\t{\r\n\t\tInterlocked.Exchange(ref _parameter, null);\r\n\t}\r\n}\r\n```\r\n\r\n\r\n**Diagnostic Id**: `IDE0290` with fields removal\r\n\r\n**Expected Behavior**: no refactoring proposed\r\n\r\n**Actual Behavior**: refactoring introduce errors\r\n\r\n```cs\r\npublic class Test(object parameter)\r\n{\r\n\tpublic void Remove()\r\n\t{\r\n                // CS8601 Possible null reference assignment\r\n\t\tInterlocked.Exchange(ref parameter, null);\r\n\t}\r\n}\r\n```\r\n\r\nI think diagnostic shouldn't propose to remove fields if they have different nullability from parameter (or when field is nullable for non-nullable parameter).\r\n\r\nWithout field removal refactoring is correct\r\n```cs\r\npublic class Test(object parameter)\r\n{\r\n\tprivate object? _parameter = parameter;\r\n\r\n\tpublic void Remove()\r\n\t{\r\n\t\tInterlocked.Exchange(ref _parameter, null);\r\n\t}\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/71117/comments",
    "author": "MaceWindu",
    "comments": [
      {
        "user": "DoctorKrolic",
        "created_at": "2023-12-06T19:51:29Z",
        "body": "Cyrus: Adds `help wanted` label\r\nAlso Cyrus: Creates fixing PR just several hours later :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-12-06T20:16:32Z",
        "body": "Yup.  That is accurate :)"
      }
    ]
  },
  {
    "number": 70786,
    "title": "Exception in CompletionProvider takes down IntelliSense",
    "created_at": "2023-11-13T18:28:21Z",
    "closed_at": "2023-11-16T00:43:24Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "IntelliSense-Completion"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/70786",
    "body": "**Version Used**: \r\nmain\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create custom completion provider which unfortunately throws in `ShouldTriggerCompletion`:\r\n\r\n```csharp\r\n[Export]\r\npublic class ThrowingCompletionProvider : CompletionProvider\r\n{\r\n    public override bool ShouldTriggerCompletion(SourceText text, int caretPosition, CompletionTrigger trigger, OptionSet options)\r\n    {\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThis is debatable.\r\n\r\nMaybe the expectation is that the author of the CompletionProvider should catch all exceptions to prevent them bubbling up?\r\n\r\nGiven that this is a public extension point, it could also be wise for Roslyn to protect from user code throwing exceptions.\r\n\r\n**Actual Behavior**:\r\n\r\nThe exception effectively prevents the IntelliSense from showing up.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/70786/comments",
    "author": "jbevain",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-11-13T19:27:07Z",
        "body": "We should probably yellow-bar this, and disable that completion provider.  The same as what we do for fixers/refactorings."
      },
      {
        "user": "sailro",
        "created_at": "2023-11-16T07:37:03Z",
        "body": "Perfect. Thanks!"
      }
    ]
  },
  {
    "number": 70623,
    "title": "Implement abstract class code fix does not consider nullability for dynamic",
    "created_at": "2023-10-30T14:31:15Z",
    "closed_at": "2024-01-26T22:12:32Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/70623",
    "body": "**Version Used**: VS 17.8 Preview 5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have the following code:\r\n\r\n    ```c#\r\n    abstract class C\r\n    {\r\n        public abstract dynamic? M(dynamic? arg);\r\n    }\r\n\r\n    class D : C\r\n    {    \r\n    }\r\n    ```\r\n\r\n2. Invoke \"Implement abstract class\" on `D`.\r\n\r\n**Expected Behavior**:\r\n\r\nThe generated method matches the base class method in terms of nullability, i.e.:\r\n\r\n```c#\r\nclass D : C\r\n{\r\n    public override dynamic? M(dynamic? arg)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe generated methods is missing nullability annotations:\r\n\r\n```c#\r\nclass D : C\r\n{\r\n    public override dynamic M(dynamic arg)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/70623/comments",
    "author": "svick",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2024-01-25T15:47:28Z",
        "body": "Hey, can I take this one?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-01-25T16:00:18Z",
        "body": "Definitely!"
      }
    ]
  },
  {
    "number": 70135,
    "title": "Strange output for NormalizeWhitespace for `1 is var i`",
    "created_at": "2023-09-26T14:15:03Z",
    "closed_at": "2023-10-05T14:05:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/70135",
    "body": "**Version Used**: 4.7.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun the following code:\r\n\r\n```c#\r\nSyntaxFactory.ParseExpression(\"1 is var i\").NormalizeWhitespace().ToString()\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe code returns the string `\"1 is var i\"`, i.e. it returns the code unchanged.\r\n\r\n**Actual Behavior**:\r\n\r\nThe code returns `\"1is var i\"`, i.e. there is no space between `1` and `is`. This is technically correct C#, but I find this formatting quite odd and not consistent with how `is` is formatted in other cases.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/70135/comments",
    "author": "svick",
    "comments": [
      {
        "user": "pyoub",
        "created_at": "2023-10-01T04:52:30Z",
        "body": "Hello this is my first try contribute to ur nice project i did some analysis on this one i have the fix for it :) is't cool if i post a PR for this ?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-01T06:51:35Z",
        "body": "Yup. Totally cool. Thanks!"
      }
    ]
  },
  {
    "number": 70035,
    "title": "Will IDE0305 not support Prepend?",
    "created_at": "2023-09-20T15:19:11Z",
    "closed_at": "2024-10-26T15:57:08Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/70035",
    "body": "## Summary\r\n\r\n```cs\r\nint[] a = [1, 2, 3];\r\nint[] b = [4, 5];\r\n\r\nint[] x = a.Concat(b).ToArray();\r\n// → int[] x = [..a, ..b];\r\n\r\nint[] y = a.Append(4).ToArray();\r\n// → int[] x = [..a, 4];\r\n\r\nint[] z = a.Concat(b).Append(6).ToArray();\r\n// → int[] x = [..a, ..b, 6];\r\n\r\nint[] w = a.Prepend(0).ToArray();\r\n// expected: int[] w = [0, ..a];\r\n// actual: no code fix.\r\n```\r\n\r\n## Background and Motivation\r\n\r\nI have VS17.8p2 installed and was trying the IDE0305 fixer against our own code and while I was surprised that `Append` could be fixed, `Prepend` was left out.\r\n\r\n## Proposed Feature\r\n\r\nThe IDE0305 fixer supports `Prepend`.\r\n\r\n## Alternative Designs\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/70035/comments",
    "author": "ufcpp",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-09-20T16:09:13Z",
        "body": "Note. We're unlikely to do this as it would change the order the expressions are evaluated in. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-26T15:57:08Z",
        "body": "Closing as by design."
      }
    ]
  },
  {
    "number": 69869,
    "title": "Inline temporary variable adds unnecessary cast",
    "created_at": "2023-09-09T12:00:10Z",
    "closed_at": "2024-11-23T06:57:06Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69869",
    "body": "**Version Used**:\r\nLatest `main`\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nvar a = Math.Round(1.1D);\r\nvar b = a;\r\n```\r\nInline variable `a`;\r\n\r\n**Expected Behavior**:\r\n```cs\r\nvar b = Math.Round(1.1D);\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\nvar b = (double)Math.Round(1.1D);\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69869/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "DoctorKrolic",
        "created_at": "2023-09-09T12:04:20Z",
        "body": "Futhermore, after executing code action, IDE doesn't suggest you remove unnecessary cast. So this is simplifier's problem: it cannot determine, that in the given context overload with `double` return type is used (I guess this is the core problem)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-09-09T18:37:00Z",
        "body": "Doubles are challenging due to the casts having semantics even when the types are exactly the same. \r\n\r\nWe likely want to be cautious about adding the explicit fp cast in the first place. Avoiding it if we can be sure it isn't necessary. "
      },
      {
        "user": "DoctorKrolic",
        "created_at": "2023-09-09T19:02:43Z",
        "body": "> Doubles are challenging due to the casts having semantics even when the types are exactly the same.\r\n\r\nWait what?! Can you give an example?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-09-09T19:22:20Z",
        "body": "Machines often execute fp operations on higher precision than 32 or 64 bits. Casting explicitly reduces the precision down to those levels. So you can get different results. "
      },
      {
        "user": "pyoub",
        "created_at": "2023-10-18T02:46:09Z",
        "body": "i create a pr triying to fix this problem if you can review it please :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-18T05:05:12Z",
        "body": "@pyoub if you ping me tomorrow I can take a look!"
      },
      {
        "user": "pyoub",
        "created_at": "2023-10-19T18:04:02Z",
        "body": "@CyrusNajmabadi can you check the PR please @DoctorKrolic  already did and didnt like approve the solution. so is there any suggestion?"
      }
    ]
  },
  {
    "number": 69357,
    "title": "Code folding support for switch expression",
    "created_at": "2023-08-03T12:13:37Z",
    "closed_at": "2025-01-21T06:11:26Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69357",
    "body": "I have a very long switch expression, and it's always annoying when scrolling through this specific code file because I always have to scroll too much to get to the code before/after the switch expression. It would be very nice to have the little collapse/un-collapse button, similar to methods, classes, etc.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69357/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "Rekkonnect",
        "created_at": "2023-08-30T12:17:41Z",
        "body": "You probably mean a switch expression here; switch statements (`switch (expr)`) are actually collapsible, whereas switch expressions (`expr switch`) aren't."
      },
      {
        "user": "Youssef1313",
        "created_at": "2023-08-30T12:21:53Z",
        "body": "Yes indeed. I edited the title and description"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-23T04:39:37Z",
        "body": "We would take a targeted community PR here."
      }
    ]
  },
  {
    "number": 69177,
    "title": "\"Implement through\" isn't available for primary constructor parameters",
    "created_at": "2023-07-23T17:32:43Z",
    "closed_at": "2023-07-24T20:46:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/69177",
    "body": "**Version Used**: Visual Studio 2022, Version 17.7.0 Preview 4.0\r\n\r\n\"Implement interface through\" & \"implement abstract class through\" code fixes aren't available for primary constructor parameters, e.g. \"implement through 'stream'\" is available here:\r\n```c#\r\nclass StreamWrapper : Stream\r\n{\r\n    private readonly Stream stream;\r\n\r\n    public StreamWrapper(Stream stream)\r\n    {\r\n        this.stream = stream;\r\n    }\r\n}\r\n```\r\nbut not here:\r\n```c#\r\nclass StreamWrapper(Stream stream) : Stream\r\n{\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/69177/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-07-23T17:56:47Z",
        "body": "Would take a reasonably scoped and sized community pr here. "
      }
    ]
  },
  {
    "number": 67350,
    "title": "UseAutoProperty analyzer needs to be rewritten as a SymbolStart/End analyzer",
    "created_at": "2023-03-17T11:40:36Z",
    "closed_at": "2023-03-17T19:50:06Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/67350",
    "body": "Currently, the analyzer uses SemanticModel actions, but can report diagnostic across files for partial definitions of types. Such diagnostics are non-local diagnostics, and lightbulb does not support non-local diagnostics. Rewriting the analyzer as SymbolStart/End analyzer should allow reporting local diagnostics within any of the partial definitions.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/67350/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-03-17T15:24:08Z",
        "body": "I can try to take this."
      }
    ]
  },
  {
    "number": 67023,
    "title": "Make fixer for `CS0535` smarter when implementing `IEnumerable<T>`",
    "created_at": "2023-02-23T18:12:59Z",
    "closed_at": "2024-11-26T03:10:07Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/67023",
    "body": "Given code like:\r\n```cs\r\nclass MyClass : IEnumerable<int>\r\n{\r\n    \r\n}\r\n```\r\nTh fixer for `CS0535` currently doesn't treat this case as some kind of special, so applying it just creates method declarations for non-implemented members:\r\n```cs\r\nusing System.Collections;\r\n\r\nclass MyClass : IEnumerable<int>\r\n{\r\n    public IEnumerator<int> GetEnumerator()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\nHowever, implementation for non-generic enumerator in 99.99% cases would be then changed by user to\r\n```cs\r\nIEnumerator IEnumerable.GetEnumerator()\r\n{\r\n    return GetEnumerator();\r\n}\r\n```\r\nI think, considering that, fixer for `CS0535` can be made smarter in this specific case and produce code like this in the first place:\r\n```cs\r\nusing System.Collections;\r\n\r\nclass MyClass : IEnumerable<int>\r\n{\r\n    public IEnumerator<int> GetEnumerator()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n        return GetEnumerator();\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/67023/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2023-10-19T09:49:58Z",
        "body": "Assigning to @CyrusNajmabadi to review/triage the feature request."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-10-19T12:47:13Z",
        "body": "Yes. This would be nice to do. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-26T17:36:44Z",
        "body": "We woudl take a targeted user pr here."
      }
    ]
  },
  {
    "number": 66962,
    "title": "Parameter Info may not be shown after a named argument",
    "created_at": "2023-02-20T08:59:59Z",
    "closed_at": "2024-03-15T17:13:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IntelliSense-Quick Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66962",
    "body": "**Version Used**: VS 2022 17.4.5\r\n\r\n**Steps to Reproduce**:\r\nInvoke Parameter Info at the marked location.\r\n\r\n```csharp\r\nclass C\r\n{\r\n    public void M(string? a = null, string? b = null, int c = 0)\r\n    {\r\n        M(c: 0, $$);\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**: The Parameter Info tooltip is shown.\r\n\r\n**Actual Behavior**: The tooltip is not shown.\r\n\r\n* If another named argument is supplied, the tooltip is shown. Example: `M(c: 0, a: \"\", $$)`\r\n* If either of the `string?` parameters is removed from the method signature, the tooltip is also shown.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66962/comments",
    "author": "jhinder",
    "comments": [
      {
        "user": "Xyncgas",
        "created_at": "2023-02-26T13:01:12Z",
        "body": "That's because the compiler thinks maybe it is not there\r\n"
      },
      {
        "user": "mavasani",
        "created_at": "2023-10-19T09:48:19Z",
        "body": "@sharwell "
      },
      {
        "user": "ghost",
        "created_at": "2024-03-14T20:19:52Z",
        "body": "I could not reproduce this on my end, this might be fixed already"
      },
      {
        "user": "jhinder",
        "created_at": "2024-03-15T17:13:14Z",
        "body": "Yes, I can't reproduce this anymore on VS 17.10 P2 as well. Maybe it was fixed by accident in the past year."
      }
    ]
  },
  {
    "number": 66573,
    "title": "`IDE0059` is not fired for property pattern assignment",
    "created_at": "2023-01-27T13:32:22Z",
    "closed_at": "2023-04-05T19:34:54Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "good first issue",
      "Feature - IDE0059"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66573",
    "body": "**Version Used**: \r\n17.5 Preview 4\r\n\r\n**Steps to Reproduce**:\r\nCase1:\r\n```cs\r\nobject obj = \"str\";\r\n\r\nif (obj is string str)\r\n{\r\n\r\n}\r\n```\r\nCase 2:\r\n```cs\r\nobject obj = \"str\";\r\n\r\nif (obj is string { Length: > 0 } str)\r\n{\r\n\r\n}\r\n```\r\nCase 3:\r\n```cs\r\nobject obj = \"str\";\r\n\r\nif (obj is string { } str)\r\n{\r\n\r\n}\r\n```\r\n\r\n**Diagnostic Id**:\r\nIDE0059\r\n\r\n**Expected Behavior**:\r\n`IDE0059` is reported for all 3 cases\r\n\r\n**Actual Behavior**:\r\n`IDE0059` is reported only for case 1",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66573/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2023-01-30T20:11:22Z",
        "body": "@kinkeadian25 "
      },
      {
        "user": "kinkeadian25",
        "created_at": "2023-01-31T21:18:24Z",
        "body": "I will work on this, thanks @Youssef1313 !"
      },
      {
        "user": "kinkeadian25",
        "created_at": "2023-02-01T00:12:26Z",
        "body": "When I plug the first example into Sharplab, it says it is declaration pattern. The other two it gives me property pattern. So, does that mean it is not covering property pattern at any point as of now?"
      },
      {
        "user": "Youssef1313",
        "created_at": "2023-02-01T02:39:56Z",
        "body": "@kinkeadian25 Not sure, but generally, the analyzer might not be dealing with syntax. So you'd need to debug a unit test to see when things go wrong."
      }
    ]
  },
  {
    "number": 66343,
    "title": "`Add null check` is offered for arguments with default value of `null`",
    "created_at": "2023-01-10T15:16:31Z",
    "closed_at": "2024-10-25T18:14:56Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66343",
    "body": "**Version Used**:\r\nVS 17.5 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nclass MyClass\r\n{\r\n    void M(string [||]s = null)\r\n    {\r\n\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n`Add null check`, `Add 'string.IsNullOrEmpty' check` and `Add 'string.IsNullOrWhiteSpace' check` are not offered\r\n\r\n**Actual Behavior**:\r\nOpposite to expected",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66343/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-01-10T16:16:47Z",
        "body": "I'm fine with this sort of thing. It's a refactoring and the user may be adding the check first then removing the optional param. "
      },
      {
        "user": "DoctorKrolic",
        "created_at": "2023-01-10T16:52:52Z",
        "body": "Note: in nullable context declaring a nullable reference type argument does not trigger the refactoring to be offered:\r\n```cs\r\n#nullable enable\r\n\r\nclass MyClass\r\n{\r\n    void M(string? s) // No 'Add null check' refactorings are offered here\r\n    {\r\n\r\n    }\r\n}\r\n```\r\nThe logic \"User can fisrt apply the refactoring and then remove nullability annotation\" is true here as well, yet refactoring still checks for that. I feel like this is inconcictent behaviour and it should probably be tweaked to be one way or another (either offer refactorings everywhere or be smart in both scenarios). I vote for \"smartness\", so the refactorings list gets only what is actually useful in the given context without any junk. I suspect, the whole fix would be a single if statement change in refactoring's logic either way"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-01-10T17:21:31Z",
        "body": "I think we're overthinking things here. There are far more areas where we can provide high value to lots of users. Spending excessive time over fitting features is just not a good use of time and resources. "
      },
      {
        "user": "Youssef1313",
        "created_at": "2023-01-10T17:38:38Z",
        "body": "One can even come up with weird use cases like caller info attributes that default to `null` where someone might want to guard against a null.\r\n\r\nI don't think it's worth changing the behavior here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T18:14:56Z",
        "body": "Closing out as by design."
      }
    ]
  },
  {
    "number": 66009,
    "title": "Find all references for preprocessor symbol does not yield any results",
    "created_at": "2022-12-14T11:47:30Z",
    "closed_at": "2024-11-20T05:48:05Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/66009",
    "body": "## Summary\r\n\r\nFind all references could also yield results for the selected preprocessor symbol\r\n\r\n## Background and Motivation\r\n\r\nOftentimes custom configurations are being used, which include conditional preprocessor symbols, like `DEV_DEBUG` or `DEV_INTERNAL`, which are used in `#if` directives. Additionally, the `DEBUG` and `TRACE` symbols are defined in debug configurations on their own almost always, which come in handy in many applications.\r\n\r\n## Proposed Feature\r\n\r\nWhen using \"find all references\" I should be able to see all the places that I'm using the selected preprocessor symbol. For example, when I hover over the `DEBUG` symbol in the `#if DEBUG` directive, I should be able to see all the places that the `DEBUG` symbol is used. The behavior should also mind for the file-defined preprocessor symbols.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/66009/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-12-14T17:39:18Z",
        "body": "@Rekkonnect We'd likely takea  PR here if you wanted to contribute it."
      }
    ]
  },
  {
    "number": 65625,
    "title": "Make `Covert to raw string` refactoring understand interpolation",
    "created_at": "2022-11-27T15:21:25Z",
    "closed_at": "2023-09-21T20:42:46Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/65625",
    "body": "Currently `Covert to raw string` refactoring is not suggested, when invoked over interpolation string. It would be very helpful, if it can unserstand code like\r\n```cs\r\nvar str = @$\"\r\nclass C\r\n{{\r\n    {returnType} M()\r\n    {{\r\n    }}\r\n}}\"\r\n```\r\nand automatically determine how many interpolation tokens is required, so the result of converting code from above would be\r\n```cs\r\nvar str = $$\"\"\"\r\n    class C\r\n    {\r\n        {{returnType}} M()\r\n        {\r\n        }\r\n    }\r\n    \"\"\"\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/65625/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-27T17:33:02Z",
        "body": "@allisonchou for visibility "
      }
    ]
  },
  {
    "number": 65615,
    "title": "[VB.NET] Using the `Convert to conditional expression` quick fix generates a wrong DirectCast",
    "created_at": "2022-11-26T04:31:14Z",
    "closed_at": "2024-10-25T05:26:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/65615",
    "body": "I have this code(with a missing `End If`)\r\n\r\n```\r\nDim value As Double\r\nIf value >= 360 Then\r\n    value = value Mod 360\r\n ElseIf value < 0 Then\r\n    Dim v = (value Mod 360)\r\n    If v < 0 Then\r\n       value = 360 + v\r\n    Else\r\n       value = 0\r\n    End If\r\n```\r\n\r\nI used the quick fixes to convert the `if v` statement to an if expression and I got this\r\n```\r\nvalue = If(v < 0, 360 + v, DirectCast(0, Double))\r\n```\r\n\r\nWhich is strange and also gives an error, because direct cast can't be used with doubles and integer.\r\nSo, regardless the outer block has a proper close or not, this should not effect this fix, and DirectCast shouldn't be used between types that are not related, not to mention value types!\r\nNote that when I add the messing end if, the fix works as expected!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/65615/comments",
    "author": "VBAndCs",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-26T05:18:56Z",
        "body": "@VBAndCs We'd be happy to take a fix here if you'd like to contribute one.  Let us know and we can help you with it."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-26T05:21:09Z",
        "body": "@VBAndCs can you provide a larger repro?  Specifically, providing the definition of `value`?"
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-11-26T05:53:32Z",
        "body": "```\r\n Dim value As Double\r\n        If value >= 360 Then\r\n            value = value Mod 360\r\n        ElseIf value < 0 Then\r\n            Dim v = (value Mod 360)\r\n            If v < 0 Then\r\n                value = 360 + v\r\n            Else\r\n                value = 0\r\n            End If\r\n```\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-26T17:17:18Z",
        "body": "Thanks!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:26:10Z",
        "body": "Closing as we are not likely to be investing in these scenarios."
      }
    ]
  },
  {
    "number": 65535,
    "title": "CS1998 proposed fix \"Make method synchronous\" should not be offered for overrides and interface implementations",
    "created_at": "2022-11-21T14:17:24Z",
    "closed_at": "2024-11-22T19:34:39Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "good first issue"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/65535",
    "body": "**Version Used**: VS 17.4.1 (VisualStudio.17.Release/17.4.1+33110.190 ; C# Tools 4.4.0-6.22559.4+d7e8a398ef479a908e76bded82150c39251d0c9c)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write the following code:\r\n\r\n```csharp\r\nusing System.Threading.Tasks;\r\n\r\nabstract class C\r\n{\r\n    public abstract Task M();\r\n}\r\n\r\nclass D : C\r\n{\r\n    public override async Task M()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n2. Open the lightbulb menu for the CS1998 (\"the async method lacks await operators\") warning\r\n\r\n(Note: this also repros with a non-abstract `C` and a `virtual` `M`, or with `C` being an `interface`)\r\n\r\n**Diagnostic Id**: CS1998\r\n\r\n**Expected Behavior**: The proposed fixes should only contain actions that are reasonable in context\r\n\r\n**Actual Behavior**: The proposed fixes contain \"Make method synchronous\", which changes `D.M` to `public override void M()` but does not change `C.M` (and in the general case, cannot), leading to a compile error.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/65535/comments",
    "author": "SolalPirelli",
    "comments": [
      {
        "user": "victor-pogor",
        "created_at": "2023-12-20T12:47:08Z",
        "body": "Looking through the existing tests and related issues (#50522, #10456, #68249), the `CS1998` fix will lead to compiler errors if applied for:\r\n\r\n- `virtual` method in the base class\r\n- `override` method in the derived class\r\n- implemented method from an interface\r\n- lambda expressions\r\n- anonymous methods\r\n\r\n```diff\r\ninterface IC\r\n{\r\n    public Task M3();\r\n}\r\n\r\nabstract class C\r\n{\r\n    public abstract Task M1();\r\n-   public virtual async Task M2() { }\r\n+   public virtual void M2() { }\r\n    // CS0508    'D.M2()': return type must be 'Task' to match overridden member 'C.M2()'\r\n\r\n}\r\n\r\nclass D : C, IC, IAsyncDisposable\r\n{\r\n-   public override async Task M1()\r\n+   public override void M1()\r\n    // CS0508  'D.M1()': return type must be 'Task' to match overridden member 'C.M1()'\r\n    {\r\n    }\r\n\r\n-   public override async Task M2()\r\n+   public override void M2()\r\n    // CS0508  'D.M2()': return type must be 'Task' to match overridden member 'C.M2()'\r\n    {\r\n    }\r\n\r\n-   public async Task M3()\r\n+   public void M3()\r\n    // CS0738  'D' does not implement interface member 'IC.M3()'. 'D.M3()' cannot implement 'IC.M3()' because it does not have the matching return type of 'Task'.\r\n\r\n    {\r\n    }\r\n\r\n    public async Task M4()\r\n    {\r\n-       Func<Task> f1 = async () => { };\r\n+       Func<Task> f1 = () => { };\r\n        // CS1643  Not all code paths return a value in lambda expression of type 'Func<Task>'\r\n\r\n-       Func<string, Task> f2 = async a => { };\r\n+       Func<string, Task> f2 = a => { };\r\n        // CS1643  Not all code paths return a value in lambda expression of type 'Func<string, Task>'\r\n\r\n-       Func<string, Task<int>> f3 = async a => 1;\r\n+       Func<string, Task<int>> f3 = a => 1;\r\n        // CS0029  Cannot implicitly convert type 'int' to 'System.Threading.Tasks.Task<int>'\r\n        // CS1662  Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\r\n\r\n-       Func<Task> f4 = async delegate { };\r\n+       Func<Task> f4 = delegate { };\r\n        // CS1643  Not all code paths return a value in anonymous method of type 'Func<Task>'\r\n    }\r\n\r\n-   public async ValueTask DisposeAsync()\r\n+   public ValueTask Dispose()\r\n    // CS0161  'D.Dispose()': not all code paths return a value\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nDoes this mean the fix should not be applied to the cases mentioned above?\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2024-02-19T14:48:51Z",
        "body": "Hey, can I take this?\r\n\r\nI think not offering it for all the cases outlined here seems reasonable."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-19T15:53:02Z",
        "body": "No.  We have open design questions about this. As an example, I ended up still using this as part of a series of refactorings I was making to some code I was writing. \n\nOften it is better to still allow the user to do something, versus disabling it and making them confused why something is missing. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-22T19:34:39Z",
        "body": "Closing out as workign as intended.  Blocking fixes is problematic as users often want to perform a series of edits.  Here, those edits are fine to just that method, and the user can make further edits past that."
      }
    ]
  },
  {
    "number": 65323,
    "title": "'Use pattern matching' should prefer 'Coalesce with throw expression'",
    "created_at": "2022-11-09T23:59:06Z",
    "closed_at": "2022-11-22T07:11:17Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/65323",
    "body": "Right now the IDE shows a suggestion on this code\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        // ℹ️ IDE0019 Use pattern matching\r\n        var item = FindItem() as C;\r\n        if (item == null)\r\n            throw new System.InvalidOperationException();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n\r\n💡 Use pattern matching:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (FindItem() is not C item)\r\n            throw new System.InvalidOperationException();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n\r\n### Improvement\r\n\r\nIt would be better not to use pattern matching. Instead, \"Coalesce with throw expression\" should be suggested:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var item = FindItem() as C\r\n            ?? throw new System.InvalidOperationException();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n\r\nMaybe \"Merge assignment with null check\" would be a good alternative name.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/65323/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "jnm2",
        "created_at": "2022-11-10T00:01:36Z",
        "body": "It would be nice if it worked without requiring `as`, too:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        // ℹ️ IDExxxx Merge assignment with null check\r\n        var item = FindItem();\r\n        if (item == null)\r\n            throw new System.InvalidOperationException();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-10T00:06:28Z",
        "body": "I'll take this."
      },
      {
        "user": "jnm2",
        "created_at": "2022-11-10T00:22:22Z",
        "body": "If \"throw\" doesn't appear in the message, it could be generalized to this:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        // ℹ️ IDExxxx Merge assignment with null check\r\n        var item = FindItem();\r\n        if (item == null)\r\n            item = new();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n\r\n💡 Merge assignment with null check:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var item = FindItem() ?? new();\r\n    }\r\n\r\n    object FindItem() => null;\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 64787,
    "title": "VB.NET `Convert If to Select Case` code fix bug",
    "created_at": "2022-10-18T00:03:35Z",
    "closed_at": "2024-10-25T04:54:52Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/64787",
    "body": "**Version Used**: \r\nLatest\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  use this snippet:\r\n```vb\r\n  Public Sub Main()\r\n        Dim x = \"\"\r\n        If x = \"s\" Then\r\n            x = \"\"\r\n        ElseIf Foo() Then\r\n            x = \"1\"\r\n        End If\r\n    End Sub\r\n\r\n    Function Foo() As Boolean\r\n        Return True\r\n    End Function\r\n```\r\n\r\n2. Move the caret to the `If` token and from the bulb choose `Convert to select case` \r\n\r\n\r\n**Expected Behavior**:\r\nGet this converted code:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n                x = \"\"\r\n            Case Else\r\n             If Foo() Then\r\n                x = \"1\"\r\n             End If\r\n        End Select\r\n```\r\n**Actual Behavior**:\r\nThe converted code removed the elsif condition:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n                x = \"\"\r\n            Case Else\r\n                x = \"1\"\r\n        End Select\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/64787/comments",
    "author": "VBAndCs",
    "comments": [
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T00:11:02Z",
        "body": "There are more issues about this code fix, regarding comments:\r\nThis code:\r\n```vb\r\n        If x = \"s\" Then\r\n            x = \"\" ' Comment 1\r\n        Else\r\n            x = \"1\" ' Comment 2\r\n        End If\r\n```\r\n\r\nis converted to:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n                x = \"\" ' Comment 1\r\n            Case Else\r\n                x = \"1\" ' Comment 2\r\n        End Select ' Comment 2\r\n```\r\n\r\nAnd this one:\r\n```VB\r\n        Dim x = \"\"\r\n        If x = \"s\" Then\r\n            ' Comment 1\r\n        Else\r\n            ' Comment 2\r\n        End If\r\n```\r\n\r\nis converted to:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n            Case Else\r\n        End Select\r\n```\r\n\r\nWith comments erased!\r\nComments are important to keep.\r\n"
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T00:14:51Z",
        "body": "Comments will be erased also from this:\r\n```vb\r\n        Dim x = \"\"\r\n        If x = \"s\" Then ' Comment 1\r\n            x = \"1\"\r\n        Else  ' Comment 2\r\n            x = \"\"\r\n        End If\r\n```\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T00:15:18Z",
        "body": "@VBAndCs We'd def appreciate any contributions here if you'd be interested in it.  We'd be happy to help you walk through getting enlisted and making a PR to solve this.  Right now this would likely be on our backlog, but we'd take a small, scoped, PR to address these concerns you've found.  Thanks, and let us know what you think!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T00:34:19Z",
        "body": "Bug is lkely in VisualBasicConvertIfToSwitchCodeRefactoringProvider.Rewriting.vb in AsSwitchSectionStatements.  It's probably not handling ElseIfs properly."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T00:36:01Z",
        "body": "> Comments will be erased also from this:\r\n\r\n@VBAndCs it would probably be best if you opened separate issues here.  that way individual fixes can close out the issue and we can track things appropriately.  thanks!"
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T00:55:21Z",
        "body": "@CyrusNajmabadi \r\nThis fix should be revised and tested as a whole."
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T01:06:13Z",
        "body": "> Bug is lkely in VisualBasicConvertIfToSwitchCodeRefactoringProvider.Rewriting.vb in AsSwitchSectionStatements. It's probably not handling ElseIfs properly.\r\n\r\nThere is another way to look at it: This fix shouldn't be suggested at first place, because the two if branches don't check values of the same variable!\r\nIt may be appropriate if there are two or more branches testing x, and the last elseif testing something else.\r\nSo, this fix may be written on the first assumption, and the bug is that the code that suggests fixes has changed!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T02:23:34Z",
        "body": "> This fix should be revised and tested as a whole.\r\n\r\n@VBAndCs there is no need to combine the fixes and we would take independent prs on this. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T02:24:26Z",
        "body": "> There is another way to look at it: This fix shouldn't be suggested at first place, because the two if branches don't check values of the same variable!\r\n\r\nThat's not really important here. It goes into the default case.  So it doesn't need to test anything. \r\n\r\n"
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T03:10:13Z",
        "body": "@CyrusNajmabadi \r\nlook at this too:\r\n```vb\r\n        If x = \"s\" Then ' Comment 1\r\n            x = \"1\"\r\n        ElseIf Foo() Then\r\n            x = \"\"\r\n        ElseIf x = \"t\" Then\r\n            x = \"2\"\r\n        End If\r\n```\r\n\r\nit is converted to:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n                x = \"1\"\r\n            Case Else\r\n                x = \"\"\r\n        End Select\r\n```\r\n\r\nWhich removed a full branch!\r\nThe suggestion to convert to select case is wrong at the first place, because this is not a select case structure!\r\n"
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-10-18T03:14:14Z",
        "body": "And this one is fun:\r\n```vb\r\n        Dim x = \"\"\r\n        Dim y = 1\r\n        If x = \"s\" Then ' Comment 1\r\n            x = \"1\"\r\n        ElseIf y = 2 Then\r\n            x = \"\"\r\n        ElseIf x = \"t\" And y = 1 Then\r\n            x = \"2\"\r\n        End If\r\n```\r\n\r\nit is converted to:\r\n```vb\r\n        Select Case x\r\n            Case \"s\"\r\n                x = \"1\"\r\n            Case Else\r\n                x = \"\"\r\n        End Select\r\n```\r\n\r\nobviously, the fix is built on the assumption that this is a valid select case, which should be verified by the analyzer in the first place.\r\nI used this fix many times in the past, but today I started to face bugs. You should review last updates.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T03:39:34Z",
        "body": "> Which removed a full branch!\r\n\r\nYes, as i said, the elseif cases are not being handled properly. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T03:40:02Z",
        "body": "> The suggestion to convert to select case is wrong at the first place, because this is not a select case structure!\r\n\r\nAgain, as per above, we would gladly take contributions here.  :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-18T03:40:58Z",
        "body": "> You should review last updates.\r\n\r\nIf you notice anything, please let us know.  You can also work with the team on our discord channel.  Thanks!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:54:52Z",
        "body": "Closing out as we are not likely to be making changes here."
      }
    ]
  },
  {
    "number": 64111,
    "title": "\"Use recursive patterns\" suggests redundant \"this is { ... }\" pattern",
    "created_at": "2022-09-17T20:28:59Z",
    "closed_at": "2024-02-28T21:54:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/64111",
    "body": "**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2022\r\nVersion 17.2.4\r\nVisualStudio.17.Release/17.2.4+32602.215\r\n\r\nC# Tools   4.2.0-4.22281.5+8d3180e5f00d42f0f0295165f756f368f0cbfa44\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Bar\r\n{\r\n    public Qux? Qux { get; }\r\n\r\n    void Foo()\r\n    {\r\n        if (Qux != null && Qux.Color != ConsoleColor.Red)\r\n        {\r\n            Console.WriteLine(\"A\");\r\n        }\r\n    }\r\n}\r\n\r\nclass Qux\r\n{\r\n    public ConsoleColor Color { get; }\r\n}\r\n```\r\n\r\nGenerated code in `Foo` is equivalent to:\r\n\r\n```csharp\r\n\tif (Qux != null && Qux.Color != ConsoleColor.Red) { ... }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n\"Use recursive patterns\" rewrites `Foo` to:\r\n\r\n```csharp\r\n    void Foo()\r\n    {\r\n        if (Qux is { Color: not ConsoleColor.Red })\r\n        {\r\n            Console.WriteLine(\"A\");\r\n        }\r\n    }\r\n```\r\n\r\nGenerated code in `Foo` is equivalent to:\r\n\r\n```csharp\r\n\tQux qux = Qux;\r\n\tif (qux != null && qux.Color != ConsoleColor.Red) { ... }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n\"Use recursive patterns\" rewrites `Foo` to:\r\n\r\n```csharp\r\n    void Foo()\r\n    {\r\n        if (this is { Qux: not null, Qux.Color: not ConsoleColor.Red })\r\n        {\r\n            Console.WriteLine(\"A\");\r\n        }\r\n    }\r\n```\r\n\r\nwhere `this is { ... }` should always pass the `null` check, and simply using `Qux is { Color: not ConsoleColor.Red }` would already carry the `null` check for `Qux`.\r\n\r\nGenerated code has the redundant `null` check for `this`:\r\n\r\n```csharp\r\n\tif (this != null)\r\n\t{\r\n\t\tQux qux = Qux;\r\n\t\tif (qux != null && qux.Color != ConsoleColor.Red)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"A\");\r\n\t\t}\r\n\t}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/64111/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-09-17T21:31:07Z",
        "body": "@alrz ?"
      },
      {
        "user": "alrz",
        "created_at": "2022-09-20T19:48:32Z",
        "body": "I think avoiding the redundant null check pattern will also resolve the issue with 'this', however we still do this when there's no other common receiver eg\n\n```cs\nthis.Prop1 && this.Prop2\n```"
      },
      {
        "user": "ghost",
        "created_at": "2024-02-19T20:15:53Z",
        "body": "Hey, can I take this?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-02-19T20:35:11Z",
        "body": "Definitely!"
      }
    ]
  },
  {
    "number": 64089,
    "title": "Add a lightbulb option for remove and sort usings",
    "created_at": "2022-09-16T17:11:58Z",
    "closed_at": "2024-10-25T04:53:33Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/64089",
    "body": "In addition to having the `remove and sort usings` in the toolbar menu we should add an option in the lightbulb since we also have an option to `remove unnecessary usings` there too.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/64089/comments",
    "author": "mikadumont",
    "comments": [
      {
        "user": "kimsey0",
        "created_at": "2022-10-12T22:55:19Z",
        "body": "I'll have a go at this."
      },
      {
        "user": "kimsey0",
        "created_at": "2022-10-13T22:45:33Z",
        "body": "A few questions discovered during my work implementing this so far:\r\n1. Should this be a new code fix for the existing `RemoveUnnecessaryImportsFixable` diagnostic, which would thus show up whenever there's unnecessary usings, or should it be a new type of diagnostic that's triggered only when there's unnecessary usings _and_ usings that are in the wrong order?\r\n\r\nI've implemented the former, while the latter seems to require more work, since `RemoveUnnecessaryImportsFixable` is a special kind of _trigger diagnostic_ I don't know about, and determining if usings are in order from an analyzer seems to require sorting them with the user's `PlaceSystemNamespaceFirst` and `SeparateImportDirectiveGroups` options.\r\n\r\n2. If this is implemented as another code fix for the existing `RemoveUnnecessaryImportsFixable`, should it be above or below the existing _Remove Unnecessary Usings_ in the lightbulb? I assume below.\r\n3. What should be the label of this new option in the lightbulb? It could be _Remove and Sort Usings_ like in the toolbar menu, but that differs a little bit from the existing _Remove Unnecessary Usings_ label.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-13T23:56:02Z",
        "body": "> or should it be a new type of diagnostic that's triggered only when there's unnecessary usings and usings that are in the wrong order\r\n\r\nIt should be this.\r\n\r\n> should it be above or below the existing Remove Unnecessary Usings in the lightbulb? I assume below.\r\n\r\nCorrect, it should be below.\r\n\r\n> It could be Remove and Sort Usings\r\n\r\nLet's go with this for now.  \r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:53:33Z",
        "body": "Closing out due to lack of movement."
      }
    ]
  },
  {
    "number": 63917,
    "title": "Extract local function puts function in disabled section",
    "created_at": "2022-09-10T23:46:40Z",
    "closed_at": "2024-12-02T22:18:57Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/63917",
    "body": "**Version Used**: VS 2022.4p1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nvoid M()\r\n{\r\n    Console.WriteLine(\"test1\");\r\n    Console.WriteLine(\"test2\");\r\n#if DEBUG\r\n    Console.WriteLine(\"test3\");\r\n#endif\r\n}\r\n```\r\n\r\nPerform an extract local function on the first line in `M`, the `Console.WriteLine(\"test1\")` call.\r\n\r\n**Expected Behavior**:\r\n\r\n```cs\r\nvoid M()\r\n{\r\n    NewMethod();\r\n    Console.WriteLine(\"test2\");\r\n#if DEBUG\r\n    Console.WriteLine(\"test3\");\r\n#endif\r\n\r\n    static void NewMethod()\r\n    {\r\n        Console.WriteLine(\"test1\");\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```cs\r\nvoid M()\r\n{\r\n    NewMethod();\r\n    Console.WriteLine(\"test2\");\r\n#if DEBUG\r\n    Console.WriteLine(\"test3\");\r\n\r\n    static void NewMethod()\r\n    {\r\n        Console.WriteLine(\"test1\");\r\n    }\r\n#endif\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/63917/comments",
    "author": "333fred",
    "comments": [
      {
        "user": "333fred",
        "created_at": "2022-09-11T00:18:56Z",
        "body": "Likely important note for the repro: I'm in Debug mode when I'm doing these steps, so the section is actually active. It just breaks when you switch modes."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-09-11T00:58:38Z",
        "body": "Ok to fix this if the complexity of the solution is manageable. "
      }
    ]
  },
  {
    "number": 63628,
    "title": "\"Change signature\" drops namespace qualifier for alias-qualified names",
    "created_at": "2022-08-26T21:24:34Z",
    "closed_at": "2024-10-25T04:32:53Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/63628",
    "body": "**Version Used**: 17.4 P1 (4.4.0-1.22403.13)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Reference an assembly or project with at least one public type in the project file and assign it an alias.\r\n2. At the top of a C# file, write an `extern alias` directive for that alias.\r\n3. Write a record declaration with no parameters.\r\n4. Open the lightbulb menu on the record and select \"Change signature\", then click \"Add\".\r\n5. Write the alias-qualified type name and a parameter name, select 'Introduce undefined TODO variables', and confirm both dialogs.\r\n\r\n**Expected Behavior**: The alias-qualified name is added as a parameter.\r\n\r\n**Actual Behavior**: The qualified name (without the alias!) is added as a parameter. If the same qualified name is already present in the compilation, this may even compile, but it will not be what the user intended.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/63628/comments",
    "author": "jhinder",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:32:53Z",
        "body": "Closing out as we are not investing in extern alias scenarios in the ide."
      }
    ]
  },
  {
    "number": 63163,
    "title": "`IDE0240` codefix leaves redundunt blank line",
    "created_at": "2022-08-03T12:34:15Z",
    "closed_at": "2024-02-22T21:37:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/63163",
    "body": "**Version Used**:\r\nVS 2022 v17.3 Preview 6\r\n\r\n**Steps to Reproduce**:\r\n1) Create new console app, it will contain `<Nullable>enable</Nullable>` in a `.csproj` file by default\r\n2) Add this code to `Program.cs`:\r\n```cs\r\nusing System;\r\n\r\n#nullable enable\r\n\r\nnamespace MyNamespace;\r\n\r\nclass MyClass\r\n{\r\n\r\n}\r\n```\r\n3) Invoke codefix of `IDE0240` on `#nullable enable`\r\n\r\n**Expected Behavior**:\r\n```cs\r\nusing System;\r\n\r\nnamespace MyNamespace;\r\n\r\nclass MyClass\r\n{\r\n\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\nusing System;\r\n\r\n\r\nnamespace MyNamespace;\r\n\r\nclass MyClass\r\n{\r\n\r\n}\r\n```\r\n_Note that there are 2 blank lines between `using System;` and `\r\nnamespace MyNamespace;`_",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/63163/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2024-02-15T15:02:49Z",
        "body": "Hey, can I take this?"
      },
      {
        "user": "sharwell",
        "created_at": "2024-02-15T15:04:23Z",
        "body": "@sdelarosbil Sure 👍 "
      }
    ]
  },
  {
    "number": 62936,
    "title": "OperatorPlacementWhenWrapping should be moved to formatting options",
    "created_at": "2022-07-26T06:19:59Z",
    "closed_at": "2024-10-22T21:11:49Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - Editor Config UI"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62936",
    "body": "The option is currently in code-style options, but it's not really a code-style option.\r\n\r\nIt should be moved to formatting options, or turned into a code-style option with an analyzer.\r\n\r\n@mavasani @CyrusNajmabadi  Let me know if you think there should be an associated analyzer or just be moved to formatting options.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62936/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T21:11:49Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 62473,
    "title": "IDE0074 is offered for pointers",
    "created_at": "2022-07-07T18:07:03Z",
    "closed_at": "2022-07-07T21:03:24Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62473",
    "body": "**Version Used**: \r\nVersion 17.4.0 Preview 1.0 [32706.444.main]\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nunsafe class Program\r\n{\r\n    private static void Main()\r\n    {\r\n        byte* ptr = null;\r\n        if (ptr is null)\r\n        {\r\n            ptr = Get();\r\n        }\r\n    }\r\n\r\n    static byte* Get() => null;\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\nIDE0074 isn't offered.\r\n\r\n**Actual Behavior**:\r\nIDE0074 is offered and the fixer generates invalid code:\r\n```C#\r\nunsafe class Program\r\n{\r\n    private static void Main()\r\n    {\r\n        byte* ptr = null;\r\n        ptr ??= Get();\r\n    }\r\n\r\n    static byte* Get() => null;\r\n}\r\n```\r\nbecause for whatever reason `??` and `??=` don't work with pointers:\r\n```\r\nError CS0019 Operator '??=' cannot be applied to operands of type 'byte*' and 'byte*'\r\n```\r\n\r\ncc: @CyrusNajmabadi ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62473/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-07-07T18:19:45Z",
        "body": "Fun :)"
      },
      {
        "user": "Youssef1313",
        "created_at": "2022-07-07T18:59:09Z",
        "body": "I'm taking this one :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-07-07T19:10:56Z",
        "body": "I strongly guessed that would happen :D"
      }
    ]
  },
  {
    "number": 62356,
    "title": "Generic's closing `>` is missing when there is already an identifier name specified",
    "created_at": "2022-07-03T16:00:17Z",
    "closed_at": "2024-10-22T21:06:22Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62356",
    "body": "**Version Used**:\r\nVS 27.3 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nclass MyClass\r\n{\r\n    public List$$ list;\r\n}\r\n```\r\nThen type `<`\r\n\r\n**Expected Behavior**:\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nclass MyClass\r\n{\r\n    public List<$$> list;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nclass MyClass\r\n{\r\n    public List<$$ list;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62356/comments",
    "author": "DoctorKrolic",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T21:06:22Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 62162,
    "title": "Generated constructor with invalid parameter name",
    "created_at": "2022-06-27T18:59:35Z",
    "closed_at": "2022-07-05T20:34:57Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/62162",
    "body": "**Version Used**: \r\n\r\nMicrosoft Visual Studio Community 2022, 17.2.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Enter the following code in a C# project in Visual Studio.\r\n```\r\nclass MyClass\r\n{\r\n    int _0;\r\n}\r\n```\r\n\r\n2. Let the IDE generate a constructor including the field `_0` for me. (Right click on `MyClass`)\r\n\r\n**Expected Behavior**:\r\n\r\nThe IDE generates a functional constructor.\r\n\r\n**Actual Behavior**:\r\n\r\nIt generates:\r\n\r\n```\r\nclass MyClass\r\n{\r\n    int _0;\r\n\r\n    public MyClass(int 0)\r\n    {\r\n        _0 = 0;\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/62162/comments",
    "author": "tfenise",
    "comments": [
      {
        "user": "ShahriyarB",
        "created_at": "2022-06-28T05:57:18Z",
        "body": "What would you suggest for the name of _0 variable in the constructor?"
      },
      {
        "user": "tfenise",
        "created_at": "2022-06-28T13:01:56Z",
        "body": "Currently:\r\n\r\n```\r\nclass MyClass\r\n{\r\n    int a;\r\n\r\n    //generated constructor\r\n    public MyClass(int a)\r\n    {\r\n        this.a = a;\r\n    }\r\n}\r\n```\r\n\r\n```\r\nclass MyClass\r\n{\r\n    int _a;\r\n\r\n    //generated constructor\r\n    public MyClass(int a)\r\n    {\r\n        _a = a;\r\n    }\r\n}\r\n```\r\n\r\nFor a field named `_0`, I think it should generate:\r\n```\r\nclass MyClass\r\n{\r\n    int _0;\r\n\r\n    //proposed generated constructor\r\n    public MyClass(int _0)\r\n    {\r\n        this._0 = _0;\r\n    }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 61985,
    "title": "Inheriting multiple generic collections, LINQ extensions lose smart hints",
    "created_at": "2022-06-17T07:23:26Z",
    "closed_at": "2024-10-22T21:03:04Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61985",
    "body": "**Version Used**: \r\nVisual Studio 2019+\r\n\r\n**Steps to Reproduce**:\r\nPlease see code.\r\n\r\n**Expected Behavior**:\r\nPlease see code.\r\n\r\n**Actual Behavior**:\r\nPlease see code.\r\n\r\n**Reference Code**:\r\n``` C#\r\nvar test = new TestCollection();\r\n\r\n// The IDE is not able to prompt the object for the proper LINQ methods, you have to manually force the writing\r\ntest.Where<Dog>(w => w is null);\r\ntest.Where<Cat>(w => w is null);\r\n\r\npublic class TestCollection : IEnumerable<Dog>, IEnumerable<Cat>\r\n{\r\n\tIEnumerator<Cat> IEnumerable<Cat>.GetEnumerator()\r\n\t{\r\n\t\tthrow new NotImplementedException();\r\n\t}\r\n\r\n\tIEnumerator<Dog> IEnumerable<Dog>.GetEnumerator()\r\n\t{\r\n\t\tthrow new NotImplementedException();\r\n\t}\r\n\r\n\tIEnumerator IEnumerable.GetEnumerator()\r\n\t{\r\n\t\tthrow new NotImplementedException();\r\n\t}\r\n}\r\n\r\npublic class Dog\r\n{\r\n\r\n}\r\n\r\npublic class Cat\r\n{\r\n\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61985/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "dotnet-issue-labeler[bot]",
        "created_at": "2022-06-17T07:23:30Z",
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T21:03:04Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 61562,
    "title": "CS1591 CodeFix does not work correctly when there is anything but OpenBraceToken",
    "created_at": "2022-05-27T17:33:24Z",
    "closed_at": "2024-11-22T19:36:19Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61562",
    "body": "since #56620 was done here, I think this belongs here\r\n\r\n**Version Used**: \r\nVisualStudio (with a \"clean rootsuffix\"): 17.2.2\r\nDotNet: 6.0.300\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Solution/Project (eg ConsoleApp) with net6.0\r\n2. we use a 2 wide 'space' smart indent; if that matters\r\n3. in the csproj add/enable: `<GenerateDocumentationFile>true</GenerateDocumentationFile>`\r\n4. implement/overrride abstract member. Like This:\r\n```cs\r\nnamespace Issue; \r\n\r\n/// <summary>\r\n/// Hello C1\r\n/// </summary>\r\npublic abstract class Class1\r\n{\r\n  /// <summary>\r\n  /// Hello C1.DoStuff\r\n  /// </summary>\r\n  public abstract void DoStuff();\r\n}\r\n\r\n/// <summary>\r\n/// Hello C2\r\n/// </summary>\r\npublic class Class2 : Class1\r\n{\r\n  private const int Number = 1;\r\n\r\n  public override void DoStuff()\r\n  {\r\n    throw new NotImplementedException();\r\n  }\r\n}\r\n```\r\n\r\n5. Notice `Class2.DoStuff` raises CS1591\r\n6. Invoke CodeActions on it (Alt+Enter) and choose \"Excplicitly inherit documentation\" and apply\r\n\r\n**Expected Behavior**:\r\n```cs\r\npublic class Class2 : Class1\r\n{\r\n  private const int Number = 1;\r\n\r\n  /// <inheritdoc/>\r\n  public override void DoStuff()\r\n  {\r\n    throw new NotImplementedException();\r\n  }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\npublic class Class2 : Class1\r\n{\r\n  private const int Number = 1;\r\n/// <inheritdoc/>\r\n\r\n  public override void DoStuff()\r\n  {\r\n    throw new NotImplementedException();\r\n  }\r\n}\r\n```\r\n\r\nNotice:\r\n - no leading whitespace \r\n - Trivia is \"attached to\" the bottom of member above (`Number` in this example)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61562/comments",
    "author": "LukasGelke",
    "comments": [
      {
        "user": "OronDF343",
        "created_at": "2023-08-10T15:45:56Z",
        "body": "I'd like to add that this also occurs with default indentation settings (4 spaces), as well as with implementing interface members.\r\n\r\nVS 17.7.0"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T20:20:34Z",
        "body": "We woudl take a community contribution here."
      }
    ]
  },
  {
    "number": 61462,
    "title": "Creating a value tuple with a non-existent field results in a confusing CS8619",
    "created_at": "2022-05-23T17:01:06Z",
    "closed_at": "2022-06-17T19:45:40Z",
    "labels": [
      "help wanted",
      "Area-Compilers",
      "4 - In Review",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61462",
    "body": "**Version Used**: \r\n\r\n17.3.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\npublic static class S\r\n{\r\n    public const string A = \"a\";\r\n}\r\n\r\npublic class C\r\n{\r\n    public (string, string) M()\r\n    {\r\n        return (\"a\", S.B); // S.B does not exist\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI expect the error that `S.B` does not exist and a squiggle just for that. Derived errors should be suppressed.\r\n\r\n**Actual Behavior**:\r\n\r\n`CS8619 Nullability of reference types in value of type '(string, ? B)' doesn't match target type '(string, string)'.`\r\nand then\r\n`CS0117 'S' does not contain a definition for 'B'`\r\n\r\n**Notes**\r\nCS8619 comes before CS0117 in the Error List and the visible squiggle covers the entire tuple expression.\r\nYou need to carefully hover the squiggle to see the actual error.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61462/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2022-05-23T17:45:56Z",
        "body": "I think this could be addressed by treating an error type as equal to any other type when we do nullable variance checks."
      }
    ]
  },
  {
    "number": 61429,
    "title": "[VB.NET] CStr(CUInt(1.5)) is not redundant conversion",
    "created_at": "2022-05-20T04:03:46Z",
    "closed_at": "2024-10-25T20:24:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61429",
    "body": "**Version Used**: \r\nVisual Studio 17.3.0 preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n```VB.NET\r\nDim a = CStr(CUInt(1.5))\r\n```\r\n**Expected Behavior**:\r\nThis code converts Double to UInteger and then String. All conversions are necessary.\r\n**Actual Behavior**:\r\nIDE says the CUInt conversion is redundant. However, without this conversion, the output String won't be an integer.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61429/comments",
    "author": "Ebola-Chan-bot",
    "comments": [
      {
        "user": "trivalik",
        "created_at": "2022-05-20T05:05:06Z",
        "body": "I can confirm this. Exact hint id is IDE0004."
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-06-05T17:43:57Z",
        "body": "@Silver-Fang \r\nI don't expect this to be fixed soon (if ever!), so, you may ignore the refactoring hint, or just use:\r\n`Dim a = 1.5.ToString(\"N0\")`\r\nWhich may be better as it avoids unnecessary intermediate cast."
      },
      {
        "user": "VBAndCs",
        "created_at": "2022-06-05T17:50:14Z",
        "body": "And this is also OK:\r\n`Dim a = CInt(1.5).ToString( )`"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-06-05T19:38:46Z",
        "body": "@VBAndCs this is help wanted. So we'd happily take a community PR here. If you're interested I can work with you to get setup with roslyn and can point you at the location the fix would need to be at. Thanks!"
      },
      {
        "user": "Ebola-Chan-bot",
        "created_at": "2022-06-05T23:59:26Z",
        "body": "> @Silver-Fang I don't expect this to be fixed soon (if ever!), so, you may ignore the refactoring hint, or just use: `Dim a = 1.5.ToString(\"N0\")` Which may be better as it avoids unnecessary intermediate cast.\r\n\r\nThis bug does not affect normal use and thus does not need a workaround."
      },
      {
        "user": "y121516",
        "created_at": "2023-08-25T05:59:48Z",
        "body": "👋 Hello everyone,\r\n\r\nI was about to post an issue regarding a false positive for IDE0004 when I stumbled upon this issue. I've come across a similar problem related to the IDE0004 warning about \"redundant conversion\". Here's reproduction code:\r\n\r\n```vb\r\nModule Program\r\n    Sub Main()\r\n        Console.WriteLine($\"{CStr(CInt(False))}, {CStr(CInt(True))}\")\r\n        Console.WriteLine($\"{CStr(False)}, {CStr(True)}\")\r\n        ' Output:\r\n        ' 0, -1\r\n        ' False, True\r\n    End Sub\r\nEnd Module\r\n```\r\n\r\nIn the above code, if you remove the CInt conversion, the output of the program changes. Thus, the conversion is certainly not redundant. Yet, Visual Studio flags the CInt conversion with the IDE0004 warning.\r\n\r\nHopefully, this simplified example can assist in resolving the bug more efficiently.\r\n\r\n\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T20:24:46Z",
        "body": "Closing out as we are not likely to invest in this area."
      }
    ]
  },
  {
    "number": 61256,
    "title": "'Convert to interpolated string' produces nonsense when involving raw string literal",
    "created_at": "2022-05-11T23:02:42Z",
    "closed_at": "2024-11-22T22:27:57Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61256",
    "body": "**Version Used**: 17.3-p1\r\n\r\n```\r\nvar someVariable = \"Some text\";\r\n\r\nvar fullText = someVariable [||]+ \"\"\"\r\n    Appended line\r\n    \"\"\";\r\n```\r\n\r\n💡 Convert to interpolated string:\r\n\r\n```\r\nvar someVariable = \"Some text\";\r\n\r\nvar fullText = $\"{someVariable}\"\"\r\n    Appended line\r\n    \"\"\";\r\n```\r\n\r\nWhich is invalid syntax producing CS1002, CS1010, and CS8997.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61256/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-05-11T23:29:15Z",
        "body": "that's just wacky :) "
      }
    ]
  },
  {
    "number": 61016,
    "title": "Applying IDE0030 on target-typed ternary results in broken code",
    "created_at": "2022-04-28T18:14:10Z",
    "closed_at": "2024-10-22T20:10:15Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - IDE0030"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/61016",
    "body": "**Version Used**: \r\n\r\ndotnet 6.0.202\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following code triggers IDE0030: Use coalesce expression. (Note that this only seems to occur when the code is a member of a class, it does not happen on a local function in Program.cs)\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    static object Databasify(int? value) => value.HasValue ? value.Value : DBNull.Value;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nSimplest would be not to treat the null-coalescing operator as a replacement for a ternary operator if the ternary operator uses target-typing. If the null-coalescing operator is preferred here, then it should result in `((object?)value) ?? DBNull.Value`.\r\n\r\n**Actual Behavior**:\r\n\r\nApplying the fix results in:\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    static object Databasify(int? value) => value ?? DBNull.Value;\r\n}\r\n```\r\n\r\nwhich does not compile, as `??` is not target-typed.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/61016/comments",
    "author": "ajtribick",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T20:10:15Z",
        "body": "Unable to repro this."
      },
      {
        "user": "BHolthuijsen",
        "created_at": "2024-10-23T07:38:01Z",
        "body": "It seems that this is indeed fixed!\n\nThe following used to generate IDE0030 (in July 2022), now it does not.\n\n``` csharp\nint? myID = null;\nSqlCommand sqlCommand = new();\nsqlCommand.Parameters.AddWithValue(\"@MyID\", myID.HasValue ? myID.Value : DBNull.Value);\n```"
      }
    ]
  },
  {
    "number": 60859,
    "title": "IDE0046: 'if' statement can be simplified",
    "created_at": "2022-04-20T09:39:33Z",
    "closed_at": "2025-01-18T03:28:21Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - IDE0046"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60859",
    "body": "**Version Used**:  Visual Studio 17.2.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n        public override object ConvertFieldValueForStorage(object value)\r\n        {\r\n            if (value is Product vfetval)\r\n            {\r\n                return (decimal)vfetval.ID;\r\n            }\r\n            else\r\n            {\r\n                return -1m;\r\n            }\r\n        }\r\n```\r\nConvert to conditional expression --> IDE0046: 'if' statement can be simplified\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\n       return value is Product vfetval ? (decimal)vfetval.ID : -1m;\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n       return value is Product vfetval ? (decimal)vfetval.ID : (object)-1m;\r\n```\r\n\r\n(object) cast is being added, while this doesn't seem to be needed.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60859/comments",
    "author": "wstaelens",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:06:15Z",
        "body": "We would take a small community pr for this."
      }
    ]
  },
  {
    "number": 60835,
    "title": "Convert to interpolated string refactoring is not available in VB when an implicit conversion is used",
    "created_at": "2022-04-19T09:17:52Z",
    "closed_at": "2024-10-22T20:05:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60835",
    "body": "**Version Used**: Visual Studio 17.1.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Let's have following code\r\n\r\n       Dim r As Object = \"g\"\r\n       Dim s = \"a\" + r \r\n2.  Check _Quick Actions and Refactorings_ on the second line. _Convert to interpolated string_ refactoring is not available. \r\n3.  Change the second line to\r\n \r\n        Dim s = \"a\" + r.ToString\r\n       and the refactoring will become available\r\n4.  When the refactoring is used the result is \r\n       \r\n        Dim s = $\"a{r.ToString}\"\r\n       Where there is a Quick Action for `ToString`  _Simplify interpolation_ and final result is\r\n\r\n        Dim s = $\"a{r}\" \r\n        \r\n**Expected Behavior**:\r\nThe \"Convert to interpolated string refactoring\" is available on `Dim s = \"a\" + r` and having the result `Dim s = $\"a{r}\"`\r\n**Actual Behavior**:\r\nDescribed in steps to reproduce",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60835/comments",
    "author": "TPIvan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T20:05:18Z",
        "body": "Closing as we are not likely to change these experiences."
      }
    ]
  },
  {
    "number": 60571,
    "title": "Add code refactoring to use enum name value instead of integer value",
    "created_at": "2022-04-04T23:17:12Z",
    "closed_at": "2024-10-22T20:02:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60571",
    "body": "Discussed in today's design meeting (4/4/2022). We think it would be helpful to have a code refactoring that would suggest using an enum's name value instead of integer value for clarity purposes.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60571/comments",
    "author": "allisonchou",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T20:02:53Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 60552,
    "title": "\"Inline temporary variable\" introduces an unnecessary cast that's reported as nullability issue",
    "created_at": "2022-04-04T07:05:09Z",
    "closed_at": "2024-11-20T03:36:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60552",
    "body": "**Version Used**: \r\n17.2.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\npublic class C\r\n{\r\n    private struct S\r\n    {\r\n    }\r\n\r\n    public string M()\r\n    {\r\n        S s;\r\n        var a = \"\" + s; // \"Inline temporary variable\" for a\r\n        return a;\r\n    }\r\n}\r\n```\r\nRun \"Inline temporary variable\" for `a`.\r\n\r\n**Expected Behavior**:\r\n```cs\r\npublic class C\r\n{\r\n    private struct S\r\n    {\r\n    }\r\n\r\n    public string M()\r\n    {\r\n        S s;\r\n        // \"Inline temporary variable\" for a\r\n        return \"\" + s;\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\npublic class C\r\n{\r\n    private struct S\r\n    {\r\n    }\r\n\r\n    public string M()\r\n    {\r\n        S s;\r\n        // \"Inline temporary variable\" for a\r\n        return (string?)(\"\" + s);\r\n    }\r\n}\r\n```\r\nThe refactoring introduces a cast to `(string?)` even though neither `a` nor the return type were ever nullable.\r\n\r\nOn a related note: Is the comment trivia expected to stay where it is and not move to the `return` line?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60552/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2022-04-04T07:47:05Z",
        "body": "I think this is because `var` has is inferred as nullable type. A fix for this may reuse helpers in #58866"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T20:03:22Z",
        "body": "We would take a targeted community fix here."
      }
    ]
  },
  {
    "number": 60212,
    "title": "Implement interface fixer doesn't implement conversion operators",
    "created_at": "2022-03-16T21:50:55Z",
    "closed_at": "2023-01-31T19:52:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle",
      "Feature - StaticAbstractMembersInInterfaces"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/60212",
    "body": "```\r\ninterface I1<T> where T : I1<T>\r\n{\r\n    abstract static T operator -(T x);\r\n    abstract static T operator +(T x, T y);\r\n    abstract static explicit operator string(T x);\r\n}\r\n\r\nclass C1 : I1<C1>\r\n{\r\n}\r\n```\r\n\r\nUse code fixer to implement the interface.\r\n\r\nObserved:\r\n```\r\nclass C1 : I1<C1>\r\n{\r\n    public static C1 operator +(C1 x, C1 y)\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n\r\n    public static C1 operator -(C1 x)\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n```\r\nclass C1 : I1<C1>\r\n{\r\n    public static C1 operator +(C1 x, C1 y)\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n\r\n    public static C1 operator -(C1 x)\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n\r\n    public static explicit operator string(C1 x)\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\nSimilar behavior for an option to implement the interface explicitly.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/60212/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-01-31T19:52:14Z",
        "body": "We do generate the operators properly now."
      }
    ]
  },
  {
    "number": 59988,
    "title": "ArgumentNullException in Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore",
    "created_at": "2022-03-07T07:38:41Z",
    "closed_at": "2022-11-12T09:41:16Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Analyzers",
      "Tenet-Reliability"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/59988",
    "body": "Saw the below exception during analyzer execution in the IDE in gold bar:\r\n\r\n```\r\nStreamJsonRpc.RemoteInvocationException: Value cannot be null.\r\nParameter name: source\r\n   at StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__143`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Remote.BrokeredServiceConnection`1.<TryInvokeAsync>d__16`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\nRPC server exception:\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: source\r\n      at System.Linq.Enumerable.Cast[TResult](IEnumerable source)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore[TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum](IEnumerable`1 startActions, IEnumerable`1 actions, IEnumerable`1 endActions, DiagnosticAnalyzer analyzer, SyntaxNode declaredNode, ISymbol declaredSymbol, ImmutableArray`1 executableBlocks, Func`2 getNodesToAnalyze, SemanticModel semanticModel, Func`2 getKind, BlockAnalyzerStateData`2 analyzerState, Boolean isGeneratedCode)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationBlockActions(IEnumerable`1 operationBlockStartActions, IEnumerable`1 operationBlockActions, IEnumerable`1 operationBlockEndActions, DiagnosticAnalyzer analyzer, SyntaxNode declaredNode, ISymbol declaredSymbol, ImmutableArray`1 operationBlocks, ImmutableArray`1 operations, SemanticModel semanticModel, Int32 declarationIndex, AnalysisScope analysisScope, AnalysisState analysisState, Boolean isGeneratedCode)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.<>c__DisplayClass12_0.<TryExecuteDeclaringReferenceActions>g__executeOperationsBlockActions|7(ImmutableArray`1 operationBlocksToAnalyze, ImmutableArray`1 operationsToAnalyze, IEnumerable`1 codeBlockActions)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.<>c__DisplayClass12_0.<TryExecuteDeclaringReferenceActions>g__executeExecutableCodeActions|3()\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, GroupedAnalyzerActions coreActions, GroupedAnalyzerActions additionalPerSymbolActions, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, Boolean isGeneratedCodeSymbol, IGroupedAnalyzerActions additionalPerSymbolActions, CancellationToken cancellationToken)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<TryProcessSymbolDeclaredAsync>d__132.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<TryProcessEventCoreAsync>d__131.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<ProcessEventAsync>d__129.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<ProcessCompilationEventsCoreAsync>d__128.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<>c__DisplayClass127_0.<<ProcessCompilationEventsAsync>b__2>d.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<ProcessCompilationEventsAsync>d__127.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<ExecutePrimaryAnalysisTaskAsync>d__96.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.<AttachQueueAndProcessAllEventsAsync>d__94.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerDiagnosticsCoreAsync>d__72.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<>c__DisplayClass67_1.<<ComputeAnalyzerDiagnosticsAsync>b__1>d.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerDiagnosticsAsync>d__67.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerSemanticDiagnosticsAsync>d__66.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<>c__DisplayClass66_0.<<ComputeAnalyzerSemanticDiagnosticsAsync>g__processPartialSymbolLocationsAsync|0>d.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerSemanticDiagnosticsAsync>d__66.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<GetAnalysisResultCoreAsync>d__64.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.Extensions.<GetAnalysisResultAsync>d__9.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Diagnostics.Extensions.<GetAnalysisResultAsync>d__8.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Remote.Diagnostics.DiagnosticComputer.<AnalyzeAsync>d__9.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Remote.Diagnostics.DiagnosticComputer.<GetDiagnosticsAsync>d__8.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Remote.RemoteDiagnosticAnalyzerService.<>c__DisplayClass3_0.<<CalculateDiagnosticsAsync>b__0>d.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n      at Microsoft.CodeAnalysis.Remote.BrokeredServiceBase.<RunServiceImplAsync>d__13`1.MoveNext()\r\n   --- End of stack trace from previous location where exception was thrown ---\r\n      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n      at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/59988/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2022-04-06T18:38:02Z",
        "body": "Hit this locally while debugging."
      },
      {
        "user": "mavasani",
        "created_at": "2022-04-07T05:02:07Z",
        "body": "@jasonmalinowski Do you have a dump/repro?"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2022-04-07T20:55:44Z",
        "body": "No idea for repro. :frowning:"
      },
      {
        "user": "r-pankevicius",
        "created_at": "2022-11-30T20:28:08Z",
        "body": "Still here...\r\n```\r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Current\r\nVersion 17.4.2\r\n```\r\n\r\nWaiting for 17.5."
      }
    ]
  },
  {
    "number": 59820,
    "title": "Pasting into a raw string literal should ensure things stay parseable.",
    "created_at": "2022-02-28T23:14:23Z",
    "closed_at": "2022-03-02T21:07:31Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/59820",
    "body": "Examples of what this should do include:\r\n\r\n1. if the content pasted includes a sequence of quotes longer than the delimiters then we shoudl grow the delimiters to be large enough to make the quotes not a problem.\r\n2. lines of content need to be indented to fit the indentation of the literal.\r\n3. if we start with a single-line raw string and paste contents that has newlines in it (or starts/ends with a quote), then convert to multiline raw strings.\r\n\r\nThis should all be done in two steps, so that an undo gives you the contents as if you had pasted things and not had anything get updated.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/59820/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2022-03-02T18:48:40Z",
        "body": "Duplicate of #31869"
      },
      {
        "user": "jinujoseph",
        "created_at": "2022-03-02T18:49:00Z",
        "body": "@CyrusNajmabadi can you check if this is dupe of 31869"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-03-02T18:50:23Z",
        "body": "Sort of.  For both it's about keeping things working fine when you paste content.  However, i would still like this tracked for the raw-string release.  "
      },
      {
        "user": "sharwell",
        "created_at": "2022-03-02T21:07:31Z",
        "body": "Resolving as duplicate of prior feature request, since the earlier feature encompasses this issue with a more complete picture. Will update labels and milestone of the earlier issue."
      }
    ]
  },
  {
    "number": 59729,
    "title": "Remove final newline if `insert_final_newline = false`",
    "created_at": "2022-02-24T03:24:11Z",
    "closed_at": "2022-03-02T19:11:15Z",
    "labels": [
      "Bug",
      "Resolution-Duplicate",
      "help wanted",
      "Area-IDE",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/59729",
    "body": "**Version Used**: \r\n\r\n17.1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Set `insert_final_newline = false` in your editorconfig file\r\n2. Format a document with a newline at the end\r\n \r\n**Expected Behavior**:\r\n\r\nThe newline is removed.\r\n\r\n**Actual Behavior**:\r\n\r\nThe newline is left there, which means that if you set `insert_final_newline = true`, format documents, then set `insert_final_newline = false`, you'll be left with final newlines in every document.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/59729/comments",
    "author": "danielchalmers",
    "comments": [
      {
        "user": "danielchalmers",
        "created_at": "2022-02-24T03:25:58Z",
        "body": "I came across this when trying to use it as a workaround for #59728. Not sure if it's intended behavior or not."
      },
      {
        "user": "jinujoseph",
        "created_at": "2022-03-02T19:11:15Z",
        "body": "Duplicate of #20356"
      }
    ]
  },
  {
    "number": 58897,
    "title": "IDE0045 loose comment before `else`",
    "created_at": "2022-01-17T08:50:56Z",
    "closed_at": "2025-01-17T17:07:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - IDE0045"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58897",
    "body": "**Version Used**: 4.0.1-1.21568.1+6ab6601178d9fba8c680b56934cd1742e0816bff\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n// comment before if\r\nint i;\r\nif (true)\r\n{\r\n    i = 1;\r\n}\r\n// comment before else\r\nelse\r\n{\r\n    i = 2;\r\n}\r\n```\r\n**Expected Behavior**:\r\n```cs\r\n// comment for if\r\nvar i = true\r\n    ? 1\r\n    // comment before else\r\n    : 2;\r\n```\r\nor even\r\n```cs\r\nvar i = true\r\n    // comment for if\r\n    ? 1\r\n    // comment before else\r\n    : 2;\r\n```\r\n\r\n**Actual Behavior** (actually for this code it produces one-liner, but for longer expressions it will be 3 lines like below):\r\n```cs\r\n// comment for if\r\nvar i = true\r\n    ? 1\r\n    : 2;\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58897/comments",
    "author": "MaceWindu",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T23:13:04Z",
        "body": "We would take a targeted community PR here."
      }
    ]
  },
  {
    "number": 58861,
    "title": "IDE0063 removes #pragma statements between using and opening bracket",
    "created_at": "2022-01-14T14:29:32Z",
    "closed_at": "2023-01-31T22:52:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - IDE0063"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58861",
    "body": "**Version Used**:  4.0.1-1.21568.1+6ab6601178d9fba8c680b56934cd1742e0816bff\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\npublic static byte[] ComputeMD5Hash(byte[] source)\r\n{\r\n#pragma warning disable CA5351 // Do Not Use Broken Cryptographic Algorithms\r\n    using (var md5 = MD5.Create())\r\n#pragma warning restore CA5351 // Do Not Use Broken Cryptographic Algorithms\r\n    {\r\n        return md5.ComputeHash(source);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\n\r\n```cs\r\npublic static byte[] ComputeMD5Hash(byte[] source)\r\n{\r\n#pragma warning disable CA5351 // Do Not Use Broken Cryptographic Algorithms\r\n    using var md5 = MD5.Create();\r\n#pragma warning restore CA5351 // Do Not Use Broken Cryptographic Algorithms\r\n    return md5.ComputeHash(source);\r\n}\r\n```\r\n\r\n\r\n**Actual Behavior**:\r\n\r\n```cs\r\npublic static byte[] ComputeMD5Hash(byte[] source)\r\n{\r\n#pragma warning disable CA5351 // Do Not Use Broken Cryptographic Algorithms\r\n    using var md5 = MD5.Create();\r\n    return md5.ComputeHash(source);\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58861/comments",
    "author": "MaceWindu",
    "comments": [
      {
        "user": "dotnet-issue-labeler[bot]",
        "created_at": "2022-01-14T14:29:36Z",
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label."
      }
    ]
  },
  {
    "number": 58533,
    "title": "Code fix to move a type to another file also migrates the `#nullable X` directive, removing it from the original file",
    "created_at": "2021-12-30T14:11:50Z",
    "closed_at": "2022-01-04T23:41:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/58533",
    "body": "**Version Used**: Visual Studio Version 17.1.0 Preview 1.1\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have a file that contains at least 2 types, named after the one. Ensure a file-scoped namespace declaration.\r\n2. Use a `#nullable X` directive above the first declared type (or the one that will be migrated to another file).\r\n3. Use the code fix to move the one type to a new file named after it.\r\n\r\n## Example File\r\n```csharp\r\n// File name: B.cs\r\nnamespace N;\r\n\r\n#nullable enable \r\n\r\npublic class A\r\n{\r\n    public A? Copy() => null;\r\n}\r\n\r\npublic class B\r\n{\r\n    public B? Destroy() => null;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth the original and the created files contain the `#nullable X` directive.\r\n\r\n**Actual Behavior**:\r\nThe `#nullable X` directive is moved along, but does not remain on the original file that contained it.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/58533/comments",
    "author": "Rekkonnect",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2022-01-04T23:41:43Z",
        "body": "Duplicate of #19613"
      }
    ]
  },
  {
    "number": 57971,
    "title": "Roslyn dosn't work on VSIX",
    "created_at": "2021-11-24T17:21:44Z",
    "closed_at": "2022-03-20T17:14:26Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57971",
    "body": "Hi , I'm trying to build a single file generator ( VSIX ) in C#, the problem is that I can't get a Syntax tree using roslyn  . Is there a useful way?!\n\n Note: I tried\n SyntaxFactory.ParseSyntaxTree (\"code\" ) and CSharpSyntaxTree.ParseText (\"code\")\n\nBoth failed ...!\n\n\nAnother note : I'm trying to make the debug work as long as I'm not trying to call functions from Microsoft.CodeAnalysis\n\n\nAnother note: I use microsoft visual studio enterprise 2019 version 16.10.2\nAnd microsoft .NET Framewrok version 4.8.03752",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57971/comments",
    "author": "MoMakkawi",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-11-24T17:34:09Z",
        "body": "> Both failed ...!\r\n\r\nCan you provide more information?  how did they fail?"
      },
      {
        "user": "MoMakkawi",
        "created_at": "2021-11-24T17:46:45Z",
        "body": "I am a computer engineering student, I am trying to develop a tool like Code map, code map that analyzes the code and gives (graph) dgml. I'm trying to parse the code and it doesn't work, frankly, I don't know the exception that happens because the debug in the VSIX project is different from what I know in other projects, but I noticed that the debug doesn't take me to the function as long as it makes an exception because of the Microsoft.CodeAnalysis library, And I don't know what to do..."
      },
      {
        "user": "MoMakkawi",
        "created_at": "2022-03-20T17:14:26Z",
        "body": "Thank you , in the update visual studio 2022 and .net 6 the problem is solved. "
      }
    ]
  },
  {
    "number": 57920,
    "title": "IDE0064: False positive when all readonly fields of a struct are static",
    "created_at": "2021-11-22T17:15:13Z",
    "closed_at": "2023-02-01T00:50:44Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - IDE0064"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57920",
    "body": "**Version Used**: \r\n.NET SDK 6.0.100\r\n\r\n**Steps to Reproduce**:\r\n`dotnet build` the following:\r\n### Repro.cs\r\n```csharp\r\nstruct Repro\r\n{\r\n    public static readonly Repro DefaultValue = new();\r\n\r\n    public int IrrelevantValue;\r\n\r\n    public void Overwrite(Repro other) => this = other;\r\n}\r\n```\r\n\r\n### Repro0.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### .editorconfig\r\n```editorconfig\r\n[*.cs]\r\ndotnet_diagnostic.IDE0064.severity = warning\r\n```\r\n**Expected Behavior**:\r\nIDE0064 is not raised: there are no **instance** fields that are declared `readonly`.\r\n\r\n**Actual Behavior**:\r\nIDE0064 is raised.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57920/comments",
    "author": "airbreather",
    "comments": [
      {
        "user": "vdebellabre",
        "created_at": "2021-11-24T15:12:25Z",
        "body": "Outside observer here, the current behavior seems right to me.\r\nThe warning is here to prevent a readonly field from changing value if the struct instance is reassigned, because that would break the readonly contract for an outside observer. But in the case of static fields that doesn't apply, since they're independant of any instance.\r\n\r\nEdit: nevermind I read the expected behavior backwards, I agree with your point, the warning should not be raised."
      }
    ]
  },
  {
    "number": 57814,
    "title": "False positive IDE0060 for partial method with SG",
    "created_at": "2021-11-17T09:14:09Z",
    "closed_at": "2022-09-22T15:00:36Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57814",
    "body": "**Version Used**: \r\nVS 17.0.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write a source generator to define a partial method with parameter for a class\r\n2. Implement the partial method in user code, without touching the parameter\r\n\r\n**Expected Behavior**:\r\nNo IDE0060 reported, at least when the source generator is fully loaded.\r\n\r\n**Actual Behavior**:\r\nIDE0060 unused parameter reported for the partial method.\r\n\r\nShould we disable IDE0060 for any partial method? Their signature should match for different sources of code, and user code may not change it.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57814/comments",
    "author": "huoyaoyuan",
    "comments": [
      {
        "user": "kaleidocore",
        "created_at": "2022-04-22T12:22:47Z",
        "body": "As a workaround you can use the `SuppressMessageAttribute` in the generated file:\r\n\r\n```\r\n\t\t[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Style\", \"IDE0060: Remove unused parameter\")]\r\n\t\tpartial void MyPartialMethod(int someParam);\r\n```\r\n\r\nThe attribute will also apply to the implementation in the user file."
      }
    ]
  },
  {
    "number": 57650,
    "title": "IDE0059\tUnnecessary assignment of a value to => CS0165\tUse of unassigned local variable",
    "created_at": "2021-11-09T14:00:08Z",
    "closed_at": "2022-09-22T17:12:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57650",
    "body": "**Version Used**: \r\nVS 2022\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following code leads to a wrong detection of IDE0059:\r\n\r\n```\r\npublic delegate void OutAction<in T1, TOut>( T1 arg1, out TOut outVal );\r\n\r\n    [Fact]\r\n    public void Arg1()\r\n    {\r\n        String actual = null;\r\n\r\n        var target = new OutAction<String, String>( ( String a1, out String outArg ) =>\r\n        {\r\n            outArg = String.Empty;\r\n            actual = a1;\r\n        } );\r\n\r\n        var expected = RandomValueEx.GetRandomString();\r\n        target( expected, out _ );\r\n\r\n        Assert.Equal( expected, actual );\r\n    }\r\n```\r\n\r\nIDE0059\tis reported for `String actual = null;`.\r\nIf I change it to `String actual;` VS Reports CS0165 on the last line `Assert.Equal( expected, actual );`.\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nDo not report IDE0059 in this case.\r\n\r\n**Actual Behavior**:\r\n\r\nIDE0059 is reported.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57650/comments",
    "author": "DaveSenn",
    "comments": [
      {
        "user": "MaStr11",
        "created_at": "2021-11-12T11:12:42Z",
        "body": "Duplicate of #57344"
      }
    ]
  },
  {
    "number": 57524,
    "title": "VS Code CleanUp Setting 'Add Access modifiers' removes overloads in VB.Net Files",
    "created_at": "2021-11-02T15:03:36Z",
    "closed_at": "2024-10-22T18:39:12Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57524",
    "body": "**Version Used**: VS17.0.0 Preview 7.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new VB.Net Project with 2 Classes with the Same Properties and interhite Class 1 in Class 2\r\n2. Add the Keyword Overloads to the Properties in Class 2 in order to remove Warnings (BC40003)\r\n3. Run the Code CleanUp-Feature with the Setting 'Add Access modifiers'\r\n\r\n**Expected Behavior**:\r\nIt should add the Public - Keyword(Access modifier), but let the Overloads-Keyword be\r\n\r\n**Actual Behavior**:\r\nIT adds the Public - Keyword(Access modifier), but removes the Overloads-Keyword\r\n\r\nCode Samples:\r\nThis is the Orinal Code:\r\n\r\n`\r\nPublic Class Class1\r\n    Property t1 As String\r\nEnd Class\r\nPublic Class Class2\r\n    Inherits Class1\r\n    Overloads Property t1 As String\r\nEnd Class\r\n`\r\n\r\nThis is the Code after Code CleanUp:\r\n\r\n`\r\nPublic Class Class1\r\n    Public Property t1 As String\r\nEnd Class\r\nPublic Class Class2\r\n    Inherits Class1\r\n\r\n    Public Property t1 As String\r\nEnd Class\r\n`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57524/comments",
    "author": "Lohnegrim",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T18:39:12Z",
        "body": "Closing as we are unlikely to be making chnages in these experiences."
      }
    ]
  },
  {
    "number": 57274,
    "title": "Non static quick fix enhancement ",
    "created_at": "2021-10-20T19:53:38Z",
    "closed_at": "2024-10-22T19:12:19Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Dev17 IDE Priority"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57274",
    "body": "If I call a static method on an instance type offer to: \r\n- change the method to be non-static\r\n- change the call to be on the type name and not an instance\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57274/comments",
    "author": "mikadumont",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T19:12:19Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 57110,
    "title": "Go To Base/Implementation should be more flexible when signatures do not match",
    "created_at": "2021-10-12T21:06:19Z",
    "closed_at": "2024-11-14T00:46:29Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/57110",
    "body": "Currently Go To Base invoked on the override does not find the base method when their signatures do not match exactly. \r\nIt would be useful if the feature still worked, finding approximate match (e.g. by name) when they don't, similarly to FAR.\r\n\r\n\r\n```C#\r\nclass C\r\n{\r\n    public virtual void F(bool x)\r\n    {\r\n    }\r\n}\r\n\r\nclass D : C\r\n{\r\n    public override void F(int x)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/57110/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-10-12T21:39:13Z",
        "body": "Note: we entirely use the compiler here.  We go directly to the symbol model to answer this.  If we wanted to support this it would be nice if it were through compiler error tolerance.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T18:33:57Z",
        "body": "We would take a targeted community pr here."
      }
    ]
  },
  {
    "number": 56337,
    "title": "Introduce parameter for '..' on XML Literal throws Exception.",
    "created_at": "2021-09-11T05:08:40Z",
    "closed_at": "2024-10-22T21:00:55Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/56337",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n```vbnet\r\nImports System\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Dim data = <xs>\r\n                 <x/>\r\n                 <x/>\r\n               </xs>\r\n  End Sub\r\nEnd Module\r\n\r\n```\r\n\r\n1.  Cursor on `</x.`\r\n2.  Code Action: `Introduce parameter for '<\\x>'`\r\n\r\n**Expected Behavior**:\r\n\r\nNot quite sure? \r\nDefinitely not an exception.\r\n\r\n**Actual Behavior**:\r\n\r\n`System.InvalidCastExcetion`\r\n\r\nCall Stack\r\n<details>\r\n\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax' to type 'Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax'.\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitXmlElement(XmlElementSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitEqualsValue(EqualsValueSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitVariableDeclarator(VariableDeclaratorSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitMethodBlock(MethodBlockSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitModuleBlock(ModuleBlockSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.ModifyDocumentInvocationsTrampolineOverloadAndIntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.RewriteDocumentAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n</details>",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/56337/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T21:00:55Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 55871,
    "title": "\"Extract Base Class\" does not extract generic type parameters, causing errors in the extracted class",
    "created_at": "2021-08-24T23:04:55Z",
    "closed_at": "2022-04-18T17:22:24Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55871",
    "body": "**Steps to Reproduce**:\r\n1. Create a class with at least one generic type parameter that is used in a member:\r\n```\r\npublic class C<T>\r\n{\r\n    public T M()\r\n    {\r\n        return default;\r\n    }\r\n\r\n    public T testField;\r\n}\r\n```\r\n2. Trigger the quick actions menu on the class declaration or a member declaration and select Extract Base Class\r\n3. Select any or all members and perform the refactoring\r\n**Expected Behavior**:\r\nThe generated class will have type parameters that were necessary for the members that are moved:\r\n```\r\npublic class CBase<T>\r\n{\r\n    public T M()\r\n    {\r\n        return default;\r\n    }\r\n\r\n    public T testField;\r\n}\r\n```\r\n**Actual Behavior**:\r\nThe generated class has no type parameters, causing \"T\" to produce an error as it is unqualified:\r\n```\r\npublic class CBase\r\n{\r\n    public T M() // There is no T here\r\n    {\r\n        return default;\r\n    }\r\n\r\n    public T testField;\r\n}\r\n```\r\nWhile the generated type name produces a generic preview when there are type parameters used as members, and will fill in the required type parameters when certain members are selected, it does not update with the correct type parameters when a type parameter is used within a method (not in the return value or argument list), and does not update when it is used in a field.\r\n\r\nThere is an `ExtractTypeHelpers` class that is used for the preview, but not for the actual refactoring. It seems designed for extracting interfaces, and doesn't work on fields, so maybe there are two separate issues. One for Extract Base Class not doing anything generic, and one for Extract Type Helpers only working on interface-like members (i.e. not fields, not looking inside member bodies).",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55871/comments",
    "author": "Soreloser2",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2021-09-10T19:11:26Z",
        "body": "cc @ryzngard "
      }
    ]
  },
  {
    "number": 55610,
    "title": "Extract Base Class will trigger on multiple members, even if the containing class already has a base class",
    "created_at": "2021-08-13T18:20:31Z",
    "closed_at": "2022-12-30T23:38:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Extract Method"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55610",
    "body": "**Steps to Reproduce**:\r\nCreate a base class and a separate inherited class with members:\r\n```\r\nclass Base\r\n{\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public int _testInt;\r\n\r\n    public static void TestMethod()\r\n    {\r\n    }\r\n}\r\n```\r\nHighlight multiple members, as shown using `[|this symbol|]` to indicate the range of selection:\r\n```\r\nclass Derived : Base\r\n{\r\n    [|public int _testInt;\r\n\r\n    public static void TestMethod()\r\n    {\r\n    }|]\r\n}\r\n```\r\nThen invoke the quick actions menu using the lightbulb/screwdriver or Ctrl + .\r\n**Expected Behavior**:\r\n\"Extract Base Class\" should not show up as a possible refactoring, as there is already a base class. This is the behavior shown when only one member is selected\r\n**Actual Behavior**:\r\n\"Extract Base Class\" shows up as a possible refactoring. Actually invoking the refactoring will open a dialog, which will create a new base class for `Derived`. Now `Derived` will inherit from multiple classes, which produces a compiler error.\r\n\r\nI think it is possible for \"Extract Base Class\" to be a valid refactoring here. If we created an intermediate (possibly abstract) class that would inherit from `Base` and from which `Derived` would be inherited, as follows:\r\n```\r\nclass Base\r\n{\r\n}\r\n\r\nclass GeneratedExtractedClass : Base\r\n{\r\n    public int _testInt;\r\n\r\n    public static void TestMethod()\r\n    {\r\n    }\r\n}\r\n\r\nclass Derived : GeneratedExtractedClass\r\n{\r\n}\r\n```\r\nHowever, this would be a significant extension of the \"Extract Base Class\" feature, and would also require the same refactoring to appear when we selected one member, which it currently doesn't. Either way, the refactoring should appear or not appear regardless of whether one or multiple members are selected.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55610/comments",
    "author": "Soreloser2",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2021-09-15T17:39:53Z",
        "body": "Either of the following are acceptable:\r\n\r\n1. The refactoring to extract a base class is not visible if the type already has a base class\r\n2. The refactoring to extract a base class introduces a new base class which itself is derived from the original base class (i.e. a new class is inserted between the current type and its original base type in the hierarchy)"
      }
    ]
  },
  {
    "number": 55608,
    "title": "Pull Members Up retains unnecessary whitespace trivia, causing extra blank lines",
    "created_at": "2021-08-13T18:04:44Z",
    "closed_at": "2024-10-22T18:20:22Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55608",
    "body": "**Steps to Reproduce**:\r\n1. Create an empty base class and then a separate inherited class with multiple members:\r\n```\r\nclass C1Base\r\n{\r\n}\r\n\r\nclass C1 : C1Base\r\n{\r\n    public int _testInt;\r\n\r\n    public bool TestBool { get; set }\r\n\r\n    public void TestMethod()\r\n    {\r\n    }\r\n}\r\n```\r\n2. Select a single member that is not the initial member, for example `TestBool`, and trigger the quick actions menu to select \"Pull Members Up\" (this also has a similar effect if you trigger this on a non-inherited class and select Extract Base Class).\r\n\r\n**Expected Behavior**:\r\nThe resulting base class should put the moved member with the correct formatting:\r\n```\r\nclass C1Base\r\n{\r\n   public bool TestBool { get; set; }\r\n}\r\n```\r\n**Actual Behavior**:\r\nThe member keeps unnecessary leading whitespace trivia:\r\n```\r\nclass C1Base\r\n{\r\n\r\n    public bool TestBool { get; set; }\r\n}\r\n```\r\nThere are certainly times when this extra line is desired, for example if there are other members above the moved member in the destination. However, there should be line whitespace logic (perhaps using Elastic Whitespace) that would retain possible pre-member trivia such as comments, but format whitespace contextually.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55608/comments",
    "author": "Soreloser2",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2021-09-15T17:40:14Z",
        "body": "cc @Cosifne "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T18:20:22Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 55288,
    "title": "VisualStudioSuppressionFixService",
    "created_at": "2021-07-30T17:03:02Z",
    "closed_at": "2024-10-25T19:21:28Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55288",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55288/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:23:09Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:24:13Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:21:28Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55287,
    "title": "MiscellaneousFilesWorkspace",
    "created_at": "2021-07-30T17:02:46Z",
    "closed_at": "2024-10-25T19:21:48Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55287",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55287/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:23:04Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:24:49Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:21:48Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55285,
    "title": "PreviewPaneService",
    "created_at": "2021-07-30T16:50:05Z",
    "closed_at": "2024-10-25T19:22:06Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55285",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55285/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:22:55Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:27:37Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:22:06Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55282,
    "title": "VSNotificationServiceFactory",
    "created_at": "2021-07-30T16:30:14Z",
    "closed_at": "2024-10-25T19:21:54Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55282",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55282/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:22:45Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:25:29Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:21:54Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55281,
    "title": "VisualStudioImageIdService",
    "created_at": "2021-07-30T16:28:12Z",
    "closed_at": "2024-10-25T19:21:58Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55281",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55281/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:22:40Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:25:55Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:21:58Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55280,
    "title": "VisualStudioMetadataAsSourceFileSupportService",
    "created_at": "2021-07-30T16:27:07Z",
    "closed_at": "2024-10-25T19:22:03Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55280",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55280/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T01:22:33Z",
        "body": "Closing out.  We do not need to track work like this with N issues.  We can have a single issue that breaks out hte individual pieces where we can remove/complete the subpieces as necessary if we even get around to the work."
      },
      {
        "user": "sharwell",
        "created_at": "2023-02-18T23:26:12Z",
        "body": "The other issue is a story. These are intentionally broken out as individual child work items."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:22:03Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 55117,
    "title": "CS0308 error hide CS0246 codefix (add using directive)",
    "created_at": "2021-07-26T13:09:16Z",
    "closed_at": "2021-08-13T03:04:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/55117",
    "body": "**Version Used**: \r\nVisual Studio 2022 Version 17.0.0 Preview 2.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n//File A:\r\nnamespace FooBar\r\n{\r\n    public abstract class Foo\r\n    {\r\n        public abstract object Bar( Type type );\r\n    }\r\n\r\n    public class Test\r\n    {\r\n        public void TestMethod(Foo arg)\r\n        {\r\n            arg.Bar<object>(); // CS0308 The non-generic method 'Foo.Bar(Type)' cannot be used with type arguments\r\n\r\n        }\r\n    }\r\n}\r\n// File B:\r\n\r\nnamespace FooBar.Extensions\r\n{\r\n    public static class Extension\r\n    {\r\n        public static T Bar<T>( this Foo @this )\r\n            => (T)@this.Bar( typeof( T ) );\r\n    }\r\n}\r\n\r\n```\r\n**Expected Behavior**:\r\nThe codefix of CS0246 (add using directive) is there allowing me to quickly add `using FooBar.Extensions` and fix the code.\r\n**Actual Behavior**:\r\nOnly CS0308 error showed up,\r\nThis caused me to thinking that the method I was targeting was not imported/not present anymore.\r\nWhile typing the code, the autocompletion does propose the extension method.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/55117/comments",
    "author": "Kuinox",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2021-07-26T19:10:02Z",
        "body": "I think this might be a @dotnet/roslyn-ide issue"
      }
    ]
  },
  {
    "number": 54974,
    "title": "Detect `if (x == null) x = ...` and offer to convert to `x ??= ...`",
    "created_at": "2021-07-20T16:17:12Z",
    "closed_at": "2022-06-28T20:16:19Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54974",
    "body": "This should also match things like:\r\n\r\n```c#\r\nif (a && b && c == null)\r\n   c = ...\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54974/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-07-20T16:17:29Z",
        "body": "@Youssef1313 If you're interested :)   "
      },
      {
        "user": "RikkiGibson",
        "created_at": "2021-07-26T19:05:46Z",
        "body": "It wasn't clear to me what `if (a && b && c == null) c = ...` should be converted to."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-07-26T23:19:08Z",
        "body": "> It wasn't clear to me what if (a && b && c == null) c = ... should be converted to.\r\n\r\nIt should convert to:\r\n\r\n```c#\r\nIf (a && b)\r\n    c ??= ...\r\n```"
      }
    ]
  },
  {
    "number": 54745,
    "title": "Add code-style option for file-scoped namespaces",
    "created_at": "2021-07-10T14:46:28Z",
    "closed_at": "2021-08-31T20:18:10Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - File Scoped Namespaces"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54745",
    "body": "It could be used by:\r\n\r\n- [x] a new analyzer to prefer file-scoped namespaces\r\n- [ ] code generation to produce file-scoped namespaces for various features (e.g, \"Generate class in new file\").\r\n- [ ] Also the \"Right click project in Solution Explorer → Add → Class...\" should potentially respect this option.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54745/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2021-07-26T19:30:42Z",
        "body": "The code-style option and analyzer were added recently. @CyrusNajmabadi Were the other points in the issue addressed as well?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-08-31T20:18:10Z",
        "body": "Nope.  This is complete."
      }
    ]
  },
  {
    "number": 54419,
    "title": "Record structs: emit `readonly` modifier for synthesized members",
    "created_at": "2021-06-26T17:01:35Z",
    "closed_at": "2021-08-10T21:52:23Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Feature - Records"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54419",
    "body": "**Version Used**: \r\n\r\nmain branch 26.06.2021\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```c#\r\npublic record struct A(int P) {\r\n  public readonly void ReadOnlyMethod() {\r\n    ToString(); // CS8656\r\n    PrintMembers(null); // CS8656\r\n    Equals(this); // CS8656\r\n    Deconstruct(out _); // CS8656\r\n    GetHashCode(); // CS8656\r\n  }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo compiler warning produced.\r\n\r\n**Actual Behavior**:\r\n\r\nWarnings like:\r\n> CS8656: Call to non-readonly member 'A.ToString()' from a 'readonly' member results in an implicit copy of 'this'.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54419/comments",
    "author": "controlflow",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2021-06-29T18:22:05Z",
        "body": "We discussed this internally and decided we do want to make the change to make the synthesized record members `readonly` when possible. I drafted a spec change in dotnet/csharplang#4890.\r\n"
      },
      {
        "user": "RikkiGibson",
        "created_at": "2021-07-20T17:30:21Z",
        "body": "tagging @Youssef1313 just in case you find this issue interesting."
      }
    ]
  },
  {
    "number": 54329,
    "title": "Fix incorrect SyntaxNode generation for Implement Interface code fix",
    "created_at": "2021-06-23T15:36:18Z",
    "closed_at": "2024-10-22T17:27:52Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54329",
    "body": "Several tests for Implement Interface use `CodeActionValidationMode.None` due to mismatched `SyntaxNode` generation. These should be reviewed and corrected to produce the expected nodes.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54329/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T17:27:52Z",
        "body": "Closing out as speculative.  If we need to do this we should assing a person/milestone and get it done."
      }
    ]
  },
  {
    "number": 54198,
    "title": "exception in IntroduceParameterService",
    "created_at": "2021-06-18T02:00:48Z",
    "closed_at": "2024-10-25T04:42:08Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54198",
    "body": "Found dogfooding latest Dev17 Preview 2\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: index\r\n   at Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(Int32 index,IEnumerable`1 nodes)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.<>c__DisplayClass22_1.<ModifyDocumentInvocationsAndIntroduceParameterAsync>b__0(SyntaxNode currentArgumentListSyntax,SyntaxGenerator _)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.ModifyDocumentInvocationsAndIntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.RewriteDocumentAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54198/comments",
    "author": "jmarolf",
    "comments": [
      {
        "user": "jnm2",
        "created_at": "2021-07-27T23:30:04Z",
        "body": "This is in previews 2.1 and 3.0 too."
      },
      {
        "user": "peteraritchie",
        "created_at": "2022-01-21T21:20:01Z",
        "body": "I get a similar stack trace in VS 2022 17.0.5 and .NET 5 class library with this:\r\n\r\n```csharp\r\npublic class B\r\n{\r\n\tpublic static Delegate M2(Delegate d) //*\r\n\t{\r\n\t\treturn d;\r\n\t}\r\n\tinternal int M1(string _, string __) //*\r\n\t{\r\n\t\tM2(M1);\r\n\t\tnew B();\r\n\t\treturn 0;\r\n\t}\r\n}\r\n```\r\n... when selecting Quick Action **Introducing parameter for 'new B()** (and **and update calls sites directly** sub-item but I believe any sub-item causes this).\r\n\r\nI'm surmising a unit test case like this:\r\n\r\n```CSharp\r\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsIntroduceParameter)]\r\n        public async Task TestNewWithConvertedDelegate()\r\n        {\r\n                var code =\r\n@\"using System;\r\n\r\npublic class B\r\n{\r\n\tpublic static Delegate M2(Delegate d) //*\r\n\t{\r\n\t\treturn d;\r\n\t}\r\n\tinternal int M1(string _, string __) //*\r\n\t{\r\n\t\tM2(M1);\r\n\t\t|new B()|;\r\n\t\treturn 0;\r\n\t}\r\n}\";\r\n\r\n                await TestMissingAsync(code);\r\n        }\r\n```\r\n\r\nI haven't tried a .NET 6 class library."
      },
      {
        "user": "mavasani",
        "created_at": "2022-07-26T10:19:37Z",
        "body": "Hit this today on latest internal dogfood build:\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: index\r\n   at Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(Int32 index,IEnumerable`1 nodes)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.<>c__DisplayClass17_0.<ModifyDocumentInvocationsTrampolineOverloadAndIntroduceParameterAsync>g__GenerateNewArgumentListSyntaxForTrampoline|0(Compilation compilation,SemanticModel invocationSemanticModel,Dictionary`2 parameterToArgumentMap,SyntaxNode currentArgumentListSyntax,SyntaxNode argumentListSyntax,SyntaxNode invocation,ImmutableArray`1 validParameters,String parameterName,String newMethodIdentifier,Int32 insertionIndex,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.<>c__DisplayClass17_2.<ModifyDocumentInvocationsTrampolineOverloadAndIntroduceParameterAsync>b__1(SyntaxNode currentArgumentListSyntax,SyntaxGenerator _)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxNode currentNode,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.ModifyDocumentInvocationsTrampolineOverloadAndIntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterDocumentRewriter.RewriteDocumentAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceParameterService`4.IntroduceParameterAsync[TExpressionSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax,TIdentifierNameSyntax](<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:42:08Z",
        "body": "I don't  see any recent prism hits on this."
      }
    ]
  },
  {
    "number": 54005,
    "title": "Interface type is not offered in completion list while typing declaration of an explicit implementation for a static member",
    "created_at": "2021-06-10T19:35:01Z",
    "closed_at": "2024-12-02T20:34:25Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense",
      "Feature - StaticAbstractMembersInInterfaces"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/54005",
    "body": "```\r\ninterface I1\r\n{\r\n\r\n    static abstract void M1();\r\n}\r\n\r\nclass C1 : I1\r\n{\r\n    static void \r\n}\r\n```\r\n\r\nPress 'space' after ```static void``` in C1. \r\n\r\nObserved:\r\nNo completion list offering ```I1``` for explicit implementation.\r\n\r\nExpected:\r\n```I1``` is offered as it is done for instance members.\r\n\r\nNote, properties, events, operators and conversions are affected as well.\r\n  ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/54005/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "AlekseyTs",
        "created_at": "2021-06-10T19:35:27Z",
        "body": "CC @sharwell "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T17:26:25Z",
        "body": "We woudl take a targeted community pr here."
      }
    ]
  },
  {
    "number": 53706,
    "title": "'Contract' methods should take CallerLineNumber",
    "created_at": "2021-05-26T22:15:28Z",
    "closed_at": "2021-06-07T17:22:16Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53706",
    "body": "We occasionally get contract failures that are hard to diagnose. This can happen when a method contains multiple contract calls and it's unclear which fired in a bug report or yellowbar. If we include the line number, this can help out a lot to identify the problematic case. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53706/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "tmat",
        "created_at": "2021-05-26T23:00:10Z",
        "body": "I think the exception info should have stack trace with IL offset. We should be able to match the IL offset to line number via PDB."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-05-26T23:17:38Z",
        "body": "I think the problem there is the extra manual steps that needs. Having the message just state the line number means being able to instantly jump to the right place. It's purely additive and doesn't prevent the other approach"
      },
      {
        "user": "tmat",
        "created_at": "2021-05-26T23:37:26Z",
        "body": "Sure, I'm just slightly concerned about bloating the generated IL."
      },
      {
        "user": "sharwell",
        "created_at": "2021-06-02T18:18:43Z",
        "body": "> Sure, I'm just slightly concerned about bloating the generated IL.\r\n\r\nWe can let RPS be the gauge here. Once a PR is submitted, we can manually run RPS on the PR to validate it before merging."
      }
    ]
  },
  {
    "number": 53646,
    "title": "Navigation bar is broken for partial classes",
    "created_at": "2021-05-24T14:21:30Z",
    "closed_at": "2021-06-05T05:09:12Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-Navigation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53646",
    "body": "Open Roslyn solution and navigate between different partial declarations of BoundAttribute class.\r\n\r\nObserved:\r\n- In src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundExpression.cs, ExpressionSymbol is the only member in the navigation bar.\r\n- In src\\Compilers\\CSharp\\Portable\\BoundTree\\Expression.cs, Children  is the only member in the navigation bar. At some point I saw more members, but selecting ExpressionSymbol didn't havigate anywhere.\r\n- src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs, more members are in the navigation bar, but ExpressionSymbol and Children are not among them.   ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53646/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2021-06-01T08:09:43Z",
        "body": "cc @CyrusNajmabadi "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-06-03T19:59:16Z",
        "body": "I can definitely repro something weird going on here.  Investigating."
      }
    ]
  },
  {
    "number": 53616,
    "title": "[16.9] Misisng new line on new class file via QuickAction",
    "created_at": "2021-05-22T09:06:42Z",
    "closed_at": "2024-10-22T17:24:01Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53616",
    "body": "**Version Used**: \r\nMicrosoft Visual Studio Community 2019\r\nVersion 16.9.6\r\nVisualStudio.16.Release/16.9.6+31313.79\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Make sure `Edit -> Advanced -> View white space` is active.\r\n2.  Write a line with a property with a unknown type, like `public Test MyTest { get; set; }`\r\n3. Open the `QuickAction` and click on `Generate class \"Test\" in new file`\r\n4. Open the new generate file `Test.cs`\r\n\r\n**Expected Behavior**:\r\nThe new file `Test.cs`  should have a new line at the end of the file.\r\n\r\n**Actual Behavior**:\r\nThe new file `Test.cs`  have no new line at the end of the file.\r\n\r\n**Additional Info**\r\nA new generated file via the `Project Explorer` have always a new line at the end of the file.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53616/comments",
    "author": "TobiasSekan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T17:24:01Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 53482,
    "title": "A warning is produced when `csharp_style_expression_bodied_* = when_on_single_line` is used",
    "created_at": "2021-05-18T09:29:58Z",
    "closed_at": "2024-10-22T17:22:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/53482",
    "body": "Part of my editorconfig:\r\n\r\n```ini\r\n# Default severity for analyzer diagnostics with category 'Style'\r\ndotnet_analyzer_diagnostic.category-Style.severity = warning\r\n\r\n# IDE0022: Use block body for methods\r\ncsharp_style_expression_bodied_methods = when_on_single_line\r\n\r\n# IDE0021: Use block body for constructors\r\ncsharp_style_expression_bodied_constructors = when_on_single_line\r\n```\r\n\r\nThe following code generates a warning:\r\n\r\n```csharp\r\n    internal class LocalLinkValidator : ILinkValidator\r\n    {\r\n        private readonly string _baseDirectory;\r\n\r\n        // Warning on the following line:\r\n        public LocalLinkValidator(string baseDirectory) => _baseDirectory = baseDirectory;\r\n    }\r\n```\r\n\r\nIt's not clear to me why there is a warning? I'm using an expression bodied member when on single line per editorconfig.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/53482/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "AraHaan",
        "created_at": "2021-05-25T15:13:30Z",
        "body": "> Part of my editorconfig:\r\n> \r\n> ```ini\r\n> # Default severity for analyzer diagnostics with category 'Style'\r\n> dotnet_analyzer_diagnostic.category-Style.severity = warning\r\n> \r\n> # IDE0022: Use block body for methods\r\n> csharp_style_expression_bodied_methods = when_on_single_line\r\n> \r\n> # IDE0021: Use block body for constructors\r\n> csharp_style_expression_bodied_constructors = when_on_single_line\r\n> ```\r\n> \r\n> The following code generates a warning:\r\n> \r\n> ```cs\r\n>     internal class LocalLinkValidator : ILinkValidator\r\n>     {\r\n>         private readonly string _baseDirectory;\r\n> \r\n>         // Warning on the following line:\r\n>         public LocalLinkValidator(string baseDirectory) => _baseDirectory = baseDirectory;\r\n>     }\r\n> ```\r\n> \r\n> It's not clear to me why there is a warning? I'm using an expression bodied member when on single line per editorconfig.\r\n\r\nThat is because your editorconfig file configured it to warn when the body is of a single line, did you mean to make it to when it's not a single line?"
      },
      {
        "user": "Youssef1313",
        "created_at": "2021-05-25T15:31:49Z",
        "body": "@AraHaan I think `csharp_style_expression_bodied_methods = when_on_single_line` should mean that this is the style I want. Not the style I would like to be warned for.\r\n\r\nBut adding @CyrusNajmabadi to confirm."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T17:22:13Z",
        "body": "For better or worse, this is what it means.  Having the names of the options/knobs be totally clear is def something we want, but not something we always get."
      }
    ]
  },
  {
    "number": 52730,
    "title": "Support searching for Roslyn in Tools→Options",
    "created_at": "2021-04-19T14:04:54Z",
    "closed_at": "2024-10-22T16:59:13Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/52730",
    "body": "**Version Used**: 748a289bd\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open **Tools &rarr; Options...**\r\n2. In the search box, type `Roslyn`\r\n\r\n**Expected Behavior**:\r\n\r\nThe tree filters to options relevant for Roslyn.\r\n\r\n**Actual Behavior**:\r\n\r\nThe tree is completely empty.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/52730/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:59:13Z",
        "body": "Closing out as speculative.  If we need o do this we should assign to a person/milestone and do it."
      }
    ]
  },
  {
    "number": 52385,
    "title": "Support single-line null checks for 'Add null check'",
    "created_at": "2021-04-02T23:31:43Z",
    "closed_at": "2021-04-08T21:35:38Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/52385",
    "body": "**Version Used**: VS 16.9.3\r\n\r\nThis is the most frequent ReSharper command that I use. Roslyn's code fix requires tedious cleanup because it generates five lines per parameter. The chances are not high that I'm going to start being okay with five lines per parameter. The contrast in friction  is significant for me; with ReSharper, I'm not always cleaning up after I click.\r\n\r\n```cs\r\nusing System;\r\n\r\npublic class C\r\n{\r\n    public void M(object first, object second, object third)\r\n    {\r\n        if (first is null)\r\n        {\r\n            throw new ArgumentNullException(nameof(first));\r\n        }\r\n\r\n        if (second is null)\r\n        {\r\n            throw new ArgumentNullException(nameof(second));\r\n        }\r\n\r\n        if (third is null)\r\n        {\r\n            throw new ArgumentNullException(nameof(third));\r\n        }\r\n\r\n        Console.WriteLine($\"{first}: {second} ({third})\");\r\n    }\r\n}\r\n```\r\n\r\nI want exactly what ReSharper does with a single command (except I have to insert the blank line myself, so Roslyn could even beat ReSharper here):\r\n\r\n```cs\r\nusing System;\r\n\r\npublic class C\r\n{\r\n    public void M(object first, object second, object third)\r\n    {\r\n        if (first is null) throw new ArgumentNullException(nameof(first));\r\n        if (second is null) throw new ArgumentNullException(nameof(second));\r\n        if (third is null) throw new ArgumentNullException(nameof(third));\r\n\r\n        Console.WriteLine($\"{first}: {second} ({third})\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/52385/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-04-02T23:32:05Z",
        "body": "I think it woudl be very reasonable for us to do something better here. First, if the user has csharp_prefer_braces=always, we keep the current form. However, if they do not, we should opt toward the more lightweight: if (p is null) throw new ArgumentNullException(nameof(p));\r\n\r\nTHere are often many of these in a row, and requiring multiple lines for such a recognizable and symettric pattern is overkill."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-04-03T16:54:54Z",
        "body": "Also, we should follow a 'when in rome' approach here.  IF tehre is an existing null check, we should try to detect it and just follow whatever it does.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2021-04-05T21:27:01Z",
        "body": "Design decision notes:\r\n\r\nDiscussed if we should move to either fully using VS snippets, or moving to a template-lite approach (like we do with `file_header_template`) to allow user to customize the code that is generated.  Ultimately decided that that was overkill and we would instead just drive updating the feature in the following manner: \r\n\r\nIf the user has the following options: \r\n\r\n```\r\ncsharp_prefer_braces=false/when_multiline \r\ncsharp_style_allow_embedded_statements_on_same_line_experimental=true \r\n```\r\n \r\nThen we will just generate the single line form of the argument check, without braces. \r\n\r\nIf the user has either `csharp_prefer_braces=true`, or `csharp_style_allow_embedded_statements_on_same_line_experimental=false` then we will enforce the old form for the code. \r\n\r\n \r\n\r\nNote that by default `csharp_style_allow_embedded_statements_on_same_line_experimental` is already `true`.  So the only thing a user needs to do is set `csharp_prefer_braces`.  Because `csharp_prefer_braces` is true by default, users who have not set anything will get the current form. "
      }
    ]
  },
  {
    "number": 52257,
    "title": "Visual Basic Refactoring for Foreach loop to LINQ Query and LINQ Method ",
    "created_at": "2021-03-30T18:15:04Z",
    "closed_at": "2024-10-22T16:54:27Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/52257",
    "body": "VB is currently missing a refactoring that converts a Foreach loop to a LINQ query and LINQ method. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/52257/comments",
    "author": "mikadumont",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:54:27Z",
        "body": "Closing out as we are not likely to make changes in this area."
      }
    ]
  },
  {
    "number": 51844,
    "title": "\"Add missing using directives on paste\" inserts them in the wrong order",
    "created_at": "2021-03-12T19:23:32Z",
    "closed_at": "2025-01-15T20:13:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/51844",
    "body": "**Version Used**: 16.10.P1\r\n\r\nPaste this into an empty file: `new List<Type>();`\r\n\r\nResult:\r\n\r\n```cs\r\nusing System.Collections.Generic;\r\nusing System;\r\n\r\nnew List<Type>();\r\n```\r\n\r\nExecute 'Remove and sort usings':\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnew List<Type>();\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/51844/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "Sergio0694",
        "created_at": "2021-10-06T21:07:09Z",
        "body": "+1 to this.\r\nTo add to this, I've noticed that even though I'm setting \"Place System directives first\" in VS, when I type/paste code and then click on \"Add using directive\" from the lightbulb, VS2022 keeps adding the new namespace at the top of the usings list (when the using is not from System), which is incorrect. Sometimes instead it just adds it at the end of the usings list, again not in the right order.\r\nAlso, I get this issue also when just typing code, and then clicking \"Add using directive\" from the lightbulb, not just on paste."
      }
    ]
  },
  {
    "number": 51466,
    "title": "Add usings on paste inside namespace missing whitespace",
    "created_at": "2021-02-25T02:21:34Z",
    "closed_at": "2024-10-22T16:44:05Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/51466",
    "body": "**Version Used**:  16.9.0 Preview 5.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\nnamespace MyNamesapce\r\n{\r\n    using System;\r\n\r\n    class MyClass { ... }\r\n}\r\n```\r\n\r\nPaste code into `MyClass` that requires adding `using` with the feature enabled.\r\n\r\n**Expected Behavior**:\r\n```C#\r\nnamespace MyNamesapce\r\n{\r\n    using System;\r\n    using AddedOnPaste;\r\n\r\n    class MyClass { ... }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```C#\r\nnamespace MyNamesapce\r\n{\r\n    using System;\r\nusing AddedOnPaste;\r\n\r\n    class MyClass { ... }\r\n}\r\n```\r\n\r\n/cc @ryzngard ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/51466/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:44:05Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 50706,
    "title": "Avoid converting line to string in TextLineExtension helpers",
    "created_at": "2021-01-22T20:00:13Z",
    "closed_at": "2024-11-11T21:10:51Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/50706",
    "body": "The following helpers operate on TextLine by converting it to string first:\r\n- `GetFirstNonWhitespaceOffset`\r\n- `GetFirstNonWhitespacePosition`\r\n- `GetLeadingWhitespace`\r\n\r\nThe following `StringExtensions` are also called on line converted to a string in some call sites:\r\n- `GetFirstNonWhitespaceOffset`\r\n- `GetLastNonWhitespaceOffset`\r\n- `GetLeadingWhitespace`\r\n\r\nThese can all avoid the string allocation indexing into the underlying `SourceText` directly.\r\n\r\nAlso, `GetFirst*` methods should follow `IndexOf` pattern (be renamed to `IndexOfXxx` and return -1 instead of returning `int?`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/50706/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-11T21:10:51Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 50429,
    "title": "CodeFix for CA1801 / in the future for IDE0060 doesn't respect formatting",
    "created_at": "2021-01-13T14:27:16Z",
    "closed_at": "2024-10-25T05:10:34Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Formatter",
      "Feature - IDE0060"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/50429",
    "body": "**Notes:**\r\nFiled here instead of Analysers repo due to it being sunseted in NetAnalysers and discussion at #49868\r\n\r\n**Version Used**: \r\n\r\nMicrosoft.CodeAnalysis.FxCopAnalyzers :: 3.3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        object a = new();\r\n        object b = new();\r\n\r\n        MethodWithUnused(\r\n            a, b\r\n            );\r\n    }\r\n\r\n    private static void MethodWithUnused(object a, object b) => Console.WriteLine($\"{b}\");\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nCodeFix on parameter `object a` results in callsite:\r\n```\r\n        MethodWithUnused(\r\n            b\r\n            );\r\n```\r\n\r\n**Actual Behavior**:\r\nCodeFix on parameter `object a` results in callsite:\r\n```\r\n        MethodWithUnused(\r\nb\r\n            );\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/50429/comments",
    "author": "petrroll",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:10:34Z",
        "body": "Closing out as we have not heard broader feedback on this."
      }
    ]
  },
  {
    "number": 50181,
    "title": "Use expression-body code fix does not preserve all comments",
    "created_at": "2020-12-30T23:05:28Z",
    "closed_at": "2022-06-27T17:50:59Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/50181",
    "body": "**Version Used**: 16.9.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun code-fix on:\r\n```csharp\r\n        public long Length                   //N\r\n        {\r\n            // N = N1 + N2\r\n            get { return TotalOperators + TotalOperands; }\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\n```csharp\r\n        public long Length                   //N\r\n            // N = N1 + N2\r\n            => TotalOperators + TotalOperands;\r\n```\r\n\r\n**Actual Behavior**:\r\n```csharp\r\n        public long Length                   //N\r\n=> TotalOperators + TotalOperands;\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/50181/comments",
    "author": "Evangelink",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2021-01-02T09:16:33Z",
        "body": "See also #38058 with very similar repro for the same codefix."
      }
    ]
  },
  {
    "number": 50174,
    "title": "Inline Parameter hints in multiple opened documents appear and disappear at different times",
    "created_at": "2020-12-30T18:09:50Z",
    "closed_at": "2023-03-07T23:49:42Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Resolution-By Design",
      "0 - Backlog",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/50174",
    "body": "**Version Used**: \r\nVersion 16.9.0 Preview 3.0 [30830.8.main]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have two C# documents open side by side in Visual Studio\r\n2. To show inline parameter hints, with focus in one of the documents, press and hold `Alt+F1`\r\n3. to remove hints, release keypress\r\n\r\n**Expected Behavior**:\r\nAll hints show up at the same time in step 2.\r\nAll hints go away instantly in step 3\r\n\r\n**Actual Behavior**:\r\nThe focused document shows and removes the hints instantly, the other document lags behind by 4-10 seconds,",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/50174/comments",
    "author": "vritant24",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-12-30T21:44:59Z",
        "body": "Interesting.  In general, we heavily delay tagging of non-focused documents to alleviate CPU hits and allow the focused doc to be unhindered.  This is an interesting case though as the user may:\r\n\r\n1. want to see the info in all visible docs\r\n2. be distracted by the speed differential\r\n\r\nNot sure how easy this would be to fix given how this is likely baked into the async infrastructure.  I'll see if i can do anything here."
      },
      {
        "user": "vritant24",
        "created_at": "2020-12-30T22:03:06Z",
        "body": "Ah delaying updates on non-focused documents makes sense.\r\nAlthough, in this case where there is a temporary action that's causing a UI change, the lag is really jarring.\r\n\r\nIf it isn't feasible to cause an instantaneous update on all visible documents, what about showing inline parameters only in the focused document? As a user, that would be my preference over the current behavior. \r\nShowing inline parameters on all visible documents could be opt in with the expected delay of updates since it's possible that a user may not mind that."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-12-31T21:13:58Z",
        "body": "> Although, in this case where there is a temporary action that's causing a UI change, the lag is really jarring.\r\n\r\nAgreed.\r\n\r\n> what about showing inline parameters only in the focused document? \r\n\r\nDefinitely something that could be reasonable!  Depending on how costly/complex it is to make the timing match, we may go with that approach to reduce the jarring-ness.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T23:00:56Z",
        "body": "@akhera99 did you fix this?"
      },
      {
        "user": "akhera99",
        "created_at": "2022-11-01T23:03:48Z",
        "body": "> @akhera99 did you fix this?\r\n\r\nI do not believe so unless the behavior has changed from other fixes. I will see if it still repros"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-03-07T23:49:42Z",
        "body": "Haven't heard about this being an issue for customers.  Existing behavior is acceptable.  Going to close out.  Note: this behavior will be controlled by lsp in the future as well."
      }
    ]
  },
  {
    "number": 49850,
    "title": "'GenerateConstructorCodeFixProvider' encountered an error and has been disabled",
    "created_at": "2020-12-08T18:16:32Z",
    "closed_at": "2020-12-18T19:30:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Investigation Required",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49850",
    "body": "**Version Used**: e9fd4dc7\r\n\r\n**Steps to Reproduce**:\r\n\r\nAdd a parameter to a VB constructor?\r\n\r\n**Expected Behavior**:\r\n\r\nCode fix does not crash.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.NonErrorNamedTypeSymbol' to type 'Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol'.\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion(SemanticModel semanticModel,ExpressionSyntax expression,ITypeSymbol destination)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSemanticFactsService.ClassifyConversion(SemanticModel semanticModel,SyntaxNode expression,ITypeSymbol destination)\r\n   at Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.GenerateConstructorHelpers.IsCompatible[TExpressionSyntax](ISemanticFactsService semanticFacts,SemanticModel semanticModel,IMethodSymbol constructor,ImmutableArray`1 expressions)\r\n   at Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.GenerateConstructorHelpers.CanDelegateTo[TExpressionSyntax](SemanticDocument document,ImmutableArray`1 parameters,ImmutableArray`1 expressions,IMethodSymbol constructor)\r\n   at Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.State.FindConstructorToDelegateTo(ImmutableArray`1 parameters,ImmutableArray`1 expressions,ImmutableArray`1 constructors,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.State.FindConstructorToDelegateTo(ImmutableArray`1 allParameters,ImmutableArray`1 allExpressions,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.State.TryInitializeDelegatedConstructor(CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.State.TryInitializeAsync[TService,TExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.State.GenerateAsync[TService,TExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`2.GenerateConstructorAsync[TService,TExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49850/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2020-12-16T20:22:44Z",
        "body": "Recently hit this too; fix incoming."
      }
    ]
  },
  {
    "number": 49742,
    "title": "rename refactoring synchronization breaks after a few deletions",
    "created_at": "2020-12-02T18:18:54Z",
    "closed_at": "2024-10-25T03:54:03Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49742",
    "body": "**Version Used**: This is with SDK 5.0.100\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use a long variable name multiple times in a method, e.g.\r\n```cs\r\npublic void Foo()\r\n{\r\n   var this_is_an_unusually_long_variable_name = new object();\r\n   if (this_is_an_unusually_long_variable_name == null)\r\n   {\r\n      this_is_an_unusually_long_variable_name = new object();\r\n   }\r\n   this_is_an_unusually_long_variable_name = null;\r\n   this_is_an_unusually_long_variable_name = new object();\r\n   this_is_an_unusually_long_variable_name = null;\r\n   // this is all rather pointless. I just use the variable a few times, that's the only point of it.\r\n}\r\n```\r\n2. Rename-refactor the variable name to something more sensible by deleting characters one at a time\r\n3. At about the fifth deletion, the synchronization between all variable usages breaks and only the one at the current cursor position gets renamed. All the others now are not named the same.\r\n\r\n**Expected Behavior**:\r\n\r\nSynchronization should remain no matter how many characters are deleted.\r\n\r\n**Actual Behavior**:\r\n\r\nSynchronization breaks.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49742/comments",
    "author": "stefanloerwald",
    "comments": [
      {
        "user": "stefanloerwald",
        "created_at": "2020-12-02T18:31:13Z",
        "body": "It's even difficult for me to reproduce it... Here's the closest to the problem I can share without breaking confidentiality:\r\n```cs\r\n    public class Bar\r\n    {\r\n        public async Task Baz<T1, T2>()\r\n        {\r\n            var hello_this_is_a_long_variable_name = await default(IAReallyLongLongNameOfAnApi).GetAsync<T1, T2>();\r\n            if (hello_this_is_a_long_variable_name == null)\r\n            {\r\n                return;\r\n            }\r\n            if (hello_this_is_a_long_variable_name != null)\r\n            {\r\n                await foo.DoSomethingAsync(hello_this_is_a_long_variable_name);\r\n                await bar.DoSomethingAsync(hello_this_is_a_long_variable_name, \"\");\r\n            }\r\n        }\r\n    }\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T03:54:03Z",
        "body": "Closing as this was fixed."
      }
    ]
  },
  {
    "number": 49657,
    "title": "Inline type hints should show for target-typed new expressions",
    "created_at": "2020-11-29T19:55:08Z",
    "closed_at": "2021-01-18T07:45:08Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - Target-Typed New"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49657",
    "body": "In variable initialization expressions, the type of the rhs expression new() is obvious and visible because it's the type of the variable (and thus can be read by looking to the left, usually).\r\n\r\nIn method arguments, this is not the case. To see the type, the caret needs to go to the parameter and the parameter hint info tooltip needs to be invoked (when using the keyboard).\r\n\r\nI think it would be nice if the type was displayed as a type hint, optionally always, but specifically when hitting Alt-F1.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49657/comments",
    "author": "AdmiralSnyder",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2020-12-01T19:20:27Z",
        "body": "cc @CyrusNajmabadi "
      }
    ]
  },
  {
    "number": 49347,
    "title": "IDE0057 Substring can be simplified - Should not apply in expression trees",
    "created_at": "2020-11-13T05:17:52Z",
    "closed_at": "2022-02-11T07:29:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49347",
    "body": "```csharp\r\nusing System.Linq.Expressions;\r\n\r\nExpression<Func<string, int, string>> e = (s, i) => s.Substring(i);\r\n```\r\n\r\nsuggests IDE0057. After applying the \"use range operator\" fix, we get:\r\n\r\n```csharp\r\nExpression<Func<string, int, string>> e = (s, i) => s[i..];\r\n```\r\n\r\nwhich reports errors:\r\n\r\n```\r\nCS8792\tAn expression tree may not contain a range ('..') expression.\t\r\nCS8790\tAn expression tree may not contain a pattern System.Index or System.Range indexer access.\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49347/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-11-13T07:00:07Z",
        "body": "Related to (but not duplicate of) #48520"
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-11-13T07:00:41Z",
        "body": "Also related to #41006"
      }
    ]
  },
  {
    "number": 49290,
    "title": "Add readonly modifier false positive for field of generic parameter type constrained to a struct",
    "created_at": "2020-11-11T18:59:52Z",
    "closed_at": "2025-01-21T05:54:01Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle",
      "Feature - IDE0044"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49290",
    "body": "```csharp\r\ninterface I\r\n{\r\n    int P { get; set; }\r\n}\r\n\r\nclass C<T> where T : struct, I\r\n{\r\n    private T _x; // IDE0044: Add readonly modifier\r\n\r\n    public void Foo() => _x.P = 42;\r\n}\r\n```\r\n\r\nMaking the field `readonly` is invalid because `_x.P` mutates the value. Adding the `readonly` modifier yields:\r\n\r\n```\r\nCS1648\tMembers of readonly field 'C<T>._x' cannot be modified (except in a constructor or a variable initializer)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49290/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-11-11T19:31:09Z",
        "body": "Related to #37981 (but doesn't seem to be a dupe)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:24:44Z",
        "body": "We would take a targeted community fix here."
      }
    ]
  },
  {
    "number": 49112,
    "title": "\"Add parameters to constructor\" refactoring doesn't work with expression-bodied constructor",
    "created_at": "2020-11-01T13:00:09Z",
    "closed_at": "2022-11-03T00:37:33Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49112",
    "body": "**Version Used**:  VS 2019 Version 16.8.0 Preview 6.0\r\n\r\nConsider the following code:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n    int y;\r\n\r\n    public C(int x) => this.x = x;\r\n}\r\n```\r\n\r\nIf I select the \"Add parameters to 'C(int)'\" refactoring on `y`, it produces the following code:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n    int y;\r\n\r\n    public C(int x, int y) => this.x = x;\r\n}\r\n```\r\n\r\nNotice that this does not actually assign the value of the introduced parameter `y` to the field `y`. I think it should do that, by turning the expression body of the constructor into a statement body.\r\n\r\nIf the constructor has a statement body, the refactoring works fine. I.e. it turns this code:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n    int y;\r\n\r\n    public C(int x)\r\n    {\r\n        this.x = x;\r\n    }\r\n}\r\n```\r\n\r\nInto this code:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n    int y;\r\n\r\n    public C(int x, int y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49112/comments",
    "author": "svick",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-11-01T15:02:29Z",
        "body": "I suspect this is a more general issue in `CSharpCodeGenerationService` (specifically `AddStatementsToMemberDeclaration`) (or more specifically, the call to `memberDeclaration.GetBody()` which gets the `Body` property of `ConstructorDeclarationSyntax` which is null in this case). Haven't debugged so not 100% sure. But commenting in case it's useful for someone when working on this.\r\n\r\nThe fix should involve getting `ExpressionBody` instead of `Body` in case `Body` is null."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-11-01T16:35:46Z",
        "body": "Or we can have it do a tuple assignment to preserve the expression body. There can also be a feature to group/ungroup these sorts of assignments"
      },
      {
        "user": "svick",
        "created_at": "2020-11-01T17:11:10Z",
        "body": "@CyrusNajmabadi That's also an option, though it's not one I would personally prefer. Is there an `.editorconfig` setting for tuple assignment in constructors? If not, should there be? The refactoring could then choose what to do based on that setting."
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-11-01T18:39:38Z",
        "body": "Even if we would go with preserving the expression body, I believe `CSharpCodeGenerationService` would still need the fix. Other codefixes may have the same sort of bug if they rely on `CSharpCodeGenerationService`."
      },
      {
        "user": "svick",
        "created_at": "2020-11-03T11:13:36Z",
        "body": "Curiously, if you do it the other way around, it works. E.g. if you have this code:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n\r\n    public C(int x, int y) => this.x = x;\r\n}\r\n```\r\n\r\nThen invoking \"Create and assign field 'y'\" produces:\r\n\r\n```c#\r\nclass C\r\n{\r\n    int x;\r\n    private readonly int y;\r\n\r\n    public C(int x, int y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n```\r\n\r\nI think the behavior of these two refactorings should be consistent."
      }
    ]
  },
  {
    "number": 49107,
    "title": "Create and assign field/property should recognize tuple initializer pattern",
    "created_at": "2020-11-01T06:37:32Z",
    "closed_at": "2023-02-01T22:33:33Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49107",
    "body": "**Version Used**: VS 16.8 preview 5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class A\r\n{\r\n    private readonly int _i1;\r\n    private readonly int _i2;\r\n\r\n    public A(int i1, int i2, int i3) => (_i1, _i2) = (i1, i2);\r\n}\r\n```\r\n\r\nRun code fix \"Create and assign field '_i3'\"\r\n \r\n**Expected Behavior**:\r\n\r\n```csharp\r\npublic class A\r\n{\r\n    private readonly int _i1;\r\n    private readonly int _i2;\r\n\r\n    public A(int i1, int i2, int i3) => (_i1, _i2, _3) = (i1, i2, i3);\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\npublic class A\r\n{\r\n    private readonly int _i1;\r\n    private readonly int _i2;\r\n    private readonly int _i3;\r\n\r\n    public A(int i1, int i2, int i3)\r\n    {\r\n        (_i1, _i2) = (i1, i2);\r\n        _i3 = i3;\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49107/comments",
    "author": "YairHalberstadt",
    "comments": [
      {
        "user": "alrz",
        "created_at": "2020-11-01T14:17:30Z",
        "body": "A more generic feature would be \"merge assignments to a deconstruction\" that works across any block."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-11-01T16:34:53Z",
        "body": "I like @alrz 's suggestion here"
      }
    ]
  },
  {
    "number": 49008,
    "title": "Quick Info for suppressions does not work for compiler warning numbers",
    "created_at": "2020-10-29T00:14:07Z",
    "closed_at": "2020-11-23T16:34:34Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/49008",
    "body": "**Version Used**: 1a8a5724a\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n#pragma warning disable CS0252\r\n#pragma warning disable 0252\r\n#pragma warning disable 252\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nHovering over any of the three warning IDs or numbers shows the Quick Info for CS0252.\r\n\r\n**Actual Behavior**:\r\n\r\nQuick Info only works when the full ID is specified (the first example line).",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/49008/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "MaStr11",
        "created_at": "2020-10-31T12:35:52Z",
        "body": "FYI: The PR that introduced quick info for `#pragma warning` was #46817. I will take a look."
      }
    ]
  },
  {
    "number": 48899,
    "title": "CodeFix for CS0621 adds wrong modifier",
    "created_at": "2020-10-24T12:43:46Z",
    "closed_at": "2021-01-09T04:03:51Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48899",
    "body": "**Version Used**: \r\n\r\nMicrosoft Visual Studio Community 2019 Preview\r\nVersion 16.8.0 Preview 5.0\r\n\r\nC# Tools   3.8.0-5.20515.7+713efb0e68d34ab75faaf709e071e5c2d8d4ed0e\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n\r\nAdd a simple class\r\n\r\n`\r\nabstract class TestClass\r\n{\r\n    abstract string Test { get; }\r\n}\r\n`\r\n\r\n2. \r\n\r\nRequest code fixes\r\n3. \r\n\r\nExecute CodeFix \"Add accessibility modifiers\"\r\n\r\n**Expected Behavior**:\r\n\r\ninternal or public modifier will be added\r\n\r\n**Actual Behavior**:\r\n\r\nprivate modifier will be added, thus the error persists",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48899/comments",
    "author": "b-straub",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2020-10-31T13:27:42Z",
        "body": "The codefix is **for IDE0040, not CS0621**. Code fixes for code style do run under error, and preserve the error as-is.\r\n\r\n@jinujoseph Could you re-triage this as by-design, or a feature request? Resolving CS0621 should be introduced as a new code fix."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-31T18:02:30Z",
        "body": "I think we could detect this and make it so that we do as more sensible job here"
      }
    ]
  },
  {
    "number": 48742,
    "title": "Implement abstract class incorrect for unconstrained generic nullable in base and value type in derived",
    "created_at": "2020-10-18T18:18:25Z",
    "closed_at": "2021-05-17T17:45:35Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48742",
    "body": "**Version Used**: VS 2019 version 16.8.0 Preview 4.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have code like the following:\r\n\r\n    ```c#\r\n    abstract class B<T>\r\n    {\r\n        public abstract T? M();\r\n    }\r\n\r\n    class D : B<int>\r\n    {\r\n    }\r\n    ```\r\n2. Use <kbd>Ctrl</kbd>+<kbd>.</kbd> to select \"implement abstract class\".\r\n\r\n**Expected Behavior**:\r\n\r\nThis generates code that compiles, i.e.:\r\n\r\n```c#\r\npublic override int M()\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe generated override uses a nullable value type, which doesn't compile:\r\n\r\n```c#\r\npublic override int? M()\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48742/comments",
    "author": "svick",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2020-11-03T12:45:03Z",
        "body": "Also applies to implement interface."
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2021-01-06T13:30:50Z",
        "body": "Should be already fixed by #49242"
      }
    ]
  },
  {
    "number": 48681,
    "title": "[VB.NET] Debug Mode doesn't support With blocks",
    "created_at": "2020-10-16T16:31:29Z",
    "closed_at": "2024-10-21T21:19:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Interactive-Debugging",
      "Area-Interactive"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48681",
    "body": "In this code sample:\r\n```VB.NET\r\n    Class Foo\r\n        Public Value As Integer\r\n    End Class\r\n\r\n    Sub main()\r\n        Dim x As New Foo\r\n        With x\r\n            .Value = 1  ' Add a breakpoint here\r\n        End With\r\n    End Sub\r\n```\r\n\r\nIf you run the code and break at the `sub main`, you will get no tip when hovering over `Value`, and if you try to show its value in the quick watch window, or add it to the Watch Window, you will see this message:\r\n```\r\nerror BC30157: Leading '.' or '!' can only appear inside a 'With' statement.\r\n```\r\n\r\nIn my app, I deleted the With Statement, and used normal code, so I can debug it. This is one of the reasons that prevented me from using With in VB.NET. We had to use it in VB6 though, since there was no chain calls. In VB.NET, the lack of debugeer support makes it useless.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48681/comments",
    "author": "VBAndCs",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-16T17:01:31Z",
        "body": "@VBAndCs would you be interested in contributing a fix here?"
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-10-16T20:28:14Z",
        "body": "Adding `.Value` in the watch window **should** produce an error. To me, that seems like the correct behavior.\r\nHowever, hovering over `Value` should work."
      },
      {
        "user": "VBAndCs",
        "created_at": "2020-10-17T06:11:17Z",
        "body": "@Youssef1313  \r\nI disagree. This command can add the `[object].Value` to the watch window, by getting the `[object]` from With Statement."
      },
      {
        "user": "VBAndCs",
        "created_at": "2020-10-17T06:12:01Z",
        "body": "@CyrusNajmabadi \r\nIf I have time, I will inform you."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:19:21Z",
        "body": "Closing out as we are unlikely to change thie behavior."
      }
    ]
  },
  {
    "number": 48586,
    "title": "IDE0063 code fixer deletes comments nearby using statement or curly braces",
    "created_at": "2020-10-14T11:04:02Z",
    "closed_at": "2020-10-24T21:57:37Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48586",
    "body": "**Version Used**: Visual Studio 2019 Version 16.7.5\r\n\r\n**Steps to Reproduce**: \r\n1.  Write a following code, which has an `IDE0063 'using' statement can be simplified`:\r\n```cs\r\nusing System;\r\nusing System.IO;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        using (var s = new MemoryStream()) // foo\r\n        { // bar\r\n            Console.WriteLine(s.CanRead); // Only this comment remains.\r\n        } // baz\r\n    }\r\n}\r\n```\r\n2. Apply  the `Use simple 'using' statement`\r\n\r\n**Expected Behavior**:\r\nAll comments remain like this:\r\n```cs\r\nusing System;\r\nusing System.IO;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        using var s = new MemoryStream(); // foo\r\n        // bar\r\n        Console.WriteLine(s.CanRead); // Only this comment remains.\r\n        // baz\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\"foo\", \"bar\", \"baz\" comments are deleted:\r\n```cs\r\nusing System;\r\nusing System.IO;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        using var s = new MemoryStream();\r\n        Console.WriteLine(s.CanRead); // Only this comment remains.\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48586/comments",
    "author": "Tan90909090",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-10-14T17:53:51Z",
        "body": "We would take a targetted PR that updated things to have this behavior."
      },
      {
        "user": "louis-z",
        "created_at": "2020-10-18T23:45:53Z",
        "body": "I can take a look at it."
      },
      {
        "user": "louis-z",
        "created_at": "2020-10-21T01:21:35Z",
        "body": "> **Expected Behavior**:\r\n> All comments remain like this:\r\n> \r\n> ```cs\r\n> using System;\r\n> using System.IO;\r\n> \r\n> class C\r\n> {\r\n>     static void Main()\r\n>     {\r\n>         using var s = new MemoryStream(); // foo\r\n>         // bar\r\n>         Console.WriteLine(s.CanRead); // Only this comment remains.\r\n>         // baz\r\n>     }\r\n> }\r\n> ```\r\n\r\nOk, so I managed to resolve the issue, but instead I get aligned comments as follows:\r\n\r\n```cs\r\nusing System;\r\nusing System.IO;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        using var s = new MemoryStream(); // foo\r\n                                          // bar\r\n        Console.WriteLine(s.CanRead); // Only this comment remains.\r\n                                      // baz\r\n    }\r\n}\r\n```\r\n\r\nIf that sounds acceptable, I'll gladly submit a PR."
      }
    ]
  },
  {
    "number": 48315,
    "title": "MoveToNamespace doesn't work for records",
    "created_at": "2020-10-05T01:37:08Z",
    "closed_at": "2023-11-07T17:28:01Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Records"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48315",
    "body": "**Version Used**: \r\n\r\n16.8 Preview 3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Using the following code:\r\n\r\n2. Invoke <kbd>Ctrl</kbd>+<kbd>.</kbd> on the class name and select **move to namespace**.\r\n\r\n3. Type any name in the dialog\r\n\r\n4. It works:\r\n\r\n    ```csharp\r\n    namespace MyNamespace\r\n    {\r\n        public record MyRecord { }\r\n    }\r\n\r\n    namespace MyNewNamespace\r\n    {\r\n        public class MyClass { }\r\n    }\r\n    ```\r\n\r\n5. Repeat the same steps for the record. It doesn't work.\r\n\r\n**Expected Behavior**:\r\n\r\nWorks the same as with class.\r\n\r\n**Actual Behavior**:\r\n\r\nThe record is completely deleted.\r\n\r\n```csharp\r\nnamespace sdf\r\n{\r\n}\r\n\r\nnamespace MyNamespace\r\n{\r\n    public class MyClass { }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48315/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "MichaelWhi",
        "created_at": "2023-11-07T17:24:42Z",
        "body": "I tested this with Visual Studio 2022, and it works and is not an issue anymore. \r\nI think we can /close this issue. "
      }
    ]
  },
  {
    "number": 48091,
    "title": "VB Change Signature when caller does not have trailing () fails",
    "created_at": "2020-09-27T02:53:11Z",
    "closed_at": "2020-10-13T23:14:44Z",
    "labels": [
      "Bug",
      "Resolution-Duplicate",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48091",
    "body": "**Version Used**: \r\nVersion 16.8.0 Preview 3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Extension with no additional parameters or only optional parameters, for example\r\n```VB\r\n<Extension>\r\nFriend Function WithTrailingEOL(Of T As SyntaxNode)(node As T, Optional RemoveContinuation As Boolean = True) As T\r\n```\r\n2.  Call function with no () at the end\r\n```VB\r\nDim X  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL\r\nDim Y  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL()\r\nDim Z  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL(RemoveContinuation:=True)\r\n```\r\n3. Select Change Signature on WithTrailingEOL and add a required parameter\r\n\r\n**Expected Behavior**:\r\nX, Y and Z will all have the new parameter added\r\n**Actual Behavior**:\r\nOnly lines with Y and Z have the new parameter added, line X is unchanged, I have not tried this with non extensions.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48091/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "allisonchou",
        "created_at": "2020-10-13T23:14:44Z",
        "body": "Closing as a dupe of #48090."
      }
    ]
  },
  {
    "number": 48090,
    "title": "VB Change Signature incorrect when no () is in Caller",
    "created_at": "2020-09-27T02:51:40Z",
    "closed_at": "2024-10-25T04:38:36Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48090",
    "body": "**Version Used**: \r\nVersion 16.8.0 Preview 3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create Extension with no additional parameters or only optional parameters, for example\r\n```VB\r\n<Extension>\r\nFriend Function WithTrailingEOL(Of T As SyntaxNode)(node As T, Optional RemoveContinuation As Boolean = True) As T\r\n```\r\n2.  Call function with no () at the end\r\n```VB\r\nDim X  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL\r\nDim Y  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL()\r\nDim Z  = stmt.WithConvertedTriviaFrom(node.Body.GetBraces.Item1).WithTrailingEOL(RemoveContinuation:=True)\r\n```\r\n3. Select Change Signature on WithTrailingEOL and add a required parameter\r\n\r\n**Expected Behavior**:\r\nX, Y and Z will all have the new parameter added\r\n**Actual Behavior**:\r\nOnly lines with Y and Z have the new parameter added, line X is unchanged, I have not tried this with non extensions.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48090/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "allisonchou",
        "created_at": "2020-12-12T05:23:38Z",
        "body": "This is blocked until #49944 is resolved."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:38:36Z",
        "body": "Closing out as we are unlikely to be changing these scenarios."
      }
    ]
  },
  {
    "number": 48027,
    "title": "CSharpImplementImplicitlyCodeRefactoringProvider crash",
    "created_at": "2020-09-24T20:00:17Z",
    "closed_at": "2020-10-08T04:54:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48027",
    "body": "```\r\nSystem.InvalidOperationException : Sequence contains no elements\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at System.Linq.ImmutableArrayExtensions.First[T](ImmutableArray`1 immutableArray)\r\n   at async Microsoft.CodeAnalysis.CSharp.ImplementInterface.AbstractChangeImplementionCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n```\r\n\r\nRepro code (try invoke codeactions at $$):\r\n```cs\r\nusing System;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Foo\r\n{\r\n    public class Bar\r\n    {\r\n\r\n        IEnumerator $IEnumerable$.GetEnumerator()\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48027/comments",
    "author": "genlu",
    "comments": [
      {
        "user": "louis-z",
        "created_at": "2020-10-06T11:50:51Z",
        "body": "I'd like to work on this."
      },
      {
        "user": "genlu",
        "created_at": "2020-10-06T17:33:58Z",
        "body": "@louis-z Awesome, thanks! Please let me know if you have any questions :)"
      },
      {
        "user": "louis-z",
        "created_at": "2020-10-06T21:44:50Z",
        "body": "No worries @genlu, it was easy to create a test that reproduces the problem. However, I'm thinking that since the code snippet you provided doesn't compile, CSharpImplementImplicitlyCodeRefactoringProvider should simply not report anything. Is that what you had in mind?"
      }
    ]
  },
  {
    "number": 48010,
    "title": "Analyzer for possible wrong Roslyn API usage, and improve exception",
    "created_at": "2020-09-24T13:05:32Z",
    "closed_at": "2024-10-21T21:11:51Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48010",
    "body": "I had the following code fragment:\r\n\r\n```csharp\r\nvar statements = new SyntaxList<StatementSyntax>();\r\nstatements = statements.Add(SyntaxFactory.ReturnStatement(SyntaxFactory.LiteralExpression(SyntaxKind.TrueKeyword)));\r\n```\r\n\r\nIt throws ArgumentOfRangeException, which was a bit unclear to me.\r\n\r\nSuggestions:\r\n\r\n1. Improve the exception thrown.\r\n2. Add an analyzer to point to this mistake. I was only saved by @KirillOsenkov's RoslynQuoter to know that I should have used `SyntaxKind.TrueLiteralExpression`\r\n\r\n\r\nI also think using:\r\n\r\n```\r\nstatements.Add(SyntaxFactory.ReturnStatement(SyntaxFactory.LiteralExpression(SyntaxKind.TrueKeyword)));\r\n```\r\n\r\nis a candidate for another analyzer too. (the above line does nothing, it creates a new list which is just thrown away and not used)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48010/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2020-10-06T17:58:56Z",
        "body": "@mavasani should we move this to roslyn-analyzer repo"
      },
      {
        "user": "mavasani",
        "created_at": "2020-10-06T18:11:02Z",
        "body": "> should we move this to roslyn-analyzer repo\r\n\r\nI think we should keep this issue here itself. We do not have any analyzers helping correct usage of Syntax Generator/Factory APIs, but instead rely on Roslyn API itself generating good exceptions, i.e. basically `Improve the exception thrown.` request here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:11:52Z",
        "body": "Closing due to lack of feedback and high cost of impl."
      }
    ]
  },
  {
    "number": 47999,
    "title": "IDE0032 fixer should strip readonly keyword from properties",
    "created_at": "2020-09-24T03:31:36Z",
    "closed_at": "2020-09-29T07:02:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47999",
    "body": "The code fix provider for IDE0032 (use auto-property) produces invalid code when faced with C# 8 readonly instance members.\r\n\r\n**Version Used**: 3.7.0-6.20459.4 (7ee7c540), Visual Studio 16.7.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Minimal reproduction:\r\n\r\n```csharp\r\nstruct IDE0032\r\n{\r\n    private int x;\r\n    public readonly int X => x;\r\n    public void SetX(int value) => x = value; // ensures the produced auto-property is settable\r\n}\r\n```\r\n\r\n2. IDE0032 will be reported on `x`. Apply the \"Use auto property\" code fix.\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nstruct IDE0032\r\n{\r\n    public int X { get; private set; }\r\n    public void SetX(int value) => X = value;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nstruct IDE0032\r\n{\r\n    public readonly int X { get; private set; } // CS8659: Auto-implemented property 'IDE0032.X' cannot be marked 'readonly' because it has a 'set' accessor.\r\n    public void SetX(int value) => X = value;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47999/comments",
    "author": "naine",
    "comments": [
      {
        "user": "louis-z",
        "created_at": "2020-09-27T15:15:46Z",
        "body": "I'd like to take a stab at fixing this."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-27T17:41:43Z",
        "body": "@louis-z go for it! :-)"
      }
    ]
  },
  {
    "number": 47972,
    "title": "\"IDE0041 Null check can be simplified\" ignores generic type constraint when deciding between 'is null' and '== null'.",
    "created_at": "2020-09-23T11:42:08Z",
    "closed_at": "2020-10-02T15:17:27Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47972",
    "body": "**Steps to Reproduce**:\r\n\r\n1. Define a class with an overridden `==` operator:\r\n```csharp\r\npublic class Example\r\n{\r\n    public static bool operator ==(Example left, Example right) => true;\r\n    public static bool operator !=(Example left, Example right) => !(left == right);\r\n    public override bool Equals(object obj) => true;\r\n    public override int GetHashCode() => 0;\r\n}\r\n```\r\n\r\n2. Define a null-checking method, with a generic parameter constrained to the `Example` class:\r\n```csharp\r\npublic static bool IsNull<T>(T arg) where T : Example\r\n{\r\n    return ReferenceEquals(arg, null);\r\n}\r\n```\r\n\r\n3. Apply the IDE0041 suggested fix to it.\r\n\r\n**Expected Behaviour**:\r\n\r\nThe fix should use `is null`, as it does if the method is not generic and the argument is typed as `Example`:\r\n```csharp\r\npublic static bool IsNull(Example arg)\r\n{\r\n    return arg is null;\r\n}\r\n```\r\n'Compiling' the C# using SharpLab shows that this is interpreted as `(object)arg == null`, which avoids using the overridden `==` operator.\r\n\r\n**Actual Behaviour**\r\n\r\n```csharp\r\npublic static bool IsNull<T>(T arg) where T : Example\r\n{\r\n    return arg == null;\r\n}\r\n```\r\nThe fix uses `== null`, which is a call to the overridden `==` operator and not equivalent (especially in this slightly contrived case) to `ReferenceEquals(arg, null)`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47972/comments",
    "author": "DoktorDemento",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2020-09-30T17:08:58Z",
        "body": "This is an interesting mixture of two facts.\r\n\r\nFirst, unconstrained generic type supports `is null` from C# 8, but the analyzer isn't updated for that.\r\nThen, the base class constraint is mis-recognized as no reference type constraint."
      }
    ]
  },
  {
    "number": 47969,
    "title": "Refactoring: Generate record default GetHashCode and Equals methods",
    "created_at": "2020-09-23T06:06:18Z",
    "closed_at": "2024-10-21T21:14:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - Records",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47969",
    "body": "In case you want to exclude or change a single member from equality we need to fully redefine GetHashCode and Equals on records.\r\n\r\nAn IDE feature could generate the default impl so it can be further modified by user.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47969/comments",
    "author": "alrz",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2020-10-15T21:09:42Z",
        "body": "cc @CyrusNajmabadi for info"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:14:53Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 47910,
    "title": "Separate import directive groups only works when already sorted correctly",
    "created_at": "2020-09-21T20:45:47Z",
    "closed_at": "2022-11-02T19:44:19Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47910",
    "body": "Separating import directive groups (using groups) with the .editorconfig and GUI option ``dotnet_separate_import_directive_groups`` stops working correctly when the existing imports/groups are not already sorted alphabetically (System first, alphabetically after).\r\n\r\nInstead, any new imports will inserted at the end.\r\n\r\n**Example:**\r\n```cs\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nusing Syslog.Common;\r\n\r\nusing NLua;\r\n```\r\n\r\nAdding a new import ``using Syslog.Common.DB``, it will be placed after NLua instead of after ``using Syslog.Common``.\r\n\r\nConsider #44052 so that any changes or ideas don't clash.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47910/comments",
    "author": "ousnius",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-21T22:56:58Z",
        "body": "yeah, we basically don't touch things if your code doesn't match the current settings.  The thinking being \"We don't understand what they're doing, so we won't mess with it\".\r\n\r\nThat said, when adding imports, if we see that it is grouped (even in a way that doesn't match the settings we have), we could attempt to add into the appropriate group.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T19:44:19Z",
        "body": "Closing out as working as intended"
      }
    ]
  },
  {
    "number": 47823,
    "title": "Unreported unused private field",
    "created_at": "2020-09-18T00:44:25Z",
    "closed_at": "2024-10-21T21:14:21Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47823",
    "body": "**Version Used**: \r\n\r\nVersion 16.8.0 Preview 4.0 [30514.8.main]\r\n\r\n**Steps to Reproduce**:\r\n\r\nCheckout dotnet/roslyn @ ed2982191a7db2358ae97231b995e792b0eb9a6a. Build. \r\n\r\n**Expected Behavior**:\r\n\r\n```\r\nsrc\\EditorFeatures\\Core\\FindUsages\\AbstractFindUsagesService.cs(13,44): warning IDE0052: Private member 'AbstractFindUsagesService._threadingContext' can be removed as the value assigned to it is never read.\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nNo diagnostic.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47823/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:14:21Z",
        "body": "Closing out as this was rewritten."
      }
    ]
  },
  {
    "number": 47698,
    "title": "CS1061 CodeFix should suggest to add using for generic extension method when non-generic method with same name present",
    "created_at": "2020-09-15T09:26:58Z",
    "closed_at": "2024-10-21T21:06:39Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47698",
    "body": "**Version Used**: \r\nVS2019 16.8 P3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add `Microsoft.Extensions.DependencyInjection` nuget package.\r\n2. Create file with code:\r\n```csharp\r\nusing System;\r\n\r\npublic class TestClass\r\n{\r\n    public TestClass(IServiceProvider serviceProvider)\r\n    {\r\n        serviceProvider.$$GetService<TestService>();\r\n    }\r\n}\r\n\r\npublic class TestService { }\r\n```\r\n3. Invoke bulb menu on $$.\r\n\r\n**Expected Behavior**:\r\n`using Microsoft.Extensions.DependencyInjection;` codefix is present.\r\n\r\n**Actual Behavior**:\r\nNo codefix present.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47698/comments",
    "author": "Dreamescaper",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:06:39Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 47696,
    "title": "InlineParameterNameHints: add support for record base type",
    "created_at": "2020-09-15T01:26:14Z",
    "closed_at": "2020-09-22T20:53:03Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature - Records"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47696",
    "body": "Currently, we don't offer parameter name hints on those two in the following example. \r\n\r\n```\r\n        Public Class CSharpInlineParameterNameHintsTests\r\n...\r\n            <WpfFact, Trait(Traits.Feature, Traits.Features.InlineParameterNameHints)>\r\n            Public Async Function TestRecordBaseType() As Task\r\n                Dim input =\r\n                <Workspace>\r\n                    <Project Language=\"C#\" CommonReferences=\"true\">\r\n                        <Document>\r\nrecord Base(int Alice, int Bob);\r\nrecord Derived(int Other) : Base({|Alice: 2|}, {|Bob: 2|});\r\n                    </Document>\r\n                    </Project>\r\n                </Workspace>\r\n\r\n                Await VerifyParamHints(input)\r\n            End Function\r\n```\r\n\r\nThis is because `ArgumentSyntaxExtensions.DetermineParameter` does not support `PrimaryConstructorBaseTypeSyntax`.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47696/comments",
    "author": "jcouv",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-09-18T15:43:00Z",
        "body": "@jcouv Do you want to support ObjectCreationExpressionSyntax and ConstructorInitializerSyntax as well? They doesn't seem to be currently supported."
      },
      {
        "user": "jcouv",
        "created_at": "2020-09-18T18:59:56Z",
        "body": "Yes, I assume we'll want to do all those construction and initialization syntaxes together. I suspect there may already be an issue for tracking support on pre-records syntax.\r\nTagging @akhera99 @CyrusNajmabadi @mikadumont to confirm plan/desire."
      }
    ]
  },
  {
    "number": 47615,
    "title": "CSharpInlineMethodRefactoringProvider throws exception with named arguments",
    "created_at": "2020-09-11T02:51:41Z",
    "closed_at": "2025-01-20T20:30:55Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47615",
    "body": "Using 30509.62.main\r\n\r\nRepro code:\r\n```C#\r\nclass C\r\n{\r\n    private void M3(int one, string two, int[] three)\r\n    {\r\n        M3(one, two: \"two\", new int[3]);\r\n    }\r\n}\r\n```\r\nPulling up the code actions menu next to the call to M3 throws the following exception:\r\n\r\nStack trace:\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameColon(NameColonSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.InlineMethod.AbstractInlineMethodRefactoringProvider`4.ReplaceAllSyntaxNodesForSymbolAsync[TMethodDeclarationSyntax,TStatementSyntax,TExpressionSyntax,TInvocationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.InlineMethod.AbstractInlineMethodRefactoringProvider`4.GetInlineMethodContextAsync[TMethodDeclarationSyntax,TStatementSyntax,TExpressionSyntax,TInvocationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.InlineMethod.AbstractInlineMethodRefactoringProvider`4.InlineMethodAsync[TMethodDeclarationSyntax,TStatementSyntax,TExpressionSyntax,TInvocationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47615/comments",
    "author": "allisonchou",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2025-01-20T20:30:56Z",
        "body": "I do not repro this.  Closing out."
      }
    ]
  },
  {
    "number": 47448,
    "title": "Mark `public` modifier on interface methods as unnecessary",
    "created_at": "2020-09-04T01:15:07Z",
    "closed_at": "2024-12-09T18:38:49Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47448",
    "body": "**Version Used**: \r\nVersion 16.8.0 Preview 3.0 [30427.284.main]\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\ninterface I\r\n{\r\n    public void F();\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n`public` is marked as unnecessary.\r\n\r\n**Actual Behavior**:\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47448/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-09-04T01:41:33Z",
        "body": "we acutally have a setting for this: dotnet_style_require_accessibility_modifiers:for_non_interface_members.\r\n\r\nWe created the setting with the knowledge that DIM was coming, but i don't think it was ever hooked up to work.  We should df impl it.  If the value is not set to 'always' we should def also fade out.\r\n\r\n"
      }
    ]
  },
  {
    "number": 47272,
    "title": "Diagnostic for conflicting constructor declarations refer to the conflicting member as '.ctor'",
    "created_at": "2020-08-31T01:19:44Z",
    "closed_at": "2020-08-31T23:56:08Z",
    "labels": [
      "help wanted",
      "Area-Compilers",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47272",
    "body": "**Version Used**: 3.7.0-6.20418.4 (9b878f99)\r\n\r\n**Steps to Reproduce**:\r\nDefine a type with conflicting constructor signatures:\r\n```cs\r\npublic class C\r\n{\r\n    public C() { }\r\n    public C() { }\r\n}\r\n```\r\n**Expected Behavior**:\r\nAn error which says \"Type 'C' already defines a constructor with the same parameter types\"\r\n\r\n**Actual Behavior**:\r\nerror CS0111: Type 'C' already defines a member called '.ctor' with the same parameter types\r\n\r\nThis compiler diagnostic seems to have been referring to the conflicting member as '.ctor' for a while now. Before that, I believe it would have referred to the conflicting member as 'C'.\r\nIdeally, I think the error message should directly say that there are conflicting *constructors*, since constructors do not naturally have their own name. Regardless, referring to the member as '.ctor' is confusing and should be changed.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47272/comments",
    "author": "reflectronic",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2020-08-31T15:42:08Z",
        "body": "I think the fix should be straight forward here. I'll work on it."
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-08-31T15:50:58Z",
        "body": "@333fred the fix should be done for both instance constructors (`.ctor`) and static constructors (`.cctor`) right? (without mentioning \"with the same parameter types\" for static ctors)"
      },
      {
        "user": "RikkiGibson",
        "created_at": "2020-08-31T16:15:19Z",
        "body": "it feels like the point where we give CS0111 diagnostics should be adjusted to use a more appropriate method of converting the symbol to string. It shouldn't be necessary to directly check if the symbol is a constructor or static constructor for example."
      },
      {
        "user": "RikkiGibson",
        "created_at": "2020-08-31T16:15:57Z",
        "body": "There might be a minimal SymbolDisplayOptions or something like that which should be used in order to minimize test churn when making this change."
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-08-31T16:20:08Z",
        "body": "@RikkiGibson The fix I worked on was to introduce two separate new errors. Because, the part \"with the same parameter types\" isn't applicable to static ctors.\r\nSo, even if we converted the symbol to a more neat form other than \".ctor\" and \".cctor\", the message won't be great.\r\n\r\nBut feel free if you want me to take a different approach."
      }
    ]
  },
  {
    "number": 47142,
    "title": "Incorrect \"Remove unused parameter\" for record",
    "created_at": "2020-08-26T09:23:05Z",
    "closed_at": "2020-09-19T22:04:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Urgency-Soon",
      "Feature - Records",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47142",
    "body": "**Version Used**: \r\nVS16.8 preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\n    record A(int X);\r\n\r\n    record B(int X, int Y /* Unexpected IDE0060 */) : A(X);\r\n\r\n    class C\r\n    {\r\n        void Func(B b)\r\n        {\r\n            Use(b.Y);\r\n        }\r\n\r\n        private void Use(int i)\r\n        {\r\n        }\r\n    }\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nShould not suggest removing `int Y` near the comment\r\n\r\n**Actual Behavior**:\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47142/comments",
    "author": "pawchen",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2020-08-26T13:20:44Z",
        "body": "Is this a bug in data flow analysis? We implicitly assign the parameter `Y` to the backing field for the property `Y`. Maybe we never have a bound tree for it and thus nothing to analyze.\r\n\r\nIt feels like the investigation should begin in the IDE analyzer so assigning to IDE team."
      },
      {
        "user": "jinujoseph",
        "created_at": "2020-09-02T21:40:34Z",
        "body": "cc @CyrusNajmabadi "
      }
    ]
  },
  {
    "number": 47058,
    "title": "'InlineTemporaryCodeRefactoringProvider' encountered an error",
    "created_at": "2020-08-22T07:09:06Z",
    "closed_at": "2024-10-21T21:27:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/47058",
    "body": "**Version Used**: Microsoft Visual Studio 16.7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nI was scrolling over ~~`Binder_Statements_Tests.vb`~~ `Parser.vb`, not sure what exactly happened. So I don't have clear repro steps. However, the stack trace should give an insight on what happened.\r\n\r\n**Expected Behavior**:\r\n\r\nNo crash\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nSystem.InvalidOperationException : Sequence contains no matching element\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source,Func`2 predicate)\r\n   at async Microsoft.CodeAnalysis.VisualBasic.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.VB$StateMachine_4_GetReferencesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.VisualBasic.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.VB$StateMachine_3_ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/47058/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:27:58Z",
        "body": "Closing out due to lack of prism hits."
      }
    ]
  },
  {
    "number": 46798,
    "title": "Offer to upgrade `!(x is Y y)` to `x is not Y y` in C#9",
    "created_at": "2020-08-13T21:01:56Z",
    "closed_at": "2020-08-17T20:09:07Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature - Pattern Matching"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46798",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46798/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-08-13T22:06:57Z",
        "body": "📝 This analyzer and fix should also support the `IsNot` keyword for Visual Basic (#46706)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-13T22:13:20Z",
        "body": "enhhhhhhhhhh :)  i'm ok with that coming in a separate feature.  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-13T23:20:01Z",
        "body": "> 📝 This analyzer and fix should also support the IsNot keyword for Visual Basic (#46706)\r\n\r\nOk, i'll do it :)"
      }
    ]
  },
  {
    "number": 46790,
    "title": "Interactive window does not show inline parameter name hints",
    "created_at": "2020-08-13T19:06:20Z",
    "closed_at": "2024-10-21T20:53:42Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "Feature - Inline Parameter Hints"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46790",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46790/comments",
    "author": "akhera99",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T20:53:42Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 46708,
    "title": "Support exceptions in naming rules",
    "created_at": "2020-08-11T14:09:34Z",
    "closed_at": "2020-08-18T19:36:22Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46708",
    "body": "**Version Used**: VS 16.7\r\n\r\nI have a rule making all private methods lowerCamelCase but I want an exception for `Main` method.\r\nThere should be an option to make an exception for rules\r\n\r\n```cs\r\n# Lower camelCase private methods style\r\ndotnet_naming_rule.private_methods_lower_camel_case.symbols=private_methods\r\ndotnet_naming_rule.private_methods_lower_camel_case.style=lower_camel_case\r\ndotnet_naming_rule.private_methods_lower_camel_case.severity=suggestion\r\ndotnet_naming_symbols.private_methods.applicable_kinds=method\r\ndotnet_naming_symbols.private_methods.applicable_accessibilities=private\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46708/comments",
    "author": "NN---",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-13T22:42:27Z",
        "body": "> but I want an exception for Main method.\r\n\r\nWe should not ever be trying to apply naming styles to the Main method."
      },
      {
        "user": "jinujoseph",
        "created_at": "2020-08-18T19:36:20Z",
        "body": "Duplicate of #36385"
      }
    ]
  },
  {
    "number": 46707,
    "title": "[Analyzer Suggestion] Keywords Casing",
    "created_at": "2020-08-11T14:05:04Z",
    "closed_at": "2024-10-25T05:17:58Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Feature Request",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46707",
    "body": "**Brief description:**\r\n\r\nVisual Basic isn't a case-sensitive language, which allows to use the keywords in any casing. While this is perfectly valid, it's much more common to use PascalCasing for keywords.\r\n\r\n**Languages applicable:**\r\n\r\nVisual Basic\r\n\r\n**Code example that the analyzer should report:**\r\n\r\n```vb\r\npublic class Student\r\nend class\r\n```\r\n\r\nshould be fixed to:\r\n\r\n```vb\r\nPublic Class Student\r\nEnd Class\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46707/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-08-13T22:05:08Z",
        "body": "This is a gap between formatting analyzer and the Format Document command for Visual Basic. We should update the formatting analyzer to include this casing check."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:17:58Z",
        "body": "Closing out as we are not investing in these areas."
      }
    ]
  },
  {
    "number": 46706,
    "title": "[Analyzer Suggestion] Use IsNot operator instead of Not .... Is",
    "created_at": "2020-08-11T14:01:30Z",
    "closed_at": "2020-08-17T20:09:07Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46706",
    "body": "**Brief description:**\r\n\r\nUse `IsNot` operator instead of `Not ... Is`\r\n\r\n**Languages applicable:**\r\n\r\nVisual Basic\r\n\r\n**Code example that the analyzer should report:**\r\n\r\n```vb\r\nPublic Sub MySub(s As String)\r\n    If Not s Is Nothing Then ' This should be fixed to: \"If s IsNot Nothing Then\"\r\n        Console.WriteLine(s)\r\n    Else\r\n        Throw New ArgumentNullException(NameOf(s))\r\n    End If\r\nEnd Sub\r\n```\r\n\r\n**Additional information:**\r\n\r\nUsing `IsNot` operator is much more readable than \"Not ... Is\".\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46706/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-08-13T22:06:32Z",
        "body": "We should include this case in the same analyzer that implements #46798"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-13T22:58:55Z",
        "body": "There's very little to share here.  I would just write a new analyzer/fixer.  I think it woudl be fine to have a community contribution here for that."
      }
    ]
  },
  {
    "number": 46705,
    "title": "Generate file_header_template from comment",
    "created_at": "2020-08-11T13:41:31Z",
    "closed_at": "2024-10-21T20:53:29Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46705",
    "body": "When **.editorconfig** does not already contain a definition for `file_header_template`, it would be nice to have a refactoring available on the first comment in a source file which configures this property to match the value of the file header.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46705/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T20:53:29Z",
        "body": "Closing out as speculative.  If we want to do this, we shoudl assign a person/milestone and do it. "
      }
    ]
  },
  {
    "number": 46503,
    "title": "More completions for generics arguments",
    "created_at": "2020-08-02T07:59:46Z",
    "closed_at": "2022-11-01T22:07:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Design Notes",
      "Concept-Continuous Improvement",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/46503",
    "body": "Right now if when I typed to  \r\n`public class {\r\n     List<int> i = new\r\n}`\r\nthen the completion will suggest me to hit Tab and insert `new List<int>`\r\n\r\nHowever, I can't get help of this when I am using Immutable types. \r\nWhen I typed\r\n`public class {\r\n     ImmutableArray<int> i = ImmutableArray.Create\r\n}`\r\nVS doesn't auto fill the generics for me. And I need to fill the type manually. What I am feeling it VS will only do maybe for the constructor.\r\n\r\n\r\nI suggest VS should enhance the experience here. At least it should support some common used types (Like the Immutable types)\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/46503/comments",
    "author": "Cosifne",
    "comments": [
      {
        "user": "Cosifne",
        "created_at": "2020-08-05T01:31:16Z",
        "body": "An additional supplement. What I want to do in my original example is I want to create an empty array. (therefore I can't omit the generics)\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-05T21:04:47Z",
        "body": "I'm on the fence here.  Normally `ImmutableArray.Create` is *not* used with type arguments.  Instead, it infers them from parameters.  For your case where \"I want to create an empty array\", the idiomatic form is `= ImmutableArray<int>.Empty`.  \r\n\r\nIt's perhaps the case that we should offer *that item* in the list.  i.e. if we're in a place where we can infer a type, and we see that that type itself exposes a static singleton, we could put those singletons in teh list for easy access.  I would not be opposed to that."
      },
      {
        "user": "Cosifne",
        "created_at": "2020-08-06T04:45:05Z",
        "body": "@CyrusNajmabadi \r\nYes, ImmutableArray<int>.Empty is the case I feel could have a better support"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2020-08-24T18:35:53Z",
        "body": "We discussed this in our design meeting and concluded that we didn't want to specifically hard-code ImmutableArray patterns, but we do need to do something here. A heuristic that was proposed was we:\r\n\r\n1. Show a completion list that filters to static methods that matches by return type, and\r\n2. Have a heuristic that if the thing on your left is `SomeClassName<T> `and there's also a non-generic SomeClassName, to also go looking through those for static methods as well.\r\n\r\nRule 2 covers the common case where static factory methods for `ImmutableArray<T>` are on ImmutableArray to allow for type inference.\r\n\r\n@sharwell volunteered to make the precise proposal for this."
      },
      {
        "user": "sharwell",
        "created_at": "2020-08-28T15:57:46Z",
        "body": "There are three cases we looked at specifically in the context of target-typed completion:\r\n\r\n1. Static fields or properties of the type\r\n    * `ImmutableArray<int>.Empty` produces a value of type `ImmutableArray<int>`\r\n2. Static generic methods of a non-generic type with the same name, where the generic method arguments match the generic type arguments\r\n    * `ImmutableArray.Create<int>()` produces a value of type `ImmutableArray<int>`\r\n    * `KeyValuePair.Create<TKey, TValue>` produce a value of type `KeyValuePair<TKey, TValue>`\r\n3. Static generic methods of a base type\r\n    * `Array.Empty<int>` produces a value of type `int[]`\r\n\r\nWhen the first case is identified, we can either put the fully-qualified member in the completion list, or we can put the constructed generic type in the completion list for easy use of `.` to complete it with generic arguments.\r\n\r\nFor the second case, we only need to fill generic method arguments when completing the generic method. We should consider avoiding generic method arguments if all overloads for the method require parameters that would support type inference, or somehow automatically remove them if it turns out to be unnecessary.\r\n\r\nFor the third case, it seems reasonable to special-case `Array.Empty<T>` to behave like the second case since coupling of a base type to a derived type in this manner is not a recommended design practice."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-08-31T21:03:10Z",
        "body": "From teh design meeting.  We generally think that target typed completion should see the type being target typed.  If that type (generic or not) contains statics members that return values whoe type is complimentary (i.e. is the same type, or has an (implicit/identity?) conversion to the type), then we should show those members in the list.\r\n\r\nSo, for example, if did:\r\n\r\n```\r\nCSharpParseOptions o = \r\n```\r\n\r\nThen `CSharpParseOptions.Default` would be in the list.  This would allow easy typing of `Default` to just get to that member easily.\r\n\r\n"
      },
      {
        "user": "Cosifne",
        "created_at": "2020-08-31T22:17:41Z",
        "body": "Another point from the design meeting:\r\nDo we want fully qualified member in the completion, or we put the type and require user to hit dot?\r\nWe want to both."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T22:07:53Z",
        "body": "We support the `ImmutableArray<int>.Empty` case now.  We do not want to add generics for `.Create` as you may be using inference.  So closing this out as we're in the state we want now."
      }
    ]
  },
  {
    "number": 45998,
    "title": "Code Fix that removes redundant Cast does not correctly preserve Trivia",
    "created_at": "2020-07-15T04:34:09Z",
    "closed_at": "2024-10-21T20:45:27Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "4 - In Review",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45998",
    "body": "**Version Used**: \r\nVersion 16.7.0 Preview 4.0\r\n**Steps to Reproduce**:\r\n\r\n1. This is a general issue in VB and C# that when a token or node is removed trivia is not preserver or duplicated this should be fixed with a helper since it happens in multiple places but I will report them individually\r\n```VB\r\nDim zReminderRectangle As New Rectangle( ' Comment\r\n  CInt( ' Comment 2\r\n  (Width / 2) - (zTextSize.Height / 2)), CInt((Height / 2) - (zTextSize.Width / 2)), CInt(zTextSize.Height), CInt(zTextSize.Width))\r\n```\r\nAfter fix comment 2 is missing\r\n```\r\nDim zReminderRectangle As New Rectangle( ' Comment\r\n  (Width / 2) - (zTextSize.Height / 2), CInt((Height / 2) - (zTextSize.Width / 2)), CInt(zTextSize.Height), CInt(zTextSize.Width))\r\n```\r\nIn C#\r\n```\r\nreturn /*Comment*/ (int) /* Comment 1*/ unchecked(currentKey * ((int)0xA5555529 + newKey));\r\n```\r\nAfter Fix extra whitespace between between the comments\r\n```\r\nreturn /*Comment*/  /* Comment 1*/ unchecked(currentKey * ((int)0xA5555529 + newKey));\r\n```\r\n\r\n**Expected Behavior**:\r\nComments and formatting are preserved\r\n**Actual Behavior**:\r\nin VB commented and signfifcant _ are deleted and in C# you tend to get extra spaces. But I have not tested other situations.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45998/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-07-16T21:45:51Z",
        "body": "We woudl likely take a community PR here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T20:45:26Z",
        "body": "Closing as we are unlikely to change tehse experiences."
      }
    ]
  },
  {
    "number": 45832,
    "title": "Add \"make anonymous function static\" code fix",
    "created_at": "2020-07-09T16:46:52Z",
    "closed_at": "2024-04-15T20:29:35Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "4 - In Review",
      "Concept-Design Debt",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45832",
    "body": "Related to #39606 \r\n\r\nWe currently have a \"make local function static\" code fix which works by analyzing data flow in the local function and simply proposing to add a 'static' modifier if nothing is captured. It seems reasonable to do the same thing for static lambdas and anonymous methods.\r\n\r\n```cs\r\nM($$x => x + 1); // before\r\nM(static x => x + 1); // after\r\n\r\nM($$delegate (int x) { return x + 1; }); // before\r\nM(static delegate (int x) { return x + 1; }); // after\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45832/comments",
    "author": "RikkiGibson",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-07-10T19:38:06Z",
        "body": "Yes.  though this would def be off by default.  It would be incredibly noisy otherwise, and would do a disservice to lambdas (which really want to be brief most of hte time).  Some users may want this, but we would want them to opt-into this."
      }
    ]
  },
  {
    "number": 45801,
    "title": "CSharpDecompiledSourceService.PerformDecompilation may throw FileNotFoundException",
    "created_at": "2020-07-08T21:12:18Z",
    "closed_at": "2024-12-03T23:32:22Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45801",
    "body": "```\r\n07/07/2020 09:55:07 Pacific Standard Time: Error : 1 :[devenv:33332] Unexpected exception: System.IO.FileNotFoundException: Could not find file 'C:\\R3\\Microsoft.CodeAnalysis.Workspaces'.\r\nFile name: 'C:\\R3\\Microsoft.CodeAnalysis.Workspaces'\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access)\r\n   at ICSharpCode.Decompiler.Metadata.PEFile..ctor(String fileName, PEStreamOptions streamOptions, MetadataReaderOptions metadataOptions)\r\n   at Microsoft.CodeAnalysis.Editor.CSharp.DecompiledSource.AssemblyResolver.<Resolve>g__MakePEFile|4_0(IAssemblySymbol assembly)\r\n   at Microsoft.CodeAnalysis.Editor.CSharp.DecompiledSource.AssemblyResolver.Resolve(IAssemblyReference name)\r\n   at ICSharpCode.Decompiler.TypeSystem.DecompilerTypeSystem..ctor(PEFile mainModule, IAssemblyResolver assemblyResolver, TypeSystemOptions typeSystemOptions)\r\n   at ICSharpCode.Decompiler.TypeSystem.DecompilerTypeSystem..ctor(PEFile mainModule, IAssemblyResolver assemblyResolver, DecompilerSettings settings)\r\n   at Microsoft.CodeAnalysis.Editor.CSharp.DecompiledSource.CSharpDecompiledSourceService.PerformDecompilation(Document document, String fullName, Compilation compilation, String assemblyLocation)\r\n   at Microsoft.CodeAnalysis.Editor.CSharp.DecompiledSource.CSharpDecompiledSourceService.<AddSourceToAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at Microsoft.CodeAnalysis.MetadataAsSource.MetadataAsSourceFileService.<GetGeneratedFileAsync>d__11.MoveNext()\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45801/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-12-03T23:32:22Z",
        "body": "This is now in a try/catch, which falls back to not decompiling in that case."
      }
    ]
  },
  {
    "number": 45673,
    "title": "ExtractMethodCodeRefactoringProvider encountered an error and has been disabled",
    "created_at": "2020-07-06T14:47:30Z",
    "closed_at": "2024-10-22T17:56:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45673",
    "body": "**Version Used**: VS 16.7 preview 3.0\r\n\r\n**Stack Trace**:\r\n```\r\nSystem.InvalidOperationException : Unexpected false\r\n   at Roslyn.Utilities.Contract.Fail(String message)\r\n   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition)\r\n   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.CallSiteContainerRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.CallSiteContainerRewriter.VisitBlock(BlockSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.GenerateBodyForCallSiteContainerAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45673/comments",
    "author": "YairHalberstadt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T17:56:02Z",
        "body": "Closing out as i don't see prism hits and this code was all rewritten."
      }
    ]
  },
  {
    "number": 45596,
    "title": "IDE0019 Syntactic Sugar Quick Fix creates functionally different code that can introduce a memory leak",
    "created_at": "2020-07-01T20:29:51Z",
    "closed_at": "2020-09-28T07:17:18Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45596",
    "body": "**Version Used**: Visual Studio Enterprise 2019 16.6.1 / .NET Core 3.1\r\n\r\n**Steps to Reproduce**:\r\nConsider the following Code:\r\n```\r\nusing var myObj = GetData() as MyObject;\r\nif (myObj != null)\r\n// ...\r\n```\r\nThis triggers IDE0019 \"Use pattern matching\" information message in the Error List.\r\n\r\nI click \"Quick Fix\", and it gives me this:\r\n```\r\nif (GetData() is MyObject myObj)\r\n// ...\r\n```\r\n\r\nThis quick fix is removing my using block and producing code that is not functionally equivalent; in this case, it is introducing a new memory leak vector.  \r\n\r\n(Yes, it's possible there was one there already if another object type was returned, but the quick fix code makes it worse, and is not even functionally equivalent to what I had before.)\r\n\r\n**Expected Behavior**:\r\n\r\nQuick fixes for syntactic sugar features should NOT change the functionality of the code. -- In this case it should not be removing the using block.\r\n\r\nAdditionally, if a quick fix is not available, I would prefer to not see the informational message in my error list window either (since the syntactic sugar equivalent of my code would actually be longer).\r\n\r\n**Actual Behavior**:\r\nThe IDE is effectively warning me that my application doesn't have enough memory leaks, and is offering to insert a new one for me in the guise of a syntactic sugar warning and suggested quick fix.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45596/comments",
    "author": "BrainSlugs83",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-07-01T20:48:22Z",
        "body": "Yup.  Missed feature case in test pass of `using var`.  Should def fix.  PR's welcome."
      }
    ]
  },
  {
    "number": 45506,
    "title": "[Suggestion] Intellisense to provide \"a better\" Type suggestion.",
    "created_at": "2020-06-28T00:41:27Z",
    "closed_at": "2024-10-25T19:25:40Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Concept-Continuous Improvement",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45506",
    "body": "Think that the intellisense could be a little more intelligent in regarding return type \"deduction\".\r\n\r\nFor example lets say we have the following code.\r\n```vbnet\r\nPublic Function IsBefore(value As Char, beforeChar As Char)\r\n  Return value < beforeChar\r\nEnd Function\r\n```\r\nand are looking to make to return type more specific. We type ` As ` and wait for intellisense results to appear.\r\n```vbnet\r\nPublic Function IsBefore(value As Char, beforeChar As Char) As \r\n  Return value < beforeChar\r\nEnd Function\r\n```\r\nI would like `Boolean` to be first suggestion.\r\n\r\nThis suggestion is based on the result of the `Return value < beforeChar`, which in this case is `Boolean`.\r\n\r\n-------\r\nShould there be multiple return statements in the method,  we return the Dominant Type covering those possible return types.\r\nThis could also extended to include \"interface methods\" the method should implement eg `Implements Example.IsBefore`\r\n```vbnet\r\nInterface Example\r\n  Public Function IsBefore( value As Char, beforeChar As Char) As Boolean\r\nEnd Interface\r\n\r\nClass ExampleObject\r\n  Implements Example\r\n\r\n  Public Function IsBefore( value As Char, beforeChar As Char ) As _$_  Implements IExample.IsBefore\r\n     Return value < before\r\n  End Function\r\nEnd Class\r\n```\r\n```vbnet\r\nDim dominant_Type = Find_DominanteTypeOf(\r\n\t\t\t{ Current_Return_Type, \r\n    \t       \t\t  Return_Expressions_Types,\r\n\t\t\t  Applicable_Interface_Return_Types\r\n                        } )\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45506/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-03-02T01:36:28Z",
        "body": "@AdamSpeight2008 we would likely take a PR here if you wanted to contribute one."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T19:25:40Z",
        "body": "Closing out as we are not investing in this area."
      }
    ]
  },
  {
    "number": 45352,
    "title": "FindAllReferences doesn't find usages of GetAsyncEnumerator in await foreach",
    "created_at": "2020-06-22T06:18:02Z",
    "closed_at": "2024-10-21T21:05:51Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Navigation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45352",
    "body": "**Version Used**: 16.7 preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\nfind all references of GetAsyncENumerator in the below code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\n\r\npublic class C\r\n{\r\n    public static async Task Main()\r\n    {\r\n        await foreach (var i in new C())\r\n        {\r\n            Console.Write(i);\r\n        }\r\n    }\r\n\r\n    public async IAsyncEnumerator<int> GetAsyncEnumerator() => null;\r\n}\r\n```\r\n**Expected Behavior**:\r\nReturns 1 usage in `await foreach` (this happens for `GetEnumerator` and `foreach`)\r\n\r\n**Actual Behavior**:\r\nFinds no usages.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45352/comments",
    "author": "YairHalberstadt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:05:51Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 45177,
    "title": "'VisualBasicInvertSingleLineIfCodeRefactoringProvider' encountered an error and has been disabled.",
    "created_at": "2020-06-14T15:20:46Z",
    "closed_at": "2020-09-22T06:40:01Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45177",
    "body": "**Version Used**: \r\n\r\nVisual Studio 2019 16.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```vb\r\n        Using client As New WebClient() With {.Proxy = New WebProxy()}\r\n            If Not client.DownloadString(\"SOME_LINK\").ToUpperInvariant().Contains(\"SOME_STRING\") Then End\r\n        End Using\r\n```\r\n\r\n**StackTrace**\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: index\r\n   at Microsoft.CodeAnalysis.SyntaxList`1.get_Item(Int32 index)\r\n   at Microsoft.CodeAnalysis.VisualBasic.InvertIf.VisualBasicInvertSingleLineIfCodeRefactoringProvider.UpdateIf(SourceText sourceText,SingleLineIfStatementSyntax ifNode,SyntaxNode condition,SyntaxList`1 trueStatements,SyntaxList`1 falseStatements)\r\n   at Microsoft.CodeAnalysis.InvertIf.AbstractInvertIfCodeRefactoringProvider`3.GetRootWithInvertIfStatement(SourceText text,SyntaxNode root,TIfStatementSyntax ifNode,InvertIfStyle invertIfStyle,SyntaxNode subsequentSingleExitPointOpt,SyntaxNode negatedExpression)\r\n   at async Microsoft.CodeAnalysis.InvertIf.AbstractInvertIfCodeRefactoringProvider`3.InvertIfAsync[TIfStatementSyntax,TStatementSyntax,TEmbeddedStatement](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45177/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-14T16:35:37Z",
        "body": "@allisonchou want to take a look?"
      }
    ]
  },
  {
    "number": 45166,
    "title": "[Analyzer Suggestion] Remove repetetive type in VB",
    "created_at": "2020-06-14T10:08:11Z",
    "closed_at": "2021-04-14T22:43:57Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45166",
    "body": "Assume we have a class called `Student` and is instantiated like below:\r\n\r\n```vb\r\nDim studentX As Student = New Student(......)\r\n```\r\n\r\nIt can be simplified to:\r\n\r\n```vb\r\nDim studentX As New Student(......)\r\n```\r\n\r\nFor a longer class name, it gets much more cleaner with the second case.\r\n\r\nThe analyzer should be able to do the same with `Using` statement as well.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45166/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-15T01:33:18Z",
        "body": "I believe we would take a community PR on this (gated by a user configurable option).  The option could be enabled by default, with 'hint' severity."
      }
    ]
  },
  {
    "number": 45163,
    "title": "Offer a codefix for BC30433",
    "created_at": "2020-06-14T09:39:40Z",
    "closed_at": "2020-10-16T03:17:06Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45163",
    "body": "I had a class whose methods were all \"Shared\", so it could be a Module instead. After changing it to Module, the \"Shared\" keyword now generates a compile error BC30433. Now, I've to manually go and delete the Shared keyword one by one. It'd be nice if a codefix is offered to fix all and remove the \"Shared\" keyword easily. The codefix should be straight forward, just remove any \"Shared\" keyword that has reported BC30433.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45163/comments",
    "author": "Youssef1313",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-15T01:32:37Z",
        "body": "I believe we would take a community PR on tihs."
      },
      {
        "user": "paul1956",
        "created_at": "2020-06-15T03:00:03Z",
        "body": "There is already a diagnostic CA1052 when all functions are shared, so you could do the whole thing. Change Class to Module, and remove the Shared. Or do you just want a CodeFix for BC30433?\r\n"
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-06-15T06:32:11Z",
        "body": "I haven't checked, but I think CA1052 doesn't have a code fix as well. So, now there are two possible places for the fixer. But I personally would prefer BC30433 to have the codefix. As it'll serve more developers (developers who doesn't use FxCop NuGet package)"
      },
      {
        "user": "paul1956",
        "created_at": "2020-06-18T23:10:07Z",
        "body": "@Youssef1313 I tried to prototype a fix for CA1052 but for testing I need the Analyzer that produces it. Is there a way to use a NuGet Analyzer in a test or does that even make sense inside Roslyn? CA1052 is produced by FxCop NuGet package would it need to be part of Roslyn or should the fix go in there?"
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-06-19T06:04:50Z",
        "body": "My personal opinion would be to make the code fix in roslyn, not roslyn-analyzers. You can write the codefix in Roslyn and make a PR."
      },
      {
        "user": "paul1956",
        "created_at": "2020-06-20T04:22:08Z",
        "body": "@jinujoseph, @Youssef1313  I will give fixing CA1052"
      },
      {
        "user": "mavasani",
        "created_at": "2020-06-22T09:02:47Z",
        "body": "Roslyn should only have code fixes for analyzer diagnostics produced by compiler or IDE. For CA1051 code fix, please submit PR to Roslyn-analyzers repo. If fixing compiler diagnostic mentioned here, you can submit a PR to Roslyn."
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-06-22T12:02:29Z",
        "body": "I believe the codefix should be for BC30433, not CA1052"
      },
      {
        "user": "paul1956",
        "created_at": "2020-06-23T08:40:31Z",
        "body": "@Youssef1313 BC30433 should be fixed in Roslyn and I was not planning on doing anything with that. If someone wants to work on it I can share source of a working standalone CodeFix but it don't have integration with Roslyn. For CA1052 I will look at Roslyn-analyzers repo but it will take me some time to understand its support for CodeFixes written in VB."
      }
    ]
  },
  {
    "number": 45126,
    "title": "Change Signature: nullable annotations are ignored when adding NRT parameters",
    "created_at": "2020-06-12T22:28:03Z",
    "closed_at": "2024-10-25T04:39:40Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/45126",
    "body": "**Version Used**: VS 16.7 P2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the Change Signature refactoring in a project with NRT enabled.\r\n2. Add a `string?` parameter.\r\n3. Commit the change.\r\n\r\n**Expected Behavior**:\r\n\r\n```c#\r\nvoid M(string? s) { … }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe parameter is shown without annotations in the dialog's table, and this is reflected in the generated code:\r\n\r\n```c#\r\nvoid M(string s) { … }\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/45126/comments",
    "author": "jhinder",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:39:40Z",
        "body": "Closing out due to lack of broader feedback on this."
      }
    ]
  },
  {
    "number": 44959,
    "title": "\"Change Signature\" dialog forbids void as type but allows System.Void",
    "created_at": "2020-06-08T22:00:56Z",
    "closed_at": "2023-08-04T09:14:42Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44959",
    "body": "**Version Used**: VS 16.7 P2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the Change Signature dialog.\r\n2. Try to add a parameter of type `void`. (This will fail: \"Type name has a syntax error\".)\r\n3. Add a parameter of type `System.Void`.\r\n\r\n**Expected Behavior**: System.Void is rejected and the parameter can't be added.\r\n\r\n**Actual Behavior**: The parameter is accepted (and simplified to `void` in the main dialog), leading to syntax errors when the change is committed.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44959/comments",
    "author": "jhinder",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-06-09T07:00:29Z",
        "body": "It's unlikely this is causing a \"syntax error\" rather than a binding error.  It's likely not something really worth blocking though (just like we wouldn't block many other types that might lead to an eventual error).  If a user chooses this, we can just go ahead with teh change and the user can deal with the simple fallout "
      }
    ]
  },
  {
    "number": 44708,
    "title": "Name 'immutableArrays' is suggested for ImmutableArray<Frog> rather than 'frogs'",
    "created_at": "2020-05-30T00:04:06Z",
    "closed_at": "2020-09-22T06:54:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44708",
    "body": "**Version Used**: 16.6.0\r\n\r\n```cs\r\nusing System.Collections.Immutable;\r\n\r\nclass Frog { }\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var builder = ImmutableArray.CreateBuilder<Frog>();\r\n\r\n        return new [||]C(builder.ToImmutable());\r\n    }\r\n}\r\n```\r\n\r\n🛠 Generate constructor in 'C':\r\n\r\n```cs\r\nusing System.Collections.Immutable;\r\n\r\nclass Frog { }\r\n\r\nclass C\r\n{\r\n    private ImmutableArray<Frog> immutableArrays;\r\n\r\n    public C(ImmutableArray<Frog> immutableArrays)\r\n    {\r\n        this.immutableArrays = immutableArrays;\r\n    }\r\n\r\n    void M()\r\n    {\r\n        var builder = ImmutableArray.CreateBuilder<Frog>();\r\n\r\n        return new C(builder.ToImmutable());\r\n    }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44708/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-05-30T00:05:04Z",
        "body": "@allisonchou Want to takea  look?  We already have helpers that try to figure out names using Humanizer.  Might be that this feature isn't properly going through that, or that we're not passing it the rigth data."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-05-30T01:14:27Z",
        "body": "`toads` or `polywogs` would also be acceptable names here.  "
      }
    ]
  },
  {
    "number": 44656,
    "title": "Introduce variable crashes with certain target-typed new expressions",
    "created_at": "2020-05-29T04:45:40Z",
    "closed_at": "2020-09-30T17:07:54Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Area-Compilers",
      "4 - In Review",
      "Urgency-Soon",
      "Feature - Target-Typed New"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44656",
    "body": "**Version Used**: 30128.12.master\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In the following code, right-click on ```new(1)``` in class ```D``` (should have a red underline):\r\n``` C#\r\nclass A\r\n{\r\n    public void Create(B b, D d)\r\n    {\r\n\r\n    }\r\n}\r\n\r\nclass B\r\n{\r\n\r\n}\r\n\r\nclass D\r\n{\r\n    void M()\r\n    {\r\n        new A().Create(new B(), new(1));\r\n    }\r\n}\r\n```\r\n\r\nIntroduce variable crashes with the following stack trace:\r\n```\r\nSystem.ArgumentNullException : Value cannot be null.\r\nParameter name: destination\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.ClassifyConversion(Int32 position,ExpressionSyntax expression,ITypeSymbol destination,Boolean isExplicitInSource)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.Simplifiers.CastSimplifier.CastMustBePreserved(ExpressionSyntax castNode,ExpressionSyntax castedExpressionNode,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.Simplifiers.CastSimplifier.IsCastSafeToRemove(ExpressionSyntax castNode,ExpressionSyntax castedExpressionNode,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CastIfPossible(ExpressionSyntax expression,ITypeSymbol targetType,Int32 position,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.TryCastTo(ITypeSymbol targetType,ExpressionSyntax expression,ExpressionSyntax newExpression,ExpressionSyntax& newExpressionWithCast)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitArgument(ArgumentSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitInvocationExpression(InvocationExpressionSyntax originalNode)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node,SemanticModel semanticModel,SyntaxAnnotation annotationForReplacedAliasIdentifier,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Simplification.Simplifier.Expand[TNode](TNode node,SemanticModel semanticModel,Workspace workspace,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync[TNode](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.<>c__DisplayClass37_0.<ComplexifyParentingStatementsAsync>b__1[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.ReplaceSyntaxAsync[TRoot](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.ComplexifyParentingStatementsAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.IntroduceVariable.CSharpIntroduceVariableService.IntroduceLocalDeclarationIntoBlockAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.IntroduceVariable.CSharpIntroduceVariableService.IntroduceLocalAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.AbstractIntroduceVariableCodeAction.GetChangedDocumentCoreAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.AbstractIntroduceVariableCodeAction.GetChangedDocumentAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44656/comments",
    "author": "allisonchou",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2020-09-11T22:45:56Z",
        "body": "I suspect the IDE is passing a `null` type to `ClassifyConversion`."
      },
      {
        "user": "jcouv",
        "created_at": "2020-09-26T00:55:47Z",
        "body": "This didn't repro in 16.8p3.1. Will add a test"
      }
    ]
  },
  {
    "number": 44615,
    "title": "\"Suppress warning\" actions available but have no effect during build",
    "created_at": "2020-05-28T02:18:19Z",
    "closed_at": "2024-10-21T21:09:00Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44615",
    "body": "**Version Used**: Version 16.7.0 Preview 3.0 [30125.18.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Kick off a long-running build\r\n1. See error in output, navigate to it in code\r\n1. Forget that the build is running\r\n1. Select one of the \"Suppress\" options\r\n1. Nothing happens\r\n\r\n**Expected Behavior**:\r\n\r\nEither the suppress commands are hidden/disabled, or they actually work.\r\n\r\n**Actual Behavior**:\r\n\r\nCommand is available, but invoking it does nothing and there's no feedback as to why.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44615/comments",
    "author": "drewnoakes",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:09:00Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 44443,
    "title": "'new' keyword not suggested after 'a ? expr |'",
    "created_at": "2020-05-20T21:27:06Z",
    "closed_at": "2024-10-22T16:31:39Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense",
      "IntelliSense-Completion"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/44443",
    "body": "**Steps to Reproduce**:\r\n\r\nInvoke completion at `$$` in the following top-level statement:\r\n\r\n```csharp\r\na ? expr | $$\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe `new` keyword is offered.\r\n\r\n**Actual Behavior**:\r\n\r\nThe `new` keyword is not offered.\r\n\r\n📝 A test for this exists in `NewKeywordRecommenderTests` but is disabled.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/44443/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T16:31:39Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 43942,
    "title": "False positive about not used members",
    "created_at": "2020-05-04T06:23:42Z",
    "closed_at": "2022-10-28T01:17:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43942",
    "body": "**Version Used**: 5.0.100-preview.4.20252.12\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a blazor client side project\r\n2. Wrtie below code:\r\n\r\nApp.razor:\r\n```xml\r\n<Button @onclick=\"_ => _clicked = true\"></Button>\r\n```\r\nApp.razor.cs:\r\n```csharp\r\npartial class App\r\n{\r\n    private bool _clicked;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings and no quick fix suggestions. \r\n\r\n**Actual Behavior**:\r\nField 'App._clicked' is not used.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43942/comments",
    "author": "hez2010",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-27T17:31:11Z",
        "body": "@hez2010 are you still experiencing this?  And can you clarify what you mean by `Field 'App._clicked' is not used.`?  Are you getting a specific diagnostic message?  Can you show a screenshot?"
      },
      {
        "user": "hez2010",
        "created_at": "2022-10-28T01:17:21Z",
        "body": "Seems that it's no longer an issue now."
      }
    ]
  },
  {
    "number": 43813,
    "title": "Investigate writing an integration test for Tools Options CodeStyle page",
    "created_at": "2020-04-30T00:24:17Z",
    "closed_at": "2024-10-21T21:09:13Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Integration-Test",
      "Test-Gap"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43813",
    "body": "The test should do the following:\r\n\r\n1. Open C# (and VB) code style options page\r\n2. Change values of all/some options\r\n3. Click OK to close the page\r\n4. Re-open page and verify values are persisted\r\n5. Create C#/VB project and verify changed options are respected",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43813/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T21:09:13Z",
        "body": "Closing as speculative."
      }
    ]
  },
  {
    "number": 43671,
    "title": "Generate local function code fix",
    "created_at": "2020-04-25T00:36:01Z",
    "closed_at": "2024-10-21T19:54:02Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43671",
    "body": "When we have an unbound identifier used for a method argument for a delegate type parameter, we could offer to declare a local function (or even a member method, but I personally find that less useful.)\r\n\r\n```cs\r\n// before\r\nvoid M1(Action<int> a1)\r\n{\r\n}\r\n\r\nvoid M2()\r\n{\r\n    M1(doSomething); // generate local function 'doSomething'?\r\n}\r\n\r\n\r\n// after\r\nvoid M1(Action<int> a1)\r\n{\r\n}\r\n\r\nvoid M2()\r\n{\r\n    M1(doSomething);\r\n\r\n    void doSomething(int i)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nParameter names could come from the target delegate type, although granted they won't always be very pleasing parameter names.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43671/comments",
    "author": "RikkiGibson",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:54:02Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 43601,
    "title": "Applying one IDE suggestion Refactoring makes an unrelated suggestion disappear",
    "created_at": "2020-04-23T15:32:50Z",
    "closed_at": "2024-10-21T19:53:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43601",
    "body": "I'm not entirely sure why this happens, but here's a (near-)minimal repro:\r\n```cs\r\n// example input: \"where [id == 42]\"\r\npublic static void M(ReadOnlySpan<char> input)\r\n{\r\n    var word = input.SliceUntilFirst(' ', out var remainder);\r\n    if (word.SequenceEqual(\"where\"))\r\n    {\r\n        var braceIdx = remainder.IndexOf(']');\r\n        var clause = remainder.Slice(1, braceIdx - 1).Trim(); // IDE0057: Slice can be simplified\r\n        remainder = remainder.Slice(braceIdx + 1).Trim();     // IDE0059: Unnecessary assignment\r\n\r\n        Console.WriteLine(clause.ToString());\r\n    }\r\n}\r\n\r\nprivate static ReadOnlySpan<char> SliceUntilFirst(\r\n    this ReadOnlySpan<char> span, char delimeter, out ReadOnlySpan<char> remainder)\r\n{\r\n    for (int i = 0; i < span.Length; i++)\r\n    {\r\n        if (span[i] == delimeter && i > 0)\r\n        {\r\n            // add 1 to skip the delimeter itself\r\n            remainder = span[(i + 1)..].Trim(); // Already simplified to use a Range\r\n            return span.Slice(0, i).Trim();     // No suggestion to use a Range here\r\n        }\r\n    }\r\n\r\n    remainder = ReadOnlySpan<char>.Empty;\r\n    return span;\r\n}\r\n```\r\n\r\nBoth IDE suggestions are fair: This code was originally written before Range expressions, which can replace the `Slice()` call; and the `remainder`  variable is no longer used in the rest of the method, so that assignment can also be removed.\r\nBut when I apply the refactoring for the first suggestion:\r\n```diff\r\n- var clause = remainder.Slice(1, braceIdx - 1).Trim();\r\n+ var clause = remainder[1..braceIdx].Trim();\r\n```\r\nthe suggestion of `IDE0059` also disappears, despite that line still being the same and still being unnecessary.\r\n\r\nAdditionally, though separate, in the helper method there is no suggestion to replace `.Slice(0, i)` with `[..i]` even though it's been suggested in every other place `Slice()` was called.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43601/comments",
    "author": "Joe4evr",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:53:47Z",
        "body": "I do not repro this."
      }
    ]
  },
  {
    "number": 43443,
    "title": "Test analyzer references using real assemblies",
    "created_at": "2020-04-17T07:16:36Z",
    "closed_at": "2024-10-21T19:54:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Test-Gap"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43443",
    "body": "Currently `DiagnosticAnalyzer`, `CodeFixProvider`, and `CodeRefactoringProvider` are tested via interfaces on a mock analyzer reference (e.g. `ICompletionProviderFactory`). Tests should be added which attempt to resolve the provided types from a true assembly.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43443/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:54:43Z",
        "body": "Closing as speculative."
      }
    ]
  },
  {
    "number": 43442,
    "title": "Workspace services are not disposed with the workspace",
    "created_at": "2020-04-17T07:03:27Z",
    "closed_at": "2024-10-21T19:54:27Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Design Debt"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43442",
    "body": "When a `Workspace` is disposed, the workspace services it created via `IWorkspaceServiceFactory` instances should be disposed if/when they implement `IDisposable`. Services exported directly from the MEF export provider (as opposed to ones created by a factory) do not need to be disposed with the workspace because they are already disposed when the MEF export provider is disposed.\r\n\r\nFound during investigation of #43330.\r\n\r\nRelated to #43441\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43442/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:54:27Z",
        "body": "Closing out as speculative.  If we need to do this, we should assign to a person/milestone to be done."
      }
    ]
  },
  {
    "number": 43401,
    "title": "Optimize ObjectWriter.WriteObjectWorker caching",
    "created_at": "2020-04-16T14:35:13Z",
    "closed_at": "2022-11-02T19:23:59Z",
    "labels": [
      "help wanted",
      "Concept-Continuous Improvement",
      "Area-Performance",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43401",
    "body": "ObjectWriter.WriteObjectWorker caches objects that might be reused multiple times. Many of these objects are syntax nodes which only appear once in a tree. We should investigate the effectiveness of caching each type of syntax node, and eliminate caching of nodes that are infrequently reused. Removing these nodes will reduce the size of the resulting cache, and avoid costly LOH allocations.\r\n\r\nAn initial target might be eliminating the maximum number of cached objects while preserving 90+% of the nodes which get reused.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43401/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-04-16T17:20:19Z",
        "body": "One thing we coudl look at is if the compiler already sets a bit or something for the green nodes it is already caching.  i.e. both teh C#/VB compilers cache nodes up to a certain depth and potentially with other certain characteristics.  These were already measured to have very good impact on memory use.  So if we can leverage that, we can likely get the same benefits without the cost of trying to remember all nodes."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-02T19:23:59Z",
        "body": "Closing out.  We shoudl base this on traces we know of and actually assign this a milestone if needs to be done."
      }
    ]
  },
  {
    "number": 43020,
    "title": "Add file header automatically if configured in editorconfig when creating a new class file",
    "created_at": "2020-04-02T16:35:31Z",
    "closed_at": "2020-08-11T13:35:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43020",
    "body": "Automatically add a file header when adding a new class file if configured in editorconfig.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43020/comments",
    "author": "mikadumont",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2020-08-11T13:35:53Z",
        "body": "Duplicate of #21227"
      }
    ]
  },
  {
    "number": 43015,
    "title": "Workspace.OpenDocument does nothing",
    "created_at": "2020-04-02T09:26:15Z",
    "closed_at": "2024-10-21T19:44:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/43015",
    "body": "**Version Used**: \r\n3.5.0.0\r\n\r\n**Steps to Reproduce**:\r\n_workspace is a visualstudio namespace. when calling following function, the newly added document is not opened.\r\n\r\n```\r\n public void AddDocument(Project proj, string ns, string className, string txt, bool openFile)\r\n        {\r\n            var newDoc = proj.AddDocument(\r\n                className + \".cs\",\r\n                txt,\r\n                Code.GetFolders(proj.Name, ns)\r\n                );\r\n            if (!_workspace.TryApplyChanges(newDoc.Project.Solution))\r\n                throw new Exception(\"Failed to apply changes to workspace\");\r\n\r\n            if (openFile && _workspace.CanOpenDocuments)\r\n            {\r\n                _workspace.OpenDocument(newDoc.Id, true);\r\n            }\r\n        }\r\n```\r\n\r\n\r\n**Expected Behavior**:\r\nnewly added document should be opened in visual studo\r\n\r\n**Actual Behavior**:i\r\nnothing happens, also no exception\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/43015/comments",
    "author": "codehunter13",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-04-02T18:57:31Z",
        "body": "Can you debug through to see why it's not working?  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:44:47Z",
        "body": "Closing due to lack of response from customer."
      }
    ]
  },
  {
    "number": 42522,
    "title": "[Documentation] FormattingOptions and CSharpFormattingOptions need doc comments",
    "created_at": "2020-03-18T02:36:45Z",
    "closed_at": "2024-10-21T19:39:28Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Documentation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42522",
    "body": "There are public APIs with no doc comments for the type or any of its public fields.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42522/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:39:28Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 42462,
    "title": "\"Use pattern matching\" should attempt to reuse variable name within trailing try block",
    "created_at": "2020-03-16T07:18:28Z",
    "closed_at": "2022-11-02T20:17:54Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42462",
    "body": "**Version Used**: \r\n\r\n\"Use pattern matching\" has logic that attempts to reuse a variable name. This doesn't work if that variable lives within a try block:\r\n\r\n**Steps to Reproduce**:\r\n``` C#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        object value = null;\r\n\r\n        if (value is string)\r\n        {\r\n            try\r\n            {\r\n                var stringValue = (string)value;\r\n            }\r\n            finally\r\n            {\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n**Expected Behavior**:\r\n``` C#\r\n        object value = null;\r\n\r\n        if (value is string stringValue)\r\n        {\r\n            try\r\n            {\r\n                \r\n            }\r\n            finally\r\n            {\r\n\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n``` C#\r\n        object value = null;\r\n\r\n        if (value is string @string)\r\n        {\r\n            try\r\n            {\r\n                var stringValue = @string;\r\n            }\r\n            finally\r\n            {\r\n\r\n            }\r\n        }\r\n    }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42462/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-16T10:54:21Z",
        "body": "We'd take a PR for this.  But it's not a high pri pattern to look out for.  "
      }
    ]
  },
  {
    "number": 42197,
    "title": "IDE0059 False Positive with finally branch",
    "created_at": "2020-03-05T15:26:07Z",
    "closed_at": "2022-01-05T06:48:05Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42197",
    "body": "**Version Used**: \r\nVS 2019 16.4.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n    static void Foo(int val)\r\n    {\r\n        bool flag = false;\r\n        try\r\n        {\r\n            if (!TryFailableOp(val))\r\n            {\r\n                flag = true; // IDE0059: Unnecessary assignment of a value\r\n            }\r\n\r\n            // More\r\n        }\r\n        finally\r\n        {\r\n            if (flag) // flag is used here\r\n            {\r\n                DoCleanup();\r\n            }\r\n        }\r\n    }",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42197/comments",
    "author": "adam-frisby",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2022-01-05T06:48:05Z",
        "body": "Verified no repro on VS2022"
      }
    ]
  },
  {
    "number": 42194,
    "title": "Suggest using declaration when the only statement outside the using statement has no interactions",
    "created_at": "2020-03-05T13:22:41Z",
    "closed_at": "2022-11-01T21:23:25Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/42194",
    "body": "I often come upon code that restricted the scope of the using statement as a stylistic choice rather than by necessity. It would be consistent to offer \"IDE0063 'using' statement can be simplified\" here too.\r\n\r\n```cs\r\nclass C\r\n{\r\n    bool M()\r\n    {\r\n        using (var foo = new MemoryStream())\r\n        {\r\n            // ...\r\n        }\r\n\r\n        return true; // Or any compile-time constant or variable read or throw statement\r\n    }\r\n}\r\n```\r\n\r\nShould be treated as though it was identical to the return statement first being moved into the using statement, offering:\r\n\r\n```cs\r\nclass C\r\n{\r\n    bool M()\r\n    {\r\n        using var foo = new MemoryStream();\r\n\r\n        // ...\r\n\r\n        return true;\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/42194/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "jnm2",
        "created_at": "2020-03-05T13:30:53Z",
        "body": "The rule of thumb to determine whether an operation could interact with the end of the using statement is whether it has the potential to change the timing of code outside the current method so that it executes before disposal happens. That means method calls of any kind (methods, operators, delegate invocation, accessors, etc) are out. Variable writes are out unless you can prove that no other thread could be watching that variable.\r\n\r\nTechnically speaking that makes `new FooException();` invalid, but more likely it is safe to whitelist the pattern `throw new SomeException(/* anything */);`.\r\n\r\nThis could be considered:\r\n\r\n```cs\r\nreturn foo > 0;\r\n    ? foo\r\n    : throw new FooException(foo);\r\n```\r\n\r\n**However**, I think it's likely that just tacking `return <constant>/<variable>` would bring 95% of the benefit."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-05T22:08:31Z",
        "body": "I'm 100% fine extending to cases that provably are not influenced by external state/conditions.  So things like constants, or local vars, or simple expressions involving those.\r\n\r\nThe reason i'm pushing for provably safe is that we know that people use IDisposable for RAII cleanup which can have very subtle impacts on the state of the world.  So it wouldn't surprise me at all tha even for things like the `throw new` case that that could change meaning.\r\n\r\nSo, i would be fine with breaking this into two parts: definitely do the changes that are absolutely safe.  But go through more a deisgn process on the things that are maybe unsafe."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-05T22:11:57Z",
        "body": "Note: from talking offline with @jnm2 even local-vars are tricky because of things like `ref`s and `captures` as the dispose can affect them.  they're corner cases for sure.  but Dispose is a risky area i would prefer safety in."
      },
      {
        "user": "sharwell",
        "created_at": "2020-03-17T00:13:01Z",
        "body": "Marking as **help wanted** to support the case where the `using` statement is followed by one or more of the following:\r\n\r\n* A return statement\r\n* A _constant_ expression\r\n* Local function definitions"
      }
    ]
  },
  {
    "number": 41780,
    "title": "Use Implicit Type does not work for 'ref' locals",
    "created_at": "2020-02-19T16:16:36Z",
    "closed_at": "2023-02-01T20:38:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41780",
    "body": "**Version Used**: fea95d79e2b61c1d40892c7167ebcbb4e4f6a641\r\n\r\n**Steps to Reproduce**:\r\n\r\n📝 This is supposed to be covered by `SuggestVarOnRefIntrinsicType`, but the test was incorrectly written and thus did not cover the intended behavior.\r\n\r\n```csharp\r\nvoid Method(ref int x)\r\n{\r\n  ref int y = ref x;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIDE0007 reported for `int`, with a code fix that changes it to `var`.\r\n\r\n**Actual Behavior**:\r\n\r\nNo diagnostic.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41780/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Sliptory",
        "created_at": "2020-03-01T15:45:51Z",
        "body": "I will take this task"
      },
      {
        "user": "Sliptory",
        "created_at": "2020-03-04T18:51:22Z",
        "body": "so that the hint appears, you need to write like this:\r\n`void Method(ref int x)\r\n{\r\n  ref int y = x;\r\n}`\r\n\r\nin the test SuggestVarOnRefIntrinsicType also\r\n`static void M()\r\n    {\r\n        ref int s = Ref();\r\n    }\r\n    static ref int Ref() => throw null;`"
      }
    ]
  },
  {
    "number": 41778,
    "title": "Renamer renames both enum type and Flags attribute when enum type is named Flags",
    "created_at": "2020-02-19T15:55:01Z",
    "closed_at": "2024-10-25T03:58:31Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41778",
    "body": "**Version Used**: \r\n\r\nMicrosoft.CodeAnalysis 3.5.0-beta2-final\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a solution with a library project with a file A.cs with content:\r\n```\r\nusing System;\r\n\r\n[Flags]\r\nenum Flags\r\n{\r\n    Hello\r\n}\r\n```\r\n\r\n2. Create in the same solution an additional library project with a file B.cs with content:\r\n```\r\nusing System;\r\n\r\nnamespace Library1\r\n{\r\n    public class Class1 { }\r\n}\r\n```\r\n\r\n3. Reference the second project in the first library.\r\n\r\n4. Use Roslyn to look for the enum and use the Renamer.RenameSymbolAsync to Flags to something else. As code does below. I pass the sln file of the project created in step 1.\r\n\r\nLoader.cs\r\n```\r\n        Solution m_CurrentSolution;\r\n\r\n        Loader(string slnFile)\r\n        {\r\n            var workspace = MSBuildWorkspace.Create();\r\n            workspace.LoadMetadataForReferencedProjects = true;\r\n            m_CurrentSolution = workspace.OpenSolutionAsync(slnFile).Result;\r\n        }\r\n\r\n        public static void Main(String[] args)\r\n        {\r\n            var root = args[0];\r\n            var loader = new Loader(root);\r\n            var newSolution = loader.DoStuff();\r\n            loader.PrintResult(newSolution);\r\n        }\r\n\r\n        public Solution DoStuff()\r\n        {\r\n            var solution = m_CurrentSolution;\r\n            while (QuickWalkthrough(0, ref solution)) { }\r\n            return solution;\r\n        }\r\n\r\n        static bool QuickWalkthrough(int iteration, ref Solution solution)\r\n        {\r\n            foreach (var project in solution.Projects)\r\n            {\r\n                foreach (var document in project.Documents)\r\n                {\r\n                    var Model = document.GetSemanticModelAsync().Result;\r\n                    var root = document.GetSyntaxRootAsync().Result;\r\n                    var enumDeclarations = root\r\n                        .DescendantNodes()\r\n                        .OfType<EnumDeclarationSyntax>()\r\n                        .Where(syntax => !syntax.Identifier.ValueText.Contains(\"Explode\" + iteration));\r\n\r\n                    if (enumDeclarations.Any())\r\n                    {\r\n                        var type = enumDeclarations.First();\r\n                        var typeSymbol = Model.GetDeclaredSymbol(type);\r\n                        var newName = \"Explode\" + iteration + typeSymbol.Name;\r\n                        solution = Renamer.RenameSymbolAsync(solution, typeSymbol, newName, solution.Options).Result;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        void PrintResult(Solution solution)\r\n        {\r\n            foreach (var syntaxTree in solution.Projects.SelectMany(p => p.Documents))\r\n            {\r\n                var newContent = syntaxTree.GetSyntaxTreeAsync().Result.GetText();\r\n                Console.Out.WriteLine(newContent);\r\n            }\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nOnly renames enum type name to Explode0Flags\r\n\r\n**Actual Behavior**:\r\nRenames both the attribute and the enum type name.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41778/comments",
    "author": "miniwolf",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2020-02-19T19:43:14Z",
        "body": "cc @ryzngard "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T03:58:31Z",
        "body": "I don't understand why we would rename the attribute."
      },
      {
        "user": "miniwolf",
        "created_at": "2024-10-25T07:52:47Z",
        "body": "@CyrusNajmabadi that is the problem. The behaviour that I want is that the attribute is not renamed, only the enum type name."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T15:43:02Z",
        "body": "> @CyrusNajmabadi that is the problem. The behaviour that I want is that the attribute is not renamed, only the enum type name.\n\nI'm unable to repro this. My guess is that there was something wrong with your project causing references to not be found. So the Flags attribute didn't bind to FlagsAttribute but to the enun. Check the workspace and your compilations for diagnostics. "
      }
    ]
  },
  {
    "number": 41615,
    "title": "nameof does not offer instance members without closing parenthesis",
    "created_at": "2020-02-12T18:10:52Z",
    "closed_at": "2024-10-21T19:48:49Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41615",
    "body": "**Version Used**: VisualStudio.16.Preview/16.5.0-pre.2.0+29721.120\r\n\r\n**Steps to Reproduce**:\r\n\r\nAutomatic brace completion off.\r\n\r\n```C#\r\nclass Program\r\n{\r\n    public string Property { get; }\r\n\r\n    static void Main()\r\n    {\r\n        string s = nameof(Program.|\r\n        Main();\r\n    }\r\n}\r\n```\r\n\r\nNote that this reproduces even when there are no errors in the class to be named:\r\n\r\n```C#\r\nclass Test { public string Property { get; } }\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        string s = nameof(Test.|\r\n        Main();\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Expected Behavior**: Autocompletion to offer `Property` property in the `nameof` context.\r\n\r\n**Actual Behavior**: Only static members are shown. Works as expected with closing parenthesis present.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41615/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-02-12T18:37:46Z",
        "body": "This is likely because the following parses as:\r\n\r\n```string s = nameof(Program.Main()```\r\n\r\nSo every check we have seems to indicate that this is not a usage of `nameof` but rather a call to something called `nameof` with a normal expression arg.\r\n\r\nNote: by default we should spit out the `()` so this should be a rarer occurrence in general.\r\n\r\n--\r\n\r\nIf we wanted to fix ths, we'd have to do some detection of this potential case.  It would likely have to take newlines into account here.  i.e. if the user literally had:\r\n\r\n```nameof(Program.$$Main()``` then we likely should keep it only as static members."
      },
      {
        "user": "miloush",
        "created_at": "2020-02-13T13:47:27Z",
        "body": "> every check we have seems to indicate that this is not a usage of `nameof` but rather a call to something called `nameof` with a normal expression arg.\r\n\r\nWhy is the `nameof` colored as a keyword then? Wouldn't it make more sense when there are syntax errors to assume it's a `nameof` context than a call at this point?\r\n\r\n> Note: by default we should spit out the () so this should be a rarer occurrence in general.\r\n\r\nTo be fair that was not the default before, so while it may by rare for new users, it is a reasonable to expect some of the more senior users to revert to the previous default (rather than it being a random setting you accidentally try out).\r\n\r\n> `nameof(Program.$$Main()` then we likely should keep it only as static members.\r\n\r\nWhy?\r\n\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-02-13T16:35:02Z",
        "body": "> Why is the nameof colored as a keyword then? \r\n\r\nLikely because it's moret aggressive here. \r\n\r\n> Wouldn't it make more sense when there are syntax errors to assume it's a nameof context than a call at this point?\r\n\r\nYes. That's what I'm suggesting we do. \r\n\r\n\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:48:49Z",
        "body": "Closing out due to lack of feedback. "
      }
    ]
  },
  {
    "number": 41351,
    "title": "The new decompilation log should be collapsed by default",
    "created_at": "2020-01-31T23:27:27Z",
    "closed_at": "2024-10-21T19:21:08Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41351",
    "body": "The decompilation log in #41007 is not collapsed by default, so for short files it is readily visible. The outlining applied to decompiled source files should collapse this region by default.\r\n\r\n/cc @siegfriedpammer ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41351/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "siegfriedpammer",
        "created_at": "2020-02-01T09:16:16Z",
        "body": "I just tested this and I cannot reproduce this. All comments should be collapsed by default. Am I missing something?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:21:08Z",
        "body": "Closing as not repro."
      }
    ]
  },
  {
    "number": 41342,
    "title": "Go to Base when on a overrides keyword works oddly",
    "created_at": "2020-01-31T20:49:06Z",
    "closed_at": "2024-10-21T19:09:30Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Navigation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41342",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Paste the following into a new C# project:\r\n```\r\nusing System;\r\n\r\nclass Base\r\n{\r\n    public virtual void M() { }\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public override void M()\r\n    {\r\n        base.M();\r\n    }\r\n}\r\n\r\nclass EvenMoreDerived : Derived\r\n{\r\n    public override void M()\r\n    {\r\n        base.M();\r\n    }\r\n}\r\n```\r\n\r\n2. Right click on the \"override\" in EvenMoreDerived, and choose Go to Base.\r\n\r\n**Expected:** it goes to the M() in Derived.\r\n**Actual:** it goes to M() in Base.\r\n\r\n3. Right click on the \"override\" in Derived, and choose Go to Base.\r\n\r\n**Expected:** it goes to the base in Base.\r\n**Actual:** it gives an error.\r\n\r\nI'm guessing this is because we have a hack in our \"bind your cursor to a symbol\" code which special-cases calling it on override so go to definition and quick info work. This is going to apply here as well, which doesn't make sense because you end up essentially jumping two levels up.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41342/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:09:30Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 41158,
    "title": "TaskCanceledException in TodoCommentIncrementalAnalyzer.GetTodoItems",
    "created_at": "2020-01-23T04:42:05Z",
    "closed_at": "2022-11-01T19:12:43Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Tenet-Reliability"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41158",
    "body": "**Version Used**: 16.5 Preview 2\r\n\r\n**Steps to Reproduce**: Unknown\r\n\r\n**Actual Behavior**:\r\n\r\n<pre>\r\nSystem.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n    at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)\r\n    at Microsoft.CodeAnalysis.Editor.Implementation.TodoComments.TodoCommentIncrementalAnalyzer.GetTodoItems(Workspace workspace, DocumentId id, CancellationToken cancellationToken)\r\n    at Microsoft.CodeAnalysis.Editor.Implementation.TodoComments.TodoCommentIncrementalAnalyzerProvider.GetTodoItems(Workspace workspace, DocumentId documentId, CancellationToken cancellationToken)\r\n    at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioBaseTodoListTable.TableDataSource.TableEntriesSource.GetItems()\r\n    at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.TableEntriesFactory`1.AggregatedEntriesSource.GetItems()\r\n    at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.TableEntriesFactory`1.GetSnapshot(Int32 versionNumber)\r\n    at Microsoft.VisualStudio.Shell.TableControl.Implementation.EntriesFromSnapshot.&lt;PinSnapshot&gt;b__14_1()\r\n    at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint[T](Object errorSource, Func`1 call, T valueOnThrow)\r\n</pre>",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41158/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T19:12:43Z",
        "body": "Haven't seen any more cases of this.  closing out.  "
      }
    ]
  },
  {
    "number": 41039,
    "title": "Add EditorConfig naming convention support for labels",
    "created_at": "2020-01-17T16:50:51Z",
    "closed_at": "2024-10-21T19:10:13Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41039",
    "body": "Currently, it is not possible to define EditorConfig naming conventions for labels. I propose that `label` is added as an applicable symbol kind supported for both C# and VB.\r\n\r\nSince labels are regular named identifiers like most (all?) other applicable symbol kinds they should probably offer similar warnings and code fixes, but one relevant consideration is whether an integer literal label in VB (e.g. `100:`) should be handled as any other alphanumeric label or if it should be silently ignored.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41039/comments",
    "author": "castholm",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2020-02-04T00:12:53Z",
        "body": "Design meeting review: We would accept a PR to implement this support."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:10:13Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 41006,
    "title": "Incorrect \"IDE0001 Name can be simplified\" diagnostic on switch statement returning expression tree, code fix produces invalid code",
    "created_at": "2020-01-16T13:40:41Z",
    "closed_at": "2023-02-22T22:33:41Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-Not Reproducible",
      "Feature - Pattern Matching",
      "IDE-CodeStyle",
      "Feature - IDE0001"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/41006",
    "body": "**Version Used**: \r\n8.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write the following code in Visual Studio 2019 (16.4.2)\r\n    ```csharp\r\n    Expression<Func<Foo, bool>> filter = (_fooId, _fooOtherId) switch\r\n    {\r\n        (Guid fooId, _) => foo => foo.Id == _fooId.Value,\r\n        (null, string s) when s.Length > 0 => foo => foo.OtherId == _fooOtherId,\r\n        _ => null\r\n    };\r\n    ```\r\n\r\n    (actual code, with only types and variable names changed)\r\n\r\n**Expected Behavior**:\r\n\r\nNo diagnostic should be reported for `Expression<Func<Foo, bool>>`\r\n\r\n**Actual Behavior**:\r\n\r\nTwo diagnostics are reported for `Expression<Func<Foo, bool>>`:\r\n- IDE0001 (Name can be simplified)\r\n- IDE0007 (Use var instead of explicit type)\r\n\r\nApplying the code fix for either of these diagnostics changes `Expression<Func<Foo, bool>>` to `var`, which is illegal, since lambda expressions don't have an intrinsic type.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/41006/comments",
    "author": "thomaslevesque",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-22T22:33:16Z",
        "body": "Fully compiling example:\r\n\r\n```c#\r\n#nullable disable\r\n\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\nclass Foo { public Guid Id; public object OtherId; }\r\n\r\nclass Example\r\n{\r\n    Guid? _fooId;\r\n    object _fooOtherId;\r\n\r\n    public void Method()\r\n    {\r\n        Expression<Func<Foo, bool>> filter = (_fooId, _fooOtherId) switch\r\n        {\r\n            (Guid fooId, _) => foo => foo.Id == _fooId.Value,\r\n            (null, string s) when s.Length > 0 => foo => foo.OtherId == _fooOtherId,\r\n            _ => null\r\n        };\r\n    }\r\n}\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-22T22:33:41Z",
        "body": "Closing out as i get neither IDE0001 nor IDE0007 with this code."
      }
    ]
  },
  {
    "number": 40928,
    "title": "Intellisense suggests switch expression on ref returns",
    "created_at": "2020-01-13T10:14:52Z",
    "closed_at": "2024-10-21T19:42:19Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40928",
    "body": "**Version Used**: \r\nVisual Studio 2019 Version 16.5.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add the following method:\r\n``` csharp\r\npublic ref int GetItem(int[] array, int index)\r\n{\r\n    switch (index)\r\n    {\r\n        case 0: \r\n            return ref array[0];\r\n        case 1:\r\n            return ref array[0];\r\n        default:\r\n            return ref array[0];\r\n    }\r\n}\r\n```\r\n2. Apply the quick action `convert switch statement to expression`  to the `switch`.\r\n\r\n**Expected Behavior**:\r\n\r\nEither, not suggest the action, if not possible, or convert to valid source code.\r\n\r\n**Actual Behavior**:\r\n\r\nConverts the method to \r\n``` csharp\r\npublic ref int GetItem(int[] array, int index)\r\n{\r\n    return index switch\r\n    {\r\n        0 => ref array[0],\r\n        1 => ref array[0],\r\n        _ => ref array[0],\r\n    };\r\n}\r\n```\r\nresulting in the error `error CS1525: Invalid expression term 'ref'` for each case line.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40928/comments",
    "author": "aalmada",
    "comments": [
      {
        "user": "Rabadash8820",
        "created_at": "2020-03-28T18:37:04Z",
        "body": "I see two other related Issues that have already been closed: #42130 and #40198, which were marked closed after PR #40236 was merged.\r\n\r\nHowever, correct me if I'm wrong @CyrusNajmabadi, but that PR doesn't actually make ref returns in switch expressions valid syntax, it just makes it so IntelliSense won't suggest that as a Quick Action. I personally think (as I think the openers of those other Issues would agree) that ref switches _should_ be valid syntax, or at least, I don't see any reason why it _shouldn't_. Curious to hear if this is actually a planned addition to the language."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-28T18:59:24Z",
        "body": "> Curious to hear if this is actually a planned addition to the language.\r\n\r\nThere is no plan to add that. If you would like that added, please make a feature request over at dotnet/csharplang.  Thanks!"
      },
      {
        "user": "Rabadash8820",
        "created_at": "2020-04-01T17:09:40Z",
        "body": "Just opened dotnet/csharplang#3326 👍"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:42:20Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 40758,
    "title": "Replace method with property refactoring discards trivia",
    "created_at": "2020-01-06T16:22:29Z",
    "closed_at": "2022-05-05T22:32:54Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40758",
    "body": "**Version Used**: Visual Studio 2019 Version 16.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nclass Class\r\n{\r\n    static bool Value() => default;\r\n\r\n    static void Main()\r\n    {\r\n        if (Value()/**/)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```diff\r\n+Expected Behavior\r\n-Actual Behavior\r\n```\r\n\r\n```diff\r\nclass Class\r\n{\r\n    static bool Value => default;\r\n\r\n    static void Main()\r\n    {\r\n+        if (Value/**/)\r\n-        if (Value)\r\n        {\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40758/comments",
    "author": "nxtn",
    "comments": [
      {
        "user": "Rekkonnect",
        "created_at": "2022-04-02T19:53:06Z",
        "body": "I found that it also applies to the declaring methods themselves. In my case,\r\n\r\n```csharp\r\n    public int GetMaxKeys() { return Order - 1; }\r\n    public int GetMinKeys() { return MinChildren - 1; }\r\n```\r\n\r\nwill become\r\n```csharp\r\n    public int MaxKeys => Order - 1; public int GetMinKeys() { return MinChildren - 1; }\r\n```"
      }
    ]
  },
  {
    "number": 40713,
    "title": "IDE1006 should not warn when name is all underscores",
    "created_at": "2020-01-03T07:31:00Z",
    "closed_at": "2023-05-10T13:48:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "4 - In Review",
      "Feature - IDE1006"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40713",
    "body": "```cs\r\nvoid M()\r\n{\r\n    //                            ↓ IDE1006 should not warn here\r\n    Console.CancelKeyPress += (_, __) => { };\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40713/comments",
    "author": "JohanLarsson",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2020-02-03T22:41:17Z",
        "body": "Design meeting review:\r\nWe will accept a PR to implement the requested behavior."
      }
    ]
  },
  {
    "number": 40589,
    "title": "Argument out of Range: VB invert if",
    "created_at": "2019-12-25T22:54:35Z",
    "closed_at": "2024-10-21T18:56:36Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40589",
    "body": "**Version Used**: \r\n16.4.<smth>\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Caret in the middle of `if` token -> Invert if\r\n2. Not sure how specific the code was\r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : Zadaný argument je mimo rozsah platných hodnot.\r\n   at Microsoft.CodeAnalysis.SyntaxList`1.get_Item(Int32 index)\r\n   at Microsoft.CodeAnalysis.VisualBasic.InvertIf.VisualBasicInvertSingleLineIfCodeRefactoringProvider.UpdateIf(SourceText sourceText,SingleLineIfStatementSyntax ifNode,SyntaxNode condition,SyntaxList`1 trueStatements,SyntaxList`1 falseStatements)\r\n   at Microsoft.CodeAnalysis.InvertIf.AbstractInvertIfCodeRefactoringProvider`3.GetRootWithInvertIfStatement(SourceText text,SyntaxNode root,TIfStatementSyntax ifNode,InvertIfStyle invertIfStyle,SyntaxNode subsequentSingleExitPointOpt,SyntaxNode negatedExpression)\r\n   at async Microsoft.CodeAnalysis.InvertIf.AbstractInvertIfCodeRefactoringProvider`3.InvertIfAsync[TIfStatementSyntax,TStatementSyntax,TEmbeddedStatement](<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Neznámé parametry>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Neznámé parametry>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40589/comments",
    "author": "petrroll",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2020-01-08T20:22:40Z",
        "body": "cc @jasonmalinowski "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T18:56:37Z",
        "body": "Closing out due to lack of prism hits."
      }
    ]
  },
  {
    "number": 40482,
    "title": "Navigation on a project diagnostic should open the project file",
    "created_at": "2019-12-18T23:44:43Z",
    "closed_at": "2024-10-21T18:49:50Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Navigation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40482",
    "body": "**Version Used**: \r\n16.5.0 Preview 2.0 [29615.19.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add a linked file entry to a project whose target file does not exist.\r\n2. Build the project\r\n3. Double-click on the reported error in Error List\r\n\r\n**Expected Behavior**:\r\n\r\nThe project file is open.\r\n\r\n**Actual Behavior**:\r\n\r\nNothing happens.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40482/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T18:49:51Z",
        "body": "Closing out as external.  "
      }
    ]
  },
  {
    "number": 40393,
    "title": "No autocomplete after using (c#8 syntax)",
    "created_at": "2019-12-14T14:26:32Z",
    "closed_at": "2022-10-28T21:26:59Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40393",
    "body": "**Version Used**: \r\n16.4.1\r\n**Steps to Reproduce**:\r\n\r\nT represents a proper class.\r\n\r\ndoesn't autocomplete: (c# 8 syntax)\r\n`using T obj = new T();`\r\n\r\ncorrectly autocomplete: (older syntax)\r\n```\r\nusing (T obj = new T())\r\n{\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\ncorrect auto-completion of T\r\n\r\n**Actual Behavior**:\r\nthe program doesn't autocomplete after using the new using syntax of c# 8. (without brackets)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40393/comments",
    "author": "giladfrid009",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-12-16T02:08:37Z",
        "body": "tagging @dpoeschl .  Did we miss this during the ide test pass for simple-usings?"
      },
      {
        "user": "dpoeschl",
        "created_at": "2019-12-17T23:48:50Z",
        "body": "Note, this impacts only the _first_ T (immediately after `using`), not the subsequent T in the object creation."
      }
    ]
  },
  {
    "number": 40006,
    "title": "IDE0019 introduces nullable warnings on arrays",
    "created_at": "2019-11-25T14:45:20Z",
    "closed_at": "2022-11-02T18:52:29Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle",
      "Feature - IDE0019"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/40006",
    "body": "**Version Used**: \r\n3.5.0-beta2-19570-07+4bd316035f64c9776d5420af71df8ba38e8e23e4\r\n\r\n**Steps to Reproduce**:\r\nPaste this code into a project:\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    static void Set(object obj, object? item)\r\n    {\r\n        object?[]? arr = obj as object[];\r\n        if (arr != null)\r\n        {\r\n            arr[0] = item;\r\n        }\r\n    }\r\n}\r\n```\r\nthen apply the offered IDE0019\r\n\r\n**Expected Behavior**:\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    static void Set(object obj, object? item)\r\n    {\r\n        if (obj is object?[] arr)\r\n        {\r\n            arr[0] = item;\r\n        }\r\n    }\r\n}\r\n```\r\n(Technically the original code probably should have been `object?[]? arr = obj as object?[];`, but the C# compiler happily allows `object?[]? arr = obj as object[];`, and thus a developer is unlikely to have specified the `?` on the RHS.)\r\n\r\n**Actual Behavior**:\r\nIt refactors it into:\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    static void Set(object obj, object? item)\r\n    {\r\n        if (obj is object[] arr)\r\n        {\r\n            arr[0] = item;\r\n        }\r\n    }\r\n}\r\n```\r\nwhich produces the warning:\r\n```\r\nwarning CS8601: Possible null reference assignment.\r\n```\r\non `item` being stored into the array.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/40006/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-11-25T15:50:13Z",
        "body": "Considering the runtime type check cannot differentiate between `object?[]` and `object[]`, it would be reasonable to expect a warning on the original code. Java's strict checks would report a warning in similar type erasure scenarios. In this case, `object?[]` is arguably the more correct type to use, but it's also not the type previously specified for `as`."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-11-25T16:21:19Z",
        "body": "> Considering the runtime type check cannot differentiate between object?[] and object[], it would be reasonable to expect a warning on the original code\r\n\r\nI don't think C# could reasonably generate a warning on the original.  Writing:\r\n```C#\r\nobject[]? arr = ...;\r\nobject?[]? arr2 = arr;\r\n```\r\nis perfectly legitimate, and it'd be strange for the compiler to not warn on that but to warn on:\r\n```C#\r\nobject?[]? arr2 = obj as object[];\r\n```\r\n\r\n> In this case, object?[] is arguably the more correct type to use, but it's also not the type previously specified for as.\r\n\r\nAgreed. It would probably be better for the dev to have written it with the nullable in the cast (which is why I wrote `Technically the original code probably should have been object?[]? arr = obj as object?[];`), but as noted without any guidance to that effect or negative ramifications at compile or run-time to not doing so, it's likely such casts will lack them.\r\n\r\nRegardless, the IDE0019 refactoring is taking code that compiles and producing code that doesn't compile ;-)"
      },
      {
        "user": "sharwell",
        "created_at": "2019-11-25T16:30:31Z",
        "body": "> I don't think C# could reasonably generate a warning on the original.\r\n\r\nIn erasure scenarios, Java will produce a warning for any case where the cast cannot be fully-performed at runtime. This would mean *both* of the following could reasonably produce warnings in C#:\r\n\r\n| Expression | Reason |\r\n| --- | --- |\r\n| `obj as object[]` | Cannot know at runtime that element reads will be non-null |\r\n| `obj as object?[]` | Cannot know at runtime that null writes are allowed |\r\n\r\nA safe runtime cast would require a representation that effectively applies `[MaybeNull, DisallowNull]` to the array indexer, but that does not exist.\r\n\r\n> Regardless, the IDE0019 refactoring is taking code that compiles and producing code that doesn't compile\r\n\r\nIn this case, I'm not sure I have a problem with that. I'll mark it for design review."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-11-25T16:31:41Z",
        "body": "> Java will produce a warning for any case where the cast cannot be fully-performed at runtime\r\n\r\nThat's fine for Java.  That is not how nullable reference types in C# works."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-11-25T16:33:24Z",
        "body": "> In this case, I'm not sure I have a problem with that\r\n\r\nReally?  My confidence in these refactorings just took a plunge."
      },
      {
        "user": "sharwell",
        "created_at": "2019-11-25T17:07:22Z",
        "body": "> > In this case, I'm not sure I have a problem with that\r\n>\r\n> Really? ...\r\n\r\nYes, mostly because in this case you don't end up with a change in runtime behavior (should you ignore/suppress the warning). Cases where code fixes silently make subtle changes to behavior are much more concerning. Also, both the original code and the rewritten code have incomplete fidelity against the developer's intent. That leaves me with questions:\r\n\r\n1. Is there \"one right way\" to do the transformation? If so, what is it and why?\r\n2. If there isn't \"one right way\", should we offer the refactoring at all? Why or why not?"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-11-25T17:08:37Z",
        "body": "> you don't end up with a change in runtime behavior\r\n\r\nYou don't even get to have run-time behavior because it fails to compile.  From my perspective, any refactoring that causes compilation failures is dead on arrival."
      },
      {
        "user": "mavasani",
        "created_at": "2020-01-06T19:37:13Z",
        "body": "Design meeting notes:\r\n\r\n- Runtime cannot distinguish between 'object[]' and 'object?[]' \r\n- Jason: What is the flow state after the null check? Our code fix should not turn code without warnings into code that has compiler warnings. \r\n- Sam: Following options \r\n   - Not offer refactoring for this case – types differ in LHS and as expression in RHS. \r\n   - Choose one of two implementations which will always be wrong in some scenario: \r\n      - Use type from LHS, i.e. declaration \r\n      - Use type from RHS as expression. This introduces compiler warning.  \r\n- Jason: Don't try to guess what user might have intended. Use the declared type. \r\n- Jason: Likely regression because nullability is not included in type equality check. \r\n\r\n**Conclusion:** Should likely be revisited by language to flag the original case. We should not offer the refactoring for this case. "
      },
      {
        "user": "Youssef1313",
        "created_at": "2020-10-06T14:38:45Z",
        "body": "> **Conclusion:** Should likely be revisited by language to flag the original case. We should not offer the refactoring for this case.\r\n\r\n@mavasani Did that mean the compiler should produce a warning for the original code? I'm confused as the issue is still marked with Area-IDE."
      }
    ]
  },
  {
    "number": 39744,
    "title": "Pull member up didn't qualify things appropriately",
    "created_at": "2019-11-09T02:01:12Z",
    "closed_at": "2024-10-21T19:23:44Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39744",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have an empty class derive from a base class that is also empty. Have these be in two separate files, and no using statements in either file.\r\n2. In the derived class, add a method like `void M(CancellationToken token) { }`, and invoke add using for CancellationToken.\r\n3. Use \"pull member up\" to pull this up.\r\n\r\n**Expected Behavior**: the code in the base class either qualifies CancellationToken or adds a using.\r\n**Actual Behavior**: nothing happens, so the resulting code doesn't even compile.\r\n\r\nThis is perhaps related to #34427 where the customer is concerned that we aren't minimally qualifying things, or #35806 which has a much longer conversation about automatically adding usings. But it seems this is even more broken: we aren't even generating valid code at all...",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39744/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:23:44Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 39547,
    "title": "IDE0002. virtual property prevents 'base.' removal suggestion",
    "created_at": "2019-10-28T06:15:55Z",
    "closed_at": "2020-03-11T02:23:18Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-By Design",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39547",
    "body": "**Version Used**: VS 16.3.6\r\n\r\n```\r\nclass A\r\n{\r\n    public A aref1 { get; }\r\n    public virtual A aref2 { get; }\r\n}\r\nclass D\r\n{\r\n    public A f1, f2;\r\n}\r\nclass C : A\r\n{\r\n    void fn()\r\n    {\r\n        var d = new D\r\n        {\r\n            f1 = base.aref1, // OK. Suggests to remove 'base.'\r\n            f2 = base.aref2  // IDE0002 misses this 'base.'-removal opportunity\r\n        };\r\n    }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39547/comments",
    "author": "tamlin-mike",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-11T02:23:17Z",
        "body": "This is by design.  base.aref2 could be overridden in a derived class, and this would change behavior to now call that instead of the one in 'A'. \r\n\r\nNote that if you do `sealed class C` then we will offer on both."
      }
    ]
  },
  {
    "number": 39539,
    "title": "DeclarationNameCompletionProvider fails to resolve proper overload with out parameter",
    "created_at": "2019-10-26T13:08:58Z",
    "closed_at": "2024-10-21T19:22:16Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/39539",
    "body": "**Version Used**: \r\nVS16.4 P2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n            int.TryParse(\"\", out var $$);\r\n```\r\n\r\n**Expected Behavior**:\r\nNo suggestions (as disabled for int).\r\n\r\n**Actual Behavior**:\r\n`numberStyles`, `number`, `styles` etc. \r\nThere is TryParse overload with `StringStyles` second parameter, but it does not work here, as it is not `out`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/39539/comments",
    "author": "Dreamescaper",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:22:16Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 38986,
    "title": "Wrap Properties is unavailable in recoverable syntax failure conditions",
    "created_at": "2019-10-01T21:50:52Z",
    "closed_at": "2022-02-11T08:51:23Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38986",
    "body": "```cs\r\n    public class Base\r\n    {\r\n        public Base(int i1, int i2)\r\n        {\r\n        }\r\n    }\r\n\r\n    public class Derived : Base\r\n    {\r\n        public Derived(int i1, int i2, int i3) : base (,)\r\n        {\r\n\r\n        }\r\n    }\r\n```\r\n\r\nIf I invoke `ctrl+.` on the parameter list of `Derived` here, I do not get offered a wrap parameter quick fix. Same for an incomplete method where the brackets are missing, but the signature is otherwise there. I understand that we're likely just bailing out in the presence of syntax errors, but it would be nice if we could be a bit smarter here, as offering the wrapping, at least in this scenario, is totally possible and, I think, has a well-defined output.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38986/comments",
    "author": "333fred",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-10-02T00:25:22Z",
        "body": "Yes.  Currently we bail out if our parent has any syntax errors.   The presumption is that we won't be able to tell how to wrap properly in that case.\r\n\r\nWhat we likely should do is only bail out if our parent has syntax errors between the beginning of it through the end of hte list that we're wrapping.  i.e. here:\r\n\r\n```c#\r\n        [|public Derived(int i1, int i2, int i3)|] : base (,)\r\n        {\r\n\r\n        }\r\n```\r\n\r\nSyntax errors *after* the construct to be wrapped are unlikely to ever be an issue and can be ignored."
      }
    ]
  },
  {
    "number": 38779,
    "title": "Avoid throw an first chance XmlException in `ISymbolExtensions.GetDocumentationComment()` when xmlText is empty?",
    "created_at": "2019-09-20T09:51:56Z",
    "closed_at": "2020-03-18T02:06:36Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38779",
    "body": "**Version Used**: \r\nmaster-vs-deps(9401294549bd1559b0b409f620ea639f309fe2b5)\r\nRelated to #36028\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Hover cursor on any params of non-override methods with document, or on any local vars in VS.\r\n\r\n**Expected Behavior**:\r\nNo first chance exceptions should be throw.\r\n\r\n**Actual Behavior**:\r\nAn `XmlException` is throw and catched. It's useless when `xmlText` is empty.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38779/comments",
    "author": "yyjdelete",
    "comments": [
      {
        "user": "KirillOsenkov",
        "created_at": "2019-12-22T00:56:57Z",
        "body": "This is a recent regression and is quite annoying as it happens on every hover. "
      },
      {
        "user": "KirillOsenkov",
        "created_at": "2019-12-24T01:36:30Z",
        "body": "Note that there is potentially a second issue, not sure if unrelated: the XmlException can also have the message: \"There are multiple root elements.\"\r\n\r\nThis can happen when you call `XElement.Parse` on text such as:\r\n\r\n```\r\n\r\n      <summary> Gets the solid fill color that has a hexadecimal value of #FFFFEBCD. </summary>\r\n      <returns>A solid fill color.</returns>\r\n    \r\n```\r\n\r\nThere needs to be a better way to parse multiple XML elements like above, potentially use what the compiler does, or wrap the text with a fake root element.\r\n\r\nYou decide whether a separate issue should be filed for the above or it can be fixed as part of the fix for this issue."
      }
    ]
  },
  {
    "number": 38778,
    "title": "Custom columns are blank when FAR on a literal",
    "created_at": "2019-09-19T22:31:52Z",
    "closed_at": "2022-11-01T18:04:20Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38778",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Open VS and create a console app with this code:\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string s = \"asdf\";\r\n        }\r\n    }\r\n```\r\n2. Select the string `\"asdf\"`, right click, and choose Find All References\r\n3. If Containing Member, Containing Type, or Kind columns are not displayed, right click on the column labels in the FAR window and show them\r\n\r\n**Expected Behavior**:\r\nContaining Member should be Main\r\nContaining Type should be Program \r\nKind should be Read\r\n\r\n**Actual Behavior**:\r\nThe columns are empty",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38778/comments",
    "author": "chborl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T18:04:20Z",
        "body": "Closing out."
      }
    ]
  },
  {
    "number": 38767,
    "title": "MoveToNamespace should support moving a single type from global NS ",
    "created_at": "2019-09-19T18:03:31Z",
    "closed_at": "2024-10-20T20:09:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38767",
    "body": "Currently, this is supported only when the selected member is the only one declared in the global NS in the document.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38767/comments",
    "author": "genlu",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T20:09:43Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 38762,
    "title": "Expand selection on method should include XML docs",
    "created_at": "2019-09-19T11:34:43Z",
    "closed_at": "2024-10-20T20:09:26Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38762",
    "body": "**Version Used**: 16.4.0-pre.2.0+29318.173.master\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\nclass C\r\n{\r\n    /// <summary>A method</summary>\r\n    void M()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n1. With the caret inside method `M`, invoke _Expand Selection_ until the selection spans `void M() { }`\r\n2. Invoke _Expand Selection_ again\r\n\r\n**Expected Behavior**:\r\n\r\nSelection expands to include XML doc and method body.\r\n\r\n**Actual Behavior**:\r\n\r\nEnsure class `C` is selected.\r\n\r\n\r\nThis makes it hard to perform follow on actions such as:\r\n\r\n- comment entire method without leaving invalid dangling documentation\r\n- cut method to clipboard to paste somewhere else",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38762/comments",
    "author": "drewnoakes",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T20:09:26Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 38557,
    "title": "Inline rename throws InvalidOperationException in ASP.NET Core page",
    "created_at": "2019-09-06T18:45:49Z",
    "closed_at": "2024-11-06T03:24:06Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38557",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an ASP.NET Core Web App\r\n2. Open `Error.cshtml`.\r\n3. Rename `ErrorModel` class to `ErrorModel2` (Ctrl+R+R).\r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n\r\nAssertion failed:\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\n\r\n\r\n\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(Object sender, TextContentChangedEventArgs args)\r\n\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(TextContentChangedEventArgs args, Boolean immediate)\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(BaseBuffer baseBuffer, Boolean immediate)\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents()\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit()\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(ProjectionMapping[] mappings, String fullLangBufferText)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(ProjectionMapping[] mappings, String fullLangBufferText)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(String text, ProjectionMapping[] mappings)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(List`1 newCodeRanges)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.<>c__DisplayClass80_0.<OnDocumentStructureChanged>b__0()\r\n\r\n   at Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(Object sender, DocumentStructureChangedEventArgs e)\r\n\r\n   at Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(Object state)\r\n\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n\r\n   at System.Threading.Tasks.Task.Execute()\r\n\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)\r\n\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()\r\n\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.<>c.<.cctor>b__20_0(Object state)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n\r\n```\r\n\r\nFollowed by an exception:\r\n```\r\n>\tSystem.Core.dll!System.Linq.Enumerable.Single<Microsoft.VisualStudio.Text.SnapshotSpan>(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Text.SnapshotSpan> source) Line 1173\tC#\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(object sender, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 247\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent<Microsoft.VisualStudio.Text.TextContentChangedEventArgs>(object sender, System.EventHandler<Microsoft.VisualStudio.Text.TextContentChangedEventArgs> eventHandlers, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 546\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(Microsoft.VisualStudio.Text.TextContentChangedEventArgs args, bool immediate) Line 1061\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(Microsoft.VisualStudio.Text.Implementation.BaseBuffer baseBuffer, bool immediate) Line 362\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents() Line 626\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit() Line 586\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList<object> spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 758\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList<object> spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 995\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 156\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 214\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(string text, Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings) Line 34\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(System.Collections.Generic.List<Microsoft.WebTools.Languages.Html.Editor.ContainedLanguage.Razor.RazorRange> newCodeRanges) Line 873\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged.AnonymousMethod__0() Line 345\tC#\r\n \tMicrosoft.WebTools.Languages.Shared.Editor.dll!Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(object errorSource, System.Action action) Line 84\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(object sender, Microsoft.VisualStudio.Editor.Razor.DocumentStructureChangedEventArgs e) Line 366\tC#\r\n \tMicrosoft.VisualStudio.Editor.Razor.dll!Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(object state) Line 472\tC#\r\n\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38557/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-06T03:24:07Z",
        "body": "This would be handled by Razor now (which uses lsp rename).  Clsoing out."
      }
    ]
  },
  {
    "number": 38484,
    "title": "Move to next highlighted reference stops working if the current reference is incremented",
    "created_at": "2019-09-04T17:46:34Z",
    "closed_at": "2021-06-29T22:58:04Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Navigation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38484",
    "body": "**Version Used**: VS 16.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n- Move caret to the first `i` and wait for it to be highlighted\r\n- Move to next highlighted reference once (`Ctrl+Shift+Down`), wait 1 sec\r\n- Move to next highlighted reference once (`Ctrl+Shift+Down`), wait 1 sec\r\n- Move to next highlighted reference once (`Ctrl+Shift+Down`), only now it won't work\r\n\r\n```C#\r\nnamespace ConsoleApp18\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            int i = 0;\r\n            if (i == 1) { }\r\n            i++;\r\n            _ = i;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe reference is still highlighted even if it's incrementing its value (`i++`) so you can move to the next reference again.\r\n\r\n**Actual Behavior**:\r\n\r\nThe reference isn't highlighted anymore (it takes ~0.5 secs)\r\n\r\nI think this is a regression.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38484/comments",
    "author": "0xd4d",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2020-05-27T21:24:08Z",
        "body": "What seems to be happening is when the selection is moved to the `i++`, the caret ends up landing between the `i` and the `++`. That's supposed to prefer the `i` side of things when we pick which token is active, but some reason we're not here."
      },
      {
        "user": "akhera99",
        "created_at": "2021-06-29T22:58:04Z",
        "body": "Dupe of #51841"
      }
    ]
  },
  {
    "number": 38055,
    "title": "IDE0057 incorrectly handles substrings on String itself",
    "created_at": "2019-08-16T20:21:59Z",
    "closed_at": "2020-11-03T02:50:17Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Pedantic ;)",
      "Feature - Range",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/38055",
    "body": "**Version Used**: \r\n3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03\r\n\r\n**Steps to Reproduce**:\r\nThis is a super corner-case only relevant to a few people in the world, so I'll understand if you want to close it.  Just opening the issue in case.\r\n\r\nThe definition of System.String itself uses its own Substring in a few places, e.g.\r\n```C#\r\nsplitStrings[arrIndex++] = Substring(currIndex, sepList[i] - currIndex);\r\n```\r\nIDE0057 fires here, and transforms it into:\r\n```C#\r\nsplitStrings[arrIndex++] = Substring[currIndex..sepList[i]];\r\n```\r\nwhich doesn't compile.  It should have been transformed instead into:\r\n```C#\r\nsplitStrings[arrIndex++] = this[currIndex..sepList[i]];\r\n```\r\nwhich works fine.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/38055/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-08-18T22:56:37Z",
        "body": "i definitely did not consider this case :)"
      }
    ]
  },
  {
    "number": 37824,
    "title": "Can't extract expression in switch expression branch.",
    "created_at": "2019-08-08T07:00:36Z",
    "closed_at": "2022-12-30T22:32:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Extract Method"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37824",
    "body": "I had the following code:\r\n\r\n```c#\r\n            var result = children.Select(child => child switch\r\n            {\r\n                Choice c => ProcessChildren(c.Children, \" | \").Parenthesize(),\r\n                Sequence s => ProcessChildren(s.Children, \" \").Parenthesize(),\r\n                _ => ProcessField((Field)child),\r\n            }).Where(p => p.Text.Length > 0);\r\n```\r\n\r\nI wanted to extract the `ProcessChildren(c.Children, \" | \").Parenthesize()` part.\r\n\r\nUnfortunately, extract method pulled out the entire switch-expression.  ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37824/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "ryzngard",
        "created_at": "2022-11-01T20:20:33Z",
        "body": "@CyrusNajmabadi do you remember more context on this? I tried to make a min repro but wasn't able to reproduce: \r\n\r\n```csharp\r\npublic object M()\r\n{\r\n    var x = new int[] {5};\r\n    return x.Select(y => y switch\r\n    {\r\n        < 0 => [|long.Parse(ProcessNumber(y * -1))|], // <-- extract between [| |]\r\n        _ => long.Parse(ProcessNumber(y))\r\n    });\r\n}\r\n\r\nprivate string ProcessNumber(int v) => string.Empty;\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-11-01T20:44:51Z",
        "body": "I think it didn't work, but we fixed it.  But it still make not work in a 'when' clause.  can you check/fix that?"
      },
      {
        "user": "ryzngard",
        "created_at": "2022-12-30T22:32:58Z",
        "body": "Confirmed when clause doesn't work, but we have a separate issue for that: #24136"
      }
    ]
  },
  {
    "number": 37675,
    "title": "IDE0017 (Use Object Initializer) should not be offered on using declarations",
    "created_at": "2019-08-02T08:48:10Z",
    "closed_at": "2020-11-11T04:47:30Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37675",
    "body": "**Version Used**: Visual Studio 2019 Version 16.2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsider the following code:\r\n\r\n    using System;\r\n\r\n    internal sealed class Disposable : IDisposable\r\n    {\r\n        public string Property { get; set; }\r\n        public void Dispose() { }\r\n    }\r\n\r\n    internal static class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            using var disposable = new Disposable();\r\n\r\n            disposable.Property = args[2];\r\n        }\r\n    }\r\n\r\nCompile the code using\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n      <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>netcoreapp2.2</TargetFramework>\r\n        <LangVersion>8.0</LangVersion>\r\n      </PropertyGroup>\r\n\r\n    </Project>\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nIDE0017 should not be reported and the associated code fix should not be available.\r\n\r\n**Actual Behavior**:\r\n\r\nIDE0017 is reported on the using declaration. When the associated code fix is applied, it generates the following code:\r\n\r\n    private static void Main(string[] args)\r\n    {\r\n        using var disposable = new Disposable\r\n        {\r\n            Property = args[2]\r\n        };\r\n    }\r\n\r\nThe behavior of this code is substantially different from the behavior of the original code. This may not be a problem, or even desired, when simply assigning to a variable. It would never be a problem when initializing a newly declared local variable, as the difference in behavior is not observable in that case (AFAIK).\r\n\r\nHowever, a using declaration is more than simply a declaration, and the difference in behavior is certainly observable! The intent of the original code clearly was to construct an object, making sure that constructed object would be disposed at the end of the current scope, even if exceptions are raised in subsequent statements. By moving the assignments in those subsequent statements into an object initializer, that intent is violated. Indeed, in the above example, if `args[2]` throws, the Dispose method will not be called on the newly created Disposable.\r\n\r\nIDE0017 should not be offered on using declarations.\r\n\r\nPS: We discovered a real bug in a real application under development, that was introduced as a result of a developer applying the IDE0017 code fix on a using declaration.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37675/comments",
    "author": "KrisVandermotten",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-08-02T10:28:06Z",
        "body": "Note: this behavior was never intentional.  The \"use object initializer\" code was only written to handle local-decl intializers.  However, when local-decl initializers were updated to add support for the `using` keyword, this new behavior fell out.  This seems to have been missed during the testing of that new feature (unsurprising since it is subtle).  However, we should def be checking for this and disabling in this case due to the fair different semantics this now causes.\r\n\r\nTagging @dpoeschl for ensuring that the IDE test pass doc is updated to ensure this feature is checked when new language features come online."
      }
    ]
  },
  {
    "number": 37428,
    "title": "Wrap array initializer expressions.",
    "created_at": "2019-07-23T18:20:28Z",
    "closed_at": "2022-02-11T07:52:04Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "4 - In Review"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37428",
    "body": "Before:\r\n```cs\r\nvar xs = new[] [|{ 1, 2, 3, 4 }|];\r\n```\r\n\r\nAfter:\r\n```cs\r\nvar xs = new[]\r\n{\r\n    1,\r\n    2, \r\n    3,\r\n    4,\r\n};\r\n```\r\n\r\nWould be nice if there was a refactoring `Wrap every expression` similar to `Wrap every argument`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37428/comments",
    "author": "JohanLarsson",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-07-23T18:21:44Z",
        "body": "👍 We can also have things like \"Wrap long\" here to match our other features.  This should not be hard to provide fwiw."
      },
      {
        "user": "tokarzkj",
        "created_at": "2019-10-04T18:28:50Z",
        "body": "I would be interested in working on this if no one else has grabbed it."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-10-04T19:28:35Z",
        "body": "go ahead @tokarzkj ! :)"
      }
    ]
  },
  {
    "number": 37422,
    "title": "`csharp_indent_labels = flush_left` shouldn't affect indent of comment after label",
    "created_at": "2019-07-23T04:47:39Z",
    "closed_at": "2024-10-20T19:42:55Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37422",
    "body": "**Version Used**: \r\nVS2019 16.2Preview4 or dotnet-format 3.0.4\r\nCompiler version: '3.2.0-beta4-19359-03 (15b43b33)'. Language version: latest.\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Format the below code with `csharp_indent_labels = flush_left`\r\n\r\n**Expected Behavior**:\r\nflush_left:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\nIndent of the comment after label should not be affected, as it does for `csharp_indent_labels = one_less_than_current`(94c8fc41a4e5e3c7b0f1ccb4150eee004467e0fb).\r\n\r\none_less_than_current:\r\n```csharp\r\n        public void M()\r\n        {\r\n        //comment1\r\n        label:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n\r\n**Actual Behavior**:\r\nflush_left:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n//comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37422/comments",
    "author": "yyjdelete",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:42:55Z",
        "body": "Closing out due to lack fo feedback."
      }
    ]
  },
  {
    "number": 37260,
    "title": "'Introduce using statement' on method call expression statements returning IDisposable",
    "created_at": "2019-07-16T01:45:39Z",
    "closed_at": "2024-12-02T21:11:01Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Feature - enhanced using",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37260",
    "body": "Right now 'Introduce using statement' only shows up for variable declarations:\r\n\r\n```cs\r\nvar a = MethodThatReturnsDisposableThing(...);\r\n\r\nvar b = obj as IDisposable;\r\n```\r\n\r\nWould it be okay to expand the 'Introduce using statement' refactoring to show up for method calls that ignore the return type when the return type is disposable?\r\n\r\n```cs\r\nMethodThatReturnsDisposableThing(out var leasedObject);\r\n\r\nfoo.DoStuff();\r\n```\r\nAfter applying:\r\n```cs\r\nusing (MethodThatReturnsDisposableThing(out var leasedObject))\r\n{\r\n    leasedObject.DoStuff();\r\n}\r\n```\r\n\r\nI saw it happen today when I was with a newer developer, and my instinct was that the refactoring should show up and work. (Even though I knew it wouldn't since I wrote it.) I'm willing to submit a PR if this sounds like something you would accept.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37260/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T23:20:15Z",
        "body": "@jnm2 yup. we'd likely take a PR from you on this."
      }
    ]
  },
  {
    "number": 37251,
    "title": "Go to implementation should have some tests for mismatched nullable annotations",
    "created_at": "2019-07-15T23:33:21Z",
    "closed_at": "2022-10-31T23:19:50Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature - Nullable Reference Types",
      "Test-Gap",
      "Feature - Nullable Semantic Model"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37251",
    "body": "Go to implementation and related should ignore nullable annotations since theyr'e not considered. This might already be \"implemented\" but we need to add some tests to cover it.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37251/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T23:19:50Z",
        "body": "Closing out. "
      }
    ]
  },
  {
    "number": 37165,
    "title": "CS1935 message is misleading",
    "created_at": "2019-07-11T21:38:53Z",
    "closed_at": "2020-07-15T17:45:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37165",
    "body": "```\r\nerror CS1935: Could not find an implementation of the query pattern for source type 'int[]'. 'Join' not found. Are you missing a reference to 'System.Core.dll' or a using directive for 'System.Linq'?\r\n```\r\n\r\nSystem.Core.dll is not sufficient when targeting .NET Core, System.Linq.dll also must be present. \r\nRather than giving a misleading message we should remove the \"a reference to 'System.Core.dll' or\" part when building for .NET Core. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37165/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "tmat",
        "created_at": "2019-07-11T21:39:02Z",
        "body": "@agocke FYI"
      },
      {
        "user": "gafter",
        "created_at": "2019-09-19T01:19:29Z",
        "body": "Roslyn does not currently have a concept of \"building for .NET Core\"."
      },
      {
        "user": "tmat",
        "created_at": "2019-09-19T18:10:47Z",
        "body": "We might want to remove the dll name from the message altogether."
      },
      {
        "user": "kfechter",
        "created_at": "2020-07-11T22:09:08Z",
        "body": "I have a PR ready that removes the reference to the system.core.dll from the CS1935 message. New to contributing. build works and tests pass. Only thing I have a question on is the \"needs-review-translation\" for the associated language resource files how is that handled? The change to the message text caused a rebuild of the translation xml files. "
      }
    ]
  },
  {
    "number": 37029,
    "title": "Update compiler diagnostics before running analyzers",
    "created_at": "2019-07-06T00:22:14Z",
    "closed_at": "2024-10-20T19:41:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/37029",
    "body": "After making an edit to a document in Visual Studio, diagnostics (squiggles and error list entries) for compiler-reported errors should be updated before running analyzers.\r\n\r\nFor example, consider the following code:\r\n\r\n```csharp\r\nclass SomeType {\r\n  void SomeMethod() {\r\n    return\r\n  }\r\n}\r\n```\r\n\r\nThe syntax error for the missing semicolon is quickly corrected by the compiler once the user adds `;`. Slower analyzers should not prevent the IDE from updating squiggles and error list to immediately show the correction.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/37029/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-07-16T13:03:08Z",
        "body": "Design conclusion: this is the behavior we already expected to occur. We could have a bug (e.g. the recent Quick Info bug where cancellation did not occur) where background processing is overwhelming available resources, leaving the tools unable to complete the update in a timely manner."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:41:21Z",
        "body": "Closing out as this is how things work anyways in LSP rewrite."
      }
    ]
  },
  {
    "number": 36998,
    "title": "\"Create and initialize property\" should understand \"NotImplementedException\"",
    "created_at": "2019-07-05T08:55:10Z",
    "closed_at": "2022-11-09T17:47:01Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36998",
    "body": "**Version Used**: \r\n16.2.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Derive from an interface with get-properties (\"Name\")\r\n2. Run \"Implement interface\" which creates the properties (`Name => throw new NotImplementedException();`)\r\n3. Create a constructor with a parameter matching the property (\"name\")\r\n4. Run \"Create and initialize property\"\r\n\r\n**Expected Behavior**:\r\nThe quick fix should replace the NIE.\r\n\r\n**Actual Behavior**:\r\nThe quick fix offers to create another property (\"Name1\")\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36998/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-07-05T17:54:35Z",
        "body": "@Tragetaschen Thanks for filing this. I think it's a great next step towards completing the picture around these features. I'm guessing it should offer the following?\r\n\r\n### Getter only:\r\n\r\n```patch\r\n class SomeType : ISomeInterface\r\n {\r\n   public SomeType(string name) {\r\n+    Name = name;\r\n   }\r\n\r\n-  public string Name => throw new NotImplementedException();\r\n+  public string Name { get; }\r\n }\r\n```\r\n\r\n### Getter and setter:\r\n\r\n```patch\r\n class SomeType : ISomeInterface\r\n {\r\n   public SomeType(string name) {\r\n+    Name = name;\r\n   }\r\n\r\n-  public string Name {\r\n-    get => throw new NotImplementedException();\r\n-    set => throw new NotImplementedException();\r\n-  }\r\n+  public string Name { get; set; }\r\n }\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 36468,
    "title": "Use implicit type Fix All should simplify deconstructions",
    "created_at": "2019-06-14T21:25:35Z",
    "closed_at": "2024-10-20T19:32:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36468",
    "body": "**Version Used**: 16.2 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Always prefer `var`\r\n2. Write a deconstruction variable declaration as:\r\n\r\n    ```csharp\r\n    (bool x, bool y) = (true, true);\r\n    ```\r\n\r\n3. Apply a Fix All in Document to use implicit types\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nvar (x, y) = (true, true);\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\n(var x, var y) = (true, true);\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36468/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:32:42Z",
        "body": "Closing out due to lack of feedback. "
      }
    ]
  },
  {
    "number": 36384,
    "title": "Change Signature reorder parameters should reorder InlineData arguments",
    "created_at": "2019-06-12T23:12:17Z",
    "closed_at": "2024-10-20T19:40:00Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36384",
    "body": "**Version Used**: 16.2 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an xunit test theory with two parameters\r\n2. Add test cases with `[InlineData]`\r\n3. Use the Change Signature dialog to reverse the order of the two parameters\r\n\r\n**Expected Behavior**:\r\n\r\nThe arguments to each of the `InlineData` attributes should be reversed.\r\n\r\n**Actual Behavior**:\r\n\r\nThe arguments to `InlineData` are not reversed.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36384/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-07-06T01:30:58Z",
        "body": "Design review conclusion:\r\n\r\nWe would accept a pull request to hard-code knowledge of *this attribute*. If users start requesting additional cases, we can revisit the analyzer to find a more comprehensive way to address similar situations."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:40:00Z",
        "body": "closing out due to lack of feedback and complexity of solution."
      }
    ]
  },
  {
    "number": 36381,
    "title": "Hit NRE in completion (GetDescriptionAsync)",
    "created_at": "2019-06-12T22:51:16Z",
    "closed_at": "2019-08-16T02:54:55Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36381",
    "body": "**Version Used**: \r\n\r\nVersion 16.2.0 Preview 2.0 [28930.63.d16.2stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\nI don't have repro steps, just saw an NRE reported in goldbar with the following exception stack in activity log:\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.Completion.CommonCompletionProvider.<GetDescriptionAsync>d__2.MoveNext()\r\n --- End of stack trace from previous location where exception was thrown\r\n ---    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.<GetDescriptionAsync>d__23.MoveNext()\r\n --- End of stack trace from previous location where exception was thrown ---\r\n    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.<CallExtensionPointAsync>d__35`1.MoveNext() ---\r\n End of stack trace from previous location where exception was thrown ---\r\n    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36381/comments",
    "author": "mavasani",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2019-06-12T22:51:28Z",
        "body": "Tag @ivanbasov "
      },
      {
        "user": "ivanbasov",
        "created_at": "2019-06-12T22:54:05Z",
        "body": "Thank you, @mavasani !\r\nThe callstack leads to the completionprovider which is shared between async and the original completion. Therefore, I'd remove 'async' from the issue title."
      },
      {
        "user": "ivanbasov",
        "created_at": "2019-06-13T19:23:59Z",
        "body": "@mavasani , if this happened with a script/test scenario, can we get the description of the test scenario?\r\n\r\nWas any extension involved? e.g. TS or F#?"
      },
      {
        "user": "mavasani",
        "created_at": "2019-06-13T19:25:22Z",
        "body": "Nope just while typing code inside Roslyn.sln and attempting to invoke completion."
      },
      {
        "user": "ivanbasov",
        "created_at": "2019-06-14T00:14:26Z",
        "body": "@mavasani , any specific code you can remember? e.g. C# vs VB, enum, namespace, attribute, etc?"
      }
    ]
  },
  {
    "number": 36351,
    "title": "Move down one line when applying ToggleLineComment with no selection",
    "created_at": "2019-06-12T01:14:01Z",
    "closed_at": "2024-10-20T19:53:39Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36351",
    "body": "When user applies ToggleLineComment with no selection, it is very useful to have the caret move down one line, so the user can apply the command repeatedly.\r\n\r\nIf needed, this could be a setting in Tools->Options (on by default).\r\n\r\n(See #27198)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36351/comments",
    "author": "justcla",
    "comments": [
      {
        "user": "dibarbet",
        "created_at": "2019-06-13T18:48:50Z",
        "body": "Want to make sure the request is clear.\r\nThe current behavior looks like this.\r\nNote - caret position indicated by $$\r\n```csharp\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n        string so$$meVar = \"hello\";\r\n    }\r\n}\r\n```\r\nToggle line comment is invoked, resulting in this with the entire line selected (indicated by [| |]).\r\n```csharp\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n[|        //string someVar = \"hello\";|]\r\n    }\r\n}\r\n```\r\nIs the request to instead remove the selection, and place the caret at the beginning of the next line (in this case, the closing bracket `}`)?"
      },
      {
        "user": "justcla",
        "created_at": "2019-06-13T19:07:12Z",
        "body": "Yes, exactly.\r\nThe principle being: There was no selection before triggering it. There should be no selection afterwards.\r\n\r\nAll that happens is that the current line gets \"//\" added or removed at the beginning, and the caret position moves down one line."
      },
      {
        "user": "dibarbet",
        "created_at": "2019-06-13T19:39:32Z",
        "body": "I think this one also breaks the 'toggle' behavior.  This is on purpose though as the idea is that one can just keep commenting out (or uncommenting out) lines going down the document.  \r\n\r\nI personally definitely wouldn't want this, but I can understand the utility.  Marking for design review to answer\r\n1.  If we want this\r\n2.  If we do want this, should it be an option and what would be the default?"
      },
      {
        "user": "justcla",
        "created_at": "2019-06-13T20:07:45Z",
        "body": "I overlooked a comment you made about the caret moving to the beginning of the line. The caret should not move to the beginning; it should stay at the same column and simply move down one line."
      },
      {
        "user": "justcla",
        "created_at": "2019-06-13T20:09:12Z",
        "body": "Yes, it breaks the \"toggle\" feature - deliberately.\r\nThe ability to comment/uncomment as you go is a real winner of a feature - even if it's not one you might use. I've used it for over ten years and it improves productivity."
      },
      {
        "user": "justcla",
        "created_at": "2019-06-13T20:15:23Z",
        "body": "When making decisions, please consider which is the more common scenario.\r\nA. User wants to comment, then immediately uncomment a single line.\r\nB. User wants to comment/uncomment a line then immediately do the same to the next line?\r\n\r\nCase A is usually just an accident.\r\nCase B is incredibly common. Without the \"move down\" feature, users either do twice the keystrokes, or they must first pre-select the rows then apply the command. Pre-selecting is at least one keystroke longer, but worse, it forces additional cognitive load, and also, it's a real pain when you need to skip one line in a block."
      },
      {
        "user": "DJackman123",
        "created_at": "2019-07-18T22:29:07Z",
        "body": "Just to add my two cents to this: I've been using Justin's HotCommands extension (which implements a toggle comment command the way he's described) for several months and I was surprised by how much of a productivity boost it turned out to be.  This is definitely my preferred way to comment and uncomment code.  The only time I select several lines to toggle the comment is when I am working with more than 8-10 lines.  Otherwise it's faster to have the carat at the top line then press Ctrl+/ repeatedly until all lines are toggled."
      },
      {
        "user": "dibarbet",
        "created_at": "2019-07-18T23:52:55Z",
        "body": "I forgot to update this!\r\n\r\nWe took this one for design review on Monday.  We agree that this functionality would be good, and we would accept a PR that would move the caret down to the next line when the toggle line comment command is invoked on a caret location.  The caret location on the next line would either be the same column, or the end of the line if the column is past the last character on that line. (same as using the down arrow)\r\ne.g, if the caret is at `$$`, the caret would move to down to immediately follow the closing `}`\r\n```cs\r\nint M()\r\n{\r\n    retur$$n 1;\r\n}\r\n```\r\nWe do not want to add a new options for this."
      },
      {
        "user": "justcla",
        "created_at": "2019-07-18T23:59:38Z",
        "body": "That's fantastic. ☺️\r\nThank you. I'm sure users will find the experience to be an excellent productivity boost."
      },
      {
        "user": "justcla",
        "created_at": "2019-07-19T00:01:08Z",
        "body": "Now... What do we need to do to get this onto the Ctrl+/ shortcut?\r\nIs there already a bug for that?"
      },
      {
        "user": "dibarbet",
        "created_at": "2019-07-19T00:06:27Z",
        "body": "> Now... What do we need to do to get this onto the Ctrl+/ shortcut?\r\nIs there already a bug for that?\r\n\r\nI don't believe there is currently an open bug for that.  Ctrl + / was the initial goal, but I believe that shortcut was already in-use for something in some language.  I don't quite recall what.\r\n@mikadumont do you happen to recall?\r\n\r\nFor now it could be valuable to open a new bug for that to help us gauge the priority to see if it is worth re-shuffling commands."
      },
      {
        "user": "justcla",
        "created_at": "2019-07-19T00:12:59Z",
        "body": "It's bound to Tools.GoToCommandLine at the global scope. But that command does nothing in VS2919, so it doesn't need the shortcut.\r\n\r\nIs there some other command using the Ctrl+/ binding? (On the Global or Text Editor scope)"
      },
      {
        "user": "justcla",
        "created_at": "2019-07-19T00:16:46Z",
        "body": "New issue opened: #37358"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:53:39Z",
        "body": "Closing out as external.  This would go to editor/platform."
      }
    ]
  },
  {
    "number": 36208,
    "title": "Visual Studio/Visual Basic debugger won't show the values of members of a structure on mouse hover when they're inside \"with / end with\" statements",
    "created_at": "2019-06-06T15:46:50Z",
    "closed_at": "2024-10-20T19:20:39Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Interactive-Debugging",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/36208",
    "body": "**Version Used**: Visual Studio 2017 / Visual Basic\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a structure. For example:\r\n```\r\nPublic Structure Test\r\n  Public SubVar_A As Byte\r\n  Public SubVar_B As Byte          \r\nEnd Structure\r\n```\r\n\r\n2. Create an object with that structure. For example:\r\n`Public TestObject As Test`\r\n\r\n3. Use a \"with / end with\" statement to access the members of TestObject. For example:\r\n```\r\nwith TestObject\r\n  .SubVar_A=10\r\n  .SubVar_B=20\r\nend with\r\n```\r\n\r\n4. Place a debug breakpoint at .SubVar_B=20, run the program, and once execution stops at the breakpoint hover the mouse over .SubVar_A or .SubVar_B to see their values. Nothing will show. Even if you add them to the Watch list, their values won't show. If, however, you don't use \"with / end with\" statements, and instead use \"TestObject.SubVar_A=10\", hovering the mouse over it will show the value when debugging.\r\n\r\n**Expected Behavior**: It was expected that hovering the mouse over .SubVar_A or .SubVar_B would show their values when debugging.\r\n\r\n**Actual Behavior**: The values won't show.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/36208/comments",
    "author": "Felcat",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2019-06-06T16:38:02Z",
        "body": "Tagging @ivanbasov @tmat for triage/routing"
      },
      {
        "user": "tmat",
        "created_at": "2019-06-06T17:29:21Z",
        "body": "Seems like an issue in VB EE, where we determine the expression to be evaluated for data tips."
      },
      {
        "user": "Felcat",
        "created_at": "2019-06-06T23:03:04Z",
        "body": "Some Facebook group members (Visual Basic group) informed me that it also doesn't work on Visual Studio 2019."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:20:39Z",
        "body": "Closing out due to lack of feedback ansd us not likely to touch these experiences."
      }
    ]
  },
  {
    "number": 35854,
    "title": "'Make local function static' removes empty line above local function",
    "created_at": "2019-05-21T21:57:03Z",
    "closed_at": "2019-05-22T18:00:43Z",
    "labels": [
      "Bug",
      "Resolution-Duplicate",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35854",
    "body": "**Version Used**: VS 16.1 and C#8 preview\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `Ctrl+.` on `LocalFunc` and hit `Make local function static`\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe empty line above the local function is preserved\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            static int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe empty line above the local function is removed\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n            static int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35854/comments",
    "author": "0xd4d",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2019-05-22T18:00:43Z",
        "body": "Duplicate of #35489"
      }
    ]
  },
  {
    "number": 35805,
    "title": "Add code fix for calling base constructor with missing arguments",
    "created_at": "2019-05-20T08:49:05Z",
    "closed_at": "2024-10-20T19:10:12Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35805",
    "body": "I would like a code fix \"Add parameter Foo to constructor\" in the following situation:\r\n\r\n```csharp\r\nabstract class Base\r\n{\r\n    protected Base(Foo foo) {}\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public Derived(Bar bar) {} //cs7036: There is no argument that corresponds to the required formal parameter 'Foo' of 'Base.Base(Foo)'\r\n}\r\n```\r\n\r\nThe result of the code fix should be:\r\n\r\n```csharp\r\nabstract class Base\r\n{\r\n    protected Base(Foo foo) {}\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public Derived(Bar bar, Foo foo) : base(foo) {} \r\n}\r\n```\r\n\r\nIt should also be offered if the base constructor is explicitly called, but with missing arguments.\r\n\r\nI will be happy to implement this myself, once I am done with the PR I am currently working on.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35805/comments",
    "author": "YairHalberstadt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:10:12Z",
        "body": "Closing out for lack of feedback."
      }
    ]
  },
  {
    "number": 35705,
    "title": "KeywordCompletionProvider does not consider CultureInfo.CurrentUICulture",
    "created_at": "2019-05-14T19:11:09Z",
    "closed_at": "2022-11-10T23:02:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Concept-API",
      "Need More Info",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/35705",
    "body": "Under Czech Windows 10 I do `CultureInfo.CurrentUICulture = new CultureInfo( \"en-US\" )`. When  I then call `CompletionService.GetDescriptionAsync` I got different language results (Czech or English) depending on the type of the language element.\r\n\r\n- For method `Console.Beep` it returns expected English result _\"+1 overload\"_ (provider is `Microsoft.CodeAnalysis.CSharp.Completion.Providers.SymbolCompletionProvider`)\r\n\r\n- But for C# keyword `while` it returns Czech result _\"klíčové slovo\"_ instead of expected English _\"keyword\"_ (provider is `Microsoft.CodeAnalysis.CSharp.Completion.Providers.KeywordCompletionProvider`)\r\n\r\nVersion: Microsoft.CodeAnalysis.Analyzers version 2.9.2\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/35705/comments",
    "author": "HSyr",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-26T21:50:34Z",
        "body": "All we do is `string.Format(FeaturesResources._0_Keyword, keyword)` which seems like it shoudl be the right thing to do (since we don't specify cultures anywhere else when doing string.Format for our resource strings).  \r\n\r\n@sharwell do you know if there's anything to do here?"
      },
      {
        "user": "ghost",
        "created_at": "2022-11-10T23:02:17Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 34894,
    "title": "AD0001 RemoveUnusedParameters Out of Memory Exception",
    "created_at": "2019-04-09T23:26:27Z",
    "closed_at": "2024-10-20T19:36:53Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-Not Reproducible",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34894",
    "body": "I'm using the latest version of Visual Studio 2019 Preview and I can't run my project anymore because I'm now getting this error message\r\n\r\nAD0001 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.OutOfMemoryException' with message 'Exception of type 'System.OutOfMemoryException' was thrown.'",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34894/comments",
    "author": "ooples",
    "comments": [
      {
        "user": "YairHalberstadt",
        "created_at": "2019-04-17T19:47:57Z",
        "body": "Do you have a sample solution where this occurs?"
      },
      {
        "user": "mavasani",
        "created_at": "2019-06-25T13:45:37Z",
        "body": "@ooples Can you please provide a repro solution or a performance trace? Otherwise, the issue is not actionable on our end."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:36:53Z",
        "body": "Closing out due to lack of response."
      }
    ]
  },
  {
    "number": 34755,
    "title": "Apply code cleanup changes by document instead of all at the end",
    "created_at": "2019-04-04T16:58:45Z",
    "closed_at": "2022-11-06T23:02:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34755",
    "body": "**Version Used**: 7e7f95bd33c1ed3f0256fc69811a0845bc6c7284\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Run code cleanup in project or solution\r\n\r\n**Expected Behavior**:\r\n\r\nChanges for each document are written to disk after the document is cleaned up.\r\n\r\n**Actual Behavior**:\r\n\r\nAll changes are held in memory until the operation fully completes, and only then are written to disk.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34755/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-26T21:45:17Z",
        "body": "this kind of goes against the spirit of roslyn wrt our snapshots.  We try to be all-or-nothing.   We compute the new solution snapshot, then apply this.\r\n\r\nI would not expect the above to ahve any difference over the behavior we currently have *except* in the cases of crashes.  And i'm not sure we should change our implementation for that.\r\n\r\nAre there other reasons we would want to do this?  THanks!"
      },
      {
        "user": "ghost",
        "created_at": "2022-11-06T23:02:12Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 34649,
    "title": "Code fix for WRN_ImplicitCopyInReadOnlyMember",
    "created_at": "2019-04-01T20:18:43Z",
    "closed_at": "2024-10-25T20:28:40Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34649",
    "body": "Possible fixes include:\r\n\r\n- make an explicit copy of 'this'\r\n- modify the invoked member to be 'readonly' if legal",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34649/comments",
    "author": "RikkiGibson",
    "comments": [
      {
        "user": "Youssef1313",
        "created_at": "2022-08-08T17:23:54Z",
        "body": "@dotnet/roslyn-ide Is there still an interest in having this codefix?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T20:28:40Z",
        "body": "Closing out due to lack of broad feedback on this."
      }
    ]
  },
  {
    "number": 34648,
    "title": "Code fix to add 'readonly' to an existing member",
    "created_at": "2019-04-01T20:17:31Z",
    "closed_at": "2022-10-31T22:35:51Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34648",
    "body": "Possible scenarios where should be suggested:\r\n\r\n- Declaration of a non-readonly method where the IDE determines that adding 'readonly' would be legal.\r\n- Call site where the receiver is `ref readonly` and adding 'readonly' to the member would be legal.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34648/comments",
    "author": "RikkiGibson",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T22:35:51Z",
        "body": "We already ahve a feature for this.  Closing this out as complete."
      }
    ]
  },
  {
    "number": 34588,
    "title": "SymbolFinder.FindImplementedInterfaceMembersAsync documentation is confusing and inaccurate",
    "created_at": "2019-03-29T15:12:29Z",
    "closed_at": "2022-02-08T01:59:28Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Documentation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34588",
    "body": "The documentation for `SymbolFinder.FindImplementedInterfaceMembersAsync` is sparse, but the summary is:\r\n> Find symbols for declarations that implement members of the specified interface symbol\r\n\r\nThat's not what it does.  What it does is:\r\n\r\n> Find interface members that the specified symbol implements.\r\n\r\nAs an added bonus, if you actually pass the symbol for an interface, you get a NullReferenceException (presumably when the code tries to use `symbol.ContainingType.TypeKind`.)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34588/comments",
    "author": "Stevie-O",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-03-29T20:04:09Z",
        "body": "> That's not what it does. What it does is:\r\n>    Find interface members that the specified symbol implements.\r\n\r\nRight, as per it's name.  It \"Finds\" the \"Implemented Interface Members\" of the symbol you pass in :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-03-29T20:04:29Z",
        "body": ">documentation is confusing and inaccurate\r\n\r\nFeel free to submit a PR that improves things here.  Thanks!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-08T01:59:28Z",
        "body": "No movement by customer.  Closing out as by design."
      }
    ]
  },
  {
    "number": 34464,
    "title": "GenerateEnumMemberCodeFixProvider does not support Fix All",
    "created_at": "2019-03-26T19:34:10Z",
    "closed_at": "2022-10-31T22:32:58Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34464",
    "body": "**Version Used**: Visual Studio 2019 RC\r\n\r\nCurrently `GenerateEnumMemberCodeFixProvider` does not support Fix All operations. Unlike most code fixes that extend `AbstractGenerateMemberCodeFixProvider`, generation of enum members seems like a reasonable possibility.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34464/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T22:32:58Z",
        "body": "Closing out.  We don't need backlog issues just documenting these.  If we want to fix these, we can drive an active bug in a real milestone to do so if the value is htere."
      }
    ]
  },
  {
    "number": 34239,
    "title": "Awaited tasks are kept in memory even after completion",
    "created_at": "2019-03-19T09:48:42Z",
    "closed_at": "2019-11-23T16:05:09Z",
    "labels": [
      "help wanted",
      "Area-Compilers",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34239",
    "body": "**Version Used**: \r\n\r\nCompiler version: '2.8.3.63029 (e9a3a6c0)'.\r\nReproduced running on .net core 2.1.302 and .net framework 4.0.30319.42000 (windows 10 64bit).\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        var tasks = new List<Task>();\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            tasks.Add(Task.Run(RunAndBlock));\r\n            Thread.Sleep(TimeSpan.FromSeconds(5));\r\n        }\r\n\r\n        Thread.Sleep(TimeSpan.FromDays(1));\r\n    }\r\n\r\n    static async Task DoWork()\r\n    {\r\n        var data = Enumerable.Range(0, 100_000_000 / 4).ToArray();\r\n        await Task.Yield();\r\n        Console.WriteLine($\"Length: {data.Length}\");\r\n    }\r\n\r\n    static async Task RunAndBlock()\r\n    {\r\n        Console.WriteLine($\"Started task\");\r\n        await DoWork();\r\n        // DoWork() has finished, so I would expect any local\r\n        // variables used by that task to be no longer needed\r\n        // await Task.Yield(); // uncomment this to prevent leak\r\n        GC.Collect();\r\n        Console.WriteLine($\"Task and gc completed\");\r\n        Thread.Sleep(TimeSpan.FromDays(1));\r\n    }\r\n}\r\n```\r\n\r\nWith every started task program consumes additional 100 megabytes of memory, even though each task's `await DoWork()` and gc completes before starting next task.\r\n\r\n**Expected Behavior**:\r\n\r\nPeak memory usage is around 100 megabytes.\r\n\r\n**Actual Behavior**:\r\n\r\nEvery 5 seconds memory usage grows by 100 megabytes.\r\n\r\n**Other observations**:\r\n\r\nHere's the generated code for `RunAndBlock` state machine (slightly cleaned up):\r\n\r\n```csharp\r\nvoid IAsyncStateMachine.MoveNext()\r\n{\r\n    int num1 = this.1__state;\r\n    try\r\n    {\r\n        TaskAwaiter awaiter;\r\n        int num2;\r\n        if (num1 != 0)\r\n        {\r\n            Console.WriteLine(\"Started task\");\r\n            awaiter = Program.DoWork().GetAwaiter();\r\n            if (!awaiter.IsCompleted)\r\n            {\r\n                this.1__state = num2 = 0;\r\n                this.u__1 = awaiter;\r\n                this.t__builder.AwaitUnsafeOnCompleted<TaskAwaiter, Program.<RunAndBlock>d__2>(ref awaiter, ref this);\r\n                return;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            awaiter = this.u__1;\r\n            this.u__1 = new TaskAwaiter();\r\n            this.1__state = num2 = -1;\r\n        }\r\n        awaiter.GetResult();\r\n        GC.Collect();\r\n        Console.WriteLine(\"Task and gc completed\");\r\n        Thread.Sleep(TimeSpan.FromDays(1.0));\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        this.1__state = -2;\r\n        this.t__builder.SetException(ex);\r\n        return;\r\n    }\r\n    this.1__state = -2;\r\n    this.t__builder.SetResult();\r\n}\r\n```\r\n\r\nThe problem seems to be that `awaiter` is kept on the stack after it is no longer needed (after `awaiter.GetResult()` call). Awaiter has a reference to the task which has a reference to the state machine of `DoWork`, which is why gc cannot reclaim the array. Any other await after `await DoWork()` causes state machine to yield, therefore dropping all values the were only kept on the stack - which is why adding `await Task.Yield()` fixes the leak.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34239/comments",
    "author": "DomantasJ",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2019-10-14T22:46:33Z",
        "body": "While I agree that the compiler could generate code to null the task once awaited, this line concerns me\r\n``` c#\r\n        Thread.Sleep(TimeSpan.FromDays(1));\r\n```\r\nWaiting synchronously in an async method is a recipe for disaster.  This issue shows one of the kinds of disaster that can result.\r\n\r\nAs my doctor tells me: if it hurts when you do that, don't do that.\r\n"
      },
      {
        "user": "MykolaBalakin",
        "created_at": "2019-11-07T18:08:37Z",
        "body": "I've checked the issue.\r\nThe root cause, actually, not the awaiter itself but SetResult method which calls the parent continuation so that the child state machine is kept in the stack frame till the whole continuation chain is finished (by finishing all the methods or making the next async call).\r\n\r\nI've fixed the issue by explicitly nullifying all the hoisted method locals. Going to submit a PR soon."
      }
    ]
  },
  {
    "number": 34143,
    "title": "Inline temporary variable does not preserve indentation",
    "created_at": "2019-03-15T02:32:35Z",
    "closed_at": "2022-10-28T20:14:37Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34143",
    "body": "Reported by @drewnoakes \r\nAffected Build: 16.0.0 Preview 4.1 SVC1 \r\n\r\nSteps to reproduce:\r\n\r\nBefore\r\n```c#\r\nvoid Foo(bool b)\r\n{\r\n    var s = \"\";\r\n    SomeMethod(\r\n        s);\r\n}\r\n\r\nvoid SomeMethod(string _) { }\r\n```\r\n\r\nAfter inline `s`.\r\n\r\n```c#\r\nvoid Foo(bool b)\r\n{\r\n    SomeMethod(\r\n(string)\"\"); // leading whitespace removed\r\n}\r\n\r\nvoid SomeMethod(string _) { }\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34143/comments",
    "author": "jinujoseph",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-03-17T22:34:27Z",
        "body": "Something is very screwy there.  Why is a cast getting inserted?"
      }
    ]
  },
  {
    "number": 34142,
    "title": "Inline temporary variable should be available on usages of variable, not just declaration",
    "created_at": "2019-03-15T02:31:27Z",
    "closed_at": "2024-10-21T17:31:31Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34142",
    "body": "Reported by @drewnoakes \r\nAffected Branch: \r\nAffected Build: 16.0.0 Preview 4.1 SVC1 \r\nAffected Product Language: \r\n\r\nSteps to reproduce:\r\n\r\nGiven code\r\n\r\n```c#\r\nvar s = \"\";\r\nBar(s);\r\n```\r\n\r\nThe \"Inline temporary variable\" refactoring should be available on all usages of the `s` symbol (i.e. on both the declaration and the usage).\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34142/comments",
    "author": "jinujoseph",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2019-03-17T22:33:51Z",
        "body": "This would def need a design review.  Thsi could easily make the feature too noisy, and we've already heard from people (including team members that they're finding code-actions noisy enough)."
      },
      {
        "user": "drewnoakes",
        "created_at": "2019-03-18T15:52:26Z",
        "body": "A benefit of having it on the usage is the (future) ability to inline only a single usage. This is something ReSharper offers and can be quite useful."
      },
      {
        "user": "sharwell",
        "created_at": "2019-11-18T22:20:44Z",
        "body": "Design review conclusion: it makes sense to allow the inline variable refactoring to work from use sites.\r\n\r\n* When invoked from a use site, the variable is inlined the same as it is today (all usages are replaced, and the temporary variable is eliminated)\r\n* When invoked from a declaration, the code fix priority does not change from what it is now\r\n* When invoked from a use site, the code fix priority is low"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T17:31:31Z",
        "body": "Closing out due to lack of feedback on this."
      }
    ]
  },
  {
    "number": 34057,
    "title": "Find All References windows does not track source changes",
    "created_at": "2019-03-12T23:19:16Z",
    "closed_at": "2024-10-22T19:15:40Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "InternalAsk"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/34057",
    "body": "When I do a \"Find\" to find all occurrences of a string, clicking on the Find results continues to navigate the the relevant found line, even if changes have caused its line number to change between the time the \"find\" was done and the time the find result line was clicked on.  Nice!  Thank you, Visual Studio!\r\n\r\nHowever, when I do a \"Find All References\" to find all references to a symbol, clicking on the references result will navigate to the line whose number was the line of the found result at the time the search was performed.  If the source file was edited, that line will likely have nothing to do with the location of the reference to the symbol.\r\n\r\nPlease make the \"Find All References\" window track file changes as nicely as the \"Find\" window does.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/34057/comments",
    "author": "gafter",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-03-21T16:34:05Z",
        "body": "Design review: this is a difficult problem in general, but the following specific scenario should be supported:\r\n\r\n1. Run Find All References\r\n2. Open a document which contains one or more found references\r\n3. Add or remove lines above the reference in the file\r\n4. Double click a reference in that file in the Find All References window\r\n\r\nThe ability of (4) to navigate to the correct location should not be impacted by (3).\r\n\r\nThis scenario should work whether or not the file is saved between (3) and (4), but the behavior if the user _closes_ the document after step (3) is not specified by this design."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T19:15:40Z",
        "body": "Closing as external.  We supply the files/lines/columns.  Platform/editor should track then mappign that across edits the user has made.  Tagging @olegtk ."
      }
    ]
  },
  {
    "number": 33884,
    "title": "NullReferenceException in TryGetImageListAndIndex When Attempting to Apply Changes",
    "created_at": "2019-03-05T23:39:25Z",
    "closed_at": "2024-10-20T19:22:36Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/33884",
    "body": "Attempting to use the public api analyzer and apply changes to changed APIs when I encountered a null reference exception. Dump file can be found here: `\"\\\\mlangfs1\\public\\frsilb\\dumps\\33884\\devenv.dmp\"`\r\n\r\nEdit: I think I just found a consistent repro. Open the `PublicAPI.Unshipped.txt` file and attempt to invoke the update api file refactoring. Appears to crash every time. Does not crash when the document is closed.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/33884/comments",
    "author": "333fred",
    "comments": [
      {
        "user": "ivanbasov",
        "created_at": "2019-03-05T23:56:19Z",
        "body": "I reviewed Watson and could not find related issues so far."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:22:36Z",
        "body": "Closing out due to lack of prism hits."
      }
    ]
  },
  {
    "number": 33768,
    "title": "Infer Tuple item names from method names ",
    "created_at": "2019-02-28T18:27:37Z",
    "closed_at": "2022-10-26T19:19:06Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/33768",
    "body": "The issue in #28928 has been fixed for anonymous types, but not for tuples.\r\nIf I write this:\r\n`var x = (GetType(), Enabled);`\r\n'x' will have the two fields 'Item1' and 'Enabled'. and if I use the pulp suggestions to add the tuple declaration instead of var, it will be:\r\n`(Type, bool Enabled) x = (GetType(), Enabled);`\r\nYou can infer the name from method names the same way you did in  #28928 so 'x' declaration becomes:\r\n'(Type Type, bool Enabled);`\r\nand please fix that in the pulp suggestions too.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/33768/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2019-03-05T16:18:48Z",
        "body": "Because this corresponds to the change in #28928, it is an IDE request."
      },
      {
        "user": "sharwell",
        "created_at": "2019-03-05T18:53:09Z",
        "body": "🔗 This issue can be resolved by expanding #29392 (which supports anonymous types) to also support tuple types."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-26T19:19:06Z",
        "body": "Closing this out as this feature is working correctly.  The original tuple did not have a name for the first member, so the conversion should preserve that.  if the user specified a name in teh tuple, we preserve that when expanding things out."
      }
    ]
  },
  {
    "number": 33693,
    "title": "Expose \"Surround With\" snippets as a refactoring",
    "created_at": "2019-02-26T14:24:29Z",
    "closed_at": "2024-10-19T21:55:31Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/33693",
    "body": "Currently Surround With snippets are not especially discoverable. An IDE refactoring could be added that adds a Surround With item to the light bulb, and expands the available snippets as items on that menu.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/33693/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T21:55:31Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 32773,
    "title": "false positive redundant cast",
    "created_at": "2019-01-25T06:32:57Z",
    "closed_at": "2021-12-08T01:45:30Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/32773",
    "body": "Assuming that bounds is long, start and end is int. following gives a warning\r\n\r\n>Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first\r\n\r\n```c#\r\nbounds = (((long)end) << 32) | start;\r\n```\r\n\r\nIn my case it doesn't really matter to use sign or zero extension. start is always positive. for sake of hiding the warning\r\n\r\n```c#\r\nbounds = (((long)end) << 32) | ((long)start);\r\n```\r\n\r\nsays cast is redundant. I think if compiler suggests to resolve ambiguity, then it shouldn't suggest to introduce ambiguity again. (in my case it doesn't matter but i thought its good to share)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/32773/comments",
    "author": "MkazemAkhgary",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2019-07-14T00:33:50Z",
        "body": "Moving to IDE as it is not the compiler that says the cast is redundant."
      }
    ]
  },
  {
    "number": 32662,
    "title": "\"Make field readonly\" triggers on field of generic parameter type constrained to struct",
    "created_at": "2019-01-19T20:43:35Z",
    "closed_at": "2024-10-19T21:46:04Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/32662",
    "body": "**Version Used**: VS 16.0 Preview 1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\ninterface IQux\r\n{\r\n    bool this[int i] { get; set; }\r\n}\r\n\r\nclass Foo<T> where T : struct, IQux\r\n{\r\n    private T t; // \"Make field readonly\" makes code in Bar invalid.\r\n\r\n    public Foo(T t) => this.t = t;\r\n\r\n    public void Bar() => t[0] = true;\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/32662/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T21:46:04Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 32425,
    "title": "IntelliSence doesn't show any info if the summary contains '&'",
    "created_at": "2019-01-13T09:21:16Z",
    "closed_at": "2024-10-21T19:33:35Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/32425",
    "body": "**Version Used**:  VS2017 15.9.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n```\r\n        /// <summary>\r\n        /// Update name & text\r\n        /// </summary>\r\n        void Update()\r\n        {\r\n        }\r\n```\r\n2.  Move mouse to Update method.\r\n\r\n**Expected Behavior**: Show `Update name & text`, or give me error reason\r\n\r\n**Actual Behavior**: nothing\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/32425/comments",
    "author": "CreateAndInject",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2019-01-14T08:38:26Z",
        "body": "The summary follows xml syntax, so you should write `&amp;`.\r\nThe compiler should warn for \"bad xml syntax\"."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-08T21:10:30Z",
        "body": "I'm sure this is a dupe.  But i can't find the other."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:33:35Z",
        "body": "Closing out due to this being invalid syntax. "
      }
    ]
  },
  {
    "number": 32099,
    "title": "Instantiating types not suggested inside tuples",
    "created_at": "2019-01-02T19:25:10Z",
    "closed_at": "2024-10-19T21:03:31Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Tuples"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/32099",
    "body": "**Version Used**: VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n(int a, string b) tuple = (4, new |\r\n```\r\n\r\n**Expected Behavior**: `new string` to be suggested by autocompletion.\r\n\r\n**Actual Behavior**: No autocompletion suggestions even when invoked explicitly. The tooltip suggests the type is known though and should be suggested.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/32099/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T21:03:31Z",
        "body": "Not repro.  this works for me."
      }
    ]
  },
  {
    "number": 31836,
    "title": "Code fix for CS0119 to insert 'typeof'",
    "created_at": "2018-12-16T14:21:33Z",
    "closed_at": "2022-11-10T23:02:27Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31836",
    "body": "```c#\r\nusing System;\r\n\r\nenum MyEnum { }\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        Enum.GetValues(MyEnum); // CS0119: 'MyEnum' is a type, which is not valid in the given context\r\n    }\r\n}\r\n```\r\n\r\nIt would be nice to have a code fix to replace `MyEnum` with `typeof(MyEnum)`:\r\n```c#\r\nusing System;\r\n\r\nenum MyEnum { }\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        Enum.GetValues(typeof(MyEnum));\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31836/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-12-16T20:36:54Z",
        "body": "@Neme12 This is something that would likely be faster to just fix by opening a PR.  Would you be willing to do that?"
      },
      {
        "user": "MaStr11",
        "created_at": "2018-12-17T07:12:59Z",
        "body": "Related #23326"
      },
      {
        "user": "sharwell",
        "created_at": "2018-12-17T13:19:17Z",
        "body": "It seems reasonable to use this approach when the converted type of the expression would be `System.Type`, but we should be careful to avoid offering the fix in cases where it wouldn't make sense. Marking as **help wanted**."
      },
      {
        "user": "ghost",
        "created_at": "2022-11-10T23:02:29Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 31833,
    "title": "Code fix for CS0513 to make class abstract",
    "created_at": "2018-12-16T13:49:19Z",
    "closed_at": "2020-07-06T18:17:57Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31833",
    "body": "```c#\r\nclass C\r\n{\r\n    public abstract void M(); // CS0513: 'C.M()' is abstract but it is contained in non-abstract class 'C'\r\n}\r\n```\r\nIt would be nice to have a code fix to make `C` abstract.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31833/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-12-16T20:35:41Z",
        "body": "@Neme12 This is something that would likely be faster to just fix by opening a PR.  Would you be willing to do that?\r\n\r\nAlso, consider another fix to be removing 'abstract' from the method and giving it a body."
      },
      {
        "user": "MaStr11",
        "created_at": "2018-12-17T07:13:33Z",
        "body": "Related #23326"
      },
      {
        "user": "sharwell",
        "created_at": "2018-12-17T13:25:48Z",
        "body": "I can see two fixes here:\r\n\r\n1. Make `C` abstract\r\n2. Implement `C.M`, presumably by adding `throw new NotImplementedException()` like we do for other methods in similar cases\r\n\r\nI lean towards preferring the first action (showing first in list)."
      }
    ]
  },
  {
    "number": 31827,
    "title": "\"Delegate invocation can be simplified\" is not offered when calling .Invoke",
    "created_at": "2018-12-16T13:20:36Z",
    "closed_at": "2022-10-28T19:55:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31827",
    "body": "In this example \"Delegate invocation can be simplified\" is offered as expected:\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (Event != null)\r\n            Event(this, EventArgs.Empty);\r\n    }\r\n\r\n    event EventHandler Event;\r\n}\r\n```\r\nbut here it is not:\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (Event != null)\r\n            Event.Invoke(this, EventArgs.Empty);\r\n    }\r\n\r\n    event EventHandler Event;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31827/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-12-16T20:33:20Z",
        "body": "When does the latter happen?  From talking to many devs, we've found that people aren't even aware that this is something to be done.  They just invoke a delegate with invocation-syntax."
      }
    ]
  },
  {
    "number": 31619,
    "title": "CS8627 for missing generic constraint should offer a fix besides 'Upgrade to C# 8.0 *beta*'",
    "created_at": "2018-12-07T20:34:20Z",
    "closed_at": "2024-10-19T20:59:45Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31619",
    "body": "Visual Studio 2019 Preview 1\r\n\r\n```cs\r\npublic static class Foo\r\n{\r\n    public static T? Bar<T>(T bar)\r\n}\r\n```\r\n\r\nAt the end of the line and on `T?`, two fixes are offered that prompt to upgrade the current project or all projects to C# 8.0 due to CS8370 which is also reported now. But when I pressed Ctrl+., what I really had in mind was not having to type `↵⇥where TResult : struct` myself. A fix to add missing generic constraints would be handy.\r\n\r\nThis is just while typing the signature.  I could also imagine refactoring an existing method and wanting a fix to add a class constraint, a new constraint, or a type constraint.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31619/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:59:45Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 31594,
    "title": "Prefer braces code fix does not support single-line blocks",
    "created_at": "2018-12-06T21:56:47Z",
    "closed_at": "2024-10-19T20:59:09Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31594",
    "body": "**Version Used**: \r\nVS 15.9.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. New C# console app\r\n2. Add this code:\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        if (args.Length > 0) Console.WriteLine();\r\n    }\r\n}\r\n```\r\n3. Use this .editorconfig:\r\n```\r\n[*.cs] \r\ncsharp_prefer_braces = true:silent \r\ncsharp_preserve_single_line_statements = true \r\ncsharp_preserve_single_line_blocks = true \r\n```\r\n4. Format Document\r\n\r\n**Expected Behavior**:\r\nShould convert the line to:\r\n\r\n```\r\n        if (args.Length > 0) { Console.WriteLine(); }\r\n```\r\n\r\nNote that as a combination of the three rules above I'd expect the single-line block to remain on a single line, and the curlies to be added.\r\n\r\n**Actual Behavior**:\r\n```\r\n        if (args.Length > 0)\r\n        {\r\n            Console.WriteLine();\r\n        }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31594/comments",
    "author": "KirillOsenkov",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-12-06T21:59:23Z",
        "body": "This seems to be an oversight, but the configuration combination is quite rare. Marking up for grabs in the event someone who uses these settings is interested in implementing the feature. 😄 "
      },
      {
        "user": "KirillOsenkov",
        "created_at": "2018-12-06T22:22:43Z",
        "body": "@vScottLouvau"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:59:09Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 31378,
    "title": "ExtractInterface could work in parallel on updates",
    "created_at": "2018-11-26T22:30:19Z",
    "closed_at": "2022-10-31T21:49:46Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/31378",
    "body": "It might be possible to get performance gains from ExtractInterface when working on multiple documents. Since the code could be doing independent actions across multiple documents that aren't serial, moving to parallel may be beneficial. \r\n\r\nSee #31183 for more context on changes in this area. ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/31378/comments",
    "author": "ryzngard",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T21:49:46Z",
        "body": "closing out.  we should drive this with an actual scenario showing a perf problem that would warrant this."
      }
    ]
  },
  {
    "number": 30976,
    "title": "null exception from find symbols caused by VBMoveDeclarationNearReferenceCodeRefactoringProvider",
    "created_at": "2018-11-06T08:29:44Z",
    "closed_at": "2022-10-31T21:43:18Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30976",
    "body": "```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.ProcessProjectAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.ProcessProjectsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.ProcessAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(<Unknown Parameters>)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveDeclarationNearReference.AbstractMoveDeclarationNearReferenceCodeRefactoringProvider`4.State.TryInitializeAsync[TService,TStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveDeclarationNearReference.AbstractMoveDeclarationNearReferenceCodeRefactoringProvider`4.State.GenerateAsync[TService,TStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveDeclarationNearReference.AbstractMoveDeclarationNearReferenceCodeRefactoringProvider`4.ComputeRefactoringsAsync[TService,TStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30976/comments",
    "author": "heejaechang",
    "comments": [
      {
        "user": "heejaechang",
        "created_at": "2018-11-06T08:30:45Z",
        "body": "not sure what code caused this from happening since it is from code refactoring, my caret is already moved when info bar showed up."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-11-06T08:35:40Z",
        "body": "Hrmm.. would be hard to tell without more information.  Did a watson get sent?  The code for that method is simply:\r\n\r\n```c#\r\n            // Don't visit projects more than once.  \r\n            if (visitedProjects.Add(projectId))\r\n            {\r\n                var project = _solution.GetProject(projectId);\r\n\r\n                // Visit dependencies first.  That way the compilation for a project that we depend\r\n                // on is already ready for us when we need it.\r\n                foreach (var dependent in project.ProjectReferences)\r\n                {\r\n                    _cancellationToken.ThrowIfCancellationRequested();\r\n\r\n                    await ProcessProjectAsync(\r\n                        dependent.ProjectId, projectToDocumentMap, visitedProjects).ConfigureAwait(false);\r\n                }\r\n\r\n                await ProcessProjectAsync(project, projectToDocumentMap).ConfigureAwait(false);\r\n            }\r\n```\r\n\r\nThere are very little opportunities for null-refs.\r\n\r\n1. visitedProjects is initialized at the start of thigns and passed in here.  it should be null.\r\n2. We would rash if _solution.GetProject returned null. But that would indicate something *very* wrong with teh workspace since we're using projectIds returned from the dependency graph.  Definitely possible, but we need to really hope it's not that.  Did @jasonmalinowski 's work to change the dependency graph go in?\r\n3. we would crash if project.ProjectReferences returns null.\r\n\r\nThose are hte only 3, and right now '2' seems the most suspect.\r\n3. project.Project"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2018-11-14T21:23:04Z",
        "body": "@CyrusNajmabadi I did have a bug where we ended up with project references to projects that didn't exist anymore because they had been unloaded. If that explains what you saw here, then let's close that."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-11-14T21:31:50Z",
        "body": "Would `project.ProjectReferences` return `null` for any of its elements in that case?  If so, yes.  That would explain this.  Thanks!"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T21:43:18Z",
        "body": "this was NRTified and we haven't hit this since."
      }
    ]
  },
  {
    "number": 30575,
    "title": "Find all references of a switch statement over an enum type",
    "created_at": "2018-10-18T00:50:21Z",
    "closed_at": "2024-10-19T20:49:25Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30575",
    "body": "**Version Used**:  Visual Studio 15.8.7\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Select a `switch` statement that checks against an `enum` type\r\n2. Right-click \"Find All References\"\r\n\r\n**Expected Behavior**:\r\nAll `switch` statements in the solution against the same `enum` type are returned to the \"references\" window.\r\n\r\n**Actual Behavior**:\r\n\"Search found no results\"\r\n\r\n**Rationale**\r\nWhen refactoring an `enum` (e.g. adding a new item or changing the actual value of one), it is necessary to revisit all `switch` statements to make sure they properly handle that change. Right now, it is a laborious and manual process which make missing some instances easy.\r\n\r\nAt the moment, that proposal only considers `enum` types because other types are too generic (e.g. `int`) and might return a lot of false positives.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30575/comments",
    "author": "Kryptos-FR",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2018-10-22T19:47:02Z",
        "body": "Design Meeting Notes:\r\n\r\n- Handle as a separate command that populates the FAR window with only this kind of \"reference\", which can be invoked from the context menu when on the `switch` keyword or an enum type."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:49:25Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 30385,
    "title": "OverrideCompletion crashes IDE on property without accessors",
    "created_at": "2018-10-08T20:32:42Z",
    "closed_at": "2022-02-04T21:43:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-Not Reproducible",
      "Tenet-Reliability"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30385",
    "body": "```C#\r\nclass B\r\n{\r\n  public virtual int A { } // no accessors\r\n  class C : B\r\n  {\r\n    override A$$ // trigger OverrideCompletion here \r\n  }\r\n}\r\n```\r\n\r\nSimilar scenario to `CommitProducesExpressionBodyProperties` but with zero accessors.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30385/comments",
    "author": "jcouv",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T21:43:25Z",
        "body": "I don't repro a crash here.  Likely fixed in teh past."
      }
    ]
  },
  {
    "number": 30262,
    "title": "Verify Make Field Readonly is not reported for assignment to this",
    "created_at": "2018-10-02T13:04:12Z",
    "closed_at": "2022-10-31T21:19:09Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30262",
    "body": "A test should be added to verify \"Make Field Readonly\" is not reported if an assignment to `this` occurs outside the constructor of a struct.\r\n\r\nFor example, in the following code, no suggestion should be provided to mark `S.Value` as `readonly`.\r\n\r\n```csharp\r\nstruct S\r\n{\r\n  private int Value;\r\n\r\n  void Method() {\r\n    this = default;\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30262/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T21:19:09Z",
        "body": "This work was done."
      }
    ]
  },
  {
    "number": 30239,
    "title": "Formatting option for space after //",
    "created_at": "2018-09-30T16:01:09Z",
    "closed_at": "2024-11-29T04:04:36Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/30239",
    "body": "I was encouraged by @sharwell's feature request in #30089, so I'm creating one of my own. :smile:\r\n\r\nAfter typing `//` for a block comment and an alphanumeric character, I'd like a single space inserted before that character, so that my `//` and text are never touching.\r\n\r\n**Steps to Reproduce:**\r\n\r\nType a new character inside the comment (`|` indicates caret position)\r\n```c#\r\n//|\r\n```\r\n**Expected behavior**\r\n```c#\r\n// a|\r\n```\r\n\r\n**Actual behavior**\r\n```c#\r\n//a|\r\n```\r\n\r\nI'm not sure whether this is something too aggressive for Roslyn to do out of the box, but I thought I'd give it a try. If this was an option that was turned off by default, there's risk that the majority of users would not discover this so there would be no usage.\r\n\r\n**Design considerations**\r\n\r\n- It would probably be easiest to implement this as a command handler, but this is something that could potentially also be part of formatting, so that it can be fixed as part of Format and Code Cleanup. Should that be the case?\r\n- This could theoretically even be a code style, but I'm not sure if that's a good option, especially when we get a formatting analyzer that would flag all formatting violations including this one (if it was a formatting violation).\r\n- Should the line comment command create a space too? I don't think I have a preference here. The vast majority of my comment command usage is commenting out code, but I don't care whether commented out code is indented with a space or not, especially because I almost never commit commented out code. (Actually, it might even be beneficial to distinguish commented out code and regular comments. The fact that there is a space before the text could indicate it is a regular comment, and no space would be a sign of commented out code. But that's just an idea.)\r\n- I'm not sure whether this should be any kind of formatting violation or an analyzer with a diagnostic at all. I'm personally not as much bothered if I see a comment without a space, I just want it to be automatically inserted when I type a new one.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/30239/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-10-01T19:38:45Z",
        "body": "This feels too aggressive to me.  But i'd be ok with it if there were an option here.  I personally do `//whatever` a lot, and so i don't like the idea that that would be updated across all code-bases.\r\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2018-10-22T20:08:26Z",
        "body": "Design Meeting Notes\r\n- Have a formatting option (.editorconfig) for this\r\n- No changes to edit-time typing experiences"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T04:04:36Z",
        "body": "Clsoing out as not planned."
      }
    ]
  },
  {
    "number": 29521,
    "title": "VB: Indenting for type parameters should work the way it does for normal parameters.",
    "created_at": "2018-08-26T03:44:32Z",
    "closed_at": "2024-10-19T20:43:57Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/29521",
    "body": "**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nStart with the following code:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Private Class CFoo(Of TOne As Class, TTwo As Class, TThree As Class)\r\n  End Class\r\n\r\n  Public Sub Main()\r\n  End Sub\r\n\r\n  Private Sub SomeLongMethodNameHere(ArgOne As String, ArgTwo As String, ArgThree As String)\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nNow suppose you want to put the parameters to `SomeLongMethodNameHere()` on seperate lines, so you put the caret before `ArgOne`, press Enter to move it down, and then Backspace several times to get this:\r\n\r\n```vb\r\n  Private Sub SomeLongMethodNameHere(\r\n                ArgOne As String, ArgTwo As String, ArgThree As String)\r\n  End Sub\r\n```\r\n\r\nNext you put the caret before `ArgTwo` and press Enter. The editor correctly indents it so it aligns with `ArgOne`:\r\n\r\n```vb\r\n  Private Sub SomeLongMethodNameHere(\r\n                ArgOne As String,\r\n                ArgTwo As String, ArgThree As String)\r\n  End Sub\r\n```\r\n\r\nThen you repeat for `ArgThree` and the editor correctly indents it so it aligns with `ArgOne` and `ArgTwo`:\r\n\r\n```vb\r\n  Private Sub SomeLongMethodNameHere(\r\n                ArgOne As String,\r\n                ArgTwo As String,\r\n                ArgThree As String)\r\n  End Sub\r\n```\r\n\r\nAll this works as expected and I usually move the closing bracket to the next line too so it ends up like this:\r\n\r\n```vb\r\n  Private Sub SomeLongMethodNameHere(\r\n                ArgOne As String,\r\n                ArgTwo As String,\r\n                ArgThree As String\r\n              )\r\n  End Sub\r\n```\r\n\r\nThis behaviour should apply to the type parameters for class `CFoo` but it doesn't. Like before, we begin by placing the caret before `TOne`, press Enter and then backspace several times to get this:\r\n\r\n```vb\r\n  Private Class CFoo(Of\r\n                  TOne As Class, TTwo As Class, TThree As Class)\r\n  End Class\r\n```\r\n\r\nNext we place the caret before `TTwo` and press Enter. The expectation is that it will align with `TOne` (similar to how `ArgTwo` was aligned with `ArgOne`) but instead the editor seems to indent \"further in\" so it lines up with the end of the `Of` keyword, giving this messy result:\r\n\r\n```vb\r\n  Private Class CFoo(Of\r\n                  TOne As Class,\r\n                       TTwo As Class, TThree As Class)\r\n  End Class\r\n```\r\n\r\nIf you repeat for `TThree` it is aligned once again with the end of the `Of` keyword, which also means it lines up with `TTwo`:\r\n\r\n```vb\r\n  Private Class CFoo(Of\r\n                  TOne As Class,\r\n                       TTwo As Class,\r\n                       TThree As Class)\r\n  End Class\r\n```\r\n\r\nUltimately, you have to manually edit the indents for all parameters to get a result similar to this:\r\n\r\n```vb\r\n  Private Class CFoo(Of\r\n                  TOne As Class,\r\n                  TTwo As Class,\r\n                  TThree As Class\r\n                )\r\n  End Class\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nWhen indenting the second and subsequent parameters to methods like `SomeLongMethodNameHere()` the editor correctly aligns those parameters **using the indent level applied to the first parameter**. This behaviour should also apply to type parameters to classes like `CFoo`. At the moment the editor seems to insist on aligning subsequent type parameters with the `Of` keyword instead of with the first type parameter.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/29521/comments",
    "author": "ericmutta",
    "comments": [
      {
        "user": "ericmutta",
        "created_at": "2018-09-11T00:15:40Z",
        "body": "As an additional note, **it appears that the indenting problem only happens at the declaration site of the type parameters**. If you try indenting at the `Inherits` clause, the editor correctly lines up subsequent parameters with the first one. Consider this:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of InvalidTimeZoneException, InvalidCastException, TypeAccessException)\r\n  End Class\r\n```\r\n\r\nYou place the caret before `InvalidTimeZoneException`, press enter then add several spaces to get this:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of\r\n               InvalidTimeZoneException, InvalidCastException, TypeAccessException)\r\n  End Class\r\n```\r\n\r\nNow if you place the caret before `InvalidCastException` and press enter, it will correctly match the indentation of the first type argument `InvalidTimeZoneException`:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of\r\n               InvalidTimeZoneException,\r\n               InvalidCastException, TypeAccessException)\r\n  End Class\r\n```\r\n\r\nSame thing happens with `TypeAccessException` which is lined up with the previous two type arguments:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of\r\n               InvalidTimeZoneException,\r\n               InvalidCastException,\r\n               TypeAccessException)\r\n  End Class\r\n```\r\n\r\nIf you place the caret before the closing bracket and press enter, it too is aligned with all the parameters:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of\r\n               InvalidTimeZoneException,\r\n               InvalidCastException,\r\n               TypeAccessException\r\n               )\r\n  End Class\r\n```\r\n\r\nI usually press backspace several times to align the bracket with the name of the class being inherited from (i.e `CFoo`), giving this final result:\r\n\r\n```vb\r\n  Private Class CBar\r\n    Inherits CFoo(Of\r\n               InvalidTimeZoneException,\r\n               InvalidCastException,\r\n               TypeAccessException\r\n             )\r\n  End Class\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:43:58Z",
        "body": "Closing as we are not changing these vb experiences."
      }
    ]
  },
  {
    "number": 29487,
    "title": "Out variable name suggestion needs work",
    "created_at": "2018-08-24T06:49:37Z",
    "closed_at": "2022-11-01T00:15:06Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement",
      "IDE-IntelliSense",
      "IntelliSense-Completion"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/29487",
    "body": "**Version Used**: \r\nVisual Studio 15.8.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Interface with bool TryGetSelectedWorkspaceForCurrentUser(out Division workspace); method\r\n\r\n**Expected Behavior**:\r\nParameter name \"workspace\" to be suggested by Intellisense ~~and preferred over \"division\"~~.\r\nEdit: Maybe preferred is not so good after all, lot of \"value\" parameter names out there.\r\n\r\n**Actual Behavior**:\r\nWhen I write that method only parameter name \"division\" is suggested by Intellisense.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/29487/comments",
    "author": "wanton7",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2021-04-26T19:43:02Z",
        "body": "Moving this one to **help wanted**. A name from the parameter should be included in the suggestions, and filtering/selection will proceed on the rules already in place (i.e. no forced selection of this item, but could occur based on MRU)."
      },
      {
        "user": "sharwell",
        "created_at": "2021-04-26T19:43:29Z",
        "body": "@mikadumont Can you add this to the list of items we're tracking for improving suggested names?"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2021-04-26T21:58:09Z",
        "body": "## Design Meeting Notes:\r\nConclusion: Add the \"out variable\" parameter name to the completion list when consuming a method with an out param / using out var.\r\n"
      }
    ]
  },
  {
    "number": 29316,
    "title": "Generate class ignores default namespace when creating folders",
    "created_at": "2018-08-15T16:03:25Z",
    "closed_at": "2024-10-19T20:37:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/29316",
    "body": "**Version Used**: VS 15.8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a .NET Core C# project with `<RootNamespace>XX.YY</RootNamespace>`\r\n2. In `Program.cs` reference a non existing class in a sub namespace such as `new ZZ.Test()`.\r\n3. VS suggests a Quickfix _Generate class Test_, use that.\r\n\r\n**Expected Behavior**:\r\nA new class `Test` is created in namespace `XX.YY.ZZ` inside file `ZZ/Test.cs`.\r\n\r\n**Actual Behavior**:\r\nEverything compiles and is alright but the file `Test.cs` is placed inside a subfolder `XX/YY/ZZ/Test.cs`.\r\nIf `XX/YY` is my root namespace, I expect the quickfix to not create that folder structure.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/29316/comments",
    "author": "jods4",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:37:47Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 28996,
    "title": "CS0103 code fix could probably do better in overloaded situations.",
    "created_at": "2018-08-01T07:38:43Z",
    "closed_at": "2022-10-26T16:30:19Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28996",
    "body": "**Version Used**:  Visual Studio 15.7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nUse the CS0103 code fix on the `Bar` and `Baz` identifier in the following to generate methods.\r\n\r\n    abstract class Barry\r\n    {\r\n        public void Method()\r\n        {\r\n            Foo(Bar); // suggests creating a 'Bar' method with a signature matching Action -- all good here.\r\n            Foo(Baz, null); // suggests creating a 'Baz' method with a signature matching Action -- can't work.\r\n        }\r\n\r\n        protected abstract void Foo(Action action);\r\n        protected abstract void Foo(Action<object> action, object arg);\r\n    }\r\n\r\n\r\n**Expected Behavior**:\r\nI would expect that when generating methods from the `Bar` and `Baz` identifiers, they would be generated as `void Bar()` and `void Baz(object arg)` respectfully.\r\n\r\n**Actual Behavior**:\r\nBoth the `Bar` and `Baz` methods are generated without an argument, which means that the `Foo(Baz, null)` gets another error because the generated method has the wrong signature.\r\n\r\nPerhaps the code fix could filter the list of overloads based on the other arguments provided when trying to determine which signature to use for the generated method. If it's still ambiguous, then present a code fix for each of the viable options and let the user decide.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28996/comments",
    "author": "brian-reichle",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-08-07T16:49:19Z",
        "body": "@brian-reichle I know it's not fun to hit these, but this is a pretty cool bug report (I enjoyed reading it and understand why it should be fixed). 👍 "
      },
      {
        "user": "jnm2",
        "created_at": "2018-11-04T02:05:38Z",
        "body": "I'm hitting this too, when generating a method from `Task.ContinueWith(NewName, state)`. It generates a method without a state parameter (which doesn't compile)."
      }
    ]
  },
  {
    "number": 28947,
    "title": "Implement FindNode with ChildThatContainsPosition instead of FindToken",
    "created_at": "2018-07-30T21:04:24Z",
    "closed_at": "2022-10-31T20:13:30Z",
    "labels": [
      "help wanted",
      "Area-Compilers",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28947",
    "body": "Currently there is a todo in the code for FindNode:\r\nTODO: This should probably be reimplemented with ChildThatContainsPosition.\r\n\r\nFindNode traverses the syntax tree to find the node at a given span. The current implementation finds the leaf token at the start of the span and works back up to find the child node that contains the end of the span. Instead this can be done in a single pass by checking the end of the span as we traverse down the tree.\r\n\r\nIt's a minor change with a little bit of perf benefit (shorter traversal and avoiding unnecessary red node allocation). I'd like to work on this change as my first contribution if it's triaged/approved.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28947/comments",
    "author": "PranavSenthilnathan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-07-30T21:07:14Z",
        "body": "@PranavSenthilnathan Go ahead :)  It would be useful to have a perf demonstration that shows your change is helpful and does not hurt anything."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-17T01:55:41Z",
        "body": "Moving to compilers.  This is not an IDE issue.  Given the lack of movement from the original filer, this can likely be closed out."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-31T20:13:30Z",
        "body": "Closing out."
      }
    ]
  },
  {
    "number": 28867,
    "title": "Analyzer incorrectly proposes removal of unnecessary cast.",
    "created_at": "2018-07-26T23:17:01Z",
    "closed_at": "2022-10-25T21:38:19Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28867",
    "body": "**Version Used**: \r\n15.7.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a statement such as the following:\r\n```\r\nint? a = false ? 1 : default;\r\nConsole.WriteLine(a.HasValue);\r\n```\r\n2.  The result of this statement is, somewhat surprisingly, `True`.  The literal `1` apparently forces the type of the ternary to `int` and, consequently, the `default` expression to effectively be `default(int)`.\r\n3. Modifying the ternary, like so, yields the (arguably more \"expected\") result of `False` for `HasValue`:\r\n```\r\nint? a = false ? (int?)1 : default;\r\nConsole.WriteLine(a.HasValue);\r\n```\r\n\r\nNote the cast of the literal to `(int?)` forces the ternary to be of nullable type.  However, the analyzer dims the cast and proposes a \"Remove unnecessary cast\" suggestion.  That will change the behavior of the code.\r\n\r\n4. Interestingly, the analyzer *does* seem to have some level of awareness of the literal `1` forcing the ternary type to `int` because the following also yields `False` and the analyzer does *not* suggest removal of the argument to the `default` keyword.\r\n```\r\nint? a = false ? 1 : default(int?);\r\nConsole.WriteLine(a.HasValue);\r\n```\r\n\r\n**Expected Behavior**:\r\nThe analyzer should not propose removal of the cast to `(int?)` because the removal changes behavior.\r\n\r\n**Actual Behavior**:\r\nThe analyzer does propose removal of a cast to `(int?)` even though such removal changes behavior.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28867/comments",
    "author": "kfertitta",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-07-27T20:38:31Z",
        "body": "Tagging @jcouv and @DustinCampbell "
      },
      {
        "user": "gulbanana",
        "created_at": "2018-12-07T11:03:30Z",
        "body": "this also happens with nullable reference types in C# 8. the analyzer proposes \"Remove unnecessary cast\" for code like\r\n```\r\nvoid Foo(Bar bar)\r\n{\r\n    var nullableBar = (Bar?)bar;\r\n    nullableBar = null;\r\n}\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-25T19:37:06Z",
        "body": "I'm not seeing either of these behaviors.  Adding tests to confirm this so we can close this out."
      }
    ]
  },
  {
    "number": 28762,
    "title": "Generate local not available inside expression body",
    "created_at": "2018-07-21T19:05:55Z",
    "closed_at": "2024-10-25T04:59:21Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28762",
    "body": "Generate local 'foo' is offered here:\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        Console.WriteLine(foo);\r\n    }\r\n}\r\n```\r\n\r\nbut not here:\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M() => Console.WriteLine(foo);\r\n}\r\n```\r\n\r\nThe code fix should to be so kind and create a block body for me.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28762/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "Neme12",
        "created_at": "2018-07-21T19:07:29Z",
        "body": "A lot of this code could be shared with introduce local.\r\n\r\nThis code fix lags behind in other areas too. For example it can't create a block in an embedded statement, whereas \"introduce local\" does do that."
      },
      {
        "user": "Neme12",
        "created_at": "2018-07-21T19:09:54Z",
        "body": "It also doesn't know how to insert into a switch case:\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        switch (true)\r\n        {\r\n            case true:\r\n                Console.WriteLine(foo);\r\n                break;\r\n        }\r\n    }\r\n}\r\n```\r\nresults in\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var foo = false;\r\n        switch (true)\r\n        {\r\n            case true:\r\n                Console.WriteLine(foo);\r\n                break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn my opinion this should behave exactly like \"introduce local\", which generates the local as close to the expression as possible (in this case right above `Console.WriteLine`)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-07-21T20:10:04Z",
        "body": "@Neme12 would you like to take this and update these fixers to share more code?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:59:22Z",
        "body": "Closing out due to lack of feedback about this topic and lack of movement here."
      }
    ]
  },
  {
    "number": 28760,
    "title": "Code fix to generate local function",
    "created_at": "2018-07-21T17:32:28Z",
    "closed_at": "2024-10-21T16:58:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28760",
    "body": "It would be nice to have one similar to \"generate method\".\r\n\r\nI propose that the function is created at the end of the containing method/member/accessor, unless we're already in a local function, in which case the new function should be generated below the current one. Expression bodies should be expanded to blocks if necessary.\r\n\r\nExamples:\r\n\r\n- simple case: generate at the end of the method\r\n```c#\r\nclass C\r\n{\r\n    int M()\r\n    {\r\n        if (true)\r\n        {\r\n            Foo(\"\");\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n```\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    int M()\r\n    {\r\n        if (true)\r\n        {\r\n            Foo(\"\");\r\n        }\r\n\r\n        return 0;\r\n\r\n        void Foo(string v)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n```\r\n- inside local function, so generate below the innermost local function\r\n- the fact that we're in a lambda has no effect on the analysis\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (true)\r\n        {\r\n            void A()\r\n            {\r\n                Action a = () => Foo();\r\n            }\r\n\r\n            void B()\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (true)\r\n        {\r\n            void A()\r\n            {\r\n                Action a = () => Foo();\r\n            }\r\n\r\n            void Foo()\r\n            {\r\n                throw new NotImplementedException();\r\n            }\r\n\r\n            void B()\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n- expression bodied property expanded\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    int TakeFunc(Func<int> f) => f();\r\n\r\n    int P => TakeFunc(Foo);\r\n}\r\n```\r\n```c#\r\nusing System;\r\n\r\nclass C\r\n{\r\n    int TakeFunc(Func<int> f) => f();\r\n\r\n    int P\r\n    {\r\n        get\r\n        {\r\n            return TakeFunc(Foo);\r\n\r\n            int Foo()\r\n            {\r\n                throw new NotImplementedException();\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28760/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "Neme12",
        "created_at": "2018-07-21T17:57:15Z",
        "body": "The placement of local functions comes down to preference, so I'd be curious as to what others think about these rules. This is just an idea and the final design is not up to me obviously :smile:"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-07-21T20:08:23Z",
        "body": "Seems reasonable to me.  I think it's ok for us to take an opinionated stance toward 'end of method'.  It is at least something that can explained reasonably.  i.e. \"by placing at end of function, it does not interfere with understanding the direct code flow of the actual method you're in.\""
      },
      {
        "user": "dpoeschl",
        "created_at": "2018-10-22T20:37:40Z",
        "body": "Design Meeting Notes\r\n- Generating the local function at the bottom of the current member sounds good (without an option for now).\r\n- Move member within type can hopefully provide an easy fix-up if that wasn't the desired location of the local function. (FYI @gundermanc)"
      },
      {
        "user": "Neme12",
        "created_at": "2018-10-22T20:39:29Z",
        "body": "@dpoeschl Thanks. Is it also OK that if we're generating from inside an existing local function, we would generate below the current local function, as opposed to at the bottom?"
      },
      {
        "user": "gundermanc",
        "created_at": "2018-10-22T20:51:40Z",
        "body": ">Move member within type can provide an easy fix-up if that wasn't the desired location of the local function. (FYI @gundermanc)\r\n\r\nIs this something that exists today?"
      },
      {
        "user": "dpoeschl",
        "created_at": "2018-10-22T23:15:15Z",
        "body": "@Neme12 \r\n\r\n> Is it also OK that if we're generating from inside an existing local function, we would generate below the current local function, as opposed to at the bottom?\r\n\r\nSounds good to me. We can always adjust based on feedback."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T16:58:43Z",
        "body": "Closing out due to lack of feedback and movement."
      }
    ]
  },
  {
    "number": 28730,
    "title": "Introduce local for 'this' is not very useful",
    "created_at": "2018-07-20T15:15:16Z",
    "closed_at": "2022-11-01T03:42:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28730",
    "body": "**Version Used**: VS 15.7\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Move caret to `this` and press `Ctrl+.`\r\n\r\n```C#\r\n\tsealed class C {\r\n\t\treadonly string s;\r\n\t\tpublic C(string s) {\r\n\t\t\tthis.s = s;\r\n\t\t}\r\n\t}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nRoslyn either doesn't offer to introduce a local for 'this' or it moves this refactoring to the bottom of the list.\r\n\r\n**Actual Behavior**:\r\n\r\nRoslyn thinks the most useful refactoring is storing 'this' in a local.\r\n\r\n\r\nEven if it's a struct, it's not very useful to show this refactoring, especially if it's a constructor.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28730/comments",
    "author": "0xd4d",
    "comments": [
      {
        "user": "Neme12",
        "created_at": "2018-09-24T20:37:57Z",
        "body": "Why is this a bug?"
      },
      {
        "user": "dpoeschl",
        "created_at": "2018-09-24T22:49:18Z",
        "body": "Design Meeting Notes:\r\n\r\nSince `s` is `readonly`, it will cause an error. But more broadly, consider the following (explained in the comments).\r\n\r\n```C#\r\nsealed class C\r\n{\r\n    readonly string s;\r\n    string t;\r\n    C car = null;\r\n\r\n    public C(string s)\r\n    {\r\n        this.s = s; // Introduce Local offered anywhere on `this`, with or without selection\r\n        car.t = s; // Introduce Local only offered on `car` when it is selected \r\n    }\r\n}\r\n```\r\n\r\nLet's treat `this` like `car`."
      },
      {
        "user": "dpoeschl",
        "created_at": "2018-09-24T22:49:22Z",
        "body": "@Neme12 is there a good use case for this that we've missed?"
      }
    ]
  },
  {
    "number": 28251,
    "title": "Undo granularity for completion is too coarse",
    "created_at": "2018-07-02T23:30:25Z",
    "closed_at": "2022-10-25T19:32:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28251",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add the following code\r\n\r\n    ```csharp\r\n    public class Class1\r\n    {\r\n        void Repro()\r\n        {\r\n            Example(1);\r\n            Example(\"1\");\r\n        }\r\n\r\n        void ExampleTakesString(string value)\r\n        {\r\n        }\r\n\r\n        void ExampleTakesInt32(int value)\r\n        {\r\n        }\r\n    }\r\n    ```\r\n\r\n2. Place the caret at the end of the first call to `Example`\r\n3. Press <kbd>Ctrl</kbd>+<kbd>Space</kbd>, then <kbd>Tab</kbd>\r\n4. Place the caret at the end of the second call to `Example`\r\n5. Press <kbd>Ctrl</kbd>+<kbd>Space</kbd>, then <kbd>Tab</kbd>\r\n6. Press <kbd>Ctrl</kbd>+<kbd>Z</kbd> (Undo)\r\n\r\n**Expected Behavior**:\r\n\r\nOnly the second completion is undone, leaving the following:\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n    void Repro()\r\n    {\r\n        ExampleTakesInt32(1);\r\n        Example(\"1\");\r\n    }\r\n\r\n    void ExampleTakesString(string value)\r\n    {\r\n    }\r\n\r\n    void ExampleTakesInt32(int value)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nBoth completions are undone, leaving the original code:\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n    void Repro()\r\n    {\r\n        Example(1);\r\n        Example(\"1\");\r\n    }\r\n\r\n    void ExampleTakesString(string value)\r\n    {\r\n    }\r\n\r\n    void ExampleTakesInt32(int value)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**Notes**:\r\n\r\nThis is a regression from the behavior of Visual Studio 2013 first introduced in Visual Studio 2015.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28251/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-25T19:32:14Z",
        "body": "I'm going to close this out as even if it is a regression, we've gotten absolutely no feedback on it.  At this point, i'd be worried about changing again and screwing up someone new."
      }
    ]
  },
  {
    "number": 28216,
    "title": "Create combined tests for diagnostic/refactoring pairs",
    "created_at": "2018-06-29T14:07:08Z",
    "closed_at": "2024-10-19T20:27:30Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Test",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28216",
    "body": "Currently analyzers and refactorings are tested separately, which leaves the test suite unable to detect certain regressions. See the root cause analysis in #28217 for details.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28216/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:27:30Z",
        "body": "Closing out as speculative.  If we need to do this, this should be assigned a work item and assigned to an actual milestone. "
      }
    ]
  },
  {
    "number": 28180,
    "title": "Feature request: null coalescing code fix for wider scenarios",
    "created_at": "2018-06-28T11:25:57Z",
    "closed_at": "2023-02-13T02:01:45Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/28180",
    "body": "### Before\r\n```csharp\r\nvar c = source as C;\r\nif (c == null)\r\n    throw new ArgumentException();\r\n// use c\r\n```\r\n\r\n### After\r\n```csharp\r\nvar c = source as C ?? throw new ArgumentException();\r\n```\r\n\r\n### Update\r\nThis actually applies for every scenario that initializes an variable and compares to null.\r\n```csharp\r\nvar c = something;\r\nif (c == null)\r\n    throw new Exception();\r\n```\r\ncomes to:\r\n```csharp\r\nvar c = something ?? throw new Exception();\r\n```\r\n\r\nCurrent code fix seems to only apply when `something` is a variable or parameter, not expression?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/28180/comments",
    "author": "huoyaoyuan",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-08T03:06:56Z",
        "body": "@huoyaoyuan can you give an example that doesn't work that you want to work?"
      },
      {
        "user": "ghost",
        "created_at": "2023-02-13T02:01:46Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 27948,
    "title": "Add a code fix for going from \"expression-body member\" to \"auto-property initializer\" and vice versa",
    "created_at": "2018-06-18T02:34:51Z",
    "closed_at": "2024-11-05T19:29:55Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27948",
    "body": "I can never remember the syntax for going from \"expression-body member\" to \"auto-property initializer\":\r\n\r\n``` C#\r\npublic static ImageMoniker ApplicationPrivate => new ImageMoniker { Guid = s_manifestGuid, Id = ApplicationPrivateId };\r\n```\r\n\r\nto:\r\n\r\n``` C#\r\npublic static ImageMoniker ApplicationPrivate { get; } = new ImageMoniker { Guid = s_manifestGuid, Id = ApplicationPrivateId };\r\n```\r\n\r\nIt would be great if we had a code fix to automatically do this.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27948/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-03-25T03:09:31Z",
        "body": "Design review conclusion: there is some concern that this will be too noisy, and possibly confusing since it will likely trigger in the same scenarios as \"Use block body\", which is a behavior-preserving code style refactoring. To reduce confusion, this should have a title which clearly indicates that the refactoring will result in the initialized value of the property being cached."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-05T19:29:55Z",
        "body": "Closing out due to lack of broader feedback on this."
      }
    ]
  },
  {
    "number": 27866,
    "title": "Unhelpful error for badly placed else statement",
    "created_at": "2018-06-14T21:23:34Z",
    "closed_at": "2018-11-12T22:27:56Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27866",
    "body": "I work at a place that teaches C# to students, and one of oddest errors we see is the error for a misplaced else statement. We often have students have a while loop with an if else inside of the loop, and they realize that their else is not working correct. Their first idea is to move the else outside of the loop. However, when they do this, instead of an actual helpful error, they get an insanely unhelpful error stating there is a misplaced `}`. This should be a more useful error, such as else without matched if, rather then just a brace location error.\r\n\r\n**Version Used**:\r\n\r\nVisual Studio 15.7 \r\n\r\n**Steps to Reproduce**:\r\n\r\nEnter the following code\r\n\r\n```\r\nwhile(true)\r\n{\r\n    if (false)\r\n    {\r\n\r\n    }\r\n}\r\nelse {\r\n\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nError says something regarding else without a connected if\r\n\r\n**Actual Behavior**:\r\n\r\nCS 1513 `} expected`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27866/comments",
    "author": "ThadHouse",
    "comments": [
      {
        "user": "wachulski",
        "created_at": "2018-06-18T21:31:55Z",
        "body": "The following produces the same CS1513 error.\r\n```csharp\r\nvoid Foo()\r\n{\r\n    else {\r\n\r\n    }\r\n}\r\n```\r\nThis is the compiler part responsible for the observed behavior:\r\n```csharp\r\n// in Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser\r\nprivate void ParseStatements(ref CSharpSyntaxNode previousNode, SyntaxListBuilder<StatementSyntax> statements, bool stopOnSwitchSections)\r\n{\r\n    // ....\r\n\r\n    while (this.CurrentToken.Kind != SyntaxKind.CloseBraceToken\r\n        && this.CurrentToken.Kind != SyntaxKind.EndOfFileToken\r\n        && !(stopOnSwitchSections && this.IsPossibleSwitchSection()))\r\n    {\r\n        if (this.IsPossibleStatement(acceptAccessibilityMods: true))\r\n        {\r\n            var statement = this.ParseStatementCore();\r\n            if (statement != null)\r\n            {\r\n                statements.Add(statement);\r\n                continue;\r\n            }\r\n        }\r\n\r\n        GreenNode trailingTrivia;\r\n        var action = this.SkipBadStatementListTokens(statements, SyntaxKind.CloseBraceToken, out trailingTrivia);\r\n        // ...\r\n```\r\nSince `ElseKeyword` falsifies `this.IsPossibleStatement(acceptAccessibilityMods: true)` call, it then binds diagnostic error on the call path starting in `this.SkipBadStatementListTokens(statements, SyntaxKind.CloseBraceToken, out trailingTrivia);` where `SyntaxKind.CloseBraceToken` is passed as expected syntax.\r\n\r\nI understand @ThadHouse wants contextual clarification that `else` is missing preceding `if` part instead.\r\n\r\nA possible solution might be to add into:\r\n\r\n```csharp\r\n// in SyntaxParser\r\nprotected virtual SyntaxDiagnosticInfo GetExpectedTokenError(SyntaxKind expected, SyntaxKind actual, int offset, int width)\r\n{\r\n    var code = GetExpectedTokenErrorCode(expected, actual);\r\n    if (code == ErrorCode.ERR_SyntaxError || code == ErrorCode.ERR_IdentifierExpectedKW)\r\n    {\r\n        return new SyntaxDiagnosticInfo(offset, width, code, SyntaxFacts.GetText(expected), SyntaxFacts.GetText(actual));\r\n    }\r\n    else\r\n    {\r\n        return new SyntaxDiagnosticInfo(offset, width, code);\r\n    }\r\n}\r\n```\r\nsome piece of code that tries to guess what the user meant/missed. E.g. here we have:\r\n* expected = `}`\r\n* actual = `else`\r\nso error code could point towards rather `if` than `}` missing.\r\n\r\nBut this could look like hacking a method not responsible for such edge case / contextual detection. Now I believe the problematic part is in fact in `var action = this.SkipBadStatementListTokens(statements, SyntaxKind.CloseBraceToken, out trailingTrivia);` as it's not actually true that `SyntaxKind.CloseBraceToken` is expected here. Expected should rather be `}` or another-statement. I'm not that versed in compiler code, but it looks like expectancy model is more complex here than just mere SyntaxKind (=> multiple methods rewrite).\r\n\r\nSuggestions, clues?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-18T21:51:15Z",
        "body": "> Suggestions, clues?\r\n\r\n@wachulski Thanks for looking into this!\r\n\r\nNote: the type of error you're trying to improve is very similar to a different sort of error we already have logic for.  Namely, if you have misplaced 'catch/finally' we try (no pun intended) to do a better job parsing this out.\r\n\r\nI would look at how that works in teh parser already and potentially adopt a similar sort of strategy here.\r\n\r\nlet me know if you want more info.  I purposefully am not repsonding to your existing large post because i think it would be more worthwhile to investigate the approach i mentioned first.  \r\n\r\nThanks!"
      },
      {
        "user": "wachulski",
        "created_at": "2018-06-20T07:23:39Z",
        "body": "I'll see how it's with `catch/finally` handling and get back with info here."
      }
    ]
  },
  {
    "number": 27207,
    "title": "Formatting is applied too aggressively on 'override' completion",
    "created_at": "2018-05-28T14:18:19Z",
    "closed_at": "2024-11-29T03:55:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27207",
    "body": "**Version Used**: 15.7\r\n\r\nThe formatting applied when inserting an override includes a larger span than necessary:\r\n\r\n* It includes leading trivia from previous lines which is not related to the operation\r\n* It includes trailing trivia which is not related to the operation\r\n* It includes the leading trivia from the next code element, which results in changing the indentation of an unrelated code element\r\n\r\nAll code (including trivia) on lines before and after the line containing the original `override` keyword should not be altered by this operation.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nnamespace MyNamespace\r\n{\r\n  class MyClass\r\n  {\r\n  public int MyProperty { get; }\r\n  // Some comment\r\n\r\n    override$$\r\n\r\n      public void MyMethod1() { }\r\n      public void MyMethod2() { }\r\n  }\r\n}\r\n```\r\n\r\n1. Disable all automatic formatting options for C# code (e.g. format on paste, `\\`, return, and `}`\r\n1. At the `$$`, press space an use completion to insert an override for `object.ToString()`\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nnamespace MyNamespace\r\n{\r\n  class MyClass\r\n  {\r\n  public int MyProperty { get; }\r\n  // Some comment\r\n\r\n    public override string ToString()\r\n    {\r\n      throw new NotImplementedException();\r\n    }\r\n\r\n      public void MyMethod1() { }\r\n      public void MyMethod2() { }\r\n  }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nnamespace MyNamespace\r\n{\r\n  class MyClass\r\n  {\r\n  public int MyProperty { get; }\r\n    // Some comment\r\n\r\n    public override string ToString()\r\n    {\r\n      throw new NotImplementedException();\r\n    }\r\n\r\n    public void MyMethod1() { }\r\n      public void MyMethod2() { }\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27207/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T03:55:07Z",
        "body": "Closing out as won't fix.  We do touch up to the token following the method being generated to ensure the formatting of what iss right after being typed is fixed up."
      }
    ]
  },
  {
    "number": 27205,
    "title": "Move type to file is not proposed when a class and a generic version of it are in the same file",
    "created_at": "2018-05-28T10:09:31Z",
    "closed_at": "2024-10-19T20:20:23Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Need Design Review"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27205",
    "body": "**Version Used**: Visual Studio Entreprise 15.7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a file named `Class1.cs` with a class `Class1` and a class `Class1<T>` in it\r\n2. Open the refactoring menu on the second class (`Class1<T>`).\r\n\r\n**Expected Behavior**: \"Move type to file\" is proposed and will move `Class1<T>.cs` to a new file named ``Class1`1.cs`` or a similar name.\r\n\r\n**Actual Behavior**: \"Move type to file\" is not proposed.\r\n\r\nI search the repo for something similar, the only issue that i found was #13583 on the name of the generic class file, but it assumed that I am able to move the type.\r\n\r\nIf the second class is named `Class2<T>`, the refactoring is proposed. \r\n\r\nI guess that since `Class1<T>` would be moved to a file named `Class1.cs` and that this is the file where it is, the refactoring does not detect it.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27205/comments",
    "author": "k94ll13nn3",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-05-28T14:27:45Z",
        "body": "The majority of this is ready to be implemented. The specific name proposed still needs to be discussed in a design review, but the decisions from that review would be easy to apply to an existing implementation of the feature."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:20:23Z",
        "body": "Closing out due to lack fo feedback."
      }
    ]
  },
  {
    "number": 27144,
    "title": "please add refactors for init to ctor",
    "created_at": "2018-05-25T08:21:11Z",
    "closed_at": "2024-10-20T19:08:15Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "IDE-CodeStyle"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27144",
    "body": "sometimes it is hard to find the ctor when the class is long.\r\nand when the init needs to be across a few lines, the init needs to be in the ctor.\r\ncan a refactor suggestion be added to this?\r\nlike:\r\n```cs\r\nclass a\r\n{\r\n    public static readonly string staticfield = \"hi\";\r\n    //...\r\n    public a()\r\n    {\r\n        //ctor stuff\r\n    }\r\n    //...\r\n    public int prop { get; } = 42;\r\n    //...\r\n}\r\n```\r\nwhen i right click the prop and see suggested refactors, one new option should be available to turn into this:\r\n```cs\r\nclass a\r\n{\r\n    public static readonly string staticfield = \"hi\";\r\n    //...\r\n    public a()\r\n    {\r\n        prop = 42;\r\n        //ctor stuff\r\n    }\r\n    //...\r\n    public int prop { get; }\r\n    //...\r\n}\r\n```\r\nthen\r\n```cs\r\nclass a\r\n{\r\n    public static readonly string staticfield;\r\n    //...\r\n    static a()\r\n    {\r\n        staticfield = \"hi\";\r\n    }\r\n    public a()\r\n    {\r\n        prop = 42;\r\n        //ctor stuff\r\n    }\r\n    //...\r\n    public int prop { get; }\r\n    //...\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27144/comments",
    "author": "MoonCakeLover123",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2019-05-02T05:35:08Z",
        "body": "Design review conclusion:\r\n\r\nWe would accept a pull request implementing a new pair of refactorings to move a field initialization from the definition to a constructor, or vice-versa. This is straightforward for static fields, but instance fields need to make sure and handle multiple constructor scenarios. When moving the initialization from inline to an instance constructor, it would be acceptable to add the initialization to all instance constructors which do not use `this(...)` for chaining."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-20T19:08:15Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 27055,
    "title": "Why SyntaxNode.Contains(SyntaxNode) returns true for n.Contains(n)?",
    "created_at": "2018-05-22T21:31:37Z",
    "closed_at": "2018-10-12T22:26:42Z",
    "labels": [
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Documentation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/27055",
    "body": "**Version Used**: VS 15.7.1\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nBlockSyntax block = SyntaxFactory.Block();\r\nConsole.WriteLine(block.Contains(block));\r\n```\r\n\r\nIf this is behavior is by design then the documentation should be updated because it says:\r\nDetermines if the specified node is a descendant of this node.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/27055/comments",
    "author": "josefpihrt",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2018-05-23T03:34:33Z",
        "body": "In roslyn, a node does not contain itself.  This is why there is a `DescendantNodesAndSelf` method to explicitly include the parent node when descending.  `Contains` only considers child nodes."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-05-23T03:53:51Z",
        "body": "@jmarolf I think his point is that the above returns 'true' (unintuitively).  That's because the main loop is just:\r\n\r\n```c#\r\n        public bool Contains(SyntaxNode node)\r\n        {\r\n            if (node == null || !this.FullSpan.Contains(node.FullSpan))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            while (node != null)\r\n            {\r\n                if (node == this)\r\n                {\r\n                    return true;\r\n                }\r\n```\r\n\r\nThat is somewhat surprising (to me at least) and i don't think it was intentional.  @gafter for his recollection here."
      },
      {
        "user": "gafter",
        "created_at": "2018-05-31T16:27:45Z",
        "body": "I don't recall the history, but I think the best thing to do at this point is to \"clarify\" the documentation."
      },
      {
        "user": "VALLIS-NERIA",
        "created_at": "2018-06-15T09:59:08Z",
        "body": "I tried to \"fix\" it but a lot of tests failed. Most of them throw ArgumentException : The node is not part of the tree. Thus I believe this behavior was intentional. Maybe we should update the document and add another \"ContainsChild\" method if necessary."
      }
    ]
  },
  {
    "number": 26999,
    "title": "VB: Editor should include space before null conditional operator used in a With-statement.",
    "created_at": "2018-05-20T16:22:24Z",
    "closed_at": "2024-10-19T20:22:22Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26999",
    "body": "**Version Used**:\r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nType in the following code in a VB project:\r\n\r\n```vb\r\n  Public Function Blah() As Boolean\r\n    Dim obj As Object = Nothing\r\n\r\n    With TryCast(obj, Exception)\r\n      If?.Message = \"blah\" AndAlso?.Source = \"bleh\" Then Return False\r\n      If .Message = \"blah\" AndAlso .Source = \"bleh\" Then Return False\r\n\r\n      Dim Condition1 =?.Message = \"blah\" OrElse?.Source = \"bleh\"\r\n      Dim Condition2 = .Message = \"blah\" OrElse .Source = \"bleh\"\r\n\r\n      Return?.Message = \"blah\" OrElse?.Source = \"bleh\"\r\n      Return .Message = \"blah\" OrElse .Source = \"bleh\"\r\n    End With\r\n  End Function\r\n```\r\n\r\nIn the above code there are multiple pairs of statements that show how the editor formats code when you access the members of the variable `obj` referenced using the `With` statement. When you use the regular dot syntax to access members, the editor correctly includes a single whitespace before the dot, so you get code like:\r\n\r\n```vb\r\n      Return .Message = \"blah\" OrElse .Source = \"bleh\"\r\n```\r\n\r\nHowever if you access a member using the `?.` operator, the space is not included so you get this strange-looking result:\r\n\r\n```vb\r\n      Return?.Message = \"blah\" OrElse?.Source = \"bleh\"\r\n```\r\n\r\nI say \"strange-looking\" because the lack of spacing makes it look like the `Return` keyword and `OrElse` operator are both objects with members that can be accessed via `?.`\r\n\r\n**Expected Behavior**:\r\n\r\nThe editor should include a space before the `?.` operator just as it does for the regular dot operator when used in a With-statement, to give output like:\r\n\r\n```vb\r\n      Return ?.Message = \"blah\" OrElse ?.Source = \"bleh\"\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26999/comments",
    "author": "ericmutta",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:22:23Z",
        "body": "Closing out due to lack of feedback. "
      }
    ]
  },
  {
    "number": 26899,
    "title": "Block wrapping option inconsistent with try/catch/finally",
    "created_at": "2018-05-16T14:22:41Z",
    "closed_at": "2024-10-19T20:23:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26899",
    "body": "**Version Used**: 15.7\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Uncheck wrapping option **Leave block on single line**\r\n1. Type the following code:\r\n\r\n    ```\r\n    try{}catch(Exception){}finally{}\r\n    ```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\ntry\r\n{\r\n}\r\ncatch (Exception)\r\n{\r\n}\r\nfinally\r\n{\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\ntry\r\n{\r\n}\r\ncatch (Exception) { }\r\nfinally { }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26899/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:23:14Z",
        "body": "Closing out due to lack of feedback "
      }
    ]
  },
  {
    "number": 26529,
    "title": "\"Use collection initializer\" indents trailing trivia",
    "created_at": "2018-05-01T05:47:45Z",
    "closed_at": "2024-11-29T03:51:27Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26529",
    "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n``` VB\r\nPublic Class Class1\r\n\r\n    Public Sub Foo()\r\n\r\n        Dim list As New List(Of String)  <- Use collection initializer\r\n        list.Add(\"One\")\r\n        list.Add(\"two\")\r\n        ' Trivia is hard isn't it?\r\n\r\n    End Sub\r\n\r\n\r\nEnd Class\r\n\r\n```\r\n**Expected Behavior**:\r\n``` VB\r\nPublic Class Class1\r\n\r\n    Public Sub Foo()\r\n        Dim list As New List(Of String) From {\r\n            \"One\",\r\n            \"two\"\r\n        }\r\n        ' Trivia is hard isn't it?\r\n\r\n    End Sub\r\n\r\n\r\nEnd Class\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n``` VB\r\nPublic Class Class1\r\n\r\n    Public Sub Foo()\r\n        Dim list As New List(Of String) From {\r\n            \"One\",\r\n            \"two\"\r\n        }\r\n            ' Trivia is hard isn't it?\r\n\r\n    End Sub\r\n\r\n\r\nEnd Class\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26529/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T03:51:27Z",
        "body": "Closing out as we are not investing in this specific scenario. "
      }
    ]
  },
  {
    "number": 26527,
    "title": "\"Use auto property\" across a document/project only fixes a few instances per class",
    "created_at": "2018-05-01T05:11:42Z",
    "closed_at": "2024-11-07T23:33:34Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26527",
    "body": "**Steps to Reproduce**:\r\n\r\n``` C#\r\ninternal struct StringFormat\r\n{\r\n    private readonly object _argument1; <! -- Use auto property for \"Document\"\r\n    private readonly object _argument2;\r\n    private readonly object _argument3;\r\n    private readonly object[] _arguments;\r\n\r\n    public object Argument1\r\n    {\r\n        get { return _argument1; }\r\n    }\r\n\r\n    public object Argument2\r\n    {\r\n        get { return _argument2; }\r\n    }\r\n\r\n    public object Argument3\r\n    {\r\n        get { return _argument3; }\r\n    }\r\n\r\n    public object[] Arguments\r\n    {\r\n        get { return _arguments; }\r\n    }\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\n``` C#\r\n\r\ninternal struct StringFormat\r\n{\r\n    public object Argument1 { get; }\r\n\r\n    public object Argument2 { get; }\r\n\r\n    public object Argument3 { get; }\r\n\r\n    public object[] Arguments { get; }\r\n}\r\n\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n``` C#\r\n\r\ninternal struct StringFormat\r\n{\r\n    private readonly object _argument3;\r\n\r\n    public object Argument1 { get; }\r\n\r\n    public object Argument2 { get; }\r\n\r\n    public object Argument3\r\n    {\r\n        get { return _argument3; }\r\n    }\r\n\r\n    public object[] Arguments { get; }\r\n}\r\n\r\n```\r\n\r\nIf I remove all but Argument3 & Arguments, it won't do \"Arguments\".",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26527/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-06-14T11:49:45Z",
        "body": "Probable conflict detected by the batch fixer. Should be fixed by using a document-based custom fix all provider."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-14T19:13:16Z",
        "body": "Note: at one point i looksed into a custom fix-all provider here. But it was def non-trivial as each fix needs to make solution-wide changes (due to hte renames and whatnot that occur).  It's def possible, but would take a fair bit of work. \r\n\r\nOne possibility would be to make something similar to the batch-fixer, but just recognize hte common sorts of edits that occur next to each other with this fix-provider (i.e. removing a lot of fields in a row).  "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-14T20:21:53Z",
        "body": "Tagging @mavasani \r\n\r\nI've debugged through this, and this is one of those cases where batch fixer struggles a lot.  Effectively, the problem is that for each 'fix' we we ask the editor to describe the 'minimal' edit that happened.  And then we try to 'merge' all the edits together if possible.\r\n\r\nHowever, in this case, we run into edits we dont' think are mergable.  Specifically, when we are trying to apply the 'use autoprop for _argument3' we end up with the following change:\r\n\r\n▶ | change | {TextChange: { [573..614), \"\" }} | Microsoft.CodeAnalysis.Text.TextChange\r\n\r\nEffectively, a delete of aobut 40 characters.  however, we also see that there is another existing edit that looks like:\r\n\r\n▶ | overlappingSpans[0] | {TextChange: { [542..583), \"\" }} | Microsoft.CodeAnalysis.Text.TextChange\r\n\r\nIn this case, another delete of about 40 characters.  These deletions overlap, and so the batch fixer conservatively assumes it has no idea what is going on and bails out.\r\n\r\n--\r\n\r\nIt feels like it *could* be possible to try to support this in the case we have two edits that are *both* completely deleting, but are overlapping.  In this case, we would simply need to figure out what part of the new deletion was not already represented in the cumulative changes, and add int.  In this case, because we already have the delete of ```542...583```, we'd only need to add in the deletion of ```583...614```.\r\n\r\nThis would now accurately represent what was going on.  Doing the math might be a bit of a PITA.  But it seems possible.  Note though... i have no idea if this will actually give us the right result.  It's quite possible that due to the deletions we try to apply (see next post) that this will just lead to some sort of bogus result.\r\n\r\n@mavasani Do you have any thoughts here on what other options there might be?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-06-14T20:24:29Z",
        "body": "Note: the primary reason this happens is that the text-difference service basically is doing the best it can to figure out what actually happened.  In this file, where there is so much repetition, it has a lot of options in terms of how it represents a delete.  For exapmle, when it removes _argument2 it can represent that as:\r\n\r\n```\r\n    private readonly object _argument1{|;\r\n    private readonly object _argument2|};\r\n    private readonly object _argument3;\r\n```\r\n\r\n```\r\n    private readonly object _argument1;\r\n    {|private readonly object _argument2;|}\r\n    private readonly object _argument3;\r\n```\r\n\r\n```\r\n    private readonly object _argument1;\r\n    private {|readonly object _argument2;\r\n    private|} readonly object _argument3;\r\n```\r\n\r\n```\r\n    private readonly object _argument1;\r\n    private readonly {|object _argument2;\r\n    private readonly|} object _argument3;\r\n```\r\n\r\netc. etc. etc.\r\n\r\nAs such, i'm not actually sure if it's safe to take two overlapping deletes and to attempt to just merge them to create one large delete.  I feel like that might end up just producing some sort of corrupt result."
      },
      {
        "user": "mavasani",
        "created_at": "2022-11-29T10:16:59Z",
        "body": "Tagging @stephentoub who hit the same issue in attempting to author a new code fixer. Definitely confusing experience as only someone who knows about this limitation of batch fixer will be able to workaround by using the document based fix all provider."
      }
    ]
  },
  {
    "number": 26435,
    "title": "Add `IOperation CreateLazyOperation(BoundExpression exprOpt)` helper method",
    "created_at": "2018-04-26T22:22:10Z",
    "closed_at": "2022-02-04T22:58:29Z",
    "labels": [
      "help wanted",
      "Area-Analyzers",
      "Area-Compilers",
      "Feature - IOperation",
      "_Product-level triaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/26435",
    "body": "Add `IOperation CreateLazyOperation(BoundExpression expr)` helper method to `CSharpOperationFactory` and replace instances of `new Lazy<IOperation>(() => Create(expr))`. The helper could avoid creating a `Lazy<IOperation>` instance if `expr is null`, and would reduce the number of closure classes and delegate instances created.\r\n\r\nSame comment for `VisualBasicOperationFactory`.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/26435/comments",
    "author": "cston",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T21:22:43Z",
        "body": "@333fred do we still need this?  we're not lazy in iop anymore right?"
      },
      {
        "user": "333fred",
        "created_at": "2022-02-04T22:58:37Z",
        "body": "We are not. "
      }
    ]
  },
  {
    "number": 25556,
    "title": "Add refactoring to convert between default literal/expression and other literals",
    "created_at": "2018-03-17T15:23:56Z",
    "closed_at": "2024-10-19T20:51:43Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25556",
    "body": "*from #25456*\r\n\r\n> Generally speaking, this fixer should offer null as a simplification of default(T) when T is a reference type or nullable value type, 0m when T is decimal, 0 when T is another numeric type, false if T is bool, and '\\0' if T is char.\r\n\r\nIt would be nice to have refactorings to\r\n1. convert from a default literal / default expression to another literal (such as 0, null or false)\r\n2. to convert such literals back to a default literal, or if the user's preference of using default literals is set to false, a default expression instead",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25556/comments",
    "author": "Neme12",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2018-10-30T20:46:53Z",
        "body": "We covered this in today's design review, and felt that a conversion from `default` or `default(T)` to a literal value (where available) would be reasonable. It did not seem advantageous to offer the reverse as a refactoring, and it also wouldn't need to be an analyzer or have a code style preference associated with it."
      },
      {
        "user": "Neme12",
        "created_at": "2018-10-30T20:48:05Z",
        "body": "@sharwell Should there then be a separate refactoring from `default` or `default(T)` to a literal, *or* could that be implemented as part of #30464?"
      },
      {
        "user": "Neme12",
        "created_at": "2018-10-30T20:48:59Z",
        "body": "The obvious implementation of \"inline constant\" would cover this as well (expect for all the special cases for enums/CancellationToken)."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:51:43Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 25434,
    "title": "Invertif on VB should work when subsequent block is an elseif",
    "created_at": "2018-03-12T22:40:33Z",
    "closed_at": "2022-10-29T00:50:42Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25434",
    "body": "Currently, the VB side of invertif only works if the block following the triggered If or Elseif is an Else block, for example:\r\n\r\nthe If of an If/Else statement\r\nthe ElseIf of an If/Elseif/Else statement\r\nthe last Elseif of an If/ElseifBlocks/Else statement\r\nWould like to expand this to work when the subsequent block is an Elseif, for excample:\r\n\r\nthe If of an If/Elseif/Else statement\r\nany ElseIf block that is followed by either Elseif or Else",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25434/comments",
    "author": "chborl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-29T00:50:42Z",
        "body": "Closing out as speculative. "
      }
    ]
  },
  {
    "number": 25140,
    "title": "[Refactoring] Allow Extract Interface to remain in same file",
    "created_at": "2018-02-28T23:51:01Z",
    "closed_at": "2019-01-17T21:45:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/25140",
    "body": "Right now, if you \"Extract Interface\" we automatically move it in its own file. Sometimes, developers want to extract the interface in the file they are in (immediately above the class they extracted it from).",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/25140/comments",
    "author": "kuhlenh",
    "comments": [
      {
        "user": "jinujoseph",
        "created_at": "2019-01-14T09:29:57Z",
        "body": "@ryzngard  good to close this ?"
      },
      {
        "user": "ryzngard",
        "created_at": "2019-01-17T21:45:07Z",
        "body": "Yes! This will be in the next update "
      }
    ]
  },
  {
    "number": 24880,
    "title": "Offer variable name suggestions in a Rename session",
    "created_at": "2018-02-15T23:22:28Z",
    "closed_at": "2024-10-25T04:04:34Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/24880",
    "body": "We currently offer \"smart\" variable name suggestions while you are typing, but we don't do it when you are renaming...",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/24880/comments",
    "author": "kuhlenh",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:04:34Z",
        "body": "This is now handled by copilot."
      }
    ]
  },
  {
    "number": 24455,
    "title": "Allow Decompilation of arbitrary DLLs",
    "created_at": "2018-01-25T19:38:08Z",
    "closed_at": "2024-10-19T19:26:10Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/24455",
    "body": "With our integration of ILSpy, we should look at allowing opening of an arbitrary dll so the types and methods can be browsed. I ran into an issue with roslyn where I did a local nuget pack and depended on the binaries from another project, but missed deleting the nuget cache so my downstream project had the wrong version at compile time. I used the ILSpy UI to figure out what was going wrong, but we should have integrate it with the Object Browser in VS so it can all be done in program.\r\n\r\n/cc @sharwell.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/24455/comments",
    "author": "333fred",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T19:26:10Z",
        "body": "Unlikely to invest int his area without significant user feedback."
      }
    ]
  },
  {
    "number": 24274,
    "title": "Need fine-granular Cancellation in FindSymbols.DependentTypeFinder",
    "created_at": "2018-01-17T02:03:23Z",
    "closed_at": "2020-03-06T10:55:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Area-Performance"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/24274",
    "body": "**Version Used**: \r\naa51be5b9703a8d4acbcd4f444678d5e5f99ab2a\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the IDE with first-chance exceptions enabled\r\n\r\nI see a whole lot of TaskCanceledExceptions originating in FindSymbols. It seems that this codepath doesn't proactively check the cancellationToken, which results in basically still doing the bulk of the work as well as throwing hundreds of exceptions along the way.\r\n\r\nStack:\r\n\r\n```\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess Line 176\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification Line 146\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.ConfiguredTaskAwaitable<System.__Canon>.ConfiguredTaskAwaiter.GetResult Line 530\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 75\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 61\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSyntaxTreeIndexAsync Line 173\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 625\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync.AnonymousMethod__1 Line 565\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.CombineSelectors.AnonymousMethod__0 Line 66\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.WhereSelectEnumerableIterator<Microsoft.CodeAnalysis.DocumentId, System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.MoveNext Line 399\tC#\tSymbols loaded.\r\n \tSystem.Linq.Buffer<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.Buffer Line 2672\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.ToArray<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>> Line 944\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 565\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 281\tC#\tSymbols loaded.\r\n>\tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesAsync Line 211\tC#\tSymbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 306\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 595\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.WhenAllPromise<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.Invoke Line 6435\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3633\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 639\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 69\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 101\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.CreateIndexAsync Line 186\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Document.GetSyntaxRootAsync Line 218\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsyncCore Line 718\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRootAsync Line 112\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Host.RecoverableWeakValueSource<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.GetValueAsync Line 110\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.ExecuteWorkItemHelper Line 681\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem Line 715\tC#\tSymbols loaded.\r\n \tSystem.Threading.ThreadPoolWorkQueue.Dispatch Line 820\tC#\tSymbols loaded.\r\n \tSystem.Threading._ThreadPoolWaitCallback.PerformWaitCallback Line 1161\tC#\tSymbols loaded.\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/24274/comments",
    "author": "KirillOsenkov",
    "comments": [
      {
        "user": "KirillOsenkov",
        "created_at": "2018-01-17T02:05:43Z",
        "body": "@CyrusNajmabadi I'm imagining one should strategically place a few manual `if (cancellationToken.IsCancellationRequested) return;` calls to cut off this stack early enough. Otherwise we still descend deep into this stack for each document.\r\n\r\nI didn't measure but I suspect there's non-trivial performance and battery consumption penalty arising from an inefficient lack of cancellation here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-01-17T07:05:21Z",
        "body": "> if (cancellationToken.IsCancellationRequested) return; calls to cut off this stack early enough.\r\n\r\nWhy not just use cancellationToken.ThrowIfCancellationRequested? "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-01-17T07:07:19Z",
        "body": "There are a bunch of loops in DependentTypeFinder that should probably get cancellation token checks.  The methods themselves are fairly heavyweight and should also get entrypoint cancellation checks.  Seems trivial to do. If you make the PR, i'll review it!"
      },
      {
        "user": "sharwell",
        "created_at": "2018-01-29T13:09:52Z",
        "body": "This is related to #19652, which I plan to revive.\r\n\r\n@KirillOsenkov To choose the best approach for resolving this, I will need a performance trace (PerfView) that captures a case where many exceptions are thrown."
      }
    ]
  },
  {
    "number": 24044,
    "title": "[Completion] Easy to accidentally commit wrong completion value for extension methods",
    "created_at": "2018-01-04T13:21:16Z",
    "closed_at": "2024-10-18T22:06:41Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/24044",
    "body": "Sometimes I forget to type the `static` modifier when I'm writing an extension method, and only realize when the `this` keyword is missing from completion after the open paren, and the completion list commits something else that I didn't want.\r\n\r\nIt would be nice if the `this ` were in the list and committing it added the `static` modifier.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/24044/comments",
    "author": "mkrueger",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T22:06:41Z",
        "body": "Unlikely to change things given lack of feedback."
      }
    ]
  },
  {
    "number": 23913,
    "title": "Document's SemanticModel.GetSymbolInfo always returns a null symbol",
    "created_at": "2017-12-22T09:18:42Z",
    "closed_at": "2023-02-13T02:01:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Need More Info",
      "Investigation Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23913",
    "body": "**Version Used**: \r\nVisual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a workspace\r\n2. Open an existing solution via the workspace\r\n3. Open a project from the solution\r\n4. Open a document from the solution\r\n5. Get the root and SemanticModel from the document\r\n6. Do a foreach on the root.DescendantNodes()\r\n7. Check if any symbols for the nodes are null\r\n\r\n**Expected Behavior**:\r\nMost, if not all, symbols are not null.\r\n\r\n**Actual Behavior**:\r\nAll symbols are null.\r\n\r\n**Minimal working reproduction:**\r\n```c#\r\nusing System;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\n\r\nnamespace CodeAnalysisApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var workspace = MSBuildWorkspace.Create();\r\n            var solution = workspace.OpenSolutionAsync(\"../../example/example.sln\").Result;\r\n\r\n            foreach (Project solutionProject in solution.Projects)\r\n            {\r\n                foreach (Document doc in solutionProject.Documents)\r\n                {\r\n                    var semanticModel = doc.GetSemanticModelAsync().Result;\r\n                    var root = doc.GetSyntaxRootAsync().Result;\r\n                    var nodes = root.DescendantNodes();\r\n                    foreach (SyntaxNode node in nodes)\r\n                    {\r\n                        var symbol = semanticModel.GetSymbolInfo(node);\r\n                        if (symbol.Symbol != null)\r\n                        {\r\n                            Console.WriteLine(\"NOT NULL ON: \" + node);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Console.WriteLine(\"End\");\r\n            Console.ReadKey(true);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**example.sln** has only one file, Program.cs:\r\n```c#\r\nusing System.Reflection;\r\nusing log4net;\r\n\r\nnamespace example\r\n{\r\n    class Program\r\n    {\r\n        private static readonly ILog logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\r\n        static void Main(string[] args)\r\n        {\r\n            logger.Error(\"Hello!\");\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23913/comments",
    "author": "wallnutkraken",
    "comments": [
      {
        "user": "AmadeusW",
        "created_at": "2018-05-31T15:54:08Z",
        "body": "Use `GetDeclaredSymbol` instead of `GetSymbolInfo`. I'm not sure why the latter one doesn't work, though."
      },
      {
        "user": "gafter",
        "created_at": "2018-05-31T21:16:49Z",
        "body": "`GetDeclaredSymbol` is for a declaration (that introduces a name), `GetSymbolInfo` is for a use (of a name that was declared elsewhere), and never the twain shall meet."
      },
      {
        "user": "CodeThreader",
        "created_at": "2020-08-13T00:42:04Z",
        "body": "I have the same problem with both of them. They work fine for while, if an exception is thrown, they only return null. Annoying. "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-02T23:28:03Z",
        "body": "> They work fine for while, if an exception is thrown, they only return null.\r\n\r\nDo you have a repro for this?"
      },
      {
        "user": "ghost",
        "created_at": "2023-02-13T02:01:49Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 23753,
    "title": "Don't get offered to deconstruct tuples if there's a clash of names",
    "created_at": "2017-12-13T02:57:34Z",
    "closed_at": "2017-12-26T18:00:01Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Resolution-Not Reproducible"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23753",
    "body": "``` C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            (DateTime time, string path) = GetInput();\r\n            (DateTime time, string path) output = GetOutput();\r\n        }\r\n\r\n        private static (DateTime time, string path) GetInput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n\r\n        private static (DateTime time, string path) GetOutput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n    }\r\n```\r\n\r\n**Expected:** Get offered to deconstruct `(DateTime time, string path) output = GetOutput();`\r\n**Actual:** Not offered to deconstruct\r\n\r\nEither we still offer but show there's a conflict or pick a different name. This confused me because the declarations were not next to each other in my case.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23753/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2017-12-26T06:47:22Z",
        "body": "I wan't able to repro. Maybe already fixed?"
      }
    ]
  },
  {
    "number": 23723,
    "title": "Moving class with syntax errors to another file",
    "created_at": "2017-12-11T17:04:25Z",
    "closed_at": "2024-10-19T19:27:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23723",
    "body": "**Version Used**: 15.6.0 Preview 1\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        private class Nested()\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        #region Hello\r\n        private void M() { }\r\n        #endregion\r\n    }\r\n}\r\n```\r\nInvoke _Move type to Program.Nested.cs_ on the `class Nested()` line.\r\n\r\n**Actual Behavior**:\r\nProgram.cs:\r\n```C#\r\nnamespace ConsoleApp1\r\n{\r\n    partial class Program\r\n    {\r\n()\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        #region Hello\r\n        private void M() { }\r\n        #endregion\r\n    }\r\n}\r\n```\r\nProgram.Nested.cs:\r\n```C#\r\nnamespace ConsoleApp1\r\n{\r\n    partial class Program\r\n    {\r\n        private class Nested        }\r\n        #endregion\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nI understand this is syntactically broken scenario, but I think the result is perhaps unnecessarily bad. Taking the whole\r\n```C#\r\n    class Nested()\r\n    {\r\n        throw new System.NotImplementedException();\r\n    }\r\n```\r\nand putting it into a new file was the expected though I agree naive behavior in this case. Having only\r\n```C#\r\npartial class Program\r\n{\r\n    class Nested\r\n}\r\n```\r\nin the nested file would be also fine, but the extra `}` and random `#endregion` seems to be coming out of nowhere - done this in a larger class, should I be worrying it got moved from somewhere it shouldn't have?\r\n\r\n**Context**:\r\nI wanted to move a method to a new file the same way I can move nested classes, so I just changed `void` to `class` to get the refactoring. Maybe the _Move to file_ could work on members too?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23723/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-11T21:31:05Z",
        "body": "So:\r\n\r\n```c#\r\n        private class Nested()\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n``` \r\n\r\nIs one of those \"very broken\" syntactic cases.  Like \"the parser goes off the rails\" syntactic cases :)\r\n\r\nWe could attempt to make the parser a it better here (For example, seeing () and tryign to skip it better).  But that would only be a spot fix.  If you had something like \"private class Nested(int i)\" then it would be equally bad.\r\n\r\nSimilarly, we could try to replace the \"class\" with \"void\" and treat this like a method.  But that would be hard with lookahead (given that generics might be involved).\r\n\r\nNow, once you have a *really* busted syntax tree, all bets are off with how features are going to behave.  In a case like thsi, i'd probably best prefer that move-type not even be offered as it will screw things up majorly.  The problem is trying to figure out how to suppress this feature here.  We don't want to suppress move-type just because a tiny, non-problematic syntax error (like a missing semicolon deep in some code in the class).  but we do want to suppress when the type is totally broken.  The issue is knowing which is which.\r\n\r\nPerhaps a good check would be \"does the class have missing { and } tokens\".  If so, then don't offer the fix."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-11T21:31:18Z",
        "body": "PRs welcome.  I could walk someone through how to do this."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-11T21:34:21Z",
        "body": "Note: because we may eventually do primary constructors, we could *consider* having the parser try to parse out a parameter list after it's type arguent list.  That parameter list could then be attached as a skipped node to the name or ```>``` token.  We have precedence for that type of strategy.  For example:\r\n\r\nParseMethodDeclaration has the following in it:\r\n\r\n```c#\r\n                else if (this.CurrentToken.Kind == SyntaxKind.ColonToken)\r\n                {\r\n                    // Use else if, rather than if, because if we see both a constructor initializer and a constraint clause, we're too lost to recover.\r\n                    var colonToken = this.CurrentToken;\r\n\r\n                    ConstructorInitializerSyntax initializer = this.ParseConstructorInitializer();\r\n                    initializer = this.AddErrorToFirstToken(initializer, ErrorCode.ERR_UnexpectedToken, colonToken.Text);\r\n                    paramList = AddTrailingSkippedSyntax(paramList, initializer);\r\n\r\n                    // CONSIDER: Parsing an invalid constructor initializer could, conceivably, get us way\r\n                    // off track.  If this becomes a problem, an alternative approach would be to generalize\r\n                    // EatTokenWithPrejudice in such a way that we can just skip everything until we recognize\r\n                    // our context again (perhaps an open brace).\r\n                }\r\n```\r\n\r\nThis is to deal with someone accidentally writing:\r\n\r\n```c#\r\npublic void MyClass(int i, int j) : this(i) { }\r\n```\r\n\r\nHere the person meant to write a constructor, but had a return type accidenty there.  We don't want the \": this(i)\" to throw everything off so we look for it, parse it, and just attach it as bogus syntax in the tree.  I think doing hte same for a parameter list on a class/struct declaration would be feasible and would help here."
      },
      {
        "user": "miloush",
        "created_at": "2017-12-11T22:54:55Z",
        "body": "Yes, I found this worth mentioning because I know there was a working prototype where parameters after type were valid syntax. Not sure how interesting is to fix this particular case, but it's a bit unfortunate that the parser gets _that_ off when there even isn't anything unbalanced."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-11T23:06:48Z",
        "body": ">  Not sure how interesting is to fix this particular case, but it's a bit unfortunate that the parser gets that off when there even isn't anything unbalanced.\r\n\r\nError recovery is *exceptionally* difficult.  For all the parser knows, these parens could have been *anything*.  Maybe they're the start of a lambda.  Maybe they're a parameter list to a method.  Maybe it's a tuple.  When it seems *extremely* strange stuff in a *very unexpected* place in the tree, it's *really hard* to tell what to do :)   this is truly a 'panic mode' scenario where recovery (especially without keywords) is super hard.  it's always possible to put in one-off fixes.  But the general problem is actually 'unsolved' as far as the theory and literature are concerned.   There are further techniques and approaches we can take (i did a lot of research in this space over the last couple of decades).  However:\r\n\r\n1. They're complex.\r\n2. They can dramatically impact the cost of parsing (both in terms of time and memory).\r\n3. The vast majority of syntax errors don't benefit from them.\r\n\r\nThe general problem of \"people take chunks of code that are legal in one context (liek expressions/statements) and place them into random other locations (like after a declaration name) don't tend to appear that often.  and, if they do, they're fairly ephemeral.  I.e. the user will edit things to fix it up.  It's usually *very* unlikely that someone both does this, and then performs high level refactorings.  So investing in this space isn't very bang/bucky."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T19:27:21Z",
        "body": "Closing out for lack of feedback and due to the complexity involved."
      }
    ]
  },
  {
    "number": 23251,
    "title": "Converting setter to block body leaves set keyword on getter line",
    "created_at": "2017-11-17T16:31:05Z",
    "closed_at": "2024-12-09T23:07:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23251",
    "body": "VS 15.5p4, apologies if there's an existing issue I failed to locate.\r\n\r\nI frequently have code like this:\r\n\r\n```cs\r\nprivate bool someProperty;\r\npublic bool SomeProperty { get => someProperty; set => Set(ref someProperty, value); }\r\n```\r\n\r\nAnd need to add code to the setter, so I use the block body code action. This results in:\r\n\r\n```cs\r\nprivate bool someProperty;\r\npublic bool SomeProperty\r\n{\r\n    get => someProperty; set\r\n    {\r\n        Set(ref someProperty, value);\r\n    }\r\n}\r\n```\r\n\r\nI would expect `set` to be on its own line.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23251/comments",
    "author": "jnm2",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T22:05:56Z",
        "body": "we'd take a small community fix on this."
      }
    ]
  },
  {
    "number": 23019,
    "title": "EV Error BC36946 using NameOf with Async Function",
    "created_at": "2017-11-05T21:56:33Z",
    "closed_at": "2020-07-08T13:28:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Language-VB",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23019",
    "body": "**Version Used**: \r\nVB 15.4\r\n**Steps to Reproduce**:\r\n1. copy program fragment below in VB code window\r\n```\r\n       Private Async Function B_Async(_document As Document, _CancellationToken As CancellationToken) As Task(Of Document)\r\n            Debug.WriteLine($\"#Codefix Entering {NameOf(B_Async)}\")\r\n            Return Nothing\r\n        End Function\r\n```\r\n**Expected Behavior**:\r\nNo Errors\r\n**Actual Behavior**:\r\nError BC36946 The implicit return variable of an Iterator or Async method cannot be accessed.\t\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23019/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "Kesmy",
        "created_at": "2018-03-09T01:07:26Z",
        "body": "@paul1956 In case you (or someone else finding this issue) still need/want a workaround, you can use `NameOf(Me.B_Async)`, which seems obvious but eluded me for a while."
      }
    ]
  },
  {
    "number": 22597,
    "title": "\"Extract method\" with a generic local function creates invalid code",
    "created_at": "2017-10-09T10:17:01Z",
    "closed_at": "2025-01-13T14:40:31Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature - Local Functions",
      "Feature - Extract Method"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22597",
    "body": "**Version Used**: VS 15.3.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nprivate void test()\r\n{\r\n    void foo<T> (T bar) => Console.WriteLine(bar);\r\n    foo(3);\r\n}\r\n```\r\nRun \"Extract Method\" on the entire contents of `test`\r\n\r\n**Expected Behavior**:\r\n```cs\r\nprivate void test()\r\n{\r\n    NewMethod();\r\n}\r\n\r\nprivate static void NewMethod()\r\n{\r\n    void foo<T>(T bar) => Console.WriteLine(bar);\r\n    foo(3);\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```cs\r\nprivate void test()\r\n{\r\n    NewMethod<T>();\r\n}\r\n\r\nprivate static void NewMethod<T>()\r\n{\r\n    void foo<T>(T bar) => Console.WriteLine(bar);\r\n    foo(3);\r\n}\r\n```\r\n`NewMethod` gets a generic parameter that isn't available at the call site (error) and generates a warning for the `T` on `foo` within `NewMethod` due to having the same name as `NewMethod`'s `T`.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22597/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2017-10-10T06:53:47Z",
        "body": "FYI @agocke "
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:29:13Z",
        "body": "We would take a targeted community fix here."
      }
    ]
  },
  {
    "number": 22073,
    "title": "Generate Overrides should not be available on a static class",
    "created_at": "2017-09-12T20:03:37Z",
    "closed_at": "2017-09-19T23:01:08Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/22073",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/22073/comments",
    "author": "DustinCampbell",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2017-09-19T23:01:08Z",
        "body": "This doesn't repro for me. Feel free to reopen if you can provide repro steps."
      }
    ]
  },
  {
    "number": 21846,
    "title": "Unify handling of expression contexts where `this` is allowed",
    "created_at": "2017-08-31T13:41:52Z",
    "closed_at": "2024-10-19T20:38:48Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Area-Performance"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21846",
    "body": "**Version Used**: Latest master branch with #21528 merged.\r\n\r\n### Steps to Reproduce\r\n\r\n```csharp\r\nclass Program\r\n{\r\n  private readonly object o = |;\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe `this` keyword is not recommended.\r\n\r\n### Actual Behavior\r\n\r\nThe `this` keyword is included in the completion list, even though use of it will result in CS0027.\r\n\r\n> Keyword 'this' is not available in the current context\r\n\r\n### Additional information\r\n\r\nBoth `ThisKeywordRecommender` and `CSharpQualifyMemberAccessDiagnosticAnalyzer` need to know which expression contexts may use the `this` keyword. Currently the former fails to detect the above case properly, while the latter uses an inefficient LINQ construct. To resolve this issue, first identify an efficient and accurate means to handle the required cases, and then update both features to use it.\r\n\r\nTests for IDE0009 *should* already cover these cases, but the tests for `ThisKeywordRecommender` will likely need to be updated.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21846/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Dunkhan",
        "created_at": "2018-08-21T14:12:26Z",
        "body": "Another case\r\n\r\n```\r\nvar a = 1;\r\nvar b = new List<object> { a };//This line generates IDE0009\r\n```\r\n\r\nusing completion results in compiler error\r\n\r\nalso \r\n\r\n`var c = new List<object> { null };//This line generates IDE0009`\r\n\r\ncompletion has no effect"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T20:38:48Z",
        "body": "closing out due to lack of feedback.  "
      }
    ]
  },
  {
    "number": 21621,
    "title": "Suggest names for VB variables.",
    "created_at": "2017-08-18T21:25:16Z",
    "closed_at": "2024-10-18T21:26:40Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21621",
    "body": "We didn't do this since in the forward typing case there's no type with which to suggest a name off of.  however, there is still the case where i go to an existing variable and want to rename it.  In that case, i would like the suggestion.  Here we will know the type, and we can do something better.\r\n\r\nTagging @rchande ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21621/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "Nukepayload2",
        "created_at": "2017-08-23T01:02:31Z",
        "body": "Suggest a type name is more helpful.\r\nFor example:\r\n```vb\r\nDim timeSpan As ' suggest TimeSpan\r\nDim sb As New ' suggest StringBuilder\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:26:40Z",
        "body": "Unlikely to change vb behavior now."
      }
    ]
  },
  {
    "number": 21548,
    "title": "VS should offer to replace uninitialized `var` with inferred type if that type is initialized a few lines later",
    "created_at": "2017-08-16T08:21:38Z",
    "closed_at": "2024-11-06T00:52:44Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21548",
    "body": "**Scenario**\r\nAn API call returns a somewhat convoluted type. Because I use `var` to have it inferred, and never much interact with the underlying type, I don't care nor need to what the type is. For example:\r\n\r\n```csharp\r\n// it doesn't really matter to me what type `rows` is…\r\nvar rows = someORM.Sql(\"SELECT foo FROM bar;\").Execute().Rows;\r\n\r\n// …as long as it implements IEnumerable, anyway\r\nforeach (var row in rows)\r\n{\r\n\r\n}\r\n```\r\n\r\nHowever, now I want to wrap my code such that explicit typing is required — for example, in a `try/catch` block. I cannot use `var` without initializing, so I have to specify the above type.\r\n\r\n```csharp\r\n// this won't compile because of CS0818 Implicitly-typed variables must be initialized\r\nvar rows;\r\n\r\ntry\r\n{\r\n    rows = someORM.Sql(\"SELECT foo FROM bar;\").Execute().Rows;\r\n}\r\ncatch { }\r\n```\r\n\r\n**Minor improvement**\r\nFor this scenario, it would be helpful for VS to have a lightbulb on the first line:\r\n\r\n```csharp\r\n// it doesn't really matter to me what type `rows` is…\r\nvar rows = someORM.Sql(\"SELECT foo FROM bar;\").Execute().Rows;\r\n```\r\n\r\n…which offers to transform it to something like this:\r\n\r\n```csharp\r\nIQueryable<Row> rows = someORM.Sql(\"SELECT foo FROM bar;\").Execute().Rows;\r\n```\r\n\r\nSo that, in the next step, I just have to move `IQueryable<Row> rows` up a few lines and replace the beginning of this line with just `rows`.\r\n\r\n**Major improvement**\r\nIt would be even better if VS *recognized* this particular scenario. That is, given the non-compiling code from above:\r\n\r\n```csharp\r\n// this won't compile because of CS0818 Implicitly-typed variables must be initialized\r\nvar rows;\r\n\r\ntry\r\n{\r\n    rows = someORM.Sql(\"SELECT foo FROM bar;\").Execute().Rows;\r\n}\r\ncatch { }\r\n```\r\n\r\n, it would be wonderful if VS could offer to substitute `var` with the actual inferred type for the first usage of `rows`.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21548/comments",
    "author": "chucker",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-22T19:24:22Z",
        "body": "We would take a targeted community pr here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-06T00:52:44Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 21116,
    "title": "Fix All for \"Insert Digit Separators\" and \"Change base for numeric literals\" would be nice",
    "created_at": "2017-07-25T17:30:14Z",
    "closed_at": "2024-10-18T21:24:39Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Depth Testing"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21116",
    "body": "**Version Used**: 26717.1.d15rel\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21116/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-07-25T22:08:43Z",
        "body": "The issue with these right now is that they are refactorings, not analyzers, and so we don't have the concept of Fix All."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:24:39Z",
        "body": "Closing out due to lack of feedbakc."
      }
    ]
  },
  {
    "number": 21112,
    "title": "Add Parameter to Constructor doesn't generate unique names w.r.t. locals defined in the constructor",
    "created_at": "2017-07-25T17:21:12Z",
    "closed_at": "2024-10-18T21:25:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Depth Testing"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21112",
    "body": "**Version Used**: 26717.1.d15rel\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Paste C#:\r\n\r\n```C#\r\n    public C()\r\n    {\r\n        int x = 7;\r\n        Console.WriteLine(x);\r\n    }\r\n\r\n    void M()\r\n    {\r\n        int x = 4;\r\n        new $$C(x);\r\n    }\r\n```\r\n\r\n2. Invoke \"Add Parameter to Constructor\" at the $$\r\n\r\n**Expected Behavior**: A parameter name other than `x` is chosen, avoiding an error in the updated code\r\n\r\n**Actual Behavior**: The new parameter is named `x`, introducing an error in the updated code\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21112/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2017-07-25T17:22:03Z",
        "body": "This will probably never ever be a real problem."
      },
      {
        "user": "miloush",
        "created_at": "2017-07-30T22:02:33Z",
        "body": "I would argue it is more likely you actually want the parameter to be named `x`, with the intention to use it inside the constructor rather than declaring it there."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:25:13Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 21100,
    "title": "[suggestion] Convert if to switch should be available for else if, etc",
    "created_at": "2017-07-25T15:14:07Z",
    "closed_at": "2022-10-28T23:14:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Depth Testing"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21100",
    "body": "Paste the following into a method in C#.\r\n```\r\n            if (args.Length == 0)\r\n            {\r\n\r\n            }\r\n            else if (args.Length == 1)\r\n            {\r\n\r\n            }\r\n```\r\n\r\n\"Convert if to switch\" is only available on \"if\", but it might make sense to offer it on \"else\" as well.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21100/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T23:14:45Z",
        "body": "Closing out as not getting any feedback about issues here.  We can always revise the spans we show based on information from users.  We don't need tracking issues to just indicate tehre may be more places we could consider."
      }
    ]
  },
  {
    "number": 21081,
    "title": "Generate Overrides allows member ordering in the UI but doesn't obey the chosen ordering",
    "created_at": "2017-07-24T22:29:06Z",
    "closed_at": "2024-10-18T21:23:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Depth Testing"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21081",
    "body": "**Version Used**: 26717.1.d15rel\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Paste C#\r\n\r\n```C#\r\n    public class B\r\n    {\r\n        internal virtual void M1() { }\r\n    }\r\n\r\n    public class D : B\r\n    {\r\n\r\n    }\r\n```\r\n\r\n2. Ctrl+. on `D`, and choose \"Generate overrides...\"\r\n3. Pick M1 and GetHashCode, but move GetHashCode below M1\r\n\r\n**Expected Behavior**: GetHashCode appears below M1 (or reordering is not possible)\r\n\r\n**Actual Behavior**: GetHashCode appears above M1\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21081/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:23:48Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 21055,
    "title": "Out declaration missing type in autocompletion list",
    "created_at": "2017-07-23T21:49:16Z",
    "closed_at": "2023-02-08T19:37:30Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/21055",
    "body": "**Version Used**: 2.3.0.61907\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        if (TryParse(\"\", out|\r\n\r\n        Program p = null;\r\n    }\r\n\r\n    static bool TryParse(string s, out Program p) { }\r\n}\r\n```\r\n(automatic brace insertion disabled)\r\n\r\nTry type `if (TryParse(\"\", out Program`...\r\n\r\n**Expected Behavior**: `Program` be in the autocompletion list. (I would even welcome if it was preselected.)\r\n\r\n**Actual Behavior**: It's not there at all and the list is in completion mode, so you end up with `if (TryParse(\"\", out InvalidProgramException ` without much thinking.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/21055/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-07-24T17:23:46Z",
        "body": "This is a parsing fault tolerance issue, and doesn't repro without the variable declaration on the next line, which is being consumed as part of the `out var`.\r\n\r\nAh declaration expressions and their ambiguities in partially typed code.\r\n\r\n@CyrusNajmabadi any ideas here?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-07-24T17:31:06Z",
        "body": "Even if this code gets parsed as an out-declaration-expression, we should still offer proper symbol completion here.  It looks like we handle the out-argument case, but didn't update to handle the out-declaration-expression case.  It should be cheap to add support for that case.\r\n\r\nNote to whoever implements this: we also need to support this for all predefined types (int, string, etc.)."
      },
      {
        "user": "miloush",
        "created_at": "2017-07-25T13:21:23Z",
        "body": "Note that this seems to work for predefined types."
      },
      {
        "user": "Neme12",
        "created_at": "2018-03-24T22:24:06Z",
        "body": "Note that this is failing for a very interesting reason. Completion inside a declaration actually works. In this example:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        if (TryParse(\"\", out $$ Program program)) ;\r\n    }\r\n\r\n    static bool TryParse(string s, out Program p) { }\r\n}\r\n```\r\nYou do actually get types in the completion list. In fact, you get every type except for Program. The reason is that as you partially type the type:\r\n`out P Program program`\r\nThis is now a declaration expression where `P` is the type and `Program` is the declared variable name. The type \"Program\" in the completion list would now be replaced by the variable *BUT* the variable is then discarded because it is considered to be undeclared at this point. You can see the same sort of issue here:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        TryParse(\"\", out $$);\r\n\r\n        Program Program;\r\n    }\r\n\r\n    static bool TryParse(string s, out Program p) { }\r\n}\r\n```\r\n`Program` isn't offered because the type is replaced by the variable, which is discarded because it's declared at a later point.\r\n"
      },
      {
        "user": "Neme12",
        "created_at": "2018-03-24T22:40:29Z",
        "body": "I don't know what to do here... The compiler doesn't show Program as a class at all in LookupSymbols."
      }
    ]
  },
  {
    "number": 20989,
    "title": "Convert If to Select produces uncompilable VB code.",
    "created_at": "2017-07-19T22:19:18Z",
    "closed_at": "2017-07-27T19:56:49Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20989",
    "body": "Starting with this code:\r\n\r\n```vb\r\nClass C\r\n    Sub Main()\r\n        Dim count As Integer = 0\r\n        Dim message As String\r\n        If count = 0 Then\r\n            message = \"There are no items.\"\r\n        ElseIf count = 1 Then\r\n            message = \"There is 1 item.\"\r\n        Else\r\n            message = \"There are \" & count & \" items.\"\r\n        End If\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\nInvoke \"convert if to select\" on the if keyword.  Actual result:\r\n\r\n```vb\r\nClass C\r\n    Sub Main()\r\n        Dim count As Integer = 0\r\n        Dim message As String\r\n\r\n        Select Case count\r\n            Case 0             message = \"There are no items.\"\r\n            Case 1             message = \"There is 1 item.\"\r\n            Case Else\r\n                message = \"There are \" & count & \" items.\"\r\n        End Select\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\nThis is not actually compilable.  \"message = ...\" cannot be on the same line as the case clauses.  It needs to be:\r\n\r\n```vb\r\nClass C\r\n    Sub Main()\r\n        Dim count As Integer = 0\r\n        Dim message As String\r\n\r\n        Select Case count\r\n            Case 0\r\n                message = \"There are no items.\"\r\n            Case 1\r\n                message = \"There is 1 item.\"\r\n            Case Else\r\n                message = \"There are \" & count & \" items.\"\r\n        End Select\r\n    End Sub\r\nEnd Class\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20989/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-07-20T20:21:57Z",
        "body": "Tagging @alrz "
      }
    ]
  },
  {
    "number": 20941,
    "title": "Find all references on literals should respect partial selection",
    "created_at": "2017-07-18T18:31:21Z",
    "closed_at": "2020-03-16T05:58:05Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Resolution-By Design",
      "Resolution-External",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20941",
    "body": "**Version Used**: 15.3.0 Preview 4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use a multi-word string literal in multiple places.\r\n2. Search for part of the literal (say one word)\r\n\r\n**Expected Behavior**: References are shown for the part of the literal selected. This allows me to analyze my code better and find more opportunities for refactoring.\r\n\r\n**Actual Behavior**: The references shown are for the entire string regardless of the selection.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20941/comments",
    "author": "Mohit-Chakraborty",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-07-18T19:05:49Z",
        "body": "Non trivial to support.  If anyone wants to take a stab at this, feel free."
      },
      {
        "user": "Pilchie",
        "created_at": "2017-07-19T20:07:36Z",
        "body": "As mentioned elsewhere, Find in Files is a pretty good way of achieving this - this feature is really oriented around the language notion of a literal."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-16T05:58:05Z",
        "body": "Closing out.  VS already supports a great way for finding `part of the literal`.  Just use the find-in-files feature."
      }
    ]
  },
  {
    "number": 20884,
    "title": "Calling Formatter.Format with invalid arguments shouldn't throw AggregateException",
    "created_at": "2017-07-14T16:00:54Z",
    "closed_at": "2017-09-08T20:33:43Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20884",
    "body": "**Version Used**: Microsoft.CodeAnalysis.CSharp 2.2.0\r\n\r\n**Steps to Reproduce**: Call `Microsoft.CodeAnalysis.Formatting.Formatter.Format(node, null);`.\r\n\r\n**Expected Behavior**: The call throws `ArgumentNullException`.\r\n\r\n**Actual Behavior**: The call throws `AggregateException`, which contains `ArgumentNullException` as `InnerException`.\r\n\r\nThis might not seem like a significant issue, since no information is lost and since `ArgumentNullException` should never be caught. But it does make diagnosing the issue harder and other exceptions likely behave the same.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20884/comments",
    "author": "svick",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-07-17T16:51:51Z",
        "body": "Assigning to myself to track getting #20885 merged."
      }
    ]
  },
  {
    "number": 20849,
    "title": "Expression-bodied members code style does not consider destructors",
    "created_at": "2017-07-13T02:54:15Z",
    "closed_at": "2024-10-19T19:30:37Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Language-C#"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20849",
    "body": "Currently the code style rules for expression-bodied members do not consider the availability of this feature for destructors. Destructors could be treated in a manner similar to constructors for when and how to apply this functionality.\r\n\r\n⚠️ Due to the exceedingly rare use and general discouragement from using destructors in new C# code, if this feature is implemented then particular care should be taken to ensure it does not negatively influence performance of the analyzer in code that does not contain destructors.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20849/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Neme12",
        "created_at": "2018-02-12T21:30:16Z",
        "body": "But it probably shouldn't reuse the same message as constructors, should it?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T19:30:37Z",
        "body": "Closing out for lack of feedback.  "
      }
    ]
  },
  {
    "number": 20361,
    "title": "A Fix All should be available for CS8059 (expression-bodied accessors not available)",
    "created_at": "2017-06-21T17:26:50Z",
    "closed_at": "2017-07-13T00:32:35Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20361",
    "body": "**Version Used**: 15.3 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Set the language version to C# 6\r\n\r\n1. Define two properties with expression-bodied accessors (not supported by C# 6)\r\n\r\n    ```csharp\r\n    public int X { get => 0; }\r\n    public int Y { get => 0; }\r\n    ```\r\n\r\n1. Use the light bulb on either line to convert the property to a full property or an expression-bodied property (both supported by C# 6)\r\n\r\n**Expected Behavior**:\r\n\r\nThe light bulb to convert to full or expression-bodied property should include Fix All options.\r\n\r\n**Actual Behavior**:\r\n\r\nNo fix all is available, so each property must be converted separately.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20361/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-06-22T02:31:08Z",
        "body": "Interesting - this should be relatively easy to support, just adding the new diagnostic id."
      },
      {
        "user": "sharwell",
        "created_at": "2017-06-22T13:54:36Z",
        "body": "@Pilchie This diagnostic ID is used for all cases of language version mismatch, so it will be necessary to be more specific somehow so we don't e.g. mix this up with #20362."
      }
    ]
  },
  {
    "number": 20145,
    "title": "Smart variable naming suggestion mode ineffective inside snippets",
    "created_at": "2017-06-09T20:13:07Z",
    "closed_at": "2024-10-19T19:28:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20145",
    "body": "**Version Used**: 15.3.26606.0\r\n\r\n**Steps to Reproduce**:\r\n1. Use `propfull` snippet to declare a property of type e.g. `ConsoleColor` and backing field named `_bestColor`.\r\n2. Hit <key>Tab</key> key to enter the name of the property.\r\n\r\n**Expected Behavior**:\r\n`_bestColor` left in place and property name selected\r\n\r\n**Actual Behavior**:\r\nThe field name is changed to the first entry in the suggestion list, i.e. `consoleColor`.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20145/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T19:28:42Z",
        "body": "CLosing out as snippets are in maintenance mode."
      }
    ]
  },
  {
    "number": 20089,
    "title": "Invalid Extract Method result for selection in 'ElseIf'",
    "created_at": "2017-06-07T22:15:58Z",
    "closed_at": "2024-10-25T04:28:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB",
      "Tenet-Compatibility",
      "Feature - Extract Method"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/20089",
    "body": "**Version Used**: 15.3 Preview 1\r\n\r\n:memo: This was found during an investigation of #20088 (specifically, trying to minimize the repro case).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Start with the following code\r\n\r\n    ```vb\r\n    Public Class Class1\r\n\r\n        Private Function Method(arg As Integer?) As Boolean\r\n            Dim something As Boolean\r\n            If arg.HasValue Then\r\n                something = True\r\n            ElseIf arg.Value < 50 Then\r\n                If arg.Value > 15 Then\r\n                    something = True\r\n                Else\r\n                    something = False\r\n                End If\r\n            Else\r\n                something = False\r\n            End If\r\n\r\n            Return something\r\n        End Function\r\n\r\n    End Class\r\n    ```\r\n\r\n2. Select the 5 lines contained within the `ElseIf` clause by clicking and dragging in the line number margin\r\n3. Apply the **Extract Method** refactoring\r\n\r\n**Expected Behavior**:\r\n\r\n```vb\r\nPublic Class Class1\r\n\r\n    Private Function Method(arg As Integer?) As Boolean\r\n        Dim something As Boolean\r\n        If arg.HasValue Then\r\n            something = True\r\n        ElseIf arg.Value < 50 Then\r\n            something = NewMethod(arg)\r\n        Else\r\n            something = False\r\n        End If\r\n\r\n        Return something\r\n    End Function\r\n\r\n    Private Shared Function NewMethod(arg As Integer?) As Boolean\r\n        Dim something As Boolean\r\n\r\n        If arg.Value > 15 Then\r\n            something = True\r\n        Else\r\n            something = False\r\n        End If\r\n\r\n        Return something\r\n    End Function\r\nEnd Class\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```vb\r\nPublic Class Class1\r\n\r\n    Private Function Method(arg As Integer?) As Boolean\r\n        Dim something As Boolean\r\n        If arg.HasValue Then\r\n            something = True\r\n        ElseIf arg.Value < 50 Then If arg.Value > 15 Then\r\n                something = True\r\n        Else\r\n            something = False\r\n        End If Else\r\n            something = False\r\n        End If\r\n\r\n        Return something\r\n    End Function\r\n\r\n    Private Shared Function NewMethod(arg As Integer?) As Boolean\r\n        Dim something As Boolean\r\n\r\n        If arg.Value > 15 Then\r\n            something = True\r\n        Else\r\n            something = False\r\n        End If\r\n\r\n        Return something\r\n    End Function\r\nEnd Class\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/20089/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T04:28:10Z",
        "body": "Closing as we are not likely investing in tehse areas."
      }
    ]
  },
  {
    "number": 19986,
    "title": "Text for CS1673 needs updating for local methods",
    "created_at": "2017-06-02T16:57:12Z",
    "closed_at": "2020-06-04T19:16:56Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Concept-Diagnostic Clarity",
      "Feature - Local Functions"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19986",
    "body": "**Version Used**:  2.2.0.61624\r\n\r\n**Steps to Reproduce**:\r\n\r\nCode:\r\n\r\n```csharp\r\nusing System;\r\n\r\npublic struct Foo\r\n{\r\n    public string name;\r\n    \r\n    public void PrintName()\r\n    {\r\n        PrintNameImpl();\r\n        void PrintNameImpl()\r\n        {\r\n            Console.WriteLine(name);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nInitially, I expected this to compile. I'm okay with it not compiling, but the error message should be accurate, explaining that there's a restriction around local methods.\r\n\r\n**Actual Behavior**:\r\n\r\nError message, emphasis mine:\r\n\r\n> Test.cs(12,31): error CS1673: **Anonymous methods, lambda expressions, and query expressions** inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.\r\n\r\nThere's no anonymous method, lambda expression or query expression here. Unless there's some compatibility issue with updating the error message, it should just be updated to include local methods.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19986/comments",
    "author": "jskeet",
    "comments": [
      {
        "user": "jcouv",
        "created_at": "2017-06-07T05:00:10Z",
        "body": "FYI @agocke for triage."
      },
      {
        "user": "kevinsun-dev",
        "created_at": "2020-06-04T19:16:56Z",
        "body": "Fixed in #44835 ."
      }
    ]
  },
  {
    "number": 19904,
    "title": "Toggle between multi-line and single-line initialization",
    "created_at": "2017-05-31T18:29:31Z",
    "closed_at": "2024-10-21T19:37:48Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19904",
    "body": "Filed on behalf of a customer.\r\n\r\nThe customer would like a way to easily toggle to make initializations single/multiple lines, e.g.,\r\n\r\n```csharp\r\nvar foo = new Bar \r\n{\r\n    Prop1 = \"my prop\",\r\n    Prop2 = \"my other prop\"\r\n}\r\n```\r\n\r\nAfter `Ctrl+.` is pressed:\r\n\r\n```csharp\r\n\r\nvar foo = new Bar { Prop1 = \"my prop\", Prop2 = \"my other prop\" }\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19904/comments",
    "author": "kuhlenh",
    "comments": [
      {
        "user": "thomasthiry",
        "created_at": "2017-05-31T18:45:31Z",
        "body": "I think that for code readability the single line / multiple lines has a big impact and that too often code is left the way it is just because it's too painful to switch. \r\nAlso, this allows you to quickly see the content of the whole line (formatted) and put it back into one line after you've read it."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-05-31T19:02:51Z",
        "body": "PRs welcome."
      },
      {
        "user": "thomasthiry",
        "created_at": "2017-05-31T21:00:50Z",
        "body": "I think I'll need some time to get used to that... :-) \r\nBut that's awesome, thanks."
      },
      {
        "user": "Neme12",
        "created_at": "2018-02-12T17:21:35Z",
        "body": "Should we really have code fixes that only change whitespace formatting? If so, what should this apply to? Just object/array initializers? Parameters as well? How would this interact with code style settings?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2018-02-12T19:51:41Z",
        "body": "> Should we really have code fixes that only change whitespace formatting? If so, what should this apply to? Just object/array initializers? Parameters as well?\r\n\r\nI would think: constructs that people commonly put on multiple or single lines.\r\n\r\n> Parameters as well? \r\n\r\nDefinitely.  Wrapping of parameters is one of the most common stylistic things people do in a codebase.  \r\n\r\n> How would this interact with code style settings?\r\n\r\nPresumably the code style setting tells you when something is wrong.  The feature allows you to then quickly get the code 'right'.  For people who don't use codestyles here, the feature just allows you to rapidly tweak the formatting.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-16T05:56:35Z",
        "body": "Note: this would be a good location to use the new 'wrapping' code refactoring system.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:37:48Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 19864,
    "title": "Calling ExpandAsync on Visual Basic MemberAccessExpressionSyntax with a call to a constructor renames 'New' to '[New]'",
    "created_at": "2017-05-30T16:21:28Z",
    "closed_at": "2024-10-18T21:59:34Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19864",
    "body": "**Version Used**: \r\n2.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n[Fact]\r\npublic async Task RetainNewOnExpansion()\r\n{\r\n    var source =\r\n@\"Module M\r\nSub Main()\r\nEnd Sub\r\nEnd Module\r\n\r\nClass C\r\nPublic Sub New(foo As Integer)\r\nEnd Sub\r\n\r\nPublic Sub New()\r\nMe.New(5)\r\nEnd Sub\r\nEnd Class\r\n\";\r\n\r\n    var ws = new AdhocWorkspace();\r\n    var document = ws.AddProject(\"test\", LanguageNames.VisualBasic)\r\n        .AddMetadataReference(MetadataReference.CreateFromFile(typeof(string).Assembly.Location))\r\n        .AddMetadataReference(MetadataReference.CreateFromFile(typeof(Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute).Assembly.Location))\r\n        .AddDocument(\"repro.vb\", source);\r\n    var project = document.Project;\r\n    var compilation = await project.GetCompilationAsync();\r\n\r\n    Assert.Empty(compilation.GetDiagnostics());\r\n\r\n    var root = await document.GetSyntaxRootAsync();\r\n    var memberAccess = root.DescendantNodes(_ => true).OfType<MemberAccessExpressionSyntax>().Single();\r\n\r\n    Assert.Equal(\"New\", memberAccess.Name.Identifier.Text);\r\n    var result = await Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync(memberAccess, document);\r\n    Assert.Equal(\"New\", result.Name.Identifier.Text);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe `result` of the expansion should be `Me.New`\r\n\r\n**Actual Behavior**:\r\n\r\nThe `result` of the expansion is `Me.[New]`. This changes the call so that now the compiler is searching for a different method besides the constructor named `[New]`",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19864/comments",
    "author": "twsouthwick",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:59:34Z",
        "body": "Closing out due to lack of feedback about this being an issue."
      }
    ]
  },
  {
    "number": 19733,
    "title": "Bad formatting converting 'if to switch'.",
    "created_at": "2017-05-23T21:14:12Z",
    "closed_at": "2017-07-27T19:56:49Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19733",
    "body": "I converted the following code to a switch:\r\n\r\n```c#\r\n                        var untypedValue = subKey.GetValue(key, defaultValue: optionKey.Option.DefaultValue);\r\n                        if (untypedValue is string stringValue)\r\n                        {\r\n                            // Due to a previous bug we were accidentally serializing longs as strings. Gracefully convert\r\n                            // those back.\r\n                            var suceeded = long.TryParse(stringValue, out long longValue);\r\n                            value = longValue;\r\n                            return suceeded;\r\n                        }\r\n                        else if (untypedValue is long longValue)\r\n                        {\r\n                            value = longValue;\r\n                            return true;\r\n                        }\r\n```\r\n\r\nit produced:\r\n\r\n```c#\r\n                        switch (untypedValue)\r\n                        {\r\n                            case string stringValue:\r\n                                {\r\n                            // Due to a previous bug we were accidentally serializing longs as strings. Gracefully convert\r\n                            // those back.\r\n                            var suceeded = long.TryParse(stringValue, out long longValue);\r\n                            value = longValue;\r\n                            return suceeded;\r\n                        }\r\n\r\n                            case long longValue:\r\n                                value = longValue;\r\n                            return true;\r\n                        }\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19733/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "MadsTorgersen",
        "created_at": "2017-05-31T18:30:10Z",
        "body": "Similar test case, but possibly different (doesn't mess up the first case):\r\n\r\nBefore:\r\n\r\n``` c#\r\nif (v is int i)\r\n{\r\n    Add(i, 1);\r\n}\r\nelse if (v is object[] a)\r\n{\r\n    var (s, c) = await TallyAsync(a);\r\n    Add(s, c);\r\n}\r\n```\r\n\r\nAfter:\r\n```\r\nswitch (v)\r\n{\r\n    case int i:\r\n        Add(i, 1);\r\n        break;\r\n    case object[] a:\r\n        var (s, c) = await TallyAsync(a);\r\n    Add(s, c);\r\n        break;\r\n}\r\n```\r\n\r\nNote that only indentation of the `Add(s, c);` line is messed up."
      }
    ]
  },
  {
    "number": 19721,
    "title": "Implement Interface adds uneeded members when implementing interface with new methods",
    "created_at": "2017-05-23T17:07:00Z",
    "closed_at": "2024-12-02T17:05:37Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19721",
    "body": "With the following hierarchy:\r\n```C#\r\ninterface ImmutableView\r\n{\r\n    int Prop1 { get; }\r\n}\r\ninterface MutableView : ImmutableView\r\n{\r\n    new int Prop1 { get; set; }\r\n}\r\nclass Implementation : MutableView {}\r\n```\r\nUsing the \"Implement Interface\" quick action will implement both interfaces, `ImmutableView` explicitly, resulting the following generated code:\r\n```C#\r\nclass Implementation : MutableView\r\n{\r\n    public int Prop1 { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }\r\n\r\n    int ImmutableView.Prop1 => throw new NotImplementedException();\r\n}\r\n```\r\n\"Implement Interface\" should be smart enough here to know that it doesn't need to implement Prop1 twice, unless the \"Implement Interface Explicitly\" option is selected. \r\nI'm assuming that this @CyrusNajmabadi?",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19721/comments",
    "author": "333fred",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-15T09:13:04Z",
        "body": "We would take a PR for this."
      }
    ]
  },
  {
    "number": 19612,
    "title": "Proposal: Select parameter in \"Change signature\" dialog based on cursor position.",
    "created_at": "2017-05-18T05:18:54Z",
    "closed_at": "2019-08-29T18:39:57Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/19612",
    "body": "I would propose to preselect parameter in \"Change signature\" dialog based on cursor position in text editor. This would allow to faster remove/reorder parameters.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/19612/comments",
    "author": "josefpihrt",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-05-18T17:54:03Z",
        "body": "That sounds like a nice little tweak.  Care to submit a PR for it?"
      },
      {
        "user": "josefpihrt",
        "created_at": "2019-08-12T16:11:05Z",
        "body": "I noticed that this feature has been implemented in VS2019 so I guess this issue can be closed now."
      }
    ]
  },
  {
    "number": 18866,
    "title": "Productivity: IntelliSense should provide values in configuration files (app.config/appsettings.json)",
    "created_at": "2017-04-20T19:57:21Z",
    "closed_at": "2022-10-28T22:24:33Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18866",
    "body": "In projects that have an app.config file (web.config too) or appsettings.json, those values should be available in API's that use those values (ConfigurationManger), GetSection, etc. Much easier to prevent typos when reading configuration data in code.\r\n\r\n/cc @Pilchie  ",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18866/comments",
    "author": "clairernovotny",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-04-21T18:32:31Z",
        "body": "@onovotny - good thing our completion API is extensible so that people who provide those values can write providers :)"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T22:24:33Z",
        "body": "Closing out.  Roslyn doesn't own the experience for these files.  The respective teams that do control this could consider adding lsp servers to improve their experience there."
      }
    ]
  },
  {
    "number": 18229,
    "title": "Suggestion: When calling a non-existent method, don't autocomplete on colon",
    "created_at": "2017-03-28T00:07:36Z",
    "closed_at": "2017-04-10T17:12:23Z",
    "labels": [
      "Bug",
      "help wanted",
      "Resolution-Won't Fix",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/18229",
    "body": "I'm calling a non-existent method\r\n```C#\r\nMethodThatWillBeGenerated($$)\r\n```\r\n\r\nI type `firstParameter:` at the $$, and completion commits whatever happens to be selected and I get some type/namespace/method name inserted when I'm trying to use named arguments.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/18229/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2017-03-28T16:25:59Z",
        "body": "The only case I can come up with where I wouldn't want this is when I used a named argument to pass a non-obvious literal value (`true` for example), but *after* that I want to name my named arg the same thing as a local variable or something. Maybe that's enough to shoot this down."
      },
      {
        "user": "Pilchie",
        "created_at": "2017-03-29T02:05:54Z",
        "body": "I think this suggestion is reasonable - note that it's not to prevent completion from working there, it's just to adjust the set of commit characters to remove `:` in this case."
      },
      {
        "user": "stefannikolei",
        "created_at": "2017-04-09T16:18:14Z",
        "body": "@dpoeschl i tried to reproduce it with the latest vs2017 release and also with the current master. I could not reproduce it. I could write \r\n\r\n`MethodThatWillBeGenerated(nameParameter:)` without inserting an \"randomn\" Type"
      },
      {
        "user": "dpoeschl",
        "created_at": "2017-04-10T17:11:06Z",
        "body": "@reaction1989 is right. My named argument must have been a substring of an existing identifier.\r\n\r\nAn example:\r\n```C#\r\nusing System.Threading;\r\n\r\npublic class Class\r\n{\r\n    void Method(CancellationToken cancellationToken)\r\n    {\r\n        Test($$)\r\n    }\r\n}\r\n```\r\nType `token:` at the $$, and it completes to \"cancellationToken:\"\r\n\r\nGiven this, I care very little about this being changed. @Pilchie should we just close this?"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-04-10T17:12:23Z",
        "body": "Yep."
      }
    ]
  },
  {
    "number": 17384,
    "title": "Autocompletion list misses params for indexers",
    "created_at": "2017-02-25T18:12:17Z",
    "closed_at": "2017-04-16T00:09:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/17384",
    "body": "**Version Used**: 2.0.0.61413\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nclass Program\r\n{\r\n    public int this[params|\r\n}\r\n```\r\n**Expected Behavior**: `params` to be in the autocompletion list\r\n\r\n**Actual Behavior**: Not there. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/17384/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-25T22:40:21Z",
        "body": "If this is legal C# code, then PRs welcome."
      },
      {
        "user": "miloush",
        "created_at": "2017-02-25T22:42:20Z",
        "body": "Compiles and runs just fine."
      },
      {
        "user": "skosterin88",
        "created_at": "2017-03-04T19:56:57Z",
        "body": "Is \"params\" keyword allowed in the indexer definition? I thought that it is not."
      },
      {
        "user": "miloush",
        "created_at": "2017-03-06T21:58:38Z",
        "body": "I don't see a reason why it shouldn't, it's just a syntactic sugar for regular method. And I run into this in a real scenario.\r\n\r\nBy the way, C# 5.0 specification, 10.9 Indexers\r\n> _indexer-declarator_:\r\n>    _type_   this   [   _formal-parameter-list_   ]\r\n> The _formal-parameter-list_ specifies the parameters of the indexer. The formal parameter list of an indexer corresponds to that of a method (§10.6.1), except that at least one parameter must be specified, and that the ref and out parameter modifiers are not permitted.\r\n\r\nAnd §10.6.1 of course allows them\r\n\r\n> _formal-parameter-list_:\r\n> _fixed-parameters_\r\n> _fixed-parameters_   ,   _parameter-array_\r\n> _parameter-array_\r\n\r\nSounds explicitly allowed to me and could be breaking to forbid it at this moment."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-03-06T21:59:59Z",
        "body": "It should def be allowed.  PRs welcome."
      }
    ]
  },
  {
    "number": 17201,
    "title": "IDE0032 should not be specified for classes or structs with an explicit `StructLayout` attribute",
    "created_at": "2017-02-17T01:00:18Z",
    "closed_at": "2024-11-05T21:13:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - IDE0032"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/17201",
    "body": "**Repro**\r\n1. Create a new C# Class Library\r\n2. Set the contents of Class1.cs to the following\r\n```C#\r\nusing System.Runtime.InteropServices;\r\n\r\n[StructLayout(LayoutKind.Sequential, Pack = 8, Size = 8)]\r\npublic struct MyStruct\r\n{\r\n    private int _x;\r\n    private int _y;\r\n\r\n    public int X\r\n    {\r\n        get\r\n        {\r\n            return _x;\r\n        }\r\n\r\n        set\r\n        {\r\n            _x = value;\r\n        }\r\n    }\r\n\r\n    public int Y\r\n    {\r\n        get\r\n        {\r\n            return _y;\r\n        }\r\n\r\n        set\r\n        {\r\n            _y = value;\r\n        }\r\n    }\r\n}\r\n```\r\n3. Note that IDE0032 (Use auto property) is suggested for both `_x` and `_y`.\r\n\r\n**Expected Behavior**\r\nIDE0032 should not be suggested for structs or classes that have the `StructLayout` attribute.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/17201/comments",
    "author": "tannergooding",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-17T01:47:56Z",
        "body": "Again, it's a suggestion :)   For example, it would be perfectly reasonable to write: \r\n\r\n```c#\r\n[StructLayout(LayoutKind.Sequential, Pack = 8, Size = 8)]\r\npublic struct MyStruct\r\n{\r\n    public int X { get; set; }\r\n\r\n    public int Y { get; set; }\r\n}\r\n```\r\n\r\nThis would have the same IL/semantics.  The purpose of many IDE features is to help you efficiently transform your code so that you don't have to do all the work yourself.  \r\n"
      },
      {
        "user": "tannergooding",
        "created_at": "2017-02-17T01:55:25Z",
        "body": "Again, I realize these are suggestions :). I am just indicating ways that I think the diagnostics could be improved.\r\n\r\nAnd yes, converting both is reasonable (assuming that the compiler emits the backing fields in the order the properties are listed in the type). Converting only some of them is not, as it changes the layout of the struct.\r\n\r\nSome of the suggestions users will want to enforce as code styles (and some of them are currently possible to enforce as code styles), so places where the suggestion is incorrect should probably get fixed at some point (even if those go 'Up for grabs')."
      },
      {
        "user": "0xd4d",
        "created_at": "2017-02-17T02:57:23Z",
        "body": "I agree that this should be fixed. Some users would want to use this fix on the whole project or solution. Most people don't check the diff before pressing OK, they assume it works. Applying this fix to the above code could break the code, something that will perhaps only be detected at runtime. This is similar to #15018 (fixed by #15023) , it breaks code, and it was fixed."
      },
      {
        "user": "stephenmartindale",
        "created_at": "2017-02-28T10:02:14Z",
        "body": "This is related, but I'm really not sure where to ask. Is there some way to disable `IDE0032`? It's a preference of code style and there seems to be no option in Visual Studio to turn this one off - it isn't in the code-style property pages."
      },
      {
        "user": "Pilchie",
        "created_at": "2017-02-28T18:31:23Z",
        "body": "Unfortunately, no, that one isn't configurable right now, though I agree that it should be."
      },
      {
        "user": "Pilchie",
        "created_at": "2017-03-06T17:20:44Z",
        "body": "I think the right thing here would be to add a warning annotation when we detect a `StructLayout`."
      },
      {
        "user": "logiclrd",
        "created_at": "2017-12-15T21:57:55Z",
        "body": "When a type is involved in serialization, the names of the fields are important, and changing fields to auto properties will break serialization. It in an anti-pattern to use auto properties with a serialized class, as there is no documented guarantee that the underlying fields will have the same names from one version of the dev tools to another, and the exact names are an internal implementation detail. I second requests for this setting to be configurable, and it would also be nice if it could be disabled regionally with a `#pragma`, in the same manner as `#pragma warning disable/restore 12345`."
      },
      {
        "user": "logiclrd",
        "created_at": "2017-12-15T22:01:29Z",
        "body": "One possible work-around if you have a project with many developers, some of whom might not recognize the implications of blindly applying these suggestions: Create a dummy `Attribute` and apply it to the fields. A field with an attribute is no longer eligible for the IDE0032 suggestion.\r\n```\r\nclass ExplicitAttribute : Attribute { }\r\n\r\n[StructLayout(LayoutKind.Sequential, Pack = 8, Size = 8)]\r\npublic struct MyStruct\r\n{\r\n    [Explicit] private int _x;\r\n    [Explicit] private int _y;\r\n\r\n    public int X\r\n    {\r\n        get\r\n        {\r\n            return _x;\r\n        }\r\n\r\n        set\r\n        {\r\n            _x = value;\r\n        }\r\n    }\r\n\r\n    public int Y\r\n    {\r\n        get\r\n        {\r\n            return _y;\r\n        }\r\n\r\n        set\r\n        {\r\n            _y = value;\r\n        }\r\n    }\r\n}\r\n```"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-05T21:13:46Z",
        "body": "Not repro.  "
      }
    ]
  },
  {
    "number": 16982,
    "title": "Improve the error message for compiler error CS0191",
    "created_at": "2017-02-06T22:44:17Z",
    "closed_at": "2020-01-06T21:59:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16982",
    "body": "**Version Used**: \r\nVS 2015 Community 14.0.25431.01 Update 3, .NET 4.6.01586\r\n\r\n**Steps to Reproduce**:\r\n1. Create a class 'A' with a readonly field 'foo'.\r\n2. Create a class 'B' which derives from class 'A'.\r\n3. Attempt to assign a value to 'foo' in the constructor of 'B'.\r\n\r\n**Expected Behavior**:\r\n\"A readonly field cannot be assigned to (except in the constructor of the class in which the field is defined or a variable initializer)\"\r\n\r\n**Actual Behavior**:\r\n\"A readonly field cannot be assigned to (except in a constructor or a variable initializer)\"\r\n\r\nThe error message as it stands is wrong/ incomplete, which is confusing.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16982/comments",
    "author": "Worthaboutapig",
    "comments": [
      {
        "user": "06needhamt",
        "created_at": "2017-10-26T20:12:01Z",
        "body": "PR is Out #22874 "
      },
      {
        "user": "Evangelink",
        "created_at": "2019-12-10T13:01:57Z",
        "body": "Is there anything left to do on this?"
      },
      {
        "user": "trivalik",
        "created_at": "2021-01-18T13:24:12Z",
        "body": "Variable initializer are not allowed to assign readonly fields in 4.8.\r\n\r\n`\r\n    public class A\r\n    {\r\n        public readonly bool b;\r\n    }\r\n`\r\n\r\nUse which lead to CS0191\r\n`\r\n            var a = new A()\r\n            {\r\n                b = chkBox.Checked\r\n            };\r\n`"
      }
    ]
  },
  {
    "number": 16953,
    "title": "SyntaxGenerator can't generate expression-bodied members",
    "created_at": "2017-02-04T22:17:17Z",
    "closed_at": "2022-02-04T19:28:36Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16953",
    "body": "There's currently no supported mechanism for generating an expression-bodied member using SyntaxGenerator.\r\n\r\nEx.\r\npublic SomeType SomeProperty => _someValue;",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16953/comments",
    "author": "ali-hk",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-04T22:21:49Z",
        "body": "Note: this is somewhat by design.  VB doesn't support expression-bodied members.  So it's not clear how this would work for them.  Is there a reason you can't just manually create the C# syntax?"
      },
      {
        "user": "ali-hk",
        "created_at": "2017-02-05T19:09:31Z",
        "body": "It's possible to generate it manually, but since I'm writing a language-agnostic code refactoring and SyntaxGenerator is intended for just that purpose, it seems like it should be a supported scenario.\r\n\r\nIt seems to me that for VB it should simply generate a normal read-only property, which is essentially equivalent."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-05T22:01:29Z",
        "body": "PRs welcome."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-05T22:02:44Z",
        "body": "I can see allowing for an expression-body parameter as well.  For C# it would make a => property.  For VB, it will depend on if you're making a sub or func.  If it's a sub, it should just become an expression statement.  If it's a func, it should become a return statement."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T19:28:35Z",
        "body": "API proposals need to go through our documented process for changes.  Having gotten no traction on this so far, i\"m going to close this out."
      }
    ]
  },
  {
    "number": 16418,
    "title": "Completion item filters conflict",
    "created_at": "2017-01-11T03:32:48Z",
    "closed_at": "2024-10-18T21:08:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/16418",
    "body": "**Version Used**: 2.0.0.61308\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n             new Exc|\r\n        }\r\n    }\r\n}\r\n```\r\nThe autocomplete list contains `Exception` item as a snippet entry, which hides the `Exception` class entry. That is fine, but when I filter to classes only, there is no `Exception` entry at all.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/16418/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2017-01-20T18:15:54Z",
        "body": "This is an interesting case - it happens because when building the list of items, we *replace* the type with the snippet.  You could imagine shadowing in some way instead so that we reveal the type when filtering away exceptions. \r\n\r\nHowever, given that we only ship with 2 snippets that match type names (Exception and Attribute), I'm not terribly worried about.\r\n\r\n@CyrusNajmabadi for thoughts."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:08:25Z",
        "body": "Closing out given lack of feedback here."
      }
    ]
  },
  {
    "number": 15990,
    "title": "Explicit Interface Implementation should show completions for interface type parameterizations",
    "created_at": "2016-12-18T18:07:54Z",
    "closed_at": "2024-10-18T21:07:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15990",
    "body": "**Version Used**: 2017 RC Refresh\r\n\r\n```C#\r\ninterface IBase<T> {\r\n\tint M();\r\n}\r\n\r\nclass C : IBase<string>, IBase<double> {\r\n\tint IBase<\r\n}\r\n\r\n```\r\n\r\nAfter the (final) `<`, you should show IntelliSense completions for every parameterization of this interface implemented by the class (which may include nested type parameters).",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15990/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:07:21Z",
        "body": "Unlikely to do anything here given lack of feedback."
      }
    ]
  },
  {
    "number": 15982,
    "title": "IntelliSense: Incomplete parenthetical followed by statement is treated as cast",
    "created_at": "2016-12-18T02:48:36Z",
    "closed_at": "2023-02-07T18:31:35Z",
    "labels": [
      "Bug",
      "help wanted",
      "Resolution-Won't Fix",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15982",
    "body": "**Version Used**: 2017 RC Refresh\r\n\r\n```C#\r\nint v = 0;\r\n(v.T)\r\nv.ToString();\r\n```\r\n\r\nPressing Ctrl+Space on `.T` in the parentheses shows no completions, because it's parsed as a cast and `v.` does not contain any types.\r\n\r\nThis only happens if `.T` was typed before opening IntelliSense.\r\n\r\nThis violates the rule that IntelliSense should not be affected by code after the cursor, and makes it surprisingly annoying to insert code before a statement.",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15982/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-12-21T21:03:00Z",
        "body": "@CyrusNajmabadi FYI"
      },
      {
        "user": "gafter",
        "created_at": "2016-12-21T21:03:49Z",
        "body": "It must be parsed as a cast because it is, syntactically speaking, a valid cast. Assigning to IDE team for investigation."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2016-12-21T21:43:03Z",
        "body": "Yup. It's valid code, so parsing as a cast is correct. It's on the IDE to do the right thing here"
      },
      {
        "user": "Pilchie",
        "created_at": "2017-03-29T19:20:08Z",
        "body": "IIRC, we have had this issue for several releases."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T18:31:35Z",
        "body": "Closing out as we haven't heard about this from other people.  `v.` does work and shows the right list.  it's only if you have `v.T` and you explicitly try to bring up completion there."
      }
    ]
  },
  {
    "number": 15980,
    "title": "Directives ignored by quick actions",
    "created_at": "2016-12-18T01:16:20Z",
    "closed_at": "2017-02-27T19:33:53Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15980",
    "body": "**Version Used**: 2.0.0.61205\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\n...\r\n    |\r\n    #endregion\r\n\r\n    #region MyRegion\r\n\r\n    class MyClass { }\r\n...\r\n```\r\n\r\n**Expected Behavior**: No quick actions available at the current location.\r\n\r\n**Actual Behavior**: Move `MyClass` to file quick action available. Even if `MyRegion` is collapsed.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15980/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-12-31T22:15:54Z",
        "body": "@kuhlenh do you wan to take a look a this along with your other caret positioning issues?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-02-24T20:01:14Z",
        "body": "I'll fix this."
      }
    ]
  },
  {
    "number": 15864,
    "title": "CS1574 fix doesn't try to use a namespace alias",
    "created_at": "2016-12-13T14:44:54Z",
    "closed_at": "2024-10-18T21:06:32Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15864",
    "body": "**Version Used**: VS2017RC\r\n\r\n**Steps to Reproduce**:\r\n\r\n- Create a console app\r\n- Enable 'XML documentation file' in the project settings\r\n- Paste the code below\r\n- Press Ctrl+. inside `MemoryStream`\r\n\r\n**Expected Behavior**:\r\n\r\nIt should suggest to add `SIO.MemoryStream`\r\n\r\n**Actual Behavior**:\r\n\r\nIt suggests to add `using System.IO;`\r\n\r\n```C#\r\nusing SIO = System.IO;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        /// <summary>\r\n        /// <see cref=\"MemoryStream\"/>\r\n        /// </summary>\r\n        /// <param name=\"args\"></param>\r\n        static void Main(string[] args)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15864/comments",
    "author": "0xd4d",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:06:32Z",
        "body": "Closing out given lack of feedback."
      }
    ]
  },
  {
    "number": 15802,
    "title": "Suggestion: Ability to compile from stdin (without file)",
    "created_at": "2016-12-09T06:06:02Z",
    "closed_at": "2020-02-13T19:48:28Z",
    "labels": [
      "help wanted",
      "Area-Compilers",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15802",
    "body": "It would be a nice improvement to command line interface of roslyn compilers, if the ability to pipe the code to the compiler (or read from stdin) is introduced. This would:\r\n\r\n* come handy when making short, self-contained examples\r\n* make the compilers consistent with similar utilities of era\r\n* allow the downstream utilities to expose a similar option and they will simply pipe the stdin to csc/vbc (e.g. stdin->dotnet->msbuild->csc)\r\n\r\nConsider the following GCC example:\r\n\r\n```sh\r\necho 'int main(){return 0;}' | g++ -x c++ -O -Wall -o myapp.exe /dev/stdin\r\n\r\n# or\r\n\r\ng++ -x c++ -O -Wall -o myapp.exe - << EOF\r\nint main() {\r\n  return 0;\r\n}\r\nEOF\r\n```\r\n\r\nand another one using node.js (interprets and executes; meant for `csi.exe`):\r\n\r\n```sh\r\nnode -e console.log(process.arch) # evaluation mode\r\n\r\n# or\r\n\r\nnode -p console.log(process.arch) # printing mode\r\n```\r\n\r\nHaving an option similar to GCC in CSC and VBC would enable us to do:\r\n\r\n```sh\r\necho 'using System;class A{static void Main(){Console.WriteLine(321);}}' | csc /out:myapp.exe\r\n\r\n# or\r\n\r\ncsc /out:myapp.exe - << EOF\r\nusing System;\r\nclass A {\r\n  static void Main() {\r\n    Console.WriteLine(321);\r\n  }\r\n}\r\nEOF\r\n```\r\n\r\nand for the one similar to node.js in CSI:\r\n\r\n```sh\r\ncsi /e Console.WriteLine(321)\r\n```\r\n\r\nHaving the code to a temp file and compile is an ok alternative, but on-the-file option without filesystem I/O intervention has its significance as well. :)",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15802/comments",
    "author": "am11",
    "comments": [
      {
        "user": "renatoeufe",
        "created_at": "2016-12-09T06:24:18Z",
        "body": "+1"
      }
    ]
  },
  {
    "number": 15315,
    "title": "GenerateMethod should generate a bool return type if it can't figure out a type, and the method starts with \"Is\"",
    "created_at": "2016-11-17T03:20:38Z",
    "closed_at": "2016-11-19T04:02:49Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/15315",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/15315/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "orthoxerox",
        "created_at": "2016-11-17T04:25:35Z",
        "body": "Or 'Has' or 'Can'?\n"
      },
      {
        "user": "bkoelman",
        "created_at": "2016-11-17T08:33:16Z",
        "body": "\"Supports\", \"Contains\"\n"
      },
      {
        "user": "DavidArno",
        "created_at": "2016-11-17T12:54:47Z",
        "body": "Hmm, so `IssueReportGenerator` will be created as a `bool` method, but `ProblemReportGenerator` will be a `void`.\n\n😛 \n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-11-17T14:51:25Z",
        "body": "@DavidArno generally we would also check for the next letter being capitalized to avoid issues like that.\n"
      }
    ]
  },
  {
    "number": 13610,
    "title": "Contextual keywords aren't escaped in symbol display strings.",
    "created_at": "2016-09-05T20:18:09Z",
    "closed_at": "2022-02-04T19:27:11Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Resolution-By Design"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13610",
    "body": "Contextual keywords such as `await` aren't escaped by `To[Minimal]SymbolDisplayString`, even if the specified options request escaping. This affects completion providers which use the minimizing process to create insertion text.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13610/comments",
    "author": "lorcanmooney",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-09-06T16:50:06Z",
        "body": "Moving to compiler since the API is defined there.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T19:26:40Z",
        "body": "I think this behavior is correct.  These are not keywords, and the display is fine to show them as their actual words.  The issue appears to be with: \r\n\r\n> This affects completion providers which use the minimizing process to create insertion text.\r\n\r\nCompletion providers should not do this.  ToDisplayString is not intended to produce code that works there.  Indeed, that's part of hte name.  It's for 'Display' purposes, not for code-gen purposes."
      }
    ]
  },
  {
    "number": 13580,
    "title": "CodeStyle Tools Options window : change header row color",
    "created_at": "2016-09-02T21:47:44Z",
    "closed_at": "2023-11-22T17:34:24Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13580",
    "body": "1. today the header color matches the color of the drop downs.\n2. unfocused selection on a datagrid row matches the header color.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13580/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-11-22T17:34:24Z",
        "body": "Not planning on doing this."
      }
    ]
  },
  {
    "number": 13577,
    "title": "CodeStyle Tools Options window : the very first click on the preferences/severity dropdown is swallowed by the datagrid",
    "created_at": "2016-09-02T21:28:45Z",
    "closed_at": "2023-11-22T17:34:48Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/13577",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/13577/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-09-06T16:59:22Z",
        "body": "This doesn't seem _terrible_ if it is just setting focus on the first click.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-11-22T17:34:48Z",
        "body": "I don't repro this."
      }
    ]
  },
  {
    "number": 12729,
    "title": "Move type to file: not offered on delegates and VB enums",
    "created_at": "2016-07-25T23:03:51Z",
    "closed_at": "2024-10-18T21:03:51Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12729",
    "body": "Again, a todo thats not yet implemented.\n1. Move type to file needs to be offered on delegates\n2. Move type to file doesnt work on VB enums. \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12729/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:03:51Z",
        "body": "Unlikely to do anything here given lack of customer feedback."
      }
    ]
  },
  {
    "number": 12683,
    "title": "Inline Temp sometimes incorrectly positions the caret",
    "created_at": "2016-07-22T22:05:35Z",
    "closed_at": "2024-10-18T20:58:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12683",
    "body": "**Version Used**: VS2015 Update 3 (14.0.25421.03)\n\n**Steps to Reproduce**:\n1. Copy/paste C#:\n   \n   ``` C#\n   using System.Collections.Generic;\n   class Program\n   {\n       private void Test1(List<int> line) // Inline Temp places the caret between the 'l' and first 'i' of \"line\"\n       {\n           var newLine = line;\n           newLine.RemoveAt(0);\n       }\n   \n       private void Test2() // Inline Temp places the caret at the beginning of the line (before \"System\")\n       {\n           int xyz = 7;\n           System.Console.WriteLine(xyz);\n       }\n   }\n   ```\n2. Run Inline Temp on `newLine` in both `Test1` and `Test2`\n\n**Expected Behavior**: The caret should be placed consistently. I think it should go to the start of the newly created line.\n\n**Actual Behavior**: In `Test1`, the caret is placed between the 'l' and first 'i' of \"line\"\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12683/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2016-07-25T19:12:23Z",
        "body": "(Updated the \"Actual Behavior\" -- the caret is between the 'l' and 'i' of \"line\", not the 'n' and 'e' of \"newLine\" (which no longer exists after inlining).)\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:58:28Z",
        "body": "Closing out for lack of feedback."
      }
    ]
  },
  {
    "number": 12355,
    "title": "[Suggestion] SyntaxNodeOrTokenList should be a IReadOnlyList<SyntaxNodeOrToken>",
    "created_at": "2016-07-06T07:17:56Z",
    "closed_at": "2022-10-28T20:37:59Z",
    "labels": [
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12355",
    "body": "IMHO SyntaxNodeOrTokenList should be a IReadOnlyList<SyntaxNodeOrToken> instead of just being a IReadOnlyCollection<SyntaxNodeOrToken> with an int indexer.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12355/comments",
    "author": "MatthieuMEZIL",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2016-07-17T22:01:25Z",
        "body": "@mattwar What do you think of this?\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T20:37:59Z",
        "body": "This would need to go through an API proposal.  in general, the reason we don't just make things public is because it increases maintenance costs and locks down our ability to change things in teh future.  We can open things up, but we have a process that requests need to go through to make sure the appropriate people weigh in and the right API shape is determined and shipped."
      }
    ]
  },
  {
    "number": 12214,
    "title": "Strange syntax error in interpolated string when using ?:",
    "created_at": "2016-06-27T08:04:59Z",
    "closed_at": "2017-11-21T19:31:32Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "4 - In Review",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12214",
    "body": "```\n$\"{1 / Environment.TickCount == 0 ? 1 : 2}\"\n```\n\nHere, the \"1 \" part has a red squiggly saying \": expected\". I don't know whether this code is supposed to compile or not but the message does not make sense to me. I would not \"expect\" a \":\" character right after the question mark under any circumstances.\n\nThe workaround `$\"{(1 / Environment.TickCount == 0 ? 1 : 2)}\"` works fine.\n\nI guess this is a low priority issue but I still wanted to report it so that it can be triaged and tracked.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12214/comments",
    "author": "GSPP",
    "comments": [
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-06-27T08:15:59Z",
        "body": "I don't think this is a bug, as it has been encountered before.  As String Interpolation uses the syntax from `String.Format`, thus the `:` is being seen as part of the Argument Hole (spefically the formatting ).\nBy enclosing it in parenthesis, it gets treated as an expression.\n"
      },
      {
        "user": "GSPP",
        "created_at": "2016-06-27T08:39:52Z",
        "body": "Yes, that makes sense to me. But why does the error demand a \":\" after the \"?\"?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-06-27T09:07:34Z",
        "body": "I did't know. Guess would it be ambiguous \n"
      },
      {
        "user": "miloush",
        "created_at": "2016-06-27T09:58:58Z",
        "body": "@GSPP that is because the `:` is treated as part of the string, not the expression, so the expression is missing a colon (which you cannot add without using parenthesis).\n"
      },
      {
        "user": "GSPP",
        "created_at": "2016-06-27T10:06:30Z",
        "body": "I see. So the error is trying to say that the colon is expected _after_ the \"1\" and not instead of it. I guess there is nothing to do here so I'm closing this.\n"
      },
      {
        "user": "miloush",
        "created_at": "2016-06-27T10:25:12Z",
        "body": "@GSPP yep, not sure what build are you using but for\n\n``` C#\nstatic void Main(string[] args)\n{\n    var s = $\"{1 / Environment.TickCount == 0 ? 1 |: 2}\";\n}\n```\n\nI get the \": expected\" error before the colon as denoted by |  which looks ok to me.\n"
      },
      {
        "user": "svick",
        "created_at": "2016-06-27T10:52:48Z",
        "body": "I think the error message is very confusing (\"Colon expected? But I have a colon exactly where it should be.\"). Maybe it's worth keeping this open for the request to make the message better?\n"
      },
      {
        "user": "miloush",
        "created_at": "2016-06-27T11:04:14Z",
        "body": "Well :-) turns out I have run into this myself: #4829 and suggested\n\n>  If nothing else, it shouldn't say a colon is expected when there is a colon.\n\n@gafter Might be worth having a less confusing error...\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-06-27T17:56:51Z",
        "body": "If it being the current state of the parser is that it is parsing the `cond ? truth : falsehood` why is the error being reported, Shouldn't it be seen it as part of that rather than the Argument Hole?\n"
      },
      {
        "user": "gafter",
        "created_at": "2016-06-27T18:04:58Z",
        "body": "@AdamSpeight2008 Unfortunately, no. This is per the language specification. The parts of the interpolated string need to be identified during lexical analysis, which occurs long before parsing.\n"
      },
      {
        "user": "WrongBit",
        "created_at": "2016-07-06T14:44:39Z",
        "body": "I insist that using \"?:\" operator inside an interpolated string handled WRONG WAY. We waited year while you discussing proper syntax for interpolation, and now, when you introduced these clumsy {} (instead of one symbol $ ), you say \"it's not a bug\". IT IS a bug. Once you limit substitution expression with braces {}, take full responsibility to handle it properly. And nobody care on what you base your formatting - we didn't ask you to use \"string.Format\" - we asked just simple substitution, like \"Hello, $UserName!\".\n"
      },
      {
        "user": "gafter",
        "created_at": "2017-11-17T22:35:27Z",
        "body": "The error will be\r\n\r\n`error CS8361: A conditional expression cannot be used directly in a string interpolation because the ':' ends the interpolation. Parenthesize the conditional expression.`\r\n"
      },
      {
        "user": "svick",
        "created_at": "2017-11-18T15:54:46Z",
        "body": "@gafter If the error message suggests a way to fix it, should the compiler also include a code fix that can do it automatically?"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-11-19T00:23:47Z",
        "body": ">  If the error message suggests a way to fix it, should the compiler also include a code fix that can do it automatically?\r\n\r\nPRs welcome @svick :)"
      },
      {
        "user": "gafter",
        "created_at": "2017-11-21T06:24:40Z",
        "body": "@svick @CyrusNajmabadi Created issue #23323 to track the suggested code fix."
      },
      {
        "user": "WrongBit",
        "created_at": "2017-11-25T18:42:18Z",
        "body": "Any expression, unary or sixnary, have to be completely parsed in interpolation string as a whole expression, NOT to intersecting with any \"formatting\" characters. It's just stupid - introduce feature to SIMPLIFY our life and make it so abstract/clumsy that it become UNUSABLE. What organ you use to think, team?? Just keep in your student head: $\"... {a ? b : c}...\" MUST WORK. Period. No excuses, no annoying explanations why you didn't make it properly."
      },
      {
        "user": "gafter",
        "created_at": "2017-11-25T22:43:27Z",
        "body": "@WrongBit can you please draft the language specification you prefer we use for the feature?"
      },
      {
        "user": "WrongBit",
        "created_at": "2017-12-14T22:00:26Z",
        "body": "@gafter: I offered same solution like Nemerle has: dollar sign + verbatim mode. Better if these strings will have different quotes. Say, backtick (like in D). Finally it will look like this:\r\n\r\nvar s = ~bacltick here~ Today is $day\r\nTemp is $temp\r\nLast line of string~bacltick here~;\r\n\r\nIt's simple, CLEAR, obvious solution, usable for 99% cases. Where not, use old, good strings, Format(), etc.\r\nYes, it's not \"hyper universal solution\", but I'm tired of \"universal architectors\", who convert every task into idiotically complex solution (his code) and same idiotically complex usage (my code). Overengineering in other words."
      },
      {
        "user": "gafter",
        "created_at": "2017-12-14T22:12:53Z",
        "body": "@WrongBit that would be a completely new and different language construct, not a bug fix to the spec. New feature proposals belong in the csharplang repo, not here."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-14T22:13:54Z",
        "body": "@WrongBit Note that nemerle has issues on its own (for example if you need an embedded string in your interpolation).  \r\n\r\n> Any expression can be used in $(...), but there might be problems with embedded strings and so on.\r\n\r\nThat's similar to the case we have here in C#.  In both languages you can type nearly anything in the interpolation.  However, there are some cases that you need to provide additional syntax around.\r\n\r\n> It's simple, CLEAR, obvious solution, usable for 99% cases.\r\n\r\nC#'s solution works for 99% of all cases as well :)   Just for the case of ternary (where you just need to wrap things in parentheses to make it work).  Seems similar to nemerle here :)"
      }
    ]
  },
  {
    "number": 12213,
    "title": "#pragma warning disable IDE0002 does not disable graying out",
    "created_at": "2016-06-26T21:27:28Z",
    "closed_at": "2022-02-04T19:21:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-Not Reproducible"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12213",
    "body": "**Version Used**: \nVisual Studio 2015 Update 2\n\n**Steps to Reproduce**:\n1. Use the following code to reproduce:\n\n``` csharp\nclass C {\n    string f;\n    public string M() {\n        #pragma warning disable IDE0002\n        return nameof(C.f);\n        #pragma warning restore IDE0002\n    }\n}\n```\n\n**Expected Behavior**:\nIn `nameof`, `C` is not grayed out since `IDE0002` was disabled.\n\n**Actual Behavior**:\nIn `nameof`, `C` is grayed out.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12213/comments",
    "author": "ashmind",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2016-08-11T16:53:09Z",
        "body": "This is not an analyzer/fixer issue, but probably an IDE colorization/classification issue. Adding the pragma does suppress the diagnostic and no fix for simplify name appears either.\n"
      },
      {
        "user": "binki",
        "created_at": "2017-12-12T15:15:42Z",
        "body": "The editor falsely displays a suggestion mark hint in the scrollbar in addition to showing the false squiggly.\r\n\r\nThis is confusing because the shown Quick Actions menu does omits the suppressed codefix. Unless if the `#pragma warning disable…#pragma warning restore` are in view, the user will assume that one of the shown Quick Actions which is unrelated to the suggestion mark is related to the suggestion marking."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T19:21:10Z",
        "body": "Closing out.  This does not repro for me.  I presume much of our rewrites around fading addressed thsis."
      }
    ]
  },
  {
    "number": 12209,
    "title": "Refactoring saves files",
    "created_at": "2016-06-25T10:27:35Z",
    "closed_at": "2023-02-03T19:22:38Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/12209",
    "body": "Just question, is it necessary for the quick fixes/refactorings (e.g. extract local) to trigger saving the file (and potentially check-out)?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/12209/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-06-25T23:03:31Z",
        "body": "Normally, we only save if the refactoring changes more than one file - are you seeing cases where that isn't true?\n\n(Note that checkout happens at edit time, not save, so it will tend to happen regardless)\n"
      },
      {
        "user": "miloush",
        "created_at": "2016-06-25T23:26:39Z",
        "body": "Yes I think I am... although it is probably always rename.\n\nIf you for example extract local, it enters the rename mode. You type the name and confirm using Enter. That triggers the save, even when it _introduces local_ which cannot be in any other file AFAIK.\n\n(checkout can happen at save time, Source Control > Environment > Checked-in items)\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-06-30T17:10:43Z",
        "body": "I suspect that you're right and rename always saves.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T19:22:38Z",
        "body": "Closing out as we're unlikely to change this.  "
      }
    ]
  },
  {
    "number": 11811,
    "title": "Consider using type alias for nested classes",
    "created_at": "2016-06-07T09:53:47Z",
    "closed_at": "2024-10-18T20:56:26Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11811",
    "body": "**Version Used**: 2.0.0.60428\n\n**Steps to Reproduce**:\n\n``` C#\nnamespace ConsoleApplication1\n{\n    using A = D;\n\n    class B1<T, U>\n    {\n        public class N { }\n    }\n    class B2<T> : B1<T, int> { } // two layers just for effect\n\n    class D : B2<string> { }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            A.N n = new B1<string, int>.N();\n        }\n    }\n}\n```\n\n**Actual Behavior**:\n`B1<string, int>` is suggested by autocomplete after `new`.\n\n**Expected Behavior**:\n`A.N` to be used in the autocomplete suggestion, or, perhaps in general, the type used for declaration to be suggested for instantiation.\n\nMaybe even quick fix to simplify `B1<string, int>` to `A`? Might be arguable what is simpler though.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11811/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-06-28T17:10:50Z",
        "body": "We do this for non-nested types already.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:56:26Z",
        "body": "Ckosing out given lack of community feedback on this and the complexity involved."
      }
    ]
  },
  {
    "number": 11712,
    "title": "Inline Temporary Variable creates unnecessary broken cast with generics & booleans",
    "created_at": "2016-06-02T13:32:12Z",
    "closed_at": "2017-07-17T21:41:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11712",
    "body": "**Version Used**: Dev14 Update 2\n\n``` C#\nbool M<T>(ref T x) {\n    var b = M(ref x);\n    return b || b;\n}\n```\n\nThe Inline Temporary Variable refactoring (on `b`) gives\n\n``` C#\nbool M<T>(ref T x) {\n    return M(ref x) || M(ref (T)x);\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11712/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "Shiney",
        "created_at": "2016-08-06T22:06:38Z",
        "body": "This seems to also happen if the code is not generic e.g.\n\n``` CSharp\n    bool S(ref int x)\n    {\n        var b = S(ref x);\n        return b || b;\n    }\n```\n\nHas the same issue. Also the self reference is not necessary (but makes the sample code shorter).\n\nWhat is the correct behavior in this case anyway? It won't really be a refactoring if the method with the ref parameter being called does something like increment the ref parameter.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-08-08T21:27:38Z",
        "body": "> What is the correct behavior in this case anyway?\n\n`return M(ref x) || M(ref x);`?\nor optimally for both `b || b` and `b && b`, it could just be `return M(ref x);`..\n"
      }
    ]
  },
  {
    "number": 11569,
    "title": "VB partial completion provider qualifies type names when there's a matching member name",
    "created_at": "2016-05-26T00:32:04Z",
    "closed_at": "2024-10-18T20:55:12Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11569",
    "body": "**Version Used**: Version 14.0.25123.00 Update 2\n\n**Steps to Reproduce**:\n\n```\nClass Foo(Of T)\n    Sub Foo()\n    End Sub\nEnd Class\n\nPartial Class $$Foo(Of T)\nEnd Class\n```\n\nTrigger the completion list at $$.\n\n**Expected Behavior**:\nThe type name in the completion list should not be qualified.\n\n**Actual Behavior**:\nThe completion list item is qualified with either the containing namespace name or `Global`.\n\nFound as part of #7213 and #4137, but it's not fixed by my current changes.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11569/comments",
    "author": "lorcanmooney",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:55:12Z",
        "body": "Closing out as not having heard more customer feedback on this."
      }
    ]
  },
  {
    "number": 11213,
    "title": "IntelliSense stopped working after `fixed` statements",
    "created_at": "2016-05-10T13:24:23Z",
    "closed_at": "2016-05-21T00:09:24Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11213",
    "body": "**Version Used**: \n\nVisual Studio 2015 Update 2 _and_ Newest `features/patterns` branch.\n\n**Steps to Reproduce**:\n1. Create a new C# project and allow unsafe code\n2. Type the following code:\n   \n   ```\n   unsafe\n   {\n       var buffer = new byte[100];\n       fixed (byte* b = buffer) |\n   }\n   ```\n3. Press `Ctrl + J` at `|`\n\n**Expected Behavior**:\n\nIntelliSense pops up a list of available items.\n\n**Actual Behavior**:\n\nNothing happened.\n\n**And**:\n\nMultiple continuous `fixed` statements should have same indention like `using` statements.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11213/comments",
    "author": "yume-chan",
    "comments": [
      {
        "user": "DustinCampbell",
        "created_at": "2016-05-10T16:44:01Z",
        "body": "It works if braces are added. I bet this isn't considered a statement context by the IDE (though it should be).\n"
      },
      {
        "user": "lorcanmooney",
        "created_at": "2016-05-15T15:56:58Z",
        "body": "@DustinCampbell you're right, that was the issue.\n\nThe formatting/indentation behaviour is also a little weird when a `fixed` statement doesn't have an associated `BlockSyntax`. I've followed the implementation for `using`, and think I've tracked down all the places that need to be updated.\n"
      }
    ]
  },
  {
    "number": 11008,
    "title": "Incorrect IDE004 \"Cast is redundant\" hint",
    "created_at": "2016-05-01T16:24:36Z",
    "closed_at": "2021-12-08T01:45:30Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/11008",
    "body": "**Version Used**: \nMicrosoft Visual Studio 2015 14.0.25123.0 Update 2\n.NET Framework 4.6.01038\n\n**Steps to Reproduce**:\nWrite code:\n\n``` c#\nstatic class Program\n{\n  static readonly long x = -(long)int.MinValue;\n}\n```\n\n**Expected Behavior**:\nNo compiler hints\n\n**Actual Behavior**:\nIDE0004 Cast is redundant\n\nIf the cast is removed:\nCS0220 The operation overflows at compile time in checked mode\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/11008/comments",
    "author": "IharBury",
    "comments": [
      {
        "user": "Allon-Guralnek",
        "created_at": "2016-07-06T14:22:07Z",
        "body": "I have another case where I get an incorrect: \"Cast is redundant\". I encountered this using Visual Studio Update 3. \n\nGiven any enum type named `E`, the following doesn't display any warning:\n\n``` csharp\nint? num = 1;\nstring s = ((E?)num)?.ToString();\n```\n\nBut chaining another method does cause this warning to be reported:\n\n``` csharp\nint? num = 1;\nstring s = ((E?)num)?.ToString().Replace('a', 'b');\n```\n\nThe `(E?)` above will have a \"Cast is redundant\" warning. But removing the cast will change the value of the string `s`, so the cast is not redundant.\n"
      },
      {
        "user": "IharBury",
        "created_at": "2016-07-06T14:30:45Z",
        "body": "<s>@Allon-Guralnek, maybe it's not exactly redundant, but it doesn't make sense either. When `num` is `null`, `?.ToString()` results in `null` and `.Replace` throws `NullReferenceException`. So the correct code would use `?.Replace` or would work with non-nullable `int`.</s>\n"
      },
      {
        "user": "Allon-Guralnek",
        "created_at": "2016-07-06T14:33:44Z",
        "body": "@IharBury, are you sure? I just tried running it when `num = null` and no `NullReferenceException` was thrown. The value of `s` was simply `null`.\n"
      },
      {
        "user": "tamlin-mike",
        "created_at": "2020-03-22T14:50:37Z",
        "body": "Amazing. Soon four years since this was reported, and still pushed back. Sweet lord...\r\n\r\n\"help wanted\"? More like _\"NEED HELP!\" (to replace managers)_.\r\n\r\nTo put some more fuel on the fire (different code, but still IDE0004):\r\n```\r\nclass C\r\n{\r\n  static uint fn1(sbyte a, sbyte b)\r\n  {\r\n    return (uint)((a << 8) | (int)b); // IDE0004\r\n  }\r\n  public uint fn2(sbyte a, sbyte b)\r\n  {\r\n    return (uint)((a << 8) | b); // CS0675\r\n  }\r\n}\r\n```\r\n\r\n_Please don't let those managers continue to do side-gigs for Boeing -- you could be on the next plane._"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-23T05:00:20Z",
        "body": "@tamlin-mike Would you like to contribute a fix here?  I can walk you through where it would go.  It sounds like you're enthusiastic about this issue.  It would def be great to be able to take that interest and allow you to fix the things impacting you :)\r\n\r\nLMK!  "
      }
    ]
  },
  {
    "number": 10938,
    "title": "Quick action terminates inserting code snippet",
    "created_at": "2016-04-28T07:57:41Z",
    "closed_at": "2024-10-18T20:50:36Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/10938",
    "body": "**Version Used**: 15.0.25123.0 PREVIEW\n\n**Steps to Reproduce**:\n1. Create a new console application.\n2. Use e.g. propfull snippet to start creating a new property\n3. Use `File` as property type. A quick action will be offered to add `using System.IO` ... (sort of you just need to deal with the annoying but useless `FileStyleUriParser` ;-))\n4. Add the using as offered by the quick action.\n\n**Expected Behavior**:\nBe able to continue editing the snippet, i.e. using Tab to switch between snippet fields and `File` to be used in the other place of propfull.\n\n**Actual Behavior**:\nThe snippet editing is terminated by the quick action. The property is left with `File` and `int`.\n\nThis is a regression from VS 2013.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/10938/comments",
    "author": "miloush",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:50:36Z",
        "body": "CLosing out as something we just haven't heard about from other customers.   So doesn't meet the bar given compelxit of impl."
      }
    ]
  },
  {
    "number": 10428,
    "title": "Formatting of empty for loops: \"for(;;)\"",
    "created_at": "2016-04-08T17:49:13Z",
    "closed_at": "2017-05-18T14:51:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/10428",
    "body": "Paste\n\n``` C#\nfor (;;)\n```\n\n**Expected Behavior**:\n\n``` C#\nfor ( ; ; )\n```\n\n**Actual Behavior**:\n\n``` C#\nfor (;;)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/10428/comments",
    "author": "Pilchie",
    "comments": [
      {
        "user": "svick",
        "created_at": "2016-04-08T17:50:46Z",
        "body": "Why would `for ( ; ; )` be the expected behavior? Isn't `for (;;)` more common, if you decide to write an infinite loop as `for`?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-04-08T17:52:14Z",
        "body": "VS2005 through VS2013 all formatted it as `for ( ; ; )`, so I would expect that to be more common.\n"
      },
      {
        "user": "0xd4d",
        "created_at": "2016-04-08T18:19:45Z",
        "body": "I tested VS2010, VS2012, VS2013 (all settings were reset to the default values) and they all formatted it as `for (; ; )`, i.e., no space after `(`.\n\nI personally prefer `for (;;)` though.\n"
      },
      {
        "user": "HaloFour",
        "created_at": "2016-04-08T20:46:12Z",
        "body": "Sounds like neither is correct given that both ignore the formatting options specified by the user.  Either it should be `for (; ; )` by default, or there should be another option pertaining to the format of for loops without initializers, conditions and/or iterators.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-04-08T22:04:29Z",
        "body": "@HaloFour The old formatting engine had a special case for this IIRC, it's not necessarily worth another option.\n"
      }
    ]
  },
  {
    "number": 10406,
    "title": "Conflicts resolved during rename should be formatted if appropriate.",
    "created_at": "2016-04-07T17:38:59Z",
    "closed_at": "2023-02-17T02:01:55Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info",
      "Feature - Rename"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/10406",
    "body": "Related to #8334 (cc @bmay2, @dpoeschl)\n1.  Paste into a VB editor:\n\n``` VB\nImports System.Runtime.CompilerServices\n\nModule E\n    <Extension>\n    Public Function Bar(x As C, i As Integer) As C\n        Return x\n    End Function\nEnd Module\n\nClass C\n    Function Foo(i As Integer) As Integer\n        Return Me.Bar(1).Foo(2)\n    End Function\nEnd Class\n```\n1.  Rename 'Bar' to 'Foo'\n\nRESULT:\n`return E.Foo(Me,1).Foo(2)`\nThere is no space before the 1.\n\nEXPECTED:\n`return E.Foo(Me, 1).Foo(2)`\nThere should be a space before the 1.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/10406/comments",
    "author": "brettfo",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:49:27Z",
        "body": "Need info if this is actually something worth investing in."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:01:57Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 10337,
    "title": "Feature Request: Add quick fixes for reference to inaccessible type",
    "created_at": "2016-04-05T00:14:19Z",
    "closed_at": "2024-10-21T19:36:42Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "0 - Backlog"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/10337",
    "body": "If I use a type from a location it isn't visible to, I get a CS0122 for the reference, but no quick fixes at all.\n\nThis should offer the usual quick fix to create a new type, plus, if it's not from metadata, a new action to make the type public (ideally recursively publicising all types of now-public members)\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/10337/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-14T21:09:00Z",
        "body": "We would probably take a PR for this."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:36:42Z",
        "body": "Closing due to lack of feedback."
      }
    ]
  },
  {
    "number": 9863,
    "title": "Proposal: New IntelliSense suggestions for 'get' and 'set' presence in property declaration",
    "created_at": "2016-03-17T22:35:25Z",
    "closed_at": "2024-10-18T20:52:37Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/9863",
    "body": "Currently when one declare a new property there is no any IntelliSense suggestions for `get` and `set` presence. \n\nIt would be great to see some very common patterns on the list of suggestions: `get;`, `get; set;`, `get; private set;` and so on. Also it is possible to find a backing fields for that property and suggest getter and setter with them too.\n\n**How it can work**\nThe suggestions would be shown on `{` right after the property declaration:\n\n```\nprivate string _name;\npublic string Name {\n                    ^ Here the following suggestions can be displayed:\n                      get;\n                      get; set;\n                      get; private set;\n                      get { return _name; }\n                      get { return _name; } set { _name = value; }\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/9863/comments",
    "author": "ikopylov",
    "comments": [
      {
        "user": "lachbaer",
        "created_at": "2016-03-18T13:49:02Z",
        "body": "@ikopylov There are some code snippets that all start with `prop...` namely `prop`, `propg` and `propfull`. Try those.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2016-03-21T16:16:04Z",
        "body": "Triggering on space here is an interesting idea. Anyone interested in taking a look?\n"
      },
      {
        "user": "miloush",
        "created_at": "2016-05-22T15:55:29Z",
        "body": "Looks like another scenario that could benefit from using Roslyn for code snippets...\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:52:37Z",
        "body": "Unlikely to do this given lack of feedback."
      }
    ]
  },
  {
    "number": 8922,
    "title": "(VB) F1 context help for event object qualifier is wrong",
    "created_at": "2016-02-19T15:49:43Z",
    "closed_at": "2024-10-18T20:45:04Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8922",
    "body": "Example code:\n\n```\nPrivate Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n\nEnd Sub\n```\n\nPrior to VS2015, if you had the cursor on **Handles *_or *_Button1** and hit F1, you would get the correct help topic on MSDN. However if you hit F1 with the cursor on the **Click** event, you would get the help topic for the sub statement keyword.\n\nIn VS2015 this behavior is fixed for Click, but has regressed to now show the sub statement help topic if you hit F1 with the cursor on the object (Button1).\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8922/comments",
    "author": "mkleinwaks",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:45:04Z",
        "body": "Unlikely to change this behavior now, especially without more customer feedback on this."
      }
    ]
  },
  {
    "number": 8446,
    "title": "Ref returns/locals: Event Hookup on Tab does not appear on refs to events",
    "created_at": "2016-02-06T01:42:43Z",
    "closed_at": "2024-10-18T20:44:00Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Ref Locals and Returns"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8446",
    "body": "Try event hookup on `x` & `e` in this code:\n\n``` C#\nusing System;\n\nclass C\n{\n    event EventHandler e;\n\n    void M()\n    {\n        ref var x = ref e; // \"e += \" on the next line causes Event Hookup, but \"x += \" does not.\n\n    }\n}\n```\n\n**Expected**: The event hookup quick info should appear and tab should create the handler method for both `x` and `e`\n**Actual**: It only works on `e`\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8446/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "DustinCampbell",
        "created_at": "2016-02-09T17:27:13Z",
        "body": "@Pilchie and I don't think this will be a common scenario, but good catch!\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:44:01Z",
        "body": "Closing out as an uncommon scenario that we haven't heard about from any customers."
      }
    ]
  },
  {
    "number": 8353,
    "title": "ParseOptions.CommonWithKind should be marked EditorBrowsable.Never",
    "created_at": "2016-02-02T23:02:28Z",
    "closed_at": "2016-05-09T00:33:26Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8353",
    "body": "The rest of the Common\\* ones are private; this seems unexpected. It's unclear to me if this shipped or not.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8353/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2016-02-03T22:08:22Z",
        "body": "This was shipped as public in 1.0.\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2016-02-05T01:02:23Z",
        "body": "Can we at least hide it with EditorBrowsable.Never, or [Obsolete] or something?\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-02-05T01:10:48Z",
        "body": "I'd be fine with `EditorBrowsable`.  \n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2016-02-12T01:59:56Z",
        "body": "Reactivate then to track that.\n"
      },
      {
        "user": "eriawan",
        "created_at": "2016-03-28T06:30:10Z",
        "body": "Hi @jasonmalinowski and @jaredpar ,\n\nSince this \"up for grabs\" is quite here for long, could I take the initiative to create a PR for this? Or has this issue already been solved?\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2016-03-28T17:22:55Z",
        "body": "@jaredpar owns this area, so it's up to him, but I have no problem with it. We do use GitHub as our primary issue tracker, so being active here means we think it's still a problem.\n"
      },
      {
        "user": "eriawan",
        "created_at": "2016-04-01T04:11:20Z",
        "body": "@jasonmalinowski ok, thanks for your quick response :+1: \n\n@jaredpar could I grab this and make a PR?\n"
      },
      {
        "user": "eriawan",
        "created_at": "2016-05-07T16:21:16Z",
        "body": "@jaredpar \n\nThe related PR #10304 has been merged. Can we close this issue?\n\ncc @jasonmalinowski \n"
      }
    ]
  },
  {
    "number": 8334,
    "title": "Conflicts resolved during rename should be formatted if appropriate.",
    "created_at": "2016-02-02T19:13:57Z",
    "closed_at": "2016-04-07T17:41:31Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8334",
    "body": "Ported from internal bug 100093 (/cc: @brettfo)\n1.  Paste into a C# editor:\n   \n   ``` C#\n     static class E\n     {\n         public static C Bar(this C x, int i) { return x; }\n     }\n     class C\n     {\n         int Foo(int i)\n         {\n             return this.Bar(1).Foo(2);\n         }\n     }\n   ```\n2.  Rename 'Bar' to 'Foo'\n\nRESULT:\n`return E.Foo(this,1).Foo(2);`\nThere is no space before the 1.\n\nEXPECTED:\n`return E.Foo(this, 1).Foo(2);`\nThere should be a space before the 1.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8334/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "bmay2",
        "created_at": "2016-03-30T22:22:52Z",
        "body": "I'm trying to narrow down where the fix for this should go. It looks like the new \"this\" argument and comma are injected without leading/trailing trivia into Foo() in CSharpSimplificationService.RewriteExtensionMethodInvocation() . Do you think it makes sense to add trivia there or wait until somewhere later in RenamedSpansTracker.SimplifyAsync() to format the whole Solution?\n"
      },
      {
        "user": "brettfo",
        "created_at": "2016-03-30T23:14:43Z",
        "body": "You should be able to add elastic trivia to both the `this` keyword and the comma, then the formatter will take care of it.  I think the syntax is something like\n\n``` C#\nsyntaxNode.WithLeadingTrivia(SyntaxFactory.ElasticMarker)\n    .WithTrailingTrivia(SyntaxFactory.ElasticMarker)\n    .WithAnnotation(Formatter.Annotation);\n```\n\n_Ninja edit:_ add the elastic trivia and the formatter annotation (if it's not already there or added elsewhere in the chain) in the `CSharpSimplificationService.RewriteExtensionMethodInvocation()` method you mentioned earlier.\n"
      },
      {
        "user": "bmay2",
        "created_at": "2016-03-31T16:28:56Z",
        "body": "It looks like just adding the formatter annotation is sufficient.\n"
      }
    ]
  },
  {
    "number": 8330,
    "title": "Intellisense filtering with no matches is worse than Dev12",
    "created_at": "2016-02-02T18:40:11Z",
    "closed_at": "2023-02-17T02:02:04Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8330",
    "body": "Description: Invoking Intellisense with <ctrl><space> sometimes positions farther from the result in the list than with VS 2013 \n\nRepro Steps:Declare a variable, e.g \"var YearIncome = 0;\" \nType somewhere in the same method \"yo\". Press escape to remove the Intellisense list. \nType <ctrl><space> to invoke the Intellisense list again: you are positionned at the top of the list, while it was in the \"y\" with previous versions. \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8330/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:40:05Z",
        "body": "Need info from community if there's actually an issue here."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:06Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 8328,
    "title": "‘Edit | Refactor | Encapsulate Field’ does not work if the cursor is before the field on the same line separated by whitespace",
    "created_at": "2016-02-02T18:26:41Z",
    "closed_at": "2024-10-18T20:42:16Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8328",
    "body": "This is regressed form Dev12 Update 4.\n1.       Create a C# console application with the following.\n\n``` C#\nclass Program\n{\n    string someField;\n    static void Main(string[] args)\n    {\n    }\n}\n```\n1.       Move the cursor to the line with someField in the first column so that there is space between the cursor and ‘string’.\n2.       Invoke ‘Edit | Refactor | Encapsulate Field’\n\nExpected: A suggestions pops up asking you to encapsulate someField.\n\nActual: A dialog pops up with the following text: ‘Please select the definition of the field to encapsulate.’\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8328/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:42:16Z",
        "body": "Closing out.  This is incredibly minor and we haven't gotten any customer feedback on this."
      }
    ]
  },
  {
    "number": 8327,
    "title": "Unqualified simplifiable types don't appear in XML doc comment type IntelliSense",
    "created_at": "2016-02-02T18:20:46Z",
    "closed_at": "2024-10-18T20:41:14Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8327",
    "body": "Inside `<see cref=\"\" />`, typenames like Int64, or names of types with aliases in scope, don't appear.\n\nThey do appear when prefixed with their namespaces.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8327/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2016-02-02T18:21:02Z",
        "body": "FYI @slaks\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:41:14Z",
        "body": "This doesn't repro for me.  Closing out."
      }
    ]
  },
  {
    "number": 8325,
    "title": "Add error preview to encapsulatefield code action",
    "created_at": "2016-02-02T18:17:24Z",
    "closed_at": "2024-10-18T20:40:53Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8325",
    "body": "in some error cases, encapsulte field will show entry in the lightbulb but when applied it will do nothing and there will be no preview.\n\nencapsulatefield codeaction should override GetOperationsAsync and return PreviewOperation with an error messsage in it.\n\nex)\n\n``` C#\nclass A\n{\npublic int s = \"aaa\"; | <= caret\npublic int s = \"aaa\";\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8325/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:40:53Z",
        "body": "Haven't heard any feedback on this.  No need to do this."
      }
    ]
  },
  {
    "number": 8323,
    "title": "IntelliSense shows named argument that was already passed positionally",
    "created_at": "2016-02-02T18:14:39Z",
    "closed_at": "2023-02-03T20:23:08Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8323",
    "body": "Keystrikes:\n\n``` C#\nint.Parse(\"\", style: 0, \n```\n\nPressing Ctrl+Space will show both `provider:` and `s:`, even though `s:` was already specified as the first positional argument.\n\nThis also happens if you don't pass any named arguments:\n\n``` C#\nstring.Intern(\"\", str\n```\n\nIntelliSense will show `str:`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8323/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2016-02-02T18:15:12Z",
        "body": "FYI @slaks\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T20:23:08Z",
        "body": "Closing out as we're unlikely to change anything here.  It's been 7 years without anyone raising this as a problem.  Generally speaking, its' fine for completion to show extra items.  This may also be helpful as users may type in arbitrary orders, or may be rejiggering existing code.  Showing them extra stuff is fine. "
      }
    ]
  },
  {
    "number": 8316,
    "title": "Debugger intellisense doesn't work when breaking on constructor calls to base class",
    "created_at": "2016-02-02T17:49:20Z",
    "closed_at": "2024-10-18T20:40:30Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8316",
    "body": "Start VS, create a new C# console app and paste this:\n\n``` C#\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main()\n        {\n            var x = new derived(\"test\");\n        }\n    }\n\n    class baseclass\n    {\n        public baseclass(string s) { }\n    }\n\n    class derived : baseclass\n    {\n        public derived(string s) : base(s)\n        { }\n    }\n}\n```\n\nSet a breakpoint on the highlighted line, and hit F5.\nWhen you hit the breakpoint, type 's.' in the watch window\n\nExpected results:\nIntellisense should show up for 's' after typing '.'\n\nResults:\nNo intellisense.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8316/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2016-02-02T17:49:39Z",
        "body": "VS 2013 behaves similarly.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:40:30Z",
        "body": "Not repro on latest builds."
      }
    ]
  },
  {
    "number": 8314,
    "title": "Keyword Recommenders: We show 'And', 'AndAlso', 'Is', 'Or', and similar stuff after 'For Each var In Foo '",
    "created_at": "2016-02-02T17:46:47Z",
    "closed_at": "2024-10-18T20:39:44Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8314",
    "body": "```\nModule Program\n    Sub Main(args As String())\n        For Each x In {1, 2, 3} $$\n        Next\n\n    End Sub\nEnd Module\n```\n\nHit space after {1, 2, 3} ($$)\n\nResults:\nWe show a bunch of stuff that makes sense in an If-statement: And, AndAlso, Is, IsNot, Like, Mod, Or, OrElse, Xor\n\nExpected results:\nEnd of statement here, so we shouldn't show anything.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8314/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:39:44Z",
        "body": "Closing out as we haven't gotten any customer requests for this."
      }
    ]
  },
  {
    "number": 8313,
    "title": "VB Completion list: \"As\" keyword is not recommended in a nullable declaration",
    "created_at": "2016-02-02T17:45:37Z",
    "closed_at": "2024-10-18T20:40:02Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8313",
    "body": "1. open a VB project\n2. inside Main, type\n\nDim a? As Integer\n\nExpected: As shows up in keyword recommender after a?\nActual: No completion after a?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8313/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:40:02Z",
        "body": "Clsoing out as we've gotten no customer feedback on this."
      }
    ]
  },
  {
    "number": 8311,
    "title": "Auto completion should not propose a module or not newable type after new or as new",
    "created_at": "2016-02-02T17:41:24Z",
    "closed_at": "2023-02-17T02:02:07Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8311",
    "body": "It does not make sense to get \"Program\" as a recommendation if it's a module.\n\n```\nModule Program\n    Sub Main\n        dim f as new P<place cursor here and check completion list>\n    End Sub\nEnd Module\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8311/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "markhurd",
        "created_at": "2016-02-20T04:27:17Z",
        "body": "I don't think the behaviour here should change. If there were any subclasses of `Program`, they'd be accessible after completion.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:22:39Z",
        "body": "Need info if this is actually a problem for the ecosystem."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:09Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 8310,
    "title": "Xml doc probably should follow the generated property after encapsulating field",
    "created_at": "2016-02-02T17:40:32Z",
    "closed_at": "2023-02-17T02:02:10Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8310",
    "body": "1. paste the following code\n\n``` C#\n    class C\n    {\n        /// <summary>\n        /// Serial Number\n        /// </summary>\n        /// <remarks>\n        /// Unique Id.\n        /// </remarks>\n        public string Id;\n\n        /// <summary>\n        /// Name\n        /// </summary>\n        /// <remarks>\n        /// Name of this card.\n        /// </remarks>\n        public string Name;\n    }\n```\n1. invoke encapsulate field on \"public string Id;\"\n\nExpected:\n\nMost likely users would want the xml doc for the field to be transferred to the generated property as it is public while the field now becomes private.\n\nActual:\nxml doc stays with the now private field, while the property is down the botteom.\n\n``` C#\n    class C\n    {\n        /// <summary>\n        /// Serial Number\n        /// </summary>\n        /// <remarks>\n        /// Unique Id.\n        /// </remarks>\n        private string id;\n        /// <summary>\n        /// Name\n        /// </summary>\n        /// <remarks>\n        /// Name of this card.\n        /// </remarks>\n        public string Name;\n\n        public string Id\n        {\n            get\n            {\n                return id;\n            }\n\n            set\n            {\n                id = value;\n            }\n        }\n    }\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8310/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:22:07Z",
        "body": "Need info from ecosystem if this is really desired.  Haven't heard anything about this in 7 years."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:12Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 8294,
    "title": "Perceived PERF issue in preview colorization when toggling/switching to formatting options",
    "created_at": "2016-02-01T23:56:11Z",
    "closed_at": "2023-02-03T20:24:18Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8294",
    "body": "There's a noticeable delay in the semantic classification when toggling formatting options or switching among different options.  For example, the colorization of \"Exception\" in New Lines page.\n\nDavid suggested that we could use the same document that contains all the code examples, and project the relevant part for each options. \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8294/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T20:24:18Z",
        "body": "Closing out as there really doesn't seem to be an issue here, and this is such a narrow space, it's not worth investing in (esp. if this all gets ripped out anyways with new LSP/editorconfig oriented options systems)."
      }
    ]
  },
  {
    "number": 8292,
    "title": "[VB] 'Simplify type name' on Global alias and base class name introduces a conflict",
    "created_at": "2016-02-01T23:53:00Z",
    "closed_at": "2024-11-29T02:20:29Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8292",
    "body": "```\nClass Base\n    Public Sub New(x As Integer)\n    End Sub\nEnd Class\nClass Derived : Inherits Base\n    ''' <summary>\n    ''' <see cref=\"Global.Base.New(Integer)\"/>\n    ''' </summary>\n    ''' <param name=\"x\"></param>\n    Public Sub New(x As Integer)\n        MyBase.New(x)\n    End Sub\n    Public Sub Base(x As Integer)\n    End Sub\nEnd Class\n```\n1. Put the cursor on the Global modifier.\n2. Observe the light bulb to appear with \"Simplify type name\" suggestion. Accept it.\n\nExpected:\n\"Simplify type name\" suggestion does not appear\n\nActual:\nAfter \"Global.\" is removed, cref=\"Base.New(Integer)\" can no longer be resolved, as it considers \"Base\" to be the name of the method in Derived class\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8292/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T02:20:29Z",
        "body": "Closing out as this is an area we are no longer investing in."
      }
    ]
  },
  {
    "number": 8291,
    "title": "VB Completion List should NOT include \"Shared\" keyword after \"Const\"",
    "created_at": "2016-02-01T23:51:14Z",
    "closed_at": "2023-02-07T01:21:31Z",
    "labels": [
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8291",
    "body": "```\nClass C\n    Const $$\nEnd Class\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8291/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2016-02-01T23:51:48Z",
        "body": "`Shared` appears in the list at $$.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:21:31Z",
        "body": "Closing out as not being important enough to fix.  It's acceptable for completion to show a superset of what is available."
      }
    ]
  },
  {
    "number": 8278,
    "title": "Outlining: Allow collapsing VB Select Case and Case statements",
    "created_at": "2016-02-01T18:48:31Z",
    "closed_at": "2024-10-18T20:48:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8278",
    "body": "Suggested though VS Feedback\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8278/comments",
    "author": "DustinCampbell",
    "comments": [
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-02-01T19:14:23Z",
        "body": "@DustinCampbell :+1:  :+1: \nWhilst at it can we also do the following collapses.\n- Multi-line Lambdas\n- `If  Then` blocks.\n\n``` vb\nIf ... Then\n...\nElse If ... Then\n...\nElse\n...\nEnd If\n```\n- Looping Blocks\n  - `While ... End While`\n  - `For ... Next`\n  - `For Each ... Next`\n  - `Do ... Loop Until`\n  - `Do ... Loop While`\n  - `Do While ... Loop`\n  - `Do Until ... Loop`\n- Method Parameters\n- Array LIterals \n\nOr put simply anything that is over multiple lines.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2016-02-01T21:56:37Z",
        "body": "@AdamSpeight2008 multi-line lambdas already work. We added that in VS 2015.\n\nGood suggestions, thanks.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2016-04-14T17:57:45Z",
        "body": "Note: I think we would want options for this behavior if somebody wants to do it.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:48:18Z",
        "body": "No repro anymore. This appears to have been implemented."
      }
    ]
  },
  {
    "number": 8153,
    "title": "Change Signature: removing parameter leaves empty line in xml doc comments",
    "created_at": "2016-01-25T15:26:03Z",
    "closed_at": "2024-10-21T20:14:50Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8153",
    "body": "Ported from internal bug 125787\n1. paste the following code.  Invoke remove parameter on `Foo`, remove `x`, Apply\n\n``` VB\n''' <summary>\n''' ssss <see cref=\"Foo(Integer, String)\"/>\n''' </summary>\n''' <param name=\"x\">x x x </param>\n''' <param name=\"y\">y y y </param>\nSub Foo(x As Integer, y As String)\nEnd Sub\n```\n\n**Expected**: no empty xml doc comment line\n**Actual**:\n\n``` VB\n''' <summary>\n''' ssss <see cref=\"Foo(String)\"/>\n''' </summary>\n''' <param name=\"y\">y y y </param>\n''' \nSub Foo(y As String)\nEnd Sub\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8153/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpen2000",
        "created_at": "2016-02-05T22:55:43Z",
        "body": "@dpoeschl This also happens with C# code like this:\n\n```\n/// <summary>\n/// \n/// </summary>\n/// <param name=\"a\"></param>\n/// <param name=\"b\"></param>\nvoid Foo(string a, string b)\n{ }\n```\n\nI can fix this one. Question though. Consider the y parameter xml comment line looks like this:\n\n```\n''' some other leading comment <param name=\"y\">y y y </param>\n```\n\nOr this:\n\n```\n''' <param name=\"y\">y y y </param> some other trailing comment\n```\n\nShould we remove the entire line in both of these cases? Or preserve the line because we don't know those comments should be removed? I presume we want to preserve these comments and only remove  the line in the case where the line would be left empty currently.\n"
      },
      {
        "user": "camillemarie",
        "created_at": "2020-04-03T20:09:16Z",
        "body": "Bumping this as the bug still exists.\r\nI can reproduce it in this version:\r\n\r\n - Microsoft Visual Studio Enterprise 2019\r\n   - Version 16.5.0\r\n   - VisualStudio.16.Release/16.5.0+29911.84\r\n\r\n - Microsoft .NET Framework\r\n    - Version 4.8.03752\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T20:14:50Z",
        "body": "Closing out as we are not likely to change thse vb experiences."
      }
    ]
  },
  {
    "number": 8149,
    "title": "Audit uses of Workspace.TryApplyChanges that do not observe the return value",
    "created_at": "2016-01-25T05:38:53Z",
    "closed_at": "2024-10-19T21:13:10Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Concept-Continuous Improvement"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8149",
    "body": "Ported from internal bug 127469\n\nMany places call Workspace.TryApplyChanges but do not observe its return value. Some have //todo comments and some just ignore it (perhaps incorrectly).\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8149/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2018-07-31T18:59:48Z",
        "body": "(the above 2 changes was @jmarolf making changes using my phone 😬)"
      },
      {
        "user": "jmarolf",
        "created_at": "2018-07-31T23:41:52Z",
        "body": "👍 👍 👍 "
      },
      {
        "user": "sharwell",
        "created_at": "2018-08-07T16:58:55Z",
        "body": "Good data flow analyzer candidate"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T21:13:10Z",
        "body": "Closing as speculative."
      }
    ]
  },
  {
    "number": 8147,
    "title": "NavBar & Change Signature shouldn't show a numeric literal for special values of optional parameters",
    "created_at": "2016-01-24T23:47:26Z",
    "closed_at": "2024-10-18T20:37:10Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8147",
    "body": "Ported from internal bug 100950\n1. Paste this code:\n\n``` C#\n interface I\n {\n     void Foo(decimal x = decimal.MaxValue);\n }\n```\n1. Position the caret on the method\n\n**Expected**: In the right NavBar combo, there should be `Foo(decimal x = decimal.MaxValue)`\n\n**Actual**: `Foo(decimal x = 79228162514264337593543950335)`\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8147/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2016-01-24T23:48:33Z",
        "body": "Note from @DustinCampbell - I took a look here and appears that the code to show the user's code will need to be factored out of the symbol description service. Or, the symbol description code will need to become a more general service, taking arbitrary symbol formats. At the moment, NavBar can't simply use it without inheriting a bunch of display quirks from Quick Info and Signature Help.\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2016-01-24T23:49:41Z",
        "body": "This also affects the Change Signature dialog \"Default\" column\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:37:11Z",
        "body": "Closing out as too costly to justify the complexity needed to solve this, along with the lack of any customer feedbakc on this issue. "
      }
    ]
  },
  {
    "number": 8145,
    "title": "Nested types from other partial parts are not present in the nav bar",
    "created_at": "2016-01-24T22:16:43Z",
    "closed_at": "2024-10-18T20:36:24Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8145",
    "body": "Ported from internal bug 97926\n1. Add two VB files to VS. Define Partial Class C with a part in each file. Add a nested type Class D to one of the parts. Go to the other file and put the caret inside C. \"D\" is not listed in the middle nav bar.\n\nFile1.vb\n\n``` VB\nPartial Class C\n    Class D\n    End Class\nEnd Class\n```\n\nFile2.vb\n\n``` VB\nPartial Class C\n    $$\nEnd Class\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8145/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2016-01-24T22:17:11Z",
        "body": "The current behavior matches that of Visual Studio 2013 and prior, but we'd still like to include these nested types in the nav bar.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:36:24Z",
        "body": "Closing out given lack of any customer requests for this."
      }
    ]
  },
  {
    "number": 8141,
    "title": "Change signature on collection initializer add methods",
    "created_at": "2016-01-24T19:25:44Z",
    "closed_at": "2024-10-18T20:35:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8141",
    "body": "Ported from internal bug 97241\n\nSteps to reproduce:\n1. Try to reorder parameters at the $$:\n\n``` C#\nusing System;\nusing System.Collections;\n\nclass Program : IEnumerable\n{\n    static void Main(string[] args)\n    {\n        new Program { { 1, 2 }, { \"\"three\"\", \"\"four\"\" }, { 5, 6 } };\n    }\n\n    public void Add(int x, int y)$$ { }\n\n    public void Add(string x, string y) { }\n\n    public IEnumerator GetEnumerator() { throw new NotImplementedException(); }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8141/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:35:58Z",
        "body": "Closing out as too costly to justify the complexity given lack of customer feedback."
      }
    ]
  },
  {
    "number": 48160,
    "title": "Passed by reference before it has been assigned a value",
    "created_at": "2016-01-22T03:12:04Z",
    "closed_at": "2023-11-21T23:18:04Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48160",
    "body": "``` vb.net\nDim foo as MyObj\nMyFUnction( foo )\n```\n\n> Variable 'foo' is passed by reference before it has been assigned a value. A null reference exception could occur at runtime.\n\nIt should also offer code-fix  `assign default value (Nothing)`\n\n**Result:**\n\n```\nDim foo As MyObj = Nothing\nMyFUnction( foo )\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48160/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "Evangelink",
        "created_at": "2020-09-29T08:21:20Z",
        "body": "I can see that this is a compiler warning for C#, could it also be a compiler warning for vbnet?"
      },
      {
        "user": "mavasani",
        "created_at": "2020-09-29T14:18:17Z",
        "body": "Code fixes for compiler warnings are not implemented in this repo, they are done in Roslyn."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:18:49Z",
        "body": "Need info to determine if this is important enough to warrant any investmnet here."
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2023-02-09T20:39:36Z",
        "body": "It's a just would be nice to have code-fix for the warning, maybe make it an \"up for grabs\""
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-09T20:41:42Z",
        "body": "@AdamSpeight2008 are you interested in contributing something here?\r\n\r\ni'm generally feel pretty meh on this as a fix that just adds two tokens is really not much better than just using completion to write it out by hand."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-11-21T23:18:04Z",
        "body": "Unlikely to add feature given no feedback and VB space.  closing out."
      }
    ]
  },
  {
    "number": 8048,
    "title": "We don't handle a C# file in a VB project correctly",
    "created_at": "2016-01-20T17:07:02Z",
    "closed_at": "2022-02-04T19:08:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8048",
    "body": "Ran into this converting some C# code to VB:\n1. Create a C# file in a VB project, with the following contents\n\n``` VB\nnamespace Microsoft.VisualStudio.Shell.Interop\n{\n    [ComImport()]\n    [ComVisible(false)]\n    <Guid(\"C1F63D0C-4CAE-4907-BE74-EEB75D386ECB\")> $$ <InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)>\n    internal interface IVsSqm\n    {\n        void GetSessionStartTime(\n            [Out] out System.Runtime.InteropServices.ComTypes.FILETIME time\n            );\n        void GetFlags(\n            [Out, MarshalAs(UnmanagedType.U4)] out System.UInt32 flags\n            );\n        void SetFlags(\n            [In, MarshalAs(UnmanagedType.U4)] System.UInt32 flags\n\n```\n1. At $$, press ENTER\n\n@Expected: New line\n@Actual: \n\n```\n---------------------------\nMicrosoft Visual Studio\n---------------------------\nUnable to cast object of type 'Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax'.\n---------------------------\nOK   \n---------------------------\n```\n\nApparently this is a dupe but couldn't find it.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8048/comments",
    "author": "davkean",
    "comments": [
      {
        "user": "davkean",
        "created_at": "2016-01-20T17:18:06Z",
        "body": "Weirdly, the compiler is treating the file as VB - but the workspace appears to be treating it as C# file.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2016-01-22T02:04:45Z",
        "body": "I reported something similar in #5375\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-01-22T17:44:34Z",
        "body": "We think this is a dupe, but couldn't find it.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2016-01-22T20:04:04Z",
        "body": "@pilchie #5375 but it was closed. \n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2016-01-22T20:27:34Z",
        "body": "@paul1956: that was a unique problem with the Analyzer templates.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T19:08:28Z",
        "body": "Closing out as this does not repro for me.  I observe no failures or unexpected behavior editing a cs file in a vb project."
      }
    ]
  },
  {
    "number": 8011,
    "title": "[ide] Escaped Keyword Identifiers",
    "created_at": "2016-01-17T22:48:36Z",
    "closed_at": "2016-04-22T17:04:32Z",
    "labels": [
      "help wanted",
      "Resolution-Won't Fix",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/8011",
    "body": "Can we update the intellisense list for VB.net to include escaped keyword identifiers. \neg `( [optional] as boolean )`\n\nSo that on typing `['.`[optional]`is one of the first, within the list. \nInstead having to type`optio` then find it in the list.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/8011/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2016-01-19T17:29:05Z",
        "body": "A few notes here:\n1. C# does show escaped identifiers with the `@` in the list.\n2. Note that there seems to be a parse issue with having an unclosed `[`.  If you turn automatic brace completion off, the completion list doesn't show at all.\n\nNot sure if it's worth triggering completion on `[`. \n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2016-01-19T17:40:22Z",
        "body": "In VB.net (I think) it could be starting an attribute or an escaped identifier. Both are equally likely give the context (of the repo above), slightly biased towards it being an identifier. Only trigger completion if it one of those contexts? @Pilchie \n"
      },
      {
        "user": "Pilchie",
        "created_at": "2016-01-19T18:29:06Z",
        "body": "Attributes in VB use `<`, so it's always going to be an identfier.\n"
      }
    ]
  },
  {
    "number": 7760,
    "title": "Unable to remove trailing trivia on code blocks",
    "created_at": "2016-01-04T01:55:46Z",
    "closed_at": "2022-02-04T19:09:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Resolution-Not Reproducible"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7760",
    "body": "The following code leaves a linefeed after the end-of-block token (CloseBraceToken) whether you want it there or not:\n\n```\n                //            if ((compare0 != 0))\n                //            {\n                //                return compare0;\n                //            }\n                    SyntaxFactory.IfStatement(\n                        SyntaxFactory.ParenthesizedExpression(\n                            SyntaxFactory.BinaryExpression(\n                                SyntaxKind.NotEqualsExpression,\n                                SyntaxFactory.IdentifierName(compare),\n                                SyntaxFactory.LiteralExpression(\n                                    SyntaxKind.NumericLiteralExpression,\n                                    SyntaxFactory.Literal(SyntaxFactory.TriviaList(), \"0\", 0, SyntaxFactory.TriviaList())))\n                            .WithOperatorToken(SyntaxFactory.Token(SyntaxKind.ExclamationEqualsToken)))\n                        .WithOpenParenToken(SyntaxFactory.Token(SyntaxKind.OpenParenToken))\n                        .WithCloseParenToken(SyntaxFactory.Token(SyntaxKind.CloseParenToken)),\n                        SyntaxFactory.Block(\n                            SyntaxFactory.SingletonList<StatementSyntax>(\n                                SyntaxFactory.ReturnStatement(SyntaxFactory.IdentifierName(compare))\n                                .WithReturnKeyword(SyntaxFactory.Token(SyntaxKind.ReturnKeyword))\n                                .WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken))))\n                        .WithOpenBraceToken(SyntaxFactory.Token(SyntaxKind.OpenBraceToken))\n                        .WithCloseBraceToken(SyntaxFactory.Token(SyntaxKind.CloseBraceToken)))\n                    .WithIfKeyword(SyntaxFactory.Token(SyntaxKind.IfKeyword))\n                    .WithOpenParenToken(SyntaxFactory.Token(SyntaxKind.OpenParenToken))\n                    .WithCloseParenToken(SyntaxFactory.Token(SyntaxKind.CloseParenToken)));\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7760/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T19:09:07Z",
        "body": "I'm not able to repro this, and the original filer is gone.  Absent other people reporting this, i'm closing this out."
      }
    ]
  },
  {
    "number": 7698,
    "title": "Wrong results from VB variable.Type.ToString",
    "created_at": "2015-12-24T23:23:51Z",
    "closed_at": "2023-02-04T00:52:37Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7698",
    "body": "I am looking to Analyze AbstractFlowPass.VB in Roslyn Source specifically the second line.\n\n```\nDim caseBlockStateBuilder = ArrayBuilder(Of LocalState).GetInstance(caseBlocks.Length)\n```\n\nI am trying to get the Type of ArrayBuilder(Of LocalState).GetInstance(caseBlocks.Length) which I believe is an ArrayBuilder(Of LocalState). using the Snippet of code below.\n\n```\nDim variableType As TypeInfo = Model.GetTypeInfo(lVariableDeclarator.Initializer.Value)\nDim expressionType As ITypeSymbol = variableTypeInfo.Type\n```\n\nThe variable expressionType contains the Type and looks almost perfect, except for the exception, in the Immediate Window as it is a NamedType whose value is Microsoft.CodeAnalysis.ArrayBuilder(Of LocalState).\n\n```\n?expressionType\nNamedType Microsoft.CodeAnalysis.ArrayBuilder(Of LocalState)\n    AllInterfaces: Length = 4\n    Arity: 1\n    AssociatedSymbol: Nothing\n    BaseType: NamedType System.Object\n    CanBeReferencedByName: True\n    ConstructedFrom: NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    Constructors: Length = 2\n    ContainingAssembly: Assembly Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    ContainingModule: NetModule Microsoft.CodeAnalysis.dll\n    ContainingNamespace: Namespace Microsoft.CodeAnalysis\n    ContainingSymbol: Namespace Microsoft.CodeAnalysis\n    ContainingType: Nothing\n    DeclaredAccessibility: Friend {4}\n    DeclaringSyntaxReferences: Length = 0\n    DefaultMarshallingCharSet: 'DirectCast(expressionType, Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol).DefaultMarshallingCharSet' threw an exception of type 'System.InvalidOperationException'\n    DelegateInvokeMethod: Nothing\n    EnumUnderlyingType: Nothing\n    HasUnsupportedMetadata: False\n    HighestPriorityUseSiteError: 30649\n    ISymbol_IsAbstract: False\n    ISymbol_IsSealed: True\n    ISymbol_IsStatic: False\n    InstanceConstructors: Length = 2\n    Interfaces: Length = 4\n    IsAnonymousType: False\n    IsDefinition: False\n    IsGenericType: True\n    IsImplicitClass: False\n    IsImplicitlyDeclared: False\n    IsMustInherit: False\n    IsMustOverride: False\n    IsNamespace: False\n    IsNotInheritable: True\n    IsNotOverridable: False\n    IsOverridable: False\n    IsOverrides: False\n    IsReferenceType: True\n    IsScriptClass: False\n    IsShared: False\n    IsSubmissionClass: False\n    IsType: True\n    IsUnboundGenericType: False\n    IsValueType: False\n    Kind: NamedType {11}\n    Language: \"Visual Basic\"\n    Locations: Length = 1\n    MemberNames: {Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection(Of System.Collections.Generic.ICollection(Of String), String)}\n    MetadataName: \"ArrayBuilder`1\"\n    MightContainExtensionMethods: False\n    Name: \"ArrayBuilder\"\n    OriginalDefinition (Microsoft.CodeAnalysis.VisualBasic.Symbol): NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    OriginalDefinition (Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol): NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    OriginalDefinition: NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    OriginalSymbolDefinition: NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    OriginalTypeSymbolDefinition: NamedType Microsoft.CodeAnalysis.ArrayBuilder(Of T)\n    SharedConstructors: Length = 0\n    SpecialType: None {0}\n    TypeArguments: Length = 1\n    TypeKind: Class {2}\n    TypeParameters: Length = 1\n```\n\nBut If I output expressionType.ToString in the mmediate Windows I get a strange result\n\n```\n?expressionType.tostring\n\"Microsoft.CodeAnalysis.ArrayBuilder(Of LocalState As Microsoft.CodeAnalysis.VisualBasic.AbstractFlowPass(Of LocalState).AbstractLocalState)\"\n```\n\nI have tried this same code on 10% of Roslyn Source and this is the only place so far I have seen this odd behavior. It looks like it throws an exception that I have not noticed before trying to get DefaultMarshallingCharSet: which in other cases is Ansi {2}.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7698/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "paul1956",
        "created_at": "2015-12-28T01:41:34Z",
        "body": "After some research it looks like this might be caused by the following errors\n\n```\nat Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol.get_DefaultMarshallingCharSet()\nat Microsoft.CodeAnalysis.VisualBasic.Symbol.get_EffectiveDefaultMarshallingCharSet()\nat Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.get_DefaultMarshallingCharSet()\n```\n\nI am unable to set breakpoint at this location to see what is going on, and creating a test requires copying too much of Roslyn source because most of the symbol types involved are not public.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-12-29T01:55:56Z",
        "body": "There are two issues here.\n\nFirst is the exception.\n\nSecond is the fact that we display the constraint on the type parameter with an `As` clause, which seems wrong.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-12-29T08:54:15Z",
        "body": "@gafter the As clause is only displayed when you do a .ToString, if you display in the debugger it looks correct but you see the exceptions. I would have assumed that the first line in the debugger (NameType in the example) should match what you get with .ToString and you do almost all the time.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-12-31T02:03:23Z",
        "body": "@gafter I have another example which also has the exception but the issue may not be the same.\n\nTrying to add As Clause\n\n```\nDim sortedDefines As IOrderedEnumerable(Of <anonymous type: Key As String, Value As Object>)= parsedArgs.ParseOptions.PreprocessorSymbols.Select(Function(d) New With {d.Key, d.Value}).OrderBy(Function(o) o.Key)\n```\n\nThe Type of the initializer is  IOrderedEnumerable(Of <anonymous type: Key As String, Value As Object>). This is also shown by the error BC30512 when I try to type the variable as something random.\n\n```\nCode    Description\nBC30512 Option Strict On disallows implicit conversions from 'IOrderedEnumerable(Of <anonymous type: Key As String, Value As Object>)'…\n```\n\nIf I set it to the Type expected I get 7 errors\n\n```\nCode    Description\nBC30180 Keyword does not name a type.\nBC30201 Expression expected.\nBC30451 'Key' is not declared. It may be inaccessible due to its protection level.\nBC30451 'Value' is not declared. It may be inaccessible due to its protection level.\nBC30451 'PreprocessorSymbols' is not declared. It may be inaccessible due to its protection level.\nBC30800 Method arguments must be enclosed in parentheses.\nBC32017 Comma, ')', or a valid expression continuation expected.\n```\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T20:27:15Z",
        "body": "I don't repro this.  Would need more information from paul if this is still a problem."
      },
      {
        "user": "paul1956",
        "created_at": "2023-02-04T00:52:37Z",
        "body": "Haven't run into this recently. I will close."
      }
    ]
  },
  {
    "number": 7615,
    "title": "Review usage of $(OutDir) in *.*proj and *.targets files",
    "created_at": "2015-12-19T00:55:22Z",
    "closed_at": "2017-02-01T16:15:39Z",
    "labels": [
      "help wanted",
      "Area-Infrastructure",
      "0 - Backlog"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7615",
    "body": "We are not consistently using '\\' separator when cobinging paths involving `$(OutDir)` variable and we also don't always quote the paths when constructing command lines.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7615/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "jaredpar",
        "created_at": "2017-02-01T16:15:39Z",
        "body": "This should be fixed now. "
      }
    ]
  },
  {
    "number": 7291,
    "title": "Find references reports references in in both methods in a duplicate method scenario",
    "created_at": "2015-12-07T21:09:48Z",
    "closed_at": "2020-03-14T10:18:21Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7291",
    "body": "Copy the following into a new C# project:\n\n``` C#\nusing System;\n\nclass Program\n{\n    public void Foo(int a, int b)\n    {\n        Console.WriteLine(a);\n        Console.WriteLine(b);\n    }\n\n    public void Foo(int a, int b)\n    {\n        Console.WriteLine(a);\n        Console.WriteLine(b);\n    }\n}\n```\n\nThen, click on any parameter a.\n\n_Expected:_ only the usages in one method are found\n_Actual:_ we find some uses in both methods, which seems bizzare\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7291/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-12-08T17:36:36Z",
        "body": "I've seen numerous related issues around rename.  It would be good to fix this.\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-12-18T22:12:26Z",
        "body": "The parameters are treated as equivalent, which is why this happens. If, in `AbstractReferenceFinder.OriginalSymbolsMatchCore`, we compare symbols from the same project directly instead of via the SymbolEquivalenceComparer, then this scenario works as expected. I'll add some tests then investigate to see if that behavior regresses other things.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-14T10:18:21Z",
        "body": "As per last design meeting, this is one of those cases where there is an error scenario and there is some fallout like the above.  In this case, the fallout seems minor (some extra references found), and it would likely be non-trivial to have to detect and workaround this case for all the normal find-refs cases.  So closing out as acceptable behavior."
      }
    ]
  },
  {
    "number": 7288,
    "title": "VB cref to C# default property does not show up in find all references",
    "created_at": "2015-12-07T21:04:09Z",
    "closed_at": "2024-10-19T22:01:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Disabled Test",
      "IDE-IntelliSense"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7288",
    "body": "- Create a C# project, paste the following code:\n\n```\npublic class Indexable\n{\n    public string this[int index]\n    {\n        get { return \"\"; }\n    }\n}\n```\n- Create a VB project, paste the following code:\n\n```\nClass Program\n    ''' <see cref=\"Indexable.Item(Integer)\"/>\n    Shared Sub Main()\n    End Sub\nEnd Class\n```\n- Reference C# project from VB project\n- Do a FAR on \"this\" in the C# file or on \"Item\" in VB file\n\n_Expected:_ 2 results - this definition in C# file and cref in the VB file\n_Actual:_ 1 result - this definition in C#. The cref is missing\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7288/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-19T22:01:46Z",
        "body": "Closing out due to lack of feedback."
      }
    ]
  },
  {
    "number": 7151,
    "title": "Progression type hierarchy doesn't launch Metadata-as-Source",
    "created_at": "2015-12-01T17:09:12Z",
    "closed_at": "2024-11-05T20:48:19Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7151",
    "body": "Right-click on a type in the Solution Explorer and select Base Types.  Double-click on object in the results.\n\nExpected: Something happens, preferably Metadata-as-Source\nActual: Nothing happens\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7151/comments",
    "author": "amcasey",
    "comments": [
      {
        "user": "amcasey",
        "created_at": "2015-12-01T17:09:17Z",
        "body": "FYI @rchande \n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-12-03T17:44:55Z",
        "body": "Note that a starting place to look here is in the GraphProvider stuff.  Why doesn't it just use the `SymbolNavigationService`?\n"
      }
    ]
  },
  {
    "number": 7113,
    "title": "Preselect default(T) after = in a non-primitive parameter declaration",
    "created_at": "2015-11-30T18:53:30Z",
    "closed_at": "2024-10-18T21:09:13Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/7113",
    "body": "Split from #1647, suggestion from @slaks\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/7113/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "SLaks",
        "created_at": "2015-11-30T18:55:14Z",
        "body": "Actually, for reference types, `null` is also valid\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-11-30T18:56:34Z",
        "body": "**Repro**:\n\nPaste C#:\n\n``` C#\nclass Program\n{\n    void M(Program p $$\n}\n```\n\nRemove the `$$` and type `=`\n\n**Expected**: Completion could offer `null` and `default(Program)`.\n**Actual**: No completion list offered.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-12-04T17:15:20Z",
        "body": "Note that string is special here.  It would be nice to _only_ list null and default.  Unfortunately however, any type _may_ have a constant value equal to null.\n"
      },
      {
        "user": "alrz",
        "created_at": "2017-02-12T19:58:57Z",
        "body": "This can wait until we have `default` literal. Then it could suggest `default` for any parameter type."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:09:13Z",
        "body": "Closing out for lack of feedback.  "
      }
    ]
  },
  {
    "number": 6782,
    "title": "Implement interface through read-only",
    "created_at": "2015-11-14T11:08:31Z",
    "closed_at": "2020-03-14T09:51:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Resolution-By Design",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6782",
    "body": "In addition to an \"Implement interface through\" command there must be an \"Implement interface through read-only\" command which puts `throw new NotSupportedException()` on every member that changes collection.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6782/comments",
    "author": "xperiandri",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-11-15T02:11:13Z",
        "body": "Hi @xperiandri, can you give an example where/how you'd use this? How do you know if a generated implementation would attempt to mutate the readonly object? Only property/indexer setters? Some heuristic based on method names?\n"
      },
      {
        "user": "xperiandri",
        "created_at": "2015-11-15T04:27:01Z",
        "body": "I just meant that I want to implement collection as read-only, for example `IList` could be read-only.\nTo indicate this it must return true in `IsReadOnly` property and throw NotSupportedException in methods `Add`, `Remove`, setter of index, etc.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-14T09:51:53Z",
        "body": "Closing out.  As per last design meeting, given the niche nature of the request, this is out of scope for the implement-interface feature."
      }
    ]
  },
  {
    "number": 6720,
    "title": "Method => Property: Somehow convey that the set method's semantics are changing",
    "created_at": "2015-11-11T21:53:11Z",
    "closed_at": "2016-04-22T17:43:31Z",
    "labels": [
      "help wanted",
      "Resolution-Won't Fix",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6720",
    "body": "Start with C#:\n\n``` C#\nclass C\n{\n    public virtual int GetX() { return 1; }\n    void SetX(int x) { }\n}\n```\n\nInvoke Convert Method to Property on `GetX` and view the preview window for \"Replace 'GetX' and 'SetX' with property\".\n\nIt would be nice if we could somehow indicate in the preview (whether via text or conflict span or...) that the semantics of SetFoo have changed from non-virtual to virtual.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6720/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "DustinCampbell",
        "created_at": "2016-04-22T17:43:31Z",
        "body": "This feels a bit off in the weeds. @Pilchie and I are opting to won't fix.\n"
      }
    ]
  },
  {
    "number": 6462,
    "title": "Suggestion to reduce 3-400 MB download each time cibuild.cmd is run",
    "created_at": "2015-10-30T09:22:11Z",
    "closed_at": "2015-12-08T22:07:50Z",
    "labels": [
      "help wanted",
      "Area-Infrastructure"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6462",
    "body": "Hello, assuming the nugetvnn.zip archive downloaded to restore packages when building is versioned, could it be possible to keep it around instead of throwing it away after each restore? It takes a while to download :)\nI had good success with the following modified restore.ps1 script (first 12 and last 1 line changed from the original):\n\n``` powershell\nparam ([uri]$nugetZipUrl = $(throw \"Need an URL to the NuGet zip\") )\n\n$destination = ${env:UserProfile}\n#$outFilePath = [IO.Path]::ChangeExtension([IO.Path]::GetTempFileName(), \"zip\")\n$nugetZipFilename = ($nugetZipUrl.Segments | select -Last 1)\n$outFilePath = \"${env:TEMP}\\$nugetZipFilename\"\nif (-not(Test-Path $outFilePath)) {\n    write-host \"Downloading $nugetZipUrl -> $outFilePath\"\n    #$client = new-object System.Net.WebClient\n    #$client.DownloadFile($nugetZipUrl, $outFilePath)\n    wget -Uri \"$nugetZipUrl\" -OutFile \"$outFilePath\"\n}\n\n# It's possible for restore to run in parallel on the test machines.  As such\n# we need to restore only new files to handle simultaneous restore scenarios.\nwrite-host \"Extracting\"\nAdd-Type -assembly \"System.IO.Compression.Filesystem\"\n$archive = [IO.Compression.ZipFile]::OpenRead($outFilePath)\nforeach ($entry in $archive.Entries) {\n    $entryFilePath = join-path $destination $entry.FullName\n    if (test-path $entryFilePath) {\n        continue;\n    }\n\n    # If it's a directory then create it now.  Calling ExtractToFile will\n    # throw on a directory.  There is no way I can find to ask a\n    # ZipArchiveEntry if it is a directory hence we just check for a file\n    # extension\n    [string]$ext = [IO.Path]::GetExtension($entryFilePath)\n    if ($ext -eq \"\") {\n        $null = mkdir $entryFilePath -errorAction SilentlyContinue\n        continue;\n    }\n\n    $entryDirectory = split-path -parent $entryFilePath\n    if (-not (test-path $entryDirectory)) {\n        $null = mkdir $entryDirectory -errorAction SilentlyContinue\n    }\n\n    try {\n        write-host \"Restoring $entryFilePath\"\n        [IO.Compression.ZipFileExtensions]::ExtractToFile($entry, $entryFilePath) \n    } catch {\n        write-host \"Unable to restore $($entry.FullName) $Error\"\n    }\n}\n\n$archive.Dispose()\n#rm $outFilePath\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6462/comments",
    "author": "codespare",
    "comments": [
      {
        "user": "tannergooding",
        "created_at": "2015-10-30T16:46:55Z",
        "body": "@jaredpar, I thought we were going to make the nuget zip the default option for our CI machines (to save time) and leave the default option to use actual nuget restore (otherwise we lose validation for the lock.json files).\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2015-10-31T17:15:22Z",
        "body": "@tannergooding the use of ZIP on Jenkins is both for time and stability.  There doesn't seem to be a reason to add an option here because 'nuget.exe restore Roslyn' is really easy for people to type if they want to restore manually.  \n\nI'm not worried about the lock validation because lock files only change if you change the packages we're using.  That is pretty explicit now because you have to also add a new nuget.zip file to our build files (else your changes won't compile).  \n"
      },
      {
        "user": "codespare",
        "created_at": "2015-11-05T09:15:17Z",
        "body": "The idea is just to keep that zip around instead of deleting it as the last line in restore.ps1 originally does. For that, I use the name of the archive file locally instead of a temp name, and if the download away if it's already available. Having all the dependencies in one package is actually very convenient, but it makes for a big archive and a slow build if not kept from one build to the next.\n"
      },
      {
        "user": "davkean",
        "created_at": "2015-12-04T20:47:09Z",
        "body": "@codespare If you want to submit something here to fix this, I'll happily take it.\n"
      },
      {
        "user": "codespare",
        "created_at": "2015-12-04T22:02:50Z",
        "body": "@davkean just created a pull request with the solution I use.\n"
      }
    ]
  },
  {
    "number": 6312,
    "title": "Custom event spit for WinRT events is wrong",
    "created_at": "2015-10-25T21:42:27Z",
    "closed_at": "2023-02-07T01:06:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/6312",
    "body": "REPRO: (This is repro is a long way to create a WinRT event. A shorter way would be to do it inside a .winmd file. But I'm showing you a repro within an EXE rather than a WINMD because it feels more concrete...)\n\nCreate a VB UWP app. In it write this class\n\n``` vb\nClass D\n    Implements Windows.Foundation.Collections.IObservableVector(Of Integer)\nEnd Class\n```\n\nand let it do code-spit for the interface. One of the members it spits out is this:\n\n``` vb\n    Public Event VectorChanged As VectorChangedEventHandler(Of Integer) Implements IObservableVector(Of Integer).VectorChanged\n```\n\nNow add the `Custom` modifier to this event, and let it spit out the add- and remove-handlers.\n\nWHAT I GET: it spits out a `RemoveHandler` with the wrong code signature.\n\nHere's the canonical correct code signature. (This following is, in practice, how _all_ WinRT custom events are implemented, and I think it would be a good idea if the IDE can spit out this code exactly)...\n\n``` vb\nImports System.Runtime.InteropServices.WindowsRuntime\nPublic NotInheritable Class ClassInWinMD\n    Private XEvent As EventRegistrationTokenTable(Of EventHandler(Of Integer))\n    Public Custom Event X As EventHandler(Of Integer)\n        AddHandler(handler As EventHandler(Of Integer))\n            Return EventRegistrationTokenTable(Of EventHandler(Of Integer)).\n                GetOrCreateEventRegistrationTokenTable(XEvent).\n                AddEventHandler(handler)\n        End AddHandler\n        RemoveHandler(token As EventRegistrationToken)\n            EventRegistrationTokenTable(Of EventHandler(Of Integer)).\n                GetOrCreateEventRegistrationTokenTable(XEvent).\n                RemoveEventHandler(token)\n        End RemoveHandler\n        RaiseEvent(sender As Object, i As Integer)\n            Dim table = EventRegistrationTokenTable(Of EventHandler(Of Integer)).\n                GetOrCreateEventRegistrationTokenTable(XEvent).\n                InvocationList\n            If table IsNot Nothing Then table(sender, i)\n        End RaiseEvent\n    End Event\nEnd Class\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/6312/comments",
    "author": "ljw1004",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T01:06:18Z",
        "body": "This is definitely a legacy scenario we're not investing in anymore."
      }
    ]
  },
  {
    "number": 5990,
    "title": "Generate Nested Type Quick Fix shouldn't be offered if the name conflicts",
    "created_at": "2015-10-15T02:39:50Z",
    "closed_at": "2023-02-07T00:59:11Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5990",
    "body": "Source:\n\n``` C#\nclass X {\n    Point Point;\n}\n```\n\nThis shouldn't offer the Generate _Nested_class quick fix, since it gives a compiler error (`Point` alread exists)\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5990/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "dpen2000",
        "created_at": "2016-07-25T23:23:44Z",
        "body": "This should probably be implemented as suggested by @CyrusNajmabadi in #11628 :\n\n> Instead, a nicer way to do things is to offer the feature, but add the 'conflict' annotation on the appropriate node so that teh user knows there will be an issue.... This conflict annotation will then show up appropraite in the preview window.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:59:11Z",
        "body": "Haven't heard about thsi being an issue.  And likely confusing if this went away and a user wanted to generate this (maybe renaming the field later).  Keeping around as by design."
      }
    ]
  },
  {
    "number": 5735,
    "title": "Generate Type should allow generation in linked files",
    "created_at": "2015-10-06T21:59:12Z",
    "closed_at": "2024-10-18T20:37:38Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5735",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5735/comments",
    "author": "jmarolf",
    "comments": [
      {
        "user": "jmarolf",
        "created_at": "2015-10-06T22:00:00Z",
        "body": "related to #2855, but requires separate work.\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-10-07T12:10:33Z",
        "body": "I believe this applies to \"regular\" linked files (not Shared Projects and not DNX), right @jmarolf?\n"
      },
      {
        "user": "jmarolf",
        "created_at": "2015-10-07T17:59:20Z",
        "body": "@dpoeschl  correct\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:37:38Z",
        "body": "Closing out given lack of any customer feedback on this."
      }
    ]
  },
  {
    "number": 5575,
    "title": "Go-to-definition doesn't work on the target type of conversion operators",
    "created_at": "2015-09-30T14:21:14Z",
    "closed_at": "2017-04-17T19:18:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5575",
    "body": "Invoke go-to-definition on the `Bar` reference in the operator:\n\n```\nclass Foo\n{\n    public static explicit operator Bar(Foo a)\n    {\n        return null;\n    }\n}\n\nclass Bar\n{\n}\n```\n\nExpected: The cursor should jump to the class declaration.\nActual: It highlights the operator declaration instead. This happens for both explicit and implicit operators.  \nThis is a regression from VS2013.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5575/comments",
    "author": "lorcanmooney",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-10-02T15:29:17Z",
        "body": "This is because we now support binding at declarations, where VS2013 didn't.\n"
      },
      {
        "user": "lorcanmooney",
        "created_at": "2017-04-17T19:18:07Z",
        "body": "It looks like this was fixed at come point. It doesn't repro for me any more as of 15.0.26228.4."
      }
    ]
  },
  {
    "number": 5570,
    "title": "Invalid pretty-lister behavior when #If directive is preceeded by a semicolon",
    "created_at": "2015-09-30T02:17:35Z",
    "closed_at": "2024-11-29T02:14:28Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Language-VB"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5570",
    "body": "1. Type \";\" on an empty line\n2. Type \"#If DEBUG\" on the next line and press enter\n\nOvbserved:\n\n```\n;\n#If DEBUGThen\n#End If\n```\n\nExpected:\n\n```\n;\n#If DEBUG Then\n#End If\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5570/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T02:14:29Z",
        "body": "CLosing out due to lack of broader feedback.  This is also an area we are no longer investing in."
      }
    ]
  },
  {
    "number": 5528,
    "title": "SyntaxTreeExtensions.FindTriviaToLeft should iterate instead of recurse when possible",
    "created_at": "2015-09-29T16:12:41Z",
    "closed_at": "2016-01-26T22:41:18Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Resolution-Fixed"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5528",
    "body": "Given a file with > 3000 string concatenations, `Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTreeExtensions.FindTriviaToLeft` can cause stack overflows.  It should be changed to iterate instead of recurse when dealing with a chain of binary operators.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5528/comments",
    "author": "Pilchie",
    "comments": [
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-12-11T01:23:53Z",
        "body": "What's the Test for this one? @Pilchie \n"
      },
      {
        "user": "pdelvo",
        "created_at": "2016-01-26T22:06:39Z",
        "body": "I think this issue can be closed\n"
      }
    ]
  },
  {
    "number": 5512,
    "title": "Wait dialogs for features invoked from a symbol should show the symbol name",
    "created_at": "2015-09-28T23:35:39Z",
    "closed_at": "2022-10-28T19:03:09Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5512",
    "body": "For:\n1. Find References\n2. Go To Definition\n3. Go To Implementation\n\nWe show a threaded wait dialog with some boring generic message. We should show the symbol name instead.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5512/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T19:03:09Z",
        "body": "Go-to impl and find-refs using the find-window, which do show the symbol name.  \r\n\r\nGo-def is asynchronous and will say \"navigating to definition\" in the BWI tooltip.  I'm wary about making that arbitrarily sized.  I'm going to close out as i'm wary the value is here, and the experience seems good now.  feel free to reactive if you agree @jasonmalinowski ."
      }
    ]
  },
  {
    "number": 5468,
    "title": "GenerateEnumMemberCodeFixProvider does not apply if enum type name matches a property name",
    "created_at": "2015-09-26T18:58:29Z",
    "closed_at": "2023-02-06T18:24:54Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5468",
    "body": "Consider the following code:\n\n``` csharp\nenum Colour { Blue, Green }\nclass Sample1\n{\n    //CS106 'Colour' does not contain a definition for 'Red' and no extension method 'Red' accepting a first argument of type 'MyEnum' could be found(are you missing a using directive or an assembly reference?)\n    Colour Colour => Colour.Red;\n\n    void Method()\n    {\n        //CS106 again\n        if(Colour == Colour.Red) { }\n    }\n}\n```\n\nI'd expect the GenerateEnumMemberCodeFixProvider to be applicable to the two instances of `Colour.Red`, however it's not.  It seems that because the property name matches the type name of the enumeration, Roslyn reports error CS106 rather than CS0117, so the code fix isn't applicable.  If you change the `Colour` property name to something other than the Enum's type name (e.g. `Colour2`), then the code fix is applicable. \n\nWhat's unclear to me is what the expected behaviour should be? Should the two instances of `Colour.Red` report error CS0117 (which the code fix will respond to correctly), or should the code fix handle error CS1061?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5468/comments",
    "author": "afscrome",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-09-26T19:02:57Z",
        "body": "Given that the VS2013 compiler also reported CS1061, I think we should update the code fix to handle CS0117 to handle \"Color Color\" cases.\n"
      },
      {
        "user": "afscrome",
        "created_at": "2015-09-26T19:19:03Z",
        "body": "@Pilchie Can you clarify - you say \"update the code fix to handle **CS0117**\"?  Did you mean to say **CS1061** instead?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-09-26T22:16:59Z",
        "body": "Doh,  Yes of course.\n"
      }
    ]
  },
  {
    "number": 5372,
    "title": "Fix results in non-compiling code",
    "created_at": "2015-09-21T19:39:43Z",
    "closed_at": "2023-02-07T00:53:40Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5372",
    "body": "Suppose an assembly defining type `A.B.C` is referenced with `/r:E=Assembly.dll`.  If the referencing assembly attempts to use `C` without qualification, the following fixes are offered:\n1. Add `using A.B`\n2. Change to `A.B.C`\n\nNeither of these will result in compiling code.  Either these fixes should be suppressed or we should offer:\n1. Add `using E::A.B` (and, depending on context, `extern alias E;`)\n2. Change to `E::A.B.C` (and add, depending on context, `extern alias E;`)\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5372/comments",
    "author": "amcasey",
    "comments": [
      {
        "user": "amcasey",
        "created_at": "2015-09-21T19:39:48Z",
        "body": "FYI @jmarolf \n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:53:40Z",
        "body": "IDE policy is effectively \"do not crash in the presence of extern aliases\". We really don't do *any* additional investment as they are used so rarely by customers as to be practically irrelevant."
      }
    ]
  },
  {
    "number": 5358,
    "title": "Weird Formatter behaviour when formatting multidimensional arrays",
    "created_at": "2015-09-20T15:56:54Z",
    "closed_at": "2015-10-14T14:31:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5358",
    "body": "Let's jump right to the code:\n\n``` csharp\nprivate void FormatterWeirdnessExample()\n{\n    AdhocWorkspace workspace = new AdhocWorkspace();\n    workspace.Options = workspace.Options\n        .WithChangedOption( CSharpFormattingOptions.SpaceAfterComma, true )\n        .WithChangedOption( CSharpFormattingOptions.SpaceBetweenEmptySquareBrackets, false )\n        .WithChangedOption( CSharpFormattingOptions.SpaceWithinSquareBrackets, true );\n\n    SyntaxTree tree = CSharpSyntaxTree.ParseText( \"int[ , ] array = new int[ 1, 1 ];\" );\n    SyntaxNode root = tree.GetRoot();\n    Debug.WriteLine( root );\n\n    IList<TextChange> changes = Formatter.GetFormattedTextChanges( root, workspace );\n    foreach ( var change in changes )\n        Debug.WriteLine( change );\n\n    SyntaxNode formatted = Formatter.Format( root, workspace );\n    Debug.WriteLine( formatted );\n}\n```\n\nAnd here's the output:\n\n```\nint[ , ] array = new int[ 1, 1 ];\nTextChange: { [4..5), \"\" }\nTextChange: { [6..7), \"\" }\nTextChange: { [7..7), \" \" }\nint[, ] array = new int[ 1, 1 ];\n```\n\nFirst of all, the result of `Formatter.Format` looks kind of strange. I expected to get either the spaces both before and after the comma (`int[ , ]`) or no spaces around the comma at all (`int[,]`), but getting just the space after looks unexpected (and probably a bit ugly).\n\nSecond, the contradicting changes (`TextChange: { [6..7), \"\" }` and `TextChange: { [7..7), \" \" }`) are very confusing. That's actually how I stumbled upon this issue: I was writing an analyzer that checks if the document violates the formatting rules, so I used `GetFormattedTextChanges()` to detect the possible formatting changes. But apparently it's possible for the text changes to negate each other so the `Format()` method doesn't actually change anything. I don't know if it's a bug or a feature, but it definitely makes using `GetFormattedTextChanges()` a lot more difficult.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5358/comments",
    "author": "HellBrick",
    "comments": [
      {
        "user": "pawchen",
        "created_at": "2015-09-21T08:37:36Z",
        "body": "> SpaceWithinSquareBrackets, true\n\nSo the result should be `int[ , ] ...`?\n\nIt's interesting because it looks like a conflict when `SpaceWithinSquareBrackets, false` and `SpaceAfterComma, true` but actually not. I guess `[ , ]` was treated as empty, thus `SpaceBetweenEmptySquareBrackets, false` took effect and conflicted `SpaceAfterComma, true`?\n"
      },
      {
        "user": "HellBrick",
        "created_at": "2015-09-21T12:09:23Z",
        "body": "> So the result should be `int[ , ]` ...?\n\nThat's a tricky corner case, but I'd prefer `int[ , ]` here. Or, to be more precise, I think `SpaceBetweenEmptySquareBrackets` shouldn't consider this its jurisdiction and the behaviour should be controlled by `SpaceWithinSquareBrackets`\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-09-21T16:17:02Z",
        "body": "We should just look at what VS2013 does for the various combinations of these options.\n"
      },
      {
        "user": "pawchen",
        "created_at": "2015-09-25T03:00:32Z",
        "body": "In VS2013, `[,]` is not treated as empty, and always add/remove spaces according to `SpaceWithinSquareBrackets` no matter what `SpaceAfterComma` is.\n"
      },
      {
        "user": "pawchen",
        "created_at": "2015-09-25T03:16:19Z",
        "body": "Interesting, in VS2015, regardless what `SpaceAfterComma` is\n`[, ]` when `SpaceBetweenEmptySquareBrackets, false` & `SpaceWithinSquareBrackets, true`\n`[ ,]` when `SpaceBetweenEmptySquareBrackets, true` & `SpaceWithinSquareBrackets, false`\n`[ , ]` when `SpaceBetweenEmptySquareBrackets, true` & `SpaceWithinSquareBrackets, true`\n"
      }
    ]
  },
  {
    "number": 5357,
    "title": "Suggestion: have option in Model.LookupSymbols to limit returns",
    "created_at": "2015-09-19T21:36:35Z",
    "closed_at": "2022-10-28T18:57:57Z",
    "labels": [
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5357",
    "body": "Right now LookupSymbols ether looks up everything associated with my Solution including all the DLL's I reference or I think I can limit it to one NameSpace. What is really needed it a way to limit it to one solution without looking at included libraries.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5357/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T18:57:57Z",
        "body": "This would need to go through an API proposal. \r\n\r\nin general though, it would be trivial to just filter out anything you don't care about.  The compiler APIs are extremely fast here as well (as they have to operate in the millisecond range to be fast enough for intellisense).\r\n\r\n> or I think I can limit it to one NameSpace. \r\n\r\nNote: if you want to limit to one namespace, you can just ask for the children of that namespace. \r\n\r\n"
      }
    ]
  },
  {
    "number": 5080,
    "title": "Consider if it is appropriate to use Enumerable.Repeat to implement DefaultLowerBounds function in src/Compilers/CSharp/Portable/Emitter/Model/ArrayTypeSymbolAdapter.cs",
    "created_at": "2015-09-08T20:50:59Z",
    "closed_at": "2016-01-15T21:39:57Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/5080",
    "body": "In code review for PR #5060 @gafter asked if we should use `Enumerable.Repeat` to implement DefaultLowerBounds, which is currently implemented as follows:\n\n```\nprivate static IEnumerable<int> DefaultLowerBounds(int rank)\n{\n    for (int i = 0; i < rank; ++i)\n        yield return 0;\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/5080/comments",
    "author": "AlekseyTs",
    "comments": [
      {
        "user": "leppie",
        "created_at": "2016-01-15T06:53:42Z",
        "body": "Is this issue more about removing (generated) iterators in favour of LINQ to reduce code size? (Specifically when closure classes are not generated?)\n"
      },
      {
        "user": "AlekseyTs",
        "created_at": "2016-01-15T18:02:41Z",
        "body": "I think @gafter 's motivation is a code simplification, but I could be wrong.\n"
      },
      {
        "user": "leppie",
        "created_at": "2016-01-15T18:32:58Z",
        "body": "It would have been nice if `Sizes.Cast<ulong>()` would work instead of `GetSizes`, but it fails...\n"
      }
    ]
  },
  {
    "number": 4845,
    "title": "Call Hierarchy should use wait indicator for GTD",
    "created_at": "2015-08-27T20:11:05Z",
    "closed_at": "2023-02-07T00:46:29Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4845",
    "body": null,
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4845/comments",
    "author": "rchande",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:46:29Z",
        "body": "Closing out as we haven't heard anything on this (and have no prism hits here.)."
      }
    ]
  },
  {
    "number": 4585,
    "title": "C# intellisense always suggests type keywords, even when it proabably shouldn't",
    "created_at": "2015-08-16T13:57:37Z",
    "closed_at": "2024-10-18T20:25:23Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4585",
    "body": "If I declare a variable using class library type names, intellisense suggestions always seem to prefer type keywords when available. For example if I type `List<Int32> list = new`, the intellisense popup will suggest `List<int>`.\n\nThere are a couple of editor settings around which style to prefer, but this particular scenario doesn't seem to be covered by either. Maybe intellisense should honour the setting for \"declaring locals, parameters and members\" and/or when the assignment is _near_ the declaration (for some reasonable definition of _near_) it could infer the correct value from the declaration?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4585/comments",
    "author": "lorcanmooney",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:25:24Z",
        "body": "Intellisense is following the rules specified in editor config around builtin types.  We think it's fine if we continue following that, even if the local code deviates from editor config.  We'd need a lot of feedback indicating this needs special handling to make any changes here."
      }
    ]
  },
  {
    "number": 4304,
    "title": "Request: make SymbolDisplayCompilerInternalOptions public",
    "created_at": "2015-08-03T17:25:40Z",
    "closed_at": "2022-11-29T23:39:07Z",
    "labels": [
      "Resolution-Duplicate",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4304",
    "body": "It would be useful to have internal compiler options be configurable as well.\n\nThis is useful for our scenario because we are trying to match symbols resolved by Roslyn with those from PerfView traces in Production.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4304/comments",
    "author": "suprak",
    "comments": [
      {
        "user": "RikkiGibson",
        "created_at": "2022-11-29T23:39:07Z",
        "body": "Duplicate of #1891"
      }
    ]
  },
  {
    "number": 4225,
    "title": "ConvertedType of null as operand to comparison",
    "created_at": "2015-07-30T15:44:49Z",
    "closed_at": "2023-02-03T21:12:56Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4225",
    "body": "This test will print \"leftType: null, rightType: int?\". This might be a bug, although I am not sure. At the very least I would say it is quite unexpected.\n\n```\nclass Program {\n    static void Main(string[] args) {\n        var syntaxTree = CSharpSyntaxTree.ParseText(@\"class C { public C() { int? i1 = 0; bool b; b = null == i1; } }\");\n\n        var compilation = CSharpCompilation.Create(\"Test\", new[] { syntaxTree }, new[] { MetadataReference.CreateFromAssembly(typeof(object).Assembly) }, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));\n        foreach (var d in compilation.GetDiagnostics().Where(d => d.Severity == DiagnosticSeverity.Error)) {\n            Console.WriteLine(\"Invalid test, error in compilation: \"+ d);\n        }\n\n        var st = compilation.SyntaxTrees.Single();\n        var sm = compilation.GetSemanticModel(st);\n\n        var expression = (BinaryExpressionSyntax)((AssignmentExpressionSyntax)st.GetRoot().DescendantNodes().OfType<ExpressionStatementSyntax>().Single().Expression).Right;\n        var leftType = sm.GetTypeInfo(expression.Left).ConvertedType;\n        var rightType = sm.GetTypeInfo(expression.Right).ConvertedType;\n\n        Console.WriteLine($\"leftType: {leftType?.ToString() ?? \"null\"}, rightType: {rightType?.ToString() ?? \"null\"}\");\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4225/comments",
    "author": "erik-kallen",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T21:12:56Z",
        "body": "This seems appropriate to me.  Havne't had any issues with tooling using these results either.  IOperation would be teh best way to get the full tree of semantic info/conversions here.  If you run into any issues using that, let us know."
      }
    ]
  },
  {
    "number": 4206,
    "title": "MetadataAsSource doesn't regenerate files after formatting change",
    "created_at": "2015-07-29T18:18:26Z",
    "closed_at": "2023-02-17T02:02:43Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4206",
    "body": "1. Create a new console app.\n2. Go to definition on string.\n3. Close the generated definition.\n4. Change your indenting options to some other indenting (but not tabs being wary of #4019)\n5. Go to definition on string again.\n\n_Expected:_ the formatting is updated to your new settings\n_Actual:_ the formatting is still using the previous settings\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4206/comments",
    "author": "jasonmalinowski",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:42:58Z",
        "body": "Need info if this is actually a problem for users.  Given how rarely formatting optinos even change, i highly doubt it."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:45Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 4109,
    "title": "Remove OrganizingService and dependent files",
    "created_at": "2015-07-25T00:18:31Z",
    "closed_at": "2023-02-07T00:42:16Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4109",
    "body": "After a discussion with @rchande over the failure of `src\\EditorFeatures\\CSharpTest\\Organizing\\OrganizeTypeDeclarationTests` it was determined that `src\\Features\\Core\\Organzing\\OrganizingService.cs` and it's dependent files are not used and can be deleted.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4109/comments",
    "author": "tannergooding",
    "comments": [
      {
        "user": "tannergooding",
        "created_at": "2015-07-25T00:19:08Z",
        "body": "FYI. @rchande, @amcasey, @jasonmalinowski, @dpoeschl, @Pilchie, @DustinCampbell \n"
      },
      {
        "user": "tannergooding",
        "created_at": "2015-07-25T00:22:53Z",
        "body": "I have submitted PR #4111 as a temporary workaround for the issue until we can determine whether or not removing the code is the proper course of action.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2015-07-25T01:15:16Z",
        "body": "I'm not sure removing it is the right course of action. I think we need to take a closer look.\n"
      },
      {
        "user": "tannergooding",
        "created_at": "2015-07-25T04:20:45Z",
        "body": "I do agree that removing the files is the probably not the correct course (unless we determine that they have no future use).\n\nThe correct course is likely to fix up all of our tests to be independent of line endings (see PR #4111 for an example). I believe this work will need to be done anyways to get all of our unit tests successfully running on Linux/Mac which already have different default line terminators (then what is expected on Windows).\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-07-27T16:09:22Z",
        "body": "Do we know if there are other features that exist only to be tested (i.e. cannot be triggered from the product)?\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-07-27T23:33:29Z",
        "body": "I think if we did, we would have already deleted them by now.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2015-07-28T00:43:05Z",
        "body": "FWIW, there are two reasons I'm concerned about removing the files:\n1. It's unclear to me that these tests aren't providing coverage that we wouldn't get elsewhere.\n2. We really might want to add the feature. :smile:\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-07-28T16:44:56Z",
        "body": "For your first concern, isn't there some tool where we can get code coverage with/without and then see what the delta is? It seems it'd be best to directly add coverage for that instead of relying on indirect coverage.\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-08-17T21:04:07Z",
        "body": "@Pilchie, @DustinCampbell, any different opinions on this? I'm OK deleting the code. If we want to add the feature, we have source control.\n"
      },
      {
        "user": "DustinCampbell",
        "created_at": "2015-08-18T19:16:18Z",
        "body": "My opinions remain the same, so @Pilchie would need to weigh in. I don't think the first question has been addressed since such a tool would need to be actually run before we know anything.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:42:16Z",
        "body": "Closing out as we haven't done anything about this in 8 years and it hasn't been a problem."
      }
    ]
  },
  {
    "number": 4067,
    "title": "Exception ex{\"OperatorToken\"}",
    "created_at": "2015-07-22T21:54:02Z",
    "closed_at": "2023-02-04T00:48:40Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Concept-Diagnostic Clarity",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4067",
    "body": "With Visual Studio 2015 I am creating a Code Refactoring that does nothing and I am getting a exception ex{\"OperatorToken\"} with little useful information.\n\nI have broken it down to show where I think the issue is, the first 5 lines are setup\n\n```\n       Dim semanticModel As SemanticModel = Await document.GetSemanticModelAsync(cancellationToken)\n        Dim root As SyntaxNode = Await document.GetSyntaxRootAsync(cancellationToken)\n        Dim OldCondition As BinaryExpressionSyntax = CType(invocation.Condition, BinaryExpressionSyntax)\n        Dim OldConditionoperatorToken As SyntaxToken = OldCondition.OperatorToken\n        Dim operatorToken As SyntaxToken = SyntaxFactory.Token(SyntaxKind.OperatorKeyword, \"Is\").WithLeadingTrivia(OldCondition.GetLeadingTrivia).WithTrailingTrivia(OldCondition.GetTrailingTrivia)\n```\n\nThe following line throws the exception ex{\"OperatorToken\"} with no additional information\n            Dim NewCondition As BinaryExpressionSyntax = SyntaxFactory.BinaryExpression(OldCondition.Kind, OldCondition.Left, operatorToken, OldCondition.Right)\n\nIf I substitute  OldCondition.operatorToken or OldConditionoperatorToken  for operatorToken it works as expected.\nMy eventual goal if to switch right and left and change operatorToken to \"IsNot\" as shown below\n            Dim operatorToken As SyntaxToken = SyntaxFactory.Token(SyntaxKind.OperatorKeyword, \"IsNot\").WithLeadingTrivia(OldCondition.GetLeadingTrivia).WithTrailingTrivia(OldCondition.GetTrailingTrivia)\n           Dim NewCondition As BinaryExpressionSyntax = SyntaxFactory.BinaryExpression(OldCondition.Kind, OldCondition.Right, operatorToken, OldCondition.Left)\n\n<!---\n@huboard:{\"order\":415.3505859375,\"milestone_order\":4067,\"custom_state\":\"\"}\n-->\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4067/comments",
    "author": "paul1956",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-08-07T18:23:12Z",
        "body": "We would need a complete program demonstrating the issue you're experiencing to help you diagnose the issue.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-08-07T18:43:16Z",
        "body": "Solved the issue, but exception messages like ex{\"OperatorToken\"} are really not very useful especially to a VB programmer and they appear throughout the API's. I can point to some source lines if needed.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-08-07T22:26:53Z",
        "body": "Yes, please let us know where those less-than-helpful exceptions occur.\n"
      },
      {
        "user": "paul1956",
        "created_at": "2015-08-08T15:09:22Z",
        "body": "Below is a list of all the places where ArgumentException(\"operatorToken\") is used, generally the ArgumentException(\"Anything\") errors are the issue because there is no way to know what is wrong just from seeing an error that says Ex{\"operatorToken\"}. It would be nice to know what is it looking for and what it got. Given Roslyn is open source, it would be acceptable to change the exception to,\nArgumentException($\"operatortaken in {MethodInfo.GetCurrentMethod()} line {New StackTrace(New StackFrame(True)).GetFrame(0).GetFileLineNumber()}\")\n\nC:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(86709):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(92577):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(92721):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(92865):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(93009):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(93153):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(93297):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(93448):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(93578):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(96257):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(96516):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(96775):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(97034):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(97293):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(97552):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(97811):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(98070):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(98329):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(98588):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(98847):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(99116):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(99256):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101403):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101573):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101748):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101776):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101862):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101921):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(101986):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(102007):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(103503):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(103760):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(104017):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(104274):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(104531):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(104788):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(105045):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(105302):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(105559):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(105816):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(106073):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(106330):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(106587):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(106844):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(107101):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(107358):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(107615):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(107872):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(108129):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(108386):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(108643):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(108900):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(109157):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(109414):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(109683):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(109849):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(109869):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(110009):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(110149):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(110289):                    Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(110435):                Throw new ArgumentException(\"operatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(110561):                    Throw New ArgumentException(\"OperatorToken\")\n  C:\\Users\\Paul\\Documents\\Visual Studio 2015\\Projects\\roslyn\\Binaries\\Obj\\BasicCodeAnalysis\\Debug\\Syntax.xml.Generated.vb(116925):                    Throw new ArgumentException(\"operatorToken\")\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T21:13:28Z",
        "body": "Would need a repro of where this is happening."
      },
      {
        "user": "paul1956",
        "created_at": "2023-02-04T00:48:40Z",
        "body": "This is so old I have no idea and don't care anymore I will close."
      }
    ]
  },
  {
    "number": 3948,
    "title": "Generate Type on 'VB Imports' does not generate proper Type",
    "created_at": "2015-07-14T19:33:37Z",
    "closed_at": "2024-10-18T21:11:20Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3948",
    "body": "**Repro:**\n1. Open a VB library\n2. Set the editor to\n\n``` VB\nImports Sample\n\nPublic Class C1\nEnd Class\n```\n1. Place the cursor on the Imports statement and invoke the lightbulb on the import statement.\n2. Choose the Code action to generate the type Sample\n\n**Expected:**\n Type Sample gets referenced properly\n\n**Actual:**\n Lightbulb still exists to generate type 'Sample'\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3948/comments",
    "author": "basoundr",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-07-30T21:33:55Z",
        "body": "I can't repro this.  I get the lightbulb back, but to remove the unused Import for Sample.\n"
      },
      {
        "user": "basoundr",
        "created_at": "2015-07-31T17:34:46Z",
        "body": "It doesnt repro in the internal test app because it does not have a default namespace. Try repro-ing in Visual Studio.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T21:11:20Z",
        "body": "Unlikley to make any changes here given lack of feedback."
      }
    ]
  },
  {
    "number": 3924,
    "title": "Conversions and types in InterpolationSyntax",
    "created_at": "2015-07-13T19:12:59Z",
    "closed_at": "2023-02-07T14:19:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Investigation Required",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3924",
    "body": "This program:\n\n```\nclass Program {\n    static void Main(string[] args) {\n        var source = @\"\n            class C {\n                void M() {\n                    int i = 0;\n                    var s = $\"\"i = {i}\"\";\n                }\n            }\n        \";\n\n        var syntaxTree = CSharpSyntaxTree.ParseText(source);\n\n        var compilation = CSharpCompilation.Create(\"Test\", new[] { syntaxTree }, new [] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) } );\n        var semanticModel = compilation.GetSemanticModel(syntaxTree, false);\n\n        var interpolation = syntaxTree.GetRoot().DescendantNodes().OfType<InterpolationSyntax>().Single().Expression;\n\n        var type = semanticModel.GetTypeInfo(interpolation);\n        var conversion = semanticModel.GetConversion(interpolation);\n        Console.WriteLine(conversion + \", from \" + type.Type + \" to \" + type.ConvertedType);\n    }\n}\n```\n\nprints `Identity, from int to int`. Since the method `String.Format()` has the parameters `(string format, params object[] args)` (and similar for `FormattableStringFactory.Create`), I think it would be suitable to return a boxing conversion from `int` to `object` here.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3924/comments",
    "author": "erik-kallen",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T21:15:34Z",
        "body": "Haven't run into issue here with our own tooling using these apis, so hesitant to change.  What experience do you get with the iop apis?"
      },
      {
        "user": "erik-kallen",
        "created_at": "2023-02-07T10:42:21Z",
        "body": "No idea anymore, this was opened 7 years ago"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T14:19:42Z",
        "body": "Closing out as too stale "
      }
    ]
  },
  {
    "number": 3522,
    "title": "Call to non-existant Add() overload in collection initializer shows lambda completions",
    "created_at": "2015-06-16T03:33:12Z",
    "closed_at": "2023-02-17T02:02:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3522",
    "body": "_corner-case issue_\n\nSource:\n\n``` C#\nnew Dictionary<Func<int, int>, int> { x };\n```\n\nTyping the `x` will show unhighlighted completions as if it were the beginning of a lambda expression, even though it is illegal to pass a lambda (or in fact any expression) there.\n\nWhen resolving partial brace-less collection initializer calls, you need to check that the method has _exactly_ one argument.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3522/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-06-16T04:42:24Z",
        "body": "Repros on current bits.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:39:35Z",
        "body": "Need more info on if this is an issue really impacting users."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:48Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 3474,
    "title": "Improved Syntax Recovery for Missing Argument",
    "created_at": "2015-06-12T17:38:22Z",
    "closed_at": "2018-10-31T00:09:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Language-VB",
      "Concept-API",
      "Area-Compilers",
      "Pedantic ;)"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3474",
    "body": "``` vb\nModule Module1\n\n  Sub Main()\n    F(0,1) '<-- Missing Argument\n  End Sub\n\n  Sub F( x As Integer,\n         y As Integer,\n       ) ' <-- No third argument\n  End Sub\nEnd Module\n```\n\nThink it will also apply to other methods type. eg Function, Property etc.\n\nStrange thing is there is a third parameter of type object and has a name the can not be uttered.. \n\n**Expection** \nNo third parameter until it has an identifier name. \nError: Missing Parameter or unexpected `,`  on the extraneous `,` \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3474/comments",
    "author": "AdamSpeight2008",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-06-12T17:47:09Z",
        "body": "I agree that our diagnostics could be improved slightly here.\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-06-12T17:56:47Z",
        "body": "I think the bug is the phantom third ~~nipple~~ parameter.\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-06-12T17:58:14Z",
        "body": "So you're questioning the parser's choice of error recovery strategy (inserting a \"missing\" parameter)?\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-06-12T18:06:41Z",
        "body": "Yep, I think the error is in to wrong place. Since the you've not defined the parameter.\nAt `f(0,1)` the error should be `No matching overload`\nAt the `,` an error `Missing Parameter or extraneous ',`'\n"
      }
    ]
  },
  {
    "number": 3407,
    "title": "Public API checker does not distinguish properties from methods",
    "created_at": "2015-06-09T23:08:39Z",
    "closed_at": "2018-03-30T06:40:00Z",
    "labels": [
      "help wanted",
      "Feature Request",
      "Area-Infrastructure"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3407",
    "body": "The public API checker does not distinguish between\n\n``` cs\npublic int Foo { get; }\n```\n\nand\n\n``` cs\npublic int get_Foo();\n```\n\neven though this affects (compile-time) clients.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3407/comments",
    "author": "gafter",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2018-03-29T23:15:00Z",
        "body": "@mavasani Should we move this to roslyn-analyzers somewhere?"
      },
      {
        "user": "mavasani",
        "created_at": "2018-03-29T23:16:14Z",
        "body": "Yes, we should port it to roslyn-analyzers."
      },
      {
        "user": "jinujoseph",
        "created_at": "2018-03-30T06:39:59Z",
        "body": "This issue was moved to dotnet/roslyn-analyzers#1651"
      }
    ]
  },
  {
    "number": 3327,
    "title": "Remove binary files from the repository",
    "created_at": "2015-06-04T22:47:59Z",
    "closed_at": "2016-05-19T02:57:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers",
      "Test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3327",
    "body": "We have a number of binary files in our repository that simply don't belong there. In many cases we have a binary .ddl sitting alongside the source file it was compiled from. In those cases the binary should be removed and the build updated to produce the binary by compiling the source. If we need binary files as resources for tests, they should be moved to a separate nuget outside of version control.\n\nHere are some of the files we should move. This list may be very stale, as it was produced around 2013-03-13. When this is being worked on, we should refresh the list to include all of the relevant binary files present at the time of the work.\n\n``` none\nsrc/Compilers/Test/Resources/Core/Analyzers/FaultyAnalyzer.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Alpha.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Beta.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Delta.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Gamma.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib01.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib02.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib11.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Members.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/NativeApp.exe\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/CSClasses01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/CSInterfaces01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBClasses01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBClasses02.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBInterfaces01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/IndexerWithByRefParam.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/Interop.Mock01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/Interop.Mock01.Impl.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/ClassLayout.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/CustomAttributeTableUnsorted.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/IncorrectCustomAssemblyTableSize_TooManyMethodSpecs.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidDynamicAttributeArgs.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidFuncDelegateName.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidGenericType.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidModuleName.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/LongTypeFormInSignature.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Obfuscated.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Obfuscated2.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/NetModule01/AppCS.exe\nsrc/Compilers/Test/Resources/Core/NetFX/aacorlib/aacorlib.v15.0.3928.dll\nsrc/Compilers/Test/Resources/Core/NetFX/Minimal/mincorlib.dll\nsrc/Compilers/Test/Resources/Core/Resources/Regress40025DLL.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/BigVisitor.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Events.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/FSharpTestLibrary.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Indexers.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/InheritIComparable.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MDTestLib1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MDTestLib2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Properties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/PropertiesWithByRef.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Regress40025DLL.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/VBConversions.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/With Spaces.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/FakeMsCorLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/GuidTest1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/GuidTest2.exe\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/NoMsCorLibRef.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/CppCli.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/Modifiers.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/ModoptTests.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Cyclic/Cyclic1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Cyclic/Cyclic2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicStructure/cycledstructs.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Delegates/DelegateByRefParamArray.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Delegates/DelegatesWithoutInvoke.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/Consumer.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/CsharpCaseSen.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/CSharpDifferCaseOverloads.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/TypeAndNamespaceDifferByCase.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementation.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementationEvents.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementationProperties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/ILExplicitInterfaceImplementation.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/ILExplicitInterfaceImplementationProperties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/ConstantFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/CSFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/VBFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Interface/MDInterfaceMapping.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Interface/StaticMethodInInterface.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeInterop01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeInterop02.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeTestDef01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeTestLib01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/DynamicAttribute.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/InvalidCharactersInAssemblyName.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/InvalidPublicKey.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/MDTestAttributeApplicationLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/MDTestAttributeDefLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/ByRefReturn.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/CSMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/ILMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/VBMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/CL2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/CL3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingType.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingTypeLib_New.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingTypeLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MissingTypesEquality1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MissingTypesEquality2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiModule/Consumer.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiModule/MultiModule.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c4.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c7.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/netModule/CrossRefLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/A.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/B.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/D.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/ExternalAsm1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/GeneralPia.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/GeneralPiaCopy.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Library1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Library2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/MissingPIAAttributes.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/NoPIAGenerics1-Asm1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia1Copy.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia4.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia5.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V1/ClassA.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V2/ClassA.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V2/ClassB.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarder.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarderBase.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarderLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/CSharpErrors.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/ILErrors.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/Unavailable.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V1/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V1/MTTestLib2.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V2/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V2/MTTestLib3.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V3/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V3/MTTestLib4.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/AR_SA/Culture.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/EN_US/Culture.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/V1/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/V2/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/WithEvents/SimpleWithEvents.dll\nsrc/Workspaces/CoreTest/TestFiles/CSharpProject.dll\nsrc/Workspaces/CoreTest/TestFiles/EmptyLibrary.dll\n```\n\nSee also TFS bugs 1169265, 1175369, 1175374 for this same issues.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3327/comments",
    "author": "gafter",
    "comments": [
      {
        "user": "gafter",
        "created_at": "2015-06-04T22:51:33Z",
        "body": "@KevinRansom FYI\n"
      },
      {
        "user": "whoisj",
        "created_at": "2015-06-04T22:52:50Z",
        "body": ":+1: :heart_eyes: \n\nNext we consider use of LFS for the rest of the binaries?\n"
      },
      {
        "user": "gafter",
        "created_at": "2015-06-04T23:46:41Z",
        "body": "@KevinH-MS FYI\n"
      },
      {
        "user": "phrohdoh",
        "created_at": "2016-05-18T22:19:01Z",
        "body": "Is there a reason for `*.exe` and `*.dll` not being globally ignored?\n\nAs of c2f188d184f13580fdc7531d21e4a64f2ddc81e9 (cleaned via `git clean -dfx`):\n\n```\ntmba:roslyn thill $ find . -iname \"*.exe\"\nnuget.exe\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Signatures/SignatureCycle2.exe\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Signatures/TypeSpecInWrongPlace.exe\nsrc/Compilers/Test/Resources/Core/MetadataTests/NativeApp.exe\nsrc/Compilers/Test/Resources/Core/MetadataTests/NetModule01/AppCS.exe\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/GuidTest2.exe\n```\n\n```\ntmba:roslyn thill $ find . -iname \"*.dll\"\nsrc/Compilers/Test/Resources/Core/Analyzers/FaultyAnalyzer.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Alpha.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Beta.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Delta.dll\nsrc/Compilers/Test/Resources/Core/AssemblyLoadTests/Gamma.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib01.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib02.dll\nsrc/Compilers/Test/Resources/Core/DiagnosticTests/ErrTestLib11.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/CSClasses01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/CSInterfaces01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBClasses01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBClasses02.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/InterfaceAndClass/VBInterfaces01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/IndexerWithByRefParam.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/Interop.Mock01.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Interop/Interop.Mock01.Impl.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/ClassLayout.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/CustomAttributeTableUnsorted.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/IncorrectCustomAssemblyTableSize_TooManyMethodSpecs.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidDynamicAttributeArgs.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidFuncDelegateName.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidGenericType.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/InvalidModuleName.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/LongTypeFormInSignature.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Obfuscated.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Invalid/Obfuscated2.dll\nsrc/Compilers/Test/Resources/Core/MetadataTests/Members.dll\nsrc/Compilers/Test/Resources/Core/NetFX/Minimal/minasync.dll\nsrc/Compilers/Test/Resources/Core/NetFX/Minimal/mincorlib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/BigVisitor.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/FakeMsCorLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/GuidTest1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CorLibrary/NoMsCorLibRef.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/CppCli.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/Modifiers.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/ModoptTests.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Cyclic/Cyclic1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Cyclic/Cyclic2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicInheritance/Class3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/CyclicStructure/cycledstructs.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Delegates/DelegateByRefParamArray.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Delegates/DelegatesWithoutInvoke.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/Consumer.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/CsharpCaseSen.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/CSharpDifferCaseOverloads.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/DifferByCase/TypeAndNamespaceDifferByCase.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Events.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementation.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementationEvents.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/CSharpExplicitInterfaceImplementationProperties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/ILExplicitInterfaceImplementation.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/ExplicitInterfaceImplementation/ILExplicitInterfaceImplementationProperties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/ConstantFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/CSFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Fields/VBFields.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/FSharpTestLibrary.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Indexers.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/InheritIComparable.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Interface/MDInterfaceMapping.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Interface/StaticMethodInInterface.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MDTestLib1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MDTestLib2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeInterop01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeInterop02.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeTestDef01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/AttributeTestLib01.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/DynamicAttribute.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/InvalidCharactersInAssemblyName.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/InvalidPublicKey.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/MDTestAttributeApplicationLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Metadata/MDTestAttributeDefLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/ByRefReturn.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/CSMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/ILMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Methods/VBMethods.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/CL2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/CL3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingType.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingTypeLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MDMissingTypeLib_New.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MissingTypesEquality1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MissingTypes/MissingTypesEquality2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiModule/Consumer.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiModule/MultiModule.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c4.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/MultiTargeting/c7.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/netModule/CrossRefLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/A.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/B.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/D.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/ExternalAsm1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/GeneralPia.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/GeneralPiaCopy.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Library1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Library2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/LocalTypes3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/MissingPIAAttributes.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/NoPIAGenerics1-Asm1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/ParametersWithoutNames.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia1.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia1Copy.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia2.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia3.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia4.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/NoPia/Pia5.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Properties.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/PropertiesWithByRef.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Regress40025DLL.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V1/ClassA.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V2/ClassA.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/RetargetingCycle/V2/ClassB.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarder.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarderBase.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/TypeForwarders/TypeForwarderLib.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/CSharpErrors.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/ILErrors.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/UseSiteErrors/Unavailable.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V1/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V1/MTTestLib2.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V2/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V2/MTTestLib3.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V3/MTTestLib1.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/V3/MTTestLib4.Dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/VBConversions.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/AR_SA/Culture.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/EN_US/Culture.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/V1/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/Versioning/V2/C.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/With Spaces.dll\nsrc/Compilers/Test/Resources/Core/SymbolsTests/WithEvents/SimpleWithEvents.dll\nsrc/Debugging/Microsoft.DiaSymReader.PortablePdb.Tests/Resources/Async.dll\nsrc/Debugging/Microsoft.DiaSymReader.PortablePdb.Tests/Resources/Documents.dll\nsrc/Debugging/Microsoft.DiaSymReader.PortablePdb.Tests/Resources/MethodBoundaries.dll\nsrc/Debugging/Microsoft.DiaSymReader.PortablePdb.Tests/Resources/Scopes.dll\nsrc/ExpressionEvaluator/Core/Test/ExpressionCompiler/Resources/Empty.dll\nsrc/Workspaces/CoreTest/TestFiles/CSharpProject.dll\nsrc/Workspaces/CoreTest/TestFiles/EmptyLibrary.dll\n```\n"
      },
      {
        "user": "tmat",
        "created_at": "2016-05-18T23:12:59Z",
        "body": "@gafter I don't see why is this a problem. The files are small and don't change. \n"
      },
      {
        "user": "gafter",
        "created_at": "2016-05-19T00:31:26Z",
        "body": "@tmat This thread is a year old.\n"
      },
      {
        "user": "tmat",
        "created_at": "2016-05-19T00:54:25Z",
        "body": "@gafter Is it ok to close then?\n"
      }
    ]
  },
  {
    "number": 3322,
    "title": "Deprecate GetSymbolInfo and add identical but renamed GetReferencedSymbolInfo",
    "created_at": "2015-06-04T21:35:48Z",
    "closed_at": "2022-02-04T18:43:29Z",
    "labels": [
      "help wanted",
      "Concept-API",
      "Area-Compilers",
      "Feature Request",
      "Concept-Diagnostic Clarity"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3322",
    "body": "I consistently make the mistake of calling `GetSymbolInfo` on a method declaration when I should have called `GetDeclaredSymbol`. The name `GetSymbolInfo` doesn't warn me away from using it on declarations -- IOW, the name doesn't tell me to use it only on references.\n\nI suggest you deprecate `GetSymbolInfo` and add `GetDeclaredSymbol` (which can just call `GetSymbolInfo`). The message of the now-deprecated method can tell me to use the more explicitly named method instead -- or at least, if I insist on using `GetSymbolInfo`, to be really sure that this is a reference and not a declaration.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3322/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "AnthonyDGreen",
        "created_at": "2015-06-08T21:10:48Z",
        "body": "We've had a number of discussions about this problem over the years. We had several proposals including renaming GetSymbolInfo as you suggest or folding the functionality of GetDeclaredSymbol into GetSymbolInfo. Ultimately last year we elected to leave them as is feeling that grabbing a symbol from the declaration tree (GetDeclaredSymbol) was a very different operation than invoking the binder and potentially reporting all kinds of semantic errors (GetSymbolInfo). That's the case for leaving them separate. As for the name, the use of GetSymbolInfo is so widespread at this point (and was still so last year) that deprecating it would put a huge burden on anyone who's built anything with Roslyn until now.\n\nI'll propose a softer deprecation. We won't report use-site errors but we can add a GetReferencedSymbolInfo method and merely hide the existing method using EditorBrowsable(Hidden) and update the comment. Current consumer's code will continue to work but IntelliSense will naturally guide people away from that method over time. Perhaps we can consider a QuickFix which aids in migrations as well.\n\n@mattwar, what do you think?\n"
      },
      {
        "user": "ghost",
        "created_at": "2015-06-08T21:25:37Z",
        "body": "For the sake of correctness, let me fix my mistake above -- although Anthony clearly understood what I actually meant:\n\n\"I suggest you deprecate `GetSymbolInfo`  and add  `GetReferencedSymbol` (which can just call `GetSymbolInfo`).\"\n\n`GetDeclaredSymbol` is just fine.\n\nI like Anthony's suggestion.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T18:43:29Z",
        "body": "We need an actual API proposal (that goes through our documented process here).  Furthermore, we're really not going to deprecate a core API here that works well and is used in tons of places.  The duality of declaration/reference, and the corresponding split for our APIs is part and parcel of hte roslyn semantic model operations and is not going to change without dramatic need."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T18:43:39Z",
        "body": "We need an actual API proposal (that goes through our documented process here).  Furthermore, we're really not going to deprecate a core API here that works well and is used in tons of places.  The duality of declaration/reference, and the corresponding split for our APIs is part and parcel of hte roslyn semantic model operations and is not going to change without dramatic need."
      }
    ]
  },
  {
    "number": 3290,
    "title": "VB intellisense fails to show dot-completion-list after array literal",
    "created_at": "2015-06-03T21:58:54Z",
    "closed_at": "2016-01-11T23:47:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3290",
    "body": "``` vb\nModule Module1\n    Sub Main()\n        Dim x = {1}|\n    End Sub\nEnd Module\n```\n\nRepro: position your cursor where the caret is, and press \"dot\"\n\nWHAT I EXPECT: It should show a load of members in the intellisense drop-down list, e.g. .Concat, .Length, .CopyTo, .ToList.\n\nWHAT I GET: no intellisense completion list at all.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3290/comments",
    "author": "ljw1004",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2015-09-03T18:28:05Z",
        "body": "@AnthonyDGreen `{1}` in this case gets parsed as a CollectionInitializer and SemanticModel.GetTypeInfo returns a TypeInfo whose type is null and whose ConvertedType is Array(Int). Why does it return only a ConvertedType?\n"
      },
      {
        "user": "AnthonyDGreen",
        "created_at": "2015-09-03T20:44:45Z",
        "body": "Because per the spec array literals (which just consist of a collection initializer) are typeless expressions like lambdas, AddressOf, and the Nothing literal. These expressions don't have an intrinsic type but are reclassified/converted to a type. So, for instance given the statement:\n\n``` VB.NET\nDim arr As Integer() = {\"1\", \"2\", \"3\"}\n```\n\nIt is not the case that this is a string array that's converted to an integer array - that's impossible. It an array literal expression that's reclassified as an Integer array. That's only possible because the expression isn't realized with an intrinsic type first.\n"
      }
    ]
  },
  {
    "number": 2748,
    "title": "Analyzer test classes don't detect exceptions thrown by analyzers",
    "created_at": "2015-05-14T16:40:23Z",
    "closed_at": "2020-02-12T20:36:11Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Analyzers",
      "Resolution-External",
      "Test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2748",
    "body": "Repro:\n1. Write a diagnostic analyzer that throws an exception, for example:\n   \n   ```\n   public override void Initialize(AnalysisContext context)\n   {\n       context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.NamespaceDeclaration);\n   }\n   \n   private void AnalyzeNode(SyntaxNodeAnalysisContext context)\n   {\n       throw new NotImplementedException();\n   }\n   ```\n2. Write a unit test for a code fragment that I do not expect to emit any diagnostics:\n   \n   ```\n   [TestMethod]\n   public void TestMethod1()\n   {\n       var test = @\"namespace N {}\";\n   \n       VerifyCSharpDiagnostic(test);\n   }\n   ```\n\nExpected: The test should fail, and report that the analyzer threw an exception.\n\nActual: The test passes.\n\nThe problem is in the DiagnosticVerifier base class that comes with the unit test project in the \"Analyzer with Code Fix (NuGet + VSIX)\" project template. The method GetSortedDiagnosticsFromDocuments runs the analyzers on a background thread:\n\n```\n            var compilationWithAnalyzers = project.GetCompilationAsync().Result.WithAnalyzers(ImmutableArray.Create(analyzer));\n            var diags = compilationWithAnalyzers.GetAnalyzerDiagnosticsAsync().Result;\n```\n\nIf an exception occurs on the background thread, it is lost.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2748/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mavasani",
        "created_at": "2015-05-14T18:00:01Z",
        "body": "Note that this will not repro in VS IDE or command line builds, as CompilationWithAnalyzers is not used by either of them.\n"
      },
      {
        "user": "Vannevelj",
        "created_at": "2016-05-03T18:19:56Z",
        "body": "Do you have a suggestion as to how this might be fixed? Can it be done with a change to the testing helpers or does it require modifications in Roslyn internals?\n"
      },
      {
        "user": "sharwell",
        "created_at": "2020-02-12T20:36:11Z",
        "body": "This has since been fixed with the new test library (Microsoft.CodeAnalysis.Testing)."
      }
    ]
  },
  {
    "number": 2666,
    "title": "MefHostServices fails loading unsigned assemblies.",
    "created_at": "2015-05-12T01:43:44Z",
    "closed_at": "2015-05-13T03:22:39Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2666",
    "body": "When using unsigned roslyn assemblies, MefHostServices creates an invalid assembly name, which causes an exception to be thrown.\n\nFrom MefHostServices.cs:\n\n``` csharp\n\nprivate static Assembly TryLoadNearbyAssembly(string assemblySimpleName)\n{\n    var thisAssemblyName = typeof(MefHostServices).GetTypeInfo().Assembly.GetName();\n    var assemblyShortName = thisAssemblyName.Name;\n    var assemblyVersion = thisAssemblyName.Version;\n    var publicKeyToken = thisAssemblyName.GetPublicKeyToken().Aggregate(string.Empty, (s, b) => s + b.ToString(\"x2\"));\n    var assemblyName = new AssemblyName(string.Format(\"{0}, Version={1}, Culture=neutral, PublicKeyToken={2}\", assemblySimpleName, assemblyVersion, publicKeyToken));\n\n    try\n    {\n        return Assembly.Load(assemblyName);\n    }\n    catch (Exception)\n    {\n        return null;\n    }\n}\n\n```\n\nWhen an unsigned assembly is loaded, `publicKeyToken` is `\"\"` instead of `null`.\n\nA proposed solution:\nadd\n\n``` csharp\n\n    if (string.IsNullOrEmpty(publicKeyToken))\n    {\n        publicKeyToken = \"null\";\n    }\n\n```\n\nafter `publicKeyToken` is initially set.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2666/comments",
    "author": "jakesays-old",
    "comments": [
      {
        "user": "jasonmalinowski",
        "created_at": "2015-05-13T03:22:39Z",
        "body": "And @jakesys fixed this with pull request #2669.\n"
      },
      {
        "user": "jasonmalinowski",
        "created_at": "2015-06-15T23:47:24Z",
        "body": "@jakesays, this is working for you now?\n"
      },
      {
        "user": "jakesays-old",
        "created_at": "2015-07-02T23:22:00Z",
        "body": "@jasonmalinowski yes. works great. sorry for the late reply - wasn't paying attention.\n"
      }
    ]
  },
  {
    "number": 2585,
    "title": "Pasting code in front of Xml doc comments caused strange indentation.",
    "created_at": "2015-05-07T20:33:32Z",
    "closed_at": "2023-02-17T02:02:49Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2585",
    "body": "1. paste the following code to a C# file\n\n``` csharp\nclass Test\n{\n    /// <summary>\n    /// Summary\n    /// </summary>\n    /// <param name=\"x\">x</param>\n    /// <param name=\"y\">y</param>\n    public void Method(int x, int y) { }\n\n    const int i = 1;\n}\n```\n1. select the `const int i = 1;` line, without the new line character\n2. put cursor at beginning of the `/// <summary>` line\n3. paste\n\n**Actual**\n\n``` csharp\nclass Test\n{\n    const int i = 1;    /// <summary>\n                        /// Summary\n                        /// </summary>\n                        /// <param name=\"x\">x</param>\n                        /// <param name=\"y\">y</param>\n    public void Method(int x, int y) { }\n\n\n}\n```\n\n**Expected**\nMaybe don't indent the lines, if the first xml doc comment line isn't starting on a new line.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2585/comments",
    "author": "jeremymeng",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-05-08T18:09:29Z",
        "body": "My preference would be to force an additional newline in this case.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-08-05T20:59:56Z",
        "body": "Hitting enter and then formatting fixes this, and I think it's probably relatively rare.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:35:38Z",
        "body": "Haven't heard from any other customers about this.  Seems niche."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:51Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 2423,
    "title": "IntroduceLocal should take into account parameter name when naming locals.",
    "created_at": "2015-05-01T01:27:01Z",
    "closed_at": "2017-05-08T19:12:27Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2423",
    "body": "Say i have:\n\n``` c#\nnew TextSpan(int.Parse(a), int.Parse(b));\n```\n\nIf i introduce local for `int.Parse(a)` then we should suggest calling this local 'start' because of the name of the parameter i'm calling.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2423/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-05-01T16:23:57Z",
        "body": "Great suggestion!\n"
      },
      {
        "user": "baks",
        "created_at": "2015-05-11T18:00:45Z",
        "body": "I would like to try to add this feature into introduce local refactoring, if possible.\n\nIt looks like the IntroduceLocal refactoring uses `GenerateNameForExpression` in `ISemanticModelExtensions.cs`.\nIt is a good idea for start to check whether the expression is `ArgumentSyntax`, next get `ParameterSymbol` from SemanticModel using this argument and return that parameter name?\nOr maybe am I missing something?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-05-11T18:07:24Z",
        "body": "That sounds about right to me.  @balajikris any input?\n\n@baks: Keep in mind that the mapping from ArgumentSyntax to ParameterSymbol isn't always trivial in the case of arguments specified by name.\n"
      },
      {
        "user": "balajikris",
        "created_at": "2015-05-11T18:25:08Z",
        "body": "Yep, that approach sounds right to me. As you might have already noticed, there is a `CreateParameterName` within `GenerateNameForExpression` that probably needs this tweak. Look for name generation related unit test methods at  `IntroduceVariableTests.cs and IntroduceVariableTests.vb`..\n\nThanks for taking a look.\n"
      },
      {
        "user": "kuhlenh",
        "created_at": "2016-02-02T23:22:47Z",
        "body": "@baks are you still looking to do this? If not, I'll take it...let me know!\n"
      },
      {
        "user": "baks",
        "created_at": "2016-02-03T07:20:22Z",
        "body": "I had problems with dogfooding IDE, so I didn't resolve this issue.\n\n@kuhlenh, I'm not looking at this issue, I'm sorry that I don't stated earlier that I'm not working at this.\n"
      }
    ]
  },
  {
    "number": 2290,
    "title": "Consider unifying code to extract text from an Xml Documentation Comment",
    "created_at": "2015-04-27T17:52:49Z",
    "closed_at": "2024-10-25T05:29:00Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Documentation"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2290",
    "body": "Currently, SignatureHelp and QuickInfo use the same code, but Outlining has it's own codepath that isn't as nice:\n- Doesn't handle spaces around punctuation properly.\n- Doesn't handle things like generics in crefs.\n\nNote however, that because it synchronously blocks on file open, we probably want to keep outlining syntactic only.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2290/comments",
    "author": "Pilchie",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2015-04-29T00:01:27Z",
        "body": "To clarify the last point - it means while special handling for `<see cref=\"...\"/>` or `<see langword=\"...\"/>` would be straightforward improvements, it is unlikely that we would ever see support for _expanding_ `<include>` or `<inheritdoc/>` elements as part of the outlining process.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-04-29T15:55:52Z",
        "body": "It's more than just that - the existing quick info code also does things like simplify the typenames in crefs based on usings, etc.  We'll need to make sure there is a path that doesn't do that semantic work.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:29:00Z",
        "body": "Closing out as speculative."
      }
    ]
  },
  {
    "number": 2027,
    "title": "Extract local misses occurrence with implicit receiver",
    "created_at": "2015-04-15T21:24:45Z",
    "closed_at": "2024-10-25T05:35:00Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Feature - Extract Local"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2027",
    "body": "Ported from TFS WorkItem: **996944**\n\n---\n\n**Repro Steps:**\n\nExtract all occurrences of `**P**`.\n\n``` C#\nclass Program\n{\n\n      public virtual int P { get; set; }\n\n       public string M()\n        {\n        var p1 = **this.P**.ToString();\n        return p1 + **P**;\n        }\n}\n\n```\n\nExpected: Both `**this.P**` and `**P**` are extracted.\n\nActual: Only `**this.P**` is extracted.\n\n---\n\n**Revisions:**\n\n1) Created By Andrew Casey (ROSLYN) (7/30/2014 10:15:20 AM)\n\n---\n\n2) Edited By Kevin Pilch-Bisson (2/15/2015 9:05:32 PM)\n\nYes, we should do this eventually.&nbsp; Put on GitHub in Unknown/Up for Grabs.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2027/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-25T05:35:00Z",
        "body": "Clsoing out due to age and lack of broader feedback."
      }
    ]
  },
  {
    "number": 2023,
    "title": "IDE quick info tooltip missing xml doc comment if the doc includes \"&\"",
    "created_at": "2015-04-15T21:16:02Z",
    "closed_at": "2024-10-21T19:28:09Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2023",
    "body": "Ported from TFS WorkItem: **547298**\n\n---\n\n**Repro Steps:**\n1. paste the following code into VS<div><br></div><div><div>class C</div><div>{</div><div>&nbsp; &nbsp; static void Foo()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; CompileAndInvoke();</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; /// &lt;summary&gt;</div><div>&nbsp; &nbsp; /// Compile &amp; Invoke</div><div>&nbsp; &nbsp; /// &lt;/summary&gt;</div><div>&nbsp; &nbsp; static void CompileAndInvoke()</div><div>&nbsp; &nbsp; { }</div><div>}</div></div><div><br></div><div>2. hover cursor over either one of \"CompileAndInvoke()</div><div><br></div><div>**Actual**:</div><div>No xml doc comments in the tool tip.</div><div><br></div><div>**Expected**:</div><div>doc comments in the tool tip.</div><div><br></div><div>the exception log shows two exceptions</div><div><br></div><div><div>System.Xml.XmlException: Name cannot begin with the ' ' character, hexadecimal value 0x20. Line 3, position 14.</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseQName(Boolean isQName, Int32 startOffset, Int32&amp; colonPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div>12/4/2012 12:21:38 PM</div><div>Source: First chance exception: System.Xml</div><div>StackTrace: &nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseQName(Boolean isQName, Int32 startOffset, Int32&amp; colonPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div><br></div></div><div><br></div><div>and&nbsp;</div><div><br></div><div><br></div><div><div>System.Xml.XmlException: Name cannot begin with the ' ' character, hexadecimal value 0x20. Line 3, position 14.</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseQName(Boolean isQName, Int32 startOffset, Int32&amp; colonPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div>12/4/2012 12:21:38 PM</div><div>Source: First chance exception: System.Xml</div><div>StackTrace: &nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseQName(Boolean isQName, Int32 startOffset, Int32&amp; colonPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div><br></div><div>System.Xml.XmlException: An error occurred while parsing EntityName. Line 3, position 14.</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseText(Int32&amp; startPos, Int32&amp; endPos, Int32&amp; outOrChars)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.FinishPartialValue()</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.get_Value()</div><div>&nbsp; &nbsp;at System.Xml.XmlReader.WriteNode(XmlWriter xtw, Boolean defattr)</div><div>&nbsp; &nbsp;at System.Xml.XmlReader.ReadInnerXml()</div><div>&nbsp; &nbsp;at Roslyn.Services.DocumentationComment.FromXmlFragment(String xml) in e:\\Roslyn\\Main\\Source\\Services\\Core\\DocumentationComment.cs:line 102</div><div>12/4/2012 12:21:38 PM</div><div>Source: First chance exception: System.Xml</div><div>StackTrace: &nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.Throw(Exception e)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.HandleEntityReference(Boolean isInAttributeValue, EntityExpandType expandType, Int32&amp; charRefEndPos)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.ParseText(Int32&amp; startPos, Int32&amp; endPos, Int32&amp; outOrChars)</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.FinishPartialValue()</div><div>&nbsp; &nbsp;at System.Xml.XmlTextReaderImpl.get_Value()</div><div>&nbsp; &nbsp;at System.Xml.XmlReader.WriteNode(XmlWriter xtw, Boolean defattr)</div><div>&nbsp; &nbsp;at System.Xml.XmlReader.ReadInnerXml()</div><div>&nbsp; &nbsp;at Roslyn.Services.DocumentationComment.FromXmlFragment(String xml) in e:\\Roslyn\\Main\\Source\\Services\\Core\\DocumentationComment.cs:line 102</div><div><br></div></div><div><br></div><div><br></div>\n\n---\n\n**Revisions:**\n\n1) Created By Jeremy Meng (12/7/2012 10:36:26 PM)\n\n---\n\n2) Edited By Dustin Campbell (12/7/2012 10:36:27 PM)\n\nActually, the Expected should be to show the XML error in the tooltip. See, the attached screenshot.\n\n---\n\n3) Edited By Dustin Campbell (12/7/2012 10:36:27 PM)\n\nKevin's preference would be to try and show the actually text of the doc comment, regardless of parse errors.\n\n---\n\n4) Edited By Kayle Hinkle (5/14/2014 9:39:42 PM)\n\nThe compiler currently returns the following:\n\n&nbsp;\n\n&lt;!-- Badly formed XML comment ignored for member &quot;M:C.CompileAndInvoke&quot; --&gt;\n\n&nbsp;\n\nThe IDE currently only displays the &lt;summary&gt; contents, which is null here.\n\n&nbsp;\n\n3 options:\n1. won't fix\n2. Display what the compiler currently returns (Badly formed XML comment ignored for member &quot;M:C.CompileAndInvoke&quot;)\n3. Ask the compiler team to provide the text anyway despite the errors.\n\n---\n\n5) Edited By Kevin Pilch-Bisson (6/13/2014 1:16:51 PM)\n\nWe should show the message below in these cases.\n\n---\n\n6) Edited By Kevin Pilch-Bisson (2/15/2015 9:25:45 PM)\n\nLet's put this in unknown/up for grabs.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2023/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2015-04-16T02:54:36Z",
        "body": "Hovering over `CompileAndInvoke` should show the following:\n\n> Compile & Invoke\n\nThe XML error will be reported separately at the location where it actually occurs. There is no need to remove useful information from Quick Info for all the references over this.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-04-16T04:02:13Z",
        "body": "It's not that we deliberately try to remove info, it's just that we parse the xml, and if there is a parse error, we don't get a summary tag to get the contents of.\n"
      },
      {
        "user": "sharwell",
        "created_at": "2015-04-16T05:16:27Z",
        "body": "I know that. :smile:  I just wanted to clarify the intended (optimal) outcome since it's labeled Up for Grabs.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-01T19:37:37Z",
        "body": "Behavior seems acceptable.  user is already informed (through several mechanisms) that there's a problem with their doc comment.  "
      },
      {
        "user": "sharwell",
        "created_at": "2020-03-01T21:21:48Z",
        "body": "Reopening. This statement is not correct:\r\n\r\n> user is already informed ... that there's a problem with their doc comment.\r\n\r\nUnder default project configurations, Quick Info does not work and there is no indication at all regarding the cause."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:28:09Z",
        "body": "Closing as by design and lack of feedback.  If we want to make any changes here, then we should attach this to a milestone and fix it."
      }
    ]
  },
  {
    "number": 2021,
    "title": "\"Go To Definition\" command places cursor at end of method name.",
    "created_at": "2015-04-15T21:13:03Z",
    "closed_at": "2022-02-04T18:46:46Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/2021",
    "body": "Ported from TFS WorkItem: **883644**\n\n---\n\n**Repro Steps:**\n\n<BR>**Steps to reproduce:**<BR>\n1. Create a new C# Console application.\n2. Set the editor text of Program.cs to the following:\n\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>\n\n<FONT face=Consolas>namespace</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2><FONT color=#000000 face=Consolas> ConsoleApplication1</FONT>\n\n<FONT face=Consolas>{</FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; class</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>Program\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp; </FONT>{</FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>void</FONT></FONT></FONT><FONT size=2><FONT size=2> Main(</FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>string</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2><FONT face=Consolas>[] args)</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>{</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>myFunction();</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>}</FONT>\n\n<FONT face=Consolas></FONT>&nbsp;\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>void</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2><FONT face=Consolas> myFunction()</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>{</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>}</FONT>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp; </FONT>}</FONT>\n\n<FONT face=Consolas>}</FONT>\n</FONT></FONT>\n1. Right click on the call to myFunction() inside the Main() fuinction and click \"Go To Definition\".\n2. Right click on the call to myFunction() again, and click on \"Peek Definition\".\n\n<BR>**Actual Results:**<BR>Both \"Go To Definition\" and \"Peek Definition\" successfully find the definition of the function (or variable). However, \"Go To Definition\" places the cursor at the end of the function or variable&nbsp;name, while \"Peek Definition\" puts the cursor at the end of the beginning of the function or variable&nbsp;name.\n\n<BR>**Expected Results:**<BR>(This is also the Dev12 behavior)\n\nBoth \"Go To Definition\" and \"Peek Definition\" place the cursor at the beginning of the function or variable&nbsp;name.\n\n---\n\n**Revisions:**\n\n1) Created By Collin Deel (Chinasoft) (2/14/2014 4:23:50 PM)\n\n---\n\n2) Edited By Dustin Campbell (2/18/2014 9:38:53 AM)\n\nWe like the design that the caret is at the end with a selection. We should do the same for Peek.\n\n---\n\n3) Edited By Collin Deel (Chinasoft) (5/1/2014 11:34:32 AM)\n\nI just noticed that double-clicking on&nbsp;a class/function/variable/etc&nbsp;name&nbsp;in the solution explorer also places the caret at the beginning of the definition name.\n\n---\n\n4) Edited By Kevin Pilch-Bisson (2/18/2015 4:50:58 PM)\n\nLet's port this to GitHub in Unknown and Mark Up for Grabs.&nbsp; \n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/2021/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T18:36:23Z",
        "body": "This is not roslyn.  We create the peek item calling into `IPeekResultFactory.Create(IPeekResultDisplayInfo displayInfo, string filePath, int startLine, int startIndex, int endLine, int endIndex, int idLine, int idIndex, bool isReadOnly);`  We pass the appropriate start/end positions, but the platform places the caret at the start.\r\n\r\n@jinujoseph  can we move to azdo?  Note: i'm also fine just closing this as this just seems so niche and we haven't heard a single thin on this."
      },
      {
        "user": "jinujoseph",
        "created_at": "2022-02-04T18:46:46Z",
        "body": "thanks Cyrus, old issue so closing this out. if this comes up ..we can move to platform"
      }
    ]
  },
  {
    "number": 1903,
    "title": "Type inference should infer enumerable item type inside a lambda",
    "created_at": "2015-04-10T00:16:26Z",
    "closed_at": "2016-05-16T22:28:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1903",
    "body": "Ported from TFS WorkItem: **726766**\n\n---\n\n**Repro Steps:**\n1. Paste this code\n\n``` C#\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass A { }\nclass B { }\nclass C\n{\n    IEnumerable<B> GetB(IEnumerable<A> a)\n    {\n        return a.Select(i => Foo(i));\n    }\n}\n```\n1. Invoke Generate Method on Foo\n\n&nbsp;\n\n_Expected_:\n\n``` C#\nprivate B Foo(A i)\n```\n\n_Actual_:\n\n``` C#\nprivate object Foo(A i)\n```\n\n---\n\n**Revisions:**\n\n1) Created By Kirill Osenkov (6/28/2013 1:30:35 PM)\n\n---\n\n2) Edited By Kirill Osenkov (6/28/2013 1:32:05 PM)\n\nDev12 generates this, which is equally useless:\n\n&#160;\n<font face=Consolas>\n\n</font><font color=\"#0000ff\" face=Consolas><font color=\"#0000ff\" face=Consolas>private</font></font><font face=Consolas> <font style=\"BACKGROUND-COLOR:#ffff00;\">TResult</font> Foo(</font><font color=\"#2b91af\" face=Consolas><font color=\"#2b91af\" face=Consolas>A</font></font><font face=Consolas> i)\n\n{\n\n</font><font color=\"#0000ff\" face=Consolas><font color=\"#0000ff\" face=Consolas>&#160;&#160;&#160; throw</font></font><font face=Consolas> </font><font color=\"#0000ff\" face=Consolas><font color=\"#0000ff\" face=Consolas>new</font></font><font face=Consolas> </font><font color=\"#2b91af\" face=Consolas><font color=\"#2b91af\" face=Consolas>NotImplementedException</font></font><font face=Consolas>();\n\n}\n</font>\n\n---\n\n3) Edited By Kevin Pilch-Bisson (7/1/2013 9:20:58 AM)\n\nYes, this would be a nice improvement.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1903/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "bmay2",
        "created_at": "2016-04-18T00:43:22Z",
        "body": "I believe I've got a fix for this one.\n"
      },
      {
        "user": "balajikris",
        "created_at": "2016-05-16T21:37:15Z",
        "body": "@bmay2 : Thanks for the submission!\n"
      }
    ]
  },
  {
    "number": 1902,
    "title": "introduce variable generates Let clause in wrong location in aggregate context",
    "created_at": "2015-04-10T00:08:33Z",
    "closed_at": "2024-10-18T20:24:02Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1902",
    "body": "Ported from TFS WorkItem: **531203**\n\n---\n\nSelect `Math.Abs(x) > 1` and introduce variable\n\n**Repro Steps:**\n\n``` VB\nModule Program\n    Sub Main()\n        Dim q = Aggregate x In {0, 1, 2} Into Count(Math.Abs(x) > 1) ' Introduce variable\n    End Sub\nEnd Module\n```\n\n_Actual_:\n\n``` VB\nModule Program\n    Sub Main()\n        Dim q = Let v = Math.Abs(x) > 1 Aggregate x In {0, 1, 2} Into Count(v) ' Introduce variable\n    End Sub\nEnd Module\n```\n\n_Expected_:\n\n``` VB\nModule Program\n    Sub Main()\n        Dim q = Aggregate x In {0, 1, 2} Let v = Math.Abs(x) > 1 Into Count(v) ' Introduce variable\n    End Sub\nEnd Module\n```\n\n---\n\n**Revisions:**\n\n1) Created By HeeJae Chang (11/28/2012 9:23:37 PM)\n\n---\n\n2) Edited By HeeJae Chang (11/28/2012 9:23:38 PM)\n\nAssociated with changeset 29671: let argument in aggregate function be extractable\n\n---\n\n3) Edited By Kevin Pilch-Bisson (2/15/2015 9:10:23 PM)\n\nPort to GitHub\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1902/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:24:02Z",
        "body": "Unlikely to do anything special here absent enough customer complaints about this behavior."
      }
    ]
  },
  {
    "number": 1900,
    "title": "Smart Tag shouldn't be offered for 'AddressOf' expression",
    "created_at": "2015-04-09T23:54:35Z",
    "closed_at": "2022-10-28T17:55:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1900",
    "body": "Ported from TFS WorkItem: **529510**\n\n---\n\n**Repro Steps:**\n\n<FONT size=3>\n\nStep1. Open New VB file.&nbsp;\n\nStep2: Copy and paste the following code:\n\n&nbsp;\n\n<PRE style=\"FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink; FONT-SIZE: 16px\"><SPAN style=\"COLOR: blue\">Module</SPAN> <SPAN style=\"COLOR: #2b91af\">Module1</SPAN>\n    <SPAN style=\"COLOR: blue\">Public</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">Foo</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">ByVal</SPAN> <SPAN style=\"COLOR: black\">a1</SPAN> <SPAN style=\"COLOR: blue\">As</SPAN> <SPAN style=\"COLOR: #2b91af\">Exception</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n    <SPAN style=\"COLOR: blue\">Public</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">foo</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">ByVal</SPAN> <SPAN style=\"COLOR: black\">a1</SPAN> <SPAN style=\"COLOR: blue\">As</SPAN> <SPAN style=\"COLOR: #2b91af\">Action</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">Of</SPAN> <SPAN style=\"COLOR: #2b91af\">ArgumentException</SPAN><SPAN style=\"COLOR: black\">))</SPAN>\n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n    <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">Main</SPAN><SPAN style=\"COLOR: black\">()</SPAN>\n        <SPAN style=\"COLOR: black\">foo</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">New</SPAN> <SPAN style=\"COLOR: #2b91af\">Action</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">Of</SPAN> <SPAN style=\"COLOR: #2b91af\">Exception</SPAN><SPAN style=\"COLOR: black\">)(</SPAN><FONT style=\"BACKGROUND-COLOR: #ffff00\"><SPAN style=\"COLOR: blue\">AddressOf</SPAN> <SPAN style=\"COLOR: black\">Foo</SPAN></FONT><SPAN style=\"COLOR: black\">))</SPAN>\n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n<SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Module</SPAN></PRE>\n\n\n&nbsp;\n\n**ACTUAL RESULT**\n\nSmart Tag under <FONT style=\"BACKGROUND-COLOR: #ffff00\"><FONT size=+0><SPAN style=\"COLOR: blue\"><FONT size=+0>AddressOf</FONT></SPAN> </FONT><SPAN style=\"COLOR: black\">Foo</SPAN></FONT>\n\n<FONT style=\"BACKGROUND-COLOR: #ffff00\"><SPAN style=\"COLOR: black\"></SPAN></FONT>&nbsp;\n\n**EXPECTED RESULT**\n\nShouldn't be offered at all, because Action(of T) requires an 'AddressOf' expression or lambda expression as the only argument to its constructor.\n</FONT>\n\n---\n\n**Revisions:**\n\n1) Created By Binyam Kelile (11/28/2012 6:57:09 PM)\n\n---\n\n2) Edited By Binyam Kelile (11/28/2012 6:57:12 PM)\n\nUnit test:\n\n...\\Services\\VisualBasic\\Test\\CodeActions\\IntroduceVariable\\IntroduceVariableTests.vb\n<font size=2 face=Consolas><font size=2 face=Consolas>\n\n&lt;</font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>WorkItem</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>(13283)&gt;\n\n&lt;</font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>Fact</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>(Skip:=</font></font><font color=\"#800000\" size=2 face=Consolas><font color=\"#800000\" size=2 face=Consolas><font color=\"#800000\" size=2 face=Consolas>&quot;13283&quot;</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>), </font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>Trait</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>(</font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>Traits</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>.Feature, </font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>Traits</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>.</font></font><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas><font color=\"#2b91af\" size=2 face=Consolas>Features</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>.CodeActionsIntroduceVariable)&gt;\n\n</font></font><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas>Public</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas> </font></font><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas>Sub</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas> TestNoRefactoringOnAddressOfExpression()\n\n</font></font><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas>Dim</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas> source = NewLines(</font></font><font color=\"#800000\" size=2 face=Consolas><font color=\"#800000\" size=2 face=Consolas><font color=\"#800000\" size=2 face=Consolas>&quot;Imports System \\n Module Module1 \\n Public Sub Foo(ByVal a1 As Exception) \\n End Sub \\n Public Sub foo(ByVal a1 As Action(Of ArgumentException)) \\n End Sub \\n Sub Main() \\n Foo(New Action(Of Exception)([|AddressOf Foo|])) \\n End Sub \\n End Module&quot;</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas>)\n\nTestMissing(source)\n\n</font></font><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas>End</font></font></font><font size=2 face=Consolas><font size=2 face=Consolas> </font></font><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas><font color=\"#0000ff\" size=2 face=Consolas>Sub\n</font></font></font>\n\n---\n\n3) Edited By Cyrus Najmabadi (11/28/2012 6:57:13 PM)\n\n---\n\n4) Edited By Cyrus Najmabadi (11/28/2012 6:57:14 PM)\n\nResolved with changeset 24755: Don't provide introduce var on 'addressof' in a delegate constructor.\n\n---\n\n5) Edited By Binyam Kelile (11/28/2012 6:57:15 PM)\n\nVerified as fixed and closed.\n\n---\n\n6) Edited By Jeremy Meng (11/28/2012 6:57:17 PM)\n\nThis still repros.&#160; Light bulb offers three options after selecting &quot;AddressOf Foo&quot;:\n\n&#160;\n\nextract method\n\nintroduce ...\n\nintroduce ... for all ...\n\n---\n\n7) Edited By Jeremy Meng (11/28/2012 6:57:17 PM)\n\nintroduce variable will generate code with error:\n\n&#160;\n\nSourceCode.vb(10) : error BC32008: Delegate 'System.Action(Of System.Exception)' requires an 'AddressOf' expression or lambda expression as the only argument to its constructor.\n\n---\n\n8) Edited By Dustin Campbell (11/28/2012 6:57:18 PM)\n\nThis probably regressed when Cyrus made&#160;EM and IEV use a white list.\n\n---\n\n9) Edited By Kevin Pilch-Bisson (7/1/2013 8:41:05 AM)\n\nThere is no smart tag anymore, but if you select the highlighted chunk, this still repros.\n\n---\n\n10) Edited By Prakash Balasubramanian (4/1/2014 4:58:17 PM)\n\nWe still offer refactorings for this case which results in compilation errors when applied.\n\n---\n\n11) Edited By Dustin Campbell (4/14/2014 9:39:49 AM)\n\nExtract Method should expand in this case.\n\n---\n\n12) Edited By Balaji Krishnan (7/10/2014 12:04:11 PM)\n\nYep, Ctrl R,M (Extract method command) also produces the same incorrect result. If selection expansion handles this correctly, then both workflows will be fixed.\n\n---\n\n16) Edited By Kevin Pilch-Bisson (2/15/2015 9:15:36 PM)\n\nWe can port this as up for grabs.&nbsp; \n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1900/comments",
    "author": "balajikris",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-01T19:20:29Z",
        "body": "I'm ok with this behavior.  User may want to be making a set of steps.  it's ok for intermediary steps to be in error to still help them make the changes they may expect to be able to make."
      },
      {
        "user": "sharwell",
        "created_at": "2020-03-01T21:37:07Z",
        "body": "Reopening; the original issue remains up for grabs. There are two acceptable approaches for fixing this:\r\n\r\n1. Continue offering the **Extract Local** functionality for `New Action`, and omit it entirely for `AddressOf Foo`.\r\n2. Offer the **Extract Local** functionality in both locations, but automatically treat both locations as extracting the entire `New Action` expression to a local."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T17:55:13Z",
        "body": "Closing out as this doesn't repro for me at all. "
      }
    ]
  },
  {
    "number": 1847,
    "title": "ElasticTriviaFormatting does not insert line break after # directives",
    "created_at": "2015-04-07T21:53:23Z",
    "closed_at": "2023-02-20T05:01:45Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1847",
    "body": "Ported from TFS WorkItem: **530167**\n\n---\n\n**Repro Steps:**\n1. run the following unit test\n\n&nbsp;\n<SPAN lang=EN>\n<P dir=ltr align=left><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">var</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\"> compilation = </FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.CompilationUnit(\n\n<P dir=ltr align=left>externs: </FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.List&lt;</FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">ExternAliasDirectiveSyntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">&gt;(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.ExternAliasDirective(</FONT></FONT><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\">\"A1\"</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">)),\n\n<P dir=ltr align=left>usings: </FONT></FONT><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">null</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">,\n\n<P dir=ltr align=left>attributes: </FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.List&lt;</FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">AttributeDeclarationSyntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">&gt;(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.AttributeDeclaration(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Token(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.TriviaList(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Trivia(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.LineDirectiveTrivia(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Literal(</FONT></FONT><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\">\"99\"</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">, 99), </FONT></FONT><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">false</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">))),\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">SyntaxKind</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.OpenBracketToken,\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.TriviaList()),\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.AttributeTargetSpecifier(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Identifier(</FONT></FONT><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\">\"assembly\"</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">)),\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.SeparatedList&lt;</FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">AttributeSyntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">&gt;(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Attribute(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.ParseName(</FONT></FONT><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\"><FONT color=#a31515 size=2 face=\"Consolas,Lucida Console\">\"My\"</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">))),\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Syntax</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Token(\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">SyntaxKind</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.CloseBracketToken))),\n\n<P dir=ltr align=left>members: </FONT></FONT><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">null</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">);\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Assert</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.NotNull(compilation);\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">var</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\"> result = compilation.Format(</FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">FormattingOptions</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.GetDefaultOptions());\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\"><FONT color=#0000ff size=2 face=\"Consolas,Lucida Console\">var</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\"> newCompilation = result.GetFormattedRoot();\n\n<P dir=ltr align=left></FONT></FONT><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\"><FONT color=#2b91af size=2 face=\"Consolas,Lucida Console\">Assert</FONT></FONT></FONT><FONT size=2 face=\"Consolas,Lucida Console\"><FONT size=2 face=\"Consolas,Lucida Console\">.Equal(expected, newCompilation.GetFullText());\n</FONT></FONT><FONT size=3>\n<P dir=ltr align=left>\n</FONT></SPAN>\n\n&nbsp;\n\nExpected:\n\n[assembly: My] should be formatted in a new line, probably also with a blank line separating the # directives\n\n&nbsp;\n\nActual:\n\n&nbsp;\n<FONT color=#1e1e1e size=1 face=Consolas><FONT color=#1e1e1e size=1 face=Consolas><FONT color=#1e1e1e size=1 face=Consolas>\n\nextern alias A1;\n# line 99[assembly: My]\n\n</FONT></FONT></FONT>\n\n---\n\n**Revisions:**\n\n1) Created By Jeremy Meng (11/28/2012 7:57:10 PM)\n\n(TFS Integration from 'DevdivProjects-Roslyn' Id: 15426 (rev 1);)\n\n---\n\n2) Edited By Dustin Campbell (11/28/2012 7:57:11 PM)\n\n(TFS Integration from 'DevdivProjects-Roslyn' Id: 15426 (rev 2);)\n\n---\n\n3) Edited By Dustin Campbell (11/28/2012 7:57:12 PM)\n\nYeah, I like this behavior as well for simple directives like &quot;#line&quot;. However, we should be careful about directives that are interleaved.\n\n(TFS Integration from 'DevdivProjects-Roslyn' Id: 15426 (rev 3);)\n\n---\n\n4) Edited By Jeremy Meng (11/28/2012 7:57:13 PM)\n\nAssociated with changeset 27595: Add a test for bug 15426.\n\n(TFS Integration from 'DevdivProjects-Roslyn' Id: 15426 (rev 4);)\n\n---\n\n5) Edited By Dustin Campbell (3/12/2013 9:28:37 AM)\n\nFound this while retriaging our active bugs.\n\n---\n\n6) Edited By Kevin Pilch-Bisson (2/16/2015 10:08:56 AM)\n\nLet's port this to github in unknown/up for grabs.&nbsp; We can definitely ship like this though.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1847/comments",
    "author": "dotnet-bot",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:32:47Z",
        "body": "I don't repro this.  Works fine for me. "
      },
      {
        "user": "ghost",
        "created_at": "2023-02-20T05:01:47Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 1776,
    "title": "Generate Type not appearing the First time Ctrl+. in the Attribute List Context",
    "created_at": "2015-04-03T16:03:46Z",
    "closed_at": "2022-10-28T17:52:25Z",
    "labels": [
      "Bug",
      "help wanted",
      "Language-VB",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1776",
    "body": "Paste the below code\n\n```\nClass C\n    <System.CLSCompliant(False), Foo>\n    Dim foo As Integer\nEnd Class\n```\n\nNote that the `Foo` in the `AttributeList` Context is with the Capital 'F'. Now press 'ctrl + dot', to Generate Type `Foo`. Instead of getting the codefix to generate type, we see that 'Foo' gets modified to 'foo'. Issuing 'ctrl + dot' again shows the codefix to generate type 'foo'.\n\nExpected: Generate Type for `Foo` when 'ctrl + dot' was issued the first time\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1776/comments",
    "author": "basoundr",
    "comments": [
      {
        "user": "srivatsn",
        "created_at": "2015-04-13T20:50:36Z",
        "body": "Presumably adding the error that shows up for tis case to generate type should fix this issue.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T17:52:25Z",
        "body": "I don't repro this.  Closing out as so much of these systems has been modified in the last 7 years that it likely is just fixed now."
      }
    ]
  },
  {
    "number": 1661,
    "title": "Intellisense doesnt suggest <param> tags for indexers",
    "created_at": "2015-03-29T14:28:02Z",
    "closed_at": "2015-08-12T17:35:54Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1661",
    "body": "``` csharp\npublic class Foo\n{\n    /// <summary>\n    /// A indexer.\n    /// </summary>\n    /// <#\n    /// <returns> foo. </returns>\n    public string this [string foo]\n    {\n        get { return foo; }\n    }\n}\n```\n\nIf the cursor is at # and intellisense is up \"param name=\"foo\"\" doesnt show up. It should work for indexers the same way it works for methods. I can create a PR for that.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1661/comments",
    "author": "pdelvo",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-03-30T16:34:28Z",
        "body": "@rchande  can you take a look at the PR and merge once reviewed?\n"
      }
    ]
  },
  {
    "number": 1647,
    "title": "Feature Request: Add IntelliSense pre-selection for default, like new",
    "created_at": "2015-03-27T21:53:49Z",
    "closed_at": "2015-11-30T18:48:12Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1647",
    "body": "When I type `CancellationToken cancellationToken = default(`, can you please pre-select `CancellationToken`, just like the `new` operator?\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1647/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "sharwell",
        "created_at": "2015-03-29T03:59:44Z",
        "body": "I think this is the least `Pedantic ;)` issue I've ever seen from you. Love the idea.\n"
      },
      {
        "user": "SLaks",
        "created_at": "2015-03-29T13:07:19Z",
        "body": "Nah; I've filed some other non-pendantic issues too. :smiley: \nRecently, #1524, #1382, #1373, #1276, #534\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-03-30T16:40:44Z",
        "body": "Yes, this is definitely a good suggestion (though I'm surprised MRU pre-selection doesn't help you in that specific case).\n"
      },
      {
        "user": "SLaks",
        "created_at": "2015-03-30T16:48:17Z",
        "body": "MRU doesn't help if I just added `System.Threading` via quick fix from the type name.  (which is common, since that namespace isn't in the template)\n\nActually, on further thought, can you preselect `default(T)` after `=` in a non-primitive argument declaration? (since no other expression is valid)\n"
      },
      {
        "user": "sharwell",
        "created_at": "2015-03-30T18:32:35Z",
        "body": "> Actually, on further thought, can you preselect `default(T)` after = in a non-primitive argument declaration? (since no other expression is valid)\n\nArguably beneficial for all such types, but only required for non-nullable, non-primitive value types.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-11-30T18:48:07Z",
        "body": "Fixed by #6907\n"
      },
      {
        "user": "dpoeschl",
        "created_at": "2015-11-30T18:53:39Z",
        "body": "@slaks said:\n\n> Actually, on further thought, can you preselect default(T) after = in a non-primitive argument declaration? (since no other expression is valid)\n\nSplitting out this part into #7113\n"
      }
    ]
  },
  {
    "number": 1516,
    "title": "Quick Info does not render language-specific keywords",
    "created_at": "2015-03-24T06:15:44Z",
    "closed_at": "2015-09-30T20:12:58Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "4 - In Review"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1516",
    "body": "Most references to language-specific keywords, such as `null`, are written in the following form in my documentation:\n\n```\n<see langword=\"null\"/>\n```\n\nIn the C# editor in Visual Studio 2013, the tag above is rendered as simply \"null\" (no quotes, no formatting). In Visual Studio 2015 CTP 6, the word is omitted altogether. This results in very strange documentation in many cases. It would be helpful if, at minimum, the Quick Info in Visual Studio 2015 were updated to include the keyword from this tag.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1516/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "rchande",
        "created_at": "2015-09-09T18:18:23Z",
        "body": "Specifically, the IDE should always include the content of the attribute inside the <see> element. We especially need to not drop href.\n"
      }
    ]
  },
  {
    "number": 1514,
    "title": "Update Quick Info for integer literals to show value in multiple bases",
    "created_at": "2015-03-24T06:08:01Z",
    "closed_at": "2024-10-18T20:30:09Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1514",
    "body": "Currently the Quick Info for an integer literal in the editor simply shows \"struct System.Int32\" (or another integer type), along with the summary documentation for that type. It would be helpful if the next 4 lines provided the following:\n1. The decimal representation of the number\n2. The hexadecimal representation of the number\n3. The octal representation of the number\n4. The binary representation of the number\n\nIn addition, it may be worthwhile to consider including the `char` value for any integer inside that range, though I have not needed this information nearly as many times.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1514/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-03-24T16:05:12Z",
        "body": "We should take some care that Quick Info doesn't become so big that it is intrusive by adding a ton of info there.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:30:09Z",
        "body": "Unlikely to do this given lack of feedback on this issue.  "
      }
    ]
  },
  {
    "number": 1513,
    "title": "Update Quick Info for string literals to show the length of the string",
    "created_at": "2015-03-24T06:04:16Z",
    "closed_at": "2022-10-28T17:46:18Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1513",
    "body": "When hovering over a string literal in the C# editor, the Quick Info only shows \"class System.String\". It would be helpful if a second line were included which showed the length of the string.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1513/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-03-24T16:05:25Z",
        "body": "We should take some care that Quick Info doesn't become so big that it is intrusive by adding a ton of info there.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T17:46:18Z",
        "body": "Having heard no more feedback on this, i think we shoudl close this out as not being worth it."
      }
    ]
  },
  {
    "number": 1449,
    "title": "EE: No error reported for unrecognized (perhaps missing) pseudo-variable type",
    "created_at": "2015-03-20T23:27:27Z",
    "closed_at": "2016-03-17T23:00:51Z",
    "labels": [
      "Bug",
      "help wanted",
      "Interactive-Debugging",
      "Area-Interactive"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1449",
    "body": "Ported from TFS WorkItem: <b>1102923</b>\n\n---\n\n<p><b>Repro Steps:</b></p>\n\n<P>See Microsoft.CodeAnalysis.VisualBasic.UnitTests.PseudoVariableTests.UnrecognizedAssembly unit test.</P>\n\n<P><BR>F5 the following:</P>\n\n<P>Class C<BR>&nbsp;&nbsp;&nbsp; Shared Sub Main()<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Diagnostics.Debugger.Break()<BR>&nbsp;&nbsp;&nbsp; End Sub<BR>End Class\"</P>\n\n<P><BR>In the Immediate Window enter:</P>\n\n<P>o = New With { .P = 1 }<BR>?o</P>\n\n<P>&nbsp;</P>\n\n<P><U>Expected</U>: Error unrecognized type</P>\n\n<P>&nbsp;</P>\n\n<P><U>Actual</U>: Debug.Assert() failure</P>\n\n<P>&nbsp;&nbsp; at System.Diagnostics.TraceListener.Fail(String message)<BR>&nbsp;&nbsp; at System.Diagnostics.TraceInternal.Fail(String message)<BR>&nbsp;&nbsp; at System.Diagnostics.Debug.Assert(Boolean condition)<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.EEMethodSymbol.GetBoundMethodBody(DiagnosticBag diagnostics, Binder&amp; methodBodyBinder) in C:\\Roslyn\\Main\\Closed\\ExpressionEvaluator\\VisualBasic\\Source\\ExpressionCompiler\\Symbols\\EEMethodSymbol.vb:line 457<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileSynthesizedMethods(ImmutableArray`1 additionalTypes) in C:\\Roslyn\\Main\\Open\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\MethodCompiler.vb:line 809<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileMethodBodies(VisualBasicCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean generateDebugInfo, Boolean hasDeclarationErrors, Predicate`1 filter, DiagnosticBag diagnostics, CancellationToken cancellationToken) in C:\\Roslyn\\Main\\Open\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\MethodCompiler.vb:line 228<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean generateDebugInfo, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in C:\\Roslyn\\Main\\Open\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\VisualBasicCompilation.vb:line 2250<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean generateDebugInfo, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in C:\\Roslyn\\Main\\Open\\src\\Compilers\\Core\\Portable\\Compilation\\Compilation.cs:line 1246<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.CompilationContext.Compile(InspectionContext inspectionContext, String typeName, String methodName, CompilationTestData testData, DiagnosticBag diagnostics, ResultProperties&amp; resultProperties) in C:\\Roslyn\\Main\\Closed\\ExpressionEvaluator\\VisualBasic\\Source\\ExpressionCompiler\\CompilationContext.vb:line 150<BR>&nbsp;&nbsp; at Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.EvaluationContext.CompileExpression(InspectionContext inspectionContext, String expr, DkmEvaluationFlags compilationFlags, DiagnosticFormatter formatter, ResultProperties&amp; resultProperties, String&amp; errorMessage, CultureInfo preferredUICulture, CompilationTestData testData) in C:\\Roslyn\\Main\\Closed\\ExpressionEvaluator\\VisualBasic\\Source\\ExpressionCompiler\\EvaluationContext.vb:line 328<BR>...</P>\n\n---\n\n<p><b>Revisions:</b></p>\n\n\n1) Created By Chuck Stoner (1/6/2015 5:52:07 PM)\n\n---\n\n2) Edited By Manish Jayaswal (2/20/2015 2:04:15 PM)\n\n<p>We get a not so user friendly error message in the retail bits. Ideally we should give a better error message but this does not make the RC bar.</p>\n\n<p>&nbsp;</p><font color=\"#1e1e1e\" size=1 face=Consolas><font color=\"#1e1e1e\" size=1 face=Consolas><font color=\"#1e1e1e\" size=1 face=Consolas>\n<p>(1) : error BC30657: '&lt;&gt;m0' has a return type that is not supported or parameter types that are not supported.</p></font></font></font>\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1449/comments",
    "author": "ManishJayaswal",
    "comments": [
      {
        "user": "cston",
        "created_at": "2016-03-17T23:00:50Z",
        "body": "Does not repro with VS 2015 Update 1, and the unit test does not reflect the actual behavior where the type from the previous evaluation is available.\n"
      }
    ]
  },
  {
    "number": 1446,
    "title": "No Quick Info when hovering over methods or property during debugging",
    "created_at": "2015-03-20T23:17:31Z",
    "closed_at": "2022-02-04T17:58:12Z",
    "labels": [
      "Bug",
      "help wanted",
      "Interactive-Debugging",
      "Area-Interactive"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1446",
    "body": "Ported from TFS WorkItem: <b>1114405</b>\n\n---\n\n<p><b>Repro Steps:</b></p>\n\n<P><B>Affected Branch:</B> <BR><B>Affected Build:</B> <BR><B>Affected Product Language:</B> <BR><BR><B>Steps to reproduce:</B><BR><BR>1. Paste the following code over boilerplate code on a VB console application</P>\n\n<P>&nbsp;</P><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>\n<P>Module</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT color=#000000 size=2 face=Consolas> </FONT></FONT><FONT color=#2b91af size=2 face=Consolas><FONT color=#2b91af size=2 face=Consolas><FONT color=#2b91af size=2 face=Consolas>Module1</P></FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp; Dim</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> _count </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>As</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Integer</P></FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp; Sub</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> Main()</P>\n\n<P></FONT></FONT><FONT color=#2b91af size=2 face=Consolas><FONT color=#2b91af size=2 face=Consolas><FONT color=#2b91af size=2 face=Consolas>&nbsp;&nbsp;&nbsp; Console</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>.WriteLine(</FONT></FONT><FONT color=#a31515 size=2 face=Consolas><FONT color=#a31515 size=2 face=Consolas><FONT color=#a31515 size=2 face=Consolas>\"debuggin\"</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>)</P>\n\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp; End</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Sub</FONT></FONT></FONT></P>\n\n<P><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp;</P></FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp; Public</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Function</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> Foo() </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>As</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Integer</P></FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>\n<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox(</FONT></FONT><FONT color=#a31515 size=2 face=Consolas><FONT color=#a31515 size=2 face=Consolas><FONT color=#a31515 size=2 face=Consolas>\"hello\"</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>)</P>\n\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp; End</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Function</FONT></FONT></FONT></P>\n\n<P><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp;</P></FONT></FONT></FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>\n<P></FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>End</FONT></FONT></FONT><FONT size=2 face=Consolas><FONT color=#000000 size=2 face=Consolas> </FONT></FONT><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>Module</FONT></FONT></FONT></P>\n\n<P><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas></FONT></FONT></FONT>&nbsp;</P>\n\n<P>&nbsp;</P>\n\n<P>2. Put a BP on Console.WriteLine line and hit F5</P>\n\n<P>3. When the BP is hit, hover your mouse over the function name \"Foo\" ( if you are on a build that does not have a fix for 1112400 then you would see the function getting evaluated however this bug is about a different issue).</P>\n\n<P>&nbsp;</P>\n\n<P>&nbsp;</P>\n\n<P>Expected: &nbsp;there is hover tip for function Foo</P>\n\n<P>&nbsp;</P>\n\n<P>Actual:&nbsp;&nbsp;there is no hover tip for function Foo</P>\n\n<P>&nbsp;</P>\n\n<P>This is a regression from Dev12</P>\n\n<P><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas><FONT color=#0000ff size=2 face=Consolas>&nbsp;</P></FONT></FONT></FONT>\n\n------------------------------\n\n\n<p><b>Revisions:</b></p>\n\n\n1) Created By Manish Jayaswal (1/23/2015 5:52:10 PM)\n\n---\n\n2) Edited By Andrew Casey (ROSLYN) (1/26/2015 1:08:55 PM)\n\nManish clarified that he expected to see Quick Info, rather than a data tip.\n\n---\n\n3) Edited By Manish Jayaswal (2/3/2015 2:17:07 PM)\n\nNot a regression from Dev12 so making it pri 3.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1446/comments",
    "author": "ManishJayaswal",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T17:56:55Z",
        "body": "@jinujoseph we haven't heard anything about this in 7 years.  I'm ok closing this out."
      }
    ]
  },
  {
    "number": 1429,
    "title": "\"vbCrLf is not declared\" in EE when VB is called from C#",
    "created_at": "2015-03-20T20:12:08Z",
    "closed_at": "2015-03-20T22:30:13Z",
    "labels": [
      "Bug",
      "help wanted",
      "Resolution-Won't Fix",
      "Interactive-Debugging",
      "Area-Interactive",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1429",
    "body": "Create a C# Console Application with code:\n\n``` C#\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ClassLibrary1.Class1.M();\n    }\n}\n```\n\nCreate a VB class library with code:\n\n``` VB\nPublic Class Class1\n    Shared Sub M()\n    End Sub\nEnd Class\n```\n\nSet a breakpoint on the definition of M() and start debugging. When the breakpoint is hit, try to evaluate \"vbCrLf\" in the Watch window.\n\n**Expected**: It evaluates without error\n**Actual**: (1) : error BC30451: 'vbCrLf' is not declared. It may be inaccessible due to its protection level.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1429/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-03-20T20:12:34Z",
        "body": "@amcasey FYI\n"
      },
      {
        "user": "ManishJayaswal",
        "created_at": "2015-03-20T21:11:42Z",
        "body": "This repros in VS2013\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-03-20T22:06:01Z",
        "body": "When it _does_ work (VB calling VB), it comes through an import of namespace `Microsoft.VisualBasic` in a `TypesOfImportedNamespacesMembersBinder`.\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-03-20T22:10:57Z",
        "body": "When it doesn't work (C# calling VB), there's still a `TypesOfImportedNamespacesMembersBinder` importing namespace `Microsoft.VisualBasic`, but the namespace returns an empty collection from `GetModuleMembers()`.\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-03-20T22:25:09Z",
        "body": "Oh, _that's_ why this isn't a regression - in the C# calling VB case, Microsoft.VisualBasic.dll is not loaded.  That would certainly affect the namespace contents.\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-03-20T22:30:13Z",
        "body": "I don't believe this can be fixed in the EE.\n"
      }
    ]
  },
  {
    "number": 1130,
    "title": "Quick-fixes which insert #pragma warning disable XXXX are incompatible with previous versions",
    "created_at": "2015-03-09T12:14:56Z",
    "closed_at": "2022-02-07T05:07:47Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Analyzers",
      "Tenet-Compatibility"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/1130",
    "body": "The quick-fix will insert #pragma warnings in the style of:\n\n```\n#pragma warning disable CS4096\n```\n\nWhere the older compiler only understands:\n\n```\n#pragma warning disable 4096\n```\n\nThis is an annoyance...\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/1130/comments",
    "author": "Ibmurai",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T17:27:13Z",
        "body": "@jaredpar there seems to have been no other reports of this in 7 years.  I think we can close out.  "
      }
    ]
  },
  {
    "number": 940,
    "title": "Remove trailing space after <enter> between arguments (etc.)",
    "created_at": "2015-02-27T18:45:11Z",
    "closed_at": "2024-11-05T20:03:24Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "0 - Backlog",
      "IDE-Formatter"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/940",
    "body": "Inspired by all of the trailing spaces that were removed by the CodeFormatter in #933\n1. Paste C#:\n\n``` C#\nclass C\n{\n    void M(string a, string b)\n    {\n        M(\"Dog\", \"Cat\");\n    }\n}\n```\n1. Place the caret before `\"Cat\"` and press enter\n\n**Expected**: The \"Cat\" argument is moved to the next line and the previous line's trailing space is removed.\n**Actual**: The trailing space is left on the previous line.\n\nDev12 had the same behavior, so this is _not_ a regression.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/940/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "alexsorokoletov",
        "created_at": "2015-03-17T16:33:59Z",
        "body": "> would be somewhere in Workspaces\\CSharpWorkspaces\\Formatting\\Rules\n> @Pilchie \n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-12-04T18:59:43Z",
        "body": "There is an existing .editorconfig rule for this.  We should look at obeying it.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-05T20:03:24Z",
        "body": "Closing out due to lack of feedback on this.  We also just have the formatting anlayzer/fixer which can address tehse."
      }
    ]
  },
  {
    "number": 841,
    "title": "Should generate \"Catch ex As System.Exception\" when no Imports",
    "created_at": "2015-02-25T01:29:33Z",
    "closed_at": "2022-10-28T17:33:42Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/841",
    "body": "1. Create VB project\n2. Remove any imported namespaces from project properties\n3. In Main(), type \"Try<enter>\"\n\nExpected: \"ex As System.Exception\"\n\nActual: \"ex As Exception\"\n\n```\nSub Main()\n    Try\n    Catch ex As Exception\n    End Try\nEnd Sub\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/841/comments",
    "author": "cston",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-02-25T17:50:48Z",
        "body": "While true, I expect the number of VB Projects that don't have Imports System is low enough to not worry about too much.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T17:33:42Z",
        "body": "Indeed.  especially as 'System' is just auto-imported.  Even removing that import is very difficult.  This just goes into the \"won't ever fix\" category."
      }
    ]
  },
  {
    "number": 780,
    "title": "In Quick Info, ObsoleteAttribute is displayed as \"[deprecated]\"",
    "created_at": "2015-02-23T16:07:56Z",
    "closed_at": "2015-03-09T16:49:08Z",
    "labels": [
      "Bug",
      "help wanted",
      "Resolution-Won't Fix",
      "Area-IDE",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/780",
    "body": "Issues:\n\n1) \"Deprecated\" is used as a synonym for \"Obsolete\" needlessly\n2) Lower case is used - as if it was a language keyword\n\nSuggested resolution: it should be consistent and say \"[Obsolete]\".\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/780/comments",
    "author": "dsaf",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-02-24T15:52:35Z",
        "body": "This has been the case since VS2003, and hasn't been an issue so far.  I don't think we would do work to fix this, but we could consider a pull request that changed it.\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-03-09T16:49:08Z",
        "body": "Based on discussion in #984, we think this should not be fixed on it's own.\n"
      }
    ]
  },
  {
    "number": 698,
    "title": "Completion: Shift+Home, Delete shouldn't trigger completion",
    "created_at": "2015-02-19T22:28:56Z",
    "closed_at": "2024-11-29T02:01:43Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/698",
    "body": "Ported from TFS WorkItem: **1024155**\n\n---\n\n**Steps to reproduce:**<BR><BR>1. Start with:\n\n<PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN>\n<SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Collections</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Generic</SPAN>\n<SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Linq</SPAN>\n \n<SPAN style=\"COLOR: black\">a<FONT color=#ff69b4>$</FONT></SPAN>$\n \n<SPAN style=\"COLOR: blue\">Module</SPAN> <SPAN style=\"COLOR: #2b91af\">Program</SPAN>\n    <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">Main</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: black\">args</SPAN> <SPAN style=\"COLOR: blue\">As</SPAN> <SPAN style=\"COLOR: blue\">String</SPAN><SPAN style=\"COLOR: black\">())</SPAN>\n        \n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n<SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Module</SPAN></PRE>\n\n1. Shift+Home, Delete to delete the line\n\n&nbsp;\n\n**RESULT:** Completion list is showing.\n\n&nbsp;\n\n**EXPECTED:** No completion showing, since I just deleted the whole line (and used delete, not backspace).\n\n&nbsp;\n\n**NOTE:** Completion did _NOT_ show in this situation in Dev12.\n\n---\n\n**Revisions:**\n\n1) Created By Kevin Pilch-Bisson (9/10/2014 11:25:00 AM)\n\n---\n\n2) Edited By Kevin Pilch-Bisson (2/19/2015 2:26:42 PM)\n\nWe can tweak this after RTM, though it is annoying.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/698/comments",
    "author": "Pilchie",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-11-29T02:01:43Z",
        "body": "Closing out as we haven't heard more reports about this in 9 years."
      }
    ]
  },
  {
    "number": 634,
    "title": "Navigate Backward does not include small cursor movements.",
    "created_at": "2015-02-18T18:08:43Z",
    "closed_at": "2023-02-03T21:24:05Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/634",
    "body": "Ported from TFS WorkItem: **906952**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** Dev14\\VSPro_Platform<BR>**Affected Build:** 21514.00<BR><BR>**Steps to reproduce:**<BR>1. Create a new VB Console Application.\n1. Set the contents of Module1.vb to the following:\n\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>\n\n<FONT face=Consolas>Module</FONT></FONT></FONT></FONT><FONT face=Consolas><FONT size=2><FONT color=#000000 size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>Module1</FONT></FONT></FONT></FONT>\n\n<FONT face=Consolas><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>&nbsp;\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; Class</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass2\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2 face=Consolas>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sub</FONT></FONT></FONT><FONT size=2><FONT size=2><FONT face=Consolas> myMethod2()</FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim</FONT></FONT></FONT><FONT size=2><FONT size=2> mc1 </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>As</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass1</FONT></FONT></FONT><FONT size=2><FONT size=2> = </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>New</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass1\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>mc1.myMethod1<FONT size=2 face=Consolas><FONT size=2 face=Consolas>() </FONT></FONT><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas>' MARKER 1\n</FONT></FONT></FONT></FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Sub\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Class</FONT></FONT></FONT></FONT>\n\n<FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; Class</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>FillerClass\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Class</FONT></FONT></FONT></FONT>\n\n<FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2 face=Consolas>&nbsp;&nbsp;&nbsp; Sub</FONT></FONT></FONT><FONT size=2><FONT size=2><FONT face=Consolas> Main()</FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim</FONT></FONT></FONT><FONT size=2><FONT size=2> mc1 </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>As</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass1</FONT></FONT></FONT><FONT size=2><FONT size=2> = </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>New</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass1\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n<FONT face=Consolas><FONT color=#0000ff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT>mc1.myMethod1<FONT size=2 face=Consolas><FONT size=2 face=Consolas>() </FONT></FONT><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas>' MARKER 2\n</FONT></FONT></FONT></FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Sub</FONT></FONT></FONT></FONT>\n\n<FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; Class</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#2b91af size=2><FONT color=#2b91af size=2><FONT color=#2b91af size=2>MyClass1\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2 face=Consolas>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sub</FONT></FONT></FONT><FONT size=2><FONT size=2><FONT face=Consolas> myMethod1()</FONT>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Sub\n</FONT></FONT></FONT></FONT><FONT size=2><FONT size=2>\n\n</FONT></FONT><FONT face=Consolas><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>&nbsp;&nbsp;&nbsp; End</FONT></FONT></FONT><FONT size=2><FONT size=2> </FONT></FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT face=Consolas>Class</FONT></FONT></FONT></FONT>\n\n<FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT face=Consolas></FONT>&nbsp;\n\n<FONT face=Consolas>End</FONT></FONT></FONT></FONT><FONT face=Consolas><FONT size=2><FONT color=#000000 size=2> </FONT></FONT><FONT color=#0000ff size=2><FONT color=#0000ff size=2><FONT color=#0000ff size=2>Module\n</FONT></FONT></FONT></FONT>\n1. Place the cursor within \"<FONT face=Consolas>myMethod1</FONT>\" on the line with comment \"<FONT color=#008000 face=Consolas>MARKER 1</FONT>\".\n2. Right click and choose \"Go To Definition\" (or press F12).\n3. Place the cursor within \"<FONT face=Consolas>myMethod1</FONT>\" on the line with comment \"<FONT color=#008000 face=Consolas>MARKER 2</FONT>\".\n4. Right click and choose \"Go To Definition\" (or press F12).\n5. In the VS menu, choose \"VIEW &gt; Navigate Backward\" (or press Ctrl+-).\n\n&nbsp;\n\n**Expected Results:<BR>**Cursor returns to line \"<FONT face=Consolas>mc1.myMethod1</FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>() </FONT></FONT><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas>' MARKER 2<FONT color=#1e1e1e face=\"Segoe UI\">\".</FONT></FONT></FONT></FONT>\n\n&nbsp;\n\n**Actual Results:<BR>**Cursor returns to line \"<FONT face=Consolas>mc1.myMethod1</FONT><FONT size=2 face=Consolas><FONT size=2 face=Consolas>() </FONT></FONT><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas><FONT color=#008000 size=2 face=Consolas>' MARKER 1<FONT color=#1e1e1e face=\"Segoe UI\">\".</FONT></FONT></FONT></FONT>\n\n&nbsp;\n\nThis also happens in C#. This does not repro on older Visual Studio installations.\n\n---\n\n**Revisions:**\n\n1) Created By Collin Deel (Chinasoft) (3/17/2014 2:34:28 PM)\n\n---\n\n2) Edited (4/18/2014 12:56:17 PM)\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font size=3><font color=\"#000000\"><font face=Calibri>We intentionally coalesce go back markers that are close (with in 10 lines or so). When doing a go to definition, Roslyn calls through:</font></font></font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font color=\"#000000\" size=3 face=Calibri>&nbsp;</font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font size=3><font color=\"#000000\"><font face=Calibri><span style=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, bool usePreviewTab)<span style=\"\">&nbsp;&nbsp;&nbsp;&nbsp; </span>Unknown</font></font></font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font color=\"#000000\" size=3 face=Calibri>&nbsp;</font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font size=3><font color=\"#000000\"><font face=Calibri>And that code – for a file that is already open – calls into CTextManager.NavigateToLineAndColumn2 which treats it like a normal caret move (meaning that it will get ignored if the caret didn’t end up moving much in a document that was open and had focus).</font></font></font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font color=\"#000000\" size=3 face=Calibri>&nbsp;</font>\n\n<p class=MsoNormal style=\"MARGIN:0in 0in 0pt;\"><font color=\"#000000\" size=3 face=Calibri>It looks like C++ ends up explicitly calling IVsEditorGoBackLocations.SetNonMergeableGoBackLocation() to get around that behavior. Roslyn should probably do something similar (when navigating to an already open file).</font>\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/634/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-03T21:24:05Z",
        "body": "Haven't had any reports on this behavior in all this time.  Not going to change this unless things change wrt user feedback in this area."
      }
    ]
  },
  {
    "number": 599,
    "title": "Cross-language references to C# methods with out parameters are not found by FAR, GTD, etc.",
    "created_at": "2015-02-17T21:21:20Z",
    "closed_at": "2015-05-28T19:09:07Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/599",
    "body": "Ported from TFS WorkItem: **829965**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** <BR>**Affected Build:** <BR>**Affected Product Language:** \n\n<BR>**Steps to reproduce:**<BR><BR>1. Copy/paste into C# class library:\n\n&nbsp;\n\n<PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><SPAN style=\"COLOR: blue\">public</SPAN> <SPAN style=\"COLOR: blue\">class</SPAN> <SPAN style=\"COLOR: #2b91af\">C</SPAN>\n<SPAN style=\"COLOR: black\">{</SPAN>\n    <SPAN style=\"COLOR: blue\">public</SPAN> <SPAN style=\"COLOR: blue\">void</SPAN> <SPAN style=\"COLOR: black\">WithoutOut</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">int</SPAN> <SPAN style=\"COLOR: black\">x</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: black\">{</SPAN>\n    <SPAN style=\"COLOR: black\">}</SPAN>\n \n    <SPAN style=\"COLOR: blue\">public</SPAN> <SPAN style=\"COLOR: blue\">void</SPAN> <SPAN style=\"COLOR: black\">WithOut</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">out</SPAN> <SPAN style=\"COLOR: blue\">int</SPAN> <SPAN style=\"COLOR: black\">x</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: black\">{</SPAN>\n        <SPAN style=\"COLOR: black\">x</SPAN> <SPAN style=\"COLOR: black\">=</SPAN> <SPAN style=\"COLOR: black\">1</SPAN><SPAN style=\"COLOR: black\">;</SPAN>\n    <SPAN style=\"COLOR: black\">}</SPAN>\n<SPAN style=\"COLOR: black\">}</SPAN></PRE>\n\n\n&nbsp;\n1. Copy/paste into VB class library:\n\n&nbsp;\n\n<PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><SPAN style=\"COLOR: blue\">Class</SPAN> <SPAN style=\"COLOR: #2b91af\">D</SPAN>\n    <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">T</SPAN><SPAN style=\"COLOR: black\">()</SPAN>\n        <SPAN style=\"COLOR: blue\">Dim</SPAN> <SPAN style=\"COLOR: black\">c</SPAN> <SPAN style=\"COLOR: black\">=</SPAN> <SPAN style=\"COLOR: blue\">New</SPAN> <SPAN style=\"COLOR: #2b91af\">C</SPAN><SPAN style=\"COLOR: black\">()</SPAN>\n        <SPAN style=\"COLOR: black\">c</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\"><FONT style=\"BACKGROUND-COLOR: #ff0000\">WithOut</FONT></SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: black\">1</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n        <SPAN style=\"COLOR: black\">c</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\"><FONT style=\"BACKGROUND-COLOR: #00ff00\">WithoutOut</FONT></SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: black\">1</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n<SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Class</SPAN></PRE>\n\n\n&nbsp;\n1. Add a reference from the VB class library to the C# class library.\n\n&nbsp;\n1. Invoke GTD on the call to c.WithOut() in the VB file.\n\n&nbsp;\n\nExpected: GTD should take you to the source location in the C# file\n\nActual: Metadata As Source\n\n---\n\n**Revisions:**\n\n1) Created By David Poeschl (11/21/2013 8:20:30 PM)\n\n---\n\n2) Edited By Andrew Casey (ROSLYN) (6/13/2014 4:03:24 PM)\n\nI hit this while trying to port some code from C# to VB (in Roslyn).\n\n---\n\n3) Edited By Andrew Casey (ROSLYN) (11/12/2014 10:52:46 AM)\n\nStill happening.&nbsp; Tried to GTD on \n\n<font color=\"#2b91af\" face=\"Courier New\" size=1><font color=\"#2b91af\" face=\"Courier New\" size=1><font color=\"#2b91af\" face=\"Courier New\" size=1>CustomDebugInfoReader</font></font></font><font face=\"Courier New\" size=1><font face=\"Courier New\" size=1>.TryParseVisualBasicImportString</font></font>\n&nbsp;in VB.\n\n---\n\n4) Edited By Andrew Casey (ROSLYN) (2/11/2015 12:24:55 PM)\n\nGuess the SymbolId for the method has RefKind &quot;Ref&quot; instead of &quot;Out&quot;.&nbsp; Presumably, the comparison needs to be more forgiving for VB symbols.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/599/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "amcasey",
        "created_at": "2015-05-27T20:26:33Z",
        "body": "I'm going to give this a shot.\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-05-28T19:09:07Z",
        "body": "Back to @dpoeschl  for verification.\n"
      }
    ]
  },
  {
    "number": 585,
    "title": "Add direct test covereage for SymbolFinder",
    "created_at": "2015-02-17T18:43:04Z",
    "closed_at": "2022-10-28T17:25:53Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Test"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/585",
    "body": "Ported from TFS WorkItem: **975825**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** <BR>**Affected Build:** <BR>**Affected Product Language:** <BR><BR>**Steps to reproduce:**<BR><BR>Found during mobbing. \n\n&nbsp;\n\nSymbolFinder.FindImplementationsAsync has no calls from test code. We should test it directly rather than rely on tests of consumers of this api.\n\n---\n\n**Revisions:**\n\n1) Created By David Poeschl (6/27/2014 11:28:38 AM)\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/585/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2015-06-08T19:24:43Z",
        "body": "After talking with Sri: sending this back to Jason and re-adding \"Up for Grabs\" label.\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-10-28T17:25:53Z",
        "body": "Closing out.  This functionality is tested thoroughly through many tests.  We don't need additional ones that duplicate what we already have."
      }
    ]
  },
  {
    "number": 558,
    "title": "VB NavBar doesn't always navigate to first member in (especially in Metadata as source)",
    "created_at": "2015-02-17T00:17:31Z",
    "closed_at": "2022-02-04T17:24:27Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/558",
    "body": "Ported from TFS WorkItem: **1036385**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** <BR>**Affected Build:** <BR>**Affected Product Language:** <BR><BR>**Steps to reproduce:**<BR><BR>1.&nbsp; Add this code to a VB Console app's main method:\n<FONT size=4 face=Consolas><FONT size=4 face=Consolas>\n\n</FONT></FONT><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas>Dim</FONT></FONT></FONT><FONT size=4 face=Consolas><FONT size=4 face=Consolas> df </FONT></FONT><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas>As</FONT></FONT></FONT><FONT size=4 face=Consolas><FONT size=4 face=Consolas> System.ComponentModel.</FONT></FONT><FONT color=#2b91af size=4 face=Consolas><FONT color=#2b91af size=4 face=Consolas><FONT color=#2b91af size=4 face=Consolas>AddingNewEventArgs</FONT></FONT></FONT><FONT size=4 face=Consolas><FONT size=4 face=Consolas> = </FONT></FONT><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas><FONT color=#0000ff size=4 face=Consolas>New</FONT></FONT></FONT><FONT size=4 face=Consolas><FONT size=4 face=Consolas> System.ComponentModel.</FONT></FONT><FONT color=#2b91af size=4 face=Consolas><FONT color=#2b91af size=4 face=Consolas><FONT color=#2b91af size=4 face=Consolas>AddingNewEventArgs</FONT></FONT></FONT><FONT size=4 face=Consolas><FONT size=4 face=Consolas>()\n</FONT></FONT>\n1. Go to def on AddingNewEventArgs\n2. Use the Nav bar to try and go the the first (default) constructor.\n\n&nbsp;\n\nRESULT: You go to the beginning of the file instead.\n\n&nbsp;\n\nEXPECTED: You go to the member.\n\n&nbsp;\n\nNOTES:\n1. This only happens if the outlining region at the beginning of the file is collapsed.\n2. It also happens in regular files, but only if you paste code like the MAS code.&nbsp; If you edit the code, the nav bar model re-computes tracking spans and it seems to work.\n\n---\n\n**Revisions:**\n\n1) Created By Kevin Pilch-Bisson (9/26/2014 3:57:34 PM)\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/558/comments",
    "author": "Pilchie",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2022-02-04T17:24:27Z",
        "body": "Doesn't repro for me now.  Likely because thsi area has been rewritten several times.  Closing out as we haven't heard any issues about this in this time and there doesn't seem to be a problem now."
      }
    ]
  },
  {
    "number": 557,
    "title": "Type inference fails in lambda in incomplete object initializer",
    "created_at": "2015-02-17T00:06:24Z",
    "closed_at": "2016-06-13T17:42:14Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-Compilers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/557",
    "body": "Source: (note trailing comma)\n\n``` C#\nvar x = new {\n    X = \"\".Select(c => c.\n    Y = 0,\n};\n```\n\nIntelliSense will not show any members for `c.`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/557/comments",
    "author": "SLaks",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-02-19T19:18:09Z",
        "body": "This issue is also happens in VS 2013.  Moving to the compiler, as we just ask them to bind c in this location, and it fails with the additional comma.\n"
      },
      {
        "user": "bmay2",
        "created_at": "2016-03-14T02:18:50Z",
        "body": "It looks like \"Y = 0\" is being included as the end of a SimpleAssignmentExpression for c when it should be its own AnonymousObjectMemberDeclarator.\n\nI'd like to continue with this, but I'm a little overwhelmed and not sure how or where to proceed. I've stepped through the CompilationWithAnalyzers and other Diagnostics, but that doesn't seem right. Any recommendations for background reading or other advice?\n"
      }
    ]
  },
  {
    "number": 546,
    "title": "Format on Paste inserts two blank lines for every line of /// doc comments when newlines are only \\r",
    "created_at": "2015-02-16T20:43:10Z",
    "closed_at": "2023-02-17T02:02:52Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Need More Info"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/546",
    "body": "Ported from TFS WorkItem: **829954**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** <BR>**Affected Build:** <BR>**Affected Product Language:** <BR>\n\n**Note**: Yes, this sounds obscure, but this happens if you copy/paste code with doc comments through OneNote.\n\n<BR>**Steps to reproduce:**<BR><BR>1. Save the attached file to your local machine.\n1. Create a new C# project and add that file to it.\n2. Open the file. You'll see something like this, but copy/pasting from here won't reproduce the issue - use the file:\n\n&nbsp;\npublic class B<BR>{<BR>&nbsp;&nbsp;&nbsp; /// &lt;param name=\"x\"&gt;&lt;/param&gt;<BR>&nbsp;&nbsp;&nbsp; /// &lt;param name=\"y\"&gt;&lt;/param&gt;<BR>&nbsp;&nbsp;&nbsp; public virtual int M(int x, string y)<BR>&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<BR>&nbsp;&nbsp;&nbsp; }<BR>}\n\n&nbsp;\n1. Copy the contents of the file and paste it back into the editor.\n\n&nbsp;\n\n**Expected**: You see the same code that you copied pasted back in.\n\n**Actual**: A bunch of blank lines are inserted before doc comments.\n\n&nbsp;\n\npublic class B<BR>{\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n<BR>&nbsp;&nbsp;&nbsp; /// &lt;param name=\"x\"&gt;&lt;/param&gt;<BR>&nbsp;&nbsp;&nbsp; /// &lt;param name=\"y\"&gt;&lt;/param&gt;<BR>&nbsp;&nbsp;&nbsp; public virtual int M(int x, string y)<BR>&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<BR>&nbsp;&nbsp;&nbsp; }<BR>}\n\n---\n\n**Revisions:**\n\n1) Created By David Poeschl (11/21/2013 7:55:36 PM)\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/546/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "alexsorokoletov",
        "created_at": "2015-03-17T16:33:52Z",
        "body": "> would be somewhere in Workspaces\\CSharpWorkspaces\\Formatting\\Rules\n> @Pilchie \n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-02-07T00:24:34Z",
        "body": "Have not heard about thsi being an issue for anyone else in  8 years.  Feels like we can close out."
      },
      {
        "user": "ghost",
        "created_at": "2023-02-17T02:02:54Z",
        "body": "Closing this issue as we've seen no reply to the request for more information. If you are able to get the requested information, please add it to the issue and we will retriage it. "
      }
    ]
  },
  {
    "number": 489,
    "title": "Compiler should warn on completely unnecessary cast (or IDE should gray it out to indicate that it does nothing).",
    "created_at": "2015-02-13T20:15:06Z",
    "closed_at": "2020-03-05T23:41:23Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/489",
    "body": "For example:\n\n``` c#\n        public bool IsInInactiveRegion(SyntaxTree syntaxTree, int position, CancellationToken cancellationToken)\n        {\n            var csharpTree = syntaxTree as SyntaxTree;\n            if (csharpTree == null)\n            {\n                return false;\n            }\n\n            return csharpTree.IsInInactiveRegion(position, cancellationToken);\n        }\n```\n\n\"syntaxTree as SyntaxTree\" does nothing.  I believe if you casted to (SyntaxTree) then that would be marked appropriately by the IDE.  The 'as' check should be hte same. \n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/489/comments",
    "author": "CyrusNajmabadi",
    "comments": [
      {
        "user": "DustinCampbell",
        "created_at": "2015-02-13T21:17:47Z",
        "body": "This strikes me more as an analyzer scenario rather than something the compiler would do. The current Remove Unnecessary Cast diagnostic is an analyzer.\n"
      },
      {
        "user": "srivatsn",
        "created_at": "2015-11-12T01:11:48Z",
        "body": "This would be adding a feature to remove unnecessary cast fix.\n"
      },
      {
        "user": "jnm2",
        "created_at": "2020-02-21T02:34:34Z",
        "body": "Could this be marked `help wanted`?"
      }
    ]
  },
  {
    "number": 459,
    "title": "add a performance test for syntax tree diffing",
    "created_at": "2015-02-12T23:57:34Z",
    "closed_at": "2024-10-18T20:29:09Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request",
      "Tenet-Performance"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/459",
    "body": "syntax tree diffing is used in many places in IDE. even for things like VB auto commit which will run on UI thread.(but cancellable)\n\nlike incremental parsing perf test in compiler perf test, we should have tree diffing perf tests for unrelated tree (no green node sharing) and related tree (green node sharing most likely due to incremental parsing)\n\n...\n\nalso, we have 2 different diffing mechanism. one for most of IDE uses (fast but less accurate by using green node comparison) and more accurate one (but uses red node) used by Enc.\n\nit would be nice if we have perf tests for both of cases since it is used heavily by IDE.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/459/comments",
    "author": "heejaechang",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-18T20:29:09Z",
        "body": "Closing out speculative improvement work we haven't taken on in 10 years.  "
      }
    ]
  },
  {
    "number": 325,
    "title": "QuickInfo on close curly at end of scope block shows too much code",
    "created_at": "2015-02-09T18:42:17Z",
    "closed_at": "2015-10-23T22:07:35Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE",
      "Verified"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/325",
    "body": "Ported from TFS WorkItem: **887257**\n\n---\n\n**Repro Steps:**\n\n**Affected Branch:** <BR>**Affected Build:** <BR>**Affected Product Language:** <BR><BR>**Steps to reproduce:**<BR><BR>1. Copy/paste C# code:\n\n&nbsp;\n\n<PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><FONT size=2><SPAN style=\"COLOR: blue\">using</SPAN> <SPAN style=\"COLOR: black\">System</SPAN><SPAN style=\"COLOR: black\">;</SPAN>\n \n<SPAN style=\"COLOR: blue\">class</SPAN> <SPAN style=\"COLOR: #2b91af\">Program</SPAN>\n<SPAN style=\"COLOR: black\">{</SPAN>\n    <SPAN style=\"COLOR: blue\">static</SPAN> <SPAN style=\"COLOR: blue\">void</SPAN> <SPAN style=\"COLOR: black\">Main</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">string</SPAN><SPAN style=\"COLOR: black\">[]</SPAN> <SPAN style=\"COLOR: black\">args</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: black\">{</SPAN>\n        <SPAN style=\"COLOR: blue\">if</SPAN> <SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">true</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n        <SPAN style=\"COLOR: black\">{</SPAN>\n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n \n            <SPAN style=\"COLOR: blue\">if</SPAN> <SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">false</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n            <SPAN style=\"COLOR: black\">{</SPAN>\n                </FONT><FONT size=2><SPAN style=\"COLOR: green\">/*\n                This\n                is\n                the\n                if\n                block\n                */</SPAN>\n            <SPAN style=\"COLOR: black\">}</SPAN>\n \n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n \n            <SPAN style=\"COLOR: black\">{</SPAN>\n                </FONT><FONT size=2><SPAN style=\"COLOR: green\">/*\n                This\n                is\n                just\n                a\n                block\n                */</SPAN>\n            <SPAN style=\"COLOR: black\"><FONT style=\"BACKGROUND-COLOR: #ff8000\">}</FONT></SPAN> <SPAN style=\"COLOR: green\">// ******** Hover on the close curly ********</SPAN>\n \n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n            <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n \n            <SPAN style=\"COLOR: blue\">for</SPAN> <SPAN style=\"COLOR: black\">(;</SPAN> <SPAN style=\"COLOR: black\">;)</SPAN>\n            <SPAN style=\"COLOR: black\">{</SPAN>\n                </FONT><FONT size=2><SPAN style=\"COLOR: green\">/*\n                This\n                is\n                the\n                for\n                block\n                */</SPAN>\n            <SPAN style=\"COLOR: black\">}</SPAN>\n        <SPAN style=\"COLOR: black\">}</SPAN>\n    <SPAN style=\"COLOR: black\">}</SPAN>\n<SPAN style=\"COLOR: black\">}</SPAN></FONT></PRE>\n\n\n&nbsp;\n1. Hover on the close curly brace on line 34 (<FONT style=\"BACKGROUND-COLOR: #ff8000\">highlighted</FONT> above).\n\n&nbsp;\n\n**Expected:** Less code. Maybe just the **{**, or the **{** and the line immediately after?\n\n**Actual**:\n\n<PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><SPAN style=\"COLOR: black\">{</SPAN>\n<SPAN style=\"COLOR: #2b91af\"><FONT color=#ff69b4>    </FONT>Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n    <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n \n    <SPAN style=\"COLOR: blue\">if</SPAN> <SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: blue\">false</SPAN><SPAN style=\"COLOR: black\">)</SPAN>\n    <SPAN style=\"COLOR: black\">{</SPAN>\n        <SPAN style=\"COLOR: green\">/*\n        This\n        is\n        the\n        if\n        block\n        */</SPAN>\n    <SPAN style=\"COLOR: black\">}</SPAN>\n \n    <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n    <SPAN style=\"COLOR: #2b91af\">Console</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">WriteLine</SPAN><SPAN style=\"COLOR: black\">();</SPAN>\n \n    <SPAN style=\"COLOR: black\">{</SPAN></PRE>\n\n---\n\n**Revisions:**\n\n1) Created By David Poeschl (2/19/2014 12:58:04 PM)\n\nIt's currently just going to the block's parent, which is usually correct but not in this case.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/325/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-04-07T01:51:20Z",
        "body": "@Pilchie Is this required for 1.0 (stable)? Can we mark this as Up For Grabs instead?\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-04-07T03:35:58Z",
        "body": "No, you are right, this can go in Unknown/Up for Grabs\n"
      }
    ]
  },
  {
    "number": 290,
    "title": "Prefix unmerged changes from linked projects with \"TODO\"",
    "created_at": "2015-02-06T21:16:23Z",
    "closed_at": "2023-11-20T21:02:04Z",
    "labels": [
      "help wanted",
      "Area-IDE",
      "Feature Request"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/290",
    "body": "1. Create a linked C# file between two projects, one with \"ONE\" defined and the other with \"TWO\" defined. \n2. Copy/paste this code:\n   \n   ``` csharp\n   class C\n   {\n       void Test(int i)\n       {\n           Test(7);\n       }\n   \n   #if ONE\n       void Test(double x) { }\n   #elif TWO\n       void Test(long x) { }\n   #endif\n   }\n   ```\n3. Rename T to Test\n\n**Expected**: The inserted comment should look like:\n\n``` csharp\n/* TODO: Unmerged change from project 'LinkedFileRenameTwo'\nBefore:\n        Test(7);\nAfter:\n        Test((long)7);\n*/\n```\n\n**Actual**: The inserted comment looks like:\n\n``` csharp\n/* Unmerged change from project 'LinkedFileRenameTwo'\nBefore:\n        Test(7);\nAfter:\n        Test((long)7);\n*/\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/290/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "dpoeschl",
        "created_at": "2015-04-07T01:52:11Z",
        "body": "Clearing the milestone so @Pilchie can triage this. :smile:\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-11-20T21:02:04Z",
        "body": "Closing out.  Haven't done this in 8 years.  Haven't heard anything on this. "
      }
    ]
  },
  {
    "number": 286,
    "title": "#Else not offered in #If'd out VB code (but is offered in C#)",
    "created_at": "2015-02-06T19:36:47Z",
    "closed_at": "2024-10-21T19:35:44Z",
    "labels": [
      "Bug",
      "help wanted",
      "Area-IDE"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/286",
    "body": "Ported from TFS WorkItem: <b>1089194</b>\n\n---\n\n<p><b>Repro Steps:</b></p>\n\n<P><B>Affected Branch:</B> <BR><B>Affected Build:</B> <BR><B>Affected Product Language:</B> <BR><BR><B>Steps to reproduce:</B><BR><BR>1. Copy/Paste VB:</P>\n\n<P>&nbsp;</P><PRE style=\"FONT-SIZE: 16px; FONT-FAMILY: Consolas; BACKGROUND: white; COLOR: hotpink\"><SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN>\n<SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Collections</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Generic</SPAN>\n<SPAN style=\"COLOR: blue\">Imports</SPAN> <SPAN style=\"COLOR: black\">System</SPAN><SPAN style=\"COLOR: black\">.</SPAN><SPAN style=\"COLOR: black\">Linq</SPAN>\n \n<SPAN style=\"COLOR: blue\">Module</SPAN> <SPAN style=\"COLOR: #2b91af\">Program</SPAN>\n    <SPAN style=\"COLOR: blue\">Sub</SPAN> <SPAN style=\"COLOR: black\">Main</SPAN><SPAN style=\"COLOR: black\">(</SPAN><SPAN style=\"COLOR: black\">args</SPAN> <SPAN style=\"COLOR: blue\">As</SPAN> <SPAN style=\"COLOR: blue\">String</SPAN><SPAN style=\"COLOR: black\">())</SPAN>\n<SPAN style=\"COLOR: blue\">#If</SPAN> <SPAN style=\"COLOR: black\">Foo</SPAN> <SPAN style=\"COLOR: blue\">Then</SPAN>\n<SPAN style=\"COLOR: gray\">\n        $$\n \n</SPAN><SPAN style=\"COLOR: blue\">#End</SPAN> <SPAN style=\"COLOR: blue\">If</SPAN>\n    <SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Sub</SPAN>\n<SPAN style=\"COLOR: blue\">End</SPAN> <SPAN style=\"COLOR: blue\">Module</SPAN></PRE>\n<P>&nbsp;</P>\n\n<P>2. Remove the $$ if necessary and type #</P>\n\n<P>&nbsp;</P>\n\n<P><STRONG>Expected</STRONG>: Completion list offered with, for example, \"Else\" (see Dev12 for full list)</P>\n\n<P><STRONG>Actual</STRONG>: No completion offered</P>\n\n---\n\n<p><b>Revisions:</b></p>\n\n\n1) Created By David Poeschl (12/1/2014 1:38:18 PM)\n\n---\n\n2) Edited By Kevin Pilch-Bisson (12/2/2014 8:50:50 AM)\n\nI think we'd have to special case a # being typed inside disabled text trivia, since the parse tree actually does treat all of this as disabled text.\n\n---\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/286/comments",
    "author": "dpoeschl",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2020-03-14T03:16:05Z",
        "body": "We would take an external PR for this."
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2024-10-21T19:35:44Z",
        "body": "Closing as we are unlikely to change tehse VB experiences."
      }
    ]
  },
  {
    "number": 48,
    "title": "Improve analysis capability for partial methods (C#)",
    "created_at": "2015-01-21T11:28:07Z",
    "closed_at": "2015-02-23T21:44:17Z",
    "labels": [
      "help wanted",
      "Area-Analyzers",
      "Concept-API",
      "Area-Compilers",
      "Feature Request",
      "Verified",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/48",
    "body": "```\nusing System.Diagnostics;\n\npartial class Test\n{\n    partial void FooBar();\n}\n\npartial class Test\n{\n    public void Foo()\n    {\n        FooBar();\n    }\n}\n```\n\nWhen analyzing the FooBar(); invocation there is no way to find out that FooBar(); has no body. \n\nmethod.PartialDefinitionPart == null and method.PartialImplementationPart == null \n\nATM I would expect that PartialDefinitionPart != null and PartialImplementationPart == null in the case above. It would be nice if there would be a flag to flag partial methods. \n\nIf that's all too c# specific a ICSharpSourceMethod interface would solve that issue.\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/48/comments",
    "author": "mkrueger",
    "comments": [
      {
        "user": "amcasey",
        "created_at": "2015-01-21T18:10:29Z",
        "body": "Doesn't the fact that PartialImplementationPart is null tell you that it has no body?  I believe PartialDefinitionPart is null because you're already on the definition part.\n\n```\n    /// <summary>\n    /// If this is a partial method implementation part, returns the corresponding\n    /// definition part.  Otherwise null.\n    /// </summary>\n    IMethodSymbol PartialDefinitionPart { get; }\n```\n"
      },
      {
        "user": "JoshVarty",
        "created_at": "2015-02-09T08:34:32Z",
        "body": "I think the issue here is that it's difficult to figure out if it's a partial method if you have the `IMethodSymbol`. Both `PartialDefinitionPart` and `PartialImplementationPart` are null.\n\nFor example:\n\n``` CSharp\nvar tree = CSharpSyntaxTree.ParseText(@\"\npublic class MyClass\n{\n    partial void MyMethod();\n}\");\n\nvar Mscorlib = PortableExecutableReference.CreateFromAssembly(typeof(object).Assembly);\nvar compilation = CSharpCompilation.Create(\"MyCompilation\",\n    syntaxTrees: new[] { tree }, references: new[] { Mscorlib });\n\nvar model = compilation.GetSemanticModel(tree);\nvar methodSyntax = tree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>().Single();\nvar methodSymbol = model.GetDeclaredSymbol(methodSyntax);\n\n//Both are null. The same results for non-partial methods.\nConsole.WriteLine(methodSymbol.PartialDefinitionPart);\nConsole.WriteLine(methodSymbol.PartialImplementationPart);\n```\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-02-09T17:53:41Z",
        "body": "Well that seems unhelpful.  @rchande tells me that the IDE iterates over the DeclaringSyntaxNodes property but that doesn't seem like a very clean solution.  There should probably be an API for this.\n"
      },
      {
        "user": "JoshVarty",
        "created_at": "2015-02-09T19:09:17Z",
        "body": "I'd propose the addition of an `IsPartial` property on `IMethodSymbol`. I think it would solve @mkrueger's problem and make partials easier to detect. It also seems to fit well with the rest of the API as there is an easy way to detect most other modifiers via `IsPublic`, `IsStatic`, `IsPartial`, `IsVirtual`, `IsAsync` and so on.\n\nPerhaps the broader question is \"Should there be an Is_____ field for all modifiers?\" I believe `IsUnsafe` is missing as well.\n"
      },
      {
        "user": "amcasey",
        "created_at": "2015-02-09T19:16:15Z",
        "body": "I suspect the reason that it doesn't exist now is that - unlike public, static, and virtual - partial is a source-only concept.  Since we have exposed other aspects of partial-ness on IMethodSymbol, we should probably expose IsPartial as well.  However, I doubt we will end up exposing IsUnsafe - it's a source concept that is easily checked on the DeclaringSyntaxNodes.\n"
      },
      {
        "user": "mkrueger",
        "created_at": "2015-02-23T21:44:17Z",
        "body": "Using the nodes is fine for me.\n\nI use now this method that:\n\n```\nstatic bool IsEmptyPartialMethod(IMethodSymbol method, CancellationToken cancellationToken = default(CancellationToken))\n{\n    if (method.IsDefinedInMetadata ())\n        return false;\n    foreach (var r in method.DeclaringSyntaxReferences) {\n        var node = r.GetSyntax (cancellationToken) as MethodDeclarationSyntax;\n        if (node == null)\n            continue;\n        if (node.Body != null || !node.Modifiers.Any(m => m.IsKind (SyntaxKind.PartialKeyword)))\n            return false;\n    }\n\n    return true;\n}\n```\n\nI think that issue can be closed.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-02-10T08:02:13Z",
        "body": "Getting the syntax node, then checking the modifiers and the existence of the body works, but there should be an out-of-the-box better solution for this. Going from the symbol to the syntax is time consuming. This information could simply be stored in the `IMethodSymbol`.\n\nIs there any plan to add a flag for this?\n"
      },
      {
        "user": "ceztko",
        "created_at": "2018-12-05T23:40:01Z",
        "body": "> Getting the syntax node, then checking the modifiers and the existence of the body works, but there should be an out-of-the-box better solution for this. Going from the symbol to the syntax is time consuming. This information could simply be stored in the `IMethodSymbol`.\r\n> \r\n> Is there any plan to add a flag for this?\r\n\r\nI definetly agree with @ghost: this information should be present in `IMethodSymbol`. Also, I found @mkrueger method not working in my case, as I found `DeclaringSyntaxReferences` to have only one item even when both declaration and implementation were present. Here is my fixed version:\r\n\r\n```csharp\r\n    public static bool IsPartialMethod(this IMethodSymbol method, out bool hasEmptyBody)\r\n    {\r\n        if (method.IsDefinedInMetadata())\r\n        {\r\n            hasEmptyBody = false;\r\n            return false;\r\n        }\r\n\r\n        foreach (var reference in method.DeclaringSyntaxReferences)\r\n        {\r\n            var syntax = reference.GetSyntax();\r\n            if (syntax.Kind() != SyntaxKind.MethodDeclaration)\r\n                continue;\r\n\r\n            var node = syntax as MethodDeclarationSyntax;\r\n            if (!node.Modifiers.Any(SyntaxKind.PartialKeyword))\r\n            {\r\n                hasEmptyBody = false;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        hasEmptyBody = method.PartialImplementationPart == null || method.PartialDefinitionPart != null;\r\n        return true;\r\n    }\r\n\r\n    /// <returns>False if it's not defined in source</returns>\r\n    public static bool IsDefinedInMetadata(this ISymbol symbol)\r\n    {\r\n        return symbol.Locations.Any(loc => loc.IsInMetadata);\r\n    }\r\n```"
      }
    ]
  }
]