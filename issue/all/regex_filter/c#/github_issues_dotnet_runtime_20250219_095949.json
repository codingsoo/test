[
  {
    "number": 100674,
    "title": "Environment.GetEnvironmentVariable(\"DOTNET_ENVIRONMENT\") does not return the environment variable's value entered in the CLI",
    "created_at": "2024-04-05T12:57:25Z",
    "closed_at": "2024-04-05T15:17:00Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/100674",
    "body": "### Description\r\n\r\nWe have a dotnet 8.0 console application that is supposed to read an `appsettings.{Environment.GetEnvironmentVariable(\"DOTNET_ENVIRONMENT\")}.json` file based on the value entered for the `DOTNET_ENVIRONMENT` environment variable. Unfortunately `Environment.GetEnvironmentVariable(\"DOTNET_ENVIRONMENT\")` always returns null.\r\n\r\n### Reproduction Steps\r\n\r\nIssue the following command:\r\n\r\n```\r\n dotnet run -c Release -e DOTNET_ENVIRONMENT=Docker\r\n```\r\n\r\n### Expected behavior\r\n\r\n`Environment.GetEnvironmentVariable(\"DOTNET_ENVIRONMENT\")`  should return the value `Docker` per the reproduction step to be able to utilize `appsettings.Docker.json` file.\r\n\r\n### Actual behavior\r\n\r\n`Environment.GetEnvironmentVariable(\"DOTNET_ENVIRONMENT\")`  returns null or empty.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET SDK:\r\n Version:           8.0.203\r\n Commit:            5e1ceea679\r\n Workload version:  8.0.200-manifests.8cf8de6d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.203\\\r\n\r\n### Other information\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/100674/comments",
    "author": "Arash-Sabet",
    "comments": [
      {
        "user": "tommysor",
        "created_at": "2024-04-05T14:03:03Z",
        "body": "I don't think `-e` is a valid switch for `dotnet run`.\r\nI also don't know of any way to pass an environment variable as a switch.\r\nPossibly mixup with `docker run` that does have a switch `-e, --env list                         Set environment variables`\r\n\r\nFor `dotnet run` I believe you need to set the environment variable first.\r\n\r\nGiven a console application:\r\n```csharp\r\nvar myValue = Environment.GetEnvironmentVariable(\"MyVar\");\r\nConsole.WriteLine($\"MyVar: '{myValue}'\");\r\n```\r\nCan be invoked with windows cmd:\r\n```\r\nset \"MyVar=SomeValue\" & dotnet run\r\nMyVar: 'SomeValue'\r\n```"
      },
      {
        "user": "Arash-Sabet",
        "created_at": "2024-04-05T14:57:08Z",
        "body": "Thanks @tommysor \r\nIt worked well on Windows 11's command prompt but not on PowerShell. Is there something to consider in PS?"
      },
      {
        "user": "tommysor",
        "created_at": "2024-04-05T15:16:20Z",
        "body": "> It worked well on Windows 11's command prompt but not on PowerShell. Is there something to consider in PS?\r\n\r\nOnly that you need to use PowerShells way to set the environment variable and separate commands.\r\nPowerShell:\r\n```PowerShell\r\n$env:MyVar='OtherValue' ; dotnet run\r\nMyVar: 'OtherValue'\r\n```\r\n\r\nFor completeness, on Linux the environment variable can be set inline (without separating the commands and environment variable only set for the specific command)\r\nBash:\r\n```bash\r\nMyVar='BashValue' dotnet run\r\nMyVar: 'BashValue'\r\n```"
      }
    ]
  },
  {
    "number": 100202,
    "title": "Question on Retrieving and Copying Method Instructions by Start Address in C#",
    "created_at": "2024-03-24T10:02:19Z",
    "closed_at": "2024-03-24T14:56:58Z",
    "labels": [
      "question",
      "area-NativeAOT-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/100202",
    "body": "I'm currently working on a project that involves low-level manipulation of method instructions in C#. Given the nature of my work, I specifically need to determine the end of a method given its start address in memory, and then copy all its instructions into a byte array. This task is crucial for a feature I am developing, which involves analyzing and potentially modifying method instructions at runtime. My project targets .NET Native, meaning that all code is compiled ahead-of-time (AOT) into native code.\r\n\r\nGiven this scenario, my questions for you are:\r\n\r\n1. Considering the AOT compilation model of .NET Native, is there a recommended approach or any available tooling within the .NET ecosystem that would allow me to accurately determine the end of a method's instructions in memory based on its start address?\r\n2. Are there any best practices or considerations I should be aware of when attempting to copy method instructions into a byte array, especially in the context of .NET Native?\r\n3. Given my requirement to analyze and potentially modify method instructions at runtime, are there any specific challenges or limitations I might face with .NET Native, and how might I overcome them?\r\n\r\nAny insights, recommendations, or guidance you can provide would be immensely helpful for navigating these challenges and ensuring the reliability and effectiveness of this feature in our project. Thank you for your time and assistance.\r\n\r\n\r\nMy code at the moment:\r\n\r\n`public byte[] GetFullMethodInstructions(IntPtr methodPtr)\r\n    {\r\n        int size = 0;\r\n\r\n        for (byte* instructions = (byte*)methodPtr; *instructions != 0xCC; instructions++)\r\n        {\r\n            size++;\r\n        }\r\n\r\n        byte[] bytes = new byte[size];\r\n\r\n        fixed (byte* ptr = bytes)\r\n        {\r\n            for (int i = 0; i < size; i++)\r\n            {\r\n                ptr[i] = *(byte*)(methodPtr + i);\r\n            }\r\n        }\r\n\r\n        return bytes;\r\n    }`",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/100202/comments",
    "author": "dadavadd",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2024-03-24T14:56:58Z",
        "body": "NativeAOT binaries are no different from C/C++ or other native binaries at this level. The answer to your question would equally apply to native binaries compiled from other languages.\r\n\r\nA few different options that you have: \r\n- Write a disassembler that understands the instruction stream. Your code fragment suggests that you are considering going in this direction, but it has to be much more sophisticated.\r\n- Use unwind information to find the ranges for the method code (libunwind library can help you with that)\r\n- Use symbol information (.PDB on Windows, .DWARF on other platforms) to find the ranges for the method code"
      },
      {
        "user": "jkotas",
        "created_at": "2024-03-24T14:59:07Z",
        "body": "> potentially modify method instructions at runtime\r\n\r\nIn general, modifying method instructions at runtime does not work for .NET. The GC tracking information that is separate data structure has to exactly match with the method instructions. If you modify the method instructions, it is very likely that the GC tracking information will be out of sync with your modifications, and you will see intermittent crashes."
      }
    ]
  },
  {
    "number": 99559,
    "title": "[System.Reflection.Emit] AssemblyBuilderAccess.RunAndCollect not collecting assemblies",
    "created_at": "2024-03-11T19:45:12Z",
    "closed_at": "2024-03-11T22:20:54Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/99559",
    "body": "### Description\r\n\r\nSo I've been playing around with `AssemblyBuilderAccess.RunAndCollect`, but it turns out it's not working and has the same behavior as `Run`.\r\nAccording to the docs:\r\n```\r\nThe dynamic assembly will be automatically unloaded and its memory reclaimed,\r\nwhen it's no longer accessible.\r\n```\r\n\r\nEven after fully unreferencing everything related to my dynamic assembly, it will not unload, even after a forced GC collection.\r\nI have fully tested this, using the code in the section below.\r\n\r\n### Reproduction Steps\r\n\r\nI tested this with the following script:\r\n```cs\r\nint id = 0;\r\nfor (; ; )\r\n{\r\n    GC.Collect();\r\n\r\n    var name = $\"Test{id++}\";\r\n    var asm = AssemblyBuilder.DefineDynamicAssembly(new(name), AssemblyBuilderAccess.RunAndCollect);\r\n    var mod = asm.DefineDynamicModule(name);\r\n\r\n    var type1 = mod.DefineType(\"TestClass\", TypeAttributes.Public);\r\n    var met = type1.DefineMethod(\"Foo\", MethodAttributes.Public | MethodAttributes.Static);\r\n    var il = met.GetILGenerator();\r\n    il.EmitWriteLine(\"Hello World!\");\r\n    il.Emit(OpCodes.Ret);\r\n    var t = type1.CreateType();\r\n\r\n    t.InvokeMember(\"Foo\", BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod, null, null, null);\r\n\r\n    Console.WriteLine(\"----\");\r\n\r\n    foreach (var ass in AppDomain.CurrentDomain.GetAssemblies())\r\n    {\r\n        if (!ass.GetName().Name?.StartsWith(\"Test\") ?? true)\r\n            continue;\r\n\r\n        Console.WriteLine(ass.FullName);\r\n    }\r\n\r\n    Thread.Sleep(100);\r\n    Console.Clear();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nAfter a `GC.Collect`, the AppDomain should not contain the previously loaded dynamic assembly, and the console output should only contain the latest dyanmic assembly.\r\n\r\nExpected console output after 6th iteration:\r\n```\r\nHello World!\r\n----\r\nTest5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe AppDomain still contains the old dynamic assemblies, even after a forced collection, as seen in the console output.\r\n\r\nActual console output after 6th iteration:\r\n```\r\nHello World!\r\n----\r\nTest0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest4, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n```\r\n\r\n### Regression?\r\n\r\nI have tested the same code in net48 and net472, but the results are the same.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nnet8.0\r\nWindows 11\r\nx64\r\nI don't believe the issue is related to these configs.\r\n\r\n### Other information\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/99559/comments",
    "author": "slxdy",
    "comments": [
      {
        "user": "slxdy",
        "created_at": "2024-03-11T20:08:49Z",
        "body": "Ok, I have done some extra research, and it turns out that `GetAssemblies` prevents collectible assemblies from being unloaded in the future.\r\nFrom what I've read, that should only happen when using `Assembly.Load`. I don't think `GetAssemblies` should replicate this behavior, considering that we should have the ability to check for loaded assemblies, collectible or not, without forcing collectible assemblies to stay alive forever.\r\nIs it worth opening another issue for this problem?"
      },
      {
        "user": "reflectronic",
        "created_at": "2024-03-11T20:22:14Z",
        "body": "The issue does not reproduce for me after extracting the `foreach` to a separate method:\r\n```cs\r\n// ...\r\n    Console.WriteLine(\"----\");\r\n\r\n    PrintAssemblies();\r\n\r\n    Thread.Sleep(100);\r\n    Console.Clear();\r\n}\r\n\r\n\r\nstatic void PrintAssemblies()\r\n{\r\n    foreach (var ass in AppDomain.CurrentDomain.GetAssemblies())\r\n    {\r\n        if (!ass.GetName().Name?.StartsWith(\"Test\") ?? true)\r\n            continue;\r\n\r\n        Console.WriteLine(ass.FullName);\r\n    }\r\n}\r\n``` \r\n\r\nThen I get output like this:\r\n```\r\nHello World!\r\n----\r\nTest33, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nTest34, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n```"
      },
      {
        "user": "slxdy",
        "created_at": "2024-03-11T20:34:20Z",
        "body": "> The issue does not reproduce for me after extracting the `foreach` to a separate method:\r\n> \r\n> ```cs\r\n> // ...\r\n>     Console.WriteLine(\"----\");\r\n> \r\n>     PrintAssemblies();\r\n> \r\n>     Thread.Sleep(100);\r\n>     Console.Clear();\r\n> }\r\n> \r\n> \r\n> static void PrintAssemblies()\r\n> {\r\n>     foreach (var ass in AppDomain.CurrentDomain.GetAssemblies())\r\n>     {\r\n>         if (!ass.GetName().Name?.StartsWith(\"Test\") ?? true)\r\n>             continue;\r\n> \r\n>         Console.WriteLine(ass.FullName);\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> Then I get output like this:\r\n> \r\n> ```\r\n> Hello World!\r\n> ----\r\n> Test33, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n> Test34, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n> ```\r\n\r\nOh wow. I thought i was gonna be stuck with an annoying issue for a while, tysm.\r\nBefore I close the issue, mind explaining why this is the case tho, if you know at least? If I had to guess, it's probably because I'm getting the assemblies in the same stack?"
      },
      {
        "user": "jkotas",
        "created_at": "2024-03-11T21:49:46Z",
        "body": "Yes, `GetAssemblies()` returns the array of with all assemblies, the JIT may extend the lifetime of the array till end of the method (depends on many factors)."
      }
    ]
  },
  {
    "number": 99535,
    "title": " Inconsistent handling of duplicate keys in INI configuration files",
    "created_at": "2024-03-11T14:26:37Z",
    "closed_at": "2024-07-22T15:42:44Z",
    "labels": [
      "question",
      "discussion",
      "area-Extensions-Configuration"
    ],
    "url": "https://github.com/dotnet/runtime/issues/99535",
    "body": "When using `Microsoft.Extensions.Configuration.Ini 8.0.0`, I have observed inconsistent behavior regarding the handling of duplicate keys within a single INI file versus across multiple INI files.\r\n\r\n## Reproduction Steps:\r\n- When a section (e.g., `[Section1]`) is declared twice within a single INI file with duplicate keys, the parser throws a FormatException for duplicate keys (the same thing if two identical keys are declared inside a section declared one once).\r\n- When the same section is declared in two different INI files with duplicate keys, the last value overrides the previous ones without throwing an exception.\r\n## Expected Behavior\r\nThe handling of duplicate keys should be consistent regardless of whether they are within a single file or across multiple files. Either allow duplicate keys in both scenarios and use the last value (preferred), or disallow them entirely to ensure consistent behavior.\r\n## Actual Behavior\r\nCurrently, the behavior is inconsistent, leading to potential confusion and configuration errors.\r\n## Possible Solution\r\nConsider removing the key duplication check in `IniStreamConfigurationProvider.Read` or refining the logic to handle duplicates consistently across multiple files.\r\n## Code to Reproduce\r\n```csharp\r\npublic static void Main()\r\n{\r\n    Parse(\"File1.ini\", \"File2.ini\");\r\n}\r\n\r\npublic static void Parse(params string[] pathStrings)\r\n{\r\n    pathStrings = pathStrings.Where(File.Exists).ToArray();\r\n    var config = GetConfiguration(pathStrings);\r\n    foreach (var configurationSection in config.GetChildren())\r\n    {\r\n        Console.WriteLine(configurationSection.Key);\r\n        foreach (var value in configurationSection.GetChildren())\r\n            Console.WriteLine($\"\\t{value.Key} = {value.Value}\");\r\n    }\r\n\r\n}\r\nprivate static IConfiguration GetConfiguration(IEnumerable<string> pathStrings)\r\n{\r\n    var builder = new ConfigurationBuilder();\r\n    foreach (var path in pathStrings)\r\n        builder.AddIniFile(path);\r\n    return builder.Build();\r\n}\r\n```\r\n```\r\nFile1:\r\n[Section1]\r\n0=1\r\n[Section1]\r\n0=2\r\n\r\nOr File1:\r\n[Section1]\r\n0=1\r\n0=2\r\n\r\nFile2:\r\n[Section1]\r\n0=2\r\nOutput:\r\n{\"Failed to load configuration from file 'File1.ini'.\"} {\"A duplicate key 'Section1:0' was found.\"}\r\n```\r\n```\r\nFile1:\r\n[Section1]\r\n0=1\r\nFile2:\r\n[Section1]\r\n0=2\r\nOutput:\r\nSection1\r\n0 = 2\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/99535/comments",
    "author": "sergey-iki",
    "comments": [
      {
        "user": "ericstj",
        "created_at": "2024-07-22T15:42:44Z",
        "body": "It's not that you're adding 2 files - you're adding two different INI providers.  The configuration system allows for layering where one provider can override the values specified by another.\r\n\r\nIn a single file it's incorrect to define a value more than once - that's a problem with the file.  In multiple files it's completely legitimate and key part of the way configuration works.\r\n"
      }
    ]
  },
  {
    "number": 97693,
    "title": "Jump into Try/Catch Region",
    "created_at": "2024-01-30T11:49:07Z",
    "closed_at": "2024-01-30T13:30:01Z",
    "labels": [
      "question",
      "area-ExceptionHandling-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/97693",
    "body": "Hello,\r\n\r\nI would like to ask if it's possible to have a jump into a try/catch region.\r\nI have tried the logic below but I'm getting a compiler error: **No such label 'label' within the scope of the goto statement**.\r\nIs there any way I can generate such a logic?\r\n\r\n```\r\n        public void Example()\r\n        {\r\n            int i = 1;\r\n            goto Somewhere;\r\n\r\n            ThrowMethod();\r\n            try\r\n            {\r\n                int j = 1;\r\n                Somewhere:\r\n                int k = 1;\r\n                ThrowMethod();\r\n            }\r\n            catch\r\n            {\r\n                DoesNotThrow();\r\n            }\r\n        }\r\n```\r\n\r\nThank you!",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/97693/comments",
    "author": "mariam-abdulla",
    "comments": [
      {
        "user": "SingleAccretion",
        "created_at": "2024-01-30T13:10:03Z",
        "body": "No, it is not possible to enter a `try` bypassing the first block (broadly speaking). You can introduce a condition variable to work around this:\r\n```cs\r\npublic void Example()\r\n{\r\n    bool flag = false;\r\n\r\n    if (some_condition)\r\n    {\r\n        flag = true;\r\n        goto TryStart;\r\n    }\r\n\r\n    ThrowMethod();\r\nTryStart:\r\n    try\r\n    {\r\n        if (flag)\r\n        {\r\n            goto Somewhere;\r\n        }\r\n        int j = 1;\r\n\r\n    Somewhere:\r\n        int k = 1;\r\n        ThrowMethod();\r\n    }\r\n    catch\r\n    {\r\n        DoesNotThrow();\r\n    }\r\n}\r\n```\r\nObviously, such a construct has suboptimal readability characteristics at best."
      },
      {
        "user": "jakubch1",
        "created_at": "2024-01-30T13:17:33Z",
        "body": "@SingleAccretion is it somehow assured by ECMA rules that you always need to go through first instruction of try to be inside try block?"
      },
      {
        "user": "teo-tsirpanis",
        "created_at": "2024-01-30T13:30:01Z",
        "body": "This is codified in section I.12.4.2.8.2.7 of ECMA-335:\r\n\r\n> If the source of the branch is within a protected block, filter, or handler, the target(s) shall be within the same protected block, filter, or handler\r\n\r\n> If any target of the branch is within a protected block, except the first instruction of that protected block, the source shall be within the same protected block.\r\n\r\n> If any target of the branch is within a filter or handler, the source shall be within the same filter or handler."
      }
    ]
  },
  {
    "number": 95442,
    "title": "How to pass a string to a profiler with DisableRuntimeMarshallingAttribute present",
    "created_at": "2023-11-30T07:34:33Z",
    "closed_at": "2023-11-30T19:45:38Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/95442",
    "body": "I have a .Net profiler that's instrumenting some methods. The profiler inserts IL instructions that call the profiler using **calli** instruction, and one of the parameters to the call is a string. The string is represented in the calli signature as a **ELEMENT_TYPE_STRING**, and the runtime marshals that into a zero-delimited char* in my C++ code.\r\n\r\nIn .Net7 onwards, if the instrumented assembly has the DisableRuntimeMarshallingAttribute custom attribute, this doesn't work because the runtime marshaling system is disabled.\r\n\r\nMy questions are:\r\nWhat would be the preferred way of passing the string to the profiler?\r\n\r\nIs the runtime marshaling system really at odds with the source-generation-based marshaling or is DisableRuntimeMarshallingAttribute just a declarative attribute I may try to remove (via the profiler, while the assembly is being loaded) in order to have my marshaling back?\r\n\r\nThanks,\r\nUri.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/95442/comments",
    "author": "urisimchoni",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2023-11-30T19:45:38Z",
        "body": "> What would be the preferred way of passing the string to the profiler?\r\n\r\nIf the profiler expects the string as `char16_t*`, pin the string like:\r\n\r\n```csharp\r\nfixed (char* p = str)\r\n   pointer_to_function(p);\r\n``` \r\n\r\nIf the profiler expects the string as `char*`, the string needs to be marshalled. There are several options possible with varying perf characterics. The simplest (not the best performing) option is:\r\n```\r\nIntPtr p = Marshal.SecureStringToCoTaskMemAnsi(str);\r\npointer_to_function(p);\r\nMarshal.FreeCoTaskMem(p);\r\n```\r\n\r\n> is DisableRuntimeMarshallingAttribute just a declarative attribute I may try to remove\r\n\r\nAdding/removing `DisableRuntimeMarshallingAttribute` changes the code behavior. For example, `bool` or `char` types are passed differently to unmanaged code with and without `DisableRuntimeMarshallingAttribute`. It is not ok for the profiler to remove it for user assemblies."
      }
    ]
  },
  {
    "number": 90925,
    "title": "[Question] Ref reassignment",
    "created_at": "2023-08-22T14:48:16Z",
    "closed_at": "2023-08-22T14:58:36Z",
    "labels": [
      "question",
      "needs-area-label"
    ],
    "url": "https://github.com/dotnet/runtime/issues/90925",
    "body": "Below is the simple repro which is quite self-explanatory. The question is - why upon exit from `fn` our char reference `c` is not changed to '**b**' char?\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\n\r\nstatic void fn(ref char c)\r\n{\r\n    c = ref Unsafe.Add(ref c, 1);\r\n\t// now we have c = 'b'\r\n}\r\n\r\nvar input = \"abc\";\r\nref var c = ref MemoryMarshal.GetReference(input.AsSpan());\r\n\r\nfn(ref c);\r\n// but on exit we still have c = 'a'\r\nConsole.WriteLine(c);\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/90925/comments",
    "author": "hypeartist",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2023-08-22T14:58:36Z",
        "body": "> why upon exit from fn our char reference c is not changed to 'b' char?\r\n\r\n`c = ref Unsafe.Add(ref c, 1);` reassigns where `c` points to. It does not change the value that `c` points to. It is how `ref` works in C#.\r\n\r\nYou would need to omit the `ref` to make it do what you are trying to.\r\n\r\nNote that string objects are expected to be immutable. It is not legal to modify their content. It breaks the runtime invariants that can lead to a lot of surprising behaviors."
      },
      {
        "user": "hypeartist",
        "created_at": "2023-08-22T15:02:13Z",
        "body": "@jkotas Thank you. That was it. \r\n\r\nPS: as of `string` - yep, it was not best type for example."
      }
    ]
  },
  {
    "number": 85223,
    "title": "Unable to get exception's filename and line number in mono.",
    "created_at": "2023-04-23T16:03:16Z",
    "closed_at": "2023-07-18T20:51:18Z",
    "labels": [
      "question",
      "area-Diagnostics-mono"
    ],
    "url": "https://github.com/dotnet/runtime/issues/85223",
    "body": "I integrated .net7(mono) into UE, and then loaded the plugin.\r\n\r\nThe dll of my plug-in is not loaded directly through mono's c++ api (because mono has deleted the multi-domain support), I first load a Util.dll (c#), and then load it by calling the static function in Util.dll Other plugin dlls:\r\n\r\nCode :\r\n```c#\r\n public static class AssemblyUtil\r\n    {\r\n        static AssemblyLoadContext? ALC;\r\n\r\n        public static void Initialize()\r\n        {\r\n            ALC ??= new AssemblyLoadContext(\"MonoCSharp\", true);\r\n        }\r\n\r\n        public static void Deinitialize()\r\n        {\r\n            if (ALC != null)\r\n            {\r\n                ALC.Unload();\r\n\r\n                ALC = null;\r\n            }\r\n        }\r\n\r\n        public static Assembly? Load(string InPath)\r\n        {\r\n\r\n            var pdbFile = InPath.Substring(0, InPath.Length - 4) + \".pdb\";\r\n            using var LibraryFileSR = new StreamReader(InPath);\r\n            if (File.Exists(pdbFile))\r\n            {\r\n                Console.WriteLine($@\"Find the pdb file \"\"{pdbFile}\"\" of the \"\"{InPath}\"\" file\");\r\n                using var SymbolFileSR = new StreamReader(pdbFile);\r\n                return ALC?.LoadFromStream(LibraryFileSR.BaseStream, SymbolFileSR.BaseStream);\r\n\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine($@\"No pdb file found for \"\"{InPath}\"\" file\");\r\n                return ALC?.LoadFromStream(LibraryFileSR.BaseStream);\r\n            }\r\n\r\n        }\r\n    }\r\n```\r\n\r\nI'm running into a problem right now where I can't use StackTrace to get the source file path and line number when an exception is thrown in a dll in c#.\r\n\r\n```c#\r\n  public static string GetTraceback()\r\n        {\r\n            var Traceback = new StringBuilder();\r\n\r\n            var Trace = new StackTrace(true);\r\n\r\n            var Frames = Trace.GetFrames();\r\n\r\n            foreach (var Frame in Frames)\r\n            {\r\n                Traceback.Append(String.Format(\"at {0}.{1} in {2}:{3}\\r\\n\",\r\n                    Frame.GetMethod().DeclaringType.FullName,\r\n                    Frame.GetMethod().Name,\r\n                    Frame.GetFileName(),\r\n                    Frame.GetFileLineNumber()));\r\n            }\r\n\r\n            return Traceback.ToString();\r\n        }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/85223/comments",
    "author": "CeSun",
    "comments": [
      {
        "user": "steveisok",
        "created_at": "2023-04-28T21:10:07Z",
        "body": "/cc @lateralusX "
      },
      {
        "user": "lateralusX",
        "created_at": "2023-07-18T18:29:23Z",
        "body": "In order for Mono to be able to map source/line info in stack traces, you will need to enable runtime debug support. If you embed the Mono runtime using the C API, you also need to configure the debugger support needed in order to load, parse and use symbol data at runtime. The same logic is enabled in `driver.c, mono_main` by supplying the `--debug` argument.\r\n\r\nThe function call enabling debug symbol support in runtime is the following:\r\n\r\n`mono_debug_init (MONO_DEBUG_FORMAT_MONO);`\r\n\r\nmake sure that gets called before calling `mono_jit_init` in the embedding code."
      },
      {
        "user": "CeSun",
        "created_at": "2023-07-31T05:43:11Z",
        "body": "Added mono_debug_init (MONO_DEBUG_FORMAT_MONO)."
      }
    ]
  },
  {
    "number": 84237,
    "title": "[NativeAOT] When will NativeAOT support shared CoreCLR?",
    "created_at": "2023-04-02T10:22:51Z",
    "closed_at": "2023-05-03T00:02:01Z",
    "labels": [
      "question",
      "area-NativeAOT-coreclr",
      "needs-author-action"
    ],
    "url": "https://github.com/dotnet/runtime/issues/84237",
    "body": "Does NativeAOT have plans to support a \"static compilation\" version similar to bflat? Currently, .NET assemblies exported through AOT cannot load multiple dynamic link libraries, as they show conflicts with coreclr. Will this be improved in the future?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/84237/comments",
    "author": "MIAIONE",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2023-04-03T05:34:22Z",
        "body": "Could you please share a bflat example that demonstrates what you would like to do?\r\n\r\ncc @MichalStrehovsky \r\n\r\nBTW: The native AOT project is moved to dotnet/runtime repo and shipped .NET 7. dotnet/runtime is a better place to ask questions.\r\n\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2023-04-03T13:10:20Z",
        "body": "This issue has been marked `needs-author-action` and may be missing some important information."
      },
      {
        "user": "ghost",
        "created_at": "2023-04-18T21:02:14Z",
        "body": "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`."
      },
      {
        "user": "ghost",
        "created_at": "2023-05-03T00:02:00Z",
        "body": "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days."
      }
    ]
  },
  {
    "number": 78031,
    "title": "[API Proposal]: Can exception not collect StackTrace?",
    "created_at": "2022-11-08T15:17:38Z",
    "closed_at": "2022-11-10T18:33:25Z",
    "labels": [
      "question",
      "api-suggestion",
      "area-ExceptionHandling-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/78031",
    "body": "### Background and motivation\n\nIn my asp.net core project, I throw exception to return bussiness error information, but runtime cost too much time to collect StackTrace.\r\nCan we give exception a property like \"NotCollectStack\" to tell runtime not collect StackTrace?\n\n### API Proposal\n\n```csharp\r\nthrow new BussinessException() { NotCollectStack = false };\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nthrow new BussinessException() { NotCollectStack = false };\r\n```\r\n\n\n### Alternative Designs\n\nOr like SuppressableStacktraceException in java\n\n### Risks\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/78031/comments",
    "author": "zhouandke",
    "comments": [
      {
        "user": "gfoidl",
        "created_at": "2022-11-08T16:11:21Z",
        "body": "> throw exception to return bussiness error information\r\n\r\nWhy not return that \"business error information\" as normal object, i.e. not as Exception?"
      },
      {
        "user": "jkotas",
        "created_at": "2022-11-08T17:10:36Z",
        "body": "> runtime cost too much time to collect StackTrace.\r\n\r\nDo you have any data to support this?"
      },
      {
        "user": "zhouandke",
        "created_at": "2022-11-10T14:46:22Z",
        "body": "> > throw exception to return bussiness error information\r\n> \r\n> Why not return that \"business error information\" as normal object, i.e. not as Exception?\r\n\r\nI used to use Result<T> as return type\r\n```\r\n    public class Result<T>\r\n    {\r\n        public int Code { get; set; }\r\n        public T Data { get; set; }\r\n        public string Message { get; set; }\r\n    }\r\n```\r\nEvery time I need to determine whether result.code is equal to 0, I think it's tedious.\r\nNow In asp.net core, I throw the business exception directly,  then use middleware to catch the business exception, then return bussiness error to user.\r\nThis can reduce a lot of code."
      },
      {
        "user": "zhouandke",
        "created_at": "2022-11-10T15:29:30Z",
        "body": "> > runtime cost too much time to collect StackTrace.\r\n> \r\n> Do you have any data to support this?\r\n\r\nThank you.\r\nI used to test in Debug mode, stack trace has a big impact.\r\nIn Release mode, stack trace has a little impact in asp.net core 3.1.\r\n\r\nI use exception to return bussiness error, is there any method to reduce exception cost?\r\n\r\nRecursionCall 1 time with exception: 3346\r\nRecursionCall 500 time with exception: 3343\r\nRecursionCall 500 time: 0\r\n\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var count = 100000;\r\n            var sw = new System.Diagnostics.Stopwatch();\r\n            sw.Start();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                try\r\n                {\r\n                    SomeMethodWithException(1);\r\n                }\r\n                catch { }\r\n            }\r\n            sw.Stop();\r\n            Console.WriteLine(\"RecursionCall 1 time with exception: \" + sw.ElapsedMilliseconds);\r\n\r\n            sw.Restart();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                try\r\n                {\r\n                    SomeMethodWithException(500);\r\n                }\r\n                catch { }\r\n            }\r\n            sw.Stop();\r\n            Console.WriteLine(\"RecursionCall 500 time with exception: \" + sw.ElapsedMilliseconds);\r\n\r\n            sw.Restart();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                try\r\n                {\r\n                    SomeMethod(500);\r\n                }\r\n                catch { }\r\n            }\r\n            sw.Stop();\r\n            Console.WriteLine(\"RecursionCall 500 time: \" + sw.ElapsedMilliseconds);\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static void SomeMethodWithException(int n)\r\n        {\r\n            if (n <= 0)\r\n            {\r\n                throw new Exception();\r\n            }\r\n            SomeMethodWithException(n - 1);\r\n        }\r\n\r\n        private static string SomeMethod(int n)\r\n        {\r\n            if (n <= 0)\r\n            {\r\n                return SomeMethod(n - 1);\r\n\r\n            }\r\n            return \"Error\";\r\n        }\r\n```\r\n\r\n"
      },
      {
        "user": "jkotas",
        "created_at": "2022-11-10T18:33:25Z",
        "body": "Note that methods like `SomeMethodWithException` in your example can be optimized by the JIT into a loop, so your test may not be actually measuring the deep recursive stacks that it is meant to measure.\r\n\r\nYour benchmarks are not calling the `Exception.StackTrace` property that I thought your concern is about. If you called `Exception.StackTrace` as part of your test, it would get even slower. However, you are in full control on whether or not to call `Exception.StackTrace` already.\r\n\r\n The exception handling has to walk the stack to find the catch handler. It is not possible to skip the stack walking as part of the exception handling.\r\n\r\nExceptions in .NET are expensive, and it is a not a good idea to use them for control flow."
      }
    ]
  },
  {
    "number": 76175,
    "title": "Incorrect marshalling of IntPtr in union",
    "created_at": "2022-09-26T11:05:43Z",
    "closed_at": "2022-09-26T15:12:07Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/76175",
    "body": "### Description\r\n\r\nNext example shows incorrect output in managed code of `StructA.Y`. For some reason the value is truncated.\r\n\r\nManaged part:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class Program\r\n{\r\n  [StructLayout(LayoutKind.Sequential)]\r\n  internal struct StructA\r\n  {\r\n    internal IntPtr X;\r\n    internal IntPtr Y;\r\n    internal IntPtr Z;\r\n    internal uint XLength;\r\n    internal uint YLength;\r\n    internal uint ZLength;\r\n  }\r\n\r\n  [StructLayout(LayoutKind.Sequential)]\r\n  internal struct StructB\r\n  {\r\n    internal IntPtr Data;\r\n    internal uint DataLength;\r\n    internal bool Flag;\r\n  }\r\n\r\n  [StructLayout(LayoutKind.Explicit)]\r\n  internal struct UnionStruct\r\n  {\r\n    [FieldOffsetAttribute(0)]\r\n    internal StructA A;\r\n    [FieldOffsetAttribute(0)]\r\n    internal StructB B;\r\n  }\r\n\r\n  [DllImport(\"tmp.so\", EntryPoint = \"test_func\")]\r\n  internal static extern IntPtr testFunc(int value);\r\n\r\n  static void Main(string[] args)\r\n  {\r\n    Console.WriteLine(\"Hello World!\");\r\n\r\n    IntPtr ptr = testFunc(10);\r\n\r\n    var unmanagedStruct = Marshal.PtrToStructure<UnionStruct>(ptr);\r\n\r\n    Console.WriteLine(\">>> managed:\");\r\n    Console.WriteLine(unmanagedStruct.A.X);\r\n    Console.WriteLine(unmanagedStruct.A.Y);\r\n    Console.WriteLine(unmanagedStruct.A.Z);\r\n    Console.WriteLine(unmanagedStruct.A.XLength);\r\n    Console.WriteLine(unmanagedStruct.A.YLength); \r\n    Console.WriteLine(unmanagedStruct.A.ZLength);\r\n\r\n    Console.WriteLine(unmanagedStruct.B.Data);\r\n    Console.WriteLine(unmanagedStruct.B.DataLength);\r\n    Console.WriteLine(unmanagedStruct.B.Flag);\r\n  }\r\n}\r\n```\r\n\r\nNative part:\r\n```c\r\n#include <malloc.h>\r\n#include <string.h>\r\n#include <stdio.h>\r\n#include <stdbool.h>\r\n\r\ntypedef union {\r\n  struct {\r\n    unsigned char *x;\r\n    unsigned char *y;\r\n    unsigned char *z;\r\n    unsigned int x_length;\r\n    unsigned int y_length;\r\n    unsigned int z_length;\r\n  } A;\r\n\r\n  struct {\r\n    unsigned char *data;\r\n    unsigned int size;\r\n    bool flag;\r\n  } B;\r\n} union_s;\r\n\r\nvoid* test_func()\r\n{\r\n  printf(\">>> test_func:\\n\");\r\n\r\n  union_s * x = (union_s *) malloc(sizeof(union_s));\r\n\r\n  x->A.x = (unsigned char *) (0x7ea33f5000);\r\n  x->A.y = (unsigned char *) (0x7ea3440000);\r\n  x->A.z = (unsigned char *) (0x7ea3452c00);\r\n  x->A.x_length = (555);\r\n  x->A.y_length = (666);\r\n  x->A.z_length = (1010);\r\n\r\n  printf(\"x = %p, y = %p, z = %p, x_length = %u, y_length = %u, z_length = %u\\n\", \r\n    x->A.x, x->A.y, x->A.z, x->A.x_length, x->A.y_length, x->A.z_length);\r\n\r\n  return x;\r\n}\r\n```\r\n\r\n\r\n### Reproduction Steps\r\n\r\nCompile native part with `gcc -shared -fPIC 1.c -o tmp.so`. \r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nExpected output:\r\n```\r\nHello World!\r\n>>> test_func:\r\nx = 0x7ea33f5000, y = 0x7ea3440000, z = 0x7ea3452c00, x_length = 555, y_length = 666, z_length = 1010\r\n>>> managed:\r\n543904714752\r\n543905021952\r\n543905098752\r\n555\r\n666\r\n1010\r\n543904714752\r\n2739142656\r\nTrue\r\n```\r\n\r\n### Actual behavior\r\n\r\nActual output:\r\n```\r\nHello World!\r\n>>> test_func:\r\nx = 0x7ea33f5000, y = 0x7ea3440000, z = 0x7ea3452c00, x_length = 555, y_length = 666, z_length = 1010\r\n>>> managed:\r\n543904714752\r\n7034109952\r\n543905098752\r\n555\r\n666\r\n1010\r\n543904714752\r\n2739142656\r\nTrue\r\n```\r\n\r\n`7034109952` value corresponds to truncated `543905021952`.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- Reproduces on x64/arm64. Managed part of test is built with dotnet sdk 6.0.201 or dotnet sdk 5.0.408.\r\n- Reproduces on 6.0.0, 6.0.9 and main (8bf6a86f1bc309529604430c568c14490d44d069).\r\n- Reproduces with Release/Debug builds of managed part of test.\r\n- Reproduces both for Release/Debug builds of runtime.\r\n- Reproduces both with and without any R2R images.\r\n- Doesn't reproduce if type of `Struct.B.DataLength` is changed to ulong (as well as type of corresponding field in native part).\r\n\r\n### Other information\r\n\r\ncc @alpencolt @jkotas ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/76175/comments",
    "author": "gbalykov",
    "comments": [
      {
        "user": "DaZombieKiller",
        "created_at": "2022-09-26T12:20:57Z",
        "body": "The issue here is that your `StructB` type contains a managed `bool` field, which causes it to be treated as a non-blittable type. Since `UnionStruct` contains a field of `StructB`, it too is considered non-blittable. This means that `Marshal.PtrToStructure` will attempt to marshal your type instead of just blitting the data across, resulting in the corruption of your pointer.\r\n\r\nFor ease of reproduction, here is a managed replacement for the native `test_func` method, which still reproduces the problem:\r\n```cs\r\nstatic unsafe IntPtr testFunc(int value)\r\n{\r\n    Console.WriteLine(\">>> test_func:\");\r\n    var a = (StructA*)NativeMemory.Alloc((uint)sizeof(StructA));\r\n    a->X = unchecked((nint)0x7ea33f5000);\r\n    a->Y = unchecked((nint)0x7ea3440000);\r\n    a->Z = unchecked((nint)0x7ea3452c00);\r\n    a->XLength = 555;\r\n    a->YLength = 666;\r\n    a->ZLength = 1010;\r\n    Console.WriteLine($\"x = 0x{a->X:X}, y = 0x{a->Y:X}, z = 0x{a->Z:X}, x_length = {a->XLength}, y_length = {a->YLength}, z_length = {a->ZLength}\");\r\n    return (IntPtr)a;\r\n}\r\n```\r\n\r\nThere are a few solutions:\r\n1. Use `*(UnionStruct*)ptr` instead of `Marshal.PtrToStructure`.\r\n2. Change the `bool` field to `byte`, which will cause the types to be considered blittable and no marshaling will occur.\r\n3. Add `[assembly: DisableRuntimeMarshaling]` and use `*(UnionStruct*)ptr` instead of `Marshal.PtrToStructure`.\r\n\r\nMy personal recommendation would be to go with option 2 and use `*(UnionStruct*)ptr` to read the value."
      },
      {
        "user": "gbalykov",
        "created_at": "2022-09-26T12:35:58Z",
        "body": "Thanks for response.\r\n\r\nDoesn't it mean then that `Marshal.PtrToStructure` works incorrectly in such case of non-blittable types? Or marshaler is expected to work incorrectly in such case of non-blittable types?\r\n\r\nI've checked solution 2, as a workaround it works, thanks. "
      },
      {
        "user": "DaZombieKiller",
        "created_at": "2022-09-26T12:54:36Z",
        "body": "I think this is expected behaviour, even if it may be a bit confusing.\r\n\r\nThink about how the type would be marshaled. Each field will be written in order. The marshaller normalizes booleans to `0` (`false`) or `1` (`true`).\r\n\r\nThey are also marshaled as a Win32 `BOOL` by default, which is a 32-bit integer (so it actually needs `[MarshalAs(UnmanagedType.U1)]` to have a matching layout with native).\r\n\r\nThis means that if your pointer overlaps with a `bool`, the overlapping byte will be normalized, corrupting the value once the marshaller starts marshaling `StructB`.\r\n\r\nTo help with understanding the problem, you can try performing the marshaling yourself. Define `StructB` as:\r\n```cs\r\n[StructLayout(LayoutKind.Sequential)]\r\ninternal struct StructB\r\n{\r\n    internal IntPtr Data;\r\n    internal uint DataLength;\r\n    internal int Flag; // Win32 BOOL = int\r\n}\r\n```\r\nAnd then read the value with:\r\n```cs\r\nvar unmanagedStruct = *(UnionStruct*)ptr;\r\n\r\n// normalize the bool\r\nunmanagedStruct.B.Flag = unmanagedStruct.B.Flag != 0 ? 1 : 0;\r\n```\r\nAnd you will see the same pointer corruption.\r\nAs a result, you can actually \"hide\" the problem by defining `UnionStruct` like this:\r\n```cs\r\n[StructLayout(LayoutKind.Explicit)]\r\ninternal struct UnionStruct\r\n{\r\n    [FieldOffset(0)]\r\n    internal StructB B;\r\n    [FieldOffset(0)]\r\n    internal StructA A;\r\n}\r\n```\r\nBecause `StructB` is marshaled first, you won't see the pointer corruption."
      },
      {
        "user": "jkotas",
        "created_at": "2022-09-26T15:12:07Z",
        "body": "```\r\n  struct {\r\n    unsigned char *data;\r\n    unsigned int size;\r\n    bool flag;\r\n  } B;\r\n```\r\nNote that your managed definition of B does not match this structure. Size of `bool` is likely 1 byte in your C/C++ compiler. The default marshalling for `bool` assumes that the size is 4 bytes. This mismatch is contributing to the confusing behavior that you are seeing.\r\n\r\nManual marshalling that @DaZombieKiller suggested is the best way to avoid problems like this for more complex structs with unions, etc. You should use `byte` as managed equivalent for unmanaged `bool`.\r\n\r\nAlso, take a look at `DisableRuntimeMarshallingAttribute` that is new in .NET 7."
      },
      {
        "user": "gbalykov",
        "created_at": "2022-09-26T15:16:40Z",
        "body": "@DaZombieKiller @jkotas thanks for detailed descriptions!"
      }
    ]
  },
  {
    "number": 71897,
    "title": "Is .NET 4.8.1 on Windows ARM64 an ARM64EC binary?",
    "created_at": "2022-07-10T08:13:05Z",
    "closed_at": "2022-07-10T11:20:35Z",
    "labels": [
      "question",
      "tracking-external-issue",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/71897",
    "body": "If I have a mostly .NET application with some native dlls that are x64, and I wanted to know if .NET 4.8.1 on Windows 11 ARM64 will it work or will I have to do porting work?\r\n\r\nIf application is ARM64 can it load native x64 dlls? I don't think so, but please clarify. I'm assuming you know these things and therefore decided what is the best approach.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/71897/comments",
    "author": "simplejackcoder",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2022-07-10T11:20:35Z",
        "body": "> Is .NET 4.8.1 on Windows ARM64 an ARM64EC binary?\r\n\r\nNo. Note ARM64EC is only a performance optimization that makes the x64 emulation more efficient. It does not affect what works or does not work.\r\n\r\n> If application is ARM64 can it load native x64 dlls?\r\n\r\nNo.\r\n\r\narm64 processes can only load arm64 .dlls.\r\nx64 processes can only load x64 dlls (that can be optionally optimized using ARM64EC)."
      }
    ]
  },
  {
    "number": 69862,
    "title": "Fatal error. Internal CLR error. (0x80131506) when calling Managed function using C#",
    "created_at": "2022-05-26T16:14:17Z",
    "closed_at": "2022-05-27T14:27:15Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/69862",
    "body": "### Description\r\n\r\nWhen calling a managed function from C# using .net 6 I get an application crash which I have not been able to obtain a core dump, windows event error log, or get visual studio to halt on the exception. However the code runs fine when using .net 3.5\r\n\r\n### Reproduction Steps\r\n\r\nI am not sure how to reproduce this in a small project\r\n\r\n### Expected behavior\r\n\r\nManaged function should be called and return properly\r\n\r\n### Actual behavior\r\n\r\nManaged function causes a crash with error code (`0x80131506`) \r\nand the following line is placed in the visual studio console\r\nThe program '[0xB5B8] ConsoleApp1.exe' has exited with code 3221226505 (`0xc0000409`).\r\n\r\n### Regression?\r\n\r\n.net 3.5\r\n\r\n### Known Workarounds\r\n\r\nUse .net 3.5\r\n\r\n### Configuration\r\n\r\n.net 6\r\nWindows 10 20H2\r\nx86\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/69862/comments",
    "author": "elksson",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-05-26T20:13:24Z",
        "body": "@elksson Sorry to hear you are hitting this issue. The error code in question is `COR_E_EXECUTIONENGINE`, which can manifest in many forms. The transition from .NET Framework 3.5 to .NET 6 is a large shift and many things have changed that could result in this type of error. Can you provide a bit more detail on how the transition was performed - recompiling your .NET Framework 3.5 project to a .NET 6 project.\r\n\r\nWould it be possible to attach a debugger prior to the process prior to the crash? If so, the debugger will break prior to the crash and at that point you should be able to use the debugger to capture a DMP."
      },
      {
        "user": "ghost",
        "created_at": "2022-05-26T20:13:42Z",
        "body": "This issue has been marked `needs-author-action` and may be missing some important information."
      },
      {
        "user": "elksson",
        "created_at": "2022-05-26T21:09:11Z",
        "body": "@AaronRobinsonMSFT I have visual studio debugger attached when running however even with visual studio setup to break on all exceptions it does not halt instead the process just crashes. I have also configured the registry to capture a core mempory dump on crash however no dump file is created. Finally I have checked the windows event viewer and it shows no failure. "
      },
      {
        "user": "elksson",
        "created_at": "2022-05-26T21:14:39Z",
        "body": "I am calling the following function: \r\n\r\n```\r\n[UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\n        public delegate int PassThruReadVersion(int deviceId, IntPtr firmwareVersion, IntPtr dllVersion, IntPtr apiVersion);\r\n        public PassThruReadVersion ReadVersion;\r\n```\r\n\r\nWith the c declaration: \r\n\r\n`extern \"C\" J2534_API_DECL long WINAPI PassThruReadVersion(unsigned long DeviceID,  char *pFirmwareVersion, char *pDllVersion,char *pApiVersion);`\r\n"
      },
      {
        "user": "elksson",
        "created_at": "2022-05-26T21:52:45Z",
        "body": "Something else interesting is that if I run without the debugger attached it does not crash. \r\nCTRL + F5 in visual studio = no crash\r\nF5 = crash"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-05-26T22:48:28Z",
        "body": "@elksson Can you share how the project was ported to .NET 6?\r\n\r\nCalling a native function through a `delegate` has no known issues. Does `J2534_API_DECL` resolve to `cdecl`? It seems to be marked `WINAPI` which is typically `stdcall` on Windows.\r\n\r\nWhat code is acquiring the function pointer?"
      },
      {
        "user": "elksson",
        "created_at": "2022-05-27T02:02:57Z",
        "body": "I will check tomorrow on that. As for the code ported to .net a new project was created using VS 2022 and the code files moved into the new project. "
      },
      {
        "user": "elksson",
        "created_at": "2022-05-27T02:33:38Z",
        "body": "These are the define(s)\r\n\r\n#define WINAPI __stdcall\r\n#define J2534_API_DECL __declspec(dllexport)\r\n"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-05-27T03:47:17Z",
        "body": "Then at a minimum, `[UnmanagedFunctionPointer(CallingConvention.Cdecl)]` should be `[UnmanagedFunctionPointer(CallingConvention.StdCall)]`."
      },
      {
        "user": "elksson",
        "created_at": "2022-05-27T13:25:28Z",
        "body": "I have changed the definition to \r\n[UnmanagedFunctionPointer(CallingConvention.StdCall)]\r\npublic delegate int PassThruReadVersion(UInt32 deviceId, IntPtr firmwareVersion, IntPtr dllVersion, IntPtr apiVersion);\r\n\r\nhowever the application still crashes with the same error when the debugger is attached. "
      },
      {
        "user": "elksson",
        "created_at": "2022-05-27T13:29:06Z",
        "body": "When the debugger is not attached I seem to get the same error but it happens after the program has finished running. "
      },
      {
        "user": "elksson",
        "created_at": "2022-05-27T14:27:15Z",
        "body": "For some reason visual studio was not re-compiling the native code wrapper after the changes. "
      }
    ]
  },
  {
    "number": 56632,
    "title": "The State of Future Support for .NET on the HarmonyOS platform",
    "created_at": "2021-07-30T16:52:47Z",
    "closed_at": "2021-08-03T18:13:10Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/56632",
    "body": "Good day. \n\nRecently, Huawei announced HarmonyOS, and their full initial product line and ecosystem for the new OS and ecosystem. The new OS will run on phones, snartwatches, smart TVs and embedded devices, fitting very much in line with .NET's idea of a cross-platform framework for developing _all_ your apps.\n\nHuawei already has a huge user base, and anyway, HarmonyOS may gain large traction. Already, a huge amount of Huawei devices exist that will receive HarmonyOS, and many new ones will be manufactured.\n\nAs a result, it makes sense that the Open platform, .NET, would eventually gain support for it.\n\nThen, given the large user base of Huawei devices, and their popularity in regions such as South Africa where Huawei is the most popular platform, it would make sense that eventual work would be done to bring HarmonyOS support to the platform.\n\nWhat, then, will be the future state of work on the .NET platform to support the future HarmonyOS platform that will run on countless devices, both present and future? ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/56632/comments",
    "author": "shalinpather",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2021-07-31T04:14:15Z",
        "body": "@richlander "
      },
      {
        "user": "richlander",
        "created_at": "2021-08-03T03:00:01Z",
        "body": "Interesting idea. We welcome Huawei or the community to make this opportunity a reality. This is similar to how Samsung invested in making .NET available for Tizen. We have collaborated with Samsung over multiple releases. We'd by happy to do the same again with another group. This isn't a project that the .NET Team intends to take on."
      },
      {
        "user": "shalinpather",
        "created_at": "2021-08-03T05:03:07Z",
        "body": "Quite right. The awesome spirit of community made .NET on Tizen a reality.  I suppose the same will happen for HarmonyOS. It's still early days, so we'll see what happens!\n\nOne question, though: suppose the hypothetic situation where HarmonyOS becomes a large ecosystem of a magnitude large enough to become a third major ecosystem that competes with iOS and Android. TechAltar's video supposes a potential future situation.\n\nIf HarmonyOS were of such a large scale, on par with the other two ecosystems, would the, .NET team themselves take on this future project?"
      },
      {
        "user": "richlander",
        "created_at": "2021-08-03T16:49:07Z",
        "body": "Sure. If HarmonyOS grows to become a strong ecosystem alongside Android and iOS then that would certainly be of interest to .NET developers (and they'd tell us) and to the team. This is the first I've heard of a request for .NET on HarmonyOS. We'll watch and see how ecosystem adoption for HarmonyOS progresses globally."
      },
      {
        "user": "shalinpather",
        "created_at": "2021-08-03T18:13:10Z",
        "body": "Awesome. Thanks so much for your assistance! This would be quite an interesting topic going forward. For now, then, in the early days of this new ecosystem, I guess it's up to the community to begin realising such a project."
      }
    ]
  },
  {
    "number": 55329,
    "title": "How to open a WPF window in a library project(dll)?",
    "created_at": "2021-07-08T12:47:25Z",
    "closed_at": "2021-08-06T02:47:26Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/55329",
    "body": "**My target:**\r\ncreate a C# library to open a WPF Window, and then package it as a dll file. In the end, the dll can be called by other platform(for example: python)\r\n\r\nIf it's a Winform window, it's easy. Because in `Window Forms Control library`, it's easy to open a WinForm window. \r\n\r\nSo, how to open a WinForm window in a library project?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/55329/comments",
    "author": "xiaoxstz",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2021-07-08T15:34:39Z",
        "body": "> the dll can be called by other platform\r\n\r\nHow will it be called?\r\n\r\nIf it's called through `dotnet.exe`, then it is actually an executable, not a library."
      },
      {
        "user": "xiaoxstz",
        "created_at": "2021-07-09T10:07:05Z",
        "body": "Use a python package named `pythonnet`.\r\n\r\nFor example\r\n\r\n# The C# part\r\n`ImgWindowFrm` library project. The code of `ImgWindow.cs` is shown as below:\r\n```C#\r\nnamespace ImgWindowFrm\r\n{\r\n    public class ImgWindow\r\n    {\r\n        public int Add(int a,int b)\r\n        {\r\n            return a + b;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# The python part\r\n```python\r\nimport clr\r\nclr.AddReference(\"ImgWindowFrm\")  # dll name\r\nfrom ImgWindowFrm import *        # from namespace import *\r\n\r\nif __name__ == '__main__':\r\n    instance = ImgWindow()       # class name\r\n    print('2+3=', instance.Add(2, 3))\r\n```\r\n"
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2021-07-09T10:14:46Z",
        "body": "There shouldn't be anything special for WPF. A regular WPF control library should be able to do so."
      },
      {
        "user": "jkoritzinsky",
        "created_at": "2021-07-12T21:07:17Z",
        "body": "@xiaoxstz do you still need assistance here?"
      },
      {
        "user": "xiaoxstz",
        "created_at": "2021-07-13T07:47:38Z",
        "body": "Yes.\r\nI still need assistance.\r\n\r\nWinForm library can open a Winform Window by C# code. But how can we a WPF Window by C# code?\r\n\r\nIf you can give me a example for this, I can solve this issue by myself"
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2021-07-13T11:14:19Z",
        "body": "Just:\r\n```csharp\r\nvar window = new MyWindow();\r\nwindow.Activate();\r\n```\r\n\r\nThis should be generated in `Main` in `App.g.cs` for a default WPF application."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2021-08-06T02:47:26Z",
        "body": "@xiaoxstz I am going to close this for now. Please do let us know if assistance is still needed. Thanks."
      }
    ]
  },
  {
    "number": 51087,
    "title": "IL_STUB_PInvoke pushes and pops more registers than necessary?",
    "created_at": "2021-04-11T20:10:22Z",
    "closed_at": "2021-04-11T21:09:34Z",
    "labels": [
      "question",
      "tenet-performance",
      "area-CodeGen-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/51087",
    "body": "Looks like it always pushes 8 registers regardless of arguments or how many are used in the stub?\r\n\r\n```asm\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke():int\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows\r\n; ReadyToRun compilation\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 loc0         [V00    ] (  0,  0   )     int  ->  zero-ref   \r\n;* V01 loc1         [V01    ] (  0,  0   )     int  ->  zero-ref   \r\n;  V02 loc2         [V02,T02] (  2,  2   )     int  ->  rax        \r\n;  V03 OutArgs      [V03    ] (  1,  1   )  lclBlk (32) [rsp+00H]   \"OutgoingArgSpace\"\r\n;  V04 tmp1         [V04    ] (  2,  2   )    long  ->  [rbp-40H]   do-not-enreg[X] addr-exposed \"stub argument\"\r\n;  V05 tmp2         [V05,T00] (  2,  4   )    long  ->  rsi         \"impImportIndirectCall\"\r\n;  V06 tmp3         [V06,T01] (  2,  4   )     int  ->  rax         \"Single return block return value\"\r\n;  V07 PInvokeFrame [V07    ] (  3,  3   )     blk (88) [rbp-98H]   do-not-enreg[X] addr-exposed \"Pinvoke FrameVar\"\r\n;\r\n; Lcl frame size = 136\r\n\r\nG_M36390_IG01:\r\n       push     rbp\r\n       push     r15\r\n       push     r14\r\n       push     r13\r\n       push     r12\r\n       push     rdi\r\n       push     rsi\r\n       push     rbx\r\n       sub      rsp, 136\r\n       lea      rbp, [rsp+C0H]\r\n       mov      qword ptr [rbp-40H], r10\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 9.75\r\nG_M36390_IG02:\r\n       mov      rcx, qword ptr [rbp-40H]\r\n       mov      rcx, qword ptr [rcx+32]\r\n       mov      rsi, qword ptr [rcx]\r\n       lea      rcx, [rbp-98H]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 5.50\r\nG_M36390_IG03:\r\n       call     [CORINFO_HELP_JIT_PINVOKE_BEGIN]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 3.00\r\nG_M36390_IG04:\r\n       call     rsi\r\n       mov      esi, eax\r\n       lea      rcx, [rbp-98H]\r\n       call     [CORINFO_HELP_JIT_PINVOKE_END]\r\n       mov      eax, esi\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 7.00\r\nG_M36390_IG05:\r\n       lea      rsp, [rbp-38H]\r\n       pop      rbx\r\n       pop      rsi\r\n       pop      rdi\r\n       pop      r12\r\n       pop      r13\r\n       pop      r14\r\n       pop      r15\r\n       pop      rbp\r\n       ret      \r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 5.50\r\n\r\n; Total bytes of code 91, prolog size 31, PerfScore 39.85, instruction count 31, allocated bytes for code 91 (MethodHash=a66071d9) for method ILStubClass:IL_STUB_PInvoke():int\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/51087/comments",
    "author": "benaadams",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2021-04-11T21:09:22Z",
        "body": "This is part of the GC transition. The registers have to be pushed to allow GC stackwalk to start.\r\n\r\nIt is why SuppressGCTransitionAttribute was invented, but you have to be very careful to only use it for cases where it is safe to do it."
      },
      {
        "user": "jkotas",
        "created_at": "2021-04-11T21:13:19Z",
        "body": "For reference, the code that does this is under `compMethodRequiresPInvokeFrame`."
      }
    ]
  },
  {
    "number": 49993,
    "title": "After adding friendly name to x509certificate2 on exporting public bytes , we are loosing friendly name",
    "created_at": "2021-03-22T12:30:32Z",
    "closed_at": "2022-03-05T00:44:48Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/49993",
    "body": "<!--This is just a template - feel free to delete any and all of it and replace as appropriate.-->\r\n\r\n### Description\r\n\r\n* While creating certificate , i set friendly name. But upon exporting public bytes that value is lost\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on - netcoreapp31\r\nvar crtFileName = @\"D:\\test-dps-sw\\9988770_public.pem\";\r\nX509Certificate2 x509 = new X509Certificate2(crtFileName);\r\nvar publicKeyBytes = x509 .Export(X509ContentType.Cert);\r\n\r\nUpon creating certificate from public key bytes i find friendly name feild empty.\r\n\r\nI there any way to carry that value, or else any other key where i can set and carry value\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/49993/comments",
    "author": "prohith14",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2021-03-22T12:30:39Z",
        "body": "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @GrabYourPitchForks\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n<!--This is just a template - feel free to delete any and all of it and replace as appropriate.-->\r\n\r\n### Description\r\n\r\n* While creating certificate , i set friendly name. But upon exporting public bytes that value is lost\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on - netcoreapp31\r\nvar crtFileName = @\"D:\\test-dps-sw\\9988770_public.pem\";\r\nX509Certificate2 x509 = new X509Certificate2(crtFileName);\r\nvar publicKeyBytes = x509 .Export(X509ContentType.Cert);\r\n\r\nUpon creating certificate from public key bytes i find friendly name feild empty.\r\n\r\nI there any way to carry that value, or else any other key where i can set and carry value\r\n\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>prohith14</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Security`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>"
      },
      {
        "user": "vcsjones",
        "created_at": "2021-03-22T12:51:13Z",
        "body": "The friendly name is a Windows-specific concept that is stored as metadata along side the certificate when it is in the certificate store. It does not actually change a property on the certificate itself, which is why it  is \"lost\" when it is exported.\n\nSince changing a certificate after it's creation would invalidate the signature, this couldn't be \"added\" either.\n\nI think the best you can do is to export the certificate, and read the FriendlyName from the certificate as well and save it in a separate file. When importing it, read the certificate, then read the file with the friendly name and set it again."
      },
      {
        "user": "prohith14",
        "created_at": "2021-03-22T13:13:25Z",
        "body": "We are using certificate to authenticate with azure dps and provision it to azure iot hub. The common name of certificate will be device id in iot hub. So i cant use that field to store this additional property.\r\nCan you please guide if i can use any other field to save a string value so that i can read it from certificate public pem"
      },
      {
        "user": "bartonjs",
        "created_at": "2021-03-22T15:59:19Z",
        "body": "> Can you please guide if i can use any other field to save a string value so that i can read it from certificate public pem\r\n\r\nThere isn't anything you can set that would appear in such a file.  A certificate is just the data that the issuer signed plus the signature, there's no room for post-issuance data."
      }
    ]
  },
  {
    "number": 49562,
    "title": "string.Format() returns different results cross platforms.",
    "created_at": "2021-03-12T23:59:24Z",
    "closed_at": "2021-03-13T00:19:08Z",
    "labels": [
      "question",
      "area-System.Globalization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/49562",
    "body": "### Description\r\nConsider the following code.\r\n```\r\n    class Program\r\n    {\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar ci = new CultureInfo(\"ar\"); // Arabic Culture.\r\n\t\t\tThread.CurrentThread.CurrentCulture = ci;\r\n\t\t\tThread.CurrentThread.CurrentUICulture = ci;\r\n\t\t\tfloat a = 1.2343f;\r\n\t\t\t//Turn a float number into a string with the format X.XXXXX\r\n\t\t\tstring floatNumberString = string.Format(\"{0:0.######}\", a);\r\n\t\t\tConsole.WriteLine(\"float number string presentation: \" + floatNumberString);\r\n\t\t\tConsole.WriteLine(\"is ASCII string ? \" + IsAsciiString(floatNumberString));\r\n\t\t}\r\n\t\tpublic static bool IsAsciiString(string input)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < input.Length; ++i)\r\n\t\t\t{\r\n\t\t\t\tchar c = input[i];\r\n\t\t\t\tif (((int)c) > 127)\r\n\t\t\t\t{\r\n\t\t\t\t\tConsole.WriteLine(\"Character '\" + c + \"'(hex value \" + ((int)c).ToString(\"X\") +  \") + at index \" + i + \" is not ASCII\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n```\r\nIf running in the code in windows and linux, we get 2 different outputs:\r\n\r\nWindows Output:\r\n```\r\nfloat number string presentation: 1.2343\r\nis ASCII string ? ? True\r\n```\r\nLinux Output:\r\n```\r\nfloat number string presentation: 1٫2343\r\nCharacter '٫'(hex value 66B) + at index 1 is not ASCII\r\nis ASCII string ? ? False\r\n```\r\nThe call string.Format(\"{0:0.######}\", a)  under “Arabic” culture, yields two different string interpretations of the same float number under 2 different platforms (Window vs Unix). In windows, under “Arabic” culture, the decimal point is converted into an ascii character (.colon). In contrast, in Linux, the decimal point is converted into an unicode character (٫ Arabic decimal separator).\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? .Net Core 3.1\r\n* What OS and version, and what distro if applicable? Windows and Linux.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/49562/comments",
    "author": "vuqtran88",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2021-03-12T23:59:30Z",
        "body": "Tagging subscribers to this area: @tarekgh, @safern\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n### Description\r\nConsider the following code.\r\n```\r\n    class Program\r\n    {\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar ci = new CultureInfo(\"ar\"); // Arabic Culture.\r\n\t\t\tThread.CurrentThread.CurrentCulture = ci;\r\n\t\t\tThread.CurrentThread.CurrentUICulture = ci;\r\n\t\t\tfloat a = 1.2343f;\r\n\t\t\t//Turn a float number into a string with the format X.XXXXX\r\n\t\t\tstring floatNumberString = string.Format(\"{0:0.######}\", a);\r\n\t\t\tConsole.WriteLine(\"float number string presentation: \" + floatNumberString);\r\n\t\t\tConsole.WriteLine(\"is ASCII string ? \" + IsAsciiString(floatNumberString));\r\n\t\t}\r\n\t\tpublic static bool IsAsciiString(string input)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < input.Length; ++i)\r\n\t\t\t{\r\n\t\t\t\tchar c = input[i];\r\n\t\t\t\tif (((int)c) > 127)\r\n\t\t\t\t{\r\n\t\t\t\t\tConsole.WriteLine(\"Character '\" + c + \"'(hex value \" + ((int)c).ToString(\"X\") +  \") + at index \" + i + \" is not ASCII\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n```\r\nIf running in the code in windows and linux, we get 2 different outputs:\r\n\r\nWindows Output:\r\n```\r\nfloat number string presentation: 1.2343\r\nis ASCII string ? ? True\r\n```\r\nLinux Output:\r\n```\r\nfloat number string presentation: 1٫2343\r\nCharacter '٫'(hex value 66B) + at index 1 is not ASCII\r\nis ASCII string ? ? False\r\n```\r\nThe call string.Format(\"{0:0.######}\", a)  under “Arabic” culture, yields two different string interpretations of the same float number under 2 different platforms (Window vs Unix). In windows, under “Arabic” culture, the decimal point is converted into an ascii character (.colon). In contrast, in Linux, the decimal point is converted into an unicode character (٫ Arabic decimal separator).\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? .Net Core 3.1\r\n* What OS and version, and what distro if applicable? Windows and Linux.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>vuqtran88</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-System.Globalization`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>"
      },
      {
        "user": "tarekgh",
        "created_at": "2021-03-13T00:19:08Z",
        "body": ".NET is using the underlying OS to get the Globalization data which is used in the number formatting. On Windows it uses `NLS` Windows APIs and on Linux it uses `ICU` library. So, this is expected behavior to see differences between platforms. \r\n\r\nIn .NET 5.0, we are using `ICU` library on Windows too and should get consistent behavior across the platforms. I would recommend you migrate to use .NET 5.o if you want the consistency. `ICU` is using the CLDR data which is picked up from Unicode Standard. The behavior you get when using `ICU` would be the desired behavior according to Unicode standard. \r\n\r\nLet me know if you have any more questions. Thanks for reporting the issue. "
      }
    ]
  },
  {
    "number": 47386,
    "title": "Question about the garbage collector and instance fields",
    "created_at": "2021-01-24T16:27:22Z",
    "closed_at": "2021-01-24T17:16:08Z",
    "labels": [
      "question",
      "area-GC-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/47386",
    "body": "```c#\r\nprivate static C _strongReference = new C();\r\n\r\nclass C\r\n{\r\n    private LargeObject _field = new LargeObject();\r\n}\r\n```\r\n\r\nFrom what I know about the garbage collector, the object referred to by `_strongReference` will never be collected as long as `_strongReference` doesn't change, regardless of whether or not any other code references `_strongReference` (please correct me if I'm wrong). However, the `LargeObject` referred to by `_field` is only ever referenced in the field initializer of `C`. Does that allow the object referred to by `_strongReference._field` to be eligible for garbage collection even though `_strongReference` is not?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/47386/comments",
    "author": "WizardBrony",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2021-01-24T16:27:29Z",
        "body": "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\n```c#\r\nprivate static C _strongReference = new C();\r\n\r\nclass C\r\n{\r\n    private LargeObject _field = new LargeObject();\r\n}\r\n```\r\n\r\nFrom what I know about the garbage collector, the object referred to by `_strongReference` will never be collected as long as `_strongReference` doesn't change, regardless of whether or not any other code references `_strongReference` (please correct me if I'm wrong). However, the `LargeObject` referred to by `_field` is only ever referenced in the field initializer of `C`. Does that allow the object referred to by `_strongReference._field` to be eligible for garbage collection even though `_strongReference` is not?\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>WizardBrony</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-GC-coreclr`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>"
      },
      {
        "user": "stephentoub",
        "created_at": "2021-01-24T16:49:53Z",
        "body": "> Does that allow the object referred to by _strongReference._field to be eligible for garbage collection even though _strongReference is not?\r\n\r\nNo. If an instance C is rooted, whatever is referenced by its _field field will be,  too."
      }
    ]
  },
  {
    "number": 46661,
    "title": "Question about memory barriers in .NET",
    "created_at": "2021-01-07T01:06:26Z",
    "closed_at": "2021-01-22T16:55:25Z",
    "labels": [
      "question",
      "area-System.Threading",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/46661",
    "body": "In .NET, there are some APIs that explicitly mention the use of memory barriers in their implementation (`Volatile`, `Interlocked`, `Thread.MemoryBarrier`, etc.). But then there are other APIs (such as `ThreadPool.QueueUserWorkItem`, `Task.Run`, and `Threading.Timer`) where it's generally assumed that there is an implicit memory barrier, but the API doesn't explicitly state this. For example:\r\n\r\n```c#\r\nprivate int _i;\r\n\r\npublic void Method()\r\n{\r\n    _i = 1;\r\n    var timer = new Timer(_ => Console.WriteLine(_i), null, 0, -1); //Guaranteed to print 1?\r\n}\r\n```\r\n\r\nMore generally, is there somehow a way to tell which APIs guarantee a memory barrier and which don't? I have a hard time blindly _trusting_ without strong API guarantees to fall back on, especially knowing that implementations are allowed change over time.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/46661/comments",
    "author": "WizardBrony",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2021-01-07T14:37:09Z",
        "body": "In order to successfully achieve the defined purpose of the API, any method (Timer's ctor, ThreadPool.QueueUserWorkItem, Task.Run, etc.) which queues work necessarily incurs the appropriate barriers to ensure that the queued work can read any state set by the thread doing the queueing prior to the queueing.  How it achieves that is an implementation detail, but that it achieves it is just necessary for the method to be functionally correct.\r\n\r\n> //Guaranteed to print 1?\r\n\r\nYes (unless some other code changes _i to something else before the callback actually runs)."
      },
      {
        "user": "WizardBrony",
        "created_at": "2021-01-07T15:12:16Z",
        "body": "@stephentoub Okay, I can accept that. Does this rationale also apply to all concurrent APIs? For example:\r\n\r\n```c#\r\nprivate class C\r\n{\r\n    public int I;\r\n}\r\n\r\nprivate readonly ConcurrentDictionary<int, C> _dictionary = new ConcurrentDictionary<int, C>();\r\n\r\npublic void Thread1()\r\n{\r\n    var c = new C();\r\n    c.I = 1;\r\n\r\n    // No memory barrier\r\n\r\n    _dictionary.TryAdd(0, c);\r\n}\r\n\r\npublic void Thread2()\r\n{\r\n    if (_dictionary.TryGetValue(0, out var c))\r\n        Console.WriteLine(c.I); // Guaranteed to print 1?\r\n}\r\n```"
      },
      {
        "user": "stephentoub",
        "created_at": "2021-01-07T16:33:18Z",
        "body": "> Does this rationale also apply to all concurrent APIs?\r\n\r\nYes"
      },
      {
        "user": "WizardBrony",
        "created_at": "2021-01-07T16:38:16Z",
        "body": "@stephentoub Thank you very much for your time."
      },
      {
        "user": "WizardBrony",
        "created_at": "2021-01-22T16:43:43Z",
        "body": "@stephentoub I'm really sorry to bring this up again, but if you could calm my paranoia about one other API I'd really appreciate it. Is `CancellationTokenSource.Cancel` guaranteed to incur a barrier such that all state changes are visible prior to the request for cancellation?"
      },
      {
        "user": "stephentoub",
        "created_at": "2021-01-22T16:55:25Z",
        "body": "> Is CancellationTokenSource.Cancel guaranteed to incur a barrier such that all state changes are visible prior to the request for cancellation?\r\n\r\nYes."
      }
    ]
  },
  {
    "number": 48294,
    "title": "Facilitating convention based configuration loading",
    "created_at": "2020-11-25T03:26:23Z",
    "closed_at": "2024-11-17T11:11:47Z",
    "labels": [
      "question",
      "area-Extensions-Configuration"
    ],
    "url": "https://github.com/dotnet/runtime/issues/48294",
    "body": "I'm having a difficult time piecing together the correct approach from docs for something I'm trying to set up in a class library I'm making.  \r\n\r\nIn point form, my objectives are:\r\n\r\n - I would like to be able to make use of `IOptions<MyOptions>` within my extension method to configure other services.\r\n - I've discovered that `IConfiguration` is not normally configured as an injected service, and I'd love to avoid doing such if possible\r\n - I would like my `IOptions<MyOptions>` to be populated with defaults\r\n - I would like to avoid forcing people using my extension method to provide either a string key for where to look in `IConfiguration` or from having to provide `IConfiguration`.\r\n   - I do however want to give them the option to provide overrides through `IConfigurationBuilder`\r\n\r\n---\r\n\r\nApologies in advance although this seems like something that is not easy to piece together through the docs.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/48294/comments",
    "author": "atrauzzi",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2021-02-15T08:25:56Z",
        "body": "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nI'm having a difficult time piecing together the correct approach from docs for something I'm trying to set up in a class library I'm making.  \r\n\r\nIn point form, my objectives are:\r\n\r\n - I would like to be able to make use of `IOptions<MyOptions>` within my extension method to configure other services.\r\n - I've discovered that `IConfiguration` is not normally configured as an injected service, and I'd love to avoid doing such if possible\r\n - I would like my `IOptions<MyOptions>` to be populated with defaults\r\n - I would like to avoid forcing people using my extension method to provide either a string key for where to look in `IConfiguration` or from having to provide `IConfiguration`.\r\n   - I do however want to give them the option to provide overrides through `IConfigurationBuilder`\r\n\r\n---\r\n\r\nApologies in advance although this seems like something that is not easy to piece together through the docs.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>atrauzzi</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Extensions-Configuration`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>"
      }
    ]
  },
  {
    "number": 44974,
    "title": "TcpClient.ConnectAsync on Threadpool Thread Deadlocks if Network Down",
    "created_at": "2020-11-20T00:26:58Z",
    "closed_at": "2020-11-20T17:44:55Z",
    "labels": [
      "question",
      "area-System.Threading"
    ],
    "url": "https://github.com/dotnet/runtime/issues/44974",
    "body": "### Description\r\n\r\nIf `TcpClient.ConnectAsync` is called from a threadpool thread, when the network is down, waiting on the task object will cause a  deadlock. \r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? dotnetcore 3.1\r\n* What OS and version, and what distro if applicable? Windows 10, x64, 20H2\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n* Do you know whether it is specific to that configuration? N/A\r\n* If you're using Blazor, which web browser(s) do you see this issue in? N/A\r\n\r\n\r\n### Regression?\r\n\r\nUnsure if this worked in previous builds. \r\n\r\n### Other information\r\n\r\nHere's is some sample code that demonstrates the problem:\r\n```C#\r\nusing System;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\n\r\nnamespace DotNetNetworkingBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Disconnect from the network before running this test.\");\r\n            System.Console.WriteLine(\"Otherwise this will not repro\");\r\n\r\n            // we're going to have the main thread do things while the behavior happens on\r\n            // a background thread, to simulate what we see in our code, as the issue \r\n            // happens when the method is fired from a Process exit event handler.\r\n\r\n            Task.Factory.StartNew(FireSyncCompletionCallback);\r\n            Task.Factory.StartNew(FireAsyncCompletionCallback);\r\n\r\n\r\n            for (int i = 0; i < 30; i++)\r\n            {\r\n                Thread.Sleep(1000);\r\n                System.Console.WriteLine($\"Program has been running for {i} seconds...\");\r\n            }\r\n\r\n            System.Console.WriteLine(\"Program Completed\");\r\n\r\n        }\r\n\r\n        static void FireSyncCompletionCallback()\r\n        {\r\n            using (var client = new TcpClient())\r\n            {\r\n                // this does not work, and deadlocks on a worker thread - no output is generated.\r\n                // (this is done here because there is no way to set a connection timeout)\r\n                if (!client.ConnectAsync(\"bing.com\", 80).Wait(3000))\r\n                {\r\n                    System.Console.WriteLine(\"SYNC: Failed to connect before timeout\");\r\n                }\r\n                else {\r\n                    System.Console.WriteLine(\"SYNC: Connection successful!\");\r\n                }\r\n            }\r\n        }\r\n\r\n        static async void FireAsyncCompletionCallback()\r\n        {\r\n            using (var client = new TcpClient())\r\n            {\r\n                // this works, and does not deadlock (though it's less readable)\r\n                // it also does not reach the time out - it detects that a problem occurred immediately.\r\n                await Task.WhenAny(new[] {\r\n                    client.ConnectAsync(\"bing.com\", 80),\r\n                    Task.Delay(3000)\r\n                });\r\n\r\n                if (!client.Connected)\r\n                {\r\n                    System.Console.WriteLine(\"ASYNC: Failed to connect before timeout\");\r\n                }\r\n                else {\r\n                    System.Console.WriteLine(\"ASYNC: Connection successful!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPart of me suspects this might have to do with some async context, but I can't find anything in the documentation that would indicate this. \r\n\r\nThe code works as expected (with both callbacks successfully connecting and printing they connected) if the network is working normally. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/44974/comments",
    "author": "iUnknwn",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2020-11-20T17:44:14Z",
        "body": "If the network is down, ConnectAsync fails.  The Task it returns ends in a faulted state.  In your sync case, Wait then throws an exception, which is why you don't see anything output after the Wait call, and the exception gets swallowed by the Task you queued with StartNew and never join with.  In your async case, you see output because you're ignoring the Task returned from ConnectAsync entirely, and always printing something out once the Delay(3000) completes."
      }
    ]
  },
  {
    "number": 44623,
    "title": "ThrowAsyncIOInProgress invoked from time to time",
    "created_at": "2020-11-13T01:05:17Z",
    "closed_at": "2020-11-13T02:31:59Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/44623",
    "body": "### Description\r\nCalling into the following method (single threaded) throws exception from time to time. Please help understanding why:\r\n```csharp\r\n        public Task SerializeAsync(IEnumerable<SampleActivity> samples, string destinationFilePath)\r\n        {\r\n            using StreamWriter file = File.CreateText(destinationFilePath);\r\n            return file.WriteAsync(JsonConvert.SerializeObject(samples));\r\n        }\r\n```\r\n\r\nCall stack:\r\n```shell\r\n2020-11-11 17:18:12.819 -08:00 [VRB] System.InvalidOperationException: The stream is currently in use by a previous operation on the stream.\r\n   at System.IO.StreamWriter.ThrowAsyncIOInProgress()\r\n   at System.IO.StreamWriter.Dispose(Boolean disposing)\r\n   at System.IO.TextWriter.Dispose()\r\n   at Project.Client.SampleActivitySerializer.SerializeAsync(IEnumerable`1 samples, String destinationFilePath) in D:\\Repos\\Project\\src\\SampleActivitySerializer.cs:line 14\r\n   at Project.Client.ServiceProfilerProvider.PostStopProcessAsync(PostStopOptions e) in D:\\Repos\\Project\\src\\Provider.cs:line 251\r\n```\r\n\r\n\r\n### Configuration\r\n.NET Core 3.1;\r\nOS: x64, Windows / x64 Ubuntu 16.04 LTS\r\n* Do you know whether it is specific to that configuration?\r\nNot as I know.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/44623/comments",
    "author": "xiaomi7732",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2020-11-13T02:31:39Z",
        "body": "The code you wrote is basically:\r\n```C#\r\nStreamWriter file = File.CreateText(destinationFilePath);\r\nTask t = file.WriteAsync(JsonConvert.SerializeObject(samples));\r\nfile.Dispose();\r\nreturn t;\r\n```\r\nIn other words, you're Dispose'ing of the file while the async operation is still in flight.\r\n\r\nI think you likely wanted this instead:\r\n```C#\r\n        public async Task SerializeAsync(IEnumerable<SampleActivity> samples, string destinationFilePath)\r\n        {\r\n            using StreamWriter file = File.CreateText(destinationFilePath);\r\n            return await file.WriteAsync(JsonConvert.SerializeObject(samples));\r\n        }\r\n```"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-11-13T02:32:18Z",
        "body": "Closing as answered.  Please feel free to re-open if there's still an issue to be discussed. Thanks."
      },
      {
        "user": "xiaomi7732",
        "created_at": "2020-11-13T18:26:49Z",
        "body": "Thanks @stephentoub for the pointer. I thought the state machine would be the same between those 2, they aren't.\r\n\r\nThis is notes just for myself:\r\nThe state machine, on the caller, for the original code looks like this: no dispose() involved because it is called inside  SerializeAsync(), and as pointed out, at that moment, the task, aka WriteAsyncTask, is not fully completed yet:\r\n\r\n```csharp\r\n\tprivate sealed class <Caller>d__1 : IAsyncStateMachine\r\n\t{\r\n\t\tpublic int <>1__state;\r\n\r\n\t\tpublic AsyncTaskMethodBuilder <>t__builder;\r\n\r\n\t\tpublic Program <>4__this;\r\n\r\n\t\tprivate string <fileName>5__1;\r\n\r\n\t\tprivate SampleActivitySerializer <target>5__2;\r\n\r\n\t\tprivate ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;\r\n\r\n\t\tprivate void MoveNext()\r\n\t\t{\r\n\t\t\tint num = <>1__state;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tConfiguredTaskAwaitable.ConfiguredTaskAwaiter awaiter;\r\n\t\t\t\tif (num != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t<fileName>5__1 = null;\r\n\t\t\t\t\t<target>5__2 = new SampleActivitySerializer();\r\n\t\t\t\t\tawaiter = <target>5__2.SerializeAsync(GenSample(), <fileName>5__1).ConfigureAwait(false).GetAwaiter();\r\n\t\t\t\t\tif (!awaiter.IsCompleted)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum = (<>1__state = 0);\r\n\t\t\t\t\t\t<>u__1 = awaiter;\r\n\t\t\t\t\t\t<Caller>d__1 stateMachine = this;\r\n\t\t\t\t\t\t<>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tawaiter = <>u__1;\r\n\t\t\t\t\t<>u__1 = default(ConfiguredTaskAwaitable.ConfiguredTaskAwaiter);\r\n\t\t\t\t\tnum = (<>1__state = -1);\r\n\t\t\t\t}\r\n\t\t\t\tawaiter.GetResult();\r\n\t\t\t}\r\n\t\t\tcatch (Exception exception)\r\n\t\t\t{\r\n\t\t\t\t<>1__state = -2;\r\n\t\t\t\t<fileName>5__1 = null;\r\n\t\t\t\t<target>5__2 = null;\r\n\t\t\t\t<>t__builder.SetException(exception);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t<>1__state = -2;\r\n\t\t\t<fileName>5__1 = null;\r\n\t\t\t<target>5__2 = null;\r\n\t\t\t<>t__builder.SetResult();\r\n\t\t}\r\n\t\tvoid IAsyncStateMachine.MoveNext()\r\n\t\t{\r\n\t\t\t//ILSpy generated this explicit interface implementation from .override directive in MoveNext\r\n\t\t\tthis.MoveNext();\r\n\t\t}\r\n\r\n\t\t[DebuggerHidden]\r\n\t\tprivate void SetStateMachine(IAsyncStateMachine stateMachine)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tvoid IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)\r\n\t\t{\r\n\t\t\t//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine\r\n\t\t\tthis.SetStateMachine(stateMachine);\r\n\t\t}\r\n\t}\r\n```\r\n\r\nWrite it the other way, the dispose is called on 'final' statement, after all the operation is done, right before returning.\r\n\r\n```csharp\r\n[CompilerGenerated]\r\nprivate sealed class <SerializeAsync2>d__1 : IAsyncStateMachine\r\n{\r\n\tpublic int <>1__state;\r\n\r\n\tpublic AsyncTaskMethodBuilder <>t__builder;\r\n\r\n\tpublic IEnumerable<SampleActivity> samples;\r\n\r\n\tpublic string destinationFilePath;\r\n\r\n\tpublic SampleActivitySerializer <>4__this;\r\n\r\n\tprivate StreamWriter <file>5__1;\r\n\r\n\tprivate TaskAwaiter <>u__1;\r\n\r\n\tprivate void MoveNext()\r\n\t{\r\n\t\tint num = <>1__state;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (num != 0)\r\n\t\t\t{\r\n\t\t\t\t<file>5__1 = File.CreateText(destinationFilePath);\r\n\t\t\t}\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tTaskAwaiter awaiter;\r\n\t\t\t\tif (num != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tawaiter = <file>5__1.WriteAsync(JsonConvert.SerializeObject(samples)).GetAwaiter();\r\n\t\t\t\t\tif (!awaiter.IsCompleted)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum = (<>1__state = 0);\r\n\t\t\t\t\t\t<>u__1 = awaiter;\r\n\t\t\t\t\t\t<SerializeAsync2>d__1 stateMachine = this;\r\n\t\t\t\t\t\t<>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tawaiter = <>u__1;\r\n\t\t\t\t\t<>u__1 = default(TaskAwaiter);\r\n\t\t\t\t\tnum = (<>1__state = -1);\r\n\t\t\t\t}\r\n\t\t\t\tawaiter.GetResult();\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif (num < 0 && <file>5__1 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t((IDisposable)<file>5__1).Dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception exception)\r\n\t\t{\r\n\t\t\t<>1__state = -2;\r\n\t\t\t<file>5__1 = null;\r\n\t\t\t<>t__builder.SetException(exception);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t<>1__state = -2;\r\n\t\t<file>5__1 = null;\r\n\t\t<>t__builder.SetResult();\r\n\t}\r\n\r\n\tvoid IAsyncStateMachine.MoveNext()\r\n\t{\r\n\t\t//ILSpy generated this explicit interface implementation from .override directive in MoveNext\r\n\t\tthis.MoveNext();\r\n\t}\r\n\r\n\t[DebuggerHidden]\r\n\tprivate void SetStateMachine(IAsyncStateMachine stateMachine)\r\n\t{\r\n\t}\r\n\r\n\tvoid IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)\r\n\t{\r\n\t\t//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine\r\n\t\tthis.SetStateMachine(stateMachine);\r\n\t}\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 44592,
    "title": "[Question] - Equals method on ImmutableList",
    "created_at": "2020-11-12T13:55:47Z",
    "closed_at": "2020-12-09T17:16:46Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/44592",
    "body": "I would like to ask, why doesn't `ImmutableList` implement `Equals` as `SequenceEquals`? \r\n\r\n```CSharp\r\nvar a = ImmutableList.Create(42);\r\nvar b = ImmutableList.Create(42);\r\n\r\n// This prints False\r\nConsole.WriteLine(a.Equals(b)); \r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/44592/comments",
    "author": "PatrikBak",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-11-12T13:55:51Z",
        "body": "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.<details>\n  <hr>\n  <b>Issue meta data</b>\n  <table>\n  <tr>\n    <th align=\"left\" rowspan=\"2\">Issue content:</th>\n  </tr>\n    <td rowspan=\"2\">\n    \n    I would like to ask, why doesn't `ImmutableList` implement `Equals` as `SequenceEquals`? \r\n\r\n```CSharp\r\nvar a = ImmutableList.Create(42);\r\nvar b = ImmutableList.Create(42);\r\n\r\n// This prints False\r\nConsole.WriteLine(a.Equals(b)); \r\n```\n    \n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\">Issue author:</th>\n    <td>PatrikBak</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n    \n    `area-System.Collections`, `untriaged`\n    \n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n  </table>\n  </details>"
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2020-11-12T14:16:21Z",
        "body": "AFAIK all collections either mutable or immutable use reference equality. Arguably immutable collections could have implemented structural equality (F# immutable collections do this), however adding it at this point would have been a breaking change."
      },
      {
        "user": "SingleAccretion",
        "created_at": "2020-11-12T16:29:55Z",
        "body": "If I remember correctly, the first preview versions of immutable collections did actually use structural equality, but I guess at the time the feedback was that it wasn't really the behavior people wanted and so it was reverted back to reference equality.\r\n\r\nInterestingly enough, `ImmutableArray<T>` does actually support structural equality - if you cast it to `IStructuralEquatable` and use the `IStructuralEquatable.Equals` method. It is incredibly slow though so you should probably not do that."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2020-11-12T17:16:05Z",
        "body": "Interesting. I wonder why we've only implemented this in `ImmutableArray<T>`. I suppose it wouldn't be entirely unreasonable to do this with the other immutable collections. @stephentoub  thoughts?"
      },
      {
        "user": "jkotas",
        "created_at": "2020-11-13T07:03:16Z",
        "body": "> I wonder why we've only implemented this in ImmutableArray<T>\r\n\r\nTo match `System.Array`."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2020-12-09T17:16:46Z",
        "body": "Closing since the question has been answered."
      }
    ]
  },
  {
    "number": 43433,
    "title": "HttpClient Async calls still block the current (UI) thread",
    "created_at": "2020-10-15T06:28:36Z",
    "closed_at": "2020-10-15T11:18:48Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/43433",
    "body": "### Description\r\n\r\nwhen I perform an async call on HttpClient from the (Winforms) UI thread my UI gets blocked. its best noticed when moving the window around.\r\n\r\nIf I wrap the call in Task.Run the app runs smooth. \r\n\r\n```csharp\r\nvar items = await HttpClient.GetStuffAsync();\r\n\r\nvs \r\n\r\nvar items = await task.Run((() => HttpClient.GetStuffAsync());\r\n```\r\n\r\nmy expectaion is that the async methods dont block the current thread.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/43433/comments",
    "author": "JanEggers",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-10-15T06:28:45Z",
        "body": "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "Wraith2",
        "created_at": "2020-10-15T08:20:22Z",
        "body": "You aren't using `ConfigureAwait(false)` prior to waiting the task from `HttpClient.GetStuffAsync()` and because it's winforms there will be a synchronisation context active so the task scheduler will attempt to push completions back to the main thread. Try with the configuration and see if it helps."
      },
      {
        "user": "gfoidl",
        "created_at": "2020-10-15T08:39:18Z",
        "body": "> because it's winforms there will be a synchronisation context\r\n\r\nIn combination with `ConfigureAwait(false)` it can give you a `System.InvalidOperationException`, if in the continuation you'll access controls (UI thread).\r\n\r\n> the async methods dont block the current thread.\r\n\r\nI didn't investigate the problem, but it seems as the async request doesn't block the UI-thread, but the continuation / the processing of the results (e.g. a huge string).\r\n\r\nTry to just use the status-code from the response and not the actual content, then it runs smooth in my demo. \r\nWith a huge content from the response it's smooth while the fetch happens, then it starts to block the UI-thread."
      },
      {
        "user": "Wraith2",
        "created_at": "2020-10-15T08:58:24Z",
        "body": "> In combination with ConfigureAwait(false) it can give you a System.InvalidOperationException, if in the continuation you'll access controls (UI thread).\r\n\r\nYes, that is expected. You should follow the normal winforms rules around checking for and marshalling back to the UI thread. If you want long running work not to block the UI thread then it needs to happen on a separate thread and if you use a separate thread you have to be careful to push updates back onto the UI thread."
      },
      {
        "user": "JanEggers",
        "created_at": "2020-10-15T09:14:01Z",
        "body": "> You aren't using ConfigureAwait(false) prior to waiting the task from HttpClient.GetStuffAsync()\r\n\r\nI have a workaround that unblocks the UI.\r\n\r\nmy issue is why do I need workarounds?\r\n\r\nwhy doesnt the http client send my request in an async fashion and unblock the UI thread?\r\nbecause that is what having an async get method implies for me!\r\n\r\n> want long running work not to block the UI thread then it needs to happen on a separate thread\r\n\r\nwhat is the longrunning work that is happening in the ui thread? im using an async method!\r\n\r\n\r\n"
      },
      {
        "user": "Wraith2",
        "created_at": "2020-10-15T10:12:52Z",
        "body": "> why doesnt the http client send my request in an async fashion and unblock the UI thread?\r\nbecause that is what having an async get method implies for me!\r\n\r\nIt does, the waiting is done on another thread but any subsequent code will come back to the main thread. \r\nUnless you can demonstrate that the async wait itself (not following work) blocks the UI thread then this is working as expected to me.\r\n\r\nI think you need to do some reading into how async works and change your expectations from magical thinking to reality based. "
      },
      {
        "user": "kevingosse",
        "created_at": "2020-10-15T10:30:42Z",
        "body": "> Unless you can demonstrate that the async wait itself (not following work) blocks the UI thread then this is working as expected to me.\r\n\r\nIt wouldn't be the first time. I think in early versions the proxy was resolved synchronously before the actual asynchronous call.\r\n\r\n@JanEggers To stop any controversy, could you try changing your code to:\r\n\r\n```\r\n_ = HttpClient.GetStuffAsync();\r\n```\r\nand see if the issue persists? Basically removing any work, and just leaving the synchronous part of the HttpClient call.\r\n"
      },
      {
        "user": "JanEggers",
        "created_at": "2020-10-15T11:18:47Z",
        "body": "@kevingosse thx to pointing me in the right direction.\r\n\r\nthe issue was that the payload deserialization was blocking the ui thread.\r\n\r\nwith my additional task run the serialization happens in the background and without it in the ui.\r\n\r\nthat was not obvious to me as the code generated by nswag uses configurawait(false) so i thought deserializations happens in the background.\r\n\r\nanyway thx for clarifiing\r\n\r\n\r\n\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 42840,
    "title": "BigInteger losing precision (byte arrays)",
    "created_at": "2020-09-29T10:46:08Z",
    "closed_at": "2020-09-29T23:46:50Z",
    "labels": [
      "question",
      "area-System.Numerics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/42840",
    "body": "### Description\r\n\r\nBiginteger loses precision when working with byte arrays.\r\n`([bigint](([System.Net.IPAddress]\"::ffff:169.254.1.1\").GetAddressBytes()) -band [bigint](([System.Net.IPAddress]\"::ffff:169.254.0.0\").GetAddressBytes())).ToByteArray() -join \" \"`\r\nResults in:\r\n`0 0 0 0 0 0 0 0 0 0 255 255 169 254 0`\r\ninstead of\r\n`0 0 0 0 0 0 0 0 0 0 255 255 169 254 0 0`\r\n\r\nbecause of:\r\n`([IPAddress]'::ffff:169.254.0.0').GetAddressBytes() -join \" \"` returns `0 0 0 0 0 0 0 0 0 0 255 255 169 254 0 0`\r\nand `([BigInt]([IPAddress]'::ffff:169.254.0.0').GetAddressBytes()).ToByteArray() -join \" \"` loses that precision and only returns `0 0 0 0 0 0 0 0 0 0 255 255 169 254 0` instead.\r\n\r\nalternatively to \"fixing\" this precision issue in biginteger, also implementing the binary operators for [System.Byte[]] would work, so that a byte array doesn't need to be converted to a biginteger at all.\r\n\r\n### Configuration\r\n\r\ndotnet --list-runtimes\r\nMicrosoft.NETCore.App 3.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nOn x64 ArchLinux\r\n\r\n### Regression?\r\n\r\n<!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don't know, that's OK.\r\n  -->\r\n\r\n### Other information\r\n\r\n<!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  -->\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/42840/comments",
    "author": "agowa",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-09-29T10:46:14Z",
        "body": "Tagging subscribers to this area: @tannergooding, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2020-09-29T12:30:25Z",
        "body": "Is it losing \"leading\" zeros? If so, this should be by design. No precision is lost, because it doesn't preserve the whole content of original byte array."
      },
      {
        "user": "agowa",
        "created_at": "2020-09-29T13:14:09Z",
        "body": "they are not \"leading\" zeros in that sense, as it is a byte array and not a number.\r\nBut because of the conversion they are. The issue is when bigint is used for binary operations on byte arrays, there it loses precision.\r\n\r\nBecause of that I also provided a suggestion for an alternative fix by allowing binary operations on a byte array, removing the workaround of needing to convert to biginteger and avoiding the problem alltogether."
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2020-09-29T13:42:40Z",
        "body": "> as it is a byte array and not a number.\r\n\r\n`BitInteger` never sees byte array. It would, and should treat everything as number.\r\n\r\n> allowing binary operations on a byte array\r\n\r\nAre you looking for `System.Collections.BitArray`?"
      },
      {
        "user": "agowa",
        "created_at": "2020-09-29T13:53:48Z",
        "body": "No, as that also doesn't support binary operations. It also throws \"does not contain a method named 'op_BitwiseAnd'...\r\nAnd it cannot be converted back to a bytearray, what I need in order to convert it back to a system.net.ipaddress..."
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2020-09-29T14:08:42Z",
        "body": "> as that also doesn't support binary operations\r\n\r\nIt does supports, but in method form, not operator. You can just call the `Add` method on it. I'll file a separated api proposal for it.\r\n\r\n> And it cannot be converted back to a bytearray\r\n\r\nWell, it does support copy to. You can use it as a workaround.\r\n\r\nI understand your usage to do masking on IP addresses. But sorry, `BitInteger` shouldn't be the right class for it.\r\nIt's better to directly expose masking related members on `IPAddress` class."
      }
    ]
  },
  {
    "number": 45867,
    "title": "Debug Source in Visual Studio **Mac** 2019",
    "created_at": "2020-09-10T18:04:58Z",
    "closed_at": "2021-01-05T01:02:00Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr",
      "no-recent-activity"
    ],
    "url": "https://github.com/dotnet/runtime/issues/45867",
    "body": "Note - this is for **Mac**. (Visual Studio 2019)\r\n\r\nI am attempting to step into Asp .Net Web App code while debugging my web application but the function is called without stepping into it.  The project is using Microsoft.NetCore.App 3.1.8 and Microsoft.AspNetCore.App 3.1.8.\r\n\r\nI have enabled `\"Step into external code\"` in the IDE preferences.  Not sure what else I need to do.\r\n\r\nNote, on application start up the application logs print warnings such as:\r\n`Loaded '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.1.8/System.Private.CoreLib.dll'. Cannot find or open the PDB file.`\r\n\r\nI can find no instructions on finding/installing the pdb files for .net core for mac for visual studio, nor am I sure whether I need to run the symbols server and how.\r\n\r\nNot sure what else you'll need from me to work this issue out but I can provide.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/45867/comments",
    "author": "jdobrzanski",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-12-09T22:10:52Z",
        "body": "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nNote - this is for **Mac**. (Visual Studio 2019)\r\n\r\nI am attempting to step into Asp .Net Web App code while debugging my web application but the function is called without stepping into it.  The project is using Microsoft.NetCore.App 3.1.0 and Microsoft.AspNetCore.App 3.1.8.\r\n\r\nI have enabled `\"Step into external code\"` in the IDE preferences.  Not sure what else I need to do.\r\n\r\nNote, on application start up the application logs print warnings such as:\r\n`Loaded '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.1.8/System.Private.CoreLib.dll'. Cannot find or open the PDB file.`\r\n\r\nI can find no instructions on finding/installing the pdb files for .net core for mac for visual studio, nor am I sure whether I need to run the symbols server and how.\r\n\r\nNot sure what else you'll need from me to work this issue out but I can provide.\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>jdobrzanski</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>"
      },
      {
        "user": "marcpopMSFT",
        "created_at": "2020-12-09T22:11:27Z",
        "body": "I think VS for Mac tracks issues through developer community but moving to the runtime first in case it's an issue with their public debug source/symbols."
      },
      {
        "user": "tommcdon",
        "created_at": "2020-12-09T22:33:15Z",
        "body": "@mikem8361 potential symbol indexing issue on 3.1.8\r\ncc @sdmaclea @hoyosjs "
      },
      {
        "user": "hoyosjs",
        "created_at": "2020-12-10T03:40:29Z",
        "body": "I can't tell why. I just tried I can get the symbols for said runtime under the key `system.private.corelib.pdb/eb0677935c3f4219aef13ab117c20649FFFFFFFF/system.private.corelib.pdb`. I might continue taking a look as it's pretty similar to #45649"
      },
      {
        "user": "sdmaclea",
        "created_at": "2020-12-10T17:19:00Z",
        "body": "I was also having trouble with what appeared to be symbol server timeouts being reported as symbol not found.  I wondered at the time whether there were times when the symbol server got overloaded.  Perhaps near a release?"
      },
      {
        "user": "mikem8361",
        "created_at": "2020-12-14T17:51:44Z",
        "body": "@jdobrzanski are you still having this issue?  It may have been a transient symbol server problem?"
      },
      {
        "user": "ghost",
        "created_at": "2020-12-28T20:01:50Z",
        "body": "This issue has been automatically marked `no recent activity` because it has been marked as `needs author feedback` but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days. Any new comment (by anyone, not necessarily the author) will remove `no recent activity`"
      }
    ]
  },
  {
    "number": 41568,
    "title": "[Question] Static readonly fields and branch optimization",
    "created_at": "2020-08-30T17:03:50Z",
    "closed_at": "2020-08-31T01:20:25Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/41568",
    "body": "Does JIT optimize `if` and `switch` statements based on value of **static readonly** field? I understand that value will be available only at runtime, but once the type is loaded and cctor called then the static fields remain unchanged. In this case, constant propagation can be applied and dead branches can be removed.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/41568/comments",
    "author": "sakno",
    "comments": [
      {
        "user": "EgorBo",
        "created_at": "2020-08-30T17:16:16Z",
        "body": "@sakno yes it does, e.g.:\r\n```csharp\r\nclass Program\r\n{\r\n    static readonly int Field = 42;\r\n\r\n    static void Main()\r\n    {\r\n        for (int i = 0; i < 50; i++)\r\n        {\r\n            Test(); // promote (re-compile) Test to tier1 (from tier0) after 30th(?) iteration,\r\n                    // Program class is expected to be already\r\n                    // statically inited at that point\r\n            Thread.Sleep(10);\r\n        }\r\n\r\n        Console.ReadKey();\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static void Test()\r\n    {\r\n        if (Field == 43)\r\n            throw new ArgumentException();\r\n    }\r\n}\r\n```\r\nCodegen for `Test`:\r\n```asm\r\nG_M24707_IG01:\r\n                                                ;; bbWeight=1    PerfScore 0.00\r\nG_M24707_IG02:\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.00\r\n\r\n; Total bytes of code 1, prolog size 0, PerfScore 1.10, (MethodHash=009c9f7c) for method Program:Test()\r\n; ============================================================\r\n```\r\nUnfortunately it's not possible to see this effect on sharplab.io."
      },
      {
        "user": "sakno",
        "created_at": "2020-08-30T17:36:12Z",
        "body": "@EgorBo , thanks for clarification! Just a few additional questions:\r\n1. Does JIT eliminate the field from the memory associated with the class itself?\r\n1. What if declaring type is a generic class instantiated several times with a reference type as a generic argument? AFAIK, only value types used as generic argument force JIT to produce several specializations."
      },
      {
        "user": "RamType0",
        "created_at": "2020-08-30T19:43:51Z",
        "body": "Many thinkable optimization for field is disabled because of we could access it through reflection.\r\nWe could rewrite readonly fields by reflection.\r\nObviously,it is evil for almost any scenario,but I think it is useful for deserialization.\r\n\r\nIn contrast,optimization for function locals are very aggressive."
      },
      {
        "user": "jkotas",
        "created_at": "2020-08-31T01:19:28Z",
        "body": "> Does JIT eliminate the field from the memory associated with the class itself?\r\n\r\nIt does not. Note that the memory footprint of data structures that represent fields is a typically lot more than the memory footprint of the static field itself. Removing the field from the memory would not move the needle in the total memory consumption.\r\n\r\n> What if declaring type is a generic class instantiated several times with a reference type\r\n\r\nThis JIT optimization does not kick in this case."
      }
    ]
  },
  {
    "number": 40683,
    "title": "Crossgened assembly - Ready to Run disabled in log",
    "created_at": "2020-08-11T21:47:56Z",
    "closed_at": "2020-08-12T10:54:05Z",
    "labels": [
      "question",
      "area-ReadyToRun-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/40683",
    "body": ".NET Core 3.1\r\n\r\nFor our usecase we are generating dynamic assemblies with a custom written tool.\r\nTo improve the startup performance we want to use crossgen on the generated assemblies since the startup performance is a real neckbreaker in our use case since we are executing a lot of processes with the same assemblies over and over again. (Sadly we can't change that). So most of the time we run in a cold start scenario.\r\n\r\nExecuting crossgen.exe on our generated dlls works without problems but when we load these assemblies at runtime with Assembly.LoadFile, in the COMPlus_ReadyToRunLogFile all we see is \"Ready to Run disabled - collectible module: %asssemblypath%\" for all these dlls.\r\n\r\nWhy is ready to run disabled for these assemblies?\r\nIs there a solution for this problem?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/40683/comments",
    "author": "movedoa",
    "comments": [
      {
        "user": "davidwrighton",
        "created_at": "2020-08-11T22:49:53Z",
        "body": "ReadyToRun is disabled in the presence of collectible assemblies. The solution here would be to pass false for the `isCollectible` parameter to the constructor for the AssemblyLoadContext that you are using. Or, if you need ReadyToRun support for collectible assemblies, to write up a feature request. We may be able to consider such an issue for .NET 6."
      },
      {
        "user": "movedoa",
        "created_at": "2020-08-11T22:57:21Z",
        "body": "Thx for the quick answer.\n\nSo if understand you correctly, afaik assembly unloading requires iscollectible, so currently there is no way to unload a r2r assembly?"
      },
      {
        "user": "davidwrighton",
        "created_at": "2020-08-12T01:05:04Z",
        "body": "Correct. While it is certainly a feature that we could implement, and there are obvious reasons why it would be desirable, our current implementation does not support the combination of these features."
      }
    ]
  },
  {
    "number": 39689,
    "title": "[Might be Roslyn] Jit produces different ASM results when working with pointer[index] syntax opposed to star syntax",
    "created_at": "2020-07-21T08:11:28Z",
    "closed_at": "2020-07-21T11:43:45Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/39689",
    "body": "Well, this might be a Roslyn issue as such code actually produces different IL\r\nSo a code like this:\r\n```\r\nprivate static int Test(int* ptr, int width)\r\n{\r\n   return ptr[width + 1];\r\n}\r\n\r\nprivate static int Test2(int* ptr, int width)\r\n{\r\n   return *(ptr + width + 1);\r\n}\r\n\r\nGet worse when you add more code like this.\r\n\r\n```\r\nproduces different asm:\r\nI got this ASM using @EgorBo 's Disasmo\r\n\r\nThis is Test:\r\n```\r\nG_M56480_IG01:\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 0.00\r\nG_M56480_IG02:\r\n       inc      edx\r\n       movsxd   rax, edx\r\n       mov      eax, dword ptr [rcx+4*rax]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 2.50\r\nG_M56480_IG03:\r\n       ret\r\n```\r\n\r\nand this is Test2:\r\n```\r\nG_M8850_IG01:\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 0.00\r\nG_M8850_IG02:\r\n       movsxd   rax, edx\r\n       mov      eax, dword ptr [rcx+4*rax+4]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 2.25\r\nG_M8850_IG03:\r\n       ret\r\n```\r\n\r\nNote redundant inc and movsxd instructions\r\n\r\nAs I said before, this might be a Roslyn bug as IL code produces is different:\r\n\r\nThis is Test:\r\n```\r\nIL_0000: ldarg.0      // ptr\r\nIL_0001: ldarg.1      // width\r\n\r\n// this part is different\r\nIL_0002: ldc.i4.1 // (width + 1) * 4\r\nIL_0003: add\r\nIL_0004: conv.i\r\nIL_0005: ldc.i4.4\r\nIL_0006: mul\r\n\r\nIL_0007: add\r\nIL_0008: ldind.i4\r\nIL_0009: ret\r\n```\r\n \r\nAnd this is Test2:\r\n```\r\nTest2\r\nIL_0000: ldarg.0      // ptr\r\nIL_0001: ldarg.1      // width\r\n\r\n// this part is different\r\nIL_0002: conv.i // (width * 4 + 4)\r\nIL_0003: ldc.i4.4\r\nIL_0004: mul\r\nIL_0005: add\r\nIL_0006: ldc.i4.4\r\n\r\nIL_0007: add\r\nIL_0008: ldind.i4\r\nIL_0009: ret\r\n```\r\n\r\nSeen on .Net Core 3.1, .Net 5\r\nArch x64\r\n\r\nSlightly bigger case: \r\n```\r\n private static int Test(int* ptr, int width)\r\n{\r\n    return ptr[width + 1] + ptr[width + 2] + ptr[width + 3];\r\n}\r\n\r\n private static int Test2(int* ptr, int width)\r\n{\r\n    return *(ptr + width + 1) + *(ptr + width + 2) + *(ptr + width + 3);\r\n}\r\n```\r\n\r\nTest:\r\n```\r\nG_M56480_IG01:\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 0.00\r\nG_M56480_IG02:\r\n       lea      eax, [rdx+1]\r\n       movsxd   rax, eax\r\n       mov      eax, dword ptr [rcx+4*rax]\r\n       lea      r8d, [rdx+2]\r\n       movsxd   r8, r8d\r\n       add      eax, dword ptr [rcx+4*r8]\r\n       add      edx, 3\r\n       movsxd   rdx, edx\r\n       add      eax, dword ptr [rcx+4*rdx]\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 8.00\r\nG_M56480_IG03:\r\n       ret  \r\n```\r\n\r\nTest2:\r\n```\r\nG_M8850_IG01:\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 0.00\r\nG_M8850_IG02:\r\n       movsxd   rax, edx\r\n       mov      edx, dword ptr [rcx+4*rax+4]\r\n       add      edx, dword ptr [rcx+4*rax+8]\r\n       add      edx, dword ptr [rcx+4*rax+12]\r\n       mov      eax, edx\r\n\t\t\t\t\t\t;; bbWeight=1    PerfScore 6.50\r\nG_M8850_IG03:\r\n       ret\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/39689/comments",
    "author": "En3Tho",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-07-21T11:43:45Z",
        "body": "The two versions of your methods are not equivalent. They will have different behavior when `width` is `Int32.MaxValue`. In this case, `width + 1` will overflow in Test1 and so you will end up with `*ptr`, `ptr + width + 1` won't overflow in the second case and so you will end up with the expected `ptr + 2147483648`. It explains the different code you are seeing for the two versions."
      },
      {
        "user": "En3Tho",
        "created_at": "2020-07-21T13:36:42Z",
        "body": "@jkotas Thank you for answer. Is such behaviour intented? Code with index syntax is way more readable but suffers perf problems for general applications because of a corner case, am I wrong?"
      },
      {
        "user": "jkotas",
        "created_at": "2020-07-21T13:44:37Z",
        "body": "Yes, this is the expected behavior per C# language spec. You may consider using nint (new in C# 9). It should not have this problem."
      },
      {
        "user": "jkotas",
        "created_at": "2020-07-21T13:45:12Z",
        "body": "e.g.:\r\n```\r\nprivate static int Test(int* ptr, nint width)\r\n{\r\n   return ptr[width + 1];\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 39627,
    "title": "GetFromJsonAsync(HttpClient, String, Type, CancellationToken) Losing Track of its Type",
    "created_at": "2020-07-20T12:46:04Z",
    "closed_at": "2020-07-21T22:31:43Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/39627",
    "body": "Using GetFromJsonAsync(HttpClient, String, Type, CancellationToken) via Blazor hosted WebAssembly (Version 16.7.0 Preview 4.0 and WebAssembly v5.0.0-preview.6.20312.15.\r\n\r\nI don't want to use the `GetFromJsonAsync<TValue>(HttpClient, String, CancellationToken)` because I specifically don't want to make any explicit casts. The following only works successfully with the explicit cast, it won't return the result from the Json call without it.\r\n\r\nThis should work, since it knows it's a `List<Means>` type via the DataType parameter but does not:\r\n`Items = ((List<TableEntity>)await Server.GetFromJsonAsync(GetAPIs, DataType));`\r\n\r\nThis does, but the need for explicit casting takes away the power of the non TValue version of the function:\r\n\r\n`Items = ((List<Means>)await Server.GetFromJsonAsync(GetAPIs, DataType)).Cast<TableEntity>().ToList();`\r\n\r\nNote: GetAPIs a string with the correct path to the API on the controller. DataType is set as `typeof(List<Means>)` and Items is `List<TableEntity>`.\r\n\r\nPerhaps I'm missing something, but I expect the source code may have a bug.\r\n\r\nThank you in advance - EP\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/39627/comments",
    "author": "ericpincus",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-07-20T12:46:09Z",
        "body": "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "scalablecory",
        "created_at": "2020-07-21T15:26:32Z",
        "body": "The behavior you're seeing is that you can't cast a `List` of one type as a `List` of another type. This is happening outside of `GetFromJsonAsync`.\r\n\r\nAs an example of what you're seeing, this will fail for the same reason:\r\n```c#\r\nList<Means> listA = new List<Means>();\r\nList<TableEntity> listB = listA;\r\n```\r\n\r\nCalling `.Cast<TableEntity>.ToList()` is one correct solution, if you do need a `List`. Another, if you don't need to modify the list, is to use the covariant `IEnumerable` instead of `List`:\r\n\r\n```c#\r\nItems = ((IEnumerable<TableEntity>)await Server.GetFromJsonAsync(GetAPIs, DataType));\r\n```"
      },
      {
        "user": "ericpincus",
        "created_at": "2020-07-21T22:31:34Z",
        "body": "Thank you @scalablecory - IEnumerable is an acceptable workaround for my purposes."
      }
    ]
  },
  {
    "number": 39634,
    "title": "get datas from odbc with impala faild, can you tell me how to do ?",
    "created_at": "2020-07-20T06:54:35Z",
    "closed_at": "2020-07-21T04:48:09Z",
    "labels": [
      "question",
      "area-System.Data"
    ],
    "url": "https://github.com/dotnet/runtime/issues/39634",
    "body": "i use the System.Data.Odbc\r\n\r\nJul 20 14:16:38.114 ERROR 20928 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 10025\r\nJul 20 14:16:38.547 ERROR 20928 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 1750\r\nJul 20 14:16:38.568 ERROR 20928 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1228\r\nJul 20 14:16:38.569 ERROR 20928 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1227\r\nJul 20 14:25:12.312 ERROR 14760 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 10025\r\nJul 20 14:25:12.756 ERROR 14760 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 1750\r\nJul 20 14:25:12.774 ERROR 14760 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1228\r\nJul 20 14:25:12.775 ERROR 14760 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1227\r\nJul 20 14:25:25.182 ERROR 14760 Statement::SQLFetch: [Cloudera][ImpalaODBC] (120) Error while retrieving data from in Impala: [] : \r\nJul 20 14:38:45.356 ERROR 24728 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 10025\r\nJul 20 14:38:45.771 ERROR 24728 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 1750\r\nJul 20 14:38:45.789 ERROR 24728 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1228\r\nJul 20 14:38:45.790 ERROR 24728 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1227\r\nJul 20 14:40:38.508 ERROR 27796 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 10025\r\nJul 20 14:40:38.546 ERROR 27796 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 1750\r\nJul 20 14:40:38.972 ERROR 27796 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1228\r\nJul 20 14:40:38.973 ERROR 27796 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1227\r\nJul 20 14:41:05.188 ERROR 17884 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 10025\r\nJul 20 14:41:05.224 ERROR 17884 Connection::SQLGetInfoW: [Cloudera][ODBC] (11180) SQLGetInfo property not found: 1750\r\nJul 20 14:41:06.175 ERROR 17884 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1228\r\nJul 20 14:41:06.176 ERROR 17884 Statement::SQLSetStmtAttrW: [Cloudera][ODBC] (10210) Attribute identifier invalid or not supported: 1227\r\nJul 20 14:41:16.428 ERROR 17884 Statement::SQLFetch: [Cloudera][ImpalaODBC] (120) Error while retrieving data from in Impala: [] : \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/39634/comments",
    "author": "ClementeGao",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2020-07-20T15:54:56Z",
        "body": "@ajcvickers should I move this over to `efcore` or `ef` repo?"
      },
      {
        "user": "ajcvickers",
        "created_at": "2020-07-20T16:02:20Z",
        "body": "@mkArtakMSFT Nothing EF in this. ODBC is tracked in runtime, but there is nothing actionable here since there isn't enough information to triage.\r\n\r\n@ClementeGao Please provide more detailed information on what you are attempting to do. If possible, please attach a small, runnable project or post a small, runnable code listing that reproduces what you are seeing so that we can investigate."
      },
      {
        "user": "ghost",
        "created_at": "2020-07-20T16:40:57Z",
        "body": "Tagging subscribers to this area: @roji, @ajcvickers\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "ClementeGao",
        "created_at": "2020-07-21T04:48:02Z",
        "body": "thanks @mkArtakMSFT @ajcvickers  i found way for solve the question , i only upgrade driver of ODBC for impala，then  it work well"
      },
      {
        "user": "ClementeGao",
        "created_at": "2020-07-21T04:53:27Z",
        "body": "I hope you can provide a set of big data solutions, because NET has very little information in the field of big data, such as computing framework, data cleaning framework and so on"
      }
    ]
  },
  {
    "number": 39230,
    "title": "(Question) IValueTaskSource and ValueTask chaining",
    "created_at": "2020-07-13T21:45:04Z",
    "closed_at": "2020-07-14T23:00:29Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/39230",
    "body": "Hi team,\r\n\r\nI've implemented some logic attempting to reduce allocations when working with methods returning ValueTask.\r\nI've used the ManualResetValueTaskSourceCore inside a type implementing IValueTaskSource.\r\n\r\nMy API has a non async method returning ValueTask<int>.\r\n\r\nMy question is if there is a simple way how to chain methods returning ValueTask while keeping allocations zero amortised?\r\n\r\nSay i have public ValueTask<int> MethodA and public ValueTask<int> MethodB.\r\n\r\nBoth return ValueTasks from my custom IValueTaskSource.\r\n\r\nIs there a simple way to do something like (this is prototype code):\r\n\r\nvar t1 = MethodA;\r\nvar t2 = MethodB;\r\nawait t1;\r\nawait t2;\r\n\r\n, while achieving zero amortised allocs?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/39230/comments",
    "author": "MaximGurschi",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-07-13T21:45:08Z",
        "body": "Tagging subscribers to this area: @tarekgh\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "tarekgh",
        "created_at": "2020-07-13T21:54:31Z",
        "body": "CC @stephentoub "
      },
      {
        "user": "MaximGurschi",
        "created_at": "2020-07-14T00:15:45Z",
        "body": "Is the idea that to achieve this natively we'd use .Net 5 with DOTNET_SYSTEM_THREADING_POOLASYNCVALUETASKS?"
      },
      {
        "user": "scalablecory",
        "created_at": "2020-07-14T05:39:32Z",
        "body": "An `async ValueTask` that runs synchronously does not allocate anything. For the async case, you'll need some sort of state for this. You can certainly manage that yourself, or you can let `DOTNET_SYSTEM_THREADING_POOLASYNCVALUETASKS` do that for you.\r\n\r\nBecause `ValueTask` has some gotchas, the recommendation for success is to always `await` a `ValueTask` return directly rather than (as you have done in your example) store them in temp variables. This is the reason we don't have a built-in `ValueTask.WhenAll`."
      },
      {
        "user": "MaximGurschi",
        "created_at": "2020-07-14T07:27:36Z",
        "body": "Yes i understand the limitations of using ValueTask (double awaits etc). Tbh the interleaved execution in the above example is not even critical for the question. I was excited to be able to write allocation free async code, until it dawned on me that combining custom backed ValueTasks is still problematic (unless i'm missing something). I just want to clarify that it is not sufficient for both MethodA and MethodB to return IValueTaskSource backed ValueTasks, in order for the combination of them in some other method to be zero amortised allocation?\r\n\r\nValueTask<int> MethodA\r\n\r\nValueTask<double> MethodB\r\n\r\nasync ValueTask<decimal> Combine\r\n    => await MethodA+ await MethodB"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-07-14T21:50:14Z",
        "body": "> I just want to clarify that it is not sufficient for both MethodA and MethodB to return IValueTaskSource backed ValueTasks, in order for the combination of them in some other method to be zero amortised allocation?\r\n\r\nCorrect.  An async operation that consumes two other async operations is still its own async operation; if the goal is to have that be an IValueTaskSource implementation, you would need to craft an implementation of IValueTaskSource which provides the relevant implementation.  That's what DOTNET_SYSTEM_THREADING_POOLASYNCVALUETASKS does."
      },
      {
        "user": "MaximGurschi",
        "created_at": "2020-07-14T23:00:29Z",
        "body": "@stephentoub Thank you. I want to give you some details so you know of another use case where this makes a difference.\r\n\r\nI have an application that sends Kafka messages and wait for another kafka message before finishing the call.\r\n\r\nThe flow of the method is:\r\n1.Await a task from a TaskCompletionSource. The task of the TCS might handle the continuations of many concurrent calls\r\n2.Send a Kafka message\r\n3.Wait for a Kafka message\r\n4.Complete request\r\n\r\nStep 3 (the waiting) used to be based on another TaskCompletionSource. I replaced it with a IValueTaskSource backed VT. It improved throughput by 40%. The last allocation is the StateMachineBox (because i await the first TCS). I had a suspicion that removing allocations would improve throughput, and moving to IValueTaskSource made a difference. Am curious now what will happen if i use DOTNET_SYSTEM_THREADING_POOLASYNCVALUETASKS.\r\n"
      }
    ]
  },
  {
    "number": 39218,
    "title": "Is HttpConnectionResponseContent.Content.ReadAsStringAsync() guaranteed to be re-runnable?",
    "created_at": "2020-07-13T19:40:09Z",
    "closed_at": "2022-10-21T15:07:44Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/39218",
    "body": "This is a pretty specific question, and I don't really see an answer in docs. I'm trying to figure out if there's a guarantee that ReadAsStringAsync() will be reading from buffered content after the first read for the lifetime of the HttpConnectionResponseContent return from a .GetAsync call. \r\n\r\nFrom what I can tell, it's an implicit guarantee today because the data will get buffered and replayed, but I'm wondering if we're potentially opening ourselves up to a future break where it is readable only once (e.g. if the framework doesn't fully buffer or hold a response in memory for the lifetime of the response content). Either way, can it be doc'ed somewhere what the expected lifetime / reusability is for the content object? \r\n\r\nThanks!\r\nBrandyn",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/39218/comments",
    "author": "brphelps",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-07-13T19:40:12Z",
        "body": "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "MihaZupan",
        "created_at": "2022-10-21T15:07:44Z",
        "body": "As long as you are passing `HttpCompletionOption.ResponseContentRead` to `HttpClient` (the implicit default), you can call `ReadAsStringAsync` on the content multiple times.\r\n\r\nFor an arbitrary `HttpResponseMessage` that you don't have control over, you can't make this assumption."
      }
    ]
  },
  {
    "number": 37356,
    "title": "Could not load assembly on published project after net core upgrade",
    "created_at": "2020-06-03T17:04:09Z",
    "closed_at": "2020-07-20T16:11:45Z",
    "labels": [
      "question",
      "area-Extensions-Hosting"
    ],
    "url": "https://github.com/dotnet/runtime/issues/37356",
    "body": "### Description\r\n\r\nWe are shipping microservices using the worker template (which use `Microsoft.Extensions.Hosting`) using these docker images:\r\n* `mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build`\r\n* `mcr.microsoft.com/dotnet/core/aspnet:3.1-alpine AS runtime`\r\n\r\nWhen those images were upgraded to version `3.1.4` multiple microservices CI/CD pipelines started to fail with this output:\r\n\r\n```\r\nUnhandled exception. System.IO.FileLoadException: Could not load file or assembly 'Microsoft.Extensions.Hosting.Abstractions, Version=3.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)\r\nFile name: 'Microsoft.Extensions.Hosting.Abstractions, Version=3.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n```\r\n\r\nIn the meantime, we change our `Dockerfiles` to use a specific image version:\r\n\r\n* `mcr.microsoft.com/dotnet/core/sdk:3.1.201-alpine AS build`\r\n* `mcr.microsoft.com/dotnet/core/aspnet:3.1.3-alpine AS runtime`\r\n\r\nAnd everything works as intended\r\n\r\n\r\n### Configuration\r\nThis is my `dotnet --info` output\r\n\r\n```shell\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.300\r\n Commit:    b2475c1295\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.4\r\n  Commit:  0090613580\r\n\r\n.NET Core SDKs installed:\r\n  2.2.402 [/usr/share/dotnet/sdk]\r\n  3.0.103 [/usr/share/dotnet/sdk]\r\n  3.1.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n### Regression?\r\n\r\nIt was working in the previous version. (3.1.3)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/37356/comments",
    "author": "xolott",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-07-16T18:14:40Z",
        "body": "Tagging subscribers to this area: @eerhardt, @maryamariyan\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "safern",
        "created_at": "2020-07-16T19:42:37Z",
        "body": "Thanks, @xolott. It seems like `Microsoft.Extensions.Hosting.Abstractions` is part of the ASP.NET shared framework and that it got serviced on `3.1.4` and the implementation assembly version got bumped and somehow is causing a mismatch on the version with what your app was built against when you move to the newer docker image.\r\n\r\nI believe the short workaround would be to rebuild your solution against ASP.NET 3.1.4. \r\n\r\n@ericstj do you have any idea how to prevent this from happening on future servicing releases? I wonder why do ref and implementation have to match if implementation is newer? "
      },
      {
        "user": "ericstj",
        "created_at": "2020-07-16T20:48:14Z",
        "body": ".NET core should not error when version of def is higher than ref.  This error indicates that the def was lower than the ref.   This would happen when running on a 3.1.0 shared framework, or if the host decided to load the wrong assembly due to bad information in the app or shared framework's deps file.  @vitek-karas could provide some debugging steps to enable logging from the host to see what file it chose here.\r\n\r\nIn NetCore.App we never service the ref-pack with new assembly versions.  This is because the ref-pack must match the lowest (GA) runtime of the target framework.  If this assembly were in NetCore.App and a newer package version was referenced I would expect the newer assembly to be treated as app-local.  When run on 3.1.0 NetCore.App the app-local copy would be loaded.  When run on 3.1.2 or later I would expect the host to see that the shared framework version was >= and it would prefer that.\r\n\r\nI know there were some reference assembly versioning issues with AspNetCore that may be at play here.  cc @Pilchie @dougbu \r\n"
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-07-16T21:00:30Z",
        "body": "You can turn on host tracing to determine what versions it looked at and which it chose:\r\n```console\r\nexport COREHOST_TRACE=1\r\nexport COREHOST_TRACEFILE=host_trace.txt\r\n<repro the failure>\r\n```\r\n\r\nThis should produce `host_trace.txt` in the current directory which will have very detailed information about the assembly resolution process. If you decide to share this file, please be aware that it can contain names of local files, environment variable values and so on from the machine you're running the application on."
      },
      {
        "user": "Pilchie",
        "created_at": "2020-07-16T21:05:05Z",
        "body": "Tagging the rest of @dotnet/aspnet-build here.  Does this look like one of our previous issues?"
      },
      {
        "user": "wtgodbe",
        "created_at": "2020-07-16T21:10:56Z",
        "body": "This is a known issue with the 3.1.300 SDK - it contains a version of the AspNetCore targeting pack that contains a bug causing these assembly load issues. Upgrading to 3.1.301 or 3.1.302 should resolve the issue.\r\n\r\nIf upgrading your SDK is impossible, you could also add the following workaround to your project file:\r\n\r\n```\r\n  <ItemGroup>\r\n    <FrameworkReference Update=\"Microsoft.AspNetCore.App\">\r\n      <TargetingPackVersion>3.1.3</TargetingPackVersion>\r\n    </FrameworkReference>\r\n  </ItemGroup>\r\n```\r\n\r\nThis will tell the SDK to use the patched (`3.1.3`) targeting pack, rather than the bundled targeting pack (`3.1.2`), which has the bug."
      },
      {
        "user": "dougbu",
        "created_at": "2020-07-16T21:11:18Z",
        "body": "Yes, this looks like our previous issues. I _think_ 3.1.4 may have been the last time we had to fix our (ASP.NET Core-specific) targeting pack but it could also have been 3.1.5. @wtgodbe do you have a quicker way to confirm the versions❔\r\n\r\nIn any case, targeting pack information isn't listed above directly but 3.1.302 is newer than 3.1.300 and should include our most recent targeting pack IIRC."
      },
      {
        "user": "dougbu",
        "created_at": "2020-07-16T21:11:51Z",
        "body": "Oops, didn't see @wtgodbe's response😺"
      },
      {
        "user": "eerhardt",
        "created_at": "2020-07-20T16:11:45Z",
        "body": "Closing as this was fixed. See @wtgodbe's response above for how to get the fix."
      }
    ]
  },
  {
    "number": 36801,
    "title": "when an assembly referenced in .NET Core project won't be loaded?",
    "created_at": "2020-05-21T03:12:21Z",
    "closed_at": "2020-07-06T18:46:27Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/36801",
    "body": "I know for example if any type in a referenced assembly is used by the project this assembly won't be loaded. But in some cases we can't eliminate this reference because this reference is used in the build time(for example using a constant in that assembly).Can you please enumerate the different scenarios when we use a referenced assembly and it is not loaded by the project like the example of the constant that I gave. and what we call this type of dependencies please. Is there a way to get this assemblies for a given project. Using reflection for example and specifically Assembly.GetReferencedAssemblies() return assemblies loaded at runtime by the project but don't return this assemblies.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/36801/comments",
    "author": "Tahatoun",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-05-21T16:23:24Z",
        "body": "Tagging subscribers to this area: @vitek-karas\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "jkotas",
        "created_at": "2020-05-21T16:29:00Z",
        "body": "The assembly loader is trying to be as lazy as possible to optimize startup performance. It is not a good idea to depend on whether or when the assembly loader loads the given assembly at runtime. \r\n\r\nOther common cases where you may not see the assembly loaded at runtime are type forwarders or when the calling assembly is AOT compiled."
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-05-21T20:04:49Z",
        "body": "There's one other optimization at play. If you have a program which has a project reference to a class lib and the only thing it uses from it is a static const value, then the compiler (C#) will actually inline the constant value into the program. In that case the program assembly doesn't have an assembly reference to your class lib (as there are no symbols to resolve from it).\r\n\r\nIn that case, there's no way at runtime to enumerate such dependency - it simply doesn't exist.\r\n\r\nOn top of that there are other reasons as listed by @jkotas - runtime works hard to avoid loading things unless absolutely necessary.\r\n\r\nWhat is the scenario for this? Why do you need to know the \"potentially referenced\" assemblies?"
      },
      {
        "user": "Tahatoun",
        "created_at": "2020-05-22T00:48:27Z",
        "body": "First, I would like to thank you @vitek-karas and @jkotas for your answers. @vitek-karas  actually I'm developing an application that detect and eliminate all useless references for a given project whether it was a class lib reference or a project reference or a package reference. For example if we have a project A that reference project B which in turn depends on package C and  our project actually only use package C, in this case I will eliminate the reference to package B and replace it with a reference to package C. And before doing this and traverse the graph of dependencies to detect the references to eliminate and the new one to establish, I need to detect those assemblies concretely used by the project and of course I can't take only loaded assemblies at runtime into consideration so I need to know as you said all \"potentially referenced\" assemblies used either at build or at runtime. for example if we take the case you gave me in your comment if the project use only a static const value of a referenced class lib and my app take only assemblies loaded at runtime into consideration(that we can collect names thanks to the Assembly.GetReferencedAssemblie()method) this reference will be marked as useless and it will be eliminated which is not true and this will cause an error in the next build of the project. Have you any suggestions for me to get those assemblies?"
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-05-22T10:06:03Z",
        "body": "I don't know - I think that runtime is \"too late\" for this, in fact IL (the compiled assemblies) is probably too late as well (due to the above example). This would have to operate at the compiler level. I don't know if the compiler has some way to report this already. Maybe it would be possible to do this with Roslyn analyzer as that should see the world from the compiler's point of view."
      },
      {
        "user": "Tahatoun",
        "created_at": "2020-05-22T23:44:56Z",
        "body": "Thank you @vitek-karas for your feedback."
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-07-06T18:46:27Z",
        "body": "The original question seems to be answered. If you have any other issues around this, please open a new one."
      }
    ]
  },
  {
    "number": 35951,
    "title": "Microsoft Visual Studio Installer Projects other device issue",
    "created_at": "2020-05-07T08:43:00Z",
    "closed_at": "2021-07-22T11:39:40Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35951",
    "body": "Hi,\r\n\r\nI have a .Net Core 3.1 project, I want to make a Setup file from.\r\nI used Microsoft Visual Studio Installer Projects:\r\nProject Output: \"Publish Items\" - 1 Icon - 2 Shortcuts\r\nI rebuilt my Setup project and it generated .exe and .msi files in Setup Project ~\\Debug folder.\r\n\r\nI Launched .msi and installed everything normally. Tested the app, and it works on my device.\r\nThen, I moved the .msi file to another device. Installed .Net Core 3.1. Launched the .msi, installed everything normally. However, my app didn't run.\r\n\r\nI'd like to add, that I used the .msi file from Setup project ~\\Debug folder.\r\n\r\nThanks in advance\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35951/comments",
    "author": "ATikadze",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-05-07T08:43:03Z",
        "body": "Tagging subscribers to this area: @safern, @viktorhofer\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "ATikadze",
        "created_at": "2020-05-07T09:15:11Z",
        "body": "@safern @ViktorHofer "
      },
      {
        "user": "safern",
        "created_at": "2020-05-07T17:18:59Z",
        "body": "cc: @jeffschwMSFT not sure who to redirect this one to. "
      },
      {
        "user": "ghost",
        "created_at": "2020-05-07T17:28:53Z",
        "body": "Tagging subscribers to this area: @vitek-karas, @swaroop-sridhar\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2020-05-07T17:29:00Z",
        "body": "Please set COREHOST_TRACE=1 and collect the logs for the launching application.\r\n\r\ncc @vitek-karas "
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-05-07T18:32:18Z",
        "body": "> However, my app didn't run.\r\n\r\nCan you please provide more details? It's nearly impossible to tell what could be wrong with just that statement:\r\n* Is this a console or GUI app (WinForms, WPF, ...)?\r\n* What happens when you run it - do you get an error reported back either via command line or a dialog?\r\n* If it's a UI app, can you look with EventViewer if there's an event about the application failing to start? If so, what does the error say?\r\n* Is the app x86 or x64 (or you didn't set a specific arch)?\r\n"
      },
      {
        "user": "ATikadze",
        "created_at": "2020-05-07T19:04:18Z",
        "body": "@vitek-karas Hi,\r\n1. The project is WPF. \r\n2. When I run the app, nothing happens. I looked into the Task Manager, it appears in the Background processes, then, it disappears. And doesn't appear in the Apps.\r\n3.  There is no error.\r\n4. The app is x64.\r\n\r\nThanks in advance."
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-05-07T19:42:53Z",
        "body": "Can you please open a command line:\r\n```console\r\nset COREHOST_TRACE=1\r\nset COREHOST_TRACEFILE=host_trace.txt\r\nmyapp.exe\r\n```\r\n\r\nas the last step run your application from the command line.\r\nThis should produce the `host_trace.txt` file in the current directory. The file contains lot of details about the startup of the app, and it should include the error why the app failed to start.\r\nIt may contain information about the machine, the user name and local paths, so if you feel comfortable with that please share it with us, otherwise you should be able to find the error near the end of that file."
      },
      {
        "user": "vitek-karas",
        "created_at": "2021-07-22T11:39:40Z",
        "body": "Closing as there's not enough information to make progress. Please feel free to reopen or create a new issue if more assistance is needed."
      }
    ]
  },
  {
    "number": 35825,
    "title": "System.IO.DirectoryNotFoundException: 'Could not find a part of the path",
    "created_at": "2020-05-05T04:10:28Z",
    "closed_at": "2020-05-05T15:47:28Z",
    "labels": [
      "question",
      "area-System.IO",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35825",
    "body": "When I run .NET Core Web API Application on VS 2019,\r\nIn Output's Debug panel, keep showing me Exception throw:\r\n\r\nSystem.IO.DirectoryNotFoundException: 'Could not find a part of the path in System.Private.CoreLib.dll\r\n\r\nHowever, application runs well without stoping or malfunctioning.\r\nI know Exception always means somthing needs to be cared.\r\n\r\nSo, how can I search what File is Not Found when run CoreCLR?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35825/comments",
    "author": "BrunnaMaiaradaSilva",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-05-05T04:10:31Z",
        "body": "Tagging subscribers to this area: @jozkee\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "scalablecory",
        "created_at": "2020-05-05T10:49:02Z",
        "body": "@jeffschwMSFT "
      },
      {
        "user": "jkotas",
        "created_at": "2020-05-05T13:43:56Z",
        "body": "Go to Debug / Windows / Exception Setting in Visual Studio, and check \"Common Language Runtime Exceptions\". It will make the debugger stop when the exception is thrown and show you the callstack.\r\n\r\nIt is not unusual for exceptions to be thrown and handled gracefully. You are likely seeing one of these cases since the application works fine otherwise.\r\n\r\n> I know Exception always means something needs to be cared.\r\n\r\nUnhandled exceptions need to be cared for. Handled exceptions are ok."
      },
      {
        "user": "BrunnaMaiaradaSilva",
        "created_at": "2020-05-05T15:47:28Z",
        "body": "The exception persisted, so I press alt + Enter and selected Properties. In this properties window you have the option to copy to the output directory and it is this option that I changed, the program ran without problems."
      }
    ]
  },
  {
    "number": 35775,
    "title": "Cannot find AssemblyDependencyResolver",
    "created_at": "2020-05-03T15:36:59Z",
    "closed_at": "2020-05-03T17:54:21Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35775",
    "body": "I'm developing a library (netstandard 2.1) for my ASP.NET Core (netcore 3.1) app.\r\n\r\nI can install the `System.Runtime.Loader` (4.3) nuget package but I am unable to use the `AssemblyDependencyResolver` but can use `AssemblyLoadContext`.\r\n\r\nAm I doing something wrong?\r\n\r\nSDK: 3.1.201",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35775/comments",
    "author": "MeikelLP",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-05-03T17:54:21Z",
        "body": "AssemblyDependencyResolver is in netcore 3.1 only. It is not available in netstandard 2.1"
      }
    ]
  },
  {
    "number": 35617,
    "title": "Is there a sscli for .net 3.5?",
    "created_at": "2020-04-29T18:56:17Z",
    "closed_at": "2020-04-29T19:10:40Z",
    "labels": [
      "question",
      "area-Meta",
      "tracking-external-issue",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35617",
    "body": "This repo is the lastest .net source, and there's a sscli20 for .net 2.0.\r\nSo, is there a sscli for .net 3.5? I want to learn more about JIT, but there's some differences between 3.5 and 2.0",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35617/comments",
    "author": "CreateAndInject",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-04-29T19:10:40Z",
        "body": "Shared Source CLI 2.0 was the last one.\r\n\r\nIf you would like to learn more about the JIT, look at JIT in this repo. The JIT in sscli20 did not have any optimizations - it was not the JIT shipping in .NET Framework. "
      },
      {
        "user": "CreateAndInject",
        "created_at": "2020-04-29T19:19:51Z",
        "body": "@jkotas \r\n```\r\n    virtual void __stdcall embedGenericHandle(\r\n                        CORINFO_MODULE_HANDLE   module,\r\n                        unsigned                metaTOK,\r\n                        CORINFO_CONTEXT_HANDLE  context,\r\n                        CorInfoTokenKind        tokenKind,\r\n                        CORINFO_GENERICHANDLE_RESULT *pResult) = 0;\r\n```\r\n\r\nI find this in sscli20, but the .pdb of mscorwks.dll (from 3.5) tell me: There must be something between `metaTOK` and `context`\r\n\r\n```\r\n    virtual void __stdcall embedGenericHandle(\r\n                        CORINFO_MODULE_HANDLE   module,\r\n                        unsigned                metaTOK,\r\n//=========There must be one more field, what???============//\r\n                        CORINFO_CONTEXT_HANDLE  context,\r\n                        CorInfoTokenKind        tokenKind,\r\n                        CORINFO_GENERICHANDLE_RESULT *pResult) = 0;\r\n```\r\nCould you tell me what's it and what's meaning?"
      },
      {
        "user": "jkotas",
        "created_at": "2020-04-29T20:21:04Z",
        "body": "Sorry, this is undocumented interface in .NET Framework. I am not able to provide the details about it."
      }
    ]
  },
  {
    "number": 35163,
    "title": "System.Text.Json JsonStringEnumConverter per enum naming policy ",
    "created_at": "2020-04-18T17:39:49Z",
    "closed_at": "2020-05-20T06:53:01Z",
    "labels": [
      "question",
      "area-System.Text.Json"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35163",
    "body": "System.Text.Json JsonStringEnumConverter per enum naming policy \r\n\r\n```cs\r\npublic JsonStringEnumConverter(JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true)\r\n```\r\n\r\nThe constructor exists, but how would you apply a camelCase naming policy on a specific enum type without creating new attributes or derived converters?\r\n\r\n```cs\r\n[JsonConverter(typeof(JsonStringEnumConverter))] // how to camel case?\r\npublic enum Foo\r\n{\r\n    Bar = 1 \r\n    Baz = 2\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35163/comments",
    "author": "NinoFloris",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-04-18T17:39:53Z",
        "body": "Tagging subscribers to this area: @jozkee\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "layomia",
        "created_at": "2020-04-23T00:38:11Z",
        "body": "> without creating new attributes or derived converters?\r\n\r\nCan you explain more about your scenario? Is there a limitation with creating a new attribute?"
      },
      {
        "user": "layomia",
        "created_at": "2020-05-20T06:53:01Z",
        "body": "The recommended way to do this is to derive from `JsonConverterAttribute`, override the `CreateConverter` method, and return an instance of the `JsonStringEnumConverter` factory constructed with the desired naming policy (or get the `JsonConverter<TEnum>` instance from the factory)."
      }
    ]
  },
  {
    "number": 35094,
    "title": "About the ConcurrentQueue<T> space question",
    "created_at": "2020-04-17T02:56:44Z",
    "closed_at": "2020-04-17T20:27:36Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/35094",
    "body": "Follow this test code:\r\n```c#\r\n ConcurrentQueue<int> queue = new ConcurrentQueue<int>();\r\nfor (int i = 0; i < 35; i++)\r\n{\r\n     queue.Enqueue(i);\r\n}\r\nint[] ary = queue.ToArray();\r\nqueue.Enqueue(100);\r\n```\r\nWhen I done the `ToArray()`, the queue's tail has been frozened. Then enqueue item by next step that will create a new segment(3th) with size 32, but only 3 items filled in the 2th segment with size 64! \r\n\r\nWill there be a lot of wasted space here?\r\n\r\nHow about unfrozen  the queue's tail when  `ToArray()` completed, Will it cause other problems?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/35094/comments",
    "author": "hey-hoho",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-04-17T02:56:47Z",
        "body": "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "stephentoub",
        "created_at": "2020-04-17T20:27:36Z",
        "body": "> How about unfrozen the queue's tail when ToArray() completed, Will it cause other problems?\r\n\r\nYes, it could cause problems.  With the segment frozen, any concurrent enqueues at that point will start going into a new segment.  If we then unfroze the previous segment, ordering would be lost.  Plus it would make various aspects of the synchronization more complicated."
      },
      {
        "user": "hey-hoho",
        "created_at": "2020-04-18T06:21:08Z",
        "body": "@stephentoub Thanks for your answer. \r\nAre there any plans to optimize the space waste problem?"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-04-18T09:49:31Z",
        "body": "No. There's no evidence that there's an actual problem in real code that's using the type as it was designed for.  Can you share an actual situation where it's problematic?"
      },
      {
        "user": "MaximGurschi",
        "created_at": "2020-10-05T17:44:12Z",
        "body": "On a slightly related note, i was wondering if there is interest in making the maximum segment size be programmable. So that it can be more than ~10^6?"
      }
    ]
  },
  {
    "number": 34956,
    "title": ".Net 5 WPF reflection failing",
    "created_at": "2020-04-14T16:27:16Z",
    "closed_at": "2020-04-20T22:03:33Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/34956",
    "body": "I'm trying to load by reflection a WPF class-library targeting _netcoreapp5.0_ from a .Net5 console app, and I'm getting the following exception.\r\n\r\n> Unable to load one or more of the requested types.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n> Could not load file or assembly 'PresentationFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\nWith the following call stack\r\n\r\n>    at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n>    at System.Reflection.RuntimeModule.GetTypes()\r\n>    at System.Reflection.Assembly.GetTypes()\r\n>    at GenerateAttributesTable.Program.Main(String[] args) in Program.cs:line 17\r\n\r\nIs reflection working on .Net 5.0.100-preview.2.20176.6?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/34956/comments",
    "author": "arivoir",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-04-14T21:45:07Z",
        "body": "Tagging subscribers to this area: @vitek-karas\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "jkotas",
        "created_at": "2020-04-14T21:46:16Z",
        "body": "Does your app reference the WPF?\r\n\r\nNote that WPF is not referenced by default in .NET Core."
      },
      {
        "user": "arivoir",
        "created_at": "2020-04-20T22:03:33Z",
        "body": "I needed to append \"WindowsDesktop\" to sdk and UseWPF in the property group\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net45</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 34773,
    "title": "Inject service into JsonConverter",
    "created_at": "2020-04-09T17:58:11Z",
    "closed_at": "2021-10-20T17:41:44Z",
    "labels": [
      "question",
      "area-System.Text.Json"
    ],
    "url": "https://github.com/dotnet/runtime/issues/34773",
    "body": "I have a converter that needs to access a service from the DI container. How can I do that?\r\n\r\nI know I could create the converter in a `IConfigureOptions<JsonOptions>` and globally add it to the `JsonSerializerOptions`, but then it would apply everywhere, which I don't want. I want to apply it with an attribute.\r\n\r\nIs there a way to inject a service into a converter?\r\n\r\nI guess not, especially since the JsonSerializer API is static, but I can think of one way to achieve the desired result with very little change: add an `IServiceProvider` property to `JsonSerializerOptions`. This way, converter can retrieve the services they need.\r\n\r\nIf you don't want to depend on Microsoft.Extensions.DependencyInjection, expose that property as `object`, and the user can do whatever they want with it.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/34773/comments",
    "author": "thomaslevesque",
    "comments": [
      {
        "user": "thomaslevesque",
        "created_at": "2020-04-09T18:03:23Z",
        "body": "Or, even better: add a property like this to `JsonSerializerOptions`:\r\n\r\n```csharp\r\npublic Func<Type, object> ServiceProvider { get; set; }\r\n```\r\nAnd use it when constructing instances of converter specified with `JsonConverterAttribute`.\r\n"
      },
      {
        "user": "pranavkm",
        "created_at": "2020-04-09T19:18:44Z",
        "body": "If the intent is to configure it on a per-callsite basis, couldn't the application code resolve the converter from DI?"
      },
      {
        "user": "thomaslevesque",
        "created_at": "2020-04-09T19:59:13Z",
        "body": "@pranavkm no, it's not per-callsite. For instance if have a type like this:\r\n\r\n```csharp\r\npublic class Foo\r\n{\r\n    [JsonConverter(typeof(MyCustomConverter))]\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n    public int LuckyNumber { get; set; }\r\n}\r\n```\r\n\r\nI can't just add `MyCustomConverter` to `JsonSerializerOptions.Converters`, because it would apply to all `int` properties, which I don't want. So I *have* to use the attribute, but if I do that I have no way to inject a service into the converter."
      },
      {
        "user": "thomaslevesque",
        "created_at": "2020-04-10T10:45:06Z",
        "body": "Current workaround :\r\n\r\n```csharp\r\n        private class ConfigureJsonOptions : IConfigureOptions<JsonOptions>\r\n        {\r\n            private readonly IServiceProvider _services;\r\n\r\n            public ConfigureJsonOptions(IServiceProvider services)\r\n            {\r\n                _services = services;\r\n            }\r\n\r\n            public void Configure(JsonOptions options)\r\n            {\r\n                options.JsonSerializerOptions.Converters.Add(new ServiceProviderDummyConverter(_services));\r\n            }\r\n        }\r\n\r\n    /// <summary>\r\n    /// This isn't a real converter. It only exists as a hack to expose\r\n    /// IServiceProvider on the JsonSerializerOptions.\r\n    /// </summary>\r\n    public class ServiceProviderDummyConverter : JsonConverter<ServiceProviderDummyConverter>, IServiceProvider\r\n    {\r\n        private readonly IServiceProvider _services;\r\n\r\n        public ServiceProviderDummyConverter(IServiceProvider services)\r\n        {\r\n            _services = services;\r\n        }\r\n\r\n        public object GetService(Type serviceType) => _services.GetService(serviceType);\r\n\r\n        public override bool CanConvert(Type typeToConvert) => false;\r\n\r\n        public override ServiceProviderDummyConverter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public override void Write(Utf8JsonWriter writer, ServiceProviderDummyConverter value, JsonSerializerOptions options)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n```\r\n\r\nIn a real converter, you have access to the options, so you can retrieve the service provider via the converter above:\r\n\r\n```csharp\r\nvar serviceProvider = options.Converters.OfType<IServiceProvider>().First();\r\n```"
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2021-10-20T17:41:44Z",
        "body": "What is the motivating use case for requiring DI in a JsonConverter? My understanding of JsonConverter is that it's meant to define a pure mapping between JSON and .NET types and vice versa, so a DI requirement in this context sounds like introducing unrelated concerns into the serialization layer.\r\n\r\nIn any case, it might be possible to achieve what you're looking for using a ConditionalWeakTable on `JsonSerializerOptions`:\r\n```csharp\r\n// dynamically attach IServiceProvider instances to JsonSerializerOptions\r\npublic static class JsonSerializerOptionsDependencyInjection\r\n{\r\n    private readonly static ConditionalWeakTable<JsonSerializerOptions, IServiceProvider> s_serviceproviders = new();\r\n\r\n    public static IServiceProvider? GetServiceProvider(this JsonSerializerOptions options)\r\n        => s_serviceproviders.TryGetValue(options, out var value) ? value : null;\r\n\r\n    public static void SetServiceProvider(this JsonSerializerOptions options, IServiceProvider provider)\r\n        => s_serviceproviders.Add(options, provider);\r\n}\r\n\r\npublic class FooConverter : JsonConverter<int>\r\n{\r\n    public override int Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        IServiceProvider? provider = options.GetServiceProvider();\r\n        ...\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, int value, JsonSerializerOptions options)\r\n        => throw new NotImplementedException();\r\n}\r\n```"
      },
      {
        "user": "thomaslevesque",
        "created_at": "2021-10-21T07:11:07Z",
        "body": "> My understanding of JsonConverter is that it's meant to define a pure mapping between JSON and .NET types and vice versa, so a DI requirement in this context sounds like introducing unrelated concerns into the serialization layer.\r\n\r\n@eiriktsarpalis in theory, I agree with you. Unfortunately the real world disagrees, as is often the case...\r\n\r\nMy initial use case for this was an API that needed to expose obfuscated ids to prevent resource enumeration. The idea was that the application would manipulate \"normal\" int ids, and the obfuscation would occur at the application's boundaries (i.e. JSON serialization, ASP.NET Core model binding, etc). The obfuscation process uses cryptography, so it needs a key. And that key comes from the application settings, which I can only access through `IConfiguration` or `IOptions<T>`. Hence the need to inject services into my JSON converter. (I'm pretty sure I had another use case that came up in another project, but I can't remember what it was.)\r\n\r\nOf course, there are workarounds, like the one I posted above, or the one you suggested using `ConditionalWeakTable`. For the use case I just mentioned, I could have just stored the encryption key in a static somewhere during application startup, but it felt a bit dirty.\r\n\r\nSo, it's not a major issue, definitely not a show-stopper, but it'd be nice to have a cleaner way to achieve this. Maybe just a general purpose `Items` property on `JsonSerializerOptions` that could hold whatever the user wants, like the one found in `HttpContext` and a few other places:\r\n\r\n```\r\npublic IDictionary<string, object> Items { get; }\r\n```"
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2021-10-21T11:10:59Z",
        "body": "For .NET 7 we are looking at extending the converter model (parent issue #36785), and this would likely include a concept similar to `StreamingContext`. Note however that this would be scoped to individual serialization operations, instead of being associated with the `JsonSerializerOptions` instance. Would that serve to solve your use case?"
      },
      {
        "user": "thomaslevesque",
        "created_at": "2021-10-21T12:58:33Z",
        "body": "@eiriktsarpalis could you elaborate please? What would it look like? I don't see what you mention in issue #36785 "
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2021-10-21T13:08:15Z",
        "body": "We're still in very early phases of planning (in fact we're still grooming our backlog as you can see :-)), so final design is TBD. But fundamentally we'd be looking at exposing new virtual Read&Write methods in `JsonConverter<T>` that accept a \"State\" parameter which can also accept user-defined state scoped to the particular serialization operation."
      },
      {
        "user": "thomaslevesque",
        "created_at": "2021-10-21T13:38:12Z",
        "body": "@eiriktsarpalis I see, thanks.\r\nI'm not sure it would work for my use case, though; in my scenario, I'm not calling JsonSerializer myself, it's called by ASP.NET Core, so I can't pass state to the serializer. I can only control the `JsonSerializerOptions`."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2021-10-21T15:24:24Z",
        "body": "That's good feedback, thanks. We might want to consider ways to tie in the feature to the ASP.NET DI context, but that might require input from that team as well. cc @pranavkm "
      }
    ]
  },
  {
    "number": 34294,
    "title": "Question: Do you need to call Process.WaitForExit() after Process.WaitForExitAsync(CancellationToken)",
    "created_at": "2020-03-30T20:20:59Z",
    "closed_at": "2020-03-31T19:41:32Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Process"
    ],
    "url": "https://github.com/dotnet/runtime/issues/34294",
    "body": "In .NET you should call `Process.WaitForExit()` to ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.\r\n\r\n````c#\r\nProcess p = Process.Start(...);\r\nwhile (!p.WaitForExit(1000)) {}\r\n\r\n// call WaitForExit() here to ensures that all processing has been completed\r\np.WaitForExit();\r\n````\r\n\r\nIn .NET 5 there is a new method `Process.WaitForExitAsync(CancellationToken)`. Should we call `WaitForExit` after `Process.WaitForExitAsync`?\r\n\r\n````c#\r\nProcess p = Process.Start(...);\r\nawait p.WaitForExitAsync(cancellationToken);\r\n\r\n// Is it necessary to ensures that all processing has been completed?\r\np.WaitForExit();\r\n````\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/34294/comments",
    "author": "meziantou",
    "comments": [
      {
        "user": "scalablecory",
        "created_at": "2020-03-31T19:41:32Z",
        "body": "`WaitForExitAsync` is all you need. It is semantically equivalent, just async rather than blocking."
      }
    ]
  },
  {
    "number": 34097,
    "title": "System.InvalidOperationException: StandardIn has not been redirected",
    "created_at": "2020-03-25T22:51:00Z",
    "closed_at": "2020-03-30T15:36:42Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Process"
    ],
    "url": "https://github.com/dotnet/runtime/issues/34097",
    "body": "I got the following exception from time to time in my application whereas the standard input is  redirected.\r\n\r\n````\r\nException has occurred: CLR/System.InvalidOperationException\r\nAn exception of type 'System.InvalidOperationException' occurred in System.Diagnostics.Process.dll but was not handled in user code: 'StandardIn has not been redirected.'\r\n   at System.Diagnostics.Process.get_StandardInput()\r\n   at repro_process.Program.ExecuteProcessAsync(ProcessStartInfo psi) in /home/meziantou/repro-process/Program.cs:line 72\r\n   at repro_process.Program.<>c.<Main>b__0_0(Int32 i) in /home/meziantou/repro-process/Program.cs:line 27\r\n   at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n````\r\n\r\nI tried to make a small repro of the code I have in production. Note that it doesn't always throw the exception. You may need to run the code 10 times to get the exception.\r\n\r\nA similar exception sometimes occurs on `process.BeginErrorReadLine()` or `process.BeginOutputReadLine()` with a similar message indicating the the standard output/error is not redirected.\r\n\r\n````c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace repro_process\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            // In the actual code, multiple unit tests (xUnit) run in parallel so I tried to reproduce this behavior by using Parallel.For\r\n            Parallel.For(0, 10000, i =>\r\n            {\r\n                var psi = new ProcessStartInfo\r\n                {\r\n                    FileName = \"git\",\r\n                    ArgumentList =\r\n                    {\r\n                        \"config\",\r\n                        \"--global\",\r\n                        \"test.a\",\r\n                        \"abc\" + i,\r\n                    },\r\n                    RedirectStandardError = true,\r\n                    RedirectStandardInput = true,\r\n                    RedirectStandardOutput = true,\r\n                };\r\n                ExecuteProcessAsync(psi).Wait(); // In the actual code, there is no wait/Result, only await\r\n                Console.WriteLine(i);\r\n            });\r\n        }\r\n\r\n        private static Task<bool> ExecuteProcessAsync(ProcessStartInfo psi)\r\n        {\r\n            var process = new System.Diagnostics.Process\r\n            {\r\n                StartInfo = psi,\r\n                EnableRaisingEvents = true,\r\n            };\r\n\r\n            var tcs = new TaskCompletionSource<bool>(TaskCreationOptions.RunContinuationsAsynchronously);\r\n            process.Exited += (sender, e) =>\r\n            {\r\n                try\r\n                {\r\n                    process.WaitForExit();\r\n                    process.Dispose();\r\n                    tcs.TrySetResult(true);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    tcs.SetException(ex);\r\n                }\r\n            };\r\n\r\n            process.Start();\r\n\r\n            if (psi.RedirectStandardOutput)\r\n            {\r\n                process.OutputDataReceived += (s, e) => { Console.WriteLine(e.Data); };\r\n                process.BeginOutputReadLine();\r\n            }\r\n\r\n            if (psi.RedirectStandardError)\r\n            {\r\n                process.ErrorDataReceived += (s, e) => { Console.WriteLine(e.Data); };\r\n                process.BeginErrorReadLine();\r\n            }\r\n\r\n            if (psi.RedirectStandardInput)\r\n            {\r\n                process.StandardInput.Close();\r\n            }\r\n\r\n            return tcs.Task;\r\n        }\r\n    }\r\n}\r\n````\r\n\r\n**Environment:**\r\n- .NET Core 3.1.3 but I also get the exception on 3.1.0 and 3.1.2\r\n\r\n````\r\n$> lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.2 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n\r\n$> uname -a\r\nLinux DESKTOP-TV4IPEK 4.4.0-19041-Microsoft #1-Microsoft Fri Dec 06 14:06:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$> lscpu\r\nArchitecture:        x86_64\r\nCPU op-mode(s):      32-bit, 64-bit\r\nByte Order:          Little Endian\r\nCPU(s):              4\r\nOn-line CPU(s) list: 0-3\r\nThread(s) per core:  1\r\nCore(s) per socket:  4\r\nSocket(s):           1\r\nVendor ID:           GenuineIntel\r\nCPU family:          6\r\nModel:               94\r\nModel name:          Intel(R) Core(TM) i5-6600 CPU @ 3.30GHz\r\nStepping:            3\r\nCPU MHz:             3301.000\r\nCPU max MHz:         3301.0000\r\nBogoMIPS:            6602.00\r\nHypervisor vendor:   Windows Subsystem for Linux\r\nVirtualization type: container\r\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm pni pclmulqdq dtes64 est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 movbe popcnt aes xsave osxsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap clflushopt ibrs ibpb stibp ssbd\r\n````\r\n\r\nEdit: I've just got the issue on Windows too (.NET Core 3.1.2).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/34097/comments",
    "author": "meziantou",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2020-03-30T01:16:15Z",
        "body": "This looks like a bug in your repro. Your `process.Exited` event handler is calling `process.Dispose`.  That can race with your subsequent call to `process.StandardInput.Close()`.  If the process exits and the `process.Dispose` is invoked before you access `process.StandardInput`, the call to `StandardInput` will throw, by design."
      },
      {
        "user": "meziantou",
        "created_at": "2020-03-30T15:36:42Z",
        "body": "You are right! That's explain why it occurs very rarely. I've seen the new method `WaitForExitAsync` in the repository. I'll take inspiration from it to fix my code :)"
      },
      {
        "user": "pakrym",
        "created_at": "2020-11-12T21:25:17Z",
        "body": "Wonder if it's worth throwing an `ObjectDisposedException` instead to make this situation more discoverable."
      },
      {
        "user": "stephentoub",
        "created_at": "2020-11-24T05:34:54Z",
        "body": "> Wonder if it's worth throwing an ObjectDisposedException instead to make this situation more discoverable.\r\n\r\nSeems reasonable to consider.\r\ncc: @adamsitnik @eiriktsarpalis"
      }
    ]
  },
  {
    "number": 33935,
    "title": "System.Runtime.Loader Nuget out of date AssemblyLoadContext constructors",
    "created_at": "2020-03-22T20:50:28Z",
    "closed_at": "2020-03-23T06:57:58Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/33935",
    "body": "I am making use of the collectable assemblies functionality in AssemblyLoadContext released with Core3.1.  It works fine within a Core3.1 project, but if i try to move it out to a Standard2.1 library for reuse, the System.Runtime.Loader Nuget is out of date and does not have the new collectable constructor.\r\n\r\nDoes the Nuget need updating, or is there another reason for this?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/33935/comments",
    "author": "luhis",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-03-23T03:44:45Z",
        "body": ".NET Standard 2.1 does not include collectible assemblies feature. You have to target netcoreapp3.0+ to use collectible assemblies.\r\n\r\nSystem.Runtime.Loader is left over from .NET Core 1.0 where the platform was composed from many small NuGet packages. We are not planning to update these NuGet packages."
      },
      {
        "user": "luhis",
        "created_at": "2020-03-23T06:57:58Z",
        "body": "ah, that explains it.  thanks"
      }
    ]
  },
  {
    "number": 33154,
    "title": "How to Load C Shared object file (.so) file in .Net core",
    "created_at": "2020-03-04T12:19:02Z",
    "closed_at": "2020-03-06T04:54:18Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/33154",
    "body": "I am having one .so file which I want to use in .Net core.\r\n\r\nOnce I use the same library in c with below code it is working fine but I don't know how to add these references in .Net Core.\r\n\r\nCode in C\r\n\r\nadd_library(capi SHARED IMPORTED)\r\nset_target_properties(capi PROPERTIES\r\nIMPORTED_LOCATION \"/opt/lib/libcapi.so\"\r\nINTERFACE_INCLUDE_DIRECTORIES \"/home/src/api/capi/include;/home/src/api/capi/include/Linux\";\r\nC_STANDARD 11 )\r\n\r\nNote: INTERFACE_INCLUDE_DIRECTORIES is having header files.\r\n\r\nIn .Net core I am using the code as mentioned below. I added the reference of .so file only, Please let me know how I will add the references to INTERFACE_INCLUDE_DIRECTORIES in .net Core.\r\n\r\nclass Program\r\n{\r\n[DllImport(@\"\\TestApp\\libcapi.so\")]\r\npublic static extern bool CreateDomain(object hProvider, string nHndType, string szName, string szName1, bool test);\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        var d = CreateDomain(null, \"\", \"\", \"\", true);\r\n        Console.ReadKey();\r\n    }\r\n}\r\nCurrent Error:\r\nSystem.BadImageFormatException\r\nHResult=0x8007000B\r\nMessage=An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\r\nSource=TestApp\r\nStackTrace:\r\nat TestApp.Program.SL_CreateDomain(Object hProvider, String nHndType, String szName, String szName1, Boolean test)\r\nat TestApp.Program.Main(String[] args) in D:\\Projects\\R&D.Net Core\\TestApp\\TestApp\\Program.cs:line 13\r\n\r\nI am not having any idea about how to add INTERFACE_INCLUDE_DIRECTORIES in .net core.\r\nIf anything else required please let me know.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/33154/comments",
    "author": "Shriyanshmit",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-03-04T17:33:05Z",
        "body": "> An attempt was made to load a program with an incorrect format\r\n\r\n`.so` files are for Linux. You are trying to run unmanaged build for Linux on Windows. That is not going to work.\r\n\r\n> I am not having any idea about how to add INTERFACE_INCLUDE_DIRECTORIES in .net core.\r\n\r\nThis is not necessary to use this .dll from .NET Core. "
      },
      {
        "user": "Shriyanshmit",
        "created_at": "2020-03-04T17:51:47Z",
        "body": "If I use same code on linux machine, Will it work? "
      },
      {
        "user": "jkotas",
        "created_at": "2020-03-04T17:58:51Z",
        "body": "You can try. There may be other problems stacked up behind this one."
      }
    ]
  },
  {
    "number": 33027,
    "title": "Question about the future of nullable types",
    "created_at": "2020-03-01T13:12:40Z",
    "closed_at": "2020-03-01T15:56:29Z",
    "labels": [
      "question",
      "design-discussion",
      "area-Meta",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/33027",
    "body": "In a future version - let’s say .NET 6, would you consider making a breaking change in the CLR to redo nullable types and to make it a first class runtime feature?\n\nWhat would that take? I guess adding fields to the metadata and runtime checks. Simplified, of course.\n\nUpdating the compilers, obviously.\n\nCould you even preserve backwards compatibility with .NET 5 somehow?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/33027/comments",
    "author": "marinasundstrom",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-03-01T15:56:29Z",
        "body": "We have pretty high bar for breaking changes. Incrementally updating the existing design in non-breaking way is fine, but large scale breaking changes would not be acceptable.\r\n\r\nIf we believed that the right way to do nullable types is by making them a first class runtime feature, we would do it that way in the first place. The chance of that happening now is close to zero."
      }
    ]
  },
  {
    "number": 32755,
    "title": "gcc compiles __declspec (uuid (x)) with errors",
    "created_at": "2020-02-24T19:05:08Z",
    "closed_at": "2020-02-24T20:21:02Z",
    "labels": [
      "question",
      "area-Infrastructure-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/32755",
    "body": "ubuntu 18.04\r\ngcc7.4\r\ncoreclr3.1.2\r\ncommand:\r\n./build.sh gcc\r\nerror:\r\nsrc/pal/inc/rt/rpc.h:22:41: error: expected ‘)’ before ‘(’ token\r\n#define DECLSPEC_UUID(x) __declspec(uuid(x))\r\n\r\ngcc does not support uuid",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/32755/comments",
    "author": "lbhnrg2021",
    "comments": [
      {
        "user": "janvorli",
        "created_at": "2020-02-24T19:48:47Z",
        "body": "@lbhnrg2021 .NET Core 3.1 is not compilable with GCC, athough there were some changes in that direction. All the necessary changes are in the master  of the new runtime repo."
      }
    ]
  },
  {
    "number": 32286,
    "title": "DoStackSnapshot (async) deadlock",
    "created_at": "2020-02-14T06:40:07Z",
    "closed_at": "2020-12-10T00:02:28Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/32286",
    "body": "We were affected by deadlock introduced with profiler async call `DoStackSnapshot`. We have seen it on .Net Framework, but it should be applicable to any version of .Net Core on Windows too (only Windows, as other OS do not support async DoStackSnapshot).\r\n\r\nHere is condition. Profiler thread suspended application thread before calling `DoStackSnapshot`. \r\nApplication thread has next call stack:\r\n```\r\n00 ntdll!NtProtectVirtualMemory+0xa\r\n01 ntdll!LdrpChangeMrdataProtection+0x4e\r\n02 ntdll!LdrProtectMrdata+0x46\r\n03 ntdll!RtlInsertInvertedFunctionTable+0xdf\r\n04 ntdll!LdrpProcessMappedModule+0x1fd\r\n05 ntdll!LdrpMapAndSnapModules+0xa0\r\n06 ntdll!LdrpPrepareModuleForExecution+0xcc\r\n07 ntdll!LdrpLoadDll+0x36b\r\n08 ntdll!LdrLoadDll+0x99\r\n09 KERNELBASE!LoadLibraryExW+0xca\r\n0a crypt32!LoadDll+0x8c\r\n0b crypt32!CryptGetOIDFunctionAddress+0x2d8\r\n0c crypt32!_CallIsMyFileType2+0x57\r\n0d crypt32!_QueryRegisteredIsMyFileType+0xd4\r\n0e crypt32!CryptSIPRetrieveSubjectGuid+0x384\r\n0f crypt32!GetEmbeddedPKCS7+0x71\r\n10 crypt32!I_CryptQueryObject+0x176\r\n11 crypt32!CryptQueryObject+0x245\r\n12 clr!COMX509Certificate::QueryCertFileType+0x1b4\r\n13 [HelperMethodFrame_1OBJ: 00000051aed7e398] System.Security.Cryptography.X509Certificates.X509Utils._QueryCertFileType(System.String)\r\n14 System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromFile(System.String, System.Object, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\r\n15 System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)\r\n```\r\n\r\nProfiler thread has next call stack:\r\n```\r\n00 ntdll!NtWaitForAlertByThreadId+0xa\r\n01 ntdll!RtlAcquireSRWLockShared+0x128\r\n02 ntdll!RtlpxLookupFunctionTable+0x40\r\n03 ntdll!RtlLookupFunctionEntry+0x153\r\n04 clr!LazyMachState::unwindLazyState+0x119\r\n05 clr!HelperMethodFrame::GetFunction+0xf6\r\n06 clr!StackFrameIterator::NextRaw+0xa5f\r\n07 clr!StackFrameIterator::Filter+0x27e\r\n08 clr!StackFrameIterator::Init+0x185\r\n09 clr!Thread::StackWalkFramesEx+0x86\r\n0a clr!Thread::StackWalkFrames+0xbe\r\n0b clr!ProfToEEInterfaceImpl::DoStackSnapshotHelper+0x76\r\n0c clr!ProfToEEInterfaceImpl::DoStackSnapshot+0x31c\r\n```\r\n\r\nApplication thread holds CritSec `ntdll!LdrpLoaderLock` lock and looks like it also holds SRW lock, that probably was acquired in `ntdll!RtlpxLookupFunctionTable`. Profiler thread tries to acquire the same SRW lock in `ntdll!RtlpxLookupFunctionTable`. In our case application thread acquired some more locks, resulting in full dead-lock of all application thread.\r\n\r\nLooks like the application calls `CreateFromCertFile` often, which calls `KERNELBASE!LoadLibraryExW` internally on each attempt. So, this application reveal issue easily - while for most other application dead lock though loading library will be low-probability, a libraries usually are loaded finite amount of times.\r\n\r\nWe are discussing possible workarounds for this problem. Is it possible to predict if it is safe to call `DoStackSnapshot` at some particular moment? Will it be safe to move calling `DoStackSnapshot` into separate thread and kill that thread if no progress have been after some time? If it is not safe - may it introduce data corruption/additional locks or only some small memory leaks?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/32286/comments",
    "author": "iskiselev",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2020-02-14T06:48:14Z",
        "body": "/cc @noahfalk @davmason "
      },
      {
        "user": "davmason",
        "created_at": "2020-02-15T01:57:59Z",
        "body": "Hi @iskiselev, I am not super surprised you are seeing this sort of issue, the asynchronous mode of pausing a thread at a random state is pretty dangerous. Here are the ways I know to try and alleviate this:\r\n\r\n- As you suggest, you can monitor your snapshot thread and kill it if it pauses for too long. As long as you make sure to resume the thread you were trying to walk there shouldn't be any long term issues\r\n- One method we've used to solve similar problems in the past is to have a \"canary\" thread that can receive messages telling it to try and take locks. Then once you suspend a thread for DoStackSnapshot you can tell the canary thread the try and take the locks you're worried about (in this case loader, but there are other OS locks you can run in to the same issue with). If the thread reports that it can take the lock, you likely will be able to as well. If it pauses for a long amount of time, it's probably dangerous. This approach has the benefit that you don't need to kill any threads. Once you determine it's dangerous and resume the suspended thread, it should release any locks and then the canary thread should resume normal operation.\r\n- Use native stackwalking APIs to apply heuristics to see if the thread is stopped in a dangerous place. We don't use this approach internally so I can only brainstorm what heuristics would be used. A broad one would be don't try to walk a stack if threads are stopped in ntdll, although it may be too broad and lose too many samples.\r\n\r\nIn coreclr 3.0 we added the ICorProfilerInfo10::SuspendRuntime API to make profilers able to sample on Linux, but it also solves this problem. The runtime will use its internal suspension mechanisms that it uses for GCs to stop the runtime, and then all managed threads will be in a safe state to sample. Since we control the suspension, you never have to worry about threads holding locks outside of the CLR's control. And since we use stackwalking during suspensions for the GC you can also be guaranteed you'll never have to worry about any internal deadlocks either."
      },
      {
        "user": "tommcdon",
        "created_at": "2020-12-10T00:02:28Z",
        "body": "Closing issue as it looks like the question has been answered.  Please let us know if this is not correct and we will re-activate."
      }
    ]
  },
  {
    "number": 31698,
    "title": "Encoding.UTF8.GetString: The output char buffer is too small...",
    "created_at": "2020-02-03T21:57:21Z",
    "closed_at": "2020-02-04T00:46:00Z",
    "labels": [
      "question",
      "area-System.Text.Encoding",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31698",
    "body": "NET 3.1\r\n\r\nFeeding some garbage data into Encoding.UTF8.GetString, I occasionally get this exception:\r\n`System.ArgumentException: 'The output char buffer is too small to contain the decoded characters, encoding 'Unicode (UTF-8)' fallback 'System.Text.DecoderReplacementFallback'. (Parameter 'chars')'`\r\n\r\nStack trace:\r\n```\r\n   at System.Text.Encoding.ThrowCharsOverflow()\r\n   at System.Text.Encoding.ThrowCharsOverflow(DecoderNLS decoder, Boolean nothingDecoded)\r\n   at System.Text.Encoding.GetCharsWithFallback(ReadOnlySpan`1 bytes, Int32 originalBytesLength, Span`1 chars, Int32 originalCharsLength, DecoderNLS decoder)\r\n   at System.Text.UTF8Encoding.GetCharsWithFallback(ReadOnlySpan`1 bytes, Int32 originalBytesLength, Span`1 chars, Int32 originalCharsLength, DecoderNLS decoder)\r\n   at System.Text.Encoding.GetCharsWithFallback(Byte* pOriginalBytes, Int32 originalByteCount, Char* pOriginalChars, Int32 originalCharCount, Int32 bytesConsumedSoFar, Int32 charsWrittenSoFar)\r\n   at System.Text.UTF8Encoding.GetChars(Byte* bytes, Int32 byteCount, Char* chars, Int32 charCount)\r\n   at System.String.CreateStringFromEncoding(Byte* bytes, Int32 byteLength, Encoding encoding)\r\n   at System.Text.Encoding.GetString(ReadOnlySpan`1 bytes)\r\n   at ...Our code...\r\n```\r\n\r\nI was accidentally using it on binary data while doing some debugging.  \r\n\r\nIt happened using the ReadOnlySpan<byte> overload, but these byte arrays are the data:\r\n```\r\nnew byte[] { 1,6,104,97,115,104,116,120,1,32,125,34,109,16,93,67,238,247,111,164,124,222,214,204,168,122,3,194,48,190,150,196,26,251,175,111,65,1,97,0,30,248,0,4,207,225,40,0 } ;\r\nnew byte[] { 1,6,104,97,115,104,116,120,1,32,146,49,170,24,95,32,149,96,115,203,170,163,193,27,202,95,134,122,121,85,104,162,76,212,216,15,177,166,148,80,204,57,0,4,222,80,41,0 } ;\r\n```\r\n\r\nNeither of these is reproducible though.\r\n\r\nEven when visual studio has the \"Exception Thrown!\" exception window open and highlighted, re-executing the same statement doesn't throw an exception the second time.\r\n\r\nMy suspicion would be something to do with ArrayPool, if that's even used by this method.\r\n\r\nNot sure how to be more useful with this one...",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31698/comments",
    "author": "joshlang",
    "comments": [
      {
        "user": "GrabYourPitchforks",
        "created_at": "2020-02-04T00:40:04Z",
        "body": "Normally this means that the input buffer's contents have changed in the middle of the operation. The `Encoding.GetString(ReadOnlySpan<char>)` API performs two passes: the first pass to calculate the necessary `string` length, and the second pass to perform the actual conversion. If the data within the byte buffer changes between these two operations, the conversion routine might fail because the number of resulting output chars could have increased."
      },
      {
        "user": "GrabYourPitchforks",
        "created_at": "2020-02-04T00:42:34Z",
        "body": "@joshlang - double-check that another thread in your application isn't mutating the buffers passed to this API while the operation is in progress. If you're seeing that this exception still occurs with static data, please let me know so that we can investigate further."
      },
      {
        "user": "joshlang",
        "created_at": "2020-02-04T00:46:00Z",
        "body": "I just did.  I've confirmed that it's probably what happened.  I was calling TrySetResult on a TaskCompletionSource before doing the ghetto debug outputting statements that caused the exception.\r\n\r\nYou're a genius.  I'll close this issue.  Thanks!"
      }
    ]
  },
  {
    "number": 4116,
    "title": "Will CoreCLR support C++/CLI crossplat?",
    "created_at": "2020-01-30T22:16:48Z",
    "closed_at": "2020-01-31T18:58:36Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4116",
    "body": "I'm not sure whether this is the appropriate repo to ask this question. If not, please advise the correct one.\n\nI want to do .NET development in Linux. I haven't been able to do it yet due to lack of important features in Mono. One of them is C++/CLI. I wonder whether and/or when this will be available soon.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4116/comments",
    "author": "zer0n",
    "comments": [
      {
        "user": "safern",
        "created_at": "2020-01-31T18:44:13Z",
        "body": "cc: @jkotas "
      },
      {
        "user": "jkotas",
        "created_at": "2020-01-31T18:58:36Z",
        "body": "C++/CLI is Windows OS specific technology. We have no plans to port to other platforms."
      }
    ]
  },
  {
    "number": 2385,
    "title": " WebRequest.DefaultWebProxy Return null exeption",
    "created_at": "2020-01-30T13:40:09Z",
    "closed_at": "2020-01-30T14:34:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/2385",
    "body": "Hello,\r\n\r\nI have migrated my project .NET FrameWork to .NET Core, and i have a null exeption when i used \r\nWebRequest.DefaultWebProxy.GetType().GetProperty(\"WebProxy\", BindingFlags.NonPublic | BindingFlags.Instance);\r\n\r\n\r\n\r\nCordially",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/2385/comments",
    "author": "HASSEN-MEDDEB-ATOS",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2020-01-30T13:46:54Z",
        "body": "> WebRequest.DefaultWebProxy.GetType().GetProperty(\"WebProxy\", BindingFlags.NonPublic | BindingFlags.Instance);\r\n\r\nThis is trying to use private implementation details. They're private for a reason, and are in no way guaranteed to work the same from version to version."
      },
      {
        "user": "HASSEN-MEDDEB-ATOS",
        "created_at": "2020-01-30T14:01:37Z",
        "body": "Hello, thank you for your answer, what can i do in this situation, i readed in some other disccsussion that i should delete   WebRequest.DefaultWebProxy; beacause it's not supported, \r\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-01-30T14:03:55Z",
        "body": "> i readed in some other disccsussion that i should delete WebRequest.DefaultWebProxy; beacause it's not supported\r\n\r\nWebRequest.DefaultWebProxy should work fine.  Did you try it and it doesn't work?  If so, what version of .NET Core are you using?"
      },
      {
        "user": "HASSEN-MEDDEB-ATOS",
        "created_at": "2020-01-30T14:07:50Z",
        "body": "I used .Net Core 3.1, WebRequest.DefaultWebProxy.GetType().GetProperty(\"WebProxy\", BindingFlags.NonPublic | BindingFlags.Instance); at this line, it return NullExeption"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-01-30T14:08:42Z",
        "body": "Why are you doing \".GetType().GetProperty(\"WebProxy\", BindingFlags.NonPublic | BindingFlags.Instance)\"?  That's the bad part.  Don't do that ;)"
      },
      {
        "user": "HASSEN-MEDDEB-ATOS",
        "created_at": "2020-01-30T14:13:36Z",
        "body": "This will force the DefaultWebProxy to use default credentials\r\n wProxy.Credentials = System.Net.CredentialCache.DefaultNetworkCredentials;\r\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-01-30T14:23:05Z",
        "body": "You can do that with just WebRequest.DefaultWebProxy.  It is the IWebProxy.  You don't need to try to use its private members, which is what that NonPublic reflection code is trying to do.\r\n```C#\r\nWebRequest.DefaultWebProxy.Credentials = CredentialCache.DefaultNetworkCredentials;\r\n```"
      },
      {
        "user": "HASSEN-MEDDEB-ATOS",
        "created_at": "2020-01-30T14:27:42Z",
        "body": "Perfect ! tkank you, i find it also\r\n\r\nCordially ;) "
      }
    ]
  },
  {
    "number": 2213,
    "title": "Question: How to store Activity.Id before start it?",
    "created_at": "2020-01-27T09:47:52Z",
    "closed_at": "2020-07-17T02:24:57Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr",
      "tracking"
    ],
    "url": "https://github.com/dotnet/runtime/issues/2213",
    "body": "### Context:\r\nI have a special requirement to store \"dependencyActivity.id\" in a transaction, see a line of code attached below:\r\n**await SaveOutgoingEventAsync(String.Empty);**\r\nI am currently storing an empty string as a temp version of dependencyActivity.id, and update it to the actual value of dependencyActivity.Id after I start the dependencyActivity. Use this way to pass down the parent and child relationship to the next external process, dependencyActivity.Id as my downstream service's operationParentId.\r\n\r\n### Question:\r\n1: What is the best practice to store dependent id before I start and stop telemetry operation?\r\n\r\n### Code:\r\n```\r\npublic async Task<ReturnOrderDto> SubmitOrderAsync(SubmitOrderDto order)\r\n{\r\n    var executionStrategy = _orderDbContext.Database.CreateExecutionStrategy();\r\n    await executionStrategy.ExecuteAsync(async () =>\r\n    {\r\n        using (var transaction = _orderDbContext.Database.BeginTransaction(IsolationLevel.ReadCommitted))\r\n        {\r\n            //Some processing code\r\n            ......\r\n            ......\r\n\r\n            //Store empty string as dependencyActivity.Id in database\r\n            await SaveOutgoingEventAsync(String.Empty);\r\n            // Commit incoming, business and outgoing entities together in outbox pattern\r\n            await transaction.CommitAsync();\r\n        }\r\n    });\r\n\r\n    var dependencyActivity = new Activity(\"Publish Message\");\r\n    dependencyActivity.SetParentId(Activity.Current.Id);\r\n    dependencyActivity.Start();\r\n    var operation = _telemetryClient.StartOperation<DependencyTelemetry>(dependencyActivity);\r\n    var messageHeader = new KafkaMessageHeader(dependencyActivity.TraceId.ToString(), dependencyActivity.Id);\r\n    kafkaMessage.UpdateHeader(messageHeader);\r\n    await _publisher.ProduceAsync(kafkaMessage);\r\n    _telemetryClient.StopOperation(operation);\r\n    \r\n    //update previous stored empty Id to dependencyActivity.Id\r\n    outgoingEvent.UpdateOutgoingIntegrationEvent(dependencyActivity.TraceId.ToString(), dependencyActivity.Id);\r\n    outgoingEvent.MarkAsSent();\r\n    await _outgoingEventRepository.SaveChangesAsync();\r\n\r\n    return new ReturnOrderDto { OrderId = _orderEntity.OrderId };\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/2213/comments",
    "author": "shawnzxx",
    "comments": [
      {
        "user": "noahfalk",
        "created_at": "2020-03-27T22:51:59Z",
        "body": "A typical order of operations looks like:\r\n\r\n1) Start Activity\r\n2) Record the activity information\r\n3) Do some work\r\n4) Stop the activity\r\n\r\nIt is a domain specific judgement what work belongs inside the scope of the activity (step 3). The ID is created by invoking start so it is impossible to log the id before Start() has occurred, but you can delay it until later if you want to (as your example does).\r\n\r\nThe main risk of doing it later is that if the operation fails you might want the ID to diagnose but not have it. For example if await _publisher.ProduceAsync(kafkaMessage); threw an exception then outgoingEvent.UpdateOutgoingIntegrationEvent(…) would be skipped. You can either try to handle such failures (try/finally), decide that you don't need the ID in failure cases, or move the logging to occur before the failure.\r\n\r\nWas that the info you were looking for or something else?\r\n\r\n\r\nOne other random note, \"dependencyActivity.SetParentId(Activity.Current.Id);\" isn't needed, this will happen by default when an Activity is started."
      },
      {
        "user": "noahfalk",
        "created_at": "2020-07-17T02:24:57Z",
        "body": "Going to close this assuming the question is answered : ) If not we can always re-open."
      }
    ]
  },
  {
    "number": 1792,
    "title": "Don't call AssemblyLoadStarted Event",
    "created_at": "2020-01-14T10:22:02Z",
    "closed_at": "2020-05-29T22:30:48Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1792",
    "body": "we have try to wirte a profile:\r\nmy  SetEventMask code like this:\r\n```c++\r\nHRESULT CloudwiseInstrumentationImpl::SetEventMask()\r\n{\r\n\tDWORD dwEventMask = (DWORD)(\r\n\t\tCOR_PRF_MONITOR_ENTERLEAVE // method enter/leave\r\n\t\t| COR_PRF_MONITOR_THREADS // thread create and destroy\r\n\t\t| COR_PRF_ENABLE_FUNCTION_ARGS\r\n\t\t| COR_PRF_DISABLE_OPTIMIZATIONS\r\n\t\t| COR_PRF_DISABLE_INLINING\r\n\t\t| COR_PRF_DISABLE_TRANSPARENCY_CHECKS_UNDER_FULL_TRUST  // Disables security transparency checks that are normally done during just-in-time (JIT) compilation and class loading for full-trust assemblies. This can make some instrumentation easier to perform.\r\n\t\t| COR_PRF_MONITOR_CLASS_LOADS // ClassLoad and ClassUnload \r\n\t\t| COR_PRF_MONITOR_MODULE_LOADS // ModuleLoad, ModuleUnload, and ModuleAttachedToAssembly callbacks.\r\n\t\t| COR_PRF_MONITOR_ASSEMBLY_LOADS // AssemblyLoad and AssemblyUnload callbacks\r\n\t\t| COR_PRF_MONITOR_APPDOMAIN_LOADS // ModuleLoad, ModuleUnload, and ModuleAttachedToAssembly callbacks.\r\n\t\t| COR_PRF_MONITOR_JIT_COMPILATION\r\n\t\t| COR_PRF_ENABLE_REJIT\r\n\t\t| COR_PRF_USE_PROFILE_IMAGES\r\n\t\t| COR_PRF_MONITOR_JIT_COMPILATION\r\n\r\n\t\t);\r\n\r\n\treturn m_pICorProfilerInfo2->SetEventMask(dwEventMask);\r\n}\r\n``` \r\nI try to run a Winform app AssemblyLoadStarted  works good,but when I click my button to access my sqlserver data,I try to check my logs ,then no one assembly was load,my log code like this:\r\n\r\n```c++\r\nSTDMETHODIMP CloudwiseInstrumentationImpl::AssemblyLoadFinished(AssemblyID assemblyID, HRESULT hrStatus)\r\n{\r\n\tlogs::Logger::OutputInfo(_T(\"-----------------AssemblyLoadFinished-------------\"));\r\n\treturn S_OK;\r\n}\r\n```\r\nbut I was try to access a web app(run with iis)  it is works good,could you help?or give me some advise！\r\nthanks very much!\r\nElse.Li",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1792/comments",
    "author": "TheElse",
    "comments": [
      {
        "user": "hoyosjs",
        "created_at": "2020-01-16T00:56:53Z",
        "body": "@davmason Do you have any guidance here?"
      },
      {
        "user": "davmason",
        "created_at": "2020-01-25T00:49:38Z",
        "body": "Hi @TheElse, have you verified your profiler is loaded when you don't see the events? My suspicion is that something is preventing your profiler from loading."
      },
      {
        "user": "davmason",
        "created_at": "2020-05-29T22:30:48Z",
        "body": "I haven't heard anything back for a while so closing this issue. If you are still running in to problems feel free to reopen."
      }
    ]
  },
  {
    "number": 1652,
    "title": "Wrong value when using Unsafe.As<,> between byte? and byte",
    "created_at": "2020-01-12T15:13:03Z",
    "closed_at": "2020-01-12T15:58:08Z",
    "labels": [
      "question",
      "area-System.Runtime.CompilerServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1652",
    "body": "The following code returns 1 when non-nullable and 5 when nullable. If this is intended whats the fastest way to convert from a nullable byte array to a value type like byte / int / etc?\r\n\r\n```\r\nbyte?[] b = new byte?[] { 5 };\r\n\r\nvar one = Unsafe.As<byte?, byte>(ref MemoryMarshal.GetReference(b.AsSpan())); // => 1\r\nvar two = Unsafe.As<byte?, byte?>(ref MemoryMarshal.GetReference(b.AsSpan())); // => 5\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1652/comments",
    "author": "Symbai",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-01-12T15:58:08Z",
        "body": "> whats the fastest way to convert from a nullable byte array to a value type like byte / int / etc\r\n\r\nAllocate a new array and convert each element. `byte?` and `byte` have different layout, so there is no shortcut you can take."
      }
    ]
  },
  {
    "number": 1298,
    "title": "StringComparer.InvariantCultureIgnoreCase and string.ToUpperInvariant returns inconsistent result for subscript r.",
    "created_at": "2020-01-04T15:43:45Z",
    "closed_at": "2020-01-06T21:32:59Z",
    "labels": [
      "question",
      "area-System.Globalization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1298",
    "body": "# Details\r\n\r\nI was experimenting with my natural string comparer implementation when I noticed the following oddity with StringComparer.InvariantCultureIgnoreCase. \r\nIf I compare \"ᵣ\" and \"ʀ\" then I got \"ᵣ\" < \"ʀ\"\r\nIf I compare \"ᵣ\" and \"Ʀ\" then I got \"ᵣ\" = \"Ʀ\"\r\nIf I compare \"Ʀ\" and \"ʀ\" then I got \"Ʀ\" < \"ʀ\" \r\nMeanwhile:\r\nIf I call \"ʀ\".ToUpperInvariant() then I got \"Ʀ\".\r\nand if I call \"ᵣ\".ToUpperInvariant() then it didn't change and remains \"ᵣ\".\r\nSo these can't used consistently even if they are use the same invariant culture.\r\n\r\n# Environment\r\nPlatform: Windows 10 Pro version 1903 OS build: 18362.535\r\nTested under .net core 2.2 and .net core 3.1\r\n\r\n# XUnit tests\r\nThese are the unit tests I experimented with:\r\n\r\n        [Fact]\r\n        public void Uvular_trill_does_not_equal_to_subscript_r_if_case_ignored()\r\n        {\r\n            var invariantIgnoreCase = StringComparer.InvariantCultureIgnoreCase;\r\n         \r\n            invariantIgnoreCase.Compare(\"ᵣ\", \"ʀ\").Should().NotBe(0);\r\n\r\n            invariantIgnoreCase.Compare(\"ᵣ\", \"Ʀ\").Should().NotBe(0);\r\n\r\n            invariantIgnoreCase.Compare(\"Ʀ\", \"ʀ\").Should().Be(0);\r\n        }\r\n\r\n        [Fact]\r\n        public void ToUpperInvariant_works_consistently_with_InvariantCultureIgnoreCase()\r\n        {\r\n            var invariantIgnoreCase = StringComparer.InvariantCultureIgnoreCase;\r\n\r\n            var allCharacter = new string[char.MaxValue - char.MinValue];\r\n            for (char ch1 = char.MinValue; ch1 < char.MaxValue; ch1++)\r\n            {\r\n                allCharacter[ch1 - char.MinValue] = $\"{ch1}\";\r\n            }\r\n            var actual = allCharacter\r\n                .Select(character => new { character, code = (int)character[0] })\r\n                .OrderBy(e => e.character, invariantIgnoreCase)\r\n                .ThenBy(e => e.code)\r\n                .ToList();\r\n            var expected = allCharacter\r\n                .Select(character => new { character = character.ToUpperInvariant(), code = (int)character[0] })\r\n                .OrderBy(e => e.character, invariantIgnoreCase)\r\n                .ThenBy(e => e.code)\r\n                .ToList();\r\n            int i = 0;\r\n            for (; i < allCharacter.Length; i++)\r\n            {\r\n                if (actual[i].code != expected[i].code)\r\n                    break;\r\n            }\r\n            if (i == allCharacter.Length)\r\n                return;\r\n            actual[i].Should().Be(expected[i],\r\n                $\"At index {i} the same character should be\");\r\n        }",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1298/comments",
    "author": "faddiv",
    "comments": [
      {
        "user": "scalablecory",
        "created_at": "2020-01-05T01:37:56Z",
        "body": "@GrabYourPitchforks @tarekgh "
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2020-01-06T16:49:14Z",
        "body": "Those looking like the same doesn't really matter; what matters is the relationship between those characters defined in the Unicode standard.\r\n\r\nᵣ `U+1D63 Latin Subscript Small Letter R`\r\nʀ `U+0280 Latin Letter Small Capital R`\r\nƦ `U+01A6 Latin Letter Yr`\r\n\r\nU+1D63 having no 'upper-case' equivalent defined in the standard, compares different from the other two with IgnoreCase and remains the same after the ToUpperInvariant call; whereas U+0280 and U+01A6 are mapped as a lowercase and uppercase pair and therefore does compare equal with each other with IgnoreCase and returns different character.\r\n"
      },
      {
        "user": "tarekgh",
        "created_at": "2020-01-06T21:32:59Z",
        "body": "@faddiv looking at Unicode, \r\n\r\n```\r\n01A6;LATIN LETTER YR;Lu;0;L;;;;;N;LATIN LETTER Y R;;;0280;\r\n0280;LATIN LETTER SMALL CAPITAL R;Ll;0;L;;;;;N;;;01A6;;01A6\r\n```\r\n\r\nThis means the casing of `ᵣ` mapped to `ʀ` is correct. \r\n\r\nThe only problem now is why \"ᵣ\" = \"Ʀ\" (codepoint U+1D63)?  I checked that and I found this is true on Windows but not on Linux. Net Core gets the behavior form the underlying OS so this issue looks a Windows-specific issue and needs to be fixed in Windows if agreed on. I am going to close this issue as we cannot fix it in the .Net core and the fix has to come from Windows. I'll send this problem to the Windows team but feel free to log an issue for them too through Windows 10 Feedback Hub. Thanks.\r\n"
      },
      {
        "user": "faddiv",
        "created_at": "2020-01-07T12:39:39Z",
        "body": "Thank you. I also suspected this is a windows problem just I didn't know where should report it."
      }
    ]
  },
  {
    "number": 1239,
    "title": "MathF.CopySign is buggy when an input is NaN",
    "created_at": "2020-01-01T18:33:05Z",
    "closed_at": "2020-03-05T19:39:25Z",
    "labels": [
      "question",
      "area-System.Numerics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1239",
    "body": "The CopySign(float x, float y) in System.MathF has a bug when x or y is NaN.\r\nWith IEEE, NaN may have sign 1 or 0, mantissa anything, but biased exponent is 2^32 -1\r\nSo, in CopySign when you convert in 'int' the float.NaN you get a negative number.\r\n\r\nCopySign(float.NaN, 3.2F) gives with sign = 1 (negative in IEEE) but the sign should be 0\r\nCopySign(float.NaN, -3.2F) gives with sign = 0 (positive in IEEE) but the sign should be 1 (as -3.2F is negative). \r\n\r\nI did not verify in Math class (if you used same algorithm, it's same error).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1239/comments",
    "author": "FrantzUml",
    "comments": [
      {
        "user": "tannergooding",
        "created_at": "2020-01-01T21:22:03Z",
        "body": "I'm not able to reproduce the issue. Take the following simple program:\r\n```cs\r\n            var nan1 = float.NaN;\r\n            var nan2 = MathF.CopySign(float.NaN,  3.2f);\r\n            var nan3 = MathF.CopySign(float.NaN, -3.2f);\r\n\r\n            var bits1 = BitConverter.SingleToInt32Bits(nan1);\r\n            var bits2 = BitConverter.SingleToInt32Bits(nan2);\r\n            var bits3 = BitConverter.SingleToInt32Bits(nan3);\r\n\r\n            Console.WriteLine($\"{nan1:G17}    {bits1:x8}\");\r\n            Console.WriteLine($\"{nan2:G17}    {bits2:x8}\");\r\n            Console.WriteLine($\"{nan3:G17}    {bits3:x8}\");\r\n```\r\n\r\nThe output is:\r\n```\r\nNaN    ffc00000\r\nNaN    7fc00000\r\nNaN    ffc00000\r\n```"
      },
      {
        "user": "tannergooding",
        "created_at": "2020-01-01T21:27:38Z",
        "body": "The `CopySign` implementation is also rather trivial:\r\n```cs\r\n        public static unsafe float CopySign(float x, float y)\r\n        {\r\n            // This method is required to work for all inputs,\r\n            // including NaN, so we operate on the raw bits.\r\n \r\n            int xbits = BitConverter.SingleToInt32Bits(x);\r\n            int ybits = BitConverter.SingleToInt32Bits(y);\r\n \r\n            // If the sign bits of x and y are not the same,\r\n            // flip the sign bit of x and return the new value;\r\n            // otherwise, just return x\r\n \r\n            if ((xbits ^ ybits) < 0)\r\n            {\r\n                return BitConverter.Int32BitsToSingle(xbits ^ int.MinValue);\r\n            }\r\n \r\n            return x;\r\n        }\r\n```\r\n\r\nWe get the raw signed bits of each float. We then xor the bits together and check if its negative. This is functionally correct because all negative signed integers have the most significant bit set and all positive signed integers have the most significant bit cleared. Since the truth table for `xor` is:\r\n\r\n| 0 | 0 | 0 |\r\n| 0 | 1 | 1 |\r\n| 1 | 0 | 1 |\r\n| 1 | 1 | 0 |\r\n\r\nWe know that it will only be negative if the signs differed. If the signs don't differ, we can return the result as given. Otherwise, we need to flip the sign which is done by xor'ing with `int.MinValue` (`0x8000_0000`) which (given the above truth table) will preserve all bits but the most significant which is flipped (now making it match the sign of `y`)."
      },
      {
        "user": "FrantzUml",
        "created_at": "2020-01-01T22:27:27Z",
        "body": "> Hello,\r\nbut in your example, nan2 should be positive but is negative, and nan3 should be negative but is positive.\r\nIf you use the true function to get the IEEE bit sign of a 'float' as:\r\nprivate const int FLT_SGN_MASK = -1 - 0x7F_FF_FF_FF;\r\ninternal static int IEEESignBit(float number)\r\n{\r\n\tif (float.IsNaN(number))\r\n\t{\r\n\t\treturn ((System.BitConverter.SingleToInt32Bits(number) & FLT_SGN_MASK) != 0) ? 0 : 1;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn ((System.BitConverter.SingleToInt32Bits(number) & FLT_SGN_MASK) != 0) ? 1 : 0;\r\n\t}\r\n}\r\nthen you can verify that the sign bit of float.NaN is 0\r\n\r\nSo, if you calculate CopySign(-3F, float.NaN) you should have +3F but you get -3F\r\n\r\n\r\n> I'm not able to reproduce the issue. Take the following simple program:\r\n> \r\n> ```cs\r\n>             var nan1 = float.NaN;\r\n>             var nan2 = MathF.CopySign(float.NaN,  3.2f);\r\n>             var nan3 = MathF.CopySign(float.NaN, -3.2f);\r\n> \r\n>             var bits1 = BitConverter.SingleToInt32Bits(nan1);\r\n>             var bits2 = BitConverter.SingleToInt32Bits(nan2);\r\n>             var bits3 = BitConverter.SingleToInt32Bits(nan3);\r\n> \r\n>             Console.WriteLine($\"{nan1:G17}    {bits1:x8}\");\r\n>             Console.WriteLine($\"{nan2:G17}    {bits2:x8}\");\r\n>             Console.WriteLine($\"{nan3:G17}    {bits3:x8}\");\r\n> ```\r\n> \r\n> The output is:\r\n> \r\n> ```\r\n> NaN    ffc00000\r\n> NaN    7fc00000\r\n> NaN    ffc00000\r\n> ```\r\n\r\n"
      },
      {
        "user": "tannergooding",
        "created_at": "2020-01-01T23:31:48Z",
        "body": "> but in your example, nan2 should be positive but is negative, and nan3 should be negative but is positive.\r\n\r\n`nan2=0x7FC0_0000` and `nan3=0xFFC0_0000`, this means `nan2` is positive and `nan3` is negative; as expected all values above `0x8000_0000` are negative, all values below it are positive.\r\n\r\n> internal static int IEEESignBit(float number)\r\n\r\nThis function is not correct. All floating-point values (including Infinity, NaN, and Zero) represent the sign in the same way, by the most significant bit. If the most significant bit is set, it is negative; otherwise it is positive.\r\n\r\nGetting the sign of an IEEE floating-point value is as simple as `(BitConverter.SingleToInt32Bits(value) >> 31) & 1` and `(BitConverter.DoubleToInt64Bits(value) >> 63) & 1`.\r\n\r\n> So, if you calculate CopySign(-3F, float.NaN) you should have +3F but you get -3F\r\n\r\nThis is because `float.NaN` is negative by default. This is for back-compat reasons as x86 CPUs have traditionally returned a negative `NaN` and so we do the same."
      },
      {
        "user": "tannergooding",
        "created_at": "2020-03-05T19:39:25Z",
        "body": "Closing as I believe this has been resolved. Please reopen if you feel that was not the case."
      }
    ]
  },
  {
    "number": 1233,
    "title": "JIT naive assembly code generation",
    "created_at": "2020-01-01T01:27:09Z",
    "closed_at": "2020-01-02T04:29:55Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1233",
    "body": "I'm starting to dig into how the JIT works and generate machine code. I have two situations that I find weird and would like to get more information on. For me it's a lack of optimization, and so a potential issue. But I may be wrong, I'm just starting. Please forgive me if it's not the place for that kind of discussion.\r\n\r\nFirst is how constant are handled. Looking at the generated machine code I realized it looks like constants are put in a table and then the address is used. Like the snippet below:\r\n\r\n    21: \t\t\tAssert.AreEqual(c, 4.0);\r\n00007FFAF152980A C5 FB 10 0D 26 00 00 00 vmovsd      xmm1,qword ptr **[7FFAF1529838h]**  \r\n00007FFAF1529812 C5 FB 10 45 40       vmovsd      xmm0,qword ptr [rbp+40h]  \r\n00007FFAF1529817 E8 E4 E3 FF FF       call        00007FFAF1527C00 \r\n\r\nI was expecting 4.0 to be put directly in xmm1, not going through an indirect memory fetch.\r\n\r\nThe other one is when returning from a méthode. It seems that no matter what, the return value is put in a temporary stack slot. Doesn't seem to be always necessary, as the code below show:\r\n\r\n00007FFAF15297F8 FF 50 18             call        qword ptr [rax+18h]  \r\n00007FFAF15297FB C5 FB 11 45 38       vmovsd      qword ptr [rbp+38h],xmm0  \r\n00007FFAF1529800 C5 FB 10 4D 38       vmovsd      xmm1,qword ptr [rbp+38h]  \r\n00007FFAF1529805 C5 FB 11 4D 40       vmovsd      qword ptr [rbp+40h],xmm1 \r\n\r\n[rbp+38h] is the temp stack slot. [rbp+40h] is a local variable. There is no need to transit by [rbp+38h] to get the return value into xmm1. I understand we may need the temporary for later in the method. Although maybe not but let's say we need it. Yet xmm1 should get its value from xmm0 directly. No need for a stack access. ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1233/comments",
    "author": "ebfortin",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2020-01-01T06:27:25Z",
        "body": "You are looking at code compiled with optimizations off. The code compiled with optimizations on won't have the issues you have listed.\r\n\r\nNote that .NET Core 3.0+ has tiered compilation enabled by default. It means that most methods are compiled with optimizations off initially. You may want to either disable tiered compilation by setting COMPlus_TieredCompilation=0 environment variable, or call the method in a loop and only look at the disassembly once the tiered compilation kicks in."
      },
      {
        "user": "ebfortin",
        "created_at": "2020-01-01T15:19:42Z",
        "body": "I was expecting something like that. I will do some experiments. However I still find it strange that a constant assignment have to go through a memory fetch even in the non-optimized path. "
      },
      {
        "user": "mikedn",
        "created_at": "2020-01-01T18:00:23Z",
        "body": ">  I was expecting 4.0 to be put directly in xmm1, not going through an indirect memory fetch.\r\n\r\nThere era no SSE instructions that have immediate operands so it's typical to load floating point constants from memory."
      }
    ]
  },
  {
    "number": 1192,
    "title": "could be return actual Packet Length when called ReceiveFromXX ReceiveMessageFromXX",
    "created_at": "2019-12-27T16:19:23Z",
    "closed_at": "2019-12-28T17:13:59Z",
    "labels": [
      "question",
      "area-System.Net.Sockets"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1192",
    "body": "when we called **ReceiveFrom,ReceiveMessageFrom,ReceiveFromAsync and ReceiveMessageFromAsync**\r\ndeveloper can't get the **UDP Packet Logic-Size(actual length)** from the API.\r\n\r\n(im not sure that the data packets are already in the buffer, \r\nwhy can't the UDP actual length be returned to the developer while the API copying the buffer in the internal .)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1192/comments",
    "author": "sgf",
    "comments": [
      {
        "user": "scalablecory",
        "created_at": "2019-12-27T16:24:23Z",
        "body": "These APIs all return the actual number of bytes read, which may be less than the size of the buffer passed in."
      },
      {
        "user": "sgf",
        "created_at": "2019-12-27T16:29:48Z",
        "body": "> These APIs all return the actual number of bytes read, which may be less than the size of the buffer passed in.\r\n\r\nBut the developers do not know the readed data if is complete(Or truncated).Especially when I call ReceiveMessageFrom, ReceiveMessageFromAsyncXXX.\r\n\r\n"
      },
      {
        "user": "sgf",
        "created_at": "2019-12-27T16:32:34Z",
        "body": "If I call ReceiveFromAsync then the data will be lost(exception will be thrown by Api). If I set SocketFlag.Peek then I need to call the API multiple times(performance effects).\r\nBut I still can't get the actual data size anyway.I just know that the buffer length I gave is not enough?\r\n\r\nAt the same time, I also want to be able to calculate the length of the custom protocol at the application layer based on the length of the UDP protocol packet.\r\nIf it cannot be obtained, this will be a black box behavior, or I must add an additional Length field in the header of the custom protocol to indicate.That this is not allowed. As a protocol, the position of each byte is valuable. ."
      },
      {
        "user": "poizan42",
        "created_at": "2019-12-28T16:21:59Z",
        "body": "The max size of a udp packet is 64KiB. Unless you have 10000's of read requests in flight simultaneously you should probably just use a buffer that big. "
      },
      {
        "user": "sgf",
        "created_at": "2019-12-28T16:32:21Z",
        "body": "> The max size of a udp packet is 64KiB. Unless you have 10000's of read requests in flight simultaneously you should probably just use a buffer that big.\r\n\r\nyes (Maximum 64kb per packet), but I am currently building a high-performance UDP server.I have to try to save memory and support for high concurrency."
      },
      {
        "user": "scalablecory",
        "created_at": "2019-12-28T16:38:03Z",
        "body": "Okay, so you're looking for a way to get the exact size of the next packet `ReceiveFrom` will return. This makes sense.\r\n\r\nThere is no feature exposed to do this. I would follow @poizan42's advice, with a note that for IPv6 you can have larger than 64KiB so it's still not foolproof.\r\n\r\nWhat might work on POSIX platforms -- you'll want to test it and this would only work unofficially and unsupported, but I don't believe we currently do anything that would block this -- is to pass in `SocketFlags.Peek | SocketFlags.Truncated`. This would peek and return the required length. Windows does not support this so it will not be portable, and we might break you in future versions."
      },
      {
        "user": "sgf",
        "created_at": "2019-12-28T16:52:50Z",
        "body": ">  Windows does not support this so it will not be portable, and we might break you in future versions.\r\n\r\nBecause UDP packets have a length field, I thought it might be easier at first.\r\n\r\nSo, would you suggest me to **close** this issue or **wait** for it to achieve someday in the future?\r\n(Now i realize,It may not be possible for a long time, and must wait for the API to be added at the base of the OS.And adding APIs is not easy.)."
      },
      {
        "user": "scalablecory",
        "created_at": "2019-12-28T17:05:35Z",
        "body": "> So, would you suggest me to **close** this issue or **wait** for it to achieve someday in the future?\r\n\r\nClosing is reasonable. My feeling is that if there was demand for such a feature, it would have been added to Windows long ago. It seems unlikely at this point that a new significant business need would be found."
      }
    ]
  },
  {
    "number": 1191,
    "title": "How to disable using HTTP_PROXY as default",
    "created_at": "2019-12-27T16:05:19Z",
    "closed_at": "2019-12-28T16:07:11Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1191",
    "body": "#36553\r\n\r\nHow can we turn off this new default implementation?\r\n\r\nI have environment variables HTTP_PROXY. But I want to use system-level proxy default instead of environment variables. I don't want to delete the environment variables because it used by other applications. How can I set to go for system proxy?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1191/comments",
    "author": "dhmuralikrishna",
    "comments": [
      {
        "user": "scalablecory",
        "created_at": "2019-12-27T16:19:58Z",
        "body": "You'll need to remove the envvars, either prior to launching the app or in your app itself prior to using HttpClient:\r\n\r\n```c#\r\nEnvironment.SetEnvironmentVariable(\"HTTP_PROXY\", null);\r\nEnvironment.SetEnvironmentVariable(\"HTTPS_PROXY\", null);\r\nEnvironment.SetEnvironmentVariable(\"ALL_PROXY\", null);\r\nEnvironment.SetEnvironmentVariable(\"NO_PROXY\", null);\r\n```"
      },
      {
        "user": "dhmuralikrishna",
        "created_at": "2019-12-28T16:07:08Z",
        "body": "Thanks that works. You are awesome 👏 "
      }
    ]
  },
  {
    "number": 1186,
    "title": "Compiling and unloading code at runtime",
    "created_at": "2019-12-27T10:10:34Z",
    "closed_at": "2020-01-15T13:26:17Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1186",
    "body": "Hello,\r\nim using .net core (raspberry pi) to hosting an telegram bot. The bot should be able to be the most time online. But also when i have an updated code, i want the new code running. I got it already with the AssemblyLoadContext Code from some pages to work. Now the Problem is that i cant recompile the new code. I get everytime AssemblyLoadContext doesnt contain the Function called Unload. And when i dont use this, i get the error The Code with the same name already loaded. But its a fully new source code. Can someone help me maybe?\r\nThats my code it works 1time compiled. Some variables are useless without context, but they needed. I have the if else case at bottom, to look if the code compiled successfully use the new code, otherwise the old one. And there it runs into failing after recompile other code. Some variables are also to look at the other thread which status is now. Cause i dont found a solution to unload the code at other functions. So thread starting and using in other functions outside this thread.\r\n\r\nprivate static void compilecode()\r\n        {\r\n            threadrunning = true;\r\n            Console.WriteLine(\"Thraed started...\");\r\n            string code = \"\";\r\n            string path = @\"/home/pi/Desktop/program_compile.cs\";\r\n            if (File.Exists(path))\r\n                code = File.ReadAllText(path);\r\n            \r\n            var dotnetCoreDirectory = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory();\r\n\r\n            var compilation = CSharpCompilation.Create(\"Testing\")\r\n                .WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))\r\n                .AddReferences(\r\n                    MetadataReference.CreateFromFile(typeof(object).GetTypeInfo().Assembly.Location),\r\n                    MetadataReference.CreateFromFile(typeof(Console).GetTypeInfo().Assembly.Location),\r\n                    MetadataReference.CreateFromFile(Path.Combine(dotnetCoreDirectory, \"mscorlib.dll\")),\r\n                    MetadataReference.CreateFromFile(Path.Combine(dotnetCoreDirectory, \"netstandard.dll\")),\r\n                    MetadataReference.CreateFromFile(Path.Combine(dotnetCoreDirectory, \"System.Runtime.dll\")))\r\n                .AddSyntaxTrees(CSharpSyntaxTree.ParseText(code));\r\n            /*\r\n            // Debug output. In case your environment is different it may show some messages.\r\n            foreach (var compilerMessage in compilation.GetDiagnostics())\r\n                Console.WriteLine(compilerMessage);\r\n            */\r\n            using (var memoryStream = new MemoryStream())\r\n            {\r\n                var emitResult = compilation.Emit(memoryStream);\r\n                if (emitResult.Success)\r\n                {\r\n                    memoryStream.Seek(0, SeekOrigin.Begin);\r\n\r\n                    var context = AssemblyLoadContext.Default;\r\n                    assemblycontext = context;\r\n                    context.IsCollectible = true;\r\n                    code_compiled = context.LoadFromStream(memoryStream);\r\n                    compiling_status = true;\r\n                    compiling_done = true;\r\n                    unloading_assembly = false;\r\n                    while (!unloading_assembly) { }\r\n                    GC.Collect();\r\n                    GC.WaitForPendingFinalizers();\r\n                    if (context.IsCollectible)\r\n                        context.Unload();\r\n                    else\r\n                        context = null;\r\n                    unloaded_assembly = true;\r\n                    unloading_assembly = false;\r\n                }\r\n                else if (assemblycontext != null)\r\n                {\r\n                    memoryStream.Seek(0, SeekOrigin.Begin);\r\n                    \r\n                    var context = assemblycontext;\r\n                    context.IsCollectible = true;\r\n                    code_compiled = context.LoadFromStream(memoryStream);\r\n                    running_old_code = true;\r\n                    compiling_status = false;\r\n                    compiling_done = true;\r\n                    unloading_assembly = false;\r\n                    while(!unloading_assembly) { }\r\n                    GC.Collect();\r\n                    GC.WaitForPendingFinalizers();\r\n                    if (context.IsCollectible)\r\n                        context.Unload();\r\n                    else\r\n                        context = null;\r\n                    unloaded_assembly = true;\r\n                    unloading_assembly = false;\r\n                }\r\n                else\r\n                {\r\n                    running_old_code = false;\r\n                    compiling_status = false;\r\n                    compiling_done = true;\r\n                }\r\n            }\r\n            Console.WriteLine(\"Thread ended...\");\r\n            threadrunning = false;\r\n        }",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1186/comments",
    "author": "daniprog",
    "comments": [
      {
        "user": "Gnbrkm41",
        "created_at": "2019-12-27T11:24:34Z",
        "body": "I'm not sure if there would be a safe / reliable way to unload an assembly after it has been loaded. There could be other threads and stuffs that are already executing with the old assembly.\r\n\r\nNot really an answer to this question... but wouldn't it be much easier to make a watcher app/script of some sort and let that download the updated executable (that has been compiled elsewhere), close the old version & launch the new version? "
      },
      {
        "user": "bugtesterdani",
        "created_at": "2019-12-27T11:48:46Z",
        "body": "Maybe there could be something. But I wanted it to use it with that😅. When no answer is how to unload it (i forgot to say I can’t unload cause it’s also not Collectiable), I should make it with an bash script you told. It’s not easier I think, but the way it would really work (not the best way).\r\n\r\nAnd there will be no executing anymore in any other threads of this assembly. So there should be no Problem. And the full Programm is paused while unloading and new loading. But not while compiling."
      },
      {
        "user": "Rohansi",
        "created_at": "2019-12-31T17:35:48Z",
        "body": "You need to load your code into a separate `AssemblyLoadContext` instead of `AssemblyLoadContext.Default`.\r\n\r\nEvery time you unload your separate `AssemblyLoadContext` you must discard it and create a new one when you want to load code again.\r\n\r\nEvery single use of the code loaded from the collectible ALC must be cleaned up and collected by the GC. This could be instances of classes, event handlers, etc. The GC must also collect the ALC instance before unloading can occur.\r\n\r\nUnloading might take a few GC collect cycles to complete as long as the conditions above are followed."
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-01-15T13:26:17Z",
        "body": "Answer by @Rohansi is the correct approach. Please reopen this or open a new issue if you still run into problems."
      }
    ]
  },
  {
    "number": 1144,
    "title": "Check Type bases without reflection",
    "created_at": "2019-12-24T17:36:56Z",
    "closed_at": "2019-12-24T17:49:33Z",
    "labels": [
      "question",
      "area-System.Reflection",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1144",
    "body": "Does the CLR or MSIL support a way of determining if a type is cast able to another type without using reflection?\r\n\r\nIe. \r\n\r\nIf(T is IEnumerable)...\r\n\r\nWhereT is is a type, not an instance of a type. ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1144/comments",
    "author": "TonyValenti",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-12-24T17:49:33Z",
        "body": "`Type.IsAssignableFrom` API is the way to do this. Note that this API is the fast light-weight reflection. If there was other way to do this, it would have very similar performance."
      }
    ]
  },
  {
    "number": 412,
    "title": "Question about dependencies",
    "created_at": "2019-11-30T19:56:13Z",
    "closed_at": "2019-11-30T23:26:45Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/412",
    "body": "I would like to ask, how to add dependenci to another project, which isn't in solution?\r\nFor example: If I would like use System.Runtime.Serialization in System.Text, how should I add such dependenci or it shouldn't be done like that.\r\n\r\nRegards",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/412/comments",
    "author": "piotrsz1234",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-11-30T23:26:45Z",
        "body": "This is done via `<Reference Include=\"assembly name\" />` element in the .csproj file.\r\n\r\n> System.Runtime.Serialization in System.Text\r\n\r\nSystem.Runtime.Serialization and System.Text are namespace names. The `Reference` element takes assembly names. Each namespace can be implemented by many different assemblies. You need to find out which assembly implements the relevant part of the namespace that you would like to add a dependency to.\r\n\r\nNote that we are deliberate about introducing dependencies between components. For example, we would not want to add more dependencies on System.Runtime.Serialization.Formatters because of it is deprecated legacy non-secure technology."
      }
    ]
  },
  {
    "number": 31571,
    "title": "Simplifying the OrderedEnumerable.TryGetFirst method ",
    "created_at": "2019-11-26T13:29:17Z",
    "closed_at": "2020-02-01T05:41:28Z",
    "labels": [
      "question",
      "area-System.Linq"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31571",
    "body": "I've noticed, that method TryGetFirst in OrderedEnumerable, after finding the matching value, is still searching. I'd like to ask, does it has to be done like this, because some of the cases, or that could be simplifyed to simple search loop.\r\n\r\nSorry for bad English\r\nRegards",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31571/comments",
    "author": "piotrsz1234",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2019-11-26T13:36:00Z",
        "body": "It needs to be this way. The \"Ordered\" part of the name doesn't mean it's already ordered, but that it represents something that's expected to be. As such, to find the \"first\" in the resulting sorted set, we need to look at every element. This is actually an optimization: the alternative would be to sort and then get the first, which would be O(n log n) rather than O(n)."
      }
    ]
  },
  {
    "number": 31539,
    "title": "JsonIgnore",
    "created_at": "2019-11-21T13:31:25Z",
    "closed_at": "2020-02-01T05:37:46Z",
    "labels": [
      "question",
      "area-System.Text.Json"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31539",
    "body": "\r\nI am confused with \"JsonIgnore\", which one should I use? NewtonSoft.Json or System.Text.Json.Serialization both do not work fully.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31539/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "Gnbrkm41",
        "created_at": "2019-11-22T02:21:51Z",
        "body": "I expect S.T.Json.Serialization.JsonIgnoreAttribute to work when using System.Text.Json and the Newtonsoft one when using Json.NET.\r\n\r\nHow are you using it & How does it not work?"
      },
      {
        "user": "layomia",
        "created_at": "2019-11-23T12:06:19Z",
        "body": "@LeonardoMS01, can you provide some more context about what you are trying to do? A code snippet showing the scenario would be great."
      },
      {
        "user": "layomia",
        "created_at": "2019-11-25T18:33:28Z",
        "body": "Closing this issue. Please feel free to open another issue if you identify a proble with JsonIgnore."
      }
    ]
  },
  {
    "number": 13810,
    "title": "Single .NET Core app targeting multiple runtimes",
    "created_at": "2019-11-21T12:19:11Z",
    "closed_at": "2020-01-31T08:28:33Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13810",
    "body": "I am sorry if is this the wrong repo, I am not sure where to ask.\r\n\r\nI have a .NET Core app project that calls a native library using `[DllImport]`. I have 3 versions of the native library for win-x86, win-x64, and linux-x64 inside `runtimes` folder following this structure: `runtimes\\win-x86\\native\\native.dll`, and the same for the others (except Linux as `libnative.so`).\r\n\r\nAnd I have this in the project file:\r\n```xml\r\n    <Content Include=\"runtimes\\**\\*\">\r\n      <PackagePath>%(Identity)</PackagePath>\r\n      <Pack>true</Pack>\r\n    </Content>\r\n```\r\nWhen I run the app, it crashes with \"DLL not found\" errors, even though the runtimes folder is correctly copied to the output folder.\r\n\r\nI have tried to use MSBuild targets, and it works by placing the `native.dll` next to `myapp.dll` in the output folder. But I don't want this, since I want a single built app to work for all supported runtimes specified above, I don't want to build 3 separate builds. I am expect .NET Core host to choose the proper one based on RID of the host.\r\n\r\nIs this possible?\r\n\r\nI have noticed that if I package my the native.dlls to a `nupkg`, and then import it to myapp project, it will work, and .NET Core runtime can find the proper native.dll inside `runtimes` folder. But I don't want to keep packaging to a nupkg locally and copying it to .nuget cache each time the native libraries change.\r\n\r\nBtw, SkiaSharp, HarfBuzzSharp, SharpFont, all of them keep their native libraries in the `runtimes` folder, and they work like a charm.\r\n\r\nAppreciate your help.\r\nIs this possible?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13810/comments",
    "author": "Ghasan",
    "comments": [
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-11-21T16:48:26Z",
        "body": "> I have noticed that if I package my the native.dlls to a nupkg, and then import it to myapp project, it will work\r\n\r\nThe reason this works is that by adding this via nuget the native dependency is known at build time and the corresponding native library is correctly added to the deps.json.  Once it is in the deps.json, the host will inform the runtime on where to load this file at runtime.  When looking for native binaries at runtime, coreclr only looks in 3 places: paths declared by the deps.json, next to the assembly, and via dlopen/loadlibrary.\r\n\r\nYou can emulate this same behavior by adding the necessary entries to the deps.json.  There is no official way to update the deps.json after build, though I think it is worth an investigation as a potential mitigation.  \r\n\r\ncc @nguerrera "
      },
      {
        "user": "Ghasan",
        "created_at": "2019-11-22T06:17:55Z",
        "body": "Thanks, Jeff. I see now, why it behaves so. I found those tickets too regarding the same thing:\r\ndotnet/sdk#765\r\nNuGet/Home#4514\r\n\r\nI think I might look into specifying the library path in code.\r\n\r\nYou may close this ticket."
      }
    ]
  },
  {
    "number": 31471,
    "title": "BitArray's LeftShift and RightShift are not available on .NET Framework 4.7.2",
    "created_at": "2019-11-12T02:06:23Z",
    "closed_at": "2020-02-01T05:29:53Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31471",
    "body": "The methods LeftShift and RightShift of BitArray seems to be available on this repo, but I can't use it on .NET Framework 4.7.2. Is this a normal situation?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31471/comments",
    "author": "Xstoudi",
    "comments": [
      {
        "user": "scalablecory",
        "created_at": "2019-11-12T04:08:32Z",
        "body": "This repo is for .NET Core, not .NET Framework. `LeftShift` was added as part of .NET Core 2.0.\r\n\r\nIt is normal. APIs have diverged a fair amount in Core from where they were in Framework."
      }
    ]
  },
  {
    "number": 31419,
    "title": "about method Write(byte[] buffer, int offset, int count)   the  class of memoryStream ",
    "created_at": "2019-11-07T08:26:40Z",
    "closed_at": "2020-02-01T05:24:09Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31419",
    "body": "if ((count <= 8) && (buffer != _buffer))\r\n            {\r\n                int byteCount = count;\r\n                while (--byteCount >= 0)\r\n                {\r\n                    _buffer[_position + byteCount] = buffer[offset + byteCount];\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Buffer.BlockCopy(buffer, offset, _buffer, _position, count);\r\n            }\r\n\r\n\r\nwhy does the  count of buffer more than 8 and Less than or equal to 8 use different copy method",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31419/comments",
    "author": "changhengyu",
    "comments": [
      {
        "user": "Gnbrkm41",
        "created_at": "2019-11-07T08:50:52Z",
        "body": "`Buffer.BlockCopy` is implemented with a private method called `Memmove` which either calls a native `memmove` function, probably written in assembly for maximum performance, or for smaller sizes, use tricks like unrolling and moving bytes in blocks to move the data more efficiently. The number 8 there probably is something that was figured out to be faster with a simple loop, because the Memmove method involves a few checks which probably isn't worth it for small data.\r\n\r\n(tl;dr: performance optimisations)"
      },
      {
        "user": "changhengyu",
        "created_at": "2019-11-07T08:55:51Z",
        "body": " OK ，I see what your mean，thank you"
      }
    ]
  },
  {
    "number": 13723,
    "title": "Type object in assembly loaded with Assembly.LoadFile is different from the same type which is directly referenced",
    "created_at": "2019-11-04T15:09:13Z",
    "closed_at": "2020-03-12T13:36:09Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13723",
    "body": "Hi,\r\n\r\nI have a problem with migrating our application to .net core 3.0.\r\n\r\nI've created a small example which shows the same problem as I have in my application:\r\n\r\nClassLibrary1, netstandard2.0 has the following class:\r\n```\r\n    public class MyTestClass\r\n    {\r\n    }\r\n\r\n```\r\n\r\nConsoleApp1 has a reference to ClassLibrary1, netcoreapp3.0\r\n```\r\n            string path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"ClassLibrary1.dll\");\r\n            var types = Assembly.LoadFile(path).DefinedTypes.Select(x => x.AsType());\r\n            var ok = types.Contains(typeof(MyTestClass));\r\n\r\n```\r\n\r\nWhen the ConsoleApp1 targets .NET 4.7.2 the value of the `ok` variable is `true`. In .NET Core 3.0 it is `false`. Why?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13723/comments",
    "author": "zgabi",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-11-04T16:59:57Z",
        "body": "`Assembly.LoadFile` in .NET Core loads the assembly into its own context. It does not try to unify it with other assemblies that happen to be loaded into the default context."
      },
      {
        "user": "vitek-karas",
        "created_at": "2020-03-12T13:36:09Z",
        "body": "If this is still an issue, please feel free to reopen or open a new one."
      }
    ]
  },
  {
    "number": 31386,
    "title": "Reasons behind having duplicate type for S.R.CS.Unsafe and Internals.R.CS.Unsafe",
    "created_at": "2019-11-04T06:32:21Z",
    "closed_at": "2020-02-01T05:20:31Z",
    "labels": [
      "question",
      "area-System.Runtime.CompilerServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31386",
    "body": "All the members are identical, but it seems weird to have two separate types that have all the same members; is there a reason behind that? It doesn't feel quite right, and would be nice if it could be merged into S.R.CS one.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31386/comments",
    "author": "Gnbrkm41",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-11-04T16:55:51Z",
        "body": "Internal.S.R.CS.Unsafe has a subset of methods for internal consumption by S.P.CoreLib. It is implement by complex IL patching - since it is not possible to write IL in CoreLib directly.\r\n\r\nS.R.CS.Unsafe has all methods, it is implemented directly in IL and it ships as separate NuGet package.\r\n\r\nIf we merged these two:\r\n- We would need to use the complex IL patching (or some alternative) to implement all methods.\r\n- S.R.CS.Unsafe NuGet package would be dead. Once the type moves from NuGet package to CoreLib, the NuGet package gets frozen and cannot evolve anymore."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-11-04T17:07:16Z",
        "body": "I see. Thanks for the clarification!"
      }
    ]
  },
  {
    "number": 13626,
    "title": "LOCK_WRITE enum value (in pal/inc/rt/objidl.h) conflicts with fcntl.h on Linux",
    "created_at": "2019-10-23T13:46:39Z",
    "closed_at": "2020-01-31T08:11:52Z",
    "labels": [
      "question",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13626",
    "body": "Hi!\r\n\r\nIs there anything we can do? @jkotas \r\n\r\n```\r\n.../pal/inc/rt/objidl.h:106:7: error: expected identifier\r\n    {   LOCK_WRITE      = 1,\r\n        ^\r\n/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h:240:21: note: expanded from macro 'LOCK_WRITE'\r\n# define LOCK_WRITE     128     /* ... which allows concurrent write operations.  */\r\n                        ^\r\n1 error generated.\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13626/comments",
    "author": "k15tfu",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-10-23T18:14:06Z",
        "body": "It does not seem to be used anywhere. Feel free to delete it."
      },
      {
        "user": "k15tfu",
        "created_at": "2019-10-24T22:11:11Z",
        "body": "@jkotas Would you mind if I delete LOCKTYPE enum entirely?"
      }
    ]
  },
  {
    "number": 31259,
    "title": "Timeout or Keep-Alive for open connection from HttpCompletionOption.ResponseHeadersRead ?",
    "created_at": "2019-10-23T03:48:06Z",
    "closed_at": "2020-03-19T16:42:45Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31259",
    "body": "Hi,\r\n\r\nwe have noticed that some of the background workers on our services occasionally just stop. \r\n\r\nInvestigating the issue, I found that a library we use is using ResponseHeadersRead and that the workers stop because the target machine disappeared without explicitly closing the socket.\r\n\r\nOur workers have stopped working for many hours ( before we inevitably restart them ), so it does not seem like these open connections have any timeouts or keep-alives on them.\r\n\r\nMy questions are:\r\n\r\n1) Is there any way we can set a application-wide timeout or keep-alive or even maximum read time for these open stream connections?\r\n\r\n2) Is there any way to abort an on-going read? I have tried disposing of stream, but the other thread remains blocked trying to read from the socket.\r\n\r\n3) Can you offer some guidance or best practices around the problem? Streams are very abstract, and if all your method receives is a Stream, it's next to impossible to know how to safely work with the given stream. Furthermore, none of the convenience methods seem to support cancellation tokens, and any synchronous reads appear doomed to begin with. \r\n    - `HttpContent.ReadAsStringAsync` ? No CTS Support => Application Deadlock Potential\r\n    - `HttpContent.ReadAsByteArrayAsync` ? No CTS Support => Application Deadlock Potential\r\n    - `HttpContent.ReadAsStreamAsync` > `StreamReader.ReadToEndAsync` ? No CTS Support => Application Deadlock Potential\r\n    - `HttpContent.ReadAsStreamAsync` > `StreamReader.ReadLineAsync` ? No CTS Support => Application Deadlock Potential\r\n    - `HttpContent.ReadAsStreamAsync` > Any synchronous call that reads from a stream => Application Deadlock Potential\r\n\r\nIt feels like the exact situation that `Stream.CanTimeout` , `Stream.ReadTimeout` and `Stream.WriteTimeout` was made for, but for some reason they are not supported either.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31259/comments",
    "author": "Bio2hazard",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2019-10-23T04:01:33Z",
        "body": ">It feels like the exact situation that Stream.CanTimeout , Stream.ReadTimeout and Stream.WriteTimeout was made for, but for some reason they are not supported either.\r\n\r\nThose stream properties are legacy properties designed in the days before async/await/cancellationtokens. That mechanism for \"timeout\" is not supported since async streams use cancellationtoken as the mechanism mostly.\r\n\r\n>Furthermore, none of the convenience methods seem to support cancellation tokens, and any synchronous reads appear doomed to begin with.\r\n\r\nAdding cancellation tokens to HttpClient and HttpContent methods is issue dotnet/runtime#916 and we plan to address it via API review."
      },
      {
        "user": "Bio2hazard",
        "created_at": "2019-10-23T05:39:54Z",
        "body": "Thank you for the answer.\r\n\r\n> Those stream properties are legacy properties designed in the days before async/await/cancellationtokens. That mechanism for \"timeout\" is not supported since async streams use cancellationtoken as the mechanism mostly.\r\n\r\nI can't help but disagree a bit. The problem is that all we have is `Stream`. There is no explicit `AsyncStream` that ony exposes Async methods. Also, if you inherit from `Stream`, you are only required to provide implementations for synchronous read / write calls.  \r\n\r\nDon't get me wrong, I know it's to preserve compatibility, but so long as synchronous methods remain a first-class feature of Streams, a mechanism for timing out is needed.\r\n\r\nFurthermore, consider this example:\r\n```c#\r\nusing (var responseStream = await httpResponse.Content.GetStreamAsync())\r\nusing (var reader = new StreamReader(responseStream))\r\n{\r\n    responseStream.ReadTimeout = 5_000;\r\n    return await reader.ReadToEndAsync();\r\n}\r\n```\r\nA great feature of Streams is how they can be used to very cleanly build a near allocation-free pipeline of multiple transforms, readers and writers.\r\n\r\nOften after setting up the pipeline you just want to run all available data through it, and that process is usually kicked off on the topmost level of the pipeline ( in the example that would be StreamReader ), which then is the only place and only opportunity where you could pass in the CancellationToken.\r\n\r\nSetting the read timeout on the other hand allows for customizing the acceptable timeout anywhere in the pipeline. In the example given, I would know that responseStream involves networking and needs to have a timeout set, while StreamReader only acts on data in-memory and can't just stall.\r\n\r\nThe other problem is that the analyzers built into Visual Studio ( + StyleCop + FxCop ) do not recommend to use the Async variants over the synchronous variants, even when used inside an asynchronous method. They will recommend that you pass in a cancellation token, but they will not recommend that you switch from `reader.ReadToEnd();` to `await reader.ReadToEndAsync();`. \r\n\r\nIt just seems exceedingly easy to accidentally lock up your entire application. It's also hell to debug since there are no exceptions, no errors, no microsoft messages of elevated severity to ilogger - nothing. The application doesn't fault either, the thread simply just stalls. None of the learning materials online take this situation into consideration either - in an attempt to be simple, they use the helper methods which as mentioned don't support cancellation. There are no warnings on the `ResponseHeadersRead ` flag or on HttpContent. "
      },
      {
        "user": "karelz",
        "created_at": "2020-03-19T16:42:45Z",
        "body": "Triage:\r\n* `HttpContent.ReadAsStringAsync` and `HttpContent.ReadAsByteArrayAsync` are addressed in PR #686 (in .NET 5).\r\n* `StreamReader` overloads are tracked in #20824\r\n\r\nClosing."
      }
    ]
  },
  {
    "number": 31182,
    "title": "System.Threading.Channels. Ability to delete an item from channel queue only after its successful processing.",
    "created_at": "2019-10-16T07:12:06Z",
    "closed_at": "2020-02-01T04:58:47Z",
    "labels": [
      "question",
      "area-System.Threading.Channels"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31182",
    "body": "Hi,\r\nIs it possible to somehow organize reading from the System.Threading.Channel with confirmation?\r\nI want to read data from a channel, and if I could not process it, so that the data remains in the channel queue, for example, until the next processing attempt.\r\n```\r\nvar channel = Channel.CreateBounded<LogItem>(new BoundedChannelOptions(100)\r\n            {\r\n                FullMode = BoundedChannelFullMode.DropOldest,\r\n                AllowSynchronousContinuations = true,\r\n                SingleReader = true,\r\n                SingleWriter = false\r\n            });\r\n//...\r\nvar item = await channel.Reader.ReadAsync();\r\nawait DoSomeWorkOnItemAsync(item); //Now, if DoSomeWorkOnItemAsync throws exception, I will lose item\r\n```\r\nOf course, I can add an item to the top of the queue, but I need the old items that have not been processed to be pushed out of the queue when it is full.\r\n\r\nIs it possible for the channel to have an API like below?:\r\n```\r\nusing (PickedResult<LogItem> peekedItem = await channel.Reader.PeekAsync())\r\n{\r\n    await DoSomeWorkOnItemAsync(peekedItem.Value);\r\n    peekedItem.CommitRead(); // Confirmed read. Item removes from channel's queue\r\n}\r\n```\r\n\r\nThank you very much for your reply in advance.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31182/comments",
    "author": "neyromant",
    "comments": [
      {
        "user": "tarekgh",
        "created_at": "2019-10-16T16:29:02Z",
        "body": "CC @stephentoub \r\n\r\nI believe the proposal here will not work nicely in the multithreading scenarios. imagine 2 threads calling channel.Reader.PeekAsync() in same time. maybe what can help is adding API like `InsertFront(item)` which can allow inserting item in the front of the queue and not at the end. \r\n\r\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-10-16T17:56:57Z",
        "body": "It sounds like you're looking for a solution ala two-phase commit.  This is complicated to support, both in implementation and in API, and I don't think it makes sense to add that to the channels library.  However, the TPL Dataflow library does include support for this, with its interfaces allowing you to reserve and then either consume or release a reservation on an item.\r\n\r\nFor channels, whether a \"peek\" makes sense would I think depend on exactly the semantics you care about.  I see you've set the options to be SingleReader, which presumably means you don't have to worry about multiple consumers reading from the channel.  In which case the only concurrency problem would be if after peeking the item the channel filled up and the peeked item was dropped.  If that's a problem, then I don't see a good solution.  If it's not a problem, then a peeking API could be relevant.\r\n\r\nAny new API added at this point would need to be able to have a valid base implementation, which would make PeekAsync problematic.  I could imagine a TryPeek method, with the base implementation always returning false."
      },
      {
        "user": "neyromant",
        "created_at": "2019-10-17T05:44:41Z",
        "body": "Thank you very match. I will try TPL Dataflow.\r\n"
      }
    ]
  },
  {
    "number": 3789,
    "title": "starting a .NET Core 3.0 app using CLI and bash sporadically crashes",
    "created_at": "2019-10-02T14:35:08Z",
    "closed_at": "2020-01-30T21:34:35Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3789",
    "body": "## Steps to reproduce\r\n\r\n1. Have several .NET Core apps all using Web Sdk.\r\n2. Build all of them into the same output folder\r\n3. Run all of them using the following code:\r\n```\r\n  var escapedArgs = cmd.Replace(\"\\\"\", \"\\\\\\\"\");\r\n\r\n            var process = new Process()\r\n            {\r\n                StartInfo = new ProcessStartInfo\r\n                {\r\n                    FileName = \"bash\",\r\n                    Arguments = $\"-c \\\"{escapedArgs}\\\"\",\r\n                    RedirectStandardOutput = true,\r\n                    UseShellExecute = false,\r\n                    CreateNoWindow = true\r\n                }\r\n            };\r\n            process.Start();\r\n``` \r\nwhere `escapedArgs` is something like `dotnet $(executable).dll`\r\n\r\n## Expected  behavior\r\n\r\nIt just works - all processes start and don't crash\r\n\r\n## Actual behavior\r\n\r\nSometimes some of the processes crash\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [/usr/local/share/dotnet/sdk]\r\n  2.0.3 [/usr/local/share/dotnet/sdk]\r\n  2.1.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.301 [/usr/local/share/dotnet/sdk]\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.505 [/usr/local/share/dotnet/sdk]\r\n  2.2.101 [/usr/local/share/dotnet/sdk]\r\n  3.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3789/comments",
    "author": "godrose",
    "comments": [
      {
        "user": "godrose",
        "created_at": "2019-10-02T14:43:39Z",
        "body": "Process:               dotnet [51994]\r\nPath:                  /usr/local/share/dotnet/dotnet\r\nIdentifier:            dotnet\r\nVersion:               0\r\nCode Type:             X86-64 (Native)\r\nParent Process:        dotnet [51991]\r\nResponsible:           dotnet [51994]\r\nUser ID:               501\r\n\r\nDate/Time:             2019-10-02 17:41:33.171 +0300\r\nOS Version:            Mac OS X 10.14.5 (18F132)\r\nReport Version:        12\r\nBridge OS Version:     3.0 (14Y901)\r\nAnonymous UUID:        5179F488-7E72-47C1-B889-FD466642411F\r\n\r\nSleep/Wake UUID:       945CF9E9-32B6-4875-AFC7-65DD4410AABB\r\n\r\nTime Awake Since Boot: 2700000 seconds\r\nTime Since Wake:       17000 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n\r\nException Type:        EXC_CRASH (SIGABRT)\r\nException Codes:       0x0000000000000000, 0x0000000000000000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nApplication Specific Information:\r\nabort() called\r\n\r\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce42c6 __pthread_kill + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fd9fbf1 pthread_kill + 284\r\n2   libsystem_c.dylib             \t0x00007fff7fc4e6a6 abort + 127\r\n3   libcoreclr.dylib              \t0x000000010dbb3959 PROCAbort + 25\r\n4   libcoreclr.dylib              \t0x000000010dbb38a2 PROCEndProcess(void*, unsigned int, int) + 226\r\n5   libcoreclr.dylib              \t0x000000010de97071 UnwindManagedExceptionPass1(PAL_SEHException&, _CONTEXT*) + 833\r\n6   libcoreclr.dylib              \t0x000000010de97105 DispatchManagedException(PAL_SEHException&, bool) + 133\r\n7   libcoreclr.dylib              \t0x000000010ddfae6c IL_Rethrow() + 412\r\n8   ???                           \t0x000000011ccf424f 0 + 4778312271\r\n9   ???                           \t0x000000011c9a31f1 0 + 4774834673\r\n10  ???                           \t0x000000011c990ad9 0 + 4774759129\r\n11  libcoreclr.dylib              \t0x000000010df31c3b CallDescrWorkerInternal + 124\r\n12  libcoreclr.dylib              \t0x000000010dd7e029 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1657\r\n13  libcoreclr.dylib              \t0x000000010dc45ef6 RunMain(MethodDesc*, short, int*, PtrArray**) + 726\r\n14  libcoreclr.dylib              \t0x000000010dc46268 Assembly::ExecuteMainMethod(PtrArray**, int) + 408\r\n15  libcoreclr.dylib              \t0x000000010dc86678 CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 504\r\n16  libcoreclr.dylib              \t0x000000010dbbe052 coreclr_execute_assembly + 226\r\n17  libhostpolicy.dylib           \t0x000000010dafb5d7 0x10daea000 + 71127\r\n18  libhostpolicy.dylib           \t0x000000010dafc438 0x10daea000 + 74808\r\n19  libhostfxr.dylib              \t0x000000010dab9353 0x10da91000 + 164691\r\n20  libhostfxr.dylib              \t0x000000010dab8642 0x10da91000 + 161346\r\n21  libhostfxr.dylib              \t0x000000010dab464a 0x10da91000 + 144970\r\n22  dotnet                        \t0x000000010da746af 0x10da6b000 + 38575\r\n23  dotnet                        \t0x000000010da7492f 0x10da6b000 + 39215\r\n24  libdyld.dylib                 \t0x00007fff7fba93d5 start + 1\r\n\r\nThread 1:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fcde22a mach_msg_trap + 10\r\n1   libsystem_kernel.dylib        \t0x00007fff7fcde76c mach_msg + 60\r\n2   libcoreclr.dylib              \t0x000000010dbbab18 MachMessage::Receive(unsigned int) + 72\r\n3   libcoreclr.dylib              \t0x000000010dbb9a5e SEHExceptionThread(void*) + 94\r\n4   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n5   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n6   libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 2:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce636e poll + 10\r\n1   libcoreclr.dylib              \t0x000000010dbac0ce CorUnix::CPalSynchronizationManager::ThreadPrepareForShutdown() + 30\r\n2   libcoreclr.dylib              \t0x000000010dbadcc5 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 949\r\n3   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n4   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n5   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n6   libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 3:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fcdf1ee __open + 10\r\n1   libcoreclr.dylib              \t0x000000010dc2e97f TwoWayPipe::WaitForConnection() + 31\r\n2   libcoreclr.dylib              \t0x000000010dc25c57 DbgTransportSession::TransportWorker() + 167\r\n3   libcoreclr.dylib              \t0x000000010dc246b9 DbgTransportSession::TransportWorkerStatic(void*) + 9\r\n4   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n5   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n6   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n7   libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 4:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb0762 WaitForMultipleObjectsEx + 82\r\n6   libcoreclr.dylib              \t0x000000010dc22948 DebuggerRCThread::MainLoop() + 248\r\n7   libcoreclr.dylib              \t0x000000010dc227ec DebuggerRCThread::ThreadProc() + 284\r\n8   libcoreclr.dylib              \t0x000000010dc22503 DebuggerRCThread::ThreadProcStatic(void*) + 131\r\n9   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n10  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n11  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n12  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 5:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5573 SVR::gc_heap::gc_thread_function() + 179\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 6:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 7:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 8:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 9:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 10:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 11:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 12:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010deb5541 SVR::gc_heap::gc_thread_function() + 129\r\n8   libcoreclr.dylib              \t0x000000010deb54b6 SVR::gc_heap::gc_thread_stub(void*) + 54\r\n9   libcoreclr.dylib              \t0x000000010ddd45e2 (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*) + 178\r\n10  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n12  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 13:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb069d WaitForSingleObjectEx + 77\r\n6   libcoreclr.dylib              \t0x000000010de6a5e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\r\n7   libcoreclr.dylib              \t0x000000010ddd0cbf FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31\r\n8   libcoreclr.dylib              \t0x000000010ddd0e22 FinalizerThread::FinalizerThreadWorker(void*) + 98\r\n9   libcoreclr.dylib              \t0x000000010dd3efa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323\r\n10  libcoreclr.dylib              \t0x000000010dd3f5f0 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\r\n11  libcoreclr.dylib              \t0x000000010ddd10f8 FinalizerThread::FinalizerThreadStart(void*) + 504\r\n12  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n13  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n14  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n15  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 14:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce21ea __accept + 10\r\n1   libcoreclr.dylib              \t0x000000010dc2e6de IpcStream::DiagnosticsIpc::Accept(void (*)(char const*, unsigned int)) const + 62\r\n2   libcoreclr.dylib              \t0x000000010ddabd20 DiagnosticsServerThread(void*) + 288\r\n3   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n4   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n5   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n6   libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 15:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb0b6d SleepEx + 141\r\n5   libcoreclr.dylib              \t0x000000010dd660b2 ThreadpoolMgr::TimerThreadFire() + 146\r\n6   libcoreclr.dylib              \t0x000000010dd65f85 ThreadpoolMgr::TimerThreadStart(void*) + 181\r\n7   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n8   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n9   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n10  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 16:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb0648 PAL_WaitForSingleObjectPrioritized + 72\r\n6   libcoreclr.dylib              \t0x000000010de6aa00 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\r\n7   libcoreclr.dylib              \t0x000000010dd6347e ThreadpoolMgr::WorkerThreadStart(void*) + 974\r\n8   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n9   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n10  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 17:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb0b6d SleepEx + 141\r\n5   libcoreclr.dylib              \t0x000000010dddaa4f __SwitchToThread(unsigned int, unsigned int) + 15\r\n6   libcoreclr.dylib              \t0x000000010dd6571a ThreadpoolMgr::GateThreadStart(void*) + 138\r\n7   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n8   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n9   libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n10  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 18:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fce186a __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7fda056e _pthread_cond_wait + 722\r\n2   libcoreclr.dylib              \t0x000000010dbabdde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\r\n3   libcoreclr.dylib              \t0x000000010dbaba90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\r\n4   libcoreclr.dylib              \t0x000000010dbb047c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\r\n5   libcoreclr.dylib              \t0x000000010dbb0648 PAL_WaitForSingleObjectPrioritized + 72\r\n6   libcoreclr.dylib              \t0x000000010de6aa00 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\r\n7   libcoreclr.dylib              \t0x000000010dd6347e ThreadpoolMgr::WorkerThreadStart(void*) + 974\r\n8   libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n9   libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n10  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n11  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 19:\r\n0   libsystem_kernel.dylib        \t0x00007fff7fcde22a mach_msg_trap + 10\r\n1   libsystem_kernel.dylib        \t0x00007fff7fcde76c mach_msg + 60\r\n2   com.apple.CoreFoundation      \t0x00007fff53c7bbee __CFRunLoopServiceMachPort + 328\r\n3   com.apple.CoreFoundation      \t0x00007fff53c7b15c __CFRunLoopRun + 1612\r\n4   com.apple.CoreFoundation      \t0x00007fff53c7a8be CFRunLoopRunSpecific + 455\r\n5   com.apple.CoreFoundation      \t0x00007fff53c7a6d2 CFRunLoopRun + 40\r\n6   ???                           \t0x000000011c9b2936 0 + 4774897974\r\n7   ???                           \t0x000000011dbb046b 0 + 4793762923\r\n8   ???                           \t0x000000011c4a531f 0 + 4769600287\r\n9   ???                           \t0x000000011c4aeba1 0 + 4769639329\r\n10  ???                           \t0x000000011c4a53b1 0 + 4769600433\r\n11  libcoreclr.dylib              \t0x000000010df31c3b CallDescrWorkerInternal + 124\r\n12  libcoreclr.dylib              \t0x000000010dd7e029 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1657\r\n13  libcoreclr.dylib              \t0x000000010dd929b5 ThreadNative::KickOffThread_Worker(void*) + 469\r\n14  libcoreclr.dylib              \t0x000000010dd3efa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323\r\n15  libcoreclr.dylib              \t0x000000010dd3f590 ManagedThreadBase::KickOff(void (*)(void*), void*) + 32\r\n16  libcoreclr.dylib              \t0x000000010dd92c2d ThreadNative::KickOffThread(void*) + 397\r\n17  libcoreclr.dylib              \t0x000000010dbb7384 CorUnix::CPalThread::ThreadEntry(void*) + 436\r\n18  libsystem_pthread.dylib       \t0x00007fff7fd9d2eb _pthread_body + 126\r\n19  libsystem_pthread.dylib       \t0x00007fff7fda0249 _pthread_start + 66\r\n20  libsystem_pthread.dylib       \t0x00007fff7fd9c40d thread_start + 13\r\n\r\nThread 20:\r\n0   libsystem_pthread.dylib       \t0x00007fff7fd9c3f0 start_wqthread + 0\r\n\r\nThread 21:\r\n0   libsystem_pthread.dylib       \t0x00007fff7fd9c3f0 start_wqthread + 0\r\n\r\nThread 0 crashed with X86 Thread State (64-bit):\r\n  rax: 0x0000000000000000  rbx: 0x00000001166a05c0  rcx: 0x00007ffee2191998  rdx: 0x0000000000000000\r\n  rdi: 0x0000000000000307  rsi: 0x0000000000000006  rbp: 0x00007ffee21919d0  rsp: 0x00007ffee2191998\r\n   r8: 0x0000000002c50fed   r9: 0xffffffff00000000  r10: 0x0000000000000000  r11: 0x0000000000000206\r\n  r12: 0x0000000000000307  r13: 0x00007ffee2192000  r14: 0x0000000000000006  r15: 0x000000000000002d\r\n  rip: 0x00007fff7fce42c6  rfl: 0x0000000000000206  cr2: 0x000070000b29dfc8\r\n  \r\nLogical CPU:     0\r\nError Code:      0x02000005\r\nTrap Number:     133\r\n\r\n\r\nBinary Images:\r\n       0x10da6b000 -        0x10da76ff7 +dotnet (0) <CEFC0B9A-5995-38CD-9741-579ABF4B3E3A> /usr/local/share/dotnet/dotnet\r\n       0x10da91000 -        0x10dae1ff7 +libhostfxr.dylib (0) <ED0124F3-93E3-3919-8FD6-19FAF3C04DA9> /usr/local/share/dotnet/host/fxr/3.0.0/libhostfxr.dylib\r\n       0x10daea000 -        0x10db2efff +libhostpolicy.dylib (0) <C224E1A9-0B20-39C9-9A51-44D87F7E28E7> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.0.0/libhostpolicy.dylib\r\n       0x10db70000 -        0x10e0caff7 +libcoreclr.dylib (0) <3F7FE6EC-67A6-3510-98BA-3B3F5353DFAA> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.0.0/libcoreclr.dylib\r\n       0x10fccf000 -        0x10fef4fff +libclrjit.dylib (0) <0A3799C4-9EEE-3092-90D7-B9DD9933D9AC> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.0.0/libclrjit.dylib\r\n       0x110005000 -        0x11000effb +System.Native.dylib (0) <14FD3ABB-E36C-3F75-BBFE-8218AE7B5AFE> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.0.0/System.Native.dylib\r\n       0x110013000 -        0x11001bfff +System.Globalization.Native.dylib (0) <93D03DD2-8CA3-3199-9238-9FDED9189F14> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/3.0.0/System.Globalization.Native.dylib\r\n       0x1165fe000 -        0x1166686ef  dyld (655.1.1) <CE635DB2-D47E-3C05-A0A3-6BD982E7E750> /usr/lib/dyld\r\n    0x7fff500b2000 -     0x7fff500b2fff  com.apple.Accelerate (1.11 - Accelerate 1.11) <762942CB-CFC9-3A0C-9645-A56523A06426> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\r\n    0x7fff500ca000 -     0x7fff50763fef  com.apple.vImage (8.1 - ???) <EFFD9A9C-5563-3762-91CA-9F50FDB7A547> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\r\n    0x7fff50764000 -     0x7fff509ddff3  libBLAS.dylib (1243.200.4) <417CA0FC-B6CB-3FB3-ACBC-8914E3F62D20> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\r\n    0x7fff509de000 -     0x7fff50a50ffb  libBNNS.dylib (38.250.1) <538D12A2-9B9D-3E22-9896-F90F6E69C06E> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\r\n    0x7fff50a51000 -     0x7fff50dfaff3  libLAPACK.dylib (1243.200.4) <92175DF4-863A-3780-909A-A3E5C410F2E9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\r\n    0x7fff50dfb000 -     0x7fff50e10feb  libLinearAlgebra.dylib (1243.200.4) <CB671EE6-DEA1-391C-9B2B-AA09A46B4D7A> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\r\n    0x7fff50e11000 -     0x7fff50e16ff3  libQuadrature.dylib (3.200.2) <1BAE7E22-2862-379F-B334-A3756067730F> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\r\n    0x7fff50e17000 -     0x7fff50e93ff3  libSparse.dylib (79.200.5) <E78B33D3-672A-3C53-B512-D3DDB2E9AC8D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib\r\n    0x7fff50e94000 -     0x7fff50ea7fe3  libSparseBLAS.dylib (1243.200.4) <E9243341-DB77-37C1-97C5-3DFA00DD70FA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\r\n    0x7fff50ea8000 -     0x7fff5108fff7  libvDSP.dylib (671.250.4) <7B110627-A9C1-3FB7-A077-0C7741BA25D8> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\r\n    0x7fff51090000 -     0x7fff51143ff7  libvMisc.dylib (671.250.4) <73637194-497A-39F9-90F5-004DA772AC69> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\r\n    0x7fff51144000 -     0x7fff51144fff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <74288115-EF61-30B6-843F-0593B31D4929> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\r\n    0x7fff520ed000 -     0x7fff520edfff  com.apple.ApplicationServices (50.1 - 50.1) <4A6ACC13-2623-36B8-A196-2300980803CD> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\r\n    0x7fff520ee000 -     0x7fff52159fff  com.apple.ApplicationServices.ATS (377 - 453.11.2.2) <A258DA73-114B-3102-A056-4AAAD3CEB9DD> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\r\n    0x7fff521f2000 -     0x7fff52309fff  libFontParser.dylib (228.6.2.3) <3602D55B-3B9E-3B3A-A814-08C1244A8AE4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\r\n    0x7fff5230a000 -     0x7fff5234cfff  libFontRegistry.dylib (228.12.2.3) <2A56347B-2809-3407-A8B4-2AB88E484062> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\r\n    0x7fff5243d000 -     0x7fff52441ff3  com.apple.ColorSyncLegacy (4.13.0 - 1) <B53D557C-071F-3ED9-826A-847DEB465F62> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy\r\n    0x7fff524dc000 -     0x7fff5252eff7  com.apple.HIServices (1.22 - 628) <26A8B7C0-41CC-3DB4-99D7-BD922866DC77> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\r\n    0x7fff5252f000 -     0x7fff5253efff  com.apple.LangAnalysis (1.7.0 - 1.7.0) <F5617A2A-FEA6-3832-B5BA-C2111B98786F> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\r\n    0x7fff5253f000 -     0x7fff52588ff7  com.apple.print.framework.PrintCore (14.2 - 503.8) <57C2FE32-0E74-3079-B626-C2D52F2D2717> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\r\n    0x7fff52589000 -     0x7fff525c2ff7  com.apple.QD (3.12 - 407.2) <28C7D39F-59C9-3314-BECC-67045487229C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\r\n    0x7fff525c3000 -     0x7fff525cffff  com.apple.speech.synthesis.framework (8.1.3 - 8.1.3) <80FA7439-EC77-3CEC-B5D1-5EFE9E503E11> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\r\n    0x7fff525d0000 -     0x7fff52847ff7  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <EB71583C-58C9-3CF8-92F9-2D57B24BBD4F> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\r\n    0x7fff52ba1000 -     0x7fff52f42fff  com.apple.CFNetwork (978.0.7 - 978.0.7) <9FDEFE50-BE1B-386E-8B3C-AEF251069E52> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\r\n    0x7fff53466000 -     0x7fff53532ff7  com.apple.ColorSync (4.13.0 - 3340.7) <74B373AB-42C7-330D-A577-1C43BFA6024F> /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync\r\n    0x7fff536be000 -     0x7fff53744fff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <1E8E64E6-0E58-375A-97F7-07CB4EE181AC> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n    0x7fff537d3000 -     0x7fff53b57fe3  com.apple.CoreData (120 - 866.5) <37F35F2E-FE57-3E3F-A1E5-AD274A8C1FDE> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\r\n    0x7fff53b58000 -     0x7fff53c3fff7  com.apple.CoreDisplay (101.3 - 109.19) <B00A19C2-4A6A-388C-8AD6-33A42D10D7F0> /System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay\r\n    0x7fff53c40000 -     0x7fff54084fff  com.apple.CoreFoundation (6.9 - 1575.12) <64C38BF2-1869-33C8-B1B6-DCA9C824C0E4> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n    0x7fff54086000 -     0x7fff54715fe7  com.apple.CoreGraphics (2.0 - 1260.2) <23436C9A-7D62-3E9F-867A-798C93B52080> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\r\n    0x7fff54717000 -     0x7fff54a37fff  com.apple.CoreImage (14.4.0 - 750.0.140) <96FA4D1B-AC88-305C-8F4D-D7D44657B733> /System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage\r\n    0x7fff54e95000 -     0x7fff54e95fff  com.apple.CoreServices (945 - 945) <E937BA69-19D5-3A30-B31E-8A6B94E9D9A0> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\r\n    0x7fff54e96000 -     0x7fff54f12ff7  com.apple.AE (773 - 773) <55AE7C9E-27C3-30E9-A047-3B92A6FD53B4> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\r\n    0x7fff54f13000 -     0x7fff551eafff  com.apple.CoreServices.CarbonCore (1178.32 - 1178.32) <52F5484E-94B1-37B7-B1AC-E210DF5721AE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\r\n    0x7fff551eb000 -     0x7fff55233ff7  com.apple.DictionaryServices (1.2 - 284.16.4) <C3D15FD1-759B-3815-8128-42D8220BC459> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\r\n    0x7fff55234000 -     0x7fff5523cffb  com.apple.CoreServices.FSEvents (1239.200.12 - 1239.200.12) <8406D379-8D33-3611-861B-7ABD26DB50D2> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\r\n    0x7fff5523d000 -     0x7fff553effff  com.apple.LaunchServices (945 - 945) <05FA145B-75AA-3AE6-BB82-F156B29F4FF1> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\r\n    0x7fff553f0000 -     0x7fff5548eff7  com.apple.Metadata (10.7.0 - 1191.57) <BFFAED00-2560-318A-BB8F-4E7E5123EC61> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\r\n    0x7fff5548f000 -     0x7fff554d9ff7  com.apple.CoreServices.OSServices (945 - 945) <119C5548-59C3-3F94-B23F-8AF02CA10EAA> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\r\n    0x7fff554da000 -     0x7fff55541ff7  com.apple.SearchKit (1.4.0 - 1.4.0) <DA08AA6F-A6F1-36C0-87F4-E26294E51A3A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\r\n    0x7fff55542000 -     0x7fff55563ff3  com.apple.coreservices.SharedFileList (71.28 - 71.28) <487A8464-729E-305A-B5D1-E3FE8EB9CFC5> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\r\n    0x7fff5586e000 -     0x7fff559d0ff3  com.apple.CoreText (352.0 - 584.26.3.2) <A99FD623-7F6E-3C77-8241-E98F664EC039> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\r\n    0x7fff559d1000 -     0x7fff55a10fff  com.apple.CoreVideo (1.8 - 0.0) <1AD23C58-E68E-329B-A1FA-6BF7DD577687> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\r\n    0x7fff55cf7000 -     0x7fff55cfcffb  com.apple.DiskArbitration (2.7 - 2.7) <F481F2C0-884E-3265-8111-ABBEC93F0920> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\r\n    0x7fff55ec2000 -     0x7fff5626ffff  com.apple.Foundation (6.9 - 1575.12) <AD258ED7-64AE-367C-AE5F-48D45089D9F2> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\r\n    0x7fff562de000 -     0x7fff5630dffb  com.apple.GSS (4.0 - 2.0) <E41430E5-713B-3E53-BF7E-A3991A881B62> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\r\n    0x7fff56579000 -     0x7fff56608fff  com.apple.framework.IOKit (2.0.2 - 1483.260.4) <CCA92450-8808-37EC-B68E-2C2846B086CE> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\r\n    0x7fff5660a000 -     0x7fff56619ffb  com.apple.IOSurface (255.5.4 - 255.5.4) <83F58E47-0D06-3E78-9D19-D38D3205464B> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\r\n    0x7fff5666d000 -     0x7fff567f8fef  com.apple.ImageIO.framework (3.3.0 - 1850.2) <E1CC52A4-1074-3997-849B-42EF20EE1ADC> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\r\n    0x7fff567f9000 -     0x7fff567fdffb  libGIF.dylib (1850.2) <FB52622F-2A7D-36D0-B821-35DB2BAF9EE8> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\r\n    0x7fff567fe000 -     0x7fff568dafef  libJP2.dylib (1850.2) <7FAC16D8-1144-30A1-BABC-008423C7A851> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\r\n    0x7fff568db000 -     0x7fff56900feb  libJPEG.dylib (1850.2) <78401F6E-345B-3179-A82A-01F813F15D95> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\r\n    0x7fff56bc3000 -     0x7fff56be9feb  libPng.dylib (1850.2) <FF3ABAE1-43F0-3A76-A284-398397693D46> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\r\n    0x7fff56bea000 -     0x7fff56becffb  libRadiance.dylib (1850.2) <92529333-0935-341B-B271-69C235FEF6B5> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\r\n    0x7fff56bed000 -     0x7fff56c3afe7  libTIFF.dylib (1850.2) <FFC74F3B-16F9-38FE-9D3F-D8DC6DEDB9E9> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\r\n    0x7fff57db1000 -     0x7fff57dcafff  com.apple.Kerberos (3.0 - 1) <DB1E0679-37E1-3B93-9789-32F63D660C3B> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\r\n    0x7fff587e6000 -     0x7fff5888eff7  com.apple.Metal (161.9.16 - 161.9.16) <A93AA7FC-B72A-3CBF-9932-81DDDFA1DFCD> /System/Library/Frameworks/Metal.framework/Versions/A/Metal\r\n    0x7fff588aa000 -     0x7fff588c9ff7  com.apple.MetalPerformanceShaders.MPSCore (1.0 - 1) <EE85B6D5-5C12-3CE8-8C33-54A203EDC76E> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore\r\n    0x7fff588ca000 -     0x7fff58946fe7  com.apple.MetalPerformanceShaders.MPSImage (1.0 - 1) <5A78F2DC-9D2B-37BA-B21F-ECFFCC6F7720> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage\r\n    0x7fff58947000 -     0x7fff5896efff  com.apple.MetalPerformanceShaders.MPSMatrix (1.0 - 1) <096DB3E6-7DDF-3B47-857A-46A203642ACF> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix\r\n    0x7fff5896f000 -     0x7fff58a9aff7  com.apple.MetalPerformanceShaders.MPSNeuralNetwork (1.0 - 1) <D2128338-F1E8-3BEE-A729-AC13A524DD78> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork\r\n    0x7fff58a9b000 -     0x7fff58ab5fff  com.apple.MetalPerformanceShaders.MPSRayIntersector (1.0 - 1) <ADA5A93C-F79E-3931-840D-48C6B6B305EA> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector\r\n    0x7fff58ab6000 -     0x7fff58ab7ff7  com.apple.MetalPerformanceShaders.MetalPerformanceShaders (1.0 - 1) <515A92B3-A23B-3AC2-8D1B-85B248595B76> /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders\r\n    0x7fff598ae000 -     0x7fff598baff7  com.apple.NetFS (6.0 - 4.0) <E917806F-0607-3292-B2D6-A15404D61B99> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\r\n    0x7fff5c358000 -     0x7fff5c3afff7  com.apple.opencl (2.15.3 - 2.15.3) <AA9CE8F7-DB7C-35A5-A019-2207D1BBFF38> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\r\n    0x7fff5c3b0000 -     0x7fff5c3cbff7  com.apple.CFOpenDirectory (10.14 - 207.200.4) <F03D84EB-49B2-3A00-9127-B9A269824026> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\r\n    0x7fff5c3cc000 -     0x7fff5c3d7ffb  com.apple.OpenDirectory (10.14 - 207.200.4) <A8020CEE-5B78-3581-A735-EA2833683F31> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\r\n    0x7fff5cd27000 -     0x7fff5cd29fff  libCVMSPluginSupport.dylib (17.7.2) <247121BB-626C-318E-B24E-3D436E752DF7> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\r\n    0x7fff5cd2a000 -     0x7fff5cd2fff3  libCoreFSCache.dylib (166.2) <222C2A4F-7E32-30F6-8459-2FAB98073A3D> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib\r\n    0x7fff5cd30000 -     0x7fff5cd34fff  libCoreVMClient.dylib (166.2) <6789ECD4-91DD-32EF-A1FD-F27D2344CD8B> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\r\n    0x7fff5cd35000 -     0x7fff5cd3dff7  libGFXShared.dylib (17.7.2) <B75A6E93-E5BE-32A8-8D46-00D8E909DFD3> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\r\n    0x7fff5cd3e000 -     0x7fff5cd49fff  libGL.dylib (17.7.2) <E88FF023-7E15-3E95-88FD-6C415550F769> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\r\n    0x7fff5cd4a000 -     0x7fff5cd84fe7  libGLImage.dylib (17.7.2) <B4C140F3-AF8C-30C8-A03E-B16A20BB05A7> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\r\n    0x7fff5cef8000 -     0x7fff5cf36fff  libGLU.dylib (17.7.2) <EA69FA36-3F20-337C-A6B3-EC49DC2F12F5> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\r\n    0x7fff5d8d3000 -     0x7fff5d8e2ffb  com.apple.opengl (17.7.2 - 17.7.2) <8EFFA6F9-ABE8-3131-9D3F-37E9796DDF34> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\r\n    0x7fff5e6e5000 -     0x7fff5e93bfff  com.apple.QuartzCore (1.11 - 699.27.4.1) <BB3BBD58-84DF-3849-B4ED-5FF8DA4015B8> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\r\n    0x7fff5f170000 -     0x7fff5f46ffff  com.apple.security (7.0 - 58286.260.20) <59B4100E-5A31-3EF4-954A-2A69341995F3> /System/Library/Frameworks/Security.framework/Versions/A/Security\r\n    0x7fff5f470000 -     0x7fff5f4fcfff  com.apple.securityfoundation (6.0 - 55185.260.1) <DB8EB672-5D3A-3082-A62E-4D75C81D94A4> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\r\n    0x7fff5f52e000 -     0x7fff5f532fff  com.apple.xpc.ServiceManagement (1.0 - 1) <4AD0F8EE-884C-3FA7-85D9-27F201BC3C64> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\r\n    0x7fff5f8ca000 -     0x7fff5f937fff  com.apple.SystemConfiguration (1.17 - 1.17) <1562078D-3251-31B2-B9C6-2667C567F883> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\r\n    0x7fff62bb6000 -     0x7fff62c5bfeb  com.apple.APFS (1.0 - 1) <C001DCC2-32BE-327A-AE03-281885BD93BF> /System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS\r\n    0x7fff6366d000 -     0x7fff6366eff7  com.apple.AggregateDictionary (1.0 - 1) <A6AF8AC4-1F25-37C4-9157-A02E9C200926> /System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary\r\n    0x7fff63dc0000 -     0x7fff63dcffc7  com.apple.AppleFSCompression (96.200.3 - 1.0) <3CF60CE8-976E-3CB8-959D-DD0948C1C2DE> /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression\r\n    0x7fff63f17000 -     0x7fff63f60ff3  com.apple.AppleJPEG (1.0 - 1) <4C1F426B-7D77-3980-9633-7DBD8C666B9A> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\r\n    0x7fff641b4000 -     0x7fff641d6fff  com.apple.applesauce (1.0 - ???) <F49107C7-3C51-3024-8EF1-C57643BE4F3B> /System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce\r\n    0x7fff64335000 -     0x7fff64349ffb  com.apple.AssertionServices (1.0 - 1) <11FC4241-6069-3B3A-9BCE-9B68F3A4D2AB> /System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices\r\n    0x7fff649c6000 -     0x7fff649cefff  com.apple.coreservices.BackgroundTaskManagement (1.0 - 57.1) <2A396FC0-7B79-3088-9A82-FB93C1181A57> /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement\r\n    0x7fff64a65000 -     0x7fff64ad2ff3  com.apple.BaseBoard (360.28 - 360.28) <DBE27FB4-3FFD-3E9A-846C-F6E7D797286A> /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard\r\n    0x7fff6673c000 -     0x7fff66745ffb  com.apple.CommonAuth (4.0 - 2.0) <81C987FD-69EB-344B-94D9-B9D93624D257> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\r\n    0x7fff6741d000 -     0x7fff6742eff7  com.apple.CoreEmoji (1.0 - 69.19.9) <228457B3-E191-356E-9A5B-3C0438D05FBA> /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\r\n    0x7fff679d7000 -     0x7fff67a3dff7  com.apple.CoreNLP (1.0 - 130.15.22) <27877820-17D0-3B02-8557-4014E876CCC7> /System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP\r\n    0x7fff687ad000 -     0x7fff687b1fff  com.apple.DSExternalDisplay (3.1 - 380) <645C719D-05D4-3CD7-84D7-4C5218859E0C> /System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay\r\n    0x7fff699a9000 -     0x7fff69dc4fff  com.apple.vision.FaceCore (3.3.4 - 3.3.4) <A576E2DA-BF6F-3B18-8FEB-324E5C5FA9BD> /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore\r\n    0x7fff6ed19000 -     0x7fff6ed1efff  com.apple.GPUWrangler (3.40.16 - 3.40.16) <B9D4F2DD-5D11-32FF-B5BE-29E137458728> /System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler\r\n    0x7fff6fb29000 -     0x7fff6fb38fff  com.apple.GraphVisualizer (1.0 - 5) <48D020B7-5938-3FAE-B468-E291AEE2C06F> /System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer\r\n    0x7fff6fc88000 -     0x7fff6fcfcffb  com.apple.Heimdal (4.0 - 2.0) <5E8F6B79-960D-3030-B889-D29A4015D205> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\r\n    0x7fff70feb000 -     0x7fff70ff2ffb  com.apple.IOAccelerator (404.9 - 404.9) <F9C604B3-3DF7-3EE7-8A44-7877FAF2E6A4> /System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator\r\n    0x7fff70ff6000 -     0x7fff7100efff  com.apple.IOPresentment (1.0 - 42.6) <55CB91EF-90F1-3D0A-A59E-2F75CD2EB4AE> /System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment\r\n    0x7fff716a4000 -     0x7fff7177fff7  com.apple.LanguageModeling (1.0 - 159.15.15) <3DE3CE61-542B-37B7-883E-4B9717CAC65F> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\r\n    0x7fff71780000 -     0x7fff717bcff7  com.apple.Lexicon-framework (1.0 - 33.15.10) <4B5E843E-2809-3E70-9560-9254E2656419> /System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon\r\n    0x7fff717c3000 -     0x7fff717c8fff  com.apple.LinguisticData (1.0 - 238.25) <61910887-D5CE-3567-9A5F-6DFEC942EC1F> /System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData\r\n    0x7fff724bd000 -     0x7fff724e5ff7  com.apple.spotlight.metadata.utilities (1.0 - 1191.57) <38BB1FB7-3336-384C-B71F-4D0D402EB606> /System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities\r\n    0x7fff724e6000 -     0x7fff72573ff7  com.apple.gpusw.MetalTools (1.0 - 1) <DBC4718E-F588-382D-A415-405D0028804D> /System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools\r\n    0x7fff727c4000 -     0x7fff727eeffb  com.apple.MultitouchSupport.framework (2450.1 - 2450.1) <3BF81F33-89A8-3A2D-84B3-B343020B6D98> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\r\n    0x7fff72a2a000 -     0x7fff72a34fff  com.apple.NetAuth (6.2 - 6.2) <0D01BBE5-0269-310D-B148-D19DAE143DEB> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\r\n    0x7fff73295000 -     0x7fff732e6ff3  com.apple.OTSVG (1.0 - ???) <3976F8CC-1CFB-3E09-9009-FE985550565B> /System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG\r\n    0x7fff78db9000 -     0x7fff79067ffb  com.apple.SkyLight (1.600.0 - 340.26) <CD2A7069-6CEA-3737-9E9D-7AE2FED912AB> /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight\r\n    0x7fff7a4d9000 -     0x7fff7a4e5ffb  com.apple.TCC (1.0 - 1) <968ECAE1-FBB9-3478-BDCE-85E54B6C422D> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\r\n    0x7fff7c3b6000 -     0x7fff7c3b8ffb  com.apple.loginsupport (1.0 - 1) <3F8D6334-BCD6-36C1-BA20-CC8503A84375> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\r\n    0x7fff7c682000 -     0x7fff7c6b6fff  libCRFSuite.dylib (41.15.4) <406DAC06-0C77-3F90-878B-4D38F11F0256> /usr/lib/libCRFSuite.dylib\r\n    0x7fff7c6b9000 -     0x7fff7c6c3ff7  libChineseTokenizer.dylib (28.15.3) <9B7F6109-3A5D-3641-9A7E-31D2239D73EE> /usr/lib/libChineseTokenizer.dylib\r\n    0x7fff7c751000 -     0x7fff7c752ffb  libDiagnosticMessagesClient.dylib (107) <A14D0819-0970-34CD-8680-80E4D7FE8C2C> /usr/lib/libDiagnosticMessagesClient.dylib\r\n    0x7fff7c789000 -     0x7fff7c9e0ff3  libFosl_dynamic.dylib (18.3.4) <45E50221-1A39-3AB3-8267-C1E4E39ECF83> /usr/lib/libFosl_dynamic.dylib\r\n    0x7fff7ca31000 -     0x7fff7ca4ffff  libMobileGestalt.dylib (645.260.6) <0232958E-1EF2-3627-B8FF-09C6522594C7> /usr/lib/libMobileGestalt.dylib\r\n    0x7fff7ca50000 -     0x7fff7ca50fff  libOpenScriptingUtil.dylib (179.1) <4D603146-EDA5-3A74-9FF8-4F75D8BB9BC6> /usr/lib/libOpenScriptingUtil.dylib\r\n    0x7fff7cb90000 -     0x7fff7cb91ffb  libSystem.B.dylib (1252.250.1) <1A13E822-B59C-3A36-A2E4-9968149714F9> /usr/lib/libSystem.B.dylib\r\n    0x7fff7cc0d000 -     0x7fff7cc0efff  libThaiTokenizer.dylib (2.15.1) <ADB37DC3-7D9B-3E73-A72A-BCC3433C937A> /usr/lib/libThaiTokenizer.dylib\r\n    0x7fff7cc20000 -     0x7fff7cc36ffb  libapple_nghttp2.dylib (1.24.1) <6F04250A-6686-3FDC-9A8D-290C64B06502> /usr/lib/libapple_nghttp2.dylib\r\n    0x7fff7cc37000 -     0x7fff7cc60ffb  libarchive.2.dylib (54.250.1) <47289946-8504-3966-9127-6CE39993DC2C> /usr/lib/libarchive.2.dylib\r\n    0x7fff7cce4000 -     0x7fff7cce4ff3  libauto.dylib (187) <3E3780E1-96F3-3A22-91C5-92F9A5805518> /usr/lib/libauto.dylib\r\n    0x7fff7cdb4000 -     0x7fff7cdc4ffb  libbsm.0.dylib (39.200.18) <CF381E0B-025B-364F-A83D-2527E03F1AA3> /usr/lib/libbsm.0.dylib\r\n    0x7fff7cdc5000 -     0x7fff7cdd2fff  libbz2.1.0.dylib (38.200.3) <272953A1-8D36-329B-BDDB-E887B347710F> /usr/lib/libbz2.1.0.dylib\r\n    0x7fff7cdd3000 -     0x7fff7ce26ff7  libc++.1.dylib (400.9.4) <9A60A190-6C34-339F-BB3D-AACE942009A4> /usr/lib/libc++.1.dylib\r\n    0x7fff7ce27000 -     0x7fff7ce3cff7  libc++abi.dylib (400.17) <38C09CED-9090-3719-90F3-04A2749F5428> /usr/lib/libc++abi.dylib\r\n    0x7fff7ce3d000 -     0x7fff7ce3dff3  libcharset.1.dylib (51.200.6) <2A27E064-314C-359C-93FC-8A9B06206174> /usr/lib/libcharset.1.dylib\r\n    0x7fff7ce3e000 -     0x7fff7ce4effb  libcmph.dylib (6.15.1) <9C52B2FE-179F-32AC-B87E-2AFC49ABF817> /usr/lib/libcmph.dylib\r\n    0x7fff7ce4f000 -     0x7fff7ce67ffb  libcompression.dylib (52.250.2) <7F4BB18C-1FB4-3825-8D8B-6E6B168774C6> /usr/lib/libcompression.dylib\r\n    0x7fff7d0dc000 -     0x7fff7d0f2fff  libcoretls.dylib (155.220.1) <4C64BE3E-41E3-3020-8BB7-07E90C0C861C> /usr/lib/libcoretls.dylib\r\n    0x7fff7d0f3000 -     0x7fff7d0f4ff3  libcoretls_cfhelpers.dylib (155.220.1) <0959B3E9-6643-3589-8BB3-21D52CDF0EF1> /usr/lib/libcoretls_cfhelpers.dylib\r\n    0x7fff7d5a0000 -     0x7fff7d5f6ff7  libcups.2.dylib (462.10) <2AC7B8C3-0D25-3E0F-A34A-94658A06FF94> /usr/lib/libcups.2.dylib\r\n    0x7fff7d72a000 -     0x7fff7d72afff  libenergytrace.dylib (17.200.1) <80BB567A-FD18-3497-BF97-353F57D98CDD> /usr/lib/libenergytrace.dylib\r\n    0x7fff7d75c000 -     0x7fff7d761ff7  libgermantok.dylib (17.15.2) <E5F0F794-FF27-3D64-AE52-C78C6A84DD67> /usr/lib/libgermantok.dylib\r\n    0x7fff7d762000 -     0x7fff7d767ff7  libheimdal-asn1.dylib (520.260.1) <DC44D1D1-D3DF-38B3-AFC3-1D50B92BE401> /usr/lib/libheimdal-asn1.dylib\r\n    0x7fff7d792000 -     0x7fff7d882fff  libiconv.2.dylib (51.200.6) <2047C9B7-3F74-3A95-810D-2ED8F0475A99> /usr/lib/libiconv.2.dylib\r\n    0x7fff7d883000 -     0x7fff7dae4fff  libicucore.A.dylib (62135.0.1) <2B292561-798A-381C-AA41-90EE6549C7CF> /usr/lib/libicucore.A.dylib\r\n    0x7fff7db31000 -     0x7fff7db32fff  liblangid.dylib (128.15.1) <22D05C4F-769B-3075-ABCF-44A0EBACE028> /usr/lib/liblangid.dylib\r\n    0x7fff7db33000 -     0x7fff7db4bff3  liblzma.5.dylib (10.200.3) <E1F4FD60-1CE4-37B9-AD95-29D348AF1AC0> /usr/lib/liblzma.5.dylib\r\n    0x7fff7db63000 -     0x7fff7dc07ff7  libmecab.1.0.0.dylib (779.24.1) <A8D0379B-85FA-3B3D-89ED-5CF2C3826AB2> /usr/lib/libmecab.1.0.0.dylib\r\n    0x7fff7dc08000 -     0x7fff7de0cfff  libmecabra.dylib (779.24.1) <D71F71E0-30E2-3DB3-B636-7DE13D51FB4B> /usr/lib/libmecabra.dylib\r\n    0x7fff7dfe4000 -     0x7fff7e335ff7  libnetwork.dylib (1229.250.15) <72C7E9E3-B2BE-3300-BE1B-64606222022C> /usr/lib/libnetwork.dylib\r\n    0x7fff7e3c7000 -     0x7fff7eb4cfdf  libobjc.A.dylib (756.2) <7C312627-43CB-3234-9324-4DEA92D59F50> /usr/lib/libobjc.A.dylib\r\n    0x7fff7eb5e000 -     0x7fff7eb62ffb  libpam.2.dylib (22.200.1) <586CF87F-349C-393D-AEEB-FB75F94A5EB7> /usr/lib/libpam.2.dylib\r\n    0x7fff7eb65000 -     0x7fff7eb9afff  libpcap.A.dylib (79.250.1) <C0893641-7DFF-3A33-BDAE-190FF54837E8> /usr/lib/libpcap.A.dylib\r\n    0x7fff7ecb3000 -     0x7fff7eccbffb  libresolv.9.dylib (65.200.2) <893142A5-F153-3437-A22D-407EE542B5C5> /usr/lib/libresolv.9.dylib\r\n    0x7fff7ed1e000 -     0x7fff7eefbfe7  libsqlite3.dylib (274.25) <55CE34C4-00C0-3844-B7ED-80FA7F0AF03F> /usr/lib/libsqlite3.dylib\r\n    0x7fff7f114000 -     0x7fff7f117ff7  libutil.dylib (51.200.4) <CE9B18C9-66ED-32D4-9D29-01F8FCB467B0> /usr/lib/libutil.dylib\r\n    0x7fff7f118000 -     0x7fff7f125fff  libxar.1.dylib (417.1) <39CCF46B-C81A-34B1-92A1-58C4E5DA846E> /usr/lib/libxar.1.dylib\r\n    0x7fff7f12a000 -     0x7fff7f20cff3  libxml2.2.dylib (32.8) <54F896CF-6D83-300B-9CD9-1636BE5375A4> /usr/lib/libxml2.2.dylib\r\n    0x7fff7f20d000 -     0x7fff7f235ff3  libxslt.1.dylib (16.1) <31F7018B-D8F2-36ED-A13B-1E5A16DFAAA1> /usr/lib/libxslt.1.dylib\r\n    0x7fff7f236000 -     0x7fff7f248ff7  libz.1.dylib (70.200.4) <B048FC1F-058F-3A08-A1FE-81D5308CB3E6> /usr/lib/libz.1.dylib\r\n    0x7fff7fa2c000 -     0x7fff7fa30ff3  libcache.dylib (81) <1987D1E1-DB11-3291-B12A-EBD55848E02D> /usr/lib/system/libcache.dylib\r\n    0x7fff7fa31000 -     0x7fff7fa3bff3  libcommonCrypto.dylib (60118.250.2) <1765BB6E-6784-3653-B16B-CB839721DC9A> /usr/lib/system/libcommonCrypto.dylib\r\n    0x7fff7fa3c000 -     0x7fff7fa43ff7  libcompiler_rt.dylib (63.4) <5212BA7B-B7EA-37B4-AF6E-AC4F507EDFB8> /usr/lib/system/libcompiler_rt.dylib\r\n    0x7fff7fa44000 -     0x7fff7fa4dff7  libcopyfile.dylib (146.250.1) <98CD00CD-9B91-3B5C-A9DB-842638050FA8> /usr/lib/system/libcopyfile.dylib\r\n    0x7fff7fa4e000 -     0x7fff7fad2fc3  libcorecrypto.dylib (602.260.2) <BED0F385-D8A2-334A-BD7B-0673B5DABBC5> /usr/lib/system/libcorecrypto.dylib\r\n    0x7fff7fb59000 -     0x7fff7fb92ff7  libdispatch.dylib (1008.250.7) <26DF5B1E-A388-38EF-B73B-AF0E93FB02DB> /usr/lib/system/libdispatch.dylib\r\n    0x7fff7fb93000 -     0x7fff7fbbfff7  libdyld.dylib (655.1.1) <002418CC-AD11-3D10-865B-015591D24E6C> /usr/lib/system/libdyld.dylib\r\n    0x7fff7fbc0000 -     0x7fff7fbc0ffb  libkeymgr.dylib (30) <0D0F9CA2-8D5A-3273-8723-59987B5827F2> /usr/lib/system/libkeymgr.dylib\r\n    0x7fff7fbc1000 -     0x7fff7fbcdff3  libkxld.dylib (4903.261.4) <71CF1ECD-AC4E-3FDD-BEDF-14933D843EEE> /usr/lib/system/libkxld.dylib\r\n    0x7fff7fbce000 -     0x7fff7fbceff7  liblaunch.dylib (1336.261.2) <BD5CDB35-2BB4-349A-8D14-78E387563F89> /usr/lib/system/liblaunch.dylib\r\n    0x7fff7fbcf000 -     0x7fff7fbd4fff  libmacho.dylib (927.0.2) <3C5C9024-45FD-38C2-B01A-07A322966063> /usr/lib/system/libmacho.dylib\r\n    0x7fff7fbd5000 -     0x7fff7fbd7ffb  libquarantine.dylib (86.220.1) <6D0BC770-7348-3608-9254-F7FFBD347634> /usr/lib/system/libquarantine.dylib\r\n    0x7fff7fbd8000 -     0x7fff7fbd9ff7  libremovefile.dylib (45.200.2) <9FBEB2FF-EEBE-31BC-BCFC-C71F8D0E99B6> /usr/lib/system/libremovefile.dylib\r\n    0x7fff7fbda000 -     0x7fff7fbf1ff3  libsystem_asl.dylib (356.200.4) <A62A7249-38B8-33FA-9875-F1852590796C> /usr/lib/system/libsystem_asl.dylib\r\n    0x7fff7fbf2000 -     0x7fff7fbf2ff7  libsystem_blocks.dylib (73) <A453E8EE-860D-3CED-B5DC-BE54E9DB4348> /usr/lib/system/libsystem_blocks.dylib\r\n    0x7fff7fbf3000 -     0x7fff7fc7afff  libsystem_c.dylib (1272.250.1) <7EDACF78-2FA3-35B8-B051-D70475A35117> /usr/lib/system/libsystem_c.dylib\r\n    0x7fff7fc7b000 -     0x7fff7fc7effb  libsystem_configuration.dylib (963.260.1) <C7D2BA09-8D5B-3393-8D84-304D76C55DEF> /usr/lib/system/libsystem_configuration.dylib\r\n    0x7fff7fc7f000 -     0x7fff7fc82ff7  libsystem_coreservices.dylib (66) <719F75A4-74C5-3BA6-A09E-0C5A3E5889D7> /usr/lib/system/libsystem_coreservices.dylib\r\n    0x7fff7fc83000 -     0x7fff7fc89fff  libsystem_darwin.dylib (1272.250.1) <EC9B39A5-9592-3577-8997-7DC721D20D8C> /usr/lib/system/libsystem_darwin.dylib\r\n    0x7fff7fc8a000 -     0x7fff7fc90ff7  libsystem_dnssd.dylib (878.260.1) <64B79B01-B1B0-3C7E-87A1-023B71843F1F> /usr/lib/system/libsystem_dnssd.dylib\r\n    0x7fff7fc91000 -     0x7fff7fcdcffb  libsystem_info.dylib (517.200.9) <D09D5AE0-2FDC-3A6D-93EC-729F931B1457> /usr/lib/system/libsystem_info.dylib\r\n    0x7fff7fcdd000 -     0x7fff7fd05ff7  libsystem_kernel.dylib (4903.261.4) <7B0F52C4-4CC9-3282-8457-C18C6FE1B99E> /usr/lib/system/libsystem_kernel.dylib\r\n    0x7fff7fd06000 -     0x7fff7fd51ff7  libsystem_m.dylib (3158.200.7) <F19B6DB7-014F-3820-831F-389CCDA06EF6> /usr/lib/system/libsystem_m.dylib\r\n    0x7fff7fd52000 -     0x7fff7fd7cfff  libsystem_malloc.dylib (166.261.1) <4D1CEF38-DE32-3ECF-9F70-0ADDD5C8775F> /usr/lib/system/libsystem_malloc.dylib\r\n    0x7fff7fd7d000 -     0x7fff7fd87ff7  libsystem_networkextension.dylib (767.250.2) <FF06F13A-AEFE-3A27-A073-910EF78AEA36> /usr/lib/system/libsystem_networkextension.dylib\r\n    0x7fff7fd88000 -     0x7fff7fd8ffff  libsystem_notify.dylib (172.200.21) <145B5CFC-CF73-33CE-BD3D-E8DDE268FFDE> /usr/lib/system/libsystem_notify.dylib\r\n    0x7fff7fd90000 -     0x7fff7fd99fef  libsystem_platform.dylib (177.250.1) <16949870-9152-3B0D-9EF0-40FAF84B0F1E> /usr/lib/system/libsystem_platform.dylib\r\n    0x7fff7fd9a000 -     0x7fff7fda4ff7  libsystem_pthread.dylib (330.250.2) <2D5C08FF-484F-3D59-9132-CE1DCB3F76D7> /usr/lib/system/libsystem_pthread.dylib\r\n    0x7fff7fda5000 -     0x7fff7fda8ff7  libsystem_sandbox.dylib (851.260.2) <9CACC5F5-3859-3A1F-BCC6-96DDD4A556A8> /usr/lib/system/libsystem_sandbox.dylib\r\n    0x7fff7fda9000 -     0x7fff7fdabff3  libsystem_secinit.dylib (30.260.2) <88F3CE61-5FAD-3CDA-AA13-B5B18B3EBD26> /usr/lib/system/libsystem_secinit.dylib\r\n    0x7fff7fdac000 -     0x7fff7fdb3ff3  libsystem_symptoms.dylib (820.267.1) <03F1C2DD-0F5A-3D9D-88F6-B26C0F94EB52> /usr/lib/system/libsystem_symptoms.dylib\r\n    0x7fff7fdb4000 -     0x7fff7fdc9fff  libsystem_trace.dylib (906.260.1) <100013AE-0443-3CF0-AC17-5D934608B60B> /usr/lib/system/libsystem_trace.dylib\r\n    0x7fff7fdcb000 -     0x7fff7fdd0ffb  libunwind.dylib (35.4) <24A97A67-F017-3CFC-B0D0-6BD0224B1336> /usr/lib/system/libunwind.dylib\r\n    0x7fff7fdd1000 -     0x7fff7fe00fff  libxpc.dylib (1336.261.2) <9A0FFA79-082F-3293-BF49-63976B073B74> /usr/lib/system/libxpc.dylib\r\n\r\nExternal Modification Summary:\r\n  Calls made by other processes targeting this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by all processes on this machine:\r\n    task_for_pid: 1744859\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n\r\nVM Region Summary:\r\nReadOnly portion of Libraries: Total=344.4M resident=0K(0%) swapped_out_or_unallocated=344.4M(100%)\r\nWritable regions: Total=154.6M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=154.6M(100%)\r\n \r\n                                VIRTUAL   REGION \r\nREGION TYPE                        SIZE    COUNT (non-coalesced) \r\n===========                     =======  ======= \r\nDispatch continuations            16.0M        1 \r\nKernel Alloc Once                    8K        1 \r\nMALLOC                            71.3M       16 \r\nMALLOC guard page                   16K        4 \r\nMALLOC_LARGE (reserved)           19.9M        2         reserved VM address space (unallocated)\r\nSTACK GUARD                       56.1M       22 \r\nStack                             18.2M       22 \r\nVM_ALLOCATE                       19.9G      445 \r\nVM_ALLOCATE (reserved)             132K        3         reserved VM address space (unallocated)\r\n__DATA                            16.2M      192 \r\n__FONT_DATA                          4K        1 \r\n__LINKEDIT                       224.4M        9 \r\n__TEXT                           120.0M      196 \r\n__UNICODE                          564K        1 \r\nmapped file                       47.4M      339 \r\nshared memory                        8K        2 \r\n===========                     =======  ======= \r\nTOTAL                             20.5G     1256 \r\nTOTAL, minus reserved VM space    20.5G     1256 \r\n\r\nModel: MacBookPro13,3, BootROM 256.0.0.0.0, 4 processors, Intel Core i7, 2.9 GHz, 16 GB, SMC 2.38f7\r\nGraphics: kHW_IntelHDGraphics530Item, Intel HD Graphics 530, spdisplays_builtin\r\nGraphics: kHW_AMDRadeonPro460Item, AMD Radeon Pro 460, spdisplays_pcie_device, 4 GB\r\nMemory Module: BANK 0/DIMM0, 8 GB, LPDDR3, 2133 MHz, 0x802C, 0x4D5435324C31473332443450472D30393320\r\nMemory Module: BANK 1/DIMM0, 8 GB, LPDDR3, 2133 MHz, 0x802C, 0x4D5435324C31473332443450472D30393320\r\nAirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x15A), Broadcom BCM43xx 1.0 (7.77.61.2 AirPortDriverBrcmNIC-1305.8)\r\nBluetooth: Version 6.0.12f1, 3 services, 27 devices, 1 incoming serial ports\r\nNetwork Service: Wi-Fi, AirPort, en0\r\nUSB Device: USB 3.0 Bus\r\nUSB Device: USB2.0 Hub\r\nUSB Device: 4-Port USB 2.0 Hub\r\nUSB Device: USB Receiver\r\nUSB Device: USB Keyboard\r\nUSB Device: iBridge\r\nUSB Device: USB3.0 Hub\r\nUSB Device: Mass Storage Device\r\nUSB Device: USB 10/100/1000 LAN\r\nUSB Device: 4-Port USB 3.0 Hub\r\nThunderbolt Bus: MacBook Pro, Apple Inc., 41.1\r\nThunderbolt Bus: MacBook Pro, Apple Inc., 41.1\r\n"
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-10-03T17:39:32Z",
        "body": "@janvorli This looks to me like an unhandled managed exception, but you'll know for sure."
      },
      {
        "user": "janvorli",
        "created_at": "2019-10-03T18:28:31Z",
        "body": "Yes, this is an unhandled managed exception. Details on the exception and the stack trace should be printed to console stderr."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-10-04T08:39:44Z",
        "body": "@godrose Can you please look at the stderr of the processes you're starting? The ones which fail should print out information about the failure."
      },
      {
        "user": "godrose",
        "created_at": "2019-10-06T14:11:01Z",
        "body": "@vitek-karas I'm unable to repro it..."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-10-07T10:39:02Z",
        "body": "I'll close this issue, but feel free to reopen or create a new one..."
      }
    ]
  },
  {
    "number": 30959,
    "title": "Unable to read ReturnTypeCustomAttributes when using System.Reflection.MetadataLoadContext",
    "created_at": "2019-09-25T22:14:34Z",
    "closed_at": "2020-03-05T22:23:23Z",
    "labels": [
      "question",
      "area-System.Reflection"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30959",
    "body": "I was trying to use SR.MetadataLoadContext 4.6.0  in order to reflect an assembly and inspect for nullable reference types.    In order to do that I must get the custom attributes for a method's `ReturnType` using `ReturnTypeCustomAttributes`.\r\n\r\nIf you attempt to call `ICustomAttributeProvider.GetCustomAttributes(bool)` on `ReturnTypeCustomAttributes`, you get the following exception:\r\n\r\n```console\r\nUnhandled exception: System.InvalidOperationException: The requested operation cannot be used on objects loaded by a MetadataLoadContext.\r\n   at System.Reflection.TypeLoading.RoParameter.GetCustomAttributes(Boolean inherit)\r\n```\r\n\r\nIs there another way to get the custom attributes for a return type to inspect `NullableAttribute` and `NullableContextAttribute` with MetadataLoadContext?\r\n\r\nCurrent unwanted workaround is to reflect the property from the interface implementation, which lets me see the attributes:\r\n```csharp\r\nMethodInfo mi;\r\nvar attributes = mi.ReturnTypeCustomAttributes.GetType().GetProperty(\"CustomAttributes\").GetValue(mi) as IEnumerable<CustomAttributeData>;\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30959/comments",
    "author": "barryhagan",
    "comments": [
      {
        "user": "steveharter",
        "created_at": "2020-03-05T22:23:23Z",
        "body": "MetadataLoadContext does not support `GetCustomAttributes` since it would require attribute instances to be instantiated (which runs the attribute's constructor) which is no longer \"read-only\" (MetadataLoadContext only supports read-only access).\r\n\r\nInstead, use `GetCustomAttributeData()`:\r\n```cs\r\nIList<CustomAttributeData> attributes = mi.GetCustomAttributesData();\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 13485,
    "title": "Fast memory allocation and zero initialisation",
    "created_at": "2019-09-25T15:08:28Z",
    "closed_at": "2020-01-31T08:00:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13485",
    "body": "# Fast memory allocation and zero initialisation\r\n\r\nIs there a fast way to allocate and zero initialise a large block of memory using .Net Core?\r\n\r\nLooking for a solution that works on both Windows and Linux platforms.\r\n\r\nIt seems the fastest method on Windows is to call kernel32 HeapAlloc function via PInvoke, this allocates and zeros a 1GB block of memory in less than 2 milliseconds.\r\n\r\nHowever, I haven't found a way to achieve similar results on Linux whilst only using .Net Core.\r\n\r\nI've tried the Marshal.AllocHGlobal method which does not zero the memory, and then zeroing the memory using Marshal.Copy to copy an array of zero bytes into the memory, but this gives poor performance i.e. 800 milliseconds compared to the 2 milliseconds above.\r\n\r\nDoes .Net Core provide a cross platform API that would give similar performance as Windows HeapAlloc or something like the C function calloc?\r\n\r\nCode example below:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace MemoryApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            const int sizeBytes = 1_000_000_000;\r\n\r\n            Console.WriteLine($\"Allocating memory of size: {sizeBytes} bytes.\");\r\n\r\n            const int totalAttempts = 20;\r\n\r\n            for (int i = 0; i < totalAttempts; i++)\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n\r\n                var allocatedMemory = new AllocatedMemory(sizeBytes);\r\n                \r\n                stopwatch.Stop();\r\n                \r\n                Console.WriteLine($\"Allocated memory in {stopwatch.ElapsedTicks} ticks ({stopwatch.ElapsedMilliseconds} milliseconds).\");\r\n\r\n                allocatedMemory.Dispose();\r\n            }\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n\r\n    public unsafe class AllocatedMemory : IDisposable\r\n    {\r\n        public byte* MemoryAddress { get; }\r\n\r\n#if USE_WINDOWS_HEAP\r\n        private IntPtr _heapPtr;\r\n#else\r\n        private IntPtr _memoryPtr;\r\n#endif\r\n\r\n        public AllocatedMemory(int sizeInBytes)\r\n        {\r\n#if USE_WINDOWS_HEAP\r\n            var heapFlags = HeapFlags.HEAP_GENERATE_EXCEPTIONS | HeapFlags.HEAP_ZERO_MEMORY;\r\n\r\n            _heapPtr = Heap.HeapCreate(heapFlags, 0, 0);\r\n            MemoryAddress = (byte*)Heap.HeapAlloc(_heapPtr, heapFlags, (uint)sizeInBytes);\r\n#else\r\n            // Memory allocated but not zeroed\r\n            _memoryPtr = Marshal.AllocHGlobal((IntPtr)sizeInBytes);\r\n\r\n            // Zero the memory\r\n            Marshal.Copy(new byte[sizeInBytes], 0, _memoryPtr, sizeInBytes);\r\n            MemoryAddress = (byte*)_memoryPtr;\r\n#endif\r\n        }\r\n\r\n        ~AllocatedMemory()\r\n        {\r\n            Dispose(false);\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            Dispose(true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            if (disposing)\r\n            {\r\n                if (MemoryAddress != null)\r\n                {\r\n#if USE_WINDOWS_HEAP\r\n                    Heap.HeapDestroy(_heapPtr);\r\n#else\r\n                    Marshal.FreeHGlobal(_memoryPtr);\r\n#endif\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n#if USE_WINDOWS_HEAP\r\n    public class Heap\r\n    {\r\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n        public static extern IntPtr HeapCreate(HeapFlags flOptions, uint dwInitialsize, uint dwMaximumSize);\r\n\r\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n        public static extern IntPtr HeapAlloc(IntPtr hHeap, HeapFlags dwFlags, uint dwSize);\r\n\r\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n        public static extern bool HeapDestroy(IntPtr hHeap);\r\n    }\r\n    \r\n    [Flags]\r\n    public enum HeapFlags\r\n    {\r\n        HEAP_NO_SERIALIZE = 0x1,\r\n        HEAP_GENERATE_EXCEPTIONS = 0x4,\r\n        HEAP_ZERO_MEMORY = 0x8\r\n    }\r\n#endif\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13485/comments",
    "author": "rdtek",
    "comments": [
      {
        "user": "jamshedd",
        "created_at": "2019-09-25T17:05:58Z",
        "body": "@Maoni0 , could you please help redirect?"
      },
      {
        "user": "scalablecory",
        "created_at": "2019-09-25T17:35:59Z",
        "body": "I'd be curious to know the scenario where allocating a 1GB block is a bottleneck. Even if it does take 800ms, how frequently would you need to do this?\r\n\r\nHow quickly does `new byte[1024 * 1024 * 1024]` run?"
      },
      {
        "user": "EgorBo",
        "created_at": "2019-09-25T17:36:24Z",
        "body": "```csharp\r\n// Zero the memory\r\nMarshal.Copy(new byte[sizeInBytes], 0, _memoryPtr, sizeInBytes);\r\n```\r\nIf you need to zero a block you need `Unsafe.InitBlockUnaligned` (~  memset)"
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-25T18:51:47Z",
        "body": "> zeros a 1GB block of memory in less than 2 milliseconds.\r\n\r\nYou are not measuring the true cost of the operation. The Windows API you have used will just reserve the memory for you, without actually giving it to your process. You will pay the actual cost of zeroing the memory on demand.\r\n\r\nThe cross-platform way to achieve the same effect via .NET APIs is using anonymous memory mappings. Try this:\r\n\r\n```\r\nusing System.IO.MemoryMappedFiles;\r\n\r\n...\r\n\r\n    public unsafe class AllocatedMemory : IDisposable\r\n    {\r\n        MemoryMappedFile _mapping;\r\n        MemoryMappedViewAccessor _accessor;\r\n\r\n        public byte* MemoryAddress { get; }\r\n\r\n        public AllocatedMemory(int sizeInBytes)\r\n        {           \r\n            _mapping = MemoryMappedFile.CreateNew(null, sizeInBytes);\r\n            _accessor = _mapping.CreateViewAccessor();\r\n            MemoryAddress = (byte*)_accessor.SafeMemoryMappedViewHandle.DangerousGetHandle();\r\n        }\r\n\r\n        ~AllocatedMemory()\r\n        {\r\n            Dispose(false);\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            Dispose(true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            if (disposing)\r\n            {\r\n                _mapping.Dispose();\r\n                _accessor.Dispose();\r\n            }\r\n        }\r\n    }\r\n```"
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-25T18:54:59Z",
        "body": "BTW: Zeroing 1GB block of memory in less than 2 miliseconds would need 500GB+/s memory bandwidth. The typical memory bandwidth you get per core is about 100x smaller."
      }
    ]
  },
  {
    "number": 13447,
    "title": "Dotnet processes are too numerous to differentiate between specific applications",
    "created_at": "2019-09-21T03:32:19Z",
    "closed_at": "2020-01-31T07:57:23Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13447",
    "body": "dotnet.exe App1.dll\r\ndotnet.exe App2.dll\r\ndotnet.exe App3.dll\r\ndotnet.exe App4.dll\r\n\r\nProcess names are all dotnet and can't distinguish between specific applications",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13447/comments",
    "author": "stuyun",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2019-09-21T03:50:15Z",
        "body": "@jeffschw can you point @stuyun to the single file exe thinking ?"
      },
      {
        "user": "benaadams",
        "created_at": "2019-09-21T04:10:31Z",
        "body": "In 3.0 building now also creates and exe; and the process names should be the created .exe name even when you use `dotnet run` (though you will also have a process which is .NET Core Host `dotnet run`; which doesn't exist if you run the built exe)"
      },
      {
        "user": "benaadams",
        "created_at": "2019-09-21T04:11:49Z",
        "body": "e.g. with 3.0 it would now be\r\n\r\nApp1.exe\r\nApp2.exe\r\nApp3.exe\r\nApp4.exe"
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-23T01:29:51Z",
        "body": "As @benaadams said."
      }
    ]
  },
  {
    "number": 30894,
    "title": "Q: TaskStatus.Canceled for non-matching OperationCanceledException",
    "created_at": "2019-09-18T21:10:55Z",
    "closed_at": "2020-02-01T04:29:52Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30894",
    "body": "When I run:\r\n```cs\r\n        static void Main(string[] args)\r\n        {\r\n            Task fooTask = Foo();\r\n            System.Console.WriteLine(fooTask.Status);\r\n            Task tokenTask = Task.Run(() => throw new OperationCanceledException(), new CancellationTokenSource().Token);\r\n            tokenTask.ContinueWith(t => System.Console.WriteLine(t.Status)).Wait();\r\n        }\r\n\r\n        static async Task Foo()\r\n        {\r\n            throw new OperationCanceledException();\r\n        }\r\n```\r\nit outputs:\r\n```\r\nCanceled\r\nCanceled\r\n```\r\nI expected the Tasks to be in the `Faulted` state because the `OperationCanceledException` isn't associated with the Task token.\r\n\r\nWhy are these Tasks `Canceled`?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30894/comments",
    "author": "tmds",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2019-09-19T04:04:58Z",
        "body": "@stephentoub "
      },
      {
        "user": "stephentoub",
        "created_at": "2019-09-19T12:55:44Z",
        "body": "This is by design.\r\n\r\nFor all `async` methods, `OperationCanceledException` is special-cased to complete the returned `Task` as `Canceled` rather than `Faulted`.  It pays zero attention to cancellation tokens, because the C# language / compiler for `async` methods has zero knowledge of cancellation tokens.  As such, rather than having all exceptions (even if for cancellation) be `Faulted`, we chose to special-case all `OperationCanceledExceptions`.\r\n\r\nThe `Task.Run` case is just an extension of that.  There are multiple `Task.Run` overloads that differ only by delegate return type, and since your lambda always throws and doesn't have any return statements that would indicate which delegate type to map to and thus which overload to map to, the C# betterness rules are selecting the `Func<Task>` overload.  That overload (as well as the `Func<Task<TResult>>` overload) are primarily intended to be used with `async` methods, as they \"unwrap\" the returned task in order to marshal it to the task returned from the `Run` call.  In order to not have a subtle difference in behavior based on whether the delegate synchronously or asynchronously throws an `OperationCanceledException`, this overload similarly treats all `OperationCanceledException`s as cancellation."
      },
      {
        "user": "tarekgh",
        "created_at": "2019-09-19T16:06:34Z",
        "body": "@tmds I am closing this issue per @stephentoub answer. Feel free to respond back with any more questions if there is anything unclear. Thanks."
      },
      {
        "user": "tmds",
        "created_at": "2019-09-19T17:51:58Z",
        "body": "Yes, question answered. Thanks @stephentoub ."
      }
    ]
  },
  {
    "number": 13414,
    "title": "Q: compatible platforms for crossgened image",
    "created_at": "2019-09-13T07:00:35Z",
    "closed_at": "2020-01-31T07:54:38Z",
    "labels": [
      "question",
      "area-crossgen2-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13414",
    "body": "When running `crossgen` on `linux-x64` (PublishReadyToRun), will the native code be usable on `win-x64`?\r\nI'm assuming not, because of different ABI conventions?\r\nIs that correct?\r\n\r\nCC @fadimounir",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13414/comments",
    "author": "tmds",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-09-13T10:37:27Z",
        "body": "Yes, that's correct."
      }
    ]
  },
  {
    "number": 13358,
    "title": "Deadlock - managed\\unmanaged code",
    "created_at": "2019-09-04T00:14:53Z",
    "closed_at": "2020-01-31T07:50:02Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13358",
    "body": "(apologies if this is not the right place for this)\r\nWhen investigating a potential deadlock I came across a windbg error:\r\n\r\n```\r\n0:000> !VerifyHeap\r\nFailed to request SyncBlk at index 1806.\r\n```\r\n\r\nWhen running !SyncBlk I get this:\r\n```\r\n0:000> !SyncBlk\r\nIndex         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner\r\nSyncBlock 1806 is invalid, continuing...\r\nSyncBlock 1812 is invalid, continuing...\r\n-----------------------------\r\nTotal           5722\r\nCCW             432\r\nRCW             146\r\nComClassFactory 0\r\nFree            4928\r\n\r\n```\r\n\r\nAnd locks doesn't return anything (but I know there are definitely locks:\r\n\r\n```\r\n0:000> !locks\r\n\r\nScanned 3810 critical sections\r\n```\r\n\r\nCan anyone tell me if this is a sign of a corrupted heap?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13358/comments",
    "author": "fayilt",
    "comments": [
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-09-04T16:21:24Z",
        "body": "cc @tommcdon "
      },
      {
        "user": "tommcdon",
        "created_at": "2019-09-04T16:23:09Z",
        "body": "@mikem8361 "
      },
      {
        "user": "fayilt",
        "created_at": "2019-09-06T13:46:08Z",
        "body": "ok, doens't look like I'm getting any response, I'll ask a different question.\r\n\r\nAssuming sync block is corrupted, is there any way to continue the VerifyHeap command or will it always fail on first error? Also, is there any way for me to see what sync block contains, even if it's invalid?"
      },
      {
        "user": "mikem8361",
        "created_at": "2019-09-06T17:39:35Z",
        "body": "I don't know all the details about how use SOS especially in the corrupted heap case.  I'm including some others to see if they have any input: @Maoni0, @noahfalk. "
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-06T23:41:47Z",
        "body": "> Can anyone tell me if this is a sign of a corrupted heap?\r\n\r\nYes, this is a sign of corrupted heap.\r\n\r\n> locks doesn't return anything (but I know there are definitely locks)\r\n\r\n`locks` looks at `CRITICAL_SECTION`s only. The locks that you are aware of are likely some other kind of locks.\r\n\r\n> is there any way to continue the VerifyHeap command or will it always fail on first error?\r\n\r\nVerifyHeap command always fails on first error.\r\n\r\n> Also, is there any way for me to see what sync block contains, even if it's invalid?\r\n\r\nThe syncblocks are stored in a table that `coreclr!g_pSyncTable` global variable points at. For example, here is example of how to dump syncblock 1 and the object that is associated with:\r\n\r\n```\r\n0:009> dt coreclr!g_pSyncTable\r\n0x000001bd`24a0fda0 \r\n   +0x000 m_SyncBlock      : (null) \r\n   +0x008 m_Object         : VolatilePtr<Object,Object *>\r\n0:009> dq 0x000001bd`24a0fda0 \r\n000001bd`24a0fda0  00000000`00000000 baadf00d`baadf00d\r\n000001bd`24a0fdb0  000001bd`24a70818 000001bd`26774668\r\n000001bd`24a0fdc0  000001bd`24a70868 000001bd`26774978\r\n000001bd`24a0fdd0  000001bd`24a708b8 000001bd`26774ab0\r\n000001bd`24a0fde0  000001bd`24a70908 000001bd`26774f40\r\n000001bd`24a0fdf0  00000000`00000000 baadf00d`baadf00d\r\n000001bd`24a0fe00  00000000`00000000 baadf00d`baadf00d\r\n000001bd`24a0fe10  00000000`00000000 baadf00d`baadf00d\r\n0:009> !do 000001bd`26774668\r\nName:        Interop+Advapi32+EtwEnableCallback\r\nMethodTable: 00007ff7cdf9eff8\r\nEEClass:     00007ff7cdfad330\r\nSize:        64(0x40) bytes\r\nFile:        D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\System.Private.CoreLib.dll\r\nFields:\r\n              MT    Field   Offset                 Type VT     Attr            Value Name\r\n00007ff7cdd00ed0  400011a        8        System.Object  0 instance 000001bd267745e0 _target\r\n00007ff7cdd00ed0  400011b       10        System.Object  0 instance 0000000000000000 _methodBase\r\n00007ff7cde22428  400011c       18        System.IntPtr  1 instance     7ff7cdd5fc30 _methodPtr\r\n00007ff7cde22428  400011d       20        System.IntPtr  1 instance                0 _methodPtrAux\r\n00007ff7cdd00ed0  40001ac       28        System.Object  0 instance 0000000000000000 _invocationList\r\n00007ff7cde22428  40001ad       30        System.IntPtr  1 instance                0 _invocationCount\r\n0:009> dt coreclr!SyncBlock 000001bd`24a70818\r\n   +0x000 m_Monitor        : AwareLock\r\n   +0x030 m_pInteropInfo   : 0x000001bd`24a80140 InteropSyncBlockInfo\r\n   +0x038 m_pEnCInfo       : (null) \r\n   +0x040 m_Link           : SLink\r\n   +0x048 m_dwHashCode     : 0\r\n   +0x04c m_BSTRTrailByte  : 0 ''\r\n```"
      },
      {
        "user": "fayilt",
        "created_at": "2019-09-08T18:54:48Z",
        "body": "@jkotas \r\n\r\nThanks very much Jan, this is extremely useful! We're observing the same issue in both core and .net framework versions of the service. Can you please let me know what the command will look like for the .net framework dump?\r\n\r\n`dt coreclr!g_pSyncTable`"
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-08T20:13:25Z",
        "body": ">  Can you please let me know what the command will look like for the .net framework dump?\r\n\r\n`dt clr!g_pSyncTable`"
      },
      {
        "user": "fayilt",
        "created_at": "2019-09-09T00:32:47Z",
        "body": "@jkotas \r\n\r\nI'm not able to run this command for some reason:\r\n```\r\n0:000> dt clr!g_pSyncTable\r\nSymbol clr!g_pSyncTable not found.\r\n```\r\nI've got most of the symbol files loaded, but it did complain about ni files (System.ni, System.Core.ni etc), which is the ngen optimized version of the assemblies? Do I need them as well in order to be able to see g_pSyncTable?"
      },
      {
        "user": "jkotas",
        "created_at": "2019-09-09T02:34:48Z",
        "body": "The publicly accessible symbols for .NET Framework have stripped implementation details. It is the standard policy for all Microsoft closed source products. `dt` does not work with the stripped symbols. To workaround it, you can use direct pointer arithmetic, e.g.: \r\n\r\n```\r\n0:000> ? poi(clr!g_pSyncTable)\r\nEvaluate expression: 1430983352976 = 0000014d`2d412290\r\n0:000> dq 0000014d`2d412290\r\n0000014d`2d412290  00000000`00000000 baadf00d`baadf00d\r\n0000014d`2d4122a0  0000014d`2d47bfd8 0000014d`2f2b5970 <- sync block 1\r\n0000014d`2d4122b0  baadf00d`baadf00d baadf00d`baadf00d <- sync block 2\r\n0000014d`2d4122c0  baadf00d`baadf00d baadf00d`baadf00d ...\r\n0000014d`2d4122d0  baadf00d`baadf00d baadf00d`baadf00d\r\n0000014d`2d4122e0  baadf00d`baadf00d baadf00d`baadf00d\r\n0000014d`2d4122f0  baadf00d`baadf00d baadf00d`baadf00d\r\n0000014d`2d412300  baadf00d`baadf00d baadf00d`baadf00d\r\n```"
      }
    ]
  },
  {
    "number": 13334,
    "title": "interpreter has bug about CEE_LDLOC_0?",
    "created_at": "2019-08-29T02:46:12Z",
    "closed_at": "2020-01-31T07:47:46Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13334",
    "body": "issue code is at line 2008 in interpreter.cpp, lastest master branch . show above:\r\n       case CEE_LDLOC_0:\r\n            LdLoc(0);\r\n            m_ILCodePtr++;\r\n            continue;\r\n        case CEE_LDLOC_1:\r\n            LdLoc(1);\r\n            break;\r\n        case CEE_LDLOC_2:\r\n            LdLoc(2);\r\n            break;\r\nwhy it processes CEE_LDLOC_0 need a extra \"m_ILCodePtr++;\"？ is it a bug ?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13334/comments",
    "author": "pirunxi",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2019-08-29T04:52:30Z",
        "body": "Not a bug, just confusing code. In other cases `break` is used to break out of the switch and reach the `m_ILCodePtr++;` after the switch. In the case of  `CEE_LDLOC_0`, `m_ILCodePtr++;` is done right there and `continue` is used instead of `break`.\r\n\r\nWhile the interpreter isn't actually used, there have been attempts to enable it and it's unlikely that such a \"bug\" would have passed unnoticed."
      },
      {
        "user": "BruceForstall",
        "created_at": "2019-09-04T18:24:11Z",
        "body": "One guess for why it was done this way is it is (slightly) faster."
      }
    ]
  },
  {
    "number": 13276,
    "title": "memory violation sig=6",
    "created_at": "2019-08-19T16:12:57Z",
    "closed_at": "2020-01-31T07:43:23Z",
    "labels": [
      "question",
      "area-VM-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13276",
    "body": "Hi All，\r\nRecently, my .net core console app was crashed several times. Because the production enviroment does not enable coredump，so I did not get any userful information.But \"/var/log/audit/audit.log\" has a log:\r\n\r\n`type=ANOM_ABEND msg=audit(1563179050.707:241662): auid=1000 uid=1000 gid=1000 ses=25261 pid=2840 comm=\"dotnet\" reason=\"memory violation\" sig=6`\r\n\r\nI know sig=6 was triggered by system ,they aren't exceptions, they're signaled from the OS。I did not get any idea on why I met this error。I searched github, did not get any signs。\r\n\r\nAny ideas? Thanks  .\r\n\r\n(Today, I enable core dump on production enviroment.If it crash again ,I will upload the trace info.)\r\n\r\n`\r\n**OS**: gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)\r\n      Linux version 3.10.0-957.27.2.el7.x86_64 \r\n      CentOS Linux release 7.6.1810 (Core)\r\n**.net core**: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.2.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]`\r\n\r\n      \r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13276/comments",
    "author": "hours10000",
    "comments": [
      {
        "user": "janvorli",
        "created_at": "2019-08-19T19:49:32Z",
        "body": "The sig 6 is SIGABRT. This usually happens when there is an unhandled managed exception, an assert or an unrecoverable error occurs in the runtime. If you manage to get the crore dump, it should be easy to figure out which one of those happened."
      },
      {
        "user": "hours10000",
        "created_at": "2019-08-26T12:21:00Z",
        "body": "The console app crashed agian this morning, but we did not get any coredump file，what a pity!\r\nIf we kill the console app with command \"kill -6 ourPID\", there will be a coredump file。\r\nI don't know why there is no coredump file。We need further investigation to verify this issue"
      },
      {
        "user": "hours10000",
        "created_at": "2019-08-27T09:53:02Z",
        "body": "OK, We find out the reason why it does not generate core dump file. So , I will waiting for the next crash...."
      },
      {
        "user": "hours10000",
        "created_at": "2019-09-02T01:37:41Z",
        "body": "The console app crashed last night, and from the coredump file we found out the reason why it crashed. It's a bug in our code。Thanks all."
      }
    ]
  },
  {
    "number": 3727,
    "title": "how can i know a specific net core sdk using which version of core-setup?",
    "created_at": "2019-08-13T07:04:57Z",
    "closed_at": "2020-01-30T21:31:51Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3727",
    "body": "let's say `SDK 2.2.205`, when i run `dotnet publish`, how can i know which version of `hostfxr` is using?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3727/comments",
    "author": "liesauer",
    "comments": [
      {
        "user": "vitek-karas",
        "created_at": "2019-08-14T08:19:19Z",
        "body": "There are potentially two `hostfxr`s in question:\r\n* The `hostfxr` used to run the SDK itself (in the above case the `dotnet publish` command is implemented in the SDK as managed code and runs that way). This will typically be the globally installed `hostfxr` in something like `ProgramFiles\\dotnet\\host\\fxr\\` - it always uses the latest version available on the machine (regardless of which SDK is being used).\r\n* The `hostfxr` which is copied into the app output if the app is built as self-contained. This one I don't know exactly, but I would expect it to match the TFM of the app - so if the app is targeting .NET Core 2.2 I would expect to get 2.2 hostfxr. (I tried on a simple repro project and it works that way)."
      },
      {
        "user": "liesauer",
        "created_at": "2019-08-15T08:27:25Z",
        "body": "for the second one, is it reliable that i extract the version of package `Microsoft.NETCore.DotNetHostResolver` from `deps.json`?"
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-08-15T08:38:35Z",
        "body": "Sorry - I don't understand the question. The `Microsoft.NETCore.DotNetHostResolver` package is not referenced from `.deps.json`. Self-contained apps will have the `hostfxr.dll` listed as a native asset, but that's all.\r\n\r\nCan I ask what is the scenario? Why do you need to know the version of `hostfxr` in the app?"
      },
      {
        "user": "liesauer",
        "created_at": "2019-08-15T09:02:00Z",
        "body": "when we build a self-contained app, it has `Microsoft.NETCore.DotNetHostResolver/x.y.z` under `libraries` section in `.deps.json`, i have tested a couple of different netcore version, and it seems to be reliable for me.\r\ni have a tool which is used to optimize a netcore self-contained app but have a bug, see dotnet/runtime#3525(we have discussed before), since this bug cannot be fixed in a short time, i need to build a patched `hostfxr`, it need to match and download the correct version of patched `hostfxr` and replace the original one when use my tool."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-08-15T09:11:39Z",
        "body": "The record in the `libraries` section will only be there for 2.* apps. 3.0 apps won't have it. Maybe a better way to do this would be to look at the `hostfxr.dll` itself and check its file version (build number)."
      }
    ]
  },
  {
    "number": 3712,
    "title": "Guidance for DependencyContext followed by ICompilationAssemblyResolver usage",
    "created_at": "2019-08-03T22:23:49Z",
    "closed_at": "2020-02-26T22:02:11Z",
    "labels": [
      "question",
      "area-DependencyModel"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3712",
    "body": "Ostensibly, as I understand it, my process starts with adding a loaded ``Assembly`` to a ``DependencyContext`` and *Merging* that *context* with the original one. Upon adding the reference, I turn around and fold in a new ``CompositeCompilationAssemblyResolver`` with that ``AppBaseCompilationAssemblyResolver``. The inner resolver contains within it a ``PackageCompilationAssemblyResolver`` and a ``ReferenceAssemblyPathResolver``.\r\n\r\nUltimately this is to inform my *dotnet CLI* tooling, a [Code.Generation.Roslyn](/mwpowellhtx/Code.Generation.Roslyn) in which code generators, etc, may have internal project references, as well as external package references, and I am trying to do a bit of refactoring on my *Context/Resolver* assets in order to better isolate some test cases around that issue.\r\n\r\nI am here just looking for a bit of guidance as to approaching that issue. Assuming the references have all been resolved, whether from packages or projects, etc, are there any others, I doubt it... Assuming all of that is squared away, I do not see any reason why my CG assemblies cannot be loaded and their generators run to generate code.\r\n\r\nI look forward to your insights. Happy to elaborate as much as I can, but I think this is not so non-straightforward. Thanks!",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3712/comments",
    "author": "mwpowellhtx",
    "comments": [
      {
        "user": "eerhardt",
        "created_at": "2019-08-27T21:19:02Z",
        "body": "@mwpowellhtx - I'm not fully following your scenario, and I am not clear on what issue you are asking about. Can you elaborate a bit more? Is there a repro project/code you can point to?"
      },
      {
        "user": "eerhardt",
        "created_at": "2020-02-26T22:02:11Z",
        "body": "Closing as the questions above haven't been answered. Feel free to re-open if you can provide more information."
      },
      {
        "user": "mwpowellhtx",
        "created_at": "2020-02-26T22:21:08Z",
        "body": "@eerhardt So you are saying that complex resolution contexts are handled seamlessly now? Because from where I was testing, this did not seem to be the case."
      },
      {
        "user": "eerhardt",
        "created_at": "2020-02-26T22:31:27Z",
        "body": "No, I'm not saying that complex resolution contexts are handled seamlessly now. I asked for more information on the scenario, but since it wasn't provided I was forced to close the issue. Feel free to re-open if you can provide more information. Sample code illustrating the issue or scenario would be super helpful."
      },
      {
        "user": "mwpowellhtx",
        "created_at": "2020-02-26T22:46:13Z",
        "body": "The scenario is as I described. I've got a dotnet CLI tooling that I want to invoke during a build. I have the plumbing all working, but it fails because the dependencies are not resolving correctly. Think, I've got something like a grammar parsed by an ANTLR based assembly, based on a Protobuf v2 specification, so on and so forth. This is/was using dotnet core 2.1 runtimes, I think, but admittedly it has been a few months since I was actively working in that area. I may dust it off and pull it forward to more recent runtime versions, but it is not on my front burner today."
      }
    ]
  },
  {
    "number": 30439,
    "title": "Crypto: Is it safe to pool X509Chain objects without resetting the X509ChainPolicy?",
    "created_at": "2019-07-31T19:55:52Z",
    "closed_at": "2020-02-01T03:42:08Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30439",
    "body": "I’m building a high-throughput message broker in .net core (2.1 today, upgrading to 3.0-preview7 soon), and need to do client certificate based authentication with a custom cert chain (that I set up on the chain.ChainPolicy.ExtraStore).\r\n\r\nTo reduce GC pressure, I tend to pool all the byte arrays / batch message arrays / etc.\r\n\r\nIs it a good idea to also pool X509Chain objects? And not do a chain.Policy.Reset call on every rent/return?\r\n\r\nIt’s the X509ChainPolicy.ExtraStore allocation and 5x X509ChainPolicy.ExtraStore.Add(customCert) calls that lead to array resizing, that I want to avoid.\r\n\r\n-\tWhen the chain is returned to the pool, I dispose off all the chainElement.Certificate objects and do a chain.Reset() to dispose off the _pal object.\r\n-\tI am explicitly resetting chain.ChainPolicy.VerificationTime to DateTime.Now after every pool.Rent().\r\n\r\nIn other words - Does the X509ChainPolicy ever end up holding on to any valid / invalid state from an old call to chain.Build()?\r\n\r\nI couldn’t find anything in the source code that says the Policy leads to any cross-talk between multiple chain.Build() calls using the same Policy object, but still wanted someone from corefx to weigh in and give an all clear.\r\n\r\nThanks!\r\n\r\ncc @bartonjs @stephentoub \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30439/comments",
    "author": "hiteshmadan",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2019-08-01T15:33:06Z",
        "body": "`X509ChainPolicy` is just an options input type in the end, nothing is written back to it during chain walking.  It should be fine to keep it long term if (as you already acknowledged) you are explicitly setting VerificationTime before each call to X509Chain.Build."
      },
      {
        "user": "hiteshmadan",
        "created_at": "2019-08-01T17:13:02Z",
        "body": "ok. thanks!"
      }
    ]
  },
  {
    "number": 30409,
    "title": "Dataflow does not process messages in parallel?",
    "created_at": "2019-07-29T13:42:34Z",
    "closed_at": "2020-02-01T03:39:02Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30409",
    "body": "Hello.\r\nIt seems that specifying MaxDegreeOfParallelism does not actually allows dataflow blocks to process multiple messages in parallel. Or I'm missing something?\r\n\r\n```\r\npublic class DataflowTests\r\n{\r\n    private readonly ITestOutputHelper output;\r\n\r\n\r\n    public DataflowTests(ITestOutputHelper output)\r\n    {\r\n        this.output = output;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task Test()\r\n    {\r\n        // arrange\r\n        var second_item_finished = new SemaphoreSlim(0, 1);\r\n        var completed_items = new ConcurrentBag<string>();\r\n\r\n        var start_block = new BufferBlock<string>(new DataflowBlockOptions { BoundedCapacity = 10 });\r\n\r\n        var process_block = new TransformBlock<string, string>(\r\n            async x =>\r\n            {\r\n                // await Task.Yield();\r\n\r\n                this.output.WriteLine(\"Process block: {0}\", x);\r\n\r\n                if (x == \"1\")\r\n                    await second_item_finished.WaitAsync();\r\n\r\n                return x;\r\n            },\r\n            new ExecutionDataflowBlockOptions\r\n            {\r\n                MaxDegreeOfParallelism = 4,\r\n                BoundedCapacity = 10\r\n            });\r\n\r\n\r\n        var final_block = new ActionBlock<string>(\r\n            x =>\r\n            {\r\n                this.output.WriteLine(\"Final block: {0}\", x);\r\n\r\n                if (x == \"2\")\r\n                    second_item_finished.Release();\r\n\r\n                completed_items.Add(x);\r\n            },\r\n            new ExecutionDataflowBlockOptions\r\n            {\r\n                MaxDegreeOfParallelism = 4,\r\n                BoundedCapacity = 10\r\n            });\r\n\r\n        start_block.LinkTo(process_block, new DataflowLinkOptions { PropagateCompletion = true });\r\n        process_block.LinkTo(final_block, new DataflowLinkOptions { PropagateCompletion = true });\r\n\r\n        // act\r\n        foreach (var item in new[] { \"1\", \"2\" })\r\n            if (!await start_block.SendAsync(item))\r\n                this.output.WriteLine(\"Unable to send: {0}\", item);\r\n\r\n        start_block.Complete();\r\n\r\n        if (!final_block.Completion.Wait(2000))\r\n            throw new TimeoutException();\r\n\r\n\r\n        // assert\r\n        completed_items.Should().BeEquivalentTo(\"1\", \"2\");\r\n    }\r\n}\r\n```\r\n\r\nI've tried changing MaxMessagesPerTask to 1 for both process and final block and got the same result (timeout exception).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30409/comments",
    "author": "MichaelLogutov",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2019-07-29T14:04:01Z",
        "body": "By default items are propagated from a block in order.  So if you block the processing of item 1 such that item 1 won't complete until item 2 has propagated, you will deadlock.  Try setting EnsureOrdered to false on your ExecutionDataflowBlockOptions."
      },
      {
        "user": "MichaelLogutov",
        "created_at": "2019-07-29T21:07:56Z",
        "body": "Thanks! It works. I must admit - this is not default behavior I was expecting. I thought that just specifying max DOP was enough to get dataflow block working in parallel. But it seems that without changing EnsureOrdered max DOP ignored and dataflow block always working in single task mode. Am I correct?"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-29T21:09:40Z",
        "body": "> But it seems that without changing EnsureOrdered max DOP ignored and dataflow block always working in single task mode.  Am I correct?\r\n\r\nNo.  An individual block will still be able to process up to DOP operations in parallel, but that's not what your test is doing."
      },
      {
        "user": "MichaelLogutov",
        "created_at": "2019-07-29T21:25:03Z",
        "body": "Thanks. I got it."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-29T21:26:15Z",
        "body": "Thanks."
      }
    ]
  },
  {
    "number": 30404,
    "title": "System.Threading.Channels - Concurrent Stack",
    "created_at": "2019-07-28T12:11:15Z",
    "closed_at": "2020-02-01T03:38:20Z",
    "labels": [
      "question",
      "area-System.Threading.Channels"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30404",
    "body": "It looks like System.Thread.Channels uses a ConcurrentQueue<T> under the hood.  It would be really great it it could also use a ConcurrentStack<T>.  Are there any chances a creation parameter could be added that lets me use a stack instead?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30404/comments",
    "author": "TonyValenti",
    "comments": [
      {
        "user": "tarekgh",
        "created_at": "2019-07-28T22:11:01Z",
        "body": "CC @stephentoub "
      },
      {
        "user": "tarekgh",
        "created_at": "2019-07-28T22:11:50Z",
        "body": "@TonyValenti what exactly the issue you are trying to solve here?"
      },
      {
        "user": "TonyValenti",
        "created_at": "2019-07-29T04:54:02Z",
        "body": "@tarekgh @stephentoub \r\nWe have a codebase that we're wanting to port to channels.  Here's what it does currently:\r\n\r\n1. Take a large dataset (10M+ IDs)  and break it down into standardized chunks (200 elements each)\r\n2.  The chunks are fed into a concurrent stack.\r\n3.  We pop a chunk off the stack and feed it to a third party.\r\n4.  Occasionally the third party will return \"error\" for the batch and we get no results for any of the 200 elements.  When this happens we split the batch into smaller batches and push the smaller batches back onto the stack, preserving the order.\r\n4.  Eventually we find the element that was causing the error and log some data about it.\r\n\r\nThe order that we process items is important which is why we currently use a stack instead of a queue.\r\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-29T13:51:49Z",
        "body": "> The order that we process items is important\r\n\r\nI'm struggling to understand this part.  If you're pushing items into the concurrent stack non-concurrently with the consumer popping, then you wouldn't need a concurrent stack and could just use a stack.  If you're pushing items into the concurrent stack concurrently with the consumer popping, then you are very likely going to process items out of order already, e.g. thread 1 pushes item A then B then C, thread 2 pops C, thread 1 pushes D, thread 2 pops D then A then B, so thread 2 has processed the items in the order C D A B which doesn't match either a forwards or backwards ordering of the elements as produced by thread 1.  Can you elaborate?"
      },
      {
        "user": "TonyValenti",
        "created_at": "2019-07-29T14:41:27Z",
        "body": "@stephentoub Thinking through this a little bit more, I think we have to keep certain aspects of the stack."
      }
    ]
  },
  {
    "number": 13113,
    "title": "A question about CLR",
    "created_at": "2019-07-20T03:35:38Z",
    "closed_at": "2020-01-31T07:29:48Z",
    "labels": [
      "question",
      "area-GC-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13113",
    "body": "I read CLR via C# （4th version in 2014），it says that MS's purpose is decreasing GC's time to less than a normal memory page fault's time，so today do you keep the purpose or abandone it？",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13113/comments",
    "author": "forestbat",
    "comments": [
      {
        "user": "Maoni0",
        "created_at": "2019-07-21T20:33:38Z",
        "body": "yes, we always aim to improve GC efficiency which includes pause time. obviously pause time needs to be balanced against other perf metrics of a GC; we plan to give you a finer grain choice of specifying which one(s) you care about the most (pause, heap size, GC CPU time)"
      }
    ]
  },
  {
    "number": 13111,
    "title": "ProfilerAPI: Is it safe to cache IMetaDataImport",
    "created_at": "2019-07-19T03:30:31Z",
    "closed_at": "2020-03-27T22:40:55Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13111",
    "body": "Is it safe for profiler to cache IMetaDataImport for a module for a module lifetime?\r\nI'm asking this question, as ICorProfilerInfo::GetModuleMetaData will fail if it is called from P/Invoke  callback, but looks like calls for cached IMetaDataImport methods works fine even from P/Invoke. \r\nMSDN documentation does not give any hints about IMetaDataImport lifetime and any problems that may be introduced by preserving IMetaDataImport non-released.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13111/comments",
    "author": "iskiselev",
    "comments": [
      {
        "user": "tommcdon",
        "created_at": "2019-07-19T17:49:08Z",
        "body": "@davmason "
      },
      {
        "user": "davmason",
        "created_at": "2019-07-19T18:58:19Z",
        "body": "Yes, that is safe as long as you respect COM semantics. Once the refcount goes to 0 it will no longer be usable, but as long as you keep a refcount on it you can use it safely.\r\n\r\nWhat HR do you get when calling GetModuleMetadata? I wouldn't expect that to fail at any point when the module is alive. You may be hitting some corner case though of the runtime being in a weird state."
      },
      {
        "user": "mjsabby",
        "created_at": "2019-07-19T19:12:00Z",
        "body": "It's probably because `GetModuleMetadata` is `PROFILER_TO_CLR_ENTRYPOINT_SYNC_EX`"
      },
      {
        "user": "davmason",
        "created_at": "2019-07-19T19:26:45Z",
        "body": "Thanks @mjsabby, that's definitely it 😄 "
      },
      {
        "user": "davmason",
        "created_at": "2020-03-27T22:40:55Z",
        "body": "Closing as this has been answered"
      }
    ]
  },
  {
    "number": 30288,
    "title": "Question : ValueTask or warning because of not using await",
    "created_at": "2019-07-17T12:23:47Z",
    "closed_at": "2020-02-01T03:27:09Z",
    "labels": [
      "question",
      "area-System.Threading"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30288",
    "body": "Hi\r\n\r\nI have an interface from an external library which i have to adhere by.\r\nIt looks like this :\r\n```\r\npublic Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n}\r\n```\r\nI only have synchronous code that is required in this block.\r\nIs it better make the function async and just return the result : \r\n```\r\npublic async Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    //Much synchronous code here...\r\n    return new RealestateObject();\r\n}\r\n```\r\nWhich warns me :\r\n**This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do** \r\n\r\n**OR**\r\n\r\nI await ValueTask and return that : \r\n```\r\npublic async Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    return await GetValue(request);\r\n}\r\n\r\npublic ValueTask<RealestateObject> GetValue(RealEstatePushRequestModel request)\r\n{\r\n    //Much synchronous code here...\r\n    return new ValueTask<RealestateObject>(new RealestateObject() { ObjectKey = \"dummydata\" });\r\n}\r\n```\r\nWhich has no warnings at all.\r\n\r\n**OR** \r\n\r\nuse **Task.FromResult**.\r\n```\r\npublic Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    //Much synchronous code here...\r\n    return Task.FromResult(new RealestateObject() { ObjectKey = \"dummydata\" });\r\n}\r\n```\r\n\r\nWhich one of the scenario's is the best to use ?\r\n\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30288/comments",
    "author": "christophedemey",
    "comments": [
      {
        "user": "Wraith2",
        "created_at": "2019-07-17T13:00:11Z",
        "body": "I would choose option 3. Your code isn't doing any async work so there is no benefit to using a compiler generated state machine. ValueTask is not relevant to this use case. You may want to check the cancellation token to throw an exception or return an appropriate value."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-17T13:45:20Z",
        "body": "What @Wraith2 said.\r\n\r\nYour second approach with `ValueTask` is just adding unnecessary cost and complexity, solely to confuse the compiler's analysis in order to avoid the warning, but it logically has the same condition the compiler is trying to flag: you've got an async method and you're always completing synchronously.\r\n\r\nI'd recommend either just suppressing the warning, or not using `async` in the signature and just using Task.FromResult.  If you do the latter, you'll also want to consider adding a try/catch block, and in the catch block returning any exceptions via a Task.FromException (and potentially cancellation via Task.FromCanceled)... `async` does that for you."
      },
      {
        "user": "christophedemey",
        "created_at": "2019-07-17T13:49:20Z",
        "body": "Thanks for the info! :) "
      }
    ]
  },
  {
    "number": 13059,
    "title": "Dictionary ctor in .NET Standard is missing",
    "created_at": "2019-07-11T10:46:15Z",
    "closed_at": "2020-01-31T07:25:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13059",
    "body": "The following constructor can be found in `Microsoft.NetCore.App 2.2.0`\r\n```csharp\r\npublic Dictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection);\r\n```\r\nWhy is this constructor missing in `NetStandard.Library 2.0.3`?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13059/comments",
    "author": "glucaci",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-07-11T15:47:10Z",
        "body": ".NET Standard 2.0 was the common subset of .NET Core and .NET Framework 4.7.2. This constructor is not present in .NET Framework 4.6.1, and thus it could not have been included in .NET Standard 2.0."
      }
    ]
  },
  {
    "number": 3676,
    "title": "Using load_assembly_and_get_function_pointer",
    "created_at": "2019-07-09T10:17:29Z",
    "closed_at": "2020-01-30T21:29:36Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3676",
    "body": "Why is the new API different from the `coreclr_create_delegate`, requiring a delegate type for every different method signature?\r\n\r\nIf I have a lot of methods to call, is it recommended to define delegate types or create `ComponentEntryPoint` wrappers for them?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3676/comments",
    "author": "nxtn",
    "comments": [
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-07-09T15:01:28Z",
        "body": "cc @vitek-karas @elinor-fung "
      },
      {
        "user": "nxtn",
        "created_at": "2019-07-09T15:05:21Z",
        "body": "dotnet/coreclr#23958 may answer the first question.\r\n\r\nIf you are not going to \"expose the full set of functionality to the connecting coreclr/native host dll\", can I get the CoreCLR host from `nethost` - `hostfxr` - `hostpolicy` layers and directly call `coreclr_create_delegate` instead of using this heavyweight API?"
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-07-09T15:08:44Z",
        "body": "> can I get the CoreCLR host from nethost - hostfxr - hostpolicy and directly call coreclr_create_delegate instead of using this heavyweight API?\r\n\r\nYes.  The nethost layer offers a few convience apis to assist with 1) locating the correct .NET Core version to load, and 2) generates the necessary initialization parameters using the standard logic.  Once .NET Core (eg. coreclr) is loaded, you can then use the exports as you would before.  The hope is that value comes in finding and initializing.  \r\n\r\nThe current nethost is a first step on a journey to enable a richer hosting experience.  We did not want to lead with too much, as more comes on line."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-07-09T15:29:57Z",
        "body": "The `load_assembly_and_get_function_pointer` is not meant as a replacement for a low level so called \"embedding\" API - which would let you work with managed objects/methods from native code in a generic manner. It is meant to provide a robust way to initialize the runtime and get a way to call into managed code.\r\n\r\nWe expect people to use this functionality to either make a single (or few) calls to managed code, or to build their own \"interop\" on top. The problem with allowing to create a native function pointer to any method is that if the method's signature is not super simple, there's no way to customize the marshaling.  For example if the method would take a string argument, there would be no way to specify which encoding should be exposed to the native code... and so on.\r\n\r\nThe \"embedding API\" which would allow native code to have much greater control over the communication with managed is something we are considering for the future.\r\n\r\nWe did consider exposing the `coreclr` hosting directly (from the new functionality), but it creates some non-trivial problems with lifetime management. And also going forward it would be really tricky to do this in a consistent way if the runtime is actually Mono."
      },
      {
        "user": "nxtn",
        "created_at": "2019-07-09T15:48:42Z",
        "body": "Thanks a lot for your answers. I would be super happy to see the \"embedding APIs\" in the future.\r\n\r\n> there's no way to customize the marshaling\r\n\r\nWe used `MarshalAsAttribute` and `StructLayoutAttribute.CharSet` to specify the marshaling behaviors in reverse P/Invoke."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-12-16T14:29:25Z",
        "body": "Sorry - completely missed your reply (for a long time apparently).\r\nWith the API, you specify the delegate which can (And should) contain the marshalling attributes, basically the way you describe it. I'm not sure if this would work if the same attributes were present on the method itself (it might).\r\n\r\nThere's a slight benefit to the current approach and that is it doesn't require us to create a new type (the delegate type) on the fly. So less \"magic\". I understand that it can be cumbersome if you want to use it on many public APIs.\r\n\r\nAs noted above, if the use case is to call many managed methods from native, we think the better way to do that is to use the existing `hostfxr` functionality to get a single \"helper\" in managed, though which you would expose all the managed methods (basically as simple reverse PInvokes). This lets us keep the existing native APIs relatively simple and also provides lot more flexibility to the exact implementation of this pattern. Not counting the performance benefits (the existing functionality has to perform non-trivial amount of checks to and cache lookups and finally a reflection call (creation of the delegate) to even get to the managed code, direct reverse PInvoke is much faster as it can avoid all of that).\r\n\r\nIf you have additional questions or issues with this, please open a new issue (preferably in dotnet/runtime repo)."
      }
    ]
  },
  {
    "number": 30188,
    "title": "Double.TryParse succeeds and returns an incorrect value for strings in scientific notation that exceed the bounds of a double.",
    "created_at": "2019-07-08T18:42:57Z",
    "closed_at": "2020-02-01T03:17:02Z",
    "labels": [
      "question",
      "area-System.Numerics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30188",
    "body": ".NET Core Version: Version: 3.0.100-preview6-012264 - I think. VS2019 apparently hides the NetCore packages, now, so I am not 100% sure. \r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\nRun the following code: \r\n            var text = \"123e466\";\r\n            var provider = new CultureInfo(\"en-US\");\r\n            double value;\r\n\r\n            var success = Double.TryParse(\r\n                text,\r\n                NumberStyles.Any & ~NumberStyles.AllowTrailingSign,\r\n                provider,\r\n                out value);\r\n\r\n            MessageBox.Show(this, value.ToString(), success.ToString());\r\n\r\nResults in DotNetFramework: \r\n\tsuccess = false\r\n\tvalue = 0\r\n\r\nResults in NetCore:\r\n\tsuccess = true\r\n\tvalue = double.Infinity\r\n\r\nIt seems to me that the original .Net Framework results were correct. \"123e466\" exceeds the bounds of a double, but it should fail to parse, not return Infinity. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30188/comments",
    "author": "IGMikeS",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2019-07-08T20:29:35Z",
        "body": "@tannergooding "
      },
      {
        "user": "tannergooding",
        "created_at": "2019-07-08T20:38:34Z",
        "body": "This was updated to be IEEE 754 compliant for .NET Core 3.0. The correct behavior is that values are parsed to the \"infinitely precise\" value and then rounded to the \"nearest representable\" result (which in this case is `Infinity`).\r\n\r\nThe new behavior is correct, compliant, and expected."
      },
      {
        "user": "danmoseley",
        "created_at": "2019-07-08T22:35:00Z",
        "body": "I'm going to close this @IGMikeS . Feel free to reopen if you have more questions."
      },
      {
        "user": "IGMikeS",
        "created_at": "2019-07-09T12:54:34Z",
        "body": "Okay, thanks for the info. :)"
      }
    ]
  },
  {
    "number": 29988,
    "title": "Hardware Acceleration for unsupported overloads",
    "created_at": "2019-06-23T21:28:14Z",
    "closed_at": "2020-02-01T02:57:40Z",
    "labels": [
      "question",
      "area-System.Runtime.Intrinsics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29988",
    "body": "Some methods in System.Runtime.Intrinsics.X86 don't have overloads for certain data types. For example:\r\n\r\n```\r\nlong u1 = 12L,\r\nlong u2 = 14L;\r\nvar vectorOne = Vector128.Create(u1);\r\nvar vectorTwo = Vector128.Create(u2);\r\nvar mask = Sse2.MoveMask(Sse2.CompareEqual(vectorOne, vectorTwo))\r\n...\r\n```\r\n\r\nWhile this is expected as there is no hardware instruction for them. Is there **anything** I can do as a workaround to compare, in this case, two Vector128 of data type long using Sse2? Such as reinterpreting, casting, different APIs?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29988/comments",
    "author": "Symbai",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2019-06-24T05:52:17Z",
        "body": "If you only care about equality/inequality then yes, you can reinterpret vectors to use a different integer type. Otherwise you should be able to use `Subtract` and then `MoveMask` to extract the sign bits."
      },
      {
        "user": "Symbai",
        "created_at": "2019-06-24T06:08:13Z",
        "body": "Thanks, I've tried reinterpreting it as double as I thought it needs to have the same amount of 8 bytes in memory but that didn't worked in some cases. Using an integer type as you said however works fine.\r\n\r\nI'm also checking for CompareGreaterThan and CompareLessThan. Can you show me a short code example how I can compare them then?"
      },
      {
        "user": "mikedn",
        "created_at": "2019-06-24T07:17:08Z",
        "body": "> Thanks, I've tried reinterpreting it as double as I thought it needs to have the same amount of 8 bytes in memory but that didn't worked in some cases. Using an integer type as you said however works fine.\r\n\r\nYes, floating point compares cannot be used in this case because floating point has various special values (NaN, negative 0 etc.).\r\n\r\n> I'm also checking for CompareGreaterThan and CompareLessThan. Can you show me a short code example how I can compare them then?\r\n\r\nIf you're not concerned about integer overflow then `LessThan` is pretty simple: `x < y` iff `x - y < 0` and `x - y < 0` iff `signbit(x - y) = 1`. To get the sign bits:\r\n```C#\r\nSse2.MoveMask(Sse2.Subtract(v1, v2).AsByte()) & 0x8080\r\n```\r\nNow it depends what do you want to do with the result. Perhaps you don't really need `MoveMask`, perhaps you need the result in vector format, like normal vector compares provide?\r\n"
      },
      {
        "user": "Symbai",
        "created_at": "2019-06-24T07:49:54Z",
        "body": "I have a byte array which I iterate through and trying to find matches for a specific value, which itself can be in various data types T, such as long. Matches can be either based on equality, or bigger or smaller. To gain maximum performance I'm casting the byte array into a span of vector128<T> and then use hardware acceleration of SSE2 to compare.\r\n\r\nBut I also need to save the position of the match in the original byte array, as well as the matched value as data type T. For this I'm using MoveMask and then TrailingZeroCount and IsBitSet from the BitOps class.  This is what I've seen in this repo once and all together is 2-4x times faster than reinterpreting the original byte array as an array of long and iterate through it with a simple loop.\r\n\r\nIf I just compare two vectors I know if I got a match, but I dont know which of the elements in the vector triggered the match. And calling GetElement for all of them is slower than MoveMask and only call GetElement when needed. Please tell me when I'm wrong and there is a faster and easier way."
      },
      {
        "user": "joperezr",
        "created_at": "2019-06-24T17:01:41Z",
        "body": "cc: @tannergooding "
      },
      {
        "user": "tannergooding",
        "created_at": "2019-06-24T17:12:22Z",
        "body": "Using `MoveMask` to get the element which triggered the match and `BitOperations.LeadingZeroCount` or `BitOperations.TrailingZeroCount` (the former hardware accelerated on more computers) to get the index of that byte is likely the right thing to do here.\r\n\r\nWe do similar things in the `SpanHelpers` class."
      },
      {
        "user": "Symbai",
        "created_at": "2019-06-24T18:13:53Z",
        "body": "Okay thanks :+1:  I'm closing this then."
      }
    ]
  },
  {
    "number": 29909,
    "title": "[System.Text.Json] merging two json structures",
    "created_at": "2019-06-16T19:52:43Z",
    "closed_at": "2020-02-01T02:49:32Z",
    "labels": [
      "question",
      "area-System.Text.Json",
      "json-functionality-doc"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29909",
    "body": "I ran into this use case recently and I was unable to find a solution. \r\n\r\nOn one hand I read the contents of a file, then I obtained the JSON representaiton of that content with\r\n\r\n```\r\nvar document = JsonDocument.Parse(fileContent);\r\n```\r\n\r\nNow I have access to all that data. The second thing I did was build a custom JSON object with the `Utf8JsonWriter`.\r\n\r\n**Question:** how can I integrate the latter object into the former (`document`)? I want to create a property in `document` (maybe nested quite deeply) and set the value of that property to the object that I build with `Utf8JsonWriter`.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29909/comments",
    "author": "axm",
    "comments": [
      {
        "user": "ahsonkhan",
        "created_at": "2019-06-17T19:50:21Z",
        "body": "The `JsonDocument`, in its v1 implementation, is read-only (i.e. it is not modifiable).\r\n\r\nOne thing you could do as a workaround, via the `Utf8JsonWriter`, is enumerate all the tokens of the `JsonDocument`, and write them out to the writer (including inserting the custom JSON object you have). You can then pass the output of the `Utf8JsonWriter` to `JsonDocument.Parse` to get a `JsonDocument` containing your whole JSON.\r\n\r\nMaybe something like this (note: this isn't fully tested, just a sample):\r\n```C#\r\n[Fact]\r\npublic static void ModifyJsonDocument()\r\n{\r\n    string originalJson = \"{\\\"hi\\\": 1}\";\r\n    JsonDocument doc = JsonDocument.Parse(originalJson);\r\n\r\n    JsonDocument newDoc = AddJsonData(doc, doc);\r\n\r\n    Assert.Equal(\"{\\\"hi\\\":1,\\\"mySubElement\\\":{\\\"hi\\\":1}}\", newDoc.RootElement.ToString());\r\n}\r\n\r\nprivate static JsonDocument AddJsonData(JsonDocument original, JsonDocument subOject)\r\n{\r\n    JsonElement element = original.RootElement;\r\n    var abw = new ArrayBufferWriter<byte>();\r\n    using var writer = new Utf8JsonWriter(abw);\r\n\r\n    writer.WriteStartObject();\r\n    foreach(JsonProperty properties in element.EnumerateObject())\r\n    {\r\n        properties.Value.WriteProperty(properties.Name, writer);\r\n    }\r\n    JsonElement subElement = subOject.RootElement;\r\n    subElement.WriteProperty(\"mySubElement\", writer);\r\n    writer.WriteEndObject();\r\n\r\n    writer.Flush();\r\n\r\n    return JsonDocument.Parse(abw.WrittenMemory);\r\n}\r\n```"
      },
      {
        "user": "axm",
        "created_at": "2019-06-18T08:55:23Z",
        "body": "Thanks @ahsonkhan that works.\r\n\r\nAre there any plans to introduce this functionality out of the box in 1.1 or above?"
      },
      {
        "user": "ahsonkhan",
        "created_at": "2019-06-18T08:57:48Z",
        "body": "> Are there any plans to introduce this functionality out of the box in 1.1 or above?\r\n\r\nWhen you say 1.1 or above, what do you mean? If you mean the next version of .NET Core, we will likely add support for a modifiable `JsonDocument` in the next release of .NET Core (after 3.0)."
      }
    ]
  },
  {
    "number": 3642,
    "title": "Can't launch a .net core 3.0 WPF app from another .net core 3.0 app",
    "created_at": "2019-06-12T19:34:32Z",
    "closed_at": "2020-09-30T17:06:02Z",
    "labels": [
      "question",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3642",
    "body": "I have a .net core 3.0 WPF application, called client.exe.\r\n\r\nI have a second .net core 3.0 application. \r\n\r\nI'm trying to launch client.exe from the other application. I get the error, \r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet'.\r\n```\r\n\r\nThe code is\r\n```c#\r\nvar filename = @$\"bin\\Debug\\netcoreapp3.0\\Client.exe\";\r\nvar child = Process.Start(new ProcessStartInfo()\r\n{\r\n  WorkingDirectory = Path.GetDirectoryName(filename),\r\n  FileName = filename,\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3642/comments",
    "author": "AnthonyM",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2019-06-14T18:17:18Z",
        "body": "@jeffschwMSFT does it belong to core-setup repo?"
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-06-16T02:47:14Z",
        "body": "I moved the issue to core-setup."
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-06-16T02:50:57Z",
        "body": "@AnthonyM can you share a repro?  \r\n\r\ncc @elinor-fung "
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-06-17T07:53:52Z",
        "body": "@AnthonyM I just tried a simple repro of this (new WPF app, new console app, console app executes the .exe produced by the WPF app)... using .NET 3.0 Preview 4 - and it works.\r\n\r\nIf you can't provide a repro, couple of questions:\r\n* What version of .NET Core you're using (`dotnet --info` output maybe?)\r\n* Where are the apps produced relative to each other? For example, do you have the `client.exe` in the same output folder as the console app's .exe?\r\n* Is any of the apps published as self-contained?\r\n* Are you using xcopy install of .NET Core?"
      },
      {
        "user": "elinor-fung",
        "created_at": "2020-09-30T17:06:02Z",
        "body": "@AnthonyM I am closing this for now since we have not been able to repro this. If you are still seeing this in latest versions of .NET and have more information, feel free to reactivate."
      }
    ]
  },
  {
    "number": 29815,
    "title": ".NET Core 3 and WPF library",
    "created_at": "2019-06-07T22:23:21Z",
    "closed_at": "2020-02-01T02:41:45Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29815",
    "body": "I just tried some existing WPF code using .NET Core 3.0 preview 5 and VS 16.2 Preview 1. I read the porting guide for WPF and it seems to only talk about apps not libraries. The main changes seem to be \r\n```\r\n    <OutputType>WinExe</OutputType>\r\n    <UseWPF>true</UseWPF>\r\n```\r\nWhen I try \r\n```\r\n    <OutputType>Library</OutputType>\r\n    <UseWPF>true</UseWPF>\r\n```\r\nI get unresolved references for all the WPF related stuff. I did try WinLibrary but that is rejected. Does this only work for applications at present?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29815/comments",
    "author": "davidhunter22",
    "comments": [
      {
        "user": "wangfu91",
        "created_at": "2019-06-08T07:15:04Z",
        "body": "@davidhunter22  For libraries, you need change the ```Sdk``` to ```Microsoft.NET.Sdk.WindowsDesktop```, and add the ```<UseWPF>true</UseWPF>``` tag.\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n</Project>\r\n```"
      },
      {
        "user": "davidhunter22",
        "created_at": "2019-06-08T14:03:31Z",
        "body": "Ah can't believe I didn't see the WindowsDesktop thing. That works great thanks."
      }
    ]
  },
  {
    "number": 42144,
    "title": "Q - How to make the DefaultCredentials = true work again using SocketsMessageHandler?",
    "created_at": "2019-05-22T07:49:53Z",
    "closed_at": "2021-06-02T10:51:19Z",
    "labels": [
      "question",
      "area-Extensions-HttpClientFactory"
    ],
    "url": "https://github.com/dotnet/runtime/issues/42144",
    "body": "Hello!\r\n\r\nI'm currently facing an issue using aspnetcore 2.2 and IIS\r\n\r\nI'm working on a software A using aspnetcore 2.2, running on PoolA authenticated as PoolAIdentity, wich is trying to call api B, running on PoolB authenticated as PoolBIdentity.\r\n\r\nWhat I want is that app B receive the call from A with the A pool identity's, wich does not seems to be working.\r\n\r\nUsing .Net Fwk 4.x, my code would look like this:\r\n```\r\nusing (var client = new HttpClient(new HttpClientHandler { useDefaultCredentials = true }) {\r\n   /// Something usefull\r\n}\r\n```\r\nUsing aspnet core, my code is looking like this:\r\n```\r\nvar apiUri = new Uri(appConfig[\"ApiUrls:MyApi\"]);\r\nservices.AddHttpClient(\"myApi\", c => {\r\n  c.BaseAddress = apiUri;\r\n})\r\n.ConfigurePrimaryHttpMessageHandler(() => {\r\n    var credentialsCache = new CredentialCache { { apiUri, \"NTLM\", CredentialCache.DefaultNetworkCredentials } };\r\n    return new SocketsMessageHandler { Credentials = credentialsCache };\r\n});\r\n\r\nservices.AddTransient<IService, Service>();\r\nwith IService defined like this:\r\n\r\npublic Service(IHttpClientFactory factory)\r\n{\r\n   _client = factory.CreateClient(\"myApi\");\r\n}\r\n```\r\nI've tryed many things, but I'm always receiving a 401 from \"myApi\". When I look on IIS logs, request handled by app B seems to be never authenticated using the A pool identity's.\r\n\r\nWhat am I doing wrong?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/42144/comments",
    "author": "kogratte",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-09-12T15:21:13Z",
        "body": "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "ghost",
        "created_at": "2020-09-13T13:10:41Z",
        "body": "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "ericstj",
        "created_at": "2020-09-14T18:19:06Z",
        "body": "@dotnet/ncl does the sample code above look correct for `useDefaultCredentials` behavior on a `SocketsMessageHandler`?"
      },
      {
        "user": "wfurt",
        "created_at": "2020-09-15T17:23:32Z",
        "body": "Can you try simple HttpClient without any pooling? Using `DefaultCredentials` should take identity off your aspnet app. You can can Wireshark and check if you see negotiations. Make sure NTLM is enabled since that is generally deprecated."
      },
      {
        "user": "CarnaViire",
        "created_at": "2021-06-02T10:51:19Z",
        "body": "Triage: the problem doesn't seem specific to HttpClientFactory, more related to SocketsHttpHandler. It also needs additional information to be actionable. Closing for now, but feel free to reopen if the problem still stands and you can provide additional info."
      }
    ]
  },
  {
    "number": 29557,
    "title": "System.Net.Http not working for .NET core project targeting net45 ",
    "created_at": "2019-05-15T11:07:19Z",
    "closed_at": "2020-02-01T02:15:38Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29557",
    "body": "I have a project which is written both in .NET framework and .NET core.\r\nThe core project targets **netstandard2.0, net45 and net461**\r\n\r\nI have a Package reference to System.Net.Http as follows, in both the projects \r\n\r\n`<ItemGroup>\r\n      <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.1\" />\r\n      <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>`\r\n\r\nnet45 target expects the System.Net.Http version to be 4.0.0 , and I have used binding redirect to achieve the same in the .NET Framework project\r\n\r\n`<dependentAssembly>\r\n    <assemblyIdentity name=\"System.Net.Http\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n    <bindingRedirect oldVersion=\"0.0.0.0-4.2.0.0\" newVersion=\"4.0.0.0\" />\r\n  </dependentAssembly> \r\n`\r\n\r\nThe referenced dll in case of the .NET framework project is version 4.0.0 as expected.\r\n\r\nBut the same is not achievable in .NET core project. Somehow it refers to 4.2.0.0 and hence the application targeting net45 breaks.\r\n\r\nPlease advice how to use System.Net.Http version 4.0.0 in .NET Core application targeting ns2, net45 and net461",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29557/comments",
    "author": "ksaurabh1",
    "comments": [
      {
        "user": "wfurt",
        "created_at": "2019-05-16T00:22:54Z",
        "body": "cc: @ericstj "
      },
      {
        "user": "ericstj",
        "created_at": "2019-06-05T06:35:22Z",
        "body": "I think you mean you're using the .NET.SDK to target .NET45, is that correct?  There is no such thing as a \".NET Core application targeting net45\".  .NET Core applications do not use bindingRedirects at all and target netcoreappX.Y.  \r\n\r\nIf you're using System.Net.Http 4.3.0 package you should redirect to the assembly version that is carried by that package, not down to 4.0.0.0.  Redirecting down can break assemblies which depend on the APIs that are only present in the higher version.\r\n\r\nIf you're still having problems that are specific to the .NET.SDK you can open an issue in the dotnet/sdk repo and provide a build log that illustrates the issue.\r\n"
      },
      {
        "user": "ksaurabh1",
        "created_at": "2019-06-05T07:32:28Z",
        "body": "Thanks for the clarification Eric.\r\nYes, i am using .NET.SDK to target net45.\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <TargetFrameworks>netstandard2.0;net45;net461</TargetFrameworks>\r\n\r\nI am not actually using the binding redirect, that was one of the option which i tried.\r\nthe configuration present in csproj is \r\n\r\n<ItemGroup>\r\n      <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.1\" />\r\n      <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n\r\n\r\nThe irony is when i am building the project in my local machine through VS IDE, all the bindings happen properly, System.Net.Http v4.0.0.0 for net45 , v4.1.1.0 for net461 and 4.2.0.0 for ns2.0.\r\n\r\nBut when i am building the same solution using a script on a host, the bindings were not happening correctly. Maybe the reason is, I have only v4.0 and v4.7.2 present in folder  \"Reference Assemblies\\Microsoft\\Framework\\.NETFramework\". We are using cayman components to use the VS components on the host machines. As such, even if we put the v4.5 in reference assemblies we can target only one folder by setting the path (either 4.5 or 4.7.2), and as such as pointed by you, targeting folder 4.5 breaks assemblies which depend on the APIs that are only present in the higher version.\r\n\r\nWe are looking into the issue and how to get over it.\r\nThanks for your help."
      }
    ]
  },
  {
    "number": 29465,
    "title": "ProcessInfo Linux/Windows incompatibility",
    "created_at": "2019-05-06T12:40:26Z",
    "closed_at": "2020-02-01T02:07:07Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Process"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29465",
    "body": "Hi,\r\n\r\nI'm trying to run same process as a child of current process. Showed below code works just fine under windows, but fails in Linux with  error\r\n\r\nNo executable found matching command \"dotnet-MyDll.dll\"\r\n\r\n```\r\nvar processInfo = new ProcessStartInfo\r\n            {\r\n                FileName = \"dotnet\",\r\n                Arguments = \"MyDll.dll \" + id.ToString()\r\n            };\r\n\r\n            Console.WriteLine(\"Starting child process...\");\r\n            var process = Process.Start(processInfo);\r\n            return process;\r\n\r\n```\r\n\r\nIve also tried\r\n         `       FileName = \"dotnet MyDll.dll\"+ id.ToString(),`\r\nbut it ends up with different error \r\nUnhandled Exception: System.ComponentModel.Win32Exception: No such file or directory\r\n\r\nI've also tried \r\n```\r\n\r\n            var parentP = Process.GetCurrentProcess();\r\n            string fullPath = parentP.MainModule.FileName;\r\n            var command = fullPath+\" \"+Assembly.GetEntryAssembly().Location+\" \"+ id.ToString();\r\n            Console.WriteLine(\"Command = \"+command);\r\n            var processInfo = new ProcessStartInfo\r\n            {\r\n                FileName = command\r\n            };\r\n            var process = Process.Start(processInfo);\r\n```\r\nStill \r\nUnhandled Exception: System.ComponentModel.Win32Exception: No such file or directory\r\n\r\nwhat is proper way of running currently running dll again under Linux with dotnet core",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29465/comments",
    "author": "pragmaticadam",
    "comments": [
      {
        "user": "wfurt",
        "created_at": "2019-05-06T20:43:41Z",
        "body": "cc: @tmds "
      },
      {
        "user": "pragmaticadam",
        "created_at": "2019-05-07T09:21:32Z",
        "body": "I've also tried :\r\n\r\n```\r\nvar parrentP = Process.GetCurrentProcess();\r\n        string fullPath = parrentP.MainModule.FileName;\r\n        var command = \"\\\"\" + fullPath + \"\\\" \" ;\r\n        var args = Assembly.GetEntryAssembly().Location + \" \" + id;\r\n        var processInfo = new ProcessStartInfo\r\n        {\r\n            FileName = command,\r\n            Arguments = args\r\n        };\r\n            var process = Process.Start(processInfo);\r\n```\r\n\r\n\r\nWorks under windows, do not work under LINUX\r\n\r\n\r\nException No such file or directory\r\nException    at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n\r\nLooks for me like something with path building, \r\n\r\nWHAT IS WORK AROUND FOR THIS ?\r\n\r\n\r\n"
      },
      {
        "user": "tmds",
        "created_at": "2019-05-07T10:03:19Z",
        "body": "This works:\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    if (args.Length == 0)\r\n    {\r\n        var psi = new ProcessStartInfo\r\n        {\r\n            FileName = Process.GetCurrentProcess().MainModule.FileName,\r\n            Arguments = $\"\\\"{Assembly.GetEntryAssembly().Location}\\\" \\\"hello world\\\"\"\r\n        };\r\n        Process.Start(psi).WaitForExit();\r\n    }\r\n    else\r\n    {\r\n        System.Console.WriteLine(\"Called with arg: \" + args[0]);\r\n    }\r\n}\r\n```\r\n\r\nIf you want to use the `Arguments` property, you need to surround the individual arguments with double quotes. For example:\r\n```cs\r\nArguments = $\"\\\"{Assembly.GetEntryAssembly().Location}\\\" \\\"hello world\\\"\"\r\n```\r\n\r\nIf it doesn't work for you, what is the values of: `Process.GetCurrentProcess().MainModule.FileName` and `Assembly.GetEntryAssembly().Location`.\r\n\r\n> WHAT IS WORK AROUND FOR THIS ?\r\n\r\nDon't use CAPS unless you're angry and want to yell at someone."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-05-07T12:14:33Z",
        "body": "> If you want to use the Arguments property, you need to surround the individual arguments with double quotes\r\n\r\nOnly if they may have whitespace, right?"
      },
      {
        "user": "tmds",
        "created_at": "2019-05-07T12:51:34Z",
        "body": "> Only if they may have whitespace, right?\r\n\r\nYes, only needed then. They get stripped of the other arguments, so adding them everywhere is a simple way to avoid forgetting them somewhere."
      },
      {
        "user": "tmds",
        "created_at": "2019-05-08T11:56:36Z",
        "body": "@pragmaticadam is it working for you now? may this be closed?"
      },
      {
        "user": "pragmaticadam",
        "created_at": "2019-05-09T08:27:13Z",
        "body": "> @pragmaticadam is it working for you now? may this be closed?\r\n\r\nYes,\r\nthank You!"
      }
    ]
  },
  {
    "number": 29410,
    "title": "HttpClient header date parsing fixes should be backported to Core 2.x",
    "created_at": "2019-04-30T07:27:19Z",
    "closed_at": "2020-02-01T02:02:01Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29410",
    "body": "Initial issue: dotnet/runtime#29307\r\nPR containing the fixes: dotnet/corefx#28843\r\n\r\nI have tested against .NET Core SDK 2.2.106 and these fixes are not present - I believe they should be backported. Is it intentional that they are not, or will this work only be done after 3.0.0 has shipped, or...?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29410/comments",
    "author": "IanKemp",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2019-05-02T18:15:33Z",
        "body": "@karelz "
      },
      {
        "user": "karelz",
        "created_at": "2019-05-17T16:23:50Z",
        "body": "We backport only changes that are highly impactful on existing customers. Otherwise we would turn servicing branches into another master branch with less stability.\r\nIf there is need for the changes in 2.1/2.2 servicing, please tell us more details - what is the situation? How impactful is it? Did you consider any workarounds?"
      },
      {
        "user": "karelz",
        "created_at": "2019-05-17T16:52:10Z",
        "body": "Ah, I lost context for this one, reopening (sorry for the closing).\r\n\r\nEither way, the question should not be \"Why is this not ported\", but rather should be \"Why this should be ported\" -- let's try to go after that angle."
      },
      {
        "user": "karelz",
        "created_at": "2019-05-22T21:49:05Z",
        "body": "@IanKemp any update on why this is important and how it is impacting serious number of customers?"
      },
      {
        "user": "karelz",
        "created_at": "2019-06-15T00:43:56Z",
        "body": "Looks like there is no data for porting it to 2.2.x, closing. We can reconsider when more data appears."
      }
    ]
  },
  {
    "number": 29382,
    "title": "Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime'",
    "created_at": "2019-04-26T02:07:20Z",
    "closed_at": "2020-04-08T16:33:45Z",
    "labels": [
      "question",
      "area-System.Runtime.InteropServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29382",
    "body": "I use System.Runtime.InteropServices.Marshal in the wpf project of .net core 3.0, which works fine in the native development environment, but when it is released to other machines, it prompts \"System.TypeInitializationException: The type initializer for '<Module>' Threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\", but System.Runtime.InteropServices.Marshal is in System.Runtime.InteropServices.dll, not System.Runtime.dll, what is the reason? Quote confusion?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29382/comments",
    "author": "timslovic",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2019-04-26T02:51:20Z",
        "body": "@okman523 We would need to see the application and how this was being deployed to the other environment to understand the issue here. Is there a repo we can examine or can you post the project on a gist?"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2020-04-08T16:33:45Z",
        "body": "@okman523 Closing this due to inactivity. If the issue continues, please reply here and we can reopen. Thank you."
      }
    ]
  },
  {
    "number": 29268,
    "title": "Why is Task<T> not covariant?",
    "created_at": "2019-04-15T18:45:55Z",
    "closed_at": "2020-02-01T01:48:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29268",
    "body": "Does anybody have some history as to why this was done?\r\n\r\nmaybe @stephentoub ?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29268/comments",
    "author": "NinoFloris",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2019-04-15T18:46:44Z",
        "body": "Because classes can't be covariant, only delegates and interfaces."
      },
      {
        "user": "inputfalken",
        "created_at": "2019-09-04T07:57:21Z",
        "body": "@stephentoub \r\n\r\nWould it be possible to make `Task<T>` an implementation of a covariant interface in the future?"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-09-04T13:05:43Z",
        "body": "We've discussed multiple times whether it'd be worth adding such an interface, including at length when we initially added async/await to the language, and each time decided no.  You're welcome to open an issue proposing it, but I wouldn't expect much progress on it any time soon."
      }
    ]
  },
  {
    "number": 29160,
    "title": "What kind EqualityComparer use to unknown in compile time type?",
    "created_at": "2019-04-04T08:23:28Z",
    "closed_at": "2020-02-01T01:39:08Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29160",
    "body": "Is it possible get `EqualityComparer<>.Default`\r\nby `Type` in runtime?\r\nIn compile time I don't know what type will be.\r\n\r\nIs it correct to use `EqualityComparer<object>.Default`?\r\nCan there be problems with this?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29160/comments",
    "author": "westfin",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2019-05-15T19:23:49Z",
        "body": "@westfin Do you mean you want to get the default equality comparer for a type that you learn about at runtime, but not in a generic way?\r\n\r\n```C#\r\nIEqualityComparer comparer = (IEqualityComparer)typeof(EqualityComparer<>).\r\n    MakeGenericType(o.GetType()).\r\n    GetProperty(\"Default\", BindingFlags.Static | BindingFlags.Public);\r\n```\r\n\r\nSeems like maybe what you want?\r\n\r\nI think `EqualityComparer<object>.Default` is just going to end up calling `((object)x).Equals((object)y)`; which is probably functionally equivalent for any particular T, but I can't speak to that without a lot more digging."
      },
      {
        "user": "westfin",
        "created_at": "2019-06-19T09:05:07Z",
        "body": "> @westfin Do you mean you want to get the default equality comparer for a type that you learn about at runtime, but not in a generic way?\r\n\r\n@bartonjs Yes, you are right. Thanks for help\r\n\r\n"
      }
    ]
  },
  {
    "number": 29130,
    "title": "Potential Bug with a pinned GCHandle.Alloc call",
    "created_at": "2019-03-31T20:05:18Z",
    "closed_at": "2020-02-01T01:36:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29130",
    "body": "There's a problem with GCHandle.Alloc where if you try to allocate the same object (in my case the same byte array) with the GCHandle.Pinned parameter, it doesn't store the byte array again and instead just uses a reference to the first byte array that was stored.\r\n\r\nHere's an example\r\n\r\n```csharp\r\nvar bytes = new byte[] { 0x00, 0xFF, 0x00, 0xFF };\r\n\r\nvar buffer1 = GCHandle.Alloc(bytes, GCHandleType.Pinned);\r\n\r\nvar buffer1Address = buffer1.AddrOfPinnedObject();\r\n\r\nvar buffer2 = GCHandle.Alloc(bytes, GCHandleType.Pinned);\r\n\r\nvar buffer2Address = buffer2.AddrOfPinnedObject();\r\n```\r\n\r\nIn this case, buffer1Address and buffer2Address will be the exact same.\r\n\r\nI was just wondering if this is intentional or if it is indeed a bug?\r\n\r\nIf this is intentional maybe offering an option to not do this could be useful (at least in my case it is)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29130/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2019-03-31T20:26:05Z",
        "body": "AddrOfPinnedObject returns the same address because it's the same object.  There's only one array object here and thus only has one location in memory: AddrOfPinnedObject returns that location, the \"address of the pinned object\"."
      },
      {
        "user": "GrabYourPitchforks",
        "created_at": "2019-03-31T21:23:34Z",
        "body": "To add to what @stephentoub said, I think the confusion might be coming from the `Alloc` method name. The `GCHandle.Alloc` method is allocating a new _handle_ to the object, not duplicating the object passed in to it. So if you compare the two `GCHandle` instances directly, you'll see that they have two different values for the stored handle, but each handle points to the exact same backing object. Hence the behavior you're seeing with `AddrOfPinnedObject`."
      },
      {
        "user": "ghost",
        "created_at": "2019-03-31T21:54:49Z",
        "body": "I see what you mean. I was under the impression that the `Alloc` was allocating unmanaged memory for each object. Thanks for the clarification."
      }
    ]
  },
  {
    "number": 12370,
    "title": "Question about forwarded type loading.",
    "created_at": "2019-03-29T03:02:53Z",
    "closed_at": "2020-01-31T06:36:04Z",
    "labels": [
      "question",
      "area-TypeSystem-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/12370",
    "body": "I am investigating coreclr to reduce launching time in Tizen.\r\nI found that forwarded types are loaded in below codes of DoFullyLoad (src/vm/methodtable.cpp)\r\n```\r\n            else if (pMD->IsZapped() && pMD->HasForwardedValuetypeParameter())\r\n            {     \r\n                pMD->WalkValueTypeParameters(this, LoadTypeDefOrRefAssembly, NULL);\r\n                locals.fDependsOnEquivalentOrForwardedStructs = TRUE; \r\n            } \r\n```\r\nIt takes time over 5% during xamarin application launching.\r\nIn comments for the codes, it explains that \"Fully load exact parameter types for value type parameters opted into equivalence.\".\r\nAs I understand, it loads the exact parameter type for equivalent type before entering prestub because of GC in prestub.\r\nHowever, it checks \"type forwarded parameter\" not \"type equivalence type\" in the codes. (In my environment, FEATURE_TYPEEQUIVALENCE is disabled.)\r\n\r\nI think forwarded parameters are guaranteed to have loaded in caller before entering prestub, aren't they? If then, is it possible to skip that codes?\r\nThank you in advance for your help.\r\nDongHeon.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/12370/comments",
    "author": "clamp03",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2019-03-29T05:49:02Z",
        "body": "> I think forwarded parameters are guaranteed to have loaded in caller before entering prestub, aren't they?\r\n\r\nThey are not guaranteed to be loaded. Otherwise, this code would not exist."
      },
      {
        "user": "clamp03",
        "created_at": "2019-03-29T06:38:59Z",
        "body": "@jkotas Thank you for your comment. But, I am still confusing. \r\ndotnet/coreclr#1. Comments in DoFullyLoad method explains problems in case of type equivalence. I cannot understand why the codes should be executed even if FEATURE_TYPEEQUIVALENCE is disabled.\r\ndotnet/coreclr#2. To call a method which only depends forwarded type, I think caller should know types of callee's parameters to make the parameter value like ordinary parameter. Could you please give an example (which shows forwarded parameters are not loaded in caller before entering Prestub)? It is really helpful to me.\r\nThank you for your consideration."
      },
      {
        "user": "clamp03",
        "created_at": "2019-03-29T06:41:33Z",
        "body": "This is explanation comment in DoFullyLoad\r\n```\r\n    // Fully load exact parameter types for value type parameters opted into equivalence. This is required in case GC is\r\n    // triggered during prestub. GC needs to know where references are on the stack and if the parameter (as read from\r\n    // the method signature) is a structure, it relies on the loaded type to get the layout information from. For ordinary\r\n    // structures we are guaranteed to have loaded the type before entering prestub - the caller must have loaded it.\r\n    // However due to type equivalence, the caller may work with a different type than what's in the method signature.\r\n    //    \r\n    // We deal with situation by eagerly loading types that may cause these problems, i.e. value types in signatures of\r\n    // methods introduced by this type. To avoid the perf hit for scenarios without type equivalence, we only preload\r\n    // structures that marked as type equivalent. In the no-PIA world\r\n    // these structures are called \"local types\" and are usually generated automatically by the compiler. Note that there\r\n    // is a related logic in code:CompareTypeDefsForEquivalence that declares two tokens corresponding to structures as\r\n    // equivalent based on an extensive set of equivalency checks..\r\n    //    \r\n    // To address this situation for NGENed types and methods, we prevent pre-restoring them - see code:ComputeNeedsRestoreWorker\r\n    // for details. That forces them to go through the final stages of loading at run-time and hit the same code below.\r\n```"
      },
      {
        "user": "jkotas",
        "created_at": "2019-03-29T20:30:32Z",
        "body": "> Could you please give an example (which shows forwarded parameters are not loaded in caller before entering Prestub)?\r\n\r\nThe examples for these cases are usually very complex. These problems manifest as intermittent crashes during GC.\r\n\r\nThe fundamental problem is the same for both forwarded parameters and equivalent types. For both these cases, the typeloading can go through multiple hops and the fragile NGen design requires all hops to be pre-initialized in case the GC is triggered during PreStub.\r\n\r\nAs you may know, we are not happy with the fragile NGen designs for multiple reason. The current CoreCLR master is not using fragile NGen by default anywhere, and we will be disabling it in the build at some point. (We will still leave the code around since we know you are using it.)\r\n\r\ncc @alpencolt @davidwrighton "
      },
      {
        "user": "clamp03",
        "created_at": "2019-04-01T06:19:04Z",
        "body": "I know fragile NGen will be deprecated and R2R is recommended than fragil NGen.\r\nHowever, some our products still use fragile NGen and require better launching time.\r\nThank you for your understanding."
      }
    ]
  },
  {
    "number": 28879,
    "title": "Using async inside Paralle.ForEeach",
    "created_at": "2019-03-05T18:17:19Z",
    "closed_at": "2020-02-01T01:12:05Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28879",
    "body": "Using async inside Parallel.Foreach is not supported.\r\nIf you use it, statements after `await` wont run.\r\n\r\nFirst, how can I know this is the case? For example is there anything specific to look for in the statement of method to know that async is supported or not, or anything in documentation to say that?\r\n\r\nSecond, is it possible to have a warning or something informational from compiler?\r\n\r\nFor example, following code compiles and runs, but wont print.(I know why it wont print, just asking how to avoid these kinds of mistakes....because I recently learned why and really got scared if I did this mistake previously or not!)\r\n\r\n```\r\n            List<char> mylist = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToList();\r\n            Parallel.ForEach(mylist, async item =>\r\n            {\r\n                await Task.Delay(100);\r\n                Console.WriteLine($\"{item}\");\r\n            }\r\n            );\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28879/comments",
    "author": "roozbehid-ic",
    "comments": [
      {
        "user": "tarekgh",
        "created_at": "2019-03-05T23:38:02Z",
        "body": "> If you use it, statements after await wont run.\r\n\r\nI don't think this is true. it will run but you have to give it a time to run as you adding some delay before it. \r\n\r\nJust try something like the following. Note, I added some Sleep at the end to give time to the other for each to completely run.\r\n\r\n```C#\r\n            List<char> mylist = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToList();\r\n            Parallel.ForEach(mylist, async item =>\r\n                {\r\n                    await Task.Delay(100);\r\n                    Console.WriteLine($\"{item}\");\r\n                }\r\n            );\r\n\r\n            Thread.Sleep(mylist.Count * 600);\r\n```\r\n\r\nI am closing this issue but feel free to reply back with any more questions and I'll be happy to help with.\r\n"
      }
    ]
  },
  {
    "number": 3441,
    "title": "Question regarding daily builds",
    "created_at": "2019-02-02T22:28:10Z",
    "closed_at": "2020-01-30T21:19:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3441",
    "body": "When installing daily builds, does VS automatically choose the latest installed build itself (project is set to .NET Core 3.0) when I debug and publish or would I need to uninstall all previous .NET Core versions?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3441/comments",
    "author": "Symbai",
    "comments": [
      {
        "user": "leecow",
        "created_at": "2019-02-06T17:16:27Z",
        "body": ".NET Core 3.0 has not been inserted into VS so I don't believe it will automatically come down with a daily build. @livarcocc for further details. "
      }
    ]
  },
  {
    "number": 28555,
    "title": "Concurrent build.cmd corefx/coreclr random fail",
    "created_at": "2019-01-29T13:02:05Z",
    "closed_at": "2020-02-01T00:44:00Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28555",
    "body": "I'm trying to concurrently build corefx/coreclr repo to save time, but I get strange random errors(maybe due to nuget libs share etc...).\r\nTo be sure is it expected?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28555/comments",
    "author": "MarcoRossignoli",
    "comments": [
      {
        "user": "ViktorHofer",
        "created_at": "2019-01-29T13:27:05Z",
        "body": "I never built concurrently. Can you provide some logs / errors?"
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2019-01-29T13:37:38Z",
        "body": "I'll try to repro"
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2019-01-29T14:25:08Z",
        "body": "@ViktorHofer I restarted my machine and after that I cannot repro the issue(2 corefx and 1 coreclr concurrently). I'll close this and re-open if it'll happen again."
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2019-01-30T15:26:22Z",
        "body": "@ViktorHofer happened again:\r\n```\r\nC:\\git\\corefx (dicbackporting -> origin)\r\nλ build\r\n  Restoring packages for C:\\Users\\Marco\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19074.1\\tools\\Tools.proj...\r\n  Generating MSBuild file C:\\git\\corefx\\artifacts\\toolset\\Common\\Tools.proj.nuget.g.props.\r\n  Generating MSBuild file C:\\git\\corefx\\artifacts\\toolset\\Common\\Tools.proj.nuget.g.targets.\r\n  Restore completed in 1,13 sec for C:\\Users\\Marco\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19074.1\\tools\\Tools.proj.\r\n  You can invoke the tool using the following command: coverlet\r\n  Tool 'coverlet.console' (version '1.4.0') was successfully installed.\r\n  You can invoke the tool using the following command: reportgenerator\r\n  Tool 'dotnet-reportgenerator-globaltool' (version '4.0.5') was successfully installed.\r\nC:\\Users\\Marco\\.nuget\\packages\\microsoft.dotnet.build.tasks.configuration\\1.0.0-beta.19074.1\\build\\Microsoft.DotNet.Build.Tasks.Configuration.targets(4,52): error MSB4022: The result \"\" of evaluating the value \"$(DotNetBuildTasksConfigurationDll)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid. [C:\\git\\corefx\\build.proj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Users\\Marco\\.nuget\\packages\\microsoft.dotnet.build.tasks.configuration\\1.0.0-beta.19074.1\\build\\Microsoft.DotNet.Build.Tasks.Configuration.targets(4,52): error MSB4022: The result \"\" of evaluating the value \"$(DotNetBuildTasksConfigurationDll)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid. [C:\\git\\corefx\\build.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:37.58\r\nBuild failed.\r\n```\r\nI'm building coreclr and 2 corefx repo."
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2019-01-30T15:28:42Z",
        "body": "NB. Not fundamental, no priority, maybe interesting."
      },
      {
        "user": "ViktorHofer",
        "created_at": "2019-02-11T21:43:14Z",
        "body": "cc @ericstj for the `microsoft.dotnet.build.tasks.configuration` error."
      },
      {
        "user": "ericstj",
        "created_at": "2019-02-12T00:15:46Z",
        "body": "This appears to be a project that has imported the targets and not props from MS.DN.B.T.Configuration.\r\n\r\nIs restore happening concurrently?  I could imagine that one build proceeds as if restore has completed but the package extraction was still happening.  We've seen issues with concurrent NuGet restore before that could cause this sort of thing."
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2019-02-12T16:16:28Z",
        "body": "> Is restore happening concurrently?\r\n\r\nI think so"
      },
      {
        "user": "ViktorHofer",
        "created_at": "2019-08-31T08:57:59Z",
        "body": "Closing as this will go away with the repository consolidation. We won't invest in fixing this meanwhile."
      }
    ]
  },
  {
    "number": 28367,
    "title": "Environment.GetEnvironmentVariable behaviour",
    "created_at": "2019-01-10T14:40:39Z",
    "closed_at": "2020-02-01T00:26:37Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28367",
    "body": "What is the expected behaviour for retrieving environment variables?\r\n\r\n1. Create a new system environment variable\r\n1. Using a simple dotnet core console app, attempt to retrieve the variable (with `System.Environment.GetEnvironmentVariable`)\r\n\r\n*What I expect to happen*\r\n`GetEnvironmentVariable` returns the current value of that variable\r\n\r\n*Whats actually happening*\r\nThe variable is not found until I restart my system.\r\n\r\nOther programming languages do appear to be able to retrieve the environment variable (A python script, for example), but im prepared to concede that may be after a restart. \r\n\r\nAfter restarting I can read the value of the variable, however if i change this variable, the change is not reflected in the dotnet core application. The python script retrieves the expected value.\r\n\r\nWhat are the rules surrounding the 'caching' behaviour im seeing with my environment variables?\r\n\r\n*System Details*\r\nWindows 10 Pro (1803)\r\nMicrosoft.NETCore.App 2.2.0\r\n\r\n*Example Programs*\r\n\r\n```c#\r\nusing System;\r\n\r\nnamespace Scratch\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var env = Environment.GetEnvironmentVariable(\"TEST_VARIABLE\");\r\n            Console.WriteLine(env ?? \"No Value\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```python\r\nimport os\r\nos.environ['TEST_VARIABLE']\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28367/comments",
    "author": "ri-ch",
    "comments": [
      {
        "user": "Wraith2",
        "created_at": "2019-01-10T15:25:23Z",
        "body": "Enviroment blocks are inherited from the parent process so if you haven't restarted VS it'll still have the block you started it with which will not include the new variable. If you start a command prompt and use the set command after changing the variable (without logging out or restarting) does it pick up the new variable/value? If so restarting vs should work."
      },
      {
        "user": "Anipik",
        "created_at": "2019-02-22T18:25:31Z",
        "body": "@rich-zilla do you have any other questions ?"
      },
      {
        "user": "danmoseley",
        "created_at": "2019-02-22T18:33:56Z",
        "body": "Processes snapshot the environment variables when they start. Therefore when setting an environment variable with EnvironmentVariableTarget.Machine or EnvironmentVariableTarget.User, other processes do not immediately see the changes. All we can do is send a WM_SETTINGCHANGE message as HWND_BROADCAST. Some more sophisticated apps may recognize this and choose to re-read the environment variables, but I do not know which (if any - including VS) do. \r\n\r\nAs @Wraith2 says the only way to get a process to see the change for sure is to restart it, as you found out. It is how the OS works. I would be interested if someone can confirm whether Linux works this way."
      }
    ]
  },
  {
    "number": 11752,
    "title": "ConstantSplittableMap.cs refactor code",
    "created_at": "2019-01-05T10:17:20Z",
    "closed_at": "2020-09-23T13:41:16Z",
    "labels": [
      "question",
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11752",
    "body": "Hi, this method is contains ConstantSplittableMap.cs\r\n\r\n        public void Split(out IMapView<TKey, TValue> firstPartition, out IMapView<TKey, TValue> secondPartition)\r\n        {\r\n            if (Count < 2)\r\n            {\r\n                firstPartition = null;\r\n                secondPartition = null;\r\n                return;\r\n            }\r\n\r\n            int pivot = (int)(((long)firstItemIndex + (long)lastItemIndex) / (long)2);\r\n\r\n            firstPartition = new ConstantSplittableMap<TKey, TValue>(items, firstItemIndex, pivot);\r\n            secondPartition = new ConstantSplittableMap<TKey, TValue>(items, pivot + 1, lastItemIndex);\r\n        }\r\n\r\nPlease delete not needed cast int type to (long) into\r\n\r\n            int pivot = (int)(((long)firstItemIndex + (long)lastItemIndex) / (long)2);\r\n\r\nRewrite to..\r\n\r\n            int pivot = (firstItemIndex + lastItemIndex) / 2;\r\n\r\nfirstItemIndex, lastItemIndex and 2 it's integer(Int32) value not need cast int to long (redundantly)\r\nI'm testing this method to my project it's working\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11752/comments",
    "author": "Sin333",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2019-01-05T10:32:05Z",
        "body": "That code is likely written like that to avoid integer overflow. If you really have a need to improve that code (using x86?) the better option would probably be\r\n```C#\r\nint pivot = firstItemIndex + ((lastItemIndex - firstItemIndex) >> 1);\r\n```\r\nAssuming that `firstItemIndex` and `lastItemIndex` are positive, otherwise you have another potential integer overflow in subtraction..."
      },
      {
        "user": "Sin333",
        "created_at": "2019-01-05T10:47:12Z",
        "body": "@mikedn Soo, then you can do it\r\n\r\nint pivot = (int)((long)(firstItemIndex + lastItemIndex) / 2);\r\n\r\nIn any of the possible cases 2 should not be converted into (long)"
      },
      {
        "user": "mikedn",
        "created_at": "2019-01-05T10:50:59Z",
        "body": "> (long)(firstItemIndex + lastItemIndex\r\n\r\nThat's still an `int` addition that could overflow."
      },
      {
        "user": "john-h-k",
        "created_at": "2019-01-06T21:28:22Z",
        "body": "Can't the overflow be avoided completely with this?\r\n\r\n`int pivot  = (firstItemIndex ^ lastItemIndex) / 2 + (firstItemIndex & lastItemIndex) ;`. That's the average, and there can't be an overflow\r\nAnd if the extra ops aren't worth it, isn't it clearer to do;\r\n`int pivot = (int)(((long)firstItemIndex + lastItemIndex) / 2);` and allow promotion to naturally cast the others rather than the ugly repetitive triple cast used above?"
      }
    ]
  },
  {
    "number": 28276,
    "title": "Microsoft.VisualBasic.Asc/Chr use the Default Encoding, witch is different between .Net Core 3.0 Preview 1 and .Net Framework",
    "created_at": "2018-12-27T11:36:03Z",
    "closed_at": "2020-02-01T00:18:26Z",
    "labels": [
      "question",
      "area-Microsoft.VisualBasic",
      "tenet-compatibility"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28276",
    "body": " Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\nHi,\r\nI noticed that the Microsoft.VisualBasic.Asc and Microsoft.VisualBasic.Chr are relaying on System.Text.Encoding.Default, but since this Returns Different Results in the .Net Framework(CodePage: 1252 on my System) and in .Net Core(CodePage: 65001 on my System), are these not directly compatible.\r\nEven if I add a NuGet Reference to 'System.Text.Encoding.CodePages' and Call 'Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)' there are still differences.\r\nFor Excample: \r\nConsole.Writeline(Asc(Chrw(172)))\r\nReturns on Net Core: -15700\r\nReturns on Net Framework: 172\r\n\r\nThis may/does lead to unexpected results when a Application that relays on Asc/Chr gets converted from .Net Framework to .Net Core 3.0",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28276/comments",
    "author": "Lohnegrim",
    "comments": [
      {
        "user": "cston",
        "created_at": "2019-02-25T20:14:56Z",
        "body": "@Lohnegrim, should your example be `Asc(Chr(172))` instead (using `Chr()` rather than `ChrW()`)?\r\n\r\nIt looks like `Asc()` relies on `System.Text.Encoding.Default.CodePage` (which is different between .NET Core and .NET Framework, as you mentioned) while `Chr()` relies on `System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ANSICodePage`."
      },
      {
        "user": "cston",
        "created_at": "2019-07-02T04:15:05Z",
        "body": "@Lohnegrim, thanks for reporting this issue."
      }
    ]
  },
  {
    "number": 28099,
    "title": "name collision with type Index added to System namespace",
    "created_at": "2018-12-06T22:55:39Z",
    "closed_at": "2020-02-01T00:02:19Z",
    "labels": [
      "question",
      "design-discussion",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28099",
    "body": "tag:discussion\r\n\r\nWe have this very old class that's used all over the place called Index, which is basically a Dictionary that accepts more than one item per key. It's used like a mutable IGrouping and was recently retrofitted to implement IGrouping. It's use is so pervasive that it grew another implementation called SortedIndex which is to Index as SortedDictionary is to Dictionary.\r\n\r\nSo now we've got literally thousands of files importing System and expecting Index to be ours (in a far namespace), and on upgrading to .NET Core 3 we get a completely ridiculous number of errors.\r\n\r\nSo now we've got to figure out how to handle this name collision. Trying to rename Index is going to break back-compatibility of our nuget packages all over the place.\r\n\r\n(Yes, some parts of our .NET Core codebase are literally 11 years old and I've got the source control trees to prove 9 of them and would have more but for a disk crash.)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28099/comments",
    "author": "jhudsoncedaron",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-12-06T23:35:28Z",
        "body": "cc: @terrajobst, @tarekgh"
      },
      {
        "user": "tarekgh",
        "created_at": "2018-12-06T23:42:34Z",
        "body": "@terrajobst is it possible our Index can be moved to a different namespace? "
      },
      {
        "user": "terrajobst",
        "created_at": "2018-12-07T00:24:30Z",
        "body": "We could consider moving it but I don't think this will solve the OPs problem because it likely will be another core namespace that's imported by default. The only option I see is us renaming the type, but I think that would be substantially worse for everyone else.\r\n\r\nHistorically, us trying to avoid naming collisions with consuming code is basically an exercise in futility unless we put new types in esoteric namespaces or choose multi-word names that are unlikely to collide, so for new core features (such as `Task`, `Tuple`, `Range`, `Span`) this simply isn't actionable for us."
      },
      {
        "user": "jhudsoncedaron",
        "created_at": "2018-12-07T00:35:11Z",
        "body": "In this case it has its own syntax, so System.Runtime.CompilerServices could be used.\r\n\r\nBut I said discussion for a reason. Perhaps there's a good way to prioritize imports that can be mechanically applied at the file level."
      },
      {
        "user": "terrajobst",
        "created_at": "2018-12-08T06:36:38Z",
        "body": "> In this case it has its own syntax, so System.Runtime.CompilerServices could be used.\r\n\r\n`System.Runtime.CompilerServices` is meant for types that you basically never have to use yourself. While `Range` and `Index` have language syntax, you still need to use the type name for parameters and return declarations of methods -- they are not like tuples where the language offered syntax for the *type*. For `Range` and `Index` the language only provides syntax for *values*. That's why these types belong to the `System` namespace IMHO.\r\n\r\n> Perhaps there's a good way to prioritize imports that can be mechanically applied at the file level.\r\n\r\nCan you explain what you mean by that?"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-12-10T04:13:41Z",
        "body": "Can you either\r\n1. search and replace (or use Roslyn analyzer) to fully qualify use of your `Index` or\r\n2. insert statement like `using Index = MyNamespace.Index;` at the top of all your files?"
      },
      {
        "user": "jhudsoncedaron",
        "created_at": "2018-12-10T16:17:49Z",
        "body": "Number 2 is probably going to work."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-12-11T05:26:34Z",
        "body": "Can we close then?"
      },
      {
        "user": "jhudsoncedaron",
        "created_at": "2018-12-11T23:27:24Z",
        "body": "@danmosemsft : It looks like we're going to try on the whole codebase tomorrow and see what happens."
      },
      {
        "user": "terrajobst",
        "created_at": "2018-12-13T19:37:13Z",
        "body": "Can we close this now?"
      }
    ]
  },
  {
    "number": 11566,
    "title": "Achieve AppDomain.CreateInstanceAndUnwrap with AssemblyLoadContext",
    "created_at": "2018-11-28T14:51:00Z",
    "closed_at": "2020-01-31T05:38:38Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11566",
    "body": "Is following a valid porting from .NET to .NET Core regarding use of AppDomain?\r\n\r\n`AppDomain` in .NET\r\n```\r\npublic static TypeABC CreateInstanceInDomain(AppDomain appDomain)\r\n{\r\n     return (TypeABC)appDomain.CreateInstanceAndUnwrap(typeof(TypeABC).Assembly.FullName, typeof(TypeABC).FullName);\r\n}\r\n```\r\n`AssemblyLoadContext` in .NET Core\r\n```\r\npublic static TypeABC CreateInstanceInDomain()\r\n{\r\n     // AssemblyLoadContext loads assembly into a load context different from that of the currently executing assembly\r\n     Assembly loadContextAssembly = AssemblyLoadContext.Default.LoadFromAssemblyName(typeof(TypeABC).Assembly.GetName());\r\n     return (TypeABC)loadContextAssembly.CreateInstance(typeof(TypeABC).FullName);\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11566/comments",
    "author": "ritchxu",
    "comments": [
      {
        "user": "vitek-karas",
        "created_at": "2018-11-28T16:17:31Z",
        "body": "That depends on what the code is trying to achieve. But in general I would say that as presented the code doesn't do what it should.\r\n\r\n`AssemblyLoadContext.Default` is the default load context - similar to the default AppDomain in .NET Framework. It's the load context into which the app's main assembly is loaded.\r\n\r\nIf your application is using AppDomains to provide binding isolation (so that it can for example load multiple versions of the same assembly, or to isolate a \"plugin\" from the app) then it would need to create a custom instance of `AssemblyLoadContext` and load into it. Then it will get the desired isolation. Calling `AssemblyLoadContext.Default.LoadFromAssemblyName` will always load the assembly into the default context.\r\n\r\nOne other thing to be aware of: If your .NET Framework application relies on the runtime to find the assembly file on the disk (based on its name), then .NET Core will likely not do that for you. The Default load context has a list of all the assemblies which the app was compiled with (static references introduced during build). Those assemblies will almost always load into the default context. So if you need to load some additional assembly which was not part of the app during build, the code will need to find the file itself first.\r\n\r\nSo you may want to call `LoadFromAssemblyPath` instead. But then again, this depends on what the code is trying to achieve.\r\n\r\nIf you can describe the scenario in a bit more detail, I'll be happy to provide more detail as to how the implementation should work."
      },
      {
        "user": "ritchxu",
        "created_at": "2018-11-28T19:01:57Z",
        "body": "The code is trying to isolate a plugin from the app as the caller portion shown below:\r\n```\r\nAppDomain appDomain = null;\r\ntry\r\n{\r\n    var setup = new AppDomainSetup { ApplicationBase = assemblyPath, PrivateBinPath = Path.Combine(assemblyPath, \"plugins\") };\r\n    appDomain = AppDomain.CreateDomain(nameof(TypeABC), null, setup);\r\n    var perfCounterInstaller = TypeABC.CreateInstanceInDomain(appDomain);\r\n    // do something else...\r\n}\r\nfinally\r\n{\r\n    if (appDomain != null)\r\n    {\r\n        AppDomain.Unload(appDomain);\r\n    }\r\n}\r\n```\r\nBased on your suggestion, I believe I ought to create my own load context:\r\n```\r\nclass MyLoadContext : AssemblyLoadContext\r\n{\r\n    protected override Assembly Load(AssemblyName assemblyName)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n```\r\nand replace `AssemblyLoadContext.Default.LoadFromAssemblyName` with `new MyLoadContext().LoadFromAssemblyPath`\r\n\r\nIf I'm on the right path, that brings me a question on what I should really do when overriding the `Load` method?"
      },
      {
        "user": "vitek-karas",
        "created_at": "2018-11-28T21:33:39Z",
        "body": "I think the custom load context should look something like this:\r\n``` C#\r\nclass MyLoadContext : AssemblyLoadContext\r\n{\r\n    public MyLoadContext(string basePath)\r\n    {\r\n        this.Resolving += (context, assemblyName) => \r\n        {\r\n            string path = Path.Combine(basePath, assemblyName.Name + \".dll\");\r\n            if (File.Exists(path))\r\n            {\r\n                return context.LoadFromAssemblyPath(path);\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n\r\n    protected override Assembly Load(AssemblyName assemblyName) => null;\r\n}\r\n```\r\n\r\nOnce you have this, you can use it like this:\r\n``` C#\r\nMyLoadContext pluginContext = new MyLoadContext(Path.Combine(assemblyPath, \"plugins\"));\r\nAssembly pluginAssembly = pluginContext.LoadFromAssemblyName(new AssemblyName(\"PluginAssembly\"));\r\nIPluginInterface plugin = pluginAssembly.CreateInstance(\"PluginType\");\r\n```\r\n\r\nFrom your code above it's unclear what types the code is using to \"talk\" to the plugin. In .NET Framework the `CreateInstanceAndUnwrap` did some magic to hide this from the user. In .NET Core, there's no such magic, so the code has to be specific. In my sample above the idea is that `IPluginInterface` is the interface through which the app talks to the plugins. For things to work correctly, the `IPluginInterface` needs to be in a separate assembly, which is part of the app. The plugin assembly then references this interface assembly and implements the interface.\r\n\r\nAs shown this would provide isolation for cases were the isolation is absolutely necessary (plugin using higher version of a given assembly than the app), but otherwise it would try to unify on the assemblies from the app first. If you're looking for more strict isolation, then you would basically do the same but instead of implementing the `Resolving` event handler, you would do so in the `Load` method."
      },
      {
        "user": "ritchxu",
        "created_at": "2018-11-29T17:01:43Z",
        "body": "Thanks for the details explanation. I made a mistake in stating we use `AssemblyLoadContext` to directly isolate plugins. Instead, we intend to isolate the instance that actually loads the plugins later:\r\n```\r\nusing System.Runtime.Loader;\r\n\r\ninternal class BaseLoadContext : AssemblyLoadContext\r\n{\r\n    // follow your sample so omitted here\r\n}\r\n\r\npublic static Foo CreateInstanceInLoadContext()\r\n{\r\n    BaseLoadContext loadContext = new BaseLoadContext(typeof(Foo).Assembly.Location);\r\n    Assembly assembly = loadContext.LoadFromAssemblyName(typeof(Foo).Assembly.GetName());\r\n    return (Foo)assembly.CreateInstance(typeof(Foo).FullName);\r\n}\r\n\r\nFoo.ExtractManifestFiles()\r\n{\r\n    //...\r\n    Assembly assembly = Assembly.ReflectionOnlyLoadFrom(pluginPath);\r\n    //...\r\n}\r\n```\r\nWe expect as long as we invoke `ExtractManifestFiles` on the instance created with `CreateInstanceInLoadContext`, plugins would be in the same load context as `Foo`, hence isolated from the main context. Is this assumption correct? As a silly side question if you could suggest what I did wrong, when I attempt to run this code, I keep running into the following error:\r\n\r\n> Could not load file or assembly 'System.Runtime.Loader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)"
      },
      {
        "user": "vitek-karas",
        "created_at": "2018-11-30T23:33:19Z",
        "body": "`ReflectionOnlyLoadFrom` is not supported in .NET Core. The API exists, but it will always throw.\r\nWe're currently working on a \"replacement\" dotnet/corefx#2800.\r\n\r\nYou can load the assemblies for real (`Assembly.Load` or similar) and only use it for reflection - not ideal but should work just fine.\r\n\r\nThe loading is a bit complicated. If the calling assembly is in some custom context (call it PluginContext) then:\r\n- if the new assembly is directly referenced (as in compile time reference), it will be loaded into the same context (so PluginContext)\r\n- if you use `Assembly.Load` it will try to load to the caller context - but this is load by name (not path), so the PluginContext would need to be able to resolve the assembly in its event handler.\r\n- if you use `Assembly.LoadFrom` it always loads into the Default context - so don't use this here\r\n- similarly `Assembly.LoadFile` will load into yet another context - don't use that\r\n\r\nIf you want to be explicit, the best way is to call `PluginContext.LoadAssemblyFromPath` - that will for sure load the assembly into the desired context.\r\nIf you have an assembly object, you can ask which load context it belongs to by calling `AssemblyLoadContext.GetLoadContext`.\r\n\r\nFinally to your error - do you by any change try to run this on .NET Framework (The desktop framework)? `AssemblyLoadContext` doesn't exist there.\r\n"
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2019-04-30T20:23:23Z",
        "body": "Closing this question for now, but please feel free to let us know if you have any other questions."
      }
    ]
  },
  {
    "number": 28011,
    "title": "EmailAddressAttribute is sealed class",
    "created_at": "2018-11-28T06:19:30Z",
    "closed_at": "2020-01-31T23:55:11Z",
    "labels": [
      "question",
      "area-System.ComponentModel.DataAnnotations"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28011",
    "body": "EmailAddressAttribute is sealed class but others such as StringLengthAttribute, RequiredAttribute are not.\r\nWhy?\r\n\r\nI want to use a new class which inherit EmailAddressAttribute to set the ErrorMessage globally.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28011/comments",
    "author": "cycbluesky",
    "comments": [
      {
        "user": "ajcvickers",
        "created_at": "2019-02-22T23:10:17Z",
        "body": "@cycbluesky Because guidance is to seal all attributes, since this can greatly improve perf when looking for them. However, some of the \"newer\" annotations were not sealed because the advantage of being able to derive from them was considered to be more valuable. That being said, we do not plan to go back and change any attributes to unseal them since they were original designed with this perf in mind and we don't want to change that."
      },
      {
        "user": "cycbluesky",
        "created_at": "2019-05-24T03:13:56Z",
        "body": "@karelz , I found you added this to the 3.0 milestone? Does that means you'll unseal all validation attribute class?  I've met another problem of EmailAddressAttribute. It will treat the empty string as invalid email address even the model field is not required. I could have solved the problem by inherit EmailAddressAttribute but unfortunately it's a sealed class."
      },
      {
        "user": "karelz",
        "created_at": "2019-05-24T05:00:35Z",
        "body": "Milestone set = when was it closed. Does not say it was fixes. For resolution type, please read comments above."
      },
      {
        "user": "andre-ss6",
        "created_at": "2019-05-24T17:16:19Z",
        "body": "@ajcvickers How big is the performance impact? Do you have any data on how much is that difference, especially taking into consideration how frequently are the sealed and unsealed attributes used?"
      },
      {
        "user": "ajcvickers",
        "created_at": "2019-05-24T17:22:11Z",
        "body": "@andre-ss6 No, I don't have specific numbers. If you do some tests and show that the performance difference is negligible, then that would be something we could consider. However, this will be an up-hill battle. The accepted wisdom for attributes is that they should be sealed, so changing that will require strong evidence that this wisdom is wrong."
      }
    ]
  },
  {
    "number": 11550,
    "title": "Building nmake",
    "created_at": "2018-11-26T22:53:12Z",
    "closed_at": "2020-01-31T05:37:22Z",
    "labels": [
      "question",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11550",
    "body": "I brought nmake from the original shared source runtime standard to my fork. There are three headers that are giving me trouble \"rotor_pal.h\" \"pal_error.h\" \" and \"pal_mstypes.h\" what replaced these includes?\r\n\r\nThanks,\r\n\r\nJonathan",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11550/comments",
    "author": "jonathanlyonmoore",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-11-26T23:15:57Z",
        "body": "`rotor_pal.h` got renamed to just `pal.h` in CoreCLR. The other headers you have mentioned are still there.\r\n\r\nNote that there is 10+ years worth of changes between the Rotor and current CoreCLR. It is unlikely that the nmake is going to \"just work\"."
      },
      {
        "user": "jonathanlyonmoore",
        "created_at": "2018-11-27T12:06:33Z",
        "body": "```\r\n1>c:\\users\\jonathan_moore\\my_github\\not_far_from_orion\\coreclr\\src\\nmake\\rotor_pal.h(1963): error C2143: syntax error: missing ',' before '*'\r\n1>c:\\users\\jonathan_moore\\my_github\\not_far_from_orion\\coreclr\\src\\nmake\\rotor_pal.h(2589): error C3646: 'ContextRecord': unknown override specifier\r\n1>c:\\users\\jonathan_moore\\my_github\\not_far_from_orion\\coreclr\\src\\nmake\\rotor_pal.h(2589): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int\r\n1>c:\\users\\jonathan_moore\\my_github\\not_far_from_orion\\coreclr\\src\\nmake\\rotor_pal.h(4293): fatal error C1189: #error:   PAL_TRY_LOCAL_SIZE is not defined for this architecture\r\n```\r\nReally the only error I'm getting"
      },
      {
        "user": "jonathanlyonmoore",
        "created_at": "2018-11-27T12:36:38Z",
        "body": "```\r\nexpandFileNames(\"$\", &NewList, &macros);\r\nexpandFileNames(\"*?\", &NewList, NULL);\r\n```\r\nplease read the build log and look in action .cpp it maybe a ```const char*``` error. And the error looks redundant.  We may have to change the type. \r\n"
      },
      {
        "user": "jonathanlyonmoore",
        "created_at": "2018-11-27T12:56:23Z",
        "body": "please see new issue ignore my last comments."
      }
    ]
  },
  {
    "number": 27948,
    "title": "Does FileInfo.Length always return the actual filelength of a file",
    "created_at": "2018-11-18T22:49:07Z",
    "closed_at": "2020-01-31T23:49:03Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27948",
    "body": "I have a library targetting netcoreapp1.1. I have this code snippet:\r\n\r\n```c#\r\nDirectoryInfo dir = new DirectoryInfo(SourcePath);\r\nIEnumerable<FileInfo> enumFiles = dir.EnumerateFiles();\r\nforeach (var file in enumFiles)\r\n{\r\n    Use file.length\r\n}\r\n```\r\n\r\nIs it possible for the file.length to be returned 0 for files with sizes ranging from 4MB to 70MB?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27948/comments",
    "author": "rahuldutta90",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-11-19T02:49:31Z",
        "body": "Hello @rahuldutta90 it should be accurate. In what circumstances are you seeing it return nonzero for a file with nonzero size?"
      },
      {
        "user": "rahuldutta90",
        "created_at": "2018-11-19T17:30:06Z",
        "body": "@danmosemsft I will get back to you regarding this. I have asked the customer to get back with logs to confirm this."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-11-19T17:55:18Z",
        "body": "OK thanks bear in mind we would need to know (1) what version of .NET Core they are running on (2) what OS/distro (3) other info necessary to repro."
      },
      {
        "user": "rahuldutta90",
        "created_at": "2018-11-22T04:45:54Z",
        "body": "@danmosemsft  I was wrong. The issue was different. I will close the issue. Thank you."
      }
    ]
  },
  {
    "number": 11502,
    "title": "Can we rename c# fields recognized by the runtime if we update the c++ code as well?",
    "created_at": "2018-11-18T15:13:54Z",
    "closed_at": "2020-01-31T05:34:17Z",
    "labels": [
      "question",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11502",
    "body": "Hi,\r\n\r\nConsider the following class in `__ComObject.cs`:\r\n```cs\r\n    internal class __ComObject : MarshalByRefObject\r\n    {\r\n        private Hashtable m_ObjectToDataMap; // Do not rename (runtime relies on this name).\r\n    }\r\n```\r\n\r\nAnd the matching definition in `mscorlib.h`:\r\n```\r\nDEFINE_FIELD_U(m_ObjectToDataMap,      ComObject,              m_ObjectToDataMap)\r\n```\r\n\r\nCan we rename `m_ObjectToDataMap` to, for example, `_objectToDataMap` in both places without breaking anything? I understand that this would break situations where the runtime and corelib were compiled with different versions, but is this something we expect to happen or that we even support?\r\n\r\nPlease could you clarify this and it would be nice to document this if possible",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11502/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-11-18T17:47:25Z",
        "body": "Yes, it is fine to rename these if you do it in both places.\r\n\r\nNote that some of these cannot be renamed because of binary serialization, debugger/diagnostic tools depending on the field name, etc."
      }
    ]
  },
  {
    "number": 27926,
    "title": "Equality of ImmutableArray<T>?",
    "created_at": "2018-11-15T19:29:47Z",
    "closed_at": "2020-01-31T23:46:56Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27926",
    "body": "When I compare default `ImmutableArray<int>?` with null I get true:\r\n\r\n```C#\r\nImmutableArray<int>? a = ImmutableArray<int>.Empty;\r\nImmutableArray<int>? b = null;\r\n\r\na == b // this is true even though they are not equal\r\n```\r\n\r\nIt does not work this way for any other type I'm aware of, so I guess this is a bug/glitch. Or is there some purpose?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27926/comments",
    "author": "exyi",
    "comments": [
      {
        "user": "AlgorithmsAreCool",
        "created_at": "2018-11-15T19:50:41Z",
        "body": "What versions are you running?\r\n\r\nI get false from this program on .Net Core 2.1\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Immutable;\r\n\r\nnamespace Immute\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            ImmutableArray<int>? a = ImmutableArray<int>.Empty;\r\n            ImmutableArray<int>? b = null;\r\n\r\n            Console.WriteLine($\"{a == b}\");\r\n        }\r\n    }\r\n}\r\n``` "
      },
      {
        "user": "exyi",
        "created_at": "2018-11-16T09:25:41Z",
        "body": "Whoops, I'm sorry, I had some strange bug in my code and due to my mistake I was able to show this behavior.\r\n\r\nFor some reason, I did not have `ImmutableArray<int>.Empty` but `default(ImmutableArray<int>)` and that was equal to `null` which also seems strange to me.\r\n\r\n```C#\r\nImmutableArray<int>? a = default(ImmutableArray<int>);\r\nImmutableArray<int>? b = null;\r\nAssert.False(a == b); // intuitively, I'd like this to be false, but it's true\r\n```\r\n\r\nAnyway, although this is strange, I guess I simply should not use uninitialized structs :) Sorry for wasting your time and thanks for fast response."
      }
    ]
  },
  {
    "number": 27868,
    "title": "Weird issue with Directory Path",
    "created_at": "2018-11-09T16:10:54Z",
    "closed_at": "2020-01-31T23:41:28Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27868",
    "body": "```c#\r\nvar path = \"Some_Directory/Some_Other_Directory/Directory_I_Want_To_Delete\";\r\nnew FileInfo(path).Directory.Delete(true);\r\n```\r\nThis will actually delete this path Some_Directory/Some_Other_Directory recursively, ignoring Directory_I_Want_To_Delete.\r\n\r\nWhereas if I use this \r\n```c#\r\nvar path = \"Some_Directory/Some_Other_Directory/Directory_I_Want_To_Delete/\";\r\nnew FileInfo(path).Directory.Delete(true);\r\n```\r\nIt works well as expected. \r\n\r\nFirst I thought this was a bug, then following the code, I noticed that the length is being calculated based on separator char. The question is, why is this being done like this, why isn't the path taken as is even if there is no \"/\" at the end. ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27868/comments",
    "author": "codebird",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-11-12T18:24:23Z",
        "body": "cc @JeremyKuhne "
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2018-11-12T21:00:52Z",
        "body": "`FileInfo.Directory` has always been `Path.GetDirectoryName` which is a simple \"trim final separator and chars\". Changing that behavior would cause a lot of fallout even if we could make it consistent. When you use `FileInfo` we could, in theory, check to see if the target is a directory, but making that determination isn't always possible (path doesn't exist, lack of rights, etc.).\r\n\r\nThe right answer here is to use `DirectoryInfo` when you know that the path is intended to represent a directory. Then you can get `Parent` and `Delete` should always work as you expect."
      }
    ]
  },
  {
    "number": 27797,
    "title": "ConcurrentDictionary initialized with an existing ConcurrentDictionary will act as pointer instead of new object",
    "created_at": "2018-11-01T21:38:10Z",
    "closed_at": "2020-01-31T23:35:51Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27797",
    "body": "When initializing a new ConcurrentDictionary starting from an existing ConcurrentDictionary, the new object will act as pointer.\r\n\r\n``` csharp\r\n// Summary:\r\n//     Initializes a new instance of the System.Collections.Concurrent.ConcurrentDictionary`2\r\n//     class that contains elements copied from the specified System.Collections.Generic.IEnumerable`1,\r\n//     has the default concurrency level, has the default initial capacity, and uses\r\n//     the default comparer for the key type.\r\npublic ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection);\r\n```\r\nbased on this description I wrote the following code:\r\n``` csharp\r\npublic static ConcurrentDictionary<int, myCustomClass> startDictionary;\r\n[...]\r\nConcurrentDictionary<int, myCustomClass> tempDictionary =\r\n                new ConcurrentDictionary<int, myCustomClass>(startDictionary);\r\n```\r\nbecause i need to modify some data into ```tempDictionary``` without affecting ```startDictionary```.\r\n\r\nWhat happens is that any edit to ```tempDictionary``` is reflected to ```startDictionary``` too. Am I doing something wrong?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27797/comments",
    "author": "pietrodicaprio",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-11-01T21:45:57Z",
        "body": "Can you share a repro?  I don't see how that's possible.  Adds/removes/etc. to startDictionary should definitely not be visible to tempDictionary.  But if TKey/TValue are classes and you mutate those instances, then yeah, as with any collection, the updates would be visible to both collections, because they're both storing the original object.\r\n\r\nFor example, if you write:\r\n```C#\r\nclass C\r\n{\r\n    public int Value;\r\n}\r\n...\r\nvar c1 = new C() { Value = 42 };\r\nvar c2 = new C() { Value = 42 };\r\n\r\nvar oldList = new List<C>();\r\noldList.Add(c1);\r\n\r\nvar newList = new List<C>(oldList);\r\nnewList.Add(c2);\r\n```\r\noldList will contain only c1 and newList will contain both c1 and c2.  If you then do:\r\n```C#\r\nc1.Value = 84;\r\n```\r\nthen both oldList and newList will still contain c1, which will have a Value of 84."
      },
      {
        "user": "pietrodicaprio",
        "created_at": "2018-11-01T22:13:07Z",
        "body": "Share the repo is difficult because you would need my db and so on to have it running.\r\n\r\ni have\r\n``` csharp\r\nclass myCustomClass\r\n{\r\n    public int Id;\r\n    public int value1;\r\n    public int value2;\r\n}\r\n\r\n[...]\r\npublic static ConcurrentDictionary<int, myCustomClass> startDictionary =\r\n    new ConcurrentDictionary<int, myCustomClass>();\r\n\r\nprivate void myMethod()\r\n{\r\n    var mCC = new myCustomClass(){ Id = 1, value1 = 1, value2 = 3 };\r\n    startDictionary.TryAdd(1, mCC); // startDictionary receives data\r\n}\r\n\r\n[...]\r\nConcurrentDictionary<int, myCustomClass> tempDictionary =\r\n    new ConcurrentDictionary<int, myCustomClass>(startDictionary ); // my temp Dict to be modified\r\nforeach (myCustomClass mcc in tempDictionary.Values) // <-- THIS\r\n{\r\n    mcc.value2 = Id + value1; // Just for example\r\n}\r\n\r\n// tempDictionary[1].value2 is now == 2\r\n// startDictionary[1].value2 is now == 2 <-- NOT GOOD (for me)\r\n\r\nDoThingsWithModified(tempDictionary);\r\n```\r\n\r\nWhat i don't understand is why the foreach ```// <-- THIS``` is affecting ```startDictionary``` too. Is it normal?"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-11-01T23:01:09Z",
        "body": "> Is it normal\r\n\r\nYes. You're not modifying the dictionary. You're modifying an object stored in the dictionary. When you copy the dictionary, you're copying over all of the object references the dictionary contains... if you change that referenced object, that change will be visible everywhere, because it's the same object both dictionaries contain. This is the same as the c1.Value change in my previous response."
      },
      {
        "user": "Clockwork-Muse",
        "created_at": "2018-11-01T23:15:11Z",
        "body": "AKA shallow-copy semantics (when you were expecting some form of deep copy)."
      },
      {
        "user": "pietrodicaprio",
        "created_at": "2018-11-01T23:16:41Z",
        "body": "Uhm, i understand..\r\nCould you kindly suggest a different approach to my needing?\r\n\r\nThe only idea i have is\r\n```csharp\r\nConcurrentDictionary<int, myCustomClass> tempDictionary =\r\n    new ConcurrentDictionary<int, myCustomClass>(); // no reference to startDictionary\r\nforeach (KeyValuePair<int, myCustomClass> kvp in startDictionary)\r\n{\r\n    myCustomClass mcc = new myCustomClass()\r\n        {\r\n            Id = kpv.Value.Id,\r\n            value1 = kvp.Value.value1,\r\n            value2 = kvp.Value.value2\r\n        };\r\n    tempDictionary.TryAdd(kvp.Key, mcc);\r\n}\r\n\r\nforeach (myCustomClass mcc in tempDictionary.Values)\r\n{\r\n    mcc.value2 = Id + value1; // Just for example\r\n}\r\n\r\nDoThingsWithModified(tempDictionary);\r\n```\r\nbut, I'm not sure this would solve my problem..."
      },
      {
        "user": "stephentoub",
        "created_at": "2018-11-02T00:37:50Z",
        "body": "Your approach is fine: you're cloning the object to add to the second dictionary so that it's not the same object as the one stored in the first dictionary."
      }
    ]
  },
  {
    "number": 27786,
    "title": "MEF - Composing a object having constructor with parameter ",
    "created_at": "2018-10-31T08:48:22Z",
    "closed_at": "2020-01-31T23:34:30Z",
    "labels": [
      "question",
      "area-System.ComponentModel"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27786",
    "body": "Using MEF, is it possible to compose an object which itself has parameters in its constructor? \r\n\r\n```c#\r\nexportedDestinationType = Container.GetExports<T>().FirstOrDefault();\r\n```\r\n\r\nThis method does not have any parameter where we can accept any constructor while creating an object.\r\n            \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27786/comments",
    "author": "satyajit-behera",
    "comments": [
      {
        "user": "Joe4evr",
        "created_at": "2018-10-31T16:07:27Z",
        "body": "Are the types of the constructor parameters also registered in the container?"
      },
      {
        "user": "satyajit-behera",
        "created_at": "2018-10-31T16:57:13Z",
        "body": "No. "
      },
      {
        "user": "Joe4evr",
        "created_at": "2018-11-01T03:29:37Z",
        "body": "Then register those types, as that's where the container will look to fill in constructor parameters."
      },
      {
        "user": "maryamariyan",
        "created_at": "2019-03-12T16:54:40Z",
        "body": "@satyajit-behera please reopen if your issue still persists without workaround "
      }
    ]
  },
  {
    "number": 11367,
    "title": "ECMA 335 II.15.2 Static, instance, and virtual methods",
    "created_at": "2018-10-30T22:18:06Z",
    "closed_at": "2020-01-31T05:25:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11367",
    "body": "Hello all\r\n\r\nWe have two notices in this article\r\n\r\n-  Instance methods on classes (including boxed value types), have a this pointer that is\r\nby default an object reference to the class on which the method is defined.\r\n\r\n-  Instance methods on (unboxed) value types, have a this pointer that is by default a\r\nmanaged pointer to an instance of the type on which the method is defined.\r\n\r\nWhat is a difference between a **object reference** and **managed pointer** in this case?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11367/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-10-30T22:27:39Z",
        "body": "The difference between object reference and managed pointer is described in section I.12.1.1.2 Object reference and managed pointer types: O and &\r\n\r\nThe short answer is that object reference points to an object vs. managed pointer points to the interior of an object."
      },
      {
        "user": "ghost",
        "created_at": "2018-10-31T08:06:54Z",
        "body": "@jkotas thank you"
      }
    ]
  },
  {
    "number": 27737,
    "title": "I am wondering if you support .NET Standard 2.0 for System.Data.Common as well as System.Net.Http",
    "created_at": "2018-10-25T12:36:10Z",
    "closed_at": "2020-01-31T23:30:23Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27737",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27737/comments",
    "author": "learnersm",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-10-25T16:29:14Z",
        "body": "@learnersm what do you mean by that?\r\nAFAIK both libraries are PART of .NET Standard 2.0."
      },
      {
        "user": "learnersm",
        "created_at": "2018-10-26T07:39:51Z",
        "body": "Thanks for the confirmation. Apologies for lack of clarity."
      }
    ]
  },
  {
    "number": 27557,
    "title": "Why doesn't System.Security.Claim have a parameterless constructor?",
    "created_at": "2018-10-06T11:59:36Z",
    "closed_at": "2020-01-31T23:16:09Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27557",
    "body": "I'm trying to deserialize `Claim` objects as part of an Aspnet.Identity project, and running into problems with System.Security.Claim as it doesn't have a parameterless constructor.\r\n\r\nI was wondering what the design decision is for the object requiring a type and value? It's a POCO after all isn't it? All logic for it happens in the store responsible for storing and checking it.\r\n\r\n\r\nChris",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27557/comments",
    "author": "yetanotherchris",
    "comments": [
      {
        "user": "yetanotherchris",
        "created_at": "2018-10-08T14:33:51Z",
        "body": "It looks like the class's responsibility is to serialize as well, so I'm assuming `Claim` is not intended to be JSONified (or any other text based serialization). Is this right?"
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2018-10-08T16:04:11Z",
        "body": "/cc @bartonjs @GrabYourPitchforks "
      },
      {
        "user": "bartonjs",
        "created_at": "2018-10-08T16:52:51Z",
        "body": "I presume that it doesn't have a default ctor because none of the properties are assignable (or at least most aren't).  I assume that none of the properties are assignable because readonly objects are easier to work with (they can be used as dictionary keys safely, et cetera).\r\n\r\nMaybe @brentschmaltz would have more insight than that, though.\r\n\r\nThe workaround is probably to make a `SerializableClaim` which is just a property bag that has a method to build a System.Security.Claims.Claim object via the long ctor."
      },
      {
        "user": "brentschmaltz",
        "created_at": "2018-10-08T19:30:33Z",
        "body": "@yetanotherchris @bartonjs \t\r\nIn designing the Claim model in 2006, we assumed a claim needed at least two items: type and value. We landed on value being a 'string' rather than object, to avoid the issue of serialization and the observation most values were string. The property ClaimValueType is a hint for dealing with JSON.\r\n\r\n@bartonjs yes, we didn't want to be checking for null all over the place. \r\n\r\nWe introduce a new serialization model a couple of years ago, although there is a bug we need to fix before we can use the model."
      },
      {
        "user": "yetanotherchris",
        "created_at": "2018-10-08T20:07:31Z",
        "body": "Not having to null check makes perfect sense, and something that should be used more often. The problem is probably at the Microsoft.AspnetIdentity side, as their `IUserClaimStore<T>` has a dependency on the `Claim` object, which makes it very hard to write a custom NoSQL/DocumentDB implementation without writing lots of custom serialization using Jil or another serializer.\r\n\r\nI'll close the issue though and raise it with the identity team, but given the contract is already there for `IUserClaimStore` I can't see it changing."
      }
    ]
  },
  {
    "number": 27545,
    "title": "All File Paths for Windows Input and Output",
    "created_at": "2018-10-05T13:22:46Z",
    "closed_at": "2020-01-31T23:15:24Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27545",
    "body": "I want to use file paths with FileStream to do all input and output on Windows.\r\nAll input and output on Windows include display, sound, keyboard, mouse, storage, network, power, and ports.\r\n\r\nWhat are the file paths?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27545/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-10-05T16:29:37Z",
        "body": "In most cases, Windows does not represent those concepts with file paths, as Unix does. You have to use API's - either Win32 API's, or .NET API's (which are often implemented in terms of Win32)\r\n\r\nIs there API you need from .NET that seems to be missing?"
      }
    ]
  },
  {
    "number": 27432,
    "title": "System.Net.Sockets ,Version=0.0.0.0  in net 4.6.1 environment.",
    "created_at": "2018-09-20T09:24:44Z",
    "closed_at": "2020-01-31T23:06:23Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27432",
    "body": "The application is built for in net 4.6.1 .It uses a nugget package built on the .net standard 2.0 with makes use of MQTTnet nuget package.(Manifest indicates it using the System.net.sockets ,ver 4.3.2)\r\nThe fusion log indicates failure to resolve System.Net.Sockets ,Version=0.0.0.0 .\r\nThe way the system is built , Its not possible to use app.config file.\r\n\r\n1.The consuming application of the nugget package if it set to .net core environment, the issue is not observed.\r\n2. The nugget package source ,instead of a library if it run as a executable set to .net 4.6.1 the problem is not observed.\r\n3.In the systems where Visual Studio development environment and nuget environment is set ,the fusion log does indicate run time loading of the System.Net.Sockets .\r\nIt is observed only in the test systems (windows 2012 R2 s and with Visual Studio run times)\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27432/comments",
    "author": "RaghavKumar",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-09-20T16:47:38Z",
        "body": "@RaghavKumar can you please provide a (minimal) repro? (steps how to run into the problem, ideally creating app from scratch)\r\ncc @joperezr "
      },
      {
        "user": "joperezr",
        "created_at": "2018-09-20T17:15:03Z",
        "body": "if you target .NET 4.6.1 and want to consume .NET Standard 2.0 components, then we require Binding redirects. Our build engine should be injecting some (provided that you selected the auto-generate binding redirects option) in order to make things work. Why isn't app.config file an option? In case you really want to avoid using binding redirects, then you should target .NET 4.7.2 since that won't require any binding redirects and things will just work."
      },
      {
        "user": "RaghavKumar",
        "created_at": "2018-09-21T07:33:58Z",
        "body": "> if you target .NET 4.6.1 and want to consume .NET Standard 2.0 components, then we require Binding redirects. Our build engine should be injecting some (provided that you selected the auto-generate binding redirects option) in order to make things work. Why isn't app.config file an option? In case you really want to avoid using binding redirects, then you should target .NET 4.7.2 since that won't require any binding redirects and things will just work.\r\n\r\nThe System is a combination of the C++ and managed code , and C++ binaries consume  the managed code (targeted to 4.6.1) through CLI channel .(the hierarchy of the code as down below)\r\n\r\nC++\r\n    CLI/CLR libraries\r\n         .NET 461 libraries\r\n             .NET 461 libraries consuming (xylib targeted to .net standard 2.0  and net46 )\r\n                         xylib ( using MQTTnet nuget  .The manifest indicates one of the nuget packages uses the System.Net.Socket  4.3.2 version)\r\n\r\nnot sure if the binding redirection can be done through app.config or another way in this scenario.\r\n"
      },
      {
        "user": "RaghavKumar",
        "created_at": "2018-09-21T07:59:27Z",
        "body": "> @RaghavKumar can you please provide a (minimal) repro? (steps how to run into the problem, ideally creating app from scratch)\r\n> cc @joperezr\r\n\r\nSome of observations to this problem.\r\n\r\n1. This problem has been observed only when the consuming assembly of the initial nuget package (with System.Net.Sockets) is made as a nuget package to be used in another library.\r\n2. Ideally using the .net core application environment ,this problem has not been observed.\r\n    Just for test and observation running the consuming assembly  as a executable(target .net 4.6.1) also works fine.\r\n3. This problem is observed only in clean machines , and never a issue on the development machines.\r\n4. Interestingly the developer machine fusion logs does not show any indication of this System.Net.Sockets \r\n5. On test machines the fusion log shows the following assemblies version to 0.0.0.0\r\n    * System.Core\r\n    * System. Version\r\n    * System.Net.Sockets\r\n    and the following assemblies retarget to 4.0.0.0\r\n    * System.Core\r\n    * System. Version\r\n    System.Net.Sockets  is not retargeted.\r\n\r\n"
      },
      {
        "user": "karelz",
        "created_at": "2018-09-21T17:10:49Z",
        "body": "@RaghavKumar did you close the issue on purpose?\r\n\r\nIf you still seek guidance, then I would recommend (given the complexity of your app) to isolate it into minimal repro (simulate the components you have with HelloWorld-style components, then try to eliminate as many as you can entirely)."
      }
    ]
  },
  {
    "number": 27410,
    "title": "ASP.Net Core 2 Web API method fails calling SOAP Web Service call with SiteMinder agents Enabled",
    "created_at": "2018-09-17T17:52:45Z",
    "closed_at": "2020-01-31T23:04:04Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27410",
    "body": "_From @nilanthasj on September 17, 2018 17:28_\r\n\r\n## General Information\r\nA .NET Core Web API project that consumes a SOAP web service. The methods that consume SOAP  works well in the deployment server, perfect. When the SiteMinder agents (CA SiteMinder Web Agent Module and CA SiteMinder Web Agent Module-32) enabled, SOAP call fails. \r\n\r\nCan somebody help me to identify/fix this issue?\r\n\r\n## Information\r\nSOAP web service call fails in the async call (Please see the code)\r\nMethod\r\n```c#\r\n// Calls SOAP endpoint \r\nTask<POCOClass> pocoOutput = await serviceClient.SAP_DATAService_LISTAsync(request)\r\npocoOutput. Wait()\r\n```\r\n\r\n## Inner Exception\r\n```\r\nSystem.ServiceModel.CommunicationException: An error occurred while sending the request.\r\n---> System.Net.Http.HttpRequestException: An error occurred while sending the request.\r\n---> System.Net.Http.WinHttpException: Not enough storage is available to complete this operation\r\n   at System.Net.Http.WinHttpHandler.ThrowOnInvalidHandle(SafeWinHttpHandle handle)\r\n   at System.Net.Http.WinHttpHandler.EnsureSessionHandleExists(WinHttpRequestState state)\r\n   at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.ServiceModel.Channels.ServiceModelHttpMessageHandler.<SendAsync>d__41.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.ServiceModel.Channels.HttpChannelFactory`1.HttpClientRequestChannel.HttpClientChannelAsyncRequest.<SendRequestAsync>d__13.MoveNext()\r\n```\r\n\r\n## Environment data\r\n```\r\nProduct Information:\r\n Version:            2.1.202\r\n Commit SHA-1 hash:  281caedada\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Platform: Windows\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.202\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.9\r\n  Build    : 1632fa1589b0eee3277a8841ce1770e554ece037\r\n```\r\n\r\n_Copied from original issue: dotnet/cli#10015_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27410/comments",
    "author": "livarcocc",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-09-17T21:55:45Z",
        "body": "Looks like some error from OS networking stack \"_Not enough storage is available to complete this operation_\".\r\nThe easiest option is to upgrade to .NET Core 2.1 which contains new networking stack implementation. Let's hope it works there.\r\n\r\nNote that .NET Core 2.0 is going out of support in 2 weeks."
      },
      {
        "user": "nilanthasj",
        "created_at": "2018-09-18T11:51:31Z",
        "body": "@karelz  Thank you for the response The strange thing i experienced is, this code work correctly without SiteMinder agents.."
      },
      {
        "user": "karelz",
        "created_at": "2018-09-18T16:11:17Z",
        "body": "The fact it works in some environments does not mean there are no bugs.\r\nOr the buggy environment has a bug in itself, causing the fialures (some antiviruses, viruses and other invasive SW sometimes can cause mysterious bugs in your apps)."
      },
      {
        "user": "karelz",
        "created_at": "2018-09-18T16:14:00Z",
        "body": "I will close it for now as it is not actionable. If you are able to narrow it down to something specific, that can be ideally reproduced elsewhere, feel free to reopen / ping me here.\r\n\r\nSome additional general tricks: Run it under debugger in the environment where it fails. Add some logging. Look at OS logging (ETW events). Try TTD (Time-travel Debugger). Or just play with your environments until problem is out.\r\nOr you can contact (paid) Microsoft support to get to the bottom of this in the OS."
      }
    ]
  },
  {
    "number": 11072,
    "title": "Linked cancellation token source where all tokens must be cancelled",
    "created_at": "2018-09-12T16:37:40Z",
    "closed_at": "2020-01-31T05:05:23Z",
    "labels": [
      "question",
      "area-System.Threading"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11072",
    "body": "This is more of an question of whether such functionality exists within the coreclr already.\r\n\r\nI've used `CancellationTokenSource.CreateLinkedTokenSource` to get a `CancellationToken` which will be cancelled when any of the subject tokens are cancelled.\r\n\r\nMy current scenario is I invoke an HTTP API and I would like to record in Entity Framework the result of that call.  Currently the EF call uses the same token I used for the HTTP API.  This works fine so long the token does not become cancelled.\r\n\r\nThe obvious solution to use a separate `CancellationToken` for the database call, which resulted in me making a small one that expires after 3 seconds, works fine for most scenarios but sometimes it operation takes longer than 3 seconds, so despite the first token still having time left left, the database operation fails due to the 3 second token.\r\n\r\nMy question is: \r\nIs there functionality within the `CancellationTokenSource` class (or elsewhere) that creates a linked token where *all* of the subject tokens must be cancelled for the derived one to be considered cancelled?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11072/comments",
    "author": "MatthewLymer",
    "comments": [
      {
        "user": "kouvel",
        "created_at": "2018-09-12T18:46:34Z",
        "body": "CC @tarekgh "
      },
      {
        "user": "tarekgh",
        "created_at": "2018-09-19T19:28:10Z",
        "body": "I am not aware of any API support this scenario. you may create your custom type doing that. \r\n\r\nCC @stephentoub just in case he knows any API doing that."
      },
      {
        "user": "stephentoub",
        "created_at": "2018-09-19T20:36:38Z",
        "body": "> Is there functionality within the CancellationTokenSource class (or elsewhere) that creates a linked token where all of the subject tokens must be cancelled for the derived one to be considered cancelled?\r\n\r\nThere's nothing built into .NET, but you could easily build your own, e.g. (untested)\r\n```C#\r\nsealed class AllLinkedSource : CancellationTokenSource\r\n{\r\n    private readonly CancellationTokenRegistration[] _registrations;\r\n    private int _remaining;\r\n\r\n    public AllLinkedSource(params CancellationToken[] tokens)\r\n    {\r\n        _remaining = tokens.Length;\r\n        _registrations = new CancellationTokenRegistration[tokens.Length];\r\n        for (int i = 0; i < tokens.Length; i++)\r\n        {\r\n            _registrations[i] = tokens[i].Register(t =>\r\n            {\r\n                var thisRef = (AllLinkedSource)t;\r\n                if (Interlocked.Decrement(ref thisRef._remaining) == 0) thisRef.Cancel();\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        foreach (CancellationTokenRegistration reg in _registrations) reg.Dispose();\r\n        base.Dispose(disposing);\r\n    }\r\n}\r\n```"
      },
      {
        "user": "tarekgh",
        "created_at": "2018-09-19T20:58:21Z",
        "body": "@MatthewLymer I am closing this issue but feel free to reply back with any more follow up questions."
      },
      {
        "user": "MatthewLymer",
        "created_at": "2018-09-20T12:50:49Z",
        "body": "Awesome, thanks for your help guys!"
      }
    ]
  },
  {
    "number": 27378,
    "title": "NetworkInterface.GetAllNetworkInterfaces Can not Run on Windows 10 Mobile",
    "created_at": "2018-09-12T12:16:02Z",
    "closed_at": "2020-01-31T23:01:12Z",
    "labels": [
      "question",
      "area-System.Net"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27378",
    "body": "Although version 2.0 of .NET Standard UWP can be used with recent versions of Windows 10. dotnet/runtime#17706\r\nWindows 10 mobile did not have this update.\r\nAny ideas of what to do ?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27378/comments",
    "author": "ArcheoCodix",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-09-12T16:12:55Z",
        "body": "There is no 2.1 .NET Standard yet. Only 2.0. If .NET APIs you need don't work on the platform you're on (Win10 Mobile), the only other alternative I can imagine is to explore using directly underlying platform (UWP) APIs (WinRT APIs)."
      },
      {
        "user": "ArcheoCodix",
        "created_at": "2018-09-12T16:28:42Z",
        "body": "Thank you for answering.\r\nSorry, I corrected my mistake.\r\nWindows 10 mobile is in 10.0.15254, so it's impossible to install UWP App with .NET 2.0 UWP (16299 minimum).\r\nWinRT functions can be used in a UWP app ?"
      },
      {
        "user": "karelz",
        "created_at": "2018-09-12T17:16:07Z",
        "body": "> so it's impossible to install UWP App with .NET 2.0 UWP (16299 minimum)\r\n\r\nYeah, I think I heard about that. Sadly, it is decision of the underlying platform (Win10 Mobile), which I cannot do anything about.\r\n\r\nWinRT APIs are the OS APIs, so yes, they are available in UWP apps.\r\n\r\nClosing as the CoreFX portion of the question was covered."
      }
    ]
  },
  {
    "number": 27285,
    "title": "Can not send email with SmtpClient on Ubuntu 18.4 LTS",
    "created_at": "2018-09-01T04:58:33Z",
    "closed_at": "2020-01-31T22:53:26Z",
    "labels": [
      "question",
      "area-System.Net",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27285",
    "body": "I'm trying to send email using Google SMTP server but its throwing exception:\r\n```\r\nAn unhandled exception occurred while processing the request.\r\nWin32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n\r\nSystem.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(string package, bool isServer, NetworkCredential credential)\r\nSmtpException: Failure sending mail.\r\n\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n```\r\nAt `Startup` Class:\r\n```c#\r\n services.AddScoped<SmtpClient>((provider) =>\r\n            {\r\n                var config = provider.GetRequiredService<IConfiguration>();\r\n                return new SmtpClient()\r\n                {\r\n                    Host = config.GetValue<String>(\"MailService:Smtp\"),\r\n                    Port = config.GetValue<int>(\"MailService:Port\"),\r\n                    Credentials = new NetworkCredential(\r\n                            config.GetValue<String>(\"MailService:Username\"),\r\n                            config.GetValue<String>(\"MailService:Password\")\r\n                        )\r\n                };\r\n            });\r\n```\r\nAnd in `Controller`:\r\n```c#\r\n        private readonly SmtpClient _smtpClient;\r\n\r\n        public ValuesController(\r\n            SmtpClient smtpClient\r\n        )\r\n        {\r\n            _smtpClient = smtpClient;\r\n        }\r\n\r\n        [HttpGet]\r\n        public async Task<IActionResult> Get()\r\n        {\r\n            await _smtpClient.SendMailAsync(new MailMessage(\r\n                from: \"sender@domain.com\",\r\n                to: \"receiver@domain.com\",\r\n                subject: \"Test message subject\",\r\n                body: \"Test message body\"\r\n                        ));\r\n            return Ok();\r\n        }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27285/comments",
    "author": "shakeri",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-09-02T05:43:07Z",
        "body": "Hello, it may not help, but can you please confirm this reproes on 2.1 (or master)? 2.0 is about to go out of support."
      },
      {
        "user": "shakeri",
        "created_at": "2018-09-03T10:40:57Z",
        "body": "@danmosemsft thanks for reply.\r\nI upgraded this project to version 2.1, but there is still a similar error:\r\n```\r\nAn unhandled exception occurred while processing the request.\r\nWin32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n\r\nSystem.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(string package, bool isServer, NetworkCredential credential)\r\nSmtpException: Failure sending mail.\r\n```"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-09-03T15:18:27Z",
        "body": "Thanks. Do you have a different machine to try? Not much to go on."
      },
      {
        "user": "shakeri",
        "created_at": "2018-09-04T06:31:42Z",
        "body": "I tested this project on Windows Server 2012 R2 on the same network and it worked without problems."
      },
      {
        "user": "karelz",
        "created_at": "2018-09-04T16:08:18Z",
        "body": "I suspect a problem with configuration on Linux - similar to dotnet/runtime#25885\r\n@tmds @wfurt any tips & tricks for troubleshooting?"
      },
      {
        "user": "wfurt",
        "created_at": "2018-09-04T16:18:20Z",
        "body": "I would suggest packet capture with wireshark or tcpdump. I would also suggest to install gss-ntlmssp package (or verify that it is in place) \r\nJust some background @shakeri: Windows do have all the necessary parts needed for NTLM and Kerberos. On Unix, this varies based on distribution and configuration.    "
      },
      {
        "user": "shakeri",
        "created_at": "2018-09-05T18:37:00Z",
        "body": "@wfurt I installed gss-ntlmssp package and test again.It worked.\r\nThanks."
      },
      {
        "user": "karelz",
        "created_at": "2018-09-05T18:44:03Z",
        "body": "Closing as answered."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-09-05T19:11:21Z",
        "body": "@karelz I wonder if it would make sense for the exceptoin message to suggest installing it."
      },
      {
        "user": "wfurt",
        "created_at": "2018-09-05T20:44:17Z",
        "body": "we talk about it while back @danmosemsft. I think that would be good idea. "
      },
      {
        "user": "davidsh",
        "created_at": "2018-09-05T20:51:53Z",
        "body": ">we talk about it while back @danmosemsft. I think that would be good idea.\r\n\r\nIt's not a trivial problem to solve.  The error message we get back when doing NTLM operations is not always specific enough to determine that the problem is configuration (i.e. gss-ntlmssp not installed)."
      }
    ]
  },
  {
    "number": 27259,
    "title": "How Can I Use ClientCertificates in HttpClientFactory.CreateClient",
    "created_at": "2018-08-28T17:32:20Z",
    "closed_at": "2020-01-31T22:51:11Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27259",
    "body": "i use Microsoft.Extensions.Http library ,in my scene,only before call SendAsync function ,i can know use which X509Certificate,it just like that,i has many customer config data,when call the webapi,need to send the the customer's clientCertificate before call httpclient's sendasync function ,,but HttpClientFactory.CreateClient can't pass the new handler to client,   how can i solve the scene???any one can help me please",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27259/comments",
    "author": "kugarliyifan",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2018-08-28T17:47:18Z",
        "body": "@karelz - Where is HttpClientFactory repo?  This needs to be moved there.  I think it is ASP.NET."
      },
      {
        "user": "kugarliyifan",
        "created_at": "2018-08-28T17:51:10Z",
        "body": "@davidsh    i view the HttpClientFactory repo issues,,,too few member,,,,,,,"
      },
      {
        "user": "karelz",
        "created_at": "2018-08-28T17:54:03Z",
        "body": "This issue was moved to aspnet/HttpClientFactory#164"
      },
      {
        "user": "karelz",
        "created_at": "2018-08-28T17:54:49Z",
        "body": "@kugarliyifan that is the right place to file the issues though. Different set of people than here."
      }
    ]
  },
  {
    "number": 27225,
    "title": "Why RSACng use SignHash with RSASignaturePadding.Pkcs1 need input hash length equal to HashAlgorithmName's hash's length?",
    "created_at": "2018-08-24T07:06:45Z",
    "closed_at": "2020-01-31T22:48:17Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27225",
    "body": "I'm use .NET Framework 4.6.1 on Windows.\r\n\r\nAnd I found when use RSACng SignHash, which is \r\n```c#\r\nbyte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);\r\n```\r\nwhen the parameter hash, the byte array 's length is not equal to hashAlgorithm's hash length, it will throw exception: wrong parameter.\r\nFor example:\r\nwhen use hashAlgorithm Sha256, whose result length is 32 , the length of hash must also be 32.\r\n\r\nPSS padding has no such restrictions.\r\nI think native library like Openssl also has no such restrictions.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27225/comments",
    "author": "avalon1610",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-08-25T05:46:49Z",
        "body": "If you're using `SignHash` (the hash is already computed) then the hash needs to be correct for it's size.  If PSS isn't requiring that then that sounds like a bug with the PSS handler (though I'd have to dig in and double check).\r\n\r\nIf you are signing data (which needs to be hashed first) then you should use `SignData` instead.  It has no size restrictions."
      },
      {
        "user": "avalon1610",
        "created_at": "2018-08-25T06:45:03Z",
        "body": "OK, I made a mistake. \r\nI found openssl's `EVP_DigestSignUpdate` will auto hash for the data, equals to `SignData` here. \r\nBut signing with PSS padding has different behavior here as I tested."
      },
      {
        "user": "bartonjs",
        "created_at": "2019-02-25T21:23:58Z",
        "body": "The PSS format allows the hash to mismatch because PSS technically doesn't have a requirement that the PSS hash and the data hash match, and that functionality is the escape valve for implementing custom logic (e.g. hash the data using SHA384 then verify the signature with PSS/SHA256... for... reasons.... :smile:).\r\n\r\nThere doesn't seem to be any other action required here, so closing."
      }
    ]
  },
  {
    "number": 27027,
    "title": "Does System.ComponentModel.Annotations/src/Resources/Strings.resx Support Localization?",
    "created_at": "2018-07-31T08:05:08Z",
    "closed_at": "2020-01-31T22:30:59Z",
    "labels": [
      "question",
      "area-System.ComponentModel"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27027",
    "body": "The current validation message in System.ComponentModel.Annotations/src/Resources/Strings.resx is only support English. Does any plan to support other language? such as Chinese or French?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27027/comments",
    "author": "kinshines",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-08-15T01:32:59Z",
        "body": "I don't think we plan localization for CoreFX - @danmosemsft?"
      },
      {
        "user": "kinshines",
        "created_at": "2018-08-15T01:45:40Z",
        "body": "Yes,I have solved out this problem with **ModelBindingMessageProvider**,thanks for your concerns"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-08-15T01:47:17Z",
        "body": "Right we have no current plans to localize messages in corefx. Sounds like you can close this?"
      }
    ]
  },
  {
    "number": 26956,
    "title": "Disposing object posted into DataSourceBlock.",
    "created_at": "2018-07-25T15:38:40Z",
    "closed_at": "2020-01-31T22:24:46Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26956",
    "body": "Hello. Recently I have started using TPL dataflow library and come across an issue whichI could not solve.\r\n\r\nI have one BroadcastBlock which have a cloning function:\r\n```csharp\r\nvar publisher = new BroadcastBlock<GrabbedFrame>(GrabbedFrame.Copy);\r\n```\r\nThen I have a couple of ActionBlocks created like this \r\n\r\n```csharp\r\nvar processorBlock = new ActionBlock<GrabbedFrame>(frame =>\r\n{\r\n        using (frame)\r\n        {\r\n            ProcessFrame(frame);\r\n        }\r\n}, new ExecutionDataflowBlockOptions\r\n{\r\n    BoundedCapacity = 1\r\n});\r\n```\r\n**PROBLEM DEFINITON:**\r\n\r\n- Object which I am passing to BroadcastBlock is disposable and I do not want to let GC to take care of it, because frame's size is huge and frames are posted very frequently.\r\n- **I want to know when I can safely dispose an object posted to broadcastblock** (I tried to remember reference to previous frame and when a new frame is posted disposing previous one, but that sometime leads to a state where the broadcast block was still cloning previous frame, even if a new one was already posted).\r\n\r\nIs there any solution for this ?\r\nThank you for any advice.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26956/comments",
    "author": "Temppus",
    "comments": [
      {
        "user": "tarekgh",
        "created_at": "2018-08-19T19:40:16Z",
        "body": "@Temppus sorry for the late reply. I assume your cloning method is just passing the same frame instance and not really cloning it. and you want to dispose of this frame instance when processed by all linked Blocks when posting it to the BroadcastBlock. please correct me if this is not correct. \r\n\r\nMy question is, do you know the number of Blocks linked to the BroadcaseBlock object? I think in your example, how many ActionBlocks linked to the publisher. if you know this, would be easy to implement some mechanism to store the expected number of Blocks will get notified and every time the frame get processed by such block, you can decrement this number and then when it reaches zero you can dispose of the frame. here is some code example: \r\n\r\n```C#\r\n\r\n   class Frame\r\n        {\r\n            public Frame(int i) { Item = i; }\r\n            public int Item { get; set; }\r\n            public int RefCount { get; set; }\r\n\r\n            public void Dispose()\r\n            {\r\n                Console.WriteLine($\"{this} is disposed.\");\r\n            }\r\n\r\n            public override string  ToString()\r\n            {\r\n                return Item.ToString();\r\n            }\r\n        }\r\n```\r\n\r\n\r\n\r\n```C#\r\n            BroadcastBlock<Frame> bc = new BroadcastBlock<Frame>(item => { item.RefCount = 2;  return item; });\r\n\r\n            ActionBlock<Frame> ab1 = new ActionBlock<Frame>(item => \r\n            {\r\n                Console.WriteLine($\"Block1: {item} -- {item.RefCount}\");\r\n                if (--item.RefCount <= 0)\r\n                    item.Dispose();\r\n            });\r\n\r\n            ActionBlock<Frame> ab2 = new ActionBlock<Frame>(item => \r\n            {\r\n                Console.WriteLine($\"Block2: {item} -- {item.RefCount}\");\r\n                if (--item.RefCount <= 0)\r\n                    item.Dispose();\r\n            });\r\n\r\n            bc.LinkTo(ab1);\r\n            bc.LinkTo(ab2);\r\n\r\n            bc.Post(new Frame(10));\r\n            bc.Post(new Frame(20));\r\n            bc.Post(new Frame(30));\r\n\r\n```\r\n\r\n"
      },
      {
        "user": "Temppus",
        "created_at": "2018-08-20T11:56:54Z",
        "body": "Hi @tarekgh. Thank you for your advice, but unfortunately number of \"subscribers\" can be dynamic at runtime, so this solution is not applicable. \r\nI am trying to find a way to tell when broadcast block will never call cloning function again for object that was posted in past (because newer one was posted and should overwrite it)."
      },
      {
        "user": "tarekgh",
        "created_at": "2018-08-20T16:01:25Z",
        "body": "@Temppus your idea may work too. I am closing this issue but feel free to reply back if you have any more questions or asks."
      },
      {
        "user": "Temppus",
        "created_at": "2018-08-20T18:04:00Z",
        "body": "I have found a way to workaround this issue (with a ugly hack) before I created issue. But I was hoping there is some cleaner way to achieve this. It seems like there is no solution yet ..."
      }
    ]
  },
  {
    "number": 26844,
    "title": "EventLog.CreateEventSource limits  log name similarity to first 8 chars",
    "created_at": "2018-07-17T13:03:01Z",
    "closed_at": "2020-01-31T22:15:34Z",
    "labels": [
      "question",
      "area-System.Diagnostics.EventLog"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26844",
    "body": "CreateEventSource  verifies that there is no existing log name that starts with the same 8 chars.\r\nFrom test we did, it does not seem to be a windows limitation, (maybe it was long time ago).\r\n\r\nI think it would be a good idea to simply remove this check and allow the flexibility of longer names.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26844/comments",
    "author": "thesourcerer",
    "comments": [
      {
        "user": "thesourcerer",
        "created_at": "2018-07-17T19:18:31Z",
        "body": "More info:\r\nWe tested and verified there is no windows limitation on:\r\nWindows Server 2008 R2\r\nWindows Server 2012 R2\r\nWindows 10\r\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-07-25T21:36:07Z",
        "body": "Fair enough. If someone wants to offer a PR, go ahead 😀 "
      }
    ]
  },
  {
    "number": 26837,
    "title": "string IndexOf work differently for windows and linux",
    "created_at": "2018-07-16T18:12:31Z",
    "closed_at": "2020-01-31T22:14:31Z",
    "labels": [
      "question",
      "area-System.Globalization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26837",
    "body": ".net core 2.1\r\n```\r\nwindows 10 x64: \r\n\"some \\n string\".IndexOf(\"\\n\")        | result 5\r\n\"some \\r\\n string\".IndexOf(\"\\n\")      | result 6\r\n\"some \\r\\n string\".IndexOf('\\n')      | result 6\r\n\"some \\n string\".IndexOf('\\n')        | result 5\r\n\r\nlinux ubuntu x64: \r\n\"some \\n string\".IndexOf(\"\\n\")        | result 5\r\n\"some \\r\\n string\".IndexOf(\"\\n\")      |-> result -1\r\n\"some \\r\\n string\".IndexOf('\\n')      | result 6\r\n\"some \\n string\".IndexOf('\\n')        | result 5\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26837/comments",
    "author": "ichensky",
    "comments": [
      {
        "user": "tarekgh",
        "created_at": "2018-07-16T19:44:04Z",
        "body": "We depend on the OS for linguistic string comparisons. so this behavior is expected. if you want to get the desired behavior you can use ordinal comparisons \r\n\r\n```C#\r\npublic int IndexOf(string value, StringComparison comparisonType) \r\n```\r\n\r\nand pass StringComparison.Ordinal to it"
      }
    ]
  },
  {
    "number": 10674,
    "title": "Assembly.LoadFrom(\"System.Threading.Tasks.Extensions.dll\") fails with FileLoadException",
    "created_at": "2018-07-13T16:03:23Z",
    "closed_at": "2020-01-31T04:37:40Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10674",
    "body": "We (PostSharp) noticed a weird behavior of .NET Core CLR and are asking for clarifications so we can implement a proper solution.\r\n\r\nConsider the following program:\r\n\r\n```\r\n   class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n           Assembly.LoadFrom(@\"C:\\Users\\gael\\.nuget\\packages\\system.threading.tasks.extensions\\4.5.1\\lib\\netstandard2.0\\System.Threading.Tasks.Extensions.dll\");\r\n   \r\n        }\r\n    }\r\n```\r\n\r\nWhen executed with the default command line with .NET Core 2.0.9, this program throws:\r\n\r\n```\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n   at ConsoleApp2.Program.Main(String[] args) in c:\\users\\gael\\documents\\visual studio 2017\\ConsoleApp2\\Program.cs:line 10\r\n```\r\n\r\nWe found the following workaround. First, define a file `my.deps.json` with the following content:\r\n\r\n```\r\n{\r\n  \"runtimeTarget\": {\r\n    \"name\": \".NETCoreApp,Version=v2.0\",\r\n    \"signature\": \"fc666d3b05189566bb68c07fa9bfb9b94dbee726\"\r\n  },\r\n  \"targets\": {\r\n    \".NETCoreApp,Version=v2.0\": {\r\n      \"System.Threading.Tasks.Extensions/4.5.1\": {\r\n        \"dependencies\": {\r\n          \"System.Runtime.CompilerServices.Unsafe\": \"4.5.0\"\r\n        },\r\n        \"runtime\": {\r\n          \"C:/Users/gael/.nuget/packages/system.threading.tasks.extensions/4.5.1/lib/netstandard2.0/System.Threading.Tasks.Extensions.dll\": {\r\n            \"assemblyVersion\": \"4.2.0.0\",\r\n            \"fileVersion\": \"4.6.26606.5\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"libraries\": {\r\n    \"System.Threading.Tasks.Extensions/4.5.1\": {\r\n      \"type\": \"package\",\r\n      \"serviceable\": true,\r\n      \"sha512\": \"sha512-rckdhLJtzQ3EI+0BGuq7dUVtCSnerqAoAmL3S6oMRZ4VMZTL3Rq9DS8IDW57c6PYVebA4O0NbSA1BDvyE18UMA==\",\r\n      \"path\": \"system.threading.tasks.extensions/4.5.1\",\r\n      \"hashPath\": \"system.threading.tasks.extensions.4.5.1.nupkg.sha512\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThen use the following command line:\r\n\r\n```\r\ndotnet --additional-deps my.deps.json ConsoleApp2.dll\r\n```\r\n\r\nOur hypothesis is that `Assembly.LoadFrom` is not allowed for assemblies that are shipped with .NET Core (i.e. those under the directory `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.9`). A viable workaround is to generate an additional `deps.json` file and include any assembly that we need to load at runtime but that are not a build-time dependency.\r\n\r\nCould you please spread some light on this situation?\r\n\r\nThank you.\r\n\r\n-gael\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10674/comments",
    "author": "gfraiteur",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-07-13T17:09:00Z",
        "body": "@jeffschwMSFT do you know?"
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2018-07-13T20:37:35Z",
        "body": "@gfraiteur thanks for reaching out.  The original failure happens for two reasons: 1) simple version downgrade checks and 2) tpa list unification.  When running on .NET Core 2.0.9 there is a version of System.Threading.Tasks.Extensions with version 4.1.1 that ships as part of NetCore.APP.  When you try to load S.T.T.E version 4.2 (which is what ships as part of the 4.5.1 nuget package) the runtime checks the TPA list and sees there is a version that is part of the platform.  When we try to load that version we see there is a downgrade in the version and fail.  The reason why adding it to the *.deps.json file fixes this issue is that at startup the highest version wins and is loadable.  \r\nThe poor diagnostics is noted and that is a problem we are actively looking to resolve.  For assemblies that ship as part of the NETCore.App package not easily overwritten in this way.  \r\nWhat is the core of your scenario?"
      },
      {
        "user": "gfraiteur",
        "created_at": "2018-07-16T09:13:38Z",
        "body": "Thank you for your reply.\r\n\r\nOur scenario is a post-compiler (PostSharp), which transforms the assembly being built. This assembly itself contains executable transformations (aspects with build-time logic), therefore we need to feed our application (a .NET Core App application in this case) with the proper list of dependencies. This assembly has of course a different set of dependencies than the post-compiler system.\r\n\r\nI think our scenario is just a sub-case of any \"plugin loader\" system, which typically uses Assembly.LoadFrom. I guess all plugin loaders would be affected by this limitation.\r\n\r\nAs a workaround, it seems we will need to generate `deps.json` on the fly from the MSBuild task before starting our post-compiler. Maybe a better solution is needed for the general case, i.e. to support Assembly.LoadFrom when the list of dependencies is not known upfront."
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2018-07-16T15:06:51Z",
        "body": "In this case if you wire up a AssemblyResolve event and return the 4.2 version of System.Threading.Tasks.Extensions then we will load it (regardless of the version number).  We are exploring options to make this better, once we have a proposal I will include you for comment."
      },
      {
        "user": "gfraiteur",
        "created_at": "2018-07-16T16:12:20Z",
        "body": "Thank you. Currently we're calling `Assembly.LoadFrom` from `AssemblyLoadContext.Default.Resolving`. I tried to use `AppDomain,AssemblyResolve` instead per your suggestion, but I did not work.\r\n\r\nI now have a workaround that generates some `postsharp.deps.json` before starting dotnet.exe and it seems to work, although it's a bit brutal."
      },
      {
        "user": "jeffschwMSFT",
        "created_at": "2018-07-16T16:52:52Z",
        "body": "I am glad you have a workaround.  We are actively discussing this scenario and hopefully we will have a better story (at least diagnostics).  Closing for now"
      }
    ]
  },
  {
    "number": 26747,
    "title": "Pipelines: best practices for managing flushing",
    "created_at": "2018-07-10T11:04:35Z",
    "closed_at": "2020-01-31T22:07:23Z",
    "labels": [
      "question",
      "area-System.IO.Pipelines"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26747",
    "body": "While working on Npgsql and pipelines, I ran into an interesting question - when should I actually flush my PipeWriter? Obviously, once the entire data has been written I should flush to make sure data is actually made available to the reader (which in my case would mean writing buffered data to a network socket). However, I also expect to need to flush in order to avoid buffering too much in memory.\r\n\r\nTo clarify, a user may hand my driver some extremely large data values to send to PostgreSQL. It's my understanding that if I simply get Spans/Memory's from my PipeWriter, write data and then call `Advance()`, I end up buffering the entire data in memory, which is definitely something that needs to be avoided. Is my understanding correct? Can this behavior (continually buffer more until flush) be considered standard for all PipeWriter implementations, or can/should it be expected to vary?\r\n\r\nIf the above is true, I could of course decide on an arbitrary (and/or configurable) size beyond which my code flushes. However, there doesn't seem to be any easy way to know how much data is currently buffered for writing inside a pipe; when you use a traditional stream, you're responsible for keeping track yourself of how much you've written, but I think it doesn't make sense for PipeWriter to require you to do the same - imagine multiple application components involved in writing a message, and having to pass around the amount written alongside the PipeWriter.\r\n\r\nAssuming the above is correct, does it make sense to add some accessor to PipeWriter which exposes how much data is pending for write? Or have I completely misunderstood pipelines?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26747/comments",
    "author": "roji",
    "comments": [
      {
        "user": "roji",
        "created_at": "2018-07-10T11:06:07Z",
        "body": "/cc @davidfowl @mgravell @stephentoub "
      },
      {
        "user": "mgravell",
        "created_at": "2018-07-10T16:53:30Z",
        "body": "I've spoken to folks previously about a `.Length` / `.Count` on the pipe, but not for this purpose - just for diagnostic system health monitoring reasons.\r\n\r\nFor when to flush: *don't hold back*. In most cases, flush is synchronous. Flush is really \"make sure the writer is active, and apply throttling if I'm out-pacing the consumer\" (presumably the network in your case), so there's really no reason to be shy of flushing. Obviously you wouldn't flush for every fragment of a header, for example, but  as long as you're passing decent sized chunks, *flush away*. In your example of extremely large data values - presumably we're talking large BLOBs/CLOBs or data-table style objects? Personally, I'd try to flush at least once every 8k or so and once at the end, but that's not a magic number chosen for any meaningful reason - it is just an arbitrary decent sized chunk.\r\n\r\nEdit: in particular, note that my flushing behaviour wouldn't change based on the length of the pipe; it is the job of FlushAsync to deal with backing off."
      },
      {
        "user": "davidfowl",
        "created_at": "2018-07-10T16:55:23Z",
        "body": "There have been requests to expose a Length property on the PipeWriter that would return the amount buffered but its really up to your protocol to decide when flushing is appropriate. If you write over the `PauseWriterThreshold` will stop you from writing more, but if you do over-sized writes that break the threshold but you can still buffer \"too much\". I think the best you can do right now is chunk up writes and flushes when the user written object is over some size."
      },
      {
        "user": "roji",
        "created_at": "2018-07-12T10:51:04Z",
        "body": "Thanks for your responses - it more or less confirms my understanding of the situation.\r\n\r\n@mgravell\r\n\r\n> For when to flush: don't hold back. In most cases, flush is synchronous. Flush is really \"make sure the writer is active, and apply throttling if I'm out-pacing the consumer\" (presumably the network in your case), so there's really no reason to be shy of flushing. Obviously you wouldn't flush for every fragment of a header, for example, but as long as you're passing decent sized chunks, flush away. In your example of extremely large data values - presumably we're talking large BLOBs/CLOBs or data-table style objects? Personally, I'd try to flush at least once every 8k or so and once at the end, but that's not a magic number chosen for any meaningful reason - it is just an arbitrary decent sized chunk.\r\n\r\nI understand that pipelines is an abstraction, but the idea that flush is synchronous \"in most cases\" can be a bit problematic... Specifically, isn't it important for perf for the producer to know when an actual I/O system call occurs and when it doesn't (regardless of whether it blocks for any length of time)? Regardless of the above question, I do agree that 8KB is a good figure - Npgsql currently has 8KB as its default read and write buffers.\r\n\r\n@davidfowl \r\n\r\n> its really up to your protocol to decide when flushing is appropriate.\r\n\r\nAt least in the PostgreSQL case, the protocol doesn't care at all about flushing or how packets are segmented - as long as you send everything correctly it can be segmented any way you like. So it really is a perf tuning question, to make sure flushing (in the I/O sense) doesn't occur unless necessary; this would create packet fragmentation, and also add system call overhead.\r\n\r\nBut going back to my specific issue, the problem is *how* to know when I've written 8KB. Writing is a pretty complex process split across multiple classes, and it currently seems necessary manually track bytes written myself, passing around this value to everyone involved.\r\n\r\nTo provide an example, sending a query to the database for execution involves sending multiple wire protocol messages (ideally packed in a single packet and flushed once, if they fit). One of these messages (Bind) contains the list of parameters to the command, and one of these parameters can be an array of strings. The type handler responsible for writing the binary representation of a PostgreSQL array delegates to the string type handler for each of its values. Flushing may happen at any point while writing the array; it could be an array of one single huge string (so the flush would need to happen inside the string handler), or an array of many small strings (so the flush would need to happen inside the array handler). All these components would need to cooperate, passing a \"currently buffered bytes\" value back and forth.\r\n\r\nTo me it makes sense to have this tracked and exposed by PipeWriter, does anyone have any objections? Can we keep this issue open to track that?"
      },
      {
        "user": "davidfowl",
        "created_at": "2018-07-12T17:03:24Z",
        "body": "Sure turn this into an official API proposal."
      },
      {
        "user": "roji",
        "created_at": "2018-07-14T16:36:46Z",
        "body": "Closing in favor of dotnet/corefx#31074 (official API proposal)."
      }
    ]
  },
  {
    "number": 10646,
    "title": "HW intrinsics - PopCount() returns int/long, while Leading/TrailingZeroCount() returns uint/ulong",
    "created_at": "2018-07-09T08:21:28Z",
    "closed_at": "2020-01-31T04:35:23Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10646",
    "body": "Is this difference in return type by design?\r\nAlso, `MoveMask()` returns `int` which may be less convenient than `uint` when one has to shift the result obtained from 256-bit vector right for some reason",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10646/comments",
    "author": "voinokin",
    "comments": [
      {
        "user": "voinokin",
        "created_at": "2018-07-15T09:04:44Z",
        "body": "@tannergooding\r\nMy concern here is to confirm HW intrinsics API is consistent at these specific points, before it's too late\r\nThank you for answering and/or excuse me for disturbing if you're not the right person :-)"
      },
      {
        "user": "tannergooding",
        "created_at": "2018-07-15T14:06:27Z",
        "body": "Thanks @voinokin. Myself and @eerhardt are the primary people to tag on HWIntrinsic related API requests.\r\n\r\n@CarolEidt, @fiigii, and @RussKeldorph are also part of the larger \"working group\" and are good to tag as well.\r\n\r\n@fiigii, specifically, might be able to provide more insight as to why `uint` was used here, instead of `int`. \r\n\r\nIt looks like the native signatures take `uint` parameters and return `int` results; So I'm wondering if this was just oversight and the return type was made to match the parameter type by accident."
      },
      {
        "user": "fiigii",
        "created_at": "2018-07-31T20:01:09Z",
        "body": "> It looks like the native signatures take uint parameters and return int results; \r\n\r\nRight, we just followed the C/C++ intrinsic design. But I see no harm in being consistent in the return type (I would choose unsigned since they can never be negative)."
      }
    ]
  },
  {
    "number": 26711,
    "title": "P/Invoke lost the first parameter when calling an export method of class from a 64-bit dll",
    "created_at": "2018-07-06T03:13:21Z",
    "closed_at": "2020-01-31T22:04:32Z",
    "labels": [
      "question",
      "area-System.Runtime.InteropServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26711",
    "body": "I found a problem when using P/Invoke.\r\n\r\nC#:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class NativeMethods\r\n    {\r\n        [DllImport(\"./Project1.dll\", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl, EntryPoint = \"#3\")]\r\n        public static extern int TestX64(\r\n            [MarshalAs(UnmanagedType.LPStr)] string a,\r\n            [MarshalAs(UnmanagedType.LPStr)] string b,\r\n            [MarshalAs(UnmanagedType.LPStr)] string c,\r\n            [MarshalAs(UnmanagedType.LPStr)] string d);\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            NativeMethods.TestX64(\"aaaa\", \"bbbb\", \"cccc\", \"dddd\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nC++:\r\nHeader.h\r\n```cpp\r\n#pragma once\r\n#include <cstdio>\r\n\r\nclass __declspec(dllexport) test\r\n{\r\npublic:\r\n\tint aaa(const char*, const char*, const char*, const char*) const;\r\n};\r\n```\r\n\r\nSource.cpp:\r\n```cpp\r\n#include \"Header.h\"\r\n\r\nint test::aaa(const char * a, const char * b, const char * c, const char * d) const\r\n{\r\n\tprintf(\"%s\\n%s\\n%s\\n%s\\n\", a, b, c, d);\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nAnd finally I build both the dll and .NET app for 64-bit and run it, I got an error: 0xC0000005: Access violation reading location 0x0000000064646464.\r\n\r\nFinally, I debug into Source.cpp and I found that the first parameter was not being passed into the function.\r\nNormally, the parameters should be a = \"aaaa\", b = \"bbbb\", c = \"cccc\", d = \"dddd\", but actually I got a = \"bbbb\", b = \"cccc\", c = \"dddd\", d = \\<invalid pointer\\>\r\n\r\nI've tried out both .NET Framework (4.7.1) and .NET Core (2.1), both of them have this issue.\r\n\r\nAnd if you build both the dll and .NET app for 32-bit and run it in 32-bit mode (need to use stdcall), the problem doesn't exist.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26711/comments",
    "author": "hez2010",
    "comments": [
      {
        "user": "AndyAyersMS",
        "created_at": "2018-07-06T04:09:41Z",
        "body": "Shouldn't your C++ method be marked `static`? Otherwise you would need to pass it the implicit first `this` argument."
      },
      {
        "user": "jkotas",
        "created_at": "2018-07-06T04:57:33Z",
        "body": "As Andy said. You just got lucky that the mismatched signature works in 32-bit mode."
      }
    ]
  },
  {
    "number": 26689,
    "title": "TreatControlCAsInput always throws",
    "created_at": "2018-07-03T20:29:49Z",
    "closed_at": "2020-01-31T22:02:25Z",
    "labels": [
      "question",
      "area-System.Console",
      "os-windows"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26689",
    "body": "OS: Windows\r\n.NET Version: .NET Core 2.1.1\r\n\r\nI have this app:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace ControlC\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Console.TreatControlCAsInput = true;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt always throws:\r\n\r\n```console\r\nException has occurred: CLR/System.IO.IOException\r\nAn unhandled exception of type 'System.IO.IOException' occurred in System.Console.dll: 'The handle is invalid'\r\n   at System.ConsolePal.set_TreatControlCAsInput(Boolean value)\r\n   at System.Console.set_TreatControlCAsInput(Boolean value)\r\n   at ControlC.Program.Main(String[] args) in C:\\Users\\rich\\ControlC\\Program.cs:line 10\r\n```\r\n\r\nI wasn't expecting this. What is the correct behavior?\r\n\r\nI am having some trouble getting the behavior I want with CTRL-C. I was using this property in a larger app and see the same behavior.  This is the minimal use case. I want to run code in the `CancelKeyPress` w/o it exiting before execution of the handler is complete.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26689/comments",
    "author": "richlander",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-07-03T20:47:16Z",
        "body": "I can't repro this, and I've never seen an error like this.  TreatControlCAsInput is supported.\r\n\r\nAlso, what is the `Exception has occurred: CLR/System.IO.IOException` in your output?  Where is that coming from?\r\n\r\nHow are you executing this?"
      },
      {
        "user": "richlander",
        "created_at": "2018-07-03T21:40:53Z",
        "body": "I see now that it works with `dotnet run`. I can repro it with F5 in VS Code (still on Windows).\r\n\r\nOnly other info in the exception is this HRESULT, which I assume is generic: 2147024890"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-07-04T03:35:00Z",
        "body": "> I can repro it with F5 in VS Code (still on Windows).\r\n\r\nIt sounds like the issue then is with VS Code and how it's creating the console.  Most likely it's redirecting stdin such that there isn't actually a Windows console to interact with, and you get the IOException outlined in the docs: \"Unable to get or set the input mode of the console input buffer.\"."
      }
    ]
  },
  {
    "number": 10615,
    "title": "Question about software protection",
    "created_at": "2018-07-02T10:49:42Z",
    "closed_at": "2020-01-31T04:32:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10615",
    "body": "There is a question about software protection. We used confusing software to compiling and then obscure the code, and then deploying。we use hardware key to protection secret algorithms, so that the software could be prevented from being copied. Now deployed in the container, if a customer asks us to deploy a private cloud to them, the file is easily copied by . Whether the container can be restricted can not be mounted, or can not be copied.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10615/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-07-02T19:00:39Z",
        "body": "This is a very general question that is not related to CoreCLR runtime."
      },
      {
        "user": "ghost",
        "created_at": "2018-07-03T00:48:56Z",
        "body": "But this can be solved by CLR, for example, compiled DLL can be encrypted, and CLR can run encrypted DLL. Give CLR a Key through the environment variable"
      },
      {
        "user": "jkotas",
        "created_at": "2018-07-03T03:40:00Z",
        "body": "CLR has APIs that allows you to implement this scheme on your own (look for `Assembly.Load(byte[])`)."
      }
    ]
  },
  {
    "number": 26655,
    "title": "Referencing .Net Framework library to Core projects throwing error",
    "created_at": "2018-06-29T04:07:48Z",
    "closed_at": "2020-01-31T21:59:24Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26655",
    "body": "Hello Team ,\r\nI am using a DLL library which was created in .Net Framework (earlier to 4.5) and i am referencing the same to my Core Project . the Core project builds correctly but the issue is when the code is pointing towards the methods that is corresponding towards the DLL library(.Net Framework) it is throwing \"BadImageFormatException: Could not load file or assembly 'xxxx'. An attempt was made to load a program with an incorrect format.\" According to the solution in nuget i also installed the Windows.Compatibity package , still the error is not resolved .\r\nCould you please provide us the alternative turn around solution for this as my project really requires to start up quickly and i am very keen on doing with Core rather than going back to .Net Framework approach .\r\nMany thanks in advance.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26655/comments",
    "author": "NaveenKumar2303",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-06-29T05:51:17Z",
        "body": "Check the bitness of the library...my guess is that it is built for 32 bit and your app is 64 bit or vice versa?"
      },
      {
        "user": "NaveenKumar2303",
        "created_at": "2018-06-29T05:53:31Z",
        "body": "Yes that bit of Library is 32 bit , what will be the optimal solution for that to convert ?"
      },
      {
        "user": "NaveenKumar2303",
        "created_at": "2018-06-29T10:07:27Z",
        "body": "Hey Team ,\r\n\r\nCould you provide us the solution ?"
      },
      {
        "user": "vcsjones",
        "created_at": "2018-06-29T18:01:29Z",
        "body": ">what will be the optimal solution for that to convert ?\r\n\r\nYou need to re-compile the library to be Any CPU (preferably) or x64 if you want to use the 64-bit .NET Core.\r\n\r\nIf you want to ensure your .NET Core project is 32-bit only, you can add this to your .csproj file:\r\n\r\n```xml\r\n<PlatformTarget>x86</PlatformTarget>\r\n```\r\n\r\nThis has a few caveats though. Namely that, I think, Visual Studio will use the wrong SDK to start the project. There is an open issue in dotnet/cli#7532 that mentions this.\r\n\r\nBy far the easiest thing to do is to have everything be Any CPU and platform independent."
      },
      {
        "user": "NaveenKumar2303",
        "created_at": "2018-07-02T04:11:51Z",
        "body": "Thank you guys will give a shot and let you know"
      },
      {
        "user": "NaveenKumar2303",
        "created_at": "2018-07-06T12:00:44Z",
        "body": "Closes dotnet/corefx#30750\r\n"
      }
    ]
  },
  {
    "number": 26595,
    "title": "Different AssemblyVersions of target DLLs in NuGet package System.Reflection.DispatchProxy 4.5.1",
    "created_at": "2018-06-24T14:58:31Z",
    "closed_at": "2020-12-07T02:58:06Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26595",
    "body": "Should the AssemblyVersions be different for the different target DLLs in the NuGet package System.Reflection.DispatchProxy 4.5.1 ?\r\n\r\nFor example:\r\n- lib\\net461\\System.Reflection.DispatchProxy.dll has an AssemblyVersion of \"4.0.4.0\".\r\n- lib\\netstandard2.0\\System.Reflection.DispatchProxy.dll has an AssemblyVersion of \"4.0.4.0\".\r\n\r\nBUT\r\n- lib\\netstandard1.3\\System.Reflection.DispatchProxy.dll has an AssemblyVersion of \"4.0.2.0\".\r\n\r\nThis causes the following error when in a solution where a .NET 4.7.2 automated test project is referencing a .NET Standard 1.3 library. \r\n\r\n`System.IO.FileLoadException: Could not load file or assembly 'System.Reflection.DispatchProxy, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nI have worked around the problem by adding an assembly binding redirect... but not sure I should have had to...\r\n`      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Reflection.DispatchProxy\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.4.0\" newVersion=\"4.0.4.0\" />\r\n      </dependentAssembly>`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26595/comments",
    "author": "channeladam",
    "comments": [
      {
        "user": "joperezr",
        "created_at": "2018-10-22T20:29:26Z",
        "body": "Yes, this is by design. A package contains assets for many different frameworks, and each one might have different Assembly versions. If you compare the two System.Reflection.DispatchProxy.dll you'll find that they are different. Checking a repro of your app would be better, but in theory, for these kind of problems we will automatically generate a binding redirect for you as long as you have the `<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>` set."
      },
      {
        "user": "ghost",
        "created_at": "2020-12-07T02:05:13Z",
        "body": "This issue has been automatically marked as no recent activity because it has been marked as needing more info but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days."
      },
      {
        "user": "danmoseley",
        "created_at": "2020-12-07T02:58:06Z",
        "body": "Seems resolved."
      }
    ]
  },
  {
    "number": 10538,
    "title": "Call native methods of the CLR itself from managed code",
    "created_at": "2018-06-19T11:23:11Z",
    "closed_at": "2020-01-31T04:27:34Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10538",
    "body": "Hi, \r\nis it possible to call a c++ method of the program, that hosts the CoreCLR, from inside the loaded managed assembly?\r\n\r\nI need to integrate a C# programm into my C++ simulation project. So I successfully set up my C++ Project to hosted the CoreCLR and I'm able to call functions from the C# Code.\r\nNow the C# itself needs to call into the C++ Code.\r\n\r\nI tried native calls using [DllImport] with some test library successfully. But the external method symbols should be looked up in the main programm instead of another lib like you can do with dlopen(NULL) on linux.\r\n\r\nI have done that whole integration in mono a few month ago, but as the C# code was origianaly build for .NET Core, I want to go with it now.\r\n\r\nIn Mono you can use the __Internal keyword with the DllImport attribute to encounter this topic. Is there any possibility to do the same with .NETCore? \r\n\r\nRegards\r\nJens\r\n\r\nPS: I cannot use LoadLibrary() since I'm on linux and hence cannot use the kernel32.dll",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10538/comments",
    "author": "jensdrenhaus",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-06-19T14:47:35Z",
        "body": "We do not have a way to reference the exported methods from the main program using DllImport in .NET Core today.\r\n\r\n>  I cannot use LoadLibrary() since I'm on linux \r\n\r\nYou can use `dlopen(NULL)` as a workaround."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2019-01-04T02:28:23Z",
        "body": "Closing as duplicate of dotnet/runtime#7267."
      }
    ]
  },
  {
    "number": 10530,
    "title": "Marshal.StructureToPtr() only marshals first element of an fixed-size buffer when structure is contained within a managed/non-blittable structure",
    "created_at": "2018-06-17T17:56:51Z",
    "closed_at": "2020-01-31T04:27:09Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10530",
    "body": "_From @kpreisser on June 17, 2018 15:40_\n\nHi, sorry if this isn't the right place to report this, but I couldn't find other reports/explanations of this behavior.\r\n\r\nI found that when using `Marshal.StructureToPtr()` with a managed/non-blittable structure that contains a blittable structure with a fixed-size buffer, only the first byte of that fixed-size buffer is actually marshalled; the remaining bytes are `0`.\r\n\r\nI could reproduce this issue/behavior on .NET Core 2.1 (Windows), .NET Core 2.0 (Linux) and .NET Framework 4.7.2.\r\n\r\nPlease see the following code:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nnamespace MarshalTest\r\n{\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    unsafe struct MyBufferStruct\r\n    {\r\n        public short number;\r\n        public fixed byte number2[2];\r\n        //public byte number2_1;\r\n        //public byte number2_2;\r\n        public short number3;\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\n    struct MyParentStruct\r\n    {\r\n        public MyBufferStruct myBufferStruct;\r\n        public string string1; // commenting this makes it work\r\n        public IntPtr intptr1;\r\n    }\r\n\r\n    class MarshalExample\r\n    {\r\n        static unsafe void Main()\r\n        {\r\n            var str = default(MyParentStruct);\r\n\r\n            // Assign values to the bytes.\r\n            byte* ptr = (byte*)&str.myBufferStruct;\r\n            for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                ptr[i] = (byte)(0x11 * (i + 1));\r\n\r\n            var stringBuilder = new StringBuilder();\r\n            for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                stringBuilder.Append(ptr[i].ToString(\"X2\"));\r\n\r\n            Console.WriteLine(stringBuilder.ToString());\r\n\r\n            // Marshal the buffer struct directly.\r\n            var bufferStructIntPtr = Marshal.AllocHGlobal(Marshal.SizeOf<MyBufferStruct>());\r\n            Marshal.StructureToPtr(str.myBufferStruct, bufferStructIntPtr, false);\r\n            try\r\n            {\r\n                byte* bufferStructPtr = (byte*)bufferStructIntPtr.ToPointer();\r\n                stringBuilder = new StringBuilder();\r\n                for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                    stringBuilder.Append(bufferStructPtr[i].ToString(\"X2\"));\r\n\r\n                Console.WriteLine(stringBuilder.ToString());\r\n            }\r\n            finally\r\n            {\r\n                Marshal.DestroyStructure<MyBufferStruct>(bufferStructIntPtr);\r\n                Marshal.FreeHGlobal(bufferStructIntPtr);\r\n            }\r\n\r\n            // Marshal the parent struct.\r\n            var parentStructIntPtr = Marshal.AllocHGlobal(Marshal.SizeOf<MyParentStruct>());\r\n            Marshal.StructureToPtr(str, parentStructIntPtr, false);\r\n            try\r\n            {\r\n                byte* parentStructPtr = (byte*)parentStructIntPtr.ToPointer();\r\n                stringBuilder = new StringBuilder();\r\n                for (int i = 0; i < sizeof(MyBufferStruct); i++)\r\n                    stringBuilder.Append(parentStructPtr[i].ToString(\"X2\"));\r\n\r\n                Console.WriteLine(stringBuilder.ToString());\r\n            }\r\n            finally\r\n            {\r\n                Marshal.DestroyStructure<MyParentStruct>(parentStructIntPtr);\r\n                Marshal.FreeHGlobal(parentStructIntPtr);\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis example declares a struct `MyBufferStruct` that contains a fixed-size buffer. As it contains only primitive types, I can get a pointer to it and set its values (6 bytes),\r\nThen, I first marshal the struct `MyBufferStruct` directly, and after that, I marshal the structure `MyParentStruct` which contains `MyBufferStruct` and additionally a non-blittable type (`string`).\r\n\r\nExcepted output:\r\n```\r\n112233445566\r\n112233445566\r\n112233445566\r\n```\r\n\r\nActual output:\r\n```\r\n112233445566\r\n112233445566\r\n112233005566\r\n```\r\n\r\nThis means when marshalling only the struct itself, everything works, but when marshalling the parent structure, only the first byte of the fixed-size buffer (`number2`) is marshalled instead of all bytes.\r\n\r\nHowever, if you comment-out the `public string string1` field in `MyParentStruct`, everything is marshalled correctly. Also, if you comment-out the fixed-size buffer field `public fixed byte number2[2];` in `MyBufferStruct` and instead uncomment the two short fields (`number2_1` and `number2_2`), marshalling works correctly.\r\n\r\nThank you!\n\n_Copied from original issue: dotnet/corefx#30473_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10530/comments",
    "author": "jkotas",
    "comments": [
      {
        "user": "jeffschwMSFT",
        "created_at": "2018-06-18T23:10:30Z",
        "body": "@luqunl @AaronRobinsonMSFT \r\n"
      }
    ]
  },
  {
    "number": 26478,
    "title": "How do we detect memory leaks in.Net core and asp.net core?",
    "created_at": "2018-06-13T08:24:56Z",
    "closed_at": "2020-01-31T21:44:18Z",
    "labels": [
      "question",
      "area-System.Diagnostics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26478",
    "body": "In my asp.net core 2 application, I always find that there is a constant increase in the inside, or even the GC memory will continue to rise. What tools can analyze memory leaks?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26478/comments",
    "author": "rocketRobin",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-06-13T16:12:24Z",
        "body": "Any profiler typically can do memory leak analysis - e.g. VS Profiler, PerfView (expert tool) and probably a few external tools."
      },
      {
        "user": "rocketRobin",
        "created_at": "2018-06-22T01:03:27Z",
        "body": "Thank you very much!"
      }
    ]
  },
  {
    "number": 26473,
    "title": "Inconsistent behviour on AppDomain unload with pending tasks",
    "created_at": "2018-06-13T00:20:20Z",
    "closed_at": "2020-01-31T21:43:59Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26473",
    "body": "First consider this:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.IO.Pipes;\r\nusing System.Threading;\r\n\r\nnamespace AppDomainUnloadTest\r\n{\r\n  class Program\r\n  {\r\n    [Serializable]\r\n    private class AppDomainTest\r\n    {\r\n      public string PipeHandle { get; set; }\r\n      public async void Foo()\r\n      {\r\n        PipeStream stream = new AnonymousPipeClientStream(PipeDirection.In, PipeHandle);\r\n        byte[] buffer = new byte[1];\r\n        await stream.ReadAsync(buffer, 0, 1);\r\n        Console.WriteLine(buffer[0]);\r\n      }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      AppDomainTest appDomainTest = new AppDomainTest();\r\n      var pipeServer = new AnonymousPipeServerStream(PipeDirection.Out);\r\n      appDomainTest.PipeHandle = pipeServer.GetClientHandleAsString();\r\n      AppDomain domain = AppDomain.CreateDomain(\"Testdomain\");\r\n      domain.DoCallBack(appDomainTest.Foo);\r\n      Thread.Sleep(1000);\r\n      AppDomain.Unload(domain);\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nThis fails with System.CannotUnloadAppDomainException because the pipe is not asynchronous so internally it just does a synchronous wait from a threadpool. AppDomain.Unload makes no attempt at cancelling pending synchronous IO, so it ends up timing out.\r\n\r\nNow if we instead use an asynchronous pipe:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.IO.Pipes;\r\nusing System.Threading;\r\n\r\nnamespace AppDomainUnloadTest2\r\n{\r\n  class Program\r\n  {\r\n    [Serializable]\r\n    private class AppDomainTest\r\n    {\r\n      public string PipeName { get; set; }\r\n      public async void Foo()\r\n      {\r\n        var stream = new NamedPipeClientStream(\".\", PipeName, PipeDirection.In, PipeOptions.Asynchronous);\r\n        stream.Connect();\r\n        byte[] buffer = new byte[1];\r\n        await stream.ReadAsync(buffer, 0, 1);\r\n        Console.WriteLine(buffer[0]);\r\n      }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      string pipename = \"foopipe\" + Guid.NewGuid().ToString(\"N\");\r\n      AppDomainTest appDomainTest = new AppDomainTest();\r\n      appDomainTest.PipeName = pipename;\r\n      var pipeServer = new NamedPipeServerStream(pipename, PipeDirection.Out, 1, PipeTransmissionMode.Byte, PipeOptions.Asynchronous);\r\n      pipeServer.BeginWaitForConnection(ar => { pipeServer.EndWaitForConnection(ar); }, null);\r\n      AppDomain domain = AppDomain.CreateDomain(\"Testdomain\");\r\n      domain.DoCallBack(appDomainTest.Foo);\r\n      Thread.Sleep(1000);\r\n      AppDomain.Unload(domain);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis completes without any errors. Of course internally an IO completion port is used, so there is no pending synchronous IO that blocks any threads, so the AppDomain is just unloaded.\r\n\r\nIt seems quite pointless to wait for the IO to complete in the first case when the callback would never actually be called.  ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26473/comments",
    "author": "poizan42",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-06-13T14:18:17Z",
        "body": "In .NET Framework, AppDomain can unload only after no thread is executing in the AppDomain. If the execution is stuck in unmanaged method with the AppDomain code on the stack, the AppDomain cannot unload.\r\n\r\nFor anything even slightly more complex, you have to abort, close or dispose the operations in flight yourself before calling AppDomain unload in order for it to succeed. It is very bug prone and hard to get right. \r\n\r\nIt is one of the reasons why we have decided to not support AppDomains in .NET Core."
      },
      {
        "user": "poizan42",
        "created_at": "2018-06-13T14:39:22Z",
        "body": "The problem here is not the behaviour of AppDomain.Unload per se, but that ReadAsync and WriteAsync on the streams acts differently with pending io on appdomain unload depending on whether the underlying native handle has been opened in asynchronous mode."
      },
      {
        "user": "jkotas",
        "created_at": "2018-06-13T14:50:09Z",
        "body": "If the handle is opened in synchronous mode, ReadAsync and WriteAsync have no other option but to convert to synchronous operation."
      },
      {
        "user": "poizan42",
        "created_at": "2018-06-13T15:09:12Z",
        "body": "They could cancel their own IO on appdomain unload, or some more general mechanism could be introduced to opt in to have CancelSynchronousIo called on you on appdomain unload during a P/Invoke call."
      }
    ]
  },
  {
    "number": 10486,
    "title": "Transition from .Net Framework to Coreclr : Moving from GACed Dlls",
    "created_at": "2018-06-10T14:18:59Z",
    "closed_at": "2020-01-31T04:23:56Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10486",
    "body": "We are porting our SDK from .NET Framework to Coreclr.\r\n\r\nAs a platform, we have SDK and runtime c# dlls. Most of them are nicely segregated. However, the bridge library between SDK and Runtime: A.dll is GACed in .Net Framework. Apps from SDK version X can run on cluster version Y where Y >=X. So, we get latest (Y) version of Dlls A always on cluster’s platform.\r\n\r\nProblem:\r\nThere are classes in sdk dlls like SDK_A.dll which inherit from types in A.dll. So, before even Main method is called, A.dll is searched and found in GAC in .Net Framework. Since there is no GAC in coreclr, we get FileNotFoundException for A.dll in coreclr. \r\n\r\nWhat we have tried:\r\n1. We have tried adding AssemblyResolver to load these A.dll from Runtime folder. That does not help as exception is thrown before any code (Program’s Main) is executed.\r\n2. We have looked at `dotnet strore` but it looks more complicated than GAC and it seems it was not designed as cross platform GAC. For e.g. we can't ask users to run `dotnet publish` with specific `manifest.xml`. It breaks development and packaging workflow for many developers.\r\n\r\nWhat are the guidelines for library and platform writers to move there Dlls from GAC when transitioning form .Net Framework to CoreClr?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10486/comments",
    "author": "ashishnegi",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-06-10T22:37:09Z",
        "body": "Could you please tell us more about your platform so that we can understand the problem better:\r\n- Does the problem you are describing exist for the applications built using your platform as well; or is there something special about your SDK that makes it fundamentally different from applications?\r\n- Do applications built using your platform depend on just the runtime .dlls? How are you planning to distribute the runtime .dlls for .NET Core – NuGet packages or something else?\r\n\r\ncc @jeffschwMSFT "
      }
    ]
  },
  {
    "number": 10483,
    "title": "StringBuidler  support Offset(int length)",
    "created_at": "2018-06-09T08:20:03Z",
    "closed_at": "2020-01-31T04:23:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10483",
    "body": "New API:\r\n```C#\r\n//\r\npublic void Offset(int length){\r\n   if(length<0)\r\n   {\r\n       // throw........   \r\n   }\r\n   if(length>count){\r\n       // alloc more space\r\n   }else{ \r\n      // reset the offset\r\n       m_ChunkLength=length;\r\n   }\r\n}\r\n```\r\n\r\nUse:\r\n```C#\r\nStringBuilder builder = new StringBuilder();\r\nfor(int i=0;i<10;i+=1)\r\n{\r\n    builder.Append(array[i]);\r\n    builder.Append(',');\r\n}\r\nbuilder.Offset(builder.length-1);\r\nbuilder.Append(others);\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10483/comments",
    "author": "NMSAzulX",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-06-09T12:00:51Z",
        "body": "I don't understand... what's the purpose of this proposed method? Why can't Length be used in your example?"
      },
      {
        "user": "NMSAzulX",
        "created_at": "2018-06-10T04:05:31Z",
        "body": "“1，2，3，”\r\nI want to remove the latest ',' \r\n\r\nresult:\r\n“1，2，3”\r\n"
      },
      {
        "user": "jkotas",
        "created_at": "2018-06-10T04:09:54Z",
        "body": "Replace `builder.Offset(builder.length-1);` with `builder.Length=builder.Length-1` in your example. It will remove the latest ','."
      },
      {
        "user": "jkotas",
        "created_at": "2018-06-10T04:12:30Z",
        "body": "Another way to remove the latest character from StringBuilder is: `builder.Remove(builder.Length - 1, 1)`."
      },
      {
        "user": "NMSAzulX",
        "created_at": "2018-06-10T04:16:03Z",
        "body": " OK. Thank you~"
      }
    ]
  },
  {
    "number": 26422,
    "title": "Concurrent Bag Exception",
    "created_at": "2018-06-08T16:13:35Z",
    "closed_at": "2020-01-31T21:38:40Z",
    "labels": [
      "question",
      "area-Serialization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26422",
    "body": "Having issue using Concurrent Bag. \r\nSeeing below exception. Could you please suggest what should be done. I am new to concurrent bag collection\r\n\r\nInvalid Operation Exception :  You must implement a default accesor on System.Collections.ConcurrentBag because it inherits from Icollection\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26422/comments",
    "author": "beldebala",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-06-08T16:17:19Z",
        "body": "That exception doesn't sound like it's coming from ConcurrentBag.  It sounds more like you're trying to serialize a ConcurrentBag instance using XmlSerializer."
      },
      {
        "user": "beldebala",
        "created_at": "2018-06-08T16:26:14Z",
        "body": "I used Concurrent bag as an alternative to ImmutableList as it was not properly serialized during async logging. Would you suggest any other collection similar to Immutable list."
      },
      {
        "user": "huanwu",
        "created_at": "2018-06-08T22:22:13Z",
        "body": "@beldebala could you share the repro code?"
      },
      {
        "user": "Lxiamail",
        "created_at": "2018-06-28T18:48:59Z",
        "body": "@beldebala Closing it for now. Please let us know if you still have problem."
      }
    ]
  },
  {
    "number": 26382,
    "title": "Should we use TCPListener?",
    "created_at": "2018-06-05T07:38:44Z",
    "closed_at": "2020-01-31T21:35:19Z",
    "labels": [
      "question",
      "area-System.Net"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26382",
    "body": "I don't need the functionality of asp.net core kestrel. When I look at the code, it does not use TcpListener under the hood.\r\n\r\nI'm trying to understand why. Is TcpListener significantly worse in performance than Kestrel? I don't have a Hello World application so I'm not super interested in the \"throughput\" of thousands of RPS. I'm merely trying to reconcile that if I go the TcpListener route I don't have a huge amount of extra code being run to service the code.\r\n\r\nI'll ultimately be building a very simple HTTP 1.1 webserver. I'm responsible for the performance of that part, but if we subtract that cost from Kestrel should I net-net be in the ballpark of a pure Socket implementation?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26382/comments",
    "author": "roterdam",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2018-06-05T08:20:33Z",
        "body": "Performance is hard. Start with a benchmark of what you think you want to measure and then measure comparisons based on that. Kestrel is already highly optimized so the implementation of the socket transport goes out of its way to preserve that. We didn’t even consider using layers of abstractions on top of sockets becuse there’s nothing to gain from kestrel’s point of view. Here are some of the things kestrel does with SocketAsyncEventArgs:\r\n- Avoids per read/write allocations on the socket by using a custom awaitable.\r\n- Uses pre/pinned buffers and pooled memory to avoid heap fragmentation\r\n\r\nThere are also more obscure thing that’s are harder to get right like threading. \r\n\r\nIt may not matter for your use case but if you’re asking from a theoretical POV, you can do a lot better if you use the low level socket APIs than if you use TcpListener.\r\n\r\nPS: NetworkStream was optimized in .Net Core and it’s possible to use it in a way that avoids allocations but it’s atypical. "
      },
      {
        "user": "roterdam",
        "created_at": "2018-06-05T09:15:22Z",
        "body": "Thanks @davidfowl. I was intending to the do the latter in your two mentioned points, but I'm not sure what a custom awaitable is.\r\n\r\nThe problem with going with Kestrel is that my application is an embedded database app with a simple query fe that needs a webserver. Adding Kestrel drags in a lot of stuff is increasing my app size not to mention dll count. None of this truly matters, but if I'm 80% of within Kestrel that would be success for me.\r\n\r\nI will benchmark. But thanks for answering that it's for performance reasons and Kestrel does more optimizations.\r\n\r\nI'll leave this open for a few more hours and then if no one else has a comment will close it."
      },
      {
        "user": "davidfowl",
        "created_at": "2018-06-05T09:26:14Z",
        "body": "Yea assuming you’re using a self contained application, there are a large number of dlls to use asp.net core. Most of them are small but I dunno what metric you care about more (number or size)."
      },
      {
        "user": "davidsh",
        "created_at": "2018-06-05T14:23:10Z",
        "body": ">We didn’t even consider using layers of abstractions on top of sockets becuse there’s nothing to gain from kestrel’s point of view. \r\n\r\nTcpListener is meant as an \"easy-to-use\" / \"convenience\" class similar to TcpClient.  For best performance, using Sockets directly is recommended.  And for the highest performance with Sockets, using the API with SocketAsyncEventArgs is the best way to go."
      },
      {
        "user": "karelz",
        "created_at": "2018-06-05T21:20:20Z",
        "body": "Seems to be answered, closing."
      },
      {
        "user": "roterdam",
        "created_at": "2018-06-22T08:09:23Z",
        "body": "@davidsh Thanks, the api doesn't look very intimidating so I'll use that. Do I now have to worry about TCP keep alive? Like if I don't receive any data for 2 minutes I shutdown the connection or does the OS take care of it?"
      },
      {
        "user": "davidsh",
        "created_at": "2018-06-22T14:36:26Z",
        "body": "If you use the Socket APIs directly, then you need to set KeepAlive.  By default it is not set."
      }
    ]
  },
  {
    "number": 26359,
    "title": "Not able to re-assign an Empty Span to a ReadOnlySpan over stack space",
    "created_at": "2018-06-01T23:04:38Z",
    "closed_at": "2020-01-31T21:33:25Z",
    "labels": [
      "question",
      "area-System.Memory"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26359",
    "body": "``` C#\r\nSpan<char> a = stackalloc char[100];\r\nReadOnlySpan<char> path =  a.Slice(0);\r\nReadOnlySpan<char> test = ReadOnlySpan<char>.Empty;\r\ntest = path\r\n```\r\n\r\nthis piece of code is giving me an error \r\n```\r\nCannot use local 'path' in this context because it may expose referenced variables outside of their declaration scope.\r\n```\r\n\r\nis it desired behavior ?\r\n\r\n\r\ncc @danmosemsft @ahsonkhan ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26359/comments",
    "author": "Anipik",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-06-02T00:35:34Z",
        "body": "The error is valid based on the compiler's current rules. By initializing test with Empty, you're creating a span that's allowed to be returned out of this method. As path is not, assigning path to test would violate the that constraint.\r\n\r\nIf you have concerns with the behavior, you can open an issue in the Roslyn repo. I believe in this particular case, if you instead initialize temp to stackalloc char[0], the error should go away."
      }
    ]
  },
  {
    "number": 26346,
    "title": "Memory leaks using HttpClient in ASP.NET Core 2.1",
    "created_at": "2018-06-01T15:54:44Z",
    "closed_at": "2020-01-31T21:32:23Z",
    "labels": [
      "question",
      "tenet-performance"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26346",
    "body": "I'm using .NET Core 2.1 SDK (v2.1.300) at Windows.\r\n\r\nSteps to reproduce:\r\n\r\n```\r\nmkdir MCVE\r\ncd MCVE\r\ndotnet new web\r\n```\r\n\r\nIn Program.cs:\r\n\r\n```c#\r\nusing System;\r\nusing System.Net.Http;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\n\r\nnamespace MCVE\r\n{\r\n    public class Program\r\n    {\r\n        static HttpClientHandler handler = new HttpClientHandler();\r\n\r\n        private static HttpClient client = new HttpClient(handler);\r\n\r\n        public static async Task TestMethod()\r\n        {\r\n            try\r\n            {\r\n                using (var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Get, \"some_url\")))\r\n                {\r\n                }\r\n            }\r\n            catch\r\n            {\r\n            }\r\n        }\r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            for (int i = 0; i < 1000000; i++)\r\n            {\r\n                Task.Delay(10).Wait();\r\n                TestMethod();\r\n            }\r\n\t\t\t\r\n\t    Console.ReadLine();\r\n\t\t\t\r\n            CreateWebHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>();\r\n    }\r\n}\r\n```\r\n\r\nHere is my MCVE.csproj:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen I run this app, Process Memory in Diagnostic tools shows that memory usage is slow but constantly increasing.  I ran into this problem with core 2.0 too.\r\nThe same code in console app (core 2.0 or core 2.1) works without memory leaks.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26346/comments",
    "author": "xneg",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-06-01T16:06:10Z",
        "body": "Are you sure it is memory leak and not just GC not kicking in?\r\nDid you use some memory profiler to find out where the memory leak originates?"
      },
      {
        "user": "xneg",
        "created_at": "2018-06-04T07:29:31Z",
        "body": "Sorry for false alarm. Came back to workplace and can't reproduce it. No memory usage growing."
      }
    ]
  },
  {
    "number": 26332,
    "title": "Missing dlls in bin/pkg/netcoreapp/runtime for BinPlaceNETCoreAppPackage=true",
    "created_at": "2018-05-31T13:56:07Z",
    "closed_at": "2020-01-31T21:31:34Z",
    "labels": [
      "question",
      "area-System.Memory"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26332",
    "body": "Hello.\r\n\r\nLooks like `bin/runtime` and `bin/pkg/netcoreapp/runtime` contain different sets of dlls on `release/2.0.0` branch for `BinPlaceNETCoreAppPackage=true`. For example, System.Memory.dll is missing in `bin/pkg/netcoreapp/runtime` but exists in `bin/runtime`. On `master` branch System.Memory.dll exists in both folders.\r\n\r\nCould you, please, clarify if this is correct behavior or this should be fixed?\r\n\r\ncc @alpencolt @Dmitri-Botcharnikov ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26332/comments",
    "author": "gbalykov",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-05-31T15:54:00Z",
        "body": "@joperezr @weshaggard do you know if this is specific to System.Memory?"
      },
      {
        "user": "gbalykov",
        "created_at": "2018-05-31T16:06:39Z",
        "body": "@karelz, these dlls also exist only in `bin/runtime`:\r\n\r\nOSExtensions.dll\r\nSOS.NETCore.dll\r\nSystem.CodeDom.dll\r\nSystem.ComponentModel.Composition.dll\r\nSystem.Composition.AttributedModel.dll\r\nSystem.Composition.Convention.dll\r\nSystem.Composition.Hosting.dll\r\nSystem.Composition.Runtime.dll\r\nSystem.Composition.TypedParts.dll\r\nSystem.Configuration.ConfigurationManager.dll\r\nSystem.Data.DataSetExtensions.dll\r\nSystem.Data.Odbc.dll\r\nSystem.Data.SqlClient.dll\r\nSystem.Diagnostics.EventLog.dll\r\nSystem.Diagnostics.PerformanceCounter.dll\r\nSystem.DirectoryServices.AccountManagement.dll\r\nSystem.DirectoryServices.dll\r\nSystem.DirectoryServices.Protocols.dll\r\nSystem.Drawing.Common.dll\r\nSystem.IO.Packaging.dll\r\nSystem.IO.Pipelines.dll\r\nSystem.IO.Ports.dll\r\nSystem.Json.dll\r\nSystem.Management.dll\r\nSystem.Net.Http.WinHttpHandler.dll\r\nSystem.Net.WebSockets.WebSocketProtocol.dll\r\nSystem.Reflection.Context.dll\r\nSystem.Runtime.Caching.dll\r\nSystem.Runtime.CompilerServices.Unsafe.dll\r\nSystem.Runtime.Intrinsics.Experimental.dll\r\nSystem.Security.Cryptography.Pkcs.dll\r\nSystem.Security.Cryptography.ProtectedData.dll\r\nSystem.Security.Cryptography.Xml.dll\r\nSystem.Security.Permissions.dll\r\nSystem.ServiceModel.Syndication.dll\r\nSystem.ServiceProcess.ServiceController.dll\r\nSystem.Text.Encoding.CodePages.dll\r\nSystem.Text.Encodings.Web.dll\r\nSystem.Threading.AccessControl.dll\r\nSystem.Threading.Channels.dll"
      },
      {
        "user": "weshaggard",
        "created_at": "2018-06-06T18:11:06Z",
        "body": ">Could you, please, clarify if this is correct behavior or this should be fixed?\r\n\r\nThat is the correct behavior. With BinPlaceNETCoreAppPackage=true it will create a subset of what we build in corefx under bin/pkg/netcoreapp/runtime. That subset maps directly to what is part of Microsoft.NETCore.App (aka the shared framework). In 2.0 System.Memory was not part of it but in 2.1 is is which is why you see the difference. "
      },
      {
        "user": "joperezr",
        "created_at": "2018-06-06T23:16:35Z",
        "body": "As @weshaggard said, basically bin/runtime will contain everything we build in a vertical that is not a reference assembly, or test project. Not all of that goes into the shared framework, which is why we have the other folder (bin/pkg/netcoreapp/runtime) which does have only the shared framework."
      },
      {
        "user": "gbalykov",
        "created_at": "2018-06-07T09:12:47Z",
        "body": "@weshaggard @joperezr thank you for your comments!"
      }
    ]
  },
  {
    "number": 26310,
    "title": "Reflection is missing type information for ByRef generic arguments",
    "created_at": "2018-05-30T10:59:22Z",
    "closed_at": "2020-01-31T21:29:40Z",
    "labels": [
      "question",
      "area-System.Reflection"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26310",
    "body": "`IsGenericType` for generic byRef arugments returns false. For both .NET and .NET Core. Because of that, it's impossible to generic arguments for such types.\r\n\r\n```cs\r\npublic class MyClass<T1, T2>{}\r\n\r\npublic class GenericByRef\r\n{\r\n    public void TheMethod(ref MyClass<int, short> _) { }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var byRefGenericType = typeof(GenericByRef).GetMethod(nameof(GenericByRef.TheMethod)).GetParameters().Single().ParameterType;\r\n        \r\n        Console.WriteLine($\"FullName = {byRefGenericType.FullName}\");\r\n        Console.WriteLine($\"Name = {byRefGenericType.Name}\");\r\n        Console.WriteLine($\"IsGenericType = {byRefGenericType.IsGenericType}\");\r\n        Console.WriteLine($\"UnderlyingSystemType.IsGenericType = {byRefGenericType.UnderlyingSystemType.IsGenericType}\");\r\n    }\r\n}\r\n```\r\n\r\nPrints:\r\n\r\n```log\r\nFullName = Tests.MyClass`2[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int16, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]&\r\nName = MyClass`2&\r\nIsGenericType = False\r\nUnderlyingSystemType.IsGenericType = False\r\n```\r\n\r\n@jkotas @VSadov do you have any idea how can I get the generic arguments in that case?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26310/comments",
    "author": "adamsitnik",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-05-30T11:57:59Z",
        "body": "Try:\r\n\r\n```\r\n        Console.WriteLine($\"GetElementType() = {byRefGenericType.GetElementType()}\");\r\n        Console.WriteLine($\"GetElementType().IsGenericType = {byRefGenericType.GetElementType().IsGenericType}\");\r\n```"
      },
      {
        "user": "adamsitnik",
        "created_at": "2018-05-30T12:15:47Z",
        "body": "@jkotas it works, big thanks for help!"
      }
    ]
  },
  {
    "number": 26283,
    "title": "System.Data.Common nuget does not reflect github code",
    "created_at": "2018-05-25T15:25:04Z",
    "closed_at": "2020-01-31T21:27:41Z",
    "labels": [
      "question",
      "area-System.Data"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26283",
    "body": "The latests nuget for System.Data.Common does not includes the latests code. For example it does not include the DbProviderFactories impl. Could you provide a link to download a more updated nuget?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26283/comments",
    "author": "orellabac",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-05-25T19:59:48Z",
        "body": "I believe that System.Data.Common stopped being published as standalone package.\r\nTo use the latest, please target .NET Core 2.1.\r\n\r\ncc @weshaggard "
      },
      {
        "user": "AfsanehR-zz",
        "created_at": "2018-06-19T18:10:59Z",
        "body": "@orellabac Did @karelz suggestion resolve the issue? "
      },
      {
        "user": "karelz",
        "created_at": "2018-06-19T18:48:03Z",
        "body": "No response in more than 1w. Closing. Feel free to reopen if there is ore information."
      }
    ]
  },
  {
    "number": 26252,
    "title": "How to port remoting code",
    "created_at": "2018-05-23T06:09:26Z",
    "closed_at": "2020-01-31T21:25:00Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26252",
    "body": "[EDIT] By @karelz - original question from title:\r\nhi guys, i am going to port my remoting code for tcp communication in dot net core. Is web sockets only the alternative?\r\nPlease provide your suggestion.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26252/comments",
    "author": "sanjayicy",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-05-23T15:48:42Z",
        "body": "What exactly do you need to port?\r\nWhat do you mean by \"remoting code for tcp communication\"? Are you using remoting APIs on .NET Framework? Or something else?\r\n\r\nIn general: Remoting is not available on .NET Core. There are external libraries with similar functionality - see comments in dotnet/runtime#21112"
      },
      {
        "user": "sanjayicy",
        "created_at": "2018-05-24T10:53:25Z",
        "body": "Thanks @karelz  , the issue got resolved now after importing the external libraries."
      }
    ]
  },
  {
    "number": 26106,
    "title": "MemoryStream CopyTo method does not work over REST if the file size is more (approx. >100KB)",
    "created_at": "2018-05-08T07:03:28Z",
    "closed_at": "2020-01-31T21:12:35Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26106",
    "body": "Is this a Bug or Feature request?:\r\nThis is bug observed while writing REST service for downloading file to temporary location over server machine. The same code works fine on client side.\r\n\r\nSteps to reproduce or link to a repro project:\r\nClient code: Client.cs\r\n```c#\r\n var FirmwareFilePath = \"D:\\\\baccfg.dll\";\r\n using (var memoryStream = new System.IO.MemoryStream())\r\n            {\r\n                using (var fileStream = new System.IO.FileStream(\r\n                    FirmwareFilePath,\r\n                    System.IO.FileMode.Open,\r\n                    System.IO.FileAccess.Read))\r\n                {\r\n                    fileStream.CopyTo(memoryStream);\r\n                }\r\n                memoryStream.Position = 0;\r\n          fwUpdateResult = networkService.PostFirmwareUpdate( RequestParam.Default, memoryStream);\r\n }\r\n```\r\nServer code: Server.cs\r\n```c#\r\nPostFirmwareUpdate(IRequestParam requestParam, Stream firmwareFileStream))\r\n        {\r\n            var tempFilePath = System.IO.Path.GetTempFileName();                                                                 \r\n            using (var memoryStream = new System.IO.MemoryStream())\r\n            {\r\n                firmwareFileStream.CopyTo(memoryStream); \r\n//Control is not coming out of this CopyTo process and timeout is happening\r\n                  memoryStream.Position = 0;\r\n                using (var fileStream = new System.IO.FileStream(\r\n                    tempFilePath,\r\n                    System.IO.FileMode.Create,\r\n                    System.IO.FileAccess.Write))\r\n                {\r\n                    memoryStream.WriteTo(fileStream);\r\n                }\r\n            }              \r\n}\r\n```\r\nDescription of the problem:\r\nFor .xml file size of 2KB, the code works fine and temp file is getting created at server.\r\nBut if I use file with extension like .dll, .7z with file size more than 100-200 KB, the code stucks in CopyTo function call.\r\n\r\n[EDIT] Format code by @karelz",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26106/comments",
    "author": "Kalyan1989",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-05-08T11:06:25Z",
        "body": "Your Server.cs code isn't using MemoryStream.CopyTo... it's using firmwareFileStream.CopyTo, and firmwareFileStream is typed as `Stream`.  What is the concrete type of that stream being passed in?  Where does it come from, i.e. who's calling PostFirmwareUpdate and with what argument?  It simply sounds like it's never hitting EOF, such that the read on the stream as part of the CopyTo never completes, so rather than this being a bug in CopyTo, it sounds like a problem in how the app is constructed with regards to whatever that stream is."
      },
      {
        "user": "Kalyan1989",
        "created_at": "2018-05-08T11:53:42Z",
        "body": "@stephentoub  This is my client code from where I am calling server code: \r\n```c#\r\nusing (var memoryStream = new System.IO.MemoryStream())\r\n            {\r\n                using (var fileStream = new System.IO.FileStream(\r\n                    FirmwareFilePath,\r\n                    System.IO.FileMode.Open,\r\n                    System.IO.FileAccess.Read))\r\n                {\r\n                    fileStream.CopyTo(memoryStream);\r\n                }\r\n                memoryStream.Position = 0;\r\n                fwUpdateResult = networkService.PostFirmwareUpdate(\r\n                    RequestParam.Default, memoryStream,\r\n                    new FirmwareUpdateStub());\r\n}\r\n```\r\n\r\n[EDIT] Format code by @karelz"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-05-08T11:57:18Z",
        "body": "@Kalyan1989, the signatures of PostFirmwareUpdate don't match.  What is networkService here?  Presumably it's some kind of proxy that's been generated to enable remote invocation of a method in your server?  I'm not seeing a bug here yet in coreclr/corefx."
      },
      {
        "user": "Kalyan1989",
        "created_at": "2018-05-23T09:52:00Z",
        "body": "The problem was in my Gateway and synchronization which I was able to resolve. No issue from Core library.\r\nPlease close the issue."
      }
    ]
  },
  {
    "number": 10265,
    "title": "Should FEATURE_APPX be enabled in coreclr builds?",
    "created_at": "2018-04-28T12:57:27Z",
    "closed_at": "2020-01-31T04:08:09Z",
    "labels": [
      "question",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10265",
    "body": "`AppDomain.Flags` is behind `#if FEATURE_APPX`\r\n\r\n```csharp\r\nprivate static APPX_FLAGS Flags\r\n{\r\n    get\r\n    {\r\n        if (s_flags == 0)\r\n            s_flags = nGetAppXFlags();\r\n\r\n        Debug.Assert(s_flags != 0);\r\n        return s_flags;\r\n    }\r\n}\r\n```\r\nHowever its output in a crossgen build?\r\n```asm\r\n; Assembly listing for method AppDomain:get_Flags():int\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;  V01 cse0         [V01,T00] ( 10,  8.50)    long  ->  rsi        \r\n;\r\n; Lcl frame size = 40\r\nG_M62617_IG01:\r\n       push     rbp\r\n       push     rsi\r\n       sub      rsp, 40\r\n       lea      rbp, [rsp+30H]\r\nG_M62617_IG02:\r\n       mov      rcx, qword ptr [(reloc)]\r\n       call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE_NOCTOR\r\n       mov      rsi, rax\r\n       cmp      dword ptr [rsi+07F0H], 0\r\n       jne      SHORT G_M62617_IG03\r\n       call     AppDomain:nGetAppXFlags():int\r\n       mov      dword ptr [rsi+07F0H], eax\r\nG_M62617_IG03:\r\n       mov      eax, dword ptr [rsi+07F0H]\r\nG_M62617_IG04:\r\n       lea      rsp, [rbp-08H]\r\n       pop      rsi\r\n       pop      rbp\r\n       ret      \r\n; Total bytes of code 59, prolog size 11 for method AppDomain:get_Flags():int\r\n```\r\n/cc @jkotas @danmosemsft ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10265/comments",
    "author": "benaadams",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-04-28T13:15:50Z",
        "body": "APPX = UAP = UWP = Windows Store apps\r\n\r\nYes, it is expected to be enabled. We use same CoreCLR build for both Win32 and UAP. If we wanted to disable it for Win32, we would need to start building a new CoreCLR build flavor for UAP."
      },
      {
        "user": "jkotas",
        "created_at": "2018-04-28T13:21:57Z",
        "body": "If you are asking because of it adds extra stuff to CultureInfo for everybody, I think it should be possible to structure that method differently (do the UAP stuff last, not first - it is expensive anyway)."
      },
      {
        "user": "benaadams",
        "created_at": "2018-04-28T13:35:41Z",
        "body": "Ah, it was showing up in traces, mainly thought it was odd rather than problematic"
      }
    ]
  },
  {
    "number": 26016,
    "title": "Supply the Extended Attributes via CreateFile/CreateFile2 instead of NTCreateFile",
    "created_at": "2018-04-27T21:10:53Z",
    "closed_at": "2020-01-31T21:05:07Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26016",
    "body": "For SqlFileStream to work we need acquire and supply two pieces of information:\r\n- Path to the destination file: This can be acquired using PathName method, bear in mind this is not a UNC path to the physical file system on the server. The path is just a bogus path that has meaning only in the context of this transaction which SQL Server can use to map to the real file in the file system.\r\n- Transaction Context Token: Secondly, we need a token that identifies the NTFS file system transaction that SQL Server initiated behind the scenes, which we obtain with the `GET_FILESTREAM_TRANSACTION_CONTEXT` function.\r\n\r\nThis transaction context can be supplied via the Extended Attribute Buffer (eaBuffer) argument in case of `NTCreateFile`. I couldn't find a way to do the same with `CreateFile/CreateFile2`, hence why I used NTCreateFile. \r\n**If there is way to do the same with CreateFile/CreateFile2 it would be more preferable.**\r\n\r\nFor more information refer to : dotnet/runtime#25921 dotnet/SqlClient#15 \r\n\r\ncc @JeremyKuhne ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26016/comments",
    "author": "keeratsingh",
    "comments": [
      {
        "user": "JeremyKuhne",
        "created_at": "2018-09-28T20:40:51Z",
        "body": "Afaik, there is no way to do this without hitting Nt/Zw APIs (such as `ZwSetEaFile`). In theory it could be added to `SetFileInformationByHandle` in the future by Windows to allow access.\r\n\r\nIdeally we'd get SQL to use another (or additional) mechanism to store the transaction context, such as alternate data streams, which can be used without hitting NT APIs."
      }
    ]
  },
  {
    "number": 10245,
    "title": "ICLRRuntimeHost2，is it multithread  safe？",
    "created_at": "2018-04-26T13:03:47Z",
    "closed_at": "2020-01-31T04:06:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10245",
    "body": "ICLRRuntimeHost2，is it multithread  safe？\r\nthank you",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10245/comments",
    "author": "daodol",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2018-04-26T17:52:15Z",
        "body": "@jkotas Can you redirect or answer?"
      },
      {
        "user": "jkotas",
        "created_at": "2018-04-26T18:38:39Z",
        "body": "cc @jeffschwMSFT \r\n\r\nSome of the methods are (like CreateDelegate), some of the methods are not (like CreateAppDomainWithManager)."
      },
      {
        "user": "daodol",
        "created_at": "2018-04-27T12:08:56Z",
        "body": "ok,thank you"
      }
    ]
  },
  {
    "number": 25883,
    "title": ".Net Core Process.Start on Linux",
    "created_at": "2018-04-13T07:22:02Z",
    "closed_at": "2020-01-31T20:53:12Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Process",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25883",
    "body": "I am facing the following issue when running my .Net Core 2.0 application on Linux as a SCD.\r\n\r\nI am attempting to start another .Net Core project (Console Application) though the Aspnet Core project. \r\nThe exception below is thrown when I call `Start()`.\r\nThe permissions on the file and folders have been set to `777` but still no luck.\r\n\r\nException:\r\n```\r\nSystem.ComponentModel.Win32Exception (0x80004005): Permission denied\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at Ombi.Schedule.Jobs.Ombi.OmbiAutomaticUpdater.<Update>d__18.MoveNext() in C:\\projects\\requestplex\\src\\Ombi.Schedule\\Jobs\\Ombi\\OmbiAutomaticUpdater.cs:line 218\r\n```\r\n\r\nCode to reproduce:\r\n\r\n```\r\nvar updaterFile = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location),\r\n     \"TempUpdate\", $\"Ombi.Updater\");\r\n\r\nvar start = new ProcessStartInfo\r\n{\r\n    UseShellExecute = false,\r\n    CreateNoWindow = true,\r\n    FileName = updaterFile,\r\n    Arguments = GetArgs(settings), // This just gets some command line arguments for the app i am attempting to launch\r\n    WorkingDirectory = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), \"TempUpdate\"),\r\n};\r\n\r\nusing (var proc = new Process { StartInfo = start })\r\n{\r\n    proc.Start();\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25883/comments",
    "author": "tidusjar",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-04-13T14:59:13Z",
        "body": "AFAIK you need to run `dotnet run <updaterFile>` like you do from commandline. Linux cannot execute .NET libraries directly."
      },
      {
        "user": "stephentoub",
        "created_at": "2018-04-13T15:06:06Z",
        "body": "@tidusjar said this was a self-contained deployment, so presumably the target is the executable produced by dotnet publish."
      },
      {
        "user": "karelz",
        "created_at": "2018-04-13T15:13:02Z",
        "body": "Oh, I wan't able to parse SCD. Acronyms are dangerous ::)\r\n\r\nIn that case: Are you able to run other apps? (non-.NET) Are you able to run the console app from another console app (not ASP.NET)?\r\nWhich version does it fail on? .NET Core 2.0 or 2.1 Preview 2? (i.e. is it a regression?)"
      },
      {
        "user": "tidusjar",
        "created_at": "2018-04-13T16:57:20Z",
        "body": "Sorry I'll avoid the acronyms! \r\n\r\nI'll try other apps and the console suggestion and get back to you. \r\n\r\nI originally tried on .net core 1.1 and I've never been able to get this working. So I wouldn't say it's a regression. "
      },
      {
        "user": "wfurt",
        "created_at": "2018-05-30T18:09:30Z",
        "body": "did you get it working @tidusjar?  Note that if you have self-contained deployment you need to execute the native binary. If this is still problem for you you can craft simple console app with same Process.Start code and run it under \r\nstrace -f -t -e trace=process dotnet run mytestapp.dll \r\n"
      },
      {
        "user": "tidusjar",
        "created_at": "2018-05-30T18:21:57Z",
        "body": "Apologies I've not had time recently. \r\n\r\nI did make a proof of concept where it was a plain .bet core console app launching a process on Linux and it worked so It must be something I am doing. \r\n\r\nI'll close this since it doesn't seem to a corefx issue "
      },
      {
        "user": "wfurt",
        "created_at": "2018-05-30T18:26:52Z",
        "body": "good to know. If you still have troubles from within your app, you can still attach by adding '-p <pid>' to strace command above.  "
      }
    ]
  },
  {
    "number": 10065,
    "title": "[Arm64] IsIPInMarkedJitHelper -- Help ",
    "created_at": "2018-03-30T00:47:17Z",
    "closed_at": "2020-01-31T03:54:59Z",
    "labels": [
      "question",
      "arch-arm64",
      "area-VM-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10065",
    "body": "@janvorli I need help understnding the intent of IsIPInMarkedJitHelper\r\n\r\nBased on review of comments, it seems this is used to mark a subset of JIT helpers as being in managed code\r\n\r\nFor `arm64` it currently includes\r\n```\r\n    CHECK_RANGE(JIT_MemSet)\r\n    CHECK_RANGE(JIT_MemCpy)\r\n    CHECK_RANGE(JIT_WriteBarrier)\r\n    CHECK_RANGE(JIT_CheckedWriteBarrier)\r\n```\r\n\r\nShouldn't it also include \r\n```\r\n    CHECK_RANGE(JIT_ByRefWriteBarrier)\r\n    CHECK_RANGE(JIT_Stelem_Ref)\r\n    CHECK_RANGE(JIT_Stelem_Ref_NotExactMatch)\r\n    CHECK_RANGE(JIT_Stelem_DoWrite)\r\n    CHECK_RANGE(JIT_Stelem_Ref)\r\n```\r\n\r\nI am assuming the stubs are not needed, because they are generated by the JIT and treated as managed code.  It would be really nice to understand the classification rules, constraints and requirements.\r\n\r\nAlso based on my read, these functions will effectively get retried if a signal occurs, signal will return to the caller, to call the helper again.  So these functions have functional constraints as well to not modify the call arguments.  Is my understanding here correct?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10065/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2018-03-30T00:58:43Z",
        "body": "@jkotas"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-03-30T01:47:55Z",
        "body": "Assuming my retry assumption above is correct.\r\n\r\n`JIT_MemSet` and `JIT_MemCpy` are modifying their input arguments, so if they are retried, random corruption could occur.\r\n\r\n`JIT_Stelem_*` looks like it only destroys input arguments while throwing.  Still would need to fix this.\r\n\r\n`JIT_*Barrier*` code also modifies input registers, and would need rework to allow retry."
      },
      {
        "user": "AndyAyersMS",
        "created_at": "2018-03-30T02:01:14Z",
        "body": "I think the aim of `IsIPInMarkedJitHelper` is to identify ranges of native code in jit helpers where there are implicit null checks, so AVs in these ranges end up reported as managed null reference exceptions originating in the calling frame (which should be managed code).\r\n\r\nThe `stelem` helpers look like they do explicit null checks. The byref write barrier is probably never supposed to AV."
      },
      {
        "user": "jkotas",
        "created_at": "2018-03-30T02:02:12Z",
        "body": "IsIPInMarkedJitHelper is used to mark ranges of assembly code helper where we expect null references to occur and be handled.\r\n\r\nWhen IsIPInMarkedJitHelper returns true, we do not retry execution of the helper. We just move the IP and SP to the callsite of the helper for the purpose of exception handling. We do not ever resume execution at the callsite."
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-03-30T02:59:02Z",
        "body": "Thanks"
      }
    ]
  },
  {
    "number": 25639,
    "title": "System.Security.Cryptography.Pkcs '1.2.840.113549.1.1.5' is not a known hash algorithm.",
    "created_at": "2018-03-27T13:12:38Z",
    "closed_at": "2020-01-31T20:33:37Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25639",
    "body": "i'm trying to compute a cms SHA1RSA using the pre release version(4.5.0-preview1-26216-02) of System.Security.Cryptography.Pkcs.\r\n\r\nOid.FromFriendlyName(\"SHA1RSA\",OidGroup.SignatureAlgorithm) returns the corect digest algorithem, but upon calling encode, i get the exception that i,m not using any known hash algorithm.\r\n\r\nIs there any short term plan to incorporate it?\r\n\r\nEncoding snippet:----------\r\nprotected byte[] GenerateSignature(byte[] fileContent)\r\n        {\r\n            CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n            SignedCms signedCms = new SignedCms(new ContentInfo(fileContent), false);\r\n            signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n            signer.DigestAlgorithm = Oid.FromFriendlyName(\"SHA1RSA\",OidGroup.SignatureAlgorithm);\r\n            signedCms.ComputeSignature(signer, false);\r\n            var signature = signedCms.Encode();\r\n            return signature;\r\n        }",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25639/comments",
    "author": "hozjanmarko",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-03-27T13:23:29Z",
        "body": "SHA1RSA is a signature algorithm, not a hash algorithm.  The correct value to use is the SHA-1 OID (1.3.14.3.2.26).  (That results in using SHA1RSA if the signer key is an RSA key, but the API here expects the parts separately)"
      },
      {
        "user": "hozjanmarko",
        "created_at": "2018-03-30T08:06:11Z",
        "body": "It seems i have a long way to go :)\r\nCould you please provide me with some hints how a could generate a valid signature? I have to consume a \"wcf\" service that expects this \"SHA1RSA\" signature(rather than using ws* secure). They provided me with the code snippet that i posted in my original post."
      },
      {
        "user": "bartonjs",
        "created_at": "2018-03-30T13:20:22Z",
        "body": "```c#\r\nprotected byte[] GenerateSignature(byte[] fileContent)\r\n{\r\n    CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n    SignedCms signedCms = new SignedCms(new ContentInfo(fileContent), false);\r\n    signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n\r\n    // instead of\r\n    //signer.DigestAlgorithm = Oid.FromFriendlyName(\"SHA1RSA\",OidGroup.SignatureAlgorithm);\r\n    // use\r\n    signer.DigestAlgorithm = Oid.FromFriendlyName(\"SHA1\", OidGroup.HashAlgorithm);\r\n    // or\r\n    //signer.DigestAlgorithm = new Oid(\"1.3.14.3.2.26\");\r\n\r\n    signedCms.ComputeSignature(signer, false);\r\n    var signature = signedCms.Encode();\r\n    return signature;\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 25542,
    "title": "Microsoft.Tpl.Dataflow does not contain assembly reference for .NET version 4",
    "created_at": "2018-03-20T21:21:39Z",
    "closed_at": "2020-01-31T20:25:06Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25542",
    "body": "Hi, I am in need of a version of dataflow that targets .net version 4. This is the error I get when I try to install Microsoft.Tpl.Dataflow or System.Threading.Tasks.Dataflow.\r\n``` Could not install package 'Microsoft.Tpl.Dataflow 4.5.8'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.0', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25542/comments",
    "author": "oneilj",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-03-21T16:41:42Z",
        "body": "@weshaggard any context?"
      },
      {
        "user": "weshaggard",
        "created_at": "2018-03-21T19:01:34Z",
        "body": "It is a feature request for the package. The owner should decide if they can support it there and wants to add the configurations. "
      },
      {
        "user": "kouvel",
        "created_at": "2018-03-21T19:14:50Z",
        "body": "@AlexGhiondea "
      },
      {
        "user": "tarekgh",
        "created_at": "2018-03-27T23:55:52Z",
        "body": "@oneilj  can you use System.Threading.Tasks.Dataflow package and target at least 4.5? this is the min version of the supported framework."
      },
      {
        "user": "oneilj",
        "created_at": "2018-03-28T14:45:20Z",
        "body": "Yeah, that's what i ended up doing"
      }
    ]
  },
  {
    "number": 25523,
    "title": "HttpClient design and multiple proxies",
    "created_at": "2018-03-19T21:05:29Z",
    "closed_at": "2020-01-31T20:23:46Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25523",
    "body": "Hi,\r\n\r\nMany articles I have read recommend to only use one instance of HttpClient in an application but I am not sure how to use this class in the following scenario:\r\n\r\n- Server App (ASP.NET Core)\r\n- Heavy usage of HttpClient for outgoing requests (Http dependencies)\r\n- A different proxy has to be used for each outgoing request (round robin proxy with thousands of entries) \r\n\r\nShould I have one instance of HttpClient per proxy that will be used (meaning thousands of HttpClient-s allocated)? Or is it better in this scenario to use a different HttpClient instance for each request?\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25523/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-03-19T21:34:04Z",
        "body": "> A different proxy has to be used for each outgoing request \r\n\r\nCan you just create your own IWebProxy that handles round-robining which proxy it gives back, and set that as the Proxy on the HttpClientHandler?"
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T11:02:58Z",
        "body": "Looks great, I will give it a try, thanks!"
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T17:13:56Z",
        "body": "Is there a way with this approach to find out which proxy address has been used for a particular http request? The only context I have in GetProxy is the destination Uri, it can be subclassed but I am not a huge fan of this approach."
      },
      {
        "user": "stephentoub",
        "created_at": "2018-03-20T17:33:45Z",
        "body": "> Is there a way with this approach to find out which proxy address has been used for a particular http request?\r\n\r\nI don't understand the question.  You would create your own IWebProxy implementation, and its GetProxy would be handed the Uri of the destination and it would decide what proxy Uri to hand back.  It's in your implementation's control.\r\n\r\n> The only context I have\r\n\r\nWhat other context are you looking for?  Do you mean you want the history of what proxy Uri has been used for what destination Uri?  That information is not tracked / stored by HttpClient, but your object can do so to whatever extent it wants."
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T18:20:34Z",
        "body": "I would like to know from an HttpResponseMessage which proxy Uri has been used by HttpClient to handle that request. I can track the Destination Uri => Proxy Uri relationship in my object and then use the response RequestMessage.RequestUri property but it will only work if the Uri object passed to GetProxy is the one in the RequestUri property.\r\n"
      },
      {
        "user": "karelz",
        "created_at": "2018-03-20T18:59:41Z",
        "body": "@lkfr is there any reason for you to believe it is not the same value / same object?"
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T19:49:51Z",
        "body": "No and it looks like it is the same object but I have no guarantee it will always work like this. In the future a different Uri object might be allocated internally by HttpClient for some reason and handed to GetProxy.\r\n\r\n\r\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-03-20T20:00:45Z",
        "body": "> I can track the Destination Uri => Proxy Uri relationship in my object and then use the response RequestMessage.RequestUri property but it will only work if the Uri object passed to GetProxy is the one in the RequestUri property.\r\n\r\nWhy does it require object identity?  Uri provides equality support via overriding Equals, GetHashCode, providing an operator== method, etc."
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T20:14:03Z",
        "body": "Requests with the same destination Uri value will not go through the same proxy so I need a way to distinguish them apart."
      },
      {
        "user": "stephentoub",
        "created_at": "2018-03-20T20:17:27Z",
        "body": "> Requests with the same destination Uri value will not go through the same proxy so I need a way to distinguish them apart.\r\n\r\nAnd you're trying to distinguish them by the actual Uri's object identity?  Even if the implementation guaranteed that the object identity of the Uri passed in wasn't perturbed, how is that going to work when you don't own that object, e.g. in the case of a redirect?\r\n\r\nRegardless, this interface isn't going to change.  At this point I think this is more of a design question for your app and it'd be best to try a site like stackoverflow or elsewhere to discuss your implementation.  I don't believe there's anything actionable here for corefx."
      },
      {
        "user": "ghost",
        "created_at": "2018-03-20T21:01:45Z",
        "body": "Which is why I thought it might be useful to be able to get more context in the IWebProxy implementation instead of just a Uri (like for instance an application-defined value passed upfront in the call to HttpClient). Nevermind ..."
      },
      {
        "user": "karelz",
        "created_at": "2018-03-20T21:27:43Z",
        "body": "Seems to be answered."
      }
    ]
  },
  {
    "number": 9939,
    "title": "Different behavior between windows and linux - Date to String or Razor Issue",
    "created_at": "2018-03-15T13:23:26Z",
    "closed_at": "2020-01-31T03:45:58Z",
    "labels": [
      "question",
      "area-System.Globalization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9939",
    "body": "Hello guys.\r\n\r\nI don't know if here is the right place, but I will put here.\r\n\r\nI had a web server on windows, I develop on windows, I sent my asp.net core web site to the windows server and everything work's fine. So I deploy now a linux server and for my surprise, the behavior of a little piece of code is not the same as windows.\r\n\r\nWhat is wrong? This code: \r\n\r\n`data-account-issue-date=\"@bill.IssueDate\"`\r\n\r\nthe behavior:\r\n\r\nWindows: data-account-issue-date=\"31/07/2017 00:00:00\"\r\nLinux: data-account-issue-date=\"31/07/17 00:00:00\"\r\n\r\nexpected:\r\n\r\nWindows: data-account-issue-date=\"31/07/2017 00:00:00\"\r\nLinux: data-account-issue-date=\"31/07/2017 00:00:00\"\r\n\r\nAlmost nothing, just the year :)\r\n \r\nBut, what more we have different between them, the end result should be the same on both.\r\n\r\nWorkaround:\r\n\r\n`data-account-issue-date='@bill.IssueDate.ToString(\"dd/MM/yyyy\")'`\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9939/comments",
    "author": "jrrcdev",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2018-03-15T17:11:15Z",
        "body": "@tarekgh Please change area if this isn't correct."
      },
      {
        "user": "tarekgh",
        "created_at": "2018-03-15T17:21:57Z",
        "body": "@jonatanrinckus this is by design for the framework. in general, the framework just pick the default date format from the system which depends on the default locale/culture of the user and the default date/time format pattern on that locale/culture. \r\n\r\nwe recommend if the app wants to ensure specific format will have to explicity specify this format to ensure consistent results across OS's.\r\n\r\nFeel free to send any more questions as needed. \r\n\r\nCC @krwq "
      },
      {
        "user": "jrrcdev",
        "created_at": "2018-03-16T21:49:09Z",
        "body": "For me, it's is wrong, the framework sould have the same final behavior, it can have differents behavior internally, but the final result should be the same or it will have some problem when using with another framework."
      },
      {
        "user": "jrrcdev",
        "created_at": "2018-03-16T21:51:00Z",
        "body": "It has a different result with the decimal.ToString(\"N\"), in windows is 1.00 and on linux is 1.000"
      },
      {
        "user": "tarekgh",
        "created_at": "2018-03-16T22:02:21Z",
        "body": "> For me, it's is wrong, the framework sould have the same final behavior\r\n\r\nWe have looked at that deeply before and decided it is better to get parity with the system you are running on. another thing you have to consider, globalization data can change anytime as it is tied to locales and countries so it is wrong to take a hard dependency on something that can change. our guidelines are if you need very specific behavior, then you need to specify this specific format explicitly. otherwise, you'll need to the invariant culture which is stable and we don't change it.\r\n"
      }
    ]
  },
  {
    "number": 25348,
    "title": "System.IO.File.Open should open the file with shared write access",
    "created_at": "2018-03-07T14:22:34Z",
    "closed_at": "2020-01-31T20:09:14Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25348",
    "body": "Hi, \r\n\r\nfollowing two lines to fail, because OpenRead does not share the write access, even if it does not need/use and configure it beforehand.\r\n\r\nvar stream1 = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);\r\nvar stream2 = File.OpenRead(filename);\r\n\r\nKind regards\r\n\r\np.s. I write here, because I do not know a better place. ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25348/comments",
    "author": "JackGrinningCat",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2018-03-07T14:55:53Z",
        "body": "The docs for File.OpenRead state:\r\n\"This method is equivalent to the FileStream(String, FileMode, FileAccess, FileShare) constructor overload with a FileMode value of Open, a FileAccess value of Read and a FileShare value of Read.\""
      },
      {
        "user": "danmoseley",
        "created_at": "2018-03-07T18:49:04Z",
        "body": "@JackGrinningCat to enlarge on that, your FileStream is indicating it wishes to write (FileAccess.ReadWrite) and will allow others to read (FileShare.Read). Your File.Open read is indicating it wishes to read (FileAccess.Read), and will allow others to read -- but not write (FileShare.Read). Because the file is already open for read/write, the operating system rejects the attempt to open another handle to the file with those conditions.\r\n\r\nPlease reactivate if this doesn't answer your question."
      }
    ]
  },
  {
    "number": 25311,
    "title": "Table Alias name not able to get from GetSchemaTable()",
    "created_at": "2018-03-05T10:24:01Z",
    "closed_at": "2020-01-31T20:06:24Z",
    "labels": [
      "question",
      "area-System.Data.SqlClient"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25311",
    "body": "Hi All,\r\nI have one task to get the table alias name from the sql Query. Im tried with GetSchemaTable().\r\n  string query = \"select A.id as ParentId,B.id as ChildId from Parent A,ChildB\";\r\n  sqlCnn.Open();\r\n  sqlCmd = new SqlCommand(query, sqlCnn);\r\n  sqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);\r\n  DataTable schemaTable = sqlReader.GetSchemaTable();\r\n\r\nIt's not returning the table alias but it return the Column alias. \r\nCan you please help me how to get the table alias name from executing query .\r\nPlease give me a solution it. \r\n\r\nThanks,\r\nEzra\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25311/comments",
    "author": "ezra2310",
    "comments": [
      {
        "user": "keeratsingh",
        "created_at": "2018-05-31T21:20:30Z",
        "body": "Hi @ezra2310 As per my understanding what you are saying is that `GetSchemaTable` returns the column alias `ParentId` for `BaseColumnName = CustomerID` and alias `ChildId` for `BaseColumnName = OrderID`, however it only returns the `BaseTableName=Customers` and `BaseTableName = Orders` respectively. Along with the `BaseTableName` you also need the Alias Table Name, which would be `A` and `B` respectively in the SQL statement below.\r\n\r\nIf my understanding above is correct, then currently there is no API call which returns that information.\r\nCould you kindly elaborate or give example as to what specific case would need the `Table Alias Name` instead of `BaseTableName` ?\r\n\r\n### SQL Statement\r\n```sql\r\n\"select A.CustomerID  ParentId,B.OrderID as ChildId from Customers A,Orders B\";\r\n```\r\n### GetSchemaTable Output\r\n```cmd\r\nConnection Open !\r\n==============================================\r\nColumnName = ParentId\r\nColumnOrdinal = 0\r\nColumnSize = 5\r\nNumericPrecision = 255\r\nNumericScale = 255\r\nIsUnique = False\r\nIsKey = True\r\nBaseServerName =\r\nBaseCatalogName =\r\nBaseColumnName = CustomerID\r\nBaseSchemaName =\r\nBaseTableName = Customers\r\nDataType = System.String\r\nAllowDBNull = False\r\nProviderType = 10\r\nIsAliased = True\r\nIsExpression = False\r\nIsIdentity = False\r\nIsAutoIncrement = False\r\nIsRowVersion = False\r\nIsHidden = False\r\nIsLong = False\r\nIsReadOnly = False\r\nProviderSpecificDataType = System.Data.SqlTypes.SqlString\r\nDataTypeName = nchar\r\nXmlSchemaCollectionDatabase =\r\nXmlSchemaCollectionOwningSchema =\r\nXmlSchemaCollectionName =\r\nUdtAssemblyQualifiedName =\r\nNonVersionedProviderType = 10\r\nIsColumnSet = False\r\n==============================================\r\nColumnName = ChildId\r\nColumnOrdinal = 1\r\nColumnSize = 4\r\nNumericPrecision = 10\r\nNumericScale = 255\r\nIsUnique = False\r\nIsKey = True\r\nBaseServerName =\r\nBaseCatalogName =\r\nBaseColumnName = OrderID\r\nBaseSchemaName =\r\nBaseTableName = Orders\r\nDataType = System.Int32\r\nAllowDBNull = False\r\nProviderType = 8\r\nIsAliased = True\r\nIsExpression = False\r\nIsIdentity = False\r\nIsAutoIncrement = False\r\nIsRowVersion = False\r\nIsHidden = False\r\nIsLong = False\r\nIsReadOnly = False\r\nProviderSpecificDataType = System.Data.SqlTypes.SqlInt32\r\nDataTypeName = int\r\nXmlSchemaCollectionDatabase =\r\nXmlSchemaCollectionOwningSchema =\r\nXmlSchemaCollectionName =\r\nUdtAssemblyQualifiedName =\r\nNonVersionedProviderType = 8\r\nIsColumnSet = False\r\n==============================================\r\nPress any key to continue . . .\r\n```"
      },
      {
        "user": "keeratsingh",
        "created_at": "2018-06-11T20:16:54Z",
        "body": "@ezra2310 Did you get a chance to look into the response above ?"
      },
      {
        "user": "keeratsingh",
        "created_at": "2018-06-20T21:52:11Z",
        "body": "Closing issue due to inactivity, kindly reopen if you have any further questions."
      }
    ]
  },
  {
    "number": 25184,
    "title": "Clarify persistency of prepared commands across pooled connection lifespan",
    "created_at": "2018-02-25T05:24:14Z",
    "closed_at": "2024-12-23T11:57:01Z",
    "labels": [
      "question",
      "area-System.Data"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25184",
    "body": "ADO.NET has an explicit `Prepare()` API which can be very important for performance - the effect is dramatic on PostgreSQL and there's a potential for big gains also on Sqlite and on SqlServer (where the operation is currently a no-op, but could obviate sending the query SQL and resultset shape description on each query).\r\n\r\nUnfortunately, this feature currently isn't very compatible with short-lived connection scenarios such as web applications: since `Prepare()` is invoked on `DbCommand`, the reasonable expectation from the API is that once the instance is disposed or the DbConnection is closed/disposed, the benefits of preparation disappear. So the benefits of prepare are currently restricted to applications which call `Prepare()` on a `DbCommand` instance, and then re-execute that instance many times on the same `DbConnection` - the opposite of how web applications work.\r\n\r\nSince preparation is so important with PostgreSQL, Npgsql works around this problem by internally persisting command - when a prepared `NpgsqlCommand` is disposed, the prepared resources are kept internally on the physical connection, keyed on the SQL, even when the connection is returned to the pool. A subsequent call to `Prepare()` on the same physical connection will just look up those resources and reuse them.\r\n\r\nIt's worth thinking about this problem in a more general way in ADO.NET, to make sure that other providers benefit from prepared command persistency. This could mean the introduction of a new preparation API or something else.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25184/comments",
    "author": "roji",
    "comments": [
      {
        "user": "divega",
        "created_at": "2018-03-01T07:34:28Z",
        "body": "_System.Data.Common triage:_ this sounds like a very good thing to tackle. The answer may very well be that we are comfortable with the semantics of the existing API to be what Npgsql implements (prepared commands a persisted at the physical connection level) or whatever is possible for any given provider, as long it contributes to achieve what the user's most likely intention was when they called prepare: make subsequent executions of the command to be as cheap as possible. \r\n\r\nRelated to dotnet/corefx#27448. \r\n\r\nMoving to futures."
      },
      {
        "user": "roji",
        "created_at": "2024-12-23T11:57:01Z",
        "body": "Closing as the situation hasn't changed, and no immediate need seems to exist for now. "
      }
    ]
  },
  {
    "number": 25092,
    "title": "Using Trusted Root Certification Authorities for server certificate validation in HttpClient",
    "created_at": "2018-02-19T20:39:04Z",
    "closed_at": "2020-01-31T19:49:40Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25092",
    "body": "I have created a self-signed certificate using \r\n\r\n`    openssl req -x509 -newkey rsa:2048 -keyout https-key.pem -out https.pem -days 365`\r\n\r\nthen I created pkcs12 using (I have set the CN to my server's ip adress):\r\n\r\n`    openssl pkcs12 -export -out https.pfx -inkey https-key.pem -in https.pem -password pass:123456`\r\n\r\nIn my server a use the generated `https.pfx` file for https.\r\n\r\nIn my client I imported the generated certificate into the Windows' `Trusted Root Certification Authorities` (Current user and also local system).\r\n\r\nWhen I send a HTTP request to the server from my client, I get \r\n\r\n```\r\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: A security error occurred\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()\r\n       at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\n       --- End of inner exception stack trace ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n       at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n       at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task).\r\n```\r\n\r\nIn chrome it says:\r\n\r\n    Attackers might be trying to steal your information from *** (for example, passwords, messages, or credit cards). NET::ERR_CERT_AUTHORITY_INVALID\r\n\r\nDoes .NET Core 2.0's `HttpClient` use Windows certificate stores? What could be causing the issue.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25092/comments",
    "author": "mfrankk",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2018-02-19T20:46:23Z",
        "body": "cc: @bartonjs "
      },
      {
        "user": "bartonjs",
        "created_at": "2018-02-20T01:22:58Z",
        "body": "> Does .NET Core 2.0's HttpClient use Windows certificate stores?\r\n\r\nYes.\r\n\r\n>  What could be causing the issue.\r\n\r\nI recommend registering the server validation callback, and looking at what errors are reported (both in the SslProtocolErrors enum and in the X509Chain object)."
      },
      {
        "user": "davidsh",
        "created_at": "2018-02-21T16:38:08Z",
        "body": ">System.Net.Http.WinHttpException: A security error occurred\r\n\r\nGetting that exception can happen for a variety of problems with the TLS/SSL connection including issues with the server TLS certificate.  When using a self-signed certificate, putting it into the local trusted roots store is not sufficient to prevent errors in the connection process.  Other errors like dates that are expired, DNS name mismatch, etc. can cause problems.\r\n\r\nSo, one way to troubleshoot this is to use the HttpClientHandler.ServerCertificateCustomValidationCallback property to register a callback as @bartonjs  suggested."
      },
      {
        "user": "davidsh",
        "created_at": "2018-04-16T19:58:05Z",
        "body": "@mfrankk Does this problem still happen for you?\r\n\r\nI suspect that the certificate you are creating using OpenSsl is using a deprecated signing algorithm (like SHA1) by default.  That would explain why you are getting an error from HttpClient.\r\n\r\nThere is not enough information for us to troubleshoot this problem. If this is still occurring, please attach a copy of the PFX certificate you created as well as WireShark traces.  Thanks.\r\n\r\n"
      }
    ]
  },
  {
    "number": 24982,
    "title": "Crypto provider wrappers in System.Security.Cryptography.Algorithms",
    "created_at": "2018-02-09T10:36:37Z",
    "closed_at": "2020-01-31T19:40:31Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24982",
    "body": "PR dotnet/corefx#12964 added crypto wrappers.\r\n\r\nI'm able to use them targeting netstandard 2.x but not for netstandard1.x.\r\n\r\nI see that those providers are not included as part of `System.Security.Cryptography.Algorithms` package (v4.3.1). Would it be possible to include them as part of the nuget package?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24982/comments",
    "author": "jorgebay",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-09T17:43:14Z",
        "body": "Are you having a compilation problem, or a runtime problem?"
      },
      {
        "user": "jorgebay",
        "created_at": "2018-02-09T18:28:13Z",
        "body": "Its a compilation issue, wrappers are not available on net standard 1.x and not included in `System.Security.Cryptography.Algorithms` package."
      },
      {
        "user": "bartonjs",
        "created_at": "2018-02-09T18:46:12Z",
        "body": "Okay, that's what I would expect.  The wrappers were added for netstandard 2.0.  There's no expectation that they will be available when targeting lower versions.\r\n\r\nWhether using netstandard 1.x or 2.0 the recommended pattern is to use the algorithm factory methods.\r\n\r\n| Replace This | With This |\r\n| --- | --- |\r\n| new SHA1CryptoServiceProvider() | SHA1.Create() |\r\n| new SHA256CryptoServiceProvider() | SHA256.Create() |\r\n| new SHA384CryptoServiceProvider() | SHA384.Create() |\r\n| new SHA512CryptoServiceProvider() | SHA512.Create() |\r\n| new AesCryptoServiceProvider() | Aes.Create() |\r\n\r\netc\r\n"
      },
      {
        "user": "jorgebay",
        "created_at": "2018-02-13T09:05:26Z",
        "body": "If that means that wrappers are not going to be provided in .NET Standard 1.x, this ticket can be closed :)"
      }
    ]
  },
  {
    "number": 24954,
    "title": "Registry.GetValue returns an Int32 for REG_DWORD instead of an Uint32",
    "created_at": "2018-02-07T21:05:00Z",
    "closed_at": "2020-01-31T19:38:31Z",
    "labels": [
      "question",
      "area-Microsoft.Win32"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24954",
    "body": "When you read a REG_DWORD value with Microsoft.Win32.Registry.GetValue it will return an Int32 but the Windows Registry Editor (Regedit.exe) interprets REG_DWORD as unsigned integers with an upper limit of 2^32-1 in the decimal input filed. If you read a REG_DWORD, which was set in regedit.exe to 2^32-1, C# will give you -1 in an Int32, but it should give you an Uint32 with the value 2^32-1. The same issue applies for REG_QWORD with an Int64 returned instead of Uint64.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24954/comments",
    "author": "TheMinefighter",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-02-08T07:55:20Z",
        "body": "I agree that it should have been uint. My guess is that it is int because originally uint was not CLS compilant, the same reason why int is used in many other places for quantities that are unsigned.\r\nIf you may be dealing with numbers this large, you can cast to and from int. (You may need the unchecked keyword if you are compiling with `/checked`.)\r\nAs far as I can see we cannot \"fix\" this now because it would break anyone currently casting the object return value to int, which is surely very common given the value is a number."
      },
      {
        "user": "TheMinefighter",
        "created_at": "2018-02-08T15:31:24Z",
        "body": "That sounds logical, now using the following code :\r\n```\r\ntoReturn = Registry.GetValue(key, valueName, null);\r\nif (toReturn is int)\r\n{\r\n   toReturn = BitConverter.ToUInt32(BitConverter.GetBytes((int) toReturn), 0);\r\n}\r\nif (toReturn is long)\r\n{\r\n   toReturn = BitConverter.ToUInt64(BitConverter.GetBytes((long) toReturn), 0);\r\n}\r\n```"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-02-08T16:01:36Z",
        "body": "Right. @stephentoub do you see any way we could solve this ourselves? I do not (short of providing new methods)"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-02-08T16:09:48Z",
        "body": "> do you see any way we could solve this ourselves? I do not (short of providing new methods)\r\n\r\nNope.  If we're currently returning a boxed Int32, changing to return a boxed Int64 or UInt32 would be breaking, as casts to Int32 to unbox it would fail."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-02-21T17:55:46Z",
        "body": "Closing as above - I don't believe we can fix. Thanks for the report, though."
      }
    ]
  },
  {
    "number": 24949,
    "title": "Add HID support to .netCore",
    "created_at": "2018-02-07T01:34:54Z",
    "closed_at": "2020-01-31T19:38:16Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24949",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24949/comments",
    "author": "juscla",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-02-08T17:00:45Z",
        "body": "@juscla what exactly do you mean by HID? Does it require new APIs or support in existing ones?"
      },
      {
        "user": "tarekgh",
        "created_at": "2018-02-08T17:58:53Z",
        "body": "@juscla please clarify your ask. "
      },
      {
        "user": "tarekgh",
        "created_at": "2018-02-08T18:01:21Z",
        "body": "closing it till we get more clarification then we can re-open it."
      },
      {
        "user": "juscla",
        "created_at": "2018-02-08T19:54:26Z",
        "body": "So i currently have frameworks that talk to devices over HID protocol, by pinvoking HID.DLL and would like to have this supported in the .netCore going forward. I have a Project that shows you how i am using it. "
      },
      {
        "user": "shaggygi",
        "created_at": "2018-02-08T20:00:58Z",
        "body": "There is this open issue (#21810) that might be similar and provide goodness in this area."
      },
      {
        "user": "tarekgh",
        "created_at": "2018-02-08T20:32:35Z",
        "body": "Thanks @juscla \r\n\r\nLooks dotnet/runtime#22597 is covering this area then. feel free to put more comments there and we'll keep this issue closed as duplicate from dotnet/runtime#22597"
      }
    ]
  },
  {
    "number": 24764,
    "title": "Passing additional CMake arguments to Native build",
    "created_at": "2018-01-22T12:47:37Z",
    "closed_at": "2020-01-31T19:22:14Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24764",
    "body": "`build-native.sh` has options `cmakeargs` for passing additional arguments to CMake. But if I want add `-D_FORTIFY_SOURCE=2` option to `CXXFLAGS` it will be applied to `corefx/src/Native/Unix/configure.cmake` (which cause errors on test programs compilation).\r\nIf I add this option to `corefx/src/Native/Unix/CMakeLists.txt` it will applied to source code only (as expected).\r\n\r\nIs there other way to pass this and others options to build without patching source code? If not is it possible to change `cmakeargs` behavior or add some other logic?\r\n\r\nThis behavior is the same for CoreCLR too.\r\n\r\ncc @BruceForstall @jkotas \r\ncc @chunseoklee",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24764/comments",
    "author": "alpencolt",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2018-01-22T15:20:26Z",
        "body": "@janvorli "
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-01-23T23:29:32Z",
        "body": "@alpencolt I'm afraid you're beyond my level of cmake / build system expertise."
      },
      {
        "user": "janvorli",
        "created_at": "2018-01-24T01:05:12Z",
        "body": "Hmm, I was pretty sure I've replied to this yesterday, but the window probably get lost before I have sent it.\r\nI am not sure I understand how defining a cmake variable using the cmakeargs automatically results in setting the compiler option. You need to have your own code in the cmake scripts to set the compiler define if the cmake variable is set, right? And then you can choose where to put it and what to influence. @alpencolt can you please explain to me what I am missing?\r\n"
      },
      {
        "user": "alpencolt",
        "created_at": "2018-01-24T17:34:34Z",
        "body": "@janvorli Tizen project is needed to set some global compiler and linker options (e.g. `D_FORTIFY_SOURCE=2`) for all modules included to OS, sometimes it might be list of options (`-fstack-protector-strong -D_FORTIFY_SOURCE=2` or others). This list can be different for different releases and we don't really modify CoreCL/FX sources for this purpose(it's worth case).\r\n\r\nBetter option is passing this additional options and defines through global variable or some command line key and read them in `CMakeLists.txt`. The main point we are needed is applying this compiler/linker flags only to CoreCLR/FX source and not to `configure.cmake`. Since `configure.cmake` failed on easiest checks.\r\n`cmakeargs` option doesn't provide necessary functionality (may be we use it wrong way?). It isn't pass arguments as we expected  and it doesn't work with list of options (e.g. `CXXFLAGS+=-fstack-protector-strong -D_FORTIFY_SOURCE=2`).\r\n\r\nCan we solve this issue by existed tools? If not can we add this functionality to upstream?"
      },
      {
        "user": "janvorli",
        "created_at": "2018-01-24T21:26:43Z",
        "body": "@alpencolt I think the best solution for this would be to pass a single cmake variable containing the compiler options and then using them in the CMakeLists.txt where you want them to take effect.\r\nSo, we could add support for that to coreclr / corefx and then you can pass whatever options you want through that without further touching the sources in the future.\r\nSo we would add a cmake variable named e.g. `CLR_ADDITIONAL_COMPILER_OPTIONS`. On the build command line, you would add `cmakeargs \"-DCLR_ADDITIONAL_COMPILER_OPTIONS=-fstack-protector-strong;-D_FORTIFY_SOURCE=2\"`. Please note the `;` separating the options and the quotes around the whole option, they are necessary to ensure that the options are correctly passed to cmake.\r\nIn the compileoptions.cmake, we would add `add_compile_options(${CLR_ADDITIONAL_COMPILER_OPTIONS})` inside the initial `if (CLR_CMAKE_PLATFORM_UNIX)`.\r\nThat should be all that's needed to enable passing in any compiler options you want."
      },
      {
        "user": "alpencolt",
        "created_at": "2018-01-25T13:09:34Z",
        "body": "@janvorli great! Thank you.\r\nI will prepare PR."
      },
      {
        "user": "alpencolt",
        "created_at": "2018-01-31T18:54:23Z",
        "body": "@janvorli `corefx/Tools/run.exe` which is called from `corefx/run.sh` doesn't keep quotes on Linux. So I call for example:\r\n```\r\n./build-native.sh -Release -buildArch=armel -- clang3.8 cmakeargs '-DCLR_FIRST=1 -DCLR_SECOND=2'\r\n```\r\nString `-DCLR_FIRST=1 -DCLR_SECOND=2` can be handled as one argument (by using `$7` or other number depending from position) in all scripts before `corefx/Tools/run.exe`. But after `-DCLR_FIRST=1 ` and `-DCLR_SECOND=2` are two different arguments (`$7` and `$8`).\r\nDoes it OK? How can I fix `run.exe` behavior?\r\n"
      },
      {
        "user": "janvorli",
        "created_at": "2018-02-01T16:13:01Z",
        "body": "The solution is simple - pass the two defines separately:\r\n```sh\r\n./build-native.sh -Release -buildArch=armel -- clang3.8 cmakeargs -DCLR_FIRST=1 cmakeargs -DCLR_SECOND=2\r\n```"
      }
    ]
  },
  {
    "number": 24647,
    "title": "cant start safari by ProcessStartInfo under macos 10.13.2",
    "created_at": "2018-01-12T16:49:04Z",
    "closed_at": "2020-01-31T19:13:07Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Process",
      "os-mac-os-x"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24647",
    "body": "_From @bodhichina on January 12, 2018 13:50_\n\n i try run below code under macos 10.13.2, looks nothing happend. can you help to check what's wrong\r\n\r\n```\r\nvar info=new ProcessStartInfo()\r\n            { \r\n                FileName = \"/Applications/Safari.app/Contents/MacOS/safari\",\r\n                CreateNoWindow = false,\r\n                UseShellExecute = false\r\n            };\r\n            \r\n            var process=new Process(){ StartInfo = info};\r\n            process.Start();\r\n```\n\n_Copied from original issue: dotnet/coreclr#15839_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24647/comments",
    "author": "jkotas",
    "comments": [
      {
        "user": "wtgodbe",
        "created_at": "2018-01-26T22:05:06Z",
        "body": "I am not able to repro this locally @bodhichina, can you provide more details? Did you confirm Safari is where you expect it to be?"
      },
      {
        "user": "karelz",
        "created_at": "2018-02-01T21:17:48Z",
        "body": "Looks like this is not actionable now. Closing.\r\nIf you have repro, feel free to ping us and we can reopen. Thanks!"
      }
    ]
  },
  {
    "number": 24575,
    "title": "Getting CPU/Memory usage from a .NET Core App",
    "created_at": "2018-01-04T23:25:41Z",
    "closed_at": "2020-01-31T19:07:31Z",
    "labels": [
      "question",
      "area-System.Diagnostics.Tracing"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24575",
    "body": "Hi,\r\n\r\nRight now in our application in .NET 4.x, we get the CPU and Memory usage from the machine using performance counters. But of course this works only on Windows.\r\n\r\nIn .NET Core we are only able to leverage the data from `GC.GetTotalMemory`, but it only return the memory consumed by our app, not by all processes on the machine.\r\n\r\n What would be the best \"cross-platform\" way to do this using .NET Core?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24575/comments",
    "author": "benjaminpetit",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-01-06T01:41:40Z",
        "body": "@vancem any thoughts?"
      },
      {
        "user": "vancem",
        "created_at": "2018-01-08T18:36:57Z",
        "body": "You can use at the OS level memory and CPU time usage in a cross platform way by using the APIs in System.Diagnostics.Process.   In for example to get the current processes working set and CPU time you can use:\r\n```\r\n            var me = Process.GetCurrentProcess();\r\n            Console.WriteLine(\"Working set {0} bytes\", me.WorkingSet64);\r\n            Console.WriteLine(\"Total CPU time {0} sec\", me.TotalProcessorTime.TotalSeconds);\r\n```\r\nYou can access this data for other processes using the Process.GetProcesses() or Process.GetProcessById() or GetProcessesByName() APIs to find the process of interest and then fetching the metrics desired.\r\n\r\nIs that sufficient?    \r\n"
      },
      {
        "user": "benjaminpetit",
        "created_at": "2018-01-08T20:18:50Z",
        "body": "So to get CPU/Mem info for the current machine, we would have to list all processes with `Process.GetProcesses` and then aggregate CPU time and working set to get a global value?\r\n\r\nI think it could work, but I don't know how expensive it would be to list all processes. But we can give a try.\r\n\r\nThanks!"
      },
      {
        "user": "TomasHubelbauer",
        "created_at": "2018-07-14T15:58:07Z",
        "body": "@benjaminpetit Did you end up summing up all the usages across all the processes or did you find a better API to give you the CPU usage and RAM usage?"
      },
      {
        "user": "benjaminpetit",
        "created_at": "2018-07-16T19:55:52Z",
        "body": "For the moment we didn't implemented anything. Still waiting to see if we can have a better API..."
      },
      {
        "user": "GomesNayagam",
        "created_at": "2019-02-10T04:00:48Z",
        "body": "foreach (var aProc in Process.GetProcesses())\r\n            totalsize += aProc.WorkingSet64/1024.0;\r\n\r\ni am doing this for my work, it takes ~30-40msec execution time. "
      }
    ]
  },
  {
    "number": 24556,
    "title": "How to test WinRT types and dynamic?",
    "created_at": "2018-01-03T15:04:15Z",
    "closed_at": "2020-01-31T19:06:10Z",
    "labels": [
      "question",
      "area-Microsoft.CSharp"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24556",
    "body": "Of the uncovered code in Microsoft.CSharp, quite a bit involves WinRT types, which I don't know anything about. Does anyone know how to go about testing these?\r\n\r\n(@jamesqo do I remember you having a question about WinRT types and corefx on stackoverflow, or am I was that someone else?)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24556/comments",
    "author": "JonHanna",
    "comments": [
      {
        "user": "jamesqo",
        "created_at": "2018-01-03T15:23:19Z",
        "body": "@JonHanna I don't think I can be of help here; sorry.\r\n  "
      },
      {
        "user": "jkotas",
        "created_at": "2018-01-04T04:50:10Z",
        "body": "WinRT is not supported in .NET Core currently. It is tracked by dotnet/runtime#22989 and a few other issues.\r\n\r\nWinRT is supported on UAP. It should be possible to test WinRT-specific functionality via UAP-specific tests."
      },
      {
        "user": "JonHanna",
        "created_at": "2018-01-04T10:57:11Z",
        "body": "@jkotas are there any tests that use WinRT types against corefx already, do you know?"
      },
      {
        "user": "jkotas",
        "created_at": "2018-01-04T11:56:26Z",
        "body": "These tests should be using WinRT - you can tell by looking for `<Reference Include=\"Windows\" />` in .csproj file:\r\n\r\n```\r\n\\corefx\\src\\CoreFx.Private.TestUtilities\\src\\CoreFx.Private.TestUtilities.csproj(109):    <Reference Include=\"Windows\" />\r\n\\corefx\\src\\System.IO.FileSystem\\tests\\System.IO.FileSystem.Tests.csproj(179):    <Reference Include=\"Windows\" />\r\n\\corefx\\src\\System.IO.IsolatedStorage\\tests\\System.IO.IsolatedStorage.Tests.csproj(81):    <Reference Include=\"Windows\" />\r\n\\corefx\\src\\System.Net.Http\\tests\\FunctionalTests\\System.Net.Http.Functional.Tests.csproj(125):    <Reference Include=\"Windows\" />\r\n\\corefx\\src\\System.Runtime.WindowsRuntime\\tests\\System.Runtime.WindowsRuntime.Tests.csproj(25):    <Reference Include=\"Windows\" />\r\n```"
      },
      {
        "user": "JonHanna",
        "created_at": "2018-01-04T12:27:20Z",
        "body": "Thanks, that should be enough to get over the initial hurdle of total newbieness."
      }
    ]
  },
  {
    "number": 9466,
    "title": "Custom LoadContext cannot be unloaded once created",
    "created_at": "2017-12-23T12:33:12Z",
    "closed_at": "2020-01-31T03:12:52Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9466",
    "body": "Are there already defined plans of when this feature might be available?\r\n\r\nThis feature is sufficient for many scenarios and it would not be necessary to implement the download of the assemblies selectively.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9466/comments",
    "author": "Suriman",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-12-23T17:28:55Z",
        "body": "This is called collectible assemblies. It is in our longer term plan, but it is not in the current plan for next release (.NET Core 2.1).\r\n\r\nDuplicate of dotnet/runtime#4075."
      }
    ]
  },
  {
    "number": 24507,
    "title": "Mac: 'Cannot access Kerberos ticket' after `dotnet ef database update`",
    "created_at": "2017-12-22T06:02:20Z",
    "closed_at": "2020-01-31T19:02:50Z",
    "labels": [
      "question",
      "area-System.Net.Security",
      "os-mac-os-x"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24507",
    "body": "Hello\r\nAfter create model in project and set to dbcontext, for creation database give me this error\r\nplease help me.\r\n\r\n```\r\nCannot access Kerberos ticket. Ensure Kerberos has been initialized with 'kinit'.\r\nErrorCode=InternalError, Exception=Interop+NetSecurityNative+GssApiException: GSSAPI operation failed with error -  An unsupported mechanism was requested (unknown mech-code 0 for mech unknown).\r\n   at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed)\r\n   at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal&outFlags)\r\n   at System.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[] serverName)\r\n   at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer)\r\n   at System.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)\r\n```\r\n\r\n[EDIT] Fix exception formatting by @karelz",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24507/comments",
    "author": "MansoorJafari",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-12-22T16:51:39Z",
        "body": "Did you make sure Kerberos is initialized as the exception suggests? (`kinit`)\r\ncc @Priya91 @wfurt "
      },
      {
        "user": "Priya91",
        "created_at": "2018-01-02T20:52:32Z",
        "body": "Closing due to lack of response."
      }
    ]
  },
  {
    "number": 24302,
    "title": "HttpCompletionOption.ResponseHeadersRead behavior with AllowAutoRedirect=true",
    "created_at": "2017-12-01T07:56:35Z",
    "closed_at": "2020-01-31T18:46:29Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24302",
    "body": "This is a question regarding the behavior of `HttpCompletionOption.ResponseHeadersRead` when `AllowAutoRedirect` is set to true. When a redirect occurs, which of the following behaviors takes place?\r\n\r\n1. The completion option is only respected for the first request (i.e. it is \"best-effort\"; since a redirect took place, we cannot respect the completion option. So we read the response body and then follow redirects ignoring the original completion option).\r\n2. The completion option is respected for all requests (a new connection is created for each redirect, wasting a new connection each time).\r\n3. The completion option is only respected for the last request (we read response bodies as long as the status code asks us to redirect. The destination response body is not read).\r\n4. When a redirect occurs, the completion option has no effect.\r\n\r\nSince HTTP/1.1 is the default protocol, `keep-alive`s are enabled. This means that if a response body is not read, then a new request cannot be made on the same TCP connection. So it seems that (3) or (4) are most likely.\r\n\r\nHowever, RFC2616 does not forbid `HTTP 302` responses from having response bodies. So a problem arises when the responses are huge (say many GBs each). In this case, every redirect will take very long and it would actually be beneficial to re-create a new connection for each redirect.\r\n\r\nI realize that this is a hypothetical scenario, but wanted to check anyway since the behavior was not documented (and I couldn't make much from the source).\r\n\r\n**Extra**: How do timeouts work with regard to redirects? Are they per-request or for all of them?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24302/comments",
    "author": "shravan2x",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-12-01T17:38:48Z",
        "body": "First, `HttpCompletionOption.ResponseHeadersRead` has nothing to do with whether or not connections get reused or not during HTTP request/response processing.  That option simply means when the async HttpClientHandler.SendAsync() method will complete.  If ResponseHeadersRead is specified, then it will complete when the headers are read but it will NOT read nor buffer in the response body content.\r\n\r\nIn the case of AutomaticRedirect processing, that option only has meaning for the final HTTP request/response, i.e. following any Location: header in the 3xx redirect response and then doing the final request/response.\r\n\r\nSo, in the list of choices you list above, number 3 is the behavior for the HTTP stacks.\r\n\r\n>So a problem arises when the responses are huge (say many GBs each). In this case, every redirect will take very long and it would actually be beneficial to re-create a new connection for each redirect.\r\n\r\nThat comment above is very interesting and does impact how efficient HTTP stacks can be.  In order to reuse an existing connection for a redirect, the response body payload must be \"drained\" from the wire in order to reuse the same connection for the subsequent HTTP request (assuming it is going to the same server endpoint).  Each platform HTTP stack makes different decision here about this.  In fact, on Windows, the HttpClientHandler/WinHttpHandler has a special property 'MaxResponseDrainSize` that controls the low-level efficiency of this.  In practice, though, most redirect responses don't have much payload and that property isn't used."
      },
      {
        "user": "shravan2x",
        "created_at": "2017-12-01T19:01:37Z",
        "body": "> In fact, on Windows, the HttpClientHandler/WinHttpHandler has a special property 'MaxResponseDrainSize` that controls the low-level efficiency of this.\r\n\r\nThat's good to know, I have a few more questions:\r\n\r\n1. Is it possible to change this from code without hacks like reflection?\r\n2. How does MaxResponseDrainSize work when the `transfer-encoding` is `chunked`?\r\n3. Also, how do timeouts work with regard to redirects? Are they per-request or for all of them?"
      },
      {
        "user": "davidsh",
        "created_at": "2017-12-01T19:04:32Z",
        "body": ">I didn't know that; Is it possible to change this from code without hacks like reflection?\r\n\r\nIf you use WinHttpHandler directly, you can change the value of 'MaxResponseDrainSize' property.  But the current default of 64KB is usually fine.\r\n\r\nIn terms of \"timeouts\", there is an overall HttpClient timeout that governs the whole request/response.  There are also internal TCP level timeouts for making connections but those are not controllable.\r\n\r\nIt is very rare that controlling any of those low-level things will impact most scenarios.\r\n"
      },
      {
        "user": "shravan2x",
        "created_at": "2017-12-01T19:07:20Z",
        "body": "Sorry, I happened to update my comment while you were answering.\r\n\r\n> In terms of \"timeouts\", there is an overall HttpClient timeout that governs the whole request/response. There are also internal TCP level timeouts for making connections but those are not controllable.\r\n\r\nSo if I understand correctly, if a request has `AllowRedirects` set to `true` and it redirects 8 times, the total time `SendAsync` might take is `8*Timeout`?"
      },
      {
        "user": "davidsh",
        "created_at": "2017-12-01T19:09:21Z",
        "body": ">the total time SendAsync might take is 8*Timeout?\r\n\r\nNo.  HttpClient.Timeout is for the whole thing regardless of how many auto redirects are being processed."
      },
      {
        "user": "shravan2x",
        "created_at": "2017-12-01T19:11:09Z",
        "body": "I see. My last question is - how does `MaxResponseDrainSize` work when the response body size is unknown i.e. the transfer-encoding is chunked?\r\n\r\nDoes it read up to 64KB and then terminate the connection?"
      },
      {
        "user": "davidsh",
        "created_at": "2017-12-01T19:17:50Z",
        "body": ">I see. My last question is - how does MaxResponseDrainSize work when the response body size is unknown i.e. the transfer-encoding is chunked?\r\nDoes it read up to 64KB and then terminate the connection?\r\n\r\nThe answers to those questions vary depending on the platforms (Windows vs. Linux) and also different versions of Windows.  I don't have any crisp answers to tell you about that.  On .NET Core and Windows, the .NET layer of HTTP is built on top of native Windows APIs (WinHTTP for non-UWP apps and WinINet for UWP apps).  The details you ask about are low-level native implementation details.  Even for Linux .NET Core (which currently uses Curl), I'm not sure of the answers."
      },
      {
        "user": "shravan2x",
        "created_at": "2017-12-01T19:45:44Z",
        "body": "> The answers to those questions vary depending on the platforms (Windows vs. Linux) and also different versions of Windows.\r\n\r\nThat's fine, I was just curious anyway. Thanks for the answers!"
      }
    ]
  },
  {
    "number": 24279,
    "title": "System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.1.1.0",
    "created_at": "2017-11-30T00:14:33Z",
    "closed_at": "2020-01-31T18:44:50Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24279",
    "body": "I recently created a .NET Core 2.0 library that multitargeted `net46`. It included this in the .csproj file:\r\n\r\n```\r\n  <ItemGroup Condition=\"'$(TargetFramework)'=='net46'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(TargetFramework)'=='netstandard2.0'\">\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" />\r\n    <PackageReference Include=\"System.Net.Primitives\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Net.Requests\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Net.Sockets\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nI referenced this library is a .NET Framework 4.7 console app and get this exception:\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. ---> System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\nI didn't see any warnings in the error list, but I decided to check the build log and found a conflict.\r\n\r\nThis is what I see in the detailed build log:\r\n```\r\n1>  There was a conflict between \"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n1>      \"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n1>      References which depend on \"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7\\System.Net.Http.dll].\r\n1>          C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7\\System.Net.Http.dll\r\n1>            Project file item includes which caused reference \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7\\System.Net.Http.dll\".\r\n1>              System.Net.Http\r\n```\r\n\r\nMy `App.config` includes a redirect which should have been used\r\n```\r\n<dependentAssembly>\r\n        <assemblyIdentity name=\"System.Net.Http\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\r\n      </dependentAssembly>\r\n```\r\n\r\nWhat I don't fully understand in why System.Net.Http includes a reference to itself. Is this corruption of some sort or am I missing something?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24279/comments",
    "author": "shravan2x",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-11-30T00:39:25Z",
        "body": "System.Net.Http.dll 4.1.1.0 shipped in nuget package System.Net.Http 4.3.0. It caused a problem on .NET Framework - see dotnet/runtime#18280 for details.\r\nWe shipped updated package System.Net.Http 4.3.1 which passes through to the underlying platform on .NET Framework (with assembly version 4.0.0.0).\r\nI assume something in your app is referencing older nuget package with higher assembly version. You need a binding redirect like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n    <runtime>\r\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n            <dependentAssembly>\r\n                <assemblyIdentity name=\"System.Net.Http\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n                <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.0.0.0\" />\r\n            </dependentAssembly>\r\n        </assemblyBinding>\r\n    </runtime>\r\n</configuration>\r\n```"
      },
      {
        "user": "shravan2x",
        "created_at": "2017-11-30T01:24:34Z",
        "body": "@karelz The issue is that I do not use System.Net.Http 4.3.0 anywhere. My multi target for `netstandard2.0` uses version 4.3.3 and the reference for `net46` directly uses an assembly reference `<Reference Include=\"System.Net.Http\" />`.\r\n\r\nAlso, the project that uses the library already has the binding redirect you mentioned.\r\n```\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Net.Http\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\r\n      </dependentAssembly>\r\n```\r\n\r\n**EDIT**: Nevermind I didn't notice the `newVersion` in your post was different than mine. Your fix seems to work for me.\r\n\r\nI vaguely remember encountering this issue in the past; it might help future users to maintain a wiki page for this issue with enough keywords that it shows up in a google search.\r\n\r\nThanks for the help!"
      },
      {
        "user": "fernandozamoraj",
        "created_at": "2020-05-04T15:14:19Z",
        "body": "In my case the team was using Visual Studio 2019.  I was using VS 2015 because that is what the sln would default to.  Once I opened in in VS 2019 it worked.  I guess that's because of the references in one applicaiton vs. the other.  And actually in my case it was the System.Net.Sockets file."
      }
    ]
  },
  {
    "number": 9344,
    "title": "Disable NI loading even though NI file exists",
    "created_at": "2017-11-29T06:19:26Z",
    "closed_at": "2020-01-31T03:04:41Z",
    "labels": [
      "question",
      "area-crossgen2-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9344",
    "body": "Is there a way(env variable to corerun) to disable NI loading even though NI file exists ?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9344/comments",
    "author": "chunseoklee",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-11-29T06:27:58Z",
        "body": "`export COMPlus_ZapDisable=1`"
      }
    ]
  },
  {
    "number": 24150,
    "title": "Is it possible to run test against runtime only?",
    "created_at": "2017-11-16T01:47:41Z",
    "closed_at": "2020-01-31T18:34:16Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24150",
    "body": "I was able to build and run corefx tests.  \r\nMy work has a constraint that it need to use docker image less than 500MB in size. \r\nThe docker image contains corefx, coreclr and with built tests is 13.4 GB  \r\n\r\nI wonder if it is possible that I copy minimum required files to the microsoft/dotnet:2.0-runtime-jessie image and have the test run? ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24150/comments",
    "author": "Deren-Liao",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-11-16T18:05:06Z",
        "body": "Size of tests is not a metric we are optimizing for.\r\nIf you need to run tests on small Docker images, you will need to manually build & deploy only subset of tests (e.g. per project, or in extreme per test). There is nothing in our scripts/infrastructure which would help you beyond that.\r\n\r\nI am curious why you have the 500MB limit on Docker image ..."
      },
      {
        "user": "Deren-Liao",
        "created_at": "2017-11-16T22:10:35Z",
        "body": "It has something to do with our existing test infrastructure.  We'll have to find alternatives.   Thanks."
      }
    ]
  },
  {
    "number": 24069,
    "title": "Webpack failure on dot net core 2 gives wrong message.",
    "created_at": "2017-11-07T15:40:06Z",
    "closed_at": "2020-01-31T18:27:48Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24069",
    "body": "DotNet Core 2.0 with Angular 5\r\nIf angular is updated to angular 5 and ngtools is not latest, then following error comes during runtime.\r\nError: Version of @angular/compiler-cli needs to be 2.3.1 or greater. \r\nCurrent version is \"5.0.0\".\r\n\r\nError message is clearly misleading.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24069/comments",
    "author": "prashantchoudhary",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-11-08T00:07:59Z",
        "body": "@prashantchoudhary how is it related to .NET Core? Is it problem of managed code or JS?"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-11-16T19:33:25Z",
        "body": "This issue was moved to angular/angular#20485"
      },
      {
        "user": "prashantchoudhary",
        "created_at": "2017-11-23T16:58:19Z",
        "body": "yes looks more like an npm issue. I posted in dotnet section as the template was dotnet core with angular and webpack."
      }
    ]
  },
  {
    "number": 24044,
    "title": "How to use System.Net.Http 4.3.3 with .NET 4.6.0",
    "created_at": "2017-11-03T18:59:48Z",
    "closed_at": "2020-01-31T18:26:06Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24044",
    "body": "\r\nTwo questions:\r\n\r\n1. How can I ***force*** framework 4.6.0 to use System.Net.Http from the Reference package?\r\n2. (if binding redirect is the only way) how can I add binding redirect in new csproj format?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24044/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-11-03T19:06:05Z",
        "body": ">Took a unit test from dotnet/corefx#19082 that fixed the issue of reusing content.\r\n\r\nThat change about \"no longer disposing HttpRequestMessage.Content\" was only done for .NET Core.  That change is not in .NET Framework.  So, running this test on .NET Framework will fail as you observed.\r\n\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2017-11-03T19:14:43Z",
        "body": "Does that mean:\r\n\r\nA: using System.Net.Http 4.3.0 from nuget on .NET Framework 4.6.0 will not hit that code path in HttpClient\r\n\r\nor\r\n\r\nB: there is no way to run System.Net.Http 4.3.0 on NET Framework 4.6.0, it will always pick old one form GAC\r\n\r\nLooking at the code changes i would assume it would be `B`"
      },
      {
        "user": "davidsh",
        "created_at": "2017-11-03T19:29:36Z",
        "body": ">Looking at the code changes i would assume it would be B\r\n\r\nIt's actually more complicated than that.\r\n\r\nStarting with .NET Framework 4.7.1, we will always prefer to use the inbox System.Net.Http.dll (GAC'd version) and not any OOB (out-of-band) System.Net.Http.dll anymore from NuGet package.  Due to various issues described in dotnet/runtime#20777, we no longer build OOB assemblies for System.Net.Http.dll.  As of .NET 4.7.1, the API surface for System.Net.Http.dll matches NetStandard20/NetCore20.\r\n\r\nIn your example, there will be ways you could potentially force the Http.dll binary to be used from the NuGet package.  But that will only work for a while until you run on .NET 4.7.1.  After that, there is no separate dll that would be used from NETCore sources/NuGet packages against .NET Framework.  With respect to the behavior change (\"not explicitly disposing HttpRequestMessage.Content after sending message\"), that change has not been ported to .NET Framework yet (need to review app-compat mitigations).\r\n\r\nIn summary, concepts like this:\r\n\r\n>using System.Net.Http 4.3.0 from nuget on .NET Framework\r\n\r\nwon't be true moving forward.\r\n\r\ncc: @karelz "
      },
      {
        "user": "ghost",
        "created_at": "2017-11-03T20:03:10Z",
        "body": "Thanks for the explanation davidsh. Much appreciated."
      },
      {
        "user": "buddhike",
        "created_at": "2018-11-02T23:35:22Z",
        "body": "@davidsh is above explanation valid for .Net framework 4.6 as well?"
      },
      {
        "user": "davidsh",
        "created_at": "2018-11-03T13:05:04Z",
        "body": ">@davidsh is above explanation valid for .Net framework 4.6 as well?\r\n\r\n@joperezr Can you comment on this?"
      },
      {
        "user": "joperezr",
        "created_at": "2018-11-05T23:34:21Z",
        "body": "Yes, System.Net.Http.dll also shipped inbox on .NET Framework 4.6 so because of our conflict resolution logic, that one will be preferred."
      }
    ]
  },
  {
    "number": 9186,
    "title": "Assembly.GetTypes() will crash if referencing assembly is not found",
    "created_at": "2017-10-24T23:13:30Z",
    "closed_at": "2020-01-31T02:55:03Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9186",
    "body": "Please consider the following:\r\n\r\nI have three dlls:\r\n\r\n- Common.dll\r\n- Error.dll\r\n- Email.dll\r\n\r\nEmail.dll References Common.dll (1.0.0)\r\nError.dll References Common.dll (1.0.2)\r\n\r\nFor argument sake, we will say there are no code differences between these 2 versions. Also, the assembly version and assembly file version is 1.0.0.0 in both versions of Common.dll\r\n\r\nThe main project that calls both Email and Error dll has a function that loops through assemblies and gets its types for whatever the reason. The main project also will grab the latest dll of Common which is 1.0.2 and thus Error.dll will work.\r\n\r\nNow if I call the following it will crash because it could not find Common.dll (1.0.0):\r\n```\r\nvar assembly = AppDomain.CurrentDomain.Load(\"Email.dll\")\r\nassembly.GetTypes().Where(t => t.GetCustomAttributes(typeof(SomeAttribute), true).Any());\r\nforeach (var entityType in entityTypes)\r\n{\r\n    //some logic\r\n}\r\n```\r\n\r\nIs this a known issue? Is there a workaround for this?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9186/comments",
    "author": "bagzli",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-10-25T03:29:06Z",
        "body": "Can you provide a project with a simple repro of the problem? You are most likely trying to load multiple copies of the same assembly into the default context - it does not work by design."
      },
      {
        "user": "bagzli",
        "created_at": "2017-10-25T22:01:05Z",
        "body": "I'll try to find some time this weekend to make a sample repo."
      },
      {
        "user": "jkotas",
        "created_at": "2017-12-02T05:34:07Z",
        "body": "No repro instructions - closing. Please reactive if it is still a problem."
      }
    ]
  },
  {
    "number": 23769,
    "title": "System.Net.Http.HttpContent.ReadAsStringAsync fails for ISO-8859-15 (Latin-9)",
    "created_at": "2017-10-07T06:24:25Z",
    "closed_at": "2020-01-31T18:05:49Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23769",
    "body": "I'm trying to read the HTTP response from a web service, where the content type header is:\r\n\r\n```\r\nContent-Type: text/html; charset=ISO-8859-15\r\n```\r\n\r\nWhen invoking `System.Net.Http.HttpContent.ReadAsStringAsync()` my app fails with `System.InvalidOperationException`  \"*The character set provided in ContentType is invalid. Cannot read content as string using an invalid character set.*\"\r\n\r\n`ISO-8859-15` (Latin-9) though is a valid charset, and the problem seems to be in the incomplete list of charsets hardcoded in .NET (System.Globalization I think). \r\n\r\nIs this a bug? Is there another way to read content encoded with this (or any other) charset, other than going lower level into the data stream?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23769/comments",
    "author": "dluc",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-10-07T15:56:45Z",
        "body": "Try adding `Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)` to your Main method. It will register larger set of encodings."
      },
      {
        "user": "dluc",
        "created_at": "2017-10-09T02:40:28Z",
        "body": "@jkotas is there a corresponding class or solution in .NET Core?"
      },
      {
        "user": "jkotas",
        "created_at": "2017-10-09T02:54:48Z",
        "body": "It is the solution for .NET Core. To apply it:\r\n\r\n- Run `dotnet.exe add package System.Text.Encoding.CodePages`\r\n- Add `using System.Text;` and `Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)`"
      },
      {
        "user": "karelz",
        "created_at": "2017-12-29T03:11:00Z",
        "body": "I assume @jkotas's answer was sufficient. Closing.\r\nFeel free to reopen if it is not the case."
      }
    ]
  },
  {
    "number": 23708,
    "title": "RSAKeyValue.LoadXml not working when XmlElement input has namespace prefix",
    "created_at": "2017-10-02T15:28:42Z",
    "closed_at": "2020-01-31T18:00:46Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23708",
    "body": "Are there any know workaround for issue dotnet/runtime#22760 with digital signatures?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23708/comments",
    "author": "angelcalvasp",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-10-02T15:56:39Z",
        "body": "cc @brunin2509 @krwq @bartonjs @ianhays "
      },
      {
        "user": "brunor2509",
        "created_at": "2017-10-02T21:25:15Z",
        "body": "Apparently, since version 4.5.0-preview2-25520 or something like that (when PR dotnet/corefx#22336 was merged into master), a solution for this issue has already been included in System.Security.Cryptography.Xml. "
      },
      {
        "user": "angelcalvasp",
        "created_at": "2017-10-04T00:41:14Z",
        "body": "Yes I know this but its on a preview version, which I cant use for my current development proyect, but I found myself a workaround to get that behavior on 2.0.0"
      },
      {
        "user": "petertsu",
        "created_at": "2017-12-11T20:44:33Z",
        "body": "@angelcalvasp  Could you you share  your workaround please ? I need that behavior on 2.0.3 .\r\nThanks"
      },
      {
        "user": "d96patel",
        "created_at": "2017-12-18T18:40:37Z",
        "body": "@angelcalvasp Could you please share your workaround for 2.0.4? We are running on 2.0.4."
      }
    ]
  },
  {
    "number": 9002,
    "title": "Question: Mark tests for conditional disabling",
    "created_at": "2017-09-23T23:06:04Z",
    "closed_at": "2020-01-31T02:43:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9002",
    "body": "In dotnet/coreclr tests, it is possible to mark a test with various characteristics (\"traits\"), and then choose which tests NOT to run based on the tests so marked?\r\n\r\nThere is issues.targets, but it appears that is only used at test BUILD time, not test RUN time. I want to be able to (for example) build the x86 release tests once, then run any number of JIT stress modes, or altjit runs, with each type of run disabling some (different) subset of tests. I don't want to have to build the test wrappers again for each run type. I don't want to disable (via the existing issues.targets) the union of all failing tests for all possible modes (this is far too many, especially when considering altjit and platform bring-up).\r\n\r\nIt looks like xunit has a `-notrait` feature, but I don't see if it is currently plumbed through from a dotnet/coreclr test proj file to the auto-generated xunit wrappers, for example.\r\n\r\n@RussKeldorph @dotnet/jit-contrib @wtgodbe ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9002/comments",
    "author": "BruceForstall",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2017-09-25T12:36:31Z",
        "body": "We could add this as part of dotnet/runtime#5808."
      }
    ]
  },
  {
    "number": 23597,
    "title": "Needs to check corefx-utcs consider some situations when they are native images made by using crossgen",
    "created_at": "2017-09-19T06:37:12Z",
    "closed_at": "2020-01-31T17:52:43Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23597",
    "body": "I've recently tested coreclr/corefx utcs which are native images made by using crossgen `FNV` or `R2R`. I found some problems. I need to get feedback from you by sharing this.\r\n\r\nOne of them is `System.Reflection.Tests.ModuleTests.Name`.\r\n```\r\n   System.Reflection.Tests.ModuleTests.Name [FAIL]\r\n      Assert.Equal() Failure\r\n                                       ↓ (pos 21)\r\n      Expected: ···ystem.runtime.tests.dll\r\n      Actual:   ···ystem.Runtime.Tests.ni.dll\r\n                                       ↑ (pos 21)\r\n      Stack Trace:\r\n            at System.Reflection.Tests.ModuleTests.Name()\r\n```\r\n\r\nCode of `System.Reflection.Tests.ModuleTests.Name`.\r\n```cs\r\n        [Fact]\r\n        [SkipOnTargetFramework(TargetFrameworkMonikers.UapAot, \"Module.Name does not indicate file location on UwpAot\")]\r\n        public void Name()\r\n        {\r\n            Assert.Equal(\"system.runtime.tests.dll\", Module.Name, ignoreCase: true);\r\n        }\r\n```\r\n\r\nWhen the tc is a native image, the `Module.Name` is `System.Runtime.Tests.ni.dll` while the expeced `Module.Name` is `System.Runtime.Tests.dll`. This causes because some tcs assume that the loaded assembly is only `.dll` file although it can be a native image such as `.ni.dll`.\r\n\r\nWe can think corefx-utc doesn't need to be native image itself. However an application could be native image. In my opinion, some tcs need to be fixed to consider this situation.\r\n\r\n@dotnet/arm32-contrib ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23597/comments",
    "author": "YongseopKim",
    "comments": [
      {
        "user": "YongseopKim",
        "created_at": "2017-09-19T06:48:14Z",
        "body": "Failed TCs when they are native images(`FNV`) and trying loading themselves. \r\n\r\n```\r\n# AnyOS.AnyCPU.Release/System.Reflection.CoreCLR.Tests\r\nSystem.Reflection.Tests.AssemblyTests.CurrentLocation_HasLocaton\r\n\r\n# AnyOS.AnyCPU.Release/System.Runtime.Loader.DefaultContext.Tests\r\nSystem.Runtime.Loader.Tests.DefaultLoadContextTests.LoadInDefaultContext\r\n\r\n# AnyOS.AnyCPU.Release/System.Runtime.Loader.RefEmitLoadContext.Tests\r\nSystem.Runtime.Loader.Tests.RefEmitLoadContextTests.LoadRefEmitAssembly\r\n\r\n# AnyOS.AnyCPU.Release/System.Runtime.Tests\r\nSystem.Reflection.Tests.ModuleTests.FullyQualifiedName\r\nSystem.Reflection.Tests.AssemblyTests.AssemblyLoadFromBytes\r\nSystem.Reflection.Tests.AssemblyTests.AssemblyLoadFromBytesWithSymbols\r\nSystem.Reflection.Tests.AssemblyTests.GetFiles\r\nSystem.Reflection.Tests.AssemblyTests.GetFile\r\nSystem.Reflection.Tests.AssemblyTests.LoadFrom_SameIdentityAsAssemblyWithDifferentPath_ReturnsEqualAssemblies\r\n\r\n# Unix.AnyCPU.Release/System.Runtime.Extensions.Tests\r\nSystem.Tests.AppDomainTests.AssemblyLoad\r\nSystem.Tests.AppDomainTests.Load\r\nSystem.Tests.AppDomainTests.GetAssemblies\r\n```\r\n\r\nFailed TCs when they are native images(`R2R`) and trying loading themselves. \r\n```\r\n# AnyOS.AnyCPU.Release/System.Reflection.CoreCLR.Tests\r\nSystem.Reflection.Tests.AssemblyTests.CurrentLocation_HasLocaton\r\n\r\n# AnyOS.AnyCPU.Release/System.Runtime.Tests\r\nSystem.Reflection.Tests.ModuleTests.Name\r\nSystem.Reflection.Tests.AssemblyTests.AssemblyLoadFromBytes\r\nSystem.Reflection.Tests.AssemblyTests.AssemblyLoadFromBytesWithSymbols\r\n\r\n# Unix.AnyCPU.Release/System.Runtime.Extensions.Tests\r\nSystem.Tests.AppDomainTests.Load\r\nSystem.Tests.AppDomainTests.GetAssemblies\r\n```\r\n\r\nSome of them can be passed if they are native image made by crossgin with `R2R`. I don't know exactly, but `FNV(FragileNonVersionable)` NI File cannot be loaded directly. It causes `System.BadImageFormatException : Bad IL format`. That's why the number of the failed tcs with `FNV` are more than one of `R2R` things."
      },
      {
        "user": "weshaggard",
        "created_at": "2018-01-18T00:59:05Z",
        "body": "@YongseopKim I'm not sure we ever need to run our tests in the context where the assemblies are \".ni.dll\", While it might be interesting to have some specific tests that validate \".ni.dll\"'s I'm not sure it is worth the complication in the test infra to get this little bit extra test coverage. Those type of tests would more naturally be part of the coreclr test bed which validates the ni images. "
      }
    ]
  },
  {
    "number": 23566,
    "title": "Few questions about the Memory",
    "created_at": "2017-09-15T12:04:33Z",
    "closed_at": "2020-01-31T17:50:11Z",
    "labels": [
      "question",
      "area-System.Memory"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23566",
    "body": "Hello guys!\r\n\r\nI am currently trying to update my blog post/presentation about Span. I read the code and I have few questions. I hope that you can help me to get a better understanding.\r\n\r\n1. One of the reasons for making `Span` and `ReadOnlySpan` a stack-only types was to avoid struct tearing. `Memory` is a struct and it consist of 3 fields. By design it's not stack-only. Is it not going to suffer from struct tearing? Why is it not a class?\r\n2. `ReadOnlyMemory.DangerousTryGetArray` is breaking the encapsulation by exposing `ArraySegment` which allows to modify the content via indexer (it has a setter). It's hidden from the IDE via `EditorBrowsable` attribute and has a name that indicates the consequences. Is this method really needed? Why not to introduce new type like `ReadOnlyArraySegment` ?\r\n\r\ncc @KrzysztofCwalina @jkotas ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23566/comments",
    "author": "adamsitnik",
    "comments": [
      {
        "user": "KrzysztofCwalina",
        "created_at": "2017-09-15T13:52:19Z",
        "body": "Memory needs to be a struct to allow cheap slicing and to be an allocation-free factory of spans. It's a tradeoff between safety and efficiency.\r\n\r\nReadOnlyArraySegment would mean that now we need to have 2 overloads for APIs that otherwise take ReadOnlyMemory. \r\n\r\ncc: @ahsonkhan, @stephentoub "
      },
      {
        "user": "jkotas",
        "created_at": "2017-09-15T14:16:04Z",
        "body": "System.Memory does not provide as nice safety guarantees as Span. We will need very good documentation that explains how to use it correctly and what to avoid. Related to dotnet/runtime#23481."
      },
      {
        "user": "adamsitnik",
        "created_at": "2017-09-15T16:42:03Z",
        "body": "thanks for the explanation!"
      }
    ]
  },
  {
    "number": 23547,
    "title": "stack smashing detected",
    "created_at": "2017-09-14T01:31:40Z",
    "closed_at": "2020-01-31T17:49:09Z",
    "labels": [
      "question",
      "area-System.Runtime.InteropServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23547",
    "body": "when I was debuging the project with VSCode on ubuntu16.04,I met with the \"stack smashing detected\" exception and the project paused immediately.This exception occurs when the program try to load a .so file that is programed in C and compiled by GCC on ubuntu16.04 .The program attempt to access a function defined in the .so file and then the \"stack smashing detected\" exception comes along.I try to fix it but failed\r\n## the code is here:\r\n`[DllImport(\"TripleDES.dll\", CallingConvention = CallingConvention.Cdecl)]\r\nstatic extern int data_convert([MarshalAs(UnmanagedType.LPArray)]byte[] indata, int in_len, [MarshalAs(UnmanagedType.LPArray)]byte[] outdata, int flag, [MarshalAs(UnmanagedType.LPArray)] byte[] key);`\r\n## I use the data_convert function here:\r\n`byte[] toEncrypt = Encoding.UTF8.GetBytes(this.GetString(strString));\r\n byte[] key = Encoding.UTF8.GetBytes(this.GetKeyCode(this.Keys));\r\n byte[] result = new byte[256];\r\n int count = data_convert(toEncrypt, en_len, result, 1, key);\r\n byte[] resultBytes = new byte[count];\r\n Array.Copy(result, 0, resultBytes, 0, count)`\r\n## the data_convert function in the .c file :\r\n`int  data_convert(unsigned char *in,int in_len,unsigned char * out,char flag,unsigned char *key)`",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23547/comments",
    "author": "hezc13",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2017-09-14T01:33:47Z",
        "body": "Your DllImport defines `flag` as an `int`, which is four bytes, whereas your native export defines `flag` as `char`, which is one byte."
      },
      {
        "user": "hezc13",
        "created_at": "2017-09-14T02:54:01Z",
        "body": "I have modified the defination as follows:\r\n## the DLL declaration:\r\n`[DllImport(\"3desintf.so\",EntryPoint=\"data_convert\")]\r\n\r\nstatic extern int data_convert([MarshalAs(UnmanagedType.LPArray)]byte[] indata,int in_len,\r\n[MarshalAs(UnmanagedType.LPArray)]byte[] outdata,int flag,[MarshalAs(UnmanagedType.LPArray)]byte[] key);`\r\n## the data_convert function :\r\n`int  data_convert(unsigned char *in,int in_len,unsigned char * out,int flag,unsigned char *key)`\r\nbut the exception is still there"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-09-14T04:06:57Z",
        "body": "What calling convention does the native function expect, and have you tried setting that on the DllImport?"
      },
      {
        "user": "hezc13",
        "created_at": "2017-09-14T04:22:14Z",
        "body": "However,when I compiled the same .c file to .dll file and used it in the same project in VS2015 on Windows ,it went normally. "
      },
      {
        "user": "stephentoub",
        "created_at": "2017-09-14T05:18:55Z",
        "body": "Other things to look at besides validating the calling convention would be things like whether the bitness of the .NET process matches that of the compiled C binary, whether the data_convert native function itself is actually correct or whether it has a bug and is writing over stack memory it shouldn't be, whether sizeof(int) in the C function is 4 as expected, etc."
      }
    ]
  },
  {
    "number": 23487,
    "title": "Does CoreFX library support NI file, including both FNV and R2R ?",
    "created_at": "2017-09-08T05:26:02Z",
    "closed_at": "2022-09-05T03:04:46Z",
    "labels": [
      "question",
      "area-System.Reflection.Metadata"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23487",
    "body": "Does CoreFX library support NI file, including both FNV and R2R? If not, what types of file does CoreFX library support for reflection ? e.g. C# managed dll, native dll(Windows), and etc.\r\n\r\nFor example, such as `PEReader.GetMetadataReader` or `GetCustomAttributes` is supporting NI file? If PEReader accepts a stream from a pe file and the pe file is FNV or R2R NI file, all corefx apis are handling the case?\r\n\r\np.s. the reason why I ask about that, `System.Reflection.Metadata.Decoding.Tests.CustomAttributeDecoderTests.TestCustomAttributeDecoder` in `System.Reflection.Metadata.Tests'` always is failed on NI overlay + NI TC-FNV&R2R. And some tcs are failed like it.\r\n\r\n/cc @dotnet/arm32-contrib @parjong @hqueue ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23487/comments",
    "author": "YongseopKim",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-09-08T15:42:25Z",
        "body": "> such as PEReader.GetMetadataReader or GetCustomAttributes is supporting NI file? \r\n\r\nYes."
      },
      {
        "user": "jkotas",
        "created_at": "2017-09-08T15:44:12Z",
        "body": ">`System.Reflection.Metadata.Decoding.Tests.CustomAttributeDecoderTests.TestCustomAttributeDecoder` in `System.Reflection.Metadata.Tests` always is failed on NI overlay\r\n\r\nSounds like a bug."
      },
      {
        "user": "jkotas",
        "created_at": "2022-09-05T03:04:46Z",
        "body": "If this is still a problem, please open a new issue with repro steps."
      }
    ]
  },
  {
    "number": 8867,
    "title": "Directly loading .ni.dll works differently from each `FNV/R2R`",
    "created_at": "2017-09-04T06:41:25Z",
    "closed_at": "2022-10-20T23:01:04Z",
    "labels": [
      "question",
      "area-crossgen2-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8867",
    "body": "(This may relate to dotnet/runtime#8866)\r\n\r\nDirectly loading .ni.dll works differently from each `FNV/R2R`.\r\n```\r\n# the latest/the old coreoverlay\r\n$ COMPlus_DumpJittedMethods=1 ./fnv-overlay/corerun ./fnv-dll/empty.ni.dll \r\n\r\nUnhandled Exception: System.BadImageFormatException: Could not load file or assembly '/home/dragon/dotnet/arm32-dotnet/tmp/dotnet-latest/fnv-dll/empty.ni.dll'. An attempt was made to load a program with an incorrect format.\r\n\r\n[1]    4587 abort (core dumped)  ./fnv-overlay/corerun ./fnv-dll/empty.ni.dll\r\n\r\n# the latest/the old coreoverlay\r\n$ COMPlus_DumpJittedMethods=1 ./r2r-overlay/corerun ./r2r-dll/empty.ni.exe\r\n# nothing prints!!!\r\n$ echo $?\r\n1\r\n```\r\n\r\nWith crossgen `FNV`, is it impossible to loading ni.dll file directly as a rule?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8867/comments",
    "author": "YongseopKim",
    "comments": [
      {
        "user": "YongseopKim",
        "created_at": "2017-09-04T06:41:35Z",
        "body": "/cc @dotnet/arm32-contrib @parjong "
      },
      {
        "user": "jkotas",
        "created_at": "2017-09-04T23:48:40Z",
        "body": "Fragile non-versionable .ni images only work against the exact runtime version that they have been generated against."
      },
      {
        "user": "jkotas",
        "created_at": "2022-10-20T23:01:04Z",
        "body": "Fragile ngen support has been deleted."
      }
    ]
  },
  {
    "number": 8865,
    "title": "How to check a dll's ni file(with FragileNonVersionable option) is loaded?",
    "created_at": "2017-09-04T03:09:14Z",
    "closed_at": "2022-10-20T23:00:30Z",
    "labels": [
      "question",
      "area-crossgen2-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8865",
    "body": "A quetion while I've checked current ni loading system. How do I know a ni-file(with `FragileNonVersionable` option) is loaded?\r\n\r\nI'm checking this by using checked built CoreCLR with `COMPlus_DumpJittedMethods=1`. Does it make sure that ni-file is loaded?\r\n\r\nFor example,\r\n```cs\r\n// empty.dll\r\nclass Program\r\n{\r\n        static int Main(string[] args)\r\n        {\r\n                return 1;\r\n        }\r\n}\r\n```\r\nand there are dirs.\r\n```\r\nempty.dll\r\nni-overlay/        <= ni-files by crossgen using `FragileNonVersionable`\r\noverlay/            <= just overlay. its corerun runs empty.dll\r\ndll/\r\n     empty.dll\r\n     empty.ni.dll\r\n```\r\n\r\n#### 1) not-ni-overlay + not-ni-tc\r\n```\r\nsh-3.2# COMPlus_DumpJittedMethods=1 ./dotnet-mar/overlay/corerun ./empty.dll \r\nCompiling    0 System.AppDomain::SetupDomain, IL size = 58, hsh=0xa5094c3c\r\n...\r\nCompiling  105 System.AppDomain::SetupDomainSecurity, IL size = 23, hsh=0x5f73ba8a\r\nCompiling  106 DomainNeutralILStubClass::IL_STUB_PInvoke, IL size = 69, hsh=0xab04618a\r\nCompiling  107 System.AppDomain::RunInitializer, IL size = 48, hsh=0x2c7dfe88\r\nCompiling  108 System.Environment::SetCommandLineArgs, IL size = 7, hsh=0x25543d03\r\nCompiling  109 System.Environment::.cctor, IL size = 1, hsh=0xcb2679a8\r\nCompiling  110 Program::Main, IL size = 7, hsh=0xabb389cf\r\n```\r\n\r\n#### 2) ni-overlay + not-ni-tc\r\n```\r\nsh-3.2# COMPlus_DumpJittedMethods=1 ./dotnet-mar/ni-overlay/corerun ./empty.dll \r\nCompiling    0 Program::Main, IL size = 7, hsh=0xabb389cf\r\n```\r\n\r\n#### 3) ni-overlay + ni-tc(.dll + .ni)\r\n**nothing!!!** prints\r\n```\r\nsh-3.2# COMPlus_DumpJittedMethods=1 ./dotnet-mar/ni-overlay/corerun ./dotnet-mar/dll/empty.dll \r\nsh-3.2# \r\n```\r\n\r\nWhen `like 3)`, nothing prints with ni-overlay + `COMPlus_DumpJittedMethods=1`, can I be sure that coreclr loads ni-files? If not, are there any way to find out?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8865/comments",
    "author": "YongseopKim",
    "comments": [
      {
        "user": "YongseopKim",
        "created_at": "2017-09-04T03:10:08Z",
        "body": "/cc @dotnet/arm32-contrib "
      },
      {
        "user": "jkotas",
        "created_at": "2022-10-20T23:00:30Z",
        "body": "Fragile ngen support has been deleted."
      }
    ]
  },
  {
    "number": 23306,
    "title": "Where is System.Security.Cryptography.Xml?",
    "created_at": "2017-08-23T08:40:27Z",
    "closed_at": "2020-01-31T17:30:15Z",
    "labels": [
      "question",
      "area-System.Net.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23306",
    "body": "Apologies for a dumb question, but as far as I can see System.Security.Cryptography.Xml is a part of .net core 2.0 release. How comes it is not included in dependencies of .net core 2.0 project?\r\n\r\n1. Installed .net Core 2.0 SDK\r\n2. Installed .net Core 2.0 runtime\r\n3. Created .net Core 2.0 console application in Visual Studio 2017 (15.3)\r\n\r\nSystem.Security.Cryptography.Xml is nowhere to be found.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23306/comments",
    "author": "adragoner",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-08-23T16:10:46Z",
        "body": "I don't remember if we shipped it as final - @krwq @weshaggard do you know?\r\nIf we did ship it, then it is likely a separate package."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-08-23T16:46:26Z",
        "body": "@adragoner it's not part of the main package -- please add a Nuget package reference to System.Security.Cryptography.Xml to your project.\r\n\r\nWe'd welcome any bug reports (as new issues) especially discrepancies from desktop behavior."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-08-23T16:55:02Z",
        "body": "BTW please close if this fixes it..."
      },
      {
        "user": "krwq",
        "created_at": "2017-08-23T17:30:26Z",
        "body": "I have just quickly tested it with new .NET CLI.\r\n\r\nAdding to my csproj:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\n```\r\ndotnet restore\r\ndotnet run\r\n```\r\n\r\nrestores and runs correctly. Closing."
      }
    ]
  },
  {
    "number": 8788,
    "title": "[Question] What is EE structures? (from crossgen)",
    "created_at": "2017-08-22T12:23:29Z",
    "closed_at": "2020-01-31T02:29:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8788",
    "body": "I read dotnet/runtime#7501 and it looks like **EE structure** is the key difference between them. Could you please let me know what it is?\r\n\r\ncc: @jkotas",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8788/comments",
    "author": "wateret",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-08-22T13:20:24Z",
        "body": "These are the structures used by the runtime: MethodTable, EEClass, MethodDesc, FieldDesc, Module, ... ."
      }
    ]
  },
  {
    "number": 8782,
    "title": "Segmentation fault during GC when running on ARM",
    "created_at": "2017-08-21T12:54:37Z",
    "closed_at": "2020-01-31T02:29:08Z",
    "labels": [
      "question",
      "arch-arm32",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8782",
    "body": "I've ported my ASP.NET Core application to netcoreapp2.0 (it works with net462 and Mono), publish it with `-c Release -f netcoreapp2.0 -r linux-arm` on Windows, copy it to my Linux box (Yocto Linux, Kernel 4.9, Freescale/NXP/Qualcomm i.MX6 SoloX, ARMv7) and start it using the executable `./My.App`.\r\n\r\nI can see my application starting up and printing some messages, I sometimes even get to do some HTTP requests, but sooner or later it dies with a Segmentation Fault. I've been running within gdb and there, I get varying stack traces:\r\n\r\n```\r\n[...]\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\nThread 8 \"My.App\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to LWP 3999]\r\n0xb681e1ea in SVR::gc_heap::mark_object_simple1(unsigned char*, unsigned char*, int) () from /root/my-app/libcoreclr.so\r\n```\r\nor\r\n```\r\nThread 1 \"My.App\" received signal SIGSEGV, Segmentation fault.\r\n0xa8aa79f8 in ?? ()\r\n```\r\nor\r\n```\r\nThread 15 \"My.App\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to LWP 4210]\r\n0xb66ff9da in JIT_ChkCastClassSpecial_Portable ()\r\n   from /root/my-app/libcoreclr.so\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8782/comments",
    "author": "Tragetaschen",
    "comments": [
      {
        "user": "Tragetaschen",
        "created_at": "2017-08-21T14:48:35Z",
        "body": "Hmm, strange: I have rebuilt my Linux image to include the glibc debugging symbols and `libthread_db[.so.1|-1.0.so]`. Now, it doesn't crash anymore."
      },
      {
        "user": "Tragetaschen",
        "created_at": "2017-08-23T08:22:19Z",
        "body": "It seems the non-crash was luck. It reproduces most of the time with the `mark_object_simple1` stack trace. \r\n\r\nI've been able to compile the v2.0.0 tags of coreclr, corefx and core-setup with a non-release build of coreclr and get this stack trace:\r\n```\r\n(gdb) bt\r\n#0  0xb6232eee in MethodTable::GetBaseSize (this=0x0)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/methodtable.h:1795\r\ndotnet/coreclr#1  0xb66238a6 in SVR::my_get_size (ob=0x9d76f7cc)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:8988\r\ndotnet/coreclr#2  0xb65f1e0a in SVR::gc_heap::mark_object_simple1 (this=0x12a378,\r\n    oo=0x9aab3f64 \"\\315\\223\\232\\247\\025\\001\",\r\n    start=0x9aab3f64 \"\\315\\223\\232\\247\\025\\001\", thread=0)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:17823\r\ndotnet/coreclr#3  0xb65f2e5e in SVR::gc_heap::mark_object_simple (this=0x12a378,\r\n    po=0xacc45d18, thread=0)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:18267\r\ndotnet/coreclr#4  0xb662eb62 in SVR::gc_heap::mark_through_cards_helper (this=0x12a378,\r\n    poo=0xacc45d18, n_gen=@0xacb2f61c: 42, cg_pointers_found=@0xacb2f624: 0,\r\n    fn=\r\n    (void (SVR::gc_heap::*)(SVR::gc_heap * const, uint8_t **, int)) 0xb65f2b2d <SVR::gc_heap::mark_object_simple(unsigned char**, int)>,\r\n    nhigh=0x9e6d8000 \"\", next_boundary=0x9a6d9000 \"\\350p\\006\")\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:27714\r\ndotnet/coreclr#5  0xb65f903c in SVR::gc_heap::mark_through_cards_for_segments (\r\n    this=0x12a378, fn=\r\n    (void (SVR::gc_heap::*)(SVR::gc_heap * const, uint8_t **, int)) 0xb65f2b2d <SVR::gc_heap::mark_object_simple(unsigned char**, int)>, relocating=0)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:28021\r\ndotnet/coreclr#6  0xb65e0a54 in SVR::gc_heap::mark_phase (this=0x12a378,\r\n    condemned_gen_number=1, mark_only_p=0)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:19769\r\ndotnet/coreclr#7  0xb65d8922 in SVR::gc_heap::gc1 (this=0x12a378)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:15381\r\ndotnet/coreclr#8  0xb65bc85a in SVR::gc_heap::garbage_collect (this=0x12a378, n=1)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:16946\r\ndotnet/coreclr#9  0xb65bb19c in SVR::gc_heap::gc_thread_function (this=0x12a378)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:5298\r\ndotnet/coreclr#10 0xb65bad98 in SVR::gc_heap::gc_thread_stub (arg=0x12a378)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:25001\r\ndotnet/coreclr#11 0xb670d65a in GCThreadStub (param=0x12eea8)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcenv.os.cpp:609\r\ndotnet/coreclr#12 0xb68d6366 in CorUnix::CPalThread::ThreadEntry (pvParam=0x12eeb8)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/pal/src/thread/thread.cpp:1749\r\ndotnet/coreclr#13 0xb6f97f0c in start_thread (arg=0xacb30450)\r\n    at /usr/src/debug/glibc/2.25-r0/git/nptl/pthread_create.c:458\r\ndotnet/coreclr#14 0xb6d2fdf8 in ?? () at ../sysdeps/unix/sysv/linux/arm/clone.S:76\r\n   from /lib/libc.so.6\r\n```"
      },
      {
        "user": "Tragetaschen",
        "created_at": "2017-08-23T11:40:49Z",
        "body": "I've also done a non-stripped release build where the two top functions of the call stack seem to be inlined. I think, I've got all the necessary tools available, but I wouldn't know how to start.\r\n\r\n```\r\n(gdb) bt\r\n#0  SVR::gc_heap::mark_object_simple1 (this=0x10e920, oo=<optimized out>, start=<optimized out>, thread=<optimized out>)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:17734\r\ndotnet/coreclr#1  0xb689acb6 in SVR::gc_heap::mark_object_simple (this=0x10e920, po=<optimized out>, thread=<optimized out>)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:18267\r\ndotnet/coreclr#2  0xb689d3ca in SVR::GCHeap::Promote (ppObject=0xaa2d8a30, sc=0xad02fcfc, flags=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:33971\r\ndotnet/coreclr#3  0xb67d81d8 in GcInfoDecoder::EnumerateLiveSlots (this=0xad02f114, pRD=<optimized out>,\r\n    reportScratchSlots=<error reading variable: access outside bounds of object referenced via synthetic pointer>, inputFlags=<optimized out>,\r\n    pCallBack=<optimized out>, hCallBack=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcinfodecoder.cpp:934\r\ndotnet/coreclr#4  0xb66c9aca in EECodeManager::EnumGcRefs (this=<optimized out>, pRD=0xad02f690, pCodeInfo=0xad02f5b8, flags=0, pCallBack=<optimized out>,\r\n    hCallBack=<optimized out>, relOffsetOverride=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/eetwain.cpp:5043\r\ndotnet/coreclr#5  0xb6767c1c in GcStackCrawlCallBack (pCF=0xad02f398, pData=0xad02fc6c) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcenv.ee.cpp:332\r\ndotnet/coreclr#6  0xb6713f48 in Thread::MakeStackwalkerCallback (this=0x1df880, pCF=0xad02f398, pCallback=0xb6767a59 <GcStackCrawlCallBack(CrawlFrame*, void*)>,\r\n    pData=0xad02fc6c) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/stackwalk.cpp:868\r\ndotnet/coreclr#7  0xb67140dc in Thread::StackWalkFramesEx (this=0x1df880, pRD=0xad02f690, pCallback=0xb6767a59 <GcStackCrawlCallBack(CrawlFrame*, void*)>,\r\n    pData=0xad02fc6c, flags=34048, pStartFrame=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/stackwalk.cpp:949\r\ndotnet/coreclr#8  0xb6714376 in Thread::StackWalkFrames (this=0x1df880, pCallback=0xb6767a59 <GcStackCrawlCallBack(CrawlFrame*, void*)>, pData=0xad02fc6c, flags=34048,\r\n    pStartFrame=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/stackwalk.cpp:1032\r\ndotnet/coreclr#9  0xb67680ee in ScanStackRoots (pThread=0x1df880, fn=0xb689d269 <SVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, sc=0xad02fcfc)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcenv.ee.cpp:564\r\ndotnet/coreclr#10 0xb6767f52 in GCToEEInterface::GcScanRoots (fn=0xb689d269 <SVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, condemned=<optimized out>,\r\n    max_gen=<optimized out>, sc=0xad02fcfc) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcenv.ee.cpp:593\r\ndotnet/coreclr#11 0xb68945a8 in SVR::gc_heap::mark_phase (this=0x10e920, condemned_gen_number=2, mark_only_p=<optimized out>)\r\n    at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:19694\r\ndotnet/coreclr#12 0xb689219c in SVR::gc_heap::gc1 (this=0x10e920) at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:15381\r\ndotnet/coreclr#13 0xb68881d0 in SVR::gc_heap::garbage_collect (this=<optimized out>, n=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:16932\r\ndotnet/coreclr#14 0xb68872dc in SVR::gc_heap::gc_thread_function (this=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:5298\r\ndotnet/coreclr#15 0xb6887112 in SVR::gc_heap::gc_thread_stub (arg=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/gc/gc.cpp:25001\r\ndotnet/coreclr#16 0xb6907bc8 in GCThreadStub (param=<optimized out>) at /usr/src/debug/coreclr/2.0.0-r0/git/src/vm/gcenv.os.cpp:609\r\ndotnet/coreclr#17 0xb69bf1fe in CorUnix::CPalThread::ThreadEntry (pvParam=0x112e00) at /usr/src/debug/coreclr/2.0.0-r0/git/src/pal/src/thread/thread.cpp:1749\r\ndotnet/coreclr#18 0xb6f97f0c in start_thread (arg=0xad030450) at /usr/src/debug/glibc/2.25-r0/git/nptl/pthread_create.c:458\r\ndotnet/coreclr#19 0xb6d2fdf8 in ?? () at ../sysdeps/unix/sysv/linux/arm/clone.S:76 from /lib/libc.so.6\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n```"
      },
      {
        "user": "swgillespie",
        "created_at": "2017-08-23T17:12:30Z",
        "body": "Unfortunately this is a pretty general call stack indicating that the heap has gotten corrupted in some way, which can happen for a lot of reasons. Can you use LLDB and SOS to run the `sos VerifyHeap` command when you see the SEGV?"
      },
      {
        "user": "Tragetaschen",
        "created_at": "2017-08-24T13:43:19Z",
        "body": "What is CoreCLR's behavior when the system runs out of memory on linux(-arm)?\r\n\r\nBackground: I had a little misconfiguration on my embedded measurement hardware: Our FPGA writes into a DMA ring buffer, the .NET core application `mmap`s that memory and copies the data into `new`ed arrays for further processing. However, the input data rate was too high for the processing to catch up and so the `net462` build running on Mono slowly fills up the instrument's memory until eventually the kernel's OOM killer does its job and terminates the Mono process.\r\n\r\nWith a reduced data rate, my application runs just fine as `netcoreapp2.0`.\r\n\r\nI tried lldb, but it fails to start. I need to dig in a little further."
      },
      {
        "user": "RussKeldorph",
        "created_at": "2018-01-18T02:14:39Z",
        "body": "I assume the original issue is resolved.  Changed to `area-PAL` due to the open question about OOM on Linux/ARM.  Please close if/when there is no further action to be taken on this issue."
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-04-25T00:04:01Z",
        "body": "I'm going to close this issue.\r\n\r\nSuggestion: if a GC or memory issue still exists, try .NET Core 2.1 -- quite a lot of GC and memory issues have been fixed in 2.1 for ARM."
      }
    ]
  },
  {
    "number": 23265,
    "title": "C# new operate bug?",
    "created_at": "2017-08-20T05:49:39Z",
    "closed_at": "2020-01-31T17:27:12Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23265",
    "body": "```c#\r\npublic class ListTest\r\n{\r\n    public List<int> MyList;\r\n    public ListTest()\r\n    {\r\n        MyList = new List<int> { 1, 2, 3 };\r\n    }\r\n}\r\n\r\nvar listTest = new ListTest()\r\n{\r\n    MyList = {4,5,6}\r\n};\r\n```\r\n\r\nDo you know the value of listTest.MyList ???\r\n\r\nIt would be {1,2,3,4,5,6}   (on .net framework 4.6.1)\r\n\r\nSomeone can explain that??\r\n\r\n[EDIT] Fixed proper code formatting by @karelz",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23265/comments",
    "author": "TimRowe",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2017-08-20T05:59:32Z",
        "body": "This is really a C# language question. Collection initialization works by calling collection's Add method so your `MyList = {4,5,6}` is really:\r\n```c#\r\nlistTest.MyList.Add(4);\r\nlistTest.MyList.Add(5);\r\nlistTest.MyList.Add(6);\r\n```\r\nBut more importantly:\r\n> C# new operate bug?\r\n\r\nWhat `new`? There's no `new` in `MyList = {4,5,6}` :smile: So there's no reason to expect a new list containing 4, 5 and 6 to be created.\r\n\r\n[EDIT] Added C# syntax highlight by @karelz"
      },
      {
        "user": "TimRowe",
        "created_at": "2017-08-20T06:08:18Z",
        "body": "It's really a big pit !  Someone would forget `new` , but they think they have done that. It's better to raise error without `new` ."
      },
      {
        "user": "mikedn",
        "created_at": "2017-08-20T06:18:39Z",
        "body": ">  It's better to raise error without new.\r\n\r\nThat would block a very common scenario - initializing readonly collection properties:\r\n```C#\r\npublic class ListTest\r\n{\r\n    public List<int> MyList { get; } = new List<int>();\r\n}\r\nvar listTest = new ListTest\r\n{\r\n     // You can't do = new List<int> { 4, 5, 6 } here because the property is readonly\r\n    MyList = { 4, 5, 6 }\r\n};\r\n```"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-08-20T11:25:01Z",
        "body": "From the C#5 spec (all specs after initializers were introduced have similar language):\r\n\r\n> A member initializer that specifies an object initializer after the equals sign is a nested object initializer, i.e. an initialization of an embedded object. Instead of assigning a new value to the field or property, the assignments in the nested object initializer are treated as assignments to members of the field or property. Nested object initializers cannot be applied to properties with a value type, or to read-only fields with a value type.\r\n> \r\n> A member initializer that specifies an object initializer after the equals sign is a nested object initializer, i.e. an initialization of an embedded object. Instead of assigning a new value to the field or property, the assignments in the nested object initializer are treated as assignments to members of the field or property. Nested object initializers cannot be applied to properties with a value type, or to read-only fields with a value type.\r\nA member initializer that specifies a collection initializer after the equals sign is an initialization of an embedded collection. Instead of assigning a new collection to the field or property, the elements given in the initializer are added to the collection referenced by the field or property. The field or property must be of a collection type that satisfies the requirements specified in §7.6.10.3.\r\n\r\nSo the code:\r\n\r\n```c#\r\nvar listTest = new ListTest()\r\n{\r\n    MyList = {4,5,6}\r\n};\r\n```\r\n\r\nShould be equivalent to:\r\n\r\n```c#\r\nvar listTest = new ListTest();\r\nlistTest.MyList.Add(4);\r\nlistTest.MyList.Add(5);\r\nlistTest.MyList.Add(6);\r\n```\r\n\r\nSo `listTest.MyList` should contain `1, 2, 3, 4, 5, 6`. Anything else would be a bug.\r\n\r\n> It's really a big pit ! Someone would forget `new`, but they think they have done that. It's better to raise error without `new`.\r\n\r\nPeople can forget all manner of things, but if the definition of `ListTest` defaults to setting a `MyList` to `{1, 2, 3}` then presumably there's a reason for that. It's just as sensible to use that as a starting point to then add more numbers as it is to use `new` to set something completely different, and the language allows both to be expressed.\r\n\r\nThe code is also analogous to the way that when using a collection initialiser on its own first either `new TheType()` is called or whatever constructor is explicitly used, and then the further items added. E.g.:\r\n\r\n```c#\r\nvar starter = new[] { 1, 2, 3 };\r\nvar list = new List<int>(starter) { 4, 5, 6 };\r\nforeach (int item in list)\r\n{\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\nOutputs the numbers 1 through 6.\r\n\r\nUltimately though the biggest problem would be that if nested collection initialisers didn't go through the constructor included in `ListTest` would break encapsulation. Consider:\r\n\r\n```c#\r\npublic class ListTest\r\n{\r\n\tpublic readonly AddOnlyList<int> MyList;\r\n\tpublic ListTest()\r\n\t{\r\n\t\tMyList = new AddOnlyList<int> { 1, 2, 3 };\r\n\t}\r\n}\r\n```\r\n\r\nIt is part of the class invariant of `ListTest` that `MyList` starts with `1, 2, 3`. If outside code is allowed to break the encapsulation and force other values into it then `ListTest` no longer controls its own invariants and can no longer be reasoned about by its author.\r\n\r\nAlso, there's no reason why a type with `Add()` that implements `IEnumerable` need have a parameterless constructor, so no reason why having the code in the example equivalent to `new TheListType { 4, 5, 6 }` should even be valid.\r\n\r\n[EDIT] Fixed C# syntax highlighting by @karelz"
      },
      {
        "user": "TimRowe",
        "created_at": "2017-08-21T02:29:40Z",
        "body": "@JonHanna,\r\nThanks for your greate answer，I understand now !!!"
      }
    ]
  },
  {
    "number": 23209,
    "title": "[Question] System.Collections.Immutable.ImmutableDictionary reorders",
    "created_at": "2017-08-17T01:16:01Z",
    "closed_at": "2020-01-31T17:23:26Z",
    "labels": [
      "question",
      "area-System.Collections"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23209",
    "body": "This is probably by design to help with the immutable types, but why does an ImmutableDictionary reorder keys after adding?  For example compared to regular Dictionary:\r\n\r\n```c#\r\nImmutableDictionary<string, bool>.Builder isdBuilder = ImmutableDictionary.CreateBuilder<string, bool>();\r\n            isdBuilder.Add(\"one\", false);\r\n            isdBuilder.Add(\"two\", true);\r\n            isdBuilder.Add(\"three\", false);\r\n            isdBuilder.Add(\"four\", false);\r\n            ImmutableDictionary<string, bool> isd = isdBuilder.ToImmutableDictionary();\r\n```\r\n**Not Expected**: The order by keys are \"two\", \"one\", \"three\", \"four\"\r\n\r\n```c#\r\nDictionary<string, bool> dic = new Dictionary<string, bool>();\r\n            dic.Add(\"one\", false);\r\n            dic.Add(\"two\", true);\r\n            dic.Add(\"three\", false);\r\n            dic.Add(\"four\", false);\r\n```\r\n**As Expected**: \"one\", \"two\", \"three\", \"four\"\r\n\r\nI've tried the ImmutableSortedDictionary and appears to reorder by key.  I would like to have it stay in the same order as they are added.\r\n\r\nIs there a way of making the ImmutableDictionary store KeyValuePairs in a specific order?\r\n\r\n[EDIT] Add C# syntax highlight by @karelz",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23209/comments",
    "author": "shaggygi",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-08-17T02:53:42Z",
        "body": "@AArnott "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-08-17T02:54:52Z",
        "body": "Actually I guess I can answer tihs one. Dictionary<K,V> does not preserve ordering either. You are just getting lucky with the keys you picked. You would use SortedDictionary. I do not know whether there is an immutable one."
      },
      {
        "user": "sharwell",
        "created_at": "2017-08-17T04:38:00Z",
        "body": "It sounds like you are looking for the equivalent of Java's LinkedHashMap, but in .NET and as an immutable collection. Currently no such collection exists, but you could create a new collection that maintains both a dictionary and a list as the backing store. "
      },
      {
        "user": "karelz",
        "created_at": "2017-08-17T21:57:52Z",
        "body": "Closing as it seems to be answered."
      },
      {
        "user": "AArnott",
        "created_at": "2017-08-17T22:28:47Z",
        "body": "Yes, @danmosemsft there is an `ImmutableSortedDictionary<K,V>` class in this library. \r\nAnd yes, dictionaries (immutable or otherwise) are generally not _ordered_ collections. So this is by design."
      },
      {
        "user": "shaggygi",
        "created_at": "2017-08-17T22:49:10Z",
        "body": "Thanks for the clarification."
      },
      {
        "user": "jnm2",
        "created_at": "2017-08-18T00:31:02Z",
        "body": "KeyedCollection indexes both by insertion order and key, contains both list and dictionary, no?"
      },
      {
        "user": "Clockwork-Muse",
        "created_at": "2017-08-19T02:33:19Z",
        "body": "@jnm2 - yeah, but there isn't an immutable version.\r\n\r\nI've started to see `List` and anything similar with an index key as essentially another dictionary (indeed, in some cases this is exactly how it's used: \"the item at index 1 is blah, ignore index 2, the item at index 3 is blah2....\").\r\nComing from a more database perspective, I find it interesting that essentially guaranteeing insert order is actually the easier thing to do (where it's almost always irrelevant).\r\n"
      }
    ]
  },
  {
    "number": 23073,
    "title": "Support for Console.MoveBufferArea() on Linux & Mac",
    "created_at": "2017-08-06T11:25:03Z",
    "closed_at": "2020-06-24T12:55:01Z",
    "labels": [
      "question",
      "area-System.Console",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23073",
    "body": "Is there a plan to support Console.MoveBufferArea() on Linux & Mac? Currently it throws a PlatformNotSupportedException on these platforms.\r\n\r\nWithout this feature it seems to me not possible to write in the bottom right corner of the console without losing the first line of the buffer (due to the resulting jump to the next line of the cursor), which is not very useful for text user interfaces.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23073/comments",
    "author": "nilslueders",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-08-06T12:10:11Z",
        "body": "Do you know how to implement it on Linux and Mac. I know quite a few such `Console` methods throw `PlatformNotSupportedException` because it is not possible to implement on Linux/Mac.\r\ncc @ianhays "
      },
      {
        "user": "nilslueders",
        "created_at": "2017-08-06T18:44:32Z",
        "body": "Ok, thanks for pointing this out. I just noticed that\r\n`Console.SetCursorPosition(Console.BufferWidth-1, Console.BufferHeight-1);`\r\n`Console.Write('X')`\r\ndoes _not_ shift the buffer on Linux/Mac like on Windows. (Can you treat this as a feature? :-))"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-08-07T03:08:13Z",
        "body": "@nilslueders would you like to investigate what it might take to implement?"
      },
      {
        "user": "nilslueders",
        "created_at": "2017-08-07T20:14:54Z",
        "body": "One (the only?) way for something similar is tracking the own output to an internal buffer and use this buffer as source. But this might not the expected behaviour as its limited to the own output."
      },
      {
        "user": "ianhays",
        "created_at": "2017-08-07T21:38:19Z",
        "body": "The Console Buffer functions are unsupported on Unix because we couldn't come up with a good way of implementing them. We'd certainly be open to suggestions/proposals, though I am not aware of any Unix functions that would get the behavior close enough to Windows to justify their addition under the same API."
      },
      {
        "user": "jnevins-gcm",
        "created_at": "2018-12-28T04:55:35Z",
        "body": "So netcoreapp2.1 for Unix/Mac does not support the netstandard spec? That seems unexpected... Isn't the purpose of saying \"Platform x implements the netstandard2.0 spec\" supposed to provide some level of confidence that I can take a program uses a netstandard2.0 library and run it on that platform? It seems like we're no better off here than with Mono and that .NET is still just for Windows.\r\n\r\nWhat would be a \"similar\" approach that the netcoreapp2.1 platform for OS X does support? I'd prefer to not have to dive through the platform specific source code to find out the situations where .NET Core is not multi-platform."
      },
      {
        "user": "adamsitnik",
        "created_at": "2020-06-24T12:55:01Z",
        "body": "We did not know how to implement it in 2017 and there was no proposal|suggestion since then so I am just closing it.\r\n\r\nIf somebody has a good idea for how we can implement that, please feel free to reopen the issue."
      }
    ]
  },
  {
    "number": 22988,
    "title": "Converge root scripts for Unix and Windows",
    "created_at": "2017-07-31T14:30:24Z",
    "closed_at": "2020-01-31T17:08:38Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22988",
    "body": "This is intended to be more a question than an issue. Currently we have to the following scripts with each two flavors for Unix and Windows:\r\n- build-managed\r\n- build-native\r\n- build-packages\r\n- build-tests\r\n- build\r\n- clean\r\n- init-tools\r\n- publish-packages\r\n- (run-test.sh)\r\n- run\r\n- sync\r\n\r\nAre there any plans to converge them? If yes, will we use the dotnet-cli for that? If not, what about using cross-platform powershell scripts?\r\n\r\n@weshaggard @ericstj ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22988/comments",
    "author": "ViktorHofer",
    "comments": [
      {
        "user": "Clockwork-Muse",
        "created_at": "2017-07-31T17:02:17Z",
        "body": "...doesn't windows support shell scripts now, too (hey I'm more a windows guy, so approach things from that end, but still....)?"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-07-31T17:23:24Z",
        "body": "cc @dleeapho @markwilkie\r\n\r\n>Are there any plans to converge them? If yes, will we use the dotnet-cli for that? If not, what about using cross-platform powershell scripts?\r\n\r\nUnfortunately there isn't any good thing to converge them on that will work on all the places we need to build. If you look at the scripts our goal is to keep them simple and get into our build engine as quickly as possible and let it do most of the heavy lifting. \r\n\r\nFor now I believe using cmd/ps on windows and sh on unix are our best options without introducing more dependencies in our repo. \r\n\r\nThat said I expect we will likely reduce and/or move some of these scripts out of the root of the repo and under a sub-directory as part of some upcoming engineering work. "
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-07-31T19:48:06Z",
        "body": "I understand the need to use a common lightweight build scripts for various projects. Wouldn't that be possible with cross-platform and still slim ps1s? Is taking a dev-dependency on powershell (opensource version) too much of an issue/blocker?\r\n\r\nThat the root of the repo will be cleanup in a future PR is definitely a step forward 👍 "
      },
      {
        "user": "mellinoe",
        "created_at": "2017-07-31T20:16:32Z",
        "body": "Taking a dependency on PowerShell is not that different in theory from the current \"run tool\", which is a managed app that runs on our toolset. But PowerShell is vastly more complicated, and considerably larger, than run.exe. Also, I think we want to phase out the usage of run.exe for a variety of reasons."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-08-03T18:01:31Z",
        "body": "Another thing to keep in mind is that we need to ensure that we can build the native assets without the need for any managed code to execute otherwise we will have a bootstrapping issue for any new platform (distro, new arch etc) we want to start building on. "
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-08-06T16:22:01Z",
        "body": "> build the native assets without the need for any managed code to execute\r\n\r\nThat means Powershell Core isn't an option as it targets .NET Core (you could also target .NET Framework but obviously that would then limit the runnable platforms). \r\nI think Powershell Core would really have made sense as it _the_ cross platform scripting language pushed by Microsoft and if something would have been missing we could have just submitted a PR."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-08-07T15:52:51Z",
        "body": ">That means Powershell Core isn't an option as it targets .NET Core (you could also target .NET Framework but obviously that would then limit the runnable platforms).\r\n\r\nExactly that is why it isn't really a good option. We have to be able to bootstrap new platforms that cannot run .NET code yet. "
      },
      {
        "user": "dleeapho",
        "created_at": "2017-08-09T14:49:11Z",
        "body": "> For now I believe using cmd/ps on windows and sh on unix are our best options without introducing more dependencies in our repo.\r\n\r\nI agree the current scheme is our best option. Even that duplicates effort and doubles the potential fragility so getting to some lightweight xplat scripting would be goodness.\r\n "
      }
    ]
  },
  {
    "number": 22947,
    "title": "Is it possible to package assemblies during build into individual packages i.e. System.Numerics",
    "created_at": "2017-07-26T19:39:24Z",
    "closed_at": "2020-01-31T17:06:01Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22947",
    "body": "Tried to find code which would allow to pack assemblies in a standard way and in addition each assembly individually - without success. Is it possible or do I have to create additional build code to get it done?\r\n\r\nI need to get normal build output plus all assemblies packaged each in it's own NuGet package.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22947/comments",
    "author": "4creators",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-07-29T00:18:11Z",
        "body": "Are you asking about CoreFX build system or in general?\r\ncc @weshaggard @ericstj "
      },
      {
        "user": "ericstj",
        "created_at": "2017-07-31T15:32:59Z",
        "body": "The `build -allConfigurations` leg of the build produces packages.  Packages must be authored to be included in this leg, see the `.pkgproj` files in the repo for examples."
      },
      {
        "user": "4creators",
        "created_at": "2017-08-02T00:12:17Z",
        "body": "@karelz My question was for CoreFX specifically but general answer regarding all repos participating in build for shipping version of .NET Core would very helpful. Essentially what I am looking for is to build complete shipping (private) version of .NET Core with fine granularity allowing for referencing individual assemblies or runtime. \r\n"
      },
      {
        "user": "4creators",
        "created_at": "2017-08-02T00:14:03Z",
        "body": "@ericstj \r\n\r\n> Packages must be authored to be included in this leg, see the .pkgproj files in the repo for examples.\r\n\r\nMy understanding is that I need to write `.pkgproj `or include packaging info in `.csproj` if this build option is not available for given assembly. Could you confirm that?"
      },
      {
        "user": "weshaggard",
        "created_at": "2018-01-17T23:53:39Z",
        "body": "In corefx to create a library nuget package you need a pkgproj. "
      }
    ]
  },
  {
    "number": 8608,
    "title": "ARM: thumb mode flag generating issue",
    "created_at": "2017-07-20T09:50:47Z",
    "closed_at": "2020-01-31T02:18:18Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8608",
    "body": "Hi, there is a very strange bug in Legacy JIT.\r\n```\r\nif (call->gtCallMoreFlags & GTF_CALL_M_VIRTSTUB_REL_INDIRECT)                                                                                                                                \r\n{                                                                                                                                                                                            \r\n#if CPU_LOAD_STORE_ARCH                                                                                                                                                                                                                                                                                                                                                   \r\n    callReg = regSet.rsGrabReg(compiler->virtualStubParamInfo->GetRegMask());                                                                                                                \r\n    noway_assert(callReg == compiler->virtualStubParamInfo->GetReg());                                                                                                                       \r\n  \r\n    instGen_Set_Reg_To_Imm(EA_HANDLE_CNS_RELOC, compiler->virtualStubParamInfo->GetReg(),                                                                                                    \r\n                           (ssize_t)stubAddr);                                                                                                                                               \r\n    // The stub will write-back to this register, so don't track it                                                                                                                          \r\n    regTracker.rsTrackRegTrash(compiler->virtualStubParamInfo->GetReg());                                                                                                                    \r\n    getEmitter()->emitIns_R_R_I(INS_ldr, EA_PTRSIZE, REG_JUMP_THUNK_PARAM,                                                                                                                   \r\n                                compiler->virtualStubParamInfo->GetReg(), 0);    \r\n                                                                                                                                                                                                                                                                                        \r\n    regTracker.rsTrackRegTrash(REG_JUMP_THUNK_PARAM);                                                                                                                                        \r\n    callTypeStubAddr = emitter::EC_INDIR_R;                                                                                                                                                  \r\n    getEmitter()->emitIns_Call(emitter::EC_INDIR_R,                                                                                                                                          \r\n                               NULL,                                // methHnd                                                                                                               \r\n                               INDEBUG_LDISASM_COMMA(sigInfo) NULL, // addr                                                                                                                  \r\n                               args, retSize, gcInfo.gcVarPtrSetCur, gcInfo.gcRegGCrefSetCur,                                                                                                \r\n                               gcInfo.gcRegByrefSetCur, ilOffset, REG_JUMP_THUNK_PARAM);\r\n```\r\nWhen the symbol is loaded into the register REG_JUMP_THUNK_PARAM, it's without thumb +1 flag.\r\nSymbol is RhpUniversalTransition from CoreRT. I looked at the code, the relocation should be set to thumb mov32, but why the symbol is eventually loaded without +1 is not clear. Can anyone say anything about this?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8608/comments",
    "author": "BredPet",
    "comments": [
      {
        "user": "BredPet",
        "created_at": "2017-07-20T09:51:04Z",
        "body": "@BruceForstall \r\n@jkotas please take a look"
      },
      {
        "user": "jkotas",
        "created_at": "2017-07-20T14:52:12Z",
        "body": "- This path should be taken for virtual or interface calls only. I would not expect this path to be ever taken for `RhpUniversalTransition` symbol. How did we ended up here with `RhpUniversalTransition`?\r\n- The ABI for interface calls is different between CoreCLR and CoreRT today. What is the interface call ABI that you are trying to make work for CoreRT on Linux ARM?\r\n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-07-20T15:27:49Z",
        "body": "@dotnet/jit-contrib "
      },
      {
        "user": "BredPet",
        "created_at": "2017-07-21T07:37:56Z",
        "body": "@sergign60 \r\nCorrect symbol is RhpInitialDynamicInterfaceDispatch at this place, x64 has the same behavior, it loads RhpUniversalTransition at the end. After I implement corresponding stubs, error is gone. I think because of the empty symbols, the pipeline failed in the wrong direction. And RhpInitialDynamicInterfaceDispatch symbol is \"special\" and CoreRT generates the appropriate relocation for it for ObjWriter. Thanks to all!"
      }
    ]
  },
  {
    "number": 22780,
    "title": "Detected package downgrade",
    "created_at": "2017-07-15T10:31:53Z",
    "closed_at": "2020-01-31T16:53:36Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22780",
    "body": "Hi. I have encountered the following issue.\r\n\r\n`Detected package downgrade: Microsoft.NETCore.App from 2.0.0-preview3-25514-02 to 2.0.0-preview2-006497`\r\n\r\nwhile executing `dotnet restore` over a project with following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <DebugType>portable</DebugType>\r\n    <PreserveCompilationContext>true</PreserveCompilationContext>\r\n    <AssemblyName>FoodgetWebapp</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <PackageId>FoodgetWebapp</PackageId>\r\n    <UserSecretsId>FoodgetWebapp-c23d27a4-eb88-4b18-9b77-2a93f3b15119</UserSecretsId>\r\n    <RuntimeFrameworkVersion>2.0.0-preview2-006497</RuntimeFrameworkVersion>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Remove=\"node_modules\\**\\*;Client\\**\\*\" />\r\n    <Content Remove=\"wwwroot\\dist\\**\\*\" />\r\n  </ItemGroup>  \r\n\r\n  <Target Name=\"RunWebpack\" BeforeTargets=\"BeforePublish\">\r\n    <Exec Command=\"npm run clean:dist\" />\r\n    <Exec Command=\"npm run build:prod\" />\r\n    <ItemGroup>\r\n      <DistFiles Include=\"wwwroot\\dist\\**\\*\" />\r\n      <Content Include=\"@(DistFiles)\" CopytoPublishDirectory=\"Always\" />\r\n      <Content Include=\"app.yaml\" CopyToOutputDirectory=\"Always\" />\r\n      <ContentWithTargetPath Include=\"@(DistFiles)\" TargetPath=\"%(Identity)\" CopyToPublishDirectory=\"Always\" />\r\n    </ItemGroup>\r\n  </Target>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0-preview2-006497\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.Introspection\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.Validation\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.AzureAppServicesIntegration\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Antiforgery\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authorization\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Https\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.ResponseCompression\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.WebSockets\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.AngularServices\" Version=\"1.1.0-beta-000002\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.GitHub\" Version=\"1.0.0-rc2-final\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.LinkedIn\" Version=\"1.0.0-rc2-final\" />\r\n    <PackageReference Include=\"OpenIddict\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"OpenIddict.EntityFrameworkCore\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"OpenIddict.Mvc\" Version=\"2.0.0-*\" />\r\n    <PackageReference Include=\"SendGrid.NetCore\" Version=\"1.0.0-rtm-00002\" />\r\n    <PackageReference Include=\"MailKit\" Version=\"1.16.2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerUI\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Twilio\" Version=\"5.3.0\" />\r\n    <PackageReference Include=\"Stripe.net\" Version=\"8.1.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.2\" />\r\n    <PackageReference Include=\"Webpack\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.1-dev-00801\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.1-dev-10155\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Seq\" Version=\"3.2.0\" />\r\n    <PackageReference Include=\"Bogus\" Version=\"15.0.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0-*\">\r\n      <PrivateAssets>All</PrivateAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0-*\">\r\n      <PrivateAssets>All</PrivateAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0-preview2-*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0-*\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0-*\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0-*\" />\r\n    <!-- <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0-*\" /> -->\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0-*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nI am doing something wrong?\r\n\r\n[EDIT] Fixed formatting as xml - @karelz",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22780/comments",
    "author": "ConductedClever",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-07-16T09:21:13Z",
        "body": "@weshaggard is it more question for CLI repo?"
      },
      {
        "user": "ConductedClever",
        "created_at": "2017-07-16T16:52:23Z",
        "body": "I have found the solution. It was because of my weak understanding over package dependencies.\r\nNow, the correct config is as follow:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <DebugType>portable</DebugType>\r\n    <PreserveCompilationContext>true</PreserveCompilationContext>\r\n    <AssemblyName>FoodgetWebapp</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <PackageId>FoodgetWebapp</PackageId>\r\n    <UserSecretsId>FoodgetWebapp-c23d27a4-eb88-4b18-9b77-2a93f3b15119</UserSecretsId>\r\n    <RuntimeFrameworkVersion>2.0.0-preview2-006497</RuntimeFrameworkVersion>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <!-- <PackageTargetFallback>$(PackageTargetFallback);dotnet5.6;portable-net45+win8</PackageTargetFallback> -->\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Remove=\"node_modules\\**\\*;Client\\**\\*\" />\r\n    <Content Remove=\"wwwroot\\dist\\**\\*\" />\r\n  </ItemGroup>  \r\n\r\n  <Target Name=\"RunWebpack\" BeforeTargets=\"BeforePublish\">\r\n    <Exec Command=\"npm run clean:dist\" />\r\n    <Exec Command=\"npm run build:prod\" />\r\n    <ItemGroup>\r\n      <DistFiles Include=\"wwwroot\\dist\\**\\*\" />\r\n      <Content Include=\"@(DistFiles)\" CopytoPublishDirectory=\"Always\" />\r\n      <Content Include=\"app.yaml\" CopyToOutputDirectory=\"Always\" />\r\n      <ContentWithTargetPath Include=\"@(DistFiles)\" TargetPath=\"%(Identity)\" CopyToPublishDirectory=\"Always\" />\r\n    </ItemGroup>\r\n  </Target>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"AspNet.Security.OAuth.Introspection\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.Validation\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.AzureAppServicesIntegration\" Version=\"1.0.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Antiforgery\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authorization\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Https\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.ResponseCompression\" Version=\"1.0.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.WebSockets\" Version=\"1.0.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0-preview2-*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.AngularServices\" Version=\"1.1.0-beta-000002\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.GitHub\" Version=\"1.0.0-beta3-final\" />\r\n    <PackageReference Include=\"AspNet.Security.OAuth.LinkedIn\" Version=\"1.0.0-beta3-final\" />\r\n    <PackageReference Include=\"OpenIddict\" Version=\"1.0.0-*\" />\r\n    <PackageReference Include=\"OpenIddict.EntityFrameworkCore\" Version=\"1.0.0-*\" />\r\n    <PackageReference Include=\"OpenIddict.Mvc\" Version=\"1.0.0-*\" />\r\n    <PackageReference Include=\"SendGrid.NetCore\" Version=\"1.0.0-rtm-00002\" />\r\n    <PackageReference Include=\"MailKit\" Version=\"1.14.2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0-rc3\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerUI\" Version=\"1.0.0-rc3\" />\r\n    <PackageReference Include=\"Twilio\" Version=\"5.3.0\" />\r\n    <PackageReference Include=\"Stripe.net\" Version=\"8.1.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.2\" />\r\n    <PackageReference Include=\"Webpack\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.1-dev-00801\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.1-dev-10147\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Seq\" Version=\"3.2.0\" />\r\n    <PackageReference Include=\"Bogus\" Version=\"15.0.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0-preview2-*\">\r\n      <PrivateAssets>All</PrivateAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0-preview2-*\">\r\n      <PrivateAssets>All</PrivateAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0-preview2-*\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0-preview2-*\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0-preview2-*\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0-preview2-*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThe issue was two-sided. One was the mistake of using 2.0.0-* wildcard over version specifying. So that the latest packages got restored for preview3 but mine was preview2.\r\nThe second mistake was about the packages I was using with version 1.0.0. For example if the package x is in 1.0.0 version or something bellow 2.0.0-preview2-* and it has a dependency to y, the y was also got in version 1.0.0 although I was asking for 2.0.0-preview2-*. So the minimum solution was the config I mentioned above, although I still can grow the versions up."
      }
    ]
  },
  {
    "number": 8527,
    "title": "[RyuJIT/ARM32][Question] status of JIT/superpmi/superpmicollect/superpmicollect.sh",
    "created_at": "2017-07-11T09:03:21Z",
    "closed_at": "2020-01-31T02:13:19Z",
    "labels": [
      "question",
      "arch-arm32",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8527",
    "body": "When running with `COMPlus_AltJit=*`, following test is PASSED with `COMPlus_AltJit already exists: skipping SuperPMI collection and returning success` message.\r\n\r\nCan we just skip and consider it PASSED ?\r\n\r\n```\r\nPASSED   - [6603][  10s]JIT/superpmi/superpmicollect/superpmicollect.sh\r\n               BEGIN EXECUTION\r\n               /home/dotnet_jenkins/workspace/hqueue/Run_coreclr_tests_Checked_ryujit_nyi_all/runtime/tests/Tests/coreoverlay/corerun superpmicollect.exe\r\n               COMPlus_AltJit already exists: skipping SuperPMI collection and returning success\r\n               Expected: 100\r\n               Actual: 100\r\n               END EXECUTION - PASSED\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8527/comments",
    "author": "hqueue",
    "comments": [
      {
        "user": "BruceForstall",
        "created_at": "2017-07-11T17:38:56Z",
        "body": "@hqueue This is a limitation of the way the SuperPMI test works: the test itself sets COMPlus_AltJit, so if COMPlus_AltJit is already set, there is a kind of collision, and it can't do its job.\r\n\r\nIf you really want to test RyuJIT/arm32, you'll need to build it as the \"main\" JIT (don't define ALT_JIT in the build, and name it clrjit.dll), then run the test without setting COMPlus_AltJit.\r\n\r\nI don't think it's necessary to do this for RyuJIT/arm32 yet. There are plenty of other bugs to work on first :-)"
      },
      {
        "user": "hqueue",
        "created_at": "2017-07-11T23:18:07Z",
        "body": "@BruceForstall Thank you for the detailed explanation.\r\nIf so, I also think that it's not necessary now and let's leave it for future task until ryujit/arm32 can be default jit.\r\n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-07-12T20:11:25Z",
        "body": "Assuming this is answered.  Reopen if not."
      }
    ]
  },
  {
    "number": 22685,
    "title": "WinHttpHandler stops possible chain of handlers",
    "created_at": "2017-07-10T17:26:14Z",
    "closed_at": "2020-01-31T16:47:19Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22685",
    "body": "Very simple (at first glance) fix, please make WinHttpHandler inherit DelegatingHandler instead of HttpMessageHandler, so inner handlers can be passed and chained appropriately.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22685/comments",
    "author": "ausmurp",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-07-10T18:18:37Z",
        "body": "Both HttpClientHandler and WinHttpHandler are base handlers.  They inherit from HttpMessageHandler.\r\n\r\nIf you need additional handlers on top of those, you need to create your own new handler that is derived from DegatingHandler.  Your new handler logic will be the \"outer\" handler and then you pass in the HttpClientHandler or WinHttpHandler as the \"inner\" handler.  The actual HTTP protocol stack itself represented by HttpClientHandler or WinHttpHandler should always be the \"inner\" handler as it is the own closest to the transport (wire)."
      },
      {
        "user": "davidsh",
        "created_at": "2017-07-13T18:25:48Z",
        "body": "Closing this now since the question has been answered. The current behavior is by-design."
      }
    ]
  },
  {
    "number": 8501,
    "title": "[RyuJIT] Opcode's offset calculation during importation",
    "created_at": "2017-07-06T12:00:40Z",
    "closed_at": "2020-01-31T02:11:38Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8501",
    "body": "In `Compiler::impImportBlockCode` method if opcode is `CEE_PREFIX1` firstly we change` codeAddr` and then calculate `opcodeOffs`:\r\n```\r\ncase CEE_PREFIX1:\r\n    opcode = (OPCODE)(getU1LittleEndian(codeAddr) + 256);\r\n    codeAddr += sizeof(__int8);\r\n    opcodeOffs = (IL_OFFSET)(codeAddr - info.compCode);\r\n    goto DECODE_OPCODE;\r\n```\r\nThe same situation for `PREFIX` label:\r\n```\r\nPREFIX:\r\n    opcode = (OPCODE)getU1LittleEndian(codeAddr);\r\n    codeAddr += sizeof(__int8);\r\n    opcodeOffs = (IL_OFFSET)(codeAddr - info.compCode);\r\n    goto DECODE_OPCODE;\r\n```\r\nIn this case for following IL code:\r\n```\r\nconstrained. var<u1>\r\ncallvirt instance int32 [System.Private.CoreLib]System.Object::GetHashCode()\r\n```\r\n`opcodeOffs` for `callvirt` points to the 2nd byte of the instruction, because after processing `constrained.` we goto `PREFIX` label.\r\nI think we should firstly calculate offset and then change codeAddr (in this case offset points to the 1st byte of instruction as expected). Is it correct?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8501/comments",
    "author": "kbaladurin",
    "comments": [
      {
        "user": "kbaladurin",
        "created_at": "2017-07-06T13:41:39Z",
        "body": "cc @Dmitri-Botcharnikov @ayuckhulk"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-07-12T20:09:49Z",
        "body": "@dotnet/jit-contrib "
      },
      {
        "user": "kbaladurin",
        "created_at": "2017-09-01T05:50:40Z",
        "body": "Fixed in dotnet/coreclr#13685"
      }
    ]
  },
  {
    "number": 22442,
    "title": "Quiet msbuild mode",
    "created_at": "2017-06-23T04:52:09Z",
    "closed_at": "2020-01-31T16:30:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22442",
    "body": "Can we get a build mode, maybe `msbuild /T:BuildAndTest /P:Quiet=true` that gets rid of all the build logs and just prints out the test results?\r\n\r\nThis is useful to compare test failures and I don't really care about what's compiling.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22442/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "ViktorHofer",
        "created_at": "2017-06-23T09:45:54Z",
        "body": "Yes verbosity switch set to minimal: `/v:m`"
      },
      {
        "user": "hughbe",
        "created_at": "2017-06-23T09:47:12Z",
        "body": "amazing! cheers"
      }
    ]
  },
  {
    "number": 8371,
    "title": "Fix holes in the native perf map",
    "created_at": "2017-06-16T22:33:08Z",
    "closed_at": "2020-01-31T02:03:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8371",
    "body": "Trying to perf analyze :\r\n`JIT/Performance/CodeQuality/BenchmarksGame/binarytrees/binarytrees/binarytrees.exe`\r\n\r\nWhen I perf record, I am seeing events occur between functions.  I am trying to figure out what is executed between methog functions.  PreStubs?  Is there a reason we cannot emit these into the perf map.\r\n\r\nIf I look at the perfmap of a native image:\r\n `crossgen /Platform_Assemblies_Paths ~/coreoverlay /CreatePerfMap . binarytrees.ni.exe`\r\n```\r\n0000000000021200 2d0 bool [binarytrees] BenchmarksGame.BinaryTrees::Bench(bool)\r\n00000000000214D0 1c4 void [binarytrees] BenchmarksGame.BinaryTrees::Test()\r\n00000000000216A0 50 bool [binarytrees] BenchmarksGame.BinaryTrees::TestBase()\r\n00000000000216F0 3c int32 [binarytrees] BenchmarksGame.BinaryTrees::Main()\r\n0000000000021730 10 instance void [binarytrees] BenchmarksGame.BinaryTrees::.ctor()\r\n0000000000021740 18 instance void [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::.ctor(int32)\r\n0000000000021760 144 valuetype BenchmarksGame.BinaryTrees/TreeNode [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::bottomUpTree(int32,int32)\r\n00000000000218B0 a4 instance void [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::.ctor(valuetype BenchmarksGame.BinaryTrees/TreeNode,valuetype BenchmarksGame.BinaryTrees/TreeNode,int32)\r\n0000000000021960 88 instance int32 [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::itemCheck()\r\n00000000000219F0 10 instance void [binarytrees] BenchmarksGame.BinaryTrees+TreeNode+Next::.ctor()\r\n```\r\n\r\nThe result is fairly packed except each function is aligned to a 16-byte boundary.\r\n\r\nIf I look at the map generated by running with the IL. `export COMPlus_PerfMapEnabled=1`\r\n```\r\n0000FFFF1BFC0888 2c int32 [binarytrees] BenchmarksGame.BinaryTrees::Main()\r\n0000FFFF1BFC08D0 40 bool [binarytrees] BenchmarksGame.BinaryTrees::TestBase()\r\n0000FFFF1BFC1360 24c bool [binarytrees] BenchmarksGame.BinaryTrees::Bench(bool)\r\n0000FFFF1BFC17F8 114 valuetype BenchmarksGame.BinaryTrees/TreeNode [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::bottomUpTree(int32,int32)\r\n0000FFFF1BFC1930 70 instance int32 [binarytrees] BenchmarksGame.BinaryTrees+TreeNode::itemCheck()\r\n0000FFFF1BFC32F8 1b8 class [System.Runtime]Microsoft.Win32.SafeHandles.SafeFileHandle [System.Console] dynamicClass::IL_STUB_PInvoke(class [System.Runtime]Microsoft.Win32.SafeHandles.SafeFileHandle)\r\n0000FFFF1BFC34E8 170 int32 [System.Console] dynamicClass::IL_STUB_PInvoke(class [System.Runtime]Microsoft.Win32.SafeHandles.SafeFileHandle,valuetype Interop/Sys/FileStatus&)\r\n0000FFFF1BFC4A50 170 int32 [System.Console] dynamicClass::IL_STUB_PInvoke(class [System.Runtime]Microsoft.Win32.SafeHandles.SafeFileHandle,uint8*,int32)\r\n```\r\nThe reported size of each function is smaller.  However, the code sizes in the perfmap seem to match the code size reported by `JitDisasm=*`\r\n\r\nThere are erratic gaps within the perf map.  The gaps seem to correlate to the difference in size between crossgen and JIT.\r\n\r\n\r\n@jkotas @janvorli  @brianrob @dotnet/jit-contrib Any Ideas?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8371/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-06-17T00:46:20Z",
        "body": "> I am trying to figure out what is executed between method functions. PreStubs? \r\n\r\nYes, they are likely some kind of stubs.\r\n\r\n> Is there a reason we cannot emit these into the perf map.\r\n\r\nI do not think there is a good reason. Just that nobody has done it."
      },
      {
        "user": "sdmaclea",
        "created_at": "2017-06-22T16:23:03Z",
        "body": "@jkotas Thanks.  I initially was seeing 5% of perf data hitting in these blind spots.  I just collected a trace from an important benchmark whixh had 70% hitting in these blind spots.  I will instrument them."
      },
      {
        "user": "sdmaclea",
        "created_at": "2017-06-23T21:44:30Z",
        "body": "The 70% was a perf bug/misunderstanding, but since I had instrumented the stubs first I have pushed PR dotnet/coreclr#12437 "
      },
      {
        "user": "sdmaclea",
        "created_at": "2017-07-27T21:53:06Z",
        "body": "Major holes were fixed by dotnet/coreclr#12437"
      }
    ]
  },
  {
    "number": 22303,
    "title": "Need options for System information",
    "created_at": "2017-06-15T05:27:31Z",
    "closed_at": "2020-01-31T16:20:56Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22303",
    "body": "_From @vnd-edu on June 15, 2017 5:21_\n\n## Steps to reproduce\r\nI am migrating Asp.net web application in .net core. i am not getting any api to find system information.\r\n\r\n## Expected  behavior\r\nin .net application i used System.management api to run query and get the all information.\r\n\r\n## Actual behavior\r\nhow to get system information like processor id , system installed date and time?\r\nPlease help me out.\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#6883_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22303/comments",
    "author": "livarcocc",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-06-15T05:58:39Z",
        "body": "System.Management namespace is tracked in dotnet/runtime#19785. Closing as dupe.\r\n\r\nWe may have a few APIs in System.Runtime.RuntimeInfo and in Process, but probably not what you need."
      }
    ]
  },
  {
    "number": 8294,
    "title": "How can I debug Access Violation Exception on .net core 2 preview?",
    "created_at": "2017-06-06T08:33:45Z",
    "closed_at": "2020-01-31T01:59:29Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8294",
    "body": "Hi,\r\n\r\n I am receiving Access Violation Exception in my .net core 2 application, when this happens the debugger terminates and I have no way of knowing where the program was when this happened.\r\n\r\nIn full .net I could have set mixed mode debugging, however I cant see how to set this for .net core 2 projects.\r\n\r\nThanks in advance.\r\n\r\n@mikem8361 I'm mentioning you since I think you work on the debugger and may know. :)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8294/comments",
    "author": "danwalmsley",
    "comments": [
      {
        "user": "mikem8361",
        "created_at": "2017-06-06T22:02:23Z",
        "body": "You could try windbg/cdb and SOS. \r\n\r\nOn Windows .NET Core 2.0 does  support mixed mode debug but there seems to be problems with VS Launch (see dotnet/coreclr#8603).  "
      },
      {
        "user": "danwalmsley",
        "created_at": "2017-06-13T10:49:11Z",
        "body": "@mikem8361 I used windbg for now thanks 👍 "
      }
    ]
  },
  {
    "number": 22096,
    "title": "javascript : Need to update WINJS to provide more support for JavaScript Windows UWP APIs  ",
    "created_at": "2017-06-02T02:59:10Z",
    "closed_at": "2020-01-31T16:07:10Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22096",
    "body": "There are very many web developers or JS developers who are excited to use JS or JavaScript for development in UWP. Now I've been using WINJS, but it's been a long time since it's been updated, and the new API is not going to happen. I hope you can continue to update Winjs. At the same time hope that UWP can introduce JS part of the function.\r\n\r\n----------------------------------------------\r\n有非常非常多的网页开发人员或是node.js 开发人员，如果能在 UWP 中使用 node.js 或是 Javascript 做开发，是非常另人兴奋的。现在我一直在使用 WinJS，但是已经很长一段时间没有再更新过了，新的 API 也没有办法实现。希望可以继续更新 WinJS。同时希望UWP能引入 node.js 的部分功能。",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22096/comments",
    "author": "Linrstudio",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-06-02T13:29:01Z",
        "body": "@Linrstudio you are on the wrong GitHub repo. Please find the right place for your WinJS questions.\r\n\r\nI wonder what lead you to our CoreFX repo?"
      },
      {
        "user": "karelz",
        "created_at": "2017-06-02T13:32:41Z",
        "body": "Similar to dotnet/corefx#20615"
      }
    ]
  },
  {
    "number": 8224,
    "title": "[Question] Testing DAC compliance of changes in code base",
    "created_at": "2017-05-24T14:37:09Z",
    "closed_at": "2020-01-31T01:55:44Z",
    "labels": [
      "question",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8224",
    "body": "Hello.\r\n\r\nWhat is the sufficient way to test changes that involve DAC-mode?\r\n\r\nI think of running debugger tests as one of possible ways.\r\nHowever, may be it doesn't provide enough coverage for changed code paths.\r\n\r\nAlso, I think of a special build configuration, which would allow to run general test suite, while checking the executed code paths for DAC-compliance.\r\nIs there any existing build configuration that would allow this?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8224/comments",
    "author": "ruben-ayrapetyan",
    "comments": [
      {
        "user": "ruben-ayrapetyan",
        "created_at": "2017-05-24T14:39:13Z",
        "body": "cc: @jkotas @mikem8361"
      },
      {
        "user": "mikem8361",
        "created_at": "2017-05-24T16:55:33Z",
        "body": "I know of no special build that would test the DAC. The debugger test suite is it. We currently don't have the resources to do a special build configuration.  I'm not sure if it is even possible to really test the DAC that way."
      },
      {
        "user": "ruben-ayrapetyan",
        "created_at": "2017-05-24T17:01:02Z",
        "body": "@mikem8361, thank you for your answer.\r\n\r\nWould it be possible to add debugger test suite in CI, to perform the check automatically?\r\nAs far as I know, the test suite is currently internal and so its contents are not available to public.\r\nHowever, can it be possible to add the test suite to a CI job with only `PASS`/`FAIL` statuses, without opening the test suite to public?"
      },
      {
        "user": "mikem8361",
        "created_at": "2017-05-24T17:05:14Z",
        "body": "We are working on doing that.  Not sure the exactly schedule because it requires some general test/CI infrastructure work to allow to use a private repo (debuggertests) in a public one (coreclr).\r\n\r\n/cc: @Lorenzo Tessiore<mailto:lorenzte@microsoft.com>\r\n"
      },
      {
        "user": "ruben-ayrapetyan",
        "created_at": "2017-05-24T17:12:41Z",
        "body": "@mikem8361, we currently work on set of changes that can significantly affect DAC functionality (the first of them is pull request dotnet/coreclr#11394). Until the CI is not available, could we ask you to check the changes using the debugger test suite, when we will consider the changes are ready from other view points?\r\n\r\ncc: @Dmitri-Botcharnikov @gbalykov "
      }
    ]
  },
  {
    "number": 8163,
    "title": "Assembly.LoadModule/AssemblyBuilder.LoadModule Not Implemented by Design",
    "created_at": "2017-05-20T00:15:18Z",
    "closed_at": "2020-01-31T01:52:26Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8163",
    "body": "Howdy,\r\n\r\nI am sure I am late to the party on this one, but what is the current reason why we are not supporting Assembly.LoadModule(string name, byte[] rawCoff) / AssemblyBuilder.LoadModule?  I noticed in .NET 4.0 this method was removed, just trying to understand why and what is the suggested workarounds?\r\n\r\nThanks in adavance!\r\n\r\nAdam",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8163/comments",
    "author": "evo01",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-10-25T03:49:00Z",
        "body": "LoadModule is used to load multi-module assemblies. Multi-module assemblies are not supported by .NET Core."
      }
    ]
  },
  {
    "number": 21807,
    "title": "How do I generate Nuget package for an assembly in CoreFx",
    "created_at": "2017-05-19T02:28:23Z",
    "closed_at": "2020-01-31T15:48:09Z",
    "labels": [
      "question",
      "area-System.Data.SqlClient"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21807",
    "body": "I am trying to create a Nuget package in CoreFx for System.Data.SqlClient using build-packages.cmd\r\nHowever that only creates the packages for Microsoft.* .nupkg\r\n\r\nHow do I go about creating a package for System.Data.SqlClient or any other assembly? ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21807/comments",
    "author": "saurabh500",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-05-19T16:48:14Z",
        "body": "cc: @weshaggard \r\n\r\nIndividual NuGet packages for each library are no longer produced except for a few ones.  Aggregate NuGet packages are created instead containing many libraries.  @weshaggard and @ericstj can explain more."
      },
      {
        "user": "ericstj",
        "created_at": "2017-05-19T17:13:12Z",
        "body": "SqlClient still has a package.  If you just want to build its package you can directly build the pkgproj.  If you'd like to build all packages you can run `build -allConfigurations` from the root. You can use `build-packages -allConfigurations`, but that assumes you have done at least one `build -allConfigurations` from the root."
      }
    ]
  },
  {
    "number": 8071,
    "title": "dotnet build failed",
    "created_at": "2017-05-12T10:44:27Z",
    "closed_at": "2020-01-31T01:47:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8071",
    "body": "I have just installed documentation in the VS 2017 Help Viewer and am attempting to complete the first C# Tutorial which is for a console application:\r\nThe initial instructions are : \r\nin a command window enter\r\ndotnet new console   ( to which I had to add -all)                      .... this worked ok\r\ndotnet restore                                                                             .... this worked ok\r\ndotnet build                                                                                .... this failed as follows\r\n\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(225,99): error CS0117: 'Environment' does not contain a definition for 'GetFolderPath' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(225,125): error CS0117: 'Environment' does not contain a definition for 'SpecialFolder' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(232,88): error CS0117: 'Environment' does not contain a definition for 'GetFolderPath' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(232,114): error CS0117: 'Environment' does not contain a definition for 'SpecialFolder' [C:\\Windows\\System32\\system32.csproj]\r\n\r\nBuild FAILED.\r\n\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(225,99): error CS0117: 'Environment' does not contain a definition for 'GetFolderPath' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(225,125): error CS0117: 'Environment' does not contain a definition for 'SpecialFolder' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(232,88): error CS0117: 'Environment' does not contain a definition for 'GetFolderPath' [C:\\Windows\\System32\\system32.csproj]\r\nWindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\DSCClassResources\\WindowsPackageCab\\WindowsPackageCab.cs(232,114): error CS0117: 'Environment' does not contain a definition for 'SpecialFolder' [C:\\Windows\\System32\\system32.csproj]\r\n    0 Warning(s)\r\n    4 Error(s)\r\n\r\n\r\nCan anyone please advise what I need to do to overcome this problem ?\r\n\r\nThanking you in anticipation.\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8071/comments",
    "author": "Whomsonever",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-05-12T15:05:30Z",
        "body": "> dotnet new console\r\n> dotnet restore\r\n> dotnet build\r\n\r\nTry to execute these steps in a new empty directory.\r\n\r\nThe error suggest that you have done them in c:\\windows\\system32 and unrelated powershell files under this directory are getting picked up by `dotnet build` causing the error. `dotnet build` will try to build everything under current directory by default."
      },
      {
        "user": "Whomsonever",
        "created_at": "2017-05-12T16:02:51Z",
        "body": "Dear JKotas,\r\nThank you for your prompt response, but I do not understand what to do.\r\n\r\nI would agree that the first time I attempted this tutorial that I probably just opened a standard command prompt whereas the second time (with the errors shown above) I used a Developer Command Prompt for VS2017 as administrator.\r\n\r\nDo I need to delete a folder in system32 or run a command to clean a folder or ?\r\n\r\nThank you"
      },
      {
        "user": "jkotas",
        "created_at": "2017-05-12T16:09:04Z",
        "body": "Try this:\r\n\r\n```\r\nmkdir c:\\HelloWorld\r\ncd /d c:\\HelloWorld\r\ndotnet new console\r\ndotnet restore\r\ndotnet build\r\n```"
      },
      {
        "user": "Whomsonever",
        "created_at": "2017-05-13T01:04:32Z",
        "body": "Dear JKotas,\r\n\r\nWorked a treat !\r\n\r\nMany thanks for the time you took to help and for your invaluable assistance."
      }
    ]
  },
  {
    "number": 21445,
    "title": "UnderlyingSystemType replacement in .NET Standard1.4",
    "created_at": "2017-05-01T05:40:39Z",
    "closed_at": "2020-01-31T15:24:25Z",
    "labels": [
      "question",
      "area-System.Reflection"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21445",
    "body": "I've some NETFX code that I'm trying to compile for .NET Standard 1.4 and one of the issues I'm facing is how to replace UnderlyingSystemType property on the Type object.\r\n\r\nI see that this has been exposed from TypeInfo class for .NET Standard 1.5 and 1.6 but I'm looking for an equivalent in .NET Standard 1.4\r\n\r\nAny suggestions?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21445/comments",
    "author": "rnagpal",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-05-01T19:35:57Z",
        "body": "What do you use it for? What is your scenario?"
      },
      {
        "user": "ghost",
        "created_at": "2018-09-11T18:31:32Z",
        "body": "Closing due to lack of response."
      }
    ]
  },
  {
    "number": 21435,
    "title": "Question: Visual Studio Designer Integration for .Net Core/.Net Standard 2.0",
    "created_at": "2017-04-29T07:47:49Z",
    "closed_at": "2020-01-31T15:23:42Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21435",
    "body": ".Net Standard 2.0 and .Net Core 2.0 have included APIs in `System.ComponentModel` for building and extending the Visual Studio designer (e.g `Component` class, `DesignerAttribute`, `TypeConverter`, etc..) \r\n\r\nHowever, if one tries to use these classes in the current release of Visual Studio 2017 to create designers for their classes, Visual Studio displays errors in the designer like\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Text;\r\n\r\nnamespace CoreDesignerTest\r\n{\r\n    public class Class1 : Component\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nIn Visual Studio, right-click on the \"Class1.cs\" node and choose \"View Designer\".\r\n\r\n> Could not load file or assembly 'System.ComponentModel.Primitives, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. \r\n\r\nWith some hacking in my .config files, I can resolve the above error, but eventually Visual Studio fails to load the .Net Core assemblies with an \"Invalid Format\" error.\r\n\r\nI'm assuming this is due to the fact that Visual Studio, being a .Net Framework-based application, is trying to load a .Net Core assembly into a .Net Framework application, and therefore failing.\r\n\r\nMy question is, with the coming release of .Net Core 2.0 and .Net Standard 2.0, will there also be an accompanying Visual Studio update that will provide the ability to create designers for .Net Core 2.0 and .Net Standard 2.0 classes?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21435/comments",
    "author": "JinShil",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-04-29T08:12:38Z",
        "body": "If VS changes are needed (which is IMO likely), there will be accompanying VS update.\r\n\r\nI wonder if this is more related to Desktop magic retargeting pack (or whatever we call it) -- @weshaggard @ericstj?"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-04-30T00:20:45Z",
        "body": "@davkean "
      },
      {
        "user": "weshaggard",
        "created_at": "2017-05-01T17:13:56Z",
        "body": "Eventually we will likely have VS designer support for .NET Core components but I don't expect that to come online in the next VS update. Most of the Component design is around WinForms and WPF support which is not a target for .NET Core (at least not at this time). \r\n\r\nThe errors you are seeing are related to the fact that the inbox .NET Framework doesn't know about most of these .NET Core assembly identities so your assumption of the mixing between .NET Framework and .NET Core is the reason this scenario is broken. "
      },
      {
        "user": "karelz",
        "created_at": "2017-05-01T18:13:05Z",
        "body": "Seems to be answered by @weshaggard, closing. Please let us know if you need more info (we can reopen again), thanks!"
      },
      {
        "user": "davkean",
        "created_at": "2017-05-01T22:57:11Z",
        "body": "This issue was moved to dotnet/project-system#2100"
      },
      {
        "user": "davkean",
        "created_at": "2017-05-01T22:57:50Z",
        "body": "Let's capture this bug, though. I've moved it over to project-system for the moment."
      }
    ]
  },
  {
    "number": 21365,
    "title": "WMI support in NetStandard 1.5",
    "created_at": "2017-04-25T16:46:32Z",
    "closed_at": "2020-01-31T15:19:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21365",
    "body": "Folks,\r\n\r\ncan you tell if WMi is supported in NetStandard 1.5? I cannot find System.Management namespace ....\r\n\r\nIf not supported, do you plan to supported it and when?\r\n\r\nThanks a million ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21365/comments",
    "author": "JosepBalague",
    "comments": [
      {
        "user": "ViktorHofer",
        "created_at": "2017-04-25T17:09:23Z",
        "body": "I doubt it will ever be added to netstandard as WMI is Windows specific. Netstandard (minus a few exceptions) only contains APIs which are cross-platform in nature."
      },
      {
        "user": "karelz",
        "created_at": "2017-04-26T01:02:58Z",
        "body": "Looks like dupe of dotnet/runtime#19785 to add it into .NET Core."
      },
      {
        "user": "JosepBalague",
        "created_at": "2017-04-26T10:19:06Z",
        "body": "Thanks karelz for your update"
      }
    ]
  },
  {
    "number": 21340,
    "title": "[netcoreapp2.0] 'AppDomain.CurrentDomain.GetAssemblies()' doesn't return the emitted dynamic assembly",
    "created_at": "2017-04-24T22:21:37Z",
    "closed_at": "2020-01-31T15:17:17Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21340",
    "body": "`AppDomain.CurrentDomain.GetAssemblies()` doesn't return dynamically emitted assemblies.\r\n\r\n**Repro**\r\n```c#\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace Sample\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            AssemblyName aName = new AssemblyName(\"Microsoft.PowerShell.Cmdletization.GeneratedTypes\");\r\n            AssemblyBuilder ab = AssemblyBuilder.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run);\r\n            ModuleBuilder mb = ab.DefineDynamicModule(aName.Name);\r\n\r\n            string fullEnumName = \"Microsoft.PowerShell.Cmdletization.GeneratedTypes.TestEnum\";\r\n            Type underlyingType = typeof(Int32);\r\n            EnumBuilder eb = mb.DefineEnum(fullEnumName, TypeAttributes.Public, underlyingType);\r\n\r\n            eb.DefineLiteral(\"Single\", 0);\r\n            eb.DefineLiteral(\"Multiple\", 1);\r\n\r\n            TypeInfo ti = eb.CreateTypeInfo();\r\n\r\n            Console.WriteLine(\"Dynamic assembly emitted: {0}\", ti.Assembly.FullName);\r\n\r\n            bool isEmittedAssemblyFound = false;\r\n            var allAssemblies = AppDomain.CurrentDomain.GetAssemblies();\r\n            foreach (Assembly item in allAssemblies)\r\n            {\r\n                if (item.FullName == ti.Assembly.FullName)\r\n                {\r\n                    isEmittedAssemblyFound = true;\r\n                    Console.WriteLine(\"Found it\");\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!isEmittedAssemblyFound)\r\n            {\r\n                Console.WriteLine(\"AppDomain.CurrentDomain.GetAssemblies() doesn't return the emitted dynamic assemlby\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n**Expected Result**\r\nThe program prints `Found it`\r\n\r\n**Actual Result**\r\n```\r\nDynamic assembly emitted: Microsoft.PowerShell.Cmdletization.GeneratedTypes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nAppDomain.CurrentDomain.GetAssemblies() doesn't return the emitted dynamic assemlby\r\n```\r\nAren't dynamically emitted assembly loaded in the default assembly load context? Why `AppDomain.CurrentDomain.GetAssemblies()` not returning them?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21340/comments",
    "author": "daxian-dbw",
    "comments": [
      {
        "user": "daxian-dbw",
        "created_at": "2017-04-24T22:33:27Z",
        "body": "@gkhanna79 is this a bug or another by-design behavior change?"
      },
      {
        "user": "karelz",
        "created_at": "2017-04-25T00:30:48Z",
        "body": "@gkhanna79 who can answer it?"
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-04-25T00:52:36Z",
        "body": "> Aren't dynamically emitted assembly loaded in the default assembly load context?\r\n\r\nDynamically emitted assemblies are loaded in the load context of the assembly that emitted them. Which LoadContext does your repro emit them in?"
      },
      {
        "user": "daxian-dbw",
        "created_at": "2017-04-25T00:54:51Z",
        "body": "> Which LoadContext does your repro emit them in?\r\n\r\nIt's in the default load context. You can see from the repro snippet, no additional load context is involved."
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-04-25T06:37:42Z",
        "body": "@daxian-dbw Do you get the expected behavior on Desktop?"
      },
      {
        "user": "daxian-dbw",
        "created_at": "2017-04-25T16:30:53Z",
        "body": "Yes, `AppDomain.CurrentDomain.GetAssemblies` returns the dynamic assembly as expected on Desktop.\r\n```\r\nF:\\temp>test.exe\r\nDynamic assembly emitted: Microsoft.PowerShell.Cmdletization.GeneratedTypes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\nFound it\r\n```"
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-04-28T18:21:01Z",
        "body": "PR with fix is out."
      }
    ]
  },
  {
    "number": 21283,
    "title": "How to check whether the PipeStream has data or not",
    "created_at": "2017-04-23T17:48:56Z",
    "closed_at": "2020-01-31T15:13:47Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21283",
    "body": "In .NET, the pipe API doesn't expose any property the application can use in order to decide whether it's worth involving a Read operation or not. \r\n\r\nThe other posts on this subject suggest using the async reading and CancellationToken for this. I don't like this very much because the Exception is intended to be used for exceptional cases only. Raising an OperationCancelledException every few milliseconds doesn't sound very appealing. \r\n\r\nAnyway, I tried that, as well. The reason I am writing this post is the fact that to me it seems the ReadAsync doesn't work either for this purpose. I guess this is because ReadAsync deals with unmanaged IO operations. IMO cancelling should, however, be possible when using PipeOptions.Asynchronous.\r\n\r\nPlease see the code below; it's the Main of a console application. The code contains comments explaining what are the actual and the expected behaviors. \r\n\r\nThank you, Ernest. \r\n\r\n```csharp\r\n// This is the Main of a console application\r\npublic void  Main()\r\n{\r\n    // This code is intended to verify if ReadAsync can be used to check the pipe doesn't have any data.\r\n\t\r\n\tstring pipeName = \"XYZ\";\r\n\t\r\n\t// create the server (async)pipe and put it listenting mode\r\n\tvar serverPipe = new System.IO.Pipes.NamedPipeServerStream(pipeName, System.IO.Pipes.PipeDirection.InOut,1,System.IO.Pipes.PipeTransmissionMode.Byte,System.IO.Pipes.PipeOptions.Asynchronous);\r\n\tvar connWaiterTask = serverPipe.WaitForConnectionAsync();\r\n\t\r\n\t// create the client pipe and connect it to server. The client intentionally doesn't send any data to the server.\r\n\tvar clientPipe = new System.IO.Pipes.NamedPipeClientStream(\"localhost\", pipeName, System.IO.Pipes.PipeDirection.InOut); //, System.IO.Pipes.PipeOptions.Asynchronous);\r\n\tclientPipe.Connect();\r\n\r\n        // prepare a cancellation source for ReadAsync\r\n\tSystem.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();\r\n\tbyte[] inBuffer = new byte[1];\r\n\t\r\n\ttry\r\n\t{\r\n                // invoke ReadAsync on the server pipe and immediately cancel the passed in cancellation token.\r\n\t\tvar readAsyncTask =  serverPipe.ReadAsync(inBuffer,0,1, cts.Token);\r\n\t\tSystem.Threading.Thread.Sleep(50);\r\n\t\tcts.Cancel();  // cancel ReadAsync\r\n\t\t\r\n\t\t//clientPipe.WriteByte(1); // If the client sends some data, it unblocks the ReadAsync on server side \r\n\t\t\r\n\t\tint n = readAsyncTask.Result; // The token is cancelled at this time, but ReadAsync doesn't seem to be aware of this. This line blocks indefinitely if the client doesn't send any data. \r\n\t}\r\n\tfinally\r\n\t{\r\n\t\t// The execution never gets here. Why?\r\n\t\tConsole.WriteLine(\"FINISH\");\r\n\t}\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21283/comments",
    "author": "ernest-morariu",
    "comments": [
      {
        "user": "ianhays",
        "created_at": "2017-04-25T21:28:05Z",
        "body": "I am unable to repro this on the latest netcoreapp. I put your sample code in a test and it passed with the \"FINISH\" printed out."
      }
    ]
  },
  {
    "number": 21269,
    "title": "Attempt to improve no unobserved task exception being raised when trying to await null task",
    "created_at": "2017-04-21T20:24:09Z",
    "closed_at": "2020-01-31T15:12:42Z",
    "labels": [
      "question",
      "area-System.Threading.Tasks"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21269",
    "body": "My application stopped working after targetting `netcoreapp2.0` while working perfectly fine in `netcoreapp1.1`. While the root cause for that is for another issue, it generated quite interesting scenario that I decided to extract.\r\n\r\nConsider following reproducable case:\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace test {\r\n        internal static class Program {\r\n                private static readonly ManualResetEventSlim ShutdownEvent = new ManualResetEventSlim(false);\r\n\r\n                private static void Main() {\r\n                        AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;\r\n                        TaskScheduler.UnobservedTaskException += OnUnobservedTaskException;\r\n                        Console.WriteLine(\"Start\");\r\n                        Reproduce().Forget();\r\n                        Console.WriteLine(\"Forget\");\r\n                        ShutdownEvent.Wait();\r\n                        Console.WriteLine(\"End\");\r\n                }\r\n\r\n                private static async Task Reproduce() {\r\n                        Console.WriteLine(\"Start inner\");\r\n                        await GetNullTask().ConfigureAwait(false);\r\n                        Console.WriteLine(\"Set event\");\r\n                        ShutdownEvent.Set();\r\n                        Console.WriteLine(\"End inner\");\r\n                }\r\n\r\n                private static Task GetNullTask() { return null; }\r\n\r\n                private static void Forget(this object obj) { }\r\n\r\n                private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e) {\r\n                        Console.WriteLine(\"OnUnhandledException!\");\r\n                }\r\n\r\n                private static void OnUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e) {\r\n                        Console.WriteLine(\"OnUnobservedTaskException!\");\r\n                }\r\n        }\r\n}\r\n```\r\n\r\nAs you can see, `await GetNullTask().ConfigureAwait(false);` is trying to await a `Task` that is null. Thing is, nothing is happening, the function is entirely frozen - no unhandled exception being raised, no unobserved task exception being raised (which should happen), and no function returning - limbo.\r\n\r\n```\r\nroot@debian:~/test/test# dotnet exec bin/test.dll\r\nStart\r\nStart inner\r\nForget\r\n```\r\n\r\nI'm pretty sure this is **really** unwanted - I didn't test if the same behaviour exists in .NET core 1.1, but regardless if it does, I think this should be corrected with proper (unobserved task) exception being raised. Otherwise there is no way to even guess that some problem occured, and unobserved task exception event is the function that should catch situation like that.\r\n\r\nOf course there is no issue if we replace `Reproduce().Forget()` with `Reproduce.Wait()`:\r\n\r\n```\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (Object reference not set to an instance of an object.) ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at test.Program.<Reproduce>d__2.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at test.Program.Main()\r\n```\r\n\r\nBut in `Forget()` case, there should still be `TaskScheduler.UnobservedTaskException` being raised.\r\n\r\n```\r\n.NET Command Line Tools (2.0.0-preview1-005825)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005825\r\n Commit SHA-1 hash:  b4a821109d\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         ubuntu.16.10-x64\r\n Base Path:   /opt/dotnet/sdk/2.0.0-preview1-005825/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002028-00\r\n  Build    : 6d0caecf154d3398b9bc0e637089b6af9e250479\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21269/comments",
    "author": "JustArchi",
    "comments": [
      {
        "user": "svick",
        "created_at": "2017-04-22T00:01:25Z",
        "body": "I don't see any issue here, or any change between 1.x and 2.0.\r\n\r\n`UnobservedTaskException` is raised when a `Task` with an unobserved exception is *finalized*. Since you don't trigger GC after the `Task` is forgotten, it doesn't get finalized and so `UnobservedTaskException` is never raised. This has been the behavior since .Net 4.0.\r\n\r\nIf you manually trigger GC by adding `GC.Collect();` after `Reproduce().Forget();` and before `ShutdownEvent.Wait();`, you will see `UnobservedTaskException` being raised.\r\n\r\n<s>The only thing I can think of that could fix this would be if the CLR triggered GC periodically, even when no allocations are happening. That would be a really bad idea in production code (because it would hurt performance just to help debugging), but maybe it could make sense in debug mode? Though it would make debug mode different from release mode, which might be unwanted.</s> I realized this wouldn't be worth it.\r\n\r\nTLDR: I don't think there is any bug or compatibility issue here. <s>But maybe there is a chance to improve the debugging experience.</s>"
      },
      {
        "user": "JustArchi",
        "created_at": "2017-04-22T14:38:12Z",
        "body": "In this case I'm wondering if there is any chance to do something in such case, as if there are no allocations, GC won't kick in and won't handle the exception. Usually this is not a problem as there are more things going on, but in this specific case there is no way to know what happened, as even during debugging it might not be obvious where is the issue, ```GetNullTask()``` could be far more complex function that does return null somewhere. Personally in real-world scenario I triggered it by `await someObject.DoAsync()`, where `someObject` was `null`. This is far more common scenario, the above one was only for reproducing the problem.\r\n\r\nAs this is not a bug, I'm fine with closing the issue, but I'd be happy if maybe we could in some way improve it, as the only thing possible to do right now is launching another task that will periodically call `GC.Collect();`, and as you noticed this is not really the best way to debug the issue, and I believe that there should be some improvement over current situation.\r\n\r\nWouldn't it be possible to add some extra code that would handle faulty tasks and propagate exception immediately instead of handling responsibility to the GC? This is only an idea, I'm sure you could think of something better that would improve programming experience in such case."
      },
      {
        "user": "svick",
        "created_at": "2017-04-22T14:54:24Z",
        "body": "> Wouldn't it be possible to add some extra code that would handle faulty tasks and propagate exception immediately instead of handling responsibility to the GC?\r\n\r\nHow would that code know whether the exception is unobserved? Or do you want a way to get notified of *all* faulting `Task`s?\r\n\r\n---\r\n\r\nAbout debugging your specific scenario: wouldn't enabling \"break when exception is thrown\" help you? Especially since that experience got some nice improvements in VS 2017."
      },
      {
        "user": "JustArchi",
        "created_at": "2017-04-22T14:57:52Z",
        "body": "> How would that code know whether the exception is unobserved?\r\n\r\nI thought about some middle-man that would await all tasks that are being forgotten, and immediately after they finish, propagate the exception, instead of waiting for GC to collect them.\r\n\r\n> Or do you want a way to get notified of all faulting Tasks?\r\n\r\nEither is fine, I just want to have a way of detecting such case without waiting for GC to do the job. I'm pretty sure it'd be useful for far more people, as such things might be unobserved otherwise (like in my case, I had to spend some time debugging to find out where is the issue, if I had notification I'd know right away that I have NRE somewhere there instead of believing my app is simply waiting for task to be finished)."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-18T22:56:25Z",
        "body": "Everything here is behaving by design.  Tasks need to be able to propagate exceptions to wherever that Task is later awaited, which means the exceptions must be caught and stored, and then it's only when we can be sure that the Task will never have its exception observed that we can raise the unobserved event... and the only way we can know that is when the object becomes collectible from the GC's perspective."
      }
    ]
  },
  {
    "number": 7879,
    "title": "Writing a C++ program on Linux that uses cor.h, cordebug.h, etc",
    "created_at": "2017-04-14T20:54:57Z",
    "closed_at": "2020-01-31T01:35:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7879",
    "body": "I'm trying to write a C++ program on Linux which will reference certain types and functions in cor.h (and some other header files in the coreclr repo). However, it seems that cor.h needs some other header files that redefine a lot of STL functions and types (especially in pal.h?). Is there a recommended way to build such a program?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7879/comments",
    "author": "quoctruong",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-04-15T00:46:21Z",
        "body": "You can try defining `PAL_STDCPP_COMPAT` before including the pal headers. It is not perfect, but it will avoid majority of the collisions."
      },
      {
        "user": "quoctruong",
        "created_at": "2017-04-17T14:30:46Z",
        "body": "@jkotas Thank you! I tried that and managed to successfully compiled it. During linking, however, I still get this error:\r\n```\r\nLinux.x64.Debug/lib//libcoreclrpal.a(mutex.cpp.o): undefined reference to symbol 'pthread_mutexattr_setrobust@@GLIBC_2.12'\r\n//lib/x86_64-linux-gnu/libpthread.so.0: error adding symbols: DSO missing from command line\r\n```\r\nwhich I assume is because I'm missing some linking library when I tried to link libcoreclrpal.a. Do you happen to know which other libraries I have to link to fix this?\r\n\r\nThanks!"
      },
      {
        "user": "quoctruong",
        "created_at": "2017-04-17T14:47:46Z",
        "body": "Actually, I managed to fixed it by including the appropriate native library. Please ignore the comment above. Thanks!"
      }
    ]
  },
  {
    "number": 7819,
    "title": "[Question] 1:1 mapping between MethodDescs and entry points",
    "created_at": "2017-04-05T17:58:22Z",
    "closed_at": "2020-01-31T01:32:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7819",
    "body": "Hello.\r\n\r\nAs said in \"Method Descriptor\" chapter of \"The Book of the Runtime\", there are multiple places in the runtime that depend on 1:1 mapping between MethodDescs and entry points. This leads to requirement that slot and entry point must exist for all methods.\r\n\r\nCould someone explain where are these places and why exactly is 1:1 mapping needed?\r\n\r\n@Dmitri-Botcharnikov @ruben-ayrapetyan",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7819/comments",
    "author": "gbalykov",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-04-05T23:30:01Z",
        "body": "One methoddesc can have multiple entrypoints. We need to be able to map each of them back to the matching MethodDesc.\r\n\r\nThe key method for entrypoint -> MethodDesc mapping is `MethodTable::GetMethodDescForSlotAddress`.\r\n\r\nThe key method for MethodDesc -> current entrypoint mapping is `MethodDesc::GetMethodEntryPoint`."
      }
    ]
  },
  {
    "number": 20833,
    "title": "Problems building library with Novell.Directory.Ldap.NETStandard for Core 1.1",
    "created_at": "2017-03-31T00:02:57Z",
    "closed_at": "2020-01-31T14:44:57Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20833",
    "body": "I have a library I am building for Core 1.0, and it builds fine:\r\n```json\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n\r\n  \"dependencies\": {\r\n    \"Microsoft.AspNet.WebApi.Client\": \"5.2.3\",\r\n    \"Microsoft.AspNetCore.Mvc.ViewFeatures\": \"1.0.0\",\r\n    \"Microsoft.AspNetCore.Razor.Runtime\": \"1.0.0\",\r\n    \"NETStandard.Library\": \"1.6.0\",\r\n    \"Novell.Directory.Ldap.NETStandard\":  \"2.3.6\" \r\n  },\r\n\r\n  \"frameworks\": {\r\n    \"netstandard1.6\": {\r\n      \"imports\": [ \"dnxcore50\", \"portable-net451+win8\" ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nTo update to Core 1.1, the project.json is updated:\r\n```json\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n\r\n  \"dependencies\": {\r\n    \"Microsoft.AspNet.WebApi.Client\": \"5.2.3\",\r\n    \"Microsoft.AspNetCore.Mvc.ViewFeatures\": \"1.1.1\",\r\n    \"Microsoft.AspNetCore.Razor.Runtime\": \"1.1.0\",\r\n    \"NETStandard.Library\": \"1.6.1\",\r\n    \"Novell.Directory.Ldap.NETStandard\": \"2.3.6\"\r\n  },\r\n\r\n  \"frameworks\": {\r\n    \"netstandard1.6\": {\r\n      \"imports\": [ \"portable-net462+win8\" ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIt builds fine in Visual Studio 2015 on my local machine, but when it gets built via my TFS build process,, it errors on dotnet restore:\r\n```\r\n2017-03-29T17:08:59.6868965Z dotnet restore e:\\tfs_work\\11\\s\\CcpWebClient\\Trunk\\CcpWebClient\r\n2017-03-29T17:08:59.6868965Z Error message highlight pattern: \r\n2017-03-29T17:08:59.6868965Z Warning message highlight pattern: \r\n2017-03-29T17:08:59.9364981Z log  : Restoring packages for e:\\tfs_work\\11\\s\\CcpWebClient\\Trunk\\CcpWebClient\\src\\CcpWebClient.Common\\project.json...\r\n2017-03-29T17:09:00.8725041Z log  : Restoring packages for e:\\tfs_work\\11\\s\\CcpWebClient\\Trunk\\CcpWebClient\\src\\CcpWebClient.Web\\project.json...\r\n2017-03-29T17:09:02.0581117Z error: Package System.Net.WebSockets 4.3.0 is not compatible with netstandard1.6 (.NETStandard,Version=v1.6). Package System.Net.WebSockets 4.3.0 supports:\r\n2017-03-29T17:09:02.0581117Z error:   - monoandroid10 (MonoAndroid,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - monotouch10 (MonoTouch,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - netstandard1.3 (.NETStandard,Version=v1.3)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinios10 (Xamarin.iOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinmac20 (Xamarin.Mac,Version=v2.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarintvos10 (Xamarin.TVOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinwatchos10 (Xamarin.WatchOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error: Package System.Collections.Specialized 4.3.0 is not compatible with netstandard1.6 (.NETStandard,Version=v1.6). Package System.Collections.Specialized 4.3.0 supports:\r\n2017-03-29T17:09:02.0737118Z error:   - monoandroid10 (MonoAndroid,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - monotouch10 (MonoTouch,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - netstandard1.3 (.NETStandard,Version=v1.3)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinios10 (Xamarin.iOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinmac20 (Xamarin.Mac,Version=v2.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarintvos10 (Xamarin.TVOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error:   - xamarinwatchos10 (Xamarin.WatchOS,Version=v1.0)\r\n2017-03-29T17:09:02.0737118Z error: One or more packages are incompatible with .NETStandard,Version=v1.6.\r\n```\r\n\r\nThe WebSockets package is a dependency for Novell.Directory.Ldap.NETStandard.\r\n\r\nI don't understand why these packages are suddenly complaining about compatibility with .NETStandard,Version=v1.6 when they were building fine before.\r\n\r\nAny ideas?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20833/comments",
    "author": "ksatokcc",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-03-31T02:54:58Z",
        "body": "@weshaggard @ericstj do you have any troubleshooting advice?"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-03-31T16:52:25Z",
        "body": "Perhaps @ericstj or @emgarten understand what might be happening here as I've never seen this error. The funny part is that it lists that it supports netstandard1.3 which is what should be chosen when restoring for netstandard1.6."
      },
      {
        "user": "ericstj",
        "created_at": "2017-03-31T16:56:50Z",
        "body": "Seems funny.  Your project works for me.  Try deleting your nuget packages cache (or rename it for forensic purposes).  I suspect a corrupt package folder."
      },
      {
        "user": "ksatokcc",
        "created_at": "2017-04-03T21:14:52Z",
        "body": "Thank you @ericstj! Deleting the nuget package cache did the trick!"
      }
    ]
  },
  {
    "number": 7731,
    "title": "Load unmanaged static dll in load context",
    "created_at": "2017-03-27T11:06:45Z",
    "closed_at": "2020-01-31T01:27:05Z",
    "labels": [
      "question",
      "area-AssemblyLoader-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7731",
    "body": "I have native unmanaged dll which is static and must be loaded each time when I need library to do some work if i want to run it in parallel. In .NET I would use AppDomain and load this dll when i need it, but in NET Core AppDomains are gone (for now). I have looked at AssemblyLoadContext but there is no proper documentation with LoadUnmanagedDll. Can this be done in netstandard1.6?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7731/comments",
    "author": "rdvojmoc",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-03-27T16:32:06Z",
        "body": "Could you please explain a bit more why you are using AppDomains in .NET Framework? Why can't you just load the unmanaged dll within the same AppDomain?"
      },
      {
        "user": "rdvojmoc",
        "created_at": "2017-03-27T16:38:25Z",
        "body": " Currently code is called with PInvoke and is working perfectly. Problem is because nature of this unmanged dll (it's static) written in C, when I try to call it in parallel throws AccessViolationException because two or more task wants to access same memory.\r\n\r\nIf I could load dll for each time that in some context and then call PInvoke on that this problem would be gone. At least that is my idea. \r\n\r\n"
      },
      {
        "user": "jkotas",
        "created_at": "2017-03-27T16:45:16Z",
        "body": "The unmanaged .dll is always loaded once. It is constrain imposed by the OS loader, not much we can do about it in .NET. It is same for both .NET Framework and .NET Core. If you load same unmanaged .dll from two different appdomain in full .NET Framework, both AppDomains will get the same instance."
      },
      {
        "user": "rdvojmoc",
        "created_at": "2017-03-27T17:19:13Z",
        "body": "Thanks for quick answer. Based on your answer only way to avoid this error, is to implement synchronized access to this unmanaged dll."
      },
      {
        "user": "jkotas",
        "created_at": "2017-03-27T17:25:15Z",
        "body": "Yes. The other alternatives maybe to run the unmanaged dll in separate process, or to have multiple physical copies (different paths on disk) of this unmanaged .dll."
      }
    ]
  },
  {
    "number": 20703,
    "title": "Can not create Raw socket on CentOS 7",
    "created_at": "2017-03-21T04:31:35Z",
    "closed_at": "2020-01-31T14:36:42Z",
    "labels": [
      "question",
      "area-System.Net.Sockets",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20703",
    "body": "Hello everyone,\r\nI get a problem when create a Socket object with Raw type.\r\nMy environment as follow:\r\n* centos 7 x64\r\n* dotnet Core 1.0.1\r\n\r\nMy code:\r\n```C#\r\n_socket = new Socket(AddressFamily.InterNetwork, SocketType.Raw, ProtocolType.IP);\r\n```\r\n\r\nIt work perfect on Windows, but throw a SocketException on CentOS.\r\n\r\nThe Exception:\r\n```\r\nSystem.Net.Sockets.SocketException: Protocol not supported\r\n   at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n```\r\n\r\nhow can I make it work?\r\nThx",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20703/comments",
    "author": "Hawkeyes0",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2017-03-21T10:25:12Z",
        "body": "That error is coming from the OS; if it doesn't support it, there's nothing the .NET layer on top of it can do to support it.\r\n\r\nOn the same machine, what do you get if you put the following code into a file `rawsock.c`:\r\n```C++\r\n#include <stdio.h>\r\n#include <sys/socket.h>\r\n#include <netinet/ip.h>\r\n\r\nint main(int argc, char** argv)\r\n{\r\n    int sd = socket(PF_INET, SOCK_RAW, IPPROTO_IP);\r\n    if (sd < 0) perror(\"socket failed with: \");\r\n    else printf(\"success: %d\\n\", sd);\r\n}\r\n```\r\ncompile it with:\r\n```\r\ngcc -o rawsock rawsock.c\r\n```\r\nand then run it:\r\n```\r\n./rawsock\r\n```\r\n?\r\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-21T18:28:19Z",
        "body": "Sounds like not CoreFX problem, closing. Please let us know if you disagree."
      },
      {
        "user": "Hawkeyes0",
        "created_at": "2017-03-25T16:09:49Z",
        "body": "thanks for reply.\r\n@stephentoub , i'v try the program, and it failed with \"Protocol not supported\". \r\n@karelz , yes, this is not CoreFX problem.\r\n\r\nI'll find other solutions.\r\nthanks again."
      }
    ]
  },
  {
    "number": 20662,
    "title": "Can System.Data.SqlClient take a dependency on non .Net Core libraries?",
    "created_at": "2017-03-16T19:59:43Z",
    "closed_at": "2020-01-31T14:33:53Z",
    "labels": [
      "question",
      "area-System.Data.SqlClient"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20662",
    "body": "This is a question more than an issue which will help with the design of Azure Active Directory authentication for Azure SQL DB. \r\n\r\nSqlClient on Desktop depends on a DLL written in C++ and utilizes Windows APIs which needs to be installed on the client machine to be able to authenticate to Azure SQL DB using AAD. \r\n\r\nFor .Net Core, the solution provided above doesn't apply as it is not applicable to Unix or macOS. \r\n\r\nTo add Azure Active Directory support in SqlClient, the access token has to be retrieved from AAD using HTTP rest calls.\r\nThere are client libraries provided by AAD in C# to expedite clients to retrieve the Access Token. Can SqlClient take a dependency on one of these libraries?\r\nIf we cannot take a dependency, then SqlClient needs to implement the Access Token retrieval in the client itself which is a big maintenance overhead. \r\n\r\nWhat is the guidance in this case? Was such a design decision needed by any other .Net Core libraries? ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20662/comments",
    "author": "saurabh500",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-03-16T20:02:14Z",
        "body": "@weshaggard \r\n"
      },
      {
        "user": "NickCraver",
        "created_at": "2017-03-16T20:12:55Z",
        "body": "One major issue is community as well: this isn't just `SqlClient`. This would affect things like Dapper as well - it's a mess for all downstream libraries as well when the core ones do things like this. I personally wouldn't want to see this dependency taken. IMO, it'd be cleaner to put that auth in another library (though that ship may have sailed)."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-03-16T20:27:16Z",
        "body": "We cannot take a dependency on anything in the core which we don't build the source for ourselves. I see a few possible directions:\r\n\r\n1. We implement the authentication ourselves, either directly in SqlClient or another library.\r\n2. We expose new APIs in SqlClient as an extension point that allow an application to do the authentication they need and pass along the access token so SqlClient can use it.\r\n3. We do some sort of light-up dynamic dependency that SqlClient can use reflection to see if the library that does authentication exists and if so call it and if not then the feature doesn't work.\r\n\r\nI don't know all the details of how this works but I would personally lean towards option (2) if at all possible. "
      },
      {
        "user": "saurabh500",
        "created_at": "2017-03-16T20:51:56Z",
        "body": "@NickCraver @weshaggard Thanks for the feedback.\r\n\r\n@NickCraver  \r\n>IMO, it'd be cleaner to put that auth in another library (though that ship may have sailed)\r\n\r\nDo you mean a .Net Core library which can provide the functionality which can be consumed by upstream libraries like SqlClient?\r\n\r\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-17T04:05:54Z",
        "body": "Option 1b: Share the source code with client library (assuming licenses are compatible, etc.)\r\n\r\nBTW: I don't like it myself too much ... but it is worth calling out"
      },
      {
        "user": "NickCraver",
        "created_at": "2017-03-18T01:42:57Z",
        "body": "@saurabh500 I'd expect to see such functionality in another library, e.g. `System.Data.SqlClient.AzureAD`. If you're using Azure AD, you reference that package. I think this integrates well @weshaggard's option 2 above (which I agree with)."
      },
      {
        "user": "saurabh500",
        "created_at": "2017-03-18T01:44:24Z",
        "body": "Thanks for the feedback. "
      }
    ]
  },
  {
    "number": 2646,
    "title": "Should we rename Microsoft.NetCore.App to avoid the problem that Mac's think its a package?",
    "created_at": "2017-03-16T00:54:14Z",
    "closed_at": "2020-01-30T20:38:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/2646",
    "body": "I've gotten feedback a few times now that people wish this weren't the case. Renaming has impact. I thought I'd at least file the issue and we can discuss the merits one way or the other.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/2646/comments",
    "author": "Petermarcu",
    "comments": [
      {
        "user": "ericstj",
        "created_at": "2017-04-12T19:52:11Z",
        "body": "This isn't actionable.  Its a question and I don't own that decision."
      },
      {
        "user": "terrajobst",
        "created_at": "2017-04-12T21:34:31Z",
        "body": "I don't think we should rename the package; as you said: it's expensive and potentially far reaching.\r\n\r\n@Petermarcu, what falls apart when a Mac treats the folder for this package as an application? In the end, we don't expect customers to see or interact with that folder at all."
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-04-26T17:38:51Z",
        "body": "@Petermarcu I am moving this out to Future. Please close if this is not actionable."
      },
      {
        "user": "Petermarcu",
        "created_at": "2017-04-26T17:42:01Z",
        "body": "I think I agree that we have to leave it alone. If we could start over, we would have chosen a different name :("
      }
    ]
  },
  {
    "number": 20534,
    "title": "When call build.cmd -skiptests, build stops with error PE file is already strong-name signed",
    "created_at": "2017-03-09T14:03:30Z",
    "closed_at": "2020-01-31T14:26:11Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20534",
    "body": "Today I pull coreclr and corefx, build them on my Win10 with VS2015u3,\r\nThe build of coreclr finished without error,\r\nBut the build of corefx failed with the following strong-name sign error like following:\r\n\r\n> Running: U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\Tools\\msbuild.cmd /nologo /verbosity:minimal /clp:Summary /maxcpucount /nodeReuse:false /l:BinClashLogger,Tools\\net45\\Microsoft.DotNet.Build.Tasks.dll;LogFile=binclash.log /p:SkipTests=true /p:OSGroup=Windows_NT /p:TargetOS=Windows_NT /p:ConfigurationGroup=Debug  /flp:v=normal  /flp2:warningsonly;logfile=msbuild.wrn  /flp3:errorsonly;logfile=msbuild.err\r\n>   [21:50:05.58] Verifying all auto-upgradeable dependencies...\r\n>   [21:50:18.36] Verifying all auto-upgradeable dependencies... Done.\r\n>   [21:50:18.36] Restoring all packages...\r\n>   [21:50:32.95] Restoring all packages...Done.\r\n> U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\Tools\\sign.targets(70,5): error : U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\bin/obj/ref/Microsoft.CSharp/4.0.0.0/Microsoft.CSharp.dll: PE file is already strong-name signed. [U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\src\\Microsoft.CSharp\\ref\\Microsoft.CSharp.csproj]\r\n>   Microsoft.VisualBasic -> U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\bin\\ref\\Microsoft.VisualBasic\\10.0.0.0\\Microsoft.VisualBasic.dll\r\n> U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\Tools\\sign.targets(70,5): error : U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\bin/obj/AnyOS.AnyCPU.Debug/Microsoft.VisualBasic/Microsoft.VisualBasic.dll: PE file is already strong-name signed. [U:\\OpenSrcResearch\\MicrosoftOnGithub\\corefx\\src\\Microsoft.VisualBasic\\src\\Microsoft.VisualBasic.vbproj]",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20534/comments",
    "author": "wildtang",
    "comments": [
      {
        "user": "wildtang",
        "created_at": "2017-03-09T14:06:45Z",
        "body": "How can I skip the strong-name sign process when build corefx?"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-03-09T18:23:54Z",
        "body": "What branch are you building? It looks pretty hold as we haven't been doing the \"Restoring all packages...\" for a couple months in master. I would suggest you pulling the latest changes from master and doing a \"clean.cmd -all\" followed by a \"build.cmd\""
      },
      {
        "user": "wildtang",
        "created_at": "2017-03-09T21:33:20Z",
        "body": "The branch I am building is release/1.1.0"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-03-17T23:24:43Z",
        "body": "I wouldn't expect this to happen at all on a clean build but if you want to essentially turn off signing you can pass `/p:SignType=oss` to the build to tell it to only do OSS signing which is limited. "
      }
    ]
  },
  {
    "number": 7527,
    "title": "[Question] Cross compile for ARM on non-Debian",
    "created_at": "2017-03-01T16:20:32Z",
    "closed_at": "2020-01-31T01:15:14Z",
    "labels": [
      "question",
      "arch-arm32",
      "arch-arm64"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7527",
    "body": "Is there any talk of creating scripts for giving non-Debian machines the ability to cross compile, like CentOS? I personally would like to be able to cross compile from my machine for an ARM based Linux device. If there is anyone who has done this already would also be interested in their steps.\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7527/comments",
    "author": "nick-rudh",
    "comments": [
      {
        "user": "justmehlc76",
        "created_at": "2017-03-01T16:22:44Z",
        "body": "Tee hee"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-04-08T05:58:53Z",
        "body": "@janvorli "
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-07-27T21:40:07Z",
        "body": "We build for Ubuntu arm/arm64 using Docker on Ubuntu x64. I don't believe there have been cross-OS compilation attempts, although if you can do it in Docker, that might be the answer.\r\n\r\nI'm going to close this."
      }
    ]
  },
  {
    "number": 20262,
    "title": "ClientWebSocket bypass/accept invalid/expired ssl certificates ",
    "created_at": "2017-02-17T15:06:42Z",
    "closed_at": "2020-01-31T14:08:48Z",
    "labels": [
      "question",
      "area-System.Net.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20262",
    "body": "Is there a way to bypass/accept invalid/expired ssl certificates when using ClientWebSocket?\r\n\r\nyes many will say it's not good for security etc... however it is very useful for testing.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20262/comments",
    "author": "ByronAP",
    "comments": [
      {
        "user": "willdean",
        "created_at": "2017-02-17T16:31:21Z",
        "body": "dotnet/runtime#20063"
      },
      {
        "user": "davidsh",
        "created_at": "2017-03-04T04:00:35Z",
        "body": "Actually a dupe of dotnet/runtime#18696 which is a feature/API request for this.\r\n"
      }
    ]
  },
  {
    "number": 20233,
    "title": "Events not fired on inkcanvas after changing InputDeviceTypes",
    "created_at": "2017-02-15T14:18:42Z",
    "closed_at": "2020-01-31T14:06:56Z",
    "labels": [
      "question",
      "area-Meta",
      "tracking-external-issue"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20233",
    "body": "I'm using an inkCanvas in a UWP application, when I change the property InputDeviceTypes events like PointerExited or PointerMoved are not fired anymore, it's a bug or shall I subscribe to different events?\r\n\r\nThanks in advance.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20233/comments",
    "author": "delahermosa",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-02-16T02:20:16Z",
        "body": "@terrajobst do you know where to log issues against XAML?"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-02-16T16:59:24Z",
        "body": "@yizhang82 @joshfree do you know who can help with this issue from XAML? Thanks."
      },
      {
        "user": "joshfree",
        "created_at": "2017-02-16T17:58:48Z",
        "body": "@lutzroeder would know"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-02T16:57:44Z",
        "body": "@lutzroeder could you please help with this one?"
      },
      {
        "user": "delahermosa",
        "created_at": "2017-03-23T12:01:53Z",
        "body": "No one can help? 😭 "
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-23T16:02:19Z",
        "body": "@lutzroeder please help with this issue."
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-23T22:46:43Z",
        "body": "@delahermosa sorry for the delay. we'll get back to you soon."
      },
      {
        "user": "walkerduhon",
        "created_at": "2017-03-24T16:57:49Z",
        "body": "@delahermosa Can you tell us more about what you are seeing?  The expected behavior depends on how InkPresenter.InputDeviceTypes is set, what type of input is occurring, and what UIElement you are expecting to receive the Pointer events and how it relates in the XAML tree to the InkCanvas."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-24T17:49:25Z",
        "body": "@walkerduhon is there a better place to move the question/discussion? (forums, other bug db, etc.)"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-22T14:54:41Z",
        "body": "Closing, as it hasn't received a response in over two years, and the topic isn't actually relevant to this repo."
      }
    ]
  },
  {
    "number": 20191,
    "title": "*.builds files for tests",
    "created_at": "2017-02-12T06:05:39Z",
    "closed_at": "2020-01-31T14:04:33Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20191",
    "body": "The tests still have both Configurations.props files and  *.builds files.\r\n\r\n@weshaggard Do we need both? Should we delete the *.builds files?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20191/comments",
    "author": "jkotas",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2017-02-13T21:29:15Z",
        "body": "No this is on the list of things to get cleaned-up we just didn't have a tracking issue for it. We can use this issue. \r\n\r\nWe should delete all the *.builds files that are in the library directories, we still use them for the root traversal builds. "
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-16T01:11:04Z",
        "body": "Removed these in dotnet/corefx#16212 "
      }
    ]
  },
  {
    "number": 2596,
    "title": "Programatically Getting the path to the directory containing the framework?",
    "created_at": "2017-02-10T19:35:58Z",
    "closed_at": "2020-01-30T20:36:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/2596",
    "body": "Ok, I have a reaaaaly strange question now.\r\n\r\nWe have app that generates c# code. \r\n\r\nWe have unit tests that use the generator to generate c# code, then compiles the code using Roslyn, and then loads the generated assembly and  uses reflection to inspect the code to check that things went right.\r\n\r\nWhen we were running on desktop clr, we used `AppDomain.GetAssemblies()` to get the assemblies that were loaded and added them to the Roslyn compiler as references.\r\n\r\nSince we're now on `netcoreapp1.0` we don't have that. \r\n\r\nFor some assemblies, I was able to cheat a bit and use stuff like `typeof(RestException).GetAssembly().Location,`\r\n\r\nBut in the end I needed to get a handful of assemblies from the current runtime folder.\r\n\r\nI can hardcode them like this:\r\n\r\n``` csharp\r\n        protected static readonly string[] _assemblies = new[] {\r\n            \r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Runtime.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Net.Http.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\mscorlib.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Threading.Tasks.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Net.Primitives.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Collections.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Text.Encoding.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.Text.RegularExpressions.dll\",\r\n            @\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\System.IO.dll\",\r\n        ]\r\n```\r\n\r\nAnd it works.\r\n\r\nThis only works because I know the `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.0.3\\` part of the path.\r\n\r\nIs there *any means* to find out that path for the currently executing `netcoreapp1.0` program, so I can locate these programatically?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/2596/comments",
    "author": "fearthecowboy",
    "comments": [
      {
        "user": "Petermarcu",
        "created_at": "2017-02-10T19:38:11Z",
        "body": "@gkhanna79 , @weshaggard , can you guys give @fearthecowboy guidance here?"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T19:48:25Z",
        "body": "One approach that may work is to do `typeof(object).GetAssembly().Location` and then traverse for `*.dll` in that directory which will give you all the assemblies next to the core assembly. That will give you all the potential references not necessary what is loaded at runtime so depending on your scenario that might be enough. "
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T19:49:38Z",
        "body": "Actually thinking about that a little more that would also pick-up native dlls which you don't want to pass to the compiler but you can probably do a little further filtering to things that start with \"System\" or \"Microsoft\". "
      },
      {
        "user": "fearthecowboy",
        "created_at": "2017-02-10T19:50:13Z",
        "body": "I've been trying that. \r\n\r\nI can't seem to get one in the framework folder. They are all showing up as the ones in the `nuget` packages folder.\r\n\r\nHave an idea of a type that's in `mscorlib` (but doesn't come from a pkg elsewhere?)\r\n\r\n\r\n"
      },
      {
        "user": "fearthecowboy",
        "created_at": "2017-02-10T19:53:17Z",
        "body": "The closest I've come so far is :\r\n\r\n``` csharp\r\n        protected static string DOTNET = System.IO.Path.GetDirectoryName( System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName);\r\n        protected static string FRAMEWORK= Path.Combine( DOTNET, \"shared\", \"Microsoft.NETCore.App\", \"1.0.3\" );\r\n\r\n        protected static readonly string[] _assemblies = new[] {\r\n            \r\n            Path.Combine(FRAMEWORK, \"System.Runtime.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Net.Http.dll\"),\r\n            Path.Combine(FRAMEWORK, \"mscorlib.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Threading.Tasks.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Net.Primitives.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Collections.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Text.Encoding.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.Text.RegularExpressions.dll\"),\r\n            Path.Combine(FRAMEWORK, \"System.IO.dll\"),\r\n        ]\r\n```\r\n\r\nBut I'd hate to hard-code the '1.0.3' part of that ..."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T19:54:43Z",
        "body": "How are you running? If you are doing \"dotnet run\" it does do a hybrid of loading assemblies from packages instead of the shared framework. If you do \"dotnet <yourapp>\" I think the approach I used would work.\r\n\r\nI'm not sure what a great way to do that is for \"dotnet run\" scenario. \r\n\r\nUnfortunately we don't expose the shared framework version anywhere, especially not in \"dotnet run\" scenarios because it doesn't run on the shared framework. "
      },
      {
        "user": "fearthecowboy",
        "created_at": "2017-02-10T20:02:02Z",
        "body": "It's unit tests, so it's run with `dotnet test`\r\n\r\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T20:19:34Z",
        "body": "Yeah I guess there isn't any great solution right now. Good news is that AppDomain.GetAssemblies() will be back in .NET Core 2.0.\r\n\r\nFor now in 1.0 you try another hack like getting the FX deps file location that the host sets up via `AppContext.GetData(\"FX_DEPS_FILE\")` and getting the directory from that. I believe that might get you what you want for your scenarios right now. "
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-02-14T23:09:42Z",
        "body": "@fearthecowboy Does the above answer your question?"
      },
      {
        "user": "gkhanna79",
        "created_at": "2017-02-17T01:18:44Z",
        "body": "@fearthecowboy Let us know if the above answers your question."
      },
      {
        "user": "fearthecowboy",
        "created_at": "2017-02-23T18:47:28Z",
        "body": "Yes, I'm doing pretty good with this approach."
      }
    ]
  },
  {
    "number": 20127,
    "title": "System.Security.Cryptography.Native not linking against correct OpenSSL",
    "created_at": "2017-02-06T18:20:03Z",
    "closed_at": "2020-01-31T14:00:30Z",
    "labels": [
      "question",
      "area-System.Security",
      "os-mac-os-x"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20127",
    "body": "As per the directions for building CoreFX from source, I have installed OpenSSL (version 1.0.2k) through Homebrew, and manually symlinked `libcrypto.1.0.0.dylib`, `libssl.1.0.0.dylib`, and the pkgconfig files for those two libraries into `/usr/local`. However, when I go to build corefx, I get a linker error. Investigation reveals that the compiler is trying to link against _the outdated 0.9.8 versions in `/usr/lib`_, despite the more up-to-date copies being present in `/usr/local/lib`, and my manually specifying `-DOPENSSL_ROOT_DIR` when I call `build-native.sh`. Can anyone point me to what might be going wrong? Thanks!",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20127/comments",
    "author": "wjk",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-02-06T18:39:11Z",
        "body": "cc @bartonjs "
      },
      {
        "user": "bartonjs",
        "created_at": "2017-02-06T19:38:54Z",
        "body": "@wjk You shouldn't need to specify OPENSSL_ROOT_DIR, it's part of a fallback path for when pkg-config isn't available.\r\n\r\nOne thing you may be missing, in fact, is pkg-config (`brew install pkg-config`).\r\n\r\n```\r\nbartonjs@jsb-mac:~/coreclr $ pkg-config --cflags --libs openssl\r\n-I/usr/local/Cellar/openssl/1.0.2j/include -L/usr/local/Cellar/openssl/1.0.2j/lib -lssl -lcrypto\r\n```\r\n\r\n(Though clearly I need to upgrade openssl to get 1.0.2k)\r\n\r\nIf pkg-config is available and isn't giving the -I and -L values you can try the very verbose debug option:\r\n\r\n```\r\nbartonjs@jsb-mac:~/coreclr $ pkg-config --debug openssl\r\nno output option set, defaulting to --exists\r\nError printing disabled by default due to use of output options --exists, --atleast/exact/max-version, --list-all or no output option at all. Value of --print-errors: 0\r\nError printing disabled\r\nAdding virtual 'pkg-config' package to list of known packages\r\nScanning directory dotnet/corefx#1 '/usr/local/lib/pkgconfig'\r\nFile 'libcrypto.pc' appears to be a .pc file\r\nWill find package 'libcrypto' in file '/usr/local/lib/pkgconfig/libcrypto.pc'\r\nFile 'libssl.pc' appears to be a .pc file\r\nWill find package 'libssl' in file '/usr/local/lib/pkgconfig/libssl.pc'\r\nFile 'openssl.pc' appears to be a .pc file\r\nWill find package 'openssl' in file '/usr/local/lib/pkgconfig/openssl.pc'\r\nCannot open directory dotnet/corefx#2 '/usr/local/share/pkgconfig' in package search path: No such file or directory\r\nScanning directory dotnet/corefx#3 '/usr/lib/pkgconfig'\r\nFile 'apr-1.pc' appears to be a .pc file\r\nWill find package 'apr-1' in file '/usr/lib/pkgconfig/apr-1.pc'\r\nFile 'apr-util-1.pc' appears to be a .pc file\r\nWill find package 'apr-util-1' in file '/usr/lib/pkgconfig/apr-util-1.pc'\r\nFile 'libcrypto.pc' appears to be a .pc file\r\nFile 'libcrypto.pc' ignored, we already know about package 'libcrypto'\r\nFile 'libecpg.pc' appears to be a .pc file\r\nWill find package 'libecpg' in file '/usr/lib/pkgconfig/libecpg.pc'\r\nFile 'libecpg_compat.pc' appears to be a .pc file\r\nWill find package 'libecpg_compat' in file '/usr/lib/pkgconfig/libecpg_compat.pc'\r\nFile 'libedit.pc' appears to be a .pc file\r\nWill find package 'libedit' in file '/usr/lib/pkgconfig/libedit.pc'\r\nFile 'libiodbc.pc' appears to be a .pc file\r\nWill find package 'libiodbc' in file '/usr/lib/pkgconfig/libiodbc.pc'\r\nFile 'libpcre.pc' appears to be a .pc file\r\nWill find package 'libpcre' in file '/usr/lib/pkgconfig/libpcre.pc'\r\nFile 'libpcreposix.pc' appears to be a .pc file\r\nWill find package 'libpcreposix' in file '/usr/lib/pkgconfig/libpcreposix.pc'\r\nFile 'libpgtypes.pc' appears to be a .pc file\r\nWill find package 'libpgtypes' in file '/usr/lib/pkgconfig/libpgtypes.pc'\r\nFile 'libpq.pc' appears to be a .pc file\r\nWill find package 'libpq' in file '/usr/lib/pkgconfig/libpq.pc'\r\nFile 'libssl.pc' appears to be a .pc file\r\nFile 'libssl.pc' ignored, we already know about package 'libssl'\r\nFile 'libtls.pc' appears to be a .pc file\r\nWill find package 'libtls' in file '/usr/lib/pkgconfig/libtls.pc'\r\nFile 'openssl.pc' appears to be a .pc file\r\nFile 'openssl.pc' ignored, we already know about package 'openssl'\r\nScanning directory dotnet/corefx#4 '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11'\r\nFile 'libcurl.pc' appears to be a .pc file\r\nWill find package 'libcurl' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/libcurl.pc'\r\nFile 'libexslt.pc' appears to be a .pc file\r\nWill find package 'libexslt' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/libexslt.pc'\r\nFile 'libxml-2.0.pc' appears to be a .pc file\r\nWill find package 'libxml-2.0' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/libxml-2.0.pc'\r\nFile 'libxslt.pc' appears to be a .pc file\r\nWill find package 'libxslt' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/libxslt.pc'\r\nFile 'sqlite3.pc' appears to be a .pc file\r\nWill find package 'sqlite3' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/sqlite3.pc'\r\nFile 'zlib.pc' appears to be a .pc file\r\nWill find package 'zlib' in file '/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.11/zlib.pc'\r\nLooking for package 'openssl'\r\nLooking for package 'openssl-uninstalled'\r\nReading 'openssl' from file '/usr/local/lib/pkgconfig/openssl.pc'\r\nParsing package file '/usr/local/lib/pkgconfig/openssl.pc'\r\n  line>prefix=/usr/local/Cellar/openssl/1.0.2j\r\n Variable declaration, 'prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>exec_prefix=${prefix}\r\n Variable declaration, 'exec_prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>libdir=${exec_prefix}/lib\r\n Variable declaration, 'libdir' has value '/usr/local/Cellar/openssl/1.0.2j/lib'\r\n  line>includedir=${prefix}/include\r\n Variable declaration, 'includedir' has value '/usr/local/Cellar/openssl/1.0.2j/include'\r\n  line>\r\n  line>Name: OpenSSL\r\n  line>Description: Secure Sockets Layer and cryptography libraries and tools\r\n  line>Version: 1.0.2j\r\n  line>Requires: libssl libcrypto\r\nPath position of 'openssl' is 1\r\nAdding 'openssl' to list of known packages\r\nSearching for 'openssl' requirement 'libssl'\r\nLooking for package 'libssl'\r\nLooking for package 'libssl-uninstalled'\r\nReading 'libssl' from file '/usr/local/lib/pkgconfig/libssl.pc'\r\nParsing package file '/usr/local/lib/pkgconfig/libssl.pc'\r\n  line>prefix=/usr/local/Cellar/openssl/1.0.2j\r\n Variable declaration, 'prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>exec_prefix=${prefix}\r\n Variable declaration, 'exec_prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>libdir=${exec_prefix}/lib\r\n Variable declaration, 'libdir' has value '/usr/local/Cellar/openssl/1.0.2j/lib'\r\n  line>includedir=${prefix}/include\r\n Variable declaration, 'includedir' has value '/usr/local/Cellar/openssl/1.0.2j/include'\r\n  line>\r\n  line>Name: OpenSSL-libssl\r\n  line>Description: Secure Sockets Layer and cryptography libraries\r\n  line>Version: 1.0.2j\r\n  line>Requires.private: libcrypto\r\n  line>Libs: -L${libdir} -lssl\r\n  line>Libs.private: \r\nUnknown keyword 'Libs.private' in '/usr/local/lib/pkgconfig/libssl.pc'\r\n  line>Cflags: -I${includedir} \r\nPath position of 'libssl' is 1\r\nAdding 'libssl' to list of known packages\r\nSearching for 'libssl' private requirement 'libcrypto'\r\nLooking for package 'libcrypto'\r\nLooking for package 'libcrypto-uninstalled'\r\nReading 'libcrypto' from file '/usr/local/lib/pkgconfig/libcrypto.pc'\r\nParsing package file '/usr/local/lib/pkgconfig/libcrypto.pc'\r\n  line>prefix=/usr/local/Cellar/openssl/1.0.2j\r\n Variable declaration, 'prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>exec_prefix=${prefix}\r\n Variable declaration, 'exec_prefix' has value '/usr/local/Cellar/openssl/1.0.2j'\r\n  line>libdir=${exec_prefix}/lib\r\n Variable declaration, 'libdir' has value '/usr/local/Cellar/openssl/1.0.2j/lib'\r\n  line>includedir=${prefix}/include\r\n Variable declaration, 'includedir' has value '/usr/local/Cellar/openssl/1.0.2j/include'\r\n  line>enginesdir=${libdir}/engines\r\n Variable declaration, 'enginesdir' has value '/usr/local/Cellar/openssl/1.0.2j/lib/engines'\r\n  line>\r\n  line>Name: OpenSSL-libcrypto\r\n  line>Description: OpenSSL cryptography library\r\n  line>Version: 1.0.2j\r\n  line>Requires: \r\n  line>Libs: -L${libdir} -lcrypto\r\n  line>Libs.private: \r\nUnknown keyword 'Libs.private' in '/usr/local/lib/pkgconfig/libcrypto.pc'\r\n  line>Cflags: -I${includedir} \r\nPath position of 'libcrypto' is 1\r\nAdding 'libcrypto' to list of known packages\r\nSearching for 'openssl' requirement 'libcrypto'\r\n```\r\n\r\nIt's pretty verbose, but the important parts are:\r\n```\r\n...\r\nReading 'openssl' from file '/usr/local/lib/pkgconfig/openssl.pc'\r\n...\r\n Variable declaration, 'libdir' has value '/usr/local/Cellar/openssl/1.0.2j/lib'\r\n...\r\n Variable declaration, 'includedir' has value '/usr/local/Cellar/openssl/1.0.2j/include'\r\n...\r\n```\r\n(and friends)"
      },
      {
        "user": "wjk",
        "created_at": "2017-02-06T20:41:07Z",
        "body": "@bartonjs As it turns out, I had pkgconfig already installed; it was the pkgconfig file CMake was looking for that was the problem. Because `brew link openssl` no longer functions, I have to ensure that all the moving parts are symlinked correctly myself. I had manually symlinked `libcrypto.pc` and `libssl.pc`, but not `openssl.pc`. Hence, pkg-config was instead finding `/usr/lib/pkgconfig/openssl.pc`, which points to OpenSSL 0.9.8. Adding the missing symlink fixed the problem. Thanks!"
      },
      {
        "user": "bartonjs",
        "created_at": "2017-02-06T21:04:10Z",
        "body": "@wjk Glad it was a simple problem.  Sorry it's such a pain to diagnose :(."
      }
    ]
  },
  {
    "number": 20060,
    "title": "Dns.GetHostEntry(\"IPv4_string\") does not work in Linux environment.",
    "created_at": "2017-01-30T21:31:40Z",
    "closed_at": "2020-01-31T13:56:36Z",
    "labels": [
      "question",
      "area-System.Net",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20060",
    "body": "I am working on developing integrated authentication feature in Linux.\r\nThe feature utilizes API **System.Net.Dns.GetHostEntry**(string hostNameOrAddress) for domain name reverse look up while generating server SPN.\r\nThis method works great in Windows, but does not work in Linux when I feed IPv4 address for parameter.\r\nIPv6 parameter works though in Linux.\r\n\r\nHere is a sample code and its stack trace:\r\n<in Linux>\r\nIPHostEntry hostEntry = Dns.GetHostEntry(\"xxx.xxx.xxx.xxx\");\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address\r\nStack Trace:\r\n              at System.Net.Dns.InternalGetHostByAddress(IPAddress address, Boolean includeIPv6)\r\n              at System.Net.Dns.GetHostEntry(String hostNameOrAddress)\r\n\r\n\r\nCC: @saurabh500 @corivera @YoungGah",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20060/comments",
    "author": "geleems",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2017-01-30T22:00:20Z",
        "body": "Are you sure IPv4 in general isn't working?  Sounds like the Linux box simply isn't able to resolve that specific address?  My Windows machine for example produces a similar error as it can't resolve it."
      },
      {
        "user": "Priya91",
        "created_at": "2017-01-31T00:41:40Z",
        "body": "you can check with nslookup <ipaddress> if it can resolve the ipv4 address to hostname."
      },
      {
        "user": "saurabh500",
        "created_at": "2017-01-31T01:39:51Z",
        "body": " If I use the IPv4 address of the target host in the Dns.GetHostEntry(), the resolution fails with the error message. The address is for a Windows and the code is executing on macOS/Linux.\r\n\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (No such device or address) ---> System.Net.Internals.SocketExceptionFactory+ExtendedSocketException: No such device or address\r\n   at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult)\r\n   at System.Net.Dns.EndGetHostEntry(IAsyncResult asyncResult)\r\n   at System.Net.Dns.<>c.<GetHostEntryAsync>b__16_1(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at ConsoleApplication.Program.<GetHostEntry>d__1.MoveNext() in /home/REDMOND/sausing/reproapp/Program.cs:line 16\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at ConsoleApplication.Program.Main(String[] args) in \r\n\r\nIf the IPv6 address of the target host is used, then the reverse lookup succeeds. \r\n\r\nIf I ping the target host from linux, the IPv4 address is resolved and is being used to do a reverse lookup Dns.GetHostEntry.\r\n\r\nIn this case the target host is a Windows Server 2012 R2 and the reverse lookup is happening from macOS and Ubuntu16.04. The `nslookup` from Unix to Windows host fails as well.\r\n\r\nHowever while trying Windows to Windows scenario, there was successful Dns.GetHostEntry execution even though `nslookup` failed. \r\n\r\nIs the API working differently on Windows vs Linux and macOS ? \r\n\r\n"
      },
      {
        "user": "geleems",
        "created_at": "2017-02-07T21:18:53Z",
        "body": "Now `IPHostEntry hostEntry = Dns.GetHostEntry(\"IPv6_address\");` does not work anymore in Linux.\r\n```\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address\r\nStack Trace:\r\n/home/REDMOND/gelee/Projects/CoreFx/src/System.Net.NameResolution/src/System/Net/DNS.cs(178,0): at System.Net.Dns.InternalGetHostByAddress(IPAddress address, Boolean includeIPv6)\r\n/home/REDMOND/gelee/Projects/CoreFx/src/System.Net.NameResolution/src/System/Net/DNS.cs(470,0): at System.Net.Dns.GetHostEntry(String hostNameOrAddress)\r\n```\r\nLet me open another issue for this.."
      },
      {
        "user": "Priya91",
        "created_at": "2017-02-08T00:47:11Z",
        "body": "@saurabh500 \r\n\r\n> Is the API working differently on Windows vs Linux and macOS ?\r\n\r\nThe implementation is different on the OSes as they call into the platform specific OS APIs. However for this functionality to work, your system has to be configured to setup reverse dns lookup to ping the correct dns server. Can you verify if running this from Mac OS terminal resolves the hostname,\r\n\r\n```\r\nhost <ip-address>\r\n```"
      },
      {
        "user": "Priya91",
        "created_at": "2017-02-13T22:14:15Z",
        "body": "This issue is highly likely that the host machine doesn't have the network setting configured for reverse dns lookup. \r\n\r\nClosing the issue due to inactivity, @saurabh500 or @geleems please reopen if you believe this is a .net issue, based on the information provided in previous comment. Thanks!"
      },
      {
        "user": "toorajhelmi",
        "created_at": "2017-11-08T02:30:38Z",
        "body": "This is definitely a .net core issue. I can make a connection to a URL using HttpClient and setting the  base address to the URL. But if I use a TcpClient and use the same URL I get this error. Looks like the implementation of Dns.GetHostEntry in Mac is different than HttpClient and not working."
      },
      {
        "user": "rmsutton",
        "created_at": "2018-03-05T13:36:17Z",
        "body": "Agreed. This is definitely an issue. The call succeeds on Windows but fails in a Linux environment. Is there a workaround for this?"
      },
      {
        "user": "wfurt",
        "created_at": "2018-03-05T18:57:18Z",
        "body": "I tried simple program like this:\r\n\r\n``` c#\r\nusing System;\r\nusing System.Net;\r\n\r\nnamespace ipv6\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            IPHostEntry hostEntry =  System.Net.Dns.GetHostEntry(\"11.10.10.10\");\r\n            Console.WriteLine(\"hostEntry={0}\", hostEntry);\r\n        }\r\n    }\r\n}\r\n```\r\nand it also fails on Windows 10. When I  use \"127.0.0.1\" it works on Linux & Windows.\r\nAlso note that gethostbyname(\"11.10.10.10\") succeeds on my Linux system.\r\n\r\n> Unhandled Exception: System.Net.Sockets.SocketException: No such host is known\r\n>    at System.Net.Dns.InternalGetHostByAddress(IPAddress address, Boolean includeIPv6)\r\n>    at System.Net.Dns.GetHostEntry(String hostNameOrAddress)\r\n>    at ipv6.Program.Main(String[] args) in C:\\Users\\build\\ipv6\\Program.cs:line 11\r\n> \r\n\r\nso the behavior seems consistent and observed differences can be in network configuration. \r\n\r\nHowever many applications (at least on Linux) would take host or IP and they would function function without IP having reverse entry. It seems reasonable that if valid IP address string is passed in and DNS lookup fails we return IPHostEntry crafted from that address. My guess is that they are after AddressList.\r\n\r\nMaybe there is some other API you can recommend @stephentoub to make mix of names and addresses easier for app writers. Matching behavior of gethostbyname() may be  good improvement. "
      },
      {
        "user": "ahmadalli",
        "created_at": "2018-09-19T06:17:32Z",
        "body": "this is related to dotnet/runtime#1488"
      },
      {
        "user": "wfurt",
        "created_at": "2018-09-19T06:23:22Z",
        "body": "system resolver is particularly flaky on OSX. I put in some traces and resolving same name over and over fails frequently on 10.13. (OS getaddrinfo() fails) \r\n\r\nHowever that is different than claim that string representation of IPv4 address cannot resolve if system is configured properly. "
      }
    ]
  },
  {
    "number": 20039,
    "title": "HostingEnvironment.MapPath Behaves differently in VS 2017 (different MSBuild) than in VS 2015",
    "created_at": "2017-01-27T16:14:26Z",
    "closed_at": "2020-01-31T13:55:20Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20039",
    "body": "Both sessions in DEBUG of a ASP.NET API Project running .NET Framework 4.6.1. \r\n\r\nMethod in Question: HostingEnvironment.MapPath(\"~\");\r\nWe were running the method inside the WebApiConfig.cs class (Class name is the same without the .cs) under the method \"Public static void Register(HttpConfiguration config)\" Method.\r\n\r\nExpected Output (as in VS 2015): \r\n\"Root:\\path\\to\\folder\\\" (without quotes)\r\n\r\nResult in VS 2017: \r\n\"Root:\\Path\\To\\Folder\" (without Quotes)\r\n\r\nBuild is treating this differently for some reason. and by upgrading to the RC, this breaks our code.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20039/comments",
    "author": "skyhoshi",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-01-27T22:45:38Z",
        "body": "`HostingEnvironment` is ASP.NET class - if it is about ASP.NET Core, please look at ASP.NET Core repo."
      }
    ]
  },
  {
    "number": 20038,
    "title": "How to make httpclient call from the client to the server using .net core",
    "created_at": "2017-01-27T15:11:36Z",
    "closed_at": "2020-01-31T13:55:08Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20038",
    "body": "Hello Everyone,\r\n\r\nI want to make some httpclient calls to the server using .net core. I would really appreciate if anyone can provide me any reference or an idea how to do it it will be really helpful.\r\n\r\nUsing .net framework it's not a problem, but using .net core I don't understand what will be the best way to go.\r\n\r\nTo be more specific about my question, I would generalize it: That is,\r\n\r\nI want to make HttpClient calls to the server, to request for the api to the server and get the response back from the server in the form of http requests and response. \r\n\r\nThank You!\r\n\r\nI look forward for your response. \r\n\r\nBest regards,\r\n\r\nSandeep",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20038/comments",
    "author": "SandeepApsingekar",
    "comments": [
      {
        "user": "Priya91",
        "created_at": "2017-01-31T00:53:06Z",
        "body": "> Using .net framework it's not a problem, but using .net core I don't understand what will be the best way to go.\r\n\r\n@SandeepApsingekar Whatever code you're using for .NET Framework should work. .NET Core has the same API surface area of HttpClient as Full Framework. Can you post your code sample from full framework that doesn't work with .NET Core?"
      },
      {
        "user": "SandeepApsingekar",
        "created_at": "2017-01-31T18:03:09Z",
        "body": "Hi Priya,\r\n\r\nThank you so much for following up with me. I actually had a problem in retrieving the url in the async methods. Now, I figured out the way. I can share the code of .NET core which I'm working on right now. Following is the code where I'm accessing the uri:.\r\nHttpClient client = new HttpClient();\r\nclient.BaseAddress = new Uri(\"api url\");\r\n            client.DefaultRequestHeaders.Accept.Clear();\r\n            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\r\n\r\nNow, I'm calling this method in GetAsync using the required path.\r\n\r\nThank You!\r\nRegards,\r\nSandeep\r\n "
      },
      {
        "user": "Priya91",
        "created_at": "2017-01-31T18:59:10Z",
        "body": "> Now, I figured out the way.\r\n\r\nClosing the issue."
      }
    ]
  },
  {
    "number": 19991,
    "title": "Task.Delay and optional parameter issue",
    "created_at": "2017-01-23T16:41:00Z",
    "closed_at": "2020-01-31T13:52:06Z",
    "labels": [
      "question",
      "area-System.Threading"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19991",
    "body": "Hey everybody, I don´t know exactly where to post this issue.\r\n\r\nI have the following code. \r\n\r\n```cs\r\n\r\npublic class Constants\r\n{\r\n    public const int constantDefault = 100;\r\n}\r\n\r\n\r\npublic async Task<CamImageData> GetOneImage(..., int millisecondsDelay = Constants.constantDefault )\r\n{\r\n    await Task.Delay(millisecondsDelay);\r\n    return await GetOneImage(...);\r\n}\r\n\r\n// Called without touching the optional parameter\r\n\r\nawait GetOneImage();\r\n\r\n```\r\n\r\nStarting with the last Visual Studio 2015 Update,\r\nthe Code never reaches the internal GetOneImage(...).\r\n\r\nIt only works if called like\r\n\r\n```cs\r\n   await Task.Delay(Constants.constantDefault);\r\n\r\n   // or\r\n\r\n   await Task.Delay(100);\r\n\r\n\r\n  // or calling the GetOneImage like\r\n  await GetOneImage(Constants.constantDefault);\r\n\r\n```\r\n\r\nAlso not working \r\n\r\n```cs\r\n\r\n    public async Task<CamImageData> GetOneImage(..., int millisecondsDelay = 100)\r\n    {\r\n        await Task.Delay(millisecondsDelay );\r\n        ....\r\n    }\r\n```\r\n\r\nThe project is a WPF application targeting .NET 4.5. Developement platform is Win 10 and Visual Studio 2015 14.0.25431.01 Update 3. The config is *Debug* and *Any CPU*\r\n\r\nGreetings!",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19991/comments",
    "author": "Muraad",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-01-23T17:10:12Z",
        "body": "This is very suspicious/mysterious behavior. Can you reproduce it in small HelloWorld app? Did you try targeting latest .NET Framework? Did you try targeting .NET Core?\r\n\r\nBTW: Technically speaking, we do not accept full/Desktop .NET Framework bug reports on GiHub ... but it may be good to understand at least where is a problem first ... (compiler / runtime / the app)"
      },
      {
        "user": "Muraad",
        "created_at": "2017-01-23T17:22:35Z",
        "body": "Yes it is indeed very suspicious. \r\n\r\nTargeting 4.6.1 or *Release* is not making any difference.\r\n\r\nI will try to isolate it in a smaller app."
      },
      {
        "user": "Muraad",
        "created_at": "2017-01-23T18:25:06Z",
        "body": "I´v tried to make it as small as possible.\r\n\r\n```cs\r\n\r\n    public class Constants\r\n    {\r\n        public const int delayMs = 100;\r\n    }\r\n\r\n    public class TestData\r\n    {\r\n        public string Data { get; set; }\r\n    }\r\n\r\n    public class TestClass\r\n    {\r\n        ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim();\r\n        TestData lastData = null;\r\n\r\n        public void Start()\r\n        {\r\n            Task.Run(TestDataProducer);\r\n        }\r\n\r\n        public async Task<TestData> GetOneImage(int x = 0, int y = 0, int optParam = 0, int msDelay = Constants.delayMs)\r\n        {\r\n            await Task.Delay(msDelay);\r\n            return await GetOneImage();\r\n        }\r\n\r\n        private Task<TestData> GetOneImage()\r\n        {\r\n            return Task.Run(() =>\r\n            {\r\n                TestData data = null;\r\n\r\n                // Enter/Exit lock\r\n                RequestData();\r\n\r\n                // Spin wait for new data\r\n                SpinWait spinner = new SpinWait();\r\n                while (data == null)\r\n                {\r\n                    // Enter/Exit lock\r\n                    data = GetData();\r\n                    if (data == null)\r\n                    {\r\n                        for (int i = 0; i < 50; i++)\r\n                            spinner.SpinOnce();\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            });\r\n        }\r\n\r\n        private async Task TestDataProducer()\r\n        {\r\n            while(true)\r\n            {\r\n                try\r\n                {\r\n                    rwLock.EnterWriteLock();\r\n                    if(lastData == null)\r\n                        lastData = new TestData() { Data = \"Hello World\" };\r\n                }\r\n                finally\r\n                {\r\n                    if (rwLock.IsWriteLockHeld)\r\n                        rwLock.ExitWriteLock();\r\n                }\r\n\r\n                await Task.Delay(100);\r\n            }\r\n        }\r\n        \r\n        private TestData GetData()\r\n        {\r\n            TestData tmp = null;\r\n            try\r\n            {\r\n                rwLock.EnterWriteLock();\r\n                tmp = lastData;\r\n            }\r\n            finally\r\n            {\r\n                if (rwLock.IsWriteLockHeld)\r\n                    rwLock.ExitWriteLock();\r\n            }\r\n            return tmp;\r\n        }\r\n\r\n        private void RequestData()\r\n        {\r\n            try\r\n            {\r\n                rwLock.EnterWriteLock();\r\n                lastData = null;\r\n            }\r\n            finally\r\n            {\r\n                if (rwLock.IsWriteLockHeld)\r\n                    rwLock.ExitWriteLock();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n```\r\n\r\nCalling it from a blank WPF App works fine.\r\n\r\nThe only real difference in my case is the data producer is some camera driver sdk .Net event (Jai sdk)\r\n\r\n```cs\r\n\r\n    /// <summary>\r\n    /// Interaktionslogik für MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        TestClass testClass = new TestClass();\r\n\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            testClass.Start();\r\n        }\r\n\r\n        private async void button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            await Call();\r\n        }\r\n\r\n        private async Task<TestData> Call()\r\n        {\r\n            return await testClass.GetOneImage(1, 1);\r\n        }\r\n    }\r\n\r\n```"
      },
      {
        "user": "Muraad",
        "created_at": "2017-01-23T18:36:08Z",
        "body": "Ok sorry my bad :|\r\nIf optional parameter default values between interface method definition and method implementation differ, there is no \"virtualisation\" or something. It is using the interface optional parameter value if called via interface reference."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-23T18:40:01Z",
        "body": "Happy to hear you found the root cause :)"
      }
    ]
  },
  {
    "number": 19944,
    "title": "Problem porting RSAPKCS1SignatureFormatter implementation to RSA.Create()",
    "created_at": "2017-01-17T19:32:40Z",
    "closed_at": "2020-01-31T13:49:36Z",
    "labels": [
      "question",
      "area-System.Security"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19944",
    "body": "Hi\r\n\r\nI am trying to port an oauth1.0 implementation using RSAPKCS1SignatureFormatter to dotnet core.\r\n\r\nThis is what I have so far \r\n\r\noriginal **net40**\r\n```\r\nprivate byte[] SignByte(SHA1CryptoServiceProvider hash)\r\n{\r\n   var formatter = new RSAPKCS1SignatureFormatter(myX509Certificate2.PrivateKey);\r\n   formatter.SetHashAlgorithm(\"MD5\");\r\n\r\n   return formatter.CreateSignature(hash);\r\n}\r\n```\r\n\r\nport **netcoreapp1.0**\r\n```\r\n\r\nprivate byte[] SignByte(byte[] hash)\r\n{\r\n   byte[] signature = RSA.Create().SignHash(hash, HashAlgorithmName.MD5, RSASignaturePadding.Pkcs1);\r\n   return signature;\r\n}\r\n\r\n```\r\n\r\nHowever I keep getting this exception when trying to use MD5 with RSASignaturePadding.Pkcs1\r\n\r\n```\r\nAn unhandled exception of type 'Internal.Cryptography.CryptoThrowHelper.WindowsCryptographicException' occurred in System.Security.Cryptography.Algorithms.dll\r\n\r\nAdditional information: The parameter is incorrect\r\n```\r\n\r\nAny ideas?\r\n\r\nAlso how would I import the key when using RSA.Create()?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19944/comments",
    "author": "TrplM",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2017-02-02T05:39:34Z",
        "body": "@TrplM You can import a key from an `RSAParameters` by using the `ImportParameters` method on `RSA`.\r\n\r\nYour code, aside from not using the `RSA` object in a `using` statement (and loading the key you want) seems correct, provided that `hash` is an array of the correct size (16 bytes for MD5).  If the array is the correct length, perhaps a full callstack can help reveal what's gone wrong."
      },
      {
        "user": "bartonjs",
        "created_at": "2017-03-09T21:43:35Z",
        "body": "Since we haven't heard anything in quite a while I'm going to close this issue.  Feel free to post a followup, since that'll still send out notifications."
      }
    ]
  },
  {
    "number": 19930,
    "title": "How to specify network adapter which HttpClient must use?",
    "created_at": "2017-01-15T15:04:52Z",
    "closed_at": "2020-01-31T13:48:46Z",
    "labels": [
      "question",
      "area-System.Net.Http"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19930",
    "body": "At .NET Framework it can be done by HttpWebRequest.ServicePoint.BindIPEndPointDelegate.\r\n\r\nCan't find anything about that. It's currently impossible?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19930/comments",
    "author": "Vicher",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-01-15T16:23:14Z",
        "body": "This is not possible in either .NET Framework or .NET Core implementations of `HttpWebRequest`.\r\n\r\nAnd, FYI, `ServicePoint.BindIPEndPointDelegate` is not implemented in .NET Core. It is only implemented in .NET Framework."
      },
      {
        "user": "Vicher",
        "created_at": "2017-01-15T16:38:46Z",
        "body": "Any plans to add this feature?"
      },
      {
        "user": "davidsh",
        "created_at": "2017-01-15T18:38:11Z",
        "body": "There are no plans to add this.  it would be difficult since it would require changes to various OS layer stacks to provide enumeration of adapters as well as APIs to pass a specific adapter down to the TCP connection logic of various HTTP stacks."
      },
      {
        "user": "Priya91",
        "created_at": "2017-01-20T19:26:09Z",
        "body": "@Vicher Closing the issue per @davidsh comment."
      }
    ]
  },
  {
    "number": 19924,
    "title": "File.SetLastWriteTime does not seem to work when called repeatedly",
    "created_at": "2017-01-14T01:06:48Z",
    "closed_at": "2020-01-31T13:48:21Z",
    "labels": [
      "question",
      "area-System.IO"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19924",
    "body": "```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var path = Path.GetTempFileName();\r\n        File.WriteAllText(path, \"foo\");\r\n\r\n        for(var i = 0; i < 10; i++){\r\n\r\n            Console.WriteLine($\"\\n--> {new FileInfo(path).LastWriteTimeUtc}\");\r\n\r\n            File.SetLastWriteTime(path, DateTime.Now + new TimeSpan(1, 0, 0));\r\n            Thread.Sleep(1000);\r\n\r\n            Console.WriteLine($\"--> {new FileInfo(path).LastWriteTimeUtc}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProduces output:\r\n```\r\n--> 1/14/2017 12:51:52 AM\r\n--> 1/14/2017 1:51:52 AM\r\n\r\n--> 1/14/2017 1:51:52 AM\r\n--> 1/14/2017 1:51:53 AM\r\n\r\n--> 1/14/2017 1:51:53 AM\r\n--> 1/14/2017 1:51:54 AM\r\n\r\n--> 1/14/2017 1:51:54 AM\r\n--> 1/14/2017 1:51:55 AM\r\n\r\n--> 1/14/2017 1:51:55 AM\r\n--> 1/14/2017 1:51:56 AM\r\n\r\n--> 1/14/2017 1:51:56 AM\r\n--> 1/14/2017 1:51:57 AM\r\n\r\n--> 1/14/2017 1:51:57 AM\r\n--> 1/14/2017 1:51:58 AM\r\n\r\n--> 1/14/2017 1:51:58 AM\r\n--> 1/14/2017 1:51:59 AM\r\n\r\n--> 1/14/2017 1:51:59 AM\r\n--> 1/14/2017 1:52:00 AM\r\n\r\n--> 1/14/2017 1:52:00 AM\r\n--> 1/14/2017 1:52:01 AM\r\n```\r\n\r\nI'd expect all iterations to increment the time by one hour, but only the first one seems to do so. This is happening for both Windows and OSX on `\"System.IO\": \"4.3.0-preview1-24530-04\"`\r\n\r\nIs there some caching / throttling going on that I'm not aware of? How can I get this working in a loop?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19924/comments",
    "author": "cdmihai",
    "comments": [
      {
        "user": "akoeplinger",
        "created_at": "2017-01-14T17:34:08Z",
        "body": "`DateTime.Now + new TimeSpan(1, 0, 0))` results in the same value for all your iterations, so this seems correct to me :smile:"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-14T18:32:14Z",
        "body": "Closing as it seems to work correctly. If we missed anything, please let us know."
      }
    ]
  },
  {
    "number": 19750,
    "title": "can't join Multicast group on Linux - no IGMP ADD_MEMBERSHIP report visible in Wireshark",
    "created_at": "2016-12-22T15:21:13Z",
    "closed_at": "2020-01-31T13:37:45Z",
    "labels": [
      "question",
      "area-System.Net.Sockets",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19750",
    "body": "I'm having trouble joining mcast group on Linux\r\n\r\nI'm using the following code:\r\n\r\n```\r\nSocket sock = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\r\nsock.Bind(new IPEndPoint(\"<LOCAL_NIC_IP>\", MulticastGroupPort));\r\nsock.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.AddMembership, new MulticastOption(IPAddress.Parse(\"<MULTICAST_GROUP_IP>\")));\r\n\r\n```\r\n\r\nbut I can't see any ADD_MEMBERSHIP report in WireShark\r\nand of course I'm not receiving any data\r\n\r\nI've tried various combinations of above, but with no success\r\n\r\nis it possible to receive data from multicast group without using UdpClient ?\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19750/comments",
    "author": "rottor12",
    "comments": [
      {
        "user": "rottor12",
        "created_at": "2016-12-22T15:22:24Z",
        "body": "cc: @stephentoub @ericeil"
      },
      {
        "user": "Priya91",
        "created_at": "2017-02-17T01:34:59Z",
        "body": "@rottor12 Can you check if firewall is not blocking the MulticastGroupPort? Is this reproing still?"
      },
      {
        "user": "karelz",
        "created_at": "2017-12-06T23:17:22Z",
        "body": "No answer, closing"
      }
    ]
  },
  {
    "number": 7154,
    "title": "Q) Where is \"IL_STUB_ReversePInvoke\" from?",
    "created_at": "2016-12-20T10:16:23Z",
    "closed_at": "2020-01-31T00:54:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7154",
    "body": "I'm in the middle of somewhere fixing Reverse P/Invoke Segment fault problem in x86/Linux.\r\nWhile tracing in assembly codes, I see \r\n```\r\nDomainNeutralILStubClass:IL_STUB_ReversePInvoke(int,int)\r\n```\r\nmethod but could not find where it came from. Other JITted codes could be found.\r\nAnyone know where this method is emiited?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7154/comments",
    "author": "seanshpark",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-12-20T15:55:37Z",
        "body": "The IL for this method is emitted by CreateNDirectStubWorker"
      },
      {
        "user": "seanshpark",
        "created_at": "2016-12-20T22:42:11Z",
        "body": "@jkotas , Thank you!"
      }
    ]
  },
  {
    "number": 19682,
    "title": "EntryPointNotFoundException on .NET Core on Linux",
    "created_at": "2016-12-14T15:46:38Z",
    "closed_at": "2020-01-31T13:33:54Z",
    "labels": [
      "question",
      "area-System.Runtime.InteropServices"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19682",
    "body": "I want to prepare a wrapper library for a 3rd party library on linux\r\n\r\nI've created 2 simple functions, and from another C++ program they execute without a problem\r\n\r\nalso .. I've tried to use system library (libc) and it works without issues:\r\n\r\n[System.Runtime.InteropServices.DllImport(\"libc\")]\r\npublic static extern int puts(string str);\r\n\r\nputs(\"some test string\"); // <- this works\r\n\r\nhowever, when I try to use my 2 simple function from my wrapper library, I'm getting EntryPointNotFoundException exception\r\n\r\nhere is the code:\r\n\r\n[System.Runtime.InteropServices.DllImport(\"mywrapper\")]\r\npublic static extern void TestFunc1();\r\n[System.Runtime.InteropServices.DllImport(\"mywrapper\")]\r\npublic static extern string TestFunc2();\r\n\r\nUnhandled Exception: System.EntryPointNotFoundException: Unable to find an entry point named 'TestFunc1' in DLL 'mywrapper'.\r\n\r\nthe library is found, and from C++ these two functions just work\r\nalso ... a DLLImport puts(const char *) works in .NET Core\r\n\r\nonly my library has this problem\r\n\r\nany ideas ?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19682/comments",
    "author": "rottor12",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-12-14T17:39:56Z",
        "body": "cc: @janvorli"
      },
      {
        "user": "janvorli",
        "created_at": "2016-12-14T19:01:58Z",
        "body": "@rottor12 do you have extern \"C\" on your functions? If not, their names would be mangled."
      },
      {
        "user": "rottor12",
        "created_at": "2016-12-14T19:42:21Z",
        "body": "@janvorli I was missing extern \"C\" before method signatures, but .. after the change to extern \"C\", and ldconfig, I'm still getting the same error"
      },
      {
        "user": "janvorli",
        "created_at": "2016-12-14T19:49:51Z",
        "body": "@rottor12 could you please run `objdump -T mywrapper.so` and paste here the results?"
      },
      {
        "user": "rottor12",
        "created_at": "2016-12-14T20:02:37Z",
        "body": "I had another copy of an old library in the .NET Core project, and that is why the error still persisted\r\n\r\nonce I removed it (so it could load a version from /usr/lib64) it run the first function correctly, the second produced an error, but that I'll handle on my own\r\n\r\nbig thanks for your help !!\r\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-12-14T20:12:36Z",
        "body": "Great, I am glad to hear that!"
      }
    ]
  },
  {
    "number": 19558,
    "title": "publishing self contained apps hang indefinitly on web api projects",
    "created_at": "2016-12-05T20:48:43Z",
    "closed_at": "2020-01-31T13:26:19Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19558",
    "body": "This is a consistent problem for me. Happens when trying to publish from VS or cli. Only one framework in use ( \"win10-x64\" ) . Have not tried yet with other framework monikers\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19558/comments",
    "author": "PaybackMan",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-12-06T01:09:22Z",
        "body": "Does it happen on more than one machine?\r\n@piotrpMSFT can you please help route it?"
      },
      {
        "user": "TheRealPiotrP",
        "created_at": "2016-12-06T01:56:49Z",
        "body": "Hard to route just yet. Would be great to get a /v:diag trace of the publish operation. I believe Web Api goes through a special publish path @mlorbetske would know about, but it may be in the default Publish in CLI..."
      },
      {
        "user": "mellinoe",
        "created_at": "2017-03-08T20:11:00Z",
        "body": "@PaybackMan We will need more information about this for it to be actionable. Please re-open if you have are still experiencing this problem and are able to provide more info."
      }
    ]
  },
  {
    "number": 7020,
    "title": "[GDB-JIT/Linux] Incorrect argument type for generics",
    "created_at": "2016-11-21T12:36:33Z",
    "closed_at": "2020-01-31T00:47:30Z",
    "labels": [
      "question",
      "design-discussion",
      "area-Diagnostics-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7020",
    "body": "I'm testing gdb-jit interface on coreclr tests and detected incorrect behavior with following test (reduced  test from `coreclr/tests/src/JIT/Generics/Instantiation/Classes/BaseClass01.cs`):\r\n\r\n```c#\r\nusing System;\r\npublic class GenBase<T>\r\n{\r\n    public T Fld1;\r\n    public GenBase(T fld1)\r\n    {\r\n        Fld1 = fld1;\r\n    }\r\n    public bool InstVerify(System.Type t1)\r\n    {\r\n        bool result = true;\r\n        if (!(Fld1.GetType().Equals(t1)))\r\n        {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n}\r\npublic class GenString : GenBase<String>\r\n{\r\n    public GenString() : base(\"string\") { }\r\n    public bool InstVerify()\r\n    {\r\n        return base.InstVerify(typeof(string));\r\n    }\r\n}\r\n\r\npublic class Test\r\n{\r\n    public static int counter = 0;\r\n    public static bool result = true;\r\n    public static void Eval(bool exp)\r\n    {\r\n        counter++;\r\n        if (!exp)\r\n        {\r\n            result = exp;\r\n        }\r\n    }\r\n    public static int Main()\r\n    {\r\n        Eval(new GenString().InstVerify());\r\n        if (result)\r\n        {\r\n            return 100;\r\n        }\r\n        else\r\n        {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\n \r\n```\r\nWhen I set breakpoint to GenBase.InstVerify, I get System.__Canon instead of System.String as a type argument. This test case works correctly with basic types like int, double, short etc.\r\nHere is an output of debug session:\r\n```\r\nepavlov@epavlov-ubuntu:~/coreclr-demo/runtime$ CORECLR_GDBJIT='BaseClass01.exe' lldb  -o \"target create corerun\" -o \"settings set target.run-args ./BaseClass01.exe\" -o \"process launch -s\" -o \"breakpoint set --name InstVerify\" -o \"c\"\r\n(lldb) target create corerun\r\nCurrent executable set to 'corerun' (x86_64).\r\n(lldb) settings set target.run-args ./BaseClass01.exe\r\n(lldb) process launch -s\r\nProcess 16580 launched: '/home/epavlov/coreclr-demo/runtime/corerun' (x86_64)\r\n(lldb) breakpoint set --name InstVerify\r\nBreakpoint 1: no locations (pending).\r\nWARNING:  Unable to resolve breakpoint to any actual locations.\r\n(lldb) c\r\n1 location added to breakpoint 1\r\nProcess 16580 resuming\r\nProcess 16580 stopped\r\n* thread dotnet/coreclr#1: tid = 16580, 0x00007fff7d4aeef3 JIT(0x717970)`InstVerify(this=0x00007fff6002f788) + 35 at BaseClass01.cs:36, name = 'corerun', stop reason = breakpoint 1.1\r\n    frame #0: 0x00007fff7d4aeef3 JIT(0x717970)`InstVerify(this=0x00007fff6002f788) + 35 at BaseClass01.cs:36\r\n   33  \t    public GenString() : base(\"string\") { }\r\n   34  \t\r\n   35  \t    public bool InstVerify()\r\n-> 36  \t    {\r\n   37  \t        return base.InstVerify(typeof(string));\r\n   38  \t    }\r\n   39  \t}\r\n\r\n(lldb) c\r\nProcess 16580 resuming\r\n1 location added to breakpoint 1\r\nProcess 16580 stopped\r\n* thread dotnet/coreclr#1: tid = 16580, 0x00007fff7d4aefab JIT(0x71f160)`InstVerify(this=0x00007fff6002f788, t1=0x00007fff60009ca8) + 43 at BaseClass01.cs:18, name = 'corerun', stop reason = breakpoint 1.2\r\n    frame #0: 0x00007fff7d4aefab JIT(0x71f160)`InstVerify(this=0x00007fff6002f788, t1=0x00007fff60009ca8) + 43 at BaseClass01.cs:18\r\n   15  \t    }\r\n   16  \t\r\n   17  \t    public bool InstVerify(System.Type t1)\r\n-> 18  \t    {\r\n   19  \t        bool result = true;\r\n   20  \t\r\n   21  \t        if (!(Fld1.GetType().Equals(t1)))\r\n(lldb) fr v\r\n(GenBase`1[System.__Canon] *) this = 0x00007fff6002f788\r\n(System.Type *) t1 = 0x00007fff60009ca8\r\n(bool) result = false\r\n(lldb) p this->Fld1\r\n(System.__Canon *) $0 = 0x00007fff6002f7a0\r\n(lldb) \r\n```\r\nI tried to use code below to get correct typeHandle for System.__Canon, but failed.\r\n```c++\r\nif (pMT->HasInstantiation())\r\n{\r\n      Instantiation inst = pMT->GetInstantiation();\r\n      typeHandle = inst[0];\r\n}\r\n```\r\n@mikem8361, @janvorli Could you suggest a way to get correct type for System.__Canon? \r\nCC: @Dmitri-Botcharnikov @kvochko ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7020/comments",
    "author": "lucenticus",
    "comments": [
      {
        "user": "janvorli",
        "created_at": "2016-11-21T13:57:05Z",
        "body": "The System.__Canon represents any reference type in generic instantiation. That way, generic instantiations can share code for all reference types. The method table representing such a generalization of a type is called Canonical method table. And that's what you are getting for \"this\". \r\nMethod table for an instantiated generic type contains a pointer to the canonical method table. However, the canonical method table doesn't refer to an instantiated method table, since there can be many of them for one canonical method table.\r\nCanonical implementations have an additional hidden argument containing real type's MethodTable or MethodDesc pointer. The MethodTable is there for generic classes and MethodDesc for generic methods. This argument goes after \"this\" for member methods or as the first parameter for static methods. So you could possibly extract that from the registers yourself. \r\nI think you can use pMT->IsCanonicalMethodTable() and pMD->IsGenericMethodDefinition() to check whether there is the hidden argument and whether it contains MethodTable or MethodDesc pointer.\r\n@jkotas - is there some better way to figure this out?\r\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-21T19:27:24Z",
        "body": "`EECodeManager::GetParamContextType`, `EECodeManager::GetParamTypeArg` and `EECodeManager::GetExactGenericsToken` are related to this. Note that the generic context may be optimized out (e.g. if the method does not need it), so you may not be able to get the exact generic instantiation at all. If the exact generic context is not available, the diagnostic tools usually use the names of the generic arguments to display the instantiation to the user."
      },
      {
        "user": "lucenticus",
        "created_at": "2016-11-25T08:12:35Z",
        "body": "@janvorli, @jkotas thanks a lot for clarifying!\r\nI've tried to use `GetParamTypeArg`, but it seems I get REGDISPLAY incorrectly, because `GetParamTypeArg` crashed in `EECodeInfo::GetFunctionEntry`\r\n\r\n```\r\n\r\nepavlov@epavlov-ubuntu:~/coreclr-demo/runtime$ CORECLR_GDBJIT='BaseClass01.exe' lldb -o \"target create corerun\" -o \"settings set target.run-args ./BaseClass01.exe\" -o \"process launch -s\" -o \"c\"(lldb) target create corerun\r\nCurrent executable set to 'corerun' (x86_64).\r\n(lldb) settings set target.run-args ./BaseClass01.exe\r\n(lldb) process launch -s\r\nProcess 5113 launched: '/home/epavlov/coreclr-demo/runtime/corerun' (x86_64)\r\n(lldb) c\r\nProcess 5113 resuming\r\nProcess 5113 stopped\r\n* thread dotnet/coreclr#1: tid = 5113, 0x00007ffff5db303a libcoreclr.so`EECodeInfo::GetFunctionEntry(this=0x00007fffffffa240) + 42 at jitinterface.cpp:14050, name = 'corerun', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x00007ffff5db303a libcoreclr.so`EECodeInfo::GetFunctionEntry(this=0x00007fffffffa240) + 42 at jitinterface.cpp:14050\r\n   14047\t    SUPPORTS_DAC;\r\n   14048\t\r\n   14049\t    if (m_pFunctionEntry == NULL)\r\n-> 14050\t        m_pFunctionEntry = m_pJM->LazyGetFunctionEntry(this);\r\n   14051\t    return m_pFunctionEntry;\r\n   14052\t}\r\n   14053\t\r\n\r\n(lldb) bt\r\n* thread dotnet/coreclr#1: tid = 5113, 0x00007ffff5db303a libcoreclr.so`EECodeInfo::GetFunctionEntry(this=0x00007fffffffa240) + 42 at jitinterface.cpp:14050, name = 'corerun', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007ffff5db303a libcoreclr.so`EECodeInfo::GetFunctionEntry(this=0x00007fffffffa240) + 42 at jitinterface.cpp:14050\r\n    frame dotnet/coreclr#1: 0x00007ffff5e4babe libcoreclr.so`Thread::VirtualUnwindCallFrame(pContext=0x00007fffffffb490, pContextPointers=0x00007fffffffba60, pCodeInfo=0x0000000000000000) + 94 at stackwalk.cpp:611\r\n    frame dotnet/coreclr#2: 0x00007ffff5d3f325 libcoreclr.so`EECodeManager::EnsureCallerContextIsValid(pRD=0x00007fffffffaf80, pCacheEntry=0x0000000000000000, pCodeInfo=0x0000000000000000) + 197 at eetwain.cpp:3082\r\n    frame dotnet/coreclr#3: 0x00007ffff5d3f5a6 libcoreclr.so`EECodeManager::GetCallerSp(pRD=0x00007fffffffaf80) + 54 at eetwain.cpp:3103\r\n    frame dotnet/coreclr#4: 0x00007ffff5d40458 libcoreclr.so`EECodeManager::GetExactGenericsToken(pContext=0x00007fffffffaf80, pCodeInfo=0x00007fffffffad48) + 40 at eetwain.cpp:5354\r\n    frame dotnet/coreclr#5: 0x00007ffff5d40650 libcoreclr.so`EECodeManager::GetParamTypeArg(this=0x000000000065a6f0, pContext=0x00007fffffffaf80, pCodeInfo=0x00007fffffffad48) + 48 at eetwain.cpp:5336\r\n    frame dotnet/coreclr#6: 0x00007ffff60fab0c libcoreclr.so`NotifyGdb::MethodCompiled(MethodDescPtr=0x00007fff7c06a9d0) + 636 at gdbjit.cpp:1360\r\n    frame dotnet/coreclr#7: 0x00007ffff5eb0ed5 libcoreclr.so`DACNotify::DoJITNotification(MethodDescPtr=0x00007fff7c06a9d0) + 85 at util.cpp:3418\r\n    frame dotnet/coreclr#8: 0x00007ffff6268330 libcoreclr.so`DACNotifyCompilationFinished(methodDesc=0x00007fff7c06a9d0) + 144 at prestub.cpp:234\r\n    frame dotnet/coreclr#9: 0x00007ffff6269955 libcoreclr.so`MethodDesc::MakeJitWorker(this=0x00007fff7c06a9d0, ILHeader=0x00000000006abcf0, flags=(corJitFlags = 0)) + 5637 at prestub.cpp:645\r\n    frame dotnet/coreclr#10: 0x00007ffff626c1e8 libcoreclr.so`MethodDesc::DoPrestub(this=0x00007fff7c06a9d0, pDispatchingMT=0x0000000000000000) + 3224 at prestub.cpp:1470\r\n    frame dotnet/coreclr#11: 0x00007ffff626b203 libcoreclr.so`::PreStubWorker(pTransitionBlock=0x00007fffffffca68, pMD=0x00007fff7c06a9d0) + 1475 at prestub.cpp:1057\r\n    frame dotnet/coreclr#12: 0x00007ffff615159c libcoreclr.so`ThePreStub + 92 at theprestubamd64.S:808\r\n    frame dotnet/coreclr#13: 0x00007fff7d4e65c5\r\n    frame dotnet/coreclr#14: 0x00007fff7d4ae679\r\n    frame dotnet/coreclr#15: 0x00007ffff6150aaf libcoreclr.so`CallDescrWorkerInternal + 124 at calldescrworkeramd64.S:872\r\n    frame dotnet/coreclr#16: 0x00007ffff5eedaba libcoreclr.so`CallDescrWorkerWithHandler(pCallDescrData=0x00007fffffffcf38, fCriticalCall=NO) + 522 at callhelpers.cpp:89\r\n    frame dotnet/coreclr#17: 0x00007ffff5eef290 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=0x00007fffffffd0f0, pArguments=0x00007fffffffd080, pReturnValue=0x00007fffffffcfb8, cbReturnValue=8) + 2960 at callhelpers.cpp:656\r\n    frame dotnet/coreclr#18: 0x00007ffff5e88be3 libcoreclr.so`MethodDescCallSite::Call_RetArgSlot(this=0x00007fffffffd0f0, pArguments=0x00007fffffffd080) + 179 at callhelpers.h:433\r\n    frame dotnet/coreclr#19: 0x00007ffff619a2e4 libcoreclr.so`RunMain(this=0x00007fffffffd248, pParam=0x00007fffffffd340)::$_1::operator()(RunMain(MethodDesc*, short, int*, REF<PtrArray>*)::Param*) const::{lambda(RunMain(MethodDesc*, short, int*, REF<PtrArray>*)::Param*)#1}::operator()(RunMain(MethodDesc*, short, int*, REF<PtrArray>*)::Param*) const + 772 at assembly.cpp:2641\r\n    frame dotnet/coreclr#20: 0x00007ffff61972e9 libcoreclr.so`RunMain(this=0x00007fffffffd330, __EXparam=0x00007fffffffd340)::$_1::operator()(RunMain(MethodDesc*, short, int*, REF<PtrArray>*)::Param*) const + 89 at assembly.cpp:2655\r\n    frame dotnet/coreclr#21: 0x00007ffff61970fe libcoreclr.so`RunMain(pFD=0x00007fff7c069e10, numSkipArgs=1, piRetVal=0x00007fffffffd43c, stringArgs=0x00007fffffffd898) + 510 at assembly.cpp:2655\r\n    frame dotnet/coreclr#22: 0x00007ffff619757d libcoreclr.so`Assembly::ExecuteMainMethod(this=0x00000000006adef0, stringArgs=0x00007fffffffd898, waitForOtherThreads=YES) + 333 at assembly.cpp:2762\r\n    frame dotnet/coreclr#23: 0x00007ffff5d1b58a libcoreclr.so`CorHost2::ExecuteAssembly(this=0x0000000000632270, dwAppDomainId=1, pwzAssemblyPath=u\"/home/epavlov/coreclr-demo/runtime/BaseClass01.exe\", argc=0, argv=0x0000000000000000, pReturnValue=0x00007fffffffdb0c) + 1322 at corhost.cpp:1349\r\n    frame dotnet/coreclr#24: 0x00007ffff5cb3a92 libcoreclr.so`::coreclr_execute_assembly(hostHandle=0x0000000000632270, domainId=1, argc=0, argv=0x0000000000000000, managedAssemblyPath=\"/home/epavlov/coreclr-demo/runtime/BaseClass01.exe\", exitCode=0x00007fffffffdb0c) + 354 at unixinterface.cpp:376\r\n    frame dotnet/runtime#3858: 0x0000000000405fea corerun`ExecuteManagedAssembly(currentExeAbsolutePath=\"/home/epavlov/coreclr-demo/runtime/corerun\", clrFilesAbsolutePath=\"/home/epavlov/coreclr-demo/runtime\", managedAssemblyAbsolutePath=\"/home/epavlov/coreclr-demo/runtime/BaseClass01.exe\", managedAssemblyArgc=0, managedAssemblyArgv=0x0000000000000000) + 1482 at coreruncommon.cpp:416\r\n    frame dotnet/runtime#3859: 0x0000000000404fb4 corerun`corerun(argc=2, argv=0x00007fffffffde98) + 724 at corerun.cpp:149\r\n    frame dotnet/coreclr#27: 0x0000000000405092 corerun`main(argc=2, argv=0x00007fffffffde98) + 34 at corerun.cpp:161\r\n    frame dotnet/runtime#3860: 0x00007ffff6d6c830 libc.so.6`__libc_start_main(main=(corerun`main at corerun.cpp:160), argc=2, argv=0x00007fffffffde98, init=<unavailable>, fini=<unavailable>, rtld_fini=<unavailable>, stack_end=0x00007fffffffde88) + 240 at libc-start.c:291\r\n    frame dotnet/runtime#3861: 0x0000000000404969 corerun`_start + 41\r\n(lldb) \r\n\r\n```   \r\nHere is a code for getting generics type:\r\n```c++\r\nPCODE pCode = MethodDescPtr->GetNativeCode();\r\nEECodeInfo codeInfo(pCode);\r\ncodeInfo.Init(pCode);\r\nThread *pThread = GetThread();\r\nCONTEXT context;\r\nREGDISPLAY regDisp;\r\nmemset(&context, 0x00, sizeof(CONTEXT));\r\ncontext.ContextFlags = CONTEXT_FULL;\r\npThread->GetThreadContext(&context);\r\nFillRegDisplay(&regDisp, &context);\r\nif (codeInfo.GetCodeManager()->GetParamContextType(&regDisp, &codeInfo) != GENERIC_PARAM_CONTEXT_NONE)\r\n{\r\n        PTR_VOID arg = codeInfo.GetCodeManager()->GetParamTypeArg(&regDisp, &codeInfo);\r\n        MethodTable* mt = (MethodTable*) arg;\r\n}\r\n\r\n```\r\nCould you share any idea what I'm doing wrong?"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-25T08:19:00Z",
        "body": "You can only do this when the method is actually running, not when it is getting compiled."
      },
      {
        "user": "lucenticus",
        "created_at": "2016-11-25T08:59:14Z",
        "body": "Is there a way to get this argument from the caller function? "
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-25T14:58:52Z",
        "body": "Only if you are right at the call instruction in the caller function when the function with the hidden argument is getting called - take a look at `GetParamTypeArgOffset()::GetParamTypeArgOffset()` or `TransitionFrame::GetParamTypeArg`."
      },
      {
        "user": "karelz",
        "created_at": "2017-04-29T07:15:02Z",
        "body": "It looks like there is nothing actionable for CoreCLR here to track. Closing.\r\nFeel free to reopen/speak up if I missed something. Thanks!"
      }
    ]
  },
  {
    "number": 6948,
    "title": "Span<T> design question",
    "created_at": "2016-11-09T14:14:01Z",
    "closed_at": "2020-01-31T00:43:32Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6948",
    "body": "I had a question on the Span<T> type and its design relating to arrays, slices and unmanaged memory. \r\n\r\nThe idea as I understand it is that the Span will be stack only so that it can safely point to stack allocated or otherwise scoped memory, but it seems to me it would be nicer if the *instance* was scoped instead of the type? That way you could simply reuse the array syntax for Span<T>, and if you need an API that supports stack allocated or native memory then you specify that in the contract. It would be similar to the ref returns API I guess.\r\n\r\nThe important point is that you wouldn't need new classes like Span and Memory, it would all be done via the array syntax. You would perhaps want a new readonly array class though. Some examples (I'm using \"nocapture\" as a keyword, but it's not a nice one....)\r\n\r\nSlicing:\r\n```csharp\r\nint[] a = new[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\nint[] b = a.Slice(3, 2); // Looks exactly like a normal array\r\n// b == {4, 5}\r\n```\r\n\r\nStack allocated:\r\n```csharp\r\nnocapture int[] = stackalloc int[10]; // Can only be passed to nocapture methods\r\n\r\n// This API can parse slices, native memory, stackallocated etc\r\nvoid int Parse(nocapture char[] data)\r\n```\r\n\r\nNative:\r\n```csharp\r\nint* rawData;\r\nnocapture int[] = BindNative(rawData, length); // Bind the native memory to an uncapturable array\r\n```\r\n\r\nI believe Joe Duffy mentioned something somewhat like this in his recent Midori series.\r\n\r\nObjects that are only passed to nocapture methods could potentially be stack allocated and a reference passed\r\n\r\nAnyway, I was just wondering if this kind of approach had been considered and discarded, or if there are other factors at play here?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6948/comments",
    "author": "bencyoung",
    "comments": [
      {
        "user": "KrzysztofCwalina",
        "created_at": "2016-11-11T18:02:12Z",
        "body": "@jaredpar was the main person designing \"no capture\". he should be able to best describe the difficulties/trade-offs here. \n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-11-11T18:40:49Z",
        "body": "The problem with nocapture is that it's incredibly viral as a general purpose feature.  Consider for example this simple code:\n\n``` csharp\nnocapture MyType t = new MyType();\nt.ToString();\n```\n\nIn order for this code to be safe it requires modifications to the constructor and `ToString` method on `MyType`.  Both of these members have the potential to capture `this` and must be protected to prevent it from happening.  This restriction applies to any members these members might call into: base constructors, helper methods, etc ...   It certainly can be done and there are sound approaches to doing it, but it's quite viral in anything but the most trivial of samples. \n\nIt also has some interesting consequences for core types like delegate.  Consider for a minute that `MyType.ToString` method is annotated such that `this` can't be captured.  This means the following conversion cannot work:\n\n``` csharp\nMyType t = new MyType();\nFunc<string> s = t.ToString(); // Error \n```\n\nEven though the local `t` is not marked as nocapture, the method ToString is.  Hence it can't safely convert to a delegate where the `this` value can be freely captured.  Otherwise it would be trivial to escape a nocapture through the delegate members (or by just capturing the delegate itself).\n\nThere are many, many examples you can go into here.  All can be solved with enough work but it's a **ton** of work because C# / .NET really wasn't designed for this type of feature. \n"
      },
      {
        "user": "bencyoung",
        "created_at": "2016-11-14T08:51:20Z",
        "body": "Thanks jaredpar, that's very useful feedback. I guess some of this would be more suited to a new language (something like an amalgam of C# and Rust seems close to the perfect language to me)\n\nOn your specific points, to keep backwards compatibility, as you say,  you wouldn't be able to add nocapture to things like ToString, and so you wouldn't be able to call ToString (or GetHashCode) on a \"non capturable\" reference. I'm not sure if that would be the end of the world though. Concrete overloads would be able to safely add nocapture in a covariant fashion I think, but any call through \"object\" would have to keep the current API (and assume ToString could in theory capture)\n\nI'm not sure I agree with your delegate example (or I may be misunderstanding). Even if ToString does not capture \"this\", it doesn't mean this can't be captured outside. I see this binding happening externally to the signature of the method\n\n``` csharp\nclass X\n{\n  nocapture string Print() {...}\n}\n\nvar x = new X()\nFunc<string> print = bind(x, X.Print); // Fine as x is not nocapture\n\nnocapture var x = new X()\nnocapture Func<string> = bind(x, X.Print); // Fine as the delegate has a smaller scope than x\n\nnocapture var x = new X()\nFunc<string> = bind(x, X.Print); // Error, would allow capturing x via the backdoor\n```\n\nI do agree it would be viral, but I'm not sure it needs to be initially any more viral than the Span<T> type will be, as I can see us using that all through the code where we're trying to avoid allocations etc!\n\nThis is a theoretical discussion though, and I am extremely glad to see these new high perf APIs being added to .NET. It has been very hard to tread the right path between readability and performance up till now.\n"
      },
      {
        "user": "jaredpar",
        "created_at": "2016-11-14T16:58:45Z",
        "body": "> On your specific points, to keep backwards compatibility,  ...  I'm not sure if that would be the end of the world though. \n\nIt's not the end of the world for sure, but it's generally the end of a feature. :smile:\n\nBack compat, love or hate it, is king.  Every time you break compat in the language, even in the smallest most esoteric ways, you break customers.  Typically a lot of customers. \n\n> Concrete overloads would be able to safely add nocapture in a covariant fashion I think, but any call through \"object\" would have to keep the current API (and assume ToString could in theory capture)\n\nAn overload of a nocapture must maintain the nocapture semantics.  Otherwise it's possible to violate nocapture rules by capturing 'this' in an override of `ToString`.  \n\nOr in shorter: an override can add nocapture but it cannot remove it. \n\n> I'm not sure I agree with your delegate example (or I may be misunderstanding). \n\nBased on your example you seem to have a grasp of the problem I was pointing out.  The nocapture is essentially viral and the annotation on the delegate essentially has to match the annotation of the caller.  \n\nIt's actually a bit more viral than the sample alludes to.  Think about the problem of type checking a method marked as nocapture.  So far we've only discussed it in terms of the `this` parameter.  Essentially a method marked as nocapture must ensure only the `this` value isn't captured.  Yet the way you've written the delegate sample implies it's actually more restrictive.  \n\nLook deeper into the delegate type and you'll see a `class` with roughly the following outline:\n\n``` csharp\nclass Delegate {\n  private object _target;\n  private IntPtr _method;\n\n  public object Target => _target;\n  public IntPtr Method => _method;\n\n  protected Delegate(object target, IntPtr method) {\n    _target = target;\n    _method = method;\n  }\n}\n```\n\nIn order for `nocapture Func<string>` to be safe in your sample it must ensure that both `this` and `_target` are not captured.  Otherwise I could escape a nocapture object trivially by doing the following:\n\n``` csharp\nnocapture X local = ...;\nFunc<string> func = local.ToString;\nX local2 = func.Target;\n```\n\nFor the sample you wrote to type check it would imply that nocapture must ensure that `this` and all reachable references from `this` are not captured.  That's downright draconian and falls apart very quickly in more complex types: most notably collections and enumeration. \n\nSolving that problem more elegantly requires a parametric polymorphism solution.  Essentially a way to mark fields and members as nocapture if the caller is also nocapture.  It works and can type check pretty reasonably but it's also a bit more advanced than the average C# user is used to .\n"
      },
      {
        "user": "bencyoung",
        "created_at": "2016-11-15T08:32:03Z",
        "body": "Hi Jaredpar, I think we are in agreement! I meant that it wouldn't be the end of the world if you couldn't call ToString on a nocapture variable (i.e. you could add a covariant nocapture in a derived class, but not remove it). And I completely agree on the delegate thing. Passing a nocapture variable to a constructure would have to mean it flowed to the fields somehow too. \n\nThanks for going through your thought processes. Looking forward to getting Span. I imagine it's going to be lots of work flowing it through all the parse methods etc, especially if both utf8 and utf16 variants are supported!\n"
      }
    ]
  },
  {
    "number": 19238,
    "title": " Dns.GetHostAddressesAsync(Dns.GetHostName()) not working on centos7",
    "created_at": "2016-11-04T09:16:56Z",
    "closed_at": "2020-01-31T13:07:22Z",
    "labels": [
      "question",
      "area-System.Net",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19238",
    "body": "using  Dns.GetHostAddressesAsync(Dns.GetHostName()) can't load local ip address on centos 7 system\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19238/comments",
    "author": "beetlex-io",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-03-02T19:48:46Z",
        "body": "@Priya91 says this is dupe - please find it."
      },
      {
        "user": "Priya91",
        "created_at": "2017-03-03T00:06:02Z",
        "body": "@IKende What is the exact error you get? Refer this issue dotnet/runtime#19222.\r\n\r\nYou can also check if your dns is able to resolve your hostname with\r\n\r\n```\r\ngetent hosts <hostname>\r\n```"
      },
      {
        "user": "Priya91",
        "created_at": "2017-03-08T19:23:39Z",
        "body": "Closing due to lack of further information to proceed."
      }
    ]
  },
  {
    "number": 19071,
    "title": "Xamarin form using OPC UA Client SDK fails to Session Connect",
    "created_at": "2016-10-24T11:34:35Z",
    "closed_at": "2020-01-31T12:57:41Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19071",
    "body": "Working on creating a Xamarin.form Android App using Xamarin.form fails to Session.Connect. throws an error connection refused. Is the SDK supports Xamarin.forms?\nIs there samples on how to use the .net core sdk in xamarin forms?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19071/comments",
    "author": "CarlCrol",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-10-24T17:09:48Z",
        "body": "@weshaggard don't we need NS2.0 APIs (Xamarin compat) to support Xamarin forms?\n\ncc: @danmosemsft\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2016-10-25T04:46:21Z",
        "body": "> @weshaggard don't we need NS2.0 APIs (Xamarin compat) to support Xamarin forms?\n\nI suspect that isn't enough. @akoeplinger are you aware of anyone working on enabling Xamarin forms on top of .NET Core?\n"
      },
      {
        "user": "akoeplinger",
        "created_at": "2016-10-25T10:15:35Z",
        "body": "That'd be a question for @rmarinho\n"
      },
      {
        "user": "rmarinho",
        "created_at": "2016-10-25T10:39:32Z",
        "body": "We are planning a move to NS.. but still working the details out since UWP support for 2.0 is behind schedule. \nAt the time we could only move to NS1.4 so we could support UWP and others. \nThat said it should be compliant using the PCL shim package on your NS project no?\n"
      },
      {
        "user": "CarlCrol",
        "created_at": "2016-10-25T10:58:32Z",
        "body": "Confused on the answers so opc ua sdk will still not work on xamarin.android right?\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-25T15:46:27Z",
        "body": "Xamarin Forms are not yet supported on .NET Core.\n\nI don't know what UPC UA SDK exactly is (doesn't seem to be part of Xamarin) -- you might want to reach out to the project owners & maintainers.\n"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-02T18:20:35Z",
        "body": "closing the issue here and @rmarinho may be able to help answering the Xamarin questions."
      }
    ]
  },
  {
    "number": 6831,
    "title": "How should we address pop-up dialogs during Windows test runs?",
    "created_at": "2016-10-17T22:59:33Z",
    "closed_at": "2020-01-31T00:37:23Z",
    "labels": [
      "question",
      "test-bug",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6831",
    "body": "dotnet/runtime#6827 dotnet/runtime#6828 and dotnet/runtime#6829 are examples of assertion failures that pop up and hang the automation system, wasting hours of time before they are finally killed by a \"whole job\" timeout.\n\nI would have expected `COMPlus_NoGuiOnAssert=1` to suppress these, but that doesn't appear to be the case, i.e. the path through `System_Private_CoreLib_ni!System.Diagnostics.Assert.Fail`, `CoreCLR!DebuggerAssert::ShowDefaultAssertDialog`, etc. doesn't seem to query that environment variable.\n\nI think it makes sense to do more to prevent popups rather than relying on timeouts.\n\nMy naive preference would be that `COMPlus_NoGuiOnAssert` be made to divert all internal error paths away from UI popup, but I'm not confident enough in the design to claim that outright.  (TBH, I would also prefer that the effect of `COMPlus_NoGuiOnAssert=1` be the default setting).  I feel pretty strongly that a \"dialog-killing daemon\" that monitors for pop-ups and automatically dismisses them is the wrong solution.\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6831/comments",
    "author": "RussKeldorph",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2016-10-17T23:01:06Z",
        "body": "@dotnet/coreclr-contrib @dotnet/jit-contrib \n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2016-10-17T23:01:45Z",
        "body": "@mmitche \n"
      },
      {
        "user": "jashook",
        "created_at": "2016-10-17T23:05:02Z",
        "body": "Is it worth disabling this error reporting via modifying a registry setting?\n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2016-10-17T23:14:55Z",
        "body": "@jashook Are you saying there's already a registry setting to suppress it?  If so, which?  In any case, relying on ambient machine state being set or making the automation set (and restore?) it is also less than ideal IMO.\n"
      },
      {
        "user": "BruceForstall",
        "created_at": "2016-10-17T23:16:58Z",
        "body": "pop-up blocker :-(\n\nI've come to believe it's virtually impossible to block all the pop-ups that want to appear.\n"
      },
      {
        "user": "jashook",
        "created_at": "2016-10-17T23:19:11Z",
        "body": "I never got around to testing some of the stuff I found when I looked into this problem for arm64. However, there seem to be several examples of suppressing error dialogs around using registry keys. A simple search should give a fair amount of content.\n\nOnce again I haven't verified them, just curious if it would be considered an acceptable solution.\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-10-18T00:42:34Z",
        "body": "I also got hit by the flood of assert dialogs several times during my local testing. I have made a change that was incorrect, the assert started to fire for all the tests and I got a lot of the assert dialogs on my screen.\nI think that we might want to add check for that `COMPlus_NoGuiOnAssert` variable to the `DebuggerAssert::ShowDefaultAssertDialog` and return `FailTerminate` if it is set.\n"
      },
      {
        "user": "mmitche",
        "created_at": "2016-10-18T14:33:13Z",
        "body": "You should not put up popups if at all possible.  It's bad testing hygiene in the first place.\n"
      },
      {
        "user": "gkhanna79",
        "created_at": "2016-10-18T15:03:17Z",
        "body": "Checked build asserts are there for a reason. Trying to suppress them does not sound the right thing to do. Are you suggesting these asserts were incorrect/false to indicate true failures in the product?\n"
      },
      {
        "user": "mmitche",
        "created_at": "2016-10-18T15:06:50Z",
        "body": "No, i'm suggesting they should be sent to the console.  Having them pop up in dialogs is not useful.\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-10-18T15:10:41Z",
        "body": "That's what I was suggesting too. I believe the assert goes to the console too, so disabling the popup with `COMPlus_NoGuiOnAssert` in the `DebuggerAssert::ShowDefaultAssertDialog` would have the right effect.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-10-18T15:37:57Z",
        "body": ".NET Core is runtime optimized for clould. It does not ever make sense to display Win32 message boxes in runtime optimized for cloud by default. We should change the default to not display the Win32 message boxes by default. What made sense for WinForms apps in 2001 does not always make sense for cloud today...\n"
      }
    ]
  },
  {
    "number": 18716,
    "title": "Strange dependency behavior",
    "created_at": "2016-09-26T22:39:51Z",
    "closed_at": "2020-01-31T12:38:20Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18716",
    "body": "Hi all,\n\nI have a library build for netstandard1.4, which corresponds to .NET 461.\nThen I build a desktop console application with .NET 4.5 and added reference to named library.\nAll worked fine.\n\nBut, this should not work, because v4.5 should not be able to use netstandard1.4.  Previously this was not the case.\nIs tat same new expected behavior?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18716/comments",
    "author": "ddobric",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-09-26T22:46:08Z",
        "body": "And how are you building/running your project? NuGet would prevent you from installing such a library into your console application, but that doesn't necessarily mean that you couldn't directly reference the assembly, build against it, and deploy some facades to make it work at runtime. And if your netstandard1.4 assembly didn't happen to use anything that wasn't available in .NET 4.5, then you might even be able to run against it successfully. There's always some subset of stuff in a framework that would be safe to use in a lower version of that framework, but it is also pretty easy to mess up, and things will blow up if you use an API that isn't available on the lower framework.\n"
      },
      {
        "user": "ddobric",
        "created_at": "2016-09-27T19:43:07Z",
        "body": "I use VS and also command line (dotnet build) for build. I'm referencing assemblies directly, because currently it is not possible to add project reference to netcore libs directly from \"desktop projects\" (i.e.: console application, lib etc.)\n\nSo, if I understood You correctly, by using of direct references, there is no framework check, which was working previously?\nI'm fine with this. Just wanted to know if this is by design or just temporary implementation. \n\nThanks\n"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-02T20:01:37Z",
        "body": "> So, if I understood You correctly, by using of direct references, there is no framework check, which was working previously? I'm fine with this. Just wanted to know if this is by design or just temporary implementation.\r\n\r\nYes if you reference the library directly, then there is no check will be done but expect you may get some runtime failures. "
      }
    ]
  },
  {
    "number": 18712,
    "title": "Orderby fails silently -- LINQ",
    "created_at": "2016-09-26T19:34:04Z",
    "closed_at": "2020-01-31T12:38:07Z",
    "labels": [
      "question",
      "area-System.Data.SqlClient"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18712",
    "body": "**Situation**:\n\nThis LINQ query will run on a DB table.\n\n```\nvar query = from x in db.User\n                   where x.Active == true\n                   select x;\nvar resultList = query.OrderBy(x.SerialNumber, new SerialNumberComparer()) // SerialNumberComparer is IComparer<T>\n                    .select(x => x)\n                    .ToList();\n```\n\nThe `resultList` will contain the data 'ordered by' the standard sort algorithm for that type -- which in this case is String.\n\n**Argument**:\n\n1- I understand that the logic / code of `SerialNumberComparer` can not be transferred to the any SQL engine or at least it is not something that universal in all SQL engines.\n\n2- This behavior may be by design in fact I think it is probably by design.\n\n3- With 1 being said, I do not demand any magical thing here, but at least I see this the `OrderBy(...)` extension should through exception or something more appropriate because I think this is not a good idea to just ignore the `new SerialNumberComparer()` argument and continue.\n\n4- Is this specific to the LINQ provider implementation that my ORM implements to expose my database tables to LINQ?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18712/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "svick",
        "created_at": "2016-09-28T15:59:17Z",
        "body": "> Is this specific to the LINQ provider implementation that my ORM implements to expose my database tables to LINQ?\n\nYes. All LINQ does is to construct an expression tree that represents your query. It's up to the LINQ provider to decide how to handle it (and whether to handle it or give up with an exception).\n\nWhat ORM are you using? I think you should ask them whether this is the expected behavior.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-09-29T07:48:20Z",
        "body": "@svick I get that. But the point is still being that if they decided to ignore that parameter for this case, then the LINQ inheritance model or interface that instruct any implementation that override it will not be able to differentiate between a DB or In-Memory LINQ. To summarize here, if that overload of the OrderBy method is not going to 'EVER' work on DB then the idea of general LINQ interface to both DB and In-Memory LINQ is not right.\n"
      },
      {
        "user": "svick",
        "created_at": "2016-09-30T15:36:13Z",
        "body": "> if that overload of the OrderBy method is not going to 'EVER' work on DB\n\nI think it could work in some cases. A LINQ provider could evaluate the `comparer` parameter and compare it with a set of known comparers (like `StringComparer.Ordinal`) and generate query based on that.\n\nI don't know if any real LINQ provider actually does that (I have checked EF Core, and that throws exception on such query). But it does work with `AsQueryable()`, so making the overload throw or even removing it completely would be a breaking change. Because of that, I don't think there's anything to do here.\n"
      }
    ]
  },
  {
    "number": 18702,
    "title": "Question: resolving NETStandard libraries to framework assemblies",
    "created_at": "2016-09-25T15:55:59Z",
    "closed_at": "2020-01-31T12:37:40Z",
    "labels": [
      "question",
      "area-Meta"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18702",
    "body": "When installing the package `NETStandard.Library` into a .Net Framework project (for example net46)\n- Some packages install nothing. I saw `TypeForwardedToAttribute` for binary capability.\n- Some packages set a reference to assembly in GAC. This is by using `frameworkAssembly` element of nuget.\n- Some packages **do install an assembly**, but it already exists in the full Framework, such as `System.IO.Compression` and `System.Net.Http`. Why can't these be treated as well as the above-mentioned type?\n\nAnd another question for type resolving:\nIL records the definition assembly for every type. If a type is moved into another assembly, a `TypeForwardedToAttrubute` can be used for binary capability. But for some assemblies, for example `System.ObjectModel`, I haven't see it in GAC.\nHow can `[System.ObjectModel]System.ComponentModel.INotifyPropertyChanged` be resolved to `[System]System.ComponentModel.INotifyPropertyChanged`?\n\n**Edited**:\n- For `System.IO.Compression`, I see a `runtime` folder in the package. It seems that assembly installed to `net46` is the win runtime. But why only install a GAC assembly in `net45`?\n- For `System.Console`, I see an assembly full of  `TypeForwardedToAttrubute`. But as said above, what's are the differences between `System.ObjectModel`?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18702/comments",
    "author": "huoyaoyuan",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-09-26T03:52:24Z",
        "body": "cc: @weshaggard @ericstj \n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-09-26T15:41:37Z",
        "body": "For System.IO.Compression and Http those dlls contain additional fixes over the components that ship in the .NET framework.  The teams owning those components opted to deliver updates in the nuget packages to allow folks to request and get updates  for those components at a faster cadence than the ship cycle of the .NET framework.\n\nOther assemblies (like System.ObjectModel) that already exist in the .NET Framework and have no additional API over the version in the .NET framework install nothing, but ensure that they are applicable and will install (to indicate that other packages depending on them have their dependency satisfied).  System.Object model is indeed in the GAC, you can see it here on a typical installation: `C:\\windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.ObjectModel\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.ObjectModel.dll` and the build-time reference is here: `C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Facades\\System.ObjectModel.dll`\n\nAssemblies which do not exist in the .NET Framework carry both their build-time and runtime facades in the package, eg: System.IO.FileSystem.\n"
      },
      {
        "user": "huoyaoyuan",
        "created_at": "2016-09-27T04:17:10Z",
        "body": "Still a question: for `System.IO.Compression`, it installs just GAC assembly for .NET Framework 4.5, but an additional assembly for 4.6. The framework assembly in 4.6 should have more content than 4.5, right? So why the additional assembly is only installed in 4.6?\n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-12-27T20:30:21Z",
        "body": "> The framework assembly in 4.6 should have more content than 4.5\r\n\r\nInitially it was created to ship some bugfixes for handling large files that weren't in the desktop framework, but no additional API AFAIK. \r\n\r\n>So why the additional assembly is only installed in 4.6?\r\n\r\nWe needed fixes in the desktop framework in .NET 4.6 to enable out-of-band libraries that replaced those already in the framework.\r\n\r\n\r\n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-12-27T20:31:03Z",
        "body": "Closing this for now since I believe this addressed the original question.  If you have more questions, please open a new issue."
      }
    ]
  },
  {
    "number": 18284,
    "title": "Confusing empty directories in some runtime packages",
    "created_at": "2016-08-24T22:09:42Z",
    "closed_at": "2020-01-31T12:14:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18284",
    "body": "The package `runtime.win.System.Runtime.Extensions` contains (among the files and directories it should contain) the empty directories `ref/netstandard` and `runtimes/win/lib/net`.\n\nI don't think these directories should exist: normal framework version directories always have a version (e.g. `netstandard1.5`, not just `netstandard`). And the presence of a `ref` directory in a `runtime` package is especially puzzling to me.\n\nThis does not seem to be limited to `runtime.win.System.Runtime.Extensions`, other `runtime` packages also contain these strange empty directories.\n\nI'm not aware of any actual problem caused by this, but I thought it's strange and probably worth fixing.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18284/comments",
    "author": "svick",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-08-24T22:24:02Z",
        "body": "@ericstj \n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-08-25T16:18:09Z",
        "body": "These are both by design.\n\n> ref/netstandard\n\nThis ensures that no-one will ever get a reference to the implementation assembly in this package.  The reference comes from the `System.Runtime.Extensions` package.  The `runtime.*` packages should never appear in the compile graph since they are typically only brought in by runtime.json, but someone could directly reference them.  Just in case they do, we want to make sure that they don't end up providing a reference that would conflict with the `System.Runtime.Extensions` package\n\n> runtimes/win/lib/net\n\nThis ensures that the package will never provide a runtime asset on any desktop framework.  We put the desktop assets in the `System.Runtime.Extensions` and do not want two packages providing the same assembly (if someone happens to build for desktop with a RID).  \n"
      },
      {
        "user": "svick",
        "created_at": "2016-08-25T19:15:26Z",
        "body": "@ericstj Interesting, thanks for the explanation.\n"
      }
    ]
  },
  {
    "number": 17980,
    "title": "Server not resolving DNS, only accepts web service URL with IP",
    "created_at": "2016-08-01T17:20:05Z",
    "closed_at": "2020-01-31T11:57:46Z",
    "labels": [
      "question",
      "area-System.Net",
      "os-linux"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17980",
    "body": "We have an Ubuntu server set up for our .Net Core application and running Nginx.  Our web services URL works when we pass the IP address, but we get an error stating the DNS cannot be found or does not exist when passing the name of the server rather than the IP.  Can anyone provide insight on this issue please?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17980/comments",
    "author": "ethriel3695",
    "comments": [
      {
        "user": "ethriel3695",
        "created_at": "2016-08-01T17:36:37Z",
        "body": "I did some research and found Kestrel does not support hostname listening only IP binding.  Is there a workaround for this?\n"
      },
      {
        "user": "ethriel3695",
        "created_at": "2016-08-03T14:15:10Z",
        "body": "After some further testing, we found the DNS resolve was timing out because it is taking over a minute and a half for the DNS to resolve.  Does anyone have insight on why this would happen? \nWe were able to set an IIS server with no issues and it functions just fine, but when using Ubuntu with Nginx the DNS takes entirely too long to resolve.\n"
      },
      {
        "user": "muratg",
        "created_at": "2016-08-03T21:02:37Z",
        "body": "@ethriel3695 Can you try ubuntu/nginx/node.js and see if that works?  to me it looks like a machine or nginx configuration issue, and I'm not sure if it's related to asp.net/kestrel or .net core.\n"
      },
      {
        "user": "davidsh",
        "created_at": "2017-02-26T20:05:34Z",
        "body": "Closing this issue for now.  Please update if there is new information regarding a possible bug in CoreFx."
      }
    ]
  },
  {
    "number": 6371,
    "title": "[Win 7] Missing Dll in Windows 7 runtime",
    "created_at": "2016-07-21T18:43:43Z",
    "closed_at": "2020-01-31T00:12:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6371",
    "body": "I am able to use this Dll without issue for my Windows 10/8.1 runtimes, but Windows 7 throws this exception.\n\n```\nSystem.DllNotFoundException: Unable to load DLL 'api-ms-win-core-normalization-l1-1-0.dll': \nThe specified module could not be found. (Exception from HRESULT: 0x8007007E)\nat Interop.mincore.NormalizeString(Int32 normForm, String source, Int32 sourceLength, Char[] destenation, Int32 destenationLength)   \nat System.StringNormalizationExtensions.Normalize(String strInput, NormalizationForm normalizationForm)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6371/comments",
    "author": "ameno-",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-07-23T12:22:43Z",
        "body": "How are you building or deploying your app? \n\n`dotnet publish` will copy this .dll over for you.\n"
      },
      {
        "user": "ameno-",
        "created_at": "2016-07-23T18:31:12Z",
        "body": "I'm building the app through visual studio @jkotas \n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-07-24T01:04:15Z",
        "body": "cc @piotrpMSFT @muratg\n"
      },
      {
        "user": "TheRealPiotrP",
        "created_at": "2016-07-24T16:54:52Z",
        "body": "@Ameno- do you have a small repro we can look at?\n"
      },
      {
        "user": "ameno-",
        "created_at": "2016-07-24T20:22:57Z",
        "body": "@piotrpMSFT what details do you need to see?\nThe exception above was produced by a user running the app on a Windows 7 machine.\n\nline of code producing exception:\n\n```\nusing System.Text;\n....\npassword = password.Normalize(NormalizationForm.FormKD);\n\n```\n\n_password == string_\n\nproject.json\n\n```\n{\n  \"supports\": {},\n  \"dependencies\": {\n    \"Microsoft.AspNetCore.Cryptography.KeyDerivation\": \"1.0.0\",\n    \"Microsoft.Data.Sqlite\": \"1.0.0\",\n    \"Microsoft.NETCore.Portable.Compatibility\": \"1.0.1\",\n    \"NETStandard.Library\": \"1.6.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"System.Globalization.Extensions\": \"4.0.1\"\n  },\n  \"frameworks\": {\n    \"netstandard1.4\": {}\n  }\n}\n```\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-04-08T06:04:48Z",
        "body": "We don't use apisets in 2.0. I am going to close this given no more discussoin/reports."
      }
    ]
  },
  {
    "number": 17755,
    "title": "Assigning VectorX right to VectorX left",
    "created_at": "2016-07-02T05:50:03Z",
    "closed_at": "2020-01-31T11:46:52Z",
    "labels": [
      "question",
      "area-System.Numerics"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17755",
    "body": "CopyTo allows copying of value to arrays but not another Vector of the same length.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17755/comments",
    "author": "lampuiho",
    "comments": [
      {
        "user": "benaadams",
        "created_at": "2016-07-02T06:13:07Z",
        "body": "Vector is a value type so you just need to use assignment to do a copy.\n\ne.g. `var vectorB = vectorA;`\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-07-04T06:20:25Z",
        "body": "Yep, @benaadams pretty much covered it. Anything else for clarification, @lampuiho ?\n"
      },
      {
        "user": "lampuiho",
        "created_at": "2016-07-04T07:22:34Z",
        "body": "No, that's all. Thank you. I do have a question about Vector < double >  though. How do I assign values directly to it? I am actually trying to do matrix multiplication here. Currently I am using a locally allocated \"fixed size\" array with unrolled dot product to do the multiplication with a vector. But the extra code to initialise the array and wrapping it into a vector is quite costly (and I have to wrap it each time the multiplication is done with values allocated to the array). Is there any faster way to do it without initialising the array at all and directly perform the multiplication on the locally initialised vector.\n\nVector4 only supports float*\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-07-05T17:42:49Z",
        "body": "`Vector<T>` is designed to be immutable once created, so the individual elements of a vector cannot be modified after it is constructed. There's a few main ways to initialize a `Vector<T>`:\n- Store all of your data upfront in a large array, create vectors from it, using different contiguous parts of the array\n- Store your data in a small, local array, perhaps re-using the array for several constructions, and modifying the values in-between. This sounds like what you're doing already.\n- Store your data on the stack (using `float* ptr = stackalloc float[Vector<float>.Count]`) and then using `Unsafe.Read<Vector<float>>(ptr)`. You can avoid the temporary allocation here, but you have to be careful about the unsafe code and boundary checks.\n\n> Vector4 only supports float*\n\nIs this related to the above question? I'm not sure what you're referring to.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-09-26T21:52:53Z",
        "body": "Original question seems to be answered. Feel free to open a new issue if needed ...\n"
      }
    ]
  },
  {
    "number": 17680,
    "title": "Cant instal System.Net.Security 4.0.0-rc2-24027",
    "created_at": "2016-06-23T12:36:24Z",
    "closed_at": "2020-01-31T11:43:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17680",
    "body": "Hello,\ni instalig nuget System.Net.Security 4.0.0-rc2-24027 to new csproj project, but take this error:\nCould not install package 'runtime.native.System 4.0.0-rc2-24027'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17680/comments",
    "author": "Lisaj",
    "comments": [
      {
        "user": "svick",
        "created_at": "2016-06-23T13:59:34Z",
        "body": "Could you share your project.json and the full output of running the restore?\n"
      },
      {
        "user": "Lisaj",
        "created_at": "2016-06-23T14:33:41Z",
        "body": "I dont have project.json. It is csproj and i instal nuget.\n\nPackage manager output:\n\nAttempting to gather dependency information for package 'System.Net.Security.4.0.0-rc2-24027' with respect to project 'WebApplication1', targeting '.NETFramework,Version=v4.6.1'\nAttempting to resolve dependencies for package 'System.Net.Security.4.0.0-rc2-24027' with DependencyBehavior 'Lowest'\nResolving actions to install package 'System.Net.Security.4.0.0-rc2-24027'\nResolved actions to install package 'System.Net.Security.4.0.0-rc2-24027'\nInstall failed. Rolling back...\nPackage 'runtime.native.System.4.0.0-rc2-24027' does not exist in project 'WebApplication1'\nPackage 'runtime.native.System.4.0.0-rc2-24027' does not exist in folder 'C:\\Users\\prouz\\onedrive\\dokumenty\\visual studio 2015\\Projects\\WebApplication4\\packages'\nCould not install package 'runtime.native.System 4.0.0-rc2-24027'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\n========== Finished ==========\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-24T15:29:13Z",
        "body": "Walking through the daily builds feed, the net46 dependency graph gained runtime.native.System.Net.Security in rc2-23921 (and rc3-23921).\n\nWhile the rc2 line never lost this dependency, it did clear out of the rc3 dependency subgraph in rc3-24018-00, and it does not appear to have been reintroduced since then.\n\nSo, there's probably no easy workaround for this; but if everything goes according to plan the stable version goes out on Monday, and the problem should be fixed.\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-28T18:18:27Z",
        "body": "I've tried with the stable version of the package (System.Net.Security 4.0.0), and that worked fine; so I'm going to go ahead and close out the issue.\n\nThanks for reporting the problem, please let us know if any more crop up.\n"
      },
      {
        "user": "Lisaj",
        "created_at": "2016-06-28T20:31:00Z",
        "body": "Thank you for your work\n"
      }
    ]
  },
  {
    "number": 17652,
    "title": "Why System.Runtime.Loader isn't available on UWP?",
    "created_at": "2016-06-20T05:19:08Z",
    "closed_at": "2020-01-31T11:41:51Z",
    "labels": [
      "question",
      "area-System.Runtime"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17652",
    "body": "Load assembly at runtime is very useful for app extension purpose.\nUWP apps can have the codeGeneration capability. And there is VirtualProtectFromApp function.\nWhy System.Runtime.Loader isn't available on UWP?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17652/comments",
    "author": "sunnycase",
    "comments": [
      {
        "user": "gkhanna79",
        "created_at": "2016-06-20T15:41:21Z",
        "body": "@sunnycase Our current UWP story, for production scenarios, is based upon .NET Native static compilation which does not support dynamic loading of assemblies (at runtime). And that is not subject to just having support of VirtualProtectFromApp but more fundamental toolchain changes.\n\nWe intend to spend sometime thinking about this scenario in the near future and will update this thread as we form concrete ideas.\n\nCC @sergiy-k @jkotas \n"
      },
      {
        "user": "gulbanana",
        "created_at": "2016-08-20T05:15:22Z",
        "body": "if UWP is not able to support this API, does that mean it will not support the rest of netstandard1.5 as a consequence? \n"
      },
      {
        "user": "joperezr",
        "created_at": "2017-03-16T15:51:58Z",
        "body": "> if UWP is not able to support this API, does that mean it will not support the rest of netstandard1.5 as a consequence?\r\n\r\nAssemblyLoadContext and AssemblyExtensions are not part of netstandard so UWP still supports netstandard."
      },
      {
        "user": "joperezr",
        "created_at": "2017-03-16T15:52:45Z",
        "body": "Closing for now since the original question has been answered. Feel free to reopen if you have any follow ups and we will update it if this ever changes."
      }
    ]
  },
  {
    "number": 17594,
    "title": "Hello. Is it possible to install CoreFX to a custom folder?",
    "created_at": "2016-06-13T09:54:05Z",
    "closed_at": "2020-01-31T11:39:17Z",
    "labels": [
      "question",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17594",
    "body": "Is it possible to install CoreFX to a custom folder after the building from sources?\n\nCommand to build:\n`./build.sh x64 debug`\n\nBut in this case CoreFX installs to a current folder. What command I must enter to onfigure sources and instal to a custom folder?\nPS: OS Ubuntu 16.04 LTS. Problem with building are missing.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17594/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "joperezr",
        "created_at": "2016-06-13T16:11:35Z",
        "body": "Hi @zenitfan219 thanks for posting your question. There is no easy way of selecting the drop folder of the build output. However, corefx itself doesn't install in that directory, only the output is dropped there. If you want to use the corefx that you just built in a different project, you can do this by referencing the packages that get produced in `<corefxRepoPath>/bin/packages` from your project.\n\nPlease let me know if this answers your question.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-13T21:24:24Z",
        "body": "Okay, thank You for yor answer. Then next question.\n\nCan I use built packages in <corefxRepoPath>/bin/packages without source code? I want to delete source code without <corefxRepoPath>/bin directory. Does it work?\n"
      },
      {
        "user": "joperezr",
        "created_at": "2016-06-13T21:47:40Z",
        "body": "I'm not 100% sure I get your question, but if what you want to know is if the built packages are self-contained meaning that they don't depend on source code being in your machine, then that is correct. You only need the source code to build the packages, but once they are built, you can delete all of the repo code entirely from your machine, and just reference the packages that were produced.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-13T22:45:07Z",
        "body": "Thank you, @joperezr.\n\nAnd the last question. Can I build CoreFX not in repo folder?\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-06-13T23:16:06Z",
        "body": "Do you mean if you do not have corefx in a git repository? Right now, it does not work, but that's something we should fix, in my opinion. We have some build steps that add assembly metadata based on  some git information. We should be able to skip that step if there is no git repository.\n\nFor now, you'll need to be in a git repo to build.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-14T08:46:37Z",
        "body": "No.\nI mean if I clonned CoreFX repo to my PC to folder `/home/<username>/MS_GIT/corefx` and wanted to build in folder `/home/<username>/MS_BINARIES/corefx/bin`. Is it possible?\n"
      },
      {
        "user": "joperezr",
        "created_at": "2016-06-14T16:31:30Z",
        "body": "No. There is no easy way to have the output of the build be a folder different than the `<repoRoot>/bin`. That said, you could easily just wait for the build to finish and then either manually or by a script copy the outputs (all of the bin directory) to a different folder in your machine, and then use that. The reason why there is no easy way to do this is because every time you run build.sh, we basically build two phases of the repo, first the native assets and then the managed ones so it's not super straight forward to change outputs from both phases into a different folder.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-14T22:09:06Z",
        "body": "Thank you for your answers!\n"
      },
      {
        "user": "joperezr",
        "created_at": "2016-06-14T23:11:22Z",
        "body": "sure no problem! happy to help :smile: \n"
      }
    ]
  },
  {
    "number": 6084,
    "title": "[ARM/Linux] Rejitting is not supported on ARM",
    "created_at": "2016-06-09T08:15:30Z",
    "closed_at": "2020-01-30T23:58:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6084",
    "body": "According to the code below in src/vm/rejit.h the rejitting is supported only for x86 and x64 architectures. I just would like to ask if it's not supported because of some principal problem, or is it just not yet supported?\n\nsrc/vm/rejit.h\n# if defined(_X86_) || defined(_AMD64_)\n\n```\n    5;\n```\n# else\n# error \"Need to define size of rejit jump-stamp for this platform\"\n\n```\n    1;\n```\n# endif\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6084/comments",
    "author": "papaslavik",
    "comments": [
      {
        "user": "papaslavik",
        "created_at": "2016-06-09T08:16:16Z",
        "body": "@Dmitri-Botcharnikov \n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2016-06-09T15:39:17Z",
        "body": "@jkotas @BruceForstall @dotnet/jit-contrib \n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-06-09T16:21:27Z",
        "body": "cc @noahfalk \n\n> it's not supported because of some principal problem\n\nThere is no principal problem.\n\nThe ReJIT feature is for pretty advanced diagnostics/profiler scenarios, e.g. collecting diagnostic data on demand from a live server without disrupting it. These scenarios have not been interesting for ARM platform so far. That's why the ReJIT feature is not implemented for it.\n"
      },
      {
        "user": "noahfalk",
        "created_at": "2016-06-09T21:23:44Z",
        "body": "cc @kspawa \n"
      },
      {
        "user": "papaslavik",
        "created_at": "2016-06-10T06:50:43Z",
        "body": "Thanks @jkotas we're not interested in such scenarios as for now either. But we just want to know if there's an intended way to drop some jitted function code e.g. for lack of memory related reason.\n\nAlso i noticed that just after jitting a method we have a call\nDoBackpatch(pMT, pDispatchingMT, FALSE);\nwith the parameter FALSE, and in that function we still leave the pre stub entry point.\n\nEDIT: And we backpatch it with TRUE only on the second call for the jitted method. Isn't that used at some point to drop the native jitted code for the function which are called only once?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-06-10T06:59:53Z",
        "body": "> there's an intended way to drop some jitted function code e.g. for lack of memory related reason\n\nThere is no such mechanism today.\n"
      },
      {
        "user": "papaslavik",
        "created_at": "2016-06-10T07:56:06Z",
        "body": "Thanks @jkotas \n\nBy the way in the Android ART the class initializers are not compiled but interpreted, which might be not good from the performance point of view, but on the other hand they don't occupy the disk space.\n\nDropping the native code for the static constructors in C# would also be nice, I believe...\n"
      }
    ]
  },
  {
    "number": 17514,
    "title": "HttpClient and PreAuthenticate",
    "created_at": "2016-06-04T19:49:55Z",
    "closed_at": "2020-01-31T11:35:25Z",
    "labels": [
      "question",
      "area-System.Net"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17514",
    "body": "I am just curious why PreAuthenticate has never worked as expected. On several occasions when I am using Server to Server auth the nounce needs to stay the same on consecutive request  but with the way HttpClient behaves I cannot implement that. \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17514/comments",
    "author": "jmurphzyo",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2016-06-05T00:03:59Z",
        "body": "Can you please provide more details? What sort of project?  Is this is a Windows UWP app or ASP.NET app or Linux etc.?  Can you provide a small repro solution?  Thx.\n"
      },
      {
        "user": "jmurphzyo",
        "created_at": "2016-06-05T03:09:12Z",
        "body": "@davidsh David I solved the issue by writing a helper class. It was more ignorance on my part of how to setup credential cache.\n"
      }
    ]
  },
  {
    "number": 17406,
    "title": "Any reason System.Reflection.TypeExtensions can also target Profile151",
    "created_at": "2016-05-25T18:09:07Z",
    "closed_at": "2020-01-31T11:30:01Z",
    "labels": [
      "question",
      "area-System.Reflection"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17406",
    "body": "I see no reason why it can't profile 151 when it already targets a lot of similar profiles.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17406/comments",
    "author": "niemyjski",
    "comments": [
      {
        "user": "ericstj",
        "created_at": "2016-05-26T16:41:18Z",
        "body": "I believe at least some version of the surface area can. We used to have a version that was building for Win8/WinPhone8.\n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-05-26T16:44:48Z",
        "body": "/cc @nguerrera\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-01T00:04:10Z",
        "body": "@ericstj what is needed here?"
      },
      {
        "user": "ericstj",
        "created_at": "2017-03-01T00:20:10Z",
        "body": "Profile 151 is compatible with netstandard1.2 so the ask is to cross-compile for that or earlier and include it in the package.\r\n\r\nThis particular assembly no longer has a package in corefx since its been absorbed by ns2.0 so the fix here would need to happen in servicing (or we'd need to bring back the package and continue shipping it, despite the overlap).  /CC @weshaggard"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-01T00:39:30Z",
        "body": "Thanks @ericstj for info.\r\n\r\nGiven the high cost of maintaining cross-compilation of a package and given the low interest (1 vote), I would suggest to close the issue - if more folks are interested, we can reconsider later."
      }
    ]
  },
  {
    "number": 17378,
    "title": "NetDatacontractSerializer functionality on linux",
    "created_at": "2016-05-23T17:58:44Z",
    "closed_at": "2020-01-31T11:28:43Z",
    "labels": [
      "question",
      "area-Serialization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17378",
    "body": "Hi,\nWe are trying to port our codebase to Linux. Right now, we are using NetDatacontractSerializer to send exception over wire as the client doesn't know the type of exception beforehand.\nSince NetDatacontractSerializer  is no longer present in coreclr, we tried using DataContractResolver . However, since type information is not embedded in the serialized object, it throws an exception when we are trying to deserialize. In full CLR, DataContractResolver with dataContractSerializer would've solved the problem. Though DataContractResolver  is available in coreCLR, there is no constructor of DataContractResolver  using DataContractResolver.\n\nIs this the intended behavior.\nCan you help me out?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17378/comments",
    "author": "prachi2607",
    "comments": [
      {
        "user": "shmao",
        "created_at": "2016-06-23T22:37:41Z",
        "body": "@prachi2607, DataContractSerializer has constructors that take DataContractSerializerSettings as parameter, and you can set DataContractResolver in the settings. For example,\n\n``` c#\nvar myresolver = new MyResolver(); // MyResolver : DataContractResolver\nvar settings = new DataContractSerializerSettings() { DataContractResolver = myresolver};\nvar serializer = new DataContractSerializer(type, settings);\n```\n\n  Can you see if this would work for you?\n"
      },
      {
        "user": "shmao",
        "created_at": "2016-06-30T01:29:44Z",
        "body": "Closing the issue. Please feel free to re-open it if you have further questions.\n"
      }
    ]
  },
  {
    "number": 17212,
    "title": "Implement MEF DirectoryCatalog",
    "created_at": "2016-05-06T14:40:40Z",
    "closed_at": "2020-01-31T11:20:37Z",
    "labels": [
      "question",
      "area-System.Composition"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17212",
    "body": "Hi,\n\nReally need to got back the feature of MEF to get all dlls from a directory via DirectoryCatalog. \nIs there something done in that way ?\n\nThank you\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17212/comments",
    "author": "marcusien",
    "comments": [
      {
        "user": "AlexGhiondea",
        "created_at": "2016-11-23T22:53:32Z",
        "body": "@marcusien is there any workaround you can use for this?"
      },
      {
        "user": "bradbart",
        "created_at": "2016-11-28T16:30:24Z",
        "body": "I found the following code snippet is functionality equivalent to the usage of directory catalogs: \r\n```cs \r\n            // Find and load all the DLLs in the folder \r\n            var assemblies = Directory.GetFiles(directory, \"*.dll\")\r\n              .Select(path => AssemblyLoadContext.Default.LoadFromAssemblyPath(path))\r\n              .Where(x => x != null);\r\n\r\n            // Add the loaded assemblies to the container \r\n            var configuration = new ContainerConfiguration()\r\n              .WithAssemblies(assemblies)\r\n              .WithAssembly(this.GetType().GetTypeInfo().Assembly);\r\n            return configuration.CreateContainer(); \r\n```\r\nI think this approach works well, though it would be nice to have an extension method on the ConfigurationContainer that does this. So instead of WithAssemblies, use WithAssembliesFromDirectory() which loads the assemblies and adds them to them to the configuration. \r\n"
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2016-11-29T18:24:04Z",
        "body": "@bradbart thanks for adding the workaround to the issue.\r\n\r\nSince we don't currently have any plans to bring back more APIs for MEF and since we have an acceptable workaround I am closing this."
      },
      {
        "user": "AceHack",
        "created_at": "2018-04-24T17:31:28Z",
        "body": "@bradbart how do you avoid the dependent assembly issue and System.IO.FileNotFoundException error when calling LoadFromAssemblyPath?"
      },
      {
        "user": "bradbart",
        "created_at": "2018-06-12T15:56:13Z",
        "body": "Hi @AceHack can elaborate on the nature of the issue you are encountering? I didn't notice any IO Exceptions occur when I ran this in my project.  "
      },
      {
        "user": "AceHack",
        "created_at": "2018-06-12T16:55:54Z",
        "body": "@bradbart load things that have dependencies or themselves in the nuget/package cache instead of the bin folder and you should see the issue."
      },
      {
        "user": "bradbart",
        "created_at": "2018-07-18T21:04:38Z",
        "body": "I suspect that this issue is caused by the application not having permissions to the directory outside of its bin. Doing a `ReadFile` from that directory should confirm whether that is the issue. Also, might be worth double checking the path if using a relative reference to the directory.  Outside of that, I'm not sure why that exception would occur. "
      }
    ]
  },
  {
    "number": 5689,
    "title": "How to uninstall entire dnx/dnu/dotnet stuff from MacOSX?",
    "created_at": "2016-04-22T19:32:07Z",
    "closed_at": "2020-02-28T17:28:26Z",
    "labels": [
      "question",
      "area-Meta",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5689",
    "body": "as subject says\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5689/comments",
    "author": "neilyoung",
    "comments": [
      {
        "user": "sergiy-k",
        "created_at": "2016-05-04T20:26:54Z",
        "body": "cc @piotrpMSFT \n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-21T17:58:28Z",
        "body": "Looks like we dropped the ball on this question.\r\n@piotrpMSFT any suggestion?"
      },
      {
        "user": "tarekgh",
        "created_at": "2017-03-16T00:08:59Z",
        "body": "@piotrpMSFT any suggestion?"
      },
      {
        "user": "danmoseley",
        "created_at": "2020-02-28T17:28:26Z",
        "body": "Closing as this is very old now. "
      }
    ]
  },
  {
    "number": 5470,
    "title": "Checking floating type alternative for 'this' argument in morph.cpp",
    "created_at": "2016-03-31T07:59:03Z",
    "closed_at": "2020-01-30T23:29:23Z",
    "labels": [
      "question",
      "arch-arm32",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5470",
    "body": "Why do we need to check the floating type for 'this' argument as it is done in the code of Compiler::fgMorphArgs?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5470/comments",
    "author": "papaslavik",
    "comments": [
      {
        "user": "briansull",
        "created_at": "2016-07-27T18:36:44Z",
        "body": "I will investigate this further\n"
      }
    ]
  },
  {
    "number": 16851,
    "title": "Help with using System.Runtime.InteropServices.RuntimeInformation with .NET 4.6",
    "created_at": "2016-03-30T14:10:18Z",
    "closed_at": "2020-01-31T11:03:05Z",
    "labels": [
      "question",
      "packaging"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16851",
    "body": "More of a question than an issues. Based on the information I found within dotnet repositories, System.Runtime.InteropServices.RuntimeInformation should also be available for .NET 4.6 (to avoid having to use #if), however if I add the dependency\n`\"System.Runtime.InteropServices.RuntimeInformation\": \"4.0.0-*\"`\n\n`dotnet restore` returns:\n\n`System.Runtime.InteropServices.RuntimeInformation 4.0.0-rc3-23930-00 provides a compile-time reference assembly for System.Runtime.InteropServices.RuntimeInformation on .NETFramework,Version=v4.5.1, but there is no run-time assembly compatible with win7-x64.`\n\nThe runtime for this package is at `runtime.win.System.Runtime.InteropServices.RuntimeInformation`, but I cannot make a connection between the two using project.json. I tried adding `NetStandard.Library` as a dependency, but it results in weird build errors.\n\nAny ideas about getting around this problem?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16851/comments",
    "author": "hal-ler",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-03-30T17:45:58Z",
        "body": "Can you try adding a reference to `Microsoft.NETCore.Platforms`?\n"
      },
      {
        "user": "hal-ler",
        "created_at": "2016-03-30T18:12:21Z",
        "body": "I went back to adding `NetStandard.Library` as a dependency and found the problem on my end. I assume that is the way forward with integrating the new APIs as part of netstandard into desktop CLR builds. The problem was due to missing reference assemblies for .NET 4.6. Sorry for taking up your time.\n"
      },
      {
        "user": "hal-ler",
        "created_at": "2016-03-31T02:49:41Z",
        "body": "This solution did result in `\"The type 'AppContext' exists in both 'System.AppContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'`. I was able to get around using AppContext personally, but it might be worth to keep this in mind.\n"
      }
    ]
  },
  {
    "number": 5463,
    "title": "How to print exception message and type from IL_Throw?",
    "created_at": "2016-03-30T03:56:31Z",
    "closed_at": "2020-01-30T23:29:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5463",
    "body": "Is there an easy way to print the exception object from gdb when we are in DispatchManagedException? I cannot do lldb as I'm on arm where it is not working.'\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5463/comments",
    "author": "manu-st",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-03-31T03:56:55Z",
        "body": "@janvorli Do you have set of tricks for this?\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-03-31T13:29:17Z",
        "body": "@manu-silicon sorry for not responding earlier, I am on a sick leave at the moment and so I monitor my emails only once a day.\nAt the DispatchManagedException, you'd need to go up the stack to IL_Throw to access the exception object and then use `p *((ExceptionObject*)obj)->_message.m_asString->m_Characters`  to get the exception message. \nYou can also set a breakpoint at RaiseTheExceptionInternalOnly and then \ndo `p *((ExceptionObject*)throwable)->_message.m_asString->m_Characters`, which works for the case when the DispatchManagedException was called from IL_Rethrow too.\n\nThere is a also a way to turn on exception processing logging where you can see various details on how the managed frames are being processed (including method names for each frame), which clauses are being considered, etc. Use the following settings (the LogFacility value picks the EH logs):\n\n```\nexport COMPlus_LogEnable=1\nexport COMPlus_LogToConsole=1\nexport COMPlus_LogFacility=4000\nexport COMPlus_LogLevel=6\n```\n"
      },
      {
        "user": "manu-st",
        "created_at": "2016-04-01T01:31:09Z",
        "body": "@janvorli Not a problem. I was able to get the message from the exception and this was very helpful. I also enabled the logging but it does not print the message part.\n"
      }
    ]
  },
  {
    "number": 5449,
    "title": "CORINFO_METHOD_INFO->scope is unique value for each process ?",
    "created_at": "2016-03-27T15:42:45Z",
    "closed_at": "2020-01-30T23:28:27Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5449",
    "body": "Hi,\nThe `CORINFO_METHOD_INFO->scope` always return unique value for each process ? I noticed that sometimes the value changes, Which variable returns unique value for each process ?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5449/comments",
    "author": "danysu",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-03-28T14:53:46Z",
        "body": "None of the handles on JIT-EE interface are meant to be unique for each process.\n"
      },
      {
        "user": "BruceForstall",
        "created_at": "2019-12-12T22:58:29Z",
        "body": "stale;closing"
      }
    ]
  },
  {
    "number": 5002,
    "title": "MDVEHandlerClass::QueryInterface() fails to retrieve IUnknown",
    "created_at": "2016-01-25T11:22:25Z",
    "closed_at": "2020-09-16T18:02:08Z",
    "labels": [
      "question",
      "help wanted",
      "area-TypeSystem-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5002",
    "body": "Here's how MDVEHandlerClass::QueryInterface() is implemented:\n\n```\n        if (id == IID_IVEHandler)\n        *pInterface = (IVEHandler*)this;\n    /*\n    else if (id == IID_IUnknown)\n        *pInterface = (IUnknown*)(IVEHandler*)this;\n    */\n    else\n    {\n        *pInterface = NULL;\n        return E_NOINTERFACE;\n    }\n```\n\nIUnknown retrieval is commented out without any explanation. That's violation of COM requirements.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5002/comments",
    "author": "Dmitry-Me",
    "comments": [
      {
        "user": "mangod9",
        "created_at": "2020-09-16T18:02:08Z",
        "body": "Closing since this hasnt been touched for 3 years. "
      }
    ]
  },
  {
    "number": 4890,
    "title": "The C compiler identification is unknown",
    "created_at": "2016-01-05T03:17:23Z",
    "closed_at": "2020-01-30T23:03:03Z",
    "labels": [
      "question",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4890",
    "body": "I have VS 2015 Community with C++ module installed. Cmake installed and added to PATH. When run the build.bat from an empty new cmd windows, I got this error:\nChecking pre-requisites...\n\nCommencing build of native components for Windows_NT.x64.Debug\n\n-- The C compiler identification is unknown\n-- The CXX compiler identification is unknown\nCMake Error at CMakeLists.txt:5 (project):\n  No CMAKE_C_COMPILER could be found.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4890/comments",
    "author": "hynguyen2610",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2016-01-05T06:11:27Z",
        "body": "Maybe you installed an older version of CMake which doesn't know about VS2015? Works fine here with CMake 3.3.0.\n"
      },
      {
        "user": "hynguyen2610",
        "created_at": "2016-01-05T07:38:24Z",
        "body": "I am using the version 3.4.1\n"
      },
      {
        "user": "gkhanna79",
        "created_at": "2016-01-06T00:01:33Z",
        "body": "@janvorli Is this similar to the issue you are fixing?\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-01-06T00:03:51Z",
        "body": "@gkhanna79 Doesn't seem to be related. \n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-01-07T21:35:15Z",
        "body": "Can you please try to create and build a simple C/C++ project in the VS2015 to see if it works? I have seen people reporting that they sometimes needed to create one to get the C++ compiler installed.\n"
      },
      {
        "user": "hynguyen2610",
        "created_at": "2016-01-08T01:46:23Z",
        "body": "Hi,\nI can build C++ project normally. In the documentation said you are using CMake 3.0.2, when I using this version, it's not recognize my VS 2015, I tried version 3.4.1, the error is  \"The C compiler identification is unknown\" like the post, I try to using Cmake 3.3.2, its don't fail into compiler problem anymore. The build can run a long way.\nI am running the build.bat with VS Developer x64 Command Promt now, sometime I got an error \"Cannot connect to child process\" when the building is continueing, may be I will post this in another issue\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-01-11T13:08:06Z",
        "body": "Closing this issue as @hynguyen2610 has reported in the corert repo that the issue was caused by the order of installation of cmake and VS.\n"
      }
    ]
  },
  {
    "number": 4878,
    "title": "JIT compilation compitible with .NET Framework 4.x ?",
    "created_at": "2015-12-30T08:09:07Z",
    "closed_at": "2020-01-30T23:02:31Z",
    "labels": [
      "question",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4878",
    "body": "The CoreCLR `corinfo.h` & `corjit.h` compatible with .NET Framework 4.x or only support .NET Framework 4.6 ? I tried on FW 4.0 doesn't work.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4878/comments",
    "author": "danysu",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2015-12-31T00:07:37Z",
        "body": "`corinfo.h`  &  `corjit.h` are internal unstable frequently changing interfaces. No compatibility guarantees accross different runtimes or runtime versions.\n"
      },
      {
        "user": "danysu",
        "created_at": "2015-12-31T09:52:19Z",
        "body": "Thank you for your response.\n"
      }
    ]
  },
  {
    "number": 4508,
    "title": "Investigate performance caveats of covariant interface casts",
    "created_at": "2015-09-18T15:51:39Z",
    "closed_at": "2020-01-30T22:45:41Z",
    "labels": [
      "question",
      "tenet-performance",
      "area-VM-coreclr",
      "optimization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4508",
    "body": "I have heard multiple times that covariant interface casts may run into degenerate cases exhibiting fairly bad performance. Sometimes this leads to people being reluctant to rely on covariance in perf-sensitive code.\n\nThe problem needs to be understood and either fixed or, if unavoidable, there should be more concrete example of scenarios to avoid.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4508/comments",
    "author": "VSadov",
    "comments": [
      {
        "user": "VSadov",
        "created_at": "2015-09-18T15:59:39Z",
        "body": "If impact is real and common, we should review use of covariant interface casts in some scenarios in Fx vs. the alternatives.\n"
      },
      {
        "user": "Eyas",
        "created_at": "2015-09-18T21:58:47Z",
        "body": "To emphasize the importance of this, many methods (e.g. Linq, but also in other libraries) often have fast-path cases for `IList<T>`, but they only take advantage of the read-only methods.\n\nHaving a fast-path case for `IReadOnlyList<T>` unfortunately currently doesn't make sense because the `x as IReadOnlyList<T>` is quite expensive. See the discussion/perf numbers that happened in dotnet/coreclr#1460.\n\nWhile `IReadOnlyList` is useful percisely because its covariant, it also means that its implementers often need to implement `IList` with throwing mutating methods, just to get the performance.\n"
      },
      {
        "user": "ikopylov",
        "created_at": "2015-09-21T10:56:20Z",
        "body": "Related issue: dotnet/runtime#4090.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-05-09T23:07:06Z",
        "body": "Duplicate of dotnet/runtime#4090\n"
      }
    ]
  },
  {
    "number": 4192,
    "title": "Can CoreCLR run with JIT compilation disabled entirely?",
    "created_at": "2015-04-29T17:15:02Z",
    "closed_at": "2020-01-30T22:31:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4192",
    "body": "Hi, \n\nSorry if this is the wrong place to ask - I'm new to both CoreCLR and github.\n\nIs it possible to compile CoreCLR in such a way that it only interprets the CIL bytecode rather than generate assembly which is then executed by the CPU? I noticed FEATURE_INTERPRETER, but that appears to still generate assembly code, just in a different way from JIT? I'm interested in running CoreCLR on different CPU architectures and don't want to have to write a whole new JIT compiler, and the platform on which I'm running can't execute code from memory, so JIT compiled code can't really work.\n\nI'm aware that I could precompile the CIL code and then load the assembly containing native code - but as mentioned, the platform on which I'm running doesn't support executing data, and I'm unable to package the assembly as a DLL / shared object equivalent.\n\nAnd as a follow-up question, is there any documentation for what the various FEATURE_ defines are?\n\nSorry if this is a stupid question / has already been asked!\n\nThanks,\nSteve\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4192/comments",
    "author": "EvilSteve",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2015-04-29T17:54:31Z",
        "body": "CoreCLR is not able to run without dynamic code generation today. As you have discovered, there are many places that assume ability to generate code dynamically.\n"
      },
      {
        "user": "EvilSteve",
        "created_at": "2015-04-30T08:21:34Z",
        "body": "Bugger, thanks Jan.\n\nAre there any plans to support this in the near future?\n\nThanks,\nSteve\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-04-30T12:27:09Z",
        "body": "No dynamic runtime code generation is what .Net Native is about. We plan to open source it, but there is no timeline yet.\n"
      },
      {
        "user": "EvilSteve",
        "created_at": "2015-04-30T12:29:21Z",
        "body": "Fair enough. Thanks again Jan!\n"
      }
    ]
  },
  {
    "number": 4190,
    "title": "Use Itanium Unwind ABI in place of HP's",
    "created_at": "2015-04-28T23:08:31Z",
    "closed_at": "2020-01-30T22:31:06Z",
    "labels": [
      "question",
      "area-VM-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4190",
    "body": "Exception Handling on ELF platforms (except ARM) and on Mac OSX is based on the Itanium ABI. From a cursory look, it should be possible to implement the EH dispatch directly on top without having to use the non-standard HP interface. Am I missing something fundamental?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4190/comments",
    "author": "jsonn",
    "comments": [
      {
        "user": "MattWhilden",
        "created_at": "2015-04-28T23:09:36Z",
        "body": "/cc @jkotas @sergiy-k \n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-04-28T23:29:43Z",
        "body": "/cc @janvorli\n\nThe current EH design built upon the existing (Windows) code  as much as possible, to avoid introducing unnecessary complexity. Check the design discussions in dotnet/runtime#3942 and dotnet/runtime#3946.\n\nImplementing the EH differently is certainly possible, but it is unlikely to be an improvement. Alternative measurably better implementations are welcomed to prove me wrong.\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-04-28T23:48:02Z",
        "body": "@jsonn - what do you mean by the HP interface? The low level libunwind? We need that one for stack walking over native frames and its use in the exception handling itself is to unwind to the first managed frame. We use it for stack walking for GC purposes too.\nThe problem with the higher level unwind functions is that you cannot start the unwind at an arbitrary frame. We need to scan stacks of other threads too.\n"
      },
      {
        "user": "jsonn",
        "created_at": "2015-04-29T08:57:45Z",
        "body": "\"Low\" and \"high\" level is a bit misleading as the interfaces (libunwind.h vs unwind.h) are pretty much orthogonal.  libunwind.h is the HP interface, unwind.h is standard Itanium ABI. If all you want to do is stack walking, _Unwind_Backtrace is a wide supported extension of the plain Itanium ABI to just do a forced unwind. The same trick with adjusting the context with known registers can be used here.\n\nWhat I don't understand is how the current code is supposed to interact with foreign exception handlers, i.e. if the call stack contains C++ code.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-04-29T14:18:40Z",
        "body": "We use libunwind to walk the stack for GC (and other purposes). We do not use to run the actual handlers.\n\nDoes the Itanium ABI have equivalent of unw_get_save_loc?\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-04-29T14:39:08Z",
        "body": "@jkotas No, it doesn't have that.\n@jsonn The Itanium ABI implementation on OSX and in the clang libc++ is built on top of the other one. That's why I was referring to it as \"lower level API\". I don't know how that's done in the GCC's libstdc++ library though.\n\n> What I don't understand is how the current code is supposed to interact with foreign exception handlers, i.e. if the call stack contains C++ code.\n\nWe are not using the API for exception unwinding itself. In the exception handling, we just use it to scan the stack to find the first managed frame. The exception unwinding of native frames on the call stack is performed just by throwing C++ exception and catching it at the last native frame before a managed frame or possibly in the native code itself.\n"
      },
      {
        "user": "jsonn",
        "created_at": "2015-04-29T15:26:36Z",
        "body": "But you don't run exception handlers if there is any non-CLR frame between the top of the stack and the first managed frame, right? Or is that case impossible?\n\nunw_get_save_loc is currently not supported by LLVM (and Apple's) unwind implementation. I'm not sure how it can work reliable. I believe it is valid for one frame explicitly restore the register if it guarantees that all exceptions are handled. But this is a topic that should be brought up on the LLVM lists for input from other involved parties. It would seem to me that the ability to intercept the return to a frame would provide a more reliable mechanism. It would still require extending the interface for that, but it seems to be a better primitive.  \n\nWe explicitly don't support the libunwind.h interface in NetBSD as it exposes interfaces in a bad way. The size of the unwind context needs to be statically sized large enough to hold all possible target state, which is a bad idea for long term maintenance. There are other flaws in the interface making it problematic. That said, I am strongly interested in finding and fixing issues with the Itanium ABI.\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-04-29T16:59:41Z",
        "body": "> But you don't run exception handlers if there is any non-CLR frame between the top of the stack and the first managed frame, right? Or is that case impossible?\n\nNo, we don't. The native frames that are there are always frames stemming from a catch handler of managed exception thrown as PAL_SEHException by coreclr (which includes IL_Throw / IL_Rethrow helpers that are called when managed code throws / rethrows an exception). So we know we can just skip such frames without performing full exception unwinding.\n\nRegarding the `unw_get_save_loc` can you please be more specific on why you are not sure how it can be made reliable? Do you mean that in the context of the actual implementation in LLVM / Apple's library?\nTo give you some more detail, we need to track locations of callee saved registers that contain pointers to GC objects so that we can update them in place on the stack when GC decides to move that object. Otherwise when the code returns to the place where the register is restored from the stack location, it would contain a pointer that is no longer valid.\nOn OSX where the libunwind doesn't support the `unw_get_save_loc`, we workaround this issue by pinning the objects that are pointed to by those registers, but it obviously is not ideal. \n"
      },
      {
        "user": "jsonn",
        "created_at": "2015-04-29T20:47:57Z",
        "body": "How do you ensure that the spilling is really annotated? I mean I can write an assembler function with a catch all block and spill/restore the registers manually without adding .cfi annotation. That would still be correct for normal EH operation.\n"
      },
      {
        "user": "jsonn",
        "created_at": "2015-04-30T17:42:09Z",
        "body": "Thinking a bit more about `unw_get_save_loc`, the biggest issue I see is the combination of one-frame-at-a-time operation with toward-the-bottom approach. While the return address can be reasonably expected to be spilled in the immediate next frame for anything but very special edge cases, general registers don't have that property. \n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-04-30T18:19:29Z",
        "body": "@jsonn Regarding your former question, for the GC purposes, we care only for native code in the coreclr. We have all the assembler functions properly annotated. And we spill all callee saved registers to stack in an asm helper when we call external native code.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-03-05T07:56:50Z",
        "body": "Can we close it?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-03-05T10:05:42Z",
        "body": "I think so.\n"
      }
    ]
  },
  {
    "number": 4084,
    "title": "How to get GC logs?",
    "created_at": "2015-03-27T19:27:31Z",
    "closed_at": "2020-01-30T22:15:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4084",
    "body": "GC has some useful lines for logging. Examples:\n\n`coreclr\\src\\gc\\gc.cpp`\n\n```\nvoid GCStatistics::DisplayAndUpdate()\n{\n    LIMITED_METHOD_CONTRACT;\n\n    if (logFileName == NULL || logFile == NULL)\n        return;\n\n    {\n        if (cntDisplay == 0)\n            fprintf(logFile, \"\\nGCMix **** Initialize *****\\n\\n\");\n\n        fprintf(logFile, \"GCMix **** Summary ***** %d\\n\", cntDisplay);\n\n        // NGC summary (total, timing info)\n        ngc.DisplayAndUpdate(logFile, \"NGC \", &g_LastGCStatistics.ngc, cntNGC, g_LastGCStatistics.cntNGC, msec);\n\n        // FGC summary (total, timing info)\n        fgc.DisplayAndUpdate(logFile, \"FGC \", &g_LastGCStatistics.fgc, cntFGC, g_LastGCStatistics.cntFGC, msec);\n\n        // BGC summary\n        bgc.DisplayAndUpdate(logFile, \"BGC \", &g_LastGCStatistics.bgc, cntBGC, g_LastGCStatistics.cntBGC, msec);\n```\n\n`coreclr\\src\\gc\\handletable.cpp`\n\n```\nvoid DEBUG_PostGCScanHandler(HandleTable *pTable, const UINT *types, UINT typeCount, UINT condemned, UINT maxgen, ScanCallbackInfo *info)\n{\n    LIMITED_METHOD_CONTRACT;\n\n    // looks like the GC supports more generations than we expected\n    _ASSERTE(condemned < MAXSTATGEN);\n\n    // remember the highest generation we've seen\n    if (pTable->_DEBUG_iMaxGen < (int)condemned)\n        pTable->_DEBUG_iMaxGen = (int)condemned;\n\n    // update the statistics\n    pTable->_DEBUG_TotalBlocksScanned                [condemned] += info->DEBUG_BlocksScanned;\n    pTable->_DEBUG_TotalBlocksScannedNonTrivially    [condemned] += info->DEBUG_BlocksScannedNonTrivially;\n    pTable->_DEBUG_TotalHandleSlotsScanned           [condemned] += info->DEBUG_HandleSlotsScanned;\n    pTable->_DEBUG_TotalHandlesActuallyScanned       [condemned] += info->DEBUG_HandlesActuallyScanned;\n\n    // if this is an ephemeral GC then dump ephemeral stats for this scan right now\n    if (condemned < maxgen)\n    {\n        // dump a header for the stats with the condemned generation number\n        LOG((LF_GC, LL_INFO1000, \"--------------------------------------------------------------\\n\"));\n        LOG((LF_GC, LL_INFO1000, \"Ephemeral Handle Scan Summary:\\n\"));\n        LOG((LF_GC, LL_INFO1000, \"    Generation            = %u\\n\", condemned));\n\n        // dump the handle types we were asked to scan\n        LOG((LF_GC, LL_INFO1000, \"    Handle Type(s)        = %u\", *types));\n        for (UINT u = 1; u < typeCount; u++)\n            LOG((LF_GC, LL_INFO1000, \",%u\", types[u]));\n        LOG((LF_GC, LL_INFO1000,  \"\\n\"));\n\n        // dump the number of blocks and slots we scanned\n        ULONG32 blockHandles = info->DEBUG_BlocksScanned * HANDLE_HANDLES_PER_BLOCK;\n        LOG((LF_GC, LL_INFO1000, \"    Blocks Scanned        = %u (%u slots)\\n\", info->DEBUG_BlocksScanned, blockHandles));\n```\n\nWhat the best way to get the debug GC logs?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4084/comments",
    "author": "AndreyAkinshin",
    "comments": [
      {
        "user": "brianrob",
        "created_at": "2015-03-27T21:39:25Z",
        "body": "To capture LOG() statements, you'll need a debug build.  Then, you can use the following environment variables control logging:\n\nEnable:\nset COMPLUS_LogEnable=1\n\nControl verbosity:  (Look at inc\\log.h for log levels).\nset COMPLUS_LOGLEVEL=6\n\nDecide where to send the logs:  (See utilcode\\log.cpp InitLogging() for options)\nFor example:\nset COMPLUS_LogToFile=1\nset COMPLUS_LogFile=out.txt\n\nYou can also control which LOG() statements make it into the logs via COMPLUS_LOGFACILITY.  See inc\\loglf.h for the values (e.g. LF_GC).\n"
      },
      {
        "user": "AndreyAkinshin",
        "created_at": "2015-03-28T05:06:35Z",
        "body": "@brianrob, thanks!\n"
      },
      {
        "user": "devinvisible",
        "created_at": "2017-12-06T22:01:02Z",
        "body": "Any way to enable logging via these environment variables with a non-debug version of .net core?"
      }
    ]
  },
  {
    "number": 14080,
    "title": "Why having System.Console.dll?",
    "created_at": "2015-02-07T15:56:28Z",
    "closed_at": "2020-01-31T08:50:09Z",
    "labels": [
      "question",
      "area-System.Console"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14080",
    "body": "Why having a new DLL called `System.Console.dll`?\n`System.Console` class is already in `mscorlib.dll` since .NET Framework 1.0\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14080/comments",
    "author": "linquize",
    "comments": [
      {
        "user": "ellismg",
        "created_at": "2015-02-08T00:40:39Z",
        "body": "One of the design goals of .NET Core was to re-factor the framework surface are into a collection of smaller assemblies, each focused on particular thing.  We wanted to remove monolithic assemblies like mscorlib which contain unrelated components that evolve at different rates.\n\nFor example, in .NET Core, there is no mscorlib.  Instead, the base types are in in System.Runtime.dll, collections are split across multiple assemblies (System.Collections.dll, System.Collections.Nongeneric.dll, etc), Console is in System.Consoel.dll, and so on.\n\nTo implement some of these contracts, we use facades, which are assemblies that contain type-forwarders to another assembly.  So the implementation of System.Runtime.dll when running on the .NET Framework is simply an assembly that says: \"System.Object is in mscorlib.dll\".\n\nHowever, when possible we want to provide implementations that are not tied to a specific runtime (e.g. The full .NET Framework, CoreCLR, .NET Native) but instead can be used across all of them.  For that reason, we took the time to pull the implementation of System.Console.dll into it's own assembly which can work across any runtime, instead of using facades to point at mscorlib.dll\n\nHopefully this explains the rationale behind the move.\n"
      },
      {
        "user": "linquize",
        "created_at": "2015-02-08T04:07:09Z",
        "body": "There is `mscorlib.dll` in coreclr. And it has types like `System.Object` and `System.Console`. Is it for backward compatibility so the binaries built from VS2010 can be run?\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-02-08T05:44:51Z",
        "body": "@linquize what are you expecting it to be backwards compatible with? It certainly isn't compatible with mscorlib that ships on the full .NET framework as it is much smaller. It is compatible with the mscorlib that ships for Windows Phone which also runs on CoreCLR. However for .NET Core we don't expect anyone to ever compile directly against mscorlib and instead compile against System.Runtime, etc, as @ellismg points out. So essentially mscorlib is an implementation detail on CoreCLR and for .NET Core we reserve the right to put the implementation into other factored assemblies like System.Console.dll.\n\nThis abstraction layer (i.e. compiling against System.Runtime instead of mscorlib) also helps us support things like .NET Native which doesn't have an mscorlib at all but it does support all the APIs that System.Runtime provides. \n"
      },
      {
        "user": "linquize",
        "created_at": "2015-02-08T05:50:04Z",
        "body": "If I compile my program with `System.Runtime.dll` which works in CoreCLR, does it also work in Full .NET Framework?\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-02-08T05:56:39Z",
        "body": "@linquize Yes it will work on the full .NET Framework as well.\n"
      },
      {
        "user": "linquize",
        "created_at": "2015-02-08T06:02:05Z",
        "body": "thanks for your detailed explanation!\n"
      }
    ]
  },
  {
    "number": 103736,
    "title": "'System.PlatformNotSupportedException: The system's ping utility could not be found.' thrown unless running as root on EndeavourOS.",
    "created_at": "2024-06-19T22:46:03Z",
    "closed_at": "2024-07-02T18:14:29Z",
    "labels": [
      "area-System.Net",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/103736",
    "body": "### Description\r\n\r\nPing.Send() is either failing to find the ping binary or cannot access the ping binary as a non-root user on EndeavourOS.\r\n\r\n### Reproduction Steps\r\n\r\nThis vb.net code snippet triggers a System.PlatformNotSupportedException while executing as a non-root user reliably on EndeavourOS, and will not fail if the user is root.\r\n```vb\r\nPublic Function PingAddress(Address As Net.IpAddress) As Boolean\r\n    If (New Ping).Send(Address).Status = IPStatus.Success Then\r\n        Return True\r\n    End If\r\n    Return False\r\nEnd Function\r\n```\r\n\r\n### Expected behavior\r\n\r\nCalls to Ping.Send() should function while running as a non-root user.\r\n\r\n### Actual behavior\r\n\r\nPing.Send() throws a System.PlatformNotSupportedException with message 'The system's ping utility could not be found.' while running as a non-root user.\r\n\r\n### Regression?\r\n\r\nUnknown\r\n\r\n### Known Workarounds\r\n\r\nRun as root (this is a bad idea).\r\n\r\n### Configuration\r\n\r\n.Net Version: running on 8.0.6, with the library causing this error targeting netstandard2.0\r\nOS: EndeavourOS Rolling (Archlinux Derivative) \r\nArch: linux-x64\r\nConfiguration Specific: Not Tested, but presumed that this may also affect Archlinux users as well.\r\n\r\n### Other information\r\n\r\nit should be noted that archlinux package `iputils` no longer provides separate ping6 and ping4 binaries in favor of a unified ping binary. `src/libraries/Common/src/System/Net/NetworkInformation/UnixCommandLinePing.cs` appears to use the old names still.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/103736/comments",
    "author": "Ninjastorm380",
    "comments": [
      {
        "user": "wfurt",
        "created_at": "2024-06-19T23:04:48Z",
        "body": "Do you have `ping` package installed (or equivalent) @Ninjastorm380? On Linux \"normal\" user does not have access to RAW socket e.g. trying to execute the ping utility is only one way for .NET. "
      },
      {
        "user": "Ninjastorm380",
        "created_at": "2024-06-19T23:12:56Z",
        "body": "@wfurt ping is installed and operational."
      },
      {
        "user": "Ninjastorm380",
        "created_at": "2024-06-19T23:17:02Z",
        "body": "also, to quote myself here:\r\n\r\n> `src/libraries/Common/src/System/Net/NetworkInformation/UnixCommandLinePing.cs` appears to use the old names still.\r\n\r\nlooks like you are trying to find ping4 and ping6, when those have been merged into just ping on EndeavourOS. I suspect the same is also true for archlinux, and that the old names are just symlinks for compatibility if they are found."
      },
      {
        "user": "wfurt",
        "created_at": "2024-06-19T23:20:27Z",
        "body": "I could see it being problem with IPv6. But there is still plain old `ping` on my Ubuntu. Perhaps @ManickaP can give it a shot on Arch. "
      },
      {
        "user": "Ninjastorm380",
        "created_at": "2024-06-19T23:44:09Z",
        "body": "some additional info I dug up @wfurt: AUR package `iputils-ping6-symlink` provides symlinks to ping as ping4 and ping6, but it's description implies that it is intended for compatibility purposes. Changes are probably needed to avoid relying on compat packages."
      },
      {
        "user": "Ninjastorm380",
        "created_at": "2024-06-21T19:53:58Z",
        "body": "mind if I take this on? I know what would be needed (search for ping on linux first, then ping4/ping6)"
      }
    ]
  },
  {
    "number": 73322,
    "title": "TypeEquivalence - value types with a `static` method shouldn't fail to load",
    "created_at": "2022-08-03T19:20:07Z",
    "closed_at": "2022-09-29T14:18:10Z",
    "labels": [
      "help wanted",
      "area-TypeSystem-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/73322",
    "body": "If an assembly is marked with `PrimaryInteropAssemblyAttribute`, all public value types are validated for TypeEquivalence. This works without issue unless the value type contains a method, at which point a failure will occur:\r\n\r\n```\r\n  System.TypeLoadException: Could not load the structure '<TYPE_NAME>' from assembly '<ASSEMBLY_NAME>'. The structure is marked as eligible for type equivalence, but it has a method.\r\n```\r\n\r\nHowever, if the type only has methods that are marked `static`, this should be permitted.\r\n\r\n\r\nFails as expected:\r\n```csharp\r\nstruct T\r\n{\r\n    public int F;\r\n    public void M() { }\r\n}\r\n```\r\n\r\nConsider supported:\r\n```csharp\r\nstruct T\r\n{\r\n    public int F;\r\n    public static void M() { }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/73322/comments",
    "author": "AaronRobinsonMSFT",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2022-08-03T19:52:05Z",
        "body": "> However, if the type only has methods that are marked static, this should be permitted.\r\n\r\nIs there an end-to-end scenario that this would enable? \r\n\r\nRoslyn would not be able to copy the method over for no-PIA embedding, so you would be able to really take advantage of the static methods in end-to-end scenarios that the type equivalence was designed for."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-08-03T20:33:20Z",
        "body": "> Is there an end-to-end scenario that this would enable?\r\n\r\nThis was something I noticed while updating some tests. It wasn't obvious why this is the case.\r\n\r\n> Roslyn would not be able to copy the method over for no-PIA embedding\r\n\r\nThe shape/layout of the struct should still be copiable though. If this idea blocks Roslyn though then I agree it should be kept as is."
      },
      {
        "user": "jkotas",
        "created_at": "2022-08-04T05:02:34Z",
        "body": "Roslyn seems to be handling it just fine. I guess we can delete the superfluous validation if we care around."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-09-02T01:48:41Z",
        "body": "Failing repro code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\n[assembly:PrimaryInteropAssembly(1,0)]\r\n\r\npublic struct T\r\n{\r\n    public int F;\r\n    public static void M() { }\r\n}\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Console.WriteLine(typeof(T).Name);\r\n    }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 73051,
    "title": "Stack traces should include parameter names",
    "created_at": "2022-07-29T08:49:02Z",
    "closed_at": "2022-08-18T11:13:05Z",
    "labels": [
      "help wanted",
      "area-NativeAOT-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/73051",
    "body": "`EnvironmentStackTrace.StackTraceTest` test expects parameter names to show up. We don't print them even if we have them.\r\n\r\nThe original motivation was consistency - we don't necessarily have them.\r\n\r\nBut since then, IL Linker started removing parameter names for methods that are not demonstratable targets of reflection. This matches what we do. We can just start printing them if we have MethodDefinition metadata (and keep not printing them if we don't have it).\r\n\r\nThe fix will be in src\\coreclr\\nativeaot\\System.Private.StackTraceMetadata\\src\\Internal\\StackTraceMetadata\\MethodNameFormatter.cs.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/73051/comments",
    "author": "MichalStrehovsky",
    "comments": [
      {
        "user": "jasper-d",
        "created_at": "2022-08-04T18:59:40Z",
        "body": "I would like to take a stab at it. Feel free to assign me."
      },
      {
        "user": "jkotas",
        "created_at": "2022-08-04T20:04:29Z",
        "body": "It is yours!"
      }
    ]
  },
  {
    "number": 43551,
    "title": "JIT fails to constant fold multiplies, and/or merge shifts",
    "created_at": "2020-10-17T02:49:08Z",
    "closed_at": "2020-10-27T15:47:08Z",
    "labels": [
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/43551",
    "body": "```C#\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static int Y(int x) => x * 2 * 2;\r\n```\r\nproduces\r\n```asm\r\n; Assembly listing for method X:Y(int):int\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )     int  ->  rcx\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M5754_IG01:              ;; offset=0000H\r\n                                                ;; bbWeight=1    PerfScore 0.00\r\nG_M5754_IG02:              ;; offset=0000H\r\n       8D0409               lea      eax, [rcx+rcx]\r\n       03C0                 add      eax, eax\r\n                                                ;; bbWeight=1    PerfScore 0.75\r\nG_M5754_IG03:              ;; offset=0005H\r\n       C3                   ret\r\n                                                ;; bbWeight=1    PerfScore 1.00\r\n\r\n; Total bytes of code 6, prolog size 0, PerfScore 2.35, instruction count 3 (MethodHash=7c40e985) for method X:Y(int):int\r\n```\r\n\r\nShould be simple enough to handle this in morph. Or we could re-associate better.\r\n\r\ncategory:cq\r\ntheme:expression-opts\r\nskill-level:intermediate\r\ncost:medium",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/43551/comments",
    "author": "AndyAyersMS",
    "comments": [
      {
        "user": "EgorBo",
        "created_at": "2020-10-17T19:48:45Z",
        "body": "even `GT_ADD` has issues 🙂 \r\n\r\n```csharp\r\nint val1() => 1;\r\nint val2() => 2;\r\n\r\nint Test(int x) => x + val1() + val2();\r\n```\r\nasm for `Test`:\r\n```asm\r\n       FFC2                 inc      edx\r\n       8BC2                 mov      eax, edx\r\n       83C002               add      eax, 2\r\n       C3                   ret     \r\n```\r\n\r\nbecause after inlining, in Morph we have two statements (I expected a single one):\r\n```\r\nfgMorphTree BB01, STMT00002 (before)\r\n               [000008] -AC---------              *  ASG       int   \r\n               [000007] D------N----              +--*  LCL_VAR   int    V03 tmp1         \r\n               [000004] --C---------              \\--*  ADD       int   \r\n               [000000] ------------                 +--*  LCL_VAR   int    V01 arg1         \r\n               [000013] ------------                 \\--*  CNS_INT   int    1\r\n\r\nfgMorphTree BB01, STMT00003 (before)\r\n               [000012] --C---------              *  RETURN    int   \r\n               [000011] --C---------              \\--*  ADD       int   \r\n               [000009] ------------                 +--*  LCL_VAR   int    V03 tmp1         \r\n               [000015] ------------                 \\--*  CNS_INT   int    2\r\n```"
      },
      {
        "user": "AndyAyersMS",
        "created_at": "2020-10-17T21:44:51Z",
        "body": "Right, inlining will break trees and we don't have anything today that will patch them back up. This causes lots of issues. See #6973 or #4655.\r\n\r\nI've tried a couple of approaches to fixing this but haven't settled on one that I think is workable."
      }
    ]
  },
  {
    "number": 43502,
    "title": "ILVerify crashes when sees FunctionPointerType",
    "created_at": "2020-10-16T09:16:35Z",
    "closed_at": "2021-08-13T10:24:31Z",
    "labels": [
      "help wanted",
      "area-Tools-ILVerification"
    ],
    "url": "https://github.com/dotnet/runtime/issues/43502",
    "body": "Running ilverify tool on SPC crashes with following exception\r\n\r\n```\r\nVerifying [System.Private.CoreLib]System.Globalization.CalendarData.EnumCalendarInfo\r\nError: System.InvalidCastException: Unable to cast object of type 'Internal.TypeSystem.FunctionPointerType' to type 'Internal.TypeSystem.Ecma.EcmaType'.\r\n   at ILVerify.AccessVerificationHelpers.CanAccess(TypeDesc currentClass, TypeDesc targetClass)\r\n   at ILVerify.AccessVerificationHelpers.CanAccessMethodSignature(TypeDesc currentType, MethodDesc targetMethod)\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode opcode, Int32 token)\r\n   at Internal.IL.ILImporter.ImportBasicBlock(BasicBlock basicBlock)\r\n   at Internal.IL.ILImporter.ImportBasicBlocks()\r\n   at ILVerify.Verifier.VerifyMethod(EcmaModule module, MethodIL methodIL, MethodDefinitionHandle methodHandle)\r\n   at ILVerify.Verifier.VerifyMethods(EcmaModule module, IEnumerable`1 methodHandles)+MoveNext()\r\n   at ILVerify.Verifier.Verify(PEReader peReader, MethodDefinitionHandle methodHandle)+MoveNext()\r\n   at ILVerify.Program.VerifyMethods(PEReader peReader, EcmaModule module, String path, Int32& numErrors, Int32& verifiedMethodCounter, Int32& methodCounter)\r\n   at ILVerify.Program.VerifyAssembly(PEReader peReader, EcmaModule module, String path)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/43502/comments",
    "author": "marek-safar",
    "comments": [
      {
        "user": "z3g4r",
        "created_at": "2020-10-17T22:12:57Z",
        "body": "Hi @BruceForstall, @jkotas  , any chance to get the issue assigned to me? I can see its up-for-grabs but I'm new here and I can't find clear description as for how to get the existing issue assigned to me."
      },
      {
        "user": "jkotas",
        "created_at": "2020-10-18T15:29:53Z",
        "body": "@PZegar I have assigned this issue to you. Thank you!"
      },
      {
        "user": "z3g4r",
        "created_at": "2020-10-19T20:16:37Z",
        "body": "Hi @marek-safar would you mind specifying the command line arguments you've called the ILverify with to get this exception? I expect _-r:%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\*.dll_ but which dll exactly have you been verifying? \r\n\r\nEDIT: I assume it was something like:\r\n\r\n_ILVerify.exe $GIT_DIR\\artifacts\\bin\\coreclr\\Windows_NT.x64.Debug\\System.Private.CoreLib.dll -r:\"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.0-dev\\\\*.dll\"_\r\n\r\nright?"
      },
      {
        "user": "marek-safar",
        "created_at": "2020-10-20T11:23:26Z",
        "body": ">  I assume it was something like:\r\n\r\n@PZegar yep, that's correct"
      },
      {
        "user": "JulieLeeMSFT",
        "created_at": "2021-07-27T21:40:01Z",
        "body": "Moving to future since ILVerify is preview feature.\r\n\r\n@PZegar, are you still interested in working on this issue?"
      }
    ]
  },
  {
    "number": 43348,
    "title": "Add verbose dumping if  `gtFoldExpr` changes the expression.",
    "created_at": "2020-10-13T09:47:49Z",
    "closed_at": "2021-02-03T07:54:34Z",
    "labels": [
      "good first issue",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/43348",
    "body": "`GenTree* Compiler::gtFoldExpr(GenTree* tree)` does not print anything when it folds an expression and does not call `DEBUG_DESTROY` on nodes that it throws away.\r\nThe task is to refactor `gtFoldExpr*` to do `JITDUMP` and `DEBUGDESTROY` to makes these transformations observable with `COMPlus_JitDump`.\r\n\r\ncategory:implementation\r\ntheme:debug-dumps\r\nskill-level:beginner\r\ncost:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/43348/comments",
    "author": "sandreenko",
    "comments": [
      {
        "user": "TaurahSP",
        "created_at": "2020-10-14T19:19:51Z",
        "body": "@sandreenko  hi can i grab this one?"
      },
      {
        "user": "sandreenko",
        "created_at": "2020-10-14T19:26:31Z",
        "body": "Hi @TaurahSP, sure. Do you still want to work on #42801 as well or you want this one instead?"
      },
      {
        "user": "TaurahSP",
        "created_at": "2020-10-14T19:28:59Z",
        "body": "@sandreenko This one only, already unassigned myself from the other one. Thanks"
      },
      {
        "user": "TaurahSP",
        "created_at": "2020-10-22T19:30:59Z",
        "body": "@sandreenko  can you give me a little overview what this file and function is doing? Thanks"
      },
      {
        "user": "sandreenko",
        "created_at": "2020-10-29T19:48:26Z",
        "body": "Sure, sorry for the late response due to my vacation. \r\n\r\nSo `gtFoldExpr*` are folding trees like: \r\n```\r\n               [000138] ------------                    \\--*  ADD       int  \r\n               [000135] ------------                       +--*  LCL_VAR   int  (AX) V36 tmp1         \r\n               [000137] ------------                       \\--*  CNS_INT   int    0\r\n```\r\ninto \r\n``` \r\n[000135] ------------                       +--*  LCL_VAR   int  (AX) V36 tmp1  \r\n```\r\nand after such transformation `000138` and `000137` become dead, so `DEBUGDESTROY` is better be called on them.\r\n\r\nalso, right now we don't print anything when we fold an expression, so such transformations are hard to catch. It would be useful to add a debug printing (using JITDUMP), like \r\n```\r\nconst unsigned origTreeID = tree->gtTreeID;\r\n...do transformations...\r\nif (verbose && (tree->gtTreeID != origTreeID))\r\n{\r\n  printf(\"the tree [%06u] was folded into:\\n\", origTreeID);\r\n  gtDispTree(tree);\r\n}\r\n```"
      },
      {
        "user": "SingleAccretion",
        "created_at": "2021-01-31T17:20:41Z",
        "body": "@TaurahSP would it be OK for me to take this over?"
      },
      {
        "user": "TaurahSP",
        "created_at": "2021-01-31T17:24:15Z",
        "body": "@SingleAccretion  Sure"
      }
    ]
  },
  {
    "number": 42230,
    "title": "HKDF: inconsistency regarding output key material of zero length",
    "created_at": "2020-09-14T23:47:47Z",
    "closed_at": "2021-05-05T13:23:26Z",
    "labels": [
      "area-System.Security",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/42230",
    "body": "There's an inconsistency in the way methods of the `System.Security.Cryptography.HKDF` class treat a request to derive an output key material (OKM) of zero length: one method throws and the other three methods work ok.\r\nExample:\r\n```csharp\r\nbyte[] ikm = new byte[32];\r\nbyte[] salt = new byte[32];\r\nbyte[] prk = new byte[32];\r\nbyte[] info = new byte[32];\r\nint outputLength = 0;\r\nbyte[] output = new byte[outputLength];\r\n\r\n\r\n// Works fine:\r\nHKDF.DeriveKey(HashAlgorithmName.SHA256, ikm, output, salt, info);\r\n\r\n// Works fine:\r\nHKDF.DeriveKey(HashAlgorithmName.SHA256, ikm, outputLength, salt, info);\r\n\r\n// Works fine:\r\nHKDF.Expand(HashAlgorithmName.SHA256, prk, output, info);\r\n\r\n// Throws ArgumentOutOfRangeException because of invalid outputLength value:\r\nHKDF.Expand(HashAlgorithmName.SHA256, prk, outputLength, info);\r\n```\r\n\r\nInstead there should be a clear policy on whether a request to derive an OKM of zero length is considered valid or not:\r\n- if valid, all four methods should work (i.e., `byte` overload of `Expand` should be fixed to return an empty byte array instead of throwing an exception)\r\n- otherwise, all four methods should throw an exception saying that the OKM's length can't be zero.\r\n\r\nWindows 10 x64 Pro, dotnet 5.0.0-preview.8.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/42230/comments",
    "author": "andreimilto",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-09-14T23:47:50Z",
        "body": "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @jeffhandley\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "krwq",
        "created_at": "2020-09-15T11:00:00Z",
        "body": "Marking this initially as 5.0 since this shipped this release and it would be a breaking change to go from no throw -> throw.\r\n\r\nI don't feel strongly opinionated if we should throw or not. This operation with length 0 doesn't make much sense. Can't think of scenario where it would make sense to want zero length key. Perhaps we should always throw? @bartonjs any thoughts?"
      },
      {
        "user": "bartonjs",
        "created_at": "2020-09-15T16:19:43Z",
        "body": "Apparently there are two of these, this one for zero and the other for negative... and I answered on the other.\r\n\r\nI don't see any way where zero makes sense; we should throw AOORE for any length < 1.  (Yeah, we can make it be no-op/Array.Empty, but it's not providing value)"
      },
      {
        "user": "jeffhandley",
        "created_at": "2020-09-15T23:20:56Z",
        "body": "I did a preemptive bar check on this and determined it won't meet the bar for 5.0.0 (since there are workarounds); moving to 6.0.0.  Thanks for reporting this, @andreimilto!"
      },
      {
        "user": "andreimilto",
        "created_at": "2020-09-16T01:23:08Z",
        "body": "I was happy to help, @jeffhandley!"
      },
      {
        "user": "krwq",
        "created_at": "2020-09-16T08:47:00Z",
        "body": "I unassigned myself from both bugs and will pick this up somewhere in 6.0 timeline"
      },
      {
        "user": "vcsjones",
        "created_at": "2020-09-16T12:29:07Z",
        "body": "@krwq This and the other one would make a good [up-for-grabs] and [easy] tags if you wouldn't mind someone from the community picking these up."
      },
      {
        "user": "vcsjones",
        "created_at": "2020-09-17T13:49:59Z",
        "body": "Note to anyone picking this up: it probably makes sense to fix #42229  in the same pull request."
      },
      {
        "user": "tonycimaglia",
        "created_at": "2020-09-17T14:24:17Z",
        "body": "@vcsjones I'll also take a look at this along with #42229"
      },
      {
        "user": "tonycimaglia",
        "created_at": "2020-09-17T14:41:40Z",
        "body": "@bartonjs  / @krwq  could you assign this to me as well as #42229 ?"
      },
      {
        "user": "krwq",
        "created_at": "2020-09-18T09:15:37Z",
        "body": "Thank you @tonycimaglia!"
      },
      {
        "user": "ADustyOldMuffin",
        "created_at": "2021-05-04T17:15:39Z",
        "body": "I'll also be picking this one up with #42229 Since there hasn't been any action in around 8 months"
      }
    ]
  },
  {
    "number": 40016,
    "title": "Some dead resource strings in Microsoft.VisualBasic.Core",
    "created_at": "2020-07-28T15:53:56Z",
    "closed_at": "2020-07-30T00:32:51Z",
    "labels": [
      "area-Microsoft.VisualBasic",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/40016",
    "body": "Several area not referenced in code, eg., EnvVarNotFound_Name, WinForms_RecursiveFormCreate, WinForms_SeeInnerException...\r\n\r\nThese can be removed from src\\libraries\\Microsoft.VisualBasic.Core\\src\\Resources\\Strings.resx",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/40016/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-07-28T15:54:01Z",
        "body": "Tagging subscribers to this area: @cston\nSee info in area-owners.md if you want to be subscribed."
      },
      {
        "user": "Marusyk",
        "created_at": "2020-07-28T22:08:05Z",
        "body": "I'll prepare a PR"
      }
    ]
  },
  {
    "number": 37848,
    "title": "Repository-wide gitignore is incorrect after mono integration",
    "created_at": "2020-06-13T06:01:29Z",
    "closed_at": "2022-08-03T10:06:58Z",
    "labels": [
      "help wanted",
      "area-Infrastructure"
    ],
    "url": "https://github.com/dotnet/runtime/issues/37848",
    "body": "It seems like the repository-wide gitignore list needs an audit now that mono has been integrated in. I've been failing to find stuff when using ripgrep and it turns out at least one reason for that is ripgrep obeys gitignore and we have an ignore list that includes files that are actually checked into the repository. The relevant example for me is ```Makefile```, which is blanket ignored at all depths with a comment above it reading \"CMake files\". The mono/ subdirectory tree contains multiple checked-in ```Makefile```s.\r\n\r\nAs a starting point ```Makefile``` should probably be removed from the ignore list or the ignore should be refined, but I suspect the ignore list might need a once-over in general because it ignores a big set of things and most of the ignores are global.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/37848/comments",
    "author": "kg",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-06-13T06:01:31Z",
        "body": "Tagging subscribers to this area: @ViktorHofer\nNotify danmosemsft if you want to be subscribed."
      }
    ]
  },
  {
    "number": 37768,
    "title": "Change double NOT operation to comparison to 0",
    "created_at": "2020-06-11T21:19:30Z",
    "closed_at": "2020-07-09T19:06:46Z",
    "labels": [
      "help wanted",
      "area-VM-meta-mono"
    ],
    "url": "https://github.com/dotnet/runtime/pull/37768",
    "body": "If strstr does not return 0, found is true, so instead of using !!, let's use != 0.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/37768/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-06-11T21:19:35Z",
        "body": "Tagging subscribers to this area: @ViktorHofer\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "lambdageek",
        "created_at": "2020-06-11T21:27:10Z",
        "body": "note: this is dead code in the net5 (dotnet/runtime) version of mono (there are no appdomains, and there is no shadow copying).  It's still worthwhile for mono/mono, however."
      }
    ]
  },
  {
    "number": 37304,
    "title": "[mono][loader] Drop MONO_ASMCTX_INTERNAL",
    "created_at": "2020-06-02T13:29:35Z",
    "closed_at": "2021-09-10T12:26:41Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area-AssemblyLoader-mono",
      "runtime-mono"
    ],
    "url": "https://github.com/dotnet/runtime/issues/37304",
    "body": "The entire `MONO_ASMCTX_*` set of enums is primarily for the old .NET Framework-compatible loader behavior.  It shouldn't be added to, because eventually we want to get rid of it entirely.\r\n\r\nThe `MONO_ASMCTX_INTERNAL` flag was added as a matter of expediency in #37264. A better approach is to add a new `gboolean no_user_events` field to the `MonoAssemblyLoadRequest` object and make sure that it is passed down to the code that is actually firing the managed events.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/37304/comments",
    "author": "lambdageek",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2020-06-02T13:29:37Z",
        "body": "Tagging subscribers to this area: @CoffeeFlux\nNotify danmosemsft if you want to be subscribed."
      },
      {
        "user": "lambdageek",
        "created_at": "2020-06-02T13:40:31Z",
        "body": "Hm. Another approach might be to make a new `MonoAssemblyLoadContext` for internal assemblies and give it special treatment."
      }
    ]
  },
  {
    "number": 36134,
    "title": "Specify SizeConst when marshalling field as ByValArray",
    "created_at": "2020-05-08T18:42:15Z",
    "closed_at": "2023-07-31T18:24:36Z",
    "labels": [
      "api-approved",
      "area-System.Runtime.InteropServices",
      "help wanted",
      "code-analyzer",
      "in-pr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/36134",
    "body": "When marshalling using `UnmanagedType.ByValArray`, the `SizeConst` field should be specified.\r\n\r\n```C#\r\nstruct MyStruct\r\n{\r\n    [MarshalAs(UnmanagedType.ByValArray)]\r\n    int[] Foo;\r\n}\r\n```\r\n\r\n**Category:** Interoperability\r\n**Default:** Enabled\r\n\r\ncc @terrajobst @stephentoub @AaronRobinsonMSFT @jkoritzinsky",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/36134/comments",
    "author": "elinor-fung",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2020-05-10T05:40:53Z",
        "body": "I think any of these type of requirements should be in some analyzer."
      },
      {
        "user": "terrajobst",
        "created_at": "2021-07-13T18:08:49Z",
        "body": "* The analyzer should probably also handle `UnmanagedType.ByValTStr`\r\n    - Should be the same diagnostic ID with a slightly different message\r\n* Assuming code like this wouldn't work at runtime, turning the rule on by default seems fine\r\n    - If code like this works today, then on by default might be noisy"
      },
      {
        "user": "jkoritzinsky",
        "created_at": "2023-07-10T17:45:04Z",
        "body": "Roslyn already requires `SizeConst` for `ByValTStr`. Should we instead extend Roslyn to also require `SizeConst` for `ByValArray` instead of writing a separate analyzer?"
      }
    ]
  },
  {
    "number": 34635,
    "title": "Event Logging is incomplete in System.Net.Security.SecureChannel.Decrypt",
    "created_at": "2020-04-07T11:20:04Z",
    "closed_at": "2020-08-28T21:00:16Z",
    "labels": [
      "enhancement",
      "area-System.Net.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/34635",
    "body": "System.Net.Security.SecureChannel.Decrypt logs an \"Enter\" trace event, but does not log the corresponding \"Exit\" trace event.   \r\n\r\nMore importantly, this method does not execute NetEventSource.DumpBuffer on the decrypted content.    Using HttpWebRequest on 4.x, this functionality was present as part of System.Net tracing.   I don't see any way of doing this type of tracing with HttpClient.\r\n\r\nThe pattern is implemented correctly, 30 lines higher in the same file, in Encrypt.    NetEventSource.DumpBuffer is called with the cleartext, and NetEventSource.Exit is called with the result of the encryption. \r\n\r\nIf there aren't any philosophical objections to adding this, I could take a shot at submitting the PR.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/34635/comments",
    "author": "frankracis-work",
    "comments": [
      {
        "user": "alnikola",
        "created_at": "2020-04-30T16:18:13Z",
        "body": "Triage:\r\nIt's a diagnostics code bug, but not a priority now.\r\nWe would welcome a PR for this, thank you."
      },
      {
        "user": "wfurt",
        "created_at": "2020-08-28T21:00:16Z",
        "body": "closed by #40998"
      }
    ]
  },
  {
    "number": 1958,
    "title": "PipeReader CopyToAsync to a PipeWriter doesn't notice when the destination Pipe is closed.",
    "created_at": "2020-01-21T10:34:21Z",
    "closed_at": "2021-04-17T05:33:17Z",
    "labels": [
      "area-System.IO.Pipelines",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1958",
    "body": "With .NET Core 3.1, I'm using a PipeReader.CopyToAsync to copy to a destination pipe.  When I close the pipe, the CopyToAsync doesn't notice until the buffer is full.\r\n\r\n`await Request.BodyReader.CopyToAsync(receivePipe.Pipe.Writer);`\r\n\r\nI would expect an exception or something.  As it is, the PipeReader.Complete seems kind of useless.\r\n\r\nLooking in PipeReader.cs, it appears that it pays attention and throws an exception for a cancellation, but doesn't do anything about IsComplete.\r\n\r\n\r\n            return CopyToAsyncCore(destination, async (destination, memory, cancellationToken) =>\r\n            {\r\n                FlushResult result = await destination.WriteAsync(memory, cancellationToken).ConfigureAwait(false);\r\n\r\n                if (result.IsCanceled)\r\n                {\r\n                    ThrowHelper.ThrowOperationCanceledException_FlushCanceled();\r\n                }\r\n            },\r\n            cancellationToken);\r\n\r\n\r\nI've managed to work around this by passing along a cancellation token along with the pipe, but I feel kind of ridiculous writing:\r\n\r\n            cancellationSource.Cancel();\r\n            receivePipe.Reader.Complete();\r\n\r\nThis stuff is fantastic though.  Even with the occasional hiccup, it's such a huge leap forward.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1958/comments",
    "author": "chriswelles",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2020-01-21T11:45:20Z",
        "body": "Agreed. This should be fixed."
      },
      {
        "user": "manandre",
        "created_at": "2021-04-14T21:21:25Z",
        "body": "Fixing this issue requires first to solve another one identified during implementation. See #51272 for more details"
      }
    ]
  },
  {
    "number": 1854,
    "title": "Hashset.IntersectWith should utilize O(1) ICollection.Contains methods.",
    "created_at": "2020-01-17T09:49:38Z",
    "closed_at": "2021-10-29T17:33:07Z",
    "labels": [
      "area-System.Collections",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1854",
    "body": "When performing `set.IntersectWith(other)`, where both `set` and `other` are instances of `HashSet`, it will use a specialized method `IntersectWithHashSetWithSameEC()` to run in time proportional to `set.Count`. This works because `other.Contains()` runs in O(1) time.\r\n\r\nBut when `other` is another type of collection, it instead calls a method that runs in time proportional to `other.Count+set.Count`. If `other` is e.g. a very large `Dictionary.KeyCollection`, this is wasteful, since `KeyCollection.Contains()` also runs in O(1) time.\r\n\r\nThis would be remedied if there was an interface that both of these collections implemented, that guarantees O(1) lookup. `IntersectWithHashSetWithSameEC()` could then be `IntersectWithConstantTimeContainsCollectionWithSameEC()`",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1854/comments",
    "author": "loopedvin",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2020-01-17T19:08:47Z",
        "body": "Alternatively could it try casting to `ICollection<T>` ? That would work for `Dictionary.KeyCollection`."
      },
      {
        "user": "loopedvin",
        "created_at": "2020-01-20T13:36:47Z",
        "body": "@danmosemsft that would work for the specific case of `KeyCollection`, but would introduce (worse!) performance issues for any `ICollection` that doesn't guarantee O(1) `Contains`. For example, it would make `set.IntersectWith(List other)` run in O(`set.Count` * `other.Length`), a disaster."
      },
      {
        "user": "loopedvin",
        "created_at": "2020-01-21T12:15:39Z",
        "body": "Another way would be for `IntersectWith` to enumerate all known O(1) data structures and attempt the cast. I.e. `if (other is HashSet<T> || other is Dictionary<T,_>.KeyCollection || ...) then useSpecialIntersect(other) `\r\n\r\nThat would work for the standard library, but it would make it harder for others to use their own data structures with O(1) lookup."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2020-06-03T16:55:39Z",
        "body": "> Another way would be for IntersectWith to enumerate all known O(1) data structures and attempt the cast. I.e. if (other is HashSet<T> || other is Dictionary<T,_>.KeyCollection || ...) then useSpecialIntersect(other)\r\n\r\nI would probably prefer such an approach over exposing a new interface. \r\n\r\n> That would work for the standard library, but it would make it harder for others to use their own data structures with O(1) lookup.\r\n\r\nI don't think interfaces are meant to communicate complexity contracts. AFAIK there is no such precedent elsewhere in the framework."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2020-06-03T16:58:08Z",
        "body": "Any work implementing this should probably also come with benchmarks demonstrating the performance benefits, if any."
      },
      {
        "user": "jkotas",
        "created_at": "2020-08-26T19:17:12Z",
        "body": "This throughput improvement has a problem in terms of static footprint. Every HashSet instantiation will end up instantiating a matching Dictionary now because this is introducing a new dependency between HashSet and Dictionary. It is not pay for play."
      },
      {
        "user": "jtmueller",
        "created_at": "2021-08-05T19:00:17Z",
        "body": "@loopedvin How can we safely call `ICollection.Contains()` if we don't know whether the collection is using the same Equality Comparer as our HashSet? If it's not the same comparer, then all this would do is allow us to arrive at the wrong answer quickly."
      },
      {
        "user": "eiriktsarpalis",
        "created_at": "2021-10-29T17:33:06Z",
        "body": "Closing per feedback. "
      }
    ]
  },
  {
    "number": 31367,
    "title": "Bitmap.Save 'A generic error occurred in GDI+",
    "created_at": "2019-11-01T16:54:07Z",
    "closed_at": "2020-04-17T17:01:00Z",
    "labels": [
      "area-System.Drawing",
      "help wanted",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31367",
    "body": "when calling bitmap.Save with a file path where the folder doesn't exist the save method throws a \r\nSystem.Runtime.InteropServices.ExternalException: 'A generic error occurred in GDI+.'\r\n\r\nIMHO the the folder should be created (to match folder file operations) or throw an expection of DirectoryNotFoundException\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31367/comments",
    "author": "grahamehorner",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2019-11-01T22:10:48Z",
        "body": "Seems reasonable - do you want to offer a PR? We would want the same behavior on Unix and Windows, but if the directory was created in the .NET code, that would hopefully be true."
      },
      {
        "user": "safern",
        "created_at": "2019-11-13T19:26:33Z",
        "body": "Seems reasonable to me as well. "
      },
      {
        "user": "korsaire",
        "created_at": "2019-11-24T16:08:26Z",
        "body": "I can look into that."
      },
      {
        "user": "Backhage",
        "created_at": "2019-11-24T16:20:05Z",
        "body": "As a user I would expect an exception being thrown if I supplied a non-existing path. Creating folders is a side effect that might hide errors and lead to unexpected behavior.\r\nPlease consider changing the current exception to a DirectoryNotFoundException rather than trying to create the full path."
      },
      {
        "user": "danmoseley",
        "created_at": "2019-11-24T16:43:51Z",
        "body": "What do other API do?"
      },
      {
        "user": "grahamehorner",
        "created_at": "2019-11-24T16:45:47Z",
        "body": "@danmosemsft File.Create creates the folder/directory structure\r\n"
      },
      {
        "user": "korsaire",
        "created_at": "2019-11-24T19:15:37Z",
        "body": "@Backhage I agree with that. If the API change is approved, maybe later an optional bool param can be passed to indicate whether to create a non-existing path - but IMO it's out of scope of this issue."
      },
      {
        "user": "Backhage",
        "created_at": "2019-11-24T20:33:20Z",
        "body": "@grahamehorner At least for me, using .NET Core 3.0 on Windows, File.Create(@\"C:\\Temp\\NonExistingPath\\File.tmp\"); throws a DirectoryNotFoundException."
      },
      {
        "user": "grahamehorner",
        "created_at": "2019-11-24T21:23:38Z",
        "body": "@Backhage interesting that differs to my experiance with .NET 2.2 and yes your correct, .NET 3.0 throws the exception as I would have expected; Directory.Create also creates the directory tree? "
      },
      {
        "user": "Macromullet",
        "created_at": "2020-04-15T13:15:32Z",
        "body": "The root of this issue is that Image.Save calls GdipSaveImageToFile, which is implemented natively. The only way to solve this issue is to introduce a new exception by doing the directory path check earlier. This check could potentially be moved, and only performed before the call to GdipSaveImageToFile, but it would then lead to a potential difference when the code paths diverge in Save(Stream stream, ImageCodecInfo encoder, EncoderParameters? encoderParams) when _rawData vs non-null."
      }
    ]
  },
  {
    "number": 31054,
    "title": "IPInterfaceProperties.DhcpServerAddresses does not work on Ubuntu",
    "created_at": "2019-10-03T06:07:29Z",
    "closed_at": "2020-09-03T06:55:20Z",
    "labels": [
      "bug",
      "area-System.Net",
      "good first issue",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/31054",
    "body": "This collection always returns empty list even if DHCP is configured and used.  \r\n\r\nCode to process DHCP is hardcoded  in `System/Net/NetworkInformation/NetworkFiles.cs`\r\n```c#\r\n public const string DHClientLeasesFile = \"/var/lib/dhcp/dhclient.leases\";System/Net/NetworkInformation/NetworkFiles.cs:        public const string DHClientLeasesFile = \"/var/lib/dhcp/dhclient.leases\";\r\n```\r\nBut on Ubuntu (and perhaps other Linux distributions) DHCP configuration is files specific to interface. That makes more sense and you many need more instances and writing to single global file hard.\r\n\r\n```\r\nfurt@net-dale:/var/lib/dhcp$ ps axu| grep dhcp\r\nroot      1952  0.0  0.0  25660  3356 ?        Ss   Apr24   0:00 /sbin/dhclient -1 -4 -v -pf /run/dhclient.eno1.pid -lf /var/lib/dhcp/dhclient.eno1.leases -I -df /var/lib/dhcp/dhclient6.eno1.leases eno1\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/31054/comments",
    "author": "wfurt",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2019-12-17T21:38:30Z",
        "body": "Triage: Solution - look for both files."
      },
      {
        "user": "webczat",
        "created_at": "2020-03-21T15:54:46Z",
        "body": "And what happens if you have another dhcp client? For example dhcpcd or systemd-network builtin client or... Not sure if I know anything else."
      },
      {
        "user": "karelz",
        "created_at": "2020-03-23T17:45:27Z",
        "body": "@webczat what would yo recommend that should happen?\r\nI believe that the natural answer is: we will try to understand the most used schemas/files."
      },
      {
        "user": "webczat",
        "created_at": "2020-03-23T22:08:50Z",
        "body": "well. generally I am for either making it unsupported, or return empty collection. It is of course only my opinion and may be unacceptable, but there is no way to implement it in a way that will always work, at least no way that I know of. It is a bit of hit or miss, because it will depend on arbitrary user decisions, and more about the preferred software doing dhcp than about it's configuration. Also at least in case of systemd-networkd I am not even sure you can get this info without dbus. And I believe it would be used this way when someone tries to use systemd-nspawn containers with default private networking. There is generally no standard interface for that."
      },
      {
        "user": "wfurt",
        "created_at": "2020-03-23T23:18:00Z",
        "body": "I think we can make improvements - like in this particular case. As use of systems becomes more common, we will need to figure out how to talk to it  - and not just for DHCP. We should probably open separate issues. cc: @tmds "
      },
      {
        "user": "webczat",
        "created_at": "2020-03-23T23:53:20Z",
        "body": "sure. note however that systemd-network is not replacing network-manager or at least it still didn't. As in, the situation with that particular feature can probably be improved only by adding each possible case, like info from dhclient specific files, info from dhcpcd specific files, info from dbus, you could even get info from network-manager... I am not sure what is the maintenance cost of all that. I am also not sure if all these files/interfaces are readable by non-root to begin with."
      },
      {
        "user": "webczat",
        "created_at": "2020-03-24T00:03:22Z",
        "body": "Sorry for spamming, but just discovered that and wanted to separate that for it to be more clear:\r\n\r\nI am using archlinux, and networkmanager now has a builtin dhcp client. I am not sure how it works, I even didn't realize which update introduced that. I am not sure if this writes lease files at all or not. At first glance it looks like it does, but it is more difficult to predict the names, as they don't only encode interface names, they seem to also encode connection uuids. Getting that from dbus should still be possible (not sure if it is exposed though).\r\n\r\nThat change in network manager seems to me like being relatively new."
      }
    ]
  },
  {
    "number": 3767,
    "title": "Common files are built twice",
    "created_at": "2019-09-13T23:02:30Z",
    "closed_at": "2020-02-10T18:50:21Z",
    "labels": [
      "help wanted",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3767",
    "body": "Building corehost will build some files more than once; mainly:\r\n\r\n- trace.cpp\r\n- utils.cpp\r\n- PAL\r\n\r\nThis happens for all targets: nativehost, mockhostpolicy, mockcoreclr, test_fx_ver, nethost, hostpolicy, dotnet, and apphost.\r\n\r\nSome files are also built more than once in other targets; mainly deps-related stuff in hostfxr and hostpolicy:\r\n\r\n- deps_format.cpp\r\n- deps_entry.cpp\r\n- host_startup_info.cpp\r\n- roll_forward_option.cpp\r\n- runtime_config.cpp\r\n- fx_definition.cpp\r\n- fx_reference.cpp\r\n- version.cpp\r\n- version_compatibility_range.cpp\r\n- json_parser.cpp\r\n\r\nWould be nice to build two intermediate static libraries here: one for trace/utils/PAL, and one for the deps-related stuff.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3767/comments",
    "author": "lpereira",
    "comments": [
      {
        "user": "elinor-fung",
        "created_at": "2019-09-16T17:43:14Z",
        "body": "Does this supersede dotnet/runtime#3729? "
      },
      {
        "user": "lpereira",
        "created_at": "2019-09-16T19:44:39Z",
        "body": "Oh, I had forgotten I had filed this one already. Yes, it does supersede that one."
      },
      {
        "user": "lpereira",
        "created_at": "2020-02-10T18:50:21Z",
        "body": "Fixed in dotnet/runtime."
      }
    ]
  },
  {
    "number": 3760,
    "title": "Handle failures from printf when tracing errors",
    "created_at": "2019-09-11T09:48:48Z",
    "closed_at": "2023-07-11T09:20:44Z",
    "labels": [
      "good first issue",
      "help wanted",
      "area-Host"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3760",
    "body": "We've seen failures which indicate that the call to `pal::str_vprintf` can fail (return -1) - currently no idea what causes the failure though. When this happens `trace::error` will end up calling `fputs` with `NULL` which is a hard failure (parameter validation error in CRT).\r\n\r\nThe code should be changed to handle the failure `printf` and probably try to print out the message in some other way - maybe without formatting, or print out a generic error message instead. It should definitely not cause a crash of the process.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3760/comments",
    "author": "vitek-karas",
    "comments": [
      {
        "user": "adarshamrit",
        "created_at": "2023-07-10T17:26:16Z",
        "body": "Can you please provide steps on how to reproduce this issue?\r\n"
      },
      {
        "user": "vitek-karas",
        "created_at": "2023-07-11T09:20:44Z",
        "body": "Thanks for the interest. Unfortunately, I didn't have a repro even back when I filed the issue. I also haven't seen it reported in several years now, so I don't think it's worth keeping the issue open for a hypothetical scenario. Going to close it. If it happens again we can create a new one."
      }
    ]
  },
  {
    "number": 30586,
    "title": "Uri.IdnScope leads to multiple pieces of dead code",
    "created_at": "2019-08-14T02:38:01Z",
    "closed_at": "2020-02-01T03:56:27Z",
    "labels": [
      "area-System.Net",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30586",
    "body": "Uri.IdnScope is hardcoded to UriIdnScope.None.  There are then a bunch of branches of code that do things if it's not None.  All of those should be cleaned up.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30586/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2019-08-14T02:43:41Z",
        "body": ">Uri.IdnScope is hardcoded to UriIdnScope.None\r\n\r\nFYI,\r\n\r\nIn .NET Framework, this is control by app.config settings.  In Windows 8 timeframe, we decided to deprecate the setting especially since Store apps didn't have app.config anymore. And on Windows the IDN setting can be controlled at the OS level and with group policy. For the most part it controlled how hostname portion will be serialized to use either UTF-8 or punnycode encodings.\r\n\r\nAnd now in .NET Core, it is essentially dead code."
      },
      {
        "user": "davidsh",
        "created_at": "2019-08-27T21:46:38Z",
        "body": "Fixed by PR dotnet/corefx#40546"
      }
    ]
  },
  {
    "number": 30345,
    "title": "Enable disabled xunit warnings",
    "created_at": "2019-07-23T15:23:08Z",
    "closed_at": "2020-02-01T03:32:35Z",
    "labels": [
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30345",
    "body": "- [x] xUnit1019\tMemberData must reference a member providing a valid data type\r\n- [x] xUnit1026\tTheory methods should use all of their parameters\r\n- [x] xUnit2017\tDo not use Contains() to check if a value exists in a collection",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30345/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2019-07-23T16:20:39Z",
        "body": "Community folks, as indicated by the labels, this is a great first issue."
      },
      {
        "user": "ViktorHofer",
        "created_at": "2019-07-23T17:57:17Z",
        "body": "You are fast Mr Toub. Meanwhile I'm at an .NET Event giving a talk and watching your PRs coming in. I feel like a PM."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-07-24T08:34:15Z",
        "body": "working on 2000."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-07-27T15:34:09Z",
        "body": "a couple of the xUnit2003 errors from src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/ECDsa/ECDsaTests.netcoreapp.cs slipped out somehow, after dotnet/corefx#39696: L193/L216\r\n\r\nmaybe I'll just do it whilst I'm doing this."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-07-27T15:44:25Z",
        "body": "....actually.... turns out that there's even more (well, 10). I started to wonder if the build sequence is somewhat flaky and misses some of the analyzers? I've had it happen a few times, where I had 500+ errors and building it again with some edits made all of them to disappear, despite the fact that I've fixed none. `build -clean` then rebuilding did fix the issue though."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-08-02T16:47:29Z",
        "body": "Attempting to grab 1026, if noone's working on it."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-08-06T16:15:48Z",
        "body": "@Gnbrkm41, are you working on 1026?  I started to and then noticed your comment.  If you're actively working on it, I'll stop, otherwise I'll finish it up."
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-08-06T16:18:28Z",
        "body": "@stephentoub, feel free to finish up; there's still quite a lot left to finish, and I probably won't have time to finish it up for now. Thanks!"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-08-21T13:26:54Z",
        "body": "All rules we plan to enable have been enabled.  Thanks!"
      },
      {
        "user": "Gnbrkm41",
        "created_at": "2019-08-21T13:39:57Z",
        "body": "Pretty amazing to see all of them enabled, Thanks everyone!"
      }
    ]
  },
  {
    "number": 30143,
    "title": "nit: JsonCamelCaseNamePolicy -> JsonCamelCaseNamingPolicy",
    "created_at": "2019-07-05T02:11:24Z",
    "closed_at": "2020-02-01T03:12:26Z",
    "labels": [
      "area-System.Text.Json",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30143",
    "body": "I noticed that the internal class for camel casing names is `JsonCamelCaseNamePolicy`. It should probably be `JsonCamelCaseNamingPolicy` since it is inheriting from `JsonNamingPolicy`.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30143/comments",
    "author": "JamesNK",
    "comments": [
      {
        "user": "Marusyk",
        "created_at": "2019-07-07T22:12:23Z",
        "body": "please assign it to me"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-08T00:26:21Z",
        "body": "Or CamelCaseJsonNamingPolicy?"
      }
    ]
  },
  {
    "number": 30060,
    "title": "MemberDescriptor.Attributes throws NRE if null attribute in attributes",
    "created_at": "2019-06-27T13:39:31Z",
    "closed_at": "2020-02-01T03:04:50Z",
    "labels": [
      "area-System.ComponentModel",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/30060",
    "body": "E.g.\r\n```cs\r\nnew SubMemberDescriptor(\"Name\", new Attribute[] { null }).Attributes\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/30060/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "maryamariyan",
        "created_at": "2019-06-28T21:39:42Z",
        "body": "As you said on both netfx and netcoreapp, we get NRE as shown below:\r\n\r\n```\r\n        [Fact]\r\n        public void Attributes_ContainsNull_Throws()\r\n        {\r\n            var name = nameof(MemberDescriptorFromNameAndAttributes);\r\n            var descriptor = new MockMemberDescriptor(name, new Attribute[] { null });\r\n            Assert.Throws<NullReferenceException>(() => descriptor.Attributes);\r\n        }\r\n```\r\n\r\nNext, will need to decide what the expected behavior should be.\r\n\r\n@safern "
      }
    ]
  },
  {
    "number": 12981,
    "title": "No symbols in stack traces in coreclr test runs",
    "created_at": "2019-06-26T16:35:18Z",
    "closed_at": "2020-01-31T07:19:58Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/12981",
    "body": "Currently, if we hit a VM assert that generates a stack trace, we end up with a useless stack trace like:\r\n```\r\nAssert failure(PID 2976 [0x00000ba0], Thread: 6356 [0x18d4]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x20D6B4 (0x722966f4)\r\nCORECLR! GetCLRRuntimeHost + 0x20D041 (0x72296081)\r\nCORECLR! GetCLRRuntimeHost + 0x208973 (0x722919b3)\r\nCORECLR! GetCLRRuntimeHost + 0x1FF12 (0x720a8f52)\r\nCORECLR! GetCLRRuntimeHost + 0x475A7F (0x724feabf)\r\nSYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x71ba3da4)\r\nCORECLR! GetCLRRuntimeHost + 0x6EEE1 (0x720f7f21)\r\nCORECLR! GetCLRRuntimeHost + 0x24DFB5 (0x722d6ff5)\r\nCORECLR! GetCLRRuntimeHost + 0x24E132 (0x722d7172)\r\nCORECLR! GetCLRRuntimeHost + 0x24E770 (0x722d77b0)\r\n    File: f:\\workspace.2\\_work\\1\\s\\src\\vm\\object.cpp Line: 674\r\n    Image: C:\\dotnetbuild\\work\\5dc2c30d-a168-467c-9362-8744250361d3\\Payload\\dotnet.exe\r\n```\r\n\r\n(this came from a corefx Windows x86 checked jitstressregs1 run of System.Runtime.Loader.Tests)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/12981/comments",
    "author": "BruceForstall",
    "comments": [
      {
        "user": "BruceForstall",
        "created_at": "2019-08-05T17:47:10Z",
        "body": "This is presumably because coreclr PDB files need to be in the same location as the coreclr binaries during a test run, or else the CLR can't find the symbols when it hits an assert.\r\n\r\nPerhaps it is possible for the symbols to live elsewhere as long as an environment variable like `_NT_SYMBOL_PATH` is set.\r\n\r\nIt might also be useful to set that (or whatever variable is required) to allow the symbol finder to use symbol server symbols."
      },
      {
        "user": "jashook",
        "created_at": "2019-08-26T18:16:16Z",
        "body": "@echesakovMSFT are you still working on this?"
      },
      {
        "user": "echesakov",
        "created_at": "2019-08-26T18:45:21Z",
        "body": "@jashook Not right now. Feel free to un-assign "
      }
    ]
  },
  {
    "number": 29610,
    "title": "Parsing invalid Enum value throwing NRE instead of corresponding JsonReaderException",
    "created_at": "2019-05-20T16:49:22Z",
    "closed_at": "2020-02-01T02:21:11Z",
    "labels": [
      "bug",
      "area-System.Text.Json",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29610",
    "body": "Parsing invalid Enum value throwing NRE, i am not sure what exception it should throw but pretty sure  NRE is not expected\r\n```csharp\r\n    [Flags]\r\n    public enum StoreColor\r\n    {\r\n        Black = 1,\r\n        Red = 2,\r\n        Yellow = 4,\r\n        White = 8,\r\n        DarkGoldenrod = 16\r\n    }\r\n    [Fact]\r\n    public static void InvalidValueNegativeStringNumber()\r\n    {\r\n        JsonReaderException ex = Assert.Throws<JsonReaderException>(() =>\r\n        {\r\n            JsonSerializer.Parse<StoreColor>(\"\\\"-1\\\"\");\r\n        });\r\n\r\n        Assert.Equal(\"Error message\", ex.Message);\r\n    }\r\n\r\n    [Fact]\r\n    public static void InvalidValueDash()\r\n    {\r\n        JsonReaderException ex = Assert.Throws<JsonReaderException>(() =>\r\n        {\r\n            JsonSerializer.Parse<StoreColor>(\"\\\"-\\\"\");\r\n        });\r\n\r\n        Assert.Equal(\"Error message.\", ex.Message);\r\n    }\r\n\r\n<message>\r\n<![CDATA[\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n]]>\r\n</message>\r\n<stack-trace>\r\n<![CDATA[\r\nat System.Text.Json.Serialization.Tests.EnumTests.InvalidValueDash() in D:\\dotnet\\corefx\\src\\System.Text.Json\\tests\\Serialization\\EnumTests.cs:line 516\r\n]]>\r\n</stack-trace>\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29610/comments",
    "author": "buyaa-n",
    "comments": [
      {
        "user": "Cybrosys",
        "created_at": "2019-05-20T19:56:33Z",
        "body": "Just some input based on the above tests.\r\n\r\nSeeing as the above enum doesn't specify a underlying data type, I do believe signed int will be used, which means the first test isn't correct because it is valid to cast -1 to StoreColor.\r\n\r\nI tested the above using Newtonsoft Json and it was able to parse the negative string value to the StoreColor enum with the underlying value set to -1. It works because Newtonsoft Json supports serializing strings to primitives. If the same isn't supported here then I guess both tests should fail trying to parse a string to primitive. \r\n\r\nThe second test however will fail because it can't convert \"-\" (dash) to a number.\r\n\r\nThe first test will fail if the underlying type of the enum is explicitly specified to be byte or another unsigned data type."
      },
      {
        "user": "buyaa-n",
        "created_at": "2019-05-20T20:20:19Z",
        "body": "@Cybrosys yes they are invalid values my point was it shouldn't throw NRE "
      },
      {
        "user": "watfordgnf",
        "created_at": "2019-05-21T12:39:23Z",
        "body": "Is this problem actually with the test case? Which line is 516 in your example?\r\n\r\n`JsonReaderException` is internal to `System.Text.Json` and would not be caught by a user, so the test should use `JsonException`.\r\n\r\nThe following works:\r\n```csharp\r\n        [Fact]\r\n        public static void ReadEnumFail()\r\n        {\r\n            Assert.Throws<JsonException>(() => JsonSerializer.Parse<JsonTokenType>(@\"\"\"-1\"\"\"));\r\n            Assert.Throws<JsonException>(() => JsonSerializer.Parse<JsonTokenType>(@\"\"\"-\"\"\"));\r\n        }\r\n```\r\nAttempting to change this to:\r\n```csharp\r\n        [Fact]\r\n        public static void ReadEnumFail()\r\n        {\r\n            Assert.Throws<JsonReaderException>(() => JsonSerializer.Parse<JsonTokenType>(@\"\"\"-1\"\"\"));\r\n            Assert.Throws<JsonReaderException>(() => JsonSerializer.Parse<JsonTokenType>(@\"\"\"-\"\"\"));\r\n        }\r\n```\r\nHas Visual Studio suggest I add the following using:\r\n```csharp\r\nusing Newtonsoft.Json;\r\n```"
      },
      {
        "user": "buyaa-n",
        "created_at": "2019-05-21T17:26:38Z",
        "body": "@watfordgnf thank you for looking into it, the error line number was produced from long test file run, not only these tests, that's why line number is 516.\r\nJFYI `JsonReaderException  `is public to `System.Text.Json` and we do not need to use `JsonException` exception from Newtonsoft\r\n\r\nAnyways seems this issue is fixed as the above tests now running successfully, closing this issue"
      }
    ]
  },
  {
    "number": 29490,
    "title": "[System.Text.Json] Deserializing object without parameterless ctor results in null-ref",
    "created_at": "2019-05-09T05:51:57Z",
    "closed_at": "2020-02-01T02:09:06Z",
    "labels": [
      "enhancement",
      "area-System.Text.Json",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/29490",
    "body": "I'm not sure if there are plans to support objects without parameterless ctors. However, attempting to deserialize an object without one results in a null ref rather than a meaningful error:\r\n\r\n```C#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var instance = new NoParameterlessCtor(10);\r\n        var json = JsonSerializer.ToString(instance);\r\n\r\n        Console.WriteLine(JsonSerializer.Parse<NoParameterlessCtor>(json));\r\n    }\r\n}\r\n\r\nclass NoParameterlessCtor\r\n{\r\n    public NoParameterlessCtor(int id)\r\n    {\r\n        Id = id;\r\n    }\r\n\r\n    public int Id { get; set; }\r\n}\r\n```\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleStartObject(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/29490/comments",
    "author": "pranavkm",
    "comments": [
      {
        "user": "ahsonkhan",
        "created_at": "2019-05-09T12:30:14Z",
        "body": "I don't think custom ctors is supported atm. cc @steveharter "
      },
      {
        "user": "pranavkm",
        "created_at": "2019-05-09T13:28:22Z",
        "body": "@ahsonkhan could we improve the error message for the current release? Seeing a null ref doesn't help the user understand that the scenario isn't supported."
      },
      {
        "user": "ahsonkhan",
        "created_at": "2019-05-09T13:51:11Z",
        "body": "> could we improve the error message for the current release\r\n\r\nAgreed. I am sure we can improve the error messaging for non-supported scenarios, overall. I'll let @steveharter chime-in regarding that."
      },
      {
        "user": "vcsjones",
        "created_at": "2019-05-09T14:17:12Z",
        "body": "Wrote dotnet/corefx#37545 to track improving error messaging."
      }
    ]
  },
  {
    "number": 12364,
    "title": "runtest.py doesn't handle both ambient and test_env COMPlus variables",
    "created_at": "2019-03-28T20:08:15Z",
    "closed_at": "2022-08-24T22:07:57Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/12364",
    "body": "runtest.py will read the ambient set of `COMPlus` variables and unset them in the environment. If it is passed the `-test_env` switch, it will use that specified test environment script when invoking tests, by setting the `__TestEnv` variable to that. However, if runtest.py is not passed the `-test_env` switch, it will create a new test environment setting file, and use that for `__TestEnv`.\r\n\r\nNote that if there are ambient `COMPlus` variables *and* a `-test_env` switch, the ambient ones will get lost: runtest.py will clear them, but will not \"add them\" to an environment script to pass on to the tests via the `__TestEnv` setting.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/12364/comments",
    "author": "BruceForstall",
    "comments": [
      {
        "user": "BruceForstall",
        "created_at": "2019-03-28T20:08:24Z",
        "body": "@jashook "
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-08-24T22:07:57Z",
        "body": "The `runtest.py` script no longer exists."
      }
    ]
  },
  {
    "number": 28589,
    "title": "SR.Format with format provider",
    "created_at": "2019-01-31T20:18:57Z",
    "closed_at": "2020-02-01T00:47:21Z",
    "labels": [
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/28589",
    "body": "_From @stephentoub on January 2, 2019 19:36_\n\nWe use SR.Format to format resource strings.  But there are a bunch of places where the formatting is done with a specific format provider, e.g. CultureInfo.InvariantCulture, and such places currently use string.Format because there is no SR.Format overload today that takes a format provider.\r\n\r\nI suggest we should either add such overloads and switch all formatting of resource strings over to use SR.Format, or we should drop SR.Format and just use string.Format everywhere.\r\n\r\nThis applies to both coreclr and corefx.\r\n\r\ncc: @tarekgh, @krwq \n\n_Copied from original issue: dotnet/coreclr#21762_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/28589/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2019-01-31T20:18:58Z",
        "body": "_From @tarekgh on January 2, 2019 19:47_\n\n> I suggest we should either add such overloads and switch all formatting of resource strings over to use SR.Format, or we should drop SR.Format and just use string.Format everywhere.\r\n\r\nI recall we had some logic inside SR.Format for .Net Native when we decide to drop the resources (and use the resource keys only) for the size sake. so we should be careful if we decide to drop SR.Format to ensure we'll not broke anything. I would say adding the overload taking the provider would be better."
      },
      {
        "user": "tarekgh",
        "created_at": "2019-01-31T20:22:23Z",
        "body": "@danmosemsft SR is internal thing and we are not exposing it. I don't this this issue need to be marked as api-need-work"
      },
      {
        "user": "danmoseley",
        "created_at": "2019-01-31T20:23:30Z",
        "body": "Yep."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-11T17:00:19Z",
        "body": "This has been fixed."
      }
    ]
  },
  {
    "number": 11624,
    "title": "Windows arm64 build instructions",
    "created_at": "2018-12-06T18:25:32Z",
    "closed_at": "2021-06-11T19:31:04Z",
    "labels": [
      "documentation",
      "arch-arm64",
      "good first issue",
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11624",
    "body": "It would be nice to update Documentation/building/windows-instructions.md to include arm64 build instructions (prerequisites)\r\n\r\n@BruceForstall mentioned a few prerequisites in dotnet/coreclr#18817",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11624/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "tannergooding",
        "created_at": "2019-04-01T17:49:14Z",
        "body": "This would definitely be beneficial.\r\n\r\nI picked up a Windows 10 on ARM device and would like to be able to build and test CoreCLR locally.\r\n\r\nI had initially tried to just use the x86 emulation layer and it mostly works. That is, you can install Visual Studio 2019, CMake, Python, etc and build things locally, but there seem to be a few minor pain points.\r\n* Initializing Build Tools currently fails if your host processor is ARM64 as they think it isn't required. Removing the checks from `init-buildtools.cmd` allows this to work\r\n* Crossgen currently fails as it tries to use the x64 Crossgen, but the emulation layer only supports 32-bit\r\n\r\nIdeally, building using the x86 emulation layer would \"just work\" and more ideally, we would remove dependencies on the x86 emulation layer where possible.\r\n\r\nIt would also be nice if we could have nightlies available on `dotnet/core-sdk` so that way changes can be tested without needing to compile locally."
      }
    ]
  },
  {
    "number": 27848,
    "title": "Investigate potential optimizations for consuming escaped strings within Utf8JsonReader",
    "created_at": "2018-11-08T00:47:48Z",
    "closed_at": "2021-11-05T01:04:18Z",
    "labels": [
      "enhancement",
      "area-System.Text.Json",
      "tenet-performance",
      "help wanted",
      "no-recent-activity"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27848",
    "body": "Currently, we search for the end of quote iteratively (non-vectorized) if we observe a back slash somewhere in the string token. For the common case of **valid JSON** that happens to contain some escaped characters (probably large string tokens), we should see if a vectorized search till next backslash or end quote provides performance benefits.\r\n\r\n**Today:**\r\n- Search for quote, backslash, or invalid character (vectorized).\r\n- If we find something and it happens to be a quote, we have reached end of string, no validation or escaping necessary.\r\n- Else, start reading byte-by-byte from the found character and validate in place. <= Maybe this can be vectorized as well for valid JSON (i.e. no control characters and only limited \"escapable\" characters).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27848/comments",
    "author": "ahsonkhan",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2021-11-05T01:04:18Z",
        "body": "This issue will now be closed since it had been marked `no recent activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days."
      }
    ]
  },
  {
    "number": 11074,
    "title": "Remove DllImport EXE test",
    "created_at": "2018-09-12T17:24:58Z",
    "closed_at": "2020-01-31T05:05:28Z",
    "labels": [
      "test-bug",
      "help wanted",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/11074",
    "body": "Loading an `exe` as a library results in undefined behavior and should not be attempted. It is not a supported scenario in Windows.\r\n\r\nThe test should be removed: `tests\\src\\Interop\\DllImportAttribute\\ExeFile\\CMakeLists.txt`",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/11074/comments",
    "author": "AaronRobinsonMSFT",
    "comments": [
      {
        "user": "luqunl",
        "created_at": "2018-09-13T17:43:21Z",
        "body": "Please Don't remove. This can be Windows Only testcase. "
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2018-09-13T18:02:59Z",
        "body": "This isn't supported by Windows, but since we had a customer issue about a regression I will leave it."
      }
    ]
  },
  {
    "number": 27271,
    "title": "ReadOnlySequence<>.Slice(SequencePosition, SequencePosition) docs incorrect",
    "created_at": "2018-08-29T19:39:48Z",
    "closed_at": "2020-01-31T22:52:14Z",
    "labels": [
      "documentation",
      "area-System.Memory",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27271",
    "body": "```c#\r\n/// <summary>\r\n/// Forms a slice out of the given <see cref=\"ReadOnlySequence{T}\"/>, beginning at <paramref name=\"start\"/>, ending at <paramref name=\"end\"/> (inclusive).\r\n/// </summary>\r\n/// <param name=\"start\">The starting (inclusive) <see cref=\"SequencePosition\"/> at which to begin this slice.</param>\r\n/// <param name=\"end\">The ending (inclusive) <see cref=\"SequencePosition\"/> of the slice</param>\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic ReadOnlySequence<T> Slice(SequencePosition start, SequencePosition end)\r\n```\r\n\r\nThe documentation here indicates the end sequence position is inclusive.  This does not appear to be the case.\r\n\r\nConsider:\r\n```c#\r\nvar readResult = await reader.ReadAsync(cancellationToken);\r\nvar buffer = readResult.Buffer;\r\nvar eolPosition = buffer.PositionOf((byte)'\\n');\r\nvar line = buffer.Slice(buffer.Start, eolPosition.Value);\r\nreader.AdvanceTo(buffer.GetPosition(1, eolPosition));\r\n```\r\n\r\nIn my test case, buffer[20] is the '\\n' character.  eolPosition has a value of 20, as expected.  line.Length has a value of 20, consistent with an *exclusive* end position, verified by examining the contents of line.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27271/comments",
    "author": "ChronosWS",
    "comments": [
      {
        "user": "ahsonkhan",
        "created_at": "2018-08-30T02:32:49Z",
        "body": "cc @pakrym "
      },
      {
        "user": "davidfowl",
        "created_at": "2018-10-19T05:30:57Z",
        "body": "Moving to 3.0"
      }
    ]
  },
  {
    "number": 10984,
    "title": "Fix JitDump label output to be multi-thread safe",
    "created_at": "2018-08-27T20:28:00Z",
    "closed_at": "2020-02-27T17:19:24Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10984",
    "body": "We emit labels using a global static `Compiler::s_compMethodsCount`, e.g.:\r\n```\r\nprintf(\"G_M%03u_IG%02u\", Compiler::s_compMethodsCount, id->idAddr()->iiaIGlabel->igNum);\r\n```\r\n\r\nThat’s dangerous if two JITs are running at the same time, and generating JitDumps. We should change to using a Compiler member, and then change:\r\n```\r\n#ifdef DEBUG\r\n    /* Give the function a unique number */\r\n\r\n    if (opts.disAsm || opts.dspEmit || verbose)\r\n    {\r\n        s_compMethodsCount = ~info.compMethodHash() & 0xffff;\r\n    }\r\n    else\r\n    {\r\n        s_compMethodsCount++;\r\n    }\r\n#endif\r\n```\r\nTo:\r\n```\r\n#ifdef DEBUG\r\n    /* Give the function a unique number */\r\n\r\n    if (opts.disAsm || opts.dspEmit || verbose)\r\n    {\r\n        compMethodNumber = ~info.compMethodHash() & 0xffff;\r\n    }\r\n    else\r\n    {\r\n        compMethodNumber = s_compMethodsCount;\r\n        s_compMethodsCount++;\r\n    }\r\n#endif\r\n```\r\nAnd the calls to:\r\n```\r\nprintf(\"G_M%03u_IG%02u\", compMethodNumber, id->idAddr()->iiaIGlabel->igNum);\r\n```\r\n\r\nSome places we access `s_compMethodsCount` currently might not have a `Compiler` pointer, so it might be a little more work than this.\r\n\r\ncategory:implementation\r\ntheme:debug-dumps\r\nskill-level:beginner\r\ncost:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10984/comments",
    "author": "BruceForstall",
    "comments": [
      {
        "user": "echesakov",
        "created_at": "2018-08-27T20:37:50Z",
        "body": "@BruceForstall Shouldn't the else part be interlocked ?\r\n```\r\ncompMethodNumber = InterlockedAdd(&s_compMethodsCount, 1);\r\ncompMethodNumber--;\r\n```"
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-08-27T20:47:58Z",
        "body": "Yes, it could be interlocked."
      }
    ]
  },
  {
    "number": 10966,
    "title": "Unify the Interop xplatform.h file with the common coreclr test platformdefines.h ",
    "created_at": "2018-08-24T18:23:20Z",
    "closed_at": "2020-01-31T04:58:12Z",
    "labels": [
      "test-enhancement",
      "help wanted",
      "area-Interop-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10966",
    "body": "@luqunl \r\n\r\nSee dotnet/coreclr#19576",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10966/comments",
    "author": "AaronRobinsonMSFT",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2018-11-29T20:02:47Z",
        "body": "@jkoritzinsky Is there anything else we should do here?"
      },
      {
        "user": "jkoritzinsky",
        "created_at": "2018-11-29T23:16:58Z",
        "body": "Unless we want to merge the two headers (which I would be ok with doing) I think we're all good here."
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2018-11-29T23:56:13Z",
        "body": "@jkoritzinsky I think merging them is a good idea if possible. Any features that have relevance only for Interop should be in the local header - so it should be very small."
      }
    ]
  },
  {
    "number": 10814,
    "title": "SSE2 HWIntrinsics tests should be moved to use the code templates",
    "created_at": "2018-08-02T14:21:52Z",
    "closed_at": "2020-01-31T04:47:10Z",
    "labels": [
      "test-enhancement",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10814",
    "body": "Currently the majority of the SSE2 HWIntrinsic tests are hand written which leads to maintainability issues and gaps in coverage as compared to the other HWIntrinsic tests (templates have been updated a few times, in order to fix bugs, or add new scenarios, which impacts the vast majority of other HWIntrinsic tests).\r\n\r\nIt would be beneficial to move them to the same code generation templates as the other HWIntrinsic tests. Additionally, if the SSE2 tests were covering relevant code patterns not covered by the existing templates, it should be reviewed whether or not adding those scenarios to the templates would be generally beneficial.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10814/comments",
    "author": "tannergooding",
    "comments": [
      {
        "user": "tannergooding",
        "created_at": "2018-08-02T14:22:05Z",
        "body": "CC. @fiigii, @CarolEidt, @eerhardt "
      },
      {
        "user": "tannergooding",
        "created_at": "2018-08-02T14:23:20Z",
        "body": "@4creators, I believe it was mentioned before that you were planning on doing this? Is this something you are actively working on, and if so, do you have an ETA of when a \"clean port\" could be completed?\r\n\r\nIf you are not actively working on it, I would like to ensure that this is handed off internally (likely going to be me picking it up) to ensure that it gets resolved."
      },
      {
        "user": "4creators",
        "created_at": "2018-08-02T14:59:11Z",
        "body": "@tannergooding Yes, I am working on it, but slow progress is due to my other obligations. I do expect to finish the work in 2 - max 3 weeks time frame. If thts OK pls assign it to me."
      },
      {
        "user": "RussKeldorph",
        "created_at": "2019-01-24T18:15:52Z",
        "body": "@tannergooding Can we close this in favor of dotnet/coreclr#19246?  If we need to break out individual test groups, we could use a checklist in that issue."
      },
      {
        "user": "tannergooding",
        "created_at": "2019-01-24T18:31:04Z",
        "body": "Yes, that should be fine. At this point, the `SSE2` tests are the bulk of what remains, in any case."
      }
    ]
  },
  {
    "number": 27014,
    "title": "Prep key enums for binary serialization",
    "created_at": "2018-07-30T15:47:07Z",
    "closed_at": "2020-01-31T22:29:29Z",
    "labels": [
      "area-System.Drawing",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/27014",
    "body": "Broken out from dotnet/runtime#26408\r\n\r\n- [x] System.Drawing.Color\r\n- [x] System.Drawing.ContentAlignment\r\n- [x] System.Drawing.Drawing2D.LinearGradientMode (low usage, but it's trival to add the attribute)\r\n- [x] System.Drawing.FontStyle\r\n- [x] System.Drawing.GraphicsUnit (for Font)\r\n- [x] System.Drawing.KnownColor\r\n- [x] System.CodeDom.MemberAttributes (Not part of Drawing, but seen heavily in data so presumably designer written, and only enum)\r\n- [ ] ~~System.DayOfWeek (low usage)~~\r\n\r\nIn each case, simply add `[System.Runtime.CompilerServices.TypeForwardedFrom(\"System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\")]` (with whatever the correct assembly was in .NET Framework)\r\n\r\nA test in BinaryFormatterTestData.cs would be nice to check we got the TFF correct, although I don't see other enums tested directly there.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/27014/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "Wraith2",
        "created_at": "2018-08-01T10:48:13Z",
        "body": "> A test in BinaryFormatterTestData.cs would be nice to check we got the TFF correct, although I don't see other enums tested directly there.\r\n\r\nI can't find any tests which do this, how would this be accomplished?"
      }
    ]
  },
  {
    "number": 26962,
    "title": "ECDsaCng.HashAlgorithm defaults to SHA256 on netfx, null on corefx",
    "created_at": "2018-07-25T23:10:13Z",
    "closed_at": "2020-01-31T22:25:22Z",
    "labels": [
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26962",
    "body": "Looks like ECDiffieHellmanCng got it right.\r\n\r\nBoth classes could use a test for verifying the default (if ECDiffieHellmanCng doesn't already have one).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26962/comments",
    "author": "bartonjs",
    "comments": [
      {
        "user": "davidkaya",
        "created_at": "2018-07-28T23:38:02Z",
        "body": "@bartonjs I'd take this one if it is possible."
      },
      {
        "user": "bartonjs",
        "created_at": "2018-07-29T05:16:20Z",
        "body": "@davidkaya Go for it.  I can't seem to assign it to you, so I've assigned it to me."
      },
      {
        "user": "davidkaya",
        "created_at": "2018-07-29T09:17:14Z",
        "body": "@bartonjs I've created a PR."
      }
    ]
  },
  {
    "number": 10742,
    "title": "JIT can generate redundant TEST operations",
    "created_at": "2018-07-21T18:40:15Z",
    "closed_at": "2020-07-14T20:49:55Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area-CodeGen-coreclr",
      "optimization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10742",
    "body": "The following C# code generates assembly which has what I understand to be a redundant `test` instruction:\r\n```cs\r\nprivate static int PopulatedByte(uint bytes, uint delimMask)\r\n{\r\n\tvar checkDelim = bytes ^ delimMask; //zero out matches, all others non-zero\r\n\tuint onlyDelimHasSign = Bmi1.AndNot( /*notted*/ checkDelim, checkDelim - INDEXOF_BYTEMULT32) & 0x80808080u;\r\n\treturn onlyDelimHasSign == 0 ? -1 : ByteIndexThatIsntZero(onlyDelimHasSign);\r\n}\r\n\r\nprivate static int ByteIndexThatIsntZero(uint value)\r\n{\r\n\treturn (int)(Bmi1.TrailingZeroCount(value) >> 3);\r\n}\r\n```\r\n\r\n\r\n```asm\r\n\txor     r9d,0A0A0A0Ah\r\n\tlea     r10d,[r9-1010101h]\r\n\tandn    r9d,r9d,r10d\r\n\tand     r9d,80808080h\r\n\ttest    r9d,r9d   ;not needed because  flags have already been set by preceding and\r\n\tje      M04_L07\r\n\ttzcnt   r9d,r9d\r\n\tshr     r9d,3\r\n\tjmp     M04_L08\r\nM04_L07\r\n\tmov     r9d,0FFFFFFFFh\r\nM04_L08\r\n```\r\n\r\ncategory:cq\r\ntheme:optimization\r\nskill-level:beginner\r\ncost:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10742/comments",
    "author": "Zhentar",
    "comments": [
      {
        "user": "saucecontrol",
        "created_at": "2020-01-16T19:12:54Z",
        "body": "Another example here in a simple zero-terminated loop:\r\n\r\n```C#\r\npublic void M(int i) {\r\n    for (; i != 0; i--)\r\n        Console.WriteLine(\"foo\");\r\n}\r\n```\r\n\r\nCurrent asm looks like:\r\n\r\n```asm\r\nC.M(Int32)\r\n    L0000: push rsi\r\n    L0001: sub rsp, 0x20\r\n    L0005: mov esi, edx\r\n    L0007: test esi, esi\r\n    L0009: jz L0023\r\n    L000b: mov rcx, 0x1389b488b28\r\n    L0015: mov rcx, [rcx]\r\n    L0018: call System.Console.WriteLine(System.String)\r\n    L001d: dec esi\r\n    L001f: test esi, esi  <-- ???\r\n    L0021: jnz L000b\r\n    L0023: add rsp, 0x20\r\n    L0027: pop rsi\r\n    L0028: ret\r\n```\r\n"
      }
    ]
  },
  {
    "number": 26541,
    "title": "Crypto interop needs to be consolidated under src\\Common\\src\\Interop\\",
    "created_at": "2018-06-19T15:37:02Z",
    "closed_at": "2022-07-06T21:26:12Z",
    "labels": [
      "enhancement",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26541",
    "body": "There is duplication we really want to avoid.  For example, CertNameToStr is used by both System.Security.Cryptography.X509Certificates and by System.Security.Cryptography.Pkcs, and they both contain their own copies of DllImports and higher-level helpers on top of them.\r\n\r\ncc: @bartonjs ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26541/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "adamgauthier",
        "created_at": "2018-07-24T02:37:55Z",
        "body": "@stephentoub Hey, I'd like to start progress on this, seems like a good start for contributing 😄 I saw there was quite a lot of work to do, I was thinking I could split it in small PRs with each 1 to a few interop methods consolidated. It would reduce the scope, lead to faster progress and make it easier to review. Would that make sense or do you want 1 PR to do all of it? "
      },
      {
        "user": "bartonjs",
        "created_at": "2018-07-24T06:27:48Z",
        "body": "@louisto Piecemeal is perfectly fine :smile:."
      },
      {
        "user": "louisto",
        "created_at": "2018-07-24T13:36:38Z",
        "body": "@louistio 👍 "
      },
      {
        "user": "bartonjs",
        "created_at": "2018-07-24T13:44:13Z",
        "body": "::hangs his head in shame::"
      },
      {
        "user": "bartonjs",
        "created_at": "2022-07-06T21:26:12Z",
        "body": "A current scan for `LibraryImport` or `DllImport` in the cryptography projects shows nothing outside of src\\Common\\src\\Interop (for product code, tests have a couple)"
      }
    ]
  },
  {
    "number": 26536,
    "title": "Override TextWriter.Write{Line}{Async} on StringWriter",
    "created_at": "2018-06-18T23:53:22Z",
    "closed_at": "2020-01-31T21:49:19Z",
    "labels": [
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26536",
    "body": "StringWriter is backed by a StringBuilder, so writing another StringBuilder to it can be optimized to call `_sb.Append(value)`.\r\n\r\ncc: @vancem",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26536/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "MarcoRossignoli",
        "created_at": "2018-06-26T07:35:10Z",
        "body": "Can i grab this?"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-06-26T13:57:16Z",
        "body": "Sure, thanks :)"
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2018-06-26T14:17:18Z",
        "body": "@stephentoub do we need some perf comparison?"
      },
      {
        "user": "stephentoub",
        "created_at": "2018-06-26T14:20:52Z",
        "body": "> do we need some perf comparison?\r\n\r\nIt would be useful to validate the work, but it's highly unlikely this would degrade perf, so while it'd be good to do, you don't need to exert a lot of effort on it."
      }
    ]
  },
  {
    "number": 26302,
    "title": "Bring back System.Reflection.ICustomTypeProvider",
    "created_at": "2018-05-29T15:49:49Z",
    "closed_at": "2020-01-31T21:29:10Z",
    "labels": [
      "enhancement",
      "area-System.Reflection",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/26302",
    "body": "This was previously in System and used by WPF to help binding to things that can only be known at runtime.\r\n\r\nWe need to bring it back in an appropriate home.  System.Reflection.Primitives?  System.ObjectModel (where other glue-like Attributes/interfaces live).\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/26302/comments",
    "author": "ericstj",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-06-27T20:51:13Z",
        "body": "@AtsushiKan is it possible for you to take this one?"
      },
      {
        "user": "ghost",
        "created_at": "2018-06-27T20:55:38Z",
        "body": "Just an interface? Think I can manage that...\r\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-06-27T21:46:12Z",
        "body": "Hah - I didn't notice it was so trivial."
      },
      {
        "user": "ericstj",
        "created_at": "2018-06-27T23:12:57Z",
        "body": "Yep, just needs a \"home\" somewhere in corefx since we are the owners of system.dll shim."
      }
    ]
  },
  {
    "number": 10285,
    "title": "Unify remaining diverged globalization types in corelib",
    "created_at": "2018-05-07T02:42:05Z",
    "closed_at": "2020-01-31T04:09:45Z",
    "labels": [
      "enhancement",
      "area-System.Globalization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/10285",
    "body": "We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.  See dotnet/runtime#7394\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files related to globalizations whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\system\\globalization\\calendardata.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\charunicodeinfodata.cs\r\n- [ ]  \t.\\system\\globalization\\compareinfo.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\culturedata.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.unix.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.windows.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.unix.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.windows.cs\r\n- [ ]  \t.\\system\\globalization\\hijricalendar.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\idnmapping.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\japanesecalendar.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\normalization.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\textinfo.dummy.cs\r\n- [ ]  \t.\\system\\text\\codepagedataitem.cs\r\n- [ ]  \t.\\system\\text\\encodingdata.cs\r\n- [ ]  \t.\\system\\text\\encodingtable.cs\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/10285/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "ANahr",
        "created_at": "2019-01-04T14:32:15Z",
        "body": "This is likely already mostly done by\r\ndotnet/coreclr#21735\r\ndotnet/coreclr#20529\r\nothers\r\n\r\nAll that is left is:\r\n- [ ]  .\\system\\globalization\\globalizationmode.cs\r\n- [ ]  .\\system\\globalization\\globalizationmode.unix.cs\r\n- [ ]  .\\system\\globalization\\globalizationmode.windows.cs"
      }
    ]
  },
  {
    "number": 25944,
    "title": "De-duplicate resource ID's to make Mono merge easier",
    "created_at": "2018-04-19T23:12:13Z",
    "closed_at": "2020-01-31T20:58:33Z",
    "labels": [
      "area-Meta",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25944",
    "body": "When Mono pulls in CoreFX code they factor their assemblies like .NET Framework. This means .resx files from multiple libraries must get merged. When those libraries have resources with the same ID, and the string is not identical, this will not merge.\r\n\r\nBelow is a list I grepped out of all cases where we use a resource ID for multiple distinct string values. In some cases the difference is whitespace so it isn't visible. \r\n\r\n1. Where it's a trivial spacing/punctuation/quoting difference we should keep the ID and make the strings the same\r\n1. Where the string is clearly intended to be distinct, we should disambiguate the ID's and update the code to match.\r\n\r\nSome, like `InternalError`, could just be simplified (eg to just `Internal error.`) so they are no longer distinct.\r\n\r\n@marek-safar \r\n\r\nKey | Value\r\n-- | --\r\nADP_InvalidMultipartName | {0}   '{1}'.\r\nADP_InvalidMultipartName | {0}   \"{1}\".\r\nADP_InvalidMultipartNameQuoteUsage | {0} '{1}', incorrect usage of   quotes.\r\nADP_InvalidMultipartNameQuoteUsage | {0}   \"{1}\", incorrect usage of quotes.\r\nADP_InvalidMultipartNameToManyParts | {0} '{1}', the current limit of   '{2}' is insufficient.\r\nADP_InvalidMultipartNameToManyParts | {0}   \"{1}\", the current limit of \"{2}\" is insufficient.\r\nArg_ArrayPlusOffTooSmall | Array is not long enough. Check   array index and length.\r\nArg_ArrayPlusOffTooSmall | Destination   array is not long enough to copy all the items in the collection. Check array   index and length.\r\nArg_EnumIllegalVal | Illegal enum value: {0}.\r\nArg_EnumIllegalVal | Illegal   enum value: {0}\r\nArg_HTCapacityOverflow | Capacity overflowed and went   negative.\r\nArg_HTCapacityOverflow | Hashtable's   capacity overflowed and went negative. Check load factor, capacity and the   current size of the table.\r\nArg_InvalidSearchPattern | Arg_InvalidSearchPattern {0}\r\nArg_InvalidSearchPattern | Search   pattern cannot contain '..' to move up directories and can be contained only   internally in file/directory names, as in 'a..b'.\r\nArgument_AddingDuplicate | An entry with the same key   already exists.\r\nArgument_AddingDuplicate | An   item with the same key has already been added. Key: {0}\r\nArgument_InvalidHandle | handle' has been disposed or is   an invalid handle.\r\nArgument_InvalidHandle | Invalid   handle.\r\nArgument_InvalidPathChars | Argument_InvalidPathChars {0}\r\nArgument_InvalidPathChars | Illegal   characters in path '{0}'.\r\nArgument_InvalidValue | Argument {0} should be larger   than {1}.\r\nArgument_InvalidValue | Arguments   are not valid.\r\nArgument_InvalidValue | Value was invalid.\r\nArgumentOutOfRange_BiggerThanCollection | Larger   than collection size.\r\nArgumentOutOfRange_BiggerThanCollection | Must be less than or equal to   the size of the collection.\r\nArgumentOutOfRange_GenericPositive | Number   must be positive.\r\nArgumentOutOfRange_GenericPositive | Value must be positive.\r\nArgumentOutOfRange_Index | Index   was out of range.  Must be non-negative   and less than the size of the collection.\r\nArgumentOutOfRange_Index | Index was out of range. Must be   non-negative and less than the size of the collection.\r\nArgumentOutOfRange_NeedNonNegNum | Index   is less than zero.\r\nArgumentOutOfRange_NeedNonNegNum | Non negative number is required.\r\nArgumentOutOfRange_NeedNonNegNum | Non-negative   number required.\r\nArgumentOutOfRange_NeedValidPipeAccessRights | Invalid PipeAccessRights value.\r\nArgumentOutOfRange_NeedValidPipeAccessRights | Need   valid PipeAccessRights value.\r\nArrayTypeIsNotSupported | An internal error has occurred.   '{0}[]' is not supported when generating code for serialization.\r\nArrayTypeIsNotSupported | Array   of type {0} is not supported.\r\nCardinalityMismatch_TooManyExports | Only one export for the contract   '{0}' is allowed, multiple implementations were found.\r\nCardinalityMismatch_TooManyExports | More   than one export was found that matches the constraint: {0}\r\nCryptography_InvalidCurveOid | The specified Oid is not valid.   The Oid.FriendlyName or Oid.Value property must be set.\r\nCryptography_InvalidCurveOid | The   specified Oid is not valid. The Oid.FriendlyName property must be set, or be   determined from Oid.Value.\r\nIndexOutOfRange_IORaceCondition | Probable I/O race condition   detected while copying memory.  The I/O   package is not thread safe by default.    In multithreaded applications, a stream must be accessed in a thread-safe   way, such as a thread-safe wrapper returned by TextReader's or TextWriter's   Synchronized methods.  This also   applies to classes like StreamWriter and StreamReader.\r\nIndexOutOfRange_IORaceCondition | Probable   I/O race condition detected while copying memory. The I/O package is not   thread safe by default. In multithreaded applications, a stream must be   accessed in a thread-safe way, such as a thread-safe wrapper returned by   TextReader's or TextWriter's Synchronized methods. This also applies to   classes like StreamWriter and StreamReader.\r\nInternalError | Internal error in ScanRegex.\r\nInternalError | Internal   error in the Microsoft Visual Basic runtime.\r\nInternalError | Internal Error\r\nInvalidArgument | {1}'   is not a valid value for '{0}'.\r\nInvalidArgument | Value of '{1}' is not valid for   '{0}'.\r\nInvalidArgument | The   argument is invalid.\r\nInvalidOperation_EnumFailedVersion | Collection was modified after   the enumerator was instantiated.\r\nInvalidOperation_EnumFailedVersion | Collection   was modified; enumeration operation may not execute.\r\nInvalidOperation_EnumNotStarted | Enumeration has not   started.  Call MoveNext.\r\nInvalidOperation_EnumNotStarted | Enumeration   has not started. Call MoveNext.\r\nInvalidOperation_EnumOpCantHappen | Enumeration has either not   started or has already finished.\r\nInvalidOperation_EnumOpCantHappen | Enumerator   is positioned before the first element or after the last element of the   collection.\r\nInvalidOperation_PipeNotYetConnected | Pipe hasn't been connected yet.\r\nInvalidOperation_PipeNotYetConnected | Pipe   is not connected.\r\nInvalidParameter | Invalid value '{1}' for   parameter '{0}'.\r\nInvalidParameter | Invalid   value {1} for parameter {0}.\r\nInvalidPdbChecksumDataFormat | Invalid PDB Checksum data data   format.\r\nInvalidPdbChecksumDataFormat | Invalid   PDB Checksum data format.\r\nInvalidPrimitiveType | Invalid Primitive Type: {0}.   Consider using CodeObjectCreateExpression.\r\nInvalidPrimitiveType | Type   '{0}' is not a valid serializable type.\r\nInvalidToken | A token is not valid. Refer to   RFC 2616 for correct grammar of content types.\r\nInvalidToken | Invalid   token.\r\nIO_AlreadyExists_Name | Cannot create '{0}' because a   file or directory with the same name already exists.\r\nIO_AlreadyExists_Name | Cannot   create \\\"{0}\\\" because a file or directory with the same name   already exists.\r\nIO_FileExists_Name | The file '{0}' already exists.\r\nIO_FileNotFound | Unable   to find the specified file.\r\nIO_FileNotFound_FileName | Could not find file '{0}'.\r\nIO_OperationAborted | IO   operation was aborted unexpectedly.\r\nIO_OperationAborted | The I/O operation has been   aborted because of either a thread exit or an application request.\r\nIO_PathNotFound_NoPathName | Could   not find a part of the path.\r\nIO_PathNotFound_Path | Could not find a part of the   path '{0}'.\r\nIO_PathTooLong | The   specified file name or path is too long, or a component of the specified path   is too long.\r\nIO_PathTooLong | The specified port name is too   long.  The port name must be less than   260 characters.\r\nIO_PathTooLong_Path | The   path '{0}' is too long, or a component of the specified path is too long.\r\nIO_PathTooLong_Path | The specified port name '{0}' is   too long.  The port name must be less   than 260 characters.\r\nIO_SharingViolation_File | The   process cannot access the file '{0}' because it is being used by another   process.\r\nIO_SharingViolation_File | The process cannot access the   port '{0}' because it is being used by another process.\r\nIO_SharingViolation_NoFileName | The   process cannot access the file because it is being used by another process.\r\nIO_SharingViolation_NoFileName | The process cannot access the   port because it is being used by another process.\r\nMDF_UnsupportedVersion | requested collection ({0}) is not supported   by this version of the provider.\r\nMDF_UnsupportedVersion | The requested collection ({0})   is not supported by this version of the provider.\r\nnet_context_buffer_too_small | Insufficient   buffer space. Required: {0} Actual: {1}.\r\nnet_context_buffer_too_small | Insufficient buffer space.   Required: {0} Actual: {1}\r\nnet_gssapi_operation_failed | GSSAPI   operation failed with status: {0} (Minor status: {1}).\r\nnet_gssapi_operation_failed | GSSAPI operation failed with   status: {0} (Minor status: {1})\r\nnet_gssapi_operation_failed_detailed | Gss   api operation failed with error : {0} ({1}).\r\nnet_gssapi_operation_failed_detailed | GSSAPI operation failed with   error - {0} ({1}).\r\nnet_nego_not_supported_empty_target_with_defaultcreds | Target   name should be non empty if default credentials are passed.\r\nnet_nego_not_supported_empty_target_with_defaultcreds | Target name should be non-empty   if default credentials are passed.\r\nnet_nego_protection_level_not_supported | Requested   protection level is not supported with the GSSAPI implementation currently   installed.\r\nnet_nego_protection_level_not_supported | Requested protection level is   not supported with the gssapi implementation currently installed.\r\nnet_nego_server_not_supported | Server   implementation is not supported.\r\nnet_nego_server_not_supported | Server implementation is not   supported\r\nNoNegativeTime | A   negative value is not permitted for the replication interval.\r\nNoNegativeTime | A negative value is not   permitted for the time limit.\r\nNotSupported | Not   supported on this platform.\r\nNotSupported | This operation is not supported.\r\nObjectDisposed_StreamClosed | Can   not access a closed Stream.\r\nObjectDisposed_StreamClosed | Cannot access a closed Stream.\r\nSerialization_MissingKeys | The   keys for this dictionary are missing.\r\nSerialization_MissingKeys | The Keys for this Hashtable are   missing.\r\nSerialization_MissingValues | The   values for this dictionary are missing.\r\nSerialization_MissingValues | The Values for this Hashtable   are missing.\r\nSqlConvert_ConvertFailed | Cannot convert object of type '{0}' to   object of type '{1}'.\r\nSqlConvert_ConvertFailed | Cannot convert object of type   '{0}' to object of type '{1}'.\r\nSupportedPlatforms | System.DirectoryServices.Protocols   namespace is only supported on Windows 2000 and later operating systems.\r\nSupportedPlatforms | The   System.DirectoryServices.ActiveDirectory namespace is only supported on   computers running Windows 2000 and later operating systems.\r\nUnauthorizedAccess_IODenied_NoPathName | Access   to the path is denied.\r\nUnauthorizedAccess_IODenied_NoPathName | Access to the port is denied.\r\nUnauthorizedAccess_IODenied_NoPathName | UnauthorizedAccess_IODenied_NoPathName\r\nUnauthorizedAccess_IODenied_Path | Access to the path '{0}' is   denied.\r\nUnauthorizedAccess_IODenied_Path | Access   to the port '{0}' is denied.\r\nUnauthorizedAccess_IODenied_Path | UnauthorizedAccess_IODenied_Path   {0}\r\nUnknownConstantType | Internal   Error: Unrecognized constant type {0}.\r\nUnknownConstantType | Unrecognized constant type   '{0}'.\r\nXml_InvalidPrefix | Prefixes   beginning with \"xml\" (regardless of whether the characters are   uppercase, lowercase, or some combination thereof) are reserved for use by   XML.\r\nXml_InvalidPrefix | Prefix '{0}' is not valid,   because it contains special characters.\r\nXmlInvalidEncoding | Referenced   type '{0}' is only valid for encoded SOAP.\r\nXmlInvalidEncoding | XML encoding must be   'UTF-8'.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25944/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-04-19T23:12:21Z",
        "body": "@weshaggard "
      },
      {
        "user": "danmoseley",
        "created_at": "2018-04-19T23:15:45Z",
        "body": "There is of course far more string duplication than shown above. The other cases just use identical strings. Ideally .NET Core would somehow avoid shipping the same string in multiple assemblies. For example move commonly reused strings into System.Runtime.dll and share from there.\r\n\r\nThat's a separate issue."
      },
      {
        "user": "jkotas",
        "created_at": "2018-04-20T14:38:12Z",
        "body": "> Ideally .NET Core would somehow avoid shipping the same string in multiple assemblies\r\n\r\nYou can say that about most code under Common too. We are shipping duplicates of that code as well. I do not think it is something to fix. We have intentionally accepted small amount of duplication to make the implementation factoring clean (no InternalsVisibibleTo, etc.)."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-04-21T04:46:24Z",
        "body": "@MarcoRossignoli any interest? Not very exciting though.."
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2018-04-21T07:11:57Z",
        "body": "@danmosemsft i'm working on a pair of issue, after these if nobody grab this i'll work on it(if this is urgent i can suspend, let me know), not very exciting ok but i'm here to help...life’s not always a bowl of cherries(in Italy we say \"is not always sunday\"  :smile:). One question(useful to all), is there a style guide for double or single quotation marks for args?I prefer single."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-04-21T13:37:29Z",
        "body": "@MarcoRossignoli sounds good. I think single quotes..."
      },
      {
        "user": "MarcoRossignoli",
        "created_at": "2018-04-22T20:26:42Z",
        "body": "@danmosemsft assign this to me if you like, i'm in the middle of changes."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-04-22T21:58:49Z",
        "body": "Ideally We'd have a little python or powershell script that would generate this list. Such that after your change it would produce zero results. And we could occasionally rerun it."
      },
      {
        "user": "marek-safar",
        "created_at": "2018-04-25T13:01:12Z",
        "body": "/cc @EgorBo "
      },
      {
        "user": "EgorBo",
        "created_at": "2018-04-25T13:54:20Z",
        "body": "Also it'd be nice to use unique names for tests across the corefx solution :-)"
      }
    ]
  },
  {
    "number": 25663,
    "title": "System.Xml.Xsl.XslTransformApi.Tests UnauthorizedAccessException",
    "created_at": "2018-03-28T19:03:01Z",
    "closed_at": "2020-01-31T20:35:29Z",
    "labels": [
      "area-System.Xml",
      "os-linux",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25663",
    "body": "System.Xml.Xsl.XslTransformApi.Tests uses the hardcoded path `/tmp/XslTransformApi`\r\n\r\nAfter the test has been run in an account with different privilege, the test will fail with UnauthorizedAccessException.\r\n\r\nFor example see partial log below.\r\n```\r\nxUnit.net console test runner (64-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Xml.Xsl.XslTransformApi.Tests\r\nDiscovered:  System.Xml.Xsl.XslTransformApi.Tests\r\nStarting:    System.Xml.Xsl.XslTransformApi.Tests\r\n   System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Reader, docType: XPathDocument) [FAIL]\r\n      System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.\r\n      ---- System.IO.IOException : Permission denied\r\n      Stack Trace:\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n            at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)\r\n         /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)\r\n         ----- Inner Stack Trace -----\r\n         \r\n   System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Stream, docType: XPathDocument) [FAIL]\r\n      System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.\r\n      ---- System.IO.IOException : Permission denied\r\n      Stack Trace:\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n            at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)\r\n         /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)\r\n         ----- Inner Stack Trace -----\r\n         \r\n   System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Writer, docType: XPathDocument) [FAIL]\r\n      System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.\r\n      ---- System.IO.IOException : Permission denied\r\n      Stack Trace:\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n         /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n            at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)\r\n         /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)\r\n         ----- Inner Stack Trace -----\r\n         \r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25663/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-03-29T05:46:37Z",
        "body": "@Anipik same issue as dotnet/runtime#25662. However changing these crufty tests to derive from FileCleanupTestBase might be too much at the moment.\r\n\r\nI suggest just changing the lines below so where it's currently using GetTempPath() + some hard coded string, it instead uses `Path.Combine(Path.GetTempPath(), GetType().Name + \"_\" + Path.GetRandomFileName());` which is what FileCleanupTestBase does.\r\n\r\n```c#\r\nC:\\git\\OTHER_COREFX\\src\\System.Private.Xml\\tests\\Xslt\\XslCompiledTransformApi\\XslCompiledTransform.cs:\r\n  616:                 string tempPath = Path.GetTempPath();\r\n  617                  string testFile = Path.Combine(tempPath, \"xmlResolver_document_function.xml\");\r\n  ...\r\n 2529:                 string tempPath = Path.GetTempPath();\r\n 2530                  string testFile = Path.Combine(tempPath, \"xmlResolver_document_function.xml\");\r\n\r\nC:\\git\\OTHER_COREFX\\src\\System.Private.Xml\\tests\\Xslt\\XslCompiledTransformApi\\XsltApiV2.cs:\r\n   79:             string targetFile = Path.Combine(Path.GetTempPath(), \"xmlResolver_document_function.xml\");\r\n   \r\nsrc\\System.Private.Xml\\tests\\Xslt\\XslTransformApi\\XSLTransform.cs:\r\n   52:         private static readonly string s_temporaryResolverDocumentFullName = Path.Combine(Path.GetTempPath(), \"XslTransformApi\", XmlResolverDocumentName);\r\n```"
      }
    ]
  },
  {
    "number": 25662,
    "title": "System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory path issue",
    "created_at": "2018-03-28T18:40:19Z",
    "closed_at": "2020-01-31T20:35:26Z",
    "labels": [
      "area-System.Net",
      "os-linux",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25662",
    "body": "The failing test case below creates a directory in the /tmp filesystem with a hard coded name.  If the directory is owned by another user, the test will fails as shown in the log below.\r\n\r\n```\r\nxUnit.net console test runner (64-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Net.Mail.Functional.Tests\r\nDiscovered:  System.Net.Mail.Functional.Tests\r\nStarting:    System.Net.Mail.Functional.Tests\r\n   System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory [FAIL]\r\n      System.UnauthorizedAccessException : Access to the path '/tmp/System.Net.Mail.Tests.SmtpClientTest/865ed06b-19de-41fe-a054-3c7f23bbbb1b' is denied.\r\n      ---- System.IO.IOException : Permission denied\r\n      Stack Trace:\r\n            at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n            at System.IO.Directory.CreateDirectory(String path)\r\n         /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Net.Mail/tests/Functional/SmtpClientTest.cs(41,0): at System.Net.Mail.Tests.SmtpClientTest.get_TempFolder()\r\n         /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Net.Mail/tests/Functional/SmtpClientTest.cs(235,0): at System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory()\r\n         ----- Inner Stack Trace -----\r\n         \r\nFinished:    System.Net.Mail.Functional.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Mail.Functional.Tests  Total: 170, Errors: 0, Failed: 1, Skipped: 0, Time: 20.193s\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25662/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-03-29T05:40:02Z",
        "body": "@sdmaclea you mean you prevoiusly ran the test once as a different user, and that created and owned the folder?\r\n\r\nAnyway this test should use FileCleanupTestBase's TestDirectory.\r\n\r\n@Anipik could you please fix this? The line to change is `   _tempFolder = Path.Combine(Path.GetTempPath(), GetType().FullName, Guid.NewGuid().ToString());`"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-03-29T05:43:28Z",
        "body": "> you mean you prevoiusly ran the test once as a different user, and that created and owned the folder?\r\n\r\nYes I ran as myself, then when CI ran the test failed"
      }
    ]
  },
  {
    "number": 25578,
    "title": "Strange messages in System.Xml.Xsl.XslCompiledTransformApi.Tests log",
    "created_at": "2018-03-22T09:14:52Z",
    "closed_at": "2020-01-31T20:28:07Z",
    "labels": [
      "area-System.Xml",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25578",
    "body": "System.Xml.Xsl.XslCompiledTransformApi.Tests log contains next messages in log:\r\n```\r\n    Starting:    System.Xml.Xsl.XslCompiledTransformApi.Tests\r\n  Message dotnet/corefx#2\r\n  Message dotnet/corefx#4\r\n  <Message>Message dotnet/corefx#6</Message>\r\n  <Message>Message dotnet/corefx#8</Message>\r\n    Finished:    System.Xml.Xsl.XslCompiledTransformApi.Tests\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25578/comments",
    "author": "AlexRadch",
    "comments": [
      {
        "user": "krwq",
        "created_at": "2018-03-22T18:43:22Z",
        "body": "Yes, this is some legacy in the old xml test infa. There is likely some kind of Console.WriteLine or similar"
      }
    ]
  },
  {
    "number": 25264,
    "title": "Unhelpful error when Activator.CreateInstance can't find default constructor",
    "created_at": "2018-03-01T15:28:02Z",
    "closed_at": "2020-01-31T20:02:42Z",
    "labels": [
      "area-System.Reflection",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/25264",
    "body": "When `Activator.CreateInstance` tries to create an object without a default constructor, it fails with the unhelpful error `System.MissingMethodException: No parameterless constructor defined for this object.`\r\n\r\nIt would be much more helpful if this error message contained the actual type that was failing to be constructed - e.g. `System.MissingMethodException: No parameterless constructor defined for Namespace.NoParameterlessConstructor`\r\n\r\nThis is particularly useful when the code is trying to load types from some kind of configuration file, in which a stack trace alone may not allow you to identify what type it was trying to instantiate.\r\n\r\nRepo code:\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var x = Activator.CreateInstance(typeof(NoParameterlessConstructor));\r\n        }\r\n    }\r\n\r\n    class NoParameterlessConstructor\r\n    {\r\n        public NoParameterlessConstructor(object foo) { }\r\n    }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/25264/comments",
    "author": "afscrome",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2018-03-02T18:52:45Z",
        "body": "Possible up-for-grabs item. The fix isn't as easy as it sounds because the exception is thrown in unmanaged code. And catching the exception in managed code to add the type information isn't attractive either because the same FCall invokes the constructor and we don't want to catch exceptions if the `dontWrap` parameter is true (the whole idea behind that is you don't want to ruin the debugging experience inside the constructor.)\r\n\r\nOne possibility is for the FCall to return a fail/success indicator with enough error info to construct the exception on the managed side. Exceptions that occur inside the constructor call can just propagate up as it does now.\r\n\r\n\r\n"
      },
      {
        "user": "ViktorHofer",
        "created_at": "2018-03-21T23:39:10Z",
        "body": "I agree here, the error message should be refined but I don't see this a must for 2.1 as it is a minor improvement not necessary for the upcoming release. Maybe we could add the type information on the native side?"
      }
    ]
  },
  {
    "number": 9718,
    "title": "Build fails with weird errors if git is not on path",
    "created_at": "2018-02-13T15:31:21Z",
    "closed_at": "2020-01-31T03:30:41Z",
    "labels": [
      "bug",
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9718",
    "body": "Running the build.cmd script (on Windows) from VS development environment without having git on path fails the build in a really weird way which is hard to figure out.\r\nIf this happens the error reported is:\r\n```\r\nE:\\coreclr\\bin\\obj\\_version.h(19): error RC2001: newline in constant [E:\\coreclr\\bin\\obj\\Windows_NT.x86.Debug\\src\\tools\r\n\\crossgen\\crossgen.vcxproj]\r\n\r\n```\r\nLooking into this the _version.h has a line like this:\r\n```\r\n#define VER_PRODUCTVERSION_STR      \"4.6.26211.0 @BuiltBy: vitkaras-VITKARASD @Branch: 'git' is not recognized as an internal or external command,\r\noperable program or batch file.\"\r\n\r\n```\r\nIf the build really needs git (which in this case it could put some <unknown> string instead into the version), then it should fail up front with a clear error message. Currently it fails during compilation and keeps on trying to compile and so on.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9718/comments",
    "author": "vitek-karas",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2018-02-13T20:53:22Z",
        "body": "@wtgodbe maybe this was the issue you were hitting.."
      },
      {
        "user": "RussKeldorph",
        "created_at": "2018-03-15T18:15:34Z",
        "body": "This issue was moved to dotnet/buildtools#1959"
      }
    ]
  },
  {
    "number": 9557,
    "title": "Mismatching allocation and deallocation in VirtualAllocExNuma()",
    "created_at": "2018-01-15T15:51:06Z",
    "closed_at": "2020-01-31T03:18:54Z",
    "labels": [
      "help wanted",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9557",
    "body": "This was found with Cppcheck\r\n\r\npal/src/numa/muna.cpp has `VirtualAllocExNuma()` function that does this:\r\n\r\n    unsigned long *nodeMask = new unsigned long[nodeMaskLength];\r\n    //whatever, then\r\n    free(nodeMask);\r\n\r\nPairing `new[]` with `free()` yields undefined behavior. I guess `malloc()` with a null check should be used here - same as with other memory allocations in this translation unit.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9557/comments",
    "author": "Dmitry-Me",
    "comments": [
      {
        "user": "janvorli",
        "created_at": "2018-01-15T17:18:22Z",
        "body": "@Dmitry-Me Thank you very much for spotting that. I was originally using new / delete there and converted everything to malloc / free during the change cleanup and obviously missed that place."
      }
    ]
  },
  {
    "number": 24586,
    "title": "API Proposal: Arm64 Simd BitwiseSelect",
    "created_at": "2018-01-05T16:26:27Z",
    "closed_at": "2020-01-31T19:08:30Z",
    "labels": [
      "api-approved",
      "arch-arm64",
      "area-System.Runtime.Intrinsics",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24586",
    "body": "@eerhardt @CarolEidt @RussKeldorph \r\n\r\nTarget Framework netcoreapp2.1\r\n\r\n```C#\r\nnamespace System.Runtime.Intrinsics.Arm.Arm64\r\n{\r\n    /// <summary>\r\n    /// This class provides access to the Arm64 AdvSIMD intrinsics\r\n    ///\r\n    /// Arm64 CPUs indicate support for this feature by setting\r\n    /// ID_AA64PFR0_EL1.AdvSIMD == 0 or better.\r\n    /// </summary>\r\n    public static class Simd\r\n    {\r\n        public static bool IsSupported { get { throw null; } }\r\n\r\n        /// <summary>\r\n        /// Vector BitwiseSelect\r\n        /// For each bit in the vector result[bit] = sel[bit] ? left[bit] : right[bit]\r\n        /// Corresponds to vector forms of ARM64 BSL (Also BIF & BIT)\r\n        /// </summary>\r\n        public static Vector64<T>  BitwiseSelect<T>(Vector64<T>  sel, Vector64<T>  left, Vector64<T>  right) where T : struct { throw null; }\r\n        public static Vector128<T> BitwiseSelect<T>(Vector128<T> sel, Vector128<T> left, Vector128<T> right) where T : struct { throw null; }\r\n    }\r\n}\r\n```\r\n\r\n  ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24586/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "sdmaclea",
        "created_at": "2018-01-05T16:26:40Z",
        "body": "My current understanding is the difference between BSL, BIT, BIF is simply which of the 3 source registers is used as the destination register.  Therefore I am using the same intrinsic for all of them.  This may give more flexibility to the register allocator.\r\n  "
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-05T20:19:26Z",
        "body": "Updated to use generics"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-15T15:39:40Z",
        "body": "@CarolEidt @eerhardt I think this can be marked \"API-ready-for-review\""
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-02-05T16:31:21Z",
        "body": "@eerhardt Any reason why this is marked future? The CoreCLR work is complete and ready for 2.1."
      },
      {
        "user": "terrajobst",
        "created_at": "2018-09-05T02:53:11Z",
        "body": "Looks good as proposed. Feedback:\r\n\r\n* The parameter should be spelled out \"select\", or whatever the spec calls it.\r\n* If we expand the generics, the first argument should be an `int`-based type"
      }
    ]
  },
  {
    "number": 24585,
    "title": "API Proposal: Arm64 Simd simple comparison ops",
    "created_at": "2018-01-05T16:15:22Z",
    "closed_at": "2020-01-31T19:08:26Z",
    "labels": [
      "api-approved",
      "arch-arm64",
      "area-System.Runtime.Intrinsics",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24585",
    "body": "@eerhardt @CarolEidt @RussKeldorph \r\n\r\nTarget Framework netcoreapp2.1\r\n\r\n```C#\r\nnamespace System.Runtime.Intrinsics.Arm.Arm64\r\n{\r\n    /// <summary>\r\n    /// This class provides access to the Arm64 AdvSIMD intrinsics\r\n    ///\r\n    /// Arm64 CPUs indicate support for this feature by setting\r\n    /// ID_AA64PFR0_EL1.AdvSIMD == 0 or better.\r\n    /// </summary>\r\n    public static class Simd\r\n    {\r\n        public static bool IsSupported { get { throw null; } }\r\n\r\n        /// <summary>\r\n        /// Vector CompareEqualZero\r\n        /// For each element result[elem] = (left[elem] == 0) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMEQ & FCMEQ\r\n        /// </summary>\r\n        public static Vector64<T>    CompareEqualZero<T>(Vector64<T>    value) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareEqualZero<T>(Vector128<T>   value) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareEqual\r\n        /// For each element result[elem] = (left[elem] == right[elem]) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMEQ & FCMEQ\r\n        /// </summary>\r\n        public static Vector64<T>    CompareEqual<T>(Vector64<T>    left, Vector64<T>    right) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareEqual<T>(Vector128<T>   left, Vector128<T>   right) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareGreaterThanOrEqualZero\r\n        /// For each element result[elem] = (left[elem] >= 0) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGE & FCMGE\r\n        /// </summary>\r\n        public static Vector64<T>    CompareGreaterThanOrEqualZero<T>(Vector64<T>    value) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareGreaterThanOrEqualZero<T>(Vector128<T>   value) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareGreaterThanOrEqual\r\n        /// For each element result[elem] = (left[elem] >= right[elem]) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGE/CMHS & FCMGE\r\n        /// </summary>\r\n        public static Vector64<T>    CompareGreaterThanOrEqual<T>(Vector64<T>    left, Vector64<T>    right) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareGreaterThanOrEqual<T>(Vector128<T>   left, Vector128<T>   right) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareGreaterThanZero\r\n        /// For each element result[elem] = (left[elem] > 0) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGT & FCMGT\r\n        /// </summary>\r\n        public static Vector64<T>    CompareGreaterThanZero<T>(Vector64<T>    value) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareGreaterThanZero<T>(Vector128<T>   value) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareGreaterThan\r\n        /// For each element result[elem] = (left[elem] > right[elem]) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGT/CMHI & FCMGT\r\n        /// </summary>\r\n        public static Vector64<T>    CompareGreaterThan<T>(Vector64<T>    left, Vector64<T>    right) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareGreaterThan<T>(Vector128<T>   left, Vector128<T>   right) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareLessThanZero\r\n        /// For each element result[elem] = (left[elem] < 0) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGT & FCMGT\r\n        /// </summary>\r\n        public static Vector64<T>    CompareLessThanZero<T>(Vector64<T>    value) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareLessThanZero<T>(Vector128<T>   value) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareLessThanOrEqualZero\r\n        /// For each element result[elem] = (left[elem] < 0) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMGT & FCMGT\r\n        /// </summary>\r\n        public static Vector64<T>    CompareLessThanOrEqualZero<T>(Vector64<T>    value) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareLessThanOrEqualZero<T>(Vector128<T>   value) where T : struct { throw null; }\r\n\r\n        /// <summary>\r\n        /// Vector CompareTest\r\n        /// For each element result[elem] = (left[elem] & right[elem]) ? ~0 : 0\r\n        /// Corresponds to vector forms of ARM64 CMTST\r\n        /// </summary>\r\n        public static Vector64<T>    CompareTest<T>(Vector64<T>    left, Vector64<T>    right) where T : struct { throw null; }\r\n        public static Vector128<T>   CompareTest<T>(Vector128<T>   left, Vector128<T>   right) where T : struct { throw null; }\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24585/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "sdmaclea",
        "created_at": "2018-01-05T16:53:06Z",
        "body": "For the `Compare*Zero`, the `Zero` suffix is debatable.  I added it for clarity."
      },
      {
        "user": "eerhardt",
        "created_at": "2018-01-05T18:44:34Z",
        "body": "> For the Compare*Zero, the Zero suffix is debatable. I added it for clarity.\r\n\r\nI think the suffix makes sense.  Or else you'd have `var result = Simd.CompareLessThan(value);` -- less than what?"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-05T19:59:44Z",
        "body": "Updated to use generics.  Compare against zero for unsigned types is often not supported on unsigned types.\r\n\r\n\r\n  "
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-09T16:22:07Z",
        "body": "For vector floating point comparison, the return type is currently a vector floating point result.\r\n\r\nThis is not really type safe as the return type is really a bit mask.\r\n\r\nWe could make \r\n```C#\r\npublic static Vector128<float>  CompareGreaterThanOrEqualZero(Vector128<float>  value); \r\npublic static Vector128<double> CompareGreaterThanOrEqualZero(Vector128<double> value);\r\n```\r\n\r\ninto \r\n\r\n```C#\r\npublic static Vector128<uint>  CompareGreaterThanOrEqualZero(Vector128<float>  value); \r\npublic static Vector128<ulong> CompareGreaterThanOrEqualZero(Vector128<double> value);\r\n```\r\n\r\nThis doesn't work well for generics, so these APIs would need to be completely elaborated.\r\n\r\nIt would also impact the bitwise select logic.\r\n\r\nI guess my preference would be to make the change.\r\n  "
      },
      {
        "user": "tannergooding",
        "created_at": "2018-01-09T17:33:45Z",
        "body": "I think it makes sense. It's either NaN for true or Zero for false. At least in x86 its declared/described this way, and is the same in native code as well (ex: `__m128 _mm_cmpeq_ss (__m128 a, __m128 b)`)"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-09T17:47:10Z",
        "body": "> I think it makes sense\r\n\r\n@tannergooding I assume you are recommending to leave it as it was."
      },
      {
        "user": "tannergooding",
        "created_at": "2018-01-09T18:05:31Z",
        "body": "Yes.\r\n\r\nIt might be that it was done this way in x86 since SSE only had `float` and did not have more general operations for other types at the time, but it is at the very least consistent and relatively easy to grasp"
      },
      {
        "user": "CarolEidt",
        "created_at": "2018-01-11T23:43:26Z",
        "body": "I think I'm OK with the type inconsistency for the return values. My only concern is about exploding the generics for the case where unsigned types are not supported. Given that we already have an implicit contract that these are only supported over primitive types, it doesn't seem unreasonable for these to take only signed types.\r\n\r\nThat said, I also think there's something to be said for giving a compile-time error if the user provides an unsigned vector.\r\n\r\nOr (not sure I'm serious about this) the JIT could simply transform, e.g. (pretty sure I don't have the right names here) `CompareGreaterThanOrEqualZero` to `SetAllOnes` and `CompareGreaterZero` to `CompareEqualZero.Not`"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-11T23:49:37Z",
        "body": "> CompareGreaterThanOrEqualZero to SetAllOnes and CompareGreaterZero to CompareEqualZero.Not\r\n\r\nEasy enough 👍 "
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-12T00:01:38Z",
        "body": "Updated proposal to allow generic expansion unsigned all zero and all one cases"
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-01-15T15:39:10Z",
        "body": "@CarolEidt @eerhardt I think this can be marked \"API-ready-for-review\""
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-02-05T16:23:35Z",
        "body": "@eerhardt Any reason why this is marker future?  The CoreCLR work is complete and ready for 2.1."
      }
    ]
  },
  {
    "number": 24519,
    "title": "Unnecessary \"is\"-\"cast\" sequence in IPEndPoint.Equals()",
    "created_at": "2017-12-25T11:07:16Z",
    "closed_at": "2020-01-31T19:03:32Z",
    "labels": [
      "enhancement",
      "area-System.Net",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/24519",
    "body": "Here's the current code:\r\n\r\n    //class IPEndPoint\r\n    public override bool Equals(object comparand)\r\n        {\r\n            if (!(comparand is IPEndPoint))\r\n            {\r\n                return false;\r\n            }\r\n            return ((IPEndPoint)comparand)._address.Equals(_address) && ((IPEndPoint)comparand)._port == _port;\r\n      }\r\n\r\n`is` is followed by two casts. This can be replaced with single `as`:\r\n\r\n      var other = comparand as IPEndPoint;\r\n      if (other == null)\r\n      {\r\n         return false;\r\n      }\r\n      return other._address.Equals(_address) && other._port == _port;\r\n\r\n     ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/24519/comments",
    "author": "Dmitry-Me",
    "comments": [
      {
        "user": "AlexG2017",
        "created_at": "2017-12-26T07:55:29Z",
        "body": "Hi guys,\r\nCould you please assign the issue to me?"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-12-26T11:23:48Z",
        "body": "This seems like a reasonable case for implementing `IEquatable<T>` too, though that would need an API change."
      },
      {
        "user": "karelz",
        "created_at": "2017-12-27T20:46:05Z",
        "body": "Fixed in dotnet/corefx#26057"
      }
    ]
  },
  {
    "number": 9151,
    "title": "[Win][Build]C4819: Non-ASCII character in source",
    "created_at": "2017-10-17T22:13:15Z",
    "closed_at": "2020-01-31T02:52:46Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9151",
    "body": "Position: `src\\classlibnative\\bcltype\\number.cpp` L289-294\r\nCharacter: `∗`\r\nWindows Version: 16299.19\r\nCode Page: 936(Simplified Chinese)\r\nVisual Studio Version: 15.4.0 (msvc 19.11.25547)\r\n\r\nThe characters are in comment, so can be safely removed anyway.\r\nQuite strange about this issue, because the same issue was reported and fixed 2 years ago, and no longer reported. Doubting about VS2017/vc141.\r\n\r\n_a better solution could be making msvc work with UTF8 without BOM_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9151/comments",
    "author": "huoyaoyuan",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-10-19T01:14:20Z",
        "body": "cc @mazong1123 "
      },
      {
        "user": "mazong1123",
        "created_at": "2017-10-19T01:26:16Z",
        "body": "@huoyaoyuan Thanks for reporting it.\r\n\r\nIt's interesting. Those comments were copied from the original paper. I guess my PDF reader interpreted the character `*` as Chinese character because my locale is Chinese.\r\n\r\nI'd like to fix it soon."
      }
    ]
  },
  {
    "number": 9091,
    "title": "VectorTest.CheckValue<T> uses unsupported format",
    "created_at": "2017-10-10T00:06:18Z",
    "closed_at": "2020-01-31T02:49:08Z",
    "labels": [
      "test-bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/9091",
    "body": "`VectorTest.CheckValue<T>(T value, T expectedValue)` is using format `X` for `T` Single/Double\r\n\r\n```\r\nConsole.WriteLine(\"CheckValue failed for type \" + typeof(T).ToString() + \". Expected: {0} (0x{0:X}), Got: {1} (0x{1:X})\", expectedValue, value)\r\n```\r\n\r\nThis is not currently supported by `src/classlibnative/bcltype/number.cpp`  and results in an exception making it difficult to understand initial failure.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/9091/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "sdmaclea",
        "created_at": "2017-10-19T16:58:06Z",
        "body": "@jkotas FYI"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-11-03T13:37:43Z",
        "body": "@CarolEidt "
      }
    ]
  },
  {
    "number": 23456,
    "title": "List<T>.Reverse should not call Array.Reverse, or add Array.Reverse<T> method and call it.",
    "created_at": "2017-09-05T23:02:04Z",
    "closed_at": "2020-01-31T17:42:08Z",
    "labels": [
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23456",
    "body": "From analysis of real profiles:\r\n\r\nList<T>.Reverse should not call Array.Reverse, or add Array.Reverse<T> method and call it.\r\nHere is List<T>.Reverse implementation:\r\n```c#\r\n// System.Collections.Generic.List<T>\r\npublic void Reverse(int index, int count)\r\n{\r\n    ..\r\n    Array.Reverse(._items, index, count);\r\n    _version++;\r\n}\r\n```\r\nNotice Array.Reverse is not a generic method because there is no `Array.Reverse<T>` method. It's implementing using boxing for custom struct and GetValue/SetValue calls. Super expensive. The whole JToken.get_Path method is expensive and it building a new string every time through StringBuilder.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23456/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-09-05T23:06:04Z",
        "body": "Scratch that, we do have `Reverse<T>`. I'll tag as port consider at least."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-09-05T23:10:39Z",
        "body": "dotnet/runtime#14843 dealt with by dotnet/coreclr#7132 "
      }
    ]
  },
  {
    "number": 23420,
    "title": "Use string resources in Unix System.Drawing.Common",
    "created_at": "2017-09-01T18:33:31Z",
    "closed_at": "2023-03-11T10:14:25Z",
    "labels": [
      "enhancement",
      "area-System.Drawing",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23420",
    "body": "The code from mono does not use string resources. We should go through and replace hard-coded strings with resources. Ideally, these resources should be shared with the Windows version where applicable.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23420/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "huoyaoyuan",
        "created_at": "2023-03-11T10:14:25Z",
        "body": "Unix support for System.Drawing.Common has been removed."
      }
    ]
  },
  {
    "number": 23371,
    "title": "Wrong text encoding on console apps",
    "created_at": "2017-08-29T14:16:10Z",
    "closed_at": "2020-01-31T17:35:37Z",
    "labels": [
      "bug",
      "area-System.Console",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23371",
    "body": "I have a console app made in dotnet core which, among other things, receive text input using Console.ReadLine. This works fine except when entering words using non english characters (áéíóúñ) I can write such text without problem using Console.WriteLine and debugging I can see the text received have the usual marker for invalid character.\r\n\r\nThis is happening in dotnet core 1.1.0",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23371/comments",
    "author": "ahumeniy",
    "comments": [
      {
        "user": "joperezr",
        "created_at": "2017-09-11T22:58:28Z",
        "body": "@ahumeniy thanks for reporting this, quick question, have you tried using .NET Core 2.0 and see if it fails there as well? I suspect that it would be easier to include this fix on the next version of the framework as I'm not sure it would meet a bar for servicing."
      },
      {
        "user": "cahitbeyaz",
        "created_at": "2017-09-27T10:42:32Z",
        "body": "I have tested this with .net core 2.0 and .net fw 4.6.1 both successfully can readline and writeline successfully:\r\nMy code was as beloe for both .net core and .net 4.6.1\r\n`            while (true)\r\n            {\r\n                string read = Console.ReadLine();\r\n                Console.WriteLine(read);\r\n            }\r\n`\r\nBoth produced following \r\n```\r\na\r\na\r\ná\r\ná\r\n\r\n```\r\n\r\ntherefore i think this issue can be closed\r\n\r\n\r\n"
      },
      {
        "user": "joperezr",
        "created_at": "2017-09-27T16:21:16Z",
        "body": "great to hear and thanks so much for checking @beyazc! "
      }
    ]
  },
  {
    "number": 8793,
    "title": "Unify number parsing/formatting code with corert",
    "created_at": "2017-08-23T15:54:46Z",
    "closed_at": "2020-01-31T02:29:57Z",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8793",
    "body": "The implementation of number parsing/formatting in corert is a managed port of the native implementation in coreclr.  We want to unify on the managed implementation, though doing so also involves addressing several perf gaps.  Doing this will then enable much more easily implementing span-based number formatting in coreclr.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8793/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2017-11-21T03:53:33Z",
        "body": "The remaining code to be unified is that for double/single and decimal."
      },
      {
        "user": "RussKeldorph",
        "created_at": "2018-03-28T15:52:09Z",
        "body": "@danmosemsft Is this still destined for 2.1?"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-03-28T16:00:12Z",
        "body": "Nope."
      },
      {
        "user": "pentp",
        "created_at": "2018-09-22T16:28:44Z",
        "body": "Number parsing/formatting should be unified after dotnet/coreclr#20080 is mirrored to CoreRT (this issue can be closed)."
      }
    ]
  },
  {
    "number": 8791,
    "title": "link option for PIE executable",
    "created_at": "2017-08-23T02:54:20Z",
    "closed_at": "2020-12-09T19:08:48Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8791",
    "body": "I have built the latest coreclr (commit 637bfeffb0fd0378ff6d04d7bb845938b77bdade) and found that it does not produce PIE executables for corerun, crossgen, ildasm, ilasdm. \r\n```\r\ntwoflower@js2-desktop ~/d/c/b/P/Linux.x64.Release> hardening-check crossgen\r\ncrossgen:\r\n Position Independent Executable: no, normal executable!\r\n Stack protected: yes\r\n Fortify Source functions: no, only unprotected functions found!\r\n Read-only relocations: yes\r\n Immediate binding: no, not found!\r\n```\r\nBut, compilation option `-fPIE` is introduced on commit 891b2aa2b1c65ff157a840c3462fa6d007f2dac9.\r\nAm I missing something(flag) or we need a patch to enable PIE executable ?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8791/comments",
    "author": "chunseoklee",
    "comments": [
      {
        "user": "janvorli",
        "created_at": "2017-08-23T09:58:56Z",
        "body": "I've verified that we do pass the `-fPIE` option to the compiler and that there are no textrels in the file. However, that doesn't seem to be enough. I've tried to compile simple hello world kind of app with clang and besides `-fPIE`, it also required me to pass in the `-pie` linker option to become dynamic executable. So we will need to add that to our CMakeLists.txt files (e.g. `set_property(TARGET crossgen APPEND_STRING PROPERTY LINK_FLAGS -pie`)\r\nHowever, I've found that cmake has a variable CMAKE_POSITION_INDEPENDENT_CODE that can be set to generate position independent targets, so I'd like to give it a try as a replacement for manually adding the PIE / PIC flags everywhere. For some reason, it doesn't seem to work right away, so it will require some investigations."
      },
      {
        "user": "janvorli",
        "created_at": "2017-08-23T10:18:56Z",
        "body": "Hmm, actually it is a cmake bug that it doesn't pass the -pie linker option when the CMAKE_POSITION_INDEPENDENT_CODE is enabled. So setting the target property or setting it globally in CMAKE_EXE_LINKER_FLAGS (which would require changing the PAL tests to build as PIEs) is the way to go."
      },
      {
        "user": "chunseoklee",
        "created_at": "2017-08-23T21:26:05Z",
        "body": "@janvorli Then, is it ok to PR a patch enabling PIE executable ?"
      },
      {
        "user": "janvorli",
        "created_at": "2017-08-23T21:42:20Z",
        "body": "@chunseoklee yes, it would be great to get that."
      },
      {
        "user": "vitek-karas",
        "created_at": "2019-08-22T16:07:04Z",
        "body": "Could you please also look at dotnet/core-setup and how it produces `dotnet` and `apphost` executables? Those are the actual executables used by the product."
      },
      {
        "user": "jkotas",
        "created_at": "2020-12-09T19:08:48Z",
        "body": "Fixed by #685"
      }
    ]
  },
  {
    "number": 23130,
    "title": "ManagedHandler: Support 1.0 requests",
    "created_at": "2017-08-11T12:17:59Z",
    "closed_at": "2020-01-31T17:18:20Z",
    "labels": [
      "area-System.Net.Http",
      "help wanted",
      "wishlist"
    ],
    "url": "https://github.com/dotnet/runtime/issues/23130",
    "body": "Currently the handler throws an exception for 1.0 requests.  It needs to tolerate them.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/23130/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "wfurt",
        "created_at": "2017-08-29T17:11:48Z",
        "body": "Do we have better list of what needs to be done @stephentoub ?\r\nI can probably make the failing tests pass but I'm not sure if that is enough.\r\n\r\nI look at the code and RFC and as minimum it seems like we should throw exception if anybody wants to use chunking & 1.0. There is no Keep-Alive and multiple requests over same socket. Host: is optional (yet request may include it IMHO) There are some other differences but I'm not sure to what level of compliance we need to go. I feel in worst case we the request may have some headers and they will be ignored by server.\r\n\r\nOn related note, do we care about HTTP 0.9? I would not with exception allowing \"GET /\" e.g. missing version string is treated and .9 and implied. \r\n"
      }
    ]
  },
  {
    "number": 8658,
    "title": "[ARM64/Linux] Implement UMEntryThunkCode::Poison",
    "created_at": "2017-07-31T06:06:52Z",
    "closed_at": "2020-01-31T02:21:07Z",
    "labels": [
      "arch-arm64",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8658",
    "body": "dotnet/coreclr#12731 introduces ``UMEntryThunkCode::Poison`` for all the architecture (x86, x64, arm, arm64), but arm64 variant does not have a proper implementation.\r\n\r\nWe need to implement it properly.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8658/comments",
    "author": "parjong",
    "comments": [
      {
        "user": "BruceForstall",
        "created_at": "2017-07-31T16:09:30Z",
        "body": "@dotnet/arm64-contrib "
      },
      {
        "user": "sdmaclea",
        "created_at": "2017-07-31T16:11:17Z",
        "body": "@BruceForstall please assign to me"
      }
    ]
  },
  {
    "number": 22821,
    "title": "Add support for disabled short path generation to System.IO.Tests.Directory_GetFileSystemEntries_str.PatternTests_DosStarOddSpace()",
    "created_at": "2017-07-18T18:18:12Z",
    "closed_at": "2020-01-31T16:56:49Z",
    "labels": [
      "area-System.IO",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/22821",
    "body": "```PatternTests_DosStarOddSpace()``` currently tests for pattern-matching behavior on files that, according to inline documentation in the test source, is due to a preexisting bug in the Windows stack. However, the exhibited behavior is intended on systems that have short path alias generation enabled because the pattern is matched against both the full file name and the shortened alias generated by Windows. Consequentially, this test fails on systems that do not have short path alias generation enabled.\r\n\r\nExpected behavior is as follows:\r\n\r\n- If the system has short path alias generation enabled, then the current set of expected results should be used.\r\n- If the system has short path alias generation disabled, then the set of results labeled as ```// Really should be:``` should be expected.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/22821/comments",
    "author": "makroeze",
    "comments": [
      {
        "user": "JeremyKuhne",
        "created_at": "2018-02-05T21:50:15Z",
        "body": "Thanks for the details on this."
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2020-01-17T21:00:37Z",
        "body": "Triage: Closing as this isn't a common scenario."
      }
    ]
  },
  {
    "number": 21988,
    "title": "Add metdata API to get module custom attributes",
    "created_at": "2017-05-26T05:13:15Z",
    "closed_at": "2020-01-31T15:59:48Z",
    "labels": [
      "api-approved",
      "area-System.Reflection.Metadata",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21988",
    "body": "### Rationale\r\n\r\nSystem.Reflection.Metadata offers convenience methods to access custom attributes on most of the record types that correspond to `HasCustomAttribute` token types in the ECMA-335 spec. Notable omission is the `ModuleDefinition` record.\r\n\r\n### Proposed API\r\n\r\n```csharp\r\nnamespace System.Reflection.Metadata\r\n{\r\n    public struct ModuleDefinition\r\n    {\r\n        public CustomAttributeHandleCollection GetCustomAttributes();\r\n    }\r\n}\r\n```\r\n\r\n### Other thoughts\r\n\r\nThis can be worked around with `MetadataReader.GetCustomAttributes(System.Reflection.Metadata.Ecma335.MetadataTokens.EntityHandle(0x1))`, but it's rather awkward.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21988/comments",
    "author": "MichalStrehovsky",
    "comments": [
      {
        "user": "MichalStrehovsky",
        "created_at": "2017-05-26T05:18:36Z",
        "body": "@tmat Can we flip this to api-ready-for-review?"
      },
      {
        "user": "tmat",
        "created_at": "2017-05-26T05:23:03Z",
        "body": "```MetadataReader.GetCustomAttributes(EntityHandle.ModuleDefinition)``` also works, but I agree the API should be added."
      },
      {
        "user": "karelz",
        "created_at": "2017-06-20T17:16:41Z",
        "body": "API review: Approved.\r\nI guess this is straightforward to do, given the functionality exists. Marking as up-for-grabs."
      },
      {
        "user": "lkts",
        "created_at": "2017-06-26T18:28:53Z",
        "body": "As i understand it is possible to simply expose `MetadataReader.CustomAttributes` ?"
      },
      {
        "user": "tmat",
        "created_at": "2017-06-26T18:29:59Z",
        "body": "Yes."
      },
      {
        "user": "lkts",
        "created_at": "2017-06-26T18:35:41Z",
        "body": "Thanks @tmat ."
      },
      {
        "user": "lkts",
        "created_at": "2017-06-26T19:49:43Z",
        "body": "Does this need any tests? (custom attributes are already tested)"
      },
      {
        "user": "tmat",
        "created_at": "2017-06-26T19:54:39Z",
        "body": "Update a test that tests custom attributes on modules to use the new API as well."
      }
    ]
  },
  {
    "number": 8047,
    "title": "[Arm64/Arm] Improve volatile coverage in tests",
    "created_at": "2017-05-10T20:01:37Z",
    "closed_at": "2021-06-11T19:34:26Z",
    "labels": [
      "arch-arm32",
      "arch-arm64",
      "test-enhancement",
      "help wanted",
      "area-CodeGen-coreclr",
      "JitUntriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8047",
    "body": "For platforms with loose memory ordering semantics, the IL Volatile prefix requires injection of explicit barriers.\r\n\r\nNo tests currently exercise cpblk and initblk with volatile prefix.\r\n\r\ncategory:correctness\r\ntheme:testing\r\nskill-level:intermediate\r\ncost:medium",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8047/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "sdmaclea",
        "created_at": "2017-05-10T20:02:07Z",
        "body": "@briansull "
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-07-27T22:30:39Z",
        "body": "@Buyduck Should I un-assign you? Or do you think you'll look at this?"
      }
    ]
  },
  {
    "number": 8010,
    "title": "cleanup BCLDebug",
    "created_at": "2017-05-04T16:18:43Z",
    "closed_at": "2020-01-31T01:43:08Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/8010",
    "body": "Is this the debug tracing mechanism we want corelib code to use long term? CoreRT uses Debug.xx exclusively, CoreCLR corelib uses Debug.xx in most cases but BCLDebug.xx in some. They need to be reconciled.\r\n\r\nBCLDebug has some other features: categories, verbosity, registry configuration.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/8010/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2017-05-04T16:37:04Z",
        "body": "> Is this the debug tracing mechanism we want corelib code to use long term? \r\n\r\nNo. It should be deleted."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-05-04T17:20:52Z",
        "body": "Do you want everything to just use Debug.Log, etc? With no filtering, disabling, ..? Or you want to recreate something like BCLDebug?\r\n\r\nI don't know whether any of the existing uses would fire so much that Debug.Log would be spammy."
      },
      {
        "user": "jkotas",
        "created_at": "2017-05-04T18:10:41Z",
        "body": "There are a very few classes where BCLDebug.Log is used, and I do not think anybody used that logging for anything in like last 10 years. I think it is fine just to delete it. \r\n\r\nOr if you see a good reason to keep it (I do not) - change it to per-class Log method that is `[Condition(\"DEBUG\")]` and does nothing, that the developer can instrument with printf in debug build.\r\n\r\nCoreLib is no different from CoreFX. I do not think anything in CoreFX has logging like this either. It suggests that it is not very useful."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-05-05T19:33:03Z",
        "body": "OK. Easy up for grabs change."
      }
    ]
  },
  {
    "number": 21458,
    "title": "Make AddCodeViewEntry(..., int age) public",
    "created_at": "2017-05-02T01:45:13Z",
    "closed_at": "2020-10-23T04:27:01Z",
    "labels": [
      "api-approved",
      "area-System.Reflection.Metadata",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21458",
    "body": "Add an overload of AddCodeViewEntry API for building CodeView Debug Directory entry with specified Age != 1.\r\n\r\n```C#\r\nnamespace System.Reflection.PortableExecutable\r\n{\r\n  class DebugDirectoryBuilder\r\n  {\r\n        /// <summary>\r\n        /// Adds a CodeView entry.\r\n        /// </summary>\r\n        /// <param name=\"pdbPath\">Path to the PDB. Shall not be empty.</param>\r\n        /// <param name=\"pdbContentId\">Unique id of the PDB content.</param>\r\n        /// <param name=\"portablePdbVersion\">Version of Portable PDB format (e.g. 0x0100 for 1.0), or 0 if the PDB is not portable.</param>\r\n        /// <param name=\"age\">Age (iteration) of the PDB. Shall be 1 for Portable PDBs.</param>\r\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"pdbPath\"/> is null.</exception>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"pdbPath\"/> contains NUL character.</exception>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\"><paramref name=\"age\"/> is less than 1.</exception>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\"><paramref name=\"portablePdbVersion\"/> is smaller than 0x0100.</exception>\r\n        public void AddCodeViewEntry(\r\n            string pdbPath,\r\n            BlobContentId pdbContentId,\r\n            ushort portablePdbVersion,\r\n            int age)\r\n  }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21458/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "terrajobst",
        "created_at": "2017-05-02T17:14:56Z",
        "body": "Looks good as proposed."
      },
      {
        "user": "ahsonkhan",
        "created_at": "2018-03-21T08:25:08Z",
        "body": "@tmat, @nguerrera, are we still targeting the 2.1 milestone for these APIs?"
      },
      {
        "user": "tmat",
        "created_at": "2018-03-21T16:01:33Z",
        "body": "I guess not, since it's pass API freeze."
      },
      {
        "user": "danmoseley",
        "created_at": "2018-06-16T04:48:09Z",
        "body": "@tmat are you still going to do tihs or should we make up for grabs?"
      },
      {
        "user": "tmat",
        "created_at": "2018-06-16T19:17:02Z",
        "body": "up for grabs "
      }
    ]
  },
  {
    "number": 21397,
    "title": "ArgumentException from GetFullPath should include the path",
    "created_at": "2017-04-27T04:47:25Z",
    "closed_at": "2020-01-31T15:21:09Z",
    "labels": [
      "enhancement",
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21397",
    "body": "In a case such as the below it would be helpful if the message was something like `The path \"C:|\" is not of a legal form.`. Seems reasonable to add it unless there's some kind of information disclosure issue (I don't know why, we don't generally cleanse our exception messages)\r\n\r\n```\r\nSystem.ArgumentException : The path is not of a legal form.\r\nStack Trace :\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.IO.FileInfo.Init(String fileName)\r\n   at System.IO.FileInfo..ctor(String fileName)\r\n   at MonoTests.System.Configuration.ConfigurationManagerTest.OpenExeConfiguration1_UserLevel_PerUserRoamingAndLocal()\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21397/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "JeremyKuhne",
        "created_at": "2017-05-02T20:15:22Z",
        "body": "Not opposed, this is generally a left over from limited trust scenarios on desktop."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-05-15T19:33:23Z",
        "body": "There are probably several other exceptions that could usefully include paths."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-06-16T04:48:39Z",
        "body": "Also  this one.\r\n   throw new NotSupportedException(SR.Argument_PathFormatNotSupported);\r\n\r\n    ---> System.NotSupportedException: The given path's format is not supported.\r\n       at System.IO.Path.GetFullPath(String path)\r\n       at System.IO.Directory.SetCurrentDirectory(String path)"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-06-16T04:50:04Z",
        "body": "Also \r\n```\r\n 1183:   <data name=\"Argument_InvalidPathChars\" xml:space=\"preserve\">\r\n 1184      <value>Illegal characters in path.</value>\r\n```\r\n\r\nBasically almost all the \"throw new xxx\" in Path*.cs."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-06-16T05:07:27Z",
        "body": "`   throw new PathTooLongException(SR.IO_PathTooLong + fullPath.ToString());` is clearly wrong."
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2017-06-16T16:52:37Z",
        "body": "> throw new PathTooLongException(SR.IO_PathTooLong + fullPath.ToString()); is clearly wrong.\r\n\r\nYes, we should be creating formatted string resources for these where we don't have them. Many already have a \"with path\" and \"without path\" version. Some of them may already exist in other places- checking the desktop mscorlib is something that is worth doing."
      }
    ]
  },
  {
    "number": 21338,
    "title": "Missing parameter validation for CredentialCache.Add method",
    "created_at": "2017-04-24T20:24:28Z",
    "closed_at": "2020-01-31T15:17:13Z",
    "labels": [
      "bug",
      "area-System.Net",
      "tenet-compatibility",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21338",
    "body": "While investigating dotnet/runtime#20829, discovered that CredentialCache is not doing proper validation with the 'Add' method.\r\n\r\nOn .NET Core, it allows for DefaultCredentials to be added for auth types such as 'Basic'. On .NET Framework, it throws:\r\n\r\n>System.ArgumentException : Default credentials cannot be supplied for the Basic authentication scheme.\r\nParameter name: authType\r\nStack Trace:\r\nat System.Net.CredentialCache.Add(Uri uriPrefix, String authType, NetworkCredential cred)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21338/comments",
    "author": "davidsh",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2017-04-24T20:24:50Z",
        "body": "cc: @stephentoub "
      },
      {
        "user": "karelz",
        "created_at": "2017-04-27T19:05:24Z",
        "body": "Should be simple adding of validation. Check out ReferenceSource of Desktop for motivation.\r\n\r\nThe API is used, not legacy - we should fix it in 2.0. It may have impact on developers."
      }
    ]
  },
  {
    "number": 21225,
    "title": "System.Net.HttpListenerException : An operation was attempted on a nonexistent network connection with GCStress",
    "created_at": "2017-04-20T10:23:30Z",
    "closed_at": "2020-01-31T15:09:45Z",
    "labels": [
      "bug",
      "area-System.Net",
      "os-windows",
      "tenet-reliability",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/21225",
    "body": "Test failed in System.Net.HttpListener.Tests.dll, the test output log as following:\r\n\r\nset COMPlus_GCStress=3\r\nset XUNIT_PERFORMANCE_MIN_ITERATION=1\r\nset XUNIT_PERFORMANCE_MAX_ITERATION=1\r\ncall F:\\repos\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\\\dotnet.exe xunit.console.netcore.exe System.Net.HttpListener.Tests.dll  -xml testResults.xml -notrait category=nonnetcoreapptests  -notrait category=failing -notrait category=nonwindowstests\r\nxUnit.net console test runner (64-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Net.HttpListener.Tests\r\nDiscovered:  System.Net.HttpListener.Tests\r\nStarting:    System.Net.HttpListener.Tests\r\n   **System.Net.Tests.HttpRequestStreamTests.Read_LargeLengthAsynchronous_Success(transferEncodingChunked: True) [FAIL]**\r\n      System.Net.HttpListenerException : An operation was attempted on a nonexistent network connection\r\n      Stack Trace:\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\src\\System\\Net\\Windows\\HttpRequestStream.Windows.cs(318,0): at System.Net.HttpRequestStream.BeginRead(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state)\r\n            at System.IO.Stream.<>c.<BeginEndReadAsync>b__43_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, Object state)\r\n            at System.Threading.Tasks.TaskFactory`1.FromAsyncTrim[TInstance,TArgs](TInstance thisRef, TArgs args, Func`5 beginMethod, Func`3 endMethod)\r\n            at System.IO.Stream.BeginEndReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n            at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\n            at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\tests\\HttpRequestStreamTests.cs(149,0): at System.Net.Tests.HttpRequestStreamTests.<Read_LargeLengthAsynchronous_Success>d__7.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   **System.Net.Tests.HttpRequestStreamTests.Read_LargeLengthAsynchronous_Success(transferEncodingChunked: False) [FAIL]**\r\n      System.Net.HttpListenerException : An operation was attempted on a nonexistent network connection\r\n      Stack Trace:\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\src\\System\\Net\\Windows\\HttpRequestStream.Windows.cs(318,0): at System.Net.HttpRequestStream.BeginRead(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state)\r\n            at System.IO.Stream.<>c.<BeginEndReadAsync>b__43_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, Object state)\r\n            at System.Threading.Tasks.TaskFactory`1.FromAsyncTrim[TInstance,TArgs](TInstance thisRef, TArgs args, Func`5 beginMethod, Func`3 endMethod)\r\n            at System.IO.Stream.BeginEndReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n            at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\n            at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\tests\\HttpRequestStreamTests.cs(149,0): at System.Net.Tests.HttpRequestStreamTests.<Read_LargeLengthAsynchronous_Success>d__7.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   **System.Net.Tests.HttpRequestStreamTests.Read_LargeLengthSynchronous_Success(transferEncodingChunked: True) [FAIL]**\r\n      System.Net.HttpListenerException : An operation was attempted on a nonexistent network connection\r\n      Stack Trace:\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\src\\System\\Net\\Windows\\HttpRequestStream.Windows.cs(195,0): at System.Net.HttpRequestStream.Read(Byte[] buffer, Int32 offset, Int32 size)\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\tests\\HttpRequestStreamTests.cs(193,0): at System.Net.Tests.HttpRequestStreamTests.<Read_LargeLengthSynchronous_Success>d__8.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   **System.Net.Tests.HttpRequestStreamTests.Read_LargeLengthSynchronous_Success(transferEncodingChunked: False) [FAIL]**\r\n      System.Net.HttpListenerException : An operation was attempted on a nonexistent network connection\r\n      Stack Trace:\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\src\\System\\Net\\Windows\\HttpRequestStream.Windows.cs(195,0): at System.Net.HttpRequestStream.Read(Byte[] buffer, Int32 offset, Int32 size)\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\tests\\HttpRequestStreamTests.cs(193,0): at System.Net.Tests.HttpRequestStreamTests.<Read_LargeLengthSynchronous_Success>d__8.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   **System.Net.Tests.HttpRequestStreamTests.Read_FullLengthSynchronous_Success(transferEncodingChunked: True, text: \\\"\\\") [FAIL]**\r\n      System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n      ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response\r\n      Stack Trace:\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n         F:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs(462,0): at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n         F:\\repos\\corefx\\src\\System.Net.HttpListener\\tests\\HttpRequestStreamTests.cs(116,0): at System.Net.Tests.HttpRequestStreamTests.<Read_FullLengthSynchronous_Success>d__6.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n         ----- Inner Stack Trace -----\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n         F:\\repos\\corefx\\src\\Common\\src\\System\\Threading\\Tasks\\RendezvousAwaitable.cs(62,0): at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()\r\n         F:\\repos\\corefx\\src\\System.Net.Http.WinHttpHandler\\src\\System\\Net\\Http\\WinHttpHandler.cs(863,0): at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\nFinished:    System.Net.HttpListener.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.HttpListener.Tests  Total: 104, Errors: 0, Failed: 5, Skipped: 0, Time: 1055.777s\r\nFinished running tests.  End time= 0:33:32.67, Exit code = 1",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/21225/comments",
    "author": "shimingsg",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-04-20T18:54:32Z",
        "body": "This seems unlikely to be GC related but either due to the extreme slowness of the tests in this mode or some unrelated flaky problem."
      },
      {
        "user": "karelz",
        "created_at": "2017-04-27T19:16:21Z",
        "body": "Legacy APIs, potentially reliability, but most likely same on Desktop.\r\n\r\nPossibly a test issue -> moving to Future."
      },
      {
        "user": "karelz",
        "created_at": "2019-10-02T19:29:28Z",
        "body": "Triage: Old issue. We have plans to do brand new stress for .NET Core -- @eiriktsarpalis please add these kind of runs on your backlog.\r\n\r\nClosing as non-actionable. If it is a real problem, we will discover it in the new stress runs."
      }
    ]
  },
  {
    "number": 20880,
    "title": "Review \"dead\" code (not getting compiled)",
    "created_at": "2017-04-04T06:00:24Z",
    "closed_at": "2020-01-31T14:47:55Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20880",
    "body": "None of these are getting compiled. All either need deleting, or hooking up to the build , as appropriate.\r\n(I've either opened issues or put up PR's for all the other dead files I found)\r\n\r\n- [ ] Common/tests/System/Net/Sockets/Performance/SocketTestClientAPM.cs\r\n- [ ] System.CodeDom/src/System/CodeDom/Compiler/CompilerParameters.Evidence.cs\r\n- [ ] System.CodeDom/src/System/CodeDom/Compiler/CompilerResults.Evidence.cs\r\n- [ ] System.Data.Common/src/System/Data/Common/DbProviderFactory.CreatePermission.cs\r\n- [x] System.Data.SqlClient/tests/Tools/TDS/TDS/TDSPacketTokenType.cs\r\n- [x] System.Data.SqlClient/tests/Tools/TDS/TDS/TDSPacketType.cs\r\n- [ ] System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/CertificateCollectionDeltas.cs\r\n- [ ] System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/ValueList.cs\r\n- [ ] System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/ValueListEnumerator.cs\r\n- [ ] System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/config.cs\r\n- [ ] System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/testobj.cs\r\n- [ ] System.DirectoryServices.AccountManagement/tests/testobj.cs\r\n- [ ] System.DirectoryServices/src/System/DirectoryServices/DirectoryDescriptionAttribute.cs\r\n- [ ] System.Net.Http/tests/FunctionalTests/prerequisites/BasicAuthModule.cs\r\n- [ ] System.Net.Sockets/tests/PerformanceTests/SocketPerformanceAPMTests.cs\r\n- [ ] System.Net.WebSockets/tests/WebSocketExceptionTests.netstandard17.cs\r\n- [x] System.Runtime.Extensions/src/System/IO/Path.Win32.cs\r\n- [ ] System.Runtime.Numerics/tests/BigInteger/add.cs\r\n- [ ] System.Runtime.WindowsRuntime/src/System/IO/IsolatedStorage/IsolatedStorageFileIOHelper.cs\r\n- [ ] System.Runtime/tests/Common/CompareHelper.cs\r\n- [ ] System.Runtime/tests/Performance/Perf.Array.cs\r\n- [ ] System.Runtime/tests/netstandard.1.7.Tests.cs\r\n- [ ] System.Security.AccessControl/tests/CommonSecurityDescriptor/CommonSecurityDescriptor_CreateFromBinaryForm.cs\r\n- [ ] System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.net46.cs",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20880/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "Clockwork-Muse",
        "created_at": "2017-04-04T18:17:03Z",
        "body": "Also /System.Threading.Tasks/tests/Task/TaskFromAsyncTest2.cs\r\n\r\nAlthough given the state of some of those tests..."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-04-04T21:00:09Z",
        "body": "> None of these are getting compiled\r\n\r\nSome of these (e.g. the `*.Evidence.cs` ones) were added by the Mono folks to be used in their builds."
      },
      {
        "user": "EgorBo",
        "created_at": "2017-04-18T09:00:32Z",
        "body": "`*.Evidence`, `*.CreatePermission.cs` were added by us for mono, indeed, probably we should rename them to `*.Mono.cs` @marek-safar "
      },
      {
        "user": "marek-safar",
        "created_at": "2017-04-18T09:12:41Z",
        "body": "We need to add mono files to mono configuration build but I think this configuration is still not included in CoreFX CI"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-22T14:50:58Z",
        "body": "This is over two years old now and is out-of-date, so I'm going to close it.  Please open a new issue with updated details if desired."
      }
    ]
  },
  {
    "number": 20831,
    "title": "SerialPort: Move background Thread to Task",
    "created_at": "2017-03-30T18:14:45Z",
    "closed_at": "2020-01-31T14:44:41Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area-System.IO.Ports"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20831",
    "body": "`SerialStream` (internal to `SerialPort`) currently does a `new Thread()` to make a `WaitForCommEvent` thread which blocks on `::WaitCommEvent` and dispatches events into the application's code.\r\n\r\nThe use of the background thread has created problems with unhandled events escaping (see dotnet/runtime#20821 & dotnet/corefx#17666) and is also possibly some part of an close/re-open problem described in dotnet/runtime#20260 (I'm not sure if it is or isn't).\r\n\r\nIt is worth investigating if we could change from a background `Thread` to `Task.Run` and then await the completion of this Task in the relevant dispose method.  This would bring exceptions back properly where they can be sensibly handled, and would ensure that the thread was finished before returning from the dispose.\r\n\r\nAt present no reference to the background thread is held by `SerialStream`, so it's impossible for it to make sure it's complete before finishing the close/dispose.\r\n\r\nOne for the future...",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20831/comments",
    "author": "willdean",
    "comments": [
      {
        "user": "JeremyKuhne",
        "created_at": "2017-06-02T18:02:14Z",
        "body": "Completed with dotnet/corefx#19146"
      }
    ]
  },
  {
    "number": 7756,
    "title": "Test using Random() should be seeded",
    "created_at": "2017-03-30T17:33:50Z",
    "closed_at": "2021-06-11T19:38:20Z",
    "labels": [
      "Hackathon",
      "good first issue",
      "test-enhancement",
      "help wanted",
      "area-CodeGen-coreclr",
      "Priority:3"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7756",
    "body": "There are many tests using unseeded Random number generators.  When failures happen it is difficult to debug/repro.\r\n\r\nHere are examples which are currently causing intermittent failures in arm64...\r\n```\r\ntests/src/JIT/Methodical/MDArray/basics/classarr.cs\r\ntests/src/JIT/Methodical/MDArray/basics/doublearr.cs\r\ntests/src/JIT/Methodical/MDArray/basics/jaggedarr.cs\r\ntests/src/JIT/Methodical/MDArray/basics/stringarr.cs\r\ntests/src/JIT/Methodical/MDArray/basics/structarr.cs\r\n```\r\n\r\nMany tests are using seeded random number generators using code in tests/src/Common/CoreCLRTestLibrary/TestFramework.cs.\r\n\r\nIt would be nice to use simialr code in place of all tests using Random() without a seed.\r\ncategory:correctness\r\ntheme:testing\r\nskill-level:beginner\r\ncost:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7756/comments",
    "author": "sdmaclea",
    "comments": [
      {
        "user": "sdmaclea",
        "created_at": "2017-03-30T17:35:49Z",
        "body": "@Jkotas Please mention correct people"
      },
      {
        "user": "jkotas",
        "created_at": "2017-03-30T18:37:50Z",
        "body": "cc @dotnet/jit-contrib "
      },
      {
        "user": "stefannikolei",
        "created_at": "2017-04-09T19:10:55Z",
        "body": "\r\n            if (Environment.GetEnvironmentVariable(\"CORECLR_SEED\") != null)\r\n            {\r\n                try\r\n                {\r\n                    seed = int.Parse(Environment.GetEnvironmentVariable(\"CORECLR_SEED\"));\r\n                }\r\n                catch (FormatException) { seed = rand.Next(); }\r\n            }\r\n            else\r\n            {\r\n                seed = rand.Next();\r\n            }\r\nYou suggest to use this code on all tests which use Random?"
      },
      {
        "user": "sdmaclea",
        "created_at": "2017-04-09T21:06:45Z",
        "body": "@reaction1989 that code plus a fixed default seed and the code to print the seed into the trace.    Fixed default seed may want to be unique per test."
      },
      {
        "user": "stefannikolei",
        "created_at": "2017-04-10T19:50:19Z",
        "body": "i would tackle this. If someone wanna assign me "
      },
      {
        "user": "pgavlin",
        "created_at": "2017-04-10T19:55:47Z",
        "body": "@reaction1989: I don't think we can formally assign you since you're not affiliated with any of the required GitHub organizations, but feel free to take this on in any case. Thanks!"
      },
      {
        "user": "danmoseley",
        "created_at": "2018-06-02T06:09:30Z",
        "body": "@reaction1989  still interested?"
      },
      {
        "user": "tannergooding",
        "created_at": "2018-06-14T17:22:10Z",
        "body": "@sdmaclea, @reaction1989. I don't believe a fixed seed is the right way to go. That causes you to lose the benefits of using RNG (which is testing arbitrary inputs behave correctly).\r\n\r\nThe issue here is that:\r\n1. There is no way to tell the test the seed to use\r\n2. The tests do not tell you the seed that was used\r\n\r\nIf we had a way of doing both, then it should resolve all the issues while keeping the benefits."
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-06-14T17:27:04Z",
        "body": "The typical usage in other tests is to use a fixed seed (i.e. the date) for CI and print the result.  The seed may be from the command line.  It is certainly acceptable to randomly generate a seed, print it, then use it as the seed.  So that the failures can be reproduce.  However, that means the logs for all failures must be available.  I have not always been able to find the logs.\r\n"
      },
      {
        "user": "tannergooding",
        "created_at": "2018-06-14T17:30:00Z",
        "body": "> The typical usage in other tests is to use a fixed seed (i.e. the date)\r\n\r\nThis is probably the disconnect. I wouldn't consider \"the date\" a fixed seed, as it could vary from run to run 😄  (I would probably say the seed comes from a fixed source instead)\r\n\r\n> However, that means the logs for all failures must be available. I have not always been able to find the logs.\r\n\r\nRight, I think this is the real problem.\r\n\r\nBecause the logs don't tell you the seed used, there is currently no chance for reproducability."
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-06-14T17:45:37Z",
        "body": "In the date cases, the date was the date the seed was chosen, not the current date."
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-06-14T17:47:09Z",
        "body": "For instance\r\n```\r\ntests/src/Common/CoreCLRTestLibrary/TestFramework.cs:            seed = 20010415;\r\n```"
      },
      {
        "user": "tannergooding",
        "created_at": "2018-06-14T17:54:06Z",
        "body": "@sdmaclea, I don't see how that is useful. It means that you don't get any of the benefits that using random inputs would normally provide (one of which is testing values that the dev didn't consider \"special\" or needing explicit tests).\r\n\r\nAt that point, why not just pick random inputs and hard code them."
      },
      {
        "user": "sdmaclea",
        "created_at": "2018-06-14T17:57:47Z",
        "body": "Take a look at the file for the whole context.  It allows environment variable to override the seed.  It prints the seed used in the logs....  CI is not for exhaustive checking typically, it is generally for general coverage.\r\n\r\nIf you want more exhaustive testing you can run the test with more seeds....  But that is not needed in general CI."
      },
      {
        "user": "tannergooding",
        "created_at": "2018-06-14T18:12:54Z",
        "body": "> If you want more exhaustive testing you can run the test with more seeds.... But that is not needed in general CI.\r\n\r\nThe point is that it is no more work (the same number of tests get run), but it provides \"greater\" coverage (as it tests more inputs over the course of multiple runs).\r\n\r\nThe fact that there are tests without fixed seeds that are failing is \"proof\" that there is something wrong somewhere (some random input is causing a failure). If you change that to be a fixed seed, the inputs will never change and the tests will no longer \"randomly\" fail and you will miss out on the fact that something is wrong (either in the test code or in source code).\r\n\r\nThat is why using a fixed source seed (such as `DateTime.Now`) combined with printing said seed to the output (for reproducability) is a better solution."
      },
      {
        "user": "CarolEidt",
        "created_at": "2018-06-14T18:13:16Z",
        "body": "IMO, having a seed that varies run-to-run is only worthwhile if it is justified by the testing context, as it adds to the burden of producing a repro. For the HW intrinsics tests, as has been pointed out, we are less interested in getting correctness coverage, and more interested in ensuring the correct instruction has been generated.\r\n\r\n> At that point, why not just pick random inputs and hard code them.\r\n\r\nThat makes the test source more fragile, harder to understand, and less adaptable should one want to use an alternate seed.\r\n\r\nI could live with using a pseudo-random seed such as the date, and then printing the seed used in the log file, but I am *not* in favor of that. I would like the general property that the behavior I get when I run my tests locally is the same as the behavior when run in the CI system. Adding a test option that would, perhaps, set an environment variable to use a pseudo-random seed would be an acceptable alternative, and that could be run as a stress test mode, but not in the standard CI tests.\r\n\r\n@dotnet/jit-contrib - other thoughts?"
      },
      {
        "user": "AndyAyersMS",
        "created_at": "2018-06-14T18:13:41Z",
        "body": "Inner loop CI is mainly about preventing regressions and not about finding bugs.\r\n\r\nNone of the commonly used CI legs should rely on \"unfixed seed\" random behavior. Failures that happen unexpectedly and are unrelated to PR changes just confuse people and waste their time. For reference see all the fun we have with GC Stress.\r\n\r\nMore exhaustive testing based on randomness to expose bugs belongs in outerloop somewhere.\r\n\r\n"
      },
      {
        "user": "BruceForstall",
        "created_at": "2018-06-14T20:21:54Z",
        "body": "Totally agree with Andy. Test runs should be 100% repeatable, with no work on the dev side.\r\n\r\nWe definitely could add more \"outerloop\" testing with more randomization. E.g., for our existing `COMPlus_JitStress` variable, we only use the values \"1\" and \"2\". We could use other values as well, since other values cause us to run different stress mixes. It's hard to see many tests benefiting from varying the random seed, but perhaps some would."
      },
      {
        "user": "tannergooding",
        "created_at": "2018-06-15T14:14:57Z",
        "body": "> Failures that happen unexpectedly and are unrelated to PR changes just confuse people and waste their time. \r\n\r\nI know I'm not going to win this battle 😄, but it is my opinion that finding bugs in the code (mostly for production, but also partially for test code) far outweighs any confusion devs might see in a given CI leg from an unrelated failure. The product, as a whole, would be considerably better if devs had the habit of doing basic investigation on a failure and logging a bug if it was unrelated to their changes (most of the time, this is fairly trivial, as the tests that do fail are clearly out of scope).\r\n\r\nIf there are tests that are flaky, then there is a bug somewhere (production or test) and it needs to be investigated/fixed. Having it \"hidden\" because we missed an edge case in testing helps no-one in the long run."
      },
      {
        "user": "PeteBoyRocket",
        "created_at": "2020-09-26T21:49:21Z",
        "body": "I've been looking for some easy code changes I can do to contribute - this one seems to fit the bill...except I'm not clear If a decision has been reached on the best way to fix this?\r\n\r\n1. Output the seed used to the trace log\r\n2. Use a fixed seed\r\n3. Use a fixed seed if injected in from the commandline (if not injected use a hardcoded fixed seed...or continue to use a random one?)\r\n4. Investigate why some tests fail for certain random numbers (how frequent are the intermittent failures -> would some simple brute force running of the tests a lot, with some logging be a practical way to find the problems?)\r\n\r\n...or another solution?"
      },
      {
        "user": "sdmaclea",
        "created_at": "2020-09-28T16:25:19Z",
        "body": "@PeteBoyRocket I think the consensus was reached on this prior to @tannergooding's last comment.  We are driving to make CI reproducible.  \r\n\r\nI would suggest the preferred solution would be to use:\r\n+  a fixed seed, unless a random one is provided by the environment variable `CORECLR_SEED`.\r\n+ print the seed used in the logs\r\n\r\nThis will allow the preferred default behavior and possibly enable us to set up random coverage legs at a later time."
      },
      {
        "user": "AndyAyersMS",
        "created_at": "2021-03-30T01:37:19Z",
        "body": "We've lived with this so hard to argue we have to fix it now.\r\n\r\nStill a good up-for-grabs issue, if somebody out there wants to pick it up."
      },
      {
        "user": "ADustyOldMuffin",
        "created_at": "2021-04-06T03:14:57Z",
        "body": "I'd like to make my first contribution and pick this up, seems simple enough."
      },
      {
        "user": "danmoseley",
        "created_at": "2021-04-06T04:22:54Z",
        "body": "Welcome @ADustyOldMuffin  it's all yours "
      }
    ]
  },
  {
    "number": 20486,
    "title": "System.Security.Cryptography.Xml KeyInfoTest.ImportKeyNode is failing",
    "created_at": "2017-03-06T19:27:22Z",
    "closed_at": "2020-01-31T14:22:56Z",
    "labels": [
      "bug",
      "area-System.Security",
      "disabled-test",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20486",
    "body": "This test is passing on full .NET but is failing on CoreFX - we need to verify what has happened. Also verify that test was properly ported from Mono as it could be some simple typo\r\n\r\n```csharp\r\n   System.Security.Cryptography.Xml.Tests.KeyInfoTest.ImportKeyNode [FAIL]\r\n      System.Security.Cryptography.CryptographicException : An error occurred parsing the key components\r\n      ---- Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The parameter is incorrect\r\n      Stack Trace:\r\n            at System.Security.Cryptography.Xml.DSAKeyValue.LoadXml(XmlElement value)\r\n            at System.Security.Cryptography.Xml.KeyInfo.LoadXml(XmlElement value)\r\n            at System.Security.Cryptography.Xml.Tests.KeyInfoTest.ImportKeyNode()\r\n         ----- Inner Stack Trace -----\r\n            at System.Security.Cryptography.CngKeyLite.ImportKeyBlob(String blobType, Byte[] keyBlob)\r\n            at System.Security.Cryptography.DSAImplementation.DSACng.ImportKeyBlob(Byte[] rsaBlob, Boolean includePrivate)\r\n            at System.Security.Cryptography.DSAImplementation.DSACng.ImportParameters(DSAParameters parameters)\r\n            at System.Security.Cryptography.Xml.DSAKeyValue.LoadXml(XmlElement value)\r\n```\r\n\r\nlikely also related failure:\r\n```csharp\r\n     System.Security.Cryptography.Xml.Tests.DSAKeyValueTest.LoadXml [FAIL]\r\n        Assert.NotNull() Failure\r\n        Stack Trace:\r\n           /home/krwq/work/corefx/src/System.Security.Cryptography.Xml/tests/DSAKeyValueTest.cs(113,0): at System.Security.Cryptography.Xml.Tests.DSAKeyValueTest.LoadXml()\r\n```\r\n\r\ncc: @tintoy @anthonylangsworth @peterwurzinger ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20486/comments",
    "author": "krwq",
    "comments": [
      {
        "user": "peterwurzinger",
        "created_at": "2017-03-06T20:10:03Z",
        "body": "@krwq This seems like it is related to  my implementation of DSAKeyValue.LoadXml if I'm not completely mistaken. "
      },
      {
        "user": "krwq",
        "created_at": "2017-03-06T21:42:39Z",
        "body": "@peterwurzinger - any pointers which could help investigate the failure? Do you perhaps know if this is a test issue or a product bug?"
      },
      {
        "user": "krwq",
        "created_at": "2017-03-06T21:56:58Z",
        "body": "@peterwurzinger I've added another test failure which is likely related"
      },
      {
        "user": "peterwurzinger",
        "created_at": "2017-03-07T08:14:33Z",
        "body": "Well I think I can have a look todays morning (9:12AM for me atm) and will try to investigate this. What looks kind of weird is, that it's passing on full framework builds but failing on corefx."
      },
      {
        "user": "krwq",
        "created_at": "2017-03-07T18:26:10Z",
        "body": "@peterwurzinger - thank you a lot for picking this up! For sanity check I recommend to rerun it on full fx in case I accidentally did something wrong. I was running many tests on Desktop so errors are completely possible."
      },
      {
        "user": "peterwurzinger",
        "created_at": "2017-03-07T20:24:53Z",
        "body": "@krwq can you please show me the concrete command to run tests against Desktop configuration? "
      },
      {
        "user": "peterwurzinger",
        "created_at": "2017-03-07T23:16:36Z",
        "body": "@krwq Just a small update:\r\nI found a way to fix this issue. If I remove the \"PGenCounter\", \"Seed\" and \"J\" - elements from the KeyValue-XML, it's actually working. I'll check which element(s) are the real cause for this and why their presence causes such a mess. But for now I'm gonna go to sleep.\r\n\r\ncc @tintoy @anthonylangsworth "
      },
      {
        "user": "peterwurzinger",
        "created_at": "2017-03-08T17:08:29Z",
        "body": "I got a new update @krwq \r\nThe exception arises from the depths of `DSA.Cng`. To make it short: A lot of unsafe code, `SafeHandles`, passing byte-arrays as parameters,... I can't go any deeper than that. What gets returned from CNG-Hell is an \"Wrong parameter\" - error.\r\n\r\nI tried to feed this with various parameter combinations, and this is what I found out:\r\n1a) The original test was failing - obviously\r\n1b) I removed the `<Seed/>` and `<PgenCounter/>` elements from the given DSA-XML. It actually **works** fine, no exception on this one.\r\n2a) I created a key with DSA.Create and copied the BASE64-values from there into a manually built Key-XML. Those included the `<Seed/>` `<PgenCounter/>` elements, the test was **failing** again.\r\n2b) I removed the `<Seed/>` and `<PgenCounter/>` elements from the newly created DSA-XML. Again no exception on this one, it **works**.\r\n3) I copied the DSA-Key from `DSAKeyValueTest.LoadXml`, which also _does include_ the `<Seed/>` and `<PgenCounter/>` elements. **To my fascination this test run also succeeded**\r\n\r\nSo we got 5 different scenarios, which do **not** come up with a common scheme. How to proceed? I cannot debug any deeper. \r\n\r\nCC @tintoy @anthonylangsworth "
      },
      {
        "user": "krwq",
        "created_at": "2017-03-08T21:24:29Z",
        "body": "@peterwurzinger for running tests against full .NET: (thanks to @joperezr)\r\nFrom root call:\r\nBuild.cmd -framework:netfx\r\nBuild-tests.cmd -framework:netfx\r\n\r\nFor individual project test build:\r\nBuild.cmd -framework:netfx (it is required to build the whole layout first)\r\nMsbuild <yourtestproject>.csproj /p:TargetGroup=netfx /t:rebuildandtest\r\n\r\nI've personally had some difficulties with the above instructions as it just didn't work for me at least on Windows. The other option which has worked for me despite any potential issues with the build is to simply copy paste the piece testing something to a new app targeting netfx and run. I'll let you know if there are some updates to the instructions.\r\n\r\nFor the error, It seems to me that error is fairly hard to debug in the current state. Our usual procedure is that we need to split it into managable and easier to understand pieces: Specifically, we need to verify if the error is on the crypto-xml side or on the DSA side (possibly few more tests which would help to find out), if the error is on the DSA side we need to file an issue with smallest possible repro and if crypto-xml's then we need to figure out what should we pass to DSA for this scenario to work (if you believe there are few scenarios broken then we possibly need a test per broken scenario).\r\n\r\nPlease let me know if you need further help as I got easier way to get to some of the internals so it might be easier for me to get into that (i.e. by talking to people more familiar with some pieces of code). I will likely not get into it right away though.\r\n\r\nEDIT: @peterwurzinger - it seems like above instructions  might not work correctly - recently there were some engineering changes and someone in our team is currently on making that work - seems like the only reasonable way to test right now is to copy&paste 😞 "
      },
      {
        "user": "tintoy",
        "created_at": "2017-03-08T21:37:24Z",
        "body": "It's odd, because the phrase \"the parameter is incorrect\" screams `E_INVALIDARG` at me. And I wouldn't have expected to find that in corefx since it's terminology you normally only see coming out of unmanaged implementations (i.e. ones that use `HRESULT`s).\r\n\r\nStill, I suppose someone could have tried to port as much of the old crypto code as possible, even if some of those implementations are unmanaged. Or maybe someone's explicitly setting `E_INVALIDARD` on `Exception.HResult`?\r\n\r\nI'm a bit flat-out today, but if I get time tonight I'll try to have another look at this (even if only for my own curiosity)."
      },
      {
        "user": "krwq",
        "created_at": "2017-03-08T21:38:40Z",
        "body": "@tintoy @peterwurzinger it is possible that we might be using wrong implementation assembly - I've seen that before (on Linux we used Windows assembly which was causing really weird errors)"
      },
      {
        "user": "krwq",
        "created_at": "2017-04-06T22:48:31Z",
        "body": "This one is quite a mess - currently no clue why this is failing 😉 "
      },
      {
        "user": "krwq",
        "created_at": "2017-04-10T20:47:06Z",
        "body": "I've split this test a little bit so that we are able to tell what has happened and what is exactly missing. Currently seems to me that J is missing in DSAKeyValue after we import and export. I'm not ever seeing J in DSAKeyValue when I create that on Desktop - I'll further investigate if this is something we should be parsing or not."
      },
      {
        "user": "krwq",
        "created_at": "2017-04-10T21:17:16Z",
        "body": "Ok, J is optional and is only an optimization. I'll make a test accept either null or correct value"
      }
    ]
  },
  {
    "number": 20376,
    "title": "Type: Needs api to distinguish SzArrays from Multidim arrays of rank 1.",
    "created_at": "2017-03-01T18:01:23Z",
    "closed_at": "2020-01-31T14:16:01Z",
    "labels": [
      "api-approved",
      "area-System.Reflection",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20376",
    "body": "The SZ array type (\"T[]\") and rank 1 multidim arrays (\"T[*]\") are distinct and non-interchangable types in .NET. However, the Reflection surface area contains no api to distinguish. (The most \"obvious\" approach (\"t is Array && t.GetArrayRank() == 1\") captures both.) \r\n\r\nProposal:\r\n\r\n   Add a new property to System.Type:\r\n```c#\r\n      public virtual bool IsSZArray { get { throw NotImplemented.ByDesign; }} // Subclass needs to implement\r\n```\r\nAlternate names that have been proposed:\r\n       IsSZArray\r\n       IsVector\r\n\r\nThe name \"IsSzArray\" has the small advantage that it already exists in both CoreClr and CoreRt - it's just not public.\r\n\r\n\r\n\r\n       ",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20376/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "MichalStrehovsky",
        "created_at": "2017-03-01T18:23:46Z",
        "body": "Would it make sense to also add `IsMdArray`?\r\n\r\nI don't know how common the pattern is in reflection, but in the CoreRT type system, we ended up adding such method (dotnet/corert#1925) because it's just easier to read and better captures the intent (as you can see in the PR)."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-03-01T20:02:38Z",
        "body": "I prefer `IsSZArray`as the Z being lower case seems strange. \r\n\r\nI prefer either capitalisation to `IsVector`, since vector has a few other meanings, and I think most people who would want to query this property would be familiar with the term *sz-array*."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-07T18:54:35Z",
        "body": "API review: Approved as `IsSZArray` (with upper case Z to adhere to CoreFX naming rules)\r\n\r\nNext step: Needs exposure from CoreCLR/CoreRT, potentially rename in CoreCLR/CoreRT.\r\nComplexity: Medium."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-07T18:55:43Z",
        "body": "Top post updated to `IsSZArray`.\r\n@MichalStrehovsky please file a separate issue for `IsMDArray` - probably as `IsMultiDimensionalArray`. It seems to make sense."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-03-08T23:40:09Z",
        "body": "I can take this one, but not until the weekend, so if someone else wants to jump on it in the meantime, feel free."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-09T00:01:15Z",
        "body": "Assigning to you @JonHanna ..."
      },
      {
        "user": "ghost",
        "created_at": "2017-03-10T21:01:33Z",
        "body": "Already working on the corert half of this."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-03-11T00:42:50Z",
        "body": "@AtsushiKan are you far into the corert? I'd also started on that."
      },
      {
        "user": "ghost",
        "created_at": "2017-03-11T00:45:23Z",
        "body": "@JonHanna  - yes, it's already in review internally and it involves some other followup changes beyond just renaming IsSzArray,"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-03-11T00:55:13Z",
        "body": "Cool, I'll leave that alone, so."
      }
    ]
  },
  {
    "number": 20207,
    "title": "Remove \"'$(TargetGroup)'=='netstandard' in configurations in test projects.",
    "created_at": "2017-02-13T22:29:13Z",
    "closed_at": "2020-01-31T14:05:19Z",
    "labels": [
      "area-Infrastructure-libraries",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20207",
    "body": "We should remove these because in the case where a project has a non-netstandard configuration in the configurations.props, that configuration will be picked and this condition will be false causing the tests to not run in the normal case.\r\n\r\nWhen doing this, make sure tests that are NOT conditioned to be netstandard are instead conditioned to only be non-netstandard, eg ,.\r\n `<ItemGroup Condition=\"'$(TargetGroup)'=='netcoreapp'\">` or \r\n` <ItemGroup Condition=\"'$(TargetGroup)'!='netstandard' \">`\r\nThis will means that when we do build the netstandard configuration explicitly, we only pick up tests running against netstandard API.\r\n\r\n@joperezr to make sure I stated this correctly.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20207/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-02-13T22:29:54Z",
        "body": "I see 53 matches of \"= *'netstandard'\" in our test csproj's."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-14T01:33:18Z",
        "body": "@weshaggard I believe this is the only work required to make sure netstandard tests actually run (as I expect them anyway). Let mek now if you believe there are tests that should be running but are not running for some other issue."
      },
      {
        "user": "joperezr",
        "created_at": "2017-02-14T18:11:03Z",
        "body": "The only part that I'm not convinced on doing is:\r\n\r\n>When doing this, make sure tests that are NOT conditioned to be netstandard are instead conditioned to only be non-netstandard\r\n\r\nThis is because we have a lot of test projects where we don't currently have a condition, but they are supported by netstandard. I would say that the right way to do this, is to:\r\n - Remove all Conditions of `'$(TargetGroup)'=='netstandard'`\r\n - Go through the rest of the ItemGroups, and check if they can actually build as netstandard, by building `msbuild *.csproj /p:TargetGroup=netstandard` and if there are errors because some API is netcoreapp specific, then separate those files to an itemgroup with a condition of `'$(TargetGroup)'=='netcoreapp'`"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-14T22:05:46Z",
        "body": ">@weshaggard I believe this is the only work required to make sure netstandard tests actually run \r\n\r\nYes I agree with cleaning up the conditions and that will ensure the tests build and run in the netcoreapp configuration. However there is still a mode where we want to build the test projects as netstandard and run them on netcoreapp, which is ever so slightly different then building the tests as netcoreapp and running them as netcoreapp. I do agree with @jkotas comment in one of the other threads that for the netstandard builds of the tests we can do those as part of an outerloop run. "
      },
      {
        "user": "ViktorHofer",
        "created_at": "2019-06-23T18:49:53Z",
        "body": "Closing as we don't have netstandard tests anymore."
      }
    ]
  },
  {
    "number": 7406,
    "title": "SIMD tests should include invoking by Reflection",
    "created_at": "2017-02-11T01:53:05Z",
    "closed_at": "2024-02-05T05:10:59Z",
    "labels": [
      "Hackathon",
      "good first issue",
      "test-bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7406",
    "body": "We need to validate that all the IL implementations are correct when `Vector<T>` is accelerated (i.e. its size is selected according to the hardware, e.g. AVX), but the method is invoked by Reflection. We should add tests to check this.\r\n\r\ncategory:correctness\r\ntheme:testing\r\nskill-level:beginner\r\ncost:medium\r\n\r\nimpact:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7406/comments",
    "author": "CarolEidt",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2017-02-11T05:54:36Z",
        "body": "Can't the JIT override the IL implementation so inconsistencies are avoided? Though that would still need to be tested so probably it's not helping much..."
      },
      {
        "user": "tannergooding",
        "created_at": "2024-02-05T05:10:59Z",
        "body": "Tests were updated to consistently invoke a reflection path some time back."
      }
    ]
  },
  {
    "number": 20179,
    "title": "Remove versioned defines",
    "created_at": "2017-02-10T19:48:30Z",
    "closed_at": "2020-01-31T15:22:37Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20179",
    "body": "We should migrate to versionless platform defines. @joperezr @weshaggard can we do this now if not what has to come first? I see you already renamed all the C# file suffixes to be versionless.\r\n\r\n\r\n- [x]  #if netcoreapp11 -->  #if netcoreapp\r\n- [ ]  #if netstandard17, #if netstandard10 --> #if netstandard\r\n- [x] #if netcore50 --> #if uap\r\n- [x] #if netcore50aot --> #if uapaot\r\n\r\nincidentally\r\n#if NET46 -> don't change\r\n\r\n- [x] # if NET_4_5 -> dead\r\n\r\n\r\nPerhaps you already have something tracking this kind of thing.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20179/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T19:51:47Z",
        "body": "We can do that for all the test projects because we don't care about the versioned target frameworks for those projects. However we might still need to keep some of these for the ref/src projects if we care about that build configuration for that project. "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-10T19:59:17Z",
        "body": "Can you clarify? I thought we now only build ref/src for the latest version. So we would never define eg netcoreapp11 would we?\r\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T20:08:23Z",
        "body": "For ref/src that ship as an individual nuget package we may need to still have non-latest build configurations building so that the package can contain the correct assets. For anything that doesn't ship in an individual package you are correct they should always just target the latest (i.e. versionless) targets. "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-10T20:47:18Z",
        "body": "Ah, so we go back to the issue of clearly distinguishing what is its own package. It's too bad we don't segreate the rest of corefx from those."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-10T20:47:54Z",
        "body": "I thought we doing harvesting for non latest configurations."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-10T21:07:06Z",
        "body": ">Ah, so we go back to the issue of clearly distinguishing what is its own package. It's too bad we don't segreate the rest of corefx from those.\r\n\r\nUnfortunately it is a clean cut in all cases. Consider Immutable collections it is ships in the platform package and in an individual package. \r\n\r\n>I thought we doing harvesting for non latest configurations.\r\n\r\nWe do in a lot of cases but in some cases, again like Immutable, we still want to produce live updated builds with new fixes for older targets. \r\n"
      },
      {
        "user": "jkotas",
        "created_at": "2017-02-11T21:22:01Z",
        "body": "I think `#if netstandard` should be deleted (and code under it kept). I do not think we need it."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-02-13T16:49:17Z",
        "body": ">I think #if netstandard should be deleted (and code under it kept). I do not think we need it.\r\n\r\nI agree in general the defines should be targeting a specific platform (i.e. netcoreapp, uap, netfx, etc) however there may be cases for libraries above netstandard to use that define in some cases if it is easier then negating the other specific platforms."
      },
      {
        "user": "jkotas",
        "created_at": "2017-02-13T18:14:41Z",
        "body": "> there may be cases for libraries above netstandard to use that define in some cases if it is easier then negating the other specific platforms.\r\n\r\nAgree it makes sense to use it in these cases if they show up."
      },
      {
        "user": "jkotas",
        "created_at": "2020-01-31T15:22:37Z",
        "body": "The defines are in sync with the SDK ones now."
      }
    ]
  },
  {
    "number": 7372,
    "title": "Optimize default(T) != null at compile time",
    "created_at": "2017-02-08T20:49:57Z",
    "closed_at": "2020-01-31T01:06:46Z",
    "labels": [
      "help wanted",
      "area-CodeGen-coreclr",
      "optimization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7372",
    "body": "`default(T) != null` in generic code is a popular* pattern to determine if `T` is a nullable or a reference type.\r\n\r\nExample:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static bool IsNotNullableValueType<T>()\r\n    {\r\n        return default(T) != null;\r\n    }\r\n\r\n    private static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(IsNotNullableValueType<string>());\r\n        Console.WriteLine(IsNotNullableValueType<int>());\r\n        Console.WriteLine(IsNotNullableValueType<int?>());\r\n    }\r\n}\r\n```\r\n\r\nWill print `False True False`.\r\n\r\nWhile the codegen for the \"it's a reference type\" case is pretty efficient (we can do better though...):\r\n\r\n```nasm\r\nxor         eax,eax  \r\ntest        rax,rax  \r\nsetb        al  \r\nmovzx       eax,al  \r\nret  \r\n```\r\n\r\nFor the \"it's a valuetype\" and \"it's a nullable\" case we get a useless allocation:\r\n\r\n```nasm\r\nsub         rsp,28h  \r\ncall        __NewHelper_System_Private_CoreLib_System_Int32\r\nxor         edx,edx  \r\nmov         dword ptr [rax+8],edx  \r\ntest        rax,rax  \r\nseta        al  \r\nmovzx       eax,al  \r\nadd         rsp,28h  \r\nret  \r\n```\r\n\r\nThe places that use this pattern would likely benefit from being able to statically evaluate this because it could lead to elimination of entire branches and smaller code (aside from removing a useless allocation).\r\n\r\n\\* There are 17 hits for the `default\\(.*\\) == null` regular expression in the CoreFX repo and a couple more for the \"not equal to null\" case.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7372/comments",
    "author": "MichalStrehovsky",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2017-02-08T21:18:08Z",
        "body": "> default(T) == null in generic code is a popular* pattern to determine if T is a nullable or a reference type.\r\n\r\nHmm, == null works pretty well for me:\r\n```asm\r\n; reference types\r\n       B801000000           mov      eax, 1\r\n       C3                   ret\r\n; value types \r\n       4883EC28             sub      rsp, 40\r\n       33C0                 xor      eax, eax\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n; nullable types\r\n       50                   push     rax\r\n       33C0                 xor      rax, rax\r\n       48890424             mov      qword ptr [rsp], rax\r\n       33C0                 xor      rax, rax\r\n       488D1424             lea      rdx, bword ptr [rsp]\r\n       488902               mov      qword ptr [rdx], rax\r\n       803C2400             cmp      byte  ptr [rsp], 0\r\n       0F94C0               sete     al\r\n       0FB6C0               movzx    rax, al\r\n       4883C408             add      rsp, 8\r\n       C3                   ret\r\n```\r\nThe nullable case isn't great but at least it doesn't allocate/box/whatever.\r\n\r\n> call        __NewHelper_System_Private_CoreLib_System_Int32\r\n\r\nWhat's this NewHelper thing? Is this CoreRT specific?\r\n\r\n> and a couple more for the \"not equal to null\" case.\r\n\r\nThe assembly code you have posted appears to be generated by `!= null` rather than `== null`. \r\n\r\nHeh, the `x != null` mess. There's no `cne` instruction in IL so the C# compiler emits `cgt.un`. The JIT is lame and doesn't recognize that unsigned `x > 0` is the same as `x != 0`, I keep running into this issue and it's quite possible that this is what happens in your examples as well."
      },
      {
        "user": "MichalStrehovsky",
        "created_at": "2017-02-08T21:25:05Z",
        "body": "> What's this NewHelper thing? Is this CoreRT specific?\r\n\r\nYeah, I was doing this on CoreRT because that's what I have set up these days.\r\n\r\n> The assembly code you have posted appears to be generated by != null rather than == null.\r\n\r\nYes - was testing that and assumed it's the same for `==`. I'll rename the issue then and update the original posting. Good catch! I assume this will be much lower priority then. `!= null` is less popular."
      },
      {
        "user": "mikedn",
        "created_at": "2017-02-08T21:56:49Z",
        "body": "I verified (hacked the importer) that this is indeed caused by `x cgt.un 0` not being treated as `x cne 0`.\r\n\r\nPartially related issue: dotnet/runtime#6815"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-02-09T18:51:51Z",
        "body": "@dotnet/jit-contrib "
      },
      {
        "user": "VSadov",
        "created_at": "2017-02-17T01:07:40Z",
        "body": "For the \"popularity\" -\r\n\r\nThis pattern may be emitted by C# compiler when `?.` is used on generic targets. So it may be more common than searching through sources would indicate.\r\n\r\nExample:\r\n```C#\r\n        static void TryDispose<T>(ref T disposable) where T:IDisposable\r\n        {\r\n            disposable?.Dispose();\r\n        }\r\n```\r\n\r\n"
      },
      {
        "user": "mikedn",
        "created_at": "2017-02-21T16:52:24Z",
        "body": ">static void TryDispose<T>(ref T disposable) where T:IDisposable\r\n{\r\n    disposable?.Dispose();\r\n}\r\n\r\nThis one doesn't appear to be affected as it uses `brtrue` rather than `cgt.un`.\r\n"
      },
      {
        "user": "VSadov",
        "created_at": "2017-02-21T19:01:36Z",
        "body": "@mikedn - good to know that `?.` is not affected. \r\nI wonder if it is possible to have covered by tests? \r\nWould  not be nice if it starts boxing one day because of a regression."
      }
    ]
  },
  {
    "number": 20041,
    "title": "Remove test attributes only necessary for running on older CoreFX versions",
    "created_at": "2017-01-27T19:29:20Z",
    "closed_at": "2020-01-31T13:55:29Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/20041",
    "body": "Remove these\r\n`[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp1_0]`\r\n`[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp1_1]`\r\n\r\nWe do not have plans to run the CoreFX tests against older versions of .NET Core so these are unnecessary and we should remove them all.\r\n\r\nWe still need the versionless one `[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]` where a test only passes on Desktop",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/20041/comments",
    "author": "danmoseley",
    "comments": [
      {
        "user": "JonHanna",
        "created_at": "2017-01-27T21:33:11Z",
        "body": "`System.Tests.StringTests.Join_ObjectArray_WithNullIssue` fails in CI if `[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp1_1]` is removed."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-01-27T22:10:45Z",
        "body": "@JonHanna some of the tests like those might need to be changed to use the version-less one as in it should have been `[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)] `. "
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-27T22:20:08Z",
        "body": "Ah that makes sense. It's the only one set for skipping that target, so maybe it got missed in a previous sweep for that. "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-01-27T23:01:00Z",
        "body": "Do you want to replace that last one  `[SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp1_1)]` so we can close this?"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-27T23:23:18Z",
        "body": "Yep. Chores got in the way of doing it sooner."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-01-28T00:17:36Z",
        "body": "Thanks @JonHanna !"
      }
    ]
  },
  {
    "number": 7199,
    "title": "[RyuJIT/x86/Checked] ngen dump assert",
    "created_at": "2017-01-05T21:58:02Z",
    "closed_at": "2020-01-31T00:57:06Z",
    "labels": [
      "bug",
      "arch-x86",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7199",
    "body": "On the last build when I try to execute `coreclr\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root>crossgen.exe System.Private.CoreLib.dll  with complus_ngendump=* `\r\nI see:\r\n```\r\nRESOLVING BB BOUNDARIES\r\n-----------------------\r\nResolution Candidates:\r\nAssert failure(PID 14924 [0x00003a4c], Thread: 17084 [0x42bc]): Assertion failed 'varNum < comp->lvaCount' in 'SR:get_ArgumentOutOfRange_Enum():ref' (IL size 11)\r\n\r\n    File: c:\\git\\coreclr\\src\\jit\\compiler.cpp Line: 8106\r\n    Image: C:\\git\\coreclr\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\crossgen.exe\r\n```\r\nx64 works fine. Looks like it is a fresh problem.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7199/comments",
    "author": "sandreenko",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2017-01-06T11:53:27Z",
        "body": "Likely broken by dotnet/coreclr#8207. `identifyCandidates` is supposed to initialize `resolutionCandidateVars` but it doesn't do so if `lvaCount` is 0. When `dumpConvertedVarSet` tries to enumerate it the set sometimes happen to have set bits (0xFFFFFFFF usually) but there are no lclvars so the assert fires. As far as I can tell there may be other code (`buildIntervals` at least) that uses the set even if `lvaCount` is 0 so there may be other issues in addition to that dump assert.\r\n\r\ncc @CarolEidt"
      },
      {
        "user": "michellemcdaniel",
        "created_at": "2017-01-06T17:21:22Z",
        "body": "Confirmed that @CarolEidt's change introduced this."
      },
      {
        "user": "CarolEidt",
        "created_at": "2017-01-06T19:22:41Z",
        "body": "Yes, sorry - I noticed this working on another change, and put a fix in with that change, but as that's not yet ready I will make this change separately."
      }
    ]
  },
  {
    "number": 19812,
    "title": "Many XML tests are outerloop... why?",
    "created_at": "2017-01-04T16:58:24Z",
    "closed_at": "2020-01-31T13:41:26Z",
    "labels": [
      "area-System.Xml",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19812",
    "body": "Lots of the XML test projects are outerloop.  Why?  It'd be great to a) consolidate them into fewer test projects, and b) make most or all of them innerloop, unless there's a really good reason to keep them outer.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19812/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-01-04T17:38:16Z",
        "body": "@krwq @sepidehMS "
      },
      {
        "user": "sepidehkh",
        "created_at": "2017-01-17T18:12:56Z",
        "body": "The reason for them being OuterLoop is that these tests are still using the old test structure and were never properly modified to Xunit structure. I will assign some time to break these bundles into separate tests."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-27T22:48:30Z",
        "body": "These are passing and running (albeit not in CI) and we're not churning Xml much right now so I don't think it's particularly urgent to refactor them. Milestone= future."
      }
    ]
  },
  {
    "number": 19804,
    "title": "Add test to ensure SslStream.ReadAsync() does not enqueue work before call to wrapped stream's BeginRead",
    "created_at": "2017-01-04T00:50:31Z",
    "closed_at": "2020-01-31T13:41:03Z",
    "labels": [
      "area-System.Net.Security",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19804",
    "body": "@stephentoub as discussed. Not sure if the title is good, feel free to change.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19804/comments",
    "author": "cesarblum",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-01-04T16:46:48Z",
        "body": "Can you provide link to the discussion as context please?"
      },
      {
        "user": "Priya91",
        "created_at": "2017-02-22T00:03:06Z",
        "body": "@cesarbs Can you provide link to product change or the discussion please.."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-02-22T00:05:13Z",
        "body": "There is no link.  @cesarbs and I chatted in person."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-02-22T00:06:20Z",
        "body": "The context is that these Stream wrapper types, like SslStream, that wrap other streams, in general (unless by design otherwise) should not be queueing the calls to BeginRead/BeginWrite from ReadAsync/WriteAsync; they should be invoking them synchronously.  So the issue is to add a test that verifies that."
      }
    ]
  },
  {
    "number": 7177,
    "title": "ECMA/JIT/Roslyn switch value inconsistency",
    "created_at": "2016-12-31T09:58:48Z",
    "closed_at": "2020-01-31T00:55:59Z",
    "labels": [
      "bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7177",
    "body": "IL `switch` description from the ECMA spec doesn't clearly state what type the switch value is expected to have:\r\n```\r\nThe switch instruction pops value off the stack and compares it, as an unsigned integer, to n. \r\n```\r\nNote that it says \"unsigned integer\", not \"unsigned int32\". Contrast this with the `ldelem` description that states:\r\n```\r\nThe ldelem instruction loads the value of the element with index index (of type native int\r\nor int32) in the zero-based one-dimensional array array\r\n```\r\n\r\nNow, RyuJIT64 happily accepts any integer type (importer code has `assertImp(genActualTypeIsIntOrI(op1->TypeGet()));`) and if the type is not already `TYP_I_IMPL` (aka `native int`) then it sign extends the switch value to `TYP_I_IMPL`. The fact that it sign extends seems odd considering that after that we have an unsigned compare.\r\n\r\nOn the other hand Roslyn seems to think that IL `switch` accepts only `unsigned int32` and if you try to switch on a `long` it generates IL code like:\r\n```\r\n    IL_0007:  ldloc.0\r\n    IL_0008:  dup\r\n    IL_0009:  ldc.i4.2\r\n    IL_000a:  conv.i8\r\n    IL_000b:  ble.un.s   IL_0010\r\n\r\n    IL_000d:  pop\r\n    IL_000e:  br.s       IL_002d\r\n\r\n    IL_0010:  conv.u4\r\n    IL_0011:  switch     (\r\n                          IL_0024,\r\n                          IL_0027,\r\n                          IL_002a)\r\n```\r\nIt does a separate check to see if the `long` value is within range and the converts it to `unsigned int32`. This wouldn't be necessary if IL `switch` does in fact accept any integral types.\r\n\r\nIn the end we get code like:\r\n```asm\r\nG_M57965_IG02:\r\n       488B4228             mov      rax, qword ptr [rdx+40]\r\n       4883F802             cmp      rax, 2\r\n       7732                 ja       SHORT G_M57965_IG10\r\nG_M57965_IG03:\r\n       4863D0               movsxd   rdx, eax\r\n       4883FA02             cmp      rdx, 2\r\n       7729                 ja       SHORT G_M57965_IG10\r\n       488D052E000000       lea      rax, [reloc @RWD00]\r\n       8B0490               mov      eax, dword ptr [rax+4*rdx]\r\n       488D0DDCFFFFFF       lea      rcx, G_M57965_IG02\r\n       4803C1               add      rax, rcx\r\n       FFE0                 jmp      rax\r\n```\r\nI'm not sure what needs to happen here. Maybe the spec needs to be clarified, maybe the JIT simply decided to be more relaxed and IL `switch` indeed accepts only `unsigned int32`.\r\n\r\nI'd be happy to hear an explanation for the sign extension that happens in the JIT importer. The code generated for a switch is already pretty large as is and doing sign extend instead of zero extend just wastes a byte. IMO the importer should not do anything here, it's codegen's job to zero extend the switch value before using it for indexing the switch table.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7177/comments",
    "author": "mikedn",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2017-01-03T11:22:31Z",
        "body": "> Now, RyuJIT64 happily accepts any integer type (importer code has assertImp(genActualTypeIsIntOrI(op1->TypeGet()));) \r\n\r\nThat's not quite true, the verifier rejects non-INT types:\r\n\r\n```C++\r\nif (tiVerificationNeeded)\r\n{\r\n    Verify(impStackTop().seTypeInfo.IsType(TI_INT), \"Bad switch val\");\r\n}\r\n```\r\nThis makes the sign extension of the switch value even more questionable."
      },
      {
        "user": "sivarv",
        "created_at": "2017-01-05T01:05:29Z",
        "body": "CC @dotnet/jit-contrib "
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-01-11T18:42:11Z",
        "body": "@CarolEidt Can you suggest the right way to resolve this inconsistency?"
      },
      {
        "user": "CarolEidt",
        "created_at": "2017-01-11T19:45:42Z",
        "body": ">> `The switch instruction pops value off the stack and compares it, as an unsigned integer, to n.`\r\n\r\n> Note that it says \"unsigned integer\", not \"unsigned int32\".\r\n\r\nBut the instruction format shows that it is expecting an unsigned int 32:\r\n\r\n**III.3.66 switch – table switch based on value**\r\n\r\n| Format | Assembly Format | Description\r\n|---|---|---\r\n|45 \\<unsigned int32\\> \\<int32\\>… \\<int32\\> | switch ( t1, t2 … tN ) | Jump to one of n values.\r\n\r\nSo I think that @mikedn is right and we should be zero-extending."
      }
    ]
  },
  {
    "number": 1396,
    "title": "Improve ReflectionReader.ReadISerializable's Performance",
    "created_at": "2016-12-22T20:12:52Z",
    "closed_at": "2020-02-12T20:46:44Z",
    "labels": [
      "enhancement",
      "area-Serialization",
      "help wanted",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1396",
    "body": "`ReflectionReader.ReadISerializable` currently uses Constructor.Invoke to create ISerializable objects, which is very slow. We need to investigate if there's any better way to create the objects.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1396/comments",
    "author": "shmao",
    "comments": [
      {
        "user": "StephenBonikowsky",
        "created_at": "2020-02-12T20:46:44Z",
        "body": "This will come back when async serialization happens."
      }
    ]
  },
  {
    "number": 1414,
    "title": "Potential Issues with Deserializing ISerializable Types",
    "created_at": "2016-12-21T01:19:36Z",
    "closed_at": "2020-02-28T22:42:54Z",
    "labels": [
      "area-Serialization",
      "help wanted",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/1414",
    "body": "There's a couple of potential issues with deserializing ISerializable types,\r\n\r\n1. An ISerializable type's OnDeserializing callback is not called on the actual deserialized object.\r\n2. The object added to XmlObjectSerializerReadContext is not the actual deserialized, which may cause wrong behavior in \"IsReference=true\" scenarios.\r\n\r\nThe issues occur with both ILGen based and reflection only based serialization. To investigate the issue, we need to look into the following methods,\r\n\r\n`ReflectionReader.ReflectionReadClass`\r\n`XmlFormatReaderGeneratorCriticalHelper.GenerateClassReader`\r\n`JsonFormatReaderGenerator.CriticalHelper.GenerateClassReader`",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/1414/comments",
    "author": "shmao",
    "comments": [
      {
        "user": "StephenBonikowsky",
        "created_at": "2020-02-28T22:42:54Z",
        "body": "No customer asks for this."
      }
    ]
  },
  {
    "number": 7139,
    "title": "Introduce a base class for REGDISPLAY",
    "created_at": "2016-12-15T01:48:34Z",
    "closed_at": "2020-01-31T00:53:57Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7139",
    "body": "While bring up x86/Linux, I found that the current definition of ``REGDISPLAY`` has several duplicated code  (especially code related with ``WIN64EXCEPTIONS``).\r\n\r\nIt would be better to introduce a base class to remove such code duplication.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7139/comments",
    "author": "parjong",
    "comments": [
      {
        "user": "parjong",
        "created_at": "2016-12-20T01:54:38Z",
        "body": "If we rename Esp as SP in x86 REGDISPLAY, we may unify most of x86 and arm REGDISPLAY structure, which makes it more easy to maintain."
      },
      {
        "user": "gkhanna79",
        "created_at": "2016-12-21T19:05:14Z",
        "body": "CC @rahku "
      }
    ]
  },
  {
    "number": 7119,
    "title": "Cleanup dirs.proj, *.nativeproj",
    "created_at": "2016-12-09T08:12:30Z",
    "closed_at": "2020-01-31T00:52:51Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7119",
    "body": "Hi here,\r\nThis is just a question to understand how the build is organized.\r\nThe documentation says that CMake is used for building, but I'm intrigued by `dirs.proj` and `*.nativeproj` files and their usage. It seems that they duplicate a part of what existing CMakeLists.txt contains.\r\nWhat are they used for?",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7119/comments",
    "author": "xoofx",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-12-09T13:58:36Z",
        "body": "They are part of the legacy build system that we are not using anymore. They can be deleted (except from under the JIT directory where they are still used by the internal build)."
      },
      {
        "user": "jkotas",
        "created_at": "2016-12-09T14:13:29Z",
        "body": "We can keep this issue open to track cleaning these up."
      },
      {
        "user": "robert-matusewicz",
        "created_at": "2016-12-22T13:04:19Z",
        "body": "it's up for grabs and it looks like nice task for a guy that want to contribute something on a spare time.  Can I take it? cc @xoofx @jkotas "
      },
      {
        "user": "jkotas",
        "created_at": "2016-12-22T17:44:00Z",
        "body": "@matekm It is yours. Thank you!"
      },
      {
        "user": "robert-matusewicz",
        "created_at": "2016-12-23T10:35:49Z",
        "body": "cool, thanks @jkotas !\r\n\r\nI noted that there are few directories that are empty, for example 'src\\zap\\wks' or 'src\\utilcode\\dac' (it contain only CMakeLists.txt). Should this be removed too?\r\n\r\nOne more question, what about *.settings.targets files? Leave them or remove them?"
      },
      {
        "user": "jkotas",
        "created_at": "2016-12-23T13:27:48Z",
        "body": "> it contain only CMakeLists.txt\r\n\r\nCMakeLists files should stay - they are used by the live build. Also, everything under src\\jit should stay as I have said above.\r\n\r\n> *.settings.targets files\r\n\r\nThey can be removed. As well as other similar files references by the nativeproj files being removed, for example src/vm/vm.settings or src/vm/vm.targets."
      },
      {
        "user": "mikedn",
        "created_at": "2016-12-23T13:52:01Z",
        "body": "> As well as other similar files references by the nativeproj files being removed, for example src/vm/vm.settings or src/vm/vm.targets.\r\n\r\nAnd probably .props files too."
      }
    ]
  },
  {
    "number": 7112,
    "title": "Explore allowing a command-line parameter to control CORE_LIBRARIES in corerun",
    "created_at": "2016-12-08T22:26:03Z",
    "closed_at": "2022-08-24T21:57:59Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/7112",
    "body": "We are currently in the process of revamping the build system used in corefx. One of the changes we are interested in making to our testing process is having two segregated folders: one for the runtime and framework binaries, and then a separate one (or set) containing individual test assemblies. We'd like to avoid having to copy everything into multiple folders like we are doing today, because it wastes a ton of space or requires copious filesystem linking.\r\n\r\n```\r\nbin/runtime/\r\n           / coreclr.dll\r\n           / corerun.exe\r\n           / xunit.console.netcore.exe\r\n\r\nbin/tests/\r\n         /System.Runtime.Tests/System.Runtime.Tests.dll\r\n         /System.Console.Tests/System.Console.Tests.dll\r\n```\r\n\r\nWe can easily achieve this by just executing the test runner from the first folder, pointing it at one of the test assemblies, and setting `CORE_LIBRARIES=<testfolder>`. It would be interesting to explore whether we can expose an explicit command-line parameter that either controls CORE_LIBRARIES, or has the same effect (dumping the folder onto the TPA list).",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/7112/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-08-24T21:57:57Z",
        "body": "This is no longer relevant since the two repos have consolidated. This is also possible from `corerun` using the `-clr-path` flag."
      }
    ]
  },
  {
    "number": 19497,
    "title": "Bugs with argument validation to Expression.Property with indices",
    "created_at": "2016-11-28T14:23:23Z",
    "closed_at": "2020-01-31T13:22:42Z",
    "labels": [
      "enhancement",
      "area-System.Linq.Expressions",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19497",
    "body": "1. The argument name to use in exceptions is assumed to always be \"indexer\" but there is a path to it where the relevant argument is called \"propertyName\".\r\n2. If a property has a setter with no parameters then before the validation check designed to catch that takes place the property-name taking overload will throw an `OverflowException`. This can happen even if another overload is correctly specified, so can throw on code that should not\r\nthrow at all.\r\n3. While the last argument type to the setter is checked for matching the type of the parameter, this is not done for the getter.\r\n4. When an instance is given for a static property, or none for an instance property, the error message complains about methods, not properties.\r\n5. Error message for finding a property by name with a null indexer expression throws `NullReferenceException` trying to build error message.\r\n6. Check for property found by name has at least a getter or a setter happens after attempt to validate the (non-existent) getter, throwing a `NullReferenceException`. This could block an attempt to use an overload that should be successful.\r\n7. If there is an ambiguous match on an overloaded index property, `InvalidOperationException` is thrown, though `ArgumentException` seems more appropriate.\r\n\r\nOf these number 7 seems perhaps risky to fix (a breaking change that could quite plausibly break real code) and is debatable anyway.  The rest should be fixed.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19497/comments",
    "author": "JonHanna",
    "comments": [
      {
        "user": "VSadov",
        "created_at": "2016-11-29T19:27:19Z",
        "body": "Changing exception in a case of a failure does not seem very breaking.\r\n\r\nOne thing to note - it is generally not a goal of expression tree factories to catch all possible ways to make a broken tree. At very minimum it just needs to make a tree that is well-formed. It may yet fail to compile. Some checks are too expensive  or impossible to do at construction time.\r\n\r\nEssentially, the factory just tries to fail earlier when code is clearly in error and violations can be caught cheaply, so if some checks are too involved, we do not have to do them.\r\n\r\nNot sure if the above applies to the change. The things mentioned seem like cheap to validate or just bugs in validation that is already there.\r\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-29T19:57:42Z",
        "body": "Yes, these are all issues with the validation that's there. A comment on the method that does most of it says either the non-indexer property factory should have more checks or it should have less. It should probably be in the middle, but what's there should be correct in what it attempts, especially 2 and 6 potentially blocking calls that should succeed."
      }
    ]
  },
  {
    "number": 19478,
    "title": "TypeBuilder.SetParent() loops forever when setting the parent to itself",
    "created_at": "2016-11-25T11:49:41Z",
    "closed_at": "2020-08-13T21:06:54Z",
    "labels": [
      "bug",
      "area-System.Reflection.Emit",
      "disabled-test",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19478",
    "body": "```c#\r\n[Fact]\r\npublic void SetParent_This_LoopsForever()\r\n{\r\n    TypeBuilder type = Helpers.DynamicType(TypeAttributes.NotPublic);\r\n    type.SetParent(type.AsType());\r\n    type.CreateTypeInfo();\r\n\r\n    // We never get here\r\n    throw new DivideByZeroException();\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19478/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "JonHanna",
        "created_at": "2016-11-25T13:12:10Z",
        "body": "I would imagine `InvalidOperationException` would be the best choice here."
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-25T18:34:44Z",
        "body": "I'm not sure actually - this might actually want to go into the CLR (I think that ref emit shares almost all the code creating types with the code that creates types normally)\r\nIn that case a TypeLoadException would be appropriate\r\n\r\n@jkotas, as a coreclr guy what do you think?"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-25T19:31:05Z",
        "body": "Yes, this will need to be fixed in coreclr"
      },
      {
        "user": "karelz",
        "created_at": "2017-02-28T23:36:31Z",
        "body": "Next step: Get it under debugger and find out how to fix it.\r\n\r\nThe impact is not huge - it's not real-world scenario, so Future is fine."
      },
      {
        "user": "hughbe",
        "created_at": "2017-04-03T09:47:19Z",
        "body": "Looks like an issue in the implementation of TypeBuilder. We get caught in a loop in `TypeBuilder.IsSubclassOf`:\r\n\r\n\r\n```cs\r\npublic override bool IsSubclassOf(Type c)\r\n{\r\n    Type p = this;\r\n\r\n    if (TypeBuilder.IsTypeEqual(p, c))\r\n        return false;\r\n\r\n    p = p.BaseType;\r\n\r\n    while (p != null)\r\n    {\r\n        if (TypeBuilder.IsTypeEqual(p, c))\r\n            return true;\r\n\r\n        p = p.BaseType;\r\n    }\r\n\r\n    return false;\r\n}\r\n```\r\n\r\nBut there are more complex types than the case in which `p.BaseType == p`. E.g. circularity:\r\n```cs\r\n[Fact]\r\npublic void SetParent_BasicCircularity()\r\n{\r\n    ModuleBuilder module = Helpers.DynamicModule();\r\n\r\n    TypeBuilder typeA = module.DefineType(\"A\");\r\n    TypeBuilder typeB = module.DefineType(\"B\");\r\n\r\n    typeA.SetParent(typeB.AsType());\r\n    typeB.SetParent(typeA.AsType());\r\n\r\n    typeA.CreateTypeInfo();\r\n\r\n    // We never get here.\r\n}\r\n\r\n[Fact]\r\npublic void SetParent_AdvancedCircularity()\r\n{\r\n    ModuleBuilder module = Helpers.DynamicModule();\r\n\r\n    TypeBuilder typeA = module.DefineType(\"A\");\r\n    TypeBuilder typeB = module.DefineType(\"B\");\r\n    TypeBuilder typeC = module.DefineType(\"C\");\r\n\r\n    typeA.SetParent(typeC.AsType());\r\n    typeB.SetParent(typeA.AsType());\r\n    typeC.SetParent(typeB.AsType());\r\n\r\n    typeA.CreateTypeInfo();\r\n\r\n    // We never get here.\r\n}\r\n```\r\n"
      },
      {
        "user": "hughbe",
        "created_at": "2017-04-03T10:01:35Z",
        "body": "A fix would be to change the code for `TypeBuilder.IsSubclassOfType` to:\r\n```cs\r\npublic bool IsSubclassOfType(CustomType c)\r\n{\r\n    CustomType original = this;\r\n    CustomType p = this;\r\n\r\n    if (Equal(p, c))\r\n        return false;\r\n\r\n    p = p.BaseType;\r\n\r\n    while (p != null)\r\n    {\r\n        if (Equal(p, c))\r\n            return true;\r\n        if (ReferenceEquals(p, original))\r\n            throw new InvalidOperationException(\"Circular!?!?\");\r\n\r\n        p = p.BaseType;\r\n    }\r\n\r\n    return false;\r\n}\r\n```\r\n\r\n@jkotas this is actually a managed code issue rather than unmanaged. Maybe some kind of `InvalidOperationException` would be a good idea.\r\n\r\nEDIT:\r\nActually this wouldn't work for the following case:\r\n```cs\r\n    CustomType a = new CustomType(\"a\");\r\n    CustomType b = new CustomType(\"b\");\r\n    CustomType c = new CustomType(\"c\");\r\n\r\n    a.BaseType = b;\r\n    b.BaseType = a;\r\n    c.BaseType = b; // Go into a circular dependency\r\n```"
      },
      {
        "user": "jkotas",
        "created_at": "2017-04-03T13:30:12Z",
        "body": "Or you can be circular via generic (`class G<T> : G<G<T>>`):\r\n\r\n```\r\nTypeBuilder type = module.DefineType(\"Type\");\r\ntype.DefineGenericParameters(\"T\");\r\ntype.SetParent(type.MakeGenericType(type));\r\ntype.CreateTypeInfo();\r\n```\r\n\r\nThere are many types of cycles and other invalid structures that you can create using Reflection.Emit. I do not think it is practical to check for them in the Reflection.Emit APIs. It would basically mean building PEVerify tool into the Reflection.Emit APIs somehow."
      },
      {
        "user": "hughbe",
        "created_at": "2017-04-03T14:45:10Z",
        "body": "I agree there are way to many patterns. All I really care about is making sure we don't loop forever. Maybe such patterns could be detected in a generic way, or are already detected in the class loader (c++ code). However, currently it's c# code that causes the infinite loop.\r\n\r\nNot worth the engineering time right now, however."
      },
      {
        "user": "GrabYourPitchforks",
        "created_at": "2020-04-01T21:52:46Z",
        "body": "There has been no activity on this issue for 3 years. It's currently marked _up for grabs_. If nobody wants to get to this for 5.0 we'll probably just close it as won't fix over the next few months."
      },
      {
        "user": "steveharter",
        "created_at": "2020-08-11T14:19:33Z",
        "body": "Closing this. If there are additional hits or other reasons to re-open, please do so."
      },
      {
        "user": "jkotas",
        "created_at": "2020-08-11T14:33:15Z",
        "body": "Tests are disabled against this bug. If it is by design, we should delete the test."
      }
    ]
  },
  {
    "number": 19374,
    "title": "Assign ActivityId in System.Transactions EventSource to the transaction id",
    "created_at": "2016-11-15T20:12:31Z",
    "closed_at": "2020-01-31T13:15:07Z",
    "labels": [
      "enhancement",
      "area-System.Transactions",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19374",
    "body": "Will allow us to trace all the events associated with a given transaction",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19374/comments",
    "author": "dmetzgar",
    "comments": [
      {
        "user": "qizhanMS",
        "created_at": "2017-01-03T17:33:27Z",
        "body": "Add ActivityID for ETW tracing for System.Transactions, use transaction ID as ActivityID, Pull request dotnet/corefx#14544"
      }
    ]
  },
  {
    "number": 19373,
    "title": "Span: Restore Span<T>[index] return type to \"ref T\" and remove Span<T>.GetItem()",
    "created_at": "2016-11-15T19:48:52Z",
    "closed_at": "2020-01-31T13:15:05Z",
    "labels": [
      "bug",
      "area-System.Memory",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19373",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19373/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2017-02-24T18:54:50Z",
        "body": "@VSadov @KrzysztofCwalina "
      },
      {
        "user": "davidfowl",
        "created_at": "2017-02-25T05:49:54Z",
        "body": "@joshfree I think we should do this now that we have csproj everywhere."
      },
      {
        "user": "Petermarcu",
        "created_at": "2017-03-05T04:14:49Z",
        "body": "Hi all, as you can see from the link Jan just gave, this change has broken folks trying to use ASP.NET on 2.0. Is this a critical fix or one we can back out until the breaking change can be coordinated?"
      },
      {
        "user": "davidfowl",
        "created_at": "2017-03-08T21:45:04Z",
        "body": "This can be closed."
      }
    ]
  },
  {
    "number": 19352,
    "title": "[HttpListener] Add more test coverage for System.Net.HttpListener.",
    "created_at": "2016-11-12T02:07:46Z",
    "closed_at": "2020-01-31T13:13:41Z",
    "labels": [
      "area-System.Net.Http",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19352",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19352/comments",
    "author": "Priya91",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-04-03T09:52:24Z",
        "body": "We triaged this one out into Future, because HttpListener is mainly compat API.\r\n\r\nEstimate: 2w\r\nTechnical debt: not all tests were ported when the HttpListener component was ported. Requires multi-machine infrastructure design and work, not included in the estimate (+ ~4w)."
      },
      {
        "user": "hughbe",
        "created_at": "2017-04-06T04:49:02Z",
        "body": "@karelz see dotnet/corefx#17980.\r\n\r\nI started adding tests for this one out of my own curiosity investigating the HTTP stack (before this was moved to future).\r\n\r\nIt looks like there are some subtle bugs not covered by tests. Obviously adding tests for this one is a big task - we need some more coverage for 2.0 though."
      },
      {
        "user": "karelz",
        "created_at": "2017-04-06T08:31:10Z",
        "body": "`HttpListener` is compat API - i.e. it's goal is to achieve parity on the most used features with Desktop. We do not plan to evolve compat APIs, or improve their perf. Even to the point of - we will likely not take risky or complex contributions in the implementation (or API surface). If customers want high-performance, scalable, modern APIs for Http server, we recommend to use Kestrel.\r\n\r\nFrom that perspective, having full test coverage or bug-by-bug compatibility is something we would like to have, but realistically, we won't be able to invest into it in 2.0 timeframe (there's just too many higher priority non-compat APIs to focus on).\r\n\r\nIf you're interested in the space, we will be very happy to take more tests contributions, and take bug fixes contributions which make the API more compatible. We will be happy to answer questions and provide guidance if you need it. However, we won't be likely able to invest proactively in it ourselves before 2.0 ships. We may change our mind in future, based on customer feedback, additional evidence, etc.\r\nMakes sense?"
      },
      {
        "user": "karelz",
        "created_at": "2019-10-10T18:54:47Z",
        "body": "Triage: Generic + we had new tests from @hughbe in the space, so we may be covered.\r\nWe will review code coverage by end of 5.0 and if it pops up, we can re-evaluate."
      }
    ]
  },
  {
    "number": 6955,
    "title": "Fix the execution order for array range check nodes.",
    "created_at": "2016-11-10T22:58:18Z",
    "closed_at": "2020-01-31T00:43:51Z",
    "labels": [
      "bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6955",
    "body": "In an array range check tree, the subtree that computes the array index must execute before the subtree that computes the array length. This currently causes the regression test added for VSO 283795 in dotnet/coreclr#8031 to fail when using the x86 legacy backend; the RyuJIT backend only passes the test because it marks the array length subtree as contained by the range check node during lowering.",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6955/comments",
    "author": "pgavlin",
    "comments": [
      {
        "user": "hqueue",
        "created_at": "2016-11-14T12:21:48Z",
        "body": "@pgavlin As I already wrote in dotnet/coreclr#8031, ARM legacy backend has same problem. I will follow up this issue for ARM. Thanks!\n"
      }
    ]
  },
  {
    "number": 19265,
    "title": "Tuple.IStructuralComparable/Equatable throws NRE",
    "created_at": "2016-11-06T22:56:11Z",
    "closed_at": "2020-01-31T13:08:39Z",
    "labels": [
      "area-System.Runtime",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19265",
    "body": "The following tests demonstrates this.\r\n```\r\n[Fact]\r\npublic void IStructuralEquatable_Equals_NullEqualityComparer_ThrowsNullReferenceException()\r\n{\r\n    IStructuralEquatable structuralEquatable = Tuple.Create(1);\r\n    Assert.Throws<NullReferenceException>(() => structuralEquatable.Equals(Tuple.Create(1), null));\r\n}\r\n\r\n[Fact]\r\npublic void IStructuralEquatable_GetHashCode_NullEqualityComparer_ThrowsNullReferenceException()\r\n{\r\n    IStructuralEquatable structuralEquatable = Tuple.Create(1);\r\n    Assert.Throws<NullReferenceException>(() => structuralEquatable.GetHashCode(null));\r\n}\r\n\r\n[Fact]\r\npublic void IStructuralComparable_CompareTo_NullEqualityComparer_ThrowsNullReferenceException()\r\n{\r\n    IStructuralComparable structuralComparable = Tuple.Create(1);\r\n    Assert.Throws<NullReferenceException>(() => structuralComparable.CompareTo(Tuple.Create(1), null));\r\n}\r\n```\r\n\r\nI can send in a PR fixing this to throw ArgumentNullException, but there might be breaking change so I'll let you guys approve it before I go wasting my time ;)",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19265/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-07T05:01:40Z",
        "body": "What's the value of changing NullRefEx to ArgNullEx? Is it \"just\" cleanliness/purity or is there more to it?\n\nIf it is just cleanliness, I would prefer consistency with other platforms (Full .NET Framework, Xamarin) over it. Is the same NullRefEx behavior observed on full .NET and Xamarin?\n\ncc: @stephentoub @weshaggard @terrajobst, any compat guidance here?\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T08:16:01Z",
        "body": "Should've mentioned - Netfx also throws an NRE, hence my apprehension. \n\nIn general, NREs are bad (according to the Microsoft api design guidelines) as the error message is unclear and people expect ANEs, and get confused if an NRE is thrown.\n\nThat said, there are compat issues here, so I wanted to bring up a discussion \n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-07T08:46:58Z",
        "body": "Thanks for confirmation. Any idea what Xamarin does?\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T08:55:00Z",
        "body": "Same behaviour as fx and core according to the mono source code\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-07T14:29:00Z",
        "body": "I agree with @hughbe, NREs are bad if non-user code is top of the call stack as this is indicative of a bug in the implementation of said method. ANE indicates that the top of the call stack refuses to accept the supplied arguments. In very narrow circumstances we've allowed this behavior (usually for performance critical code where any checking was deemed unacceptable).\n\nThat being said, if that's the behavior .NET Framework has, we need to preserve it for compat. We could quirk it, but the value gain seems low. Diverging in .NET Code would be possible, but I agree with @karelz -- consistency trumps cleanliness on a one side only.\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T14:34:23Z",
        "body": "As I thought - its worth documenting this (at least via some tests), so I'll submit them and close this issue\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T14:39:08Z",
        "body": "Also, NREs are thrown for Array and ValueTuple too. I know Array is locked down due to compat, but is it the same with ValueTuple, considering its a c# 7 feature which hasn't been released yet\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-07T15:47:10Z",
        "body": "Let's spin off a new bug to track ValueType. We may still have a chance to fix it there.\n\nAdding the tests sounds like a good idea (with comment \"compat\" with Full Framework/Mono)\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T20:18:02Z",
        "body": "Also - `ImmutableArray` **also** throws NRE for a null comparer!\n\nI'm not proposing a behaviour change, but documenting it here for the tests I'm about to push\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-07T21:45:58Z",
        "body": "@hughbe \n\n> Also - `ImmutableArray` **also** throws NRE for a null comparer!\n\nThat's the example I had in mind when I wrote earlier\n\n> In very narrow circumstances we've allowed this behavior (usually for performance critical code where any checking was deemed unacceptable).\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-11-07T21:52:11Z",
        "body": "@terrajobst \n\n> In very narrow circumstances we've allowed this behavior (usually for performance critical code where any checking was deemed unacceptable).\n\nThanks for letting me know. Seems like if you need to go against API design practices, even for perf, you're doing things wrong, but I understand that in the real world compromises do have to be made!\n"
      },
      {
        "user": "hughbe",
        "created_at": "2019-06-28T11:28:54Z",
        "body": "Is this worth revisiting in the new precedent of fixing NREs to ANEs? Also I don't think this is performance critical right? "
      }
    ]
  },
  {
    "number": 19253,
    "title": "Proposal: Array.Clone for creating a copy of an array.",
    "created_at": "2016-11-04T23:17:57Z",
    "closed_at": "2020-01-31T13:08:05Z",
    "labels": [
      "api-needs-work",
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19253",
    "body": "Sometimes you need to create a copy of an array. For example, one reason is arrays are mutable and sometimes you need to create a defensive copy, or you may want to modify some of the indices in it but keep the original array intact. There are a couple of ways of doing this right now:\r\n\r\n### Approach 1\r\n\r\n```cs\r\nvar array = new T[original.Length];\r\nArray.Copy(original, 0, array, 0, original.Length);\r\nreturn array;\r\n```\r\n\r\nThe downside of this approach is that it's verbose (compared to the second approach below), and can't be used in things like expression-bodied methods where you want a one-liner to clone an array. It is, however, fast since we go straight to allocating an array and calling Copy.\r\n\r\n### Approach 2\r\n\r\n```cs\r\nreturn (T[])original.Clone();\r\n```\r\n\r\nWhile this can be used in expression-bodied methods, the programmer has to specify `T[]` again to cast, which is prone to error since `Clone` returns an object. In addition, `Clone` is slightly slower than `Copy` and we have to make that extra typecast.\r\n\r\n### Approach 3 (Linq)\r\n\r\n```cs\r\nreturn original.ToArray();\r\n```\r\n\r\nThis can also be used in expression-bodied methods and is type-safe, however it is slow. Several casts are made by ToArray, then it makes virtual method calls to Count/CopyTo which do the same thing as approach 1 under the hood.\r\n\r\n## Proposal\r\n\r\nAdd a static `Array.Clone` method:\r\n\r\n```cs\r\nnamespace System\r\n{\r\n    public abstract class Array : ...\r\n    {\r\n        public static T[] Clone<T>(T[] array);\r\n    }\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```cs\r\nclass Customer\r\n{\r\n    Order[] _orders;\r\n\r\n    public Order[] GetOrders() => Array.Clone(_orders);\r\n}\r\n```\r\n\r\nThe implementation would be trivial and do the same thing as example 1:\r\n\r\n```cs\r\npublic static T[] Clone<T>(T[] array)\r\n{\r\n    var array = new T[original.Length];\r\n    Array.Copy(original, 0, array, 0, original.Length);\r\n    return array;\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19253/comments",
    "author": "jamesqo",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-05T00:07:28Z",
        "body": "Sounds reasonable to me. Not sure how many people would use it though ...\nLet's get API review feedback on the proposal.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-15T19:13:32Z",
        "body": "Makes sense.\n"
      },
      {
        "user": "bendono",
        "created_at": "2016-11-16T00:27:21Z",
        "body": "What are the semantics when the array is null? Should it return null or raise an exception? If only non-null values are permitted, then rather than static, this could be an instance method. That way the null check as well as potential exception could be avoided.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-16T00:33:14Z",
        "body": "I know accepting null as the `this` to an extension isn't the common pattern, but I think it would be more useful.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-16T00:39:27Z",
        "body": "To be clear, `Array.Clone` would be a static method and not an extension method. It can't be an extension method because an instance method with the same signature exists and thus will be preferred by the compiler.\n\nI think accepting and returning `null` would be useful.\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-16T01:23:09Z",
        "body": "@JonHanna, @terrajobst Why do you think returning null for null would be useful? If this is meant to supplant usages of `(T[])array.Clone()`, and if that throws a (nullref) exception today if `array` is null, then wouldn't it make sense for `Array.Clone(array)` to also throw if `array` is null?\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-16T01:58:32Z",
        "body": "I was thinking of cases where I've implemented `Clone()` for compound objects. It's much easier if you can simply call the `Array.Clone(array)` method without having to worry whether the array is `null` or not. Cloning a `null` array is well-defined by returning `null`.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-16T02:06:29Z",
        "body": "Yes, generally how I'm going to treat null falls into one of the following:\n1. I've my own special case rule — the approaches are equal, because I have to test anyway.\n2. I want null for null — just passing null and getting it back is easier than having to test to avoid the ANE.\n3. A null shouldn't be there and will eventually error. ANE sooner than later is slightly better, but not a lot; it's still going to error either way.\n4. The null won't be there. The ANE check is a waste. A tiny waste, but a waste all the same.\n\nMore philosophically, I prefer things to work with null if it makes any sort of conceptual sense. To my mind it's perfectly sensible that a clone of null is null.\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-16T21:59:58Z",
        "body": "@terrajobst @JonHanna Makes sense. I'll update the PR to return `null`, then.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-16T22:28:03Z",
        "body": "I'll throw in a dissenting opinion here and say that null shouldn't be accepted as input. It's a small distinction and obviously we could define the semantics/document it however we want, but it seems semantically and conceptually cleaner to require the parameter to be a real, non-null array.\n\n> To my mind it's perfectly sensible that a clone of null is null.\n\nThis is wandering into personal preference territory, I guess, but I feel sort of the opposite. `null` isn't actually an array, so passing it to a method taking an array doesn't make conceptual sense to me. \n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-16T22:33:21Z",
        "body": "@jkotas @stephentoub Do you have an opinion on this?\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-16T22:37:13Z",
        "body": "@mellinoe \n\nTo me, the higher order bit to consider is whether a given enforcement of non-`null` is helping or hurting. The case where missing validation is hurting is when it hides bugs. For example, operations that have side effects should generally validate arguments instead of silently no-oping.\n\nOperations like `Array.Clone` that return `null` values are hardly hiding bugs. If subsequent code can't deal with `null`, the user gets a clean null-reference exception.\n\nOn the other hand, accepting and returning `null` avoids having to special case situations that would be perfectly well defined anyways.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-16T22:52:28Z",
        "body": "Sure, we can define the semantics however we want. And like I said, it's a pretty small distinction anyways. But to me, `Clone()`ing a null object doesn't make conceptual sense. If I saw some code relying on that behavior, I might be slightly confused for a bit, and have to re-evaluate my assumptions. I'm just throwing my opinion in here, if others feel differently then it's no big deal.\n\n> If subsequent code can't deal with null, the user gets a clean null-reference exception.\n\nI dunno; maybe. That's rather simplifying things. Perhaps your code can handle a large variety of circumstances involving null, empty, various-sized arrays, and you make the assumption that `Array.Clone` doesn't give you back a null value. Maybe you're in a weird state now that you didn't anticipate. I think it's more nuanced than either \"everything works fine\" or \"you get a clean, easy-to-track-down NRE right where you expect it\".\n\nAnyways, I'm happy to agree with whatever others feel is the right call; just wanted to get my thoughts out there.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-11-16T23:06:50Z",
        "body": "Can we take a step back? Why are we adding this method? At this point, its implementation is just going to call the instance Clone and do a cast, so the only value the method provides is doing the cast for you. But it also has to do a null check, it incurs generic overheads, and as a new method it's not portable. Doesn't seem like enough value to me.\n\nAll that said, if everyone else still wants to add it, I'd vote for null being an error.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-16T23:24:10Z",
        "body": "Yes, the primary value this method offers is syntactic sugar by preserving the type of the array instead of returning `object`.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-17T00:28:55Z",
        "body": ">  syntactic sugar\n\nIn this particular case, it is a syntactic sugar mixed with salt because of it is not extension method (for source compat) that it should really be for good flow. I agree with @stephentoub that it does not have enough value.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-17T00:33:18Z",
        "body": "Why do you say that? Especially on array instance methods aren't common. Most of the functionality is provided as static methods on `Array`.\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-17T03:09:51Z",
        "body": "@jkotas, if we were to add an extension method, does `array.Duplicate` sound like a good name?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-17T03:42:25Z",
        "body": "> Why do you say that? Especially on array instance methods aren't common\n\n`Clone` is existing instance method on array and many other types. If you got `int[] a` and start typing `a.Clone()`, the intelisense will give you the existing one that returns object. The static Clone would be pretty hard to discover. \n\nThe existing `Clone()` with cast does not look that bad, considering all alternatives. There are number of instance `Clone()` methods in the framework that return less derived type, and it is not uncommon to see them together with cast.\n\nThe array surface was designed in v1 before framework designed guidelines, generics, extension methods, and other goodies. I believe it would have been quite different if it is designed today.\n\n> does `array.Duplicate` sound like a good name\n\nIt has the same discoverability problem.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-17T03:48:29Z",
        "body": "@jkotas \n\n>  If you got `int[]` a and start typing `a.Clone()`, the intelisense will give you the existing one that returns `object`. \n\nI get that. But what I'm trying to say is that we've trained developers to look for static methods on `Array`. Of course, an instance method would probably be more discoverable, but at the same time I think not having to type the extra parentheses and the type names is still worth it -- you just have to learn which method you need to call. Less ideal, but given how important arrays are not outrageously bad either.\n\n> Does `array.Duplicate` sound like a good name?\n\nWe should most certainly not introduce a method using a different name. Being consistent with terminology is key. We've learned that the hard way with things like `Close` vs. `Dispose`.\n"
      },
      {
        "user": "bendono",
        "created_at": "2016-11-17T16:47:36Z",
        "body": "In well written code, a developer should know if a value could be null.\nIt's a nice goal to aspire to, but real world code is not always so clean as it should be.\nIf this static method does not accept nulls, I imagine that it will generally need to be used as follows:\n`var copy = array != null ? Array.Clone(array) : null;`\nIt's not too bad--and there are shorter ways to write it--, but I see it as advantageous to avoid this this boiler-plate code and simply write the following, knowing full well that null is possible and handle it later if/when needed:\n`var copy = Array.Clone(array);`\nEssentially, I want a clone of whatever I currently have. If it is null, then so be it. I'll figure it out later.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-11-17T22:05:42Z",
        "body": "@stephentoub and @jkotas \n\nAny push back on the API? I know you guys said you don't think it adds enough value, but it' clear folks disagree. So unless you strongly think we shouldn't add this API I'm inclined to accept this API as proposed.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-11-17T22:12:32Z",
        "body": "> Any push back on the API?\n\nI still think it's silly to add.  Any new API we add increases the differences between the various .NET implementations.  It's one thing to do so for things that really move the needle; this doesn't.  There's also the extra costs involved in it being a generic method.  There's potential confusion around instance vs static Clone.  Etc.  Maybe these are minor concerns, but the value of the API is also so incredibly minor, just doing a cast for you.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-17T22:38:41Z",
        "body": "I do not think we should add this API.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-17T22:51:28Z",
        "body": "I'm really interested if we can get a real boost (which if possible would likely need to be at the level of the array instance method C++ code). Otherwise I'd rather have the syntactic vinegar of an explicit cast to the sugar of a hidden cast.\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-17T23:15:17Z",
        "body": "@jkotas As @JonHanna mentions, it doesn't have to be a wrapper around the existing `Clone`. I don't know as much about the current `Clone` as you do, but presumably there are things like checks in the C++ code to handle multi-dim arrays, non-zero based arrays, etc. If we added this API, we could remove those checks since we know the input is an SZ array. Also, since this would be implemented in C++ we would have direct access to the `Array.Copy` implementation for example, and be able to shave off a few method calls.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-11-17T23:22:51Z",
        "body": "If the implementation can be made meaningfully faster (and the instance method can't), then I'd understand the method being added when those improvements come, not before.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-17T23:47:15Z",
        "body": "Agree. \n\nIMHO, it would pretty hard to demonstrate that the generic API has significant performance advantage over the non-generic one, everything else being equal.\n\n> If we added this API, we could remove those checks since we know the input is an SZ array\n\nThe existing non-generic implementation does not have these checks already. Also, the existing non-generic implementation can be optimized quite a bit.\n\n>  this would be implemented in C++ \n\nC++ does not help you much here. And we want to move to a place where this is implemented in C# for the most part anyway.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-11-17T23:49:24Z",
        "body": "BTW: This shares similar set of problems as the generic version of Array.Copy. I believe it is hard to demonstrate significant performance advantage for the generic Array.Copy for similar reasons.\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-17T23:59:34Z",
        "body": "@jkotas \n\n> I believe it is hard to demonstrate significant performance advantage for the generic Array.Copy for similar reasons.\n\nIs it? `GetLowerBound(0)` removed?\n"
      }
    ]
  },
  {
    "number": 19201,
    "title": "Either ErrorMessageString or ErrorMessageResourceName must be set, but not both - provide hint which property",
    "created_at": "2016-11-02T20:43:27Z",
    "closed_at": "2020-01-31T13:05:12Z",
    "labels": [
      "enhancement",
      "area-System.ComponentModel.DataAnnotations",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19201",
    "body": "_From @stefanhendriks on November 1, 2016 9:28_\n\nThis is happening on an API call (JSON serialization). From my perspective this problem 'suddendly' appears and I have no way of backtracking which property is causing this error message. \r\n\r\nSome background info:\r\n- we have a filter that validates models before they enter the controller action\r\n- when a validation error is found, we throw an exception and send a nice generic error response with per-field a validation message.\r\n\r\nThe stack trace is also not helpful:\r\n```\r\nSystem.InvalidOperationException: Either ErrorMessageString or ErrorMessageResourceName must be set, but not both.\r\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.SetupResourceAccessor()\r\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.get_ErrorMessageString()\r\n   at System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(String name)\r\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(Object value, ValidationContext validationContext)\r\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(Object value, ValidationContext validationContext)\r\n   at Microsoft.AspNetCore.Mvc.DataAnnotations.Internal.DataAnnotationsModelValidator.Validate(ModelValidationContext validationContext)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode()\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitChildren(IValidationStrategy strategy)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitComplexType()\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)\r\n   at Microsoft.AspNetCore.Mvc.Internal.DefaultControllerArgumentBinder.<BindModelAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.DefaultControllerArgumentBinder.<BindArgumentsCoreAsync>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeAllActionFiltersAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeExceptionFilterAsync>d__25.MoveNext()\r\n```\r\n\r\nThe only 'clue' we can derive is that ```Either ErrorMessageString or ErrorMessageResourceName must be set, but not both.```\r\n\r\nPerhaps the exception / message can be expanded with the property name (and validator)?\n\n_Copied from original issue: aspnet/Mvc#5478_",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19201/comments",
    "author": "danroth27",
    "comments": [
      {
        "user": "danroth27",
        "created_at": "2016-11-02T20:43:28Z",
        "body": "_From @stefanhendriks on November 1, 2016 9:59_\n\nI have found the property that was the culprit. Here is how I did it:\n- I had a test that could reproduce this problem (hence it was the start of this journey ;-) )\n- I turned off all validators (commented out)\n- I re-ran the test to see it did not fail due the above error (it did fail for other reasons, because it checked if any validation was going on)\n- I turned on validators per for a property \n- I Reran the test \n- I repeated above 2 steps until the test failed again due above error\n\nCumbersome yes. I noticed in the stack trace that a `ValidationVisitor` is in play, I suppose that one has enough context to provide more information when this error is thrown?\n"
      },
      {
        "user": "danroth27",
        "created_at": "2016-11-02T20:44:24Z",
        "body": "It would be great if the validation attribute exception messages could give more context on the source of the validation error.\n"
      },
      {
        "user": "stefanhendriks",
        "created_at": "2016-11-03T08:07:23Z",
        "body": "Thx for moving to the correct place @danroth27 . Mind it is not a validation error, but an exception thrown by the validator because of `Either ErrorMessageString or ErrorMessageResourceName must be set` - but it is impossible to derive from the stack trace which property/validator was the culprit. In that sense it is not a validation error (as in , property is invalid). Just wanted to make that a bit more clear.\n"
      },
      {
        "user": "ajcvickers",
        "created_at": "2017-03-17T00:17:28Z",
        "body": "As stated above, this is not a validation error, but rather an application logic error (at some level) that is setting both properties. We are not planning to work on this, but we would consider a PR that makes the message better--for example, by including the ErrorMessageResourceName in the message. (We would not want to include the ErrorMessageString in the message just on the off-chance that it could contain sensitive data.) We would also consider changes that made the message better in some other way."
      },
      {
        "user": "ajcvickers",
        "created_at": "2019-02-22T23:51:59Z",
        "body": "Closing per previous message since we don't plan to implement this."
      }
    ]
  },
  {
    "number": 6887,
    "title": "Disassembly dump some times prints hex, sometimes doesn't",
    "created_at": "2016-10-26T21:39:37Z",
    "closed_at": "2020-01-31T00:40:16Z",
    "labels": [
      "test-bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6887",
    "body": "I just noticed this while doing a JIT disassembly dump... sometimes the offsets of the memory addresses will be specified in hex, sometimes they'll be specified in decimal.\n\nRepro code to dump:\n\n``` cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication\n{\n    public static class Program\n    {\n        [MethodImpl(MethodImplOptions.NoInlining)]\n        private static void LargeStructReturner(out ValueTuple<decimal, decimal, decimal, decimal> tuple)\n        {\n            tuple = default(ValueTuple<decimal, decimal, decimal, decimal>);\n        }\n\n        public static void Main()\n        {\n            ValueTuple<decimal, decimal, decimal, decimal> tuple;\n            LargeStructReturner(out tuple);\n        }\n    }\n}\n```\n\nOutput:\n\n``` asm\n; Assembly listing for method Program:LargeStructReturner():struct\n; Emitting BLENDED_CODE for X64 CPU with AVX\n; optimized code\n; rsp based frame\n; partially interruptible\n; Final local variable assignments\n;\n;  V00 RetBuf       [V00,T00] (  4,   4  )   byref  ->  rcx\n;  V01 loc0         [V01,T01] (  2,   2  )  struct (64) [rsp+0x08]   do-not-enreg[SB] must-init ld-addr-op\n;# V02 loc1         [V02    ] (  1,   1  )  lclBlk ( 0) [rsp+0x00]\n;\n; Lcl frame size = 72\n\nG_M9337_IG01:\n       57                   push     rdi\n       56                   push     rsi\n       4883EC48             sub      rsp, 72\n       488BF1               mov      rsi, rcx\n       488D7C2408           lea      rdi, [rsp+08H]\n       B910000000           mov      ecx, 16\n       33C0                 xor      rax, rax\n       F3AB                 rep stosd\n       488BCE               mov      rcx, rsi\n\nG_M9337_IG02:\n       33C0                 xor      rax, rax\n       488D542408           lea      rdx, bword ptr [rsp+08H]\n       C4E17957C0           vxorpd   ymm0, ymm0\n       C4E17A7F02           vmovdqu  qword ptr [rdx], ymm0\n       C4E17A7F4210         vmovdqu  qword ptr [rdx+16], ymm0\n       C4E17A7F4220         vmovdqu  qword ptr [rdx+32], ymm0\n       C4E17A7F4230         vmovdqu  qword ptr [rdx+48], ymm0 ; HERE\n       C4E17A6F442408       vmovdqu  ymm0, qword ptr [rsp+08H] ; HERE\n       C4E17A7F01           vmovdqu  qword ptr [rcx], ymm0\n       C4E17A6F442418       vmovdqu  ymm0, qword ptr [rsp+18H]\n       C4E17A7F4110         vmovdqu  qword ptr [rcx+16], ymm0\n       C4E17A6F442428       vmovdqu  ymm0, qword ptr [rsp+28H]\n       C4E17A7F4120         vmovdqu  qword ptr [rcx+32], ymm0\n       C4E17A6F442438       vmovdqu  ymm0, qword ptr [rsp+38H]\n       C4E17A7F4130         vmovdqu  qword ptr [rcx+48], ymm0\n       488BC1               mov      rax, rcx\n\nG_M9337_IG03:\n       4883C448             add      rsp, 72\n       5E                   pop      rsi\n       5F                   pop      rdi\n       C3                   ret\n\n; Total bytes of code 122, prolog size 26 for method Program:LargeStructReturner():struct\n; ============================================================\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6887/comments",
    "author": "jamesqo",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2016-10-27T14:56:31Z",
        "body": "Good catch.  Would be nice to make things consistent.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-10-28T16:55:32Z",
        "body": "The display code does this on purpose:\n\n```\n            if (frameRef)\n            {\n                printf(\"%02XH\", disp);\n            }\n            else if (disp < 1000)\n            {\n                printf(\"%d\", disp);\n            }\n            else if (disp <= 0xFFFF)\n            {\n                printf(\"%04XH\", disp);\n            }\n            else\n            {\n                printf(\"%08XH\", disp);\n            }\n```\n\nHaving written similar code in the past I'm not surprised at all by this \"inconsistency\".\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-10-28T17:41:37Z",
        "body": "@mikedn I see. Can you explain what `frameRef` is supposed to be?\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-10-28T18:26:15Z",
        "body": "@jamesqo `frameRef` basically means local variable or method argument\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-10-28T18:46:16Z",
        "body": ":+1:\n"
      }
    ]
  },
  {
    "number": 19068,
    "title": "System.Linq.Expressions factories throw NullReferenceException with global fields and global methods",
    "created_at": "2016-10-24T08:18:39Z",
    "closed_at": "2020-01-31T12:57:33Z",
    "labels": [
      "enhancement",
      "area-System.Linq.Expressions",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19068",
    "body": "Consider the following test class I put together of all instances. I will submit a PR fixing these bugs if it you guys approve, so please let me know. Here I've used RefEmit to produce the global fields/methods, as C# doesn't support them\n\n```\npublic class GlobalMethodGlobalField\n{\n    [Fact]\n    public void AndAlso_GlobalMethod_ThrowsNullReferenceException()\n    {\n        MethodInfo method = GlobalMethod(typeof(int), new Type[] { typeof(int), typeof(int) });\n        Assert.Throws<NullReferenceException>(() => Expression.AndAlso(Expression.Constant(1), Expression.Constant(2), method));\n    }\n\n    [Fact]\n    public void Bind_GlobalMethod_ThrowsNullReferenceException()\n    {\n        Assert.Throws<NullReferenceException>(() => Expression.Bind(GlobalMethod(typeof(int), new Type[0]), Expression.Constant(\"abc\")));\n    }\n\n    [Fact]\n    public void Default_TypeBuilder_CreateLambda_ThrowsNotSupportedException()\n    {\n        AssemblyBuilder assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"Assembly\"), AssemblyBuilderAccess.Run);\n        ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(\"Module\");\n        TypeBuilder typeBuilder = moduleBuilder.DefineType(\"Type\");\n\n        DefaultExpression defaultExpression = Expression.Default(typeBuilder.AsType());\n        Assert.Throws<NotSupportedException>(() => Expression.Lambda(defaultExpression));\n\n        LambdaExpression genericLambda = Expression.Lambda<Func<object>>(defaultExpression);\n        Assert.Null(genericLambda.Compile());\n    }\n\n    [Fact]\n    public void ListBind_GlobalMethod_ThrowsNullReferenceException()\n    {\n        Assert.Throws<NullReferenceException>(() => Expression.ListBind(GlobalMethod(typeof(int), new Type[0]), new ElementInit[0]));\n        Assert.Throws<NullReferenceException>(() => Expression.ListBind(GlobalMethod(typeof(int), new Type[0]), (IEnumerable<ElementInit>)new ElementInit[0]));\n    }\n\n    [Fact]\n    public void MemberBind_GlobalMethod_ThrowsNullReferenceException()\n    {\n        Assert.Throws<NullReferenceException>(() => Expression.MemberBind(GlobalMethod(typeof(int), new Type[0]), new MemberBinding[0]));\n        Assert.Throws<NullReferenceException>(() => Expression.MemberBind(GlobalMethod(typeof(int), new Type[0]), (IEnumerable<MemberBinding>)new MemberBinding[0]));\n    }\n\n    [Fact]\n    public void MemberBind_GlobalFieldInBindings_ThrowsNullReferenceException()\n    {\n        MemberBinding[] bindings = new MemberBinding[] { Expression.MemberBind(GlobalField()) };\n        Assert.Throws<NullReferenceException>(() => Expression.MemberBind(GlobalField(), bindings));\n        Assert.Throws<NullReferenceException>(() => Expression.MemberBind(GlobalField(), (IEnumerable<MemberBinding>)bindings));\n\n    }\n\n    [Fact]\n    public void New_GlobalMethodInMembers_ThrowsNullReferenceException()\n    {\n        ConstructorInfo constructor = typeof(ClassWithConstructor).GetConstructor(new Type[] { typeof(int) });\n        Expression[] arguments = new Expression[] { Expression.Constant(5) };\n        MemberInfo[] members = new MemberInfo[] { GlobalMethod(typeof(int), new Type[0]) };\n        Assert.Throws<NullReferenceException>(() => Expression.New(constructor, arguments, members));\n    }\n\n    [Fact]\n    public void New_GlobalFieldInMembers_ThrowsNullReferenceException()\n    {\n        ConstructorInfo constructor = typeof(ClassWithConstructor).GetConstructor(new Type[] { typeof(int) });\n        Expression[] arguments = new Expression[] { Expression.Constant(5) };\n        MemberInfo[] members = new MemberInfo[] { GlobalField() };\n        Assert.Throws<NullReferenceException>(() => Expression.New(constructor, arguments, members));\n    }\n\n    [Fact]\n    public void OrElse_GlobalMethod_ThrowsNullReferenceException()\n    {\n        MethodInfo method = GlobalMethod(typeof(int), new Type[] { typeof(int), typeof(int) });\n        Assert.Throws<NullReferenceException>(() => Expression.OrElse(Expression.Constant(1), Expression.Constant(2), method));\n    }\n\n    private class ClassWithConstructor\n    {\n        public ClassWithConstructor(int i) { }\n    }\n\n    private static MethodInfo GlobalMethod(Type returnType, Type[] parameterTypes)\n    {\n        AssemblyBuilder assembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"ABC\"), AssemblyBuilderAccess.Run);\n        ModuleBuilder module = assembly.DefineDynamicModule(\"Module\");\n\n        MethodBuilder globalMethod = module.DefineGlobalMethod(\"GlobalMethod\", MethodAttributes.Public | MethodAttributes.Static, returnType, parameterTypes);\n        globalMethod.GetILGenerator().Emit(OpCodes.Ret);\n\n        module.CreateGlobalFunctions();\n        return module.GetMethod(globalMethod.Name);\n    }\n\n    private static FieldInfo GlobalField()\n    {\n        AssemblyBuilder assembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"ABC\"), AssemblyBuilderAccess.Run);\n        ModuleBuilder module = assembly.DefineDynamicModule(\"Module\");\n\n        FieldBuilder fieldBuilder = module.DefineInitializedData(\"Name\", new byte[1], FieldAttributes.Public);\n\n        module.CreateGlobalFunctions();\n        return module.GetField(fieldBuilder.Name);\n    }\n}\n```\n\n@bartdesmet @VSadov @JonHanna \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19068/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "bartdesmet",
        "created_at": "2016-10-24T18:34:53Z",
        "body": "Interesting behavior... Where does the `NullReferenceException` originate from? Is it assuming that something like `DeclaringType` is non-null maybe?\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-10-24T19:00:32Z",
        "body": "Correct - we assume DeclaringType is nonnull\n"
      },
      {
        "user": "bartdesmet",
        "created_at": "2016-10-25T14:38:08Z",
        "body": "I don't see any compelling reason why these shouldn't work just fine. `MethodInfo` instances with `DeclaringType` set to `null` are valid, and our API claims to deal with all `MethodInfo` instances just fine. I'd be curious to see how many places we have this assumption of a non-null `DeclaringType` though (same for other `MemberInfo` subtypes); the fix may show up in quite a few places.\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-10-25T15:13:28Z",
        "body": "FieldInfo, MethodInfo and ConstructorInfo are the only MemberInfos that can have a null `DeclaringType`\n\nI'll go through the ones I found:\n- AndAlso: should **allow** (as MethodInfo can come from anywhere)\n- Bind (method): should **not allow** (as MethodInfo should represent a property accessor)\n- Bind (field): should **allow** (as MemberInfo represents the field to be set)\n- ListBind (method): should **not allow** (as MethodInfo should represent a property accessor)\n- ListBind (field): should **allow** (as MemberInfo represents the field to be set)\n- MemberBind (method): should **not allow** (as MethodInfo should represent a property accessor)\n- MemberBind (field): should **allow** (as MemberInfo represents the field to be set)\n- New: should **not allow** (as MemberInfo must represent a member on the type**\n- OrElse: should **allow** (as MethodInfo can come from anywhere)\n\nLet me know if you disagree with any of these - I'll submit a PR for each adding tests etc. just to make sure we're allowing/disallowing the proper scenarios\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-10-25T15:18:14Z",
        "body": "Actually, I'm wrong about `AndAlso` and `OrElse`, as apparently `op_true` and `op_false` have to be declared on the declaring type of `method`\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-11T00:41:41Z",
        "body": "I don't think there's any reason a method or field should have to have a `DeclaringType` unless there's some inherent reason for a restriction on what that `DeclaringType` can be.\r\n\r\nWith the `*Bind` methods though the objects produced are all `MemberBinding`s rather than complete `Expression`s and used to produce `MemberInitExpression`s which have to be validated so that the `DeclaringType` of the binding is assignable from the type being initialised. Since any use of the object (unless there's another I can't think of) would hence fail (taking a look at the validation method, there's an assumption that the `DeclaringType` isn't null) throwing early is better than throwing late. It should be an `ArgumentException` rather than an NRE though."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-18T17:16:35Z",
        "body": "@hughbe are you still intending to work on this? While I don't think it makes sense to allow such methods on bindings, we shouldn't have NRE thrown."
      },
      {
        "user": "hughbe",
        "created_at": "2017-01-18T17:18:05Z",
        "body": "@JonHanna not currently! feel free to grab this if you'd like."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-18T17:53:53Z",
        "body": "Will do."
      }
    ]
  },
  {
    "number": 19036,
    "title": "Test coverage for `System.Math` and `System.MathF` should be expanded.",
    "created_at": "2016-10-20T21:02:46Z",
    "closed_at": "2020-01-31T12:55:43Z",
    "labels": [
      "area-System.Runtime",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/19036",
    "body": "Currently the test coverage for `System.Math` and `System.MathF` is fairly sparse, to say the least.\n\nIt should be expanded, at the very least, with the same set of tests that cover the native implementations in the CoreCLR PAL layer (which has a minimum of 20 tests per API and ensures that the interesting inputs are covered).\n\nAs part of this work, the tests should also be converted to use the `[Theory]` attribute. \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/19036/comments",
    "author": "tannergooding",
    "comments": [
      {
        "user": "AlexGhiondea",
        "created_at": "2016-12-22T20:16:51Z",
        "body": "Anyone interested in taking this on?"
      },
      {
        "user": "vcsjones",
        "created_at": "2016-12-27T19:54:38Z",
        "body": "@AlexGhiondea If you want to assign it to me, I can work on this."
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2017-01-04T00:46:45Z",
        "body": "@karelz could you add @vcsjones to the contributor list?"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-04T01:05:48Z",
        "body": "Done, ping us here when you accept, then we can assign."
      },
      {
        "user": "vcsjones",
        "created_at": "2017-01-04T01:47:20Z",
        "body": "@karelz done."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-29T06:54:10Z",
        "body": "@vcsjones just curious if you're still working on it ..."
      },
      {
        "user": "vcsjones",
        "created_at": "2017-01-30T18:13:24Z",
        "body": "@karelz Ah! Sorry this one fell off my radar. Yes I will get a PR in very soon."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-30T18:34:11Z",
        "body": "Great, no rush. I'm happy my nagging was useful at least once :) (to catch something accidentally dropped ;))"
      },
      {
        "user": "tannergooding",
        "created_at": "2017-03-16T21:35:17Z",
        "body": "@vcsjones, are you still working on this? If not, I'm done with the other `System.MathF` bugs I had self-assigned and can start on this again."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-16T23:51:58Z",
        "body": "2.5 months no progress, I think it is safe to assume @vcsjones didn't have much time so far - feel free to grab it @tannergooding."
      },
      {
        "user": "vcsjones",
        "created_at": "2017-03-17T01:48:32Z",
        "body": "Yes - I apologize. ☹️"
      },
      {
        "user": "tannergooding",
        "created_at": "2017-03-17T02:11:02Z",
        "body": "@vcsjones, I do the same thing sometimes (as happened when I created the bug in October up until today, when I actually had some time again 😄)"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-17T02:44:08Z",
        "body": "Agreed, things happen, no worries @vcsjones ;-)"
      }
    ]
  },
  {
    "number": 18979,
    "title": "Investigate preallocating space for ICollections/IIListProvider in SelectEnumerableIterator methods",
    "created_at": "2016-10-16T17:51:37Z",
    "closed_at": "2020-01-31T12:52:47Z",
    "labels": [
      "enhancement",
      "area-System.Linq",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18979",
    "body": "SelectEnumerableIterator's `IIListProvider` implementation, e.g. `ToArray`, `ToList`, etc. should attempt to preallocate space if the source is an ICollection or IIListProvider. We check before falling back to that iterator if the input is an IList or IPartition, but not if it's one of the parent interfaces.\n\n**edit:** Adding 'investigate' b/c I'm not sure how common a non-IList ICollection is, or a non-IPartition IIListProvider is. In addition, this may penalize (even if slightly) if the source is neither of those.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18979/comments",
    "author": "jamesqo",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-10-17T16:56:43Z",
        "body": "cc: @VSadov \n"
      },
      {
        "user": "VSadov",
        "created_at": "2016-11-10T22:47:53Z",
        "body": "Might not be hard to implement, but need to be sure there is a noticeable positive impact in common scenarios.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-12T16:02:14Z",
        "body": "This is a theory about a potential perf improvement to potentially investigate.  There are many such things that could be looked at... we don't need issues tracking them.  If someone finds a performance improvement somewhere and wants to submit a PR for it, that's welcome."
      }
    ]
  },
  {
    "number": 18949,
    "title": "Investigate benefits of optimizing Enumerable.Cast for non-generic ICollections",
    "created_at": "2016-10-13T21:08:10Z",
    "closed_at": "2020-01-31T12:51:12Z",
    "labels": [
      "enhancement",
      "area-System.Linq",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18949",
    "body": "Although `Enumerable.Cast` accepts a non-generic enumerable which are rare nowadays, it's used fairly often with generic enumerables in which the user knows that all of the objects are of a derived type. We should investigate to see if it is worthwhile optimizing the function for ICollections, e.g. the size of the array/list in `ToArray` / `ToList` can be predetermined.\n\nDiscussion moved from dotnet/corefx#12042\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18949/comments",
    "author": "jamesqo",
    "comments": [
      {
        "user": "jamesqo",
        "created_at": "2016-10-13T21:12:27Z",
        "body": "@VSadov, in response to one of your questions from the other thread\n\n> If we really want to optimize behavior of Cast iterator and the way it composes with other operators, perhaps we should consider implementing IPartition, not just IIListProvider?\n\nImplementing IPartition could be an observable change for Cast followed by Skip / ElementAt / Last, since we may skip over an item that would have thrown an exception when we attempted to cast it. For example, consider\n\n``` cs\nvar objects = new object[] { 1, \"string\" };\nforeach (string s in objects.Cast<string>().Skip(1)) ;\n```\n"
      },
      {
        "user": "VSadov",
        "created_at": "2016-11-10T22:58:02Z",
        "body": "@jamesqo - would this also be applicable to generic enumerables?  (like when downcasting from base to derived)\nIs there a way to measure the effects of the improvement in the context of common scenarios?\n"
      },
      {
        "user": "jamesqo",
        "created_at": "2016-11-11T02:07:24Z",
        "body": "> would this also be applicable to generic enumerables? (like when downcasting from base to derived)\n\nYes, this is applicable for generic enumerables. The collection type has to implement non-generic `ICollection` though, luckily that's common for most of the BCL containers such as List/Queue/ImmutableArray et al.\n\n> Is there a way to measure the effects of the improvement in the context of common scenarios?\n\nYes, I can write a test app with enumerables of different types/sizes/etc. when the time comes & post perf results.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T23:20:37Z",
        "body": "Next step: Collect perf data showing that this is worth it."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-12T16:17:08Z",
        "body": "This is a theory about a potential perf improvement to potentially investigate. There are many such things that could be looked at... we don't need issues tracking them. If someone finds a performance improvement somewhere and wants to submit a PR for it, that's welcome."
      }
    ]
  },
  {
    "number": 18767,
    "title": "Improve test suite for System.CodeDom",
    "created_at": "2016-09-29T01:22:33Z",
    "closed_at": "2020-01-31T12:41:17Z",
    "labels": [
      "area-System.CodeDom",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18767",
    "body": "Code coverage could be increased significantly.  And we'd ideally avoid some of the existing duplication between the C# and VB generator tests (which represent the bulk of the current testing).\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18767/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "Priya91",
        "created_at": "2016-12-07T08:03:12Z",
        "body": "@hughbe @stephentoub Is this fixed in the linked merged PRs, should we close this or is there some work left?"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-12-07T12:24:32Z",
        "body": "@hughbe did a good job adding a bunch of tests.  There's still more that can be done, but the coverage level is high enough that I don't think we need an issue tracking it anymore."
      }
    ]
  },
  {
    "number": 18757,
    "title": "Remove Normalization implementation from corefx",
    "created_at": "2016-09-29T00:10:39Z",
    "closed_at": "2020-02-16T22:56:09Z",
    "labels": [
      "enhancement",
      "area-System.Globalization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18757",
    "body": "we have moved the implementation to System.Private.Corelib in coreclr repo so we can now remove the implementation from corefx \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18757/comments",
    "author": "tarekgh",
    "comments": [
      {
        "user": "GrabYourPitchforks",
        "created_at": "2020-02-15T09:24:54Z",
        "body": "@tarekgh Is there anything left to do here after the repo consolidation?"
      },
      {
        "user": "tarekgh",
        "created_at": "2020-02-16T22:56:09Z",
        "body": "This is done."
      }
    ]
  },
  {
    "number": 18714,
    "title": "Consider checking for IReadOnlyCollection in Enumerable.ToArray",
    "created_at": "2016-09-26T22:18:27Z",
    "closed_at": "2020-01-31T12:38:13Z",
    "labels": [
      "enhancement",
      "area-System.Linq",
      "blocked",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18714",
    "body": "It may be useful to check for `IReadOnlyCollection` in `Enumerable.ToArray` so we can presize the array before copying over the elements. Additionally, if source implements `IReadOnlyList` we can avoid the enumerator allocation and make only 1 as opposed to 2 virtual calls per iteration.\n\nI do not think we should optimize for read-only collections in other parts of the LINQ codebase, since 1) it would add a lot more complexity and 2) casting to variant interfaces is slow (dotnet/coreclr#603), so enumerables that do not implement these interfaces will pay.\n\nHowever, this particular case may be worthwhile, since it is such a hot codepath and the 2x virtual method calls per iteration will make the tradeoff immeasurable for larger lazy enumerables. This should definitely be considered once the related CoreCLR issue is fixed.\n\nThis will benefit collections like `Stack` and `Queue` which do not implement `ICollection<T>`. (At least, not until dotnet/runtime#18673 is accepted/rejected.)\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18714/comments",
    "author": "jamesqo",
    "comments": [
      {
        "user": "svick",
        "created_at": "2016-09-27T12:30:10Z",
        "body": "> if source implements `IReadOnlyList` we can avoid the enumerator allocation and make only 1 as opposed to 2 virtual calls per iteration\n\nNot sure that's a good idea, since iterating using the indexer could be much slower than iterating using `IEnumerator<T>`. This could happen with custom collections similar to `ImmutableList<T>` (but not `ImmutableList<T>` specifically, since that also implements `ICollection<T>` and so `ToArray()` just calls `CopyTo()`).\n"
      },
      {
        "user": "VSadov",
        "created_at": "2016-11-10T23:13:07Z",
        "body": "Right. Immutable collections are known to have relatively expensive indexers, so using indexer may not be a win.\nOverall this might only be profitable when dotnet/coreclr#603 is fixed. \n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T23:17:39Z",
        "body": "Blocked on dotnet/coreclr#603"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-12T16:17:20Z",
        "body": "This is a theory about a potential perf improvement to potentially investigate. There are many such things that could be looked at... we don't need issues tracking them. If someone finds a performance improvement somewhere and wants to submit a PR for it, that's welcome."
      }
    ]
  },
  {
    "number": 18670,
    "title": "WinHttpHandler could query individual headers instead of double buffering them in the managed address space",
    "created_at": "2016-09-22T18:00:25Z",
    "closed_at": "2020-01-31T12:35:46Z",
    "labels": [
      "enhancement",
      "area-System.Net",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18670",
    "body": "Currently, WinHttpHandler is double buffering instead of lazily extracting headers as they are requested by the application.\n\nThis is debatable and would need to be profiled. Lacking the necessary telemetry it's hard to understand if most apps really care about the headers or not. If not, this change should be made to avoid consuming both native-heap and managed-heap memory for the same information.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18670/comments",
    "author": "CIPop",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2018-05-22T00:11:12Z",
        "body": "We should not have this problem with SocketsHttpHandler."
      }
    ]
  },
  {
    "number": 18653,
    "title": "XmlSerializer to Support XmlSerializerFactory in ReflectionOnly Mode",
    "created_at": "2016-09-20T21:59:07Z",
    "closed_at": "2020-01-31T12:34:53Z",
    "labels": [
      "enhancement",
      "area-Serialization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18653",
    "body": "Steps to repro the issue:\r\n\r\n1. Remove [ActiveIssue] on the test.\r\n2. cd into `src\\System.Private.Xml\\tests\\XmlSerializer\\ReflectionOnly`\r\n3. `msbuild System.Xml.XmlSerializer.ReflectionOnly.Tests.csproj /t:buildandtest`\r\n\r\nThe test failed with the following error,\r\n\r\n```\r\n     XmlSerializerTests.XmlSerializerFactoryTest [FAIL]\r\n        System.InvalidOperationException : There was an error generating the XML document.\r\n        ---- System.ArgumentNullException : Value cannot be null.\r\n        Parameter name: type\r\n        Stack Trace:\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(511,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespaces, Stri\r\n  ng encodingStyle, String id)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(414,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespaces, Stri\r\n  ng encodingStyle)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(409,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespaces)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(391,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(Stream stream, Object o, XmlSerializerNamespaces namespaces)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(379,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(Stream stream, Object o)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\tests\\XmlSerializer\\XmlSerializerTests.cs(2382,0): at XmlSeri\r\n  alizerTests.SerializeAndDeserialize[T](T value, String baseline, Func`1 serializerFactory, Boolean skipStringCompare\r\n  , XmlSerializerNamespaces xns)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\tests\\XmlSerializer\\XmlSerializerTests.cs(2363,0): at XmlSeri\r\n  alizerTests.XmlSerializerFactoryTest()\r\n           ----- Inner Stack Trace -----\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlReflectionImporter.cs(174,0):\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(Type type, XmlRootAttribute root, String defaul\r\n  tNamespace)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(441,0): at Syst\r\n  em.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespaces, Stri\r\n  ng encodingStyle, String id)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18653/comments",
    "author": "shmao",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-04T19:37:00Z",
        "body": "Next step: Get it under debugger and find out what's wrong.\n"
      }
    ]
  },
  {
    "number": 18652,
    "title": "XmlSerializer to Support XmlSchemaTest in ReflectionOnly Mode",
    "created_at": "2016-09-20T21:56:36Z",
    "closed_at": "2020-01-31T12:34:51Z",
    "labels": [
      "enhancement",
      "area-Serialization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18652",
    "body": "Steps to repro the issue:\r\n\r\n1. Remove [ActiveIssue] on the test.\r\n2. cd into `src\\System.Private.Xml\\tests\\XmlSerializer\\ReflectionOnly`\r\n3. `msbuild System.Xml.XmlSerializer.ReflectionOnly.Tests.csproj /t:buildandtest`\r\n\r\nThe test failed with the following error,\r\n\r\n```\r\nXmlSerializerTests.XmlSchemaTest [FAIL]\r\n        System.InvalidOperationException : There was an error generating the XML document.\r\n        ---- System.PlatformNotSupportedException : System.Xml.Schema.XmlSchemaObject\r\n        Stack Trace:\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(504,0): at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSeri\r\n  alizerNamespaces namespaces, String encodingStyle, String id)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(407,0): at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSeri\r\n  alizerNamespaces namespaces, String encodingStyle)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(402,0): at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSeri\r\n  alizerNamespaces namespaces)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Schema\\XmlSchema.cs(235,0): at System.Xml.Schema.XmlSchema.Write(XmlWriter writer, XmlNamespaceManager namespaceManager)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Schema\\XmlSchema.cs(155,0): at System.Xml.Schema.XmlSchema.Write(Stream stream, XmlNamespaceManager namespaceManager)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Schema\\XmlSchema.cs(144,0): at System.Xml.Schema.XmlSchema.Write(Stream stream)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\tests\\XmlSerializer\\XmlSerializerTests.cs(2348,0): at XmlSerializerTests.XmlSchemaTest()\r\n           ----- Inner Stack Trace -----\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(483,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteStruc\r\n  tMethod(StructMapping mapping, String n, String ns, Object o, Boolean isNullable, Boolean needType, XmlMapping parentMapping)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(390,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteEleme\r\n  nt(Object o, ElementAccessor element, String arrayName, Boolean writeAccessor, XmlMapping parentMapping)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(163,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteEleme\r\n  nts(Object o, Object enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, String arrayName, Boolean writeAccessors, Boolean isNullable, XmlMapping parentMapping\r\n  )\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(110,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteMembe\r\n  r(Object o, Object choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, Boolean writeAccessors, XmlMapping parentMapping)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(93,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.GenerateTyp\r\n  eElement(Object o, XmlTypeMapping xmlMapping)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(58,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteObject\r\n  OfTypeElement(Object o, XmlTypeMapping mapping)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\ReflectionXmlSerializationWriter.cs(48,0): at System.Xml.Serialization.ReflectionXmlSerializationWriter.WriteObject\r\n  (Object o)\r\n           D:\\OSS\\corefx-1\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(438,0): at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSeri\r\n  alizerNamespaces namespaces, String encodingStyle, String id)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18652/comments",
    "author": "shmao",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-04T19:36:49Z",
        "body": "Next step: Get it under debugger and find out what's wrong.\n"
      }
    ]
  },
  {
    "number": 18556,
    "title": "Recombine FileStream to simplify and avoid bugs",
    "created_at": "2016-09-14T14:56:04Z",
    "closed_at": "2020-01-31T12:29:00Z",
    "labels": [
      "bug",
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18556",
    "body": "FileStream in corefx is currently implemented as a wrapper around an inner stream that actually provides the logic for the current platform, e.g. it wraps a UnixFileStream on Unix, a Win32FileStream on Windows, etc.  This has several issues:\n- Adds expense to create, as we're now creating two streams where we actually only need one\n- Adds expense on every operation, as each virtual call on the FileStream then turns around and calls a virtual method on the wrapped stream\n- Leads to bugs, e.g. it looks like we currently have a bug, where in sync mode, FileStream.ReadAsync calls Win32FileStream.ReadAsync which calls base.ReadAsync which in turns queues a work item to call Read... but it's calling Read on the inner stream, not on the outer stream, which means a FileStream-derived type that overrides Read won't have its override called.\n\nWe can avoid all of these issues by recombining FileStream into a partial class like we use elsewhere in corefx.  The primary trickiness comes with WinRT, where, depending on the path, we sometimes use Win32FileStream and sometimes use WinRTFileStream.\n\ncc: @ericstj, @justinvp, @JeremyKuhne, @ianhays \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18556/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "ianhays",
        "created_at": "2016-09-14T15:26:17Z",
        "body": "+1 great idea. I'm really not a fan of the Win32FileSystem/UnixFileSystem structure either. The \"Current\" FileSystem variable seems like unnecessary indirection when we could just be using partial classes with conditional inclusion instead.\n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-09-14T15:49:58Z",
        "body": "The FileSystem PAL we have today predates all of the cross-plat work and was designed primarily for the WinRT sceanario (and potentially even public exposure).  Now that we have a more common pattern for x-plat and cross-compiling and we're cross-compiling anyway it makes sense to remove this abstraction.\n"
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2016-09-14T18:50:19Z",
        "body": "I'm good with this as well.\n"
      }
    ]
  },
  {
    "number": 18535,
    "title": "EncryptFile & DecryptFile not available on all Windows versions",
    "created_at": "2016-09-13T01:54:02Z",
    "closed_at": "2020-01-31T12:27:56Z",
    "labels": [
      "enhancement",
      "area-System.IO",
      "os-windows-nano",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18535",
    "body": "These APIs (exposed through File and FileInfo) are entries into EFS functionality. WinRT doesn't expose these particular APIs directly, but has a `FileProtectionManager` class that provides access to EFS (Encrypt is the only currently supported entrypoint).\n\nOneCore also does not expose EncryptFile\\DecryptFile.\n\nNeed to follow through on the plausibility of using FileProtectionManager and potentially other entry points into EFS to expose this API in CoreFx on Windows.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18535/comments",
    "author": "JeremyKuhne",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-10-12T22:30:37Z",
        "body": "We need to implement EncryptFile/DecryptFile using FileProtectionManager APIs.\n"
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2020-01-15T00:59:57Z",
        "body": "Triage: No customer demand. The existing Encrypt/Decrypt works with EFS, which isn't fully supported on file systems like ReFS. It is also discouraged- MS IT for example disables this in favor of BitLocker."
      }
    ]
  },
  {
    "number": 18496,
    "title": "WindowsSearchPatternInvalid theory failing after Windows path changes",
    "created_at": "2016-09-10T18:33:42Z",
    "closed_at": "2020-01-31T12:25:50Z",
    "labels": [
      "area-System.IO",
      "disabled-test",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18496",
    "body": "```\nSystem.IO.Tests.DirectoryInfo_GetDirectories_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumDir_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumDir_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetFileSystemEntries_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumDir_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumFSE_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_GetFileSystemInfos_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetFileSystemEntries_str_str_so_alldirs.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumFSE_str_str_so_alldirs.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetDirectories_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_GetFileSystemInfos_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_GetFiles_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_GetDirectories_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumFiles_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumFSI_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetFileSystemEntries_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumDir_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumFSE_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetDirectories_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_EnumFiles_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetFiles_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumerateFiles_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.Directory_GetFiles_str_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumFSI_str_str.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_GetFiles_str_so.WindowsSearchPatternInvalid\nSystem.IO.Tests.DirectoryInfo_EnumerateFiles_str_str.WindowsSearchPatternInvalid\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18496/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-10-12T22:33:00Z",
        "body": "The tests need to be updated to new wildcard characters - @JeremyKuhne 'broke' them in his PR when he introduced new wildcard characters (they are used in the tests as on-wildcard) .\n"
      }
    ]
  },
  {
    "number": 18487,
    "title": "DriveInfo.DriveType reports \"unknown\" in Windows Subsystem for Linux",
    "created_at": "2016-09-09T21:01:11Z",
    "closed_at": "2020-01-31T12:25:19Z",
    "labels": [
      "bug",
      "area-System.IO",
      "disabled-test",
      "os-windows-wsl",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18487",
    "body": "Running on Ubuntu in Windows Subsystem for Linux, on rs_prerelease build 14915, DriveInfo.DriveType reports \"Unknown\" for both the Linux file system (`/`, `/usr`, etc.) and mounted Windows drives (`/mnt/c`, etc).  I would expect it to report \"fixed\" for at least the Linux file system, and preferably the mounted Windows drives as well.\n\nThe `df -T` command reports file system names for these, so apparently there is some info available:\n\n```\nFilesystem     Type  1K-blocks      Used Available Use% Mounted on\nrootfs         lxfs  498859004 167549372 331309632  34% /\ndata           lxfs  498859004 167549372 331309632  34% /data\ncache          lxfs  498859004 167549372 331309632  34% /cache\nmnt            lxfs  498859004 167549372 331309632  34% /mnt\nnone           tmpfs 498859004 167549372 331309632  34% /dev\nnone           tmpfs 498859004 167549372 331309632  34% /run\nnone           tmpfs 498859004 167549372 331309632  34% /run/lock\nnone           tmpfs 498859004 167549372 331309632  34% /run/shm\nnone           tmpfs 498859004 167549372 331309632  34% /run/user\nnone           drvfs 498859004 167549372 331309632  34% /mnt/c\n```\n\n(note that `/` is \"lxfs\" and `/mnt/c` is \"drvfs.\"\n\nThis causes a failure in the DriveInfo tests (in `DriveInfoUnixTests.PropertiesOfValidDrive`).  I'll be conditionally disabling that test for now.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18487/comments",
    "author": "ericeil",
    "comments": [
      {
        "user": "sunilmut",
        "created_at": "2016-09-19T19:47:09Z",
        "body": "Thanks Eric for reporting this. We have opened a bug internally to track this.\n"
      },
      {
        "user": "misenesi",
        "created_at": "2016-10-03T18:54:01Z",
        "body": "Discussed with Eric offline. The issues seems to be that the DriveInfo.DriveType doesn't recognize drvfs and lxfs.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-12T22:36:50Z",
        "body": "It looks like we need another case in switch statement for these 2 file systems in `DriveInfo.DriveType`.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-01-25T00:24:08Z",
        "body": "I hit this same test failure when running the tests in an ubuntu docker image on windows. "
      }
    ]
  },
  {
    "number": 18463,
    "title": "Lots of unused resource strings across corefx",
    "created_at": "2016-09-07T15:34:31Z",
    "closed_at": "2020-01-31T12:23:58Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18463",
    "body": "This isn't exact (there are likely both false positives and false negatives here), but a quick search across corefx shows over a thousand resource strings that are unused and could be deleted:\n\n```\ncorefx\\src\\Microsoft.Win32.Registry\\src\\Resources\\Strings.resx : Argument_InvalidRegistryKeyPermissionCheck\ncorefx\\src\\Microsoft.Win32.Registry.AccessControl\\src\\Resources\\Strings.resx : UnauthorizedAccess_RegistryNoWrite\ncorefx\\src\\System.Collections.Specialized\\src\\Resources\\Strings.resx : Arg_NonZeroLowerBound\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : AttributeStore_Type_Must_Be_Public\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : AttributeStore_Unknown_Method\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : Common_NullOrEmpty\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : MetadataTypeAttribute_TypeCannotBeNull\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : ValidationContext_Must_Be_Method\ncorefx\\src\\System.ComponentModel.Annotations\\src\\Resources\\Strings.resx : ValidationContextServiceContainer_ItemAlreadyExists\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryAction\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryAppearance\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryAsynchronous\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryBehavior\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryConfig\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryData\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryDDE\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryDefault\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryDesign\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryDragDrop\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryFocus\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryFont\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryFormat\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryKey\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryLayout\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryList\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryMouse\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryPosition\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryScale\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryText\ncorefx\\src\\System.ComponentModel.Primitives\\src\\Resources\\Strings.resx : PropertyCategoryWindowStyle\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_1\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_2\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_3\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_5\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_6\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_7\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_8\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_9\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_11\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_12\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_13\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_14\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_15\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_16\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_17\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_18\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_19\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_20\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_21\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_22\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_23\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_24\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_25\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_26\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_27\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_28\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_29\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_30\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_31\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_32\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_33\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_34\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_35\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_36\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_37\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_38\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_39\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_40\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_41\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_42\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_43\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_44\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_47\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_48\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_49\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_50\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_51\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_52\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_53\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_54\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_55\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_56\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_ERROR_57\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : Snix_AutoEnlist\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : LocalDB_FailedGetDLLHandle\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : LocalDB_MethodNotFound\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : LocalDB_UnobtainableMessage\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN0\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN1\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN2\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN3\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN4\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN5\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN6\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN7\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN8\ncorefx\\src\\System.Data.SqlClient\\src\\Resources\\Strings.resx : SNI_PN9\ncorefx\\src\\System.Diagnostics.Debug\\src\\Resources\\Strings.resx : DebugAssertTitle\ncorefx\\src\\System.Diagnostics.Debug\\src\\Resources\\Strings.resx : DebugAssertTitleShort\ncorefx\\src\\System.Diagnostics.Debug\\src\\Resources\\Strings.resx : RTL\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : PriorityClassNotSupported\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : ProcessNotFound\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : InputIdleUnkownError\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : CantUseEnvVars\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : EnvironmentBlockTooLong\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : CantFindProcessExecutablePath\ncorefx\\src\\System.Diagnostics.Process\\src\\Resources\\Strings.resx : ResourceLimitQueryFailure\ncorefx\\src\\System.Diagnostics.TraceSource\\src\\Resources\\Strings.resx : ExceptionOccurred\ncorefx\\src\\System.Diagnostics.TraceSource\\src\\Resources\\Strings.resx : DebugAssertTitle\ncorefx\\src\\System.Diagnostics.TraceSource\\src\\Resources\\Strings.resx : RTL\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : ArgumentOutOfRange_MaxArgExceeded\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : ArgumentOutOfRange_MaxStringsExceeded\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedValidId\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedPosNum\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_ListenerNotFound\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_ToString\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_ImplementGetMetadata\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_NeedGuid\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_NeedName\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_NeedDescriptors\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_NeedManifest\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_EventSourceGuidInUse\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_ListenerWriteFailure\ncorefx\\src\\System.Diagnostics.Tracing\\src\\Resources\\Strings.resx : EventSource_NoManifest\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedPosNum\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : CorruptedGZipHeader\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : UnknownCompressionMode\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : InvalidCRC\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : InvalidStreamSize\ncorefx\\src\\System.IO.Compression\\src\\Resources\\Strings.resx : FileNameContainsInvalidCharacters\ncorefx\\src\\System.IO.FileSystem\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedNonNegInt32Range\ncorefx\\src\\System.IO.FileSystem\\src\\Resources\\Strings.resx : Argument_PathFormatNotSupported\ncorefx\\src\\System.IO.FileSystem.Watcher\\src\\Resources\\Strings.resx : ObjectDisposed_FileClosed\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : IsolatedStorage_OldQuotaLarger\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : IsolatedStorage_Operation_ISFS\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : IsolatedStorage_SeekOrigin\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : IsolatedStorage_Init\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : ArgumentNull_Path\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : Argument_AbsolutePathRequired\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : Argument_PathFormatNotSupported\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : PathNotFound_NoPathName\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : PathTooLong\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : FileNotFound\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : FileNotFound_FileName\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : IO_NoPermissionToDirectoryName\ncorefx\\src\\System.IO.IsolatedStorage\\src\\Resources\\Strings.resx : DriveNotFound_Drive\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : FragmentMustStartWithHash\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : IncompatibleModeOrAccess\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : InnerPackageUriHasFragment\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : InvariantFailure\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : OffsetNegative\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : ReadBufferTooSmall\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : ReadCountNegative\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : ReadNotSupported\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : ReadOnlyStream\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : UriShouldBeAbsolute\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : UriShouldBePackScheme\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : WriteBufferTooSmall\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : WriteCountNegative\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : WriteNotSupported\ncorefx\\src\\System.IO.Packaging\\src\\Resources\\Strings.resx : WriteOnlyStream\ncorefx\\src\\System.IO.Pipes\\src\\Resources\\Strings.resx : ArgumentOutOfRange_AdditionalAccessLimited\ncorefx\\src\\System.IO.Pipes\\src\\Resources\\Strings.resx : ArgumentOutOfRange_InvalidPipeAccessRights\ncorefx\\src\\System.IO.Pipes\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedPosNum\ncorefx\\src\\System.IO.Pipes\\src\\Resources\\Strings.resx : IO_BindHandleFailed\ncorefx\\src\\System.IO.Pipes\\src\\Resources\\Strings.resx : IO_NoPermissionToDirectoryName\ncorefx\\src\\System.IO.UnmanagedMemoryStream\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedPosNum\ncorefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : MoreThanOneElement\ncorefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : NoMatch\ncorefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : ParallelEnumerable_WithCancellation_TokenSourceDisposed\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : event_ClientSendCompleted\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : event_HeadersInvalidValue\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : event_ContentNull\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_io_read_incomplete\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_chunked_not_allowed_with_content_length\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_invalid_proxyusepolicy\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_invalid_proxy\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : MailHeaderFieldMalformedHeader\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : InvalidHeaderName\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_invalid_cookiecontainer_unix\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_username_empty_string\ncorefx\\src\\System.Net.Http\\src\\Resources\\Strings.resx : net_http_no_concurrent_io_allowed\ncorefx\\src\\System.Net.Http.WinHttpHandler\\src\\Resources\\Strings.resx : net_http_content_buffersize_limit\ncorefx\\src\\System.Net.NameResolution\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.NetworkInformation\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.Ping\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nonClsCompliantException\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_illegalConfigWith\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_illegalConfigWithout\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_baddate\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_writestarted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_clsmall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_reqsubmitted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_rspsubmitted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_no_http_cmd\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_invalid_method_name\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_invalid_renameto\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_no_defaultcreds\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpnoresponse\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_response_invalid_format\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_no_offsetforhttp\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_invalid_uri\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_invalid_status_response\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_server_failed_passive\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_active_address_different\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_proxy_does_not_support_ssl\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_invalid_response_filename\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftp_unsupported_method\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_resubmitcanceled\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_redirect_perm\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_resubmitprotofailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_needchunked\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nochunked\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nochunkuploadonhttp10\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_connarg\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_no100\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_fromto\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_rangetoosmall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_entitytoobig\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalidversion\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalidstatus\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_toolong\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_connclosed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_noseek\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_servererror\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nouploadonget\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_mutualauthfailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invasync\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_inasync\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_mustbeuri\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_format_shexp\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cannot_load_proxy_helper\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalid_host\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_repcall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_wrongversion\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_badmethod\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_notenoughbyteswritten\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_timeout_use_ge_zero\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_timeout_use_gt_zero\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_no_0timeouts\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_requestaborted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_tooManyRedirections\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_authmodulenotregistered\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_authschemenotregistered\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_proxyschemenotsupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_maxsrvpoints\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_unknown_prefix\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_notconnected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_notstream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_timeout\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nocontentlengthonget\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_contentlengthmissing\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nonhttpproxynotallowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nottoken\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_rangetype\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_need_writebuffering\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_nodefaultcreds\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_stopped\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_udpconnected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_readonlystream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_writeonlystream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_no_concurrent_io_allowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_needmorethreads\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_MethodNotSupportedException\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_PropertyNotSupportedException\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ProtocolNotSupportedException\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_SelectModeNotSupportedException\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_InvalidSocketHandle\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_InvalidEndPointAddressFamily\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalidAddressList\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalidPingBufferSize\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cant_perform_during_shutdown\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cant_create_environment\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_protocol_invalid_family\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_protocol_invalid_multicast_family\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_empty_osinstalltype\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_unknown_osinstalltype\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cant_determine_osinstalltype\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_osinstalltype\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_entire_body_not_written\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_must_provide_request_body\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssp_dont_support_cbt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_zerolist\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_blocking\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_useblocking\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_select\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_toolarge_select\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_empty_select\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_mustbind\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_mustlisten\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_mustnotlisten\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_mustnotbebound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_namedmustnotbebound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_invalid_socketinformation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_invalid_ipaddress_length\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_invalid_dnsendpoint\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_disconnectedConnect\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_disconnectedAccept\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_tcplistener_mustbestopped\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_no_duplicate_async\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_socketopinprogress\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_buffercounttoosmall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_multibuffernotsupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ambiguousbuffers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_sockets_ipv6only\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perfcounter_initialized_success\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perfcounter_initialized_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perfcounter_nocategory\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perfcounter_initialization_started\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perfcounter_cant_queue_workitem\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_proxy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_proxy_module_not_public\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_authenticationmodules\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_webrequestmodules\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_requestcaching\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_section_permission\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_element_permission\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_config_property_permission\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_InvalidHeaderName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_InvalidContentLength\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_IncompleteHeaderLine\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_CrLfError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_InvalidChunkFormat\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebResponseParseError_UnexpectedServerResponse\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_Success\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_NameResolutionFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_ConnectFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_ReceiveFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_SendFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_PipelineFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_RequestCanceled\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_ConnectionClosed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_TrustFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_SecureChannelFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_ServerProtocolViolation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_KeepAliveFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_ProxyNameResolutionFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_MessageLengthLimitExceeded\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_CacheEntryNotFound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_RequestProhibitedByCachePolicy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_Timeout\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webstatus_RequestProhibitedByProxy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_InvalidStatusCode\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ServiceNotAvailable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_CantOpenData\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ConnectionClosed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionAbortedLocalProcessingError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionNotTakenInsufficentSpace\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_CommandSyntaxError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ArgumentSyntaxError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_CommandNotImplemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_BadCommandSequence\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_NotLoggedIn\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_AccountNeeded\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionNotTakenFileUnavailable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionAbortedUnknownPageType\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_FileActionAborted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ftpstatuscode_ActionNotTakenFilenameNotAllowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NoContent\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NonAuthoritativeInformation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_ResetContent\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_PartialContent\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_MultipleChoices\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Ambiguous\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_MovedPermanently\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Moved\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Found\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Redirect\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_SeeOther\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_RedirectMethod\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NotModified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_UseProxy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_TemporaryRedirect\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_RedirectKeepVerb\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_BadRequest\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Unauthorized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_PaymentRequired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Forbidden\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NotFound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_MethodNotAllowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NotAcceptable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_ProxyAuthenticationRequired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_RequestTimeout\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Conflict\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_Gone\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_LengthRequired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_InternalServerError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_NotImplemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_BadGateway\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_ServiceUnavailable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_GatewayTimeout\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_httpstatuscode_HttpVersionNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadScheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadFormat\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadUserPassword\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadHostName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadAuthority\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadAuthorityTerminator\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_EmptyUri\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadString\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_MustRootedPath\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadPort\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_SizeLimit\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_SchemeLimit\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_NotAbsolute\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_PortOutOfRange\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_UserDrivenParsing\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_AlreadyRegistered\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_NeedFreshParser\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_CannotCreateRelative\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_InvalidUriKind\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_BadUnicodeHostForIdn\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_GenericAuthorityNotDnsSafe\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_uri_NotJustSerialization\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_emptystringset\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_headers_req\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_headers_rsp\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_headers_toolong\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebHeaderInvalidControlChars\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebHeaderInvalidCRLFChars\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebHeaderInvalidHeaderChars\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebHeaderInvalidNonAsciiChars\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebHeaderMissingColon\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_headerrestrict\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_completionportwasbound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_writefailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_readfailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_connectionclosed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_transportfailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_internal_bind\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_invalidasyncresult\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_invalidnestedcall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_invalidendcall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_must_be_rw_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_header_id\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_out_range\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_encrypt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_decrypt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_read\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_write\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_eof\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_io_async_result\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_mustcall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_mustcompletecall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_callinprogress\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_scheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_host\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_slash\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_repcall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_invalid_cbt_type\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_no_spns\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_cannot_set_custom_cbt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_cbt_not_supported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_detach_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_close_urlgroup_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_tls_version\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_target\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_both_regex\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_none\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_attrib_count\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_invalid_val\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_attrib_multi\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_epname\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_perm_invalid_val_in_element\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalid_ip_addr\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_bad_mac_address\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ping\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_bad_ip_address_prefix\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_max_ip_address_list_length_exceeded\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ipv4_not_installed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ipv6_not_installed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webclient\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webclient_ContentType\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webclient_Multipart\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webclient_no_concurrent_io_allowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_webclient_invalid_baseaddress\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cookie_invalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cookie_exists\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_set_token\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_revert_token\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_async_context\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_encrypt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_decrypt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_context_expired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_handshake_start\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_handshake\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_frame\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_corrupted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_cert_validation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_invalid_end_call\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_ssl_io_invalid_begin_call\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_bad_client_creds\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_bad_client_creds_or_target_mismatch\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_context_expectation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_context_expectation_remote\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_supported_impl_levels\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_no_anonymous_support\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_reauth\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_noauth\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_client_server\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_noencryption\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_SSPI\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_failure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_eof\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_alert\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_ignored_reauth\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_empty_read\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_auth_must_specify_extended_protection_scheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_frame_size\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_frame_read_io\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_frame_read_size\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_frame_max_size\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_jscript_load\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_proxy_not_gmt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_proxy_invalid_dayofweek\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_proxy_invalid_url_format\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_param_not_string\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_value_cannot_be_negative\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalid_offset\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_offset_plus_count\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cannot_be_false\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_listener_already\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_shadowstream_not_writable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_validator_fail\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_access_denied\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_validator_result\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_retrieve_failure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_not_supported_body\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_not_supported_command\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_not_accept_response\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_method_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_key_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_no_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_unsupported_partial_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_not_configured\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_cache_non_seekable_stream_not_supported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_invalid_cast\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_not_ipermission\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_no_classname\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_no_typename\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_array_too_small\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_servicePointAddressNotSupportedInHostMode\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_Websockets_AlreadyOneOutstandingOperation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_Websockets_WebSocketBaseFaulted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_NativeSendResponseHeaders\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_NotAWebSocket_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_UnsupportedWebSocketVersion_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_HeaderError_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_UnsupportedProtocol_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_AcceptNotAWebSocket\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_AcceptUnsupportedWebSocketVersion\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_AcceptHeaderNotFound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_AcceptUnsupportedProtocol\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ClientAcceptingNoProtocols\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ClientSecWebSocketProtocolsBlank\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ArgumentOutOfRange_TooSmall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ArgumentOutOfRange_InternalBuffer\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ArgumentOutOfRange_TooBig\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidState_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidState_ClosedOrAborted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidMessageType\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidBufferType\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidMessageType_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_Argument_InvalidMessageType\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_ConnectionClosedPrematurely_Generic\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_Scheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_AlreadyStarted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_Connect101Expected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidResponseHeader\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_NotConnected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_InvalidRegistration\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_WebSockets_NoDuplicateProtocol\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_delegate_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_unsupported_authentication_scheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_unmatched_authentication_scheme\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_create_valid_identity_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_httpsys_registry_null\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_httpsys_registry_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cant_convert_raw_path\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cant_convert_percent_value\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cant_convert_bytes\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cant_convert_to_utf8\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cant_create_uri\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_cbt_disabled\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_cbt_http\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_cbt_platform\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_cbt_trustedproxy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_cbt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_kerberos\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_disabled\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_cbt\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_platform\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_whensupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_no_spn_loopback\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_passed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_failed_always\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_failed_empty\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_failed_dump\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_add\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_not_add\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_remove\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_listener_spn_not_remove\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sspi_enumerating_security_packages\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sspi_security_package_not_found\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sspi_security_context_input_buffer\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sspi_security_context_input_buffers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sspi_selected_cipher_suite\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_certificate\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_locating_private_key_for_certificate\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cert_is_of_type_2\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_found_cert_in_store\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_did_not_find_cert_in_store\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_open_store_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_got_certificate_from_delegate\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_no_delegate_and_have_no_client_cert\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_no_delegate_but_have_client_cert\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_attempting_restart_using_cert\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_no_issuers_try_all_certs\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_server_issuers_look_for_matching_certs\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_selected_cert\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_n_certs_after_filtering\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_finding_matching_certs\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_using_cached_credential\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_user_declared_valid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_user_declared_invalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_has_no_errors\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_has_errors\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_not_available\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_remote_cert_name_mismatch\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_autodetect_script_location_parse_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_autodetect_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_script_execution_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_script_download_compile_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_system_setting_update\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_update_due_to_ip_config_change\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_called_with_null_parameter\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_called_with_invalid_parameter\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_ras_supported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_ras_notsupported_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_winhttp_cant_open_session\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_winhttp_getproxy_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_proxy_winhttp_timeout_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_validation_failed_resubmit\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_refused_server_response\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_ftp_proxy_doesnt_support_partial\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_ftp_method\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_ftp_supports_bin_only\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_replacing_entry_with_HTTP_200\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_now_time\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_age_absolute\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age1\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age1_date_header\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age1_last_synchronized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age1_last_synchronized_age_header\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age2\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_age_cache_s_max_age\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_age_expires_date\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_age_cache_max_age\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_max_age_use_10_percent\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_max_age_use_default\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_validator_invalid_for_policy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_response_last_modified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cache_last_modified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_partial_and_non_zero_content_offset\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_response_valid_based_on_policy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_null_response_failure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_ftp_response_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_valid_based_on_retry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_update_based_on_method\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_removed_existing_invalid_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_not_updated_based_on_policy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_not_updated_because_no_response\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_removed_existing_based_on_method\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_existing_not_removed_because_unexpected_response_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_removed_existing_based_on_policy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_not_updated_based_on_ftp_response_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_update_not_supported_for_ftp_restart\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_removed_entry_because_ftp_restart_response_changed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_last_synchronized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_suppress_update_because_synched_last_minute\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_updating_last_synchronized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cannot_remove\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_key_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_key_remove_failed_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_usecount_file\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_filename\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_lookup_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_expected_length\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_last_modified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_expires\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_stale\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_dumping_metadata\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_create_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_set_expires\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_set_last_modified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_set_last_synchronized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_enable_max_stale\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_disable_max_stale\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_set_new_metadata\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_dumping\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_key\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_commit\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_error_deleting_filename\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_update_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_delete_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_commit_failed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_committed_as_partial\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_max_stale_and_update_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_failing_request_with_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_request_method\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_http_status_parse_failure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_http_status_line\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cache_control\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_invalid_http_version\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_http_response_header\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_http_header_parse_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_metadata_name_value_parse_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_content_range_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cache_control_error\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_unexpected_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_object_and_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_revalidation_not_needed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_not_updated_based_on_cache_protocol_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_closing_cache_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_exception_ignored\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_cache_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_null_cached_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_requested_combined_but_null_cached_stream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_returned_range_cache\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_entry_not_found_freshness_undefined\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_dumping_cache_context\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_result\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_uri_with_query_has_no_expiration\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_uri_with_query_and_cached_resp_from_http_10\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_valid_as_fresh_or_because_policy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_accept_based_on_retry_count\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_date_header_older_than_cache_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_server_didnt_satisfy_range\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_304_received_on_unconditional_request\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_304_received_on_unconditional_request_expected_200_206\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_last_modified_header_older_than_cache_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_freshness_outside_policy_limits\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_need_to_remove_invalid_cache_entry_304\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_status\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_304_or_request_head\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_dont_update_cached_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_update_cached_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_partial_resp_not_combined_with_existing_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_request_contains_conditional_header\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_not_a_get_head_post\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cannot_update_cache_if_304\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cannot_update_cache_with_head_resp\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_http_resp_is_null\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_cache_control_is_no_store\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_cache_control_is_public\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_cache_control_is_private\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_cache_control_is_private_plus_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_older_than_cache\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_revalidation_required\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_needs_revalidation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_allows_caching\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_auth_header_and_no_s_max_age\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_post_resp_without_cache_control_or_expires\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_valid_based_on_status_code\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_no_cache_control\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_age\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_policy_min_fresh\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_policy_max_age\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_policy_cache_sync_date\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_policy_max_stale\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_control_no_cache\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_control_no_cache_removing_some_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_control_must_revalidate\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cached_auth_header\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cached_auth_header_no_control_directive\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_after_validation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_resp_status_304\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_head_resp_has_different_content_length\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_head_resp_has_different_content_md5\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_head_resp_has_different_etag\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_304_head_resp_has_different_last_modified\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_existing_entry_has_to_be_discarded\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_existing_entry_should_be_discarded\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_206_resp_non_matching_entry\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_206_resp_starting_position_not_adjusted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_combined_resp_requested\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_updating_headers_on_304\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_suppressing_headers_update_on_304\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_status_code_not_304_206\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_sxx_resp_cache_only\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_sxx_resp_can_be_replaced\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_vary_header_empty\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_vary_header_contains_asterisks\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_no_headers_in_metadata\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_vary_header_mismatched_count\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_vary_header_mismatched_field\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_vary_header_match\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_range\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_range_invalid_format\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_range_not_in_cache\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_range_in_cache\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_partial_resp\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_range_request_range\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_could_be_partial\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_condition_if_none_match\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_condition_if_modified_since\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cannot_construct_conditional_request\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_cannot_construct_conditional_range_request\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_entry_size_too_big\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_condition_if_range\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_conditional_range_not_implemented_on_http_10\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_saving_request_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_only_byte_range_implemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_cache_multiple_complex_range_not_implemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_digest_hash_algorithm_not_supported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_digest_qop_not_supported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_digest_requires_nonce\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_auth_invalid_challenge\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_unknown\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_operation_returned_something\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_buffered_n_bytes\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_method_equal\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_releasing_connection\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_unexpected_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_server_response_error_code\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_resubmitting_request\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_retrieving_localhost_exception\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_resolved_servicepoint_may_not_be_remote_server\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_closed_idle\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_received_status_line\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sending_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_received_headers\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_shell_expression_pattern_format_warning\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_exception_in_callback\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_sending_command\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_received_response\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_socket_connected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_socket_accepted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_socket_not_logged_file\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : net_log_socket_connect_dnsendpoint\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailAddressInvalidFormat\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailSubjectInvalidFormat\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailBase64InvalidCharacter\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailCollectionIsReadOnly\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailDateInvalidFormat\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderFieldAlreadyExists\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderFieldInvalidCharacter\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderFieldMalformedHeader\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderFieldMismatchedName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderIndexOutOfBounds\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderItemAccessorOnlySingleton\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderListHasChanged\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderResetCalledBeforeEOF\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderTargetArrayTooSmall\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHeaderInvalidCID\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailHostNotFound\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailReaderGetContentStreamAlreadyCalled\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailReaderTruncated\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailWriterIsInContent\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailServerDoesNotSupportStartTls\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MailServerResponse\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SSPIAuthenticationOrSPNNull\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SSPIPInvokeError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpAlreadyConnected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpAuthenticationFailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpAuthenticationFailedNoCreds\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpDataStreamOpen\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpDefaultMimePreamble\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpDefaultSubject\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpInvalidResponse\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpNotConnected\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpSystemStatus\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpHelpMessage\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpServiceReady\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpServiceClosingTransmissionChannel\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpOK\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpUserNotLocalWillForward\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpStartMailInput\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpServiceNotAvailable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpMailboxBusy\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpLocalErrorInProcessing\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpInsufficientStorage\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpPermissionDenied\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpCommandUnrecognized\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpSyntaxError\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpCommandNotImplemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpBadCommandSequence\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpCommandParameterNotImplemented\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpMailboxUnavailable\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpUserNotLocalTryAlternatePath\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpExceededStorageAllocation\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpMailboxNameNotAllowed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpTransactionFailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpSendMailFailure\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpRecipientFailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpRecipientRequired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpFromRequired\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpAllRecipientsFailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpClientNotPermitted\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpMustIssueStartTlsFirst\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpNeedAbsolutePickupDirectory\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpGetIisPickupDirectoryFailed\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpPickupDirectoryDoesnotSupportSsl\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpOperationInProgress\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpAuthResponseInvalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpEhloResponseInvalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpNonAsciiUserNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpInvalidHostName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MimeTransferEncodingNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SeekNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : WriteNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidHexDigit\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidSSPIContext\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidSSPIContextKey\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidSSPINegotiationElement\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidHeaderName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidHeaderValue\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : CannotGetEffectiveTimeOfSSPIContext\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : CannotGetExpiryTimeOfSSPIContext\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : ReadNotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidAsyncResult\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : UnspecifiedHost\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidPort\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : SmtpInvalidOperationDuringSend\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MimePartCantResetStream\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : MediaTypeInvalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : ContentTypeInvalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : ContentDispositionInvalid\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : ArgumentOutOfRange_Bounds_Lower_Upper\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : security_ExtendedProtectionPolicy_UseDifferentConstructorForNever\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : security_ServiceNameCollection_EmptyServiceName\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : security_X509Certificate_NotSupported\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple\ncorefx\\src\\System.Net.Primitives\\src\\Resources\\Strings.resx : InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple\ncorefx\\src\\System.Net.Requests\\src\\Resources\\Strings.resx : net_headers_toolong\ncorefx\\src\\System.Net.Requests\\src\\Resources\\Strings.resx : net_emptystringcall\ncorefx\\src\\System.Net.Requests\\src\\Resources\\Strings.resx : net_headers_req\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : Arg_RankMultiDimNotSupported\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : Arg_ArrayPlusOffTooSmall\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : net_mustbeuri\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_EnumerateSecurityPackages\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_SspiPackageNotFound\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_SecurityContextInputBuffer\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_SecurityContextInputBuffers\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_SspiSelectedCipherSuite\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_RemoteCertificate\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_LocatingPrivateKey\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_CertIsType2\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_FoundCertInStore\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_NotFoundCertInStore\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_CertificateFromDelegate\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_NoDelegateNoClientCert\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_NoDelegateButClientCert\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_AttemptingRestartUsingCert\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_NoIssuersTryAllCerts\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_LookForMatchingCerts\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_SelectedCert\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_CertsAfterFiltering\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_FindingMatchingCerts\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_UsingCachedCredential\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_RemoteCertDeclaredValid\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_RemoteCertUserDeclaredInvalid\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : event_RemoteCertHasNoErrors\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : net_context_establishment_failed\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : net_context_wrap_failed\ncorefx\\src\\System.Net.Security\\src\\Resources\\Strings.resx : net_context_unwrap_failed\ncorefx\\src\\System.Net.Sockets\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.Sockets\\src\\Resources\\Strings.resx : net_log_socket_connected\ncorefx\\src\\System.Net.Sockets\\src\\Resources\\Strings.resx : event_Accepted\ncorefx\\src\\System.Net.Sockets\\src\\Resources\\Strings.resx : event_NotLoggedFile\ncorefx\\src\\System.Net.Sockets\\src\\Resources\\Strings.resx : event_ConnectedAsyncDns\ncorefx\\src\\System.Net.WebSockets.Client\\src\\Resources\\Strings.resx : net_log_exception\ncorefx\\src\\System.Net.WebSockets.Client\\src\\Resources\\Strings.resx : net_WebSockets_InvalidMessageType\ncorefx\\src\\System.Numerics.Vectors\\src\\Resources\\Strings.resx : Arg_MultiDimArrayNotSupported\ncorefx\\src\\System.Numerics.Vectors\\src\\Resources\\Strings.resx : Arg_RegisterLengthOfRangeException\ncorefx\\src\\System.Numerics.Vectors\\src\\Resources\\Strings.resx : Reflection_MethodNotSupported\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectSerializer_DictionaryNotSupported\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_BadEscape\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_IllegalPrimitive\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_InvalidArrayExtraComma\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_InvalidMemberName\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_StringNotQuoted\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_UnexpectedToken\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : ObjectDeserializer_UnterminatedString\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : JsonCircularReferenceDetected\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : PartialTrustDataContractMemberGetNotPublic\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : PartialTrustDataContractMemberSetNotPublic\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : UnknownDataContract\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : InvalidDataNode\ncorefx\\src\\System.Private.DataContractSerialization\\src\\Resources\\Strings.resx : TypeNotSerializableViaReflection\ncorefx\\src\\System.Private.Uri\\src\\Resources\\Strings.resx : AssertionFailed\ncorefx\\src\\System.Private.Uri\\src\\Resources\\Strings.resx : Debug_Fail\ncorefx\\src\\System.Reflection.Metadata\\src\\Resources\\Strings.resx : AssemblyTableInvalidNumberOfRows\ncorefx\\src\\System.Reflection.Metadata\\src\\Resources\\Strings.resx : UnableToReadMetadataFile\ncorefx\\src\\System.Reflection.Metadata\\src\\Resources\\Strings.resx : InvalidSectionName\ncorefx\\src\\System.Reflection.Metadata\\src\\Resources\\Strings.resx : NegativeByteCountOrOffset\ncorefx\\src\\System.Resources.Reader\\src\\Resources\\Strings.resx : InvalidOperation_ResourceWriterSaved\ncorefx\\src\\System.Resources.Reader\\src\\Resources\\Strings.resx : NotSupported_WrongResourceReader_Type\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : Arg_ResourceFileUnsupportedVersion\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : Resources_StreamNotValid\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_ResourcesHeaderCorrupted\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : Argument_StreamNotReadable\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_NegativeStringLength\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_ResourcesNameInvalidOffset\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : NotSupported_WrongResourceReader_Type\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_TypeMismatch\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_ResourceNameCorrupted_NameIndex\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_ResourcesDataInvalidOffset\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : Format_Bad7BitInt32\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : BadImageFormat_InvalidType\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : InvalidOperation_EnumNotStarted\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : InvalidOperation_EnumEnded\ncorefx\\src\\System.Resources.Writer\\src\\Resources\\Strings.resx : ResourceReaderIsClosed\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : ArgumentOutOfRange_StartIndex\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : Arg_InvalidSearchPattern\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : Arg_PathGlobalRoot\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : Arg_Path2IsRooted\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : Argument_PathEmpty\ncorefx\\src\\System.Runtime.Extensions\\src\\Resources\\Strings.resx : Argument_PathUriFormatNotSupported\ncorefx\\src\\System.Runtime.InteropServices\\src\\Resources\\Strings.resx : ArgumentOutOfRange_NeedNonNegNumRequired\ncorefx\\src\\System.Runtime.InteropServices\\src\\Resources\\Strings.resx : Argument_InvalidThreshold\ncorefx\\src\\System.Runtime.Serialization.Formatters\\src\\Resources\\Strings.resx : Serialization_OptionalFieldVersionValue\ncorefx\\src\\System.Runtime.WindowsRuntime\\src\\Resources\\Strings.resx : Argument_InvalidSafeBufferOffLen\ncorefx\\src\\System.Runtime.WindowsRuntime\\src\\Resources\\Strings.resx : NotSupported_UmsSafeBuffer\ncorefx\\src\\System.Runtime.WindowsRuntime\\src\\Resources\\Strings.resx : Arg_BufferTooSmall\ncorefx\\src\\System.Security.Claims\\src\\Resources\\Strings.resx : InvalidOperation_ClaimCannotBeRemoved\ncorefx\\src\\System.Security.Claims\\src\\Resources\\Strings.resx : InvalidOperationException_ActorGraphCircular\ncorefx\\src\\System.Security.Cryptography.Algorithms\\src\\Resources\\Strings.resx : Cryptography_InvalidKey_SemiWeak\ncorefx\\src\\System.Security.Cryptography.Algorithms\\src\\Resources\\Strings.resx : Cryptography_PasswordDerivedBytes_InvalidAlgorithm\ncorefx\\src\\System.Security.Cryptography.Algorithms\\src\\Resources\\Strings.resx : Cryptography_PasswordDerivedBytes_InvalidIV\ncorefx\\src\\System.Security.Cryptography.Algorithms\\src\\Resources\\Strings.resx : Cryptography_RC2_EKS40\ncorefx\\src\\System.Security.Cryptography.Algorithms\\src\\Resources\\Strings.resx : Cryptography_RC2_EKSKS\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_ArgECDHKeySizeMismatch\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_ArgECDHRequiresECDHKey\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_ArgExpectedECDiffieHellmanCngPublicKey\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_ECXmlSerializationFormatRequired\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_InvalidSignatureAlgorithm\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : NotSupported_Method\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_NonCompliantFIPSAlgorithm\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_RC2_EKSKS2\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_TlsRequiresLabelAndSeed\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : Cryptography_PlatformNotSupported\ncorefx\\src\\System.Security.Cryptography.Cng\\src\\Resources\\Strings.resx : WorkInProgress_UnsupportedHash\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Argument_StreamNotReadable\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Argument_StreamNotWritable\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Cryptography_CryptoStream_FlushFinalBlockTwice\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Cryptography_InvalidBlockSize\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Cryptography_InvalidCipherMode\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Cryptography_InvalidFeedbackSize\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : Cryptography_InvalidIVSize\ncorefx\\src\\System.Security.Cryptography.Csp\\src\\Resources\\Strings.resx : NotSupported_UnseekableStream\ncorefx\\src\\System.Security.Cryptography.OpenSsl\\src\\Resources\\Strings.resx : Cryptography_UnsupportedEcKeyAlgorithm\ncorefx\\src\\System.Security.Cryptography.Pkcs\\src\\Resources\\Strings.resx : Cryptography_Cms_Envelope_Empty_Content\ncorefx\\src\\System.Security.Cryptography.Pkcs\\src\\Resources\\Strings.resx : WorkInProgress\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : Cryptography_InvalidOID\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : Cryptography_InvalidStoreHandle\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : Cryptography_X509_ExportFailed\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : Cryptography_X509_KeyMismatch\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : InvalidPublicKeyInX509\ncorefx\\src\\System.Security.Cryptography.X509Certificates\\src\\Resources\\Strings.resx : NotSupported_InvalidKeyImpl\ncorefx\\src\\System.Security.Principal.Windows\\src\\Resources\\Strings.resx : ExecutionEngine_MissingSecurityDescriptor\ncorefx\\src\\System.Security.Principal.Windows\\src\\Resources\\Strings.resx : InvalidOperation_AnonymousCannotImpersonate\ncorefx\\src\\System.Security.Principal.Windows\\src\\Resources\\Strings.resx : PlatformNotSupported_RequiresW2kSP3\ncorefx\\src\\System.ServiceProcess.ServiceController\\src\\Resources\\Strings.resx : DisplayName\ncorefx\\src\\System.ServiceProcess.ServiceController\\src\\Resources\\Strings.resx : NoDisplayName\ncorefx\\src\\System.ServiceProcess.ServiceController\\src\\Resources\\Strings.resx : ServiceName\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : ArrayInitializedStateNotEqual\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : ArrayLengthsNotEqual\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : CannotFindOldValue\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : CapacityMustBeGreaterThanOrEqualToCount\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : CapacityMustEqualCountOnMove\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : CollectionModifiedDuringEnumeration\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : InvalidEmptyOperation\ncorefx\\src\\System.Text.Encodings.Web\\src\\Resources\\Strings.resx : InvalidOperationOnDefaultArray\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : Argument_InvalidSourceForFilteredLink\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : event_DataflowBlockCompleted\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : event_DataflowBlockCreated\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : event_DataflowBlockLinking\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : event_DataflowBlockUnlinking\ncorefx\\src\\System.Threading.Tasks.Dataflow\\src\\Resources\\Strings.resx : event_TaskLaunchedForMessageHandling\ncorefx\\src\\System.Xml.ReaderWriter\\src\\Resources\\Strings.resx : Argument_InvalidCodePageConversionIndex\ncorefx\\src\\System.Xml.ReaderWriter\\src\\Resources\\Strings.resx : ArgumentOutOfRange_Range\ncorefx\\src\\System.Xml.ReaderWriter\\src\\Resources\\Strings.resx : ArgumentNull_Array\ncorefx\\src\\System.Xml.ReaderWriter\\src\\Resources\\Strings.resx : Argument_ConversionOverflow\ncorefx\\src\\System.Xml.ReaderWriter\\src\\Resources\\Strings.resx : Argument_EncodingConversionOverflowBytes\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xdom_NoRootEle\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xdom_Ele_Prefix\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Arg_ExpectingXmlTextReader\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Arg_IncompatibleParamType\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : XmlNonCLSCompliantException\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xml_UnsupportedClass\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xml_NullResolver\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xml_RelativeUriNotSupported\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xml_UntrustedCodeSettingResolver\ncorefx\\src\\System.Xml.XmlDocument\\src\\Resources\\Strings.resx : Xml_InvalidNameCharsDetail\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : Xml_InvalidNmToken\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxErrorDeserializingRequestBody\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxErrorDeserializingReplyBody\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxInvalidXmlAttributeInWrapped\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxInvalidXmlAttributeInBare\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxXmlArrayNotAllowedForMultiple\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxErrorSerializingBody\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxRpcMessageMustHaveASingleBody\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxBodyObjectTypeCannotBeInherited\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxBodyObjectTypeCannotBeInterface\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxKnownTypeNull\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : SFxFaultTypeAnonymous\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlInvalidEncodingNotEncoded1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlInvalidEncoding3\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlUnexpectedType\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlMultipleAttributeOverrides\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlIllegalSoapAttribute\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlInvalidArrayLength\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlUnsupportedSoapTypeKind\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_UnknownID_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IllegalAttrType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_XmlInvalidCast_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IllegalTextType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_TwoXmlAny_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_MissingEnum_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_UnknownEnum_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_UnknownAccessor_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_TwoMappings_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_TwoDefaultXmlAny\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IllegalChoiceDirection\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_ElementAsAttribute_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_AttributeAsElement_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_CircularRef_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IllegalSequenceType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_NoRepeatingAccessor_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_NoArrayEltAcc_2\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_WrongXAEAType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_WrongXAAAType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_XNDANotXSN_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_InvalidHref_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IllegalDataType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_DataTypeNotValid_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_UnknownPrefix_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_CollNoAdd_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_IEnumNoAdd_3\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_BadArrayType_1\ncorefx\\src\\System.Xml.XmlSerializer\\src\\Resources\\Strings.resx : XmlS_RepeatedIdentifier_1\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xdom_Empty_LocalName\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : XmlBadName\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xml_InvalidPIName\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : XmlNoNameAllowed\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xml_XmlPrefix\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xml_XmlnsPrefix\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xml_NamespaceDeclXmlXmlns\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Xml_InvalidBinHexValueOddCount\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : Sch_XsdDateTimeCompare\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : XmlConvert_TypeListBadMapping\ncorefx\\src\\System.Xml.XPath\\src\\Resources\\Strings.resx : XmlConvert_TypeListBadMapping2\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_BadUri\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_TypeBadMapping\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_TypeBadMapping2\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_TypeListBadMapping\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_TypeListBadMapping2\ncorefx\\src\\System.Xml.XPath.XmlDocument\\src\\Resources\\Strings.resx : XmlConvert_NotOneCharString\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18463/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "davidsh",
        "created_at": "2016-09-07T19:48:52Z",
        "body": "We might want to defer this work because those strings might be used as we consider adding API surface back to the libraries.\n"
      },
      {
        "user": "Clockwork-Muse",
        "created_at": "2016-09-08T18:04:41Z",
        "body": "> corefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : MoreThanOneElement\n\nCurrently, `Single()` returns `MoreThanOneMatch` (\"Sequence contains more than one matching element\"), even though it's called without a predicate and thus logically doesn't have a match.\n\n> corefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : NoMatch\n\nCurrently, `First(predicate)` et al will use `NoElements` (\"Sequence contains no elements\") even when the sequence has elements, but no matching ones.\n\n> corefx\\src\\System.Linq.Parallel\\src\\Resources\\Strings.resx : ParallelEnumerable_WithCancellation_TokenSourceDisposed\n\nShould have been removed as part of dotnet/corefx#2305, my bad.\n\nThe last one is pretty much guaranteed to never come back, given changes to cancellation tokens.  The other two require a bit of restructuring to make them appear where they're likely supposed to be.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-10-07T16:48:51Z",
        "body": "Closing for now.  We can revisit once we've add back all the APIs we plan to add back.\n"
      }
    ]
  },
  {
    "number": 18407,
    "title": "Reintroduce the use of reflection methods in DynamicObject",
    "created_at": "2016-09-01T22:17:07Z",
    "closed_at": "2020-07-06T22:19:01Z",
    "labels": [
      "enhancement",
      "area-System.Linq.Expressions",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18407",
    "body": "It's using `GetMember` with `OfType<MethodInfo>` to filter the members in `IsOverridden`. Also noticed that the `Bind*` methods create a closure that's only needed in a conditional branch that typically won't be taken, but that may not be a big deal because these should only be called once per dynamic call site.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18407/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "bartdesmet",
        "created_at": "2016-09-01T22:29:28Z",
        "body": "On an unrelated note, `GetConvertedArgs` in there does something funky. It uses a `ReadOnlyCollectionBuilder<T>` of a predetermined size only to return the result as a `T[]`. It should either return a `ReadOnlyCollection<T>` (so that `Expression` factories can just use the object as-is without having to make a copy, because `ROCB<T>` returns a `TrueReadOnlyCollection<T>`) or just allocate a `T[]` of the given size and return that.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2018-02-02T20:57:41Z",
        "body": "@bartdesmet dealt with this himself between dotnet/corefx#13963 and dotnet/corefx#13969 so this can be closed."
      },
      {
        "user": "cston",
        "created_at": "2020-07-06T22:19:00Z",
        "body": "> @bartdesmet dealt with this himself between dotnet/corefx#13963 and dotnet/corefx#13969 so this can be closed.\r\n\r\nThanks. Closing."
      }
    ]
  },
  {
    "number": 18394,
    "title": "SortedList indexer implementation of IDictionary throws ArgumentNullException in Desktop",
    "created_at": "2016-09-01T01:30:52Z",
    "closed_at": "2020-01-31T12:20:07Z",
    "labels": [
      "bug",
      "area-System.Collections",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18394",
    "body": "`SortedList<TKey,TValue>`, `IDictionary.this[object key]` throws ArgumentException when the key is not compatible with `TKey` \n\nOn Desktop ArgumentNullException is thrown. ArgumentNullException is incorrect, as key is not null, ArgumentException is more suited. This is a behavior change, filing issue to track on what we want to do with these differences.\n\ncc @terrajobst @weshaggard @stephentoub @danmosemsft \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18394/comments",
    "author": "Priya91",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2016-10-03T22:24:45Z",
        "body": "This doesn't really add enough value to really warrant the change from desktop so I we should just make .NET Core behave the same as .NET Framework. \n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-10-13T23:09:59Z",
        "body": ".NET Core Collections need to be cleaned up to throw ArgumentNullException in the specified cases in the issue description.\n"
      },
      {
        "user": "robosek",
        "created_at": "2016-10-18T07:18:04Z",
        "body": "So when key is incompatible .NET Core Collections should throw ArgumentNullException instead of ArgumentException just like it is on Desktop ?\n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-10-18T18:14:23Z",
        "body": "> So when key is incompatible .NET Core Collections should throw ArgumentNullException instead of ArgumentException just like it is on Desktop ?\n\nYes, I don't think it's all of the collections, only generic SortedList IDictionary indexer implementation.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-03T22:45:22Z",
        "body": "Fixed by above dotnet/corefx#12803\n"
      }
    ]
  },
  {
    "number": 18381,
    "title": "Remove redundant internal type definitions that are now publically exposed elsewhere",
    "created_at": "2016-08-31T17:04:52Z",
    "closed_at": "2020-01-31T12:19:20Z",
    "labels": [
      "enhancement",
      "area-System.Runtime",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18381",
    "body": "There are some internal type definitions under the Common directory, which are included into multiple projects. Those types are now publically exposed from System.Runtime or elsewhere. Remove the internal type definitions in favor of the public types.\n\nThis would involve retargeting any projects that were including the internal types to netstandard1.7, so that they can reference the public type.\n- SafeHandleMinusOneIsInvalid\n- SafeHandleZeroOrMinusOneIsInvalid\n- SafeFileHandle\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18381/comments",
    "author": "kouvel",
    "comments": [
      {
        "user": "joperezr",
        "created_at": "2017-01-27T18:56:37Z",
        "body": "@kouvel do we still need this for 2.0?"
      },
      {
        "user": "kouvel",
        "created_at": "2017-01-27T18:58:46Z",
        "body": "It's cleanup work relevant to the ns2.0 work but not anything required for ns2.0"
      },
      {
        "user": "joperezr",
        "created_at": "2017-01-30T21:44:11Z",
        "body": "ok, I'll remove the 2.0 milestone then. It is currently assigned to you, are you planning on working on it? If not, we should just add enough information in here and then flag it as up for grabs"
      },
      {
        "user": "kouvel",
        "created_at": "2017-01-30T21:46:02Z",
        "body": "I don't think I will get to this any time soon, unassigned and marked"
      },
      {
        "user": "karelz",
        "created_at": "2017-04-05T09:03:00Z",
        "body": "Should be easy to do - we may need to provide extra help with retargetting if needed."
      },
      {
        "user": "danmoseley",
        "created_at": "2017-04-08T05:27:48Z",
        "body": "13f626390abb1876f6c27517c91ee71547ca8667 should resolve this"
      }
    ]
  },
  {
    "number": 18252,
    "title": "Cannot reset DisplayName on ValidationContext",
    "created_at": "2016-08-22T15:02:03Z",
    "closed_at": "2020-01-31T12:12:18Z",
    "labels": [
      "bug",
      "area-System.ComponentModel.DataAnnotations",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18252",
    "body": "I do a lot of work with console applications and I like to use validation attributes and `IValidatableObject` to take advantage of framework-supplied validations rather than reinventing the wheel or using a third-party library.\n\nWhen looping through an object's properties to validate them, I can set the context's `MemberName` property appropriately each run through, but any non-successful validation results may return a nonsensical message since the validators use the `DisplayName` property to format the message, and the `DisplayName` property getter caches its return value the first time it is used. In addition to this, the `DisplayName` property cannot be reset as the setter will throw an `ArgumentNullException`.\n\nI could envision any of the following approaches to resolve this:\n- Allow setting `DisplayName` to `null` or `\"\"`\n- Set the `_displayName` field to `null` whenever `MemberName`/`_memberName` are changed\n- Offer a method like `Reset(bool clearItems = true)` to be a bit more explicit\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18252/comments",
    "author": "tuespetre",
    "comments": [
      {
        "user": "ajcvickers",
        "created_at": "2017-03-17T00:11:35Z",
        "body": "We can see the value of making this change, although it seems like using the data annotation in this way (mutating it for different members) is quite unusual. We are not going to work on this, but we would consider a PR for option 2--that is, fix the caching such that the display name is re-calulated if needed."
      },
      {
        "user": "tuespetre",
        "created_at": "2017-03-21T20:25:44Z",
        "body": "@ajcvickers it does seem weird. Even though it probably makes a 💩 of a difference for my use case, I was being allocation-conscious"
      },
      {
        "user": "ajcvickers",
        "created_at": "2017-03-29T17:43:14Z",
        "body": "@tuespetre Oops. Looks like we broke stuff with the PR for this. There are two issues:\r\n* Some MVC tests were relying on the old behavior. This is strange, but indicates how hard it is to make any kind of functional change without breaking somebody.\r\n* Both properties can be set explicitly. Setting DisplayName first and then setting MemberName will make _displayName null.\r\n\r\nI have asked @lajones to revert this change. However, on discussion with @divega I think we would take a change to allow DisplayName to be explicitly set to null. This should not break any existing code but would allow you to use the class in the way you want by explicitly setting the DisplayName to null after changing the MemberName."
      },
      {
        "user": "tuespetre",
        "created_at": "2017-03-29T21:09:49Z",
        "body": "@ajcvickers cool, thanks for the update and sorry for the bump in the road :bow:"
      },
      {
        "user": "divega",
        "created_at": "2017-03-31T22:53:42Z",
        "body": "@tuespetre are you planning to give this another try based on this:\r\n\r\n>  I think we would take a change to allow DisplayName to be explicitly set to null. \r\n\r\nOtherwise I am not sure it is worth keeping this issue open.\r\n"
      },
      {
        "user": "tuespetre",
        "created_at": "2017-03-31T23:56:38Z",
        "body": "@divega I will plan on that; it will be likely after next week when I am able to get around to it."
      },
      {
        "user": "ajcvickers",
        "created_at": "2019-02-22T23:51:25Z",
        "body": "Closing this as it's not something we plan to implement. We would consider a PR (100% non-breaking) but keep in mind that any new functionality will deviate the behavior from the .NET Framework."
      }
    ]
  },
  {
    "number": 18229,
    "title": "Console.Readline() doesn't respect disable console echo by 'stty -echo' on Ubuntu",
    "created_at": "2016-08-19T02:56:39Z",
    "closed_at": "2020-01-31T12:10:46Z",
    "labels": [
      "enhancement",
      "area-System.Console",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18229",
    "body": "I want my Console.Readline() doesn't print out what been read. (I am reading password from user input.)\n\nOn Windows, i can achieve by PInvoke SetConsoleMode() before calling Console.Readline() to disable console echo.\n\nI try to do same thing on Ubuntu PInvoke tcsetattr() before Console.Readline(), however it seems like Console.Readline() doesn't respect Ubuntu console echo disable at all.\n\nHere is what i verified On Ubuntu 16.\n1. Dotnet new a helloworld console app, add `String read = Console.Readline();` after console.writeline(...)\n2. In terminal type 'stty -echo' to disable console echo.\n3. type 'Dotnet restore', 'dotnet run', as you can see, since we disable console echo, the dotnet restore and dotnet run you typed will not shows up.\n4. When dotnet run start the helloworld app, it will print out HelloWorld! then wait for user input, however what you type now will shows on console.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18229/comments",
    "author": "TingluoHuang",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-03T20:35:37Z",
        "body": "We need someone debug it and find out which Linux settings we do not pay attention to.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-12T14:46:54Z",
        "body": "Console.ReadLine disables echo but then manually writes to stdout what was typed.  This is necessary to approximate the same behavior of Console.ReadLine as on Windows.  If you want to achieve what you're asking for, you'll need to effectively write your own ReadLine by using Console.ReadKey (which is basically how ReadLine is implemented on Unix)."
      }
    ]
  },
  {
    "number": 6520,
    "title": "Lazy initialization of TextInfo::m_IsAsciiCasingSameAsInvariant is not thread safe",
    "created_at": "2016-08-18T18:01:29Z",
    "closed_at": "2020-01-31T00:20:02Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6520",
    "body": "`m_IsAsciiCasingSameAsInvariant` is `Nullable<bool>`, but it is lazily initialized in lock-free fashion. This is not thread safe because of assignment of `Nullable<bool>` is not atomic.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6520/comments",
    "author": "jkotas",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-08-18T18:03:22Z",
        "body": "We may want to have generalize `enum TurkishCasing` to fix this, and also change its size to `byte` while we are on it.\n"
      },
      {
        "user": "joheredi",
        "created_at": "2016-08-31T22:12:06Z",
        "body": "Hi,\n\nI was looking at this issue and wanted to contribute. Based on your comments here and in dotnet/coreclr#6770 there may be two options.\n\n1) Create a more generic enum such as \n\n``` c#\nenum Tristate : byte\n{\n    NotInitialized,\n    True,\n    False,\n}\n```\n\n2) Or follow DateTimeFormatFlags more closely and have a TextInfoCasingFlags like this\n\n``` c#\n[Flag]\nenum TextInfoCasingFlags\n{\n   None = 0x00000000,\n   AsciiSameAsInvariant = 0x00000001,\n   TurkishCasing = 0x00000002,\n\n   NotInitialized = -1,\n}\n```\n\nI think I'm leaning towards 1) since it would be a smaller change and there are not many flags in this case.\n\n@jkotas what are your thoughts?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-08-31T23:33:41Z",
        "body": "@joheredi I like your Tristate proposal as well. Thank you!\n"
      }
    ]
  },
  {
    "number": 18048,
    "title": "Instrument ADO.NET/System.Data with EventCounters (replacement for PerformanceCounters)",
    "created_at": "2016-08-07T12:32:37Z",
    "closed_at": "2024-12-23T11:55:54Z",
    "labels": [
      "enhancement",
      "area-System.Data",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18048",
    "body": "In .NET Framework ADO.NET publishes performance counters; these have been removed in .NET Core because they're not cross-platform.\n\nThere are several conversations about bringing back some form of cross-platform performance counters, see dotnet/runtime#15735, dotnet/runtime#17015, probably based on EventCounter. This also needs to happen for ADO.NET.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18048/comments",
    "author": "roji",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-10T18:42:33Z",
        "body": "It should be fairly straightforward to add EventCounters in System.Data. If there's any doubt how to use EventCounters, please work with @vancem.\n"
      },
      {
        "user": "roji",
        "created_at": "2024-12-23T11:55:54Z",
        "body": "I'm going to go ahead and close this. The ecosystem has gone in the direction of instrumenting ADO.NET driver implementations, which is the better option here: specific drivers know best how and when to emit metrics information, and can go beyond the common denominator that the abstraction knows about, integrating additional database-specific information etc."
      }
    ]
  },
  {
    "number": 18045,
    "title": "[dev/cms_unix] Data corruption bug on round trip in EnvelopedCms for Unix",
    "created_at": "2016-08-05T22:12:52Z",
    "closed_at": "2020-01-31T12:00:40Z",
    "labels": [
      "bug",
      "area-System.Security",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18045",
    "body": "Currently test DecryptTests.Decrypt_EnvelopedWithinEnveloped fails in the round trip with a data corruption. When the message gets encrypted and decrypted, the output message is the same with the exception of one byte that gets inserted. \n\nBehaviors observed\n- The inserted byte is always the same and in the same position if the test is run several times. It seems that the introduced is a 0x0D in place of the 154th byte. (The inserted byte could also be 0xD0, but it's unlikely as it wouldn't be byte aligned, but given that the insertion looks like ...760A9AE94... to ...760D0A9AE94... it is hard to determine which of the two was inserted and as I haven't been able to reproduce the error with any other message there's no easy way of determining it). This hints it could be a padding error. \n- If trailing bytes are deleted from the message, the insertion is kept consistent, both the byte inserted and the offset.\n- If bytes are deleted from the start of the sequence, the inserted byte is consistent but it shifts back by the number of bytes deleted from the message. \n- It seems like it has nothing to do with block or length as a random message of the same length could be encrypted and decrypted correctly.\n- There are tests trying to encrypt longer and shorted messages so it continues to seem unlikely to be a length/alignment problem. \n\nStill have to try:\n- Changing certificate used\n- Changing cipher\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18045/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-21T23:20:02Z",
        "body": "Since we decided to make the Unix version of EnvelopedCms in managed code (to avoid needing to work around different idiosyncrasies for macOS than for Linux, among other things) and this bug doesn't manifest there, I'm going to close this (and the other cms_unix bugs).\r\n\r\nThis bug was definitely on my mind with the new managed implementation.  I'm glad we found it, and thanks for the work you put in for the project."
      }
    ]
  },
  {
    "number": 18005,
    "title": "Consider merging DisplayFormatAttribute into DisplayAttribute",
    "created_at": "2016-08-02T15:07:38Z",
    "closed_at": "2020-01-31T11:58:54Z",
    "labels": [
      "enhancement",
      "area-System.ComponentModel.DataAnnotations",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/18005",
    "body": "We use `DisplayFormatAttribute` heavily to provide annotations which can be consumed by several kind of controls like grids, text contents, etc.\n\nThe issue with this attribute is that it's not localizable.\n\nIn one of .NET's earlier versions the _legacy_ `DisplayName`, `Description`, and `Category` attributes have been merged into the new `DisplayAttribute`, so that they can be nicely localized. However, at that point for some reason, the `DisplayFormatAttribute` had been kept separately. \n\nIt would be important to merge it into `DisplayAttribute` too, because it has at least two fields which are important to localize: \n\n```\npublic string DataFormatString { get; set; }\npublic string NullDisplayText { get; set; }\n```\n\nThese should definitely be part of `DisplayAttribute` I think.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/18005/comments",
    "author": "cervengoc",
    "comments": [
      {
        "user": "ajcvickers",
        "created_at": "2017-03-16T23:53:02Z",
        "body": "@danroth27 @dougbu Do either of you know if it is by-design that DisplayAttribute does not have DataFormatString and NullDisplayText? It looks to me like DisplayAttribute is not designed to use these properties and therefore it would not be appropriate to add them, but I am hoping somebody else has some more context."
      },
      {
        "user": "dougbu",
        "created_at": "2017-03-17T04:57:08Z",
        "body": "In my opinion, `DataFormatString`, `NullDisplayText` and other `[DisplayFormat]` properties are better where they are. These properties are focused on the value of a field while `[Display]` properties are focused on what surrounds the field. (`Prompt` might cross the line but the rest are pretty clear.)\r\n\r\nThe alternative of adding `ResourceType` to `[DisplayFormat]` would be a significant breaking change. No code expects `DataFormatString` or `NullDisplayText` to ever change.\r\n\r\nA `[DisplayFormatNew]` attribute in the `System.ComponentModel.DataAnnotations` namespace might be viable if there is sufficient interest.\r\n\r\n#### History\r\n\r\nI don't have the full history. The timing indicates `[Category]`, `[Description]` and `[DisplayName]` have been around forever (.NET 1.1). `[DisplayFormat]` was added in .NET 3.5; may have been when the `System.ComponentModel.DataAnnotations` namespace was created. `[Display]` came in .NET 4.0 and, yes, it probably was to replace / modernize the .NET 1.1 attributes in the \"legacy\" `System.ComponentModel` namespace."
      },
      {
        "user": "danroth27",
        "created_at": "2017-03-17T05:15:57Z",
        "body": "@Eilon "
      },
      {
        "user": "cervengoc",
        "created_at": "2017-03-17T08:18:00Z",
        "body": "Thank you for your updates.\r\n\r\nI agree with @dougbu that `DisplayFormat` properties indeed belong to a different place than `Display` properties, so I can fully accept this logic. However the biggest problem was for me the inability to localize the `DisplayFormat` properties.\r\n\r\nAt my current level of insight I can't see the breaking change what localizability would introduce in `DisplayFormatAttribute`, but I definitely believe you, so no need for further explanation.\r\n\r\nIntroducing a new `DisplayFormatNewAttribute` doesn't seem to be nice in my opinion either, but if there's no other chance, it would be OK."
      },
      {
        "user": "divega",
        "created_at": "2017-04-19T21:52:20Z",
        "body": "> The alternative of adding ResourceType to [DisplayFormat] would be a significant breaking change. No code expects DataFormatString or NullDisplayText to ever change.\r\n\r\n@dougbu are you using the term \"breaking change\" in the sense that framework code that consumes data annotations would need to be updated in order to take advantage of new functionality or is there something specific that would actually crash or cause the display of garbled data (or something worse)?\r\n\r\nAlso, what frameworks do you think would need to make adjustments, MVC5? Core MVC? (note that at the moment we are considering this for .NET Core; porting back to .NET Framework is something that we would consider later) \r\n\r\nIf you are talking about frameworks not being able to take advantage of the feature, then what would be the difference between the work required to update such frameworks to recognize a new attribute and to adapt to a localizable version of `DisplayFormatAttribute`?\r\n"
      },
      {
        "user": "dougbu",
        "created_at": "2017-04-19T22:56:40Z",
        "body": "@divega I'm thinking of all kinds of shipped packages that load customer code and handle data annotations on the loaded classes. ASP.NET MVC Core is one example. But, I would not be surprised if the number of impacted frameworks was quite high.\r\n\r\nNote it isn't really about \"taking advantage\". The user's code and their `[DisplayFormat]` attributes using the new feature is **Just Fine:tm:** up until e.g. MVC core gets involved. Then, displayed formats will be constants despite changing locales."
      },
      {
        "user": "dougbu",
        "created_at": "2017-04-19T22:58:16Z",
        "body": "Ooops, hit return too soon.\r\n\r\nThe difference with a new attribute would be the lack of in-between state: .NET Core extensions either understand `[DisplayFormatMarkII]` or they don't."
      },
      {
        "user": "divega",
        "created_at": "2017-04-20T01:39:27Z",
        "body": "@dougbu thanks for clarifying. \r\n\r\nFWIW, a large portion of the issues we get it in DataAnnotations have this characteristic: the change to the DataAnnotation seems relatively easy, but we would need to go modify DataAnnotations-aware frameworks for the change to actually have any effect. \r\n\r\n> The difference with a new attribute would be the lack of in-between state: .NET Core extensions either understand [DisplayFormatMarkII] or they don't.\r\n\r\nMakes sense, however I don't necessarily see a definitive reason to prefer the new attribute approach there. E.g. until MVC has proper support users that try to either use a new atribuye or a new feature of an existing attribute will be disappointed all the same. Assuming support can be added, having a single attribute in the long term is better than having two. "
      },
      {
        "user": "dougbu",
        "created_at": "2017-04-22T22:49:58Z",
        "body": "@divega has convinced me that we don't need an additional attribute just to support a locale-sensitive `NullDisplayText`. Also sounds like everyone is in agreement merging `[Display]` and `[DisplayFormat]` isn't the way to go.\r\n\r\n`DataFormatString` is already as locale-sensitive as the chosen `IFormatProvider`. If you want to change the meaning of the `x` format specifier for an `int` (currently locale-insensitive hex) or add your own `q` format specifier for whatever type, implement `IFormatProvider`. Could even use resource lookups in that implementation.\r\n\r\nMy suggestion is to add a `NullDisplayResourceType` or `NullDisplayTextResourceType` property and `GetNullDisplayText()` method to `[DisplayFormat]`. The `NullDisplayText` property should have _exactly_ the same semantics it has today -- getter returns `null` or the most recently-set value. `GetNullDisplayText()` would return the `NullDisplayText` value unless `NullDisplayResourceType` was non-`null`. In that case, it would return the appropriate resource string. This mirrors how `[Display]` properties and methods work."
      },
      {
        "user": "lajones",
        "created_at": "2017-04-25T22:10:29Z",
        "body": "We would consider a PR for this if someone would like to provide one."
      },
      {
        "user": "Ermiar",
        "created_at": "2017-05-13T09:30:36Z",
        "body": "I would like to take a look to this issue if that is okay.\r\nJust to be sure that I'm heading in the right direction: there is no need to add the future `GetNullDisplayText()` method elsewhere in the framework to be used right now, is that correct ?\r\nAlso there are no tests currently for `[DisplayFormat]` so I will use my PR to add some tests (for existing and added code)."
      },
      {
        "user": "Ermiar",
        "created_at": "2017-05-16T09:13:55Z",
        "body": "@lajones I have code ready to address this issue. Can I submit my PR ?"
      },
      {
        "user": "lajones",
        "created_at": "2017-05-16T15:59:36Z",
        "body": "@Ermiar Feel free to submit. @dougbu - you should probably review the PR."
      },
      {
        "user": "dougbu",
        "created_at": "2017-05-16T16:17:50Z",
        "body": "> you should probably review the PR\r\n\r\n🆗 "
      },
      {
        "user": "Ermiar",
        "created_at": "2017-05-16T18:13:10Z",
        "body": "@lajones @dougbu Thanks for your feedback. PR created!"
      },
      {
        "user": "ajcvickers",
        "created_at": "2017-11-16T22:14:23Z",
        "body": "Closing this as the change discussed above has been merged from a PR."
      }
    ]
  },
  {
    "number": 17999,
    "title": "How to skip build Windows_NT OS Group while building inside Linux.",
    "created_at": "2016-08-02T02:09:40Z",
    "closed_at": "2020-01-31T11:58:36Z",
    "labels": [
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17999",
    "body": "It seems that Windows_NT binaries are built even with `-BuildAllOSGroups:False -FilterToOSGroup:Linux`:\n\n```\n$ ./build-managed.sh -binaries -SkipTests -OSGroup:Linux -TargetOS:Linux -BuildAllOSGroups:False -FilterToOSGroup:Linux\n...\n$ ls bin/\nAnyOS.AnyCPU.Debug/  Linux.AnyCPU.Debug/  obj/  ref/  Unix.AnyCPU.Debug/  Windows_NT.AnyCPU.Debug/\n```\n\nIs there any other option to skip Windows_NT binaries?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17999/comments",
    "author": "parjong",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2016-08-02T04:22:06Z",
        "body": "Right now we always build all flavors of the product binaries because we need all of them in order to create the nuget packages.  So there isn't any way to filter the build in that way. \n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-12-09T00:17:34Z",
        "body": "As @weshaggard mentioned, there's not a good way to do this right now, due to the way the build system is structured. We are working on an effort to overhaul large parts of the build system, and \"skipping unnecessary builds\" is a prime objective of the new system."
      }
    ]
  },
  {
    "number": 17965,
    "title": "Missing test that tests decryption failure with a certificate with false SKID",
    "created_at": "2016-07-29T23:44:17Z",
    "closed_at": "2020-01-31T11:56:46Z",
    "labels": [
      "area-System.Security",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17965",
    "body": "Missing a test that encrypts a message and then tries to decrypt it using using a certificate that has the same subject key identifier as the recipient but represents a different key pair. This should throw a CryptographicException as the message should be unable to decrypt.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17965/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-16T19:18:35Z",
        "body": "Should be fairly simple (1h) work item. Next step: Generate appropriate certificate in OpenSSL and create the test.\n"
      }
    ]
  },
  {
    "number": 17956,
    "title": "Self-discovery documentation in Build -?",
    "created_at": "2016-07-29T17:30:53Z",
    "closed_at": "2020-01-31T11:56:18Z",
    "labels": [
      "documentation",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17956",
    "body": "Add documentation to the build command when using the argument `-?` on how to interact with the repo and not only providing information about the command per se.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17956/comments",
    "author": "maririos",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-11-14T20:05:41Z",
        "body": "Hey @maririos , are you still looking into this, or is it better tracked elsewhere, etc? I think there's other related issues in here and in buildtools.\n"
      },
      {
        "user": "maririos",
        "created_at": "2016-11-14T21:10:44Z",
        "body": "Currently there is effort working on Run.exe but I'm not sure it includes this issue.\n@MattGal could answer this more accurately\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-12-09T00:16:44Z",
        "body": "I'm marking this up for grabs, although I'm not sure we should write much in the message here, other than to look in the Documentation folder for more info."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-12-12T01:32:24Z",
        "body": "This is not really on any radar. We are more likely to completely remove the run tool then to flush out this so closing. "
      }
    ]
  },
  {
    "number": 17955,
    "title": "Clean properties and documentation in config.json file",
    "created_at": "2016-07-29T17:27:06Z",
    "closed_at": "2020-01-31T11:56:15Z",
    "labels": [
      "documentation",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17955",
    "body": "- Go through all the options in our config.json file and get them properly documented. For example the difference between `OSGroup`, `TargetOS` and `FilterToOsGroup`.\n- Update documentation to use the proper properties according to the desire behavior\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17955/comments",
    "author": "maririos",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-11-14T20:04:56Z",
        "body": "@maririos @MattGal Are either of you working on this, or is there anything more to do here?\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-29T07:01:41Z",
        "body": "@maririos @MattGal ping?"
      },
      {
        "user": "MattGal",
        "created_at": "2017-01-30T18:32:24Z",
        "body": "I'm not currently working on this.   We're looking at reimagining what the contract looks like, so I think it'd be OK to close this issue for now;  there are many issues tracking improvement to the dev workflow."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-30T18:37:19Z",
        "body": "Fine with me. @mellinoe feel free to reopen if you disagree."
      }
    ]
  },
  {
    "number": 17953,
    "title": "[dev/cms_unix] EnvelopedCms doesn't support adding originator certificates in the encryption process",
    "created_at": "2016-07-29T01:07:15Z",
    "closed_at": "2020-01-31T11:56:09Z",
    "labels": [
      "enhancement",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17953",
    "body": "EnvelopedCms currently throws a platform not supported exception when trying to add originator certificates. Currently OpenSSL doesn't support adding certificates to a newly instantiated CMS_ContentInfo structure, only to one that's read from raw data. It's unviable to do it this way as we'd need a byte blob for each possible symmetric cipher or a parser that would do this.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17953/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-21T23:23:43Z",
        "body": "Solved by the managed implementation of EnvelopedCms."
      }
    ]
  },
  {
    "number": 17948,
    "title": "EnvelopedCms missing KeyAgreement tests",
    "created_at": "2016-07-28T21:45:15Z",
    "closed_at": "2020-01-31T11:55:56Z",
    "labels": [
      "area-System.Security",
      "blocked",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17948",
    "body": "The test suite is missing tests that perform decryption on a message that uses KeyAgreement certificates for encryption. Currently there's only one test for Encryption using a Diffie-Hellman certificate and the only check that's performed is if after decoding the RecipientInfo is as expected, but there's no check on the contents of the encrypted message currently. \n\nRound trip tests and static tests should be added to the suite to ensure not only the metadata is correct but also the contents of the message.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17948/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "krwq",
        "created_at": "2018-05-04T17:46:11Z",
        "body": "This is currently blocked on the fact that we don't have a good way to generate pfx containing key which will be understood everywhere. My current pfx generated by openssl is only understood on Windows 10 full framework."
      },
      {
        "user": "krwq",
        "created_at": "2018-05-04T17:48:28Z",
        "body": "Here is the example generated pfx/cert which is problematic (pfx password \"1111\"):\r\n\r\n(cert is: RSA root CA, DH pub/pri key signed by RSA)\r\n\r\n```csharp\r\n            public static byte[] s_DHKeyAgree2Cer = Convert.FromBase64String(\r\n                \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlvQ0NRQ1JpZkIycmhQNXNEQU5C\" +\r\n                \"Z2txaGtpRzl3MEJBUXNGQURCak1Rc3dDUVlEVlFRR0V3SlYKVXpFVE1CRUdBMVVFQ0F3S1YyRnph\" +\r\n                \"R2x1WjNSdmJqRVFNQTRHQTFVRUJ3d0hVbVZrYlc5dVpERVNNQkFHQTFVRQpDZ3dKVFdsamNtOXpi\" +\r\n                \"MlowTVJrd0Z3WURWUVFEREJCamIzSmxabmd0ZEdWemRDMWpaWEowTUI0WERURTRNRFV3Ck16SXdN\" +\r\n                \"ekEwTjFvWERURTRNRFl3TWpJd016QTBOMW93WmpFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJB\" +\r\n                \"Z00KQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjTUIxSmxaRzF2Ym1ReEVqQVFCZ05WQkFvTUNV\" +\r\n                \"MXBZM0p2YzI5bQpkREVjTUJvR0ExVUVBd3dUWTI5eVpXWjRMWFJsYzNRdFpHZ3RZMlZ5ZERDQ0FS\" +\r\n                \"OHdnWlVHQ1NxR1NJYjNEUUVECkFUQ0Jod0tCZ1FEWXB4elZTNTFSVXNJOUtEbWtqZklnNG5kdm1t\" +\r\n                \"Zlk4cmhoUTFRY0xSdVhwblFmS0ZSZCtvMWEKVk1EelBkYjB2WDdMcmdNaktPanhZN1ZIazVhRWhZ\" +\r\n                \"KzFweUp1MWNkMmR3VWM1UHdzOE1zMkM1WFpNL2FBc2JsRAovN3dpL1FFWjJOV1Jpem9PVTlGY0V1\" +\r\n                \"VHVmcTk0R05QQXpHQkU3ZUR6T3laT3N6YjIyWHEyQ3dJQkFnT0JoQUFDCmdZQWVsdGVqa1ZzdWla\" +\r\n                \"RWZISkxQOGRHbGVxNmxoQ3pFelg3SXdzODRzdG1MYzBseExLTGF6YlFUTlZaajlYbTIKZ0xlUDZO\" +\r\n                \"MHQ5MmFTN0wxREI0aEVLSjFqb0pNSGVzMTdnU01zQUtxZFZTNGNiK215cW1oTDlucEkyNXpnYjJ3\" +\r\n                \"YQo1SS9lVVJQaExXQkd3TGk1eERPMkZjMC9LOFN4a3RaTTZzdHZsSURSdktVY1d6QU5CZ2txaGtp\" +\r\n                \"Rzl3MEJBUXNGCkFBT0NBUUVBU3RaTzRiUnAxbmJmeC96aFV2WnFqTVBCZHVta1FHcWhsbTlMa1NG\" +\r\n                \"WnNXd09VdWVKT1FtbXZ5WmoKNzZmRTN4dmZDNCt4VWhsRWxaUk9NdENwVHhxR0ZIZVBKUG12YklB\" +\r\n                \"dXZvUjhmOXhMc09KQ2xMYUVUeVZpbFZ6egpFTVZmVEZ3ZiszNjBWSWxNbEQ2RmdyTW00SU5jSUVi\" +\r\n                \"WUF3V1RVQTNkb1Yya043aWFQZmEvL0JMT08zZ3FpSGJSCjVpT0psREd0cTVleEl6U3VpYkF1T3VC\" +\r\n                \"ZkpEUEtLL3JqVm5JRDR0Rng2ZkFzY3BmUHN6Qi9hMG1BNEw5dlFJek4KMUxQdGJYWFN1Lzd4Tm9W\" +\r\n                \"ZENjYjYwdlJqeFdVNU12N1FMaGh1T0Z6N2JNaUovT1d1ekQ2R09iVVFQbjRzbm01YgoxRmRNUTB6\" +\r\n                \"WTVWTDhNbUdnVnJIdEIrSTllSjdNWVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\");\r\n\r\n            public static byte[] s_DHKeyAgree2Pfx = Convert.FromBase64String(\r\n                \"MIIF4QIBAzCCBacGCSqGSIb3DQEHAaCCBZgEggWUMIIFkDCCA+cGCSqGSIb3DQEHBqCCA9gwggPU\" +\r\n                \"AgEAMIIDzQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIq1b7iAY4TWkCAggAgIIDoHyfFhYi\" +\r\n                \"p5AZEHH9GfRMyBoZoN+UdoImyUkd9x8PDWSnm4830evYSrArEm9iuHfgLsCggjviwZwPOyIC9ZGy\" +\r\n                \"WIKNaymE8uUwrYoADPu/6tVxBKPh12tbed64YRGap+kCQ427g2cBGYU9mB+KYmXjkHQsR8oJs2TS\" +\r\n                \"LcPm7kmaA8RYkpt1mox853X46tsEFWfU4FvsFz53DmaovUdCV0mkqyXo6s824Ge7O0aTIv/PM/S6\" +\r\n                \"ZfFXYm3P2H8PqwH7QYWqrX5kZVZ5YW18eHeTxh3+BsyMSKpgEhvZDmCeG3W14fNRF/zHgfccgeWE\" +\r\n                \"ZFWPMuEhYN9qD3QTRnt00UgdhFT9y76xNFI1ANzVpTz7OPJR+zQYIkPDE0u0vQvlakwWUKGHp8Vv\" +\r\n                \"8m/ehEsr4f74d4S+Y5Vz/uBhOJ/+RX6wnKDjDqAUIcJeKbuFnIoJ0gOEZp3PTSsH7xZvM2ySVTXH\" +\r\n                \"R/eZCwugSIfeDR0HoTpvNNB4EMsxDRqn0E9vmlS2OFMfOijI5VreS/mH7b1hzMTzSy4OONu/VR3g\" +\r\n                \"ZjbKOqd+ep6KekTNjVWfGjmd+0Lt3VNYzCdbVz/W2PJP4a6uUNSC+f00gogajH4qNDGIXIwH3MP7\" +\r\n                \"s+pZRK6oePbMmcoAnye4oC4s1MClShpLSsZr+1z+K1WeEBPMou6+j7lOyLD/VTS/LvUmPwJgh0Nu\" +\r\n                \"YrtN8i583Z5RcnWFJXwFQHdLic34IRjcbgKOlROnIUeSEpYxPp8LAJXTRvHbbseOHwhMD1HKYWQb\" +\r\n                \"FltSrZlkORZdavFCZDlNhIOIMwrNfey8HP+u5hq/kCVAROUbeiTgcbMwSIfVZ2Y5o4nHkEHJI2TV\" +\r\n                \"+nToclGDBIExwVP4H9tylAnkzYeWdqU7+kU1okSSdv5JhETsQGL5o8xjzHM8qHuc+qfItERZtjgf\" +\r\n                \"jxrzkAKA8BvtnUCm/fwxmeO4+NK2uhAQdxQUJj86slO6zSj4Hf3Xz1uz+lSqjUpwEYJyY55r6+YB\" +\r\n                \"y45gmgM/tdCtIH0pk0BxZRWKpbZzx0PNzJf3zncXlYxfrWmy60WNSEIb+MhbZwiK1aMzj9BVd7nj\" +\r\n                \"ROzPSd7D/iuita1MzYWW9zDA09PJ+vO7IzFTBFi7gFZD/P6JvaEbdC6OexLPmztLaOiZ1Yj6rhKK\" +\r\n                \"ckl1wUmQSqMkzBAlR9q1tCZvrrXeIqLIrWjEfsVzec5dTRX05YZjYYYU/Maxw/nxBLEMEX45zdtt\" +\r\n                \"IghK4xhjrV2JkZswggGhBgkqhkiG9w0BBwGgggGSBIIBjjCCAYowggGGBgsqhkiG9w0BDAoBAqCC\" +\r\n                \"AU4wggFKMBwGCiqGSIb3DQEMAQMwDgQIYc4ixIe1E00CAggABIIBKNTi1HIV82YEHwVt1JS7jbfz\" +\r\n                \"CDXCK+wot87kpNp9+6xe7Xe0VLvkfAA2Cezi+CYVTstvfzNcnuLO49na908QYFXXuE/ttyzVtoID\" +\r\n                \"xLp5IKPf/6WFwORVdAOMlIhOU+v0/3pQJ+A+zM0yYspBGpIFHNAkOPO2/6Zm0bkLUmodMdClaLnb\" +\r\n                \"5G+7S9kmZ3FAWGIlqUWvYoshB61D051YcGn/eKxpd1gLZ/zA9MNY5ElLXEpD8QJGJdb+e4B5NXXE\" +\r\n                \"Y09rFEBKZu/1DalsKRnfBd9XvS3ayI+tJ81/oYhOuTtsT7PNvoN0QEBnJogh3QnheKqz6bH17Gse\" +\r\n                \"B13NlxvY10zFRNzZasl5VBSZIpp/aycymxCLJiwRvjyLMIqiFbbFO3Z5ajkqgzAPhQHdMSUwIwYJ\" +\r\n                \"KoZIhvcNAQkVMRYEFMAOPaSA3RawTeHyl1IYxF1QA0CsMDEwITAJBgUrDgMCGgUABBQvyaRSVQZr\" +\r\n                \"RanzmFBQNraNAvwBMgQI0wGXFgpsth4CAggA\");\r\n```"
      },
      {
        "user": "krwq",
        "created_at": "2018-05-14T22:42:36Z",
        "body": "Closing this as we currently do not have a good way to load DH pfx (won't work on Windows)"
      }
    ]
  },
  {
    "number": 17947,
    "title": "[dev/cms_unix] Missing static tests in EnvelopedCms generated in a Unix system",
    "created_at": "2016-07-28T21:42:28Z",
    "closed_at": "2020-01-31T11:55:54Z",
    "labels": [
      "area-System.Security",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17947",
    "body": "Now that there is an implementation of EnvelopedCms for Unix platforms, the test suite is missing tests where a message is encrypted in a Unix platform and stored statically in a decryption test to make sure that cross platform decryption is possible (static Windows tests are already present in the suite).\n\nTests should include using the following symmetric algorithms:\n- AES-128, AES-192, AES-256\n- RC2 and RC4 (the only key length supported currently is 128 bits)\n- DES\n- 3DES\n\nAnd should be encrypted using KeyTransfer certificates. There should be a test using each IssuerAndSerialNumer and SubjectKeyIdentifier as the identifiers for the recipient.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17947/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-28T23:43:38Z",
        "body": "Some new fixed values tests were added from the managed implementation when it was being written."
      }
    ]
  },
  {
    "number": 17924,
    "title": "[dev/cms_unix] Wrong key length when decoding EnvelopedCms in Linux encrypted with RC4 ",
    "created_at": "2016-07-25T23:47:11Z",
    "closed_at": "2020-01-31T11:54:53Z",
    "labels": [
      "bug",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17924",
    "body": "When decoding an DER blob that represents envelopedData using EnvelopedCms.Decrypt incorrectly reports the encryption algorithm's key length to be 0 always instead of the one used to encrypt the message. \n\nThis currently happens as there is a bug when setting the asn1 parameters in the call to OpenSSL to retrieve the key length. \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17924/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "hoyosjs",
        "created_at": "2016-07-26T23:25:32Z",
        "body": "Looking further it looks like the same thing happens when there's a combination of RC4 over a CAPI certificate, where OpenSSL can't set the algorithm's parameters with the following error: \"CMS routines:cms_EncryptedContent_init_bio:cipher parameter initialisation error\"\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2018-02-28T23:44:37Z",
        "body": "This test was brought in to master via dotnet/corefx#27490, and is passing.  So we seem to be good here."
      }
    ]
  },
  {
    "number": 17923,
    "title": "[dev/cms_unix] Encryption with variable keylength ciphers in EnvelopedCms for Linux not supported",
    "created_at": "2016-07-25T23:26:14Z",
    "closed_at": "2020-01-31T11:54:50Z",
    "labels": [
      "enhancement",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17923",
    "body": "Ciphers that support variable keylengths with the same OID currently only support encrypting with the default keylength as OpenSSL only allows to change these in the CTX, but the APIs for CMS_ContentInfo of type EnvelopedData for encryption only take the EVP_CIPHER pointer. There's a EVP_CIPHER_CTX_getcipher macro wich returns a pointer to its cipher, but that cipher still retains the default keylength regardless of the changes made to the CTX.\n\nAs of now the documented cases are RC2 and RC4 which when given a key length other than 0 or the default one will throw a PlatformNotSupportedException.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17923/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-28T23:46:56Z",
        "body": "This is working with the new managed implementation."
      }
    ]
  },
  {
    "number": 17913,
    "title": "[dev/cms_unix] EnvelopedCms.Decrypt and EnvelopedCms.Encrypt don't support use of KeyAgreement certificates on Unix",
    "created_at": "2016-07-21T22:40:12Z",
    "closed_at": "2020-01-31T11:54:24Z",
    "labels": [
      "enhancement",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17913",
    "body": "Due to lack of support of OpenSSL to use certificates using DH or ECDH for encryption and decryption of enveloped messages, the current implementation doesn't support decrypting for recipients holding only KeyAgreement certificates or encrypting using one. As of now performing any of these operations throws a PlatformNotSupported exception.\n\nThe only way to work around this seems to be to manually parse the message to extract the encrypted content encryption key and use the appropriate API for the corresponding algorithm (DH or ECDH) to decrypt it and then use the key to decrypt the content blob.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17913/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2018-02-28T23:42:13Z",
        "body": "While this is still true for managed approach, the managed approach won't support key agreement via EnvelopedCms unless we add support for (IFC) Diffie-Hellman to .NET.\r\n\r\nClosing this now, and we can always revisit it if there's enough demand."
      }
    ]
  },
  {
    "number": 17733,
    "title": "mscorlib reference assembly shouldn't need to expose internal types with FriendAccessAllowed Attribute.",
    "created_at": "2016-06-29T16:17:10Z",
    "closed_at": "2020-01-31T11:45:50Z",
    "labels": [
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17733",
    "body": "per @jkotas:\n\n> The desired state should be:\n> - System.Private.CoreLib exposes two kinds of types/methods: types/methods for public consumption, and types/methods for internal consumption by other framework libraries.\n> - mscorlib facade has forwarders for the types for public consumption only.\n\nToday framework libraries still reference mscorlib, so our mscorlib reference assembly still needs to add type forwards for internal types to S.P.Corelib. We should figure out a plan to remove this without breaking backward compat with developing a framework library that we need to run in UWP against an older version of coreclr which doesn't contain S.P.CoreLib\n\nRelated: dotnet/corefx#9712 \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17733/comments",
    "author": "joperezr",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-11-11T20:07:33Z",
        "body": "@joperezr It doesn't look like we have any `FriendAccessAllowed` attributes in mscorlib here. Is that correct?\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-14T18:42:47Z",
        "body": "@joperezr did it already happen by a chance?\n"
      },
      {
        "user": "joperezr",
        "created_at": "2016-11-15T22:20:46Z",
        "body": "The thing is that now the libraries in corefx compile against S.P.C.dll so I believe that this is not required anymore. I'll close it for now.\n"
      }
    ]
  },
  {
    "number": 6206,
    "title": "Cannot execute binary when corerun dir has dll that has a entry point.",
    "created_at": "2016-06-24T02:08:41Z",
    "closed_at": "2021-03-14T00:42:06Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6206",
    "body": "Environment : arm32/linux\nAssume that B.exe outputs \"B\" and A.exe outputs \"A\".\nI simplify the log : \n\n```\nsh> pwd\n~/bin/\nsh> ls\ncorerun.exe \n.....\nA.exe\nBdir/\nsh > ls Bdir\nB.exe\nsh > ./corerun Bdir/B.exe\n\"A\"\n```\n\nIt seems that corerun loads all the dll and exe in current directory and execute A.exe since it has a entry point. \nIs it the expected behavior or a bug ?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6206/comments",
    "author": "chunseoklee",
    "comments": [
      {
        "user": "myungjoo",
        "created_at": "2016-06-24T07:08:27Z",
        "body": "This is dotnet/runtime#6083 \n\nThe name of class with an entry point of A.exe is the same with that of B.exe, isn'it?\n"
      },
      {
        "user": "chunseoklee",
        "created_at": "2016-06-24T07:43:09Z",
        "body": "@myungjoo On my arm/linux, the names of classes with entrypoint are not the same(My/Cmain). Still output \"A\" as in example above. \n"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2021-03-14T00:42:06Z",
        "body": "@chunseoklee The implementation of `corerun` has evolved a great deal since 2016 and is now using the same API in all scenarios and I don't see it locally. Please reopen if this is still observed."
      }
    ]
  },
  {
    "number": 17643,
    "title": "Enable (optionally) statically linking native dependencies on Linux",
    "created_at": "2016-06-17T14:03:09Z",
    "closed_at": "2020-01-31T11:41:27Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17643",
    "body": "Related: dotnet/coreclr#5853\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17643/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2017-12-12T01:28:07Z",
        "body": "@janvorli @stephentoub is this something we think we still want?"
      },
      {
        "user": "janvorli",
        "created_at": "2017-12-13T14:16:55Z",
        "body": "I don't think there is anything we can statically link on corefx. There is:\r\n* libssl - bad idea to link statically due to maintenance (updates for security fixes in libssl), different location of the certs on different distros, a lot of other second level dependencies that would need to be linked statically too so that the static linking would make sense at all.\r\n* libcurl - similar issue to libssl w.r.t. location of SSL certs. Could be possibly solved by custom build of libcurl and configuring the locations of SSL certs at runtime from the current libssl or by platform detection. It seems we would not want to do that.\r\n* gss - this library has a many dependencies, so linking it statically would not make much sense\r\n* zlib - the libbsl and libcurl depend on it too, so making it static doesn't make sense, the openssl package installs it as a dependency.\r\n* lzma - the existing static version cannot be linked into our shared library since it was not built with position independent code option. So we would need a custom build. But lzma was present by default on minimum installations of all major Linux distros I've tried. (tested on vanilla docker images of CentOS, Fedora, RHEL, OpenSuse, Debian, ArchLinux, Slaxware, Gentoo, OpenMandriva, Ubuntu). So static linking would not provide benefit here."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-12-13T16:40:39Z",
        "body": "Thanks @janvorli so it sounds like we should just close this issue. Feel free to reactive if there is something else missing. "
      }
    ]
  },
  {
    "number": 6083,
    "title": "CoreRun tries to execute .exe from incorrect path.",
    "created_at": "2016-06-09T07:43:53Z",
    "closed_at": "2020-01-30T23:58:05Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/6083",
    "body": "This was tested and observed at both ARM/Linux and x64/Linux.\n\nReproduction\n- Install coreclr & corefx at directory `/A/`\n- Install `a.exe` at directory `/B/`\n- Create another `a.exe` (different from `/B/a.exe`) at `/A/` (for a more dramatic failure, create a null file, `/A/a.exe`)\n- At `/A/`, run `./corerun /B/a.exe`\n\nExpected\n- The file `/B/a.exe` is executed.\n\nResult\n- The file `/A/a.exe` is executed.\n\nNote that if `/A/a.exe` does not exist, it properly executed `B/a.exe`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/6083/comments",
    "author": "myungjoo",
    "comments": [
      {
        "user": "mkborg",
        "created_at": "2016-06-09T08:46:02Z",
        "body": "I had similar issue.\n\nI was playing with 'HelloWord' example trying to create some test but it was not working. Finally I took original 'HelloWord' example and just changed the message but on launch it printed **original** unmodified message. I even tried to change file name but it didn't help.\n\nIt printed new message only when I changed name of the 'class' in my modified 'HelloWord' example.\n\nIt helped me to find that I had 'HelloWord' application binary in directory with 'corerun'.\n\nI suppose it worked in the following way: when I launched `corerun_dir/corerun my_dir/my_app.exe`, 'corerun' extracted name of the 'class' from my binary and started to load 'class' with than name but instead of using explicit path (my_dir/my_app.exe) specified in command line 'corerun' started to search for file with necessary 'class' name and found alternative file with different file name but with the same 'class' name  in its own directory (corerun_dir).\n"
      },
      {
        "user": "myungjoo",
        "created_at": "2016-06-09T08:50:54Z",
        "body": "`HRESULT AssemblyBinder::BindByTpaList(...)`uses `simpleName` that extracts the filename from the full path, which later makes the `fileName` at line 1362 of the same function, to refer `/A/a.exe`, not `/B/a.exe`.  (`pTpaEntry->m_wszILFileName` is incorrectly initialized)\n\nThis is a logic error in ``HRESULT AssemblyBinder::BindByTpaList`.\n\nAnother really fishy scheme is at `AssemblyBinder::BindWhereRef()` (`src/binder/assemblybinder.cpp`):\n\nIt first gets \"assemblyName\" from the \"assemblyPath\" (`/B/a.exe`), which results in `a` as the assemblyName. at Line 1006-1021.\n\nThen, it retrieves the assembly based on the assemblyName, `a`, which results in searching for `/A/a.exe` before trying the original full path `/B/a.exe`.\n\nThe code around here is juggling around the path info too excessively while we do not support anything like GAC yet. :(\n"
      },
      {
        "user": "myungjoo",
        "created_at": "2016-06-10T06:15:47Z",
        "body": "A fix is being implemented by enforcing CLRPrivBinderCoreCLR::Bind()'s call to AssemblyBinder::BindAssembly() explicitly state that it MUST find the assembly in the given path.\n\nThis could be done by nullptr test of szCodeBase argument of AssemblyBinder::BindAssembly()\n\n, which is supposed to do so by calling BindByName if it's null and BindWhereRef if it's not null.\n\nHowever, in the current coreclr, it goes to BindByTpaList regardless of what's being intended.\n"
      },
      {
        "user": "myungjoo",
        "created_at": "2016-06-23T11:20:40Z",
        "body": "~~It look like the current commit of CoreCLR has this issue fixed.\nI'll verify if it's completely gone and close this afterwards.~~\n\nNegative.\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2016-10-20T18:20:44Z",
        "body": "The linked PR had some issues and wasn't completed, so this issu remains up for grabs.\n"
      }
    ]
  },
  {
    "number": 17555,
    "title": "[dev/cms_unix] EnvelopedCms Decode different behavior between Framework and Core",
    "created_at": "2016-06-08T17:01:49Z",
    "closed_at": "2020-01-31T11:37:31Z",
    "labels": [
      "bug",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17555",
    "body": "Decode on Framework returns a CryptographicAttributeObjectCollection for unprotected attributes that has a CryptographicAttributeObject for every Oid listed in the encoding, even if it holds no attributes (if it's given an empty set for that oid). However Core won't create an object for the oid if the set is empty. Thus EnvelopedCms.UnprotectedAttributes.Count will return different things on framework and core.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17555/comments",
    "author": "hoyosjs",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2016-06-16T17:53:00Z",
        "body": "This issue has been unassigned since it was opened - were you planning on fixing it yourself or were you planning on assigning it to me to fix?\n"
      },
      {
        "user": "hoyosjs",
        "created_at": "2016-07-21T22:27:32Z",
        "body": "This has been fixed on dev/cms_unix\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-10-03T16:36:17Z",
        "body": "Since this affects the existing Windows implementation we may want to cherry pick this into master for 1.2.0\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-16T19:03:41Z",
        "body": "We need to cherry pick the commit (likely dotnet/corefx#9659). Should be easy and is needed for 1.2.\n"
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-04-14T15:36:15Z",
        "body": "@bartonjs @karelz If still an issue, I could do it later today. \r\n\r\nCherry picking seems not possible because the changed files of the linked commit aren't existing in master yet. Merge the whole branch or picking multiple commits?"
      },
      {
        "user": "karelz",
        "created_at": "2017-04-14T15:49:04Z",
        "body": "I think it is still needed (or rather I don't see a reason why it would be suddenly not needed). Assigned to you. Thanks!"
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-04-15T11:26:04Z",
        "body": "@bartonjs \r\n> Cherry picking seems not possible because the changed files of the linked commit aren't existing in master yet. Merge the whole branch or picking multiple commits?"
      },
      {
        "user": "bartonjs",
        "created_at": "2017-04-15T13:56:01Z",
        "body": "@ViktorHofer The test and the Windows change from that PR.  The Unix change doesn't make sense since we don't have Unix CMS in master.  And we absolutely can't merge the branch (it won't build, it won't work on macOS, and it has a data corruption bug)"
      }
    ]
  },
  {
    "number": 17453,
    "title": "Optimize BigInteger \"DataTip\" speed",
    "created_at": "2016-05-30T11:15:40Z",
    "closed_at": "2023-01-08T03:46:58Z",
    "labels": [
      "enhancement",
      "area-System.Numerics",
      "tenet-performance",
      "help wanted",
      "Cost:S"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17453",
    "body": "For very big BigIntegers the Visual Studio DataTip (the thing that appears when hovering over a variable with the mouse) takes a long time to load. I assume that's because the ToString processing takes too long.\n\nThe result is not visible anyway because it is aborted by a timeout as it seems.\n\nCan the DataTip be made faster for super long BigIntegers? Maybe it could just show the first and last 20 digits instead of all digits. It's still possible to see all digits by calling ToString using the debugger.\n\nMaybe the output could be `$\"{firstDigits} ... {lastDigits} ({totalDigits} digits in total, {byteCount} bytes}\"`. That would be useful to both see the data and to get a feel for memory consumption.\n\nThe ToString output would stay unchanged.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17453/comments",
    "author": "GSPP",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-05-31T17:57:38Z",
        "body": "An easy solution would be to add a `[DebuggerDisplayAttribute]` to BigInteger with the formatting you recommended. Right now it's just using `ToString`, like you mentioned, so it falls apart for very large values.\n\nApart from that, I'm not sure what else we can do to customize the DataTip behavior. Any other options?\n"
      },
      {
        "user": "GSPP",
        "created_at": "2016-06-01T09:26:46Z",
        "body": "Yes, I thought about `DebuggerDisplay`. Did not remember what it was called.\n"
      },
      {
        "user": "tannergooding",
        "created_at": "2020-03-02T18:15:09Z",
        "body": "It might be better to do `1.234E+123`. It would then be in a format similar to how float/double display large values."
      }
    ]
  },
  {
    "number": 5905,
    "title": "Vector<T> op_Explicit does not seem to be tested",
    "created_at": "2016-05-20T18:28:15Z",
    "closed_at": "2020-01-30T23:49:37Z",
    "labels": [
      "test-bug",
      "help wanted",
      "area-CodeGen-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5905",
    "body": "This is defined as an intrinsic (in simdintrinsiclist.h) but does not seem to be tested by any of the tests in the JIT/SIMD test directory. Such a test should be added, and it should use the `JitLog` class in VectorUtil.cs to ensure that the intrinsic is recognized appropriately.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5905/comments",
    "author": "CarolEidt",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2016-05-25T17:37:51Z",
        "body": "Not blocking RTM.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2017-03-07T19:52:02Z",
        "body": "@BruceForstall @RussKeldorph In case you missed it I have a PR opened for this."
      },
      {
        "user": "RussKeldorph",
        "created_at": "2017-03-07T20:35:38Z",
        "body": "@mikedn I did!  Thanks!"
      }
    ]
  },
  {
    "number": 17340,
    "title": "AsyncLocal is behaving differently after upgraging from DNX",
    "created_at": "2016-05-19T14:41:51Z",
    "closed_at": "2020-01-31T11:26:52Z",
    "labels": [
      "bug",
      "area-System.Threading",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17340",
    "body": "## Steps to reproduce\n\nI have the following class:\n\n``` c#\nnamespace MyTested.Mvc.Internal.Caching\n{\n    using System.Linq;\n    using System.Collections.Generic;\n#if NET451\n    using System.Runtime.Remoting.Messaging;\n    using System.Runtime.Remoting;\n#elif NETSTANDARD1_5\n    using System.Threading;\n#endif\n    using Contracts;\n    using Microsoft.Extensions.Caching.Memory;\n\n    public class MockedMemoryCache : IMockedMemoryCache\n    {\n#if NET451\n        private const string DataKey = \"__MemoryCache_Current__\";\n#elif NETSTANDARD1_5\n        private static readonly AsyncLocal<IDictionary<object, ICacheEntry>> МemoryCacheCurrent = new AsyncLocal<IDictionary<object, ICacheEntry>>();\n#endif\n        private readonly IDictionary<object, ICacheEntry> cache;\n\n        public MockedMemoryCache()\n        {\n            this.cache = this.GetCurrentCache();\n        }\n\n        public int Count => this.cache.Count;\n\n        public void Dispose()\n        {\n            this.cache.Clear();\n        }\n\n        public void Remove(object key)\n        {\n            if (this.cache.ContainsKey(key))\n            {\n                this.cache.Remove(key);\n            }\n        }\n\n        public ICacheEntry CreateEntry(object key)\n        {\n            var value = new MockedCacheEntry(key);\n            this.cache[key] = value;\n            return value;\n        }\n\n        public bool TryGetValue(object key, out object value)\n        {\n            ICacheEntry cacheEntry;\n            if (this.TryGetCacheEntry(key, out cacheEntry))\n            {\n                value = cacheEntry.Value;\n                return true;\n            }\n\n            value = null;\n            return false;\n        }\n\n        public bool TryGetCacheEntry(object key, out ICacheEntry value)\n        {\n            if (this.cache.ContainsKey(key))\n            {\n                value = this.cache[key];\n                return true;\n            }\n            else\n            {\n                value = null;\n                return false;\n            }\n        }\n\n        public IDictionary<object, object> GetCacheAsDictionary()\n        {\n            return this.cache.ToDictionary(c => c.Key, c => c.Value.Value);\n        }\n\n        private IDictionary<object, ICacheEntry> GetCurrentCache()\n        {\n#if NET451\n            var handle = CallContext.GetData(DataKey) as ObjectHandle;\n            var result = handle?.Unwrap() as IDictionary<object, ICacheEntry>;\n            if (result == null)\n            {\n                result = new Dictionary<object, ICacheEntry>();\n                CallContext.SetData(DataKey, new ObjectHandle(result));\n            }\n\n            return result;\n#elif NETSTANDARD1_5\n            var result = МemoryCacheCurrent.Value;\n            if (result == null)\n            {\n                result = new Dictionary<object, ICacheEntry>();\n                МemoryCacheCurrent.Value = result;\n            }\n\n            return result;\n#endif\n        }\n    }\n}\n```\n\nThe following test runs successfully on DNX. Assume that TestServiceProvider always returns the same instanve of MockedMemoryCache and TestHelper just call Dispose, which clears the dictionary.\n\n``` c#\n        [Fact]\n        public void MockedMemoryCacheShouldBeDifferentForEveryCallAsynchronously()\n        {\n            Task\n                .Run(async () =>\n                {\n                    TestHelper.ClearMemoryCache();\n\n                    string firstValue = null;\n                    string secondValue = null;\n                    string thirdValue = null;\n                    string fourthValue = null;\n                    string fifthValue = null;\n\n                    var tasks = new List<Task>\n                    {\n                        Task.Run(() =>\n                        {\n                            var memoryCache = TestServiceProvider.GetService<IMemoryCache>();\n                            memoryCache.Set(\"test\", \"first\");\n                            firstValue = TestServiceProvider.GetService<IMemoryCache>().Get<string>(\"test\");\n                            TestHelper.ClearMemoryCache();\n                        }),\n                        Task.Run(() =>\n                        {\n                            var memoryCache = TestServiceProvider.GetService<IMemoryCache>();\n                            memoryCache.Set(\"test\", \"second\");\n                            secondValue = TestServiceProvider.GetService<IMemoryCache>().Get<string>(\"test\");\n                            TestHelper.ClearMemoryCache();\n                        }),\n                        Task.Run(() =>\n                        {\n                            var memoryCache = TestServiceProvider.GetService<IMemoryCache>();\n                            memoryCache.Set(\"test\", \"third\");\n                            thirdValue = TestServiceProvider.GetService<IMemoryCache>().Get<string>(\"test\");\n                            TestHelper.ClearMemoryCache();\n                        }),\n                        Task.Run(() =>\n                        {\n                            var memoryCache = TestServiceProvider.GetService<IMemoryCache>();\n                            memoryCache.Set(\"test\", \"fourth\");\n                            fourthValue = TestServiceProvider.GetService<IMemoryCache>().Get<string>(\"test\");\n                            TestHelper.ClearMemoryCache();\n                        }),\n                        Task.Run(() =>\n                        {\n                            var memoryCache = TestServiceProvider.GetService<IMemoryCache>();\n                            memoryCache.Set(\"test\", \"fifth\");\n                            fifthValue = TestServiceProvider.GetService<IMemoryCache>().Get<string>(\"test\");\n                            TestHelper.ClearMemoryCache();\n                        })\n                    };\n\n                    await Task.WhenAll(tasks);\n\n                    Assert.Equal(\"first\", firstValue);\n                    Assert.Equal(\"second\", secondValue);\n                    Assert.Equal(\"third\", thirdValue);\n                    Assert.Equal(\"fourth\", fourthValue);\n                    Assert.Equal(\"fifth\", fifthValue);\n                })\n                .GetAwaiter()\n                .GetResult();\n        }\n```\n## Expected  behavior\n\nThe test to pass like it did on DNX.\n## Actual behavior\n\nAfter moving to CLI the test started failing with unexpected values like `first` equals `third` and so on. It seems that the internal dictionary is shared between the tasks and it should not be.\n\nMaybe I am missing something? Is this expected behavior? If you need more minimalistic example, I can provide one.\n\nNOTE: After changing AsyncLocal to ThreadLocal the test passed right away.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17340/comments",
    "author": "ivaylokenov",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2016-05-25T00:28:28Z",
        "body": "cc: @sergiy-k \n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-13T22:40:22Z",
        "body": "Did you get chance to debug it and find out what is wrong?\n"
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T12:29:24Z",
        "body": "I have a similar problem. When I switch to ThreadLocal it works, but AsyncLocal does not.\r\n"
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T12:33:29Z",
        "body": "A very simple code to re-produce it:\r\n\r\n````C#\r\n    public class AsyncLocal_Tests\r\n    {\r\n        private static readonly AsyncLocal<string> _asyncLocal = new AsyncLocal<string>();\r\n\r\n        [Fact]\r\n        public async Task Test1()\r\n        {\r\n            await AsyncTestCode(\"42\");\r\n            _asyncLocal.Value.ShouldBe(\"42\"); //TEST FAILS IN THIS POINT... IT'S NULL!\r\n        }\r\n\r\n        private static async Task AsyncTestCode(string value)\r\n        {\r\n            using (var ms = new MemoryStream())\r\n            {\r\n                await ms.WriteAsync(new[] { (byte)1 }, 0, 1);\r\n\r\n                _asyncLocal.Value = value;\r\n                _asyncLocal.Value.ShouldBe(value);\r\n\r\n                await ms.WriteAsync(new[] { (byte)2 }, 0, 1);\r\n            }\r\n        }\r\n    }\r\n````"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-03-30T14:01:31Z",
        "body": "This is the expected behavior.  Any changes made to _asyncLocal.Value inside of an `async` method do not propagate back out to the synchronous caller of the method.  There is explicit code in the infrastructure for `async` methods to prevent that from happening."
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T14:16:56Z",
        "body": "Thanks @stephentoub for the explanation.\r\nBut then how I can achive the scenario above? I was using ``CallContext.LogicalSetData`` before, but it's not available in .netcore/.netstandard."
      },
      {
        "user": "karelz",
        "created_at": "2017-03-30T15:02:31Z",
        "body": "Did you consider simply returning value from the async method? (or use out/ref parameters if you have more values)"
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T18:08:39Z",
        "body": "This is a very very simplified example to demonstrate the problem. My actual application/framework is much more complicated. What I want to have a ambient value shared in current thread/async-flow.\r\nIn a web application, we can store such a value in HttpContext.Items. But if we have a background job or console app, this is also not possible. So, what I was looking for a good replacement for CallContext like in .net framework."
      },
      {
        "user": "kouvel",
        "created_at": "2017-03-30T18:19:23Z",
        "body": "You could do something like this:\r\n\r\n```c#\r\n    public static class AsyncLocal_Tests\r\n    {\r\n        private static readonly AsyncLocal<MyAsyncFlowState> _asyncLocal = new AsyncLocal<MyAsyncFlowState>();\r\n\r\n        private class MyAsyncFlowState\r\n        {\r\n            public string Str { get; set; }\r\n        }\r\n\r\n        [Fact]\r\n        public static async Task Test1()\r\n        {\r\n            _asyncLocal.Value = new MyAsyncFlowState();\r\n            await AsyncTestCode(\"42\");\r\n            Console.WriteLine(_asyncLocal.Value.Str ?? \"(null)\");\r\n        }\r\n\r\n        private static async Task AsyncTestCode(string value)\r\n        {\r\n            using (var ms = new MemoryStream())\r\n            {\r\n                await ms.WriteAsync(new[] { (byte)1 }, 0, 1);\r\n\r\n                _asyncLocal.Value.Str = value;\r\n                Console.WriteLine(_asyncLocal.Value.Str ?? \"(null)\");\r\n\r\n                await ms.WriteAsync(new[] { (byte)2 }, 0, 1);\r\n            }\r\n        }\r\n    }\r\n```"
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T18:26:52Z",
        "body": "But this is not thread safe. Many thread can access to _asyncLocal.Value.Str concurrently and overwrite each other's values. Am I wrong?"
      },
      {
        "user": "kouvel",
        "created_at": "2017-03-30T18:41:26Z",
        "body": "`_asyncLocal.Value` would be unique per `ExecutionContext`, but in the async flow there could be multiple threads trying to access/change it. In your original code, changing `_asyncLocal.Value` would change the current execution context, leaving the original execution context unchanged, which is why you don't see the updated value in the completion. Suppose it were instead to change the same execution context, you would then have the same thread safety issue. If you need thread safety, you may need to add it into `MyAsyncFlowState`."
      },
      {
        "user": "hikalkan",
        "created_at": "2017-03-30T18:51:10Z",
        "body": "I will think on that, thanks a lot."
      },
      {
        "user": "hikalkan",
        "created_at": "2017-04-06T14:51:41Z",
        "body": "I think this there is still a problem. We may need to change ambient value from inner method and expect to effect the value in the containing method. .net framework should provide a way of that."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-04-06T14:54:53Z",
        "body": "> We may need to change ambient value from inner method and expect to effect the value in the containing method. .net framework should provide a way of that.\r\n\r\nIt's explicitly by design that you can't do that from inside of an async method, so it's not a bug.  If you want to do that, you can't use an async method (it can still be Task-returning, just not using the async/await keywords)."
      },
      {
        "user": "hikalkan",
        "created_at": "2017-04-06T15:07:42Z",
        "body": "OK, understand that this is by design. But, is there any other way of doing that (beside AsyncLocal)?"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-04-06T15:10:50Z",
        "body": "Every mechanism for flowing state across asynchronous points (e.g. AsyncLocal, CallContext, etc.) does so via ExecutionContext, and it's ExecutionContext that is prevented from flowing out of an async/await method.  So any changes done via any such mechanism inside of an async/await method will not flow out.  If you want changes to AsyncLocal, CallContext, etc. to flow out of an asynchronous method to its synchronous caller, that asynchronous method can't itself be marked as async... it could still be Task-returning, and it could make a change to something and then delegate to an async/await method, and the changes would propagate out to the synchronous caller fine."
      },
      {
        "user": "hikalkan",
        "created_at": "2017-04-06T15:19:46Z",
        "body": "Thank you for detailer explanation and for your valuable time. I tested and see that it's same for CallContext too. So, there is no way of what I want and should make it working with given rule."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-04-06T15:29:17Z",
        "body": "@hikalkan, happy to help, thanks."
      }
    ]
  },
  {
    "number": 17301,
    "title": "Restore the use of reflection methods with binding flags in Microsoft.VisualBasic",
    "created_at": "2016-05-16T17:57:06Z",
    "closed_at": "2020-07-06T18:39:38Z",
    "labels": [
      "enhancement",
      "area-Microsoft.VisualBasic",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17301",
    "body": "Reflection used to expose APIs like\n\n``` C#\n// allocates nothing in steady state\nreturn type.GetMethod(name, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, ...);\n```\n\nIn CoreFX the surface was reduced to minimum \"GetMethods() forcing the following solution:\n\n``` C#\n       // allocates array with all methods each time\n       MethodInfo[] methods = type.GetMethods();\n       foreach (var method in methods)\n       {\n            if (method.IsStatic && method.Name == name)\n          return methods;\n       }\n```\n\nThe second is wore performance-wise and we should be getting the original API with binding flags back.\nMake sure that Microsoft.VisualBasic is switched back to using that API\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17301/comments",
    "author": "VSadov",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2016-05-25T00:08:32Z",
        "body": "Moving to 1.1\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T22:23:31Z",
        "body": "Next step: Tackle the API usage one by one or in batches. It does not have to be all at once."
      },
      {
        "user": "cston",
        "created_at": "2020-07-06T18:39:38Z",
        "body": "@VSadov, it looks like there are no uses of `Type.GetMethods()` in Microsoft.VisualBasic.Core currently. Please re-open if I've overlooked something. Thanks."
      }
    ]
  },
  {
    "number": 17300,
    "title": "Restore the use of reflection methods with binding flags in System.Dynamic.Runtime",
    "created_at": "2016-05-16T17:55:58Z",
    "closed_at": "2020-01-31T11:24:52Z",
    "labels": [
      "enhancement",
      "area-System.Dynamic.Runtime",
      "good first issue",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17300",
    "body": "Reflection used to expose APIs like\n\n``` C#\n// allocates nothing in steady state\nreturn type.GetMethod(name, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, ...);\n```\n\nIn CoreFX the surface was reduced to minimum \"GetMethods() forcing the following solution:\n\n``` C#\n       // allocates array with all methods each time\n       MethodInfo[] methods = type.GetMethods();\n       foreach (var method in methods)\n       {\n            if (method.IsStatic && method.Name == name)\n          return methods;\n       }\n```\n\nThe second is wore performance-wise and we should be getting the original API with binding flags back.\nMake sure that System.Dynamic.Runtime is switched back to using that API\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17300/comments",
    "author": "VSadov",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2016-05-25T00:08:41Z",
        "body": "Moving to 1.1\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-09T23:41:29Z",
        "body": "We should use the APIs which were brought back - we need to check if the code base is ready for them.\n\nShould be straightforward, just be careful to keep the semantics the same.\n"
      },
      {
        "user": "WinCPP",
        "created_at": "2017-02-05T04:37:12Z",
        "body": "@karelz something that I can take up? I have to reference CoreCLR code base...?"
      },
      {
        "user": "karelz",
        "created_at": "2017-02-05T21:19:20Z",
        "body": "@WinCPP assigned to you.\r\nI don't think you need to do anything special - the Reflection APIs should be already available for consumption. It is \"only\" about changing Dynamic.Runtime code to use the APIs.\r\nAs mentioned above: Be extra careful to keep the same semantics (even for corner cases). If in doubt, ping the issue and @VSadov @OmarTawfik for advice."
      },
      {
        "user": "WinCPP",
        "created_at": "2017-02-06T17:29:07Z",
        "body": "@karelz Now I understand. If this is to be done using the corefx/src/../System.Dyanmic.Runtime.sln, then I don't see any .cs files in the same, except for those in the test project. @VSadov , @OmarTawfik appreicate your advice."
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-04-14T12:12:50Z",
        "body": "@WinCPP\r\n\r\nNext steps:\r\n1. Investigate all files which are using reflection method \"GetMethods(\"\r\n=> `~\\.git\\corefx\\src>findstr /si /C:\"GetMethods(\" *`\r\n2. Notice that only three files are in src which are relevant:\r\n```\r\nSystem.Linq.Expressions\\src\\System\\Dynamic\\Utils\\TypeExtensions.cs:            foreach (MethodInfo method in type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.DeclaredOnly))\r\nSystem.Linq.Expressions\\src\\System\\Dynamic\\Utils\\TypeUtils.cs:            MethodInfo[] eMethods = nnExprType.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);\r\nSystem.Linq.Expressions\\src\\System\\Dynamic\\Utils\\TypeUtils.cs:            MethodInfo[] cMethods = nnConvType.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);\r\n```\r\n3. Notice that only TypeExtensions.cs is searching for a type with a specific name\r\n4. **Spoiler**: Use GetMethod instead of GetMethods in line 22.\r\n\r\n`There are also plenty of tests which could be optimized but I don't feel the need for that.`\r\n\r\nAs we are getting closer to 2.0 it would be great if you could submit a PR before the fixed date (i think middle of May). If you don't want to take the issue anymore please tell me."
      },
      {
        "user": "WinCPP",
        "created_at": "2017-04-15T01:38:42Z",
        "body": "@ViktorHofer I will work on this using the inputs that you have given. I had picked it up when I had just started contributing and at that time, not being quite familiar with stuff, didn't understand what to do! I will complete it for 2.0 and raise early flag if I get stuck. Thanks!"
      },
      {
        "user": "WinCPP",
        "created_at": "2017-04-15T06:39:45Z",
        "body": "@ViktorHofer Analyzing the mentioned three methods, it appears that the change could be made only in first of the three, which is the following...\r\n\r\n```\r\nSystem.Linq.Expressions\\src\\System\\Dynamic\\Utils\\TypeExtensions.cs:            foreach (MethodInfo method in type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.DeclaredOnly))\r\n```\r\n\r\nThe other two in `System.Linq.Expressions\\src\\System\\Dynamic\\Utils\\TypeUtils.cs` appear to be doing a lot more in that they search for a conversion operator with richer criteria. Hence we cannot change them. Hope I am not missing something..."
      },
      {
        "user": "ViktorHofer",
        "created_at": "2017-04-15T09:32:13Z",
        "body": "> 3. Notice that only TypeExtensions.cs is searching for a type with a specific name\r\n\r\nYou are on the right track :)"
      }
    ]
  },
  {
    "number": 17299,
    "title": "Restore the use of reflection methods with binding flags in Microsoft.CSharp",
    "created_at": "2016-05-16T17:54:41Z",
    "closed_at": "2020-01-31T11:24:49Z",
    "labels": [
      "enhancement",
      "area-Microsoft.CSharp",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17299",
    "body": "Reflection used to expose APIs like\r\n\r\n``` C#\r\n// allocates nothing in steady state\r\nreturn type.GetMethod(name, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, ...);\r\n```\r\n\r\nIn CoreFX the surface was reduced to minimum \"GetMethods() forcing the following solution:\r\n\r\n``` C#\r\n       // allocates array with all methods each time\r\n       MethodInfo[] methods = type.GetMethods();\r\n       foreach (var method in methods)\r\n       {\r\n            if (method.IsStatic && method.Name == name)\r\n          return methods;\r\n       }\r\n```\r\n\r\nThe second is worse performance-wise and we should be getting the original API with binding flags back.\r\nMake sure that Microsoft.CSharp is switched back to using that API\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17299/comments",
    "author": "VSadov",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2016-05-25T00:08:48Z",
        "body": "Moving to 1.1\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T22:37:43Z",
        "body": "Next step: Identify call sites and fix them in batches (don't need to fix all at once)."
      }
    ]
  },
  {
    "number": 17234,
    "title": "Clean.cmd and .sh should offer an option to prevent user prompt on failures",
    "created_at": "2016-05-09T15:48:41Z",
    "closed_at": "2020-01-31T11:21:40Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17234",
    "body": "When Clean.cmd or .sh fail to unlink a file during the 'git clean -xdf' phase, they prompt \"Should I try again?\"  This is fatal for an automated environment like CI and will require manual intervention.\n\nClean should offer an option that prevents prompts.  Possible solution is:\n- Optionally 'set GIT_ASK_YESNO=false' in clean.cmd\n\nI would prefer this prompt suppression should be the default.  Interactive users can see the failures and try again, but lab machines cannot.\n\nAny netci.groovy scripts using clean.cmd/sh or doing manual 'git clean -xdf' should also be aware of whichever option is chosen and use it.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17234/comments",
    "author": "roncain",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2017-12-12T01:25:59Z",
        "body": "While I generally like the idea I don't think it will be easy to guarantee we stay clean in all the commands our scripts call. Given it hasn't gotten any interest for a long time I'm going to close, if someone is interested in trying to improve our scripts by all means give it a go. "
      }
    ]
  },
  {
    "number": 17115,
    "title": "ProjectReference -> Package Dependency: Disabled System.Linq.Expressions from package dependency build",
    "created_at": "2016-04-25T20:35:14Z",
    "closed_at": "2020-01-31T11:15:49Z",
    "labels": [
      "area-System.Linq.Expressions",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17115",
    "body": "System.Linq.Expressions does not build when project references are converted to package dependencies due to \n\n> Catalog\\ExpressionCatalog.RuntimeVariables.cs(34,39): error CS0246: The type or namespace name 'IRuntimeVariables' could not be found (are you missing a using directive or an assembly reference?) [D:\\A_work\\8\\s\\src\\System.Linq.Expressions\\tests\n\nSee PR dotnet/corefx#7998 \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17115/comments",
    "author": "chcosta",
    "comments": [
      {
        "user": "chcosta",
        "created_at": "2016-05-05T20:30:48Z",
        "body": "@JonHanna \n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-05-06T01:01:10Z",
        "body": "@chcosta I must admit I'm not entirely clear on how the package references work, but if I'm not completely off the mark then this public type should be visible, that not being so is a bug, and the change in dotnet/corefx#8339 will make it so.\nBut as I say, this is something where I don't even know basics that I probably should know, so maybe I'm barking up the wrong tree.\n"
      },
      {
        "user": "chcosta",
        "created_at": "2016-05-06T16:50:14Z",
        "body": "Your assessment sounds correct to me.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-05-09T11:05:00Z",
        "body": "Great. I don't know how to confirm that it fixes your issue though.\n"
      },
      {
        "user": "VSadov",
        "created_at": "2016-11-29T17:51:46Z",
        "body": "@chcosta - is the bug still actionable?"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-30T07:32:02Z",
        "body": "@chcosta ping? Are you working on it? If not, we should unassign you :)"
      },
      {
        "user": "chcosta",
        "created_at": "2017-01-30T17:37:19Z",
        "body": "We no longer build with package references.  This is not an issue anymore."
      }
    ]
  },
  {
    "number": 17107,
    "title": "The default debug action for *.Tests projects should disable xunit parallelism.",
    "created_at": "2016-04-25T14:12:14Z",
    "closed_at": "2020-01-31T11:15:27Z",
    "labels": [
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17107",
    "body": "I see no advantage to having multiple tests running in multiple threads firing off breakpoints when I'm trying to debug a test. \n\ntools\\test.targets already nicely adds the \"-wait\" argument by default so the console doesn't disappear on you.\n\n`<StartArguments Condition=\"'$(StartArguments)'==''\">$(TestArguments) -wait</StartArguments>\n`\n\nThe argument \"-parallel none\" would be a great companion to the \"-wait\" argument.\n\nxunit.console.netcore.exe doesn't care if you specify \"-parallel\" multiple times so this should be safe.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17107/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "joperezr",
        "created_at": "2016-05-04T22:03:03Z",
        "body": "This change will make it to corefx as soon as buildtools is updated.\n"
      }
    ]
  },
  {
    "number": 17097,
    "title": "System.Globalization.Tests fails on NetBSD",
    "created_at": "2016-04-24T17:06:38Z",
    "closed_at": "2020-01-31T11:14:54Z",
    "labels": [
      "area-System.Globalization",
      "os-netbsd",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17097",
    "body": "```\n   System.Globalization.Tests.NumberFormatInfoNumberGroupSizes.NumberGroupSizes_Get(format: NumberFormatInfo { CurrencyDecimalDigits = 2, CurrencyDecimalSeparator = \".\", CurrencyGroupSeparator = \",\", CurrencyGroupSizes = [3, 2], CurrencyNegativePattern = 9, ... }, expected: [3, 2]) [FAIL]\n      Assert.Equal() Failure\n      Expected: Int32[] [3, 2]\n      Actual:   Int32[] [3]\n      Stack Trace:\n            at System.Globalization.Tests.NumberFormatInfoNumberGroupSizes.NumberGroupSizes_Get(NumberFormatInfo format, Int32[] expected)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17097/comments",
    "author": "krytarowski",
    "comments": [
      {
        "user": "ellismg",
        "created_at": "2016-04-24T19:40:22Z",
        "body": "What version of ICU are you linking against?\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-04-24T19:46:33Z",
        "body": "```\n$ pkg_info icu\n```\n\nGives me: `icu-56.1nb1`\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-04-24T19:49:44Z",
        "body": "If that matters:\n\n```\n$ locale\nLANG=\"\"\nLC_CTYPE=\"pl_PL.UTF-8\"\nLC_COLLATE=\"C\"\nLC_TIME=\"pl_PL.UTF-8\"\nLC_NUMERIC=\"pl_PL.UTF-8\"\nLC_MONETARY=\"pl_PL.UTF-8\"\nLC_MESSAGES=\"pl_PL.UTF-8\"\nLC_ALL=\"pl_PL.UTF-8\"\n```\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-04-25T00:23:36Z",
        "body": "I'm updating pkgsrc and there is `57.1`. I will be working against this version.\n"
      },
      {
        "user": "krwq",
        "created_at": "2018-09-04T22:02:02Z",
        "body": "Closing this as won't fix. Haven't seen any recent reports of this, I remember there was also some work done with similar tests - possibly it is already fixed. Please reopen/comment if there are more hits."
      }
    ]
  },
  {
    "number": 5680,
    "title": "Is it possible to build coreclr for ARM on Windows?",
    "created_at": "2016-04-22T11:10:38Z",
    "closed_at": "2020-01-30T23:38:56Z",
    "labels": [
      "arch-arm32",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5680",
    "body": "I have tried to run \"build.cmd arm\" and \"build.cmd arm64\" on Windows 7 with Visual Studio Community. In first case it said  \"Only AMD64, ARM64 and I386 are supported\". In second case it complained that \"MC not found\".\n\nI looked at CI results in one arbitrary chosen PR and didn't find reference to ARM on Windows build:\n\n> CentOS7.1 x64 Debug Build and Test — Build finished. 809 tests run, 0 skipped, 0 failed.\n> FreeBSD x64 Checked Build — Build finished. 809 tests run, 0 skipped, 0 failed.\n> OSX x64 Checked Build and Test — Build finished. No test results found.\n> Ubuntu arm Cross Checked Build — Build finished. No test results found.\n> Ubuntu arm Cross Debug Build — Build finished. No test results found.\n> Ubuntu arm Cross Release Build — Build finished. No test results found.\n> Ubuntu x64 Checked Build and Test — Build finished. No test results found.\n> Windows_NT x64 Debug Build and Test — Build finished. 6414 tests run, 0 skipped, 0 failed.\n> Windows_NT x64 Release Priority 1 Build and Test — Build finished. 9315 tests run, 0 skipped, 0 failed.\n> Windows_NT x86 Debug Legacy Backend Build and Test — Build finished. No test results found.\n> Windows_NT x86 Release Legacy Backend Build and Test — Build finished. No test results found.\n\nIs it possible to build coreclr for ARM on Windows?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5680/comments",
    "author": "mkborg",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-04-22T18:15:18Z",
        "body": "> Is it possible to build coreclr for ARM on Windows?\n\nIt is not possible to build the repo for ARM on Windows today. PRs to make it work are welcomed. (The sources are building using the legacy internal MS build system - it should be just about fixing up the make files.)\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-10-23T04:52:08Z",
        "body": "The Windows ARM build works now - enabled in CI by dotnet/coreclr#7123\n"
      }
    ]
  },
  {
    "number": 17082,
    "title": "A small suggestion for making the VS experience in corefx more idiot-proof.",
    "created_at": "2016-04-21T21:41:37Z",
    "closed_at": "2020-01-31T11:14:08Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/17082",
    "body": "Know all these lines that show up in various .csproj files?\n\n```\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Windows_Debug|AnyCPU'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Windows_Release|AnyCPU'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Unix_Debug|AnyCPU'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Unix_Release|AnyCPU'\" />\n```\n\nWell heck, these are just NOP's - might as well get rid of them, right? Or at least, not worry if they don't line up with the Configurations actually supported by the project (is this library \"Debug\" or \"Windows_Debug\"?)\n\n**Wrong**. I just found out, the hard way, that the VS IDE looks for these conditionals as a sign that a .csproj \"supports\" a certain configuration. And if the .sln file specifies a certain configuration for your .csproj file and your .csproj file doesn't have this magic line, VS \"helpfully\" \"fixes\" your .sln to use a configuration that the .csproj appears to support (how does it know it picked a good one? Beats me.) And unless you're like me and keep files read-only as long as possible, you'll get no notice that \"Hey! We just applied a fix to _your_ file without knowing what we're doing. But I guess you didn't need to know that.\"\n\nIn the mean time, hitting F6 now yields broken or misleading results and you wonder why you have to commit an .sln file change that you have no understanding of.\n\nThis seems like boilerplate that could go into dir.props so everyone doesn't have to deal with this. It's fine by me if the boilerplate includes every $(Configuration) name we use repo-wide - I see no value in the VS IDE insisting that the $(Configuration)/Project pairup be approved on both sides like that.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/17082/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-04-21T23:48:50Z",
        "body": "On the one hand, those blocks can be a bit confusing, and in a lot of projects are out-of-sync, out-dated, or worse, just wrong. On the other hand, I think it would not be better to have every single option listed in the solution in VS. There will be no way to figure out if I should select from \"net45, net451, net46, net461, net462, net47, etc.\" without either 1) looking at the .builds file or 2) scouring over the csproj to see all valid TargetGroup's. I think there's way too many configurations to just leave them all in the list.\n\nEven aside from this, we need to figure out how we can clean up and keep our solution files in sync. I would be in support of an effort to:\n1. Add all the configurations to dir.props (or somewhere top-level).\n2. Auto-generate all solution files in the repo, and enforce valid configurations by parsing the .builds files. We should include this as a target somewhere so we can re-run it if something goes wrong or gets out of sync.\n3. Delete all of these configuration blocks from all individual projects.\n\nOn the other hand, I actually have found that having these configuration blocks in the project to be helpful, provided that I already know they are correct (i.e. I just added them myself, or I just fixed them myself). It makes it easier when modifying conditions in the project to be sure that you are condition'ing on a valid property set. Technically this can also be achieved by looking into the .builds file, however.\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-18T17:10:33Z",
        "body": "Since we do have the builds files now, maybe it's worth making a tool which does, approximately:\n- Find a builds file\n- Ensure it only talks about a .csproj in the same directory\n- Clear out the configurations\n- Regenerate Debug/Release configurations for everything in the .builds file\n\nThough I guess really it might want to be done as a library/.sln thing; since then you can regen the .sln after all of the libraries it references are done.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-14T19:38:09Z",
        "body": "Dupe of dotnet/runtime#15901.\n"
      }
    ]
  },
  {
    "number": 16947,
    "title": "Command files (*.cmd) can't use directories with spaces",
    "created_at": "2016-04-11T06:28:29Z",
    "closed_at": "2020-01-31T11:07:32Z",
    "labels": [
      "bug",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16947",
    "body": "When creating or evaluating an environment variable, quotes are not required:\n\n``` batchfile\nset INIT_TOOLS_LOG=%~dp0init-tools.log\nif [%PACKAGES_DIR%]==[] set PACKAGES_DIR=%~dp0packages\\\n```\n\nHowever, when turning that environment variable into a file to be used, quotes are required. Instead of:\n\n``` batchfile\nset /P BUILDTOOLS_VERSION=< %~dp0BuildToolsVersion.txt\necho %PROJECT_JSON_CONTENTS% > %PROJECT_JSON_FILE%\necho Running %0 > %INIT_TOOLS_LOG%\n```\n\nThe correct syntax is:\n\n``` batchfile\nset /P BUILDTOOLS_VERSION=< \"%~dp0BuildToolsVersion.txt\"\necho %PROJECT_JSON_CONTENTS% > \"%PROJECT_JSON_FILE%\"\necho Running %0 > \"%INIT_TOOLS_LOG%\"\n```\n\nBecause of the lack of quotes, any attempt to use these command files in a directory with spaces will fail.\n\n-Neil\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16947/comments",
    "author": "McNeight",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2016-04-12T06:19:14Z",
        "body": "cc @joperezr @maririos \n"
      },
      {
        "user": "McNeight",
        "created_at": "2016-04-12T16:01:21Z",
        "body": "Two further notes:\nTo be clear, the spaces can be anywhere in the path and not just the current working directory. For example, any subfolder of  \"C:\\Users\\Neil\\Documents\\Visual Studio 2015\\\" is not going to work.\n\nAlso, I discovered that putting quotes around the --packages path for `dotnet restore` will cause the command to fail. I've written this up as dotnet/cli/issues/2395\n\n-Neil\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2016-04-12T17:04:48Z",
        "body": "Thanks @McNeight. Please feel free to submit some PR's to fix up the scripts to correctly handle spaces in the paths. This is something that always bugs me too and I try to fix them when I find them but I've not had enough cycles to dig in recently. \n"
      },
      {
        "user": "brfalcon-zz",
        "created_at": "2017-01-06T18:42:26Z",
        "body": "@karelz, is this issue still open? It seems that the scripts have already been fixed."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-06T18:49:04Z",
        "body": "If you know which PR fixed it, please link it. Closing as per info above.\r\ncc: @mellinoe"
      }
    ]
  },
  {
    "number": 16945,
    "title": "NamedPipeClientStream poorly handles the case where the pipe does not exist",
    "created_at": "2016-04-11T00:19:04Z",
    "closed_at": "2020-01-31T11:07:26Z",
    "labels": [
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16945",
    "body": "NamedPipeClientStream waits when the pipe does not exist, and it waits by spinning:\n\n```\n            // Some platforms may return immediately from TryConnect if the connection could not be made, \n            // e.g. WaitNamedPipe on Win32 will return immediately if the pipe hasn't yet been created,\n            // and open on Unix will fail if the file isn't yet available.  Rather than just immediately\n            // looping around again, do slightly smarter busy waiting.\n            sw.SpinOnce();\n```\n\nThis is problematic for two reasons.\n1. I typically do not want to wait if the pipe does not exist; I only want to wait if the pipe is busy. This is because if the pipe doesn't exist, the server is probably not running, so waiting is unlikely to resolve anything.\n2. Spinning on file not found consumes an entire CPU waiting for a service to start. Not a good choice.\n\nThis combination of problems basically makes timeouts larger than a few milliseconds useless if there is any risk that the pipe will not exist.\n\nTo fix this, I would propose two things:\n1. Stop spinning. Sleep for a short time if you must poll.\n2. Provide an option to fail if the pipe does not yet exist. Frankly I think this should be the default, but there are probably compatibility implications of this.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16945/comments",
    "author": "jstarks",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2016-04-11T00:28:47Z",
        "body": "> Stop spinning. Sleep for a short time if you must poll.\n\nSpinOnce does that.  It uses a mixture of Thread.SpinWait, Thread.Yield, and Thread.Sleep, including Thread.Sleep(1), which in most circumstances is indistinguishable from Thread.Sleep(10) or so.\n\n> Provide an option to fail if the pipe does not yet exist.\n\nThis exists: pass a timeout of 0.\n"
      },
      {
        "user": "jstarks",
        "created_at": "2016-04-11T06:00:53Z",
        "body": "@stephentoub You're right, my mistake on the spinning. It turns out that I am observing spinning only when running on the .NET Framework 4.6.1, where System.IO.Pipes is backed by System.Core. According to the reference source for 4.6.1, there is no delay, just a tight loop. I don't quite understand the relationship between the .NET Framework releases and corefx -- will the corefx improvements make it into a future version of the framework?\n\nRegarding the timeout, perhaps I wasn't clear. I can pass a timeout of 0, but this will fail in the case where the pipe exists but is not currently available (because the server is busy). I would like to wait up to, say, 5 seconds for the server to free up, but I want to give instant feedback to the user if the pipe doesn't exist at all, which would indicate that the server is not running or that they got the pipe address wrong. I don't believe there is a straightforward way to achieve this today.\n"
      },
      {
        "user": "ianhays",
        "created_at": "2016-04-18T21:07:18Z",
        "body": "> I don't quite understand the relationship between the .NET Framework releases and corefx -- will the corefx improvements make it into a future version of the framework?\n\nNot all of the changes, but some of them. CoreFX is a part of the \"Core\" .NET that is a distinct product from the full .NET framework (e.g. 4.6.2). Some changes to the core are incompatible with the full framework, so we cherry-pick high-priority, highly-compatible improvements in CoreFX to bring back to the full framework for the next release there.\n"
      },
      {
        "user": "ianhays",
        "created_at": "2016-04-18T21:17:20Z",
        "body": "> I want to give instant feedback to the user if the pipe doesn't exist at all, which would indicate that the server is not running or that they got the pipe address wrong. I don't believe there is a straightforward way to achieve this today.\n\nI can't think of a non-hacky solution. I agree that any modification would have to be parallel to the existing default behavior as we would run into back-compat nightmares. Plus the existing behavior isn't <i>wrong</i>; what if you wanted to connect to a server in the next 10 seconds and you didn't care when that server was created as long as the operation succeeds before the timeout?\n"
      },
      {
        "user": "jstarks",
        "created_at": "2016-04-20T02:18:57Z",
        "body": "You're right that the existing behavior isn't wrong, but I would argue that it's rarely useful. The caller easily could have added a retry loop if he wanted the behavior you're describing. But there's no way to remove the retry loop without also losing the WaitNamedPipe functionality.\n\nBased on your retargeting of the milestone, it sounds like I'm just going to have to live with a short timeout for now, or I'm going to have to fork this code.\n"
      },
      {
        "user": "ianhays",
        "created_at": "2016-04-20T15:51:51Z",
        "body": "> Based on your retargeting of the milestone, it sounds like I'm just going to have to live with a short timeout for now, or I'm going to have to fork this code.\n\nThe Future milestone doesn't mean that it won't ever be looked at, it just means it's not a breaking bug or otherwise high-priority fix. It could be resolved in a week and still be on the Future milestone.\n\n> You're right that the existing behavior isn't wrong, but I would argue that it's rarely useful. The caller easily could have added a retry loop if he wanted the behavior you're describing.\n\nTrue, but code like this has a tendency to be built up on over time. The compatibility repercussions of changing this are potentially huge, so we've got to have a <b>really</b> convincing reason to incur those. The better option imo would be to make an API addition.\n\n> But there's no way to remove the retry loop without also losing the WaitNamedPipe functionality.\n\nI do think we need some way to get at the underlying errors from the Connect call <b>or</b> we need some way to control when the connect should consider the operation as a failure. As you pointed out, long timeouts are worthless if there's any chance that the server isn't available due to a problem that waiting won't resolve.\n\nSome ideas off the top of my head:\n- Make a Connect overload that takes a ref bool: `public void Connect(int timeout, ref bool tryOnce);` where if `tryOnce` is true then the ConnectInternal loop will return (and set `tryOnce` to false) when the connection attempt fails due to the server not existing. If `tryOnce` is false then the behavior is the same as today.\n- Same as above but make Connect return a bool indicating the success status of the connection i.e. `public bool Connect(int timeout, bool tryOnce);`\n- Same as above but make Connect throw an exception when the operation fails for a \"recoverable\" reason (e.g. server doesn't exist): `public void Connect(int timeout, bool tryOnce);`\n\nThoughts?\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-11T21:48:18Z",
        "body": "No response for a long time, closing. If you have proposal for the API, feel free to reopen.\n"
      }
    ]
  },
  {
    "number": 5524,
    "title": "JIT asserts don't display message box",
    "created_at": "2016-04-07T23:25:59Z",
    "closed_at": "2020-01-30T23:31:55Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5524",
    "body": "On Windows desktop CLR, when you hit a JIT assert, you get a pop-up message box. When you hit \"Retry\" on this, and you are running under a debugger, the debugger stops at the assert.\n\nOn Windows CoreCLR, this is not working.\n\nThis is because the CLR fails in LateboundMessageBoxW():\n\n```\n#if defined(FEATURE_CORESYSTEM) && !defined(CROSSGEN_COMPILE)\n    // Some CoreSystem OSs will support MessageBoxW via an extension library. The following technique is what\n    // was recommeded by Philippe Joubert from the CoreSystem team.\n    HMODULE hGuiExtModule = WszLoadLibrary(W(\"ext-ms-win-ntuser-gui-l1\"), NULL, 0);\n#else\n```\n\nnamely, it fails to load this library.\n\nThe call stack is:\n\n```\n>   coreclr.dll!LateboundMessageBoxW(HWND__ * hWnd, const wchar_t * lpText, const wchar_t * lpCaption, unsigned int uType) Line 1002    C++\n    coreclr.dll!MessageBoxImpl(HWND__ * hWnd, const wchar_t * message, const wchar_t * title, const wchar_t * detailedText, unsigned int uType) Line 113    C++\n    coreclr.dll!UtilMessageBoxNonLocalizedVA(HWND__ * hWnd, const wchar_t * lpText, const wchar_t * lpTitle, const wchar_t * lpDetails, unsigned int uType, int displayForNonInteractive, int showFileNameInTitle, int * pInputFromUser, char * args) Line 435  C++\n    coreclr.dll!UtilMessageBoxNonLocalizedVA(HWND__ * hWnd, const wchar_t * lpText, const wchar_t * lpTitle, unsigned int uType, int displayForNonInteractive, int showFileNameInTitle, int * pInputFromUser, char * args) Line 322 C++\n    coreclr.dll!UtilMessageBoxCatastrophicNonLocalizedVA(const wchar_t * lpText, const wchar_t * lpTitle, unsigned int uType, int showFileNameInTitle, char * args) Line 598    C++\n    coreclr.dll!UtilMessageBoxCatastrophicNonLocalized(const wchar_t * lpText, const wchar_t * lpTitle, unsigned int uType, int showFileNameInTitle, ...) Line 539  C++\n    coreclr.dll!_DbgBreakCheck(const char * szFile, int iLine, const char * szExpr, int fConstrained) Line 471  C++\n    coreclr.dll!CEEInfo::doAssert(const char * szFile, int iLine, const char * szExpr) Line 9989    C++\n```\n\nThe function then returns zero, which propagates back to _DbgBreakCheck(), which calls TerminateProcess().\n\n(Apparently we used to always tell the caller to break, but that is #if 0'ed for some reason:\n\n```\n    case 0:\n#if 0\n        // The message box was not displayed. Tell caller to break.\n        return true;\n#endif\n```\n\n)\n\nThis hampers JIT team productivity because:\n1. it prevents using a just-in-time debugger,\n2. it requires always setting a breakpoint on clrjit.dll!assertAbort() or similar, instead of using the existing message box mechanism.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5524/comments",
    "author": "BruceForstall",
    "comments": [
      {
        "user": "BruceForstall",
        "created_at": "2016-04-07T23:27:06Z",
        "body": "@jkotas @janvorli Maybe one of you know about this, in particular about this code:\n\n```\n    // Some CoreSystem OSs will support MessageBoxW via an extension library. The following technique is what\n    // was recommeded by Philippe Joubert from the CoreSystem team.\n    HMODULE hGuiExtModule = WszLoadLibrary(W(\"ext-ms-win-ntuser-gui-l1\"), NULL, 0);\n```\n"
      },
      {
        "user": "janvorli",
        "created_at": "2016-04-08T00:32:59Z",
        "body": "I have tried to load that library just using a simple C++ app on Windows and it has also failed. But it seems that we have the name wrong. If I try to load ext-ms-win-ntuser-gui-l1**-1-0**, then it works.\nBut I am not an expert on the contract dlls, so I don't know if adding the -1-0 is future proof.\n@jkotas any idea on this?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-04-08T15:04:31Z",
        "body": "We should delete the apiset code and always load user32, even for CoreCLR. user32 is available on all OS SKUs where it makes sense to display message box.\n"
      },
      {
        "user": "tishion",
        "created_at": "2016-04-13T07:51:09Z",
        "body": "I think this is obviously incorrect usage of windows API. Although windows introduced api-set schema from windows 7, the upper layer application should still use APIs from win32 subsystem modules. Those modules with prefix API-MS-WIN or EXT-MS-WIN contain only API redirection information. Each of these modules is a collection of the APIs within the same functional category. But the real implementations of these APIs are still reside in the win32 subsystem modules(kernel32, kernelbase, user32 and gdi32 etc.)\nSo this code:\n\n> HMODULE hGuiExtModule = WszLoadLibrary(W(\"ext-ms-win-ntuser-gui-l1\"), NULL, 0);\n\nwill not work on any desktop version of windows.\n\nActually these api sets are used for windows mincore internally, not for developers to use directly.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-04-13T10:47:58Z",
        "body": "> Actually these api sets are used for windows mincore internally, not for developers to use directly.\n\nThat's not quite true, universal apps actually link directly to api sets. And AFAIR apps intended to run on Nano server do the same thing. Maybe they were initially intended to be used internally but that's no longer the case. And the only reason why \"normal\" desktop apps don't usually use these api sets is that some/all of these api sets do no exist on earlier version of Windows.\n\nBut @jkotas is right, you only want this particular message box in a classic desktop environment and such an environment will have user32.dll for the foreseeable future. Using the ntuser contract in this case it's just unnecessary complication.\n"
      }
    ]
  },
  {
    "number": 5474,
    "title": "Remove UseRoslynCompiler from build commands",
    "created_at": "2016-03-31T20:18:33Z",
    "closed_at": "2020-01-30T23:29:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5474",
    "body": "With dotnet/coreclr#4024, `UseRoslynCompiler` should no longer be necessary, but it's still used, mostly from build commands:\n\n```\n$ git grep -n UseRoslynCompiler\nbuild.cmd:23::: The UseRoslynCompiler variable is used by src\\mscorlib\\GenerateCompilerResponseFile.targets.\nbuild.cmd:242:set UseRoslynCompiler=true\nbuild.sh:257:    $__ProjectRoot/Tools/corerun \"$__MSBuildPath\" /nologo \"$__ProjectRoot/build.proj\" /verbosity:minimal \"/fileloggerparameters:Verbosity=normal;LogFile=$__LogsDir/MSCorLib_$__BuildOS__$__BuildArch__$__BuildType.log\" /t:Build /p:__BuildOS=$__BuildOS /p:__BuildArch=$__BuildArch /p:__BuildType=$__BuildType /p:__IntermediatesDir=$__IntermediatesDir /p:UseRoslynCompiler=true /p:BuildNugetPackage=false /p:UseSharedCompilation=false ${__SignTypeReal}\nbuild.sh:303:    $__ProjectRoot/Tools/corerun \"$__MSBuildPath\" /nologo \"$__ProjectRoot/src/.nuget/Microsoft.NETCore.Runtime.CoreCLR/Microsoft.NETCore.Runtime.CoreCLR.builds\" /verbosity:minimal \"/fileloggerparameters:Verbosity=normal;LogFile=$__LogsDir/Nuget_$__BuildOS__$__BuildArch__$__BuildType.log\" /t:Build /p:__BuildOS=$__BuildOS /p:__BuildArch=$__BuildArch /p:__BuildType=$__BuildType /p:__IntermediatesDir=$__IntermediatesDir /p:UseRoslynCompiler=true /p:BuildNugetPackage=false /p:UseSharedCompilation=false\ntests/buildtest.cmd:153:set UseRoslynCompiler=true\ntests/override.targets:7:  <Import Project=\"roslyn.xplat.targets\" Condition=\"'$(OsEnvironment)'=='Unix' and '$(UseRoslynCompiler)'=='true'\" />\ntests/runtest.cmd:108:set UseRoslynCompiler=true\n```\n\nAll those usages should be removed.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5474/comments",
    "author": "svick",
    "comments": [
      {
        "user": "jamesqo",
        "created_at": "2016-04-03T22:04:25Z",
        "body": "@jkotas I'm willing to take this up! Will submit a PR within a few hours.\n"
      }
    ]
  },
  {
    "number": 16844,
    "title": "Calling EventSource.WriteEvent(int eventId, string arg1, string arg2) throws an ArgumentNullException",
    "created_at": "2016-03-29T23:12:38Z",
    "closed_at": "2020-01-31T11:02:44Z",
    "labels": [
      "bug",
      "area-System.Diagnostics.Tracing",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16844",
    "body": "I'm calling the method EventSource.WriteEvent(int eventId, string arg1, string arg2) and arg2 is a string with 90947 characters. It throws the following exception:\n\nException thrown: 'System.ArgumentNullException' in mscorlib.ni.dll\nAdditional information: Value cannot be null.\n\n{\"Value cannot be null.\\r\\nParameter name: format\"}\n\n```\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\n   at System.String.Format(IFormatProvider provider, String format, Object[] args)\n   at System.Environment.GetResourceString(String key, Object[] values)\n   at System.Diagnostics.Tracing.EventSource.ThrowEventSourceException(String eventName, Exception innerEx)\n   at System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(Int32 eventId, Guid* relatedActivityId, Int32 eventDataCount, EventData* data)\n   at System.Diagnostics.Tracing.EventSource.WriteEvent(Int32 eventId, String arg1, String arg2)\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16844/comments",
    "author": "sleimanzublidi",
    "comments": [
      {
        "user": "davmason",
        "created_at": "2016-03-31T19:02:38Z",
        "body": "@sleimanzublidi  - I assume this only happens when you are collecting via ETW. I haven't had a chance to debug this yet, but it is almost certainly because you're exceeding the capacities of ETW - you are limited to 64 KB of data in an event and your string is too big. It shouldn't matter if you are using EventListeners, there isn't a limitation on size there.\n\nThis is clearly an issue with how we handle this failure - I need to investigate why EventSource is failing and not providing a useful error message, but in the meantime you can unblock yourself by making sure that your strings don't exceed the capacity of ETW.\n"
      },
      {
        "user": "lt72",
        "created_at": "2016-05-05T22:09:08Z",
        "body": "This does not make the bar for RTM as it is mostly a cosmetic issue about how error is presented, given that ETW would not be able to handle such amount of data anyway.\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-03-02T21:51:30Z",
        "body": "Next step: Debug the failure, propose a fix."
      },
      {
        "user": "brianrob",
        "created_at": "2018-03-22T20:05:00Z",
        "body": "I put together a quick test for this and it did not throw.  Instead, it wrote an EventSourceMessage into the trace that writing the event failed.  Here is the test case:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Text;\r\n\r\nnamespace eventsource_hugeevent\r\n{\r\n    [EventSource]\r\n    class MySource : EventSource\r\n    {\r\n        public static MySource Log = new MySource();\r\n\r\n        private MySource()\r\n            : base()\r\n        {\r\n        }\r\n\r\n        [Event(1)]\r\n        public void SendEvent(string s1, string s2)\r\n        {\r\n            WriteEvent(1, s1, s2);\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Building a very large string.\");\r\n            int stringSize = 90947;\r\n            StringBuilder builder = new StringBuilder(stringSize);\r\n            for(int i=0; i<stringSize; i++)\r\n            {\r\n                builder.Append('A');\r\n            }\r\n            Console.WriteLine(\"Writing an event with a very large string.\");\r\n            MySource.Log.SendEvent(\"Foo\", builder.ToString());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nClosing this since this no longer repros."
      }
    ]
  },
  {
    "number": 16816,
    "title": "Need tests for full-duplex Sockets behavior",
    "created_at": "2016-03-24T16:31:55Z",
    "closed_at": "2020-01-31T11:01:25Z",
    "labels": [
      "area-System.Net.Sockets",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16816",
    "body": "dotnet/corefx#7184 fixes a problem we missed in the Sockets tests because we do not have tests which do concurrent sends _and_ receives on a single socket.  This is a very common usage, and we should have test coverage for it.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16816/comments",
    "author": "ericeil",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2019-09-10T21:33:04Z",
        "body": "We have coverage in HTTP/2 (higher level)."
      }
    ]
  },
  {
    "number": 5416,
    "title": "Support multi-dim arrays with the InitializeArray intrinsic",
    "created_at": "2016-03-21T16:47:08Z",
    "closed_at": "2020-01-30T23:26:30Z",
    "labels": [
      "help wanted",
      "area-CodeGen-coreclr",
      "optimization"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5416",
    "body": "`Compiler::impInitializeArrayIntrinsic` in `jit/importer.cpp` has an early out for multi-dimensional arrays.\n\n``` cpp\n// In order to simplify the code, we won't support the multi-dim\n// case.  Instead we simply return NULL, and the caller will insert \n// a run-time call to the helper.  Note that we can't assert\n// failure here, because this is a valid case.\n```\n\nIt would be nice if RyuJIT supported this. It would bring it to parity with the C++ codegen backend\n used for .NET Native for UWP apps.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5416/comments",
    "author": "MichalStrehovsky",
    "comments": [
      {
        "user": "MichalStrehovsky",
        "created_at": "2016-03-21T16:49:13Z",
        "body": "If the @dotnet/jit-contrib team agrees, we might want to tag this as \"up-for-grabs\". From my uneducated look, this doesn't seem too difficult to implement.\n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2016-03-21T18:26:30Z",
        "body": "@dotnet/jit-contrib\n"
      },
      {
        "user": "cmckinsey",
        "created_at": "2016-03-21T22:06:24Z",
        "body": "Sounds like a good idea. \"Up for grabs\" sounds right without a pressing customer scenario and test case to justify doing this work sooner. Is there a particular test case from .NET native UWP where you noticed this missing with RyuJIT?\n"
      },
      {
        "user": "CarolEidt",
        "created_at": "2016-03-21T22:20:44Z",
        "body": "I think \"up for grabs\" sounds good, though it would probably be a non-trivial work item for someone not very familiar with the JIT. That said, I'm not sure there are other, more accessible, work items to designate as \"up for grabs\".\n"
      },
      {
        "user": "MichalStrehovsky",
        "created_at": "2016-03-21T22:21:48Z",
        "body": "I noticed it on CoreRT. The .NET Native base class library doesn't have a fallback implementation of InitializeArray and relies on codegen to always expand it. A general purpose fallback implementation for a minimal runtime like CoreRT is relatively costly to implement (both in terms of size on disk hit from generating supporting data structures, and the amount of work to actually do it). We never had the need for it on .NET Native for UWP.\n\nThat said, there is a workitem to implement it on CoreRT (dotnet/corert#364), but codegen expansion will always be better.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-03-22T09:34:19Z",
        "body": "An up-for-grabs JIT issue? I'll take a look as soon as I have some time :)\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-03-23T21:31:46Z",
        "body": "I've put together a PR that adds support for multi-dimensional arrays that have all lower bounds = 0. It's not done yet but it seems to work fine with an example I tested:\n\n``` C#\nint[,] a = new int[,] { { 1, 2, 3 }, { 4, 3, 4 }, { 4, 5, 6 }, { 1, 2, 3 } };\n```\n\ngenerates\n\n```\n       48B972EE27E0FD7F0000 mov      rcx, 0x7FFDE027EE72\n       BA02000000           mov      edx, 2\n       41B804000000         mov      r8d, 4\n       41B903000000         mov      r9d, 3\n       E8D0F9D05E           call     CORINFO_HELP_NEW_MDARR\n       48BA582559A311020000 mov      rdx, 0x211A3592558\n       4883C020             add      rax, 32\n       C4E17A6F02           vmovdqu  ymm0, qword ptr [rdx]\n       C4E17A7F00           vmovdqu  qword ptr [rax], ymm0\n       C4E17A6F4210         vmovdqu  ymm0, qword ptr [rdx+16]\n       C4E17A7F4010         vmovdqu  qword ptr [rax+16], ymm0\n       C4E17A6F4220         vmovdqu  ymm0, qword ptr [rdx+32]\n       C4E17A7F4020         vmovdqu  qword ptr [rax+32], ymm0\n```\n\nThe question is... is it reasonable to compute the pointer to the array data by using a `GT_ADD(TYP_REF, TYP_I_IMPL) -> TYP_BYREF` node? Using a `GenTreeArrElem` node would work but it only supports arrays up to rank 3 and generates a lot of code.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-04-14T21:17:33Z",
        "body": "@MichalStrehovsky Do you think it's worth supporting arrays with lower bounds != 0? C# doesn't directly support such arrays so the compiler will never generate a call to `InitializeArray`.\n"
      },
      {
        "user": "MichalStrehovsky",
        "created_at": "2016-04-14T22:03:58Z",
        "body": "> Do you think it's worth supporting arrays with lower bounds != 0? C# doesn't directly support such arrays \n\nC# doesn't, but there could be a different compiler that does support it (VB used to allow that, but now it screams at me when I try anything but 0, so I guess they dropped it).\n\nThat said, .NET Native currently doesn't support non-zero lower bounds and since I'm a .NET Native guy, I don't have concerns about not supporting it in the codegen.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2016-04-15T20:40:16Z",
        "body": "OK, I ended up adding support for such arrays anyway. The whole thing is trivial anyway except the IL tests and the pesky x86 call arg ordering. I'll have it ready for review by Monday, assuming that anyone from the JIT team has time for review...\n"
      }
    ]
  },
  {
    "number": 16689,
    "title": "Investigate failures when DiagnosticSource tests are run concurrently ",
    "created_at": "2016-03-14T20:19:09Z",
    "closed_at": "2020-01-31T10:55:09Z",
    "labels": [
      "bug",
      "area-System.Diagnostics.Tracing",
      "disabled-test",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16689",
    "body": "Currently there are failures when we run allow the DiagnosticSource tests to run concurrently with one another.  This suggests there may be bugs in the implementation. \n\nTo repro  remove the assembly directive in DiagnosticSourceEventSourceTests.cs \n\nAlso see the TODO in the AllSubscriberStress test case.  \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16689/comments",
    "author": "vancem",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-03-02T21:47:50Z",
        "body": "@vancem says there is probably real bug.\r\n\r\nNext step: Run the tests heavily in parallel and investigate failures, root-cause.\r\nComplexity: Medium (threading, timing issues)"
      }
    ]
  },
  {
    "number": 16675,
    "title": "ValidationAttribute _errorMessageResourceAccessor does not support UWP style Resw resources",
    "created_at": "2016-03-11T17:10:32Z",
    "closed_at": "2020-01-31T10:54:24Z",
    "labels": [
      "api-needs-work",
      "area-System.ComponentModel.DataAnnotations",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16675",
    "body": "The ValidationAttribute needs to be updated to include support for UWP style Resw resource files that do not generate a C# code file with static properties to represent the resources in the Resw file.  It might need a new property to allow the developer to specify the `Windows.ApplicationModel.Resources.ResourceLoader` instance to use and then specify the ResourceKey.  Then just add an if block in the \"private void SetupResourceAccessor(){...}\" method to setup the \"_errorMessageResourceAccessor\" delegate to use the new ResourceLoader class to get the resource using the specified ResourceKey.  Something like:\n\n```\n_errorMessageResourceAccessor = delegate { return _theResourceLoaderToUse.GetString(_theResourceKey); };\n```\n\nWhere \"_theResourceLoaderToUse\" and \"_theResourceKey\" are internal properties set by the developer.\n\nAnd, instead of code like this:\n\n```\n[Required(ErrorMessageResourceType = typeof(Resources.Strings), ErrorMessageResourceName = \"EmailInvalidMessage\")]\n```\n\nWe use code like this:\n\n```\n[Required(ErrorMessageResourceLoaderDelegate = delegate { return Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView(); }, ErrorMessageResourceName = \"EmailInvalidMessage\")]\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16675/comments",
    "author": "TradeArcher2020",
    "comments": [
      {
        "user": "divega",
        "created_at": "2017-02-10T18:29:42Z",
        "body": "Data Annotations Triage: The scenario looks valid, however we believe the proposed solution has several issues and would be insufficient, e.g.:\r\n- We are not aware of a way to pass a delegate directly to an attribute like this\r\n- The implementation of `ValidationAttribute` assumes `_errorMessageResourceType` will contain a property named after the resource rather than a `GetString()` method like ResourceLoader has.\r\n\r\nThere is probably value in enabling a more general way to specify how to obtain resource strings for validation attributes that covers this scenario. This will require a bit of design. \r\n\r\nIn the meanwhile it is possible to copy a .resx file from a different project into a UWP application and use it as in any other application.\r\n\r\ncc @lajones @rowanmiller "
      },
      {
        "user": "lajones",
        "created_at": "2017-04-18T22:52:35Z",
        "body": "We are not planning on working on this. We would consider a PR, but we don't think the above approach (passing a delegate to the attribute) will work. At the moment we look for a property on a type. One alternative approach might be to recognize different patterns e.g. an Indexer property. You would then need an adapter to take the result of `.resw` files which results in a class with index properties."
      },
      {
        "user": "ajcvickers",
        "created_at": "2019-02-22T23:42:40Z",
        "body": "Closing since we do not plan  to implement this."
      }
    ]
  },
  {
    "number": 16652,
    "title": "Improve negative tests in System.Globalization.Calendars",
    "created_at": "2016-03-09T18:30:16Z",
    "closed_at": "2020-01-31T10:53:15Z",
    "labels": [
      "area-System.Globalization",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16652",
    "body": "### Context\n\nI have done work in dotnet/corefx#6733 for consolidating common negative tests for Calendars exposed in corefx. The implementation is generic, and should support all calendars.\n### Todo\n\nThere are some issues to be investigated:\n- [x] JapenseLunisolarCalendar is not supported. This is because the implementation calculates that the `MaximumCalendarYearInEra(new JapaneseLunisolarCalendar(), 3)` is 1, not as 64 (IIRC) expected. This can be fixed by changing the code from\n  `return calendar.GetYear(calendar.ToDateTime(1, 1, 1, 0, 0, 0, 0, era + 1).AddDays(-1)) + 1;` to `return calendar.GetYear(calendar.ToDateTime(1, 1, 1, 0, 0, 0, 0, era + 1).AddMonths(-1)) + 1;`, but this reduces the versatility of existing tests.\n- [ ] `GetDayOfWeek_Invalid` should not be tested for Lunar and lunarsolar calendars, as the method doesn't throw on these calendars. There is no way in corefx to check if a calendar is lunarsolar\n- [ ] `GetEra_Invalid` throws an exception for most calendars, but not HebrewCalendar, TaiwanLunisolarCalendar and JapaneseLunisolarCalendar. Maybe this is a similar cause from the previous point\n### Further ideas\n\nSome further ideas that are nice but not so important\n- Test each year, and invalid months outside the max and min month in each year\n- Test each month, and invalid days outside the max and min day in each month\n\n/cc @tarekgh \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16652/comments",
    "author": "hughbe",
    "comments": [
      {
        "user": "hughbe",
        "created_at": "2016-03-13T22:07:28Z",
        "body": "@tarekgh nice one on the Japanese fix - maybe the getera test failures are bugs as well?\n"
      },
      {
        "user": "tarekgh",
        "created_at": "2016-03-14T16:08:41Z",
        "body": "@hughbe  I'll take a look at some point too to make sure all good. \n"
      }
    ]
  },
  {
    "number": 16615,
    "title": "Errors during cross-building NetBSD assemblies",
    "created_at": "2016-03-06T12:24:34Z",
    "closed_at": "2020-01-31T10:51:22Z",
    "labels": [
      "bug",
      "area-Infrastructure-libraries",
      "os-netbsd",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16615",
    "body": "Crossbuilding on Ubuntu:\n\nftp://ftp.netbsd.org/pub/NetBSD/misc/kamil/corefx-crossbuild-netbsd-assemblies-1.txt\n\nSummary:\n\n```\n    24 Warning(s)\n    66 Error(s)\n```\n\n```\nSystem/Diagnostics/ProcessManager.Unix.cs(40,20): error CS0103: The name 'CreateProcessInfo' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ProcessThread.cs(92,38): error CS0103: The name 'PriorityLevelCore' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ProcessThread.cs(98,17): error CS0103: The name 'PriorityLevelCore' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ProcessManager.Unix.cs(49,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'machineName' of 'ProcessManager.GetProcessIds(string)' [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(293,63): error CS0117: 'ProcessManager' does not contain a definition for 'GetModuleInfos' [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(452,42): error CS0103: The name 'ProcessorAffinityCore' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(459,17): error CS0103: The name 'ProcessorAffinityCore' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(856,17): error CS0103: The name 'GetWorkingSetLimits' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(867,13): error CS0103: The name 'SetWorkingSetLimitsCore' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(908,20): error CS1501: No overload for method 'GetProcessesByName' takes 2 arguments [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.cs(932,57): error CS0117: 'ProcessManager' does not contain a definition for 'GetProcessInfos' [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/Process.Unix.cs(337,27): error CS0103: The name 'GetExePath' does not exist in the current context [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(16,24): error CS0649: Field 'ThreadInfo._threadId' is never assigned to, and will always have its default value 0 [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(22,35): error CS0649: Field 'ThreadInfo._threadWaitReason' is never assigned to, and will always have its default value [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(18,22): error CS0649: Field 'ThreadInfo._basePriority' is never assigned to, and will always have its default value 0 [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(21,30): error CS0649: Field 'ThreadInfo._threadState' is never assigned to, and will always have its default value [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(20,25): error CS0649: Field 'ThreadInfo._startAddress' is never assigned to, and will always have its default value [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(17,22): error CS0649: Field 'ThreadInfo._processId' is never assigned to, and will always have its default value 0 [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/Diagnostics/ThreadInfo.cs(19,22): error CS0649: Field 'ThreadInfo._currentPriority' is never assigned to, and will always have its default value 0 [/home/kamil/corefx/src/System.Diagnostics.Process/src/System.Diagnostics.Process.csproj]\nSystem/IO/FileSystemWatcher.cs(158,21): error CS0103: The name 'StopRaisingEvents' does not exist in the current context [/home/kamil/corefx/src/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj]\nSystem/IO/FileSystemWatcher.cs(370,21): error CS0103: The name 'StopRaisingEvents' does not exist in the current context [/home/kamil/corefx/src/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj]\nSystem/IO/FileSystemWatcher.cs(381,21): error CS0103: The name 'FinalizeDispose' does not exist in the current context [/home/kamil/corefx/src/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj]\nSystem/IO/FileSystemWatcher.cs(533,17): error CS0103: The name 'StopRaisingEvents' does not exist in the current context [/home/kamil/corefx/src/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj]\nSystem/IO/FileSystemWatcher.cs(543,13): error CS0103: The name 'StartRaisingEvents' does not exist in the current context [/home/kamil/corefx/src/System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj]\nSystem/Net/NetworkInformation/IPGlobalProperties.cs(17,20): error CS0103: The name 'IPGlobalPropertiesPal' does not exist in the current context [/home/kamil/corefx/src/System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj]\nSystem/Net/NetworkInformation/NetworkInterface.cs(15,20): error CS0103: The name 'NetworkInterfacePal' does not exist in the current context [/home/kamil/corefx/src/System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj]\nSystem/Net/NetworkInformation/NetworkInterface.cs(20,20): error CS0103: The name 'NetworkInterfacePal' does not exist in the current context [/home/kamil/corefx/src/System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj]\nSystem/Net/NetworkInformation/NetworkInterface.cs(27,24): error CS0103: The name 'NetworkInterfacePal' does not exist in the current context [/home/kamil/corefx/src/System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj]\nSystem/Net/NetworkInformation/NetworkInterface.cs(35,24): error CS0103: The name 'NetworkInterfacePal' does not exist in the current context [/home/kamil/corefx/src/System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16615/comments",
    "author": "krytarowski",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2016-03-06T13:00:33Z",
        "body": "This is because you stopped defining TargetsUnknownUnix for NetBSD, as I mentioned in the recent dir.props PR. Now you need to provide NetBSD implementations for these methods rather than relying on the stubs that were being used when that flag was set.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-03-06T13:02:38Z",
        "body": "Yes, I know. I opened this ticket to track the status of cross-building.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-03-06T13:04:21Z",
        "body": "For now I will focus on these tests that already build. Thanks!\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-09-01T12:09:46Z",
        "body": "@krytarowski, just wanted to check in.  How goes your efforts with NetBSD?  Do you want to leave this issue open?\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-09-01T12:37:01Z",
        "body": "I'm blocked by lack of functional process plugin in LLDB - it's taking time as I need to do it myself in my spare time. However I'm preempted right now, may I drop you an E-mail?\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-09-01T12:52:43Z",
        "body": "> may I drop you an E-mail?\n\nSure. stoub at microsoft\n"
      },
      {
        "user": "wtgodbe",
        "created_at": "2018-04-05T21:41:30Z",
        "body": "Closing as a dead issue, @krytarowski please re-open if I'm mistaken"
      }
    ]
  },
  {
    "number": 16558,
    "title": "System.Security.Cryptography.X509Certificates.X509Store hides errors when cert collection is obtained from a closed store",
    "created_at": "2016-03-01T14:06:58Z",
    "closed_at": "2020-01-31T10:48:30Z",
    "labels": [
      "api-approved",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16558",
    "body": "`System.Security.Cryptography.X509Certificates.X509Store` has\n\n```\n     public X509Certificate2Collection Certificates { get {\n```\n\nwhich silently returns an empty collection if the store is not opened. The code to traverse a store looks something like this:\n\n```\n using( var store = new X509Store() ) {\n       store.Open( OpenFlags.ReadOnly );\n       var allCerts = store.Certificates;\n       //traverse allCerts\n }\n```\n\nif `Open()` call is omitted for any reason - \"no problem\", the code works, just looks at empty collection. This is error hiding. `Add()` and `Remove()` don't allow the store to be not opened in advanced. There's no way to check the store is opened. Something like this:\n\n```\n  void traverseCerts( X509Store store ) {\n       var allCerts = store.Certificates;\n       //traverse allCerts\n  }\n```\n\ncannot even check the store is opened - it gets a collection anyway, maybe empty and it's empty maybe because the store is not opened or because the store is indeed empty.\n\nThe same behavior is on desktop. This is extremely inconvenient. A `IsOpened` property is surely needed. Also `Certificates` getter likely needs to throw an exception if the store is not opened in advance.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16558/comments",
    "author": "Dmitry-Me",
    "comments": [
      {
        "user": "bartonjs",
        "created_at": "2016-03-01T14:20:55Z",
        "body": "@Dmitry-Me I agree, but right now Desktop is the spec.  Behavior breaking changes between core and desktop for the same codepath is bad (it makes the code less portable) and breaking changes are pretty hard to do.\n\nBut, maybe your `isOpened` suggestion is a reasonable compromise.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-15T16:13:35Z",
        "body": "I think there are two mitigations we could do.\n1. Add an <b>IsOpen</b> property that would enable helper methods like \"traverseCerts\" to assert that Opened condition.\n2. Add new constructor overloads that perform the open action.\n   \n   ```\n   public X509Store(StoreName storeName, StoreLocation storeLocation, OpenFlags flags)\n   public X509Store(string storeName, StoreLocation storeLocation, OpenFlags flags)\n   ```\n   \n   Just seeing the new overloads in Intellisense should at least prompt a question (uh... what happens if I don't specify how to open), and allows writing new code that avoids the clunky \"explicit call to Open that's never matched with a Close\" pattern.\n\nBoth look pretty trivial to implement.\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-15T16:43:22Z",
        "body": "@AtsushiKan Sounds good, I'll take both :).\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-15T17:52:28Z",
        "body": "Attaching api review proposal and annotating issue as ready for review.\n\n<b>Proposed Api additions to System.Security.Cryptography.X509Certificates.X509Store</b>\n\nTwo new constructor overloads:\n\n```\n    public X509Store(StoreName storeName, StoreLocation storeLocation, OpenFlags flags)\n    public X509Store(string storeName, StoreLocation storeLocation, OpenFlags flags)\n```\n\nOne new property:\n\n```\n    public bool IsOpen { get; }\n```\n\n<b>Rationale</b>\n\nThe current api design adds a extra, mandatory step to reading or writing a store:\n\n```\nusing (X509Store store = new X509Store(name, location))\n{\n     store.Open(flags);   // <-- Ugh.\n     ... do stuff ...\n}\n```\n\nThis is a code pattern that stands out like a bug in a soup bowl, especially since there is no corresponding Close() api (it's handled in the Dispose() method.)\n\nTo add insult to injury, forgetting to call Open() causes X509Store.Certificates to return an empty collection rather than throwing an exception. This makes it that much harder to root-cause the error.\n\nWe cannot fix the api completely but we can add two mitigations:\n\nTwo new constructor overloads:\n\n```\n    public X509Store(StoreName storeName, StoreLocation storeLocation, OpenFlags flags)\n    public X509Store(string storeName, StoreLocation storeLocation, OpenFlags flags)\n```\n\nThese new constructors combine the construction and open in one call. The appearance of these new overloads in Intellisense will help \"advertise\" the issue to those tempted to use the old constructors, and allow new applications to use a more natural code pattern.\n\nAlso, one new property:\n\n```\n    public bool IsOpen { get; }\n```\n\nThis would allow for better transparency into the creation/open/close semantics and allow methods that take previously opened stores to assert and/or validate the requirement that the store be open.\n\n<b>Discussion point</b>\n\nX509Store also contains a nullary constructor (that's equivalent to passing <b>StoreName.My</b>, <b>StoreLocation.CurrentUser</b>) Should we add a X509Store(OpenFlags) overload to correspond to that one too? I'm not sure what purpose the nullary constructor serves so I didn't propose an overload extension here. But I don't have a strong preference either way.\n\nThis also opens up the question of whether to add overloads on 4.6.x for the constructors that we didn't bring over from the full framework:\n\n```\n    public X509Store(StoreLocation storeLocation);\n    public X509Store(StoreName storeName);\n    public X509Store(string storeName);\n```\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-06-23T16:38:23Z",
        "body": "Instead of doing a constructor I think it should be a factory method so this:\n\n``` C#\nusing (X509Store store = new X509Store(name, location))\n{\n     store.Open(flags);   // <-- Ugh.\n     // ... do stuff ...\n}\n```\n\nwould become:\n\n``` C#\nusing (X509Store store = X509Store.Open(name, location))\n{\n     // ... do stuff ...\n}\n```\n\nI think also adding `IsOpen` is a good thing though.\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-23T16:46:55Z",
        "body": "@terrajobst Presumably your static Open methods take the OpenFlags value which is what's being proposed to add to the ctor? :)\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-06-23T18:59:06Z",
        "body": "@bartonjs Yep :-)\n\nThe key point is that I don't think folks would expect that a ctor has a side effect, such as opening it.\n"
      },
      {
        "user": "Dmitry-Me",
        "created_at": "2016-06-24T08:42:25Z",
        "body": "@terrajobst However a `System.IO.FileStream` constructor opens a file and everyone's okay with that.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-06-24T14:58:24Z",
        "body": "The OpenFlags parameter makes the intention pretty clear, in my opinion. It actually feels more surprising that the existing constructors don’t open the store.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-16T18:32:18Z",
        "body": "Next step: @bartonjs needs to provide the (pre-approved) API proposal.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T19:01:48Z",
        "body": "@bartonjs do you have timeline for the API proposal?"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-11-28T19:38:37Z",
        "body": "# API Change\r\n```diff\r\n    public sealed partial class X509Store : System.IDisposable\r\n    {\r\n        public X509Store() { }\r\n        public X509Store(System.IntPtr storeHandle) { }\r\n        public X509Store(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) { }\r\n        public X509Store(System.Security.Cryptography.X509Certificates.StoreName storeName) { }\r\n        public X509Store(System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) { }\r\n+#if netcoreapp11\r\n+       public X509Store(System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.OpenFlags flags) { }\r\n+#endif\r\n        public X509Store(string storeName) { }\r\n        public X509Store(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) { }\r\n+#if netcoreapp11\r\n+       public X509Store(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.OpenFlags flags) { }\r\n+#endif\r\n        public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get { throw null; } }\r\n+#if netcoreapp11\r\n+      public bool IsOpen { get { throw null; } }\r\n+#endif\r\n        public System.Security.Cryptography.X509Certificates.StoreLocation Location { get { throw null; } }\r\n        public string Name { get { throw null; } }\r\n        public System.IntPtr StoreHandle { get { throw null; } }\r\n        public void Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }\r\n        public void AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { }\r\n        public void Close() { }\r\n        public void Dispose() { }\r\n        public void Open(System.Security.Cryptography.X509Certificates.OpenFlags flags) { }\r\n        public void Remove(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }\r\n        public void RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { }\r\n}\r\n```\r\n\r\n# Test requirements\r\n\r\n* Ensure that when using the new ctors that IsOpen starts as true.\r\n* `new X509Store(Guid.NewGuid().ToString(\"N\"), StoreLocation.CurrentUser, ReadOnly | ExistingOnly)` should throw\r\n* Old ctors `IsOpen` is false.\r\n* IsOpen is false after calling Close\r\n* If dotnet/corefx#12223 has added a framework for creating temporary stores to modify them then this should create/open a new store, add some certs to it, open the store again using one of the new ctors, and ensure that the Certificates property enumerates values correctly (making sure to dispose the results to avoid test finalization)"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-28T21:18:54Z",
        "body": "Thanks! :)\r\nNow it is up for grabs if anyone wants to implement the API"
      }
    ]
  },
  {
    "number": 16476,
    "title": "In SortedSet replace log2 function with Math.Log(x, 2)",
    "created_at": "2016-02-26T04:47:14Z",
    "closed_at": "2020-01-31T10:44:40Z",
    "labels": [
      "enhancement",
      "area-System.Collections",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16476",
    "body": "I did a test and 1 + (int) Math.Log(x, 2) was slightly faster than the implementation of the private static int log2(int value) function.\n1. Replaces all occurrences of log2 with Math.Log(x,2).\n2. Remove the log2 function.\n\nNote: it's odd that to get the same results as log2 I had to use, \"1 + (int)Math.Log(value, 2)\". So after this change the way log2 is used might want to be looked over.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16476/comments",
    "author": "SunnyWar",
    "comments": [
      {
        "user": "hughbe",
        "created_at": "2016-04-28T07:44:47Z",
        "body": "I'll take a look at this and submit a PR if there is an improvement or no change in performance\n\n@sunnywar do you have any perf data (I know this was opened 2 months ago, sorry) \n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-04-28T07:47:34Z",
        "body": "Also it seems like the current implementation is quite efficient - as Math has a signature of `log(double, double)` and has more branches such as checking for `double.NaN`\n"
      },
      {
        "user": "SunnyWar",
        "created_at": "2016-04-28T18:06:19Z",
        "body": "I'll see if I can dig up the numbers. \n\n@hughbe My assumption is the corefx functions should be preferred over \"roll your own\". If you can write an alternative that is significantly faster and just as safe, that indicates a performance bug. So when I see alternative implementations in corefx for functions that also lives in corefx, it makes me wonder. Either the developer didn't know about the Math library, knew about it but decided to ignore it out of hubris, or the developer determined that Math.Log didn't meet the needs of SortedSet. Only in the last case are they justified in making a custom implementation...and then they should have filed a bug against Math.Log, the compiler, or both.\n"
      },
      {
        "user": "SunnyWar",
        "created_at": "2016-04-28T22:06:41Z",
        "body": "Math.Log: Elapse: 00:01:32.1837385\nlog2: Elapse: 00:01:58.0396165\n\nI calculated all the integers from 0-int.MaxValue. The difference is times are so close there's no reason to keep a custom function instead of using Math.Log\n"
      },
      {
        "user": "DenisIstomin",
        "created_at": "2016-08-11T17:08:28Z",
        "body": "Made some tests:\n\n``` ini\n\nHost Process Environment Information:\nBenchmarkDotNet=v0.9.8.0\nOS=Windows\nProcessor=?, ProcessorCount=2\nFrequency=2435497 ticks, Resolution=410.5938 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [AttachedDebugger] [RyuJIT]\nGC=Concurrent Workstation\nJitModules=?\ndotnet cli version: 1.0.0-preview2-003121\n\nType=Perf  Mode=Throughput  Toolchain=Core  \nGarbageCollection=Concurrent Workstation  \n\n```\n1. int.MaxValue\n\n```\nMethod |     Median |    StdDev |\n------ |----------- |---------- |\n  log2 | 21.1544 ns | 1.2613 ns |\n  Math | 36.6452 ns | 2.9852 ns |\n```\n1. Loop for numbers from 1 to 10 000 000\n\n```\nMethod |      Median |     StdDev |\n------ |------------ |----------- |\n  log2 | 164.2802 ms |  4.8751 ms |\n  Math | 377.4220 ms | 11.2805 ms |\n```\n\nTested Release version on VM with Windows 10 using BenchmarkDotNet library.\nCurrent realization has better performance.\n@SunnyWar, could you describe your testing scenario?\n"
      },
      {
        "user": "ianhays",
        "created_at": "2016-09-28T21:51:51Z",
        "body": "Closing this as the more detailed results (and looking through the code) indicate the current approach is faster. We can re-open in the future if more detailed results showing Math.Log being faster arise.\n"
      }
    ]
  },
  {
    "number": 16467,
    "title": "Consider making helper script flag syntax uniform",
    "created_at": "2016-02-25T20:04:58Z",
    "closed_at": "2020-01-31T10:44:13Z",
    "labels": [
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16467",
    "body": "Just throwing this out there because it's a minor annoyance for me, nothing high priority or workflow-breaking.\n\nThis is referring to the difference between `clean.cmd /b` and `clean.sh -b`. I know these were done to match the usual \"OS standard\" flag syntax, but I think it would be simpler if these were just the same across platforms (i.e. `clean -b` everywhere). I'm often typing the wrong flag after I've been working on one system for a while and then move to another. Additionally, `dotnet` has just made all systems use the \"hypen-flag\" syntax instead of allowing \"slash-syntax\" on Windows, and it seems to work fine there.\n\nAnyone else feel the same way? I'm happy to adjust to this if nobody else is having the same troubles :smile: .\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16467/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2016-02-26T03:13:46Z",
        "body": "maybe just make the windows version work with both /b and -b syntax.\n"
      },
      {
        "user": "ghost",
        "created_at": "2016-02-27T11:50:32Z",
        "body": ":+1: \n\nLike many other applications, `node.js`, its package manager `npm` and all the packages follow the Unix conversion uniformly everywhere (including Windows): double hyphen `--` for full option name and single hyphen `-` for a single letter alias: `node test --watch` == `node test -w`.\n\nOn Winodws, the built-in programs on cmd use `/` token for both option names and single letter aliases. In PowerShell, cmdlets use hypen. Although PowerShell has implemented POSIX standard v1 in 2006 and comply with many Unix conventions, it confuses single and double hyphen when it comes to options:\n`rm -Force dir1` (should be double hypen `--Force`, if we go by convention) and `rm -f dir1` is an invalid option (which means in PowerShell, we can't use the most famous `rm -rf` grouping.. which is pain++ over lack of `mkdir -p`)! However, `-fo`, `-for`, `-forc` and `-force` are all valid variants (which is eeeee, painfully ugly).\n\nCertainly not a deal-breaker, but these aspects do carry some weight.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-11T19:28:22Z",
        "body": "These are uniform now, since we moved to the run tool.\n"
      }
    ]
  },
  {
    "number": 5171,
    "title": "Remove XunitWrapper to run tests",
    "created_at": "2016-02-23T18:38:22Z",
    "closed_at": "2020-03-04T04:32:12Z",
    "labels": [
      "test-enhancement",
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5171",
    "body": "replace with \n1. python script : figure out a way to generate report\n2. smarty : port to linux\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5171/comments",
    "author": "rahku",
    "comments": [
      {
        "user": "rahku",
        "created_at": "2016-02-23T18:59:09Z",
        "body": "coreclr repo has its own copy of buildtools files publishtests.targets & tests.targets. They are tests\\publishdependency.targets & tests\\tests.targets. As part of this work try to get rid of coreclr copies of these files and harmonize it with buildtools files. This way helix integration or post-build integration is common for all repos.\n"
      },
      {
        "user": "jkoritzinsky",
        "created_at": "2020-03-04T04:32:12Z",
        "body": "We moved off smarty quite a while ago and (at least for now) are planning on keeping the Xunit wrappers. Closing for now.\r\n\r\ncc @jashook "
      }
    ]
  },
  {
    "number": 5116,
    "title": "Missing -d and -v options on Linux for corerun",
    "created_at": "2016-02-12T07:49:37Z",
    "closed_at": "2021-03-17T05:55:59Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5116",
    "body": "It seems that the -d and -v options (available on Windows) are missing on Linux. Shouldn't they be there as well to ensure consistency between platforms?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5116/comments",
    "author": "manu-st",
    "comments": [
      {
        "user": "benpye",
        "created_at": "2016-02-15T09:25:01Z",
        "body": "Since the Unix style API is exposed everywhere, it might make sense to move away from the Windows specific corerun/coreconsole in favour of the xplat versions, and then there would be no difference in features between the two.\n"
      }
    ]
  },
  {
    "number": 16290,
    "title": "WebUtility.UrlDecode to take StringBuilder",
    "created_at": "2016-02-04T03:05:21Z",
    "closed_at": "2020-01-31T10:34:43Z",
    "labels": [
      "api-suggestion",
      "area-System.Net",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16290",
    "body": "`WebUtility.UrlDecode` could take a string builder; `UrlDecoder` could be a struct and use `System.Buffers` for its arrays for reduced allocations.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16290/comments",
    "author": "benaadams",
    "comments": [
      {
        "user": "jamesqo",
        "created_at": "2016-03-01T01:31:19Z",
        "body": "@davidsh Shouldn't this be labeled as an API addition, since it's adding a new public method to a class?\n"
      },
      {
        "user": "davidsh",
        "created_at": "2016-03-01T01:35:14Z",
        "body": "It is labeled ok right now.  Yes, though, in order to move forward with this issue, a properly filed api addition issue must be generated along with design thoughts on how with would align with .NET Framework existing API patterns.\n"
      },
      {
        "user": "davidsh",
        "created_at": "2018-05-05T19:14:14Z",
        "body": "Span<T>, for example, is the new efficient way to pass in these kind of string types instead of StringBuilder. So, closing this issue.  If there are new API proposals that would benefit from using Span<T> in the WebUtility class, then please open a new API proposal issue."
      }
    ]
  },
  {
    "number": 5020,
    "title": "Assembly::CLRPrivResourceAssembly::QueryInterface() fails to retrieve ICLRPrivResource",
    "created_at": "2016-01-28T09:23:27Z",
    "closed_at": "2020-01-30T23:08:53Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/5020",
    "body": "`Assembly::CLRPrivResourceAssembly::QueryInterface()` is coded such that it returns `E_NOINTERFACE` if `ICLRPrivResource` is requested which is one of the interfaces implemented by the class. The class has this description\n\n```\n// Nested class used to implement ICLRPriv binder related interfaces\n```\n\nso I'd guess it must implement both and must proper retrieve both interfaces. Otherwise either one of those base interfaces must be removed or this magic must be explained.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/5020/comments",
    "author": "Dmitry-Me",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2016-02-03T18:47:56Z",
        "body": "There are many places where the interfaces used internally within the runtime violate COM conventions one way or the other. Cleaning it up is nice to have ... it has also potential to introduce regressions.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-02-03T18:50:13Z",
        "body": "dotnet/runtime#4990 is another instance.\n"
      },
      {
        "user": "tishion",
        "created_at": "2016-04-26T01:08:39Z",
        "body": "PR dotnet/coreclr#4562 \n"
      }
    ]
  },
  {
    "number": 16187,
    "title": "Remove System.Reflection.Extensions dependency on System.Reflection.TypeExtensions",
    "created_at": "2016-01-21T19:26:56Z",
    "closed_at": "2020-01-31T10:29:35Z",
    "labels": [
      "bug",
      "area-System.Reflection",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16187",
    "body": "This is an issue based on comments from @ericstj on PR dotnet/corefx#5542 . \nIt is not OK to reference public surface area that is only available in the implementation assembly. Can we either 1) share this source or 2) create a public API?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16187/comments",
    "author": "venkat-raman251",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-02-28T23:51:23Z",
        "body": "@DnlHarvey can you please check if this is still valid?"
      },
      {
        "user": "ghost",
        "created_at": "2018-09-11T22:21:20Z",
        "body": "Even this is still true, \"public surface area that is only available in the implementation assembly\" isn't applicable any more - we have targeting packs for CoreLib code."
      }
    ]
  },
  {
    "number": 16176,
    "title": " EqualityComparerForDouble and EqualityComparerForSingle use the == operator but should use Equals",
    "created_at": "2016-01-20T18:58:06Z",
    "closed_at": "2020-01-31T10:28:54Z",
    "labels": [
      "bug",
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16176",
    "body": "The class should be calling the Equals(System.Double) method on System.Double because == has the wrong semantic for NaN.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16176/comments",
    "author": "AlexGhiondea",
    "comments": [
      {
        "user": "AlexGhiondea",
        "created_at": "2016-11-23T18:45:14Z",
        "body": "The fix for this would need to go in the coreclr repo. The PR dotnet/corefx#5619 was fixing this for CoreRT."
      },
      {
        "user": "stephentoub",
        "created_at": "2017-03-10T15:53:43Z",
        "body": "@AlexGhiondea, is this actually an issue on CoreCLR?  `EqualityComparer<double>.Default` will return a `GenericEqualityComparer<double>`, which uses Equals, since that's what's available via the `IEquatable<T>` interface."
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2017-03-14T04:14:36Z",
        "body": "@stephentoub it is possible that this was only an issue in N and not in Core."
      }
    ]
  },
  {
    "number": 16163,
    "title": "Clean up new netcore50 code in System.Net.Http, and reconcile with existing code",
    "created_at": "2016-01-19T21:06:48Z",
    "closed_at": "2020-01-31T10:28:16Z",
    "labels": [
      "enhancement",
      "area-System.Net.Http",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16163",
    "body": "See the list of files in the System.Net.Http project file under the netcore50 TargetGroup:\n\n``` XML\n<ItemGroup Condition=\"'$(TargetGroup)' == 'netcore50'\">\n    <Compile Include=\"$(CommonPath)\\System\\NotImplemented.cs\">\n      <Link>Common\\System\\NotImplemented.cs</Link>\n    </Compile>\n    <!-- TODO: reconcile with Open\\src\\Common, see issue #REPLACE_ME -->\n    <Compile Include=\"$(CommonPath)\\System\\Net\\HttpVersion.cs\">\n      <Link>Common\\System\\Net\\HttpVersion.cs</Link>\n    </Compile>\n      <Compile Include=\"$(CommonPath)\\System\\StringExtensions.cs\">\n      <Link>Common\\System\\StringExtensions.cs</Link>\n    </Compile>\n    <Compile Include=\"netcore50\\System\\Net\\cookie.cs\" />\n    <Compile Include=\"netcore50\\System\\Net\\cookieexception.cs\" />\n    <Compile Include=\"netcore50\\System\\Net\\CookieHelper.cs\" />\n    <Compile Include=\"netcore50\\System\\Net\\HttpHandlerToFilter.cs\" />\n    <Compile Include=\"netcore50\\System\\Net\\HttpClientHandler.cs\" />\n    <Compile Include=\"netcore50\\System\\Net\\RtcRequestFactory.cs\" />\n  </ItemGroup>\n```\n\nAdditionally, the code could use a bit of cleanup in general. Things like field names, brace usage, comment formatting, etc.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16163/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2017-02-09T19:28:14Z",
        "body": "This should be actionable once we have UWP testing back in place.\r\nEstimation: Medium complexity"
      },
      {
        "user": "CIPop",
        "created_at": "2017-07-07T19:53:17Z",
        "body": "@davidsh I remember a PR where you were changing this. Is it now fixed?"
      },
      {
        "user": "davidsh",
        "created_at": "2017-07-07T19:55:57Z",
        "body": "Fixed with dotnet/corefx#21905"
      }
    ]
  },
  {
    "number": 16050,
    "title": "Implement IEquatable interface on System.Drawing structs",
    "created_at": "2016-01-08T20:05:44Z",
    "closed_at": "2020-01-31T10:22:39Z",
    "labels": [
      "api-approved",
      "area-System.Drawing",
      "disabled-test",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16050",
    "body": "This requires changes to the .NET Full Framework code as well, changes to .NET Core to be made after following up with the desktop release cycles to ensure no breaks happen.\r\n\r\nFollow up from PR dotnet/runtime#14503 \r\n\r\n# Motivation\r\nThese structures all have equality operators, they should also implement the IEquatable interface.\r\n\r\n# Proposed API\r\n\r\n``` C#\r\nnamespace System.Drawing\r\n{\r\n    public struct Color : IEquatable<Color>\r\n    {\r\n        public bool Equals(Color other);\r\n    }\r\n    public struct Point : IEquatable<Point>\r\n    {\r\n        public bool Equals(Point other);\r\n    }\r\n    public struct PointF : IEquatable<PointF>\r\n    {\r\n        public bool Equals(PointF other);\r\n    }\r\n    public struct Rectangle : IEquatable<Rectangle>\r\n    {\r\n        public bool Equals(Rectangle other);\r\n    }\r\n    public struct RectangleF : IEquatable<RectangleF>\r\n    {\r\n        public bool Equals(RectangleF other);\r\n    }\r\n    public struct Size : IEquatable<Size>\r\n    {\r\n        public bool Equals(Size other);\r\n    }\r\n    public struct SizeF : IEquatable<SizeF>\r\n    {\r\n        public bool Equals(SizeF other);\r\n    }\r\n}\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16050/comments",
    "author": "Priya91",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-10T00:15:03Z",
        "body": "Should be simple. We do not see any reason why not to do it, but if someone grabs it, we would first do quick API review.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-22T19:23:48Z",
        "body": "I'll grab this. The API additions would be:\r\n```C#\r\nnamespace System.Drawing\r\n{\r\n    public struct Color : IEquatable<Color>\r\n    {\r\n        public bool Equals(Color other);\r\n    }\r\n    public struct Point : IEquatable<Point>\r\n    {\r\n        public bool Equals(Point other);\r\n    }\r\n    public struct PointF : IEquatable<PointF>\r\n    {\r\n        public bool Equals(PointF other);\r\n    }\r\n    public struct Rectangle : IEquatable<Rectangle>\r\n    {\r\n        public bool Equals(Rectangle other);\r\n    }\r\n    public struct RectangleF : IEquatable<RectangleF>\r\n    {\r\n        public bool Equals(RectangleF other);\r\n    }\r\n    public struct Size : IEquatable<Size>\r\n    {\r\n        public bool Equals(Size other);\r\n    }\r\n    public struct SizeF : IEquatable<SizeF>\r\n    {\r\n        public bool Equals(SizeF other);\r\n    }\r\n}"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-22T20:20:00Z",
        "body": "It's worth noting that it's a compile breaking change to provide some of these due to implicit cast operators. E.g. if we do this to `RectangleF` then calling Equals on it with a Rectangle will cast the argument to RectangleF and then may return true, where currently any rectangle passed would always return false.\r\nThis also means that the `Equals(object)` override would return different results, unless changed to match, which would be surprising. \r\n\r\nBefore:\r\n```C#\r\nvar rectF = new RectangleF(0, 0, 0, 0);\r\nvar rect = new Rectangle(0, 0, 0, 0);\r\nConsole.WriteLine(rectF.Equals(rect)); // false\r\nConsole.WriteLine(rectF.Equals((object)rect); // false\r\n```\r\n\r\nAfter:\r\n```C#\r\nvar rectF = new RectangleF(0, 0, 0, 0);\r\nvar rect = new Rectangle(0, 0, 0, 0);\r\nConsole.WriteLine(rectF.Equals(rect)); // true\r\nConsole.WriteLine(rectF.Equals((object)rect); // false\r\n```\r\n\r\nOne possibility is to only implement `IEquatable` on the non-float structs, as there aren't any implicit operators casting to them."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-23T18:49:05Z",
        "body": "@alexperovich can you please check the proposal when you get a chance?"
      },
      {
        "user": "alexperovich",
        "created_at": "2017-01-23T19:35:09Z",
        "body": "The api looks good to me. I don't think the breaking change is a big problem."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-23T19:40:39Z",
        "body": "@alexperovich please update the top post with final API proposal - API shape, motivation, examples, etc."
      },
      {
        "user": "karelz",
        "created_at": "2017-01-24T18:37:46Z",
        "body": "API review: We already have operator ==, so it makes sense to add `IEquatable<T>`.\r\nValue: Generic constraints `T : IEquatable<T>`.\r\nApproved"
      },
      {
        "user": "akoeplinger",
        "created_at": "2017-01-24T20:06:27Z",
        "body": "@karelz is there already a process for bringing changes like this to a future .NET Standard version?"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-24T20:13:56Z",
        "body": "There's no firm process yet. Being in .NET Standard means that the change has to be also in Desktop and Xamarin - I think that .NET Standard will move as fast as the slowest product. @weshaggard can chime in more ..."
      },
      {
        "user": "akoeplinger",
        "created_at": "2017-01-24T20:26:54Z",
        "body": "Sure, the Xamarin side is why I'm asking, don't want us to be the slowest platform 😄"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-24T20:30:19Z",
        "body": "My guess is that Desktop will be the long-pole - especially given the compat concerns there, etc.\r\nWe track all ports to Desktop via netfx-port-consider. We also discussed today that we should do API diff. The behavioral changes are the more interesting ones though.\r\n\r\nXamarin can either do the same - look at our netfx-port-consider, and/or do API diff. Or rely on the fact that you plan to reuse the entire CoreFX :)"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-01-24T20:57:20Z",
        "body": "As @karelz mentioned we don't have a good process laid out yet. At some point once the netstandard 2.0 work lands we will likely do a diff of what we added in .NET Core and consider them for a new version of netstandard."
      }
    ]
  },
  {
    "number": 16040,
    "title": "Build.sh runs tests that should not be supported",
    "created_at": "2016-01-07T21:05:10Z",
    "closed_at": "2020-01-31T10:22:09Z",
    "labels": [
      "area-Infrastructure-libraries",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16040",
    "body": "Running build.sh on Ubuntu (for example) will run the Microsoft.Win32.Registry tests, as well as a bunch of other inapplicable test projects. It seems that only runtests.sh is actually detecting which projects should be skipped.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16040/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "Priya91",
        "created_at": "2016-03-30T02:57:03Z",
        "body": "This does not repro now.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2016-03-30T06:23:03Z",
        "body": "@priya91 any idea why this isn't any issue any longer?\n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-03-30T23:20:05Z",
        "body": "> any idea why this isn't any issue any longer?\n\nNot sure, why it was even failing in the first place. But now, we do this in buildtools\n\n```\n<PropertyGroup>\n      <TestDisabled Condition=\"'%(UnsupportedPlatformsItems.Identity)' == '$(TargetOS)'\">true</TestDisabled>\n    </PropertyGroup>\n```\n"
      }
    ]
  },
  {
    "number": 16017,
    "title": "System.Buffers configuration and Shared property configuration",
    "created_at": "2016-01-04T22:49:21Z",
    "closed_at": "2020-01-31T10:21:00Z",
    "labels": [
      "api-needs-work",
      "area-System.Buffers",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/16017",
    "body": "The System.Buffers namespace contains an ArrayPool implementation with the following characteristics:\n1) You can create an instance of an ArrayPool<T> with your own configuration\n2) You can use the Shared ArrayPool<T> with pre-set configuration options\n\nFor option 2 above, there are a couple issues; first, the Shared Pool property cannot be changed to be a user-defined type (currently). This means that if a user has a specific Pool for their scenario that is more efficient (in their scenario) than the default, they must handle sharing themselves...which defeats the purpose of the Shared property. The second problem is that if the default pool characteristics work for the consumer's scenario but they need to tweak the configuration values (max buffer size, max number of buffers, etc), there isn't a way to do this. \n\nThese problems are made more difficult by the fact that the framework itself will be using the Shared pool, meaning before any user code runs, the Shared pool will have already been initialized using the hardcoded configuration values.\n\nWe need a solution to \na) Configure the Shared pool before Framework code has a chance to run, specified by the user\nb) allow the Shared pool to be swapped out with a user implementation, preferably before the Framework code has a chance to initialize it\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/16017/comments",
    "author": "jonmill",
    "comments": [
      {
        "user": "terrajobst",
        "created_at": "2016-01-05T01:16:41Z",
        "body": "What is the specific example where the pool needs to use a custom policy? In general, I don't quite like systems with have an open ended policy and yet use centralized sharing. Libraries can never really set the pool, it would be up to the app/app model to initialize it, so general purpose libraries can't really rely on a specific pool pattern.\n\n+@KrzysztofCwalina\n\n>  they must handle sharing themselves...which defeats the purpose of the Shared property.\n\nWhy do you say that? Suppose I'm implementing something like Roslyn, let's call it Froslyn. I need to use buffers for parsing assemblies After some measurement I'm convinced I can provide a better pool than the default. I create a new `static class FroslynMetadataPool`:\n\n``` C#\nstatic class FroslynMetadataBufferPool\n{\n    public static ArrayPool Instance { get; } = new ArrayPool(...);\n}\n```\n\nWhy would that not work?\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2016-01-05T01:18:09Z",
        "body": "@KrzysztofCwalina, I've assigned you and removed the label. Feel free to add it back if you think we've enough information to have a meeting on this.\n"
      },
      {
        "user": "KrzysztofCwalina",
        "created_at": "2016-01-05T18:04:34Z",
        "body": "@terrajobst, this is meant to be used to optimize at the app level. Individual libraries should not be doing it. Ideally, this configuration would be handled by some kind of config system, which we don't really have a general solution for in .net core.\n\n@sokket, could you work with ASP.NET team on a short writeup describing the scenarios. Once we have it, I will flip the lable back to ready for review.\n"
      },
      {
        "user": "benaadams",
        "created_at": "2016-04-19T00:59:07Z",
        "body": "Something in?\n\n``` json\n\"runtimeOptions\": {\n  \"configProperties\": {\n  }\n},\n```\n\nAs the GC uses\n"
      },
      {
        "user": "alexperovich",
        "created_at": "2016-10-21T22:49:52Z",
        "body": "@sokket Are you still working on this?\n"
      },
      {
        "user": "jonmill",
        "created_at": "2016-10-21T22:55:21Z",
        "body": "Nope, I am not\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-08T22:11:53Z",
        "body": "No strong desire to do this from anyone for 10 months. Let's close it.\n\nOverall it is unclear if it is a good idea, however, if there is a good API proposal thought through from all angles (esp. impact on Framework), we're willing to review it - in such case, please reopen the issue or create a new one.\n"
      }
    ]
  },
  {
    "number": 4850,
    "title": "Method not found: 'IntPtr System.Threading.WaitHandle.get_Handle()'.",
    "created_at": "2015-12-20T18:59:43Z",
    "closed_at": "2021-03-05T01:30:07Z",
    "labels": [
      "good first issue",
      "test-bug",
      "help wanted",
      "area-CodeGen-coreclr",
      "JitUntriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4850",
    "body": "Got this message:\n\n```\nUnhandled Exception: System.MissingMethodException: \nMethod not found: 'IntPtr System.Threading.WaitHandle.get_Handle()'.\n```\n\nfor this test on a debug win64 test job:\n\n```\nJIT\\Directed\\pinvoke\\preemptive_cooperative\\preemptive_cooperative.cmd\n```\n\nI'm not sure whether this test is portable or not. For now I'm adding the\ntest but excluding it.\n\r\ncategory:correctness\r\ntheme:testing\r\nskill-level:beginner\r\ncost:small",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4850/comments",
    "author": "richardlford",
    "comments": [
      {
        "user": "RussKeldorph",
        "created_at": "2016-05-22T04:34:49Z",
        "body": "This test relies on kernel32.dll.  It should just be deleted unless it provides valuable coverage.\n"
      },
      {
        "user": "marcusturewicz",
        "created_at": "2020-04-13T10:17:17Z",
        "body": "This file doesn't seem to exist anymore so can this issue be closed?"
      }
    ]
  },
  {
    "number": 15962,
    "title": "TargetingPackReference items show up in VS Solution Explorer",
    "created_at": "2015-12-17T19:28:11Z",
    "closed_at": "2020-01-31T10:18:15Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15962",
    "body": "This has no real negative effect, it's just kind of annoying. We should consider putting the `<InProject>false</InProject>` metadata on the includes, which hides them from the solution explorer.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15962/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2015-12-17T20:54:46Z",
        "body": "Actually this is a bit more annoying when a project needs to reference System.dll. If that is in the Solution Explorer, then none of the source files under the \"System\" folder show up (which is 99% of our source files...) because that node is occupied by the TargetingPackReference item.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2015-12-18T01:01:38Z",
        "body": "For now we should include the TargetingPackReference ItemGroup at the end of the csproj. If we do that, VS will at least show the \"System\" folder node correctly, although it will still show the annoying reference nodes.\n"
      },
      {
        "user": "ericstj",
        "created_at": "2016-03-07T20:14:33Z",
        "body": "Can you use ItemDefinitionGroup to apply <InProject>false</InProject> to all TargetingPackReference items?\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-03-07T20:29:22Z",
        "body": "I can't remember why at this point, but I did look into ItemDefinitionGroup and found that it didn't work for whatever reason. It seemed like VS didn't take that into account when populating the Solution Explorer nodes.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-14T19:26:19Z",
        "body": "Next step: Find out how to make VS to not show them.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-12-12T01:18:35Z",
        "body": "We don't use TargetingPackReference any longer so closing this issue as it isn't relevant any longer. "
      }
    ]
  },
  {
    "number": 15960,
    "title": "String resources need to be configurable on a per-configuration basis",
    "created_at": "2015-12-17T19:15:52Z",
    "closed_at": "2020-01-31T10:18:09Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15960",
    "body": "Right now, string resources are included by default in an assembly if there exists a \"Strings.resx\" file in a \"Resources\" subdirectory under the csproj. All of the string resources in that file are included in the assembly, even if they are not used at all, or if only a subset are used. You can \"opt-out\" in a sense by changing the directory that the resource targets look in for the \"Strings.resx\" file (the `ResourcesSourceOutputDirectory` Property).\n\nThis has worked fine for our projects with a single configuration, or with only a few similar configurations. However, this can cause significant bloat in assemblies which don't need those resources. For example, full-facade projects are generally around 5-6 KB in total size. With unnecessary string resources included, they can easily bloat to 25-30 KB each. To a lesser extent, configurations which only need a subset of the resources are also bloated by having extra strings in them.\n\nIn our internal build, I recall we used text files that allowed condition inclusion/exclusion of certain strings, based on the project's DefineConstants. We might want to look into something similar to that in order to accomodate this.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15960/comments",
    "author": "mellinoe",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-04-18T22:11:31Z",
        "body": "@weshaggard How do you feel about this one right now? I think that many configurations of our libraries are currently shipping with a lot of unnecessary string resources. Most occurrences of this can be fixed by removing all resources (i.e. desktop facades), but some would optimally have more fine-grained control (i.e. use only half of the resources for one configuration, use half for another). I tried to account for this when adding a lot of the facades, but I bet there are still a lot of ones that I missed or that have slipped through otherwise. Do you think this is something we should try to address for RTM, or are we okay with shipping a few extra \"dead resources\" until we can clean it up all at once?\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2016-04-18T23:00:03Z",
        "body": "I wonder if we couldn't figure out a way to always just select the resources that are used for the set of code, perhaps using Roslyn or something. cc @tarekgh \n"
      },
      {
        "user": "tarekgh",
        "created_at": "2016-04-18T23:21:44Z",
        "body": "@weshaggard we need to be careful here as I recall seeing some places that constructing the resource keys on the fly so Roslyn analysis can break such cases. \nI have another open issue which is suggesting tagging the resources to exclude them during the compilation. I think if we do this right, we can have a good solution for this issue. but I don't think this is issue I'll address before RTM. \n"
      },
      {
        "user": "tarekgh",
        "created_at": "2016-04-18T23:27:36Z",
        "body": "by the way, we can use Roslyn analysis to know how much extra resources we are shipping so we can know if we need to fix for the RTM or it can wait. \n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-21T23:40:26Z",
        "body": "We discussed this a bit more today. It doesn't seem very important to fix right now, but like @tarekgh said above, it would be good to get better information on how severe the size bloat is because of this.\r\n\r\nAnother thing that was brought up: with the .NET Standard 2.0 work, we've added a lot of duplicate string resources across assemblies in corefx. Although they may be used in all of the assemblies, they still constitute unnecessary duplication and bloat. A possible solution could be creating a `System.Private.Resources` assembly containing common strings."
      },
      {
        "user": "ViktorHofer",
        "created_at": "2018-08-17T12:44:45Z",
        "body": "I'm not convinced we need to do anything here after we trimmed most of the assemblies and removed dead code / resources. Not sure, but the linker that we now use could also remove additional bloat. Closing for now. Feel free to reopen if you disagree."
      }
    ]
  },
  {
    "number": 15930,
    "title": "Make BufferPool's Shared property Settable",
    "created_at": "2015-12-14T19:27:01Z",
    "closed_at": "2020-01-31T10:16:31Z",
    "labels": [
      "api-needs-work",
      "area-System.Buffers",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15930",
    "body": "To allow for swapping out the Shared instance of the BufferPool, make the Shared property Settable\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15930/comments",
    "author": "jonmill",
    "comments": [
      {
        "user": "aevitas",
        "created_at": "2015-12-15T14:53:00Z",
        "body": "How would a scenario be handled where there are still buffers out in the wild, rented from the initial shared buffer, and the shared buffer pool gets swapped?\n"
      },
      {
        "user": "jonmill",
        "created_at": "2015-12-15T18:39:25Z",
        "body": "Since the BufferPool deals in pure arrays today, it has to be resilient to people passing back invalid data. If a custom pool derives from the base class and swaps out the Shared instance with it's own instance, it will need to sanity check all incoming data to be sure it is valid and can be returned\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-01-04T17:40:50Z",
        "body": "This seems dangerous, as components (including those in corefx) will come to rely on the default behavior provided by the built-in pool.  Why do we want this to be settable?  What scenarios are we trying to enable? \n"
      },
      {
        "user": "aevitas",
        "created_at": "2016-01-04T17:47:30Z",
        "body": "@stephentoub It would make sense if the current `BufferPool` consistently fails to hand out buffers due to the requested buffers being too large or the entire pool being rented out to swap the BufferPool with an instance that supports either larger buffers, or more of them. \n\nI agree though that consistent behaviour between the various pools, if swapping is allowed, should be enforced one way or the other, as well as keeping close track of which instance rented out individual buffers, as not to return them to the wrong pool later down the line.\n"
      },
      {
        "user": "jonmill",
        "created_at": "2016-01-04T19:26:00Z",
        "body": "This is just something @KrzysztofCwalina and I are thinking about to allow overriding the default functionality of the Shared pool. There are a lot of potential issues here and this is not POR by any means yet; it is more a thought for how we can light up this scenario.\n"
      },
      {
        "user": "jonmill",
        "created_at": "2016-01-04T22:51:05Z",
        "body": "This will be discussed via API review here: dotnet/corefx#5182 \n"
      },
      {
        "user": "jonmill",
        "created_at": "2016-01-05T22:39:46Z",
        "body": "Pushing back to RTM since this is not RC2 specific\n"
      },
      {
        "user": "alexperovich",
        "created_at": "2016-10-21T23:01:42Z",
        "body": "Closing in favor of of dotnet/corefx#5182 \n"
      }
    ]
  },
  {
    "number": 15913,
    "title": "Some ValidationAttributes are stateful.",
    "created_at": "2015-12-11T18:54:48Z",
    "closed_at": "2020-01-31T10:15:37Z",
    "labels": [
      "bug",
      "area-System.ComponentModel.DataAnnotations",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15913",
    "body": "CompareAttribute has the property OtherPropertyDisplayName, which is set to the otherProperty value you passed in until you call IsValid, at which point it becomes the other properties actual DisplayName.\n\nRangeAttribute has an overload which takes a type and lets you give it string for Min and Max, however those strings aren't converted until you call FormatErrorMessage.\n\nBoth of these instances of statefulness make the attributes unpredictable and require gross hacks. If for example you call the Minimum property of RangeAttribute before and after calling FormatErrorMessage you might first get \"0\" then 0d (which is not a side effect one would expect without examining the source). Now you have to keep track of whether you've called that or not when looking at Minimum and Maximum so you know what to expect.\n\nI understand that throwing in setters and Attribute constructors is bad, but perhaps the work could be done in the getters so that it's never wrong and any exceptions don't break attribute construction.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15913/comments",
    "author": "ryanbrandenburg",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-15T00:01:35Z",
        "body": "If anyone contributes the PR, we will consider it.\n"
      },
      {
        "user": "divega",
        "created_at": "2017-02-09T21:52:41Z",
        "body": "One possible reason not to do this is compatibility. We are following up trying to figure out a general bar for that. cc @rowanmiller "
      },
      {
        "user": "lajones",
        "created_at": "2017-04-18T22:45:26Z",
        "body": "We think the fix for this would probably consist of replicating the offending stateful members and making sure that the new members state was always the same regardless of what had been called before. The old members would have to be left as is for compatibility reasons."
      },
      {
        "user": "ajcvickers",
        "created_at": "2019-02-22T23:42:11Z",
        "body": "This is not something we plan to implement. However, a 100% non-breaking community contribution would be considered."
      }
    ]
  },
  {
    "number": 15839,
    "title": "Mechanism for reading directly from file to unmanaged memory",
    "created_at": "2015-12-02T23:17:05Z",
    "closed_at": "2020-01-31T10:11:46Z",
    "labels": [
      "api-needs-work",
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15839",
    "body": "System.Reflection.Metadata has an optimization where it reads files small enough to not warrant memory mapping directly into the unmanaged heap (without an intermediate copy on the managed heap). This optimization is done by lighting up on Windows to the native `ReadFile` API. For this to work cross-plat there should be a way to pass unmanaged memory to Stream and have FileStream override it to not involve intermediate copies to managed memory. This could possibly be accomplished via `Span<byte>` support in `Stream` overridden by `FileStream`. \n\ncc @KrzysztofCwalina\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15839/comments",
    "author": "nguerrera",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-10-11T22:23:28Z",
        "body": "We need formal API proposal.\n"
      },
      {
        "user": "nguerrera",
        "created_at": "2018-08-05T16:28:29Z",
        "body": "This is done: \"This could possibly be accomplished via Span<byte> support in Stream overridden by FileStream.\" 🎉 "
      }
    ]
  },
  {
    "number": 4686,
    "title": "Hardware exceptions on FreeBSD always abort",
    "created_at": "2015-11-18T20:09:34Z",
    "closed_at": "2020-01-30T22:53:39Z",
    "labels": [
      "os-freebsd",
      "help wanted",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4686",
    "body": "Even with a try/catch (via the PAL_TRY/PAL_EXCEPT macros) a hardware exception aborts the process when the PAL SEH code (in SEHProcessException) throws the PAL_SEHException created for this h/w signal. It may have something to do with throwing an exception in a signal handler. It was found in the new PAL exception_handling/pal_sxs/test1 test but also happens in the simpler exception_handler/pal_except/test1 (if enabled).  \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4686/comments",
    "author": "mikem8361",
    "comments": [
      {
        "user": "krytarowski",
        "created_at": "2016-02-21T22:38:40Z",
        "body": "I'm experiencing the same behavior on NetBSD. Could you try to prepare a minimalistic and standalone test-case that is supposed to pass on other platforms and fail on BSD? I will take it and investigate.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-02-21T22:39:11Z",
        "body": "Something without usage of PAL.\n"
      },
      {
        "user": "mikem8361",
        "created_at": "2016-02-22T22:06:29Z",
        "body": "This tests hardware and software exceptions across multiple PALs (in different modules).  It would be a lot of work to create a simple test-case that doesn't involve the PAL. \n"
      },
      {
        "user": "mikem8361",
        "created_at": "2016-02-22T22:09:02Z",
        "body": "I didn't mean to add the software exceptions.  palsxs tests hardware exceptions trapped via various signals and that the proper chaining across multiple PALs occurs.  \n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-02-23T21:11:14Z",
        "body": "For now I will leave it as it is, I will be back to it once other parts of dotnet will be ported to NetBSD.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-04-13T01:47:01Z",
        "body": "Fixed by @janvorli in master.\n"
      },
      {
        "user": "krytarowski",
        "created_at": "2016-07-20T07:06:05Z",
        "body": "Should be closed\n"
      }
    ]
  },
  {
    "number": 15498,
    "title": "Add tests for expression interpreter",
    "created_at": "2015-10-20T19:30:52Z",
    "closed_at": "2020-01-31T09:55:12Z",
    "labels": [
      "area-System.Linq.Expressions",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15498",
    "body": "Cross-check expression interpreter against expression compiler by using a catalog of expressions.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15498/comments",
    "author": "bartdesmet",
    "comments": [
      {
        "user": "VSadov",
        "created_at": "2016-11-29T01:21:54Z",
        "body": "@bartdesmet - is this issue still tracking anything in particular?"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-01-22T17:40:53Z",
        "body": "While there are still some small gaps in coverage generally, I think the mechanism for testing both types of compilation for all relevant tests mean this can be closed."
      },
      {
        "user": "stephentoub",
        "created_at": "2019-03-12T01:17:46Z",
        "body": "Addressed."
      }
    ]
  },
  {
    "number": 15486,
    "title": "Many XxxExpression.Update returns different expression for identical children in different collection.",
    "created_at": "2015-10-19T15:30:54Z",
    "closed_at": "2020-01-31T09:54:41Z",
    "labels": [
      "enhancement",
      "area-System.Linq.Expressions",
      "tenet-performance",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15486",
    "body": "According to the documentation:\n\n> If all of the children are the same, it will return this expression.\n\nHowever, only the enumerables themselves are compared, so a different enumeration of the same children will incorrectly return a new expression.\n\nIn particular a `TryExpression` with no catch blocks (valid if the expression has a finally or fault block) must be `Update`d with the empty `Handlers` property it holds fed back to it, rather than `null` or another empty collection of handlers.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15486/comments",
    "author": "JonHanna",
    "comments": [
      {
        "user": "bartdesmet",
        "created_at": "2015-10-19T17:52:53Z",
        "body": "AFAIK, all of the expression nodes with an IEnumerable<T> collection of children simply use a reference equality comparison in the Update method, and never do a SequenceEqual check in an attempt to retain the current node instance. At the very minimum, this should suffice for object.ReferenceEquals(e, visitor.Visit(e)) to hold, such that visiting an expression doesn't cause cloning of any subtree. This was not the case for ConditionalExpression without an IfFalse expression set, cf. the recent change to that node type to fix this behavior.\n\nIf we decide to make a change to any particular node such as TryExpression, we should be consistent across all node types. However, there's a question as to whether the cloning behavior is desired, similar to the factory methods returning unique instances (i.e. unless everything is reference equal, cause cloning).\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2015-10-22T15:17:14Z",
        "body": "Yes, I was quite deliberately not looking at the woods in order to give detailed attention to the trees, but this does affect (whether as a flaw or just something that could perhaps be spelled out differently in the docs) several expression types.\n\nSome of those expressions are sorely lacking in tests, and I'd rather have tests that would catch any regressions before shifting much.\n\nWhether something actually needs to be done can still be considered before then, though.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2015-10-22T15:20:33Z",
        "body": "From the other issue @bartdesmet \n\n> Is there inadvertent cloning behavior when the expression is run through a no-op visitor?\n\nWell, I first found this by writing a quick mostly-no-op visitor to test something and neglecting to explicitly pass in the same collection. One could write a reasonable visitor that changed little, coming up with identical collections the majority of the time, and still failed to produce this behaviour from `Update`.\n\nOn the other hand, it's not very hard to avoid if one knows what to do to avoid it, so perhaps just clarifying \"all of the children\" means the exact same collection(s) in the documentation would be worth doing, and allay any other concerns.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-12-07T02:33:10Z",
        "body": "Since this is marked up for grabs, I'm taking that as a green light on tackling this. (I'd just remembered it and looked it up to argue it's case)."
      }
    ]
  },
  {
    "number": 15449,
    "title": "Modify misc tests to use Invariant culture instead of current culture",
    "created_at": "2015-10-14T17:39:26Z",
    "closed_at": "2020-01-31T09:52:56Z",
    "labels": [
      "area-System.Globalization",
      "good first issue",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15449",
    "body": "Also see issue dotnet/corefx#3759 for background\r\n\r\nSome tests assume en-us or invariant and on a test machine which is not configured the tests will fail. These tests should not depend on a specific default locale. \r\n\r\nBelow is a set of tests that fail when LANG variable is not set in Linux. These should be fixed to explicitly use Invariant. \r\n\r\nNote that some of these tests fail due to unrelated but known issue with case-insensitive string comparison that happens to fail with the default locale of en-US-POSIX (when LANG is not set) so these tests may have to be disabled temporary for Linux until that issue is fixed\r\n\r\n Int32Tests.TestTryParse\r\n UInt32Tests.TestTryParse\r\n UInt16Tests.TestTryParse\r\n UInt64Tests.TestTryParse\r\n StringTests.TestLastIndexOf\r\n StringTests.TestEndsWith\r\n StringTests.TestStartsWith\r\n StringTests.TestIndexOf\r\n Int16Tests.TestTryParse\r\n Int64Tests.TestTryParse\r\n TypeTests.TestGetTypeByName\r\n Tests.Expression_Tests.TestCallInstanceMethodsByName\r\n CaseInsensitiveComparer_ctor.ExecuteCaseInsensitiveComparer_ctor\r\n CaseInsensitiveComparer_Default.ExecuteCaseInsensitiveComparer_Default\r\n CaseInsensitiveComparer_Object.ExecuteCaseInsensitiveComparer_Object\r\n CollectionsUtilTests.ExecuteCollectionsUtilTests\r\n System.Reflection.Tests.ModuleTest.GetTypeTest\r\n System.Reflection.Tests.MethodInfoPropertyTests.TestReturnType2\r\n System.Reflection.Tests.MethodInfoPropertyTests.TestReturnType4\r\n System.Reflection.Tests.GetTypeReflectionTests.GetType1\r\n System.Reflection.Tests.ParameterInfoNameTests.TestMethodParams1\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15449/comments",
    "author": "steveharter",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-08T23:24:44Z",
        "body": "Should be simple change of tests to set culture to InvariantCulture first.\n"
      },
      {
        "user": "Vertygo",
        "created_at": "2017-04-05T12:46:51Z",
        "body": "Can I take this one?"
      },
      {
        "user": "karelz",
        "created_at": "2017-04-06T10:40:46Z",
        "body": "Sure, assigned to you @Vertygo"
      },
      {
        "user": "karelz",
        "created_at": "2017-04-06T10:41:30Z",
        "body": "If you're in trouble @krwq and @tarekgh should be able to help ..."
      },
      {
        "user": "krwq",
        "created_at": "2017-04-11T17:50:11Z",
        "body": "Hi @Vertygo, what's the status? Are you still working on it?"
      },
      {
        "user": "krwq",
        "created_at": "2017-04-11T22:48:19Z",
        "body": "@Vertygo it's ok if you haven't started yet, I'm just wondering if I can pick this up since it is the last System.Globalization 2.0.0 bug 😉 "
      },
      {
        "user": "krwq",
        "created_at": "2017-04-12T17:36:35Z",
        "body": "@steveharter this does not repro for me on bash for windows or Ubuntu\r\nIs there some special setup I need for this?\r\n\r\nHere is what I did:\r\n```\r\necho $LANG\r\n  => en_US.UTF-8\r\nLANG=\r\necho $LANG\r\n  => (nothing)\r\nmsbuild.sh src/System.Globalization/tests/System.Globalization.Tests.csproj /t:RebuildAndTest\r\n  => `(...) System.Globalization.Tests  Total: 1647, Errors: 0, Failed: 0, Skipped: 0, Time: 7.295s`\r\n```\r\n\r\nalso tried setting `LANG=en-US-POSIX` - also no repro\r\nrunning `locale` after changing LANG (that sets other environment variables) - no repro\r\n\r\nI also made sure tests are not disabled - doesn't seem to be related\r\n```\r\ngit grep 3850\r\n   => no results\r\n\r\ngit grep ActiveIssue\r\n  =>\r\n    DateTimeFormatInfo/DateTimeFormatInfoGetAbbreviatedDayName.cs:            // ActiveIssue(2103)\r\n    DateTimeFormatInfo/DateTimeFormatInfoGetAbbreviatedMonthName.cs:            // ActiveIssue(2103)\r\n    DateTimeFormatInfo/DateTimeFormatInfoGetDayName.cs:            // ActiveIssue(2103)\r\n    DateTimeFormatInfo/DateTimeFormatInfoGetMonthName.cs:            // ActiveIssue(2103)\r\n\r\ngit grep Skip\r\n   =>\r\n    CultureInfo/CultureInfoAsync.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework)]\r\n    CultureInfo/CultureInfoAsync.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework)]\r\n    Invariant/Invariant.Tests.csproj:    <SkipXunitRuntimeConfigCopying>true</SkipXunitRuntimeConfigCopying>\r\n    TextInfo/TextInfoTests.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"Desktop Framework hasn't received the fix for dotnet/corefx#16770 yet.\")]\r\n    TextInfo/TextInfoToLower.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework)]\r\n    TextInfo/TextInfoToLower.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp | TargetFrameworkMonikers.Uap)]\r\n    TextInfo/TextInfoToUpper.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework)]\r\n    TextInfo/TextInfoToUpper.cs: [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp | TargetFrameworkMonikers.Uap)]\r\n```\r\n"
      },
      {
        "user": "krwq",
        "created_at": "2017-04-12T17:49:42Z",
        "body": "I think those tests might not be in the System.Globalization... looking now\r\nEDIT:\r\ncan't find anything pointing to this issue anywhere in corefx\r\nI have searched few tests mentioned in the first post (first 3 and last 3) and can't seem to find those tests either\r\n\r\nI'm closing this as no repro - please reopen if I've missed something. Possibly they already got fixed."
      },
      {
        "user": "tarekgh",
        "created_at": "2017-04-12T18:12:57Z",
        "body": "@krwq we had changed the globalization test much since this issue is opened. if you don't see any problem when changing the default language on the system before running the tests then we are ok here. "
      },
      {
        "user": "krwq",
        "created_at": "2017-04-12T18:43:49Z",
        "body": "Thanks @tarekgh for confirming 😉"
      }
    ]
  },
  {
    "number": 15420,
    "title": "Get automated process to enforce coding rules",
    "created_at": "2015-10-12T21:32:17Z",
    "closed_at": "2020-01-31T09:51:33Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15420",
    "body": "Currently, we have code styling and formatting rules for both native and managed code but there is no process to enforce these rules. We should enforce these rules in an automated, easy way to ensure code cleanliness and styling\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15420/comments",
    "author": "jonmill",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2016-11-11T19:06:20Z",
        "body": "@sokket How much of this do we have right now? I know we have the native code formatter, but it is a manual process (i.e. just a script you can optionally run). Do we have plans to automate that stuff and/or add something for managed code?\n"
      },
      {
        "user": "jonmill",
        "created_at": "2016-11-11T19:11:36Z",
        "body": "There currently isn't a plan in place for how to do this; we have manual formatting rules that can be applied for C# and C++ but no process and no plan for a way forward\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-14T19:07:34Z",
        "body": "Next steps:\n1. Create Roslyn analyzer that checks the rules\n2. Enable it for selected projects (we might need to disable it for some legacy tests, etc.)\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-21T23:38:22Z",
        "body": "We talked a bit more about this today. The general consensus was that we should add this, but have it \"disabled\" by default. By that, I mean the option is available, but it is not build-blocking or automatic."
      },
      {
        "user": "weshaggard",
        "created_at": "2017-12-12T01:05:09Z",
        "body": "I'm a firm believe that if we are going to do anything here it should be to add an auto-formatter instead of having a style-cop type of tool. I'm going to close this as I don't expect we will have a tool to verify this at build time."
      }
    ]
  },
  {
    "number": 15405,
    "title": "Switch OS X process information retrieval over to use sysctl",
    "created_at": "2015-10-09T18:50:05Z",
    "closed_at": "2020-01-31T09:50:52Z",
    "labels": [
      "area-System.Diagnostics.Process",
      "os-freebsd",
      "os-mac-os-x",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15405",
    "body": "Currently, OS X uses the platform-specific `proc_*` calls to retrieve process and thread information. By moving these calls over to use `sysctl`, we can support many more platforms (such as FreeBSD).\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15405/comments",
    "author": "jonmill",
    "comments": [
      {
        "user": "dasMulli",
        "created_at": "2015-11-25T21:53:34Z",
        "body": "I've looked into this a bit and i see two potential issues:\nFirst, querying the running threads seems to be only possible using `proc_pidinfo` with `PROC_PIDLISTTHREADS` as parameter (OS X only). FreeBSD exposes the MIB flag value `KERN_PROC_INC_THREAD` which is not present on OS X.\nAdditionally, it seems that some process detail information such as the process executable path and argument strings is not restricted to processes belonging to the same user.\n\nAnother affected feature that is currently used is determining the executable path.\nQuerying the process path via `sysctl()` is only possible using `KERN_PROCARGS` or `KERN_PROCARGS2`, which cannot be accessed without the proper permission. Access is only granted when the executable has the SUID bit enabled and is owned by root. The `ps` command line tool shipping with OS X uses this mechanism and fails to display the process path / arguments when built manually or copied over from /bin and stripped of the SUID bit or root ownership. `libproc` wraps the pretty much undocumented `proc_info` system call into to xnu kernel, which allows querying only for the executable path of a PID or listing threads to all unprivileged processes.\n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-12-07T07:11:50Z",
        "body": "The current implementation works on OSX, and there's no motivation to change this. If freebsd requires support, an implementation using sysctl can be explored, currently there's no requirement for this."
      }
    ]
  },
  {
    "number": 15185,
    "title": "Corefx HttpClientHandler CookieContainer property deviates from Desktop",
    "created_at": "2015-09-12T18:24:11Z",
    "closed_at": "2020-01-31T09:40:46Z",
    "labels": [
      "bug",
      "area-System.Net.Http",
      "tenet-compatibility",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15185",
    "body": "During the PR for dotnet/corefx#3178 , it was discovered that the `HttpClientHandler` of corefx deviates from  desktop .Net version w.r.t the setter for `CookieContainer` property. Setting a `null` value results in an exception in the desktop version. In case of corefx, it results in  an error during `SendAsync`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15185/comments",
    "author": "kapilash",
    "comments": [
      {
        "user": "SidharthNabar",
        "created_at": "2015-09-14T16:45:18Z",
        "body": "This was discussed during the WinHttpHandler API review meeting. The reasoning here is that WinHttpHandler has an option for \"internal/native cookie handling\", in which case null is a valid value for CookieContainer (the native WinHTTP stack then manages cookies). On the other hand, desktop .NET framework has no cookie handling options other than using the managed cookie container.\n\nThe scenario where SendAsync throws in WinHttpHandler is when ((CookieUsePolicy == UseSpecifiedCookieContainer) && (CookieContainer == null)). And this cannot be checked in the setter, since developers could set the two properties in either order. Hence, the best place to check this was in the SendAsync method.\n\nHope this helps,\nSid.\n"
      },
      {
        "user": "davidsh",
        "created_at": "2015-09-14T16:49:46Z",
        "body": "Yes, I remember that meeting.  However, we still could provide app-compat behavior in the HttpClientHandler layer by throwing ArgumentNullException if someone sets a NULL CookieContainer.  In general, the NULL value doesn't hurt anything, per se, since the CookieContainer won't be used at all when the enum value for WinHttpHandler.CookieUsePolicy = UseInternalCookieStoreOnly.  However, semantically, it has no use at least in so far as the HttpClientHandler layer itself. \n\nSo, the consistent thing to do in the HttpClientHandler layer (above the WinHttpHandler layer on Windows) is probably to be consistent and just throw the exception in the setter.  This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property.\n"
      },
      {
        "user": "CIPop",
        "created_at": "2016-12-09T00:40:53Z",
        "body": "This sounds simple according to @davidsh:\r\n\r\n> So, the consistent thing to do in the HttpClientHandler layer (above the WinHttpHandler layer on Windows) is probably to be consistent and just throw the exception in the setter. This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property.\r\n\r\nWe would also need a test that passes on .Net Framework and in .Net Core."
      }
    ]
  },
  {
    "number": 15179,
    "title": "Add System.Configuration.Unix",
    "created_at": "2015-09-11T16:25:21Z",
    "closed_at": "2020-01-31T09:40:31Z",
    "labels": [
      "api-needs-work",
      "area-Meta",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15179",
    "body": "There’s a lot of Unix configuration information that apps could benefit from being able to read (e.g. sysconf, pathconf, ulimit, etc.) and potentially modify.  Potentially support for parsing/outputting Unix configuration files as well.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15179/comments",
    "author": "Petermarcu",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-23T23:03:24Z",
        "body": "We need formal API proposal"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-07-22T14:45:45Z",
        "body": "This hasn't had much interest since we opened it for discussion almost four years ago.  Closing."
      }
    ]
  },
  {
    "number": 15160,
    "title": "System.IO.FileSystem.Tests leaves behind temp directories that are nearly impossible for mortals to delete.",
    "created_at": "2015-09-10T15:40:08Z",
    "closed_at": "2020-01-31T09:39:32Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15160",
    "body": "Repro:\n1. msbuild System.IO.FileSystem.Tests.csproj -t:test\n2. Try to clean out your %TMP% directory.\n3. Watch every normal method of deletion fail due to S.I.F.T. leaving behind massively subnested GUID-named directory trees that purposefully blow past the MAXPATH restriction.\n\nI ended up having to write code to get rid of this stuff.\n\nS.I.F.T. should clean up after itself.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15160/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2015-09-10T15:48:19Z",
        "body": "cc: @JeremyKuhne \n"
      }
    ]
  },
  {
    "number": 15152,
    "title": "Turn on CheckForOverflowUnderflow on all projects in Debug",
    "created_at": "2015-09-09T17:26:30Z",
    "closed_at": "2020-01-31T09:39:12Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15152",
    "body": "Right now, only System.Reflection.Metadata has CheckForOverflowUnderflow on in Debug.\n\nI think there's value in doing this across the board. Expressions that are allowed to overflow by design should be explicitly marked `unchecked`.\n\ncc @weshaggard @stephentoub \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15152/comments",
    "author": "nguerrera",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2015-09-09T17:54:20Z",
        "body": "Sounds like a good idea.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-11T19:01:54Z",
        "body": "@weshaggard Do you still think this is something we should enable? If we enable this across the board and don't see any errors, is it something we should just go ahead and do?\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-11-11T19:05:54Z",
        "body": "> If we enable this across the board and don't see any errors\n\nI'm 100% sure there will be errors / regressions if/when we enable this everywhere. ;)  That's not to say we shouldn't do it, but I don't think it's as simple as changing a build configuration entry.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2016-11-11T19:25:47Z",
        "body": "I do think this is probably worth doing, but I agree that it is likely not as simple as flipping a build configuration on. \n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-12T00:01:20Z",
        "body": "Yes I spoke too soon 😄 . We'd definitely need a lot of work to enable it globally. Perhaps it's smarter to start with a few high-value projects and see how much work it is.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-14T19:02:25Z",
        "body": "Next steps: Flip individual projects and mark code which overflows on purpose as unchecked.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-11-14T19:04:01Z",
        "body": "> Next steps\n\nAnd measure critical paths to ensure nothing regresses perf-wise (unless we're only flipping the switch for debug, in which case it doesn't matter).\n"
      },
      {
        "user": "nguerrera",
        "created_at": "2016-11-14T19:10:47Z",
        "body": "> (unless we're only flipping the switch for debug, in which case it doesn't matter).\n\nI opened this suggesting debug-only. I'd still recommend starting with that.\n"
      },
      {
        "user": "ghost",
        "created_at": "2017-01-31T20:23:01Z",
        "body": "I could take this one. Is it sufficient to run the outerloop tests after turning checks on for a project or is there anything else I should try?"
      },
      {
        "user": "mellinoe",
        "created_at": "2017-01-31T20:34:05Z",
        "body": "@dennisdietrich I think that would be a good start. Like @nguerrera said, it's probably a good idea to enable this for Debug builds only, at first. In order to do that, you can condition the property on `\"'$(ConfigurationGroup)' == 'Debug'\"` in the project file."
      },
      {
        "user": "ghost",
        "created_at": "2017-01-31T20:37:36Z",
        "body": "@mellinoe, definitely. Performance aside, turning this on for Release obviously could introduce breaking changes in the form of unexpected exceptions being thrown. Very well, please assign to me."
      },
      {
        "user": "ghost",
        "created_at": "2017-02-01T17:16:21Z",
        "body": "@mellinoe After thinking about this some more I don't think going for the individual project files is the right approach. We do want this for all projects so it makes more sense to have this in a props file used by all projects. I've noticed that there's already a whole bunch of them so I'll first check if any of those would be suitable (pointers welcome ;))."
      },
      {
        "user": "JonHanna",
        "created_at": "2017-02-01T17:25:54Z",
        "body": "If you do it across all projects, it's very likely that there'd be a very large number of regressions, so you'd have to change all of those regressions, so it would likely be a massive one-shot PR. If you do it project by project it's more likely to lead to small easier-to-review PRs, and then the setting could be moved up to being global after that."
      },
      {
        "user": "karelz",
        "created_at": "2017-02-01T17:27:29Z",
        "body": "For the sake of reviewers: Please do NOT do large PRs, break them up :)"
      },
      {
        "user": "ghost",
        "created_at": "2017-02-01T17:31:48Z",
        "body": "@JonHanna Fair enough. @karelz Also fair enough. Though, was exactly is considered 'large' in the corefx team? :)"
      },
      {
        "user": "karelz",
        "created_at": "2017-02-01T17:37:31Z",
        "body": "Imagine you doing the code review: For how long do you want to scroll down and review code?\r\n\r\nHere's recent example of rather larger-ish PR: dotnet/corefx#15597. I would personally break it down into smaller chunks - it is easier to review each chunk in 1 session, rather than to remember where you last left off. If the chunk is large ... you are forced to push through the review all at once.\r\nJust my 2 cents."
      },
      {
        "user": "ghost",
        "created_at": "2017-02-01T19:51:30Z",
        "body": "Suspending further work on this until @stephentoub 's concerns raised in RP dotnet/corefx#15690 are addressed. "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-03T18:32:54Z",
        "body": "Another reason piecewise change can be nice is (if we merge without squashing) we can selectively revert or bisect if there's an issue that emerges."
      },
      {
        "user": "jkotas",
        "created_at": "2017-02-05T19:01:44Z",
        "body": "FWIW, turning on overflow checks in debug builds by default was considered several times in full .NET Framework. It was never done because of it did not have positive ROI. It never found enough bugs to pay for its cost. There is a price you pay for diverging behavior of debug and release build, maintaining annotations in large body of the code, and dealing with bugs introduced by maintaining the annotations.\r\n\r\nHaving said that, doing experimental runs with overflow checks on and adding some annotations for the heavy hitters should be ok."
      },
      {
        "user": "jkotas",
        "created_at": "2017-02-05T19:03:36Z",
        "body": "> measure critical paths to ensure nothing regresses perf-wise\r\n\r\nI am pretty sure that turning this on for release builds is non-starter."
      },
      {
        "user": "ghost",
        "created_at": "2017-02-09T00:19:48Z",
        "body": "Quick update: Including some code changes I haven't committed yet I'm down to about 50 failing inner loop test projects on Windows so it'll probably be a few more days until I'm done with that, after which I'll take a look at running inner loop on Linux (and after that, obviously, I'll check outer loop)."
      },
      {
        "user": "tarekgh",
        "created_at": "2017-02-09T00:22:49Z",
        "body": "thanks @dennisdietrich this is awesome!"
      },
      {
        "user": "ghost",
        "created_at": "2017-02-09T01:47:17Z",
        "body": "Just noticed some UAP PAL source files. Is that an environment I should check too? If so, how? The building and debugging instructions for Windows don't seem to mention UAP."
      },
      {
        "user": "karelz",
        "created_at": "2017-02-09T01:50:25Z",
        "body": "We are just bringing UAP back to life, I think it is fine to skip it for now cc: @joperezr @weshaggard."
      },
      {
        "user": "ghost",
        "created_at": "2017-02-09T18:39:04Z",
        "body": "@karelz Okay. What about endianness? I believe that ARM is typically bi-endinan (or fixed to little) and with Xbox having moved to x64 I don't think anyone cares about PowerPC anymore. Still, did just come across some PAL code with ```if# BIGENDIAN```so I wonder if there's anything I should check."
      },
      {
        "user": "karelz",
        "created_at": "2017-02-09T18:42:29Z",
        "body": "How is endianness related to CheckForOverflowUnderflow? It should be transparent to most of the system, right?"
      },
      {
        "user": "ghost",
        "created_at": "2017-02-09T18:50:58Z",
        "body": "It is not, but keep in mind that I'm working my way through overflow exception; I'm not doing a manual code inspection so any code that's big-endian only will go untested with the current approach."
      },
      {
        "user": "karelz",
        "created_at": "2017-02-09T20:53:04Z",
        "body": "I see.\r\nWe should make at least small effort to not change code which we won't cover in tests. That said, I expect we will make a few mistakes -- CI will catch such cases. If particular build is not covered by CI, I am fine discovering such issues later."
      },
      {
        "user": "ghost",
        "created_at": "2017-02-09T20:55:50Z",
        "body": "Fair enough. That said, what about the System.IO.Ports tests? Since I'm running the tests in a VM that doesn't even have a (virtual) serial port I get 425 skipped tests. Is there a virtual null modem I could install to get those to run?"
      },
      {
        "user": "ghost",
        "created_at": "2017-02-13T22:00:27Z",
        "body": "Update: I have an almost clean inner loop run on Windows 10 at this point. Outer loop runs and inner loop on macOS and Ubuntu are not clean but as far as I can tell the failures are all due to environmental issues (e.g. DNS tests, HTTP tests, certificate tests). Regarding the last inner loop issue on Windows 10 I've already enlisted @tarekgh's support (thanks Tarek! :)) as I'm not sure what's going on."
      }
    ]
  },
  {
    "number": 15096,
    "title": "Remove FEATURE_TRACING conditional compilation from System.Composition",
    "created_at": "2015-08-27T15:46:22Z",
    "closed_at": "2021-03-05T01:24:46Z",
    "labels": [
      "enhancement",
      "area-System.Composition",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15096",
    "body": "The System.Composition source code has some conditional compilation for FEATURE_TRACING.  If the flag is enabled, it uses TraceSource, If not, it looks like logging is disabled entirely.\n\nSince TraceSource is available on .NET Core, I think we can enable the TraceSource code and get rid of the conditional compilation.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15096/comments",
    "author": "dsplaisted",
    "comments": [
      {
        "user": "Maxwe11",
        "created_at": "2015-08-27T17:48:41Z",
        "body": "This requires upgrading profile. Nuget error:\n\n```\nCould not install package 'System.Diagnostics.TraceSource 4.0.0-beta-23123'. You are trying to\ninstall this package into a project that targets '.NETPortable,Version=v4.5,Profile=Profile259', but the\npackage does not contain any assembly references or content files that are compatible with that\nframework. For more information, contact the package author.\n```\n"
      },
      {
        "user": "dsplaisted",
        "created_at": "2015-09-01T04:20:41Z",
        "body": "@nblumhardt How valuable do you think adding TraceSource support to System.Composition would be?  It looks like it would mean dropping support for versions of .NET Framework below 4.6 (of course the old package which supports 4.5 would still be available).\n"
      },
      {
        "user": "nblumhardt",
        "created_at": "2015-09-02T05:01:36Z",
        "body": "@dsplaisted the tracing is not particularly comprehensive so I don't think it'd justify changing target frameworks for that alone.\n\nI can't comment on the merits of lining up with the rest of `corefx` though; at some point, it will be easier if _System.Composition_ has the same requirements as its sibling projects in this repo.\n\n(I've made a fork to start working on some of the TODOs as well by the way. Some kind of package restore issue is holding up the works for me at the moment, hope to dig in further this week!)\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-23T18:06:23Z",
        "body": "Should be fairly straightforward to do, especially now when all .NET Standard 2.0 APIs are in ..."
      },
      {
        "user": "jkotas",
        "created_at": "2021-03-05T01:24:46Z",
        "body": "This was cleaned up a while ago."
      }
    ]
  },
  {
    "number": 15057,
    "title": "Leaky abstraction in ThreadPool.[Unsafe]RegisterWaitForSingleObject",
    "created_at": "2015-08-18T10:03:45Z",
    "closed_at": "2020-01-31T09:34:36Z",
    "labels": [
      "api-needs-work",
      "area-System.Threading",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15057",
    "body": "I just went into the pitfall of using a waithandle in two different registrations. The documentation states the following:\n\n> The wait thread uses the Win32 WaitForMultipleObjects function to monitor registered wait operations. Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 DuplicateHandle function.\n\nIt seems quite bad when the documentation is encouraging you to write non-portable code, and P/Invoking to DuplicateHandle requires full trust. Would it be a big problem to detect that the same handle is there twice with two different registrations and correctly wait for it and queue both action on the thread pool when the waithandle becomes ready?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15057/comments",
    "author": "poizan42",
    "comments": [
      {
        "user": "ericeil",
        "created_at": "2015-08-19T16:46:09Z",
        "body": "Thanks for the suggestion.  FWIW, WaitHandle.WaitAny/WaitAll have a similar limitation, due to their use of the same underlying Windows API.  I worry that adding a check for duplicates would add overhead to _all_ uses of these methods, when most of the time the check is unnecessary.  I wonder if it would be better to add a Duplicate method to WaitHandle, so that it's less onerous for users to work around this restriction?\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-08-19T20:34:53Z",
        "body": "When you call WaitHandle.WaitAny/WaitAll then you have complete control at the call site, so at least it is less of a problem here. In the case with the thread pool you might need global information to know whether someone else has registered a wait for that same handle. Also I think partial-trust code can interfere with full-trust code if a wait handle is exposed that the full-trust code has registered a wait on - that sounds a bit dangerous.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-13T22:16:45Z",
        "body": "We need API proposal here.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2019-09-09T00:36:29Z",
        "body": "Thanks for the suggestion, but the lack of progress or upvotes here in four years suggests this isn't worth investing in, especially as synchronously blocking on WaitHandles in this manner is discouraged in favor of using async/await whenever possible, so I'm going to close this. Thanks."
      }
    ]
  },
  {
    "number": 15007,
    "title": "TimeZoneInfo.DisplayName values are not localized on Linux",
    "created_at": "2015-08-12T03:27:01Z",
    "closed_at": "2020-01-31T09:32:20Z",
    "labels": [
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15007",
    "body": "Currently the DisplayNames of TimeZoneInfos on Linux are coming from the tzfile abbreviation file, which has the 3 or 4 character abbreviation for the time zone, ex. \"PST\" or \"CST\".\n\nWe should make use of the CLDR data in the ICU library to read the correct display name values for the TimeZoneInfo.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15007/comments",
    "author": "eerhardt",
    "comments": [
      {
        "user": "mattjohnsonpint",
        "created_at": "2015-08-12T19:19:21Z",
        "body": "This may also be a good time to fix localization for `TimeZoneInfo` in general.\n\nCurrently:\n- `DisplayName`, `StandardName`, and `DaylightName` are localized by Windows, not by .NET `CurrentCulture` or `CurrentUICulture`.\n- There's no way to specify a different culture.\n- The names provided by Windows are absurd in several cases, such as \"GMT Daylight Time\".\n\nCLDR (via ICU, or otherwise) is a much more reliable source for this sort of data - and it's portable to Linux.\n"
      }
    ]
  },
  {
    "number": 15004,
    "title": "PlatformNotSupportedException on Unix when exporting multiple private keys in a single PFX",
    "created_at": "2015-08-11T23:54:10Z",
    "closed_at": "2020-01-31T09:32:12Z",
    "labels": [
      "enhancement",
      "area-System.Security",
      "disabled-test",
      "os-linux",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/15004",
    "body": "The beta7 PFX/PKCS12 export code will use OpenSSL's PKCS12_create function, which only supports one private key.\n\nOpenSSL doesn't have an inherent limitation against PKCS12 files containing multiple private keys, but the helper function can't handle it; and we're running out of time in beta7 to write it out longhand.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/15004/comments",
    "author": "bartonjs",
    "comments": [
      {
        "user": "vcsjones",
        "created_at": "2016-11-09T19:54:35Z",
        "body": "@bartonjs I could possibly do a PR for this. Is the code path for this `X509Certificate2Collection.Export` with the content type set to PKCS12?\n"
      }
    ]
  },
  {
    "number": 14989,
    "title": "Code cleanup for System.IO.Packaging",
    "created_at": "2015-08-09T22:48:28Z",
    "closed_at": "2020-01-31T09:31:32Z",
    "labels": [
      "area-System.IO.Compression",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14989",
    "body": "- [x] ContentType.cs - line 234 - use String.Equals instead of String.Compare\n- [x] ContentType.cs - 83 - if (contentType.Length == 0)\n- [x] PackagePart.cs - 849 - return !s.CanRead && !s.CanSeek && !s.CanWrite;\n- [ ] Package.cs - 976 - What's the purpose of the try block with an empty finally?\n- [x] PackageUriHelper.cs - 1297 - at least one other place where the same thing was declared. Should they be consolidated?\n- [x] PackageUriHelper.cs - 1025 - Rather than using comments, these could use named arguments.\n- [x] PackageUriHelper.cs - 991 - There are various places thus far in the implementation that use '/' hardcoded... should they instead be using ForwardSlashChar?\n- [ ] PackageUriHelper.cs - 926 - Why not just: return the_condition;\n- [x] PackUriHelper.cs - 695 - the chars array could be stackalloc'd instead of heap allocated.\n- [x] PackUriHelper.cs - 451 - Any reason not to combine these Path.Combine calls?\n- [x] InternalRelationshipCollection.cs - 592 - Debug.Fail?\n- [ ] InternalRelationshipCollection.cs - 325 - Formatting off\n- [ ] IgnoreFlushAndCloseStream.cs - 18 - This comment appears out-of-date: there is no IgnoreFlushAndClose property, and Flush/Dispose never delegate to the wrapped stream's corresponding members.\n- [ ] IgnoreFlushAndCloseStream.cs - 48 - get { return !_disposed && _stream.CanRead; }\n- [ ] FileFormatException.cs - 139 - readonly?\n- [x] ContentType.cs - 666 - This loop could be replaced by a call to Array.IndexOf<char>.\n- [x] ContentType.cs - 620 - return IsAsciiLetter(character) || (character >= '0' && character <= '9');\n- [x] ContentType.cs - 561 - It seems a bit odd to be explicit about the kind of comparison we want for the characters and to be doing a Compare rather than Equal when what we're checking for is just an empty string.\n- [x] ContentType.cs - 527 - if (string.IsNullOrEmpty(token))\n- [x] ContentType.cs - 531 - The body of this loop could be simplified to just: if (!IsAsciiLetterOrDigit(token[i]) && !IsAllowedCharacter(token[i])) throw new ArgumentException(SR.InvalidToken);\n- [ ] ContentType.cs - 398 - There's a lot of string manipulation / allocation / etc. happening in these various helper functions. Doesn't need to be fixed now, as it's not clear that it's a problem. But it'd be interesting to do some perf testing / profiling and see what pops as hot spots that we'll potentially want to fix.\n- [x] ContentType.cs - 390 - \"ans\" => \"and\"\n- [ ] ContentType.cs - 225 - Do we know that MoveNext is always going to return true here such that Current will be valid?\n- [ ] ContentType.cs - 89 - It doesn't appear that we know at this point that contentType isn't empty. Couldn't this result in indexing out of bounds into contentType?\n- [x] ContentType.cs - 262 - \"paramterKey\" => \"parameterKey\"\n- [ ] PackUriHelper.cs - 791 - Could this just do a ordinal-ignorecase comparison rather than allocating new strings with ToUpperInvariant?\n- [x] ContentType.cs - 323 - Is this type used anywhere? It appears to be dead code.\n- [x] ContentType.cs - 294 - Is this type used anywhere? It appears to be dead code.\n- [x] PackUriHelper.cs - 737 - I don't know if allocations matter here, but you could trivially avoid this allocation by using IndexOf instead of Contains.\n- [x] ContentType.cs - 604 - Couldn't it use Array.IndexOf?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14989/comments",
    "author": "EricWhiteDev",
    "comments": [
      {
        "user": "joshfree",
        "created_at": "2015-10-14T19:37:04Z",
        "body": "ping @EricWhiteDev \n"
      },
      {
        "user": "EricWhiteDev",
        "created_at": "2015-10-15T01:04:12Z",
        "body": "@joshfree I have been pulled off of this project.  I am headed out for a vacation for the next month.  When I return, if possible I can work on these.\n"
      },
      {
        "user": "lakkijyotsna",
        "created_at": "2015-11-04T06:01:40Z",
        "body": "Hi,\nI have a document of type docx, which has a Property ContentType defined as 'Document'. While reading this using System.IO.Packaging ContentType is read as null.\nIs this the problem occured because of definition of contentType property in docx file?\n"
      },
      {
        "user": "alexsorokoletov",
        "created_at": "2015-11-08T13:31:51Z",
        "body": "Can someone please clarify following items:\n\n> PackUriHelper.cs - 695 - the chars array could be stackalloc'd instead of heap allocated.\n> InternalRelationshipCollection.cs - 592 - Debug.Fail?\n> ContentType.cs - 398 - There's a lot of string manipulation / allocation / etc. happening in these various helper functions. Doesn't need to be fixed now, as it's not clear that it's a problem. But it'd be interesting to do some perf testing / profiling and see what pops as hot spots that we'll potentially want to fix.\n> ContentType.cs - 225 - Do we know that MoveNext is always going to return true here such that Current will be valid?\n> ContentType.cs - 89 - It doesn't appear that we know at this point that contentType isn't empty. Couldn't this result in indexing out of bounds into contentType?\n\nAlso, what is the best way to work with changes related to the same issue from multiple people?\nPlease advise.\n"
      },
      {
        "user": "Maxwe11",
        "created_at": "2015-11-08T15:00:27Z",
        "body": "> PackUriHelper.cs - 695 - the chars array could be stackalloc'd instead of heap allocated.\n> InternalRelationshipCollection.cs - 592 - Debug.Fail?\n\ndone in dotnet/corefx#4408\n"
      }
    ]
  },
  {
    "number": 14874,
    "title": "Clean up Begin/End usage in System.IO.Pipes",
    "created_at": "2015-07-18T14:17:06Z",
    "closed_at": "2020-01-31T09:26:27Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14874",
    "body": "The System.IO.Pipes implementation still has a bunch of APM legacy floating around in its implementation, making it both more expensive and more complicated than if it just used Tasks directly.  This should be cleaned up, as was done for System.IO.FileSystem in dotnet/corefx#972.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14874/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "Maxwe11",
        "created_at": "2015-07-19T19:35:32Z",
        "body": "Are you expecting PRs from community? :smile: \n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-07-19T19:37:11Z",
        "body": "If you're interested, you're welcome to it! :smile:\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-07-19T23:47:18Z",
        "body": "@Maxwe11, do you want me to mark this as assigned to you?\n"
      },
      {
        "user": "Maxwe11",
        "created_at": "2015-07-20T07:24:10Z",
        "body": "@stephentoub I think this issue should be resolved in a couple independent PRs\n- [x] clean up BeginWaitForConnection/EndWaitForConnection (#2568 - merged)\n- [x] clean up BeginRead/BeginWrite/etc (#2863 merged).\n\nI already have some work in private branch against first point (BeginWaitForConnection/EndWaitForConnection) so grabbing it now.\n"
      },
      {
        "user": "Maxwe11",
        "created_at": "2015-07-20T07:41:24Z",
        "body": "In the meantime someone else could grab the second point so leave issue as `up for grabs` or split it.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-07-20T19:31:48Z",
        "body": "Sounds good.  Thanks.\n"
      },
      {
        "user": "Maxwe11",
        "created_at": "2015-08-12T07:09:40Z",
        "body": "grabbing the rest :smile:\n"
      }
    ]
  },
  {
    "number": 14836,
    "title": "Rename tests in System.Globalization",
    "created_at": "2015-07-13T20:05:05Z",
    "closed_at": "2020-01-31T09:24:43Z",
    "labels": [
      "area-System.Globalization",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14836",
    "body": "About 40-50% of the tests in System.Globalization do not have self descriptive names. They are currently named PosTest, NegTest etc.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14836/comments",
    "author": "venkat-raman251",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2016-02-22T16:37:11Z",
        "body": "@hughbe, each time we merge one of your changes, this issue gets closed, because your PR/commit messages all state that it fixes 2336.\n"
      },
      {
        "user": "hughbe",
        "created_at": "2016-02-22T16:51:09Z",
        "body": "whoops sorry, i'll make sure not to say that each time\n"
      }
    ]
  },
  {
    "number": 14748,
    "title": "Consider adding KeyValuePair type with a factory method",
    "created_at": "2015-06-22T21:04:54Z",
    "closed_at": "2020-01-31T09:20:28Z",
    "labels": [
      "api-approved",
      "area-System.Collections",
      "help wanted",
      "wishlist"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14748",
    "body": "For better or worse KeyValuePair is frequently used structure to represent a pair (mostly due to the lack of struct tuples). It is currently inconvenient to create these pairs as one needs to specify type arguments to the constructor. A simple factory method would make it more succinct since the C# and VB compilers can usually infer the generic arguments:\n\n``` C#\n    public static class KeyValuePair\n    {\n        public static KeyValuePair<K, V> Create<K, V>(K key, V value)\n        {\n            return new KeyValuePair<K, V>(key, value);\n        }\n    }\n```\n\nthis pattern is already used by ImmutableArray.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14748/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2015-06-23T02:39:52Z",
        "body": "+1 This would be nice, matches Tuple.Create as well :smile: \n"
      },
      {
        "user": "kzu",
        "created_at": "2016-06-13T05:03:32Z",
        "body": "PR provided :+1: \n"
      },
      {
        "user": "ellismg",
        "created_at": "2016-06-13T06:30:05Z",
        "body": "@terrajobst How do I schedule a slot for this?\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-03T16:54:51Z",
        "body": "@kzu, assigned to you (replacing the \"grabbed by community\" label), as you are working on it. If you change your mind, please let us know.\n"
      },
      {
        "user": "kzu",
        "created_at": "2016-10-03T23:15:18Z",
        "body": "I've no idea what triggered the build failure or how to fix it, honestly :(\n\nThe source change is in an existing file, so I don't even know how it could end up missing for that BclRewriter error.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-10-04T00:10:53Z",
        "body": "@Priya91 @ianhays can you help please? Or loop in experts who can ...\n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-10-04T21:40:24Z",
        "body": "@kzu can you track the build failure discussion in the coreclr PR, the code reviewers there will be able to help you better.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2016-10-12T17:41:41Z",
        "body": "The API still needs to get exposed and a simple test added in corefx repo before it is usable. dotnet/corefx@67bc5d4 is an example how to do it.\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-18T23:44:27Z",
        "body": "@kzu do you want to grab it?\n"
      },
      {
        "user": "AlexRadch",
        "created_at": "2016-12-15T16:16:10Z",
        "body": "@karelz I am working on it"
      },
      {
        "user": "karelz",
        "created_at": "2017-01-29T06:15:13Z",
        "body": "No activity for 1.5 months, unassigning - it is back \"up for grabs\", available for anyone to pick it up.\r\nNext steps: Expose the API in CoreFX and add tests.\r\n\r\n@kzu are you interested in finishing it off?"
      },
      {
        "user": "TylerBrinkley",
        "created_at": "2017-07-07T16:24:04Z",
        "body": "Could we add a `netfx-port-consider` tag to this? I think this would be very valuable in the desktop .NET Framework and possibly `.NET Standard`."
      },
      {
        "user": "karelz",
        "created_at": "2017-07-07T16:50:13Z",
        "body": "Sounds reasonable to me, added. Area owners/experts feel free to override my change if needed."
      }
    ]
  },
  {
    "number": 14730,
    "title": "Support JSON-LD in DataContractJsonSerializer",
    "created_at": "2015-06-17T10:49:06Z",
    "closed_at": "2020-01-31T09:19:29Z",
    "labels": [
      "api-needs-work",
      "area-Serialization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14730",
    "body": "There is an issue raised by dotnet/wcf#28 requesting support for JSON-LD. \n\nIf more info is needed, @akuckartz would be a good person to start with, as the original issue-raiser. It would be great to hear from the community if JSON-LD is useful so this work can be prioritized appropriately. \n\nThanks! \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14730/comments",
    "author": "iamjasonp",
    "comments": [
      {
        "user": "terrajobst",
        "created_at": "2015-09-29T18:01:36Z",
        "body": "Can you make a proposal on how this would look like?\n"
      },
      {
        "user": "karelz",
        "created_at": "2016-11-04T18:18:56Z",
        "body": "We need formal API proposal\n"
      },
      {
        "user": "akuckartz",
        "created_at": "2017-11-02T19:26:08Z",
        "body": "Why was this closed?"
      },
      {
        "user": "karelz",
        "created_at": "2017-11-02T19:38:41Z",
        "body": "I don't know why @shmao closed it, but by looking at the issue I have to agree, because for one year no one was interested in coming ahead with a proposal. I don't see much value in keeping API ideas opened for more than 6 months when there is nothing concrete."
      },
      {
        "user": "akuckartz",
        "created_at": "2017-11-03T15:49:45Z",
        "body": "Why can't issues be kept open until they are resolved?"
      },
      {
        "user": "karelz",
        "created_at": "2017-11-03T17:05:51Z",
        "body": "@akuckartz because we would drown in them.\r\nDo you file all wishes for all your projects into your backlogs? Even those you know are not realistic in next year or two and are not in high demand? What is the point to have them filed? What if the requirements change, or there is something else fulfilling the role? Maintaining opened issues is cost and it makes focus more challenging, so if there is little value, closing is fine.\r\n\r\nMoreover anyone can browse through closed issues and suggest reopening of those he/she wants to work on. You can view 'Closed' as more distant Future."
      },
      {
        "user": "akuckartz",
        "created_at": "2017-11-03T17:28:18Z",
        "body": "Closed but unresolved issues can realistically only be found if they are tagged so that they can be differentiated from those which are resolved."
      },
      {
        "user": "karelz",
        "created_at": "2017-11-03T20:46:00Z",
        "body": "@akuckartz true - if you look at the labels, there are some combos which indicate the issue has been closed without fixing (e.g. api-needs-work).\r\nIf there is interest and someone wants to push this particular idea forward to something actionable, or if we have few people voting it up, we can reopen it (or we can create a new tracking issue)."
      }
    ]
  },
  {
    "number": 14662,
    "title": "Consider caching of results of CreateObjectArrayDelegateRefEmit",
    "created_at": "2015-06-03T23:26:35Z",
    "closed_at": "2020-07-06T18:15:14Z",
    "labels": [
      "enhancement",
      "area-System.Dynamic.Runtime",
      "help wanted",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14662",
    "body": "Tracking TODO in \n     src/Common/src/System/Dynamic/Utils/DelegateHelpers.cs \n\nThe method manufactures thunk functions that could often have same signature, but bound to different handlers. It is not cleare whether such caching is possible/beneficial, but it is worth a thought.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14662/comments",
    "author": "VSadov",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-09T23:33:22Z",
        "body": "Be warned, it may be not possible to implement it. Expectation: medium complexity.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2017-12-11T23:21:49Z",
        "body": "We can't cache the final result because it closes over different `handler` delegates each time, but we can cache the `DynamicMethod` and call `CreateDelegate` on the cached result. We get to skip the bulk of the method, but it's not clear how much we gain."
      },
      {
        "user": "cston",
        "created_at": "2020-07-06T18:14:25Z",
        "body": "It looks like this issue refers to `DelegateHelpers.CreateObjectArrayDelegateRefEmit()`."
      },
      {
        "user": "cston",
        "created_at": "2020-07-06T18:15:14Z",
        "body": "Closing. We should re-open this issue if we see a performance issue."
      }
    ]
  },
  {
    "number": 4290,
    "title": "WPO disabled in release build",
    "created_at": "2015-06-03T05:06:48Z",
    "closed_at": "2020-01-30T22:35:44Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4290",
    "body": "When building in release mode, the flag /LTCG is passed to the linker in an attempt to enable Whole Program Optimization (WPO). However, this flag by itself does not enable WPO. The flag /GL should be passed to the compiler for /LTCG to take effect.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4290/comments",
    "author": "hadibrais",
    "comments": [
      {
        "user": "DickvdBrink",
        "created_at": "2015-06-10T17:16:48Z",
        "body": "PR dotnet/coreclr#1111 is merged. Is there anything left to do here?\n"
      }
    ]
  },
  {
    "number": 14614,
    "title": "Section name in PEReader contains null padding",
    "created_at": "2015-05-20T22:34:32Z",
    "closed_at": "2020-01-31T09:14:11Z",
    "labels": [
      "area-System.Reflection",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14614",
    "body": "String in section name (i.e. peReader.PEHeaders.SectionHeaders[0].Name) contains null characters.\n\nI believe we should remove it, unless it is by design.\n\nECMA description of field:\n\n```\nAn 8-byte, null-padded ASCII string. There is no terminating null if the string is exactly eight characters long.\n```\n\nHere is how we get the value:\n\n``` csharp\n// reader is PEBinaryReader\n// _name is string\n// PEFileConstants.SizeofSectionName = 8\n_name = reader.ReadUTF8(PEFileConstants.SizeofSectionName);\n\n// impl of ReadUTF8:\npublic string ReadUTF8(int byteCount)\n{\n    byte[] bytes = ReadBytes(byteCount);\n    return Encoding.UTF8.GetString(bytes, 0, byteCount);\n}\n```\n\nIn theory it can also be encoding bug.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14614/comments",
    "author": "krwq",
    "comments": [
      {
        "user": "ellismg",
        "created_at": "2015-05-21T07:20:04Z",
        "body": "Given the spec, it also seems a little odd that we are using a UTF8 decoder here.\n"
      },
      {
        "user": "mikedn",
        "created_at": "2015-05-21T16:02:56Z",
        "body": "> Given the spec, it also seems a little odd that we are using a UTF8 decoder here.\n\nActually it's the ECMA spec that it is odd :smile:. The latest PECOFF spec says\n\n> An 8-byte, null-padded UTF-8 encoded string...\n\nA quick test shows that the VC++ compiler can indeed emit UTF-8 encoded section names.\n"
      },
      {
        "user": "jbevain",
        "created_at": "2015-05-22T12:46:54Z",
        "body": "Wouldn't be the first time that the C++ compiler emitted something not conforming with ECMA-335 :)\n"
      },
      {
        "user": "nguerrera",
        "created_at": "2015-05-29T16:53:47Z",
        "body": "Fixed by dotnet/corefx#1837\n"
      }
    ]
  },
  {
    "number": 14551,
    "title": "Named pipes and array segment",
    "created_at": "2015-05-07T00:55:56Z",
    "closed_at": "2020-01-31T09:11:25Z",
    "labels": [
      "enhancement",
      "area-System.IO",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14551",
    "body": "Hello. was thinking why the named pipe api doesn't provide the possibility to use array segments as the socket api to be able to use buffer pooling to reduce the impact of pinning for arrays that are not big enough to make it to LOH. is a common technique with socket to avoid possible out of memory exception due to fragmentation. I am having nightmares because a new app we are building is doing a lot of io via named pipes and now OOM exceptions are all over the place. Any plan about this kind of features?\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14551/comments",
    "author": "colombod",
    "comments": [
      {
        "user": "terrajobst",
        "created_at": "2015-09-29T17:39:10Z",
        "body": "@KrzysztofCwalina, seems related to `System.Buffers`.\n"
      },
      {
        "user": "colombod",
        "created_at": "2015-09-30T06:01:51Z",
        "body": "Related but not quite the same.\n"
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2016-11-24T00:06:24Z",
        "body": "@colombod we currently do not have a specific feature in mind for this. This is a fairly complex area and I suspect it will be a lot of work/thinking to get this right.\r\n\r\nIs this something you are interested in prototyping and seeing what a surface area / implementation / challenges would look like? "
      },
      {
        "user": "colombod",
        "created_at": "2016-11-24T06:02:45Z",
        "body": "Could give it a try!\r\n\r\n\r\n"
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2016-11-24T06:04:57Z",
        "body": "Awesome! :)\r\n\r\nLet us know how we can help out! :)"
      },
      {
        "user": "colombod",
        "created_at": "2016-11-25T21:26:03Z",
        "body": "Will get some proposal across, the idea is to mirror the signature of the api for async IO on socket using segments, the idea is to reduce the need for contiguous buffers at least when reading, as you point out will need quite few thinking on it. "
      },
      {
        "user": "JeremyKuhne",
        "created_at": "2017-10-09T18:27:27Z",
        "body": "@KrzysztofCwalina, @stephentoub  I presume this would be answered by Span<T> APIs?"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-10-09T18:39:19Z",
        "body": "> I presume this would be answered by Span APIs?\r\n\r\nI'm unclear on the suggestion. @colombod, can you clarify?  I'm unclear how `ArraySegment<byte>` APIs would actually enable something that's not possible today; you can certainly pool buffers and pass them into Read/Write/ReadAsync/WriteAsync methods.  `ArraySegment<byte>` is just a struct that wraps the `byte[]` with the offset and count ints, and if you have an `ArraySegment<byte>`, you can just pass its Array, Offset, and Count into the corresponding arguments. If the request is purely to be able to have other Read/Write/ReadAsync/WriteAsync overloads that work with some kind of \"segment\"-like type that encompasses a `byte[]` along with an offset and a count, then yeah, that should be covered by the new `{ReadOnly}Memory<byte>` and `{ReadOnly}Span<byte>`-based overloads already added to Stream for 2.1."
      },
      {
        "user": "colombod",
        "created_at": "2017-10-11T12:50:21Z",
        "body": "Array segment is good and can be used on the socket api, but is not generally available on other io apis like on named pipes for example. The new span and memory api seem to hit the spot! They totally map the problem space I was hitting with the conventional stream api"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-10-11T12:53:36Z",
        "body": "> is not generally available on other io apis like on named pipes for example\r\n\r\nNot built in, but you can easily add them yourself via extensions, e.g.\r\n```C#\r\npublic static int Read(this Stream s, ArraySegment<byte> buffer) =>\r\n    s.Read(buffer.Array, buffer.Offset, buffer.Count);\r\n\r\npublic static void Write(this Stream s, ArraySegment<byte> buffer) =>\r\n    s.Write(buffer.Array, buffer.Offset, buffer.Count);\r\n```"
      },
      {
        "user": "colombod",
        "created_at": "2017-10-11T12:56:56Z",
        "body": "The only thing I was doing on top of spans was to see them as a memory buffer and then be able to represent a required X amount of memory as a set of spans. The extension is interesting but the interesting part would be to be able to pass the Memory object all the way down to native call instead of keep on doing pinvoke for each span. Time to deep-dive in the span and memory api, looks gorgeous"
      },
      {
        "user": "stephentoub",
        "created_at": "2017-10-18T23:22:20Z",
        "body": "Ok, thanks.  Sounds like this can be closed then."
      }
    ]
  },
  {
    "number": 14518,
    "title": "Improve layout of bin\\tests directory",
    "created_at": "2015-04-30T19:48:51Z",
    "closed_at": "2020-01-31T09:09:42Z",
    "labels": [
      "enhancement",
      "area-Meta",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14518",
    "body": "Building and running all CoreFx tests creates bin\\tests directory with an insane amount of files (14493 files of total size 1.4GB). The problem is that every CoreFx library deploys its own copy of DNX and XUnit (175 files) to its test directory. Instead all tests should be deployed into a single directory with a single copy of DNX.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14518/comments",
    "author": "tmat",
    "comments": [
      {
        "user": "eatdrinksleepcode",
        "created_at": "2015-04-30T21:35:57Z",
        "body": "I don't think the solution is quite that simple, but I do believe we should make an effort to improve this situation.\n\n> On Apr 30, 2015, at 4:02 PM, Dmitry Turin notifications@github.com wrote:\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-05-01T06:33:16Z",
        "body": "I 100% agree although heard different opinions on that. cc: @weshaggard\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-05-01T06:43:17Z",
        "body": "I do think we should look at options to improve this but we cannot run all the tests from the same directory as there are too many conflicting dependencies between the different tests. Not all tests projects depend on the latest version of all the libraries, which is by design as we plan to be able to ship each library independently. \n\nOne thing we can consider is hard-linking some of these files together so they are still isolated but not duplicated on disk. \n"
      },
      {
        "user": "tmat",
        "created_at": "2015-05-01T15:17:25Z",
        "body": "Hard-linking sounds like a hack. Why do the tests and their deps need to be in the same directory as DNX anyways? Couldn't the test driver run from one directory and load tests and their deps from a different one?\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-05-01T23:09:41Z",
        "body": "Why can't we just publish a package(s) with all version of the contracts and build against them and then run against the bits from the local repo. This way we can reference lower version but run against whatever we build in the repo. All contracts in all versions are probably at most few megabytes which is still gonna be a lot less than what we already have.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-05-02T00:25:58Z",
        "body": "Both very good questions. \n\n@tmat first DNX isn't actually being used to run our tests we are using our own corerun host and the dependent xunit libraries. Regardless the issue is that the host and xunit use various versions of our libraries themselves but we need the versions that the test depend on and not the versions that our test infrastructure depends on. There are definitely conflicts that happen between the two which was the biggest reason we started isolating the tests and ensuring we copy the test versions over top of the infrastructure versions.\n\n@krwq for libraries that declare a dependency on a specific version of a package we want to make sure that they are actually running on that version as well and not the latest versions from the repo. Otherwise we cannot guarantee that they actually work on the potentially different older versions of the dependent packages. There are times were we will want to run the tests against all the latest versions but that should not be the default case in a world where we want to ship our libraries with specific versions of dependencies.\n"
      },
      {
        "user": "tmat",
        "created_at": "2015-05-02T00:40:44Z",
        "body": "@weshaggard Other than System.Runtime, is it not possible to use LKG of xunit dependencies for the host and then load the dependencies of the library being tested in a separate load context?\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-05-02T00:45:39Z",
        "body": "@tmat It might be possible but at a minimal it would require a custom host with a custom load context. I actually don't know how custom load contexts work when exchanging types across different context from different versions of the same assemblies. @jkotas is it even possible to load the same assemblies with different versions in different assembly load contexts and then communicate across the different contexts?\n"
      },
      {
        "user": "tmat",
        "created_at": "2015-05-02T00:47:28Z",
        "body": "@weshaggard The communication would probably need to be done via primitive types.\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-05-02T01:01:59Z",
        "body": "It should be definitely possible to load different versions of assemblies into different contexts. As @tmat suggested, the communication between different contexts has to be done via shared types - they do not have to necessarily be primitive.\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2017-01-27T22:12:11Z",
        "body": "After the recent engineering changes we now use a shared runtime folder for our tests so closing this. "
      }
    ]
  },
  {
    "number": 14510,
    "title": "Add generic overloads to Math.Min and Math.Max",
    "created_at": "2015-04-29T15:27:15Z",
    "closed_at": "2020-01-31T09:09:20Z",
    "labels": [
      "api-needs-work",
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14510",
    "body": "There are overloads of `Math.Min` and `Math.Max` for all the numeric types, but there aren't any for general comparable types (including framework types like `DateTime` and `TimeSpan`). It would be nice to have them.\n## Rationale\n\nFor integral types, `Math.Min` and `Math.Max` are not necessary, e.g. instead of `Math.Min(a, b)`, you can write `a <= b ? a : b`. But they are nice, because they make the meaning clear and decrease the likelihood of error. The same argument applies to general comparable types, so they should work with `Math.Min` and `Math.Max` too.\n## Proposed API\n\n``` c#\npublic static class Math\n{\n    public static T Min<T>(T val1, T val2) where T : IComparable<T>;\n    public static T Min<T>(T val1, T val2, IComparer<T> comparer);\n\n    public static T Max<T>(T val1, T val2) where T : IComparable<T>;\n    public static T Max<T>(T val1, T val2, IComparer<T> comparer);\n}\n```\n## Open questions\n- Should the constraint `where T : IComparable<T>` be there? Other framework methods that require comparison, like `Enumerable.OrderBy`, don't have it and instead use `Comparer<T>.Default`.\n- Should nullable value types be supported? The proposed version doesn't, because `T?` does not implement `IComparable<T?>`, even when `T` does implement `IComparable<T>`.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14510/comments",
    "author": "svick",
    "comments": [
      {
        "user": "NickCraver",
        "created_at": "2016-05-14T02:12:05Z",
        "body": "I would ammend this API to move off of the `Math` class, for 3 reasons:\n- I think `Math` ceases to make as much sense with many `IComparable<T>` types. You could be comparing swimming pools or classical music to see which is greater, these things aren't bounded to mathematical concepts.\n- The <T> overloads would be an overload change to existing code and we could have breaks there.\n- It avoids type forwarding concerns and allows the API to be added without a desktop CLR ship.\n\nInstead, I'd suggest a new `static` class called `Compare`, where many such generic methods could live. Updated example:\n\n``` C#\npublic static class Compare\n{\n    public static T Min<T>(T val1, T val2, IComparer<T> comparer = null);\n    public static T Max<T>(T val1, T val2, IComparer<T> comparer = null);\n}\n```\n\n> Should the constraint `where T : IComparable<T>` be there? \n\nI would remove it and opt for a single overload that optionally accepts the `IComparer<T>`. If it's null, `Comparer<T>.Default` would be used for the same effect as the other overload.\n\n> Should nullable value types be supported?\n\nI don't think they should be supported - because defining this behavior is...hard to define. You could argue that `IComparable<T>` forces such a comparison but `struct`s remain fun and ambiguous.\n"
      },
      {
        "user": "benaadams",
        "created_at": "2016-05-14T02:31:58Z",
        "body": "> Should nullable value types be supported?\n\nNo because nullable value types can and often represent database nulls and you don't want to go there... As it means closer to unknown and the comparisons and behaviours are almost philosophical.\n\nIs a null greater or less than a value? Or is it indeterminate depending on what the unknown value really is?\n"
      },
      {
        "user": "Siderite",
        "created_at": "2016-05-17T20:29:39Z",
        "body": "I would use params to calculate the max/min for any number of items. And in that vein, if you are already using a list of objects, then a LInQ extension kind of makes more sense. `new[] { o1, o2, o3}.Max();`\n"
      },
      {
        "user": "NickCraver",
        "created_at": "2016-05-17T20:34:00Z",
        "body": "@Siderite that would require the an allocation of an array on each call. We definitely do not want that overhead. If such overhead is acceptable, then the current LINQ approach works. \n\nAlternatively, we could provide such an overload, but alongside built-in non-array allocation overloads for (probably) 2, 3, and 4 parameters.\n"
      },
      {
        "user": "Siderite",
        "created_at": "2016-05-17T20:43:46Z",
        "body": "I always thought this was an antipattern resulting from the compiler laziness. Surely if there is a cost in allocating an array, then the compiler could create the underlying 1,2,3 parameter overloads for you. As such, with something like PostSharp, this could be implemented as a rule even by the developer, I think. Aren't you tired of writing `Math.Max(Math.Max(a,b),c)` when you want to compare three numbers? Of course, one can always create a Linq aggregate, but it feels like overkill.\n"
      },
      {
        "user": "NickCraver",
        "created_at": "2016-05-17T20:47:19Z",
        "body": "How would the compiler generate the code here? That's different code for the multiple cases - you'd spend far more time writing the necessary (and even _if_ possible) compiler gymnastics here than the code for the few overloads :)\n\nThe whole point here (with any multi-overload method) is efficiency; optimizing for the 95-99% case with a few overloads and the rest can allocate more. If this wasn't a goal, we'd just all use the LINQ approach available right now.\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2016-12-27T18:59:51Z",
        "body": "@AlexGhiondea what is next here, are we asking @svick to update his proposal? or is this ready for review?"
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2016-12-28T01:04:53Z",
        "body": "@danmosemsft I believe we were still settling on the design. I will take a look when I get back next year! "
      },
      {
        "user": "AlexGhiondea",
        "created_at": "2017-01-04T00:43:34Z",
        "body": "@svick @NickCraver I am closing this since we are going to review basically the same in dotnet/corefx#11555 "
      }
    ]
  },
  {
    "number": 4184,
    "title": "Endianness comments in BitConverter.DoubleToInt32Bits and Int32BitsToDouble are irrelevant",
    "created_at": "2015-04-27T14:23:35Z",
    "closed_at": "2020-01-30T22:30:52Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4184",
    "body": "Similar to the comments highlighted in dotnet/coreclr#833, the `BitConverter.DoubleToInt32Bits` and `Int32BitsToDouble` methods contain endianness comments which are almost certainly irrelevant.\n- The .NET Framework doesn't support, and is unlikely to ever support, any architecture which uses a different endianness for its internal representation of integers and floating-point numbers.\n- The current implementation of this method _does_ already work on both little- and big-endian machines, provided the `Contract.Assert` call is not there.\n\nI recommend these comments as well as the calls to `Contract.Assert` be removed, and the documentation updated to explicitly include the following text (or an equivalent variant) stating a precondition that has always existed but was previously undocumented.\n\n> This method assumes the hardward uses the same endianness for integers and floating-point numbers.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4184/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2015-04-27T15:14:22Z",
        "body": "I agree that this comment is bogus and should be removed.\n"
      },
      {
        "user": "mgravell",
        "created_at": "2015-04-27T15:24:55Z",
        "body": "I'm happy to remove/revise those comments and assertions as part of that PR - no skin off my nose either way - but: this is my first coreclr PR: what is the usual process in the case of such a question / decision?\n\nMinor clarification: it is `DoubleToInt64Bits` etc\n"
      },
      {
        "user": "sharwell",
        "created_at": "2015-04-27T15:56:19Z",
        "body": "@mgravell I understand why you implemented your pull request the way you did, and believe it makes sense. This issue is meant to formalize the request to alter the original definitions so you can more comfortably remove them from yours as well. :smile: \n"
      }
    ]
  },
  {
    "number": 14472,
    "title": "Parallel.Linq.GroupBy not using first 'equal' key.",
    "created_at": "2015-04-23T23:05:56Z",
    "closed_at": "2020-02-26T16:53:41Z",
    "labels": [
      "bug",
      "area-System.Linq.Parallel",
      "help wanted",
      "untriaged"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14472",
    "body": "Similar to `Distinct` ( dotnet/runtime#14416 ), `GroupBy` isn't choosing the 'first' or earliest identical element for a key.\n\nThat is, given an ordered range `{0, ... 23}`and running `GroupBy(x => x, compareMod(4))`, I'm expecting the first (lowest, here) element that occurs in the source to be chosen as the key - `{0, 1, 2, 3}`.  Instead, any element may be chosen as the key (although it looks like `0` is consistently being chosen for the first key... hmmm...)\n\nReproduction code (may not always fail):\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Xunit;\n\nnamespace Test\n{\n    public class Example\n    {\n        [Fact]\n        public static void GroupByExample()\n        {\n            ParallelQuery<int> original = ParallelEnumerable.Range(0, 24).AsOrdered();\n            int seen = 0;\n            Assert.All(original.GroupBy(x => x, new ModularCongruenceComparer(4)), i => Assert.Equal(seen++, i.Key));\n            Assert.Equal(4, seen);\n        }\n\n        private class ModularCongruenceComparer : IEqualityComparer<int>\n        {\n            private int _mod;\n\n            public ModularCongruenceComparer(int mod)\n            {\n                _mod = Math.Max(1, mod);\n            }\n\n            private int leastPositiveResidue(int x)\n            {\n                return ((x % _mod) + _mod) % _mod;\n            }\n\n            public bool Equals(int x, int y)\n            {\n                return leastPositiveResidue(x) == leastPositiveResidue(y);\n            }\n\n            public int GetHashCode(int x)\n            {\n                return leastPositiveResidue(x).GetHashCode();\n            }\n\n            public int GetHashCode(object obj)\n            {\n                return GetHashCode((int)obj);\n            }\n        }\n    }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14472/comments",
    "author": "Clockwork-Muse",
    "comments": [
      {
        "user": "karelz",
        "created_at": "2016-11-19T02:41:25Z",
        "body": "@alexperovich says: Likely race condition, tricky to track down and fix.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-19T19:01:08Z",
        "body": "Akin to dotnet/runtime#14416 is this actually promised?\n"
      },
      {
        "user": "Clockwork-Muse",
        "created_at": "2016-11-20T03:18:43Z",
        "body": "Not sure that it is.  Especially back when I posted this stuff, I wasn't sure what the limits were.\n"
      },
      {
        "user": "JonHanna",
        "created_at": "2016-11-20T12:02:10Z",
        "body": "My read on it is that even with Linq2Objects the first-match-is-key behaviour is just an implementation detail (though probably one we should maintain now even if there were some reason not to). In PLINQ there'd be a performance cost in forcing this behaviour that I don't think should be paid by those who don't need it. It's possible to construct queries that produce it if you really do need it.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2020-02-26T16:53:41Z",
        "body": "Closing as by design."
      }
    ]
  },
  {
    "number": 4153,
    "title": "Pull corefx specific APIs out of libcoreclrpal when reasonable.",
    "created_at": "2015-04-21T06:24:57Z",
    "closed_at": "2020-01-30T22:29:26Z",
    "labels": [
      "help wanted",
      "area-PAL-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4153",
    "body": "We should adopt the precident that @bartonjs has set with fdc9a0419c55acafa8cd087964e70e0ed87460e1 and take the corefx specific APIs out of the PAL and into standalone native libraries for the cases where we were just using the PAL as a nice place to dump some native code.\n\n/cc @stephentoub @jkotas  \n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4153/comments",
    "author": "ellismg",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2015-07-15T20:24:21Z",
        "body": "cc: @nguerrera\n"
      },
      {
        "user": "ellismg",
        "created_at": "2015-10-28T18:47:32Z",
        "body": "This is done.\n"
      }
    ]
  },
  {
    "number": 14454,
    "title": "Improve code coverage for data contract serializers",
    "created_at": "2015-04-20T17:39:28Z",
    "closed_at": "2020-01-31T09:06:40Z",
    "labels": [
      "area-Serialization",
      "good first issue",
      "increase-code-coverage",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14454",
    "body": "Improve code coverage for DataContractSerializer and DataContractJsonSerializer\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14454/comments",
    "author": "khdang",
    "comments": [
      {
        "user": "zhenlan",
        "created_at": "2016-06-23T21:45:36Z",
        "body": "We can take a look of code coverage report and identify the areas that need more coverage.\n"
      },
      {
        "user": "jguady",
        "created_at": "2017-04-27T04:24:55Z",
        "body": "This one looks like its been a long time coming. @danmosemsft \r\nAnything I should know about this one before I get started? "
      },
      {
        "user": "shmao",
        "created_at": "2017-11-02T00:10:06Z",
        "body": "We ported many tests from full framework to corefx. The current test coverage for System.Runtime.Serialization.* is 84%."
      }
    ]
  },
  {
    "number": 14370,
    "title": "Improve code coverage for System.Linq.Expressions",
    "created_at": "2015-03-21T00:09:08Z",
    "closed_at": "2020-01-31T09:02:42Z",
    "labels": [
      "area-System.Linq.Expressions",
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14370",
    "body": "According to the current code coverage report, this library is only at ~40%. Our general goal is closer to 90%, though this will depend on the library. We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14370/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "rafidka",
        "created_at": "2015-03-23T11:02:26Z",
        "body": "Since I am working on improving the coverage for System.Linq, can I get this one as well?\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-23T15:17:33Z",
        "body": "@rafidka, this library is fairly different, so I'd be surprised if there was a lot of reuse possible.  You're still interested?  I love the enthusiasm, but do you want to hold off until you're further along with System.Linq?\n"
      },
      {
        "user": "rafidka",
        "created_at": "2015-03-23T15:32:13Z",
        "body": "Yeah, I know it is different actually, but since I have experience working on Compilers and Computer Algebra, I found this task interesting to work on.\n\nI don't mind holding off until I make progress with System.Linq.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2016-09-11T12:11:32Z",
        "body": "Thanks to the efforts of multiple folks, this is now at ~84%.\n"
      }
    ]
  },
  {
    "number": 14318,
    "title": "Add leaveOpen constructor overload for CryptoStream",
    "created_at": "2015-03-03T08:25:29Z",
    "closed_at": "2020-01-31T09:00:10Z",
    "labels": [
      "api-approved",
      "area-System.Security",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14318",
    "body": "A CryptoStream always closes the wrapped stream when it is disposed. This not ideal when using a MemoryStream or when another action needs to be taken on the result.\n\nThe workarounds are manually calling `FlushFinalBlock()` and then getting the MemoryStream bytes before disposing the CryptoStream, or using a custom stream that ignores the dispose call from CryptoStream. Neither are ideal and can be avoided with a \"leaveOpen\" option.\n\nImplementation would be the same as DeflateStream, on `Dispose()` check if leaveOpen is true and don't close the internal stream.\n\n```\npublic CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode, bool leaveOpen)\n```\n\nI'm happy to do the change when System.Security.Cryptography.Encryption arrives.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14318/comments",
    "author": "bbowyersmyth",
    "comments": [
      {
        "user": "bbowyersmyth",
        "created_at": "2015-05-16T04:25:58Z",
        "body": "CryptoStream is now on Github\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2015-09-15T18:18:38Z",
        "body": "@bartonjs, what's your take on this?\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2015-09-15T21:06:25Z",
        "body": "@terrajobst I like it, and it matches what has come over the years to a lot of Stream-over-Stream constructors.\n\nBut since this is a type in full framework I'm not sure what our compatibility work windows are... certainly this could be done in the future branch.\n"
      },
      {
        "user": "bartonjs",
        "created_at": "2016-06-18T17:46:40Z",
        "body": "# API proposal\n\nAdd a leaveOpen constructor to CryptoStream to allow the caller to maintain ownership post-Dispose.\n\n``` diff\n    public partial class CryptoStream : System.IO.Stream, System.IDisposable\n    {\n        public CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode) { }\n+       public CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen) { }\n        public override bool CanRead { get { return default(bool); } }\n```\n\n## Semantics\n\nThe existing constructor would defer to the new one with `leaveOpen: false` to maintain compatibility.\n\nWhen constructed with `leaveOpen: true`, CryptoStream Dispose will not chain the call to Dispose to the underlying stream.\n"
      }
    ]
  },
  {
    "number": 4012,
    "title": "Implement RtlRestoreContext for Linux and OSX",
    "created_at": "2015-02-27T16:49:33Z",
    "closed_at": "2020-01-30T22:12:27Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/4012",
    "body": "This function is currently stubbed out in src\\pal\\src\\debug\\debug.cpp. It is required to make managed exception handling work on Linux and Mac.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/4012/comments",
    "author": "sergiy-k",
    "comments": [
      {
        "user": "kangaroo",
        "created_at": "2015-03-02T04:23:14Z",
        "body": "@sergiy-k Whats the issue with the OS X side here?  It seems to be complete for the variants of CONTEXT restore flags that I can see?\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-03-03T00:32:01Z",
        "body": "@kangaroo @sergiy-k From what I can see in the OSX code for the context setting (`CONTEXT_SetThreadContextOnPort`), it seems that we don't need to implement anything additional.\n"
      },
      {
        "user": "kangaroo",
        "created_at": "2015-03-03T01:09:42Z",
        "body": "@janvorli I had the same thought.  It seems complete.\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-03-04T01:44:00Z",
        "body": "Implemented as dotnet/coreclr#380\n"
      }
    ]
  },
  {
    "number": 14292,
    "title": "Two vector test failures for Release builds using 64-bit CoreCLR",
    "created_at": "2015-02-24T21:53:15Z",
    "closed_at": "2020-01-31T08:58:59Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14292",
    "body": "The following tests fail for release builds running with a 64-bit CoreCLR.\n\nVector2ReflectTest\nVector2ReflectTest1\n\nNote that the tests pass for debug builds and debug or release under 32-bit CoreCLR.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14292/comments",
    "author": "jhendrixMSFT",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2015-09-24T17:59:08Z",
        "body": "I haven't seen any issues with these any longer,even running under 64-bit CLR. This must have been fixed at some point.\n"
      }
    ]
  },
  {
    "number": 14290,
    "title": "Error message in System.ServiceProcess.ServiceController when building from VS2015 DevCmd",
    "created_at": "2015-02-24T18:33:49Z",
    "closed_at": "2020-01-31T08:58:52Z",
    "labels": [
      "bug",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14290",
    "body": "When building using Developer Command from VS 2015 I get following error message: (build doesn't fail though - jut red message)\n\n```\n  NativeTestService.cpp\ncl : Command line error D8027: cannot execute 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\c1xx.dll' [E:\\oss\\corefx\\src\\System.ServiceProcess.ServiceController\\tests\\NativeTestService\\NativeTestService.vcxproj]\n```\n\nIt doesn't repro on VS 2013 DevCmd.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14290/comments",
    "author": "krwq",
    "comments": [
      {
        "user": "pallavit",
        "created_at": "2015-10-28T20:27:55Z",
        "body": "Closing this bug as I can't repro this. @krwq let me know if you still see this.\n"
      }
    ]
  },
  {
    "number": 14289,
    "title": "Faster and/or vectorized sin/cos",
    "created_at": "2015-02-24T14:18:15Z",
    "closed_at": "2020-01-31T08:58:50Z",
    "labels": [
      "api-needs-work",
      "area-System.Numerics",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14289",
    "body": "In certain types of applications, the extra precision and correctness afforded by Math.Sin() and Math.Cos() are not worth the performance penalty they impose. These applications are often already using primarily single precision floats for computations, and thus have to round trip through double to make use of these methods. I propose adding a FastMath or Mathf or similar set of methods for lower precision high performance implementations of these methods.\n\nIf it were not for the existence of System.Numerics.Vectors, I would advocate that these simply be an external library separate from the core framework, but since the vector math library ships Quaternion and Matrix support, I would vastly prefer that these types make use of the faster math operations for things like calculating rotations. My reasoning is that these types exist in the first place for people concerned with performance, and as it stands they're simply too slow compared to the alternatives for them to see much use.\n\nFor a practical anecdote, I recently wrote an OpenGL draw call stress test to determine CPU overhead and how many draw calls I can push from my .NET app. By far the biggest consumer of frame time was Sin and Cos inside the quaternion rotation method used to rotate the cubes I was rendering. Using a fully managed implementation of SinCos based on the venerable CEPHES library cut that time roughly in half. This could be further extended by vectorizing with SIMD, provided that the Vector types support a few more intrinsics such as shuffle.\n\nI wouldn't mind doing this work if people think it would be useful. My main concern is that shipping System.Numerics.Vectors (quaternions and matrices) without these faster math routines will forever doom them to obscurity, since switching to reduced precision operations in the future would be a breaking change.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14289/comments",
    "author": "MikePopoloski",
    "comments": [
      {
        "user": "CarolEidt",
        "created_at": "2015-02-25T17:21:13Z",
        "body": "I think these are great suggestions - both the idea of having lower-precision Math operators as well as utilizing them for the Quaternion and Matrix types, which in any case don't use double precision.  What would you propose as the accuracy expectation for such libraries?  Would you expect that their results be accurate to within some .5 or some small number of ULPs for Single (vs. Double)?  If you think that would meet performance expectations, then giving them a name that would convey that, e.g. SingleMath or Math32, might be a good approach.\n\nRegarding shuffle, that is certainly something that we've considered, especially for the fixed vector types (e.g. Vector4) for which the API design is less challenging.  I worked on the design of the vector types, but my expertise and contributions are primarily in the JIT.  Once there is an API specification in place the JIT support for accelerating it as an intrinsic would be fairly straightforward.\n"
      },
      {
        "user": "MikePopoloski",
        "created_at": "2015-02-25T18:56:35Z",
        "body": "My plan as far as accuracy goes is to run every possible float value through the function and record the difference against a (float)Math.Sin() call, both peak and rms. The algorithm I'm using is borrowed from CEPHES and they make it clear that accuracy is very good up until input angles of 2^13, where you get partial accuracy loss. Above 2^24 the result is essentially meaningless and they assert. This is probably fine though, since rotations of huge angles are already a bad idea and the existing Math.Sin and Math.Cos return pretty terrible results for them anyway, so I doubt anyone is relying on that.\n\nI'll take a crack at rewriting the algorithm with SIMD to get an idea of how I'd like to use shuffle (and potentially any other intrinsics that are missing). That should help give a better idea of what the API could look like. If I can get the CoreCLR and CoreFx library building and working together I might even attempt to add the necessary support to the JIT. I did some SSE work for Mono back in the day so it should be fun to compare the codebases.\n"
      },
      {
        "user": "CarolEidt",
        "created_at": "2015-02-28T01:46:57Z",
        "body": "That sounds great.  Let me know if you have any questions regarding the JIT support for the intrinsics.  As I say, I think it would be fairly straightforward - especially if you've got some experience in the area.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2015-09-15T18:15:27Z",
        "body": "It seems this one needs a concrete proposal. @MikePopoloski, do you want to take a stab?\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-09-26T20:37:16Z",
        "body": "@MikePopoloski This is a pretty old issue, but do you still have any thoughts about how you would envision this being designed and exposed, from an API perspective?\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-17T23:50:13Z",
        "body": "If we can get a concrete proposal for this, I still think it's worth pursuing. I'm going to close it now. Please re-open this if you'd like to continue discussion of a concrete proposal.\n"
      }
    ]
  },
  {
    "number": 14286,
    "title": "MetadataReader overuses uint",
    "created_at": "2015-02-23T23:17:12Z",
    "closed_at": "2020-01-31T08:58:41Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14286",
    "body": "This was sent to me from @tmat, quote:\n\n> We should so something about all the int <-> uint casts in the reader – some of them are actual bugs or questionable behaviors, since we shouldn’t be throwing overflow exceptions.\n> \n> (found the following by looking for “internal uint” in Tables.cs)\n\n``` C#\nTypeDefinition.GetLayout() \n{ \n   … \n   // here we overflow:\n   int size = (int)reader.ClassLayoutTable.GetClassSize(classLayoutRowId);\n   … \n}\n\n/// Returns field layout offset, or -1 if not available.      \nFieldDefinition.GetOffset()\n{\n\n    uint layoutRowId = reader.FieldLayoutTable.FindFieldLayoutRowId(Handle);\n    if (layoutRowId == 0)\n    {\n        return -1;\n    }\n\n    uint offset = reader.FieldLayoutTable.GetOffset(layoutRowId);\n\n    // we reinterpret too big (but strictly speaking not invalid) values:\n    if (offset > int.MaxValue)\n    {\n        // CLI spec says:\n\n        // \"Offset (a 4-byte constant)\"\n        // \"Offset shall be zero or more\"\n        // \n        // Peverify fails with \"Type load failed\" error if offset is greater than Int32.MaxValue.\n        return -1;\n    }\n\n    return (int)offset;\n}\n\nint ExportedTypeExtensions.GetTypeDefinitionId\n{\n   // here we overflow:\n   return (int)exportedType.reader.ExportedTypeTable.GetTypeDefId(exportedType.rowId);\n}\n\ninternal void GetMethodRange(\n    TypeDefinitionHandle typeDef,\n    out int firstMethodRowId, \n    out int lastMethodRowId)\n{\n   uint typeDefRowId = typeDef.RowId;\n\n   // here we overflow:\n   firstMethodRowId = (int)this.TypeDefTable.GetMethodStart(typeDefRowId);\n   …\n}\n```\n\n> We should probably check the range and throw BadImageFormat when passing the value out thru public API to be consistent – we’re already doing that for handles in MemoryBlock.PeekReference:\n> \n> if (!TokenTypeIds.IsValidRowId(value)) ThrowReferenceOverflow();\n> \n> Internally “rowId” fields of handles should probably be ints, not uints since we assert: Debug.Assert(TokenTypeIds.IsValidRowId(rowId)) \n> \n> “token” fields of heap handles should stay uints since we use all the bits.\n> \n> Once we change the rowId to int and apply the type transitively I think we should be able to get rid of most uints.\n\nHe also shared the following implementation suggestion:\n\n> Currently we have\n\n``` C#\ninternal Int32 PeekInt32(int offset)\n{\n    CheckBounds(offset, sizeof(Int32));\n    return *(Int32*)(Pointer + offset);\n}\n\ninternal UInt32 PeekUInt32(int offset)\n{\n     CheckBounds(offset, sizeof(UInt32));\n     return *(UInt32*)(Pointer + offset);}\n}\n```\n\n> on MemoryBlock. What about \n\n``` C#\ninternal uint PeekUnsignedInt32(int offset)\n{\n    CheckBounds(offset, sizeof(uint));\n    return *(uint*)(Pointer + offset);\n}\n\ninternal int PeekSignedInt32(int offset)\n{\n    CheckBounds(offset, sizeof(int));\n    return *(int*)(Pointer + offset);\n}\n\ninternal int PeekInt32(int offset)\n{\n    CheckBounds(offset, sizeof(int));\n    var result = *(int*)(Pointer + offset);\n    if (result < 0) Throw();\n    return result;\n}\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14286/comments",
    "author": "nguerrera",
    "comments": [
      {
        "user": "talebi",
        "created_at": "2015-03-22T02:10:14Z",
        "body": "not sure if its related but when I add a reference to Autodesk Revit 2013/2015 to a project I get a compile error in (VS 2015 CTP):\nMetadata file 'E:\\dev\\cadtools_revit\\Source\\Lib\\RevitAPI\\RevitAPI_x64_2013.dll' could not be opened -- Row ID or heap offset is too large.\n"
      },
      {
        "user": "ellismg",
        "created_at": "2015-04-17T19:02:53Z",
        "body": "@nguerrera The VS folks think this is a problem in the metadata reader.  Who's a good person to take a look at this?\n"
      },
      {
        "user": "nguerrera",
        "created_at": "2015-04-17T20:10:59Z",
        "body": "@ellismg  @talebi. I can take a look even though I'll be out of the office.\n\nI've reopened dotnet/corefx#1238 as this tracks a separate issue. The RowId/Offset bounds checking is believed to be entirely correct and this tracks some engineering work (only slightly related) to have less use of uint in the codebase, but I see no reason why this would fix the issue.\n"
      },
      {
        "user": "nguerrera",
        "created_at": "2015-05-06T03:03:09Z",
        "body": "Fixed by dotnet/corefx#1557 \n"
      }
    ]
  },
  {
    "number": 3999,
    "title": "Implement Marshal.GetFunctionPointerForDelegate for Linux and OSX",
    "created_at": "2015-02-23T18:26:23Z",
    "closed_at": "2020-01-30T22:11:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3999",
    "body": "We need to implement Marshal.GetFunctionPointerForDelegate for Linux and OSX because it is required for implementation of managed debugger.\n\nIn order to make Marshal.GetFunctionPointerForDelegate work, we need to implement assembly code for the UM*Stub functions. These functions are currently stubbed out in src/vm/amd64/unixstubs.cpp. Windows implementation of this functions is located in src/vm/amd64/UMThunkStub.asm. We need to create src/vm/amd64/umthunkstub.S for Linux and port Windows code in there.\n\nHere is a simple example that can be used to test this code:\n\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        [DllImport(\"libdl\", SetLastError = true, CharSet = CharSet.Ansi)]\n        static extern IntPtr dlopen([MarshalAs(UnmanagedType.LPStr)]string lpFileName, int mode);\n\n```\n    [DllImport(\"libdl\", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]\n    internal static extern IntPtr dlsym(IntPtr hModule, string procName);\n\n    const int RTLD_NOW = 0x2;\n\n    // Handle returned by dlopen()\n    static IntPtr s_moduleHandle = IntPtr.Zero;\n\n    static void Main(string[] args)\n    {\n        s_moduleHandle = dlopen(\"libc.so.6\", RTLD_NOW);\n        if (s_moduleHandle != IntPtr.Zero)\n        {\n            TestGetDelegateForFunctionPointer();\n            TestGetFunctionPointerForDelegate();\n        }\n        else\n        {\n            Console.WriteLine(\"Failed to load libc\");\n        }\n    }\n\n    public delegate uint GetCurrentProcessIdDelegate();\n    static void TestGetDelegateForFunctionPointer()\n    {\n        Console.WriteLine(\"TestGetDelegateForFunctionPointer\");\n\n        // Get getpid Function Pointer\n        IntPtr ptr = dlsym(s_moduleHandle, \"getpid\");\n        if (ptr != IntPtr.Zero)\n        {\n            // Convert Function Pointer to Delegate\n            GetCurrentProcessIdDelegate getCurrentProcessIdDelegate = (GetCurrentProcessIdDelegate)Marshal.GetDelegateForFunctionPointer(ptr, typeof(GetCurrentProcessIdDelegate));\n\n            // Call getpid()\n            Console.WriteLine(\"Current process id: {0}\", getCurrentProcessIdDelegate.Invoke());\n        }\n    }\n\n    public delegate int CompareCallBackDelegate(IntPtr value1, IntPtr value2);\n    public delegate int ScanDirecroriesDelegate(string dir, ref IntPtr namelist, IntPtr filterCallback, IntPtr compareCallBack);\n    static void TestGetFunctionPointerForDelegate()\n    {\n        IntPtr namelist = IntPtr.Zero;\n\n        Console.WriteLine(\"TestGetFunctionPointerForDelegate\");\n\n        IntPtr ptr = dlsym(s_moduleHandle, \"scandir\");\n        if (ptr != IntPtr.Zero)\n        {\n            // Convert Function Pointer into Delegate\n            ScanDirecroriesDelegate scanDelegate = (ScanDirecroriesDelegate)Marshal.GetDelegateForFunctionPointer(ptr, typeof(ScanDirecroriesDelegate));\n\n            // Create a Delegate\n            CompareCallBackDelegate callbackDelegate = CompareDirectoriesCallBack;\n\n            // Get Function pointer from Delegate\n            IntPtr callback = Marshal.GetFunctionPointerForDelegate(callbackDelegate);\n\n            Console.WriteLine(\"Invoking scandir via deligate...\");\n            // Call scandir Func Pass Function point to native side as call back\n            scanDelegate.Invoke(\".\", ref namelist, IntPtr.Zero, callback);\n        }\n    }\n\n    public static int CompareDirectoriesCallBack(IntPtr value1, IntPtr value2)\n    {\n        Console.WriteLine(\"in CompareDirectoriesCallBack...\");\n        return 0;\n    }\n}\n```\n\n}\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3999/comments",
    "author": "sergiy-k",
    "comments": [
      {
        "user": "kangaroo",
        "created_at": "2015-02-24T00:18:14Z",
        "body": "I'll take this, should be easy enough.\n"
      },
      {
        "user": "sergiy-k",
        "created_at": "2015-02-24T01:04:48Z",
        "body": "@kangaroo Thank you!\n"
      },
      {
        "user": "kangaroo",
        "created_at": "2015-02-24T03:31:35Z",
        "body": "```\nbasalt:debug plasma$ lldb ./corerun -c . gfpfd.exe \n(lldb) target create \"./corerun\" --core \".\"\nerror: Unable to find process plug-in for core file '/Users/plasma/Work/dotnet/ports/osx/binaries/Product/amd64/debug'\n(lldb) settings set -- target.run-args  \"gfpfd.exe\"\n(lldb) r\nProcess 69508 launched: './corerun' (x86_64)\nTestGetDelegateForFunctionPointer\nCurrent process id: 69508\nTestGetFunctionPointerForDelegate\nInvoking scandir via deligate...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nin CompareDirectoriesCallBack...\nProcess 69508 exited with status = 0 (0x00000000) \n```\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-02-26T04:09:18Z",
        "body": "dotnet/coreclr#337\n"
      }
    ]
  },
  {
    "number": 14279,
    "title": "Enable code coverage report generation for individual projects",
    "created_at": "2015-02-23T18:14:20Z",
    "closed_at": "2020-01-31T08:58:23Z",
    "labels": [
      "enhancement",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14279",
    "body": "If we run a subset of the projects for code coverage, we should still generate a report.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14279/comments",
    "author": "mmitche",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2015-03-02T18:16:38Z",
        "body": "Fixed with dotnet/corefx#1005 \n"
      }
    ]
  },
  {
    "number": 14261,
    "title": "Support Proxy servers for our nuget download task",
    "created_at": "2015-02-20T01:37:05Z",
    "closed_at": "2020-01-31T08:57:29Z",
    "labels": [
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14261",
    "body": "See PR dotnet/corefx#788 where we reverted the fix for dotnet/corefx#38 because there were some unhanded cases which caused a null reference if the DefaultWebProxy is null. We should add support again with proper checks in place.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14261/comments",
    "author": "weshaggard",
    "comments": [
      {
        "user": "PatrickMcDonald",
        "created_at": "2015-05-20T16:25:22Z",
        "body": "@weshaggard This should hopefully resolve the issue with dotnet/corefx#38.  Obviously building from behind a proxy is not something that bothers anyone except me. :cry: \n"
      }
    ]
  },
  {
    "number": 14250,
    "title": "Improve code coverage for System.Xml.XmlDocument",
    "created_at": "2015-02-19T13:59:42Z",
    "closed_at": "2020-01-31T08:57:00Z",
    "labels": [
      "area-System.Xml",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14250",
    "body": "According to the current code coverage report, this library is only at 47%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14250/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "plabovich",
        "created_at": "2015-03-30T19:28:13Z",
        "body": "@stephentoub, when you have a chance, could you please take a quick look at the PR 1269. I'd like to get feedback on the style and approach so that I can continue working on this issue. \n"
      },
      {
        "user": "plabovich",
        "created_at": "2015-04-11T23:48:40Z",
        "body": "@stephentoub @krwq I've been working on tests for the next class XmlAttribute. Unfortunately, it's not possible to improve the code coverage a lot due to a technically unreachable code. There are at least 7 overridden methods in the class having code similar to:\n\n```\n    public override XmlNode AppendChild(XmlNode newChild)\n    {\n        if (PrepareOwnerElementInElementIdAttrMap())\n        {\n            // unreachable code as the condition is always false\n            // some code plus call of the base class implementation\n            ResetOwnerElementInElementIdAttrMap(/*...*/);\n        }\n        else\n        {\n            // call base implementation\n        }\n    }\n```\n\nThe issue is that `PrepareOwnerElementInElementIdAttrMap` is set to always return false. The associated comment says it was left behind after removal of schema and if it were removed more methods would have to be removed and it would be harder to add schema back. I'm not sure how much of it is applicable to corefx implementation. My gut feeling says it's not. I'd like to ask for approval to remove the unreachable/unused code. \n\nLooking forward to hearing from you.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-04-21T12:49:01Z",
        "body": "@krwq, is this actually dead code to be removed?\n"
      },
      {
        "user": "plabovich",
        "created_at": "2015-04-27T15:51:16Z",
        "body": "@krwq, could you please take a look when you have a chance? I'd love to continue working on improving System.Xml.XmlDocument.\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-04-28T22:42:32Z",
        "body": "It might be a dead code but please do not remove it just yet as there was no concrete decision if we want to bring schema back as it was or make an OOB out of it or not do the work at all.\n\nI want to be as close to desktop as possible with code for now so if I need to add schema back I can do it much easier.\n"
      },
      {
        "user": "plabovich",
        "created_at": "2015-04-29T19:16:27Z",
        "body": "I see. Thanks for clarifying.\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-21T05:38:17Z",
        "body": "This code was moved into System.Private.Xml. It's probably more useful to have new issue for that."
      }
    ]
  },
  {
    "number": 14249,
    "title": "Improve code coverage for System.Xml.XPath.XmlDocument",
    "created_at": "2015-02-19T13:59:12Z",
    "closed_at": "2020-01-31T08:56:58Z",
    "labels": [
      "area-System.Xml",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14249",
    "body": "According to the current code coverage report, this library is only at 15%! Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14249/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "ErwinJanssen",
        "created_at": "2015-02-25T20:15:09Z",
        "body": "When I inspected this code I noticed the following.\n\nOf all the classes that are tested (and listed below), only the bold ones are contained in the corefx\\src\\System.Xml.XPath.XmlDocument\\src folder. The rest of those classes are contained in corefx\\src\\Common\\src.\n1. Resources.Strings\n2. System.ArrayT\n3. System.NotImplemented\n4. System.SR\n5. System.Xml.Base64Encoder\n6. System.Xml.Bits\n7. **System.Xml.DocumentXmlWriter**\n8. **System.Xml.DocumentXPathNavigator**\n9. **System.Xml.DocumentXPathNodeIterator_AllElemChildren**\n10. **System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf**\n11. **System.Xml.DocumentXPathNodeIterator_ElemChildren**\n12. **System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf**\n13. **System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName**\n14. **System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName**\n15. **System.Xml.DocumentXPathNodeIterator_ElemDescendants**\n16. **System.Xml.DocumentXPathNodeIterator_Empty**\n17. System.Xml.Ref\n18. System.Xml.Schema.XmlUntypedConverter\n19. System.Xml.Schema.XsdDateTime\n20. System.Xml.SecureStringHasher\n21. System.Xml.ValidateNames\n22. System.Xml.XmlAttributeCollectionEx\n23. **System.Xml.XmlAttributeEx**\n24. System.Xml.XmlCharType\n25. System.Xml.XmlConvertEx\n26. **System.Xml.XmlDocumentEx**\n27. System.Xml.XmlExceptionHelper\n28. **System.Xml.XmlNodeEx**\n29. System.Xml.XmlNodeListEnumerator\n30. System.Xml.XmlParsingHelper\n31. System.Xml.XmlRawWriter\n32. System.Xml.XmlRawWriterBase64Encoder\n33. **System.Xml.XmlWellFormedWriter**\n34. **System.Xml.XPath.XmlDocumentExtensions**\n35. System.Xml.XPath.XPathNavigatorE\n36. **System.Xml.XPathNodeList**\n\nOther assemblies provide some coverage for the classes in corefx\\src\\Common\\src. Is it possible to test everything in common in one place, or should this be done separately for every assembly?\n\nAlso, is there a naming convention for namespaces in test files? I can't find a pattern in the existing tests.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-02-25T23:15:29Z",
        "body": "@krwq?\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-02-26T03:51:50Z",
        "body": "Yes, the coverage sounds pretty terrible. I don't believe it is appropriate. Also the question is if we should test behavior according to Xml/XPath spec or the old Desktop behavior. We must aim either for compat or for the spec. I personally think that spec should be the baseline although making breaking changes is not nice either. @ericstj, any thoughts?\n\n> Is it possible to test everything in common in one place, or should this be done separately for every assembly?\n\nOur goal is to have a good product and not good number on the coverage report so we can test it either in one of the products or create separate solution. Whatever we choose we will get to the goal. IMO it is more important to test it properly than thinking about how to solve meaningless engineering problem.\n\n> Also, is there a naming convention for namespaces in test files? I can't find a pattern in the existing tests.\n\nI don't think we have any convention especially not in Xml (this is mostly really old code). For new code I would just use any convention and just be consistent with it - it doesn't really matter as long as we test the product - it is just a name, right?\n"
      },
      {
        "user": "danmoseley",
        "created_at": "2017-02-21T05:37:58Z",
        "body": "This code was moved into System.Private.Xml. It's probably more useful to have new issue for that."
      }
    ]
  },
  {
    "number": 14248,
    "title": "Improve code coverage for System.Xml.XPath.XDocument",
    "created_at": "2015-02-19T13:58:32Z",
    "closed_at": "2020-01-31T08:56:56Z",
    "labels": [
      "area-System.Xml",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14248",
    "body": "According to the current code coverage report, this library is only at 54.5%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14248/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-02-21T05:38:22Z",
        "body": "This code was moved into System.Private.Xml. It's probably more useful to have new issue for that."
      }
    ]
  },
  {
    "number": 14247,
    "title": "Improve code coverage for System.Xml.XPath",
    "created_at": "2015-02-19T13:57:41Z",
    "closed_at": "2020-01-31T08:56:54Z",
    "labels": [
      "area-System.Xml",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14247",
    "body": "According to the current code coverage report, this library is only at 51%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14247/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-02-21T05:38:27Z",
        "body": "This code was moved into System.Private.Xml. It's probably more useful to have new issue for that."
      }
    ]
  },
  {
    "number": 14245,
    "title": "Improve code coverage for System.Resources.ResourceWriter",
    "created_at": "2015-02-19T13:56:23Z",
    "closed_at": "2020-01-31T08:56:49Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14245",
    "body": "According to the current code coverage report, this library is only at 56%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14245/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "ramarag",
        "created_at": "2015-04-10T23:43:34Z",
        "body": "With the change 67da6227c3 System.Resources.ResourceWriter has become System.Resources.ReaderWriter and has the following coverage details with aggregate to 80 %, the product coverage is 86% and 95%. To improve upon net coverage is only possible by a thorough testing of the spec line by line\n\n@stephentoub :I am closing this issue for now. Do reopen it if you think higher coverage is needed !!\n\n| Name | Covered | Uncovered | Coverable | Total | Coverage |\n| --- | --- | --- | --- | --- | --- |\n| System.Resources.ReaderWriter | 357 | 89 | 446 | 1016 | 80% |\n| **Core Product** : |  |  |  |  |  |\n| System.Resources.ResourceReader | 223 | 36 | 259 | 487 | 86.1% |\n| System.Resources.ResourceWriter | 103 | 5 | 108 | 272 | 95.3% |\n| **Helper Code** : |  |  |  |  |  |\n| System.Resources.FastResourceComparer | 10 | 6 | 16 | 49 | 62.5% |\n| System.SR | 21 | 42 | 63 | 208 | 33.3% |\n"
      }
    ]
  },
  {
    "number": 14243,
    "title": "Improve code coverage for System.Numerics.Vectors",
    "created_at": "2015-02-19T13:55:21Z",
    "closed_at": "2020-01-31T08:56:44Z",
    "labels": [
      "area-System.Numerics",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14243",
    "body": "According to the current code coverage report, this library is only at 72%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14243/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "mellinoe",
        "created_at": "2015-02-19T18:39:21Z",
        "body": "For what it's worth, I looked at the numbers for this library when we first start Code Coverage, and saw that a lot of the missed coverage was due to the unique structure of the code. In Vector<T>, for example, there are two code paths for almost every method, one which assumes hardware acceleration, and one which does not. Other types have similar duplication, but it's most evident in Vector<T>. Unless we do two runs, one of which is properly configured to use RyuJit, with the proper environment variables set, etc. then we will probably only see about 50% coverage on that class. When I looked, the coverage was about 52% for Vector<T>, which makes sense given the above. I think that number is probably driving the overall number down quite a bit, because it is an extremely large file.\n\nThat said, we should still look and see if there are any particular areas that have been neglected.\n"
      },
      {
        "user": "joshfree",
        "created_at": "2015-02-19T18:43:15Z",
        "body": "It would make sense to execute the tests in both scenarios (RyuJIT SIMD registers, and naïve software implementation) so the tests can be an early canary for RyuJIT regressions.  What would the test infra changes entail?\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2015-02-19T19:24:45Z",
        "body": "For this case, we'd probably need the ability to set some sort of configuration (environment variables, etc) for the execution of a test run, and then test System.Numerics.Vectors using two different configurations. I don't know how the code coverage tool is working now to be more specific than that, but that's the gist of it.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2015-02-19T23:04:22Z",
        "body": "Actually, this is further complicated by the fact that, in order for SIMD intrinsics to activate, we need to run in a 64-bit process, which doesn't seem to be the case right now. Tests are running 32-bit it seems.\n\nAlso, when we do allow 64-bit test process, we'll need to make sure that a good version of RyuJit is being used. This part probably isn't a problem, RyuJit is the standard 64-bit JIT now.\n"
      },
      {
        "user": "joshfree",
        "created_at": "2015-02-19T23:08:30Z",
        "body": "do we still have the ee compat mode quirk for simd? if so this sounds pretty straightforward.  compile and run the assembly in 64bit mode; then run it again with the compat quirks flag.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2015-02-19T23:13:28Z",
        "body": "Yes, essentially we just need to run with COMPLUS_FeatureSIMD set to '1' for one run, and then set to nothing for another. This is assuming we can get the test running in a 64-bit process.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-09-26T20:35:25Z",
        "body": "This is still something we can consider, but it will probably require setting up some build/CI configurations especially for this, which would be a lot of effort for just a little benefit.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2016-11-17T23:48:30Z",
        "body": "I'm going to close this because I don't think it's worth adding extra test configurations just to get this coverage.\n"
      },
      {
        "user": "AndyAyersMS",
        "created_at": "2016-11-18T01:07:09Z",
        "body": "The lab HW seems to run on AVX2 capable boxes these days, so that's what gets tested by default.\n\nNote we also have SSE2 specific vector codegen bugs at times, eg dotnet/coreclr#7977. This won't show up as a coverage issue in corefx.\n\nSo really there are 3 configurations to test: no SIMD, SSE2, and AVX2. We should do some of this sort of testing over in coreclr where we are already set up to run the jit in various creative ways.\n\n@RussKeldorph any thoughts? Can we already do stress mode testing, etc vs corefx?\n"
      },
      {
        "user": "RussKeldorph",
        "created_at": "2016-11-18T10:43:50Z",
        "body": "@AndyAyersMS This would be easy to set up on VMs and would acceptably cover the three scenarios as long as a high enough fraction of VMs are AVX2-capable.  Pinning to run on the few real (AVX2) boxes we have would be a bit more work but entirely doable.\n\n@mellinoe Note that we intend to bring SIMD to to 32-bit as well with RyuJIT/x86.\n"
      }
    ]
  },
  {
    "number": 14238,
    "title": "Improve code coverage for System.Diagnostics.TraceSource",
    "created_at": "2015-02-19T13:49:51Z",
    "closed_at": "2020-01-31T08:56:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14238",
    "body": "According to the current code coverage report, this library is only at 24%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14238/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "MarkPflug",
        "created_at": "2015-03-21T22:29:45Z",
        "body": "@stephentoub I've started working on this. My efforts currently put it at 85% coverage. I have a few more classes to go then I'll open a PR. It might be a while until I get around to finishing it up though. \n\nJust wanted to put a note on this so that no one else starts duplicating effort.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-22T14:48:05Z",
        "body": "That's awesome, @MarkPflug.  Thanks!  Looking forward to seeing the PR.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-25T06:02:17Z",
        "body": "Thanks to @MarkPflug, the coverage for this library is now at 98%!\n"
      }
    ]
  },
  {
    "number": 14237,
    "title": "Improve code coverage for System.Diagnostics.TextWriterTraceListener",
    "created_at": "2015-02-19T13:49:17Z",
    "closed_at": "2020-01-31T08:56:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14237",
    "body": "According to the current code coverage report, this library is only at 73%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14237/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "pallavit",
        "created_at": "2015-03-31T23:02:56Z",
        "body": "This needs to go to @Karelz who owns tracing support now. I am not sure how this can be assigned to him(I don't see him in the assignee list), can someone please help me here.\n"
      }
    ]
  },
  {
    "number": 14236,
    "title": "Improve code coverage for System.Console",
    "created_at": "2015-02-19T13:48:28Z",
    "closed_at": "2020-01-31T08:56:27Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14236",
    "body": "According to the current code coverage report, this library is only at 58%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14236/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "patriksvensson",
        "created_at": "2015-03-08T20:56:24Z",
        "body": "I'm not sure if I'm reading the code coverage report wrong, but it says 97,3%.\nPerhaps someone already fixed this?\n"
      },
      {
        "user": "patriksvensson",
        "created_at": "2015-03-08T20:58:30Z",
        "body": "I was reading the report wrong. Disregard my previous comment.\nI could take a look at this if you need an extra hand.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-08T20:59:38Z",
        "body": "@patriksvensson, yes, if you have the time to try to boost the coverage of this library, that'd be terrific.  Thanks!  I can change the label to \"grabbed by community\" if you'd like to give it a go?\n"
      },
      {
        "user": "patriksvensson",
        "created_at": "2015-03-08T21:01:22Z",
        "body": "Sure, I can give it a go :+1: \n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-08T21:03:06Z",
        "body": "Great!  All yours :smile: Thanks, again, for taking a look.  If you decide not to address it, that's fine, just let us know so we can return it to being \"up for grabs\".\n"
      },
      {
        "user": "patriksvensson",
        "created_at": "2015-03-08T21:05:19Z",
        "body": "Yes, of course. I'll keep you updated on this.\n"
      },
      {
        "user": "patriksvensson",
        "created_at": "2015-03-09T00:22:53Z",
        "body": "I've done about 45 minutes of work after reading all the contribution documents, and got the test coverage up from 58% to 62.5%, so by extrapolation I get a feeling that this will take a while :wink: \n\nSome thoughts:\n1. Some code that affects code coverage is shared code, such as code in the namespaces `Interop` and `System.SR`, which is linked into the System.Console solution. I don't think this functionality (if testable) should be covered by tests in System.Console, but I'm not sure of how you guys prefer it. Since they're linked into the solution, tests for this probably belong somewhere else?\n2. Some code is not covered due to coverage by code contracts. An example is the `SyncTextReader` which I wrote tests for, that have a 66.67% coverage for the methods `ReadBlockAsync` and `ReadAsync`. I could easily add some tests to make them 100%, but I got a feeling that this will be enforced by the contracts? Unless you want to have tests that ensure that the contracts are there...\n\nThese two issues makes it look like `System.Console` has a 58% code coverage, when it in reality probably is closer to 80%.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-09T14:12:28Z",
        "body": "Thanks, @patriksvensson.\n\n> Some code that affects code coverage is shared code, such as code in the namespaces Interop and System.SR, which is linked into the System.Console solution\n\nFor SR, some of the code will definitely not be testable, e.g. calls to Format that just aren't used by this project but that are in the shared SR type.  But other code in SR that's not currently being exercised probably should be.  I've not looked in depth, but for example there are ~20 resource strings that aren't being accessed, which suggests that there are some error paths not being exercised.  We would likely want tests exercising those paths, to make sure they behave as we expect; the goal here isn't really to exercise the functionality in SR, but the fact that the SR paths aren't being covered is a warning sign that there may be missing tests elsewhere.\n\nAs for the Interop namespace, working to improve code coverage helps with two key things:\n- Finding areas that aren't appropriately covered by tests\n- Finding dead code that can be removed\n\nIn the case of the Interop namespace, it's very possible that System.Console is including a file that it doesn't use at all, in which case the fix would be to simply remove it from being compiled into System.Console.dll.  I would not be surprised if that's both the issue and the right fix here.\n\n> Some code is not covered due to coverage by code contracts. An example is the SyncTextReader which I wrote tests for, that have a 66.67% coverage for the methods ReadBlockAsync and ReadAsync. I could easily add some tests to make them 100%, but I got a feeling that this will be enforced by the contracts?\n\nIf a type like SyncTextReader is defined in the System.Console assembly and is produced by calls to some methods on Console, it's unlikely that functionality will be exercised anywhere else in the system.  For base types like TextReader, it would probably be very useful to have some shared testing routines that verify correct handling of incorrect inputs, and that outputs abide by the stated contracts of methods; such shared test utilities could then be used by the Console tests as part of verifying the behavior of its custom SyncTextReader.  Unfortunately I don't think we have any such shared routines, at least not currently on GitHub; if you wanted to author those as part of writing these Console tests, that'd be very welcome.  Then other libraries could benefit from them as well.\n\n> got the test coverage up from 58% to 62.5%, so by extrapolation I get a feeling that this will take a while\n\nPlease feel free to submit incremental PRs for the improvements you've made and then decide whether you want to continue or not... this in no way needs to be all or nothing. :smile:  We'll likely just keep the Issue open if it looks like there's value in increasing the code coverage number further.  Again, the goal here isn't to get to a specific number; rather, it's to use the code coverage number as an indication of whether there may be more work to do... it's very possible we get to a certain point with a lower-than-normal code coverage number and decide that it's perfectly acceptable.  It's also possible a high code coverage number isn't high enough. :smile:  It's all very dependent on the library and tests in question.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-04-28T13:01:11Z",
        "body": "@patriksvensson, are you still working on this?  Just wondering if we should move it back to being up-for-grabs.\n"
      },
      {
        "user": "patriksvensson",
        "created_at": "2015-04-28T13:51:24Z",
        "body": "@stephentoub Yes, I've been doing some minor stuff, but haven't had any time last month to finish it. You can add it back to up-for-grabs and I'll give you a shout when I have more time (unless someone else grabbed it by then).\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-04-28T13:52:23Z",
        "body": "Sounds good, thanks.\n"
      }
    ]
  },
  {
    "number": 14232,
    "title": "Improve code coverage for Microsoft.Win32.Registry",
    "created_at": "2015-02-19T13:44:51Z",
    "closed_at": "2020-01-31T08:56:18Z",
    "labels": [
      "area-Microsoft.Win32",
      "increase-code-coverage",
      "test-enhancement",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14232",
    "body": "According to the current code coverage report, this library is only at 77%.  Our general goal is closer to 90%, though this will depend on the library.  We should investigate to see whether the current coverage level is appropriate, and if not, improve our test suites to provide better coverage.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14232/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "danmoseley",
        "created_at": "2017-02-21T05:58:15Z",
        "body": "It's at 83% now and the missing coverage is in relatively little used parts. I think we can focus elsewhere."
      }
    ]
  },
  {
    "number": 14229,
    "title": "Write a test for GetGroup never returning Empty Group",
    "created_at": "2015-02-19T07:02:33Z",
    "closed_at": "2020-01-31T08:56:10Z",
    "labels": [
      "area-System.Text.RegularExpressions",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14229",
    "body": "We merged dotnet/corefx#253 without a corresponding test.  We need to write one.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14229/comments",
    "author": "ellismg",
    "comments": [
      {
        "user": "guhou",
        "created_at": "2016-01-05T00:33:56Z",
        "body": "Is this issue still open? I'm looking to contribute to corefx and this seems like an easy place to start!\n"
      },
      {
        "user": "Priya91",
        "created_at": "2016-01-05T00:36:14Z",
        "body": "@guhou yes it's open. Please feel free to work on it. If you decide to, add the tag grabbed by community so there's no collisions.\n"
      }
    ]
  },
  {
    "number": 14112,
    "title": "Many solutions fail to build in VS without a full build.cmd first",
    "created_at": "2015-02-11T23:57:44Z",
    "closed_at": "2020-01-31T08:51:42Z",
    "labels": [
      "bug",
      "area-Infrastructure-libraries",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14112",
    "body": "The culprit in most cases is a missing project reference to XunitTraitsDiscoverers. VS needs the targets of project references to be in the scope of the current solution. While we could go and add this project everywhere, I think it will clutter the solutions. A better approach might be to use shared source files that we pull in the test targets/props.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14112/comments",
    "author": "nguerrera",
    "comments": [
      {
        "user": "nguerrera",
        "created_at": "2015-02-11T23:57:52Z",
        "body": "cc @weshaggard @krwq \n"
      },
      {
        "user": "ellismg",
        "created_at": "2015-03-11T23:13:55Z",
        "body": "@nguerrera was this fixed by dotnet/corefx#796?\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-03-11T23:37:21Z",
        "body": "@ellismg no this isn't fixed by that change. I've got a change where I'm creating this library as a nuget package and we will reference it via packages as opposed to a project reference which will take care of this. I hope to finish that sometime this week. \n"
      },
      {
        "user": "ellismg",
        "created_at": "2015-03-12T00:01:56Z",
        "body": "Thanks!\n"
      },
      {
        "user": "weshaggard",
        "created_at": "2015-07-11T23:36:48Z",
        "body": "This issue has been fixed by dotnet/corefx#1668. \n"
      }
    ]
  },
  {
    "number": 3950,
    "title": "Implement GetFileSizeEx in PAL",
    "created_at": "2015-02-11T05:03:43Z",
    "closed_at": "2020-01-30T22:09:56Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3950",
    "body": "Currently we have an empty stub in coreclr/src/pal/src/file/file.cpp.\nWe need to provide proper implementation for Linux and Mac and add a test under coreclr/src/pal/tests/palsuite.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3950/comments",
    "author": "sergiy-k",
    "comments": [
      {
        "user": "kangaroo",
        "created_at": "2015-02-11T05:19:32Z",
        "body": "It seems that CorUnix::InternalGetFileSize already does the correct thing here on platforms with SIZEOF_OFF_T > 4, it just needs to be wired up and tested.\n"
      },
      {
        "user": "benpye",
        "created_at": "2015-02-13T00:35:47Z",
        "body": "I believe this should now be closed as dotnet/coreclr#244 implements this.\n"
      }
    ]
  },
  {
    "number": 3924,
    "title": "abs overload for 64-bit ints missing when building with clang 3.5 (?)",
    "created_at": "2015-02-08T00:37:08Z",
    "closed_at": "2020-01-30T22:08:56Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3924",
    "body": "When building with clang I get the following warning and variations thereof:\n\n```\nIn file included from /home/poizan/coreclr/src/jit/jitpch.h:20:\n/home/poizan/coreclr/src/jit/jit.h:608:31: warning: absolute value function 'abs' given an argument of type 'ssize_t' (aka 'long') but has parameter of type 'int' which may cause truncation of value [-Wabsolute-value]\n    return ((size_t)          abs(x));\n                              ^\n/home/poizan/coreclr/src/jit/jit.h:608:31: note: use function 'std::abs' instead\n    return ((size_t)          abs(x));\n                              ^~~\n                              std::abs\n/home/poizan/coreclr/src/jit/jit.h:608:31: note: include the header <cstdlib> or explicitly provide a declaration for 'std::abs'\n```\n\nThis seems a bit weird as jitpch.h does in fact include cstdlib. But it also includes stdlib.h before that, so maybe the clang version of cstdlib fails to take this possibility into account.\n\nclang version:\n\n```\nDebian clang version 3.5.0-9 (tags/RELEASE_350/final) (based on LLVM 3.5.0)\nTarget: x86_64-pc-linux-gnu\nThread model: posix\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3924/comments",
    "author": "poizan42",
    "comments": [
      {
        "user": "poizan42",
        "created_at": "2015-02-08T21:22:30Z",
        "body": "Actually the standard lib cstdlib is never included. Here is the relevant part from running the clang preprocessor:\n\n``` C++\n#line 1750 \"/home/poizan/coreclr/src/pal/inc/rt/palrt.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/sscli_version.h\"\n#line 1751 \"/home/poizan/coreclr/src/pal/inc/rt/palrt.h\"\n#line 7 \"/home/poizan/coreclr/src/pal/inc/rt/stdint.h\"\n#line 8 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/windows.h\"\n#line 9 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/wchar.h\"\n#line 10 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/stdio.h\"\n#line 11 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/stddef.h\"\n#line 12 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/stdlib.h\"\n#line 13 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/limits.h\"\n#line 14 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/string.h\"\n#line 15 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/float.h\"\n#line 16 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/share.h\"\n#line 17 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/cstdlib\"\n#line 18 \"/home/poizan/coreclr/src/jit/jitpch.h\"\n#line 1 \"/home/poizan/coreclr/src/pal/inc/rt/intrin.h\"\n```\n\nThe pal cstdlib file just contains an include of palrt.h, but that only provides an `int abs(int)` from pal.h\n"
      },
      {
        "user": "sergiy-k",
        "created_at": "2015-02-09T19:50:57Z",
        "body": "@poizan42  Interesting… I don’t see this warning. I guess this is due to a difference in toolchain version. In any case, we should fix. I will add an overload unless, of course, you’d like to add it yourself and submit a pull request. :)\n\nRegarding inclusion of standard libraries. When building on Linux, only PAL is allowed to include header files from standard libraries. All other components of CoreCLR (runtime, jit, etc) are not allowed to do that. They should include PAL header files only.\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-10T09:00:36Z",
        "body": "@sergiy-k Do I understand it correctly that palrt.h should declare the signature itself and not include the system's cstdlib?\n"
      },
      {
        "user": "janvorli",
        "created_at": "2015-02-10T19:06:17Z",
        "body": "@poizan42 Yes, that's correct. Anything running on top of PAL should never include any platform specific headers.\n"
      },
      {
        "user": "sergiy-k",
        "created_at": "2015-02-11T00:38:02Z",
        "body": "@poizan42 I would put the declaration into pal.h next to abs(int) under “#if defined(BIT64)”.\nThank you!\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-11T01:57:06Z",
        "body": "So I should declare something like this?\n\n``` C++\n#ifdef __cplusplus\nextern \"C++\" {\ninline LONG abs(LONG _X)\n{\n    return labs(_X);\n}\n}\n#endif\n```\n\nThough the C++ standard seems a bit unclear on this, clang refuses to compile it with a declaration has a different language linkage error. Maybe we could define both with C++ linkage if building as C++. But do I understand correctly that PAL only declares the signature and we just hope that it's somewhere inside libc when linking? Is that even guaranteed?\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-11T02:24:02Z",
        "body": "Wait - LONG is (32bit) int and not 64bit. Clang seems to accept the overload with __int64.\n"
      },
      {
        "user": "sergiy-k",
        "created_at": "2015-02-11T03:09:30Z",
        "body": "@poizan42 Yes, correct. It should be __int64 instead of LONG.\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-11T13:48:39Z",
        "body": "Actually as pointed out by @jkotas labs takes a LONG, so we are actually completely missing an llabs implementation. But should we just add its signature and expect it to be in libc? It might be implemented as a macro or inline function and not even exist in the system's libc.\n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-11T22:16:42Z",
        "body": "Uhm, if I declare llabs with __int64 then clang gives me this warning:\n\n```\n/home/poizan/coreclr/src/pal/inc/pal.h:5438:27: warning: incompatible redeclaration of library function 'llabs' [-Wincompatible-library-redeclaration]\nPALIMPORT __int64 __cdecl llabs(__int64);\n                          ^\n/home/poizan/coreclr/src/pal/inc/pal.h:5438:27: note: 'llabs' is a builtin with type 'long long (long long)'\n```\n\nIt dosn't complain if I declare it with long long instead. \n"
      },
      {
        "user": "poizan42",
        "created_at": "2015-02-11T22:52:02Z",
        "body": "So what about this? Don't know if llabs should be 64-bit only?\n"
      },
      {
        "user": "sergiy-k",
        "created_at": "2015-02-11T23:56:32Z",
        "body": "@poizan42 I agree, it needs to be ‘long long’. I don’t think that it should to be 64bit only. Thank you!\n"
      }
    ]
  },
  {
    "number": 3907,
    "title": "Some exports of mscoree.dll missing",
    "created_at": "2015-02-06T11:24:49Z",
    "closed_at": "2020-01-30T22:08:15Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3907",
    "body": "Some methods in Marshal, such as ReadByte, ReadInt16, ReadInt32, needs some export functions from mscoree, e.g.\n[DllImport(Win32Native.SHIM, EntryPoint=\"ND_RU1\")]\npublic static extern byte ReadByte([MarshalAs(UnmanagedType.AsAny), In] Object ptr, int ofs)\nHowever, such ND_ functions cannot found.\nDoes such function only support windows? I think linux/Mac also need them\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3907/comments",
    "author": "zgxnet",
    "comments": [
      {
        "user": "jkotas",
        "created_at": "2015-02-06T11:52:59Z",
        "body": "These methods (Marshal.Read/Write methods with Object argument ) are not part of the refactored .NET Core System.Runtime.InteropServices contract. They are not going to be available on Linux/Mac.\n\nThey should be marked with Condition=\"FEATURE_LEGACYSURFACE\" in src\\mcorlib\\model.txt. It will get them physically excluded from mscorlib.dll on Linux/Mac. src\\mcorlib\\model.txt is used during mscorlib build to reduce it down to only what is actually needed for given platform.\n"
      },
      {
        "user": "zgxnet",
        "created_at": "2015-02-06T12:00:33Z",
        "body": "I think the ND_ functions are just simple memory read/write. Why not support them on linux?\nIt is just a few lines of code\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-02-06T12:23:39Z",
        "body": "We spent a lot of time on cleaning up and layering the .NET Core profiles to make it a lean foundation of .NET for future. .NET Core profile has many rarely used methods with questionable behavior removed.\n\nThe problem with Marshal Read/Write methods with Object argument is that they are very slow because of they need to marshal the Object argument. The marshalling of the Object argument has other questionable characteristics as well. These methods can be certainly implemented, but they are not good methods to have in .NET Core.\n"
      },
      {
        "user": "zgxnet",
        "created_at": "2015-02-06T12:55:31Z",
        "body": "It seems that System.Drawing uses a lot of those functions. It will be great if coreclr can run winforms and wpf, and we can build .net core into desktop apps.\n"
      },
      {
        "user": "zgxnet",
        "created_at": "2015-02-07T02:10:07Z",
        "body": "I think it is reasonable to remove these obsolete methods in coreclr. But I really hope that all the references can be removed in other parts of .net. In this way, .net core can run all the standard libraries.\n"
      },
      {
        "user": "zgxnet",
        "created_at": "2015-02-09T15:53:59Z",
        "body": "An important use case of core clr is to publish portable desktop .net apps. And winforms and wpf are also required. So it is very important for core clr to support all the common assemblies.\n"
      },
      {
        "user": "japj",
        "created_at": "2015-03-13T22:23:40Z",
        "body": "So, just checking if I understand it correctly.\n\nThis would mean modifying src\\mscorlib\\model.xml to add Condition=\"FEATURE_LEGACYSURFACE\" to the Marshall Read/Writexxxx Members that have a System.Object argument? \nIs that all or is there more involved here?\n\nAnd is there a way to test the correctness of this change on Windows? Or do I need to setup a Linux box to verify this?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-03-13T22:31:27Z",
        "body": "Yes, it is all that is required for the Marshal Read/Write methods.\n\nRunning \"build.cmd unixmscorlib\" on Windows, and verifying using ildasm that the methods are not in Unix mscorlib.dll anymore should be sufficient.\n"
      },
      {
        "user": "japj",
        "created_at": "2015-03-13T23:17:21Z",
        "body": "It seems I have been hit with a missing DIA SDK issue, so I cannot even compile the project correctly atm.\n\nIt unfortunately seems I unstalled VS2012 at some point after installing VS2013 and a repair of VS2013/Update4 did not bring back the missing DIA SDK files so I can not continue due to a compile error with missing dia2.h.\n"
      },
      {
        "user": "japj",
        "created_at": "2015-03-14T13:10:58Z",
        "body": "I got a bit further, however some functions still end up in the unixmscorlib and I don't really know where to solve that.\n\nThe BclRewriter\\mscorlib.implClosure.xml for these entries shows:\n\n```\n<Member Status=\"ImplClosure\" VO=\"internal\" Name=\"ReadInt64(System.Object,System.Int32)\" />\n<Member Status=\"ImplClosure\" VO=\"internal\" Name=\"WriteInt16(System.Object,System.Int32,System.Int16)\" />\n<Member Status=\"ImplClosure\" VO=\"internal\" Name=\"WriteInt64(System.Object,System.Int32,System.Int64)\" />\n```\n\nAny idea what might be causing this so I can look into it more?\n"
      },
      {
        "user": "jkotas",
        "created_at": "2015-03-15T02:17:49Z",
        "body": "Thanks for doing the due-diligence to verify that the issue is actually fixed! Here is how to get to the bottom of this problem:\n\nRun \"ildasm.exe mscorlib.dll /out:mscorlib.il\" and then search for where these methods are referenced. ildasm.exe is part of Windows SDK - it should be on your path in VS Developer Command Prompt.\n\nIt looks like some of the references are caused by overload resolution picking up the generic Object overload instead of the more specific one - adding an explicit cast of the argument to pick the specific overload should fix it.\n"
      },
      {
        "user": "japj",
        "created_at": "2015-03-15T17:03:33Z",
        "body": "It seems there was a WriteInt16(Object, Int32, Char) call I missed and the Read/WriteInt64(Object) were due to Read/WriteIntPtr(Object)\n"
      }
    ]
  },
  {
    "number": 3904,
    "title": "CMake WIN32 usage",
    "created_at": "2015-02-06T02:27:27Z",
    "closed_at": "2022-04-13T04:08:02Z",
    "labels": [
      "help wanted",
      "area-Infrastructure-coreclr"
    ],
    "url": "https://github.com/dotnet/runtime/issues/3904",
    "body": "As stated in dotnet/coreclr#69, `WIN32` is currently used all over the place to mean a couple things:\n- the generator is multi-configuration;\n- the host platform is Windows;\n- the generator is Visual Studio; and\n- the compiler is MSVC.\n\nCounter examples: Xcode is also multi-config, Ninja works on Windows, cross-compiling exists, and Clang works on Windows. The proper way to do these are:\n- check `CMAKE_CONFIGURATION_TYPES`; if it exists, the generator is multi-config;\n- `CMAKE_GENERATOR MATCHES \"Visual Studio\"`\n- check `MSVC` to set MSVC-specific flags.\n\nThis is a larger task since all uses of `WIN32` are suspect right now. About the only place it should be used is when checking things that are related to Windows being the _target_ platform of the current build.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/3904/comments",
    "author": "mathstuf",
    "comments": [
      {
        "user": "ellismg",
        "created_at": "2015-02-06T03:38:39Z",
        "body": "At the current time, we don't have any plans to support cross compilation of the native components of the run time on Windows, which is why we didn't take the time to break this up.  For us, the target and the host need to be same system and we don't have and current plans to use something other than msvc on Windows.\n\nThis doesn't mean that someone isn't welcome to submit a PR that will enable this support.  It just means that we are unlikely to do it ourselves and we are unlikely to devote resources to ensure we don't regress here (e.g. cross compilation jobs in the CI system).\n"
      },
      {
        "user": "mathstuf",
        "created_at": "2015-02-06T04:18:11Z",
        "body": "> About the only place it should be used is when checking things that are related to Windows being the target platform of the current build.\n\nI think adding emphasis to \"target\" was probably putting too much. As the project is still getting on its own two feet on non-Windows at all, cross-compile is certainly way down the list. It was just another thing which I saw `WIN32` being used for (I think). The more serious bit is the Visual Studio conflation as, personally, Ninja is just about the only way to do builds on Windows any more unless I need to debug. That bit will have to be addressed with dotnet/coreclr#102 at least (as I assume Xcode will be attempted).\n"
      },
      {
        "user": "kangaroo",
        "created_at": "2015-03-14T05:27:20Z",
        "body": "I think the ship has pretty much sailed on WIN\\* == BUILD_.  The PAL is designed to emulate the WIN_ needed bits to support the CoreCLR.\n\nIs there a remaining issue or action item here?\n"
      },
      {
        "user": "mathstuf",
        "created_at": "2015-03-14T08:39:45Z",
        "body": "Untangling the VS bits from the platform would be useful at least. Ninja is _much_ faster at running builds… I don't for see non-MSVC support not being lots of other work too, but maybe because Linux works without it, Windows should as well?\n"
      },
      {
        "user": "AaronRobinsonMSFT",
        "created_at": "2022-04-13T04:08:02Z",
        "body": "We now build using Ninja. Seems like this issue can be closed."
      },
      {
        "user": "mathstuf",
        "created_at": "2022-04-13T16:02:51Z",
        "body": "Maybe; most of the usages were conflated with the generator IIRC, but it wasn't all of them. That said, I mostly just came here because I was curious when I heard dotnet was using CMake and figured I could at least help out a bit. I have no idea when I'd get the time to peruse the CMake code again."
      }
    ]
  },
  {
    "number": 14040,
    "title": "Failure in Process_EnableRaiseEvents tests in CI build",
    "created_at": "2015-02-01T22:59:50Z",
    "closed_at": "2020-01-31T08:48:20Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14040",
    "body": "Starting:    System.Diagnostics.Process.Tests\n     System.Diagnostics.ProcessTests.ProcessTest.Process_EnableRaiseEvents [FAIL]\n        Process_CanRaiseEvents0001: isExited Event not called when EnableRaisingEvent is set to true.\n        Stack Trace:\n           c:\\j\\workspace\\dotnet_corefx_windows_prtest\\src\\System.Diagnostics.Process\\tests\\System.Diagnostics.Process.Tests\\ProcessTest.cs(97,0): at System.Diagnostics.ProcessTests.ProcessTest.Process_EnableRaiseEvents()\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14040/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "nguerrera",
        "created_at": "2015-02-02T19:33:03Z",
        "body": "Just hit this. Looking to fix it. \n"
      },
      {
        "user": "nguerrera",
        "created_at": "2015-02-07T23:58:38Z",
        "body": "@Priya91 Assigning to you since you are looking at other Process test stability issues. I had a theory about this being due to the timeout added to \"infinite\" process, but it did not pan out...\n"
      },
      {
        "user": "Priya91",
        "created_at": "2015-03-19T18:12:41Z",
        "body": "Assigning to @pallavit since she is looking at the process tests.\n"
      },
      {
        "user": "pallavit",
        "created_at": "2015-03-20T18:25:45Z",
        "body": "I made some changes to the Process test in the recent past and I am not seeing any new reports of this failure and so closing this for now. \n"
      }
    ]
  },
  {
    "number": 14038,
    "title": "Failure in DriveInfoTests.Get_VolumeLabel sporadically in CI builds",
    "created_at": "2015-02-01T15:49:55Z",
    "closed_at": "2020-01-31T08:48:14Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14038",
    "body": "  Discovering: System.IO.FileSystem.DriveInfo.Tests\n  Discovered:  System.IO.FileSystem.DriveInfo.Tests\n  Starting:    System.IO.FileSystem.DriveInfo.Tests\n     System.IO.FileSystem.DriveInfoTests.Get_VolumeLabel.Test01 [FAIL]\n        Error, Wrong volume label returned. Expected: BCLTest, Returned: \n        Stack Trace:\nc:\\j\\workspace\\dotnet_corefx_windows_prtest\\src\\System.IO.FileSystem.DriveInfo\\tests\\GetVolumeLabelTests.cs(106,0): at System.IO.FileSystem.DriveInfoTests.Get_VolumeLabel.Test01()\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14038/comments",
    "author": "stephentoub",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2015-02-03T08:17:21Z",
        "body": "I keep hitting this error locally as well.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-15T20:15:09Z",
        "body": "Fixed by dotnet/corefx#1109\n"
      }
    ]
  },
  {
    "number": 14033,
    "title": "System.Globalization.Extensions.Tests fail on Windows 7",
    "created_at": "2015-01-31T00:11:11Z",
    "closed_at": "2020-01-31T08:48:01Z",
    "labels": [
      "bug",
      "area-System.Globalization",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14033",
    "body": "On Win7 (7601) the globalization extensions have several failures:\n\nSystem.Globalization.Extensions.Tests.IdnaConformanceTests.TestAsciiPositive [FAIL]\n    System.ArgumentException : Decoded string is not a valid IDN name.\n    Parameter name: Unicode\n\nSystem.Globalization.Extensions.Tests.IdnaConformanceTests.TestUnicodePositive [FAIL]\n    Expected: <+á.+É¦ê>. Actual:<xn--0ca.xn--ssa73l>. Error on line number 61\n\nSystem.Globalization.Extensions.Tests.IdnaConformanceTests.TestAsciiNegative [FAIL]\n    Assert.Throws() Failure\n    Expected: typeof(System.ArgumentException)\n    Actual:   (No exception was thrown)\n\nSystem.Globalization.Extensions.Tests.NormalizationAll.NormalizeTest [FAIL]\n    Assert.False() Failure\n        (many lines like \"'\\x0068' is not matched with the normalized form '\\x2095 with Géò normalization\")\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14033/comments",
    "author": "bartonjs",
    "comments": [
      {
        "user": "ellismg",
        "created_at": "2016-01-08T05:56:12Z",
        "body": "These are passing now.\n"
      }
    ]
  },
  {
    "number": 14029,
    "title": "2 tests fail when run build.cmd",
    "created_at": "2015-01-30T00:44:59Z",
    "closed_at": "2020-01-31T08:47:41Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14029",
    "body": "Discovering: MemoryMappedFile.Tests\nDiscovered:  MemoryMappedFile.Tests\nStarting:    MemoryMappedFile.Tests\nErr445! Got unexpected exception: System.IO.IOException: There is not enough space on the disk.\n\n```\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore(SafeFileHandle fileHandle, String mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n at CreateViewAccessor.RunTestLargeCapacity(Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewAccessor.cs:line 378\n```\n\n  Err445! Got unexpected exception: System.IO.IOException: There is not enough space on the disk.\n\n```\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore(SafeFileHandle fileHandle, String mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n at CreateViewAccessor.RunTestLargeCapacity(Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewAccessor.cs:line 378\n```\n\n  Err445! Got unexpected exception: System.IO.IOException: There is not enough space on the disk.\n\n```\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore(SafeFileHandle fileHandle, String mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n at CreateViewStream.RunTestLargeCapacity(Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewStream.cs:line 377\n```\n\n  Err445! Got unexpected exception: System.IO.IOException: There is not enough space on the disk.\n\n```\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore(SafeFileHandle fileHandle, String mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n at CreateViewAccessor.RunTestLargeCapacity(Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewAccessor.cs:line 378\n```\n\n  FAiL! iCountErrors==3\n  Err445! Got unexpected exception: System.IO.IOException: There is not enough space on the disk.\n\n```\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore(SafeFileHandle fileHandle, String mapName, HandleInheritability inheritability, MemoryMappedFileAccess access, MemoryMappedFileOptions options, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n at CreateViewStream.RunTestLargeCapacity(Int64 capacity) in e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewStream.cs:line 377\n CreateViewAccessor.CreateViewAccessorTestCases [FAIL]\n    One or more test cases failed.\n    Stack Trace:\n       e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewAccessor.cs(32,0): at CreateViewAccessor.CreateViewAccessorTestCases()\n```\n\n  Finished:    System.Diagnostics.FileVersionInfo.Tests\n\n=== TEST EXECUTION SUMMARY ===\n     System.Diagnostics.FileVersionInfo.Tests  Total: 6, Errors: 0, Failed: 0, Skipped: 0, Time: 2.371s\n  FAiL! iCountErrors==2\n     CreateViewStream.CreateViewStreamTestCases [FAIL]\n        One or more test cases failed.\n        Stack Trace:\n           e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewStream.cs(31,0): at CreateViewStream.CreateViewStreamTestCases()\n  Finished:    MemoryMappedFile.Tests\n\n=== TEST EXECUTION SUMMARY ===\n     MemoryMappedFile.Tests  Total: 7, Errors: 0, Failed: 2, Skipped: 0, Time: 1.345s\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14029/comments",
    "author": "cnblogs-dudu",
    "comments": [
      {
        "user": "krwq",
        "created_at": "2015-01-30T00:55:05Z",
        "body": "@cnblogs-dudu could give some more details?\nWhat is your OS?\nHow much space do you have left on your E: drive?\nDoes it happens all the time or intermittently?\nHow did you run the tests? (did you use build.cmd or VS)\n\n@KrzysztofCwalina, @mellinoe is it known issue?\n\nThere is no way of diabling single test, I can disable only whole file.\n"
      },
      {
        "user": "mellinoe",
        "created_at": "2015-01-30T01:48:59Z",
        "body": "The tests try to make files with the following sizes, so I'd imagine they probably fail if your disk is too full:\n\n``` CSharp\nInt64[] capacities = { 2147483647, 2147483648, 2147483649, 4294967295, 4294967296, 4294967297 };\n```\n\nWe can probably either tone down these numbers or just make such a case deliver a warning, maybe?\n"
      },
      {
        "user": "cnblogs-dudu",
        "created_at": "2015-01-30T02:35:26Z",
        "body": "@krwq \n1) Windows Server 2012\n2) Free Space: 4.81G\n3) all the time\n4) use build.cmd\n"
      },
      {
        "user": "cnblogs-dudu",
        "created_at": "2015-01-30T02:38:43Z",
        "body": "@mellinoe \nfailed when capacity is 4294967296\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-01-30T07:06:06Z",
        "body": "@cnblogs-dudu, does it fail for 4294967295 too? Are you using 64bit OS or 32? What type of file system is your E:? Is it FAT32?\n"
      },
      {
        "user": "cnblogs-dudu",
        "created_at": "2015-01-30T09:45:29Z",
        "body": "@krwq \nfail too. \n64bit. \nNTFS. \n\n```\n4294967295\nSystem.IO.IOException: There is not enough space on the disk.\n\nat System.IO.MemoryMappedFiles.MemoryMappedFile.CreateCore\n(SafeFileHandle fileHandle,   String mapName,   HandleInheritability inheritability,   MemoryMappedFileAccess access,   MemoryMappedFileOptions options,  Int64 capacity) \nin e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.Windows.cs:line 45\n\nat System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity, MemoryMappedFileAccess access) \nin e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 180\n\nat System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String path, FileMode mode, String mapName, Int64 capacity) \nin e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\src\\System\\IO\\MemoryMappedFiles\\MemoryMappedFile.cs:line 107\n\nat CreateViewAccessor.RunTestLargeCapacity(Int64 capacity) \nin e:\\Dev\\GitHub\\DotNet\\corefx\\src\\System.IO.MemoryMappedFiles\\tests\\MemoryMappedFile\\CreateViewAccessor.cs:line 379\n```\n"
      },
      {
        "user": "cnblogs-dudu",
        "created_at": "2015-01-30T10:01:24Z",
        "body": "@krwq \nWhen increased free space from 4.81G to 9.21G, \"There is not enough space on the disk\" exception was gone.\n"
      },
      {
        "user": "krwq",
        "created_at": "2015-01-30T18:51:25Z",
        "body": "Ok, we should mark all tests testing large files as outer loop as creating 4GB files feels like an overkill for the unit test. In this case it looks like we might need to refactor the code to do so first.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-08-08T17:49:24Z",
        "body": "Fixed by dotnet/corefx#2334\n"
      }
    ]
  },
  {
    "number": 14028,
    "title": "Registry tests fail intermittently ",
    "created_at": "2015-01-29T17:28:07Z",
    "closed_at": "2020-01-31T08:47:39Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14028",
    "body": "Seems like this might be due to cross-talk between tests running at the same time.  I see shared state between tests.\n\n```\n Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rkpc.Test03 [FAIL]\n    ErrorUnexpected Exception: Xunit.Sdk.FalseException: Error Value not correctly created.\n       at Xunit.Assert.False(Boolean condition, String userMessage)\n       at Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rkpc.Test03() in c:\\jenkins\\workspace\\dotnet_corefx_windows_prtest\\src\\Microsoft.Win32.Registry\\tests\\RegistryKey\\RegistryKey_OpenSubKey_str_rkpc.cs:line 123\n    Stack Trace:\n       c:\\jenkins\\workspace\\dotnet_corefx_windows_prtest\\src\\Microsoft.Win32.Registry\\tests\\RegistryKey\\RegistryKey_OpenSubKey_str_rkpc.cs(129,0): at Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rkpc.Test03()\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14028/comments",
    "author": "ericstj",
    "comments": [
      {
        "user": "stephentoub",
        "created_at": "2015-02-02T19:17:36Z",
        "body": "Disabled parallelization in dotnet/corefx#595 \n"
      }
    ]
  },
  {
    "number": 14018,
    "title": "Unit test for DriveInfo.Set_VolumeLabel fails in non-elevated process",
    "created_at": "2015-01-27T10:23:25Z",
    "closed_at": "2020-01-31T08:47:12Z",
    "labels": [
      "test-bug",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14018",
    "body": "If the unit tests are executed in a non-elevated process (i.e. command prompt or VS not \"run as administrator\"), the Set_VolumeLabel unit test fails. I think that being able to build and test in a non-elevated process is a worthy goal; and since this is the only test that fails in this case, I think that it should be marked as OuterLoop and not included in the default test run.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14018/comments",
    "author": "eatdrinksleepcode",
    "comments": [
      {
        "user": "weshaggard",
        "created_at": "2015-01-27T19:52:30Z",
        "body": "We do have a goal of making sure tests as part of the build should not require admin access. @Priya91 I've assigned this to you please have a look.\n"
      },
      {
        "user": "stephentoub",
        "created_at": "2015-03-15T20:15:26Z",
        "body": "Fixed by dotnet/corefx#1109\n"
      }
    ]
  },
  {
    "number": 14003,
    "title": "Consider exposing extension methods for System.Array .Net 2 convenience methods",
    "created_at": "2015-01-21T16:58:52Z",
    "closed_at": "2020-01-31T08:46:32Z",
    "labels": [
      "api-needs-work",
      "area-System.Runtime",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/14003",
    "body": "With .net 2.0, `System.Array` was given a set of convenient LINQ like methods like those present on `List<T>`. Unlike `List<T>`, they were added as static methods. \nWhile, LINQ does offer some of these methods these variants do offer some differences/benefits as they are\nA: Optimized for arrays.\nB: Evaluated immediately. \nC: Always produce an array.\n\nThese methods are::\n\n``` csharp\nAsReadOnly<T>\nBinarySearch<T>\nConvertAll<T>\nExists<T>\nFind<T>\nFindAll<T>\nFindIndex<T>\nFindLast<T>\nFindLastIndex<T>\nForEach<T>\nIndexOf<T>\nLastIndexOf<T>\nSort<T>\nTrueForAll<T>\n```\n\nSome of these offer no real benefit over LINQ, but others can be very useful especially in array heavy APIs like Reflection. Primarily `ConvertAll` and `FindAll`. These methods would also make it easier to work with arrays. There would be no clash with existing LINQ methods as they have different names.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/14003/comments",
    "author": "mburbea",
    "comments": [
      {
        "user": "mikedn",
        "created_at": "2015-01-21T17:09:42Z",
        "body": "I'm not sure why should the core framework should introduce duplication. Such extension methods can be easily created by those who need them.\n\nAlso, ForEach<T> shouldn't be on this list, it's a useless method and is not available in some framework profiles.\n"
      },
      {
        "user": "mburbea",
        "created_at": "2015-01-21T17:33:13Z",
        "body": "I agree about `ForEach`. I didn't realize it wasn't available on all profiles but it is somewhat annoying that these methods aren't exposed anywhere. There are other cases where some duplication exists in the core framework and its an unfortunate bit of history that these methods came out before extension methods. I'm sure if extension methods came out first or at the same time they either \nA) Wouldn't exist (Just use LINQ, LINQ has optimizations for Array)\nB) Would have been made extension methods. \n"
      },
      {
        "user": "Bhaal22",
        "created_at": "2015-01-21T22:07:00Z",
        "body": "Hi,\n\nI would maybe add ConvertAll with a predicate as a paramer to combine a call to ConvertAll(list.FindAll(predicate)\n"
      },
      {
        "user": "AdamSpeight2008",
        "created_at": "2015-02-09T19:04:32Z",
        "body": "Also consider making some of the exist methods on System.Array generic.\n"
      },
      {
        "user": "terrajobst",
        "created_at": "2015-09-17T17:04:17Z",
        "body": "I don't understand what you're asking for. Are you asking for these methods to be added to `List<T>`? As you said, `Array` already exposes the methods you listed. AFAIK we didn't expose them all in first version of .NET Core (Windows Store) but we added most of them back since then.\n"
      },
      {
        "user": "mburbea",
        "created_at": "2015-09-17T19:24:05Z",
        "body": "No, I'm asking to create a static class that would include them as extensions methods.\nI'd like to be able to use `ConvertAll`/`FindAll` and methods like it as if they were instance methods.\n\ne.g.\n\n``` csharp\nvar a = new[]{1,2,3,4,5,6};\na.FindAll(x=> x%2 == 0).ConvertAll(x=>x.ToString());\n```\n\nRight now, I have to do the chaining like so:\n\n``` csharp\nvar a = new[]{1,2,3,4,5,6};\nArray.ConvertAll(Array.FindAll(a, x=> x%2 == 0)x=>x.ToString());\n```\n"
      },
      {
        "user": "joperezr",
        "created_at": "2016-11-18T16:06:24Z",
        "body": "We need a formal Api proposal if we want to go through with this.\n\nPersonally, given the methods are already exposed, I don't think there is a big gain with doing this.\n"
      },
      {
        "user": "karelz",
        "created_at": "2017-06-20T17:47:10Z",
        "body": "We do not see huge value in doing this.\r\nClosing as there hasn't been interest recently. If anyone wants to pick it up, provide API proposal, we will be happy to reopen."
      }
    ]
  },
  {
    "number": 13927,
    "title": "Memory allocation documentation for ImmutableDictionary Keys and Values",
    "created_at": "2014-12-14T21:44:11Z",
    "closed_at": "2020-01-31T08:42:46Z",
    "labels": [
      "documentation",
      "area-System.Collections",
      "help wanted"
    ],
    "url": "https://github.com/dotnet/runtime/issues/13927",
    "body": "## Background\n\nAs described in dotnet/corefx#246 (and previously in dotnet/corefx#147), the `Keys` and `Values` properties of `ImmutableDictionary<TKey, TValue>` cannot be used without incurring memory allocations on the heap. However, a slight modification of user code provides _equivalent_ behavior without these allocations.\n\nWith allocations:\n\n``` csharp\nforeach (var key in dictionary.Keys)\n{\n    ...\n}\n```\n\nWithout allocations:\n\n``` csharp\nforeach (var pair in dictionary)\n{\n    var key = pair.Key;\n}\n```\n## Suggestion\n\nSince updating the `Keys` and `Values` properties to eliminate the allocations would be a breaking change (#246), the only recourse is to update the documentation for these properties to describe steps a user can take to avoid allocations if these properties are used heavily within a particular application.\n## Caveat\n\nCare must be taken to ensure that the documentation does not read in a way that suggests the `Keys` and `Values` properties should not be used. The properties behave properly and would not be even a measurable source of time spent in the application in nearly all cases. This notice is only meant for users making heavy use of these properties who are also actively working to reduce the memory allocations performed within an especially performance-sensitive section of code.\n",
    "comments_url": "https://api.github.com/repos/dotnet/runtime/issues/13927/comments",
    "author": "sharwell",
    "comments": [
      {
        "user": "safern",
        "created_at": "2017-03-06T19:17:38Z",
        "body": "Does anyone want to suggest how should the docs be updated if this issue is still relevant? "
      },
      {
        "user": "AArnott",
        "created_at": "2017-03-06T19:54:43Z",
        "body": "I don't see why this is such an important issue. The docs never promise that enumeration of collections or dictionary keys is alloc-free. And as you point out, the API makes this pretty obvious. I've never seen a doc that mentions \"this allocates, but this other API doesn't\"."
      },
      {
        "user": "safern",
        "created_at": "2017-03-06T19:58:15Z",
        "body": "+1 with @AArnott comment. So then we should probably close this issue. right? "
      },
      {
        "user": "danmoseley",
        "created_at": "2017-03-06T20:04:45Z",
        "body": "+1"
      },
      {
        "user": "sharwell",
        "created_at": "2017-05-03T15:19:41Z",
        "body": "If you can use C# 7, one handy way to address this can be seen in dotnet/roslyn#19126. 👍 "
      }
    ]
  }
]