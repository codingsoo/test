[
  {
    "number": 25080,
    "title": "error_for_create_order_hyperliquid",
    "created_at": "2025-01-28T14:06:37Z",
    "closed_at": "2025-01-28T15:07:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/25080",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.52\n\n### Description\n\nhello, i've been looking for someone who has this error but i haven't found it. here's the code and the error. thanks to those who will take the time.\n\n### Code\n\n  /CODE\\\n\nimport ccxt\nimport config\n\nexchange = ccxt.hyperliquid({\n    'Wallet_API': config.Wallet_API,\n    'Secret_Key': config.Secret_Key,\n})\n\n\nsymbol = 'BTC/USDC:USDC'\norder_type = 'limit' #'market'\nside = 'buy' #'sell'\namount_in_usdc = 10\nprice = 50000 #The price at wich you want to buy or sell\n\ncurrent_price = (exchange.fetch_ticker(symbol)['ask'] + exchange.fetch_ticker(symbol)['bid'])/2\namount = amount_in_usdc / current_price\n\norder = exchange.create_order(symbol, order_type, side, amount, price)\n\n\n/ERROR\\\n\n raise AuthenticationError(self.id + ' requires \"' + key + '\" credential')\n ccxt.base.errors.AuthenticationError: hyperliquid requires \"privateKey\" credential \n\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/25080/comments",
    "author": "B3atrixKidd0",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2025-01-28T15:07:29Z",
        "body": "Hello @B3atrixKidd0,\n\nYou're using the wrong properties (wallet_api and secret_key)\n```\n'Wallet_API': config.Wallet_API,\n'Secret_Key': config.Secret_Key,\n```\n\nYou should use `walletAddress` and `privateKey`\n"
      },
      {
        "user": "B3atrixKidd0",
        "created_at": "2025-01-28T15:20:35Z",
        "body": "Thank you very much @carlosmiei for your response and your promptness. I didn’t think that the names of objects were that important."
      }
    ]
  },
  {
    "number": 24996,
    "title": "myokx : place stop-limit order",
    "created_at": "2025-01-22T19:41:22Z",
    "closed_at": "2025-01-29T09:27:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24996",
    "body": "### Operating System\n\nwindows\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\nlast\n\n### Description\n\nHi,\n\nI'm testing the myokx exchange, and try to place a \"stop limit\" order. The code seems to work and the \"response\" tell me the order is well placed.\nBut, I can't see this order in the history (I have also checked in the web dashboard and I do not see the order).\n\nNoticed that I'm in sandbox mode!\n\nAny idea of the problem ?\n\n### Code\n\n```\n(async () => {\n  try { \n    const params = Object.assign({\"stopPrice\":104000.0});\n\n    const order = await globalThis.exchange.createOrder(\n      'BTC/USDC',\n      'limit',\n      'buy',\n      0.001,\n      106000.0,\n      params\n    );\n    return order;\n  } catch (error) {\n    console.error(\"Error creating stop order:\", error);\n    throw error;\n  }\n})()\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24996/comments",
    "author": "vd3d",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2025-01-24T10:26:31Z",
        "body": "@vd3d Could you set option `trigger: true` when use fetch order?"
      },
      {
        "user": "vd3d",
        "created_at": "2025-01-24T16:44:10Z",
        "body": "Thanks @sc0Vu \n\nIt seems fetchOrders() + \"trigger:true\" does bring the missing orders, which is great, but I expected it to return all orders in one call.\n\n### Questions\n- Does this mean multiple API calls are required for this broker? Is this behavior documented somewhere?\n- I need a generic function to fetch all orders across (almost) all brokers. Is it feasible to create one, or should each broker's specific behavior be handled individually?\n- In the current scenario, multiple calls seem necessary. Are there alternatives to parameters like triggerPrice? I’ve found other possible values like {'stop': true, 'trigger': true, 'trailing': true, 'marginMode': true}.\n\nPS: For Binance, I’ve already managed this by fetching orders per symbol.\n\nThanks for your help"
      }
    ]
  },
  {
    "number": 24949,
    "title": "myokx.fetchOHCLV wrong candles ohcl",
    "created_at": "2025-01-19T20:08:43Z",
    "closed_at": "2025-01-20T10:25:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24949",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nlast\n\n### Description\n\nHi,\n\nI'm using the myokx exchange with the \"BTC/USD\" pair, I also use a 1d timeframe.\nBut the candles values are all the sames, I do not know why.... here is an extract of the result that I got:\n\n[1733097600000, 92000, 99000, 92000, 99000, 0.0002933],\n[1733184000000, 99001.2, 99001.2, 99001, 99001, 0.0001],\n[1733270400000, 99001, 99001, 99001, 99001, 0],\n[1733356800000, 99001, 99001, 99001, 99001, 0],\n[1733443200000, 99001, 99001, 99001, 99001, 0],\n[1733529600000, 99001, 99001, 99001, 99001, 0],\n[1733616000000, 99001, 99001, 99001, 99001, 0],\n[1733702400000, 99001.2, 99001.2, 99001.2, 99001.2, 0.00005],\n[1733788800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1733875200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1733961600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734048000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734134400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734220800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734307200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734393600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734480000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734566400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734652800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734739200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734825600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734912000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734998400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735084800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735171200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735257600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735344000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n\n...\n\nYou see, it is a flat line !\n\nBTW, here I test in \"sandbox\" mode, but even the live mode is weird !\n\n### Code\n\n```\n      const symbol = 'BTC/USD';\n      const timeframe = '1d';\n      const since = 1719957600000;\n      const limit = 204;\n      return await exchange.fetchOHLCV(symbol, timeframe, since, limit);     \n\n```\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24949/comments",
    "author": "vd3d",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2025-01-20T07:30:48Z",
        "body": "@vd3d I don't see any issue when test with live api. And I think the data came from exchange directly.\n\n```\n1735257600000 |  95805.1 |  97258.8 |  93400.2 |  94202.8 | 136.32858178\n1735344000000 |  94220.9 |  95420.5 |  94061.4 |  95227.4 |  43.42473312\n1735430400000 |  95112.2 |  95170.2 |  92894.5 |  93594.3 |  66.46617885\n1735516800000 |  93530.5 |  94870.4 |  91386.3 |  92732.2 | 138.88799604\n1735603200000 |  92662.7 |  96142.8 |  91964.4 |  93505.1 | 172.65785404\n1735689600000 |  93521.6 |  95011.1 |  92840.1 |  94470.4 |   69.8014824\n1735776000000 |  94497.1 |  97789.2 |  94287.6 |  96881.7 |  83.42530987\n1735862400000 |  96927.9 |  98968.7 |  96102.5 |  98182.2 |  55.68597049\n1735948800000 |  98200.5 |  98637.2 |  97610.2 |  98236.6 |  28.95665272\n1736035200000 |  98258.1 |    98816 |  97330.8 |  98412.7 |  24.88921394\n1736121600000 |  98563.8 | 102586.9 |  97979.7 |   102286 |  86.55377929\n1736208000000 | 102297.9 | 102796.7 |  96167.5 |  96918.3 |  96.13870084\n1736294400000 |    96800 |  97193.8 |  92534.9 |    95032 | 169.26715429\n1736380800000 |  94956.4 |  95172.8 |  91185.7 |  92467.6 | 168.89246268\n1736467200000 |  92528.6 |  95811.8 |    92275 |  94767.9 | 138.63196324\n1736553600000 |  94666.8 |  94980.1 |  93849.5 |  94544.9 |  26.46155646\n1736640000000 |  94588.4 |  95354.1 |  93687.9 |  94421.9 |   38.9102092\n1736726400000 |  94508.9 |  95859.1 |  89189.1 |  94537.3 | 198.46288768\n1736812800000 |  94526.7 |  97294.8 |  94386.9 |  96570.4 | 113.19427479\n1736899200000 |  96544.5 | 100708.2 |  96482.3 |   100521 | 132.14269573\n1736985600000 | 100532.5 | 100843.4 |  97333.8 |  99979.2 | 105.61780481\n1737072000000 |  99996.5 | 105914.9 |  99996.5 |   104199 | 121.43813392\n1737158400000 | 104182.7 | 104899.7 | 102292.3 | 104484.7 | 103.01346354\n```"
      },
      {
        "user": "vd3d",
        "created_at": "2025-01-20T10:25:01Z",
        "body": "Ok thanks for your help."
      }
    ]
  },
  {
    "number": 24819,
    "title": "blofin does not apper to recognize common market symbol BTC/USDT",
    "created_at": "2025-01-10T01:42:05Z",
    "closed_at": "2025-01-10T10:10:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24819",
    "body": "### Operating System\n\nDebian\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.46\n\n### Description\n\n  File \"/home/vigor/algo/watcher/.py11/lib/python3.11/site-packages/ccxt/async_support/blofin.py\", line 1417, in fetch_my_trades                                                                                                                                                                   \r\n    market = self.market(symbol)                                                                                                                                                                                                                                                                   \r\n             ^^^^^^^^^^^^^^^^^^^                                                                                                                                                                                                                                                                   \r\n  File \"/home/vigor/algo/watcher/.py11/lib/python3.11/site-packages/ccxt/base/exchange.py\", line 5275, in market                                                                                                                                                                                   \r\n    raise BadSymbol(self.id + ' does not have market symbol ' + symbol)                                                                                                                                                                                                                            \r\nccxt.base.errors.BadSymbol: blofin does not have market symbol BTC/USDT                                              \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24819/comments",
    "author": "vigorIv2",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2025-01-10T10:10:23Z",
        "body": "Hello @vigorIv2,\r\n\r\nBlofin only supports perps/swaps through the api and not Spot markets. So `BTC/USDT:USDT` (linear perp) would work whereas `BTC/USDT` would not. \r\n"
      }
    ]
  },
  {
    "number": 24696,
    "title": "Missing pair with Hyperliquid",
    "created_at": "2024-12-30T09:50:27Z",
    "closed_at": "2024-12-30T14:44:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24696",
    "body": "### Operating System\n\nWin 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nccxt-4.4.43\n\n### Description\n\nSo, got an issue where all the market is not loaded, it end at the 166 market, it cannot the load HYENA/USDC market\n\n### Code\n\n```\r\nfrom typing import List, Optional\r\nimport ccxt.async_support as ccxt\r\nimport pandas as pd\r\nfrom pydantic import BaseModel\r\nfrom decimal import Decimal, getcontext, ROUND_DOWN\r\nimport math\r\nimport ta\r\nimport time\r\nimport asyncio\r\nfrom typing import Dict\r\nfrom tabulate import tabulate\r\nfrom datetime import datetime, timedelta\r\n\r\nclass UsdtBalance(BaseModel):\r\n    total: float\r\n    free: float\r\n    used: float\r\n\r\n\r\nclass Info(BaseModel):\r\n    success: bool\r\n    message: str\r\n\r\n\r\nclass Order(BaseModel):\r\n    id: str\r\n    pair: str\r\n    type: str\r\n    side: str\r\n    price: float\r\n    size: float\r\n    reduce: bool\r\n    filled: float\r\n    remaining: float\r\n    timestamp: int\r\n\r\n\r\nclass TriggerOrder(BaseModel):\r\n    id: str\r\n    pair: str\r\n    type: str\r\n    side: str\r\n    price: float\r\n    trigger_price: float\r\n    size: float\r\n    reduce: bool\r\n    timestamp: int\r\n\r\n\r\nclass Position(BaseModel):\r\n    pair: str\r\n    side: str\r\n    size: float\r\n    usd_size: float\r\n    entry_price: float\r\n    current_price: float\r\n    unrealized_pnl: float\r\n    liquidation_price: float\r\n    margin_mode: str\r\n    leverage: int\r\n    hedge_mode: bool\r\n    open_timestamp: int = 0\r\n    take_profit_price: float | None = None\r\n    stop_loss_price: float | None = None\r\n\r\nclass Market(BaseModel):\r\n    internal_pair: str\r\n    base: str\r\n    quote: str\r\n    price_precision: float\r\n    contract_precision: float\r\n    contract_size: Optional[float] = 1.0\r\n    min_contracts: float\r\n    max_contracts: Optional[float] = float('inf')\r\n    min_cost: Optional[float] = 0.0\r\n    max_cost: Optional[float] = float('inf')\r\n    coin_index: Optional[int] = 0\r\n    market_price: Optional[float] = 0.0\r\n\r\n\r\ndef get_price_precision(price: float) -> float:\r\n    log_price = math.log10(price)\r\n    order = math.floor(log_price)\r\n    precision = 10 ** (order - 4)\r\n    return precision\r\n    \r\ndef number_to_str(n: float) -> str:\r\n    s = format(n, 'f')\r\n    s = s.rstrip('0')\r\n    if s.endswith('.'):\r\n        s = s[:-1]\r\n    \r\n    return s\r\n\r\n\r\nclass PerpHyperliquid:\r\n    def __init__(self, public_adress=None, private_key=None):\r\n        hyperliquid_auth_object = {\r\n            \"walletAddress\": public_adress,\r\n            \"privateKey\": private_key,\r\n        }\r\n        self.public_adress = public_adress\r\n        getcontext().prec = 10\r\n        if hyperliquid_auth_object[\"privateKey\"] == None:\r\n            self._auth = False\r\n            self._session = ccxt.hyperliquid()\r\n        else:\r\n            self._auth = True\r\n            self._session = ccxt.hyperliquid(hyperliquid_auth_object)\r\n        self.market: dict[str, Market] = {}\r\n\r\n    async def close(self):\r\n        await self._session.close()\r\n\r\n    async def load_markets(self) -> dict[str, Market]:\r\n        data = await self._session.publicPostInfo(params={\r\n            \"type\": \"metaAndAssetCtxs\",\r\n        })\r\n        resp = {}\r\n        for i in range(0,len(data[0][\"universe\"])):\r\n            mark_price = float(data[1][i][\"markPx\"])\r\n            object = data[0][\"universe\"][i]\r\n            size_decimals = int(object[\"szDecimals\"])\r\n            resp[object[\"name\"]+\"/USDC\"] = Market(\r\n                internal_pair=object[\"name\"],\r\n                base=object[\"name\"],\r\n                quote=\"USDC\",\r\n                price_precision=get_price_precision(mark_price),\r\n                contract_precision=1/(10**(size_decimals)),\r\n                min_contracts=1/(10**(size_decimals)),\r\n                min_cost=10,\r\n                coin_index=i,\r\n                market_price=mark_price,\r\n            )\r\n        self.market = resp\r\n        return resp\r\n\r\n\r\n\r\n    def ext_pair_to_pair(self, ext_pair) -> str:\r\n        return self.market[ext_pair].internal_pair\r\n\r\n    def pair_to_ext_pair(self, pair) -> str:\r\n        return pair+\"/USDC\"\r\n    \r\n    def ext_pair_to_base(self, ext_pair) -> str:\r\n        return ext_pair.split(\"/\")[0]\r\n\r\n    def get_pair_info(self, ext_pair) -> str:\r\n        pair = self.ext_pair_to_pair(ext_pair)\r\n        if pair in self.market:\r\n            return self.market[pair]\r\n        else:\r\n            return None\r\n        \r\n    def size_to_precision(self, pair: str, size: float) -> float:\r\n        size_precision = self.market[pair].contract_precision\r\n        decimal_precision = Decimal(str(size_precision))\r\n        rounded_size = Decimal(str(size)).quantize(decimal_precision, rounding=ROUND_DOWN)\r\n        return float(rounded_size)\r\n    \r\n    def price_to_precision(self, pair: str, price: float) -> float:\r\n        price_precision = self.market[pair].price_precision\r\n        price_dec = Decimal(str(price))\r\n        precision_dec = Decimal(str(price_precision))\r\n        \r\n        rounded_price = (price_dec // precision_dec) * precision_dec\r\n        \r\n        return float(rounded_price)\r\n\r\n    async def get_last_ohlcv(self, pair, timeframe, limit=1000) -> pd.DataFrame:\r\n        if limit > 5000:\r\n            limit = 5000\r\n        base_pair = self.ext_pair_to_base(pair)\r\n        ts_dict = {\r\n            \"1m\": 1 * 60 * 1000,\r\n            \"5m\": 5 * 60 * 1000,\r\n            \"15m\": 15 * 60 * 1000,\r\n            \"1h\": 60 * 60 * 1000,\r\n            \"2h\": 2 * 60 * 60 * 1000,\r\n            \"4h\": 4 * 60 * 60 * 1000,\r\n            \"1d\": 24 * 60 * 60 * 1000,\r\n        }\r\n        end_ts = int(time.time() * 1000)\r\n        start_ts = end_ts - ((limit-1) * ts_dict[timeframe])\r\n        data = await self._session.publicPostInfo(params={\r\n            \"type\": \"candleSnapshot\",\r\n            \"req\": {\r\n                \"coin\": base_pair,\r\n                \"interval\": timeframe,\r\n                \"startTime\": start_ts,\r\n                \"endTime\": end_ts,\r\n            },\r\n        })\r\n        df = pd.DataFrame(data)\r\n        df['date'] = pd.to_datetime(df['t'].astype(float), unit='ms')\r\n        df.set_index('date', inplace=True)\r\n        df = df[['o', 'h', 'l', 'c', 'v']].astype(float)\r\n        df.rename(columns={\r\n            'o': 'open',\r\n            'h': 'high',\r\n            'l': 'low',\r\n            'c': 'close',\r\n            'v': 'volume'\r\n        }, inplace=True)\r\n\r\n        return df\r\n\r\n    async def get_balance(self) -> UsdtBalance:\r\n        data = await self._session.publicPostInfo(params={\r\n            \"type\": \"clearinghouseState\",\r\n            \"user\": self.public_adress,\r\n        })\r\n        total = float(data[\"marginSummary\"][\"accountValue\"])\r\n        used = float(data[\"marginSummary\"][\"totalMarginUsed\"])\r\n        free = total - used\r\n        return UsdtBalance(\r\n            total=total,\r\n            free=free,\r\n            used=used,\r\n        )\r\n\r\n    async def set_margin_mode_and_leverage(self, pair, margin_mode, leverage):\r\n        if margin_mode not in [\"cross\", \"isolated\"]:\r\n            raise Exception(\"Margin mode must be either 'cross' or 'isolated'\")\r\n        asset_index = self.market[pair].coin_index\r\n        try:\r\n            nonce = int(time.time() * 1000)\r\n            req_body = {}\r\n            action = {\r\n                \"type\": \"updateLeverage\",\r\n                \"asset\": asset_index,\r\n                \"isCross\": margin_mode == \"cross\",\r\n                \"leverage\": leverage,\r\n            }\r\n            signature = self._session.sign_l1_action(action, nonce)\r\n            req_body[\"action\"] = action\r\n            req_body[\"nonce\"] = nonce\r\n            req_body[\"signature\"] = signature\r\n            await self._session.private_post_exchange(params=req_body)\r\n        except Exception as e:\r\n            raise e\r\n\r\n        return Info(\r\n            success=True,\r\n            message=f\"Margin mode and leverage set to {margin_mode} and {leverage}x\",\r\n        )\r\n\r\n    async def get_open_positions(self, pairs=[]) -> List[Position]:\r\n        data = await self._session.publicPostInfo(params={\r\n            \"type\": \"clearinghouseState\",\r\n            \"user\": self.public_adress,\r\n        })\r\n        # return data\r\n        positions_data = data[\"assetPositions\"]\r\n        positions = []\r\n        for position_data in positions_data:\r\n            position = position_data[\"position\"]\r\n            if self.pair_to_ext_pair(position[\"coin\"]) not in pairs and len(pairs) > 0:\r\n                continue\r\n            type_mode = position_data[\"type\"]\r\n            hedge_mode = True if type_mode != \"oneWay\" else False\r\n            size = float(position[\"szi\"])\r\n            side = \"long\" if size > 0 else \"short\"\r\n            size = abs(size)\r\n            usd_size = float(position[\"positionValue\"])\r\n            current_price = usd_size / size\r\n            positions.append(\r\n                Position(\r\n                    pair=self.pair_to_ext_pair(position[\"coin\"]),\r\n                    side=side,\r\n                    size=size,\r\n                    usd_size=usd_size,\r\n                    entry_price=float(position[\"entryPx\"]),\r\n                    current_price=current_price,\r\n                    unrealized_pnl=float(position[\"unrealizedPnl\"]),\r\n                    liquidation_price=float(position[\"liquidationPx\"]),\r\n                    margin_mode=position[\"leverage\"][\"type\"],\r\n                    leverage=position[\"leverage\"][\"value\"],\r\n                    hedge_mode=hedge_mode,\r\n                )\r\n            )\r\n\r\n        return positions\r\n\r\n    async def place_order(\r\n        self,\r\n        pair,\r\n        side,\r\n        price,\r\n        size,\r\n        type=\"limit\",\r\n        reduce=False,\r\n        error=True,\r\n        market_max_spread=0.1,\r\n    ) -> Order:\r\n        if price is None:\r\n            price = self.market[pair].market_price\r\n        try:\r\n            asset_index = self.market[pair].coin_index\r\n            nonce = int(time.time() * 1000)\r\n            is_buy = side == \"buy\"\r\n            req_body = {}\r\n            if type == \"market\":\r\n                if side == \"buy\":\r\n                    price = price * (1 + market_max_spread)\r\n                else:\r\n                    price = price * (1 - market_max_spread)\r\n\r\n            print(number_to_str(self.price_to_precision(pair, price)))\r\n            action = {\r\n                \"type\": \"order\",\r\n                \"orders\": [{\r\n                    \"a\": asset_index,\r\n                    \"b\": is_buy,\r\n                    \"p\": number_to_str(self.price_to_precision(pair, price)),\r\n                    \"s\": number_to_str(self.size_to_precision(pair, size)),\r\n                    \"r\": reduce,\r\n                    \"t\": {\"limit\":{\"tif\": \"Gtc\"}}\r\n                }],\r\n                \"grouping\": \"na\",\r\n                \"brokerCode\": 1,\r\n            }\r\n            signature = self._session.sign_l1_action(action, nonce)\r\n            req_body[\"action\"] = action\r\n            req_body[\"nonce\"] = nonce\r\n            req_body[\"signature\"] = signature\r\n            resp = await self._session.private_post_exchange(params=req_body)\r\n            \r\n            order_resp = resp[\"response\"][\"data\"][\"statuses\"][0]\r\n            order_key = list(order_resp.keys())[0]\r\n            order_id = resp[\"response\"][\"data\"][\"statuses\"][0][order_key][\"oid\"]\r\n\r\n            order = await self.get_order_by_id(order_id)\r\n\r\n            if order_key == \"filled\":\r\n                order_price = resp[\"response\"][\"data\"][\"statuses\"][0][order_key][\"avgPx\"]\r\n                order.price = float(order_price)\r\n            \r\n            return order\r\n        except Exception as e:\r\n            if error:\r\n                raise e\r\n            else:\r\n                print(e)\r\n                return None\r\n\r\n\r\n    async def get_order_by_id(self, order_id) -> Order:\r\n        order_id = int(order_id)\r\n        data = await self._session.publicPostInfo(params={\r\n            \"user\": self.public_adress,\r\n            \"type\": \"orderStatus\",\r\n            \"oid\": order_id,\r\n        })\r\n        order = data[\"order\"][\"order\"]\r\n        side_map = {\r\n            \"A\": \"sell\",\r\n            \"B\": \"buy\",\r\n        }\r\n        return Order(\r\n            id=str(order_id),\r\n            pair=self.pair_to_ext_pair(order[\"coin\"]),\r\n            type=order[\"orderType\"].lower(),\r\n            side=side_map[order[\"side\"]],\r\n            price=float(order[\"limitPx\"]),\r\n            size=float(order[\"origSz\"]),\r\n            reduce=order[\"reduceOnly\"],\r\n            filled=float(order[\"origSz\"]) - float(order[\"sz\"]),\r\n            remaining=float(order[\"sz\"]),\r\n            timestamp=int(order[\"timestamp\"]),\r\n        )\r\n\r\n    async def cancel_orders(self, pair, ids=[]):\r\n        try:\r\n            asset_index = self.market[pair].coin_index\r\n            nonce = int(time.time() * 1000)\r\n            req_body = {}\r\n            orders_action = []\r\n            for order_id in ids:\r\n                orders_action.append({\r\n                    \"a\": asset_index,\r\n                    \"o\": int(order_id),\r\n                })\r\n            action = {\r\n                \"type\": \"cancel\",\r\n                \"cancels\": orders_action,\r\n            }\r\n            signature = self._session.sign_l1_action(action, nonce)\r\n            req_body[\"action\"] = action\r\n            req_body[\"nonce\"] = nonce\r\n            req_body[\"signature\"] = signature\r\n            resp = await self._session.private_post_exchange(params=req_body)\r\n            return Info(success=True, message=f\"Orders cancelled\")\r\n        except Exception as e:\r\n            return Info(success=False, message=\"Error or no orders to cancel\")\r\n\r\nasync def show_markets():\r\n    try:\r\n        # Initialize exchange\r\n        perp = PerpHyperliquid()\r\n        \r\n        # Load markets\r\n        markets = await perp.load_markets()\r\n        \r\n        # Process and sort market data\r\n        market_info = []\r\n        for pair, market in sorted(markets.items()):\r\n            market_info.append({\r\n                'Pair': pair,\r\n                'Price': f\"${market.market_price:,.2f}\",\r\n                'Min Size': f\"{market.min_contracts}\",\r\n                'Price Precision': f\"{market.price_precision}\",\r\n                'Index': market.coin_index\r\n            })\r\n        \r\n        # Print formatted results\r\n        print(\"\\nHyperliquid Perpetual Markets:\")\r\n        print(\"-\" * 80)\r\n        format_str = \"{:<12} {:<15} {:<12} {:<15} {:<8}\"\r\n        print(format_str.format(\"Pair\", \"Price\", \"Min Size\", \"Price Precision\", \"Index\"))\r\n        print(\"-\" * 80)\r\n        \r\n        for m in market_info:\r\n            print(format_str.format(\r\n                m['Pair'], \r\n                m['Price'], \r\n                m['Min Size'], \r\n                m['Price Precision'], \r\n                m['Index']\r\n            ))\r\n            \r\n    finally:\r\n        await perp.close()\r\n\r\nex = PerpHyperliquid(\r\n    public_adress=\"something\",\r\n    private_key=\"another\",\r\n)\r\nawait ex.load_markets()\r\n\r\nasync def display_markets():\r\n    try:\r\n        # Initialize exchange\r\n        perp = PerpHyperliquid()\r\n        \r\n        # Load markets\r\n        markets = await perp.load_markets()\r\n        \r\n        # Format data\r\n        print(\"\\nHyperliquid Markets:\")\r\n        print(f\"{'Symbol':<15} {'Price':<12} {'Min Size':<12} {'Precision':<10}\")\r\n        print(\"-\" * 50)\r\n        \r\n        # Display sorted markets\r\n        for pair, market in sorted(markets.items()):\r\n            print(f\"{pair:<15} {market.market_price:<12.2f} {market.min_contracts:<12.8f} {market.price_precision:<10.8f}\")\r\n            \r\n    finally:\r\n        await perp.close()\r\n\r\n\r\nawait display_markets()\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24696/comments",
    "author": "Aku-Origin",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-30T10:02:15Z",
        "body": "Hello @Aku-Origin,\r\n\r\nIt seems to be working on my end, but please bear in mind that `HYENA/USDC` is a spot symbol; the perp does not seem available. \r\n\r\n```\r\n✗ p hyperliquid market \"HYENA/USDC\"                                    \r\nPython v3.12.3\r\nCCXT v4.4.43\r\nhyperliquid.market(HYENA/USDC)\r\n{'active': True,\r\n 'base': 'HYENA',\r\n 'baseId': '10127',\r\n 'contract': False,\r\n 'contractSize': None,\r\n 'created': None,\r\n 'expiry': None,\r\n 'expiryDatetime': None,\r\n 'future': False,\r\n 'id': '@127',\r\n 'index': False,\r\n 'info': {'circulatingSupply': '1041116.5657062',\r\n          'coin': '@127',\r\n          'dayBaseVlm': '120826.92',\r\n          'dayNtlVlm': '687913.108381',\r\n          'index': '127',\r\n          'isCanonical': False,\r\n          'markPx': '6.4188',\r\n          'midPx': '6.4284',\r\n          'name': '@127',\r\n          'prevDayPx': '5.7471',\r\n          'tokens': ['168', '0'],\r\n          'totalSupply': '1199706.76587023'},\r\n 'inverse': None,\r\n 'limits': {'amount': {'max': None, 'min': None},\r\n            'cost': {'max': None, 'min': 10.0},\r\n            'leverage': {'max': None, 'min': None},\r\n            'price': {'max': None, 'min': None}},\r\n 'linear': None,\r\n 'lowercaseId': None,\r\n 'maker': 0.0001,\r\n 'margin': None,\r\n 'marginModes': {'cross': None, 'isolated': None},\r\n 'option': False,\r\n 'optionType': None,\r\n 'percentage': None,\r\n 'precision': {'amount': 0.01,\r\n               'base': None,\r\n               'cost': None,\r\n               'price': 0.0001,\r\n               'quote': None},\r\n 'quote': 'USDC',\r\n 'quoteId': 'USDC',\r\n 'settle': None,\r\n 'settleId': None,\r\n 'spot': True,\r\n 'strike': None,\r\n 'subType': None,\r\n 'swap': False,\r\n 'symbol': 'HYENA/USDC',\r\n 'taker': 0.00035,\r\n 'tierBased': None,\r\n 'type': 'spot'}\r\n```\r\n"
      },
      {
        "user": "Aku-Origin",
        "created_at": "2024-12-30T13:36:51Z",
        "body": "How did you do that, i seem a little dumb today, i understand the spot part but i don't understand where to put it for it to work...\r\n\r\nthanks a lot for the answer!"
      },
      {
        "user": "Aku-Origin",
        "created_at": "2024-12-30T13:53:15Z",
        "body": "was able to do it, thanks found my way"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-30T14:44:58Z",
        "body": "@Aku-Origin, I'm glad you found a way."
      }
    ]
  },
  {
    "number": 24675,
    "title": "BloFin API - does not support SPOT market?",
    "created_at": "2024-12-28T08:39:32Z",
    "closed_at": "2024-12-28T12:17:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24675",
    "body": "### Operating System\n\nLinux Debian 12\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.33\n\n### Description\n\nunfortunately there is no indication in the API documentation that the API does not support spot markets. when i execute load_markets(), it only returns the SWAP markets.\r\ndoes anyone know a way to enable spot trading?\r\n\r\n\n\n### Code\n\n```\r\n  \r\nload_markets()\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24675/comments",
    "author": "AltePfeife",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-28T10:42:08Z",
        "body": "Hello @AltePfeife,\r\n\r\nNo, afaik, blofin only supports swap trading through the API"
      }
    ]
  },
  {
    "number": 24673,
    "title": "Hyperliquid fetch_trades not able to return trade data without a wallet address or user",
    "created_at": "2024-12-28T00:56:10Z",
    "closed_at": "2024-12-28T14:51:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24673",
    "body": "### Operating System\r\n\r\ndebian\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.89, 4.4.43\r\n\r\n### Description\r\n\r\nTrying to understand some differences between how ccxt fetches public data from hyperliquid vs other exchanges. For example, either ccxt or Hyperliquid requires a user | address in order to return trade data. Other exchanges, such as binance, return public trade data as expected.\r\n\r\nIs this a limitation of Hyperliquid's public API?\r\n\r\nExamples are provided, below.\r\n\r\nWhen trying to fetch trade data from hyperliquid, the following was observed:\r\n\r\n`\r\n>>> import ccxt  # noqa: E402 \r\n>>> h = ccxt.hyperliquid()\r\n>>> h.fetch_trades('ETH:USDC/USDC')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ndms/hype/hypenv/lib/python3.10/site-packages/ccxt/hyperliquid.py\", line 887, in fetch_trades\r\n    userAddress, params = self.handle_public_address('fetchTrades', params)\r\n  File \"/home/ndms/hype/hypenv/lib/python3.10/site-packages/ccxt/hyperliquid.py\", line 2563, in handle_public_address\r\n    raise ArgumentsRequired(self.id + ' ' + methodName + '() requires a user parameter inside \\'params\\' or the wallet address set')\r\nccxt.base.errors.ArgumentsRequired: **hyperliquid fetchTrades() requires a user parameter inside 'params' or the wallet address set**\r\n`\r\n\r\nIn contrast, using binance, recent historical trades for the selected contract are returned, as expected:\r\n\r\n`\r\n>>> import ccxt  # noqa: E402                                                                                                                    \r\n>>> b = ccxt.binanceusdm()                                                                                                                       \r\n>>> b.fetch_trades('ETH/USDT:USDT') \r\n[{'info': {'a': '1948039310', 'p': '3337.77', 'q': '0.063', 'f': '4922008929', 'l': '4922008930', 'T': '1735346579940', 'm': False}, 'timestamp': 1735346579940, 'datetime': '2024-12-28T00:42:59.940Z', 'symbol': 'ETH/USDT:USDT', 'id': '1948039310', 'order': None, 'type': None, 'side': 'buy', 'takerOrMaker': None, 'price': 3337.77, 'amount': 0.063, 'cost': 210.27951, 'fee': {'cost': None, 'currency': None}, 'fees': []},\r\n...\r\n'info': {'a': '1948039809', 'p': '3338.42', 'q': '0.011', 'f': '4922010284', 'l': '4922010284', 'T': '1735346624827', 'm': True}, 'timestamp': 1735346624827, 'datetime': '2024-12-28T00:43:44.827Z', 'symbol': 'ETH/USDT:USDT', 'id': '1948039809', 'order': None, 'type': None, 'side': 'sell', 'takerOrMaker': None, 'price': 3338.42, 'amount': 0.011, 'cost': 36.72262, 'fee': {'cost': None, 'currency': None}, 'fees': []}]\r\n`\r\n\r\nAny clarity that the ccxt team can provide would be greatly appreciated.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24673/comments",
    "author": "block-13",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-28T11:08:07Z",
        "body": "Hello @block-13,\r\n\r\n> Is this a limitation of Hyperliquid's public API?\r\n\r\nYes, although the information is completely public and accessible you can't fetch all trades from every wallet, you always need to specify a wallet.\r\n\r\n"
      },
      {
        "user": "block-13",
        "created_at": "2024-12-28T14:51:33Z",
        "body": "That is unfortunate, but many thanks for the clarification. Keep up the fantastic work."
      }
    ]
  },
  {
    "number": 24665,
    "title": "createOrderPositionWithTakeprofitStoploss",
    "created_at": "2024-12-26T17:34:29Z",
    "closed_at": "2024-12-30T14:45:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24665",
    "body": "### Operating System\n\nwindos\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.4.32\n\n### Description\n\nI used method \"createOrderWithTakeProfitAndStopLoss\" but in order objet stopLossPrice and takeProfitPrice and triggerPrice set null value.\r\nIf all items are given to it via parameters \r\n\r\nand order created in spot without stopLoss and profit\n\n### Code\n\n```\r\n   Dictionary<string, object> parameters;\r\n\r\n parameters = new Dictionary<string, object>() {\r\n     { \"stopLoss\", new Dictionary<string, object>() {\r\n         { \"triggerPrice\", Math.Round(triggerStopPrice, 2) },\r\n         { \"stopLossPrice\", Math.Round(stopPrice, 2) },\r\n     }},\r\n     { \"takeProfit\", new Dictionary<string, object>() {\r\n         { \"takeProfitPrice\", Math.Round(profiteprice, 2) },\r\n             \r\n     }},\r\n };\r\n\r\n var order = exch.CreateOrder(symbol, orderType, side, amount, price, parameters).GetAwaiter().GetResult();\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24665/comments",
    "author": "azim1399",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-26T17:39:42Z",
        "body": "Hello @azim1399,\r\n\r\nWHat's the exchange?\r\n\r\n`stopLoss/takeProfit` are different from `stopLossPrice/takeProfitPrice` the first are the ones used by `createOrderWithTakeProfitAndStopLoss` and it's used to place orders with attached tp+sl whereas the latter is used to place independent takeProfit/stopLoss orders"
      },
      {
        "user": "azim1399",
        "created_at": "2024-12-26T18:10:12Z",
        "body": "Hello @carlosmiei \r\nCoinex Exchange\r\nI want to create an order with a specific stop loss and a specific take profit, what method should I use?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-26T18:11:53Z",
        "body": "Hello @azim1399,\r\n\r\nCoinex does not support that, you can see that `exch.Has[\"createOrderWithTakeProfitAndStopLoss\"]` is `false`.\r\n\r\n\r\nYou need to place independent orders that will act as the takeProfit/stopLoss"
      },
      {
        "user": "azim1399",
        "created_at": "2024-12-26T18:22:14Z",
        "body": "Hello @carlosmiei \r\nI used the following code in C# and it returned true for coinex\r\nbool supportsTpSl = this.Exchange.has.ContainsKey(\"createOrderWithTakeProfitAndStopLoss\");\r\n\r\nWhich of the following exchanges does it support?\r\nBinance\r\nXt\r\nKucoin\r\nBingx\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-26T18:45:50Z",
        "body": "@azim1399 \r\n\r\nonly Bingx supports it for perps"
      }
    ]
  },
  {
    "number": 24576,
    "title": "python  Upgrade from 1.93.1 to 4.4.40 Binance issue",
    "created_at": "2024-12-17T09:49:21Z",
    "closed_at": "2024-12-19T08:51:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24576",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n1.93.1\n\n### Description\n\nuse 1.93.1 error  {\"code\":-5000,\"msg\":\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\"}\r\nIf use 4.4.40 error  'binance' object has no attribute 'fapiPrivate_get_positionrisk'\r\nCan I solve this problem by only upgrading the ccxt version without changing the code?\r\n\r\nthank you\n\n### Code\n\n```\r\n  exchange_class = getattr(ccxt, binance)\r\n    exchange = exchange_class({\r\n        'apiKey': api_key,\r\n        'secret': secret_key,\r\n        'password': passphrase,\r\n        'timeout': 30000,\r\n        'enableRateLimit': True,\r\n        'options': {\r\n            'createMarketBuyOrderRequiresPrice': False,\r\n        },\r\n    })\r\n    infos = exchange.fapiPrivate_get_positionrisk({'symbol': symbol})\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24576/comments",
    "author": "huyufan",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-17T09:51:13Z",
        "body": "Hello @huyufan,\r\n\r\nYes if you upgrade your ccxt version that issue will be fixed. BUt instead of `fapiPrivate_get_positionrisk ` you might need to call `exchange .fapiPrivateGetPositionRisk({'symbol': symbol})` "
      },
      {
        "user": "huyufan",
        "created_at": "2024-12-17T10:13:00Z",
        "body": "@carlosmiei I have many interfaces affected. What I mean is, can I solve the Binance issue by upgrading to a specific version, such as 2.2.0 (currently I don't know which version works), without upgrading to 4.4.40, and without modifying the code?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-17T10:16:31Z",
        "body": "@huyufan The thing is, that version is severely outdated and not recommended. I would suggest upgrading to a recent version and get in touch with us if you face any issues with the upgrade. "
      },
      {
        "user": "huyufan",
        "created_at": "2024-12-17T10:36:20Z",
        "body": "@carlosmiei  ok. thank you!"
      }
    ]
  },
  {
    "number": 24442,
    "title": "Issue with auth on Paradex",
    "created_at": "2024-12-04T10:02:40Z",
    "closed_at": "2024-12-04T11:38:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24442",
    "body": "### Operating System\r\n\r\nwidows\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.35\r\n\r\n### Description\r\n\r\nParadex on ccxt uses privateKey to auth, create JWT token etc.\r\nSometimes the starknet privatekey can be 63 length (65 with \"0x\" prefix). I believe it can causes issues with ccxt code that expects an hexadecimal key : \"binascii.Error: Non-base16 digit found\" when trying to retrieve balance of the account.\r\n\r\nccxt\\async_support\\paradex.py\", line 914 :\r\n```\r\n    def sign_message(self, message, privateKey):\r\n        return self.sign_hash(self.hash_message(message), privateKey[-64:])\r\n```\r\nyou can see the [-64] that doesn't work with 65 len privatekeys\r\nI tried replacing \"0x\" by \"0x0\" to have a hexadecimal key but it leads to an error : ccxt.base.errors.BadRequest: paradex {\"error\":\"NOT_ONBOARDED\",\"message\":\"user has never called the /onboarding endpoint\"}\r\nwhile the paradex account already exists so the user should be already onboarded I guess.\r\n\r\nI don't understand everything of this but what I am almost sure is that I get a privateKey with a length of 65 and without any modifications, it may not be suited for the signature fonctions that expects a 66 length:\r\n\r\nccxt\\async_support\\paradex.py\"\r\n```\r\n    def sign_hash(self, hash, privateKey):\r\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\r\n        r = signature['r']\r\n        s = signature['s']\r\n        v = self.int_to_base16(self.sum(27, signature['v']))\r\n        return '0x' + r.rjust(64, '0') + s.rjust(64, '0') + v\r\n\r\n    def sign_message(self, message, privateKey):\r\n        return self.sign_hash(self.hash_message(message), privateKey[-64:])\r\n```\r\n\r\nthank you\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24442/comments",
    "author": "Scribulus",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T10:04:35Z",
        "body": "Hello @Scribulus,\r\n\r\nThanks for reporting it, we will take a look and get back to you asap.  cc/ @sc0Vu "
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T10:26:21Z",
        "body": "@Scribulus Btw, can you try to provide the private key of the ETH address and not the paradex private key?"
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-04T11:03:31Z",
        "body": "@carlosmiei oh, you are right, it requires the ETH private key, not the paradex private Key.  It was making sense to me to use the privateKey given by the paradex account I want to connect to.\r\n\r\n now it works ^^'\r\n \r\n Sorry it was confused by this"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T11:09:16Z",
        "body": "@Scribulus Right now we're using the ETH PK to derive the starknet private key, but ideally we should support both and we're checking if that is possible. "
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-04T11:21:53Z",
        "body": "@carlosmiei ok,  I guess the ETH private key is required for \"onboarding\" to paradex from ccxt.  but if the user onboard manually on the paradex app and can sign transaction with the paradex private key and the ETH wallet address only it could be better for the wallet security."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T11:36:27Z",
        "body": "@Scribulus I agree,  we will do our best to support both and avoid having to use the main wallet pk"
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-04T11:38:55Z",
        "body": "thank you for the fast support !"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T11:40:40Z",
        "body": "@Scribulus Np, just let us know if anything! 🙂 "
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-05T19:32:27Z",
        "body": "@carlosmiei Do you know if subaccounts and/or vault are available with ccxt. tried a few keys in options dict  like \"account\", \"subaccount\" when connecting or using get balance but nothing.\r\nIs it the right place to ask ?"
      }
    ]
  },
  {
    "number": 24399,
    "title": "[Question] Managing Multiple API Keys with WebSocket in ccxt.pro (TypeScript)",
    "created_at": "2024-11-28T13:50:08Z",
    "closed_at": "2024-11-28T15:46:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24399",
    "body": "### Operating System\n\nios\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nHi ccxt team,\r\nFirst, I’d like to express my gratitude for your continued hard work and swift updates to this amazing library! 🙏\r\nI’m using TypeScript and exploring a way to calculate PnL for different assets by managing multiple sub-accounts. My approach is to create a new ccxt.pro.binance instance for each sub-account, initializing it with a unique API key and secret.\r\nWhile calling REST API functions seems to work fine, I’m unsure about the WebSocket-related functions. Will each instance handle WebSocket connections independently and function properly in this setup? Or is there anything specific I should be aware of when managing multiple WebSocket connections using ccxt.pro with different API keys?\r\nThank you for your time and for maintaining this awesome library!\n\n### Code\n\n_No response_",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24399/comments",
    "author": "cozy-hn",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-28T15:28:10Z",
        "body": "Hello @cozy-hn,\r\n\r\nThanks for your kind words and support.\r\n\r\n> Will each instance handle WebSocket connections independently and function properly in this setup?\r\n\r\nYes that's correct, each instance is independent."
      },
      {
        "user": "cozy-hn",
        "created_at": "2024-11-28T15:46:43Z",
        "body": "@carlosmiei  Thanks for answering :) 👍 "
      }
    ]
  },
  {
    "number": 24373,
    "title": "Error setting margin type and leverage setting",
    "created_at": "2024-11-25T23:33:43Z",
    "closed_at": "2024-11-26T20:03:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24373",
    "body": "### Operating System\n\nWin10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.33\n\n### Description\n\nError setting margin type and leverage setting 1- 'binance' object has no attribute 'fapiPrivate_post_margintype' 2- 'binance' object has no attribute 'fapiPrivate_post_leverage'\n\n### Code\n\n```# Setting margin\r\ndef set_margin_type(symbol, margin_type='ISOLATED'):\r\n    try:\r\n        market = binance.market(symbol)\r\n        params = {\r\n            'symbol': market['id'],\r\n            'marginType': margin_type,\r\n        }\r\n        response = binance.fapiPrivate_post_margintype(params)\r\n        print(f\"Margin type for {symbol} set at {margin_type}\")\r\n    except Exception as e:\r\n        print(f\"Error when setting margin type: {e}\")\r\n\r\n# leverage setting\r\ndef set_leverage(symbol, leverage):\r\n    try:\r\n        market = binance.market(symbol)\r\n        params = {\r\n            'symbol': market['id'],\r\n            'leverage': leverage,\r\n        }\r\n        response = binance.fapiPrivate_post_leverage(params)\r\n        print(f\"Leverage for {symbol} set at {leverage}x\")\r\n    except Exception as e:\r\n        print(f\"Error leverage setting : {e}\")\r\n\r\n# TESTS\r\ndef run_tests():\r\n    sync_time()\r\n    test_balance()  # Balance check\r\n    fetch_ohlcv('ETH/USDT', '1H')  \r\n    test_order('ETH/USDT', 0.05) \r\n    set_margin_type('ETH/USDT', 'ISOLATED')  \r\n    set_leverage('ETH/USDT', 10)  \r\n\r\nif __name__ == '__main__':\r\n    run_tests()\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24373/comments",
    "author": "Borodacmd",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-11-26T03:20:10Z",
        "body": "@Borodacmd You can use `fapiprivate_post_leverage` and `fapiprivate_post_margintype` directly, or call the unified methods `set_leverage` and `set_margin_mode`."
      },
      {
        "user": "Borodacmd",
        "created_at": "2024-11-26T20:03:04Z",
        "body": "> @BorodacmdВы можете использовать `fapiprivate_post_leverage`и `fapiprivate_post_margintype`напрямую или вызывать унифицированные методы `set_leverage`и `set_margin_mode`.\r\n\r\nYes, thank you"
      }
    ]
  },
  {
    "number": 24366,
    "title": "Get minimum buy amount of each currency",
    "created_at": "2024-11-25T15:18:44Z",
    "closed_at": "2024-11-25T17:25:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24366",
    "body": "### Operating System\n\nwindos\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.4.32\n\n### Description\n\nHello, \r\nHow can I find out what the minimum buy amount of each currency is on the exchange?\r\nIs there a way for me to find out the minimum buy amount of each currency through the API?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24366/comments",
    "author": "azim1399",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-25T17:25:14Z",
        "body": "Hello @azim1399,\r\n\r\nIf the exchange provides that information, you can check it inside the `market` structure.\r\n\r\nExample\r\n\r\n```Python\r\nawait exchange.load_markets()\r\nmarket = exchange.market('BTC/USDT')\r\nprint(market['limits'])\r\n```"
      }
    ]
  },
  {
    "number": 24358,
    "title": "bybit perpetual contract unable to fetch ohlcv",
    "created_at": "2024-11-24T13:30:57Z",
    "closed_at": "2024-11-25T04:59:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24358",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nUnable to retrieve ohlcv for ticker in linear but no spot.\r\n\r\nticker sample: MAJORUSDT , USUALUSDT\r\nBoth ticker was able to extract from exchange.fetch_tickers but getting error \"ccxt.base.errors.BadSymbol: bybit does not have market symbol MAJORUSDT\"\r\n\n\n### Code\n\n```python\r\nimport ccxt\r\nimport pprint\r\n\r\n# Initialize Bybit exchange\r\nexchange = ccxt.bybit({\r\n    'enableRateLimit': True,\r\n})\r\n\r\n# Function to get the symbol list ending with USDT\r\ndef get_symbol_list():\r\n    try:\r\n        # Fetch all tickers with category 'linear'\r\n        tickers = exchange.fetch_tickers(params={'category': 'linear'})\r\n\r\n        processed_symbols = [symbol for symbol in tickers.keys() if symbol.endswith(\"USDT\")]\r\n\r\n        return processed_symbols\r\n\r\n    except ccxt.NetworkError as e:\r\n        print(f\"Network error: {e}\")\r\n    except ccxt.ExchangeError as e:\r\n        print(f\"Exchange error: {e}\")\r\n    except Exception as e:\r\n        print(f\"An error occurred: {e}\")\r\n\r\n# Get the list of linear symbols with USDT\r\nsymbols = get_symbol_list()\r\ndef get_kline_data(symbol, interval='1m', limit=1):\r\n    exchange.load_markets()\r\n    return exchange.fetch_ohlcv(symbol, timeframe=interval, limit=limit,params={'category': 'linear'})\r\nfor symbol in symbols:\r\n    pprint.pprint(get_kline_data(symbol))\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24358/comments",
    "author": "amiglesia",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-24T14:13:50Z",
        "body": "Hello @amiglesia,\r\n\r\nFirst of all I would suggest using the unified symbols instead to avoid clashes\r\n\r\nIn this case\r\n```\r\nMAJOR/USDT => spot\r\nMAJOR/USDT:USDT => linear perp\r\n```\r\n\r\nRegarding your issue, I don't think that bybit provides the spot `MAJOR/USDT` market hence the error you're getting"
      },
      {
        "user": "amiglesia",
        "created_at": "2024-11-24T14:32:00Z",
        "body": "Hi @carlosmiei \r\nThank you for quick response.\r\n\r\nYes, i also tried the unified symbol manually.\r\n```python\r\npprint.pprint(exchange.fetch_ohlcv('MAJOR/USDT:USDT'))\r\npprint.pprint(exchange.fetch_ohlcv('MAJOR/USDT'))\r\npprint.pprint(exchange.fetch_ohlcv('MAJORUSDT'))\r\n```\r\nbut all instances leads to error.\r\n```\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJORUSDT\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJOR/USDT:USDT\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJOR/USDT\r\n```\r\n\r\nalso using the exchange.fetch_tickers(params={'category': 'linear'})\r\nreturn the ticker MAJORUSDT while other in their linear perp symbol\r\n```\r\n'MAGIC/USDT:USDT'\r\n'MAJORUSDT'\r\n'MANA/USDT:USDT'\r\n'MANEKI/USDT:USDT'\r\n```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-24T14:59:25Z",
        "body": "@amiglesia \r\n\r\nAre you sure that your markets are updated? If you have a long running instance can you please try to do `exchange.load_markets(True)` to refresh the cache?\r\n\r\nI just tested it and seems to be working as expected\r\n\r\n```\r\n p bybit fetchOHLCV \"MAJOR/USDT:USDT\" 1h None 5 --no-keys\r\nPython v3.12.3\r\nCCXT v4.4.33\r\nbybit.fetchOHLCV(MAJOR/USDT:USDT,1h,None,5)\r\n[[1732442400000, 1.3969, 1.4178, 1.366, 1.3681, 5493.3],\r\n [1732446000000, 1.3681, 1.4353, 1.3236, 1.33, 12656.7],\r\n [1732449600000, 1.33, 1.379, 1.02, 1.13, 130550.8],\r\n [1732453200000, 1.13, 1.241, 1.13, 1.182, 44810.0],\r\n [1732456800000, 1.182, 1.1952, 1.1179, 1.1585, 22694.8]]\r\n```\r\n"
      },
      {
        "user": "gcheng24",
        "created_at": "2024-11-25T01:27:38Z",
        "body": "@amiglesia I got this error too and updating the ccxt module fixed it"
      },
      {
        "user": "amiglesia",
        "created_at": "2024-11-25T04:59:58Z",
        "body": "confirm, updating the ccxt module fixed this. thank you. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-25T10:05:18Z",
        "body": "@gcheng24 @amiglesia Thanks for confirming it!"
      }
    ]
  },
  {
    "number": 24357,
    "title": "Kraken ticker data missing bid/ask volume info",
    "created_at": "2024-11-24T09:44:03Z",
    "closed_at": "2024-12-03T03:02:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24357",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.33\n\n### Description\n\nWhen retrieving ticker data for the Kraken exchange, the `bidVolume` and `askVolume` fields consistently return `None` or `null` across all trading pairs. \n\n### Code\n\nCode:\r\n```\r\nexchange = ccxt.kraken()\r\nexchange.fetch_tickers()\r\n```\r\n\r\nPair Output:\r\n```\r\n'USDT/EUR': {'symbol': 'USDT/EUR',\r\n  'timestamp': None,\r\n  'datetime': None,\r\n  'high': 0.9581,\r\n  'low': 0.9547,\r\n  'bid': 0.9565,\r\n  'bidVolume': None,\r\n  'ask': 0.9566,\r\n  'askVolume': None,\r\n  'vwap': 0.95630699,\r\n  'open': 0.9554,\r\n  'close': 0.9565,\r\n  'last': 0.9565,\r\n  'previousClose': None,\r\n  'change': 0.0011,\r\n  'percentage': 0.1151350219803223,\r\n  'average': 0.9559,\r\n  'baseVolume': 56729985.96356355,\r\n  'quoteVolume': 54251282.11955771,\r\n  'info': {'a': ['0.95660000', '9281', '9281.000'],\r\n   'b': ['0.95650000', '595467', '595467.000'],\r\n   'c': ['0.95650000', '54.90674015'],\r\n   'v': ['15261709.18425569', '56729985.96356355'],\r\n   'p': ['0.95582425', '0.95630699'],\r\n   't': ['14592', '66000'],\r\n   'l': ['0.95480000', '0.95470000'],\r\n   'h': ['0.95690000', '0.95810000'],\r\n   'o': '0.95540000'},\r\n  'indexPrice': None,\r\n  'markPrice': None},\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24357/comments",
    "author": "priyanshuone6",
    "comments": [
      {
        "user": "priyanshuone6",
        "created_at": "2024-11-24T09:55:08Z",
        "body": "Coinbase ticker data also returns `None` for `bid`, `ask`, `bidVolume`, `askVolume`, and several other fields.\r\n```\r\n'BTC/USDC': {'symbol': 'BTC/USDC',\r\n  'timestamp': None,\r\n  'datetime': None,\r\n  'bid': None,\r\n  'ask': None,\r\n  'last': 98085.32,\r\n  'high': None,\r\n  'low': None,\r\n  'bidVolume': None,\r\n  'askVolume': None,\r\n  'vwap': None,\r\n  'open': None,\r\n  'close': 98085.32,\r\n  'previousClose': None,\r\n  'change': None,\r\n  'percentage': -0.44342294867786,\r\n  'average': None,\r\n  'baseVolume': None,\r\n  'quoteVolume': None,\r\n  'info': {'product_id': 'BTC-USDC',\r\n   'price': '98085.32',\r\n   'price_percentage_change_24h': '-0.44342294867786',\r\n   'volume_24h': '8191.36496263',\r\n   'volume_percentage_change_24h': '-70.71581583916139',\r\n   'base_increment': '0.00000001',\r\n   'quote_increment': '0.01',\r\n   'quote_min_size': '1',\r\n   'quote_max_size': '150000000',\r\n   'base_min_size': '0.00000001',\r\n   'base_max_size': '3400',\r\n   'base_name': 'Bitcoin',\r\n   'quote_name': 'USDC',\r\n   'watched': False,\r\n   'is_disabled': False,\r\n   'new': False,\r\n   'status': 'online',\r\n   'cancel_only': False,\r\n   'limit_only': False,\r\n   'post_only': False,\r\n   'trading_disabled': False,\r\n   'auction_mode': False,\r\n   'product_type': 'SPOT',\r\n   'quote_currency_id': 'USDC',\r\n   'base_currency_id': 'BTC',\r\n   'fcm_trading_session_details': None,\r\n   'mid_market_price': '',\r\n   'alias': 'BTC-USD',\r\n   'alias_to': [],\r\n   'base_display_symbol': 'BTC',\r\n   'quote_display_symbol': 'USD',\r\n   'view_only': False,\r\n   'price_increment': '0.01',\r\n   'display_name': 'BTC-USDC',\r\n   'product_venue': 'CBE',\r\n   'approximate_quote_24h_volume': '803452653.6'},\r\n  'indexPrice': None,\r\n  'markPrice': None},\r\n```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-24T14:15:04Z",
        "body": "Hello @priyanshuone6,\r\n\r\nCCXT always returns its unified `Ticker` structure regardless of the exchange, however, if the exchange does not provide a field like ask/bid we can't populate it inside the unified structure and `None/undefined` is returned "
      },
      {
        "user": "priyanshuone6",
        "created_at": "2024-11-26T02:01:01Z",
        "body": "Kraken provides bid and ask prices, along with their volumes, in the `info` field: `a` represents ask, and `b` represents bid. These edge cases result from differing naming conventions. Would it be possible to handle such edge cases?"
      }
    ]
  },
  {
    "number": 24323,
    "title": "Futures disabled for Spanish accounts",
    "created_at": "2024-11-20T19:35:09Z",
    "closed_at": "2024-11-21T18:33:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24323",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nIt seems that futures are not allowed anymore in Spain, so I can´t access to the fapi anymore. It is possible to configure ccxt to use sapi instead?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24323/comments",
    "author": "jmunozvalencia",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-20T21:59:23Z",
        "body": "Hello @jmunozvalencia,\r\n\r\nsapi should only be used to trade spot markets whereas fapi is the API for futures trading. \r\n\r\nIf you can't access it from spain, you have to find an alternative if you still want to trade futures but that alternative is not related to CCXT there's nothing we can do on our side to lift that block. \r\n\r\n"
      },
      {
        "user": "jmunozvalencia",
        "created_at": "2024-11-21T18:02:53Z",
        "body": "It seems that fetch_my_trades uses fapi by  default and thatś is able to return the spot trades, however it is not longer working anymore because futures are not allowed anymore. My question is if it is possible to change fetch_my_trades to use sapi instead. Thanks"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-21T18:17:26Z",
        "body": "@jmunozvalencia \r\n\r\nIf you provide a `spot` symbol, then ccxt will use `sapi`, if you provide a perp/future `symbol` ccxt will use `fapi` "
      },
      {
        "user": "jmunozvalencia",
        "created_at": "2024-11-21T18:24:52Z",
        "body": "You are right, I was getting all the trades for the symbols returned in exchange.symbols. That includes the perp/future symbols and was failing because I don´t have access to fapi. However, if I only use the spot symbols, it uses sapi and it works fine. Thanks, problem solved!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-21T18:33:02Z",
        "body": "@jmunozvalencia Np 🙂 "
      }
    ]
  },
  {
    "number": 24191,
    "title": "Question about the difference between fetchOrderBookWs and watchOrderBook functions",
    "created_at": "2024-11-07T07:18:54Z",
    "closed_at": "2024-11-10T20:34:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24191",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nHello, I noticed that both fetchOrderBookWs and watchOrderBook functions seem to utilize WebSocket to retrieve order book data. However, the specific differences in their purpose or functionality are unclear, and it's a bit confusing.\r\n\r\nCould you explain the intended use cases, performance differences, or any other distinctions between these two functions?\r\n\r\nThank you!\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24191/comments",
    "author": "cozy-hn",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-07T15:39:16Z",
        "body": "Hello @cozy-hn \r\n\r\n`fetchOrderBookWs` follows the REST request-response model, you request the orderbook and you get it and that's it\r\n\r\n`watchOrderBook` is event-based and continuously streams the orderbook every time the exchange broadcasts an update. "
      },
      {
        "user": "cozy-hn",
        "created_at": "2024-11-07T17:52:20Z",
        "body": "@carlosmiei \r\nI have additional questions. I created an instance with `new ccxt.pro.binance()` and although watchOrderBook is said to be an existing method, it says that fetchOrderBookWs doesn't exist even though it's in the Binance folder of pro. Why is that?\r\n\r\nI can't see this function in`change.d.ts`, and it seems that some other Binance Pro functions are like that as well."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-07T18:05:59Z",
        "body": "@cozy-hn What's your ccxt version? `fetchOrderBookWs` is available in Binance."
      },
      {
        "user": "cozy-hn",
        "created_at": "2024-11-08T05:59:04Z",
        "body": "@carlosmiei  \r\nccxt@4.4.26 \r\n\r\nI'm using ccxt@4.4.26, and although the `fetchOrderBookWs` method is definitely present in the `binance` file within the `pro` folder, it’s missing in `Exchange.d.ts`, resulting in an error message."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-10T16:15:25Z",
        "body": "@cozy-hn Yeah, the base implementation is probably missing inside `Exchange.ts`, but I will add it shortly. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-10T20:34:39Z",
        "body": "@cozy-hn can you please upgrade and try again? it should be working now"
      }
    ]
  },
  {
    "number": 24174,
    "title": "Smart-contract adresses",
    "created_at": "2024-11-05T12:02:11Z",
    "closed_at": "2024-11-05T12:03:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24174",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.50\n\n### Description\n\nHi everyone, \r\nI want to get smart-contracts adresses, for example \"0x8062AbC286f5e7D9428a0Ccb9AbD71e50d93b935\". How can I do it?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24174/comments",
    "author": "Ilya243543",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-05T12:03:36Z",
        "body": "Hello @Ilya243543\r\n\r\nUnfortunately, that information is not provided in most exchanges. If they do offer it, you can access it inside `market->info`, but as I said, that's rarely available. "
      },
      {
        "user": "Ilya243543",
        "created_at": "2024-11-05T13:21:03Z",
        "body": "> Hello @Ilya243543\r\n> \r\n> Unfortunately, that information is not provided in most exchanges. If they do offer it, you can access it inside `market->info`, but as I said, that's rarely available.\r\n\r\nOk, thank you,\r\nSo how can I differentiate between coins, because some exchanges have coins with the same tickers, e.g. \"FUD\" on Bitget and \"FUD\" on Huobi are different coins?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-05T14:21:19Z",
        "body": "@Ilya243543 That might not be easy. I would try to use the price; if the price is similar, then most likely it is the same coin. Alternatively you can manually go to the WEB UI and check if the coin is the same, usually they provide some info about the project there. "
      }
    ]
  },
  {
    "number": 24052,
    "title": "fetch_tickers cannot retrieve newly listed cryptocurrencies.",
    "created_at": "2024-10-22T05:29:39Z",
    "closed_at": "2024-10-23T01:29:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24052",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.21\n\n### Description\n\n**fetch_tickers** cannot retrieve newly listed cryptocurrencies.\r\nI believe this issue has always existed, and it requires restarting the program to retrieve newly listed cryptocurrencies.\n\n### Code\n\n_No response_",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24052/comments",
    "author": "gochendong",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-10-22T08:22:07Z",
        "body": "@gochendong Which exchange did you use? I’m wondering if it’s an issue in CCXT, since the data comes directly from the exchange. "
      },
      {
        "user": "gochendong",
        "created_at": "2024-10-22T08:36:10Z",
        "body": "> @gochendong Which exchange did you use? I’m wondering if it’s an issue in CCXT, since the data comes directly from the exchange.\r\nI use Binance, but I don't think that this issue is related to the exchange. I noticed this problem many months ago: before the program restarts, fetch_tickers cannot retrieve the newly listed trading pairs. I wonder if this is due to some local caching.\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-10-22T15:38:21Z",
        "body": "Hello @gochendong if new markets were opened after you loaded the markets initially CCXT won't have them in the cache, you can however call `load_markets(True)` periodically to ensure everything is always up to date. "
      }
    ]
  },
  {
    "number": 23990,
    "title": "CoinEx errror: The endpoint has been deprecated",
    "created_at": "2024-10-14T21:14:59Z",
    "closed_at": "2024-10-15T11:30:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23990",
    "body": "### Operating System\n\nUbuntu 22.04.4 LTS\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n4.3.5\n\n### Description\n\n2024-10-15 00:04:56,708 ERROR coinex **The endpoint has been deprecated. Please use the new version of this endpoint.**: Traceback (most recent call last):\r\n  File \".../main.py\", line 145, in handle_all_orderbooks\r\n    start_order = await **coinex.create_limit_order**(symbol, start_side, amount, start_price)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 1488, in create_limit_order\r\n    return await self.create_order(symbol, 'limit', side, amount, price, params)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/coinex.py\", line 2226, in create_order\r\n    response = await self.v1PrivatePostOrderLimit(request)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 816, in request\r\n    return await self.fetch2(path, api, method, params, headers, body, config)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 813, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 243, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/coinex.py\", line 5373, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: coinex **The endpoint has been deprecated. Please use the new version of this endpoint.**\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23990/comments",
    "author": "grozz97",
    "comments": [
      {
        "user": "grozz97",
        "created_at": "2024-10-14T22:40:38Z",
        "body": "Probably the problem is in the old version of CCXT?"
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-10-15T07:19:45Z",
        "body": "@grozz97 Can you upgrade ccxt and try?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-10-15T10:49:42Z",
        "body": "Hello @grozz97, correct that was updated in the meantime.\r\n\r\nCan you please upgrade and try again? "
      },
      {
        "user": "grozz97",
        "created_at": "2024-10-15T11:29:43Z",
        "body": "After the update everything works fine. Thank you."
      }
    ]
  },
  {
    "number": 23818,
    "title": "C#: WatchTrades returns really big numbers for Trade amount on some exchanges",
    "created_at": "2024-09-25T13:54:51Z",
    "closed_at": "2024-10-03T11:43:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23818",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n4.4.7\r\n\r\n### Description\r\n\r\nI'm using the latest (4.4.7) C# version of CCXT and I've noticed that WatchTrades returns weird amounts on trades. As an example reading the trades on futures for the symbol BTC/USDT:USDT, some exchanges like binanceusdm and bitget return expected values like a fraction of one bitcoin (0.002 - 1.0) etc, but eg. mexc and whitebit return amounts in the range of hundreds and thousands or even millions. Here's an excerpt from my log:\r\n```\r\nTimestamp;Symbol;Exchange;Price;Amount;Side\r\n2024-09-25T13:34:01.548000+00:00;BTC/USDT:USDT;binanceusdm;63577;0.009;buy\r\n2024-09-25T13:34:02.311000+00:00;BTC/USDT:USDT;binanceusdm;63583.3;0.011;buy\r\n2024-09-25T13:34:01.583000+00:00;BTC/USDT:USDT;bitget;63576.9;0.008;sell\r\n2024-09-25T13:34:02.290000+00:00;BTC/USDT:USDT;bitget;63577;0.083;buy\r\n2024-09-25T13:34:03.324000+00:00;BTC/USDT:USDT;whitebit;63588.1;1575.0540000011;buy\r\n2024-09-25T13:34:03.523000+00:00;BTC/USDT:USDT;whitebit;63588.5;429.1739999997;buy\r\n2024-09-25T13:34:03.823000+00:00;BTC/USDT:USDT;whitebit;63590.1;2932.2699999985;buy\r\n2024-09-25T13:34:04.025000+00:00;BTC/USDT:USDT;whitebit;63596.9;23188.4790000736;buy\r\n2024-09-25T13:34:04.823000+00:00;BTC/USDT:USDT;whitebit;63597.5;0.438;buy\r\n2024-09-25T13:34:04.542000+00:00;BTC/USDT:USDT;mexc;63597.6;129747354;buy\r\n2024-09-25T13:34:04.731000+00:00;BTC/USDT:USDT;mexc;63597.6;15787920;buy\r\n2024-09-25T13:34:04.877000+00:00;BTC/USDT:USDT;mexc;63597.6;131210000;buy\r\n```\r\nCould this be a bug in how different exchanges return values and ccxt isn't parsing it correctly? Perhaps the local culture makes it misbehave?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23818/comments",
    "author": "alert101",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-09-25T16:07:32Z",
        "body": "Hello @alert101, when trading perps you don't get the amount in the base currency (BTC) but in number of contracts.\r\nMaybe this is related to the contract size?\r\n\r\n\r\n```\r\nCCXT v4.4.7\r\nwhitebit.market (BTC/USDT:USDT)\r\n2024-09-25T16:05:33.635Z iteration 0 passed in 0 ms\r\n\r\n{\r\n  id: 'BTC_PERP',\r\n  lowercaseId: undefined,\r\n  symbol: 'BTC/USDT:USDT',\r\n  base: 'BTC',\r\n  quote: 'USDT',\r\n  settle: 'USDT',\r\n  baseId: 'BTC',\r\n  quoteId: 'USDT',\r\n  settleId: 'USDT',\r\n  type: 'swap',\r\n  spot: false,\r\n  margin: false,\r\n  swap: true,\r\n  future: false,\r\n  option: false,\r\n  index: undefined,\r\n  active: true,\r\n  contract: true,\r\n  linear: true,\r\n  inverse: false,\r\n  subType: 'linear',\r\n  taker: 0.00035,\r\n  maker: 0.0001,\r\n  contractSize: 0.001,\r\n````\r\nFor example at whitebit, the contract size for `BTC/USDT:uSDT` is 0.001, meaning that, in order to buy contracts worth 1 BTC, you need to use amount = 1 / 0.001 = 1000 contracts"
      },
      {
        "user": "alert101",
        "created_at": "2024-09-25T17:14:24Z",
        "body": "Ahh. Thank you for the fast reply. Just to make sure, I'm not trading but just reading the actual trades from the exchanges (WatchTrades method). In that case it seems as if some exchanges already take contractSize into account when parsing the amount from the actual response. However with mexc even that seems weird, their contractSize is 0.0001 and you can see in my log that they have values like 131210000. With that contractSize that would be 13121 BTC in a single trade. And there are many such trades, constantly. That would make mexc the largest exchange ever.\r\n\r\nI'm checking my own code if it's something I'm messing up but my code is really simple.\r\n```\r\n    List<Trade> trades = await exchange.WatchTrades(pair);\r\n\r\n    PastTrade pt;\r\n    foreach (var trade in trades)\r\n    {\r\n        pt = new PastTrade()\r\n        {\r\n            Exchange = exchange.id,\r\n            Symbol = trade.symbol,\r\n            Timestamp = DateTimeOffset.FromUnixTimeMilliseconds(trade.timestamp.Value).UtcDateTime,\r\n            Price = trade.price ?? 0d,\r\n            Amount = trade.amount ?? 0d,\r\n            Side = trade.side ?? string.Empty\r\n        };\r\n\r\n        log(pt);\r\n    }\r\n```\r\nEdit: Forgot the log method, here's the excerpt:\r\n```\r\nvar numberFormat = \"#0.##########\";\r\n…\r\nt.Amount.ToString(numberFormat, CultureInfo.InvariantCulture),\r\n…\r\n```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-26T06:56:48Z",
        "body": "@alert101 \r\n\r\n>  In that case it seems as if some exchanges already take contractSize into account when parsing the amount from the actual response\r\n\r\n some exchanges, like binance, have contractSize = 1, so the number of contracts will be equal to the base currency.\r\n\r\n\r\n>  However with mexc even that seems weird, their contractSize is 0.0001 and you can see in my log that they have values like 131210000\r\n\r\nyeah this is still weird. What's the value inside `info` ? \r\n\r\n"
      },
      {
        "user": "alert101",
        "created_at": "2024-09-26T06:58:44Z",
        "body": "@carlosmiei I'll check tonight after work and get back to you."
      },
      {
        "user": "alert101",
        "created_at": "2024-09-26T15:52:26Z",
        "body": "@carlosmiei Info contains an identical value as Amount. I ran a few tests without any of my own code and I got different results, So as usual it's entirely possible that my own code is somehow f'ed. I need to run some more tests.\r\n\r\nOne question though, based on your previous replies I conclude that when it comes to futures the amount in the Trade struct is the number of contracts and contractSize needs to be taken into account to get the actual size of the trade in base currency?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-27T18:05:40Z",
        "body": "@alert101 \r\n\r\n> Info contains an identical value as Amount\r\n\r\nthe values inside info are the raw values return by the API, so if they're the same it means it is the API reporting that volume.\r\n\r\n> is the number of contracts and contractSize needs to be taken into account to get the actual size of the trade in base currency?\r\n\r\nthis is correct yes \r\n"
      },
      {
        "user": "alert101",
        "created_at": "2024-10-03T11:43:08Z",
        "body": "Let's close this while I figure out my end. I'll open a new issue if necessary. Thank you for your help!"
      }
    ]
  },
  {
    "number": 23797,
    "title": "HTX watchTicker does not return bid and ask",
    "created_at": "2024-09-24T07:40:03Z",
    "closed_at": "2024-09-24T07:57:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23797",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.3.91\n\n### Description\n\nHTX watchTicker(\"\") does not return bid and ask. Returns undefined.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23797/comments",
    "author": "iht76",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-09-24T07:55:37Z",
        "body": "Hello @iht76, it is missing because the API does not provide them, as you can see inside `info`\r\n\r\n```\r\nCCXT v4.4.6\r\nhtx.watchTicker (BTC/USDT)\r\n{\r\n  symbol: 'BTC/USDT',\r\n  timestamp: 1727164505734,\r\n  datetime: '2024-09-24T07:55:05.734Z',\r\n  high: 63829.7,\r\n  low: 62717.09,\r\n  bid: undefined,\r\n  bidVolume: undefined,\r\n  ask: undefined,\r\n  askVolume: undefined,\r\n  vwap: 63294.04601827882,\r\n  open: 63552.08,\r\n  close: 63542.1,\r\n  last: 63542.1,\r\n  previousClose: undefined,\r\n  change: -9.98,\r\n  percentage: -0.0157036559621652,\r\n  average: 63547.09,\r\n  baseVolume: 3828.1051343695563,\r\n  quoteVolume: 242296262.53759614,\r\n  info: {\r\n    id: 346667813615,\r\n    low: 62717.09,\r\n    high: 63829.7,\r\n    open: 63552.08,\r\n    close: 63542.1,\r\n    vol: 242296262.53759614,\r\n    amount: 3828.1051343695563,\r\n    version: 346667813615,\r\n    count: 3087310\r\n  }\r\n}\r\n```\r\n"
      },
      {
        "user": "iht76",
        "created_at": "2024-09-24T07:57:02Z",
        "body": "ok thank you. "
      }
    ]
  },
  {
    "number": 23650,
    "title": "Gateio futures does not work with CCXT Pro",
    "created_at": "2024-09-05T22:51:29Z",
    "closed_at": "2024-09-08T15:10:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23650",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n4.3.96\n\n### Description\n\nHello! When I use 'defaultType' => 'swap' in the constructor parameters and then use the create_order_ws method, I get an open position on spot market instead of futures. Is this a bug? Thank you.\n\n### Code\n\n```\r\n$config = [\r\n    'apiKey' => $this->key,\r\n    'secret' => $this->secret,\r\n    'options' => [\r\n        'defaultType' => 'swap' // for perpetual futures\r\n    ],\r\n];\r\n$this->gateWs = new \\ccxt\\pro\\gateio($config);\r\n\r\n/* some other code*/\r\n\r\n$data = yield $this->gateWs->create_order_ws(\r\n    'XRP/USDT',\r\n    'market',\r\n    'buy',\r\n    10,\r\n    $this->tickers['XRP']\r\n); // This opens an order on the spot market, not futures\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23650/comments",
    "author": "Jekamajor",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-09-05T23:04:00Z",
        "body": "@Jekamajor The symbol represents spot market. The market id would be XRP/USDT:USDT for swap. Could you try this market?"
      },
      {
        "user": "Jekamajor",
        "created_at": "2024-09-06T08:50:43Z",
        "body": "> @Jekamajor The symbol represents spot market. The market id would be XRP/USDT:USDT for swap. Could you try this market?\r\n\r\nYes, thanks, with XRP/USDT:USDT  the request goes to futures, but now I'm getting this exception message after calling the create_order_ws method \r\n\r\n`{\"header\":{\"response_time\":\"1725612393633\",\"status\":\"400\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc13d915541\"},\"data\":{\"errs\":{\"label\":\"INVALID_REQUEST\",\"message\":\"Mismatch type string with value number \\\"at index 58: mismatched type with value\\\\n\\\\n\\\\t:\\\\\\\"usdt\\\\\\\",\\\\\\\"price\\\\\\\":0,\\\\\\\"tif\\\\\\\":\\\\\\\"ioc\\\\\\\",\\\\\\\"t\\\\n\\\\t................^...............\\\\n\\\"\"}},\"request_id\":\"10\"}`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T10:46:29Z",
        "body": "@Jekamajor Can you show us the message sent to the exchange please?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T11:10:55Z",
        "body": "@Jekamajor managed to reproduce the issue, working on a fix right now"
      },
      {
        "user": "Jekamajor",
        "created_at": "2024-09-06T11:31:05Z",
        "body": "> @Jekamajor Can you show us the message sent to the exchange please?\r\n\r\nIf I understood you correctly, here is the log after enabling verbose mode after calling create_order_ws method\r\n\r\n```2024-09-06T13:25:09+02:00 sending {\"id\":\"authenticated\",\"time\":1725621907,\"channel\":\"futures.login\",\"event\":\"api\",\"payload\":{\"req_id\":\"authenticated\",\"timestamp\":\"1725621907\",\"api_key\":\"xxx\",\"signature\":\"yyy\",\"req_param\":[]}}\r\n2024-09-06T13:25:09+02:00 on_message {\"header\":{\"response_time\":\"1725621911059\",\"status\":\"200\",\"channel\":\"futures.login\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\"},\"data\":{\"result\":{\"uid\":\"7385430\",\"api_key\":\"xxx\"}},\"request_id\":\"authenticated\"}\r\n2024-09-06T13:25:09+02:00 sending {\"id\":\"8\",\"time\":1725621909,\"channel\":\"futures.order_place\",\"event\":\"api\",\"payload\":{\"req_id\":\"8\",\"timestamp\":\"1725621909\",\"api_key\":\"xxx\",\"signature\":\"yyy\",\"req_param\":{\"contract\":\"XRP_USDT\",\"size\":10,\"settle\":\"usdt\",\"price\":0,\"tif\":\"ioc\",\"text\":\"t-8aa266b5785551c5\",\"textIsRequired\":true}}}\r\n2024-09-06T13:25:10+02:00 on_message {\"header\":{\"response_time\":\"1725621911413\",\"status\":\"200\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\",\"conn_id\":\"56932c...83\",\"trace_id\":\"9b4ad1d0...a010d03cbbcf6cc\"},\"data\":{\"result\":{\"req_id\":\"8\",\"api_key\":\"xxx\",\"timestamp\":\"1725621909\",\"signature\":\"yyy\",\"trace_id\":\"9b4ad1d0...f6cc\",\"text\":\"\",\"req_header\":{\"trace_id\":\"9b4ad1d...bcf6cc\"},\"req_param\":{\"size\":10,\"settle\":\"usdt\",\"price\":0,\"tif\":\"ioc\",\"text\":\"t-8aa266b5785551c5\",\"textIsRequired\":true,\"contract\":\"XRP_USDT\"}}},\"request_id\":\"8\",\"ack\":true}\r\n2024-09-06T13:25:10+02:00 on_message {\"header\":{\"response_time\":\"1725621911413\",\"status\":\"400\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\"},\"data\":{\"errs\":{\"label\":\"INVALID_REQUEST\",\"message\":\"Mismatch type string with value number \\\"at index 35: mismatched type with value\\\\n\\\\n\\\\t:\\\\\\\"usdt\\\\\\\",\\\\\\\"price\\\\\\\":0,\\\\\\\"tif\\\\\\\":\\\\\\\"ioc\\\\\\\",\\\\\\\"t\\\\n\\\\t................^...............\\\\n\\\"\"}},\"request_id\":\"8\"}```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T11:34:01Z",
        "body": "@Jekamajor Thanks, the issue will be fixed in the linked PR."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-08T13:22:47Z",
        "body": "@Jekamajor Can you please update your ccxt version and try again? It should be working now"
      },
      {
        "user": "Jekamajor",
        "created_at": "2024-09-08T14:59:34Z",
        "body": "@carlosmiei Yes, now the market order works. Thank you!!! "
      }
    ]
  },
  {
    "number": 23624,
    "title": "OKX swap order uses currency size instead of contract size",
    "created_at": "2024-09-03T09:25:00Z",
    "closed_at": "2024-09-08T13:26:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23624",
    "body": "### Operating System\r\n\r\nlinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\nlatest\r\n\r\n### Description\r\n\r\nHi there,\r\n\r\nI have a question if it is possible to place a swap order, e.g., DOGE-USDT-SWAP, using the base currency size instead of the contract size?\r\n\r\nIf it is not possible, what's the best practice to calculate the contract size based on the currency size for each swap?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23624/comments",
    "author": "day-xy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-09-03T16:27:34Z",
        "body": "Hello @day-xy, no you always have to use the contract size because when trading swaps you're buying contracts and not the base currency.\r\n\r\nNonetheless, it's very easy to convert from base currency to the number of contracts, example:\r\n\r\n```Python\r\nawait exchange.loadMarkets()\r\nsymbol = 'XRP/USDT:USDT'\r\nmarket = exchange.market(symbol)\r\ncontract_size = market['contractSize']\r\nbase_amount = 100 # amount in XRP\r\nnumber_of_contracts = base_amount / contract_size\r\n```\r\n"
      }
    ]
  },
  {
    "number": 23610,
    "title": "bybit market transaction fee is wrong",
    "created_at": "2024-09-01T11:09:13Z",
    "closed_at": "2024-09-08T13:30:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23610",
    "body": "### Operating System\n\nwindows 11\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.3.93\n\n### Description\n\ntaker fee from exchange.markets[symbol] returns 0.006 while from bybit it should be 0.0550 % or 0.0440 % (after discount).\r\n\r\nsymbol is of any linear perpetual.\r\n\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23610/comments",
    "author": "oaixnomis",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-09-02T03:00:56Z",
        "body": "@oaixnomis That's the default value. You can get fee with `fetchTradingFees` function."
      },
      {
        "user": "oaixnomis",
        "created_at": "2024-09-02T07:25:06Z",
        "body": "> @oaixnomis That's the default value. You can get fee with `fetchTradingFees` function.\r\n\r\nthanks for the explain. is this default behavior just for bybit or for other exchanges as well?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-08T13:30:05Z",
        "body": "@oaixnomis Yes, the fee inside market is the generic one whereas `fetchTradingFees` uses a private endpoint (most of the time) and returns your own fee. "
      }
    ]
  },
  {
    "number": 23587,
    "title": "ModuleNotFoundError: No module named 'importlib.metadata'",
    "created_at": "2024-08-30T14:29:16Z",
    "closed_at": "2024-09-03T03:12:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23587",
    "body": "### Operating System\n\ncentos7\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.90\n\n### Description\n\ntoday I upgrade my ccxt to 4.3.90,but when i run my py script ,there is an error: ModuleNotFoundError: No module named 'importlib.metadata',my python verion is 3.7.5\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23587/comments",
    "author": "y0rkl4u",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-30T15:35:53Z",
        "body": "Hello @y0rkl4u,\r\nIs it possible to update your Python version to at least 3.8? Python 3.7 is not officially supported "
      },
      {
        "user": "y0rkl4u",
        "created_at": "2024-09-03T03:13:27Z",
        "body": "After update my python version ,it's work on."
      }
    ]
  },
  {
    "number": 23528,
    "title": "fetchBalance returning nothing with crypto.com",
    "created_at": "2024-08-24T19:03:24Z",
    "closed_at": "2024-08-26T18:49:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23528",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nJavaScript\r\n\r\n### CCXT Version\r\n\r\n_No response_\r\n\r\n### Description\r\n\r\nWhen requesting fetchBalance it returns this:\r\n```\r\n{\r\n  info: {\r\n    id: XXX,\r\n    method: 'private/user-balance',\r\n    code: 0,\r\n    result: { data: [] }\r\n  },\r\n  free: {},\r\n  used: {},\r\n  total: {}\r\n}\r\n```\r\n\r\nWhat am I doing wrong?\r\n\r\n### Code\r\n\r\n```\r\n        const allBalances = await exchange.fetchBalance({});\r\n        console.log(allBalances);  \r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23528/comments",
    "author": "rednasss",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-25T13:00:10Z",
        "body": "Hello @rednasss  as you can see inside `info` the raw response from the exchange is empty for some reason. Can you see any balance in the web UI?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-08-26T11:37:28Z",
        "body": "Btw I just tested it and it worked\r\n```\r\nNode.js: v18.18.0\r\nCCXT v4.3.87\r\ncryptocom.fetchBalance ()\r\n2024-08-26T11:36:34.343Z iteration 0 passed in 367 ms\r\n\r\n{\r\n  BTC: { free: 0.0003999, used: 0, total: 0.0003999 },\r\n  USDT: { free: 93.7223939875, used: 0, total: 93.7223939875 },\r\n  CRO: { free: 0.99625, used: 0, total: 0.99625 },\r\n  LTC: { free: 0.07109989, used: 0, total: 0.07109989 },\r\n  XRP: { free: 0.99925, used: 0, total: 0.99925 },\r\n  USD: { free: 50.46309702172734, used: 0, total: 50.46309702172734 },\r\n  free: {\r\n    BTC: 0.0003999,\r\n    USDT: 93.7223939875,\r\n    CRO: 0.99625,\r\n    LTC: 0.07109989,\r\n    XRP: 0.99925,\r\n    USD: 50.46309702172734\r\n  },\r\n  used: { BTC: 0, USDT: 0, CRO: 0, LTC: 0, XRP: 0, USD: 0 },\r\n  total: {\r\n    BTC: 0.0003999,\r\n    USDT: 93.7223939875,\r\n    CRO: 0.99625,\r\n    LTC: 0.07109989,\r\n    XRP: 0.99925,\r\n    USD: 50.46309702172734\r\n  }\r\n}\r\n```\r\n"
      },
      {
        "user": "rednasss",
        "created_at": "2024-08-26T18:49:32Z",
        "body": "Ah, I found out. There was nothing in my crypto.com Exchange account, but it was all on my app account. I thought this would be the same.."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-08-27T08:27:46Z",
        "body": "@rednasss Yeah, it's weird, but they are entirely separate accounts... "
      }
    ]
  },
  {
    "number": 23510,
    "title": "Error with BingX (Place order)",
    "created_at": "2024-08-22T10:12:14Z",
    "closed_at": "2024-08-26T16:03:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23510",
    "body": "### Operating System\r\n\r\nWindows\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.50\r\n\r\n### Description\r\n\r\nI wanted to place market order on BingX and got an error:\r\nHow to solve this problem?\r\n\r\n### Code\r\n\r\n```\r\nsymbol = 'FLUXB/USDT'\r\n\r\norder = bingx.create_order(\r\n    symbol=symbol,\r\n    type='limit',\r\n    side='buy',\r\n    amount=200,\r\n    price=0.03267,\r\n    params={}\r\n)\r\n\r\nlogger.info(f\"Order created: {order}\")\r\n\r\nError\r\n  \r\nbingx {\"code\":100421,\"msg\":\"The symbol you request is not available to place order currently, please verify symbol's status by api:/openApi/spot/v1/common/symbols\",\"debugMsg\":\"\"}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23510/comments",
    "author": "Ilya243543",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-22T10:33:55Z",
        "body": "Hello @Ilya243543, the error message suggests that `FLUXB/USDT` is disabled for trading through the API. "
      },
      {
        "user": "Ilya243543",
        "created_at": "2024-08-22T10:37:10Z",
        "body": "> Hello @Ilya243543, the error message suggests that `FLUXB/USDT` is disabled for trading through the API.\r\nYes, I know, but how can I check it before creating an order. Or can I have a list of coins, that are disabled? \r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-08-22T10:39:58Z",
        "body": "Hello @Ilya243543 yes you can check the `active` flag inside `market`, example:\r\n\r\n```Python\r\nawait exchange.load_markets()\r\nmarket = exchange.market(symbol)\r\nis_active = market['active']\r\n```\r\n\r\n@Ilya243543 Right now, we have a minor issue there and `active` is true when it should not, but we will fix it shortly."
      },
      {
        "user": "Ilya243543",
        "created_at": "2024-08-22T10:42:50Z",
        "body": "> Hello @Ilya243543 yes you can check the `active` flag inside `market`, example:\r\n> \r\n> ```python\r\n> await exchange.load_markets()\r\n> market = exchange.market(symbol)\r\n> is_active = market['active']\r\n> ```\r\n> \r\n> @Ilya243543 Right now, we have a minor issue there and `active` is true when it should not, but we will fix it shortly.\r\n\r\nOkey, thank you"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-08-26T16:03:22Z",
        "body": "@Ilya243543 If you update your ccxt version the `active` flag should be working as expected now"
      }
    ]
  },
  {
    "number": 23503,
    "title": "[Question]Clarification on `watchOHLCVForSymbols` Minimum Time Frame and Behavior for Multiple Symbol Subscriptions on Binance Pro",
    "created_at": "2024-08-21T14:52:02Z",
    "closed_at": "2024-09-01T08:48:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23503",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nIt seems that the minimum time frame for the `watchOHLCVForSymbols` function in Binance Pro is `1s` for the Spot market and `1m`  for the Futures market. Is this correct? How can I verify the minimum time unit supported by the exchange?\r\n\r\nAlso, even when I subscribe to multiple symbols, the function seems to return data for one symbol at a time. Is this the expected behavior? \r\n\r\nHere are some sample outputs:\r\n\n\n### Code\n\n```json\r\n{\"ETC/USDT\":{\"1s\":[[1724251574000,19.14,19.14,19.14,19.14,0],...]}}\r\n\r\n{\"BTC/USDT:USDT\":{\"1m\":[[1724251560000,59763.8,59832.4,59723.3,59789.8,409.397]]}}\r\n\r\n{\"AVAX/USDT\":{\"1s\":[[1724251592000,23.26,23.26,23.26,23.26,0],...]}}\r\n\r\n{\"BTC/USDT:USDT\":{\"1m\":[[1724251560000,59763.8,59832.4,59723.3,59789.8,409.397]]}}\r\n\r\n{\"USDC/USDT\":{\"1s\":[[1724251598000,0.9997,0.9997,0.9997,0.9997,0]]}}```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23503/comments",
    "author": "cozy-hn",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-31T14:43:11Z",
        "body": "Hello @cozy-hn, Yes the exchange streams 1 symbol at a time so `watchOHLCVForSymbols` returns 1 symbol at a time."
      },
      {
        "user": "cozy-hn",
        "created_at": "2024-09-01T08:49:22Z",
        "body": "Thanks for response. I changed fetchOHLCV to this method."
      }
    ]
  },
  {
    "number": 23399,
    "title": "CoinEx fetch_tickers() returns None \"bid\" and \"ask\" in Ticker Structure",
    "created_at": "2024-08-13T11:22:03Z",
    "closed_at": "2024-08-16T09:18:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23399",
    "body": "### Operating System\n\nUbuntu 20.04.5 LTS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.80\n\n### Description\n\nHello! \r\n\r\nCoinEx fetch_tickers() returns **None** \"bid\" and \"ask\" in Ticker Structure\n\n### Code\n\n```\r\ncoinex.fetch_tickers()\r\n  \r\n{..{'symbol': 'FACT/USDT', 'timestamp': None, 'datetime': None, 'high': 11.046, 'low': 9.8775, 'bid': None, 'bidVolume': 104.84125175, 'ask': None, 'askVolume': 185.74782804, 'vwap': None, 'open': 10.6576, 'close': 9.8783, 'last': 9.8783, 'previousClose': None, 'change': -0.7793, 'percentage': -7.312152829905419, 'average': 10.26795, 'baseVolume': 552.27362501, 'quoteVolume': None, 'info': {'close': '9.8783', 'high': '11.046', 'last': '9.8783', 'low': '9.8775', 'market': 'FACTUSDT', 'open': '10.6576', 'period': '86400', 'value': '5810.534521931173', 'volume': '552.27362501', 'volume_buy': '104.84125175', 'volume_sell': '185.74782804'}}..}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23399/comments",
    "author": "grozz97",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-13T11:38:30Z",
        "body": "Hello @grozz97 as you can see inside `info` , bid/asks is not provided by the exchange, so this is not a CCXT issue\r\n\r\n```\r\n{\r\n  'BTC/USDT': {\r\n    symbol: 'BTC/USDT',\r\n    high: 60660.31,\r\n    low: 57813.69,\r\n    bidVolume: 6.02872652,\r\n    askVolume: 6.41906863,\r\n    open: 59665.42,\r\n    close: 58782.48,\r\n    last: 58782.48,\r\n    change: -882.94,\r\n    percentage: -1.479818628612687,\r\n    average: 59223.95,\r\n    baseVolume: 1007.2974606,\r\n    info: {\r\n      close: '58782.48',\r\n      high: '60660.31',\r\n      last: '58782.48',\r\n      low: '57813.69',\r\n      market: 'BTCUSDT',\r\n      open: '59665.42',\r\n      period: '86400',\r\n      value: '59755174.3617043125',\r\n      volume: '1007.2974606',\r\n      volume_buy: '6.02872652',\r\n      volume_sell: '6.41906863'\r\n    }\r\n  }\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 23393,
    "title": "Binance fetchLedger () supports contract wallets only",
    "created_at": "2024-08-12T09:28:21Z",
    "closed_at": "2024-08-12T09:59:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23393",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.3.79\n\n### Description\n\nUsing C#, since is timestamp\r\n\r\nCalling\r\n```\r\nDictionary<string, object> paramEx = new Dictionary<string, object>\r\n{ \r\n    { \"paginate\", true }\r\n};\r\nledger = await exchange.fetchLedger(null, since, null, paramEx) as List<object>\r\n```\r\nI receive\r\nExchangeErrorbinance fetchLedger() supports contract wallets only\r\n\r\nNeither in Binance nor in ccxt docs I was able to find what that means or what contract wallets would be. I would require a solution to pull ALL kinds of movements from Binance including funding, deposits, withdrawals and trades. Thank you !\n\n### Code\n\n```\r\nDictionary<string, object> paramEx = new Dictionary<string, object>\r\n{ \r\n    { \"paginate\", true }\r\n};\r\nledger = await exchange.fetchLedger(null, since, null, paramEx) as List<object>\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23393/comments",
    "author": "landogarner7",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-08-12T09:50:16Z",
        "body": "@landogarner7 It seems fetchLedger is for contract wallets only (swap or option symbol). Here are other functions you could use `fetchTransfers`, `fetchWithdrawals` and `fetchDeposits`. Let us know if you find anything."
      },
      {
        "user": "landogarner7",
        "created_at": "2024-08-12T09:59:09Z",
        "body": "Thanks a lot, I will try these.\r\nSo basically it means \"smart contracts\", right ? Now I understand."
      }
    ]
  },
  {
    "number": 23352,
    "title": "load_markets().keys() differ from fetch_tickers()",
    "created_at": "2024-08-07T13:52:52Z",
    "closed_at": "2024-08-07T15:30:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23352",
    "body": "### Operating System\n\nWin 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.73\n\n### Description\n\nI expect the code below to produce the same numbers (2542/2542), but it actually prints (2542/437). Why is this happening? It’s particularly strange because the markets from load_markets are currently trading, yet fetch_tickers does not display them. This function (fetch_tickers) should be used for active tickers.\n\n### Code\n\n```\r\nasync def debug():\r\n    exchange = ccxt.bybit({logging_data})\r\n    markets = await exchange.load_markets(True)\r\n    tickers = await exchange.fetch_tickers()\r\n    print(len(markets.keys()))\r\n    print(len(tickers))\r\n    await exchange.close()\r\nasyncio.run(debug())\r\n\r\n```\r\nresult\r\n```\r\n2542\r\n437\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23352/comments",
    "author": "kapedalex",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-07T15:20:39Z",
        "body": "Hello @kapedalex, `loadMarkets/fetchMarkets` is a \"special\" function that performs several calls to load all the available markets (swap, spot, options, etc) and currencies.  (most of the markets you see are options and delivery futures)\r\n\r\n`fetchTicker/fetchTickers` only performs one rest call, so they can only load one part of the markets. If you want to load all of them you need to call `fetch_tickers` multiple types using `type` in `params`, example:\r\n\r\n\r\n```Python\r\nswap_tickers = await bybit.fetch_tickers() # by default returns linear swaps\r\nspot_tickers = await bybit.fetch_tickers(params = {'type':'spot'})\r\ninverse_tickers = await bybit.fetch_tickers(params = {'subType':'inverse'})\r\noption_tickers = await bybit.fetch_tickers(params = {'type':'option'})\r\n```\r\n(ofc you can use asyncio.gather and do them concurrently)\r\n\r\n"
      },
      {
        "user": "kapedalex",
        "created_at": "2024-08-07T15:30:18Z",
        "body": "Ah, ok, thanks a lot!"
      }
    ]
  },
  {
    "number": 23323,
    "title": "kucoin Invalid KC-API-TIMESTAMP",
    "created_at": "2024-08-04T13:19:26Z",
    "closed_at": "2024-08-04T19:53:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23323",
    "body": "### Operating System\r\n\r\n10\r\n\r\n### Programming Languages\r\n\r\nPHP\r\n\r\n### CCXT Version\r\n\r\n4.3.73\r\n\r\n### Description\r\n\r\nSince today an error started to appear when requesting a balance from KuCoin exchange:\r\nccxt\\InvalidNonce\r\nkucoin Invalid KC-API-TIMESTAMP\r\n\r\nThe method `$exchange->load_time_difference();` does not help\r\n\r\n### Code\r\n\r\n```PHP\r\n$exchangeClass = \"\\\\ccxt\\\\kucoin\";\r\n$exchange      = new $exchangeClass([\r\n  'apiKey'   => $account['api_key'],\r\n  'secret'   => $account['api_secret'],\r\n  'password' => $account['api_password'],\r\n]);\r\n\r\n$timeDifference = $exchange->load_time_difference();\r\n// print_r($timeDifference); // returns: 5528\r\n\r\n$balance = $exchange->fetchBalance([\r\n  'type' => 'trade',\r\n]);\r\nprint_r($balance);\r\n// ccxt\\InvalidNonce\r\n// kucoin Invalid KC-API-TIMESTAMP\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23323/comments",
    "author": "Elferboy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-04T16:03:48Z",
        "body": "Hello @Elferboy,\r\nNothing has changed on the CCXT side and I just tested and it worked.\r\n\r\nCan you please check if your clock is synced with UTC? If not I would try to sync it before making the request.\r\n\r\n```\r\n ph kucoin fetchBalance                                   \r\nPHP v8.3.7\r\nCCXT version :4.3.73\r\nkucoin->fetchBalance()\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [code] => 200000\r\n            [data] => Array\r\n                (\r\n                    [0] => Array\r\n                        (\r\n                            [id] => 64feeec4cd03f30007aa5a8f\r\n                            [currency] => LTC\r\n                            [type] => trade\r\n                            [balance] => 0.211021\r\n                            [available] => 0.211021\r\n                            [holds] => 0\r\n                        )\r\n\r\n                    [1] => Array\r\n                        (\r\n                            [id] => 668635c2ff2dfe000796f545\r\n                            [currency] => ADA\r\n                            [type] => trade\r\n                            [balance] => 20.47\r\n                            [available] => 20.47\r\n                            [holds] => 0\r\n                        )\r\n\r\n                    [2] => Array\r\n                        (\r\n                            [id] => 66\r\n```\r\n"
      },
      {
        "user": "Elferboy",
        "created_at": "2024-08-04T19:53:51Z",
        "body": "Thank you! I synchronized the time with the \"time.windows.com\" server and it started working fine. Too bad that the `load_time_difference()` method does not work for kucoin to equalize the difference.\r\nNow the `load_time_difference()` method shows 1205 microseconds difference."
      }
    ]
  },
  {
    "number": 23260,
    "title": "When I create an order with orderLinkId for Bybit, I get a different clientOrderId in the history",
    "created_at": "2024-07-30T13:07:14Z",
    "closed_at": "2024-07-30T19:17:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23260",
    "body": "### Operating System\r\n\r\nMacos\r\n\r\n### Programming Languages\r\n\r\nJavascript\r\n\r\n### CCXT Version\r\n\r\n4.3.62\r\n\r\n### Description\r\n\r\nWhen I create an order with orderLinkId for Bybit, I get a different clientOrderId in the history \r\n\r\nI make an ID like this and when I send the order it comes back with the correct ID\r\n`${symbol.split('/')[0]}-${side}-${action}-${Date.now()}`\r\n\r\n`  info: {\r\n    orderId: 'f96453a1-4950-49f7-a820-acce1a4c0dd7',\r\n    orderLinkId: 'BLUR-short-profit-lz8h82t1'\r\n  },\r\n  id: 'f96453a1-4950-49f7-a820-acce1a4c0dd7',\r\n  clientOrderId: 'BLUR-short-profit-lz8h82t1',\r\n`\r\n\r\nBut when I want to see closed orders I get this\r\n`\r\nconst orders = await exchange.fetchClosedOrders(data.symbol, data.position.timestamp)\r\nconsole.log(orders)`\r\n\r\n`clientOrderId: 'BLU_s_24160_75570'`\r\n\r\nIs this a bug or am I doing something wrong?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23260/comments",
    "author": "Podolchak",
    "comments": [
      {
        "user": "Podolchak",
        "created_at": "2024-07-30T15:47:48Z",
        "body": "My mistake, since I was pointing to the wrong one\r\n\r\nI would be grateful if you could tell me how to correctly get when a position was opened\r\nI think to search by executed orders, but it may happen that there are too many orders for a position and it may not be in the first 50 orders. Any ideas?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-07-30T16:40:12Z",
        "body": "Hello @Podolchak, you dent the exchange-specific parameter `orderLinkId` but the unified term for ccxt is `clientOrderId` (you still have `orderLinkId` inside `info` tho)\r\n\r\n> I would be grateful if you could tell me how to correctly get when a position was opened\r\n\r\nYou can fetch positions information with `fetch_positions` "
      }
    ]
  },
  {
    "number": 23160,
    "title": "'timestamp': None for spot binance book ticker",
    "created_at": "2024-07-20T10:54:23Z",
    "closed_at": "2024-07-20T13:04:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23160",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.63\n\n### Description\n\nI get {'BCH/USDT': {'symbol': 'BCH/USDT', 'timestamp': None, 'datetime': None, 'high': None, 'low': None, 'bid': 391.1, 'bidVolume': 27.1, 'ask': 391.2, 'askVolume': 6.983, 'vwap': None, 'open': None, 'close': None, 'last': None, 'previousClose': None, 'change': None, 'percentage': None, 'average': None, 'baseVolume': None, 'quoteVolume': None, 'info': {'u': 7269204590, 's': 'BCHUSDT', 'b': '391.10000000', 'B': '27.10000000', 'a': '391.20000000', 'A': '6.98300000'}}}\r\nwhen using watch_bids_asks() for spot. How can i get timestamp for spot binance book ticker?\n\n### Code\n\n```\r\n      ex=ccxtpro.binance()\r\n        book=await ex.watch_bids_asks(['BCH/USDT'])\r\n        print(book)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23160/comments",
    "author": "Avarong",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-07-20T11:51:57Z",
        "body": "Hello @Avarong,\r\nUnfortunately the timestamp is not provided by the exchange in this channel as you can see in the raw message\r\n\r\n```\r\n{\"u\":49065292445,\"s\":\"BTCUSDT\",\"b\":\"66526.00000000\",\"B\":\"0.18986000\",\"a\":\"66526.01000000\",\"A\":\"14.00805000\"}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 23034,
    "title": "dont understand the error message and what to do with / please help in details",
    "created_at": "2024-07-09T13:50:36Z",
    "closed_at": "2024-08-06T17:28:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23034",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.1.78.\n\n### Description\n\nHello Team!\r\n\r\nI use orders, limits, markets, stop limits, stop markets as well.\r\nSomehow I have issue with - not all the time, but sometimes - with simple market order.\r\n\r\nThe order structure is this:\r\n\r\nexchange.createOrder(symbol, 'market', order_side, amount, params={'positionSide': pos_side})\r\n\r\nAll the referenced variables have proper values that match with exchange requirements.\r\n\r\nThe error message I receive is this:\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\binance.py\", line 4279, in create_order\r\n    request = self.create_order_request(symbol, type, side, amount, price, params)\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\binance.py\", line 4457, in create_order_request\r\n    request['quantity'] = self.amount_to_precision(symbol, amount)\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 3950, in amount_to_precision\r\n    raise InvalidOrder(self.id + ' amount of ' + market['symbol'] + ' must be greater than minimum amount precision of ' + self.number_to_string(market['precision']['amount']))\r\nccxt.base.errors.InvalidOrder: binanceusdm amount of SOL/USDC:USDC must be greater than minimum amount precision of 2\r\n\r\nI use amount precision with this code:\r\ndef adjust_amount(symbol, amount):\r\n    exchange.load_markets()\r\n    symbol_formatted = symbol.replace(\"USDC\", \"/USDC:USDC\")\r\n    market = exchange.markets[symbol_formatted]\r\n    amount_precision = market['precision']['amount']\r\n    # Calculate the power of 10 for the required precision\r\n    power_of_ten = 10 ** amount_precision\r\n    # Adjust the amount using ceil and power of 10\r\n    adjusted_amount = math.ceil(amount * power_of_ten) / power_of_ten\r\n    return adjusted_amount\r\n\r\nCan you please help me to understand what I do wrong?\r\nActually I dont understand the problem exactly.\r\nIf you can give me detailed explanation what is the background of the issue, like the concept behind it, I would appreciate so much!\r\n\r\nThank you!\r\n\r\nKind regards,\r\nGabor\n\n### Code\n\nexchange.createOrder(symbol, 'market', order_side, amount, params={'positionSide': pos_side})\r\n\r\n\r\ndef adjust_amount(symbol, amount):\r\n    exchange.load_markets()\r\n    symbol_formatted = symbol.replace(\"USDC\", \"/USDC:USDC\")\r\n    market = exchange.markets[symbol_formatted]\r\n    amount_precision = market['precision']['amount']\r\n    # Calculate the power of 10 for the required precision\r\n    power_of_ten = 10 ** amount_precision\r\n    # Adjust the amount using ceil and power of 10\r\n    adjusted_amount = math.ceil(amount * power_of_ten) / power_of_ten\r\n    return adjusted_amount",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23034/comments",
    "author": "Bgsolid",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-07-10T05:39:21Z",
        "body": "@Bgsolid \r\n\r\nThe error represents that the amount should be bigger than the `market['precision']['amount']`. Take `ETH/USDT` market in kucoin as example, the market data is:\r\n```JS\r\n{\r\n  id: 'ETH-USDT',\r\n  symbol: 'ETH/USDT',\r\n  base: 'ETH',\r\n  quote: 'USDT',\r\n  baseId: 'ETH',\r\n  quoteId: 'USDT',\r\n  type: 'spot',\r\n  spot: true,\r\n  margin: true,\r\n  swap: false,\r\n  future: false,\r\n  option: false,\r\n  active: true,\r\n  contract: false,\r\n  taker: 0.001,\r\n  maker: 0.001,\r\n  precision: { amount: 1e-7, price: 0.01 },\r\n  limits: {\r\n    leverage: {},\r\n    amount: { min: 0.0001, max: 10000000000 },\r\n    price: {},\r\n    cost: { min: 0.01, max: 999999999 }\r\n  },\r\n  tierBased: true,\r\n  percentage: true,\r\n  tiers: {\r\n    taker: [\r\n      [ 0, 0.001 ],\r\n      [ 50, 0.001 ],\r\n      [ 200, 0.0009 ],\r\n      [ 500, 0.0008 ],\r\n      [ 1000, 0.0007 ],\r\n      [ 2000, 0.0007 ],\r\n      [ 4000, 0.0006 ],\r\n      [ 8000, 0.0005 ],\r\n      [ 15000, 0.00045 ],\r\n      [ 25000, 0.0004 ],\r\n      [ 40000, 0.00035 ],\r\n      [ 60000, 0.0003 ],\r\n      [ 80000, 0.00025 ]\r\n    ],\r\n    maker: [\r\n      [ 0, 0.001 ],\r\n      [ 50, 0.0009 ],\r\n      [ 200, 0.0007 ],\r\n      [ 500, 0.0005 ],\r\n      [ 1000, 0.0003 ],\r\n      [ 2000, 0 ],\r\n      [ 4000, 0 ],\r\n      [ 8000, 0 ],\r\n      [ 15000, -0.00005 ],\r\n      [ 25000, -0.00005 ],\r\n      [ 40000, -0.00005 ],\r\n      [ 60000, -0.00005 ],\r\n      [ 80000, -0.00005 ]\r\n    ]\r\n  },\r\n  marginMode: { cross: true, isolated: true }\r\n}\r\n```\r\n\r\nAnd the precision of the amount is 1e-7, which means the amount should be bigger than 0.0000001."
      },
      {
        "user": "Bgsolid",
        "created_at": "2024-07-13T14:06:29Z",
        "body": "Im debugging for a while, and test the amount generation for a couple of scenarios. My understanding is that somehow I made amount = 0 orders, which can trigger this kind of error message. Will be back in a couple of days after. Thank you!"
      },
      {
        "user": "Bgsolid",
        "created_at": "2024-08-06T17:28:09Z",
        "body": "Tested, and somehow I managed to use order amount = 0, that was the problem. Thank you for explaining the function!"
      }
    ]
  },
  {
    "number": 23018,
    "title": "QUESTION: using of both async and sync versions of ccxt within same app",
    "created_at": "2024-07-07T20:55:19Z",
    "closed_at": "2024-07-08T11:08:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23018",
    "body": "### Operating System\n\nWindows 11 / Debian\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.15\n\n### Description\n\nHi. First thing to say is thank you for ccxt - it's a really brilliant library!\r\n\r\nI have an app written in python which is watching or fetching orderbooks at multiple exchanges - using CCXT Pro where available, or async fetch methods where not.\r\n\r\nI want to try reconfigure my app with threads for some of orderbook fetching (because, off topic, my UI is running in the same event loop as ccxt and is lagging). This means I need to use the non-async ccxt library.\r\n\r\nI still want to use watchOrderBooks for some lookups but also threaded fetches alongside. I'm loathe to create two objects for ccxt and ccxt pro however (plus running load_markets on both). Is there a way to just load the async version but fallback to the non-async method at times? Or will I always need to do both imports and create both objects?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23018/comments",
    "author": "ByTheSeaL",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-07-08T03:37:38Z",
        "body": "Hi @ByTheSeaL, The async integration works differently; you'll need to initialize two exchange objects.\r\n\r\n"
      },
      {
        "user": "ByTheSeaL",
        "created_at": "2024-07-08T11:08:24Z",
        "body": "Ok thank you @sc0Vu "
      }
    ]
  },
  {
    "number": 22930,
    "title": "Retrieving open orders from different markets",
    "created_at": "2024-06-29T12:42:03Z",
    "closed_at": "2024-07-17T10:47:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22930",
    "body": "### Operating System\r\n\r\nwindows 11\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\nlast\r\n\r\n### Description\r\n\r\nHello! i'm trying to get open orders from several exchanges, I'm using fetchOpenOrders method. Without ticker it works correctly on Bybit, but on Binance ccxt returns such error: _binance fetchOpenOrders\\(\\) WARNING: fetching open orders without specifying a symbol is rate-limited to one call per 1525 seconds. Do not call self method frequently to avoid ban. Set binance.options[\"warnOnFetchOpenOrdersWithoutSymbol\"\\] \\= False to suppress self warning message._ \r\nOn swap market it is not a problem, because I can get currently opened positions tickers and retrieve open stop orders,\r\n```\r\nfor ticker in open_positions:\r\n    await update_open_stop_orders(user, market, ticker)\r\n```\r\n while on spot such decision for limit sell orders obviously doesnt work. How is it better to handle that issue?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22930/comments",
    "author": "seeyoul8r",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-06-30T08:30:30Z",
        "body": "Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning."
      },
      {
        "user": "seeyoul8r",
        "created_at": "2024-06-30T08:33:53Z",
        "body": "> Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n\r\nYes, but in this case I'm able to be banned due to often requests, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-30T09:44:43Z",
        "body": "> > Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n> \r\n> Yes, but in this case I'm able to be banned due to often requests, right?\r\n\r\n@seeyoul8r Yes, you should minimize the number of requests to that endpoint without providing a symbol. Alternatively you can call it specifying a `symbol`, the rateLimit weight in that case is much lower. "
      },
      {
        "user": "seeyoul8r",
        "created_at": "2024-06-30T09:48:58Z",
        "body": "> > > Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n> > \r\n> > \r\n> > Yes, but in this case I'm able to be banned due to often requests, right?\r\n> \r\n> @seeyoul8r Yes, you should minimize the number of requests to that endpoint without providing a symbol. Alternatively you can call it specifying a `symbol`, the rateLimit weight in that case is much lower.\r\n\r\nThanks! So if i want to get all open limit sell orders on spot exchange I need to devise some logic, for example - receiving recent trades and fetch symbols from it, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-07-01T09:28:06Z",
        "body": "@seeyoul8r You can do that, or upon placing an order you save the `symbol` used in a list or something so you know the symbols used to place orders. "
      },
      {
        "user": "ttodua",
        "created_at": "2024-07-16T19:23:15Z",
        "body": "I've checked this and `1 call per 1525 seconds` is a bug and we will try to fix it. \r\nin real numbers (approximately), on spot markets, querying `without symbol` `takes around 10 times more quota per each request compared to when requesting with symbol. for future markets, it takes around 40 times more quota. approximately, if you can request once per 60 Milliseconds (with symbol), without symbol you can request once per 1-2 seconds (depending market type)"
      },
      {
        "user": "seeyoul8r",
        "created_at": "2024-07-16T19:46:36Z",
        "body": "@ttodua, thanks for that comprehensive answer! I'll try to use it in my logic"
      },
      {
        "user": "ttodua",
        "created_at": "2024-07-16T19:59:33Z",
        "body": "@seeyoul8r also note, rate-limit are weight-oriented, rather than time-oriented. my above comment/example would be true when user does not make any queries within that period. however, if you are also making other queries, they would add to weight and it would increase the wait time, depending the amount of queries. in short, user is given X quota per second and user spends it according to the different requests."
      }
    ]
  },
  {
    "number": 22871,
    "title": "What is the best way to re-connect",
    "created_at": "2024-06-23T09:55:43Z",
    "closed_at": "2024-07-20T08:49:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22871",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nAll\n\n### Description\n\nWhen I have any error in a webscoket stream or any forever loop what is the best practice to re-connect with exchange, for eg a network error.\r\nRight Now I am doing this: closing in case of exception and again instantiation ccxt.okx for eg.\n\n### Code\n\n```\r\n      async def stream_balance_update(self, symbol,cb):\r\n        while True:\r\n            bl = None\r\n            try:\r\n                bal = await self.exch.watch_balance(params={\"extraParams\": '{\"updateInterval\": 0}'})\r\n                bl = {}\r\n                for d in list(bal[\"free\"].keys()):\r\n                    d = Balance().load(d, bal)\r\n                    bl[d.asset] = d\r\n                # logger.info(bl)\r\n                await cb(bl) if cb else None\r\n            except Exception as e:\r\n                logger.info(type(e).__name__, e)\r\n                logger.info('stream_account_update:', bal)\r\n                logger.info(traceback.format_exc())\r\n                await self.exch.close()\r\n                self.connect()\r\n\r\n    def connect(self):\r\n        if self.exchange_name == 'okx':\r\n            self.exch = ccxt.okx({\r\n                'enableRateLimit': True,\r\n                'logger': None,\r\n                'apiKey': self.api_key,\r\n                'secret': self.secret,\r\n                \"password\": self.passphrase,\r\n            })\r\n        else:\r\n            raise Exception('Exchange not supported')\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22871/comments",
    "author": "duggar",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-06-23T16:43:57Z",
        "body": "Hello @duggar, \r\n\r\nYou don't need to call `self.connect` here because you don't need to recreate the instance, `self.exc.close()` should be enough to close all pending WS connections, and then the next iteration of the loop will call `watchX` again and reconnect automatically.  "
      },
      {
        "user": "duggar",
        "created_at": "2024-06-23T17:18:08Z",
        "body": "> Hello @duggar, \n> \n> You don't need to call `self.connect` here because you don't need to recreate the instance, `self.exc.close()` should be enough to close all pending WS connections, and then the next iteration of the loop will call `watchX` again and reconnect automatically.  \n\nThanks that is super helpful !"
      }
    ]
  },
  {
    "number": 22779,
    "title": "C# WatchOrders Hyperliquid Subscriptions",
    "created_at": "2024-06-11T08:33:28Z",
    "closed_at": "2024-06-11T10:28:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22779",
    "body": "### Operating System\r\n\r\nUbuntu 22.04\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n4.3.42\r\n\r\n### Description\r\n \r\nNone of following code results in order status being received for Hyperliquid. I am using C#. I am providing walletAddress to exchange in parameters of exchange object. Has this function been tested? Does it work properly? May there be something that I am missing?\r\n\r\n### Code\r\n\r\n```\r\n  var ordersTask = this.exchange.WatchOrders();\r\n   ordersTask.Wait();\r\n   Logger.Debug($\"Orders received: {ordersTask.Result.Count()}.\");\r\n\r\n   var ordersTask = this.exchange.WatchOrders(\"SOL/USDC:USDC\");\r\n   ordersTask.Wait();\r\n   Logger.Debug($\"Orders received: {ordersTask.Result.Count()}.\");\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22779/comments",
    "author": "JakubMartinovicHusar",
    "comments": [
      {
        "user": "JakubMartinovicHusar",
        "created_at": "2024-06-11T09:07:16Z",
        "body": "I ran the same code for binance futures and it worked just fine."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T09:39:23Z",
        "body": "Hello @JakubMartinovicHusar, we will take a look and revert"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T09:46:46Z",
        "body": "@JakubMartinovicHusar I just tested and it seems to be working\r\n\r\n```\r\n npm run cli.cs -- hyperliquid WatchOrders \"SOL/USDC:USDC\" --verbose --sandbox\r\n\r\n> ccxt@4.3.42 cli.cs\r\n> dotnet run --project \"./cs/cli/cli.csproj\" hyperliquid WatchOrders SOL/USDC:USDC --verbose --sandbox\r\n\r\n[\r\n  \"SOL/USDC:USDC\"\r\n]\r\nWebSocket connected to wss://api.hyperliquid-testnet.xyz/ws\r\nSending message: {\"method\":\"subscribe\",\"subscription\":{\"type\":\"orderUpdates\",\"user\":\"0x3B3741c0EFf9C6b556Ec813e70589161F416662A\"}}\r\nOn message: {\"channel\":\"subscriptionResponse\",\"data\":{\"method\":\"subscribe\",\"subscription\":{\"type\":\"orderUpdates\",\"user\":\"0x3b3741c0eff9c6b556ec813e70589161f416662a\"}}}\r\nOn message: {\"channel\":\"orderUpdates\",\"data\":[{\"order\":{\"coin\":\"SOL\",\"side\":\"B\",\"limitPx\":\"183.75\",\"sz\":\"0.1\",\"oid\":9893803368,\"timestamp\":1718099116378,\"origSz\":\"0.1\"},\"status\":\"open\",\"statusTimestamp\":1718099116378},{\"order\":{\"coin\":\"SOL\",\"side\":\"B\",\"limitPx\":\"183.75\",\"sz\":\"0.0\",\"oid\":9893803368,\"timestamp\":1718099116378,\"origSz\":\"0.1\"},\"status\":\"filled\",\"statusTimestamp\":1718099116378}]}\r\n[\r\n  {\r\n    \"id\": \"9893803368\",\r\n    \"clientOrderId\": null,\r\n    \"timestamp\": 1718099116378,\r\n    \"datetime\": \"2024-06-11T09:45:16.378Z\",\r\n    \"lastTradeTimestamp\": null,\r\n    \"symbol\": \"SOL/USDC:USDC\",\r\n    \"type\": null,\r\n    \"side\": \"buy\",\r\n    \"price\": 183.75,\r\n    \"cost\": null,\r\n    \"average\": null,\r\n    \"amount\": null,\r\n    \"filled\": null,\r\n    \"triggerPrice\": null,\r\n    \"stopLossPrice\": null,\r\n    \"takeProfitPrice\": null,\r\n    \"remaining\": 0.0,\r\n    \"status\": \"closed\",\r\n    \"reduceOnly\": false,\r\n    \"postOnly\": false,\r\n    \"fee\": {\r\n      \"rate\": null,\r\n      \"cost\": null\r\n    },\r\n    \"trades\": [],\r\n    \"info\": {\r\n      \"order\": {\r\n        \"coin\": \"SOL\",\r\n        \"side\": \"B\",\r\n        \"limitPx\": \"183.75\",\r\n        \"sz\": \"0.0\",\r\n        \"oid\": 9893803368,\r\n        \"timestamp\": 1718099116378,\r\n        \"origSz\": \"0.1\"\r\n      },\r\n      \"status\": \"filled\",\r\n      \"statusTimestamp\": 1718099116378\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n@JakubMartinovicHusar If you enable the verbose mode can you check which wallet is being used to subscribe?\r\n"
      },
      {
        "user": "JakubMartinovicHusar",
        "created_at": "2024-06-11T10:12:36Z",
        "body": "@carlosmiei thank you for answer. \r\n\r\nI have investigated it further as you suggested and it indeed works. I had to add explicit user parameter. I was using only walletAddress parameter when instantiating exchange which is eventual API wallet key. You need to specify user - wallet address to watch orders. \r\nvar ordersTask = this.exchange.WatchOrders(\r\n                        parameters: new Dictionary<string, object>(){{\"user\", \"0x...4\"}}\r\n                    );\r\n\r\n@carlosmiei thank your for your help!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T10:23:46Z",
        "body": "@JakubMartinovicHusar Glad it worked now, but just to make it clear you just need to specify `user` if it's different from the `walletAddress`. Alternatively, you can set it in the options so you don't need to provide it manually every single time, example:\r\n\r\n```C#\r\nexchange.options[\"user\"] = \"new address\"; // will override `walletAddress` whenever it's needed\r\n```\r\n"
      },
      {
        "user": "JakubMartinovicHusar",
        "created_at": "2024-06-11T10:27:28Z",
        "body": "Even better! Thank you @carlosmiei!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T10:28:58Z",
        "body": "@JakubMartinovicHusar No problem! Will close this issue then, feel free to re-open it if needed. \r\nThanks!"
      }
    ]
  },
  {
    "number": 22447,
    "title": "Cancelling orders does not work on OKX",
    "created_at": "2024-05-09T14:17:59Z",
    "closed_at": "2024-05-10T11:49:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22447",
    "body": "### Operating System\r\n\r\nMac OS Sonoma 14.1.1\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.18\r\n\r\n### Description\r\n\r\nUsing the test code to open and cancel an order, it leaves an order uncancelled. Thank you for your help ahead of time.\r\n\r\n### Code\r\n\r\n```\r\n  \r\ndef close_positions():\r\n    # Fetch open orders\r\n    open_orders = exchange.fetch_open_orders()\r\n\r\n    # Cancel all open orders\r\n    for order in open_orders:\r\n        exchange.cancel_order(order['id'], order['symbol'])\r\n\r\n\r\ndef test_orders():\r\n    order = exchange.create_order(symbol= symbol, type = \"market\", side = \"buy\", amount=10.0)\r\n    time.sleep(10)\r\n    #exchange.cancel_order(order['id'], symbol)\r\n    close_positions()\r\n    print(\"test complete\")\r\n\r\ntest_orders()\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22447/comments",
    "author": "MrMechanical",
    "comments": [
      {
        "user": "MrMechanical",
        "created_at": "2024-05-09T14:32:05Z",
        "body": "after debugging I believe the issue is with fetch_open_orders as open_orders is empty during testing\r\nopen_orders\r\n[]"
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-05-10T05:23:21Z",
        "body": "@MrMechanical because the order type is market, and it would be matched when you create. You can use `fetchClosedOrders` instead."
      },
      {
        "user": "MrMechanical",
        "created_at": "2024-05-10T11:49:08Z",
        "body": "Thanks for the help. My bad for the misunderstanding. "
      }
    ]
  },
  {
    "number": 22425,
    "title": "ccxt.pro mexc watch_balance no data",
    "created_at": "2024-05-07T21:33:08Z",
    "closed_at": "2024-05-20T21:31:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22425",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.2.77\r\n\r\n### Description\r\n\r\nWhen I try to use watch_balance for mexc, I get no message back at all. Like no error, no message, anything... I've tried to change balance while the script is running to see if it behaves like a ticker, but I didn't get any message. Then I tried to change watch_balance to fetch_balance and I got my balance message. So REST api works but websocket is not working. So it's not a apikey issue either. I really need to use watch_balance for mexc because fetch is too slow. Did someone have any problem like that?\r\nThank you in advance!\r\n\r\n### Code\r\n\r\n```\r\nimport ccxt.pro as ccxt\r\nimport config_shawy\r\nimport asyncio\r\n\r\nexchange_id = \"mexc\"\r\nexchange_class = getattr(ccxt, exchange_id)\r\nexchange = exchange_class({\r\n    'apiKey': getattr(config_shawy, f'{exchange_id}_pub_key'),\r\n    'secret': getattr(config_shawy, f'{exchange_id}_priv_key'),\r\n    'enableRateLimit': True\r\n})\r\n\r\nasync def watch_balance():\r\n    if exchange.has['watchBalance']:\r\n        while True:\r\n            try:\r\n                balance = await exchange.watch_balance({'type' : 'spot'})\r\n                print(balance)\r\n            except Exception as e:\r\n                print(e)\r\n                # stop the loop on exception or leave it commented to retry\r\n                # raise e\r\n    else:\r\n        print(\"exchange has no watch balance mode\")\r\n\r\nasync def main():\r\n    await watch_balance()\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22425/comments",
    "author": "BEEBSDONE",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-05-08T02:25:04Z",
        "body": "@BEEBSDONE it works for me, I got message when transfer USDT from spot to swap wallet. How do you change your spot balance?"
      }
    ]
  },
  {
    "number": 22412,
    "title": "watch_ohlcv() really not return error when disable internet connection",
    "created_at": "2024-05-06T17:39:18Z",
    "closed_at": "2024-05-06T20:00:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22412",
    "body": "### Operating System\n\nwindow 10, 64 bit\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.16\n\n### Description\n\nI use the code below to test watch_ohlcv() function of pro python version 4.3.16, when I disable internet connection to catch error or something else but I dont see anything. So I can't catch the error when internet connect has proplem. The same thing happened when I changed the VPN address. I just want to check if internet connection disconnect, then wait ultil the internet connection come back, and re-connect to the exchange. HOW I CAN DO THAT? help, please. \n\n### Code\n\n```\r\n import ccxt.pro\r\nfrom asyncio import run\r\n\r\nprint('CCXT Pro version', ccxt.pro.__version__)\r\n\r\n\r\ndef table(values):\r\n    first = values[0]\r\n    keys = list(first.keys()) if isinstance(first, dict) else range(0, len(first))\r\n    widths = [max([len(str(v[k])) for v in values]) for k in keys]\r\n    string = ' | '.join(['{:<' + str(w) + '}' for w in widths])\r\n    return \"\\n\".join([string.format(*[str(v[k]) for k in keys]) for v in values])\r\n\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.binanceusdm({\r\n        # 'options': {\r\n        #     'OHLCVLimit': 1000, # how many candles to store in memory by default\r\n        # },\r\n    })\r\n    symbol = 'BTC/USDT'  # or BNB/USDT, etc...\r\n    timeframe = '1m'  # 5m, 1h, 1d\r\n    limit = 10  # how many candles to return max\r\n    method = 'watchOHLCV'\r\n    if (method in exchange.has) and exchange.has[method]:\r\n        max_iterations = 100000  # how many times to repeat the loop before exiting\r\n        for i in range(0, max_iterations):\r\n            try:\r\n                ohlcvs = await exchange.watch_ohlcv(symbol, timeframe, None, limit)\r\n                now = exchange.milliseconds()\r\n                print('\\n===============================================================================')\r\n                print('Loop iteration:', i, 'current time:', exchange.iso8601(now), symbol, timeframe)\r\n                print('-------------------------------------------------------------------------------')\r\n                print(table([[exchange.iso8601(o[0])] + o[1:] for o in ohlcvs]))\r\n            except Exception as e:\r\n                print(type(e).__name__, str(e))\r\n                break\r\n        print(exchange.id, method, 'here is not supported or not implemented yet')\r\n        await exchange.close()\r\n    else:\r\n        print(exchange.id, method, 'is not supported or not implemented yet')\r\n\r\n\r\nrun(main())\r\n \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22412/comments",
    "author": "Khanhlinhdang",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2024-05-06T20:00:18Z",
        "body": "Hi @Khanhlinhdang , in the case of watch methods the server and client realizes there has been a disconnect when there is no response after any ping pong. You can change this time by setting exchange['streaming']['keepAlive'] to a small number and you will see an error shortly after disconnecting your connection.\r\n\r\nTo keep the watch method connected, evering during an internet interruption you don't have to do anything, as long as you have the watch method inside a while loop with a try catch, as every time the watch method is called, if it is disconnected it will reconnect.\r\n\r\nI'll close this issue for now, but feel free to reach out with any questions.\r\n"
      },
      {
        "user": "Khanhlinhdang",
        "created_at": "2024-05-06T21:47:43Z",
        "body": "`def watch(self, url, message_hash, message=None, subscribe_hash=None, subscription=None): \r\n\r\n        self.open()\r\n        backoff_delay = 0\r\n        client = self.client(url)\r\n        if subscribe_hash is None and message_hash in client.futures:\r\n            return client.futures[message_hash]\r\n        future = client.future(message_hash)\r\n        subscribed = client.subscriptions.get(subscribe_hash)\r\n        if not subscribed:\r\n            client.subscriptions[subscribe_hash] = subscription or True\r\n        connected = client.connected if client.connected.done() \\\r\n            else asyncio.ensure_future(client.connect(self.session, backoff_delay))\r\n        def after(fut):\r\n            # todo: decouple signing from subscriptions\r\n            options = self.safe_value(self.options, 'ws')\r\n            cost = self.safe_value(options, 'cost', 1)\r\n            if message:\r\n                async def send_message():\r\n                    if self.enableRateLimit:\r\n                        await client.throttle(cost)\r\n                    try:\r\n                        await client.send(message)\r\n                    except ConnectionError as e:\r\n                        client.on_error(e)\r\n                    except Exception as e:\r\n                        client.on_error(e)\r\n                asyncio.ensure_future(send_message())\r\n        # if not subscribed:\r\n        #     connected.add_done_callback(after)\r\n        connected.add_done_callback(after)\r\n        return future`\r\n\r\nI was try all method you tell me. but all of it not work correctly. I check in file ccxt\\async_support\\base\\exchange.py. Then I have just close these codes \"# if not subscribed:\r\n        #     connected.add_done_callback(after)\" and put \"connected.add_done_callback(after)\" out of if codition, and GOD it was working. Thank for your support."
      }
    ]
  },
  {
    "number": 22304,
    "title": "EditOrder behavior for Bitget. C#",
    "created_at": "2024-04-27T12:24:19Z",
    "closed_at": "2024-04-29T16:53:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22304",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.3.6\n\n### Description\n\nWhen I edit an order using Biget ```await _exchange.EditOrder```\r\nI retrieve two records from ```await exchange.WatchOrders```:\r\n```\r\nOn message: {\"action\":\"snapshot\",\"arg\":{\"instType\":\"SUSDT-FUTURES\",\"channel\":\"orders\",\"instId\":\"default\"},\"data\":[{\"accBaseVolume\":\"0\",\"cTime\":\"1714219644386\",\"clientOid\":\"240427150659_3\",\"enterPointSource\":\"API\",\"feeDetail\":[{\"feeCoin\":\"SUSDT\",\"fee\":\"0\"}],\"force\":\"gtc\",\"instId\":\"SXRPSUSDT\",\"leverage\":\"10\",\"marginCoin\":\"SUSDT\",\"marginMode\":\"crossed\",\"notionalUsd\":\"8.0784\",\"orderId\":\"1168087339327201281\",\"orderType\":\"limit\",\"posMode\":\"hedge_mode\",\"posSide\":\"long\",\"price\":\"0.5049\",\"reduceOnly\":\"no\",\"side\":\"buy\",\"size\":\"16\",\"status\":\"canceled\",\"tradeSide\":\"open\",\"uTime\":\"1714219660954\"}],\"ts\":1714219660957}\r\nOn message: {\"action\":\"snapshot\",\"arg\":{\"instType\":\"SUSDT-FUTURES\",\"channel\":\"orders\",\"instId\":\"default\"},\"data\":[{\"accBaseVolume\":\"0\",\"cTime\":\"1714219660957\",\"clientOid\":\"240427150716_4\",\"enterPointSource\":\"API\",\"feeDetail\":[{\"feeCoin\":\"SUSDT\",\"fee\":\"0\"}],\"force\":\"gtc\",\"instId\":\"SXRPSUSDT\",\"leverage\":\"10\",\"marginCoin\":\"SUSDT\",\"marginMode\":\"crossed\",\"notionalUsd\":\"8.08\",\"orderId\":\"1168087408831012871\",\"orderType\":\"limit\",\"posMode\":\"hedge_mode\",\"posSide\":\"long\",\"price\":\"0.505\",\"reduceOnly\":\"no\",\"side\":\"buy\",\"size\":\"16\",\"status\":\"live\",\"tradeSide\":\"open\",\"uTime\":\"1714219660957\"}],\"ts\":1714219660959}\r\n```\r\nLet's assume that the order was modified outside API (eg at WEB). How can I understand that the order was modified but not cancelled only by first record?\r\nHere are two unlinked records.\r\nBitget does not allow to send the same clientOid.\r\n\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22304/comments",
    "author": "skuvv",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-29T15:14:02Z",
        "body": "Hello @skuvv,\r\n\r\nWhen you edit an order you're actually canceling+placing a new order at bitget, hence the two unlinked records (the order canceled and the new one).\r\n\r\n```\r\nCXT v4.3.11\r\nbitget.watchOrders (LTC/USDT:USDT)\r\n       symbol |                  id |                        clientOrderId |     timestamp |                 datetime | lastTradeTimestamp |  type | timeInForce | postOnly | side | price | amount | cost | filled | remaining |   status |                          fee | trades |                           fees\r\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nLTC/USDT:USDT | 1168858191115231247 |                  1168858191127814147 | 1714403429776 | 2024-04-29T15:10:29.776Z |      1714403583667 | limit |         GTC |    false |  buy |    50 |    0.1 |    5 |      0 |       0.1 | canceled | {\"cost\":0,\"currency\":\"USDT\"} |     [] | [{\"cost\":0,\"currency\":\"USDT\"}]\r\nLTC/USDT:USDT | 1168858836614422533 | e0e5044e-0092-4eec-8375-49362667b7db | 1714403583673 | 2024-04-29T15:13:03.673Z |      1714403583673 | limit |         GTC |    false |  buy |    52 |    0.1 |  5.2 |      0 |       0.1 |     open | {\"cost\":0,\"currency\":\"USDT\"} |     [] | [{\"cost\":0,\"currency\":\"USDT\"}]\r\n2 objects\r\n```\r\n"
      },
      {
        "user": "skuvv",
        "created_at": "2024-04-29T15:55:15Z",
        "body": "I suppose there is no way to link these orders or add an information about replace in canceled order..."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-29T16:47:52Z",
        "body": "@skuvv Unfortunately I don't think so, `edit` in this case is only a shortcut for canceling+placing a new order"
      },
      {
        "user": "skuvv",
        "created_at": "2024-04-29T16:53:43Z",
        "body": "Ok, thank you for information. Will look to another way."
      }
    ]
  },
  {
    "number": 22284,
    "title": "BingX | edit_order, i need help",
    "created_at": "2024-04-26T10:24:36Z",
    "closed_at": "2024-04-29T15:15:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22284",
    "body": "### Operating System\r\n\r\nWindows 11\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\nLast\r\n\r\n### Description\r\n\r\nI try to do edit_order to edit, change my Take Profit, but when I run the script it tells me that :\r\n\r\n### Code\r\n\r\n```\r\nimport ccxt\r\n\r\nbingx_exchange = ccxt.bingx({\r\n    'apiKey': '--',\r\n    'secret': '--',\r\n    'options': {\r\n        'adjustForTimeDifference': True,\r\n        'defaultType': 'swap',\r\n    },\r\n})\r\n\r\n  order = bingx_exchange.edit_order(\r\n    id='Yours', \r\n    symbol='BTC/USDT', \r\n    type='market', \r\n    side='sell', \r\n    amount='0.0200', \r\n    params={\"takeProfit\": {\"triggerPrice\": take_profit}}\r\n)\r\nprint(order)\r\n\r\n```\r\n\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\gabri\\OneDrive\\Documents\\za.py\", line 14, in <module>\r\n    trader = bingx_exchange.edit_order(\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\bingx.py\", line 4088, in edit_order\r\n    response = self.spotV1PrivatePostTradeOrderCancelReplace(self.extend(request, params))\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\base\\types.py\", line 35, in unbound_method\r\n    return _self.request(self.path, self.api, self.method, params, config=self.config)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\base\\exchange.py\", line 3654, in request\r\n    return self.fetch2(path, api, method, params, headers, body, config)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\base\\exchange.py\", line 3651, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\base\\exchange.py\", line 673, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"C:\\Users\\gabri\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ccxt\\bingx.py\", line 4228, in handle_errors\r\n    raise ExchangeError(feedback)  # unknown message\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nccxt.base.errors.ExchangeError: bingx {\"code\":100004,\"msg\":\"Permission denied as the API key was created without the permission\",\"timestamp\":1714126674957}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22284/comments",
    "author": "xerno0om",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-26T11:50:41Z",
        "body": "Hello @xerno0om, we will take a look and let you know shortly."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-26T14:21:06Z",
        "body": "@xerno0om I found indeed some issues with tp/sl orders on spot markets, they will be fixed and released in a few hours.\r\n\r\nNonetheless, you're using the wrong syntax to place independent tp/sl orders, it should be something like this:\r\n\r\n```Python\r\n\r\nspot_tp_order = await bingx.create_order('LTC/USDT', 'market', 'sell', 0.1, None, {'takeProfitPrice': 150})\r\n\r\nspot_limit_sl_order = await bingx.create_order('LTC/USDT', 'limit', 'sell', 0.1, 30, {'stopLossPrice': 35})\r\n\r\n```\r\n\r\nAfter the release the syntax above  ⬆️  should work for placing spot tp/sl orders."
      },
      {
        "user": "xerno0om",
        "created_at": "2024-04-26T15:05:49Z",
        "body": "@carlosmiei no, that's not exactly my problem, is that: I have already opened my position with my take profit, but my problem is that I want to move my take profit from this position a little higher, that's what I can't do it, what should I use? edit_order ?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-27T18:39:50Z",
        "body": "@xerno0om Oh ok the symbol confused me because `BTC/USDT` represents a spot market.\r\n\r\nWell, in that case I'm not sure if it is possible to edit the sl/tp of a currently opened position (I'm not finding an API endpoint for that)."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-27T18:39:59Z",
        "body": "We will ask bingx about it"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-28T07:40:43Z",
        "body": "@xerno0om Bingx just confirmed that at the moment you can't edit it, you have to close + open a new position. "
      }
    ]
  },
  {
    "number": 22269,
    "title": "Migration to version 4",
    "created_at": "2024-04-24T14:23:29Z",
    "closed_at": "2024-05-20T15:28:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22269",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n3\n\n### Description\n\nI have a project which I last worked on in May 2023, so I use ccxt version 3. I tried but haven't find any migration guide from 3 to 4. Are there some things I should be careful about when upgrading? Are there any breaking changes?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22269/comments",
    "author": "uiii",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T14:28:32Z",
        "body": "Hello @uiii,\r\nI would say that the transition should be smooth, most of the updates are fixes and API upgrades. "
      }
    ]
  },
  {
    "number": 22265,
    "title": "okx {\"msg\":\"Request header OK-ACCESS-PASSPHRASE incorrect.\",\"code\":\"50105\"}",
    "created_at": "2024-04-24T08:05:15Z",
    "closed_at": "2024-04-24T11:56:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22265",
    "body": "### Operating System\r\n\r\nubuntu\r\n\r\n### Programming Languages\r\n\r\nJavaScript\r\n\r\n### CCXT Version\r\n\r\n^4.3.6\r\n\r\n### Description\r\n\r\nI am passing correct passphrase then also I am getting the same error again and again \r\nI have check it several times\r\n\r\n### Code\r\n\r\n```\r\n const okxExchange = new ccxt.okx({\r\n  apiKey: \"my-api-key\",\r\n  secret: \"my-secret-key\",\r\n  password: \"my-password\",\r\n  passPharse: \"Helloworldiamhere@98\",\r\n});\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22265/comments",
    "author": "block98ct",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T09:11:56Z",
        "body": "Hello @block98ct,\r\nyou should provide the `passphrase` as `password` to ccxt, example\r\n\r\n```Javascript\r\n const okxExchange = new ccxt.okx({\r\n  apiKey: \"my-api-key\",\r\n  secret: \"my-secret-key\",\r\n  password: \"my-api-passphrase\",\r\n});\r\n```\r\n"
      },
      {
        "user": "block98ct",
        "created_at": "2024-04-24T09:18:45Z",
        "body": "@carlosmiei Thanks for the quick response\r\nIs this the same for kucoin also??"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T09:47:04Z",
        "body": "@block98ct Yes, the api passphrase/password should always be provided as `password` to ccxt"
      },
      {
        "user": "block98ct",
        "created_at": "2024-04-24T09:59:05Z",
        "body": "@carlosmiei  thanks for your help \r\nnow it's working\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T11:56:41Z",
        "body": "@block98ct Cool, will close this issue then, let us know if anything!"
      }
    ]
  },
  {
    "number": 22179,
    "title": "Are users meant to update frequently?",
    "created_at": "2024-04-16T22:41:13Z",
    "closed_at": "2024-04-17T08:57:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22179",
    "body": "\r\n\r\nThere is a mapping between CCXT symbols and particular exchanges and it is not clear to me whether this mapping is updated through hardcoding in the library code or dynamically though some server?\r\n\r\nIf things are hardcoded in library, does this mean we are meant to stay up to date every day or so?\r\n\r\nThanks,\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22179/comments",
    "author": "thisismygitrepo",
    "comments": [
      {
        "user": "Dan-krm",
        "created_at": "2024-04-17T06:09:03Z",
        "body": "Hi @thisismygitrepo it's best to keep the library updated since there is constantly exchanges being updated, new features being added and bugs being fixed. But I don't think you're required to update your version for the specific reason that you specified.\r\n\r\nThe CCXT market symbols are handled through the fetchMarkets method in each individual exchange class. Most of the methods in CCXT include a call to loadMarkets which calls fetchMarkets to update and set all of the market information on the exchange."
      },
      {
        "user": "fxxxfun",
        "created_at": "2024-04-17T06:20:49Z",
        "body": "thanks @Dan-krm for the insight!"
      },
      {
        "user": "thisismygitrepo",
        "created_at": "2024-04-17T08:57:43Z",
        "body": "Thanks. "
      }
    ]
  },
  {
    "number": 22104,
    "title": "Mexc can't put a stop loss order",
    "created_at": "2024-04-09T11:34:56Z",
    "closed_at": "2024-04-10T02:14:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22104",
    "body": "### Operating System\n\nwindows 11\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n3.1.50\n\n### Description\n\nhello,\r\n\r\nI would like to create a Stop-Limit order but it's always a Limit order which is created\r\nI've tried using parameters but mexc is still creating a Limit order with no stop loss and no trigger price\r\nIt looks like neither stopPrice nor triggerPrice is taken into account\r\n\r\nany thoughts ?\r\n\r\nthanks\r\n\r\n{'id': 'C02__406344578380128256053', 'clientOrderId': None, 'timestamp': 1712662332869, 'datetime': '2024-04-09T11:32:12.869Z', 'lastTradeTimestamp': None, 'status': None, 'symbol': 'NTX/USDT', 'type': 'limit', 'timeInForce': None, 'side': 'sell', 'price': 0.1, 'stopPrice': None, 'triggerPrice': None, 'average': None, 'amount': 63, 'cost': None, 'filled': None, 'remaining': None, 'fee': None, 'trades': [], 'info': {'symbol': 'NTXUSDT', 'orderId': 'C02__406344578380128256053', 'orderListId': '-1', 'price': '0.1', 'origQty': '63', 'type': 'LIMIT', 'side': 'SELL', 'transactTime': '1712662332869'}, 'fees': [], 'lastUpdateTimestamp': None, 'postOnly': None, 'reduceOnly': None, 'takeProfitPrice': None, 'stopLossPrice': None}\r\n\n\n### Code\n\n```\r\nparams = {\r\n    'triggerPrice': 0.045,\r\n    'triggerDirection': 'below', # order will be triggered when price is above 1700\r\n    'stopPrice': 0.035,  # your stop loss price\r\n    'stopLoss': {\r\n        'type': 'limit',# or 'market', this field is not necessary if limit price is specified\r\n        'price': 0.035, # limit price for a limit stop loss order\r\n        'triggerPrice': 0.04,\r\n        'stopPrice': 0.035,\r\n    }\r\n    }\r\n```\r\n    \r\n    order = exchange.create_order('NTXUSDT', 'limit','sell', 150, 0.035, params)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22104/comments",
    "author": "swiinger",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-04-09T14:10:37Z",
        "body": "@swiinger do you create order in spot market? I think mexc doesn't support stop order for spot."
      },
      {
        "user": "swiinger",
        "created_at": "2024-04-09T17:17:09Z",
        "body": "@sc0Vu : thanks for pointing out : yes it's for spot\r\nit's more clear now that this platform is way too restricted..."
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-04-10T02:14:47Z",
        "body": "@swiinger yup, the function depends on exchange api. Let us know if you have any other issue. "
      }
    ]
  },
  {
    "number": 21996,
    "title": "Binance Testnet - orders expired for a longer time before they get filled",
    "created_at": "2024-03-31T07:36:46Z",
    "closed_at": "2024-05-20T15:30:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21996",
    "body": "### Operating System\n\nWindows 11 Enterprise, V. 10.0.22631 Build 22631\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.2.83\n\n### Description\n\nI'm creating spot market orders on Binance Testnet with ccxt in Python. \r\n\r\nAlmost all orders are getting expired for some time before filling them. I calculate in a loop remaining quantity and repeat the order with this quantity but I think this process takes too long. E.g. for filling buy order for 1124 LTC/USDT the process takes 4 minutes. For three cryptocurrencies it can take 20 minutes.\r\n\r\nWhen an order has the status 'expired', it has such structure:\r\n\r\n{'info': {'symbol': 'BNBUSDT', 'orderId': '3634181', 'orderListId': '-1', 'clientOrderId': 'x-R4BD3S82ebf2f4d30ecb855e4c07e0', 'price': '0.00000000', 'origQty': '186.62600000', 'executedQty': '70.54700000', 'cummulativeQuoteQty': '41486.54240000', 'status': 'EXPIRED', 'timeInForce': 'GTC', 'type': 'MARKET', 'side': 'SELL', 'stopPrice': '0.00000000', 'icebergQty': '0.00000000', 'time': '1711831380419', 'updateTime': '1711831380419', 'isWorking': True, 'workingTime': '1711831380419', 'origQuoteOrderQty': '0.00000000', 'selfTradePreventionMode': 'EXPIRE_MAKER'}, 'id': '3634181', 'clientOrderId': 'x-R4BD3S82ebf2f4d30ecb855e4c07e0', 'timestamp': 1711831380419, 'datetime': '2024-03-30T20:43:00.419Z', 'lastTradeTimestamp': None, 'lastUpdateTimestamp': 1711831380419, 'symbol': 'BNB/USDT', 'type': 'market', 'timeInForce': 'GTC', 'postOnly': False, 'reduceOnly': None, 'side': 'sell', 'price': 588.0695479609338, 'triggerPrice': None, 'amount': 186.626, 'cost': 41486.5424, 'average': 588.0695479609338, 'filled': 70.547, 'remaining': 116.079, 'status': 'expired', 'fee': None, 'trades': [], 'fees': [], 'stopPrice': None, 'takeProfitPrice': None, 'stopLossPrice': None}\r\n\r\nIs this normal for the Binance Testnet or am I missing something?\n\n### Code\n\n```\r\n# in __init__:\r\n\r\n        self.exchange = ccxt.binance({\r\n            'apiKey': api_key,\r\n            'secret': api_secret,\r\n            'enableRateLimit': True,\r\n            'options': {\r\n                'defaultType': 'spot'\r\n            }\r\n        })\r\n\r\n# in _buy_order I call create_market_buy_order without any options, same for _sell_order:\r\n\r\norder = self.exchange.create_market_buy_order(symbol=pair, amount=amount)\r\n\r\n# when fetching order status I check for remaining quantity if order is expired and repeat the buy or sell order with that quantity:\r\n\r\norder = self.exchange.fetch_order(order_id, pair)\r\nstatus = order[\"status\"].lower()\r\n\r\nif status == 'expired':\r\n                    initial_quantity = float(order.get(\"info\", {}).get(\"origQty\", 0))\r\n                    executed_quantity = float(order.get(\"info\", {}).get(\"executedQty\", 0))\r\n                    remaining_quantity = initial_quantity - executed_quantity\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21996/comments",
    "author": "LeRobert",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-01T11:22:37Z",
        "body": "Hello @LeRobert, I think that might be related to the lack of liquidity in the testnet environment. "
      },
      {
        "user": "LeRobert",
        "created_at": "2024-04-01T12:44:40Z",
        "body": "> Hello @LeRobert, I think that might be related to the lack of liquidity in the testnet environment.\r\n\r\nThank you, Carlos, for the reply. This confirms my assumptions. I intend to work with cryptos from the top 200 regarding the MC and this might happen in a production environment at some point. \r\n\r\nI was thinking of placing orders in parallel for all cryptos to be traded, to speed up the process (now they are filled sequentially). The method create_orders is not supported for the spot market as I saw in the code. Probably the async version of create_order could be a solution for this?"
      }
    ]
  },
  {
    "number": 21862,
    "title": "ClosedOrders does not work on Binance Swap - ExchangeError: binance {\"code\":-4166,\"msg\":\"Search window is restricted to recent 90 days only.\"}",
    "created_at": "2024-03-21T17:19:33Z",
    "closed_at": "2024-03-22T11:56:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21862",
    "body": "### Operating System\r\n\r\n_No response_\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n4.2.79 \r\n\r\n### Description\r\n\r\nTry to load closed orders but doesn't work for me\r\n\r\n### Code\r\n\r\n```\r\nfetchCanceledAndClosedOrders('FET/USDT:USDT', 1705857391, 10)\r\nor\r\nfetchClosedOrders('FET/USDT:USDT', 1705857391, 10)\r\n\r\nbut SPOT pair \r\nfetchClosedOrders('FET/USDT', 1705857391, 10)\r\ndoes work\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21862/comments",
    "author": "tom-teamcoda",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-03-21T18:06:00Z",
        "body": "Hello @tom-teamcoda, unfortunately that's a restriction on the exchange side (spot and swap use different apis so they might have different limits/restrictions).\r\n\r\nWith that said, there's nothing ccxt can do about it. \r\n"
      },
      {
        "user": "tom-teamcoda",
        "created_at": "2024-03-21T18:07:10Z",
        "body": "I'm sorry but even with timestamp from 1 day ago it does not work "
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-03-21T18:35:42Z",
        "body": "@tom-teamcoda That's because you're providing the timestamp in seconds instead of milliseconds (the unified format accepted by ccxt).\r\n\r\nCan you try that?"
      },
      {
        "user": "tom-teamcoda",
        "created_at": "2024-03-22T19:57:49Z",
        "body": "Yeah works. Also without Params"
      }
    ]
  },
  {
    "number": 21837,
    "title": "Whitelist of addresses",
    "created_at": "2024-03-20T11:40:00Z",
    "closed_at": "2024-03-20T12:50:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21837",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nHi, everybody\r\nI have a problem that is very much in the way. Many exchanges ask to add an address to the \"whitelist of addresses\" in order to withdraw funds to an unknown address. Is it possible to withdraw funds from the exchange to addresses without a whitelist or add an address to the white list directly in the code\n\n### Code\n\n_No response_",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21837/comments",
    "author": "azievm",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-03-20T12:50:36Z",
        "body": "Hello @azievm,\r\nUnfortunately there's nothing ccxt can do about it, that's a requirement on the exchange side and most of the time you can't use the API to whitelist addresses. "
      }
    ]
  },
  {
    "number": 21707,
    "title": " probit access token expired",
    "created_at": "2024-03-14T02:07:32Z",
    "closed_at": "2024-03-14T03:06:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21707",
    "body": "### Operating System\n\nxampp, win10\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\nlastest\n\n### Description\n\nHi;\r\nI've made create_order in probit exchange but got error:\r\n\r\nFatal error: Uncaught ccxt\\AuthenticationError: probit access token expired, call signIn() method in C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php:1777 Stack trace: #0 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\Exchange.php(4404): ccxt\\probit->sign('new_order', 'private', 'POST', Array, NULL, NULL) #1 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\Exchange.php(4412): ccxt\\Exchange->fetch2('new_order', 'private', 'POST', Array, NULL, NULL, Array) #2 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\abstract\\probit.php(92): ccxt\\Exchange->request('new_order', 'private', 'POST', Array, NULL, NULL, Array) #3 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php(1240): ccxt\\abstract\\probit->privatePostNewOrder(Array) #4 C:\\xampp\\htdocs\\main\\ccxt11t3\\probitORDER.php(52): ccxt\\probit->create_order('BTC-USDT', 'LIMIT', 'buy', 0.0003, 50000.0) #5 {main} thrown in C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php on line 1777\r\n\r\nHow can i get this worked? thank for your support!\r\n\n\n### Code\n\n```\r\n  $poloniex   = new \\ccxt\\probit   (array (\r\n    'apiKey' => 'xxx',\r\n    'secret' => 'xxxx',\r\n));\r\n\r\n\r\n$poloniex_markets = $poloniex->load_markets ();\r\n$poloniex->create_order ('BTC-USDT', 'LIMIT', 'buy', 0.0001, 50000, array ('client_order_id' => '123'));\r\n\r\n\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21707/comments",
    "author": "haitokt",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-03-14T02:12:22Z",
        "body": "@haitokt I think you can signIn to retrieve another token."
      },
      {
        "user": "haitokt",
        "created_at": "2024-03-14T03:06:09Z",
        "body": "thank you, it worked!"
      }
    ]
  },
  {
    "number": 21666,
    "title": "fetch_order_book() to upbit doesn't work.",
    "created_at": "2024-03-12T01:01:00Z",
    "closed_at": "2024-05-20T15:31:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21666",
    "body": "### Operating System\n\nDocker python:3.7 image\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nWhen I try to fetch an order book from Upbit exchange\r\nI encounter an exception like below.\r\n\r\nException: upbit safeMarket() requires a fourth argument for KRW-SXP to disambiguate between different markets with the same market id\r\n\r\nThanks for your help in advance.\n\n### Code\n\n```\r\nimport ccxt\r\nexchange = ccxt.upbit()\r\nsymbol = 'SXP/KRW'\r\ntry:\r\n    order_book = exchange.fetch_order_book(symbol)\r\nexcept Exception as e:\r\n    pass\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21666/comments",
    "author": "handhwang",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-03-12T07:28:39Z",
        "body": "@handhwang it works on the latest version, could you upgrade?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-05-20T15:31:46Z",
        "body": "Seems to be working\r\n```\r\np upbit fetchOrderBook SXP/KRW                          \r\nPython v3.11.7\r\nCCXT v4.3.21\r\nupbit.fetchOrderBook(SXP/KRW)\r\n{'asks': [[455.8, 967.49663402],\r\n          [455.9, 2900.45543765],\r\n          [456.0, 3450.65789475],\r\n          [456.1, 8640.0],\r\n          [456.3, 2190.0],\r\n          [456.5, 1890.0],\r\n          [456.7, 160.0],\r\n          [456.8, 4769.70758998],\r\n          [457.0, 5732.18402305],\r\n          [457.3, 1613.1929913],\r\n          [457.5, 33.8579235],\r\n          [457.6, 141.944321],\r\n          [457.8, 239.57490399],\r\n          [458.0, 230.34061136],\r\n          [458.5, 1481.76170084]],\r\n 'bids': [[454.4, 5000.0],\r\n          [454.3, 7194.02377283],\r\n          [454.2, 1647.2],\r\n          [454.1, 19272.02295799],\r\n          [454.0, 2053.0],\r\n          [453.9, 12116.04980501],\r\n          [453.7, 2053.0],\r\n          [453.6, 218.14484126],\r\n          [453.0, 2207.50551876],\r\n          [452.9, 2053.0],\r\n          [452.8, 2053.0],\r\n          [451.8, 2212.26206285],\r\n          [451.5, 124.40400834],\r\n          [451.3, 3135.46931087],\r\n          [451.2, 6650.94419696]],\r\n 'datetime': '2024-05-20T15:31:32.199Z',\r\n 'nonce': None,\r\n 'symbol': 'SXP/KRW',\r\n 'timestamp': 1716219092199}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 21595,
    "title": " calculate_fee() missing 1 required positional argument: 'self'",
    "created_at": "2024-03-07T18:33:35Z",
    "closed_at": "2024-03-07T18:40:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21595",
    "body": "### Operating System\n\nubuntu 20.04\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.2.48\n\n### Description\n\nExample to reproduce : \r\n\r\nTraceback (most recent call last):\r\n  File \"/home/localuser/calculation.py\", line 30, in <module>\r\n    returned=ccxt.binance.calculate_fee(symbol=symbol, type=type, side=side,\r\nTypeError: calculate_fee() missing 1 required positional argument: 'self'\r\n\n\n### Code\n\n```\r\n exchange = ccxt.binance({\r\n    \"apiKey\": API_KEY,\r\n    \"secret\": API_SECRET\r\n})\r\n\r\nexchange.load_markets()\r\n\r\n\r\n#BUY BUY SELL\r\nsymbol = 'ETH/BTC'\r\ntype = 'limit'\r\nside = 'buy'\r\namount=0.1\r\nprice=0.05704\r\ntotal=float(amount*price)\r\n\r\nreturned=ccxt.binance.calculate_fee(symbol=symbol, type=type, side=side, amount=amount, price=price)\r\nprint(returned) \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21595/comments",
    "author": "VeilleurTrytoFix",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-03-07T18:40:37Z",
        "body": "Hello @VeilleurTrytoFix,\r\n\r\nYou're calling it as a static method (ccxt.binance.calculate_fee) but it's not, you should do it instead\r\n\r\n`exchange.calculate_fee(symbol=symbol, type=type, side=side, amount=amount, price=price)`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-03-07T18:40:57Z",
        "body": "Just tested and worked\r\n\r\n```\r\nPython v3.11.7\r\nCCXT v4.2.64\r\nbinanceusdm.calculateFee(BTC/USDT:USDT,limit,buy,0.1,50)\r\n{'cost': 4e-05, 'currency': 'USDT', 'rate': 0.0004, 'type': 'taker'}\r\n```\r\n"
      },
      {
        "user": "VeilleurTrytoFix",
        "created_at": "2024-03-07T18:50:12Z",
        "body": "it works thank guy !\r\n\r\ncan you explain \"rate\" returned value ? cannot find anything in doc"
      }
    ]
  },
  {
    "number": 21290,
    "title": "How to update pair list for specific exchange ?",
    "created_at": "2024-02-20T09:25:47Z",
    "closed_at": "2024-02-20T11:25:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21290",
    "body": "### Operating System\r\n\r\nubuntu 20.04\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\nccxt-4.2.47\r\n\r\n### Description\r\n\r\nHi all,\r\n\r\nI'm looking for how to update the pair available on spot market for binance exchange : \r\n\r\nCCXT trying to post an order on : XMR/ETH,XMR/BTC,PAXG/BNB or these pair are not available on binance spot market\r\n\r\nHow can i update the available pair ?\r\n\r\nin my below example :  **'spot': True,** its wrong, binance deleted XMR from market list\r\n\r\nThanks\r\n\r\n### Code\r\n\r\n```py\r\nexchange.load_markets()\r\nprint(exchange.markets['XMR/ETH'])\r\n \r\n{'id': 'XMRETH', 'lowercaseId': 'xmreth', 'symbol': 'XMR/ETH', 'base': 'XMR', 'quote': 'ETH', 'settle': None, 'baseId': 'XMR', 'quoteId': 'ETH', 'settleId': None, 'type': 'spot', 'spot': True, 'margin': False, 'swap': False, 'future': False, 'option': False, 'index': None, 'active': False, 'contract': False, 'linear': None, 'inverse': None, 'subType': None, 'taker': 0.001, 'maker': 0.001, 'contractSize': None, 'expiry': None, 'expiryDatetime': None, 'strike': None, 'optionType': None, 'precision': {'amount': 3, 'price': 5, 'cost': None, 'base': 8, 'quote': 8}, 'limits': {'leverage': {'min': None, 'max': None}, 'amount': {'min': 0.001, 'max': 9000000.0}, 'price': {'min': 1e-05, 'max': 1000.0}, 'cost': {'min': 0.001, 'max': 9000000.0}, 'market': {'min': 0.0, 'max': 225.56396694}}, 'created': None, 'info': {'symbol': 'XMRETH', 'status': 'BREAK', 'baseAsset': 'XMR', 'baseAssetPrecision': '8', 'quoteAsset': 'ETH', 'quotePrecision': '8', 'quoteAssetPrecision': '8', 'baseCommissionPrecision': '8', 'quoteCommissionPrecision': '8', 'orderTypes': ['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT_LIMIT'], 'icebergAllowed': True, 'ocoAllowed': True, 'quoteOrderQtyMarketAllowed': True, 'allowTrailingStop': True, 'cancelReplaceAllowed': True, 'isSpotTradingAllowed': True, 'isMarginTradingAllowed': False, 'filters': [{'filterType': 'PRICE_FILTER', 'minPrice': '0.00001000', 'maxPrice': '1000.00000000', 'tickSize': '0.00001000'}, {'filterType': 'LOT_SIZE', 'minQty': '0.00100000', 'maxQty': '9000000.00000000', 'stepSize': '0.00100000'}, {'filterType': 'ICEBERG_PARTS', 'limit': '10'}, {'filterType': 'MARKET_LOT_SIZE', 'minQty': '0.00000000', 'maxQty': '225.56396694', 'stepSize': '0.00000000'}, {'filterType': 'TRAILING_DELTA', 'minTrailingAboveDelta': '10', 'maxTrailingAboveDelta': '2000', 'minTrailingBelowDelta': '10', 'maxTrailingBelowDelta': '2000'}, {'filterType': 'PERCENT_PRICE_BY_SIDE', 'bidMultiplierUp': '5', 'bidMultiplierDown': '0.2', 'askMultiplierUp': '5', 'askMultiplierDown': '0.2', 'avgPriceMins': '5'}, {'filterType': 'NOTIONAL', 'minNotional': '0.00100000', 'applyMinToMarket': True, 'maxNotional': '9000000.00000000', 'applyMaxToMarket': False, 'avgPriceMins': '5'}, {'filterType': 'MAX_NUM_ORDERS', 'maxNumOrders': '200'}, {'filterType': 'MAX_NUM_ALGO_ORDERS', 'maxNumAlgoOrders': '5'}], 'permissions': ['SPOT', 'TRD_GRP_015', 'TRD_GRP_016', 'TRD_GRP_023', 'TRD_GRP_024', 'TRD_GRP_025'], 'defaultSelfTradePreventionMode': 'EXPIRE_MAKER', 'allowedSelfTradePreventionModes': ['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH']}, 'percentage': True, 'feeSide': 'get', 'tierBased': False}\r\n \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21290/comments",
    "author": "VeilleurTrytoFix",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2024-02-20T10:16:35Z",
        "body": "I'm not entirely sure what your asking, but if you want to refresh the markets that you've loaded from the exchange, you can can `load_markets` and assign `reload` to `True`\r\n\r\n```py\r\nload_markets(reload=True)\r\n```"
      },
      {
        "user": "VeilleurTrytoFix",
        "created_at": "2024-02-20T10:17:58Z",
        "body": "> I'm not entirely sure what your asking, but if you want to refresh the markets that you've loaded from the exchange, you can can `load_markets` and assign `reload` to `True`\r\n> \r\n> ```python\r\n> load_markets(reload=True)\r\n> ```\r\n\r\ni updated my comment with an example : \r\n\r\nprint(exchange.markets['XMR/ETH'])\r\n\r\nreturn : 'spot': True\r\n\r\nbinance deleted all XMR pair for trading on spot"
      },
      {
        "user": "samgermain",
        "created_at": "2024-02-20T10:38:37Z",
        "body": "> binance deleted all XMR pair for trading on spot\r\n\r\nYou can check if trading is enabled by checking the value of `active` on a market. If `active` is equal to `false` then trading is no longer enabled\r\n\r\n```py\r\n{\r\n  id: 'XMRETH',\r\n  lowercaseId: 'xmreth',\r\n  symbol: 'XMR/ETH',\r\n  base: 'XMR',\r\n  quote: 'ETH',\r\n  settle: undefined,\r\n  baseId: 'XMR',\r\n  quoteId: 'ETH',\r\n  settleId: undefined,\r\n  type: 'spot',\r\n  spot: true,\r\n  margin: false,\r\n  swap: false,\r\n  future: false,\r\n  option: false,\r\n  index: undefined,\r\n  active: false,                                            ##################### Here ####################\r\n  contract: false,\r\n  linear: undefined,\r\n  inverse: undefined,\r\n  subType: undefined,\r\n  taker: 0.001,\r\n  maker: 0.001,\r\n  contractSize: undefined,\r\n  expiry: undefined,\r\n  expiryDatetime: undefined,\r\n  strike: undefined,\r\n  optionType: undefined,\r\n  precision: { amount: 3, price: 5, base: 8, quote: 8 },\r\n  limits: {\r\n    leverage: { min: undefined, max: undefined },\r\n    amount: { min: 0.001, max: 9000000 },\r\n    price: { min: 0.00001, max: 1000 },\r\n    cost: { min: 0.001, max: 9000000 },\r\n    market: { min: 0, max: 225.56396694 }\r\n  },\r\n  created: undefined,\r\n  info: {\r\n    symbol: 'XMRETH',\r\n    status: 'BREAK',\r\n    baseAsset: 'XMR',\r\n    baseAssetPrecision: '8',\r\n    quoteAsset: 'ETH',\r\n    quotePrecision: '8',\r\n    quoteAssetPrecision: '8',\r\n    baseCommissionPrecision: '8',\r\n    quoteCommissionPrecision: '8',\r\n    orderTypes: [\r\n      'LIMIT',\r\n      'LIMIT_MAKER',\r\n      'MARKET',\r\n      'STOP_LOSS_LIMIT',\r\n      'TAKE_PROFIT_LIMIT'\r\n    ],\r\n    icebergAllowed: true,\r\n    ocoAllowed: true,\r\n    quoteOrderQtyMarketAllowed: true,\r\n    allowTrailingStop: true,\r\n    cancelReplaceAllowed: true,\r\n    isSpotTradingAllowed: true,\r\n    isMarginTradingAllowed: false,\r\n    filters: [\r\n      {\r\n        filterType: 'PRICE_FILTER',\r\n        minPrice: '0.00001000',\r\n        maxPrice: '1000.00000000',\r\n        tickSize: '0.00001000'\r\n      },\r\n      {\r\n        filterType: 'LOT_SIZE',\r\n        minQty: '0.00100000',\r\n        maxQty: '9000000.00000000',\r\n        stepSize: '0.00100000'\r\n      },\r\n      { filterType: 'ICEBERG_PARTS', limit: '10' },\r\n      {\r\n        filterType: 'MARKET_LOT_SIZE',\r\n        minQty: '0.00000000',\r\n        maxQty: '225.56396694',\r\n        stepSize: '0.00000000'\r\n      },\r\n      {\r\n        filterType: 'TRAILING_DELTA',\r\n        minTrailingAboveDelta: '10',\r\n        maxTrailingAboveDelta: '2000',\r\n        minTrailingBelowDelta: '10',\r\n        maxTrailingBelowDelta: '2000'\r\n      },\r\n      {\r\n        filterType: 'PERCENT_PRICE_BY_SIDE',\r\n        bidMultiplierUp: '5',\r\n        bidMultiplierDown: '0.2',\r\n        askMultiplierUp: '5',\r\n        askMultiplierDown: '0.2',\r\n        avgPriceMins: '5'\r\n      },\r\n      {\r\n        filterType: 'NOTIONAL',\r\n        minNotional: '0.00100000',\r\n        applyMinToMarket: true,\r\n        maxNotional: '9000000.00000000',\r\n        applyMaxToMarket: false,\r\n        avgPriceMins: '5'\r\n      },\r\n      { filterType: 'MAX_NUM_ORDERS', maxNumOrders: '200' },\r\n      { filterType: 'MAX_NUM_ALGO_ORDERS', maxNumAlgoOrders: '5' }\r\n    ],\r\n    permissions: [\r\n      'SPOT',\r\n      'TRD_GRP_015',\r\n      'TRD_GRP_016',\r\n      'TRD_GRP_023',\r\n      'TRD_GRP_024',\r\n      'TRD_GRP_025'\r\n    ],\r\n    defaultSelfTradePreventionMode: 'EXPIRE_MAKER',\r\n    allowedSelfTradePreventionModes: [ 'EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH' ]\r\n  },\r\n  tierBased: false,\r\n  percentage: true,\r\n  feeSide: 'get'\r\n}\r\n2024-02-20T10:32:58.334Z iteration 1 passed in 0 ms\r\n```"
      },
      {
        "user": "VeilleurTrytoFix",
        "created_at": "2024-02-20T10:44:02Z",
        "body": "thanks you very much!"
      }
    ]
  },
  {
    "number": 21193,
    "title": "fetch_closed_orders \"limit\" parameter logic is wrong",
    "created_at": "2024-02-11T07:12:43Z",
    "closed_at": "2024-02-11T16:59:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21193",
    "body": "### Operating System\r\n\r\nWindows\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.2.40\r\n\r\n### Description\r\nBinance exchange.\r\n\r\nIn python the call fetch_closed_orders(symbol, limit) becomes\r\n```\r\norders = self.fetch_orders(symbol, since, limit, params)\r\nreturn self.filter_by(orders, 'status', 'closed')\r\n```\r\nOrders with a limit are downloaded, they are then filtered by status. \r\n\r\nBased on the name of the function, it seems that if you call it with \"limit = 1\", it should return the last closed order, but this will not happen if the last order is open due to the logic above.\r\n\r\nBy increasing the parameter you can get closed orders, but it is not obvious why limit=1 returns nothing, and limit = 25 suddenly returns one closed order (in my case).\r\n\r\nSuggestions: change the description of the function/parameter, or implement the correct logic (which is of course more difficult).\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21193/comments",
    "author": "Jabarda",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-02-11T08:40:06Z",
        "body": "Hello @Jabarda, I agree the problem is that binance does not provide an endpoint to fetch only closed orders, the endpoint used here returns all orders (open, closed, canceled).\r\n\r\nNonetheless, I will try to update our implementation to apply the limit only after fetching the orders."
      }
    ]
  },
  {
    "number": 21125,
    "title": "NotSupported: bybit closePosition() is not supported yet   ",
    "created_at": "2024-02-06T06:30:40Z",
    "closed_at": "2024-02-07T05:55:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21125",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nNotSupported: bybit closePosition() is not supported yet\r\n    at bybit.closePosition (/Users/tom/dev/trabo/trabo-scripts-intern/node_modules/ccxt/dist/cjs/src/base/Exchange.js:4315:15)\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21125/comments",
    "author": "tom-teamcoda",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-02-06T11:08:41Z",
        "body": "Hi @tom-teamcoda,\r\n\r\nIt seems there's no api for closePosition (close positions for market) in bybit. We'll implement this function if exchange add the feature."
      }
    ]
  },
  {
    "number": 20727,
    "title": "Bitrue exchange market order does not return details of completed order",
    "created_at": "2024-01-08T15:45:21Z",
    "closed_at": "2024-01-08T22:41:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20727",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.84\n\n### Description\n\nBitrue Exchange market order successfully places order and fulfils the order but does not return the completed order details.  the return object states the order status=open and amost of the other fields/attributes are null.\n\n### Code\n\n```\r\n  order_buy = exchange.create_market_buy_order('symbol, amount, {\"newClientOrderId\": clientOrderId})\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20727/comments",
    "author": "juber01",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-01-08T16:40:41Z",
        "body": "Hello @juber01, that's a \"normal\" behavior, because it takes a few ms to consolidate the information. \r\nYou can always get all the order-related information by calling `fetch_order(id)` afterwards. "
      },
      {
        "user": "juber01",
        "created_at": "2024-01-08T16:44:48Z",
        "body": "I don't see this issue with Binance with market orders.  What you are suggesting would be putting in an additional check and then supplementing the order details.  I need this as it's captured in a database for further processing"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-01-08T16:48:16Z",
        "body": "@juber01 Each exchange is different and if the information is missing in the exchange's response ccxt has to return those values as undefined/null."
      },
      {
        "user": "juber01",
        "created_at": "2024-01-08T16:49:01Z",
        "body": "OK thanks"
      }
    ]
  },
  {
    "number": 20719,
    "title": "how to check on Phemex the midOrderSize of a specific symbol \"BTC/USDT:USDT\"",
    "created_at": "2024-01-07T22:11:19Z",
    "closed_at": "2024-01-12T09:57:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20719",
    "body": "### Operating System\r\n\r\nWin10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\nccxt-4.2.4\r\n\r\n### Description\r\n\r\nHey,\r\n\r\nI need a way to check the minOrderSize of a specific symbol for example: \"BTC/USDT:USDT\"\r\n\r\nI tryed some variations of this code:\r\n\r\nmarkets = exchange.fetch_markets()\r\nsymbol = 'BTC/USDT:USDT' \r\nfor market in markets:\r\n    if market['symbol'] == symbol:\r\nmin_position_size = market.get('info', {}).get('minQty')\r\n\r\nI tryed the key-words: \"minQty\" and \"minOrderSize\"\r\n\r\nSome one know how to get the minOrderSize?\r\n\r\n### Code\r\n\r\n\r\nexchange = ccxt.phemex({\r\n    \"apiKey\": API_KEY,\r\n    \"secret\": API_SECRET,\r\n    \"enableRateLimit\": True,\r\n    \"permissions\": [\"order\", \"private\"],\r\n})\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20719/comments",
    "author": "halefopw",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-01-08T16:44:18Z",
        "body": "Hello @halefopw,\r\n\r\nActually I don't think that Phemex provides that information on the API, but we will double-check it with them. "
      },
      {
        "user": "halefopw",
        "created_at": "2024-01-08T21:16:16Z",
        "body": "@carlosmiei\r\nThanks a lot for checking this out!\r\n\r\nwith theyer answere this issue can be closed I think.\r\n\r\njust as Idea:\r\nIf I make a order and the size is to low I get the error:\r\nccxt\\base\\exchange.py\", line 3673, in throw_exactly_matched_exception\r\n    raise exact[string](message)\r\nccxt.base.errors.InvalidOrder: phemex {\"code\":11058,\"msg\":\"TE_QTY_TOO_SMALL\",\"data\":null}\r\n\r\nmaybe its possible to check the minOrderSize by a request... \r\n\r\nI will do some test and post it if I founde a solution."
      },
      {
        "user": "halefopw",
        "created_at": "2024-01-12T09:57:23Z",
        "body": "hey @carlosmiei,\r\n\r\nI am afraid that Phemex will say they not provides that information on API.\r\n\r\nIf they say there is a possibility to get this information by API pls reopen this issue and add it.\r\n\r\nBut for the moment and to close this issiue, here is a alternativ (not clean!) possibility to get this information.\r\n\r\nimport time\r\nimport ccxt\r\n\r\nexchange = ccxt.phemex({\r\n    \"apiKey\": API_KEY,\r\n    \"secret\": API_SECRET,\r\n    \"enableRateLimit\": True,\r\n    \"permissions\": [\"order\", \"private\"],\r\n})\r\n\r\ncount_list = []\r\nwhile True:\r\n    print(\"count_list_len:\", len(count_list))\r\n    try:\r\n        if len(count_list) == 0:\r\n            count_mulyplyter = 1\r\n        if len(count_list) == 1:\r\n            count_mulyplyter = 10\r\n        if len(count_list) == 2:\r\n            count_mulyplyter = 100\r\n        if len(count_list) == 3:\r\n            count_mulyplyter = 1000\r\n        if len(count_list) > 3:\r\n            count_mulyplyter = 10000\r\n        amount_ask_base = 0.0001\r\n        amount = amount_ask_base * count_mulyplyter\r\n        symbol = \"BTC/USDT:USDT\"\r\n        ticker = exchange.fetch_ticker(symbol)\r\n        current_price = ticker['last']\r\n        print(f\"price for {symbol}: {current_price}\")\r\n        test_price = (current_price * 0.5)\r\n        params = {'posSide': 'Long'}\r\n        buyOrder = exchange.create_order(\r\n            symbol=symbol,\r\n            side=\"buy\",\r\n            type=\"limit\",\r\n            price=test_price,\r\n            amount=amount,\r\n            params=params,\r\n        )\r\n        time.sleep(2)\r\n        print(\"MinOrderSize:\", (count_mulyplyter * amount_ask_base))\r\n        count_list.clear()\r\n        exchange.cancel_all_orders(symbol=symbol)\r\n        break\r\n    except Exception as e:\r\n        count_list.append(\"1\")\r\n        print(f\"U Error: {str(e)}\")\r\n    time.sleep(1)"
      }
    ]
  },
  {
    "number": 20551,
    "title": "bingx close position problem",
    "created_at": "2023-12-25T10:01:13Z",
    "closed_at": "2023-12-27T06:20:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20551",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.98\n\n### Description\n\nhi guys,\r\nI have two positions on a symbol (E.g. BTC/USDT:USDT)\r\nwhen I want to close one of position (E.g. LONG position)\r\nafter run my code close all my position\r\nplease help me\n\n### Code\n\n\r\n```\r\nbingx = ccxt.bingx({\r\n    'apiKey': config.BINGX_API_KEY,\r\n    'secret': config.BINGX_SECRET_KEY,\r\n})\r\nsymbol = 'BTC/USDT:USDT'\r\n\r\nclose = bingx.close_position(symbol=symbol, side='buy')\r\nprint(close)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20551/comments",
    "author": "tbehzad76",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-12-25T11:12:15Z",
        "body": "Hello @tbehzad76,\r\nIn this case `side` is not used by the exchange and closes every position associated with that market. If you want to close only one side of the position, you can do it by placing an order with the `reduceOnly` flag in `params` "
      }
    ]
  },
  {
    "number": 20527,
    "title": "Bybit ccxt.pro watch_positions does not work properly, returns error",
    "created_at": "2023-12-23T16:19:49Z",
    "closed_at": "2023-12-23T23:38:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20527",
    "body": "### Operating System\r\n\r\nWndows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.1.97\r\n\r\n### Description\r\n\r\nThis example returns error:\r\n\"<class 'ccxt.base.errors.BadSymbol'> bybit does not have market symbol I\"\r\n\r\nAll other  WS watch_ function work well with this symbol 'ICP/USDT:USDT'.\r\nIn the error message the symbol is truncated to 1 character.\r\n\r\n\r\n### Code\r\n\r\n```\r\nimport ccxt.pro\r\nimport asyncio\r\nfrom pprint import pprint\r\n\r\nasync def observe_positions(exchange, symbol):\r\n    try:\r\n        positions = await exchange.watch_positions(symbol)\r\n        pprint(positions)\r\n    except ccxt.BaseError as e:\r\n        print(type(e), e)\r\n    except Exception as e:\r\n        print(type(e), e)\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.bybit({\r\n        \"apiKey\": \"p---------\",\r\n        \"secret\": \"WS--------\",\r\n    })\r\n    \r\n    await observe_positions(exchange, 'ICP/USDT:USDT')\r\n\r\nasyncio.run(main())\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20527/comments",
    "author": "IskanderMufteev",
    "comments": [
      {
        "user": "Lilneo786",
        "created_at": "2023-12-23T16:27:17Z",
        "body": "The error message you're facing, <class 'ccxt.base.errors.BadSymbol'> bybit does not have market symbol I, implies that the symbol 'ICP/USDT:USDT' is not acknowledged by the Bybit exchange. The error message also suggests that the symbol is being shortened to 'I'.\r\n\r\nverify the accurate trading symbol format for Bybit. Each exchange may have distinct symbol formats.\r\n\r\nOnce you have the correct format, modify the observe_positions function call accordingly."
      },
      {
        "user": "IskanderMufteev",
        "created_at": "2023-12-23T16:36:11Z",
        "body": "> The error message you're facing, <class 'ccxt.base.errors.BadSymbol'> bybit does not have market symbol I, implies that the symbol 'ICP/USDT:USDT' is not acknowledged by the Bybit exchange. The error message also suggests that the symbol is being shortened to 'I'.\r\n> \r\n> verify the accurate trading symbol format for Bybit. Each exchange may have distinct symbol formats.\r\n> \r\n> Once you have the correct format, modify the observe_positions function call accordingly.\r\n\r\nIn this case, I am sure that the character format is correct for bybit. I've tried others too."
      },
      {
        "user": "Lilneo786",
        "created_at": "2023-12-23T16:40:29Z",
        "body": "```\r\nimport ccxt.pro\r\nimport asyncio\r\nfrom pprint import pprint\r\n\r\nasync def observe_positions(exchange, symbol):\r\n    try:\r\n        positions = await exchange.watch_positions(symbol)\r\n        pprint(positions)\r\n    except ccxt.BaseError as e:\r\n        print(type(e), e)\r\n    except Exception as e:\r\n        print(type(e), e)\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.bybit({\r\n        \"apiKey\": \"p---------\",\r\n        \"secret\": \"WS--------\",\r\n    })\r\n    \r\n    await observe_positions(exchange, 'ICPUSDT')  # Use 'ICPUSDT' as the symbol\r\n\r\nasyncio.run(main())\r\n```\r\n\r\n\r\nVerify the exact symbol format for position updates in the Bybit "
      },
      {
        "user": "IskanderMufteev",
        "created_at": "2023-12-23T17:41:01Z",
        "body": "> Verify the exact symbol format for position updates in the Bybit\r\n\r\nFirstly, this contradicts the standards for representing symbols in the CCXT library.\r\nAnd even if you specify it in this format it does not work.\r\n"
      },
      {
        "user": "Lilneo786",
        "created_at": "2023-12-23T18:56:55Z",
        "body": "Youre right my fault\r\n\r\n```\r\nasync def main():\r\n    exchange = ccxt.pro.bybit({\r\n        \"apiKey\": \"p---------\",\r\n        \"secret\": \"WS--------\",\r\n    })\r\n\r\n    # Load the markets and print their symbols\r\n    await exchange.load_markets()\r\n    print(\"Available symbols on Bybit:\")\r\n    pprint(exchange.symbols)\r\n\r\n    # Use the standard symbol format for the desired trading pair\r\n    symbol = 'ICP/USDT'\r\n    await observe_positions(exchange, symbol)\r\n\r\nasyncio.run(main())\r\n\r\n```"
      },
      {
        "user": "IskanderMufteev",
        "created_at": "2023-12-23T20:28:28Z",
        "body": "> Youre right my fault\r\n> \r\nYou'd better explore the symbol format in the CCXT. Simple brout force of symbols will not work here :)\r\n"
      },
      {
        "user": "pcriadoperez",
        "created_at": "2023-12-23T23:38:05Z",
        "body": "Hi @IskanderMufteev , the issue is `watch_positions` takes in an array of symbols, that is why it's giving a Bad Symbol error for I. Please try changing your code to `positions = await exchange.watch_positions([ symbol ])`\r\n\r\nI'll close this issue for now but feel free to reopen or reach out with any other questions."
      }
    ]
  },
  {
    "number": 20372,
    "title": "fetch_bids_asks not working for Bitrue exchange",
    "created_at": "2023-12-14T10:20:29Z",
    "closed_at": "2023-12-14T11:02:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20372",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.83\n\n### Description\n\nThe executing the function call fetch_bids_asks it is throwing an exception error.\r\n\r\nException has occurred: BadSymbol       (note: full exception trace is shown but execution is paused at: _run_module_as_main)\r\nbitrue does not have market symbol W\r\n  File \"/python3.11/site-packages/ccxt/base/exchange.py\", line 3905, in market\r\n    raise BadSymbol(self.id + ' does not have market symbol ' + symbol)\r\n  File \"/python3.11/site-packages/ccxt/base/exchange.py\", line 2979, in market_symbols\r\n    market = self.market(symbols[i])\r\n             ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/3.11.7/lib/python3.11/site-packages/ccxt/bitrue.py\", line 1419, in fetch_bids_asks\r\n    symbols = self.market_symbols(symbols, None, False)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/trader_bot/trader_bot.py\", line 53, in main\r\n    bids_asks = exchange.fetch_bids_asks(\"WTK/USDT\")\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n### Code\n\n# Initialise the ccxt exchange for bitrue\r\n  exchange = ccxt.bitrue({\r\n    \"apiKey\": bitrue_key,\r\n    \"secret\": bitrue_secret\r\n  })\r\n\r\n#Get bids and asks\r\n    bids_asks = exchange.fetch_bids_asks(\"WTK/USDT\")\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20372/comments",
    "author": "juber01",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-12-14T10:43:49Z",
        "body": "Hi @juber01 \r\n\r\nThe symbols is list for fetch_bids_asks, try this: `exchange.fetch_bids_asks(['WTK/USDT'])`"
      },
      {
        "user": "juber01",
        "created_at": "2023-12-14T10:54:56Z",
        "body": "Thank you that works.  Can this take this param {\"limit\":5} to return bids and asks instead of just the latest?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-12-14T11:01:08Z",
        "body": "@juber01, that is not possible, if you want to get multiple bids/asks you should use fetchOrderBook Instead"
      },
      {
        "user": "juber01",
        "created_at": "2023-12-14T11:02:21Z",
        "body": "Thank you for your help.  This is now resolved."
      }
    ]
  },
  {
    "number": 20323,
    "title": "KeyError: 'XBTUSD'",
    "created_at": "2023-12-11T20:49:30Z",
    "closed_at": "2023-12-21T02:14:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20323",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nHello, I have an error when trying to connect to Bitmex with Python. I have made several attempts using different symbols, such as 'btxusd' and 'btcusd', as well as others I have found in the process. Despite my efforts, I always encounter the same error. I have developed specific code for testing and identifying the source of the problem, but so far, I have not been able to resolve it.\r\n\r\nAttached to this message, you will find the code I have created for testing. I appreciate in advance any guidance or assistance you can provide to help me overcome this obstacle.\r\n\r\nThis error: File \"/app/bingx_integration/Api/api.py\", line 121, in test_buy\r\n    min_amount = exchange.markets[symbol]['limits']['amount']['min']\r\n                 ~~~~~~~~~~~~~~~~^^^^^^^^\r\nKeyError: 'BTC/USD'\n\n### Code\n\n```\r\n  api_key = '*******************'\r\napi_secret = '**************************************'\r\nsymbol = 'XBTUSD'\r\nleverage = 10 \r\n\r\nexchange = ccxt.bitmex({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': True,\r\n})\r\n\r\ndef test_buy():\r\n    exchange.load_markets()\r\n\r\n    if symbol not in exchange.markets:\r\n        print(exchange.markets)\r\n        return exchange.markets\r\n\r\n    min_amount = exchange.markets[symbol]['limits']['amount']['min']\r\n\r\n    amount = exchange.amount_to_precision(symbol, min_amount)\r\n\r\n    leveraged_amount = amount * leverage\r\n\r\n    leveraged_amount_decimal = exchange.decimal_to_precision(leveraged_amount, ccxt.ROUND, ccxt.TRUNCATE, exchange.markets[symbol]['precision']['amount'], False)\r\n\r\n    order = exchange.create_market_buy_order(symbol, leveraged_amount_decimal, {'leverage': leverage})\r\n\r\n    time.sleep(5)\r\n\r\n    closed_order = exchange.create_market_sell_order(symbol, leveraged_amount_decimal, {'leverage': leverage})\r\n\r\n    return \"OK\"\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20323/comments",
    "author": "jorge0102",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-12-12T01:44:11Z",
        "body": "Hi @jorge0102,\r\n\r\nThe key for markets is ccxt unified symbol, eg, BTC/USDT.\r\n\r\nYou can use `market(symbol)` to find market with exchange specified id."
      }
    ]
  },
  {
    "number": 20243,
    "title": "Phemex hedge mode wont let me place a market order",
    "created_at": "2023-12-05T13:16:42Z",
    "closed_at": "2023-12-05T15:50:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20243",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.75\n\n### Description\n\nEverytime i run the the code i get this error \r\n\r\n**Error placing order: phemex {\"code\":20004,\"msg\":\"TE_ERR_INCONSISTENT_POS_MODE\",\"data\":null}**\n\n### Code\n\n```\r\nexchange = ccxt.phemex({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': True,\r\n})\r\n\r\nsymbol1 = 'BTCUSDT'\r\nexchange.set_position_mode(True, symbol1) # set pos mode to hedge\r\norder = exchange.create_order(symbol1,'market','sell',0.001)\r\n\r\n\r\n\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20243/comments",
    "author": "ClamaBsc",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-12-05T15:11:13Z",
        "body": "Hello @ClamaBsc, Phemex requires an explicit `posSIde` parameter to be provided when in hedged mode, so you should do something like this:\r\n\r\n```Python\r\norder = exchange.create_order(symbol1,'market','sell',0.001, params = {'posSide': 'Short'}) # or Long\r\n```\r\n"
      },
      {
        "user": "ClamaBsc",
        "created_at": "2023-12-05T15:41:39Z",
        "body": "@carlosmiei Thank you so much, It works now\r\n\r\nI have one more question.\r\n\r\nhow to set margin mode to cross i think its different in phemex than other, \r\n\r\nthanks ,\r\n\r\n"
      },
      {
        "user": "ClamaBsc",
        "created_at": "2023-12-05T15:50:14Z",
        "body": "thanks carlosmiei, you the man  "
      }
    ]
  },
  {
    "number": 20204,
    "title": "conflicting name gate and gateio",
    "created_at": "2023-12-02T19:58:45Z",
    "closed_at": "2023-12-02T21:41:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20204",
    "body": "### Operating System\r\n\r\n-\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n1.68.3\r\n\r\n### Description\r\n\r\nWhat is the difference between getattr(cctx, 'gate') and getattr(cctx, 'gateio') ?\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20204/comments",
    "author": "SnoozeFreddo",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-12-02T21:41:33Z",
        "body": "There is no difference, gateio is an alias for gate, so you can use them interchangably.\r\n\r\nI'll close this issue for now but feel free to reach out with any questions"
      }
    ]
  },
  {
    "number": 20128,
    "title": "GateIO Swap Funding Rate",
    "created_at": "2023-11-25T16:12:51Z",
    "closed_at": "2023-11-25T18:46:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20128",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.64\n\n### Description\n\nWhen trying to get funding rate for GateIO perpetual swaps it loads the spot markets as well which means we can't use the GateIO symbol to retrieve funding rate.\r\n\r\nI found that the `load_markets` method also loads spot markets if `sandboxMode` is set to False.\r\n\r\nTo fix the swap funding rate issue I had to set `sandboxMode` to True to skip the spot market loading.\n\n### Code\n\n```\r\ngate = ccxt.gateio(\r\n          {\r\n              \"options\": {\r\n                  \"defaultType\": \"swap\",\r\n                  \"sandboxMode\": True\r\n              }\r\n          }\r\n      )\r\ndata = gate.fetch_funding_rate('BTC_USDT')\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20128/comments",
    "author": "acodemics",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-11-25T16:28:27Z",
        "body": "Hello @acodemics,\r\n\r\nYes it is tricky because gate has conflicting ids between spot and swap markets, but CCXT usually always loads up every market type available (spot, swap, future, etc) to have the exchange ready to perform any operation over any market. \r\n\r\nWe also advise the use of the unified symbol because those are not ambiguous but  I will apply a fix to take into consideration the default type you select to resolve the conflict and your code should work after the patch.\r\n\r\n\r\n\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 20051,
    "title": "retry createOrder if failes",
    "created_at": "2023-11-19T16:20:21Z",
    "closed_at": "2023-11-19T18:33:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20051",
    "body": "### Operating System\n\nLinux Ubuntu 22LTS\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.1.56\n\n### Description\n\nHi, for some reason, when I execute a `createOrder`, with what to me appears to be a random factor, I receive the following Error from the Exchange:\r\n\r\nInvalidOrder: binance {\"code\":-1013,\"msg\":\"Filter failure: NOTIONAL\"}\r\n\r\nIt's weird as I'm sure I'm loading the markets correctly, and respecting the NOTIONAL filters for the exchange as follows:\r\n```\r\n        // 1. making sure we have the amount desired\r\n        const amountToUse = await this.adjustAmount(side, amount, symbol, exchange);\r\n        \r\n        // 2. Adjusting the precision for amount and price\r\n        const desiredAmount = exchange.amountToPrecision(symbol, amountToUse);\r\n        const desiredPrice = exchange.priceToPrecision(symbol, price);\r\n```\r\n\r\nAnd then I proceeded to place a limit order using the `createOrder` method.\r\n\r\nWhat surprises me, is that when the same exact order is attempted to be placed after a few seconds (if not minutes) it works correctly.\r\n\r\nThis is why, I was considering to implement an \"retry createOrder\" method in order to replace the same order if something goes wrong:\r\n\r\n```\r\n        const {result,attempts} = await my_retry(placeTradeCmd, {\r\n            maxAttempts: 12,\r\n            minTimeout: 3000,\r\n            maxTimeout: 1000 * 60,\r\n            factor: 1.5,\r\n        });\r\n```\r\n\r\nNow: what I want to ensure, is that I need to avoid at any cost, placing 12 consecutive createOrder by mistake.\r\n\r\nIn other words, I'd like to know if: \r\nIs it possible that 'createOrder' throws an Error, even if the exchange successfully placed the order?\r\n\r\nI guess that, if an Error is thrown, something went wrong, so, the order has not been placed.\r\n\r\nI'll paste the my_retry logic function if anyone else needs it.\r\nimplementing\n\n### Code\n\n```\r\n  export async function my_retry(promisifiedFunction, {\r\n    maxAttempts = 3,\r\n    minTimeout = 1000,\r\n    maxTimeout = Infinity,\r\n    factor = 1,\r\n}) {\r\n    let attempts = 0;\r\n\r\n    while (attempts < maxAttempts) {\r\n        try {\r\n            const res = await promisifiedFunction(); // If successful, return the result\r\n            return {\r\n                result: res,\r\n                attempts: attempts\r\n            }\r\n        } catch (error) {\r\n            console.error(`Attempt ${attempts + 1} failed: ${error.message}`);\r\n            attempts++;\r\n\r\n            const delay = Math.min(minTimeout * Math.pow(factor, attempts), maxTimeout);\r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n    }\r\n\r\n    throw new Error(`Exceeded maximum attempts (${maxAttempts})`);\r\n}\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20051/comments",
    "author": "fl0wo",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-11-19T18:33:06Z",
        "body": "Hi @fl0wo , thanks for posting your code for others might be able to use it.\r\n\r\n> Is it possible that 'createOrder' throws an Error, even if the exchange successfully placed the order?\r\n\r\nIt shouldn't if it does please report it is either an error on the exchange side, or ccxt side. But if there is an error no order should be fully created.\r\n\r\nI'll close this issue for now but feel free to post any other questions.\r\n\r\nAlso here is the response from AI if it's helpful:\r\nThe error you're encountering, `InvalidOrder: binance {\"code\":-1013,\"msg\":\"Filter failure: NOTIONAL\"}`, typically indicates that the order does not meet Binance's minimum notional value requirement. The notional value of an order is calculated as the product of the amount (quantity) and the price. Binance, like many other exchanges, has minimum thresholds for the notional value to prevent spam orders and ensure market liquidity.\r\n\r\nTo address your specific concerns:\r\n\r\n1. **Retry Mechanism**: Implementing a retry mechanism for `createOrder` can be a practical solution, but it comes with the risk of unintended order placements if not carefully managed. Your `my_retry` function appears well-structured to handle retries with exponential backoff. However, it's crucial to ensure that a failed order was not actually placed before retrying.\r\n\r\n2. **Is it possible for `createOrder` to throw an error even if the order is successfully placed?**: Yes, this can happen in certain scenarios, especially in cases of network issues or exchange API inconsistencies. For example, the request to create an order might have reached the exchange and the order might have been placed successfully, but due to a network timeout or other communication issue, the confirmation response from the exchange might not reach your application, leading to an error being thrown.\r\n\r\n3. **Avoiding Multiple Order Placements**: To prevent placing the same order multiple times, you should implement additional checks:\r\n    - **Check Order Status**: Before retrying, check the order status using the order ID if it's available from the failed request. If the order ID isn't available, you can check your recent orders to see if an order with the same parameters has been placed.\r\n    - **Error Handling**: Differentiate between errors that warrant a retry (like network issues) and those that don't (like an invalid order error). In your case, the `NOTIONAL` error indicates an issue with the order parameters, so retrying without modifying these parameters will likely result in repeated failures.\r\n\r\n4. **Handling `NOTIONAL` Error**: To address the `NOTIONAL` error specifically, you should:\r\n    - **Check Minimum Notional Values**: Ensure that your orders meet the minimum notional values required by the exchange. These values can change, so it's good practice to fetch and use the latest market data from the exchange.\r\n    - **Adjust Order Size**: If the error is due to the order not meeting the minimum notional size, you may need to adjust the order size (either the amount or the price, or both) to meet the exchange's requirements.\r\n\r\nYour approach to adjusting the amount and price precision is correct, but it's also important to consider the minimum notional value, which might be the root cause of the issue you're experiencing.\r\n"
      }
    ]
  },
  {
    "number": 20028,
    "title": "Transfer from subacc to main on okex",
    "created_at": "2023-11-17T21:00:39Z",
    "closed_at": "2023-11-18T07:56:32Z",
    "labels": [
      "question",
      "python"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20028",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.56\n\n### Description\n\nhi can u help with transfer from subacc to main on okex pls, i try use 2 methods, and got the same error\n\n### Code\n\n#1 \r\n```\r\nexchange.private_post_asset_transfer({\"ccy\": symbolWithdraw, \"amt\": str(sub_balance), \"from\": '6', \"to\": '6', \"type\": \"2\", \"subAcct\": name_sub})\r\n```\r\n#2 \r\n```\r\nexchange.transfer(code=symbolWithdraw, amount=sub_balance, fromAccount=name_sub, toAccount='main', params={\"type\": \"2\", \"from\": '6', \"to\": '6'})  \r\n```\r\n#ERROR\r\n```\r\nccxt.base.errors.ExchangeError: okx {\"msg\":\"This API key doesn't have permission to use this function\",\"code\":\"50120\"}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20028/comments",
    "author": "WhereIsMyMindDL",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-11-17T21:56:15Z",
        "body": "Have you have enabled the transfer permission on your API key in the okx website settings?"
      },
      {
        "user": "WhereIsMyMindDL",
        "created_at": "2023-11-18T07:56:32Z",
        "body": "oh shit, sry, its work"
      }
    ]
  },
  {
    "number": 20026,
    "title": "Coinbase: exchange error: coinbase price of SHIB/USD must be greater than minimum price precision of 0.01 ",
    "created_at": "2023-11-17T12:49:16Z",
    "closed_at": "2023-11-18T00:47:17Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20026",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.33\r\n\r\n### Description\r\n\r\nI've been using ccxt for a while now and have successfully placed limit sell orders for SHIB/USD as recent as yesterday (Nov 11) but all of a sudden I started to get the below error today.  I'm not sure if this is something caused by coinbase's side or not.\r\n\r\n`exchange error: coinbase price of SHIB/USD must be greater than minimum price precision of 0.01`   \r\n\r\nI tried to step through the `exchange_client.create_order` call and noticed the market for SHIB returned the following and the precision was set to .01.  I'm not sure if it's expected but seems weird given the price is has way more precision than .01:\r\n\r\n```\r\n{\r\n  \"id\": \"SHIB-USD\",\r\n  \"symbol\": \"SHIB/USD\",\r\n  \"base\": \"SHIB\",\r\n  \"quote\": \"USD\",\r\n  \"baseId\": \"SHIB\",\r\n  \"quoteId\": \"USD\",\r\n  \"active\": true,\r\n  \"type\": \"spot\",\r\n  \"linear\": null,\r\n  \"inverse\": null,\r\n  \"spot\": true,\r\n  \"swap\": false,\r\n  \"future\": false,\r\n  \"option\": false,\r\n  \"margin\": null,\r\n  \"contract\": false,\r\n  \"contractSize\": null,\r\n  \"expiry\": null,\r\n  \"expiryDatetime\": null,\r\n  \"optionType\": null,\r\n  \"strike\": null,\r\n  \"settle\": null,\r\n  \"settleId\": null,\r\n  \"precision\": {\r\n    \"amount\": 1.0,\r\n    \"price\": 0.01\r\n  },\r\n  \"limits\": {\r\n    \"amount\": {\r\n      \"min\": 115000.0,\r\n      \"max\": 210000000000.0\r\n    },\r\n    \"price\": {\r\n      \"min\": null,\r\n      \"max\": null\r\n    },\r\n    \"cost\": {\r\n      \"min\": 1.0,\r\n      \"max\": 10000000.0\r\n    },\r\n    \"leverage\": {\r\n      \"min\": null,\r\n      \"max\": null\r\n    }\r\n  },\r\n  \"info\": {\r\n    \"product_id\": \"SHIB-USD\",\r\n    \"price\": \"0.00000872\",\r\n    \"price_percentage_change_24h\": \"-2.24215246636771\",\r\n    \"volume_24h\": \"3393871173827\",\r\n    \"volume_percentage_change_24h\": \"42.99826674977619\",\r\n    \"base_increment\": \"1\",\r\n    \"quote_increment\": \"0.01\",\r\n    \"quote_min_size\": \"1\",\r\n    \"quote_max_size\": \"10000000\",\r\n    \"base_min_size\": \"115000\",\r\n    \"base_max_size\": \"210000000000\",\r\n    \"base_name\": \"SHIBA INU\",\r\n    \"quote_name\": \"US Dollar\",\r\n    \"watched\": true,\r\n    \"is_disabled\": false,\r\n    \"new\": false,\r\n    \"status\": \"online\",\r\n    \"cancel_only\": false,\r\n    \"limit_only\": false,\r\n    \"post_only\": false,\r\n    \"trading_disabled\": false,\r\n    \"auction_mode\": false,\r\n    \"product_type\": \"SPOT\",\r\n    \"quote_currency_id\": \"USD\",\r\n    \"base_currency_id\": \"SHIB\",\r\n    \"fcm_trading_session_details\": null,\r\n    \"mid_market_price\": \"\",\r\n    \"alias\": \"\",\r\n    \"alias_to\": [\r\n      \"SHIB-USDC\"\r\n    ],\r\n    \"base_display_symbol\": \"SHIB\",\r\n    \"quote_display_symbol\": \"USD\",\r\n    \"view_only\": false,\r\n    \"price_increment\": \"0.00000001\"\r\n  },\r\n  \"percentage\": true,\r\n  \"taker\": 0.004,\r\n  \"maker\": 0.0025,\r\n  \"tierBased\": true,\r\n  \"tiers\": {\r\n    \"taker\": [\r\n      [\r\n        0.0,\r\n        0.006\r\n      ],\r\n      [\r\n        10000.0,\r\n        0.004\r\n      ],\r\n      [\r\n        50000.0,\r\n        0.0025\r\n      ],\r\n      [\r\n        100000.0,\r\n        0.002\r\n      ],\r\n      [\r\n        1000000.0,\r\n        0.0018\r\n      ],\r\n      [\r\n        15000000.0,\r\n        0.0016\r\n      ],\r\n      [\r\n        75000000.0,\r\n        0.0012\r\n      ],\r\n      [\r\n        250000000.0,\r\n        0.0008\r\n      ],\r\n      [\r\n        400000000.0,\r\n        0.0005\r\n      ]\r\n    ],\r\n    \"maker\": [\r\n      [\r\n        0.0,\r\n        0.004\r\n      ],\r\n      [\r\n        10000.0,\r\n        0.0025\r\n      ],\r\n      [\r\n        50000.0,\r\n        0.0015\r\n      ],\r\n      [\r\n        100000.0,\r\n        0.001\r\n      ],\r\n      [\r\n        1000000.0,\r\n        0.0008\r\n      ],\r\n      [\r\n        15000000.0,\r\n        0.0006\r\n      ],\r\n      [\r\n        75000000.0,\r\n        0.0003\r\n      ],\r\n      [\r\n        250000000.0,\r\n        0.0\r\n      ],\r\n      [\r\n        400000000.0,\r\n        0.0\r\n      ]\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n### Code\r\n\r\n```\r\nexchange_id = \"coinbase\"\r\nexchange_class = getattr(ccxt, exchange_id)\r\ncls._exchange = exchange_class({\r\n    'apiKey': API_KEY,\r\n    'secret': API_SECRET\r\n})\r\n\r\ncls._exchange.options[\"createMarketBuyOrderRequiresPrice\"] = False            \r\norder_results = self.exchange_client.create_order(\"SHIB/USD\", \"limit\", \"sell\", 10342392.960199593, 8.72e-06)\r\n\r\n```\r\n\r\n\r\n```\r\n#I'm actually getting the price used in the self.exchange_client.create_order call directly from the `bid` attribute of the fetch_ticker call like so:\r\n\r\ninfo = self.exchange_client.fetch_ticker(\"SHIB/USD\")\r\nbid = info[\"bid\"]\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20026/comments",
    "author": "akabeera",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-11-18T00:05:47Z",
        "body": "Hi @akabeera , thanks for reporting. I believe the issue  is we were using the quote_increment returned by coinbase instead of the price_increment returned for the price precision. I've opened a PR to solve this."
      },
      {
        "user": "respectabiggle",
        "created_at": "2023-11-24T13:22:52Z",
        "body": "Working, thanks for the update."
      }
    ]
  },
  {
    "number": 19773,
    "title": "BingX swap creat_order and setting tp sl at the same time",
    "created_at": "2023-11-01T15:09:37Z",
    "closed_at": "2023-11-02T00:22:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19773",
    "body": "### Operating System\n\nwindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.16\n\n### Description\n\nHi, I'm trying to set take profit and  stop loss while create BingX swap order with this code below, but it just creates order without tp and sl! If I made any mistake anywhere can you please correct my code?\r\n\n\n### Code\n\n```\r\nposition = exchange.create_order(symbol=item, type=\"market\", side=\"buy\", amount=vol,\r\n                                 params={\r\n                                         \"TAKE_PROFIT_MARKET\": {\"takeProfitPrice\": tp, \"price\": tp, \"workingType\": \"MARK_PRICE\"},\r\n                                         \"STOP_MARKET\": {\"stopLossPrice\": sl, \"price\": sl, \"workingType\": \"MARK_PRICE\"}\r\n                                         }\r\n                                 ) \r\npprint(position)\r\n\r\n```\r\n{'amount': None,\r\n 'average': None,\r\n 'clientOrderId': None,\r\n 'cost': None,\r\n 'datetime': None,\r\n 'fee': {'cost': None, 'currency': None, 'rate': None},\r\n 'fees': [{'cost': None, 'currency': None, 'rate': None}],\r\n 'filled': None,\r\n 'id': '1719727329359429732',\r\n 'info': {'clientOrderID': '',\r\n          'orderId': '1719727329359429732',\r\n          'positionSide': 'LONG',\r\n          'side': 'BUY',\r\n          'symbol': 'SHIB-USDT',\r\n          'type': 'MARKET',\r\n          'workingType': 'MARK_PRICE'},\r\n 'lastTradeTimestamp': None,\r\n 'lastUpdateTimestamp': None,\r\n 'postOnly': None,\r\n 'price': None,\r\n 'reduceOnly': None,\r\n 'remaining': None,\r\n 'side': 'buy',\r\n 'status': None,\r\n 'stopLossPrice': None,\r\n 'stopPrice': None,\r\n 'symbol': 'SHIB/USDT:USDT',\r\n 'takeProfitPrice': None,\r\n 'timeInForce': 'IOC',\r\n 'timestamp': None,\r\n 'trades': [],\r\n 'triggerPrice': None,\r\n 'type': 'market'}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19773/comments",
    "author": "pybymo",
    "comments": [
      {
        "user": "Dan-krm",
        "created_at": "2023-11-02T00:22:04Z",
        "body": "Hi @pybymo the BingX API docs can be a bit misleading, it looks like BingX doesn't currently support creating a single order with an attached stop loss or take profit. But you can individually add a stop loss or take profit to an existing position using the unified `stopLossPrice` or `takeProfitPrice` parameters.\r\n\r\nSomething like this should work for you:\r\n```\r\nposition = exchange.create_order(symbol=item, type=\"market\", side=\"buy\", amount=vol, params={\"stopLossPrice\":30000.50}) \r\npprint(position)\r\n```"
      },
      {
        "user": "mahdimsr",
        "created_at": "2024-10-25T04:49:24Z",
        "body": "what api version you are trying?"
      }
    ]
  },
  {
    "number": 19740,
    "title": "Clarification on gate and gateio identifiers for Gate.io exchange",
    "created_at": "2023-10-30T13:49:16Z",
    "closed_at": "2023-10-30T14:48:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19740",
    "body": "### Operating System\r\n\r\nUbuntu\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n^4.1.13\r\n\r\n### Description\r\n\r\nHello CCXT team and community,\r\n\r\nI have been working with the CCXT library and noticed that there are two identifiers, `gate` and `gateio`, that both seem to refer to the Gate.io exchange. I am able to interact with the exchange using either identifier, and was wondering if there is a preferred or more accurate identifier to use when interacting with Gate.io through CCXT.\r\n\r\nCould you please clarify the difference between `gate` and `gateio`, if any, and advise on which identifier is recommended for use? Are there any particular considerations or functionalities that are exclusive to one identifier over the other?\r\n\r\nThank you in advance for your assistance and clarification on this matter.\r\n\r\nBest regards\r\n\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19740/comments",
    "author": "kvlknctk",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-30T14:48:46Z",
        "body": "Hello @kvlknctk,\r\nThey are the exact same thing, one is just an alias for the other, so you can use the name you prefer most. 🙂 "
      },
      {
        "user": "kvlknctk",
        "created_at": "2023-10-30T14:50:22Z",
        "body": "Thank you @carlosmiei "
      }
    ]
  },
  {
    "number": 19739,
    "title": "BingX perpetual version has changed!",
    "created_at": "2023-10-30T13:39:04Z",
    "closed_at": "2023-10-30T14:50:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19739",
    "body": "### Operating System\n\nwindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.16\n\n### Description\n\nHi, BingX perpetual v1 is deprecated, please upgrade the code!\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19739/comments",
    "author": "pybymo",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-30T14:50:14Z",
        "body": "Hello @pybymo, Thanks for letting us know. We're aware of this update, and CCXT never used the v1 version of swaps (BingX is a recent addition) so everything should be working as expected."
      },
      {
        "user": "pybymo",
        "created_at": "2023-10-31T14:16:01Z",
        "body": "So what is this?\r\n\r\nccxt_client = bingx({\r\n    'apiKey': config.bingx_key,\r\n    'secret': config.bingx_secret\r\n})\r\n\r\nprint(ccxt_client.version)\r\n\r\n--------------------------\r\n'v1'"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-31T16:06:42Z",
        "body": "@pybymo For instance spot markets still use v1, so you can disregard that number"
      }
    ]
  },
  {
    "number": 19707,
    "title": "New Phemex websocket URL",
    "created_at": "2023-10-27T10:53:22Z",
    "closed_at": "2023-10-27T11:05:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19707",
    "body": "Hello,\r\n\r\nThe websocket URL for Phemex has changed to `wss://ws.phemex.com` from `wss://phemex.com/ws`. The old URL generates an HTTP `410` error with `Invalid response status`.\r\n\r\nRegards,\r\nKinzowa",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19707/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-10-27T11:05:46Z",
        "body": "Hi @Kinzowa \r\n\r\nThanks, we've already updated (330ef741db8e43f026db38a8a4c20ccadb3b76b9)."
      }
    ]
  },
  {
    "number": 19706,
    "title": "How to get token smart contract on exchanges except mexc",
    "created_at": "2023-10-27T10:31:35Z",
    "closed_at": "2023-11-09T00:26:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19706",
    "body": "### Operating System\n\nWindows 10 \n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nlast\n\n### Description\n\nOn mexc we just can use mexc.currencies[coin]['info']['networkList'] and inside he got 'contract' with the exact token smart contract. I can’t find an analogue of this action on other exchanges (I’m interested in bybit, gate, binance, kucoin). Maybe you could help me. \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19706/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-10-27T11:02:38Z",
        "body": "Hi @AlwxDavydov \r\n\r\nIt depends on exchanges, should check their documentation. eg. binance and kucoin use `contractAddress`."
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-10-27T11:48:34Z",
        "body": "@sc0Vu Thank you, I thought that it called same everywhere. Found what I was looking for everywhere except the exchange Gate, there are such a method, it called - GET /wallet/currency_chains. But I can t find function that use it in ccxt. Maybe you would be so kind as to tell me."
      },
      {
        "user": "sc0Vu",
        "created_at": "2023-10-27T14:07:31Z",
        "body": "@AlwxDavydov I think ccxt don't use smart contract address for now. "
      },
      {
        "user": "rglKali",
        "created_at": "2023-11-11T22:20:43Z",
        "body": "> @AlwxDavydov I think ccxt don't use smart contract address for now.\r\n\r\nCan we expect this option to be added in the future? Unified network structure is now a part of ccxt's certification, can we expect something like 'address' field there?"
      },
      {
        "user": "remort",
        "created_at": "2024-01-30T12:25:42Z",
        "body": "need that functionality also"
      }
    ]
  },
  {
    "number": 19703,
    "title": "Bitfinex fetchTransactions hmac encoding problem",
    "created_at": "2023-10-27T08:21:13Z",
    "closed_at": "2023-10-27T11:27:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19703",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nWhen I try to fetch transactions for bitfinex it gets an error with hmac encoding\n\n### Code\n\n```\r\nTraceback (most recent call last):\r\n  File \"./exchanges.py\", line 779, in __fetch_by_transactions\r\n    txs = conn.fetchTransactions(code=ccy, since=since)\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/bitfinex.py\", line 1334, in fetch_transactions\r\n    response = self.privatePostHistoryMovements(self.extend(query, params))\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/types.py\", line 26, in unbound_method\r\n    return _self.request(self.path, self.api, self.method, params, config=self.config)\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/exchange.py\", line 2990, in request\r\n    return self.fetch2(path, api, method, params, headers, body, config)\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/exchange.py\", line 2986, in fetch2\r\n    request = self.sign(path, api, method, params, headers, body)\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/bitfinex.py\", line 1537, in sign\r\n    signature = self.hmac(payload, secret, hashlib.sha384)\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/exchange.py\", line 1228, in hmac\r\n    h = hmac.new(secret, request, algorithm)\r\n  File \"/usr/local/lib/python3.7/hmac.py\", line 153, in new\r\n    return HMAC(key, msg, digestmod)\r\n  File \"/usr/local/lib/python3.7/hmac.py\", line 93, in __init__\r\n    self.update(msg)\r\n  File \"/usr/local/lib/python3.7/hmac.py\", line 102, in update\r\n    self.inner.update(msg)\r\nTypeError: Unicode-objects must be encoded before hashing  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19703/comments",
    "author": "d-makhlin",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-10-27T10:18:21Z",
        "body": "Hi @d-makhlin \r\n\r\nIt works for me (ccxt 4.1.9), but didn't work in 4.0.3. Please upgrade ccxt."
      }
    ]
  },
  {
    "number": 19697,
    "title": "It seems that the API of lbank exchange cannot be used normally.",
    "created_at": "2023-10-27T03:25:20Z",
    "closed_at": "2023-10-27T05:09:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19697",
    "body": "### Operating System\n\nUbuntu 18.04 \n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nVersion: 4.1.4  \n\n### Description\n\nHas anyone ever used limit orders to trade on lbank exchange? The same code can place orders normally on other exchanges, but cannot place orders on lbank exchange. I suspect there may be a problem with the API of lbank exchange. Has anyone used the API of lbank exchange to trade with limit orders?\r\n\r\n\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19697/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-10-27T04:42:32Z",
        "body": "Hi @qwe231cvb \r\n\r\nWould you like to paste verbose log? "
      },
      {
        "user": "Dan-krm",
        "created_at": "2023-10-27T05:09:04Z",
        "body": "This has been an issue with creating orders on Lbank and Lbank2 for a while, it seems like they're limiting access to trading through the API and these errors are always returned: `Invalid Trading Pair` or `This currency pair is not supported`\r\n\r\nIf you look at other issues and pull requests some users mention similar problems and have contacted Lbanks customer service without any success:\r\n#12920\r\n#18970\r\n#18716"
      }
    ]
  },
  {
    "number": 19682,
    "title": "Phemex XRP/USDT:USDT fetch positions shows no data",
    "created_at": "2023-10-26T13:57:28Z",
    "closed_at": "2023-10-30T09:33:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19682",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.20\n\n### Description\n\nHi again :-),\r\n\r\nIf I try to fetch positions from symbol: XRP/USDT:USDT on phemex it shows no data.  output  --> []  \r\nIt's strange because other symbols I tried are working fine, as example SOL/USTD:USDT or ADA/USDT:USDT.\r\nWhy is that? \r\n\r\nI tried with phemex_pos=phemex.fetch_positions()  but then I get only BTC, ETH and ADA. \r\n\r\n\n\n### Code\n\n```\r\nsymbol = 'XRP/USDT:USDT'\r\n\r\nparams={\"type\":\"swap\",\"code\":\"USDT\"}\r\nphemex_pos=phemex.fetch_positions([symbol], params)\r\n#phemex_pos=phemex.fetch_positions()\r\nprint(phemex_pos)\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19682/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-10-27T06:31:28Z",
        "body": "This program produces the results below. Can you share the result of running `fetch_positions` with no symbols argument? Maybe you don't have a position for `XRP/USDT:USDT` and have a position for `XRP/USD:USD` or something instead.\r\n\r\n```\r\nimport json\r\nimport ccxt\r\n\r\nkeys = json.load(open('../keys.local.json'))\r\nexchange = ccxt.phemex({\r\n    'apiKey': keys['phemex']['apiKey'],\r\n    'secret': keys['phemex']['secret'],\r\n})\r\nmarkets = exchange.markets\r\n\r\nsymbol = 'XRP/USDT:USDT'\r\n\r\nparams = {\"type\": \"swap\", \"code\": \"USDT\"}\r\nphemex_pos = exchange.fetch_positions([symbol], params)\r\nprint(phemex_pos)\r\n```\r\n\r\n```\r\n[\r\n    {\r\n        'info': {'userID': '2632645', 'accountID': '26326450003', 'symbol': 'XRPUSDT', 'currency': 'USDT', 'side': 'Buy', 'positionStatus': 'Normal', 'crossMargin': True, 'leverageRr': '-10', 'initMarginReqRr': '0.1', 'maintMarginReqRr': '0.01', 'riskLimitRv': '200000', 'size': '5', 'valueRv': '2.7455', 'avgEntryPriceRp': '0.5491', 'avgEntryPrice': '0.5491', 'posCostRv': '0.27603257', 'assignedPosBalanceRv': '0.27707487', 'bankruptCommRv': '0.001212576532', 'bankruptPriceRp': '0.4042', 'positionMarginRv': '0.724539113468', 'liquidationPriceRp': '0.4097', 'deleveragePercentileRr': '0', 'buyValueToCostRr': '0.10114', 'sellValueToCostRr': '0.10126', 'markPriceRp': '0.54889154', 'estimatedOrdLossRv': '0', 'usedBalanceRv': '0.27707487', 'cumClosedPnlRv': '0', 'cumFundingFeeRv': '0', 'cumTransactFeeRv': '0.0016473', 'transactTimeNs': '1698387919923224096', 'takerFeeRateRr': '0.0006', 'makerFeeRateRr': '0.0001', 'term': '1', 'lastTermEndTimeNs': '0', 'lastFundingTimeNs': '0', 'curTermRealisedPnlRv': '-0.0016473', 'execSeq': '5819732343', 'posSide': 'Merged', 'posMode': 'OneWay', 'buyLeavesValueRv': '0', 'sellLeavesValueRv': '0'}, \r\n        'id': None, \r\n        'symbol': 'XRP/USDT:USDT', \r\n        'contracts': 5.0, \r\n        'contractSize': 1, \r\n        'unrealizedPnl': -0.00345823703115869, \r\n        'leverage': -10.0, \r\n        'liquidationPrice': 0.4097, \r\n        'collateral': 0.724539113468, \r\n        'notional': 2.7455, \r\n        'markPrice': 0.54889154, \r\n        'lastPrice': None, \r\n        'entryPrice': 0.5491, \r\n        'timestamp': None, \r\n        'lastUpdateTimestamp': None, \r\n        'initialMargin': 0.27707487, \r\n        'initialMarginPercentage': 0.10091963940994354, \r\n        'maintenanceMargin': 0.027455, \r\n        'maintenanceMarginPercentage': 0.01, \r\n        'marginRatio': 0.03789305434262463, \r\n        'datetime': None, \r\n        'marginMode': 'cross', \r\n        'side': 'long', \r\n        'hedged': False, \r\n        'percentage': None, \r\n        'stopLossPrice': None, \r\n        'takeProfitPrice': None\r\n    }\r\n]\r\n```"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-10-30T09:33:43Z",
        "body": "Hi @samgermain , i don't know this time. But it's working now! Probably it was my bad, i don't know.\r\nThanks for your time! :-)\r\n"
      }
    ]
  },
  {
    "number": 19666,
    "title": "Bitmex fetch positions doesn't show information anymore",
    "created_at": "2023-10-25T13:07:11Z",
    "closed_at": "2023-10-25T14:02:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19666",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.20\n\n### Description\n\nHello,\r\n\r\nsuddenly, probably after ccxt update I get no Information from \r\n\r\nBitmex.fetch.positions anymore. \r\n\r\nOutput is --> []  None\r\n\r\nWas there any change on ccxt for Bitmex or is it a bug? \r\n\r\nMy account was liquidated because of this problem. Luckily it was just play money :-)... \r\n\r\n\n\n### Code\n\n```\r\nbitmex = ccxt.bitmex({'enableRateLimit': True,\r\n                       'apiKey': bitmexconfig.api_key,\r\n                       'secret': bitmexconfig.api_secret,})\r\n\r\n\r\nsymbol = 'XBTUSD'\r\nparams={\"type\":\"swap\",\"code\":\"XBT\"}\r\n\r\nbitmex_pos = bitmex.fetch_positions([symbol], params)\r\nprint(bitmex_pos)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19666/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:39:50Z",
        "body": "Hello @Nitrix321,\r\n\r\nRecently we just improved the filtering because if you called `fetch_positions([A,B,C])` it would return all the positions regardless of the symbols provided. The filtering might not be working correctly with exchange-specific ids and I will fix it ASAP but in the meantime, you can either not provide any symbol or provide the unified one (BTC/USD:BTC)\r\n\r\nExample:\r\n```Python\r\npos = bitmex.fetch_positions(params = params)\r\n# or\r\npos = bitmex.fetch_positions(['BTC/USD:BTC'] ,params = params)\r\n```\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:46:00Z",
        "body": "@Nitrix321 Sorry I think what I said is wrong, exchange-specific symbols are also working,  but due to the filtering it will only return positions from the symbols in the symbols array, so I would suggest calling `fetch_positions` without any argument. "
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-10-25T14:02:36Z",
        "body": "hi @carlosmiei thanks, its working now without any argument as you said. I already tried without symbol or only symbol and no param but without any argument I was not thinking about that...  "
      }
    ]
  },
  {
    "number": 19659,
    "title": "Oppening Position in Mexc, Future Position.",
    "created_at": "2023-10-24T15:28:48Z",
    "closed_at": "2023-10-24T15:35:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19659",
    "body": "### Operating System\n\nPython 3\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n ccxt-4.1.24\n\n### Description\n\nI am struggling to open a mexc ccxt position. I am using a code that worked with bybit but due to circumstantial occurrences, i have changed ship to mexc. It has proved to be quite irritating in setting up via basic coder means. Once i change the symbol to MX/USDT it works for spot but future is not working.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\nimport ccxt\r\n\r\ndef place_order(entry, stop, profit, quantity, leverage, symbol, type, side):\r\n    exchange = ccxt.mexc3({\r\n    'apiKey': 'mx0vgdfsdfsdifsidfsjdjfjsdjfsdfdfsdfsdfuvusTCyCGnei',\r\n    'secret': '29200442d501a84044329hbfa500923339c9985778',\r\n}) # Replace 'mexc' with the appropriate exchange name\r\n    try:\r\n        order = exchange.create_order(\r\n            symbol=symbol,\r\n            type=type,\r\n            side=side,\r\n            amount=quantity,\r\n            price=entry,\r\n            params={\r\n                'takeProfit': profit,\r\n                'stopLoss': stop,\r\n            }\r\n        )\r\n        # turn this into a final code where I am able to place a trade through the exchange\r\n    except ccxt.BaseError as e:\r\n        print(f\"An error occurred: {e}\")\r\n\r\nplace_order(entry=2.7848, stop=2.78, profit=2.79, quantity=2, leverage=1, symbol=\"MX/USDT:USDT\", type=\"limit\", side=\"buy\")\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19659/comments",
    "author": "Anrijs77",
    "comments": [
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T15:29:44Z",
        "body": "An error occurred: mexc3 {\"success\":false,\"code\":1002,\"message\":\"Contract not allow place order!\"}"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T15:34:55Z",
        "body": "In addition, i would like to know and probably have a function that cancels opened positioned. Closes the Positions."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T15:35:59Z",
        "body": "Hello @Anrijs77 unfortunately mexc disabled futures trading through the API a few months ago, so there's nothing ccxt can do to overcome this issue. "
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T15:36:54Z",
        "body": "how can i implement bingx then?\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T15:37:31Z",
        "body": "@Anrijs77 Sorry, what do you mean by \"implementing bingx\"? Bingx is already available in CCXT"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T15:37:32Z",
        "body": "@carlosmiei same manner?\r\nasking ebcause i am not aware if ccxt deals with bingx"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T15:38:02Z",
        "body": "@Anrijs77 Yes Bingx is available you can trade spot and swap with it. "
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T15:52:33Z",
        "body": "An error occurred: bingx {\"code\":80014,\"msg\":\"Mismatch type apiproto.TriggerClose with value number \\\"at index 0: mismatched type with value\\\\n\\\\n\\\\t0.54\\\\n\\\\t^...\\\\n\\\"\",\"data\":{}} turned it to xrp and bingx but am getting this\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T15:56:08Z",
        "body": "> An error occurred: bingx {\"code\":80014,\"msg\":\"Mismatch type apiproto.TriggerClose with value number \"at index 0: mismatched type with value\\n\\n\\t0.54\\n\\t^...\\n\"\",\"data\":{}} turned it to xrp and bingx but am getting this\r\n\r\n@Anrijs77 can you show us the ccxt call made + a verbose request?"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T16:01:21Z",
        "body": "import ccxt\r\n\r\ndef place_order(entry, stop, profit, quantity, leverage, symbol, type, side):\r\n    exchange = ccxt.bingx({\r\n        'apiKey': '',\r\n        'secret': '',\r\n    }) # Replace 'mexc' with the appropriate exchange name\r\n    try:\r\n        order = exchange.create_order(\r\n            symbol=symbol,\r\n            type=type,\r\n            side=side,\r\n            amount=quantity,\r\n            price=entry,\r\n            params={\r\n                'takeProfit': profit,\r\n                'stopLoss': stop,\r\n            }\r\n        )\r\n        # turn this into a final code where I am able to place a trade through the exchange\r\n    except ccxt.BaseError as e:\r\n        print(f\"An error occurred: {e}\")\r\n\r\nplace_order(entry=0.78, stop=0.7, profit=0.9, quantity=5, leverage=1, symbol=\"MINA/USDT:USDT\", type=\"limit\", side=\"buy\")\r\nAn error occurred: bingx {\"code\":80014,\"msg\":\"Mismatch type apiproto.TriggerClose with value number \\\"at index 0: mismatched type with value\\\\n\\\\n\\\\t0.7\\\\n\\\\t^..\\\\n\\\"\",\"data\":{}}"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T17:15:22Z",
        "body": "@Anrijs77 Yeah that behavior is not full unified yet at bingx, but you can do this:\r\n\r\n```Python\r\n    order = await exchange.create_order('LTC/USDT:USDT', 'market', 'buy', 0.1, 50, {\r\n        'takeProfit': \"{\\\"type\\\": \\\"TAKE_PROFIT_MARKET\\\", \\\"quantity\\\": 0.1,\\\"stopPrice\\\": 100.0,\\\"price\\\": 100.0,\\\"workingType\\\":\\\"MARK_PRICE\\\"}\",\r\n        'stopLoss': \"{\\\"type\\\": \\\"STOP_MARKET\\\", \\\"quantity\\\": 0.1,\\\"stopPrice\\\": 30.0,\\\"price\\\": 30.0,\\\"workingType\\\":\\\"MARK_PRICE\\\"}\",\r\n    })\r\n```\r\n"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-24T19:08:47Z",
        "body": "Is it possible for you to make it work with my code where i can just call it with simple stop and take profit terms"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-24T20:52:07Z",
        "body": "@Anrijs77 Right now we have to follow the APi spec precisely because the behavior is not unified in CCXT terms, but it should be very easy to adapt the example I gave:\r\n\r\n```Python\r\n    stop_loss_price = YOUR_SL_PRICE\r\n    take_profit_price = YOUR_TP_PRICE\r\n    stop_loss_amount = YOUR_STOP_LOSS_AMOUNT # if you want to close the position entirely, set this to the amount of the position\r\n    take_profit_amount = YOUR_TAKE_PROFIT_AMOUNT # if you want to close the position entirely, set this to the amount of the position\r\n   \r\n    order = await exchange.create_order('LTC/USDT:USDT', 'market', 'buy', 0.1, 50, {\r\n        'takeProfit': f'{{\\\"type\\\": \\\"TAKE_PROFIT_MARKET\\\", \\\"quantity\\\": {stop_loss_amount},\\\"stopPrice\\\": {stop_loss_price},\\\"price\\\": {stop_loss_price},\\\"workingType\\\":\\\"MARK_PRICE\\\"\\}}',\r\n        'stopLoss': f'{{\\\"type\\\": \\\"STOP_MARKET\\\", \\\"quantity\\\": {take_profit_amount},\\\"stopPrice\\\": {take_profit_price},\\\"price\\\": {take_profit_price},\\\"workingType\\\":\\\"MARK_PRICE\\\"}}',\r\n    })\r\n```\r\n\r\n"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-25T12:52:29Z",
        "body": "Hello what do the 0.1 or 50 mean\r\n"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-25T13:01:54Z",
        "body": "suppose quantity then elverage\r\n"
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-25T13:02:04Z",
        "body": "ok cool thanks\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:09:01Z",
        "body": "@Anrijs77, no, here 0.1 is the amount and 50 the price (but yeah that can be ignored in a market order). "
      },
      {
        "user": "Anrijs77",
        "created_at": "2023-10-25T13:16:09Z",
        "body": "doesnt seem to be working: \r\nimport ccxt\r\n\r\nasync def place_order(entry, stop, profit, quantity, leverage, symbol, type, side):\r\n    exchange = ccxt.bingx({\r\n        'apiKey': '',\r\n        'secret': '',\r\n    })\r\n    try:\r\n      stop_loss_price = stop\r\n      take_profit_price = profit\r\n      stop_loss_amount = quantity # if you want to close the position entirely, set this to the amount of the position\r\n      take_profit_amount = quantity # if you want to close the position entirely, set this to the amount of the position\r\n    \r\n      order = await exchange.create_order(symbol, type, side, quantity, entry, {\r\n        'takeProfit': f'{{\\\"type\\\": \\\"TAKE_PROFIT_MARKET\\\", \\\"quantity\\\": {stop_loss_amount},\\\"stopPrice\\\": {stop_loss_price},\\\"price\\\": {stop_loss_price},\\\"workingType\\\":\\\"MARK_PRICE\\\"\\}}',\r\n        'stopLoss': f'{{\\\"type\\\": \\\"STOP_MARKET\\\", \\\"quantity\\\": {take_profit_amount},\\\"stopPrice\\\": {take_profit_price},\\\"price\\\": {take_profit_price},\\\"workingType\\\":\\\"MARK_PRICE\\\"}}',\r\n    })\r\n      print(order)\r\n      return order\r\n    except ccxt.BaseError as e:\r\n        print(f\"An error occurred: {e}\")\r\n        return None\r\n\r\n\r\nplace_order(entry = 0, stop = 0.65, profit = 0.71, quantity = 4, leverage = 1, symbol = \"MINA/USDT:USDT\", type = \"market\", side = \"buy\")\r\n<coroutine object place_order at 0x7eb0354c4040> is what i get"
      }
    ]
  },
  {
    "number": 19595,
    "title": "Python fetch_markets() does not return future markets",
    "created_at": "2023-10-17T05:16:14Z",
    "closed_at": "2023-10-18T03:52:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19595",
    "body": "### Operating System\r\n\r\nWindows 11\r\n\r\n### Programming Languages\r\n\r\nPython 3.11.6\r\n\r\n### CCXT Version\r\n\r\n4.1.14\r\n\r\n### Description\r\n\r\nI wanna get all Binance Future USDT markets. I think there is 100+ future markets, but most of them are missing in fetch_markets()\r\n\r\n### Code\r\n```\r\nbinance = ccxt.binance(config={\r\n    'apiKey': config['ACCESS_KEY'],\r\n    'secret': config['SECRET_KEY'],\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType': 'future'}\r\n})\r\n\r\nmarkets = binance.fetch_markets()\r\ncount = 0\r\nfor coin_info in markets:\r\n    if coin_info['quote'] != 'USDT':\r\n        continue\r\n    if not coin_info['active']:\r\n        continue\r\n    if coin_info['future'] or coin_info['type'] == 'future':\r\n        count += 1\r\n\r\nprint(f\"Count: {count}\") # Count: 4\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19595/comments",
    "author": "Mechatrony",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-17T09:05:24Z",
        "body": "Hello @Mechatrony,\r\nBy `future` do you mean delivery futures or perpetual swaps? At CCXT, we call the latter `swaps`.\r\n\r\nCan you try this?\r\n```Python\r\n markets = await exchange.load_markets()\r\nfuture_markets = [m for m in markets.values() if m['future']] # 27 markets\r\nswap_markets = [m for m in markets.values() if m['swap']] # 298 swaps\r\n```\r\n"
      },
      {
        "user": "Mechatrony",
        "created_at": "2023-10-18T03:52:10Z",
        "body": "Hello @carlosmiei \r\nI meant perpetual swaps. I've been used my code with previous CCXT version(at least 6 months ago) and just updated CCXT. I didn't noted that changed. Your code works good. Thank you."
      }
    ]
  },
  {
    "number": 19588,
    "title": "Bybit: Invalid Order, reduce-only rule not satisfied",
    "created_at": "2023-10-16T14:21:26Z",
    "closed_at": "2023-10-17T09:28:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19588",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.1.13\r\n\r\n### Description\r\n\r\nIf in a long position, and try to make limit sell order.\r\nThe limit order has been placed but the following error message occurs.\r\n\r\nInvalidOrder: bybit {\"retCode\":110017,\"retMsg\":\"Reduce-only rule not satisfied\",\"result\":{},\"retExtInfo\":{},\"time\":1697464683996}\r\n\r\n### Code\r\n\r\n```python\r\nsymbol = 'ETH/USDT:USDT'\r\n\r\nexitprice = 1650  # --> as example\r\n\r\n# if I create params without 'reduce_only': True entry the same issue occurs \r\n\r\nparams={'reduce_only': True,        \r\n            'close_on_trigger': True,}\r\n\r\npos_size = 0.35\r\n\r\nbybit.create_limit_sell_order(symbol, pos_size, exitprice, params=params)\r\n\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19588/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-16T16:31:25Z",
        "body": "Hello @Nitrix321,\r\n`reduce_only` (snake_case) is not the correct format, you should always use the camelCase version `reduceOnly`.\r\n\r\nCan you try that?"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-10-17T09:28:38Z",
        "body": "Hi @carlosmiei, thank you.  It's working now but it was another issue, it was not the wrong format. But I will use the format version you recommend in future. \r\n\r\nThanks again. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-17T09:38:00Z",
        "body": "@Nitrix321 now, after the V5 migration, the snake_case version is not supported (it was previously but not anymore) so I highly recommend sticking to the camelCase one 🙂 "
      }
    ]
  },
  {
    "number": 19562,
    "title": "Bitget Fetch_Order for triggerorders/stop orders OrderNotFound ERROR",
    "created_at": "2023-10-14T10:57:35Z",
    "closed_at": "2023-10-20T23:01:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19562",
    "body": "### Operating System\n\nWin11\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nLatest\n\n### Description\n\nWhat params need for fetch activations/stop/triggers orders? i add stop:true param, and clientorderid param, but dosnt work\n\n### Code\n\n_No response_",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19562/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-14T11:16:02Z",
        "body": "Hello @ZetZ1, right now bitget does not provide an endpoint that allows fetching a stop order regardless of its state (closed, filled, canceled), so for that reason, `fetchOrder` does not support stop orders. You can however try to fetch it by using `fetch_open_orders/fetch_closed_orders/fetch_canceled_orders` by providing `stop` in `params` upon calling those methods. "
      },
      {
        "user": "ZETECdev",
        "created_at": "2023-10-14T13:15:24Z",
        "body": "is not possible add some parameter for receive exactly the order? for example:\r\n                elif exch == 'bitget':\r\n                    params={'stop': True}\r\n                    orders = self.exch.fetch_open_orders(ticker, params=params)\r\n                    if len(orders) > 0:\r\n                        for order in orders:\r\n                            if order['id'] == order_data['OID']: return order\r\n                    orders = self.exch.fetch_closed_orders(ticker, params=params)\r\n                    if len(orders) > 0:\r\n                        for order in orders:\r\n                            if order['id'] == order_data['OID']: return order\r\n                    orders = self.exch.fetch_canceled_orders(ticker, params=params)\r\n                    if len(orders) > 0:\r\n                        for order in orders:\r\n                            if order['id'] == order_data['OID']: return order"
      }
    ]
  },
  {
    "number": 19522,
    "title": "Bingx gbp/jpy symbol not available in markets",
    "created_at": "2023-10-11T10:06:58Z",
    "closed_at": "2023-11-06T16:48:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19522",
    "body": "### Operating System\n\nOSX\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nHi everyone,\r\n\r\nI'm new to this library and the documentation is great. I am trying to create the foundation for my code to execute some orders for FOREX, which is available in BingX, however when i instantiate my client and I use loadMarkets() I don't get any of the forex, stocks, indices, etc. Why is that? What am I missing? are they just not supported? What would happen if i know the symbol is GBP/JPY and i just create an order with that? would that work?\r\n\r\nCheers and thanks for an awesome project.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19522/comments",
    "author": "mmaestrini",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-11T10:10:41Z",
        "body": "Hello @mmaestrini,\r\nUnfortunately I don't think Bingx provides forex trading through the API, so we can't integrate it into ccxt. "
      },
      {
        "user": "mmaestrini",
        "created_at": "2023-10-11T10:30:38Z",
        "body": "@carlosmiei Oh damn! I just asked support. That's so insane why they arent allowing that. It's the only reason why i even have an account there. Thanks for the prompt response though! appreciate it!\r\n\r\nAre you aware of any other exchanges where FOREX/STOCKS are available via API btw?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-06T16:48:25Z",
        "body": "@mmaestrini Right now I don't think any of the listed exchanges support FOREX/STOCKS trading. "
      }
    ]
  },
  {
    "number": 19506,
    "title": "OKX BrokerId and clientOrderId",
    "created_at": "2023-10-10T12:57:37Z",
    "closed_at": "2023-11-06T16:46:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19506",
    "body": "### Operating System\r\n\r\nUbuntu 22.04\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.49\r\n\r\n### Description\r\n\r\nHi everyone\r\nI was working on OKX and wanted to provide both a client order id and a broker id\r\nI found this in your code that is blocking me, is it intended? \r\nThanks in advance\r\n\r\n### Code\r\n\r\n```\r\n        if clientOrderId is None:\r\n            brokerId = self.safe_string(self.options, 'brokerId')\r\n            if brokerId is not None:\r\n                request['clOrdId'] = brokerId + self.uuid16()\r\n                request['tag'] = brokerId\r\n        else:\r\n            request['clOrdId'] = clientOrderId\r\n            params = self.omit(params, ['clOrdId', 'clientOrderId'])\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19506/comments",
    "author": "KevinBaudin",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-10T13:09:59Z",
        "body": "Hello @KevinBaudin, What's blocking you exactly? Bear in mind that the values inside `params` override the `request` values. "
      },
      {
        "user": "KevinBaudin",
        "created_at": "2023-10-10T13:15:24Z",
        "body": "The fact that I provide a brokerId in options is only read if I do not provide a client order id in the params, right?\r\nBut you tell me that I can provide \"tag\" in params and circumvent it, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-10T13:15:57Z",
        "body": "@KevinBaudin \r\n> But you tell me that I can provide \"tag\" in params and circumvent it, right?\r\n\r\nExactly"
      },
      {
        "user": "KevinBaudin",
        "created_at": "2023-10-10T13:21:18Z",
        "body": "Great ! Also in the \"sign\" function I would need to provide it in params for the same reason right? But I don't think I would need it, I never used it imo. If you tell me that it would not be blocking, everything is fine for me"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-13T11:14:53Z",
        "body": "@KevinBaudin The `params` provided to the unified method will get to `sign` so it should be ok. "
      }
    ]
  },
  {
    "number": 19490,
    "title": "why show this error?",
    "created_at": "2023-10-08T10:35:15Z",
    "closed_at": "2023-10-09T14:14:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19490",
    "body": "### Operating System\r\n\r\nUbuntu 18.04 \r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\nVersion: 4.1.4 \r\n\r\n### Description\r\n\r\nIt shows the error when i run the code,the error as follows:\r\nTraceback (most recent call last):\r\nFile \"roboot5.py\", line 12, in <module>\r\norder = btcalpha.createOrder(symbol, 'market', 'buy', amount)\r\nFile \"/usr/local/lib/python3.7/dist-packages/ccxt/btcalpha.py\", line 710, in create_order\r\n'price': self.price_to_precision(symbol, price),\r\nFile \"/usr/local/lib/python3.7/dist-packages/ccxt/base/exchange.py\", line 3654, in price_to_precision\r\nresult = self.decimal_to_precision(price, ROUND, market['precision']['price'], self.precisionMode, self.paddingMode)\r\nFile \"/usr/local/lib/python3.7/dist-packages/ccxt/base/decimal_to_precision.py\", line 58, in decimal_to_precision\r\ndec = decimal.Decimal(str(n)) \r\ndecimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]\r\n\r\nThe code as follows:\r\n\r\n### Code\r\n\r\n```\r\nimport ccxt\r\nimport time\r\nfrom pprint import pprint\r\n\r\nbtcalpha = ccxt.btcalpha({\r\n  'apiKey': 'my_apikey',\r\n  'secret': 'my_secret',\r\n})\r\nb = 0\r\namount = 4\r\nsymbol = 'XRP/USDT'\r\norder = btcalpha.createOrder(symbol, 'market', 'buy', amount)\r\norder = btcalpha.fetch_order(order['id'], order['symbol'])\r\norder_status = order['status']\r\nprint(\"Order status:\", order_status)\r\nwhile b == 0:\r\n  order = btcalpha.fetch_order(order['id'], order['symbol'])\r\n  order_status = order['status']\r\n  print(\"Order status:\", order_status)\r\n  time.sleep(1)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19490/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-09T11:02:45Z",
        "body": "Hello @qwe231cvb, I will take a look and revert asap."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-09T11:12:02Z",
        "body": "@qwe231cvb BTCAlpha only allows limit orders through the API, so there's nothing ccxt can do about it. Nonetheless, I will add a warning to make things a bit more clear. Thanks for reporting it. "
      }
    ]
  },
  {
    "number": 19437,
    "title": "Class krakenfutures not found. ",
    "created_at": "2023-10-03T11:59:20Z",
    "closed_at": "2023-10-03T14:37:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19437",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n2.5\n\n### Description\n\nError when implementing kraken futures: \r\nClass krakenfutures not found\r\n\r\n\r\nI am trying to setup krakenfutures (using PHP) but the class does not exist in the library. \r\n\r\nI used composer require ccxt/ccxt to install. Here is the version \r\n \"require\": {\r\n        \"ccxt/ccxt\": \"^2.5\",\r\n\r\nIf I try:\r\n\r\n $exchange = '\\\\ccxt\\\\krakenfutures';\r\n        $exchange = new $exchange(array(\r\n            'apiKey' => 'my api key',\r\n            'secret' => 'my secret',\r\n        ));\r\n\r\nI have: Class krakenfutures not found. \r\n\r\nI checked in the files of ccxt, I have a kraken.php but no krakenfutures.php. \r\n\r\nWhen I check on the documentation is says it is supported in ccxt pro. \r\nWhen I try to go to ccxt.pro I am redirected to github pages saying that ccxt pro is now merged to ccxt. \r\n\r\nMaybe I misunderstood something because I saw some people saying that they implemented it. I tried to search if I could buy ccxt pro but all I found is that it is now merged.\r\n\r\nCan you please help ?\r\n\r\nThanks\n\n### Code\n\n```\r\n   $exchange = '\\\\ccxt\\\\krakenfutures';\r\n        $exchange = new $exchange(array(\r\n            'apiKey' => 'my api key',\r\n            'secret' => 'my secret',\r\n        ));\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19437/comments",
    "author": "smamet",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-03T13:25:03Z",
        "body": "Hello @smamet,\r\n`KrakenFutures` was added at a later version, so you need to update your CCXT version to access it. "
      },
      {
        "user": "smamet",
        "created_at": "2023-10-03T14:37:52Z",
        "body": "Oh, I didn't notice that sorry. Thanks for your help !"
      }
    ]
  },
  {
    "number": 19396,
    "title": "Ccxt Exception question",
    "created_at": "2023-09-27T13:26:44Z",
    "closed_at": "2023-09-28T13:55:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19396",
    "body": "### Operating System\n\nDebian 12 / macOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.0.6\n\n### Description\n\nMore a question than an issue, I'm getting ccxt.BadRequest exception when trying to set leverage on ByBit when the leverage is already the same as the one I'm asking.\r\nHere is the output :\r\n{\"retCode\":110043,\"retMsg\":\"Set leverage not modified\",\"result\":{},\"retExtInfo\":{},\"time\":1695818717824}\r\n\r\nI'm just wondering 2 things : \r\n1) Is it possible to get the actual leverage to avoid calling set_leverage and thus the exception\r\n2) How can I \"extract\" the retCode from the Exception ? It does not seem to be an object (not subscriptable)\r\n\r\nThanks !\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19396/comments",
    "author": "svax974",
    "comments": [
      {
        "user": "germangar",
        "created_at": "2023-09-27T14:45:41Z",
        "body": "You can fetch the leverage from the server using fetchLeverage, but at the end of the day fetchLeverage and setLeverage are a request of about the same size. IMO it's just better to silently ignore the error. Also, I think they just changed this error to ccxt.noChange in one of the latest PRs.\r\n\r\nI'm also interested in the answer to the second question. I've been doing it by brute force."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-28T13:55:16Z",
        "body": "Hello @svax974  and thanks @germangar for the explanations, as @germangar  mentioned, if the method `fetchLeverage` is available, you can use that, otherwise it's better to use the `setLeverage` and handle the raised exception when the leverage is not modified. "
      }
    ]
  },
  {
    "number": 19325,
    "title": "kucoinfutures empty fetchPosition - error.",
    "created_at": "2023-09-19T06:47:28Z",
    "closed_at": "2023-09-20T10:28:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19325",
    "body": "### Operating System\n\nubuntu 23.04\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nccxt-4.0.100\n\n### Description\n\nIf the position is empty, it returns an error (data = []):\r\nTraceback (most recent call last):\r\n    self._position = self.exchange.fetchPosition(symbol) \r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../python3.11/site-packages/ccxt/kucoinfutures.py\", line 904, in fetch_position\r\n    return self.parse_position(data[0], market)\r\n                               ~~~~^^^\r\nmaybe we should fix it this way.\r\nif len(data) > 0:\r\n            return self.parse_position(data[0], market)\r\n        else:\r\n            return {}\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19325/comments",
    "author": "ptfu0",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-09-19T10:55:58Z",
        "body": "Hello @ptfu0, thanks for letting us know, we will fix it asap."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-19T11:07:55Z",
        "body": "@ptfu0 Actually this bug was fixed already it will be available in the next release in a few minutes. "
      },
      {
        "user": "ptfu0",
        "created_at": "2023-09-19T14:28:37Z",
        "body": "There is a new problem, there is no position, but fetchPosition started giving a non-existent position.\r\nexchange.fetchPosition('BTC/USDT:USDT')\r\n{'info': {'id': '', 'symbol': 'XBTUSDTM', 'autoDeposit': False, 'maintMarginReq': 0, 'riskLimit': 25000, 'realLeverage': 0, 'crossMode': False, 'delevPercentage': 0.0, 'openingTimestamp': 0, 'currentTimestamp': 1695133582609, 'currentQty': 0, 'currentCost': 0, 'currentComm': 0, 'unrealisedCost': 0, 'realisedGrossCost': 0, 'realisedCost': 0, 'isOpen': False, 'markPrice': 0, 'markValue': 0, 'posCost': 0, 'posCross': 0, 'posCrossMargin': 0, 'posInit': 0, 'posComm': 0, 'posCommCommon': 0, 'posLoss': 0, 'posMargin': 0, 'posMaint': 0, 'maintMargin': 0, 'realisedGrossPnl': 0, 'realisedPnl': 0, 'unrealisedPnl': 0, 'unrealisedPnlPcnt': 0, 'unrealisedRoePcnt': 0, 'avgEntryPrice': 0, 'liquidationPrice': 0, 'bankruptPrice': 0, 'settleCurrency': 'USDT', 'maintainMargin': 0, 'riskLimitLevel': 1}, 'id': None, 'symbol': 'BTC/USDT:USDT', 'timestamp': 1695133582609.0, 'datetime': None, 'lastUpdateTimestamp': None, 'initialMargin': 0.0, 'initialMarginPercentage': None, 'maintenanceMargin': 0.0, 'maintenanceMarginPercentage': 0.0, 'entryPrice': 0.0, 'notional': 0.0, 'leverage': 0.0, 'unrealizedPnl': 0.0, 'contracts': 0.0, 'contractSize': 0.001, 'realizedPnl': 0.0, 'marginRatio': None, 'liquidationPrice': 0.0, 'markPrice': 0.0, 'lastPrice': None, 'collateral': 0.0, 'marginMode': 'isolated', 'side': None, 'percentage': None, 'stopLossPrice': None, 'takeProfitPrice': None}\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-20T09:52:16Z",
        "body": "@ptfu0 I would not call it a problem because that is the \"default\" position returned by kucoin. You can discard these empty positions by checking if the size and the price are 0."
      },
      {
        "user": "ptfu0",
        "created_at": "2023-09-20T10:30:08Z",
        "body": "Thanks, that's roughly what I did, except I did a side is None )"
      }
    ]
  },
  {
    "number": 19177,
    "title": "symbol BTC/FDUSD leverage not working",
    "created_at": "2023-09-11T09:13:01Z",
    "closed_at": "2023-09-12T06:10:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19177",
    "body": "### Operating System\r\n\r\nWindows11\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.78\r\n\r\n### Description\r\n\r\nHi, \r\n\r\nWe are working on binance BTC/FDUSD symbol trading with leverage. \r\nThis symbol is working totally fine without leveraging (e.g. binance.fetch_ticker, binance.create_market_buy_order), while when calling binance.markets[ 'BTC/FDUSD' ], the return leverage limit is None.\r\n\r\nWe've checked that the return of leverage with binance.markets[ 'BTC/USDT' ] is working while binance.markets[ 'BTC/FDUSD' ] and binance.markets[ 'FDUSD/BTC' ] are not (returns None), also binance.fapiPrivate_post_leverage is not working with 'FDUSD' symbols.\r\n\r\nWe've also confirmed with binance support that 'FDUSD' symbols endpoints are fine on binance side, so we suppose the issue is on the ccxt tool, thanks.\r\n\r\n### Code\r\n\r\n```\r\nsymbol = 'BTC/FDUSD'\r\nself.binance = ccxt.binance({ })\r\n\r\nresult = float(self.binance.fetch_ticker(symbol)['bid']) # Works\r\norder = self.binance.create_market_buy_order(symbol, amount) # Works\r\norder = self.binance.create_market_sell_order(symbol, amount) # Works\r\n\r\nself.binance.load_markets()\r\nmarket = self.binance.markets[ symbol ]  # returns None in leverage limit\r\nself.binance.fapiPrivate_post_leverage(symbol) # Not working\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19177/comments",
    "author": "cO-Oe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-09-11T10:57:19Z",
        "body": "Hello @cO-Oe,\r\n\r\nThe main issue is that you're calling a derivatives endpoint (fapiPrivate_post_leverage) using a spot symbol. "
      },
      {
        "user": "cO-Oe",
        "created_at": "2023-09-12T06:10:38Z",
        "body": "Hi @carlosmiei, \r\n\r\nAppreciated! We've switched to margin trading for spot symbols and worked as what we would liked to, thanks!"
      }
    ]
  },
  {
    "number": 19140,
    "title": "CAN´T CREATE AN ORDER IN UNILATERAL POSITION TYPE BITGET",
    "created_at": "2023-09-09T15:57:25Z",
    "closed_at": "2024-01-09T10:35:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19140",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.79\r\n\r\n### Description\r\n\r\nWhen i want to create a market buy/sell order, they give me this error: \r\n\r\n\"ccxt.base.errors.ExchangeError: bitget {\"code\":\"40774\",\"msg\":\"The order type for unilateral position must also be the unilateral position type.\",\"requestTime\":1694274505084,\"data\":null}\". \r\n\r\nThere is a way to make an order for the unilateral position mode.\r\n\r\n### Code\r\n\r\nimport ccxt\r\n\r\nBITGET = ccxt.bitget({\r\n    'apiKey': 'config.apikey',\r\n    'secret': 'config.secretapikey',\r\n    'password': 'config.password',\r\n    'options': {\r\n        'defaultType': 'swap',\r\n    }\r\n})\r\nBITGET.set_sandbox_mode(True)\r\n\r\nsymbol = 'SETH/SUSDT:SUSDT'\r\n\r\nORDERMARKETBUY = BITGET.create_order(symbol, 'market', 'buy', 0.01)\r\nprint(ORDERMARKETBUY)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19140/comments",
    "author": "carolestalisto",
    "comments": [
      {
        "user": "germangar",
        "created_at": "2023-09-09T16:56:57Z",
        "body": "First you have to make sure you are in one-way mode. You set the symbol to one-way mode with the set_position_mode method.\r\n`response = cls.exchange.set_position_mode( False, symbol )`\r\nAnd you set the margin mode with set_margin_mode\r\n`response = cls.exchange.set_margin_mode( 'isolated', symbol, params )`\r\nAnd finally set the leverage:\r\n`response = cls.exchange.set_leverage( leverage, symbol, params )`\r\n\r\nYou don't need to do these every time. Only the first time and when you want to change any of those parameters.\r\nThen you can make the orders. For Bitget, **when you are in one-way mode you have to add special params for long and short ('side':'buy_single' for long and 'side':'sell_single' for short)**\r\n\r\n```\r\n            params = {}\r\n\r\n            if( cls.exchange.id == 'bitget' ):\r\n                params['side'] = 'buy_single' if( order.type == \"buy\" ) else 'sell_single'\r\n                if( order.reverse ):\r\n                    params['reverse'] = True\r\n                    \r\n            response = cls.exchange.create_market_order( order.symbol, order.type, order.quantity, None, params )\r\n```\r\n\r\n(These are snippets copy/pasted from my code so they have variables defined elsewhere. They are just meant as a guide)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-11T10:50:58Z",
        "body": "Hello @germangar, thanks for jumping in and helping out by explaining it."
      },
      {
        "user": "Dan-krm",
        "created_at": "2024-01-09T07:17:58Z",
        "body": "For bitget v2 it looks like one-way mode orders don't work if the `tradeSide` parameter is filled which is required for hedge mode orders.\r\n\r\nI opened a pull request that allows you to set `\"oneWayMode\": true` in the createOrder params, so you can create one way mode orders on bitget without getting the unilateral error."
      },
      {
        "user": "Vasco0x4",
        "created_at": "2024-03-09T13:08:58Z",
        "body": "Hello everyone,\r\n\r\nI recently tried to integrate the \"oneWayMode\": true parameter into my request to the Bitget API, hoping it would allow me to place orders in one-way mode without encountering the unilateral position type error. Unfortunately, I'm still facing the same issue.\r\n\r\nheaders :\r\n\r\n`{'ACCESS-KEY': '***', 'ACCESS-SIGN': '***', 'ACCESS-PASSPHRASE': '***', 'ACCESS-TIMESTAMP': '1709932155263', 'Content-Type': 'application/json', 'locale': 'en-US'}\r\n`\r\nbody :\r\n\r\n`{\"symbol\": \"SOLUSDT\", \"productType\": \"usdt-futures\", \"marginMode\": \"isolated\", \"marginCoin\": \"USDT\", \"size\": \"0.1\", \"side\": \"buy\", \"orderType\": \"market\", \"oneWayMode\": true}`\r\n\r\nI received the following error:\r\n` {\"code\":\"40774\",\"msg\":\"The order type for unilateral position must also be the unilateral position type.\",\"requestTime\":1709932155542,\"data\":null}`\r\n\r\nThank you in advance for your help!"
      }
    ]
  },
  {
    "number": 19078,
    "title": "Gate returns Withdraw = True while it is not",
    "created_at": "2023-09-01T15:26:24Z",
    "closed_at": "2023-09-04T17:09:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19078",
    "body": "### Operating System\n\nWindows 10 \n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nI use ccxt.gate..fetch_currencies()['networks'] to get withdraw status and now it shows True with coin CYBER while it is not. How can I avoid such things. I also tried ccxt.gate.fetch_deposit_withdraw_fee('CYBER') and it shows fee, as if it could be done.  \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19078/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-09-04T17:09:22Z",
        "body": "Hello @AlwxDavydov,\r\nAs you can see here, ccxt is only translating the `withdraw_disabled` field to the unified format, so if at least one of the chains has `wifthdraw_disabled = False`, we will set `withdraw` to `true`. \r\n\r\n```\r\n\r\n{\r\n  id: 'cyber',\r\n  code: 'CYBER',\r\n  info: [\r\n    {\r\n      currency: 'CYBER',\r\n      delisted: false,\r\n      withdraw_disabled: false,\r\n      withdraw_delayed: false,\r\n      deposit_disabled: false,\r\n      trade_disabled: false,\r\n      chain: 'ETH'\r\n    },\r\n    {\r\n      currency: 'CYBER_BSC',\r\n      delisted: false,\r\n      withdraw_disabled: false,\r\n      withdraw_delayed: false,\r\n      deposit_disabled: false,\r\n      trade_disabled: true,\r\n      chain: 'BSC'\r\n    },\r\n    {\r\n      currency: 'CYBER_OPETH',\r\n      delisted: false,\r\n      withdraw_disabled: false,\r\n      withdraw_delayed: false,\r\n      deposit_disabled: false,\r\n      trade_disabled: true,\r\n      chain: 'OPETH'\r\n    }\r\n  ],\r\n  name: undefined,\r\n  active: true,\r\n  deposit: true,\r\n  withdraw: true,\r\n  fee: undefined,\r\n  fees: [],\r\n  precision: 0.0001,\r\n  limits: {\r\n    leverage: { min: undefined, max: undefined },\r\n    amount: { min: undefined, max: undefined },\r\n    price: { min: undefined, max: undefined },\r\n    cost: { min: undefined, max: undefined }\r\n  },\r\n  networks: {\r\n    ERC20: {\r\n      info: {\r\n        currency: 'CYBER',\r\n        delisted: false,\r\n        withdraw_disabled: false,\r\n        withdraw_delayed: false,\r\n        deposit_disabled: false,\r\n        trade_disabled: false,\r\n        chain: 'ETH'\r\n      },\r\n      id: 'ETH',\r\n      network: 'ERC20',\r\n      currencyId: 'CYBER',\r\n      lowerCaseCurrencyId: 'cyber',\r\n      deposit: true,\r\n      withdraw: true,\r\n      active: true,\r\n      fee: undefined,\r\n      precision: 0.0001,\r\n      limits: {\r\n        amount: { min: undefined, max: undefined },\r\n        withdraw: { min: undefined, max: undefined },\r\n        deposit: { min: undefined, max: undefined }\r\n      }\r\n    },\r\n    BEP20: {\r\n      info: {\r\n        currency: 'CYBER_BSC',\r\n        delisted: false,\r\n        withdraw_disabled: false,\r\n        withdraw_delayed: false,\r\n        deposit_disabled: false,\r\n        trade_disabled: true,\r\n        chain: 'BSC'\r\n      },\r\n      id: 'BSC',\r\n      network: 'BEP20',\r\n      currencyId: 'CYBER_BSC',\r\n      lowerCaseCurrencyId: 'cyber_bsc',\r\n      deposit: true,\r\n      withdraw: true,\r\n      active: false,\r\n      fee: undefined,\r\n      precision: 0.0001,\r\n      limits: {\r\n        amount: { min: undefined, max: undefined },\r\n        withdraw: { min: undefined, max: undefined },\r\n        deposit: { min: undefined, max: undefined }\r\n      }\r\n    },\r\n    OPTIMISM: {\r\n      info: {\r\n        currency: 'CYBER_OPETH',\r\n        delisted: false,\r\n        withdraw_disabled: false,\r\n        withdraw_delayed: false,\r\n        deposit_disabled: false,\r\n        trade_disabled: true,\r\n        chain: 'OPETH'\r\n      },\r\n      id: 'OPETH',\r\n      network: 'OPTIMISM',\r\n      currencyId: 'CYBER_OPETH',\r\n      lowerCaseCurrencyId: 'cyber_opeth',\r\n      deposit: true,\r\n      withdraw: true,\r\n      active: false,\r\n      fee: undefined,\r\n      precision: 0.0001,\r\n      limits: {\r\n        amount: { min: undefined, max: undefined },\r\n        withdraw: { min: undefined, max: undefined },\r\n        deposit: { min: undefined, max: undefined }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 19023,
    "title": "Kucoin Symbol Does not Exist",
    "created_at": "2023-08-28T11:42:26Z",
    "closed_at": "2023-08-28T11:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19023",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.77\r\n\r\n### Description\r\n\r\nI am unable to change the margin for BTCUSDT, see code below to reproduce\r\n\r\n### Code\r\n\r\n```\r\nclient = ccxt.kucoinfutures({'apiKey': strategy.public,\r\n                                      'secret': strategy.private,\r\n                                      'password': password})\r\n\r\nticker = \"BTC/USDT:USDT\"\r\nticker = ticker.replace(\"/USDT:USDT\", \"USDTM\")\r\nclient.futuresprivate_post_position_margin_auto_deposit_status(\r\n    params={'symbol': ticker, 'status': True})\r\n```\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\types.py:26, in Entry.__init__.<locals>.unbound_method(_self, \r\nparams)\r\n     25 def unbound_method(_self, params={}):\r\n---> 26     return _self.request(self.path, self.api, self.method, params, config=self.config)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:3019, in Exchange.request(self, path, api, method, params, headers, body, config)\r\n   3018 def request(self, path, api: Any = 'public', method='GET', params={}, headers: Optional[Any] = None, body: Optional[Any] = None, config={}):\r\n-> 3019     return self.fetch2(path, api, method, params, headers, body, config)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:3016, in Exchange.fetch2(self, path, api, method, \r\nparams, headers, body, config)\r\n   3014 self.lastRestRequestTimestamp = self.milliseconds()\r\n   3015 request = self.sign(path, api, method, params, headers, body)\r\n-> 3016 return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:644, in Exchange.fetch(self, url, method, headers, body)\r\n    641     else:\r\n    642         raise ExchangeError(details) from e\r\n--> 644 self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n    645 if json_response is not None:\r\n    646     return json_response\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\kucoin.py:3871, in kucoin.handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody)\r\n   3869 self.throw_broadly_matched_exception(self.exceptions['broad'], body, feedback)\r\n   3870 if errorCode != '200000':\r\n-> 3871     raise ExchangeError(feedback)\r\n   3872 return None\r\n\r\nExchangeError: kucoinfutures Contract symbol[BTCUSDTM] does not exist",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19023/comments",
    "author": "Tomas-MP",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-28T11:51:04Z",
        "body": "Hello @Tomas-MP, I think you're using the wrong exchange-specific market id, it should be `XBTUSDTM`\r\n\r\nYou can easily check it by doing\r\n```Python\r\nawait ex.loadMarkets()\r\nmarket = ex.market('BTC/USDT:USDT')\r\nprint(market['id'])\r\n```\r\n"
      },
      {
        "user": "Tomas-MP",
        "created_at": "2023-08-28T11:54:29Z",
        "body": "Works indeed, thank you!"
      }
    ]
  },
  {
    "number": 18978,
    "title": "Kucoin AttributeError 'filterByArrayPositions'",
    "created_at": "2023-08-23T18:06:39Z",
    "closed_at": "2023-08-24T09:33:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18978",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.73\r\n\r\n### Description\r\n\r\nWhen trying to fetch_positions I get an AttributeError, see error below.\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n  File \"D:\\OneDrive\\Documenten\\Github\\cryptocurrency\\tradingbot\\functions\\exchange.py\", line 464, in kucoin\r\n    return pd.DataFrame(client.fetch_positions())\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\kucoinfutures.py\", line 963, in fetch_positions\r\n    return self.parse_positions(data, symbols)\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 2923, in parse_positions\r\n    return self.filterByArrayPositions(result, 'symbol', symbols, False)\r\nAttributeError: 'kucoinfutures' object has no attribute 'filterByArrayPositions'",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18978/comments",
    "author": "Tomas-MP",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-23T18:09:04Z",
        "body": "Hello @Tomas-MP, yeah again the same issue with the dynamic props, but don't worry will fix it soon"
      },
      {
        "user": "Tomas-MP",
        "created_at": "2023-08-23T18:09:44Z",
        "body": "@carlosmiei is there any way to fix this permanently on my side? "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-24T09:20:43Z",
        "body": "@Tomas-MP unfortunately, I don't know yet how to reproduce that issue locally"
      }
    ]
  },
  {
    "number": 18975,
    "title": "binance {\"code\":-5000,\"msg\":\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\"}",
    "created_at": "2023-08-23T13:48:25Z",
    "closed_at": "2023-08-24T09:51:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18975",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nbinance {\"code\":-5000,\"msg\":\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\"}\r\n\r\nWe are not calling this enpoint anywhere in our code so this must be ccxt internal error.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18975/comments",
    "author": "filipzupancic",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-23T14:12:18Z",
        "body": "Hello @filipzupancic, we upgraded the endpoint a few versions ago (it is used by fetchPositions btw), if you upgrade your ccxt version to the latest it should work"
      },
      {
        "user": "filipzupancic",
        "created_at": "2023-08-24T09:51:13Z",
        "body": "Okay the issue has been resolved thank you."
      }
    ]
  },
  {
    "number": 18958,
    "title": "error conecting to bingx code:100204",
    "created_at": "2023-08-20T14:41:40Z",
    "closed_at": "2023-09-18T16:27:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18958",
    "body": "### Operating System\n\nwindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.08\n\n### Description\n\nHi\r\n\r\nI am using freqtrade as a trading bot that uses ccxt and bingx as exchange but I see this error on the console when running the bot :\r\n\r\nfreqtrade.exchange.common - WARNING - _async_get_candle_history() returned exception: \"Could not fetch historical candle (OHLCV) data for pair BTC/USDT due to ExchangeError. Message: bingx {\"code\":100204,\"msg\":\"\",\"timestamp\":1692542166362}\". Retrying still for 4 times.\r\n\r\nI am not a technical person and I need to know if this problem is from your side or exchange. \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18958/comments",
    "author": "simons1010",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-21T15:37:04Z",
        "body": "Hello @simons1010, \r\nCan you pinpoint the exact ccxt call freqtrade is doing here?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-18T16:27:01Z",
        "body": "Hello again @simons1010, I reached out to Bingx, and they said that if you're getting that error it means that there is not available kline data for the provided timestamp. \r\n"
      }
    ]
  },
  {
    "number": 18893,
    "title": "AttributeError: 'binance' object has no attribute 'fapiPrivate_get_positionside_dual'",
    "created_at": "2023-08-15T15:45:53Z",
    "closed_at": "2023-08-17T10:00:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18893",
    "body": "### Operating System\r\n\r\nubuntu\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\ninstalled ccxt-4.0.61\r\n\r\n### Description\r\n\r\nAttributeError: 'binance' object has no attribute 'fapiPrivate_get_positionside_dual'\r\n\r\n### Code\r\n\r\n```\r\n  response = self._exchange.fapiPrivate_get_positionside_dual()\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18893/comments",
    "author": "netsesame",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-15T17:27:01Z",
        "body": "Hello @netsesame,\r\nCan you try instead `fapiprivate_get_positionside_dual` or `fapiPrivateGetPositionSideDual`? For some reason the snake_case version is not breaking the `private` part. "
      },
      {
        "user": "netsesame",
        "created_at": "2023-08-16T14:54:09Z",
        "body": "Sure, I can try using fapiprivate_get_positionside_dual or fapiPrivateGetPositionSideDualinstead of fapiPrivate_get_positionside_dual.  I will make the necessary changes and see if it resolves the issue. Thank you for your suggestion!\"@carlosmiei"
      },
      {
        "user": "netsesame",
        "created_at": "2023-08-16T14:59:56Z",
        "body": "I copied it from line 126 of ccxt/examples/py/binance-futures-margin.py.After making the modification, it is now working properly. Thank you for your assistance."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-17T10:01:24Z",
        "body": "@netsesame you're welcome"
      }
    ]
  },
  {
    "number": 18863,
    "title": "OKX fetchTickers() has inconsistent results as if it's dropping a return value",
    "created_at": "2023-08-11T15:29:29Z",
    "closed_at": "2023-08-14T09:26:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18863",
    "body": "### Operating System\n\nUbuntu\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n3.1.55\n\n### Description\n\n`fetchTickers()` for OKX has inconsistent return.  Looks like return values from the underlying API may not be built properly.\r\n\r\nFor example, calling fetchTickers with 'BTC/USDT' works and returns the following as expected:\r\n\r\n```\r\n(Pdb) exch.fetchTickers(['BTC/USDT'])\r\n{'BTC/USDT': {'symbol': 'BTC/USDT', 'timestamp': 1691767121810, 'datetime': '2023-08-11T15:18:41.810Z', 'high': 29566.4, 'low': 29330.2, 'bid': 29368.0, 'bidVolume': 2.70161627, 'ask': 29368.1, 'askVolume': 0.54686298, 'vwap': 29433.402542854976, 'open': 29468.2, 'close': 29368.0, 'last': 29368.0, 'previousClose': None, 'change': -100.2, 'percentage': -0.3400275551272218, 'average': 29418.1, 'baseVolume': 4472.92938498, 'quoteVolume': 131653531.13388106, 'info': {'instType': 'SPOT', 'instId': 'BTC-USDT', 'last': '29368', 'lastSz': '0.07067', 'askPx': '29368.1', 'askSz': '0.54686298', 'bidPx': '29368', 'bidSz': '2.70161627', 'open24h': '29468.2', 'high24h': '29566.4', 'low24h': '29330.2', 'volCcy24h': '131653531.133881069', 'vol24h': '4472.92938498', 'ts': '1691767121810', 'sodUtc0': '29455.3', 'sodUtc8': '29467.1'}}}\r\n```\r\n\r\nAlso, calling fetchTickers with 'BTC//USDT:USDT' (the swap pair) works and returns the following:\r\n\r\n```\r\n(Pdb) exch.fetchTickers(['BTC/USDT:USDT'])\r\n{'BTC/USDT:USDT': {'symbol': 'BTC/USDT:USDT', 'timestamp': 1691767112311, 'datetime': '2023-08-11T15:18:32.311Z', 'high': 29569.0, 'low': 29323.0, 'bid': 29368.0, 'bidVolume': 144.0, 'ask': 29368.1, 'askVolume': 2353.0, 'vwap': None, 'open': 29469.9, 'close': 29368.1, 'last': 29368.1, 'previousClose': None, 'change': -101.8, 'percentage': -0.3454372088130601, 'average': 29419.0, 'baseVolume': 6438829.0, 'quoteVolume': None, 'info': {'instType': 'SWAP', 'instId': 'BTC-USDT-SWAP', 'last': '29368.1', 'lastSz': '20', 'askPx': '29368.1', 'askSz': '2353', 'bidPx': '29368', 'bidSz': '144', 'open24h': '29469.9', 'high24h': '29569', 'low24h': '29323', 'volCcy24h': '64388.29', 'vol24h': '6438829', 'ts': '1691767112311', 'sodUtc0': '29459.6', 'sodUtc8': '29468'}}}\r\n```\r\n\r\nHowever, calling it with both you'll get inconsistent results where only the first pair in your list gets returned:\r\n\r\n```\r\nPdb) t2 = exch.fetchTickers(['BTC/USDT', 'BTC/USDT:USDT'])\r\n(Pdb) t2\r\n{'BTC/USDT': {'symbol': 'BTC/USDT', 'timestamp': 1691766942911, 'datetime': '2023-08-11T15:15:42.911Z', 'high': 29566.4, 'low': 29330.2, 'bid': 29390.8, 'bidVolume': 0.38653069, 'ask': 29390.9, 'askVolume': 5.13332258, 'vwap': 29434.351503255955, 'open': 29459.7, 'close': 29390.8, 'last': 29390.8, 'previousClose': None, 'change': -68.9, 'percentage': -0.2338788242921686, 'average': 29425.25, 'baseVolume': 4388.88999199, 'quoteVolume': 129184130.73335588, 'info': {'instType': 'SPOT', 'instId': 'BTC-USDT', 'last': '29390.8', 'lastSz': '0.00055847', 'askPx': '29390.9', 'askSz': '5.13332258', 'bidPx': '29390.8', 'bidSz': '0.38653069', 'open24h': '29459.7', 'high24h': '29566.4', 'low24h': '29330.2', 'volCcy24h': '129184130.733355878', 'vol24h': '4388.88999199', 'ts': '1691766942911', 'sodUtc0': '29455.3', 'sodUtc8': '29467.1'}}}\r\n```\r\n\r\nor,\r\n\r\n```\r\n(Pdb) t2 = exch.fetchTickers(['BTC/USDT:USDT', 'BTC/USDT'])                                                                                                                                                                                                                                \r\n(Pdb) t2\r\n{'BTC/USDT:USDT': {'symbol': 'BTC/USDT:USDT', 'timestamp': 1691767137326, 'datetime': '2023-08-11T15:18:57.326Z', 'high': 29569.0, 'low': 29323.0, 'bid': 29377.9, 'bidVolume': 821.0, 'ask': 29378.0, 'askVolume': 882.0, 'vwap': None, 'open': 29469.9, 'close': 29378.0, 'last': 29378.0, 'previousClose': None, 'change': -91.9, 'percentage': -0.3118436099206308, 'average': 29423.95, 'baseVolume': 6454794.0, 'quoteVolume': None, 'info': {'instType': 'SWAP', 'instId': 'BTC-USDT-SWAP', 'last': '29378', 'lastSz': '271', 'askPx': '29378', 'askSz': '882', 'bidPx': '29377.9', 'bidSz': '821', 'open24h': '29469.9', 'high24h': '29569', 'low24h': '29323', 'volCcy24h': '64547.94', 'vol24h': '6454794', 'ts': '1691767137326', 'sodUtc0': '29459.6', 'sodUtc8': '29468'}}}\r\n```\r\n\r\n\r\n\n\n### Code\n\n```\r\nimport ccxt\r\n\r\nokx = ccxt.okx()\r\nokx.loadMarkets()\r\n\r\n\r\nokx.fetchTickers(['BTC/USDT'])    # correct\r\nokx.fetchTickers(['BTC/USDT:USDT'])    # correct\r\nokx.fetchTickers(['BTC/USDT', 'BTC/USDT:USDT'])    # only BTC/USDT\r\nokx.fetchTickers(['BTC/USDT:USDT', 'BTC/USDT'])    # only BTC/USDT:USDT\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18863/comments",
    "author": "hedeer-showk",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-13T15:52:59Z",
        "body": "Hello @hedeer-showk, \r\nThat happens because we can only fetch one type at a time (spot tickers or swap tickers or futures or options) so if you provide an array with multiple different types it will default to the first one. "
      },
      {
        "user": "hedeer-showk",
        "created_at": "2023-08-14T15:10:15Z",
        "body": "> Hello @hedeer-showk, That happens because we can only fetch one type at a time (spot tickers or swap tickers or futures or options) so if you provide an array with multiple different types it will default to the first one.\r\n\r\nSorry, thought I wrote something but don't see it.  Thanks for the feedback.  \r\n\r\nDoes it make sense to open a PR to have it handle multiple types at once in the code or is this how you want it to work by design?"
      }
    ]
  },
  {
    "number": 18857,
    "title": "Bybit stop limit orders cannot be canceled",
    "created_at": "2023-08-11T09:05:59Z",
    "closed_at": "2023-08-11T14:12:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18857",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.57\n\n### Description\n\nWhen placing stop loss orders, using the CCXT unified method, on Bybit spot market (using a Unified Bybit account), it is not possible to cancel those orders. As an example, this is what I did:\r\n\r\n`await exchange.createOrder('BTC/USDT', 'limit', 'sell', 0.001, 28500, { stopLossPrice: 29000 });`\r\n\r\nWhen using `exchange.cancelAllOrders('BTC/USDT')`, the order is not canceled. No exception is thrown, but I still see the open order on the exchange.\r\n\r\nWhen using `exchange.cancelOrder(<id>, 'BTC/USDT')`, using the id that is returned when creating the order, does not work either. In that case I get the following exception:\r\n\r\nOrderNotFound: bybit {\"retCode\":170213,\"retMsg\":\"Order does not exist.\",\"result\":{},\"retExtInfo\":{},\"time\":1691743905604}\r\n    at bybit.throwExactlyMatchedException (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:3087:19)\r\n    at bybit.handleErrors (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:9161:18)\r\n    at C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:766:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async bybit.fetch2 (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2666:16)\r\n    at async bybit.request (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2669:16)\r\n    at async bybit.cancelUnifiedAccountOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4690:26)\r\n    at async bybit.cancelOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4874:20)\r\n\r\n\r\nAm I doing something wrong, or is this a bug?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18857/comments",
    "author": "hodlerhacks",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:36:07Z",
        "body": "Hello @hodlerhacks,\r\nHave you tried to provide `stop:true` inside `params`? \r\n\r\nExample:\r\n```Python\r\nexchange.cancelAllOrders('BTC/USDT', {'stop': true})\r\n```\r\n"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-08-11T13:48:25Z",
        "body": "Oh wow, that solves it indeed, thanks! :-)\r\n\r\nI couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:57:32Z",
        "body": "> I couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)\r\n\r\n@hodlerhacks Some exchanges have different endpoints to handle stop/trigger orders, so the `stop` parameter tells ccxt to use that endpoint instead, and yes it is unified across exchanges so you should be able to use it with other exchanges as well.\r\n\r\nAdditionally, we will try to improve our documentation, thanks for letting us know. \r\n\r\n"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-08-11T13:59:43Z",
        "body": "Thanks for clarifying and your quick response, appreciate it!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T14:12:04Z",
        "body": "@hodlerhacks no problem, feel free to reach out any time."
      }
    ]
  },
  {
    "number": 18768,
    "title": "Binanceusm testnet error on fetch_positions ",
    "created_at": "2023-08-03T16:22:24Z",
    "closed_at": "2023-08-09T20:32:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18768",
    "body": "### Operating System\n\nMac M1\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n3.1.60\n\n### Description\n\nReceived exchange error on binanceusdm (testnet):\r\nExchangeError('binanceusdm {\\\"code\\\":-5000,\\\"msg\\\":\\\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\\\"}')\n\n### Code\n\n```\r\nawait exchange.fetch_open_orders(symbol)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18768/comments",
    "author": "idan-ben-ami",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-08-04T01:25:00Z",
        "body": "Hi @idan-ben-ami \r\n\r\nWe already update fapi to v2, would you like to upgrade ccxt?\r\n\r\nLet me know if you have other issues."
      },
      {
        "user": "FelipeJz",
        "created_at": "2023-08-08T15:38:56Z",
        "body": "I'm running the latest version with the same issue"
      },
      {
        "user": "Algo-Tradings",
        "created_at": "2023-08-09T14:55:58Z",
        "body": "> I'm running the latest version with the same issue\r\n\r\nI was with the same problem. \r\nAnyway after `pip install ccxt --force`, I reinstalled the lib and it's working fine now.\r\nHope it helps!"
      },
      {
        "user": "FelipeJz",
        "created_at": "2023-08-09T15:07:12Z",
        "body": "Sorry, i'm running nodejs, version 4.0.3. I deleted the node_modules folder and reinstalled, but the issue still remains :("
      },
      {
        "user": "Algo-Tradings",
        "created_at": "2023-08-09T18:26:19Z",
        "body": "ccxt need resources from other modules that may causing conflict. I guess you have npm installed, so instead of deleting ccxt folder try:\r\n`npm uninstall -g ccxt`"
      },
      {
        "user": "FelipeJz",
        "created_at": "2023-08-09T19:12:32Z",
        "body": "That did not work, but crazy enough, installing @latest, instead of the specific version updated other packages and that worked. Thank you for pointing me in the right direction! Cheers"
      },
      {
        "user": "idan-ben-ami",
        "created_at": "2023-08-09T20:32:58Z",
        "body": "I'm sorry, my bad.\r\nI managed to update to CCXT v4.0.* (uninstalled and reinstalled), and it all works well now.\r\nThanks a lot!\r\n\r\n(Using poetry remove ccxt && poetry add ccxt - instead of poetry update ccxt)"
      },
      {
        "user": "LAGD1979",
        "created_at": "2023-08-14T02:31:53Z",
        "body": "Hi!\r\ni have the same issue, i already upgrade ccxt version, but i'm getting the same error message:\r\nAPIError(code=-5000): GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\r\nI printed the versión: CCXT Version: 4.0.58"
      }
    ]
  },
  {
    "number": 18762,
    "title": "Need advice for getting Binance a group of symbols data",
    "created_at": "2023-08-03T10:40:47Z",
    "closed_at": "2023-08-16T06:30:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18762",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.49\n\n### Description\n\nHi, \r\nI want to write some JavaScript to get about 20 to 30 symbols OHLC data, like: BTC/USDT; ETH/USDT …\r\nCCXT has the fetchOrderbook function, but this function will fetch data for only one pair, like: BTC/USDT.\r\nIf I want to fetch such data for 20 pairs, what I should do: I use a loop to fetch each pair’s order book?\r\nI want to keep the JS code running to fetch such data every minute, but I don’t know if this will break the rate limit.\r\nI see CCXT has also websocket data for Binance, but I don’t know if I can use websocket to get 20 or 30 pairs data, if it is possible, show me some code examples.\r\nThanks,\n\n### Code\n\n```\r\nconst orderbook = await exchange.fetchOrderBook(pair1);\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18762/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-03T10:47:41Z",
        "body": "Hello @zydjohnHotmail,\r\nRight now, yes you have to make 1 request per symbol, but that does not mean you have to do it sequentially, you can parallelize your requests. Regarding the RateLimit question, CCXT has a builtin RateLimiter so unless you're fetching a huge amount of data it should be ok. If you see that the limits are being crossed too many times you can also rotate your requests through different proxies to avoid getting limited. \r\n\r\nExample:\r\n\r\n```Javascript\r\n    const ohlcv = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT'] // your symbols here\r\n    const promises = symbols.map (symbol => ohlcv.fetchOHLCV (symbol, '5m'))\r\n    const result = await Promise.all (promises)\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        const symbol = symbols[i]\r\n        const ohlcv = result[i]\r\n        console.log (symbol, ohlcv.length, 'candles')\r\n    }\r\n```\r\n\r\n"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2023-08-04T12:22:29Z",
        "body": "Hi,  thank you very much for your code, I tried to use your code, the following is my D:\\nodejs\\CCXT>type BinanceOHLCV.js\r\n'use strict';\r\nconst ccxt = require('ccxt');\r\n\r\n(async function () {\r\n    console.log(ccxt.version)\r\n    const ohlcv = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT']\r\n    const promises = symbols.map (symbol => ohlcv.fetchOHLCV (symbol, '5m'))\r\n    const result = await Promise.all (promises)\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        const symbol = symbols[i]\r\n        const ohlcv = result[i]\r\n        console.log (symbol, ohlcv.length, 'candles')\r\n    }\r\n})();\r\n\r\nWhen I run this code, I got the output: code: D:\\nodejs\\CCXT>node BinanceOHLCV.js\r\n4.0.49\r\nBTC/USDT 500 candles\r\nETH/BTC 500 candles\r\nETH/USDT 500 candles\r\nLTC/BTC 500 candles\r\nLTC/USDT 500 candles\r\n=> The code is working, but the data is not what I want: I want to show the price values, like: open, high, low and close.  How can I change the code to get the data I want.  By the way, how can I run this code, so I will get all the data every minute or every 5 minutes?\r\nThanks,"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-04T13:11:55Z",
        "body": "@zydjohnHotmail I was printing the length only but you can print the entire response.\r\nIf you want to fetch it every X minutes you can put it inside a while True, something like this:\r\n\r\n```Javascript\r\n    const binance = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT'] // your symbols here\r\n    const sleepTime = 60000 // sleep time between requests in milliseconds currently 1 min\r\n    while (true) {\r\n        const promises = symbols.map (symbol => binance.fetchOHLCV (symbol, '5m'))\r\n        const result = await Promise.all (promises)\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            const symbol = symbols[i]\r\n            const ohlcv = result[i]\r\n            console.log(symbol, ohlcv)\r\n        }\r\n        await binance.sleep(sleepTime)\r\n    }\r\n```\r\n"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2023-08-16T06:30:48Z",
        "body": "OK, thanks!"
      }
    ]
  },
  {
    "number": 18708,
    "title": "ccxt.fechDepositWithdrawFees has a bug",
    "created_at": "2023-07-31T04:24:56Z",
    "closed_at": "2023-07-31T15:11:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18708",
    "body": "### Operating System\n\ndebian linux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.0.43\n\n### Description\n\nI had upgrade to python, ccxt 4.0.43, but when run the bitfinex exhange=fetchDepositeWithdrawFees(), it prompt the error as below: Traceback (most recent call last):\r\nFile \"/usr/lib/python3.9/threading.py\", line 954, in _bootstrap_inner\r\nself.run()\r\nFile \"/usr/lib/python3.9/threading.py\", line 892, in run\r\nself._target(*self._args, **self._kwargs)\r\nFile \"/root/ccxt/app.py\", line 41, in run_arbitrage_analysis\r\nccxt_not_supported = ccxtFunc.calculate_analysis_arbitrage_opportunities(markets_set, symbols_set, currencies_set, stop_event)\r\nFile \"/root/ccxt/ccxtFunc.py\", line 266, in calculate_analysis_arbitrage_opportunities\r\nbase_currency_protocols = load_withdraw_with_error_handling(markets_set[pro_exchange], base_currency)\r\nFile \"/root/ccxt/ccxtFunc.py\", line 74, in load_withdraw_with_error_handling\r\nbase_currency_protocols = exchange.fetchDepositWithdrawFees(base_currency)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/bitfinex.py\", line 456, in fetch_deposit_withdraw_fees\r\nresponse = self.privatePostAccountFees(params)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/base/types.py\", line 26, in unbound_method\r\nreturn _self.request(self.path, self.api, self.method, params, config=self.config)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/base/exchange.py\", line 2994, in request\r\nreturn self.fetch2(path, api, method, params, headers, body, config)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/base/exchange.py\", line 2990, in fetch2\r\nrequest = self.sign(path, api, method, params, headers, body)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/bitfinex.py\", line 1538, in sign\r\nsignature = self.hmac(payload, secret, hashlib.sha384)\r\nFile \"/usr/local/lib/python3.9/dist-packages/ccxt/base/exchange.py\", line 1235, in hmac\r\nh = hmac.new(secret, request, algorithm)\r\nFile \"/usr/lib/python3.9/hmac.py\", line 170, in new\r\nreturn HMAC(key, msg, digestmod)\r\nFile \"/usr/lib/python3.9/hmac.py\", line 93, in init\r\nself.update(msg)\r\nFile \"/usr/lib/python3.9/hmac.py\", line 113, in update\r\nself._inner.update(msg)\r\nTypeError: Unicode-objects must be encoded before hashing\n\n### Code\n\n```\r\n  \r\n\r\n```\r\ndef load_withdraw_with_error_handling(exchange, base_currency):\r\n    try:\r\n        base_currency_protocols = exchange.fetchDepositWithdrawFees(base_currency)\r\n        # pprint.pprint(f'base_currency_protocols-{exchange.id}-{base_currency}:', stream=sys.stdout)\r\n        # pprint.pprint(base_currency_protocols, stream=sys.stdout)\r\n        return base_currency_protocols\r\n    except ccxt.NotSupported:\r\n        # Handle the case when fetchDepositWithdrawFees() is not supported\r\n        ccxt_not_supported.append(exchange.id)\r\n        if exchange.id == 'bitcoincom':\r\n            pass\r\n        else:\r\n            logger.error(f\"获取交易所 {exchange.id} 的 {base_currency} protocol ccxt.NotSupported\")\r\n        # base_currency_protocols = fetch_withdraw_protocol(markets_set[pro_exchange], base_currency)\r\n        return None\r\n    except Exception as e:\r\n        if exchange.id == 'bitfinex':\r\n            import traceback\r\n            traceback.print_exc()\r\n            raise\r\n        logger.error(f\"Failed to load withdraw info for {exchange.id}: {e}\")\r\n        return None",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18708/comments",
    "author": "joyngq",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-31T15:11:29Z",
        "body": "Hello @joyngq, the fix was only released in 4.0.44, please upgrade your ccxt version and try again."
      }
    ]
  },
  {
    "number": 18702,
    "title": "bingx async historical data error",
    "created_at": "2023-07-29T18:51:41Z",
    "closed_at": "2023-07-30T20:51:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18702",
    "body": "### Operating System\n\nlinux ubuntu 22.04\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.0.43\n\n### Description\n\nwhen run a strategy thts needs hystorical data or when download data in freqtrade its happened,\r\nthe error is : Async code raised an exception: OperationalException('Exchange BingX does not support fetching historical candle (OHLCV) data\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18702/comments",
    "author": "meysamrn",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-30T14:04:04Z",
        "body": "Hello @meysamrn,\r\nThat error does not seem to come from CCXT itself. Still, maybe freqtrade is protecting the code from calling `fetchOHLCV` with a spot symbol because bingx does provide that information through the API, right now, you can only fetch candles for derivative markets at bingx."
      }
    ]
  },
  {
    "number": 18683,
    "title": "BitGet Fetch_order error",
    "created_at": "2023-07-27T19:37:49Z",
    "closed_at": "2023-08-14T09:27:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18683",
    "body": "0",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18683/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-07-27T19:51:41Z",
        "body": "Can you provide the code that produces this errror please? Instead of just the output?"
      },
      {
        "user": "ZETECdev",
        "created_at": "2023-07-27T20:04:57Z",
        "body": "```python\r\nexch = ccxt.bitget(({'apiKey': apikey, 'secret': secretkey, 'password': db[user]['passphrase'], 'enableRateLimit': True}))\r\nsl_check = exch.fetch_order('604833074693799936', ticker, params={'clientOrderId': 'e847386590ce4dBC6745faf0bffe96a9', 'stop': True})\r\n\r\nsl check error bitget {\"code\":\"40109\",\"msg\":\"The data of the order cannot be found, please confirm the order number\",\"requestTime\":1690486263882,\"data\":null}\r\n```\r\none time each 5 iterations aprox works, usually error\r\n\r\n"
      },
      {
        "user": "ZETECdev",
        "created_at": "2023-07-27T21:31:10Z",
        "body": "no, now never... straign... "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-28T10:02:34Z",
        "body": "Hello @ZetZ1, CCXT requests are built deterministically so if sometimes work and sometimes don't most likely it is an issue with the exchange's API. "
      },
      {
        "user": "samgermain",
        "created_at": "2023-08-11T23:06:09Z",
        "body": "@ZetZ1 are you still experiencing any issues?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-14T09:27:25Z",
        "body": "@ZetZ1 will close this issue, feel free to reopen it if needed"
      },
      {
        "user": "ZETECdev",
        "created_at": "2023-10-13T21:32:00Z",
        "body": "after these issues, now never find the order if is a triggered / stop order\r\n\r\nMay a change from bitget api? i see than is added new apiparameters but its confused"
      }
    ]
  },
  {
    "number": 18676,
    "title": "In the PHP example, the quoinex file cannot be found",
    "created_at": "2023-07-27T08:13:52Z",
    "closed_at": "2023-07-28T08:31:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18676",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n4.0.39\n\n### Description\n\nI tried to write the code according to the example in the document, but the prompt was \"cannot find the ccxt quoinex class\", and I couldn't find the quoinex.php file in the ccxt's PHP directory. Is it true that the quoinex file has been deleted long ago?\n\n### Code\n\n```\r\n// PHP\r\n\r\ninclude 'ccxt.php'\r\n\r\n// any time\r\n$quoinex = new \\ccxt\\quoinex ();\r\n$quoinex->apiKey = 'YOUR_QUOINE_API_KEY';\r\n$quoinex->secret = 'YOUR_QUOINE_SECRET_KEY';\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18676/comments",
    "author": "dgkerry",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-27T16:20:02Z",
        "body": "Hello @dgkerry, yes unfortunately quoinex was delisted a long time ago. "
      }
    ]
  },
  {
    "number": 18649,
    "title": "bitstamp timeframes wrong",
    "created_at": "2023-07-25T10:21:06Z",
    "closed_at": "2023-07-25T14:43:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18649",
    "body": "### Operating System\n\nMac\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n^3.1.58\n\n### Description\n\nnew ccxt.bitstamp().timeframes listed as : \r\n\r\n{\r\n  '1m': '60',\r\n  '3m': '180',\r\n  '5m': '300',\r\n  '15m': '900',\r\n  '30m': '1800',\r\n  '1h': '3600',\r\n  '2h': '7200',\r\n  '4h': '14400',\r\n  '6h': '21600',\r\n  '12h': '43200',\r\n  '1d': '86400',\r\n  '1w': '259200'\r\n}\r\n\r\nOddly 1w is actually only 3 days, so don't know why it's represented as 1w.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18649/comments",
    "author": "patrick-geyer-21",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-25T14:09:35Z",
        "body": "Hello @patrick-geyer-21, \r\nThanks for letting us know, we will fix it as soon as possible"
      }
    ]
  },
  {
    "number": 18633,
    "title": "Bybit.fetch_tickers() return data with colon",
    "created_at": "2023-07-24T07:26:50Z",
    "closed_at": "2023-07-26T15:12:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18633",
    "body": "### Operating System\n\nWindows 10 \n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n2.8.31\n\n### Description\n\nWhen I call fetch_tickers() function I get something like '10000LADYS/USDT:USDT':{} And this is rather strange considering that bybit.markets() will return the data in a different format, which is my preferred ('BTC/USDT':{} ). I tried to change the params and put a spot there, etc., but this does not help me. I checked the bybit documentation and didn't find anything there. Perhaps you can advise me. Because such a difference in the returned data from only 1 exchange interferes very much\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18633/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-24T09:27:29Z",
        "body": "Hello @AlwxDavydov,\r\n\r\nFirst and foremost, I noticed that you have a pretty outdated ccxt version I would suggest upgrading it because we did a lot of meaningful updates in the meantime.\r\n\r\nRegarding your question, bybit will return the swap tickers by default if no symbol/type is provided but you can easily provide a type in params if you want to retrieve spot tickers only, example:\r\n\r\n```Python\r\ntickers = await bybit.fetch_tickers(params = {'type':'spot'})\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-24T14:50:43Z",
        "body": "@carlosmiei if you are not against, for cleanup purposes I'll close this issue, as your response covers it correctly.\r\n@AlwxDavydov if you still face any issue, feel free to post a follow-up and reopen the issue, so we could answer further."
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-24T17:04:02Z",
        "body": "@carlosmiei Thanks, your answer helped but not completely. As it turned out, not all tokens return by params = {'type':'spot'}), just like 1INCH, it will shown only if I use code with deafult params and looked like '1INCH/USDT:USDT. To be honest, I don't understand why. Initially, I thought that spot is only spot pairs, and default is those pairs that include margin trading, but no. For example WLD/USDC will be returned by params = spot, but in includes margin. So when I call a fetch_tickers() I want to got all pairs and I want it in some format like got all other exchanges.(without :USDT) Moreover I check type of some coins and both 1INCH and CAPO is type:spot but first is shown only without params second is shown only with params = {'type':'spot'}."
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T10:58:54Z",
        "body": "@ttodua @carlosmiei  The problem was reopened but for 2 days there is no answer. Do I need to write another topic to get an answer? I'm sorry if I'm asking something stupid, I just want an answer and I don't understand if it is visible at all and why there is no answer."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T11:10:27Z",
        "body": "@AlwxDavydov Sorry don't know exactly why was re-opened. Have you updated your ccxt version as suggested?"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T11:12:05Z",
        "body": "@carlosmiei Yes, the old version was added by autocomplete. I just didn't notice it"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T11:16:46Z",
        "body": "@carlosmiei I'll even add the problem. The fact is that len(bybit.markets) will return 669, but fetch_tickers(\r\n            params={'type': 'spot'}) will return around 280, and  fetch_tickers() will return around 250 pairs. So bybit.markets will include some derivatives and there are around 550 real spot markets, but they can only be obtained by different calls (with fetch_tickers(params={'type': 'spot'}) and without this pararms). I really hope I was able to explain well, but if you do not understand, please tell me and I will try again"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T11:55:45Z",
        "body": "@AlwxDavydov Sorry I still don't get what the problem is here.\r\n\r\n> The fact is that len(bybit.markets) will return 669,\r\n\r\nyes, bybit loads all markets buy default now (spot, swap, futures, options)\r\n\r\n> fetch_tickers(\r\nparams={'type': 'spot'}) will return around 280,\r\n\r\nThat is because only returns spot tickers\r\n\r\n>  fetch_tickers() will return around 250 pairs\r\n\r\nAs explained, by default will return only swap tickers\r\n\r\n\r\n\r\n"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T12:39:32Z",
        "body": "@carlosmiei Once again, I apologize for my stupidity and English. To be clearer, I will explain my task. I get tickers on many exchanges, on all but bybit it will return me all available pairs for spot (what I need) trading. But on bybit, the ticker call needs to be called 2 times to get all the pairs I need. This is annoying, but not such a big problem, the problem is that in spot trading pairs it will return data to me in a different format, namely the last coin and the colon before it(\"BTC/USDT:USDT\"). And I'm rather asking for advice on how I can get my 550 spot pairs (after all, their real number is about it) in the same format, without the last character with a colon."
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-26T13:07:33Z",
        "body": "@AlwxDavydov please post your ccxt version.\r\nalso, tell us an example, which spot symbol that you are missing from bybit response when doing `fetch_tickers (None, {'type':'spot'})`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T13:12:02Z",
        "body": "@AlwxDavydov Yeah the problem might be with the ccxt version, you might have installed a buggy outdated one. \r\n\r\nBtw if you see `:USDT` in the symbol that means it is a swap/derivative market not a spot one.  \r\n\r\nAs I said, I tested it on the latest version of ccxt and by doing `fetch_tickers(\r\nparams={'type': 'spot'})` I only get spot markets (with the symbol BASE/QUOTE)"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T15:11:58Z",
        "body": "@ttodua @carlosmiei I completely reinstalled ccxt and all is well now. Apparently I have some kind of bug. Thank you very much for your help"
      }
    ]
  },
  {
    "number": 18627,
    "title": "Bitforex get Wallet amounts and transfer between wallet and spot account",
    "created_at": "2023-07-23T14:10:28Z",
    "closed_at": "2023-07-24T14:54:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18627",
    "body": "### ؜\n\nOS: MacOs\r\nProgramming Language: python\r\nccxt version: 4.0.29\r\n\r\nHi there, \r\n\r\nI'm trying to work with the Bitforex Exchange and facing a problem, that if i withdraw an fund to Bitforex it lands into the Wallet account. To be able to trade I need to transfer from wallet to spot. But somehow I do not able to check the following parameters:\r\n- Wallet balance (calling the method bitforexExchange.fetch_balance() return the balance of the spot account)\r\n- Transfer from Wallet to spot account\r\n\r\nAre the methods for this not implemented yet?\r\n\r\nKind regards\r\nAnton",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18627/comments",
    "author": "AntonDe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-24T08:46:35Z",
        "body": "Hello @AntonDe,\r\nRight now those functionalities are not available at bitforex because we didn't find a suitable endpoint able to provide them. "
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-24T14:54:31Z",
        "body": "I'll close the issue @AntonDe , if you notice any issue or have questions, feel free to post a follow-up."
      }
    ]
  },
  {
    "number": 18621,
    "title": "Create a market buy order on binance",
    "created_at": "2023-07-22T13:57:14Z",
    "closed_at": "2023-07-27T03:37:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18621",
    "body": "### ؜\r\n\r\nHello, \r\n\r\nPlease share a worked code on python how to create a buy marked order on a binance.  How to pass parameter a params?\r\n\r\n\r\n2023-07-22 08:00:06 :: WARNING  :: Exchange.create_order() takes 6 positional arguments but 7 were given          \r\n\r\n```\r\n                    quoteOrderQtyMarketAllowed = market_info.get('quoteOrderQtyMarketAllowed', False)\r\n                    priceIsRequired = market_info.get('priceIsRequired', False)\r\n\r\n                    params = {}\r\n                    if quoteOrderQtyMarketAllowed:\r\n                        params = {'quoteOrderQty': order_amount} \r\n                        order_amount = None\r\n\r\n                    if not priceIsRequired:\r\n                        current_price = None\r\n\r\n                    order = await self.exchange.create_order(self.symbol, 'market', self.side, order_amount, current_price)\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18621/comments",
    "author": "YuriyTigiev",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-23T10:21:13Z",
        "body": "On the code itself, you're missing the 6th argument (`params`) for `exchange.create_order()`:\r\n\r\n```Python\r\n                   quoteOrderQtyMarketAllowed = market_info.get('quoteOrderQtyMarketAllowed', False)\r\n                    priceIsRequired = market_info.get('priceIsRequired', False)\r\n\r\n                    params = {}\r\n                    if quoteOrderQtyMarketAllowed:\r\n                        params = {'quoteOrderQty': order_amount} \r\n                        order_amount = None\r\n\r\n                    if not priceIsRequired:\r\n                        current_price = None\r\n\r\n                    order = await self.exchange.create_order(self.symbol, 'market', self.side, order_amount, current_price, params)\r\n```\r\n\r\nAs for the error you're posting, that's coming from another file, or a different line:\r\n\r\n```\r\n2023-07-22 08:00:06 :: WARNING :: Exchange.create_order() takes 6 positional arguments but 7 were given\r\n```\r\n\r\nIn your code above you're only passing 5 params, but not 7. That just means there's a mismatch of the error with the actual line of code. It could be explained by some confusion or misconfiguration of your scripts, like, launching one file instead of another, not saving your files after edits and so on. Or there's more code in the file that is now shown in your snippet."
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2023-07-24T03:41:39Z",
        "body": "Hello, \r\n\r\nI have tried three different approaches to pass the parameter \"params.\" Unfortunately, in all three cases, I encountered an error: \"Exchange.create_order() takes 6 positional arguments but 7 were given\" in the TypeScript code (Deno) for the latest library for the Binance exchange. It appears that I accidentally forgot to include the \"params\" parameter in my previous post.\r\n\r\n\r\n```\r\n#1\r\nparams = {}\r\nparams['quoteOrderQty'] = order_amount\r\norder = await self.exchange.create_order(self.symbol, 'market', self.side, order_amount, current_price, params)\r\n```\r\n\r\n\r\n\r\n```\r\n#2\r\nparams = {'quoteOrderQty': order_amount} \r\norder = await self.exchange.create_order(self.symbol, 'market', self.side, order_amount, current_price, params)\r\n```\r\n\r\n\r\n```\r\n#3\r\nparams = {'quoteOrderQty': order_amount} \r\norder = await self.exchange.create_order(self.symbol, 'market', self.side, order_amount, current_price, params=params )\r\n```\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "AdolfoVillalobos",
        "created_at": "2023-07-24T20:39:56Z",
        "body": "Hi,\r\n\r\nWhenever I have experienced similar issues in the past, in which the signature of the function seems to be correctly being satisfied, it often relates to one of: (1) A missing reference to \"self\", self being a class created by you, or (2) A redundant reference to \"self\".  \r\n\r\nIn any case, can you should provide a more complete example in order to assess in which section of the code is the reference failing to satisfy expectations? \r\n\r\n---\r\n\r\nIf the previous fails, the most simple explanation might be that you installed a version of ccxt that does not support the number of parameters given. \r\n\r\n---\r\n\r\nFinally: Did you tried using keyworded values for all the parameters, and not just for params?. it is posible that there is a conflict with an optional parameter"
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-26T19:13:27Z",
        "body": "@YuriyTigiev sorry, I kicked in here in incorrect moment while looking at your last comment and I forgot that you used python, not js. but still, the code that you share does not seem to be broken with regard to what you say. you might changing name of your local variable name `params` into smth other and try again, if still fails, repost here a complete snippet (minimal reproducible example) so we could test the whole script on our side."
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2023-07-27T03:35:01Z",
        "body": "Sorry. My bad. I forgot about this part of code.\r\n\r\n```\r\n    @ async_retry()\r\n    async def create_order(self, symbol: str, order_type: str,\r\n                           side: str, amount: float, price: float) -> dict:\r\n        return await self.exchange.create_order(symbol=symbol, type=order_type,\r\n                                                side=side, amount=amount, price=price)\r\n```"
      }
    ]
  },
  {
    "number": 18618,
    "title": "Phemex fetch order",
    "created_at": "2023-07-22T00:01:51Z",
    "closed_at": "2023-07-22T09:27:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18618",
    "body": "How can feth s order in phemex? A alternative to getch order?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18618/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-22T09:27:29Z",
        "body": "Hello @ZetZ1,\r\n\r\nAt phemex you have a lot of methods to fetch orders (fetchOrder, fetchOrders, fetchOpenedOrders, fetchClosedOrders). "
      }
    ]
  },
  {
    "number": 18617,
    "title": "Bitmart create_order",
    "created_at": "2023-07-22T00:00:31Z",
    "closed_at": "2023-07-22T09:25:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18617",
    "body": "This method will be available ? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18617/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-22T09:25:26Z",
        "body": "Hello again @ZetZ1, have you tried to use CCXT? that method is available at bitmart. "
      }
    ]
  },
  {
    "number": 18616,
    "title": "Bitget Stop market",
    "created_at": "2023-07-21T23:59:45Z",
    "closed_at": "2023-07-24T15:25:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18616",
    "body": "This feature available in a near future?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18616/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-22T09:24:29Z",
        "body": "Hello @ZetZ1, I think you can place stop markets order there as well. You just need to provide type=market and `triggerPrice` inside `params`. "
      },
      {
        "user": "ZETECdev",
        "created_at": "2023-07-22T17:05:28Z",
        "body": "Oh.,.. ok thanks and sorry"
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-24T15:25:23Z",
        "body": "i'll close this, if you have any further notes/issues, let us know anytime"
      }
    ]
  },
  {
    "number": 18615,
    "title": "BingX add fetch positions",
    "created_at": "2023-07-21T23:58:00Z",
    "closed_at": "2023-07-22T09:25:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18615",
    "body": "This available in a near future?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18615/comments",
    "author": "ZETECdev",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-22T09:22:55Z",
        "body": "Hello @ZetZ1 `fetchPositions` is available right now at bingX"
      }
    ]
  },
  {
    "number": 18609,
    "title": "derebit authentication error",
    "created_at": "2023-07-20T18:11:18Z",
    "closed_at": "2023-07-21T08:27:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18609",
    "body": "### Operating System\n\nosx and windows 10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nlast over pipe installed\n\n### Description\n\ni am try use your lib but on the windows 10 and on the osx have at the some error message \r\nccxt.base.errors.AuthenticationError: deribit {\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"invalid_credentials\",\"code\":13004},\"testnet\":false,\"usIn\":1689876278308631,\"usOut\":1689876278308889,\"usDiff\":258}\r\n\r\nall lib last version updated,\r\nmy key and secret good and work.\r\n\r\npublic function your lib good work,but only private not work.\n\n### Code\n\n\r\nimport ccxt\r\nderibit = ccxt.deribit({\r\n    'apiKey': 'xxx',\r\n    'secret': 'xxx',\r\n})\r\n\r\nderibit.verbose = True\r\nprint(deribit.fetch_balance ())",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18609/comments",
    "author": "sadek69",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-20T19:55:46Z",
        "body": "@sadek69 are you using the testnet keys or the production keys?"
      },
      {
        "user": "sadek69",
        "created_at": "2023-07-20T22:44:34Z",
        "body": "i am use test net keys"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-21T08:08:36Z",
        "body": "Hello @sadek69, I just tested the sandbox mode, and everything seems to be working fine, so I would suggest double-checking your API keys, make sure they don't have empty spaces, are not expired, etc\r\n\r\n```\r\n p deribit fetchBalance --sandbox\r\nPython v3.10.9\r\nCCXT v4.0.33\r\nderibit.fetchBalance()\r\n{'BTC': {'free': 98.99598757, 'total': 98.99602114, 'used': 1.678e-05},\r\n 'free': {'BTC': 98.99598757},\r\n 'info': {'available_funds': '98.99598757',\r\n          'available_withdrawal_funds': '98.99598654',\r\n          'balance': '98.99602011',\r\n          'cross_collateral_enabled': False,\r\n          'currency': 'BTC',\r\n          'delta_total': '0.001678',\r\n          'delta_total_map': {'btc_usd': '0.001678289'},\r\n          'deposit_address': 'bcrt1qhe24trh0d34lwh6j5rfmpyr8l9j76g3gey7jgs',\r\n          'equity': '98.99602114',\r\n          'estimated_liquidation_ratio': '0.00001721',\r\n          'estimated_liquidation_ratio_map': {'btc_usd': '0.000017205020192293057'},\r\n          'fee_balance': '0.0',\r\n          'futures_pl': '0.00099132',\r\n          'futures_session_rpl': '0.0',\r\n          'futures_session_upl': '0.00000103',\r\n          'initial_margin': '0.00003357',\r\n          'limits': {'matching_engine': {'burst': '20', 'rate': '5'},\r\n                     'non_matching_engine': {'burst': '100', 'rate': '20'}},\r\n          'maintenance_margin': '0.00001678',\r\n          'margin_balance': '98.99602114',\r\n          'options_delta': '0.0',\r\n          'options_gamma': '0.0',\r\n          'options_gamma_map': {},\r\n          'options_pl': '0.0',\r\n          'options_session_rpl': '0.0',\r\n          'options_session_upl': '0.0',\r\n          'options_theta': '0.0',\r\n          'options_theta_map': {},\r\n          'options_value': '0.0',\r\n          'options_vega': '0.0',\r\n          'options_vega_map': {},\r\n          'portfolio_margining_enabled': False,\r\n          'projected_delta_total': '0.001678',\r\n          'projected_initial_margin': '0.00003357',\r\n          'projected_maintenance_margin': '0.00001678',\r\n          'session_rpl': '0.0',\r\n          'session_upl': '0.00000103',\r\n          'spot_reserve': '0.0',\r\n          'total_pl': '0.00099132'},\r\n 'total': {'BTC': 98.99602114},\r\n 'used': {'BTC': 1.678e-05}}\r\n```\r\n\r\n"
      },
      {
        "user": "sadek69",
        "created_at": "2023-07-21T08:27:41Z",
        "body": "thanks"
      }
    ]
  },
  {
    "number": 18593,
    "title": "orderbook liquidity limit orders ",
    "created_at": "2023-07-18T17:18:12Z",
    "closed_at": "2023-07-24T15:34:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18593",
    "body": "### ؜\n\nI would like to use ccxt to aggrigate limit orders based in orderbook and get limit order sum . i am trying to create somekind of liquidity map based on limit orders book. i want to aggrigate it by 50$ \r\nexample there is 100 BTC sell order on 29990 and 50 BTC limit sell order in 30K and 50 BTC limit sell order at 30010 . how can we aggrigate this and say there is around 200 BTC on 30K as avrage .\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18593/comments",
    "author": "msobh13",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-19T09:22:32Z",
        "body": "Hello @msobh13, \r\nCCXT can't handle that logic for you, but it will return a unified orderbook, containing the `bids` and `asks` at the different price levels, you just need to parse it and aggregate as you want on your side. "
      },
      {
        "user": "msobh13",
        "created_at": "2023-07-19T09:35:54Z",
        "body": "@carlosmiei ok thanks a lot i will try to find away "
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-24T15:34:10Z",
        "body": "I'll close the issue, if you find any issue/question, let us know again."
      }
    ]
  },
  {
    "number": 18555,
    "title": "fetch u-main futures kline with quote asset volume and number of trades ",
    "created_at": "2023-07-13T07:59:39Z",
    "closed_at": "2023-07-14T10:34:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18555",
    "body": "### Exchange\r\nBinance\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n1.91\r\n\r\n### Description\r\n\r\nI am confused about how to fetch u-main futures kline with quote asset volume and number of trades. What I can only find is the exchange.fetch_ohlcv function, but it dose not have data column \" quote asset volume and number of trades\".\r\n\r\nCould big guys help me to figure out how to get these two columns?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18555/comments",
    "author": "Vankeee",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-13T16:38:35Z",
        "body": "Hello @Vankeee,\r\nFirst and foremost, I would recommend updating your ccxt version because it's too outdated and it does not include some significant updates that we did on binance.\r\n\r\nRegarding your question, yes, those values (number of trades, quote volume) are not part of our unified response but you can easily get them by using the implicit API. \r\nExample (assuming you have an updated version 4+): \r\n\r\n```Python\r\n    await exchange.load_markets(True)\r\n    symbol = 'BTC/USDT:USDT' # change your market here\r\n    market = exchange.market(symbol)\r\n    params = {\r\n        'interval': '1m',\r\n        'limit': 500,\r\n        'symbol': market['id']\r\n    }\r\n    ohlcv = await exchange.fapiPublicGetKlines(params)\r\n    print(ohlcv)\r\n```\r\n"
      },
      {
        "user": "Vankeee",
        "created_at": "2023-07-14T10:34:13Z",
        "body": "Finally, I did by edit ccxt/binance.py.\r\n\r\n```\r\n def parse_ohlcv(self, ohlcv, market=None):\r\n        # when api method = publicGetKlines or fapiPublicGetKlines or dapiPublicGetKlines\r\n        #     [\r\n        #         1591478520000,  # open time\r\n        #         \"0.02501300\",  # open\r\n        #         \"0.02501800\",  # high\r\n        #         \"0.02500000\",  # low\r\n        #         \"0.02500000\",  # close\r\n        #         \"22.19000000\",  # volume\r\n        #         1591478579999,  # close time\r\n        #         \"0.55490906\",  # quote asset volume\r\n        #         40,            # number of trades\r\n        #         \"10.92900000\",  # taker buy base asset volume\r\n        #         \"0.27336462\",  # taker buy quote asset volume\r\n        #         \"0\"            # ignore\r\n        #     ]\r\n        #\r\n        #  when api method = fapiPublicGetMarkPriceKlines or fapiPublicGetIndexPriceKlines\r\n        #     [\r\n        #         [\r\n        #         1591256460000,          # Open time\r\n        #         \"9653.29201333\",        # Open\r\n        #         \"9654.56401333\",        # High\r\n        #         \"9653.07367333\",        # Low\r\n        #         \"9653.07367333\",        # Close(or latest price)\r\n        #         \"0\",                    # Ignore\r\n        #         1591256519999,          # Close time\r\n        #         \"0\",                    # Ignore\r\n        #         60,                     # Number of bisic data\r\n        #         \"0\",                    # Ignore\r\n        #         \"0\",                    # Ignore\r\n        #         \"0\"                     # Ignore\r\n        #         ]\r\n        #     ]\r\n        #\r\n        return [\r\n            self.safe_integer(ohlcv, 0),  # timestamp\r\n            self.safe_number(ohlcv, 1),  # open\r\n            self.safe_number(ohlcv, 2),  # high\r\n            self.safe_number(ohlcv, 3),  # low\r\n            self.safe_number(ohlcv, 4),  # close\r\n            self.safe_number(ohlcv, 5),  # volume\r\n            self.safe_number(ohlcv, 7),  # quote asset volume\r\n            self.safe_number(ohlcv, 8),  # number of trades\r\n            self.safe_number(ohlcv, 10),  # taker buy quote asset volume \r\n\r\n        ]`\r\n```"
      }
    ]
  },
  {
    "number": 18543,
    "title": "Abnormal order purchase",
    "created_at": "2023-07-12T08:20:58Z",
    "closed_at": "2023-07-13T00:29:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18543",
    "body": "### Operating System\n\nWindows10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.18\n\n### Description\n\nThis issue occasionally occurs when placing an order to sell, but the cause of the problem has not been found\r\nDo you know if there is a more elegant solution?\r\nThank you very much, brother\r\n```\r\n {\"msg\":\"Illegal characters found in parameter 'quantity'; legal range is '^([0-9]{1,20})(\\\\.[0-9]{1,20})?$'.\",\"code\":700008}\r\n```\n\n### Code\n\n```\r\norder_utils.create_order(exchange=exchange, amount=round(count, 2), price=price, side='sell')\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18543/comments",
    "author": "iockx",
    "comments": [
      {
        "user": "iockx",
        "created_at": "2023-07-12T08:21:45Z",
        "body": "Sorry to forget to mention that the docking is with the mx exchange"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-12T08:26:35Z",
        "body": "Hello @iockx,\r\nCan you provide a verbose log demonstrating that issue (`exchange.verbose=True`)? Also are you sure that `amount` never gets an invalid value like None? "
      },
      {
        "user": "iockx",
        "created_at": "2023-07-12T08:29:49Z",
        "body": "> 你好@iockx， 您能否提供说明该问题的详细日志 ( `exchange.verbose=True`)？另外你确定`amount`永远不会得到像 None 这样的无效值吗？\r\nOkay, I have added logs before and after the method. When this problem occurs again in the future, I will come back. Thank you for your reply\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2023-07-13T00:29:00Z",
        "body": "@iockx closing this for now, feel free to reopen this issue when you have more input, or, ideally, just continue posting here."
      }
    ]
  },
  {
    "number": 18501,
    "title": "Coinbase - Staked Ethereum don't show up with fetchBalance()",
    "created_at": "2023-07-08T20:53:18Z",
    "closed_at": "2023-07-13T00:29:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18501",
    "body": "After staking Ethereum on Coinbase the amount of Ethereum don't show up any more with fetchBalance().\n\nAny idea how to access the staking balance?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18501/comments",
    "author": "theMoe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-09T11:35:23Z",
        "body": "Hello @theMoe,\r\nAFAIK Coinbase does not provide that information through the API."
      },
      {
        "user": "kroitor",
        "created_at": "2023-07-13T00:29:53Z",
        "body": "@theMoe closing this issue for now, feel free to reopen it or just ask further questions here if any."
      },
      {
        "user": "theMoe",
        "created_at": "2023-10-16T13:00:18Z",
        "body": "@kroitor @carlosmiei it seems, that the staked ETH on Coinbase are labeled as ETH2."
      }
    ]
  },
  {
    "number": 18498,
    "title": "fetchPositionsRisk() requires an array argument for symbols",
    "created_at": "2023-07-07T13:03:59Z",
    "closed_at": "2023-07-07T13:07:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18498",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n4.0.13\n\n### Description\n\nSeems like the bug from 18131 is still not solved in 4.0.13. Below code gives \r\n>binance fetchPositionsRisk() requires an array argument for symbols\r\n\r\nSame error when one adds params={'type': 'future'} \r\n\r\n\n\n### Code\n\n```\r\nsymbol = \"LTC/USDT:USDT\"\r\nposResult = await exchange.fetchPositions(symbols = symbol)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18498/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:05:13Z",
        "body": "@spc789 the error says itself, the argument must be an array of symbols, not a single symbol:\r\n\r\n```\r\nsymbol = \"LTC/USDT:USDT\"\r\nposResult = await exchange.fetchPositions(symbols = [symbol])\r\n```\r\n\r\nor \r\n\r\n```\r\nsymbols = [\"LTC/USDT:USDT\"]\r\nposResult = await exchange.fetchPositions(symbols)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:07:04Z",
        "body": "@spc789 feel free to reopen this issue or just ask further questions here if the above does not work."
      },
      {
        "user": "spc789",
        "created_at": "2023-07-07T13:07:39Z",
        "body": "Youre right, my excuses"
      }
    ]
  },
  {
    "number": 18497,
    "title": "Subscribing to Binance's bookTick data failed.",
    "created_at": "2023-07-07T12:39:12Z",
    "closed_at": "2023-07-07T13:06:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18497",
    "body": "### Operating System\n\nMac OS 13.4\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n4.0.12\n\n### Description\n\nI subscribed to binance's bookTick data according to the documentation, but got an error.\r\nHere is the error message:\r\n\r\n--------------------------------------------------------------------------------------------\r\n\r\nBTC/USDT TypeError: Cannot set properties of undefined (setting 'btcusdt@bookTicker')\r\n    at binance.stream (/Users/grayson/Desktop/code/soliman/node_modules/ccxt/dist/cjs/src/pro/binance.js:117:73)\r\n    at binance.watchTicker (/Users/grayson/Desktop/code/soliman/node_modules/ccxt/dist/cjs/src/pro/binance.js:766:63)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n\n### Code\n\n```ts\r\n// ts\r\nimport ccxt from \"ccxt\"\r\nimport { Ticker,Exchange } from \"ccxt\"\r\n\r\n// your version must be 0.7+\r\nconsole.log ('CCXT Version:', ccxt.version)\r\n\r\nfunction handle (exchange: Exchange, symbol: string, ticker:Ticker) {\r\n    console.log (new Date (), exchange.id, symbol, ticker)\r\n}\r\n\r\nasync function loop (exchange: Exchange, symbol: string) {\r\n    while (true) {\r\n        try {\r\n            const ticker = await exchange.watchTicker (symbol)\r\n            handle (exchange, symbol, ticker)\r\n        } catch (e) {\r\n            console.log (symbol, e)\r\n            // do nothing and retry on next loop iteration\r\n            // throw e // uncomment to break all loops in case of an error in any one of them\r\n            // break // you can also break just this one loop if it fails\r\n        }\r\n    }\r\n}\r\n\r\n\r\nasync function main() {\r\n \r\n    const binance = new ccxt.pro.binance()\r\n    binance.options = { 'watchTicker': {\r\n        'name': 'bookTicker', // ticker = 1000ms L1+OHLCV, bookTicker = real-time L1\r\n    }}\r\n    if (binance.has.watchTicker) {\r\n        await loop (binance, 'BTC/USDT') // one symbol\r\n    }\r\n    \r\n}\r\n\r\nmain ()\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18497/comments",
    "author": "cclion",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:00:23Z",
        "body": "@cclion you should not override all options (should not replace the .options with another dictionary) if you want to change just one value, just replace this line with the following:\r\n\r\n```TypeScript\r\n    binance.options = { 'watchTicker': {\r\n        'name': 'bookTicker', // ticker = 1000ms L1+OHLCV, bookTicker = real-time L1\r\n    }}\r\n```\r\n↓\r\n```TypeScript\r\n    binance.options['watchTicker']['name'] = 'bookTicker'\r\n```\r\n\r\nLet us know if that does not help."
      },
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:01:28Z",
        "body": "Alternatively, try this to extend the options during exchange initialization:\r\n\r\n```TypeScript\r\n    const binance = new ccxt.pro.binance({\r\n        'options': { 'watchTicker': 'bookTicker' },\r\n    })\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:06:13Z",
        "body": "@cclion feel free to reopen this issue or just post your comments here if the above does not work."
      }
    ]
  },
  {
    "number": 18427,
    "title": "fetch_open_interest_history() broken on gateio",
    "created_at": "2023-06-30T16:19:03Z",
    "closed_at": "2023-07-01T14:29:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18427",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.37\n\n### Description\n\n_No response_\n\n### Code\n\n```\r\nimport ccxt\r\ngateio = ccxt.gateio()\r\ngateio.fetch_open_interest_history(\"BTC/USDT:USDT\")\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mrpouley/.local/lib/python3.11/site-packages/ccxt/gate.py\", line 5238, in fetch_open_interest_history\r\n    raise BadRequest(self.id + ' fetchOpenInterest() supports future markets only')\r\nccxt.base.errors.BadRequest: gateio fetchOpenInterest() supports future markets only\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18427/comments",
    "author": "mrpouley",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-30T16:27:35Z",
        "body": "Hello @mrpouley, that error means that as far as we know, Gate only provides that information in the API for expiring futures, and you're providing a swap/perpetual. "
      },
      {
        "user": "mrpouley",
        "created_at": "2023-06-30T17:12:20Z",
        "body": "OK not sure what happened here but it worked perfectly fine a few weeks ago."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-01T13:54:32Z",
        "body": "@mrpouley Sorry I checked it and I think you're right, this check was added a few weeks ago inadvertently. I will check it as soon as possible. "
      }
    ]
  },
  {
    "number": 18412,
    "title": "coinbasepro :  fetchOrders() - \"price\" field - numbers are wonky",
    "created_at": "2023-06-30T02:58:17Z",
    "closed_at": "2023-07-04T11:56:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18412",
    "body": "### Operating System\r\n\r\nWin 10\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n3.1.50\r\n\r\n### Description\r\n\r\nfor rows where \"average.price\" was \r\n\r\n> 16186.81\r\n> 16981.22\r\n> 16978.36\r\n\r\n\r\n\"price\" for same rows:\r\n\r\n>  16200.00000000\r\n> 169750.00000000  <- not a typo - had BTC price at six-figures\r\n> 169980.00000000\r\n\r\nThanks as always \r\n\r\n### Code\r\n\r\n```\r\nconst { log } = require('console')\r\nconst ccxt = require('ccxt')\r\n\r\nlet fo = async function () {\r\n\r\n\t\r\n\r\n\tlet pro = new ccxt.coinbasepro ({\r\n\t\tapiKey: 'yesI',\r\n\t\tsecret:  'rasTrent',\r\n\t\tpassword: 'myRoommateJakeIsAnIgnorantBaldhead'\r\n\t})\r\n\t\r\n\tpro.loadMarkets()\r\n\r\n\tarray = await pro.fetchOrders ()\t\t\t\t\t\t\t\t\t\t\r\n\r\n\tlog(array) \r\n\r\n\r\n}\r\nfo ()\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18412/comments",
    "author": "respectabiggle",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-30T09:00:07Z",
        "body": "Hello @respectabiggle,\r\nSorry what is exactly the problem here?"
      },
      {
        "user": "respectabiggle",
        "created_at": "2023-06-30T17:35:52Z",
        "body": "(Edited:  \"info.price\" -> \"price\" field ) \r\n\r\nEh, though I was being helpful.   Assumed there was a math / rounding error.\r\n\r\nMaybe the \"price\" field was my asking price? (or whatever it's called, \"bid price\", I'm not sure)\r\n\r\nThanks"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-04T09:55:02Z",
        "body": "> (Edited: \"info.price\" -> \"price\" field )\r\n> \r\n> Eh, though I was being helpful. Assumed there was a math / rounding error.\r\n> \r\n> Maybe the \"price\" field was my asking price? (or whatever it's called, \"bid price\", I'm not sure)\r\n> \r\n> Thanks\r\n\r\n@respectabiggle Also not sure 😅, but if we have a rounding problem we should take a look yes but just bear in mind that for instance 1.0000 is exactly the same as 1 (the zeros might be omitted by the language). "
      },
      {
        "user": "respectabiggle",
        "created_at": "2023-07-04T11:56:03Z",
        "body": "@carlosmiei Thank you\r\n\r\nUpon second look, those fields (price, info.price) were definitely limit order prices I had set manually.\r\n\r\nSorry for the false alarm !"
      }
    ]
  },
  {
    "number": 18359,
    "title": "CCXT Pro 'create_order_ws' on Kraken",
    "created_at": "2023-06-27T11:14:56Z",
    "closed_at": "2023-06-27T14:11:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18359",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nCCXT Pro 1.0.33\n\n### Description\n\nI am trying to submit an order with CCXT Pro on Kraken using web socket (Python).\r\n\r\n`order = await exchange.create_order_ws(symbol=\"UNI/USD\", type=\"market\", side=\"buy\", amount=1 )`\r\n\r\nBut I receive the following error:\r\n\r\n`AttributeError: 'kraken' object has no attribute 'create_order_ws'`\r\n\r\nDoes it mean that not all the WS methods in CCXT Pro work for supported exchanges or am I missing something?\r\n\r\nThank you for your help!\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18359/comments",
    "author": "AntoBr96",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-27T11:19:33Z",
        "body": "Hello @AntoBr96, Are you still using the old package? The latest ccxt version is 3.1.53, which is very distant from yours.\r\n\r\nRegarding your question, for now `kraken` is the only exchange with `create_order_Ws/cancel_order_ws/etc` available but we will be adding it to different exchanges in the future. \r\n\r\nIn short, if you update your ccxt version you should be able to use that method. "
      },
      {
        "user": "AntoBr96",
        "created_at": "2023-06-27T14:11:22Z",
        "body": "Thank you @carlosmiei! Your answer solved my question!"
      },
      {
        "user": "reverendrenegade",
        "created_at": "2023-09-09T14:00:42Z",
        "body": "Are there any updates on exchange coverage beyond Kraken regarding the aforementioned web socket streams? \r\n\r\n\"create_order_Ws/cancel_order_ws/etc\""
      }
    ]
  },
  {
    "number": 18358,
    "title": "Can I use orjson instead of std json for ccxt.pro?",
    "created_at": "2023-06-27T09:58:47Z",
    "closed_at": "2023-07-03T09:38:37Z",
    "labels": [
      "question",
      "suggestion"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18358",
    "body": "### ؜\n\nFrom the source code, it seems ccxtpro handles the json data by std json lib, since some other json libs will have better performance, is it possible to use these libs (e.g. orjson) ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18358/comments",
    "author": "hi-bingo",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-27T11:55:04Z",
        "body": "Hello @hi-bingo, \r\n\r\nThere is not an easy way to replace the parser but you can always fork or monkey patch your instance and apply the appropriate changes. \r\n\r\nWe will take into consideration your suggestion though. \r\n\r\nThanks"
      },
      {
        "user": "philipperemy",
        "created_at": "2024-11-07T06:34:35Z",
        "body": "In my opinion orjson should be the default for ccxt.\r\n\r\nWhen the number of messages gets too high, feeds start to slow down a lot."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-07T10:13:47Z",
        "body": "@philipperemy I agree but we can't make it default because `orjson` does not run on every interpreter.\r\n\r\nWe can try to detect the `orjson` installation and use it when detected. \r\n\r\nI will keep you posted. \r\n "
      },
      {
        "user": "philipperemy",
        "created_at": "2024-11-10T07:55:03Z",
        "body": "@carlosmiei that makes sense. If `orjson` exists, use it else fall back to the default json reader of python. No need to add an extra dep for ccxt.\r\n\r\nSome exchanges like Kucoin can have 3M messages par minute (TickerV2). With the default implementation, it is not usable because delays accumulate. But I'm guessing for most use cases it's alright."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-18T12:40:53Z",
        "body": "@philipperemy @hi-bingo CCXT now supports orjson. \r\n\r\nYou just need to upgrade your ccxt version and have installed `orjson` in your environment. CCXT will detect it and use it automatically. "
      },
      {
        "user": "philipperemy",
        "created_at": "2024-11-18T15:16:20Z",
        "body": "@carlosmiei thank you. I believe it's going to be very helpful for professional traders."
      }
    ]
  },
  {
    "number": 18344,
    "title": "binance api fapiprivate_delete_batchorders",
    "created_at": "2023-06-25T18:15:27Z",
    "closed_at": "2023-11-06T16:43:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18344",
    "body": "### Operating System\n\nwindows\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.16\n\n### Description\n\nWhen the method is delete, Binance. sign will place the signature information in the URL instead of the body. However, this API requires the signature information to be placed in the body, so an error signature error will be reported\n\n### Code\n\n```\r\n  order={\r\n    'symbol':'ETHUSDT',\r\n    'orderIdList':convert_list_to_json_array([12345678,23456789])\r\n}\r\nexchange.fapiprivate_delete_batchorders(order)\r\nccxt.base.errors.AuthenticationError: binance {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\r\n```\r\n\r\nrequest=exchange.sign('batchOrders','fapiPrivate','POST',{'symbol': 'ETHUSDT', 'orderIdList': '[12345678,23456789]'},None,None)\r\nprint(exchange.fetch(request['url'], 'DELETE', request['headers'], request['body']))\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18344/comments",
    "author": "chenadda",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-06-26T06:56:16Z",
        "body": "Hi @chenadda\r\n\r\nI'm not sure how `convert_list_to_json_array` works on your side, but the function work for me if I use array string instead of list, eg `\"[12345678,23456789]\"`. \r\n\r\nLet me know if you have any other issue."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-06T16:43:42Z",
        "body": "Hello @chenadda, Binance does have the `cancelOrders` now, so if you update your ccxt version you should be able to get it. "
      }
    ]
  },
  {
    "number": 18221,
    "title": "ccxt.binance.fetch_ticker(''AVAXUSDT)",
    "created_at": "2023-06-14T10:01:12Z",
    "closed_at": "2023-06-14T13:36:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18221",
    "body": "### Operating System\n\nwindows11\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.37\n\n### Description\n\n\r\nccxt.binance.fetch_ticker(''AVAXUSDT)\r\nresult:\r\n{'symbol': 'AVAX/USDT:USDT', 'timestamp': 1686734157444, 'datetime': '2023-06-14T09:15:57.444Z', 'high': 13.94, 'low': 12.65, 'bid': None, 'bidVolume': None, 'ask': None, 'askVolume': None, 'vwap': 12.721, 'open': 13.94, 'close': 12.65, 'last': 12.65, 'previousClose': None, 'change': -1.29, 'percentage': -9.254, 'average': 13.295, 'baseVolume': 5038.0, 'quoteVolume': 64088.45, 'info': {'symbol': 'AVAXUSDT', 'priceChange': '-1.2900', 'priceChangePercent': '-9.254', 'weightedAvgPrice': '12.7210', 'lastPrice': '12.6500', 'lastQty': '79', 'openPrice': '13.9400', 'highPrice': '13.9400', 'lowPrice': '12.6500', 'volume': '5038', 'quoteVolume': '64088.4500', 'openTime': '1686656700000', 'closeTime': '1686734157444', 'firstId': '2778867', 'lastId': '2778918', 'count': '52'}}\r\n\r\nbid and ask are None.I need ask and bid price\r\nCan you open access to this data?\n\n### Code\n\n```\r\n  \r\n\r\n```\r\nccxt.binance.fetch_ticker(''AVAXUSDT)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18221/comments",
    "author": "ZengYuQin",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-14T13:36:55Z",
        "body": "Hello @ZengYuQin,\r\nWe can only unify the data provided by the API, in this case you can see inside `info` (raw response) that bid/ask are not provided, so there is nothing ccxt can do about it. \r\n\r\n```\r\n  info: {\r\n    symbol: 'AVAXUSDT',\r\n    priceChange: '-0.0030',\r\n    priceChangePercent: '-0.025',\r\n    weightedAvgPrice: '11.7644',\r\n    lastPrice: '11.8760',\r\n    lastQty: '1',\r\n    openPrice: '11.8790',\r\n    highPrice: '11.9320',\r\n    lowPrice: '11.5740',\r\n    volume: '7364791',\r\n    quoteVolume: '86642299.9400',\r\n    openTime: '1686663300000',\r\n    closeTime: '1686749714992',\r\n    firstId: '500382324',\r\n    lastId: '500571391',\r\n    count: '189068'\r\n  }\r\n```\r\n"
      }
    ]
  },
  {
    "number": 18187,
    "title": "Can't place futures order using leverage on bybit",
    "created_at": "2023-06-12T03:54:13Z",
    "closed_at": "2023-11-08T18:38:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18187",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.31\n\n### Description\n\nI'm trying to place an order using 75x leverage through bybit but I keep receiving the following error:\r\n\r\n```An error occurred while placing the order: bybit {\"retCode\":140007,\"retMsg\":\"remark:order[49649307 ae68f79f-a281-4f69-918e-4cd4eaaf271d] fix price failed for CannotAffordOrderCost.\",\"result\":{},\"retExtInfo\":{},\"time\":1686541103334}```\r\n\r\n\r\nI have 27USDT in my account for testing purposes and with my code im trying to achieve is to fetch my total balance (which is done successfully) then use the entirety of my balance to create either a short or long with the desired leverage (which has been set succesfully) but it still struggles to purchase.\r\n\r\nI cant understand why its giving me a CannotAffordOrderCost when i have the USDT in my derivates wallet. \n\n### Code\n\n```\r\nsymbol =\"ETHUSD\"\r\nleverage = 75\r\ndef set_leverage():\r\n    try:\r\n        exchange.set_leverage(leverage, symbol)\r\n        print(f\"Leverage set to {leverage}x for {symbol}.\")\r\n    except Exception as e:\r\n        print(f\"An error occurred while setting the leverage: {e}\")\r\n\r\nset_leverage()\r\n\r\ndef place_order(symbol, side):\r\n    balance = get_balance()\r\n    current_price = get_current_price(symbol)\r\n    amount = ((balance / current_price) * leverage) * 0.95\r\n    side = 'Buy' if side == 'long' else 'Sell'\r\n    print(amount)\r\n    try:\r\n        exchange.create_market_order(symbol, side, amount)\r\n        print(f\"Market {side} order of {balance} {symbol} placed.\")\r\n    except Exception as e:\r\n        print(f\"An error occurred while placing the order: {e}\")\r\n        \r\nplace_order(symbol, 'short')\r\n \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18187/comments",
    "author": "mackdaddylmao",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-12T09:57:26Z",
        "body": "Hello @mackdaddylmao,\r\nUsing the same amount, can you place the order using the WEB platform? Usually you can't allocate 100% of your capital to open a position so Bybit might be requiring you a small % to be left as margin for your position. "
      },
      {
        "user": "mackdaddylmao",
        "created_at": "2023-06-12T10:33:34Z",
        "body": "> Hello @mackdaddylmao, Using the same amount, can you place the order using the WEB platform? Usually you can't allocate 100% of your capital to open a position so Bybit might be requiring you a small % to be left as margin for your position.\r\n\r\n Well in my code I actually multiply the order by 0.95 to adjust to that just in case, so it's a little smaller than 100%"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-06-12T11:09:21Z",
        "body": "> > Hello @mackdaddylmao, Using the same amount, can you place the order using the WEB platform? Usually you can't allocate 100% of your capital to open a position so Bybit might be requiring you a small % to be left as margin for your position.\r\n> \r\n> Well in my code I actually multiply the order by 0.95 to adjust to that just in case, so it's a little smaller than 100%\r\n\r\n@mackdaddylmao I noticed that yes but even 5% might not be enough, that is why I asked if you had the opportunity to test in the WEB UI. Alternatively, you can decrease the 95% factor a bit to see if it makes a difference. "
      },
      {
        "user": "mackdaddylmao",
        "created_at": "2023-06-12T11:13:37Z",
        "body": "> > > Hello @mackdaddylmao, Using the same amount, can you place the order using the WEB platform? Usually you can't allocate 100% of your capital to open a position so Bybit might be requiring you a small % to be left as margin for your position.\r\n> > \r\n> > \r\n> > Well in my code I actually multiply the order by 0.95 to adjust to that just in case, so it's a little smaller than 100%\r\n> \r\n> @mackdaddylmao I noticed that yes but even 5% might not be enough, that is why I asked if you had the opportunity to test in the WEB UI. Alternatively, you can decrease the 95% factor a bit to see if it makes a difference.\r\n\r\nOhhh sorry about that, thanks. So I just tested it with 0.8 to see if I can get a trade to work and it is now printing a new error:\r\n\r\n`An error occurred while placing the order: bybit amount of ETH/USD:ETH must be greater than minimum amount precision of 1`\r\n\r\nI imagine its because its trying to short less than 1 eth which I can do on bybit WEB UI, is there a way to order using the USDT in my account rather than ETH maybe?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-08T18:38:47Z",
        "body": "@mackdaddylmao bybit went through major updates and maybe this issue does not apply anymore. Please reopen it if needed. "
      }
    ]
  },
  {
    "number": 18183,
    "title": "Kucoin is not returning stop orders with fetch_open_orders",
    "created_at": "2023-06-11T15:49:02Z",
    "closed_at": "2023-11-08T18:34:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18183",
    "body": "### ؜\r\n\r\nhow do you create a stop order with kucoin, and fetch them and cancel them\r\nI need to set a stop loss for a position at any given time",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18183/comments",
    "author": "adamrg73",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-12T09:43:10Z",
        "body": "Hello @adamrg73,\r\n\r\n>stop orders with fetch_open_orders\r\n\r\nYou need to provide `stop:True` inside `params`to fetch/cancel stop-orders\r\n\r\n>I need to set a stop loss for a position at any given time\r\n\r\nYou can create an order with `stopLossPrice` inside `params`. \r\n\r\n\r\n\r\n"
      },
      {
        "user": "adamrg73",
        "created_at": "2023-06-13T11:44:45Z",
        "body": "ok thanks I will try it today!"
      }
    ]
  },
  {
    "number": 18171,
    "title": "MEXC: Error with \"sign\" when trying to pass a list of orders with spotPrivatePostBatchOrders",
    "created_at": "2023-06-09T17:03:44Z",
    "closed_at": "2023-11-08T18:34:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18171",
    "body": "### Operating System\r\n\r\nWindows\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.80\r\n\r\n### Description\r\n\r\nI'm trying to use the implicit API spotPrivatePostBatchOrders() to create a batch order for MEXC.\r\n\r\nI think the error is happening because I'm passing a list while sign is expecting a dictionary for params. It's trying to create a timestamp for params['timestamp'] while params is a list.\r\n\r\nTypeError: list indices must be integers or slices, not str\r\n\r\n### Code\r\n\r\n```\r\n             orders = [{\"symbol\": \"BTCUSDT\", \"side\": \"BUY\", \"type\": \"IMMEDIATE_OR_CANCEL \", \"price\": str(19580), \"quantity\": str(0.1)},{\"symbol\": \"BTCUSDT\", \"side\": \"BUY\", \"type\": \"IMMEDIATE_OR_CANCEL \", \"price\": str(19500), \"quantity\": str(0.1}]\r\n                 \r\n             result = await self.ccxtpro.spotPrivatePostBatchOrders(orders)\r\n                            │    │       │                          └ [{'symbol': 'BTCUSDT', 'side': 'BUY', 'type': 'IMMEDIATE_OR_CANCEL ', 'price': '19580', 'quantity': '0.1', 'timesta...\r\n                            │    │       └ <function Exchange.request at 0x00000256D38F3B50>\r\n                            │    └ ccxt.async_support.mexc()\r\n                            └ <advanced_CEX_pro.CEX object at 0x00000256D3880430>\r\n\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1606, in request\r\n    return await self.fetch2(path, api, method, params, headers, body, config, context)\r\n                 │    │      │     │    │       │       │        │     │       └ {}\r\n                 │    │      │     │    │       │       │        │     └ {'cost': 1}\r\n                 │    │      │     │    │       │       │        └ None\r\n                 │    │      │     │    │       │       └ None\r\n                 │    │      │     │    │       └ [{'symbol': 'BTCUSDT', 'side': 'BUY', 'type': 'IMMEDIATE_OR_CANCEL ', 'price': '19580', 'quantity': '0.1', 'timesta...\r\n                 │    │      │     │    └ 'POST'\r\n                 │    │      │     └ ['spot', 'private']\r\n                 │    │      └ 'batchOrders'\r\n                 │    └ <function Exchange.fetch2 at 0x00000256D306E3B0>\r\n                 └ ccxt.async_support.mexc()\r\n\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1602, in fetch2\r\n    request = self.sign(path, api, method, params, headers, body)\r\n              │    │    │     │    │       │       │        └ None\r\n              │    │    │     │    │       │       └ None\r\n              │    │    │     │    │       └ [{'symbol': 'BTCUSDT', 'side': 'BUY', 'type': 'IMMEDIATE_OR_CANCEL ', 'price': 19580', 'quantity': '0.1', 'timesta...\r\n              │    │    │     │    └ 'POST'\r\n              │    │    │     └ ['spot', 'private']\r\n              │    │    └ 'batchOrders'\r\n              │    └ <function mexc.sign at 0x00000256D3522560>\r\n              └ ccxt.async_support.mexc()\r\n\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\async_support\\mexc.py\", line 4648, in sign\r\n    params['timestamp'] = self.milliseconds()\r\n    │                     │    └ <staticmethod(<function Exchange.milliseconds at 0x00000256D25513F0>)>\r\n    │                     └ ccxt.async_support.mexc()\r\n    └ [{'symbol': 'BTCUSDT', 'side': 'BUY', 'type': 'IMMEDIATE_OR_CANCEL ', 'price': '19580', 'quantity': '0.1', 'timesta...\r\n\r\nTypeError: list indices must be integers or slices, not str\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18171/comments",
    "author": "Tongoko",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-09T21:53:03Z",
        "body": "Hello @Tongoko, thanks for reporting it, we will take a look and let you know as soon as possible."
      },
      {
        "user": "Tongoko",
        "created_at": "2023-06-12T11:56:27Z",
        "body": "Awesome, thanks!"
      },
      {
        "user": "Tongoko",
        "created_at": "2023-07-06T07:56:21Z",
        "body": "@carlosmiei How is it going with this one? :)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-08T18:34:51Z",
        "body": "@Tongoko this should be working now, mexc supports createOrders now "
      }
    ]
  },
  {
    "number": 18011,
    "title": "XT fetch_funding_rate_history() sometimes throws general error",
    "created_at": "2023-05-25T08:19:20Z",
    "closed_at": "2023-05-25T11:44:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18011",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.1.5\n\n### Description\n\nWhen trying to fetch the funding rate history, it sometimes throws a random error, not really sure what might be causing it. Also tried to reproduce the error but cannot do it manually somehow. I think sometimes the endpoint is just unavailable on the exchange side? \n\n### Code\n\n```\r\n  \r\nclient = ccxt.xt()\r\nfunding = client.fetch_funding_rate_history(\"ETH/USDT:USDT\")\r\n```\r\nclient.fetch_funding_rate_history(t))\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\xt.py\", line 3852, in fetch_funding_rate_history\r\n    response = self.publicLinearGetFutureMarketV1PublicQFundingRateRecord(self.extend(request, params))\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\base\\types.py\", line 25, in unbound_method\r\n    return _self.request(self.path, self.api, self.method, params, config=self.config)\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 2865, in request\r\n    return self.fetch2(path, api, method, params, headers, body, config)\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 2862, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 575, in fetch\r\n    skip_further_error_handling = self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"C:\\Users\\Tomas\\anaconda3\\lib\\site-packages\\ccxt\\xt.py\", line 4316, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: xt",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18011/comments",
    "author": "Tomas-MP",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-25T10:44:57Z",
        "body": "Hello @Tomas-MP, \r\nYeah I can't reproduce this issue, so it was most likely some unavailability period on the exchange side. "
      },
      {
        "user": "Tomas-MP",
        "created_at": "2023-05-25T11:44:16Z",
        "body": "@carlosmiei weird indeed, I am currently running a bot and this morning it threw the exception multiple times. Now I cannot reproduce this issue either so guess it is on the exchange's side. Will fix in my own code by catching the exception. "
      }
    ]
  },
  {
    "number": 17964,
    "title": "In Python Triangular arbitrage",
    "created_at": "2023-05-20T03:13:24Z",
    "closed_at": "2023-11-15T04:33:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17964",
    "body": "# Define the trading pairs for triangular arbitrage\r\ntrading_pairs = [\r\n    {\r\n        'leg1': '.../USDT',\r\n        'leg2': '.../...',\r\n        'leg3': '.../...'\r\n    },\r\n    {\r\n        'leg1': '.../USDT',\r\n        'leg2': '.../...',\r\n        'leg3': '.../...'\r\n    }\r\n]\r\n\r\nfor pair in trading_pairs:\r\n    leg1 = pair['leg1']\r\n    leg2 = pair['leg2']\r\n    leg3 = pair['leg3']\r\n\r\n    # Fetch ticker data for all trading pairs\r\n    ticker1 = exchange.fetch_ticker( leg1 )\r\n    ticker2 = exchange.fetch_ticker( leg2 )\r\n    ticker3 = exchange.fetch_ticker( leg3 )\r\n\r\n    # Check if the ticker prices are valid\r\n    if (\r\n            ticker1['ask'] is None or\r\n            ticker2['ask'] is None or\r\n            ticker3['ask'] is None\r\n    ):\r\n        print( f\"Invalid ticker prices for {leg1}, {leg2}, {leg3}.\" )\r\n    else:\r\n        # Extract the ask prices for each leg\r\n        price1_ask = float( ticker1['ask'] )\r\n        price2_ask = float( ticker2['ask'] )\r\n        price3_ask = float( ticker3['ask'] )\r\n\r\n        # Fetch the trading fees from Binance\r\n        markets = exchange.fetch_markets()\r\n        fees = {\r\n            leg1: None,\r\n            leg2: None,\r\n            leg3: None\r\n        }\r\n        for market in markets:\r\n            if market['symbol'] == leg1:\r\n                fees[leg1] = market['maker']\r\n            elif market['symbol'] == leg2:\r\n                fees[leg2] = market['taker']\r\n            elif market['symbol'] == leg3:\r\n                fees[leg3] = market['taker']\r\n\r\n        # Calculate the potential profit percentage with fees\r\n        fee_leg1 = fees[leg1]\r\n        fee_leg2 = fees[leg2]\r\n        fee_leg3 = fees[leg3]\r\n\r\n        # Calculate the potential profit percentage with fees\r\n        profit_percentage = (\r\n                                    (1 / (price1_ask * (1 + fee_leg1))) *\r\n                                    (price2_ask * (1 - fee_leg2)) *\r\n                                    (price3_ask * (1 - fee_leg3)) - 1\r\n                            ) * 100\r\n\r\n        # Print the profit percentage\r\n        print( f\"Profit percentage (with fees) for {leg1}, {leg2}, {leg3}: {profit_percentage:.2f}%\" )\r\n\r\n        if profit_percentage > 0.01:\r\n            usdt_balance = exchange.fetch_balance()['total']['USDT']\r\n            print( 'start balance:', usdt_balance )\r\n            max1 = usdt_balance / price1_ask\r\n            order1 = exchange.create_market_buy_order( leg1, max1 )\r\n            time.sleep( 1 )\r\n\r\n\r\n            for2=exchange.fetch_balance()['total'][leg2.split( '/' )[0]]\r\n            max2 = for2 / price2_ask\r\n            order2 = exchange.create_market_buy_order( leg2,max2  )\r\n            time.sleep( 1 )\r\n\r\n\r\n            for3=exchange.fetch_balance()['total'][leg3.split( '/' )[0]]\r\n            max3=for3/price3_ask\r\n            order3 = exchange.create_market_buy_order( leg3,max3  )\r\n            time.sleep( 1 )\r\n\r\n            print( \"Market buy orders executed:\" )\r\n            print( f\"Order 1: {order1}\" )\r\n            print( f\"Order 2: {order2}\" )\r\n            print( f\"Order 3: {order3}\" )\r\n\r\n            usdt_balance = exchange.fetch_balance()['total']['USDT']\r\n            print( 'finish balance ', usdt_balance )\r\n        else:\r\n            usdt_balance = exchange.fetch_balance()['total']['USDT']\r\n            print( 'just balance ', usdt_balance )\r\nI get error on order 2, leg 2 need to round price, how to do it according to your library?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17964/comments",
    "author": "guram-asanidze-1-btu-edu-ge",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2023-11-15T04:33:39Z",
        "body": "the question is not clear, what is the error you get?"
      }
    ]
  },
  {
    "number": 17827,
    "title": "binance handleOrderBook received an out-of-order nonce in watchOrderBook",
    "created_at": "2023-05-07T19:29:53Z",
    "closed_at": "2023-05-07T20:21:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17827",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.0.96\n\n### Description\n\nThis afternoon I got an *binance handleOrderBook received an out-of-order nonce* error in the my watchOrderbook routine. (Version of ccxt is 3.0.96)\r\n\r\nThe following traceback is not complete as my onscreen traceback was overwritten with some other data. \r\nIn my file logging routine was an error so the traceback wasn't saved there.\r\nThe moment the error shows up again I'll post a complete traceback\r\n\r\n>Traceback (most recent call last):\r\n>  File \"./CCXT-WS\", line 4263, in watch_ticker\r\n>    orderbook = await exchange.watchOrderBook(symbol, orderbook_level)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 192, in watch_order_book\r\n>[  >> LIVE >>  ] [ >>> TICKER BTC/USDT : high 29137.0 low : 28620.2 change -25.700 percentage -0.089 <<< ]\r\n>[  >> LIVE >>  ] [ >>> ORDERBOOK BTC/USDT : bids 28841.4 asks : 28841.5 price : 28841.5 <<< ]\r\n>ccxt.base.errors.ExchangeError: binance handleOrderBook received an out-of-order nonce\r\n>[ 19:02:04.418 ]    >>> Error type : ExchangeError\r\n>[ 19:02:04.419 ]    >>> Error msg : binance handleOrderBook received an out-of-order nonce\r\n\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17827/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-05-07T20:21:26Z",
        "body": "Hi @spc789 , it can happen that the orderbook falls out of sync, due to an out of order message or missing message from the server, and that's why the error is thrown.\r\n\r\nHowever if you call `watchOrderBook` inside a try and catch clause, it should be able to reconnect after the error.\r\n\r\nI'll close the issue for now, but feel free to reach out if you have any other questions or the error persists."
      },
      {
        "user": "spc789",
        "created_at": "2023-05-07T21:32:50Z",
        "body": "My code does a try / except and restarts, but at the same time at shows where at throws them, it was for your info\r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-09T22:36:30Z",
        "body": "Delved a bit deeper into this, fyi, \r\nAs soon as I used a net interceptor preloading library so I could dump the streaming packets the problem vanished. \r\nI suppose it has something to do with the internals of (re)connecting to the stream, at least in my case."
      }
    ]
  },
  {
    "number": 17822,
    "title": "watch_ohlcv always returns a single value",
    "created_at": "2023-05-07T06:51:04Z",
    "closed_at": "2023-05-07T21:59:12Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17822",
    "body": "### Operating System\n\nEndeavourOS\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nCCXT Pro 3.0.79\n\n### Description\n\nI've been trying to run the `binance-watch-ohlcv.py` example and expected it to return more candles, however, it only seems to return one, no matter the limits I set. As I've understood, this method should return more candles, depending on the limit parameter that is set.\n\n### Code\n\n```\r\n  \r\n\r\nimport ccxt.pro\r\nfrom asyncio import run\r\n\r\nprint('CCXT Pro version', ccxt.pro.__version__)\r\n\r\n\r\ndef table(values):\r\n    first = values[0]\r\n    keys = list(first.keys()) if isinstance(first, dict) else range(0, len(first))\r\n    widths = [max([len(str(v[k])) for v in values]) for k in keys]\r\n    string = ' | '.join(['{:<' + str(w) + '}' for w in widths])\r\n    return \"\\n\".join([string.format(*[str(v[k]) for k in keys]) for v in values])\r\n\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.binance({\r\n        'options': {\r\n            'OHLCVLimit': 1000, # how many candles to store in memory by default\r\n        },\r\n    })\r\n    symbol = 'ETH/USDT'  # or BNB/USDT, etc...\r\n    timeframe = '1m'  # 5m, 1h, 1d\r\n    limit = 10  # how many candles to return max\r\n    method = 'watchOHLCV'\r\n    if (method in exchange.has) and exchange.has[method]:\r\n        max_iterations = 100000  # how many times to repeat the loop before exiting\r\n        for i in range(0, max_iterations):\r\n            try:\r\n                ohlcvs = await exchange.watch_ohlcv(symbol, timeframe, None, limit)\r\n                now = exchange.milliseconds()\r\n                print('\\n===============================================================================')\r\n                print('Loop iteration:', i, 'current time:', exchange.iso8601(now), symbol, timeframe)\r\n                print('-------------------------------------------------------------------------------')\r\n                print(table([[exchange.iso8601(o[0])] + o[1:] for o in ohlcvs]))\r\n            except Exception as e:\r\n                print(type(e).__name__, str(e))\r\n                break\r\n        await exchange.close()\r\n    else:\r\n        print(exchange.id, method, 'is not supported or not implemented yet')\r\n\r\n\r\nrun(main())\r\n```\r\nOutput looks like this\r\n```\r\nCCXT Pro version 3.0.79\r\n\r\n===============================================================================\r\nLoop iteration: 0 current time: 2023-05-07T06:42:00.151Z ETH/USDT 1m\r\n-------------------------------------------------------------------------------\r\n2023-05-07T06:41:00.000Z | 1902.53 | 1902.59 | 1902.52 | 1902.59 | 30.4667\r\n\r\n===============================================================================\r\nLoop iteration: 1 current time: 2023-05-07T06:42:03.130Z ETH/USDT 1m\r\n-------------------------------------------------------------------------------\r\n2023-05-07T06:42:00.000Z | 1902.58 | 1902.59 | 1902.58 | 1902.59 | 17.8681\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17822/comments",
    "author": "AndreiMihalea",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-05-07T20:16:55Z",
        "body": "Hi @AndreiMihalea , by default the watch methods only return the updates it receives from the exchange, that's why you only receive one message at a time.\r\nWe do however cache all the messages, so if you wish to see them you can set the option. `exchange.newUpdates = false` so it returns the full cache.\r\nAlso if you want the historic ohlcv you can use `fetchOHLCV`\r\n\r\nLet me know if you have any questions, if not feel free to close the issue."
      },
      {
        "user": "AndreiMihalea",
        "created_at": "2023-05-07T21:59:04Z",
        "body": "Thank you for the reply, @pcriadoperez. It indeed works with the `fetchOHLCV` method."
      }
    ]
  },
  {
    "number": 17818,
    "title": "Setting timeout and reconnect wait time for ws streams",
    "created_at": "2023-05-06T19:17:57Z",
    "closed_at": "2023-05-06T20:43:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17818",
    "body": "### Operating System\n\nWindows & Linux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n-\n\n### Description\n\nIs there a way to programmatically set the timeout property and a reconnect wait time for the websocket streams ? \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17818/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-05-06T20:39:05Z",
        "body": "Hi @spc789 ,\r\n\r\nYou can set the property `exchange['streaming']['keepAlive']` which is the ping-pong keep-alive rate in milliseconds\r\n\r\nFor the reconnect, by default if the connection is lost we reconnect when the next time the `watch` function is called. To control the timming, we throw an error when there is a disconnect, so in the try.. catch.. clause you could look for that error and set a reconnect time.\r\n\r\nI hope this answers the question, if not let me know or feel free to close the issue"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-06T20:43:53Z",
        "body": "Thx for the answer !"
      }
    ]
  },
  {
    "number": 17769,
    "title": "Bybit watch_ticker() does not return values",
    "created_at": "2023-05-03T17:29:26Z",
    "closed_at": "2023-11-22T19:49:44Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17769",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.0.90\n\n### Description\n\nHi,\r\n\r\nBybit watch_ticker() seems broken for spot. Works fine for perpetual swaps. \n\n### Code\n\n```\r\nimport asyncio\r\nimport ccxt.pro as ccxt\r\n\r\nbybit = ccxt.bybit()\r\nasyncio.run(bybit.watch_ticker(\"BTC/USDT\"))  # this hangs forever\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17769/comments",
    "author": "mrpouley",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-03T17:36:53Z",
        "body": "Hello @mrpouley,\r\nYou need to set `defaultType = spot` because bybit has conflicting ids. "
      },
      {
        "user": "mrpouley",
        "created_at": "2023-05-03T18:01:11Z",
        "body": "It works, thanks.\r\nSo it's not possible to call watch_ticker() on both spot and futures using the same exchange object, am i correct?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-04T10:44:28Z",
        "body": "> It works, thanks. So it's not possible to call watch_ticker() on both spot and futures using the same exchange object, am i correct?\r\n\r\n@mrpouley As of now it is not possible, but we will try to fix this issue in the future"
      },
      {
        "user": "philipperemy",
        "created_at": "2023-11-22T12:29:40Z",
        "body": "It would be good if this issue could be addressed. Not being able to use bybit spot with ccxt pro is not ideal."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-22T12:55:47Z",
        "body": "@philipperemy @mrpouley After the v5 migration, this should work, you should be able to do\r\n```Python\r\nawait bybit.watch_ticker('BTC/USDT')\r\nawait bybit.watch_ticker('BTC/USDT:USDT')\r\n```\r\nwith no issues as long as you have an updated version of ccxt"
      },
      {
        "user": "frosty00",
        "created_at": "2023-11-22T19:49:40Z",
        "body": "yep, ccxt 3.0 is very old..."
      },
      {
        "user": "philipperemy",
        "created_at": "2023-11-23T00:03:37Z",
        "body": "@carlosmiei so it works but the `bid` and the `ask` are equal to `None` when it comes to spot instruments."
      },
      {
        "user": "philipperemy",
        "created_at": "2023-11-23T00:04:50Z",
        "body": "Latest ccxt (ccxt-4.1.61)\r\n*code*\r\n```python\r\nimport asyncio\r\n\r\nimport ccxt.pro\r\n\r\nbybit = ccxt.pro.bybit()\r\nprint(asyncio.run(bybit.watch_ticker('BTC/USDT')))\r\n```\r\n\r\n*result*\r\n```\r\n{'symbol': 'BTC/USDT', 'timestamp': 1700697865426, 'datetime': '2023-11-23T00:04:25.426Z', 'high': None, 'low': 35822.01, 'bid': None, 'bidVolume': None, 'ask': None, 'askVolume': None, 'vwap': 36870.1403687674, 'open': 35829.61, 'close': 37445.77, 'last': 37445.77, 'previousClose': None, 'change': 1616.16, 'percentage': 4.51, 'average': 36637.69, 'baseVolume': 11610.147233, 'quoteVolume': 428067758.18276644, 'info': {'symbol': 'BTCUSDT', 'lastPrice': '37445.77', 'highPrice24h': '37864.94', 'lowPrice24h': '35822.01', 'prevPrice24h': '35829.61', 'volume24h': '11610.147233', 'turnover24h': '428067758.18276642', 'price24hPcnt': '0.0451', 'usdIndexPrice': '37451.710000000001'}}\r\n```\r\n\r\nAdding `{'options': {'defaultType': 'spot'}}` does nothing to it."
      }
    ]
  },
  {
    "number": 17753,
    "title": "unsupported operand type(s) for %: 'int' and 'NoneType' in watchTicker",
    "created_at": "2023-05-02T16:52:55Z",
    "closed_at": "2023-05-02T17:38:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17753",
    "body": "### Operating System\r\n\r\nLinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.78\r\n\r\n### Description\r\n\r\nThe *complete* (just fill in an api and secret) code below throws the \r\n\r\n> unsupported operand type(s) for %: 'int' and 'NoneType' \r\n\r\nerror.\r\n\r\nCould it be there's an error somewhere in the watchTicker function ?\r\n\r\nI tried with symbol = 'ETH/USDT', symbol = 'ETH/USDT:USDT' and 'ETH-USDT'\r\n\r\n### Code\r\n\r\n```\r\n#!/usr/bin/python3.8\r\nimport ccxt\r\nimport ccxt.pro as ccxtpro\r\nimport os, sys, platform, traceback\r\nimport socket, requests\r\nimport pprint\r\nimport asyncio, aiohttp\r\nimport uvloop\r\n\r\nasync def watch_ticker(exchange):\r\n    while True:\r\n        try:\r\n            symbol = 'ETH/USDT'\r\n            print (symbol)\r\n            tck = await exchange.watchTicker(symbol)\r\n            pp.pprint(tck)\r\n        except Exception as e:\r\n            print(f\"{e}\")\r\n            exc_type, exc_obj, exc_tb = sys.exc_info()\r\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n            print(exc_type, fname, exc_tb.tb_lineno)\r\n            await exchangepro.close()\r\n\r\n######################################\r\n### MAIN PROGRAM STARTS HERE \r\nasync def main():\r\n    tasks = []\r\n\r\n    tasks.append(asyncio.create_task(watch_ticker(exchangepro)))\r\n\r\n    try:\r\n        await asyncio.gather(*tasks)\r\n\r\n    except (ccxt.RequestTimeout, ccxt.NetworkError) as e:\r\n        print(f\"Request error occurred: {e} ...\")\r\n\r\n    except Exception as e:\r\n        print(f\"{e}\")\r\n        exc_type, exc_obj, exc_tb = sys.exc_info()\r\n        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n        print(exc_type, fname, exc_tb.tb_lineno)\r\n        await exchangepro.close()\r\n\r\n########################################\r\n### WRAPPER FOR MAIN PROGRAM\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': False,\r\n})\r\n  \r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n\r\ntry:\r\n    if os.name.upper() != 'NT':\r\n        uvloop.install()\r\n    if os.name.upper() == 'NT':\r\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\r\n\r\n    asyncio.run(main(), debug=False)\r\n\r\nexcept KeyboardInterrupt:\r\n    print(\"Program interrupted by user\")\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17753/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:10:33Z",
        "body": "Hello  @spc789 is it possible to share the complete stacktrace? \r\nAlso, do you get that error immediately? \r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-02T17:16:10Z",
        "body": "Error comes immediately\r\nComplete stack trace : \r\n\r\nTraceback (most recent call last):\r\n>  File \"./CCXT\", line 20, in watch_ticker\r\n>    tck = await exchange.watchTicker(symbol)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 702, in watch_ticker\r\n>    url = self.urls['api']['ws'][type] + '/' + self.stream(type, messageHash)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 108, in stream\r\n>    normalizedIndex = streamIndex % streamLimit\r\n>TypeError: unsupported operand type(s) for %: 'int' and 'NoneType'\r\n><class 'NameError'> selfGrid-CCXT-WS-TICKERTEST 23\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:26:14Z",
        "body": "@spc789 Ok found the issue, basically you can't do this:\r\n\r\n```Python\r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n```\r\nbecause you override and delete all the other options, you should be doing this instead:\r\n\r\n```Python\r\ncustomOptions = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'\r\n}\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': os.environ['BINANCEUSDM_APIKEY'],\r\n    'secret': os.environ['BINANCEUSDM_SECRET'],\r\n    'enableRateLimit': False,\r\n    'options': customOptions\r\n})\r\n```\r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-02T17:31:09Z",
        "body": "Works like a charm ... obrigado senhor for the quick reply !"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:38:31Z",
        "body": "> Works like a charm ... obrigado senhor for the quick reply !\r\n\r\n@spc789 no problem 😁 let us know if anything!"
      }
    ]
  },
  {
    "number": 17718,
    "title": "load_markets v/s fetch_markets (pairs dict differences)",
    "created_at": "2023-04-30T08:22:43Z",
    "closed_at": "2023-05-01T22:47:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17718",
    "body": "### ؜\n\nCCXT ver 2.2.36 / Win-10 / python 3.7\r\n\r\nGetting available trading-pairs via load_markets may bring less results compared to fetch_markets for some exchanges.\r\nSo far I noticed two types of differences:\r\n\r\nA) Duplicate-pairs (totally identical records) are brought by fetch_market (while load_market doesn't). Example: For bitFlier exchange BTC_JPY and ETH_BTC pairs, occuring 3 times each in fetch_market result.\r\n\r\nB) Multiple pairs of the same symbol with different id are all brought by fetch_markets (while load_market brings only one of them). Example: For Binance exchange fetch_markets brings symbol BCH/BTC with 2 different ids (BCHBTC and BCHABCBTC), while load_markets brings only one id (BCHBTC). ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17718/comments",
    "author": "avmarko",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-30T10:41:35Z",
        "body": "Hello @avmarko,\r\n\r\n`fetchMarkets` returns an array of parsed markets whereas `loadMarkets` returns a dictionary indexed by the unified symbol, which is why you don't see repeated entries. For instance, binance has conflicting ids between spot and linear swap markets, so it is expected to see `id: BTCUSDT` twice on the array returned by `fetchMarkets` . The same does not happen with `loadMarkets` because our unified symbols do not have this ambiguity so you will get one entry with `key = 'BTC/USDT` referring to the spot market and another with `key = 'BTC/USDT:USDT` referring to the linear swap market. "
      },
      {
        "user": "avmarko",
        "created_at": "2023-04-30T17:32:46Z",
        "body": "Understood :-) \r\nThank you @carlosmiei "
      }
    ]
  },
  {
    "number": 17679,
    "title": "Deribit not able to fetch order book       TypeError: can only concatenate str (not \"NoneType\") to str",
    "created_at": "2023-04-26T11:00:27Z",
    "closed_at": "2023-04-26T11:24:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17679",
    "body": "### ؜\n\nOS: Windows 10\r\nProgramming Language version: Python\r\nCCXT version: 3.0.75\r\n\r\n\r\nHello, suddenly fetching order book isn't working anmory. \r\nI get the following error:   TypeError: can only concatenate str (not \"NoneType\") to str\r\n\r\n\r\nderibit = ccxt.deribit({\r\n    'enableRateLimit': True,\r\n    'apiKey': deribitconfig.api_key,\r\n    'secret': deribitconfig.api_secret,\r\n    })\r\n\r\nsymbol = 'ETH/USD:ETH'\r\n\r\nparams = {\"type\":\"swap\",\"code\":\"ETH\"}\r\nob = deribit.fetch_order_book(symbol, params)\r\nprint(ob)\r\n\r\n\r\n\r\n  File \"c:\\users\\dell\\desktop\\bybit\\deribittest2023.py\", line 91, in <module>\r\n    ob = deribit.fetch_order_book(symbol, params)\r\n\r\n  File \"C:\\Users\\Dell\\anaconda3\\Lib\\site-packages\\ccxt\\deribit.py\", line 1356, in fetch_order_book\r\n    self.load_markets()\r\n\r\n  File \"C:\\Users\\Dell\\anaconda3\\Lib\\site-packages\\ccxt\\base\\exchange.py\", line 1459, in load_markets\r\n    markets = self.fetch_markets(params)\r\n\r\n  File \"C:\\Users\\Dell\\anaconda3\\Lib\\site-packages\\ccxt\\deribit.py\", line 667, in fetch_markets\r\n    symbol = base + '/' + quote + ':' + settle\r\n\r\nTypeError: can only concatenate str (not \"NoneType\") to str",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17679/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-26T11:23:26Z",
        "body": "Hello @Nitrix321,\r\nThat issue is solved at 3.0.76+.\r\nCan you please update your ccxt version and try again?"
      }
    ]
  },
  {
    "number": 17670,
    "title": "Is it possible to accelerate the transfer between exchanges",
    "created_at": "2023-04-25T17:11:51Z",
    "closed_at": "2023-04-26T10:38:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17670",
    "body": "### ؜\n\nHi all,\r\n\r\nI write a script which sends USD form Binance over the BNB Network to another exchange, where the USDT are used to trade and finally the purchased amount of coins transfers back to Binance.\r\n\r\nIs there a way to accelerate the transfer, or can I not influence the network speed at all. I understand that it probably depends on the load of the network, but maybe? :)\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17670/comments",
    "author": "AntonDe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-26T10:22:53Z",
        "body": "Hello @AntonDe,\r\nIf you're transferring from exchange A to exchange B I don't think so because, besides the time it takes to broadcast and accept the transaction, you also have to wait for the approval of the exchange (actually, that takes most of the time). If you're withdrawing from a self-hosted wallet you can try to increase the gas price/fee a bit so your tx has a higher priority on the mem pool.  "
      }
    ]
  },
  {
    "number": 17631,
    "title": "[Question] FetchStatus",
    "created_at": "2023-04-21T21:59:45Z",
    "closed_at": "2023-04-22T12:43:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17631",
    "body": "### ؜\n\nHi, \r\n\r\nI have been having trouble to find the answer by myself through the ccxt documentation. So I have no choice to ask it here. \r\nI would like to use exchange.fetchStatus() to do a initial check before running my script. \r\n\r\nBut I wonder, what will be expected response if an exchange goes into maintenance mode? \r\nHow will the 'eta' response be like? In seconds or date time? \r\n\r\nBecause i am implementing a loop that will sleep until the ETA time before running the remaining code if it goes into maintenance mode. \r\n\r\nSorry if this answer can be found, because i really didn't manage to find it. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17631/comments",
    "author": "300Gram",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-22T01:12:04Z",
        "body": "Hi @300Gram \r\n\r\nIf the exchange start maintenance mode, the statue would be `maintenance`.\r\n\r\nIt seems not so much exchange response  `eta` (only see bitmart), and the data would be timestamp in ms.\r\n\r\nLet me know if you have any other issues."
      },
      {
        "user": "300Gram",
        "created_at": "2023-04-22T12:23:06Z",
        "body": "Thank you so much! "
      }
    ]
  },
  {
    "number": 17608,
    "title": "Could not create 'Nonce' for Bigone jwt",
    "created_at": "2023-04-19T15:49:53Z",
    "closed_at": "2023-04-20T02:37:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17608",
    "body": "### ؜\n\nHi there,\r\n\r\nI'm trying to read the balance from my Bigone account using a python script.\r\nBeside the API_Key and Secret, there is also an JWT I need. But when I create the jwt, I always get an error:\r\n\r\nccxt.base.errors.AuthenticationError: bigone {\"code\":40004,\"message\":\"nonce expired\"} \r\n\r\nI have try everything, but get still the same error. Here is my code:\r\n\r\n`\r\nbigoneApi = os.environ.get('BIGONE_API_KEY')\r\nbigoneSecret = os.environ.get('BIGONE_SECRET')\r\n\r\nissuedAt = int(time.time())\r\nexpiration = int(time.time()) + 432000 # JWT will expire in 5 days\r\nnonce = int(time.time() * 1000)\r\n\r\npayload = {\r\n    \"type\": \"OpenAPI\",\r\n    \"sub\": bigoneApi,\r\n    \"iat\": issuedAt,\r\n    \"exp\": expiration,\r\n    \"nonce\": nonce\r\n}\r\n\r\nbigoneToken = jwt.encode(payload, bigoneSecret, algorithm='HS256')\r\nbigoneEx = ccxt.bigone({\r\n    'apiKey': bigoneApi,\r\n    'secret': bigoneSecret,\r\n    'headers': {\r\n        'Authorization': 'Bearer ' + bigoneToken\r\n    }\r\n})`\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17608/comments",
    "author": "AntonDe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-19T16:25:07Z",
        "body": "Hello @AntonDe,\r\nCCXT already does the signing logic for you why are you trying to do it manually? You just need to provide the apiKey and secret (token in this case).\r\n"
      },
      {
        "user": "AntonDe",
        "created_at": "2023-04-19T16:40:35Z",
        "body": "You are right, by using Binance exchange for example I just provide the API and Secret. Bigone needs an JWT set, in other case by just setting the API and Secret and trying to get the balance from Bigone exchange. I get the error: \r\n\r\ninvalid jwt"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-04-19T17:14:36Z",
        "body": "> You are right, by using Binance exchange for example I just provide the API and Secret. Bigone needs an JWT set, in other case by just setting the API and Secret and trying to get the balance from Bigone exchange. I get the error:\r\n> \r\n> invalid jwt\r\n\r\n@AntonDe What is your ccxt version? I just tested and seems to be working fine\r\n\r\n```\r\nPython v3.10.9\r\nCCXT v3.0.72\r\nbigone.fetchBalance()\r\n{'1INCH': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE3L': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE3S': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE5L': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE5S': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'ABBC': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n```\r\n"
      },
      {
        "user": "AntonDe",
        "created_at": "2023-04-20T02:40:31Z",
        "body": "It seems, that I have an error in my secret. I do not checking this because I was implementing the Bigone object with my key and secret, run .get_prices(exchange) on that object, and this do not return any errors, also as I was asking for the balance, the error said: 40004 invalid jwt instead of invalid secret :)\r\nTank you @carlosmiei "
      }
    ]
  },
  {
    "number": 17514,
    "title": "Opening stop loss and take profit orders on Bybit",
    "created_at": "2023-04-09T10:11:46Z",
    "closed_at": "2023-05-06T10:33:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17514",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.9\r\n\r\n### Description\r\n\r\nI'm trying to create a stop loss and take profit for my order on bybit with ccxt.\r\n\r\n\r\n\r\n### Code\r\n\r\nI've tried the following:\r\n(1)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLoss' : stop_loss,\r\n            'takeProfit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(2)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLossPrice' : stop_loss,\r\n            'takeProfitPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(3)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stop_loss' : stop_loss,\r\n            'take_profit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n\r\n\r\n(4)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopPrice' : stop_loss,\r\n            'triggerPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\nI'm either getting the following error:\r\n```\r\nError: bybit {\"retCode\":10001,\"retMsg\":\"Request parameter error.\",\"result\":{},\"retExtInfo\":{},\"time\":1681034354617}\r\n```\r\n\r\nOr it opens a limit order for the stop loss and it ignores the take profit limit order and market order.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17514/comments",
    "author": "ambiflextrous",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-10T04:48:10Z",
        "body": "Hi @weslienlive\r\n\r\nThe bug was incorrect data type of stopLoss/takeProfit (should be string). We already fixed last week. Please update ccxt. Let me know if you have any other issues."
      },
      {
        "user": "ambiflextrous",
        "created_at": "2023-04-10T07:18:34Z",
        "body": "Thank you, it works now.  Got another question, why when I set the leverage to 1 in the exchange it's 10?"
      }
    ]
  },
  {
    "number": 17479,
    "title": "Fetch oldest candles on BitGet, no response",
    "created_at": "2023-04-04T21:23:55Z",
    "closed_at": "2023-04-06T06:21:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17479",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.52\n\n### Description\n\nHi @carlosmiei,\r\n\r\nI'm trying to retrieve the oldest candles for a symbol on BitGet.\r\nI use a large time frame to estimate the first market time.\r\nBut no candle is returned.\r\nSee example.\r\nWork fine on Binance and ByBit.\n\n### Code\n\n```\r\n      const exchange = new ccxt['bitget']()\r\n\r\n    // big time frame\r\n    let ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1w')\r\n\r\n    let firstMonthCandle = ohlcvRawList[0]\r\n    const timeStart = firstMonthCandle[0]\r\n\r\n    const timeStartTenMonthAfter = timeStart + 60 * 60 * 24 * 30 * 10 * 1000\r\n\r\n    console.log('first month candle', firstMonthCandle)\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStart)\r\n    console.log(ohlcvRawList.length) // 0\r\n\r\n    // try 10 months after\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStartTenMonthAfter)\r\n    console.log(ohlcvRawList.length) // 0\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17479/comments",
    "author": "dawadam",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-05T02:30:43Z",
        "body": "Hi @dawadam \r\n\r\nAfter test, it seems you can fetch data within 30 days for 1h (the documentations said for `1m` candles)"
      },
      {
        "user": "dawadam",
        "created_at": "2023-04-05T16:58:01Z",
        "body": "Ok, not a bug, juste exchange sucks."
      }
    ]
  },
  {
    "number": 17448,
    "title": "ccxt.coinbase.create_order()",
    "created_at": "2023-04-03T04:27:06Z",
    "closed_at": "2023-04-30T07:16:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17448",
    "body": "### Operating System\r\n\r\nwindows11\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.50\r\n\r\n### Description\r\n\r\n```python\r\nin create_order():\r\nresponse = self.v3PrivatePostBrokerageOrders(self.extend(request, params))\r\nsuccess = self.safe_value(response, 'success')\r\nif success is not True:\r\n      raise BadRequest(self.id + ' createOrder() has failed, check your arguments and parameters')\r\n```\r\nquestion: Please also raise the response error when success is false\r\n\r\n### Code\r\n\r\n```python\r\nresponse = self.v3PrivatePostBrokerageOrders(self.extend(request, params))\r\nsuccess = self.safe_value(response, 'success')\r\n if success is not True:\r\n      raise BadRequest(self.id + ' createOrder() has failed, check your arguments and parameters')\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17448/comments",
    "author": "ZengYuQin",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-04-03T20:51:33Z",
        "body": "> question: Please also raise the response error when success is false\r\n\r\nIf success is `False` then `success is not True` will be a true statement, meaning that the response error will already be raised"
      }
    ]
  },
  {
    "number": 17447,
    "title": "ccxt.coinbase.fetch_ticker()",
    "created_at": "2023-04-03T04:09:35Z",
    "closed_at": "2023-04-18T02:50:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17447",
    "body": "### Operating System\r\n\r\nwindows11\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.50\r\n\r\n### Description\r\n\r\nThere is a problem when I use the method ccxt.coinbase.fetch_ticker():\r\n\r\n1. The bid and ask obtained by `fetchTickerV3` are both `None`; The result is:\r\n```python\r\n{'symbol': 'AVAX/USDT', 'timestamp': None, 'datetime': None, 'bid': None, 'ask': None, 'last': 16.96, 'high': None, 'low': None, 'bidVolume': None, 'askVolume': None, 'vwap': None, 'open': None, 'close': 16.96, 'previousClose': None, 'change': None, 'percentage': None, 'average': None, 'baseVolume': None, 'quoteVolume': None, 'info': {'trade_id': '3213620', 'product_id': 'AVAX-USDT', 'price': '16.96', 'size': '0.45', 'time': '2023-04-03T03:51:47.395232Z', 'side': 'SELL', 'bid': '', 'ask': ''}}.\r\n```\r\n2. fetchTickerV2 cannot fetch the USDT currency and will report an error: \r\n```python\r\n'coinbase {\"errors\":[{\"id\":\"not_found\",\"message\":\"Invalid currency\"}]}';\r\n```\r\n### Code\r\n\r\n```python\r\nexchange = ccxt.coinbase()\r\nexchange.options['fetchTicker'] = 'fetchTickerV2'\r\nticker = exchange.fetch_ticker('AVAX/USDT')  \r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17447/comments",
    "author": "ZengYuQin",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-04-03T21:15:53Z",
        "body": "> Coinbase tickers uses - instead of / ex. BTC-USD\r\n\r\nUsing `/` will still work.\r\n\r\nWith `fetchTickersV2` using `USDT` won't work, you need to use `USD`\r\n\r\n-----------------\r\n\r\n> The bid and ask obtained by fetchTickerV3 are both None; The result is:\r\n\r\nThe bid and ask both have a value when I use `fetchTickerV3`\r\n\r\n```\r\nPython v3.11.2\r\nCCXT v3.0.64\r\ncoinbase.fetchTicker(BTC/USDT)\r\n{'ask': 29479.02,\r\n 'askVolume': None,\r\n 'average': None,\r\n 'baseVolume': None,\r\n 'bid': 29474.63,\r\n 'bidVolume': None,\r\n 'change': None,\r\n 'close': 29472.61,\r\n 'datetime': None,\r\n 'high': None,\r\n 'info': {'ask': '',\r\n          'bid': '',\r\n          'price': '29472.61',\r\n          'product_id': 'BTC-USDT',\r\n          'side': 'SELL',\r\n          'size': '0.00925482',\r\n          'time': '2023-04-18T02:46:11.041275Z',\r\n          'trade_id': '12314629'},\r\n 'last': 29472.61,\r\n 'low': None,\r\n 'open': None,\r\n 'percentage': None,\r\n 'previousClose': None,\r\n 'quoteVolume': None,\r\n 'symbol': 'BTC/USDT',\r\n 'timestamp': None,\r\n 'vwap': None}\r\n ```"
      },
      {
        "user": "samgermain",
        "created_at": "2023-04-18T02:50:16Z",
        "body": "I'm going to close this issue because it looks solved, feel free to reopen it if you have any more questions"
      }
    ]
  },
  {
    "number": 17307,
    "title": "exchange.loadMarkets() returns unsupported TUSD pairs for Binance",
    "created_at": "2023-03-22T20:01:41Z",
    "closed_at": "2023-03-23T12:39:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17307",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.23\n\n### Description\n\nThe symbols returned when using exchange.loadMarkets() with Binance returns the following TUSD trading pairs:\r\n\r\nADA/TUSD\r\nALGO/TUSD\r\nANKR/TUSD\r\nATOM/TUSD\r\nBAT/TUSD\r\nBCH/TUSD\r\nBCPT/TUSD\r\nBNB/TUSD\r\nBSV/TUSD\r\nBTC/TUSD\r\nBTT/TUSD\r\nEOS/TUSD\r\nETC/TUSD\r\nETH/TUSD\r\nFTM/TUSD\r\nGTO/TUSD\r\nLINK/TUSD\r\nLTC/TUSD\r\nNEO/TUSD\r\nONE/TUSD\r\nPAX/TUSD\r\nPHB/TUSD\r\nTFUEL/TUSD\r\nTRX/TUSD\r\nTUSD/BNB\r\nTUSD/BTC\r\nTUSD/BUSD\r\nTUSD/ETH\r\nTUSD/USDT\r\nTUSDB/TUSD\r\nUSDC/TUSD\r\nUSDS/TUSD\r\nWAVES/TUSD\r\nXLM/TUSD\r\nXRP/TUSD\r\nZEC/TUSD\r\n\r\nOf these, only the following are actually available on Binance:\r\nBNB/TUSD\r\nBTC/TUSD\r\nETH/TUSD\r\nTUSD/USDT\r\n\r\nPerhaps this is a problem on the Binance side, but reporting it just in case.\r\n\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17307/comments",
    "author": "hodlerhacks",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-23T12:39:32Z",
        "body": "Hello @hodlerhacks,\r\nThanks but if you look closely the market has `active:false` meaning that the market exists but is not available for trading"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-03-23T12:55:35Z",
        "body": "Ah, I learned something new, thanks!!"
      }
    ]
  },
  {
    "number": 17276,
    "title": "How to exit trade / close Position with market Order on Huobi Futures?",
    "created_at": "2023-03-20T16:04:53Z",
    "closed_at": "2023-03-21T10:16:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17276",
    "body": "### ؜\n\nOS: Windows 10\r\nProgramming Language version: Python Spider\r\nCCXT version: ccxt-2.8.5\r\n\r\nHello, is there really no possibillity to close a position with market order on Huobi Futures?\r\n\r\nIf I try to close or create a position the following Error message occurs. \r\n\r\nExchangeError: huobi {\"status\":\"error\",\"err_code\":1049,\"err_msg\":\"Open a position with market price is not available.contracts\",\"ts\":1679326995957}\r\n\r\nI already had 2 big losses because the stop limit order has not been triggered. \r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17276/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-21T10:16:28Z",
        "body": "Hello @Nitrix321,\r\nHuobi does not explicitly offer a `market` type, but I think you can use the `opponent` type (with `reduce_only` flag) to emulate a market closing order.\r\n\r\nAssuming that you have currently opened a long `ADA/USDT:USDT` position,  you can do this to close it immediately: \r\n\r\n```Python\r\ncancel = huobi.create_order('ADA/USDT:USDT', 'opponent', 'sell', 1, {'reduce_only':true})\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-03-21T16:09:44Z",
        "body": "Hi @carlosmiei thank you again friend :-). I will test it soon. That could help me a lot! "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-21T16:13:03Z",
        "body": "> Hi @carlosmiei thank you again friend :-). I will test it soon. That could help me a lot!\r\n\r\n@Nitrix321 no problem, let us know if anything!"
      }
    ]
  },
  {
    "number": 17263,
    "title": "How to correctly get tokens that have the same short names, but which are different in essence?",
    "created_at": "2023-03-19T13:54:17Z",
    "closed_at": "2023-03-19T17:24:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17263",
    "body": "### Operating System\r\n\r\nWindows 10 \r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n2.8.31\r\n\r\n### Description\r\n\r\nFor a concrete example, I want to get information about the GAS token on two exchanges, mexc and gate. However, what is called GAS(but GAS here is only the example, there are a lot of same tokens with such names) in Mex is actually GAS_DAO, on the gate the full name of the GAS token is also GAS. This is a different coin with a different price and with a different contract. How can I separate these concepts and get information about GAS(GAS), and not about GAS_DAO. I tried using load_market, fetch_markets and fetch_tickers. I noticed that it's not a bad idea to compare coins by code. But I don't understand how to get a coin by code.(2 part of code). Sorry if this is a dumb question, I'm just really stuck\r\n\r\n### Code\r\n\r\n```\r\nimport ccxt\r\n\r\nexchange1 = ccxt.mexc3()\r\nexchange2 = ccxt.gate()\r\n\r\nexchange1.load_markets()\r\nexchange2.load_markets()\r\nmarkets1 = exchange1.currencies\r\nmarkets2 = exchange1.currencies\r\n\r\nprint(markets1['GAS'])\r\nprint(markets2['GAS'])  \r\n\r\nUsing codes\r\n\r\nimport ccxt\r\n\r\nexchange1 = ccxt.gate()\r\nexchange2 = ccxt.mexc()\r\n\r\nsymbols1 = exchange1.load_markets()\r\nsymbols2 = exchange2.load_markets()\r\n\r\nprint(exchange1.currency('GASDAO')['code']) #GASDAO\r\nprint(exchange2.currency('GAS')['code'])  # GASDAO\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17263/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-03-19T17:24:56Z",
        "body": "Hi @AlwxDavydov , So ccxt unifies the codes so it's the same across all exchanges. In the case of GASDAO, we use GASDAO.\r\nAlso for most functions we accept both the unified ccxt code and also the exchange code. So in the example of mexc, mexc uses the code GAS for GASDAO, this is why you can call both `mexc.currency('GAS')` and `mexc.currency('GASDAO') and both will return GASDAO. As the first will reference the mexc's code for GASDAO and the second case it will recognize ccxt's unified code GASDAO.\r\n\r\nThis is a bit of a unique case because the exchange code mexc uses is the same as the code ccxt uses for a different currency(GAS).\r\n\r\nIn the case of gate, it does support both currencies GAS and GASDAO. So `gate.currency('GAS')` will return the GAS currency and `gate.currency('GASDAO')` will return the GASDAO currency.\r\n\r\nI hope this answers your question. I'll close the issue for now but feel free to reach out with any other questions!"
      }
    ]
  },
  {
    "number": 17261,
    "title": "phemex orderID missing from fetch_position",
    "created_at": "2023-03-19T11:33:57Z",
    "closed_at": "2023-03-19T17:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17261",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nI was using fetch_positions to findout orderID, so I can use edit_order.\r\nHowever, there is no way to get orderID in there.\r\nCan you make some example for it or fix the function?\r\nThere is no way to use edit_order function since there is no way to get orderID even if I have position.\r\n\r\nI keep getting such as below\r\n`{'collateral': 0.0125929,\r\n 'contractSize': 1.0,\r\n 'contracts': 2.0,\r\n 'datetime': None,\r\n 'entryPrice': 27122.3217,\r\n 'hedged': False,\r\n 'id': None,`\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17261/comments",
    "author": "yongguncodework",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-03-19T17:54:29Z",
        "body": "Hi @yongguncodework , In the case of positions, there is not an assoiciated order id, as it could have been created by several different orders. If you wish to change your existing position you can use `create_order` to create a new order to either increase or reduce your position.\r\n\r\nI hope this answers your question, I'll close the issue for now but feel free to reach out with any more questions."
      },
      {
        "user": "yongguncodework",
        "created_at": "2023-03-24T02:36:16Z",
        "body": "@pcriadoperez Hi Thank you for the answer.\r\nCould you answer one more thing for me?\r\nI was checking the edit_order in phemex part and I got confuse.\r\nfor example if I have an order that is placed at 25000 and wish to switch to 24000 buy order, how should I write it?\r\ni was trying, but got stuck here.\r\n\r\n```\r\nchecking_orders = exchange.fetch_open_orders(symbol = symbol2, params=params)\r\n# Get 1st order id\r\n1st_order_id = checking_orders [0]['info']['id']\r\nmy_edit_order = exchange.edit_order(id=1st_order_id , symbol=my_symbol, type=\"Limit\", side=\"Buy\", price =\"This part is the question\", amount=\"1000\", params={})\r\n\r\n```\r\nCan you help me for this question? I wonder how to edit the current holding order."
      }
    ]
  },
  {
    "number": 17236,
    "title": "(HELP) I want to fetch Mark Price in Binance. What is the problem in my code?",
    "created_at": "2023-03-17T18:15:06Z",
    "closed_at": "2023-03-22T16:04:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17236",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\ndef getMarkPrice_FuturesUSD(exchange):\r\n\r\n#     try:\r\n        ecg = eval(\"ccxt.\" + exchange.lower() +\r\n                   \"(config={'apiKey':API_KEY_\" + exchange.lower() +\r\n                   \",'secret':SECRET_KEY_\" + exchange.lower() +\r\n                   \",'enableRateLimit':True,'options':{'defaultType':'swap'}})\")\r\n\r\n        result = ecg.futures_fetch_mark_price('XRP/USDT', 'swap')\r\n        pprint(result) #\r\n\r\n--------------------------------------------\r\ngetMarkPrice_FuturesUSD('BINANCE')\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17236/comments",
    "author": "BamsoonPapa",
    "comments": [
      {
        "user": "AlgoQ",
        "created_at": "2023-03-22T16:04:55Z",
        "body": "Try this:\r\n\r\n```py\r\nimport ccxt\r\n\r\nexchange = ccxt.binance()\r\nsymbol = 'XRP/USDT:USDT'\r\ntimeframe = '1m'\r\n\r\nohlcv = exchange.fetchOHLCV(symbol, timeframe, None, None, {'price': 'mark'})\r\nprint(ohlcv)\r\n```"
      }
    ]
  },
  {
    "number": 17190,
    "title": "CoinEx Websocket watch_orders()",
    "created_at": "2023-03-15T13:50:01Z",
    "closed_at": "2023-05-21T18:53:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17190",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.7.23\n\n### Description\n\nWhen trying to use the CCXT pro websocket function watch_orders for CoinEx I get this error:\r\n```\r\nTypeError: a coroutine was expected, got <Future pending>\r\n```\r\n\r\nThe same code works fine for other exchanges.\r\n\r\nCode I'm executing:\r\n```\r\norders = await ccxt.watch_orders()\r\n```\n\n### Code\n\n_No response_",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17190/comments",
    "author": "MikaelLind",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-15T14:51:59Z",
        "body": "Hello @MikaelLind,\r\nThat issue should be fixed already, can you try to update your ccxt versions?"
      },
      {
        "user": "MikaelLind",
        "created_at": "2023-03-15T15:01:56Z",
        "body": "@carlosmiei - do you know in which version this is resolved in?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-15T15:23:19Z",
        "body": "> @carlosmiei - do you know in which version this is resolved in?\r\n\r\n@MikaelLind Yes, it should be fixed in any version >= 2.9.4"
      },
      {
        "user": "MikaelLind",
        "created_at": "2023-03-16T09:10:10Z",
        "body": "@carlosmiei I still have the same problem after updating to the lastest version of ccxt"
      },
      {
        "user": "wenrenyueke",
        "created_at": "2023-04-02T06:58:15Z",
        "body": "\r\nI still have the same problem after updating to 3.0.35 version of ccxt,\r\nwith 3.11.2 version of python\r\n"
      },
      {
        "user": "jonatw",
        "created_at": "2023-04-17T20:06:36Z",
        "body": "I got the same issue with 3.0.69 version\r\n\r\nwhen I try to my own order status using watch_orders function\r\n\r\n```\r\n    coinex = ccxt.pro.coinex({\r\n        'apiKey': api_secret['coinex']['access_key'],\r\n        'secret': api_secret['coinex']['secret_key'],\r\n        'enableRateLimit':True,\r\n        'options': {\r\n            'defaultType': 'swap'\r\n        }\r\n    })\r\n```\r\n\r\n\r\nit works okay with public api such as \r\n\r\n```\r\nawait coinex.load_fees()\r\nawait coinex.load_markets()\r\n```\r\n\r\n\r\nbut when I call the private api, the error shows up\r\n\r\n```\r\norder = await coinex.watch_orders()\r\nprint(order)\r\n```\r\n\r\nerror message\r\n\r\n```\r\n/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py:71: RuntimeWarning: coroutine 'ClientSession._ws_connect' was never awaited\r\n  _cancel_all_tasks(loop)\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nTraceback (most recent call last):\r\n  File \"/Users/user/proj/farb/websocket.py\", line 46, in <module>\r\n    asyncio.run(main())\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py\", line 190, in run\r\n    return runner.run(main)\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py\", line 118, in run\r\n    return self._loop.run_until_complete(task)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 653, in run_until_complete\r\n    return future.result()\r\n           ^^^^^^^^^^^^^^^\r\n  File \"/Users/user/proj/farb/websocket.py\", line 36, in main\r\n    order = await coinex.watch_orders()\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/pro/coinex.py\", line 589, in watch_orders\r\n    await self.authenticate(params)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/pro/coinex.py\", line 969, in authenticate\r\n    self.spawn(self.watch, url, messageHash, request, requestId, subscribe)\r\n  File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/async_support/base/exchange.py\", line 280, in spawn\r\n    task = self.asyncio_loop.create_task(method(*args))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 436, in create_task\r\n    task = tasks.Task(coro, loop=self, name=name, context=context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: a coroutine was expected, got <Future pending>\r\ncoinex requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).\r\nUnclosed client session\r\nclient_session: <aiohttp.client.ClientSession object at 0x1006142d0>\r\nUnclosed connector\r\nconnections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x1035eaeb0>, 149515.667764791), (<aiohttp.client_proto.ResponseHandler object at 0x1035eb380>, 149516.244738333)]']\r\nconnector: <aiohttp.connector.TCPConnector object at 0x100604090>\r\n```"
      },
      {
        "user": "grozz97",
        "created_at": "2023-05-21T11:40:45Z",
        "body": "> I got the same issue with 3.0.69 version\r\n> \r\n> when I try to my own order status using watch_orders function\r\n> \r\n> ```\r\n>     coinex = ccxt.pro.coinex({\r\n>         'apiKey': api_secret['coinex']['access_key'],\r\n>         'secret': api_secret['coinex']['secret_key'],\r\n>         'enableRateLimit':True,\r\n>         'options': {\r\n>             'defaultType': 'swap'\r\n>         }\r\n>     })\r\n> ```\r\n> \r\n> it works okay with public api such as\r\n> \r\n> ```\r\n> await coinex.load_fees()\r\n> await coinex.load_markets()\r\n> ```\r\n> \r\n> but when I call the private api, the error shows up\r\n> \r\n> ```\r\n> order = await coinex.watch_orders()\r\n> print(order)\r\n> ```\r\n> \r\n> error message\r\n> \r\n> ```\r\n> /opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py:71: RuntimeWarning: coroutine 'ClientSession._ws_connect' was never awaited\r\n>   _cancel_all_tasks(loop)\r\n> RuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\n> Traceback (most recent call last):\r\n>   File \"/Users/user/proj/farb/websocket.py\", line 46, in <module>\r\n>     asyncio.run(main())\r\n>   File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py\", line 190, in run\r\n>     return runner.run(main)\r\n>            ^^^^^^^^^^^^^^^^\r\n>   File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py\", line 118, in run\r\n>     return self._loop.run_until_complete(task)\r\n>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n>   File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 653, in run_until_complete\r\n>     return future.result()\r\n>            ^^^^^^^^^^^^^^^\r\n>   File \"/Users/user/proj/farb/websocket.py\", line 36, in main\r\n>     order = await coinex.watch_orders()\r\n>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n>   File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/pro/coinex.py\", line 589, in watch_orders\r\n>     await self.authenticate(params)\r\n>           ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n>   File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/pro/coinex.py\", line 969, in authenticate\r\n>     self.spawn(self.watch, url, messageHash, request, requestId, subscribe)\r\n>   File \"/Users/user/proj/farb/.venv/lib/python3.11/site-packages/ccxt/async_support/base/exchange.py\", line 280, in spawn\r\n>     task = self.asyncio_loop.create_task(method(*args))\r\n>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n>   File \"/opt/homebrew/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 436, in create_task\r\n>     task = tasks.Task(coro, loop=self, name=name, context=context)\r\n>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n> TypeError: a coroutine was expected, got <Future pending>\r\n> coinex requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).\r\n> Unclosed client session\r\n> client_session: <aiohttp.client.ClientSession object at 0x1006142d0>\r\n> Unclosed connector\r\n> connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x1035eaeb0>, 149515.667764791), (<aiohttp.client_proto.ResponseHandler object at 0x1035eb380>, 149516.244738333)]']\r\n> connector: <aiohttp.connector.TCPConnector object at 0x100604090>\r\n> ```\r\n\r\nI have the same problem in version **3.1.3**.\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-21T16:48:22Z",
        "body": "@MikaelLind @wenrenyueke @jonatw @grozz97 I'm sorry, it seems the problem persists, I'm checking it now"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-21T22:11:10Z",
        "body": "@MikaelLind @wenrenyueke @jonatw @grozz97 \r\nIt should be fixed by now, as of 3.1.5\r\n\r\nThanks"
      },
      {
        "user": "grozz97",
        "created_at": "2023-05-21T22:31:53Z",
        "body": "@carlosmiei Thanks"
      }
    ]
  },
  {
    "number": 17189,
    "title": "Property 'sign' in type 'exchange' is not assignable to the same property in base type 'Exchange'.",
    "created_at": "2023-03-15T13:31:26Z",
    "closed_at": "2023-03-17T11:08:13Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17189",
    "body": "### Operating System\n\nubuntu 22\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.9\n\n### Description\n\nSince upgrading to version 3+, I can't run build anymore\r\n\n\n### Code\n\n```\r\nnode_modules/ccxt/js/src/tidex.d.ts:78:5 - error TS2416: Property 'sign' in type 'tidex' is not assignable to the same property in base type 'Exchange'.\r\n  Type '(path: any, api?: string | undefined, method?: string | undefined, params?: {} | undefined, headers?: any, body?: any) => { url: any; method: string; body: any; headers: any; }' is not assignable to type '(path: any, api: string | object, method?: string | undefined, params?: {} | undefined, headers?: any, body?: any) => {}'.\r\n    Types of parameters 'api' and 'api' are incompatible.\r\n      Type 'string | object' is not assignable to type 'string | undefined'.\r\n\r\n78     sign(path: any, api?: string, method?: string, params?: {}, headers?: any, body?: any): {\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17189/comments",
    "author": "MedionSF",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-15T14:51:11Z",
        "body": "Hello @MedionSF, we moved ccxt entirely to Typescript so now, instead of manually generated type definitions, they are automatically emitted by `tsc`. Due to that, some discrepancies might appear for users relying on the old types, but it should be very easy to fix. \r\n\r\nCan you show use the code producing that error?\r\n\r\n(as a quick fix you can always temporarily add `skipLibCheck` to `compilerOptions` )"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-15T16:08:14Z",
        "body": "@MedionSF Actually I found the reason, our project does not seem to work with old versions of typescript (<4).\r\nWhat is your ts version?"
      },
      {
        "user": "MedionSF",
        "created_at": "2023-03-15T18:45:19Z",
        "body": "> @MedionSF Actually I found the reason, our project does not seem to work with old versions of typescript (<4). What is your ts version?\r\n\r\nversion 4.7.4\r\n\r\nWhat seems weird is that there is indeed a discrepancy in the params between the abstract class and the concrete classes inheriting it.\r\n\r\nI've taken the easy route and removed true casts in favor on any, and require instead of import. But it doesn't feel right :D"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-15T18:47:55Z",
        "body": "@MedionSF I will check that discrepancy but it's weird that our tsc build does not detect anything and I've also configured two different typescript projects (one esm and the other cjs) and  they both compiled perfectly with `ccxt` as a dependency "
      },
      {
        "user": "MedionSF",
        "created_at": "2023-03-15T18:55:02Z",
        "body": "> @MedionSF I will check that discrepancy but it's weird that our tsc build does not detect anything and I've also configured two different typescript projects (one esm and the other cjs) and they both compiled perfectly with `ccxt` as a dependency\r\n\r\nThanks!\r\n\r\nMaybe I'm doing something wrong. But as soon as I call an exchange in the code I get the issue in the build.\r\n\r\nActually it's true that when checking exchanges ts files I can see:\r\n`sign(path: any, api?: string, method?: string, params?: {}, headers?: any, body?: any)`\r\n\r\nWhile the parent class has\r\n`sign(path: any, api: string | object, method?: string, params?: {}, headers?: any, body?: any): {};`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-17T09:56:08Z",
        "body": "> > @MedionSF I will check that discrepancy but it's weird that our tsc build does not detect anything and I've also configured two different typescript projects (one esm and the other cjs) and they both compiled perfectly with `ccxt` as a dependency\r\n> \r\n> Thanks!\r\n> \r\n> Maybe I'm doing something wrong. But as soon as I call an exchange in the code I get the issue in the build.\r\n> \r\n> Actually it's true that when checking exchanges ts files I can see: `sign(path: any, api?: string, method?: string, params?: {}, headers?: any, body?: any)`\r\n> \r\n> While the parent class has `sign(path: any, api: string | object, method?: string, params?: {}, headers?: any, body?: any): {};`\r\n\r\n@MedionSF this difference will be fixed asap"
      },
      {
        "user": "MedionSF",
        "created_at": "2023-03-17T10:07:56Z",
        "body": "> > > @MedionSF I will check that discrepancy but it's weird that our tsc build does not detect anything and I've also configured two different typescript projects (one esm and the other cjs) and they both compiled perfectly with `ccxt` as a dependency\r\n> > \r\n> > \r\n> > Thanks!\r\n> > Maybe I'm doing something wrong. But as soon as I call an exchange in the code I get the issue in the build.\r\n> > Actually it's true that when checking exchanges ts files I can see: `sign(path: any, api?: string, method?: string, params?: {}, headers?: any, body?: any)`\r\n> > While the parent class has `sign(path: any, api: string | object, method?: string, params?: {}, headers?: any, body?: any): {};`\r\n> \r\n> @MedionSF this difference will be fixed asap\r\n\r\nThanks a lot!"
      }
    ]
  },
  {
    "number": 17170,
    "title": "watch_ohlcv function not working for Bybit exchange",
    "created_at": "2023-03-14T15:40:00Z",
    "closed_at": "2023-03-14T19:25:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17170",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.8.89\n\n### Description\n\nI am trying to connect with Bybit using the watch_ohlcv function to stream live data, but it returns an array with no values. The same code works fine for Binance Exchange.\r\n\r\nOutput ---\r\n\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\n\n### Code\n\n```\r\nimport asyncio\r\nimport ccxt.pro\r\n\r\n\r\nmarket = \"future\"\r\napi_key = \"api_key\"\r\napi_sec = \"api_secret\"\r\n\r\nexchange = ccxt.pro.bybit({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': market,\r\n        'adjustForTimeDifference': True\r\n    },\r\n    \"apiKey\" : api_key,\r\n    \"secret\" : api_sec\r\n})\r\n\r\n\r\n\r\nasync def fetch_kline():\r\n\r\n    while True:\r\n\r\n        live_feed = await exchange.watch_ohlcv(\"ETH/USDT\", \"1m\")\r\n\r\n        print(live_feed)\r\n\r\n\r\n\r\nasyncio.run(fetch_kline())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17170/comments",
    "author": "sumitgautam0101",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-14T15:41:49Z",
        "body": "Hello @sumitgautam0101,\r\nDo you mind updating your ccxt version? I think this issue was fixed in the meantime."
      },
      {
        "user": "sumitgautam0101",
        "created_at": "2023-03-14T19:13:35Z",
        "body": "Thank You, it works now !! "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-14T19:25:33Z",
        "body": "@sumitgautam0101 nice, will close this issue then. Let us know if anything!"
      }
    ]
  },
  {
    "number": 17160,
    "title": "FetchLedger Coinbase",
    "created_at": "2023-03-13T23:07:55Z",
    "closed_at": "2023-03-15T14:00:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17160",
    "body": "### Operating System\r\n\r\nlinux\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n3.0.3\r\n\r\n### Description\r\n\r\nUnable to add repo to project. get error\r\n```\r\nExit code: 1\r\nCommand: node postinstall.js\r\nOutput:\r\nnode:internal/errors:490\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nError [ERR_MODULE_NOT_FOUND]: Cannot find package 'data-uri-to-buffer' imported from <project>/node_modules/ccxt/js/src/static_dependencies/node-fetch/index.js\r\n```\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17160/comments",
    "author": "naward-cs",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-03-14T09:10:21Z",
        "body": "Hi @naward-cs \r\n\r\nI think the issue was fixed in the latest release. Let me know if you have any other issue."
      },
      {
        "user": "naward-cs",
        "created_at": "2023-03-15T14:01:04Z",
        "body": "It did fix it"
      }
    ]
  },
  {
    "number": 17158,
    "title": "i meet this problem when i use bot",
    "created_at": "2023-03-13T19:58:09Z",
    "closed_at": "2023-03-15T15:19:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17158",
    "body": "### ؜\n\nArgumentsRequired: binance amount of BNB/USDT must be greater than minimum amount precision of 3\r\n\r\nwhat can i do with this?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17158/comments",
    "author": "tien204",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-03-13T22:53:20Z",
        "body": "That means you need to use a larger number with your `amount` argument, a precision of **x** means that your number must be greater than **10^-x**\r\n\r\nIn your example, the amount must be greater than **0.001**\r\n\r\n-------------------------------\r\n\r\nBtw, in the future, it helps if you provide some code that produces the error your talking about, so that we can reproduce the error ourselves and identify a way to solve it. I'm familiar with this error though so I was able to figure it out anyway."
      },
      {
        "user": "tien204",
        "created_at": "2023-03-14T04:33:47Z",
        "body": "```js\r\nconst direction = directions[0]  // buy or sell\r\nconst TRADE_SIZE = 0.034\r\nconst quantity = TRADE_SIZE / marketPrice\r\n\r\nawait binance.createMarketOrder('BNB/USDT', direction, quantity)\r\nconsole.log(`${moment().format()}: ${direction} ${quantity} BNB at ${marketPrice}`)`\r\n```\r\nI had set the quantity > 0.001, and that error occurred"
      },
      {
        "user": "tien204",
        "created_at": "2023-03-14T09:21:17Z",
        "body": "@samgermain "
      },
      {
        "user": "jefjef10w",
        "created_at": "2023-03-14T16:32:58Z",
        "body": "Hello , I have the exact same issue with my bot, also on binance \r\n\r\n\r\n```php\r\n$symbol = \"STMX/BTC\";\r\n$price = 0.00000025;\r\n$quantity = 103957;\r\n$value_order = $quantity * $price; \r\n$value_order = $binance->amountToPrecision($symbol,$value_order);\r\n```\r\n\r\nresult: \r\n\r\n```php\r\nPHP Fatal error:  Uncaught ccxt\\ArgumentsRequired: binance $amount of STMX/BTC must be greater than minimum $amount precision of 0 in ccxt/php/Exchange.php:4346\r\nStack trace:\r\n#0 [internal function]: ccxt\\Exchange->amount_to_precision()\r\n#1 ccxt/php/Exchange.php(1997): call_user_func_array()\r\n#2 test.php(22): ccxt\\Exchange->__call()\r\n#3 {main}\r\n  thrown in ccxt/php/Exchange.php on line 4346\r\n```\r\n\r\nThe amount is 0.02598925 and not \"0\" .\r\n\r\nAny help will be apprecied.\r\nthanks\r\n\r\nedit: same issue on kucoin, quantity is 0.0004 but:\r\n\r\n```php\r\nPHP Fatal error:  Uncaught ccxt\\\\ArgumentsRequired: kucoin $amount of POND/USDT must be greater than minimum $amount precision of 0.0001 \r\n```"
      }
    ]
  },
  {
    "number": 17130,
    "title": "( HELP ME ) how to check the liquidation price and mark price in USDM-futures market.",
    "created_at": "2023-03-12T15:05:16Z",
    "closed_at": "2023-03-13T14:45:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17130",
    "body": "1) I would like to check the liquidation price of my short position of USD-M futures on the Binance exchange to prevent it from being liquidated.\r\n\r\n2) Additionally, I would like to monitor the Mark Price of USD-M futures in real-time, which affects the liquidation.\r\n\r\nPlease let me know how to do these two things. (function, object, etc)\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17130/comments",
    "author": "BamsoonPapa",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-03-13T14:45:03Z",
        "body": "Hi @BamsoonPapa \r\n\r\n1. can get liquidation price when call fetchPositions in binance.\r\n2. can subscribe mark price by calling watchOHLCV and set topic to `markPriceKline` (also `indexPriceKline`)."
      }
    ]
  },
  {
    "number": 17114,
    "title": "watchOrderBookSnapshot has error in ascendex",
    "created_at": "2023-03-10T18:18:33Z",
    "closed_at": "2023-03-16T15:26:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17114",
    "body": "### Operating System\r\n\r\nwindows 64bit\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n2.8.75\r\n\r\n### Description\r\n\r\n```js\r\nError in watchOrderBookSnapshot method in the ascendex:\r\n\r\nC:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:270\r\n        orderbook.reset (snapshot);\r\n                  ^\r\n\r\nTypeError: Cannot read properties of undefined (reading 'reset')\r\n    at ascendex.handleOrderBookSnapshot (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:270:19)\r\n    at ascendex.handleMessage (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:892:20)\r\n    at WsClient.onMessage (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\base\\Client.js:283:14)\r\n    at callListener (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\event-target.js:290:14)\r\n    at WebSocket.onMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\event-target.js:209:9)\r\n    at WebSocket.emit (node:events:512:28)\r\n    at Receiver.receiverOnMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\websocket.js:1180:20)\r\n    at Receiver.emit (node:events:512:28)\r\n    at Receiver.dataMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\receiver.js:541:14)\r\n    at Receiver.getData (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\receiver.js:459:17)\r\n\r\nNode.js v19.7.0\r\n```\r\n\r\n### Code\r\n\r\n```js\r\nconst ccxt = require('ccxt')\r\n\r\nconst exchange = new ccxt.pro.ascendex({\r\n    'apiKey': apiKey,\r\n    'secret': secret,\r\n    'options': {\r\n        'account-category': 'margin', // 'cash', 'margin', 'futures' // obsolete\r\n        'account-group': accountGroup,\r\n        'defaultType': 'margin', // 'spot', 'margin', 'swap'\r\n        'accountCategories': {\r\n            'margin': 'margin',\r\n        }\r\n    },\r\n})\r\n\r\nexchange.verbose = false\r\n\r\nasync function watchOrderBookSnapshot(symbol) {\r\n    while (true) {\r\n        try {\r\n            const orderbook = await exchange.watchOrderBookSnapshot(symbol)\r\n            console.log(new Date(), exchange.id, symbol, orderbook)\r\n        } catch (e) {\r\n            console.log(symbol, e)\r\n        }\r\n    }\r\n}\r\n\r\nwatchOrderBookSnapshot('MATIC/USDT') \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17114/comments",
    "author": "fotrosi",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-11T14:28:40Z",
        "body": "Hello @fotrosi,\r\n`watchOrderBookSnaphot` is an internal method and not meant to be used independently. You should be using `watchOrderBook` instead. "
      },
      {
        "user": "fotrosi",
        "created_at": "2023-03-16T15:26:36Z",
        "body": "Thanks a lot."
      }
    ]
  },
  {
    "number": 17112,
    "title": "Unable to cancel conditional order Bitget",
    "created_at": "2023-03-10T17:27:42Z",
    "closed_at": "2023-03-13T01:12:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17112",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.9.11\n\n### Description\n\nI am unable to cancel a conditional order on Bitget. Also when using params={'stop': True}\n\n### Code\n\n```\r\n  \r\n        import ccxt\r\n        client = ccxt.bitget({'apiKey': \"\",\r\n                              'secret': \"\",\r\n                              'password': \"\"})\r\n\r\n        ticker = \"XRP/USDT:USDT\"\r\n        side = \"buy\"\r\n        quantity = 30\r\n        price = 0.4\r\n\r\n        response = client.create_order(symbol=ticker, type=\"limit\", side=side,\r\n                                       amount=quantity, price=price,\r\n                                       params={'triggerPrice': price,\r\n                                               'triggerType': 'fill_price'})\r\n\r\n        client.cancel_order(response['id'], ticker)\r\n\r\n```\r\nExchangeError: bitget {\"code\":\"40768\",\"msg\":\"Order does not exist\",\"requestTime\":1678468608482,\"data\":null}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17112/comments",
    "author": "Tomas-MP",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-03-11T07:33:05Z",
        "body": "Hi @Tomas-MP \r\n\r\nTo cancel stop order, you need to set stop to true.\r\n\r\n```python\r\nclient.cancel_order(id=response['id'], symbol=ticker, params={'stop': True})\r\n```"
      },
      {
        "user": "Tomas-MP",
        "created_at": "2023-03-13T13:07:29Z",
        "body": "@sc0Vu unfortunately it still throws the following error: \r\n\r\nArgumentsRequired: bitget cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan or loss_plan\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-13T13:10:24Z",
        "body": "> @sc0Vu unfortunately it still throws the following error:\r\n> \r\n> ArgumentsRequired: bitget cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan or loss_plan\r\n\r\nHello @Tomas-MP yeah for swap markets you also need to provide that parameter, if you're canceling a \"normal\" stop order you can just do this:\r\n\r\n```Python\r\nparams={'stop': True, \"planType\":\"normal_plan\"}\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "Tomas-MP",
        "created_at": "2023-03-13T13:11:06Z",
        "body": "@carlosmiei awesome will try!"
      }
    ]
  },
  {
    "number": 17105,
    "title": "ccxt testnext position idx",
    "created_at": "2023-03-09T19:25:44Z",
    "closed_at": "2023-03-10T11:18:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17105",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\n_No response_\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17105/comments",
    "author": "alphatrade1",
    "comments": [
      {
        "user": "alphatrade1",
        "created_at": "2023-03-09T19:30:37Z",
        "body": "Running the following:\r\n\r\n    exchange_id = 'bybit'\r\n    exchange_class = getattr(ccxt, exchange_id)\r\n    exchange = exchange_class({\r\n        'apiKey': 'apices',\r\n        'secret': 'secret',\r\n        'enableRateLimit': True\r\n    })\r\n\r\n    exchange.options['defaultType'] = 'swap'\r\n\r\n    params = {\r\n        'positionIdx': 0  # 0 One-Way Mode, 1 Buy-side, 2 Sell-side\r\n    }  \r\n\r\nexchange.create_order(symbol='ETH/USDT:USDT', type='limit', price=1000, side= 'buy', amount=0.01, params = params)\r\n\r\nBut getting the following error: ccxt.base.errors.BadRequest: bybit {\"retCode\":10001,\"retMsg\":\"position idx not match position mode\",\"result\":{},\"retExtInfo\":{},\"time\":1678389850291}\r\n\r\nI don't get what I'm doing wrong here. Can someone help please? I'm using latest version of ccxt 2.9.10 and python is Python 3.9.13\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-09T20:08:57Z",
        "body": "Hello @alphatrade1, Have you tried to use the other values for `positionIdx` ? "
      },
      {
        "user": "ahoura",
        "created_at": "2023-03-10T10:01:14Z",
        "body": "@alphatrade1 \r\n\r\nDepending on the position mode (OneWay / Hedge) you are on, you need to adjust the position idx.\r\n\r\nhere is a function I am using with bybit, I've only tested it with hedge mode but you should get the general idea\r\n\r\n```\r\ngetPositionIdx(tradeType, positionAction) {\r\n    if (this._config.position_mode === BaseBot.POSITION_MODE.ONEWAY) {\r\n      return 0\r\n    } else if (tradeType === BaseBot.TradeType.BUY) {\r\n      if (positionAction === BaseBot.PositionAction.CLOSE) {\r\n        return BaseBot.PositionAction.CLOSE\r\n      } else {\r\n        return BaseBot.PositionAction.OPEN\r\n      }\r\n    } else if (tradeType === BaseBot.TradeType.SELL) {\r\n      if (positionAction === BaseBot.PositionAction.CLOSE) {\r\n        return BaseBot.PositionAction.OPEN\r\n      } else {\r\n        return BaseBot.PositionAction.CLOSE\r\n      }\r\n    } else {\r\n      throw new Error(`getPositionIdx: invalid tradeType ${tradeType}`)\r\n    }\r\n  }\r\n```\r\nPositionAction is defined as follow\r\n\r\n```\r\nconst PositionAction = {\r\n  OPEN: 1,\r\n  CLOSE: 2,\r\n}\r\n``` "
      },
      {
        "user": "alphatrade1",
        "created_at": "2023-03-10T10:27:47Z",
        "body": "Thanks. I did an install of latest package and now for whatever reason seems to be working:\r\n\r\n    exchange_id = 'bybit'\r\n    exchange_class = getattr(ccxt, exchange_id)\r\n    exchange = exchange_class({\r\n        'apiKey': decode.password_decrypt(public_api).decode(),\r\n        'secret': decode.password_decrypt(private_api).decode(),\r\n        'enableRateLimit': True\r\n    })\r\n    exchange.set_sandbox_mode(True)\r\n    exchange.options['defaultType'] = 'swap'\r\n    exchange.options['position_idx'] = 0\r\n    # exchange.options['reduce_only'] = True\r\n    params = {\r\n        'positionIdx': 0  # 0 One-Way Mode, 1 Buy-side, 2 Sell-side\r\n    }\r\n    exchange.create_order(symbol=instrument1['symbol'], type='limit', price=limit_price_buy, side= 'buy', amount=0.01,   params = params)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-10T11:18:52Z",
        "body": "@ahoura Thanks for jumping in.\r\n@alphatrade1 In that case, I will close the issue, feel free to re-open it if anything!"
      }
    ]
  },
  {
    "number": 17086,
    "title": "Code returns  NotSupported: huobi fetchTransactionFees() is not supported yet with whom it has worked before",
    "created_at": "2023-03-08T16:35:54Z",
    "closed_at": "2023-03-09T05:26:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17086",
    "body": "### Operating System\n\nWindows 10 \n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.8.31\n\n### Description\n\nI got this error: NotSupported: huobi fetchTransactionFees() is not supported yet with all exchangers that I tried to use. I tried mexc, kucoin and huobi. And if I'am not mistaken it worked with all this exchangers in past. Please tell me is it a bug or It's really not supported right now. And if it's not please tell me all exchangers that support it. Thank you.\n\n### Code\n\ndata = ccxt.kucoin({apikey:xxxxxx, secret:'xxxxxxxxxxxxxx'}).fetch_transaction_fees()\r\nprint(data)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17086/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-08T16:54:46Z",
        "body": "Hello @AlwxDavydov,\r\n`fetchTransactionFees` was deprecated and replaced with `fetchDepositWithdrawFees`.  Can you try to use the latter instead?\r\n\r\n---------------\r\n\r\n`fetch_deposit_withdraw_fees` for python\r\n"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-03-09T04:56:39Z",
        "body": "@carlosmiei Thank you, I tried it. So it helped with huobi. As for the kuсoin, I only see fetch_deposit_withdraw_fee. It turns out that fetch_deposit_withdraw_fee() is not ralized for him? The strangest answer I get is in the case of Mexc. He will return:\r\n 3042, in fetch_deposit_withdraw_fee\r\n    if not self.has['fetchDepositWithdrawFees']:\r\nKeyError: 'fetchDepositWithdrawFees' \r\n\r\nbut this method is implemented for it as I see. I also tried binance, bybit and alpaca. It works well with it. So my question is what is the problem with mexc and does the fetch_deposit_withdraw_fees() is implemented with kucoin?"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-03-09T05:00:04Z",
        "body": "Little example of code \r\n\r\nimport ccxt\r\nimport sys\r\n\r\nsys.stdout.reconfigure(encoding='utf-8')\r\n\r\nexchange = ccxt.mexc({api:'xxxxx', secret:'xxxxxxxxxx'}) # You can also try kraken and it will retrun the same error KeyError: 'fetchDepositWithdrawFees'\r\n\r\ndeposit_addresses = exchange.fetch_deposit_withdraw_fee('USDT')\r\nprint(deposit_addresses)\r\n"
      },
      {
        "user": "AlgoQ",
        "created_at": "2023-03-09T05:26:24Z",
        "body": "@AlwxDavydov That's right, kucoin does only support the `fetch_deposit_withdraw_fee()` function but not the `fetch_deposit_withdraw_fees()` function.\r\n\r\nWhenever you use *mexc* you make use of version 2 of mexc's api, version 2 doesn't support `fetch_deposit_withdraw_fee()`/ `fetch_deposit_withdraw_fees()`, *mexc3* does support both tho.\r\n\r\nCode example:\r\n```python\r\nimport ccxt\r\n\r\nexchange = ccxt.mexc3({api:'xxx', secret:'xxx'}) \r\n\r\ndeposit_withdraw_fee = exchange.fetch_deposit_withdraw_fee('USDT')\r\nprint(deposit_withdraw_fee)\r\n```\r\n\r\nIf you have any more questions, let us know :)"
      }
    ]
  },
  {
    "number": 17037,
    "title": "Bid and ask sizes are None for coinbase ticker updates",
    "created_at": "2023-03-03T08:59:39Z",
    "closed_at": "2023-03-04T12:13:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17037",
    "body": "Hi,\r\n\r\n{'symbol': 'USDT-USD', 'timestamp': 1677833804822, 'datetime': '2023-03-03T08:56:44.822Z', 'high': 1.00076, 'low': 0.9999, 'bid': 1.00026, 'bidVolume': None, 'ask': 1.00027, 'askVolume': None, 'vwap': None, 'open': 1.00008, 'close': 1.00027, 'last': 1.00027, 'previousClose': None, 'change': None, 'percentage': None, 'average': None, 'baseVolume': 165900854.89, 'quoteVolume': None, 'info': {'type': 'ticker', 'sequence': 585493821, 'product_id': 'USDT-USD', 'price': '1.00027', 'open_24h': '1.00008', 'volume_24h': '165900854.89000000', 'low_24h': '0.9999', 'high_24h': '1.00076', 'volume_30d': '3242791564.59000000', 'best_bid': '1.00026', 'best_bid_size': '174038.39', 'best_ask': '1.00027', 'best_ask_size': '52775.89', 'side': 'buy', 'time': '2023-03-03T08:56:44.822229Z', 'trade_id': 38620183, 'last_size': '263.75'}}\r\n\r\nThere is 'best_bid_size' and 'best_ask_size' in 'info', but 'bidVolume' and 'askVolume' are none\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17037/comments",
    "author": "L1nkus",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-03T11:17:18Z",
        "body": "Hello @L1nkus,\r\nI think that `best_bid_size` or `best_ask_size` represent the `best_bid`/`best_ask` volume, not the overall `ask`/`bid` volume. "
      },
      {
        "user": "L1nkus",
        "created_at": "2023-03-03T12:18:10Z",
        "body": "Hey @carlosmiei ,\r\n> Hello @L1nkus,\r\n> I think that `best_bid_size` or `best_ask_size` represent the `best_bid`/`best_ask` volume, not the overall `ask`/`bid` volume.\r\n\r\nFrom ccxt docs:\r\n\r\nThe structure of a ticker is as follows:\r\n\r\n{\r\n    'symbol':        string symbol of the market ('BTC/USD', 'ETH/BTC', ...)\r\n    'info':        { the original non-modified unparsed reply from exchange API },\r\n    'timestamp':     int (64-bit Unix Timestamp in milliseconds since Epoch 1 Jan 1970)\r\n    'datetime':      ISO8601 datetime string with milliseconds\r\n    'high':          float, // highest price\r\n    'low':           float, // lowest price\r\n    'bid':           float, // current best bid (buy) price\r\n    'bidVolume':     float, // current best bid (buy) amount (may be missing or undefined)\r\n    'ask':           float, // current best ask (sell) price\r\n    'askVolume':     float, // current best ask (sell) amount (may be missing or undefined)\r\n    'vwap':          float, // volume weighed average price\r\n    'open':          float, // opening price\r\n    'close':         float, // price of last trade (closing price for current period)\r\n    'last':          float, // same as `close`, duplicated for convenience\r\n    'previousClose': float, // closing price for the previous period\r\n    'change':        float, // absolute change, `last - open`\r\n    'percentage':    float, // relative change, `(change/open) * 100`\r\n    'average':       float, // average price, `(last + open) / 2`\r\n    'baseVolume':    float, // volume of base currency traded for last 24 hours\r\n    'quoteVolume':   float, // volume of quote currency traded for last 24 hours\r\n}\r\nNotes On Ticker Structure\r\n\r\nAll fields in the ticker represent the past 24 hours prior to timestamp.\r\nThe bidVolume is the volume (amount) of current best bid in the orderbook.\r\nThe askVolume is the volume (amount) of current best ask in the orderbook.\r\nThe baseVolume is the amount of base currency traded (bought or sold) in last 24 hours.\r\nThe quoteVolume is the amount of quote currency traded (bought or sold) in last 24 hours.\r\n\r\nI think the wiki says that those fields are meant to represent the current volumes on best levels?"
      },
      {
        "user": "Dan-krm",
        "created_at": "2023-03-03T19:19:15Z",
        "body": "@L1nkus Which method are you using? I'm not able to find `best_bid_size` or `best_ask_size` using fetchTicker of fetchTickers"
      },
      {
        "user": "L1nkus",
        "created_at": "2023-03-04T02:43:59Z",
        "body": "> @L1nkus Which method are you using? I'm not able to find `best_bid_size` or `best_ask_size` using fetchTicker of fetchTickers\r\n\r\n@Dan-krm from ccxt.pro watchTicker"
      },
      {
        "user": "Dan-krm",
        "created_at": "2023-03-04T03:49:42Z",
        "body": "> > @L1nkus Which method are you using? I'm not able to find `best_bid_size` or `best_ask_size` using fetchTicker of fetchTickers\r\n> \r\n> @Dan-krm from ccxt.pro watchTicker\r\n\r\nThanks for pointing this out, I opened a PR that will resolve this issue"
      }
    ]
  },
  {
    "number": 17031,
    "title": "call apikey from json and see error: binance {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}",
    "created_at": "2023-03-03T00:23:56Z",
    "closed_at": "2023-03-03T01:28:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17031",
    "body": "### Operating System\n\nmacOS\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nnewest\n\n### Description\n\nIf I write apiky on python, it is ok to place order.\r\nHowever, I try to call apikey from json file to place order for binance spot instrument, and see the error as below:\r\nbinance {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}\r\n\r\nPlease advise where could I revise. Thanks.\r\n\r\n\r\n\r\n \n\n### Code\n\nwith open(\"API.json\", 'r') as f:\r\n     text = f.read()\r\n     print(text)\r\n  \r\n   \r\nexchange = ccxt.binance({\r\n      'enableRateLimit': True,\r\n      'apiKey':'A',\r\n      'secret':'B',\r\n      'options': {\r\n      'defaultType': 'spot',\r\n        },\r\n        })\r\n                \r\n    \r\n\r\nb=\"CFXUSDT\"    \r\n\r\n\r\norder = exchange.create_order(\r\n  symbol=b,\r\n  type='STOP_LOSS_LIMIT',\r\n  amount=35,\r\n  price=0.32,\r\n  side='buy',\r\n  params={'stopPrice': 0.32}\r\n)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17031/comments",
    "author": "ctu1121",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-03-03T01:28:26Z",
        "body": "@ctu1121 in your code you're not reading JSON as JSON, you're reading it as text. Also make sure that you're passing the contents of API.json as `apiKey` and `secret` to the exchange constructor. Apart from that you're missing the `await` keyword with `exchange.create_order`, cause it returns a JS Promise. \r\n\r\nIn short, this is not a question on how to use CCXT, but more like a question on the basics of JavaScript / Node.js programming.\r\n\r\nIf your `API.json` looks like this:\r\n\r\n```JSON\r\n{\r\n    \"apiKey\": \"XXXXXXXXXXXXXXXXXX\",\r\n    \"secret\": \"YYYYYYYYYYYYYYYYYYY\"\r\n}\r\n```\r\n\r\nThen your code should look like this:\r\n\r\n```JavaScript\r\n\r\nconst config = require('API.json')\r\n\r\nexchange = ccxt.binance(config)\r\n\r\nb=\"CFXUSDT\"\r\n\r\norder = await exchange.create_order(\r\nsymbol=b,\r\ntype='STOP_LOSS_LIMIT',\r\namount=35,\r\nprice=0.32,\r\nside='buy',\r\nparams={'stopPrice': 0.32}\r\n)\r\n```"
      }
    ]
  },
  {
    "number": 16952,
    "title": "Create Order in ccxt bybit Testnet position idx not match position mode",
    "created_at": "2023-02-24T13:43:11Z",
    "closed_at": "2023-02-24T14:13:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16952",
    "body": "### ؜\n\nI want create a simple order in Derivates -> USDT Perpetual -> BTCUSDT. \r\n\r\nI have following Balance:\r\n'coin': 'BTC', 'equity': '1.07893293', 'walletBalance': '1.07893293'\r\n\r\nHere is my code:\r\n\r\nimport ccxt\r\n\r\nexchange = ccxt.bybit({\r\n    'apiKey': 'apiKey',\r\n    'secret': 'secretKey',\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'recvWindow': 10000,\r\n    }\r\n})\r\nexchange.set_sandbox_mode(True)\r\nexchange.options[\"defaultType\"] = 'swap'\r\nsymbol = 'BTC/USDT:USDT'\r\norder = exchange.createOrder(symbol=symbol, type='Market', side='buy', amount=0.01)\r\n\r\nBut i get this error:\r\nbybit {\"retCode\":10001,\"retMsg\":\"position idx not match position mode\",\"result\":{},\"retExtInfo\":{},\"time\":1677246036932}\r\n\r\nHave somebody a solution?\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16952/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-24T14:04:40Z",
        "body": "Hello @hambi44,\r\nYes you just need to provide `positionIdx` inside params.\r\n\r\nExample:\r\n```Python\r\nparams = {\r\n    'positionIdx': 1 #  0 One-Way Mode, 1 Buy-side, 2 Sell-side\r\n}\r\nsymbol = 'BTC/USDT:USDT'\r\norder = exchange.createOrder(symbol=symbol, type='Market', side='buy', amount=0.01, params = params)\r\n```\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2023-02-24T14:13:25Z",
        "body": "Best thanks. It works"
      }
    ]
  },
  {
    "number": 16929,
    "title": "Kucoin fetchBalance method returning empty data",
    "created_at": "2023-02-22T20:31:54Z",
    "closed_at": "2023-02-22T21:02:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16929",
    "body": "### ؜\r\n\r\nI think this is a stupid question.\r\nBut I don't know why. please help me.\r\nFor testing purpose, I deposited 55$ to kucoin main account and can check it.\r\n\r\n0.00230737BTC≈ 55.03USD(Loans: 0.00 BTC)\r\n\r\nI also created an API key.\r\n```\r\nKey : 63f666faf2ac4300019c0de5\r\nAPI Restrictions : General, Trade\r\nPeriod of Validity : 30 days\r\nIP Restriction : No（less secure; binding an IP address is recommended)\r\n\r\nKeys and secrets are correct.\r\n\r\nconst kucoin = new ccxt.kucoin({\r\n    'apiKey': config.kucoin_apiKey,\r\n    'secret': config.kucoin_secret,\r\n    'password' : config.kucoin_password,\r\n    'enableRateLimit': true,\r\n    'trust': true // enable trust option\r\n});\r\nconsole.log (await kucoin.fetchBalance ())\r\n\r\nresult is : \r\n{\r\n  info: { code: '200000', data: [] },\r\n  timestamp: undefined,\r\n  datetime: undefined,\r\n  free: {},\r\n  used: {},\r\n  total: {}\r\n}\r\n\r\nwhen I test with fetchDeposits(), the result is correct.\r\n\r\nOS : Windows 10\r\nProgramming Language version: Node JS 14.18.1\r\nCCXT version : 2.4.96\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16929/comments",
    "author": "leon-0222",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-02-22T20:57:44Z",
        "body": "Can you try \r\n\r\n`kucoin.fetchBalance('{\"type\": \"main\"}')`\r\n\r\nand \r\n\r\n`kucoin.fetchBalance('{\"type\": \"spot\"}')`\r\n\r\n------------------------------\r\n\r\n`kucoin.fetchBalance` defaults to getting the balance from your spot account, when you make a deposit to your kucoin account, it will go into your `funding`/`main` account"
      },
      {
        "user": "leon-0222",
        "created_at": "2023-02-22T21:02:32Z",
        "body": "Great!\r\n\r\n`kucoin.fetchBalance({\"type\": \"main\"})`\r\n\r\nit works well.\r\nThank you a lot.\r\n"
      }
    ]
  },
  {
    "number": 16898,
    "title": "Kucoinfutures fetch open orders shows no data anymore",
    "created_at": "2023-02-19T15:55:05Z",
    "closed_at": "2023-02-20T13:10:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16898",
    "body": "### ؜\n\nOS: Windows 10\r\nProgramming Language version: Python\r\nCCXT version: 2.8.16\r\n\r\n\r\nHello, \r\n\r\nsince a few days kucoinfutures doesn't show any data if I try to fetch open orders when STOP ORDER is placed. Issue occurs at linear and inverse contracts.   If a limit order above price is placed it works. \r\nAlso here I didn't change anything, it has worked fine for months now, but suddenly it doesn't work anymore. \r\n\r\n\r\nkucoin = ccxt.kucoinfutures({'enableRateLimit': True,\r\n                       'apiKey': kucoinconfig.api_key,\r\n                       'secret': kucoinconfig.api_secret,\r\n                       'password' : 'xxxxxxxxxxx',})\r\n\r\nsymbol = 'ETH/USDT:USDT'\r\npos_size = 1\r\n\r\norders = kucoin.fetch_open_orders(symbol)\r\n        print(orders)\r\n\r\nOutput is this --> []\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16898/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-20T09:58:19Z",
        "body": "Hello @Nitrix321,\r\n\r\nIf you want to fetch open `stop` orders you should provide `stop:True` inside `params`.\r\nExample:\r\n```\r\nparams = {\r\n   'stop': True\r\n}\r\nstop_open_orders = kucoin.fetch_open_orders(symbol, params=params)\r\n```\r\n\r\n"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-02-20T13:10:32Z",
        "body": "Hi @carlosmiei,\r\nyou are right, now it's working. I could have sworn it worked all along. \r\nBut ok, now it is.\r\n\r\nThank you again :-)"
      }
    ]
  },
  {
    "number": 16897,
    "title": "pip install fails",
    "created_at": "2023-02-19T14:32:19Z",
    "closed_at": "2024-09-07T15:21:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16897",
    "body": "### Operating System\n\nnixos\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nlatest\n\n### Description\n\nTrying to get ccxt installed on NixOS, I get an error that the README.md file is not available in the `setup.py`.\r\n\r\nTo reproduce: `docker run -it python pip install ccxt --no-binary :all:`\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16897/comments",
    "author": "Industrial",
    "comments": [
      {
        "user": "aaronmondal",
        "created_at": "2023-03-24T14:56:54Z",
        "body": "@kroitor Pretty sure this is a bug. Getting the same issue with nix. The README seems to not be packaged in the pypi package."
      },
      {
        "user": "aaronmondal",
        "created_at": "2023-03-24T15:06:59Z",
        "body": "cc @JannisFengler"
      }
    ]
  },
  {
    "number": 16878,
    "title": "The parameters of orders are null",
    "created_at": "2023-02-17T11:53:11Z",
    "closed_at": "2023-02-17T13:38:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16878",
    "body": "### ؜\n\nhello, this is what I get after calling\r\n\r\n`write(order=exchange.create_market_order(symbol, side, size, params))`\r\n\r\nwhere write is a function that dumps a json in a json file\r\n\r\n`{\r\n    \"info\": {\r\n        \"orderId\": \"2c471e2c-7160-40e0-842b-6234a0333e2a\",\r\n        \"orderLinkId\": \"\"\r\n    },\r\n    \"id\": \"2c471e2c-7160-40e0-842b-6234a0333e2a\",\r\n    \"clientOrderId\": null,\r\n    \"timestamp\": null,\r\n    \"datetime\": null,\r\n    \"lastTradeTimestamp\": null,\r\n    \"symbol\": null,\r\n    \"type\": null,\r\n    \"timeInForce\": null,\r\n    \"postOnly\": null,\r\n    \"side\": null,\r\n    \"price\": null,\r\n    \"stopPrice\": null,\r\n    \"triggerPrice\": null,\r\n    \"amount\": null,\r\n    \"cost\": null,\r\n    \"average\": null,\r\n    \"filled\": null,\r\n    \"remaining\": null,\r\n    \"status\": null,\r\n    \"fee\": null,\r\n    \"trades\": [],\r\n    \"fees\": [],\r\n    \"reduceOnly\": null\r\n}`\r\n\r\nwhy are all the attributes null? what am I doing wrong?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16878/comments",
    "author": "SequoiaB",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-17T12:11:44Z",
        "body": "Hello @SequoiaB,\r\nYou're doing nothing wrong. Some exchanges, upon creating an order return only its id immediately (some order creation processes are async so they don't have the information available right away). Using that id you can fetch all the information by using the unified method `fetchOrder` "
      },
      {
        "user": "SequoiaB",
        "created_at": "2023-02-17T13:38:27Z",
        "body": "thx"
      }
    ]
  },
  {
    "number": 16796,
    "title": "Can ccxt identify whenever API changes are pushed on an exchange's endpoint?",
    "created_at": "2023-02-10T03:26:02Z",
    "closed_at": "2023-02-11T12:12:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16796",
    "body": "There has been some mention of work being done by this team to unify the ccxt schema amongst all these various exchanges to allow for easier implementations for developers. I am also aware that there are many cases currently where each exchange needs to be handled differently based on what the exchange itself actually supports, such as the _binanceus_ exchange and the _kucoinfutures_ exchange, which use different schemas simply because of the nature in how each exchange trades: spot currencies and purpetual futures contracts. It's a given that when invoking a place_order() function call on both exchanges, it's not always going to translate over 1:1, so I'm trying to figure out the cleaniest way of wrapping code and handling this which has brought a few concerns to my attention.\r\n\r\nI was thinking of wrapping various ccxt methods into a base python class and having my various strategy classes inheret from this. This way, using the _exchange_id_ as the unique identifier in the base class, I can write some code to address the differences in each schema and unify it into a single dictionary without the need for a bunch of conditionals in my strategy classes.\r\n\r\nHowever as time goes on, APIs and exchange endpoints can change. If an exchanges endpoint decides to change their schema even _just a little bit_ and it goes above my radar or isn't supported by the newest version of ccxt yet, then it could cause unpredictable behavior in my strategies and potentially cause financial loss if not handle properly. Ideally ccxt framework would update their libraries to keep the schema up to date in relation to exchanges API changes. But if new changes are not yet supported after something been pushed, then is there any way to catch this-- either through manually validating differences in the expected schemas, or perhaps checking for an API version control number on the endpoint?\r\n\r\nHow could I raise an exception if there an issue between what the exchange provides and what ccxt expects? How can I raise an exception if there are issues between what ccxt's schema provides and what my unified wrapper methods expect?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16796/comments",
    "author": "RoscoeTheDog",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-02-10T19:00:19Z",
        "body": "Hi @RoscoeTheDog, you are right that there is a risk that the exchange might change their API behavior. However this risk would also exist by calling directly the exchange API. To mitigate the risk we do have several things in place. First we try to stay on top of API changes, with certified exchanges there is a direct communication channel between the ccxt team and the exchange team, also the ccxt community helps in reporting any issues and lastly we have a set of tests we run at build time to try and check the functions are working as expected.\r\nIf you really wanted to further control for this, my best suggestion would be to write specific tests for your use case, to make sure the return values are what you expect."
      },
      {
        "user": "RoscoeTheDog",
        "created_at": "2023-02-10T19:20:56Z",
        "body": "Thank you for your response. All of that sounds fairly reassuring. Is there a way I could parse an order dictionary schema in advanced before placing an order on the exchange? I'd like to create a validation method that searches the dictionary for a few keywords which code might rely on for correct functionality. This way, if ccxt ever changes their schema, my code can catch it in advance before the order even goes through."
      },
      {
        "user": "pcriadoperez",
        "created_at": "2023-02-10T22:36:34Z",
        "body": "From the ccxt side, our schema is quite consistent and we always try to be backwards compatible. If you want to run a validation you could write your code in typescript and use `ccxt.d.ts` to run type validation checks during build. However do note that even though this confirms the schema, it does not confirm if for a certain exchange those values may be populated or not, as depending on the exchange they are not always available. Also note, the one place I'd be slightly more cautious is under the 'info' parameters, for example `order['info']` as there we return the raw response from the exchange and will change if the exchange changes their response and is not unified."
      },
      {
        "user": "pcriadoperez",
        "created_at": "2023-02-11T12:12:06Z",
        "body": "Hi @RoscoeTheDog , I'll close this issue for now but feel free to reach out with any other questions"
      }
    ]
  },
  {
    "number": 16785,
    "title": "Old version missing from registry",
    "created_at": "2023-02-08T22:04:51Z",
    "closed_at": "2023-02-28T19:51:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16785",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n1.54.63\n\n### Description\n\nWe have a legacy system using an old ccxt version (`1.54.63`) that seems to be gone from the yarn registry which is breaking our deploys. Is there any possible solution for this? The next available version is `1.89.76` and would probably break a few things \n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16785/comments",
    "author": "mdelclaro",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-08T22:29:39Z",
        "body": "Hello @mdelclaro,\r\nUnfortunately, there is nothing ccxt can do to restore that version. Many versions were removed directly by the NPM team because our package ran out of metadata space, and we lost the ability to publish new versions. Nonetheless, I would suggest upgrading to the latest version available and reaching out with the issues/doubts you might get from updating.\r\nWe will be happy to help you with the migration!\r\n"
      },
      {
        "user": "mdelclaro",
        "created_at": "2023-02-28T19:51:31Z",
        "body": "fixed it by forking the old version"
      }
    ]
  },
  {
    "number": 16777,
    "title": "ccxt.base.errors.AuthenticationError: binance {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}",
    "created_at": "2023-02-07T12:06:19Z",
    "closed_at": "2023-02-07T12:37:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16777",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nccxt                  2.1.52\n\n### Description\n\nWhy does this error occur? Two servers running different policies, using the same KEY, and only one of them has this error\r\n\r\nccxt.base.errors.AuthenticationError: binance {\"code\":-2008, \"msg\": \"Invalid Api-Key ID.\"}\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16777/comments",
    "author": "netsesame",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-07T12:26:08Z",
        "body": "Hello @netsesame,\r\nIt's very hard to tell without more information, what are the different policies in this context? Do you have a geographic/ip restriction enabled? Are you accessing it from the US?"
      },
      {
        "user": "netsesame",
        "created_at": "2023-02-07T12:35:36Z",
        "body": "I think I know what the problem is. binance has recently deleted a lot of unsafe API KEY. Thank you"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-02-07T12:37:34Z",
        "body": "@netsesame no problem, I'm going to close this issue then, let us know if anything!"
      }
    ]
  },
  {
    "number": 16765,
    "title": "Bitget fetchOrderBook ExchangeError: XXXX cannot be empty",
    "created_at": "2023-02-07T03:08:54Z",
    "closed_at": "2023-11-08T18:42:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16765",
    "body": "### Operating System\n\nCentOS7.6\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n2.6.36\n\n### Description\n\nMy test code below for specified symbols such as MTL/USDT:USDT and FOOTBALL/USDT:USDT:\r\n```javascript\r\nasync function testBitGet() {\r\n    const bitget = new ccxt.bitget();\r\n    while(true) {\r\n        const orderbook = await bitget.fetchOrderBook(\"MTL/USDT:USDT\");\r\n        console.log(JSON.stringify(orderbook))\r\n    }\r\n}\r\n```\n\n### Code\n\n```bash\r\nExchangeError: bitget {\"code\":\"40019\",\"msg\":\"Parameter MTLUSDT cannot be empty\",\"requestTime\":1675739072763,\"data\":null}\r\n    at bitget.handleErrors (/root/workspace/cexhub/node_modules/ccxt/js/bitget.js:3755:19)\r\n    at /root/workspace/cexhub/node_modules/ccxt/js/base/Exchange.js:603:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async timeout (/root/workspace/cexhub/node_modules/ccxt/js/base/functions/time.js:181:20)\r\n    at async bitget.fetch2 (/root/workspace/cexhub/node_modules/ccxt/js/base/Exchange.js:2023:16)\r\n    at async bitget.request (/root/workspace/cexhub/node_modules/ccxt/js/base/Exchange.js:2027:16)\r\n    at async bitget.fetchOrderBook (/root/workspace/cexhub/node_modules/ccxt/js/bitget.js:1505:26)\r\n    at async testBitGet (/root/workspace/cexhub/test/test.js:87:27) {\r\n  constructor: [class ExchangeError extends BaseError]\r\n}\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16765/comments",
    "author": "zhangxf55",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-07T18:13:38Z",
        "body": "Hello @zhangxf55,\r\nYou get that error because you're trying to access a delisted/inactive market. \r\nYou can check it beforehand by doing:\r\n\r\n```Javascript\r\nconst market = exchange.market (symbol);\r\nconst isActive = market['active']\r\n```"
      },
      {
        "user": "zhangxf55",
        "created_at": "2023-02-10T01:30:17Z",
        "body": "It seems that market.active is undefined in swap market in bitget:\r\n```javascript\r\nconst bitget = new ccxt.bitget();\r\nawait bitget.loadMarkets();\r\nconst market = bitget.market(\"MTL/USDT:USDT\");\r\nconsole.log(market['active']);\r\n```\r\nTerminal Output:\r\n```bash\r\n[root@zhangxf55 cexhub]# node test/test.js \r\nundefined\r\n```\r\nwhile in spot market:\r\n```js\r\n```javascript\r\nconst bitget = new ccxt.bitget();\r\nawait bitget.loadMarkets();\r\nconst market = bitget.market(\"MTL/USDT\");\r\nconsole.log(market['active']);\r\n```\r\nTerminal output:\r\n```bash\r\n[root@zhangxf55 cexhub]# node test/test.js \r\ntrue\r\n```\r\n\r\n> Hello @zhangxf55, You get that error because you're trying to access a delisted/inactive market. You can check it beforehand by doing:\r\n> \r\n> ```js\r\n> const market = exchange.market (symbol);\r\n> const isActive = market['active']\r\n> ```\r\n\r\n"
      }
    ]
  },
  {
    "number": 16650,
    "title": "python async speed slower",
    "created_at": "2023-01-27T07:36:29Z",
    "closed_at": "2023-01-27T18:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16650",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.6.94\n\n### Description\n\nWhile I was trying to migrate my code to async I noticed that my execution was slower.\r\n\r\nI wrote a small code to compare the async vs sync speed. \r\n\r\nAverage execution time of both is written below in seconds in one of my test runs. On average async takes rougly 2x longer . Similar results when tested in other methods such as \"fetch_tickers\".\r\n\r\nasync mean: 1.1664345026016236\r\nsync mean: 0.5469205617904663\n\n### Code\n\n```\r\nimport asyncio\r\nimport time\r\n\r\nimport ccxt.async_support as ccxta  \r\nimport ccxt\r\nimport os\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nbinance_keys = {\r\n        \"apikey\" : os.getenv(\"BINANCE_APIKEY\"),\r\n        \"secret\" : os.getenv(\"BINANCE_SECRET\")\r\n    }\r\n\r\nasync def get_balance_async(exchange):\r\n    balance = await exchange.fetch_balance()\r\n    await exchange.close()\r\n    return balance\r\n\r\nexchange_async = ccxta.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\nexchange_sync = ccxt.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\ntime_sync = []\r\ntime_async = []\r\n\r\nloop = asyncio.get_event_loop()\r\nfor i in range(10):\r\n\r\n    start = time.time()\r\n    loop.run_until_complete(get_balance_async(exchange_async))\r\n    time_async.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\n    start = time.time()\r\n    balance = exchange_sync.fetch_balance()\r\n    time_sync.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\nprint(\"Async data: \", time_async)\r\nprint(\"Sync data: \", time_sync)\r\nprint(f\"async mean: {sum(time_async)/len(time_async)}\")\r\nprint(f\"sync mean: {sum(time_sync)/len(time_sync)}\")\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16650/comments",
    "author": "akasimo",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-27T11:23:45Z",
        "body": "Hello @akasimo,\r\nThe difference is not related to the sync vs async approach, but the default RateLimiter ccxt async has in place. You can disable it if you want by providing this option: `enableRateLimit: False`. "
      },
      {
        "user": "akasimo",
        "created_at": "2023-01-27T18:00:26Z",
        "body": "perfect, thanks!"
      }
    ]
  },
  {
    "number": 16578,
    "title": "binancecoinm fetch_positions() returns non standard symbol name for LUNA in sandbox mode",
    "created_at": "2023-01-22T13:21:37Z",
    "closed_at": "2023-01-24T07:27:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16578",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.6.21\n\n### Description\n\nccxt.bianncecoinm.fetch_positions() (and fetch_positions_risk()) return a non-standard symbol name for LUNAUSD_PERP instead of either a) not returning it at all or b) returning LUNA/USD:LUNA.\r\n\r\nHowever, ccxt.binancecoinm.fetch_account_positions() does not return this symbol at all.\r\n\r\nThis appears to be driven by the underlying binance call returning LUNA as a symbol for the api call fetchPositionsRisk but not returning it for the api call fetchAccountPositions ??? and in turn, LUNA is no longer included in the markets mapping for safe_symbol() for some reason - so the default 'LUNAUSD_PERP' is returned.\r\n\r\nI lost it there... not sure what the correct fix would be in order to respect the unified symbol naming convention.\r\n\r\nFor now, I will use fetch_account_positions() as it seems 'cleaner'.\r\n\r\nThe code below shows the #62 symbols (with LUNA) from fetch_positions() and fetch_positions_risk() vs. the #61 symbols returned from fetch_account_positions()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n### Code\n\n```\r\n  import ccxt \r\n\r\nconfig = {\r\n    'apiKey': 'b...c9',\r\n    'secret': '9...2e',\r\n}\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.binancecoinm(config)\r\nexchange.set_sandbox_mode(True)\r\nmarkets = exchange.load_markets()\r\n\r\nprint(\"LUNA with non-standard symbol name in fetch_positions()\")\r\npositions = exchange.fetch_positions()\r\nprint(\"POSITIONS #\", len(positions))\r\nfor position in positions:\r\n    if 'LUNA' in position['symbol']:\r\n        print(position['symbol'], position['info']['symbol'])\r\n\r\nprint(\"LUNA with non-standard symbol name in fetch_position_risk()\")\r\npositions = exchange.fetch_positions_risk()\r\nprint(\"POSITIONS RISK #\", len(positions))\r\nfor position in positions:\r\n    if 'LUNA' in position['symbol']:\r\n        print(position['symbol'], position['info']['symbol'])\r\n\r\nprint(\"The LUNA token does not appear in list for fetch_account_positions()\")\r\npositions = exchange.fetch_account_positions()\r\nprint(\"ACCOUNT POSITIONS #\", len(positions))\r\nfor position in positions:\r\n    if 'LUNA' in position['symbol']:\r\n        print(position['symbol'], position['info']['symbol'])\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16578/comments",
    "author": "FredTingey",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-23T16:31:30Z",
        "body": "Hello @FredTingey, yeah if the market is already delisted and not returned by the API I don't think there's an easy solution on the ccxt side. Can't you handle it on your side easily? "
      },
      {
        "user": "FredTingey",
        "created_at": "2023-01-24T07:27:13Z",
        "body": "I can handle it on my side for sure.\r\n\r\nI thought it would not be easy as the binance api is giving two different results; one with LUNA the other without. So what to do? Filter to only return what is defined in the market or return what the exchange gives?\r\n\r\n"
      }
    ]
  },
  {
    "number": 16561,
    "title": "How to check if websocket is still alive",
    "created_at": "2023-01-20T17:59:03Z",
    "closed_at": "2023-01-22T21:40:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16561",
    "body": "### Operating System\r\n\r\n_No response_\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n2.6.47\r\n\r\n### Description\r\n\r\nHi,\r\n\r\nThere is an issue with the websocket on future:\r\n`future: <Task finished name='Task-32' coro=<watch_orders() done, defined at /main.py:839> \r\nexception=RequestTimeout('Connection to wss://fstream.binance.com/ws/mykey timed out due to a ping-pong keepalive missing on time')>\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/main.py\", line 841, in watch_orders\r\n    await gather(*loops)\r\n\r\n  File \"/main.py\", line 819, in watch_symbol_orders\r\n    _orders = await exchange.watch_orders(symbol, params={'type':'future'})\r\n\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/pro/binance.py\", line 1183, in watch_orders\r\n    orders = await self.watch(url, messageHash, message, type)\r\n\r\nccxt.base.errors.RequestTimeout: Connection to wss://fstream.binance.com/ws/mykey timed out due to a ping-pong keepalive missing on time\r\n\r\n\r\n\r\nBut I saw this problem many hours after when manually monitoring my orders.\r\n\r\nIs there a way to see if the websocket (watch_orders for instance) is still alive please?\r\n\r\n### Code\r\n\r\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16561/comments",
    "author": "nikky78",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-01-20T19:52:41Z",
        "body": "Hi @nikky78 , in this case when the websocket is disconnected, it will throw an error, and then reconnect automatically on the next call to `watch_orders`."
      }
    ]
  },
  {
    "number": 16544,
    "title": "Binance isolated margin sapi_post_margin_loan raise error",
    "created_at": "2023-01-19T20:43:27Z",
    "closed_at": "2023-01-20T17:53:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16544",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n2.6.47\n\n### Description\n\nresponse = await exchange.sapi_post_margin_loan({\r\n    'asset': 'BTC',\r\n    'amount': \"0.001\",\r\n    'isIsolated': \"TRUE\",\r\n    'symbol': 'BTCUSDT'\r\n})\r\n\r\nraise AuthenticationError: binance {\"code\":-1002,\"msg\":\"You are not authorized to execute this request.\"}\r\n\r\nWhile I manage to send orders in isolated mode.\n\n### Code\n\n```\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16544/comments",
    "author": "nikky78",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-19T22:23:01Z",
        "body": "Hello @nikky78 \r\nCan you check if you have the necessary permissions enabled in your account’s API Management page?"
      }
    ]
  },
  {
    "number": 16501,
    "title": "Api key not found for phemex",
    "created_at": "2023-01-16T00:05:49Z",
    "closed_at": "2023-01-16T04:24:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16501",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.6.22\n\n### Description\n\nI am doing basic test with Phemex.  I created an API Key and secret, but when I do that I get the following error (I removed the key stated in the error:\r\n\r\nWhat am I doing wrong?\r\n\r\nCCXT Version: 2.6.22\r\nTraceback (most recent call last):\r\n  File \"/Users/jonathanbarber/tmp/trading/phemex.py\", line 15, in <module>\r\n    balance = exchange.fetch_balance()\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/phemex.py\", line 1565, in fetch_balance\r\n    response = getattr(self, method)(self.extend(request, params))\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/base/exchange.py\", line 505, in inner\r\n    return entry(_self, **inner_kwargs)\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/base/exchange.py\", line 2816, in request\r\n    return self.fetch2(path, api, method, params, headers, body, config, context)\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/base/exchange.py\", line 2813, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/base/exchange.py\", line 667, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/phemex.py\", line 3483, in handle_errors\r\n    self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)\r\n  File \"/Users/jonathanbarber/Library/Python/3.9/lib/python/site-packages/ccxt/base/exchange.py\", line 3121, in throw_broadly_matched_exception\r\n    raise broad[broadKey](message)\r\nccxt.base.errors.AuthenticationError: phemex {\"msg\":\"Api key not found XXXXXX\",\"code\":10500}\n\n### Code\n\n```\r\nimport ccxt\r\nimport config as cfg\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.phemex({\r\n    'enableRateLimit': True,\r\n    'apiKey': cfg.PHEMEX_API_KEY,\r\n    'secret': cfg.PHEMEX_SECRET_KEY\r\n})\r\n\r\n#ob = cb.fetch_order_book('ETH/USDT')\r\n\r\nbalance = exchange.fetch_balance()\r\nprint(balance)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16501/comments",
    "author": "jbarber2016",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-16T04:24:10Z",
        "body": "Hi @jbarber2016,\r\n\r\nIt worked for me, would you like do check your config or api key?"
      },
      {
        "user": "jbarber2016",
        "created_at": "2023-01-16T12:29:50Z",
        "body": "@sc0Vu Here's what I am doing in Phemex.  First I use google authentication to login.  Second, I bind to google authenticator because that's where I get the secret key.  Third, I generate the api key under api maanagement.  I use the default option, give it trading permissions, enter the binding ip (my public ip), and create.  I copied the api key from that window into python.  So, apparently I am doing something wrong, does any of this match with what you did?"
      },
      {
        "user": "tb00723",
        "created_at": "2024-04-03T18:51:31Z",
        "body": "> @sc0Vu Here's what I am doing in Phemex. First I use google authentication to login. Second, I bind to google authenticator because that's where I get the secret key. Third, I generate the api key under api maanagement. I use the default option, give it trading permissions, enter the binding ip (my public ip), and create. I copied the api key from that window into python. So, apparently I am doing something wrong, does any of this match with what you did?\r\n\r\ni have the same problem did u fix it?"
      }
    ]
  },
  {
    "number": 16500,
    "title": "How to fetchCurrencies workes?",
    "created_at": "2023-01-15T21:24:48Z",
    "closed_at": "2023-01-16T04:24:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16500",
    "body": "### Operating System\r\n\r\nWindows 10 \r\n\r\n### Programming Languages\r\n\r\nNodejs\r\n\r\n### CCXT Version\r\n\r\n2.5.47\r\n\r\n### Description\r\n\r\nThis is not exactly a bug request, more of a question. I'm sorry, I couldn't find the question section. The thing is, I can't get the currency structure. In the documentation, this method is listed as public, but I saw a similar question where the developers said that the structure of the token, the commission and the network can only be obtained with an API key. How can I get Currency Structure? I also tried the example directly from the documentation, but it's most likely for python, or I'm using it incorrectly\r\n\r\n### Code\r\n\r\n```\r\n  \r\nconst ccxt = require(\"ccxt\");\r\n\r\n(async function () {\r\n  let binance = new ccxt.binance();\r\n  await binance.loadMarkets;\r\n  let cur= await binance.fetchCurrencies[\"ETH\"];\r\n  console.log(cur);  // undefined\r\n})();\r\n\r\n// Example from docs\r\n(async function () {\r\n  let binance = new ccxt.binance();\r\n  await binance.loadMarkets();\r\n  let cur= binance.currencies[\"ETH\"][\"fee\"];\r\n  console.log(cur);  // undefined\r\n})(); /\r\n\r\n//I want this Currency Structure\r\n\r\n{\r\n    'id':       'btc',       \r\n    'code':     'BTC',       \r\n    'name':     'Bitcoin',   \r\n    'active':    true,       \r\n    'fee':       0.123,      \r\n    'precision': 8,         \r\n    'deposit':   true      \r\n    'withdraw':  true        \r\n    'limits': {              \r\n        'amount': {\r\n            'min': 0.01,     \r\n            'max': 1000,     \r\n        },\r\n        'withdraw': { ... },\r\n        'deposit': {...},\r\n    },\r\n    'networks': {...}        \r\n    'info': { ... },    \r\n}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16500/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-16T04:23:19Z",
        "body": "Hi @AlwxDavydov \r\n\r\nAfter loadMarkets, you can get currency:\r\n\r\n`let cur= binance.currency('ETH')`"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-01-16T05:07:17Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 16444,
    "title": "Latoken can not get specific token amount, but it shows in total exchange balance",
    "created_at": "2023-01-11T22:14:56Z",
    "closed_at": "2023-01-12T02:48:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16444",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n2.5.89\n\n### Description\n\nHello:\r\nI send one kind of crypto: 1SOL to my account at Latoken, my code can’t show its value in my account. But the code to show total exchange balance finds the amount without currency name.\r\nPlease advise if I made any mistake.  The same code works for Binance, Gate and Huobipro, but not Latoken.\r\nThe following is the output for my code to get specific token’s balance:\r\nC:\\ArbitApps\\CCXT\\CCXTNodeByFunctions>node latoken_getCoin1Balance.js 1SOL\r\n{\"Ticker\":\"1SOL\",\"Amount\":0}\r\n\r\nThe following is the output for my code to get my balance in the exchange without currency name:\r\nC:\\ArbitApps\\CCXT\\CCXTNodeByFunctions>node latoken_getExchangeBalance.js\r\n{\r\n  info: [\r\n    {\r\n      id: 'b0e4bc98-49b0-4f9e-952c-3a242c39b8f7',\r\n      status: 'ACCOUNT_STATUS_ACTIVE',\r\n      type: 'ACCOUNT_TYPE_WALLET',\r\n      timestamp: '1673473520129',\r\n      currency: 'e7e442e1-9f23-44df-98c7-06a1e95dc6b0',\r\n      available: '3583.217930846400000000',\r\n      blocked: '0.000000000000000000'\r\n    }\r\n  ],\r\n  timestamp: undefined,\r\n  datetime: undefined,\r\n  free: {},\r\n  used: {},\r\n  total: {}\r\n}\r\n\r\nPlease advise if I made any mistake.\r\nThe following is my code for exchange balance:\r\nconst ccxt = require('ccxt');\r\n\r\nlet exchange = new ccxt.latoken\r\n({\r\napiKey: 'My_API_Key',\r\nsecret: 'My_Secret_Key',\r\n'options': {\r\n'adjustForTimeDifference': true,\r\n'fetchCurrencies': true,\r\n'verbose': false, }\r\n});\r\n\r\nasync function getExchangeBalance()\r\n{\r\ntry\r\n{\r\nconst balance = await exchange.fetchBalance();\r\nconsole.log(balance);\r\n}\r\ncatch (err)\r\n{\r\nconsole.error(err)\r\n}\r\n};\r\ngetExchangeBalance();\r\n\n\n### Code\n\n```\r\nconst ccxt = require('ccxt');\r\n\r\nif (process.argv.length != 3)\r\n{\r\nconsole.error('Usage: Currency1_Balance USDT');\r\nconsole.error('Get Coin1 balance at exchange');\r\nconsole.error('Please try again!');\r\nprocess.exit(1);\r\n }\r\nconst [nodejs, script1, coin1] = process.argv;\r\n\r\nlet exchange = new ccxt.latoken\r\n({\r\napiKey: 'My_API_Key',\r\nsecret: 'My_Secret_Key',\r\n'options': {\r\n'adjustForTimeDifference': true,\r\n'fetchCurrencies': true,\r\n'verbose': true, }\r\n});\r\n\r\n\r\nconst getCoin1Balance = async(coin1) =>\r\n{\r\ntry\r\n{\r\nconst dict_money = await exchange.fetchBalance();\r\nconst coin1_balance = dict_money.free[coin1];\r\nif (typeof coin1_balance !== 'undefined')\r\n{\r\nconst balance1 = ({ 'Ticker': coin1, 'Amount': coin1_balance });\r\nconst json_balance1 = JSON.stringify(balance1);\r\nconsole.log(json_balance1);\r\n}\r\nelse\r\n{\r\nconst balance0 = ({ 'Ticker': coin1, 'Amount': 0 });\r\nconst json_balance0 = JSON.stringify(balance0);\r\nconsole.log(json_balance0);\r\n}\r\n}\r\ncatch (err)\r\n{\r\nconsole.error(err)\r\n}\r\n};\r\ngetCoin1Balance(coin1);\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16444/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-12T02:40:35Z",
        "body": "Hi @zydjohnHotmail \r\n\r\nBecause the coin is in `ACCOUNT_TYPE_WALLET`, and the default wallet is `ACCOUNT_TYPE_SPOT`. Please use `await exchange.fetchBalance({'type':'wallet'})` and you'll see `1SOL` in your balance."
      }
    ]
  },
  {
    "number": 16414,
    "title": "How to detect programmatically if defaultType needs to be specified when accessing spot and swap market?",
    "created_at": "2023-01-10T09:57:35Z",
    "closed_at": "2023-01-11T08:51:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16414",
    "body": "### ؜\n\nHello,\r\n\r\nI  can't find documentation about the instance's option `defaultType` and `defaultSubType` and was wondering how to detect if they need to be set when accessing markets or when sending an order to spot or swap markets. Some exchanges have the options (Binance, Bybit) but not all (Coinbase, Kucoin, Bitmex). Why and when to use them ?\r\n\r\n```\r\nIn [4]: ccxt.binance().options['defaultType']\r\nOut[4]: 'spot'\r\n\r\nIn [5]: ccxt.coinbase().options['defaultType']\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-5-05a53e58eafe> in <module>\r\n----> 1 ccxt.coinbase().options['defaultType']\r\n\r\nKeyError: 'defaultType'\r\n\r\nIn [6]: ccxt.kraken().options['defaultType']\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-6-6940b7a1c511> in <module>\r\n----> 1 ccxt.kraken().options['defaultType']\r\n\r\nKeyError: 'defaultType'\r\n\r\nIn [7]: ccxt.bitmex().options['defaultType']\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-7-3c725d5072a7> in <module>\r\n----> 1 ccxt.bitmex().options['defaultType']\r\n\r\nKeyError: 'defaultType'\r\n\r\nIn [8]: ccxt.bybit().options['defaultType']\r\nOut[8]: 'swap'\r\n\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16414/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-10T10:06:16Z",
        "body": "Hello @Kinzowa,\r\n\r\n`defaultType` is an option that helps us to disambiguate between markets from different types (spot and swap for example) but with conflicting ids.\r\n\r\nWith the latest developments, if you always use the unified symbols, you only have to worry about methods that don't require a symbol (`fetchBalance`, for instance) . Most of the time (bybit is the only exception here), it will default to `spot` when it has to choose between the spot and swap. \r\n\r\nIn short, you might need to change `defaultType` here and there to get non-spot information when the symbol is not available, but it should be effortless to set it up. \r\n"
      },
      {
        "user": "Kinzowa",
        "created_at": "2023-01-10T11:36:40Z",
        "body": "Hi, Carlos,\r\n\r\nThanks for your answer.\r\n\r\nMy understanding is that `defaultType` specify an account's type which give access to markets of that specific type. But I'm still scratching my head why, on some exchanges like Kucoin, markets of different types can be accessed without the `defaultType` parameter. Could you please elaborate if it's related to the exchange internal account structure or something different? \r\n\r\nI remember that FTX had a unique account for spot, swap and futures markets, so that no internal transfer of fund were necessary. However, I see that the `transfer()` method is supported by Kucoin whereas this exchange has no `defaultType`'s option, which is a contradiction to me.\r\n\r\nBR,\r\nKinzowa"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-01-10T11:51:26Z",
        "body": "Hello again @Kinzowa \r\n\r\nAs I said `defaultType` is just a little helper on our end it's not directly related to any exchange/account.\r\n\r\nKucoin is a peculiar case because it has completely independent APIs/ API keys/implementations for spot and derivative markets, so it does not need any \"help\" (`defaultType`). `kucoin` will always return spot info whereas `kucoinfutures´ will always return derivatives-related information. \r\n\r\nLet's say you do this\r\n```Python\r\nbybit.fetch_ticker('BTC/USDT') # spot market\r\nbybit.fetch_ticker('BTC/USDT:USDT') # derivative market\r\n```\r\n⬆️ Here, `defaultType` isn't necessary either because our unified symbols are enough to distinguish between a spot or a swap market, so ccxt knows that in the first call, it should use the `spot` endpoint and the `swap` one in the second call.\r\n\r\nNow you run this:\r\n```Python\r\nbybit.fetch_balance()\r\n```\r\n⬆️  This is a bit different, `bybit` has different wallets and the endpoint to fetch them is also different, so ccxt has to decide if it should use the `spot` or `swap` endpoint. Since we don't have any symbol available to disambiguate ccxt will resort to the `defaultType` to make this decision unless you specifically provide a `type` inside `params`.\r\n\r\nExample:\r\n```Python\r\nbybit.fetch_balance() # will use the defaultType (`swap` in this case) to disambiguate, so will fetch derivative balances\r\nbybit.fetch_balance({\"type\":\"spot\"}) # type is provided, so we don't need to resort to `defaultType` and spot balances will be fetched\r\n```\r\n\r\nLet me know if you're still not 100% clear on this!\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "Kinzowa",
        "created_at": "2023-01-10T12:06:32Z",
        "body": "Thank you, it's very helpful. Based on your example I assume that Kucoin has a unique wallet for spot, futures and swap."
      },
      {
        "user": "Kinzowa",
        "created_at": "2023-01-10T13:07:37Z",
        "body": "@carlosmiei Kucoin has a Main Account and a Futures Account (.i.e. wallets), both with different interface to GET the account or wallet balance. So how ccxt decides which account the `fetch_balance()` method should return without a `defaultType`'s option ?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-01-10T18:30:28Z",
        "body": "@Kinzowa yeah, actually kucoin uses the `defaultType`  there"
      }
    ]
  },
  {
    "number": 16406,
    "title": "[Python] set TP and SL in Bybit ",
    "created_at": "2023-01-10T03:11:55Z",
    "closed_at": "2023-01-10T13:09:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16406",
    "body": "### Operating System\r\n\r\nLinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n2.5.56\r\n\r\n### Description\r\n\r\nAny way to set TP and SL with bybit in python?\r\nI keep getting errors like\r\n\r\n```\r\nERROR:root:bybit {\"retCode\":10001,\"retMsg\":\"expect Failling, but trigger_price[5980000] \\u003e= current[1361500]??1\",\"result\":{},\"retEx\r\n``` \r\n\r\nor \r\n\r\n```\r\nERROR:root:bybit {\"retCode\":10001,\"retMsg\":\"expect Rising, but trigger_price[1249500] \\u003c= current[1363000]??1\",\"result\":{},\"retExtI\r\n```\r\nboth for shorts and longs\r\n\r\n### Code\r\n\r\n```\r\n  bybit.create_order(symbol=position.symbol,\r\n                                   type='limit',\r\n                                   side=position.direction,\r\n                                   amount=size,\r\n                                   price=float(position.entry),\r\n                                   params={\r\n                                    'leverage': LEVER,\r\n                                    'stopLossPrice': float(position.sl),\r\n                                    'takeProfitPrice': float(position.tp),\r\n                                    })\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16406/comments",
    "author": "3ntr0phy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-10T09:56:07Z",
        "body": "Hello @3ntr0phy,\r\n\r\nActually, `stopLossPrice` and `takeProfitPrice` params are incompatible params, because they're meant to be used when you want your order or behave as a `stopLoss` **or** `takeProfit` orders. \r\n\r\nIf you want to attach a takeProfit and stopLoss order to the position being opened, you should use the `stopLoss` and `takeProfit` params.\r\n\r\nExample:\r\n\r\n```Python\r\nparams = {\r\n    'stopLoss': str(float(position.sl)), # stringified number\r\n    'takeProfi': str(float(position.tp)), # stringified number\r\n}\r\nbybit.create_order(...., params = params)\r\n```\r\n"
      },
      {
        "user": "3ntr0phy",
        "created_at": "2023-01-10T13:09:57Z",
        "body": "Great it works!"
      }
    ]
  },
  {
    "number": 16353,
    "title": "ccxt createOrder with BadSymbol errror",
    "created_at": "2023-01-06T01:58:35Z",
    "closed_at": "2023-01-06T08:36:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16353",
    "body": "### ؜\n\nOS: 13.0 (22A380)\r\nProgramming Language version: Node v14.21.1\r\nCCXT version: 1.95.43\r\n\r\nHi supporters.\r\nI got an error when I createOrder with symbol BCHUSDT and LINKUSDT, etc..\r\nThis is my code example for BCHUSDT case\r\n```\r\nlet binanceTransaction: ccxt.Order\r\ntry {\r\n      binanceTransaction = await binance.createOrder(\r\n        'BCHUSDT',\r\n        'MARKET',\r\n        'sell',\r\n       10,\r\n      )\r\n    } catch (error) {\r\n      this.logger.debug(`Create Order Binance Failed Reason: ${error}`)\r\n}\r\n```\r\nI got an error bellows\r\n```\r\nCreate Order Binance Failed Reason: BadSymbol: binance does not have market symbol BCHUSDT\r\n```\r\nPlease help me check or give me some incorrect points.\r\nThank you.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16353/comments",
    "author": "giang21199z",
    "comments": [
      {
        "user": "giang21199z",
        "created_at": "2023-01-06T03:04:34Z",
        "body": "This is testnest environment. I would like ask which coins testnet supported?\r\nI wonder about BCH or LINK are not supported in testnest environment?"
      },
      {
        "user": "sc0Vu",
        "created_at": "2023-01-06T08:36:50Z",
        "body": "@giang21199z \r\n\r\nYou can check whether markets is supported after load markets.\r\n\r\n```js\r\npair = 'xxx/xxx'\r\ntry {\r\n  await exchange.loadMarkets()\r\n  try {\r\n    const market = exchange.market(pair)\r\n  } catch (err) {\r\n    // pair not supported\r\n  }\r\n} catch (err) {\r\n  // probably network / credential issue\r\n}\r\n```\r\n\r\nLet me know if you have other questions."
      }
    ]
  },
  {
    "number": 16348,
    "title": "CCXT OKEX fetchorders not showing stoploss orders",
    "created_at": "2023-01-05T20:25:58Z",
    "closed_at": "2023-01-06T08:37:21Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16348",
    "body": "### Operating System\r\n\r\n\r\n_No response_\r\n\r\n### Programming Languages\r\nPython3\r\n\r\n### CCXT Version\r\n1.79.95\r\n\r\n### Description\r\nfor okex, fetch_open_orders() outputs my limit orders but not my stoploss/takeprofit orders\r\n\r\nhow can i get my stoploss/takeprofit orders? it's driving me nuts!\r\n\r\n### Code\r\nokex = ccxt.okex({\r\n     \"apiKey\": xxx,\r\n     \"secret\": xxx,\r\n     \"password\": xxx,\r\n     'enableRateLimit': True,\r\n     'options': {\r\n         'defaultType': 'swap',\r\n         'swap': True# ←-------------- quotes and 'future'\r\n     }\r\n})\r\n\r\n```\r\nokex.fetch_open_orders() #shows limit orders but not SL/TP orders\r\n\r\nparams = {'stop':True} \r\nokex.fetch_open_orders(params=params) \r\n\r\n#outputs ccxt.base.errors.BadRequest: okex {\"code\":\"51000\",\"data\":[],\"msg\":\"Parameter ordType  error\"}\r\n  \r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16348/comments",
    "author": "pachinkopirate",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-06T08:28:13Z",
        "body": "Hi @pachinkopirate \r\n\r\nThe `ordType` is required.\r\nordType | String | Yes | Order typeconditional: One-way stop orderoco: One-cancels-the-other ordertrigger: Trigger ordermove_order_stop: Trailing ordericeberg: Iceberg ordertwap: TWAP order\r\n-- | -- | -- | --\r\n\r\neg:\r\n\r\n```python\r\nsymbol = 'ETH/USDT:USDT'\r\nparams = {'stop':True,'ordType':'oco'} \r\nokex.fetch_open_orders(symbol, None, None, params) \r\n```\r\n\r\nLet me know if you have other questions."
      },
      {
        "user": "pachinkopirate",
        "created_at": "2023-01-06T17:51:57Z",
        "body": "omg - works perfectly.  thank you so much!! @sc0Vu "
      }
    ]
  },
  {
    "number": 16315,
    "title": "Deribit: how to create stop order / trigger order?",
    "created_at": "2023-01-03T12:56:49Z",
    "closed_at": "2023-01-05T16:03:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16315",
    "body": "### ؜\n\nHello and a happy new year to everyone :-),\r\n\r\nsorry for the ugly format, but I can't change anything in the above field anymore.  Only able to write in this box here. Seems to be read-only formatted? \r\n\r\nOS: Windows 10\r\nProgramming Language version: Python Spyder 3.9\r\nCCXT version: ccxt-2.4.47\r\n\r\nMy question is: How to create an stop order/trigger order on deribit?\r\nUnfortunately I can't find any information that can help me. I already checked API documentation from deribit and searched here on github.\r\n\r\nI tried different order types. But If I want to place a stop order under entry price and market price the order will be triggered\r\nimmediately and position gets closed.\r\n\r\nExample:\r\npos_size = 10\r\nEntry price: 1215 (long)\r\nMarket price: 1216\r\n\r\nparams={'reduce_only': True,\r\n         'close_on_trigger': True}\r\nderibit.create_stop_market_order(symbol, side='sell', amount=pos_size, stopPrice=1200, params=params)\r\n\r\n-->\r\nPosition will be closed immediately\r\n\r\nHopefully someone can help me, thanks!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16315/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-04T16:44:44Z",
        "body": "Hello @Nitrix321,\r\nDeribit has two types of stop orders, take profit or stop loss orders. Basically, if you want the order to trigger when the price crosses from above (for instance, the price dropped from 70 to 60) you should use the `stopLossPrice` in params, if you want a trigger when the price crosses from above  `takeProfitPrice` is the correct parameter. \r\n\r\nExample take profit order: \r\n```Python\r\n    params = {\r\n        'takeProfitPrice': 100 # buy orders are allowed when price crosses from below\r\n    }\r\n    create_order = await exchange.create_order(symbol, type, side, amount, price, params)\r\n```\r\n\r\nExample stop loss order: \r\n```Python\r\n    params = {\r\n        'stopLossPrice': 50 # stop loss sell orders are allowed when price crosses from above\r\n    }\r\n    create_order = await exchange.create_order(symbol, type, side, amount, price, params)\r\n```\r\n"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-01-05T16:03:10Z",
        "body": "Hi @carlosmiei , thank u very much again.\r\nI will try it again :-). "
      }
    ]
  },
  {
    "number": 16296,
    "title": "Gate market order not working: createMarketBuyOrder is not defined",
    "created_at": "2023-01-02T09:52:00Z",
    "closed_at": "2023-01-04T15:53:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16296",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n2.5.5\n\n### Description\n\nHello:\r\nI want to place a limit buy order in exchange gate, but I found gate seems not support limit order, so I changed my code to use market order, but I got error:\r\ncreateMarketBuyOrder is not defined.\r\nThe following is the total output:\r\nD:\\nodejs\\CCXT_Gate>node gate_actPair1MarketOrder.js buy BTCST/USDT 3.4\r\n2.5.5\r\nPlace a buy market oder!\r\nReferenceError: createMarketBuyOrder is not defined\r\n    at actPair1MarketOrder (D:\\nodejs\\CCXT_Gate\\gate_actPair1MarketOrder.js:32:21)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n\r\nD:\\nodejs\\CCXT_Gate>\n\n### Code\n\n```\r\nconst ccxt = require('ccxt');\r\nconsole.log(ccxt.version);\r\n\r\nif (process.argv.length != 5)\r\n{\r\nconsole.error('Usage: buy|sell BTC/USDT Amount');\r\nconsole.error('Buy|Sell Pair1 at market price with amount');\r\nconsole.error('Please try again!');\r\nprocess.exit(1);\r\n}\r\nconst [nodejs, script1, act1, pair1, amount1] = process.argv;\r\n\r\nlet exchange = new ccxt.gate\r\n({\r\napiKey: 'My_API_Key',\r\nsecret: 'My_Secret_Key',\r\n'options': {\r\n'adjustForTimeDifference': true,\r\n'fetchCurrencies': true,\r\n'verbose': true, }\r\n});\r\n\r\nconst actPair1MarketOrder = async (act1, pair1, amount1) =>\r\n{\r\ntry\r\n{\r\nawait exchange.loadMarkets();\r\nswitch (act1)\r\n{\r\ncase 'buy':\r\nconsole.log('Place a buy market oder!');\r\nconst buy_market1 = await createMarketBuyOrder(pair1, amount1);\r\nconst json_buy = JSON.stringify(buy_market1);\r\nconsole.log(json_buy);\r\nbreak;\r\ncase 'sell':\r\nconsole.log('Place a sell market oder!');\r\nconst sell_market1 = await createMarketSellOrder(pair1, amount1);\r\nconst json_sell = JSON.stringify(sell_market1);\r\nconsole.log(json_sell);\r\nbreak;\r\n}\r\n}\r\ncatch (err)\r\n{\r\nconsole.error(err);\r\n}\r\n};\r\nactPair1MarketOrder(act1, pair1, amount1);\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16296/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-03T09:24:13Z",
        "body": "Hello @zydjohnHotmail,\r\nAccording to your snippet, you're calling a local undefined `createMarketSellOrder()`. You need to do `exchange.createMarketSellOrder()` "
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2023-01-03T09:28:22Z",
        "body": "Hi:\r\nThanks for your findings, I will change it and do some testing later.\r\nThanks,"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-01-04T15:53:10Z",
        "body": "@zydjohnHotmail Will close the issue, let us know if anything"
      }
    ]
  },
  {
    "number": 16193,
    "title": "CCXT Ascendex Stopped Working (fetch_markets())",
    "created_at": "2022-12-24T18:04:51Z",
    "closed_at": "2022-12-25T01:43:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16193",
    "body": "Hi all.\r\n\r\nHave been using CCXT for Ascendex successfully for months.  Recently it stopped working.\r\nIt's failing in 'load_markets'.  Base currency & quote currency for some trading pair I don't even care about are both Null, this leads to a Type error during concatenation.    I would guess some bad/null data coming from the exchange, or that Null's are not being filtered/handled properly in CCXT Ascendex.\r\n\r\n- OS:  AWS EC2 (Windows)\r\n- Programming Language version:  Python 3.9 ( 3.9.5 I think)\r\n- CCXT version:  latest, 2.2.89\r\n\r\nYOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\r\n\r\nascendex.py, line 573, 'fetch_markets()'\r\n\r\nERROR LINE>>>symbol = base + '/' + quote \r\n \r\nFails with Type error, because base & quote are both = None.\r\nThe symbol is XMR5S/USDT, which I am not even interested in.\r\n\r\n----\r\nThe calling code is standard set up:\r\n```\r\nself.exchange_class = getattr(mod, exchange_id)  \r\nself.ccxt = self.exchange_class({     'apiKey': config['apiKey'],     'secret': config['secret'],     'uid': config['uid'],     'password': config['password'],     'options': {         'defaultType': 'spot',     },     'enableRateLimit': True, })  \r\nself.ccxt.set_sandbox_mode( config['is_sandbox'] ) \r\n self.ccxt.load_markets()\r\n\r\n```\r\n\r\nYOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\r\n```\r\nNot very useful is it doesn't cast light on WHY they are None value.\r\n\"unsupported operand type(s) for +: 'NoneType' and 'str'\"\r\n```\r\n\r\nPlease advise, thank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16193/comments",
    "author": "SpenTappy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-24T18:10:39Z",
        "body": "Hello @SpenTappy,\r\nYes, we detected this issue recently, but it should already be fixed. Can you try updating to the latest version?\r\n\r\nThanks!"
      },
      {
        "user": "SpenTappy",
        "created_at": "2022-12-24T19:15:43Z",
        "body": "Thanks so much for quick response.  Turns out my 'latest' version wasn't as latest as I thought it was..\r\nConfirmed this is running well in `ccxt     2.4.55`\r\nHappy holidays."
      }
    ]
  },
  {
    "number": 16040,
    "title": "Asyncio workflow",
    "created_at": "2022-12-10T11:14:02Z",
    "closed_at": "2022-12-13T05:20:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16040",
    "body": "- Programming Language version: Python 3.10.5\r\n- CCXT version: 2.2.91\r\n\r\nIf I understand the asyncio functionality correctly , the workflow for this code is as following:\r\n```\r\nimport asyncio\r\nimport ccxt.pro\r\n\r\n\r\nasync def loop(exchange, symbol):\r\n    while True:\r\n        orderbook = await exchange.fetch_order_book(symbol)\r\n        # code without call exchange method\r\n        if condition:\r\n            await exchange.create_order(symbol, ...)\r\n\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.binance()\r\n    symbols = ['symbol1', 'symbol2', 'symbolN']\r\n    await asyncio.gather(*[loop(exchange, symbol) for symbol in symbols])\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n1. All loop functions execute code until 'fetch_order_book' call.\r\n2. Execute 'fetch_order_book' and execute code until 'fetch_order_book' if condition not True else until 'create_order'\r\n3. From symbol1 to symbolN in the order, execute 'fetch_order_book' or 'create_order'\r\n\r\nIs it right? \r\nSo my question is how can I execute the 'create_order' function immediately after 'fetch_order_book' if condition is True.\r\n\r\nThe purpose of my question is in case of you have lot of symbol in symbols list. If only the last symbol has condition True, you need to wait all symbol to fetch him orderbook before post your order. I would like to minimize the time between the execution of 'fetch_order_book_ and the execution of the trade.\r\n\r\nThanks you very much for your help.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16040/comments",
    "author": "Hadevmin",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-12-13T03:33:40Z",
        "body": "Hi @Hadevmin ,\r\n\r\nNot exactly. So asyncio will run all the loop functions in parallel and independently.\r\nEach loop function will first wait for `fetch_order_book`, check the condition and if true immediately call create_order. And continuously do so.\r\n\r\nSo this code should meet your needs of executing the 'create_order' function immediately after 'fetch_order_book' if condition is True.\r\n\r\nAlso for this case I'd recommend using `watch_order_book` which will provide order book updates, instead of having to fetch the full order book.\r\n\r\nPlease let me know if you have any further questions, if not feel free to close the issue"
      },
      {
        "user": "Hadevmin",
        "created_at": "2022-12-13T05:20:47Z",
        "body": "Hi @pcriadoperez,\r\n\r\nI probably made some mistakes in my tests because I was not observing this scenario....\r\nThanks for your help! And for the method, it is the case! ;)\r\nI use this condition before calling the order book or the account balance.\r\n```\r\nif exchange.has['watchOrderBook']:\r\n   exchange.watch_order_book\r\n   ...\r\nelif exchange.has['fetchOrderBook']:\r\n   exchange.fetch_order_book\r\n   ...\r\n```"
      }
    ]
  },
  {
    "number": 16022,
    "title": "Can I use the repo to receive tokens to and from different networks?",
    "created_at": "2022-12-08T13:37:02Z",
    "closed_at": "2022-12-08T20:46:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16022",
    "body": "- OS: Windows 10 PRO\r\n- Programming Language version: Node.js (version 19.2.0)\r\n- CCXT version: 2.2.84\r\n\r\nHi,\r\n\r\nI know I can use CCXT to withdraw tokens to any address if they are in ERC20, BEP20, SPL, TRC20 networks.\r\nBut I want to know if I can use some wallet, like Exodus which has desktop version, I create a wallet and I have the private key. I can withdraw tokens from my account in exchange to my wallet and can I use CCXT with the private key to send tokens from my wallet address to another my account in another exchange.\r\n\r\nFor example: \r\n\r\nLet’s say I setup Exodus wallet for Windows 10, and I have the address with the private key.\r\n\r\nIf I want to withdraw some USDT from my Binance account via ERC20 network, after I receive the USDT from my Binance account, can I use CCXT with the Exodus wallet private key, after paying the gas fees, send USDT to my Huobipro account via BEP20 network?\r\n\r\nI think receiving the USDT should work,  as it just a different address as any other exchange address.\r\n\r\nPlease advise if I can send USDT from wallet address with private key to another account in different exchange.\r\nThanks,\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16022/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-08T20:44:05Z",
        "body": "Hello @zydjohnHotmail, the short answer is no,\r\nCCXT wraps the exchange's API so basically, we're only a middleware that wraps the REST calls you make to the Exchange. So as you said, yes you can use ccxt to ask the exchange X to withdraw the token to Y wallet, but not the other way around but ccxt itself does not interact with the blockchain."
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-12-08T20:46:15Z",
        "body": "Thanks for your feed back!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-12-08T20:48:06Z",
        "body": "@zydjohnHotmail You're welcome! 🙂 "
      }
    ]
  },
  {
    "number": 16006,
    "title": "Kraken's response has little information",
    "created_at": "2022-12-07T18:04:53Z",
    "closed_at": "2022-12-07T21:01:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16006",
    "body": "- OS:\r\n- Programming Language version:\r\n- CCXT version:\r\n\r\n```\r\n order = kraken.createOrder(symbol_name, type,side,quantity, price)\r\n```\r\nThis is the response I get:\r\n```\r\n{'id': 'XXXXXXXXXXX', 'clientOrderId': None, 'info': {'txid': ['XXXXXXXXX'], 'descr': {'order': 'sell 0.00178900 XBTUSD @ limit 16776.3'}}, 'timestamp': None, 'datetime': None, 'lastTradeTimestamp': None, 'status': None, 'symbol': 'BTC/USD', 'type': 'limit', 'timeInForce': None, 'postOnly': None, 'side': 'sell', 'price': 16776.3, 'stopPrice': None, 'cost': None, 'amount': 0.001789, 'filled': None, 'average': None, 'remaining': None, 'fee': None, 'trades': [], 'fees': []} \r\n```\r\nI looked up Kraken's REST API and they seem to have information about the trade when it's open and when it's closed but the response inside CCXT is just all NONE which does not help at all.\r\n\r\nThe following is the open orders response from Kraken:\r\n{\r\n  \"result\": {\r\n    \"open\": {\r\n      \"txid1\": {\r\n        \"refid\": \"string\",\r\n        \"userref\": \"string\",\r\n        \"status\": \"pending\",\r\n        \"opentm\": 0,\r\n        \"starttm\": 0,\r\n        \"expiretm\": 0,\r\n        \"descr\": {\r\n          \"pair\": \"string\",\r\n          \"type\": \"buy\",\r\n          \"ordertype\": \"market\",\r\n          \"price\": \"string\",\r\n          \"price2\": \"string\",\r\n          \"leverage\": \"string\",\r\n          \"order\": \"string\",\r\n          \"close\": \"string\"\r\n        },\r\n        \"vol\": \"string\",\r\n        \"vol_exec\": \"string\",\r\n        \"cost\": \"string\",\r\n        \"fee\": \"string\",\r\n        \"price\": \"string\",\r\n        \"stopprice\": \"string\",\r\n        \"limitprice\": \"string\",\r\n        \"trigger\": \"last\",\r\n        \"misc\": \"string\",\r\n        \"oflags\": \"string\",\r\n        \"trades\": [\r\n          \"string\"\r\n        ]\r\n      },\r\n      \"txid2\": {\r\n        \"refid\": \"string\",\r\n        \"userref\": \"string\",\r\n        \"status\": \"pending\",\r\n        \"opentm\": 0,\r\n        \"starttm\": 0,\r\n        \"expiretm\": 0,\r\n        \"descr\": {\r\n          \"pair\": \"string\",\r\n          \"type\": \"buy\",\r\n          \"ordertype\": \"market\",\r\n          \"price\": \"string\",\r\n          \"price2\": \"string\",\r\n          \"leverage\": \"string\",\r\n          \"order\": \"string\",\r\n          \"close\": \"string\"\r\n        },\r\n        \"vol\": \"string\",\r\n        \"vol_exec\": \"string\",\r\n        \"cost\": \"string\",\r\n        \"fee\": \"string\",\r\n        \"price\": \"string\",\r\n        \"stopprice\": \"string\",\r\n        \"limitprice\": \"string\",\r\n        \"trigger\": \"last\",\r\n        \"misc\": \"string\",\r\n        \"oflags\": \"string\",\r\n        \"trades\": [\r\n          \"string\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"error\": [\r\n    \"EGeneral:Invalid arguments\"\r\n  ]\r\n}\r\n\r\nIt seems like you guys have a lot on your plate so I do appreciate any help possible. Thank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16006/comments",
    "author": "MotivaoCrypto",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-07T18:49:30Z",
        "body": "Hello @bonetjoshua, upon creating the order Kraken returns little information but you can use `fetchOrder` after creating it to get the full data. "
      },
      {
        "user": "MotivaoCrypto",
        "created_at": "2022-12-07T21:01:24Z",
        "body": "I appreciate the work around, I wish CCXT could fix this in the future. I'll close this issue"
      }
    ]
  },
  {
    "number": 15959,
    "title": "BYBIT - Cannot get Open Orders on Spot and Derivatives",
    "created_at": "2022-12-04T23:29:51Z",
    "closed_at": "2022-12-05T01:10:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15959",
    "body": "Is it now possible to fetch those open orders on spot and derivatives market with CCXT ? thanks a lot",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15959/comments",
    "author": "bluetyphoon77",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-12-05T01:10:06Z",
        "body": "Yes, you can use the function `bybit.fetchOpenOrders()` and you can also use the websockets version with `watchOrders()`. The websockets we are working on soon releasing support for bybit v3 api.\r\n\r\nI'll close this issue for now, but feel free to post any more questions you might have."
      },
      {
        "user": "bluetyphoon77",
        "created_at": "2022-12-06T00:42:33Z",
        "body": "Hi thanks a lot for your answer. I will let this closed. But my dev checked your answer and said it is not true, what you said is not working. So he will create an issue himself with screenshots. IT will be easier between devs ;) Cheers"
      },
      {
        "user": "frosty00",
        "created_at": "2022-12-06T00:55:35Z",
        "body": "@bluetyphoon77 you need to set\r\n\r\n```\r\nbybit.options['defaultType'] = 'spot'; // for spot\r\nbybit.options['defaultType'] = 'swap'; // for swap\r\n```"
      },
      {
        "user": "bluetyphoon77",
        "created_at": "2022-12-06T01:24:24Z",
        "body": "Thanks a lot @frosty00 ;) \r\nI asked my dev to continue here himself. Thanks a lot for your help\r\nHope this will work !\r\nPS: If you have any knowledge about kucoin don't hesitate to give me any advice you'd have, it will be super helpful, I have another issue about this, thanks a lot :)"
      }
    ]
  },
  {
    "number": 15948,
    "title": "Bybit fetch_deposit_address doesn't work",
    "created_at": "2022-12-04T09:01:12Z",
    "closed_at": "2022-12-04T10:47:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15948",
    "body": "Hey guys.\r\nCommands \r\n```\r\nbybit.fetch_deposit_address(\"USDT\")\r\nbybit.fetch_deposit_address(\"USDT\", {\"network\":\"ERC20\"})\r\n```\r\nboth lead to `TypeError: argument of type 'NoneType' is not iterable`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15948/comments",
    "author": "KindSpidey",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-12-04T10:35:16Z",
        "body": "They both work for me using\r\n\r\n```python\r\nimport json\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\nkeys = json.load(open('../keys.local.json'))\r\nexchange = ccxt.bybit(keys['bybit'])\r\nmarkets = exchange.load_markets()\r\n\r\ndeposit_address = exchange.fetch_deposit_address('USDT')\r\ndeposit_address_erc20 = exchange.fetch_deposit_address('USDT', {'network': 'ERC20'})\r\n\r\npprint(deposit_address)\r\npprint(deposit_address_erc20)\r\n```\r\n\r\n```python\r\n{'address': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n 'currency': 'USDT',\r\n 'info': {'address_deposit': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n          'chain': 'ETH',\r\n          'chain_type': 'ERC20',\r\n          'tag_deposit': ''},\r\n 'network': 'ETH',\r\n 'tag': None}\r\n{'address': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n 'currency': 'USDT',\r\n 'info': {'address_deposit': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n          'chain': 'ETH',\r\n          'chain_type': 'ERC20',\r\n          'tag_deposit': ''},\r\n 'network': 'ETH',\r\n 'tag': None}\r\n ```\r\n \r\n please provide your full code and debug message so that we can investigate your problem better\r\n"
      },
      {
        "user": "KindSpidey",
        "created_at": "2022-12-04T10:40:22Z",
        "body": "Done. Bybit fetch_deposit_address doesnt work, if I dont load_markets before. If load_markets first, than fetch - everything works"
      },
      {
        "user": "samgermain",
        "created_at": "2022-12-04T10:47:34Z",
        "body": "> Done. Bybit fetch_deposit_address doesnt work, if I dont load_markets before. If load_markets first, than fetch - everything works\r\n\r\nSo the solution is to run `load_markets` before running `fetch_deposit_address`"
      },
      {
        "user": "KindSpidey",
        "created_at": "2022-12-04T10:56:20Z",
        "body": "> > Done. Bybit fetch_deposit_address doesnt work, if I dont load_markets before. If load_markets first, than fetch - everything works\r\n> \r\n> So the solution is to run `load_markets` before running `fetch_deposit_address`\r\n\r\nyep"
      }
    ]
  },
  {
    "number": 15909,
    "title": "timestamp in MEXC responce",
    "created_at": "2022-12-01T19:26:31Z",
    "closed_at": "2022-12-02T10:31:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15909",
    "body": "Hello Team,\r\n\r\nThe MEXC responce dont have a timestamp value.\r\nIs there any plans to make it apper there or any other ccxtpro fetch/watch request I could do to get it?\r\nThe idea is to compare timestamp from websocket responce with  system one.\r\n\r\nBinance and bybit responces provide the timestamp values, mexc is None.\r\n\r\n- OS: ubuntu\r\n- Programming Language version: Python 3.9\r\n- CCXT version:  2.2.42\r\n\r\n```\r\nawait exchange.watch_order_book(symbol, limit)\r\n```\r\n\r\n```\r\n{'bids': [[0.1035693, 10632.63], [0.1035605, 90439.5], [0.1035522, 24852.0], [0.1035424, 255497.68], [0.1035421, 246879.23], [0.1035388, 69334.5], [0.1035289, 104080.5], [0.1035197, 80239.5], [0.1035129, 26296.5], [0.103508, 73294.5], [0.1034984, 6011.0], [0.1034983, 176172.0], [0.103485, 3040.5], [0.1034712, 26919.0], [0.1034633, 122556.0], [0.1034543, 73155.0], [0.1034454, 164391.0], [0.1034323, 79387.5], [0.1034249, 188040.0], [0.1034246, 24243.75]], 'asks': [[0.1035753, 180.0], [0.1036416, 2209.0], [0.1036513, 377944.42], [0.1036671, 3313.5], [0.1036789, 6011.0], [0.103679, 24942.0], [0.1036877, 298851.7], [0.1036878, 243658.97], [0.103688, 293904.68], [0.1036891, 28104.0], [0.1037003, 60541.5], [0.1037073, 221466.0], [0.1037142, 266970.0], [0.1037224, 372576.0], [0.1037359, 906093.0], [0.1037454, 388991.25], [0.1037556, 86755.5], [0.1037679, 516673.5], [0.1037813, 419715.0], [0.103783, 158248.5]], 'timestamp': None, 'datetime': None, 'nonce': 1196645507.0, 'symbol': 'DOGE/USDT'}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15909/comments",
    "author": "bestnaf",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-02T10:31:47Z",
        "body": "Hello @bestnaf mexc does not provide a timestamp for spot markets, there is the reason it's undefined. If they eventually add it ccxt will unify it and you will see it there but until then there's nothing we can do. "
      }
    ]
  },
  {
    "number": 15888,
    "title": "How to access the queue object which is used to store ticker or ohlc data in ccxt pro?",
    "created_at": "2022-11-30T10:01:13Z",
    "closed_at": "2022-11-30T21:13:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15888",
    "body": "The ccxt pro documentation mentions about the data structure (like sliding window or queue) in which the watched (fetched) data is stored. How can we access that object? Coz I tried logging the whole object and searching but was not able to find it.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15888/comments",
    "author": "Sailendrakc",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-30T17:18:29Z",
        "body": "Hello @Sailendrakc \r\n\r\nYou should be able to access them by doing:\r\n\r\n```Javascript\r\nexchange.trades\r\nexchange.tickers\r\n```"
      }
    ]
  },
  {
    "number": 15822,
    "title": "Suddenly issues with moving averages on several exchanges",
    "created_at": "2022-11-24T13:50:35Z",
    "closed_at": "2022-11-25T14:15:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15822",
    "body": "Hello, \r\n\r\nsuddenly I get NAN output on phemex and kucoin if I want to print slow moving averages like ma200 on kucoin as example. the fast ones(ma4 or ma10) are still working normal.\r\nI changed nothing but suddenly it's showing nan on the ma200(kucoin).\r\n\r\nOn Kucoinfutures:    symbol = 'ETH/USD:ETH'  ma200   output = nan,  \r\nBUT  \r\nsymbol = 'ETH/USDT:USDT'  is working with ma200 as always.  \r\n\r\nOn phemex nearly the same but with even slower moving average. I didn't testet ma200 here. Here it's a little different, the issue is\r\nnot permanent, sometimes its showing NAN sometimes not but also like on kucoin the issue is only at the inverse contract. \r\n\r\nthe inverse contract\r\nsymbol = 'USD/USD:ETH'  is showing nan but this time with ma1999\r\nbut\r\nsymbol = 'ETH/USD:USD' is working with ma1999\r\n\r\n\r\n- OS: Windows 10\r\n- Programming Language version: Python Spyder 3.9\r\n- CCXT version: 2.1.13\r\n\r\n```\r\n\r\n#here the code from kucoin, on phemex it's exactly the same only the length is not 200 but 1999. \r\n\r\n\r\nkucoin = ccxt.kucoinfutures({'enableRateLimit': True,\r\n                       'apiKey': kucoinconfig.api_key,\r\n                       'secret': kucoinconfig.api_secret,\r\n                       'password' : '************',})\r\n\r\n\r\nsymbol = 'ETH/USD:ETH'\r\npos_size = 300\r\n\r\ntimeframe = '15m'\r\nnum_bars = 200\r\n\r\n\r\nbars = kucoin.fetch_ohlcv(symbol, timeframe=timeframe, limit=num_bars)\r\n#print(bars)\r\n\r\ndf_d = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])\r\n\r\ndf_d['timestamp'] = pd.to_datetime(df_d['timestamp'], unit='ms')\r\n\r\ndf_d['MA4'] = df_d.close.rolling(4).mean()\r\ndf_d['MA10'] = df_d.close.rolling(10).mean()\r\ndf_d['MA200'] = df_d.close.rolling(200).mean()\r\n\r\n\r\n   \r\nma4 = df_d['MA4']\r\nma10 = df_d['MA10']\r\nma200 = df_d['MA200']\r\n\r\nprint('MA 4: ', round(ma4.iloc[-1],2))\r\nprint('MA 10: ', round(ma10.iloc[-1],2))\r\nprint('MA 200: ', round(ma200.iloc[-1],2)\r\n\r\n```\r\nNo Error showing, only NAN printing output.\r\n\r\n\r\nMA 4:  1194.3\r\nMA 10:  1194.02\r\nMA 200:  nan\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15822/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-24T14:17:21Z",
        "body": "Hello @Nitrix321,\r\nAre you seeing invalid values being returned by `fetch_ohlcv`?  "
      },
      {
        "user": "Nitrix321",
        "created_at": "2022-11-24T14:28:49Z",
        "body": "No,\r\n\r\nbut now I just see that the bars end at 195, as you can see here.\r\n\r\n2022-11-24 15:26:31\r\n              timestamp     open     high      low    close     volume\r\n0   2022-11-22 12:30:00  1088.35  1090.05  1086.30  1088.40   422793.0\r\n1   2022-11-22 12:45:00  1088.45  1099.90  1088.45  1095.90    88143.0\r\n2   2022-11-22 13:00:00  1095.90  1114.20  1095.45  1113.60    97555.0\r\n3   2022-11-22 13:15:00  1113.65  1118.05  1109.20  1115.55   127860.0\r\n4   2022-11-22 13:30:00  1116.55  1119.55  1110.65  1113.05   152399.0\r\n5   2022-11-22 13:45:00  1112.00  1132.55  1111.15  1131.30   163229.0\r\n6   2022-11-22 14:00:00  1132.05  1135.45  1126.80  1129.40   969225.0\r\n7   2022-11-22 14:15:00  1126.70  1127.55  1122.10  1124.75   125901.0\r\n8   2022-11-22 14:30:00  1124.40  1125.15  1116.00  1119.75   117346.0\r\n9   2022-11-22 14:45:00  1121.45  1122.65  1118.90  1119.15    37633.0\r\n10  2022-11-22 15:00:00  1120.60  1126.95  1120.60  1124.70    50614.0\r\n11  2022-11-22 15:15:00  1125.95  1130.80  1125.50  1127.00    52392.0\r\n12  2022-11-22 15:30:00  1126.10  1129.05  1122.20  1128.65    74741.0\r\n13  2022-11-22 15:45:00  1130.00  1141.05  1129.55  1132.50   324360.0\r\n14  2022-11-22 16:00:00  1132.90  1138.00  1126.75  1127.05    91227.0\r\n15  2022-11-22 16:15:00  1126.80  1129.70  1126.15  1128.95    19720.0\r\n16  2022-11-22 16:30:00  1128.50  1128.90  1126.15  1128.90     8779.0\r\n17  2022-11-22 16:45:00  1126.80  1127.80  1125.20  1125.20     8271.0\r\n18  2022-11-22 17:00:00  1125.75  1126.40  1124.05  1126.05    10986.0\r\n19  2022-11-22 17:15:00  1125.90  1125.90  1120.95  1123.30    38066.0\r\n20  2022-11-22 17:30:00  1122.70  1123.50  1117.50  1118.65    51841.0\r\n21  2022-11-22 17:45:00  1117.90  1119.60  1112.55  1114.90    43168.0\r\n22  2022-11-22 18:00:00  1116.15  1126.60  1115.20  1124.05    73551.0\r\n23  2022-11-22 18:15:00  1122.75  1124.40  1120.85  1120.85     8332.0\r\n24  2022-11-22 18:30:00  1119.55  1119.60  1117.05  1117.50    32134.0\r\n25  2022-11-22 18:45:00  1117.50  1125.20  1117.30  1124.45   141730.0\r\n26  2022-11-22 19:00:00  1126.70  1126.90  1122.45  1123.05    61281.0\r\n27  2022-11-22 19:15:00  1123.70  1134.35  1123.70  1128.05   141197.0\r\n28  2022-11-22 19:30:00  1127.40  1131.50  1125.80  1129.25   143387.0\r\n29  2022-11-22 19:45:00  1127.75  1128.70  1124.50  1125.80    50500.0\r\n30  2022-11-22 20:00:00  1126.55  1126.55  1125.05  1125.40    43841.0\r\n31  2022-11-22 20:15:00  1125.25  1130.00  1125.25  1129.70     7203.0\r\n32  2022-11-22 20:30:00  1130.15  1130.15  1127.70  1127.95    35888.0\r\n33  2022-11-22 20:45:00  1127.45  1127.75  1125.15  1125.55    48186.0\r\n34  2022-11-22 21:00:00  1125.30  1125.30  1120.45  1121.15    32562.0\r\n35  2022-11-22 21:15:00  1122.25  1123.50  1122.05  1123.50    35938.0\r\n36  2022-11-22 21:30:00  1124.15  1125.35  1123.70  1125.35    16717.0\r\n37  2022-11-22 21:45:00  1126.50  1129.80  1126.10  1129.80    94578.0\r\n38  2022-11-22 22:00:00  1128.70  1130.70  1127.95  1128.95    77261.0\r\n39  2022-11-22 22:15:00  1128.80  1128.80  1124.50  1124.50    21962.0\r\n40  2022-11-22 22:30:00  1125.60  1127.25  1125.50  1127.25    28448.0\r\n41  2022-11-22 22:45:00  1128.75  1139.40  1128.75  1135.50    41821.0\r\n42  2022-11-22 23:00:00  1135.35  1136.55  1132.10  1132.10    24959.0\r\n43  2022-11-22 23:15:00  1131.75  1135.35  1131.50  1134.80    33854.0\r\n44  2022-11-22 23:30:00  1135.60  1138.25  1132.75  1138.25    14133.0\r\n45  2022-11-22 23:45:00  1139.15  1139.80  1131.50  1137.80    44995.0\r\n46  2022-11-23 00:00:00  1137.40  1138.45  1131.45  1136.40    26375.0\r\n47  2022-11-23 00:15:00  1133.20  1145.85  1133.00  1139.65   119458.0\r\n48  2022-11-23 00:30:00  1137.95  1137.95  1132.60  1132.80    38345.0\r\n49  2022-11-23 00:45:00  1133.60  1134.50  1132.00  1132.50    61528.0\r\n50  2022-11-23 01:00:00  1132.30  1133.10  1127.95  1129.90    22144.0\r\n51  2022-11-23 01:15:00  1128.90  1128.95  1127.35  1127.65    24813.0\r\n52  2022-11-23 01:30:00  1129.25  1130.15  1128.90  1129.15     5668.0\r\n53  2022-11-23 01:45:00  1127.80  1130.20  1127.80  1130.20     3583.0\r\n54  2022-11-23 02:00:00  1131.40  1132.50  1130.30  1131.95    23489.0\r\n55  2022-11-23 02:15:00  1131.40  1161.60  1131.40  1156.80    91283.0\r\n56  2022-11-23 02:30:00  1156.80  1164.55  1152.90  1157.95   386212.0\r\n57  2022-11-23 02:45:00  1157.95  1159.90  1154.75  1158.05   772635.0\r\n58  2022-11-23 03:00:00  1159.90  1159.90  1155.95  1157.45   152551.0\r\n59  2022-11-23 03:15:00  1157.25  1161.80  1155.45  1159.75   138496.0\r\n60  2022-11-23 03:30:00  1160.25  1161.35  1158.55  1159.45    40659.0\r\n61  2022-11-23 03:45:00  1159.55  1168.05  1159.50  1168.05   122978.0\r\n62  2022-11-23 04:00:00  1168.25  1168.95  1161.65  1161.75   428960.0\r\n63  2022-11-23 04:15:00  1160.60  1162.00  1160.60  1161.60    39789.0\r\n64  2022-11-23 04:30:00  1161.15  1161.15  1157.75  1159.15    29933.0\r\n65  2022-11-23 04:45:00  1159.55  1161.65  1159.55  1161.65     8529.0\r\n66  2022-11-23 05:00:00  1158.70  1158.70  1157.85  1157.90    27018.0\r\n67  2022-11-23 05:15:00  1158.20  1159.15  1158.15  1158.90    11065.0\r\n68  2022-11-23 05:30:00  1159.05  1162.70  1159.05  1162.55    15737.0\r\n69  2022-11-23 05:45:00  1160.60  1160.75  1154.50  1154.50    19948.0\r\n70  2022-11-23 06:00:00  1157.35  1157.45  1155.90  1155.90     9937.0\r\n71  2022-11-23 06:15:00  1156.70  1157.90  1154.85  1157.90    32057.0\r\n72  2022-11-23 06:30:00  1158.45  1158.70  1157.40  1157.40    60015.0\r\n73  2022-11-23 06:45:00  1158.40  1161.15  1158.40  1160.00    27002.0\r\n74  2022-11-23 07:00:00  1160.20  1161.15  1158.50  1158.50     3180.0\r\n75  2022-11-23 07:15:00  1157.40  1161.30  1156.70  1159.20     8605.0\r\n76  2022-11-23 08:30:00  1159.20  1161.00  1159.20  1160.40     8696.0\r\n77  2022-11-23 08:45:00  1160.90  1162.65  1160.90  1162.60     5508.0\r\n78  2022-11-23 09:00:00  1161.90  1164.00  1160.95  1162.90    25764.0\r\n79  2022-11-23 09:15:00  1162.80  1163.90  1162.80  1163.90      582.0\r\n80  2022-11-23 09:30:00  1163.40  1163.85  1159.70  1163.45    14357.0\r\n81  2022-11-23 09:45:00  1163.35  1164.00  1162.00  1162.15    71750.0\r\n82  2022-11-23 10:00:00  1162.85  1164.00  1160.30  1161.55    87456.0\r\n83  2022-11-23 10:15:00  1161.65  1162.15  1157.90  1158.70    19561.0\r\n84  2022-11-23 10:30:00  1158.60  1162.50  1158.60  1161.55     8166.0\r\n85  2022-11-23 10:45:00  1162.60  1175.00  1161.45  1171.25   402928.0\r\n86  2022-11-23 11:00:00  1170.25  1172.15  1166.45  1168.30    14715.0\r\n87  2022-11-23 11:15:00  1167.45  1172.55  1167.20  1170.80    20590.0\r\n88  2022-11-23 11:30:00  1171.00  1174.05  1169.35  1172.10    19645.0\r\n89  2022-11-23 11:45:00  1171.05  1172.70  1170.00  1170.80    11501.0\r\n90  2022-11-23 12:00:00  1171.10  1174.70  1169.15  1172.90   124774.0\r\n91  2022-11-23 12:15:00  1173.10  1173.10  1167.75  1169.20    42772.0\r\n92  2022-11-23 12:30:00  1169.05  1170.10  1163.45  1164.35    25089.0\r\n93  2022-11-23 12:45:00  1164.15  1165.50  1150.50  1156.15  1678535.0\r\n94  2022-11-23 13:00:00  1155.90  1157.40  1149.95  1157.40  2258187.0\r\n95  2022-11-23 13:15:00  1157.45  1157.50  1156.40  1157.45   150834.0\r\n96  2022-11-23 13:30:00  1157.45  1164.75  1157.45  1161.15   685851.0\r\n97  2022-11-23 13:45:00  1161.60  1161.60  1155.80  1157.15   205188.0\r\n98  2022-11-23 14:00:00  1157.45  1159.85  1156.85  1159.15    58799.0\r\n99  2022-11-23 14:15:00  1159.35  1170.30  1147.70  1155.45  6678189.0\r\n100 2022-11-23 14:30:00  1154.95  1170.05  1154.95  1163.35  2682096.0\r\n101 2022-11-23 14:45:00  1162.85  1175.10  1162.85  1170.10  1891816.0\r\n102 2022-11-23 15:00:00  1170.30  1175.55  1169.30  1170.05   471580.0\r\n103 2022-11-23 15:15:00  1169.75  1170.15  1164.20  1164.55   159435.0\r\n104 2022-11-23 15:30:00  1164.30  1165.45  1164.15  1164.35    48632.0\r\n105 2022-11-23 15:45:00  1164.35  1165.40  1164.10  1165.40   239625.0\r\n106 2022-11-23 16:00:00  1164.70  1165.45  1164.70  1164.85    65469.0\r\n107 2022-11-23 16:15:00  1164.85  1165.00  1164.65  1164.65   261277.0\r\n108 2022-11-23 16:30:00  1164.65  1165.35  1164.65  1164.80   144266.0\r\n109 2022-11-23 16:45:00  1164.80  1164.80  1152.90  1154.00   223898.0\r\n110 2022-11-23 17:00:00  1154.90  1156.70  1152.80  1154.90   120695.0\r\n111 2022-11-23 17:15:00  1155.75  1155.75  1153.50  1153.50   430551.0\r\n112 2022-11-23 17:30:00  1153.00  1155.20  1152.10  1154.90    90316.0\r\n113 2022-11-23 17:45:00  1154.20  1155.35  1153.45  1154.20    11889.0\r\n114 2022-11-23 18:00:00  1154.15  1159.60  1153.70  1155.30    77431.0\r\n115 2022-11-23 18:15:00  1158.35  1164.30  1157.30  1162.75    56264.0\r\n116 2022-11-23 18:30:00  1162.10  1163.10  1160.75  1161.65    43328.0\r\n117 2022-11-23 18:45:00  1161.65  1173.65  1160.55  1172.45    81585.0\r\n118 2022-11-23 19:00:00  1170.85  1189.60  1163.40  1177.65   344038.0\r\n119 2022-11-23 19:15:00  1175.25  1176.35  1162.80  1165.00    85182.0\r\n120 2022-11-23 19:30:00  1164.35  1170.25  1164.35  1169.95    68358.0\r\n121 2022-11-23 19:45:00  1169.30  1170.25  1167.50  1169.25    37163.0\r\n122 2022-11-23 20:00:00  1168.25  1168.25  1161.80  1163.20    37420.0\r\n123 2022-11-23 20:15:00  1164.30  1166.30  1163.90  1166.30    19597.0\r\n124 2022-11-23 20:30:00  1168.05  1169.55  1167.90  1168.70   144524.0\r\n125 2022-11-23 20:45:00  1167.50  1169.00  1167.50  1169.00   111630.0\r\n126 2022-11-23 21:00:00  1168.95  1169.00  1168.25  1168.95   354930.0\r\n127 2022-11-23 21:15:00  1169.00  1169.15  1168.30  1168.30   206448.0\r\n128 2022-11-23 21:30:00  1168.35  1169.15  1167.75  1168.55    93303.0\r\n129 2022-11-23 21:45:00  1169.15  1169.15  1167.50  1167.50    83573.0\r\n130 2022-11-23 22:00:00  1167.50  1169.65  1167.45  1169.65    92292.0\r\n131 2022-11-23 22:15:00  1170.95  1171.00  1167.45  1168.20    57951.0\r\n132 2022-11-23 22:30:00  1167.50  1169.00  1167.50  1168.95    19491.0\r\n133 2022-11-23 22:45:00  1168.95  1170.20  1168.95  1170.20   137500.0\r\n134 2022-11-23 23:00:00  1170.20  1177.00  1169.55  1175.50   178691.0\r\n135 2022-11-23 23:15:00  1176.10  1182.80  1176.10  1182.80   119592.0\r\n136 2022-11-23 23:30:00  1181.90  1186.70  1180.10  1186.30    71635.0\r\n137 2022-11-23 23:45:00  1186.40  1190.40  1181.05  1184.15   343302.0\r\n138 2022-11-24 00:00:00  1181.15  1186.80  1181.05  1186.20    69942.0\r\n139 2022-11-24 00:15:00  1186.90  1186.90  1180.60  1181.30   101680.0\r\n140 2022-11-24 00:30:00  1181.20  1181.60  1179.05  1181.60    55022.0\r\n141 2022-11-24 00:45:00  1182.20  1182.20  1178.55  1179.65    63255.0\r\n142 2022-11-24 01:00:00  1180.65  1184.70  1179.05  1179.05   107566.0\r\n143 2022-11-24 01:15:00  1179.35  1181.95  1179.15  1180.25    47473.0\r\n144 2022-11-24 01:30:00  1180.30  1195.70  1179.20  1192.10   142552.0\r\n145 2022-11-24 01:45:00  1192.60  1204.50  1191.20  1200.65   278122.0\r\n146 2022-11-24 02:00:00  1200.55  1208.60  1200.55  1203.35   236040.0\r\n147 2022-11-24 02:15:00  1206.35  1206.35  1197.55  1197.60   276798.0\r\n148 2022-11-24 02:30:00  1197.30  1199.00  1197.10  1198.35   309784.0\r\n149 2022-11-24 02:45:00  1198.20  1200.75  1197.30  1197.60    44519.0\r\n150 2022-11-24 03:00:00  1196.85  1197.25  1194.85  1196.45    74260.0\r\n151 2022-11-24 03:15:00  1198.00  1202.75  1198.00  1202.75    29463.0\r\n152 2022-11-24 03:30:00  1201.00  1204.50  1200.05  1202.55    21241.0\r\n153 2022-11-24 03:45:00  1200.90  1200.90  1200.90  1200.90     1402.0\r\n154 2022-11-24 04:00:00  1200.15  1202.80  1200.15  1202.15     8804.0\r\n155 2022-11-24 04:15:00  1201.95  1202.10  1198.45  1198.45     5789.0\r\n156 2022-11-24 04:30:00  1199.85  1201.00  1199.65  1200.65     3694.0\r\n157 2022-11-24 04:45:00  1200.25  1202.55  1200.20  1202.05    68421.0\r\n158 2022-11-24 05:00:00  1201.30  1201.45  1196.75  1198.25   106184.0\r\n159 2022-11-24 05:15:00  1198.70  1202.45  1197.50  1202.45    86124.0\r\n160 2022-11-24 05:30:00  1202.50  1202.80  1200.85  1202.50    23282.0\r\n161 2022-11-24 05:45:00  1202.40  1203.35  1199.75  1199.80    23317.0\r\n162 2022-11-24 06:00:00  1199.45  1201.50  1198.75  1201.50     7229.0\r\n163 2022-11-24 06:15:00  1201.65  1201.65  1197.40  1197.40    19504.0\r\n164 2022-11-24 06:30:00  1198.05  1201.95  1198.05  1201.95     9214.0\r\n165 2022-11-24 06:45:00  1202.65  1216.65  1202.65  1213.30    78232.0\r\n166 2022-11-24 07:00:00  1212.45  1214.90  1208.35  1208.35   152783.0\r\n167 2022-11-24 07:15:00  1207.95  1211.35  1207.95  1211.00     1028.0\r\n168 2022-11-24 07:30:00  1210.95  1210.95  1210.55  1210.65     2922.0\r\n169 2022-11-24 07:45:00  1207.55  1207.55  1205.35  1205.35      200.0\r\n170 2022-11-24 08:00:00  1205.50  1206.40  1198.75  1201.90    96298.0\r\n171 2022-11-24 08:15:00  1201.00  1201.00  1190.75  1196.80   106004.0\r\n172 2022-11-24 08:30:00  1195.50  1198.75  1194.00  1197.15    28495.0\r\n173 2022-11-24 08:45:00  1197.60  1199.70  1197.60  1198.90    11620.0\r\n174 2022-11-24 09:00:00  1199.00  1199.10  1198.50  1198.80     6780.0\r\n175 2022-11-24 09:15:00  1197.45  1201.35  1196.20  1201.35    24671.0\r\n176 2022-11-24 09:30:00  1201.35  1201.35  1199.50  1200.55    11200.0\r\n177 2022-11-24 09:45:00  1200.45  1200.60  1200.35  1200.60     1581.0\r\n178 2022-11-24 10:00:00  1200.40  1204.90  1200.40  1200.95    10069.0\r\n179 2022-11-24 10:15:00  1202.20  1202.30  1200.00  1200.00     5674.0\r\n180 2022-11-24 10:30:00  1199.65  1199.65  1191.10  1194.05    21717.0\r\n181 2022-11-24 10:45:00  1194.05  1195.00  1190.30  1195.00    27266.0\r\n182 2022-11-24 11:00:00  1194.35  1194.80  1193.80  1193.80    19285.0\r\n183 2022-11-24 11:15:00  1193.05  1193.70  1192.40  1192.40    23919.0\r\n184 2022-11-24 11:30:00  1193.25  1195.10  1193.25  1193.95     5556.0\r\n185 2022-11-24 11:45:00  1193.85  1193.85  1193.25  1193.50     7158.0\r\n186 2022-11-24 12:00:00  1194.70  1195.35  1193.90  1193.90    25788.0\r\n187 2022-11-24 12:15:00  1193.90  1196.50  1193.90  1194.65    17716.0\r\n188 2022-11-24 12:30:00  1195.90  1202.10  1194.60  1194.60    21792.0\r\n189 2022-11-24 12:45:00  1197.00  1197.00  1191.45  1193.35    15301.0\r\n190 2022-11-24 13:00:00  1193.20  1194.65  1192.30  1192.30    11029.0\r\n191 2022-11-24 13:15:00  1192.30  1194.60  1192.30  1194.55    17130.0\r\n192 2022-11-24 13:30:00  1194.05  1198.00  1194.05  1197.40    43101.0\r\n193 2022-11-24 13:45:00  1196.75  1199.95  1196.70  1197.70    23356.0\r\n194 2022-11-24 14:00:00  1198.25  1198.25  1196.10  1196.35    45302.0\r\n195 2022-11-24 14:15:00  1194.90  1194.90  1184.15  1190.60    44954.0\r\n\r\n\r\nbut limit=num_bars is 200"
      },
      {
        "user": "Nitrix321",
        "created_at": "2022-11-24T14:29:20Z",
        "body": "on phemex it has worked now correctly for half an hour and then again NAN..."
      },
      {
        "user": "Nitrix321",
        "created_at": "2022-11-24T14:35:09Z",
        "body": "If i put in num_bars = 195 as limit.\r\n\r\nbars are ending at 190. It seems they are always steeling the last 5 bars... :-)"
      },
      {
        "user": "Nitrix321",
        "created_at": "2022-11-24T14:42:05Z",
        "body": "OK I have try it now with num_bars = 300, now it is working on Kucoin.\r\n\r\nA few weeks ago 200 was maxmum on Kucoin, I am pretty sure. \r\n\r\nOn phemex 2000 is maximum for moving average. \r\nBut I now have lowered only \r\nthe MA \r\nfrom df_d['MA1999'] = df_d.close.rolling(1999).mean()  \r\nto\r\ndf_d['MA1995'] = df_d.close.rolling(1995).mean()\r\n\r\nit seems also working now, but I have to wait an hour or so to be sure.\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "Nitrix321",
        "created_at": "2022-11-25T13:30:19Z",
        "body": "Hello @carlosmiei,\r\n\r\nI think u can close this. It is working now for me, since have done settings like explained above. It's not perfect but for me ok now.\r\nOn Kucoin I put limit bars up to 300 although 200MA is still max. But now it works.\r\nOn Phemex I lowered moving average for 5 bars down to 1995, also this is working now. \r\nThanks "
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-11-25T14:15:15Z",
        "body": "@Nitrix321 hello, I'll close it then. Thanks for letting me now!"
      }
    ]
  },
  {
    "number": 15787,
    "title": "pip3 install ccxt Error",
    "created_at": "2022-11-22T14:04:06Z",
    "closed_at": "2023-11-02T20:24:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15787",
    "body": "i'm install the ccxt package use pip like:\r\n```\r\n[root@iZj6c52iwklk71rzg3ripuZ ~]# pip3 install ccxt\r\nWARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.\r\nCollecting ccxt\r\n  Could not find a version that satisfies the requirement ccxt (from versions: )\r\nNo matching distribution found for ccxt\r\n[root@iZj6c52iwklk71rzg3ripuZ ~]# python3 --version\r\nPython 3.6.8\r\n[root@iZj6c52iwklk71rzg3ripuZ ~]# pip3 -V\r\npip 9.0.3 from /usr/lib/python3.6/site-packages (python 3.6)\r\n```\r\n\r\n' Could not find a version that satisfies the requirement ccxt (from versions: )???'\r\n\r\nwhy?\r\n\r\ni need some help，thank you！\r\n\r\n\r\n- OS: centos8.2\r\n- Programming Language version: python3.6.8\r\n- CCXT version: default",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15787/comments",
    "author": "zxlii",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-22T15:16:52Z",
        "body": "Hello @zxlii not sure what is preventing the installation, but as the warning suggests installing it with `root` is not a good idea. \r\nCan you try without it?\r\n`pip3 install --user ccxt` \r\n"
      },
      {
        "user": "frosty00",
        "created_at": "2023-11-02T20:24:33Z",
        "body": "seems related to user's environment, unable to reproduce"
      }
    ]
  },
  {
    "number": 15704,
    "title": "How to set network parameters via Node.JS command line parameter?",
    "created_at": "2022-11-15T22:36:06Z",
    "closed_at": "2022-11-16T04:25:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15704",
    "body": "- OS: Windows 10 (22H2)\r\n- Programming Language version: Node.js (v19.0.1)\r\n- CCXT version: 2.1.84\r\n\r\n```JavaScript\r\nconst ccxt = require('ccxt')\r\nconst keys = require('./keys.local.json');\r\n\r\nconst exchange = new ccxt.binance({\r\n    'apiKey': keys.binance.apiKey,\r\n    'secret': keys.binance.secret,\r\n    'options': {\r\n        'adjustForTimeDifference': true,\r\n        'verbose': false,\r\n    }\r\n});\r\n\r\nconst withdraw1Coin = async (coin1, amount1, address1, tag1, chain1) => {\r\n    try {\r\n        let address_tag = '';\r\n        if (tag1 !== 'undefined') address_tag = tag1;\r\n        else address_tag = undefined;\r\n        let network1 = '';\r\n        switch (chain1) {\r\n            case 'EOS':\r\n                network1 = { 'network': 'EOS' };\r\n                break;\r\n            case 'BEP20':\r\n                network1 = { 'network': 'BEP20' };\r\n                break;\r\n            case 'ERC20':\r\n                network1 = { 'network': 'ERC20' };\r\n                break;\r\n            case 'OMNI':\r\n                network1 = { 'network': 'OMNI' };\r\n                break;\r\n            case 'SPL':\r\n                network1 = { 'network': 'SPL' };\r\n                break;\r\n            case 'TRC20':\r\n                network1 = { 'network': 'TRC20' };\r\n                break;\r\n            default:\r\n                network1 = undefined;\r\n        }\r\n        const transfer1 = await exchange.withdraw(coin1, amount1, address1, address_tag, network1);\r\n        const json_transfer = JSON.stringify(transfer1);\r\n        console.log(json_transfer);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n};\r\nwithdraw1Coin(coin1, amount1, address1, tag1, chain1);\r\n```\r\n\r\n```\r\nNot working\r\n```\r\n\r\nHello:\r\n\r\nI wrote some Node.JS code I want to withdraw some coins to another address, I want to include all different networks, like: ERC20, BEP20 etc, so my code will be more flexible to include all different networks, and also include address tag, if there is no address tag, then in command line to pass the parameter. For example:\r\n\r\n`C:\\> node withdraw1Coin.js USDT 10 0x.....(address_in_bep20) undefined BEP20`\r\n\r\nBut my code didn’t work, I didn’t know how to pass command line parameter to make an object. Like:\r\n\r\n`exchange.withdraw(currency, amount, bep20_address, undefined, {network:'BEP20'});`\r\n\r\nIn my above example, it will be something like this:\r\n\r\n`exchange.withdraw('USDT', 10, 0x.....(address_in_bep20), undefined, {network:'BEP20'});`\r\n\r\nPlease advise.\r\nThanks.\r\nYour guys have done a greate job, almost 5 to 10 new versions have been released!\r\nGreat job!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15704/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-11-15T23:33:04Z",
        "body": "Hi @zydjohnHotmail ,\r\n\r\nCan you share what error you are getting?\r\n\r\nAlso if I may suggest you can probably make your code shorter by passing the values directly to the withdraw function like this:\r\n\r\n```javascript\r\nconst ccxt = require('ccxt')\r\nconst keys = require ('./keys.local.json');\r\n\r\nconst exchange = new ccxt.binance ({\r\n    'apiKey': keys.binance.apiKey,\r\n    'secret': keys.binance.secret,\r\n    'options': {\r\n    'adjustForTimeDifference': true,\r\n    'verbose': false, }\r\n});\r\n\r\nconst withdraw1Coin = async (coin1, amount1, address1, tag1, chain1) =>\r\n{\r\ntry\r\n{\r\n    const transfer1 = await exchange.withdraw(coin1, amount1, address1, tag1, {'network': chain1});\r\n    console.log(transfer1);\r\n}\r\ncatch (err)\r\n{\r\nconsole.error(err);\r\n}\r\n};\r\nwithdraw1Coin(coin1, amount1, address1, tag1, chain1);\r\n```"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-11-16T00:19:01Z",
        "body": "Hello:\r\nThank you very much for your code, I will do some testing later.\r\nBut I have one concern: for those CCXT support network, it should be OK, but if some network, like 'MATIC', 'XRP'. And if I pass command line parameter, like 'undefined' for network, then the network object still works?\r\nPlease advise, as I don't have long experience with node.js.\r\nThanks,"
      },
      {
        "user": "pcriadoperez",
        "created_at": "2022-11-16T04:25:24Z",
        "body": "If I understand the question correctly, yes it would still work. For coins with only one network you can pass the network parameter as undefined.\r\n\r\nI'll close this issue for now, but feel free to ask any more questions."
      }
    ]
  },
  {
    "number": 15696,
    "title": "Can we dynamic the exchange selection on npm library",
    "created_at": "2022-11-15T13:35:07Z",
    "closed_at": "2022-11-16T03:35:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15696",
    "body": "I'm working on a project where we need to implement a function that lets users choose which exchange to select from the api; is there any way we can dynamically update the exchange selection procedure in the library?\r\n\r\nThis is the method i applyed and i want that `ccxt.{someExchange}({})` part dynamic if there is a way please help me.\r\n` const binanceData = new ccxt.binance({})`\r\n`        let binanceTicker = await binanceData.fetchTicker(pair);`\r\n\r\n\r\nOS: Ubuntu\r\nProgramming Language version: Node.JS latest\r\nCCXT version: latest\r\nExchange: All\r\nMethod: All",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15696/comments",
    "author": "lovepareek",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-15T14:29:44Z",
        "body": "Hello @LovePareek,\r\nYes you can.\r\n\r\nExample:\r\n```Javascript\r\nconst myDynamicVar = \"binance\"; // assuming this is the variable the user will fill in\r\nconst exchange = new ccxt[myDynamicVar]({});\r\n```\r\n\r\n"
      },
      {
        "user": "lovepareek",
        "created_at": "2022-11-16T03:35:15Z",
        "body": "Hi @carlosmiei,\r\nThank you so much it really worked"
      }
    ]
  },
  {
    "number": 15652,
    "title": "ccxt.base.errors.ArgumentsRequired: binance fetchOrder() requires a symbol argument",
    "created_at": "2022-11-11T22:40:30Z",
    "closed_at": "2022-11-12T21:40:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15652",
    "body": "I running this python code and i get this error tired to solve this\nOS: win7\nProgramming Language version: Python 3.8\nCCXT version: 2.0.12\n\nIssue\n```\nTraceback (most recent call last):\n  File \"gridbot.py\", line 34, in <module>\n    order = exchange.fetch_order(buy_order['orderId'])\n  File \"C:\\Users\\t\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\binance.py\", line 2993, in fetch_order\n    raise ArgumentsRequired(self.id + ' fetchOrder() requires a symbol argument')\nccxt.base.errors.ArgumentsRequired: binance fetchOrder() requires a symbol argument```\n\n\nCode python\n`import ccxt, config, time, sys\n\nexchange = ccxt.binance({\n    'apiKey': config.API_KEY,\n    'secret': config.SECRET_KEY\n})\n\nticker = exchange.fetch_ticker(config.SYMBOL)\n\nbuy_orders = []\nsell_orders = []\n\n# initial_buy_order = exchange.create_market_buy_order(config.SYMBOL, config.POSITION_SIZE * config.NUM_SELL_GRID_LINES)\n\nfor i in range(config.NUM_BUY_GRID_LINES):\n    price = ticker['bid'] - (config.GRID_SIZE * (i+1))\n    print(\"submitting market limit buy order at {}\".format(price))\n    order = exchange.create_limit_buy_order(config.SYMBOL, config.POSITION_SIZE, price)\n    buy_orders.append(order['info'])\n\n# for i in range(config.NUM_SELL_GRID_LINES):\n    # price = ticker['bid'] + (config.GRID_SIZE * (i+1))\n    # print(\"submitting market limit sell order at {}\".format(price))\n    # order = exchange.create_limit_sell_order(config.SYMBOL, config.POSITION_SIZE, price)\n    # sell_orders.append(order['info'])\n\nwhile True:\n    closed_order_ids = []\n\n    for buy_order in buy_orders:\n        print(\"checking buy order {}\".format(buy_order['orderId']))\n        order = exchange.fetch_order(buy_order['orderId'])\n           \n        order_info = order['info']\n\n        if order_info['status'] == config.CLOSED_ORDER_STATUS:\n            closed_order_ids.append(order_info['id'])\n            print(\"buy order executed at {}\".format(order_info['price']))\n            new_sell_price = float(order_info['price']) + config.GRID_SIZE\n            print(\"creating new limit sell order at {}\".format(new_sell_price))\n            new_sell_order = exchange.create_limit_sell_order(config.SYMBOL, config.POSITION_SIZE, new_sell_price)\n            sell_orders.append(new_sell_order)\n\n        time.sleep(config.CHECK_ORDERS_FREQUENCY)`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15652/comments",
    "author": "abdellah9",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-11-12T21:40:50Z",
        "body": "Hi @abdellah9 ,\r\nIn binance the method `fetch_order` requires a symbol argument.\r\nYou can fix this in your code by changing:\r\n From: `order = exchange.fetch_order(buy_order['orderId'])` To: `order = exchange.fetch_order(buy_order['orderId'], config.SYMBOL)`\r\n \r\nFor now I'll close this issue, but feel free to ask any more questions."
      }
    ]
  },
  {
    "number": 15570,
    "title": "Is ticker timestamp always expressed in milliseconds?",
    "created_at": "2022-11-04T16:07:56Z",
    "closed_at": "2022-11-04T16:20:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15570",
    "body": "Is ticker timestamp, received by REST and socket, always expressed in milliseconds?\r\n\r\n- OS: Debian\r\n- Programming Language version: JS\r\n- CCXT version: pro 1.95.14",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15570/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-04T16:11:17Z",
        "body": "Hello @wunderb1t yes, our unified format has the timestamp in milliseconds. "
      }
    ]
  },
  {
    "number": 15502,
    "title": "FTX.py None values returned by fetch_tickers and fetch_ticker",
    "created_at": "2022-10-31T17:12:17Z",
    "closed_at": "2022-11-01T09:28:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15502",
    "body": "OS: Linux\r\nProgramming Language version: Python 3.9.7\r\nCCXT version: 2.0.97\r\nExchange: ftx\r\nMethod: fetch_tickers\r\n\r\n**CODE:**\r\n\r\n```python\r\nimport ccxt.async_support as ccxt\r\nimport asyncio\r\nimport time\r\n\r\nftx = ccxt.ftx()\r\nmarkets = ['BTC/USDT']\r\n\r\nasync def main(symbol, exchange, runtime):\r\n    starttime = time.time()\r\n    currenttime = time.time()\r\n    while currenttime < starttime + runtime:\r\n        msg = await exchange.fetch_tickers(symbol)\r\n        currenttime = time.time()\r\n        print(msg)\r\n    await exchange.close()\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(main(markets, ftx, 60))\r\n```\r\n\r\n**CODE END**\r\n\r\n**CODE OUTPUT**\r\n```python\r\n{\r\n    'BTC/USDT': {\r\n        'symbol': 'BTC/USDT',\r\n        'timestamp': None,\r\n        'datetime': None,\r\n        'high': None,\r\n        'low': None,\r\n        'bid': 20373.0,\r\n        'bidVolume': None,\r\n        'ask': 20374.0,\r\n        'askVolume': None,\r\n        'vwap': None,\r\n        'open': None,\r\n        'close': 20374.0,\r\n        'last': 20374.0,\r\n        'previousClose': None,\r\n        'change': None,\r\n        'percentage': -1.0586635586635587,\r\n        'average': None,\r\n        'baseVolume': None,\r\n        'quoteVolume': 53979943.5015,\r\n        'info': {\r\n            'name': 'BTC/USDT',\r\n            'enabled': True,\r\n            'postOnly': False,\r\n            'priceIncrement': '1.0',\r\n            'sizeIncrement': '0.0001',\r\n            'minProvideSize': '0.0001',\r\n            'last': '20374.0',\r\n            'bid': '20373.0',\r\n            'ask': '20374.0',\r\n            'price': '20374.0',\r\n            'type': 'spot',\r\n            'futureType': None, 'baseCurrency': 'BTC',\r\n            'isEtfMarket': False, 'quoteCurrency': 'USDT',\r\n            'underlying': None, 'restricted': False, 'highLeverageFeeExempt': True, 'largeOrderThreshold': '1680.0',\r\n            'change1h': '-0.0012255502720721603',\r\n            'change24h': '-0.010586635586635586',\r\n            'changeBod': '-0.013174464787368013',\r\n            'quoteVolume24h': '53979943.5015',\r\n            'volumeUsd24h': '53981742.6530169',\r\n            'priceHigh24h': '20834.0',\r\n            'priceLow24h': '20239.0'\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**ERROR DESCRIPTION**\r\nLot of values are returned as None, notably 'timestamp' and ' datetime' among many others.\r\nSame isse occurs also with Method: fetch_ticker\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15502/comments",
    "author": "logos382",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-10-31T20:44:44Z",
        "body": "The exchange api endpoint  doesn't return the time stamp, so we're not able to return it. You can see all the information returned by the exchange in the info field"
      },
      {
        "user": "logos382",
        "created_at": "2022-11-01T09:28:07Z",
        "body": "Thank you for the answer.\r\nProbably I was mistakely thinking ccxt use the ws endpoint to fetch ticker and provide an async and more flexible and scalable version of the raw code below wich actually return a timestamp.\r\n\r\n```python\r\nimport requests\r\nimport websocket\r\nimport json\r\n\r\n\r\n_END_POINT = 'wss://ftx.com/ws/'\r\n\r\nsubscribe_msg = json.dumps({'op': 'subscribe', 'channel': 'ticker', 'market': 'BTC-PERP'})\r\n\r\ndef on_open(ws):\r\n    ws.send(subscribe_msg)\r\n\r\ndef on_message(ws, message):\r\n    out = json.loads(message)\r\n    print(out)\r\n   \r\n\r\nws = websocket.WebSocketApp(_END_POINT, on_message=on_message, on_open=on_open)\r\n\r\nws.run_forever()`\r\n```\r\n\r\nI will continue my research for something that can help on what I need."
      }
    ]
  },
  {
    "number": 15467,
    "title": "How to specify withdraw network parameter if not known?",
    "created_at": "2022-10-30T13:41:06Z",
    "closed_at": "2022-11-07T16:40:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15467",
    "body": "- OS: Windows 10\r\n- Programming Language version: Node.js (version 18.10.0)\r\n- CCXT version: 2.0.90\r\n\r\n```JavaScript\r\nconst ccxt = require('ccxt');\r\nconsole.log(ccxt.version);\r\n\r\nif (process.argv.length != 5) \r\n{ \r\nconsole.error('Usage: BTC Amount Address'); \r\nconsole.error('Please try again!'); \r\nprocess.exit(1);  \r\n} \r\nconst [nodejs, script1, coin1, amount1, address1] = process.argv; \r\n\r\nconst withdraw1Coin(coin1, amount1, address1) = async () => \r\n{\r\n    try {\r\n        const exchange = new ccxt.binance({\r\n            apiKey: 'My_API_Key',\r\n            secret: 'My_Secret_Key',\r\n            adjustForTimeDifference: true,\r\n            defaultType: 'spot',\r\n            recvWindow: 100000,\r\n            verbose: false,\r\n        })\r\n        const transfer1 = await exchange.withdraw(coin1, amount1, address1, undefined, undefined);\r\n        console.log(transfer1);\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nwithdraw1Coin(coin1, amount1, address1);\r\n```\r\n\r\nHello:\r\nI want to withdraw some fund from my exchange account, but for some not well-know symbols, I don’t know their network, or one network address can be used for multiple chains.  For example, one address can be used for both ERC20 and BEP20 network.\r\nIn those cases, can I simply use only the network address, but give parameter an undefined value?\r\n\r\nPlease advise,\r\nThanks,\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15467/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-31T01:23:35Z",
        "body": "Hi @zydjohnHotmail \r\n\r\nIMHO, you might want to set withdrawal network each time. In binance, when you didn't set network, they'll use the `defaultNetwork`. You can find the default network here (sapiGetCapitalConfigGetall).\r\n"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-10-31T07:57:43Z",
        "body": "Hello:\r\nOK, I will try to set network each time, but as I see CCXT support only the following networks, right?\r\n'networks': {\r\n     'ERC20': 'ETH',\r\n    'TRC20': 'TRX',\r\n     'BEP2': 'BNB',\r\n    'BEP20': 'BSC',\r\n    'OMNI': 'OMNI',\r\n    'EOS': 'EOS',\r\n     'SPL': 'SOL',\r\n},\r\nWhat if the deposit belongs to a network not in the list, for example: XRP (Ripple) network, what I should do?"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-10-31T08:06:58Z",
        "body": "Hello:\r\nI tried to get config from binance, but my code did not work:\r\nconst ccxt = require('ccxt')\r\nconst keys = require ('./keys.local.json');\r\nconsole.log ('CCXT Version:', ccxt.version);\r\n\r\nconst exchange = new ccxt.binance ({\r\n    'apiKey': keys.binance.apiKey,\r\n    'secret': keys.binance.secret,\r\n    adjustForTimeDifference: true,\r\n    defaultType: 'spot',\r\n    recvWindow: 100000,\r\n    verbose: false,\t\r\n});\r\n\r\nconst configAll = async () => {\r\n    try {\r\n        const markets = await exchange.loadMarkets();\r\n\t\tconst config = await exchange.sapiGetCapitalConfigGetall();\r\n\t\tconsole.log(config);\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nconfigAll();\r\n\r\nD:\\nodejs\\CCXT_Binance>node BinanceConfigAll.js\r\nCCXT Version: 2.0.90\r\n(node:1176) ExperimentalWarning: The Fetch API is an experimental feature. This feature could change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\nInvalidNonce: binance {\"code\":-1021,\"msg\":\"Timestamp for this request was 1000ms ahead of the server's time.\"}\r\n    at binance.throwExactlyMatchedException (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\base\\Exchange.js:2142:19)\r\n    at binance.handleErrors (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\binance.js:5970:18)\r\n    at D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\base\\Exchange.js:598:51\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at async timeout (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\base\\functions\\time.js:181:20)\r\n    at async binance.fetch2 (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\base\\Exchange.js:1803:16)\r\n    at async binance.request (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\binance.js:5999:26)\r\n    at async binance.fetchCurrencies (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\binance.js:1310:26)\r\n    at async binance.loadMarketsHelper (D:\\nodejs\\CCXT_Binance\\node_modules\\ccxt\\js\\base\\Exchange.js:624:26)\r\n    at async configAll (D:\\nodejs\\CCXT_Binance\\BinanceConfigAll.js:16:25) {\r\n  constructor: [class InvalidNonce extends NetworkError]\r\n}\r\n\r\nHow can I fix this issue, it has been there for a long time, sometimes with this exchange, other times, with another exchange.\r\nPlease advise!\r\nThanks"
      },
      {
        "user": "sc0Vu",
        "created_at": "2022-11-07T15:30:40Z",
        "body": "Hi @zydjohnHotmail\r\n\r\nHave you checked your computer time? Looks like the timestamp went too fast (`Timestamp for this request was 1000ms ahead of the server's time.`)."
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-11-07T16:40:41Z",
        "body": "Hello:\r\nActually, I found one solution, have to setup Windows time service to start automatically, then it works well after the PC clock is sync with NTP time server."
      }
    ]
  },
  {
    "number": 15462,
    "title": "bybit fetchOrders is not supported while hasFetchOrders is true",
    "created_at": "2022-10-30T04:38:16Z",
    "closed_at": "2023-11-08T18:49:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15462",
    "body": "`exchange.fetchOrders` is not supported on Bybit exchange.\r\n\r\n- OS: Win 10 x64\r\n- Programming Language version: Node.js 18\r\n- CCXT version: 2.0.67\r\n\r\n```JavaScript\r\nexchange.hasFetchOrders      // <-- true\r\nexchange.has['fetchOrders']  // <-- true\r\n\r\nexchange.fetchOrders('BTCUSDT') // <-- error\r\n```\r\n\r\n```JavaScript\r\n/home/user/www/node-trading-bot/node_modules/ccxt/js/bybit.js:3447\r\n            throw new NotSupported (this.id + ' fetchOrders() does not support ' + market['type'] + ' markets or USDC markets, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');\r\n                  ^\r\n\r\nNotSupported: bybit fetchOrders() does not support spot markets or USDC markets, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead\r\n    at bybit.fetchOrders (/home/user/www/node-trading-bot/node_modules/ccxt/js/bybit.js:3447:19)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async run (/home/user/www/node-trading-bot/src/testing.js:70:14) {\r\n  constructor: [class NotSupported extends ExchangeError]\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15462/comments",
    "author": "danieltorscho",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-31T01:01:46Z",
        "body": "Hi @danieltorscho \r\n\r\nThe error is that bybit didn't support spot and usdc settled trading pairs. Please make sure the pair is not one of them. In the mean time, I'll check whether they open api endpoint for the spot."
      },
      {
        "user": "danieltorscho",
        "created_at": "2022-10-31T17:56:47Z",
        "body": "@sc0Vu \r\nYeah you are right, I was using a spot trading pair. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-08T18:49:06Z",
        "body": "@danieltorscho `fetchOrders` is now fully supported. "
      }
    ]
  },
  {
    "number": 15430,
    "title": "qty error for bybit",
    "created_at": "2022-10-27T15:23:13Z",
    "closed_at": "2022-10-28T01:48:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15430",
    "body": "\r\n\r\n- OS: windows\r\n- Node.js version: 16.13.2\r\n- CCXT version: 2.0.73\r\n\r\n```\r\nconst ccxt = require('ccxt');\r\nconst exchangeClass = ccxt.bybit;\r\n\r\nasync function run() {\r\n    var exchange_ob = {\r\n        timeout: 30000,\r\n        enableRateLimit: true,\r\n        apiKey: '---',\r\n        secret: '---',\r\n        options: {\r\n            warnOnFetchOpenOrdersWithoutSymbol: false\r\n        }\r\n    }\r\n    var ex = new exchangeClass(exchange_ob)\r\n\r\n    var r = await ex.createOrder('BTCUSDT', 'limit', 'buy', '0.0002', '12605');\r\n    console.log(r)\r\n\r\n}\r\n\r\nrun()\r\n```\r\n\r\n```\r\nC:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\Exchange.js:2142\r\n            throw new exact[string] (message);\r\n                  ^\r\n\r\nBadRequest: bybit {\"ret_code\":10001,\"ret_msg\":\"Param validation for 'qty' failed on the 'required' tag\",\"ext_code\":\"\",\"ext_info\":\"\",\"result\":null,\"time_now\":\"1666883953.690982\",\"rate_limit_status\":99,\"rate_limit_reset_ms\":1666883953689,\"rate_limit\":100}\r\n    at bybit.throwExactlyMatchedException (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\Exchange.js:2142:19)\r\n    at bybit.handleErrors (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\bybit.js:5499:18)\r\n    at C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\Exchange.js:598:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async timeout (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\functions\\time.js:181:20)\r\n    at async bybit.fetch2 (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\Exchange.js:1803:16)\r\n    at async bybit.request (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\base\\Exchange.js:1807:16)\r\n    at async bybit.createContractOrder (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\bybit.js:3042:26)\r\n    at async bybit.createOrder (C:\\Users\\user\\progetti\\trader\\node_modules\\ccxt2\\js\\bybit.js:2759:20)\r\n    at async run (C:\\Users\\user\\progetti\\trader\\test.js:16:13) {\r\n  constructor: [class BadRequest extends ExchangeError]\r\n}\r\n```\r\n\r\ni've noticed this:\r\n`amount = this.amountToPrecision (symbol, amount);`\r\nis rouding amount to 0",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15430/comments",
    "author": "belqit",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-28T01:47:25Z",
        "body": "Hi @belqit \r\n\r\nI think that's the market and precision issue. In bybit, it depends on what market you want to trade, looks like they have same id for spot and swap market pair, eg `BTCUSDT`.\r\n\r\nSo we used `defaultType` to handle different market. The default type is `swap`, the market you loaded is swap market (the precision for swap is 0.001).\r\n\r\nIf you want to buy spot, please set `defaultType` to `spot` (precision is 0.000001).\r\n\r\n```JS\r\n  const bybit = new ccxt.bybit({\r\n    \"apiKey\": \"\",\r\n    \"secret\": \"\",\r\n    'options': {\r\n      'defaultType': 'spot'\r\n    }\r\n  })\r\n```\r\n\r\nLet me know if you have other questions."
      }
    ]
  },
  {
    "number": 15422,
    "title": "About using google cloud VM for trading bot in binance using ccxt",
    "created_at": "2022-10-27T07:43:49Z",
    "closed_at": "2022-10-28T08:57:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15422",
    "body": "Hi, I am going to upload my bot in google cloud VM.\r\nBut I as you know, when the connection between internet and python code cut off, the program stop and return Network Error.\r\nI can't handle it manually because I have to go Korea Army, so I decided to use google cloud VM.\r\n\r\nThe problem is, at some period Google stops VM for maintenance and do 'migration' to another VM, and I'm worried that the enternet connection cut off in this case.\r\n\r\nI hope there are some people who know and actually experienced about same thing.\r\n\r\nPS. for all who think and repeat for my questions\r\nGod bless you. Thank you so much. I won't forget",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15422/comments",
    "author": "Mbuilder117",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-28T08:57:06Z",
        "body": "Hi @Mbuilder117 \r\n\r\nI think this issue is not related to `ccxt` library, but I'll leave some notes.\r\n\r\nYou probably want to check `systemd` or `watchdog` on linux. If you run nodejs, you can checkout `pm2`. \r\n\r\n"
      },
      {
        "user": "Mbuilder117",
        "created_at": "2022-10-28T12:19:15Z",
        "body": "Thanks but, I want to ask 'does the google cloud server sometimes cut off internet', not how to check it..\r\nSo can you reopen the question?"
      },
      {
        "user": "Mbuilder117",
        "created_at": "2022-10-28T12:19:36Z",
        "body": "But they looks interesting, so i'm gonna study very soon"
      }
    ]
  },
  {
    "number": 15377,
    "title": "bybit Can't get any info of usdc perp",
    "created_at": "2022-10-21T13:57:03Z",
    "closed_at": "2022-10-24T09:27:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15377",
    "body": "Hi, I have search and try method about options type already but still no clue. I can't access to any USDC perpetual symbol or balance. Its only show future balance&pair(USDT). I want to trade in usdc perpetual sir but \r\n```\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol BTCPERP\r\n```\r\n\r\nThis is header\r\n```\r\nbybit = ccxt.bybit({\r\n\"apiKey\": \"xxxx\",\r\n\"secret\": \"xxxx\",\r\n\"options\": {'defaultType': 'future'}\r\n})\r\nprint(bybit.fetchMarkets())\r\n```\r\n\r\nIs bybit USDC perp contracts have some specific type for it?\r\n\r\nps. Sorry for trouble",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15377/comments",
    "author": "croissantty",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-21T14:25:38Z",
        "body": "Hello @croissantty, Bybit has conflicting ids between USDT settle derivatives and the USDC one (BTC-PERP), so I would recommend using the unified symbol, in this case `BTC/USD:USDC`\r\n\r\nExample:\r\n```Python\r\nticker = await exchange.fetch_ticker('BTC/USD:USDC')\r\n```\r\n\r\nRegarding the balance, by default  will return the usdt based wallet balance, to change it, you have two options\r\n- settle the `defaultSettle` option as `USDC` `exchange.options['defaultSettle`] = 'USDC' `\r\n- add `settle` to `params` \r\n\r\nExample:\r\n\r\n```Python\r\nparams = {\r\n    'settle': 'USDC'\r\n}\r\nbalance = await exchange.fetch_balance(params)\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "croissantty",
        "created_at": "2022-10-21T19:38:24Z",
        "body": "Very thank you @carlosmiei, with your help now I can access balance and symbol. but look like `fetchMyTrades()` is not working with this exchange or I'm missing something?\r\n\r\n```\r\nccxt.base.errors.NotSupported: bybit fetchMyTrades() is not supported for market BTC/USD:USDC\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-24T09:27:18Z",
        "body": "> is not supported for market\r\n\r\nYou are right, seems the current implementation doesn't have any endpoint to access it, so it seems bybit is lacking that endpoint, we can't do anything in such case (if anyone finds out that that bybit added/supports it now and we have a missing implementation, let us know)"
      }
    ]
  },
  {
    "number": 15374,
    "title": "CCXTPRO removed dependence",
    "created_at": "2022-10-21T09:48:09Z",
    "closed_at": "2022-10-24T09:08:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15374",
    "body": "- OS: Mac OS\r\n- Programming Language version: Python\r\n- CCXT version:  2.0.53\r\n- CCXT version:  1.2.36\r\n\r\n\r\n```\r\nfrom ccxt.async_support.eqonex import eqonex                              # noqa: F401\r\n```\r\nin the newest version of ccxt was removed dependence  which ccxtpro is still requiring\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15374/comments",
    "author": "AdamPrisen",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-21T10:23:35Z",
        "body": "Hello @AdamPrisen are you still using the standalone ccxt.pro package?"
      },
      {
        "user": "AdamPrisen",
        "created_at": "2022-10-21T10:25:18Z",
        "body": "Hello yea i am still using ccxt.pro but i am reading that websockets were merged to ccxt so we will change it to that version"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-21T10:26:11Z",
        "body": "@AdamPrisen yeah ccxt.pro was merged into ccxt and the old package won't get updates anymore, so we strongly recommend migrating it"
      },
      {
        "user": "HUGH-XUUUU",
        "created_at": "2022-10-22T10:29:00Z",
        "body": "Hi,What do you mean abou \"merged into ccxt\"? Can we still use these websocket supported method in ccxt.pro?"
      },
      {
        "user": "HUGH-XUUUU",
        "created_at": "2022-10-22T10:35:37Z",
        "body": "@carlosmiei "
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-22T10:41:20Z",
        "body": "Hello @HUGH-XUUUU in the past ccxt.pro was a paid product with its own package, now it's free and merged into the regular ccxt package, so if you're still using the \"paid\" package it's better to migrate because won't get more updates/fixes"
      },
      {
        "user": "HUGH-XUUUU",
        "created_at": "2022-10-22T10:46:41Z",
        "body": "Thanks man @carlosmiei ! "
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-24T09:08:04Z",
        "body": "As everything is clear, I'll close this issue. let us know if you have any further issues with CCXT."
      }
    ]
  },
  {
    "number": 15351,
    "title": "How to work with Futures for other exchanges except Binance and KuCoin?",
    "created_at": "2022-10-19T17:50:18Z",
    "closed_at": "2022-10-20T02:44:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15351",
    "body": "Hi,\r\nBased on the list of available exchanges, it can be seen that Binance and KuCoin have a separate id for working with Futures. But what about other exchanges? For example, HitBTC also has futures in its API.\r\n\r\nWork with them is not implemented or is there a trick here?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15351/comments",
    "author": "voitovych-com",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-10-20T02:44:22Z",
        "body": "Hi @rvoitovich,\r\nSome exchanges have seperate id's when they have specific api keys, or different urls. But for most exchanges ccxt uses the same id for different markets types. You can check if an exchange supports futures by checking  `if (exchange.has['future'] === true` or `if (exchange.has['swap'] === true)` for perpetuals.\r\nIn the case of hitBTC, the exchange id hitBTC3 supports swaps but not futures.\r\n\r\nI'll close this issue for now but feel free to comment or open a new issue if you have any further questions"
      }
    ]
  },
  {
    "number": 15346,
    "title": "editOrder on bitget doesn't work",
    "created_at": "2022-10-19T09:38:54Z",
    "closed_at": "2023-11-08T18:49:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15346",
    "body": "I have issues editing stop orders on bitget. Once placed, i am not able to change it via ccxt (Node Js):\r\n\r\n1) Placing Order:\r\n\r\nasync function teststop () {\r\n    let params = {\r\n        'stopLossPrice': 1295, // your stop loss price\r\n    }\r\n\r\n    let order = await bitget.createOrder (symbol='ETH/USDT:USDT', type='market', side='buy', amount=0.1, price=undefined, params)\r\n    console.log(order)\r\n\r\n}\r\n\r\nOutput:\r\n\r\n{\r\n  info: { clientOid: '966559794399354880', orderId: '966559794399354881' },\r\n  id: '966559794399354881',\r\n  clientOrderId: '966559794399354880',\r\n  timestamp: undefined,\r\n  datetime: undefined,\r\n  lastTradeTimestamp: undefined,\r\n  symbol: undefined,\r\n  type: undefined,\r\n  timeInForce: undefined,\r\n  postOnly: undefined,\r\n  side: undefined,\r\n  price: undefined,\r\n  stopPrice: undefined,\r\n  average: undefined,\r\n  cost: undefined,\r\n  amount: undefined,\r\n  filled: undefined,\r\n  remaining: undefined,\r\n  status: undefined,\r\n  fee: undefined,\r\n  trades: [],\r\n  fees: []\r\n}\r\n\r\n2) Trying to edit order using the provided id:\r\n\r\nasync function testadjust () {\r\n    let new_params = {\r\n        'stopLossPrice': 1290 // your stop loss price\r\n    }\r\n\r\n    let result = await bitget.editOrder (id='966559794399354881', symbol='ETH/USDT:USDT', type='market', side='buy', amount=0.1, price = undefined, params = new_params )\r\n    dLog(result)\r\n}\r\n\r\nOutput:\r\n\r\n(node:1636619) UnhandledPromiseRejectionWarning: ExchangeError: bitget {\"code\":\"40768\",\"msg\":\"Order does not exist\",\"requestTime\":1666171771617,\"data\":null}\r\n\r\nChecking on bitget: stop order is still there.\r\n\r\n3) Trying to check on openOrders:\r\n\r\nasync function fetchopen () {\r\n    let result = await bitget.fetchOpenOrders(symbol='ETH/USDT:USDT', since = undefined, limit =12, params = {})\r\n    dLog(result)\r\n}\r\n\r\nOutput:\r\n\r\nlog [] +0ms\r\n\r\nEmpty!\r\n\r\n... I verified that this generally works by placing an unfilled limit orders. In that case, it is returned via openOrders.\r\n\r\nCan you provide some guidance? Many thanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15346/comments",
    "author": "AstraDynamic",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-10-20T04:39:05Z",
        "body": "Hi Astra,\r\n\r\nThe first order is a market order, therefore it is being created and filled. And I'm guessing that is why you are getting an `Order does not exit error` when trying to edit it.\r\nMy recommendation to add a stop order to the position, is to create a stop order, or to add a stop Loss when creating the initial position.\r\n\r\nHope that helps! Let me know if you have any other questions."
      }
    ]
  },
  {
    "number": 15312,
    "title": "Wait longer before raising Request timeout Error.",
    "created_at": "2022-10-17T01:04:27Z",
    "closed_at": "2022-10-20T16:01:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15312",
    "body": "When fetching data from Binance, it happens (rarely) that my internet wi-fi goes slow, for few minutes. How to tell to ccxt to \"wait longer\" before interrupting the code?\r\n\r\n\r\n```python\r\nimport ccxt\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nimport time\r\n\r\nbinance = ccxt.binance()\r\n\r\ndef getData():\r\n    usdt_1m = binance.fetch_ohlcv(\"BTC/USDT\",'1m',limit=1)\r\n    usdt_1m = pd.DataFrame(usdt_1m)\r\n\r\n    t = int(usdt_1m.iloc[0,0]/1000)\r\n    t = datetime.fromtimestamp(t)\r\n    usdt_1m.iloc[0,0] = t\r\n    return usdt_1m\r\n\r\nWhile True:\r\n    getData()\r\n```\r\n\r\nThank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15312/comments",
    "author": "riemanncode",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-17T04:08:46Z",
        "body": "Hi @riemanncode \r\n\r\nThe default timeout is 10 seconds, you can update value when initialize exchange object.\r\n\r\n```python\r\nbinance = ccxt.binance({\r\n  'timeout': 20000\r\n})\r\n```"
      }
    ]
  },
  {
    "number": 15306,
    "title": "How to implement fetchCurrency?",
    "created_at": "2022-10-15T11:25:48Z",
    "closed_at": "2022-10-18T08:51:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15306",
    "body": "- OS: Windows 10 (Version 21H2)\r\n- Programming Language version: Node.js (version 18.10.0)\r\n- CCXT version: 2.0.19\r\n\r\n```JavaScript\r\nuse strict';\r\nconst ccxt = require('ccxt');\r\n\r\n(async function () {\r\n    console.log(ccxt.version)\r\n    const exchange = new ccxt.binance({\r\n        apiKey: 'My_API_Key',\r\n        secret: 'My_Secret_Key',\r\n        verbose: false,\r\n        defaultType: 'spot',\r\n        adjustForTimeDifference: true,\r\n        'options': {\r\n            'fetchCurrencies': true,\r\n        },\r\n    })\r\n    try \r\n    {\r\n    const currencies = await exchange.fetchCurrencies();\r\n    console.log(currencies);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n})();\r\n```\r\n\r\nHello:\r\nI want to know if I can use `fetchCurrencies()` to implement `fetchCurrency()` for a single currency.\r\nFor example, in exchange Binance, it has so many currencies, but only a few of them are important, like: BTC, USDT, ETH.\r\nThe other currencies are not used often, so I want to know if I can implement `fetchCurrency()` to get information for only one currency, like ‘USDT’.\r\nPlease advise,\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15306/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-16T15:42:14Z",
        "body": "Hi @zydjohnHotmail \r\n\r\nThere are `currency(code)` and `safeCurrency(currencyId, currency` in Exchange class, you can use them to get currency."
      },
      {
        "user": "samgermain",
        "created_at": "2022-10-18T08:34:43Z",
        "body": "@zydjohnHotmail \r\n\r\nHere's an example of how you would use the currency method to get the info for a currency. You need to provide your `apiKey` and `secret` to binance, or else you will get different results\r\n\r\n```JavaScript\r\nconst ccxt = require('ccxt');\r\nconst keys = require('./keys.local.json');\r\n\r\n(async function () {\r\n    const exchange = new ccxt.binance({\r\n        ...keys.binance,\r\n        'options': {\r\n            'fetchCurrencies': true,\r\n        },\r\n    });\r\n    await exchange.loadMarkets ();\r\n    const currency = exchange.currency ('USDT');\r\n    console.log (currency);\r\n})();\r\n```\r\n\r\n## Output\r\n\r\n```JavaScript\r\n{\r\n  id: 'USDT',\r\n  name: 'TetherUS',\r\n  code: 'USDT',\r\n  precision: undefined,\r\n  info: {\r\n    coin: 'USDT',\r\n    depositAllEnable: true,\r\n    withdrawAllEnable: true,\r\n    name: 'TetherUS',\r\n    free: '0',\r\n    locked: '0',\r\n    freeze: '0',\r\n    withdrawing: '0',\r\n    ipoing: '0',\r\n    ipoable: '0',\r\n    storage: '0',\r\n    isLegalMoney: false,\r\n    trading: true,\r\n    networkList: [\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object]\r\n    ]\r\n  },\r\n  active: true,\r\n  deposit: true,\r\n  withdraw: true,\r\n  networks: [\r\n    {\r\n      network: 'BSC',\r\n      coin: 'USDT',\r\n      withdrawIntegerMultiple: '0.00000001',\r\n      isDefault: false,\r\n      depositEnable: true,\r\n      withdrawEnable: true,\r\n      depositDesc: '',\r\n      withdrawDesc: '',\r\n      specialTips: '',\r\n      specialWithdrawTips: 'The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.',\r\n      name: 'BNB Smart Chain (BEP20)',\r\n      resetAddressStatus: false,\r\n      addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\r\n      addressRule: '',\r\n      memoRegex: '',\r\n      withdrawFee: '0.29',\r\n      withdrawMin: '10',\r\n      withdrawMax: '10000000000',\r\n      depositDust: '0.01',\r\n      minConfirm: '15',\r\n      unLockConfirm: '0',\r\n      sameAddress: false,\r\n      estimatedArrivalTime: '5',\r\n      busy: false,\r\n      country: 'AE,BINANCE_BAHRAIN_BSC'\r\n    },\r\n    ...\r\n  ],\r\n  fee: 3.2,\r\n  fees: {\r\n    BSC: 0.29,\r\n    AVAXC: 0.8,\r\n    BNB: 0.8,\r\n    ETH: 3.2,\r\n    MATIC: 0.8,\r\n    SOL: 0.8,\r\n    XTZ: 0.8,\r\n    TRX: 0.8\r\n  },\r\n  limits: {\r\n    leverage: { min: undefined, max: undefined },\r\n    amount: { min: undefined, max: undefined },\r\n    price: { min: undefined, max: undefined },\r\n    cost: { min: undefined, max: undefined }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-10-18T08:51:05Z",
        "body": "Thank you very much, your code works!"
      }
    ]
  },
  {
    "number": 15258,
    "title": "Computational performance in Node.js too slow",
    "created_at": "2022-10-12T10:16:15Z",
    "closed_at": "2022-10-12T13:44:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15258",
    "body": "hello. I'm making a cryptobot with Node.js.\r\n\r\nI've created a trading signal logic at the moment, and my tests have found that the calculation speed is too slow.\r\nIs there any way to improve that issue?\r\n\r\nI did a lot of searching but couldn't find a solution in Node.js.\r\n\r\nBut as far as I know, Python does a good job in this area.\r\nIn addition, I know that Python and Node are interoperable.\r\n\r\nThen, in my opinion, can I now receive the OHLCV information of the exchange from the node and separate the logic for calculating the index into Python + WebSocket, and then receive the signal value returned by Python from the Node and place an order?\r\n\r\nIf my thinking is correct, can you explain a little more specific way?\r\n\r\nIf you have a solution, please help!\r\n\r\n- OS: window10\r\n- Programming Language version: node 16.x\r\n- CCXT version: 1.95.35\r\n\r\ncurrent code (Don't worry about hoisting. Write in sequence for easy viewing)\r\n```node\r\nconst executeTrade = async (json) => {\r\n\tawait exchange.loadMarkets();\r\n\r\n\tconst position = await exchange.fetchPositions([TICKER]);\r\n\tconst ticker = await exchange.fetchTicker(TICKER);\r\n\tconst usdtBalance = await getBalances();\r\n\tconst currentLeverage = position[0].leverage;\r\n\tconst curruntPrice = ticker.last;\r\n\r\n\t// test\r\n\tod_type = 'MARKET';\r\n\tod_side = 'buy';\r\n\tod_price = undefined;\r\n\tod_amount_rate = 0.1;\r\n\tod_amount = (usdtBalance * od_amount_rate) / (curruntPrice / currentLeverage);\r\n\tod_sl_rate = 0.005;\r\n\tod_ts_rate = 5;\r\n\tod_ts_trigger = 80;\r\n\t// od_leverage = json.leverage ? json.leverage : 10;\r\n\tod_leverage = 5;\r\n\tlimitAverageDown = 2;\r\n\taverageDownRate = 0.003;\r\n\r\n\tif (currentLeverage !== od_leverage) {\r\n\t\t// setLeverage(json.leverage);\r\n\t\tsetLeverage(od_leverage);\r\n\t}\r\n\r\n\tmonitoring();\r\n};\r\n```\r\n```node\r\nconst monitoring = async () => {\r\n\twhile (true) {\r\n                // A function containing await exchange.fetchOHLCV()\r\n\t\tconst {cmo, vo, rvi} = Indicators()\r\n\t\tlet isEffectiveCMO; /*.cmo..*/\r\n\t\tlet isEffectiveVO; /*..vo..*/\r\n\t\tlet isEffectiveRVI; /*..rvi..*/\r\n\r\n\t\tif (isEffectiveCMO && isEffectiveVO && isEffectiveRVI) {\r\n\t\t\topenPosition();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n```\r\n```node\r\nconst openPosition = async () => {\r\n\tlastTradeDirection = od_side;\r\n\tawait exchange.createOrder(TICKER, od_type, od_side, od_amount, od_price);\r\n\tawait liveTicker();\r\n};\r\n```\r\n```node\r\nconst liveTicker = async () => {\r\n\tconst position = await exchange.fetchPositions([TICKER]);\r\n\tconst averagePrice = Number(position[0].info.entry_price);\r\n\tconst ts_triggerPrice = averagePrice + od_ts_trigger;\r\n\tconst sl_TriggerPrice = averagePrice - Math.round(averagePrice * od_sl_rate);\r\n\tconst averageDownPrice = averagePrice - Math.round(averagePrice * averageDownRate);\r\n\r\n\twhile (true) {\r\n\t\tlet tickerDetails = await exchange.fetchTicker(TICKER);\r\n\r\n\t\t// average down\r\n\t\tif (tickerDetails.last <= averageDownPrice && averageDownCount < limitAverageDown) {\r\n\t\t\taverageDown();\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// stop loss\r\n\t\tif (tickerDetails.last <= sl_TriggerPrice && averageDownCount == limitAverageDown) {\r\n\t\t\tclosePosition(position);\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// trigger stop\r\n\t\tif (tickerDetails.last >= ts_triggerPrice) {\r\n\t\t\ttrailingStop();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15258/comments",
    "author": "BongSuCHOI",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-10-12T13:44:47Z",
        "body": "Hi @BongSuCHOI , \r\n\r\nSo Node.js is actually faster than python, as node.js is a compiled language while python is interpreted. However the difference in performance is really minimal and don't think this is your issue. To reduce complexity I would recommend sticking to the language you feel more comfortable in.\r\n\r\nThe slowest part in your code will be the calls to the server much more than the calculations. Here Websockets can definitely help and they are available through ccxt in javascript, php and python. I would to try that first.\r\n\r\nI'll close this issue for now, but feel free to re-open or ask more questions if they come up.\r\n\r\n\r\n"
      },
      {
        "user": "BongSuCHOI",
        "created_at": "2022-10-14T02:06:24Z",
        "body": "@pcriadoperez \r\n> The slowest part in your code will be the calls to the server\r\n\r\n\r\nThe answer was late.\r\nthank you! I think I found the keyword of performance improvement refactoring after hearing your answer.\r\n\r\nLooking closely at my code, asynchronous functions such as the fetchOHLCV() function were being called multiple times.\r\n\r\nIf the problem still occurs after improving the performance, I will open the problem again, thank you!"
      }
    ]
  },
  {
    "number": 15234,
    "title": "Fetching orders on Bybit futures",
    "created_at": "2022-10-09T16:35:32Z",
    "closed_at": "2022-10-10T15:21:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15234",
    "body": "\r\n\r\n- OS: macOS 12.6\r\n- Programming Language version: python 3.8.13\r\n- CCXT version: 1.95.28\r\n\r\n```\r\nbybit = ccxt.bybit({\r\n    'apiKey': ***,\r\n    'secret': ***,\r\n    'options': {\r\n        'defaultType': 'future',\r\n    },\r\n})\r\n\r\npair_order = 'BTC/USDT:USDT'\r\nenter_amount_in_symbol = 20\r\nopen_order_price = 19555\r\n\r\norder = bybit.create_order(pair_order, 'LIMIT', 'sell', enter_amount_in_symbol, open_order_price, {'base_price': open_order_price, 'stop_px': open_order_price})\r\n\r\nprint(bybit.fetch_order(order['id'], pair_order))\r\n\r\nprint(bybit.fetch_order_trades(order['id'], pair_order))\r\n\r\n```\r\n\r\n```\r\nOrderNotFound: bybit fetchOrder() order 91a5eefa-4345-4ec6-8f06-a1b997eb6ab7 not found\r\n\r\n\r\n[{'id': '9cd501fa-b6b8-59ae-ac38-6bf068b49ed1',\r\n  'info': {'order_id': '91a5eefa-4345-4ec6-8f06-a1b997eb6ab7',\r\n   'order_link_id': '',\r\n   'side': 'Sell',\r\n   'symbol': 'BTCUSDT',\r\n   'exec_id': '9cd501fa-b6b8-59ae-ac38-6bf068b49ed1',\r\n   'price': '18502',\r\n   'order_price': '18502',\r\n   'order_qty': '0.001',\r\n   'order_type': 'Market',\r\n   'fee_rate': '0.0006',\r\n   'exec_price': '19476.5',\r\n   'exec_type': 'Trade',\r\n   'exec_qty': '0.001',\r\n   'exec_fee': '0.0116859',\r\n   'exec_value': '19.4765',\r\n   'leaves_qty': '0',\r\n   'closed_size': '0',\r\n   'last_liquidity_ind': 'RemovedLiquidity',\r\n   'trade_time': '1665332280',\r\n   'trade_time_ms': '1665332280182'},\r\n  'timestamp': 1665332280182,\r\n  'datetime': '2022-10-09T16:18:00.182Z',\r\n  'symbol': 'BTC/USDT:USDT',\r\n  'order': '91a5eefa-4345-4ec6-8f06-a1b997eb6ab7',\r\n  'type': 'market',\r\n  'side': 'sell',\r\n  'takerOrMaker': 'taker',\r\n  'price': 19476.5,\r\n  'amount': 0.001,\r\n  'cost': 19.4765,\r\n  'fee': {'cost': 0.0116859, 'currency': 'USDT', 'rate': 0.0006},\r\n  'fees': [{'currency': 'USDT', 'cost': 0.0116859, 'rate': 0.0006}]}]\r\n\r\n```\r\n\r\nHello,\r\n\r\ni'm trying to get information about filled order on Bybit, but here's something strange. Fetch_order doesn't see an order id and I can't find it in fetch_orders request too. But when I try to call fetch_order_trades, I can see all data about this order. How can I receive this information via fetch_order?\r\n\r\nOn Binance such request worked perfectly.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15234/comments",
    "author": "ddtask2",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-10T08:17:45Z",
        "body": "Hi @ddtask2 \r\n\r\nIMHO, you used stop order. Try this one:\r\n\r\n```python\r\nprint(bybit.fetch_order(order['id'], pair_order, { 'stop': True }))\r\n```"
      },
      {
        "user": "ddtask2",
        "created_at": "2022-10-10T15:02:13Z",
        "body": "> \r\n\r\n\r\n\r\n> Hi @ddtask2\r\n> \r\n> IMHO, you used stop order. Try this one:\r\n> \r\n> ```python\r\n> print(bybit.fetch_order(order['id'], pair_order, { 'stop': True }))\r\n> ```\r\n\r\nThanks a lot, this helped. But is there any solution to get order info regardless of it's type?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-10T15:17:58Z",
        "body": "Hello @ddtask2, not with a single request because bybit uses different endpoints depending on the order type"
      },
      {
        "user": "ddtask2",
        "created_at": "2022-10-10T15:21:21Z",
        "body": "> Hello @ddtask2, not with a single request because bybit uses different endpoints depending on the order type\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 15212,
    "title": "MBX_WEIGHT_1M header parameter, know your 1min limits ",
    "created_at": "2022-10-07T07:43:49Z",
    "closed_at": "2022-10-09T17:35:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15212",
    "body": "Hi, I am using ccxt version 1.81.14 in php. I just talk to Binance customer support and find out that I can know whenever I am going to hit the hard-limits like 1200 weight per 1min. There is a parameter in header, MBX_WEIGHT_1M, from Binance api's response. \r\n\r\nSo my question is, how can we get the header parameter response from ccxt? \r\n\r\nbtw i am using this list of functions:\r\nfor future, i am using $exchange->market, $exchange->fapiPrivate_post_leverage, $exchange->fetchTicker, and $exchange->create_order()\r\n\r\nfor spot, i am just using $exchange->create_market_buy_order\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15212/comments",
    "author": "ngdekhai",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-07T14:17:46Z",
        "body": "Hello @ngdekhai, You can activate the `last_response_headers` option to access that information, example:\r\n\r\n```Python\r\nexchange = ccxt.binance({\r\n    # 'apiKey': 'YOUR_API_KEY',\r\n    # 'secret': 'YOUR_SECRET_KEY',\r\n    'last_response_headers': True,\r\n})\r\n\r\nmarkets = await exchange.load_markets()\r\n\r\norder = await exchange.create_order(your params here)\r\n## Get headers from the last call\r\nheaders = exchange.last_response_headers\r\nprint(headers)\r\n```\r\n"
      },
      {
        "user": "ngdekhai",
        "created_at": "2022-10-09T17:35:05Z",
        "body": "@carlosmiei thanks for the help"
      }
    ]
  },
  {
    "number": 15184,
    "title": "PHP Fatal error:  Uncaught Error: Class 'React\\Promise\\Deferred' ",
    "created_at": "2022-10-04T11:19:24Z",
    "closed_at": "2022-10-04T12:03:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15184",
    "body": "Am I missing something? After updating to 1.95.7 my code can not find one of the React classes. I did install React using composer.  Here is a snippet of the composer.json file:\r\n{\r\n        \"react/http\": \"^1.8\",\r\n        \"react/socket\": \"^1.12\",\r\n        \"react/promise\": \"^2.9\",\r\n        \"recoil/recoil\": \"^1.0\"\r\n\r\n- OS: Ubuntu 20.4\r\n- Programming Language version: PHP\r\n- CCXT version: 1.95.7\r\n\r\n``` Code:\r\nrequire_once __DIR__ . '/ccxt/ccxt.php';\r\n```\r\n\r\n``` Error:\r\nPHP Fatal error:  Uncaught Error: Class 'React\\Promise\\Deferred' not found in /root/ccxt/php/pro/Future.php:8\r\nStack trace:\r\n#0 /root/ccxt/ccxt.php(128): require_once()\r\n#1 /root/rpc_TNR_Indicators.php(13): require_once('/root/ccxt/ccxt...')\r\n#2 {main}\r\n  thrown in /root/ccxt/php/pro/Future.php on line 8\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15184/comments",
    "author": "pottertech",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-04T11:29:16Z",
        "body": "Hello @pottertech can you try to run `composer update` ? "
      },
      {
        "user": "pottertech",
        "created_at": "2022-10-04T12:03:00Z",
        "body": "I found another comment that states that we have to run composer install inside the ccxt directory before it will work with React."
      }
    ]
  },
  {
    "number": 15165,
    "title": "exchange.markets['BTC/USDT']['limits']['leverage']['max'] returns None",
    "created_at": "2022-10-02T18:27:23Z",
    "closed_at": "2022-10-04T15:03:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15165",
    "body": "I tried to check the MAX Leverage of Binance Future. But my code returns None. I have no idea why I can not see it. Is this bug or am I missing something? I tried 10 different symbols, but every output was None.  I have 200USDT in my Binance Future account.\r\n\r\n- OS: Ubuntu 20.04.5 LTS\r\n- Programming Language version: Python 3.9.6\r\n- CCXT version: 1.94.16\r\n\r\n```\r\nexchange = ccxt.binance({\"apiKey\": key1, \"secret\": key2,\\\r\n                        'options': {'defaultType': 'future'},\\\r\n                        'enableRateLimit': True})\r\n\r\nexchange.load_markets()\r\n\r\nprint(exchange.markets['BTC/USDT']['limits']['leverage']['max'])\r\n```\r\noutput\r\n```\r\nNone\r\n```\r\nIf you know what's going on. Please help me :(",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15165/comments",
    "author": "MyStyleAlways",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-03T08:15:41Z",
        "body": "Hello @MyStyleAlways, unfortunately not every exchange provides that information through the API"
      },
      {
        "user": "MyStyleAlways",
        "created_at": "2022-10-04T15:02:57Z",
        "body": "> Hello @MyStyleAlways, unfortunately not every exchange provides that information through the API\n\nThank you for telling me. Appreciate you!"
      }
    ]
  },
  {
    "number": 15160,
    "title": "Fetching balance state on Bybit returns an empty list",
    "created_at": "2022-10-01T11:52:12Z",
    "closed_at": "2022-10-01T14:04:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15160",
    "body": "- OS: Windows 10 (WSL2 Ubuntu 20.04)\r\n- Programming Language version: Node.js 18\r\n- CCXT version: 1.92.89\r\n\r\nFetching a balance returns all 0. It does not work both on mainnet and testnet.\r\n\r\nBalance amount for all symbols is returned as 0. API key and secret is a correct one.\r\nSwitching from bybit to binance exchange successfully returns a correct amount of balance, but not on bybit.\r\n\r\nMy actual balance on testnet is: 112,294.98 USD (≈5.82435910 BTC)\r\n\r\n```\r\nconst ccxt = require('ccxt')\r\n\r\n(async () => {\r\n  const exchange = new ccxt.bybit({\r\n    apiKey: 'xxx',\r\n    secret: 'xxx'\r\n  })\r\n  \r\n  const balance = await exchange.fetchBalance()\r\n  console.log(balance)\r\n})()\r\n```\r\n\r\n```\r\n{\r\n  info: {\r\n    ret_code: '0',\r\n    ret_msg: 'OK',\r\n    result: {\r\n      USDT: [Object],\r\n      DOT: [Object],\r\n      LTC: [Object],\r\n      BIT: [Object],\r\n      MANA: [Object],\r\n      BTC: [Object],\r\n      ETH: [Object],\r\n      EOS: [Object],\r\n      XRP: [Object],\r\n      SOL: [Object],\r\n      ADA: [Object]\r\n    },\r\n    ext_code: '',\r\n    ext_info: '',\r\n    time_now: '1664624408.371975',\r\n    rate_limit_status: '117',\r\n    rate_limit_reset_ms: '1664624408367',\r\n    rate_limit: '120'\r\n  },\r\n  USDT: { free: 0, used: 0, total: 0 },\r\n  DOT: { free: 0, used: 0, total: 0 },\r\n  LTC: { free: 0, used: 0, total: 0 },\r\n  BIT: { free: 0, used: 0, total: 0 },\r\n  MANA: { free: 0, used: 0, total: 0 },\r\n  BTC: { free: 0, used: 0, total: 0 },\r\n  ETH: { free: 0, used: 0, total: 0 },\r\n  EOS: { free: 0, used: 0, total: 0 },\r\n  XRP: { free: 0, used: 0, total: 0 },\r\n  SOL: { free: 0, used: 0, total: 0 },\r\n  ADA: { free: 0, used: 0, total: 0 },\r\n  free: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  used: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  total: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15160/comments",
    "author": "danieltorscho",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-01T13:06:06Z",
        "body": "Hello @danieltorscho,\r\nBybit is one of the only exchanges loading derivative features (markets, balances, etc) by default. I suspect that your funds are under the spot wallet, so I'd suggest instantiating bybit like this:\r\n\r\n```Python\r\nexchange = ccxt.bybit({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET_KEY',\r\n    'options': {\r\n       'defaultType': 'spot', # very important set spot as default type\r\n    }\r\n})\r\nbalances = await exchange.fetch_balance()\r\n```\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "danieltorscho",
        "created_at": "2022-10-01T14:04:20Z",
        "body": ">     'options': {\r\n>        'defaultType': 'spot', # very important set spot as default type\r\n>     }\r\n\r\n@carlosmiei thank you, it works now !"
      }
    ]
  },
  {
    "number": 15154,
    "title": "OKX batch orders",
    "created_at": "2022-09-30T12:24:50Z",
    "closed_at": "2022-10-01T17:34:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15154",
    "body": "- OS: Ubuntu 20.04\r\n- Programming Language version: PHP 7.4\r\n- CCXT version: 1.91.22\r\n\r\nJust a simple question: Does CCXT support to place batch orders in one request for OKX exchange? Thanks.\r\n\r\nKind regards.\r\nKai\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15154/comments",
    "author": "kaiqiangh",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-30T17:39:14Z",
        "body": "Hello @kaiqiangh, yes it does, you just need to set it in the options like this:\r\n\r\n```Python\r\nexchange.options['createOrder'] = 'privatePostTradeBatchOrders'\r\n```\r\n"
      },
      {
        "user": "kaiqiangh",
        "created_at": "2022-10-01T15:58:21Z",
        "body": "Hi @carlosmiei ,\r\n\r\nThanks for your reply. \r\n\r\nI found that the default method is already set to 'privatePostTradeBatchOrders' in the function 'createOrder'.\r\n`const defaultMethod = this.safeString (this.options, 'createOrder', 'privatePostTradeBatchOrders');`\r\n\r\nThen I overwrote some piece of codes in this function (around line 2154) and works for me. \r\nusing `extendedRequest = [request, params]` instead of `extendedRequest = [ this.extend (request, params) ]`\r\n"
      },
      {
        "user": "kaiqiangh",
        "created_at": "2022-10-01T17:34:20Z",
        "body": "I figure out how it works now. Thanks."
      }
    ]
  },
  {
    "number": 15129,
    "title": "market sell order causing ccxt.base.errors.ExchangeNotAvailable: ftx {\"success\":false,\"error\":\"Please try again later\"}",
    "created_at": "2022-09-28T08:40:20Z",
    "closed_at": "2022-10-12T07:36:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15129",
    "body": "\r\n\r\n\r\n- OS: Windows Server 2012 R2 Standard\r\n- Programming Language version: Python 3.8.10\r\n- CCXT version: 1.93.76\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support as ccxt\r\nexchange_id = 'ftx'\r\nexchange_class = getattr(ccxt, exchange_id)\r\nexchange = exchange_class({\r\n    'apiKey': 'XXXXXXXXXXXXXXXXXX',\r\n    'secret': 'XXXXXXXXXXXX',\r\n})\r\n\r\nexchange.headers = {\r\n    'FTX-SUBACCOUNT': 'Sub_account_name',\r\n}\r\nticker=\"BTC-PERP\"\r\norder=asyncio.get_event_loop().run_until_complete(exchange.create_market_sell_order(ticker, amount))\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"btc.py\", line 741, in <module>\r\n    abc.strat(data)\r\n  File \"btc.py\", line 571, in strat\r\n    order=asyncio.get_event_loop().run_until_complete(exchange.create_market_sell_order(ticker, amount))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\asyncio\\base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1535, in create_market_sell_order\r\n    return await self.create_order(symbol, 'market', 'sell', amount, None, params)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\ftx.py\", line 1655, in create_order\r\n    response = await getattr(self, method)(self.extend(request, params))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1125, in request\r\n    return await self.fetch2(path, api, method, params, headers, body, config, context)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1122, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 163, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\ftx.py\", line 2624, in handle_errors\r\n    self.throw_broadly_matched_exception(self.exceptions['broad'], error, feedback)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\ccxt\\async_support\\base\\exchange.py\", line 1391, in throw_broadly_matched_exception\r\n    raise broad[broadKey](message)\r\nccxt.base.errors.ExchangeNotAvailable: ftx {\"success\":false,\"error\":\"Please try again later\"}\r\n```\r\n\r\n\r\nHere I am trying to call a market sell order for BTC-PERP on FTX. Sometimes the order goes through just fine, but once in a while I have the above error. Can someone point me to what is this error caused by? \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15129/comments",
    "author": "shivdarshan1020",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-28T10:57:17Z",
        "body": "Hello @shivdarshan1020, that looks like an issue on the exchange side, they might be unavailable in periods of high load, for instance. If you get this often, I'd suggest contacting FTX directly because there's nothing CCXT can do since we're \"only\" a middleware between traders and exchanges. "
      }
    ]
  },
  {
    "number": 15097,
    "title": "ccxt.base.errors.ExchangeError: bybit markets not loaded",
    "created_at": "2022-09-24T07:14:43Z",
    "closed_at": "2022-09-30T19:22:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15097",
    "body": "Hello,\r\n\r\nHow come this doesnt work, and get error : ccxt.base.errors.ExchangeError: bybit markets not loaded\r\n\r\nimport ccxt\r\nsymbol = 'BTCUSDT'\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n\r\nbut this works:\r\n\r\nimport ccxt\r\nsymbol = 'BTCUSDT'\r\nprint(exchange.fetch_ohlcv(symbol, timeframe='1m', limit=1))\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n\r\n- OS: win10\r\n- Programming Language version: python 3.8\r\n- CCXT version: 1.93.43",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15097/comments",
    "author": "Smartromain",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-24T11:12:32Z",
        "body": "Hello @Smartromain, markets will be automatically loaded after the first call to a unified method, if you want to access it right away, you can do this:\r\n\r\n```Python\r\nsymbol = 'BTCUSDT'\r\nexchange.load_markets() # Trigger market loading\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n```\r\n"
      },
      {
        "user": "Smartromain",
        "created_at": "2022-09-24T12:00:39Z",
        "body": "Thanks, amazing. I will try it"
      },
      {
        "user": "samgermain",
        "created_at": "2022-09-30T00:16:46Z",
        "body": "> Thanks, amazing. I will try it\r\n\r\nDid this work for you?"
      },
      {
        "user": "Smartromain",
        "created_at": "2022-09-30T19:22:25Z",
        "body": "yes it worked"
      }
    ]
  },
  {
    "number": 15075,
    "title": "\"okx Exchange\"  Unordered issue",
    "created_at": "2022-09-21T03:59:28Z",
    "closed_at": "2022-09-25T13:17:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15075",
    "body": "- OS:\r\n- Programming Language version:  node (v12.0.0)\r\n- CCXT version: 1.92.95\r\n\r\nWhen my bot trades all contract volumes to the opposite position to close the position, a small amount (0.01) is re-captured to the opposite position with an unknown process after about 1 minute.\r\n\r\n```\r\n const result = await this.getExchange().createOrder(\r\n                    'BTC-USDT-SWAP', 'market', orderSide, myPosition.contracts,\r\n                    undefined, {'tdMode': 'isolated'});\r\n```\r\n\r\nIf I made a trade in my bot system, a record should be recorded in the log, but unknown trades were not left in my bot log.\r\nAlthough it is not possible to know where this unknown transaction was made, a record remains in the okx application order history.\r\n\r\nThis experience was experienced several times after I changed the exchange from Binance to okx.\r\nThis is an issue that has not been experienced on the Binas Exchange.\r\n\r\nI want you to experience similar unknown trading on okx exchange or share in alternative method.\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15075/comments",
    "author": "sanghoon-o",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-24T11:39:38Z",
        "body": "Hello @sanghoon-o, I'm not quite sure yet what's the role of CCXT on the issue you described, as you know, ccxt is only a middleware between the trader and the exchange, so if the exchange is doing something unexpected I'd suggest reaching out to them directly "
      }
    ]
  },
  {
    "number": 15050,
    "title": "Nothing printed when create order doesnt work",
    "created_at": "2022-09-18T06:11:28Z",
    "closed_at": "2022-10-22T09:15:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15050",
    "body": "Sometime, it doesnt create order on binance spot, and doesn't print the error. \r\nWhen the create order work, it print the order correctly.\r\n\r\nWhy and how to find out the error.\r\n\r\nmy code:\r\n\r\n```\r\norder = exchange.create_order(symbol, type, side, amount, price, params)\r\nprint(order)\r\n```\r\n\r\n- OS: win10\r\n- Programming Language version: python\r\n- CCXT version: 1.93.1\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15050/comments",
    "author": "Smartromain",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-09-18T07:28:18Z",
        "body": "Hi @Smartromain \r\n\r\nI can create order, would you like to paste reproducible script (remove credentials or sensitive information)?"
      },
      {
        "user": "Smartromain",
        "created_at": "2022-09-18T09:37:48Z",
        "body": "Most of the time it buy and sell without problem but I've noticed, it's when the price move up or down very fast, that it doesn't work. but how come it doesn't print anything."
      },
      {
        "user": "pcriadoperez",
        "created_at": "2022-09-26T22:06:42Z",
        "body": "Hi @Smartromain ,\r\n\r\nIt should print out an error when it fails.\r\nIf you are able to reproduce it, can you paste the verbose output?\r\nYou can turn the verbose on by `exchange.verbose = True`"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-22T09:15:37Z",
        "body": "@Smartromain it will not print anything if the createOrder leads to exception. so, you'd better use `try/catch` everywhere:\r\n```\r\ntry:\r\n    order = exchange.create_order(symbol, type, side, amount, price, params)\r\n    print(order)\r\nexcept Exception as e:\r\n    print(\"Exception triggered in create_order\", str(e))\r\n```\r\nLet us know what happens then."
      }
    ]
  },
  {
    "number": 15046,
    "title": "AuthenticationError: bitmart {\"message\":\"Header X-BM-SIGN is wrong\"",
    "created_at": "2022-09-17T22:32:19Z",
    "closed_at": "2023-01-27T18:05:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15046",
    "body": "- OS: Windows 11\r\n- Programming Language version: Javascript\r\n- CCXT version: 8.15.0\r\n\r\nCan you please tell me why I am receiving AuthenticationError: bitmart {\"message\":\"Header X-BM-KEY not found\" ?\r\n\r\nWhat needs to be changed?  I have already tried creating a new API key and using let.. var doesn't work either.  I see one issue that was opened for this same error but does not show a resolution.  If the code below works for you please let me know .  Thank you for your help!\r\n\r\n\r\nvar exchange1 = new ccxtpro.bitmart  ({\r\n    \"apiKey\": \"XXXXXXXXXXXXXXXXXXXXXXXX\",\r\n    \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXX\",\r\n   \"uid\": \"XXXXXXXXXXXXXXXXXXXXXXXX\"})\r\n\r\nvar exchange2 = new ccxtpro.phemex  ({\r\n    \"apiKey\": \"XXXXXXXXXXXXXXXXXXXXXXXX\",\r\n    \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXX\"})\r\n\r\nlet exchange2USDTAddress = '';\r\nconst USDT = \"USDT\";\r\n\r\n// get exchange2 USDT address\r\nasync function getexchange2USDTAddress(exchange2) {\r\n    exchange2USDTAddress = await exchange2.fetchDepositAddress(\"USDT\", { 'network': 'ETH' })\r\n    exchange2USDTAddress = exchange2USDTAddress['address'];\r\n    console.log(\"exchange2: \" + exchange2.name)\r\n    console.log(\"exchange2 USDT address: \" + exchange2USDTAddress)\r\n}\r\nawait getexchange2USDTAddress(exchange2)\r\n\r\n// Withdrawal USDT from exchange1 to exchange2\r\nasync function withdrawalUSDTFromexchange1Toexchange2 (exchange1, exchange2USDTAddress) {\r\n        var exchange1USDTWithdrawalToexchange2 = await exchange1.withdraw ('USDT', 10, exchange2USDTAddress, { 'chain': 'ETH' })  \r\n        console.log(\"exchange1 USDT withdrawal to exchange2: \" + exchange1USDTWithdrawalToexchange2)\r\n}\r\nawait withdrawalUSDTFromexchange1Toexchange2 (exchange1, exchange2USDTAddress)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nAuthenticationError: bitmart {\"message\":\"Header X-BM-KEY not found\",\"code\":30002,\"trace\":\"325e1c0cf9084827893224c714dfbfd7.69.16634724607790377\",\"data\":{}}\r\n    at bitmart.throwExactlyMatchedException (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:2105:19)\r\n    at bitmart.handleErrors (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\bitmart.js:3128:18)\r\n    at C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:598:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async timeout (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\functions\\time.js:181:20)\r\n    at async bitmart.fetch2 (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:1801:16)\r\n    at async bitmart.request (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:1805:16)\r\n    at async bitmart.withdraw (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\bitmart.js:2310:26)\r\n    at async withdrawalUSDTFromHomeBaseToMinExchange (file:///C:/####/####/Bitcoin%20Bot/Bot.js:404:51)\r\n    at async file:///C:/####/####/Bitcoin%20Bot/Bot.js:410:1 {\r\n  constructor: [class AuthenticationError extends ExchangeError]\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15046/comments",
    "author": "zoomzoomgithub",
    "comments": [
      {
        "user": "zoomzoomgithub",
        "created_at": "2022-09-17T23:36:25Z",
        "body": "I think there might be a problem with Bitmart"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-22T09:11:01Z",
        "body": "@zoomzoomgithub please let us know if you were able to fix the issue (and what was happening on your side? was it CCXT issue or something in your userland code?)"
      },
      {
        "user": "kroitor",
        "created_at": "2023-01-27T17:46:15Z",
        "body": "@zoomzoomgithub cannot reproduce your issue, this works for me with a correct key and the correct API key uid, try this simpler snippet first:\r\n\r\n```JavaScript\r\nconst exchange = new ccxtpro.bitmart ({\r\n    \"apiKey\": \"XXXXXXXXXXXXXXXXXXXXXXXX\",  // 40 chars\r\n    \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",  // 64 chars\r\n    \"uid\": \"XXXXXXXXXXXXXXXXXXXXXXXX\"  // the identifier of your API key you typed upon creating the key\r\n})\r\nawait exchange.loadMarkets()\r\nexchange.verbose = true\r\nconst balance = await exchange.fetchBalance ()\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2023-01-27T18:05:15Z",
        "body": "@zoomzoomgithub make sure you've configured your API Key UID correctly (you define it when you create the key) and also make sure you're using the correct key and secret, feel free to reopen this issue if the above snippet does not work."
      }
    ]
  },
  {
    "number": 15022,
    "title": "lbank2 withdraw fee",
    "created_at": "2022-09-16T07:35:58Z",
    "closed_at": "2022-10-11T11:35:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15022",
    "body": "OS: Windows 11\r\nProgramming Language version: PYTHON 3.10.5\r\nCCXT version: \"ccxt/ccxt\": \"^1.90.94\",\r\nExchange: lbank2\r\nMethod: withdraw\r\n\r\nhi . Where should I look for the withdraw fee?\r\n\r\ni use this functions . and None of them give information about this :\r\n```\r\nparams = {\r\n                    'coin': symbol\r\n                }\r\nconnection.fetch_private_transaction_fees(params)\r\nconnection.fetch_public_transaction_fees(params)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15022/comments",
    "author": "hosseinab",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-09-16T21:57:56Z",
        "body": "It doesn't look like `fetchPublicTransactionFees` will return the fee for every currency, but it looks like that is as close as you can get for retrieving withdraw fees for currencies that you don't currency own\r\n\r\n```\r\nlbank2.fetchPublicTransactionFees ()\r\n\r\n{\r\n  withdraw: {\r\n    LBK: { HT: 100, ERC20: 2000 },\r\n    USDT: { ERC20: 30, TRC20: 1, BSC: 1, HT: 1, MATIC: undefined },\r\n    BTC: { BTC: 0.0006, BTCTRON: 0.0001 },\r\n    ETH: {\r\n      ERC20: undefined,\r\n      BSC: undefined,\r\n      arbitrum: undefined,\r\n      optimism: undefined\r\n    },\r\n    ETC: { ETC: 0.01 },\r\n    VET: { VET: 100 },\r\n    ZEC: { zcash: undefined },\r\n    BCH: { BCH: 60 },\r\n    NAS: { NAS: 1.5 },\r\n    SC: { SC: 50 },\r\n    BTS: { BTS: 1 },\r\n    LTC: { ltc: undefined },\r\n    EOS: { EOS: 0.1 },\r\n    DASH: { dash: undefined },\r\n    NEO: { NEO: 0 },\r\n    SEER: { SEER: 260000 },\r\n    PAI: { PAI: 5 },\r\n    DDD: { DDD: 3500 },\r\n    DAX: { DAX: 7700 },\r\n    TRX: { TRC20: undefined },\r\n    GRAMS: { GRAMS: 0.1 },\r\n    ADA: { ada: undefined },\r\n    ...\r\n}\r\n```\r\n\r\nIf you do own the currency, it looks like `fetchPrivateTransactionFees` returns some of the withdraw fees the `fetchPublicTransactionFees` doesn't\r\n\r\n```\r\nlbank2.fetchPrivateTransactionFees ()\r\n2022-09-16T21:57:01.763Z iteration 0 passed in 261 ms\r\n\r\n{\r\n  withdraw: {\r\n    USDT: { ERC20: 30, TRC20: 1, ASA: 5, BSC: 1, HT: 1, MATIC: 1 },\r\n    ADA: { ada: 1 }\r\n  },\r\n  deposit: {},\r\n  info: {\r\n    result: 'true',\r\n    data: [\r\n      {\r\n        usableAmt: '14.36',\r\n        assetAmt: '14.36',\r\n        networkList: [\r\n          {\r\n            isDefault: false,\r\n            withdrawFeeRate: '',\r\n            name: 'erc20',\r\n            withdrawMin: '30',\r\n            minLimit: '0.0001',\r\n            minDeposit: '20',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '30',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'eth'\r\n          },\r\n          {\r\n            isDefault: false,\r\n            name: 'omni',\r\n            coin: 'usdt',\r\n            network: 'btc'\r\n          },\r\n          {\r\n            isDefault: false,\r\n            withdrawFeeRate: '',\r\n            name: 'trc20',\r\n            withdrawMin: '2',\r\n            minLimit: '0.0001',\r\n            minDeposit: '0.1',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '1',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'trx'\r\n          },\r\n          {\r\n            isDefault: false,\r\n            withdrawFeeRate: '',\r\n            name: 'asa',\r\n            withdrawMin: '1E+1',\r\n            minLimit: '0.0001',\r\n            minDeposit: '5',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '5',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'algo'\r\n          },\r\n          {\r\n            isDefault: false,\r\n            withdrawFeeRate: '',\r\n            name: 'bep20(bsc)',\r\n            withdrawMin: '10',\r\n            minLimit: '0.0001',\r\n            minDeposit: '0.0001',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '1',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'bsc'\r\n          },\r\n          {\r\n            isDefault: false,\r\n            withdrawFeeRate: '',\r\n            name: 'heco',\r\n            withdrawMin: '2',\r\n            minLimit: '0.0001',\r\n            minDeposit: '0.1',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '1',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'heco'\r\n          },\r\n          {\r\n            isDefault: true,\r\n            withdrawFeeRate: '',\r\n            name: 'matic',\r\n            withdrawMin: '1',\r\n            minLimit: '0.0001',\r\n            minDeposit: '1',\r\n            feeAssetCode: 'usdt',\r\n            withdrawFee: '1',\r\n            type: '1',\r\n            coin: 'usdt',\r\n            network: 'matic'\r\n          }\r\n        ],\r\n        freezeAmt: '0',\r\n        coin: 'usdt'\r\n      },\r\n      {\r\n        usableAmt: '2.65064888',\r\n        assetAmt: '2.65064888',\r\n        networkList: [\r\n          {\r\n            isDefault: true,\r\n            withdrawFeeRate: '',\r\n            name: 'ada',\r\n            withdrawMin: '5',\r\n            minLimit: '0.0001',\r\n            minDeposit: '2',\r\n            feeAssetCode: 'ada',\r\n            withdrawFee: '1',\r\n            type: '1',\r\n            coin: 'ada',\r\n            network: 'ada'\r\n          }\r\n        ],\r\n        freezeAmt: '0',\r\n        coin: 'ada'\r\n      }\r\n    ],\r\n    code: '0'\r\n  }\r\n}\r\n2022-09-16T21:57:01.763Z iteration 1 passed in 261 ms\r\n```"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-09-17T07:51:59Z",
        "body": "@samgermain \r\nthank you for answer\r\n\r\nfor some currencies fee not exist in any functions . e.g : DOGE\r\n\r\noutput for doge : \r\n```\r\n{'amountScale': '4', 'chain': 'dogecoin', 'assetCode': 'doge', 'transferAmtScale': '4', 'canWithDraw': True, 'type': '1'},\r\n```"
      },
      {
        "user": "samgermain",
        "created_at": "2022-09-17T22:41:03Z",
        "body": "> \r\n\r\nThat's right, there's not a lot we can do about this because lbank doesn't provide them"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-09-18T05:59:01Z",
        "body": "@samgermain \r\nSo the withdraw function can't be used?"
      },
      {
        "user": "samgermain",
        "created_at": "2022-09-19T03:01:20Z",
        "body": "> @samgermain So the withdraw function can't be used?\r\n\r\nThat is a different question. You don't need to know the withdraw fee to use the withdraw function"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-09-19T07:09:41Z",
        "body": "@samgermain \r\nin withdraw function in lbank writed this code :\r\n```\r\nif fee is None:\r\n    raise ArgumentsRequired(self.id + ' withdraw() requires a fee argument to be supplied in params, the relevant coin network fee can be found by calling fetchTransactionFees(), note: if no network param is supplied then the default network will be used, self can also be found in fetchTransactionFees()')\r\n ```\r\n"
      },
      {
        "user": "samgermain",
        "created_at": "2022-09-30T23:57:52Z",
        "body": "> @samgermain thank you for answer\r\n> \r\n> for some currencies fee not exist in any functions . e.g : DOGE output for doge :\r\n> \r\n> ```\r\n> {'amountScale': '4', 'chain': 'dogecoin', 'assetCode': 'doge', 'transferAmtScale': '4', 'canWithDraw': True, 'type': '1'},\r\n> ```\r\n\r\nSo for `DOGE`, the method `fetch_private_transaction_fees` returns no withdraw fee? Can you copy and paste the response you get for that method (you'll need to have some `DOGE` in your wallet)\r\n\r\n-------------------\r\n\r\nIf that's the case, then it sounds like the withdraw function cannot be used to withdraw `DOGE` from `lbank`, unless there's some other implicit method that we can use to obtain the withdraw fee. We could probably open an issue with lbank if this is the case"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-10-02T08:14:57Z",
        "body": "hi @samgermain \r\nthank you.\r\nmy code :\r\n```\r\nparams = {'coin': 'DOGE'}\r\nprint(connection.fetch_private_transaction_fees(params))\r\nprint(connection.fetch_public_transaction_fees(params))\r\n\r\n```\r\n\r\noutput for fetch_private_transaction_fees: \r\n```\r\n{'withdraw': {'USDT': {'ERC20': 30.0, 'TRC20': 1.0, 'ASA': 5.0, 'BSC': 1.0, 'HT': 1.0, 'MATIC': 1.0}, 'TRX': {'TRC20': 1.0}}, 'deposit': {}, 'info': {'result': 'true', 'data': [{'usableAmt': '0.00006224', 'assetAmt': '0.00006224', 'networkList': [{'isDefault': False, 'withdrawFeeRate': '', 'name': 'erc20', 'withdrawMin': '30', 'minLimit': '0.0001', 'minDeposit': '20', 'feeAssetCode': 'usdt', 'withdrawFee': '30', 'type': '1', 'coin': 'usdt', 'network': 'eth'}, {'isDefault': False, 'name': 'omni', 'coin': 'usdt', 'network': 'btc'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'trc20', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '0.1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'trx'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'asa', 'withdrawMin': '1E+1', 'minLimit': '0.0001', 'minDeposit': '5', 'feeAssetCode': 'usdt', 'withdrawFee': '5', 'type': '1', 'coin': 'usdt', 'network': 'algo'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'bep20(bsc)', 'withdrawMin': '10', 'minLimit': '0.0001', 'minDeposit': '0.0001', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'bsc'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'heco', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '0.1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'heco'}, {'isDefault': True, 'withdrawFeeRate': '', 'name': 'matic', 'withdrawMin': '1', 'minLimit': '0.0001', 'minDeposit': '1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'matic'}], 'freezeAmt': '0', 'coin': 'usdt'}, {'usableAmt': '0.00007175', 'assetAmt': '0.00007175', 'networkList': [{'isDefault': True, 'withdrawFeeRate': '', 'name': 'trc20', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '1', 'feeAssetCode': 'trx', 'withdrawFee': '1', 'type': '1', 'coin': 'trx', 'network': 'trx'}], 'freezeAmt': '0', 'coin': 'trx'}], 'code': '0'}}\r\n\r\n```\r\noutput for fetch_public_transaction_fees: \r\n```\r\n{'withdraw': {}, 'deposit': {}, 'info': {'result': 'true', 'data': [{'amountScale': '4', 'chain': 'bep20(bsc)', 'assetCode': 'doge', 'transferAmtScale': '4', 'canWithDraw': True, 'type': '1'}, {'amountScale': '4', 'chain': 'dogecoin', 'assetCode': 'doge', 'transferAmtScale': '4', 'canWithDraw': True, 'type': '1'}], 'error_code': '0', 'ts': '1664698478236'}}\r\n```"
      },
      {
        "user": "samgermain",
        "created_at": "2022-10-03T05:27:08Z",
        "body": "could you also call also fetch all the balances that you have in your wallet?"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-10-03T16:39:54Z",
        "body": "@samgermain \r\nhi .\r\n```\r\n{'info': {'result': 'true', 'data': [{'usableAmt': '48.35991436', 'assetAmt': '48.35991436', 'networkList': [{'isDefault': True, 'withdrawFeeRate': '', 'name': 'bep20(bsc)', 'withdrawMin': '30', 'minLimit': '0.0001', 'minDeposit': '0.0001', 'feeAssetCode': 'doge', 'withdrawFee': '30', 'type': '1', 'coin': 'doge', 'network': 'bsc'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'dogecoin', 'withdrawMin': '10', 'minLimit': '0.0001', 'minDeposit': '10', 'feeAssetCode': 'doge', 'withdrawFee': '10', 'type': '1', 'coin': 'doge', 'network': 'dogecoin'}], 'freezeAmt': '0', 'coin': 'doge'}, {'usableAmt': '0.00000982', 'assetAmt': '0.00000982', 'networkList': [{'isDefault': False, 'withdrawFeeRate': '', 'name': 'erc20', 'withdrawMin': '30', 'minLimit': '0.0001', 'minDeposit': '20', 'feeAssetCode': 'usdt', 'withdrawFee': '30', 'type': '1', 'coin': 'usdt', 'network': 'eth'}, {'isDefault': False, 'name': 'omni', 'coin': 'usdt', 'network': 'btc'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'trc20', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '0.1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'trx'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'asa', 'withdrawMin': '1E+1', 'minLimit': '0.0001', 'minDeposit': '5', 'feeAssetCode': 'usdt', 'withdrawFee': '5', 'type': '1', 'coin': 'usdt', 'network': 'algo'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'bep20(bsc)', 'withdrawMin': '10', 'minLimit': '0.0001', 'minDeposit': '0.0001', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'bsc'}, {'isDefault': False, 'withdrawFeeRate': '', 'name': 'heco', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '0.1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'heco'}, {'isDefault': True, 'withdrawFeeRate': '', 'name': 'matic', 'withdrawMin': '1', 'minLimit': '0.0001', 'minDeposit': '1', 'feeAssetCode': 'usdt', 'withdrawFee': '1', 'type': '1', 'coin': 'usdt', 'network': 'matic'}], 'freezeAmt': '0', 'coin': 'usdt'}, {'usableAmt': '0.00007175', 'assetAmt': '0.00007175', 'networkList': [{'isDefault': True, 'withdrawFeeRate': '', 'name': 'trc20', 'withdrawMin': '2', 'minLimit': '0.0001', 'minDeposit': '1', 'feeAssetCode': 'trx', 'withdrawFee': '1', 'type': '1', 'coin': 'trx', 'network': 'trx'}], 'freezeAmt': '0', 'coin': 'trx'}], 'code': '0'}, 'timestamp': None, 'datetime': None, **'DOGE': {'free': 48.35991436,** 'used': 0.0, 'total': 48.35991436}, 'USDT': {'free': 9.82e-06, 'used': 0.0, 'total': 9.82e-06}, 'TRX': {'free': 7.175e-05, 'used': 0.0, 'total': 7.175e-05}, 'free': {'DOGE': 48.35991436, 'USDT': 9.82e-06, 'TRX': 7.175e-05}, 'used': {'DOGE': 0.0, 'USDT': 0.0, 'TRX': 0.0}, 'total': {'DOGE': 48.35991436, 'USDT': 9.82e-06, 'TRX': 7.175e-05}}\r\n\r\n```"
      }
    ]
  },
  {
    "number": 15004,
    "title": "Question - Is USDT TetherUS-ERC20 the same USDT used by the BTC/USDT symbol?",
    "created_at": "2022-09-14T23:10:18Z",
    "closed_at": "2022-09-15T21:52:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15004",
    "body": "\r\n- OS: Windows 11\r\n- Programming Language version: Javascript\r\n- CCXT version: 8.15.0\r\n\r\nHi,\r\n\r\nCan you please tell me if USDT TetherUS-ERC20 is the same USDT used by the BTC/USDT symbol?  I couldn't find an answer in the closed issues.\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15004/comments",
    "author": "zoomzoomgithub",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-09-15T02:59:57Z",
        "body": "Hi @zoomzoomgithub \r\n\r\nYes, I think so. Also, TetherUSDT had deployed on different blockchain (Tron, BSC or AVAX)."
      },
      {
        "user": "zoomzoomgithub",
        "created_at": "2022-09-15T21:52:20Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 14998,
    "title": "zb.fetchOpenOrders: OrderNotFound: zb {\"code\":3001,\"message\":\"挂单没有找到或已完成\"}",
    "created_at": "2022-09-14T18:16:42Z",
    "closed_at": "2023-11-02T20:18:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14998",
    "body": "\r\n- OS: Windows 11\r\n- Programming Language version: Javascript\r\n- CCXT version: 8.15.0\r\n\r\nHello,\r\n\r\nExchange zb is returning OrderNotFound when using zb.fetchOpenOrders.  This is different from all the other unified exchanges that are returning [].\r\n\r\n\r\n\r\nCODE:\r\n\r\nconst ccxtpro = require ('ccxt.pro');\r\n\r\nvar zb = new ccxtpro.zb  ({\r\n\"apiKey\": \"####\",\r\n\"secret\": \"####\"})\r\n\r\nvar zbOpenOrders = await zb.fetchOpenOrders  (\"BTC/USDT\")\r\nvar t10 = zbOpenOrders.toString();\r\nif (t10 !== \"\") { console.log(\"t10\") }\r\n\r\n\r\n\r\nERROR:\r\n\r\nC:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:2105\r\n            throw new exact[string] (message);\r\n                  ^\r\n\r\nOrderNotFound: zb {\"code\":3001,\"message\":\"挂单没有找到或已完成\"}\r\n    at zb.throwExactlyMatchedException (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:2105:19)\r\n    at zb.handleErrors (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\zb.js:4357:22)\r\n    at C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:598:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async timeout (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\functions\\time.js:181:20)\r\n    at async zb.fetch2 (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:1801:16)\r\n    at async zb.request (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\base\\Exchange.js:1805:16)\r\n    at async zb.fetchOpenOrders (C:\\Users\\####\\####\\node_modules\\ccxt\\js\\zb.js:2677:26)\r\n    at async file:///C:/Users\\####\\####\\Bot.js:65:20 {\r\n  constructor: [class OrderNotFound extends InvalidOrder]",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14998/comments",
    "author": "zoomzoomgithub",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-15T10:49:29Z",
        "body": "Hello @zoomzoomgithub , it depends on how the exchange handles it, come just return an empty array but consider it as a valid HTTP response, others like ZB just throw an exception"
      },
      {
        "user": "zoomzoomgithub",
        "created_at": "2022-09-17T18:36:53Z",
        "body": "> just return an empty array but consider it as a valid HTTP response, others like ZB just throw an exception\r\n\r\nHow do I handle the exception that is thrown?  my try catch is not working.\r\n\r\n\tif (zbOpenOrder !== \"\") {\r\n        openOrder = 'true';\r\n        if (zb.has['fetchOrder']) {\r\n            try {\r\n                order = await zb.fetchOpenOrders (\"BTC/USDT\")\r\n                buyOrderId = '';\r\n                buyOrderStatus = '';\r\n                console.log(order)\r\n            } catch (e) {console.log (e)}\r\n        }\r\n    }\r\n"
      },
      {
        "user": "frosty00",
        "created_at": "2023-11-02T20:18:22Z",
        "body": "zb has since been delisted"
      }
    ]
  },
  {
    "number": 14965,
    "title": "loadMarkets for multiple users?",
    "created_at": "2022-09-12T15:46:55Z",
    "closed_at": "2022-09-19T13:31:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14965",
    "body": "I have a use case where I will be instantiating an exchange for many users. Will I need to perform loadMarkets() for each user? Or can I set markets manually or similar?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14965/comments",
    "author": "emorling",
    "comments": [
      {
        "user": "emorling",
        "created_at": "2022-09-12T17:41:24Z",
        "body": "Seems like I can do this. Will test it out:\r\n\r\n\r\n```\r\n     if (!cctxByBitCache) {\r\n        await bybit.loadMarkets();\r\n        cctxByBitCache = {\r\n          markets: bybit.markets,\r\n          currencies: bybit.currencies,\r\n          markets_by_id: bybit.markets_by_id,\r\n        };\r\n      } else {\r\n        bybit.markets = cctxByBitCache.markts;\r\n        bybit.markets_by_id = cctxByBitCache.markets_by_id;\r\n        bybit.currencies = cctxByBitCache.currencies;\r\n      }\r\n```\r\n"
      },
      {
        "user": "pcriadoperez",
        "created_at": "2022-09-19T13:31:59Z",
        "body": "Hi @emorling,\r\nI'll close this issue because it seems to be solved. But feel free to reopen or post another issue if you have any other questions.\r\n\r\n"
      }
    ]
  },
  {
    "number": 14954,
    "title": "Can't get only USDT balance with bitget",
    "created_at": "2022-09-11T18:49:37Z",
    "closed_at": "2022-09-14T02:26:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14954",
    "body": "Hey , i'm trying to see my usdt balance using fetchbalance , passing USDT as param but i'm getting every coins balance (which is 0.0 by default) on spot. What should i do to get only USDT ? \r\n\r\n\r\n- OS: MacOS monterey\r\n- Programming Language version: node v18.7.0\r\n- CCXT version: 1.61.24\r\n\r\n``` javascript\r\nconst bitget = new ccxt.bitget({\r\n    apiKey : process.env.tn_bitget_key, \r\n    secret : process.env.tn_bitget_secret,\r\n    password : process.env.tn_bitget_password\r\n    //{defaultType :'swap' }\r\n})\r\nasync function bitgetTestfetchBalance () {\r\n    let balance = await bitget.fetchBalance('USDT')\r\n    console.log(balance)\r\n}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14954/comments",
    "author": "karahancodes",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-12T09:04:31Z",
        "body": "Hello @karahancodes, although you can't do that filtering directly, `fetchBalace` returns a dictionary index by currency, so you can just do this:\r\n\r\n```Javascript\r\n    let balance = await bitget.fetchBalance('USDT')\r\n    console.log(balance['USDT'])\r\n```\r\n"
      }
    ]
  },
  {
    "number": 14890,
    "title": "bibox fetch_withdrawals has error",
    "created_at": "2022-09-06T16:46:01Z",
    "closed_at": "2022-09-16T22:03:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14890",
    "body": "hi\r\nsince = None\r\nlimit = 200\r\nend_time = connection.milliseconds()\r\nparams = {\r\n     'end_time': int(end_time / 1000),\r\n}\r\nwithdrawals = connection.fetch_withdrawals(\"TRX\", since, limit, params)\r\n\r\nerror :\r\nbibox {\"error\":{\"code\":\"3000\",\"msg\":\"请求参数错误\"},\"cmd\":\"transfer/transferInList\"}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14890/comments",
    "author": "hosseinab",
    "comments": [
      {
        "user": "kubeat",
        "created_at": "2022-09-07T09:55:41Z",
        "body": "i try to debug your code.the param 'limit' too big，you can try change 'limit ' to 100 。bibox Api have update to v3 ,v4,the ccxt is v1"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-09-08T14:39:29Z",
        "body": "@kubeat \r\nThanks for your guidance . My problem is solved. Is there a library for version 3?"
      }
    ]
  },
  {
    "number": 14879,
    "title": "Avoid partial execution of a sell order.",
    "created_at": "2022-09-05T22:40:40Z",
    "closed_at": "2022-10-22T07:38:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14879",
    "body": "How to avoid partial execution for a sell market order for FTX exchange ? I would like to cancel the order if the order amount is not enough for selling.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14879/comments",
    "author": "YuriyTigiev",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-09-06T05:11:40Z",
        "body": "Hi @YuriyTigiev \r\n\r\nI think you're asking for Fill-or-Kill order (FOK) order, unfortunately I didn't see this kind of order in FTX."
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-09-06T17:06:14Z",
        "body": "Any idea for  a workaround ?"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-22T07:38:06Z",
        "body": "> Any idea for a workaround ?\r\n\r\nIf exchange doesn't support it natively (which is the only guaranteed way) then there is no workaround we might offer. all what I can say is to check orderbook before submitting the order, and if you see your amount is fillable without your price diapason, then you should submit `ioc` (immediate-or-cancel) order. however, it still doesn't guarantee that your full amount will be executed, because in the second before your order reaches the exchange, the orderbook might have changed more than you expect. What I can advise is to reach out to FTX api support and bother them to add the needed functionality. maybe they listen to customers ever (low chances from my experience, but try)."
      }
    ]
  },
  {
    "number": 14877,
    "title": "how to fetch future order book in binance",
    "created_at": "2022-09-05T08:17:08Z",
    "closed_at": "2022-09-06T10:05:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14877",
    "body": "- OS: macOS\r\n- Programming Language version: 3.10\r\n- CCXT version: 1.92.52\r\n\r\nfor the spot, i can fetch the price with this\r\n\r\n```\r\nspot_price = exchange.fetch_order_book(symbol='MATICUSDT')\r\nprint(spot_price)\r\n\r\n```\r\nbut for the future, it failed                                                                                                                                               \r\n```\r\nfuture_price = exchange.fetch_order_book(symbol='MATICUSDT_PERP') \r\nprint(future_price)\r\n```\r\nand here is the error info:\r\n`ccxt.base.errors.BadSymbol: binance does not have market symbol MATICUSDT_PERP`\r\n\r\nis my symbol structure getting wrong?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14877/comments",
    "author": "pppppico",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-09-05T08:50:54Z",
        "body": "Hi @pppppico \r\n\r\nIn binance, you can fetch order book from different market by setting `type`, eg:\r\n\r\n```\r\nexchange.fetch_order_book('MATIC/USDT', 100, {\r\n  'type': 'future',\r\n}) \r\n```"
      },
      {
        "user": "pppppico",
        "created_at": "2022-09-05T09:07:31Z",
        "body": "@sc0Vu sorry,  but there was a red wavy line under \r\n` 100, { 'type': 'future'}`\r\n"
      },
      {
        "user": "sc0Vu",
        "created_at": "2022-09-06T05:20:19Z",
        "body": "@pppppico I updated the script, lmn if you have other question."
      },
      {
        "user": "pppppico",
        "created_at": "2022-09-06T10:05:46Z",
        "body": "@sc0Vu  i get the information with \r\n`exchange.dapiPublicGetDepth(params={'symbol': 'MATICUSD_PERP', 'LIMIT': 10})`\r\nbut still thx for ur help :)"
      }
    ]
  },
  {
    "number": 14869,
    "title": "Monitor remaining rate of rate limit",
    "created_at": "2022-09-04T17:31:07Z",
    "closed_at": "2024-11-16T13:00:34Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14869",
    "body": "from phemex support:\r\n\r\nas I said last time, you may add the rate-limit header including contract and other group, and monitor the remaining rate before getting 429, then you may find where it goes unexpected\r\n----\r\n\r\nHow do you monitor the remaining rate with ccxt? and will it work with many or all exchanges? thanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14869/comments",
    "author": "adamrg73",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2024-11-16T13:00:34Z",
        "body": "Late reply, but a note for future readers - you can make use of exchange prop: `exchange.throttler` and see it's config (remaining and maximum capacities). that is what is available at this moment.\r\n\r\nlet us know if you have further issues"
      }
    ]
  },
  {
    "number": 14866,
    "title": "any limitation in Bitget fetch_ohlcv ?",
    "created_at": "2022-09-03T16:26:26Z",
    "closed_at": "2022-10-22T07:27:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14866",
    "body": "Bitget : I can't fetch data with more than 100 candles, whatever the limit is. fetch_ohlcv returns size 100 max.\r\nIs there a way to get rid of that ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14866/comments",
    "author": "gatelli",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-03T16:50:22Z",
        "body": "Hello @gatelli, unfortunately that is a limitation on the exchange side, so there is nothing that CCXT can do about it"
      }
    ]
  },
  {
    "number": 14824,
    "title": "It is possible to serialise FTX or Binance object to Json ?",
    "created_at": "2022-08-30T02:01:08Z",
    "closed_at": "2023-08-11T23:27:12Z",
    "labels": [
      "question",
      "important"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14824",
    "body": "- OS: MacOS\r\n- Programming Language version: Python 3.9\r\n- CCXT version: 1.92.87\r\n\r\n\r\nI'm asking this question because I have a massive list of Customers with their respective credentials. I'm trying to make the application more robust by saving each Customer on Redis. But I'm having problem saving the FTX or Binance objects on Redis.\r\n\r\nThis is my object:\r\n```\r\nfrom redis_om import JsonModel\r\nfrom ccxt.ftx import ftx\r\nclass Exchange(JsonModel):\r\n    exchange: ftx\r\n```\r\n\r\nThis is how I'm building each connection:\r\n\r\n```\r\nimport ccxt\r\n\r\ndef exchange_connection(api_key, api_secret_key, exchange, sub_account):\r\n    if exchange == \"FTX\":\r\n        client = ccxt.ftx({\r\n            'apiKey': api_key,\r\n            'secret': api_secret_key,\r\n            'headers': {\r\n                'FTX-SUBACCOUNT': sub_account,\r\n            }\r\n        })\r\n        \r\n    return client\r\n```\r\n\r\nAnd this is the for cycle where I'm saving each customer on Redis:\r\n\r\n```\r\n\r\nfor user in tqdm(users['users']):\r\n        exchange_object = exchange_connection(user['api_key'], user['api_secret_key'], user['exchange'], user['sub_account'])\r\n        exchange = Exchange(exchange=exchange_object)\r\n        exchange.save()\r\n\r\n```\r\n\r\nHowever, it is giving me the error -> TypeError: Object of type 'ftx' is not JSON serializable\r\n\r\nIs it possible to serialize the FTX object somehow to JSON?\r\n\r\nThank you.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14824/comments",
    "author": "filipegalo",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-08-30T08:55:09Z",
        "body": "Hi @filipegalo \r\n\r\nThere is `describe()` function to get basic configuration of the exchange (but without user configuration), eg `exchange.describe()`. To encode user configuration (apiKey or some other credentials), I think you can encode as json and save to Redis in your code and initiate next time."
      },
      {
        "user": "samgermain",
        "created_at": "2022-08-31T02:25:42Z",
        "body": "@filipegalo \r\n\r\nDoes this work?\r\n\r\n```\r\nimport json\r\n\r\n...\r\n\r\njson.dumps(exchange_object.__dict__)\r\n```"
      },
      {
        "user": "filipegalo",
        "created_at": "2022-09-01T11:00:05Z",
        "body": "\r\n\r\n> @filipegalo\r\n> \r\n> Does this work?\r\n> \r\n> ```\r\n> import json\r\n> \r\n> ...\r\n> \r\n> json.dumps(exchange_object.__dict__)\r\n> ```\r\n\r\nException has occurred: TypeError\r\nObject of type type is not JSON serializable\r\n\r\nThat also doesn't work.\r\n\r\n\r\n> Hi @filipegalo\r\n> \r\n> There is `describe()` function to get basic configuration of the exchange (but without user configuration), eg `exchange.describe()`. To encode user configuration (apiKey or some other credentials), I think you can encode as json and save to Redis in your code and initiate next time.\r\n\r\n\r\nThis can be a good approach, whatever I'm trying to achieve something different. \r\nImagine that I have 1000 Users with their respective API_KEY and API_SECRET_KEY, it takes a lot of time to build the exchange object with user configurations for all those users. So I was trying to use Redis to save these configurations in the cache. So, when the time came to for example get all their balances it will be faster.\r\n\r\nThanks @samgermain & @sc0Vu  for your responses!"
      },
      {
        "user": "samgermain",
        "created_at": "2022-09-02T02:29:56Z",
        "body": "> > @filipegalo\r\n> > Does this work?\r\n> > ```\r\n> > import json\r\n> > \r\n> > ...\r\n> > \r\n> > json.dumps(exchange_object.__dict__)\r\n> > ```\r\n> \r\n> Exception has occurred: TypeError Object of type type is not JSON serializable\r\n> \r\n> That also doesn't work.\r\n> \r\n> > Hi @filipegalo\r\n> > There is `describe()` function to get basic configuration of the exchange (but without user configuration), eg `exchange.describe()`. To encode user configuration (apiKey or some other credentials), I think you can encode as json and save to Redis in your code and initiate next time.\r\n> \r\n> This can be a good approach, whatever I'm trying to achieve something different. Imagine that I have 1000 Users with their respective API_KEY and API_SECRET_KEY, it takes a lot of time to build the exchange object with user configurations for all those users. So I was trying to use Redis to save these configurations in the cache. So, when the time came to for example get all their balances it will be faster.\r\n> \r\n> Thanks @samgermain & @sc0Vu for your responses!\r\n\r\nCould you just instantiate an exchange once, and then overwrite `options['apiKey']` and `options['secret']` for each user?\r\n\r\n```\r\nexchange['options']['apiKey'] = user['apiKey']\r\nexchange['options']['apiKey'] = user['secret']\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-22T07:06:49Z",
        "body": "@filipegalo try it without `['options']` as Sam suggested and let us know:\r\n```\r\nexchange['apiKey'] = user['apiKey']\r\nexchange['apiKey'] = user['secret']\r\n```"
      },
      {
        "user": "samgermain",
        "created_at": "2023-08-11T23:27:12Z",
        "body": "@filipegalo It looks like this issue has gone stale, I'm going to close it, but feel free to reopen it if you have any more questions"
      }
    ]
  },
  {
    "number": 14813,
    "title": "How do i make the stop loss in the params triggered by last price and not by mark price? Phemex",
    "created_at": "2022-08-28T20:04:05Z",
    "closed_at": "2024-11-14T12:45:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14813",
    "body": null,
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14813/comments",
    "author": "CloudTrauma",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-29T08:40:03Z",
        "body": "Hello @CloudTrauma, I think you can do something like this:\r\n\r\n```Python\r\nsymbol = 'LTC/USDT'\r\ntype = 'market'\r\nside = 'buy'\r\namount = 0.5\r\n\r\nparams = {\r\n    'stopPrice': 50,\r\n    'triggerType': 'ByLastPrice'\r\n}\r\n\r\nstop_market = exchange.create_order(symbol, type, side, amount, None, params)\r\nprint(stop_market)\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2024-11-14T12:45:15Z",
        "body": "Issue can be closed. let us know if anyone experiences similar issues."
      }
    ]
  },
  {
    "number": 14754,
    "title": "‎",
    "created_at": "2022-08-20T14:08:16Z",
    "closed_at": "2022-08-20T23:43:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14754",
    "body": null,
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14754/comments",
    "author": "wwalterr",
    "comments": [
      {
        "user": "pier0074",
        "created_at": "2022-08-20T21:00:13Z",
        "body": "In general : \r\nGross profit = Revenue - Cost\r\nNet Profit = Gross profit - Fees\r\n\r\nIn this case : \r\nRevenue = Sell cost = 8.44412 which is also equal to Filled * Price = 0.0004 * 21110.3 = 8.44412\r\nCost = Buy cost = 8.43596 which is also equal to Filled * Price = 0.0004 * 21089.9 = 8.43596\r\nGross profit  = 8.44412 - 8.43596 = 0.00816\r\nFees = Sell Fees + Buy Fees = Sell fee.cost + Buy fee.cost = 0.00844412 + 0.00843596 = 0.01688008\r\nNet Profit = 0.00816 -  0.01688008 = -0.00872008\r\n\r\nIn conclusion, excluding the fees you are profitable on this trade, but all together, you are actually losing money.\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-08-20T21:04:14Z",
        "body": "Hello @pier0074 \r\n\r\nI think your math is on point. As a small optimization, I would suggest using the cost field to do it so that you don't need to calculate it manually "
      },
      {
        "user": "pier0074",
        "created_at": "2022-08-20T21:17:51Z",
        "body": "Hello @carlosmiei \r\n\r\nThis is what I firstly used.\r\nWhen I mentioned \"which is also equal to\", I was just pointing out where the cost field comes from."
      }
    ]
  },
  {
    "number": 14686,
    "title": "CCXT data for backtrader but there seems to be a problem",
    "created_at": "2022-08-15T15:54:26Z",
    "closed_at": "2022-10-21T09:28:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14686",
    "body": "# How to get data in a format that can be used in backtrader not in milliseconds?\r\n\r\nThe data is coming in as unix timestamp in milliseconds. \r\nSo i am using #dtformat=lambda x: datetime.datetime.utcfromtimestamp(int(x) / 1000).\r\n```\r\nimport backtrader as bt\r\nimport datetime\r\n\r\ncerebro = bt.Cerebro()\r\ndata = bt.feeds.GenericCSVData(dataname=\"ftx1h.csv\", dtformat=lambda x: datetime.datetime.utcfromtimestamp(int(x) / 1000))\r\ncerebro.adddata(data)\r\ncerebro.run()\r\ncerebro.plot()\r\n```\r\n\r\n# There is an #IndexError: list index out of range problem.\r\nTraceback (most recent call last):\r\n  File \"/Users/talha/VScode/Backtest/Strategy5.py\", line 7, in <module>\r\n    cerebro.run()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/cerebro.py\", line 1127, in run\r\n    runstrat = self.runstrategies(iterstrat)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/cerebro.py\", line 1212, in runstrategies\r\n    data.preload()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/feed.py\", line 688, in preload\r\n    while self.load():\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/feed.py\", line 479, in load\r\n    _loadret = self._load()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/feed.py\", line 710, in _load\r\n    return self._loadline(linetokens)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/backtrader/feeds/csvgeneric.py\", line 148, in _loadline\r\n    csvfield = linetokens[csvidx]\r\nIndexError: list index out of range\r\n\r\n# The Data\r\n1660435200000,24454.0,24528.0,24355.0,24527.0,67147303.3027\r\n1660438800000,24527.0,24682.0,24422.0,24598.0,116587503.2913\r\n1660442400000,24598.0,24632.0,24514.0,24608.0,34892443.4722\r\n1660446000000,24608.0,24635.0,24553.0,24584.0,22989205.8046\r\n1660449600000,24584.0,24652.0,24506.0,24581.0,44973942.2299\r\n1660453200000,24581.0,24636.0,24540.0,24603.0,47360860.8874\r\n1660456800000,24613.0,24695.0,24603.0,24689.0,32459071.9839\r\n1660460400000,24689.0,25065.0,24682.0,24900.0,301312472.1925\r\n1660464000000,24900.0,24902.0,24608.0,24673.0,170952143.2637\r\n1660467600000,24672.0,24790.0,24643.0,24758.0,70969336.6324\r\n1660471200000,24758.0,24759.0,24618.0,24627.0,64221863.5382\r\n1660474800000,24627.0,24682.0,24525.0,24569.0,76070172.2453\r\n1660478400000,24569.0,24593.0,24475.0,24535.0,59713290.9481\r\n1660482000000,24535.0,24538.0,24406.0,24481.0,89923365.2962\r\n1660485600000,24481.0,24534.0,24466.0,24518.0,49835330.6131\r\n1660489200000,24518.0,24549.0,24468.0,24528.0,46556537.1289\r\n1660492800000,24528.0,24560.0,24313.0,24315.0,108465182.8929\r\n1660496400000,24315.0,24332.0,24178.0,24232.0,176757581.0963\r\n1660500000000,24232.0,24300.0,24155.0,24282.0,68322221.4964\r\n1660503600000,24281.0,24327.0,24244.0,24289.0,34982570.2998\r\n1660507200000,24289.0,24352.0,24255.0,24315.0,40799224.029\r\n1660510800000,24315.0,24448.0,24278.0,24349.0,94709768.3767\r\n1660514400000,24349.0,24372.0,24182.0,24265.0,75704499.2116\r\n1660518000000,24265.0,24358.0,24240.0,24310.0,46011851.1185\r\n1660521600000,24310.0,24418.0,24171.0,24406.0,90810435.293\r\n1660525200000,24406.0,24665.0,24340.0,24655.0,233812433.3012\r\n1660528800000,24654.0,24950.0,24653.0,24937.0,223521446.7061\r\n1660532400000,24937.0,25232.0,24813.0,24883.0,373106086.273\r\n1660536000000,24883.0,24900.0,24696.0,24863.0,172798798.982\r\n1660539600000,24863.0,24998.0,24762.0,24835.0,110243603.1486\r\n1660543200000,24835.0,24841.0,24088.0,24129.0,338761936.3576\r\n1660546800000,24130.0,24218.0,23950.0,24026.0,287354302.5387\r\n1660550400000,24025.0,24089.0,23873.0,24044.0,151992609.2842\r\n1660554000000,24044.0,24210.0,23992.0,24176.0,132115004.5245\r\n1660557600000,24180.0,24300.0,24133.0,24275.0,88762538.3025\r\n1660561200000,24275.0,24316.0,24009.0,24057.0,116716391.6228\r\n1660564800000,24057.0,24197.0,23891.0,23966.0,135401782.9878\r\n\r\n# How I get the Data\r\n```\r\nimport os\r\nimport sys\r\nimport csv\r\n\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt  # noqa: E402\r\n\r\n\r\n\r\ndef retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, since, limit):\r\n    num_retries = 0\r\n    try:\r\n        num_retries += 1\r\n        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since, limit)\r\n        # print('Fetched', len(ohlcv), symbol, 'candles from', exchange.iso8601 (ohlcv[0][0]), 'to', exchange.iso8601 (ohlcv[-1][0]))\r\n        return ohlcv\r\n    except Exception:\r\n        if num_retries > max_retries:\r\n            raise  # Exception('Failed to fetch', timeframe, symbol, 'OHLCV in', max_retries, 'attempts')\r\n\r\n\r\ndef scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit):\r\n    timeframe_duration_in_seconds = exchange.parse_timeframe(timeframe)\r\n    timeframe_duration_in_ms = timeframe_duration_in_seconds * 1000\r\n    timedelta = limit * timeframe_duration_in_ms\r\n    now = exchange.milliseconds()\r\n    all_ohlcv = []\r\n    fetch_since = since\r\n    while fetch_since < now:\r\n        ohlcv = retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, fetch_since, limit)\r\n        fetch_since = (ohlcv[-1][0] + 1) if len(ohlcv) else (fetch_since + timedelta)\r\n        all_ohlcv = all_ohlcv + ohlcv\r\n        if len(all_ohlcv):\r\n            print(len(all_ohlcv), 'candles in total from', exchange.iso8601(all_ohlcv[0][0]), 'to', exchange.iso8601(all_ohlcv[-1][0]))\r\n        else:\r\n            print(len(all_ohlcv), 'candles in total from', exchange.iso8601(fetch_since))\r\n    return exchange.filter_by_since_limit(all_ohlcv, since, None, key=0)\r\n\r\n\r\ndef write_to_csv(filename, data):\r\n    with open(filename, mode='w') as output_file:\r\n        csv_writer = csv.writer(output_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\r\n        csv_writer.writerows(data)\r\n\r\n\r\ndef scrape_candles_to_csv(filename, exchange_id, max_retries, symbol, timeframe, since, limit):\r\n    # instantiate the exchange by id\r\n    exchange = getattr(ccxt, exchange_id)()\r\n    # convert since from string to milliseconds integer if needed\r\n    if isinstance(since, str):\r\n        since = exchange.parse8601(since)\r\n    # preload all markets from the exchange\r\n    exchange.load_markets()\r\n    # fetch all candles\r\n    ohlcv = scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit)\r\n    # save them to csv file\r\n    write_to_csv(filename, ohlcv)\r\n    print('Saved', len(ohlcv), 'candles from', exchange.iso8601(ohlcv[0][0]), 'to', exchange.iso8601(ohlcv[-1][0]), 'to', filename)\r\n\r\n\r\nscrape_candles_to_csv('ftx1h.csv', 'ftx', 3, 'BTC-PERP', '1h', '2022-08-14T00:00:00Z', 1000)\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14686/comments",
    "author": "Talha-Islam",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-16T09:49:26Z",
        "body": "Hello @Talha-Islam,\r\n\r\nCan you please reduce your problem to something more minimal? A lot of the code you have here is not related to CCXT so it's very hard to understand what to you need.\r\n\r\n"
      },
      {
        "user": "Talha-Islam",
        "created_at": "2022-08-16T10:32:57Z",
        "body": "Hello hope you all are doing well, \r\n\r\nI am using CCXT to get my data for backtrader but there seems to be a problem, please try to read my issue again. Also i edited the issue it should be a bit easier to understand now. Thank you"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-21T09:28:07Z",
        "body": "The code and examples (with the logs) posted here, doesn't seem related / doesn't mention CCXT as the source for exception, instead it says:\r\n```\r\n..... backtrader/feeds/csvgeneric.py\", line 148, in _loadline\r\ncsvfield = linetokens[csvidx]\r\nIndexError: list index out of range\r\n```\r\nPlease revise your stacktrace again and reopen the topic if you find that there is some issue coming from CCXT functions."
      }
    ]
  },
  {
    "number": 14682,
    "title": "Issue with leverage futures Kucoin",
    "created_at": "2022-08-15T03:50:20Z",
    "closed_at": "2022-10-21T07:56:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14682",
    "body": "Hi all,\r\n\r\nI seem to be getting this error using CCXT for trading ETH perps but I do have the necessary funds in my account to trade the position on 5 times leverage. Please let me know if you need more info on my issue or if there is something that I'm missing. Thanks!\r\n\r\n- OS: macOS Monterey 12.0.1\r\n- Programming Language version: Python\r\n- CCXT version:1.90.23\r\n\r\n```\r\nimport ccxt\r\n\r\nku = ccxt.kucoinfutures({\r\n    'adjustForTimeDifference': True,\r\n    \"apiKey\": api_key,\r\n    \"secret\": secret_key,\r\n    \"password\": pw\r\n});\r\n\r\n\r\namount = 640\r\nprice = ku.fetchTicker(\"ETH/USDT:USDT\")\r\ntime.sleep(8)\r\norder = ku.createOrder(\"ETH/USDT:USDT\", 'market', 'buy', ((math.floor(amount/float(price['info']['price'])*1000)/1000)*100),{'leverage': 5})\r\n\r\n```\r\n\r\n```\r\nccxt.base.errors.InsufficientFunds: kucoinfutures Balance insufficient. The order would cost 621.7596314550.\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14682/comments",
    "author": "xanadui",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-15T13:41:23Z",
        "body": "Hello @xanadui,\r\n\r\nI've tested it, and it seems to be working fine. Can you please double-check your available balance and/or try to place the same order using the WebUI?\r\n\r\nAlso, please bear in mind that the amount should be in contract units, and in this case, 1 contract = 0.01 ETH\r\n"
      },
      {
        "user": "xanadui",
        "created_at": "2022-08-16T17:03:03Z",
        "body": "Thanks @carlosmiei it started working when I changed the order to a limit order and that worked so maybe that was the issue. Thank you!"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-21T07:57:20Z",
        "body": "This topic is now closed. Let us know if you have any other issue with CCXT. "
      }
    ]
  },
  {
    "number": 14664,
    "title": "Get FTX Future coins list?",
    "created_at": "2022-08-12T04:47:05Z",
    "closed_at": "2022-08-13T00:40:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14664",
    "body": "Hi I'm looking for a list of coins ending with -PERP for the FTX exchange. \r\n\r\nI tried \r\n\r\n```\r\ncoins = ccxt.ftx({'options': { 'defaultType': 'future', }}).load_markets()\r\n```\r\n\r\nbut it just gives a list of coins with USDT and USD and it's 800 length as opposed to FTX amount of futures (less than 150). \r\n\r\nThis code works for binance, if I just switch ftx() to binance().",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14664/comments",
    "author": "leonfresh",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-08-12T05:48:05Z",
        "body": "There are no coins that end in `-PERP` only market ids that end in `-PERP`. I would also suggest using the unified symbol names, because they are the same between exchanges.\r\n\r\n```\r\nimport ccxt  # noqa: E402\r\nfrom pprint import pprint\r\n\r\nexchange = ccxt.ftx()\r\nexchange.load_markets()\r\nmarkets = exchange.markets\r\n# coins = [market['id'] for symbol, market in markets.items() if market['swap']] // uncomment if you want to use the -PERP market ids\r\ncoins = [symbol for symbol, market in markets.items() if market['swap']]\r\n\r\npprint(coins)\r\npprint(len(coins))\r\n```\r\nprints\r\n```\r\n['1INCH/USD:USD',\r\n 'AAVE/USD:USD',\r\n 'ADA/USD:USD',\r\n 'AGLD/USD:USD',\r\n 'ALCX/USD:USD',\r\n 'ALGO/USD:USD',\r\n 'ALICE/USD:USD',\r\n 'ALPHA/USD:USD',\r\n ...\r\n 'XRP/USD:USD',\r\n 'XTZ/USD:USD',\r\n 'YFI/USD:USD',\r\n 'YFII/USD:USD',\r\n 'ZEC/USD:USD',\r\n 'ZIL/USD:USD',\r\n 'ZRX/USD:USD']\r\n177\r\n```"
      },
      {
        "user": "leonfresh",
        "created_at": "2022-08-12T08:19:41Z",
        "body": "> There are no coins that end in `-PERP` only market ids that end in `-PERP`. I would also suggest using the unified symbol names, because they are the same between exchanges.\r\n> \r\n> ```\r\n> import ccxt  # noqa: E402\r\n> from pprint import pprint\r\n> \r\n> exchange = ccxt.ftx()\r\n> exchange.load_markets()\r\n> markets = exchange.markets\r\n> # coins = [market['id'] for symbol, market in markets.items() if market['swap']] // uncomment if you want to use the -PERP market ids\r\n> coins = [symbol for symbol, market in markets.items() if market['swap']]\r\n> \r\n> pprint(coins)\r\n> pprint(len(coins))\r\n> ```\r\n> \r\n> prints\r\n> \r\n> ```\r\n> ['1INCH/USD:USD',\r\n>  'AAVE/USD:USD',\r\n>  'ADA/USD:USD',\r\n>  'AGLD/USD:USD',\r\n>  'ALCX/USD:USD',\r\n>  'ALGO/USD:USD',\r\n>  'ALICE/USD:USD',\r\n>  'ALPHA/USD:USD',\r\n>  ...\r\n>  'XRP/USD:USD',\r\n>  'XTZ/USD:USD',\r\n>  'YFI/USD:USD',\r\n>  'YFII/USD:USD',\r\n>  'ZEC/USD:USD',\r\n>  'ZIL/USD:USD',\r\n>  'ZRX/USD:USD']\r\n> 177\r\n> ```\r\n\r\n\r\nThank you that worked perfectly. Is the code you gave me using unified symbol names already?"
      },
      {
        "user": "samgermain",
        "created_at": "2022-08-13T00:40:45Z",
        "body": "> Thank you that worked perfectly. Is the code you gave me using unified symbol names already?\r\n\r\nYes it is"
      }
    ]
  },
  {
    "number": 14626,
    "title": "Is now ccxt pro integrated to free one?",
    "created_at": "2022-08-08T21:19:52Z",
    "closed_at": "2022-08-11T00:29:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14626",
    "body": "Hi\r\nI right now ccxt pro integrated to free version?\r\nIf not when exactly it will be  as a part of free version?\r\nIs there any documentation for it available??",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14626/comments",
    "author": "myehrajat",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-09T12:15:35Z",
        "body": "Hello @myehrajat,\r\nNot yet, but it will be soon. We don't have a specific date yet, but we're working hard to make it happen as soon as possible.\r\n\r\n> Is there any documentation for it available??\r\n\r\n\r\nWe will make all CCXT.PRO documentation public after the release."
      }
    ]
  },
  {
    "number": 14608,
    "title": "FTX websockets stream on perpetual very slow ",
    "created_at": "2022-08-06T17:01:12Z",
    "closed_at": "2022-08-07T13:15:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14608",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.9.13\r\n- CCXT version: ccxtpro 1.2.10\r\n\r\nThe data recieved from ftx perp pairs is once every 2 seconds(roughly). Which is extremely slow comparing it to the regular BTC/USD pair on FTX which averaged out to 0.053 seconds over a 20 min sample (which in my experience is still on the slow side). I was wondering why it is taking roughly 2 seconds per tick and if i could do anything to make this a lot quicker. Let me know, appreciate your time.\r\n\r\n```\r\nimport ccxtpro\r\nfrom asyncio import run\r\n\r\nasync def main():\r\n    FTX = ccxtpro.ftx({'newUpdates': True})\r\n    while x == True:\r\n        start = time.time()\r\n        orderbook = await FTX.watch_order_book('BTC-PERP') #also used BTC/USD:USD same effect\r\n        print(FTX.iso8601(FTX.milliseconds()), 'BTC/USD:USD', orderbook['bids'][0], orderbook['asks'][0])\r\n        await FTX.close()\r\n\r\nrun(main())\r\n```\r\n\r\n```\r\n2022-08-06T16:59:55.505Z BTC/USD:USD [23157.0, 8.5341] [23158.0, 5.0993]\r\n2022-08-06T16:59:57.518Z BTC/USD:USD [23157.0, 4.196] [23158.0, 15.8474]\r\n2022-08-06T16:59:59.539Z BTC/USD:USD [23157.0, 2.615] [23158.0, 11.1582]\r\n2022-08-06T17:00:01.573Z BTC/USD:USD [23157.0, 0.099] [23158.0, 18.0891]\r\n2022-08-06T17:00:03.598Z BTC/USD:USD [23151.0, 8.7448] [23152.0, 34.0551]\r\n2022-08-06T17:00:05.668Z BTC/USD:USD [23145.0, 0.6389] [23146.0, 18.9104]\r\n2022-08-06T17:00:07.693Z BTC/USD:USD [23142.0, 6.9215] [23143.0, 32.0178]\r\n2022-08-06T17:00:09.728Z BTC/USD:USD [23138.0, 19.8388] [23139.0, 0.2147]\r\n2022-08-06T17:00:11.772Z BTC/USD:USD [23138.0, 22.1469] [23139.0, 0.4077]\r\n2022-08-06T17:00:13.754Z BTC/USD:USD [23142.0, 2.4671] [23143.0, 23.4715]\r\n2022-08-06T17:00:15.797Z BTC/USD:USD [23142.0, 3.4958] [23143.0, 20.8941]\r\n2022-08-06T17:00:17.827Z BTC/USD:USD [23138.0, 3.3549] [23139.0, 30.4348]\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14608/comments",
    "author": "zerconn",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-08-07T02:05:06Z",
        "body": "Hi @zerconn , The issue is you are clossing the connection, so it takes a second or two to reconnect again.\r\nIf you remove the line `await FTX.close()`  you should get updates about every 30 ms\r\n\r\nHere was the code I used: \r\n```python\r\nimport ccxtpro\r\nfrom asyncio import run\r\nimport time\r\n\r\nasync def main():\r\n    FTX = ccxtpro.ftx({'newUpdates': True})\r\n    while True:\r\n        start = time.time()\r\n        orderbook = await FTX.watch_order_book('BTC-PERP') #also used BTC/USD:USD same effect\r\n        print(FTX.iso8601(FTX.milliseconds()), 'BTC/USD:USD', orderbook['bids'][0], orderbook['asks'][0])\r\n        #await FTX.close()\r\n\r\nrun(main())\r\n```\r\nHere was my output:\r\n```\r\n2022-08-07T02:02:55.328Z BTC/USD:USD [22929.0, 22.6859] [22930.0, 3.2098]\r\n2022-08-07T02:02:55.352Z BTC/USD:USD [22929.0, 22.6859] [22930.0, 3.2098]\r\n2022-08-07T02:02:55.381Z BTC/USD:USD [22929.0, 22.0459] [22930.0, 4.2098]\r\n2022-08-07T02:02:55.403Z BTC/USD:USD [22929.0, 21.7259] [22930.0, 4.5298]\r\n2022-08-07T02:02:55.430Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n2022-08-07T02:02:55.454Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n2022-08-07T02:02:55.486Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n```\r\n\r\nI hope that solves the issues!"
      },
      {
        "user": "zerconn",
        "created_at": "2022-08-07T13:15:30Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 14584,
    "title": "Phemex `fetch_positions` does not support phemex official symbol",
    "created_at": "2022-08-03T15:05:36Z",
    "closed_at": "2022-08-04T08:11:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14584",
    "body": "Phemex `fetch_positions` does not support phemex official symbol\r\n\r\n## versions\r\n* OS: Debian 11\r\n* Programming Language version: python 3.8.12\r\n* CCXT version: 1.91.68\r\n\r\n## code to reproduce\r\n\r\n### setup\r\n```\r\nimport ccxt\r\n\r\nccxt_exchange = ccxt.phemex({\r\n    'apiKey': ...,\r\n    'secret': ...,\r\n})\r\n```\r\n\r\n### fetch_positions does not support uXXXUSD format\r\n```\r\nccxt_exchange.fetch_positions(symbols=['uBTCUSD']) # => returns `[]`\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:USD']) # => returns position structured response\r\n```\r\n\r\n### fetch_positions does not support neither inverse formats\r\n```\r\nccxt_exchange.fetch_positions(symbols=['BTCUSD']) # => returns `[]`\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC']) # => returns `[]`\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14584/comments",
    "author": "takami-ml",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-03T16:53:27Z",
        "body": "Hello @takami-ml \r\n\r\n> ccxt_exchange.fetch_positions(symbols=['uBTCUSD']) # => returns `[]`\r\n> ccxt_exchange.fetch_positions(symbols=['BTC/USD:USD']) # => returns position structured response\r\n\r\nCan you double-check this? I've just tested and worked fine with both formats, unified and exchange-specific.\r\n\r\n\r\n> fetch_positions does not support neither inverse formats\r\n> ccxt_exchange.fetch_positions(symbols=['BTCUSD']) # => returns `[]`\r\n> ccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC']) # => returns `[]`\r\n\r\nBy default will try to load \"linear contracts\" to fetch inverse contracts (BTC settled in this case), please provide the settle currency as `code` inside params.\r\n\r\nSomething like this:\r\n```Python\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC'], {'code':'BTC'})\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "takami-ml",
        "created_at": "2022-08-03T23:39:58Z",
        "body": "@carlosmiei \r\n\r\nThank you for the information.\r\n\r\n> Can you double-check this? I've just tested and worked fine with both formats, unified and exchange-specific.\r\n\r\nI'm sorry,  this one was my mistake. (I just had an inverse position, not linear.)\r\nI confirmed it worked as expected.\r\n\r\n> By default will try to load \"linear contracts\" to fetch inverse contracts (BTC settled in this case), please provide the settle currency as code inside params.\r\n\r\nWhen I set `code` to BTC, it worked.\r\nI did not understand the `defaultSubType` option and `code` params. Thanks for the information.\r\n\r\nIn conclusion, in both cases, there was no problem. I am very sorry to have used your time!\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-08-04T08:11:13Z",
        "body": "@takami-ml no problem at all, I'll close this issue then, let us know if anything! 🙂 "
      }
    ]
  },
  {
    "number": 14570,
    "title": "Huobi Pro wrong exchange name",
    "created_at": "2022-08-02T11:35:20Z",
    "closed_at": "2022-08-09T11:22:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14570",
    "body": "I noticed that the exchanges with id ```huobi``` and ```huobipro``` have the same name ```Huobi```.\r\n\r\n- OS: macOS Monterey 12.4\r\n- Programming Language version: Node 18.6\r\n- CCXT version: 1.91.46\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14570/comments",
    "author": "FabianWassermann",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-08-05T17:41:47Z",
        "body": "They don't when I check\r\n```\r\nimport ccxt\r\n\r\nhuobi = ccxt.huobi()\r\nprint(huobi.id)\r\nhuobipro = ccxt.huobipro()\r\nprint(huobipro.id)\r\n\r\n```\r\nprints\r\n```\r\nhuobi\r\nhuobipro\r\n```"
      },
      {
        "user": "FabianWassermann",
        "created_at": "2022-08-05T19:42:58Z",
        "body": "As I said: The ```id``` is different but the name is the same.\r\n\r\nFor Example: ```coinbase``` has the name ```Coinbase``` and ```coinbasepro``` has the name ```Coinbase Pro```.\r\nBut for Huobi it´s: ```huobi``` has the name ```Huobi``` and ```huobipro``` has the name ```Huobi```.\r\n\r\nAs I said: Exchanges with id ```huobi``` and ```huobipro``` have the same name ```Huobi```\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 14559,
    "title": "FTX API withdrawal Code... Error message. Non-base32 digit found. Help me, please",
    "created_at": "2022-08-01T16:58:16Z",
    "closed_at": "2022-08-26T08:58:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14559",
    "body": "- OS : Windows 10 Pro\r\n- Programming Language version : Python 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)] \r\n- Jupyter notebook : The version of the notebook server is: 6.4.12\r\n- CCXT version : CCXT Version: 1.91.52\r\n\r\n\r\nHello, I have a concern. I haven't been able to solve this problem for days.\r\nIf you take the time to help me, I'm very grateful.\r\n\r\nI want to withdraw from FTX. There's a problem I can't solve.\r\nI searched ccxt github and stackoverflow to solve this problem... I can't solve.\r\n\r\nThen I'd appreciate it if you could read my error code. \r\n\r\n\r\n ###  Type 1\r\n\r\n```\r\nimport ccxt\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.ftx({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'zre1wrewrwerwrqrererqrererewrwrewrwer',\r\n    'secret':  'erwrerewrwrqrqweqeqewqeqeqeqewewew',\r\n    'twofa': '332370'\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging\r\n\r\ncode = 'XRP'\r\namount = 40\r\naddress = 'raQwCerwrewcX8i22BhdC9WA'\r\ntag = 4224246038\r\nparams = { \r\n    'code': exchange.oath(),\r\n    'password': 'wrrrwerwrwrsecret',\r\n}\r\n\r\n   \r\nresult = exchange.withdraw (code, amount, address, tag, params)\r\nprint(result)\r\n\r\nprint('-----------------------------------------------------------')\r\n```\r\n\r\n```\r\n->> Python result\r\nCCXT Version: 1.91.52\r\n---------------------------------------------------------------------------\r\nError                                     Traceback (most recent call last)\r\nInput In [76], in <cell line: 21>()\r\n     18 address = 'raQwrewrerwwBhdC9WA'\r\n     19 tag = 4225936038\r\n     20 params = { \r\n---> 21     'code': exchange.oath(),\r\n     22     'password': 'rwewerwrsecret',\r\n     23 }\r\n     26 result = exchange.withdraw (code, amount, address, tag, params)\r\n     27 print(result)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:2759, in Exchange.oath(self)\r\n   2757 def oath(self):\r\n   2758     if self.twofa is not None:\r\n-> 2759         return self.totp(self.twofa)\r\n   2760     else:\r\n   2761         raise ExchangeError(self.id + ' exchange.twofa has not been set for 2FA Two-Factor Authentication')\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:1652, in Exchange.totp(key)\r\n   1649     return base64.b32decode(padded)  # throws an error if the key is invalid\r\n   1651 epoch = int(time.time()) // 30\r\n-> 1652 hmac_res = Exchange.hmac(epoch.to_bytes(8, 'big'), base32_to_bytes(key.replace(' ', '')), hashlib.sha1, 'hex')\r\n   1653 offset = hex_to_dec(hmac_res[-1]) * 2\r\n   1654 otp = str(hex_to_dec(hmac_res[offset: offset + 8]) & 0x7fffffff)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:1649, in Exchange.totp.<locals>.base32_to_bytes(n)\r\n   1647 padding = 8 - missing_padding if missing_padding > 0 else 0\r\n   1648 padded = n.upper() + ('=' * padding)\r\n-> 1649 return base64.b32decode(padded)\r\n\r\nFile ~\\anaconda3\\lib\\base64.py:231, in b32decode(s, casefold, map01)\r\n    229             acc = (acc << 5) + b32rev[c]\r\n    230     except KeyError:\r\n--> 231         raise binascii.Error('Non-base32 digit found') from None\r\n    232     decoded += acc.to_bytes(5, 'big')\r\n    233 # Process the last, partial quanta\r\n\r\nError: Non-base32 digit found\r\n```\r\n\r\n ###  Type 2\r\n\r\n```\r\n\r\nimport ccxt\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.ftx({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'rwerererwerewtewterewrewrewrewrewrwrewrwercf',\r\n    'secret': 'JerwrwerwerwrwerewrwerewrwerwerwerwerererereU',\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging\r\n\r\ncode = 'XRP'\r\namount = 40\r\naddress = 'rawrrwweretrr23423424234342tttttttWA'\r\ntag = 423743288\r\nparams = { \r\n    'code': exchange.totp('908184'), \r\n}\r\n\r\n   \r\nresult = exchange.withdraw (code, amount, address, tag, params)\r\nprint(result)\r\n\r\n\r\nprint('-----------------------------------------------------------')\r\n\r\n```\r\n```\r\n->> Python result\r\nCCXT Version: 1.91.52\r\n---------------------------------------------------------------------------\r\nError                                     Traceback (most recent call last)\r\nInput In [77], in <cell line: 20>()\r\n     17 address = 'rawrrwweretrr23423424234342tttttttWA'\r\n     18 tag = 423743288\r\n     19 params = { \r\n---> 20     'code': exchange.totp('908184'), \r\n     21 }\r\n     24 result = exchange.withdraw (code, amount, address, tag, params)\r\n     25 print(result)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:1652, in Exchange.totp(key)\r\n   1649     return base64.b32decode(padded)  # throws an error if the key is invalid\r\n   1651 epoch = int(time.time()) // 30\r\n-> 1652 hmac_res = Exchange.hmac(epoch.to_bytes(8, 'big'), base32_to_bytes(key.replace(' ', '')), hashlib.sha1, 'hex')\r\n   1653 offset = hex_to_dec(hmac_res[-1]) * 2\r\n   1654 otp = str(hex_to_dec(hmac_res[offset: offset + 8]) & 0x7fffffff)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:1649, in Exchange.totp.<locals>.base32_to_bytes(n)\r\n   1647 padding = 8 - missing_padding if missing_padding > 0 else 0\r\n   1648 padded = n.upper() + ('=' * padding)\r\n-> 1649 return base64.b32decode(padded)\r\n\r\nFile ~\\anaconda3\\lib\\base64.py:231, in b32decode(s, casefold, map01)\r\n    229             acc = (acc << 5) + b32rev[c]\r\n    230     except KeyError:\r\n--> 231         raise binascii.Error('Non-base32 digit found') from None\r\n    232     decoded += acc.to_bytes(5, 'big')\r\n    233 # Process the last, partial quanta\r\n\r\nError: Non-base32 digit found\r\n```\r\n\r\n\r\n\r\nTo solve this problem, I created a virtual environment and installed a 32-bit Python version. But it hasn't been fixed at all. The same error message still occurred.\r\n\r\nand...\r\n\r\n```\r\nimport base64\r\n# Creating a string\r\ns = \"Hello World!\"\r\n# Encoding the string into bytes\r\nb = s.encode(\"UTF-8\")\r\n# Base32 Encode the bytes\r\ne = base64.b32encode(b)\r\n# Decoding the Base32 bytes to string\r\ns1 = e.decode(\"UTF-8\")\r\n# Printing Base32 encoded string\r\nprint(\"Base32 Encoded:\", s1)\r\n# Encoding the Base32 encoded string into bytes\r\nb1 = s1.encode(\"UTF-8\")\r\n# Decoding the Base32 bytes\r\nd = base64.b32decode(b1)\r\n# Decoding the bytes to string\r\ns2 = d.decode(\"UTF-8\")\r\nprint(s2)\r\n\r\n--------\r\npython result ->\r\nBase32 Encoded: JBSWY3DPEBLW64TMMQQQ====\r\nHello World!\r\n```\r\n\r\n\r\n```\r\nprint(base64.b32encode(bytearray(\"abc\", 'ascii')).decode('utf-8'))\r\n--------\r\npython result ->\r\nMFRGG===\r\n```\r\n\r\nI did this, but it didn't solve the problem at all.\r\n\r\nSo I tried the code supported by FTX API GitHub, not the ccxt Python code, but when I do that, I get a message asking for 2nd OTP certification.\r\n\r\nAnyway, I think I need to solve the base32 error to solve the OTP problem....\r\n\r\n\r\nHelp me, please. \r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14559/comments",
    "author": "naokitte",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-03T21:57:27Z",
        "body": "Hello @naokitte, yes our base32 operations seem to be malfunctioning, we will analyze it asap. Thanks for reporting it"
      },
      {
        "user": "naokitte",
        "created_at": "2022-08-04T01:57:22Z",
        "body": "> \r\nYes, I'll be waiting for the problem to be solved.."
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-08-04T18:55:32Z",
        "body": "Hello @naokitte \r\n\r\nI'm sorry, I ended up confusing myself and gave a wrong answer. Our docs in this subject aren't great either, but we will improve it soon.\r\n\r\nBasically, the `twofa` option expects to get the 2fa key (the code encoded inside the QR code)  so that we can generate the six digits OTP and inject it in the request automatically, so by providing it, you don't even have to invoke .oath() manually.\r\n\r\nExample:\r\n\r\n```Python\r\nexchange = ccxt.ftx({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'API_KEY',\r\n    'secret':  'SECRET',\r\n    'twofa': 'NXKANJQ4FKDAEHG5' # your 2fa secret here\r\n})\r\n\r\ncode = 'XRP'\r\namount = 40\r\naddress = 'rawrrwweretrr23423424234342tttttttWA'\r\ntag = 423743288\r\n  \r\nresult = exchange.withdraw (code, amount, address, tag) # <- OTP will be injected automatically here. You don't need to add it.\r\n```\r\n\r\nAlternatively, you can manually provide the OTP on each request, and by doing that, you don't need to provide tour 2fa secret upon instantiating the exchange.\r\n\r\nExample\r\n\r\n```Python\r\nexchange = ccxt.ftx({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'API_KEY',\r\n    'secret':  'SECRET',\r\n}) # you don't need to provide any 2fa key here\r\n\r\ncode = 'XRP'\r\namount = 40\r\naddress = 'rawrrwweretrr23423424234342tttttttWA'\r\ntag = 423743288\r\nparams = {\r\n    'code': '123456' # injecting your 2fa OTP manually in the request\r\n}\r\nresult = exchange.withdraw (code, amount, address, tag, params) \r\n```\r\n\r\nPlease let us know if things are a little clearer now or if you need any further clarification!"
      },
      {
        "user": "naokitte",
        "created_at": "2022-08-08T18:57:13Z",
        "body": "> \r\n\r\nHi, Thanks. I solved the problem.\r\nMy solution was to eliminate 2FA\r\nI set the setting to turn off 2FA when withdrawl.\r\nThen the withdrawal Python code worked.\r\nand In the 'params' code, I just put in the 'password' : 'blahblahblah'\r\n\r\nAnyway, I solved the problem.\r\n\"Turn off the 2FA function.\" \r\nOther than this, there was an error in the other way I tried.\r\n\r\nThank you\r\n\r\n\r\n"
      },
      {
        "user": "abinavrameshs",
        "created_at": "2022-08-16T17:40:19Z",
        "body": "Thank you @carlosmiei ..This issue clarifies authentication."
      }
    ]
  },
  {
    "number": 14556,
    "title": "upbit createDepositAddress Error",
    "created_at": "2022-07-31T17:11:34Z",
    "closed_at": "2022-08-01T14:07:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14556",
    "body": "OS:Windows 10\r\nProgramming Language version:Python\r\nCCXT version:1.90.66\r\nExchange: Upbit\r\nMethod: createDepositAddress\r\n\r\n\r\nAddressPending: upbit is generating BTC deposit address, call fetchDepositAddress or createDepositAddress one more time later to retrieve the generated address\r\n\r\n\r\nI'd like to know why the code exits with that message when generating an address.\r\n\r\nAfter the code ends, I can check in Upbit that the address has been created\r\nBut I can't check it when I create it in python\r\n\r\nI couldn't find it after searching after #6452 for this problem.\r\nI'm a beginner in programming, so I don't know if it's a bug or my skill problem.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14556/comments",
    "author": "newbienoobnoob",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-01T09:13:43Z",
        "body": "@newbienoobnoob Hello, so when you call `createDepositAdress` there are two things that might happen:\r\n- First, the exchange immediately responds with an address, and you're ready to go\r\n- Second, the exchange warns that it will create an address, but since this is an asynchronous process it can't return it right now, you have to wait a few seconds and request it again.\r\n\r\nYou can do simple polling until the address is ready, for example:\r\n\r\n```Python\r\n    address = None\r\n    while True:\r\n        try:\r\n            address = await exchange.create_deposit_address(\"BTC\")\r\n            break\r\n        except ccxt.AddressPending as e:\r\n            print(\"Address not ready yet, will wait and try again\")\r\n            await exchange.sleep(1000) # sleeps 1 second before trying again\r\n```\r\n\r\n\r\n\r\n"
      },
      {
        "user": "newbienoobnoob",
        "created_at": "2022-08-01T14:07:26Z",
        "body": "Thank you it was a great hint\r\n"
      }
    ]
  },
  {
    "number": 14534,
    "title": "Binance US withdrawal fees empty",
    "created_at": "2022-07-29T20:07:58Z",
    "closed_at": "2022-07-29T20:24:50Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14534",
    "body": "Hi, I've set up fetching of fees and doing some simple calculation of them with different exchanges, take a look\r\n\r\nCCXT version: 1.91.39\r\n\r\n```\r\ndef get_withdrawal_fees(\r\n        exchange_name: str, path_optimizer, trading_size: int = 1000\r\n) -> dict:\r\n    \"\"\"\r\n    function to get the withdrawal fees of each exchange through ccxt\r\n    will also calculate the withdrawal fee percentage based on an approximate trading size\r\n    \"\"\"\r\n    withdrawal_fee = {}\r\n    exchange_instance: ccxt.Exchange = path_optimizer.exchanges[exchange_name]\r\n    currencies: dict = exchange_instance.currencies\r\n    if exchange_instance.has[\"fetchTickers\"]:\r\n        tickers: dict[dict] = exchange_instance.fetch_tickers()\r\n    else:\r\n        raise ccxt.ExchangeError(\r\n            f\"{exchange_name} does not support the fetchTickers method\"\r\n        )\r\n\r\n    coin_name: str\r\n    coin_value: dict\r\n    for coin_name, coin_value in currencies.items():\r\n        coin_fee = int(0) if coin_value[\"fee\"] == 0.0 else coin_value[\"fee\"]\r\n        fee_in_usd = coin_fee * tickers.get(f\"{coin_name}/USDT\", {}).get(\"bid\", 0)\r\n        withdrawal_fee[coin_name] = {\r\n            \"usd_fee\": fee_in_usd,\r\n            \"usd_rate\": fee_in_usd / trading_size,\r\n            \"coin_fee\": coin_fee,\r\n        }\r\n    return withdrawal_fee\r\n```\r\nWorked great with binance, but I get an error with Binance US,\r\nThe \"coin_value\" is much different from the Binance ones\r\n\r\nBinance example:\r\n```\r\ncoin_value = {'id': 'AGLD', 'name': 'Adventure Gold', 'code': 'AGLD', 'precision': None, 'info': {'coin': 'AGLD', 'depositAllEnable': True, 'withdrawAllEnable': True, 'name': 'Adventure Gold', 'free': '0', 'locked': '0', 'freeze': '0', 'withdrawing': '0', 'ipoing': '0', 'ipoable': '0', 'storage': '0', 'isLegalMoney': False, 'trading': True, 'networkList': [{'network': 'ETH', 'coin': 'AGLD', 'withdrawIntegerMultiple': '0.00000001', 'isDefault': True, 'depositEnable': True, 'withdrawEnable': True, 'depositDesc': '', 'withdrawDesc': '', 'specialTips': '', 'specialWithdrawTips': '', 'name': 'Ethereum (ERC20)', 'resetAddressStatus': False, 'addressRegex': '^(0x)[0-9A-Fa-f]{40}$', 'addressRule': '', 'memoRegex': '', 'withdrawFee': '14', 'withdrawMin': '28', 'withdrawMax': '9999999', 'minConfirm': '12', 'unLockConfirm': '0', 'sameAddress': False, 'estimatedArrivalTime': '5', 'busy': False, 'country': 'AE'}]}, 'active': True, 'deposit': True, 'withdraw': True, 'networks': [{'network': 'ETH', 'coin': 'AGLD', 'withdrawIntegerMultiple': '0.00000001', 'isDefault': True, 'depositEnable': True, 'withdrawEnable': True, 'depositDesc': '', 'withdrawDesc': '', 'specialTips': '', 'specialWithdrawTips': '', 'name': 'Ethereum (ERC20)', 'resetAddressStatus': False, 'addressRegex': '^(0x)[0-9A-Fa-f]{40}$', 'addressRule': '', 'memoRegex': '', 'withdrawFee': '14', 'withdrawMin': '28', 'withdrawMax': '9999999', 'minConfirm': '12', 'unLockConfirm': '0', 'sameAddress': False, 'estimatedArrivalTime': '5', 'busy': False, 'country': 'AE'}], 'fee': 14.0, 'fees': {'ETH': 14.0}, 'limits': {'leverage': {'min': None, 'max': None}, 'amount': {'min': None, 'max': None}, 'price': {'min': None, 'max': None}, 'cost': {'min': None, 'max': None}}}\r\n```\r\n\r\nBinance US example:\r\n```\r\ncoin_value = {'id': '1INCH', 'numericId': None, 'code': '1INCH', 'precision': 8}\r\n```\r\n\r\nCould you give advice what I'm doing wrong?\r\nMaybe I need another approach\r\n\r\nThanks ahead ❤",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14534/comments",
    "author": "Salz0",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-07-29T20:26:19Z",
        "body": "@Salz0 looks like the Binance.us API was missing the endpoint in question, but they have added it since then, so we've enabled it on our side and pushed the edits. Please, upgrade to CCXT 1.91.47+ in ~20 minutes and let us know if that solves the issue for you or not. Thx for your feedback!"
      }
    ]
  },
  {
    "number": 14512,
    "title": "okx default type does not change",
    "created_at": "2022-07-28T11:52:05Z",
    "closed_at": "2022-07-28T14:24:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14512",
    "body": "i'm using the latest version of ccxt\r\nin okx, when i change defaultType to swap or any other kinds it does not change and when i call an order it still shows spot mode price and ..... .\r\nand when I wanna create a swap order it shows error which i don't have when i use binance and change defaultType to future.\r\n\r\n\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n    'options':{\r\n        'defaultType' : 'swap'\r\n        },\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\n\r\nleve = okex.set_leverage(10 , 'ETH-USDT' ,  params = {'mgnMode' : 'isolated'} , )\r\norder1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\nprint(order1)\r\n\r\n\r\n\r\nbut when i use this code i can get swap price but i can't open an order with swap symbol :\r\n\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n})\r\n\r\nticker = okex.fetch_ticker('ETH-USDT-SWAP')\r\nprint(ticker)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14512/comments",
    "author": "ar3sla",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-07-28T12:02:02Z",
        "body": "Hello @ar3sla you're mixing up spot and swap market ids.\r\n\r\nIf you want to place an order for the linear ETH/USDT swap you should be using `ETH-USDT-SWAP` as an argument for `createMarketBuyOrder` instead of `ETH-USDT`, the latter represents the spot symbol. \r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "ar3sla",
        "created_at": "2022-07-28T12:23:42Z",
        "body": "hi @carlosmiei, thanks for your answer\r\nbut when i change it to ETH-USDT-SWAP with this code:\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n    'options':{\r\n        'defaultType' : 'swap'\r\n        },\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\nparams1 = {\r\n    \"instId\":\"ETH-USDT-SWAP\",\r\n    \"tdMode\":\"isolated\",\r\n    \"side\":\"buy\",\r\n    'posSide':\"SWAP\",\r\n    \"ordType\":\"market\",\r\n    \"sz\":\"6\"\r\n}\r\norder1 = okex.create_market_buy_order('ETH-USDT-SWAP' , 6 , params=params1)\r\nprint(order1)\r\n\r\nit shows me this error :\r\nccxt.base.errors.BadRequest: okx {\"code\":\"1\",\"data\":[{\"clOrdId\":\"e847386590ce4dBC2ffbe9c12cb175e0\",\"ordId\":\"\",\"sCode\":\"51000\",\"sMsg\":\"Parameter posSide  error \",\"tag\":\"\"}],\"msg\":\"Operation failed.\"}\r\n\r\n\r\n\r\nand if i use ETH-USDT in this code :\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\n\r\norder1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\nprint(order1)\r\n\r\nit shows me this error :\r\n\r\nccxt.base.errors.InsufficientFunds: okx {\"code\":\"1\",\"data\":[{\"clOrdId\":\"e847386590ce4dBCb25a7bde230285b0\",\"ordId\":\"\",\"sCode\":\"51008\",\"sMsg\":\"Order placement failed due to insufficient balance \",\"tag\":\"\"}],\"msg\":\"Operation failed.\"}"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-07-28T13:06:15Z",
        "body": "Hello @ar3sla,\r\n\r\n> order1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\n> print(order1)\r\n\r\nthis is not what you want, as said earlier 'ETH-USDT' is a spot symbol, so you're saying \"I want to buy 6 ETH with USDT\"\r\n\r\n> order1 = okex.create_market_buy_order('ETH-USDT-SWAP' , 6 , params=params1)\r\n> print(order1)\r\n\r\nYou're almost there, you're just missing the `postSide` parameter required by OKX.\r\n\r\nSomething like this:\r\n```Python\r\n\r\nparams1 = {\r\n    \"marginMode\":\"isolated\", # or cross\r\n    \"posSide\":\"long\", # long or short depending on your intent\r\n}\r\nsymbol = \"ETH-USDT-SWAP\"\r\namount = 6 # number of contracts\r\norder1 = okex.create_market_buy_order(symbol , amount , params=params1)\r\nprint(order1)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "ar3sla",
        "created_at": "2022-07-28T13:40:22Z",
        "body": "thanks a lot @carlosmiei\r\nthe posside solved my problem.\r\nI'm really thankful"
      }
    ]
  },
  {
    "number": 14501,
    "title": "ModuleNotFoundError: No module named 'ccxt.async_support.vcc'",
    "created_at": "2022-07-27T03:35:49Z",
    "closed_at": "2022-10-11T15:00:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14501",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.10.1\r\n- CCXTPRO version: 1.1.65\r\n\r\n```\r\n #!/usr/bin/env python\r\n \r\nimport asyncio\r\n\r\nimport websockets\r\nimport ccxtpro\r\n \r\nCONNECTIONS = set()\r\n \r\nasync def register(websocket):\r\n    CONNECTIONS.add(websocket)\r\n    try:\r\n        await websocket.wait_closed()\r\n    finally:\r\n        CONNECTIONS.remove(websocket)\r\n\r\nasync def show_time():\r\n    exchange = ccxtpro.binanceusdm({\r\n        'apiKey': '',\r\n        'secret': '',\r\n    })\r\n\r\n    exchange.set_sandbox_mode(True) \r\n    exchange.verbose = True\r\n    \r\n    while True:\r\n        try:\r\n            symbol ='BTC/USDT'\r\n            orders = await exchange.watch_orders(symbol)\r\n            websockets.broadcast(CONNECTIONS, str(orders))\r\n            print(orders)\r\n            print('---------------------------------------------------------------')\r\n        except Exception as e:\r\n            pass\r\n            print(e)\r\n\r\n    await exchange.close()\r\n\r\nasync def main():\r\n    async with websockets.serve(register, \"localhost\", 5678):\r\n        await show_time()\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\HP\\Desktop\\CopyTrading\\server.py\", line 6, in <module>\r\n    import ccxtpro\r\n  File \"d:\\ccxt.pro-master\\python\\ccxtpro\\__init__.py\", line 130, in <module>\r\n    from ccxt.async_support.vcc import vcc                                    # noqa: F401\r\nModuleNotFoundError: No module named 'ccxt.async_support.vcc'\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14501/comments",
    "author": "GemarPetere",
    "comments": [
      {
        "user": "GemarPetere",
        "created_at": "2022-07-27T03:37:15Z",
        "body": "the first copy of the code is good but when I try to make a duplicate of it and put to the other file,  the error exist\r\n."
      },
      {
        "user": "kroitor",
        "created_at": "2022-07-27T03:44:52Z",
        "body": "@GemarPetere please, let us know if you have this issue with the most recent version of CCXT Pro (1.2+)"
      },
      {
        "user": "GemarPetere",
        "created_at": "2022-07-27T04:27:13Z",
        "body": "ok do I need to update the library"
      },
      {
        "user": "GemarPetere",
        "created_at": "2022-07-27T04:29:46Z",
        "body": "what should I do to stay updated? because I only have a downloaded ccxtpro file given from my leader."
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-11T15:00:29Z",
        "body": "You will no longer face the similar issue, as ccxt pro is now integrated in ccxt. "
      }
    ]
  },
  {
    "number": 14470,
    "title": "Using CCXT in JS or python? [Performance Question]",
    "created_at": "2022-07-24T22:17:46Z",
    "closed_at": "2022-09-08T19:44:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14470",
    "body": "Assuming we're making any crypto coin  software that pulls data and creates orders, is javascript or faster python? Why ? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14470/comments",
    "author": "kaanguven",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-07-25T09:59:24Z",
        "body": "Hello @flav1ooo, not an easy answer but I'll try \r\n\r\nIf we're talking about raw performance, python will be comparatively slower than Javascript/Node.js in most cases, because Node uses the V8 Javascript engine and is capable of advanced multithreaded operations under the hood. Actually, JS is one of the fastest scripting languages out there.\r\n\r\nLet's consider these samples:\r\n\r\nPython sample 1:\r\n```Python\r\nstart_time = time.time()\r\nsum = 0\r\nfor i in range(0, 200000000):\r\n    sum+=i\r\nduration = time.time() - start_time\r\nprint(\"Duration (seconds)\", duration)\r\n```\r\n\r\nJavascript sample 1:\r\n\r\n```Javascript\r\nconst start = Date.now();\r\nlet sum = 0;\r\nfor (let i = 0; i < 200000000; i++) {\r\n    sum+=i\r\n}\r\nconst duration = Date.now() - start;\r\nconsole.log(\"Duration:::\", duration)\r\n```\r\nIf we measure the execution time of both, we will see that Node.js is approximately 80 times faster than python which is impressive, but this is when things get tricky, on those samples we're only measuring \"pure computational performance\" without any IO/ or external libraries.  In a real-world trading bot you will have to handle at least a lot of IO to load markets/ fetch prices/ place orders, so let's simulate that.\r\n\r\nPython sample 2:\r\n```Python\r\nasync def symbol_loop(exchange, symbol):\r\n    await exchange.loadMarkets()\r\n    if symbol in exchange.markets:\r\n        for i in range(0, 20):\r\n            try:\r\n                ticker = await exchange.fetch_ticker(symbol)\r\n            except Exception as e:\r\n                print(str(e))\r\n    await exchange.close()\r\n\r\nasync def main():\r\n    start_time = time.time()\r\n    symbol = 'BTC/USDT'\r\n    exchanges = ['binance', 'kraken', 'bybit', 'huobi', 'kucoin', 'hollaex', 'coinbase', 'okx', 'phemex', 'zb', 'cryptocom']\r\n    loops = [symbol_loop(getattr(ccxt, exchange_id)({\"defaultType\":\"spot\"}), symbol) for exchange_id in exchanges]\r\n    await gather(*loops)\r\n    duration = time.time() - start_time\r\n    print(\"Duration (seconds)\", duration)\r\n\r\nrun(main())\r\n```\r\nJavascript sample 2:\r\n```Javascript\r\nlet test = async function (exchange, symbol) {\r\n    await exchange.loadMarkets ()\r\n    if (symbol in exchange.markets) {\r\n        for (let i = 0; i < 20; i++) {\r\n            try {\r\n                let ticker = await exchange.fetchTicker (symbol)\r\n                tickers.push(ticker)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst symbol = 'BTC/USDT'\r\nasync function main () {\r\n    const start = Date.now();\r\n    let exchanges = ['binance', 'kraken', 'bybit', 'huobi', 'kucoin', 'hollaex', 'coinbase', 'okx', 'phemex', 'zb', 'cryptocom']\r\n    await Promise.all (exchanges.map (async id => {\r\n        let exchange = new (ccxt)[id] ({\"defaultType\": \"spot\"})\r\n        await test (exchange, symbol)\r\n    }))\r\n    const duration = Date.now() - start;\r\n    console.log(\"Duration:::\", duration)\r\n}\r\nmain ()\r\n```\r\n\r\nSurprisingly, by measuring it now we will see that the execution time is almost the same for both scripts, due to the high IO handling happening and less \"pure instructions execution\". \r\n\r\n\r\nAdditionally, you have also to take into consideration the usage of external libraries. Let's say you need to handle huge datasets with billions of rows, will be much faster if you use c/c++ libraries in Python such as Pandas/Numpy than pure Javascript structures.\r\n\r\nTo conclude, as you can see, we can't say go with Python or Javascript because it will depend a lot on what you're going to do and how you're doing it. \r\n\r\nI would probably suggest:\r\n- A lot of IO and not much pure computational logic -> Python and JS will be similar\r\n- A lot of IO and raw computation -> JS will probably have an edge here\r\n- A lot of IO and heavy data handling using external libraries -> Python is very rich in high-performance data libraries, so probably fits better here\r\n\r\nPlease let us know if this was enlightened for you or not and if you need more clarification on this matter.\r\n\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-07-25T10:09:43Z",
        "body": "@flav1ooo One thing that I forgot to mention is that we also have plans to support statically typed languages in the future that will allow another level of performance compared to JS and Python"
      },
      {
        "user": "kaanguven",
        "created_at": "2022-07-25T10:14:13Z",
        "body": "> @flav1ooo One thing that I forgot to mention is that we also have plans to support statically typed languages in the future that will allow another level of performance compared to JS and Python\r\n\r\nGO would be great i guess lots of people suggest this language for speed"
      },
      {
        "user": "ttodua",
        "created_at": "2022-09-08T19:44:52Z",
        "body": "@carlosmiei's answer was thorough and I think for now, I'll close the issue.\r\nIf any further questions/issues, let us know"
      }
    ]
  },
  {
    "number": 14457,
    "title": "Kucoin Futures error retrieving data",
    "created_at": "2022-07-23T23:56:13Z",
    "closed_at": "2022-07-24T17:43:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14457",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.1\r\n- CCXT version: 1.91.2\r\n\r\n\r\ntrying to fetch my current positing contractsize, amount of contracts and current margin value:\r\n\r\n\r\n```\r\ndef open_positions():\r\n    params = {'type':'swap', 'code':'USD'}\r\n    symbol = 'BTC/USDT:USDT'\r\n    ku_bal = kucoin.fetch_positions(symbols=[symbol], params=params)\r\n    open_positions = ku_bal[0]\r\n    open_positions = ku_bal['info']['data']['maintMargin']\r\n    openpos_side = open_positions[0]['contracts']\r\n    openpos_size = open_positions[0]['contractSize']\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"reeee\", line 310, in <module>\r\n    bot()\r\n  File \"reeeee\", line 251, in bot\r\n    pnl_close() #checking if we hit pnl\r\n  File \"reeeeee\", line 233, in pnl_close\r\n    kill_switch()\r\n  File \"reeeeeee\", line 136, in kill_switch\r\n    openposi = open_positions()[1]\r\n  File \"reeeeee\", line 112, in open_positions\r\n    open_positions = ku_bal['info']['data']['maintMargin']\r\nTypeError: list indices must be integers or slices, not str\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14457/comments",
    "author": "ysonitis5",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-07-24T10:14:39Z",
        "body": "Hello @ysonitis5,\r\n\r\nYou're trying to access a non-existent field in the raw response, which is why it's crashing.\r\n\r\nTo fix it you can either search for the unified `maintenanceMargin` field, like this:\r\n```Python\r\npositions = kucoin.fetch_positions(symbols=[symbol], params=params)\r\nmaintenance_margin = positions[0]['maintenanceMargin'] # the advisable way to get it\r\n```\r\nor access the correct raw value inside `info`, \r\n\r\n```Python\r\npositions = kucoin.fetch_positions(symbols=[symbol], params=params)\r\nmaintenance_margin = positions[0]['info']['posMaint'] # not recommended because APIs are always changing\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "ysonitis5",
        "created_at": "2022-07-24T16:28:21Z",
        "body": "thank you very much  @carlosmiei "
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-07-24T17:43:16Z",
        "body": "@ysonitis5  You're welcome, since the problem seems resolved I will close the issue, let us know if anything!"
      }
    ]
  },
  {
    "number": 14424,
    "title": "Huobi Spot sell orders price and average value always equals to 1",
    "created_at": "2022-07-20T13:25:08Z",
    "closed_at": "2024-11-08T11:37:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14424",
    "body": "We've noticed that on Huobi Spot market `sell` orders `price` and `average` values always equals to 1, but in `buy` orders results prices are correct. \r\nLooks like it is because of on `ccxt` side `price` = `average` = `cost` / `amount`, \r\nwhere `cost` value contains traded currency amount and because of that prices for `sell` orders equals to 1.\r\nRight now we use next formula that helps avoid incorrect prices values:\r\n\r\n```\r\nif (ccxtResult['side'] === 'sell') {\r\n      ccxtResult['average'] = ccxtResult.info['field-cash-amount'] / ccxtResult.info['field-amount'];\r\n      ccxtResult['price'] = ccxtResult.info['field-cash-amount'] / ccxtResult.info['field-amount'];\r\n}\r\n```\r\n\r\nHere is some orders examples:\r\n\r\n**DOGE/BTC (`sell`)**:\r\n```\r\n{\r\n  info: {\r\n    id: '--------------',\r\n    symbol: 'dogebtc',\r\n    'account-id': '--------------',\r\n    'client-order-id': '--------------',\r\n    amount: '356.930000000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658321228352',\r\n    type: 'sell-market',\r\n    'field-amount': '356.930000000000000000',\r\n    'field-cash-amount': '0.001095705871000000',\r\n    'field-fees': '0.000002191411742000',\r\n    'finished-at': '1658321228368',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '--------------',\r\n  clientOrderId: '--------------',\r\n  timestamp: 1658321228352,\r\n  datetime: '2022-07-20T12:47:08.352Z',\r\n  symbol: 'DOGE/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'sell',\r\n  price: 1, // incorrect price \r\n  average: 1, // incorrect price \r\n  cost: 356.93,\r\n  amount: 356.93,\r\n  filled: 356.93,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.000002191411742, currency: 'BTC' },\r\n  trades: [],\r\n  fees: [ { cost: 0.000002191411742, currency: 'BTC' } ]\r\n}\r\n```\r\n\r\n**DOGE/BTC (`buy`)** (everything is correct):\r\n```\r\n{\r\n  info: {\r\n    id: '-------------',\r\n    symbol: 'dogebtc',\r\n    'account-id': '-------------',\r\n    'client-order-id': '-------------',\r\n    amount: '0.001100000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658321200414',\r\n    type: 'buy-market',\r\n    'field-amount': '357.652002470982215000',\r\n    'field-cash-amount': '0.001099999999999999',\r\n    'field-fees': '0.715304004941964430',\r\n    'finished-at': '1658321200437',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '-------------',\r\n  clientOrderId: '-------------',\r\n  timestamp: 1658321200414,\r\n  datetime: '2022-07-20T12:46:40.414Z',\r\n  symbol: 'DOGE/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'buy',\r\n  price: 0.000003075615381432,\r\n  average: 0.000003075615381432,\r\n  cost: 0.0011,\r\n  amount: 357.6520024709822,\r\n  filled: 357.6520024709822,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.7153040049419644, currency: 'DOGE' },\r\n  trades: [],\r\n  fees: [ { cost: 0.7153040049419644, currency: 'DOGE' } ]\r\n}\r\n```\r\n\r\n**ADA/BTC (`sell`)**:\r\n```\r\n{\r\n  info: {\r\n    id: '-------------------',\r\n    symbol: 'adabtc',\r\n    'account-id': '-------------------',\r\n    'client-order-id': '-------------------',\r\n    amount: '53.080000000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658312671639',\r\n    type: 'sell-market',\r\n    'field-amount': '53.080000000000000000',\r\n    'field-cash-amount': '0.001197484800000000',\r\n    'field-fees': '0.000002394969600000',\r\n    'finished-at': '1658312671649',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '-------------------',\r\n  clientOrderId: '-------------------',\r\n  timestamp: 1658312671639,\r\n  datetime: '2022-07-20T10:24:31.639Z',\r\n  symbol: 'ADA/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'sell',\r\n  price: 1, // incorrect price \r\n  average: 1, // incorrect price \r\n  cost: 53.08,\r\n  amount: 53.08,\r\n  filled: 53.08,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.0000023949696, currency: 'BTC' },\r\n  trades: [],\r\n  fees: [ { cost: 0.0000023949696, currency: 'BTC' } ]\r\n}\r\n```\r\n\r\n**ADA/BTC (`buy`)** (everything is correct):\r\n{\r\n```\r\n  info: {\r\n    id: '----------------',\r\n    symbol: 'adabtc',\r\n    'account-id': '----------------',\r\n    'client-order-id': '----------------',\r\n    amount: '0.001200000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658313905637',\r\n    type: 'buy-market',\r\n    'field-amount': '53.120849933598937500',\r\n    'field-cash-amount': '0.001199999999999999',\r\n    'field-fees': '0.106241699867197875',\r\n    'finished-at': '1658313905649',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '----------------',\r\n  clientOrderId: '----------------',\r\n  timestamp: 1658313905637,\r\n  datetime: '2022-07-20T10:45:05.637Z',\r\n  symbol: 'ADA/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'buy',\r\n  price: 0.00002259,\r\n  average: 0.00002259,\r\n  cost: 0.0012,\r\n  amount: 53.12084993359894,\r\n  filled: 53.12084993359894,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.10624169986719788, currency: 'ADA' },\r\n  trades: [],\r\n  fees: [ { cost: 0.10624169986719788, currency: 'ADA' } ]\r\n}\r\n```\r\n\r\n**AST/BTC (`sell`)**:\r\n```\r\n{\r\n  info: {\r\n    id: '---------------------',\r\n    symbol: 'astbtc',\r\n    'account-id': '---------------------',\r\n    'client-order-id': '---------------------',\r\n    amount: '286.000000000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658322127349',\r\n    type: 'sell-market',\r\n    'field-amount': '286.000000000000000000',\r\n    'field-cash-amount': '0.001071140000000000',\r\n    'field-fees': '0.000002142280000000',\r\n    'finished-at': '1658322127363',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '---------------------',\r\n  clientOrderId: '---------------------',\r\n  timestamp: 1658322127349,\r\n  datetime: '2022-07-20T13:02:07.349Z',\r\n  symbol: 'AST/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'sell',\r\n  price: 1, // incorrect price \r\n  average: 1, // incorrect price \r\n  cost: 286,\r\n  amount: 286,\r\n  filled: 286,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.00000214228, currency: 'BTC' },\r\n  trades: [],\r\n  fees: [ { cost: 0.00000214228, currency: 'BTC' } ]\r\n}\r\n```\r\n\r\n**AST/BTC (`buy`)** (everything is correct):\r\n```\r\n{\r\n  info: {\r\n    id: '-------------------',\r\n    symbol: 'astbtc',\r\n    'account-id': '-------------------',\r\n    'client-order-id': '-------------------',\r\n    amount: '0.001100000000000000',\r\n    price: '0.0',\r\n    'created-at': '1658322121418',\r\n    type: 'buy-market',\r\n    'field-amount': '287.206266318537859000',\r\n    'field-cash-amount': '0.001099999999999999',\r\n    'field-fees': '0.574412532637075718',\r\n    'finished-at': '1658322121433',\r\n    source: 'spot-api',\r\n    state: 'filled',\r\n    'canceled-at': '0'\r\n  },\r\n  id: '-------------------',\r\n  clientOrderId: '-------------------',\r\n  timestamp: 1658322121418,\r\n  datetime: '2022-07-20T13:02:01.418Z',\r\n  symbol: 'AST/BTC',\r\n  type: 'market',\r\n  timeInForce: 'IOC',\r\n  side: 'buy',\r\n  price: 0.00000383,\r\n  average: 0.00000383,\r\n  cost: 0.0011,\r\n  amount: 287.20626631853787,\r\n  filled: 287.20626631853787,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.5744125326370757, currency: 'AST' },\r\n  trades: [],\r\n  fees: [ { cost: 0.5744125326370757, currency: 'AST' } ]\r\n}\r\n```\r\n\r\n- OS: Debian (Docker)\r\n- Programming Language version: NodeJS, JavaScript\r\n- CCXT version: PRO 1.1.93",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14424/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2022-07-21T21:51:00Z",
        "body": "@wunderb1t it's working for me, what version of ccxt are you using?\r\n\r\n```\r\n {\r\n    info: {\r\n      id: '589729003249292',\r\n      symbol: 'btcusdt',\r\n      'account-id': '43108158',\r\n      'client-order-id': 'AA03022abce87ef7f7-f1b5-4fcf-a2ad-201bb60d33c6',\r\n      amount: '0.000100000000000000',\r\n      price: '0.0',\r\n      'created-at': '1658440131091',\r\n      type: 'sell-market',\r\n      'field-amount': '0.000100000000000000',\r\n      'field-cash-amount': '2.315957000000000000',\r\n      'field-fees': '0.003705531200000000',\r\n      'finished-at': '1658440131114',\r\n      source: 'spot-api',\r\n      state: 'filled',\r\n      'canceled-at': '0'\r\n    },\r\n    id: '589729003249292',\r\n    clientOrderId: 'AA03022abce87ef7f7-f1b5-4fcf-a2ad-201bb60d33c6',\r\n    timestamp: 1658440131091,\r\n    datetime: '2022-07-21T21:48:51.091Z',\r\n    lastTradeTimestamp: undefined,\r\n    symbol: 'BTC/USDT',\r\n    type: 'market',\r\n    timeInForce: undefined,\r\n    postOnly: undefined,\r\n    side: 'sell',\r\n    price: 23159.57,\r\n    stopPrice: undefined,\r\n    average: 23159.57,\r\n    cost: 2.315957,\r\n    amount: 0.0001,\r\n    filled: 0.0001,\r\n    remaining: 0,\r\n    status: 'closed',\r\n    fee: { cost: 0.0037055312, currency: 'USDT' },\r\n    trades: [],\r\n    fees: [ [Object] ]\r\n  }\r\n```"
      },
      {
        "user": "wunderb1t",
        "created_at": "2022-07-22T08:41:50Z",
        "body": "- Programming Language: NodeJS, JavaScript\r\n- CCXT version: PRO 1.1.93 (CCXT: 1.90.44)"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-11T15:04:20Z",
        "body": "@wunderb1t can you please post a further update on this issue? CCXT pro has been integrated into CCXT.\r\nplease update your code, retest it and let us know. If the issue is gone, please consider marking the issue as \"closed\"."
      },
      {
        "user": "ttodua",
        "created_at": "2024-11-08T11:37:42Z",
        "body": "late reply, but upon testing I see no issue with same mentioned symbols. \r\nlet us know if still any issue"
      }
    ]
  },
  {
    "number": 14382,
    "title": "How can I open both a long and short position on a single market [Kucoin Futures]?",
    "created_at": "2022-07-16T23:23:54Z",
    "closed_at": "2024-11-08T10:48:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14382",
    "body": "If I place a long market order it'll automatically open a position on kucoin futures. If I place a short market order right after it, it'll deduct it from the total existing position.\r\n\r\nHow can I create an short position independent from others (in python)?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14382/comments",
    "author": "RoscoeTheDog",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2024-11-08T10:48:15Z",
        "body": "Kucoin futures does not support \"Hedge\" mode, which is what you describe (where you can have both long and short positions open parallelly).\r\nlet us know if you have any issues"
      }
    ]
  },
  {
    "number": 14369,
    "title": "What kind of AMM, orderbook strategies are exist based on ccxt?",
    "created_at": "2022-07-15T06:10:09Z",
    "closed_at": "2024-11-07T19:33:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14369",
    "body": "I want to replace AMM bot on CEX to AMM that I create.\r\n\r\nI thought implementing strategy that made myself is not close to good strategy.\r\n\r\nCould you let me know what kind of AMM, orderbook strategies that can be used on CEX?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14369/comments",
    "author": "copyNdpaste",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-09-08T14:14:50Z",
        "body": "I don't remind any publicly shared ready-made AMM systems based on CCXT, but you might try to search thoroughly across internet or github. Basically, you need to search a generic/descriptionary approaches to good AMM strategies, and use CCXT (you need to have at least basic programming skills, if not advanced) to turn the conceptual logic into codes/systems. \r\nI'll leave the topic open for further answers"
      }
    ]
  },
  {
    "number": 14130,
    "title": "When ccxtpro will be free?",
    "created_at": "2022-06-30T17:47:39Z",
    "closed_at": "2022-07-01T05:07:37Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14130",
    "body": "What is exact date of ccxtpro free release?\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14130/comments",
    "author": "kaanguven",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2022-06-30T18:12:20Z",
        "body": "Hi @flav1ooo we don't have an exact date except for as soon as we are ready to release it. Currently this is looking to be around the end of July / beginning of August "
      },
      {
        "user": "kaanguven",
        "created_at": "2022-06-30T19:57:30Z",
        "body": "> Hi @flav1ooo we don't have an exact date except for as soon as we are ready to release it. Currently this is looking to be around the end of July / beginning of August\r\n\r\nAll currently supported features will be supported at that time, right?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-07-01T05:07:37Z",
        "body": "@frosty00 yes, that is correct, we're going to release it soon."
      }
    ]
  },
  {
    "number": 13895,
    "title": "How to judge whether the stop-loss order is triggered?",
    "created_at": "2022-06-16T13:40:10Z",
    "closed_at": "2022-06-20T15:28:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13895",
    "body": "When the price falls, the stop-loss order may be triggered. How to judge whether the stop-loss order is triggered?\r\nthe code as follows:\r\n```\r\nimport ccxt\r\nimport time\r\nfrom pprint import pprint\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nprint(\"CCXT Version:\", ccxt.__version__)\r\nmarkets = ftx.load_markets()\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'stop'\r\nside = 'sell'\r\nprice = None\r\ndrop_btc_price = btc_maket_price - btc_maket_price * 0.02\r\nparams = {\r\n    'stopPrice': drop_btc_price,\r\n}\r\norder2 = ftx.create_order(symbol, type, side, btc_amount, price, params)\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13895/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-06-20T15:28:00Z",
        "body": "Hello @qwe231cvb,\r\n\r\nThere are two approaches here you can follow:\r\n\r\n**First**, periodically poll the exchange using REST to check the order state.\r\n\r\nExample:\r\n\r\n```Python\r\n\r\norder = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\norder_id = order['id']\r\n\r\n# every 5 seconds will fetch the order info\r\nwhile True\r\n    order_info = ftx.fetch_order(id)\r\n    if order_info['status'] !== 'open':\r\n         print('order triggered')\r\n         break\r\n    time.sleep(5) \r\n```\r\n\r\nThe first approach is easy to implement but less efficient and more resource-demanding. Alternatively, you could use the WebSockets version of ccx, ccxt.pro and subscribe to order updates to get that information in real-time. \r\n\r\nSomething like this:\r\n\r\n```Python\r\n\r\nimport asyncio\r\nimport ccxtpro\r\n\r\nftx = ccxtpro.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\ncreated_id = XXX\r\norder_symbol = 'BTC/USDT'\r\n\r\nasync def loop(exchange, symbol):\r\n    while True:\r\n        orders = await exchange.watch_orders(symbol)\r\n        for order in orders:\r\n            if order['id'] === created_id and order['status'] !== 'open':\r\n                print('Order was triggered!')\r\n\r\nasync def main():\r\n    await loop(ftx, order_symbol)\r\n    await exchange.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n```\r\n\r\nThe latter approach is the most effective one but requires some knowledge of Websockets and asynchronous programming. \r\n\r\n\r\n\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 13889,
    "title": "Consistent way to get filled market orders",
    "created_at": "2022-06-16T07:04:06Z",
    "closed_at": "2022-07-05T11:07:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13889",
    "body": "- Programming Language version: python\r\n- CCXT version: '1.77.5'\r\n\r\nI am trying to create a dca bot that can work on various exchanges. I have trouble retrieving the results (price, amount, cost, filled ...) of market orders in a way that works consistently regardless of the exchange you choose.\r\n\r\nWith Binance, I only need to look at the results of: \r\n```\r\norder = self.exchange.create_order(symbol, type_order, side, amount, price)\r\n```\r\nBut I realized that for other exchanges, as FTX, that doesn't work. So, I have to fetch_order using the order ID: \r\n```\r\norder = self.exchange.create_order(symbol, type_order, side, amount, price)\r\norder = self.exchange.fetch_order(order['id'], symbol)\r\n```\r\nI thought the above would resolve any problem, since it does work with FTX. Surprisingly, the above doesn't work with Kucoin. Even after fetch_order, the fields are null/zero and the \"status\" is still \"open\". \r\n\r\nI thought maybe I need to give some time to the exchange to fill the order, so I wrote the following:\r\n```\r\norder = self.exchange.create_order(symbol, type_order, side, amount, price)\r\n# for some exchanges (as FTX) the order must be retrieved to be updated\r\nwaiting_time = 0.25; total_time = 0\r\nwhile order['status'] == 'open':\r\n        if total_time > 1:\r\n               raise Exception(\"The exchange did not return a closed order\")\r\n        time.sleep(waiting_time)  # let's give the exchange some time to fill the order\r\n        order = self.exchange.fetch_order(order['id'], symbol)\r\n        total_time += waiting_time\r\n```\r\n But, it's even worse now. Now, the \"status\" field is null too. \r\n\r\nHow can I collect the result of a market order in a reliable way (i.e., that works on every (or almost all) exchanges)? Thank you!\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13889/comments",
    "author": "CodingCryptoTrading",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-06-24T04:35:57Z",
        "body": "Some exchanges won't return all the fields, so CCXT fills in the fields that are available, and sets the field to None otherwise. \r\n\r\nYou can look inside the value for `info` to see if there's other information that you might find useful, and if you notice a value in info that could be used for one of the fields that's set to None, then we can update it.\r\n\r\nIt's also possible that the exchange api has posted a new api endpoint that we haven't seen yet, so if you notice something on the exchange api, we could update that too\r\n\r\n> Even after fetch_order, the fields are null/zero and the \"status\" is still \"open\".\r\n\r\nWhat should it be? Why would calling `fetch_order` change the status of the order to other than open?"
      },
      {
        "user": "CodingCryptoTrading",
        "created_at": "2022-06-25T09:57:16Z",
        "body": "I was referring to very basic fields of a **market order**, such as  *price*, *amount*, *cost* and *filled*. \r\n\r\nActually, calling `fetch_order` after a `create_order` does populate the missing fields in FTX. It also does work for kucoin, but it seems that I have to wait some time to ensure that the market order is filled and the position is closed. \r\nIndeed, I found out that the code I posted above works if I replace the while condition from \r\n```while order['status'] == 'open':``` \r\n to:\r\n```while order['status'] != 'closed'):```\r\n\r\nI'm just wondering if this strategy will work for every exchange. Or perhaps there is a more reliable strategy, such as fetching trades?\r\n\r\nThanks\r\n\r\n\r\n\r\n "
      },
      {
        "user": "samgermain",
        "created_at": "2022-07-05T08:21:51Z",
        "body": "> I was referring to very basic fields of a **market order**, such as  *price*, *amount*, *cost* and *filled*. \r\n\r\nNo matter how basic they are, if the exchange doesn't return them, then we can't provide them in the response. You can double check the info parameter in the response and if the information isn't in there then we can't provide it.\r\n\r\n> I'm just wondering if this strategy will work for every exchange. Or perhaps there is a more reliable strategy, such as fetching trades?\r\n\r\n`fetchMyTrades`, `fetchOrder`, `fetchClosedOrders` are the only kinds of methods I can think of that would work for what you want\r\n"
      },
      {
        "user": "CodingCryptoTrading",
        "created_at": "2022-07-05T11:07:04Z",
        "body": "Ok, thanks"
      }
    ]
  },
  {
    "number": 13886,
    "title": "How can I sell all of a specific token in my account?",
    "created_at": "2022-06-15T23:35:54Z",
    "closed_at": "2022-08-25T17:21:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13886",
    "body": "\r\n- OS: OSX\r\n- Programming Language version: python3.9\r\n- CCXT version: latest\r\n\r\nI want to sell all of the AXS (a smaller-cap token) in my FTX account.\r\nMy FTX account has 130.8238727 AXS  in it.\r\nWhen I run ftx.fetchBalance(), I can pull that number, and I save it as position_info['spot_held'].\r\n\r\nI then try to sell it all on the spot market.\r\n\r\n```\r\nsubmission = ftx.create_order (\"AXS/USD\", 'market', side='sell', amount=abs(position_info[\"spot_held\"]),  params={\"reduceOnly\": True})\r\n```\r\n\r\nBut I am then greeted with an Insufficient Funds error:\r\n\r\n```\r\nccxt.base.errors.InsufficientFunds: ftx {\"success\":false,\"error\":\"Not enough balances\"}\r\n```\r\n\r\nWhy can't I sell all of the tokens in my account, and if I can't sell them all, how can I pass an argument to sell as many as allowed?\r\n\r\nThank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13886/comments",
    "author": "shep-analytics",
    "comments": [
      {
        "user": "pier0074",
        "created_at": "2022-08-21T15:04:44Z",
        "body": "Hello @shep-analytics \r\n\r\nThe code you are using works fine with me.\r\nI assume the error comes from the fact that you are trying to sell more than what you have.\r\n\r\nCould you please share the result of ftx.fetchBalance() ?\r\n\r\nNote that there are 2 balances for a coin: free and total. \r\nYou can only sell the free balance which is equal to total - all pending orders that you have placed.\r\nSo if you have current pending orders for AXS, they are not considered free anymore and cannot be sold.\r\nYou can either cancel all orders on AXS and execute your code again, or sell only the free balance of AXS.\r\n\r\nHope it helps."
      },
      {
        "user": "ttodua",
        "created_at": "2022-08-25T17:21:55Z",
        "body": "@pier0074 thank you for your assistance to OP , appreciated !\r\n@shep-analytics can you share your follow-up about that incident - have you been able to figure out the reason?\r\nside-note: `reduceOnly` flag wouldnt do anything extra, as it's spot order for sell, so it was enough. for swap's `reduceOnly` flag plays important role, but that was not your issue. as @pier0074  noted, ccxt works well with that code and have no issues. I doubt that there might have been some accidental issue in userland code. \r\nAlso, consider updating ccxt to latest version and let us know if you have other issues.\r\n"
      }
    ]
  },
  {
    "number": 13831,
    "title": "How to set market take profit?",
    "created_at": "2022-06-13T18:47:53Z",
    "closed_at": "2022-06-15T06:46:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13831",
    "body": "The code as follows:\r\n```\r\nimport ccxt\r\nimport time\r\nfrom pprint import pprint\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\norder = ftx.create_order(symbol, type, side, btc_amount, params)\r\n```\r\n\r\nThe errors as follows:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\contract.py\", line 26, in <module>\r\n    order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\ccxt\\ftx.py\", line 1625, in create_order\r\n    raise InvalidOrder(self.id + ' createOrder() does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported')\r\nccxt.base.errors.InvalidOrder: ftx createOrder() does not support order type takeProfit, only limit, market, stop, trailingStop, or takeProfit orders are supported",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13831/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2022-06-14T01:58:51Z",
        "body": "please update to the latest version of ccxt, this issue should be fixed."
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-14T11:19:27Z",
        "body": "> please update to the latest version of ccxt, this issue should be fixed.\r\n\r\nI have downloaded version 1.87.24 and still the problem persists."
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-14T18:10:40Z",
        "body": "Who anyone knows how to do?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-14T20:03:07Z",
        "body": "@qwe231cvb you have to upgrade to the most recent version of CCXT, but not only that, you also have to make sure that you have upgraded correctly by printing the actual CCXT version that you are using in runtime. \r\n\r\nLet us know if this does not work:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\n\r\nprint(\"CCXT Version:\", ccxt.__version__)\r\n\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\norder = ftx.create_order(symbol, type, side, btc_amount, params)\r\n```"
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-15T06:04:06Z",
        "body": "> @qwe231cvb you have to upgrade to the most recent version of CCXT, but not only that, you also have to make sure that you have upgraded correctly by printing the actual CCXT version that you are using in runtime.\r\n> \r\n> Let us know if this does not work:\r\n> \r\n> ```python\r\n> import ccxt\r\n> from pprint import pprint\r\n> \r\n> \r\n> print(\"CCXT Version:\", ccxt.__version__)\r\n> \r\n> \r\n> ftx = ccxt.ftx({\r\n>     'apiKey': 'my_apikey',\r\n>     'secret': 'my_secret',\r\n> })\r\n> \r\n> markets = exchange.load_markets()\r\n> \r\n> # exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n> \r\n> symbol = 'BTC/USD:USD'\r\n> ftx.load_markets()\r\n> market = ftx.market(symbol)\r\n> btc_maket_price = float(market['info']['price'])\r\n> btc_amount = 20 / btc_maket_price\r\n> create_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n> \r\n> type = 'takeProfit'\r\n> side = 'sell'\r\n> rise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\n> params = {\r\n>     'stopPrice': rise_btc_price,\r\n> }\r\n> order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n> ```\r\n\r\nThe problem persists, here is the printout:\r\nCCXT Version: 1.87.24\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\contract.py\", line 30, in <module>\r\n    order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\ccxt\\ftx.py\", line 1625, in create_order\r\n    raise InvalidOrder(self.id + ' createOrder() does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported')\r\nccxt.base.errors.InvalidOrder: ftx createOrder() does not support order type takeProfit, only limit, market, stop, trailingStop, or takeProfit orders are supported\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-15T06:46:05Z",
        "body": "@qwe231cvb you're making a market takeProfit order, so you have to specify price=None or the actual limit price:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\n\r\nprint(\"CCXT Version:\", ccxt.__version__)\r\n\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\nprice = None  # or your takeProfit limit price  # -------- ↓\r\norder = ftx.create_order(symbol, type, side, btc_amount, price, params)\r\n```\r\n\r\nHope that answers your question."
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-15T07:35:56Z",
        "body": "> @qwe231cvb you're making a market takeProfit order, so you have to specify price=None or the actual limit price:\r\n> \r\n> ```python\r\n> import ccxt\r\n> from pprint import pprint\r\n> \r\n> \r\n> print(\"CCXT Version:\", ccxt.__version__)\r\n> \r\n> \r\n> ftx = ccxt.ftx({\r\n>     'apiKey': 'my_apikey',\r\n>     'secret': 'my_secret',\r\n> })\r\n> \r\n> markets = exchange.load_markets()\r\n> \r\n> # exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n> \r\n> symbol = 'BTC/USD:USD'\r\n> ftx.load_markets()\r\n> market = ftx.market(symbol)\r\n> btc_maket_price = float(market['info']['price'])\r\n> btc_amount = 20 / btc_maket_price\r\n> create_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n> \r\n> type = 'takeProfit'\r\n> side = 'sell'\r\n> rise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\n> params = {\r\n>     'stopPrice': rise_btc_price,\r\n> }\r\n> price = None  # or your takeProfit limit price  # -------- ↓\r\n> order = ftx.create_order(symbol, type, side, btc_amount, price, params)\r\n> ```\r\n> \r\n> Hope that answers your question.\r\n\r\nIt is ok now."
      }
    ]
  },
  {
    "number": 13818,
    "title": "In bybit, fetch_order returns None",
    "created_at": "2022-06-13T08:54:52Z",
    "closed_at": "2022-06-13T13:01:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13818",
    "body": "- OS: Ubuntu\r\n- Programming Language version: Python\r\n- CCXT version: 1.85.51\r\n\r\n```\r\nimport ccxt\r\nbybit = ccxt.bybit({...})\r\n\r\nsymbol = 'GLMR/USDT:USDT'\r\nresult1 = bybit.create_order(symbol=symbol)\r\nresult2 = bybit.fetch_order(id=result1['id'], symbol=symbol)\r\nprint(result2)\r\n```\r\n\r\n```\r\nNone\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13818/comments",
    "author": "kjnh10",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-06-13T11:13:03Z",
        "body": "Hello @kjnh10, can you please post a verbose output so that we can analyze the request and response?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-06-13T11:14:23Z",
        "body": "@kjnh10 Actually I would start by updating the ccxt version I suspect that bug was fixed recently so updating it might solve your problem"
      },
      {
        "user": "kjnh10",
        "created_at": "2022-06-13T11:55:45Z",
        "body": "I has updated to 1.87.12, and it seems resolves this problem.\r\n\r\nThanks,"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-06-13T13:01:00Z",
        "body": "@kjnh10 Happy to hear it, since the issue is solved I'm going to close the issue."
      }
    ]
  },
  {
    "number": 13790,
    "title": "Is it possible to fetch history data of a delisted pair like LUNABTC?",
    "created_at": "2022-06-11T14:29:19Z",
    "closed_at": "2022-06-11T20:25:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13790",
    "body": "The main question was is it possible to fetch data history of LUNABTC, but I asked it in more general format. As we know Binance de-listed `LUNA` and re-added. When this is done `LUNABTC` pair is removed and its history also wiped out. \r\n\r\nI was wondering somehow is it possible to fetch `LUNABTC` pairs history price data even it is de-listed on Binance? \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13790/comments",
    "author": "avatar-lavventura",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-06-11T20:25:16Z",
        "body": "You can fetch LUNA/BTC history with CCXT:\r\n\r\n```Python\r\nimport ccxt\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\ndef table(values):\r\n    first = values[0]\r\n    keys = list(first.keys()) if isinstance(first, dict) else range(0, len(first))\r\n    widths = [max([len(str(v[k])) for v in values]) for k in keys]\r\n    string = ' | '.join(['{:<' + str(w) + '}' for w in widths])\r\n    return \"\\n\".join([string.format(*[str(v[k]) for k in keys]) for v in values])\r\n\r\n\r\nexchange = ccxt.binance()\r\nmarkets = exchange.load_markets()\r\nsymbol = 'LUNA/BTC'\r\nsince = exchange.parse8601('2021-01-01T00:00:00Z')\r\nohlcvs = exchange.fetch_ohlcv(symbol, '1h', since)\r\nprint(table([[exchange.iso8601(int(o[0]))] + o[1:] for o in ohlcvs]))\r\n```"
      },
      {
        "user": "avatar-lavventura",
        "created_at": "2022-06-13T09:19:06Z",
        "body": "It fetches only 21 days is it normal like: from `2021-01-01T00:00:00.000Z` to `2021-01-21T19:00:00.000Z`?"
      }
    ]
  },
  {
    "number": 13730,
    "title": "About canceling contract orders",
    "created_at": "2022-06-09T17:30:46Z",
    "closed_at": "2022-11-30T04:50:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13730",
    "body": "The exchange used is FTX and the programming language used is Python.\r\n\r\nSuppose I have set take profit and stop loss orders for the contract, if the stop loss order has been filled,\r\n\r\nSo will the exchange automatically cancel the take profit order?\r\nAnd how to cancel the contract order? How is the code implemented?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13730/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "sherhan",
        "created_at": "2022-06-11T02:10:12Z",
        "body": "This is not possible. You will have to cancel the other order manually.\n\nI would suggest creating a celery worker running in the background to monitor and cancel opposing orders if one order in the set gets filled."
      },
      {
        "user": "Dan-krm",
        "created_at": "2022-11-30T04:50:10Z",
        "body": "Closing this now"
      }
    ]
  },
  {
    "number": 13712,
    "title": "Total balance of a account",
    "created_at": "2022-06-08T14:40:50Z",
    "closed_at": "2022-06-09T12:20:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13712",
    "body": "Hi, I am not very good in programming so I tried googling on how to use CCXT to get the overall account balance using the \"balance\" function, but no luck. \n\nSo I wonder if anyone can help me out. \nI am trying to get the overall account balance of any exchange, instead of just 1 assets. \n\nThank you in advance.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13712/comments",
    "author": "300Gram",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-06-08T14:49:40Z",
        "body": "Hello @300Gram, which exchange do you use?\r\n\r\nAlso, I would suggest reading the manual carefully you will find most of the things you might need there. "
      },
      {
        "user": "FabLK",
        "created_at": "2022-06-08T14:59:46Z",
        "body": "@300Gram Hello, I'm doing that for my project and this is how I proceed:\r\n\r\n1/Getting balances of every token\r\n2/For every token, find the price against USDT (if not available against BTC or ETH then against USDT) of course you can do this against USD or every currency you want\r\n3/Convert my token balances into usdEquivalent balances\r\n4/Sum all usdEquivalent balances \r\n\r\nThis is how I proceed for Binance (this code may be not optimal but it gives you an idea): \r\n**The ccxt object is self.exchange**\r\n```py\r\n        def get_balance(self):\r\n            start = time.time()\r\n            balances = self.exchange.fetch_balance()['info']['balances']\r\n            self.balance = 0\r\n\r\n            for i in balances:\r\n                if float(i['free'])!=0 or float(i['locked'])!=0:\r\n                    if i['asset'] != 'USDT':\r\n                        request = i['asset']+'/USDT'\r\n                        try:\r\n                            price = float(self.exchange.fetchTicker(request)['last'])\r\n                        except:\r\n                            try:\r\n                                request = i['asset']+'/BTC'\r\n                                price = float(self.exchange.fetchTicker(request)['last'])\r\n                                val_btc = (float(i['free'])+float(i['locked']))*price\r\n                                price = float(self.exchange.fetchTicker('BTC/USDT')['last'])\r\n                                self.balance += val_btc*price\r\n                            except:\r\n                                try:\r\n                                    request = i['asset']+'/ETH'\r\n                                    price = float(self.exchange.fetchTicker(request)['last'])\r\n                                    val_btc = (float(i['free'])+float(i['locked']))*price\r\n                                    price = float(self.exchange.fetchTicker('ETH/USDT')['last'])\r\n                                    self.balance += val_btc*price\r\n                                except:\r\n                                    print(i['asset'])\r\n\r\n                        self.balance += (float(i['free'])+float(i['locked']))*price\r\n                    else:\r\n                        self.balance += float(i['free'])+float(i['locked'])\r\n            self.latency = time.time()-start\r\n```"
      },
      {
        "user": "300Gram",
        "created_at": "2022-06-09T08:31:25Z",
        "body": "Thanks! I wonder if there is any shorter way to get this done. (i mean the simpler the better). \r\n\r\nBut thank you! Appreciate it, will try to implement into my code (: "
      },
      {
        "user": "300Gram",
        "created_at": "2022-06-09T12:20:56Z",
        "body": "> @300Gram Hello, I'm doing that for my project and this is how I proceed:\r\n> \r\n> 1/Getting balances of every token 2/For every token, find the price against USDT (if not available against BTC or ETH then against USDT) of course you can do this against USD or every currency you want 3/Convert my token balances into usdEquivalent balances 4/Sum all usdEquivalent balances\r\n> \r\n> This is how I proceed for Binance (this code may be not optimal but it gives you an idea): **The ccxt object is self.exchange**\r\n> \r\n> ```python\r\n>         def get_balance(self):\r\n>             start = time.time()\r\n>             balances = self.exchange.fetch_balance()['info']['balances']\r\n>             self.balance = 0\r\n> \r\n>             for i in balances:\r\n>                 if float(i['free'])!=0 or float(i['locked'])!=0:\r\n>                     if i['asset'] != 'USDT':\r\n>                         request = i['asset']+'/USDT'\r\n>                         try:\r\n>                             price = float(self.exchange.fetchTicker(request)['last'])\r\n>                         except:\r\n>                             try:\r\n>                                 request = i['asset']+'/BTC'\r\n>                                 price = float(self.exchange.fetchTicker(request)['last'])\r\n>                                 val_btc = (float(i['free'])+float(i['locked']))*price\r\n>                                 price = float(self.exchange.fetchTicker('BTC/USDT')['last'])\r\n>                                 self.balance += val_btc*price\r\n>                             except:\r\n>                                 try:\r\n>                                     request = i['asset']+'/ETH'\r\n>                                     price = float(self.exchange.fetchTicker(request)['last'])\r\n>                                     val_btc = (float(i['free'])+float(i['locked']))*price\r\n>                                     price = float(self.exchange.fetchTicker('ETH/USDT')['last'])\r\n>                                     self.balance += val_btc*price\r\n>                                 except:\r\n>                                     print(i['asset'])\r\n> \r\n>                         self.balance += (float(i['free'])+float(i['locked']))*price\r\n>                     else:\r\n>                         self.balance += float(i['free'])+float(i['locked'])\r\n>             self.latency = time.time()-start\r\n> ```\r\n\r\nThanks for your code! I referred some of your code and make it my own with a much simpler code (I am a beginner, so the simpler the better).  "
      }
    ]
  },
  {
    "number": 13704,
    "title": "Implementation for Bittrex of fetch_currencies breaks when Bittrex does not return a countable.",
    "created_at": "2022-06-08T07:36:10Z",
    "closed_at": "2024-08-20T18:40:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13704",
    "body": "Implementation for Bittrex of fetch_currencies breaks when Bittrex does not return a countable.\r\n\r\n- OS: CentOS\r\n- Programming Language version: PHP\r\n- CCXT version: latest\r\n\r\n```\r\n$bittrex->fetch_currencies([]);\r\n```\r\n\r\nAs to the implementation of fetch_currencies for Bittrex, ccxt has the code as shown below inside. The `$response` however might not be a countable value, and might be for example `null`, which if it is, results in the error `ErrorException count(): Parameter must be an array or an object that implements Countable`.\r\n\r\n```\r\n$response = $this->publicGetCurrencies ($params);\r\n$result = array();\r\n\r\nfor ($i = 0; $i < count($response); $i++) {\r\n// etc...\r\n```\r\n\r\nExpected some kind of Ccxt exception or simply an empty array returned.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13704/comments",
    "author": "iwanluijks",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-06-08T19:35:55Z",
        "body": "> The $response however might not be a countable value, and might be for example null\r\n\r\nCan you please paste the code you use to reproduce it or your complete verbose output with a null-response? It should have been intercepted in the error handler."
      },
      {
        "user": "iwanluijks",
        "created_at": "2022-06-09T12:50:18Z",
        "body": "The code in the issue is actually the code...\r\n\r\nWe call `$bittrex->fetch_currencies([]);`, thus `fetch_currencies` with an empty array for the `$params` argument. The first line in `fetch_currencies` is:\r\n```\r\n$response = $this->publicGetCurrencies ($params);\r\n```\r\n\r\nThat results in `$response` being `null` sometimes (not always, sometimes). And `$response` is used a few lines below that within `fetch_currencies` as:\r\n```\r\nfor ($i = 0; $i < count($response); $i++) {\r\n```\r\n\r\nwhich thus fails as `$response` is not countable..."
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-10T04:17:21Z",
        "body": "@iwanluijks we will try to add the handling for it, but it would help speed it up if you could paste your verbose output for the failing call:\r\n\r\n```PHP\r\n$bittrex->load_markets();\r\n$bittrex->verbose = true;\r\n$bittrex->fetch_currencies([]);\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-20T18:40:34Z",
        "body": "bittrex is closed"
      }
    ]
  },
  {
    "number": 13557,
    "title": "CCXT PRO part of CCXT",
    "created_at": "2022-06-04T09:52:45Z",
    "closed_at": "2022-06-05T17:03:15Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13557",
    "body": "Hi, is there an exact date set for ccxt pro to become part of ccxt? Is Q3 still the target? \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13557/comments",
    "author": "echograph",
    "comments": [
      {
        "user": "kaanguven",
        "created_at": "2022-06-05T16:48:21Z",
        "body": "What better features will come in addition to the standard ccxt"
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-05T17:02:56Z",
        "body": "> Hi, is there an exact date set for ccxt pro to become part of ccxt? Is Q3 still the target?\r\n\r\nHi @echograph ! Yes, it is still the target. We're planning it for July 2022.\r\nWe're going to post an official announcement soon.\r\n\r\n> What better features will come in addition to the standard ccxt\r\n\r\nMost of all – more responsive and faster communication. Due the underlying details WS APIs have twice lower latency compared to REST APIs, and fewer delays allow your application to react faster and be more profitable."
      }
    ]
  },
  {
    "number": 13447,
    "title": "AuthenticationError - Unable to use Kucoin sandbox with valid credentials",
    "created_at": "2022-05-26T18:56:28Z",
    "closed_at": "2022-05-27T07:48:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13447",
    "body": "- OS: MacOS 11.6\r\n- Programming Language version: node v16.10.0\r\n- CCXT version: 1.1.42\r\n\r\n```\r\nconst exchangeRef = new ccxt.kucoin({\r\n   apiKey: \"...\",\r\n   secret: \"...\",\r\n   password: \"...\"\r\n});\r\n\r\nexchangeRef.setSandboxMode(true);\r\n\r\nif (exchangeRef.has.fetchClosedOrders) {\r\n   try {\r\n      const closedOrders = await exchangeRef.fetchClosedOrders()\r\n      console.log('API closedOrders', closedOrders);\r\n   } catch (e) {\r\n      console.log(e)\r\n   }\r\n}\r\n```\r\n\r\n```\r\nAuthenticationError: kucoin KC-API-KEY not exists\r\n    at kucoin.throwExactlyMatchedException (/Users/admin/code/ccxt-test/node_modules/ccxt/js/base/Exchange.js:648:19)\r\n    at kucoin.handleErrors (/Users/admin/code/ccxt-test/node_modules/ccxt/js/kucoin.js:2654:14)\r\n    at /Users/admin/code/ccxt-test/node_modules/ccxt/js/base/Exchange.js:725:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async timeout (/Users/admin/code/ccxt-test/node_modules/ccxt/js/base/functions/time.js:203:20)\r\n    at async kucoin.fetchOrdersByStatus (/Users/admin/code/ccxt-test/node_modules/ccxt/js/kucoin.js:1388:26)\r\n    at async kucoin.fetchClosedOrders (/Users/admin/code/ccxt-test/node_modules/ccxt/js/kucoin.js:1452:16)\r\n    at async main (/Users/admin/code/ccxt-test/index.js:33:34) {\r\n  constructor: [class AuthenticationError extends ExchangeError]\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13447/comments",
    "author": "parliament718",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-26T21:44:05Z",
        "body": "@parliament718 do you use the kucoin API keys with it or the kucoin testnet API keys?"
      },
      {
        "user": "parliament718",
        "created_at": "2022-05-27T07:40:05Z",
        "body": "My apologies, I was indeed using the sandbox API keys, same ones that I used a couple days ago to successfully fetch balances, but it turns out those keys were magically deleted from my Kucoin account. \r\n\r\nI wonder if Kucoin regularly deletes sandbox keys.\r\n"
      }
    ]
  },
  {
    "number": 13415,
    "title": "Today's Profit - 3Commas stats",
    "created_at": "2022-05-24T17:24:03Z",
    "closed_at": "2022-08-14T13:49:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13415",
    "body": "- OS: Mojave\r\n- Programming Language version: Py 3.10.1\r\n- CCXT version: 1.72.37\r\n\r\nSearching for CCTX command to fetch 'today's profit' amount from 3Commas bot stats (which is listed as \"Today Profit:\" on 3Commas Overall stats)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13415/comments",
    "author": "birk151",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-08-14T13:49:23Z",
        "body": "I will mark this issue as `invalid` because there is no `3comma` implemented in CCXT, and furthermore `3comma`'s stats are out of scope. it's not even an exchange.\r\n\r\nIf you have more details about the issue you are experiencing with CCXT, let us know."
      }
    ]
  },
  {
    "number": 13392,
    "title": "Auto retry call",
    "created_at": "2022-05-22T14:48:04Z",
    "closed_at": "2022-05-22T21:47:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13392",
    "body": "Hello, \r\n\r\nWill ccxt  add support auto retry call a function for case with network issue? \r\nFor example by default retry parameters could be \r\n1) retry_attempts = 0\r\n2) retry_period = 2 sec\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13392/comments",
    "author": "YuriyTigiev",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-22T21:50:33Z",
        "body": "CCXT does not have a built-in function for that, but you can easily code it in the userland:\r\n\r\n```JavaScript\r\n    async retry (exchange, attempts, delay, method, ... args) {\r\n        for (let i = 0; i < attempts; i++) {\r\n            try {\r\n                return await exchange[method] (... args)\r\n            } catch (e) {\r\n                // retry\r\n                await exchange.sleep (delay) // delay in milliseconds\r\n            }\r\n        }\r\n        throw new ccxt.ExchangeError (exchange.id + ' ' + method + ' () failed after ' + attempts.toString () + ' attempts')\r\n    }\r\n```"
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-05-22T22:49:42Z",
        "body": "I had the similar approach, but question is - could we implement this code on the library level?"
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-05-22T23:12:28Z",
        "body": "What is equivalent of code for  python for the string - `return await exchange[method] (... args)`"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-22T23:16:26Z",
        "body": "Python async:\r\n\r\n```Python\r\n    async def retry(exchange, attempts, delay, method, *args):\t\r\n        for i in range(0, attempts):\t\r\n            try:\t\r\n                return await getattr(exchange, method)(*args)\t\r\n            except Exception as e:\t\r\n                # retry\t\r\n                await exchange.sleep(delay)  # delay in milliseconds\r\n        raise ExchangeError(exchange.id + ' ' + method + ' () failed after ' + str(attempts) + ' attempts')\r\n```\r\n\r\nPython sync:\r\n\r\n```Python\r\n    def retry(exchange, attempts, delay, method, *args):\t\r\n        for i in range(0, attempts):\t\r\n            try:\t\r\n                return getattr(exchange, method)(*args)\t\r\n            except Exception as e:\t\r\n                # retry\t\r\n                exchange.sleep(delay)  # delay in milliseconds\t\r\n        raise ExchangeError(exchange.id + ' ' + method + ' () failed after ' + str(attempts) + ' attempts')\r\n```"
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-05-22T23:26:00Z",
        "body": "Does current version of library support auto reconnect? \r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-22T23:30:15Z",
        "body": "@YuriyTigiev CCXT Pro does auto-reconnection with the WS API, and CCXT is a RESTful API. There is no such thing as a connection in terms of CCXT, just HTTPS requests and responses over a TCP/IP, all connection-related things are abstracted away, but can be configured and overrided."
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-05-22T23:33:20Z",
        "body": "It's means I don't need to use previous code if I use ccxt.pro. Correct ?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-23T05:50:20Z",
        "body": "> It's means I don't need to use previous code if I use ccxt.pro. Correct ?\r\n\r\nNope, the above code is not a part of CCXT or CCXT Pro. The code above does not handle reconnections, it just handles a number of attempts/retries on HTTPS failures, if any. Don't confuse retry-calls over HTTPS with reconnections over WS, they're different things. The code above does not involve any type of connection at all. CCXT Pro is using WS connections, but that is not related to the above code either."
      },
      {
        "user": "YuriyTigiev",
        "created_at": "2022-05-23T12:30:46Z",
        "body": "when approximately ccxt.pro will be free to use ?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-23T12:33:29Z",
        "body": "@YuriyTigiev in July 2022."
      }
    ]
  },
  {
    "number": 13326,
    "title": "Fill or Kill limit order doesn't fill although the orderbook shows it should",
    "created_at": "2022-05-18T13:10:20Z",
    "closed_at": "2022-08-14T13:43:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13326",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.10.2\r\n- CCXT version: 1.82.94\r\n\r\nHi! This is my first issue submitting, so I'll try to do my best.\r\nThis is a question, not an issue :D (I dont know if I have to label it or the team does it)\r\n\r\nMy script has 2 clear phases:\r\n - Checks orderbook at exchange 1\r\n - Puts a limit order based on that orderbook in exchange 2 with time in force: fill or kill\r\n\r\nAswell, I monitorize the price differences between both exchanges all the time.\r\n\r\nThere is no error code, simply I don't understand why sometimes it executes correctly but not always, it is not consistent.\r\n\r\nHere is the code where I check the orderbook and place an order based on that.\r\n\r\n```\r\nsask = 9999999999\r\nsbid = 9999999999\r\nparams = {\r\n    'timeInForce': 'FOK',\r\n}\r\n\r\norderbook = exchange_1.fetch_order_book(symbol_1)\r\nsbid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None\r\nsask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None\r\n\r\nif sbid != 9999999999 and sask != 9999999999:\r\n    askTarget = sask + (sask * profit)\r\n    bidTarget = sbid - (sbid * profit)\r\n\r\n    try:\r\n        if direction == \"sold\":\r\n            cqty = min(((qtyUSD/bidTarget)*0.997), qtyCoin)\r\n            buy_order = exchange_2.create_limit_buy_order(symbol_2, cqty, bidTarget, params)\r\n            sell_order = None\r\n        elif direction == \"bought\":\r\n            cqty = min(((qtyUSD/askTarget)*0.997), qtyCoin)\r\n            sell_order = exchange_2.create_limit_sell_order(symbol_2, cqty, askTarget, params)\r\n            buy_order = None\r\n```\r\n\r\nI checked and monitorized the mayority of the possible problems and I discarded some issues.\r\n\r\n - The order is set always at the price I want correctly.\r\n - The amount is correct always.\r\n - I manage the exceptions but I deleted them from the code snippet in order to be easier to read and understand it, so it is not exception management issue.\r\n \r\nI'm working with kucoin, Binance, Ftx, bybit etc.\r\n\r\nI noticed this hapens trading in spot, but when I apply the same code in futures, it executes perfectly, always.\r\n\r\nSo I monitorized the script printing the variables in the phases, and this is an example of one of the failed ones:\r\n\r\n```\r\n---------------  binance  -  kucoin  -  AGLD/USDT  -  AGLD/USDT  -  0.155  ---------------\r\n(All from Kucoin): bid target:  0.5761 ask:  0.585 ask target:  0.5809 bid:  0.5821\r\n(Actual placed order): Sell Order price:  0.5808989999999999\r\n(*)Margin:  0.2067\r\n(first layer of orderbook [price, amount]): [0.5821, 119.0119]\r\n```\r\n* Margin: Price difference between exchange 1 and echange 2, calculated like that: ((bid/askTarget)-1). Being both from kucoin. (askTarget is calculated with binance price as seen in the code snippet). So when margin > 0 the bid is actually bigger than my sell price, so it should fill.\r\n\r\n\r\nIn this case, I'm putting a sell order at kucoin at my target which is: ask target:  0.5809.\r\nSo as you can see the sell order sets perfectly at price: 0.5808989999999999\r\nAnd the bid in that moment is 0.5821, which is bigger.\r\n\r\nI though that a possible reason why it doesn't fill, could be that, as I use Time in Force: 'FOK', the amount of the first bid could be smaller than my order, but as you can see at the orderbook stamp, [0.5821, 119.0119], there is 119 coins at price 0.5821, and my order amount was 35.\r\n\r\nI use Threading and execute this every 0.35 seconds. So it could be that too.\r\n\r\nSo I don't really know why it doesn't fill. Any idea?\r\n\r\nThere is another cases where the order is filled when the margin is between -1 and -0.6, which does not make much sense, as the bid should be much lower than my sell order.\r\n\r\nThanks in advance, and I'm sorry if there is gramatical errors (as I'm not native speaker) or something I did bad. This is my first issue submit, so feel free to correct me :D\r\n  ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13326/comments",
    "author": "echograph",
    "comments": [
      {
        "user": "echograph",
        "created_at": "2022-05-31T07:05:46Z",
        "body": "Hi, I've been testing more with this issue, and I have some conclusions. So, I've tested a lot more, and the program executes when margins suggest it shouldn't, and it does not execute when it should. That makes me think that fill or kill limit orders doesn't match the orderbook orders but the market orders instead. That would explain why the orders fill when my orders are in a price where it shouldn't fill (a 'FoK' limit buy order at any price shouldn't fill if there are more buy orders above).\r\n\r\nCould this be possible?\r\nDo you have any idea what's happening?\r\n\r\nIf you need more test cases or more code or explanations just tell me :D\r\n\r\nThanks!"
      },
      {
        "user": "ttodua",
        "created_at": "2022-08-14T13:43:22Z",
        "body": "I will add my thoughts:\r\n1) orderbooks doesn't always reflect the truth (depends on exchange quality). there are many cases when \"top-tier\" exchanges (to name a few, I've myself met gate.io, mexc, etc) having fake entries in data/orderbook, while there are actually no real orders. also washtrading... So, when you expect that there is `X` amount in orderbook, it might not be in reality.\r\n2) the second thing, which I think it more realistically related to your issue, is that, when you fetch orderbook data, then already i.e. 1-2 seconds might be gone before your next script-decided order reaches exchange server. So, by that time, that orderbook entry might already by taken by someone other trader (don't think that you are the only one who trades arbitrage, and ppl have more strong servers/scripts). So, it might be the problem, which you might not be able to fix\r\n3) also, last note, are you sure the parameter keyname `timeInForce` is accepted on `exchange2`? ensure that.\r\n\r\nlet us know if you have any further issue with CCXT."
      }
    ]
  },
  {
    "number": 13302,
    "title": "Can you help me with getting number of max leverage of contract on gateio?",
    "created_at": "2022-05-17T12:52:52Z",
    "closed_at": "2022-05-17T13:40:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13302",
    "body": "Doing\r\n\r\n```\r\nprint(gateio_futures.fetch_contract_markets())\r\n```\r\nGetting\r\n```\r\nTypeError: gateio.fetch_contract_markets() missing 1 required positional argument: 'params'\r\n```\r\nDont know what to do with it. Can you show the example of code how to get max leverage for pair GMT/USDT on futures?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13302/comments",
    "author": "KindSpidey",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-05-17T13:40:14Z",
        "body": "Hello @KindSpidey,\r\n\r\nYou should refrain from using the implicit API/ internal helper methods whenever possible, if you carefully read CCXT manual you will see that most of the information you might wanna consult is available through our unified methods in a simple and organized way.\r\n\r\nFor instance, to check the leverage limits for a certain market pair you can simply do something like this:\r\n\r\n```Python\r\nexchange = ccxt.gateio({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET_KEY',\r\n    'options': {\r\n        'defaultType': 'swap',\r\n    },\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\ntarget_market = markets['BTC/USDT:USDT']\r\nprint(target_market['limits']['leverage'])\r\n````\r\n"
      },
      {
        "user": "KindSpidey",
        "created_at": "2022-05-17T13:42:22Z",
        "body": "Thank you very much!"
      }
    ]
  },
  {
    "number": 13255,
    "title": "Is it a joke? MECX futures login",
    "created_at": "2022-05-15T10:50:23Z",
    "closed_at": "2022-05-15T10:53:23Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13255",
    "body": "I have code\r\n```\r\nmexc_futures = ccxt.mexc({\r\n    \"apiKey\": config.MEXC_API_KEY,\r\n    \"secret\": config.MEXC_SECRET_KEY,\r\n    \"options\": {'defaultType': 'future' }\r\n})\r\n```\r\nAnd got\r\n```\r\nccxt.base.errors.ExchangeError: mexc does not support 'future' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\r\n```\r\nWhat am i supposed to do?)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13255/comments",
    "author": "KindSpidey",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-15T10:52:16Z",
        "body": "@KindSpidey sorry, it's a misleading erroneous message, it actually supports either `spot` or `swap` (for perpetual futures aka swaps). In this case, you should use `swap` instead of `future`. Will fix the message in the upcoming build. Thank you for pointing it out."
      },
      {
        "user": "KindSpidey",
        "created_at": "2022-05-15T10:55:08Z",
        "body": "Thanks, now it works"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-15T10:57:07Z",
        "body": "@KindSpidey i've pushed a fix to that message in CCXT 1.82.53 (the new build will arrive in 20 minutes). Thank you for your feedback!"
      }
    ]
  },
  {
    "number": 13230,
    "title": "Binance 1W candle missing",
    "created_at": "2022-05-13T09:43:30Z",
    "closed_at": "2022-05-13T12:58:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13230",
    "body": "Hi guys,\r\n\r\nIn binance for 1W timeframe we can get only 200 - 230 candles why? But for other timeframe we can get 1000 candles. Why 1W timeframe candles are missing.? Is that missing candles data available in the ccxt pro?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13230/comments",
    "author": "SudheendraSoftionik",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-13T12:56:50Z",
        "body": "@SudheendraSoftionik which symbol is it? 200-230 weekly candles is 4 years of history. Not all coins and pairs existed back then. The exchange itself appeared 5 years ago in 2017. Some coins and pairs that were listed this year will have less than 52 candle-weeks of history, obviously."
      }
    ]
  },
  {
    "number": 13114,
    "title": "Hi I need a solution! with limit order > wait until order execute",
    "created_at": "2022-05-04T14:33:25Z",
    "closed_at": "2022-05-04T15:14:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13114",
    "body": "\r\n\r\n```\r\nHi, I need a solution! with limit order > wait until order execute\r\n```\r\n```\r\ndef place_buy_order(scrip, quantity, limit):\r\n    order = exchange.create_limit_buy_order(scrip, quantity, limit)#symbol amount price\r\n  # wait until the order executes Then return < SO PLS SLOVE MY PROBLAM >\r\n    return order\r\n```\r\n```\r\nEg:- when limit_buy_order is created ('BTCUSDT') It should wait.  When it successfully buys \"USDT\" to \"BTC\" Then it should return\r\n```\r\n\r\n- python\r\n- vscode\r\n- windows 11",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13114/comments",
    "author": "bidreshivaprasad",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-05-04T15:14:03Z",
        "body": "Hello @bidreshivaprasad, there are two approaches available here.\r\n\r\nFirst, on your end, periodically (every X seconds for instance) poll the exchange for the order state and detect when was filled.\r\n\r\nRough example:\r\n```Python\r\nwhile True:\r\n   orders = exchange.fetch_orders()\r\n   # iterate over the orders object and find the intended one\r\n   # check if the order state changed from 'open' to 'close'\r\n   # ....\r\n   time.sleep(time_to_wait) # wait a certain amount of time before checking again\r\n   # ....\r\n```\r\n\r\nSecond and ideally would be using something like CCXT.PRO that uses WebSockets and allows you to subscribe to live updates, so you would be notified immediately after an order update.\r\n"
      },
      {
        "user": "bidreshivaprasad",
        "created_at": "2022-05-04T15:36:13Z",
        "body": "Thank you, sir I did it\r\n```\r\nwhile True:\r\n   orders = exchange.fetch_order(id, symbol= symbol)\r\n   check = orders['info']['status']\r\n   if check == 'NEW':\r\n       time.sleep(15)\r\n   else:\r\n       print('order placed')\r\n       break\r\n```"
      }
    ]
  },
  {
    "number": 13075,
    "title": "Can't cancel Conditional Orders on Bybit",
    "created_at": "2022-05-02T12:09:12Z",
    "closed_at": "2022-05-05T03:10:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13075",
    "body": "I can't cancel conditional orders on Bybit. Tried to use _cancel_all_orders_ but it cancels only limit orders.\r\n\r\n- Programming Language version: Python 3.9\r\n\r\n```\r\nclient.cancel_all_orders('BTCUSDT')\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13075/comments",
    "author": "maciekzygmunt",
    "comments": [
      {
        "user": "Dan-krm",
        "created_at": "2022-05-05T02:40:49Z",
        "body": "I've submitted a PR that will enable using cancelAllOrders for conditional orders on Bybit"
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-05T03:13:02Z",
        "body": "@maciekzygmunt it is available in CCXT version 1.81.50+\r\n\r\nHow to use:\r\n\r\n```Python\r\nclient.cancel_all_orders('BTCUSDT', {'stop': true})\r\n```"
      }
    ]
  },
  {
    "number": 13071,
    "title": "1 Hour Data is Missing",
    "created_at": "2022-05-01T21:56:34Z",
    "closed_at": "2022-05-08T14:47:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13071",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.10\r\n- CCXT version: 1.77.62\r\n\r\n```\r\nimport ccxt\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datetime\r\nimport warnings\r\n\r\nwarnings.filterwarnings(\"ignore\", category=np.VisibleDeprecationWarning)\r\npd.set_option('display.max_rows', None)\r\n\r\nexchange = ccxt.binance({\r\n    \"apiKey\": 'xxx',\r\n    \"secret\": 'yyy',\r\n    'options': {\r\n        'adjustForTimeDifference': True\r\n    },\r\n    'enableRateLimit': True\r\n})\r\n\r\nexchange_f = ccxt.binance({\r\n    \"apiKey\": 'xxx',\r\n    \"secret\": 'yyy',\r\n    'options': {\r\n        'defaultType': 'future',\r\n        'adjustForTimeDifference': True\r\n    },\r\n    'enableRateLimit': True\r\n})\r\n\r\ncoin = \"ETH\"+\"/USDT\"\r\nexchange.load_markets()\r\nexchange_f.load_markets()\r\ndata= pd.DataFrame([[0]], columns=['timestamp'])\r\n# some codes here\r\n\r\nwhile 1:\r\n    try:\r\n        bars = exchange.fetch_ohlcv(coin, timeframe='5m', limit=10)   \r\n        bars_f = exchange_f.fetch_ohlcv(coin, timeframe='5m', limit=2)  \r\n        df = pd.DataFrame(bars[:], columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])\r\n        df_f = pd.DataFrame(bars_f[:], columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])\r\n    except ccxt.BaseError as Error:\r\n        print(\"[ERROR] \", Error)\r\n        continue\r\n\r\nif df['timestamp'].iloc[-2] not in data.values and (df['timestamp'].dt.minute.iloc[-2] % 10 == 5):\r\n data= pd.DataFrame([[df['timestamp'].iloc[-2]]], columns=['timestamp'])\r\nprint('time', data)\r\n```\r\n\r\nHello,\r\nI am using above code and i realized today that my code didn't work properly around 1 hour. The code \"print('time', data)\" produced \"time 2022-05-01 19:35:00\" and  then same code produced \"time 2022-05-01 20:45:00\" next. Around 1 hour is missing. \r\nI am using Amazon server i dont know if the problem resulted from this or not. Maybe i was banned from Binance for an hour but if this was the case wouldnt i receive any error? Could you please advise me if i broke the rate limiter?\r\nCould you please share what could be the reasons?\r\nThank you.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13071/comments",
    "author": "euphrates85",
    "comments": [
      {
        "user": "euphrates85",
        "created_at": "2022-05-02T12:44:08Z",
        "body": "@kroitor i would be highly  appreciated if you can check the above code and share your opinion if there is a possbility that i broke the ratelimiter. I read the documents but my coding knowledge is not very good and i coudnt understand the documents exactly. I didnt get any error related to ban but some say that i dont have to receive an error if i am banned."
      },
      {
        "user": "samgermain",
        "created_at": "2022-05-02T18:18:19Z",
        "body": "@euphrates85 Could you be more specific with your explanation? \r\n\r\nFor example, you said \r\n\r\n> The code \"print('time', data)\" produced \"time 2022-05-01 19:35:00\" and then same code produced \"time 2022-05-01 20:45:00\" next\r\n\r\nbut I only see the line `\"print('time', data)\"` once in your code so I'm not exactly sure what you mean by \"next\". Could you also minimize your code to exclude all non-necessary code for your example? It doesn't look like `df_f`, `exchange_f` or `data_f` are needed. "
      },
      {
        "user": "euphrates85",
        "created_at": "2022-05-08T14:48:16Z",
        "body": "it was due to the low performance of server. I updated and it is solved"
      },
      {
        "user": "JohnRobinsun",
        "created_at": "2023-10-11T15:39:15Z",
        "body": " \"apiKey\": 'xxx',\r\n    \"secret\": 'yyy',   ***เปลี่ยนเเละ xและy เป็นapi ของbinance คับ "
      }
    ]
  },
  {
    "number": 12943,
    "title": "Why fee an trades aren't reported when an order is filled at Binance ?",
    "created_at": "2022-04-22T10:50:23Z",
    "closed_at": "2022-04-22T11:50:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12943",
    "body": "Hello,\r\n\r\nI try to understand why `fee`, `fees` and `trades` keys are empty in the dictionary returned by the exchange after an order is filled (method `fetchOrder`). Sometime the keys contain data. Please find below two orders executed on ETH/USDT spot market of Binance. One order has values but not the other. What could be the reason ?\r\n\r\nAs you can see both orders have status `FILLED`. One is `sell` the other is `buy`.\r\n\r\n`fee` is null\r\n\r\n`{\"id\": \"8664222318\", \"fee\": null, \"cost\": 18.07068, \"fees\": [], \"info\": {\"side\": \"SELL\", \"time\": \"1650610804472\", \"type\": \"LIMIT\", \"price\": \"3011.78000000\", \"status\": \"FILLED\", \"symbol\": \"ETHUSDT\", \"orderId\": \"8664222318\", \"origQty\": \"0.00600000\", \"isWorking\": true, \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"updateTime\": \"1650610829617\", \"executedQty\": \"0.00600000\", \"orderListId\": \"-1\", \"timeInForce\": \"GTC\", \"clientOrderId\": \"6qgr8\", \"origQuoteOrderQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"18.07068000\"}, \"side\": \"sell\", \"type\": \"limit\", \"price\": 3011.78, \"amount\": 0.006, \"filled\": 0.006, \"status\": \"closed\", \"symbol\": \"ETH/USDT\", \"trades\": [], \"average\": 3011.78, \"datetime\": \"2022-04-22T07:00:04.472Z\", \"postOnly\": false, \"remaining\": 0.0, \"stopPrice\": null, \"timestamp\": 1650610804472, \"timeInForce\": \"GTC\", \"clientOrderId\": \"6qgr8\", \"lastTradeTimestamp\": null}`\r\n\r\n`fee` contains data \r\n\r\n`{\"id\": \"8665290466\", \"fee\": {\"cost\": 2.99e-05, \"currency\": \"ETH\"}, \"cost\": 89.71196, \"fees\": [{\"cost\": 2.99e-05, \"currency\": \"ETH\"}], \"info\": {\"side\": \"BUY\", \"type\": \"LIMIT\", \"fills\": [{\"qty\": \"0.02990000\", \"price\": \"3000.40000000\", \"tradeId\": \"807983332\", \"commission\": \"0.00002990\", \"commissionAsset\": \"ETH\"}], \"price\": \"3000.40000000\", \"status\": \"FILLED\", \"symbol\": \"ETHUSDT\", \"orderId\": \"8665290466\", \"origQty\": \"0.02990000\", \"executedQty\": \"0.02990000\", \"orderListId\": \"-1\", \"timeInForce\": \"GTC\", \"transactTime\": \"1650618004892\", \"clientOrderId\": \"8iMM1\", \"cummulativeQuoteQty\": \"89.71196000\"}, \"side\": \"buy\", \"type\": \"limit\", \"price\": 3000.4, \"amount\": 0.0299, \"filled\": 0.0299, \"status\": \"closed\", \"symbol\": \"ETH/USDT\", \"trades\": [{\"id\": \"807983332\", \"fee\": {\"cost\": 2.99e-05, \"currency\": \"ETH\"}, \"cost\": 89.71196, \"fees\": [{\"cost\": \"0.00002990\", \"currency\": \"ETH\"}], \"info\": {\"qty\": \"0.02990000\", \"price\": \"3000.40000000\", \"tradeId\": \"807983332\", \"commission\": \"0.00002990\", \"commissionAsset\": \"ETH\"}, \"side\": \"buy\", \"type\": \"limit\", \"order\": \"8665290466\", \"price\": 3000.4, \"amount\": 0.0299, \"symbol\": \"ETH/USDT\", \"datetime\": null, \"timestamp\": null, \"takerOrMaker\": null}], \"average\": 3000.4, \"datetime\": \"2022-04-22T09:00:04.892Z\", \"postOnly\": false, \"remaining\": 0.0, \"stopPrice\": null, \"timestamp\": 1650618004892, \"timeInForce\": \"GTC\", \"clientOrderId\": \"8iMM1\", \"lastTradeTimestamp\": null}`\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12943/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-04-22T10:52:17Z",
        "body": "@Kinzowa do you always use fetchOrder in all cases, or do you get those orders from different methods (say, fetchOrder / fetchOrders, or fetchOrder/createOrder, etc) ?"
      },
      {
        "user": "Kinzowa",
        "created_at": "2022-04-22T10:56:07Z",
        "body": "Hi @kroitor , thanks for your answer. Yes I use different methods. When an order is placed with `createOrder` I catch the response and, if the status is still `open` then I periodically check it with `fetchOrder`."
      },
      {
        "user": "Kinzowa",
        "created_at": "2022-04-22T11:01:38Z",
        "body": "Now I understand, fee and trades are only reported by the exchange with `createOrder` if the order is executed.\r\n\r\nIf I understand correctly, Binance returns `fee` and `commission` keys when the order takes liquidity (taker), but not if it's a maker."
      },
      {
        "user": "kroitor",
        "created_at": "2022-04-22T11:50:57Z",
        "body": "> Now I understand, fee and trades are only reported by the exchange with `createOrder` if the order is executed.\r\n>\r\n> If I understand correctly, Binance returns `fee` and `commission` keys when the order takes liquidity (taker), but not if it's a maker.\r\n\r\nBasically, the fee is a property of a trade, not a property of an order. Most of the exchanges will return those fees with trades from fetchMyTrades. Some exchanges will also return those fees in the orders, but not all of them. That is because a single order can be filled with multiple trades, and then you have to sum up those fees to get the total fee. When the exchange does not specify a total fee on the order, ccxt can calculate it, if the exchange returns the trade information within the order. However, Binance exchange will only return that trade+fee information within createOrder upon placing it. And when you query it later, the trade+fee info is not available from the fetchOrder-endpoint. Hence, you have to fetchMyTrades, filter those trades by the order id and sum up their fees by currency. Hope that answers your question. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 12915,
    "title": "Disable async context switching with enableRateLimit. ",
    "created_at": "2022-04-20T14:14:41Z",
    "closed_at": "2024-10-29T06:42:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12915",
    "body": "async Python.\r\nI want to send orders as soon as possible. But when I call create_order, interpreter switchs to my background asyncio task befor sending request.\r\nIs there a way to send request during create_order without switching context with enableRateLimit=True?\r\nIs there an Event that sets when request is sent?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12915/comments",
    "author": "cfytrok",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2024-10-29T06:42:13Z",
        "body": "`await` yields control back to the event loop, so it introduces a context switch. if anyone has any custom solutions, users might post in this thread."
      }
    ]
  },
  {
    "number": 12791,
    "title": "ccxt pro websockets",
    "created_at": "2022-04-13T23:40:08Z",
    "closed_at": "2022-04-14T19:13:57Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12791",
    "body": "hi, as i develop my platform to use your ccxt pro websockets i faced an issue\r\n\r\nam developing in laravel\r\ni tried to add the js in the blade it throw me an error\r\n\r\ni tried to add it on controller\r\nthe page stuck\r\n\r\nso what is the best way to use the ccxt pro websockets to fetch orderbooks in laravel?\r\nis it possible to use echo and pusher?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12791/comments",
    "author": "mash3div",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-04-14T19:13:57Z",
        "body": "For frontend purposes the ccxt.pro.browser.js from the CCXT Pro repository must be used:\r\n\r\n```JavaScript\r\n<!DOCTYPE HTML>\r\n<html>\r\n<head>\r\n    <title>CCXT Pro Basic example for the browser</title>\r\n    <script type=\"text/javascript\" src=\"vendor/js/ccxt.pro.browser.js\"></script>\r\n    <script>\r\n        'use strict';\r\n\r\n        async function main () {\r\n            exchange = new ccxt.coinbasepro()\r\n            while (true) {\r\n                const orderbook = await exchange.watchOrderBook ('ETH/BTC')\r\n                console.log (orderbook['bids'][0], orderbook['asks'][0])\r\n            }\r\n        }\r\n\r\n        document.addEventListener (\"DOMContentLoaded\", function () {\r\n\r\n            console.log ('CCXT Pro Version:', ccxt.version)\r\n            main ()\r\n\r\n        })\r\n    </script>\r\n</head>\r\n<body>\r\n<h1>Hello, CCXT Pro!</h1>\r\n<pre id=\"content\"></pre>\r\n</body>\r\n</html>\r\n```"
      }
    ]
  },
  {
    "number": 12748,
    "title": "phemex sub account to different sub account or main account transfer example code python",
    "created_at": "2022-04-12T14:04:02Z",
    "closed_at": "2022-05-25T14:51:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12748",
    "body": "Anyone got an example of working code for this new integration?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12748/comments",
    "author": "adamrg73",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-05-25T14:26:32Z",
        "body": "Hi @adamrg73, For transfers between the main account and sub accounts you need to use the account Id. You can find it in the subaccounts section of phemex.\r\n\r\nHere is a code example:\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport os\r\nimport sys\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt  # noqa: E402\r\n\r\nexchange = ccxt.phemex({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n})\r\n\r\n# Example 1: Transfer from main account to sub account\r\ncode = 'USDT'\r\nfromAccount = '4018341'\r\ntoAccount = '4184432'\r\namount = 1\r\n\r\nparams = {}\r\n\r\ntransfer = exchange.transfer (code, amount, fromAccount, toAccount, params = {})\r\nprint(transfer)\r\n```\r\n\r\nI'll also open a PR to include it in the examples folder"
      }
    ]
  },
  {
    "number": 12730,
    "title": "How to access the timestamp at which markets were loaded",
    "created_at": "2022-04-11T16:13:52Z",
    "closed_at": "2022-08-02T11:26:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12730",
    "body": "Is there an easy way to access the time at which markets were last loaded for an exchange instance? It'd be useful to be able to determine this programmatically from the instance data, so we could automatically refresh it after some period (e.g. every 4 hours). However, there's nothing in the `exchange.markets` object.\r\n\r\nIs there another way to access this timestamp, or would you consider making it accessible in a property (such as how `.last_http_response` gives you the most recent response)?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12730/comments",
    "author": "HartS",
    "comments": [
      {
        "user": "HartS",
        "created_at": "2022-04-11T18:33:16Z",
        "body": "Also, I can make a PR for this if it's not already exposed somehow, and you'd be interested in adding it"
      },
      {
        "user": "kroitor",
        "created_at": "2022-04-11T18:37:24Z",
        "body": "@HartS your PRs are welcome! \r\n\r\nDesign-wise, i think we should differentiate (a) the timestamp when the data was loaded from (b) the timestamp when the data was generated and reported by the exchange (if specified in the response from the exchange).\r\n\r\nWe could probably add timestamp (b) to the market structure, as for the timestamp (a) – since that information is generated on the client side, maybe we should keep it in the userland? I mean to get timestamp (a), you would do something like:\r\n\r\n```Python\r\nmarkets = exchange.load_markets()\r\nwhen_markets_were_loaded = exchange.milliseconds()\r\n```\r\n\r\nWe're not filling-in the timestamp if it's missing in the other structures since the user can obtain it immediately after the call, which is basically the equivalent of timestamp (a). \r\n\r\nWhat do you think on the above ?"
      },
      {
        "user": "HartS",
        "created_at": "2022-04-18T19:55:20Z",
        "body": "I was definitely more interested in (I think) `(a)`, because it allows us to do something like, check the timestamp at which market info was last loaded; if older than a certain age, reload markets (allows us to stay in sync with new markets without spamming the exchange).\r\n\r\nIt's of course possible to do this on the client side as well, but would be really nice to have it in ccxt since that's a more persistent state stored in the client.\r\n\r\nI'll also take a look at what exchanges are providing for the response, though, to see how I can reconcile that with potentilaly available exchange-provided information that a user might be interested in"
      },
      {
        "user": "ttodua",
        "created_at": "2022-08-02T11:26:19Z",
        "body": "I think I would mark this as `wontfix` as all responses ccxt provides from exchange, is whatever data is provided from exchanges itself. in `fetchMarkets` response we don't have any place where it could be propagated (i am against adding the same value in each market-object, as it doesn't make any sense to add same unimportant timestamp to 1000's markets).\r\nMoreover, `fetchMarkets` is not (should not be!) frequently used method and it's only called once per instantiation, however, if you want to keep track of it and refresh, I see that a perfect fit for userland code. If you want it to load once in several hours, I don't understand, why it wouldnt be best approach to store timestamp on client side (without need to know that timestamp from exchange, as even in worst scenario, the difference at maximum might be several seconds, and  several seconds absolutely play no difference if you are reloading it once in every X hours).\r\n\r\nI know it's good that library had shorthands for everything user needs, but this case belongs to userland code.\r\nLet us know if you have any further issue with CCXT."
      }
    ]
  },
  {
    "number": 12710,
    "title": "how to get latest orderId by exchange.fetch_orders(\"BTC/USDT\") in Binance",
    "created_at": "2022-04-09T13:59:50Z",
    "closed_at": "2022-05-15T09:58:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12710",
    "body": "Hi there,\r\nI use exchange.fetch_orders(\"BTC/USDT\") to get all information ( including orderId, status, clientOrderId,.......) \r\nwithin a period of time in Binance.\r\nPlease advise what is the code if I only want to get the latest orderId for \"BTC/USDT\". Thanks.\r\n\r\nCharles \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12710/comments",
    "author": "ctu1121",
    "comments": [
      {
        "user": "DoctorSlimm",
        "created_at": "2022-05-10T17:04:01Z",
        "body": "@ctu1121 here is an example in python:\r\n\r\n```Python\r\nimport ccxt\r\n\r\nbinance = ccxt.binance ({'apiKey': 'YOUR_API_KEY', 'secret': 'YOUR_SECRET_KEY'})\r\n\r\nsymbol = 'BTC/USDT'\r\n\r\norders = binance.fetch_orders(symbol)\r\n\r\nsorted_orders = sorted(orders, key=lambda x: x['timestamp'])\r\n\r\nmost_recent_order = sorted_orders[-1]\r\n\r\nid_most_recent_order = most_recent_order['id']\r\n\r\nprint('most recent self sorted order id: {}'.format(id_most_recent_order))\r\n\r\n# however you can also just use \r\n# the last element in the array returned by ccxt\r\n# it is automatically sorted by default \r\n# where timestamp/datetime is returned by the exchange\r\n\r\nmost_recent_order = orders[-1]\r\n\r\nid_most_recent_order = most_recent_order['id']\r\n\r\nprint('most recent default ccxt response order id: {}'.format(id_most_recent_order))\r\n```"
      }
    ]
  },
  {
    "number": 12654,
    "title": "[ccxt.pro] open price does not match last minute close price for build_ohlcvc",
    "created_at": "2022-04-06T09:25:09Z",
    "closed_at": "2022-04-06T09:43:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12654",
    "body": "I wrote a script to `watch_trades` and calculate the `ohlcv` using `build_ohlcvc(trades)` once the last minute is finished.\r\nBut the **open** price does not match the **close** price of the previous minute:\r\n\r\n## `pro`: `watch_trades`  + `build_ohlcvc`\r\n```\r\nNew DATA added:\r\n            timestamp     open     high      low    close   volume\r\n0 2022-04-06 09:10:00  2.61885  2.63085    2.612  2.62605   7161.0\r\n1 2022-04-06 09:11:00   2.6248  2.64805  2.62425  2.64805  23759.0\r\n2 2022-04-06 09:12:00   2.6495   2.6495  2.63685   2.6375  30576.0\r\n```\r\n\r\n## `non-pro`: `fetch_ohlcv`\r\nUsing the `ccxt` `non-pro` version and `fetch_ohlcv` gives the following results:\r\n```\r\n            timestamp     open     high      low    close   volume\r\n0  2022-04-06 07:41:00  2.44300  2.45345  2.44210  2.45150  104563.88285\r\n1  2022-04-06 07:42:00  2.45145  2.45160  2.44410  2.44440  102422.49925\r\n2  2022-04-06 07:43:00  2.44440  2.44570  2.43005  2.43705   56166.47170\r\n3  2022-04-06 07:44:00  2.43705  2.43830  2.43290  2.43570   10986.85700\r\n4  2022-04-06 07:45:00  2.43560  2.43970  2.43070  2.43585   50215.61940\r\n```\r\n\r\nIs this an issue of the `build_ohlcvc` or something else?\r\nIs there a way to fix it?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12654/comments",
    "author": "xarthurx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-04-06T09:43:43Z",
        "body": "> Is this an issue of the build_ohlcvc or something else?\r\n\r\nThis is not an issue, it's by design. The true info is returned in both cases, depending on how you look at it.\r\nIf you define the open price as the price of the first trade within that period, then your open price does not have to be the same as the closing price (this is probably more correct financially)\r\nIf you define the open price as the closing price of the last candle, then your open price will match the closing price, obviously (this is better-looking on charts)\r\n\r\n> Is there a way to fix it?\r\n\r\nYes, you can easily enforce the open = previous close rule in Python like this:\r\n\r\n```Python\r\nohlcv = exchange.build_ohlcvc(trades, '1m')\r\nohlcv = [ohlcv[0]] + [[ohlcv[i][0], ohlcv[i - 1][4], ohlcv[i][2], ohlcv[i][3], ohlcv[i][4], ohlcv[i][5]] for i in range(1, len(ohlcv))]\r\n```\r\n"
      }
    ]
  },
  {
    "number": 12624,
    "title": "wach_my_trades doesn't work when use the example code in doc for PHP",
    "created_at": "2022-04-04T13:32:46Z",
    "closed_at": "2022-04-05T01:32:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12624",
    "body": "OS: Windows 10\r\nProgramming Language version: PHP 7.2.5\r\nCCXT version: 1.76.20\r\nCCXT Pro version: 1.0.28\r\nexchange: Binance\r\n\r\n```\r\n       if ($exchange->has['watchMyTrades']) {\r\n            $exchange::execute_and_run(function () use ($exchange) {\r\n                while (true) {\r\n                    try {\r\n                        $balance = yield $exchange->watch_balance();\r\n                        echo date('c'), ' ', json_encode($balance), \"<br>\";\r\n                    } catch (Exception $e) {\r\n                        echo get_class($e), ' ', $e->getMessage(), \"<br>\";\r\n                    }\r\n                }\r\n            });\r\n        }\r\n```\r\n\r\nI get nothing in output. I don't get any exceptions or errors at all.\r\nbut this is working.\r\n\r\n```\r\n       if ($exchange->has['watchTicker']) {\r\n            $symbol = \"ETH/USDT\";\r\n            $params = [\"type\" => \"future\"];\r\n            $exchange::execute_and_run(function () use ($exchange, $symbol, $params) {\r\n                while (true) {\r\n                    try {\r\n                        $ticker = yield $exchange->watch_ticker($symbol, $params);\r\n                        echo date('c'), ' ', json_encode($ticker), \"<br>\";\r\n                    } catch (Exception $e) {\r\n                        echo get_class($e), ' ', $e->getMessage(), \"<br>\";\r\n                    }\r\n                }\r\n            });\r\n        }\r\n```\r\nis this about exchange or subscription?\r\n\r\nin verbose mode, I get the output of the exchange's information.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12624/comments",
    "author": "zafixcap",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-04-05T01:32:15Z",
        "body": "> I get nothing in output. I don't get any exceptions or errors at all.\r\n\r\nYou have to make some trades if you're watching your trades (watchMyTrades) – if you don't place any orders, then watchMyTrades will not get your personal trade updates from the exchange, cause there will be none, obviously.\r\n\r\nIf you want to watch public trades, use `watchTrades` instead of `watchMyTrades`.\r\n\r\nHope that answers your question."
      },
      {
        "user": "zafixcap",
        "created_at": "2022-04-06T07:38:54Z",
        "body": "thanks for answering.\r\nwhen I watch my trades and do a trades get an error.\r\n\r\n```\r\nRecoil\\Exception\\KernelException\r\nUnhandled exception in kernel: Error (Cannot assign by reference to an array dimension of an object).\r\n```\r\n\r\nin verbose mode information of trade from Binance was received but  (I think) Recoil can't handle that while when getting account information, can handle it.\r\ngetting account information to occur when I watch my trades.\r\n@kroitor "
      }
    ]
  },
  {
    "number": 12593,
    "title": "Mandatory parameter error occur when create market order",
    "created_at": "2022-04-01T12:53:11Z",
    "closed_at": "2022-04-01T13:07:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12593",
    "body": "- OS: windows 11\r\n- Programming Language version: python 3.8.11\r\n- CCXT version: 1.55.48\r\n\r\nI want to close my short position in Binance futures.\r\nI submitted a market order as follows, but mandatory parameter error occurred.\r\nThere was no problem when the long position close order was conducted in the same way, I don't understand. (side='sell')\r\n\r\n```   \r\nexchange = ccxt.binance()\r\nposition_all = exchange.fetch_balance()['info']['positions'] \r\nposition = [p for p in position_all if p['symbol'] == ETHUSDT][0]\r\nclose = exchange.create_order(symbol=ETH/USDT, type=\"MARKET\", side=\"buy\", \r\n                                                  amount=position['positionAmt'], params={\"reduceOnly\": True})\r\n```\r\n\r\n```\r\nccxt.base.errors.BadRequest: binance {\"code\":-1102,\"msg\":\"Mandatory parameter 'quantity' was not sent, was empty/null, or malformed.\"}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12593/comments",
    "author": "hvagday",
    "comments": [
      {
        "user": "hvagday",
        "created_at": "2022-04-01T13:08:41Z",
        "body": "It was \"-\" value issue. Solved."
      },
      {
        "user": "EkremSel",
        "created_at": "2022-12-03T15:31:09Z",
        "body": "@kroitor @hvagday \r\n\r\nHow did you solve this issue? I'm having the same problem. \r\n\r\n`balance = exchange.fetch_balance()`\r\n                \r\n`all_positions=balance['info']['positions']`\r\n                \r\n`current_positions2 = [position for position in all_positions if (position['symbol']) == \"UNIUSDT\"]`\r\n \r\n`close_position = exchange.create_order(symbol='UNI/USDT', type=\"MARKET\", side=\"buy\", amount=current_positions2[0]['positionAmt'], params={\"reduceOnly\": True}) `"
      }
    ]
  },
  {
    "number": 12576,
    "title": "Transfer USDT between spot and futures",
    "created_at": "2022-03-31T13:52:37Z",
    "closed_at": "2022-04-01T11:07:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12576",
    "body": "- OS: Windows \r\n- Programming Language version: 3.10\r\n- CCXT version: 1.77.62\r\n\r\n```\r\nimport time\r\nstart = time.time()\r\nexchange.sapi_post_futures_transfer({\r\n    'asset': 'USDT',\r\n    'amount': '10',\r\n    'type': 2,\r\n})\r\nend = time.time()\r\n```\r\nI want to take a long position in the spot market and a short position in the future market. To do that, I have to make a USDT transfer between spot and future wallets. My question is:\r\n\r\nExecution time of the above transfer code is around 1 second. Except for USDT transfer between wallets, my entire code, including creating orders, takes milliseconds. Since USDT transfer takes 1 second, is there a risk that the order execution code runs before USDT transfer so the order can not be implemented due to lack of funds? If so, what would be the best solution?\r\n\r\nMaybe I should clarify my question\r\nLet's say that I am in full long position and I receive short signal. So I have to close all long positions, transfer USDT to future wallet and open short positions. Transferring USDT takes around 1 second. I wonder if there is a risk that execution order code(opening short positions) runs before money transfer? If it happens there wont be enough funds to open short position.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12576/comments",
    "author": "euphrates85",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-04-01T07:48:31Z",
        "body": "as I assume, you are using synchronous code. If so, it doesn't matter if transfer takes 800MS, 1200MS or 1000MS , as long as you execute trade after transfering. \r\nif you run asynchronous code, then right - it will need some extra steps - when you get the 'short' signal, then you can asynchronously initiate the transfer, and paralelly, i.e. every 200MS, check the balance to ensure the funds are received.\r\n\r\nBut again, if you run synchronous code, then I don't see why it would be an issue, i.e.:\r\n````\r\nif (short_signal_received) {\r\n    exchange.sapi_post_futures_transfer({...});\r\n    exchange.create_order(.....); //so, order will be only fired after the above line finishes its work.\r\n}\r\n````\r\nLet me know if i misunderstood the question."
      },
      {
        "user": "samgermain",
        "created_at": "2022-04-01T07:48:57Z",
        "body": "If you're using async ccxt, you would need to `await` the completion of the transfer before making your order, otherwise, you can just use the unified `transfer` method and not worry about it\r\n\r\n```\r\nimport ccxt\r\nimport pprint\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nbinance = ccxt.binance()\r\ntransfer = binance.transfer(USDT, 0.01, spot, future)\r\norder = binance.createOrder( ... )\r\npprint(transfer)\r\npprint(order)\r\n```"
      },
      {
        "user": "euphrates85",
        "created_at": "2022-04-01T10:30:09Z",
        "body": "Thank you very much.  I am using synchronous code. I was worried that the code would continue to run without waiting for the money to be physically transferred between wallets. But it seems i shouldn't worry about that"
      }
    ]
  },
  {
    "number": 12563,
    "title": "watch_my_trades question for gateio",
    "created_at": "2022-03-30T22:39:01Z",
    "closed_at": "2022-04-11T17:32:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12563",
    "body": "Just wondering if there is a way to seperate watch_my_trades for gateio for the spot, isolated margin and cross margin account separately as gate.io channels now watch all 3 at the same time.\r\n\r\nFor watch_orders i could filter by response['info']['account'], but seems no way to filter separately for watch_my_trades.\r\n\r\nAlso, could watch_my_trades also be upgraded to include future?\r\nThank you.\r\n```\r\n#pylint: disable=all\r\nimport asyncio\r\nimport ccxtpro\r\n\r\nprint(ccxtpro.__version__)\r\nsymbol = 'BTC/USDT'\r\nexchange: ccxtpro.Exchange = getattr(ccxtpro, 'kucoin')({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'api_key',\r\n    'secret': 'secret',\r\n})\r\n\r\n# exchange.verbose=True\r\n# exchange.set_sandbox_mode(True)\r\nasync def main():\r\n    while True:\r\n        response = await exchange.watch_my_trades(symbol)\r\n        print(response)\r\n        \r\n    await exchange.close()\r\n```\r\n```\r\n[{'info': {'id': 3126577975, 'user_id': 1111, 'order_id': '138509303401', 'currency_pair': 'BTC_USDT', 'create_time': 1648679319, 'create_time_ms': '1648679319323.229', 'side': 'sell', 'amount': '0.0001', 'role': 'taker', 'price': '46956.64', 'fee': '0.0073956708', 'fee_currency': 'USDT', 'point_fee': '0', 'gt_fee': '0', 'text': '3'}, 'id': '3126577975', 'timestamp': 1648679319323, 'datetime': '2022-03-30T22:28:39.323Z', 'symbol': 'BTC/USDT', 'order': '138509303401', 'type': None, 'side': 'sell', 'takerOrMaker': 'taker', 'price': 46956.64, 'amount': 0.0001, 'cost': 4.695664, 'fee': {'cost': 0.0073956708, 'currency': 'USDT'}, 'fees': [{'currency': 'USDT', 'cost': 0.0073956708}]}]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12563/comments",
    "author": "leastchaos",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-03-31T09:32:25Z",
        "body": "Hello @leastchaos,\r\nRegarding the first question, unfortunately, Gateio sends them in the same channel I afaik there are no way to distinguish them, I'll let you know If I find it.\r\n\r\nRegarding the upgrade, will be done soon I'm currently taking care of it"
      }
    ]
  },
  {
    "number": 12535,
    "title": "properly stop ccxtpro from pulling data",
    "created_at": "2022-03-29T11:18:07Z",
    "closed_at": "2022-03-29T11:41:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12535",
    "body": "I am struggling to understand how to properly stop ccxtpro from pulling data once I have finished by task. I am using the below example from the user manual.\r\n\r\nimport ccxtpro\r\nexchange = ccxtpro.ftx({'newUpdates': True})\r\nwhile True:\r\n    trades = await exchange.watch_trades('BTC/USD')\r\n    print(trades)\r\n    await exchange.close()\r\n\r\nI tried returning exchange.close() into the console but that does nothing. How do I stop the data stream when I am finished?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12535/comments",
    "author": "amarnp85",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-03-29T11:41:44Z",
        "body": "Hello @amarnp85 ,\r\n\r\nI believe the problem relies on the way you're structuring your code. From the snippet you posted I assume you're doing something like this\r\n\r\n```Python\r\nimport ccxtpro\r\nexchange = ccxtpro.ftx({'newUpdates': True})\r\nwhile True:\r\n    trades = await exchange.watch_trades('BTC/USD')\r\n    print(trades)\r\n    await exchange.close()\r\n```\r\n\r\nSo what you're doing is, per each loop iteration you start a connection and close it in the end, so although it was closed will be created again in the next iteration, that is why you're getting data continuously\r\n\r\nYou should stop the loop before closing it, something like this\r\n```Python\r\nimport ccxtpro\r\nexchange = ccxtpro.ftx({'newUpdates': True})\r\nwhile True:\r\n    trades = await exchange.watch_trades('BTC/USD')\r\n    print(trades)\r\n    isDone = True # your condition that determines if you want to stop\r\n    if isDone:\r\n        break\r\nawait exchange.close()\r\n```\r\n\r\nFeel free to reopen the issue if you have any other questions\r\n"
      },
      {
        "user": "amarnp85",
        "created_at": "2022-03-29T12:01:31Z",
        "body": "Thank you. Your response made a lot of sense, but when I tried to implement it stopping after a certain time condition was met the loop just continues running.\r\n\r\nimport ccxtpro\r\nfrom datetime import datetime, time\r\n\r\n```\r\nstop_time = time(13, 00, 00).strftime(\"%H:%M:%S\")\r\nnow = datetime.now().time().strftime(\"%H:%M:%S\")\r\n\r\nexchange = ccxtpro.ftx({'newUpdates': True})\r\nwhile True:\r\n    trades = await exchange.watch_trades('BTC/USD')\r\n    print(trades)\r\n    isDone = now >= stop_time\r\n    if isDone:\r\n        break\r\nawait exchange.close()\r\n```"
      },
      {
        "user": "amarnp85",
        "created_at": "2022-03-29T12:15:59Z",
        "body": "Fixed the issue. I had to define 'now' inside the while loop. Duh!\r\n\r\nThanks for the tip @carlosmiei \r\n\r\n```\r\nstop_time = time(13, 15, 00).strftime(\"%H:%M:%S\")\r\n\r\nexchange = ccxtpro.ftx({'newUpdates': True})\r\nwhile True:\r\n    trades = await exchange.watch_trades('BTC/USD')\r\n    now = datetime.now().time().strftime(\"%H:%M:%S\")\r\n    print(trades)\r\n    print(now)\r\n    if now >= stop_time:\r\n        break\r\nawait exchange.close()\r\n```\r\n"
      }
    ]
  },
  {
    "number": 12527,
    "title": "fetchMyTrades last 100 trades with all symbols",
    "created_at": "2022-03-28T18:51:08Z",
    "closed_at": "2022-03-29T02:04:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12527",
    "body": "I know that I need to specify a trading pair like 'JASMY/USDT' but I want to get the last 20 trades without specifying a symbol. Like that to give all tradings with all trading pairs from the last 20 transactions. Of course, I don't want to abuse it with thousands of transactions, etc, but merely to be able to get the JSON and transfer them to my database. Is there a way to do this?\r\n\r\nThe code I have:\r\n\r\n```\r\nif (binanceEx.has['fetchMyTrades']) {\r\n            const trades = await binanceEx.fetchMyTrades ('', binanceEx.parse8601 ('2022-03-01 00:00:00') , 20, undefined);\r\n            console.log('Orders: ', trades);\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12527/comments",
    "author": "Calugarul",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-29T02:04:54Z",
        "body": "> Is there a way to do this?\r\n\r\nNo, you have to iterate over those symbols. The exchanges just don't have a corresponding endpoint to return all trades at once for all symbols in a single mixed response, even if you request a limited set of those."
      }
    ]
  },
  {
    "number": 12512,
    "title": "In using CCXT for FTX exchange, is there a simple/smart way to retrieve the values of current account Leverage, Total collateral and Free collateral?",
    "created_at": "2022-03-27T11:12:40Z",
    "closed_at": "2022-05-07T00:57:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12512",
    "body": "In using CCXT for FTX exchange, is there a simple/smart way to retrieve the values of current Leverage, Total collateral and Free collateral?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12512/comments",
    "author": "jamezun",
    "comments": [
      {
        "user": "micant",
        "created_at": "2022-03-28T23:49:26Z",
        "body": "Not sure how smart it is but this is my implementation:\r\n\r\nMy understanding is that (for the most part) futures trading is not implemented in the _unified api_\r\n\r\n```\r\n async setLeverage(exchange, config) {\r\n      const lev = await exchange.privatePostAccountLeverage({\r\n        leverage: config.leverage\r\n      });\r\n  }\r\n\r\n async getLeverage(exchange) {\r\n      const { result } = await exchange.privateGetAccount();\r\n      const { leverage } = result;\r\n      return leverage;\r\n  }\r\n\r\n  async fetchCollateral(exchange) {\r\n      const { result } = await exchange.privateGetAccount();\r\n      const { collateral, freeCollateral } = result;\r\n      return {\r\n        collateral: {\r\n          USD: {\r\n            free: freeCollateral,\r\n            used: collateral - freeCollateral,\r\n            total: collateral\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n```\r\n"
      },
      {
        "user": "jamezun",
        "created_at": "2022-03-29T06:28:00Z",
        "body": "thanks! it helps a lot!"
      },
      {
        "user": "ttodua",
        "created_at": "2022-04-01T11:55:46Z",
        "body": "@jamezun if the provided post helped you, feel free to close the issue."
      },
      {
        "user": "samgermain",
        "created_at": "2022-05-07T00:57:54Z",
        "body": "@jamezun I'm going to close this issue, feel free to reopen it if you have any more questions"
      }
    ]
  },
  {
    "number": 12471,
    "title": "Coinbase  fetch_ohlcv() not supported yet",
    "created_at": "2022-03-24T21:30:31Z",
    "closed_at": "2022-03-24T21:57:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12471",
    "body": "\r\n\r\n- OS: Windows\r\n- Programming Language version: Python 3.9\r\n- CCXT version: 1.64.6\r\n\r\n```\r\nimport ccxt\r\n\r\n\r\nexchange = ccxt.coinbase()\r\ntickers = exchange.fetch_ohlcv('BTC/USD', timeframe='1H', limit=200)\r\nd = pd.DataFrame(tickers, columns=['time', 'open', 'high', 'low', 'close', 'volume'])\r\n```\r\n\r\n```\r\nerror : \r\nfetch_ohlcvc  raise NotSupported('fetch_ohlcv() not supported yet')\r\nccxt.base.errors.NotSupported: fetch_ohlcv() not supported yet\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12471/comments",
    "author": "babydl-abc",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-24T21:57:03Z",
        "body": "Use `coinbasepro` (the exchange), instead of `coinbase` (the wallet service). The latter was added to satisfy the Coinbase wallet usage requests. If you need the trading history, then you should use the Coinbase Pro exchange."
      }
    ]
  },
  {
    "number": 12452,
    "title": "Since timestamp exchange.iso8601() not syncing with actual trade timestamp",
    "created_at": "2022-03-23T01:53:29Z",
    "closed_at": "2022-03-23T01:57:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12452",
    "body": "OS: Windows Server 2019 Datacenter\r\nProgramming Language version: Node.js 15.3.0\r\nCCXT version: 1.49.98\r\nExchange: Kucoin\r\nMethod: exchange.iso8601()\r\n\r\nHello!\r\n\r\nI noticed a problem that happens with the `exchange.iso8601()`. I will describe the steps. I am not sure the verbose output is needed or if this is a fundamental \"problem\" that has a solution. Otherwise I will create/add verbose if needed.\r\n\r\nI have written comments in the code which tell the question:\r\n\r\n```\r\n    //First, I Declare the kucoin exchange\r\n    const Exchange = ccxt[\"kucoin\"];\r\n    const exchange = new Exchange({ enableRateLimit: true, 'timeout': 30000 });\r\n\r\n    //Second, I register the kucoin exchange iso8601 Date now which returned: 1647997843992\r\n    var since = exchange.iso8601(Date.now()).toString(); \r\n\r\n    //Third, I now Create order that goes through instantly on kucoin\r\n    var response = await exchange.createOrder(\"ETH/USDT\", \"limit\", \"buy\", 0.002, 3000, {});\r\n\r\n    //Now, I will try and return trades since: \"1647997843992\"\r\n    var trades = await exchange.fetchClosedOrders(\"ETH/USDT\", since, 10); //since: 1647997843992\r\n```\r\nHowever, no trades are returned but I tried to put 1 second back in time manually as since parameter instead `1647997842992`. Now I did return the trade on kucoin.\r\n\r\nThe thing is that the trade has registered this timestamp: `1647997843672`.\r\n`1647997843672 `is `20 `milliseconds BEFORE `1647997843992` which I registered the moment before I created the trade.\r\n\r\nWhy does this happen. It seems that something is not syncing. Shouldn't I get the Absolute timestamp from the exchange?\r\nIs there any safe approach to be sure to have the correct timestamp as the `since`?\r\n\r\nThank you!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12452/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-23T01:57:58Z",
        "body": "@jackpotcityco the `since` argument must be a number in milliseconds (not a string). Alternatively you should use `exchange.parse8601()` to parse an ISO8601 datetime string to a milliseconds-number, cause `exchange.iso8601` is used to convert from milliseconds to a string.\r\n\r\nThis should work, let us know if it does not help:\r\n\r\n```JavaScript\r\n    const exchange = new ccxt[\"kucoin\"]({\r\n        'apiKey': 'YOUR_API_KEY',\r\n        'secret': 'YOUR_SECRET',\r\n        'password': 'YOUR_API_PASSWORD',\r\n    });\r\n\r\n    const since = exchange.milliseconds()\r\n\r\n    const response = await exchange.createOrder(\"ETH/USDT\", \"limit\", \"buy\", 0.002, 3000, {});\r\n\r\n    const trades = await exchange.fetchClosedOrders(\"ETH/USDT\", since, 10);\r\n```"
      },
      {
        "user": "jackpotcityco",
        "created_at": "2022-03-23T02:25:07Z",
        "body": "I understand, it has to be a number ofcourse in milliseconds and not a string. I will try to use the since as you put in like this instead and see how that works then. Thank you for pointing that out!\r\n\r\n`const since = exchange.milliseconds()`\r\n"
      }
    ]
  },
  {
    "number": 12421,
    "title": "[Zipmex] withdraw function",
    "created_at": "2022-03-21T12:45:55Z",
    "closed_at": "2022-03-23T01:51:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12421",
    "body": "OS: macOS Monterey 12.2.1\r\nProgramming Language version: JS, Node 17.7.1\r\nCCXT version:1.77.18 & CCXT.Pro\r\nWhich exchange it is: Zipmex\r\n\r\nWhich method you're trying to call: withdraw()\r\n\r\n...\r\nconst result = await exchange.withdraw(params.currency, params.amount, params.address, params.tag);\r\nconsole.log(result);\r\n...\r\n\r\nWhen I call withdraw method I get this error \"AuthenticationError: zipmex call signIn() method to obtain a session token\". I already use authentication and it does work with other private API. How can I fix this?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12421/comments",
    "author": "prinprem",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-03-22T02:43:17Z",
        "body": "You need to call the `signIn` method before calling other private methods on zipmex, like\r\n\r\n```\r\nconst exchange = ccxt.zipmex( ... )\r\nexchange.signIn()\r\nexchange.loadMarkets()\r\nconst result = await exchange.withdraw(params.currency, params.amount, params.address, params.tag);\r\nconsole.log(result);\r\n```"
      }
    ]
  },
  {
    "number": 12379,
    "title": "Is this the correct way to place a trailing order in FTX? Can we set a trailling trigger price as well in FTX?",
    "created_at": "2022-03-17T19:20:12Z",
    "closed_at": "2022-11-18T06:51:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12379",
    "body": "- OS: win10 \r\n- Programming Language version: python latest\r\n- CCXT version: latest (FTX)\r\n\r\nI am using the FTX exchange, what is the correct way to place a trailing stop order? Is the following correct? **Should I leave price=None?** \r\n`order = exchange.create_order('ETH-PERP','trailingStop','sell', 0.001, price=None, params={'reduceOnly':True,'trailValue':-50,\"retryUntilFilled\": True})`\r\n\r\nIn the FTX CCXT python code, I notice that for create order, there are parameters \"triggerPrice\" and \"triggeredAt\", are they only made for stop price only? **Is it possible to send an trailing market order _with a trigger price_ as well?** (At least I know it is not possible to do so in the website and its app). If yes, how should I rewrite the above code? Thanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12379/comments",
    "author": "jamezun",
    "comments": [
      {
        "user": "DevLeo1",
        "created_at": "2022-10-24T20:28:04Z",
        "body": "Hi, I'm facing same issue. Did you manage to find the correct way to create a Trailing Stop order.\r\n\r\nDocumentation is really poor! =("
      },
      {
        "user": "jamezun",
        "created_at": "2022-10-25T08:44:46Z",
        "body": "> Hi, I'm facing same issue. Did you manage to find the correct way to create a Trailing Stop order.\r\n> \r\n> Documentation is really poor! =(\r\n\r\nAs far as I remember that are no simple way to do that, I just have the program check if the price exceed the trigger price, and if that is the case, I will send out the trailing order..."
      },
      {
        "user": "samgermain",
        "created_at": "2022-11-18T06:51:32Z",
        "body": "Closing because FTX is delisted now, and there is no unified way to set a trailing stop order"
      }
    ]
  },
  {
    "number": 12355,
    "title": "[Zipmex] watchTicker is not trustable",
    "created_at": "2022-03-16T05:06:29Z",
    "closed_at": "2022-03-16T05:32:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12355",
    "body": "- OS: macOS Monterey 12.2.1\r\n- Programming Language version: JS, Node 17.7.1\r\n- CCXT version:1.77.18 & CCXT.Pro\r\n\r\nWhich exchange it is: Zipmex\r\n\r\nWhich method you're trying to call: watchTicker()\r\n\r\n```\r\nconst data = await exchange.watchTicker('BTC/THB');\r\nconsole.log(data);\r\n```\r\n\r\nI do not have any error but I do have problem with the responsed data which is not in realtime comparing to Zipmex exchange, when Zipmex's ticker changes the method watchTicker() send me nothing. It looks like watchTicker() method can only send data every 1 minute which is no longer watch the ticker at all.\r\n\r\nI bought your CCXT Pro license in hopes that it will help me work more easily with Websocket not API. Hope you fix it asap.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12355/comments",
    "author": "prinprem",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-16T05:32:36Z",
        "body": "@prinprem in general, we don't limit the exchange updates, it depends on the underlying exchange how frequently they send the ticker updates. The ticker itself is not real-time, it's a secondary data, that is calculated from the orderbook and trades by 100% of the exchanges, so it will usually either take some delay to update the ticker, or it will be updated in regular intervals. If you want to be as close to realtime as possible, then you want watchOrderBook and watchTrades.\r\n\r\nYou can enable the verbose output and verify that on your end:\r\n\r\n```JavaScript\r\nconst ccxtpro = require ('ccxt.pro')\r\n\r\nasync function main() {\r\n    const exchange = new ccxt.zipmex()\r\n    const markets = await exchange.loadMarkets ()\r\n    exchange.verbose = true\r\n    while (true) {\r\n        try {\r\n            ticker = await exchange.watchTicker ('BTC/THB')\r\n            console.log (ticker)\r\n        } catch (e) {\r\n            console.log (e.constructor.name, e.message)\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nmain ()\r\n```\r\n\r\nHope that answers your question, let us know if not. Feel free to reopen this issue or just ask further questions here if any."
      }
    ]
  },
  {
    "number": 12327,
    "title": " TypeError: catching classes that do not inherit from BaseException is not allowed when I import flask",
    "created_at": "2022-03-12T19:58:17Z",
    "closed_at": "2022-03-14T00:26:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12327",
    "body": "- OS: win 10\r\n- Programming Language version: python3\r\n- CCXT version: 1.56.23\r\n\r\nWhen I import Flask, I have the following error, how could I solve this? I wonder it was caused by clashing with the library of ccxt? There will be another way to fix it by not using flask at all by substituting with another module like fastapi, but to make it simple, I want to know if there is any easy way to solve this first, thanks!\r\n\r\n```\r\n    import ccxt\r\n    from flask import Flask\r\n    \r\n    exchange = ccxt.coinbase()\r\n    markets = exchange.load_markets()\r\n    \r\n    for market in markets:\r\n        print(market)\r\n\r\n```\r\n\r\n> Exception ignored in: <function Exchange.del at 0x000001D30B3B2D30> Traceback (most recent call last): File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 399, in del File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\requests\\sessions.py\", line 747, in close File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\requests\\adapters.py\", line 325, in close File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py\", line 222, in clear File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\urllib3_collections.py\", line 100, in clear File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py\", line 173, in File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 494, in close TypeError: catching classes that do not inherit from BaseException is not allowed",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12327/comments",
    "author": "jamezun",
    "comments": [
      {
        "user": "Hades2525",
        "created_at": "2022-03-13T22:09:54Z",
        "body": "I have the exact same issue :/"
      },
      {
        "user": "kroitor",
        "created_at": "2022-03-14T00:27:56Z",
        "body": "@jamezun @Hades2525 I've pushed a workaround, please, let us know if you have this issue with CCXT Version 1.76.5+, the new build will arrive in ~20 minutes. Thanks!"
      },
      {
        "user": "Hades2525",
        "created_at": "2022-03-15T16:58:02Z",
        "body": "@kroitor it is fixed for me ! Thank you."
      }
    ]
  },
  {
    "number": 12287,
    "title": "The purchase records on the exchange are inconsistent with the purchase records printed when the program runs on the VPS.",
    "created_at": "2022-03-10T22:16:56Z",
    "closed_at": "2022-08-12T15:15:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12287",
    "body": "The exchange shows that there are 7 consecutive purchases recorded recently,\r\nThe display is as follows:\r\n\r\n127518191548,,2022-03-10T05:54:01.417282+00:00,MATIC/USD,buy,10,market,10,10,1.413784,,closed,true,false,false\r\n127499886030,,2022-03-10T04:33:02.230024+00:00,MATIC/USD,buy,10,market,10,10,1.442302,,closed,true,false,false\r\n127468414676,,2022-03-10T01:48:24.343756+00:00,MATIC/USD,buy,10,market,10,10,1.469777,,closed,true,false,false\r\n127460811710,,2022-03-10T01:09:36.615547+00:00,MATIC/USD,buy,10,market,10,10,1.498439,,closed,true,false,false\r\n127403484592,,2022-03-09T19:16:51.270778+00:00,MATIC/USD,buy,10,market,10,10,1.483376,,closed,true,false,false\r\n127328289405,,2022-03-09T12:42:11.514760+00:00,MATIC/USD,buy,10,market,10,10,1.513066,,closed,true,false,false\r\n127291977480,,2022-03-09T08:55:18.879896+00:00,MATIC/USD,buy,10,market,10,10,1.545256,,closed,true,false,false\r\n127291926812,,2022-03-\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHowever, when my program is running on the VPS, only 3 records of adding positions are displayed recently, and there are only 4 records of purchases in total including the first position. \r\nIts print record is as follows:\r\n\r\nthe 3 time added position information:\r\nsymbol： MATIC/USD      type: market     status: closed\r\namount: 10.0      id: 127518191548      datetime： 2022-03-10T05:54:01.417Z\r\nside： buy      price: 1.413784\r\nProfit accumulation time starting 2022-03-08T18:01:42.749Z      accumulation： 1.617860000000002\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThe number of purchases shown on the VPS does not match the number of purchases shown on the exchange. Why is this happening? \r\ncode show as below:\r\n```\r\nimport ccxt\r\nimport time\r\nfrom pprint import pprint\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': 'mykey',\r\n    'secret': 'mysecret',\r\n})\r\n\r\np = 0\r\ni = 1\r\ni1 = 0\r\ni2 = 0\r\ni3 = 0\r\ni4 = 0\r\ni5 = 0\r\ni6 = 0\r\ni7 = 0\r\ni8 = 0\r\ni9 = 0\r\ni10 = 0\r\nj1 = 0\r\nj2 = 0\r\nj3 = 0\r\nj4 = 0\r\nj5 = 0\r\nj6 = 0\r\nj7 = 0\r\nj8 = 0\r\nj9 = 0\r\nj10 = 0\r\nu1 = 0\r\norder_amount_1 = 0\r\ntotal_profit = 0\r\ntotal_total_profit = 0\r\nfirst_datetime = 0\r\na = True\r\nwhile a:\r\n    try:\r\n        usd_balance = ftx.fetch_balance()['USD']['free']\r\n        matic_balance = ftx.fetch_balance()['MATIC']['free']\r\n        matic_price = ftx.fetch_ticker(\"MATIC/USD\")['bid']\r\n        print(\"usd_balance：\", usd_balance, \"    matic_balance：\", matic_balance, \"    matic_price：\", matic_price)\r\n        if total_profit >= 60:\r\n            order_amount_1 += total_profit / 9 / matic_price\r\n            total_profit = 0\r\n        total_matic_order_amount = 0\r\n        total_order_price = 0\r\n        buy_cost = 0\r\n        profit = 0\r\n        x = True\r\n        while x:\r\n            u1 = 1\r\n            matic_order_amount = 10 + order_amount_1\r\n            create_order = ftx.create_order('MATIC/USD', 'market', 'buy', matic_order_amount)\r\n            time.sleep(10)\r\n            order = ftx.fetch_order(create_order['id'], create_order['symbol'])\r\n            order_price = order['price']\r\n            order_id = order['id']\r\n            order_status = order['status']\r\n            order_amount = order['amount']\r\n            if order_status == \"open\":\r\n                print(\"The first position has not been traded:\")\r\n                ftx.cancel_order(order_id)\r\n                time.sleep(10)\r\n            if order_status == \"closed\":\r\n                print(\"The first position has been traded:\")\r\n                total_matic_order_amount = order_amount\r\n                total_order_price += order_price\r\n                buy_cost = order_amount * order_price\r\n                x = False\r\n        print(\"The first position data:\")\r\n        print(\"symbol：\", order['symbol'], \"     type:\", order['type'], \"    status:\", order['status'])\r\n        print(\"amount:\", order['amount'], \"     id:\", order['id'], \"     datetime：\", order['datetime'])\r\n        print(\"side：\", order['side'], \"     price:\", order['price'])\r\n        print(\"Profit accumulation time starting:\", first_datetime, \"     accumulation：\", total_total_profit)\r\n        print(\"The last 10 profit records:\")\r\n        print(j1, i1)\r\n        print(j2, i2)\r\n        print(j3, i3)\r\n        print(j4, i4)\r\n        print(j5, i5)\r\n        print(j6, j6)\r\n        print(j7, i7)\r\n        print(j8, i8)\r\n        print(j9, i9)\r\n        print(j10, i10)\r\n        s = 1\r\n        while s >= 1 and s <= 9:\r\n            time.sleep(1)\r\n            matic_price = ftx.fetch_ticker(\"MATIC/USD\")['bid']\r\n            if matic_price <= order_price-order_price*0.02:\r\n                y = True\r\n                while y:\r\n                    u1 = 2\r\n                    matic_order_amount = 10 + order_amount_1\r\n                    create_order = ftx.create_order('MATIC/USD', 'market', 'buy', matic_order_amount)\r\n                    time.sleep(10)\r\n                    order = ftx.fetch_order(create_order['id'], create_order['symbol'])\r\n                    order_price = order['price']\r\n                    order_id = order['id']\r\n                    order_status = order['status']\r\n                    order_amount = order['amount']\r\n                    if order_status == \"open\":\r\n                        print(\"The add position has not been traded:\")\r\n                        ftx.cancel_order(order_id)\r\n                        time.sleep(5)\r\n                    if order_status == \"closed\":\r\n                        print(\"The add position has been traded:\")\r\n                        s += 1\r\n                        total_matic_order_amount += order_amount\r\n                        total_order_price += order_price\r\n                        buy_cost += order_amount * order_price\r\n                        y = False\r\n                print(\"the\", s-1, \"time added position information:\")\r\n                print(\"symbol：\", order['symbol'], \"     type:\", order['type'], \"    status:\", order['status'])\r\n                print(\"amount:\", order['amount'], \"     id:\", order['id'], \"     datetime：\", order['datetime'])\r\n                print(\"side：\", order['side'], \"     price:\", order['price'])\r\n                print(\"Profit accumulation time starting\", first_datetime, \"     accumulation：\", total_total_profit)\r\n                print(\"The last 10 profit records:\")\r\n                print(j1, i1)\r\n                print(j2, i2)\r\n                print(j3, i3)\r\n                print(j4, i4)\r\n                print(j5, i5)\r\n                print(j6, j6)\r\n                print(j7, i7)\r\n                print(j8, i8)\r\n                print(j9, i9)\r\n                print(j10, i10)\r\n            elif matic_price >= total_order_price/s + total_order_price/s * 0.015:\r\n                z = True\r\n                while z:\r\n                    u1 = 3\r\n                    create_order = ftx.create_order('MATIC/USD', 'market', 'sell', total_matic_order_amount)\r\n                    time.sleep(10)\r\n                    order = ftx.fetch_order(create_order['id'], create_order['symbol'])\r\n                    order_id = order['id']\r\n                    order_price = order['price']\r\n                    order_status = order['status']\r\n                    order_amount = order['amount']\r\n                    if order_status == \"open\":\r\n                        print(\"The sell position has not been traded:\")\r\n                        ftx.cancel_order(order_id)\r\n                        time.sleep(5)\r\n                    if order_status == \"closed\":\r\n                        print(\"The sell position has been traded:\")\r\n                        s = 0\r\n                        z = False\r\n                profit = order_price * order_amount - buy_cost\r\n                total_profit += profit\r\n                total_total_profit += profit\r\n                print(\"Sell information:\")\r\n                print(\"symbol：\", order['symbol'], \"     type:\", order['type'], \"    status:\", order['status'])\r\n                print(\"amount:\", order['amount'], \"     id:\", order['id'], \"     datetime：\", order['datetime'])\r\n                print(\"side：\", order['side'], \"     price:\", order['price'])\r\n                print(\"Current sell profit：\", profit)\r\n                if p == 0:\r\n                    first_datetime = order['datetime']\r\n                    p = 1\r\n                print(\"Profit accumulation time starting\", first_datetime, \"     accumulation：\", total_total_profit)\r\n                if i == 1:\r\n                    i1 = profit\r\n                    j1 = order['datetime']\r\n                if i == 2:\r\n                    i2 = profit\r\n                    j2 = order['datetime']\r\n                if i == 3:\r\n                    i3 = profit\r\n                    j3 = order['datetime']\r\n                if i == 4:\r\n                    i4 = profit\r\n                    j4 = order['datetime']\r\n                if i == 5:\r\n                    i5 = profit\r\n                    j5 = order['datetime']\r\n                if i == 6:\r\n                    i6 = profit\r\n                    j6 = order['datetime']\r\n                if i == 7:\r\n                    i7 = profit\r\n                    j7 = order['datetime']\r\n                if i == 8:\r\n                    i8 = profit\r\n                    j8 = order['datetime']\r\n                if i == 9:\r\n                    i9 = profit\r\n                    j9 = order['datetime']\r\n                if i == 10:\r\n                    i10 = profit\r\n                    j10 = order['datetime']\r\n                i += 1\r\n                if i >= 11:\r\n                    i = 1\r\n                print(\"The last 10 profit records:\")\r\n                print(j1, i1)\r\n                print(j2, i2)\r\n                print(j3, i3)\r\n                print(j4, i4)\r\n                print(j5, i5)\r\n                print(j6, j6)\r\n                print(j7, i7)\r\n                print(j8, i8)\r\n                print(j9, i9)\r\n                print(j10, i10)\r\n                ftx.purge_cached_orders()\r\n            else:\r\n                gg = 0\r\n            if u1 == 1:\r\n                time.sleep(2)\r\n                print(\"The first position data:\")\r\n                print(\"symbol：\", order['symbol'], \"     type:\", order['type'], \"    status:\", order['status'])\r\n                print(\"amount:\", order['amount'], \"     id:\", order['id'], \"     datetime：\", order['datetime'])\r\n                print(\"side：\", order['side'], \"     price:\", order['price'])\r\n                print(\"Profit accumulation time starting:\", first_datetime, \"     accumulation：\", total_total_profit)\r\n                print(\"The last 10 profit records:\")\r\n                print(j1, i1)\r\n                print(j2, i2)\r\n                print(j3, i3)\r\n                print(j4, i4)\r\n                print(j5, i5)\r\n                print(j6, j6)\r\n                print(j7, i7)\r\n                print(j8, i8)\r\n                print(j9, i9)\r\n                print(j10, i10)\r\n            if u1 == 2:\r\n                time.sleep(2)\r\n                print(\"the\", s - 1, \"time added position information:\")\r\n                print(\"symbol：\", order['symbol'], \"     type:\", order['type'], \"    status:\", order['status'])\r\n                print(\"amount:\", order['amount'], \"     id:\", order['id'], \"     datetime：\", order['datetime'])\r\n                print(\"side：\", order['side'], \"     price:\", order['price'])\r\n                print(\"Profit accumulation time starting\", first_datetime, \"     accumulation：\", total_total_profit)\r\n                print(\"The last 10 profit records:\")\r\n                print(j1, i1)\r\n                print(j2, i2)\r\n                print(j3, i3)\r\n                print(j4, i4)\r\n                print(j5, i5)\r\n                print(j6, j6)\r\n                print(j7, i7)\r\n                print(j8, i8)\r\n                print(j9, i9)\r\n                print(j10, i10)\r\n    except:\r\n        print(\"network timeout.\")\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12287/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-12T19:50:01Z",
        "body": "Unfortunately, I cannot rewrite that code for you but the main cause of the issue you're seeing is too much dirty code and too much hardcoding of the indexes in your code, people usually don't write programs like this:\r\n\r\n```Python\r\n                if i == 1:\r\n                    i1 = profit\r\n                    j1 = order['datetime']\r\n                if i == 2:\r\n                    i2 = profit\r\n                    j2 = order['datetime']\r\n                if i == 3:\r\n                    i3 = profit\r\n                    j3 = order['datetime']\r\n                if i == 4:\r\n                    i4 = profit\r\n                    j4 = order['datetime']\r\n                if i == 5:\r\n                    i5 = profit\r\n                    j5 = order['datetime']\r\n                if i == 6:\r\n                    i6 = profit\r\n                    j6 = order['datetime']\r\n                if i == 7:\r\n                    i7 = profit\r\n                    j7 = order['datetime']\r\n                if i == 8:\r\n                    i8 = profit\r\n                    j8 = order['datetime']\r\n                if i == 9:\r\n                    i9 = profit\r\n                    j9 = order['datetime']\r\n                if i == 10:\r\n                    i10 = profit\r\n                    j10 = order['datetime']\r\n                i += 1\r\n                if i >= 11:\r\n                    i = 1\r\n                print(\"The last 10 profit records:\")\r\n                print(j1, i1)\r\n                print(j2, i2)\r\n                print(j3, i3)\r\n                print(j4, i4)\r\n                print(j5, i5)\r\n                print(j6, j6)\r\n                print(j7, i7)\r\n                print(j8, i8)\r\n                print(j9, i9)\r\n                print(j10, i10)\r\n                ftx.purge_cached_orders()\r\n ```\r\n\r\nInstead, you should accumulate the stats of your interest into an double ended queue (deque) and add to one end of the queue, while removing from the other end, or simply use an array of most recent entries and walk over it. In other words, this is not a question about CCXT, it is more of a question about how to do general programming. We cannot really teach programming due to a lack of human resources. This library does require a decent experience with the programming concepts."
      },
      {
        "user": "ttodua",
        "created_at": "2022-08-12T15:15:40Z",
        "body": "The above answer by @ kroitor was sufficient in this case. Let us know if anyone has any specific issue with CCXT."
      }
    ]
  },
  {
    "number": 12212,
    "title": "Update stoploss for running contract",
    "created_at": "2022-03-07T19:18:36Z",
    "closed_at": "2022-08-12T15:19:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12212",
    "body": "Hello,\r\n\r\nI do a contract order and open a position with a stoploss. Now I want to update my stoploss in certain cases.\r\nCan someone tell me how to do that in python?\r\n\r\nThanks!\r\n\r\nBest regards ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12212/comments",
    "author": "dani-s-92",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-04-07T03:35:02Z",
        "body": "What exchange are you using? Some exchanges have the method `editOrder`, but it might not work for stoploss orders on your exchange, you might need to use `cancelOrder` to cancel your stoploss, and then create a new stoploss order"
      },
      {
        "user": "ttodua",
        "created_at": "2022-08-12T15:19:07Z",
        "body": "The above answer by @samgermain was probably sufficient in such case (where there were no more details provided). If anyone has any further issues with CCXT, let us know. Also, provide more specific details as mentioned above.\r\n\r\nI would just add, that some exchanges might need to add `{stop: true}` in params, to refer the order type to stop-kind orders."
      }
    ]
  },
  {
    "number": 12199,
    "title": "how i can get future and margin symbol with load_market in coinex",
    "created_at": "2022-03-05T16:17:56Z",
    "closed_at": "2022-03-06T06:35:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12199",
    "body": "i get symbols for binance but when i want get symbols margin and future for coinex, it don't get any thing\r\nthis is my code for binance:\r\n\r\n            `import pandas as pd\r\n             import ccxt\r\n\r\n             binance = ccxt.binance()\r\n             pairs=pd.DataFrame(binance.load_markets())\r\n             pairs=pairs.T\r\n\r\n             pairs.drop(pairs.loc[pairs['margin']!=True].index, inplace=True)\r\n             pairs.drop(pairs.loc[pairs['quote']!='USDT'].index, inplace=True)\r\n             pairs=pairs['symbol']\r\n             pairs=pd.DataFrame(pairs)\r\n             pairs.reset_index(drop=True, inplace=True)\r\n             pd.set_option('display.max_row', pairs.shape[0]+1)\r\n             pairs`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12199/comments",
    "author": "hossain93",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-06T06:35:05Z",
        "body": "@hossain93 you are using the `binance` instance that defaults to spot markets, use `binanceusdm` for binance USDT-margined futures and swaps, and `binancecoinm` for coin-margined futures and swaps."
      },
      {
        "user": "hossain93",
        "created_at": "2022-03-06T12:49:11Z",
        "body": "> @hossain93 you are using the `binance` instance that defaults to spot markets, use `binanceusdm` for binance USDT-margined futures and swaps, and `binancecoinm` for coin-margined futures and swaps.\r\n\r\nI want symbols for coinex\r\nBinance is for example"
      },
      {
        "user": "kroitor",
        "created_at": "2022-03-06T13:01:21Z",
        "body": "@hossain93 CCXT does not support the CoinEx futures symbols yet, but we will add that part as soon as we can in one of the coming versions."
      },
      {
        "user": "Behrouz-m",
        "created_at": "2022-07-31T02:58:51Z",
        "body": "> @hossain93 CCXT does not support the CoinEx futures symbols yet, but we will add that part as soon as we can in one of the coming versions.\r\n\r\nhi. have you implemented it yet?"
      }
    ]
  },
  {
    "number": 12034,
    "title": "Question: precision of assets",
    "created_at": "2022-02-20T07:29:48Z",
    "closed_at": "2022-02-20T11:13:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12034",
    "body": "Got a question regarding precision of assets.\r\nIt's not clear to me if precision of the same asset/currency if always the same all exchange markets. Or can it be different?\r\nCan I use precision from Currency or should I always use precision from Market (base or quote depending where my currency is). \r\n\r\nFor example, is it possible that BTC on WAVES/BTC (as quote) has precision 8 and on BTC/LTC (as base) has precision 7? \r\nAnyone? Thank you in advance!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12034/comments",
    "author": "dar7man",
    "comments": [
      {
        "user": "AnimusXCASH",
        "created_at": "2022-02-20T10:44:08Z",
        "body": "Yes, the precision can vary amongst exchanges. \n\nBrg"
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:09:29Z",
        "body": "Sorry, maybe I wasn't clear. \r\nI was asking if precision can very amongst markets on the same exchange?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:13:34Z",
        "body": "@dar7man hi! Yes, that is very common, an exchange can have varying precision with different markets (on the same exchange). Hope that answers your question, let us know if not."
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:16:24Z",
        "body": "I'm not sure. I was asking if one asset (for example BTC), can have different precision on the **same exchange** but on **different markets**?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:25:53Z",
        "body": "@dar7man yes, that is possible, the same asset can have different precision within different market pairs on the same exchange."
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:30:11Z",
        "body": "Thank you!\r\n\r\nSo, what's the point in CCTX of \"precision\" field in Currency structure?\r\nHow it corresponds to \"precision\" in Market structure?\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:35:07Z",
        "body": "@dar7man withdrawal precision is not always the same as trading precision. \r\n\r\n> How it corresponds to \"precision\" in Market structure?\r\n\r\nIf the exchange does not specify a per-currency precision or any currency info per se, then the highest precision from markets is taken for currencies.\r\n\r\nIf the exchange does define separate per-currency and per-market precision for BTC, then CCXT will use that where applicable."
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:42:19Z",
        "body": "Got it! \r\nThank you very much for detailed explanation."
      }
    ]
  },
  {
    "number": 11973,
    "title": " Historical asset prices",
    "created_at": "2022-02-15T12:59:12Z",
    "closed_at": "2022-02-16T18:17:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11973",
    "body": "\r\nHey guys!\r\ncan you help me?\r\n\r\nI would like to extract BTC/USDT data from 01/01/2021 to daily 12/31/2021 in the chart by Exchange Binance.\r\nHow to put the script by CCXT?\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11973/comments",
    "author": "BBX0001",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-02-16T17:31:10Z",
        "body": "@BBX0001 What language are you using?"
      },
      {
        "user": "BBX0001",
        "created_at": "2022-02-16T18:08:18Z",
        "body": "\r\nI'm using Python.\r\nI couldn't find the script as per the description.\r\nFor example, I need to extract BTC/USDT prices between 01/01/2021 to 01/01/2022 on 1-day timeframe by Exchange Binance.\r\n\r\nWhich script can I use to fetch this information?"
      },
      {
        "user": "BBX0001",
        "created_at": "2022-02-16T18:08:57Z",
        "body": "> @BBX0001 Qual idioma você está usando?\r\n\r\n\r\nI'm using Python.\r\nI couldn't find the script as per the description.\r\nFor example, I need to extract BTC/USDT prices between 01/01/2021 to 01/01/2022 on 1-day timeframe by Exchange Binance.\r\n\r\nWhich script can I use to fetch this information?"
      },
      {
        "user": "samgermain",
        "created_at": "2022-02-16T18:17:32Z",
        "body": "```\r\nfrom datetime import datetime\r\nimport ccxt\r\n\r\nbinance = ccxt.binance()\r\n\r\nsymbol = 'BTC/USDT'\r\nticker = '1d'\r\ndate = int(datetime(2021, 1, 1).timestamp()) * 1000\r\nlimit = 365 # days per year\r\nprint(date1)\r\n\r\nbinance.loadMarkets()\r\nres = binance.fetch_ohlcv(symbol, ticker, date1, limit)\r\nprint(res)\r\n```"
      }
    ]
  },
  {
    "number": 11965,
    "title": "Incorrect data from huobi for the create_order method",
    "created_at": "2022-02-14T09:53:45Z",
    "closed_at": "2022-02-14T17:53:34Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11965",
    "body": "My ccxt verison is: 1.72.98\r\nOS: Linux Ubuntu 20.04\r\nProgramming language is: php8.0\r\nExchange is: huobi\r\nMethod is create_order gives a bad answer.\r\n\r\nMy code is:\r\n```\r\n<?php\r\n\r\nrequire dirname(__DIR__) . \"/vendor/autoload.php\";\r\n\r\n// создаем main класс\r\n$exchange_class = \"\\\\ccxt\\\\\" . 'huobi';\r\n\r\n$exchange = new $exchange_class ([\r\n    \"apiKey\" => $api_public,\r\n    \"secret\" => $api_secret,\r\n    \"timeout\" => 10000,\r\n    \"enableRateLimit\" => false\r\n]);\r\n\r\n// добавляем рынки для Main класса\r\n$markets = $exchange->fetch_markets();\r\n\r\n// созаем ордер\r\n$order = $exchange->create_order(\r\n    'BTC/USDT',\r\n    'limit',\r\n    'buy',\r\n    0.0005,\r\n    30000\r\n);\r\n\r\nprint_r($order);\r\n```\r\nCcxt output is:\r\n```\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [status] => ok\r\n            [data] => 472917275198035\r\n        )\r\n\r\n    [id] => 472917275198035\r\n    [timestamp] =>\r\n    [datetime] =>\r\n    [lastTradeTimestamp] =>\r\n    [status] =>\r\n    [symbol] =>\r\n    [type] =>\r\n    [side] =>\r\n    [price] =>\r\n    [amount] =>\r\n    [filled] =>\r\n    [remaining] =>\r\n    [cost] =>\r\n    [trades] =>\r\n    [fee] =>\r\n    [clientOrderId] =>\r\n    [average] =>\r\n)\r\n```\r\n\r\nMy question is: why this method gives only id? And other values null?\r\n\r\nBut other methods like fetch_open_orders() gives correct data.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11965/comments",
    "author": "kleninmaxim",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-02-14T17:53:34Z",
        "body": "If you look into the order structure, it has the `info` substructure in it, and that contains the exchange response to `createOrder`, as is, untouched. In CCXT all response structures will have that `info` member field and you can see the exchanges' responses in it, and that is documented in the CCXT Manual. When you place an order, most of the exchanges will return just the new order id. CCXT will parse that and will return whatever data is available from the exchange response. CCXT will not fill up those values, if the underlying exchange does not specify them in the response. Hope that answers your question."
      }
    ]
  },
  {
    "number": 11663,
    "title": "Is there anyway to get transcation count for a period of time?",
    "created_at": "2022-01-26T07:06:44Z",
    "closed_at": "2022-01-26T16:59:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11663",
    "body": "ccxt can get candle data for coins.\r\nIs there anyway to get transaction count and active addess count for 1min or 1hour or 1day?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11663/comments",
    "author": "universewill",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-01-26T16:59:26Z",
        "body": "> ccxt can get candle data for coins. Is there anyway to get transaction count and active addess count for 1min or 1hour or 1day?\r\n\r\nWith CCXT you can fetch your personal transaction history from the exchanges (fetchTransactions, fetchDeposits, fetchWithdrawals, see the Manual on how to do that), but not from the blockchain/addresses.\r\n\r\nHope that answers your question, let us know if not."
      },
      {
        "user": "universewill",
        "created_at": "2022-01-28T03:13:25Z",
        "body": "> > ccxt can get candle data for coins. Is there anyway to get transaction count and active addess count for 1min or 1hour or 1day?\r\n> \r\n> With CCXT you can fetch your personal transaction history from the exchanges (fetchTransactions, fetchDeposits, fetchWithdrawals, see the Manual on how to do that), but not from the blockchain/addresses.\r\n> \r\n> Hope that answers your question, let us know if not.\r\n\r\nThanks for your reply!\r\n\r\nI want to use some statistics of the digital coin market like transaction count for a period (1min/1hour/...), active address count and etc, to do quant strategy, is there any way to get these data?\r\n\r\nI notice that the pulic api of ccxt contains fetchTrade() api, is it right to count trade numbers from the fetch result to get transaction count for a period of time?\r\n@kroitor "
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-28T14:50:56Z",
        "body": "@universewill \r\n> is it right to count trade numbers from the fetch result to get transaction count for a period of time?\r\n\r\nIt depends on what exactly you call \"transactions\". In CCXT a transaction is something that goes on the blockchain (either a deposit or a withdrawal to a crypto exchange). Trades are not transactions, though, cause they happen on the exchange side, not on the blockchain. If you need the exchange trades, then fetchTrades will do the job for you. If you need the blockchain transactions, then I would suggest to take a look at web3.\r\n\r\n"
      }
    ]
  },
  {
    "number": 11614,
    "title": "What is expected latency for placing an order, other than network transfer latency?",
    "created_at": "2022-01-22T16:24:50Z",
    "closed_at": "2022-01-24T19:33:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11614",
    "body": "Microseconds?  Milliseconds?  1 second? Few seconds? Often many seconds?\r\nExample, if 100 orders are placed, what range of times should be expected between when ccxt createOrder is called and when the order is live on the exchange order book, after subtracting the network delay/transfer time from the server to the exchange?\r\nAnother way of asking the same thing: is expected latency to place an order significantly longer than the network delay (eg if using a server in the same geography as the exchange)?  Once an order arrives at an exchange via ccxt/exchange api, is there meaningful additional delay on the exchange side before the order is live on their order book?\r\nHow much does this vary between the exchanges, and during periods of high volume?\r\nWhat is a reasonable maximum delay to anticipate between the time a create order is placed in ccxt and the time that the order is live on the exchange book or executes?\r\nHas this latency been extensively tested?\r\nI assume that there is microsecond latency within the ccxt code itself and no network traffic required before the order goes to the exchange via the api, assuming that loadMarkets had been called previously, correct?\r\n\r\nThank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11614/comments",
    "author": "cdcv",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-01-23T11:52:20Z",
        "body": "This question will never have an exact answer. There are different things involved (_if we theoretically discard network latency and consider it as zero_) :\r\n- exchange engine: we cant answer, every exchange has different engine and it's impossible to measure their timing, it also depends on their 'high-overload' or 'low-overload' state (only they can do their internal benchmarks & measurements in their system, but I am sure they will not share this stats in public). Even if someone tested and wrote the numbers somewhere in any article, it will not be exact (because of many different factors). Order-matching and execution engine is not a fairly simple script, it has to interact with a database, consider rate-limiting and other factors.. It also depends on what strength of the servers are being used. However, to summarize in my opinion, any good exchange should be capable to place an order within several milliseconds (It's impossible to tell even an approximated number, but I don't think it would be more than 50ms even in loaded scenario, even though in very very rare cases I've experienced higher delays too).\r\n- CCXT doesn't have its own specifics about speed - it depends on the hosted server/hardware/pc. If you execute 'createOrder' on _Pentium 1_, it might take X milliseconds, but if you run that on modern cpu, it will take Y times less. Neither this is possible to tell how many MS/MicroSecond it takes - it varies per hardware, and also per programming-language (JS, PHP, PY?), per CPU multithreading and whether CPU has enough resources at that moment (i.e. not running other extensive CPU eating apps).\r\n\r\nand even if someone tested these, that will be very very very broad approximations (I've mentioned above my assumptions). The only way to answer that , is that you tested (google is your friend) with the specific tools from specific location with specific hardware. For the start step, you can measure (debug) the time-difference between you execute ccxt code and the moment before it send request. It might be a couple of MS i think ( lets say 1,2,3,4... depending hardware).  \r\n\r\n@kroitor / @frosty00 let us know if you have more thoughts."
      },
      {
        "user": "cdcv",
        "created_at": "2022-01-23T12:25:44Z",
        "body": "Very helpful.  Thank you.  Sounds like all of the other delays are small relative to the network latency."
      },
      {
        "user": "cdcv",
        "created_at": "2022-01-23T12:39:21Z",
        "body": "Do any of the crypto exchanges offer colocalization of client servers on-site, to minimize data transmission latency?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-24T19:33:07Z",
        "body": "> Do any of the crypto exchanges offer colocalization of client servers on-site, to minimize data transmission latency?\r\n\r\nYes, some of them do, but you will have to reach out to the exchanges themselves with this question, cause we can't really respond on their behalf in this case. Some of them offer server colocation, other will offer CPU time on their servers or within their networks."
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-24T19:33:39Z",
        "body": "Closing this for now, if you don't mind. Feel free to reopen it or just ask further questions if any."
      }
    ]
  },
  {
    "number": 11589,
    "title": "Retrieving Data from CoinMarketCap",
    "created_at": "2022-01-21T06:51:27Z",
    "closed_at": "2022-01-21T06:54:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11589",
    "body": "- OS: Edition\t\r\nWindows 11 Home\r\nVersion\t21H2\r\nOS build\t22000.434\r\n\r\n- Programming Language version: Python 3.7.0\r\n- CCXT version: CCXT Version: 1.68.95\r\n\r\nTrying to access the coinmarketcap class using the following code snippet on Google Colab but getting an error that ccxt has no attribute coinmarketcap \r\n\r\nCODE (running on Google Colab):\r\n```\r\n!pip3 install ccxt\r\nimport ccxt\r\ncmc = ccxt.coinmarketcap()\r\ncmc.fetch_tickers()\r\n```\r\n\r\nOUTPUT:\r\n```\r\nAttributeError: module 'ccxt' has no attribute 'coinmarketcap'\r\n```\r\n\r\nAlso, is it possible to get the historical market cap data from coinmarketcap by specifying a date as a parameter?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11589/comments",
    "author": "kaijun40640",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-01-21T06:54:10Z",
        "body": "Coinmarketcap has been delisted since they changed their API for private paid access. Hope that answers your question."
      }
    ]
  },
  {
    "number": 11579,
    "title": "How to enable 2FA for connection for FTX api? (Python)",
    "created_at": "2022-01-20T18:11:20Z",
    "closed_at": "2022-01-21T00:46:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11579",
    "body": "I would like to have the option to connect/login to my account using 2FA to enable all the measures available for safety. Unfortunately I didn't find an answer/guide that refers to this problem.\r\n\r\nTo take 2FA into account I've changed in the file /base/exchange.py:\r\nat line 172\r\n`twofa = ' '`\r\n\r\nand at line 249\r\n`'twofa': True`\r\n\r\nSo now when I try to run a basic code it's asked to me to add/include the 'twofa' variable in the `ccxt.ft({ ...})` initialization process, otherwise I won't perform any task.\r\n\r\nBut, now if I add a completely random `'twofa'=123456` it will connect to my account and perform normally. In this case to me twofa is completely secondary to `apiKey` and `secret`. It's like the important thing is to add `'twofa'` to the initialization process `ccxt.ft({ ...})` but it doesn't care if it's a correct or completely wrong 2FA\r\n\r\nI would like to establish a connection with my account with `'apiKey'`, `'secret'` and `'twofa'` all togheter.\r\n\r\nthis is the code that I'm running with a completely random(WRONG) 2FA and it works completely fine like it's a correct 2FA code:\r\n\r\n\r\n```\r\nimport ccxt\r\nimport pandas as pd\r\n\r\nmy_APIKEY = 'mypswd0'\r\nmy_SECRETKEY = 'mypswd1'\r\ntwofact = 123456   ##random wrong code\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': my_APIKEY,\r\n    'secret': my_SECRETKEY,\r\n    'twofa': twofact,\r\n    \"hostname\": \"ftx.com\",\r\n    'options': {\r\n        'defaultType': 'future',\r\n                 },\r\n})\r\n\r\n```\r\n\r\nHow can I perform this? thank you in advance.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11579/comments",
    "author": "riemanncode",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-01-21T00:46:05Z",
        "body": "FTX API does not need a twofa setting. The 2fa code is only mentioned once in the withdraw() call.\r\n\r\nYou should use it like this:\r\n\r\n```Python\r\nexchange = ccxt.ftx({\r\n    'apiKey': my_APIKEY,\r\n    'secret': my_SECRETKEY,\r\n})\r\n\r\nexchange.load_markets()\r\n\r\nparams = {\r\n    \r\n    'code': exchange.totp ('YOUR_2FA_SECRET_HERE'),  # will yield a 6-digit timebased 2fa code\r\n    # 'password': 'YOUR_WITHDRAWAL_PASSWORD_IF_ANY',\r\n    \r\n    # other overrides if necessary\r\n}\r\nresponse = exchange.withdraw (code, amount, address, tag, params)\r\n```\r\n\r\nHope that answers your question. Let us know if not. Feel free to reopen this issue or just ask further questions if any."
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-21T00:46:51Z",
        "body": "Alternatively, you can also do it like this:\r\n\r\n```Python\r\nexchange = ccxt.ftx({\r\n    'apiKey': my_APIKEY,\r\n    'secret': my_SECRETKEY,\r\n    'twofa': 'YOUR_2FA_SECRET_CODE_HERE'\r\n})\r\n\r\nexchange.load_markets()\r\n\r\nparams = {\r\n    \r\n    'code': exchange.oath (),  # will yield a 6-digit timebased 2fa code\r\n    # 'password': 'YOUR_WITHDRAWAL_PASSWORD_IF_ANY',\r\n    \r\n    # other overrides if necessary\r\n}\r\nresponse = exchange.withdraw (code, amount, address, tag, params)\r\n```"
      }
    ]
  },
  {
    "number": 11176,
    "title": "How to pass sub account argument to Binance exchange instantiation",
    "created_at": "2022-01-08T17:02:23Z",
    "closed_at": "2022-01-08T17:03:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11176",
    "body": "I can't find anywhere the syntax to tell Binance to load data (.fetchBalance(), .fetch_positions()) only on a subaccount?\r\nOn FTX, I would add the below to the parameters dict:\r\n'headers': {'FTX-SUBACCOUNT': 'YOURSUBACCOUNTNAME'}\r\n\r\nI've tried replacing the headers key by 'BINANCE-SUBACCOUNT', or 'SUBACCOUNT', but everytime I get error 2015:\r\n{AuthenticationError}binance {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11176/comments",
    "author": "bsauvage1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-01-08T17:03:41Z",
        "body": "@bsauvage1 with Binance the API keypair identifies the subaccount, i think, so if you pass the subaccount API key to it, it should fetch the subaccount balance. Let us know if that does not help."
      },
      {
        "user": "bsauvage1",
        "created_at": "2022-01-08T17:14:03Z",
        "body": "ha - it was an issue with my key! it's indeed working fine and directly pings the subaccount. Thank you!\r\n"
      }
    ]
  },
  {
    "number": 11021,
    "title": "kucoinapiexception 400004: invalid kc-api-passphrase",
    "created_at": "2021-12-25T15:30:49Z",
    "closed_at": "2021-12-25T15:32:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11021",
    "body": " I wrote this code, but it shows error 400004\r\norder = client.create_market_order('KCS-BTC', Client.SIDE_BUY, size=1)\r\nHow can I fix it?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11021/comments",
    "author": "ZahraMoosavi77",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-12-25T15:32:36Z",
        "body": "Make sure that you use the correct API password (not your trading password and not your login password). Hope that helps."
      }
    ]
  },
  {
    "number": 10966,
    "title": "FTX: 'canceled' ccxt status for Partially Filled & Cancelled order  ",
    "created_at": "2021-12-21T11:03:37Z",
    "closed_at": "2021-12-21T11:05:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10966",
    "body": "We have received 'canceled' ccxt status in order response but in the 'info' parameters there is a 'closed' status and \r\nactual status on FTX is \"Partially Filled & Cancelled\".\r\nIs this behavior is OK?\r\n\r\n- OS: Debian (Docker)\r\n- Programming Language version: JavaScript\r\n- CCXT version: CCXT PRO: 0.9.35\r\n\r\nReceived order data: \r\n```\r\n{\"info\":\r\n{\r\n\t\"id\":\"**************\",\r\n\t\"clientId\":\"**************\",\r\n\t\"market\":\"BTC/USD\",\r\n\t\"type\":\"market\",\r\n\t\"side\":\"buy\",\r\n\t\"price\":null,\r\n\t\"size\":\"0.988\",\r\n\t\"status\":\"closed\",\r\n\t\"filledSize\":\"0.9851\",\r\n\t\"remainingSize\":\"0.0\",\r\n\t\"reduceOnly\":false,\r\n\t\"liquidation\":false,\r\n\t\"avgFillPrice\":\"48064.121002943866\",\r\n\t\"postOnly\":false,\r\n\t\"ioc\":true,\r\n\t\"createdAt\":\"2021-12-21T04:00:25.397410+00:00\",\r\n\t\"future\":null\r\n},\r\n\"id\":\"**************\",\r\n\"clientOrderId\":\"**************\",\r\n\"timestamp\":1640059225397,\r\n\"datetime\":\"2021-12-21T04:00:25.397Z\",\r\n\"symbol\":\"BTC/USD\",\r\n\"type\":\"market\",\r\n\"postOnly\":false,\r\n\"side\":\"buy\",\r\n\"price\":48064.121002943866,\r\n\"amount\":0.988,\r\n\"cost\":47347.9656,\r\n\"average\":48064.121002943866,\r\n\"filled\":0.9851,\r\n\"remaining\":0.0029,\r\n\"status\":\"canceled\",\r\n\"trades\":[],\r\n\"fees\":[]\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10966/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-12-21T11:05:08Z",
        "body": "> We have received 'canceled' ccxt status in order response but in the 'info' parameters there is a 'closed' status and actual status on FTX is \"Partially Filled & Cancelled\". Is this behavior is OK?\r\n\r\nYes, that is by design. A partially-filled-then-canceled order will have status `canceled` and `amount = filled + remaining`. The `remaining` value will be > 0. All of that is logical. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 10960,
    "title": "Move exchange specific logic into parseBalance",
    "created_at": "2021-12-20T17:13:31Z",
    "closed_at": "2021-12-21T08:39:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10960",
    "body": "- OS: all\r\n- Programming Language version: JS\r\n- CCXT version: 1.63.10\r\n\r\nHi all! first of all, thanks for this library, it is very useful!\r\n\r\nI am checking the code base and I see some code that is not following the structure of similar methods. For example, any `fetch` method follows this structure\r\n```js\r\nasync fetchSomething (params) {\r\n  // 1. prepare the request\r\n  const request = {}\r\n  // 2. execute the request\r\n  const response = await this[method] (request)\r\n  // 3. call to parse with raw response\r\n  return this.parseSomething(response)\r\n}\r\n\r\nparseSomething (response) {\r\n  // Exchange specific parse\r\n  return super.parseSomething(response)\r\n}\r\n```\r\n\r\nThis is very cool as we split fetching from parsing. But for `fetchBalance` method is something like this\r\n```js\r\nasync fetchBalance (params) {\r\n  // 1. prepare the request\r\n  const request = {}\r\n  // 2. execute the request\r\n  const response = await this[method] (request)\r\n  // 3. preparse the balance\r\n  const result = { info: response }\r\n  // 4. call to parse with pre parsed data\r\n  return this.parseBalance(result)\r\n}\r\n```\r\n\r\nIs there any reason why this is done in this way? I think `fetchBalance` should follow the same rules than other `fetch` methods, and should pass to the `parseBalance` method the raw response from the exchange, so the exchange specific parse logic is done in the `parse` method and not in the `fetchBalance`.\r\n\r\nI've been working on it and it works fine for Binance, so I could create a quick PR and start moving the logic for every exchange.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10960/comments",
    "author": "fernandocalsa",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-12-20T20:43:14Z",
        "body": "`parseBalance` is in the base class and it populates the fields `['free', 'used', 'total']` so that `balance['free']['USDT']` and `balance['USDT']['free']` are equivalent. I don't really think it is critical to move the parsing out of `fetchBalance` at this stage."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-21T08:38:35Z",
        "body": "We will eventually detach the parsing logic from fetchBalance's implementations from all exchanges, however, since `parseBalance` is already used for a different purpose, we will come up with a better name for the parser."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-21T08:39:26Z",
        "body": "Closing this for now, if you don't mind. Feel free to reopen it or just ask further questions if any."
      }
    ]
  },
  {
    "number": 10947,
    "title": "binance requires to release all resources with an explicit call to the .close() coroutine",
    "created_at": "2021-12-19T06:45:44Z",
    "closed_at": "2021-12-19T07:54:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10947",
    "body": "- OS: MacOs Montary\r\n- Programming Language version: 3.9\r\n- CCXT version: 1.64.31\r\n\r\n\r\ni have issue , i wanted to :\r\n1- first fetch all symbols list from binance\r\n2- fetch 1minute candle interval of that symbols\r\n\r\n```\r\nasync def get(data):\r\n\tawait asyncio.sleep(1)\r\n        \r\n        # public_api_initial() will return exchange object that connected to binance\r\n\texchange = public_api_initial(data['market_type'], broker=data['broker_name'])\r\n\ttry:\r\n\t\tdata = await exchange.fetch_ohlcv(data['symbol'], data['interval'], since=None, limit=data['limit'], params={})\r\n\texcept:\r\n\t\treturn {}\r\n        print(data)\r\n\tawait exchange.close()\r\n\t\r\n\r\n\r\n\r\nasync def main():\r\n\texchanges = ['binance_future','binance_spot',]\r\n\r\n\tfor i in exchanges:\r\n\t\tex = i.split('_')\r\n\t\tdata = {\r\n\t\t'market_type':ex[1],\r\n\t\t'broker_name':ex[0]\r\n\t\t}\r\n\t\r\n                # public_api_initial() will return exchange object that connected to binance\r\n\t\texchange = public_api_initial(data['market_type'], broker=data['broker_name'])\r\n\t\tdata = await exchange.load_markets(params={})\r\n\t\t\r\n\t\tawait exchange.close()\r\n\r\n\t\tsymbols = []\r\n\t\tfor j in data:\r\n\t\t\tif '/USDT' in j:\r\n\t\t\t\tsymbols.append(j)\r\n\r\n\t\tfeed = [{ \"symbol\" : i,\"market_type\" : ex[1],\"interval\" : \"1m\",\"limit\" : 2,\"broker_name\" : ex[0]} for i in symbols]\r\n\r\n\t\tresults = await asyncio.gather(*[get(i) for i in feed])\r\n\r\n\t\t\r\n\r\nstart = time.time()\r\nasyncio.run(main())\r\nend = time.time()\r\n\r\nprint(end-start)\r\n```\r\n\r\n\r\nand after i run below code after getting about 70-80 numbers of symbols data i have below error :\r\n\r\n\r\n```\r\nbinance requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add exchange.close() to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10947/comments",
    "author": "coci",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-12-19T07:54:27Z",
        "body": "have you tried doing:\r\n\r\n```\r\nawait exchange.close()\r\n```"
      },
      {
        "user": "frosty00",
        "created_at": "2021-12-19T07:55:08Z",
        "body": "it's because you return in the exception clause"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-19T09:33:03Z",
        "body": "@coci as the error message says, you have to call `await exchange.close` before returning from your function, that is to release all used resources when you don't need the exchange instance anymore.\r\n\r\n```Python\r\nasync def get(data):\r\n\tawait asyncio.sleep(1)\r\n        \r\n        # public_api_initial() will return exchange object that connected to binance\r\n\texchange = public_api_initial(data['market_type'], broker=data['broker_name'])\r\n\ttry:\r\n\t\tdata = await exchange.fetch_ohlcv(data['symbol'], data['interval'], since=None, limit=data['limit'], params={})\r\n                print(data)\r\n\texcept Exception as e:\r\n\t\tprint(type(e).__name__, str(e))\r\n\tawait exchange.close()\r\n\t\r\n\r\n\r\n\r\nasync def main():\r\n\texchanges = ['binance_future','binance_spot',]\r\n\r\n\tfor i in exchanges:\r\n\t\tex = i.split('_')\r\n\t\tdata = {\r\n\t\t'market_type':ex[1],\r\n\t\t'broker_name':ex[0]\r\n\t\t}\r\n\t\r\n                # public_api_initial() will return exchange object that connected to binance\r\n\t\texchange = public_api_initial(data['market_type'], broker=data['broker_name'])\r\n\t\tdata = await exchange.load_markets(params={})\r\n\t\t\r\n\t\t# await exchange.close()  # <<<<<<<<<<<<<<<<<<<<<< NOT NEEDED HERE\r\n\r\n\t\tsymbols = []\r\n\t\tfor j in data:\r\n\t\t\tif '/USDT' in j:\r\n\t\t\t\tsymbols.append(j)\r\n\r\n\t\tfeed = [{ \"symbol\" : i,\"market_type\" : ex[1],\"interval\" : \"1m\",\"limit\" : 2,\"broker_name\" : ex[0]} for i in symbols]\r\n\r\n\t\tresults = await asyncio.gather(*[get(i) for i in feed])\r\n\r\n\t\tawait exchange.close()  # <<<<<<<<<<<<<<<<<<<<<< PUT IT HERE INSTEAD\r\n\r\n\t\t\r\n\r\nstart = time.time()\r\nasyncio.run(main())\r\nend = time.time()\r\n\r\nprint(end-start)\r\n```"
      }
    ]
  },
  {
    "number": 10923,
    "title": "ftx.fetch_my_trades only returning last 5000 trades",
    "created_at": "2021-12-17T01:21:43Z",
    "closed_at": "2021-12-17T03:13:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10923",
    "body": "Hi everyone, I am attempting to fetch historical trades on FTX via the fetch_my_trades endpoint, but I am only able to fetch the last 5000 trades. I have pasted my code below:\r\n\r\n```\r\nasync def get_fills():\r\n    ftx_data = pd.DataFrame([])\r\n    start_time=1637103919000\r\n    while True:\r\n        if start_time < ftx.milliseconds():\r\n            fill_data = pd.DataFrame(ftx.fetchMyTrades(symbol='SOL-PERP', limit=1000, since=start_time),\r\n                    columns=['datetime','symbol','side','price','amount','cost'])\r\n            print(fill_data)\r\n            ftx_data = ftx_data.append(fill_data, ignore_index=True, sort=False)\r\n            start_time += 86400000\r\n            ftx_data.to_csv('sol_perp_fills.csv')\r\n            time.sleep(5)\r\n        else:   \r\n            break\r\n```\r\n            ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10923/comments",
    "author": "adamxyzxyz",
    "comments": [
      {
        "user": "nhymxu",
        "created_at": "2021-12-17T03:09:01Z",
        "body": "Hmm, I think problem is `start_time += 86400000` and `limit=1000`\r\n\r\nEg: this timeframe have **3000** trades. But you can get only `limit=1000` and jump to next timeframe.\r\nSo you skip **2000** trades\r\n\r\nI think you can replace `start_time += 86400000` with `start_time` = **last timestamp** in your `fill_data`"
      },
      {
        "user": "adamxyzxyz",
        "created_at": "2021-12-17T03:13:58Z",
        "body": "hey guys I was able to resolve this, so going to close it!"
      }
    ]
  },
  {
    "number": 10894,
    "title": "[hitbtc] - Insufficient funds",
    "created_at": "2021-12-14T16:47:43Z",
    "closed_at": "2021-12-15T00:45:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10894",
    "body": "delete",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10894/comments",
    "author": "foozzi",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2021-12-14T23:53:14Z",
        "body": "Hello @foozzi , I've checked and the amount and address fields are correctly being sent to Hitbtc. Are you sure you have that balance available to be withdrawn?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-15T00:45:44Z",
        "body": "@foozzi hitbtc has \"trading\" balance and \"main\" balance, you must have the funds on your \"main\" balance to withdraw. Users can sometimes confuse the two balances. Let us know if that does not answer your question. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 10793,
    "title": "CCXT orderbook error",
    "created_at": "2021-12-07T09:28:42Z",
    "closed_at": "2021-12-07T10:33:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10793",
    "body": "- OS:Windows 10\r\n- Programming Language version: Python 3.7\r\n- CCXT version: CCXT version: CCXT Pro Version: 0.8.13\r\n\r\nI get this error \r\n\r\n```\r\nFile \"C:\\Users\\lucio\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\ccxtpro\\base\\order_book_side.py\", line 68, in __getitem__\r\n    return super(OrderBookSide, self).__getitem__(item)\r\nIndexError: list index out of range\r\n```\r\n\r\nwhat can i do?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10793/comments",
    "author": "ShieldTrade",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-07T10:33:16Z",
        "body": "Please include the whole code you are using (you can replace sensitive information/part with dummy info) so we could see whole code how/what you did correctly or wrong. Without it impossible to answer, you didn't even mentioned exchange. Feel free to reopen the issue after you will be ready."
      },
      {
        "user": "ShieldTrade",
        "created_at": "2021-12-07T11:02:18Z",
        "body": "@ttodua I am sorry. Exchange was Bitmex. \r\n\r\nIt would be impossible to include the code I am using  since it is part of a complex algo and the problem only happened today in a specific scenario\r\nto make it simple:\r\n\r\n```\r\nwhile not self.__stopped:\r\n            # while True:\r\n            try:              \r\n                ordbook = await exchange.watch_order_book(symbol, 25)\r\n               ......My logic.....\r\n               compare my pr in ordbook with price behind me. \r\n\r\n```\r\nmy position was probably bid_25 and I was traying to compare my price with the price in position Bid_26 \r\n\r\nsince I am watching only 25 position I got the \r\nlist index out of range error\r\n\r\nthis would explain why this error happens only sometimes depending on my parameters and book configuration.\r\nNow I am watching the full orderbook.\r\nIn any case I should add to My Logic\r\nHey.. if I am in the last position of the orderbook do not compare my pr in ordbook with price behind me because nobody is behind me \r\n\r\ncould this be a reasonable explanation?\r\n\r\nTx\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-08T03:41:53Z",
        "body": "@ShieldTrade we would be happy to give you a precise answer if you can provide a reduced snippet that reproduces the problem (if you can make one, remove all irrelevant bits to it leaving just the code that is essential for your use-case). Otherwise we're mostly guessing, hope for your understanding."
      }
    ]
  },
  {
    "number": 10766,
    "title": "[okex] ether network id different than erc20 network id",
    "created_at": "2021-12-02T18:04:33Z",
    "closed_at": "2021-12-02T18:56:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10766",
    "body": "Dear fellows,\r\nWhy do you use different network id for ether (\"ETH\") and different for tokens(\"ERC20\") on the ethereum network? I know that ether isn't erc20 token, however it is the same network.\r\n\r\nBy purpose in fetchCurrencies:\r\n```javascript\r\nif (mainNet && !(chainPart in layerTwo)) {\r\n                        // BTC lighting and liquid are both mainnet but not the same as BTC-Bitcoin\r\n                        network = code;\r\n                    }\r\n```\r\nYou and also your users have to take into consideration this \"duplicity\" in the implementation, causing errors. \r\nE.g. your fetchDepositAddress doesn't work for ether because it is not \"ERC20\" network.\r\n```javascript\r\n    async fetchDepositAddress (code, params = {}) {\r\n        const rawNetwork = this.safeStringUpper (params, 'network');\r\n        const networks = this.safeValue (this.options, 'networks', {});\r\n        const network = this.safeString (networks, rawNetwork, rawNetwork);\r\n        params = this.omit (params, 'network');\r\n        const response = await this.fetchDepositAddressesByNetwork (code, params);\r\n        let result = undefined;\r\n        if (network === undefined) {\r\n            result = this.safeValue (response, code);\r\n            if (result === undefined) {\r\n                const alias = this.safeString (networks, code, code);\r\n                result = this.safeValue (response, alias);\r\n                if (result === undefined) {\r\n                    const defaultNetwork = this.safeString (this.options, 'defaultNetwork', 'ERC20');\r\n                    result = this.safeValue (response, defaultNetwork);\r\n                    if (result === undefined) {\r\n                        const values = Object.values (response);\r\n                        result = this.safeValue (values, 0);\r\n                        if (result === undefined) {\r\n                            throw new InvalidAddress (this.id + ' fetchDepositAddress() cannot find deposit address for ' + code);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        result = this.safeValue (response, network);\r\n        if (result === undefined) {\r\n            throw new InvalidAddress (this.id + ' fetchDepositAddress() cannot find ' + network + ' deposit address for ' + code);\r\n        }\r\n        return result;\r\n    }\r\n```\r\nPlease take a look, thanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10766/comments",
    "author": "krychla1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-12-02T18:56:23Z",
        "body": "This works for me:\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.okex({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n    'password': 'YOUR_API_PASSWORD',\r\n})\r\nmarkets = exchange.load_markets()\r\nexchange.verbose = True\r\nresponse = exchange.fetch_deposit_address('ETH')\r\nprint(response)\r\n```\r\n\r\nLet us know if you have issues with that."
      },
      {
        "user": "frosty00",
        "created_at": "2021-12-02T19:33:05Z",
        "body": "ether isn't an erc20 token tho..."
      },
      {
        "user": "krychla1",
        "created_at": "2021-12-02T20:52:28Z",
        "body": "@frosty00 Have you actually read my first 2 sentences?\r\n\r\nAnyway, the NETWORK attribute is not about whether it is or is not erc20 token. If you want to differentiate between mainnet currency, erc20, erc721, etc. please create another attribute, don't mess it with networks.\r\n\r\nThis network attribute should be consistent among all the exchanges for all tokens. \r\n\r\nI want to deposit eth to network1, I will use ```exchange.fetch_deposit_address('ETH', {network: network1})```\r\nI want to deposit eth to network2, I will use ```exchange.fetch_deposit_address('ETH', {network: network2})```\r\nI want to deposit avax to network1, I will use ```exchange.fetch_deposit_address('AVAX', {network: network1})```\r\n\r\nCurrently your users have to think whether it is mainnet currency, token, or whether they have to or cannot use the network parameter at all. \r\n```javascript\r\nexchange.fetch_deposit_address('ETH', {network: 'ETH'})  //throws\r\nexchange.fetch_deposit_address('ETH', {network: 'ERC20'})  //throws\r\nexchange.fetch_deposit_address('ETH')  //passes\r\n```\r\nYou are not going the right way, if you want to keep things simple & clear."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-05T23:38:25Z",
        "body": "@krychla1 the `network` option is not meant to be the final way of unifying this aspect, it is just a mapping of one network to another for exchanges+currencies that require a network (just aliases). There's no generally unified networks in the lib yet, this is still exchange-specific. We have just started working towards the unification. Will get there as soon as possible.\r\n\r\n`exchange.options['networks']` are used mostly for cases when, say, USDT exchange-specific network id is TRX and TRC20 for another exchange. We unify that under TRC20. And the user can use both the exchange-specific id and the unified id. But this is slightly different from a complete network generalization."
      },
      {
        "user": "krychla1",
        "created_at": "2021-12-06T08:22:41Z",
        "body": "Sorry, didn't know the networks are just in their early stage, it is a good start. Please take my critics as inputs for your future design, it would be fine to have generic networks working the same across all exchanges. "
      }
    ]
  },
  {
    "number": 10751,
    "title": "[okex] Networks indexed improperly",
    "created_at": "2021-12-01T13:27:01Z",
    "closed_at": "2021-12-01T13:29:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10751",
    "body": "Dear fellows,\r\nokex.js -> options\r\n\r\n```                \r\n'networks': {\r\n    'ETH': 'ERC20',\r\n    'TRX': 'TRC20',\r\n    'OMNI': 'Omni',\r\n},\r\n```\r\nare indexed wrongly, the networks in other parts of ccxt (exchange.currencies.networks for example) are indexed by ERC20, TRC20, etc.\r\nI suggest to unify it (e.g. binance, kucoin, etc):\r\n```javascript\r\nbinance: \r\n                'networks': {\r\n                    'ERC20': 'ETH',\r\n                    'TRC20': 'TRX',\r\n                    'BEP2': 'BNB',\r\n                    'BEP20': 'BSC',\r\n                    'OMNI': 'OMNI',\r\n                    'EOS': 'EOS',\r\n                    'SPL': 'SOL',\r\n                },\r\nkucoin:\r\n\r\n                'networks': {\r\n                    'ETH': 'eth',\r\n                    'ERC20': 'eth',\r\n                    'TRX': 'trx',\r\n                    'TRC20': 'trx',\r\n                    'KCC': 'kcc',\r\n                    'TERRA': 'luna',\r\n                },\r\n```\r\n\r\nThere is also issue with default value in withdraw function, which allows invalid network ID to get into withdrawal requests:\r\n```javascript\r\n        network = this.safeString (networks, network, network); // handle ETH>ERC20 alias\r\n```\r\n\r\nEDIT: the options might just need to by extended with ERC20, TRC20, etc.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10751/comments",
    "author": "krychla1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-12-01T13:29:55Z",
        "body": "That is actually a correct mapping:\r\n\r\n```JavaScript\r\n'networks': {\r\n    'ETH': 'ERC20',\r\n    'TRX': 'TRC20',\r\n    'OMNI': 'Omni',\r\n},\r\n```\r\n\r\n↑ That will work with all mappings ERC20, TRC20, OMNI, ETH, TRX, Omni due to how safeMethods are used with `networks`. That is done on purpose, so that all the following usages work:\r\n\r\n```\r\nfetchDepositAddress ('USDT', {'network':'ETH'})\r\nfetchDepositAddress ('USDT', {'network':'ERC20'})\r\n```\r\n\r\n\r\nHope that answers your question, let us know if not.\r\n"
      },
      {
        "user": "krychla1",
        "created_at": "2021-12-01T13:39:37Z",
        "body": "FetchDepositAddress handles it completely differently, because the network isn't part of the request, it is just filtered from the response (from a quick look).\r\n\r\nHowever check the withdrawal function:\r\n```javascript\r\n        const networks = this.safeValue (this.options, 'networks', {});\r\n        let network = this.safeStringUpper (params, 'network'); // this line allows the user to specify either ERC20 or ETH\r\n        network = this.safeString (networks, network, network); // handle ETH>ERC20 alias\r\n        if (network !== undefined) {\r\n            request['chain'] = currency['id'] + '-' + network;\r\n            params = this.omit (params, 'network');\r\n        }\r\n        const query = this.omit (params, [ 'fee', 'password', 'pwd' ]);\r\n        if (!('pwd' in request)) {\r\n            throw new ExchangeError (this.id + ' withdraw() requires a password parameter or a pwd parameter, it must be the funding password, not the API passphrase');\r\n        }\r\n        const response = await this.privatePostAssetWithdrawal (this.extend (request, query));\r\n```\r\nThis allows you to use ERC20 as a network only because it allows everything to be used as networks.\r\n\r\nEDIT:\r\nexample\r\n```javascript\r\nexchange.withdraw ('USDT', network: \"weirdInvalidNetwork\")\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-01T13:51:54Z",
        "body": "> This allows you to use ERC20 as a network only because it allows everything to be used as networks.\r\n\r\nYes, that is correct. We will not reject params-overrides, if the user intentionally supplies an identifier for some new blockchain that is not listed out in `networks`. The user will get an exception from the exchange if the supplied network is incorrect.\r\n\r\nThe unified identifier for ERC20 is `ERC20`, for TRC20 it is `TRC20`.\r\nCCXT will allow the user to supply unified networks as well as exchange-specific networks by design."
      },
      {
        "user": "krychla1",
        "created_at": "2021-12-01T14:24:15Z",
        "body": "I thought you would want to sanitize the inputs. I've got your point, thanks for clarification."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-01T14:27:39Z",
        "body": "> I thought you would want to sanitize the inputs.\r\n\r\nYes, in general, we do sanitize it, but not in this specific case since the exchanges announce new listings every day, and if we hardcode that, it will be much harder to maintain. We do have some hardcode in the lib, but we would like to eventually get rid of it. Thanks for your understanding.\r\n\r\n"
      }
    ]
  },
  {
    "number": 10620,
    "title": "Invalid Api-Key ID error for Binance watchOrders",
    "created_at": "2021-11-17T14:49:30Z",
    "closed_at": "2021-12-06T14:20:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10620",
    "body": "For Binance `watchOrders` for some users we receive error:\r\n`AuthenticationError: binance {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}`\r\n\r\nDespite that, API and Secret keys are valid.\r\n\r\nAlso interesting that socket connection error handler is not triggered exactly on that error:\r\n```\r\n // On socket connection error.\r\n  const ccxtOnError = exchange.onError;\r\n  exchange.onError = (client, error) => {\r\n      console.log('NOT TRIGGERED');\r\n\r\n      ccxtOnError.call(exchange, client, error);\r\n  }\r\n```\r\n\r\n- OS: Debian (Ubuntu)\r\n- Programming Language version: JavaScript\r\n- CCXT version: Pro 0.7.25",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10620/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-11-17T16:53:41Z",
        "body": "@wunderb1t hi! Can you post the code you use to reproduce it? Do you have this issue with CCXT Pro 0.9.30+? "
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-06T14:20:09Z",
        "body": "Please, feel free to reopen this issue if you still have it or just ask further questions if any."
      },
      {
        "user": "wunderb1t",
        "created_at": "2021-12-28T13:40:14Z",
        "body": "We keep experiencing this issue on Binance and Binance Futures all the time. We noticed that it occurs more often after a Nodejs restart. Are there any problems with signature or timing?\r\n\r\nThe error occurs in all methods where API and Secret key are used, for example, `createOrder`, `fetchBalances`.\r\n\r\nMaybe we can somehow add a log to console what directly comes from Binance? We can't find error with code `'-2008'`  in Binance docs and what it means.\r\n\r\nFrom Binance there is no any answer. \r\n\r\nCurrent CCXT pro version: `0.9.35`"
      }
    ]
  },
  {
    "number": 10619,
    "title": "How to watch event \"ACCOUNT_UPDATE\" for binance futures?",
    "created_at": "2021-11-17T11:43:07Z",
    "closed_at": "2021-11-17T23:31:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10619",
    "body": "- OS: MacOS 12.0.1\r\n- Programming Language version: Node 14\r\n- CCXT version: Pro latest\r\n\r\nAs stated in the question above, how do I watch my currently open positions with websocket? I do see a public method\r\n`handleMessage(client, message)` but I couldn't figure out how to use it, there's no docs for it.\r\n\r\nI tried this with no luck\r\n\r\n```\r\nconst binance = new ccxt.binanceusdm({\r\n  apiKey,\r\n  secret: apiSecret,\r\n  enableRateLimit: true\r\n});\r\n\r\nconst res = await binance.handleMessage(binance, 'ACCOUNT_UPDATE');\r\n// Will fail with error: TypeError: client.resolve is not a function\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10619/comments",
    "author": "yyyyaaa",
    "comments": [
      {
        "user": "gmalca",
        "created_at": "2021-11-17T19:51:37Z",
        "body": "```\r\nconst binance = new ccxt.binanceusdm({\r\n  apiKey,\r\n  secret: apiSecret,\r\n  enableRateLimit: true\r\n});\r\nwhile (true) {\r\n  let balance = await binance.watchBalance({type:'future'});\r\n  if (balance.info.e == 'ACCOUNT_UPDATE') {\r\n     console.log(balance.info.a.P);\r\n  }\r\n}\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-11-17T23:32:08Z",
        "body": "@gmalca thanks for posting the solution, appreciate your help!"
      },
      {
        "user": "yyyyaaa",
        "created_at": "2021-11-18T07:02:43Z",
        "body": "@gmalca thanks for the help! I'm not sure if this is something I wanted. I need to get currently open positions update including unrealized PNL. However, when I ran the code in your example it didn't send back any event when I'm pretty sure my uPNL changed. Do you know of a way for me to achieve what I want? Thank you."
      }
    ]
  },
  {
    "number": 10618,
    "title": "How could I create a % slide bar using contract in Binance COIN M Futures?",
    "created_at": "2021-11-17T08:53:51Z",
    "closed_at": "2021-11-24T07:31:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10618",
    "body": "I have a bot connected with CCXT & Binance\r\nWhen I trade with usdt /btc (USD-M Futures) I can set a  % slide bar that takes me % of the amount that I have been setting. For example, If I have 1000 usdt and I set the 50% of the balance my bot set a 500usdt order. So this is OK\r\n\r\nNow I try to create a new % slide bar in COIN M Futures to select % of contracts. For example, if I´m total contract balance is 10 contracts,that is all my balance, I would like to set 50% in my slide bar to  order of my total contract balance. So it will be 5 contracts. Could I do this in COIN M Futures and be working with contracts?\r\n\r\nAlso please let me ask..Could I do the same % slide bar COIN M Futures using the balance of BTC?\r\n\r\n Could you help me please with that? Regards",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10618/comments",
    "author": "criptoice",
    "comments": [
      {
        "user": "criptoice",
        "created_at": "2021-11-23T07:28:27Z",
        "body": "I´m not sure to get an answer. Did you write something?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-11-24T07:31:23Z",
        "body": "@criptoice hi! CCXT does not cover the user interfacing side, it is a programmatic API. If you want to set a percentage of any value – calculate it with a simple multiplication using your programming language and pass that to CCXT's unified API. The Binance API backend itself does not let you set a percentage on the value. It is a frontend client-side GUI feature. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 10608,
    "title": "middleman?Agent?Broker？",
    "created_at": "2021-11-16T12:10:48Z",
    "closed_at": "2021-11-16T12:18:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10608",
    "body": "Hello, may you set your account to be the middleman or agent or broker of the account of a ccxt user, to gain commission? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10608/comments",
    "author": "monk-after-90s",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-11-16T12:18:16Z",
        "body": "@monk-after-90s hi! CCXT itself does not act as an intermediary, it is a software that you use to talk to the exchanges directly. You can configure it how you want, and it will depend on your referral links and on your partnerships with each specific exchange. Hope that answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 10539,
    "title": "[Kucoin] ccxt.pro - way to check watched orderBooks",
    "created_at": "2021-11-09T17:10:00Z",
    "closed_at": "2024-08-27T13:58:36Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10539",
    "body": "Hi fellows!\r\n\r\nIn discord I already mentioned problems with kucoins watchOrderBooks, which time to time ends with invalid orders despite the nonce being correct. It occurs again and again (only on kucoin, I haven't found discrepancies on other exchanges so far)\r\n\r\nTo debug/handle it further I would like to create kind of a checker with fetchOrderbook by rest request to compare it with the watched orderbook. How to do that? I find it quite impossible to get same nonce from rest to match actual orderbook nonce.\r\n\r\nThanks.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10539/comments",
    "author": "krychla1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-11-12T14:09:04Z",
        "body": "@krychla1 hi!\r\n\r\nGood question! It's tricky, but I think it can be done to a certain extent:\r\n\r\nThe first approach is to keep a configurable length of history of watched nonce/timestamp-values and trigger a reconnect when the fetched nonce/timestamp-values don't intersect with history. It will require some experiments to determine the nonce/timestamp-invalidation period.\r\n\r\nThe second approach is to introduce a checksum of the orderbook and analyze the frequencies of trades, this is even harder, cause it requires watching trades along with the orderbook.\r\n\r\nWe will think about ways of adding this feature to the base code of CCXT Pro..."
      },
      {
        "user": "krychla1",
        "created_at": "2021-11-16T09:40:58Z",
        "body": "The second approach would be very difficult I agree. Even impossible, the trades are only a part of actions that change orderbooks. Creation and cancelation are not part of trade feeds and can't be checked by other subscription than the orderbook one.\r\n\r\nHowever the first one seems feasible. \r\nWhat about to keep a cache of incoming feeds with configurable length and create a function that would be the reverse of \"handleOrderBookMessage\" - could apply selected depth of the cached feeds to rollback the orderbook? Of course not changing the orderbook itself, rather just returning the \"rollbacked\" result.\r\nThis can be used as a comparison if the fetched nonce is greater than the watched nonce.\r\n"
      },
      {
        "user": "krychla1",
        "created_at": "2022-06-14T14:28:56Z",
        "body": "Hi fellows!\r\nHas this become completely dead, or do you intend to work this out?"
      },
      {
        "user": "krychla1",
        "created_at": "2022-07-13T09:03:46Z",
        "body": "@kroitor"
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-27T13:58:36Z",
        "body": "late reply here, but i'll leave a note for future readers, if it'll be helpful to anyone:\r\n- you can directly access orderbook caches with `exchange.orderbooks[symbol]`\r\n- you can override `handleOrderBook` of any exchange, so you can create your dictionary  e.g. `myD`, where nonces will be keys, so on each trigger of `handleOrderBook` you store the orderbook object in `myD` and then use `fetchOrderBook`, which would give you fetched orderbook (with nonce)  you might be able to locate the saved orderbook in `myD` by that nonce\r\n\r\nif there are still any issues, let us know"
      }
    ]
  },
  {
    "number": 10531,
    "title": "How to trade BTC-Margin on Phemex Exchange",
    "created_at": "2021-11-09T09:21:24Z",
    "closed_at": "2021-12-19T14:44:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10531",
    "body": "Hello.\r\nI have a question about using the Phemex exchange.\r\nPrior to October, if you placed an order in BTCUSD, it was placed in BTC-Margin (Inverse).\r\nHowever, since USD-Margin was added in October,\r\nWhen you place an order in BTCUSD, it becomes an order in USD-Margin.\r\nHow to order BTCUSD trading with BTC-Margin?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10531/comments",
    "author": "bongkook",
    "comments": [
      {
        "user": "pico-sol",
        "created_at": "2021-12-03T18:34:30Z",
        "body": "try BTC/USD:BTC"
      }
    ]
  },
  {
    "number": 10520,
    "title": "Load Markets. Spot, Margin, Futures",
    "created_at": "2021-11-08T07:46:30Z",
    "closed_at": "2021-12-14T21:38:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10520",
    "body": "Hello, \r\n\r\nHow to get a list of markets which support an Exchange and load a piece of market information only for the selected market?  For example only for spot, margin, or future?\r\n\r\n\r\n```\r\n'use strict';\r\nconst ccxt = require('ccxt');\r\nvar jp = require('jsonpath');\r\n\r\nlet kucoin     = new ccxt.kucoin();\r\nlet ftx           = new ccxt.ftx();\r\nlet binance   = new ccxt.binance();\r\n\r\n(async function () {\r\n\r\n    let data = await kucoin.loadMarkets();\r\n    var dataString = Array.from(new Set(jp.query(data, '$..type')));\r\n    console.log('kucoin: ', dataString);\r\n\r\n    data = await ftx.loadMarkets();\r\n    dataString = Array.from(new Set(jp.query(data, '$..type')));\r\n    console.log('ftx: ',dataString);\r\n\r\n    data = await binance.loadMarkets();\r\n    dataString = Array.from(new Set(jp.query(data, '$..type')));\r\n    console.log('binance: ',dataString);\r\n\r\n\r\n\r\n}) ();\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10520/comments",
    "author": "YuriyTigiev",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-14T21:35:20Z",
        "body": "At this moment, there is no unified codebase in CCXT that can return the spot/margin/futures markets (like:\r\n`exch.spot_markets_list`/`exch.margin_markets_list`/`exch.futures_markets_list` properties). [@kroitor do I miss anything?]\r\nAt this moment, you have to manually look into your desired exchange's loaded-markets and find out the specific custom flag (some of exchanges have i.e. `marginable:true` flag into pair-properties, or something like that).\r\n\r\nHowever, in the future this might get unified into CCXT, which might be obtainable using by smth like my mentioned functions (i.e. `exch.spot_markets_list`).  \r\nStay subscribed to this issue and whenever that is implemented, you will get notification."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-15T02:15:50Z",
        "body": "@YuriyTigiev you can do that like this:\r\n\r\n```JavaScript\r\nconst ftx = new ccxt.ftx();\r\nconst kucoin = new ccxt.kucoin();\r\nconst binance = new ccxt.binance();\r\nconst binanceusdm = new ccxt.binanceusdm ();\r\n// or const binanceusdm = new ccxt.binance({ 'options': { 'defaultType': 'future' }})\r\nconst binancecoinm = new ccxt.binancecoinm()\r\n// or const binancecoinm = new ccxt.binance({ 'options': { 'defaultType': 'delivery' }})\r\n\r\nconst allMarkets = await Promise.all ([\r\n    ftx.loadMarkets (),\r\n    kucoin.loadMarkets (),\r\n    binance.loadMarkets (),\r\n    binanceusdm.loadMarkets (),\r\n    binancecoinm.loadMarkets ()\r\n])\r\n\r\nconsole.log (ftx.markets)\r\nconsole.log (binance.markets)\r\nconsole.log (binanceusdm.markets)\r\nconsole.log (binancecoinm.markets)\r\n// ...\r\n```"
      },
      {
        "user": "zeki-kadiroglu",
        "created_at": "2023-03-02T10:37:19Z",
        "body": "> \r\n\r\nCurrently, Is it working? Because, I couldn't get the correct data seperately from python version of your script with `ccxt.binance({ 'options': { 'defaultType': 'delivery' }})`"
      }
    ]
  },
  {
    "number": 10504,
    "title": "Install ccxt.pro to DigitalOcean Apps",
    "created_at": "2021-11-06T08:58:17Z",
    "closed_at": "2021-12-06T16:29:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10504",
    "body": "Hi! I want to use ccxt.pro with DigigtalOcean App.  As I understand I should use .npmrc for this. But I can't figure out how to achieve this.\r\n\r\n- OS: Ubuntu\r\n- Programming Language version: Javascript\r\n- CCXT version: pro",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10504/comments",
    "author": "KonstantinVlasov",
    "comments": [
      {
        "user": "Vibhaa5",
        "created_at": "2021-11-21T14:43:05Z",
        "body": "using digitalocean command line doctl and configuring settings to creating resource and adding ccxt.pro "
      }
    ]
  },
  {
    "number": 10495,
    "title": "what is the proper way to fetchfunctios with a single binance apikey",
    "created_at": "2021-11-05T19:03:13Z",
    "closed_at": "2021-12-14T21:47:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10495",
    "body": "OS: Ubuntu 20.04\r\nProgramming Language version: Javascript Node js\r\nCCXT version: 1.60.10\r\n\r\nHow many cctx object I need to create to get all my positions. In the documentation to get the linear positions I need to create a \r\n`\r\n            exchangeusdm = new ccxt.binanceusdm\r\n`\r\n\r\nwhile for the coin base futures, I need to create a \r\n`\r\n           exchangecoinm = new ccxt.binancecoinm\r\n`\r\nI checked the code and I see that both extend from finance\r\nI am creating a code that needs to get all positions, balance, and all assets of a user\r\nmy questions are: \r\nDo I need to create both objects with the same API key to get the inverted and linear positions ?\r\nIs there a situation where I also need to create  the usual binance object\r\n`\r\n           exchangecoinm = new ccxt.binance\r\n`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10495/comments",
    "author": "israel-gonzalezmedina",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-14T21:46:13Z",
        "body": "At this moment, it seems to me the way (to create two separate objects), and as they inherit from binance, there is no need to create `new ccxt.binance` separately, as they will do everything whatever `binance` class can do. as you might seen in implementation, the `options` parts are only different in `binanceusdm/binancecoinm`:\r\n\r\nbinanceusdm:\r\n```\r\n            'options': {\r\n                'defaultType': 'future',\r\n                'marginTypes': {},\r\n                ...\r\n            },\r\n```\r\nbinancecoinm:\r\n```\r\n            'options': {\r\n                'defaultType': 'delivery',\r\n                ...\r\n            },\r\n```\r\n\r\nunfortunately, I can't see any simple way to initiate only one binance-object and manage switching from one to another type, because of the dependancy-chain (i.e. separate fetch-markets, permitted currencies, etc...), so viable way is to have 2 exchange objects.\r\n\r\nhowever, if you want to trade on spot too, then you will need 3rd initiated object (`new binance()`) as the above two only works with their fields and not on spot."
      },
      {
        "user": "ttodua",
        "created_at": "2021-12-14T21:47:00Z",
        "body": "@kroitor lmk if anything needs to be mentioned too.\r\n@israel-gonzalezmedina feel free to re-open the issue if help still needed."
      },
      {
        "user": "israel-gonzalezmedina",
        "created_at": "2021-12-14T23:20:37Z",
        "body": "thanks @ttodua for the explanation "
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-15T02:20:05Z",
        "body": "@israel-gonzalezmedina I would highly recommend to avoid mixing the defaultType in the runtime.\r\n\r\nInstead, the recommended way of dealing with binance market types is to create one exchange instance per type, as you explained in your opening post.\r\n\r\n> Do I need to create both objects with the same API key to get the inverted and linear positions ?\r\n\r\nYes, they're not interchangeable on the same instance, cause they require preloading either this or that set of markets.\r\nYou have to use several instances of Binance:\r\n\r\n```JavaScript\r\nconst binance = new ccxt.binance()\r\nconst binanceusdm = new ccxt.binanceusdm()\r\nconst binancecoinm = new ccxt.binancecoinm()\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nconst binance = new ccxt.binance({ 'options': { 'defaultType':spot' }})\r\nconst binanceusdm = new ccxt.binance({ 'options': { 'defaultType':future' }})\r\nconst binancecoinm = new ccxt.binance({ 'options': { 'defaultType':delivery' }})\r\n```\r\n\r\nHope that helps."
      }
    ]
  },
  {
    "number": 10439,
    "title": "ByBit Close Position",
    "created_at": "2021-11-02T12:27:58Z",
    "closed_at": "2021-11-02T22:12:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10439",
    "body": "\r\n- OS: MacOs\r\n- Programming Language version: Python 3.9.4\r\n- CCXT version: 1.60.9\r\n\r\n```\r\nsymbol = 'SOLUSDT'\r\ntrade_res = exchange.create_order(symbol, amount=1, type='Market', side='Buy')\r\n```\r\n\r\nThe above snippet buys 1 SOL against USDT. When I try to close the position by placing a sell order, I see that ByBit placed another Short position on SOL without closing the Long one (2 positions appear in the console)\r\n\r\nHow do I close a current open position on ByBit using ccxt?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10439/comments",
    "author": "mhd-adam",
    "comments": [
      {
        "user": "elitwilliams",
        "created_at": "2021-11-02T18:36:55Z",
        "body": "You need to set the `reduce_only` param to `True` to place a closing order on Bybit. To my knowledge there is unfortunately no way to set this as the default behavior on Bybit, and you will need to track your position on your end or use a try/except to catch and re-place an order as opening if a closing order attempt fails, but of course this will count as 2 API requests.\r\n\r\n```\r\nsymbol = 'SOLUSDT'\r\ntrade_res = exchange.create_order(symbol, amount=1, type='Market', side='Buy', params={\"reduce_only\": True})\r\n```"
      },
      {
        "user": "mhd-adam",
        "created_at": "2021-11-02T22:12:20Z",
        "body": "It worked for me! Thank you!"
      }
    ]
  },
  {
    "number": 10276,
    "title": "How to get Kucoin Sub-accounts list and balances?",
    "created_at": "2021-10-21T04:17:11Z",
    "closed_at": "2021-12-15T19:57:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10276",
    "body": "Hi, I use ccxt to fetch balance on kucoin, but the one showing is only for the main account, how can I fetch sub-accounts list and balances?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10276/comments",
    "author": "dompaks10",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-15T19:57:50Z",
        "body": "You can try:\r\nfor main account:\r\n`await exchange.fetchBalance({'type':'main'})`\r\n\r\nfor trading account:\r\n`await exchange.fetchBalance({'type':'trade'})` //however, this is default\r\n\r\nif you mean sub-accounts, then:\r\n`await exchange.privateGetSubAccounts();`"
      }
    ]
  },
  {
    "number": 10271,
    "title": "Q: EXMO, Bybit websocket support",
    "created_at": "2021-10-20T09:15:44Z",
    "closed_at": "2021-10-20T15:04:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10271",
    "body": "Hello,\r\n\r\nDoes ccxt pro support exmo and bybit websocket fully now?\r\n\r\nRegards,\r\nEugene.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10271/comments",
    "author": "elabunsky",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-10-20T15:04:27Z",
        "body": "Hello Eugene!\r\n\r\n> Does ccxt pro support exmo and bybit websocket fully now?\r\n\r\nBybit and Huobi are in the works, will hopefully deliver them both this month. EXMO will go next in November.\r\n\r\nHope that answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 10191,
    "title": "When to use fetchDepositAddress or createDepositAddress? (question)",
    "created_at": "2021-10-10T23:02:23Z",
    "closed_at": "2021-10-10T23:55:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10191",
    "body": "Hello I have a question:\r\n\r\nWhen should I use fetchDepositAddress or createDepositAddress? How do I know if the address is already created or not?\r\n\r\nThank you so much for your help,\r\nI am really enjoying ccxt.\r\nMrMechanical",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10191/comments",
    "author": "MrMechanical",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-10-10T23:55:40Z",
        "body": "> When should I use fetchDepositAddress or createDepositAddress? How do I know if the address is already created or not?\r\n\r\nIf `fetchDepositAddress` throws an `InvalidAddress` exception at you or returns an empty/None response – that might indicate that you have to call `createDepositAddress` first or create your addresses for your wallet on the exchange website.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "drsavant-pub",
        "created_at": "2021-10-11T00:13:41Z",
        "body": "There are two ways to know if the address is already created for a coin:\r\n\r\n1. Login to your exchange and click the deposit link/btn (sometimes you also have to first select the network) and you should see an address OR a link/btn to \"create the address\"\r\n2. use fetchDepositAddress() - if the exchange supports this method.\r\n\r\n#1 is the simplest way to check for a deposit address, but you will need to recheck the address from time to time because some exchanges change the deposit address of coins (for no apparent reason), which is why it is nice if the exchange supports fetchDepositAddress().  That way you can check it in your code periodically and save yourself the time of manually logging into your account.\r\n\r\nThe exchange must support this method (fetchDepositAddress) before you can use it.\r\n\r\nHere's some js code I use:\r\n```\r\nlet ccxt = require('ccxt')\r\nlet type = 'fetchDepositAddress'\r\nlet exchange = new ccxt.binance (replace 'binance' the name of the exchange you are working with)\r\n\r\nif (exchange.has[type]){\r\n    console.log  (`Yes! ${exchange.name} has a ${type} function.`)\r\n} else {\r\n    console.log  (`No! ${exchange.name} has NO ${type} function.`)\r\n}\r\n```\r\nLook in the ccxt documentation for exchange.has under Unified API:\r\n"
      }
    ]
  },
  {
    "number": 10155,
    "title": "[bitmex] watch_order_book general question",
    "created_at": "2021-10-06T10:21:02Z",
    "closed_at": "2024-08-24T18:26:05Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10155",
    "body": "- OS: windows 10\r\n- Programming Language version: Python 3.9\r\n- CCXT version: CCXT Pro Version 0.8.13\r\n- exchange: bitmex\r\n\r\nReading bitmex api:\r\n\"If you wish to get real-time order book data, we recommend you use the orderBookL2_25 subscription. orderBook10 pushes the top 10 levels on every tick, but transmits much more data. orderBookL2 pushes the full L2 order book, but the payload can get very large. orderbookL2_25 provides a subset of the full L2 orderbook, but is throttled. In the future, orderBook10 may be throttled, so use orderBookL2 in any latency-sensitive application. \"\r\n\r\nWhen i use watch_order_book  which subscription am I using ?\r\n\r\nIf I use watch_order_book ( simbol , limit = 25 ) am I using orderBookL2_25 subscription?\r\n\r\ndoes watch_order_book  get updated even if something change above my limit ( ie watch_order_book ( simbol , limit = 25 ), bid 35 changes. Do I get updated?)\r\n\r\nmy impression is watch_order_book  always subscribe orderBookL2, Ccxt filters it according to limit, and it gets update every time something change regardless of limit. and if I want a different subscription I have to use private API method.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10155/comments",
    "author": "ShieldTrade",
    "comments": [
      {
        "user": "ShieldTrade",
        "created_at": "2021-11-04T17:21:34Z",
        "body": "I see this question is still open\r\n\r\nfrom CCXT Pro Version 0.8.13\r\n\r\n```\r\ndef describe(self):\r\n      ...........\r\n     'options': {\r\n    'watchOrderBookLevel': 'orderBookL2',  # 'orderBookL2' = L2 full order book, 'orderBookL2_25' = L2 top 25, 'orderBook10' L3 top 10\r\n    'tradesLimit': 1000,\r\n    'OHLCVLimit': 1000,\r\n\r\nasync def watch_order_book(self, symbol, limit=None, params={}):\r\n    table = None\r\n    if limit is None:\r\n        table = self.safe_string(self.options, 'watchOrderBookLevel', 'orderBookL2')\r\n    elif limit == 25:\r\n        table = 'orderBookL2_25'\r\n    elif limit == 10:\r\n        table = 'orderBookL10'\r\n    else:\r\n        raise ExchangeError(self.id + ' watchOrderBook limit argument must be None(L2), 25(L2) or 10(L3)')\r\n\r\n```\r\nIf i do not specify a limit i get the order BookL2 which pushes the full L2 order book and it is not throttled by the exchange.\r\n\r\nam i correct?\r\n      \r\n\r\n\r\n"
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-24T18:26:05Z",
        "body": "issue has been stale, closing for now.\r\nif answer matters at this moment, yes, I have checked the code and as it shows currently, if no limit passed, it defaults to `orderBookL2`"
      }
    ]
  },
  {
    "number": 10130,
    "title": "Binance: \"Fee charged in different currencies\" for SOL/BTC",
    "created_at": "2021-10-05T00:34:24Z",
    "closed_at": "2021-10-05T00:52:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10130",
    "body": "I was running the example I submitted long time ago at #1079. For the SOL/BTC pair, it returned the following error:\r\n\r\n```\r\nthrow new Error(`Fee charged in different currencies for order ${t.order}. Please file an issue.`);\r\n```\r\n\r\nI've seen Binance charge the fee in BNB for pairs such as SOL/BUSD.\r\n\r\nBut the error is not clear. Was the fee charged in more than one currency? \"different currencies\" from what? The base or the quote? Why not \"in a different currency\" (singular)?\r\n\r\n- OS: Linux\r\n- Programming Language version: Node 16.9.1\r\n- CCXT version: 1.57.45\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10130/comments",
    "author": "Bomper",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-10-05T00:42:44Z",
        "body": "@Bomper\r\n\r\n> throw new Error(`Fee charged in different currencies for order ${t.order}. Please file an issue.`);\r\n> Why not \"in a different currency\" (singular)?\r\n\r\nThat message is not from CCXT, though, it is from the example – some orders may have fees in varying currencies, since orders can be filled partially. It depends on your settings with Binance. If you have enabled paying fees in BNB, then, if you have BNB on your account, the fees will get paid in BNB (usually, at a discount). If you run out of BNB, the fees will be paid in the currency you get. Does that help?\r\n"
      },
      {
        "user": "Bomper",
        "created_at": "2021-10-05T00:52:05Z",
        "body": "Duh, I should have checked my own code. Sorry for being an idiot :smile:\r\n\r\nI've fixed the example to only roll up trades within the same order if the fee currency was the same. I could update it happily but I see there was not much interest in that example since 2018."
      }
    ]
  },
  {
    "number": 10110,
    "title": "Question: best practice to fetch all transactions/ledgers",
    "created_at": "2021-10-03T10:05:24Z",
    "closed_at": "2021-12-16T10:02:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10110",
    "body": "I just have a general question of whether there are any best practices for fetching all transactions/ledger items for a given account. Exchanges like Binance have a lot of currencies so going through all of those for an account seems overkill and slow. I was thinking about fetching the account's balances and then just fetching transactions/ledger entries for those returned currency codes, but that doesn't work if the user used to have a currency but does not anymore (except if there's dust left). Is there any other way to do this without having to go through all currency codes an exchange has?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10110/comments",
    "author": "steebchen",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-16T10:02:33Z",
        "body": "Well, I think there is no common way to get all transactions of all currencies universally over all exchanges. Part of exchanges might have a 'bulk' way but other exchanges may not. \r\nI advise to do a bit more research into the specific exchange API DOCS you are interested in, and find out there, if they support bulk/batch endpoint for getting all transactions, then it means it will be callable from CCXT (mostly with implicit API).\r\n\r\nAnother way you was mentioning, might be to iterate through your last X (i.e. 100) withdrawal/deposits and also trades, and from there, list-out all currencies, create an array, and iterate only through those array. This will much narrow-down your diapason (instead of iterating through all 700s currencies).  Or maybe you have a thought yourself, in what ways you have interacted with those currencies (other than deposit/withdrawal or trading) and try to get the list of 'those' coins that way, and after you have the desired list of coins, iterate through those currencies to fetch transactions for them.  \r\n\r\nlet us know if any issue there."
      }
    ]
  },
  {
    "number": 10044,
    "title": "Withdrawal from Binance to a specific network ",
    "created_at": "2021-09-23T12:52:30Z",
    "closed_at": "2021-09-23T13:01:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10044",
    "body": "In binance, while withdrawing an amount, there is an option of selecting network ( ETH or BSC). Does CCXT offer the same with binance API?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10044/comments",
    "author": "soumyadeeproy12",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-09-23T13:01:56Z",
        "body": "Yes:\r\n\r\n```\r\nbinance.withdraw ('USDT', amount, address, tag, {'network': 'ETH'})\r\nbinance.withdraw ('USDT', amount, address, tag, {'network': 'BSC'})\r\n```"
      }
    ]
  },
  {
    "number": 10017,
    "title": "[fetch_ohlcv] Question on closing price",
    "created_at": "2021-09-19T23:26:34Z",
    "closed_at": "2021-09-20T00:09:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10017",
    "body": "Hello,\r\n\r\nI have a question:\r\n\r\nWhen I do fetch_ohlcv(\"BTC/USDT\", \"1d\"), I get a timestamp for example 1588896000000. Which is Fri May 08 2020 00:00:00. The closing price correspond to the last price of the day which occurs at Fri May 08 2020 23:59:59 or Fri May 08 2020 00:00:00 ?\r\n\r\nBecause if that is Fri May 08 2020 23:59:59 why does the closing price of the day is not equal to the opening price of the next day?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10017/comments",
    "author": "NicolasWent",
    "comments": [
      {
        "user": "NicolasWent",
        "created_at": "2021-09-19T23:33:41Z",
        "body": "I think I got it:\r\n\r\nWhen we work in days, the opening price is the first transaction of the day, and the closing price is the last. So it gets the price at May 08 2020 23:59:59 or even later but right before Sat 09 2020 00:00:00\r\n\r\nSince the opening price is the first transaction of the day, then it can be slightly different from the last transaction of the last day.\r\n\r\nAm I right, or I miss a concept? Because in my backtests, I was using the closing price for a certain hour, but it was looking in the future I guess..."
      },
      {
        "user": "kroitor",
        "created_at": "2021-09-20T00:09:19Z",
        "body": "> When we work in days, the opening price is the first transaction of the day, and the closing price is the last. So it gets the price at May 08 2020 23:59:59 or even later but right before Sat 09 2020 00:00:00\r\n\r\nYes, that is correct.\r\n\r\n> Since the opening price is the first transaction of the day, then it can be slightly different from the last transaction of the last day.\r\n\r\nYep, that is true.\r\n\r\n> Am I right, or I miss a concept?\r\n\r\nYou got it right."
      }
    ]
  },
  {
    "number": 10008,
    "title": "How to get \"Market Cap\" ?",
    "created_at": "2021-09-18T05:09:40Z",
    "closed_at": "2021-12-17T19:23:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10008",
    "body": "I tried with fetch_ticker and look at info. but it was not there.\r\n\r\nCan you tell me where to find it ? \r\nThanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10008/comments",
    "author": "deewalkman",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-17T19:23:47Z",
        "body": "Can you describe the story in full? \r\nwhich exchange you tried, or which token you wanted to get, and what code (example) you used?\r\n\r\nHowever, without description, I might understand what you mean, and answer can be the following:  in most cases, exchanges API doesn't have that info. only CoinMarketCap might give that, and moreover, not for 'ticker' but for specific 'currency' (coin). So, if you still want to try with any specific exchange, try like this:\r\n\r\n```\r\nconst ex = new binance(..apikeys...);\r\nconsole.log ( ex.fetchCurrencies() );\r\n```\r\nand under 'info' property of the currency, find out if that exchange gives any info about marketcap of the coins (but i doubt any exchange had correct infos there, I recommend CoinMarketCap api)"
      }
    ]
  },
  {
    "number": 9910,
    "title": "Crypto exchages with futures api service with python sdk/module",
    "created_at": "2021-08-31T21:34:58Z",
    "closed_at": "2021-08-31T22:15:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9910",
    "body": "hi.I have the latest version of ccxt.\r\n\r\nWhat are some crypto exchages with futures api service with python sdk/module? other than binance.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9910/comments",
    "author": "aliniko79",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-31T22:15:04Z",
        "body": "FTX, OKEX, Deribit, Phemex, etc... There's a number of them, actually. We hope to add more soon. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 9896,
    "title": "[OHLCV][Average] Get average price for a day",
    "created_at": "2021-08-30T13:43:58Z",
    "closed_at": "2022-01-15T00:09:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9896",
    "body": "Hello,\r\n\r\nWhat I would like to get is the average price of a certain coin for the day.\r\n\r\nIn the documentation I found nothing about getting the average for OHLCV values, maybe it should be a great feature to add, for example if we want the data for a day, we get the average selling price of the day, same for a minute.\r\n\r\nI saw that there is something similar for Tickers, but the equation is: (last + open) / 2 do you think that it is good to compute the average using OHLCV with a similar equation like: (open price + closing price) / 2 ?\r\n\r\nI hope someone can help me with that :)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9896/comments",
    "author": "NicolasWent",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-01-14T19:51:08Z",
        "body": "I think that would be beyond of CCXT's scope to calculate averages for OHLCV. However, as an optional feature, it might be possible to be built, if there are many people who might be using it. \r\n@kroitor it is worth to be implemented in core, enabled only by explicitly setting smth option to true?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-15T00:09:29Z",
        "body": "> @kroitor it is worth to be implemented in core, enabled only by explicitly setting smth option to true?\r\n\r\nI would say, calculating the average is a one-liner expression in most languages that does not require any complex code, so it is beyond the scope of the library and it can be easily done outside of the lib, in the userland.\r\n\r\n"
      }
    ]
  },
  {
    "number": 9886,
    "title": "How to set leverage for Binance SPOT Trades  ?",
    "created_at": "2021-08-27T14:21:56Z",
    "closed_at": "2021-08-27T14:23:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9886",
    "body": "\r\n- OS: WIndows\r\n- Programming Language version: Python\r\n- CCXT version: 1.55.15\r\n   \r\ncode:\r\n              leverage=exchange.set_leverage(symbol='BTC/USDT, leverage=2)\r\n              print(lev)\r\n\r\nError :\r\n              binance setLeverage() supports linear and inverse contracts only\r\n\r\n\r\nNote: It's working fine for future or delivery. ( 'defaultType':  'delivery', # 'future', )\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9886/comments",
    "author": "SreekanthAvala",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-27T14:23:58Z",
        "body": "You can't set the leverage on spot trades in general. Leverage is only available with futures and perpetuals (delivery, future), in other words, it requires a notion of margin. It is not a limitation of CCXT, though, that is just how exchanges work."
      },
      {
        "user": "SreekanthAvala",
        "created_at": "2021-08-27T14:50:20Z",
        "body": "> You can't set the leverage on spot trades in general. Leverage is only available with futures and perpetuals (delivery, future), in other words, it requires a notion of margin. It is not a limitation of CCXT, though, that is just how exchanges work.\r\n\r\nThanks @kroitor "
      }
    ]
  },
  {
    "number": 9880,
    "title": "Python ratelimiter broken",
    "created_at": "2021-08-26T09:34:50Z",
    "closed_at": "2021-08-26T09:48:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9880",
    "body": "The python rateLimiter is broken in the newest version.\r\nI tested this on python 3.7 and 3.8 (Debian and CentOS)\r\n\r\nThe following snippet should return, but it is stuck after the first loop.\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(exchange1.rateLimit)\r\n        await exchange2.throttle(exchange2.rateLimit)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9880/comments",
    "author": "brandsimon",
    "comments": [
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T09:40:38Z",
        "body": "The snippet works for binance, so I changed the rateLimit to 50 (binance has 50, hitbtc 1500).\r\nThis works, but instead of waiting 50ms, it waits 5 seconds."
      },
      {
        "user": "frosty00",
        "created_at": "2021-08-26T09:43:50Z",
        "body": "@brandsimon the usage is wrong it should be:\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(1)\r\n        await exchange2.throttle(1)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```"
      },
      {
        "user": "frosty00",
        "created_at": "2021-08-26T09:44:24Z",
        "body": "the argument exchange.rateLimit is deprecated now we have dynamic costs for calls in binance.js"
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T09:44:25Z",
        "body": "@brandsimon the new version of `throttle()` accepts the call `cost` instead of `rateLimit`."
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T09:48:10Z",
        "body": "```Python\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await asyncio.gather(*[\r\n            exchange1.throttle(1),\r\n            exchange2.throttle(1),\r\n        ])\r\n        print(\"Round done\")\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\nThis snippet prints a line every 1.5 sec, according to hitbtc's rate limit setting."
      },
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T10:06:44Z",
        "body": "@kroitor @frosty00 \r\nThank you very much, this solves my issue.\r\nSo the CCXT `rateLimit` and `enableRateLimit` behavior stays the same, it is just the throttle API which changed?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T10:07:35Z",
        "body": "@brandsimon yes, moreover, enableRateLimit is true by default now."
      },
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T10:12:01Z",
        "body": "Great, thank you :)"
      }
    ]
  },
  {
    "number": 9879,
    "title": "Is it possible to upgrade only one exchange?",
    "created_at": "2021-08-26T02:30:37Z",
    "closed_at": "2021-08-27T01:55:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9879",
    "body": "My ccxt is of version 1.40.3. I want to upgrade to the newest version for only gateio. Is it possible?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9879/comments",
    "author": "monk-after-90s",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-27T01:55:04Z",
        "body": "> My ccxt is of version 1.40.3. I want to upgrade to the newest version for only gateio. Is it possible?\r\n\r\nIn general, that is not possible, since the new versions will depend on the new basecode, etc. So, it cannot be upgraded for a single exchange at this time. However, it's very easy to update it from npm/PyPI/Packagist with a one-liner command. Hope that answers your question. Let us know if not."
      }
    ]
  },
  {
    "number": 9862,
    "title": "Buy USD with CCXT",
    "created_at": "2021-08-24T13:14:13Z",
    "closed_at": "2021-08-25T00:31:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9862",
    "body": "Hello, \r\n\r\nI just wanted to know if there's anyway with CCXT where I can buy USD using debit card/ACH payment depositing and put the amount in wallet for trade in future, say in Binance?\r\n\r\nPlease label this as question",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9862/comments",
    "author": "soumyadeeproy12",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-25T00:31:55Z",
        "body": "Hi! No, CCXT does not have any specific functionality to cover your deposits, since that is beyond the scope of the lib. CCXT lets you do everything the exchange allows you to do, call any endpoint with any set of params, as you like, but CCXT cannot talk to the banks and other structures required in the depositing process. CCXT is about cryptocurrency exchanges, mostly. Hope that answers your question. The lib will allow you to move funds between your accounts within the exchange, and it will even allow you to withdraw from one exchange to another, but you should first deposit to the initial exchange on your own."
      }
    ]
  },
  {
    "number": 9857,
    "title": "Bybit websocket support",
    "created_at": "2021-08-23T11:45:14Z",
    "closed_at": "2022-05-31T01:46:56Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9857",
    "body": "Hello,\r\n\r\nCould you inform me when you plan add Bybit websocket functionality. As I know ccxt pro support rest only.\r\n\r\nRegards,\r\nEugene.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9857/comments",
    "author": "elabunsky",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-31T01:46:56Z",
        "body": "The support for Bybit WS API has been added in CCXT Pro 1.1.49+\r\nYour feedback is welcome!"
      }
    ]
  },
  {
    "number": 9846,
    "title": "What's the difference ccxt.binance({'options': { 'defaultType': 'future', }}) and cctx.binanceusdm()?",
    "created_at": "2021-08-21T05:50:01Z",
    "closed_at": "2021-08-21T06:28:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9846",
    "body": "I've noticed that there are two options for using binance future\r\n`ccxt.binance({\r\n    'options': {\r\n        'defaultType': 'future',\r\n    }\r\n})`\r\nand\r\n`ccxt.binanceusdm({...})`\r\nWhat's the difference between them?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9846/comments",
    "author": "shuaixr",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-08-21T06:23:34Z",
        "body": "There is no difference, binanceusdm is just an alias for the former syntax"
      }
    ]
  },
  {
    "number": 9839,
    "title": "How to make a Kucoin futures order with ccxt in python?",
    "created_at": "2021-08-20T00:30:32Z",
    "closed_at": "2021-12-27T22:48:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9839",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.8.5\r\n- CCXT version: 1.55.20\r\n\r\nThe following code work binance futures using ccxt. What is the correct code/configuration for kucoin futures?\r\n\r\nimport ccxt \r\nimport  pandas as pd\r\n\r\nbinance = ccxt.binance() \r\nbinance.options = {'defaultType': 'delivery', 'adjustForTimeDifference': True}\r\nsecurities = pd.DataFrame(binance.load_markets()).transpose() \r\nprint(securities)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9839/comments",
    "author": "slhawk98",
    "comments": [
      {
        "user": "slhawk98",
        "created_at": "2021-08-20T00:37:20Z",
        "body": "I get the following errors when I substitute \"binance = ccxt.kucoin()\"\r\n\r\nTraceback (most recent call last):\r\n  File \"c:/vscode/kucoin.ccxt.py\", line 7, in <module>\r\n    securities = pd.DataFrame(binance.load_markets()).transpose()\r\ndefaultVersion = self.safe_string(methodVersions, path, self.options['version'])\r\nKeyError: 'version'"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-27T22:48:07Z",
        "body": "Kucoin Futures has been added in CCXT 1.65.30+."
      }
    ]
  },
  {
    "number": 9806,
    "title": "Does ccxt support bitget",
    "created_at": "2021-08-13T05:17:16Z",
    "closed_at": "2021-08-14T11:12:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9806",
    "body": "Hello, I wonder if ccxt supports bitget the crypto exchange website? I have tried few different ways to connect with bitget but it seems like there's an issue with ordering commends. Could you share any codes that can make creating an order to buy and sell? Thank you\r\n\r\nprint('CCXT Version:', ccxt.__version__)  # ←---------- add this\r\nbitget = ccxt.bitget({'apiKey': '', 'secret': '', 'password': '', 'options': {'defaultType': 'swap'}})\r\nbitget.load_markets()  # ←---------- add this\r\nbitget.verbose = True  # ←------------- add this after load_markets()\r\nbalances = bitget.fetch_balance()\r\nbalance = balances['CMT_BTCUSDT']\r\npprint.pprint(balance)\r\n\r\norder = bitget.create_limit_buy_order(\r\n    symbol='CMT_BTCUSDT',\r\n    amount=0.0001,\r\n    price=40000,\r\n    params={'type': '1'}\r\n)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9806/comments",
    "author": "pnama",
    "comments": [
      {
        "user": "jorisw",
        "created_at": "2021-08-13T13:16:25Z",
        "body": "It does, as Bitget is listed in the README.\r\n\r\nIf it doesn't work from the code examples, best to paste any errors you're seeing."
      },
      {
        "user": "pnama",
        "created_at": "2021-08-13T14:15:30Z",
        "body": "Thank you for checking it out. Here's my output :) Any suggestions will be appreciated. :)\r\n\r\nreturn self.create_order(symbol, 'limit', 'buy', amount, price, params)\r\nresponse = getattr(self, method)(self.extend(request, params))\r\nreturn self.fetch2(path, api, method, params, headers, body)\r\nreturn self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\nself.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\nccxt.base.errors.ExchangeError: bitget {\"status\":\"error\",\"ts\":1628864013501,\"err_code\":\"bad-request\",\"err_msg\":\"2014\"}\r\n"
      }
    ]
  },
  {
    "number": 9774,
    "title": "Would it be possible to fetch price of a given symbol based on given timestamp?",
    "created_at": "2021-08-07T15:57:35Z",
    "closed_at": "2022-07-27T15:36:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9774",
    "body": "- OS: `Ubuntu 20.04.2 LTS`\r\n- Programming Language version:  `Python 3.8.10`\r\n- CCXT version: `ccxt==1.52.40`\r\n\r\n---------\r\n\r\n\r\nI was wondering would it be possible to obtain price of a given pair like (`ETH/BTC`) in history based on given timestamp.\r\n\r\n=> Can we fetch its price based on given timestamp as key?\r\n\r\nsomething like:\r\n```\r\ntimestamp = \"1628351659000\"\r\nticker = await exchange.fetch_ticker(symbol, timestamp)\r\n```\r\n\r\nor  ```ticker_history[timestamp]```\r\n\r\n----------\r\n\r\nOverall, I am trying to come up with a solution to find entry price in Binance spot. It is kind challenging where we have to handle `PAIR/BTC` and `PAIR/USDT` buy and sell operation. In order to achieve this I am require to have pairs' BTC value on a given timestamp.\r\n\r\nI am sorry if its already asked.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9774/comments",
    "author": "avatar-lavventura",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-27T15:36:02Z",
        "body": "Late reply, but I'll answer this: that might be directly done with `fetchTrades` (if exchange supports it generally). binance (of course) supports it and you can do:\r\n```\r\ntimestamp = 1628351659000 # should be numeric, not string\r\ntrades = await exchange.fetch_trades(symbol, timestamp, limit = 1)\r\ntry:\r\n    print(trades[0])\r\nexcept IndexError:\r\n    print(\"error obtaining price for \" + symbol + \" at :\" + str(timestamp))\r\n```\r\nlet us know if you have any further issues with CCXT"
      }
    ]
  },
  {
    "number": 9767,
    "title": "how to get the FetchMarkets() without keys which are symbol in binance case.",
    "created_at": "2021-08-07T03:21:04Z",
    "closed_at": "2021-08-07T17:10:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9767",
    "body": "\r\n\r\n- OS:\r\n- macos\r\n- Programming Language version:\r\n- node.js 14+\r\n- CCXT version:\r\n- latest as of now\r\n\r\n```\r\nmarkets = await binance.loadMarkets();\r\n```\r\n\r\n```\r\n'AXS/AUD': {\r\n    limits: {\r\n      amount: [Object],\r\n      price: [Object],\r\n      cost: [Object],\r\n      market: [Object]\r\n    },\r\n    precision: { base: 8, quote: 8, amount: 2, price: 2 },\r\n    tierBased: false,\r\n    percentage: true,\r\n    taker: 0.001,\r\n    maker: 0.001,\r\n    feeSide: 'get',\r\n    id: 'AXSAUD',\r\n    lowercaseId: 'axsaud',\r\n    symbol: 'AXS/AUD',\r\n    base: 'AXS',\r\n    quote: 'AUD',\r\n    baseId: 'AXS',\r\n    quoteId: 'AUD',\r\n    info: {\r\n      symbol: 'AXSAUD',\r\n      status: 'TRADING',\r\n      baseAsset: 'AXS',\r\n      baseAssetPrecision: '8',\r\n      quoteAsset: 'AUD',\r\n      quotePrecision: '8',\r\n      quoteAssetPrecision: '8',\r\n      baseCommissionPrecision: '8',\r\n      quoteCommissionPrecision: '8',\r\n      orderTypes: [Array],\r\n      icebergAllowed: true,\r\n      ocoAllowed: true,\r\n      quoteOrderQtyMarketAllowed: true,\r\n      isSpotTradingAllowed: true,\r\n      isMarginTradingAllowed: false,\r\n      filters: [Array],\r\n      permissions: [Array]\r\n    },\r\n    spot: true,\r\n    type: 'spot',\r\n    margin: false,\r\n    future: false,\r\n    delivery: false,\r\n    linear: false,\r\n    inverse: false,\r\n    expiry: undefined,\r\n    expiryDatetime: undefined,\r\n    active: true,\r\n    contractSize: undefined\r\n  },\r\n```\r\n I just want to remove these keys when i run fetchMarkets(); \r\ni dont want keys like 'AXS/AUD':  which is symbol can i just get an array of them all with out the key?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9767/comments",
    "author": "madebyJZ",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-07T17:10:21Z",
        "body": "This is not a question about CCXT, however, it's a question on how to program in JavaScript. It is easily done with a very basic built-in function of JavaScript:\r\n\r\n```JavaScript\r\nconst markets = await exchange.loadMarkets ()\r\nconst arrayOfMarkets = Object.values (markets)\r\nconsole.log (arrayOfMarkets);\r\n```\r\n\r\nYou can get just the values, from any key-value dictionary with `Object.values(anyDictionaryHere)` as shown above. Hope that answers your question."
      }
    ]
  },
  {
    "number": 9754,
    "title": "What is the recommended pattern to watch a large amount of orderbooks?",
    "created_at": "2021-08-04T19:38:50Z",
    "closed_at": "2021-08-07T05:15:04Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9754",
    "body": "Hi,\r\n\r\nI have some questions regarding the reccommended pattern / implementation in nodejs to watch a large amount of order books on **Binance**. Before I get to the questions, let me explain what I want to do: I would like to watch for example 100 or more order books. The purpose is for a triangular arbitrage bot, so I want to watch as many markets as possible to find the best opportunities.\r\n\r\nIn my code below, I implemented a test application connecting to binance. You will see I created an array of markets ( 66 elements ). I then user the while(true) loop with a for loop inside it for each market. For a small amount of orderbooks ( 6 ) this seems to work. And the avg time between orderbook updates are about 200ms. \r\n\r\nIf i run the same code but for 66 orderbooks, it freezes and it seems like the orderbooks are only updated once. After several minutes the orderbooks are still not updated.\r\n\r\nMy implementation is obviously wrong or what I am trying to do is not feasible.\r\n\r\n**The Questions:** \r\n1. Is it possible to use ccxt.pro websockets in this manner to watch a large amount of orderbooks? \r\n2. Is it feasible to do what I want to do using ccxt.pro?\r\n3. What is the recommended pattern for my use case?\r\n\r\n- OS: Windows 10\r\n- Programming Language version: Nodejs v14.17.0\r\n- CCXT Pro version: 0.7.97 \r\n\r\n```\r\n'use strict';\r\nconst ccxtpro = require('ccxt.pro');\r\n\r\n(async function () {\r\n\r\n    try {\r\n\r\n        //Define an array of 66 markets for which I would like to maintain an orderbook\r\n        let markets = [\r\n            \"BTC/USDT\",\r\n            \"ETH/BTC\",\r\n            \"ETH/USDT\",\r\n            \"LTC/BTC\",\r\n            \"LTC/USDT\",\r\n            \"ZRX/BTC\",\r\n            \"ZRX/USDT\",\r\n            \"FUN/BTC\",\r\n            \"FUN/USDT\",\r\n            \"LINK/BTC\",\r\n            \"LINK/USDT\",\r\n            \"XVG/BTC\",\r\n            \"XVG/USDT\",\r\n            \"EOS/BTC\",\r\n            \"EOS/USDT\",\r\n            \"XRP/BTC\",\r\n            \"XRP/USDT\",\r\n            \"ADA/BTC\",\r\n            \"ADA/USDT\",\r\n            \"WAN/BTC\",\r\n            \"WAN/USDT\",\r\n            \"ARDR/BTC\",\r\n            \"ARDR/USDT\",\r\n            \"RVN/BTC\",\r\n            \"RVN/USDT\",\r\n            \"ANKR/BTC\",\r\n            \"ANKR/USDT\",\r\n            \"NKN/BTC\",\r\n            \"NKN/USDT\",\r\n            \"KAVA/BTC\",\r\n            \"KAVA/USDT\",\r\n            \"TCT/BTC\",\r\n            \"TCT/USDT\",\r\n            \"LTO/BTC\",\r\n            \"LTO/USDT\",\r\n            \"AVA/BTC\",\r\n            \"AVA/USDT\",\r\n            \"BAL/BTC\",\r\n            \"BAL/USDT\",\r\n            \"DOT/BTC\",\r\n            \"DOT/USDT\",\r\n            \"RSR/BTC\",\r\n            \"RSR/USDT\",\r\n            \"UNI/BTC\",\r\n            \"UNI/USDT\",\r\n            \"NBS/BTC\",\r\n            \"NBS/USDT\",\r\n            \"CTK/BTC\",\r\n            \"CTK/USDT\",\r\n            \"AXS/BTC\",\r\n            \"AXS/USDT\",\r\n            \"ASR/BTC\",\r\n            \"ASR/USDT\",\r\n            \"ALICE/BTC\",\r\n            \"ALICE/USDT\",\r\n            \"MLN/BTC\",\r\n            \"MLN/USDT\",\r\n            \"EOS/ETH\",\r\n            \"ZRX/ETH\",\r\n            \"FUN/ETH\",\r\n            \"LINK/ETH\",\r\n            \"XVG/ETH\",\r\n            \"XRP/ETH\",\r\n            \"ADA/ETH\",\r\n            \"LTC/ETH\",\r\n            \"WAN/ETH\"\r\n        ]\r\n\r\n        // markets = ['ETH/USDT', 'BTC/USDT', 'XRP/USDT'];\r\n\r\n        //Set an interval to print the age info every second\r\n        setInterval(() => {\r\n            console.log(JSON.stringify(updates));\r\n        }, 1000);\r\n\r\n        //Create an object that will hold info on when last the orderbook was updated\r\n        let updates: any = {};\r\n\r\n        const exchange = new ccxtpro.binance({ enableRateLimit: true })\r\n        while (true) {\r\n\r\n            //Loop tough all markets and get an update\r\n            for (let i = 0; i < markets.length; i++) {\r\n\r\n                const orderbook = await exchange.watchOrderBook(markets[i])\r\n                const now = (new Date()).getTime();\r\n\r\n                //If it is the first update\r\n                if (updates[markets[i]] === undefined) {\r\n                    updates[markets[i]] = { lastUpdate: now, age: -1 };\r\n                } else {\r\n\r\n                    //For future updates, calculate the time since the previous update\r\n                    const age = now - updates[markets[i]].lastUpdate;\r\n                    updates[markets[i]] = { lastUpdate: now, age: age };\r\n                }\r\n            }\r\n        }\r\n\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n})();\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9754/comments",
    "author": "fvsgit",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-06T18:44:08Z",
        "body": "Hi,\r\n\r\n> I have some questions regarding the reccommended pattern / implementation in nodejs to watch a large amount of order books on Binance. Before I get to the questions, let me explain what I want to do: I would like to watch for example 100 or more order books. The purpose is for a triangular arbitrage bot, so I want to watch as many markets as possible to find the best opportunities.\r\n\r\nIn general, doing all of the above from a single machine is a bad idea. Usually, you have to architect your app in a scalable way. You can get away with a few dozens orderbooks on average, but not more. A single connection becomes a bottleneck. \r\n\r\nInstead of watching hundreds of orderbooks from the same application, corps usually invest time and money into building an architecture, where there's a swarm of order book listeners, each listening for a few orderbooks, controlled by central business logic that sends orders here and there.\r\n\r\nPersonally, I would suggest making a working proof of concept or a minimal viable product that would function with 3-5-10 pairs from a single machine, and then scale that up to multiple machines and hundreds of symbols.\r\n\r\n> If i run the same code but for 66 orderbooks, it freezes and it seems like the orderbooks are only updated once. After several minutes the orderbooks are still not updated.\r\n\r\nThe orderbooks are only updated when something happens on the market in question (an order is changed or added or closed).\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "fvsgit",
        "created_at": "2021-08-07T05:15:04Z",
        "body": "Hi Igor,\r\n\r\nThanks for getting back to me. I was thinking already of developing these orderbook listeners, but first wanted to ensure I am not over engineering something here. Your idea of building it for example with a small amount of markets sounds good.\r\n\r\nThank you for the great API and the active work on it. "
      },
      {
        "user": "cdcv",
        "created_at": "2022-01-13T10:57:23Z",
        "body": "Can you share just a little bit more detail on how using multiple listeners to retrieve many order books in real time would need to work?  What the requirements for each listener to avoid being closed down by the exchange(s)?  I presume each listener needs a different IP address, needs to only listen to a limited number of symbols as you say, and needs to use the public exchange api.  Anything else?  Given that the listener code could be very, very simple, what are some simple ways to achieve this as a swarm this without over-engineering the swarm architecture?  Can you recommend the simplest tools you've seen people using to do this, or what you'd suggest?  Thank you."
      }
    ]
  },
  {
    "number": 9745,
    "title": "bitfinex v2 websocket?",
    "created_at": "2021-08-04T06:16:09Z",
    "closed_at": "2021-08-04T16:51:06Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9745",
    "body": "Hi, \r\n\r\nI don't see any watch function for bitfinex2 in ccxt pro. \r\n\r\ndoes this mean we have to use bitfinex in ccxt pro to use websocket functions?\r\n\r\nthanks, ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9745/comments",
    "author": "pickmone",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-04T16:51:06Z",
        "body": "Yes, at this point CCXT Pro supports Bitfinex v1 WS API, we will add the support for Bitfinex v2 WS API to CCXT Pro this month, we hope. Feel free to reopen this issue if that does not answer your question."
      }
    ]
  },
  {
    "number": 9744,
    "title": "What is the best practice to write custom rate limiter for multiple CCXT exchange instances?",
    "created_at": "2021-08-04T00:51:29Z",
    "closed_at": "2024-08-24T11:23:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9744",
    "body": "Hello. I need to run large amount of exchange instances with different api keys(to call REST API with fetchMyTrades and another methods). What is the best way to handle rate limits of exchange between all of them? I can not found any examples about technique in docs. I see good examples about reusing exchange instance, but if I uderstand correctly this not suitable for my situation. Should I control rateLimit field somehow for each instance? Maybe you have some example of custom rate limiter?\r\nThanks!\r\n\r\n- OS: Any\r\n- Programming Language version: Node.js 14.x\r\n- CCXT version: Any\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9744/comments",
    "author": "koftyan",
    "comments": [
      {
        "user": "Djusk8",
        "created_at": "2021-08-04T07:29:41Z",
        "body": "I had to solve the same problem some time ago.\r\n\r\nWhile you are sending all requests from one IP address (regardless the different API keys), the exchange can block your IP address for the reason of rate-limit or DDOS errors.\r\n\r\nSo you have two ways to avoid this:\r\n1. Limit the rate of the requests of all exchange instances.\r\n2. Use different IP addresses for every instance of the exchange. But this does not save you from problems of blocking IP if instance will send requests too fast.\r\n\r\nI used the following approach:\r\n\r\n* For every exchange instance dedicated proxy-server was bought. I used the separate VPS's for every instance before, but maintaining such an infrastructure is much more difficult than using proxy servers. \r\n\r\nTo use the proxy you need to update the exchange instance with the dict:\r\n `exchange_instance.proxies = {'https': 'YOUR_PROXY_SERVER'}`\r\n\r\n* To work with DDOS and RATE-limit errors of the every instance I use the following code:\r\n\r\n**note**: the code is simplified. For every exchange I write custom `exception_handler()` with much more handlers.\r\n\r\n```\r\n    def exception_handler(self, func: classmethod, *args, **kwargs):\r\n\r\n        while True:\r\n            try:\r\n                data = func(*args, **kwargs)\r\n\r\n            except (ccxt.DDoSProtection, ccxt.RateLimitExceeded):\r\n                self.increase_rate_limit()  # decrease speed of the requests to avoid blocking the proxy in the future\r\n                self.change_proxy_server()  # because you current proxy is blocked now for some time\r\n                continue\r\n\r\n            ...................\r\n            ...................\r\n\r\n            return data\r\n\r\n    def increase_rate_limit(self):\r\n        self.rateLimit += 500\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "koftyan",
        "created_at": "2021-08-05T16:02:00Z",
        "body": "Thanks for your reply!\r\nI am currently using similar approach with proxies but it is very expensive in my case(now I am running about 3000 instances, but in future this count may be increased up to 10000). \r\nNow I want to sacrifice a little the speed of updates, but try to get rid of the use of proxy servers as much as possible. "
      },
      {
        "user": "Djusk8",
        "created_at": "2021-08-05T17:05:22Z",
        "body": "I can only guess your trading strategy, but if your one exchange instance works with the only one market (one pair), the number of instances can be significantly decreased  by increasing number of pairs one instance is working with. But this is not a question of the CCXT library, but of a programming approach. \r\n\r\nIt might be time to try asynchronous code and websockets also. Not all exchanges support websockets, but the largest exchanges do. \r\n"
      },
      {
        "user": "flieks",
        "created_at": "2022-05-21T09:18:52Z",
        "body": "@koftyan where do you get quality proxies ? I tried with residential proxies but after like 5 requests i get always `The selected relay is offline or busy processing other threads` and also the speed is unacceptable for me. "
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-24T10:31:27Z",
        "body": "This is related: #9470 so maybe that also answers also this topic as some degree.\r\n"
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-24T11:21:25Z",
        "body": "issue has been stale, so closing for now. however, any future readers are welcome to add their notes in this thread."
      }
    ]
  },
  {
    "number": 9729,
    "title": "get user info/email (binance)",
    "created_at": "2021-08-03T08:50:36Z",
    "closed_at": "2021-08-03T14:13:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9729",
    "body": "python3\r\nwindows/ubuntu\r\n\r\nis it possible to get user email  by api(or some other user data)?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9729/comments",
    "author": "optima66",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-03T14:13:49Z",
        "body": "Im afraid, this is impossible with the current trading API. The email is considered your personal info, and the exchanges don't always serve it. Most of the trading is pseudo-anonymous. Hope that answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 9689,
    "title": "Property 'BadRequest' does not exist on type 'typeof import(\"ccxt.pro\")'",
    "created_at": "2021-07-30T09:04:04Z",
    "closed_at": "2021-07-30T10:47:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9689",
    "body": "OS: win 10\r\nProgramming Language version: typescript 4.1.6 with angular 11.1.4\r\nCCXT version: 1.53.71 with ccxtpro 0.7.89\r\n\r\nGetting does not exists on type errors on every instanceof Error check\r\n\r\nI'm importing the typing in Angular like so:\r\n\r\n`declare var ccxt: typeof import('ccxt.pro');`\r\n\r\nand getting\r\n```\r\n if (e instanceof ccxt.BadRequest) {\r\n          throw e;\r\n}\r\n```\r\n\r\n```\r\nProperty 'BadRequest' does not exist on type 'typeof import(\"ccxt.pro\")'\r\n```\r\n\r\nLooking into node_modules/ccxt_pro/dist/ccxt.pro.browser.js it seems that some code is commented out. might this be the issue?\r\n\r\n\r\n\r\n```\r\nconst ccxt = require ('ccxt')\r\n    , { deepExtend } = ccxt\r\n    , Exchange  = require ('./js/base/Exchange')\r\n    , { unique } = require ('ccxt/js/base/functions')\r\n    // , errors    = require ('ccxt/js/base/errors')\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9689/comments",
    "author": "JonBlue",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-07-30T10:47:39Z",
        "body": "@JonBlue the BadRequest export is placed in ccxt.d.ts, they're not in ccxt.pro.d.ts, we will probably add the error declarations to ccxt.pro.d.ts file as well. Hope that answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 9582,
    "title": "How to place OCO order with market price on Binance Futures Python",
    "created_at": "2021-07-15T10:41:36Z",
    "closed_at": "2021-07-15T21:36:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9582",
    "body": "How do I open an OCO order with Binance Futures but with market price\r\n- OS: Windows 10 Pro 20H2 64-bit\r\n- Programming Language version: Python 3.9.6\r\n- CCXT version:  Latest\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9582/comments",
    "author": "fuvser",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-07-15T21:36:41Z",
        "body": "Afaik, Binance does not support OCO orders for usdt-m/coin-m futures. Binance supports OCO orders for spot markets only."
      }
    ]
  },
  {
    "number": 9578,
    "title": "No Symbols for Bybit spot trading",
    "created_at": "2021-07-14T14:56:28Z",
    "closed_at": "2021-07-15T09:34:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9578",
    "body": "- OS: Ubuntu 20.04.2 LTS\r\n- Programming Language version: Python\r\n- CCXT version:1.53.4\r\n\r\nHello,\r\nThe pilot version of spot trading at Bybit has began. I have just a question, when we can use the CCXT for the spot trading at Bybit?\r\n\r\nThank you\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9578/comments",
    "author": "Kobashun74",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-07-15T09:34:36Z",
        "body": "We will add the support for Bybit's spot markets as soon as possible, hopefully this month. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 9569,
    "title": "Bitfinex - fetch_my_trades()",
    "created_at": "2021-07-13T16:23:23Z",
    "closed_at": "2022-07-23T17:38:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9569",
    "body": "- OS: Ubuntu 20.4\r\n- Programming Language version: python 3.7\r\n- CCXT version: 1.52.94\r\n\r\n```python\r\nsymbol = 'BTC/USD'\r\nday = 24 * 60 * 60 * 1000\r\nstart_time = exchange.parse8601 ('2021-02-25T22:27:44.000')\r\nnow = exchange.milliseconds ()\r\nall_trades = []\r\n\r\nwhile start_time < now:\r\n\r\n    print('------------------------------------------------------------------')\r\n    print('Fetching trades from', exchange.iso8601(start_time))\r\n    end_time = start_time + day\r\n\r\n    trades = exchange.fetch_my_trades(\r\n        symbol=symbol, \r\n        since=start_time, \r\n        limit=None, \r\n        params={\r\n            'endTime': end_time\r\n        }\r\n    )\r\n    if len(trades):\r\n        last_trade = trades[-1]\r\n        start_time = last_trade['timestamp'] + 1\r\n        all_trades += trades\r\n    else:\r\n        start_time = end_time\r\n\r\nprint('Fetched', len(all_trades), 'trades')\r\nfor i in range(0, len(all_trades)):\r\n    trade = all_trades[i]\r\n    print (i, trade['id'], trade['datetime'], trade['amount'])\r\n```\r\n\r\nWhen using `fetch_my_trades()` on either `bitfinex` and `bitfinex2`, the `since` date has no effect and responses return only the last 50 trades for `bitfinex` and 25 for `bitfinex2` api's.\r\n\r\nAny help appreciated\r\n\r\nThanks\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9569/comments",
    "author": "JamesKBowler",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2021-12-16T22:04:38Z",
        "body": "@JamesKBowler  I believe that's because you're not passing a limit to the fetch_my_trade method. In those cases, the default limit will be used, so if the number of trades within the range you've defined with the since parameter is bigger than the limit itself the response will be capped at the limit value. Just bear in mind that these limits may not be high as well. During my tests, I was able to retrieve 999 trades in a single request from the public API, but that limit can vary depending on the endpoint.\r\n(cc @kroitor )"
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-23T17:38:49Z",
        "body": "Above answer by @carlosmiei was correct. I'll mark the issue as closed. Let us know if you experience any issue with CCXT."
      }
    ]
  },
  {
    "number": 9454,
    "title": "Question: how to find leverage bracket of specific symbol in futures (binance)",
    "created_at": "2021-06-27T02:27:22Z",
    "closed_at": "2021-07-01T09:10:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9454",
    "body": "How to find leverage bracket of specific symbol in futures (binance)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9454/comments",
    "author": "2744jaspreet",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-07-01T09:10:07Z",
        "body": "Assuming you have the most recent version of CCXT:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binanceusdm()\r\nexchange.load_leverage_brackets()\r\npprint(this.options['leverageBrackets'])\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 9429,
    "title": "Documentation not clear on Canceling Orders",
    "created_at": "2021-06-22T11:29:16Z",
    "closed_at": "2022-01-02T00:28:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9429",
    "body": "In the documentation of Canceling Orders it is not clear what is returned by exchange.cancelOrder.\r\nIt seems that sometimes it's only a string with the id and sometimes the complete Order structure object. Are there other cases? Is this exchange dependant? Is it only missing some implementations in some exchanges?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9429/comments",
    "author": "tuloski",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-01-01T17:13:06Z",
        "body": "Hello @tuloski,\r\nUnfortunately, there is no standard response from the exchanges when canceling an order. Every exchange has its own way of doing it (some return the created order, some return only a success status, etc) so yes, it is exchange dependant. When the exchange returns with the created order, we return it parsed, otherwise, we just forward the exchange response."
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-02T00:28:00Z",
        "body": "Just to add to this issue and to clarify:\r\n\r\nWe have 3 unified methods for canceling orders:\r\n\r\n1. `cancelOrder` for canceling a single order by id, must return an order structure. If it's not unified in some exchanges or does not return a unified order structure – that has to be fixed in the lib and that is a work that still has to be done, @tuloski @carlosmiei let me know if you can find or fix any occurrences of those.\r\n2. `cancelOrders` for canceling multiple orders by multiple ids. It currently returns exchange-specific responses everywhere, since it's quite hard to unify. It should probably return a dict of canceled and non-canceled ids.\r\n3. `cancelAllOrders` for canceling multiple orders with or without a symbol. It currently also returns exchange-specific response everywhere for the same reason.\r\n\r\n(1) Should already be mostly unified.\r\n(2) + (3) is still a question on how to better unify those, we are gathering exchange response samples for an overview later."
      }
    ]
  },
  {
    "number": 9428,
    "title": "Quote Order Quantity Error 1104",
    "created_at": "2021-06-22T10:41:11Z",
    "closed_at": "2021-06-22T17:18:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9428",
    "body": "- OS: Ubuntu\r\n- Programming Language version: Python 3.8\r\n- CCXT version: Using binance\r\n\r\nI am trying to buy EOS with all my available USDT, with the code below, but keep running into the same error. I have defined the variables inside the create_order function, and outside, to no avail. \r\n\r\nI followed #7963 as closely as I could but still getting the error.\r\n\r\nI also realise that this is assuming I want to use all available USDT to trade with (fine for the timebeing). \r\n\r\n\r\n\r\n```\r\ndef buy_new():\r\n    balance = float(client.get_asset_balance(asset=\"USDT\").get(\"free\"))\r\n\r\n    order = client.create_order(\r\n        symbol=\"EOSUSDT\",\r\n        side=\"BUY\",\r\n        type=\"MARKET\",\r\n        quantity=balance,\r\n        price=None,\r\n        params={\"quoteOrderQty\": balance}\r\n    )\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/seb/PycharmProjects/Main_Trading/order_commands.py\", line 74, in <module>\r\n    buy_new()\r\n  File \"/home/seb/PycharmProjects/Main_Trading/order_commands.py\", line 59, in buy_new\r\n    order = client.create_order(\r\n  File \"/home/seb/PycharmProjects/Main_Trading/venv/lib/python3.8/site-packages/binance/client.py\", line 1387, in create_order\r\n    return self._post('order', True, data=params)\r\n  File \"/home/seb/PycharmProjects/Main_Trading/venv/lib/python3.8/site-packages/binance/client.py\", line 374, in _post\r\n    return self._request_api('post', path, signed, version, **kwargs)\r\n  File \"/home/seb/PycharmProjects/Main_Trading/venv/lib/python3.8/site-packages/binance/client.py\", line 334, in _request_api\r\n    return self._request(method, uri, signed, **kwargs)\r\n  File \"/home/seb/PycharmProjects/Main_Trading/venv/lib/python3.8/site-packages/binance/client.py\", line 315, in _request\r\n    return self._handle_response(self.response)\r\n  File \"/home/seb/PycharmProjects/Main_Trading/venv/lib/python3.8/site-packages/binance/client.py\", line 324, in _handle_response\r\n    raise BinanceAPIException(response, response.status_code, response.text)\r\nbinance.exceptions.BinanceAPIException: APIError(code=-1104): Not all sent parameters were read; read '6' parameter(s) but was sent '7'.\r\n\r\n```\r\n \r\n\r\nAny help is greatly apprecaited.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9428/comments",
    "author": "Moustardd",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-06-22T12:52:23Z",
        "body": "@Moustardd try this instead:\r\n\r\n```\r\ndef buy_new():\r\n    balance = float(client.get_asset_balance(asset=\"USDT\").get(\"free\"))\r\n\r\n    order = client.create_order(\r\n        symbol=\"EOS/USDT\",  # use the unified ccxt symbol here\r\n        side=\"BUY\",\r\n        type=\"MARKET\",\r\n        quantity=None,  # change this line\r\n        price=None,\r\n        params={\"quoteOrderQty\": balance}\r\n    )\r\n ```"
      },
      {
        "user": "Moustardd",
        "created_at": "2021-06-24T10:25:52Z",
        "body": "@frosty00 \r\n\r\nI added the / to the symbol and got an illegal symbol error, Im not using the ccxt library, just the python-binance library and api so Im guessing that would be why. \r\n\r\nI also changed the quantity to None and still running into the same issue as before, except \r\n\r\n`binance.exceptions.BinanceAPIException: APIError(code=-1104): Not all sent parameters were read; read '6' parameter(s) but was sent '7'.`\r\n\r\nis now\r\n\r\n`binance.exceptions.BinanceAPIException: APIError(code=-1104): Not all sent parameters were read; read '5' parameter(s) but was sent '6'.`"
      }
    ]
  },
  {
    "number": 9371,
    "title": "help authenticating to KuCoin Exchange using ccxtPro",
    "created_at": "2021-06-13T07:52:53Z",
    "closed_at": "2021-06-13T18:19:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9371",
    "body": "Hello Guys, \r\n\r\ni tried to authenticate to Kucoin using ccxtPro but it doesn't work, can someone please correct what i'm doing wrong here ?\r\n\r\nhere is my code:\r\n\r\n```\r\nexchange_kucoin = ccxtpro.kucoin({\r\n    'apiKey': const.API_KEY,\r\n    'secret': const.API_SECRET,\r\n    'password': const.API_PASSPHRASE,\r\n    'enableRateLimit': True,\r\n    'headers': {\r\n        'KC-API-KEY': const.API_KEY,\r\n    }\r\n})\r\n```\r\ni have also tried this without the \"header\" but still the same issue\r\n\r\nbut when i try to run a function to get some informations about my account, i get this error: \r\n\r\n`kucoin KC-API-KEY not exists`\r\n\r\n\r\nthe ccxtpro version i'm using is: print(ccxtpro.__version__) ==> 0.7.19",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9371/comments",
    "author": "korchix",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-13T12:46:20Z",
        "body": "@korchix have you tried recreating your API Key? If not, please, try with a fresh new keypair and let us know if that does not help."
      },
      {
        "user": "korchix",
        "created_at": "2021-06-13T18:19:16Z",
        "body": "@kroitor it works now with the new key, thank you for the hint."
      }
    ]
  },
  {
    "number": 9349,
    "title": "exchange.watchBalance sometimes fails after reconnection  to the Binance Spot",
    "created_at": "2021-06-10T10:41:08Z",
    "closed_at": "2021-06-23T07:33:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9349",
    "body": "exchange.watchBalance sometimes fails after reconnection to the Binance Spot\r\n\r\n- OS: Mac\r\n- Programming Language version: Node.js\r\n- CCXT.Pro version: 0.7.7\r\n\r\nLog\r\n```\r\nthis.balance[accountType]['info'] = message;\r\n                                          ^\r\nTypeError: Cannot set property 'info' of undefined\r\n    at binance.handleBalance (./ccxt-pro/js/binance.js:885:43)\r\n    at binance.handleMessage (./ccxt-pro/js/binance.js:1349:27)\r\n```\r\n\r\nSteps to reproduce:\r\n```\r\n- Run await exchange.watchBalance\r\n- Switch off internet access\r\n- Wait for NetworkError\r\n- Switch on internet\r\n- Error\r\n```\r\n\r\nIt seems that this happens in handleBalance (js/binance.js) because of calling to subscriptions[0]. It could contain spot (works) or spotPrivate (fails).",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9349/comments",
    "author": "RusDyn",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-06-23T02:15:49Z",
        "body": "@RusDyn the `binance.options['defaultType']` should never be spotPrivate. This issue can be closed.\r\n\r\nThe valid defaultTypes are spot, margin, future, and delivery."
      }
    ]
  },
  {
    "number": 9334,
    "title": "Is connection dropped on 'ping-pong keepalive missing on time' error?",
    "created_at": "2021-06-07T11:07:04Z",
    "closed_at": "2021-06-07T17:46:30Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9334",
    "body": "Periodically for FTX, Binance/Futures error `Connection to [stream_name] timed out due to a ping-pong keepalive missing on time` occurred when `watchTicker` method is running. Is connection closed after that error and I need to resubscribe for all symbols?\r\n\r\n- OS: DEBIAN (Docker)\r\n- Programming Language version: NodeJS\r\n- CCXT version: Pro version: 0.6.81 \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9334/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-07T17:46:22Z",
        "body": "The same connection is shared across all subscriptions, and most often if one of them times out, all of that become unresponsive, and the entire connection with all its subscriptions must be re-established. We also have plans on adding a better connection manager that will restore your subscriptions automatically and will allow subscribing to many symbols at once. Let us know if the above does not answer your question. If that happens too frequently, please, let us know, we will investigate further."
      },
      {
        "user": "yfenggoldentree",
        "created_at": "2022-08-08T22:57:13Z",
        "body": "Hi @kroitor, curious if there's an update to the aforementioned connection manager?"
      },
      {
        "user": "nileio",
        "created_at": "2022-10-19T06:15:31Z",
        "body": "@kroitor I see this issue is closed.. can you clarify please ? is there an update on this issue ? this is a major problem.. I moved from a different lib and was struck by this issue on many exchanges including Binance! \r\ndefinitely support restoring subscriptions in case of disconnect, providing easier expose of the WSclient so people can listen on `disconnects`, handling of ping-pong (ping-pong should be optional though recommended but Binance for example does not drop the connection if it does not recieve a pong)..\r\nallowing multiple subscriptions at once is nice to have but I can't find a way to resolve this ping-pong issue.. "
      },
      {
        "user": "caiusCitiriga",
        "created_at": "2022-11-14T14:05:26Z",
        "body": "> The same connection is shared across all subscriptions, and most often if one of them times out, all of that become unresponsive, and the entire connection with all its subscriptions must be re-established. We also have plans on adding a better connection manager that will restore your subscriptions automatically and will allow subscribing to many symbols at once. Let us know if the above does not answer your question. If that happens too frequently, please, let us know, we will investigate further.\r\n\r\nAny news on this @kroitor ?"
      }
    ]
  },
  {
    "number": 9332,
    "title": "WHY REMOVE the binance's market's `type`  prop ?",
    "created_at": "2021-06-07T09:00:51Z",
    "closed_at": "2021-06-07T17:48:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9332",
    "body": "As many exchange's market, I use `fetchMarkets`'s 'type' prop to recognize market between spot/margin/future/etc..\r\nBut in the new vertsion of binance.js, there's no 'type' prop in the market.\r\nThis change make a lots of errors in my code, will it be added back later?\r\n\r\n- OS: ubuntu\r\n- Programming Language version: node v14\r\n- CCXT version: latest",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9332/comments",
    "author": "airwin",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-06-07T09:12:44Z",
        "body": "@airwin we were trying to unify the naming of the future / delivery, since some contracts on binance may be future but also delivery (in the sense that they expire), we suggest to use binanceusdm / binancecoinm exchanges for futures trading"
      },
      {
        "user": "airwin",
        "created_at": "2021-06-07T10:28:27Z",
        "body": "I think the `type` prop is part of the unify structure and should be keep (as other exchanges).\r\nAnd the new version should be friendly for those users rely on that prop (or publish a BREAK CHANGE notice?)."
      },
      {
        "user": "kroitor",
        "created_at": "2021-06-07T15:09:54Z",
        "body": "We will restore the `type` in binance markets shortly."
      }
    ]
  },
  {
    "number": 9328,
    "title": "bitkk.com redirects to zb.com",
    "created_at": "2021-06-06T22:08:19Z",
    "closed_at": "2021-06-06T22:13:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9328",
    "body": "bitkk.com redirects to zb.com. Should we remove this exchange? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9328/comments",
    "author": "ndubel",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-06T22:13:08Z",
        "body": "Looks like it... Will do."
      }
    ]
  },
  {
    "number": 9325,
    "title": "Issue when upgrading CCXT Pro",
    "created_at": "2021-06-06T17:20:19Z",
    "closed_at": "2021-06-06T17:22:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9325",
    "body": "Hello,\r\n\r\nI updated to the latest CCXT version ccxt-1.51.1 and my code returns an error when loading CCXT Pro : \r\n\r\n```\r\n  File \"/home/abc/python/aa/marketsdata/models.py\", line 4, in <module>\r\n    import ccxtpro\r\n  File \"/home/abc/python/envdev/lib/python3.6/site-packages/ccxtpro/__init__.py\", line 99, in <module>\r\n    from ccxt.async_support.coingi import coingi                              # noqa: F401\r\nModuleNotFoundError: No module named 'ccxt.async_support.coingi'\r\n```\r\n\r\nSo I try to update the pro version but I'm also facing an issue :\r\n\r\n```\r\n(envdev) dd@fabulous-lenovo-ideapad-710s-13isk:~/python/abc$ pip3 install git+ssh://git@github.com/kroitor/ccxt.pro.git#subdirectory=python\r\nCollecting git+ssh://****@github.com/kroitor/ccxt.pro.git#subdirectory=python\r\n  Cloning ssh://****@github.com/kroitor/ccxt.pro.git to /tmp/pip-req-build-1rf2yeu8\r\n  Running command git clone -q 'ssh://****@github.com/kroitor/ccxt.pro.git' /tmp/pip-req-build-1rf2yeu8\r\n  ERROR: Repository not found.\r\n  fatal: Could not read from remote repository.\r\n\r\n  Please make sure you have the correct access rights\r\n  and the repository exists.\r\nWARNING: Discarding git+ssh://****@github.com/kroitor/ccxt.pro.git#subdirectory=python. Command errored out with exit status 128: git clone -q 'ssh://****@github.com/kroitor/ccxt.pro.git' /tmp/pip-req-build-1rf2yeu8 Check the logs for full command output.\r\nERROR: Command errored out with exit status 128: git clone -q 'ssh://****@github.com/kroitor/ccxt.pro.git' /tmp/pip-req-build-1rf2yeu8 Check the logs for full command output.\r\n```\r\n\r\nWhat do you think could be the reason ?\r\n\r\nThank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9325/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-06T17:26:55Z",
        "body": "You might need to upgrade both CCXT and CCXT Pro occasionally."
      }
    ]
  },
  {
    "number": 9321,
    "title": "Transfer between Binance wallets return status, datetime and timestamp = None",
    "created_at": "2021-06-05T10:17:15Z",
    "closed_at": "2021-06-05T10:20:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9321",
    "body": "Hello all,\r\n\r\nI noticed that transfer between Binance wallets return some missing information, please find an example:\r\n\r\n```\r\nb.transfer('USDT', 1, 'future', 'spot')\r\n\r\n{'info': {'tranId': '65052934028'},\r\n 'id': '65052934028',\r\n 'timestamp': None,\r\n 'datetime': None,\r\n 'currency': 'USDT',\r\n 'amount': 1,\r\n 'fromAccount': 'future',\r\n 'toAccount': 'spot',\r\n 'status': None}\r\n```\r\n\r\nAs you can see status, timestamp and datetime are set to None even when transfer is successful. It's a minor issue but it's useful to have these data in order to monitor transfers.\r\n\r\nBest,\r\nKinzowa\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9321/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-05T10:20:12Z",
        "body": "Hi! The `info` structure contains the response from the exchange \"as is\", untouched: `'info': {'tranId': '65052934028'},` ← there's no timestamp there, therefore it's not populated. This is documented throughout the Manual – not all exchanges will provide all the fields in all the structures. If you need a timestamp, you can just call `exchange.milliseconds()` or `exchange.iso8601(exchange.milliseconds())`. Hope that answers your question. Let us know if not."
      },
      {
        "user": "Kinzowa",
        "created_at": "2021-06-05T10:22:23Z",
        "body": "Thanks Igor, I will do that"
      }
    ]
  },
  {
    "number": 9301,
    "title": "Is it possible to specify custom onError and onClose function for Watch?",
    "created_at": "2021-06-02T13:52:50Z",
    "closed_at": "2021-06-02T20:39:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9301",
    "body": "Is it possible to specify custom `onError` and `onClose` function for `Watch` like it is possible for `onConnected`?\r\n\r\nOS: DEBIAN (Docker)\r\nProgramming Language version: NodeJS\r\nCCXT version: Pro version: 0.6.81\r\n\r\n```\r\nconst exchange = new ccxt['binance']();\r\nexchange.watchTicker('ADA/USDT');\r\n\r\nexchange.onClose = () => {\r\n    // custom code\r\n};\r\n\r\nexchange.onError = () => {\r\n    // custom code\r\n};\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9301/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "wunderb1t",
        "created_at": "2021-06-02T14:48:56Z",
        "body": "I suppose it is possible to override ccxt method by following:\r\n\r\n```\r\nconst exchange = new ccxt['binance']();\r\n\r\nlet ccxtOnClose = exchange.onClose;\r\nexchange.onClose = (client, error) => {\r\n     console.log('Custom code...');\r\n     ccxtOnClose.call(exchange, client, error);\r\n}\r\n\r\nexchange.watchTicker('ADA/USDT');\r\n```\r\nIs it ok? "
      },
      {
        "user": "kroitor",
        "created_at": "2021-06-02T20:39:54Z",
        "body": "This should work, let us know if not:\r\n\r\n```JavaScript\r\nconst exchange = new ccxtpro['binance']();\r\n\r\nlet ccxtOnClose = exchange.onClose;\r\nexchange.onClose = (client, error) => {\r\n     console.log('Custom code...');\r\n     ccxtOnClose.call(exchange.instance, client, error);\r\n}\r\n\r\nexchange.watchTicker('ADA/USDT');\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nconst exchange = new ccxtpro['binance']({\r\n    onClose: function (client, error) {\r\n         console.log('Custom code...');\r\n         return super.onClose(client, error);\r\n    },\r\n});\r\n\r\nexchange.watchTicker('ADA/USDT');\r\n```"
      }
    ]
  },
  {
    "number": 9291,
    "title": "Bitvavo `watch_orders` with `newUpdates` not working",
    "created_at": "2021-05-30T12:56:01Z",
    "closed_at": "2021-05-31T11:36:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9291",
    "body": "- OS: macOS 11.3.1\r\n- Programming Language version: 3.9.5\r\n- CCXT version: 1.50.66 (CCXT) / 0.7.10 (CCXT Pro)\r\n\r\n```\r\nbitvavo = ccxtpro.bitvavo({\"apiKey\": \"#####\", \"secret\": \"#####\", \"newUpdates\": True})\r\nawait bitvavo.authenticate()\r\nawait bitvavo.watch_orders('BTC/EUR')\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-3-8cfabd3aa667> in <module>\r\n----> 1 await bitvavo.watch_orders('BTC/EUR')\r\n\r\n~/###/###/venv/lib/python3.9/site-packages/ccxtpro/bitvavo.py in watch_orders(self, symbol, since, limit, params)\r\n    384         orders = await self.watch(url, messageHash, request, subscriptionHash)\r\n    385         if self.newUpdates:\r\n--> 386             limit = orders.getLimit(symbol, limit)\r\n    387         return self.filter_by_symbol_since_limit(orders, symbol, since, limit, True)\r\n    388 \r\n\r\nAttributeError: 'list' object has no attribute 'getLimit'\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9291/comments",
    "author": "Matthias-Thul",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-31T05:04:48Z",
        "body": "I've just tried this snippet with new versions of both libs, and it works for me:\r\n\r\n```Python\r\nimport ccxtpro\r\nimport ccxt\r\nfrom asyncio import get_event_loop, gather\r\n\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\nprint('CCXT Pro Version:', ccxtpro.__version__)\r\n\r\n\r\nasync def watch_orders(exchange, symbol):\r\n    while True:\r\n        orders = await exchange.watch_orders(symbol)\r\n        now = exchange.iso8601(exchange.milliseconds())\r\n        for order in orders:\r\n            print(now, order['id'], order['symbol'], order['datetime'], order['status'])\r\n\r\n\r\nasync def create_and_cancel_orders(exchange, symbol):\r\n    for i in range(0, 10):\r\n        ticker = await exchange.fetch_ticker(symbol)\r\n        amount = 0.01\r\n        price = float(ticker['last']) * 0.7\r\n        order = await exchange.create_order(symbol, 'limit', 'buy', amount, price)\r\n        await exchange.sleep(5000)\r\n        order = await exchange.cancel_order(order['id'], symbol)\r\n        await exchange.sleep(5000)\r\n\r\n\r\nasync def main(id, symbol):\r\n    exchange = getattr(ccxtpro, id)({\r\n        'apiKey': 'YOUR_API_KEY',\r\n        'secret': 'YOUR_SECRET',\r\n        \"newUpdates\": True,\r\n    })\r\n    await exchange.load_markets()\r\n    # exchange.verbose = True\r\n    loops = [\r\n        watch_orders(exchange, symbol),\r\n        create_and_cancel_orders(exchange, symbol)\r\n    ]\r\n    await gather(*loops)\r\n    await exchange.close()\r\n\r\n\r\nloop = get_event_loop()\r\nloop.run_until_complete(main('bitvavo', 'ETH/EUR'))\r\n```\r\n\r\nIf that does not work for you, please paste your complete output and your complete code (without your keys)."
      },
      {
        "user": "Matthias-Thul",
        "created_at": "2021-05-31T11:35:16Z",
        "body": "Apologies. Seems like something went wrong in my virtual environment. When running your code example, I initially got the same error as before. Then I did `pip install --force-reinstall` which did not upgrade the versions of the two CCXT libraries but installed them fresh. Now it works."
      }
    ]
  },
  {
    "number": 9286,
    "title": "Bitvavo `watch_orders` - missing initialization of `self.orders`",
    "created_at": "2021-05-29T14:36:17Z",
    "closed_at": "2021-05-30T01:38:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9286",
    "body": "- OS: macOS 11.3.1\r\n- Programming Language version: Python 3.9.5\r\n- CCXT version: 0.7.7\r\n\r\n```\r\nbitvavo = ccxtpro.bitvavo({\"apiKey\": \"#####\", \"secret\": \"#####\"})\r\nawait bitvavo.authenticate()\r\nawait bitvavo.watch_orders('BTC/EUR')\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/###/opt/anaconda3/envs/python-3.9/lib/python3.9/asyncio/events.py\", line 80, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"/Users/###/###/venv/lib/python3.9/site-packages/ccxtpro/base/fast_client.py\", line 25, in handler\r\n    self.handle_message(message)\r\n  File \"/Users/###/###venv/lib/python3.9/site-packages/ccxtpro/base/aiohttp_client.py\", line 32, in handle_message\r\n    self.handle_text_or_binary_message(message.data)\r\n  File \"/Users/###/###/venv/lib/python3.9/site-packages/ccxtpro/base/aiohttp_client.py\", line 27, in handle_text_or_binary_message\r\n    self.on_message_callback(self, decoded)\r\n  File \"/Users/###/###/venv/lib/python3.9/site-packages/ccxtpro/bitvavo.py\", line 633, in handle_message\r\n    return method(client, message)\r\n  File \"/Users/###/###/venv/lib/python3.9/site-packages/ccxtpro/bitvavo.py\", line 449, in handle_order\r\n    self.orders[symbol] = defaultKey\r\nTypeError: 'NoneType' object does not support item assignment\r\n```\r\n\r\nWhat happens here is that `self.orders` has never been initialized.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9286/comments",
    "author": "Matthias-Thul",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-29T19:21:07Z",
        "body": "@Matthias-Thul what is your version of CCXT and CCXT Pro? If your version of CCXT is older than 1.50, please, upgrade:\r\n\r\n```Python\r\nimport ccxt\r\nimport ccxtpro\r\nprint('CCXT Version', ccxt.__version__)\r\nprint('CCXT Pro Version', ccxtpro.__version__)\r\n```\r\n\r\nLet us know if upgrading to the most recent version does not help. Feel free to reopen this issue or just ask further questions if any."
      },
      {
        "user": "Matthias-Thul",
        "created_at": "2021-05-29T19:35:00Z",
        "body": "Apologies - wasn't aware that the versions differ.\r\n\r\n```\r\nCCXT Version 1.50.64\r\nCCXT Pro Version 0.7.7\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-29T19:37:01Z",
        "body": "@Matthias-Thul do you still have this issue with CCXT 1.50.64?"
      },
      {
        "user": "Matthias-Thul",
        "created_at": "2021-05-29T19:38:10Z",
        "body": "Yes - these were my versions all along and I still have this issue."
      },
      {
        "user": "Matthias-Thul",
        "created_at": "2021-05-29T19:44:13Z",
        "body": "For good measure I upgraded to the very latest just now but no difference.\r\n\r\n```\r\nCCXT Version 1.50.66\r\nCCXT Pro Version 0.7.8\r\n```\r\n\r\nWhat makes the error go away is to put a \r\n\r\n```python\r\nif self.orders is None:\r\n    self.orders = {}\r\n```\r\n\r\nin `ccxtpro/bitvavo.py` right before line 449. Not sure this is correct in all cases though."
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-29T19:49:56Z",
        "body": "@Matthias-Thul we will fix it shortly, thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-30T01:58:15Z",
        "body": "@Matthias-Thul we've pushed the edits, it should work normally as of CCXT Pro 0.7.9+. Please, don't hesitate if you have further difficulties with it. Thanks again for your feedback, we appreciate it!"
      }
    ]
  },
  {
    "number": 9271,
    "title": "Missing timestamp in the response of Binance after an order is placed",
    "created_at": "2021-05-27T15:46:12Z",
    "closed_at": "2021-05-28T01:57:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9271",
    "body": "Hello,\r\n\r\nI noticed that the response contains a key:value `timestamp:None` after an order is placed. Looks like the correct field is in `info` sub dictionary at key `updateTime` or `transactTime`.\r\n\r\nThanks\r\n\r\n```\r\n{'amount': 5.0,\r\n 'average': 0.0,\r\n 'clientOrderId': '1569',\r\n 'cost': 0.0,\r\n 'datetime': None,\r\n 'fee': None,\r\n 'fees': [],\r\n 'filled': 5.0,\r\n 'id': '7020129353',\r\n 'info': {'avgPrice': '2805.59',\r\n          'clientOrderId': '1569',\r\n          'closePosition': False,\r\n          'cumBase': '0.01782156',\r\n          'cumQty': '5',\r\n          'executedQty': '5',\r\n          'orderId': '7020129353',\r\n          'origQty': '5',\r\n          'origType': 'MARKET',\r\n          'pair': 'ETHUSD',\r\n          'positionSide': 'BOTH',\r\n          'price': '0',\r\n          'priceProtect': False,\r\n          'reduceOnly': False,\r\n          'side': 'BUY',\r\n          'status': 'FILLED',\r\n          'stopPrice': '0',\r\n          'symbol': 'ETHUSD_PERP',\r\n          'timeInForce': 'GTC',\r\n          'type': 'MARKET',\r\n          'updateTime': '1622129839945',\r\n          'workingType': 'CONTRACT_PRICE'},\r\n 'lastTradeTimestamp': None,\r\n 'postOnly': False,\r\n 'price': 0.0,\r\n 'remaining': 0.0,\r\n 'side': 'buy',\r\n 'status': 'closed',\r\n 'stopPrice': 0.0,\r\n 'symbol': 'ETH/USD',\r\n 'timeInForce': 'GTC',\r\n 'timestamp': None,\r\n 'trades': [],\r\n 'type': 'market'}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9271/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-28T01:48:21Z",
        "body": "@Kinzowa the `updateTime` will change over time as more and more trades fill up the order, while the order's `timestamp` must remain the same, so we can only set timestamp = updateTime in a few specific cases."
      },
      {
        "user": "frosty00",
        "created_at": "2021-05-28T01:50:59Z",
        "body": "yeah, but i think we can set `lastTradeTimestamp` and `average` here"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-28T01:52:00Z",
        "body": "@frosty00 i made a couple of commits, will push in a sec"
      }
    ]
  },
  {
    "number": 9207,
    "title": "FTX: Can't cancel opened Order / Can't get Order ID's of open Orders (PHP)",
    "created_at": "2021-05-18T20:15:36Z",
    "closed_at": "2021-05-18T20:33:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9207",
    "body": "i can successfully create orders with :\r\n\r\n`$exchange->create_order($symbol, $type, $side, $amount, $price, $params);`\r\n```\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [id] => 44022042\r\n            [market] => BTC-PERP\r\n            [future] => BTC-PERP\r\n            [side] => sell\r\n            [type] => take_profit\r\n            [orderPrice] => 48100.0\r\n            [triggerPrice] => 47000.0\r\n            [size] => 0.001\r\n            [status] => open\r\n            [createdAt] => 2021-05-18T20:09:03.654365+00:00\r\n            [triggeredAt] => \r\n            [orderId] => \r\n            [error] => \r\n            [reduceOnly] => \r\n            [trailValue] => \r\n            [trailStart] => \r\n            [cancelledAt] => \r\n            [cancelReason] => \r\n            [retryUntilFilled] => \r\n            [orderType] => limit\r\n        )\r\n\r\n    [id] => 44022042\r\n    [clientOrderId] => \r\n    [timestamp] => 1621368543654\r\n    [datetime] => 2021-05-18T20:09:03.654Z\r\n    [lastTradeTimestamp] => \r\n    [symbol] => BTC-PERP\r\n    [type] => take_profit\r\n    [timeInForce] => \r\n    [postOnly] => \r\n    [side] => sell\r\n    [price] => 47000\r\n    [stopPrice] => 47000\r\n    [amount] => 0.001\r\n    [cost] => \r\n    [average] => \r\n    [filled] => \r\n    [remaining] => \r\n    [status] => open\r\n    [fee] => \r\n    [trades] => \r\n)\r\n\r\n```\r\n\r\nbut if i want to close this order with\r\n`$exchange->cancel_order(44022042)`\r\n\r\n\r\ni get an error\r\n\r\n`ccxt\\OrderNotFound: ftx {\"success\":false,\"error\":\"Order not found\"}`\r\n\r\n\r\n\r\nalso \r\n\r\n`$exchange->fetch_open_orders() `returns an empty array even though i have open orders\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9207/comments",
    "author": "hm291195",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-18T20:33:44Z",
        "body": "@hm291195 if you're canceling a conditional take_profit order, you have to add a `type` param override, otherwise it will attempt to cancel a regular order with that id instead of the conditional order:\r\n\r\n```PHP\r\n$exchange->cancel_order(44022042, null, array('type'=>'takeProfit'));\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "hm291195",
        "created_at": "2021-05-18T20:39:51Z",
        "body": "ok this works.\r\n\r\nAnd regarding the second part - why does `$exchange->fetch_open_orders() `return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\n\r\nLast but not least i just figured out another ambiguity:\r\n\r\nif i fetch my open positions with `$exchange->fetch_positions() `why does the array contain positions that are already closed ? Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-19T11:05:27Z",
        "body": "@hm291195 \r\n\r\n> And regarding the second part - why does $exchange->fetch_open_orders() return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\nYes, you have to add a param override for conditionals: \r\n\r\n```PHP\r\n$since = null;\r\n$limit = null;\r\n$params = array('type'=>'takeProfit');\r\n$orders = $exchange->fetch_open_orders($symbol, $since, $limit, $params);\r\n```\r\n\r\n> Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?\r\n\r\nYes, that is correct."
      },
      {
        "user": "hm291195",
        "created_at": "2021-05-19T12:25:06Z",
        "body": "sorry for the duplicate post, i thought my answer here might not show up since the question was closed yesterday after your answer!\r\n\r\nthanks for clarifying.\r\n"
      }
    ]
  },
  {
    "number": 9202,
    "title": "How to catch error in throttling mode in ccxt pro",
    "created_at": "2021-05-18T10:23:08Z",
    "closed_at": "2021-05-20T21:50:58Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9202",
    "body": "- OS: Ubuntu 20.04\r\n- Programming Language version: Typescript / Node\r\n- CCXT version: 1.41.86\r\n\r\nHi there,\r\n\r\ni have a question regarding ccxt pro. I am reading manual, section: \"Real-Time vs Throttling\".\r\n\r\n```js\r\n// real-time mode\r\nconst limit = 5 // optional\r\nwhile (true) {\r\n    try {\r\n        const orderbook = await exchange.watchOrderBook (symbol, limit)\r\n        // your reaction to the update takes place here\r\n        // you arrive here after receiving the update from the exchange in real time\r\n        console.log (orderbook) // every update\r\n    } catch (e) {\r\n        console.log (e)\r\n        // throw e // uncomment to stop the loop on exceptions\r\n    }\r\n}\r\n```\r\n\r\n```js\r\n// throttling mode\r\nconst limit = 5 // optional\r\n// await is optional, alternatively you can launch it in bg without await\r\nawait exchange.watchOrderBook (symbol, limit)\r\nwhile (true) {\r\n    // your reaction takes place here\r\n    // you arrive here every 100 ms regardless of whether there was an update or not\r\n    // in throttling mode offloading the orderbook with .limit () is required\r\n    console.log (exchange.orderbooks[symbol].limit (limit))\r\n    await exchange.sleep (100) // every 100 ms\r\n}\r\n```\r\nIn realtime mode, i can catch an error and execute some actions based on the error output, which i am currently doing for counting subscriptions ,confirmations etc, basically i rely on it to see if pairs are unsubscribed or if everyone is subscribed etc.\r\n\r\nIs it possible to catch the same error in throttling mode,  instantly as it happens (just like in realtime mode?).\r\n\r\nKind regards,\r\nNeon",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9202/comments",
    "author": "teneon",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-20T21:50:58Z",
        "body": "@teneon hi!\r\n\r\n> Is it possible to catch the same error in throttling mode, instantly as it happens (just like in realtime mode?).\r\n\r\nYes, you can override the onError method to add your handling:\r\n\r\n```JavaScript\r\nclass MyBinance extends ccxtpro.binance {\r\n    onError (client, error) {\r\n        // your custom code ----------------\r\n        console.log (this.id, client.url, error) // intercept it here\r\n        // don't forget to call the parent method\r\n        return super.onError (client, error)\r\n    }\r\n}\r\n\r\nconst exchange = new MyBinance ({ 'enableRateLimit': true })\r\n\r\n// ...\r\n```\r\n\r\nLet us know if that does not answer your question or does not help."
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-20T21:52:54Z",
        "body": "P.S. we will also some more methods ands hooks for granular control over the subscriptions and errors in throttling mode."
      }
    ]
  },
  {
    "number": 9188,
    "title": "What Time Does The Day Roll Over?",
    "created_at": "2021-05-16T09:57:11Z",
    "closed_at": "2021-05-16T10:07:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9188",
    "body": "Quick question: When do daily 'candles' roll over in ccxt? I am pulling daily data on a US server and for my system I need to know when the date stamps roll over into the new day/date. My understanding thus far is that it happens at 0:00 GMT. \r\n\r\nIf correct then the roll over would be e.g. at 8:00pm in NYC, and 1:00am in London.\r\n\r\nCan you please confirm or correct?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9188/comments",
    "author": "mmehrle",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-16T10:07:26Z",
        "body": "Hi! Yes, all unified timestamps should be in UTC. Exchange-specific `info`s may have timestamps in other timezones, but CCXT converts them to UTC in the outer unified layer. If you find any inconsistencies, please let us know."
      },
      {
        "user": "mmehrle",
        "created_at": "2021-05-16T10:09:33Z",
        "body": "WOW - that was fast. You are the man. BTW, ccxt kicks ass - love it."
      },
      {
        "user": "mmehrle",
        "created_at": "2021-05-16T21:26:00Z",
        "body": "Follow up question. I'm setting up a cron job and my sys admin asked me if we are talking about UTC or GMT here. Because GMT accounts for DST while UTC does not. My 'guess' would be that exchanges use UTC but I just wanted to make sure.\r\n\r\nThanks in advance."
      },
      {
        "user": "mmehrle",
        "created_at": "2021-05-16T21:34:43Z",
        "body": "Never mind - you already answered that it's in UTC. My apologies - I have not gotten much sleep in the past few weeks :-}"
      }
    ]
  },
  {
    "number": 9178,
    "title": "Arbitrage Trading question",
    "created_at": "2021-05-13T23:53:32Z",
    "closed_at": "2021-05-26T17:17:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9178",
    "body": "What would be the proper method to performing arbitrage trades with ccxt?\r\n\r\nLike for example do you need to have money already deposited in each exchange? this is the main question im wondering if theres some sort of most efficient way of approaching this.\r\n\r\nthanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9178/comments",
    "author": "adamrg73",
    "comments": [
      {
        "user": "tuloski",
        "created_at": "2021-05-14T17:45:16Z",
        "body": "I don't think it's a question related to ccxt.\r\nIt's more about trading strategies for arbitrage.\r\nBTW the steps are something like:\r\n\r\n- Subscribe to books with watchOrderbook() to get the most recent books via ws (ccxt.pro)\r\n- Implement the arbitrage strategy and calculate the trade prices and volumes\r\n- Send trading orders with ccxt createLimitSellOrder (or buy order, or market orders depending on the strategies)"
      },
      {
        "user": "HokhyTann",
        "created_at": "2021-05-14T18:03:46Z",
        "body": "> * via ws\r\n\r\nwhat is ws?"
      },
      {
        "user": "tuloski",
        "created_at": "2021-05-14T18:08:56Z",
        "body": "> > * via ws\r\n> \r\n> what is ws?\r\n\r\nwebsocket"
      },
      {
        "user": "HokhyTann",
        "created_at": "2021-05-15T09:01:15Z",
        "body": "> > > * via ws\r\n> > \r\n> > \r\n> > what is ws?\r\n> \r\n> websocket\r\n\r\nIt's only available on ccxt.pro, right?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-15T18:49:12Z",
        "body": "@HokhyTann yes, it's available in ccxt.pro only at this time."
      },
      {
        "user": "adamrg73",
        "created_at": "2021-05-24T23:56:05Z",
        "body": "do you have to have funds in all the exchanges already in there before the orders are placed? I just wana make sure im not missing a technique? or do you send the funds in quick with the ccxt api and then do the trade? these details someone please outline the best steps most people use."
      },
      {
        "user": "tuloski",
        "created_at": "2021-05-25T11:55:26Z",
        "body": "> do you have to have funds in all the exchanges already in there before the orders are placed? I just wana make sure im not missing a technique? or do you send the funds in quick with the ccxt api and then do the trade? these details someone please outline the best steps most people use.\r\n\r\nPlease, this is not a forum on trading strategies. The best arbitrageurs won't discuss with you their technique learned in years of experience and trial/errors.\r\nConsider taking a course on finance/trading. Arbitrage trading HAS risks and it requires some knowledge.\r\nPlease consider also closing this issue."
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-26T17:17:26Z",
        "body": "@adamrg73 \r\n\r\n> do you have to have funds in all the exchanges already in there before the orders are placed?\r\n\r\nYes, that's the only way to keep up with the arbitrage speeds on most pairs.\r\n\r\n> or do you send the funds in quick with the ccxt api and then do the trade?\r\n\r\nThat would be too slow, most of inter-exchange opportunities exists for seconds (if not milliseconds), and if your transfer takes minutes to confirm, you may lose the opportunity. There may still be some opportunities that exist long enough to catch them, but you should expect a lot of competition anyways.\r\n\r\nIn general, I think, @tuloski is right, we cannot really discuss it in-depth in this format, cause general arbitrage is a very wide field of ideas, covering it would require writing a book here on just this single issue alone. It's a question too vague. We can discuss concrete questions or technical questions on CCXT though. I would close this issue for now, feel free to reopen it if you run into difficulties."
      }
    ]
  },
  {
    "number": 9136,
    "title": "FAQ - Time period to merge a New Exchange PR",
    "created_at": "2021-05-05T10:29:15Z",
    "closed_at": "2021-05-05T18:15:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9136",
    "body": "Hi, @kroitor any idea of how much time takes by CCXT to merge or adding New Exchange PR after successful compilation and build? \r\nlike in days or months etc.\r\n\r\nThanks\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9136/comments",
    "author": "munny-story",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-05T18:15:09Z",
        "body": "@munny-story we currently have a backlog of free integrations for reviewing and merging, it might take a few weeks. If you wish to speed it up, please reach out to info@ccxt.trade"
      }
    ]
  },
  {
    "number": 9103,
    "title": "exchange.timeframes['1d'] missing from ByBit",
    "created_at": "2021-05-01T10:27:21Z",
    "closed_at": "2021-05-01T19:44:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9103",
    "body": "When i try using **exchange.timeframes['1d']** for ByBit exchange - i see this error: **[ExceptionsHandler] timeframe unit D is not supported**\r\n\r\n```typescript\r\n          for (const date of dates) {\r\n            await sleep(exchange.rateLimit); // milliseconds\r\n            const fData = await exchange.fetchOHLCV(\r\n              symbol,\r\n              exchange.timeframes['1d'],\r\n              exchange.parse8601(`${date}T00:00:00Z`),\r\n              1,\r\n            );\r\n```\r\nHow fix this problem, i need 1 day timeframe? I'm using last version of ccxt 1.49.21",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9103/comments",
    "author": "wirwl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-01T19:44:12Z",
        "body": "@wirwl you're sending `exchange.timeframes['1d']`, just send `'1d'` instead:\r\n\r\n```JavaScript\r\n            const fData = await exchange.fetchOHLCV(\r\n              symbol,\r\n              '1d', // ←-------------------------------------- HERE\r\n              exchange.parse8601(`${date}T00:00:00Z`),\r\n              1,\r\n            );\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "wirwl",
        "created_at": "2021-05-02T11:54:27Z",
        "body": "> @wirwl you're sending `exchange.timeframes['1d']`, just send `'1d'` instead:\r\n> \r\n> ```js\r\n>             const fData = await exchange.fetchOHLCV(\r\n>               symbol,\r\n>               '1d', // ←-------------------------------------- HERE\r\n>               exchange.parse8601(`${date}T00:00:00Z`),\r\n>               1,\r\n>             );\r\n> ```\r\n> \r\n> Let us know if that does not answer your question.\r\n\r\nYes, '1d' it's work. Thank you!"
      }
    ]
  },
  {
    "number": 9046,
    "title": "Stale Price Feed from Binance USDT Futures & FTX",
    "created_at": "2021-04-22T08:03:42Z",
    "closed_at": "2021-05-04T23:30:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9046",
    "body": "Hi Kroitor,\r\n\r\nI think I'm getting a stale/delayed price feed from Binance USDT Futures and FTX. I only need the Best Bid & Offer from each of the exchanges pushed in real-time (I don't need orderbooks). Sometimes the FTX price or the Binance price just stops updating. Is there anything in the code you can see that would be causing this?\r\n\r\nimport threading\r\nimport asyncio\r\nimport ccxtpro\r\nimport loggin_util\r\nfrom definitions.exchanges import Exchanges\r\nfrom definitions.trading_util import ConnectionState\r\nimport ccxtpro_exchanges\r\nimport definitions.app_values as apv\r\n\r\n\r\n# from principal import Principal\r\n\r\n\r\nclass DataFeedManager(threading.Thread):\r\n    def __init__(self, exchange: Exchanges, symbol_name: str, data_coin_command, print_info: bool,\r\n                 entry_delta: float, exit_delta: float, entry_size: float, _data_feed_stopped,\r\n                 _executing_methods_event, assigned_pair_id):\r\n        threading.Thread.__init__(self)\r\n        self.exchange = exchange\r\n        self.symbol_name = symbol_name\r\n        self.print_info = print_info\r\n        self.print_info = False  # for testing\r\n        self.bid = 0.0\r\n        self.ask = 0.0\r\n        self.entry_delta = entry_delta\r\n        self.exit_delta = exit_delta\r\n        self.entry_size = entry_size\r\n        self.logger = loggin_util.create_logger(__name__ + '_' + self.exchange.name + '_' +\r\n                                                self.symbol_name.replace('/', ''))\r\n        self.conn_state = ConnectionState.DISCONNECTED\r\n        self.data_coin_command = data_coin_command\r\n        self.data_feed_enabled = True\r\n        self.data_feed_stopped = _data_feed_stopped\r\n        self.executing_methods_event = _executing_methods_event\r\n        self.binance_pro = ccxtpro.binance({'enableRateLimit': True,\r\n                                            'options': {\r\n                                                'defaultType': 'future',\r\n                                            }})\r\n        self.ftx_pro = ccxtpro.ftx({'enableRateLimit': True})\r\n        self.assigned_pair_id = assigned_pair_id\r\n\r\n        # print(self.symbol_id.replace('/', ''))\r\n\r\n    async def get_tick(self):\r\n        exchange_switcher = {\r\n            Exchanges.binance: ccxtpro.binance({'enableRateLimit': True,\r\n                                                'apiKey': apv.binance_api_key,\r\n                                                'secret': apv.binance_secret_key,\r\n                                                'options': {\r\n                                                    'defaultType': 'future',\r\n                                                    'watchTicker': {\r\n                                                        'name': 'bookTicker'\r\n                                                    }\r\n                                                }}),\r\n            Exchanges.ftx: ccxtpro.ftx({'enableRateLimit': True}),\r\n        }\r\n        exchange = exchange_switcher.get(self.exchange)\r\n        while self.data_feed_stopped.wait():\r\n\r\n            if not self.data_feed_enabled:\r\n                print(\"Stopping Data Feed\")\r\n                self.data_feed_stopped.clear()\r\n                print(\"Data Feed Stopped? %s\" % self.data_feed_stopped)\r\n                break\r\n\r\n            if self.print_info: print(\"----------------------\")\r\n            if self.print_info: print(\"data_feed_enabled: %s\" % self.data_feed_enabled)\r\n            if self.print_info: print(exchange.id)\r\n            if self.print_info: print(\"Symbol: \", self.symbol_name)\r\n\r\n            try:\r\n                # order_book = await exchange.watch_order_book(self.symbol_name)\r\n                order_book = await exchange.watch_ticker(self.symbol_name)\r\n            except Exception as e:\r\n                self.conn_state = ConnectionState.DISCONNECTED\r\n                self.logger.error('Disconnected')\r\n                print(\"Exception: \", e)\r\n                continue\r\n            if self.conn_state == ConnectionState.DISCONNECTED:\r\n                self.logger.info('Connected')\r\n                self.conn_state = ConnectionState.CONNECTED\r\n\r\n            # self.bid = order_book['bids'][0][0] if len(order_book['bids']) > 0 else None\r\n            # self.ask = order_book['asks'][0][0] if len(order_book['asks']) > 0 else None\r\n            self.bid = order_book['bid'] if order_book['bid'] is not None else self.bid\r\n            self.ask = order_book['ask'] if order_book['ask'] is not None else self.ask\r\n            spread = (self.ask - self.bid) if (self.bid and self.ask) else None\r\n            mid = (self.bid + self.ask) / 2 if (self.bid and self.ask) else None\r\n            if self.print_info: print(\"bid: \", self.bid)\r\n            if self.print_info: print(\"ask: \", self.ask)\r\n            if self.print_info: print(\"spread: \", spread)\r\n            if self.print_info: print(\"mid: \", mid)\r\n            self.data_coin_command(self.symbol_name,\r\n                                   self.bid,\r\n                                   self.ask,\r\n                                   self.entry_delta,\r\n                                   self.exit_delta,\r\n                                   self.entry_size,\r\n                                   self.executing_methods_event,\r\n                                   self.assigned_pair_id)\r\n\r\n    def run(self):\r\n        asyncio.run(self.get_tick())",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9046/comments",
    "author": "deceneucapital",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-22T08:17:36Z",
        "body": "Hi @deceneucapital !\r\n\r\nDo you have this issue with the most recent version of CCXT Pro + the following script:\r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport ccxtpro\r\nfrom asyncio import gather, get_event_loop\r\n\r\n\r\nasync def exchange_symbol_loop(exchange, symbol):\r\n    print('Starting the', exchange.id, 'symbol loop with', symbol)\r\n    while True:\r\n        try:\r\n            ticker = await exchange.watch_ticker(symbol)\r\n            now = exchange.milliseconds()\r\n            print(exchange.iso8601(now), exchange.id, symbol, ticker['bid'], ticker['ask'])\r\n        except Exception as e:\r\n            print(str(e))\r\n            # raise e  # uncomment to break all loops in case of an error in any one of them\r\n            break  # you can break just this one loop if it fails\r\n\r\n\r\nasync def exchange_loop(asyncio_loop, exchange_id, symbols):\r\n    print('Starting the', exchange_id, 'exchange loop with', symbols)\r\n    exchange = getattr(ccxtpro, exchange_id)({\r\n        'enableRateLimit': True,\r\n        'asyncio_loop': asyncio_loop,\r\n        'options': {\r\n            'defaultType': 'future',\r\n            'watchTicker': {\r\n                'name': 'bookTicker',\r\n            },\r\n        },\r\n    })\r\n    loops = [exchange_symbol_loop(exchange, symbol) for symbol in symbols]\r\n    await gather(*loops)\r\n    await exchange.close()\r\n\r\n\r\nasync def main(asyncio_loop):\r\n    exchanges = {\r\n        'ftx': ['BTC/USDT', 'ETH/BTC'],\r\n        'binance': ['BTC/USDT', 'ETH/BTC'],\r\n    }\r\n    loops = [exchange_loop(asyncio_loop, exchange_id, symbols) for exchange_id, symbols in exchanges.items()]\r\n    await gather(*loops)\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio_loop = get_event_loop()\r\n    asyncio_loop.run_until_complete(main(asyncio_loop))\r\n```\r\n\r\nDoes it get stale?\r\n"
      },
      {
        "user": "deceneucapital",
        "created_at": "2021-04-22T08:28:55Z",
        "body": "Will check and come back to you - thanks!"
      },
      {
        "user": "deceneucapital",
        "created_at": "2021-05-04T23:30:02Z",
        "body": "That fixed it, thanks!"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-04T23:39:16Z",
        "body": "@deceneucapital thank you for your feedback! We appreciate it!"
      }
    ]
  },
  {
    "number": 9037,
    "title": "OHLCV historic data loop",
    "created_at": "2021-04-20T21:55:10Z",
    "closed_at": "2022-07-20T09:33:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9037",
    "body": "Hello guys, im really a novice with ccxt and pyhton, sorry if this is trivial.\r\nafter fetching data  the returned csv data loops from end date back to start date in the file. Thanks in advance for help \r\n\r\n- OS: Ubuntu\r\n- Programming Language version:3.8\r\n- CCXT version: 1.48.25\r\n\r\n```\r\nimport ccxt\r\nimport calendar\r\nfrom datetime import datetime, date, timedelta\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nftx = ccxt.ftx()\r\n\r\ndef min_ohlcv(dt, pair, limit):\r\n    # UTC native object\r\n    since = calendar.timegm(dt.utctimetuple())*1000\r\n    ohlcv1 = ftx.fetch_ohlcv(symbol=pair, timeframe='1d', since=since, limit=limit)\r\n    ohlcv2 = ftx.fetch_ohlcv(symbol=pair, timeframe='1d', since=since, limit=limit)\r\n    ohlcv = ohlcv1 + ohlcv2\r\n    return ohlcv\r\n\r\ndef ohlcv(dt, pair, period='1d'):\r\n    ohlcv = []\r\n    limit = 1000\r\n    if period == '1m':\r\n        limit = 720\r\n    elif period == '1d':\r\n        limit = 365\r\n    elif period == '1h':\r\n        limit = 24\r\n    elif period == '5m':\r\n        limit = 288\r\n    for i in dt:\r\n        start_dt = datetime.strptime(i, \"%Y%m%d\")\r\n        since = calendar.timegm(start_dt.utctimetuple())*1000\r\n        if period == '1d':\r\n            ohlcv.extend(min_ohlcv(start_dt, pair, limit))\r\n        else:\r\n            ohlcv.extend(ftx.fetch_ohlcv(symbol=pair, timeframe=period, since=since, limit=limit))\r\n    df = pd.DataFrame(ohlcv, columns = ['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\r\n    df['Time'] = [datetime.fromtimestamp(float(time)/1000) for time in df['Time']]\r\n    df['Open'] = df['Open'].astype(np.float64)\r\n    df['High'] = df['High'].astype(np.float64)\r\n    df['Low'] = df['Low'].astype(np.float64)\r\n    df['Close'] = df['Close'].astype(np.float64)\r\n    df['Volume'] = df['Volume'].astype(np.float64)\r\n    df.set_index('Time', inplace=True)\r\n    return df\r\n\r\n\r\nstart_day = \"20200119\"\r\nstart_dt = datetime.strptime(start_day, \"%Y%m%d\")\r\nend_day = \"20210419\"\r\nend_dt = datetime.strptime(end_day, \"%Y%m%d\")\r\ndays_num = (end_dt - start_dt).days + 1\r\ndatelist = [start_dt + timedelta(days=x) for x in range(days_num)]\r\ndatelist = [date.strftime(\"%Y%m%d\") for date in datelist]\r\n\r\ndf = ohlcv(datelist, 'BTC-PERP', '1d')\r\n\r\n\r\ndf.to_csv('data/btc_price.csv')\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9037/comments",
    "author": "didobagi",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-20T09:33:29Z",
        "body": "It's a late response, but have to close the issue, as it's not possible to answer the question. \r\nlet us know if you face any issues, but in a fully explanatory manner with details and specific question what you want to achieve."
      }
    ]
  },
  {
    "number": 9024,
    "title": "ZB exchange wss path changed",
    "created_at": "2021-04-19T12:01:18Z",
    "closed_at": "2021-04-19T12:02:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9024",
    "body": "Don't know what's the reason but they specify api.zb.today as their base API url now. Using api.zb.cn(current URL) throw TLS certificate error.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9024/comments",
    "author": "sobelman",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-19T21:45:49Z",
        "body": "That can happen with the exchange addresses occasionally, most often upgrading to the most recent version of CCXT will resolve the issue. Thx for your feedback!"
      }
    ]
  },
  {
    "number": 8957,
    "title": "How long to create an order ",
    "created_at": "2021-04-13T12:35:10Z",
    "closed_at": "2022-07-19T18:33:08Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8957",
    "body": "Hello,\r\n\r\nI find your library very useful.\r\n\r\nBut with PHP between the moment I open a PHP page that will create an order and where it appear on Binance it takes 3 seconds.\r\nIt may seem fast but on Binance Future with a leverage level these 3 seconds can make you lose money.\r\n\r\nDo these 3 seconds come more from my linux machine?\r\nFrom PHP ? Unoptimized language \r\nOr Binance? Server time response.\r\n\r\nThank you ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8957/comments",
    "author": "zed2zed",
    "comments": [
      {
        "user": "diwenshi61",
        "created_at": "2021-04-17T19:33:57Z",
        "body": "This can depend on a variety of factors. Depending on your internet connection and your location relative to Binance servers, the round-trip latency may be very high. Note that depending on your location, the Binance matching engine may have significantly higher latency than the Binance website. In general you can assume that processor time on your end << network latency."
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-19T18:33:08Z",
        "body": "A bit late reply here, but for any/future readers :\r\n- when you start your script, the initial moment of market-loading takes several seconds (1+) typically, depending the exchange and how many markets it is loading. so, even if you were at fastest machine with faster internet, such code will always take more than regular call. try to load markets at first _(if you dont call it manually, it still happens in the backgrounds in first unified method)_\r\n```\r\n$binance = new ccxt.binance();\r\n$binance->load_markets();\r\n$first_time = $binance->milliseconds();\r\n$order = $binance->create_order (...);\r\nprint ( \"FIRST STOP:\", $start_time - $binance->milliseconds() );\r\n```\r\n\r\nand in such case, you will see that after markets are loaded, then every next call happen with their natural speed. \r\n\r\nLet us know if you experience any further issue in CCXT."
      }
    ]
  },
  {
    "number": 8936,
    "title": "Add watch order websocket",
    "created_at": "2021-04-12T06:13:34Z",
    "closed_at": "2021-04-12T06:17:06Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8936",
    "body": "Hello,\r\nI'm a member of ccxt pro.\r\n\r\nDo you have any plan to add watch order websocket ? I can become a sponsor to accelerate if you guy have a plan soon.\r\n\r\nThank you so much for making a great library and all you do for community.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8936/comments",
    "author": "dangkhoaest",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-12T06:17:06Z",
        "body": "@dangkhoaest hi! Yes, we do have plans for `watchOrder`, though it is not the topmost priority at this time. In any case, we will add it as soon as we can. In the meantime, you can just filter the response returned from `watchOrders` by order id or by any other criteria to get your specific order (the same result as `watchOrder` would give you). Let us know if that does not answer your question. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 8921,
    "title": "Coinbasepro watch_orders() fails with TypeError: 'Unicode-objects must be encoded before hashing'",
    "created_at": "2021-04-10T05:03:12Z",
    "closed_at": "2021-04-10T08:26:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8921",
    "body": "I'm having this problem only with coinbasepro and only in watch_orders(). It works with ftx, and both watch_orderbook and watch_orders work with coinbasepro. My keys and passphrase are stored as strings, and they are being converted to bytes at some point before reaching hmac()\r\n\r\n \r\n- OS: macOS Catalina\r\n- Programming Language version: Python 3.8.6\r\n- CCXT version :ccxt==1.45.74, ccxtpro==0.6.33\r\n-\r\n\r\n```\r\ndef listen(self, callback=(lambda x: None)):\r\n        loop = asyncio.get_event_loop()\r\n        loop.create_task(self.watch_orderbook(callback))\r\n        loop.create_task(self.watch_orders(callback))\r\n        loop.create_task(self.slowly_watch_balance())\r\n\r\n```\r\nI also modified the hmac method for some debugging output, which indicates the string and request are bytes\r\n```\r\n@staticmethod\r\n    def hmac(request, secret, algorithm=hashlib.sha256, digest='hex'):\r\n        print('SECRET IS ' + str(secret))\r\n        print('REQUEST IS ' + str(request))\r\n        print('ALGORITHM IS ' + str(algorithm))\r\n        h = hmac.new(secret, request, algorithm)\r\n        binary = h.digest()\r\n        if digest == 'hex':\r\n            return Exchange.binary_to_base16(binary)\r\n        elif digest == 'base64':\r\n            return Exchange.binary_to_base64(binary)\r\n        return binary\r\n```\r\n\r\n```\r\nSECRET IS b'\\xd3\\xe1!...omitted...x9a'\r\nREQUEST IS b'16...omitted...86GET/accounts'\r\nALGORITHM IS <built-in function openssl_sha256>\r\n```\r\n\r\nThe traceback for the error is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/nnsk/Desktop/scrypto/addthistowrappers.py\", line 130, in watch_orders\r\n    self.orders = await self.client.watch_orders(symbol=self.symbol, limit=200)\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 101, in watch_orders\r\n    authentication = self.authenticate()\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 46, in authenticate\r\n    signature = self.hmac(payload, self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxt/base/exchange.py\", line 1112, in hmac\r\n    h = hmac.new(secret, request, algorithm)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 153, in new\r\n    return HMAC(key, msg, digestmod)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 88, in __init__\r\n    self.update(msg)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 96, in update\r\n    self.inner.update(msg)\r\nTypeError: Unicode-objects must be encoded before hashing\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8921/comments",
    "author": "nanaknihal",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-04-10T06:43:24Z",
        "body": "you need to update to the latest version of ccxtpro, this error has already been fixed"
      },
      {
        "user": "frosty00",
        "created_at": "2021-04-10T06:44:08Z",
        "body": "my current version is `0.6.47`"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-10T08:26:42Z",
        "body": "@nanaknihal please, let us know if you have the same issue with the most recent version of CCXT + CCXT Pro. Feel free to reopen it or just ask further questions if any."
      },
      {
        "user": "nanaknihal",
        "created_at": "2021-04-10T20:47:50Z",
        "body": "Thanks, it worked after updating"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-10T20:49:34Z",
        "body": "@nanaknihal thx for reporting back!"
      }
    ]
  },
  {
    "number": 8842,
    "title": "fetch_close_orders returns only one order for kucoin",
    "created_at": "2021-04-07T14:30:34Z",
    "closed_at": "2022-07-20T09:05:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8842",
    "body": "Thanks for maintaining a great package. Problem in kucoin when fetching closed orders. API returns only 1 order\r\n\r\n- OS: macOS Catalina 10.15.7\r\n- Programming Language version: Python\r\n- CCXT version: 1.46.50\r\n\r\n```\r\nKEY = \"\"\r\nSECRET = \"\"\r\nDAYS = 30\r\n\r\nfrom ccxt import kucoin\r\nimport time\r\n\r\nexchange = kucoin(KEY, SECRET)\r\nsince = time.time()*1000 - 86400*DAYS*1000\r\norders = exchange.fetch_close_orders(since=since, limit=100)\r\n\r\nprint(len(orders))  # this will be at most 1, even though I have more than 1 order in the last DAYS\r\n```\r\n\r\n```\r\ncode does not break, but returns only one order when I have more than one\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8842/comments",
    "author": "pablojadz",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-20T09:05:29Z",
        "body": "Late reply here, but I'll add note:\r\n- `fetch_close_orders` doesn't exist. I assume it was a typo mistake in your post (and you meant  `fetch_close**d**_orders`  , and it was not a custom added method in kucoin class.\r\n- even with `fetch_closed_orders`, you should get multiple orders, and not a single. I assume it was temporary issue back in the past, when you opened the issue. Currently, it works as expected and well.\r\nLet us know if you face any issue."
      }
    ]
  },
  {
    "number": 8801,
    "title": "Close position in Hedge mode",
    "created_at": "2021-04-03T08:32:59Z",
    "closed_at": "2021-04-12T19:11:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8801",
    "body": "Hello,\r\n\r\nI want to use Hedge mode with **Binance**.\r\n\r\nIn Hedge mode you can open two opposites positions (BUY and SELL in the same time).\r\nIn Hedge mode in Binance there is a dedicated interface to open orders and another to close them.\r\n\r\nHow do I close a position with CCXT?\r\nIf I use my standard code I get this error \"Order's position side does not match user's setting.\"\r\n\r\n_...\r\n$symbol = \"BTC/USDT\";\r\n$amount=0.001;\r\n$type = 'market';\r\n$side=\"buy\";\r\n$price=null;\r\n$params = array();\r\n$order = $binance->create_order($symbol, $type, $side, $amount, $price, $params);\r\n..._\r\n\r\nIn this code unlike the interface I do not indicate anywhere whether to close or open a position.\r\n\r\nCan you help me ? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8801/comments",
    "author": "zed2zed",
    "comments": [
      {
        "user": "zed2zed",
        "created_at": "2021-04-12T18:46:26Z",
        "body": "I found the solution with these settings\r\nYou have to choose LONG or SHORT.\r\n\r\n$params = array('closePosition' => \"True\",\"positionSide\" => \"LONG\");\r\n\r\nAnd with a strop price :\r\n$params = array('closePosition' => \"True\",\"stopPrice\" => 60000,\"positionSide\" => \"SHORT\");"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-12T19:11:33Z",
        "body": "@zed2zed thanks for your feedback! Pardon for the delays with our replies. Please, don't hesitate if anything."
      }
    ]
  },
  {
    "number": 8799,
    "title": "Phemex Fetch Balance 'decimal.DivisionImpossible'",
    "created_at": "2021-04-02T21:25:10Z",
    "closed_at": "2022-01-31T18:51:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8799",
    "body": "- OS: macOS Catalina\r\n- Programming Language version: Python 3.7.7 and Python 3.8.2\r\n- CCXT version: 1.39.1 and 1.45.98\r\n\r\n###I'm just trying to call fetch balance with the Phemex integration###\r\nconfig = {'credentials': ...}\r\nexchange = ccxt.phemex(config=config)\r\n\r\n###The Error###\r\nException has occurred: InvalidOperation       (note: full exception trace is shown but execution is paused at: _run_module_as_main)\r\n[<class 'decimal.DivisionImpossible'>]\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/decimal_to_precision.py\", line 74, in decimal_to_precision\r\n    missing = abs(dec) % precision_dec\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/phemex.py\", line 706, in fetch_currencies\r\n    maxAmount = float(self.decimal_to_precision(maxValueEv * precision, ROUND, 0.00000001, self.precisionMode))\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/base/exchange.py\", line 1373, in load_markets\r\n    currencies = self.fetch_currencies()\r\n  File \"/usr/local/lib/python3.7/site-packages/ccxt/phemex.py\", line 1362, in fetch_balance\r\n    self.load_markets()\r\n  File \"/workspace/app/integrations/ccxt.py\", line 85, in authenticate\r\n    self.client.fetch_balance()\r\n  File \"/workspace/app/integrations/interfaces.py\", line 43, in __init__\r\n    self.authenticate()\r\n  File \"/workspace/app/integrations/ccxt.py\", line 64, in __init__\r\n    super(CCXTService, self).__init__(user_integration, **kwargs)\r\n  File \"/workspace/app/integrations/ccxtimpl/phemex.py\", line 16, in __init__\r\n    super().__init__(self.EXCHANGE_ID, user_integration, **kwargs)\r\n  File \"/workspace/personal_sandbox.py\", line 12, in <module>\r\n    integration = PhemexService(ui)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 193, in _run_module_as_main (Current frame)\r\n    \"__main__\", mod_spec)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8799/comments",
    "author": "taylornielson",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-02T21:28:47Z",
        "body": "@taylornielson please, paste your verbose output from this code using the most recent version of CCXT (1.45.99+):\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.phemex({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n})\r\nmarkets = exchange.load_markets()\r\nexchange.verbose = True\r\nbalance = exchange.fetch_balance()\r\nprint('---------------------------------------------------------------')\r\npprint(balance)\r\n```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-01-31T18:51:27Z",
        "body": "Hello @taylornielson \r\nI can't reproduce this issue anymore, so I believe it's safe to assume that was fixed in the meantime. For that reason, I'm closing it but feel free to reopen it again if needed."
      }
    ]
  },
  {
    "number": 8739,
    "title": "Is it safe to use prices from the orderdepths directly in regard of price precision",
    "created_at": "2021-03-28T20:10:02Z",
    "closed_at": "2021-03-28T20:11:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8739",
    "body": "OS: Windows Server 2019 Datacenter\r\nProgramming Language version: Node.js 15.3.0\r\nCCXT version: 1.38.89\r\nExchange: All Exchanges\r\nMethod: precision and limits\r\n\r\nHello!\r\n\r\nI have a question about the precision when it comes to prices for a symbol when creating limit and marketorders.\r\n\r\nFor example we can get the orderbook like below:\r\n```\r\n(async () => {\r\nconst exchange = new ccxt.bitfinex({ enableRateLimit: true, agent, 'timeout': 10000 });\r\nconst orderbook = await exchange.fetchOrderBook(\"ETH/BTC\", 5);\r\nconsole.log(orderbook);\r\n})()\r\n```\r\nThis gives a structure like this with price and volume per orderdepth:\r\n```\r\n    [ 0.030365, 7.76077035 ],\r\n    [ 0.030366, 7 ],\r\n    [ 0.030368, 0.069 ],\r\n    [ 0.03037, 1.19718266 ],\r\n    [ 0.030376, 12 ]\r\n```\r\n\r\nMy question is how safe it would be to directly just use the price from any of the orderdepths when `createOrder(...)`\r\nWhat I mean, would it be safe to just take a price without using the `exchange.decimalToPrecision` to round it to correct precision.\r\n\r\nWould it be safe to just take the prices from the orderdepths from all exchanges or should one anyway use `exchange.decimalToPrecision` function for safety?\r\n\r\nThank you!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8739/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-03-28T20:11:39Z",
        "body": "@jackpotcityco Hi! It should be safe to use those prices directly, CCXT will format those values according to exchange precision before sending them out. Let us know if you run into any issues with that."
      },
      {
        "user": "jackpotcityco",
        "created_at": "2021-03-28T20:15:02Z",
        "body": "Hi! Thank you, that is great. Then I will only focus on the precision for the amounts then.\r\n\r\nThank you for the help!"
      }
    ]
  },
  {
    "number": 8694,
    "title": "Maximum Data Per Symbol Prior To Fetch_OHLCV?",
    "created_at": "2021-03-22T13:25:53Z",
    "closed_at": "2022-07-19T17:06:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8694",
    "body": "I'm attempting to pull the maximum amount of data for a number of symbols from bittrex which seems to offer the most historical data of the available exchanges. I'm encountering a strange problem with altcoins like '4ART/BTC' for example. When I pull 3 weeks worth of daily data it works fine. However if I attempt to set the start date to something like 1/1/2017 I get a completely empty dataframe instead of the maximum amount of data.\r\n\r\nHow can I avoid that? I simply need to pull the maximum amount of data for each symbol in the exchange. Test code below. If I use 10 or 20 weeks as the param it works. But 52 weeks or more returns an empty df.\r\n\r\nSo is it possible to query the maximum amount of available data prior to doing a fetch_ohlcv?\r\n\r\n```\r\nfrom datetime import datetime, date\r\nfrom dateutil.relativedelta import relativedelta\r\nimport os\r\nimport pandas as pd\r\nimport numpy as np\r\nimport ccxt\r\nfrom datetime import datetime as dt\r\nimport calendar\r\n\r\ndebug = True\r\nexchange = ccxt.bittrex({'enableRateLimit': True})\r\ndata_path = '/Users/xxxxx/my_path/'\r\n\r\ndef min_ohlcv(start, pair, limit):\r\n    # UTC native object\r\n    since = calendar.timegm(start.utctimetuple()) * 1000\r\n    ohlcv1 = exchange.fetch_ohlcv(symbol=pair, timeframe='1m', since=since, limit=limit)\r\n    ohlcv2 = exchange.fetch_ohlcv(symbol=pair, timeframe='1m', since=since, limit=limit)\r\n    ohlcv = ohlcv1 + ohlcv2\r\n    return ohlcv\r\n\r\ndef ohlcv(start, pair, period='1d'):\r\n    ohlcv = []\r\n    limit = 1000\r\n    if period == '1m':\r\n        limit = 720\r\n    elif period == '1d':\r\n        limit = 365\r\n    elif period == '1h':\r\n        limit = 24\r\n    elif period == '5m':\r\n        limit = 288\r\n    for i in start:\r\n        start_dt = datetime.strptime(i, \"%Y%m%d\")\r\n        since = calendar.timegm(start_dt.utctimetuple()) * 1000\r\n        if period == '1m':\r\n            ohlcv.extend(min_ohlcv(start_dt, pair, limit))\r\n        else:\r\n            ohlcv.extend(exchange.fetch_ohlcv(symbol=pair, timeframe=period, since=since, limit=limit))\r\n    if period == '1d':\r\n        df = pd.DataFrame(ohlcv, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])\r\n        df['Date'] = [datetime.fromtimestamp(float(time) / 1000).strftime('%m/%d/%Y') for time in df['Date']]\r\n    else:\r\n        df = pd.DataFrame(ohlcv, columns=['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\r\n        df['Time'] = [datetime.fromtimestamp(float(time) / 1000) for time in df['Time']]\r\n\r\n    df['Open'] = df['Open'].astype(np.float64)\r\n    df['High'] = df['High'].astype(np.float64)\r\n    df['Low'] = df['Low'].astype(np.float64)\r\n    df['Close'] = df['Close'].astype(np.float64)\r\n    df['Volume'] = df['Volume'].astype(np.float64)\r\n    if period == '1d':\r\n        df.set_index('Date', inplace=True)\r\n    else:\r\n        df.set_index('Time', inplace=True)\r\n    return df\r\n\r\n\r\ndef fetch_data(coin, weeks = 52):\r\n    step_back_days = dt.today().weekday()  # it's supposed to start Mondays\r\n    step_back_days += (weeks * 7)\r\n    start_date = dt.today() - relativedelta(days=step_back_days)\r\n    current_week = \"{}-{}\".format(start_date.strftime(\"%Y\"), start_date.isocalendar()[1])\r\n    print(\"Starting at week # {}...\".format(current_week))\r\n\r\n    midnight = dt.combine(start_date, dt.min.time())\r\n    from_date = (midnight - relativedelta(days=step_back_days)).strftime('%Y%m%d')\r\n    # print('From date: {}'.format(from_date))\r\n    from_dt = [from_date]\r\n\r\n    ohlcv_file_name = \"%s_%s.%s\" % (coin.replace('/', '_'), datetime.today().isocalendar()[1], 'csv')\r\n    fullpath = '{}{}'.format(data_path, ohlcv_file_name)\r\n\r\n    if os.path.exists(fullpath):\r\n        os.remove(fullpath)\r\n\r\n    if debug:\r\n        print('\\nFetching daily data for {} starting on {}...'.format(coin, start_date.strftime('%Y-%m-%d')))\r\n    df_symbol = ohlcv(from_dt, coin, '1d')\r\n    if debug:\r\n        print('Retrieved {} days:'.format(len(df_symbol)))\r\n    if not len(df_symbol):\r\n        if debug:\r\n            print('{} only has no data - skipping...'.format(coin))\r\n        if os.path.exists(fullpath):\r\n            os.remove(fullpath)\r\n    if debug:\r\n        print(df_symbol.tail(7))\r\n\r\n    df_symbol.to_csv(fullpath, index=True)\r\n\r\nfetch_data('4ART/BTC', 52)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8694/comments",
    "author": "mmehrle",
    "comments": [
      {
        "user": "mmehrle",
        "created_at": "2021-03-22T14:53:32Z",
        "body": "Okay, I just figured out that when I remove the start date and the limit it pulls the maximum data:\r\n\r\nInstead of:\r\n`ohlcv.extend(exchange.fetch_ohlcv(symbol=pair, timeframe=period, since=since, limit=limit))`\r\n\r\nI used this:\r\n`ohlcv.extend(exchange.fetch_ohlcv(symbol=pair, timeframe=period))`\r\n\r\nBy the way, what does ohlcv.extend do?"
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-19T17:06:31Z",
        "body": "it's a bit old topic, but as OP stated he solved the issue and posted solution himself, the issue is considered as closed.\r\nfeel free to re-open the issue if you face any problems"
      }
    ]
  },
  {
    "number": 8685,
    "title": "What is the difference between currency_to_precision() and amount_to_precision() ?",
    "created_at": "2021-03-21T09:53:35Z",
    "closed_at": "2021-03-21T09:57:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8685",
    "body": "Hello,\r\n\r\nI try to figure out what is the difference between the two because amount is usually an amount of currency on spot markets. So `amount_to_precision()` can be used to properly format the precision of an order but could you tell me when one should use `currency_to_precision()` ?\r\n\r\nThank you,",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8685/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-03-21T09:57:58Z",
        "body": "Hi!\r\n\r\nThe difference is the first argument, one is for market trading precision, the other is for currency funding precision.\r\n\r\n```Python\r\nexchange.amount_to_precision(symbol, amount)  # ccxt uses this for orders\r\n                           # ↓ vs ↑\r\nexchange.currency_to_precision(code, amount)  # ccxt uses this for withdrawals, transfers, loans\r\n```\r\n\r\n```Python\r\nexchange.amount_to_precision('BTC/USDT', 123.4567890)  # format amount to base precision for orders\r\nexchange.currency_to_precision('BTC', 123.4567890)  # format to precision for withdrawals, transfers, loans\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 8516,
    "title": "Difficulties pulling reliable daily closing data",
    "created_at": "2021-02-24T21:55:57Z",
    "closed_at": "2022-07-19T16:30:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8516",
    "body": "I was having issues with pulling daily closing data. Every time I ran it I got different results. Eventually I thought of setting the from_date to midnight the previous day and now it seems to be consistent. See the test below:\r\n\r\n```\r\nfrom datetime import datetime, date, timedelta\r\nfrom dateutil.relativedelta import relativedelta\r\nimport pandas as pd\r\nimport numpy as np\r\nimport calendar\r\nimport ccxt\r\n\r\nsymbols = ['AAVE/BTC']\r\nexchange = ccxt.binance()\r\n\r\ndef min_ohlcv(dt, pair, limit):\r\n    # UTC native object\r\n    since = calendar.timegm(dt.utctimetuple())*1000\r\n    ohlcv1 = exchange.fetch_ohlcv(symbol=pair, timeframe='1m', since=since, limit=limit)\r\n    ohlcv2 = exchange.fetch_ohlcv(symbol=pair, timeframe='1m', since=since, limit=limit)\r\n    ohlcv = ohlcv1 + ohlcv2\r\n    return ohlcv\r\n\r\ndef ohlcv(dt, pair, period='1d'):\r\n    ohlcv = []\r\n    limit = 1000\r\n    if period == '1m':\r\n        limit = 720\r\n    elif period == '1d':\r\n        limit = 365\r\n    elif period == '1h':\r\n        limit = 24\r\n    elif period == '5m':\r\n        limit = 288\r\n    for i in dt:\r\n        start_dt = datetime.strptime(i, \"%Y%m%d\")\r\n        since = calendar.timegm(start_dt.utctimetuple())*1000\r\n        if period == '1m':\r\n            ohlcv.extend(min_ohlcv(start_dt, pair, limit))\r\n        else:\r\n            ohlcv.extend(exchange.fetch_ohlcv(symbol=pair, timeframe=period, since=since, limit=limit))\r\n    if period == '1d':\r\n        df = pd.DataFrame(ohlcv, columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])\r\n        df['Date'] = [datetime.fromtimestamp(float(time)/1000).strftime('%m/%d/%Y') for time in df['Date']]\r\n    else:\r\n        df = pd.DataFrame(ohlcv, columns = ['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\r\n        df['Time'] = [datetime.fromtimestamp(float(time)/1000) for time in df['Time']]\r\n    \r\n    df['Open'] = df['Open'].astype(np.float64)\r\n    df['High'] = df['High'].astype(np.float64)\r\n    df['Low'] = df['Low'].astype(np.float64)\r\n    df['Close'] = df['Close'].astype(np.float64)\r\n    df['Volume'] = df['Volume'].astype(np.float64)\r\n    if period == '1d':\r\n        df.set_index('Date', inplace=True)\r\n    else:\r\n        df.set_index('Time', inplace=True)\r\n    return df\r\n\r\ndays = 120\r\ntoday = datetime.today()\r\nmidnight = datetime.combine(today, datetime.min.time())\r\nfrom_date = (midnight - relativedelta(days=days)).strftime('%Y%m%d')\r\n\r\nprint('From date: {}'.format(from_date))\r\ndt = [from_date]\r\n\r\nprices = pd.DataFrame()\r\nfor symbol in symbols:\r\n    df_symbol = ohlcv(dt, symbol, '1d')\r\n    prices[symbol] = df_symbol['Close']\r\n\r\n#clip last row\r\nprices = prices[:-1]\r\n    \r\nprint(prices.tail())\r\nprint('Length: {} days.'.format(len(prices)))\r\n```\r\n\r\nThis looks correct to me and the output is now consistent. But I'd really appreciate it if someone with experience in pulling daily crypto closing data would confirm it. Thanks in advance.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8516/comments",
    "author": "mmehrle",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-19T16:30:04Z",
        "body": "I have tested and can't confirm that binance's fetchOHLCV misbehaves in any manner. It's impossible to say how your snippet misbehaved, unless you provide the script that misbehaved. If you have a chance, please that script which misbehaved, so we can reproduce the issue. Otherwise, with current code, I can't find its misbehavior.\r\nFeel free to post a follow-up."
      }
    ]
  },
  {
    "number": 8515,
    "title": "Currencies precision returning None [Binance, BitMEX]",
    "created_at": "2021-02-24T19:55:08Z",
    "closed_at": "2021-02-24T20:10:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8515",
    "body": "- OS: Linux Ubuntu 18.04 LTS\r\n- Programming Language version: Python 3.9.1\r\n- CCXT version: 1.42.29\r\n\r\nWhen calling for the loaded currencies, the precision is returning None;\r\n```\r\nself._client.currencies.items()\r\n```\r\n\r\n```\r\n{'id': 'AAVE', 'numericId': None, 'code': 'AAVE', 'precision': None}\r\n```\r\n\r\nI think this started from around  1.42.18\r\nTested on Binance spot and BitMEX\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8515/comments",
    "author": "cjdsellers",
    "comments": [
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T19:57:22Z",
        "body": "When running 1.42.18\r\n\r\n```\r\n{'id': 'AAVE', 'numericId': None, 'code': 'AAVE', 'precision': 8}\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:02:07Z",
        "body": "@cjdsellers please, check with the most recent version:\r\n\r\n```shell\r\n~/ccxt $ python3 examples/py/cli.py binance currency AAVE\r\nPython v3.8.2\r\nCCXT v1.42.29\r\n{'code': 'AAVE', 'id': 'AAVE', 'numericId': None, 'precision': 8}\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({'enableRateLimit': True})\r\nmarkets = exchange.load_markets()\r\ncurrency = exchange.currency('AAVE')\r\nprint(currency)\r\n```"
      },
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T20:03:56Z",
        "body": "Could be something in my code because I have a similar script to the above and thats working.\r\n\r\nShould a precision ever return None though? Below is latest for BitMEX\r\n\r\n```\r\n    \"TRX\": {\r\n        \"code\": \"TRX\",\r\n        \"id\": \"TRX\",\r\n        \"numericId\": null,\r\n        \"precision\": 1.0\r\n    },\r\n    \"UNI\": {\r\n        \"code\": \"UNI\",\r\n        \"id\": \"UNI\",\r\n        \"numericId\": null,\r\n        \"precision\": null\r\n    },\r\n    \"USD\": {\r\n        \"code\": \"USD\",\r\n        \"id\": \"USD\",\r\n        \"numericId\": null,\r\n        \"precision\": 0.01\r\n    },\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:09:09Z",
        "body": "@cjdsellers that is possible, if there's no active market with the AAVE currency or the UNI currency to determine precision from there."
      },
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T20:09:37Z",
        "body": "I mean for `UNI` as above"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:09:52Z",
        "body": "@cjdsellers it's the same for UNI."
      },
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T20:10:31Z",
        "body": "Ok thanks for your help. I'll make some changes to handled these cases.\r\n\r\nCheers for the immediate support!"
      }
    ]
  },
  {
    "number": 8503,
    "title": "Error 'finance' object has no attribute 'amount_to_lots'",
    "created_at": "2021-02-22T19:18:15Z",
    "closed_at": "2021-02-22T19:19:41Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8503",
    "body": "- OS: running in docker file using image `python:3`\r\n- Programming Language version: running in docker file using image `python:3`\r\n- CCXT version: 1.42.18\r\n\r\n```\r\n def place_order(self, order, ticker):\r\n        try:\r\n            # load order info\r\n            symbol = order.symbol\r\n            bid, ask = ticker['bid'], ticker['ask']\r\n            buy = order.buy  # boolean representing buy/sell\r\n\r\n            exchange = load_exchange(order.exchange)\r\n            if buy:\r\n                if order.exchange == 'binance':\r\n                    price = float(order.buy_max)\r\n                elif order.exchange == 'bittrex':\r\n                    price = exchange.amount_to_precision(ask * 1.05)\r\n                order.amount = self.config.btc / price\r\n            else:  # sell\r\n                price = bid\r\n                revenue = order.amount * price\r\n                revenue -= order.amount * order.bought_at\r\n                logging.info(\"bought at: {0} - sold at {1}\".format(order.bought_at, price))\r\n                logging.info(\"total revenue of order: {0}\".format(revenue))\r\n\r\n            logging.info('amount: {0}'.format(order.amount))\r\n            amount = exchange.amount_to_lots(symbol, order.amount)\r\n            logging.info('amount(lots): {0}'.format(amount))\r\n            self.create_order_on_market(buy, order.exchange, symbol, price, amount)\r\n        except Exception as e:\r\n            logging.error(e)\r\n            self.pushover.send_pushover(\r\n                \"{0} order failed for {1} on {2} with error {3}\".format(\r\n                    'Buy' if buy else 'Sell', order.coin, order.exchange, e\r\n                )\r\n            )\r\n```\r\n```\r\n2021-02-22T19:06:02.159814831Z ERROR:root:'binance' object has no attribute 'amount_to_lots'\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8503/comments",
    "author": "dantheman0207",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-22T19:19:40Z",
        "body": "@dantheman0207 change `amount_to_lots` → `amount_to_precision` in your code. Let us know if that does not help."
      },
      {
        "user": "dantheman0207",
        "created_at": "2021-02-22T19:26:46Z",
        "body": "Thanks for the quick reply! I assume this happens a lot :)\r\nThat fixed it."
      }
    ]
  },
  {
    "number": 8492,
    "title": "pip install ccxt failed => error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1",
    "created_at": "2021-02-20T21:55:11Z",
    "closed_at": "2021-02-20T22:20:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8492",
    "body": "I tried to install ccxt on Ubuntu 20.10 (GNU/Linux 5.8.0-1013-raspi armv7l) and go this error:\r\n\r\n```\r\nERROR: Command errored out with exit status 1:\r\n     command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-6eg7h048\r\n         cwd: /tmp/pip-install-wptrvtsv/pycares/\r\n    Complete output (73 lines):\r\n      ERROR: Command errored out with exit status 1:\r\n       command: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-iv1tnu4e\r\n           cwd: /tmp/pip-wheel-9vn7c6c_/cffi/\r\n      Complete output (36 lines):\r\n      running bdist_wheel\r\n      running build\r\n      running build_py\r\n      creating build\r\n      creating build/lib.linux-armv7l-3.8\r\n      creating build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/backend_ctypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/recompiler.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cparser.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/ffiplatform.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/model.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_gen.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/error.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/verifier.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/lock.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/api.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cffi_opcode.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/__init__.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/setuptools_ext.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_cpy.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/commontypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/pkgconfig.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_include.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/parse_c_type.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_embedding.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_errors.h -> build/lib.linux-armv7l-3.8/cffi\r\n      running build_ext\r\n      building '_cffi_backend' extension\r\n      creating build/temp.linux-armv7l-3.8\r\n      creating build/temp.linux-armv7l-3.8/c\r\n      arm-linux-gnueabihf-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DUSE__THREAD -DHAVE_SYNC_SYNCHRONIZE -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python3.8 -c c/_cffi_backend.c -o build/temp.linux-armv7l-3.8/c/_cffi_backend.o\r\n      c/_cffi_backend.c:15:10: fatal error: ffi.h: No such file or directory\r\n         15 | #include <ffi.h>\r\n            |          ^~~~~~~\r\n      compilation terminated.\r\n      error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n      ----------------------------------------\r\n      ERROR: Failed building wheel for cffi\r\n    ERROR: Failed to build one or more wheels\r\n    Traceback (most recent call last):\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 128, in fetch_build_egg\r\n        subprocess.check_call(cmd)\r\n      File \"/usr/lib/python3.8/subprocess.py\", line 364, in check_call\r\n        raise CalledProcessError(retcode, cmd)\r\n    subprocess.CalledProcessError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    \r\n    The above exception was the direct cause of the following exception:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-wptrvtsv/pycares/setup.py\", line 15, in <module>\r\n        setup(name             = 'pycares',\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 162, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 157, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 699, in fetch_build_eggs\r\n        resolved_dists = pkg_resources.working_set.resolve(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 779, in resolve\r\n        dist = best[req.key] = env.best_match(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1064, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1076, in obtain\r\n        return installer(requirement)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 758, in fetch_build_egg\r\n        return fetch_build_egg(self, req)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 130, in fetch_build_egg\r\n        raise DistutilsError(str(e)) from e\r\n    distutils.errors.DistutilsError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8492/comments",
    "author": "theMoe",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-20T21:58:45Z",
        "body": "Try `apt install libffi-dev` or `sudo apt install libffi-dev` and then retry to install ccxt."
      },
      {
        "user": "theMoe",
        "created_at": "2021-02-20T22:10:11Z",
        "body": "Thank you very much! It works now."
      }
    ]
  },
  {
    "number": 8468,
    "title": "kucoin fetch_my_trades causes error when since (miliseconds) is no integer",
    "created_at": "2021-02-16T15:45:37Z",
    "closed_at": "2021-02-16T15:48:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8468",
    "body": "- OS: WIN 10\r\n- Programming Language version: python 3.8.7\r\n- CCXT version: 1.41.93\r\n\r\n```\r\nimport ccxt\r\n\r\nkucoin = ccxt.kucoin({\r\n    'apiKey': 'blablabla',\r\n    'secret': 'blablabla',\r\n    'password': 'blablabla',\r\n    'verbose': True})\r\n\r\ntrades = kucoin.fetch_my_trades()\r\n# --> works\r\n\r\nsince = 1613453676299\r\ntrades = kucoin.fetch_my_trades(since=since)\r\n# --> works\r\n\r\nsince = 1613453916819.7798\r\ntrades = kucoin.fetch_my_trades(since=since)\r\n# ccxt.base.errors.BadSymbol: Bad Request\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/Users/Tobias Wolff/PycharmProjects/ccxtpostgres/playground/ccxt_issue.py\", line 19, in <module>\r\n    trades = kucoin.fetch_my_trades(since=since)\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\kucoin.py\", line 1040, in fetch_my_trades\r\n    response = getattr(self, method)(self.extend(request, params))\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 466, in inner\r\n    return entry(_self, **inner_kwargs)\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 491, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 487, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 608, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\kucoin.py\", line 1717, in handle_errors\r\n    self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, message)\r\n  File \"C:\\Users\\Tobias Wolff\\.virtualenvs\\ccxtpostgres\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 505, in throw_exactly_matched_exception\r\n    raise exact[string](message)\r\nccxt.base.errors.BadSymbol: Bad Request\r\n```\r\n\r\nUsing an noninteger since-value (which is often the case if you do calculations like (time.time()- 60 * 60 * 10)*1000 )\r\ncauses the above error. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8468/comments",
    "author": "r4VP4",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-16T15:48:23Z",
        "body": "The value you pass in the `since` argument is expected to be an integer in milliseconds (this is documented throughout the Manual).\r\n\r\nDo this:\r\n\r\n```Python\r\ntrades = kucoin.fetch_my_trades(since=int(since))\r\n```\r\n"
      }
    ]
  },
  {
    "number": 8467,
    "title": "When does actually the watch_ticker function refresh?",
    "created_at": "2021-02-16T14:39:42Z",
    "closed_at": "2021-02-16T14:44:43Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8467",
    "body": "Dear contributor,\r\n\r\nI have gone through the ccxt documentation and the answer to the following question is not clear to me. When the following code line (python) is executed:\r\norder_book = await exchange.watch_order_book(symbol)\r\nevery time the order book for that symbol is updated the function will return the whole new order book. However, if we type the following code line:\r\nticker = await exchange.watch_ticker(symbol)\r\nWhat does actually need to change in the market data so that something is returned in that function?\r\n\r\nThank you very much in advance,\r\n\r\nUnai\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8467/comments",
    "author": "unaiasegi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-16T14:44:43Z",
        "body": "Hi!\r\n\r\nIn general, WS is more about real-time. \r\nYou have two types of data:\r\n\r\n1. real-time fills + real-time orderbooks – this is the first-order data that is used to calculate everything else\r\n2. second-order data (tickers and ohlcvs) that is calculated from first-order data\r\n\r\nChanges on first-order data (1) are delivered as soon as the exchange can.\r\n\r\nIt takes time for the exchange to calculate the statistical second-order data, but you can also calculate it on your own (you don't have to wait for the exchange to do it for you). \r\n\r\nHow frequently to deliver the changes on second-order data (2) – depends on the exchange. Some exchanges will update you in regular intervals (like once or a few times every second), others will update the ticker more frequently. Some exchanges will send you delayed second-order data since it is not considered _\"important\"_ for a real-time trading operation.\r\n\r\nYou should not rely on the speed of tickers or OHLCVs if you wish to stay as close to real-time as possible.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "unaiasegi",
        "created_at": "2021-02-16T15:04:35Z",
        "body": "It does, thank you very much.\r\n\r\nUnai"
      }
    ]
  },
  {
    "number": 8464,
    "title": "cannot fetch with pagination",
    "created_at": "2021-02-15T22:37:05Z",
    "closed_at": "2022-07-19T14:31:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8464",
    "body": "- MacOS\r\n- Python\r\n- latest version of ccxt\r\n\r\nI'm not sure if it's the script in your examples folder, or the module, but I keep getting the message below when fetching with pagination. The weird thing is that **_SOMETIMES_** it works. Is there a better way to do pagination so as to not ever get an error?\r\n\r\n```\r\n<ipython-input-181-ae3d7f2935d0> in scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit)\r\n     28         ohlcv = retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, fetch_since, limit)\r\n     29         # if we have reached the beginning of history\r\n---> 30         if ohlcv[0][0] >= earliest_timestamp:\r\n     31             break\r\n     32         earliest_timestamp = ohlcv[0][0]\r\n\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8464/comments",
    "author": "mrwonderfulness",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-16T14:48:10Z",
        "body": "@mrwonderfulness thx, we will fix the example. Can you share, which exchange it was, or some more details?"
      },
      {
        "user": "mrwonderfulness",
        "created_at": "2021-02-17T00:00:13Z",
        "body": "Yes, that was for Binance... the fetch to csv script from the examples folder. Thanks."
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-19T14:31:07Z",
        "body": "This is an old topic, but just to add note:\r\n- there has not been provided any further follow-ups, and by looking whatever was provided, there is some chance that the error might be coming because there are no items in the timerange you requested , or some argument might have been incorrect.  We dont see what is \"retry_fetch_ohlcv\" method and what it does, so, we might be unable to provide much insights unless we are provided the full path of execution (including the sample code used throughout the execution).\r\nLet us know if you still experience any issue."
      }
    ]
  },
  {
    "number": 8441,
    "title": "Bybit <fetch_open_orders> issue",
    "created_at": "2021-02-10T13:04:50Z",
    "closed_at": "2021-02-10T13:26:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8441",
    "body": "Hi, I am getting some issue with bybit's <fetch_open_orders> function\r\n\r\nthe function returns only 20 orders,\r\nbut I want to get all open order without order ID\r\n\r\nhow can I get all open orders?\r\n\r\nProgramming language version: Python 3.7.5\r\nCCXT version: 1.33.53",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8441/comments",
    "author": "juntaek-test",
    "comments": [
      {
        "user": "juntaek-test",
        "created_at": "2021-02-10T13:27:18Z",
        "body": "I found parameter 'limit'\r\nthx"
      },
      {
        "user": "Gorgias26",
        "created_at": "2023-09-15T12:52:43Z",
        "body": "@juntaek-test  hello you can poste your line, i have same probleme.\r\n\r\nI tested it but it didn't work, I must have made a mistake.\r\n\r\n```\r\n    page_size = 200\r\n    ordres_en_attente = exchange.fetch_open_orders(symbol, {'limit': page_size})\r\n```\r\n\r\n\r\n>   File \"C:\\Users\\Gorgias\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\bybit.py\", line 5682, in fetch_open_orders\r\n>     return self.fetch_unified_account_open_orders(symbol, since, limit, query)\r\n>   File \"C:\\Users\\Gorgias\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\bybit.py\", line 5400, in fetch_unified_account_open_orders\r\n>     return self.parse_orders(data, market, since, limit)\r\n>   File \"C:\\Users\\Gorgias\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 2382, in parse_orders\r\n>     return self.filter_by_symbol_since_limit(results, symbol, since, limit)\r\n>   File \"C:\\Users\\Gorgias\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 3727, in filter_by_symbol_since_limit\r\n>     return self.filter_by_value_since_limit(array, 'symbol', symbol, since, limit, 'timestamp', tail)\r\n>   File \"C:\\Users\\Gorgias\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 1806, in filter_by_value_since_limit\r\n>     entryKeyGESince = (entryKeyValue) and since and (entryKeyValue >= since)\r\n> TypeError: '>=' not supported between instances of 'int' and 'dict'\r\n\r\nif anyone else has the solution, I'll keep testing to see if I find it ^^\r\n\r\nthanks in advance\r\n"
      }
    ]
  },
  {
    "number": 8429,
    "title": "{     \"code\": -2014,     \"msg\": \"API-key format invalid.\" } Binance Postman",
    "created_at": "2021-02-09T08:12:17Z",
    "closed_at": "2021-02-13T18:21:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8429",
    "body": "Hello, i downloaded the binance collection for postman. I was following the tutorial, then got this error for my first GET Account Information request. However the GET server time works, which implies that the collection and environment are well set. I doubled check my API keys and they are correct as well. I'm sure that the problem is with the timestamp. Hope someone had the same problem and fixed it. Thank",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8429/comments",
    "author": "ExpJo",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-09T08:21:49Z",
        "body": "@GaussDeMoivre hi! Are you using CCXT?\r\nYou may want to recreate the api keypair and make sure that you've copied the new keypair correctly. Also, you will need to set up permissions on the keypair."
      },
      {
        "user": "ExpJo",
        "created_at": "2021-02-09T19:17:14Z",
        "body": "> @GaussDeMoivre hi! Are you using CCXT?\r\n> You may want to recreate the api keypair and make sure that you've copied the new keypair correctly. Also, you will need to set up permissions on the keypair.\r\n\r\nHello @kroitor ! I created new keys and copy paste them correctly.I'm still using the Spot Testnet API so there's no permissions to handle. I used Postman so that i wouldn't have to pass through all the programming and could directly use the API, so no i didnt use CCXT.\r\nCould i integrate the CCXT into Postman? "
      },
      {
        "user": "ExpJo",
        "created_at": "2021-02-13T18:21:18Z",
        "body": "I found it, it has to do with the internal clock"
      },
      {
        "user": "mojtabaAmiraslanpour",
        "created_at": "2021-05-24T18:51:14Z",
        "body": "> I found it, it has to do with the internal clock\r\n\r\nI have the same problem, What do you mean by the internal clock?"
      },
      {
        "user": "huiruo",
        "created_at": "2021-12-02T01:43:03Z",
        "body": "> I found it, it has to do with the internal clock\r\n\r\nI have the same problem, What do you mean by the internal clock?"
      },
      {
        "user": "averinpro",
        "created_at": "2021-12-20T11:48:21Z",
        "body": "Did you find how to solve the problem? The error appears from time to time"
      },
      {
        "user": "zgpnuaa",
        "created_at": "2023-06-06T11:39:40Z",
        "body": "If the computer is using a proxy, 'requests_trust_env':True should be added to the config.\r\nMy successful  config is as fellows:\r\n```\r\nexchange = ccxt.binance(config={\r\n    'apiKey': 'XXX',\r\n    'secret': 'XXX',\r\n    'enableRateLimit': True,\r\n    'timeout':100000,\r\n    'requests_trust_env':True,\r\n    'options': {\r\n            'adjustForTimeDifference':True,\r\n        }\r\n}) \r\n```\r\n@mojtabaAmiraslanpour @averinpro "
      }
    ]
  },
  {
    "number": 8423,
    "title": "watchCreateOrder/watchCancelOrder not supported yet?",
    "created_at": "2021-02-08T17:06:45Z",
    "closed_at": "2021-02-08T17:09:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8423",
    "body": "watchCreateOrder/watchCancelOrder is currently not supported for any exchange in ccxt pro?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8423/comments",
    "author": "wunderb1t",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-08T17:09:14Z",
        "body": "Most of the the exchanges don't have the means for placing the orders over WS, so it boils down to `createOrder` + `watchOrders`. In other words, you should be able to watch your orders while they're being created (which is what you want as far as I understand).\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 8411,
    "title": "problem with scrape_candles_to_csv on Binance, missing latest candles. ",
    "created_at": "2021-02-07T18:56:16Z",
    "closed_at": "2021-02-07T20:13:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8411",
    "body": "\r\n- OS: Mac OS Big Sur \r\n- Programming Language version: Python 3.9\r\n- CCXT version: 1.41.51\r\n\r\n```python\r\nscrape_candles_to_csv('ADA_BTC_binance.csv', 'binance', 500, 'ADA/BTC, i, '2020-01-01T00:00:00Z', 1500)\r\n    \r\n```\r\n\r\n```\r\nSaved 2992 candles from 2020-01-29T19:00:00.000Z to 2020-12-28T02:00:00.000Z to ADA_BTC_1h_bitmex.csv```\r\n\r\nUsually before the update it would download till the latest candle, right now it seems that if 1500 candles don't fit, it just stop earlier. \r\nHow can I fix this? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8411/comments",
    "author": "Kalelv45",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-07T19:04:56Z",
        "body": "@Kalelv45 do you have the same issue with the most recent version of the lib? Binance has changed the inner workings of the API recently, and we have pushed some updates."
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T19:07:32Z",
        "body": "I always used this file to import the scrape_candles_to_csv function. \r\n\r\n```python \r\n# -*- coding: utf-8 -*-\r\n\r\nimport os\r\nimport sys\r\nimport csv\r\nimport ccxt \r\n\r\n\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt  # noqa: E402\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\ndef retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, since, limit):\r\n    num_retries = 0\r\n    try:\r\n        num_retries += 1\r\n        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since, limit)\r\n        # print('Fetched', len(ohlcv), symbol, 'candles from', exchange.iso8601 (ohlcv[0][0]), 'to', exchange.iso8601 (ohlcv[-1][0]))\r\n        return ohlcv\r\n    except Exception:\r\n        if num_retries > max_retries:\r\n            raise  # Exception('Failed to fetch', timeframe, symbol, 'OHLCV in', max_retries, 'attempts')\r\n\r\n\r\ndef scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit):\r\n    earliest_timestamp = exchange.milliseconds()\r\n    timeframe_duration_in_seconds = exchange.parse_timeframe(timeframe)\r\n    timeframe_duration_in_ms = timeframe_duration_in_seconds * 1000\r\n    timedelta = limit * timeframe_duration_in_ms\r\n    all_ohlcv = []\r\n    while True:\r\n        fetch_since = earliest_timestamp - timedelta\r\n        ohlcv = retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, fetch_since, limit)\r\n        # if we have reached the beginning of history\r\n        if ohlcv[0][0] >= earliest_timestamp:\r\n            break\r\n        earliest_timestamp = ohlcv[0][0]\r\n        all_ohlcv = ohlcv + all_ohlcv\r\n        #print(len(all_ohlcv), 'candles in total from', exchange.iso8601(all_ohlcv[0][0]), 'to', exchange.iso8601(all_ohlcv[-1][0]))\r\n        # if we have reached the checkpoint\r\n        if fetch_since < since:\r\n            break\r\n    return exchange.filter_by_since_limit(all_ohlcv, since, None, key=0)\r\n\r\n\r\ndef write_to_csv(filename, data):\r\n    with open(filename, mode='w') as output_file:\r\n        csv_writer = csv.writer(output_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\r\n        csv_writer.writerows(data)\r\n\r\n\r\ndef scrape_candles_to_csv(filename, exchange_id, max_retries, symbol, timeframe, since, limit):\r\n    # instantiate the exchange by id\r\n    exchange = getattr(ccxt, exchange_id)({\r\n        'enableRateLimit': True, \r\n        'options': {\r\n        'defaultType': 'future',  # ←-------------- quotes and 'future'\r\n    } # required by the Manual\r\n    })\r\n    # convert since from string to milliseconds integer if needed\r\n    if isinstance(since, str):\r\n        since = exchange.parse8601(since)\r\n\r\n    # preload all markets from the exchange\r\n    #exchange.load_markets()\r\n    # fetch all candles\r\n    ohlcv = scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit)\r\n    # save them to csv file\r\n    write_to_csv(filename, ohlcv)\r\n    print('Saved', len(ohlcv), 'candles from', exchange.iso8601(ohlcv[0][0]), 'to', exchange.iso8601(ohlcv[-1][0]), 'to', filename)\r\n\r\n\r\n ```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-07T19:15:39Z",
        "body": "@Kalelv45 do you have this issue with CCXT 1.41.68?"
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T19:22:01Z",
        "body": "> @Kalelv45 do you have this issue with CCXT 1.41.68?\r\n\r\nyess I do. It stops earlier anyway. Just upgraded from 1.41.51"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-07T19:23:37Z",
        "body": "~@Kalelv45 which timeframe is it?~\r\n\r\nnvm, found `1h` in your message, i will investigate\r\n"
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T19:26:33Z",
        "body": "I have seen that I have copied this file from examples/py/binance-fetch-ohlcv-to-csv.py \r\nwhere the last commit was in April 2020. Maybe is not working anymore? Where can I find the new version of the same file? "
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-07T19:49:47Z",
        "body": "@Kalelv45 i will debug and will get back to you"
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T20:08:54Z",
        "body": "It seems to be a problem that affect only the spot market, on futures, it download the last till the last candle at the present moment. "
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T20:13:53Z",
        "body": "Sorry to have waisted your time, it seems I have solved the problem. Wish you well as always and thanks for your ready hand for help. "
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-07T20:14:42Z",
        "body": "> Sorry to have waisted your time, it seems I have solved the problem. \r\n\r\nPlease, elaborate a bit on the solution, it could help save the time for the other people. How did you fix it?\r\n\r\n"
      },
      {
        "user": "Kalelv45",
        "created_at": "2021-02-07T20:22:10Z",
        "body": "> > Sorry to have waisted your time, it seems I have solved the problem.\r\n> \r\n> Please, elaborate a bit on the solution, it could help save the time for the other people. How did you fix it?\r\n\r\nThe file I shared works fine, I was wrongly importing another one. That didn't for some reason go till the end. If I change future to spot on the file I shared it works flawlessly. "
      }
    ]
  },
  {
    "number": 8396,
    "title": "fetch_deposit_address with network binance php",
    "created_at": "2021-02-04T06:23:26Z",
    "closed_at": "2021-02-04T09:10:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8396",
    "body": "how to get fetch_deposit_address in another network in php?\r\n\r\n```\r\n$data     = [\r\n        'network' => 'TRC20'\r\n    ];\r\n    $response = Binance::fetch_deposit_address( 'USDT' , $data );\r\n```\r\nresponse :\r\n\r\nbinance {\"msg\":\"The deposit has been closed\",\"success\":false}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8396/comments",
    "author": "mahdi4187",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-04T09:10:24Z",
        "body": "1. Make sure to upgrade to version 1.41.60+\r\n2. Fix the arguments in your call:\r\n\r\n```PHP\r\n$exchange = new \\ccxt\\binance([\r\n    'enableRateLimit' => true,\r\n]);\r\n\r\n$params = [\r\n    'network' => 'TRX',\r\n];\r\n$response = $exchange->fetch_deposit_address('USDT', $params);\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 8379,
    "title": "Issue with timestamp parse of data feed needs help",
    "created_at": "2021-02-02T05:15:59Z",
    "closed_at": "2021-02-02T07:42:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8379",
    "body": "Hi,\r\nI have some problems to read the timestamp from the datafeed download from CCXT. No matter what I tried, it can't parse the datetime info.\r\n\r\nPandas code:\r\n\r\n> dataframe = pandas.read_csv(\r\n        datapath,\r\n        skiprows=1,\r\n        header=1,\r\n        date_parser=parsedate,\r\n        parse_dates=True,\r\n        index_col=0,\r\n    )\r\n\r\n\r\n\r\ndata feed format:\r\n>  Timestamp,Open,High,Low,Close,Volume\r\n    1611658800000,32247.2,32249.98,32105.36,32139.29,616.047753\r\n    1611659700000,32139.29,32186.61,31807.19,31968.65,804.456726\r\n    1611660600000,31968.65,32048.88,31733.0,32040.8,680.101376\r\n  \r\nFirstly, pandas default date parser couldn't process it and returned error\r\n```\r\n  dt = tstamp.to_pydatetime()\r\nAttributeError: 'numpy.int64' object has no attribute 'to_pydatetime'\r\n```\r\n\r\nSecondly I defined a parser function but returned error :\r\n```\r\nValueError: year 53041 is out of range\r\n```\r\n\r\n parser function:\r\n\r\n>  def parsedate(timestamp):\r\n    if type(timestamp) is str: timestamp = int(timestamp)  # put up with timestamp being in string format\r\n    if timestamp > 1e10: timestamp // 1000 # put up with timestamp being in microseconds\r\n    return datetime.utcfromtimestamp(float(timestamp)).replace(tzinfo=tz.tzutc())\r\n\r\n\r\n- OS: Mac\r\n- Programming Language version: python3\r\n- CCXT version: newest\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8379/comments",
    "author": "lifengmds",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-02T07:42:28Z",
        "body": "Hi!\r\n\r\nChange your date-parsing to convert milliseconds to datetime:\r\n\r\n```Python\r\ndef parsedate(timestamp):\r\n    return datetime.utcfromtimestamp(timestamp / 1000)\r\n```\r\n\r\nLet us know if that does not help."
      },
      {
        "user": "lifengmds",
        "created_at": "2021-02-03T02:29:17Z",
        "body": "It worked well! thanks!"
      }
    ]
  },
  {
    "number": 8374,
    "title": "'ccxt' has no attribute ...",
    "created_at": "2021-01-31T14:47:44Z",
    "closed_at": "2021-01-31T14:58:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8374",
    "body": "Something wrong, just installed ccxt and tried demo code to print ccxt.version or ccxt.exchanges, but doesn't work\r\n\r\n- OS:\r\n- Programming Language version: python 3.9.1\r\n- CCXT version: ccxt-1.41.31\r\n\r\n```\r\nimport ccxt\r\nprint(ccxt.exchanges) # print a list of all available exchange classes\r\n```\r\n\r\n```\r\nAttributeError: partially initialized module 'ccxt' has no attribute 'version' (most likely due to a circular import)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8374/comments",
    "author": "lifengmds",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-31T14:49:11Z",
        "body": "@lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T14:58:00Z",
        "body": "> @lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)\r\n\r\noh, yes! that's why!!"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T14:58:47Z",
        "body": "> > @lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)\r\n> \r\n> oh, yes! that's why!!\r\n\r\nI should laugh at myself...\r\n"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:06:12Z",
        "body": "> @lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)\r\n\r\nI rename the file , and it's still the same error"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:06:52Z",
        "body": "@lifengmds how do you install it?"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:08:04Z",
        "body": "> @lifengmds how do you install it?\r\n\r\npip3 install ccxt\r\n\r\nRequirement already satisfied: ccxt in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (1.41.31)\r\nRequirement already satisfied: setuptools>=38.5.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (49.2.1)\r\nRequirement already satisfied: yarl==1.1.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (1.1.0)\r\nRequirement already satisfied: requests>=2.18.4 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2.25.1)\r\nRequirement already satisfied: certifi>=2018.1.18 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2020.12.5)\r\nRequirement already satisfied: aiodns<2.1,>=1.1.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2.0.0)\r\nRequirement already satisfied: cryptography>=2.6.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (3.3.1)\r\nRequirement already satisfied: aiohttp<3.8,>=3.7.2 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (3.7.3)\r\nRequirement already satisfied: multidict>=4.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from yarl==1.1.0->ccxt) (5.1.0)\r\nRequirement already satisfied: idna>=2.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from yarl==1.1.0->ccxt) (2.10)\r\nRequirement already satisfied: pycares>=3.0.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiodns<2.1,>=1.1.1->ccxt) (3.1.1)\r\nRequirement already satisfied: async-timeout<4.0,>=3.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.0.1)\r\nRequirement already satisfied: typing-extensions>=3.6.5 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.7.4.3)\r\nRequirement already satisfied: chardet<4.0,>=2.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.0.4)\r\nRequirement already satisfied: attrs>=17.3.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (20.3.0)\r\nRequirement already satisfied: cffi>=1.12 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from cryptography>=2.6.1->ccxt) (1.14.4)\r\nRequirement already satisfied: six>=1.4.1 in /Users/fng/Library/Python/3.9/lib/python/site-packages (from cryptography>=2.6.1->ccxt) (1.15.0)\r\nRequirement already satisfied: pycparser in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from cffi>=1.12->cryptography>=2.6.1->ccxt) (2.20)\r\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from requests>=2.18.4->ccxt) (1.26.2)"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:10:17Z",
        "body": "@lifengmds what's the command you use to test it? What do you see if you run `ls -alh` in the same working directory?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:12:03Z",
        "body": "@lifengmds try this short snippet (run `python3` and copypaste the snippet below):\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\n```"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:21:49Z",
        "body": "> @lifengmds try this short snippet (run `python3` and copypaste the snippet below):\r\n> \r\n> ```python\r\n> import ccxt\r\n> print('CCXT Version:', ccxt.__version__)\r\n> ```\r\n\r\nyes, this works"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:22:22Z",
        "body": "@lifengmds this should work as well as the rest of it:\r\n\r\n```Python\r\nimport ccxt\r\nprint(ccxt.exchanges)\r\n```"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:36:38Z",
        "body": "> @lifengmds this should work as well as the rest of it:\r\n> \r\n> ```python\r\n> import ccxt\r\n> print(ccxt.exchanges)\r\n> ```\r\n\r\nThank you for your help!"
      }
    ]
  },
  {
    "number": 8371,
    "title": "FTX Heartbeat",
    "created_at": "2021-01-30T18:20:11Z",
    "closed_at": "2021-01-30T18:57:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8371",
    "body": "\r\nccxt~=1.40.77\r\npython  = 3.7\r\n\r\nHi \r\nis there any heartbeat method for FTX to check connection is alive or dead ?\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8371/comments",
    "author": "mlshin",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-30T18:57:32Z",
        "body": "@mlshin hi! CCXT is a RESTful lib, everytime it makes a request – there's either a new connection or an old connection is reused. The lifetime of a HTTPs connection is driven by the underlying keepAlive flag.\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 8366,
    "title": "Missing symbols on Binance",
    "created_at": "2021-01-29T17:10:43Z",
    "closed_at": "2021-01-29T17:38:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8366",
    "body": "Hi there,\r\nthere seems to be missing symbols on Binance, specifically running `[s for s in exchange.symbols if 'BTC' in s]` in python returns only `['BTC/BUSD', 'BTC/USDT']`. The same holds for `[s for s in exchange.markets.keys() if 'BTC' in s]`. Other exchanges seem to be ok.\r\n\r\nccxt version: 1.41.19\r\npython: 3.8.7\r\nos: win 10",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8366/comments",
    "author": "LukasUlrych",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:19:25Z",
        "body": "@LukasUlrych hi! Which specific market/symbol is missing?"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:27:14Z",
        "body": "Well, `ADA/BTC`, `ETH/BTC`, `LTC/BTC` etc., pretty much any altcoin vs. BTC. I can see only USDT or BUSD pairs."
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:28:52Z",
        "body": "@kroitor I am not sure whether this is only local issue or not. I tried going back to version 1.41.10 and the symbols are all there. I noticed this after update today."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:31:09Z",
        "body": "@LukasUlrych always use the most recent version and make sure it's the most recent number by printing it in runtime (don't trust the pip output). Let me know if this does not help:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'spot'},  # spot is the default\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'future'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'delivery'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:37:05Z",
        "body": "@kroitor Thank you, it helped! The issue seems to be that running just \r\n```\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True\r\n})\r\n```\r\ndefaults to defaultType = 'future' not defaultType = 'spot'."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:37:59Z",
        "body": "@LukasUlrych ah, i see, hold on, will fix that in 1.41.20."
      }
    ]
  },
  {
    "number": 8343,
    "title": "I want to load some historical data before I watch ?",
    "created_at": "2021-01-25T08:30:47Z",
    "closed_at": "2021-01-25T08:59:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8343",
    "body": "- OS: MacOS\r\n- Programming Language version: node.js 14.x\r\n- CCXT version: 0.5.41\r\n\r\n```\r\n// Download historical data\r\nconst records = await exchange.fetchOHLCV(symbol, period, LIMIT)\r\n\r\n// Save the data inside the CCXT\r\nif (!exchange.ohlcvs[symbol]) {\r\nexchange.ohlcvs[symbol] = {}\r\n}\r\nexchange.ohlcvs[symbol][period] = records\r\n\r\n\r\n// Watch for data updates\r\nawait exchange.watchOHLCV(symbol, period)\r\n```\r\n\r\n```\r\nTypeError: stored.append is not a function (uncaughtException throw 1 times on pid:867)\r\nat binance.handleOHLCV (/home/leanengine/app/node_modules/ccxt.pro/js/binance.js:503:20)\r\nat binance.handleMessage (/home/leanengine/app/node_modules/ccxt.pro/js/binance.js:821:27)\r\nat WsClient.onMessage (/home/leanengine/app/node_modules/ccxt.pro/js/base/Client.js:277:14)\r\nat WebSocket.onMessage (/home/leanengine/app/node_modules/ws/lib/event-target.js:132:16)\r\nat WebSocket.emit (events.js:315:20)\r\nat Receiver.receiverOnMessage (/home/leanengine/app/node_modules/ws/lib/websocket.js:825:20)\r\nat Receiver.emit (events.js:315:20)\r\nat Receiver.dataMessage (/home/leanengine/app/node_modules/ws/lib/receiver.js:437:14)\r\nat /home/leanengine/app/node_modules/ws/lib/receiver.js:394:23\r\nat /home/leanengine/app/node_modules/ws/lib/permessage-deflate.js:308:9\r\nat /home/leanengine/app/node_modules/ws/lib/permessage-deflate.js:387:7\r\nat afterWrite (internal/streams/writable.js:466:5)\r\nat onwrite (internal/streams/writable.js:446:7)\r\nat InflateRaw.afterTransform (internal/streams/transform.js:103:3)\r\nat Zlib.processCallback (zlib.js:587:8)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8343/comments",
    "author": "MiaoXingGua",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-25T08:59:36Z",
        "body": "Please, do not overwrite exchange.ohlcvs this way, cause it will break the inner workings of the lib. It's a complex object, that has a cache inside, as documented in the Manual.\r\n\r\nInstead, do this:\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt.pro')\r\n\r\nasync function main () {\r\n\r\n    const exchange = new ccxt.binance({\r\n        'enableRateLimit': true,\r\n    })\r\n    \r\n    const timeframe = '1m'\r\n    const symbol = 'ETH/BTC'\r\n    \r\n    // Download historical data\r\n    const historical = await exchange.fetchOHLCV(symbol, timeframe)\r\n    \r\n    while (true) {\r\n        try {\r\n            const ohlcvs = await exchange.watchOHLCV(symbol, timeframe)\r\n            // append ohlcvs\r\n            \r\n            for (const ohlcv of ohlcvs) {\r\n                const lastCandle = historical[historical.length - 1]\r\n                if (ohlcv[0] > lastCandle[0]) {\r\n                    historical.push (ohlcv)\r\n                } else if (ohlcv[0] === lastCandle[0]) {\r\n                    historical[historical.length - 1] = ohlcv\r\n                }\r\n            }\r\n\r\n            console.log('\\n===============================================================================')\r\n            console.log('Current time:', exchange.iso8601(exchange.milliseconds ()), symbol, timeframe)\r\n            console.log('-------------------------------------------------------------------------------')\r\n            console.log('Most recent candles:')\r\n            console.log(historical.slice (-5).map (o => exchange.iso8601 (o[0]) + '\\t' + o.slice (1).map (x => x.toFixed (8)).join ('\\t')).join (\"\\n\"))\r\n\r\n        } catch (e) {\r\n            console.log (e.constructor.name, e.message)\r\n            process.exit ()\r\n        }\r\n    }\r\n}\r\n\r\nmain ()\r\n```\r\n\r\nLet us know if that does not answer your question. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 8339,
    "title": "Inconsistent symbol names for Binance Futures",
    "created_at": "2021-01-24T17:00:22Z",
    "closed_at": "2021-01-25T20:58:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8339",
    "body": "\r\n- OS: Linux\r\n- Programming Language version: Python 3.8.6 and Python 3.8.5\r\n- CCXT version: 1.40.83\r\n- \r\nCode:\r\n```\r\nexchange.load_markets()\r\nsymbols = exchange.symbols\r\nprint(symbols)\r\n```\r\nIn my workstation it gives: \r\n```\r\n['1INCHUSDT', 'AAVEUSDT', 'ADAUSDT', 'AKROUSDT', 'ALGOUSDT', 'ALPHAUSDT', 'ATOMUSDT', 'AVAXUSDT', 'AXSUSDT', 'BALUSDT', 'BANDUSDT', 'BATUSDT', 'BCHUSDT', 'BELUSDT', 'BLZUSDT', 'BNBUSDT', 'BTCBUSD', 'BTCUSDT', 'BZRXUSDT', 'CHZUSDT', 'COMPUSDT', 'CRVUSDT', 'CTKUSDT', 'CVCUSDT', 'DASHUSDT', 'DEFIUSDT', 'DOGEUSDT', 'DOTECOUSDT', 'DOTUSDT', 'EGLDUSDT', 'ENJUSDT', 'EOSUSDT', 'ETCUSDT', 'ETHUSDT', 'FILUSDT', 'FLMUSDT', 'FTMUSDT', 'GRTUSDT', 'HNTUSDT', 'ICXUSDT', 'IOSTUSDT', 'IOTAUSDT', 'KAVAUSDT', 'KNCUSDT', 'KSMUSDT', 'LINKUSDT', 'LRCUSDT', 'LTCUSDT', 'MATICUSDT', 'MKRUSDT', 'NEARUSDT', 'NEOUSDT', 'OCEANUSDT', 'OMGUSDT', 'ONTUSDT', 'QTUMUSDT', 'RENUSDT', 'RLCUSDT', 'RSRUSDT', 'RUNEUSDT', 'SKLUSDT', 'SNXUSDT', 'SOLUSDT', 'SRMUSDT', 'STORJUSDT', 'SUSHIUSDT', 'SXPUSDT', 'THETAUSDT', 'TOMOUSDT', 'TRBUSDT', 'TRXUSDT', 'UNIUSDT', 'VETUSDT', 'WAVESUSDT', 'XLMUSDT', 'XMRUSDT', 'XRPUSDT', 'XTZUSDT', 'YFIIUSDT', 'YFIUSDT', 'ZECUSDT', 'ZENUSDT', 'ZILUSDT', 'ZRXUSDT']\r\n\r\n```\r\nBut in the server (with same ccxt version but python 3.8.5) it gives:\r\n\r\n```\r\n['1INCH/USDT', 'AAVE/USDT', 'ADA/USDT', 'AKRO/USDT', 'ALGO/USDT', 'ALPHA/USDT', 'ATOM/USDT', 'AVAX/USDT', 'AXS/USDT', 'BAL/USDT', 'BAND/USDT', 'BAT/USDT', 'BCH/USDT', 'BEL/USDT', 'BLZ/USDT', 'BNB/USDT', 'BTC/BUSD', 'BTC/USDT', 'BZRX/USDT', 'CHZ/USDT', 'COMP/USDT', 'CRV/USDT', 'CTK/USDT', 'CVC/USDT', 'DASH/USDT', 'DEFI/USDT', 'DOGE/USDT', 'DOT/USDT', 'DOTECO/USDT', 'EGLD/USDT', 'ENJ/USDT', 'EOS/USDT', 'ETC/USDT', 'ETH/USDT', 'FIL/USDT', 'FLM/USDT', 'FTM/USDT', 'GRT/USDT', 'HNT/USDT', 'ICX/USDT', 'IOST/USDT', 'IOTA/USDT', 'KAVA/USDT', 'KNC/USDT', 'KSM/USDT', 'LINK/USDT', 'LRC/USDT', 'LTC/USDT', 'MATIC/USDT', 'MKR/USDT', 'NEAR/USDT', 'NEO/USDT', 'OCEAN/USDT', 'OMG/USDT', 'ONT/USDT', 'QTUM/USDT', 'REN/USDT', 'RLC/USDT', 'RSR/USDT', 'RUNE/USDT', 'SKL/USDT', 'SNX/USDT', 'SOL/USDT', 'SRM/USDT', 'STORJ/USDT', 'SUSHI/USDT', 'SXP/USDT', 'THETA/USDT', 'TOMO/USDT', 'TRB/USDT', 'TRX/USDT', 'UNI/USDT', 'VET/USDT', 'WAVES/USDT', 'XLM/USDT', 'XMR/USDT', 'XRP/USDT', 'XTZ/USDT', 'YFI/USDT', 'YFII/USDT', 'ZEC/USDT', 'ZEN/USDT', 'ZIL/USDT', 'ZRX/USDT']\r\n\r\n```\r\nThis is currently breaking my deployment, any idea how to fix?\r\n\r\nEdit:\r\n\r\nAlso on one place it's saying symbol is BTC/USDT and on another place it's saying the symbol is BTCUSDT:\r\n\r\n```\r\n'id': 'BTCUSDT',\r\n\t\t'lowercaseId': 'btcusdt',\r\n\t\t'symbol': 'BTC/USDT',\r\n\t\t'base': 'BTC',\r\n\t\t'quote': 'USDT',\r\n\t\t'baseId': 'BTC',\r\n\t\t'quoteId': 'USDT',\r\n\t\t'info': {\r\n\t\t\t'symbol': 'BTCUSDT',\r\n...\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8339/comments",
    "author": "projenix",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-24T18:19:21Z",
        "body": "Hi!\r\n\r\n> This is currently breaking my deployment, any idea how to fix?\r\n\r\nRun this on both of your machines and paste your runtime versions here please:\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\n```\r\n\r\n"
      },
      {
        "user": "projenix",
        "created_at": "2021-01-25T20:22:58Z",
        "body": "Hey your intuition was correct!\r\n\r\nOn the workstation I've got version: 1.35.72\r\n\r\nWhereas on the server I've got version: 1.40.83\r\n\r\nSo I assume there was a change in symbol notation in CCXT, right? so is that change stable now, should I upgrade and stick to \"AAA/BBB\" notation from now on in all code?\r\n\r\nThanks a lot for your help,"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-25T20:58:26Z",
        "body": "@projenix \r\n\r\n> So I assume there was a change in symbol notation in CCXT, right? \r\n\r\nYes, Binance has updated their API recently.\r\n\r\n> so is that change stable now, should I upgrade and stick to \"AAA/BBB\" notation from now on in all code?\r\n\r\nThe unification of futures is a work in progress, so it may be subject to change, but we will of course do our best to avoid breaking changes, or will announce them beforehand.\r\n\r\nLet us know if that does not answer your question. Feel free to reopen it if needed or just ask further questions if any."
      },
      {
        "user": "projenix",
        "created_at": "2021-01-26T11:19:05Z",
        "body": "@kroitor That does answer my question, thank you very much for your help."
      }
    ]
  },
  {
    "number": 8315,
    "title": "Get date exchange added symbol?",
    "created_at": "2021-01-20T21:45:30Z",
    "closed_at": "2021-01-20T21:48:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8315",
    "body": "I'm looking for a property to know how far back of OHLCV data I can request for a given symbol. Is there one?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8315/comments",
    "author": "bitnom",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-20T21:48:00Z",
        "body": "This specific limitation is not fully unified across the exchanges yet, but we are looking to add it within the `features` interface, as is in this issue: #6772 ← I'd suggest to move the discussion there to keep related things together. We don't have an ETA yet, since this is a work in progress, so we will just start adding these properties one by one to all exchanges soon."
      }
    ]
  },
  {
    "number": 8310,
    "title": "Precision in markets where the buy order is given in quote currency",
    "created_at": "2021-01-19T13:50:26Z",
    "closed_at": "2021-01-19T13:54:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8310",
    "body": "Hello,\r\n\r\nI have a question regarding the market precision dictionary in exchanges where the buy order amount must be provided in quote currency. \r\n\r\nEven if the buy amount must be provided in quote currency, the precision dictionary of these markets does not include the 'cost' key, which is basically the amount in quote currency. They only provide the 'amount' (the amount in base currency) and 'price' keys. Therefore, I do not understand which one should I pick (or transform) to check the precision of the market in quote currency.\r\n\r\nThis problem does not exist in exchanges where every (buy and sell) amount must be provided in base currency as the precision dictionary does include the 'amount' key which is expressed in base currency.\r\n\r\nThank you very much in advance,\r\n\r\nUnai\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8310/comments",
    "author": "unaiasegi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-19T13:54:13Z",
        "body": "Hi!\r\n\r\n> which one should I pick (or transform) to check the precision of the market in quote currency.\r\n\r\nBoth the price and the cost are usually expressed in the same currency, and have the same precision, so you can use the price precision to format your cost.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "unaiasegi",
        "created_at": "2021-01-19T13:56:30Z",
        "body": "It does answer my question, very much appreciated.\r\nGreat job!"
      }
    ]
  },
  {
    "number": 8276,
    "title": "A lot of slippage on market orders without stoploss and take profit params",
    "created_at": "2021-01-14T21:28:06Z",
    "closed_at": "2021-01-19T10:32:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8276",
    "body": "I have a question... im noticing a lot of slippage with my market orders not using stoploss or take profit params. Im just checking the percentage of price vs my entry price, and executing at certain percentage.  Will stop loss and take profit help with slippage to get the exact price I want to execute?\r\n\r\ncurrently Im refreshing every second and executing a market order when percentage hits my targets.\r\nIm using ccxt with phemex.\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8276/comments",
    "author": "adamrg73",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-15T06:23:33Z",
        "body": "> I have a question... im noticing a lot of slippage with my market orders not using stoploss or take profit params. Im just checking the percentage of price vs my entry price, and executing at certain percentage.\r\n\r\nThis is a very common thing across exchanges and markets, and it is pretty much expected, especially at times of high volatility like we saw recently and still seeing it now. \r\n\r\n> Im just checking the percentage of price vs my entry price, and executing at certain percentage. Will stop loss and take profit help with slippage to get the exact price I want to execute?\r\n\r\nNo. The key here is the fact that you want **the exact price**. That's a standard limit order, not a market order. An additional postOnly flag for your limit order will help ensure the exact price. \r\n\r\nAlso, your slippage depends on how exactly you calculate the volume-weighed prices to derive the amount of your market order. How do you calculate it? Which formulas do you use? How does that code look like? Without the info, we can only guess, so, please share the details. Cause you can't just use the best bid/best ask price for your calculations, you have to be pedantic and calculate it based on market depth with respect to the existing volumes in the orderbook. That still won't guarantee you from slippage though, but may rule out other bugs.\r\n\r\n> currently Im refreshing every second and executing a market order when percentage hits my targets.\r\nIm using ccxt with phemex.\r\n\r\nA derivatives exchange like Phemex or any other exchange usually processes a very large number of orders, the number of orders placed and canceled in 24h can count in hundreds of thousands or millions, that means the orderbook will change rather frequently, say, a million times over 24 hours = 12 times per second, on average. But there may be bursts of very high activity as well, and the exchange may be very busy and very idle at times."
      }
    ]
  },
  {
    "number": 8265,
    "title": "Getting liquidation price from open positions and open positions for a single market in Binance Futures",
    "created_at": "2021-01-13T20:58:19Z",
    "closed_at": "2022-03-02T17:50:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8265",
    "body": "OS: Windows\r\nProgramming Language version: Python 3.8\r\nCCXT version: 1.39.14 (latest)\r\n\r\nHello! I am using the latest version of CCXT to test the Binance Futures API. I'm having an hard time figuring out if i can get open positions for a specific market along with the liquidation price for each position.\r\n\r\nHere is what i have so far:\r\n\r\n```\r\nexchange = ccxt.binance({\r\n    'apiKey': key,\r\n    'secret': secret,\r\n    'enableRateLimit': True,  \r\n    'options': {\r\n        'defaultType': 'future',\r\n    }\r\n})\r\n\r\nresponse = exchange.fetch_balance({})\r\n\r\nprint(response['info'])\r\n```\r\n\r\nThis is good, but the response will be open positions for all the markets, instead of a specific one. Another problem is that the response doesn't have the liquidation price for the position. Is it because Binance itself doesn't give that data? Thanks in advance!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8265/comments",
    "author": "Jacks349",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-03-02T17:50:38Z",
        "body": "# To get all open positions\r\n\r\n```\r\nimport ccxt\r\nimport json\r\nimport sys\r\nfrom pprint import pprint\r\n\r\nprint('python', sys.version)\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nwith open('../keys.local.json', 'r') as config_text:\r\n    config = json.load(config_text)\r\n\r\nbinance = ccxt.binanceusdm(config['binanceusdm'])\r\nbinance.loadMarkets()\r\n\r\npositions = binance.fetch_positions([symbol])\r\npprint(positions)\r\n```\r\n\r\n---------------\r\n\r\n# To get the liquidation price for an open position\r\n\r\n```\r\nimport ccxt\r\nimport json\r\nimport sys\r\n\r\nprint('python', sys.version)\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nbinance = ccxt.binanceusdm({\r\n    'apiKey': '...',\r\n    'secret': '...',\r\n})\r\nbinance.loadMarkets()\r\nsymbol = 'XRP/USDT'\r\n\r\npositions = binance.fetch_positions([symbol])\r\n\r\nif len(positions) > 0:\r\n    pos = positions[0]\r\n    liquidation_price = pos['liquidationPrice']\r\n    print(liquidation_price)\r\nelse:\r\n    print(f'No open positions for {symbol}')\r\n```\r\n\r\n-----------------------\r\n\r\nFeel free to open the issue again if you have any more questions\r\n"
      }
    ]
  },
  {
    "number": 8227,
    "title": "Callback on watch* connection interruption",
    "created_at": "2021-01-08T18:32:28Z",
    "closed_at": "2021-01-08T18:46:44Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8227",
    "body": "How to set callback on `watch*` connection interruption? \r\nIs it enough to use `try/catch` like in example code below?\r\n\r\n- OS: DEBIAN stretch (Docker)\r\n- Programming Language version: NodeJS (v13.12.0)\r\n- CCXT version: Pro version 0.5.20\r\n\r\n```\r\nconst exchange = new ccxt.binance({\r\n  enableRateLimit: true,\r\n  apiKey: \"apiKey\",\r\n  secret: \"secretKey\"\r\n});\r\n\r\nwhile (true) {\r\n  try {\r\n      // Connection is interrupted\r\n      const orders = await exchange.watchOrders();\r\n  \r\n  } catch (e) {\r\n      // Do business logic in connection interruption case ...\r\n      // On next iteration connection probably  will be restored ...\r\n  }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8227/comments",
    "author": "wunderb1t358",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-08T18:46:44Z",
        "body": "@wunderb1t358 yes, that is the correct code to handle it and it should be enough. Please, let us know if you have difficulties with that."
      }
    ]
  },
  {
    "number": 8226,
    "title": "How watch* connection will be reused for private API?",
    "created_at": "2021-01-08T17:57:05Z",
    "closed_at": "2021-01-08T18:02:09Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8226",
    "body": "Do I correctly understand that connection for `watchOrders` will be reused for the same private API if exists? \r\n\r\n- OS: DEBIAN stretch (Docker)\r\n- Programming Language version: NodeJS (v13.12.0)\r\n- CCXT version: Pro version 0.5.20\r\n\r\n```\r\nconst exchange = new ccxt.binance({\r\n    enableRateLimit: true,\r\n    apiKey: 'apiKey',\r\n    secret: 'secretKey'\r\n});\r\n\r\nfor (let i = 0; i <= 1; i++) {\r\n    while (true) {\r\n        try {\r\n            // Will be open only one socket connection?\r\n            const orders = await exchange.watchOrders();\r\n\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8226/comments",
    "author": "wunderb1t358",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-08T18:02:09Z",
        "body": "> Do I correctly understand that connection for watchOrders will be reused for the same private API if exists?\r\n\r\nYes, that is correct, the library will reuse the same connection if it already exists. In general, there's often just one connection per exchange. Sometimes, the exchange might require two connections: one for all public feeds, and another one for the authenticated private feeds. In any case, the existing connections are reused.\r\n\r\nLet us know if that does not help."
      }
    ]
  },
  {
    "number": 8204,
    "title": "[kraken] trade cost isn't quiet correct",
    "created_at": "2021-01-03T18:58:05Z",
    "closed_at": "2021-01-03T19:37:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8204",
    "body": "The following trade took my EUR balance from exactly zero to 68.26 EUR (not 68.42...).  I think the cost needs to have the fee removed (68.42692 - 0.16422 = 68.2627)\r\n\r\n```\r\n{\r\n  \"id\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n  \"fee\": {\r\n    \"cost\": 0.16422,\r\n    \"currency\": \"EUR\"\r\n  },\r\n  \"cost\": 68.42692,\r\n  \"info\": {\r\n    \"id\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n    \"fee\": \"0.16422\",\r\n    \"vol\": \"0.40000000\",\r\n    \"cost\": \"68.42692\",\r\n    \"misc\": \"\",\r\n    \"pair\": \"XETHZEUR\",\r\n    \"time\": 1501407063.1763,\r\n    \"type\": \"sell\",\r\n    \"price\": \"171.06730\",\r\n    \"margin\": \"0.00000\",\r\n    \"ordertxid\": \"OIZZ6C-H4QEZ-P5B7Z5\",\r\n    \"ordertype\": \"limit\"\r\n  },\r\n  \"side\": \"sell\",\r\n  \"type\": \"limit\",\r\n  \"order\": \"OIZZ6C-H4QEZ-P5B7Z5\",\r\n  \"price\": 171.0673,\r\n  \"amount\": 0.4,\r\n  \"symbol\": \"ETH/EUR\",\r\n  \"_source\": \"rest api\",\r\n  \"datetime\": \"2017-07-30T09:31:03.176Z\",\r\n  \"timestamp\": 1501407063176\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8204/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-03T19:00:50Z",
        "body": "@npomfret the cost of the trade is always price * amount = 171.0673 * 0.4 = 68.42692. The fee is applied on top of that, afterwards. That looks consistent with the exchange output and the ccxt output, no?"
      },
      {
        "user": "npomfret",
        "created_at": "2021-01-03T19:28:44Z",
        "body": "Is it possible to price they give is net of fees?  \r\n\r\nEvery other exchange I've tested results in balance changes that are equal to the amount or the cost.  But not kraken."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-03T19:31:46Z",
        "body": "> Is it possible to price they give is net of fees?\r\n\r\nI don't think so.\r\n\r\n> Every other exchange I've tested results in balance changes that are equal to the amount or the cost. But not kraken.\r\n\r\nYou've got +68.42692 EUR (cost) - 0.16422 EUR (fee, applied afterwards) = 68.2627 to your account balance and that is consistent across ccxt and other exchanges, no?"
      },
      {
        "user": "npomfret",
        "created_at": "2021-01-03T19:37:03Z",
        "body": "ok, perhaps it's just a rounding issue.  Thanks for the input."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-03T19:38:32Z",
        "body": "@npomfret kraken will hide the lower decimals for EUR, but will store them in their internal db. So you might have +.0027 there, invisible, but summable with other dust."
      },
      {
        "user": "npomfret",
        "created_at": "2021-01-03T20:24:06Z",
        "body": "I've looked at some other examples and it seems that my balance is changing by the cost (not the cost + fee).  For example, this trade resulted in the balance changing from 69.94990000 to 0.69950000, a change of -69.2504.\r\n\r\n```\r\n{\r\n  \"id\": \"TBWKJZ-4TFJ5-Q67WZH\",\r\n  \"fee\": {\r\n    \"cost\": 0.1108,\r\n    \"currency\": \"EUR\"\r\n  },\r\n  \"cost\": 69.25036115,\r\n  \"info\": {\r\n    \"id\": \"TBWKJZ-4TFJ5-Q67WZH\",\r\n    \"fee\": \"0.11080\",\r\n    \"vol\": \"0.00841745\",\r\n    \"cost\": \"69.25036\",\r\n    \"misc\": \"\",\r\n    \"pair\": \"XXBTZEUR\",\r\n    \"time\": 1595601094.6442,\r\n    \"type\": \"buy\",\r\n    \"price\": \"8227.00000\",\r\n    \"margin\": \"0.00000\",\r\n    \"postxid\": \"TKH2SE-M7IF5-CFI7LT\",\r\n    \"ordertxid\": \"OD7XVS-ABA3I-2JULOT\",\r\n    \"ordertype\": \"limit\"\r\n  },\r\n  \"side\": \"buy\",\r\n  \"type\": \"limit\",\r\n  \"order\": \"OD7XVS-ABA3I-2JULOT\",\r\n  \"price\": 8227,\r\n  \"amount\": 0.00841745,\r\n  \"symbol\": \"BTC/EUR\",\r\n  \"_source\": \"rest api\",\r\n  \"datetime\": \"2020-07-24T14:31:34.644Z\",\r\n  \"timestamp\": 1595601094644\r\n}\r\n```\r\n\r\nthe balance change here was 1316.5597:\r\n\r\n```\r\n{\r\n  \"id\": \"T3VY4D-7NL7M-JAEQNW\",\r\n  \"fee\": {\r\n    \"cost\": 2.1065,\r\n    \"currency\": \"EUR\"\r\n  },\r\n  \"cost\": 1316.5596752000001,\r\n  \"info\": {\r\n    \"id\": \"T3VY4D-7NL7M-JAEQNW\",\r\n    \"fee\": \"2.10650\",\r\n    \"vol\": \"0.16018100\",\r\n    \"cost\": \"1316.55968\",\r\n    \"misc\": \"\",\r\n    \"pair\": \"XXBTZEUR\",\r\n    \"time\": 1595602217.2371,\r\n    \"type\": \"sell\",\r\n    \"price\": \"8219.20000\",\r\n    \"margin\": \"0.00000\",\r\n    \"postxid\": \"TKH2SE-M7IF5-CFI7LT\",\r\n    \"ordertxid\": \"OYY5YW-NSRYB-VVA2LI\",\r\n    \"ordertype\": \"limit\"\r\n  },\r\n  \"side\": \"sell\",\r\n  \"type\": \"limit\",\r\n  \"order\": \"OYY5YW-NSRYB-VVA2LI\",\r\n  \"price\": 8219.2,\r\n  \"amount\": 0.160181,\r\n  \"symbol\": \"BTC/EUR\",\r\n  \"_source\": \"rest api\",\r\n  \"datetime\": \"2020-07-24T14:50:17.237Z\",\r\n  \"timestamp\": 1595602217237\r\n}\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-03T20:38:40Z",
        "body": "@npomfret that's confusing, indeed. What does `fetchLedger` tell about the same period?"
      },
      {
        "user": "npomfret",
        "created_at": "2021-01-04T21:46:47Z",
        "body": "from the 1st example above (with a balance change of 68.26EUR), there are 2 entries in the ledger:\r\n\r\n```\r\n  {\r\n    \"info\": {\r\n      \"refid\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n      \"time\": 1501407063.1835,\r\n      \"type\": \"trade\",\r\n      \"subtype\": \"\",\r\n      \"aclass\": \"currency\",\r\n      \"asset\": \"XETH\",\r\n      \"amount\": \"-0.4000000000\",\r\n      \"fee\": \"0.0000000000\",\r\n      \"balance\": \"4.2110080200\",\r\n      \"id\": \"LEMB44-P6I2D-AQLWZ5\"\r\n    },\r\n    \"id\": \"LEMB44-P6I2D-AQLWZ5\",\r\n    \"direction\": \"out\",\r\n    \"referenceId\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n    \"type\": \"trade\",\r\n    \"currency\": \"ETH\",\r\n    \"amount\": 0.4,\r\n    \"after\": 4.21100802,\r\n    \"status\": \"ok\",\r\n    \"timestamp\": 1501407063183,\r\n    \"datetime\": \"2017-07-30T09:31:03.183Z\",\r\n    \"fee\": {\r\n      \"cost\": 0,\r\n      \"currency\": \"ETH\"\r\n    },\r\n    \"_source\": \"rest api\"\r\n  },\r\n  {\r\n    \"info\": {\r\n      \"refid\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n      \"time\": 1501407063.1846,\r\n      \"type\": \"trade\",\r\n      \"subtype\": \"\",\r\n      \"aclass\": \"currency\",\r\n      \"asset\": \"ZEUR\",\r\n      \"amount\": \"68.4269\",\r\n      \"fee\": \"0.1642\",\r\n      \"balance\": \"68.2627\",\r\n      \"id\": \"LVGTYH-WSCAN-COQGQL\"\r\n    },\r\n    \"id\": \"LVGTYH-WSCAN-COQGQL\",\r\n    \"direction\": \"in\",\r\n    \"referenceId\": \"TPPRE4-FQNIZ-2PXN7U\",\r\n    \"type\": \"trade\",\r\n    \"currency\": \"EUR\",\r\n    \"amount\": 68.4269,\r\n    \"after\": 68.2627,\r\n    \"status\": \"ok\",\r\n    \"timestamp\": 1501407063184,\r\n    \"datetime\": \"2017-07-30T09:31:03.184Z\",\r\n    \"fee\": {\r\n      \"cost\": 0.1642,\r\n      \"currency\": \"EUR\"\r\n    },\r\n    \"_source\": \"rest api\"\r\n  },\r\n```\r\n\r\nthe last example (with a balance change of 1316.5597 EUR) has 3 entries:\r\n\r\n```\r\n  {\r\n    \"info\": {\r\n      \"refid\": \"T3VY4D-7NL7M-JAEQNW\",\r\n      \"time\": 1595602217.2518,\r\n      \"type\": \"trade\",\r\n      \"subtype\": \"\",\r\n      \"aclass\": \"currency\",\r\n      \"asset\": \"XXBT\",\r\n      \"amount\": \"-0.1601810000\",\r\n      \"fee\": \"0.0000000000\",\r\n      \"balance\": \"0.2677575450\",\r\n      \"id\": \"LT2PKW-HOQ62-F34OQJ\"\r\n    },\r\n    \"id\": \"LT2PKW-HOQ62-F34OQJ\",\r\n    \"direction\": \"out\",\r\n    \"referenceId\": \"T3VY4D-7NL7M-JAEQNW\",\r\n    \"type\": \"trade\",\r\n    \"currency\": \"BTC\",\r\n    \"amount\": 0.160181,\r\n    \"after\": 0.267757545,\r\n    \"status\": \"ok\",\r\n    \"timestamp\": 1595602217251,\r\n    \"datetime\": \"2020-07-24T14:50:17.251Z\",\r\n    \"fee\": {\r\n      \"cost\": 0,\r\n      \"currency\": \"BTC\"\r\n    },\r\n    \"_source\": \"rest api\"\r\n  },\r\n  {\r\n    \"info\": {\r\n      \"refid\": \"T3VY4D-7NL7M-JAEQNW\",\r\n      \"time\": 1595602217.2546,\r\n      \"type\": \"trade\",\r\n      \"subtype\": \"\",\r\n      \"aclass\": \"currency\",\r\n      \"asset\": \"KFEE\",\r\n      \"amount\": \"0.00\",\r\n      \"fee\": \"225.40\",\r\n      \"balance\": \"2926.75\",\r\n      \"id\": \"LXFCDW-HA3FZ-65XQBV\"\r\n    },\r\n    \"id\": \"LXFCDW-HA3FZ-65XQBV\",\r\n    \"direction\": \"in\",\r\n    \"referenceId\": \"T3VY4D-7NL7M-JAEQNW\",\r\n    \"type\": \"trade\",\r\n    \"currency\": \"FEE\",\r\n    \"amount\": 0,\r\n    \"after\": 2926.75,\r\n    \"status\": \"ok\",\r\n    \"timestamp\": 1595602217254,\r\n    \"datetime\": \"2020-07-24T14:50:17.254Z\",\r\n    \"fee\": {\r\n      \"cost\": 225.4,\r\n      \"currency\": \"FEE\"\r\n    },\r\n    \"_source\": \"rest api\"\r\n  },\r\n  {\r\n    \"info\": {\r\n      \"refid\": \"T3VY4D-7NL7M-JAEQNW\",\r\n      \"time\": 1595602217.2541,\r\n      \"type\": \"trade\",\r\n      \"subtype\": \"\",\r\n      \"aclass\": \"currency\",\r\n      \"asset\": \"ZEUR\",\r\n      \"amount\": \"1316.5597\",\r\n      \"fee\": \"0.0000\",\r\n      \"balance\": \"1330.0865\",\r\n      \"id\": \"LIG7WG-GS2F4-R3PCXE\"\r\n    },\r\n    \"id\": \"LIG7WG-GS2F4-R3PCXE\",\r\n    \"direction\": \"in\",\r\n    \"referenceId\": \"T3VY4D-7NL7M-JAEQNW\",\r\n    \"type\": \"trade\",\r\n    \"currency\": \"EUR\",\r\n    \"amount\": 1316.5597,\r\n    \"after\": 1330.0865,\r\n    \"status\": \"ok\",\r\n    \"timestamp\": 1595602217254,\r\n    \"datetime\": \"2020-07-24T14:50:17.254Z\",\r\n    \"fee\": {\r\n      \"cost\": 0,\r\n      \"currency\": \"EUR\"\r\n    },\r\n    \"_source\": \"rest api\"\r\n  },\r\n```\r\n\r\nAh, maybe this has something to do with KFEE (the  kraken fee token) that I think was introduced May 2019"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-04T21:54:39Z",
        "body": "> Ah, maybe this has something to do with KFEE (the kraken fee token) that I think was introduced May 2019\r\n\r\nLooks like it. You've paid some fees in another currency (kraken fee-points specifically), which explains the discrepancy with separate assets on your balance."
      },
      {
        "user": "npomfret",
        "created_at": "2021-01-04T22:10:21Z",
        "body": "right, so I *should* see my kfee balance reduce with each of these trades...\r\n\r\n... of course it doesn't \r\n\r\nbut i think we figured it out - thanks"
      }
    ]
  },
  {
    "number": 8179,
    "title": "[binance] -2011 error handling",
    "created_at": "2020-12-30T11:36:45Z",
    "closed_at": "2020-12-30T11:55:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8179",
    "body": "We currently have `'-2011': OrderNotFound` in binance.  This error happens when you use an orderId in a cancel operation, but that ID is not in the binance database yet.  Basically, it appears that the Rest API talks to a database that lags behind slightly, so the order is legitimate, but it's just not in the db yet.  Is OrderNotFound the correct thing to use?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8179/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-30T11:55:23Z",
        "body": "@npomfret \r\n> Is OrderNotFound the correct thing to use?\r\n\r\nYes, I think so. It literally tells the truth – the order is not found (yet).\r\n\r\nThe problem is that we can't distinguish the -2011 code when the order is not in the db but will be there eventually, from when the order will never be there – it's the same code in both cases.\r\n\r\nLet me know if that does not answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2020-12-30T12:26:15Z",
        "body": "ok, thanks"
      }
    ]
  },
  {
    "number": 8164,
    "title": "coinbasepro orderBook depth issue in ccxt.pro",
    "created_at": "2020-12-27T22:16:20Z",
    "closed_at": "2020-12-27T23:19:18Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8164",
    "body": "Hi,\r\nI have a problem with coinbasepro watchOrderBook.\r\nWhen I run simple code below (developed earlier for different testing purpose, but can be used now), node thread is using 100% of CPU, which for my complex code leads to failure as my software runs out of resources. When I replace coinbasepro.js with an older version, where\r\n\r\n```\r\nthis.orderbooks[symbol] = this.orderBook ({});\r\n```\r\nis replaced by\r\n```\r\nconst depth = 50; // default depth is 50\r\nthis.orderbooks[symbol] = this.orderBook ({}, depth);\r\n```\r\nthat code is consuming some 37% of CPU and all is fine.\r\nThanks for checking.\r\n\r\n- OS: Ubuntu\r\n- Programming Language version: node v12.20.0\r\n- CCXT version: ccxt.pro@0.5.3\r\n\r\n```\r\n\r\n'use strict';\r\n\r\nconst ccxtpro = require ('ccxt.pro')\r\n    , log = require ('ololog').handleNodeErrors ().unlimited\r\n    , ansi = require ('ansicolor').nice\r\n    , fs = require ('fs')\r\n    , exchange = new ccxtpro.coinbasepro ({ enableRateLimit: true, rateLimit: 1000 })\r\n    , symbol = 'BTC/USD'\r\n    , limit = 10\r\n    , threshold = 100\r\n\r\n;(async () => {\r\n\r\n    let lastFetchPrice\r\n    let lastFetched\r\n\r\n    async function watchOrderBook (exchange, symbol, limit) {\r\n        let counter = 0\r\n        let lastWatchPrice\r\n        while (true) {\r\n\r\n            try {\r\n\r\n                const orderbook = await exchange.watchOrderBook (symbol, limit)\r\n                const price = orderbook.bids[0][0]\r\n                counter = (price === lastWatchPrice) ? ++counter : 0\r\n                lastWatchPrice = price;\r\n\r\n                const now = exchange.milliseconds ()\r\n                const watchTimestamp = new Date (now)\r\n                const fetchTimestamp = new Date (lastFetched)\r\n\r\n                fs.appendFileSync ('coinbaseproTips.dat',`${watchTimestamp} ${lastWatchPrice} ${lastFetchPrice} ${fetchTimestamp}\\n`);\r\n\r\n                if ((counter > threshold) && (lastWatchPrice !== lastFetchPrice)) {\r\n                    log.red (exchange.iso8601 (now).dim, 'frozen tip detected:', lastWatchPrice, lastFetchPrice, exchange.iso8601 (lastFetched).dim)\r\n                    fs.appendFileSync ('frozenTips.dat', `${watchTimestamp} ${lastWatchPrice} ${lastFetchPrice} ${fetchTimestamp}\\n`)\r\n\r\n                } else {\r\n                    log.green (exchange.iso8601 (now).dim, price, lastFetchPrice, exchange.iso8601 (lastFetched).dim)\r\n                }\r\n            } catch (e) {\r\n                log.red (e)\r\n                throw e\r\n            }\r\n        }\r\n    }\r\n\r\n    async function fetchOrderBook (exchange, symbol, limit) {\r\n        while (true) {\r\n            try {\r\n                const orderbook = await exchange.fetchOrderBook (symbol, limit)\r\n                lastFetchPrice = orderbook.bids[0][0]\r\n                lastFetched = new Date (exchange.last_response_headers['Date']).getTime ()\r\n            } catch (e) {\r\n                log.red (e)\r\n            }\r\n        }\r\n    }\r\n\r\n    await Promise.all ([\r\n        watchOrderBook (exchange, symbol, limit),\r\n        fetchOrderBook (exchange, symbol, limit),\r\n    ])\r\n\r\n}) ()\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8164/comments",
    "author": "dmnode",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-27T22:28:30Z",
        "body": "Hi!\r\n\r\nLet's start with removing all irrelevant parts from your code to make it a short snippet to work with. Those synchronous writes to disk kinda kill all the benefits of WebSockets, this is not the way you want to design a truly reactive and fast application – the writes to disk or to network have to be asynchronous as well. Also, the colored logging doesn't help save your CPU either. You might have to optimize the code in the userland.\r\n\r\nWith this short snippet how much % CPU is consumed?\r\n\r\n```JavaScript\r\nconst ccxtpro = require ('./ccxt.pro')\r\n\r\nconsole.log ('CCXT Pro Version:', ccxtpro.version)\r\n\r\nconst exchange = new ccxtpro.coinbasepro ({\r\n    'enableRateLimit': true,\r\n})\r\n\r\nconst symbol = 'BTC/USD'\r\nconst limit = 10\r\n\r\n;(async () => {\r\n\r\n    while (true) {\r\n        try {\r\n            const orderbook = await exchange.watchOrderBook (symbol, limit)\r\n            console.log (orderbook.asks[0], orderbook.bids[0])\r\n        } catch (e) {\r\n            console.log (e.constructor.name, e.message)\r\n            process.exit ()\r\n        }\r\n    }\r\n\r\n}) ()\r\n```"
      },
      {
        "user": "dmnode",
        "created_at": "2020-12-27T22:55:53Z",
        "body": "Hi Igor,\r\nThanks, but even with this simple code the same problem. Old coinbasepro.js in ccxt.pro = 25% CPU, new coinbasepro.js in ccxt.pro = 109.6% CPU, as measured by top. In my real-word case I run more asynchronous tasks, the code gets stuck in coinbasepro and fails.\r\n\r\nNEW CCXT.PRO\r\nVIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\r\n892648 152724  31408 R 109.6   1.9   0:34.82 node \r\n\r\nOLD CCXT.PRO\r\nVIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\r\n895368  89156  31372 S  25.0   1.1   0:02.80 node \r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-12-27T22:59:51Z",
        "body": "@dmnode ok, we will add a workaround in coinbasepro.js and will get back to you shortly."
      },
      {
        "user": "kroitor",
        "created_at": "2020-12-27T23:33:04Z",
        "body": "@dmnode alright, i've pushed a fix, can you please upgrade to 0.5.4+ and report back whether you still have issues with it?"
      }
    ]
  },
  {
    "number": 8163,
    "title": "How to fetch fiat balance from coinbase?",
    "created_at": "2020-12-27T09:56:55Z",
    "closed_at": "2021-01-14T12:49:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8163",
    "body": "Hi I was wondering if its possible to fetch GBP or EUR balances from coinbase? looks like fetch_balance() only returns crypto and USD balance.\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8163/comments",
    "author": "art1313",
    "comments": [
      {
        "user": "jaguarqc",
        "created_at": "2021-01-01T21:35:57Z",
        "body": "fetch_balance does not return USD as far as I know. \r\nIt returns your balances thru a list of cryptos.\r\nYou can always call:\r\n`const gbp = await coinbase.publicGetPricesSymbolBuy({'symbol': 'BTC-GBP'})`\r\n(will return `{ data: { base: 'BTC', currency: 'GBP', amount: '21585.79' } }` )\r\n to get the pair value and simply make the math."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-14T12:49:39Z",
        "body": "@jaguarqc thank you!\r\n\r\n@art1313 let us know if the above does not answer your question."
      }
    ]
  },
  {
    "number": 8146,
    "title": "Implicit API methods in CCXT Pro",
    "created_at": "2020-12-24T02:02:21Z",
    "closed_at": "2020-12-24T03:01:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8146",
    "body": "ccxt-1.39.61 ccxtpro-0.5.1 python3.8.5\r\n\r\nI was trying to add the new universalTransfer Binance endpoints to the implicit API methods.\r\n\r\nIn my local copy of ccxt's binance.py, I added 'sub-account/universalTransfer' under 'api'['sapi']['get'] and 'api'['sapi']['post']. These appear in ccxt and work fine, but not in ccxtpro. How do I add these endpoints in a way that is seen in ccxtpro?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8146/comments",
    "author": "diwenshi61",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-24T03:01:16Z",
        "body": "1. uninstall the unedited ccxt `pip uninstall ccxt`\r\n2. install the ccxt you've patched with `pip install /path/to/your/patched/ccxt`\r\n\r\nLet us know if that does not answer your question.\r\n\r\nWe will add those endpoint to the master version as well."
      }
    ]
  },
  {
    "number": 8100,
    "title": "Binance \"scrape_candles_to_csv\" suddenly not working anymore",
    "created_at": "2020-12-08T16:57:58Z",
    "closed_at": "2020-12-08T17:29:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8100",
    "body": "- OS: OS Mojave\r\n- Programming Language version: Python 3.7\r\n- CCXT version: 1.37.59\r\n\r\nIt worked for months now it gives me this error, and I did not change a thing.\r\nHas Binance change the way your retrieve OHLCV?? \r\nKind Regards \r\n\r\n```python\r\nscrape_candles_to_csv('eth_usdt_5m_binance.csv', 'binance', 500, 'ETH/USDT', '5m', '2020-04-01T00:00:00Z', 750)\r\n```\r\n\r\n```python \r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-17-7d8a94d0319b> in <module>\r\n     14 \r\n     15             start_time = time.time()\r\n---> 16             scrape_candles_to_csv(path + k.replace('/', '_') + '_'+ i +'_bitmex.csv', 'binance', 500, str(k), i, '2020-04-01T00:00:00Z', 750)\r\n     17 \r\n     18             df3 = pd.read_csv(path + k.replace('/', '_') + '_'+ i +'_bitmex.csv')\r\n\r\n~/Documents/Projects/Trading_neat/bitmex.py in scrape_candles_to_csv(filename, exchange_id, max_retries, symbol, timeframe, since, limit)\r\n     73     #exchange.load_markets()\r\n     74     # fetch all candles\r\n---> 75     ohlcv = scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit)\r\n     76     # save them to csv file\r\n     77     write_to_csv(filename, ohlcv)\r\n\r\n~/Documents/Projects/Trading_neat/bitmex.py in scrape_ohlcv(exchange, max_retries, symbol, timeframe, since, limit)\r\n     41         ohlcv = retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, fetch_since, limit)\r\n     42         # if we have reached the beginning of history\r\n---> 43         if ohlcv[0][0] >= earliest_timestamp:\r\n     44             break\r\n     45         earliest_timestamp = ohlcv[0][0]\r\n\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8100/comments",
    "author": "Kalelv45",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-08T17:12:08Z",
        "body": "Do you have the same issue with the most recent version of CCXT?"
      },
      {
        "user": "Kalelv45",
        "created_at": "2020-12-08T17:20:22Z",
        "body": "Solved, it does not show with the new version. Just caught me as a surprise I thought was Binance related. Kind Regards, and thanks as always. "
      }
    ]
  },
  {
    "number": 8093,
    "title": "How to get single update of watchOrders and watchBalance?",
    "created_at": "2020-12-07T02:46:16Z",
    "closed_at": "2023-08-02T11:27:36Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8093",
    "body": "How to get which order is updated in watchOrders and which currency is updated in watchBalance?\r\n\r\nI saw a line of code in binance.py that said\r\n```orders.append(parsed)```\r\nI just need the `parsed` single order information.\r\n\r\nFor example, this is watchOrders return (only show important fields).\r\n```\r\n[{\"id\": 1, \"status\": \"open\", \"filled\": 0.0, \"amount\": 1.0}, {\"id\": 2, \"status\": \"canceled\", \"filled\": 0.0, \"amount\": 1.0}]\r\n```\r\nat some time, order 1 is canceled, then the watchOrders returns:\r\n```\r\n[{\"id\": 1, \"status\": \"canceled\", \"filled\": 0.0, \"amount\": 1.0}, {\"id\": 2, \"status\": \"canceled\", \"filled\": 0.0, \"amount\": 1.0}]\r\n```\r\nbut I need\r\n```\r\n{\"id\": 1, \"status\": \"canceled\", \"filled\": 0.0, \"amount\": 1.0}\r\n```\r\n\r\nThe example for watchBalance return is (only show important fields):\r\n```\r\n{\"USDT\": {\"total\": 100}, \"BTC\": {\"total\": 0.0}, \"ETH\": {\"total\": 0.0}}\r\n```\r\nat some time, I bought some BTC and watchBalance returns:\r\n```\r\n{\"USDT\": {\"total\": 0.0}, \"BTC\": {\"total\": 0.005}, \"ETH\": {\"total\": 0.0}}\r\n```\r\nbut I need this information (which currency's balance is updated during this websocket message)\r\n```\r\n{\"USDT\": {\"total\": 0.0}, \"BTC\": {\"total\": 0.005}}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8093/comments",
    "author": "zsyh",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-07T06:19:35Z",
        "body": "We are working on a mode to return just the updated entities, hope to get it uploaded soon."
      },
      {
        "user": "Matoran",
        "created_at": "2020-12-27T17:20:51Z",
        "body": "The `E` value should be used (event time which is in raw response only), but for simplicity you can probably use `lastTradeTimestamp` like that:\r\n```python\r\nsince = None\r\nwhile True:\r\n  orders = await self.exchange.watch_orders()\r\n  orders = self.exchange.filter_by_since_limit(orders, since=since, key='lastTradeTimestamp')\r\n  since = str(int(orders[-1]['lastTradeTimestamp'])+1)\r\n```\r\nNote that `lastTradeTimestamp` is a string, you should be careful about the comparison. If you use one more digit `'100' > '20'` is `False`. But you should be safe as current timestamp `1609089523020` is today and `9609089523020` is 2 July 2274 :D. Test on your side, of course, don't trust me. You can lose money."
      },
      {
        "user": "ttodua",
        "created_at": "2023-08-02T11:27:36Z",
        "body": "in latest ccxt version this shouldnt be an issue. if still any issues happening, let us know"
      }
    ]
  },
  {
    "number": 8079,
    "title": "Bitfinex v2 futures+swap differentiation",
    "created_at": "2020-12-04T22:08:44Z",
    "closed_at": "2024-08-13T13:34:18Z",
    "labels": [
      "enhancement",
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8079",
    "body": "Hi,\r\n\r\nSeems like when querying for markets on Bitfinex using ccxt.pro, it uses 'bitfinex' and not 'bitfinex2' in CCXT. This makes it impossible to differentiate spot symbols with futures symbols, as there is no 'type' property reported on each market.\r\n\r\nAny easy way to make ccxt.pro use bitfinex2 instead? (at least for symbology). Even better would be to actually support bitfinex v2 protocol on Bitfinex... Another option would be to gain insight on how to differentiate spot vs. future still using 'bitfinex' and not 'bitfinex2' in ccxt.pro.\r\n\r\nThanks!\r\n\r\n```\r\npython examples/py/symbols.py bitfinex2 | grep F0\r\n\r\n{\r\n   \"percentage\":True,\r\n   \"tierBased\":True,\r\n   \"maker\":0.001,\r\n   \"taker\":0.002,\r\n   \"id\":\"tXAUTF0:USTF0\",\r\n   \"symbol\":\"XAUTF0/USTF0\",\r\n   \"base\":\"XAUTF0\",\r\n   \"quote\":\"USTF0\",\r\n   \"baseId\":\"fXAUTF0\",\r\n   \"quoteId\":\"fUSTF0\",\r\n   \"active\":True,\r\n   \"info\":{\r\n      \"pair\":\"xautf0:ustf0\",\r\n      \"price_precision\":5,\r\n      \"initial_margin\":\"1.0\",\r\n      \"minimum_margin\":\"0.5\",\r\n      \"maximum_order_size\":\"400.0\",\r\n      \"minimum_order_size\":\"0.002\",\r\n      \"expiration\":\"NA\",\r\n      \"margin\":True\r\n   },\r\n   \"type\":\"futures\",\r\n   \"swap\":False,\r\n   \"spot\":False,\r\n   \"futures\":True\r\n}\r\n```\r\n\r\nvs.\r\n\r\n```\r\npython examples/py/symbols.py bitfinex | grep F0\r\n\r\n{\r\n   \"percentage\":True,\r\n   \"tierBased\":True,\r\n   \"maker\":0.001,\r\n   \"taker\":0.002,\r\n   \"id\":\"XAUTF0:USTF0\",\r\n   \"symbol\":\"XAUTF0/USTF0\",\r\n   \"base\":\"XAUTF0\",\r\n   \"quote\":\"USTF0\",\r\n   \"baseId\":\"XAUTF0\",\r\n   \"quoteId\":\"USTF0\",\r\n   \"active\":True,\r\n   \"info\":{\r\n      \"pair\":\"xautf0:ustf0\",\r\n      \"price_precision\":5,\r\n      \"initial_margin\":\"1.0\",\r\n      \"minimum_margin\":\"0.5\",\r\n      \"maximum_order_size\":\"400.0\",\r\n      \"minimum_order_size\":\"0.002\",\r\n      \"expiration\":\"NA\",\r\n      \"margin\":True\r\n   }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8079/comments",
    "author": "e36-cicd",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-04T22:11:25Z",
        "body": "Hi! We will add the support for Bitfinex v2 to CCXT Pro asap."
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-13T13:34:18Z",
        "body": "as this issue was resolved, closing this."
      }
    ]
  },
  {
    "number": 8077,
    "title": "[wavesexchange.py] - 'timeInForce' Questions",
    "created_at": "2020-12-04T13:57:04Z",
    "closed_at": "2024-08-13T12:23:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8077",
    "body": "What is the proper way to set a two hour expiration on buy/sell orders for the WAVES Exchange? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8077/comments",
    "author": "Maxximiliann",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2024-08-13T12:23:53Z",
        "body": "whoever wants, `defaultExpiry` should be passed (milliseconds value). e.g. for 2 hours:\r\n```\r\nex.create_order (symbol, type, side, amount, price, { 'defaultExpiry' : 2 * 60 * 60 * 1000 })\r\n```"
      }
    ]
  },
  {
    "number": 8056,
    "title": "Functionality support for crypto swap",
    "created_at": "2020-11-28T19:28:19Z",
    "closed_at": "2022-07-17T09:01:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8056",
    "body": "Hi,\r\n\r\nI am researching into creating a swap app like simpleswap.io but it is taking me too long to pin point on which api to use. I have reviewed binance-chain atomic-swap and ccxt and this is putting me in circles. If anyone on here can tell me if ccxt can be used to handle crypto swap. I prefer Python language so is there any python resource out there that could help me implement my swap app?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8056/comments",
    "author": "kofi-boateng",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-17T09:01:21Z",
        "body": "That is not correct understanding about CCXT. If anyone is about building an exchange/swap, then the engine has to be searched in other directions, and CCXT is not an exchange/swap engine. I advise to look through the readme of CCXT to understand what it does. It can swap (trade) crypto through other exchanges/dex's, but itself it's not backend engine for swap app.\r\nFeel free to open the issue if you have any problems/questions related directly to CCXT."
      }
    ]
  },
  {
    "number": 8038,
    "title": "KeyError on market limits",
    "created_at": "2020-11-25T16:01:54Z",
    "closed_at": "2020-11-25T16:09:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8038",
    "body": "Edit: the issue was on my side and not on CCXT.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8038/comments",
    "author": "fievelk",
    "comments": [
      {
        "user": "fievelk",
        "created_at": "2020-11-25T16:09:34Z",
        "body": "Found the problem (on my side!). Closing the issue."
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-25T21:54:22Z",
        "body": "@fievelk thx for reporting back, don't hesitate if anything."
      }
    ]
  },
  {
    "number": 8016,
    "title": "Amount to precision bug - python3.8 (binance futures)",
    "created_at": "2020-11-22T18:09:23Z",
    "closed_at": "2020-11-22T18:57:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8016",
    "body": "Hello,\r\nI'm getting a \" TypeError: 'NoneType' \" error when I'm using the 'amount_to_precision' function for binance (futures).\r\n\r\n- OS: Manjaro\r\n- Programming Language version: Python 3.8.6\r\n- CCXT version: latest\r\n\r\n```python\r\nimport ccxt\r\n\r\nexchange = ccxt.binance({\r\n    'apiKey': 'xxx',\r\n    'secret': 'xxx',\r\n    'enableRateLimit': True\r\n})\r\n\r\nexchange.options['defaultType'] = 'future'\r\n\r\nmarket = 'LINK/USDT'\r\nbalance = 10.45744367\r\n\r\namount = exchange.amount_to_precision(market, balance)\r\n\r\nprint(amount)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"testAmount.py\", line 14, in <module>\r\n    amount = exchange.amount_to_precision(market, balance)\r\n  File \"/home/kobej/.local/lib/python3.8/site-packages/ccxt/base/exchange.py\", line 1288, in amount_to_precision\r\n    return self.decimal_to_precision(amount, TRUNCATE, self.markets[symbol]['precision']['amount'], self.precisionMode, self.paddingMode)\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8016/comments",
    "author": "AlgoQ",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-11-22T18:56:19Z",
        "body": "you need to call `exchange.load_markets` first"
      }
    ]
  },
  {
    "number": 7996,
    "title": "[Binance] get X-MBX-USED-WEIGHT and X-MBX-ORDER-COUNT from http response headers",
    "created_at": "2020-11-19T14:53:21Z",
    "closed_at": "2020-11-19T15:02:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7996",
    "body": "Hi,\r\n\r\nMay I know if ccxt supports getting http header from the response?\r\nI want to fetch some info from that header (as title).\r\n\r\nThanks,\r\nHien",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7996/comments",
    "author": "nvhien1992",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-19T15:02:56Z",
        "body": "@nvhien1992 hi!\r\n\r\n> May I know if ccxt supports getting http header from the response?\r\n\r\nYes, the last received headers are stored in the `exchange.last_response_headers` property on the exchange instance:\r\n\r\n```\r\nconst response = await exchange.fetchTicker ('ETH/BTC')\r\nconsole.log (exchange.last_response_headers)\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "nvhien1992",
        "created_at": "2020-11-20T14:12:16Z",
        "body": "Great! That's what I want.\r\nMany thanks, Kroitor!\r\n/Hien"
      }
    ]
  },
  {
    "number": 7995,
    "title": "BINANCE: COIN- M Futures. How to place orders and pull data in these markets and not USDT-M futures. ",
    "created_at": "2020-11-19T07:12:19Z",
    "closed_at": "2020-11-19T13:04:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7995",
    "body": "- OS: MacOS Mojave\r\n- Programming Language version: Python \r\n- CCXT version: 1.37.59\r\n\r\nI don't understand how to pull data and place orders on the Coin-M futures on Binance. \r\nWhen I reference the tickers, I can just get the USDT-M futures.\r\nDoes anyone know how to reference those markets?\r\nwhen I load the market tickers, I can't seem to find these COIN-M contracts. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7995/comments",
    "author": "Kalelv45",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-19T13:04:07Z",
        "body": "You have to set the options['defaultType'] to `delivery` prior to (re)loading the markets for COIN-M contracts:\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': 'delivery',\r\n    },\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n# ...\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7979,
    "title": "Limit order always executes at maximum set limit price",
    "created_at": "2020-11-15T20:45:38Z",
    "closed_at": "2020-11-15T22:15:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7979",
    "body": "There is smth I don't understand about limit orders and how they are executed on binance. I am led to believe that a limit order will execute at the limit set **_or better_**. But based on numerous tests, I see it always executes at the limit set, no matter how high it is set. Here is an example for a buy order, where I set the limit at 10% higher (which is ridiculously high just to make the point) than the ask price. \r\n\r\n```\r\nprice:\r\n{'ask': 0.003907, 'bid': 0.003904}\r\n\r\norders:\r\n[{'info': {'symbol': 'LTCBTC', 'orderId': 437641845, 'orderListId': -1, 'clientOrderId': 'some-id', 'transactTime': 1605473031619, 'price': '0.00429700', 'origQty': '0.65000000', 'executedQty': '0.65000000', 'cummulativeQuoteQty': '0.00253912', 'status': 'FILLED', 'timeInForce': 'GTC', 'type': 'LIMIT', 'side': 'BUY'}, 'id': '437641845', 'clientOrderId': 'fjkfdjfdjk', 'timestamp': 1605473031619, 'datetime': '2020-11-15T20:43:51.619Z', 'lastTradeTimestamp': None, 'symbol': 'LTC/BTC', 'type': 'limit', 'side': 'buy', 'price': 0.004297, 'amount': 0.65, 'cost': 0.00253912, 'average': 0.003906338461538462, 'filled': 0.65, 'remaining': 0.0, 'status': 'closed', 'fee': None, 'trades': None}]\r\n```\r\nask price: 0.003907\r\nexecuted price: 0.004297 -> 10% increase \r\n\r\nIs there smth I don't understand? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7979/comments",
    "author": "mklosi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-15T21:01:48Z",
        "body": "> Is there smth I don't understand?\r\n\r\nSee the `average` field, it contains the actual average executed price (0.003906338461538462). The `price` field will contain the ordered price value (0.004297). The `cost` field as reported by Binance (`cummulativeQuoteQty`) is supposedly lying, you might want to check that by verifying the prices and summing the costs of trades for this order (`fetchMyTrades`).\r\n\r\nDo you use the Binance testnet for the tests or do you test on the actual production server?\r\nDo you use the futures with leverage?"
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T21:37:14Z",
        "body": "So here is another order and the corresponding trade. I see the price between the order and trade also differ by 10%: \r\n\r\norder: \r\n```\r\n[\r\n  {\r\n    \"info\": {\r\n      \"symbol\": \"XRPBTC\",\r\n      \"orderId\": 429308436,\r\n      \"orderListId\": -1,\r\n      \"clientOrderId\": \"...........\",\r\n      \"transactTime\": 1605475762844,\r\n      \"price\": \"0.00001850\",\r\n      \"origQty\": \"15.00000000\",\r\n      \"executedQty\": \"15.00000000\",\r\n      \"cummulativeQuoteQty\": \"0.00025230\",\r\n      \"status\": \"FILLED\",\r\n      \"timeInForce\": \"GTC\",\r\n      \"type\": \"LIMIT\",\r\n      \"side\": \"BUY\"\r\n    },\r\n    \"id\": \"429308436\",\r\n    \"clientOrderId\": \".................\",\r\n    \"timestamp\": 1605475762844,\r\n    \"datetime\": \"2020-11-15T21:29:22.844Z\",\r\n    \"lastTradeTimestamp\": \"None\",\r\n    \"symbol\": \"XRP/BTC\",\r\n    \"type\": \"limit\",\r\n    \"side\": \"buy\",\r\n    \"price\": 0.0000185,\r\n    \"amount\": 15.0,\r\n    \"cost\": 0.0002523,\r\n    \"average\": 0.00001682,\r\n    \"filled\": 15.0,\r\n    \"remaining\": 0.0,\r\n    \"status\": \"closed\",\r\n    \"fee\": \"None\",\r\n    \"trades\": \"None\"\r\n  }\r\n]\r\n```\r\n\r\ntrade: \r\n```\r\n[\r\n  {\r\n    \"info\": {\r\n      \"symbol\": \"XRPBTC\",\r\n      \"id\": 78434404,\r\n      \"orderId\": 429308436,\r\n      \"orderListId\": -1,\r\n      \"price\": \"0.00001682\",\r\n      \"qty\": \"15.00000000\",\r\n      \"quoteQty\": \"0.00025230\",\r\n      \"commission\": \"0.00010924\",\r\n      \"commissionAsset\": \"BNB\",\r\n      \"time\": 1605475762844,\r\n      \"isBuyer\": \"True\",\r\n      \"isMaker\": \"False\",\r\n      \"isBestMatch\": \"True\"\r\n    },\r\n    \"timestamp\": 1605475762844,\r\n    \"datetime\": \"2020-11-15T21:29:22.844Z\",\r\n    \"symbol\": \"XRP/BTC\",\r\n    \"id\": \"78434404\",\r\n    \"order\": \"429308436\",\r\n    \"type\": \"None\",\r\n    \"side\": \"buy\",\r\n    \"takerOrMaker\": \"taker\",\r\n    \"price\": 0.00001682,\r\n    \"amount\": 15.0,\r\n    \"cost\": 0.0002523,\r\n    \"fee\": {\r\n      \"cost\": 0.00010924,\r\n      \"currency\": \"BNB\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n> Do you use the Binance testnet for the tests or do you test on the actual production server?\r\n\r\nI'm using the live server \r\n\r\n> Do you use the futures with leverage?\r\n\r\nI'm not currently using futures. \r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T21:42:39Z",
        "body": "@mklosi on the XRP/BTC trade – I don't see a problem with this one, looks correct to me, what's wrong with it?"
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T22:03:34Z",
        "body": "well, I'm wondering why the \"price\" reported by the \"order\" is 10% higher than the \"price\" reported by the \"trade\". 10% so happens to be what I've put as the price for the limit order -> ask price in the moment of trade + 10%. I am sure if I put a limit order at a price = ask_price + 50%, the order will report that high price. I don't want to test 50% though, since I already lost a bunch of money testing this :)      \r\n\r\nShouldn't the price reported by the \"order\" match that of the \"trade\"?\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T22:06:32Z",
        "body": "> Shouldn't the price reported by the \"order\" match that of the \"trade\"?\r\n\r\nNo, the price reported by the order – is the price reported by the exchange, in this case, it's the price of your order upon placing it (the price you've ordered). The `average` price should match the average across trades. And the cost should match the sum of costs of trades. That is, because one order may be filled with more than one trade, depending on the orderbook depth."
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T22:11:44Z",
        "body": "ok so in this case, since the order was filled all-in-once, the actual price that the order was filled at, is the \"average\" field. The \"price\" field is just an echo to the limit price I set when I placed the order, not the actual price that the order was executed at, correct? "
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T22:15:07Z",
        "body": "> ok so in this case, since the order was filled all-in-once, the actual price that the order was filled at, is the \"average\" field. The \"price\" field is just an echo to the limit price I set when I placed the order, not the actual price that the order was executed at, correct?\r\n\r\nYes, that is correct, but only if the order was filled with a single trade at once. If it was filled with more than one trade, then the actual true filling price is the price of each trade. \r\n\r\nLet me know if that does not answer your question. Feel free to reopen this issue or just ask further questions, if any."
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T22:16:37Z",
        "body": "now it makes sense, and it's pretty basic actually. thank you. that was very helpful. I didn't think about the fact that the limit price I set is echoed back to me. "
      }
    ]
  },
  {
    "number": 7961,
    "title": "FTX conditional order price update",
    "created_at": "2020-11-12T08:31:38Z",
    "closed_at": "2020-11-12T15:35:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7961",
    "body": "Programming Language version: Python 3.7 ( 64bit)\r\nCCXT version: 1.37.59\r\nFTX market\r\n\r\nHi\r\nHow can i update the price of conditional trigger orders without delete it ?\r\nI am using the Stop limit order and try to update the price.\r\n\r\nThis is my place trigger method\r\n`                    side = input1\r\n                    stopPrice = input2\r\n                    quantity = input3\r\n                    orderid=0\r\n                    limitPrice=None\r\n                   `\r\n\r\n\r\n` orderid = self.exchange.createOrder(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })[\"info\"][\"id\"]`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7961/comments",
    "author": "mlshin",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-12T15:35:24Z",
        "body": "1. update to CCXT 1.37.63+\r\n2. use `editOrder` like so:\r\n\r\n```Python\r\nfrom pprint import pprint\r\n\r\norder = self.exchange.create_order(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })\r\n\r\nedited_order = self.exchange.edit_order(order['id'], order['symbol'], order['type'], order['side'], order['amount'], None, {\r\n    'triggerPrice': 12345.67,  # your new price here\r\n})\r\n\r\npprint(edited_order)\r\n```\r\n\r\nLet us know if that helps or not.\r\nThx!"
      },
      {
        "user": "mlshin",
        "created_at": "2020-11-12T15:55:54Z",
        "body": "> 1. update to CCXT 1.37.63+\r\n> 2. use `editOrder` like so:\r\n> \r\n> ```python\r\n> from pprint import pprint\r\n> \r\n> order = self.exchange.create_order(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })\r\n> \r\n> edited_order = self.exchange.edit_order(order['id'], order['symbol'], order['type'], order['side'], order['amount'], None, {\r\n>     'triggerPrice': 12345.67,  # your new price here\r\n> })\r\n> \r\n> pprint(edited_order)\r\n> ```\r\n> \r\n> Let us know if that helps or not.\r\n> Thx!\r\n\r\nThank you for your support .\r\nCode is working without any error . The point is ID is changing after editing. I think this is happening on the server .\r\nin any way I can use this code .\r\nThanks."
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-12T15:56:36Z",
        "body": "> I think this is happening on the server .\r\n\r\nYes, FTX will do cancel+create on the server, as documented in FTX's API docs."
      }
    ]
  },
  {
    "number": 7955,
    "title": "Bitmex Testnet Positions",
    "created_at": "2020-11-11T07:11:02Z",
    "closed_at": "2020-11-12T13:40:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7955",
    "body": "I am using Bitmex Testnet Exchange. I want to find positions details programmatically. Kindly provide me code or function so that I could be able to find this.\r\nLanguage: Python\r\nCCXT version: 1.34.5\r\nThank You\r\nRegards\r\nUsman Khokhar",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7955/comments",
    "author": "UsmanKhOkhar16",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-12T13:40:18Z",
        "body": "Hi!\r\n\r\nYou can do it with the most recent version of CCXT 1.37.61+ like so:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.bitmex({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n    'enableRateLimit': True,\r\n})\r\n\r\nexchange.set_sandbox_mode(True)\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging purposes if it does not work\r\n\r\npositions = exchange.fetch_positions()\r\npprint(positions)\r\n```\r\n\r\nMake sure your version is up to date. Let us know if the above does not help."
      }
    ]
  },
  {
    "number": 7919,
    "title": "Feature Request: Add in watchBalance in huobipro [ccxtpro]",
    "created_at": "2020-11-02T18:27:03Z",
    "closed_at": "2020-11-02T18:50:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7919",
    "body": "Hello,\r\n\r\nDo you plan to add in watchBalance method in huobipro python in ccxtpro?\r\n\r\nThank You so Much",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7919/comments",
    "author": "dramasea",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-02T18:50:54Z",
        "body": "Hi! Yes, we hope to get it done this month, if everything goes well. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 7865,
    "title": "How to dynamically change proxies for an async exchange?",
    "created_at": "2020-10-26T12:57:24Z",
    "closed_at": "2020-10-26T13:22:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7865",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.7\r\n- CCXT version: 1.34.11\r\n\r\nHi! I use async_utils with a proxy (a ThreadPool is also allocated for each proxy) and for each proxy I have to create connector and session.\r\n\r\nHow correct is this and can I specify a proxy without creating a session?\r\n```\r\n    tasks = [] \r\n    start = time()\r\n\r\n    connector = aiohttp_socks.ProxyConnector.from_url(proxy.socks, loop=loop)  \r\n    session = aiohttp.ClientSession(connector=connector, loop=loop, timeout=500)  \r\n\r\n    exchange_class = getattr(async_support, ex_wrap.ex_type)\r\n    exchange_client = exchange_class({\r\n        'asyncio_loop': loop,\r\n        'session': session,\r\n        'apiKey': api_key,\r\n        'secret': api_secret,\r\n        'recvWindow': 10000000000,\r\n        'verbose': False,\r\n        'enableRateLimit': True,\r\n    })\r\n\r\n    for symbol in tickers:\r\n        tasks.append(exchange_client.fetch_my_trade(symbol, since=since))\r\n    all_trades = await asyncio.gather(*tasks)\r\n    await connector.close()\r\n    await session.close()\r\n    await exchange_client.close()\r\n    return all_trades\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7865/comments",
    "author": "4nzor",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-26T13:22:09Z",
        "body": "> How correct is this and can I specify a proxy without creating a session?\r\n\r\nThat is correct. I don't think that `aiohttp` offers a different way of using multiple proxies in parallel, unless you write a new session subclass of your own to manage your connections and their states.\r\n\r\nBut you can do `exchange.session = proxy_session_1`, `exchange.session = proxy_session2` on the fly.\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7848,
    "title": "\"Sub-account function is not enabled\" Error for Binance API",
    "created_at": "2020-10-21T13:28:14Z",
    "closed_at": "2020-10-21T17:10:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7848",
    "body": "Hi guys, trying to query my sub-account history.  I use this api for trading on Binance Futures and it works fine, but when I run the following code I get an error:\r\n\r\n```\r\nbinance.wapiGetSubAccountTransferHistory({'email':'xxx@xxx.com'})\r\n```\r\nError: \r\n```\r\nccxt.base.errors.ExchangeError: binance {\"msg\":\"Sub-account function is not enabled.\",\"success\":false}\r\n```\r\n\r\nAny ideas whats wrong here?\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7848/comments",
    "author": "charlesedwards",
    "comments": [
      {
        "user": "charlesedwards",
        "created_at": "2020-10-21T13:29:10Z",
        "body": "@kroitor 🙏 "
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-21T17:10:32Z",
        "body": "@charlesedwards that message is coming from Binance API itself, it tells you to enable sub-accounts on the API Key. I think you should check the sub-account checkbox in your API key settings on the Binance website. Let us know if that does not help."
      }
    ]
  },
  {
    "number": 7830,
    "title": "[binance] Is it possible to access coin-margined (delivery) futures?",
    "created_at": "2020-10-19T13:38:26Z",
    "closed_at": "2020-10-19T13:43:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7830",
    "body": "I can access binance USDT futures with {'defaultType': 'future'}\r\nBut is it possible to access binance COIN futures ? (ex. BTCUSD Quarterly 1225)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7830/comments",
    "author": "takei0723",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-19T13:43:08Z",
        "body": "Yes:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': 'delivery',\r\n    },\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```"
      },
      {
        "user": "takei0723",
        "created_at": "2020-10-19T13:48:43Z",
        "body": "Thank you very much !!"
      }
    ]
  },
  {
    "number": 7821,
    "title": "How to filter all the spot markets? ",
    "created_at": "2020-10-17T13:37:35Z",
    "closed_at": "2020-10-19T13:39:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7821",
    "body": "I found that markets in some exchange may have `spot: true` but some may not! Is there a common way to filter all the spot markets in every exchange?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7821/comments",
    "author": "Cinux-Chosan",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-10-17T15:32:30Z",
        "body": "there is no common way to filter out all the spot markets, this aspect has not been fully unified yet. But we are looking to do add support to distinguish between:\r\n\r\n* spot markets\r\n* spot with margin\r\n* futures markets with an expiry\r\n* futures with no expiry and perpetual interest"
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-19T13:39:02Z",
        "body": "@Cinux-Chosan In most cases, you can assume that either the `type` and `spot` indicate whether this is a spot market or not, and in cases where both `type` and `spot` are missing, you can assume that it is a spot market. However, since this lib is a work progress, there may be some quirks. Let us know if you find inconsistencies, and we will fix those as soon as we can. After the unification of all markets is complete, there will be proper values in the `type` field everywhere. \r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7784,
    "title": "Method watchCreateOrder",
    "created_at": "2020-10-14T07:20:41Z",
    "closed_at": "2020-10-14T09:28:15Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7784",
    "body": "Hello,\r\n\r\nI try to figure out what can be done with the current version of CCXP Pro, could you confirm creation/cancellation of orders isn't available? at Binance or another exchange. \r\n\r\nThank you,",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7784/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-14T09:28:15Z",
        "body": "@Kinzowa in most cases the order creation and cancellation is not available via the WS API. Binance does not offer that functionality. The WS usage pattern is such that you subscribe to watch WS order updates (watchOrders), then place a new order vis REST (createOrder) and then receive the updates about it via the WS subscription (watchOrders). That is what a `watchCreateOrder` will do in CCXT when we add it (hopefully soon). Some exchanges allow creating orders via WS – we are covering that as well, but at this time it is not fully implemented yet. We will ping you when it arrives. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7754,
    "title": "How to watch open positions at Binance with websocket and CCXT Pro?",
    "created_at": "2020-10-11T21:09:41Z",
    "closed_at": "2020-10-11T21:12:32Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7754",
    "body": "Hello,\r\n\r\nI was wondering if it is possible to watch positions at Binance with the CCXT pro version? seems there is no watchPosition() available for a websocket alternative to fapiPrivateGetPositionRisk(). \r\n\r\nThank you,",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7754/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-11T21:12:32Z",
        "body": "Hi! \r\n\r\n> I was wondering if it is possible to watch positions at Binance with the CCXT pro version?\r\n\r\nNot yet, but it's in the works right now.\r\n\r\n> seems there is no watchPosition() available for a websocket alternative to fapiPrivateGetPositionRisk().\r\n\r\nWe hope to get it implemented and unified asap.\r\n\r\nLet us know if the above does not answer your question."
      }
    ]
  },
  {
    "number": 7691,
    "title": "[bittrex] watchOrderBook",
    "created_at": "2020-10-06T09:57:12Z",
    "closed_at": "2020-10-07T20:18:48Z",
    "labels": [
      "enhancement",
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7691",
    "body": "Calling `watchOrderBook` on bittrex results in the following error:\r\n\r\n```\r\nTypeError [ERR_INVALID_ARG_TYPE]: The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type undefined\r\n    at Function.from (buffer.js:293:9)\r\n    at Object.inflate64 (node_modules/ccxt.pro/js/base/functions.js:10:28)\r\n    at bittrex.inflate64 (node_modules/ccxt.pro/js/base/Exchange.js:19:26)\r\n    at bittrex.handleExchangeState (node_modules/ccxt.pro/js/bittrex.js:910:31)\r\n    at bittrex.handleSubscriptionStatus (node_modules/ccxt.pro/js/bittrex.js:1017:20)\r\n    at bittrex.handleMessage (node_modules/ccxt.pro/js/bittrex.js:1064:18)\r\n```\r\n\r\nI trapped the problematic message:\r\n\r\n```\r\n{\r\n  I: '1601977997791',\r\n  E: \"There was an error invoking Hub method 'c2.QueryExchangeState'.\"\r\n}\r\n```\r\n\r\nI'm calling it with these  'ADA/BTC' and this:\r\n\r\n        const exchange = new ccxtpro[exchangeId]({\r\n            enableRateLimit: true,\r\n            timeout: 60 * 1000\r\n        });\r\n\r\n(will try to narrow the problem down)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7691/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-06T10:05:08Z",
        "body": "It is temporarily broken after it was updated to v3, the WS implementation still hits v2, the work on Bittrex WS v3 is done by 90% at this point and we will most likely merge it today."
      },
      {
        "user": "npomfret",
        "created_at": "2020-10-06T10:06:20Z",
        "body": "ah I see, thanks"
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-07T20:40:23Z",
        "body": "Upgraded to v3 in CCXT Pro 0.4.1+. Thanks for your feedback!"
      }
    ]
  },
  {
    "number": 7681,
    "title": "AttributeError: 'huobipro' object has no attribute 'purge_cached_orders'",
    "created_at": "2020-10-03T05:25:16Z",
    "closed_at": "2020-10-03T05:26:49Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7681",
    "body": "I recently upgraded from `ccxt==1.26.54 ccxtpro==0.1.73` and am now getting this error.  Was the functionality removed?\r\n\r\n- OS: ubuntu 16\r\n- Programming Language version: python 3.6\r\n- CCXT version: `ccxt=1.35.2 pro==0.3.88`\r\n\r\n```\r\nc = ccxtpro.huobipro()\r\nc.purge_cached_orders(c.milliseconds())\r\n```\r\n\r\n```\r\nAttributeError: 'huobipro' object has no attribute 'purge_cached_orders'\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7681/comments",
    "author": "jaseisen105",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-03T05:26:49Z",
        "body": "@jaseisen105 yes, the old order cache is replaced with a better caching mechanism in CCXT Pro, which purges itself automatically keeping its size below `exchange.options['ordersLimit']`.\r\n\r\nThe leftovers of the `.orders` cache will be removed from CCXT.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "fizzyfuzzle",
        "created_at": "2020-10-05T12:05:57Z",
        "body": "@kroitor Just to be sure..\r\nThe old 'purge_cached_orders' is removed from CCXT and replaced by the `exchange.options['ordersLimit']` option in CCXP **Pro** only? Or is the 'ordersLimit' option also working in the **normal** version of CCXT? Or is the complete functionality removed from the normal CCXT version?"
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-05T12:07:37Z",
        "body": "@marcoismobile the order cache will be removed from the base version of CCXT, and will be detached to a standalone plugin/adapter along with the purge functionality for those who need it (this is a work in progress)."
      }
    ]
  },
  {
    "number": 7673,
    "title": "[Bittrex v3] FetchTickers() uses wrong bittrex endpoint",
    "created_at": "2020-10-02T16:33:21Z",
    "closed_at": "2020-10-04T17:16:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7673",
    "body": "- OS: any\r\n- Programming Language version: node.js\r\n- CCXT version: 1.34.89\r\n\r\nfetchTickers() uses bittrex endpoing \"v3/markets/summaries\" which doesn't contain all the necessary data anymore (bid, ask, last, etc.). \r\n\r\nIt contains only:\r\n```\r\n {\r\n    \"symbol\": \"string\",\r\n    \"high\": \"number (double)\",\r\n    \"low\": \"number (double)\",\r\n    \"volume\": \"number (double)\",\r\n    \"quoteVolume\": \"number (double)\",\r\n    \"percentChange\": \"number (double)\",\r\n    \"updatedAt\": \"string (date-time)\"\r\n  }\r\n\r\n```\r\nccxt ticker result:\r\n```\r\n\r\nsymbol = \"4ART/BTC\"\r\ntimestamp = 1601654835640\r\ndatetime = \"2020-10-02T16:07:15.640Z\"\r\nhigh = 0.00000216\r\nlow = 0.00000194\r\nbid = undefined\r\nbidVolume = undefined\r\nask = undefined\r\naskVolume = undefined\r\nvwap = undefined\r\nopen = undefined\r\nclose = undefined\r\nlast = undefined\r\npreviousClose = undefined\r\nchange = undefined\r\npercentage = 4.88\r\naverage = undefined\r\nbaseVolume = 99926.42440523\r\nquoteVolume = 0.20895793\r\n```\r\nThe same for fetchTicker(symbol).",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7673/comments",
    "author": "krychla1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-02T21:03:59Z",
        "body": "@krychla1 which endpoint would you suggest instead?"
      },
      {
        "user": "brotolisk",
        "created_at": "2020-10-04T07:10:10Z",
        "body": "> \r\n> \r\n> @krychla1 which endpoint would you suggest instead?\r\n\r\n/v3/markets/tickers\r\n```\r\n\r\n[\r\n  {\r\n    \"symbol\": \"string\",\r\n    \"lastTradeRate\": \"number (double)\",\r\n    \"bidRate\": \"number (double)\",\r\n    \"askRate\": \"number (double)\"\r\n  }\r\n]\r\n```"
      }
    ]
  },
  {
    "number": 7643,
    "title": "huobipro future Whether to support wss ?",
    "created_at": "2020-09-29T15:12:08Z",
    "closed_at": "2022-07-17T08:24:25Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7643",
    "body": "huobipro future Whether to support wss ?\r\n\r\n\r\nhuobipro does not have market symbol market.btc_cq.trade.detail\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7643/comments",
    "author": "otccoin",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-03T15:13:03Z",
        "body": "We will add it as soon as we can."
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-17T08:24:25Z",
        "body": "Huobi is in WS as you can also see in readme."
      }
    ]
  },
  {
    "number": 7602,
    "title": "Get URL of some order or private query ",
    "created_at": "2020-09-16T03:54:39Z",
    "closed_at": "2020-09-17T00:36:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7602",
    "body": "Greetings. \r\n\r\nGiven symbol, amounts, api keys... It is possible to get the signed URL from ccxt?, for example I want to use the layer of signature and composition of the url, with the parameters, and get complete url string. \r\n\r\nI am language agnostic, but i can work in python or php. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7602/comments",
    "author": "bashman",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-09-16T11:37:00Z",
        "body": "yes, you can overwrite fetch as so - \r\n\r\n\r\n```\r\ndef wrapper(func):\r\n    def inner(url, *args):\r\n        print(url)\r\n        return func(url, *args)\r\n    return inner\r\n\r\nexchange = ccxt.binance()\r\nexchange.fetch = wrapper(exchange.fetch)\r\nexchange.fetch_order_book('ETH/BTC')\r\n# make any request here\r\n```"
      }
    ]
  },
  {
    "number": 7582,
    "title": "Test placing order",
    "created_at": "2020-09-11T05:41:14Z",
    "closed_at": "2020-09-11T19:23:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7582",
    "body": "Hi,\r\n\r\nI was trying to test placing an order (on bitmex) using:\r\n\r\n```\r\nparams = {\r\n    'test': True,  # test if it's valid, but don't actually place it\r\n}\r\n```\r\n\r\nI wasn't able to find anything better and it also seem to didn't work. Is there a way of testing an order placement on Bitmex?\r\n\r\nThank you very much!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7582/comments",
    "author": "bitog",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-09-11T19:23:23Z",
        "body": "@bitog hi! All exchanges do it differently, so it's hard to fully unify this aspect. Some exchanges allow you to submit a flag to test order placement. Other exchanges have sandboxes/testnets, basically the same thing as a real exchange, except that all money is virtual. In case of BitMEX you want to switch to a testnet, this is done like so:\r\n\r\n```Python\r\nimport ccxt\r\n\r\nexchange = ccxt.bitmex({\r\n    'enableRateLimit': True,\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n})\r\n\r\nexchange.set_sandbox_mode(True)\r\n\r\norder = exchange.create_order(symbol, type, side, amount, price)\r\n```\r\n\r\nHope that answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 7572,
    "title": "what is the issue , kindly help me",
    "created_at": "2020-09-08T05:39:27Z",
    "closed_at": "2020-09-08T05:42:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7572",
    "body": "I am using bybit testnet account for trading when I do some trading programatically,  It is showing this transaction via a notification on the portal but it is not showing our orders in the position bar or active order bar. what is the issue,\r\nkindly help me.\r\n\r\nThanks in advance!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7572/comments",
    "author": "AsadullahSoomro",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-09-08T05:42:52Z",
        "body": "I'd suggest to forward this question to Bybit's tech support, since we don't maintain or control the Bybit's testnet website. You can create and fetch your Bybit testnet orders with CCXT using the unified API as documented in the CCXT Manual, but we're not responsible for the working of the Bybit's website."
      }
    ]
  },
  {
    "number": 7562,
    "title": "How to get all trade's history",
    "created_at": "2020-09-05T16:56:43Z",
    "closed_at": "2020-09-10T03:27:12Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7562",
    "body": "\r\nHi,\r\nHow to get all trade's history?\r\n\r\nbroker : FTX\r\npython: 3.7\r\n\r\n```\r\nprint(\"\\n\\n=============fetchHistoryTrades=============\")\r\nd = exchange.parse8601('2020-08-24T00:00:00Z')\r\nfetchTrades = exchange.fetchOrders(\r\n    symbol=symbol, since=d, limit=1000, params={})\r\n#print(fetchTrades)\r\nprint('Total ' + str(len(fetchTrades)) + ' rows.')\r\n```\r\n\r\nOutput:\r\n```\r\n=============fetchHistoryTrades=============\r\nTotal 200 rows.\r\n         timestamp                  datetime info.future  info.price info.side  info.size average\r\n0    1599317885938  2020-09-05T14:58:05.938Z    BTC-PERP     10426.0      sell     0.0004    None\r\n1    1599317903313  2020-09-05T14:58:23.313Z    BTC-PERP     10426.0      sell     0.0004    None\r\n2    1599317919718  2020-09-05T14:58:39.718Z    BTC-PERP     10426.0      sell     0.0003    None\r\n3    1599317936391  2020-09-05T14:58:56.391Z    BTC-PERP     10426.0      sell     0.0004    None\r\n4    1599317952884  2020-09-05T14:59:12.884Z    BTC-PERP     10426.0      sell     0.0004    None\r\n..             ...                       ...         ...         ...       ...        ...     ...\r\n195  1599322190123  2020-09-05T16:09:50.123Z    BTC-PERP     10335.0      sell     0.0002    None\r\n196  1599322206515  2020-09-05T16:10:06.515Z    BTC-PERP     10335.0      sell     0.0002    None\r\n197  1599322223591  2020-09-05T16:10:23.591Z    BTC-PERP     10335.0      sell     0.0002    None\r\n198  1599322240229  2020-09-05T16:10:40.229Z    BTC-PERP     10335.0      sell     0.0002    None\r\n199  1599322273626  2020-09-05T16:11:13.626Z    BTC-PERP     10335.0      sell     0.0001    None\r\n```\r\n\r\nFirst trade : 24/08/2020 23:40\r\n\r\nBest Regards\r\nNattapon",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7562/comments",
    "author": "shoichi-dev",
    "comments": [
      {
        "user": "shoichi-dev",
        "created_at": "2020-09-10T03:27:12Z",
        "body": "change :\r\n```\r\nfetchTrades = exchange.fetchOrders(\r\n    symbol=symbol, since=d, limit=1000, params={})\r\n```\r\n\r\nto : \r\n```\r\nfetchTrades = exchange.fetchMyTrades(symbol, start_time, 300, {\r\n        'order': 'asc',\r\n    })\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2020-09-10T03:49:39Z",
        "body": "@shoichi-dev thx for reporting back!"
      }
    ]
  },
  {
    "number": 7507,
    "title": "Do the recent metainfo update PRs suggest incoming deprecation?",
    "created_at": "2020-08-24T10:27:20Z",
    "closed_at": "2020-08-24T11:14:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7507",
    "body": "I noticed that @An-Net has updated many `has` dicts of different exchanges, sometimes e.g. adding `'fetchTicker': true` despite it already being defaulted in the Exchange base class. Does this mean there is a plan to default all to `False`? (I'm asking because in that case I'll have to make some changes in my own repos).",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7507/comments",
    "author": "binares",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-08-24T11:00:38Z",
        "body": "Not necessarily, I would just say it is more complete to have all the `has` properties in the derived (subclass) exchange files."
      },
      {
        "user": "binares",
        "created_at": "2020-08-24T11:14:01Z",
        "body": "Ah, that explains it, thanks."
      }
    ]
  },
  {
    "number": 7500,
    "title": " python No module named 'ccxt'，what should I do?",
    "created_at": "2020-08-22T16:48:44Z",
    "closed_at": "2020-08-22T17:26:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7500",
    "body": "\r\nwhat should I do?\r\nIm win10 python 3.7.3,allredy install cctx1.0.0,but still No module named 'ccxt',help me!!\r\n\r\n- OS:win10\r\n- Programming Language version:python\r\n- CCXT version:1.0.0\r\n\r\nNo module named 'ccxt'\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7500/comments",
    "author": "keyvin-wei",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-22T16:50:31Z",
        "body": "Which command do you use to install it? \r\n\r\nMake sure you do not confuse `cctx` (this is a wrong name, just a stub) with `ccxt` (this is the actual package name). "
      },
      {
        "user": "kroitor",
        "created_at": "2020-08-22T17:26:31Z",
        "body": "@keyvin-wei let us know if the above answer does not help resolve it. Feel free to reopen this issue or just ask further questions if any."
      },
      {
        "user": "keyvin-wei",
        "created_at": "2020-08-23T05:22:12Z",
        "body": "ok，i type a wrong letter，is “ccxt” not the “cctx”\r\n@kroitor thanks"
      }
    ]
  },
  {
    "number": 7469,
    "title": "phemex decimal issue watch_order_book",
    "created_at": "2020-08-15T18:21:21Z",
    "closed_at": "2020-08-21T06:11:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7469",
    "body": "- OS: macOS 10.13.6\r\n- Programming Language version: 3.6.0\r\n- CCXT version: ccxt 1.33.15 | ccxtpro 0.3.43\r\n\r\n```\r\nclient = ccxtpro.phemex()\r\nwhile True:\r\n    ccxt_orderbook = await client.watch_order_book(\r\n        \"ETH/USD\",\r\n        params={}\r\n    )\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"execution.py\", line 1669, in subscribe_book\r\n    params={}\r\n  File \"python3.6/site-packages/ccxtpro/phemex.py\", line 280, in watch_order_book\r\n    await self.load_markets()\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 180, in load_markets\r\n    raise e\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 176, in load_markets\r\n    result = await self.markets_loading\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 165, in load_markets_helper\r\n    currencies = await self.fetch_currencies()\r\n  File \"python3.6/site-packages/ccxt/async_support/phemex.py\", line 692, in fetch_currencies\r\n    maxAmount = float(self.decimal_to_precision(maxValueEv * precision, ROUND, 0.00000001, self.precisionMode))\r\n  File \"python3.6/site-packages/ccxt/base/decimal_to_precision.py\", line 74, in decimal_to_precision\r\n    missing = abs(dec) % precision_dec\r\ndecimal.InvalidOperation: [<class 'decimal.DivisionImpossible'>]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7469/comments",
    "author": "jaseisen105",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-15T22:07:15Z",
        "body": "@jaseisen105 does this work on your side?\r\n\r\n```Python\r\nimport ccxt\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.phemex({\r\n    'enableRateLimit': True,\r\n})\r\n\r\nexchange.verbose = True\r\n\r\nexchange.load_markets()\r\n```"
      },
      {
        "user": "jaseisen105",
        "created_at": "2020-08-16T16:21:58Z",
        "body": "@kroitor - unfortunately no, getting the same error"
      },
      {
        "user": "kroitor",
        "created_at": "2020-08-17T01:47:35Z",
        "body": "I don't have this issue in Python 3.6.9 and Python 3.7.2.\r\n\r\n```\r\nubuntu@ccxt:~/$ python3\r\nPython 3.6.9 (default, Jul 17 2020, 12:50:27)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> exchange = ccxt.phemex({'enableRateLimit': True})\r\n>>> exchange.load_markets()\r\n{'BTC/USD': {'percentage': True, 'tierBased': False, 'taker': 0.0075, 'maker': -0...\r\n>>> ccxt.__version__\r\n'1.33.17'\r\n```\r\n\r\nI think it may be related to your Python version (3.6.0).\r\nDo you have the same issue if you upgrade to a newer Python version? Let us know if you can upgrade it to rule out version conflicts. In the meantime I will try to reproduce it on my side with 3.6.0."
      },
      {
        "user": "jaseisen105",
        "created_at": "2020-08-21T06:11:15Z",
        "body": "@kroitor that worked, thanks!"
      }
    ]
  },
  {
    "number": 7465,
    "title": "digifinex. Invalid trade type",
    "created_at": "2020-08-14T15:33:01Z",
    "closed_at": "2020-08-15T00:30:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7465",
    "body": "- OS: macOs 10.15.6\r\n- Programming Language version: php 7.3.11\r\n- CCXT version: 1.33.7\r\n\r\n```\r\n$exchange_class = \"\\\\ccxt\\\\$name\";\r\n$exchange = new $exchange_class(array(\r\n    'uid'    => $uid,\r\n    'apiKey' => $apiKey,\r\n    'secret' => $secret,\r\n    'enableRateLimit' => true\r\n));\r\n\r\ntry {\r\n    $order = $exchange->create_order(\"LINK/USDT\", \"market\", \"buy\", 1);\r\n} catch (Exception $E) {\r\n    var_dump($E->getMessage());\r\n};\r\n```\r\n\r\n```\r\nInvalid trade type, valid value => buy/sell)\r\n```\r\nI can't buy anything, I don't understand what's the matter",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7465/comments",
    "author": "yen-a",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-15T00:30:02Z",
        "body": "Digifinex does not allow market orders with LINK/USDT, that specific pair allows limit orders only. You may want to forward your question to Digifinex tech support.\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -f examples/php/cli.php digifinex market LINK/USDT\r\nPHP v7.4.3\r\nCCXT v1.33.11\r\ndigifinex->market (LINK/USDT)\r\nArray\r\n(\r\n    [tierBased] =>\r\n    [percentage] => 1\r\n    [maker] => 0.002\r\n    [taker] => 0.002\r\n    [precision] => Array ([amount] => 2 [price] => 4)\r\n    [limits] => Array\r\n        (\r\n            [cost] => Array([min] => 1 [max] =>)\r\n            [price] => Array([min] => [max] =>)\r\n            [amount] => Array([min] => 0.2 [max] =>)\r\n        )\r\n    [id] => LINK_USDT\r\n    [symbol] => LINK/USDT\r\n    [base] => LINK\r\n    [quote] => USDT\r\n    [baseId] => LINK\r\n    [quoteId] => USDT\r\n    [active] => 1\r\n    [type] => spot\r\n    [spot] => 1\r\n    [margin] =>\r\n    [info] => Array\r\n        (\r\n            [order_types] => Array([0] => LIMIT)  // ←------------------------------------ HERE\r\n            [quote_asset] => USDT\r\n            [minimum_value] => 1\r\n            [amount_precision] => 2\r\n            [status] => TRADING\r\n            [minimum_amount] => 0.2\r\n            [symbol] => LINK_USDT\r\n            [is_allow] => 1\r\n            [zone] => INNOVATE\r\n            [base_asset] => LINK\r\n            [price_precision] => 4\r\n        )\r\n)\r\n```\r\n\r\nCompare that to the ETH/BTC pair:\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -f examples/php/cli.php digifinex market ETH/BTC\r\nPHP v7.4.3\r\nCCXT v1.33.11\r\ndigifinex->market (ETH/BTC)\r\nArray\r\n(\r\n    [tierBased] =>\r\n    [percentage] => 1\r\n    [maker] => 0.002\r\n    [taker] => 0.002\r\n    [precision] => Array([amount] => 4 [price] => 6)\r\n    [limits] => Array\r\n        (\r\n            [cost] => Array([min] => 0.0002 [max] =>)\r\n            [price] => Array([min] => [max] =>)\r\n            [amount] => Array([min] => 0.001 [max] =>)\r\n        )\r\n    [id] => ETH_BTC\r\n    [symbol] => ETH/BTC\r\n    [base] => ETH\r\n    [quote] => BTC\r\n    [baseId] => ETH\r\n    [quoteId] => BTC\r\n    [active] => 1\r\n    [type] => spot\r\n    [spot] => 1\r\n    [margin] =>\r\n    [info] => Array\r\n        (\r\n            [order_types] => Array([0] => LIMIT [1] => MARKET)   // ←------------------------------------ HERE\r\n            [quote_asset] => BTC\r\n            [minimum_value] => 0.0002\r\n            [amount_precision] => 4\r\n            [status] => TRADING\r\n            [minimum_amount] => 0.001\r\n            [symbol] => ETH_BTC\r\n            [is_allow] => 1\r\n            [zone] => MAIN\r\n            [base_asset] => ETH\r\n            [price_precision] => 6\r\n        )\r\n)\r\n```\r\n\r\nAll of the above is documented in the CCXT Manual. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7453,
    "title": "No live watch_ohlcv data for bitmex (ccxt pro)",
    "created_at": "2020-08-12T11:18:31Z",
    "closed_at": "2020-08-13T14:27:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7453",
    "body": "Hello, I've just bought the ccxt pro subscription to get access to the up to date ohlcv (BTC/USD) from the bitmex. But now I see the endpoint is 1 minute based and not live data (like binance). Is it possible to gather live ohlcv data from bitmex another way (I wanted to calculated the MACD live and because the rate limit of bitmex is only 60/min, I really want to use websockets)?\r\n\r\nCode:\r\n```python\r\nimport ccxtpro\r\nimport asyncio\r\n\r\nasync def main(loop):\r\n    exchange = ccxtpro.bitmex({'enableRateLimit': True, 'asyncio_loop': loop})\r\n    while True:\r\n        ohlcv = await exchange.watch_ohlcv('BTC/USD')\r\n        print(ohlcv)\r\n    await exchange.close()\r\n\r\nloop = asyncio.new_event_loop()\r\nloop.run_until_complete(main(loop))\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7453/comments",
    "author": "AlgoQ",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-13T14:27:37Z",
        "body": "> Is it possible to gather live ohlcv data from bitmex another way (I wanted to calculated the MACD live and because the rate limit of bitmex is only 60/min, I really want to use websockets)?\r\n\r\nYes. However, you should understand the types of data and how they relate to each other.\r\n\r\nOn an exchange market trades happen over time, all the time. The history of trades is the primary source of public data. Apart from that, the orders are placed, matched and canceled all the time, so, the orderbook is also your primary data.\r\n\r\nAll other public data types like tickers, OHLCV candles – are secondary types, derived from the primary sources.\r\n\r\nA ticker is nothing more than a statistical calculation over the trades and the orderbook – for 24 hours.\r\nAn OHLCV candle is nothing more than a statistical calculation over the trades – in intervals of 1m, 5m, 1h, 12h, 1d, etc.\r\n\r\nIt is up to the exchange to decide when and how frequently to update that calculation. This is why some exchanges like Binance can send you frequent updates (many times per minute). And some other exchanges can send you less frequent updates (once a minute, for example).\r\n\r\nIf you process the trades correctly, you should be able to calculate the OHLCV candles in real-time on your side. Suppose, you're calculating 1m-candles:\r\n\r\n- T = the timestamp the 1m-period in question\r\n- O = the price of the first trade within that minute (opening price)\r\n- H = the highest price of all trades within that minute\r\n- L = the lowest price of all trades within that minute\r\n- C = the price of the last trade within that minute (closing price)\r\n- V = volume:\r\n  - BaseVolume = the sum of amounts of all trades within that minute in base currency\r\n  - QuoteVolume = the sum of costs of all trades within that minute in quote currency\r\n\r\n↑ From there, logically, you can have your own OHLCVs built from trades on your side and those will be as close to real-time trades as possible.\r\n\r\nHope that answers your question."
      }
    ]
  },
  {
    "number": 7411,
    "title": "What happens if exchange.createLimitSellOrder call fails due to broken network connection?",
    "created_at": "2020-08-05T08:26:44Z",
    "closed_at": "2020-08-05T10:09:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7411",
    "body": "OS: Windows 10\r\nProgramming Language version: JavaScript v8.12.0\r\nCCXT version: 1.25.75\r\nExchange: binance\r\nMethod: exchange.createLimitSellOrder/exchange.createBuySellOrder\r\n\r\nConsider the following scenario:\r\n\r\nI am trying to create a sell order, for example:\r\n\r\n```\r\n        try\r\n        {\r\n            const newOrder = await exchange.createLimitSellOrder('BTC/USDT', 1000, 12000);\r\n        }\r\n        catch (e)\r\n        {\r\n            //what should I do here?\r\n        }\r\n\r\n```\r\nin your code inside `createLimitSellOrder` function implementation you send HTTP request, Binance receives it and creates the order, but within a nanosecond after that some bad guy unplugs a network cable, so you do not receive HTTP response and throw an exception because TCP connection is broken. At this point the order is created, but I do not have its ID.\r\n\r\nIs my understanding of this scenario correct?\r\n\r\nIf yes, the obvious workarounds are:\r\n\r\n1) Check the balance.\r\n2) Find the order by the price.\r\n3) Find the order by date.\r\n\r\nbut they all are not adult, but for children :)\r\n\r\nprobably a more adult way is to \r\n\r\n4) Call `exchange.FetchOpenOrders` and/or `exchange.FetchClosedOrders` and compare the result with previously saved orders.\r\n\r\nbut it is ugly.\r\n\r\nIs there a better way to handle this?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7411/comments",
    "author": "dmitriano",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-05T10:09:54Z",
        "body": "> If yes, the obvious workarounds are:\r\n>\r\n> Check the balance.\r\n> Find the order by the price.\r\n> Find the order by date.\r\n> but they all are not adult, but for children :)\r\n>\r\n> probably a more adult way is to\r\n>\r\n> Call exchange.FetchOpenOrders and/or exchange.FetchClosedOrders and compare the result with previously saved orders.\r\n\r\nThe general approach is to use all possible means to restore the order and to make sure that your logic works how you want it. Also, pay attention to error handling (try/catch and retries) while you are handling the errors with async methods.\r\n\r\nYou should use `fetchOrders` or `fetchOpenOrders` + `fetchClosedOrders` (whatever is available). \r\n\r\nYou should use the `clientOrderId` param where applicable. It's a user-specific order id, and you can identify your orders by matching them against a `clientOrderId`. So, if your order placement request reached the exchange, the order will have a `clientOrderId`. If you can't find the `clientOrderId` among your recent open and closed orders, that means, the order has not been placed.\r\n\r\nAlso, you can restore previously closed orders from `fetchMyTrades`. Sometimes the ledger entries from `fetchLedger` can help. \r\n\r\nIn pseudocode it would look like shown below, write the missing sections yourself:\r\n\r\n```JavaScript\r\nasync function restoreOrder (timestamp, symbol, type, side, amount, price, params) {\r\n\r\n    let done = false\r\n    \r\n    while (!done) {\r\n\r\n        let order = undefined\r\n\r\n        if (exchange.has.fetchOrders) {\r\n            try {\r\n                const orders = await exchange.fetchOrders (symbol)\r\n                order = restoreFromOrders (orders, timestamp, symbol, type, side, amount, price, params)\r\n                if (order !== undefined) {\r\n                    return order\r\n                }\r\n            } catch (e) {\r\n                // retry ?\r\n            }\r\n        } \r\n\r\n        if (exchange.has.fetchOpenOrders) {\r\n            // retry if necessary....\r\n            const openOrders = exchange.fetchOpenOrders (symbol)\r\n            order = restoreFromOrders (orders, timestamp, symbol, type, side, amount, price, params)\r\n            if (order !== undefined) {\r\n                return order\r\n            }\r\n        }\r\n\r\n        if (exchange.has.fetchClosedOrders) {\r\n            // ...\r\n        }\r\n\r\n        if (exchange.has.fetchMyTrades) {\r\n            // your logic here...\r\n        }\r\n\r\n        if (exchange.has.fetchLedger) {\r\n            // ...\r\n        }\r\n\r\n        // detect recent balance changes by matching against the balance history\r\n\r\n        // order not found == order placement failed and the order has not been placed or has not reached the exchange?\r\n    }\r\n}\r\n\r\nasync function restoreFromOrders (orders, timestamp, symbol, type, side, timestamp, amount, price, params) {\r\n\r\n    const clientOrderId = this.safeString (params, 'clientOrderId');\r\n    const ordersByClientOrderId = exchange.groupBy (orders, 'clientOrderId');\r\n\r\n    // console.log (ordersByClientOrderId)\r\n\r\n    const order = exchange.safeValue (ordersByClientOrderId, clientOrderId);\r\n\r\n    if (order === undefined) {\r\n\r\n        // not found\r\n        // restore by matching order timestamp, symbol, type, side, amount, price, etc\r\n        \r\n    } else {\r\n\r\n        return order\r\n    }\r\n}\r\n\r\nconst symbol = 'BTC/USDT'\r\nconst type = 'limit'\r\nconst side = 'sell'\r\nconst amount = 1000\r\nconst price = 12000\r\nconst clientOrderId = exchange.uuid ()\r\nconst params = { clientOrderId }\r\n\r\ntry {\r\n\r\n    let order = await exchange.createOrder (symbol, type, side, amount, price, params)\r\n\r\n} catch (e) {\r\n\r\n    // what should I do here?\r\n\r\n    const timestamp = exchange.milliseconds ()\r\n\r\n    order = await restoreOrder (timestamp, symbol, type, side, amount, price, params)\r\n\r\n}\r\n```\r\n\r\nHope that answers your question."
      }
    ]
  },
  {
    "number": 7313,
    "title": "Setting up STOP_LOSS orders AFTER Order is filled",
    "created_at": "2020-07-20T15:27:42Z",
    "closed_at": "2020-10-22T10:13:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7313",
    "body": "Hi,\r\n\r\nI am using **PYTHON** to access the **BINANCE** servers.\r\n\r\nI was wondering if there was a way to get a message from the server that an order is filled (completely).\r\n\r\nReason: the idea was that upon gettng the message that an order was filled, one can then create a **STOP_LOSS order.**\r\n\r\nMy understanding is that each ORDER can produce 1 or more TRADES.\r\n\r\nSo, in order to track when an order is filled, is one supposed to use **asyncio** to receive the message?\r\n\r\nTIA\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7313/comments",
    "author": "cadmufasa",
    "comments": [
      {
        "user": "fonzmeister",
        "created_at": "2020-10-22T09:57:37Z",
        "body": "It is better to just create a stoploss order straight away and use the param 'reduce only' and use the full amount you are willing to trade.\r\n\r\nWhat you are asking is technically possible, but pretty cumbersome. A 'reduce only' stop will decrease your current postion.\r\n\r\nSo if you want to open a position of 2.5 ETH but only 2 ETH is filled your stoploss will close your trade of 2 ETH and will not open a new postion of 0.5 ETH in the opposite direction"
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-22T10:13:10Z",
        "body": "@fonzmeister thanks for your help!\r\n\r\n@cadmufasa let us know if the above does not answer your question!"
      }
    ]
  },
  {
    "number": 7267,
    "title": "Bittrex Leveraged Account",
    "created_at": "2020-07-14T07:14:34Z",
    "closed_at": "2022-02-24T21:44:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7267",
    "body": "Hi, \r\n\r\ncould you implement, or provide assistance on how to initiate long/short on Bittrex on BTC, ETH and XRP markets?\r\n\r\nthank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7267/comments",
    "author": "AnimusXCASH",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-02-24T21:44:58Z",
        "body": "Hello, \r\n\r\nBittrex does not offer leveraged trading, meaning you cannot short on Bittrex"
      }
    ]
  },
  {
    "number": 7232,
    "title": "fetchTickers() methods for Bybit returns an array with missing \\ between base and quote currencies of the symbol",
    "created_at": "2020-07-07T08:54:12Z",
    "closed_at": "2020-07-07T13:43:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7232",
    "body": "- OS: Ubuntu 18.04.4 LTS\r\n- Programming Language version: Python 3.6.9\r\n- CCXT version: 1.27.54\r\n\r\n```\r\nimport ccxt\r\nt = ccxt.bybit()\r\nt = t.fetchTickers()\r\nt.keys()\r\n```\r\n\r\n```\r\ndict_keys(['BTCUSD', 'ETHUSD', 'EOSUSD', 'XRPUSD', 'BTCUSDT'])\r\n```\r\n\r\nHello, I don't know if it's a bug or not but I notice that the `fetchTickers()` method for Bybit returns a dictionary in which keys don't have the standard symbol name with `/` between the base and the quote for the market.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7232/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-07-07T10:38:56Z",
        "body": "Hi! This is mostly because those symbols actually stand for contracts (not spot pairs), and we're working on the unification for contract symbols to get it delivered as soon as we can. We hope to get this aspect resolved asap."
      },
      {
        "user": "Kinzowa",
        "created_at": "2020-07-07T13:43:48Z",
        "body": "Thanks for the answer Igor, keep up the good work."
      }
    ]
  },
  {
    "number": 7178,
    "title": "FTX fetch_order does not fetch \"conditional\" orders",
    "created_at": "2020-06-23T16:57:43Z",
    "closed_at": "2020-06-27T12:51:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7178",
    "body": "- OS:Windows 10\r\n- Programming Language version:Python 3.7.6\r\n- CCXT version:1.30.37\r\n\r\n```\r\nresult = ccxtinstance.fetch_order(id='123456789')\r\npprint.pprint(result)\r\n```\r\n\r\n```\r\nccxt.base.errors.OrderNotFound: ftx {\"error\":\"Order not found\",\"success\":false}\r\n```\r\n\r\nIf i try to get a so called (from FTX) \"conditional\" order via the method fetch_order i get an OrderNotFound error. Maybe the cause are the two different api-calls needed for the two ordertypes: \r\nGET /conditional_orders?market={market}\r\nand\r\nGET /orders?market={market}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7178/comments",
    "author": "r4VP4",
    "comments": [
      {
        "user": "xmatthias",
        "created_at": "2020-06-26T18:29:43Z",
        "body": "Your best bet is to fetch all conditional orders for this pair and filter locally.\r\n\r\n``` python\r\norders = ct.fetch_orders(pair, None, params={'type': 'stop'})\r\n\r\n[order for order in orders if order['id'] == order_id]\r\n```\r\n\r\n\r\nFTX conditional_orders endpoint does not allow you to filter on order_id ... \r\nUnfortunately, you MUST know what type the trigger-order was ...\r\n\r\nI had the same problem a while ago ... #6669 (see the comments further down ..).\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-06-27T12:51:01Z",
        "body": "@xmatthias thanks for your involvement!\r\n\r\n@r4VP4 let us know if the above answer does not help. Feel free to reopen this issue or just ask further questions, if any."
      }
    ]
  },
  {
    "number": 7171,
    "title": "[coinbasepro] error handling question",
    "created_at": "2020-06-22T08:56:00Z",
    "closed_at": "2020-06-22T10:46:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7171",
    "body": "When placing on order on CBP in a valid market, but a market that I do not have access to ( BTC/USD in this case), I get the following error: `ExchangeError: coinbasepro Trading pair not available`.  Is there a better class of error we could use for this scenario?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7171/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-22T09:51:01Z",
        "body": "@npomfret i'd suggest `PermissionDenied`, if that is the case, however, it's very hard to distinguish the cause of that message from other possible causes, like `BadSymbol`. Can you share the details on why you don't have the access to it? What would you suggest?"
      },
      {
        "user": "npomfret",
        "created_at": "2020-06-22T09:56:54Z",
        "body": "CBP limits access to fiat markets based on your location. I'm in the UK, and they don't appear to allow UK customers to trade in USD markets."
      },
      {
        "user": "kroitor",
        "created_at": "2020-06-22T10:05:56Z",
        "body": "@npomfret then I think `PermissionDenied` should satisfy this criteria, i'll do my best to add the handling for it asap."
      },
      {
        "user": "npomfret",
        "created_at": "2020-06-22T10:08:00Z",
        "body": "If I bodge the code and try to force a completely invalid market I get: `ExchangeError: coinbasepro Product not found`\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-06-22T10:10:18Z",
        "body": "@npomfret thanks, that helps a lot, i'll add a mapping for `Trading pair not available` shortly."
      },
      {
        "user": "Phionx",
        "created_at": "2023-11-03T18:33:24Z",
        "body": "Is there any way to tell if a trading pair is not available albeit being a valid market on CBP? \r\n\r\nI am, for example, unable to trade \"USDT/GBP\" and this is what my market info looks like from load_markets\r\n\r\n```\r\n{'id': 'USDT-GBP',\r\n 'symbol': 'USDT/GBP',\r\n 'base': 'USDT',\r\n 'quote': 'GBP',\r\n 'baseId': 'USDT',\r\n 'quoteId': 'GBP',\r\n 'active': True,\r\n 'type': 'spot',\r\n 'linear': None,\r\n 'inverse': None,\r\n 'spot': True,\r\n 'swap': False,\r\n 'future': False,\r\n 'option': False,\r\n 'margin': False,\r\n 'contract': False,\r\n 'contractSize': None,\r\n 'expiry': None,\r\n 'expiryDatetime': None,\r\n 'optionType': None,\r\n 'strike': None,\r\n 'settle': None,\r\n 'settleId': None,\r\n 'precision': {'amount': 0.01, 'price': 0.0001},\r\n 'limits': {'amount': {'min': None, 'max': None},\r\n  'price': {'min': None, 'max': None},\r\n  'cost': {'min': 0.72, 'max': None},\r\n  'leverage': {'min': None, 'max': None}},\r\n 'info': {'id': 'USDT-GBP',\r\n  'base_currency': 'USDT',\r\n  'quote_currency': 'GBP',\r\n  'quote_increment': '0.0001',\r\n  'base_increment': '0.01',\r\n  'display_name': 'USDT/GBP',\r\n  'min_market_funds': '0.72',\r\n  'margin_enabled': False,\r\n  'post_only': False,\r\n  'limit_only': False,\r\n  'cancel_only': False,\r\n  'status': 'online',\r\n  'status_message': '',\r\n  'trading_disabled': False,\r\n  'fx_stablecoin': True,\r\n  'max_slippage_percentage': '0.01000000',\r\n  'auction_mode': False,\r\n  'high_bid_limit_percentage': '0.03000000'},\r\n 'percentage': True,\r\n 'tierBased': True,\r\n 'maker': 0.004,\r\n 'taker': 0.006}\r\n```\r\n\r\nI would think that `trading_disabled` would be True, but it is not. \r\n\r\nAny help would be greatly appreciated, thank you!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-03T19:37:14Z",
        "body": "@Phionx \r\nThe problem is that the API reports it as a tradable market:\r\n```\r\n  'status': 'online',\r\n  'status_message': '',\r\n  'trading_disabled': False,\r\n```\r\n"
      },
      {
        "user": "Phionx",
        "created_at": "2023-11-04T05:13:27Z",
        "body": "Thanks for your response @carlosmiei !\r\n\r\nIs there any chance that ccxt is not pinging the Coinbasepro API properly to get this information or missing some logic in how tradable markets are determined? "
      },
      {
        "user": "npomfret",
        "created_at": "2023-11-08T14:49:55Z",
        "body": "I think (but am not 100% sure) is the Coinbase markets are closed to customers depending on their locality.  An unauthenticed api call won't know who you are, and so won't know which markets are available to you. If you're in the UK for example, it's possible that trading a USD pair isn't allowed, even though the market is operating correctly for other users."
      }
    ]
  },
  {
    "number": 7159,
    "title": "Binance exchange header missing",
    "created_at": "2020-06-19T20:36:09Z",
    "closed_at": "2020-06-19T21:48:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7159",
    "body": "Listening key is taken to receive user instant notifications in **UserDataStream** method in binance exchange. Then we can get notifications by connecting to the socket with the key. When used with ccxt, it is insufficient to receive return key notifications. According to my researches, **X-MBX-APIKEY** key should be added to the ccxt header. When I test with the codes below, this value does not appear in the header section.\r\n\r\n```\r\nvar exchange = new ccxt.binance({\r\n    'apiKey': 'xxxxxxxxxxxxx',\r\n    'secret': 'xxxxxxxxxx'\r\n});\r\n\r\nexchange.headers = {\r\n    'X-MBX-APIKEY' : 'xxxxxxx'\r\n};\r\n\r\nexchange.sapiPostUserDataStream().then(r => {\r\n\r\n    console.log(\"listen key \" , r.listenKey);\r\n\r\n    console.log(\"last_response_headers\" , exchange.last_response_headers);\r\n\r\n});\r\n```\r\n\r\nResponse\r\n\r\n```\r\nlisten key  xxxxxx-xxxxx-xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\r\nlast_response_headers {\r\n  'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n  Connection: 'keep-alive',\r\n  'Content-Length': '76',\r\n  'Content-Security-Policy': \"default-src 'self'\",\r\n  'Content-Type': 'application/json;charset=UTF-8',\r\n  Date: 'Fri, 19 Jun 2020 20:28:45 GMT',\r\n  Expires: '0',\r\n  Pragma: 'no-cache',\r\n  Server: 'nginx',\r\n  'Strict-Transport-Security': 'max-age=31536000; includeSubdomains',\r\n  Via: '1.1 5317564e96c9dceb46123f6c5f149a03.cloudfront.net (CloudFront)',\r\n  'X-Amz-Cf-Id': 'L9CjbvRnXtNhWlvy1pWXz5MIY5WyJQdapVGVUFxu1xZ-mnXl8O_Eg==',\r\n  'X-Amz-Cf-Pop': 'FRA50-C1',\r\n  'X-Cache': 'Miss from cloudfront',\r\n  'X-Content-Security-Policy': \"default-src 'self'\",\r\n  'X-Content-Type-Options': 'nosniff',\r\n  'X-Frame-Options': 'SAMEORIGIN',\r\n  'X-Webkit-Csp': \"default-src 'self'\",\r\n  'X-Xss-Protection': '1; mode=block'\r\n}\r\n```\r\n\r\n- OS: Windows 10\r\n- Programming Language version: Javascript\r\n- CCXT version: 1.25.89\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7159/comments",
    "author": "canerd7u",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-19T21:48:50Z",
        "body": "@canerd7u \r\n\r\n1. You're confusing HTTPS request headers (from you to Binance) with HTTPS response headers (from Binance to you).\r\n2. CCXT does handle the headers properly.\r\n3. The `X-MBX-APIKEY` header is a part of request headers, not response headers.\r\n4. You can use the verbose mode to verify which headers are sent from you towards the exchange, this is documented in the Manual.\r\n5. If you print out `last_response_headers` – you're printing the response headers from Binance to you – that is not how you verify that.\r\n6. CCXT already does handle the authentication and headers for you as described in the Manual, no need to set the `X-MBX-APIKEY` by hand.\r\n\r\nProper code to see your desired headers:\r\n\r\n```JavaScript\r\nvar exchange = new ccxt.binance ({\r\n    'apiKey': 'xxxxxxxxxxxxx',\r\n    'secret': 'xxxxxxxxxx'\r\n    'enableRateLimit': true, // required by the Manual\r\n    'verbose': true, // to see all requests and responses\r\n});\r\n\r\nexchange.sapiPostUserDataStream().then(r => {\r\n    console.log(\"listen key \" , r.listenKey);\r\n});\r\n```\r\n\r\nI'd highly recommend to carefully read the Manual from top to bottom at least once – it will save you a ton of time.\r\n\r\nLet us know if the above does not answer your question."
      }
    ]
  },
  {
    "number": 7116,
    "title": "Kucoin fetchBalance method returning empty data",
    "created_at": "2020-06-14T01:34:20Z",
    "closed_at": "2020-06-14T01:40:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7116",
    "body": "Hello,\r\nI have 2 accounts at Kucoin, when trying to call the fetchBalance method in one of them, the API returns the balance to me normally, but when calling this same method in another account, it returns me a json with empty data, why does this happen? I checked the Key / Secret / Phrase API and it is correct, because I am getting the status 200000\r\n\r\n- OS: CentOS 7\r\n- Programming Language version: JavaScript\r\n- CCXT version: 1.28.95\r\n\r\n```\r\nasync getBalance() {\r\n        let balance = []\r\n        try {\r\n            balance = await this.kucoin.fetchBalance()\r\n        } catch (e) {\r\n            let error = {\r\n                error: this.extractErrorMessage(e.message)\r\n            }\r\n            return error\r\n        }\r\n        return balance\r\n    }\r\n```\r\n\r\n```\r\n{ info: { code: '200000', data: [] },\r\n  free: {},\r\n  used: {},\r\n  total: {} }\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7116/comments",
    "author": "viniciussvl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-14T01:35:30Z",
        "body": "Hi! Have you deposited to the \"empty\" account?"
      },
      {
        "user": "viniciussvl",
        "created_at": "2020-06-14T01:39:48Z",
        "body": "Wonderful, that was it! What a silly mistake, I apologize. You can close this issue, if someone \"gets it wrong\" like me, you will find this topic haha"
      }
    ]
  },
  {
    "number": 7110,
    "title": "How to use test api?",
    "created_at": "2020-06-13T06:25:05Z",
    "closed_at": "2020-06-13T10:05:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7110",
    "body": "Hi, I notice that many exchanges have test accounts or apis such as Bitmex, thus their ccxt exchange instance have test url too. So is there a way for ccxt to use the test api automatically, instead of any error of bad Apikey or something else?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7110/comments",
    "author": "monk-after-90s",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-13T10:05:52Z",
        "body": "```Python\r\nimport ccxt\r\nexchange = ccxt.bitmex({\r\n    'enableRateLimit': True,\r\n})\r\nexchange.set_sandbox_mode(True)\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "monk-after-90s",
        "created_at": "2020-06-14T01:39:15Z",
        "body": "Thank you @kroitor "
      }
    ]
  },
  {
    "number": 7089,
    "title": "Hi! I want donate some Crypto~ Is that address correct?",
    "created_at": "2020-06-09T14:03:32Z",
    "closed_at": "2020-06-09T14:15:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7089",
    "body": "\r\nI am a CCXT user,  I want to donate some Crypto.\r\n\r\nI will transfer to your address as follows:\r\n\r\nETH 0x26a3CB49578F07000575405a57888681249c35Fd (ETH only)\r\nBTC 33RmVRfhK2WZVQR1R83h2e9yXoqRNDvJva\r\nBCH 1GN9p233TvNcNQFthCgfiHUnj5JRKEc2Ze\r\nLTC LbT8mkAqQBphc4yxLXEDgYDfEax74et3bP\r\n\r\nIs that correct? Is that OK?\r\n\r\nHope to your reply~\r\n\r\n\r\n                                                                                                     Wang\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7089/comments",
    "author": "kingwithsword",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-09T14:15:24Z",
        "body": "Hi! \r\n\r\nYes, those addresses are correct! Thank you for your support, we appreciate it!"
      }
    ]
  },
  {
    "number": 7070,
    "title": "Withdrawal without approval",
    "created_at": "2020-06-04T23:41:41Z",
    "closed_at": "2020-06-05T04:59:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7070",
    "body": "Does any one knows which are the exchanges that does not require approval to withdraw funds to a wallet address? Because I have not much money to buy enough BTC to test one by one in the exchanges list of the API. Any clue about this?\r\n\r\nThanks anyway",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7070/comments",
    "author": "yordanoweb",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-04T23:52:31Z",
        "body": "@yordanoweb actually, a lot of the exchanges allow that, the only additional thing they may require – is supplying the 2fa code in the params overrides for the `withdraw` method. The main point of the automation with the API is to avoid the need for manual action. Most of the certified exchanges will allow that, and the majority of the integrated exchanges will work as well. I don't have the exact list for you right away, unfortunately. "
      }
    ]
  },
  {
    "number": 7064,
    "title": "test mode for binance withdrawal",
    "created_at": "2020-06-04T04:47:36Z",
    "closed_at": "2020-06-04T04:52:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7064",
    "body": "Is there a way to do withdrawals in test mode for binance? Order create works in test parames test=true, but I need to test withdrawals as well.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7064/comments",
    "author": "benlvovsky",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-04T04:52:28Z",
        "body": "Nope, unfortunately, Binance does not have a wapi testnet yet."
      }
    ]
  },
  {
    "number": 7063,
    "title": "Any way to use credit card API to purchase bitcoin in ccxt?",
    "created_at": "2020-06-03T23:49:46Z",
    "closed_at": "2020-06-05T05:00:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7063",
    "body": "Do you have API to use credit card processing to buy bitcoin?\r\nI am writing online service for my client to charge credit cards (currently I use Stripe), put into his bank account, transfer to binance (maybe other exchange is better?), then buy bitcoin via exchange, then send this bitcoin to specified wallet.\r\nCan I simplify it with some credit API to buy via credit card?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7063/comments",
    "author": "benlvovsky",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-03T23:55:54Z",
        "body": "We don't have a unified processing for card payments yet, CCXT is focused on crypto for the most part. However, many exchanges allow you to deposit fiat directly, and do the conversion in-place, not involving a 3rd-party card payment processor like Stripe. You can use those exchanges with CCXT. \r\n\r\nAdding a unified fiat/cc processing is not our topmost priority right now, but we will look into the options and will let you know. Sending and receiving fiat globally in a unified way is generally harder in legal terms."
      },
      {
        "user": "benlvovsky",
        "created_at": "2020-06-03T23:59:38Z",
        "body": "Any suggestions which exchange provides CC API out of box?"
      },
      {
        "user": "kroitor",
        "created_at": "2020-06-04T00:02:10Z",
        "body": "@benlvovsky i think most of the exchanges certified in CCXT allow you to receive fiat/cc deposits, except the DEXes. I'd suggest to try the biggest and the most trusted ones, like Binance for example.\r\n\r\nP.S. this isn't really a CC-oriented API, they just handle a fiat deposit as any other/crypto deposit, though there may be some specifics."
      }
    ]
  },
  {
    "number": 7051,
    "title": "is dry run available in ccxt ( like freqtrade)?",
    "created_at": "2020-06-01T12:00:28Z",
    "closed_at": "2020-06-01T16:02:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7051",
    "body": "After reading the documentation, I wonder if it has any function like dry run? \r\n\r\n- OS: win10\r\n- Programming Language version:python\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7051/comments",
    "author": "john012343210",
    "comments": [
      {
        "user": "cj4c0b1",
        "created_at": "2020-06-01T13:21:35Z",
        "body": "Hi @AronWater \r\nAs far as I can remember there is no explicit dry_run, but you can simulate it in some ways like :\r\n1 - run without api keys. you can test public parts of the code.\r\n2 - inform optional parameter to cause erros when sending orders, like wrong order parameters.\r\n\r\nIn my case I implemented the dryrun option in my strategies, like you have on freqtrade.\r\nI believe that this is the recommended approach"
      },
      {
        "user": "kroitor",
        "created_at": "2020-06-01T16:02:18Z",
        "body": "@AronWater CCXT does support testnet/sandbox environments (for the exchanges having that functionality). You can switch to the exchange's testnet like so:\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.okex({\r\n    'enableRateLimit': True,\r\n})\r\nexchange.set_sandbox_mode(True)\r\n```\r\n\r\n↑ Let us know if that does not answer your question. Feel free to reopen it, or just ask further questions if any."
      }
    ]
  },
  {
    "number": 7033,
    "title": "How to get Huobi bid/ask price with watchTicker?",
    "created_at": "2020-05-28T13:16:00Z",
    "closed_at": "2020-05-28T13:34:22Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7033",
    "body": "Language: Python\r\n\r\nHi @kroitor \r\nI have decided to purchase ccxpro!\r\n\r\nTwo things that I have noticed initially:\r\n-The repository cannot be installed using Poetry (pip works fine), it has an exit code 1.\r\n-Huobi `watch_ticker` is not returning the \"ask\" or \"bid\", which is a bummer since I bought CCXTPRO for that reason 🤣 .\r\nI can use `watch_order_book`, but it will take me a lot of refactoring to do..\r\n\r\nIs it possible to add `\"ask\"/\"bid\"` to Huobipro? \r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7033/comments",
    "author": "Corfucinas",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-28T13:24:26Z",
        "body": "Hi @Corfucinas !\r\n\r\n> -The repository cannot be installed using Poetry (pip works fine), it has an exit code 1.\r\n\r\nWe haven't tested it with 3rd-party package managers, but will do our best to get there.\r\n\r\n> -Huobi watch_ticker is not returning the \"ask\" or \"bid\", which is a bummer since I bought CCXTPRO for that reason 🤣 .\r\n> Is it possible to add \"ask\"/\"bid\" to Huobipro?\r\n\r\nUnfortunately, not, because Huobi Pro does not provide that information via the WS ticker, here's how a ticker update from Huobi looks like:\r\n\r\n```\r\n2020-05-28T13:19:20.960Z onMessage {\r\n  ch: 'market.btcusdt.detail',\r\n  ts: 1590671960809,\r\n  tick: {\r\n    id: 215837272868,\r\n    low: 9053.9,\r\n    high: 9450.01,\r\n    open: 9160.36,\r\n    close: 9399.88,\r\n    vol: 373216777.90379894,\r\n    amount: 40485.241497971125,\r\n    version: 215837272868,\r\n    count: 457796\r\n  }\r\n}\r\n```\r\n\r\n↑ No bid/ask there to derive that data from. So, the only way to track current market prices is to use the orderbook feed. Or fallback to `fetchTicker` over REST.\r\n\r\nIn general, not all exchanges will consider bid/ask a part of the ticker, most often the ticker is limited to the 24 OHLCV + last public trade price. The ticker itself is just a second-order statistical 24-hour calculation (derived data) from the first-order realtime data based on the orderbook+trades. You can derive the ticker info from the source data on the user side.\r\n\r\nLet me know if the above does not answer your questions."
      },
      {
        "user": "Corfucinas",
        "created_at": "2020-05-28T13:33:16Z",
        "body": "Thanks for the prompt reply. I'll continue exploring the library. (I'll work around Huobi, you have some, they take some...one day a single websocket will provide us everything we need for quant!)\r\nyou may close the issue"
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-28T13:34:22Z",
        "body": "@Corfucinas thanks! Feel free to reopen it if needed, or just ask further questions if any. Thank you for using CCXT Pro."
      }
    ]
  },
  {
    "number": 6995,
    "title": "Binance watchOrders / watchBalance not returning a value immediately",
    "created_at": "2020-05-22T16:57:56Z",
    "closed_at": "2020-05-22T17:00:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6995",
    "body": "I try to use `watchOrders()` and `watchBalance()` but both with node.js and in the browser, after connecting to the websocket for private methods, there does not seem to be any communication. When I change below method from `watchBalance()` to `fetchBalance()` it does work fine.\r\n\r\n- OS: macOS 10.15.4\r\n- Programming Language version: NodeJS v12.16.3\r\n- CCXT version: pro 0.2.13\r\n\r\n```JavaScript\r\n'use strict';\r\n\r\nconst ccxtpro = require('.');\r\n\r\n(async () => {\r\n\r\n    const exchange = new ccxtpro.binance({ enableRateLimit: true })\r\n\r\n    exchange.apiKey = 'x';\r\n    exchange.secret = 'x';\r\n\r\n\r\n    (async () => {\r\n\r\n        while (true) {\r\n            try {\r\n                const balance = await exchange.watchBalance()\r\n                console.log(balance)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n\r\n    })()\r\n})()\r\n\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6995/comments",
    "author": "dsbaars",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:00:54Z",
        "body": "> there does not seem to be any communication.\r\n\r\nThe `watch*` methods only return a value when an update from the exchange comes in. When your balance changes – you will see a `watchBalance` response. This is how WebSocket feeds work – you get the updates in real-time, not the most recent historical state.\r\n\r\nTry launching a `watchBalance()` loop and change your balance by placing an order or by depositing/withdrawing/transferring (to trigger a change of your balance) – you will see the update returned from `watchBalance()`.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "dsbaars",
        "created_at": "2020-05-22T17:45:18Z",
        "body": "Thanks, this explains a lot although this behaviour is different from the other exchanges I used with WebSockets.\r\nAfter subscribing with Kraken for example the first message is the current state, after that you will get updates. I think this is the same with BitMEX as well. \r\nI'll try to solve this by doing a single fetch call first."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:47:53Z",
        "body": "@dsbaars yep, Binance does not send-in a snapshot of balance upon connecting, while some other exchanges like Kraken, BitMEX do. Let me know if you have further issues or difficulties with it. Thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:50:02Z",
        "body": "P.S. We will look into adding the balance snapshot to Binance, however, last time we've checked – there was no possibility to synchronize the RESTful balance response with the WS updates, because their RESTful endpoint for balance does not return a nonce/seq value that could be used for synchronization. So, it's up to the user to synchronize it, depending on the user's current state."
      }
    ]
  },
  {
    "number": 6993,
    "title": "How to use this.hmac for signature generation?",
    "created_at": "2020-05-22T16:08:56Z",
    "closed_at": "2020-05-22T17:24:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6993",
    "body": "Hi,\r\n\r\nI'm trying to write the sign method to an exchange, yet without success.\r\nThe problem happens in the signature generation.\r\n\r\nIn javascript: \r\n\r\nfunction generateSignature(key, secret, nonce) {\r\n   var message = nonce + key; \r\n   var hash = CryptoJS.HmacSHA256(message, secret);\r\n   var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);\r\n   return hashInBase64;\r\n}\r\n\r\nit works, but I'm in doubt how to write it with ccxt syntax. \r\nBased on the signature of other exchanges(I read binance, kraken, etc), I'm trying hash and hmac:\r\n\r\n         } else {\r\n             this.checkRequiredCredentials ();\r\n             const nonce = this.nonce ().toString ();\r\n             url += path;\r\n             const message = nonce + this.apiKey;\r\n             const hash = this.hash (this.encode (message), 'sha256', 'base64');\r\n             const signature = this.hmac (hash, this.encode (this.secret), 'sha256', 'base64');\r\n             headers = {\r\n                 'Content-Type': 'application/x-www-form-urlencoded',\r\n                 'key': this.apiKey,\r\n                 'nonce': nonce,\r\n                 'signature': signature,\r\n             };\r\n\r\nI'm getting: ccxt.base.errors.ExchangeNotAvailable: POST ...... 400 Bad Request {\"error\":true,\"data\":{\"message\":\"Invalid signature. Verify key and signature.\"}}\r\n\r\nCan anyone help me to translate the above generateSignature to the ccxt syntax?\r\n\r\nThank you.\r\n\r\nErico.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6993/comments",
    "author": "ericoacguedes",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-22T16:44:08Z",
        "body": "Non-CCXT:\r\n\r\n```JavaScript\r\nfunction generateSignature(key, secret, nonce) {\r\n   var message = nonce + key; \r\n   var hash = CryptoJS.HmacSHA256(message, secret);\r\n   var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);\r\n   return hashInBase64;\r\n}\r\n```\r\n\r\n↓\r\n\r\nCCXT:\r\n\r\n```JavaScript\r\n    const message = nonce + this.apiKey;\r\n    const signature = this.hmac (this.encode (message), this.encode (this.secret), 'sha256', 'base64');\r\n    headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'key': this.apiKey,\r\n        'nonce': nonce,\r\n        'signature': signature,\r\n    };\r\n```\r\n\r\nLet me know if that does not help."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T16:45:50Z",
        "body": "@ericoacguedes in other words, you don't need to `hash()` it in CCXT, just do `hmac()`. It would be great if you report back whether it solves the issue for you or not."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:24:03Z",
        "body": "I hope the above helped. Closing this for now, feel free to reopen it or just ask further questions if any."
      },
      {
        "user": "ericoacguedes",
        "created_at": "2020-05-22T17:30:16Z",
        "body": "Yes. It works. Thank you."
      }
    ]
  },
  {
    "number": 6983,
    "title": "[dsx] fetch orders broken",
    "created_at": "2020-05-20T09:52:37Z",
    "closed_at": "2020-05-20T10:16:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6983",
    "body": "I'm getting `dsx fetchOrders not supported`, but it is.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6983/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-20T10:08:10Z",
        "body": "> but it is.\r\n\r\nNope, I don't think it is. If you look into the actual response – both DSX and HitBTC will return closed orders from the \"active\" orders endpoint for some while. And then those orders will be moved to inactive orders (the status does not change). So it does not have a true fetchOrders endpoint for closed/canceled orders. It will also return partially filled orders from their historical endpoint. In other words, their \"active\" exchange-specific state has nothing to do with the \"open/closed\" unified status, really. That \"active\" state is time-based. \r\n\r\nIn other words, there's no strict one-to-one correspondence like:\r\n- active != open\r\n- inactive != closed\r\n\r\n↑ This API design differs from all other exchanges in that regard.\r\n\r\nBoth exchanges have `fetchOpenOrders` and `fetchClosedOrders`. But neither of them has `fetchOrders` for all orders, regardless of the \"active\" state and regardless of the \"open/closed\" status. Does that answer your question? Let me know, if I'm missing something."
      },
      {
        "user": "npomfret",
        "created_at": "2020-05-20T10:16:41Z",
        "body": "I see, thanks."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-20T10:16:56Z",
        "body": "Also, because of that \"active/inactive\" design both exchanges have fetchOrder (for \"historical\" orders which may be open/closed/canceled) and fetchOpenOrder (for querying an \"active\" order, which can also be open/closed/canceled). We think of renaming fetchOrder → fetchClosedOrder to match the API a little bit closer."
      }
    ]
  },
  {
    "number": 6982,
    "title": "[hitbtc] trade fee missing currency",
    "created_at": "2020-05-20T09:50:17Z",
    "closed_at": "2020-05-20T10:14:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6982",
    "body": "        {\r\n            \"info\": {\"id\": 849899156, \"clientOrderId\": \"c6349c2ef7734447a106cd3ac982c23b\", \"orderId\": 245637799183, \"symbol\": \"IOSTBTC\", \"side\": \"sell\", \"quantity\": \"6920\", \"price\": \"0.0000003764\", \"fee\": \"0.000001823282\", \"timestamp\": \"2020-05-20T02:21:55.024Z\"},\r\n            \"id\": \"849899156\",\r\n            \"order\": \"c6349c2ef7734447a106cd3ac982c23b\",\r\n            \"timestamp\": 1589941315024,\r\n            \"datetime\": \"2020-05-20T02:21:55.024Z\",\r\n            \"symbol\": \"IOST/BTC\",\r\n            \"side\": \"sell\",\r\n            \"price\": 3.764e-7,\r\n            \"amount\": 6920,\r\n            \"cost\": 0.002604688,\r\n            \"fee\": {\"cost\": 0.000001823282}\r\n        }",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6982/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-20T10:03:03Z",
        "body": "Do you have CCXT updated? Because I'm seeing this from parseTrade (i've added the edits to HitBTC for the feeCurrency specified in markets upon merging your PR).\r\n\r\nWith your trade posted above:\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli hitbtc fetchMyTrades --details\r\nhitbtc.fetchMyTrades ()\r\n-------------------------------------------\r\n{         info: {            id:  849899156,\r\n                  clientOrderId: \"c6349c2ef7734447a106cd3ac982c23b\",\r\n                        orderId:  245637799183,\r\n                         symbol: \"IOSTBTC\",\r\n                           side: \"sell\",\r\n                       quantity: \"6920\",\r\n                          price: \"0.0000003764\",\r\n                            fee: \"0.000001823282\",\r\n                      timestamp: \"2020-05-20T02:21:55.024Z\"          },\r\n            id:   \"849899156\",\r\n         order:   \"c6349c2ef7734447a106cd3ac982c23b\",\r\n     timestamp:    1589941315024,\r\n      datetime:   \"2020-05-20T02:21:55.024Z\",\r\n        symbol:   \"IOST/BTC\",\r\n          type:    undefined,\r\n          side:   \"sell\",\r\n  takerOrMaker:    undefined,\r\n         price:    3.764e-7,\r\n        amount:    6920,\r\n          cost:    0.002604688,\r\n           fee: { cost: 0.000001823282, currency: \"BTC\" }               }\r\n```\r\n\r\n↑ The fee currency is there in the most recent version of CCXT. You may have an outdated HitBTC file."
      },
      {
        "user": "npomfret",
        "created_at": "2020-05-20T10:14:13Z",
        "body": "Maybe thanks."
      }
    ]
  },
  {
    "number": 6968,
    "title": "[bitfinex1] Cann't request transactions for old symbols",
    "created_at": "2020-05-18T09:54:13Z",
    "closed_at": "2020-05-19T01:28:02Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6968",
    "body": "I would like to get my old transfers for BCH from bitfinex1.  The current implementation will translate the `code` argument for _BCH_ to _BAB_ because of the rename.  But pre-fork deposits are only accessible vis the old symbol _BCH_.  \r\n\r\nIf I call:\r\n\r\n    await exchange.fetchTransactions(undefined, 0, limit, {\r\n                    currency: currencyId,\r\n    });\r\n\r\nI get an error, because ccxt expected a currency code param.  Can we make a change so that if a `currency` param is supplied, then the first parameter can be undefined?  IMO this should be a general pattern. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6968/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-18T09:58:22Z",
        "body": "> Can we make a change so that if a currency param is supplied, then the first parameter can be undefined?\r\n\r\nWe will look into that, in the meantime, you can workaround this by supplying at least some non-empty currency code to `fetchTransactions()`.\r\n\r\n```JavaScript\r\nawait exchange.fetchTransactions('BTC', 0, limit, { currency: currencyId });\r\n```"
      },
      {
        "user": "npomfret",
        "created_at": "2020-05-18T10:21:56Z",
        "body": "Hmm, if I supply BTC, but put BCH in the currency param nothing comes back.  I guess it's getting filtered in ccxt?"
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-18T10:36:40Z",
        "body": "@npomfret yes, pardon, you are 100% right, will address that asap."
      },
      {
        "user": "npomfret",
        "created_at": "2020-05-19T08:36:00Z",
        "body": "@kroitor thank you again for looking at this so quickly - much appreciated"
      }
    ]
  },
  {
    "number": 6961,
    "title": "Position Open Date",
    "created_at": "2020-05-17T13:59:44Z",
    "closed_at": "2020-05-17T17:08:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6961",
    "body": "Hi guys, \r\nOn deribit, I would like to know the date (timestamp) a position has been opened at. \r\nI am aware I can get timestamp for trades, but is there any way to do the same for a position ?\r\nThanks in advance for any insight!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6961/comments",
    "author": "Thjdid",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-17T17:08:42Z",
        "body": "Hi!\r\n\r\n> I am aware I can get timestamp for trades, but is there any way to do the same for a position ?\r\n\r\nYour position is a cumulative result all your buy/sell orders. The position exists at zero if you haven't placed any orders. When you place an order your position grows from zero up, when you place an opposite order your position shrinks down to zero. It exists regardless of the size of the position (a zero position is also called a neutral position). Therefore a position is not supposed to have a timestamp, really. So, the opening timestamp of your position is the timestamp of your first order that changed your position.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "Thjdid",
        "created_at": "2020-05-18T01:07:34Z",
        "body": "Hi Kroitor, \r\nThanks for the explanation, it totally makes sense. That's what I thought but I am always happy to get you point of view for confirmation :). \r\n\r\n"
      }
    ]
  },
  {
    "number": 6958,
    "title": "Error while running tests",
    "created_at": "2020-05-16T21:38:49Z",
    "closed_at": "2020-05-16T22:22:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6958",
    "body": "- OS: MacOS\r\n- CCXT version: Latest\r\n\r\nHi, I was testing private endpoints. My tests pass with js, but report errors in python\r\nThis is the line causing trouble\r\n\r\n```\r\ndata = {\r\n                'symbol': '/' + path + '/' + self.safe_string(params, 'symbol'),\r\n                'timeStamp_nonce': timeStamp_nonce,\r\n                'body': body,\r\n}\r\npayload = base64.b64encode(self.json(data))\r\n```\r\n\r\nError is \r\n\r\n```\r\n\t<class 'TypeError'> a bytes-like object is required, not 'str'\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6958/comments",
    "author": "abhishekr700",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-16T22:22:26Z",
        "body": "Hi @abhishekr700 !\r\n\r\nThe string has to be wrapped in `this.encode()` before converting it to base64 in Python (see other exchanges, in particular, how data is encoded with `this.encode()` in JS before base64ing in almost all implementations of the `sign()` function – cmd+f _\"this.stringToBase64\"_ throughout the repository). This is to make Python work (Python only). In other languages like JS and PHP `this.encode()` does nothing and simply returns its argument.\r\n\r\nLet me know if that does not help. Feel free to reopen it, or just ask further questions, if any."
      }
    ]
  },
  {
    "number": 6903,
    "title": "{ ExchangeError: binanceus {\"code\":-1102,\"msg\":\"Mandatory parameter 'quantity' was not sent, was empty/null, or malformed.\"}",
    "created_at": "2020-05-07T13:25:29Z",
    "closed_at": "2020-05-07T14:20:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6903",
    "body": "- OS: Windows 10\r\n- Programming Language version: Node Js\r\n- CCXT version: 6.14.4\r\n\r\nHello Igor,\r\n\r\ni am trying to edit an order initially placed as limit order to change it from limit to market order. I am receiving the error below:\r\n{ ExchangeError: binanceus {\"code\":-1102,\"msg\":\"Mandatory parameter 'quantity' was not sent, was empty/null, or malformed.\"}\r\n\r\nhere's my code snippet below:\r\n\r\ntry { myOrder = await exchange.editOrder(orderId, tradingPair, type, side, amount, price, {}); }\r\n\tcatch(err) {...}\r\n\r\nThanks in advance.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6903/comments",
    "author": "crossx4real",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-07T13:45:49Z",
        "body": "Hi!\r\n\r\nTry removing the `price` argument from there, as follows:\r\n\r\n```JavaScript\r\n// if it doesn't work uncomment the next line and paste your verbose request+response\r\n// exchange.verbose = true \r\ntry { myOrder = await exchange.editOrder(orderId, tradingPair, 'market', side, amount); }\r\ncatch(err) {...}\r\n```"
      },
      {
        "user": "crossx4real",
        "created_at": "2020-05-07T14:20:46Z",
        "body": "ok thank will do that. I hope you are enjoying the big swings on BTC this bull season.\r\n"
      },
      {
        "user": "crossx4real",
        "created_at": "2020-05-15T01:49:31Z",
        "body": "worked like a charm. sent you 100 BAT. just saying.... you got 90 days to claim it i think."
      }
    ]
  },
  {
    "number": 6861,
    "title": "binance use defaultLimitOrderType in create_limit_buy_order ",
    "created_at": "2020-04-28T04:51:07Z",
    "closed_at": "2020-04-28T07:08:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6861",
    "body": "Binance has 2 limit order types: `limit`, `limit_maker`\r\n\r\nWhen using `create_limit_buy_order` or `create_limit_sell_order` it seems to only use `limit` even if setting the `defaultLimitOrderType=limit_maker`\r\n\r\n```\r\nclient = ccxt.binance({\r\n  \"options\": {\"defaultLimitOrderType\": \"limit_maker\" }\r\n}\r\nclient.create_limit_buy_order(\"BTC/USDT\", 10, 1)\r\n```\r\n\r\n```\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6861/comments",
    "author": "jaseisen105",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-28T07:08:07Z",
        "body": "Hi!\r\n\r\nThe `defaultLimitOrderType` option is deprecated, since Binance has added many more order types.\r\n\r\nYou can place a LIMIT_MAKER order like so:\r\n\r\n```\r\nclient.create_order ('BTC/USDT', 'limit_maker', 'buy', 10, 1)\r\n```\r\n\r\nor\r\n\r\n```\r\nclient.create_order ('BTC/USDT', 'LIMIT_MAKER', 'buy', 10, 1)\r\n```\r\n\r\nLet us know if that does not help. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 6828,
    "title": "Open positions Cache purge",
    "created_at": "2020-04-21T19:11:54Z",
    "closed_at": "2020-04-21T19:28:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6828",
    "body": "Hello,\r\n\r\nWhen i cancel all open positions in bitmex and then call the `exchange.private_get_position` it still maintains the previous position. I have checked visually on bitmex and the position was closed correctly. Is the position cached? if so is there a purge function like for orders?.\r\n\r\nThank you in advance",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6828/comments",
    "author": "jimmi19",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-21T19:20:19Z",
        "body": "> it still maintains the previous position\r\n\r\nI think, your synthetic position is simply a cumulative result of all your orders. \r\n\r\nPlacing an order means \"entering a position\", placing an opposite order means \"exiting/closing a position\". The position starts existing since you've placed the first order with the exchange and it continues to \"exist\" after you \"close\" it. It is still there, with a status that shows how deep you're into it. \r\n\r\nPut even more simply: if the sum of your orders yields \"0\" – then you're not in position. If it yields a value different than 0 – then you're in either a long or a short position. You should devise your current status from the position's fields, which show you whether you're in it or not, and by how much, where a zero sum would mean you're not in that position (in other words – you're in a neutral position). Thus, the position exists regardless of whether you're in it or not, it's a \"virtual\" entity, if you like.\r\n\r\n> Is the position cached? \r\n\r\nI don't think so.\r\n\r\n> if so is there a purge function like for orders?.\r\n\r\nNope, not for BitMEX.\r\n\r\nLet me know if I'm missing something or if the above does not answer the question."
      },
      {
        "user": "jimmi19",
        "created_at": "2020-04-21T19:27:51Z",
        "body": "Hmm ok thanks I think I understand. Tomorrow I'm going to take a deeper look into the open positions fields and I will get back to you with what I find. But thanks for the rapid response really appreciate it."
      },
      {
        "user": "kroitor",
        "created_at": "2020-04-21T19:28:36Z",
        "body": "@jimmi19 sure, let us know if you encounter any difficulties. Closing it for now, if you don't mind. Feel free to reopen it or just ask further questions if any."
      }
    ]
  },
  {
    "number": 6815,
    "title": "Kraken: How to fetch current positions",
    "created_at": "2020-04-16T20:31:27Z",
    "closed_at": "2020-04-16T20:52:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6815",
    "body": "- Windows10\r\n- Python 3.7.6\r\n- CCXT version: 1.26.45\r\n\r\nHello, I'm stuck again, now with the integration of Kraken, I want to fetch the current positions. I tried hard but couldn't figure out how.\r\nFor example for Bitfinex I use the unified method\r\n```\r\nexchange.private_post_positions()\r\n```\r\n\r\nFor Kraken I found:\r\n```\r\n'private': {\r\n                    'post': [\r\n                       ...\r\n                        'Balance',\r\n                        ...\r\n                        'OpenOrders',\r\n                        'OpenPositions',\r\n                        ...\r\n                    ],\r\n\r\n```\r\nBut none of these work. For example: \r\n```\r\npositions = exchange.private_post_open_positions()\r\n```\r\nthrows me the error\r\n\r\n```\r\npositions = exchange.private_post_open_positions()\r\nAttributeError: 'kraken' object has no attribute 'private_post_open_positions'\r\n```\r\nWhat am I doing wrong? Please help...",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6815/comments",
    "author": "Princeton007",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-16T20:52:22Z",
        "body": "Hi!\r\n\r\nChange this:\r\n\r\n```Python\r\npositions = exchange.private_post_open_positions()\r\n```\r\n\r\nTo this ↓\r\n\r\n```Python\r\npositions = exchange.private_post_openPositions()\r\n# same as\r\n# positions = exchange.privatePostOpenPositions()\r\n```\r\n\r\n> What am I doing wrong?\r\n\r\nYou are not doing this to see which methods are available – that is wrong )\r\n\r\n```Python\r\nimport ccxt\r\nprint(dir(ccxt.kraken()))  # as documented in the Manual, to see which methods are there\r\n```\r\n\r\nor\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\npprint(dir(ccxt.kraken()))\r\n```\r\n\r\n↑ If you do that, you will obtain the answer to your question rather quickly )\r\n\r\nLet me know if that does not help."
      }
    ]
  },
  {
    "number": 6790,
    "title": "Ques: Margin trading unification ?",
    "created_at": "2020-04-14T07:35:17Z",
    "closed_at": "2020-04-14T10:47:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6790",
    "body": "Hi,\r\nI see margin trading is a pending task for Q2 as mentioned in the roadmap. I'm working on integrating a exchange and was wondering if there were any documentation on the future unified functions on margin trading so that I could implement them ? \r\nOr would it be better if I wait for the unification before going on to implement those in my exchange file ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6790/comments",
    "author": "abhishekr700",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-14T10:47:09Z",
        "body": "Hi!\r\n\r\nI suggest to wait until we upload the first documented specifications of the unified leveraged/positional/derivatives API to the Manual (currently working on those). We will also provide example implementations for some of the exchanges that have it, to make it easier to follow. Let me know if that does not answer the question. Thank you!"
      }
    ]
  },
  {
    "number": 6777,
    "title": "Composer Deprecation Notice",
    "created_at": "2020-04-11T15:36:38Z",
    "closed_at": "2022-07-16T14:53:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6777",
    "body": "For first time, installing thought Composer in a fresh project I receive these warnings (see below).\r\nIn other packages was caused by a `folder` being lower case while the source file was title case. \r\n\r\n`Deprecation Notice: Class ccxt\\RequestTimeout located in ./vendor/ccxt/ccxt/php/base/errors.php does not comply with psr-4 autoloading standard. It will not autoload anymore in Composer v2.0. in phar:///usr/local/bin/composer/src/Composer/Autoload/ClassMapGenerator.php:201`\r\n\r\n`Deprecation Notice: Class ccxt\\Exchange located in ./vendor/ccxt/ccxt/php/base/Exchange.php does not comply with psr-4 autoloading standard. It will not autoload anymore in Composer v2.0. in phar:///usr/local/bin/composer/src/Composer/Autoload/ClassMapGenerator.php:201`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6777/comments",
    "author": "gioacchinopoletto",
    "comments": [
      {
        "user": "rin4ik",
        "created_at": "2020-10-15T23:25:16Z",
        "body": "I get this warning as well. when it will be resolved @kroitor ?"
      },
      {
        "user": "kroitor",
        "created_at": "2020-10-21T11:15:09Z",
        "body": "@rin4ik @gioacchinopoletto we're working on it right now, hope to upload the edits soon."
      },
      {
        "user": "joostvanhoof",
        "created_at": "2021-02-16T20:28:36Z",
        "body": "I'm on v1.41.96 and composer v2 and get `... does not comply with psr-4 autoloading standard. Skipping.` for multiple classes. If I read through the issues linked above I think you've been looking into this and it's related to converting the JS into PHP right? If you need more info please let me know."
      },
      {
        "user": "gioacchinopoletto",
        "created_at": "2021-02-20T19:35:52Z",
        "body": "@kroitor many thanks!"
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-16T14:53:08Z",
        "body": "as of now, I don't get any such warning. if anyone will get any composer issue, feel free to open the issue."
      }
    ]
  },
  {
    "number": 6765,
    "title": "Closing position on Bybit?",
    "created_at": "2020-04-09T20:38:45Z",
    "closed_at": "2020-04-09T20:50:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6765",
    "body": "Hello, how to close open position using ccxt in bybit",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6765/comments",
    "author": "antebw",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-09T20:50:16Z",
        "body": "Hi! To close an open position you should simply place an opposite basic order or a conditional order that will trigger your stop condition. So, if you have opened a position by buying some number of contracts – then your should sell the same number of contracts which will effectively reduce your open position to zero (thus closing it). Let us know if that does not answer the question."
      },
      {
        "user": "antebw",
        "created_at": "2020-04-09T22:38:58Z",
        "body": "Thank you for fast response, yes this is working for me. Thx one more time."
      }
    ]
  },
  {
    "number": 6759,
    "title": "Some feed event ids are wrong in ccxtpro.binance",
    "created_at": "2020-04-09T05:59:10Z",
    "closed_at": "2020-04-09T07:43:14Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6759",
    "body": "CCXTPRO 0.1.40\r\n\r\nI experienced watch_order_book() and watch_orders() not working, digged the ccxtpro code, turns out some feed event ids must be changed.\r\n\r\nexecutionReport -> ORDER_TRADE_UPDATE\r\noutboundAccountInfo -> ACCOUNT_UPDATE\r\n\r\nBinance API docs do confirm this.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6759/comments",
    "author": "subtletech",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-09T07:41:42Z",
        "body": "Hi!\r\n\r\nThe `watchOrders` method is a work in progress, we will fix it soon. Thx!"
      }
    ]
  },
  {
    "number": 6745,
    "title": "Question: Binance futures account balance history",
    "created_at": "2020-04-07T01:34:43Z",
    "closed_at": "2020-04-07T01:53:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6745",
    "body": "Hi,\r\n\r\nI need Binance futures account balance history.\r\n\r\nI am fetching closed positions and I need to find what balance I had when each position was closed. \r\nIs there any endpoint or other way to find it?\r\n\r\nRegards",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6745/comments",
    "author": "Gennttii",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-07T01:53:00Z",
        "body": "Hi!\r\n\r\n> Is there any endpoint \r\n\r\nNo, there's no endpoint for balance history. \r\n\r\n> or other way to find it?\r\n\r\nYou have to collect the balance history on your own, or build it from zero using your history of withdrawals, deposits, trades, transfers, rebates and other money movements. Basically, if you add all your money movements to zero – you should arrive at your current balance and maintain your actual view of it from there.\r\n\r\nLet me know if that does not answer the question.\r\n"
      },
      {
        "user": "dorienh",
        "created_at": "2021-11-16T04:16:28Z",
        "body": "Did you ever write some code for this? I am interested in this too. "
      }
    ]
  },
  {
    "number": 6713,
    "title": "Duplicate code in parseTicker/parseOrder",
    "created_at": "2020-03-30T23:04:10Z",
    "closed_at": "2020-04-03T07:21:59Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6713",
    "body": "In the exchange specific `parseTicker`/`parseOrder` is a lot of duplicate code, because they calculate entires of the unified order structure, which is not provided by the original exchange response.\r\n(for `parseTicker` e.g. change, percentage, for `parseOrder` e.g. average)\r\n\r\nDoes it enhance the code quality, if we move all of these quirks to a method in the base exchange class, so the exchange specific classes only save in the unified structure, what is provided by the exchange and then call e.g. `return this.calculateParsedOrderProperties({ ... })`\r\n\r\nI think, it would reduce copy/pasted quirks and enhance code quality, because one exchanges profits from enhancements made for another exchange.\r\nMy concern is, that this single function would get to heavy and not maintainable.\r\ne.g. one exchange has provided `last` and `previous` to calculate `change` and `percentage`, another exchange has provided `previous` and `percentage` to calculate `change` and `last` (probably unrealistic), but my point is, when to check for which property could be a problem and after calculating one property, we would need to check again, if we can calculate another.\r\n\r\nAny thoughts on this?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6713/comments",
    "author": "brandsimon",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-30T23:24:33Z",
        "body": "> Does it enhance the code quality, if we move all of these quirks to a method in the base exchange class, so the exchange specific classes only save in the unified structure, what is provided by the exchange and then call e.g. return this.calculateParsedOrderProperties({ ... })\r\n\r\nTo my mind – yes, of course it does. The less duplication, the fewer points of failure, the better in general... However, it has to be done carefully, i mean upon a massive change we can run into unexpected issues here and there, so it is better if we approach it step by step, say, `parseTicker` first, `parseTrade` second, then `parseOrder`, and so on... one exchange at a time with heavy testing.\r\n\r\n> I think, it would reduce copy/pasted quirks and enhance code quality, because one exchanges profits from enhancements made for another exchange.\r\n\r\nI agree with that. We are already working on the `safeSymbol` method that is also designed to reduce duplication, since in many cases market recognition is a) reusable across methods b) reusable across exchanges.\r\n\r\n> My concern is, that this single function would get to heavy and not maintainable.\r\ne.g. one exchange has provided last and previous to calculate change and percentage, another exchange has provided previous and percentage to calculate change and last (probably unrealistic), but my point is, when to check for which property could be a problem and after calculating one property, we would need to check again, if we can calculate another.\r\n\r\nYeah, we have the same concerns as well. There is a risk of overengineering it. However, again, to my mind it depends on how we approach the task. If we move from lower levels upwards, through the architecture – we should end up with a good design naturally. Suppose you were to design a big method that is trying to account for all possible variations of defined and undefined values to deduce as many of them as possible from a given dataset. You would most likely have some other lower-layer base calls inside that method. For example, calculating simple cost from amount and price is a utilitarian function that could be reused in various methods. Also, calculating, say, `amount`, `remaining` and `filled` for the order can be wrapped in a standalone lower-layer method. We could try and start from there... \r\n\r\nAlso, there may be an alternative less intrusive way to solve this. We currently have `this.sum` which is _\"safe\"_, meaning that it can sum up `undefined/None/null` values. If we also had _\"safe\"_ `this.subtract`, `this.multiply`, `this.divide` we would have less duplication as well."
      }
    ]
  },
  {
    "number": 6680,
    "title": "[coinmate] looks like its shutting down",
    "created_at": "2020-03-26T11:55:14Z",
    "closed_at": "2020-03-26T12:27:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6680",
    "body": "> Dear Coinmates,\r\n>  \r\n> \r\n> We regret to inform you that our company has been notified by FIO Bank of the cancellation of our company’s bank accounts effective March 30, 2020.\r\n> \r\n> Important information about forthcoming operations:\r\n> \r\n> The coinmate.io website will remain operational and client funds available for withdrawal.\r\n>  \r\n> Crypto and FIAT (EUR, CZK) client funds are 100% backed and the company is ready to settle all user balances in full.\r\n>  \r\n> We will stop accepting new bank deposits on 27.3.2020\r\n>  \r\n> Please withdraw your FIAT balance (EUR, CZK) until 30.3.2020 at the latest. All FIAT withdrawals will be limited after this date.\r\n>  \r\n> Trading on the exchange will remain operational but please be aware of the price, which on Coinmate trading pairs may become significantly different compared to the market price.\r\n> We made tremendous efforts in recent months to establish a relationship with another banking institution in the Czech Republic and abroad but also due to the ongoing pandemic of coronavirus and recent Brexit, it is impossible for a British crypto exchange to open bank accounts within the EU under such circumstances.\r\n> \r\n> Also due to the size of our exchange and current situation, we are unable to switch to a different business model under a non-UK company. This situation is all the more painful for us because COINMATE is one of the most reliable and best-rated crypto exchanges in the world. Our focus on security and user-friendliness paid off. We always preferred quality over quantity and our services have been based on honesty and fair dealing.\r\n> \r\n> We are currently negotiating several options to establish a new banking partnership. If we are successful, we will recover our services in full.\r\n> \r\n> Thank you for your support.\r\n> \r\n> The Coinmate.io Team",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6680/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-26T12:19:42Z",
        "body": "@npomfret i think, in short, it says _\"no fiat anymore\"_, but they will still operate and trade with crypto... or am I missing something?"
      },
      {
        "user": "npomfret",
        "created_at": "2020-03-26T12:26:15Z",
        "body": "No, you are right.  It doesn't look great but they look they they are doing pure crypto markets still.  Will see how they progress. "
      }
    ]
  },
  {
    "number": 6675,
    "title": "amount limits for okex futures contracts",
    "created_at": "2020-03-25T14:03:06Z",
    "closed_at": "2022-07-16T16:08:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6675",
    "body": "Hi,\r\n\r\nPlease correct me if I am wrong in understanding the amount limits.  I think we should have limits - amount -  min field for okex futures and swap contracts -- currently undefined. For futures it should equal to be trade_increment field in the raw info returned by exchange, for swap that should be the size_increment field. \r\n\r\nThis field is more important for their USDT denominated future contracts ,where the amount limit is arbitrary set for different contracts and not equal to 1 lot. \r\n\r\n```\r\nREPLACE_THIS_WITH_YOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\r\n```\r\n\r\n```\r\nREPLACE_THIS_WITH_YOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6675/comments",
    "author": "icytrader",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-07-16T16:08:55Z",
        "body": "okx is already filled with those fields at this moment. Closing the issue."
      }
    ]
  },
  {
    "number": 6674,
    "title": "Unable to resolve module './js/btcchina.js'",
    "created_at": "2020-03-25T11:36:28Z",
    "closed_at": "2020-03-25T11:51:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6674",
    "body": "- OS: Debian 10 android apk 29\r\n- Programming Language version: react-native 0.61.5\r\n- CCXT version: 1.24.96\r\n\r\n```\r\nSimply put var ccxt = require('ccxt'); into any module\r\n```\r\n\r\n```\r\n[Wed Mar 25 2020 11:31:13.196]  BUNDLE  ./index.js \r\n\r\nerror: Error: Unable to resolve module `./js/btcchina.js` from `node_modules/ccxt/ccxt.js`: \r\n\r\nNone of these files exist:\r\n  * node_modules/ccxt/js/btcchina.js(.native|.android.js|.native.js|.js|.android.json|.native.json|.json|.android.ts|.native.ts|.ts|.android.tsx|.native.tsx|.tsx)\r\n  * node_modules/ccxt/js/btcchina.js/index(.native|.android.js|.native.js|.js|.android.json|.native.json|.json|.android.ts|.native.ts|.ts|.android.tsx|.native.tsx|.tsx)\r\n    at ModuleResolver.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:163:15)\r\n    at ResolutionRequest.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:52:18)\r\n    at DependencyGraph.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph.js:287:16)\r\n    at Object.resolve (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/lib/transformHelpers.js:267:42)\r\n    at dependencies.map.result (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:434:31)\r\n    at Array.map (<anonymous>)\r\n    at resolveDependencies (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:431:18)\r\n    at /home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:275:33\r\n    at Generator.next (<anonymous>)\r\n    at asyncGeneratorStep (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:87:24)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6674/comments",
    "author": "marcelcure",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-25T11:52:41Z",
        "body": "@marcelcure Let me know if you still have the same issue with version 1.24.97, it will arrive in 15 minutes. It will be great if you report back whether it helped or not. Also, you might want to rebuild your framework bundles to make sure that your version is up to date. Looking forward to hearing back from you! Thanks!"
      },
      {
        "user": "marcelcure",
        "created_at": "2020-03-25T13:37:08Z",
        "body": "I updated to 1.24.97 and to begin with I had the exact same error, so I deleted node_modules and rebuilt and now it is working perfectly. Thank you. Good job - very fast."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-25T13:41:20Z",
        "body": "@marcelcure thanks for your feedback! Appreciate it!"
      }
    ]
  },
  {
    "number": 6673,
    "title": "Separate HTTPS verbose and WSS verbose modes",
    "created_at": "2020-03-25T07:56:10Z",
    "closed_at": "2020-03-25T09:58:05Z",
    "labels": [
      "enhancement",
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6673",
    "body": "I think it would be good to be able to seperately configure the verbose for http request and wss streaming data. Often I only intend to debug the http request behaviour, like order placement. however the output from real-time streaming data can be tremendous. \r\n\r\nCan we add seperate configuration at the base exchange class so we can do sth like\r\n\r\n\r\n```\r\nlet binance  = ccxt.binance({ rest_verbose: true, wss_verbose: false}) \r\n```\r\n\r\n```\r\nREPLACE_THIS_WITH_YOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6673/comments",
    "author": "icytrader",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-25T09:58:05Z",
        "body": "@icytrader the implementation already allows you to do this, with the following syntax (will document it in the Manual soon):\r\n\r\n```Python\r\nbinance = new ccxt.binance({\r\n    'verbose': True,\r\n    'options': {\r\n        'ws': { 'verbose': False },\r\n    },\r\n})\r\n```\r\n\r\nLet us know if that does not help or if you wanted something different. Thx for your feedback!\r\n"
      }
    ]
  },
  {
    "number": 6620,
    "title": "OKex createOrders 'type' field for futures contracts.",
    "created_at": "2020-03-14T17:50:21Z",
    "closed_at": "2020-03-14T17:57:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6620",
    "body": "When using createOrder for a futures contract on OKex, the 'type' field passed is matched to the OKex order type (1,2,3,4 for open long, open short, close long, close short respectively). Seems like it would be easier and more unified if this could instead be 'limit', and type supplied in the params argument?  Example:\r\n\r\nCurrently I create an order like this:\r\n\r\n\r\n`\r\nexchange.createOrder('BTC-USD-200626', 1, 1, 10, 5400);\r\n`\r\n\r\nWould it be better to have this: ?\r\n\r\n`\r\nexchange.createOrder('BTC-USD-200626', 'limit', 1, 10, 5400, {type:1});\r\n`\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6620/comments",
    "author": "joyser",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-14T17:52:25Z",
        "body": "> Would it be better to have this: ?\r\n\r\nTo my mind, you should already have it. Have you tried doing that?"
      },
      {
        "user": "joyser",
        "created_at": "2020-03-14T17:54:52Z",
        "body": "I tried exchange.createOrder('BTC-USD-200626', 'limit', 1, 10, 5400) and get an error.. \r\n\r\nnever tried the second way listed above but brb will try now...  maybe just answered my own question 😅"
      },
      {
        "user": "joyser",
        "created_at": "2020-03-14T17:57:54Z",
        "body": "yup i'm a fool "
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-14T17:58:34Z",
        "body": "@joyser thx anyways, it may help other users in the future."
      }
    ]
  },
  {
    "number": 6587,
    "title": "ccxt.poloniex.markets is limited to 100",
    "created_at": "2020-03-08T10:24:19Z",
    "closed_at": "2020-03-12T11:46:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6587",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.8\r\n- CCXT version: PRO 0.0.60\r\n- Exchange: Poloniex\r\n- Method: loadMarkets()\r\n\r\nThere are only 100 markets shown while they have almost twice that much.\r\n\r\nPS Kroitor: Compliments on the mega fast fixes!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6587/comments",
    "author": "1key",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-08T10:39:49Z",
        "body": "@1key yesterday polo was on maintenance and they have limited the number of tickers to 100, but haven't provided any other means or endpoints for fetching the list of all pairs. So, we will look into handling this limit somehow. This is actually in CCXT, not in Pro, and it probably affects all API users of Poloniex, not just us. We'll get this resolved. "
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-08T15:48:19Z",
        "body": "We've sent a request to Poloniex to resolve this, will follow up with updates."
      },
      {
        "user": "1key",
        "created_at": "2020-03-08T15:49:06Z",
        "body": "Great, thnx!"
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-12T11:46:44Z",
        "body": "Here's the answer from Poloniex: \r\n\r\n> Cooper (Poloniex)Mar 12, 9:49 AM UTC\r\n>\r\n> Hi, Thanks for your patience with this case.\r\n> The reason your results displayed only 100 entries, is because our entire list of markets is a total of 100.\r\n>\r\n> Please let us know if you have any other questions.\r\n>\r\n>Cooper - Poloniex\r\n\r\nLet us know if that does not help."
      }
    ]
  },
  {
    "number": 6579,
    "title": "The limit method in CCXT pro and offload cached streaming data",
    "created_at": "2020-03-06T15:52:30Z",
    "closed_at": "2020-03-06T21:13:58Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6579",
    "body": "Hi,\r\n\r\n```\r\n// throttling mode\r\nconst limit = 5 // optional\r\n// await is optional, alternatively you can launch it in bg without await\r\nawait exchange.watchOrderBook (symbol, limit)\r\nwhile (true) {\r\n    // your reaction takes place here\r\n    // you arrive here every 100 ms regardless of whether there was an update or not\r\n    // in throttling mode offloading the orderbook with .limit () is required\r\n    console.log (exchange.orderbooks[symbol].limit (limit))\r\n    await sleep (100) // every 100 ms\r\n}\r\n\r\n```\r\n\r\n\r\nIn the manual of CCXT pro there is an example for throttling mode where we get the cached orderbook infomation with a limit() method. I tested it out and I know that without the limit method you will only get a static orderbook on the console if you do:\r\n\r\n```\r\n    console.log (exchange.orderbooks[symbol])\r\n\r\n```\r\n\r\n1) Could you help me understand what trick the limit method is doing here besides slicing the orderbook? I checked out the limit method definition on the source code OrderBookSide.js but I can't explain.  I only have some Python experience and new to JS. Thank you very mcuh.\r\n\r\n2) For other streamed data like ticker and orders, how can I offload the most recent snapshot from cache?\r\n\r\n\r\n\r\n- OS: Windows\r\n- Programming Language version: Node.JS\r\n- CCXT version: CCXT Pro\r\n- Exchange: Binance\r\n- Method: WatchOrderBook\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6579/comments",
    "author": "icytrader",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-03-06T17:18:52Z",
        "body": "if you don't run `await exchange.watchOrderBook` then the limit method is not run. Since messages are arriving all the time even when you are not `await`ing for them the orderBook deltas are indexed by their price's in a hashmap. This is faster than inserting the bids/asks into a list as that would take at least `O(n)` time, possibly more depending on the implementation.\r\n\r\nThe limit method converts these indexes into an ordered orderBook with bids and asks arranged in order.\r\n\r\n> For other streamed data like ticker and orders, how can I offload the most recent snapshot from cache?\r\n\r\nYou can use `exchange.tickers[symbol]`, and `exchange.orders[symbol]` however the underlying data structures are still undergoing heavy development."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-06T21:13:58Z",
        "body": "@icytrader Hi!\r\n\r\n> 1. Could you help me understand what trick the limit method is doing here besides slicing the orderbook? I checked out the limit method definition on the source code OrderBookSide.js but I can't explain. I only have some Python experience and new to JS. Thank you very mcuh.\r\n\r\nBasically, it does the slicing of the output result and also does the limiting in case of limited order books. \r\n\r\nSuppose you have an order book that is limited by a certain number of bids and asks, say, the exchange only sends top 150 bids and top 150 asks. Then, if a new bid delta with a new price is received, after inserting it into the orderbook there should remain 150 bids, not 151. The exchange will only update the topmost 150 orders, and will not send deltas for orders below 150. Thus, the 151th order is quickly outdated and not updated anymore – it must be removed from an orderbook with a limit of 150. Now suppose that the underlying exchange can also index the orders by order id instead of by price. You can't just do a basic array slicing on a dictionary indexed by order ids. The limiting, sorting and slicing has to be done based on the price. So, in general, the `limit()` method is used not only for slicing, but also for proper sorting, depending on the type of orderbook in question. \r\n\r\nThe `limit` method is used for optimization purposes – you don't want to sort and slice your books upon every delta or upon every update – only when the client wants it (when this is needed for rendering or data processing on the user side). That allows those orderbooks to work very quickly and efficiently.\r\n\r\n> For other streamed data like ticker and orders, how can I offload the most recent snapshot from cache?\r\n\r\nMost of other incremental structures supported so far – are plain lists or dicts, so you don't have to offload them with a special method – can just use them as is. The orderbooks is a very special case, though, therefore it requires a limiting method to work properly. We might introduce some offloading methods for other structures, but so far the orderbook is the only type of incremental structure that requires offloading with a call to the `limit` method.\r\n\r\nLet us know if that does not answer your questions )"
      }
    ]
  },
  {
    "number": 6578,
    "title": "Can we support sending batch coins for calling fetch_ohlcv",
    "created_at": "2020-03-05T19:14:30Z",
    "closed_at": "2020-03-06T00:22:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6578",
    "body": "Hello,\r\nJust found out that full scanning all coins in exchange will call `fetch_ohlcv ` one time for each coins, totally making massive times of calls for scanning all coins and cost a lot of time because for each call the client needs to hold for a while. Can we do sth to send a batch of coins for calling so that the number of calls can be reduced and save a lot of time? My app now is suffering with this issue when full scanning coins.\r\n\r\n- OS: linux\r\n- Programming Language version:\r\n- CCXT version: latest\r\n- Exchange:\r\n- Method:\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6578/comments",
    "author": "lfzCarlosC",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-06T00:22:15Z",
        "body": "Hi!\r\n\r\n> Can we do sth to send a batch of coins for calling so that the number of calls can be reduced and save a lot of time?\r\n\r\nIn most cases – we cannot, because the exchange endpoint only accepts a single OHLCV symbol, we can't send many symbols even if we wanted to. However, the general way to address this – is to have more than one computer, working in parallel and each gathering it's own subset of OHLCVs. This is usually done in an AWS cloud. In other words, you should apply some parallelization to your architecture to optimize it for your use case.\r\n\r\nLet me know if that doesn't answer the question."
      }
    ]
  },
  {
    "number": 6577,
    "title": "How did ccxt.pro handle private channel message miss?",
    "created_at": "2020-03-05T08:18:34Z",
    "closed_at": "2020-03-05T11:43:44Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6577",
    "body": "Some exchanges' channels will miss some private messages occasionally, thus making balances or orders inconsistent.  Will ccxt.pro handle this situation? Thx!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6577/comments",
    "author": "zsyh",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-05T08:20:38Z",
        "body": "We are adding nonce or seq checks where possible or where supported by the exchange. If you notice something specific, please, let us know."
      }
    ]
  },
  {
    "number": 6555,
    "title": "is there any way to get header or rate limit?",
    "created_at": "2020-03-03T09:06:32Z",
    "closed_at": "2020-03-03T09:09:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6555",
    "body": "in order to avoid ip rate limit i'd like to check the headers, is there any way to get them?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6555/comments",
    "author": "doongzzi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-03T09:09:08Z",
        "body": "@doongzzi yep, see `exchange.last_response_headers` after the response is received – that property will contain the info you need."
      }
    ]
  },
  {
    "number": 6550,
    "title": "I got \"amount is invalid\" error when i try to withdraw",
    "created_at": "2020-03-02T15:36:00Z",
    "closed_at": "2020-03-02T22:14:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6550",
    "body": "- OS: Mac OS Catalina\r\n- Programming Language version: Node.js\r\n- CCXT version: 1.23.1\r\n- Exchange: Bitmex\r\n- Method: withdraw\r\n\r\nThis is my route:\r\n\r\n```\r\nrouter.post('/withdraw', async (req, res, next) => {\r\n  const {code, address, amount, otpToken, currency } = req.body;\r\n\r\n  const exchange = await new ccxt.bitmex();\r\n  exchange.apiKey = \"MY - KEY\";\r\n  exchange.secret = \"MY - SECRET\";\r\n\r\n  await exchange.withdraw (code, amount, address, tag = undefined, params = {}, otpToken)\r\n  .then((response) => console.log(res))\r\n  .catch(ex => console.log(ex))\r\n\r\n});\r\n```\r\n\r\nAnd this is what i am trying to post:\r\n\r\n{\r\n    \"address\": \"THE ADRESS\",\r\n    \"amount\": 0.0022,\r\n    \"code\": \"BTC\",\r\n    \"otpToken\": \"MY TOKEN\"\r\n}\r\n\r\nWhen i execute this route, i get this error:\r\nBadRequest: bitmex {\"error\":{\"message\":\"amount is invalid\",\"name\":\"HTTPError\"}}\r\n\r\nThe key and the secret are OK. The otpToken too. I can fetch everything.\r\nI´m new on this, and i can´t figure it out where is the error on my code.\r\n\r\nThank you!!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6550/comments",
    "author": "Nicour",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-02T19:31:20Z",
        "body": "Hi! \r\n\r\nI think BitMEX requires the amount in satoshis (an integer, not a floating point decimal). So, instead of `\"amount\": 0.0022` it should be `\"amount\": 220000`.\r\n\r\nLet me know if that does not help."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-02T22:14:18Z",
        "body": "Closing this for now, feel free to reopen it or just ask further questions if any. We will be happy if you report back whether the issue is resolved on your side or not. Thx!"
      },
      {
        "user": "Nicour",
        "created_at": "2020-03-03T08:24:53Z",
        "body": "Hello.\r\nThank you very much for your help. \r\nI've just try with the amount in satoshis an it works.\r\n\r\nThank you again!"
      }
    ]
  },
  {
    "number": 6546,
    "title": "Limited L2 orderbook does not produce consistent amount of results - CCXT PRO",
    "created_at": "2020-03-01T14:39:07Z",
    "closed_at": "2020-03-01T14:59:12Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6546",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.8\r\n- CCXT version: 0.0.47\r\n- Exchange: Binance, WS\r\n\r\n```\r\nimport ccxtpro\r\nimport asyncio\r\n\r\nasync def main():\r\n    exchange = ccxtpro.binance({'enableRateLimit': True})\r\n    while True:\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 10) #INCONSISTENT, see below\r\n        print(len(orderbook['asks']), len(orderbook['bids']))\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\nResults:\r\n\r\n```\r\n10 10\r\n10 10\r\n10 9\r\n9 10\r\n10 10\r\n10 10\r\n10 10\r\n10 9\r\n10 10\r\n```\r\n\r\nand:\r\n```\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 1)\r\n        print(orderbook['asks'][0]), (orderbook['bids'][0])\r\n```\r\nProduces (after some correct results):\r\n```\r\n    print(orderbook['asks'][0]), (orderbook['bids'][0])\r\nIndexError: list index out of range\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6546/comments",
    "author": "1key",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:49:38Z",
        "body": "Technically, this is not fully a bug. What happens is that when you limit the orders in real-time mode by supplying the `limit` argument CCXT will only store up to `limit` orders. In some cases an order may be deleted from the book (when matched), so the exchange sends a zero delta and it is removed from the orderbook leaving just the 9 orders of 10 (until another one fills the gap). The responsibility of CCXT Pro in this case is to return immediately after receiving a \"delete\" command from the exchange (or any of \"delete\", \"update\", \"insert\" deltas).\r\n\r\nSo, from here, you have two options:\r\n\r\n- either expect the number of bids/asks to be less than or equal to `limit` in the result \r\n- or don't send `limit` (CCXT will keep the entire orderbook in memory) and just use python's array slicing like `[0:5]`\r\n\r\nAlso, Binance does support limited WS feeds for 5, 10 or 20 bidasks, however, when `limit` is sent to the exchange – it will rate-limit the feed by 100ms or 1000ms which is not good for real-time apps, therefore the `limit` is not sent to Binance in particular at this time, and all the limiting is done on the client-side in memory.\r\n\r\nWe will add this to the documentation shortly to avoid confusion.\r\n\r\nLet me know if that does not answer the question."
      },
      {
        "user": "1key",
        "created_at": "2020-03-01T14:56:23Z",
        "body": "Clear and fast answer!\r\nWill work around it then."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:59:12Z",
        "body": "@1key we will look into adding an option that would still store the entire orderbook and would always serve a number of bidasks as close as possible to `limit` , but in the general case an exchange orderbook may have less than any number of bid/asks (just like with fetchOrderBook over REST). So if the exchange is inactive, there may be very few or even zero orders on either side of the book. \r\n\r\nFeel free to reopen this if anything or just ask further questions if you have more. Thanks for the feedback!"
      }
    ]
  },
  {
    "number": 6540,
    "title": "[Liquid] missing currencies of function 'fetch_balance' ",
    "created_at": "2020-02-29T05:19:08Z",
    "closed_at": "2022-07-16T16:24:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6540",
    "body": "- OS: Ubuntu 18.04\r\n- Programming Language version: Python 3.7\r\n- CCXT version: 1.23.1\r\n- Exchange: Liquid\r\n- Method: fetch_balance\r\n\r\nWhen I call function 'fetch_balance', I can only get currency information of BCH, BTC, ETH, JPY, QASH, SGD, USD, XRP. But there are more currencies available in Liquid, such as AUD (Australian Dollar).\r\n\r\nCould you please fix this problem?\r\n\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6540/comments",
    "author": "JosephWN",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-02-29T05:26:26Z",
        "body": "Hi!\r\n\r\nWhat does this snippet say?\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.liquid({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n})\r\nprint(exchange.private_get_fiat_accounts())\r\n```\r\n\r\n?"
      },
      {
        "user": "JosephWN",
        "created_at": "2020-02-29T05:36:23Z",
        "body": "> Hi!\r\n> \r\n> What does this snippet say?\r\n> \r\n> ```python\r\n> import ccxt\r\n> exchange = ccxt.liquid({\r\n>     'apiKey': 'YOUR_API_KEY',\r\n>     'secret': 'YOUR_SECRET',\r\n> })\r\n> print(exchange.private_get_fiat_accounts())\r\n> ```\r\n> \r\n> ?\r\n\r\nThanks for your quick response, but I just tried private_get_fiat_accounts(), the response only contain JPY, SGD, USD. But AUD is still missing, AUD is available in Liquid."
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-29T05:40:25Z",
        "body": "@JosephWN \r\n\r\n> Thanks for your quick response, but I just tried private_get_fiat_accounts(), the response only contain JPY, SGD, USD. But AUD is still missing, AUD is available in Liquid.\r\n\r\nThat call returns the info from the exchange first-hand (not from CCXT), so what you see is what you get from Liquid itself. If you don't see AUD there and you are sure that it absolutely should be there (you have done everything that is required by Liquid for the AUD to be there) – then you should probably forward this question to Liquid tech support.\r\n\r\nHave you added you SWIFT details on the Liquid website for the AUD?"
      },
      {
        "user": "JosephWN",
        "created_at": "2020-02-29T06:39:36Z",
        "body": "> @JosephWN\r\n> \r\n> > Thanks for your quick response, but I just tried private_get_fiat_accounts(), the response only contain JPY, SGD, USD. But AUD is still missing, AUD is available in Liquid.\r\n> \r\n> That call returns the info from the exchange first-hand (not from CCXT), so what you see is what you get from Liquid itself. If you don't see AUD there and you are sure that it absolutely should be there (you have done everything that is required by Liquid for the AUD to be there) – then you should probably forward this question to Liquid tech support.\r\n> \r\n> Have you added you SWIFT details on the Liquid website for the AUD?\r\n\r\nI will contact Liquid support team about this question, thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-29T06:47:27Z",
        "body": "@JosephWN it will be great if you follow up here whether you have a solution to it or not. Thx for the feedback!"
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-16T16:24:13Z",
        "body": "I've tested myself and `fetchBalance()` returns response correctly.  Note -if you have zero balance in that currency, it might not show up in response. "
      }
    ]
  },
  {
    "number": 6539,
    "title": "What's the plan for the CHANGELOG?",
    "created_at": "2020-02-29T02:47:58Z",
    "closed_at": "2020-03-13T23:06:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6539",
    "body": "Looks like the CHANGELOG was abandoned... should it be deleted?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6539/comments",
    "author": "rhoegg",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-13T23:06:34Z",
        "body": "Removed it, thank you!"
      }
    ]
  },
  {
    "number": 6524,
    "title": "[liquid] fetchOrders not returning any results",
    "created_at": "2020-02-26T09:34:46Z",
    "closed_at": "2022-07-16T16:57:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6524",
    "body": "Is anyone else seeing problems with Liquid `fetchOrders`?  I'm not getting any data back.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6524/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "frankhubrepo",
        "created_at": "2020-02-26T10:53:09Z",
        "body": "I'm getting: [Exchange Error] okex {\"code\":0, (and a bunch of other data) in my website where i fetch crypto prices from various exchanges. I removed  'okex' from the exchanges list and everything is ok now. Seems like some of their services are down or something"
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-26T10:56:11Z",
        "body": "@frankhubrepo you might want to move to `okex3` (v3) instead of `okex`, since v1 is deprecated, going to delist it soon."
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-26T10:57:18Z",
        "body": "@npomfret not getting the data even after placing a new order?"
      },
      {
        "user": "npomfret",
        "created_at": "2020-02-26T11:10:44Z",
        "body": "Not tried a new order yet.  The website seems to show my full history and it appears to the use API.  I've realised a ticket with their support.  The same problem exists with `fetchOrder`."
      },
      {
        "user": "frankhubrepo",
        "created_at": "2020-02-26T11:17:31Z",
        "body": "@kroitor Thank you. That did it."
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-26T12:06:57Z",
        "body": "@npomfret we would be very thankful if you post a followup from them here, thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2020-07-31T02:32:07Z",
        "body": "@npomfret do you still have this issue?"
      },
      {
        "user": "ttodua",
        "created_at": "2022-07-16T16:57:22Z",
        "body": "I've tested myself and it's working fine.\r\nAlso, there have not been any follow-ups above, even though of @kroitor asked, so closing the issue."
      }
    ]
  },
  {
    "number": 6499,
    "title": "how to make a stoploss in binance?",
    "created_at": "2020-02-18T05:31:28Z",
    "closed_at": "2020-02-21T11:09:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6499",
    "body": "how can i make a stoplimit order in both futures and spot?\r\nfirst i fetch orderId and call \r\nbinance.fapiPrivate_post_order({type:\"STOP_MARKET/TAKE_PROFIT_MARKET\" }) \r\nis it right?? but don't i need orderId to match quantity for the exact order?\r\nand what about the spot trade stoplimit?\r\n\r\nthanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6499/comments",
    "author": "doongzzi",
    "comments": [
      {
        "user": "lookis",
        "created_at": "2020-02-18T20:21:13Z",
        "body": "there is no stop market order in spot, only in futures.\r\nand stop order doesn't stop some particular order, so you don't need any orderid to \"stop\"\r\njust build the parameters with stop price and quantity in \"params\" manually, stop order isn't an unified order type in ccxt"
      },
      {
        "user": "doongzzi",
        "created_at": "2020-02-19T02:15:32Z",
        "body": "thanks..stupid me"
      },
      {
        "user": "kroitor",
        "created_at": "2020-02-21T11:09:05Z",
        "body": "@doongzzi we will look into unifying this aspect soon, let us know if you have further difficulties. Feel free to reopen this issue or just ask questions if any. Closing this for now, if you don't mind,"
      }
    ]
  },
  {
    "number": 6451,
    "title": "Looking for a developer to integrate our exchange to ccxt",
    "created_at": "2020-02-05T12:02:49Z",
    "closed_at": "2020-02-05T12:47:26Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6451",
    "body": "Hi\r\n\r\nWe are looking for a dev to integrate our cryptocurrency exchange to CCXT.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6451/comments",
    "author": "ah2020b",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-02-05T12:47:25Z",
        "body": "@ah2020b hi! Please, reach out to info@ccxt.trade."
      }
    ]
  },
  {
    "number": 6429,
    "title": "Bitfinex exception issue - missing NetworkError",
    "created_at": "2020-01-29T09:10:22Z",
    "closed_at": "2020-01-29T09:44:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6429",
    "body": "- OS: MacOs Mojave 10.14.6\r\n- Programming Language version: Python 3.7.4\r\n- CCXT version: 1.21.85\r\n- Exchange: Bitfinex\r\n- Method: Exception Network error\r\n\r\nexcept self.ccxt.NetworkError as e: \r\n\r\nthe code above should work in Python, but it triggers the following exception :\r\nAttributeError: 'bitfinex' object has no attribute 'NetworkError'\r\n\r\nThe entire code :\r\n\r\ntry:\r\n                    result = self.ccxt.cancel_order(self.last_order, self.last_order_symbol)\r\nexcept self.ccxt.NetworkError as e:\r\n                    self.logger.error(e)\r\n                    while True:\r\n                        try:\r\n                            #sleep(0.1)\r\n                            result = self.ccxt.cancel_order(self.last_order, self.last_order_symbol)\r\n                            self.last_order = None\r\n                            self.last_order_symbol = None\r\n                            self.logger.info(f'closed last order on: {self.name}')\r\n                        except Exception as e:\r\n                            self.logger.error(e)\r\n\r\nThe entire result with traceback :\r\n\r\nccxt.base.errors.NetworkError: bitfinex {\"message\":\"Nonce is too small.\"}\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 353, in <module>\r\n    main()\r\n  File \"main.py\", line 300, in main\r\n    thread = threading.Thread(target=provider.cancelOrders())\r\n  File \"/.../exchange.py\", line 417, in cancelOrders\r\n    except self.ccxt.NetworkError as e:\r\nAttributeError: 'bitfinex' object has no attribute 'NetworkError'\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6429/comments",
    "author": "ivanzhelyazkov",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-01-29T09:44:16Z",
        "body": "In here:\r\n\r\n```Python\r\nexcept self.ccxt.NetworkError as e:  # ←-------- HERE\r\n```\r\n\r\nIt should be\r\n\r\n```Python\r\nexcept ccxt.NetworkError as e:  # ←-------- not self.ccxt, but ccxt.\r\n```\r\n\r\n\r\nYou're trying to reference a NetworkError property on `self.ccxt` which is an instance of an exchange that you saved under `self.ccxt`. The Exchange class does not have that property, though. What you want is `NetworkError` from the `ccxt` lib itself, not a nonexistent `NetworkError` from a `self.ccxt` exchange instance. In other words, this is a very easy mistake in the code, and you can fix it like so:\r\n\r\n```Python\r\n# somewhere at the top of the file, far far away...\r\nimport ccxt\r\n\r\n# ...\r\n\r\ntry:\r\n                    result = self.ccxt.cancel_order(self.last_order, self.last_order_symbol)\r\nexcept ccxt.NetworkError as e:\r\n                    self.logger.error(e)\r\n                    while True:\r\n                        try:\r\n                            #sleep(0.1)\r\n                            result = self.ccxt.cancel_order(self.last_order, self.last_order_symbol)\r\n                            self.last_order = None\r\n                            self.last_order_symbol = None\r\n                            self.logger.info(f'closed last order on: {self.name}')\r\n                        except Exception as e:\r\n                            self.logger.error(e)\r\n```\r\n\r\n↑ This will work. Let us know if not."
      }
    ]
  },
  {
    "number": 6301,
    "title": "How to fetch canceled orders?",
    "created_at": "2019-12-21T19:38:46Z",
    "closed_at": "2019-12-21T21:07:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6301",
    "body": "- OS: Windows 10\r\n- Programming Language version: JavaScript v8.12.0\r\n- CCXT version: 1.18.1353\r\n- Exchange: binance\r\n- Method: exchange.fetchClosedOrders(symbol)\r\n\r\nIf I call exchange.fetchClosedOrders('XRP/USDT') on binance I get closed orders, but not canceled orders. \r\n\r\nIs this by design?\r\n\r\nWhat methods to user to fetch both closed and canceled orders?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6301/comments",
    "author": "dmitriano",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-12-21T21:07:24Z",
        "body": "> Is this by design?\r\n\r\nYes, in many cases fetchClosedOrders will return just the closed orders only.\r\n\r\n> What methods to user to fetch both closed and canceled orders?\r\n\r\nUse `fetchOrders()`.\r\n\r\n```JavaScript\r\n        const orders = await exchange.fetchOrders (symbol, since, limit, params);\r\n        return exchange.filterByArray (orders, 'status', [ 'closed', 'canceled' ], false);\r\n```\r\n\r\nLet us know if that does not answer the question."
      },
      {
        "user": "art1c0",
        "created_at": "2021-09-18T15:03:38Z",
        "body": "According to the docs: \r\n\r\n> fetchClosedOrders() – fetches a list of closed (or canceled) orders.\r\n\r\nIt would be nice if this method actually return canceled orders as well, probably doing fetchOrders and filtering under the hood."
      }
    ]
  },
  {
    "number": 6294,
    "title": "Performance tips?",
    "created_at": "2019-12-20T11:14:42Z",
    "closed_at": "2019-12-21T21:17:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6294",
    "body": "In order to avoid an extra http call (to `loadMarkets`), I was looking for advice on a sensible pattern for storing and sharing the _internals_ of an exchange object.  Basically, I wanted to call `loadMarkets` once, on each exchange I use, then take all that public metadata and _inject_ it into my private ccxt instances.  Does anyone have a good suggestion on a sensible way to do this?  Or is it as simple as say:\r\n\r\n```\r\nconst sharedInstance = new ccxt[someId]();\r\nawait sharedInstance.loadMarkets();\r\n\r\n...\r\n\r\nfunction loadAuthenticatedExchange(id, credentials) {\r\n    const stuff = Object.assign({}, sharedInstance);\r\n    \r\n    const privateInstance = new ccxt[id](Object.assign(stuff, credentials));\r\n\r\n    return privateInstance;    \r\n}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6294/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-12-20T21:44:36Z",
        "body": "> Does anyone have a good suggestion on a sensible way to do this? Or is it as simple as say:\r\n\r\nI'd say it's as simple as you do, however, i would add a filter for functions, since you probably want just the values:\r\n\r\n```JavaScript\r\nfunction loadAuthenticatedExchange(id, credentials) {\r\n    const stuff = Object.assign({}, sharedInstance).filter(x => (typeof x !== 'function'));\r\n    return new ccxt[id](Object.assign(stuff, credentials));\r\n}\r\n```\r\n\r\nLet me know if that does not work for you or if you have any issues with that – we will look into it."
      },
      {
        "user": "npomfret",
        "created_at": "2020-01-06T11:05:53Z",
        "body": "Actually, it feels like it's a bit more complicated.  I decided it's best to delete anything that is, or contains a function (so it handles the `exceptions` and `httpsAgent` for example).\r\n\r\n```\r\nfunction hasFunctions(obj) {\r\n    if(typeof obj == 'function')\r\n        return true;\r\n    if(typeof obj !== 'object')\r\n        return false;\r\n\r\n    for(let prop in obj) {\r\n        const value = obj[prop];\r\n        if (typeof value === 'function')\r\n            return true;\r\n        else if (typeof value === 'object') {\r\n            const hasFuncs = hasFunctions(value);\r\n            if(hasFuncs)\r\n                return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction makeSeriazable(obj) {\r\n    for(let prop in obj) {\r\n        const value = obj[prop];\r\n        if(hasFunctions(value))\r\n            delete obj[prop]\r\n    }\r\n}\r\n\r\n...\r\n\r\n        makeSeriazable(exchange);\r\n\r\n        const json = JSON.stringify(exchange);\r\n```\r\n\r\n "
      }
    ]
  },
  {
    "number": 6273,
    "title": "An example of how to enable Binance futures in Python?",
    "created_at": "2019-12-13T18:44:36Z",
    "closed_at": "2019-12-13T18:52:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6273",
    "body": "is binance Future works with Python .. if yes please provide an example.\r\nI already tested it with node and it was working . but i couldnot make it work with python . \r\nplease give example if it do work with python \r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6273/comments",
    "author": "medozero",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-12-13T18:52:20Z",
        "body": "```Python\r\nimport ccxt\r\nprint('CCXT version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_API_SECRET',\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': 'future',  # requires CCXT version > 1.20.31\r\n    },\r\n})\r\n\r\nexchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment this line if it doesn't work\r\n\r\n# your code here...\r\n\r\n```\r\n\r\nLet us know if the above does not help."
      }
    ]
  },
  {
    "number": 6252,
    "title": "[bitstamp] why is fetchOrder 'emulated'",
    "created_at": "2019-12-11T19:21:35Z",
    "closed_at": "2019-12-11T19:25:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6252",
    "body": "`fetchOrder` in bitstamp It looks like a proper implementation, why is it market as 'emulated'?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6252/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:23:00Z",
        "body": "I think this is a leftover from an earlier version."
      },
      {
        "user": "npomfret",
        "created_at": "2019-12-11T19:25:52Z",
        "body": "Or perhaps the order isn't fully formed?  Does that count as 'emulated'?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:26:52Z",
        "body": "> Does that count as 'emulated'?\r\n\r\nNope."
      },
      {
        "user": "npomfret",
        "created_at": "2019-12-11T19:27:10Z",
        "body": "ok, will do a PR now, thanks."
      },
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:28:10Z",
        "body": "> ok, will do a PR now, thanks.\r\n\r\nNo worries, I've already uploaded a fix ) The `'emulated'` value is only used in cases where a call is emulated via another endpoint for another call, if the endpoint in question is missing."
      },
      {
        "user": "npomfret",
        "created_at": "2019-12-11T19:29:18Z",
        "body": "Thanks!\r\n\r\nAny objection to adding:\r\n\r\n```\r\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\r\n        const order = await this.fetchOrder (id, symbol, params);\r\n        return order['trades'];\r\n    }\r\n```\r\n\r\n?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:30:36Z",
        "body": "@npomfret thx to you for pointing it out!\r\n\r\nNo objections whatsoever ) We already have a `fetchOrderStatus` wrapper in the base class anyway."
      }
    ]
  },
  {
    "number": 6165,
    "title": "[coinbasepro] market order not 100% filled - is this normal?",
    "created_at": "2019-11-21T16:29:52Z",
    "closed_at": "2019-11-21T17:13:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6165",
    "body": "I found this market order that is closed but not 100% filled.  Is this expected?  Or are we parsing incorrectly?\r\n\r\n```\r\n// the order\r\n{\r\n  \"id\": \"x7\",\r\n  \"info\": {\r\n    \"id\": \"x\",\r\n    \"size\": \"0.00181765\",\r\n    \"product_id\": \"BTC-USDC\",\r\n    \"side\": \"buy\",\r\n    \"funds\": \"15.9706678100000000\",\r\n    \"type\": \"market\",\r\n    \"post_only\": false,\r\n    \"created_at\": \"2019-11-08T13:39:56.882321Z\",\r\n    \"done_at\": \"2019-11-08T13:39:56.888Z\",\r\n    \"done_reason\": \"filled\",\r\n    \"fill_fees\": \"0.0798529641920000\",\r\n    \"filled_size\": \"0.00181306\",\r\n    \"executed_value\": \"15.9705928384000000\",\r\n    \"status\": \"done\",\r\n    \"settled\": true\r\n  },\r\n  \"timestamp\": 1573220396882,\r\n  \"datetime\": \"2019-11-08T13:39:56.882Z\",\r\n  \"status\": \"closed\",\r\n  \"symbol\": \"BTC/USDC\",\r\n  \"type\": \"market\",\r\n  \"side\": \"buy\",\r\n  \"cost\": 15.9705928384,\r\n  \"amount\": 0.00181765,\r\n  \"filled\": 0.00181306,\r\n  \"remaining\": 0.000004590000000000063,\r\n  \"fee\": {\r\n    \"cost\": 0.079852964192,\r\n    \"currency\": \"USDC\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n// the trade\r\n{ id: '845193',\r\n  order: 'x',\r\n  info:\r\n   { created_at: '2019-11-08T13:39:56.888Z',\r\n     trade_id: 845193,\r\n     product_id: 'BTC-USDC',\r\n     order_id: 'x',\r\n     user_id: 'x',\r\n     profile_id: 'x',\r\n     liquidity: 'T',\r\n     price: '8808.64000000',\r\n     size: '0.00181306',\r\n     fee: '0.0798529641920000',\r\n     side: 'buy',\r\n     settled: true,\r\n     usd_volume: '15.9705928384000000' },\r\n  timestamp: 1573220396888,\r\n  datetime: '2019-11-08T13:39:56.888Z',\r\n  symbol: 'BTC/USDC',\r\n  type: undefined,\r\n  takerOrMaker: 'taker',\r\n  side: 'buy',\r\n  price: 8808.64,\r\n  amount: 0.00181306,\r\n  fee: { cost: 0.079852964192, currency: 'USDC', rate: 0.005 },\r\n  cost: 15.9705928384 }\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6165/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-11-21T16:32:47Z",
        "body": "@npomfret \r\n\r\n> I found this market order that is closed but not 100% filled.\r\n\r\nThat's pretty much expected with many of your orders. In many cases the exchange engine can't guarantee to fill up 100% of the ordered amount. \r\n\r\n```\r\n    \"status\": \"done\",\r\n```\r\n\r\n↑ We're using this status.\r\n\r\n> Or are we parsing incorrectly?\r\n\r\nThat is correctly parsed ) A closed order doesn't necessarily have `amount` === `filled`."
      },
      {
        "user": "kroitor",
        "created_at": "2019-11-21T17:13:11Z",
        "body": "@npomfret let me know if the above does not answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2019-11-22T09:49:54Z",
        "body": "@kroitor but this is a market order.  I've executed an awful lot of them and this is the first I've seen that isn't 100% filled."
      },
      {
        "user": "kroitor",
        "created_at": "2019-11-22T09:55:23Z",
        "body": "@npomfret if a market order is almost-fully-matched with an existing limit order from the orderbook, there may be an outstanding residue that is less than the dust threshold or min amount required to generate another match. Thus, a market order can remain \"almost filled\" in certain cases, depending on how exactly it crossed the orderbook, and also depending on the market conditions at that time and on the exchange rules, that can also change over time. You might want to fetch the trade history and match the trades with the order in question to investigate further."
      },
      {
        "user": "brandsimon",
        "created_at": "2019-11-22T20:32:31Z",
        "body": "This can also happen if there is not enough volume at the exchange at all.\r\nThat is why exchanges usually dont promise to execute stop-loss orders."
      }
    ]
  },
  {
    "number": 6148,
    "title": "no name module gdax() in ccxt ",
    "created_at": "2019-11-16T19:27:25Z",
    "closed_at": "2019-11-16T21:02:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6148",
    "body": "import ccxt  # noqa: E402\r\n\r\nkraken = ccxt.kraken()\r\ngdax = gdax().ccxt\r\n\r\n\r\nI'd like work with this code part. Compiler cannot find function name as gdax(). Also I controlled the file, there is no function in the ccxt  master file. Has the function lost its continuity? How can I continue?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6148/comments",
    "author": "BahadirSoybakis",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-11-16T20:04:33Z",
        "body": "`gdax` is depreciated, please use `coinbasepro` instead )\r\n\r\nlet me know if you have any other issues"
      },
      {
        "user": "BahadirSoybakis",
        "created_at": "2019-11-16T20:29:34Z",
        "body": "gdax = ccxt.coinbasepro()\r\nthanks @frosty00  for your support.  "
      }
    ]
  },
  {
    "number": 6128,
    "title": "Anyone using Lykke?  Is it safe",
    "created_at": "2019-11-13T12:07:55Z",
    "closed_at": "2019-11-13T16:24:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6128",
    "body": "Their private API doesn't use a private key (or nonce) so the sign method in ccxt doesn't actually sign anything.  The API Key just goes across the wire as a clear text header.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6128/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "KonstantinRyazantsev",
        "created_at": "2019-11-13T14:34:57Z",
        "body": "1. API key transmitted over HTTPS and the user can rotate key as often as needed. This is the same as Bearer token authentication.\r\n2. This API doesn't allow withdrawals. Withdrawals are possible only trading account using 2FA.\r\n\r\nSo seems all safe here."
      },
      {
        "user": "kroitor",
        "created_at": "2019-11-13T16:24:32Z",
        "body": "@npomfret there are other exchanges that do the same thing as well:\r\n- bitlish\r\n- cobinhood\r\n- rightbtc\r\n- virwox\r\n\r\nThese exchanges are relying on HTTPS. So, if your key leaks, you should change it immediately. Let me know if that does not answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2019-11-13T17:44:08Z",
        "body": "Thanks for the feedback."
      }
    ]
  },
  {
    "number": 6106,
    "title": "Deribit - Stop Limit orders Pyhton",
    "created_at": "2019-11-11T17:55:11Z",
    "closed_at": "2019-11-12T15:09:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6106",
    "body": "Hi all,\r\n\r\nI'm currently trying to have ccxt open stop_limit orders in Deribit, from python.\r\n\r\nI tried the bellow, but no luck:\r\n```\r\n            params = {\r\n                    \"stop_price\": price,\r\n                    \"type\":\"stop_limit\",\r\n                    \"trigger\": \"last_price\",\r\n                    }\r\n                self.connection.create_order('BTC-PERPETUAL,\"stop_limit\", \"buy\", size, price, params)\r\n```\r\n\r\nThat gets me:\r\n\r\nccxt.base.errors.NotSupported: deribit {\"testnet\":true,\"message\":\"not_implemented\",\"error\":10033,\"usOut\":1573494728964015,\"usIn\":1573494728963999,\"usDiff\":16,\"success\":false}\r\n\r\nThough given the Deribit.py \"create_order\" function, I don't see any reason that wouldn't work.\r\n\r\nPlease help! Thanks!\r\n\r\nedit: stop price and buy price should be equal",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6106/comments",
    "author": "mattou78400",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-11-12T15:09:01Z",
        "body": "@mattou78400 i don't think that functionality is implemented with Deribit testnet. The message in the error you're getting says that this request is not implemented on the exchange side. Let us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 6073,
    "title": "Question on Poloniex's spot trading fees",
    "created_at": "2019-11-01T11:34:08Z",
    "closed_at": "2019-11-01T11:46:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6073",
    "body": "- OS: Any\r\n- Programming Language version: Any\r\n- CCXT version: 1.18.362\r\n- Exchange: Poloniex\r\n- Method: -\r\n\r\nPoloniex is charging 0 trading fees until the end of the year, and CCXT files have been changed accordingly.\r\nNevertheless, Poloniex has a private endpoint (used in CCXT's fetchTradingFees()) that returns the current fees for the user accessing it. fetchTradingFees() works correctly, and returns the trading fees for the tier the user is on. It currently returns 0% for both maker and taker, without having to modify the static fees in CCXT.\r\n\r\nI'm just wondering if the modification of the static fees should indeed be done. After all the fees have no meaning if there is no authenticated user to make a trade.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6073/comments",
    "author": "WoK-E",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-11-01T11:46:09Z",
        "body": "> I'm just wondering if the modification of the static fees should indeed be done.\r\n\r\nTbh, we would rather remove all those hardcoded magic numbers from the lib. This is something we are going to address soon, hopefully. But for now, we have to maintain them up to date for less confusion, since `fetchTradingFees()` isn't fully documented in the Manual yet.\r\n\r\n> After all the fees have no meaning if there is no authenticated user to make a trade.\r\n\r\nTotally agree with you on this!\r\n\r\nLet me know if the above does not answer the question. Thx!"
      }
    ]
  },
  {
    "number": 6057,
    "title": "[question] rate limit error type?",
    "created_at": "2019-10-29T10:01:23Z",
    "closed_at": "2019-10-29T10:29:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6057",
    "body": "Is the `DDoSProtection` network error the one to use if a _rate limit exceeded_ type error is encountered?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6057/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-29T10:04:41Z",
        "body": "In most cases we throw `DDoSProtection`, since the rate limit itself is for protection from abuse. We can subclass a specific type of `DDoSProtection` and call it `RateLimitExceeded` if that will help handle the exceptions better in userland. Do you need a more specific class of errors for these exceptions?"
      },
      {
        "user": "npomfret",
        "created_at": "2019-10-29T10:27:15Z",
        "body": "> We can subclass a specific type of DDoSProtection and call it RateLimitExceeded if that will help \r\n\r\nThat sounds like a good idea.  \r\n\r\n> Do you need a more specific class of errors for these exceptions?\r\n\r\nNot right now.  Thanks"
      }
    ]
  },
  {
    "number": 6045,
    "title": "Implementing CCXT in PyPy",
    "created_at": "2019-10-27T13:47:04Z",
    "closed_at": "2024-08-06T11:21:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6045",
    "body": "Hi,\r\n\r\nI know PyPy is not explicitly supported by ccxt but wonder if anyone manages to use CCXT with pypy interpretator? How painful (or is it painful) to solve the compatibility issues with PyPy? Would be interested to get an more efficient ccxt  with PyPy if that is feasible at all.\r\n\r\nThank you.\r\n ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6045/comments",
    "author": "icytrader",
    "comments": [
      {
        "user": "Defqon51",
        "created_at": "2021-01-12T12:49:31Z",
        "body": "I am wondering the same, has anyone tried it yet?"
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-06T11:21:42Z",
        "body": "i tried and ccxt works within PyPy. closing this issue."
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-06T11:22:36Z",
        "body": "the only thing that might need to be done at this moment (we will fix that soon) on Windows OS you might need:\r\n```\r\nimport sys\r\nimport asyncio\r\nif sys.platform == 'win32':\r\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\r\n```"
      }
    ]
  },
  {
    "number": 6032,
    "title": "Passing keys to cli.py from keys.json",
    "created_at": "2019-10-24T10:09:15Z",
    "closed_at": "2019-10-24T10:14:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6032",
    "body": "I've hunted for an answer. Using cli.py\r\n\r\nHow to pass keys from keys.json or keys.local.json to cli.py ? My below attempt failed. \r\n\r\n`    \"bitforex\":      { \"skip\": true },\r\n    \"bithumb\":       { \"skip\": true },\r\n    \"bitmex\":       {\"apiKey\": '****', \"secret\": '****'},\r\n    \"bitibu\":        { \"skip\": true },\r\n    \"bitkk\":         { \"skip\": true },\r\n`\r\n\r\n- OS: Ubuntu 18\r\n- Programming Language version: python\r\n- CCXT version: latest\r\n- Exchange: Bitmex\r\n- Method: keys\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6032/comments",
    "author": "interzonez",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-24T10:14:54Z",
        "body": "@interzonez your attempt is almost correct, the contents of the file should be:\r\n\r\n```JavaScript\r\n{\r\n    \"bitmex\": {\"apiKey\": \"****\", \"secret\": \"****\"}\r\n}\r\n```\r\n\r\n↑ Use double quotes (`\"`) instead of single quotes (`'`) everywhere throughout the JSON file. \r\n\r\nThe two files work like this:\r\n\r\n- if `keys.local.json` is present, then `cli.py` will load the keys from there\r\n- if `keys.local.json` is missing, `cli.py` will try to load the keys from `keys.json`, if it's present\r\n\r\nLet us know if that does not answer the question."
      },
      {
        "user": "interzonez",
        "created_at": "2019-10-24T12:38:13Z",
        "body": "Many thanks, works.\r\nWhat's the difference between using `keys.local.json` and `keys.json`  ?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-24T13:16:23Z",
        "body": "> What's the difference between using keys.local.json and keys.json ?\r\n\r\n`keys.json` is used for shared keys that may be used on our Travis CI for private testing, so it is a part of the repo, and `keys.local.json` is your local override, that is not a part of the repo. I'd recommend to use `keys.local.json` for your personal keys and private testing."
      }
    ]
  },
  {
    "number": 5944,
    "title": "Indodax support for market orders",
    "created_at": "2019-10-08T21:06:56Z",
    "closed_at": "2019-10-10T20:41:03Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5944",
    "body": "Indodax now support market and stop orders. \r\nI wish to execute market orders on indodax using ccxt\r\n\r\n- OS: ALL\r\n- Programming Language version: ALL\r\n- CCXT version: 1.18.1157\r\n- Exchange: Indodax\r\n- Method: createOrder\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5944/comments",
    "author": "azharuniverse",
    "comments": [
      {
        "user": "azharuniverse",
        "created_at": "2019-10-10T16:02:25Z",
        "body": "Hi @kroitor , This is not a question but a feature request. Indodax has released support for market order but ccxt doesn't yet support it."
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-10T16:15:03Z",
        "body": "@azharuniverse hi! We will look into it and will add it asap."
      },
      {
        "user": "azharuniverse",
        "created_at": "2019-10-10T20:39:42Z",
        "body": "You can close this ticket. I just checked everything in more detail and found that although they support Market and Stop orders on selected pair on exchange. There is no way it can be done via API. \r\nLooks like they haven't updated their API since long time."
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-10T20:41:03Z",
        "body": "@azharuniverse ok, thanks for the followup, really appreciate the feedback from you! Closing this for now."
      }
    ]
  },
  {
    "number": 5930,
    "title": "Oceanex API has different dynamics. Uses 2048 key.pem to generate key. How to get ccxt to work with oceanex?",
    "created_at": "2019-10-06T21:39:54Z",
    "closed_at": "2019-10-07T07:32:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5930",
    "body": "Language: Python\r\nCCXT Version: Latest\r\nExchange: ccxt.oceanex()\r\n\r\nGeneral question, Ive successfully created a key on this exchange. Would like some guidance on what to place in the apiKey and secret attributes? Was the 2048 pem key placed as the apiKey attribute? \r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5930/comments",
    "author": "karlandoh",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-07T07:32:24Z",
        "body": "@karlandoh \r\n\r\n> Would like some guidance on what to place in the apiKey and secret attributes? Was the 2048 pem key placed as the apiKey attribute?\r\n\r\nYes, you should set the `apiKey` and the `secret` should be the full PEM, including the newlines and the RSA private key header/footer, as shown below:\r\n\r\nThis is how we tested this:\r\n\r\n```\r\n        \"apiKey\": \"ID3A7CE21239\",\r\n        \"secret\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpgIBAAKCAQEA3Mc4KehdS8hj1vieiT4P6gstimSARjTasYUw2QhNbHD1lAnh\\ngN92wjLRZvHhXdb6iO62kXJ5V+S5bGnPZTp5FwC/kFVGwHOEmG7Q6BJdLgsPmLF5\\nkBO1v9wIYJ3WuIB1JBaACPbuW/Qa1yTD+K089s0+XvRcbtLjYT/qH/sdHRujD0Kh\\nSJ8rKRy8V1i1lVV9rEHFvz9ZSauZ90mVXrvGCWWyDnsR76rWR/AXSXkKJnD+dESg\\n3X9JD+5C/Bhy1oI2DH12cpOswmWfHrnHwjuVArbJWUbFvF3cIoZO81lG7YUrei9q\\n9+4QTy1WxejALrOrImcpzGfL0lOugf/D9XNmrQIDAQABAoIBAQCRg3DeFjvfpf1A\\nA++h71jX3nQuodz16QI3PN0cPt+g2LbT0sthgGeqyYnA+y2aBwXDHepoKfYWWzdn\\nYDoEs0x6P9EC1WHjmH/NZESmoOvvW/T0pAzGTGdfRCv1WjLaujf7CCVtQyuJSdOi\\n96V+stfapx4zwYVmufKJ93FdkMn4kzQ25+5OP9Uk2gjZtuL12BbGZrVcFcJcNzLP\\nhcD354xO1iaZkrA6xHbx2gTPRLKZlqKs9G0OGX4Sh0ioAmUsBRaOHCdw3lxkb5Mc\\nUzLDve82kkLyKbZ+zuxUQiawHCl79UMwe9vODcvTk5dZvA+XuKTvFvkfWkH7yDlF\\ndyPfyzD1AoGBAPBb6WW8h4DVHHllqacwK5P6Rh80br1rwYc+IY/KeNLLJ1UQUDNN\\no0ISQXwivtRYrqOpRT3IdMIrudVZbtEEjI6j/1737nI/I+mPwguVZSfeJFklP5TU\\nmL1fDUWOibMnFsv3WyL/3bMPbxAwEBK/cLShbywSakkp3lcgT81JuO5vAoGBAOsl\\nHW0Ii2dgh2DPTJZmkWrf7Fl2QrwnuhvhrFkogz2kv2CIXMvuiDlDkwIBhGEpQLnq\\n4dY+uECvRalo0xNpvpehXzj/9zpFW/2RQOkQS/ykEwfl9Xdw2BirgLM7LWLVG2A9\\n1NGY6JpzbsVJ11F/EobZFgy1AnmSgsnbHwa4cMqjAoGBAM0AF1jGK2weV2LS6pfF\\n5eUYGKaUub6lITKQM1/IeLSQwMM0XrLjDNNVbrTJjaje2lSMEppXVf4l/SGSXYm4\\nL4mZJj2BiMW4RJD4I7BtgxE1zhqaQlhV2s/pOhCRObCrLi5YkkqPoC8QgtFzrMHQ\\ntffZmFAmhLBSHWiCDo4wyqHRAoGBAJfkq7No23P5mLmCbvigXMLqzqOjbsxX5TJp\\nfolBUDWbnDvhGgBpnvlOm0GqdTbGDReLkEJy1VaDYb5jBiX+Iq2UAgyx26N6dke/\\ncmyaqFsUKW7qrrtu20hkUIh2a4TyH/L1Pen+mhJbCmzKnBn6uZ79z+55ZpXdfDqk\\nHtCah9F9AoGBAO9x28be0Vum10DdyKzeKgIfLcdoSaP+S/Kmg3x3DnYbjM1DYWSL\\nwULNibKj7lInzMWHrFFX7699QM9U61AXBMeKucTHsa70qZ1xuuYjM5pWMuHNiDjj\\nop2PjLmtGBx0ZZcy2viShsGS1/mzTMH+9p0JNOsk/aUaQIng3R45ok9v\\n-----END RSA PRIVATE KEY-----\"\r\n```\r\n\r\n( ↑ This particular key will not work, I've posted it here just to demonstrate the usage, however, it should work with your key).\r\n\r\nLet us know if that does not answer the question."
      },
      {
        "user": "karlandoh",
        "created_at": "2019-10-09T05:45:34Z",
        "body": "Thank you very much!"
      }
    ]
  },
  {
    "number": 5912,
    "title": "Transaction Details [GET/api/spot/v3/fills?] madness",
    "created_at": "2019-10-03T17:54:46Z",
    "closed_at": "2020-03-14T23:44:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5912",
    "body": "Does anyone understand how to get my fills from the okex3 api?  When i get the trades for an order there's a weird mix of buys and sells in there.  Some have fees, some don't.  I can see from the comments in the code that it's a ledger-style response.  But I can't seem to pair them up in a sensible way.\r\n\r\nHere's an example for a maker sell order:\r\n```\r\n[\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"-0.00000035\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679066\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"buy\",\r\n    \"size\": \"0.00034151\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"-0.00000081\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679065\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"buy\",\r\n    \"size\": \"0.00080115\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"-0.00000062\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679064\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"buy\",\r\n    \"size\": \"0.00061841\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"0\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679063\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"sell\",\r\n    \"size\": \"0.050223\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"0\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679062\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"sell\",\r\n    \"size\": \"0.117817\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:22.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"0\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377679061\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"sell\",\r\n    \"size\": \"0.090943\",\r\n    \"timestamp\": \"2019-10-03T15:01:22.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:17.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"-0.00002643\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377678247\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"buy\",\r\n    \"size\": \"0.0264257\",\r\n    \"timestamp\": \"2019-10-03T15:01:17.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T15:01:17.000Z\",\r\n    \"exec_type\": \"M\",\r\n    \"fee\": \"0\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7377678246\",\r\n    \"liquidity\": \"M\",\r\n    \"order_id\": \"3628171542291456\",\r\n    \"price\": \"0.0068\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"sell\",\r\n    \"size\": \"3.886133\",\r\n    \"timestamp\": \"2019-10-03T15:01:17.000Z\"\r\n  }\r\n]\r\n```\r\n... and a taker sell order:\r\n\r\n```\r\n[\r\n  {\r\n    \"created_at\": \"2019-10-03T08:46:33.000Z\",\r\n    \"exec_type\": \"T\",\r\n    \"fee\": \"-0.00000051\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7374219830\",\r\n    \"liquidity\": \"T\",\r\n    \"order_id\": \"3627836574017536\",\r\n    \"price\": \"0.0067\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"buy\",\r\n    \"size\": \"0.000335\",\r\n    \"timestamp\": \"2019-10-03T08:46:33.000Z\"\r\n  },\r\n  {\r\n    \"created_at\": \"2019-10-03T08:46:33.000Z\",\r\n    \"exec_type\": \"T\",\r\n    \"fee\": \"0\",\r\n    \"instrument_id\": \"XMR-BTC\",\r\n    \"ledger_id\": \"7374219829\",\r\n    \"liquidity\": \"T\",\r\n    \"order_id\": \"3627836574017536\",\r\n    \"price\": \"0.0067\",\r\n    \"product_id\": \"XMR-BTC\",\r\n    \"side\": \"sell\",\r\n    \"size\": \"0.05\",\r\n    \"timestamp\": \"2019-10-03T08:46:33.000Z\"\r\n  }\r\n] \r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5912/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-03T21:52:46Z",
        "body": "@npomfret yes, it's very inconvenient, but with okex (either 1 or 3) you have to remember the order history to match orders against fills and calculate the fees properly. Also, we've noticed missing fills/missing orders in their API, and there may be gaps in the date-based pagination (like, they will only serve 3-day history), so, it cannot be used reliably to deduce the entire history, you may want to save the balance deltas in order to match them with fills over time. Unfortunately, this is not something that we can work around on our side, as this issue is fully dependent on the exchange API itself. Let us know if you have specific questions on this matter, we will be happy to help (where we can)."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-14T23:44:05Z",
        "body": "@npomfret \r\n\r\nIn the second case you see two \"fills\", but those are not really fills in common sense, those are OKEX's ledger records, and you have at least two records for both sides of the trade – during a trade you give some currency, thus a sell, and you receive some currency, thus a buy. This was actually just one fill represented as two records in this case.\r\n\r\nThe currency you gave is not charged any fee. The currency you received – is charged with the fee (so, in this trade you've paid the fee from the currency you've received). OKEX calls those records \"buy\" and \"sell\", but in fact they should be treated as \"given\"/\"received\" – those names will make a lot more sense. The size in each record represents the amount of currency given/received on this or that side of the trade.\r\n\r\nTherefore in OKEX terms each record corresponds to one of the two sides of the trade, as seen from your perspective. This is easy to see from your second example, since it has only one actual fill that is represented by a pair of \"given/received\" records in the OKEX ledger.\r\n\r\nThe first example is logically identical, the only difference is that it's a bit more complicated, because each actual fill will generate two ledger records, therefore in the first example you see more than one pair of \"buy+sell\", because the order was filled in multiple actual trades/fills.\r\n\r\nHope that answers your question, let me know if not."
      }
    ]
  },
  {
    "number": 5910,
    "title": "[okex3] transactions have no id",
    "created_at": "2019-10-03T12:47:42Z",
    "closed_at": "2019-10-16T03:59:26Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5910",
    "body": "Can the field `payment_id` be used?\r\n\r\n\r\n```\r\n{\r\n\"to\":\"48PjH3ksv1fiXniKvKvyH5UtFs5WhfS2Vf7U3Twz...\"\r\n\"from\":\"\"\r\n\"txid\":\"14c9a8c925647cdb7e5b2937ea9aefe2b29b2c27...\"\r\n\"amount\":\"4.19511659\"\r\n\"status\":\"2\"\r\n\"currency\":\"XMR\"\r\n\"timestamp\":\"2019-10-01T14:54:19.000Z\"\r\n\"payment_id\":\"3bfa501c63a0469f8ad569ed287176c4e8a6b956...\" <-- this\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5910/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-03T21:44:59Z",
        "body": "@npomfret yes, i think so... Will add this, asap, unless you submit it sooner than me ))"
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-16T03:27:22Z",
        "body": "@npomfret is it a deposit or a withdrawal?"
      }
    ]
  },
  {
    "number": 5909,
    "title": "[okex3] my trade fee issues",
    "created_at": "2019-10-03T12:44:49Z",
    "closed_at": "2019-10-16T04:14:16Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5909",
    "body": "The fee object obtained from calling `fetchOrderTrades` \r\n\r\n * contains a fee object that has a negative cost\r\n * contains a fee object that has no currency \r\n\r\nHere is a pair as an example.  The BTC fee is 0.15%.\r\n\r\n```\r\n{\r\n\"item1\":{\r\n\"fee\":\"-0.00000051\"\r\n\"side\":\"buy\"\r\n\"size\":\"0.000335\"\r\n\"price\":\"0.0067\"\r\n\"order_id\":\"3627836574017536\"\r\n\"exec_type\":\"T\"\r\n\"ledger_id\":\"7374219830\"\r\n\"liquidity\":\"T\"\r\n\"timestamp\":\"2019-10-03T08:46:33.000Z\"\r\n\"created_at\":\"2019-10-03T08:46:33.000Z\"\r\n\"product_id\":\"XMR-BTC\"\r\n\"instrument_id\":\"XMR-BTC\"\r\n}\r\n\"item2\":{\r\n\"fee\":\"0\"\r\n\"side\":\"sell\"\r\n\"size\":\"0.05\"\r\n\"price\":\"0.0067\"\r\n\"order_id\":\"3627836574017536\"\r\n\"exec_type\":\"T\"\r\n\"ledger_id\":\"7374219829\"\r\n\"liquidity\":\"T\"\r\n\"timestamp\":\"2019-10-03T08:46:33.000Z\"\r\n\"created_at\":\"2019-10-03T08:46:33.000Z\"\r\n\"product_id\":\"XMR-BTC\"\r\n\"instrument_id\":\"XMR-BTC\"\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5909/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "npomfret",
        "created_at": "2019-10-03T17:45:05Z",
        "body": "Actually, according to the docs:\r\n\r\n> New status for spot trading transaction details: fee is either a positive number (invitation rebate) or a negative number (transaction fee deduction).\r\n\r\nSo I think we need to _invert_ the fee."
      },
      {
        "user": "npomfret",
        "created_at": "2019-10-25T19:01:09Z",
        "body": "We still need to do the fee currency, something like...\r\n\r\n                    const feeCcy = side === 'buy' ? baseCcy : quoteCcy;\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-25T19:54:11Z",
        "body": "@npomfret you're right, will get to it."
      },
      {
        "user": "npomfret",
        "created_at": "2019-10-26T12:41:02Z",
        "body": "I've got the above in my codebase, seems to work.  Will submit a PR if you don't beat me to it."
      }
    ]
  },
  {
    "number": 5783,
    "title": "Lykke can't see side of order.",
    "created_at": "2019-09-07T16:04:31Z",
    "closed_at": "2019-09-07T16:07:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5783",
    "body": "- Ubuntu:\r\n- Python3:\r\n- newest:\r\n- Lykke:\r\n- Fetch open orders:\r\n\r\nHello, from something reason I can't see the side of order:\r\ni.e\r\nI run the command:\r\n`pprint(lykke.load_open_orders('WAX/BTC'))`\r\n\r\nAnd I got the following output:\r\n```\r\n{'amount': 10.0,\r\n  'average': None,\r\n  'cost': 0.0,\r\n  'datetime': '2019-09-07T16:01:35.612Z',\r\n  'fee': None,\r\n  'filled': 0.0,\r\n  'id': '7a3b3cfb-251d-4023-9d59-39e9079fd7b4',\r\n  'info': {'AssetPairId': 'WAXBTC',\r\n           'CreatedAt': '2019-09-07T16:01:35.612+00:00',\r\n           'Id': '7a3b3cfb-251d-4023-9d59-39e9079fd7b4',\r\n           'LastMatchTime': None,\r\n           'LowerLimitPrice': None,\r\n           'LowerPrice': None,\r\n           'Price': 3e-06,\r\n           'RemainingVolume': 10.0,\r\n           'Status': 'Placed',\r\n           'Type': 'Limit',\r\n           'UpperLimitPrice': None,\r\n           'UpperPrice': None,\r\n           'Volume': 10.0},\r\n  'lastTradeTimestamp': None,\r\n  'price': 3e-06,\r\n  'remaining': 10.0,\r\n  'side': None,\r\n  'status': 'Placed',\r\n  'symbol': 'WAX/BTC',\r\n  'timestamp': 1567872095612,\r\n  'type': None}]\r\n\r\n```\r\nWhy I 'side' is None??",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5783/comments",
    "author": "Arrmlet",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-09-07T16:07:27Z",
        "body": "Hi!\r\n\r\nIn the response you get from a unified `fetch*` call (any fetch call) – you see the `info` that corresponds to the original raw response from the exchange, untouched, as documented in the Manual. In that response you see no designation of the side of the order. Therefore the unified `side` field cannot be determined from the exchange response `info` in that case. So, in short, this is a limitation on the exchange side, and you probably want to question their tech support on this.\r\n\r\nLet us know if that does not answer the question."
      },
      {
        "user": "Arrmlet",
        "created_at": "2019-09-07T16:10:01Z",
        "body": "Thanks"
      }
    ]
  },
  {
    "number": 5772,
    "title": "How Can I Use Huobi Contract API with ccxt",
    "created_at": "2019-09-04T02:20:02Z",
    "closed_at": "2019-09-06T00:54:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5772",
    "body": "\r\nHow Can I Use Huobi Contract API with ccxt,please?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5772/comments",
    "author": "mubaizhou",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-09-06T00:54:42Z",
        "body": "Hi! We currently don't have the Huobi endpoints for derivatives, just the spot markets, however, we will look into adding the support for derivatives with Huobi asap. Let us know if that does not answer the question."
      },
      {
        "user": "kroitor",
        "created_at": "2022-01-02T12:16:17Z",
        "body": "The support for Huobi Derivatives was added in CCXT 1.66.16+."
      }
    ]
  },
  {
    "number": 5663,
    "title": "ImportError: No module named 'ccxt.base'; 'ccxt' is not a package",
    "created_at": "2019-08-11T07:41:33Z",
    "closed_at": "2019-08-11T15:05:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5663",
    "body": "I have two files Main.py and fetchdata.py\r\n\r\nfetchdata.py contains all the methods that ccxt provides for the exchange, when I when  I run the script in fetchdata, the script runs successfully, allowing me access to my account within the exchange, but when I am run the Main.py script and  import fetchdata then the python interpreter throws the following error:  \r\n\r\nfrom ccxt.base.exchange import Exchange\r\nImportError: No module named 'ccxt.base'; 'ccxt' is not a package\r\n\r\n\r\nI have tried to manually append the sys path to the dir, but still the same error, \r\n\r\nCould you please give me any advice ?\r\n\r\n- OS:\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.5 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n\r\n- Programming Language version:\r\npython 3.5.2\r\n- CCXT version: 1.18.87\r\n- Exchange:\r\nBinance\r\n- Method:\r\nimport ccx.base\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5663/comments",
    "author": "esteban2006",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-08-11T09:30:28Z",
        "body": "`import ccx.base`\r\n\r\nit should be `ccxt.base`?\r\n\r\ntry:\r\n\r\n```\r\nExchange = ccxt.Exchange()\r\n```"
      },
      {
        "user": "frosty00",
        "created_at": "2019-08-11T09:31:12Z",
        "body": "you have to run the code from inside the `ccxt/python` directory for ccxt.base to exist"
      },
      {
        "user": "esteban2006",
        "created_at": "2019-08-11T14:38:00Z",
        "body": "thank you for the answer, @frosty00 \r\n\r\nwhen you mention that I should run my code from inside the `ccxt/python` is this means that I should copy my project directory into `.../dist -packages/ccxt` ?\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-08-11T14:48:37Z",
        "body": "@esteban2006 \r\n\r\n> is this means that I should copy my project directory into `.../dist -packages/ccxt` ?\r\n\r\nThat means that you should not `import ccxt.base` at all. If you're not developing CCXT itself, and you develop a project that uses CCXT, then you should just `import ccxt` or `from ccxt import Exchange` instead (if you want to inherit your subclass from it). If you don't subclass the `class Exchange` in your code, then you should just `import ccxt`."
      },
      {
        "user": "esteban2006",
        "created_at": "2019-08-11T14:56:08Z",
        "body": "thank you \r\n\r\nthis is how i am importing the module \r\n\r\n```\r\nimport ccxt\r\nbinance = ccxt.binance()\r\n```\r\nI have also export the python path to ccxt this way:\r\n\r\n`export PYTHONPATH=$PYTHONPATH:.../ccxt`\r\n\r\nbut it does not seem to work"
      },
      {
        "user": "esteban2006",
        "created_at": "2019-08-11T15:05:27Z",
        "body": "Thank you for the answers, there is absolute nothing wrong with ccxt path or importing the module, I had created a copy of the exchange file from the ccxt module and NAMED it ccxt.py for study purposes (I forgot to remove it or rename it from the current directory), so python interpreter was reading this file instead of the correct ccxt module, I appreciate your time and effort. "
      }
    ]
  },
  {
    "number": 5632,
    "title": "Binance create_order() timeInForce is overriden",
    "created_at": "2019-08-05T10:20:03Z",
    "closed_at": "2019-08-05T14:59:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5632",
    "body": "- OS: Any\r\n- Programming Language version: Any\r\n- CCXT version: 1.18.1008\r\n- Exchange: Binance\r\n- Method: create_order()\r\n\r\nBinance accepts new orders with the parameter timeInForce set to IOC, FOK, or GTC.\r\ncreate_order() correctly checks if the timeInForce parameter is required, but incorrectly sets it to defaultTimeInForce (that is set in the options), even if timeInForce is passed to create_order() in the params array.\r\nFurthermore, if timeInForce is not required, the value passed in the params array is ignored.\r\n\r\nA modification is needed in order to take into account the value passed in params.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5632/comments",
    "author": "WoK-E",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-08-05T14:47:38Z",
        "body": "```\r\n        const response = await this[method] (this.extend (request, params));\r\n```\r\n\r\nNot sure what you mean, it seems to be extending the request with the params correctly here. Are you sure you provided a `timeInForce` argument to `createOrder` correctly?"
      },
      {
        "user": "WoK-E",
        "created_at": "2019-08-05T14:59:58Z",
        "body": "@frosty you're right. Something was not working for me, check the code and somehow chose to misread the line you mention.\r\nClosing the issue - Sorry"
      }
    ]
  },
  {
    "number": 5625,
    "title": "Question on using code PHP",
    "created_at": "2019-08-02T10:18:05Z",
    "closed_at": "2019-08-02T10:38:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5625",
    "body": "Hello, I wildly apologize for my stupid question, I look at examples in the php language and I can’t find a method that unloads Japanese candles - im use _fetch_ohlcv_ - In the first case, I get something very similar to a candle, but the numbers that I see on the exchange on the chart in the last candle and the numbers that I get on api are different \r\n\r\nTell me what method is needed to download a chart with Japanese candles? or is it not yet realized?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5625/comments",
    "author": "StasToken",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-08-02T15:42:43Z",
        "body": "@StasToken hey) Guess you've figured it out? )"
      },
      {
        "user": "StasToken",
        "created_at": "2019-08-02T16:30:36Z",
        "body": "Yes, I just didn’t see right away that there’s a date for today yet he passed me the old quotes so it didn’t fit"
      },
      {
        "user": "kroitor",
        "created_at": "2019-08-02T16:31:49Z",
        "body": "@StasToken ok, glad to know you've got it sorted out. Thx!"
      }
    ]
  },
  {
    "number": 5611,
    "title": "Bitfinex fetchOHLCV returns 25 candles instead of 30 for RIF/USD",
    "created_at": "2019-07-29T15:13:09Z",
    "closed_at": "2019-07-29T15:37:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5611",
    "body": "Hello community, I am using the bitfinex market to bring the information 30 days ago. but only 25 items arrive, does not arrive all complete\r\n\r\nvar date_prev = bitfinex.parse8601('2019-06-29 00:00:00'); await bitfinex.fetchOHLCV('RIF/USD', '1d', date_prev, 30),",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5611/comments",
    "author": "edinsoncs",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-29T15:37:47Z",
        "body": "Fetching the bitfinex OHLCV for RIF/USD gives me this:\r\n\r\n```\r\nnode examples/js/cli bitfinex fetchOHLCV RIF/USD 1d 2019-06-29T00:00:00Z 30 --iso8601\r\n```\r\n\r\n```\r\nbitfinex.fetchOHLCV (RIF/USD, 1d, 1561766400000, 30)\r\n2019-06-29T00:00:00.000Z | 0.093642 | 0.093642 | 0.083267 | 0.087482 |    241701.80282901\r\n2019-06-30T00:00:00.000Z | 0.089256 | 0.089256 |    0.074 | 0.075242 |  284305.5224569042\r\n2019-07-01T00:00:00.000Z |  0.07313 | 0.083287 |    0.073 | 0.081714 |    173550.62854593\r\n2019-07-02T00:00:00.000Z | 0.082617 |     0.09 | 0.077936 | 0.089559 |    284491.70137596\r\n2019-07-03T00:00:00.000Z | 0.089585 |  0.10284 | 0.089585 |  0.10284 |    410761.87645237\r\n2019-07-04T00:00:00.000Z |  0.10348 |  0.13427 | 0.099309 |  0.11646 | 441021.70571273624\r\n2019-07-05T00:00:00.000Z |  0.10924 |  0.11255 |   0.0975 |     0.11 |    196543.74403067\r\n2019-07-06T00:00:00.000Z |  0.10518 |  0.10518 | 0.087778 |  0.09809 |    390342.06023352\r\n2019-07-07T00:00:00.000Z |   0.0949 |  0.09811 | 0.093123 |  0.09811 |     96683.63336657\r\n2019-07-08T00:00:00.000Z |  0.10685 |     0.13 |   0.0971 |     0.13 |     75582.68454168\r\n2019-07-09T00:00:00.000Z |   0.1289 |   0.1295 |  0.10322 |   0.1278 |    131320.29429119\r\n2019-07-10T00:00:00.000Z |   0.1277 |   0.1458 |    0.097 |   0.0975 |     108609.5413282\r\n2019-07-11T00:00:00.000Z |  0.11606 |     0.12 |   0.0981 |     0.12 |     21799.03429033\r\n2019-07-12T00:00:00.000Z |    0.119 |   0.1322 |    0.101 |   0.1322 |      2000.76048731\r\n2019-07-13T00:00:00.000Z |    0.132 |    0.132 |    0.102 |    0.102 |     11274.59863108\r\n2019-07-14T00:00:00.000Z |     0.11 |     0.11 |   0.1022 |   0.1022 |       30002.387561\r\n2019-07-15T00:00:00.000Z |  0.10221 |  0.10221 |   0.0965 |   0.0965 |            80114.1\r\n2019-07-16T00:00:00.000Z |  0.11092 |   0.1116 |  0.09651 |  0.09661 |     26756.77404145\r\n2019-07-17T00:00:00.000Z |  0.09661 |  0.10291 |    0.095 |  0.10243 |    125262.59944802\r\n2019-07-18T00:00:00.000Z |  0.12166 |  0.12454 |  0.11023 |  0.12454 |     16965.41967914\r\n2019-07-19T00:00:00.000Z |  0.12453 |   0.1322 |  0.10156 |  0.10156 |       784.45186287\r\n2019-07-21T00:00:00.000Z | 0.097516 | 0.097516 | 0.097516 | 0.097516 |              12000\r\n2019-07-22T00:00:00.000Z |  0.09855 |  0.09855 |  0.09855 |  0.09855 |                 55\r\n2019-07-24T00:00:00.000Z |   0.1205 |   0.1205 |   0.1205 |   0.1205 |        91.68427808\r\n2019-07-26T00:00:00.000Z |  0.11235 |  0.12398 |  0.11235 |  0.12398 |       648.19293126\r\n25 objects\r\n```\r\n\r\n↑ If you pay attention to the dates, you will notice that it does return 1-day candles starting from the requested date, however, the last reported daily candle is of 2019-07-26 (3 days ago).\r\n\r\nNow, if you fetch the RIF/USD trades with bitfinex, you will see this:\r\n\r\n```\r\nnode examples/js/cli bitfinex fetchTrades RIF/USD\r\n```\r\n\r\n```\r\nbitfinex.fetchTrades (RIF/USD)\r\n       id |     timestamp |                 datetime |  symbol | type | order | side | takerOrMaker |    price |       amount |               cost | fee\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------\r\n379673000 | 1563466489000 | 2019-07-18T16:14:49.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  394.5988224 |    49.084147518336 |\r\n379673020 | 1563466519000 | 2019-07-18T16:15:19.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  361.9443438 |    45.022256925282 |\r\n379673075 | 1563466583000 | 2019-07-18T16:16:23.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  421.6884936 |    52.453831718904 |\r\n379673118 | 1563466622000 | 2019-07-18T16:17:02.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  407.0713176 |    50.635601196264 |\r\n379693195 | 1563466679000 | 2019-07-18T16:17:59.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  390.0563556 |    48.519110073084 |\r\n379693254 | 1563466741000 | 2019-07-18T16:19:01.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  394.2185634 | 49.036847101325996 |\r\n379693296 | 1563466817000 | 2019-07-18T16:20:17.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.4359814 |    49.561451726346 |\r\n379693404 | 1563466913000 | 2019-07-18T16:21:53.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 402.51685239 |   50.0690712687921 |\r\n379693585 | 1563467007000 | 2019-07-18T16:23:27.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  388.1729964 | 48.284839022195996 |\r\n379693748 | 1563467078000 | 2019-07-18T16:24:38.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 562.01696889 |  69.90929076022711 |\r\n379693764 | 1563467087000 | 2019-07-18T16:24:47.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 454.39552359 |   56.5222591793601 |\r\n379693980 | 1563467183000 | 2019-07-18T16:26:23.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 129.69131265 |   16.1323023805335 |\r\n379693979 | 1563467183000 | 2019-07-18T16:26:23.000Z | RIF/USD |      |       |  buy |              |  0.12438 | 266.56946791 |   33.1559104186458 |\r\n379699237 | 1563467293000 | 2019-07-18T16:28:13.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 401.05711577 |   49.8874946306303 |\r\n379699304 | 1563467400000 | 2019-07-18T16:30:00.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  367.7315952 |    45.742133126928 |\r\n379699401 | 1563467495000 | 2019-07-18T16:31:35.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  374.6662368 |    46.604733195552 |\r\n379699555 | 1563467635000 | 2019-07-18T16:33:55.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  382.6274274 |    47.595025694286 |\r\n379699620 | 1563467696000 | 2019-07-18T16:34:56.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  388.0223958 |  48.26610581356201 |\r\n379699697 | 1563467830000 | 2019-07-18T16:37:10.000Z | RIF/USD |      |       |  buy |              |  0.12439 |   373.765539 | 46.492695396209996 |\r\n379699723 | 1563467867000 | 2019-07-18T16:37:47.000Z | RIF/USD |      |       |  buy |              |  0.12439 |   378.066624 |     47.02770735936 |\r\n379709337 | 1563468641000 | 2019-07-18T16:50:41.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  469.4076414 |    58.389616513746 |\r\n379709344 | 1563468712000 | 2019-07-18T16:51:52.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 359.55135089 | 44.724592537207094 |\r\n379709354 | 1563468743000 | 2019-07-18T16:52:23.000Z | RIF/USD |      |       |  buy |              |  0.12439 | 360.44836804 |   44.8361725004956 |\r\n379709413 | 1563468889000 | 2019-07-18T16:54:49.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  388.2928356 |    48.299745820284 |\r\n379709426 | 1563468932000 | 2019-07-18T16:55:32.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  446.7856878 |    55.575671705442 |\r\n379709446 | 1563468971000 | 2019-07-18T16:56:11.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.7044172 |    49.594842455508 |\r\n379709449 | 1563468978000 | 2019-07-18T16:56:18.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.7044172 |    49.594842455508 |\r\n379709453 | 1563468991000 | 2019-07-18T16:56:31.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.7044172 |    49.594842455508 |\r\n379709459 | 1563468999000 | 2019-07-18T16:56:39.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.7044172 |    49.594842455508 |\r\n379709464 | 1563469009000 | 2019-07-18T16:56:49.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  398.7044172 |    49.594842455508 |\r\n379709489 | 1563469124000 | 2019-07-18T16:58:44.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  450.8716434 | 56.083923722525995 |\r\n379780790 | 1563493856000 | 2019-07-18T23:50:56.000Z | RIF/USD |      |       |  buy |              |  0.12454 | 165.04889524 | 20.555189413189602 |\r\n379780789 | 1563493856000 | 2019-07-18T23:50:56.000Z | RIF/USD |      |       |  buy |              |  0.12439 |  93.14643197 |   11.5864846727483 |\r\n379861456 | 1563523406000 | 2019-07-19T08:03:26.000Z | RIF/USD |      |       |  buy |              |  0.12454 |  11.23913295 |     1.399721617593 |\r\n379861455 | 1563523406000 | 2019-07-19T08:03:26.000Z | RIF/USD |      |       |  buy |              |  0.12453 |  45.75250208 |    5.6975590840224 |\r\n379861549 | 1563523526000 | 2019-07-19T08:05:26.000Z | RIF/USD |      |       |  buy |              |   0.1322 |  38.97123625 |      5.15199743225 |\r\n379861548 | 1563523526000 | 2019-07-19T08:05:26.000Z | RIF/USD |      |       |  buy |              |    0.132 |  15.24169696 | 2.0119039987200003 |\r\n379897992 | 1563529390000 | 2019-07-19T09:43:10.000Z | RIF/USD |      |       |  buy |              |   0.1322 |  11.24239835 | 1.4862450618700003 |\r\n379969848 | 1563545365000 | 2019-07-19T14:09:25.000Z | RIF/USD |      |       | sell |              |  0.10156 |  366.6130388 | 37.233220220528004 |\r\n379969852 | 1563545411000 | 2019-07-19T14:10:11.000Z | RIF/USD |      |       | sell |              |  0.10156 | 295.39185748 |   29.9999970456688 |\r\n379969855 | 1563545428000 | 2019-07-19T14:10:28.000Z | RIF/USD |      |       | sell |              |  0.10156 | 432.16891865 |    43.891075378094 |\r\n379969854 | 1563545428000 | 2019-07-19T14:10:28.000Z | RIF/USD |      |       | sell |              |  0.10157 |           44 |            4.46908 |\r\n379969857 | 1563545441000 | 2019-07-19T14:10:41.000Z | RIF/USD |      |       | sell |              |  0.09678 |         1840 |           178.0752 |\r\n380380598 | 1563679555000 | 2019-07-21T03:25:55.000Z | RIF/USD |      |       | sell |              | 0.097516 |        12000 |           1170.192 |\r\n380626704 | 1563791355000 | 2019-07-22T10:29:15.000Z | RIF/USD |      |       | sell |              |  0.09855 |           55 |            5.42025 |\r\n381134876 | 1563977304000 | 2019-07-24T14:08:24.000Z | RIF/USD |      |       |  buy |              |   0.1205 |  91.68427808 |     11.04795550864 |\r\n381487538 | 1564119453000 | 2019-07-26T05:37:33.000Z | RIF/USD |      |       | sell |              |  0.11235 |           58 |             6.5163 |\r\n381563468 | 1564167340000 | 2019-07-26T18:55:40.000Z | RIF/USD |      |       |  buy |              |  0.12368 | 295.09646563 |   36.4975308691184 |\r\n381563475 | 1564167372000 | 2019-07-26T18:56:12.000Z | RIF/USD |      |       |  buy |              |  0.12398 | 295.09646563 | 36.586059808807406 |\r\n381563483 | 1564167418000 | 2019-07-26T18:56:58.000Z | RIF/USD |      |       |  buy |              |  0.12474 |          230 |            28.6902 |\r\n50 objects\r\n```\r\n\r\n↑ The last trade on bitfinex RIF/USD was on 2019-07-26, so that symbol has not been traded for three days. That is the reason you don't get the candles for Jul 27, 28 and 29. And it is documented in the CCXT Manual that you will not get the candles, if the exchange does not provide them. Obviously, in this case, there was no history for the past three days (nothing was going on, no trades in fact), so the exchange cannot provide you with the history for the past three days for that symbol. Most of that you can easily see if you simply use the `cli` example script as shown above. Hope that answers the question. "
      }
    ]
  },
  {
    "number": 5599,
    "title": "fetch Ticker bitfinex does not return the open level percentage",
    "created_at": "2019-07-26T16:58:34Z",
    "closed_at": "2019-07-26T17:03:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5599",
    "body": "Hello community, I am using await bitfinex.fetchTicker ('RIF / USD') to bring the open or percentage, but the returning json did not find it:\r\n\r\n`{\"ticker_day\": {\r\n\"symbol\": \"RIF/USD\",\r\n\"timestamp\": 1564159845884.2126,\r\n\"datetime\": \"2019-07-26T16:50:45.884Z\",\r\n\"high\": 0.11235,\r\n\"low\": 0.11235,\r\n\"bid\": 0.10011,\r\n\"ask\": 0.13496,\r\n\"close\": 0.11235,\r\n\"last\": 0.11235,\r\n\"average\": 0.117535,\r\n\"baseVolume\": 58,\r\n\"info\": {\r\n\"mid\": \"0.117535\",\r\n\"bid\": \"0.10011\",\r\n\"ask\": \"0.13496\",\r\n\"last_price\": \"0.11235\",\r\n\"low\": \"0.11235\",\r\n\"high\": \"0.11235\",\r\n\"volume\": \"58.0\",\r\n\"timestamp\": \"1564159845.8842127\"\r\n}\r\n}`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5599/comments",
    "author": "edinsoncs",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-26T17:03:36Z",
        "body": "@ockang hi! Some fields of the `ticker` structure may be missing, if the underlying exchange does not provide them:\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli bitfinex fetchTicker RIF/USD\r\nbitfinex.fetchTicker (RIF/USD)\r\n{        symbol:   \"RIF/USD\",\r\n      timestamp:    1564160459656.7617,\r\n       datetime:   \"2019-07-26T17:00:59.656Z\",\r\n           high:    0.11235,\r\n            low:    0.11235,\r\n            bid:    0.10011,\r\n      bidVolume:    undefined,\r\n            ask:    0.13496,\r\n      askVolume:    undefined,\r\n           vwap:    undefined,\r\n           open:    undefined,\r\n          close:    0.11235,\r\n           last:    0.11235,\r\n  previousClose:    undefined,\r\n         change:    undefined,\r\n     percentage:    undefined,\r\n        average:    0.117535,\r\n     baseVolume:    58,\r\n    quoteVolume:    undefined,\r\n           info: {        mid: \"0.117535\",\r\n                          bid: \"0.10011\",\r\n                          ask: \"0.13496\",\r\n                   last_price: \"0.11235\",\r\n                          low: \"0.11235\",\r\n                         high: \"0.11235\",\r\n                       volume: \"58.0\",\r\n                    timestamp: \"1564160459.6567616\" } }\r\nmbp:ccxt igorkroitor$\r\n```\r\n\r\n↑ As you see from the raw response contained in the `info` inside the ticker – Bitfinex does not provide enough information to calculate the percentage or the change of price with that ticker. You can only do that with `fetchOHLCV` or by doing subsequent calls to `fetchTicker` and calculating the difference between the `last` price to get the actual change.\r\n\r\nLet us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 5598,
    "title": "why base class exchange do not contains fetch_ticker definition ?",
    "created_at": "2019-07-26T16:33:04Z",
    "closed_at": "2019-07-29T10:53:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5598",
    "body": "Hi, everything is in the title :). Do we have a reason to not include `fetch_ticker` in base classes?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5598/comments",
    "author": "Matoran",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-07-27T14:32:14Z",
        "body": "Hi @Matoran, it depends on what you mean by support `fetch_ticker` in the base class. We could add a stub method that would throw a `NotSupported` error if someone tried to call `fetch_ticker` on a derived class where it doesn't exist.\r\n\r\nOn the other hand we could emulate it in the base class by doing a `fetch_order_book` followed by a `fetch_ohlcv`. However we would have to decide on whether to support it asynchronously or call one method after the other."
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-27T20:34:03Z",
        "body": "@frosty00 i guess, @Matoran is asking about the the stub that would throw a `NotSupported` exception in this case.\r\n\r\n@Matoran we will add it to the base definitions asap, your help with that is really welcome! )"
      },
      {
        "user": "Matoran",
        "created_at": "2019-07-27T21:11:36Z",
        "body": "@frosty00 @kroitor yes it's just the stub with `NotSupported`. I will do a pull request :)."
      }
    ]
  },
  {
    "number": 5550,
    "title": "question: coinfloor ledger parse",
    "created_at": "2019-07-18T15:36:46Z",
    "closed_at": "2019-07-18T15:51:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5550",
    "body": "The Coinfloor transactions api returns trades and transactions.  When parsing a trade I'm facing with the following:\r\n\r\n         {\r\n             \"datetime\": \"2017-07-25 06:41:24\",\r\n             \"id\": 1500964884381265,\r\n             \"type\": 2,\r\n             \"xbt\": \"0.1000\",\r\n             \"xbt_eur\": \"2322.00\",\r\n             \"eur\": \"-232.20\",\r\n             \"fee\": \"0.00\",\r\n             \"order_id\": 84696745\r\n         }\r\n\r\nShould this result in 2 rows in the ledger (0.1BTC in and 232.2EUR out)?  If so, how do I implement that in `parseLedgerEntry`?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5550/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-18T15:48:26Z",
        "body": "> Should this result in 2 rows in the ledger (0.1BTC in and 232.2EUR out)?\r\n\r\nIdeally – it should yield two rows. However that comes at a cost of breaking `limit` in the edge cases with date-based pagination.\r\n\r\n> If so, how do I implement that in parseLedgerEntry?\r\n\r\nThere is more than one way to approach this, all of them ugly, but reliable:\r\n\r\n1. You could duplicate the entries and append a flag before passing them to parseLedger.\r\n2. You could return an array of entries from `parseLedgerEntry` and redefine `parseLedger` that would flatten the returned arrays into a single array.\r\n3. You could combine 1+2\r\n\r\nI'm more for 2, that would make the code more robust."
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-18T15:51:26Z",
        "body": "thanks.  returning an array of items feels like the better solution to me.\r\n\r\n"
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-18T15:53:45Z",
        "body": "@kroitor does this make sense:\r\n\r\n```\r\n    parseLedger (data, currency = undefined, since = undefined, limit = undefined, params = {}) {\r\n        let result = [];\r\n        const array = Object.values (data || []);\r\n        for (let i = 0; i < array.length; i++) {\r\n            const itemOrItems = this.extend (this.parseLedgerEntry (array[i], currency), params);\r\n            if (Array.isArray (itemOrItems)) {\r\n                for (let j = 0; i < itemOrItems.length; j++) {\r\n                    result.push (itemOrItems[j]);\r\n                }\r\n            } else {\r\n                result.push (itemOrItems);\r\n            }\r\n        }\r\n\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T15:54:06Z",
        "body": "@npomfret we could also try to unify the flattening logic in the base methods, because that may be handy for implementing further enhancements. As you know, the exchanges are very inconsistent with how they call and structure various things..."
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-18T15:54:46Z",
        "body": ">  we could also try to unify the flattening logic in the base methods\r\n\r\nYes, but I won't do that as a part of this change."
      }
    ]
  },
  {
    "number": 5536,
    "title": "Exmo fetch_transaction method limitations",
    "created_at": "2019-07-17T23:33:24Z",
    "closed_at": "2019-07-18T02:14:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5536",
    "body": "Hello,\r\n\r\nI noticed that whenever we fetch transactions on Exmo the fetch_transactions method is only capable of returning transactions from the day you passed to the 'since' parameter and not from that day onwards as it's returned by most exchanges.\r\nI know this due to the way WalletHistory works on Exmo. The only solution for I came up with is to do a fetch on every single day from 'since' up to today, taking into account the limitation on requests on that method which is 10 per minute. \r\n\r\nIs that a known issue? Are there plans to fix that on the near future?\r\n\r\n- OS: Windows 7\r\n- Programming Language version: Python 3.7.3\r\n- CCXT version: 1.18.921\r\n- Exchange: Exmo\r\n- Method: fetch_transactions\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5536/comments",
    "author": "bnossn",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-18T02:14:30Z",
        "body": "Hi @bnossn!\r\n\r\n> The only solution for I came up with is to do a fetch on every single day from 'since' up to today, taking into account the limitation on requests on that method which is 10 per minute.\r\n\r\nUnfortunately, that's the only possible solution with the EXMO API.\r\n\r\n> Is that a known issue?\r\n\r\nYep.\r\n\r\n> Are there plans to fix that on the near future?\r\n\r\nNo. Because this issue is on the exchange side – we can't work around it with just one http request per call. EXMO trades have to be traversed day by day, because the exchange leaves no other way to do this.\r\n\r\nLet us know if the above does not answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-18T09:36:28Z",
        "body": "@bnossn I feel your pain, the Exmo api is bad.  You could try raising a ticket with the exchange, or tweeting them.  If no one asks they might not bother to improve it. "
      },
      {
        "user": "bnossn",
        "created_at": "2019-07-18T21:59:00Z",
        "body": "Hi @npomfret. \r\nIt definetely is pretty bad.\r\nI'll raise a ticket and see what happens."
      }
    ]
  },
  {
    "number": 5516,
    "title": "Unable to fecth deposit address huobipro?",
    "created_at": "2019-07-15T11:49:11Z",
    "closed_at": "2019-07-15T12:55:52Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5516",
    "body": "- OS: Any\r\n- Programming Language version: python3.6\r\n- CCXT version: 1.18.817\r\n- Exchange: huobipro\r\n- Method: fetchDepositAddress\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/huobipro.py\", line 823, in fetch_deposit_address\r\n    response = getattr(self, method)(self.extend(request, params))\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 423, in inner\r\n    return entry(_self, **inner_kwargs)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 452, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 448, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 551, in fetch\r\n    self.handle_errors(response.status_code, response.reason, url, method, headers, http_response, json_response)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/huobipro.py\", line 948, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: huobipro {\"status\":\"error\",\"err-code\":\"login-required\",\"err-msg\":\"The account is not logged in, please log in and try again.\",\"data\":null}\r\n```\r\nMethods working:\r\nhuobipro.loadAccounts() \r\nhuobipro.fetchBalance()\r\n\r\n\r\n\r\nhuobipro.fetchDepositAddress(\"XRP\") is giving login-required error.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5516/comments",
    "author": "SauravKanchan",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-07-15T12:14:32Z",
        "body": "Please update CCXT, huobipro's `fetchDepositAddress` has been depreciated and they do not provide an API endpoint. The old code used an endpoint that was accessible from the browser but it now requires a session cookie (i.e. to be logged in)."
      },
      {
        "user": "SauravKanchan",
        "created_at": "2019-07-15T12:55:52Z",
        "body": "Ok\r\nThanks for info"
      }
    ]
  },
  {
    "number": 5484,
    "title": "[cex] weird balances response not handled",
    "created_at": "2019-07-08T18:22:36Z",
    "closed_at": "2019-07-09T12:13:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5484",
    "body": "The following has no `used` or `total` fields for BSV:\r\n\r\n\r\n```\r\n{ info:\r\n   { timestamp: '1562609957',\r\n     username: 'up104',\r\n     BTC: { available: '0.00850103', orders: '0.00000000' },\r\n     BCH: { available: '0.99904436', orders: '0.00000000' },\r\n     BTG: { available: '0.62358797', orders: '0.00000000' },\r\n     ETH: { available: '11.12439800', orders: '0.00000000' },\r\n     USD: { available: '0.89', orders: '0.00' },\r\n     EUR: { available: '0.00', orders: '0.00' },\r\n     GBP: { available: '175.06', orders: '0.00' },\r\n     XRP: { available: '3523.967643', orders: '0.000000' },\r\n     BSV: { available: '0.99904436' },             <-- orders is missing!\r\n     DASH: { available: '0.00000000', orders: '0.00000000' },\r\n     LTC: { available: '0.00000000', orders: '0.00000000' },\r\n     XLM: { available: '0.0000000', orders: '0.0000000' },\r\n     ZEC: { available: '0.00000000', orders: '0.00000000' },\r\n     OMG: { available: '0.000000', orders: '0.000000' },\r\n     MHC: { available: '0.000000', orders: '0.000000' },\r\n     RUB: { available: '0.00', orders: '0.00' },\r\n     GUSD: { available: '0.00', orders: '0.00' } },\r\n  BTC: { free: 0.00850103, used: 0, total: 0.00850103 },\r\n  BCH: { free: 0.99904436, used: 0, total: 0.99904436 },\r\n  BTG: { free: 0.62358797, used: 0, total: 0.62358797 },\r\n  ETH: { free: 11.124398, used: 0, total: 11.124398 },\r\n  USD: { free: 0.89, used: 0, total: 0.89 },\r\n  EUR: { free: 0, used: 0, total: 0 },\r\n  GBP: { free: 175.06, used: 0, total: 175.06 },\r\n  XRP: { free: 3523.967643, used: 0, total: 3523.967643 },\r\n  BSV: { free: 0.99904436 },\r\n  DASH: { free: 0, used: 0, total: 0 },\r\n  LTC: { free: 0, used: 0, total: 0 },\r\n  XLM: { free: 0, used: 0, total: 0 },\r\n  ZEC: { free: 0, used: 0, total: 0 },\r\n  OMG: { free: 0, used: 0, total: 0 },\r\n  MHC: { free: 0, used: 0, total: 0 },\r\n  RUB: { free: 0, used: 0, total: 0 },\r\n  GUSD: { free: 0, used: 0, total: 0 },\r\n  free:\r\n   { BTC: 0.00850103,\r\n     BCH: 0.99904436,\r\n     BTG: 0.62358797,\r\n     ETH: 11.124398,\r\n     USD: 0.89,\r\n     EUR: 0,\r\n     GBP: 175.06,\r\n     XRP: 3523.967643,\r\n     BSV: 0.99904436,\r\n     DASH: 0,\r\n     LTC: 0,\r\n     XLM: 0,\r\n     ZEC: 0,\r\n     OMG: 0,\r\n     MHC: 0,\r\n     RUB: 0,\r\n     GUSD: 0 },\r\n  used:\r\n   { BTC: 0,\r\n     BCH: 0,\r\n     BTG: 0,\r\n     ETH: 0,\r\n     USD: 0,\r\n     EUR: 0,\r\n     GBP: 0,\r\n     XRP: 0,\r\n     DASH: 0,\r\n     LTC: 0,\r\n     XLM: 0,\r\n     ZEC: 0,\r\n     OMG: 0,\r\n     MHC: 0,\r\n     RUB: 0,\r\n     GUSD: 0 },\r\n  total:\r\n   { BTC: 0.00850103,\r\n     BCH: 0.99904436,\r\n     BTG: 0.62358797,\r\n     ETH: 11.124398,\r\n     USD: 0.89,\r\n     EUR: 0,\r\n     GBP: 175.06,\r\n     XRP: 3523.967643,\r\n     DASH: 0,\r\n     LTC: 0,\r\n     XLM: 0,\r\n     ZEC: 0,\r\n     OMG: 0,\r\n     MHC: 0,\r\n     RUB: 0,\r\n     GUSD: 0 } }\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5484/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-08T20:35:03Z",
        "body": "@npomfret I cannot reproduce it on my side with the most recent version:\r\n\r\nInjected it without `orders` inside fetchBalance:\r\n\r\n```JavaScript\r\n    async fetchBalance (params = {}) {\r\n        await this.loadMarkets ();\r\n        const response = await this.privatePostBalance (params);\r\n        response['BSV'] = { 'available': '0.00' }; // ←--------------------------------- HERE\r\n        const result = { 'info': response };\r\n        const ommited = [ 'username', 'timestamp' ];\r\n        const balances = this.omit (response, ommited);\r\n        const currencyIds = Object.keys (balances);\r\n        for (let i = 0; i < currencyIds.length; i++) {\r\n            const currencyId = currencyIds[i];\r\n            const balance = this.safeValue (balances, currencyId, {});\r\n            const account = this.account ();\r\n            account['free'] = this.safeFloat (balance, 'available');\r\n            account['used'] = this.safeFloat (balance, 'orders');\r\n            const code = this.safeCurrencyCode (currencyId);\r\n            result[code] = account;\r\n        }\r\n        return this.parseBalance (result);\r\n    }\r\n```\r\n\r\nBSV is present ↓\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli cex fetchBalance\r\ncex.fetchBalance ()\r\n{  info: { timestamp:   \"1562617945\",\r\n            username:   \"up105393824\",\r\n                 USD: { available: \"14.87\", orders: \"0.00\" },\r\n                 BTC: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 ETH: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 BCH: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 BTG: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                DASH: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 LTC: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 XRP: { available: \"0.000000\", orders: \"0.000000\" },\r\n                 XLM: { available: \"0.0000000\", orders: \"0.0000000\" },\r\n                 ZEC: { available: \"0.00000000\", orders: \"0.00000000\" },\r\n                 OMG: { available: \"0.000000\", orders: \"0.000000\" },\r\n                 MHC: { available: \"0.000000\", orders: \"0.000000\" },\r\n                 EUR: { available: \"0.00\", orders: \"0.00\" },\r\n                 GBP: { available: \"0.00\", orders: \"0.00\" },\r\n                 RUB: { available: \"0.00\", orders: \"0.00\" },\r\n                GUSD: { available: \"0.00\", orders: \"0.00\" },\r\n                 BSV: { available: \"0.00\" } // ←--------------------------  HERE IT IS, without orders\r\n    },\r\n    USD: { free: 14.87, used: 0, total: 14.87 },\r\n    BTC: { free: 0, used: 0, total: 0 },\r\n    ETH: { free: 0, used: 0, total: 0 },\r\n    BCH: { free: 0, used: 0, total: 0 },\r\n    BTG: { free: 0, used: 0, total: 0 },\r\n   DASH: { free: 0, used: 0, total: 0 },\r\n    LTC: { free: 0, used: 0, total: 0 },\r\n    XRP: { free: 0, used: 0, total: 0 },\r\n    XLM: { free: 0, used: 0, total: 0 },\r\n    ZEC: { free: 0, used: 0, total: 0 },\r\n    OMG: { free: 0, used: 0, total: 0 },\r\n    MHC: { free: 0, used: 0, total: 0 },\r\n    EUR: { free: 0, used: 0, total: 0 },\r\n    GBP: { free: 0, used: 0, total: 0 },\r\n    RUB: { free: 0, used: 0, total: 0 },\r\n   GUSD: { free: 0, used: 0, total: 0 },\r\n    BSV: { free: 0, used: undefined, total: undefined }, // ←---- correctly parsed output\r\n   free: {  USD: 14.87,\r\n            BTC: 0,\r\n            ETH: 0,\r\n            BCH: 0,\r\n            BTG: 0,\r\n           DASH: 0,\r\n            LTC: 0,\r\n            XRP: 0,\r\n            XLM: 0,\r\n            ZEC: 0,\r\n            OMG: 0,\r\n            MHC: 0,\r\n            EUR: 0,\r\n            GBP: 0,\r\n            RUB: 0,\r\n           GUSD: 0,\r\n            BSV: 0      },\r\n   used: {  USD: 0,\r\n            BTC: 0,\r\n            ETH: 0,\r\n            BCH: 0,\r\n            BTG: 0,\r\n           DASH: 0,\r\n            LTC: 0,\r\n            XRP: 0,\r\n            XLM: 0,\r\n            ZEC: 0,\r\n            OMG: 0,\r\n            MHC: 0,\r\n            EUR: 0,\r\n            GBP: 0,\r\n            RUB: 0,\r\n           GUSD: 0,\r\n            BSV: undefined }, // ←--------------------- HERE\r\n  total: {  USD: 14.87,\r\n            BTC: 0,\r\n            ETH: 0,\r\n            BCH: 0,\r\n            BTG: 0,\r\n           DASH: 0,\r\n            LTC: 0,\r\n            XRP: 0,\r\n            XLM: 0,\r\n            ZEC: 0,\r\n            OMG: 0,\r\n            MHC: 0,\r\n            EUR: 0,\r\n            GBP: 0,\r\n            RUB: 0,\r\n           GUSD: 0,\r\n            BSV: undefined } /* ←  HERE */   }\r\nmbp:ccxt igorkroitor$\r\n```"
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-09T08:08:24Z",
        "body": "Apologies, my code removed the undefined fields and I worded the question badly...\r\n\r\nI'm surprised that `BSV: undefined` in `total` for example is considered correct output.  I would have thought `0` to be the correct value (or `0.99904436` in my case). Can you explain?  "
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-09T12:13:35Z",
        "body": "> I'm surprised that BSV: undefined in total for example is considered correct output. \r\n\r\nIn this case there is no value that defines the `used` amount.\r\n\r\nOur formula is:\r\n\r\n```\r\ntotal = free + used\r\n```\r\n\r\nIf `free` or `used` is undefined – `total` cannot be defined. The `total` can only be defined if both `free` and `used` are present. Otherwise there is not enough info to tell the `total` amount, just the `used` amount (corresponding to the `available` field in the balance response).\r\n\r\n> I would have thought 0 to be the correct value (or 0.99904436 in my case). Can you explain?\r\n\r\nThat would be the case, if the second value was defined as zero, but in your case it is undefined (the exchange did not provide it), so we can't be sure how much money you have in orders, because that value is `undefined`. We can't sum up `undefined` with `0.99904436`.\r\n\r\nLet us know if that doesn't answer the question.\r\n\r\nLet us know if that doesn't answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-09T12:29:35Z",
        "body": "For this exchange I would think that assuming zero for `used` is safe.  They don't have any BSV markets as far as I can tell, which is probably why the field is missing."
      }
    ]
  },
  {
    "number": 5471,
    "title": "How to filter CCXT messages only with Python logging?",
    "created_at": "2019-07-07T09:42:49Z",
    "closed_at": "2019-07-07T12:24:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5471",
    "body": "Hello. I have several modules which are using logging feature. However I would like to see log messages from CCXT only. How can i do it?\r\n\r\n I tried this code and it does not work.\r\n`import logging`\r\n`logger = logging.getLogger('ccxt')`\r\n`logger.setLevel(level=logging.DEBUG)`\r\n\r\nFollowing code shows all logging msg from other modules.\r\n`import logging`\r\n`logging.basicConfig(level=logging.DEBUG)`\r\n\r\n- OS: Linux\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.18.824\r\n- Exchange: Bitmex\r\n- Method: logging\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5471/comments",
    "author": "qwasko1212",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-07-07T12:17:41Z",
        "body": "you need to pass a logger to the exchange class like so:\r\n\r\n```\r\nlogger = logging.getLogger('ccxt')\r\nexchange = exchange({'logger': logger})\r\n```"
      },
      {
        "user": "qwasko1212",
        "created_at": "2019-07-07T13:11:58Z",
        "body": "> ```\r\n> logger = logging.getLogger('ccxt')\r\n> exchange = exchange({'logger': logger})\r\n> ```\r\n\r\nUnfortunately it does not work. Maybe because I am using ccxt.async_support?\r\n\r\nMy code:\r\n`import ccxt.async_support as ccxt`\r\n`import logging`\r\n`logger = logging.getLogger('ccxt')`\r\n`logger.setLevel(level=logging.DEBUG) ` - I have tried also without this line\r\n\r\n`exchange = ccxt.bitmex({'apiKey': api_key,  'secret': api_secret,  'logger': logger})` \r\n"
      },
      {
        "user": "frosty00",
        "created_at": "2019-07-07T14:15:09Z",
        "body": "add this piece of code:\r\n\r\n`logger.addHandler(logging.StreamHandler(sys.stdout))`\r\n\r\nlet me know if it still doesn't work"
      },
      {
        "user": "frosty00",
        "created_at": "2019-07-07T14:15:52Z",
        "body": "(you could also add a fileHandler)"
      }
    ]
  },
  {
    "number": 5441,
    "title": "How to fetch more than 100 tickers with CoinMarketCap in PHP?",
    "created_at": "2019-07-03T18:22:20Z",
    "closed_at": "2019-07-10T03:13:45Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5441",
    "body": "Can you please provide the code in PHP to fetch and paginate to get all the Price Tickers instead of just 100 for CoinMarketCap\r\n\r\nif ($exchange->has['fetchTickers']) {\r\n    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols\r\n}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5441/comments",
    "author": "Modrx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-10T03:13:45Z",
        "body": "Dupe: #5490 "
      }
    ]
  },
  {
    "number": 5416,
    "title": "Use ANTLR instead of own transpiling",
    "created_at": "2019-07-02T03:06:58Z",
    "closed_at": "2019-07-02T07:44:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5416",
    "body": "Hi,\r\n\r\nI am fairly new but after searching I'm unable to see why. Is it possible to apply ANTLR to the code transpiling area in CCXT i.e. JavaScript to Python/etc.? Maybe then we can leverage off those efforts?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5416/comments",
    "author": "gontadu",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-02T07:44:54Z",
        "body": "Hi!\r\n\r\nThe existing transpiler is regex-based, so, if we wanted to transpile a new JS clause to Python or PHP we would add a new regex and would then rebuild it within a few seconds. And it generates code which is very close to native Python/PHP code, so any person who wants to start learning CCXT from code –will be able to read it easily. The existing transpiler does it in a non-intrusive way – ideally you don't have to write new rules to be able to transpile the existing JavaScript code to Python or PHP.\r\n\r\nWith a generic external transpiler things become overcomplicated and adding a ton of new rules just to transpile the code and to get the same result – isn't something that we would need immediately. In other words, we would not use ANTLR just because it exists. There is another suggestion of an alternative tool for transpilation, called HAXE. However, we don't integrate with a package just because it exists and does something similar to what we do. An external generic transpiler would be an overkill for this project and introducing it implies too much overhead.\r\n\r\nWe only need to integrate new code only if:\r\n\r\n- if it saves us a lot of time (which is not the case with an external transpiler – it would eat quite a lot of time to even get it configured properly)\r\n- if it means progress for the project, in other words substituting one working tool for another working tool that produces the same result does not necessarily mean progress\r\n- if it leads to less work in the future, not to more work in the future (for the devs and for the users)\r\n\r\nLet us know if that does not answer your question. Thank you for your involvement!"
      },
      {
        "user": "gontadu",
        "created_at": "2019-07-05T03:49:04Z",
        "body": "@kroitor I believe it does, and in my view a sensible practical reasoning. Thanks for taking the time out to answer :)"
      }
    ]
  },
  {
    "number": 5359,
    "title": "Format sub-account Binance request",
    "created_at": "2019-06-25T12:58:21Z",
    "closed_at": "2019-06-25T13:39:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5359",
    "body": "I'm looking into the Implicit API Methods of the manual but can't figure out how to call those sub-account functions for Binance.\r\n\r\nI thought it would be:\r\n\r\n`privateGetSubAccountList()\r\n`\r\n\r\nBut that doesn't work. Tried a few different ones but no luck. Any chance you could steer me in the right direction?\r\n\r\n\r\nLanguage: NodeJs\r\nExchange: Binance",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5359/comments",
    "author": "charlie-eth",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-06-25T13:34:14Z",
        "body": "Hi there @calbertuk and thank you for using ccxt.\r\n\r\n> I'm looking into the Implicit API Methods of the manual but can't figure out how to call those sub-account functions for Binance.\r\n\r\nImplicit API methods are generated from the `exchange.api` property of an exchange instance. \r\n\r\nLooking at the `.api` of a binance object this is what I see:\r\n\r\n```\r\n  wapi:\r\n   { post: [ 'withdraw', 'sub-account/transfer' ],\r\n     get:\r\n      [ 'depositHistory',\r\n        'withdrawHistory',\r\n        'depositAddress',\r\n        'accountStatus',\r\n        'systemStatus',\r\n        'apiTradingStatus',\r\n        'userAssetDribbletLog',\r\n        'tradeFee',\r\n        'assetDetail',\r\n        'sub-account/list',\r\n        'sub-account/transfer/history',\r\n        'sub-account/assets' ] },\r\n```\r\n\r\nHence to generate the method that you want you need to join the parts of the endpoint you want. In this case I believe you are looking for `wapiGetSubAccountList`.\r\n\r\nNote that here the `-` is removed since it would be an invalid method in javascript otherwise. Let me know if you have any more questions : )"
      },
      {
        "user": "charlie-eth",
        "created_at": "2019-06-25T13:39:38Z",
        "body": "That's all, thanks."
      }
    ]
  },
  {
    "number": 5345,
    "title": "[therock] dealing with delisted currency",
    "created_at": "2019-06-23T17:34:27Z",
    "closed_at": "2019-06-23T19:03:00Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5345",
    "body": "I'm getting this error when requesting withdrawals: `therock does not have currency code USD`.\r\n\r\nThat currency used to be supported.  Is there a recommended way to deal with this?  I'm thinking to just pass the `currency` directly.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5345/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-23T18:07:19Z",
        "body": "```Python\r\nexchange.currencies['USD'] = {\r\n    'id': 'USD',\r\n    'code': 'USD',\r\n}\r\nexchange.withdraw ('USD' ...\r\n```\r\n\r\nDoes this help?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-23T18:19:46Z",
        "body": "Alternatively, we could add some switch or option across all exchanges, something like \"useCurrencyCodesAsIds\", that would skip the lookup in `this.currency()` base method. Easy to do, as we don't have to edit all exchanges."
      },
      {
        "user": "npomfret",
        "created_at": "2019-06-23T19:03:00Z",
        "body": "thanks, your first suggestion worked."
      }
    ]
  },
  {
    "number": 5333,
    "title": "[cex.io] transaction failure not detected",
    "created_at": "2019-06-21T13:29:51Z",
    "closed_at": "2019-06-22T10:46:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5333",
    "body": "For some reason cex put the text _Transaction failed_ in the `txid` field for some failed transfers (see below).  The status field is also rejected.  We could use these in our status field.\r\n\r\n```\r\n{\r\n  \"id\": \"5292142440\",\r\n  \"info\": {\r\n    \"a\": null,\r\n    \"c\": null,\r\n    \"d\": null,\r\n    \"id\": \"5292142440\",\r\n    \"buy\": null,\r\n    \"pos\": null,\r\n    \"pair\": null,\r\n    \"sell\": null,\r\n    \"time\": \"2017-12-27T13:19:42.785Z\",\r\n    \"txid\": \"Transaction failed.\",\r\n    \"type\": \"deposit\",\r\n    \"user\": \"up106404164\",\r\n    \"order\": null,\r\n    \"amount\": \"20.00000000\",\r\n    \"status\": \"rejected\",\r\n    \"symbol\": \"GBP\",\r\n    \"balance\": \"4002.40000000\",\r\n    \"comment\": \"XXXX-XXXX-XXXX-9076\",\r\n    \"instrumentid\": \"card\",\r\n    \"paymentsystemid\": \"ecp\"\r\n  },\r\n  \"txid\": \"Transaction failed.\",\r\n  \"type\": \"deposit\",\r\n  \"amount\": 20,\r\n  \"status\": \"ok\",\r\n  \"currency\": \"GBP\",\r\n  \"datetime\": \"2017-12-27T13:19:42.785Z\",\r\n  \"timestamp\": 1514380782785\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5333/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-21T22:26:17Z",
        "body": "@npomfret tbh, i can't find any code in cex regarding the transaction parsing... ))"
      },
      {
        "user": "npomfret",
        "created_at": "2019-06-22T10:46:14Z",
        "body": "Apologies - please ignore!"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-22T10:47:25Z",
        "body": "@npomfret it would be awesome if you submit it, though )"
      }
    ]
  },
  {
    "number": 5297,
    "title": "Feature Request: __str__ and / or __repr__ implementation for exchanges",
    "created_at": "2019-06-14T02:11:32Z",
    "closed_at": "2019-06-15T13:06:46Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5297",
    "body": "\r\nHi Igor & the team,\r\n\r\nThanks a lot for your hard work, this repo kicks ass!\r\n\r\nI was wondering if it would be too difficult to implement either __repr__ or __str__ dunder methods for cleaner logging purposes mainly?\r\n\r\nCurrently, if you use the exchanges as keys in the dict or simply print their repr, you get something like:\r\n\r\n`<ccxt.async_support.binance.binance object at 0x117166da0>`\r\n\r\nIt would be much nicer if we could have something like:\r\n\r\n`BinanceConnector()` \r\n\r\nor \r\n\r\n`\r\n{\r\n\"exchange\": \"binance\",\r\n\"rateLimit: xxx,\r\n...\r\n}\r\n`\r\n\r\nYou get an idea. Thank you!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5297/comments",
    "author": "nazariyv",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:46:58Z",
        "body": "Hey @nazariyv )\r\n\r\nGood to hear from you again )\r\n\r\n> I was wondering if it would be too difficult to implement either repr or str dunder methods for cleaner logging purposes mainly?\r\n\r\nIt wouldn't be difficult at all, we will add those serializing overrides for sure! Thank you for pointing that out ) I totally agree with you, so, this feature will be added as soon as possible. This is considered moderate priority, however, so, it can take some time among other tasks. Hopefully, not very long. We will keep you updated here. Thx! "
      },
      {
        "user": "frosty00",
        "created_at": "2019-06-14T10:03:19Z",
        "body": "Yeah this is easily done.\r\n\r\nideally `eval(repr(obj)) == obj`\r\n\r\nso an implementation that i would like to see is\r\n\r\n```\r\ndef __repr__(self):\r\n    return 'ccxt.' + ('async_support.' if self.asyncio_loop else '') + self.id + '()'\r\n\r\ndef __str__(self):\r\n    return self.name\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-15T13:21:47Z",
        "body": "Added in 1.18.707! Thx to @frosty00 and @nazariyv !"
      }
    ]
  },
  {
    "number": 5296,
    "title": "New Exchange: HollaEx",
    "created_at": "2019-06-14T01:19:09Z",
    "closed_at": "2020-03-05T05:22:12Z",
    "labels": [
      "question",
      "new exchange"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5296",
    "body": "All endpoints added and tested. Failed test for Python, unsure why.\r\n\r\n```\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n          File \"python/test/test.py\", line 403, in <module>\r\n            main()\r\n\r\n          File \"python/test/test.py\", line 380, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:173)\r\n\r\n\r\nFAIL [\"hollaex\"] (run-tests.js:251)\r\n```\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5296/comments",
    "author": "swkoyo",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:39:01Z",
        "body": "You can run that test with Python to see more details:\r\n\r\n```shell\r\n# in the ccxt folder\r\n$ npm run build\r\n$ python python/test/test.py hollaex --verbose\r\n```"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:47:34Z",
        "body": "Thanks for the reply. Unfortunately, I'm still getting the same error messages...\r\n\r\n```\r\nroot@1b73c2b29588:/ccxt# python python/test/test.py hollaex --verbose\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:48:23Z",
        "body": "@brandonkimmmm do you see that after running `npm run build`?"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:48:26Z",
        "body": "JS and PHP are passing the tests. The only one not passing is Python. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:48:48Z",
        "body": "@brandonkimmmm do you have a ccxt installed with pip globally? It can cause interference with the code of the tested `ccxt` package-folder (same name) going through the local tests. You can simply `pip uninstall` the global `ccxt` if that is the case."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:53:41Z",
        "body": "If a global `ccxt` is not installed on your system and you still get the error, but you can't run `npm run build` because you don't have `pandoc` – you can skip the build phase and just `npm run export-exchanges` – that should populate the local ccxt package-folder with hollaex and that should fix the KeyError."
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:54:23Z",
        "body": "@kroitor I'm running everything through the docker container and dont have ccxt installed globally"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:55:25Z",
        "body": "@brandonkimmmm then this should work:\r\n\r\n```\r\n# in ccxt repo folder\r\nnpm run export-exchanges\r\npython python/test/test.py hollaex --verbose\r\n```\r\n\r\nLet us know if that doesn't help."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:58:25Z",
        "body": "Also, before you run the tests, in order to test the private APIs, I suggest you to create a local `keys.local.json` file in the repo folder with your private key for testing the `fetchBalance`, `fetchOrder`, etc:\r\n\r\n`keys.local.json` in the repo root folder:\r\n\r\n```\r\n{\r\n    \"hollaex\": {\r\n        \"apiKey\": \"YOUR_API_KEY\",\r\n        \"secret\": \"YOUR_SECRET\"\r\n    }\r\n}\r\n```\r\n\r\n↑ and then run the tests after adding that file. That will make sure that all tests are fine indeed. No worries, it will not change or alter you balance in any way, all tests are non-intrusive."
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T06:07:22Z",
        "body": "@kroitor Hmmm, I followed the steps but am still getting the same error messages. \r\n\r\n```\r\nroot@1b73c2b29588:/ccxt# python python/test/test.py hollaex --verbose\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```\r\n\r\nI'm working on a fork of the repo that is `246 commits ahead, 371 commits behind ccxt:master.` Could this be a problem? Also, I had to `pip install tox` while inside the docker container. Not sure if that would affect anything. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T06:24:19Z",
        "body": "@brandonkimmmm are you sure that:\r\n\r\n1. you did `npm run export-exchanges` before trying the tests?\r\n2. you did `pip list` and there's no `ccxt` there (if it's there, need to `pip uninstall ccxt` before running local tests)"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T06:34:31Z",
        "body": "@kroitor I found the problem. I didn't have ccxt installed as a local package but it was present in the docker container. I'm getting the proper error messages now."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T06:54:49Z",
        "body": "> I didn't have ccxt installed as a local package but it was present in the docker container.\r\n\r\nYep, that's what I was asking about – if it was installed as a local package inside the environment (inside the docker container). Glad you've figured it out! Thx for the feedback!"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T07:29:49Z",
        "body": "@kroitor Now all the tests are passing except for `--python3` tests. Not really getting any useful info either. \r\n\r\n```\r\nroot@e46c60995e4e:/ccxt# python3 python/test/test.py hollaex --verbose\r\n<class 'KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<class 'KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```\r\n```\r\nroot@e46c60995e4e:/ccxt# python3 -V\r\nPython 3.6.7\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T07:32:23Z",
        "body": "@brandonkimmmm check if you have `pip3 list ccxt` as well, `python` and `python3` may be different as well as `pip` and `pip3`."
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T07:36:25Z",
        "body": "@kroitor Awesome yeah that was the issue. Thanks a lot!"
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-17T12:36:33Z",
        "body": "@kroitor @brandonkimmmm could you elaborate further what a mortal human has to do inside the docker container to get rid of the KeyError? All I really want to do is run the tests ...\r\n\r\n```\r\nFAILED exchangeName (Python): (explain @ run-tests.js:187)\r\n\r\n        <type 'exceptions.KeyError'> 'exchangeName' \r\n        \r\n          File \"python/test/test.py\", line 409, in <module>\r\n            main()\r\n        \r\n          File \"python/test/test.py\", line 386, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:190)\r\n\r\nFAILED exchangeName (Python 2): (explain @ run-tests.js:187)\r\n\r\n        <type 'exceptions.KeyError'> 'exchangeName' \r\n        \r\n          File \"python/test/test.py\", line 409, in <module>\r\n            main()\r\n        \r\n          File \"python/test/test.py\", line 386, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:190)\r\n\r\nFAILED exchangeName (Python 3): (explain @ run-tests.js:187)\r\n\r\n         (explain @ run-tests.js:190)\r\n\r\nWARN exchangeName (PHP): (explain @ run-tests.js:188)\r\n\r\n        string(11) \"./keys.json\"\r\n        PHP Notice:  Undefined index: exchangeName in /ccxt/php/test/test.php on line 230\r\n        PHP Warning:  A non-numeric value encountered in /ccxt/php/test/test.php on line 243\r\n        PHP Warning:  A non-numeric value encountered in /ccxt/php/test/test.php on line 243\r\n        0 (explain @ run-tests.js:190)\r\nFAIL [\"exchangeName\"] (run-tests.js:268)\r\nAll done, 1 failed (run-tests.js:273)\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! ccxt@1.18.941 test: `npm run build && node run-tests \"exchangeName\"`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the ccxt@1.18.941 test script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\n```"
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-17T12:42:41Z",
        "body": "From what I gathered, the docker is provided for ease of use, but what's the benefit if it does not work out of the box? I had to copy some commands from the travis script, and source the rest of the tricks and fixes from various issue threads... \r\n\r\nSo far I'm doing:\r\n\r\n```\r\nsudo -H pip3 install --upgrade setuptools pip wheel requests pyopenssl six tox twine setuptools web3 aiohttp requests cryptography pyopenssl\r\npip uninstall ccxt\r\n```\r\n\r\nto get the tests to work half-way"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T09:44:24Z",
        "body": "@lacksfish \r\n\r\n> could you elaborate further what a mortal human has to do inside the docker container to get rid of the KeyError?\r\n\r\nYou're running a wrong command. There's no exchange called `exchangeName`. The `exchangeName` is supposed to be substituted for a real exchange id by you, if you want to run the public tests."
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-18T10:27:45Z",
        "body": "I substituted the exchange I'm working on for \"exchangeName\". It is a placeholder only."
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T11:40:56Z",
        "body": "@lacksfish then you need to make sure that the `npm run export-exchanges` stage was properly executed upon `npm run build`. And make sure that there's no globally installed previous version of ccxt with your `pip list`."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-05T05:22:12Z",
        "body": "HollaEx has been listed in CCXT 1.23.61+! Thank you for your help and patience!"
      }
    ]
  },
  {
    "number": 5260,
    "title": "Possible bug in commonCurrencies",
    "created_at": "2019-06-08T00:00:42Z",
    "closed_at": "2019-06-08T00:05:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5260",
    "body": "- OS: *\r\n- Programming Language version: python\r\n- CCXT version: 1.18.593-643\r\n- Exchange: bitfinex\r\n- Method: commonCurrencies\r\n\r\nHi, I'm using the commonCurrencies in my code for margin trading on bitfinex. It think this has been broken in a recent release. You can see this the following way:\r\n\r\nif I do:\r\n```Python\r\nprint(str(ccxt.bitfinex.commonCurrencies.items()))\r\n```\r\nI get:\r\n```\r\ndict_items([('XBT', 'BTC'), ('BCC', 'BCH'), ('DRK', 'DASH'), ('BCHABC', 'BCH'), ('BCHSV', 'BSV')])\r\n```\r\n\r\nWhile this is not the list found in the bitfinex.py.. My guess is that this is Kraken (?)\r\n\r\nOr am I making a mistake somewhere? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5260/comments",
    "author": "jdieks",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-08T00:05:45Z",
        "body": "> Or am I making a mistake somewhere?\r\n\r\nYes, the `commonCurrencies` is not a list of currencies for the exchange, it's a list of substitutions for for all the exchanges, which is inherited from the Exchange base class.\r\n\r\nIf you want to get a list of currencies for an exchange, you should check `.currencies` instead of `.commonCurrencies` after calling `load_markets()`:\r\n\r\n```Python\r\nfrom pprint import pprint\r\nimport ccxt\r\nexchange = ccxt.bitfinex({ 'enableRateLimit': True })\r\nexchange.load_markets()\r\npprint(exchange.currencies)\r\n```\r\n\r\nLet us know if that doesn't answer the question )"
      },
      {
        "user": "jdieks",
        "created_at": "2019-06-08T00:18:20Z",
        "body": "Hi Kroitor,\r\n\r\nThanks for the reply. Yes, I see how it works now.\r\nIn an older version I used the ccxt.bitfinex.commonCurrencies.items() list to convert the ccxt commoncurrencies back to the ones that the api of bitfinex wants to see (e.g. BCH:BAB).\r\n\r\nBut I see that I can indeed do exactly the same thing with the currencies command. Thanks for the help.\r\n\r\nHave a good night."
      }
    ]
  },
  {
    "number": 5250,
    "title": "suggestion: add parseMyTrade method",
    "created_at": "2019-06-06T12:12:51Z",
    "closed_at": "2019-06-07T08:05:28Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5250",
    "body": "There are a number of places where the shape of the data for `fetchMyTrades` differs sufficiently from the result of `fetchTrades`.  We could consider adding `parseMyTrade(s)` which in the base class could just delegate to the existing method(s).",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5250/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-06-06T13:48:20Z",
        "body": "Not sure how we could do this, since in the base class the methods are defined as stubs that throw `NotImplemented`. We could do a try, catch in the base class but that is kinda ugly. Ideally exchanges should have a single trade object..."
      },
      {
        "user": "npomfret",
        "created_at": "2019-06-06T21:36:30Z",
        "body": "Where are the stubs defined?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-06T21:43:13Z",
        "body": "> Ideally exchanges should have a single trade object...\r\n\r\nI agree with this.\r\n\r\n> We could consider adding parseMyTrade(s) which in the base class could just delegate to the existing method(s).\r\n\r\nTbh, I don't think that adding parseMyTrade is good in the long-term. I think if we keep it the way it is, the exchanges will ultimately have to normalize their response types... I don't think we should relax the standard, because that boils down to no standard. \r\n\r\nLmk your thoughts."
      },
      {
        "user": "npomfret",
        "created_at": "2019-06-07T08:05:28Z",
        "body": "It's a subtle one. If we were doing this with objects I'd maybe have a `Trade` object which is extended by a `MyTrade` object (containing order id, fee etc).  They are related of course, but they are definitely different.  No exchange (I think) publishes the order id associated to a trade in their public trade feed.  But every exchange (I think), does provide the order id in the private trade feed. And occasionally, exchanges have, for no obvious reason, a completely different set of fields for these two objects that more or less represent the same thing. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-07T08:17:44Z",
        "body": ">No exchange (I think) publishes the order id associated to a trade in their public trade feed. \r\n\r\n> But every exchange (I think), does provide the order id in the private trade feed.\r\n\r\nI think you're wrong on both claims ) At least, I know of many exchanges who actually do the former and the latter, and in a distributed environment most of the info is public, so in general I would rather encourage unification of the structure.\r\n\r\n> If we were doing this with objects I'd maybe have a Trade object which is extended by a MyTrade object (containing order id, fee etc).\r\n\r\nI am approaching this from the opposite direction, in other words, suppose there is already a Trade class (that is our unified structure) and that trade class contains all the commonly used fields of a personal trade. However for public trades some of those fields are empty or null. That is basically the same story, one abstraction wraps another, but thinking in terms of plain json structures makes everything a lot more portable. Ideally, the code that would work with those structures will be a lot easier to write and manage. \r\n\r\n> And occasionally, exchanges have, for no obvious reason, a completely different set of fields for these two objects that more or less represent the same thing.\r\n\r\nWe're far from the ideal now, of course, therefore we have to keep some workarounds there, but in this case i think encouraging unification and standardization is better than relaxing the rules in the long-term. It may be a bit more convenient now to code parseTrade and parseMyTrade separately, but this short-term convenience can cost us more time on coding the entire zoo of parsers in the long run.\r\n\r\nNothing really forbids what you say, and, in fact, as you know, we already have parseTrade and parseMyTrade in the master branch with some exchanges, but this is probably not the best design decision strategically."
      }
    ]
  },
  {
    "number": 5181,
    "title": "Transaction fees – net or gross?",
    "created_at": "2019-05-23T10:04:56Z",
    "closed_at": "2019-05-24T10:47:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5181",
    "body": "Should the amount in the transfer (for withdrawals) be equal to the amount the receiver receives (ie net of withdrawal fees), or should it be the gross amount (so the receiver should receive `amount - fee.cost`)?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5181/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "npomfret",
        "created_at": "2019-05-23T10:44:10Z",
        "body": "Regardless of what the answer is, there may be a bug in Poloniex.  In this XRP withdrawal example the data is:\r\n\r\n```\r\namount: 501.10000007,\r\ninfo:\r\n      { fee: '0.15000000',\r\n        type: 'withdrawal',\r\n        amount: '501.25000007',\r\n        status:\r\n         'COMPLETE: 1419A5E5D66AE500DE8CF7BB1255B954C71C17F21E07CB9D031C9ABC2FB317ED',\r\n        address: 'rK1MAqAbK6S64rQZCcfQnWSR9cCvotSC5u',\r\n```\r\n\r\nBut the receiver received `501.25`... so more was receive than was sent."
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-23T16:57:50Z",
        "body": "@npomfret \r\n\r\n> be equal to the amount the receiver receives (ie net of withdrawal fees)\r\n\r\nThe balance of the sender should be deduced by the `amount` and by the `fee` separately (as I think of it, but there may be other opinions), and the receiver should receive just the `amount`.\r\n\r\nIs there a problem with all your withdrawals or for this particular one? It looks like a very old one (Jan 2018), and the arithmetics for fees may have changed over time. We will review Poloniex again though."
      },
      {
        "user": "npomfret",
        "created_at": "2019-05-24T10:47:56Z",
        "body": "> Is there a problem with all your withdrawals or for this particular one?\r\n\r\nGood question.  Poloniex looks inconsistent.  Here's a more recent one:\r\n\r\n```\r\n{\r\n  \"fee\": \"0.01000000\",\r\n  \"type\": \"withdrawal\",\r\n  \"amount\": \"10.44581161\",\r\n  \"status\": \"COMPLETE: 0x16ec0102bcade18fe5e7c4b5e0b03562c5be91e2b6a926738215bbd75c89c0b0\",\r\n  \"address\": \"0x15c9f7Cfcee1696FaF58528E8aBd740908b8e830\",\r\n  \"currency\": \"ETH\",,...\r\n```\r\n\r\nAnd the _correct_ amount (10.43581161) was received.  I've looked a load more examples and other than rounding issues I can't find another one that looks wrong."
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-24T10:51:16Z",
        "body": "@npomfret thx for reporting back! Really appreciate your comments, always very helpful!"
      },
      {
        "user": "npomfret",
        "created_at": "2020-11-09T23:00:09Z",
        "body": "@kroitor  I just wanted to check what the net/gross fee *should* be for withdrawals, as I think we still have inconsistencies.\r\n\r\nSo we have a withdrawal amount and a fee...\r\n\r\nDoes the user's balance reduce by `amount + fee`?  Which implies the destination receives the `amount`.\r\n\r\nOr, does the user's balance reduce by `amount`?  Which implied the destination receives the `amount - fee`.\r\n\r\nI thought it was the latter (but from what i've checked today, the former appears to be more common)"
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-10T00:42:14Z",
        "body": "> Does the user's balance reduce by `amount + fee`? Which implies the destination receives the `amount`.\r\n> Or, does the user's balance reduce by `amount`? Which implied the destination receives the `amount - fee`.\r\n> I thought it was the latter (but from what i've checked today, the former appears to be more common)\r\n\r\nThis is not fully unified yet. Some exchanges will deduce the fee from the amount, other exchanges will charge the fee on top of the amount. I think it's better to make transaction `amount` reflect the value that will be deposited on the receiving side – that helps match withdrawals with deposits across exchanges (the former scenario that is more common). However, in case of exmo and poloniex we deduce the fee cost from the amount, that depends on which specific value is returned from the exchange in the `amount` field.\r\n"
      },
      {
        "user": "npomfret",
        "created_at": "2020-11-10T19:53:13Z",
        "body": "Ok thanks\r\n\r\nSo we need to subtract the fee cost from the amount for btcmarkets too then.  Currently they don't add up."
      }
    ]
  },
  {
    "number": 5139,
    "title": "Question Is there a way to have multiple accounts on node.js? ",
    "created_at": "2019-05-18T16:05:35Z",
    "closed_at": "2019-05-19T07:11:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5139",
    "body": "Hi,\r\nI'm trying to run multiple accounts for orders. Specifically with Binance on Node.js. Is there a way to have multiple instances of ccxt running? Is this trivial or there will be some issues? \r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5139/comments",
    "author": "amigoni",
    "comments": [
      {
        "user": "xpl",
        "created_at": "2019-05-18T18:20:54Z",
        "body": "You would need to create a wrapper that will manage multiple accounts — one ccxt class instance per apikey+secret pair. I can see no issues except rate limiting, as most exchanges limit API calls per IP address and not [only] per keypair."
      },
      {
        "user": "xpl",
        "created_at": "2019-05-19T07:11:24Z",
        "body": "@amigoni Let us know if that didn't help, I'm closing the issue for now."
      }
    ]
  },
  {
    "number": 5135,
    "title": "Supporting multiple fees in different currencies in trades",
    "created_at": "2019-05-16T10:58:52Z",
    "closed_at": "2024-08-03T08:58:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5135",
    "body": "I notice that itbit has the concept of a fee AND a rebate modelled separately in their API.  The code that deals with in in `parseTrade` looks like:\r\n\r\n                if (feeCurrency === rebateCurrency) {\r\n                    feeCost = this.sum (feeCost, rebatesApplied);\r\n                    result['fee'] = {\r\n                        'cost': feeCost,\r\n                        'currency': feeCurrency,\r\n                    };\r\n                } else {\r\n                    result['fees'] = [\r\n                        {\r\n                            'cost': feeCost,\r\n                            'currency': feeCurrency,\r\n                        },\r\n                        {\r\n                            'cost': rebatesApplied,\r\n                            'currency': rebateCurrency,\r\n                        },\r\n                    ];\r\n                }\r\n\r\n... it creates a `fees` array instead of a `fee` object.  Is this a common model?\r\n\r\nOr could we have a standard `fee`, which can be an array of objects or a single object?  Or always have `fees` as an array, typically an array of length one except in cases like that above?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5135/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-05-16T11:20:03Z",
        "body": "> Is this a common model?\r\n\r\nYes, so far. It is not documented yet, because it's still \"in the works\".\r\nThe current model is to have either `fee` or `fees`, the latter being an array.\r\n\r\n> Or could we have a standard fee, which can be an array of objects or a single object? Or always have fees as an array, typically an array of length one except in cases like that above?\r\n\r\nIn general, a typecheck is harder than a key lookup, I think. And if we switch to an array – that might break the backward-compatibility... So, we need to consider it carefully... @xpl, @tankakatan what's your opinion on this?\r\n\r\n"
      },
      {
        "user": "xpl",
        "created_at": "2019-05-16T14:23:13Z",
        "body": "> And if we switch to an array – that might break the backward-compatibility...\r\n\r\nThat will surely break all of the people's current code. But. I personally consider it a headache, having in some cases `fee` (object) and in some cases `fees` (array), because everywhere I need to consider fees, I currently need to write a coercion code that normalizes that to a general form (array):\r\n\r\n```javascript\r\nconst fees = trade.fees || [trade.fee]\r\n```\r\n\r\nLeaving just `fees` alone would certainly be a right thing to do. What we can do is to perform a smooth transition, outputting both `fee` (in case of a single fee, for backward compatibility) *and* `fees` (always, for future code). Then remove any mentions of `fee` from the documentation, and explicitly announce that `fee` will be removed soon. Then finally remove `fee` some months later, raising the major version number."
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-16T14:51:41Z",
        "body": "> What we can do is to perform a smooth transition\r\n\r\nYeah, I think it's the way to go. We should start adding `fees` everywhere."
      },
      {
        "user": "ttodua",
        "created_at": "2024-08-03T08:58:16Z",
        "body": "`fees` are being provided now in supported exchanges. closing this topic for now."
      }
    ]
  },
  {
    "number": 5130,
    "title": "exmo trade parse 'injects' a fee",
    "created_at": "2019-05-15T18:49:58Z",
    "closed_at": "2019-06-04T20:39:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5130",
    "body": "`fetchMyTrades` in exmo injects a fee into the parsed trade based on the metadata of the class (the json response from the exchange doesn't include the fee).\r\n\r\nIs this a sensible, or normal thing to do?  Feels like it could give invalid results, say if they change their fees, or the user has a different fee structure to that which is specified in ccxt.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5130/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "LiBin5255",
        "created_at": "2019-05-15T18:59:50Z",
        "body": "thanks you so much ,but I'm jsut a rookie ! so i'm kepping quiet right now ! but I believe in a short time .\r\nI will definitely make my contribution ! "
      },
      {
        "user": "xpl",
        "created_at": "2019-05-15T20:44:12Z",
        "body": "> Is this a sensible, or normal thing to do?\r\n\r\nWe previously fetched their fees programmatically from their website, by parsing their web front-end output. But since then it got broken (those requests are now quickly getting banned), that forced us to switch to hard-coded fees, so...\r\n\r\n> Feels like it could give invalid results, say if they change their fees, or the user has a different fee structure to that which is specified in ccxt\r\n\r\n...yes, it can happen. But I suppose they don't have fees in their API output because they don't plan to change them anytime soon. So they kinda encourage their users to use hard-coded values."
      }
    ]
  },
  {
    "number": 5114,
    "title": "question about exchange class inheritance",
    "created_at": "2019-05-13T09:38:43Z",
    "closed_at": "2019-06-03T08:38:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5114",
    "body": "I've been trying to add some API calls to a the bluetrade class but have run into some problems due to the fact it inherits from bittrex.\r\n\r\nI want to mix v3 api calls into the current implementation.  The problem is that currently there is a version set, so all urls get a `v2` added to their path.\r\n\r\nIf I remove the version and add `v2/` to each api path then the super class fails because the method names are wrong.\r\n\r\n@kroitor do you have any suggestions for a _nice_ way to work around this problem?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5114/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "npomfret",
        "created_at": "2019-05-13T12:58:43Z",
        "body": "I really struggled with bleutrade.  I've bodged a new api call to a v3 endpoint just in an attempt to get something working.  I ended up giving bleutrade it's own sign method... hope I didn't break anything.  \r\n\r\nI really don't think the inheritance pattern is helpful in the case.  The sign method in bittrex is particularly complicated.  I think someone has gone to a lot of effort in order to avoid a bit of duplication.  But the result is a bit of a tangled mess.  IMO this is a case where more code and a little duplication (i.e. one `sign` method per class) is a better way forward because the current solution is hard (for me) to understand.  For example, it took me about an hour to figure out that the http method name (get/post) was being inserted in to the url path.\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-03T08:38:32Z",
        "body": "I totally agree with all of the above, it has to be decoupled and we shouldn't mix them. Closing this for now until we have further updates on Bleutrade..."
      }
    ]
  },
  {
    "number": 5077,
    "title": "about the exceptions",
    "created_at": "2019-05-08T10:44:13Z",
    "closed_at": "2019-05-08T11:18:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5077",
    "body": "There is no connection between the exceptions. It is recommended to remove the inheritance of the exception class.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5077/comments",
    "author": "pystd",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-05-08T11:18:15Z",
        "body": "> There is no connection between the exceptions.\r\n\r\nThat's arguable.\r\n\r\n> It is recommended to remove the inheritance of the exception class.\r\n\r\nThx for the recommendation, but so far we don't have plans to remove the inheritance from the exceptions hierarchy. The inheritance is relied upon in some logical cases as described in the Manual on working with orders and other things."
      }
    ]
  },
  {
    "number": 5069,
    "title": "Bitfinex JS symbols.map is not a functiom",
    "created_at": "2019-05-07T04:46:35Z",
    "closed_at": "2019-05-07T05:06:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5069",
    "body": "- OS: Javascript\r\n- Programming Language version: v11.13.0\r\n- CCXT version: latest\r\n- Exchange: bitfinex\r\n- Method: fetchTickers\r\n\r\nError: TypeError: symbols.map is not a function\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5069/comments",
    "author": "ahmedbodi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-05-07T04:57:00Z",
        "body": "@ahmedbodi can you please show your code to reproduce it? a full error stack and your verbose request/response? Can't reproduce it with the following code:\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\nconst exchange = new ccxt.bitfinex ({ enableRateLimit: true })\r\n;(async () => {\r\n    const tickers = await exchange.fetchTickers ()\r\n   console.log (tickers)\r\n}) ()\r\n```"
      },
      {
        "user": "ahmedbodi",
        "created_at": "2019-05-07T04:57:55Z",
        "body": "```\r\nconst ccxt = require ('ccxt')\r\n\r\nlet clients = {}\r\n\r\nasync function fetchTickers(client, market)\r\n{\r\n    if (client.has['fetchTickers'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" Tickers\");\r\n            ticker = await client.fetchTickers(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \" Tickers: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function fetchOHLCVs(client, market)\r\n{\r\n    if (client.has['fetchOHLCV'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" OHLCV\");\r\n            ohlcv = await client.fetchOHLCV(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \" OHLCV: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function fetchOrderBooks(client, market)\r\n{\r\n    if (client.has['fetchOrderBook'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" OrderBook\");\r\n            orderbook = await client.fetchOrderBook(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \"OrderBooks: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function main()\r\n{\r\n    for (i in ccxt.exchanges)\r\n    {\r\n        // Create Exchange Client\r\n        exchange = ccxt.exchanges[i];\r\n        clients[exchange] = new ccxt[exchange]({'enableRateLimit': true});\r\n    }\r\n\r\n    // Setup Loops\r\n    while(true)\r\n    {\r\n        for (i in clients)\r\n        {\r\n            client = clients[i];\r\n\r\n            try {\r\n                // Load All Markets and currencies\r\n                markets = await client.loadMarkets();\r\n                currencies = client.currencies;\r\n            } catch (e) {\r\n                console.log(\"[\" + client.name + \"] Error: \" + e)\r\n            }\r\n\r\n            for (market in markets)\r\n            {\r\n                // Fetch Tickers\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchTickers(client, market)), 60));\r\n\r\n                // Fetch OHLCV\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchOHLCVs(client, market)), 60));\r\n\r\n                // Fetch OrderBook\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchOrderBooks(client, market)), 60));\r\n                await Promise.all([fetchTickers(client, market), fetchOHLCVs(client, market), fetchOrderBooks(client, market)]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmain()\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-07T04:58:43Z",
        "body": "@ahmedbodi can you remove all the unnecessary parts? (make it the shortest possible snippet to reproduce the issue).\r\n\r\nDoes this work for you\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\nconst exchange = new ccxt.bitfinex ({ enableRateLimit: true })\r\n;(async () => {\r\n    const tickers = await exchange.fetchTickers ()\r\n   console.log (tickers)\r\n}) ()\r\n```\r\n\r\n?"
      },
      {
        "user": "ahmedbodi",
        "created_at": "2019-05-07T04:59:40Z",
        "body": "Strange. that works fine"
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-07T05:03:28Z",
        "body": "@ahmedbodi there's an error in your code, you're passing `market` to `fetchTickers` as the first argument, but it doesn't accept a `market` in the first argument:\r\n\r\n```JavaScript\r\n            ticker = await client.fetchTickers(market); //  ← here\r\n            // should be \r\n            ticker = await client.fetchTickers();\r\n```\r\n\r\nThere are two methods:\r\n\r\n- `fetchTicker (symbol)` (for one symbol)\r\n- `fetchTickers ()` (for all symbols)\r\n\r\n↑ You're calling fetchTickers with a `market` argument which is a mistake."
      },
      {
        "user": "ahmedbodi",
        "created_at": "2019-05-07T05:05:07Z",
        "body": "ah good catch. fixed.  testing now"
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-07T05:06:02Z",
        "body": "@ahmedbodi ok, let me know if that doesn't resolve the issue for you. Feel free to reopen this or just ask further questions if any."
      }
    ]
  },
  {
    "number": 5053,
    "title": "BitMEX WebSocket",
    "created_at": "2019-04-30T16:18:26Z",
    "closed_at": "2019-04-30T16:27:26Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5053",
    "body": "- OS: Kubuntu 19.04 64-bit\r\n- Programming Language version: Python 3.7\r\n- CCXT version: 1.18.497\r\n- Exchange: BitMEX\r\n- Method: none\r\n\r\nHi,\r\ndo you plan to add a WS support for BitMEX?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5053/comments",
    "author": "Tezeug",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-04-30T16:27:26Z",
        "body": "Hi! Sorry, but this issue is a duplicate. Please, read through this post (all about WS there): #56 "
      }
    ]
  },
  {
    "number": 5050,
    "title": "Are API keys and secret credentials safe?",
    "created_at": "2019-04-30T07:18:09Z",
    "closed_at": "2019-04-30T07:45:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5050",
    "body": "Hello, \r\nis there any guarantee that secret keys are not sent elsewhere? Can that be done?\r\nCould someone merge changes to ccxt that take API keys and secrets and store somewhere on their cloud so they could have access to your account?\r\n\r\nThese library seems such a nice idea and work but taking into account the nature of the data (money exchanges) I'm not really sure how we, as developers, can be sure about giving our API secrets without thinking about it.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5050/comments",
    "author": "ibesora",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-04-30T07:45:51Z",
        "body": "Hi!\r\n\r\n> is there any guarantee that secret keys are not sent elsewhere?\r\n\r\nYes, this is guaranteed implicitly in the following way: this project is open-source, so the developer can read the code and see what's happening with the secret key within the library – and from there any sufficiently-experienced developer can see that CCXT is absolutely honest and transparent. The secret keys are not sent anywhere, and this is the security policy that is implemented throughout this library. \r\n\r\nThis library has been reviewed by a few thousands of developers, among them are very highly skilled coders and they haven't found anything suspicious. CCXT has 10k stars, more than 2k clones, more than 7 hundred dependent projects, etc – if there was an obvious hole, someone would shout about it. Moreover, the independent devs have helped build it out extensively themselves. This lib has more than 3 hundred people from all over the world involved in the development of it. The guarantee is provided by the common people based on the open nature of this project )\r\n\r\nHowever, formally, this library is licensed under MIT which states \"no guarantee, use as is at your own risk\". So, for most open-source projects, the guarantee you want should be provided to you by yourself first and foremost. In other words, don't install and run the code that you haven't checked for security personally, because other people may be lying to you. Including me now.\r\n\r\n> Can that be done?\r\n\r\nYes, if someone substitutes your CCXT installation with a hacked version of it – your keys may be stolen. But if that happens, it is not a failure of CCXT, but more a failure of your security administration. Any code can be hacked. Your operating system can be hacked in the same way. So, it's always possible, and the possibility depends on your own security policies more than on the CCXT codebase.\r\n\r\n> Could someone merge changes to ccxt that take API keys and secrets and store somewhere on their cloud so they could have access to your account?\r\n\r\nThe right to merge is very restricted, only three devs from the core team have that permission, and all three are the initial authors of the project. We review each and every PR for security. We don't do massive-merges blindly and we are very picky. So far, we haven't merged anything that would compromise the security, and we've managed to keep the reputation clean for more than 2 years. \r\n\r\nAt some point we can try to add the cheating code that will take your keypair and will send it to us. And then wait till you download the update. However, there's more than 700 independent people on Github (apart from the rest) who constantly watch each and every edit we make, so, even if we attempt a trick like that – it won't go unnoticed. Doing so will immediately ruin everything we've been fighting for. \r\n\r\nSo, in order to get such a guarantee for yourself and to completely protect from that – just become a watcher. So, ultimately, it's up to you how much trust or distrust you want to put into it. You can check each update for security to ensure that your security isn't compromised. And if you don't check bits of your software regularly – your security is already compromised.\r\n\r\nHope that answers the question ) Let us know if not)"
      }
    ]
  },
  {
    "number": 5037,
    "title": "Is there an easy way to generate a PNL graph?",
    "created_at": "2019-04-27T15:07:22Z",
    "closed_at": "2023-07-31T21:28:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5037",
    "body": "Programming Language version: Python 3.6.4\r\nCCXT version: 1.18.437\r\nExchange: Binance\r\n\r\nHi,\r\n\r\nI was wondering if there is an easy way to generate a PNL graph from the trade history? I've looked through the documentation and I can't find anything. It's possible I might have to create something myself but I wanted to double check in case I missed it.\r\n\r\nthanks\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5037/comments",
    "author": "Jens1989",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2023-07-31T21:28:34Z",
        "body": "this issue seems too much old without any traction. closed for now, if anyone has any input, let us know.\r\njust to add 2 words - ccxt aims to return the data what it is meant for, other than that, users can easily find out any external charting/graphing library, which will manipulate the data into desired visuals."
      }
    ]
  },
  {
    "number": 5036,
    "title": "FetchOpenOrders - Side",
    "created_at": "2019-04-27T10:53:17Z",
    "closed_at": "2019-04-30T02:36:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5036",
    "body": "- OS: Kubuntu 19.04 64-bit\r\n- Programming Language version: Python 3.7\r\n- CCXT version: 1.18.492\r\n- Exchange: BitMEX\r\n- Method: fetch_open_orders(symbol = 'BTC/USD', params={'side':'sell'})\r\n\r\nHello, why does not this code work (check the method)? I've tried it but it always just print the orders and does not matter whether it is BUY or SELL.\r\nThank you.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5036/comments",
    "author": "Tezeug",
    "comments": [
      {
        "user": "Tezeug",
        "created_at": "2019-04-27T14:45:54Z",
        "body": "Whole tomorrow I will be reading and learning everything in the manual but so far I could not find anything about this there. When I tried to put there (side = ‘buy’) I got an error."
      },
      {
        "user": "Tezeug",
        "created_at": "2019-04-29T10:04:17Z",
        "body": "@kroitor Update\r\nI’ve looked into the source code and fixed it with that.\r\n\r\nbit = BitMEX.fetch_orders(symbol=S1, params = {\"filter\": {\"open\":True, \"side\":\"buy\"}})"
      },
      {
        "user": "kroitor",
        "created_at": "2019-04-30T02:36:15Z",
        "body": "@tezeug thx for reporting back! Good to know you've figured it out!"
      }
    ]
  },
  {
    "number": 5028,
    "title": "1M gives 1m results",
    "created_at": "2019-04-25T12:26:38Z",
    "closed_at": "2019-04-25T17:21:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5028",
    "body": "Looks like 1M (monthly timeframes according to docs) gives the minutely interval (1m).\r\nThe demonstration below is done in the node command line and as you can see, the resulting OHLCV data is only 1 minute apart.\r\n\r\n- OS: OSX\r\n- Programming Language version: NodeJS v10.15.3\r\n- CCXT version: 1.18.489\r\n- Exchange: kraken\r\n- Method: fetch_ohlcv()\r\n\r\n```\r\n> var ccxt                  = require ('ccxt');\r\nundefined\r\n> var datasource = new ccxt['kraken']()\r\nundefined\r\n> var promise =  this.datasource.fetch_ohlcv(\"ETH/USD\", \"1M\", 1516150760000)\r\nundefined\r\n> promise\r\nPromise {\r\n  [ [ 1556151180000, 165.71, 165.86, 165.71, 165.86, 6.83113309 ],\r\n    [ 1556151240000, 165.87, 165.89, 165.82, 165.89, 93.13941199 ],\r\n    [ 1556151300000, 165.89, 166.71, 165.89, 166.32, 790.36810312 ],\r\n    [ 1556151360000, 166.32, 166.37, 166.3, 166.33, 131.81207007 ],\r\n    [ 1556151420000, 166.33, 166.33, 165.9, 165.94, 27.16285409 ],\r\n    [ 1556151480000, 165.94, 166.11, 165.89, 166.09, 8.02807113 ],\r\n    [ 1556151540000, 166.09, 166.21, 166.09, 166.21, 0.55489426 ],\r\n    [ 1556151600000, 166.21, 166.22, 166.2, 166.22, 5.37958814 ],\r\n    [ 1556151660000, 166.22, 166.22, 165.9, 165.9, 14.72007301 ],\r\n    [ 1556151720000, 165.97, 165.98, 165.89, 165.9, 7.15311929 ],\r\n    [ 1556151780000, 165.9, 166.02, 165.89, 165.97, 12.7562017 ],\r\n    [ 1556151840000, 165.97, 165.97, 165.8, 165.8, 6.21435547 ],\r\n    [ 1556151900000, 165.8, 165.8, 165.8, 165.8, 6.50588532 ],\r\n    [ 1556151960000, 165.8, 165.83, 165.65, 165.65, 21.70730336 ],\r\n    [ 1556152020000, 165.65, 165.66, 165.61, 165.66, 101.22979868 ],\r\n    [ 1556152080000, 165.71, 165.79, 165.65, 165.65, 63.29969223 ],\r\n    [ 1556152140000, 165.56, 165.69, 165.53, 165.57, 23.3977552 ],\r\n    [ 1556152200000, 165.57, 165.57, 165.55, 165.55, 4.78227673 ],\r\n    [ 1556152260000, 165.55, 165.56, 165.55, 165.55, 5.04401131 ],\r\n    [ 1556152320000, 165.55, 165.55, 165.5, 165.51, 77.24501892 ],\r\n    [ 1556152380000, 165.51, 165.51, 165.5, 165.5, 0.11443401 ],\r\n    [ 1556152440000, 165.5, 165.5, 165.5, 165.5, 3.71300558 ],\r\n    [ 1556152500000, 165.5, 165.56, 165.5, 165.52, 23.28890123 ],\r\n    [ 1556152560000, 165.65, 165.65, 165.6, 165.62, 21.24251921 ],\r\n    [ 1556152620000, 165.62, 165.73, 165.6, 165.6, 153.83321368 ],\r\n    [ 1556152680000, 165.6, 165.6, 165.55, 165.58, 254.47546306 ],\r\n    [ 1556152740000, 165.62, 165.64, 165.59, 165.64, 10.08461208 ],\r\n    [ 1556152800000, 165.64, 166, 165.55, 165.56, 682.23911942 ],\r\n    [ 1556152860000, 165.65, 165.65, 165.5, 165.53, 252.93628685 ],\r\n    [ 1556152920000, 165.52, 165.52, 164.74, 164.74, 187.74177186 ],\r\n    ... 620 more items ],\r\n  domain:\r\n   Domain {\r\n     domain: null,\r\n     _events:\r\n      [Object: null prototype] {\r\n        removeListener: [Function: updateExceptionCapture],\r\n        newListener: [Function: updateExceptionCapture],\r\n        error: [Function: debugDomainError] },\r\n     _eventsCount: 3,\r\n     _maxListeners: undefined,\r\n     members: [] } }\r\n> new Date(1556151180000)\r\n2019-04-25T00:13:00.000Z\r\n> new Date(1556151240000)\r\n2019-04-25T00:14:00.000Z\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5028/comments",
    "author": "nwocykra",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-04-25T17:20:14Z",
        "body": "@nwocykra kraken does not support the `1M` timeframe:\r\n\r\n```JavaScript\r\n> const ccxt = require ('ccxt')\r\nundefined\r\n> const exchange = new ccxt.kraken()\r\nundefined\r\n> console.log (exchange.timeframes)\r\n{ '1m': '1',\r\n  '5m': '5',\r\n  '15m': '15',\r\n  '30m': '30',\r\n  '1h': '60',\r\n  '4h': '240',\r\n  '1d': '1440',\r\n  '1w': '10080',\r\n  '2w': '21600' } // ←--------- no 1M here\r\n```\r\n\r\nWe will add a warning for this shortly. Let us know if that doesn't answer the question."
      },
      {
        "user": "nwocykra",
        "created_at": "2019-04-25T18:37:37Z",
        "body": "Understood thank you! Yes a warning or simply no data would be nice to my taste. \r\nBut I will take my precautions in my end.\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 4945,
    "title": "creating order issue for  bitsane",
    "created_at": "2019-04-05T19:24:26Z",
    "closed_at": "2019-04-05T20:00:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4945",
    "body": "- OS: window\r\n- Programming Language version: python 3.6.4 \r\n- CCXT 1.18.433:\r\n- Exchange: bitsane\r\n- Method: create_order,create_limit_sell_order\r\n\r\nNow  I am using  2 kinds of function for creating order to bitsane, but I received the same error message.\r\nThis is my sample code in python\r\n```Python\r\nimport ccxt\r\ndef market_authentication(id):\r\n    if(id == 'bittrex'):\r\n        return {'apikey': '': ''}\r\n    elif(id == 'bitsane'):\r\n        return {'apikey': '5xxx', 'secretkey': '5Dxx'}    \r\ndef main():\r\n    id = 'bitsane'\r\n    x = market_authentication(id)\r\n    api_key = x['apikey']  \r\n    secret_key = x['secretkey']\r\n    exchange = getattr(ccxt, id)({\r\n        'apiKey': api_key,\r\n        'secret': secret_key,\r\n        'enableRateLitmit': True\r\n    })\r\n    exchange.create_order('BTC/USD', 'sell',0.001, 4900,)\r\n    exchange.create_limit_sell_order('BTC/USD', 0.001, 4900)  \r\nmain()\r\n```\r\n```\r\nError message: \r\nccxt.base.errors.InvalidNonce: bitsane {\"statusCode\":8,\"statusText\":\"The nonce should be greater than the previous\",\"result\":[]}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4945/comments",
    "author": "baotaizhang",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-04-05T19:26:31Z",
        "body": "@baotaizhang is that a new API key? Have you used it before with any other software?"
      },
      {
        "user": "baotaizhang",
        "created_at": "2019-04-05T19:29:06Z",
        "body": "Yeah, this is new key for me. \r\nAnd I never used this key with another software."
      },
      {
        "user": "kroitor",
        "created_at": "2019-04-05T19:35:17Z",
        "body": "Does this work for you:\r\n\r\n```Python\r\nimport ccxt\r\ndef market_authentication(id):\r\n    if(id == 'bittrex'):\r\n        return {'apikey': '': ''}\r\n    elif(id == 'bitsane'):\r\n        return {'apikey': '5xxx', 'secretkey': '5Dxx'}    \r\ndef main():\r\n    id = 'bitsane'\r\n    x = market_authentication(id)\r\n    api_key = x['apikey']  \r\n    secret_key = x['secretkey']\r\n    exchange = getattr(ccxt, id)({\r\n        'apiKey': api_key,\r\n        'secret': secret_key,\r\n        'enableRateLitmit': True,\r\n        'nonce': ccxt.Exchange.milliseconds,  # ←------------------------ add this line\r\n    })\r\n    exchange.create_order('BTC/USD', 'sell',0.001, 4900,)\r\n    exchange.create_limit_sell_order('BTC/USD', 0.001, 4900)  \r\nmain()\r\n```\r\n\r\n?"
      },
      {
        "user": "baotaizhang",
        "created_at": "2019-04-05T19:43:57Z",
        "body": "No , this code return this error\r\na. in case using create_limit_sell_order fucntion\r\n\r\nFile \"t.py\", line 27, in <module>\r\n    main()\r\n  File \"t.py\", line 26, in main\r\n    exchange.create_limit_sell_order('BTC/USD', 0.001, 4900)\r\n  File \"C:\\Users\\baota\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 1549, in create_limit_sell_order\r\n    return self.create_order(symbol, 'limit', 'sell', *args)\r\n  File \"C:\\Users\\baota\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\ccxt\\bitsane.py\", line 351, in create_order\r\n    order = self.parse_order(order, market)\r\n  File \"C:\\Users\\baota\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\ccxt\\bitsane.py\", line 313, in parse_order\r\n    if order['is_cancelled']:\r\nKeyError: 'is_cancelled'\r\n\r\nb. in case using create_order function\r\nFile \"t.py\", line 27, in <module>\r\n    main()\r\n  File \"t.py\", line 24, in main\r\n    exchange.create_order('BTC/USD', None , 'sell', 0.001 , 4900)\r\n  File \"C:\\Users\\baota\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\ccxt\\bitsane.py\", line 351, in create_order\r\n    order = self.parse_order(order, market)\r\n  File \"C:\\Users\\baota\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\ccxt\\bitsane.py\", line 313, in parse_order\r\n    if order['is_cancelled']:\r\nKeyError: 'is_cancelled'\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-04-05T19:56:24Z",
        "body": "@baotaizhang ok, i've uploaded some fixes for that, can you please update to the most recent version of CCXT 1.18.434 and retry with the same code (keep the `milliseconds` line) – does that resolve the issue?"
      },
      {
        "user": "baotaizhang",
        "created_at": "2019-04-05T20:00:03Z",
        "body": "I will update the ccxt version. Thanks so much for you."
      },
      {
        "user": "kroitor",
        "created_at": "2019-04-05T20:01:05Z",
        "body": "@baotaizhang let us know if that doesn't help."
      }
    ]
  },
  {
    "number": 4899,
    "title": "Question about \"cost\" in different orders",
    "created_at": "2019-03-27T17:23:22Z",
    "closed_at": "2019-04-11T20:58:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4899",
    "body": "OS: Windows 10\r\nProgramming Language version: Node.js\r\nCCXT version: #465\r\nExchange: All Exchanges\r\nNode.js 11.9.0 installed\r\nMethod: createOrder, cancelOrder, fetchOrder, fetchClosedOrders\r\n\r\nHello!\r\n\r\nI have a general question about the below methods when implementing correct mathematics:\r\n```javascript\r\ncreateOrder(exchange, exchangename, symbol, type, side, amount, price);\r\ncancelOrder(exchange, exchangename, id, symbol);\r\nfetchOrder(exchange, exchangename, id, symbol);\r\nfetchClosedOrders(symbol, since)\r\n```\r\nThe question is about the \"cost\" response like below:\r\n```javascript\r\n{\r\n    'id':                '12345-67890:09876/54321', // string\r\n    'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds\r\n    'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds\r\n    'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order\r\n    'status':     'open',         // 'open', 'closed', 'canceled'\r\n    'symbol':     'ETH/BTC',      // symbol\r\n    'type':       'limit',        // 'market', 'limit'\r\n    'side':       'buy',          // 'buy', 'sell'\r\n    'price':       0.06917684,    // float price in quote currency\r\n    'amount':      1.5,           // ordered amount of base currency\r\n    'filled':      1.1,           // filled amount of base currency\r\n    'remaining':   0.4,           // remaining amount to fill\r\n    'cost':        0.076094524,   // 'filled' * 'price' (filling price used where available)\r\n    'trades':    [ ... ],         // a list of order trades/executions\r\n    'fee': {                      // fee info, if available\r\n        'currency': 'BTC',        // which currency the fee is (usually quote)\r\n        'cost': 0.0009,           // the fee amount in that currency\r\n        'rate': 0.002,            // the fee rate (if available)\r\n    },\r\n    'info': { ... },              // the original unparsed order structure as is\r\n}\r\n```\r\nAs seen in above example, it shows: \"0.076094524\" (filled' * 'price)\r\nWhat I wonder in this example: \r\n\r\n**- We do Buy ETH for BTC.**\r\n\r\nI wonder if it is true that we actually then do have Exactly **0.076094524 ETH** in the account or do one need to take any fee into considiration (0.2%(0.002)).\r\nI mean, if the trade ends here. Would it be safe to for example then Sell Exactly or Maximum **0.076094524 ETH** to another currency? (Taking correct rounding into acccount)\r\n\r\nI wonder if this is safe to do this for all the methods: <br />\r\n**createOrder, cancelOrder, fetchOrder, fetchClosedOrders** ?\r\n\r\nThank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4899/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "tankakatan",
        "created_at": "2019-04-10T22:45:17Z",
        "body": "@jackpotcityco first, let me please correct your formulation to prevent a possible confusion. When we talk about exchange orders/trades, we assume that we want to buy or sell an `amount` (that may or may not be `filled`) of base asset (i.e. ETH in your case) at `price` (and for `cost`) in the quote asset (i.e. BTC in your case).\r\n\r\nIt means that in your example 0.076094524 is the value of BTC that you pay for 1.1 ETH and 0.0009 BTC is the fee that you pay on top of it.\r\n\r\nNow regarding your question (if i get it right). Let us assume that the fee currency is the same as the one you want to earn in via your order. You now want to know whether the fee will reduce your earning or not. If i understood you correctly, then the answer is **yes** – a value of `fee.cost` will always be commissioned from your account corresponding to `fee.currency` regardless the order `side`.\r\n\r\nTo clarify the above let's run through all possible combinations:\r\n\r\n* after your _buy_ order of X ETH at price of Y BTC with fee of Z BTC filled, your ETH balance will be _replenished_ by X while your BTC balance will be _diminished_ by (Y*X)+Z\r\n\r\n* after your _sell_ order of X ETH at price of Y BTC with fee of Z BTC filled, your ETH balance will be _diminished_ by X while your BTC balance will be _replenished_ by (Y*X)-Z\r\n\r\n* after your _buy_ order of X ETH at price of Y BTC with fee of Z ETH filled, your ETH balance will be _replenished_ by X-Z while your BTC balance will be _diminished_ by Y*X\r\n\r\n* after your _sell_ order of X ETH at price of Y BTC with fee of Z ETH filled, your ETH balance will be _diminished_ by X+Z while your BTC balance will be _replenished_ by Y*X\r\n\r\nThe above rules are true for all markets at all exchanges and will be applied to all methods that you have mentioned\r\n> createOrder, cancelOrder, fetchOrder, fetchClosedOrders\r\n\r\nDoes this answer your question?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-04-11T20:58:11Z",
        "body": "@jackpotcityco let us know if you have further questions."
      }
    ]
  },
  {
    "number": 4828,
    "title": "The \"percentage\" is not returned for all exchanges in loadMarkets()",
    "created_at": "2019-03-13T17:44:19Z",
    "closed_at": "2019-03-13T20:09:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4828",
    "body": "OS: Windows 10\r\nProgramming Language version: Node.js\r\nCCXT version: #465\r\nExchange: All Exchanges\r\nNode.js 11.9.0 installed\r\nMethod: exchange.loadMarkets()\r\n\r\nHello!\r\n\r\nI have a question about the **\"percentage\"** parameter when requesting:\r\n```javascript\r\nconst markets = await exchange.loadMarkets()\r\n```\r\nI could see that for some exchanges **\"percentage\"** is present in the returnd JSON and other exchanges not. If looking at the below example binance has **\"percentage\"** and coinex doesn't.\r\n\r\nFor coinex, this information is shown. Then I wonder how to think. Is this **\"percentage\"** or not. I am bit confused there?\r\n**\"taker\":0.001,\"maker\":0.001**\r\n\r\n**JSON for binance and coinex:**\r\n**coinex**\r\n\"BBN/BCH\":{\"limits\":{\"amount\":{\"min\":1},\"price\":{\"min\":1e-8}},\"precision\":{\"amount\":8,\"price\":8},\"taker\":0.001,\"maker\":0.001,\"id\":\"BBNBCH\",\"symbol\":\"BBN/BCH\",\"base\":\"BBN\",\"quote\":\"BCH\",\"baseId\":\"BBN\",\"quoteId\":\"BCH\",\"active\":true\r\n\r\n**binance**\r\n\"ETH/BTC\":{\"limits\":{\"amount\":{\"min\":0.001,\"max\":100000},\"price\":{},\"cost\":{\"min\":0.001}},\"precision\":{\"base\":8,\"quote\":8,\"amount\":3,\"price\":6},\"tierBased\":false,\"percentage\":true,\"taker\":0.001,\"maker\":0.001,\"id\":\"ETHBTC\",\"symbol\":\"ETH/BTC\",\"base\":\"ETH\",\"quote\":\"BTC\",\"baseId\":\"ETH\",\"quoteId\":\"BTC\"\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4828/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-13T20:09:17Z",
        "body": "> Then I wonder how to think. Is this \"percentage\" or not. I am bit confused there?\r\n\r\nIn general, it's always a percentage, unless percentage is defined (not undefined) and has a value of `false`. If you don't see it defined anywhere or it has a value different from `false`, then it's true. \r\n\r\nSo, in this particular case you can assume percentages safely.\r\n\r\nLet us know if that doesn't answer the question. We will unify this aspect with coinex and other exchanges, thx for reporting!"
      },
      {
        "user": "jackpotcityco",
        "created_at": "2019-03-14T01:13:21Z",
        "body": "> In general, it's always a percentage, unless percentage is defined (not undefined) and has a value of false. If you don't see it defined anywhere or it has a value different from false, then it's true.\r\n\r\nThank you for the clarification. I will go with percentages then. \r\nThat is great to find something that can help out for the library!\r\n\r\n"
      }
    ]
  },
  {
    "number": 4795,
    "title": "questions about order structure",
    "created_at": "2019-03-05T23:37:29Z",
    "closed_at": "2019-03-05T23:45:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4795",
    "body": "Regarding the order `status`, the docs say:\r\n\r\n>     'status':     'open',         // 'open', 'closed', 'canceled'\r\n\r\nIf an order is partially filled and then cancelled, what should the status be?\r\n\r\nRegarding the `cost`:\r\n\r\n>     'cost':        0.076094524,   // 'filled' * 'price' (filling price used where available)\r\n\r\nIf the _filling price_ isn't available, should this field be left blank?  (I think it should)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4795/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-05T23:45:26Z",
        "body": "> If an order is partially filled and then cancelled, what should the status be?\r\n\r\n- `status == 'canceled'`\r\n- `filled > 0`\r\n- `filled < amount`\r\n\r\n> If the filling price isn't available, should this field be left blank? (I think it should)\r\n\r\nThe problem is 3/4 of exchanges do not actually return the filling price or assume filling price = limit price in their engines. So, we only fill it if\r\n- the exchange provides the actual cost in the response, so we don't have to calculate it\r\n- the exchange doesn't provide the actual cost from the API we use `filled * price` with the most accurate price available:\r\n  - if the exchange specifies the filling price – we use that\r\n  - otherwise we use the limit price from the exchange response\r\n\r\nLet us know if that doesn't answer your questions."
      },
      {
        "user": "npomfret",
        "created_at": "2019-03-06T08:15:06Z",
        "body": "Thanks.\r\n\r\n> ... otherwise we use the limit price from the exchange response \r\n\r\nDo you mean the limit price the original order was set at? If so this could result in an inaccurate figure, no?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-03-06T08:23:16Z",
        "body": "> Do you mean the limit price the original order was set at? \r\n\r\nNope, when you query an order by id – you don't specify the price of the original order.\r\nSay, you `fetchOrder (someId)`. You get an order response from the exchange.\r\n\r\nIt could look like\r\n\r\n```JavaScript\r\n    ...\r\n    amount: 5,\r\n    price: 2, // this is the limit price, but we take it from this response, not from the original order\r\n    cost: 10,  // ← this can be missing\r\n    filling_price: 2, // ← this can be missing\r\n    ...\r\n```\r\n\r\n↑ If the cost and the filling price are both missing, then the only thing we can take for the cost is `amount * price`. In most cases exchanges won't provide any further detail. Otherwise you just don't rely on the order cost at all, and use `fetchMyTrades` or `fetchOrderTrades` to get the actual executed fills and filling prices/costs for your trades per order.\r\n\r\nIn other words, we don't use the params of the original order and we only use the values from the response, if those values are provided by the exchange. There's one special case that involves the `orders` cache, but very few exchanges actually implement it.\r\n\r\n> If so this could result in an inaccurate figure, no?\r\n\r\nYes, however, the figure will be as accurate as you can get from that endpoint of that exchange.\r\n\r\n"
      },
      {
        "user": "npomfret",
        "created_at": "2019-03-06T08:33:30Z",
        "body": "Ok. For what it's worth I think leaving it blank, rather than potentially providing an inaccurate figure, is best. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-03-06T08:35:47Z",
        "body": "> For what it's worth I think leaving it blank, rather than potentially providing an inaccurate figure, is best.\r\n\r\nI totally agree on this, so, if you notice a lying cost somewhere, please do let us know."
      }
    ]
  },
  {
    "number": 4779,
    "title": "Question about: enableRateLimit': true",
    "created_at": "2019-03-03T23:25:59Z",
    "closed_at": "2019-03-04T13:32:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4779",
    "body": "OS: Windows 10\r\nProgramming Language version: Node.js\r\nCCXT version: #465\r\nExchange: Binance\r\nNode.js 11.9.0 installed\r\nMethod: exchange.fetchOrderBook\r\n\r\nHello!\r\n\r\nI have a working code below to get the orderbooks for 3 symbols in a loop at Binance.\r\n\r\nMy question is about the ratelimit. I know Binance has 1200 requests/minute but I am a bit confused when I see the below ratelimit information.\r\n\r\n**Should I in my code use: 'enableRateLimit': true ?**\r\n\r\nenableRateLimit': true (Takes 3 seconds)\r\n**enableRateLimit': false (Takes 1 second) This is not a good idéa to do?**\r\n\r\nAssume that I only would run this code once every minute which would be clearly below 1200 requests/minute. Is there Also a limit as the manual says to ONLY do 1 HTTP requests per 2000 milliseconds as this also can get ones IP banned?\r\n\r\n\r\n`**\"rateLimits\": [{\r\n    \"rateLimitType\": \"REQUESTS\",\r\n    \"interval\": \"MINUTE\",\r\n    \"limit\": 1200\r\n  },**\r\n\r\n### _\"rateLimit: A request rate limit in milliseconds. Specifies the required minimal delay between two consequent HTTP requests to the same exchange\"_`\r\n\r\n```javascript\r\n'use strict';\r\nconst ccxt = require('ccxt');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n\r\nvar i;\r\nconst exchangename = \"binance\";\r\nconst exchange = new ccxt.binance({\r\n    'enableRateLimit': true\r\n});\r\n\r\n(async () => {\r\n    console.log(`start`);\r\n    const start = Date.now();\r\n\r\n\r\n    var orderbookPromises = []\r\n    var symbols = ['ETH/BTC', 'LTC/BTC', 'ZRX/ETH']\r\n    for (i = 0; i < symbols.length; i++) {\r\n\r\n        const symbol = symbols[i]\r\n        \r\n        try {\r\n                let tickerProcessing = new Promise(async (resolve) => {\r\n                    const orderbook = await exchange.fetchOrderBook(symbol, 5);\r\n\r\n                    const exchangename2 = exchangename + '#' + symbol.replace(\"/\", \"\")\r\n                    const dumpFile = path.join(__dirname, 'orderbooks', `${exchangename2}Orderbook.txt`);\r\n                await fs.promises.writeFile(dumpFile, JSON.stringify(orderbook));\r\n                resolve()\r\n            })\r\n            orderbookPromises.push(tickerProcessing)\r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    // wait for all of them to execute or fail\r\n    await Promise.all(orderbookPromises)\r\n\r\n\r\n    const end = Date.now();\r\n    console.log(`Done in ${(end - start) / 1000} seconds`);\r\n})();\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4779/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-04T13:18:34Z",
        "body": "> Should I in my code use: 'enableRateLimit': true ?\r\n\r\nDepends on what your code does, of course. We can't answer what your code should do )\r\n\r\n> enableRateLimit': false (Takes 1 second) This is not a good idéa to do?\r\n\r\nIt's ok as long as you know what you're doing.\r\n\r\n> Assume that I only would run this code once every minute which would be clearly below 1200 requests/minute. \r\n\r\nIn that case, the above idea is ok.\r\n\r\n> Is there Also a limit as the manual says to ONLY do 1 HTTP requests per 2000 milliseconds as this also can get ones IP banned?\r\n\r\nNo, there is no such specific limit defined in the Manual. The Manual says that there's a default value for the rate limit, but the actual threshold value depends on the exchange in question. Each exchange has its own rate-limits. So, you should treat that value in a flexible way. The Manual also says that the default will be sub-optimal, so the user should tweak those values for the needs of his application.\r\n\r\nLet us know if that doesn't answer the question."
      },
      {
        "user": "jackpotcityco",
        "created_at": "2019-03-04T15:24:58Z",
        "body": "It was the perfect answer. It was a good confirmation to be on the sure side.\r\nSo it is a default value and I should tweak it according the the different exchanges  and usecases then.\r\n\r\nThank you for your help!"
      }
    ]
  },
  {
    "number": 4763,
    "title": "Is it possible to fetch (with async) only when the price of a specific changes?",
    "created_at": "2019-02-28T15:30:51Z",
    "closed_at": "2019-03-03T16:05:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4763",
    "body": "Is it possible to fetch (with async) only when the bidPrice/askPrice changes? I want to check how much times the price of a pair changes on an average of 1 minute.\r\nThis is my code so far:\r\n\r\n```import asyncio, os, sys, time\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt.async_support as ccxt  # noqa: E402\r\n\r\nbinance = ccxt.binance({\r\n    \"enableRateLimit\": True,  # ←--------- REQUIRED otherwise you will get errors\r\n})\r\n\r\nasync def poll():\r\n    while True:\r\n        yield await binance.fetch_ticker('KEY/BTC')\r\n\r\nasync def main():\r\n    async for ticker in poll():\r\n        print(ticker)\r\n\r\ntimeout = time.time() + 60*1   # 1 minutes from now\r\nwhile True:\r\n    test = 0\r\n    if test == 1 or time.time() > timeout:\r\n        break\r\n    else:\r\n        asyncio.get_event_loop().run_until_complete(main())\r\n    \r\n    test = test - 1\r\n```\r\n\r\n- OS: Linux Manjaro\r\n- Programming Language version: Python3.7\r\n- CCXT version: 1.18.304\r\n- Exchange: binance\r\n- Method: fetch_ticker\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4763/comments",
    "author": "AlgoQ",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-03T16:05:18Z",
        "body": "@kobej1 you might want to read through this: #56"
      }
    ]
  },
  {
    "number": 4757,
    "title": "Is there any way fetch logo for exchanges or markets .",
    "created_at": "2019-02-27T13:49:57Z",
    "closed_at": "2019-02-27T13:58:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4757",
    "body": "Does ccxt provide any scope for logo or icons for markets or exchanges. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4757/comments",
    "author": "caeser1996",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-27T13:58:40Z",
        "body": "@caeser1996 \r\n\r\nYes, see the `urls` property of the exchange, it has a `logo` field there: \r\n\r\n```Python\r\n# in Python for example, but almost the same in JS and PHP as well:\r\nimport ccxt\r\nexchanges = ['binance', 'kucoin2', 'bittrex']\r\nfor id in exchanges:\r\n    exchange = getattr(ccxt, id)()\r\n    print(exchange.id + ': ' + exchange.urls['logo'])\r\n```\r\n\r\nHowever, the logo there is not for use within the apps, but mostly for generating docs for the CCXT. Use at your own risk. \r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "sumantadev",
        "created_at": "2019-02-28T05:45:13Z",
        "body": "is there any option to get a market currency logo?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-28T05:47:40Z",
        "body": "@caeser1996 nope, market logos and other GUI aspects are beyond the scope of CCXT for now."
      },
      {
        "user": "sumantadev",
        "created_at": "2019-02-28T06:07:07Z",
        "body": "can you just help me with equivalent code in php."
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-28T06:18:24Z",
        "body": "@caeser1996 \r\n\r\n```PHP\r\n// PHP\r\n$exchanges = array ('binance', 'kucoin2', 'bittrex');\r\nforeach ($exchanges as $id) {\r\n    // instantiate the exchange by id\r\n    $exchange = '\\\\ccxt\\\\' . $id;\r\n    $exchange = new $exchange ();\r\n    echo $exchange->id . ': ' . $exchange->urls['logo'] . \"\\n\";  \r\n}\r\n```"
      }
    ]
  },
  {
    "number": 4684,
    "title": "Add fetchBalance on trade account Kucoin2",
    "created_at": "2019-02-18T15:29:43Z",
    "closed_at": "2019-02-18T15:52:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4684",
    "body": "At the moment fetchBalance() on Kucoin2 (newly released platform) returns balance from main account with no option to get balance from the trade account. Could this be added please?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4684/comments",
    "author": "charlie-eth",
    "comments": [
      {
        "user": "MarcelBeining",
        "created_at": "2019-02-18T15:45:52Z",
        "body": "+1"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-18T15:53:57Z",
        "body": "@calbertuk you can choose whatever it is:\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'trade'}) // this is the default as of version 1.18.248\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'main'}) // this is the default prior to version 1.18.248\r\n```\r\n\r\nLet us know if that does not help."
      },
      {
        "user": "charlie-eth",
        "created_at": "2019-02-18T15:55:10Z",
        "body": "That's perfect, thanks."
      },
      {
        "user": "MarcelBeining",
        "created_at": "2019-02-18T16:31:08Z",
        "body": "Oh, no wonder, on pip, latest version is 1.18.247 ^^"
      }
    ]
  },
  {
    "number": 4665,
    "title": "Kraken Available balance not correct",
    "created_at": "2019-02-14T04:03:55Z",
    "closed_at": "2019-02-14T04:07:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4665",
    "body": "* OS: Ubuntu\r\n* Programming Language version: Node.js (11)\r\n* CCXT version:1.17.498\r\n* Exchange: Kraken\r\n* Method: fetchBalance\r\n\r\nrequest - const exchange = new ccxt.kraken ({\r\n    'apiKey': 'YOUR_API_KEY', \r\n    'secret': 'YOUR_SECRET', \r\n    'enableRateLimit': true\r\n});\r\nawait exchange.loadMarkets ()\r\n    exchange.verbose = true\r\n    const balance = await exchange.fetchBalance ()\r\n\r\nResponse -- ETH: {free: 0.03, used: 0, total: 0.03}\r\nfree: 0.03\r\ntotal: 0.03\r\nused: 0\r\n\r\nBut I have create the new order with amount that order is untouched till now but it's still showing free balance as total ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4665/comments",
    "author": "gj315",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-14T04:07:48Z",
        "body": "Yeah, Kraken does not report distinct values for free and used amounts, just the total, which is also put into `free` in this case. However, we couldn't really put anything else but an `undefined` value there. We will consider changing it to `undefined` in one of the upcoming versions. Let us know if that doesn't answer the question."
      }
    ]
  },
  {
    "number": 4664,
    "title": "Error while placing limit order on HITBTC for BMH/BTC",
    "created_at": "2019-02-14T03:44:06Z",
    "closed_at": "2019-02-14T03:47:34Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4664",
    "body": "- OS: Ubuntu\r\n- Programming Language version: Node.js (11)\r\n- CCXT version:1.17.498\r\n- Exchange: Hitbtc\r\n- Method: createOrder\r\n\r\nexchange=HitBTC\r\nsymbol=BMH/BTC\r\ntype=limit\r\nside=buy\r\namount=3252.798082148666\r\nprice=0.00000114378\r\n\r\nResponse -- negative precision is not yet supported\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4664/comments",
    "author": "gj315",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-14T03:47:25Z",
        "body": "Use `hitbtc2` instead of `hitbtc`."
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-14T03:56:14Z",
        "body": "P.S. I'd also recommend to update the version of CCXT as well, as your version seems a bit outdated."
      }
    ]
  },
  {
    "number": 4652,
    "title": "create standard objects",
    "created_at": "2019-02-12T03:02:29Z",
    "closed_at": "2019-02-12T18:09:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4652",
    "body": "The list of standardised fields is growing quickly. This issue serves to discuss how we should go about populating all fields in the standard structure. \r\n\r\n`parseX` functions could return\r\n\r\n```\r\nreturn this.deepExtend (defaultTransaction, {\r\n    'amount': 12.3,\r\n})\r\n```\r\n\r\n* is there any reason to *not* change to this style?\r\n* where should we store standard objects?\r\n\r\na standard object is the just the expected object but with `undefined`/ empty container type for all it's fields.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4652/comments",
    "author": "frosty00",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-02-12T03:30:48Z",
        "body": "another benefit to doing this is that if we decide to change X structure it should change everywhere"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-12T04:48:35Z",
        "body": "> * is there any reason to _not_ change to this style?\r\n\r\nTo me this is a strong argument for changing to this style:\r\n\r\n> another benefit to doing this is that if we decide to change X structure it should change everywhere\r\n\r\nI agree, this is more convenient in regard of new fields. So, +1 for **ease of adding new fields and massive updates**. And in terms of automated testing, it simplifies consistency on the user end, so +1 for **consistency**. \r\n\r\nHowever, I also see these reasons not to do this:\r\n\r\n- -1 for **speed**: If we do `return this.deepExtend (defaultTransaction, { 'amount': 12.3 })` from inside each object being parsed, then, we're introducing a loop into every call to a `parse*` method, which makes all the call chain much slower and, what's more important, that effectively raises the requirements for ram, especially if you're running, say, a few dozens of exchange classes on each node of your system.\r\n- -1 for **completeness**: To me making those declarations of unified structures implicit means more errors in contributions or more incomplete contributions – if it is not required to list them all out and list all their values, including the undefined ones, then not enough attention might be paid to it and then the devs will tend to skip as much as they can defaulting to the predefined values, and we don't really want to have a lot of \"partial implementations\", our goal is to be as complete as possible. I would rather restrict those rules even further to stop producing new incomplete implementations.\r\n- -1 for **ease of maintenance**: A plain structure is easier for keeping in mind, understanding and editing if all of it is on the same screen. Despite that this might seem like an insignificant point, it becomes really critical when it comes to merging code written by a lot of different people.\r\n\r\nAs an alternative solution, we could also add a quick script to check and validate those structures for consistency and even highlight them in transpile-time, before actually transpiling them. We would still use regexes to do massive adjustments to the code for updates, but doing consistency in transpile-time would help save the mem and speed."
      }
    ]
  },
  {
    "number": 4637,
    "title": "Gemini fetchMyTrades requires symbol",
    "created_at": "2019-02-09T17:09:51Z",
    "closed_at": "2019-02-10T02:02:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4637",
    "body": "Most exchanges use fetchMyTrades to obtain trades for all symbols. Gemini does not: a symbol is required. fetchMyTrades ought to behave uniformly for all exchanges.\r\n\r\nI've updated Gemini.js in two ways. First, the current fetchMyTrades has become fetchMyTradesBySymbol. I'm reasonably certain that is not a naming convention that will stay but its my initial suggestion. Second, I've created a new fetchMyTrades that iterates over the symbols at Gemini and calls fetchMyTradesBySymbol for each one. \r\n\r\nThis may not be ideal behavior as it will send in a number of REST API requests. I looked at the Gemini API specs here. It does indicate to provide a symbol but I have not tested out whether it works without one or not. I do have my own Gemini api js library so I can test it independently, but I may not be able to get to it too soon. \r\n\r\n@kroitor -- please advise if I ought to be raising issues for any/every potential pull request. I have a few more as I'm trying to get uniform access (esp via fetchMyTrades) for the exchanges that I use. Until I hear otherwise, I will raise as an issue first.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4637/comments",
    "author": "gRittyKitty",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-02-09T19:16:40Z",
        "body": "Hi @gRittyKitty,\r\n\r\n> Most exchanges use fetchMyTrades to obtain trades for all symbols. Gemini does not: a symbol is required. fetchMyTrades ought to behave uniformly for all exchanges.\r\n\r\nNope, sometimes `fetchMyTrades` requires a symbol. If you want to write code that is exchange agnostic you need to provide a symbol. \r\n\r\n>  Second, I've created a new fetchMyTrades that iterates over the symbols at Gemini and calls fetchMyTradesBySymbol for each one.\r\n\r\nThis is not allowed in the library because it breaks the rule \"one request per unified method\". The reason for this rule is that it allows people to write async python code that can do other stuff while it is waiting. Having 100 calls in one method would mean python would have to evaluate them all synchronously."
      },
      {
        "user": "gRittyKitty",
        "created_at": "2019-02-09T20:22:29Z",
        "body": "Thanks, @frosty00. Appreciate the explanation of the async. I won't do the pull request.\r\nIs there a way to tell programmatically if fetchMyTrades needs a symbol or gets data for all symbols?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-10T02:02:55Z",
        "body": "Thx @frosty00 !\r\n\r\n@gRittyKitty \r\n\r\n> Is there a way to tell programmatically if fetchMyTrades needs a symbol or gets data for all symbols?\r\n\r\nWe don't have a full description of the schema yet, but we will have it hopefully soon. In the meantime the method will throw an `ArgumentsRequired` exception if it needs a symbol, so, you can catch that exception and try with a symbol then.\r\n\r\n```JavaScript\r\nlet trades = undefined\r\ntry {\r\n    trades = await exchange.fetchMyTrades ()\r\n} catch (e) {\r\n    if (e instanceof ccxt.ArgumentsRequired) {\r\n        trades = await exchange.fetchMyTrades (symbol)\r\n    } else {\r\n        throw e\r\n    }\r\n}\r\n```\r\n\r\nHope this helps.\r\n"
      },
      {
        "user": "jurgenmela28",
        "created_at": "2019-07-24T15:25:37Z",
        "body": "> Thx @frosty00 !\r\n> \r\n> @gRittyKitty\r\n> \r\n> > Is there a way to tell programmatically if fetchMyTrades needs a symbol or gets data for all symbols?\r\n> \r\n> We don't have a full description of the schema yet, but we will have it hopefully soon. In the meantime the method will throw an `ArgumentsRequired` exception if it needs a symbol, so, you can catch that exception and try with a symbol then.\r\n> \r\n> ```js\r\n> let trades = undefined\r\n> try {\r\n>     trades = await exchange.fetchMyTrades ()\r\n> } catch (e) {\r\n>     if (e instanceof ccxt.ArgumentsRequired) {\r\n>         trades = await exchange.fetchMyTrades (symbol)\r\n>     } else {\r\n>         throw e\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> Hope this helps.\r\n\r\ncome on mate, we do not have problem how to handle errors...we want to fetch all them at the same time not by symbol param? any solution"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-24T15:29:34Z",
        "body": "@jurgenmela28\r\n\r\n> we want to fetch all them at the same time not by symbol param?\r\n\r\nYou should forward that question to the API devs of the exchange you're asking about. Because this is a requirement of the underlying exchange API, not a requirement of CCXT. Some exchanges will allow querying without a symbol (all trades at once), others will not tolerate that and will throw an error."
      }
    ]
  },
  {
    "number": 4624,
    "title": "Error running the build (flake8)",
    "created_at": "2019-02-07T09:42:41Z",
    "closed_at": "2019-02-11T06:14:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4624",
    "body": "Did the build change recently?\r\n\r\n`FileNotFoundError: [Errno 2] No such file or directory: '...ccxt.fork/python/.tox/qa/bin/flake8': '.../ccxt.fork/python/.tox/qa/bin/flake8'\r\n`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4624/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-07T14:59:42Z",
        "body": "> Did the build change recently?\r\n\r\nNot really... Can you elaborate?"
      },
      {
        "user": "npomfret",
        "created_at": "2019-02-08T14:32:19Z",
        "body": "Um, also not really.  When I used to run `npm run build` it worked fine.  Nothing that I know of on my side has changed.  And now I reliably get this error about flake8."
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-09T00:15:41Z",
        "body": "> And now I reliably get this error about flake8.\r\n\r\nNeed some more output at the very least, namely, this can be related to the version change in some of the underlying dependencies... Can you `pip list` and paste some more output around the error?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-09T00:16:46Z",
        "body": "Also, if you `python -m pip install --upgrade` before trying a clean install – does that help? Without further details from you it will be hard to resolve this blindly."
      },
      {
        "user": "npomfret",
        "created_at": "2019-02-10T11:52:19Z",
        "body": "```\r\npython -m pip install\r\n/usr/bin/python: No module named pip\r\n\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-10T19:31:28Z",
        "body": "@npomfret we will be resolving this for many years if you post one line at a time ) Obviously, we need much more – your version numbers for python, pip, all the packages, the OS, all that... And as much of the output as you can show, not just one line with an error statement."
      },
      {
        "user": "npomfret",
        "created_at": "2019-02-11T06:14:28Z",
        "body": "Apologies, I just ran the command you said and pasted the only line of output.\r\n\r\n\r\nI found the problem anyway.  I needed to upgrade _tox_ (from 3.3.0 to 3.7.0)."
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-11T06:15:20Z",
        "body": "@npomfret thx for reporting back! Appreciate it!"
      },
      {
        "user": "npomfret",
        "created_at": "2019-03-13T09:47:32Z",
        "body": "Ugh, this `tox` thing went wrong again today after updating homebrew.  I had to run `brew reinstall tox` to get it working."
      }
    ]
  },
  {
    "number": 4601,
    "title": "fetchMinOrderAmounts is used in wrong location",
    "created_at": "2019-02-01T14:18:44Z",
    "closed_at": "2019-02-01T14:38:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4601",
    "body": "You scrape the minOrderAmounts nicely fro kraken, but they are per currency, not per pair. As such I would expect them to be populated when I do a call to `fetchCurrencies`, and not in `fetchMarkets`.\r\n\r\n- Programming Language version: es6\r\n- CCXT version: 1.18.190\r\n- Exchange: kraken\r\n- Method: fetchMarkets\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4601/comments",
    "author": "Morriz",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-01T14:38:22Z",
        "body": "@Morriz min order amount is actually a property of a market (pair), if you think of it, this is more flexible than having min order amount per currency. \r\n\r\nSome exchanges have min order amount that varies for the same currency in different pairs. It is really a per-market property, not a per-currency property, therefore we load it for markets, not for currencies.\r\n\r\nYou can't trade (place orders) with a single currency – orders are not compatible with single currencies logically. You can trade with a pair of currencies only. In that pair you order one currency for a promise to pay another currency. So min order amount is always related to one currency in a pair of currencies (logically). And putting min order amount into the currency structure would be a structural mistake that would allow to handle Kraken, but no other exchange. \r\n\r\nWe choose to go another way and we have min order amount in the market structure, which covers Kraken as well as the other exchanges, so it's more generic and versatile to have that property in the market structure, not in the currency structure. \r\n\r\nHope this answers your question, let me know if not."
      },
      {
        "user": "Morriz",
        "created_at": "2019-02-01T14:40:55Z",
        "body": "understood...thanks for another swift reply :)"
      }
    ]
  },
  {
    "number": 4589,
    "title": "Question: Is it possible to add a request to the top of the rateLimiter-Queue?",
    "created_at": "2019-01-31T13:52:07Z",
    "closed_at": "2019-01-31T16:21:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4589",
    "body": "I currently have a ton of rest requests to download historic data and I would like to add some other requests at the top of the rateLimiter-queue. Is this supported atm? or is there an easy way to achieve such a thing? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4589/comments",
    "author": "tommuhm",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-01-31T16:21:42Z",
        "body": "Adding requests on top means sending them out of order, right? So, you want an out-of-band message, that essentially means that you want to send your requests immediately, without waiting for the queue to flush first. The existing built-in rate-limiter implementation is flexible enough for that (we use the tokenBucket algorithm), but it currently has no unified interface for controlling that specific behavior, it's a work in progress. \r\n\r\nHowever, there are possible workarounds:\r\n\r\n- override the `.throttle()` method by implementing your rate-limiting logic\r\n- set `enableRateLimit = false` before issuing an oob message, then set it back to `true` immediately after (this effectively overrides the waiting queue, but the downside is that it disables the rate-limiter, so your oob message won't always wait for the next nonce)\r\n- use a second instance of the exchange class with a single rate-limiter logic shared between the two instances\r\n\r\nAnyways, currently it doesn't have a unified convenient option for oob requests, so it implies adding some custom code on user side. We'll do our best to add more flexibility to it asap. Let me know if that does not answer the question. Thx!"
      }
    ]
  },
  {
    "number": 4552,
    "title": "How to read exchange API errors in JavaScript?",
    "created_at": "2019-01-27T22:33:47Z",
    "closed_at": "2019-01-28T03:02:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4552",
    "body": "How do I get them to read them correctly in JavaScript? I like to save the error messages in a log file but I am not getting the msg item from the error object, it simply accuses the variable is undefined\r\n\r\nI'm using try catch as follows, I give a console in e.message and it returns me an object but when I try to get only the undefined message, can anyone help me?\r\n\r\n`try {\r\n            data = await this.exchange.createOrder(symbol, type, side, amount, price, params);\r\n        } catch (e) {\r\n            console.log(e.message.msg);\r\n}`\r\n\r\n- OS: Windows 10\r\n- Programming Language version: JavaScript / Node.js\r\n- CCXT version: 1.18.133\r\n- Exchange: Binance\r\n- Method: createOrder or others\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4552/comments",
    "author": "viniciussvl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-01-28T03:02:39Z",
        "body": "```JavaScript\r\ntry {\r\n    data = await this.exchange.createOrder(symbol, type, side, amount, price, params);\r\n} catch (e) {\r\n    console.log(e.constructor.name, e.message);\r\n}\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "viniciussvl",
        "created_at": "2019-01-28T03:38:38Z",
        "body": "> ```js\r\n> try {\r\n>     data = await this.exchange.createOrder(symbol, type, side, amount, price, params);\r\n> } catch (e) {\r\n>     console.log(e.constructor.name, e.message);\r\n> }\r\n> ```\r\n> \r\n> Let us know if that does not answer your question.\r\n\r\nSo, it shows me a string for example: \"binance {code: 202, msg: 'Account ......'}, I want to just get msg: 'Account' and I could not because of undefined, understood?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-01-28T03:42:13Z",
        "body": "@viniciussvl \r\n\r\n```JavaScript\r\ntry {\r\n    data = await this.exchange.createOrder(symbol, type, side, amount, price, params);\r\n} catch (e) {\r\n    // for binance only!\r\n    const split = e.message.split (' ')\r\n    split.shift ()\r\n    const error = JSON.parse (split.join (' '))\r\n    console.log (error.msg)\r\n}\r\n```\r\n\r\n**EDITED**"
      },
      {
        "user": "viniciussvl",
        "created_at": "2019-01-28T03:44:31Z",
        "body": "> @viniciussvl\r\n> \r\n> ```js\r\n> try {\r\n>     data = await this.exchange.createOrder(symbol, type, side, amount, price, params);\r\n> } catch (e) {\r\n>     // for binance only!\r\n>     const [ exchangeId, errorString ] = e.message.split (' ')\r\n>     const error = JSON.parse (errorString)\r\n>     console.log (error.msg)\r\n> }\r\n> ```\r\n> \r\n> **Oops. this one has an error in it, will post one more shortly**\r\n\r\nI thought I'd do something like this, make a helper to read the error of each exchange, what do you suggest?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-01-28T03:47:10Z",
        "body": "@viniciussvl \r\n\r\n> what do you suggest?\r\n\r\nWe have unification for error messages on our roadmap, but the issue can be solved in a simpler way – instead of parsing those errors and trying to get the message – we will return that as a standalone field for convenience, so no parsing will be required at all. Hope to do that soon.\r\n\r\nP.S. updated the example above, so it should work now"
      }
    ]
  },
  {
    "number": 4528,
    "title": "Error TheOcean: create_order ",
    "created_at": "2019-01-23T09:49:58Z",
    "closed_at": "2019-01-23T17:51:16Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4528",
    "body": "I am using ccxt - 1.18.141 & node - v8.10.0. While creating order with their endpoints in js langugae its shows TypeError: BigNumber is not a constructor in Exchnage.js soliditySha3 function.Kindly help me to rectify my issue.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4528/comments",
    "author": "Maha-Blaze",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-01-23T17:51:16Z",
        "body": "Looks like you're missing the web3 deps and BigNumber, run this in your project folder:\r\n\r\n```\r\nnpm install web3 ethereumjs-util ethereumjs-abi bignumber.js --save\r\n```\r\n\r\n... and you should be fine. Let us know if that doesn't help."
      }
    ]
  },
  {
    "number": 4523,
    "title": "coinfalcon ticker",
    "created_at": "2019-01-22T13:31:26Z",
    "closed_at": "2019-01-22T13:43:37Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4523",
    "body": "- Programming Language version: PHP 7.1\r\n- CCXT version: 1.18.142\r\n- Exchange: coinfalcon\r\n- Method: fetch_tickers\r\n\r\nWhen doing the fetch_tickers() function, the bid/ask are empty. \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4523/comments",
    "author": "hbus12",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-01-22T13:43:37Z",
        "body": "> When doing the fetch_tickers() function, the bid/ask are empty.\r\n\r\nThat is documented – not all of exchanges will return all the info. Most of them will return a subset of the documented fields (others will be empty, if not provided by the exchange in question). Some of them, like Coinfalcon, will provide just the bare minimum (24hr volume data). So, in general, it's normal with some exchanges, and if the exchange does not provide the data you want – we can't really invent it for you from nothing (that wouldn't be fair to you in the first place). So what you see is what you actually get from the exchange. \r\n\r\nHope this answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 4432,
    "title": "askVolume and betVolume for exchanges",
    "created_at": "2019-01-04T22:08:18Z",
    "closed_at": "2019-01-04T22:10:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4432",
    "body": "Hello,\r\n\r\nI only get the askVolume and betVolume for Binance when using the price ticker method is this normal? If yes is there a way to get these values? \r\n(I used the exchanges: binance, bittrex, bitfinexcrex24, hitbtc and kraken.)\r\n\r\nThank you in advance!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4432/comments",
    "author": "AlgoQ",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-01-04T22:10:37Z",
        "body": "`askVolume` and `bidVolume` will only be defined if the underlying exchange provides that information from the ticker endpoint. If not – those will be undefined. Not all exchanges provide that information in the ticker call. So, yes, that is normal. If you want the bid and ask volume for each exchange universally – you should call fetchOrderBook and get values from there."
      }
    ]
  },
  {
    "number": 4374,
    "title": "Python ujson has much better performance than the std json",
    "created_at": "2018-12-24T03:10:16Z",
    "closed_at": "2018-12-25T03:05:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4374",
    "body": "Is it possible to use ujson(or yajl) instead of the std json in CCXT?\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4374/comments",
    "author": "ngugcx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-25T03:05:41Z",
        "body": "> Is it possible to use ujson(or yajl) instead of the std json in CCXT?\r\n\r\nSure!\r\n\r\nLet me know if this does not answer your question:\r\n\r\n```Python\r\nimport ccxt\r\nimport ujson\r\nexchange = ccxt.binance({\r\n    'parse_json': ujson.loads\r\n})\r\nprint(exchange.fetchTicker('ETH/BTC'))\r\n```"
      },
      {
        "user": "ngugcx",
        "created_at": "2018-12-26T03:49:36Z",
        "body": "Thanks! This works for normal exchanges.\r\nExchanges like cryptopia whose responses need to be normalized  before json-parsing will fail. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-12-26T03:54:45Z",
        "body": "> Exchanges like cryptopia whose responses need to be normalized before json-parsing will fail.\r\n\r\nYep, but you can do a cryptopia-specific override in the same manner and fix the json before calling `loads`, basically, as long as you can override everything – this isn't an issue in CCXT )\r\n\r\n"
      }
    ]
  },
  {
    "number": 4361,
    "title": "Kucoin fetchClosedOrders returns order id not fill id",
    "created_at": "2018-12-19T19:45:56Z",
    "closed_at": "2018-12-19T19:51:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4361",
    "body": "```\r\n{ info:\r\n   { coinType: 'KCS',\r\n     amount: 12.4203,\r\n     dealValue: 0.178902,\r\n     fee: 0.0124203,\r\n     dealDirection: 'SELL',\r\n     coinTypePair: 'ETH',\r\n     oid: '5a5475395e39307a6b8e7876',\r\n     dealPrice: 0.014404,\r\n     orderOid: '5a5475105e39307beec73298',\r\n     feeRate: 0.001,\r\n     createdAt: 1515484473000,\r\n     id: 575992,\r\n     direction: 'BUY',\r\n     status: 'closed' },\r\n  id: '5a5475105e39307beec73298',\r\n  timestamp: 1515484473000,\r\n  datetime: '2018-01-09T07:54:33.000Z',\r\n  lastTradeTimestamp: undefined,\r\n  symbol: 'KCS/ETH',\r\n  type: 'limit',\r\n  side: 'buy',\r\n  price: 0.014404,\r\n  amount: 12.4203,\r\n  cost: 0.178902,\r\n  filled: 12.4203,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.0124203, rate: 0.001, currency: 'KCS' },\r\n  trades: undefined }\r\n {info:\r\n   { coinType: 'KCS',\r\n     amount: 1.3211,\r\n     dealValue: 0.01902912,\r\n     fee: 0.0013211,\r\n     dealDirection: 'BUY',\r\n     coinTypePair: 'ETH',\r\n     oid: '5a5475115e39307a6b8e786f',\r\n     dealPrice: 0.014404,\r\n     orderOid: '5a5475105e39307beec73298',\r\n     feeRate: 0.001,\r\n     createdAt: 1515484433000,\r\n     id: 575985,\r\n     direction: 'BUY',\r\n     status: 'closed' },\r\n  id: '5a5475105e39307beec73298',\r\n  timestamp: 1515484433000,\r\n  datetime: '2018-01-09T07:53:53.000Z',\r\n  lastTradeTimestamp: undefined,\r\n  symbol: 'KCS/ETH',\r\n  type: 'limit',\r\n  side: 'buy',\r\n  price: 0.014404,\r\n  amount: 1.3211,\r\n  cost: 0.01902912,\r\n  filled: 1.3211,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.0013211, rate: 0.001, currency: 'KCS' },\r\n  trades: undefined }\r\n```\r\n\r\nThis means that the `id` for each trade will be duplicated. We need to use `info.oid`.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4361/comments",
    "author": "shortcircuit3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-19T19:49:19Z",
        "body": "Are you sure it's `fetchMyTrades`? Looks like an array of orders to me) You probably mean `fetchClosedOrders`?"
      },
      {
        "user": "shortcircuit3",
        "created_at": "2018-12-19T19:51:37Z",
        "body": "@kroitor Youre right. my bad, it is fetchClosedOrders.\r\n\r\nThis is confusing that it returns the fills and were required to aggregate by id. Shouldn't we still use `oid`?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-12-19T19:54:51Z",
        "body": "> This is confusing that it returns the fills and were required to aggregate by id. Shouldn't we still use oid?\r\n\r\nYes, but it is there for historical reasons mostly... It comes from the way the Kucoin API itself is structured.\r\n\r\nAnyways, for the orders `orderOid` should have the priority, and for the trades we have trade id `oid` and `orderOid` in the field order id. So everything was ok apparently, no? )"
      },
      {
        "user": "shortcircuit3",
        "created_at": "2018-12-19T19:57:32Z",
        "body": "Ok, I guess `fetchMyTrades` uses the same endpoint with the correct data. False alarm, just confusing. Thank you!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-12-19T19:58:25Z",
        "body": "No worries, let me know if you notice anything suspicious )"
      }
    ]
  },
  {
    "number": 4344,
    "title": "Is there an api abstraction for FUTURE?",
    "created_at": "2018-12-18T02:54:33Z",
    "closed_at": "2018-12-18T21:20:15Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4344",
    "body": "The ccxt SPOT api abstraction is awesome!\r\nThere are more and more exchanges which support FUTURE.\r\nIs there a plan to support FUTURE?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4344/comments",
    "author": "ngugcx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-18T02:59:45Z",
        "body": "> Is there a plan to support FUTURE?\r\n\r\nCurrently, we implement implicit methods around all http endpoints, including the ones for trading futures contracts. However, you're right, it's not unified yet, it's a work in progress. We have plans to  unify the following aspects:\r\n- margin trading (including leveraged positions)\r\n- futures trading\r\n- perpetual contracts\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 4337,
    "title": "Is there any modifyOrder method?",
    "created_at": "2018-12-16T17:27:12Z",
    "closed_at": "2018-12-16T17:34:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4337",
    "body": "Hi, \r\n\r\nThere are openOrder , cancelOrder, but I can't find a modifyOrder method..\r\n\r\nIs there any modifyOrder in CCXT?\r\n\r\nRegards",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4337/comments",
    "author": "Gennttii",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-16T17:34:26Z",
        "body": "> Is there any modifyOrder in CCXT?\r\n\r\nYes, it is called `editOrder` and we use the endpoint from the exchange, if the exchange in question provides such an endpoint for editing orders, and if not – it falls back to a default implementation in the base class that will do two calls sequentially – cancel the first order and create a new one. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 4236,
    "title": "fetch_ohlcv determine limit per exchange",
    "created_at": "2018-11-27T06:19:59Z",
    "closed_at": "2018-11-27T21:30:17Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4236",
    "body": "- OS: LInux\r\n- Programming Language version: python3.7\r\n- CCXT version: '1.17.363'\r\n- Exchange: multiple\r\n- Method: fetch_ohlcv\r\n\r\n\r\nwhen using the following code, i get different results depending on the exchange.\r\nI understand that it's exchange-dependent what the upper limit is, but is there a way to know what this limit is (and the default parameter) for the exchange i'm currently querying before making the first call?\r\n\r\n```\r\nimport ccxt\r\nfrom datetime import datetime, timezone\r\nstart = datetime.strptime(\"01.10.2018\", \"%d.%m.%Y\").replace(\r\n           tzinfo=timezone.utc).timestamp()\r\ntimeframe='1h'\r\nlimit=None\r\nbinance = ccxt.binance()\r\nhitbtc = ccxt.hitbtc2()\r\nkraken = ccxt.kraken()\r\n\r\nhitbtc_ohlcv = hitbtc.fetch_ohlcv(\"ETH/BTC\", timeframe=timeframe, since=int(start*1000), limit=limit)\r\nbinance_ohlcv = binance.fetch_ohlcv(\"ETH/BTC\", timeframe=timeframe, since=int(start*1000), limit=limit)\r\nkraken_ohlcv = kraken.fetch_ohlcv(\"ETH/BTC\", timeframe=timeframe, since=int(start*1000), limit=limit)\r\n\r\nprint(f\"hitbtc: {len(hitbtc_ohlcv)}\")\r\nprint(f\"binance: {len(binance_ohlcv)}\")\r\nprint(f\"kraken: {len(kraken_ohlcv)}\")\r\n\r\n```\r\n\r\nOutput\r\n```\r\nhitbtc: 1000\r\nbinance: 1000\r\nkraken: 720\r\n```\r\n\r\nin addition to that, the default seems to vary - using `limit=None` in the above code returns a different output for hitbtc:\r\n```\r\nhitbtc: 100\r\nbinance: 500\r\nkraken: 720\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4236/comments",
    "author": "xmatthias",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-11-27T21:30:17Z",
        "body": "> is there a way to know what this limit is (and the default parameter) for the exchange i'm currently querying before making the first call?\r\n\r\nCurrently – without looking into the code – nope, unfortunately, it's just one of the aspects that is not unified completely yet, but we surely want to unify it as well. We have plans on proposing a much better approach to pagination (that will cover your request), hopefully, soon. \r\n\r\nLet us know if that does not answer your question, feel free to reopen it if needed."
      }
    ]
  },
  {
    "number": 4218,
    "title": "Is there a method to get the transaction time from Exchange A to B?",
    "created_at": "2018-11-23T18:00:23Z",
    "closed_at": "2018-11-23T18:04:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4218",
    "body": "Hi everyone, I'm enjoying ccxt  library. \r\nIs exist a method which can count a transaction time from Exchange A to B, or something similar?\r\n- Ubuntu:\r\n- Python:\r\n- newest:\r\n- All:\r\n- I don't know:\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4218/comments",
    "author": "Arrmlet",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-11-23T18:02:00Z",
        "body": "Hi!\r\n\r\n> Is exist a method which can count a transaction time from Exchange A to B, or something similar?\r\n\r\nInside CCXT – no, but CCXT gives you the right tools to create such a method )"
      },
      {
        "user": "Arrmlet",
        "created_at": "2018-11-23T18:04:22Z",
        "body": "Thank you for the fast response :) "
      }
    ]
  },
  {
    "number": 4211,
    "title": "API Keys Setup - Any function to know exactly what parameter to pass",
    "created_at": "2018-11-22T14:05:29Z",
    "closed_at": "2018-11-22T14:10:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4211",
    "body": "I have read the API Keys Setup wiki and understood there are parameters like apiKey, secret, uid and password, but not all exchange require all the parameter.\r\nIs there any function or method that will tell me exactly which parameter to pass for each exchange.\r\n\r\nSomething like:\r\n```\r\n$quoinex = new \\ccxt\\quoinex ();\r\n$quoinex->getParam(); // ------> This will return apiKey and secret\r\n$1btcxe = new \\ccxt\\1btcxe ();\r\n$1btcxe->getParam(); // -------> This will return only apiKey\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4211/comments",
    "author": "rohit1290",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-11-22T14:10:49Z",
        "body": "See the property named `requiredCredentials` on the exchange instance:\r\n\r\n```PHP\r\n$exchange = new \\ccxt\\quoinex ();\r\nvar_dump ($exchange->requiredCredentials);\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "rohit1290",
        "created_at": "2018-11-22T14:38:16Z",
        "body": "Thank you, I can work on $exchange->requiredCredentials and covert it to my required format.\r\nThanks :)"
      }
    ]
  },
  {
    "number": 4199,
    "title": "*ToPrecision methods return strings",
    "created_at": "2018-11-20T08:31:42Z",
    "closed_at": "2018-11-20T10:36:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4199",
    "body": "Need add parseFloat() before return.\r\nThanks!\r\n\r\nOS: OS X\r\nProgramming Language version:\r\nCCXT version: 1.17.488\r\nExchange: JavaScript\r\nMethod: priceToPrecision, amountToPrecision, costToPrecision, feeToPrecision",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4199/comments",
    "author": "ErickMarlo",
    "comments": [
      {
        "user": "ErickMarlo",
        "created_at": "2018-11-20T08:42:17Z",
        "body": "Code for check it.\r\n\r\n ```\r\n\r\n//\"use strict\"\r\nconst ccxt = require (\"ccxt\");\r\nvar exchanges = [\"binance\", \"kucoin\", \"bitfinex\", \"poloniex\"];\r\ne = [];\r\n\r\nsetTimeout(()=>{\r\n\texchanges.forEach (async (x)=>{\r\n\t\te[x] = new ccxt[x] () \r\n\t\tawait e[x].loadMarkets ()\r\n\t})\r\n},1000)\r\n\r\nvar ss = \"ETH/USDT\"\r\n\r\nsetTimeout(()=>{\r\n\texchanges.forEach (async (x)=>{\r\n\t\tif(!!e[x].markets[ss]) {\r\n\t\t\tconsole.log(\"#\",x,ss)\r\n\t\t\tlet n \r\n\t\t\t\r\n\t\t\tn = e[x].amountToPrecision(ss,1.2345678901234567890111) \r\n\t\t\tconsole.log(\"amountToPrecision\", typeof n,n)\r\n\r\n\t\t\tn = e[x].costToPrecision(ss,1.2345678901234567890111)\r\n\t\t\tconsole.log(\"priceToPrecision\",  typeof n,n)\r\n\r\n\t\t\tn = e[x].costToPrecision(ss,1.2345678901234567890111)\r\n\t\t\tconsole.log(\"costToPrecision\",   typeof n,n)\r\n\r\n\t\t\tn = e[x].feeToPrecision(ss,1.2345678901234567890111)\r\n\t\t\tconsole.log(\"feeToPrecision\",   typeof n,n)\r\n\t\t}\r\n\t})\r\n\r\n\r\n},10000)\r\n\r\n```\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-11-20T10:35:50Z",
        "body": "Those methods are designed to return string-based representations of numbers, that is because some exchanges will require numbers as strings for precision reasons...\r\n\r\nTherefore `parseFloat` is not added *inside* those methods (may be excessive in some cases) and if you want to get floats – you just add `parseFloat` on the *outside* in userland:\r\n\r\n```\r\nn = e[x].amountToPrecision(ss,1.2345678901234567890111) \r\nconsole.log(\"amountToPrecision\", typeof n,n)\r\n```\r\n\r\n↓\r\n\r\n```\r\nn = parseFloat (e[x].amountToPrecision(ss,1.2345678901234567890111))\r\nconsole.log(\"amountToPrecision\", typeof n,n)\r\n```\r\n\r\nHope this answers your questions, let us know if not."
      }
    ]
  },
  {
    "number": 4145,
    "title": "Show order response create_market_buy_order",
    "created_at": "2018-11-08T22:43:15Z",
    "closed_at": "2018-11-08T23:06:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4145",
    "body": "Trying to see the response from create_market_buy_order but I am not sure how.  I have tried a print | pprint | and custom logging.  I do not want to turn on verbose for all http.  Id like to get just the response from this query.  I have tried with and without params.  My code appears to skip over the \"market_buy\" when trying to get output from it. Other logging | pprint and print statements work just fine.  It is only this one.\r\n\r\n```\r\nparams = {\r\n            'test': True,  \r\n        }\r\nmarket_buy = binance.create_market_buy_order(symbol, buy_amount, params)     \r\n\r\npprint(market_buy)\r\nlog_buy.debug(market_buy) \r\n```\r\n\r\n- OS: WIN 10 + UBUNTU 18.04 + 18.10\r\n- Programming Language version: PYTHON\r\n- CCXT version: 1.17.485\r\n- Exchange: BINANCE\r\n- Method: CREATE_MARKET_BUY_ORDER\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4145/comments",
    "author": "snub-fighter",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-11-08T22:52:17Z",
        "body": "One of possible ways:\r\n\r\n```Python\r\nbinance = ccxt.binance ({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET',\r\n    'enableRateLimit': True,  # as required by the Manual\r\n})\r\nparams = {\r\n'test': True,\r\n}\r\n# preload markets in non-verbose mode\r\nbinance.load_markets()\r\n\r\n# verbose output for just the request/response of create_market_buy_order\r\nbinance.verbose = True\r\n\r\n# do the call (and save the output)\r\nmarket_buy = binance.create_market_buy_order(symbol, buy_amount, params) pprint(market_buy)\r\n\r\n# switch it back off\r\nbinance.verbose = False\r\n```\r\n\r\nThat isn't the only way to achieve the same, though... So it depends on the purpose of saving it in the first place. Let us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 4075,
    "title": "when symbol haven't active property, they are active ?",
    "created_at": "2018-10-31T16:15:57Z",
    "closed_at": "2018-10-31T16:42:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4075",
    "body": "Hi,\r\n\r\nsome exchanges do not have active property for each symbol. It's mean that all symbols return by the API are active ? Or we don't know :D ? Sorry if the answer is somewhere (wiki or code) but i don't find it :X.\r\n\r\nThanks in advance for the help.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4075/comments",
    "author": "Matoran",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-31T16:42:50Z",
        "body": "Hi!\r\n\r\n> It's mean that all symbols return by the API are active ? Or we don't know :D ?\r\n\r\nIt means, we don't know, because either the exchange in question does not report that, or we don't have proper parsing for that particular field, as it was added later along the way, so, some implementations may be missing that flag even in cases where exchanges do provide it. This is still under development, and if you can list those exchanges that miss that flag, we will add fixes, where necessary. Hope this answers your question, let us know if not )\r\n"
      }
    ]
  },
  {
    "number": 4050,
    "title": "bittrex fetchDeposits returns no timestamp and datetime",
    "created_at": "2018-10-26T07:28:05Z",
    "closed_at": "2018-10-26T07:50:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4050",
    "body": "- OS: Linux\r\n- Programming Language version: PHP\r\n- CCXT version: 1.17.421\r\n- Exchange: bittrex\r\n- Method: fetchDeposit\r\n\r\nThe only timestamp returned from the exchnage for withdrawals is in the 'LastUpdated' field. This should probably be used for the timestamp and datetime. The 'Opened' field that is used for Withdrawals is not available when fetching deposits",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4050/comments",
    "author": "WoK-E",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-26T07:37:26Z",
        "body": "> The only timestamp returned from the exchnage for withdrawals is in the 'LastUpdated' field. This should probably be used for the timestamp and datetime. \r\n\r\nNope, unfortunately, we can't set that timestamp there, because it literally means the last updated timestamp, therefore it is in the transaction structure, in the `updated` field. We don't invent values where the exchange in question does not provide them. You can add that logic to your code in userland on client-side, namely, *\"consider `updated` for Bittrex deposits a `timestamp`\"*. But, unfortunately, this may not play well for all users equally. The other signifcant reason behind it is that the LastUpdated field can change, which should not happen to a unified `timestamp` (it should always be fixed, unchanging, if set).\r\n\r\n> The 'Opened' field that is used for Withdrawals is not available when fetching deposits\r\n\r\nRight, this is by design again, same reasoning basically. Anyways, they don't support any date-based pagination for deposits and withdrawals whatsoever.\r\n\r\nDoes the above answer your question? )\r\n\r\n"
      },
      {
        "user": "WoK-E",
        "created_at": "2018-10-26T07:50:52Z",
        "body": "Yes, it does answer the question, and I understand the reasoning. I will; be closing the issue.\r\n\r\nThe reason I use 'LastUpdated' is because this is when the exchange gets enough confirmations, in order to consider the deposit valid, and stops updating the record. The other (selfish) reason is because I want to minimize the ccxt classes I extend in order to provide such extra logic and functionality :)\r\n\r\nThanks for the prompt response, and thanks for this great library!"
      }
    ]
  },
  {
    "number": 4043,
    "title": "Use ccxt in NodeJS with promise",
    "created_at": "2018-10-25T09:19:22Z",
    "closed_at": "2018-10-25T13:49:12Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4043",
    "body": "Hello,\r\n\r\nI seaarch my question in both issues on here and also on google but couldn't find an example.\r\n\r\nIs it possible to use ccxt nodejs library with Promise?\r\n\r\nI know that it's working with await syntax but i wish to use it with promise library (actually i wish to use with regular callbacks but i couldn't)\r\n\r\nIs someone here that's using ccxt with promise?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4043/comments",
    "author": "ne0c0de",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-25T13:49:12Z",
        "body": "JSYI, `async` is just a syntax sugar over promises (`async` uses promises under the hood).\r\n\r\nAsync:\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\n\r\n;(async () => {\r\n    let exchange = new ccxt.bittrex ({ enableRateLimit: true })\r\n    let symbol = 'ETH/BTC'\r\n    try {\r\n        let result = await exchange.fetchOrderBook (symbol)\r\n        console.log (result)\r\n    } catch (error) {\r\n        console.log (e.constructor.name, e.message)\r\n    }\r\n}) ()\r\n```\r\n\r\nPromise:\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\nlet exchange = new ccxt.bittrex ({ enableRateLimit: true })\r\nlet symbol = 'ETH/BTC'\r\nexchange.fetchOrderBook (symbol).then (result => {\r\n    console.log (result)\r\n}).catch (error => {\r\n    console.log (e.constructor.name, e.message)\r\n})\r\n```"
      }
    ]
  },
  {
    "number": 4039,
    "title": "Making loadMarkets/fetchMarkets accept a marketid as a parameter, to speed things up",
    "created_at": "2018-10-24T12:24:54Z",
    "closed_at": "2018-10-24T12:31:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4039",
    "body": "Can the loadmarkets/fetchmarkets function be modified as to accept a parameter indicating what market are we interested in? It could even be left as an optional parameter, which if omitted would simply make the functions behave as they do now and get all the markets.\r\n\r\nThis is an efficiency feature, as there are big exchanges which do have HUNDREDS of markets, and reading all of them when you just need a single market is time consuming without any reason. I don't know if other coders are doing like me, but I rarely need these infos for more than two markets in a specific moment, and loading 600+ markets (for example on livecoin there are 666 markets) when you need one of them is slow...",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4039/comments",
    "author": "ShoresOfNowhere",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-24T12:31:58Z",
        "body": "@ShoresOfNowhere in most cases loading 600 markets takes exactly the same amount of https requests as loading just one market. That is because all of them are loaded in a signle call to the endpoint responsible for the list of markets, and you can't really choose or specify that in a cross-compatible way. You can only load them first, then filter them to just one, which makes very little sense if you're trying to avoid loading all of them in the first place. So, in general, the answer to your question is \"no\", unfortunately. Some exchanges execute more than one request, but they don't really fetch markets one by one."
      }
    ]
  },
  {
    "number": 4035,
    "title": "get OHLCV exchange historic data",
    "created_at": "2018-10-23T14:18:12Z",
    "closed_at": "2018-10-23T16:48:27Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4035",
    "body": "- OS: Windows 10 Professional x64 bit\r\n- Programming Language version: Python x64 bit v3.6\r\n- CCXT version: Updated ~3 days prior\r\n- Exchange: Binance\r\n- Method: fetch_OHLCV\r\n\r\nI am rather new to this ccxt library as well as python, so please be patient with me... I made some additions to the python example code listed in the library to fetch historic candle data. I am trying to get the candles to print out concurrent times based on the from_timestamp. The from_timestamp gets the proper new value every iteration or loop of the try loop located within the while. But the candles function does not receive this same from_timestamp. In turn, the code when looking at the saved excel file just starts each candles at the same time, as opposed to its new time(s) Each set of 500 rows in excel is just the same first 500 rows.\r\nAny direction would be helpful, been trying to modify it to correctly save the candle data for compounding dates for many hours...\r\nUltimately I am trying to get the entire dataframe in one pass of the overall run function.\r\n\r\n```\r\nimport os\r\nimport sys\r\nimport time\r\nimport pandas as pd\r\nfrom pandas import ExcelWriter\r\n\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt  # noqa: E402\r\n\r\nmsec = 1000\r\nminute = 60 * msec\r\nhold = 30\r\n\r\nexchange = ccxt.binance({\r\n    'rateLimit': 10000,\r\n    'enableRateLimit': True,\r\n    # 'verbose': True,\r\n})\r\n\r\ndef run():\r\n    from_datetime = '2017-01-01 00:00:00'\r\n    from_timestamp = exchange.parse8601(from_datetime)\r\n    data = []\r\n    now = exchange.milliseconds()\r\n\r\n    while from_timestamp < now:\r\n        writer = ExcelWriter('1min.xlsx')\r\n        try:\r\n            print(from_timestamp)\r\n            print(exchange.milliseconds(), 'Fetching candles starting from', exchange.iso8601(from_timestamp), from_timestamp)\r\n            candles = exchange.fetch_ohlcv('BTC/USDT', '1m', from_timestamp)\r\n            print(from_timestamp)\r\n            #print(candles, from_timestamp)     \r\n            print(exchange.milliseconds(), 'Fetched', len(candles), 'candles')\r\n            first = candles[0][0]\r\n            last = candles[-1][0]\r\n            print('First candle epoch', first, exchange.iso8601(first))\r\n            print('Last candle epoch', last, exchange.iso8601(last))\r\n            from_timestamp += len(candles) * minute\r\n            data += candles\r\n\r\n            df = pd.DataFrame(data, columns=['Timestamp','Open','High','Low','Close', 'Volume'])\r\n            df['Timestamp'] = pd.DataFrame(df['Timestamp'].apply(exchange.iso8601))\r\n            save_excel = df.to_excel(writer, sheet_name='2017_CURRENT')\r\n            writer.save()\r\n            print('1m candles saved')\r\n        except (ccxt.ExchangeError, ccxt.AuthenticationError, ccxt.ExchangeNotAvailable, ccxt.RequestTimeout) as error:\r\n\r\n            print('Got an error', type(error).__name__, error.args, ', retrying in', hold, 'seconds...')\r\n            time.sleep(hold)\r\nif __name__ == \"__main__\":      \r\n    run()\r\n```\r\n\r\n\r\nCurrent Output:\r\n```\r\n1483228800000\r\n1540300052830 Fetching candles starting from 2017-01-01T00:00:00.000Z 1483228800000\r\n2017-01-01T00:00:00.000Z 1483228800000\r\n1483228800000\r\n1540300063138 Fetched 500 candles\r\nFirst candle epoch 1502942400000 2017-08-17T04:00:00.000Z\r\nLast candle epoch 1502972340000 2017-08-17T12:19:00.000Z\r\n1m candles saved\r\n1483258800000\r\n1540300063437 Fetching candles starting from 2017-01-01T08:20:00.000Z 1483258800000\r\n2017-01-01T08:20:00.000Z 1483258800000\r\n1483258800000\r\n1540300073024 Fetched 500 candles\r\nFirst candle epoch 1502942400000 2017-08-17T04:00:00.000Z\r\nLast candle epoch 1502972340000 2017-08-17T12:19:00.000Z\r\n1m candles saved\r\n1483288800000\r\n1540300073490 Fetching candles starting from 2017-01-01T16:40:00.000Z 1483288800000\r\n2017-01-01T16:40:00.000Z 1483288800000\r\n1483288800000\r\n1540300083023 Fetched 500 candles\r\nFirst candle epoch 1502942400000 2017-08-17T04:00:00.000Z\r\nLast candle epoch 1502972340000 2017-08-17T12:19:00.000Z\r\n1m candles saved\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4035/comments",
    "author": "moader808",
    "comments": [
      {
        "user": "moader808",
        "created_at": "2018-10-23T16:05:01Z",
        "body": "^misclick"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-23T16:42:10Z",
        "body": "@moader808 let's do this:\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.binance({\r\n    'rateLimit': 10000,\r\n    'enableRateLimit': True,\r\n    # 'verbose': True,\r\n})\r\n\r\nsince1 = exchange.parse8601('2018-01-01T00:00:00Z')  # January\r\nsince2 = exchange.parse8601('2018-10-01T00:00:00Z')  # October\r\nsymbol = 'BTC/USDT'\r\ntimeframe = '1m'\r\nohlcv1 = exchange.fetch_ohlcv(symbol, timeframe, since1)\r\nohlcv2 = exchange.fetch_ohlcv(symbol, timeframe, since2)\r\n\r\nprint('First candle of January:', exchange.iso8601(ohlcv1[0][0]))\r\nprint('Last candle of January:', exchange.iso8601(ohlcv1[-1][0]))\r\nprint('Candles returned:', len(ohlcv1))\r\nprint('First candle of October:', exchange.iso8601(ohlcv2[0][0]))\r\nprint('Last candle of October:', exchange.iso8601(ohlcv2[-1][0]))\r\nprint('Candles returned:', len(ohlcv2))\r\n```\r\n\r\n↑ \r\nThe above code should effectively prove that fetching from a certain `since` value works for you:\r\n↓\r\n\r\n```\r\nmbp:python igorkroitor$ python3\r\nPython 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> exchange = ccxt.binance({\r\n...     'rateLimit': 10000,\r\n...     'enableRateLimit': True,\r\n...     # 'verbose': True,\r\n... })\r\n>>>\r\n>>> since1 = exchange.parse8601('2018-01-01T00:00:00Z')  # January\r\n>>> since2 = exchange.parse8601('2018-10-01T00:00:00Z')  # October\r\n>>> symbol = 'BTC/USDT'\r\n>>> timeframe = '1m'\r\n>>> ohlcv1 = exchange.fetch_ohlcv(symbol, timeframe, since1)\r\n>>> ohlcv2 = exchange.fetch_ohlcv(symbol, timeframe, since2)\r\n>>>\r\n>>> print('First candle of January:', exchange.iso8601(ohlcv1[0][0]))\r\nFirst candle of January: 2018-01-01T00:00:00.000Z\r\n>>> print('Last candle of January:', exchange.iso8601(ohlcv1[-1][0]))\r\nLast candle of January: 2018-01-01T08:19:00.000Z\r\n>>> print('Candles returned:', len(ohlcv1))\r\nCandles returned: 500\r\n>>> print('First candle of October:', exchange.iso8601(ohlcv2[0][0]))\r\nFirst candle of October: 2018-10-01T00:00:00.000Z\r\n>>> print('Last candle of October:', exchange.iso8601(ohlcv2[-1][0]))\r\nLast candle of October: 2018-10-01T08:19:00.000Z\r\n>>> print('Candles returned:', len(ohlcv2))\r\nCandles returned: 500\r\n>>>\r\n```\r\n\r\nSo, I guess, the problem is somewhere in the logic of your code?\r\n\r\nHere's more:\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.binance({\r\n    'rateLimit': 10000,\r\n    'enableRateLimit': True,\r\n    # 'verbose': True,\r\n})\r\n\r\nnow = exchange.milliseconds()\r\nsince = exchange.parse8601('2018-01-01T00:00:00Z')\r\nsymbol = 'BTC/USDT'\r\ntimeframe = '1m'\r\nwhile since < now:\r\n    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since)    \r\n    print('First candle:', exchange.iso8601(ohlcv[0][0]))\r\n    print('Last candle:', exchange.iso8601(ohlcv[-1][0]))\r\n    print('Candles returned:', len(ohlcv))\r\n    since += len(ohlcv) * 60000\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nmbp:python igorkroitor$ python3\r\nPython 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> exchange = ccxt.binance({\r\n...     'rateLimit': 10000,\r\n...     'enableRateLimit': True,\r\n...     # 'verbose': True,\r\n... })\r\n>>>\r\n>>> now = exchange.milliseconds()\r\n>>> since = exchange.parse8601('2018-01-01T00:00:00Z')\r\n>>> symbol = 'BTC/USDT'\r\n>>> timeframe = '1m'\r\n>>> while since < now:\r\n...     ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since)\r\n...     print('First candle:', exchange.iso8601(ohlcv[0][0]))\r\n...     print('Last candle:', exchange.iso8601(ohlcv[-1][0]))\r\n...     print('Candles returned:', len(ohlcv))\r\n...     since += len(ohlcv) * 60000\r\n...\r\nFirst candle: 2018-01-01T00:00:00.000Z\r\nLast candle: 2018-01-01T08:19:00.000Z\r\nCandles returned: 500\r\nFirst candle: 2018-01-01T08:20:00.000Z\r\nLast candle: 2018-01-01T16:39:00.000Z\r\nCandles returned: 500\r\nFirst candle: 2018-01-01T16:40:00.000Z\r\nLast candle: 2018-01-02T00:59:00.000Z\r\nCandles returned: 500\r\n...\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-23T16:44:01Z",
        "body": "P.S.\r\n\r\nAlso, this is a bad approach:\r\n\r\n```\r\n    since += len(ohlcv) * 60000\r\n```\r\n\r\nThis is also a bad approach:\r\n\r\n```\r\n            from_timestamp += len(candles) * minute\r\n```\r\n\r\nThis is a much better way:\r\n\r\n```\r\nfrom_timestamp = ohlcv[-1][0] + minute\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-23T16:48:24Z",
        "body": "@moader808 the issue you have is with `from_timestamp`. You're fetching BTC/USDT candles since 2017-01-01, there were no trades then... because the first candle on that market appeared in August 2017... \r\n\r\nYou then add 500*60000 to that timestamp in January-2017 (which is still in January) and fetch again since January and again get the first 500 candles from August. So you kinda repeatedly fetch candles since January until you reach August, getting the first 500 august-candles every time... \r\n\r\nIf, for setting the since timestamp, you stick to the approach posted in my previous comment above (use the timestamp from last candle for traversing, not the amount of candles multiplied by timeframe) – then you won't have that bug in your code anymore."
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-23T16:52:45Z",
        "body": "Proof:\r\n\r\n```Python\r\nimport os\r\nimport sys\r\nimport time\r\nimport pandas as pd\r\nfrom pandas import ExcelWriter\r\n\r\n\r\nroot = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nsys.path.append(root + '/python')\r\n\r\nimport ccxt  # noqa: E402\r\n\r\nmsec = 1000\r\nminute = 60 * msec\r\nhold = 30\r\n\r\nexchange = ccxt.binance({\r\n    'rateLimit': 10000,\r\n    'enableRateLimit': True,\r\n    # 'verbose': True,\r\n})\r\n\r\ndef run():\r\n    from_datetime = '2017-01-01 00:00:00'\r\n    from_timestamp = exchange.parse8601(from_datetime)\r\n    data = []\r\n    now = exchange.milliseconds()\r\n\r\n    while from_timestamp < now:\r\n        writer = ExcelWriter('1min.xlsx')\r\n        try:\r\n            print(from_timestamp)\r\n            print(exchange.milliseconds(), 'Fetching candles starting from', exchange.iso8601(from_timestamp), from_timestamp)\r\n            candles = exchange.fetch_ohlcv('BTC/USDT', '1m', from_timestamp)\r\n            print(from_timestamp)\r\n            #print(candles, from_timestamp)     \r\n            print(exchange.milliseconds(), 'Fetched', len(candles), 'candles')\r\n            first = candles[0][0]\r\n            last = candles[-1][0]\r\n            print('First candle epoch', first, exchange.iso8601(first))\r\n            print('Last candle epoch', last, exchange.iso8601(last))\r\n            from_timestamp = candles[-1][0] + minute\r\n            data += candles\r\n\r\n            df = pd.DataFrame(data, columns=['Timestamp','Open','High','Low','Close', 'Volume'])\r\n            df['Timestamp'] = pd.DataFrame(df['Timestamp'].apply(exchange.iso8601))\r\n            save_excel = df.to_excel(writer, sheet_name='2017_CURRENT')\r\n            writer.save()\r\n            print('1m candles saved')\r\n        except (ccxt.ExchangeError, ccxt.AuthenticationError, ccxt.ExchangeNotAvailable, ccxt.RequestTimeout) as error:\r\n\r\n            print('Got an error', type(error).__name__, error.args, ', retrying in', hold, 'seconds...')\r\n            time.sleep(hold)\r\nif __name__ == \"__main__\":      \r\n    run()\r\n```\r\n\r\n**UPD. typos**"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-23T17:01:28Z",
        "body": "Feel free to reopen it if the above does not answer your question."
      },
      {
        "user": "bolikaka",
        "created_at": "2022-10-08T15:27:16Z",
        "body": "how to fetch the ohlcv from active candle that still not closed?\r\ni need open ,high and low values from current candle.\r\ni try it in kuCoin, but nothing."
      }
    ]
  },
  {
    "number": 4031,
    "title": "Error: cryptopia Signature does not match request parameters.",
    "created_at": "2018-10-22T10:25:34Z",
    "closed_at": "2018-10-22T19:20:07Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4031",
    "body": "The issue is that I can't send the api key and secret in cryptopia for a private\r\n```GOOD\r\n// api key and secret from cryptopia\r\nconst apiKey = 'my_api_key_from_cryptopia'\r\nconst apiSecret = 'my_secret_from_cryptopia'\r\n```\r\n```javascript\r\nlet cryptopia = new ccxt.cryptopia({\r\n  'apiKey': apiKey,\r\n  'secret': apiSecret,\r\n  'timeout': 30000,\r\n})\r\n```\r\n\r\n**Error:**\r\n```BAD\r\n(node:1711) UnhandledPromiseRejectionWarning: Error: cryptopia Signature does not match request parameters.\r\n    at cryptopia.handleErrors (.../node_modules/ccxt/js/cryptopia.js:790:31)\r\n    at response.text.then (.../node_modules/ccxt/js/base/Exchange.js:647:18)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n(node:1711) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n\r\n```\r\n- OS: MacOs\r\n- Programming Language version:\r\n- CCXT version: 1.17.368\r\n- Exchange: Cryptopia\r\n- Method: new ccxt.cryptopia\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4031/comments",
    "author": "gamebak",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-22T19:20:07Z",
        "body": "Duplicate: #4032 "
      }
    ]
  },
  {
    "number": 3994,
    "title": "How to share rate limit between multiple scripts?",
    "created_at": "2018-10-14T19:58:59Z",
    "closed_at": "2023-06-26T12:09:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3994",
    "body": "Versions not really relevant. This could be a feature request except that I'm not asking for that. I want some input on how this might be done. The rate limiter in CCXT is good but what if I have multiple scripts using CCXT? They need to share the same rate limit. Where in the code should I look to make a cache or constant? How would you do it?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3994/comments",
    "author": "bitnom",
    "comments": [
      {
        "user": "7013145",
        "created_at": "2018-10-17T09:05:15Z",
        "body": "It will depend on what exactly you are trying to achieve. Almost definitely, the solution is not extending ccxt library functionality.\r\n\r\nMaybe you can thread your scripts and use a global variable to hold last request timestamps, then everytime you make a request in your code (any script) you lock the variable so other scripts cannot proceed with queries before the lock is released from the first call (i.e request is done)\r\n\r\nThis could be done in Python with the threading module."
      },
      {
        "user": "pcriadoperez",
        "created_at": "2023-06-26T12:09:49Z",
        "body": "Closing this issue for now, but feel free to reach out for any other questions"
      }
    ]
  },
  {
    "number": 3957,
    "title": "hitbtc2 fetchclosedorders ignore symbol",
    "created_at": "2018-10-07T11:58:42Z",
    "closed_at": "2019-02-28T10:05:18Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3957",
    "body": "- OS: debian\r\n- Programming Language version: php\r\n- CCXT version: latest\r\n- Exchange: HitBtc v2\r\n- Method: fetchclosedorders\r\n\r\n\r\nFetch Closed Orders ignore symbol and returns all closed orders but replaces original symbol\r\n\r\n```\r\n  {\r\n        \"id\": \"4ac18a50f705477a9274ebbcd45147cd\",\r\n        \"timestamp\": 1538745501228,\r\n        \"datetime\": \"2018-10-05T09:18:21-04:00\",\r\n        \"lastTradeTimestamp\": 1538746540821,\r\n        \"status\": \"closed\",\r\n        \"symbol\": \"TRX\\/BTC\",\r\n        \"type\": \"limit\",\r\n        \"side\": \"sell\",\r\n        \"price\": 3.51e-6,\r\n        \"amount\": 4000,\r\n        \"cost\": 0.01404,\r\n        \"filled\": 4000,\r\n        \"remaining\": 0,\r\n        \"fee\": null,\r\n        \"info\": {\r\n            \"id\": 61045769624,\r\n            \"clientOrderId\": \"4ac18a50f705477a9274ebbcd45147cd\",\r\n            \"symbol\": \"TRXBTC\",\r\n            \"side\": \"sell\",\r\n            \"status\": \"filled\",\r\n            \"type\": \"limit\",\r\n            \"timeInForce\": \"GTC\",\r\n            \"quantity\": \"4000\",\r\n            \"price\": \"0.00000351\",\r\n            \"cumQuantity\": \"4000\",\r\n            \"createdAt\": \"2018-10-05T13:18:21.228Z\",\r\n            \"updatedAt\": \"2018-10-05T13:35:40.821Z\"\r\n        }\r\n    },\r\n    {\r\n        \"id\": \"da02f2fcd87941209c3918b76edbe7ab\",\r\n        \"timestamp\": 1538746932439,\r\n        \"datetime\": \"2018-10-05T09:42:12-04:00\",\r\n        \"lastTradeTimestamp\": 1538746932439,\r\n        \"status\": \"closed\",\r\n        \"symbol\": \"TRX\\/BTC\",\r\n        \"type\": \"limit\",\r\n        \"side\": \"buy\",\r\n        \"price\": 1.017e-5,\r\n        \"amount\": 16,\r\n        \"cost\": 0.00016272,\r\n        \"filled\": 16,\r\n        \"remaining\": 0,\r\n        \"fee\": null,\r\n        \"info\": {\r\n            \"id\": 61049797134,\r\n            \"clientOrderId\": \"da02f2fcd87941209c3918b76edbe7ab\",\r\n            \"symbol\": \"NXTBTC\",\r\n            \"side\": \"buy\",\r\n            \"status\": \"filled\",\r\n            \"type\": \"limit\",\r\n            \"timeInForce\": \"FOK\",\r\n            \"quantity\": \"16\",\r\n            \"price\": \"0.00001017\",\r\n            \"cumQuantity\": \"16\",\r\n            \"createdAt\": \"2018-10-05T13:42:12.439Z\",\r\n            \"updatedAt\": \"2018-10-05T13:42:12.439Z\"\r\n        }\r\n    },\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3957/comments",
    "author": "Showgofar",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-08T17:09:32Z",
        "body": "Hi! Which version of CCXT is it?"
      },
      {
        "user": "Showgofar",
        "created_at": "2018-10-09T12:49:20Z",
        "body": "$version = '1.17.369';\r\njust checked the same situation at\r\n$version = '1.17.375';\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-09T16:46:03Z",
        "body": "@Showgofar, basically, in my previous answer I tried to show that current version does not have the issue that you're referring to. So, at this point, I think it would be reasonable to make sure that your actual runtime version is up to date like so:\r\n\r\n```PHP\r\n$id = '\\\\ccxt\\\\hitbtc2';\r\n$exchange = new $id ();\r\nprint_r($exchange::VERSION);\r\n```\r\n\r\n↑ What does this code snippet say when you run it in your PHP?"
      },
      {
        "user": "Showgofar",
        "created_at": "2018-10-10T11:49:25Z",
        "body": "this code returns\r\n1.17.375\r\n\r\n\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-14T21:53:54Z",
        "body": "That's weird, I don't really see any of the symptoms you described above. Are you sure that the PHP environment you used for running the version snippet is the same PHP environment that does the order fetching?"
      },
      {
        "user": "Showgofar",
        "created_at": "2018-10-15T15:46:10Z",
        "body": "absolutely\r\nmore over there is no exchange specific code.\r\nExchange name is parameter \r\nthis works fine except hitbtc\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-28T10:05:14Z",
        "body": "> this works fine except hitbtc\r\n\r\nhitbtc v1 support is deprecated, we will drop it soon."
      }
    ]
  },
  {
    "number": 3953,
    "title": "Liqui fetchTickers throws error due to exceeded max URL length",
    "created_at": "2018-10-05T17:01:49Z",
    "closed_at": "2018-10-05T18:38:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3953",
    "body": "Executing the following code:\r\n\r\n```\r\nconst exchangeApi = new ccxt.liqui();\r\nawait exchangeApi.loadMarkets();\r\nconst tickers = await exchangeApi.fetchTickers();\r\n```\r\n\r\nthrows the following error:\r\n\r\n```\r\nError: liqui has 241 symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchTickers\r\n    at liqui.fetchTickers (/Users/_/git/_/node_modules/ccxt/js/liqui.js:291:23)\r\n    at process._tickCallback (internal/process/next_tick.js:68:7) constructor: [Function: ExchangeError] }\r\n```\r\n- OS: Mac OS 10.13.6\r\n- Programming Language version: Node.js v10.5.0\r\n- CCXT version: 1.17.352\r\n- Exchange: Liqui\r\n- Method: fetchTickers\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3953/comments",
    "author": "schuma7",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-05T17:05:58Z",
        "body": "> Error: liqui has 241 symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchTickers\r\n\r\nYep, this is by design, the library is telling you that it needs your attention and to workaround this issue you might want to do what the error message suggests, literally... or... which part of that message is not clear to you? %)"
      },
      {
        "user": "schuma7",
        "created_at": "2018-10-05T17:42:52Z",
        "body": "I was following the manual and that didn't specify that this method takes any parameters, so I assumed it's an internal library error.\r\n\r\nSince other methods such as loadMarkets also pull in all the information at once, I assumed that the library takes care of the data loading for fetchTickers as well. It might help to emphasise this behaviour in the manual."
      }
    ]
  },
  {
    "number": 3947,
    "title": "Bitsane - Price is required field for market orders",
    "created_at": "2018-10-04T11:36:04Z",
    "closed_at": "2019-07-02T20:24:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3947",
    "body": "OS: macOS High Sierra\r\nProgramming Language version: node 10.1.0\r\nCCXT version: 1.17.367\r\nExchange: Bitsane\r\nMethods: createOrder\r\n\r\nHi,\r\n\r\nI am using bitsane.js to insert new orders in Bitsane exchange. I was facing an issue inserting market orders, error message was \"price is a required field\".\r\n\r\nWhen I removed the if condition (pasted below) from the createOrder method in bitsane.js in ccxt code it started working, could it be an issue for this specific exchange as it does not makes too much sense to send a price for a market order?\r\n\r\n```\r\nif (type !== 'market')\r\n            order['price'] = price;\r\n```\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3947/comments",
    "author": "murcialito",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-04T12:02:18Z",
        "body": "> could it be an issue for this specific exchange as it does not makes too much sense to send a price for a market order?\r\n\r\nThat if-conditional literally says: *\"set price only if type is **not** market\"*... Not sure if I get the question..."
      },
      {
        "user": "murcialito",
        "created_at": "2018-10-04T12:04:43Z",
        "body": "Sure, but the exchange requires the field even for market orders."
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-04T12:08:09Z",
        "body": "@murcialito oh, I see... We'll fix it then... however, to fix it properly, we need your help with the following quick question: does the actual filling price for that order match the market price indeed after the settlement? In other words, which values do you use for the price of your market orders?"
      },
      {
        "user": "murcialito",
        "created_at": "2018-10-04T12:20:30Z",
        "body": "@kroitor Not every time, I calculate it from the asks in the orderbook. I have run a few tests and sometimes the final rate does not match the price set in the order creation."
      },
      {
        "user": "kroitor",
        "created_at": "2018-10-05T08:42:46Z",
        "body": "Ok, got it, thx for reporting... will see if they do support market orders at all"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-02T20:24:43Z",
        "body": "This exchange has been shutdown: #5396.\r\nClosing this for now."
      }
    ]
  },
  {
    "number": 3945,
    "title": "[Livecoin] partially filled and cancelled orders",
    "created_at": "2018-10-04T08:40:58Z",
    "closed_at": "2019-03-01T07:06:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3945",
    "body": "- OS: Windows 8\r\n- Programming Language version: php 7.1\r\n- CCXT version: 1.17.229\r\n- Exchange: Livecoin\r\n- Methods: parse_order_status\r\n\r\nJust a question about row `'PARTIALLY_FILLED_AND_CANCELLED' => 'canceled',` in method `parse_order_status`. Is it right to assume that partially filled and cancelled orders are cancelled (not closed)? Livecoin considers these orders closed and I agree with it)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3945/comments",
    "author": "giv13",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-01T07:06:01Z",
        "body": "@giv13 In CCXT an order has a `closed` status if it has been filled completely. Otherwise, it will have a status of `canceled` and `filled` >= 0 and `remaining` > 0. Let us know if that doesn't answer the question."
      }
    ]
  },
  {
    "number": 3938,
    "title": "Bibox function fetch_tickers not working correctly",
    "created_at": "2018-10-03T09:03:10Z",
    "closed_at": "2018-10-03T12:56:30Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3938",
    "body": "\r\n\r\n- OS: Windows 7\r\n- Programming Language version:  Python 3.6\r\n- CCXT version: 1.17.365\r\n- Exchange: Bibox\r\n- Method: fetch_tickers\r\n\r\nfetch_tickers function is not returning ask and bid prices and qty.  \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3938/comments",
    "author": "mkang1234",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-03T12:56:30Z",
        "body": "Some fields may be missing and this is expected according to the Manual – not all exchanges will return all fields, so we just use what's available. I guess, you should forward this question to developers of Bibox API."
      }
    ]
  },
  {
    "number": 3902,
    "title": "ccxt install fail due to lru-dict library",
    "created_at": "2018-09-25T13:21:59Z",
    "closed_at": "2018-09-25T15:56:16Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3902",
    "body": "- OS: Windows 10 64bit\r\n- Programming Language version: Python 3.6.4\r\n- CCXT version: 1.17.350\r\n- Exchange: -\r\n- Method: -\r\n\r\nHi,\r\nwhen trying to install the new ccxt version on Windows, I ran into huge problems (previous version had worked), because the new library lru-dict is built during install, which failed because the compiler cl.exe was missing. This made it necessary to install Microsoft's 5 GB large Visual Studio environment and run pip with their command prompt. Is there any possible for you to come around the lru-dict or that you have to build it during install?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3902/comments",
    "author": "MarcelBeining",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-09-25T15:56:16Z",
        "body": "> Is there any possible for you to come around the lru-dict or that you have to build it during install?\r\n\r\nIt is required by the web3 imports, so we can't cut it out easily, therefore it is required. But anyways, we'll consider adding a workaround soon. Hope this answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 3851,
    "title": "Status for a partially-filled canceled order",
    "created_at": "2018-09-15T19:49:28Z",
    "closed_at": "2018-09-15T19:53:28Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3851",
    "body": "Hi, a simple question... Which status should have an order that has been partially-filled and then canceled?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3851/comments",
    "author": "snake575",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-09-15T19:53:28Z",
        "body": "Hi! \r\n\r\n> Which status should have an order that has been partially-filled and then canceled?\r\n\r\nThe status in that case should be `canceled`, with `amount > 0`, `filled > 0`, `remaining > 0`, `filled < amount`. Let us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 3840,
    "title": "deployment error in a google / firebase cloud function",
    "created_at": "2018-09-13T12:03:17Z",
    "closed_at": "2018-09-13T12:10:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3840",
    "body": "I'm unable to use ccxt in a cloud function.  When I start locally the deployment dies if I add the line `const cctx = require('cctx');`.  The same does not happen for other dependencies such as `const uuid = require('uuid');`\r\n\r\nI've added (both) packages to my _package.json_ file, run `npm install` and I can see them both in my _node_modules_ directory.  I've tried cleaning the cache.\r\n\r\n ```\r\n \"dependencies\": {\r\n    \"ccxt\": \"^1.17.283\",\r\n    \"firebase-admin\": \"^6.0.0\",\r\n    \"firebase-functions\": \"^2.0.5\",\r\n    \"uuid\": \"^3.3.2\"\r\n  },\r\n```\r\n\r\nHere's the error:\r\n\r\n```\r\n$ firebase serve  --only functions\r\n\r\n=== Serving from '/Users/crypro/projects/CrypPro-marketdata/firebase'...\r\n\r\ni  functions: Preparing to emulate functions.\r\n⚠  functions: Failed to load functions source code. Ensure that you have the latest SDK by running npm i --save firebase-functions inside the functions directory.\r\n⚠  functions: Error from emulator. Error parsing triggers: Cannot find module 'cctx'\r\n\r\nTry running \"npm install\" in your functions directory before deploying.\r\n```\r\n\r\nI'm using:\r\n\r\n```\r\n$ node --version\r\nv6.11.5\r\n$ npm --version\r\n6.4.1\r\n$ firebase --version\r\n4.2.1\r\n```\r\n\r\nI'm guessing there's something different between the _uuid_ npm package and the _ccxt_ one, but I've no idea what.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3840/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-09-13T12:07:29Z",
        "body": "> functions: Error from emulator. Error parsing triggers: Cannot find module 'cctx'\r\n\r\n↓\r\n\r\n```JavaScript\r\nconst cctx = require('cctx');\r\n// ↑↑↑↑ cctX → ccXt ↑↑↑↑ \r\n```"
      },
      {
        "user": "npomfret",
        "created_at": "2018-09-13T12:10:38Z",
        "body": "haha - I'm an idiot.  Been looking at this for an hour."
      },
      {
        "user": "npomfret",
        "created_at": "2018-09-13T12:13:04Z",
        "body": "... as s side question, i get another error from firebase which looks like a javascript versioning issue.  Is the following syntax for a very modern version of javascript:\r\n\r\n```\r\nfirebase/functions/node_modules/ccxt/js/base/Exchange.js:438\r\n                    let partial = async params => this[methodName] (path, type, uppercaseMethod, params || {})\r\n                                        ^^^^^^\r\n\r\nSyntaxError: Unexpected identifier\r\n\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2018-09-13T12:16:31Z",
        "body": "@npomfret the async syntax won't work with Node version < 7, unfortunately. Version 6 is too old. I suggest updating it, if possible."
      },
      {
        "user": "npomfret",
        "created_at": "2018-09-13T12:17:40Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 3759,
    "title": "Exmo partial fill is considered as full fill.",
    "created_at": "2018-08-29T06:33:55Z",
    "closed_at": "2018-08-29T11:00:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3759",
    "body": "When calling fetch order on Exmo on a partially filled order, CCXT seems to be tricked. It thinks the order is fully filled.\r\n\r\nOrder was a limit on 0.5 BTC.\r\n\r\n```\r\n{'id': '1139757129', 'datetime': '2018-08-24T17:13:24.000Z', 'timestamp': 1535130804000, 'lastTradeTimestamp': None, 'status': 'closed', 'symbol': 'BTC/USD', 'type': 'limit', 'side': 'sell', 'price': 6630.999999737207, 'cost': 252.32738738, 'amount': 0.03805269, 'filled': 0.03805269, 'remaining': 0.0, 'trades': [{'id': '67768715', 'info': {'trade_id': 67768715, 'date': 1535130804, 'type': 'sell', 'pair': 'BTC_USD', 'order_id': 1139757129, 'quantity': '0.03805269', 'price': '6630.99999999', 'amount': '252.32738738'}, 'timestamp': 1535130804000, 'datetime': '2018-08-24T17:13:24.000Z', 'symbol': 'BTC/USD', 'order': '1139757129', 'type': None, 'side': 'sell', 'price': 6630.99999999, 'amount': 0.03805269, 'cost': 252.32738738}], 'fee': {'cost': 0.0, 'currency': 'USD'}, 'info': {'type': 'sell', 'in_currency': 'USD', 'in_amount': '252.32738738', 'out_currency': 'BTC', 'out_amount': '0.03805269', 'trades': [{'trade_id': 67768715, 'date': 1535130804, 'type': 'sell', 'pair': 'BTC_USD', 'order_id': 1139757129, 'quantity': '0.03805269', 'price': '6630.99999999', 'amount': '252.32738738'}]}}\r\n```\r\n\r\nResponse for fetch order on exmo seems to be a long list rather than a single order. So it might actually explain why.\r\n\r\n\r\n\r\n- OS: Linux\r\n- CCXT version: 1.17.174 (very recent one given the fact that no code was updated for the past 2 months on EXMO).\r\n- Exchange: exmo\r\n- Method: fetch_order\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3759/comments",
    "author": "philipperemy",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-29T10:41:02Z",
        "body": "@philipperemy it looks like an order with one filling trade to me:\r\n\r\n```\r\n{'amount': 0.03805269,   # ←------------------------------- ordered amount\r\n 'cost': 252.32738738,\r\n 'datetime': '2018-08-24T17:13:24.000Z',\r\n 'fee': {'cost': 0.0, 'currency': 'USD'},\r\n 'filled': 0.03805269,   # ←------------------------------- filled amount\r\n 'id': '1139757129',\r\n 'info': {'in_amount': '252.32738738',\r\n          'in_currency': 'USD',\r\n          'out_amount': '0.03805269',\r\n          'out_currency': 'BTC',\r\n          'trades': [{'amount': '252.32738738',\r\n                      'date': 1535130804,\r\n                      'order_id': 1139757129,\r\n                      'pair': 'BTC_USD',\r\n                      'price': '6630.99999999',\r\n                      'quantity': '0.03805269',\r\n                      'trade_id': 67768715,\r\n                      'type': 'sell'}],\r\n          'type': 'sell'},\r\n 'lastTradeTimestamp': None,\r\n 'price': 6630.999999737207,\r\n 'remaining': 0.0,\r\n 'side': 'sell',\r\n 'status': 'closed',\r\n 'symbol': 'BTC/USD',\r\n 'timestamp': 1535130804000,\r\n 'trades': [{'amount': 0.03805269, # ←------------------------------- filled amount\r\n             'cost': 252.32738738,\r\n             'datetime': '2018-08-24T17:13:24.000Z',\r\n             'id': '67768715',\r\n             'info': {'amount': '252.32738738',\r\n                      'date': 1535130804,\r\n                      'order_id': 1139757129,\r\n                      'pair': 'BTC_USD',\r\n                      'price': '6630.99999999',\r\n                      'quantity': '0.03805269',\r\n                      'trade_id': 67768715,\r\n                      'type': 'sell'},\r\n             'order': '1139757129',\r\n             'price': 6630.99999999,\r\n             'side': 'sell',\r\n             'symbol': 'BTC/USD',\r\n             'timestamp': 1535130804000,\r\n             'type': None}],\r\n 'type': 'limit'}\r\n>>>\r\n```\r\n\r\n↑ The ordered amount is completely filled with that trade. How do you tell it's still open?"
      },
      {
        "user": "philipperemy",
        "created_at": "2018-08-29T11:00:57Z",
        "body": "@kroitor Hum, ok then it's my mistake. Thanks :)"
      }
    ]
  },
  {
    "number": 3746,
    "title": "bitflyer markets are missing baseId and quoteId fields",
    "created_at": "2018-08-27T09:50:00Z",
    "closed_at": "2018-08-27T22:44:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3746",
    "body": "For example:\r\n\r\n```\r\n\"BCH/BTC\": {\r\n    \"precision\": {\r\n      \"price\": 8,\r\n      \"amount\": 8,\r\n      \"cost\": 8\r\n    },\r\n    \"taker\": 0.0025,\r\n    \"maker\": 0.0025,\r\n    \"id\": \"BCH_BTC\",\r\n    \"symbol\": \"BCH/BTC\",\r\n    \"base\": \"BCH\",\r\n    \"quote\": \"BTC\",\r\n    \"type\": \"spot\",\r\n    \"spot\": true,\r\n    \"future\": false,\r\n    \"info\": {\r\n      \"product_code\": \"BCH_BTC\"\r\n    }\r\n  }\r\n```\r\n\r\n\r\n\r\n[EDIT] ... I now see that they are missing missing from most implementations.  Is that expected?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3746/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-27T22:44:32Z",
        "body": ">  I now see that they are missing missing from most implementations. Is that expected?\r\n\r\nMostly, yes, because we've started adding baseId and quoteId not very long ago. You should not rely on the fields that aren't documented in the Manual, really. We hope to add them throughout the entire library, everywhere, if possible. Added them to bitflyer as well. Let us know if that does not answer the question."
      },
      {
        "user": "npomfret",
        "created_at": "2018-08-28T09:47:38Z",
        "body": "Thank you"
      }
    ]
  },
  {
    "number": 3737,
    "title": "Newer versions of ccxt on x86",
    "created_at": "2018-08-25T18:24:53Z",
    "closed_at": "2019-03-02T13:52:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3737",
    "body": "Hello.\r\n\r\nI have been having troubles recently running newer versions of ccxt on a x86 (win 7) machine.\r\nUsing a JS version, running node.js\r\n\r\nWhat could be the case here? Maybe ccxt uses a newer version of node, which is not supported on x86 architecture anymore? \r\n\r\nIs there a way I still can run ccxt on x86?\r\n\r\nThanks in advance.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3737/comments",
    "author": "Cleric334",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-02T13:52:21Z",
        "body": "> Is there a way I still can run ccxt on x86?\r\n\r\nUnfortunately, not at this time, because the timestamp/nonce is in milliseconds in most cases. A milliseconds timestamp doesn't fit in 32 bits."
      }
    ]
  },
  {
    "number": 3693,
    "title": "question about symbol mapping",
    "created_at": "2018-08-20T15:40:52Z",
    "closed_at": "2018-08-21T07:41:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3693",
    "body": "As I understand it we are using coinmarketcap as  arbiter for sorting out which coin owns which 3/4 letter symbol.  The one with the highest market cap wins, the other uses its name as its symbol.\r\n\r\nMy concern is that a coin that is competing for a symbol with another, may at some point rise up the coinmarketcap ranks forcing the ccxt code to swap symbols around.  Worse still, if they have a similar rank, but go up and down slightly the symbols assigned to the currencies might repeatedly reverse.\r\n\r\nWould using coin names ('e' Bitcoin instead of BTC) not be a more stable solution?  I know coins have been known to change names, so this isn't a perfect solution either.  But it's rare. \r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3693/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-21T07:41:19Z",
        "body": "> As I understand it we are using coinmarketcap as arbiter for sorting out which coin owns which 3/4 letter symbol. The one with the highest market cap wins, the other uses its name as its symbol.\r\n\r\nRight.\r\n\r\n> My concern is that a coin that is competing for a symbol with another, may at some point rise up the coinmarketcap ranks forcing the ccxt code to swap symbols around. \r\n\r\nWe have had a couple of these issues earlier. However, this is still a pretty rare occasion when two coins have the same token and the market cap switch takes place (effectively making one of the CMC tokens overtake the unified symbol).\r\n\r\n> Worse still, if they have a similar rank, but go up and down slightly the symbols assigned to the currencies might repeatedly reverse.\r\n\r\nNever had this before with duplicate symbols. The situation is still possible, theoretically. But, practically, it rarely occurs, if ever. We haven't seen this (yet).\r\n\r\n> Would using coin names ('e' Bitcoin instead of BTC) not be a more stable solution? I know coins have been known to change names, so this isn't a perfect solution either. But it's rare.\r\n\r\nWe've seen them renaming XRB←→NANO, DRK←→DASH, BCC←→BCH, but yeah, this is quite rare. The chances for a renaming are approximately the same as with dupe-symbols overtaking the marketcap, I think. Yet still, I also think switching symbols from 3/4 codes to token names would add to confusion among traders and would make maintaining and debugging much harder – you'll have to map them back-and-forth, which is hard when your codenaming system differs from the rest of the world.\r\n\r\nLet me know if this does not answer your question!\r\n\r\n"
      },
      {
        "user": "npomfret",
        "created_at": "2018-08-21T07:51:58Z",
        "body": "Thanks @kroitor"
      }
    ]
  },
  {
    "number": 3675,
    "title": "Binance get all order history",
    "created_at": "2018-08-17T18:17:54Z",
    "closed_at": "2018-08-18T10:05:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3675",
    "body": "- OS: Windows 10\r\n- Programming Language version: PHP 7.1.11\r\n- CCXT version: 1.13.78\r\n- Exchange: Binance\r\n\r\nHi, first of all, thanks for this wonderful repo!\r\n\r\nThough I am wondering whats the best way to get all my recent orders, or all my previous orders using ccxt.\r\n\r\nI tried using fetch_closed_orders and fetch_my_trades, but both only work if the symbol specified. Is there any method similiar as fetch_open_orders which require no symbol for this?\r\n\r\nBest Regards",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3675/comments",
    "author": "ilman",
    "comments": [
      {
        "user": "alvaroyanes",
        "created_at": "2018-08-17T20:34:02Z",
        "body": "Hi ilman!\r\n\r\nYou can try: \r\n\r\n`exchange.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false;`\r\n\r\nThen will be possible to call  `fetchOpenOrders` without specifying the symbol."
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-18T10:05:26Z",
        "body": "> Is there any method similiar as fetch_open_orders which require no symbol for this?\r\n\r\nNo. Half of the exchanges will require a symbol for those calls. You will have to remember which orders you have placed, and then you have to check those particular symbols for updates in the orders with `fetch`-methods. In other words, you will have to fetch them one-by-one for all symbols of your interest, therefore you will either fetch the data for all binance symbols sequentially, or filter all markets  and fetch only the data for the filtered ones (according to your own filtering rules).\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 3637,
    "title": "Bitfinex wallet transfer needs to pass Decimal",
    "created_at": "2018-08-12T23:19:28Z",
    "closed_at": "2018-08-12T23:33:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3637",
    "body": "- OS: Mac\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.13.2\r\n- Exchange: bitfinex\r\n- Method: privatePostTransfer\r\n\r\nWhen i try to transfer from exchange to margin, which is 'trading' wallet, I have to pass in the Json: `client.privatePostTransfer({'amount': '.01','currency': 'btc', 'walletfrom': 'exchange', 'walletto': 'trading'})`\r\n\r\nbut the endpoint only takes Decimal objects, which I can't pass through in the json, for the amount as given by this error:\r\n\r\n\r\n`ccxt.base.errors.InvalidOrder: bitfinex {\"message\":\"Key amount should be a decimal number, e.g. \\\"123.456\\\"\"}`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3637/comments",
    "author": "lelly8484",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-12T23:28:26Z",
        "body": "@lellywang have you tried `'amount': '0.01'` instead of `'.01'` ?"
      },
      {
        "user": "lelly8484",
        "created_at": "2018-08-12T23:30:27Z",
        "body": "Oh that fixed it, thank you, now I'm getting \r\n\r\n`[{'status': 'error', 'message': 'BTC cannot be used for Margin Trading. Transfer to Margin wallet not possible.'}]`\r\n\r\nbut I'm assuming that's some kind of issue on bitfinex end, let me know please if you've seen this before"
      },
      {
        "user": "lelly8484",
        "created_at": "2018-08-12T23:33:10Z",
        "body": "I solved it by using capitalized form 'BTC' instead of 'btc'! if anyone is looking around"
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-12T23:35:10Z",
        "body": "@lellywang thx for reporting back!"
      }
    ]
  },
  {
    "number": 3623,
    "title": "Duplicate information returned by fetch_markets() ",
    "created_at": "2018-08-11T10:06:37Z",
    "closed_at": "2018-08-11T11:38:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3623",
    "body": "I notice duplicate informations in the object returned by `fetch_markets()`, for example the fees here at BitMEX. What is the reason for this and which one should I use ? same on all exchanges I've checked.\r\n\r\n```\r\n'id': 'LTCU18',\r\n   'symbol': 'LTCU18',\r\n   'base': 'LTC',\r\n   ...\r\n   'taker': 0.0025,        <------ taker fee here\r\n   'maker': -0.0005,\r\n   'type': 'future',\r\n   'spot': False,\r\n   'swap': False,\r\n   'future': True,\r\n   'prediction': False,\r\n   'info': {'symbol': 'LTCU18',\r\n    'rootSymbol': 'LTC',\r\n    ...\r\n    'deleverage': True,\r\n    'makerFee': -0.0005,\r\n    'takerFee': 0.0025,        <------ taker fee here\r\n    'settlementFee': 0,\r\n    ...\r\n    'settledPrice': None,\r\n    'timestamp': '2018-08-10T23:59:45.000Z'}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3623/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "npomfret",
        "created_at": "2018-08-11T10:22:28Z",
        "body": "I believe this is intentional.  The `info` section appears to be the raw / unparsed data from the exchange.  Useful to have sometimes, not in others.  You could just disregard or delete it if you don't want it."
      },
      {
        "user": "Kinzowa",
        "created_at": "2018-08-11T11:38:51Z",
        "body": "Thanks @npomfret \r\n\r\n"
      }
    ]
  },
  {
    "number": 3616,
    "title": "Retrieve response headers",
    "created_at": "2018-08-10T10:00:06Z",
    "closed_at": "2018-08-10T16:45:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3616",
    "body": "Is it possible to retrieve the response headers on both good and false api calls you make for Bitmex?\r\n\r\n```\r\n{\r\n  \"date\": \"Fri, 10 Aug 2018 09:54:59 GMT\",\r\n  \"content-encoding\": \"gzip\",\r\n  \"x-powered-by\": \"Profit\",\r\n  \"etag\": \"W/\\\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\\\"\",\r\n  \"x-ratelimit-remaining\": \"149\",\r\n  \"content-type\": \"application/json; charset=utf-8\",\r\n  \"status\": \"200\",\r\n  \"x-ratelimit-reset\": \"1533894900\",\r\n  \"x-ratelimit-limit\": \"150\",\r\n  \"strict-transport-security\": \"max-age=31536000; includeSubDomains\"\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3616/comments",
    "author": "p0ntsNL",
    "comments": [
      {
        "user": "creslinux",
        "created_at": "2018-08-10T14:46:02Z",
        "body": "I think the response headers are available for the last request in your exchange object. \r\n\r\nTake a look in, if named your object exchange object `ccxt`: \r\n`ccxt.last_response_headers._store`"
      },
      {
        "user": "p0ntsNL",
        "created_at": "2018-08-10T16:45:09Z",
        "body": "Thank you Thank you!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-10T17:45:14Z",
        "body": "@creslinux thx so much for your help! )"
      }
    ]
  },
  {
    "number": 3614,
    "title": "fetchOrderHistory fail on symbol='' ; used to work",
    "created_at": "2018-08-10T07:06:56Z",
    "closed_at": "2018-08-10T17:48:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3614",
    "body": "Hi!\r\n\r\nIm not sure if this is a defect, its a change in behaviour.\r\n\r\nAgainst sandbox api on GDAX the following used to work to fetch all OpenOrders\r\n`all_open_orders = exchange.fetchOpenOrders(symbol='', since=\"\", limit=\"\", params={})`\r\n\r\nNow the following error is returned. \r\n`ccxt/base/exchange.py\", line 312, in raise_error\r\n    raise exception_type(output)\r\nccxt.base.errors.ExchangeError: gdax No market symbol`\r\n\r\nRequesting without symbol passed empty works as prior behaviour \r\n`all_open_orders = exchange.fetchOpenOrders(since=\"\", limit=\"\", params={})`\r\n\r\n- OS: Ubuntu 18:04\r\n- Programming Language version: 3.6 Python\r\n- CCXT version: 1.17.85\r\n- Exchange: gdax sandbox\r\n- Method: fetchOpenOrders\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3614/comments",
    "author": "creslinux",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-10T17:48:07Z",
        "body": "@creslinux we don't accept empty strings in the args anywhere, so, if you want to pass an empty symbol, it should be None: `exchange.fetchOpenOrders(symbol=None, since=None, limit=None, params={})`. You're right, it did work with some exchanges earlier, but the fact that it used to work with an empty string is more like a bug. It should not accept empty strings, really. None-values are used to indicate the absence of the value instead. With an empty string the behavior is undefined for now.\r\n\r\nLet us know if it does not answer the question. Thx!)"
      }
    ]
  },
  {
    "number": 3573,
    "title": "Bitmex fetch_ohlcv return only old data from 2015",
    "created_at": "2018-08-06T12:11:33Z",
    "closed_at": "2018-08-06T12:23:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3573",
    "body": "- OS: Mac OS\r\n- Programming Language version: php 7.2\r\n- CCXT version: 1.14.62\r\n- Exchange: Bitmex\r\n- Method: fetch_ohlcv\r\n\r\n\r\nHi! I try get OHLC data from Bitmex with since = null and get always old data, between September 25, 2015, September 29, 2015. If I try use since, I don't receive any data or segment between September 25, 2015, September 29, 2015\r\n\r\n`require_once \"vendor/autoload.php\";`\r\n`$exchange  = new \\ccxt\\bitmex  (array ('apiKey' => 'xxx','secret'=>'yyy'));`\r\n`$limit = 100;`\r\n`$since = $exchange->milliseconds()-$limit*60*1000;`\r\n`$symbol = 'BTC/USD';`\r\n`$timeframe = '1h';`\r\n`$params = array('partial'=> False);`\r\n`$ohlcv = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);`\r\n`print_r($ohlcv);`\r\n\r\nEmpty date!\r\n\r\nif calculate $since like\r\n`$since = microtime()-1000*60*60*24;`\r\nreceive segment between September 25, 2015, September 29, 2015 \r\n\r\n`{`\r\n`     0: {`\r\n`          0: \"2015-09-25T13:00:00.000Z\",`\r\n`          1: \"239.99\",`\r\n`          2: \"239.99\",`\r\n`          3: \"237.36\",`\r\n`          4: \"237.45\",`\r\n`          5: \"11501\"`\r\n`     },`\r\n`     1: {`\r\n`          0: \"2015-09-25T14:00:00.000Z\",`\r\n`          1: \"237.45\",`\r\n`          2: \"237.05\",`\r\n`          3: \"236.08\",`\r\n`          4: \"236.08\",`\r\n`          5: \"22625\"`\r\n`     },`\r\n`     2: {`\r\n`          0: \"2015-09-25T15:00:00.000Z\",`\r\n`          1: \"236.08\",`\r\n`          2: \"236.52\",`\r\n`          3: \"236.1\",`\r\n`          4: \"236.34\",`\r\n`          5: \"17434\"`\r\n`     },`\r\n`     3: {`\r\n`          0: \"2015-09-25T16:00:00.000Z\",`\r\n`          1: \"236.34\",`\r\n`          2: \"236.13\",`\r\n`          3: \"235.44\",`\r\n`          4: \"235.71\",`\r\n`          5: \"26900\"`\r\n`     }`\r\n`...`\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3573/comments",
    "author": "lliypuk",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-06T12:23:09Z",
        "body": "You're not calculating your $since value correctly. It has to be in **milliseconds** in UTC.\r\n\r\n```PHP\r\n$since = $exchange->milliseconds()-$limit*60*1000;  // why only 60 seconds (60000 milliseconds) here?\r\n```\r\n\r\n↑ You're fetching 1h candles starting from 60 seconds (1 minute) ago? One hour has not passed yet since last 60 seconds, so it will reply with zero hourly-candles (an empty array).\r\n\r\nThis is not a correct way of calculating the since argument, either, because it will use microseconds instead of milliseconds:\r\n\r\n```PHP\r\n$since = microtime()-1000*60*60*24;  // why microtime here?\r\n```\r\n\r\nCorrect ways of setting the since are shown below:\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -a\r\nInteractive shell\r\nphp > include_once ('./ccxt.php')\r\nphp > ;\r\nphp > date_default_timezone_set ('UTC');\r\nphp > $id = '\\\\ccxt\\\\bitmex';\r\nphp > $exchange = new $id ();\r\nphp > $limit = 100;\r\nphp > $hour_duration_in_milliseconds = 60 * 60 * 1000; // not 60 * 1000, but 60 * 60 * 1000 !\r\nphp > $since = $exchange->milliseconds () - $limit * $hour_duration_in_milliseconds;\r\nphp > $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h', $since);\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2018-08-02T09:00:00.000Z\r\n```\r\n\r\n↑ 100 hours ago, exactly.\r\n\r\nIf you omit the `$since` argument, it will output 100 candles from the beginning of their trading that was in 2015...\r\n\r\n```PHP\r\nphp > $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h');\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2015-09-25T12:00:00.000Z\r\nphp >\r\n```\r\n\r\nIn other words, you should pay more attention to you basic milliseconds-arithmetics.\r\n\r\nHope this answers your question. Let us know if not."
      },
      {
        "user": "lliypuk",
        "created_at": "2018-08-06T13:03:20Z",
        "body": "Thanks for your answer, you are right, I took mistake with calculate milliseconds in hour. Now I use this code: \r\n`$exchange = new \\ccxt\\bitmex (array ('apiKey' => 'xxx','secret'=>'yyy'));`\r\n` $limit = 100;`\r\n` $hour_duration_in_milliseconds = 60 * 60 * 1000; `\r\n` $since = $exchange->milliseconds () - $limit * $hour_duration_in_milliseconds;`\r\n` $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h', $since);`\r\n `var_dump($ohlcvs);`\r\n\r\nand it is always empty too. I don't understand what do wrong"
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-06T13:10:24Z",
        "body": "@lliypuk try this:\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -a\r\nInteractive shell\r\n\r\nphp > date_default_timezone_set ('UTC');  // ←-------------- required, as documented in the Manual!\r\nphp > include_once ('./ccxt.php');\r\nphp > $id = '\\\\ccxt\\\\bitmex';\r\nphp > $exchange = new $id ();\r\nphp > $since = $exchange->milliseconds() - 100 * 60 * 60 * 1000; // 100 hours\r\nphp > $ohlcvs = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2018-08-02T10:00:00.000Z\r\nphp >\r\n```\r\n\r\n↑ Do you get a different result with that code?"
      },
      {
        "user": "lliypuk",
        "created_at": "2018-08-06T14:06:48Z",
        "body": "It is really strange, but yes. This is my code:\r\n\r\n`date_default_timezone_set ('UTC'); `\r\n`include_once ('/vendor/ccxt/ccxt.php');`\r\n`$id = '\\\\ccxt\\\\bitmex';`\r\n`$exchange = new $id ();`\r\n`$since = $exchange->milliseconds() - 100 * 60 * 60 * 1000;`\r\n`$ohlcvs = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);`\r\n`var_dump($ohlcvs);`\r\n`echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\";`\r\n\r\nand var_dump is `array(0) { }`\r\n... Any ideas? "
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-06T14:11:45Z",
        "body": "@lliypuk ok then, let's try updating to the most recent version of CCXT first. Is it still empty with 1.17.83?"
      },
      {
        "user": "lliypuk",
        "created_at": "2018-08-06T14:15:54Z",
        "body": "Oh, sorry, before created issues, I try change class bitmex for experiment and forgot about it. Now, I changed it back and  fetch_ohlcv work good! Sorry, for spend your time and thanks for your help!"
      }
    ]
  },
  {
    "number": 3524,
    "title": "Yobit is creating Liqui",
    "created_at": "2018-07-30T15:32:01Z",
    "closed_at": "2018-07-30T19:33:26Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3524",
    "body": "- OS: Linux\r\n- Programming Language version: PHP\r\n- CCXT version: Latest\r\n\r\n\r\n```\r\n$exchange = new \\ccxt\\yobit (array (\r\n\t\t    'apiKey' => $this->getExchangeInfo(\"Yobit\",\"API\"),\r\n\t\t    'secret' => $this->getExchangeInfo(\"Yobit\",\"Secret\")\r\n\t\t));\r\n\r\n\t\t$orders = json_encode($exchange->fetchBalance());\r\n```\r\n\r\nIt returns the following:\r\n\r\n[30-Jul-2018 18:31:44 Europe/Kiev] PHP Fatal error:  Uncaught ccxt\\AuthenticationError: yobit requires `apiKey` in /home/of/public_html/ccxt-master/php/Exchange.php:645\r\nStack trace:\r\n#0 /home/of/public_html/ccxt-master/php/**liqui**.php(661): ccxt\\Exchange->check_required_credentials()\r\n#1 /home/of/public_html/ccxt-master/php/Exchange.php(916): ccxt\\liqui->sign('getInfo', 'private', 'POST', Array, NULL, NULL)\r\n#2 /home/of/public_html/ccxt-master/php/Exchange.php(921): ccxt\\Exchange->fetch2('getInfo', 'private', 'POST', Array, NULL, NULL)\r\n#3 [internal function]: ccxt\\Exchange->request('getInfo', 'private', 'POST', Array)\r\n#4 /home/of/public_html/ccxt-master/php/Exchange.php(846): call_user_func(Array, 'getInfo', 'private', 'POST', Array)\r\n#5 [internal function]: ccxt\\Exchange->ccxt\\{closure}()\r\n#6 /home/of/public_html/ccxt-master/php/Exchange.php(1923): call_user_func_array(Object(Closure), Array)\r\n#7 /home/of/public_html/ccxt-master/php/yobit.php(155): ccxt\\Exchange->__call('privatePostGetI...', Array)\r\n in /home/of/public_html/ccxt-master/php/Exchange.php on line 645",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3524/comments",
    "author": "presence35",
    "comments": [
      {
        "user": "presence35",
        "created_at": "2018-07-30T15:39:39Z",
        "body": "I should have been calling my own exchange name as\r\n\r\ngetExchangeInfo(\"YoBit\",\"API\")  (capital B)\r\n\r\nBut that still doesn't explain why CCXT wanted to default to liqui."
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-30T19:33:25Z",
        "body": "@presence35 it is not defaulting to Liqui. They both use the ex BTC-e clone API, thus in the code of CCXT, Yobit is a class derived from Liqui class. The class inheritance is one of the basic fundamental concepts of OOP. You should learn about it in order to use this library efficiently. Hope this answers you question."
      }
    ]
  },
  {
    "number": 3503,
    "title": "Do trades (if allowed) always contain an unique identifier?",
    "created_at": "2018-07-27T05:56:52Z",
    "closed_at": "2018-07-27T06:17:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3503",
    "body": "- Programming Language version: NodeJS\r\n- CCXT version: 1.14.43\r\n- Method: fetchMyTrades\r\n\r\nI'd like to know if the trade object from `fetchMyTrades` result array, always contain an unique `id` for all exchanges that support this function?\r\n\r\nFor example, the **Kraken** api documentation does not specify that it returns a trade `id`, only the order `id` it is associated with.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3503/comments",
    "author": "vladikus10",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-27T06:17:21Z",
        "body": "> I'd like to know if the trade object from fetchMyTrades result array, always contain an unique id for all exchanges that support this function?\r\n\r\nIf the exchange does provide it – CCXT should return it. It's that simple. Have you tried actually fetching your trades with CCXT? Because if you did, you would quickly see the structure of a trade returned by Kraken yourself.\r\n\r\n```JavaScript\r\n'use strict';\r\nconst ccxt = require ('ccxt')\r\n;(async () => {\r\n    const kraken = new ccxt.kraken ({\r\n        apiKey: 'YOUR_API_KEY',\r\n        secret: 'YOUR_SECRET',\r\n    })\r\n    const myTrades = await kraken.fetchMyTrades ()\r\n    console.log (myTrades[0]) // output one trade\r\n}) ()\r\n```\r\n\r\n```\r\n{        id:   \"4CDPZZ-86BSY-TJHW5R\",                   // ←------------------- \r\n      order:   \"KL2LRX-Z7SRS-XX3G3H\",                                         |\r\n       info: { ordertxid: \"KL2LRX-Z7SRS-XX3G3H\",                              |\r\n                 postxid: \"TKH2SE-M7IF5-CFI7LT\",                              |\r\n                    pair: \"XETHXXBT\",                                         |\r\n                    time:  1599999992.3554,                                   |\r\n                    type: \"sell\",                                             |\r\n               ordertype: \"limit\",                                            |\r\n                   price: \"0.058032\",                                         |\r\n                    cost: \"0.002203\",                                         |\r\n                     fee: \"0.000004\",                                         |\r\n                     vol: \"0.03796200\",                                       |\r\n                  margin: \"0.000000\",                                         |\r\n                    misc: \"\",                                                 |\r\n                      id: \"4CDPZZ-86BSY-TJHW5R\"  },   // ←----------------- hello\r\n  timestamp:    1599999992355,\r\n   datetime:   \"2018-01-01T00:00:00.355Z\",\r\n     symbol:   \"ETH/BTC\",\r\n       type:   \"limit\",\r\n       side:   \"sell\",\r\n      price:    0.057032,\r\n     amount:    0.034962,\r\n       cost:    0.0022030107840000004,\r\n        fee: { cost: 0.000004, currency: \"BTC\" }    }\r\n```\r\n\r\n> For example, the Kraken api documentation does not specify that it returns a trade id, only the order id it is associated with.\r\n\r\nLOL. Welcome to CCXT world ) Let us know if the above doesn't answer your question )"
      }
    ]
  },
  {
    "number": 3492,
    "title": "Storing API secret",
    "created_at": "2018-07-25T16:52:34Z",
    "closed_at": "2018-07-26T00:32:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3492",
    "body": "Hello,\r\n\r\nIs there a convenient way to store an API key/secret on a forked repository?  I want to keep a file with all of my keys/secrets in the same repo so my first idea was to include the file in the primary .gitignore.  However, my concern is that if I keep my fork in sync with this repo, changes I made in .gitignore will be overwritten every time I sync, unhiding my key/secret file.\r\n\r\nSincerely,\r\nCarter",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3492/comments",
    "author": "pegahcarter",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-07-25T18:53:39Z",
        "body": "`keys.local.json` is in .gitignore already.\r\n\r\nAdditionally, if you make it a symbolic link then you're pretty safe even in case it gets removed from .gitignore and you accidentally commit it."
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-26T00:32:08Z",
        "body": "Thx, @mkutny for the correct answer!\r\n\r\n@cartercarlson let us know if the above does not help! Feel free to reopen it if needed or just ask further questions, if you have more )"
      }
    ]
  },
  {
    "number": 3479,
    "title": "`cost_to_precision()` uses `markets[symbol]['precision']['price']`?",
    "created_at": "2018-07-24T16:57:01Z",
    "closed_at": "2018-07-24T17:00:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3479",
    "body": "Is this a typo on line 903 of `ccxt/python/ccxt/base/exchange.py`?\r\n\r\n```\r\n    def cost_to_precision(self, symbol, cost):\r\n        return ('{:.' + str(self.markets[symbol]['precision']['price']) + 'f}').format(float(cost))\r\n\r\n```\r\nI would have expected it to be:\r\n\r\n```\r\n    def cost_to_precision(self, symbol, cost):\r\n        return ('{:.' + str(self.markets[symbol]['precision']['cost']) + 'f}').format(float(cost))\r\n```\r\n\r\nThis is a genuine question. I could imagine scenarios where it could be intentional.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3479/comments",
    "author": "mkoistinen",
    "comments": [
      {
        "user": "mkoistinen",
        "created_at": "2018-07-24T16:57:57Z",
        "body": "```\r\n    costToPrecision (symbol, cost) {\r\n        return parseFloat (cost).toFixed (this.markets[symbol].precision.price)\r\n    }\r\n```\r\nSame in the JS version (not surprisingly)"
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-24T16:58:26Z",
        "body": "No it's not a typo, because exchanges will very rarely provide cost precision. Think logically, cost is `amount * price` that is the same units as price (represented in the same currency, therefore  both `cost` and `price` have that currency's precision)."
      },
      {
        "user": "mkoistinen",
        "created_at": "2018-07-24T17:00:30Z",
        "body": "OK. Thanks."
      }
    ]
  },
  {
    "number": 3461,
    "title": "'timestamp' in parse_orders should be descending",
    "created_at": "2018-07-22T15:25:53Z",
    "closed_at": "2018-07-22T19:41:38Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3461",
    "body": "in exchange.py\r\n\r\n    def parse_orders(self, orders, market=None, since=None, limit=None):\r\n        array = self.to_array(orders)\r\n        array = [self.parse_order(order, market) for order in array]\r\n        **array = self.sort_by(array, 'timestamp')**\r\n        symbol = market['symbol'] if market else None\r\n        return self.filter_by_symbol_since_limit(array, symbol, since, limit)\r\n\r\nthe array is better  descending sort by timestamp\r\n\r\nbecause if you use 'limit' params to fetch_closed_orders, the order of orders will be chaos\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3461/comments",
    "author": "ouyangtianzuo",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-22T19:41:38Z",
        "body": "Sorry, but we don't agree. The logic behind it is to fetch `limit` rows starting from `since` timestamp into the future (not backwards into the past). Earlier, to satisfy numerous requests from users, we've switched from what you proposed to ascending sorting order in all methods returning trades, orders, candles and other arrays. Hope this answers your question. Let us know if not."
      }
    ]
  },
  {
    "number": 3457,
    "title": "Huobi Pro BAT invalid amount",
    "created_at": "2018-07-22T07:37:11Z",
    "closed_at": "2018-07-22T07:48:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3457",
    "body": "- OS: Mac OSX\r\n- Programming Language version: Python 3\r\n- CCXT version: 1.16.85\r\n- Exchange: Huobi Pro\r\n- Method: createMarketOrder\r\n\r\nHi, I was trying to use Huobi Pro to make a market order for symbol 'BAT/BTC'. I turned off the 'createMarketBuyOrderRequiresPrice' option and tried to buy 10 BAT using BTC. However, the function gives an error saying my amount is invalid. \r\n\r\nI then checked the market info, I noticed that for Huobi Pro's market, symbol 'BAT/BTC', the limit amount is incorrect:\r\n\r\n'limits': {'amount': {'max': 1.0, 'min': 1.0}\r\n\r\nI believe the amount limit prevents any order from happening... Please help me check. \r\n\r\nI was trying to make an order like this:\r\nhuobi.create_market_buy_order('BAT/BTC', 10 * market_price)\r\n\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3457/comments",
    "author": "zn8ae",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-22T07:48:11Z",
        "body": "@zn8ae use `.fetchTradingLimits ()` and `.loadTradingLimits ()` before accessing the limit values and before placing the orders:\r\n\r\n```JavaScript\r\nmbp:ccxt igorkroitor$ node examples/js/cli huobipro fetchTradingLimits '[\"BAT/BTC\"]'\r\nhuobipro.fetchTradingLimits (BAT/BTC)\r\n{ limits: { 'BAT/BTC': { amount: { min: 1, max: 5000000 } } },\r\n    info: { 'BAT/BTC': { status:   \"ok\",\r\n                           data: {                                  symbol: \"batbtc\",\r\n                                                'buy-limit-must-less-than':  1.1,\r\n                                            'sell-limit-must-greater-than':  0.9,\r\n                                           'limit-order-must-greater-than':  1,\r\n                                              'limit-order-must-less-than':  5000000,\r\n                                      'market-buy-order-must-greater-than':  0.0001,\r\n                                         'market-buy-order-must-less-than':  100,\r\n                                     'market-sell-order-must-greater-than':  1,\r\n                                        'market-sell-order-must-less-than':  500000,\r\n                                         'circuit-break-when-greater-than':  10000,\r\n                                            'circuit-break-when-less-than':  10,\r\n                                   'market-sell-order-rate-must-less-than':  0.1,\r\n                                    'market-buy-order-rate-must-less-than':  0.1      } } } }\r\n```\r\n\r\n```Python\r\nfrom pprint import pprint\r\nsymbols = [\r\n    'BAT/BTC',\r\n    # ...\r\n]\r\nexchange.load_trading_limits (symbols)\r\npprint(exchange.markets['BAT/BTC']['limits'])\r\n```\r\n\r\nLet us know if the above does not help or does not answer your question."
      }
    ]
  },
  {
    "number": 3455,
    "title": "Bittrex / python fetch_orders() method gone ..?",
    "created_at": "2018-07-21T20:06:26Z",
    "closed_at": "2018-07-21T20:11:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3455",
    "body": "Language: Python 3.6\r\nCCXT version: 1.12+ (including newest version 1.16.80)\r\nExchange: Bittrex\r\n\r\nThe fetch_orders method for Bittrex seems to have disappeared at some point after v1.11.180 (I tried to upgrade). Seems like a pretty important method for a fairly well-used exchange... ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3455/comments",
    "author": "skeebuzz",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-21T20:11:47Z",
        "body": "@skeebuzz they didn't have it from the very beginning, the old `fetchOrders` was only returning closed orders, so it was removed in favor of `fetchClosedOrders`. Bittrex has `fetchOpenOrders`, `fetchClosedOrders` and the `has` property, according to the Manual. Hope this answers your question."
      },
      {
        "user": "skeebuzz",
        "created_at": "2018-07-21T20:39:26Z",
        "body": "Damn that was fast, and it's Saturday... Thanks very much. You've just earned this project an ETH tip.\r\n\r\nCheers"
      }
    ]
  },
  {
    "number": 3452,
    "title": "Incorrect precision data in markets object. amountToPrecision(), amountToLots() not working correctly.",
    "created_at": "2018-07-21T11:42:27Z",
    "closed_at": "2018-07-21T16:36:13Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3452",
    "body": "`this.markets[formatPair(order.coin)].lot` returns incorrect lot size. \r\n(Eg. For DBC/BTC precision is 4 it returns 8)\r\n`this.currencies[getCoinFromPair(order.coin)].precision` returns correct precision. (Eg:DBC/BTC - 4)\r\n\r\nSuggested line of code to debug the issue /ccxt/js/kucoin.js -\r\n\r\n```\r\n390: let precision = {\r\n                'amount': 8,\r\n                'price': 8,\r\n393:           };\r\n```\r\n\r\n- OS: ALL\r\n- Programming Language version: NODE v8.9.4\r\n- CCXT version: 1.16.36\r\n- Exchange: KUCOIN\r\n- Method: amountToLots()\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3452/comments",
    "author": "azharuniverse",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-21T16:36:13Z",
        "body": "`market.lot` and amountToLots are deprecated. We are using the `precision` and we are moving to decimalToPrecision instead. Hope this answers your question."
      }
    ]
  },
  {
    "number": 3451,
    "title": "load_markets: limits['cost']['max']  shows empty",
    "created_at": "2018-07-21T08:55:24Z",
    "closed_at": "2018-07-21T16:39:12Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3451",
    "body": "- OS: Ubuntu 18.04\r\n- Programming Language version: php 7.2\r\n- Exchange: binance\r\n- $markets = $exchange->load_markets ();\r\n\r\n`foreach ($markets as $key=>$value) {\r\n\tforeach ($value as $key => $value) {\r\n\t\tif ($key == \"precision\") {\r\n\t\t\t$precision = $value;\r\n\t\t\techo \"precision:\";\r\n\t\t\tprint_r($precision) . $line_break;\r\n\t\t}\r\n`\r\n\r\nbrings me:\r\n`limits:Array\r\n(\r\n    [amount] => Array\r\n        (\r\n            [min] => 0.001\r\n            [max] => 100000\r\n        )\r\n\r\n    [price] => Array\r\n        (\r\n            [min] => 0.010522\r\n            [max] => 1.052175\r\n        )\r\n\r\n    [cost] => Array\r\n        (\r\n            [min] => 0.001\r\n            [max] =>\r\n        )\r\n)\r\n`\r\n\r\nWhy does it show me for limits['cost']['max']  empty? I can't see an error in my code.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3451/comments",
    "author": "Elmit2015",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-21T16:39:12Z",
        "body": "@Elmit2015 \r\n\r\n> Why does it show me for limits['cost']['max'] empty? I can't see an error in my code.\r\n\r\nThis isn't an error and is the expected behaviour. Because there's no max limit on the cost of an order for Binance, therefore some of those fields may be undefined. Hope this answers your question, let us know if not."
      }
    ]
  },
  {
    "number": 3428,
    "title": "Bittrex methods  XToPrecision return float instead of string",
    "created_at": "2018-07-18T13:38:33Z",
    "closed_at": "2018-07-18T13:44:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3428",
    "body": "- Programming Language version: Python\r\n- CCXT version: ccxt-1.16.57\r\n- Exchange: bittrex, bitfinex\r\n- Method: XToPrecision\r\n\r\nHi,\r\nI just found that, while all other exchanges I used so far return a string on the method XToPrecision (fee,cost,amount etc), the **bittrex** exchange returns a float!\r\n\r\n```\r\nct = ccxt.bittrex()\r\nct.loadMarkets()\r\nct.costToPrecision('ETH/BTC',0.00100000)\r\n```\r\n--> float\r\n```\r\nct = ccxt.binance()\r\nct.loadMarkets()\r\nct.costToPrecision('ETH/BTC',0.00100000)\r\n```\r\n--> string (also for other exchanges such as kraken, kucoin and bitfined\r\n\r\nAlso it seems that the **bitfinex** feeToPrecision is not working, as it always returns a key error for any symbol.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3428/comments",
    "author": "MarcelBeining",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-18T13:44:37Z",
        "body": "> I just found that, while all other exchanges I used so far return a string on the method XToPrecision (fee,cost,amount etc), the bittrex exchange returns a float!\r\n\r\nThat's right, but you should not rely on the type of the output of that method, really, because it will generate an exchange-specific return-type anyway. Some exchanges will require floats, others will require strings. \r\n\r\n> Also it seems that the bitfinex feeToPrecision is not working, as it always returns a key error for any symbol.\r\n\r\nYou should loadMarkets for it first.\r\n\r\nLet us know if this does not answer your question."
      },
      {
        "user": "MarcelBeining",
        "created_at": "2018-07-18T13:47:28Z",
        "body": "Hi, ok thanks.\r\nHowever concerning bitfinex, I actually **did** load the market:\r\n```\r\nct = ccxt.bitfinex()\r\nct.loadMarkets()\r\nct.feeToPrecision('ETH/BTC',0.00100000)\r\n```\r\n--> error"
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-18T14:01:52Z",
        "body": "> ```ct.feeToPrecision('ETH/BTC',0.00100000)```\r\n\r\n↑ That's an error, bitfinex uses currency precision for fees instead of pair-precision...\r\n\r\n`ct.feeToPrecision('ETH',0.00100000)` or `ct.feeToPrecision('BTC',0.00100000)` will work.\r\n\r\nIn other words, I'm telling you: you should not rely on any non-documented methods, as most of them are there for internal exchange-specific needs. Instead of using `feeToPrecision`, you should rather calculate the fee with `calculateFee`, for example. This particular aspect is very hard to unify and the work on it is still in progress."
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-18T17:05:07Z",
        "body": "We are thinking of redesigning this a bit, namely, remove amountToPrecision and priceToPrecision and use a generic toPrecision method, that would accept a currency code or a pair and a numeric value and some other arguments, maybe, and would work in a unified way for amounts, prices, costs and fees. We would document the new set of methods and you could build upon it then. Hope to do it soon (need to think a little more on this). And will let you know, of course. In the meantime, you have to improvise and be creative."
      }
    ]
  },
  {
    "number": 3426,
    "title": "Is there a possibility to fetch OHLCV for all symbols at exchange at once?",
    "created_at": "2018-07-18T11:41:11Z",
    "closed_at": "2018-07-18T13:37:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3426",
    "body": "It is mean that if exchange has 300 markets and 1s ratelimit, i must spend as minimum 300 seconds to load OHLCV for all market?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3426/comments",
    "author": "viogull",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-18T13:37:53Z",
        "body": "> Is there a possibility to fetch OHLCV for all symbols at exchange at once?\r\n\r\nNot really, very few exchanges will allow that. \r\n\r\n> It is mean that if exchange has 300 markets and 1s ratelimit, i must spend as minimum 300 seconds to load OHLCV for all market?\r\n\r\nYes. But because OHLCV is a public call and does not require authentication, you can parallelise that. Say, have 30 computers each issuing a call at 1s ratelimit, thus it will take 10 seconds... 300 computers = 1 second... and so on..."
      }
    ]
  },
  {
    "number": 3341,
    "title": "CCXT structure for meteor applications",
    "created_at": "2018-07-08T19:59:09Z",
    "closed_at": "2022-06-22T19:06:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3341",
    "body": "- OS: Ubuntu 16.04\r\n- Programming Language version: Meteor.js 1.7.03\r\n- CCXT version: Latest 1.15 or whatever\r\n- Exchange: Most of them\r\n- Method: Pulling Transaction Data, and most public pricing endpoints\r\n\r\nIt's not exactly an issue and you recommend to read the manual for these things, but I could find any help for this.\r\n\r\nI wanted to know how would you structure this library in a meteor application. I wanted to know how to structure the server side code so that I could pull transaction history from the private endpoints at the user's request. The user would be able to choose their desired exchange and it will allow them to put in their API key and secret.\r\n\r\nI also wanted to know how to structure to pull pricing data from public endpoints. I intend to make a live feed for this data.\r\n\r\nDo I separate the files based off the exchange or methods and call the files required dependant on the action. \r\n\r\nIs there an example or guide that I could base it off of or any recommendations.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3341/comments",
    "author": "DanMan259",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-07-18T13:18:08Z",
        "body": "> I wanted to know how would you structure this library in a meteor application.\r\n\r\nActually, you don't structure this library, you structure your app.\r\n\r\nAnd this leads to the question... do you have Meteor issue or ccxt issue? I mean, do you have experience of writing Meteor apps? Because, if you don't then you'll probably need to seek an advice elsewhere. Not because we're unwilling to answer, I just wouldn't expect to find Meteor experts here.\r\n\r\n> Is there an example or guide that I could base it off of or any recommendations.\r\n\r\nAs for ccxt there are plenty of examples in `/examples/js/` folder. They are neat and it's wise to take a look at them.\r\n\r\nI believe that if:\r\n1) you can write a Meteor app that makes use of a DB (or any other async resource)\r\n2) you can write a minimalistic ccxt script that queries an exchange\r\n\r\nthen replacing DB calls with ccxt calls should not be an issue.\r\n\r\n"
      },
      {
        "user": "pcriadoperez",
        "created_at": "2022-06-22T19:03:20Z",
        "body": "@DanMan259  Is this ok close?"
      }
    ]
  },
  {
    "number": 3337,
    "title": "Bitmex returning None on bid and ask prices with fetch_ticker(BTC/USD)",
    "created_at": "2018-07-07T12:18:51Z",
    "closed_at": "2018-07-07T12:33:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3337",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python \r\n- CCXT version: 1.15.25\r\n- Exchange: Bitmex\r\n\r\nHey there, I'm building a small script to retrieve BTC to USD/USDT prices from several exchanges. Bitmex seems to be only returning tickers with None bid and ask values. Here is an example:\r\n\r\n```\r\n{   'ask': None,\r\n    'askVolume': None,\r\n    'average': 6592.5,\r\n    'baseVolume': 68269.88704205,\r\n    'bid': None,\r\n    'bidVolume': None,\r\n    'change': -14.0,\r\n    'close': 6585.5,\r\n    'datetime': '2018-07-07T12:15:39.063Z',\r\n    'high': 6617.5,\r\n    'info': {   'close': 6585.5,\r\n                'foreignNotional': 449483304,\r\n                'high': 6617.5,\r\n                'homeNotional': 68269.88704205,\r\n                'lastSize': 723,\r\n                'low': 6558.5,\r\n                'open': 6599.5,\r\n                'symbol': 'XBTUSD',\r\n                'timestamp': '2018-07-08T00:00:00.000Z',\r\n                'trades': 139169,\r\n                'turnover': 6826988704205,\r\n                'volume': 449483304,\r\n                'vwap': 6584.1454},\r\n    'last': 6585.5,\r\n    'low': 6558.5,\r\n    'open': 6599.5,\r\n    'percentage': -0.21213728312750968,\r\n    'previousClose': None,\r\n    'quoteVolume': 449483304.0,\r\n    'symbol': 'BTC/USD',\r\n    'timestamp': 1530965739063,\r\n    'vwap': 6584.1454}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3337/comments",
    "author": "salihkilic",
    "comments": [
      {
        "user": "salihkilic",
        "created_at": "2018-07-07T12:22:53Z",
        "body": "After some extra digging, I found that load_markets() does resolve the bid and ask prices while fetch_ticker doesn't.\r\n\r\n```\r\n'BTC/USD': {   'active': True,\r\n                   'base': 'BTC',\r\n                   'fee_loaded': False,\r\n                   'future': False,\r\n                   'id': 'XBTUSD',\r\n                   'info': {   'askPrice': 6594,\r\n                               'bankruptLimitDownPrice': None,\r\n                               'bankruptLimitUpPrice': None,\r\n                               'bidPrice': 6593.5,\r\n                               'buyLeg': '',\r\n                               'calcInterval': None,\r\n                               'capped': False,\r\n                               'closingTimestamp': '2018-07-07T14:00:00.000Z',\r\n                               'deleverage': True,\r\n```\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-07T12:33:30Z",
        "body": "@salihkilic the problem with Bitmex is that they will return just the OHLCV or just the bid and the ask, but not both (in a single call)... We're looking for better workarounds. In the meantime, I guess, you should fetchOrderBook or fetchMarkets if you want their current bidask. Let us know if it does not answer your question. Your suggestions are also welcome. Thx!"
      },
      {
        "user": "salihkilic",
        "created_at": "2018-07-07T13:41:14Z",
        "body": "Hey @kroitor, Thanks for the fast reply. I was talking about Bitmex (not Bittrex like you mentioned) and they do provide both ask and bid in one call with load_markets()but not in fetch_ticker()."
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-07T13:42:47Z",
        "body": "@salihkilic \r\n\r\n> Thanks for the fast reply. I was talking about Bitmex (not Bittrex like you mentioned)\r\n\r\nyeah, sorry, it was a typo in my answer, Bitmex, of course.\r\n\r\n> and they do provide both ask and bid in one call with load_markets()but not in fetch_ticker().\r\n\r\nThey either provide [bid+ask] **or** [OHLCV], not both, that's the point."
      }
    ]
  },
  {
    "number": 3300,
    "title": "when the websocket api will be supported ? ",
    "created_at": "2018-07-01T13:19:14Z",
    "closed_at": "2018-07-01T15:09:19Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3300",
    "body": "very interested in the websocket, when will it be supported ?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3300/comments",
    "author": "vesslanjin",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-01T15:09:19Z",
        "body": "@vesslanjin see the answer here: #56"
      }
    ]
  },
  {
    "number": 3264,
    "title": "bittrex order cost should be over 50k satoshi",
    "created_at": "2018-06-26T20:22:59Z",
    "closed_at": "2018-06-26T20:26:29Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3264",
    "body": "I try to do this:\r\n`bittrex.create_limit_buy_order(\"DASH/BTC\", 0.01243634, 0.0375)`\r\n\r\n0.0375 - price.\r\n0.01243634 - my btc.\r\n\r\nbut I get this error:\r\n`ccxt.base.errors.InvalidOrder: bittrex order cost should be over 50k satoshi {\"message\":\"DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT\",\"result\":null,\"success\":false}`\r\n\r\n\r\nWhy? 0.01243634 it's more than 50k satoshi",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3264/comments",
    "author": "michaldev",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-26T20:26:29Z",
        "body": "```\r\ncost = amount * price\r\ncost must be > 50k SAT\r\namount = 0.01243634\r\nprice = 0.0375\r\ncost = 0.01243634 * 0.0375 = 0.00046636275 < 0.00050000 BTC (50000 Satoshi)\r\n```"
      }
    ]
  },
  {
    "number": 3263,
    "title": "Setting API and Secret Key in PHP version havig no effect",
    "created_at": "2018-06-26T16:48:35Z",
    "closed_at": "2018-06-26T21:43:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3263",
    "body": "Hi,\r\nAfter creating account and keys for 1Broker, bitbox , coinspot and cointiger exchanges,  I followed the manual for setting these Api key and secret  but still receive the error message from API asking for API key.\r\nFor quick testing I set it like below...Is there a known issue on Php or i am missing something?\r\n\r\n       $string_exchange = '\\\\ccxt\\\\' . $id;\r\n        $ccxt_exchange = new $string_exchange();\r\n\r\n        $exchangeAPI = new ExchangeAPIKey();\r\n        $apiKey = $exchangeAPI->getApiKey($id);\r\n        $secretKey = $exchangeAPI->getSecretKey($id);\r\n        echo ' ApiKey '.$apiKey;\r\n        echo ' SecretKey '.$secretKey;\r\n        if(!empty($apiKey) && !empty($secretKey)){\r\n            $ccxt_exchange->apiKey = $apiKey;\r\n            $ccxt_exchange->secret = $secretKey;\r\n        }else if(!empty($apiKey)){\r\n            $ccxt_exchange->apiKey = $apiKey;\r\n        }\r\n\r\nSetting my keys this way seems having no effect on loadmarket call...or maybe i miss some sleep\r\n\r\n- OS:\r\n- Programming Language version:\r\n- CCXT version: 1.44.211\r\n- Method: loadmarket",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3263/comments",
    "author": "davemg3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-26T17:03:09Z",
        "body": "```PHP\r\n$id = '_1broker';\r\n$onebroker = '\\\\ccxt\\\\' . $id;\r\n$exchange = new $onebroker ();\r\n$exchange->apiKey = 'YOUR_API_KEY';\r\n// $exchange->secret = 'YOUR_SECRET'; // _1broker requires apiKey only\r\n$exchange->load_markets();\r\necho print_r ($exchange->symbols, true) . \"\\n\";\r\n```\r\n\r\n↑ If this does work and your code does not, then the reason is in your code, not in the library..."
      },
      {
        "user": "kroitor",
        "created_at": "2018-06-26T21:43:04Z",
        "body": "@DaveMG3 i'd close this for now. Let us know the above does not help. Feel free to reopen this if needed, or just questions if any, or if you have further difficulties with it."
      },
      {
        "user": "davemg3",
        "created_at": "2018-06-27T01:38:08Z",
        "body": "Indeed i setup a test case, it works so the blame should be in my code. \r\nIssue is not coming from ccxt"
      }
    ]
  },
  {
    "number": 3255,
    "title": "Is there a fetch_ticker cache?",
    "created_at": "2018-06-26T09:26:44Z",
    "closed_at": "2018-06-26T12:09:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3255",
    "body": "I'm trying to update about 100 coin prices across a dozen exchanges. Going one-by-one is obviously inefficient if the exchange API doesn't support individual coin calls.\r\n\r\nI was thinking I could either cache the results (I'm fine with 3 minutes) or I'll have to rewrite my script to call the all-at-once exchanges only once, update all the prices, and then call the one-at-a-time exchanges.\r\n\r\nI can't find anything in the docs; does such a cache feature exist? How simple would it be to implement?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3255/comments",
    "author": "presence35",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-26T12:09:42Z",
        "body": "> I can't find anything in the docs; does such a cache feature exist?\r\n\r\nNope, we don't cache them in the library, because caching them in userland is trivial.\r\n\r\n> How simple would it be to implement?\r\n\r\nVery simple, if you know your programming language well. If you're doing this in PHP, that would just require creating a shared assoc array of tickers by symbol, protecting it with mutexes and writing from your threads to that assoc array directly.\r\n\r\nOne thing to note here: caching real-time data is ok for analysis purposes, however, you don't really want to trade tickers that are several minutes old, for obvious reasons.\r\n\r\nLet us know if it does not answer your question.\r\n\r\n"
      }
    ]
  },
  {
    "number": 3232,
    "title": "hitbtc.fetchMyTrades      NotSupported    fetch_my_trades() is not implemented yet'",
    "created_at": "2018-06-24T17:07:15Z",
    "closed_at": "2018-06-24T17:10:36Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3232",
    "body": "\r\n- OS: Win 10\r\n- Programming Language version: Python 3.4\r\n- CCXT version: 1.14.257\r\n- Exchange: HitBTC\r\n- Method: fetchMyTrades\r\n\r\nAltCoinTrades = hitbtc.fetchMyTrades(AltCoin) \r\n self.raise_error(NotSupported, details='fetch_my_trades() is not implemented yet')\r\n\r\nopenorder = hitbtc.fetchOpenOrders('ARDR/BTC')\r\nprint(openorder)        works fine \r\n\r\nbtc = hitbtc.fetchBalance()['BTC']['free']\r\nprint('Free BTC To Trade', btc)                        also works fine \r\n\r\nI have i full version working on Poloniex and Cryptopia\r\n\r\nOr is HitBTC  not yet fully usable? \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3232/comments",
    "author": "Mantas779",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-24T17:10:36Z",
        "body": "@Mantas779 their v1 API is outdated, just use `hitbtc2` instead of `hitbtc` and you should be ok ) Let us know if it does not answer your question. Thx! "
      },
      {
        "user": "SteCrypto",
        "created_at": "2023-08-23T13:48:07Z",
        "body": "Hi Kroitor\r\nsorry for the silly question, how can I use the new hitbtc API?\r\n\r\nI tried hitbtc3.fetch_ticker(CryptoPair) and hitbtc2.fetch_ticker(CryptoPair) but it's not working\r\n\r\nThanks"
      }
    ]
  },
  {
    "number": 3211,
    "title": "mean execution price",
    "created_at": "2018-06-21T19:31:15Z",
    "closed_at": "2018-06-21T19:39:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3211",
    "body": "hi guys, what's the api method to get the execution price of an order\r\n\r\nfor example, market is selling at 10000\r\ni send a buy order at 11000, what the mean price of my executed volume? for example 10121 ?\r\ni`m using fetch_order() method",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3211/comments",
    "author": "rspadim",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-21T19:39:41Z",
        "body": "```JavaScript\r\norder = await exchange.fetch_order (orderId)\r\nif (typeof order['filled'] !== 'undefined' && order['filled'] > 0)\r\n    price = order['price']  // this should be the filling price if order['filled'] > 0\r\n```\r\n\r\nHope this answers your question."
      }
    ]
  },
  {
    "number": 3206,
    "title": "Bitrrex wallet status not good fetchCurrencies",
    "created_at": "2018-06-21T09:31:03Z",
    "closed_at": "2018-06-21T10:41:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3206",
    "body": "\r\n- Ubuntu\r\n- Python: 3.5\r\n- CCXT version: 1.14.189\r\n- Exchange: bittrex\r\n- Method: fetchCurrencies()\r\n\r\nFor example\r\n\r\n```bit.fetchCurrencies()['CANN']``` has de following output: \r\n\r\n``` {'code': 'CANN', 'fee': 0.2, 'status': 'ok', 'precision': 8, 'limits': {'amount': {'max': 100000000.0, 'min': 1e-08}, 'withdraw': {'max': 100000000.0, 'min': 0.2}, 'price': {'max': 100000000.0, 'min': 1e-08}, 'cost': {'max': None, 'min': None}}, 'info': {'MinConfirmation': 300, 'Notice': 'Automated Maintenance.', 'Currency': 'CANN', 'TxFee': 0.2, 'IsActive': False, 'CurrencyLong': 'CannabisCoin', 'BaseAddress': None, 'CoinType': 'BITCOIN'}, 'address': None, 'type': 'BITCOIN', 'active': False, 'name': 'CannabisCoin', 'id': 'CANN'} ```\r\n\r\nAs you can see the wallet is in Automated Maintance and 'IsActive'  is False while the unified status is 'ok'\r\n\r\nI would expect that the status would change to 'disabled' because you cannot withdraw or deposit this coin at the moment\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3206/comments",
    "author": "fonzmeister",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-21T10:41:55Z",
        "body": "> I would expect that the status would change to 'disabled' because you cannot withdraw or deposit this coin at the moment\r\n\r\nThe `status` is deprecated there, so you should look into the `active` flag instead:\r\n\r\n```Python\r\n{'active': False,  # ←----------------------------- this one\r\n 'address': None,\r\n 'code': 'CANN',\r\n 'fee': 0.2,\r\n 'id': 'CANN',\r\n 'info': {'BaseAddress': None,\r\n          'CoinType': 'BITCOIN',\r\n          'Currency': 'CANN',\r\n          'CurrencyLong': 'CannabisCoin',\r\n          'IsActive': False,\r\n          'MinConfirmation': 300,\r\n          'Notice': 'Automated Maintenance.',\r\n          'TxFee': 0.2},\r\n 'limits': {'amount': {'max': 100000000.0, 'min': 1e-08},\r\n            'cost': {'max': None, 'min': None},\r\n            'price': {'max': 100000000.0, 'min': 1e-08},\r\n            'withdraw': {'max': 100000000.0, 'min': 0.2}},\r\n 'name': 'CannabisCoin',\r\n 'precision': 8,\r\n 'status': 'ok',\r\n 'type': 'BITCOIN'}\r\n```\r\n\r\nLet us know if it does not answer your question. Thx!"
      },
      {
        "user": "fonzmeister",
        "created_at": "2018-06-21T14:06:11Z",
        "body": "Thank you, that works perfectly.\r\nHowever, I don't think it works on poloniex though\r\n\r\nfor example:\r\n```polo.fetchCurrencies()['STEEM']```\r\n\r\ngives as output: \r\n```{'name': 'STEEM', 'active': True, 'fee': 0.01, 'info': {'disabled': 1, 'name': 'STEEM', 'txFee': '0.01000000', 'frozen': 0, 'delisted': 0, 'minConf': 50, 'depositAddress': 'poloniex', 'id': 281}, 'code': 'STEEM', 'id': 'STEEM', 'limits': {'withdraw': {'max': 100000000.0, 'min': '0.01000000'}, 'price': {'max': 100000000.0, 'min': 1e-08}, 'amount': {'max': 100000000.0, 'min': 1e-08}, 'cost': {'max': None, 'min': None}}, 'precision': 8}```\r\n\r\nThe wallet is disabled as is shown in the info part of the dict. however. Active is True"
      },
      {
        "user": "kroitor",
        "created_at": "2018-06-21T14:07:26Z",
        "body": "@fonzmeister thx for pointing that out, will fix Poloniex as well, shortly."
      }
    ]
  },
  {
    "number": 3011,
    "title": "How to make async data fetching work with multi-threading",
    "created_at": "2018-06-01T17:15:05Z",
    "closed_at": "2018-06-26T22:15:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3011",
    "body": "I have been following the async examples and been fetching market data and order book data successfully. I now have a problem with threading. I struggle to make async code work with threading. A snippet of my code is like this where loadGDAX() will work perfectly when invoked on its own but not in a thread:\r\n\r\ndef loadGDAX():\r\n    exchange = ccxt.gdax({\r\n        'enableRateLimit': True,  # this option enables the built-in rate limiter\r\n    })\r\n    asyncio.get_event_loop().run_until_complete(loadTickerImpl(exchange, 'ETH/USD', 'GDAX.txt'))\r\n    \r\ndef test1():\r\n    print(datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S'))\r\n\r\nnumber=7\r\np1 = threading.Thread(target=loadGDAX)\r\np2 = threading.Thread(target=test1)\r\np1.start()\r\np2.start()\r\np1.join()\r\np2.join()\r\n\r\nI don't think this is a very difficult problem but my limited python knowledge is not helping.\r\nI will greatly appreciate it if anybody can help.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3011/comments",
    "author": "cowboyjj",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2018-06-01T18:38:51Z",
        "body": "Async python and multithreading often break each other. \r\n\r\nYour problem is that you are using asyncio.get_event_loop() inside a thread (you will get an error saying no event loop found or something like that). Define the event loop outside of the multithreaded function to fix this."
      },
      {
        "user": "cowboyjj",
        "created_at": "2018-06-01T19:07:49Z",
        "body": "I apologize since I realize I may not have provided a good context to my question. Basically I want to have one function fetching data non-stop and writing data to a file, and another function loading back those data from file and performing some data analysis on the data. There is a third function which should handle the trade (buy/sell) transactions with the exchange. I want to have all these three functions running in parallel on three different threads but I am not able to get it working."
      },
      {
        "user": "frosty00",
        "created_at": "2018-06-01T20:12:21Z",
        "body": "Define three functions that do that and start them in different threads?\r\n\r\n> I struggle to make async code work with threading. \r\n\r\ncould you post the error at least.."
      },
      {
        "user": "cowboyjj",
        "created_at": "2018-06-01T21:01:59Z",
        "body": "Hello frosty, thanks a lot for replying. \r\n\r\nThe error was exactly as you described in your first post, 'no event loop found' (or something like that. Having seen your first comment I've been trying to define the loop outside. Also I've been trying to use 'concurrent.futures.ThreadPoolExecutor' which seem to work in some google search results. However as we speak I am still struggling to put these things together ..."
      },
      {
        "user": "frosty00",
        "created_at": "2018-06-01T21:12:04Z",
        "body": "Define the event loop outside the async function and reference it directly instead of using asyncio.get_event_loop. Also you need to use `asyncio.run_coroutine_threadsafe(coro(), loop=loop)` to wrap future tasks if you want it to work (trust me on this it will save a headache down the line)"
      },
      {
        "user": "cowboyjj",
        "created_at": "2018-06-01T22:55:23Z",
        "body": "Cool. Thanks Frosty.\r\n\r\nI will try. If you or any helper can provide some skeleton code or code snippet so that I see how things are put together it will be most helpful."
      },
      {
        "user": "frosty00",
        "created_at": "2018-06-02T09:50:08Z",
        "body": "```\r\ndef close_all():\r\n    if not network.EVENT_LOOP.is_running():\r\n        threading.Thread(target=network.EVENT_LOOP.run_forever).start()\r\n    for ex in abstract_exchanges:\r\n        asyncio.run_coroutine_threadsafe(ex.async.close(), network.EVENT_LOOP).result()\r\n    network.EVENT_LOOP.call_soon_threadsafe(network.EVENT_LOOP.stop)\r\n    logging.critical('Requested to stop event loop soon and closing event loop')\r\n    while network.EVENT_LOOP.is_running():\r\n        time.sleep(0.1)\r\n    network.EVENT_LOOP.close()\r\n```\r\n\r\nThis is the code I use to close all the async exchanges (to avoid the  warning \"exchange requires to release all resources with an explicit call to the .close() coroutine\")"
      },
      {
        "user": "araa47",
        "created_at": "2018-06-25T18:44:43Z",
        "body": "@frosty00 , I currently use sys.exit() to close all my exchange coroutines. I tried using your function but get the following error: \r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 710, in <module>\r\n    close_all()\r\n  File \"app.py\", line 691, in close_all\r\n    if not network.EVENT_LOOP.is_running():\r\nNameError: name 'network' is not defined\r\n```\r\nSo I tried installing the network module and now I get this error: \r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 711, in <module>\r\n    close_all()\r\n  File \"app.py\", line 692, in close_all\r\n    if not network.EVENT_LOOP.is_running():\r\nAttributeError: module 'network' has no attribute 'EVENT_LOOP'\r\n```\r\n"
      },
      {
        "user": "frosty00",
        "created_at": "2018-06-25T19:20:26Z",
        "body": "Yeah sorry network is just a file I have in my project. \r\n\r\nEVENT_LOOP is the same as `asyncio.get_event_loop()` or `asyncio.new_event_loop()`"
      },
      {
        "user": "kroitor",
        "created_at": "2018-06-26T22:15:58Z",
        "body": "Closing this for now, feel free to reopen it if needed, or just questions if you have more. Thx to @frosty00 for the support!"
      }
    ]
  },
  {
    "number": 2996,
    "title": "Accurately establish min trade limit for both base and quote",
    "created_at": "2018-05-30T15:19:08Z",
    "closed_at": "2022-03-02T23:37:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2996",
    "body": "I am creating a bot (testing with Cryptopia) that starts with one currency (BTC per my development thus far) and trades amongst every market for said currency regardless of whether the currency is the base or quote. In order to establish the minimum reserve needed for at least one trade in each market I need to sum up the minimum limits. For each market I need to determine whether the min amount or min cost is larger. For example:\r\n\r\nBSTY/BTC\r\nMinAmount: 1.0E-8 BSTY\r\nMinCost:   0.0005 BTC\r\n\r\nBTC/USDT\r\nMinAmount: 1.0E-8 BTC\r\nMinCost:   1 USDT\r\n\r\nThe first market has a quote of BTC, whereas the second a base of BTC. I have been struggling to find the most accurate way to estimate the BTC value of the non-BTC amount/cost. Would I use the most current price? Per the manual:\r\n\r\n```\r\n# Get current best price (query market price) and calculate bid/ask spread\r\n$orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);\r\n$bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : NULL;\r\n$ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : NULL;\r\n$spread = ($bid && $ask) ? $ask - $bid : NULL;\r\n```\r\n\r\nIf so, would the estimated BTC equivalent of the minimum amount (before fees) in the first example be established via the following?\r\n\r\n`$btcMinAmountEquiv = $minAmount * $bid;`\r\n\r\nThe above seems logical to me yet the return is such so far below the minimum cost that I can't help to think that my reasoning is flawed. It's worth noting that there will be several points in my script in which I need to estimate the BTC equivalent for a non-BTC cryptocurrency.\r\n\r\nThank you very much for your help.\r\n\r\n- OS: ubuntu0.16.04.1\r\n- Programming Language version: PHP 7.0.30-0\r\n- CCXT version: 10.1 2017-11-06\r\n- Exchange: Cryptopia\r\n- Method: N/A",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2996/comments",
    "author": "phoenix-violeus",
    "comments": [
      {
        "user": "phoenix-violeus",
        "created_at": "2018-06-08T23:17:02Z",
        "body": "Essentially what I'm asking:\r\nWhat's the most logical way to estimate the current value of an amount in one currency in terms of the second currency?"
      },
      {
        "user": "samgermain",
        "created_at": "2022-03-02T23:37:34Z",
        "body": "Here's a python solution to get the minimum stake amount based on both the base or the quote\r\n\r\n```\r\nimport ccxt\r\nimport sys\r\n\r\nprint('python', sys.version)\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange=ccxt.your_exchange({\r\n    'apiKey': '...',\r\n    'secret': '...',\r\n})\r\nexchange.load_markets()\r\n\r\nsymbol = '...'\r\nmarket = exchange.market(symbol)\r\nprice = exchange.fetchTicker(symbol)['close']\r\n\r\nmin_stake_amounts = []\r\nlimits = market['limits']\r\nif (limits['cost']['min'] is not None):\r\n    min_stake_amounts.append(limits['cost']['min'])\r\n    \r\nif (limits['amount']['min'] is not None):\r\n    min_stake_amounts.append(limits['amount']['min'] * price)\r\n    \r\nif not min_stake_amounts:\r\n    min_stake_amount = None\r\nelse:\r\n    # The value returned should satisfy both limits: for amount (base currency) and\r\n    # for cost (quote, stake currency), so max() is used here.\r\n    min_stake_amount = max(min_stake_amounts)\r\n ```\r\n \r\n And here's a Javascript solution\r\n \r\n ```\r\n const ccxt = require(\"ccxt\");\r\n\r\nconsole.log ('CCXT Version:', ccxt.version)\r\n\r\nconst exchange = new ccxt.your_exchange({\r\n    'apiKey': '...',\r\n    'secret': '...',\r\n})\r\nexchange.load_markets()\r\n\r\nconst symbol = '...'\r\nconst market = exchange.market(symbol)\r\nconst price = exchange.fetchTicker(symbol)['close']\r\n\r\nconst min_stake_amounts = []\r\nconst limits = market['limits']\r\n\r\nif (limits['cost']['min'] !== undefined) {\r\n    min_stake_amounts.append(limits['cost']['min'])\r\n}\r\n\r\nif (limits['amount']['min'] !== undefined) {\r\n    min_stake_amounts.append(limits['amount']['min'] * price)\r\n}\r\n\r\nlet min_stake_amount = undefined\r\nif (min_stake_amounts.length > 0) {\r\n    // The value returned should satisfy both limits: for amount (base currency) and\r\n    // for cost (quote, stake currency), so max() is used here.\r\n    min_stake_amount = Math.max(min_stake_amounts)\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 2952,
    "title": "What is the best way to keep up-to-date a database with OHLCV data ?",
    "created_at": "2018-05-25T09:49:02Z",
    "closed_at": "2018-05-25T12:31:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2952",
    "body": "Hello,\r\n\r\nI would like to build a database with OHLCV data (1d, 4h, 1h) from multiple exchanges and this is a lot of data to collect periodically.\r\n\r\nA solution could be to calculate 1d and 4h candles from the 1h data to limit the number of query but still it will take a very long time to fetch thousand of candles in 1h. Do you think there is an alternative option to do this ? For example `fetch_tickers()` returns symbols details including OHLCV for every symbols of an exchange in a single API call, but unfortunnatly there are exchanges that do not support this function, and I'm not not sure what is the timeframe of this OHLCV and if it is consistent for every exchanges.\r\n\r\nThanks,\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2952/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-25T11:50:09Z",
        "body": "> A solution could be to calculate 1d and 4h candles from the 1h data to limit the number of query \r\n\r\nYep )\r\n\r\n> but still it will take a very long time to fetch thousand of candles in 1h.\r\n\r\nNope ) Just do a quick calculation: 1h candle = 24 candles per day = 720 / month = 8640 / year.\r\nI doubt that you will ever need to operate on a whole year at once. For modern dbs fetching 8k rows is a piece of cake. You can host it on your netpad... Of course, you're going to store and fetch multiple pairs and all that, but still, come on, it's the 21st century, 100k rows shouldn't be a problem."
      },
      {
        "user": "Kinzowa",
        "created_at": "2018-05-25T11:54:04Z",
        "body": "Hi Igor, ye but there are 1000+ symbols to fetch every hour (multiple exchanges) and this is a lot of API requests."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-25T11:58:41Z",
        "body": "> but is there are 1000+ symbols to fetch every hour \r\n\r\nNo need to fetch them every hour. You can fetch the entire day (24 hours of 1h-candles) in one call per day. 1000 calls per day is a piece of cake. Moreover, with most of adequate exchanges you can fetch a month of 1h-candles in one call. And you're not going to trade the inadequate exchanges. Also, you're probably not going to have enough funding for trading all those pairs, and you will meet all sorts of restrictions along the way, so with very little brainwork you can filter and reduce your list of pairs by a factor of 2 to 10. That's just 100 pairs of your interest. 864000 rows per year. Any modern PC can handle this easily (if you're not wasting your resources and burning CPU cycles on purpose).\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-25T12:31:37Z",
        "body": "I'd close this for now if you don't mind. Feel free to reopen it if needed or just ask questions. Thx!"
      },
      {
        "user": "Kinzowa",
        "created_at": "2018-05-25T12:44:36Z",
        "body": "The idea is to backtest trading strategies so yes I'll need all those pairs. Another constraint I have is fast trading decisions so any solution that takes too much time to fecth all the data is not suitable, even with a minimum timeframe of 4h. I think I'll try a combination of the two methods with `fetch_ohlcv()` to get proper 4h candles and `fetch_tickers()` to retrieve the latest price available of every symbols in one call, every 1h or every 4h. \r\n\r\nI can remain closed, thanks."
      }
    ]
  },
  {
    "number": 2946,
    "title": "precision issue",
    "created_at": "2018-05-24T14:23:36Z",
    "closed_at": "2018-05-31T07:44:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2946",
    "body": "\r\n- OS: mac os high sierra, ubuntu 16.04\r\n- Programming Language version: python 3.6\r\n- CCXT version: latest\r\n- Exchange: exmo and others \r\n- Method: Exchange.truncate_to_string\r\n\r\nThis code:\r\nfrom ccxt.base.exchange import Exchange\r\nprint(Exchange.truncate_to_string(0.37560392, 8))\r\nresult:\r\n0.375604\r\n\r\nSo. this function uses, for example, in create_order in exmo (I am sure also in other exchanges too).\r\nSo, if I have only 0.37560392 coins I am not able to pass this value to create_order for sell order, because :\r\ncreate_order failed exmo {\"result\":false,\"error\":\"Error 50052: Insufficient funds\"}\r\n\r\nPrecision of markets is correct - 8.\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2946/comments",
    "author": "alexsith",
    "comments": [
      {
        "user": "alexsith",
        "created_at": "2018-05-24T14:45:37Z",
        "body": "I found that decimal_to_precision(0.37560392, TRUNCATE,8) works much better:\r\n0.37560391\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-31T07:44:41Z",
        "body": "The `truncate_to_string` is now deprecated and we are migrating to `decimal_to_precision`."
      }
    ]
  },
  {
    "number": 2944,
    "title": "Detect token access level?",
    "created_at": "2018-05-24T10:10:54Z",
    "closed_at": "2018-05-24T19:28:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2944",
    "body": "How to check access level on key and secret user entered?\r\n\r\nI need users to enter only Read access token and want to prevent from entering Write access tokens\r\n\r\nDidn't find in docs, is there an easy way to do it?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2944/comments",
    "author": "Stas-Buzunko",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-24T19:28:14Z",
        "body": "> How to check access level on key and secret user entered?\r\n\r\n75% of exchanges do not provide that info from their API. So, i guess, you should just show a clearly visible warning in bold. You can try placing a zero-amount order or a dummy-order using the keypair in question to see if the system will respond with Permission Denied, or with some order error. That can be an indication of your actual access rights. We hope to unify this aspect soon.\r\n\r\nLet me know if this does not answer your question."
      },
      {
        "user": "Stas-Buzunko",
        "created_at": "2018-05-24T19:39:05Z",
        "body": "@kroitor thanks!"
      },
      {
        "user": "Antonhansel",
        "created_at": "2021-04-26T19:05:46Z",
        "body": "I'm raising this issue from the dead @kroitor to check if you guys ever implemented this 😬\r\nIf not I'll try to use a bold message like suggested ;) "
      }
    ]
  },
  {
    "number": 2896,
    "title": "huobipro withdraw return api-signature-not-valid error",
    "created_at": "2018-05-19T18:43:10Z",
    "closed_at": "2018-05-20T04:03:55Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2896",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.5.4\r\n- CCXT version: 1.14.25\r\n- Exchange: huobipro\r\n- Method: withdraw\r\n\r\nWhen I tested huobipro withdraw, I got 'signature not valid' response as below:\r\n\r\n> ccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"status\":\"error\",\"data\":null,\"err-code\":\"api-signature-not-valid\"}\r\n\r\nMeanwhile, huobipro fetch_balance worked fine. So I think it is not a key pair issue. And I also tested withdraw same target address by other market, it also worked fine. So the address should be good.\r\n\r\nAttach my testing code below, hope it will help:\r\n\r\n    f_m = \"huobipro\"\r\n    t_m = \"okex\" \r\n    currency = \"ZEC\"\r\n\r\n    exchange = getattr(ccxt, f_m)({'apiKey': apiconfig['key'], 'secret': apiconfig['secret'], 'nonce': ccxt.Exchange.milliseconds})\r\n    addresses = get_market_addresses(t_m) #get addresses map\r\n    exchange.load_markets()\r\n    response = exchange.fetch_balance()\r\n    print(response) #fetch balance, worked\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n    print(response) #withdraw, failed\r\n\r\nAttach traceback:\r\n\r\n> Traceback (most recent call last):\r\n  File \"testing2.py\", line 36, in <module>\r\n    withdraw_test()\r\n  File \"testing2.py\", line 33, in withdraw_test\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 661, in withdraw\r\n    response = self.privatePostDwWithdrawApiCreate(self.extend(request, params))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 306, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 303, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 383, in fetch\r\n    self.handle_errors(response.status_code, response.reason, url, method, None, self.last_http_response)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 727, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"data\":null,\"err-code\":\"api-signature-not-valid\",\"status\":\"error\"}\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2896/comments",
    "author": "radarxc",
    "comments": [
      {
        "user": "radarxc",
        "created_at": "2018-05-20T01:48:11Z",
        "body": "I find when I change withdraw's 'tag' parameter as None, this issue is fixed. I am not sure what happen, but it works fine on other market with tag parameter."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-20T04:03:55Z",
        "body": "@radarxc you're not using the withdraw method properly. The `tag` is not an arbitrary user string, it is a wallet identifier which should only be set if you're withdrawing a currency that requires the tag for addressing. Let us know if it does not answer your question."
      },
      {
        "user": "radarxc",
        "created_at": "2018-05-20T04:09:40Z",
        "body": "@kroitor \r\ngot you. Thank you very much. I should read document more carefully."
      }
    ]
  },
  {
    "number": 2894,
    "title": "How to use ccxt with dynamic exchange name?",
    "created_at": "2018-05-19T07:26:31Z",
    "closed_at": "2018-05-19T15:30:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2894",
    "body": "Hi, All.\r\nI am using cctx 1.10.944 for my portfolio page.\r\nprogramming language Typescript 2.6.2\r\n\r\nIt's really great library for me.\r\nBut I have an issue when I try to use it with a dynamic exchange name.\r\nIt needs for the portfolio page.\r\n\r\nfor example:\r\nconst exchangeName = 'binance';\r\nlet cctx = new cctx.exchangeName({\r\n     apiKey:  \"...\",\r\n     secret:  \"...\"\r\n});\r\n\r\nIs it possible?\r\nCan I initialize the cctx exchange with dynamic name?\r\nI've tried like this:\r\nconst opt = {\r\n     apiKey:  \"...\",\r\n     secret:  \"...\"\r\n};\r\n const exchange = Object.create(window[exchangeType].prototype);\r\n      exchange.constructor.apply(exchange, opt);\r\n      // const hotExchange = new DynamicClass(exchangeType, opt);\r\n      // withdraw\r\n      const withdrawResult = await exchange.withdraw (token, amountFromExchange, addressTo);\r\n\r\nI hope to take a look at my code and let me know your idea.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2894/comments",
    "author": "since-2017-hub",
    "comments": [
      {
        "user": "jvandenaardweg",
        "created_at": "2018-05-19T15:25:16Z",
        "body": "Using this in a project of mine:\r\n```javascript\r\nconst exchangeName = 'binance';\r\nlet cctx = new cctx[exchangeName]({\r\n  apiKey: \"...\",\r\n  secret: \"...\"\r\n});\r\n```\r\n\r\n👍"
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-19T15:30:34Z",
        "body": "Thanks, @jvandenaardweg !"
      },
      {
        "user": "Atem18",
        "created_at": "2019-05-05T14:37:18Z",
        "body": "FYI in Python, you do:\r\n```\r\nexchange_name = 'binance'\r\nexchange = getattr(ccxt, exchange_name)\r\n\r\nccxt_ex = exchange({\r\n  apiKey: \"...\",\r\n  secret: \"...\"\r\n})\r\n```"
      },
      {
        "user": "glencjones",
        "created_at": "2021-05-26T22:18:06Z",
        "body": "const CCXT = ccxt as any; // Hack!        \r\nconst exchange = new CCXT[id]({ 'enableRateLimit': true }) as ccxt.Exchange;\r\n\r\nSee ts examples in git."
      }
    ]
  },
  {
    "number": 2862,
    "title": "Bittrex Test Order",
    "created_at": "2018-05-16T14:44:33Z",
    "closed_at": "2018-05-16T20:37:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2862",
    "body": "Anyone know is there an option to make test order on bittrex with ccxt?\r\n\r\n- OS: Windows\r\n- Programming Language version: Python 3x\r\n- CCXT version: Latest\r\n- Exchange: Bittrex\r\n- Method: create_order()\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2862/comments",
    "author": "xlivestudios",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-16T20:37:25Z",
        "body": "Afaik, the Bittrex exchange itself does not provide that option. Hope it answers your question."
      }
    ]
  },
  {
    "number": 2783,
    "title": "we CANNOT order limitorder Zaif and  Bitbank although its super easy source What should I write a code of limit order and market order in Zaif and  Bitbank?",
    "created_at": "2018-05-07T15:31:08Z",
    "closed_at": "2018-05-07T22:33:36Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2783",
    "body": "Hi guys.I created the super easy program to limitorder using ccxt and\r\nI successed to limit order only bitflyer using this source.\r\nBut I couldn't success to order in Bitbank and Zaif case.\r\nWhat should I write a code of limit order and market order in Zaif and  Bitbank?\r\nThe program is follow.\r\n```\r\nimport ccxt\r\nimport json\r\n\r\n# bitflyer API\r\nexchange_api = ccxt.bitflyer()\r\nexchange_api.apiKey = 'hoge'\r\nexchange_api.secret = 'hoge'\r\n\r\n# zaif API\r\nexchange_api = ccxt.zaif()\r\nexchange_api.apiKey = 'hoge'\r\nexchange_api.secret = 'hoge'\r\n\r\n# bitbank API\r\nexchange_api = ccxt.bitbank()\r\nexchange_api.apiKey = 'hoge'\r\nexchange_api.secret = 'hoge'\r\n\r\n#purchase limit order\r\nlimit_ordered_info = exchange_api.create_order(\r\n                     symbol=\"BTC/JPY\",\r\n                     type='limit',\r\n                     side='BUY',\r\n                     amount=0.001,\r\n                     price=900000\r\n                     )\r\nprint(json.dumps(limit_ordered_info, indent=True))\r\n```\r\nThis is the contents of ERROR each exchanges.\r\n\r\nZAIF ERROR\r\n```\r\nTraceback (most recent call last):\r\n  File \"easyorder2.py\", line 29, in <module>\r\n    price=900000\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ccxt\\zaif.py\", line 241, in create_order\r\n    }, params))\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ccxt\\zaif.py\", line 370, in request\r\n    raise ExchangeError(self.id + ' ' + response['error'])\r\nccxt.base.errors.ExchangeError: zaif insufficient funds\r\n```\r\n\r\n```\r\nBITBANK ERROR\r\nTraceback (most recent call last):\r\n  File \"easyorder2.py\", line 30, in <module>\r\n    price=900000\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ccxt\\bitbank.py\", line 310, in create_order\r\n    response = self.privatePostUserSpotOrder(self.extend(request, params))\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ccxt\\bitbank.py\", line 496, in request\r\n    raise ErrorClass(message)\r\nccxt.base.errors.InvalidOrder: The trading classification is invalid\r\n\r\n```\r\nWhat should I write a code of limit order and market order in Zaif and  Bitbank?\r\nThanks in advance\r\n\r\n- OS:win10\r\n- Programming Language version: python3\r\n- CCXT version:latest\r\n- Exchange:wrote\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2783/comments",
    "author": "k31ww475",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-07T22:33:36Z",
        "body": "I'd move this discussion to #2781 if you don't mind. Thx!"
      },
      {
        "user": "k31ww475",
        "created_at": "2018-05-12T00:28:24Z",
        "body": "ok.thx"
      }
    ]
  },
  {
    "number": 2780,
    "title": "cryptopia ExchangeError \"unrecognized pair id\"",
    "created_at": "2018-05-07T11:36:40Z",
    "closed_at": "2018-05-09T19:52:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2780",
    "body": "Could you perhaps change this error to something else or tell me a way to distinguish this error from other possible ExchangeErrors (or perhaps bypass or disable it)?\r\n\r\nits in fetchTickers:\r\n\r\nif (!recognized)\r\n                throw new ExchangeError (this.id + ' fetchTickers() returned unrecognized pair id ' + id.toString ());\r\n\r\nI already implemented a method for all exchanges to automatically detect when fetchTickers returns new symbols/pairs, and handle them through logging and/or automatically re-fetching markets, then im still able to read and update all the other pairs in each request. But this thrown error in cryptopia wont let me update all the other working markets either since the promise is rejected, and all the other data from this request is lost.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2780/comments",
    "author": "Esc4pism",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-09T20:08:57Z",
        "body": "1. Update ccxt to most recent version.\r\n2. Add `{ 'options': { 'fetchTickersErrors': false }}` to your constructor params for Cryptopia.\r\n3. Enjoy )"
      }
    ]
  },
  {
    "number": 2774,
    "title": "[BitMEX] Getting balance of altcoin positions",
    "created_at": "2018-05-06T21:44:18Z",
    "closed_at": "2018-05-07T02:31:18Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2774",
    "body": "- OS: Mac OS X High Sierra\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.13.66\r\n- Exchange: BitMEX\r\n- Method: fetch_balance()\r\n\r\nAfter looking through the different exchanges code, it appears that `fetch_balance()` returns whatever the exchange API's response is, without the ability to specify a specific coin. For most exchanges, I can do something like `exchange.fetch_balance()['free']['ETH']`.\r\n\r\nBut for BitMEX, that only gives works for BTC, so I have to use `bitmex.private_get_position({'symbol':'ETHM18'}[0]['currentQty'])` which is quite troublesome as I have to include a unique case for BitMEX each time.\r\n\r\nIf this issue only affects BitMEX (I'm not sure if that's the case), are there plans to update `fetch_balance()` in the bitmex class to call `private_get_position()`? That would allow for `fetch_balance()['free']['<symbol>']` to be a unified method of getting altcoin positions.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2774/comments",
    "author": "yidkato",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-07T02:31:18Z",
        "body": "In general, we don't have margin/leveraged trading in the unified CCXT API yet, but we are working on it, hope to add it as soon as possible. In the meantime, you really should use implicit methods like you do already, if you want to implement a position-trading algo. \r\n\r\nHope it answers your questions."
      }
    ]
  },
  {
    "number": 2762,
    "title": "How can I store price series data into MongoDB ?",
    "created_at": "2018-05-05T18:35:53Z",
    "closed_at": "2018-05-06T01:09:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2762",
    "body": "Hello,\r\n\r\nI would like to save price series of crypto from multiple exchanges into a MongoDB database but I can't find any example. This is the list of the exchanges I would like to download and store the data: \r\n\r\n```\r\nex =    [\"binance\",\r\n        \"bitfinex\",\r\n        \"bittrex\",\r\n        \"hitbtc\",\r\n        \"kraken\",\r\n        \"kucoin\",\r\n        \"poloniex\",\r\n        \"gateio\"]\r\n```\r\nThese exchanges have +900 symbols with BTC as a quote currency. I can use `fetch_ohlcv (symbol, '1d')` to retrieve the data but it gives me lists inside list, like this :\r\n\r\n```\r\n[[1478131200000, 950.0, 1099.98, 179.0, 240.03, 244.57775612],\r\n [1478736000000, 240.03, 265.89, 89.24, 93.55, 155.50246024],\r\n [1479340800000, 93.57, 99.72, 55.0, 77.53, 624.65850454]]\r\n```\r\n\r\nThe problem is that Mongodb wants an instance of dict, so how could I transform this nested lists into a proper dictionary ? Another question is how to design the database to store data from multiple exchanges ?\r\n\r\nAny help would be greatly appreciate,\r\n\r\nThanks!\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2762/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-05-05T20:17:46Z",
        "body": "> Another question is how to design the database to store data from multiple exchanges ?\r\n\r\nThe database table structure for this particular case is pretty straightforward. What you'll eventually end up with is:\r\n- exchange\r\n- symbol\r\n- timestamp\r\n- O\r\n- H\r\n- L\r\n- C\r\n- V\r\n\r\n> The problem is that Mongodb wants an instance of dict, so how could I transform this nested lists into a proper dictionary ? \r\n\r\nIt should be something like:\r\n```javascript\r\nconst exchangeId = 'binance';\r\nconst symbol = 'ETH/BTC';\r\nconst exchange = new ccxt['binance'] ();\r\nconst ohlcvs = await exchange.fetchOHLCV(symbol);\r\n\r\nfor (let i = 0; i < ohlcvs.length; i++) {\r\n    const ohlcv = ohlcvs[i];\r\n    db.insert(exchange.id, symbol, ohlcv[0], ohlcv[1], ohlcv[2], ...);\r\n}\r\n```\r\n\r\nPay attention that on some of the exchanges `fetchOHLCV` is emulated, on them you'll probably get just a fraction of a day candle. Exchanges with native OHLCV implementation also impose some limits on how far back into history you can go and on number of returned candles.\r\n\r\nSo I'm afraid that you'll need to fetch raw trades and build OHLCVs by yourself. Hopefully, it's pretty easy to do with ccxt, just prepare to spend few days on that. More on it here: #2596, #2321."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-06T01:09:13Z",
        "body": "@HornKild closing this for now, if you don't mind. Let us know if @mkutny's answer does not satisfy your question. Thx!"
      },
      {
        "user": "Kinzowa",
        "created_at": "2018-05-06T06:25:43Z",
        "body": "Thank you @mkutny this is very helpful."
      },
      {
        "user": "mkutny",
        "created_at": "2018-05-06T07:22:10Z",
        "body": "@HornKild , thanks for the feedback!"
      }
    ]
  },
  {
    "number": 2759,
    "title": "[Gateio]The exchange【gate.io】has change the url into 【gateio.io】",
    "created_at": "2018-05-05T12:35:25Z",
    "closed_at": "2018-05-05T13:36:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2759",
    "body": "The exchange【gate.io】has change the url into 【gateio.io】\r\nso if you need to use the api for gateio.io you can edit the file :【/node_modules/ccxt/js/gateio.js】and replace the【gate.io】 into 【gateio.io】",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2759/comments",
    "author": "zrxpower",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-05T13:36:23Z",
        "body": "Their API docs still point to gate.io and it does work, so we will update according to their docs. Thx for the notice, really appreciate your involvement!"
      }
    ]
  },
  {
    "number": 2757,
    "title": "[Bitifnex] fetch_ohlcv does not work for limit=None",
    "created_at": "2018-05-05T10:13:22Z",
    "closed_at": "2018-05-05T13:48:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2757",
    "body": "- OS: Windows 10\r\n- Programming Language version: 3.6.5\r\n- CCXT version: 1.13.78\r\n- Exchange: bitfinex and bitfinex2\r\n- Method: fetch_ohlcv\r\n\r\n```\r\nexchange.fetch_ohlcv(symbol='BTC/USD', timeframe='1h', since=None, limit=None, params={})\r\n```\r\n```\r\n  File \"c:\\users\\kinga\\documents\\github\\ccxt\\python\\ccxt\\bitfinex.py\", line 651, in fetch_ohlcv\r\n    since = self.milliseconds() - self.parse_timeframe(timeframe) * limit * 1000\r\n\r\nTypeError: unsupported operand type(s) for *: 'int' and 'NoneType'\r\n```\r\n\r\n`since` should not be calculated if `limit=None`. That is an easy fix, but `limit=None` also causes the method to return ohlcv data from a different time period than if a `limit` is specified.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2757/comments",
    "author": "aking7",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-05T13:46:36Z",
        "body": "> since should not be calculated if limit=None. \r\n\r\nWhen you see something like this, it's not because we want it so, this is just because the exchange itself demands those params, otherwise they will report reversed OHLCVs, and it will be very hard to actually paginate the ohlcvs. You can try that endpoint yourself to understand what I mean:\r\n\r\nHere's the implementation of fetch_ohlcv in bitfinex/bitfinex2:\r\n\r\n```Python\r\n    async def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=100, params={}):\r\n        await self.load_markets()\r\n        if since is None:\r\n            since = self.milliseconds() - self.parse_timeframe(timeframe) * limit * 1000\r\n        market = self.market(symbol)\r\n        v2id = 't' + market['id']\r\n        request = {\r\n            'symbol': v2id,\r\n            'timeframe': self.timeframes[timeframe],\r\n            'sort': 1,\r\n            'limit': limit,\r\n            'start': since,\r\n        }\r\n        response = await self.v2GetCandlesTradeTimeframeSymbolHist(self.extend(request, params))\r\n        return self.parse_ohlcvs(response, market, timeframe, since, limit)\r\n```\r\n\r\nAnd here's some testing code:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nexchange = ccxt.bitfinex()  # or bitfinex2\r\nexchange.load_markets()\r\nif since is None:\r\n    since = exchange.milliseconds() - exchange.parse_timeframe(timeframe) * limit * 1000\r\nmarket = exchange.market(symbol)\r\nv2id = 't' + market['id']\r\nrequest = {\r\n    'symbol': v2id,\r\n    'timeframe': exchange.timeframes[timeframe],\r\n    'sort': 1,\r\n    'limit': limit,\r\n    'start': since,\r\n}\r\nresponse = await exchange.v2GetCandlesTradeTimeframeSymbolHist(exchange.extend(request, params))\r\npprint(exchange.parse_ohlcvs(response, market, timeframe, since, limit))\r\n\r\n```\r\n\r\nTry changing that snippet and getting 100 trades since 1st of May 00:00:00 (properly sorted in ascending order, by omitting or adding params there, and then paginate by `start`... You'll quickly see the reasoning behind that.\r\n\r\nHope this answers your question."
      },
      {
        "user": "aking7",
        "created_at": "2018-05-05T14:38:21Z",
        "body": "How about changing the method to something like:\r\n```\r\n    def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=100, params={}):\r\n        self.load_markets()\r\n        if since is None:\r\n            if limit is None:\r\n                since = self.milliseconds() - self.parse_timeframe(timeframe) * 100 * 1000\r\n            else:\r\n                since = self.milliseconds() - self.parse_timeframe(timeframe) * limit * 1000\r\n        market = self.market(symbol)\r\n        v2id = 't' + market['id']\r\n        request = {\r\n            'symbol': v2id,\r\n            'timeframe': self.timeframes[timeframe],\r\n            'sort': 1,\r\n            'limit': limit,\r\n            'start': since,\r\n        }\r\n        response = self.v2GetCandlesTradeTimeframeSymbolHist(self.extend(request, params))\r\n        return self.parse_ohlcvs(response, market, timeframe, since, limit)\r\n```\r\n\r\nThis will return the last 100 candles if both `since=none` and `limit=None`."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-05T14:45:52Z",
        "body": "Ok, will add this shortly)"
      },
      {
        "user": "aking7",
        "created_at": "2018-05-05T14:46:55Z",
        "body": "This is cleaner:\r\n```\r\ndef fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=100, params={}):\r\n        self.load_markets()\r\n        if limit is None:\r\n            limit = 100\r\n        if since is None:\r\n            since = self.milliseconds() - self.parse_timeframe(timeframe) * limit * 1000\r\n        market = self.market(symbol)\r\n        v2id = 't' + market['id']\r\n        request = {\r\n            'symbol': v2id,\r\n            'timeframe': self.timeframes[timeframe],\r\n            'sort': 1,\r\n            'limit': limit,\r\n            'start': since,\r\n        }\r\n        response = self.v2GetCandlesTradeTimeframeSymbolHist(self.extend(request, params))\r\n        return self.parse_ohlcvs(response, market, timeframe, since, limit)\r\n```"
      }
    ]
  },
  {
    "number": 2755,
    "title": "[Feature Request] WS Bittrex API",
    "created_at": "2018-05-04T23:36:25Z",
    "closed_at": "2018-05-04T23:39:27Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2755",
    "body": "Bittrex update their API to a new one that uses websocket, that should probably work better than the old one. I think it could be good for everybody that trades on Bittrex. \r\n\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2755/comments",
    "author": "fdk0",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-04T23:39:27Z",
        "body": "I'd recommend to move this to #56 "
      }
    ]
  },
  {
    "number": 2747,
    "title": "Python 3.6.4 Anaconda Unable to load_markets() :  'NoneType' object is not subscriptable",
    "created_at": "2018-05-04T16:11:08Z",
    "closed_at": "2018-05-04T16:41:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2747",
    "body": "Hello,\r\n\r\nI'm unable to replicate this example of load_markets() from the Manual page, am'I missing something ?\r\n\r\n```\r\nIn [201]: kraken = ccxt.kraken ()\r\n     ...: kraken.load_markets ()\r\n     ...: kraken.markets['BTC/USD']\r\n     ...: \r\n__main__:2: RuntimeWarning: coroutine 'Exchange.load_markets' was never awaited\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-201-bdbc5acb12e2>\", line 3, in <module>\r\n    kraken.markets['BTC/USD']\r\n\r\nTypeError: 'NoneType' object is not subscriptable\r\nIn [202]:\r\n```\r\n\r\nThank you,\r\n\r\n- OS: Ubuntu 16.04\r\n- Programming Language version: Python 3.6.4 Anaconda\r\n- CCXT version: 1.13.58\r\n- Exchange: All\r\n- Method: load_markets()\r\n\r\nEDIT: change the title with the error instead of warning\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2747/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "Kinzowa",
        "created_at": "2018-05-04T16:41:24Z",
        "body": "I restarted my IDE and problem is solved. Awesome !"
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-05T02:38:46Z",
        "body": "@HornKild thx for reporting back!"
      }
    ]
  },
  {
    "number": 2644,
    "title": "prompt working in file not working",
    "created_at": "2018-04-22T19:10:18Z",
    "closed_at": "2018-04-22T21:44:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2644",
    "body": "\r\n- OS: Ubuntu 16.04.4 LTS\r\n- Programming Language version: Python 3.5.2\r\n- CCXT version: 1.13.32\r\n- Exchange: All\r\n- Method: ccxt.exchanges\r\n\r\nI installed it like this:\r\npip install ccxt\r\n\r\nimport ccxt\r\nprint(ccxt.exchanges)\r\n\r\nIt's working in a prompt. But not in a Python file.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2644/comments",
    "author": "joosthoeks",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-22T19:22:29Z",
        "body": "What's your:\r\n- `python --version`\r\n- `pip --version`\r\n\r\nDo you have `python3 --version` in your system ?\r\n\r\n> But not in a Python file.\r\n\r\nMost likely you should have installed it with `sudo pip install ccxt`.\r\n\r\nLet us know if this does not help."
      },
      {
        "user": "joosthoeks",
        "created_at": "2018-04-22T19:40:37Z",
        "body": "My python --version\r\nPython 2.7.12\r\nMy python3 --version\r\nPython 3.5.2\r\nMy pip --version\r\npip 10.0.1 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)\r\nMy pip3 --version\r\npip 10.0.1 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)\r\n\r\nIf I install it with sudo pip install ccxt it makes no difference. I tried both Python versions."
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-22T19:54:01Z",
        "body": "Ok, when you say it's not working in a file – what output do you see?"
      },
      {
        "user": "joosthoeks",
        "created_at": "2018-04-22T20:00:23Z",
        "body": "Output:\r\nTraceback (most recent call last):\r\n  File \"ccxt.py\", line 1, in <module>\r\n    import ccxt\r\n  File \"/home/joost/ccxt.py\", line 2, in <module>\r\n    print(ccxt.exchanges)\r\nAttributeError: module 'ccxt' has no attribute 'exchanges'\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-22T20:13:41Z",
        "body": "Have you tried renaming ccxt.py to any other filename (and deleting the ccxt.pyc)?"
      },
      {
        "user": "joosthoeks",
        "created_at": "2018-04-22T20:24:53Z",
        "body": "I have removed ccxt.pyc and now it's working! Thanks!"
      }
    ]
  },
  {
    "number": 2630,
    "title": "Bittex fetchOrders not supported yet. ",
    "created_at": "2018-04-20T11:16:32Z",
    "closed_at": "2018-04-20T11:25:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2630",
    "body": "Hi @kroitor,\r\n\r\nWith updated version i get this error: \r\n`Bittex fetchOrders not supported yet. `\r\n\r\nSome versions ago it was working fine.\r\nAny info?\r\n\r\n- OS: \r\n- Programming Language version: JS\r\n- CCXT version: 1.13.10\r\n- Exchange: Bittrex\r\n- Method: fetchOrders\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2630/comments",
    "author": "morzyns",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-20T11:25:29Z",
        "body": "@morzyns Hi! Yes, it was emulated earlier, but it used a call to `fetchClosedOrders` or `fetchOpenOrders` internally, so you should use one of the two latter methods. Because it was removed, the version of ccxt was updated to 1.13+. Unfortunately, Bittrex does not have an endpoint to fetch them all in one go, so the earlier implementation of fetchOrders was not working properly and returned just the closed orders instead.\r\n\r\nLet us know if this does not answer your question."
      },
      {
        "user": "morzyns",
        "created_at": "2018-04-20T14:17:46Z",
        "body": "@kroitor,\r\nThanks for extensive answer. So far so good!\r\n"
      }
    ]
  },
  {
    "number": 2628,
    "title": "Trigger Order OKEX",
    "created_at": "2018-04-20T07:58:55Z",
    "closed_at": "2018-05-21T10:25:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2628",
    "body": "I want to be able to make a stop-loss order. Because I cannot request the price continuously, I can't place an order when the price drops below a certain threshold, hence the need for the trigger order.  There seems to be no info about this option in the API documentation of the OKEX API. So how does one do it? Thanks in advance.\r\n\r\n- OS: Win 8\r\n- Programming Language version: Python\r\n- CCXT version:\r\n- Exchange: Okex\r\n- Method: create_order()\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2628/comments",
    "author": "wjbkuper",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-05-21T10:25:52Z",
        "body": "Hi! Sorry for a long wait. Basically, if the exchange in question does not provide a feature that you want, your only option is to implement it in userland with long-polling. Hope this answers your issue. Let us know if now. Thx!"
      }
    ]
  },
  {
    "number": 2623,
    "title": "Calculate Maximum Amount for Buy Limit Order",
    "created_at": "2018-04-19T13:32:05Z",
    "closed_at": "2018-04-22T17:09:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2623",
    "body": "What's the best way to calculate maximum amount within available balance to have it unified over exchanges?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2623/comments",
    "author": "morzyns",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-04-21T17:46:58Z",
        "body": "The maximum amount is `balance / price`. But it's kinda trivial so I suppose you faced a problem which doesn't get solved with this formula. What is it?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-22T17:09:22Z",
        "body": "@morzyns you need:\r\n- current balance\r\n- current prices\r\n- fee rates\r\n\r\nAll that combined makes up these formulas:\r\n- order quote cost = base amount * quote price\r\n- base balance needed = amount + amount * feeRate\r\n- quote balance needed = cost + cost * feeRate\r\n\r\nHope this answers your question. Let us know if not. Thx!"
      },
      {
        "user": "morzyns",
        "created_at": "2018-04-23T08:17:55Z",
        "body": "Cool, thanks."
      },
      {
        "user": "adamrg73",
        "created_at": "2021-12-29T22:16:08Z",
        "body": "> @morzyns you need:\r\n> \r\n> * current balance\r\n> * current prices\r\n> * fee rates\r\n> \r\n> All that combined makes up these formulas:\r\n> \r\n> * order quote cost = base amount * quote price\r\n> * base balance needed = amount + amount * feeRate\r\n> * quote balance needed = cost + cost * feeRate\r\n> \r\n> Hope this answers your question. Let us know if not. Thx!\r\n\r\nthis formula is not written correctly, please revise for me I need this.\r\nplease us definitive variables so I can understand the formula."
      }
    ]
  },
  {
    "number": 2619,
    "title": "Gdax Sandbox Authentication Error",
    "created_at": "2018-04-19T08:08:52Z",
    "closed_at": "2018-04-19T14:13:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2619",
    "body": "Hi, \r\nI'm trying to use the api with the Gdax Sandbox, but I get an \"Invalid API Key\" error.\r\n\r\nTo use the sandbox I have changed this line in the code (line 478 in gdax.py):\r\n\r\nFrom: \r\n`url = self.urls['api'] + request `\r\nto:\r\n`url = self.urls['test'] + request `\r\n\r\nIt's weird because I get the error using the sandbox credentials, but if I put the real credentials I get no error. It is like if my change int he code has no effect at all.\r\n\r\nProbably it is just a newbie mistake from me, but I'm stucked with this. \r\n\r\nI'm using python on Ubuntu.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2619/comments",
    "author": "jebesen",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-19T14:13:38Z",
        "body": "Hi!\r\n\r\n> Probably it is just a newbie mistake from me, but I'm stucked with this.\r\n\r\n1. For using your live credentials with the live exchange, you don't need to do anything (use it as you would use any other exchange):\r\n\r\n```Python\r\ngdax = ccxt.gdax({\r\n    'apiKey': 'YOUR_LIVE_KEY',\r\n    'secret': 'YOUR_LIVE_SECRET',\r\n})\r\n\r\n# your code goes here...\r\n```\r\n\r\n2. For using your sandbox credentials with the exchange sandbox, do the following:\r\n\r\n```Python\r\ngdax = ccxt.gdax({\r\n    'apiKey': 'YOUR_SANDBOX_KEY',\r\n    'secret': 'YOUR_SANDBOX_SECRET',\r\n})\r\ngdax.urls['api'] = gdax.urls['test']  # ← add just this line to your code (don't edit `gdax.py`)\r\n\r\n# your code goes here...\r\n```\r\n\r\nGDAX uses different accounting databases for sandbox accounts vs regular accounts, therefore you can't use a sandbox account with a live exchange and vice versa.\r\n\r\nLet us know if this does not answer your question. Thx!"
      },
      {
        "user": "jebesen",
        "created_at": "2018-04-19T14:52:12Z",
        "body": "Thank you very much.  Problem solved!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-19T14:56:26Z",
        "body": "@jebesen thx for reporting back! )"
      }
    ]
  },
  {
    "number": 2618,
    "title": "fetchL2OrderBook a lot slower than before?",
    "created_at": "2018-04-19T02:33:48Z",
    "closed_at": "2018-04-19T23:04:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2618",
    "body": "- OS: Win 7\r\n- Programming Language version: JS\r\n- CCXT version: Latest\r\n- Exchange: Cryptopia, Yobit, Bitfinex\r\n- Method: fetchL2OrderBook\r\n\r\nHas anyone noticed that fetchL2OrderBook is a lot slower recentlly? I am having such a headache understanding why, I used to scan each market's order book in an exchange in like 15 minutes and now it takes hours. I am not sure if something changed in the ccxt library or its some other problem, did something change with that function?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2618/comments",
    "author": "Codewyvern",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-19T02:40:00Z",
        "body": "I kinda draw these lines:\r\n- crypto more popular → more exchange users → more load on the exchange → slower responses\r\n- more people on earth → more exchange users → ...\r\n- today there's more tokens than ever before → more time to loop through all of them\r\n- ...\r\n\r\nSo, to me, it's all like due to *natural causes*. At least, we haven't changed the `fetchL2OrderBook` recently, and it depends on which time window you mean under *\"before\"*.\r\n\r\nLet us know if this does not answer your question."
      },
      {
        "user": "Codewyvern",
        "created_at": "2018-04-19T23:04:03Z",
        "body": "Today its working normal again, no idea why, thanks."
      }
    ]
  },
  {
    "number": 2614,
    "title": "hitbtc vs. hitbtc2 in Python",
    "created_at": "2018-04-18T15:53:49Z",
    "closed_at": "2018-04-18T23:02:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2614",
    "body": "Hi, I am wondering what exactly is the difference between hitbtc and hitbtc2? I tried to compare their python codes and it seemed that  hitbtc2 is an upgrade version that is more consistent to other exchanges. Is that true? \r\n\r\nI would really appreciate your help!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2614/comments",
    "author": "lxj034000",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-18T23:02:27Z",
        "body": "> Hi, I am wondering what exactly is the difference between hitbtc and hitbtc2?\r\n\r\nHi! The hitbtc v1 is the older deprecated version of their API, we have it in CCXT for backward compatibility, however, with newer code we would recommend to stick to v2 from the very beginning.\r\n\r\n> I tried to compare their python codes and it seemed that hitbtc2 is an upgrade version that is more consistent to other exchanges. Is that true?\r\n\r\nYes, exactly.\r\n\r\nLet us know if this does not answer your question. Thx!"
      }
    ]
  },
  {
    "number": 2592,
    "title": "Following orderbook top asks/bids book with limit order       (Bitfinex)(Python)",
    "created_at": "2018-04-16T20:19:49Z",
    "closed_at": "2018-04-17T01:37:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2592",
    "body": "- OS: Windows 10 x64 Pro\r\n- Programming Language version: Python 3.6.4\r\n- CCXT version: 1.12.176 \r\n- Exchange: Bitfinex\r\n- Method:\r\n\r\nFollowing code\r\nGoing Long only with Limit post only orders with amount depends on \"Target_of_coinsUSDT\"\r\n\r\nIn first _while_ loop my code place a order, this part work ok\r\n\r\nsecond _while_ loop checks if our limit order price. This code worked on Bitmex correctly, but on Bitfinex it gives error\r\n`File \"C:\\Users\\DMMaxim\\Desktop\\BITFINEX_ETHUSD_1H.py\", line 155, in trader\r\n    bitfinex.edit_order(resultLong['id'],market,'limit',resultLong['side'],price = BestBid)\r\nTypeError: edit_order() got an unexpected keyword argument 'price'`\r\n```\r\n#LONG SIDE BITFINEX issue with edit_order\r\n        if (Target_of_coinsUSDT > 10):\r\n                while True:\r\n                        print('bitfinex Going LONG with USDT and coins amount:',Target_of_coinsUSDT,'$ ',Target_of_coins,market)\r\n                        try:\r\n                                bitfinex.privatePostOrderCancelAll()\r\n                                orderbookLong = bitfinex.fetch_order_book(market)\r\n                                BasicBid = orderbookLong['bids'][0][0] if len (orderbook['bids']) > 0 else None\r\n                                resultLong = bitfinex.create_order(symbol=market, type='limit', side='buy', amount=Target_of_coins, price = BasicBid, params = paramsBitfinex)\r\n                                break\r\n                        except (ccxt.ExchangeError, ccxt.NetworkError) as error:\r\n                                print('Got an error placing Long', type(error).__name__, error.args)\r\n                                time.sleep(1)\r\n                                continue\r\n                        \r\n                while(Target_of_coinsUSDT > 10):\r\n                        print('bitfinex amending LONG with:', Target_of_coins)\r\n                        try:\r\n                                while True:\r\n                                        CurrentOpenOrderPrice = bitfinex.fetchOpenOrders()[0]['price']\r\n                                        print('CurrentOpenOrderPrice:',CurrentOpenOrderPrice)\r\n                                        orderbookLong = bitfinex.fetch_order_book (market)\r\n                                        BestBid = orderbookLong['bids'][0][0] if len (orderbook['bids']) > 0 else None\r\n                                        print('BestBid:',BestBid)\r\n                                        if (BestBid != CurrentOpenOrderPrice):\r\n                                                #bitfinex.private_post_order_cancel_replace(id = resultLong['id'], symbol = 'market', amount = 'Target_of_coins', price = 'BestBid', exchange = 'bitfinex', type = 'limit', side = 'buy', is_hidden = 'false', is_postonly = 'true', use_remaining = 'true')\r\n                                                bitfinex.edit_order(resultLong['id'],market,'limit',resultLong['side'],price = BestBid)\r\n                                                print('======Price changed to', BestBid)\r\n                                                time.sleep(2)\r\n                                        tempLongID = resultLong['id']\r\n                                        print('resultLong id',resultLong['id'])\r\n                                        time.sleep(1)\r\n                                if (resultLong['id'] != tempLongID):\r\n                                                break\r\n                        except (ccxt.ExchangeError, ccxt.NetworkError) as error:\r\n                                print('Got an error in amending price Long:', type(error).__name__, error.args)\r\n                                time.sleep(1)\r\n                                continue\r\n                        except (IndexError) as error:\r\n                                print('Order Long filled', type(error).__name__, error.args)\r\n                                break\r\n```\r\n\r\n```\r\n        #LONG SIDE BITMEX -- this code working fine\r\n        if (contracts_amount > 100):\r\n                while True:\r\n                        try:\r\n                                #bitmex.privateDeleteOrderAll ()\r\n                                orderbookLong = bitmex.fetch_order_book (market)\r\n                                BasicBid = orderbookLong['bids'][0][0] if len (orderbook['bids']) > 0 else None\r\n                                resultLong = bitmex.create_order(symbol='BTC/USD', type='limit', side='buy', amount=contracts_amount, price=BasicBid, params = post_only)\r\n                                break\r\n                        except (ccxt.ExchangeError, ccxt.NetworkError) as error:\r\n                                print('Got an error placing Long', type(error).__name__, error.args)\r\n                                time.sleep(1)\r\n                                continue\r\n                        \r\n                while(contracts_amount > 100):\r\n                        print(\"BITMEX Goind LONG with:\", contracts_amount)\r\n                        try:\r\n                                while True:\r\n                                        CurrentOpenOrderPrice = bitmex.fetchOpenOrders()[0]['price']\r\n                                        print('CurrentOpenOrderPrice:',CurrentOpenOrderPrice)\r\n                                        orderbookLong = bitmex.fetch_order_book (market)\r\n                                        BestBid = orderbookLong['bids'][0][0] if len (orderbook['bids']) > 0 else None\r\n                                        print('BestBid:',BestBid)\r\n                                        if (BestBid != CurrentOpenOrderPrice):\r\n                                                bitmex.edit_order(resultLong['id'],'BTC/USD','limit',resultLong['side'],price=BestBid)\r\n                                                print('======Price changed to', BestBid)\r\n                                                time.sleep(0.5)\r\n                                        tempLongID = resultLong['id']\r\n                                        print('resultLong id',resultLong['id'])\r\n                                        time.sleep(1)\r\n                                if (resultLong['id'] != tempLongID):\r\n                                                break\r\n                        except (ccxt.ExchangeError, ccxt.NetworkError) as error:\r\n                                print('Got an error in amending price Long:', type(error).__name__, error.args)\r\n                                time.sleep(1)\r\n                                continue\r\n                        except (IndexError) as error:\r\n                                print('Order Long filled', type(error).__name__, error.args)\r\n                                break\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2592/comments",
    "author": "4budab1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-17T01:37:10Z",
        "body": "```Python\r\n# change to this and read more about positional arguments vs named arguments (kwargs) in Python\r\nbitmex.edit_order(resultLong['id'],'BTC/USD','limit',resultLong['side'],BestBid)\r\n```\r\n\r\nLet us know if it does not help."
      }
    ]
  },
  {
    "number": 2589,
    "title": "fetch_ohlcv returns incomplete data",
    "created_at": "2018-04-16T17:31:21Z",
    "closed_at": "2018-06-26T13:01:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2589",
    "body": "- OS: ubuntu 16.04\r\n- Programming Language version: python3\r\n- CCXT version: last\r\n- Exchange: bittrex\r\n- Method: fetch_ohlcv\r\n\r\nUsing:\r\n```\r\nimport ccxt, numpy, pandas\r\nb=ccxt.bittrex()\r\ndata = b.fetch_ohlcv(\"XMR/BTC\", \"1m\", limit=10)\r\ndata = numpy.array(data)\r\ndata = data.transpose()\r\ndata = {\"time\": data[0], \"open\":data[1], \"high\":data[2], \"low\":data[3], \"close\":data[4], \"volume\":data[5]}\r\ndata = pandas.DataFrame(data)\r\ndata[\"time\"] = data[\"time\"].apply(lambda x: datetime.fromtimestamp(x/1000.0))\r\ndata = data.set_index(\"time\")\r\nprint(data)\r\n\r\n```\r\n\r\nlogs:\r\n```\r\n2018-04-06 15:01:00  0.024973  0.024973  0.024973  0.024973   0.058050\r\n2018-04-06 15:03:00  0.024973  0.024973  0.024973  0.024973   0.072460\r\n2018-04-06 15:04:00  0.024973  0.024973  0.024973  0.024973   0.400431\r\n2018-04-06 15:08:00  0.024974  0.024974  0.024973  0.024973   3.199803\r\n2018-04-06 15:10:00  0.024823  0.024823  0.024823  0.024823   0.393238\r\n2018-04-06 15:14:00  0.024921  0.024921  0.024921  0.024921   0.691595\r\n2018-04-06 15:25:00  0.024974  0.024974  0.024974  0.024974   2.519503\r\n2018-04-06 15:26:00  0.024974  0.024974  0.024974  0.024974   0.091726\r\n2018-04-06 15:31:00  0.024974  0.024974  0.024974  0.024974   1.105637\r\n2018-04-06 15:33:00  0.024974  0.024974  0.024974  0.024974   4.091391\r\n```\r\nwhich is an incomplete data (missing data on 15:32, for example)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2589/comments",
    "author": "fedecaccia",
    "comments": [
      {
        "user": "fedecaccia",
        "created_at": "2018-04-16T17:35:32Z",
        "body": "It also happens using another exchanges, like bitfinex. Further, using bitfinex I get 2016 values."
      },
      {
        "user": "Calambuuur",
        "created_at": "2018-04-27T09:34:42Z",
        "body": "OS Win32\r\nThis code returns an error:\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\r\nType \"copyright\", \"credits\" or \"license()\" for more information.\r\n>>> \r\n======= RESTART: C:/Users/XXX/CCXT/fetch_ohlcv.py =======\r\nTraceback (most recent call last):\r\n  File \"C:/Users/XXX/CCXT/fetch_ohlcv.py\", line 8, in <module>\r\n    data[\"time\"] = data[\"time\"].apply(lambda x: datetime.fromtimestamp(x/1000.0))\r\n  File \"C:\\Users\\Ivanitskii\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\pandas\\core\\series.py\", line 2551, in apply\r\n    mapped = lib.map_infer(values, f, convert=convert_dtype)\r\n  File \"pandas/_libs/src\\inference.pyx\", line 1521, in pandas._libs.lib.map_infer\r\n  File \"C:/Users/XXX/CCXT/fetch_ohlcv.py\", line 8, in <lambda>\r\n    data[\"time\"] = data[\"time\"].apply(lambda x: datetime.fromtimestamp(x/1000.0))\r\nNameError: name 'datetime' is not defined\r\n>>> \r\nWhat's  - datetime.fromtimestamp(x/1000.0)?"
      },
      {
        "user": "Calambuuur",
        "created_at": "2018-04-27T09:55:34Z",
        "body": "Add:\r\nfrom datetime import datetime"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-27T16:46:11Z",
        "body": "@Calambuuur UPD, sorry, never mind my deleted comment."
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-04-27T19:35:51Z",
        "body": "@kroitor any idea on what is happening with the ohlcv requested data?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-27T20:42:59Z",
        "body": "@fedecaccia yeah, this is called a *sparse array*, some exchanges may return the OHLCV with candles missing (it means \"no changes for that period since the previous candle\"). I'll add this to the docs and will add a couple of methods to pack/unpack sparse arrays."
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-04-28T14:09:06Z",
        "body": "@kroitor that's great, an sparse array is more efficient to manage resources, I thought it was an incomplete data."
      }
    ]
  },
  {
    "number": 2579,
    "title": "Is there any way to set the price to 'ask' using bittrex exchange?",
    "created_at": "2018-04-16T00:17:53Z",
    "closed_at": "2018-04-16T04:02:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2579",
    "body": "- OS: ubuntu\r\n- Programming Language version: python\r\n- CCXT version: last\r\n- Exchange: bittrex\r\n- Method: execute_order\r\n\r\nSince bittrex only has limit order types there is not way to set a market order. \r\nBut, if I want to be sure that the order is executed, is there any way to set the price to the 'ask' amount in the order_book, without requesting the full order_book previously?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2579/comments",
    "author": "fedecaccia",
    "comments": [
      {
        "user": "arielorvits",
        "created_at": "2018-04-16T00:22:59Z",
        "body": "U can request only part of order book.\r\nU can use ticker instead of order book.\r\nnote that sometimes ticker isn't updated enough.\r\nnote that u can't be sure order executed without verifying, since until u send the order - maybe the first 'ask' already sold"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-16T04:02:51Z",
        "body": "@fedecaccia if I get you correctly, you actually want a market order (*\"Ask\"* means buy for best available price, that is market price and up). \r\n\r\nDespite that Bittrex does not support market orders directly, there's still a way to simulate them, you just need to place the order at a price close to zero or at a very high price, depending on the direction of your order. \r\n\r\nThink what would the exchange do, if you sell 1 BTC for a price of $1. A normal exchange will not sell your bitcoin for a dollar, because there exist bidders in the orderbook that are willing to pay you more ($8000 or more) for your bitcoin. \r\n\r\nSo, a normal exchange will start closing your order for best price for you from the top of the opposite orderbook stack, if you are doing it far worse than current market price. \r\n\r\nIf you wanted the opposite, to buy 1 BTC for a market price, you would then put your bid at a price of $1million for one bitcoin, and a normal exchange will then sell a bitcoin to you from a seller that is willing to take less than $1million from you  and will sell for the market price at around $8000. So, if you are selling, sell for a very low price, if you are buying, then buy for a very high price – in both cases you will get the actual market price from a normal exchange.\r\n\r\n**WARNING: Whenever I say \"normal exchange\" I'd suggest you to test if the exchange in question is \"normal\" with a very small amount than is not significant to lose, to make sure. Not all exchanges work normally, but most of the major ones are ok. Anyway, use this method at your own risk and do the testing!**\r\n\r\nHope this answers your question.\r\n\r\n"
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-04-16T13:39:42Z",
        "body": "Thanks kroitor!"
      }
    ]
  },
  {
    "number": 2573,
    "title": "createMarketBuyOrder() accepts 0 as an amount",
    "created_at": "2018-04-14T15:59:19Z",
    "closed_at": "2018-04-14T22:39:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2573",
    "body": "`createMarketBuyOrder()` does not come back with an error when trying to buy something with amount of `0`, but instead tries to communicate this to the exchange. Why?\r\n\r\n(macOS, Python, v1.12.162, `binance`, `createMarketBuyOrder()`)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2573/comments",
    "author": "gosuto-inzasheru",
    "comments": [
      {
        "user": "gosuto-inzasheru",
        "created_at": "2018-04-14T16:01:02Z",
        "body": "Note I am not parsing it `0` but an amount close to it which, if I understand it correctly, is then deducted to `0` by its internal calling of `amountToLots()`."
      },
      {
        "user": "mkutny",
        "created_at": "2018-04-14T16:26:23Z",
        "body": "Some exchanges do accept `0` as a parameter, so why would ccxt reject that?\r\n\r\nI mean, if binance does not allow `0` then it'll reject and ccxt throw `InvalidOrder`. Does this behavior hurt in some way?"
      },
      {
        "user": "gosuto-inzasheru",
        "created_at": "2018-04-14T17:42:59Z",
        "body": "It feels unnecessary and a waste of resources to actually communicate it to the exchange. I did not however realise some exchanges do accept `0` as a parameter, even though this makes me wonder what use that would have!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-14T22:39:59Z",
        "body": "> createMarketBuyOrder() does not come back with an error when trying to buy something with amount of 0, but instead tries to communicate this to the exchange. Why?\r\n\r\nMostly because we are a thin wrapper. We do not want to mask exchange functionality – in other words, if you submit those params – we won't decide if they are worthy to send or not. If you don't want your args passed to the exchange – just don't call that method with zero ) We don't check for zero-values. We will consider adding optional layers of client-side protection later. \r\n\r\n> this makes me wonder what use that would have!\r\n\r\nMany exchanges do not distinguish market orders from other orders. They accept zero for some args (for example, a zeroed price of an order to designate that it's a market order - that is common among the exchanges). Also, many exchanges mimic market orders with limit orders, and most often a limit sell order with price 0 will be closed for best market prices from the orderbook. I haven't seen any exchanges accepting 0-amounts, but ccxt does not sanitize user input yet (or does very little checking). It is still a work in progress (under development).\r\n\r\nHope this answers your question, let us know if not. Thx!"
      }
    ]
  },
  {
    "number": 2515,
    "title": "create_order arguments- not consistent ",
    "created_at": "2018-04-09T08:02:33Z",
    "closed_at": "2018-04-09T13:09:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2515",
    "body": "\r\n- Programming Language version: python\r\n- CCXT version: 1.12.117\r\n- Exchange: gdax, luno, coinsecure, coinspot, paymium\r\n- Method: `create_order`\r\n\r\nI noticed the first argument of `create_order` isn't consistent, most exchanges have `symbol` where a few others name it `market`. Is there a reason for this change?\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2515/comments",
    "author": "AvishaiW",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-09T14:30:02Z",
        "body": "Fixed in 1.12.122. Thanks!"
      }
    ]
  },
  {
    "number": 2439,
    "title": "Kucoin's fetch_order_book yielding response from other symbols in other threads",
    "created_at": "2018-04-02T15:49:30Z",
    "closed_at": "2018-04-02T21:54:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2439",
    "body": "Hi\r\n\r\nI am not sure if this is a limitation with the wrapper, with Kucoins API or my code. I will use an example below to explain:\r\n\r\nI am fetching the order book for 5 coins simultaneously with each in a separate thread (using multi-threading). I have locks in my function, except for the variables to which the order_book outputs are assigned. However, I have made sure these variable have a unique name so there wouldn't be any overlap between threads (e.g., `kucoin_order_book[j]` where j = 0,1,2,3,4, representing thread number. The single line code is as follows:\r\n\r\n`kucoin_order_book[j] = kucoin.fetch_order_book(symbol)`\r\n\r\nAssume j = 0 is symbol = \"ETH/BTC\" and j = 1 is symbol = \"LTC/BTC\". What is happening is kucoin_order_book[0] is sometimes returning the order book for LTC/BTC. I suspect it is because both requests are going out at the same time and a response for \"LTC/BTC\" is being received first and being assigned to kucoin_order_book[0]? Is this at all possible?\r\n\r\nI have checked the DEBUG logs and the responses from kucoin seem correct based on the request URL.\r\n\r\nIs there any way I could fix this or find a workaround? Implementing a lock renders the multi-threading pointless. Also, I would prefer to use multi-threading instead of multiprocessing (based on how I have written my code) - have tested with multiprocessing and I don't get the issue above.\r\n\r\nYour help will be greatly appreciated! Thanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2439/comments",
    "author": "simonarabian",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2018-04-02T16:41:21Z",
        "body": "This has nothing to do with ccxt, but rather your faulty threading implementation. Moreover you have provided hardly any code so sorry we cannot help you. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-02T22:56:16Z",
        "body": "@slix88 if you're using multiple threads for polling the orderbooks, and you're not calling any private methods except for `fetch_order_book`, then you should instantiate one instance of kucoin class per thread. Each thread would then be working with its own instance of the exchange class and there will be no thread-interference (you will still have to sync their rate limits). Also, this type of setup does not require thread resource locking. Hope it helps. Let us know, if not."
      }
    ]
  },
  {
    "number": 2416,
    "title": "fetchOHLCV different behavior between exchanges.",
    "created_at": "2018-03-31T15:02:48Z",
    "closed_at": "2018-04-01T04:32:29Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2416",
    "body": "- OS: Windows 10\r\n- Programming Language version: Javascrip\r\n- CCXT version: 1.12.50\r\n- Exchange: Binance, Bittrex, Bitfinex\r\n- Method: fetchOHLCV\r\n\r\nI want to fetch the last 15 minutes of data from the exchanges, like below:\r\n```\r\n    let currentDatetime = Date.now()\r\n    let lessDatetime = 15 * 60 * 1000 //15 minutes\r\n    let pastDatetime = currentDatetime - lessDatetime\r\n\r\n    let symbol = 'SNT/ETH'\r\n    let tickers = await exchange.fetchOHLCV(symbol, '1m', pastDatetime, 100);\r\n```\r\nIf I use binance as the exchange, it returns 15 items (which is correct?). However, if I use bittrex and bitfinex it returns 0 and 2, respectively.  Is there anything wrong with my logic? If not, then why are they behaving this way?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2416/comments",
    "author": "jeffryhartanto",
    "comments": [
      {
        "user": "MaticConradi",
        "created_at": "2018-03-31T17:03:20Z",
        "body": "Some exchanges behave a bit weird. I had to do extensive error handling to eliminate corrupted data."
      },
      {
        "user": "jeffryhartanto",
        "created_at": "2018-04-01T01:23:45Z",
        "body": "Ohh.. So, which exchanges behave best so far?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-01T04:31:49Z",
        "body": "Related: #987 (hope it answers your question, let us know if not)."
      }
    ]
  },
  {
    "number": 2415,
    "title": "Error: binance {\"code\":-1100,\"msg\":\"Illegal characters found in parameter 'startTime'; legal range is '^[0-9]{1,20}$'.\"}",
    "created_at": "2018-03-31T13:09:19Z",
    "closed_at": "2018-03-31T14:52:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2415",
    "body": "- OS: Windows 10\r\n- Programming Language version: Javascript\r\n- CCXT version: 1.12.50\r\n- Exchange: Binance\r\n- Method: fetchOHLCV\r\n\r\nI execute the code below:\r\n```\r\nlet symbol = 'SNT/ETH'\r\nlet tickers = await exchange.fetchOHLCV(symbol, '1m', '2018-03-31 00:00:00', 1);\r\n```\r\nthen I got this error message:\r\n```\r\nError: binance {\"code\":-1100,\"msg\":\"Illegal characters found in parameter 'startTime'; legal range is '^[0-9]{1,20}$'.\"}\r\n    at binance.handleErrors (C:\\Users\\Casper\\node_modules\\ccxt\\js\\binance.js:842:35)\r\n    at response.text.then (C:\\Users\\Casper\\node_modules\\ccxt\\js\\base\\Exchange.js:509:18)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n```\r\nFYI, I don't get any problem when I use other exchanges. Any idea what is the issue?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2415/comments",
    "author": "jeffryhartanto",
    "comments": [
      {
        "user": "jeffryhartanto",
        "created_at": "2018-03-31T14:53:39Z",
        "body": "I just realized that the `since` parameter should be number. Though, it's weird that it doesn't thrown an exception when I pass a string."
      },
      {
        "user": "Flipper89",
        "created_at": "2018-12-04T11:25:19Z",
        "body": "for the people having the same issue, in general the error \"code\":-1100,\",\r\njust pay attention that the requests to binance, so far, must be done in a plain text numers (ie 0.000000097) and not with scientific numbers (ie 9.9E-7)\r\n\r\nusing BigDecimal just modify the number using the method \r\nBigDecimal.toPlainString \r\n"
      }
    ]
  },
  {
    "number": 2405,
    "title": "Binance error: Timestamp for this request was 1000ms ahead of the server's time. ",
    "created_at": "2018-03-30T00:29:56Z",
    "closed_at": "2018-03-30T00:32:21Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2405",
    "body": " I get this error while using Binance:\r\n\r\nbinance.exceptions.BinanceAPIException: APIError(code=-1021): Timestamp for this request was 1000ms ahead of the server's time.\r\n\r\nhow can i solve this problem? I'v already checked my system time.\r\n\r\n\r\n- OS:\r\n- Programming Language version: python\r\n- CCXT version:\r\n- Exchange:binance\r\n- Method:\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2405/comments",
    "author": "EMADSHAK",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-30T00:32:21Z",
        "body": "#850 "
      }
    ]
  },
  {
    "number": 2368,
    "title": "Couldn't get timestamp in `fetch_order_book` method",
    "created_at": "2018-03-28T06:34:36Z",
    "closed_at": "2018-03-28T06:42:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2368",
    "body": "- OS: mac os\r\n- Programming Language version: python\r\n- CCXT version: 1.12.17 \r\n- Exchange: all exchange\r\n- Method: fetch_order_book\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2368/comments",
    "author": "taish",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-28T06:42:09Z",
        "body": "We don't set it if a corresponding value is not provided by the exchange in question. You can get the last date from headers in the following way:\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.kraken()\r\nexchange.fetch_order_book('ETH/BTC')\r\nprint(exchange.last_response_headers['Date'])\r\n```\r\nHope it answers your question. Thx!"
      },
      {
        "user": "taish",
        "created_at": "2018-03-28T06:51:50Z",
        "body": "thanks!"
      }
    ]
  },
  {
    "number": 2365,
    "title": "How to check whether new candle formed?",
    "created_at": "2018-03-27T07:33:41Z",
    "closed_at": "2018-03-27T14:47:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2365",
    "body": "- OS: Windows 10\r\n- Programming Language version: Node JS 9.0\r\n- CCXT version: \r\n- Exchange: binance\r\n- Method: fetchOHLCV\r\n\r\non init of my script I going to fetch some quantity of candles,\r\nlater i will call another method periodically\r\n\r\nhow can I check - is new candle now forming, so I need to do something with already formed data. how to check it ?\r\nFor instance, I will use 1-hour timeframe, execute function every minute, how han I check that new candle starts?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2365/comments",
    "author": "aav80",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-27T14:44:40Z",
        "body": "> For instance, I will use 1-hour timeframe, execute function every minute, how han I check that new candle starts?\r\n\r\nA new hourly candle starts when a new UTC hour starts...\r\n\r\n```\r\n15:00-16:00 candle 123\r\n16:00-17:00 candle 124\r\n17:00-18:00 candle 125..\r\n...\r\n```\r\n\r\nSo, each new hourly candle starts on the edge of two consecutive clock hours. The new hourly candle is formed everytime a new hour starts.\r\n\r\nAll timestamps in ccxt are **UTC epoch in milliseconds**. \r\n\r\nHope it answers your question, let us know if not. Feel free to reopen it if needed or just ask further questions, if any. Thx!"
      },
      {
        "user": "aav80",
        "created_at": "2018-03-27T16:52:50Z",
        "body": "Yes, you answered completely.\r\n\r\nI have another candle-related question, is there any method which is called when new candle is formed, which I can inherite, or some way to run function only 1 time and right the moment, when candle starts?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-27T17:10:35Z",
        "body": "> I have another candle-related question, is there any method which is called when new candle is formed, which I can inherite, or some way to run function only 1 time and right the moment, when candle starts?\r\n\r\nThere's no such method in the library, because it isn't related to the library itself, but mostly related to setting up proper timing for events in your program. This is usually done in userland. \r\n\r\nThink differently: no two events in the world are simultaneous. When you set a timer for 16:00, and it is triggered, it does not necessarily mean that the actual time is 16:00. May be +/- microsecond offset there... And if you request a candle then, the server may have it's own clock which is not in sync with yours, so the server clock may show 15:59 at that moment. \r\n\r\nI guess, Einstein and Heisenberg in their theories claim that no two events can be measured precisely in time-space... So, you should not rely on the clocks, you should instead think of a solution that would work either way. \r\n\r\nThus, instead of waiting an hour for the next candle to arrive and then checking, you check every **half an hour** (or as frequently as you need) if the new candle has arrived or not and base all your further behaviour on that."
      }
    ]
  },
  {
    "number": 2358,
    "title": "About balances values",
    "created_at": "2018-03-26T14:13:46Z",
    "closed_at": "2018-03-27T20:10:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2358",
    "body": "So. What we have now is 'total', 'used', 'free'. In 80%(or maybe more) of exchanges 'total' is 'available balance' + held in orders. BUT! There are some exchanges (cryptopia, bx.in.th, southxchange and maybe others) where 'total' = available + held_in_orders + pending_deposit + withdraw_pending.\r\n\r\nI think in concept of ccxt we should exclude pending_deposit and pending_withdraw, because you can't do anything with that values - you can't change it to 'available' by yourself, like a canceling order.\r\n\r\nIf you think it is good idea, I will post my code which change this incorrect(in my opinion) behavior.\r\n\r\nin my case: I use only 'total' value for checking deposits and it gives me wrong sign about balance before I can use it.\r\n\r\nThank you. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2358/comments",
    "author": "alexsith",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-27T20:10:42Z",
        "body": "> I think in concept of ccxt we should exclude pending_deposit and pending_withdraw, because you can't do anything with that values - you can't change it to 'available' by yourself, like a canceling order.\r\n\r\nThe general idea is:\r\n- `free` = how much you can use for trading\r\n- `used` = how much is used for whatever needs (in orders, pending, etc)\r\n- `total` = `free` + `used`\r\n\r\n> If you think it is good idea, I will post my code which change this incorrect(in my opinion) behavior.\r\n\r\nDepends on how you would solve it, but, please, keep in mind that we don't do more than one HTTP request per unified call.\r\n\r\nThe above behaviour is within our expectations. I don't think that this should be changed immediately because other users may rely on existing behaviour... Let us know if you think differently or, maybe have more arguments for it... \r\n\r\nHope it answers your question. Thx! "
      }
    ]
  },
  {
    "number": 2308,
    "title": "TypeError(\"can't pickle _thread.RLock objects\",),)",
    "created_at": "2018-03-19T17:34:56Z",
    "closed_at": "2018-03-22T17:55:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2308",
    "body": "- OS: Mac OS Sierra\r\n- Programming Language version: Python3\r\n- CCXT version: 1.11.137\r\n- Exchange: Binance\r\n- Method: load_markets()\r\n\r\nSince upgrading from 1.10.1056 to 1.11.137, I am no longer able to serialize binance.load_markets() using pickle. I get the following error:\r\n(TypeError(\"can't pickle _thread.RLock objects\",),)\r\nWhen I revert the version back to 1.10.1056, it works. \r\nHere is example code.\r\n```\r\nbinance = ccxt.binance()\r\nbinance.load_markets()\r\npickle.dumps(binance))\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2308/comments",
    "author": "craigt1212",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2018-03-22T17:36:53Z",
        "body": "Nothing to do with ccxt, but rather your implementation. Threading is not used in our library. @kroitor  you can close."
      }
    ]
  },
  {
    "number": 2307,
    "title": "kucoin precision 7, but markets report 8",
    "created_at": "2018-03-19T17:33:59Z",
    "closed_at": "2018-03-19T17:55:00Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2307",
    "body": "When I trying to create limit order I get an exception:\r\n\r\n`(node:13432) UnhandledPromiseRejectionWarning: Error: kucoin {\"success\":false,\"code\":\"ERROR\",\"msg\":\"The precision of price(ETH) is incorrect. The precision of ETH is 7\",\"timestamp\":1521480370430,\"data\":null}`\r\n\r\nbut before I requested market data and have 8 at symbol (i use data from market to round values):\r\n`const price = rawPrice.toFixed(step.market.precision.price)`\r\n\r\nMarket data:\r\n```\r\nmarket: {     limits: { amount: { min: 1e-8, max: undefined },\r\n                                price: { min: undefined, max: undefined } },\r\n                  precision: { amount: 8, price: 8 },\r\n                  tierBased:    undefined,\r\n                 percentage:    undefined,\r\n                      taker:    0.001,\r\n                      maker:    0.001,\r\n                         id:   \"PRL-ETH\",\r\n                     symbol:   \"PRL/ETH\",\r\n                       base:   \"PRL\",\r\n                      quote:   \"ETH\",\r\n                     active:    true,\r\n                       info: {      coinType: \"PRL\",\r\n                                     trading:  true,\r\n                                      symbol: \"PRL-ETH\",\r\n                               lastDealPrice:  0.0014883,\r\n                                         buy:  0.0014861,\r\n                                        sell:  0.0014871,\r\n                                      change:  -0.0000317,\r\n                                coinTypePair: \"ETH\",\r\n                                        sort:  0,\r\n                                     feeRate:  0.001,\r\n                                    volValue:  307.49404165,\r\n                                        high:  0.001591,\r\n                                    datetime:  1521480358000,\r\n                                         vol:  205072.3315,\r\n                                         low:  0.0014068,\r\n                                  changeRate:  -0.0209        },\r\n                        lot:    1e-8                                         }\r\n```\r\n\r\n- OS: fedora 23\r\n- Programming Language version: node 8.10\r\n- CCXT version: 1.11.137\r\n- Exchange: kucoin\r\n- Method: createLimitOrder\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2307/comments",
    "author": "bogdoslavik",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-19T17:55:00Z",
        "body": "For Kucoin you have to use `.currencies['PRL']['precision']` and `.currencies['ETH']['precision']` until we fix this issue in a unified way."
      }
    ]
  },
  {
    "number": 2304,
    "title": "Are exchange.markets base and quote supposed to be used as keys for exchange.currencies?",
    "created_at": "2018-03-19T07:14:14Z",
    "closed_at": "2018-03-20T00:29:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2304",
    "body": "My first post here so let me begin by saying how great this package is and how grateful I am to all of you supporting it!\r\n\r\nI didn't see it stated explicitly anywhere, but I have discovered that in most cases you can use the values from `exchange.markets[market]['base']` and `exchange.markets[market]['quote']` as keys into `exchange.currencies` (in the sense that it does not throw a `KeyError`). \r\n\r\nIs this behavior as designed, and is it intended to be reliable? Or is there another value from the markets dict which should be used as the lookup in the currencies dict for a given exchange?\r\n\r\nIf these keys and values are meant to be used this way then I can report that there are some instances where the base or quote value from `exchange.markets[market]` do not exist as keys in `exchange.currencies`. I can share the list here (or the code I used to generate it), if so. If not, please let me know what the appropriate way is to get currencies for a given market's base and quote.\r\n\r\nThanks!\r\n\r\n- OS: Mac\r\n- Programming Language version: Python 3.6.4\r\n- CCXT version: 1.11.135\r\n- Exchange: coinexchange, coinmarketcap, tidex (of those exchanges which do not require accounts to call load_markets)\r\n- Method: exchange.currencies dict\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2304/comments",
    "author": "gabemahoney",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-19T16:52:59Z",
        "body": "> Is this behavior as designed\r\n\r\nYep, this is by design...\r\n\r\n> and is it intended to be reliable?\r\n\r\nThe reliability is a difficult question, you'll understand this when you get more involved into communicating with exchanges that don't want to communicate whether via docs or by other means )) So, in general, you should treat this library as being under active development, in other words, as a work in progress or a yet unfinished work. The goal is indeed to make it so reliable.\r\n\r\n> If these keys and values are meant to be used this way then I can report that there are some instances where the base or quote value from exchange.markets[market] do not exist as keys in exchange.currencies. I can share the list here (or the code I used to generate it), if so.\r\n\r\nWhen dealing with inconsistencies we need to know the pair, the currency, the exchange in question as much as possible... Your code would also help resolve it quicker.\r\n\r\nThank you!"
      },
      {
        "user": "gabemahoney",
        "created_at": "2018-03-19T17:01:53Z",
        "body": "Hey Kroitor, thanks very much for your response. Yes, I understand things being in active development. I guess I meant \"as reliable as possible given the circumstances\" ;)\r\n\r\nHere is the code I ran and its results.\r\n```\r\nd = {'base':[],'quote':[]}\r\nfor e in ccxt.exchanges:\r\n    exchange = getattr (ccxt, e)()\r\n    try:\r\n        exchange.load_markets()\r\n    except:\r\n        # can't load some exchanges without an API key so skip them\r\n        continue\r\n\r\n    for market in exchange.markets:\r\n        base_key = exchange.markets[market]['base']\r\n        try:\r\n            exchange.currencies[base_key]\r\n        except KeyError:\r\n            if base_key not in d['base']:\r\n                d['base'].append(base_key)\r\n                print(\"Exchange %s missing base %s\" % (e, base_key))\r\n        quote_key = exchange.markets[market]['quote']\r\n        try:\r\n            exchange.currencies[quote_key]\r\n        except KeyError:\r\n            if quote_key not in d['quote']:\r\n                d['quote'].append(quote_key)\r\n                print(\"Exchange %s missing quote %s\" % (e, quote_key))\r\n```\r\nOUTPUT:\r\nExchange coinexchange missing base SYS\r\nExchange coinexchange missing base BITZ\r\nExchange coinexchange missing base LOOT\r\nExchange coinexchange missing base FOOT\r\nExchange coinexchange missing base PCM\r\nExchange coinexchange missing base REV\r\nExchange coinexchange missing base DOLLAR\r\nExchange coinexchange missing base ALTC\r\nExchange coinexchange missing base YOC\r\nExchange coinexchange missing base ANI\r\nExchange coinexchange missing base CAB\r\nExchange coinexchange missing base PAL\r\nExchange coinexchange missing base STRB\r\nExchange coinexchange missing base HAL\r\nExchange coinexchange missing base MEA\r\nExchange coinexchange missing base ORB\r\nExchange coinexchange missing base XCO\r\nExchange coinexchange missing base CC\r\nExchange coinexchange missing base CYT\r\nExchange coinexchange missing base MNM\r\nExchange coinexchange missing base COXST\r\nExchange coinexchange missing base CMT\r\nExchange coinexchange missing base SCT\r\nExchange coinexchange missing base HVCO\r\nExchange coinexchange missing base BLU\r\nExchange coinexchange missing base SCN\r\nExchange coinexchange missing base DLC\r\nExchange coinexchange missing base XBTS\r\nExchange coinexchange missing base STC_OL\r\nExchange coinexchange missing base USC\r\nExchange coinexchange missing base MIU\r\nExchange coinexchange missing base YOVI\r\nExchange coinexchange missing base XVE\r\nExchange coinexchange missing base PULSE\r\nExchange coinexchange missing base GAM\r\nExchange coinexchange missing base PRO\r\nExchange coinexchange missing base CLD\r\nExchange coinexchange missing base OXY\r\nExchange coinexchange missing base SICOLD\r\nExchange coinmarketcap missing quote AUD\r\nExchange coinmarketcap missing quote BRL\r\nExchange coinmarketcap missing quote CAD\r\nExchange coinmarketcap missing quote CHF\r\nExchange coinmarketcap missing quote CNY\r\nExchange coinmarketcap missing quote EUR\r\nExchange coinmarketcap missing quote GBP\r\nExchange coinmarketcap missing quote HKD\r\nExchange coinmarketcap missing quote IDR\r\nExchange coinmarketcap missing quote INR\r\nExchange coinmarketcap missing quote JPY\r\nExchange coinmarketcap missing quote KRW\r\nExchange coinmarketcap missing quote MXN\r\nExchange coinmarketcap missing quote RUB\r\nExchange coinmarketcap missing quote USD\r\nExchange tidex missing base WETT\r\nExchange tidex missing base EETT\r\nExchange tidex missing base MGO\r\nExchange tidex missing base WSUR\r\nExchange tidex missing base INPAY"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-19T22:01:10Z",
        "body": "Alright, on the coinexchange, you basically listed the inactive markets, but the proper way of listing them would be:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nexchange = ccxt.coinexchange()\r\nexchange.load_markets()\r\npprint([symbol for symbol in exchange.markets if not exchange.markets[symbol]['active']])\r\n```\r\n\r\nOutput:\r\n\r\n[u'GAM/ETH', u'XYOC/BTC', u'XMRG/ETH', u'STRB/BTC', u'LOOT/BTC', u'USC/BTC', u'HVCO/BTC', u'XBTS/BTC', u'REV/BTC', u'LVPS/ETC', u'WYV/BTC', u'CLD/ETH', u'VONE/ETH', u'STRB/DOGE', u'ANI/BTC', u'BLU/BTC', u'XCS/BTC', u'CMT/BTC', u'ENTRC/ETH', u'PWR/BTC', u'GLTC/BTC', u'HONEY/ETC', u'AI/ETH', u'VOX/ETC', u'DOLLAR/BTC', u'XYOC/LTC', u'MNM/BTC', u'XMRG/BTC', u'KUBO/DOGE', u'SYS/BTC', u'BITZ/BTC', u'CC/BTC', u'MEA/BTC', u'PULSE/BTC', u'B3/BTC', u'ARGUSOLD/BTC', u'CREVA2/BTC', u'CLD/BTC', u'YOC/BTC', u'LTG/ETH', u'STC_OL/BTC', u'FOOT/BTC', u'ERA/ETC', u'SICOLD/BTC', u'AMS/BTC', u'LTG/BTC', u'CAB/BTC', u'HAL/BTC', u'YOVI/BTC', u'XVE/BTC', u'PIE/BTC', u'PCM/BTC', u'DLC/BTC', u'COXST/BTC', u'GAM/BTC', u'AI/BTC', u'GP/ETC', u'SCOREOLD/BTC', u'KUBO/BTC', u'XYOC/ETC', u'ALTC/BTC', u'PRO/BTC', u'PWR/DOGE', u'OXY/BTC', u'SCT/BTC', u'ORB/BTC', u'SCN/BTC', u'XCO/BTC', u'CYT/BTC', u'VONE/BTC', u'GOKUOLD/BTC', u'ENTRC/BTC', u'CHESS/BTC', u'PAL/BTC', u'MIU/BTC']\r\n\r\n↑ These are all the same symbols that you've listed above, so there's no wonder they're missing in currencies – those markets aren't active anymore, and the tokens themselves are disabled with coinexchange.\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-20T00:42:04Z",
        "body": "The Tidex inconsistencies were fixed in ccxt 1.11.141"
      },
      {
        "user": "gabemahoney",
        "created_at": "2018-03-20T02:17:24Z",
        "body": "Thank you, I was not aware of the market `active` key. I modified the script so that it would check for active, and if it was False, disregard the market. The script still finds a number of missing symbols in CoinmarketCap and Tidex (just FYI). Thanks for all the help!\r\n\r\n```d = {'base':[],'quote':[]}\r\nfor e in ccxt.exchanges:\r\n    exchange = getattr (ccxt, e)()\r\n    try:\r\n        exchange.load_markets()\r\n    except:\r\n        # can't load some exchanges without an API key so skip them\r\n        continue\r\n\r\n    for market in exchange.markets:\r\n        try:\r\n            active = exchange.markets[market]['active']\r\n        except KeyError:\r\n            # if 'active' key does not exist, assume active\r\n            active = True\r\n        if active:\r\n            base_key = exchange.markets[market]['base']\r\n            try:\r\n                exchange.currencies[base_key]\r\n            except KeyError:\r\n                if base_key not in d['base']:\r\n                    d['base'].append(base_key)\r\n                    print(\"Exchange %s missing base %s\" % (e, base_key))\r\n            quote_key = exchange.markets[market]['quote']\r\n            try:\r\n                exchange.currencies[quote_key]\r\n            except KeyError:\r\n                if quote_key not in d['quote']:\r\n                    d['quote'].append(quote_key)\r\n                    print(\"Exchange %s missing quote %s\" % (e, quote_key))```\r\n\r\nOUTPUT:\r\nExchange coinmarketcap missing quote AUD\r\nExchange coinmarketcap missing quote BRL\r\nExchange coinmarketcap missing quote CAD\r\nExchange coinmarketcap missing quote CHF\r\nExchange coinmarketcap missing quote CNY\r\nExchange coinmarketcap missing quote EUR\r\nExchange coinmarketcap missing quote GBP\r\nExchange coinmarketcap missing quote HKD\r\nExchange coinmarketcap missing quote IDR\r\nExchange coinmarketcap missing quote INR\r\nExchange coinmarketcap missing quote JPY\r\nExchange coinmarketcap missing quote KRW\r\nExchange coinmarketcap missing quote MXN\r\nExchange coinmarketcap missing quote RUB\r\nExchange coinmarketcap missing quote USD\r\nExchange tidex missing base WETT\r\nExchange tidex missing base EETT\r\nExchange tidex missing base MGO\r\nExchange tidex missing base WSUR\r\nExchange tidex missing base INPAY"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-20T02:20:12Z",
        "body": "@gabemahoney \r\n\r\n> The script still finds a number of missing symbols in CoinmarketCap and Tidex (just FYI).\r\n\r\nAs for Tidex, did you update ccxt to version 1.11.141? It should be fixed for the currencies you mentioned..."
      }
    ]
  },
  {
    "number": 2285,
    "title": "Webpack: Can't not bundle exchange javascript ",
    "created_at": "2018-03-16T19:17:51Z",
    "closed_at": "2018-03-28T14:54:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2285",
    "body": "I can not bundle cxchange files or the ccxt file with webpack 4.1.1. I tried all webpack issues in the ccxt issues section:\r\n```\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: {\r\n    // 'ccxt': './node_modules/ccxt/ccxt.js',\r\n    'liqui': './node_modules/ccxt/js/liqui.js',\r\n    // 'binance': './node_modules/ccxt/js/binance.js',\r\n    // 'ccxt': [\"babel-polyfill\", './node_modules/ccxt/ccxt.js']\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n    // library: 'ccxt',\r\n    // libraryTarget: 'commonjs'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /node_modules\\/ccxt\\/(.+)\\.js$/,\r\n        loader: \"babel-loader\",\r\n        options: {\r\n          babelrc: false,\r\n          cacheDirectory: false,\r\n          presets: [\"es2015\"],\r\n          plugins: [\"syntax-async-functions\", \"transform-regenerator\"]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\nIt print this error\r\n```\r\nwebpack:///./node_modules/ccxt/node_modules/fetch-ponyfill/build/fetch-browser.js?:9\r\n    var Promise = options && options.Promise || self.Promise;\r\n                                                     ^\r\n\r\nTypeError: Cannot read property 'Promise' of undefined\r\n    at fetchPonyfill (webpack:///./node_modules/ccxt/node_modules/fetch-ponyfill/build/fetch-browser.js?:9:54)\r\n    at Object.eval (webpack:///./node_modules/ccxt/js/base/Exchange.js?:47:144)\r\n    at eval (webpack:///./node_modules/ccxt/js/base/Exchange.js?:1391:30)\r\n    at Object.node_modulesCcxtJsBaseExchangeJs (/Users/ma/me/de/server/dist/liqui.js:82:1)\r\n    at __webpack_require__ (/Users/ma/me/de/server/dist/liqui.js:20:30)\r\n    at eval (webpack:///./node_modules/ccxt/js/liqui.js?:15:16)\r\n    at Object.node_modulesCcxtJsLiquiJs (/Users/ma/me/de/server/dist/liqui.js:250:1)\r\n    at __webpack_require__ (/Users/ma/me/de/server/dist/liqui.js:20:30)\r\n    at /Users/ma/me/de/server/dist/liqui.js:69:18\r\n    at Object.<anonymous> (/Users/ma/me/de/server/dist/liqui.js:1:10)\r\n    at Module._compile (module.js:652:30)\r\n    at loader (/Users/ma/me/de/server/node_modules/babel-register/lib/node.js:144:5)\r\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/ma/me/de/server/node_modules/babel-register/lib/node.js:154:7)\r\n    at Module.load (module.js:565:32)\r\n    at tryModuleLoad (module.js:505:12)\r\n    at Function.Module._load (module.js:497:3)\r\nerror An unexpected error occurred: \"Command failed.\r\nExit code: 1\r\nCommand: sh\r\nArguments: -c babel-node --presets=es2015 ./app.js\r\nDirectory: /Users/ma/me/de/server\r\nOutput:\r\n\".\r\ninfo If you think this is a bug, please open a bug report with the information provided in \"/Users/ma/me/de/server/yarn-error.log\".\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2285/comments",
    "author": "mahapo",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-28T16:43:41Z",
        "body": "@mahapo we would be happy if you would share a solution to this, if you found one... thx!"
      },
      {
        "user": "dgurudot",
        "created_at": "2022-04-21T18:37:29Z",
        "body": "@mahapo Can you please share the solution to this issue? \r\n\r\nIt is closed without an appropriate solution."
      }
    ]
  },
  {
    "number": 2279,
    "title": "jubi  fetchTickers exception",
    "created_at": "2018-03-16T11:18:05Z",
    "closed_at": "2018-03-16T18:12:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2279",
    "body": "\r\n{\"result\":false,\"code\":\"405\"} [ExchangeError] jubi {\"result\":false,\"code\":\"405\"}\r\n\r\n                                                   at handleErrors   ccxt/js/btcbox.js:310              throw new ExchangeError (feedback); // unknown message\r\n                                                   at responseBody   ccxt/js/base/Exchange.js:503       this.handleErrors (...args)                           \r\n                                                   at _tickCallback  internal/process/next_tick.js:188                                                       \r\n- OS: fedora 23\r\n- Programming Language version: node\r\n- CCXT version: ccxt@1.11.104 \r\n- Exchange: jubi\r\n- Method: fetchTickers\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2279/comments",
    "author": "bogdoslavik",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-16T18:12:19Z",
        "body": "The jubi exchange was shut down due to PBoC regulation issued in 2017. Hope it answers your question..."
      }
    ]
  },
  {
    "number": 2254,
    "title": "Bitmex: fetch_ohlcv optional parameters",
    "created_at": "2018-03-14T03:10:31Z",
    "closed_at": "2018-03-14T03:22:22Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2254",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.11.77\r\n- Exchange: Bitmex\r\n- Method: fetch_ohlcv()\r\n\r\nHi! \r\n  The Bitmex API supports returning only completed candles. However the CCXT library hard codes the request to return partial candles. I guess this is for unification of the method between exchanges?!?\r\n\r\nIs it possible to support specifying the `partial` parameter during the method call? This would be very useful. Perhaps it can be sent in the `params` dict and a check be made to see if `partial` exists? If not, use your default which is `True`?\r\n\r\nHere is the bitmex snippet below. \r\n\r\n```\r\ndef fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=100, params={}):\r\n        self.load_markets()\r\n        # send JSON key/value pairs, such as {\"key\": \"value\"}\r\n        # filter by individual fields and do advanced queries on timestamps\r\n        # filter = {'key': 'value'}\r\n        # send a bare series(e.g. XBU) to nearest expiring contract in that series\r\n        # you can also send a timeframe, e.g. XBU:monthly\r\n        # timeframes: daily, weekly, monthly, quarterly, and biquarterly\r\n        market = self.market(symbol)\r\n        request = {\r\n            'symbol': market['id'],\r\n            'binSize': self.timeframes[timeframe],\r\n            'partial': True,     # True == include yet-incomplete current bins\r\n            'count': limit,      # default 100, max 500\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2254/comments",
    "author": "Dave-Vallance",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-14T03:22:22Z",
        "body": "Hi!\r\n\r\n```Python\r\n# create the exchange\r\nimport ccxt \r\nbitmex = ccxt.bitmex()\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nsince = None\r\nlimit = 100\r\nparams = {'partial': False}  # ←-------------  here you go\r\n\r\n# the call:\r\ncandles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\nprint(bitmex.iso8601(candles[len(candles)-1][0]))\r\n```\r\n\r\nLet us know if it does not help."
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T03:40:01Z",
        "body": "Thank you - I will check it out!"
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T06:56:24Z",
        "body": "Hi @kroitor \r\n\r\nI took a look at the example. Unfortunately for me, the parameter does not seem to override the bitmex `partial` parameter.\r\n\r\nI extended your example code a little to test.\r\n\r\n```\r\nimport ccxt\r\nimport time\r\nbitmex = ccxt.bitmex()\r\n\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nsince = None\r\nlimit = 100\r\nparams = {'partial': False, 'reverse':True}  # ←-------------  here you go\r\n\r\n\r\n\r\nwhile True:\r\n    # the call:\r\n    candles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\n    print('{}: O: {} H: {} L:{} C:{}'.format(\r\n        bitmex.iso8601(candles[0][0]),\r\n        candles[0][1],\r\n        candles[0][2],\r\n        candles[0][3],\r\n        candles[0][4]))\r\n    time.sleep(3)\r\n```\r\n\r\nThis is the output: \r\n```\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9104.5\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104 C:9104\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9100.5\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9103\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9103\r\n```\r\n\r\nHere we can see that partial candle data is being delivered. The low and close starts to change towards the end even though the timestamp is the same. \r\n\r\nPerhaps I am missing something obvious? Apologies if that is the case. \r\n\r\nI appreciate your feedback!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-14T07:09:01Z",
        "body": "```Python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport ccxt\r\nimport time\r\nbitmex = ccxt.bitmex()\r\n\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nlimit = 100\r\nparams = {'partial': False}  # ←--------  no reversal\r\n\r\nwhile True:\r\n\r\n    # pay attention to since with respect to limit if you're doing it in a loop\r\n    since = bitmex.milliseconds () - limit * 60 * 1000 \r\n\r\n    candles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\n    num_candles = len(candles)\r\n    print('{}: O: {} H: {} L:{} C:{}'.format(\r\n        bitmex.iso8601(candles[num_candles - 1][0]),\r\n        candles[num_candles - 1][1],\r\n        candles[num_candles - 1][2],\r\n        candles[num_candles - 1][3],\r\n        candles[num_candles - 1][4]))\r\n    time.sleep(5)\r\n```\r\n\r\n```\r\nmbp:python igorkroitor$ python bitmex-fetch-ohlcv-with-extra-params.py\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n...\r\n```\r\n\r\nDoes this solve your issue?"
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T08:47:55Z",
        "body": "Hi @kroitor \r\n\r\nThanks, you are awesome! That does work. Great solution. \r\n\r\nIf I am reading it correctly, you are just taking the second to last timestamp in the list right? So does that mean the `partial` parameter is not affecting the results? (since partial results are still obtained).    "
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-14T08:52:55Z",
        "body": "> If I am reading it correctly, you are just taking the second to last timestamp in the list right? \r\n\r\nNo, you're not reading it correctly, i'm taking the last candle, because all indexes in an array are zero based. Thus:\r\n\r\n- candles[0] = first element\r\n- candles[1] = second element\r\n- candles[num_candles-1] = last element\r\n\r\nThis is the very basics of any programming course.\r\n\r\n> So does that mean the partial parameter is not affecting the results? (since partial results are still obtained).\r\n\r\nNope, the code above demonstrates exactly the opposite: the partial results are **not obtained** due to `{'partial': False}`, as the **last candle is not changing** over time.\r\n\r\n"
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T09:08:31Z",
        "body": "Apologies... must be getting tired here. Thanks again."
      },
      {
        "user": "goorooau",
        "created_at": "2018-06-01T08:15:14Z",
        "body": "I found I had to use `{'partial': 0}` rather than using the boolean False. It then did not show the current incomplete candle data... not sure if it's an issue on my machine or not.\r\nPython 2.7, Win10 64bit Pro, latest ccxt ver. Bitmex."
      },
      {
        "user": "kroitor",
        "created_at": "2018-06-01T13:19:47Z",
        "body": "@goorooau thx for the feedback!"
      },
      {
        "user": "xmatthias",
        "created_at": "2018-08-13T11:10:01Z",
        "body": "does `'partial': False` or `'partial': 0` work reliably against all exchanges or is this bitmex specific?\r\n\r\nif it's working against all exchanges ... i think it's missing from the documentation ..."
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-13T15:21:02Z",
        "body": "> does 'partial': False or 'partial': 0 work reliably against all exchanges or is this bitmex specific?\r\n\r\nIt is BitMEX-specific."
      }
    ]
  },
  {
    "number": 2250,
    "title": "Bitfinex fetchTickers failed to recognize NECUSD",
    "created_at": "2018-03-13T15:32:48Z",
    "closed_at": "2018-03-13T22:28:59Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2250",
    "body": "\r\n\r\n- OS: Ubuntu 16.04\r\n- Programming Language version: python 3.5.2\r\n- CCXT version:  ccxt==1.10.1242\r\n- Exchange: bitfinex\r\n- Method: fetchTickers\r\n\r\nEvery once in a while I receive the following error using bitfinex fetchTickers : \r\n  File \"/home/ubuntu/env/lib/python3.5/site-packages/ccxt/bitfinex.py\", line 387, in fetch_tickers\r\n    raise ExchangeError(self.id + ' fetchTickers() failed to recognize symbol ' + id + ' ' + self.json(ticker))\r\nccxt.base.errors.ExchangeError: bitfinex fetchTickers() failed to recognize symbol NECUSD {\"volume\":\"2438.6685917\",\"low\":\"0.86\",\"high\":\"1.09\",\"ask\":\"1.0\",\"bid\":\"0.8523\",\"mid\":\"0.92615\",\"last_price\":\"0.86\",\"pair\":\"NECUSD\",\"timestamp\":\"1520953076.949080844\"}\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2250/comments",
    "author": "lucasgadams",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-13T22:28:59Z",
        "body": "Duplicate: #2180"
      }
    ]
  },
  {
    "number": 2241,
    "title": "Kucoin precision",
    "created_at": "2018-03-13T11:16:07Z",
    "closed_at": "2018-03-13T23:53:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2241",
    "body": "So it seems that kucoin has a hardcoded precision of 8. However I think the relevant precision should be the 'tradePrecision' of the quote currency, in this case eth. Unfortunately this is hard to load into the market at runtime until we have the `loadX` methods in place as `fetchMarkets` is called before `fetchCurrencies`\r\n\r\n\r\n```>>> k.create_order('OMG/ETH', 'limit', 'buy', 0.9, 0.01712312341321234)\r\nkucoin {\"success\":false,\"code\":\"ERROR\",\"msg\":\"The precision of price(ETH) is incorrect. The precision of ETH is 7\",\"timestamp\":1520939313195,\"data\":null}\r\n```\r\n\r\n```\r\n>>> k.currencies['ETH']\r\n{'id': 'ETH', 'code': 'ETH', 'info': {'withdrawMinFee': 0.01, 'withdrawMinAmount': 0.1, 'withdrawFeeRate': 0.001, 'confirmationCount': 12, 'withdrawRemark': '', 'infoUrl': None, 'name': 'Ethereum', \r\n```\r\n\r\n**'tradePrecision': 7,**\r\n\r\n```\r\n'depositRemark': None, 'enableWithdraw': True, 'enableDeposit': True, 'coin': 'ETH'}, 'name': 'Ethereum', 'active': True, 'status': 'ok', 'fee': 0.01, 'precision': 7, 'limits': {'amount': {'min': 1e-07, 'max': 10000000.0}, 'price': {'min': 1e-07, 'max': 10000000.0}, 'cost': {'min': None, 'max': None}, 'withdraw': {'min': 0.1, 'max': 10000000.0}}}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2241/comments",
    "author": "frosty00",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-13T23:53:20Z",
        "body": "> So it seems that kucoin has a hardcoded precision of 8.\r\n\r\nYep, but that is true for markets, not for currencies.\r\n\r\nSo, from `createOrder` in `kucoin.js`:\r\n\r\n```JavaScript\r\nlet request = {\r\n            'symbol': market['id'],\r\n            'type': side.toUpperCase (),\r\n            'price': this.priceToPrecision (symbol, price),\r\n            'amount': this.truncate (amount, this.currencies[base]['precision']),\r\n        };\r\n```\r\n\r\n↑ this is why we use currency-precisions here, instead of market precisions...\r\n\r\nWe hope to resolve this as soon as we get those pending market-loading commits merged (in a few days).\r\n\r\nHope it answers your question. Let me if know if not ) Thx! )"
      },
      {
        "user": "frosty00",
        "created_at": "2018-03-14T08:38:49Z",
        "body": "This does not solve the issue. If I were to fix it with the same monkey patch you did it would be:\r\n\r\n```\r\nlet request = {\r\n            'symbol': market['id'],\r\n            'type': side.toUpperCase (),\r\n            'price': this.truncate (price, this.currencies[quote]['precision']),\r\n            'amount': this.truncate (amount, this.currencies[base]['precision']),\r\n        };\r\n```\r\n\r\nIf you read the error carefully \r\n\r\n```kucoin {\"success\":false,\"code\":\"ERROR\",\"msg\":\"The precision of price(ETH) is incorrect. The precision of ETH is 7\",\"timestamp\":1520939313195,\"data\":null}```\r\n\r\nIt says the **price** precision is incorrect (it should be 7). Since priceToPrecision uses market (hardcoded) precision it only works for pairs in which BTC is the quote, since it also has a precision of 8. Out of all the possible quote currencies this is the highest precision so it will not work with the other quote currencies kucoin offers.\r\n\r\n```\r\n>>> for c in ['BTC', 'ETH', 'NEO', 'USDT', 'KCS', 'BCH']:\r\n            print(c, k.currencies[c]['precision'])\r\n\r\nBTC 8\r\nETH 7\r\nNEO 6\r\nUSDT 6\r\nKCS 4\r\nBCH 8\r\n\r\n``` \r\n\r\n"
      },
      {
        "user": "frosty00",
        "created_at": "2018-03-14T08:40:45Z",
        "body": "> We hope to resolve this as soon as we get those pending market-loading commits merged (in a few days).\r\n\r\nIs this refering to the `load` and `loadPublic` etc group of methods or something else?"
      },
      {
        "user": "azharuniverse",
        "created_at": "2018-04-10T11:11:10Z",
        "body": "For me this request worked. Its opposite of @frosty00 \r\n```\r\nlet request = {\r\n            'symbol': market['id'],\r\n            'type': side.toUpperCase (),\r\n            'price': this.truncate (price, this.currencies[base]['precision']),\r\n            'amount': this.truncate (amount, this.currencies[quote]['precision']),\r\n        };\r\n```"
      },
      {
        "user": "frosty00",
        "created_at": "2018-04-10T12:56:36Z",
        "body": "@azharuniverse are you sure? I'll look into it, but I've made ~5 successful trades with my precision configuration. \r\n\r\nI do not think you are right - just go to the kucoin website and look at the different quotes and their relative price precisions. It should be obvious from that. All BTC are 8 and ETH are 7. Perhaps you've gotten your quotes and bases mixed up."
      }
    ]
  },
  {
    "number": 2234,
    "title": "how to test a single exchange",
    "created_at": "2018-03-13T04:28:14Z",
    "closed_at": "2018-03-13T04:29:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2234",
    "body": "@kroitor would you add more doc for how to speed up the development time with `run-tests` to test against a single exchange in the folder of js.\r\n\r\ni tried \r\n`node run-tests --js --myexchange` but it doesnt work. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2234/comments",
    "author": "jjhesk",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-13T04:29:59Z",
        "body": "@jjhesk \r\n\r\n> would you add more doc for how to speed up the development time with run-tests to test against a single exchange in the folder of js.\r\n\r\nYep, will add some more clarifications on that shortly.\r\n\r\n> i tried `node run-tests --js --myexchange` but it doesnt work.\r\n\r\nYou should try `node run-tests --js myexchange` (the exchange id without `--`). Hope it helps. Let us know if not. Thx!"
      },
      {
        "user": "jjhesk",
        "created_at": "2018-03-13T04:32:15Z",
        "body": "@kroitor is there a way that i can turn on a watch mode to test against one exchange in realtime? so that people can create exchange with light speed =)"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-13T04:34:39Z",
        "body": "@jjhesk 👍 well, not yet (unfortunately), but mocha can run some tests in \"watch mode\" and relaunch them upon any change. We currently don't support it entirely in exchange-tests (`node run-tests`), but we hope to migrate to mocha testing soon, after solving the arbitrary precision tasks, probably together with the other pending work. The idea is great, of course, we just didn't have enough time to set up all proper testing settings yet, most of tests are still in progress as well, as you know."
      }
    ]
  },
  {
    "number": 2223,
    "title": "bleutrade tickers bid / ask possible swapped",
    "created_at": "2018-03-12T09:27:21Z",
    "closed_at": "2018-03-13T12:42:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2223",
    "body": "Possible swapped bid and ask fields. Please check.\r\n\r\n- OS: fedora 23\r\n- Programming Language version: Node 9.6.1\r\n- CCXT version: 1.11.78\r\n- Exchange: bleutrade\r\n- Method: exchange.fetchTickers()\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2223/comments",
    "author": "bogdoslavik",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-12T18:38:53Z",
        "body": "> Possible swapped bid and ask fields. Please check.\r\n\r\nCan you clarify, please?\r\n\r\nYou can check it on your side as well:\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli bleutrade fetchTicker ETH/BTC\r\nbleutrade.fetchTicker (ETH/BTC)\r\n{      symbol:   \"ETH/BTC\",\r\n    timestamp:    1520879862000,\r\n     datetime:   \"2018-03-12T18:37:42.000Z\",\r\n         high:    0.0798999,\r\n          low:    0.07231341,\r\n          bid:    0.07338252,\r\n          ask:    0.077,\r\n         vwap:    undefined,\r\n         open:    undefined,\r\n        close:    undefined,\r\n        first:    undefined,\r\n         last:    0.07450002,\r\n       change:    -0.0006999800000000028,\r\n   percentage:    -0.9308244680851101,\r\n      average:    undefined,\r\n   baseVolume:    13.46226162,\r\n  quoteVolume:    1.01422626,\r\n         info: {     MarketName: \"ETH_BTC\",\r\n                 MarketCurrency: \"Ethereum\",\r\n                   BaseCurrency: \"Bitcoin\",\r\n                        PrevDay: \"0.07520000\",\r\n                           High: \"0.07989990\",\r\n                            Low: \"0.07231341\",\r\n                           Last: \"0.07450002\",\r\n                        Average: \"0.07533848\",\r\n                         Volume: \"13.46226162\",\r\n                     BaseVolume: \"1.01422626\",\r\n                      TimeStamp: \"2018-03-12 18:37:42\",\r\n                            Bid: \"0.07338252\",\r\n                            Ask: \"0.07700000\",\r\n                       IsActive: \"true\"                 } }\r\nmbp:ccxt igorkroitor$\r\n```\r\n\r\nCan we help with anything else here?"
      },
      {
        "user": "bogdoslavik",
        "created_at": "2018-03-13T12:42:08Z",
        "body": "Looks like my mistake. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-14T00:45:24Z",
        "body": "@viacheslavvbogdanov thx for reporting back anyways!"
      }
    ]
  },
  {
    "number": 2200,
    "title": "volume requested on bitfinex seems to be incomplete",
    "created_at": "2018-03-09T19:09:11Z",
    "closed_at": "2018-03-09T21:57:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2200",
    "body": "- OS: ubuntu 16.04\r\n- Programming Language version: python\r\n- CCXT version: last\r\n- Exchange: bitfinex\r\n- Method: fetch_ohlcv\r\n\r\nRequesting candles on bitfinex I get different values that I can see online on bitfinex platform. For example, I'm getting this candle:\r\n2018-03-09 15:56:00    8869.000000  8869.100000  8862.000000  8862.100000 2.721108\r\nwhich can be read as (open, high, low, close, volume)\r\nbut inspecting online I see:  8869  8869.1  8862  8862.1 5\r\n\r\nI mean, volume is wrong (2.72 != 5).\r\nHere is some code:\r\n```\r\nimport ccxt, datetime, pandas, numpy\r\nbitfinex = ccxt.bitfinex()\r\nn_data = 100\r\nsince = bitfinex.milliseconds() - n_data*60*1000\r\nres = bitfinex.fetch_ohlcv (\"BTC/USD\",  \"1m\",  since, n_data)\r\n\r\nres = numpy.array(res)\r\nres = res.transpose()\r\nres = {\"time\": res[0], \"open\":res[1], \"high\":res[2], \"low\":res[3], \"close\":res[4], \"volume\":res[5]}\r\nres = pandas.DataFrame(res)\r\nres[\"time\"] = res[\"time\"].apply(lambda x: datetime.fromtimestamp(x/1000.0))\r\nres = res.set_index(\"time\")\t\r\nprint(res)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2200/comments",
    "author": "fedecaccia",
    "comments": [
      {
        "user": "fedecaccia",
        "created_at": "2018-03-09T19:19:55Z",
        "body": "@kroitor don't worry, it's because 15:56 is the last minute. Data is just incomplete. But I don't understand why I've received the \"close\" parameter. Requesting the same candle a minute after I get the correct volume."
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-09T19:22:27Z",
        "body": "@fedecaccia i'll add that to the Manual for less confusion, thx! Would you mind if I close this now?"
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-03-09T19:24:36Z",
        "body": "Thanks to repply, but I don't understand  what means the \"close\" value in the last candle? Is that just the \"last\"?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-09T19:26:31Z",
        "body": "@fedecaccia \r\n\r\n> what means the \"close\" value in the last candle? Is that just the \"last\"?\r\n\r\n- OHLC = prices (quote currency, open, high, low, close)\r\n- V = volume (base currency)\r\n\r\nThus, `close` is the price of the last trade in quote currency."
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-03-09T19:31:29Z",
        "body": "I get it, but what I don't understand is why, if the last \"volume\" is incomplete, we get the \"close\" value."
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-09T19:32:47Z",
        "body": "@fedecaccia because the last volume is the total volume of all trades in the last candle, thus, it accumulates over time, while the closing price is the price of just one last trade in that candle, it just jumps from one last price to the next and so on until current candle is done and closed and the next one begins... Does this answer your question?"
      },
      {
        "user": "fedecaccia",
        "created_at": "2018-03-09T19:45:20Z",
        "body": "Suppose we are requesting the last candle, for example, 16:41 candle. Right now it is 16:40:45 so that last candle is incomplete. We get (open, high1, low1, close1, volume1). Except for the \"open\" value, all the other values can be modified in future (I mean, in the next 15 secs). Suppose we request that candle one minute later, we get: (open, high2, low2, close2, volume2). So, I think that \"close1\" was, indeed, \"last\" value."
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-09T19:48:04Z",
        "body": "@fedecaccia this is exactly what I'm saying too: the `close` of the unfinished candle can change until the candle is finally closed, so the last `close` (the `close` of the *current* candle) is the price of last trade in that candle. If it is a current candle, then it is current last trade price. The high/low can change as well. And the volume can also change."
      }
    ]
  },
  {
    "number": 2184,
    "title": "When i am getting private data like fetchMyTrades for bitfinex i am getting same data with keys and without keys so how i can get my private data with keys",
    "created_at": "2018-03-09T05:43:05Z",
    "closed_at": "2018-03-11T02:12:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2184",
    "body": "    const exchangeBitfinex = new ccxt.bitfinex({\r\n      apiKey: '123',\r\n      secret: '123'\r\n    })\r\n    exchangeBitfinex['adjustForTimeDifference'] = true;    \r\n    exchangeBitfinex['useServerTime'] = true;\r\n    exchangeBitfinex.verbose = true;\r\n    exchangeBitfinex.createOrder = true;\r\n    exchangeBitfinex['isNode'] = true;\r\n      exchangeBitfinex.loadMarkets()\r\n      console.log(exchangeBitfinex.loadMarkets());\r\n      exchangeBitfinex.fetchMyTrades('ETH/BTC', 1518983548636 - 2 * 24 * 60 * 60 * 1000).then((data) => {\r\n        console.log('fetchMarkets', data);\r\n      }).catch((err) => {\r\n        console.log('err,', err);\r\n      })\r\n       ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2184/comments",
    "author": "daniyalnagori",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-09T22:07:04Z",
        "body": "@daniyalnagori can you post you verbose output please?\r\n\r\nI'm not able to reproduce your issue:\r\n\r\ncode:\r\n\r\n```JavaScript\r\n'use strict';\r\n\r\nconst ccxt = require ('./ccxt.js')\r\n\r\nconst exchange = new ccxt.bitfinex({\r\n    apiKey: '123',\r\n    secret: '123',\r\n});\r\n\r\n;(async () => {\r\n    await exchange.loadMarkets ()\r\n    const trades = await exchange.fetchMyTrades ('ETH/BTC', 1518983548636 - 2 * 24 * 60 * 60 * 1000)\r\n    console.log (trades)\r\n}) ();\r\n\r\n```\r\n\r\n-----\r\n\r\nOutput:\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node\r\n> 'use strict';\r\n'use strict'\r\n>\r\n> const ccxt = require ('./ccxt.js')\r\nundefined\r\n>\r\n> const exchange = new ccxt.bitfinex({\r\n...     apiKey: '123',\r\n...     secret: '123',\r\n... });\r\nundefined\r\n>\r\n> ;(async () => {\r\n...     await exchange.loadMarkets ()\r\n...     const trades = await exchange.fetchMyTrades ('ETH/BTC', 1518983548636 - 2 * 24 * 60 * 60 * 1000)\r\n...     console.log (trades)\r\n... }) ();\r\nPromise {\r\n  <pending>,\r\n  domain:\r\n   Domain {\r\n     domain: null,\r\n     _events: { error: [Function: debugDomainError] },\r\n     _eventsCount: 1,\r\n     _maxListeners: undefined,\r\n     members: [] } }\r\n>\r\n> (node:5207) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: bitfinex {\"message\":\"Could not find a key matching the given X-BFX-APIKEY.\"}\r\n(node:5207) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\nAs you see from the above output, it returns an error for a bad key, as it should. I get the same output with your code. Which version of ccxt do you use?"
      }
    ]
  },
  {
    "number": 2159,
    "title": "Unexpected identifier 'params' in Exchange.js - TypeScript..",
    "created_at": "2018-03-07T16:24:39Z",
    "closed_at": "2018-03-08T12:12:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2159",
    "body": "Hello everyone,\r\nJust found an error in\r\n**ccxt/js/base/Exchange.js:353:26: JS ERROR SyntaxError: Unexpected identifier 'params'. Expected ';' after variable declaration.**\r\n\r\n- OS: macOs Sierra\r\n- Programming Language version: Typescript 2.7.2\r\n- CCXT version: ^1.11.41\r\n- Exchange: binance\r\n- Method:\r\nthis.binance = new ccxt.binance();\r\nconsole.log(this.binance);\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2159/comments",
    "author": "morzyns",
    "comments": [
      {
        "user": "morzyns",
        "created_at": "2018-03-08T12:12:30Z",
        "body": "It came out the issue is related with NativeScript iOS implementation that doesn't support async|await yet."
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-08T19:53:00Z",
        "body": "@morzyns thx for reporting back!"
      }
    ]
  },
  {
    "number": 2137,
    "title": "Bittrex error handling",
    "created_at": "2018-03-06T10:50:02Z",
    "closed_at": "2018-03-06T10:54:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2137",
    "body": "When calling an API function and there is an error, `throwExceptionOnError` gets called in the `request` function. If the error is unknown, no exception is thrown and the `request` function returns nothing, so response will be undefined.\r\n\r\nI suggest to throw `ExchangeError` after the `throwExceptionOnError` returns, just like in `handleErrors`.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2137/comments",
    "author": "rdbr",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-06T10:54:28Z",
        "body": "> I suggest to throw ExchangeError after the throwExceptionOnError returns, just like in handleErrors.\r\n\r\nWe can't do that unfortunately, because most often it's a recoverable ExchangeNotAvailable error... In order to fix it somehow, we need to see your verbose output and the code to reproduce it. We might add some handling for a yet-unknown error, if you could show it to us, Bittrex docs are very poor.\r\n\r\nHope it answers your question."
      },
      {
        "user": "rdbr",
        "created_at": "2018-03-06T11:42:13Z",
        "body": "The problem is that nothing is returned on unknown errors, I can only check if the return value is undefined.\r\n\r\nMy error is not really that important, because it is about the future unknown errors, but here is such an error when nothing is returned or thrown, while status is 200:\r\n`{\"success\":false,\"message\":\"INVALID_CURRENCY\",\"result\":null}`\r\n\r\nI think it is better to at least throw some kind of error, so the error can be handled by the client."
      }
    ]
  },
  {
    "number": 2134,
    "title": "inconsistent timeframes format ",
    "created_at": "2018-03-06T07:20:37Z",
    "closed_at": "2018-03-06T08:13:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2134",
    "body": "The issue is that the format of the exchange property timeframes is NOT consistent. \r\n```\r\nexchange_ids = ['binance', 'bitfinex', 'hitbtc', 'kucoin', 'kraken', 'poloniex', 'gdax', 'gemini', 'huobipro', 'okex']\r\nexchanges = [getattr(ccxt, str.lower())() for str in exchange_ids]\r\n[print(ex.timeframes) for ex in exchanges if hasattr(ex, 'timeframes')]\r\n```\r\n\r\nThe above code prints out some examples in the following:\r\n```\r\n{'1m': '1m', '3m': '3m', '5m': '5m', '15m': '15m', '30m': '30m', '1h': '1h', '2h': '2h', '4h': '4h', '6h': '6h', '8h': '8h', '12h': '12h', '1d': '1d', '3d': '3d', '1w': '1w', '1M': '1M'}\r\n{'1m': '1m', '5m': '5m', '15m': '15m', '30m': '30m', '1h': '1h', '3h': '3h', '6h': '6h', '12h': '12h', '1d': '1D', '1w': '7D', '2w': '14D', '1M': '1M'}\r\n{'1m': '1', '5m': '5', '15m': '15', '30m': '30', '1h': '60', '8h': '480', '1d': 'D', '1w': 'W'}\r\n{'1m': '1', '5m': '5', '15m': '15', '30m': '30', '1h': '60', '4h': '240', '1d': '1440', '1w': '10080', '2w': '21600'}\r\n{'5m': 300, '15m': 900, '30m': 1800, '2h': 7200, '4h': 14400, '1d': 86400}\r\n{'1m': 60, '5m': 300, '15m': 900, '30m': 1800, '1h': 3600, '2h': 7200, '4h': 14400, '12h': 43200, '1d': 86400, '1w': 604800, '1M': 2592000, '1y': 31536000}\r\n{'1m': '1min', '5m': '5min', '15m': '15min', '30m': '30min', '1h': '60min', '1d': '1day', '1w': '1week', '1M': '1mon', '1y': '1year'}\r\n{'1m': '1min', '3m': '3min', '5m': '5min', '15m': '15min', '30m': '30min', '1h': '1hour', '2h': '2hour', '4h': '4hour', '6h': '6hour', '12h': '12hour', '1d': '1day', '3d': '3day', '1w': '1week'}\r\n```\r\n\r\n\r\n`timeframes` is a hash and the values of it do not follow a format across exchanges. For example, some are like '1m' or '5m' that are no different from the keys. Some others are the actual duration in seconds which arguably is the desired format. Some others are just more descriptive keys such as '1min', '1day' and etc. \r\n\r\n\r\n- OS: \r\nOSX 10.13.3\r\n\r\n- Programming Language version: \r\nPython 3.6.4\r\n\r\n- CCXT version:\r\n1.10.760\r\n\r\n- Exchange:\r\nbinance\r\nbitfinex\r\nhitbtc\r\nkucoin\r\nkraken\r\npoloniex\r\ngdax\r\ngemini\r\nhuobipro\r\nokex\r\n\r\n- Method:\r\nthe property timeframes\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2134/comments",
    "author": "ws2367",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-06T08:13:43Z",
        "body": "`timeframes` is a hash, where keys are unified and values are exchange-specific, so, I don't see any inconsistencies. You should not rely on the values under the keys and their formats, as they are exchange-specific. The keys are exchange-agnostic and unified and can be safely used across exchanges, namely, the \"1m\", \"5m\", \"15m\", \"1h\", and so on – those are standardized. So, there isn't an issue here, it's a matter of interpretation. If you need to get the duration in seconds, use the parseTimeframe/parse_timeframe method. Hope it helps. Let us know if it does not answer your question. Thx!"
      },
      {
        "user": "ws2367",
        "created_at": "2018-03-09T16:36:12Z",
        "body": "makes sense. Thanks!"
      }
    ]
  },
  {
    "number": 2067,
    "title": "bitz fees issue",
    "created_at": "2018-02-27T09:58:33Z",
    "closed_at": "2018-02-27T22:19:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2067",
    "body": "\r\n- Programming Language version: python\r\n- CCXT version: __version__ = '1.10.1189'\r\n- Exchange: bitz\r\n\r\nHello. Some of structures in bitz have wrong format:\r\n 'funding': {\r\n                    'withdraw': {\r\n                        'BTC': '0.5%',\r\n                        'DKKT': '0.5%',\r\n                        'ETH': 0.01,\r\n.... \r\n\r\nit must be float, not str\r\n\r\nThank you\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2067/comments",
    "author": "alexsith",
    "comments": [
      {
        "user": "alexsith",
        "created_at": "2018-02-27T10:03:13Z",
        "body": "Oh.. I see it's just because they really have percent-based fee for withdrawal.. The first exchange with percent-based fee.."
      },
      {
        "user": "alexsith",
        "created_at": "2018-02-27T10:05:38Z",
        "body": "For my structures about fiat withdraw fee I used list [percentfee,  fixedfee]. I don't know if it helps in this case."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-27T22:19:23Z",
        "body": "@alexsith looks like you've figured it out. Let me know if we can help with anything else here. Closing it for now, if you don't mind... Feel free to reopen it if needed, or just ask questions, if any. Thx!"
      }
    ]
  },
  {
    "number": 2044,
    "title": "Binance receiving error code -2015 while using API keys",
    "created_at": "2018-02-25T09:09:25Z",
    "closed_at": "2018-02-25T13:36:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2044",
    "body": "Hi,\r\n \r\nI have created a new Binance account and set its API keys (read info, enable trading, IP access unrestricted).\r\nWhile trying to connect to my account programmaticly using CCXT, I get the following authorization error: `ccxt.base.errors.ExchangeError: binance: unknown error code: {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}`\r\nOS: Ubuntu 16 (happens on windows as well)\r\nProgramming language: Python 3.5 \r\nCCXT version: 1.10.1178\r\n\r\nWhen using `python-binance` library, I successfully connect to my account.\r\n\r\nThe code I use:\r\n```\r\nfrom binance.client import Client\r\nimport json\r\nimport ccxt\r\n\r\ndata = json.load(open('binance_auth.json'))\r\n\r\nclient = Client(\r\n    data['secret'],\r\n    data['key'])\r\n\r\napi = {\r\n                'apiKey': data['key'],\r\n                'secret': data['secret'],\r\n                'password': None,\r\n      }\r\nccxtBinance = ccxt.binance(api)\r\n\r\nprint(\"python-binance=\", client.get_account()) # succeeds\r\nprint (\"ccxt=\",ccxtBinance.fetchBalance())     # fails\r\n```\r\n\r\nThanks,\r\nLena",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2044/comments",
    "author": "lenak25",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-02-25T09:58:51Z",
        "body": "Try the following:\r\n\r\n```javascript\r\napi = {\r\n                'apiKey': data['secret'],\r\n                'secret': data['key'],\r\n      }\r\n```\r\n"
      },
      {
        "user": "lenak25",
        "created_at": "2018-02-25T11:22:44Z",
        "body": "Thanks @mkutny, it works for this account.\r\nI have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code. Any reason why for some accounts the API key and secret should be swapped, while for others not? Will there be a common solution for all?\r\nThanks,\r\nLena  "
      },
      {
        "user": "mkutny",
        "created_at": "2018-02-25T12:56:06Z",
        "body": "> Any reason why for some accounts the API key and secret should be swapped, while for others not?\r\n\r\nThey should NEVER be swapped. You just happened to mix them in your `binance_auth.json`.\r\n\r\n> I have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code.\r\n\r\nYour `python-binance` won't work with that pair."
      },
      {
        "user": "lenak25",
        "created_at": "2018-02-25T13:36:59Z",
        "body": "You are correct, my mistake.\r\nThanks, closing this."
      }
    ]
  },
  {
    "number": 2043,
    "title": "futures with different contracts",
    "created_at": "2018-02-25T08:30:31Z",
    "closed_at": "2018-02-25T15:54:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2043",
    "body": "When fetching the ticker or order book of BTC/USD (exchange: okex), I can only get the weekly futures contract. How can I get biweekly and quarterly contract? Or it is currently impossible in ccxt api?\r\n\r\nThx. \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2043/comments",
    "author": "ABO3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-25T15:54:52Z",
        "body": "> Or it is currently impossible in ccxt api?\r\n\r\nIt is possible:\r\n\r\n```JavaScript\r\n\r\nconst limit = undefined\r\n\r\n// this week\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'this_week'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'this_week'})\r\n\r\n// next week\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'next_week'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'next_week'})\r\n\r\n// quarter\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'quarter'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'quarter'})\r\n```\r\n\r\nUse the `contract_type` extra parameter. Let us know if it does not help.\r\n\r\n*UPD: edited fetchOrderBook call signatures"
      },
      {
        "user": "ABO3",
        "created_at": "2018-02-25T15:57:51Z",
        "body": "thx, that's helpful"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-25T15:59:57Z",
        "body": "@ABO3 sorry, there was a typo in my previous answer, I've corrected it. With fetchOrderBook, the extra params dictionary is the third argument, whereas the second argument is the order book depth limit (can be set to None/undefined if not needed). But the answer itself isn't changed significantly, you should still use extra params for exchange-specific things."
      }
    ]
  },
  {
    "number": 2039,
    "title": "verbose = False ignored",
    "created_at": "2018-02-24T14:55:10Z",
    "closed_at": "2018-02-26T19:05:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2039",
    "body": "Hello, \r\n\r\nI am using ccxt with the following information and it looks likeccxt is ignoring the verbose = False flag \r\n\r\nself.market=ccxt.poloniex({'apiKey':'','secret':'','verbose': False,'nonce': ccxt.Exchange.microseconds})\r\nthe terminal is floaded with http requests output\r\n\r\ni also tried using \r\nlogging.getLogger(\"requests\").setLevel(logging.CRITICAL)\r\nlogging.getLogger(\"urllib3\").setLevel(logging.CRITICAL)\r\n\r\nand nothing happened\r\n\r\n- OS: Ubuntu 16.04\r\n- Programming Language version: python 3.5\r\n- CCXT version: 1.10.1167\r\n\r\nupdate\r\ni installed version 1.10.1036 and it worked, it looks like something is different in version 1.10.1167\r\n- Exchange: Poloniex or bittrex\r\n- Method: fetch_ticker , fetch_ohlcv , fetch_balance \r\n\r\nRegards,",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2039/comments",
    "author": "AhmMontasser",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-24T21:20:17Z",
        "body": "@AhmMontasser can you please paste the smallest possible snippet of code to reproduce your problem?\r\n\r\nThis snippet does not output debug logging:\r\n\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.poloniex({'apiKey': '', 'secret': '', 'verbose': False})\r\nprint(exchange.fetch_ticker('ETH/BTC'))\r\n```\r\n\r\nThis ↑ is a minimal working snippet, I can paste it into my python and it will work. However, your lines don't constitute a small working program. If I paste them into my python, they won't even run as is. And having just one-liner code from you I can't really help you much.\r\n\r\nSo, I guess, you have some python logging enabled.\r\n\r\n> i also tried using\r\n> logging.getLogger(\"requests\").setLevel(logging.CRITICAL)\r\n> logging.getLogger(\"urllib3\").setLevel(logging.CRITICAL)\r\n\r\nNo need for those lines.\r\n\r\nStanding by for a follow-up from you. Need the smallest possible working snippet that does output verbose logging with verbose: False."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-26T19:05:59Z",
        "body": "I'm closing this, until we have a follow up further, if you don't mind. Feel free to reopen it if needed, or just ask questions if any. Thx!"
      }
    ]
  },
  {
    "number": 2029,
    "title": "Bibox fetchOrderBook, fetchL2OrderBook return zero array",
    "created_at": "2018-02-23T10:47:24Z",
    "closed_at": "2018-02-23T12:21:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2029",
    "body": "Hello!\r\n\r\n- OS: Windows\r\n- Programming Language version: Javascript\r\n- CCXT version: 1.10.713\r\n- Exchange: Bibox\r\n- Method: fetchOrderBook, fetchL2OrderBook\r\n\r\nRequests to fetchOrderBook, fetchL2OrderBook return zero array.\r\nBibox API function in CCXT fetch_order_book returns same zero array.\r\n\r\nGuess this problem cause bibox change fetch_order_book to depth.\r\n\r\nPlease help to fix. Thanks!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2029/comments",
    "author": "Cleric334",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-02-23T11:22:06Z",
        "body": "Try to upgrade and see if the problem is solved for you."
      },
      {
        "user": "mkutny",
        "created_at": "2018-02-23T12:32:12Z",
        "body": "```\r\nccxt> node examples/js/cli.js bibox fetchOrderBook ETH/BTC\r\nbibox.fetchOrderBook (ETH/BTC)\r\n{      bids: [ [0.08555769, 0.5686],\r\n               [0.08555363, 0.0144],\r\n               [0.08551, 0.006],\r\n               ...\r\n```"
      }
    ]
  },
  {
    "number": 1993,
    "title": "Timeline for websocket implementation",
    "created_at": "2018-02-21T13:52:33Z",
    "closed_at": "2018-02-21T14:51:50Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1993",
    "body": "Is there any timeline for websocket implementation? only for market data part. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1993/comments",
    "author": "ABO3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-21T14:51:50Z",
        "body": "> Is there any timeline for websocket implementation?\r\n\r\nNope. It will be available asap, but we can't tell the ETA. I'd suggest to move this discussion here: #56 as a duplicate, if you don't mind. Thx!"
      }
    ]
  },
  {
    "number": 1943,
    "title": "Why is createDepositAddress disabled on Bittrex exchange?",
    "created_at": "2018-02-18T10:04:24Z",
    "closed_at": "2018-02-18T11:24:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1943",
    "body": "I can't use the method `createDepositAddress` on the Bittrex exchange. The `has` property for the exchange says the method is not available. Why is it not available despite being outlined in the Bittrex API?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1943/comments",
    "author": "parthsaxena",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-18T11:22:55Z",
        "body": "> Why is it not available despite being outlined in the Bittrex API?\r\n\r\nIt is available, it's just that the `has['createDepositAddress']` is lying about Bittrex now. Will fix it shortly."
      },
      {
        "user": "parthsaxena",
        "created_at": "2018-02-18T11:24:16Z",
        "body": "When I try to use the method `createDepositAddress`, it says the method is not defined. Sorry if I am misunderstanding something, I just began to use this library!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-18T11:25:00Z",
        "body": "Oh, sorry, it is in fact false for Bittrex."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-18T11:25:44Z",
        "body": "(use fetchDepositAddress to check on that)"
      },
      {
        "user": "parthsaxena",
        "created_at": "2018-02-18T11:25:47Z",
        "body": "Will the method be added? The Bittrex API states that generating addresses is supported. For the Bittrex exchange, `fetchDepositAddress` only works on coins which the user has already created a deposit address for."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-18T11:29:11Z",
        "body": "@parthsaxena it is already implemented, you just need to call the fetchDepositAddress and check for status in the return. This will trigger address generation, if it wasn't created earlier."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-18T11:31:31Z",
        "body": "This is just how Bittrex works, let us know if this does not answer your question or doesn't help. Thx!"
      }
    ]
  },
  {
    "number": 1933,
    "title": "Fetching orderbook data of all market at once",
    "created_at": "2018-02-17T09:45:48Z",
    "closed_at": "2018-02-17T09:51:55Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1933",
    "body": "\r\n- OS: Win10\r\n- Programming Language version: Python 2.7.14\r\n- CCXT version: 1.10.1\r\n- Exchange: Cryptopia\r\n- Method: fetch_order_book\r\n\r\nI am looking for a way to fetch the best bid and ask price and amount for all markets:\r\n\r\nI changed this \r\norderbook = exchange.fetch_order_book (exchange.symbols[0])\r\n\r\nto this one to get the orderbook details for all markets\r\norderbook = cryptopia.fetch_order_book (cryptopia.symbols[0])\r\n\r\nbut I get this error: TypeError: 'NoneType' object has no attribute '__getitem__'\r\n\r\nis there a way to fetch this data for all markets in one go?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1933/comments",
    "author": "l0urdm",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-17T09:51:55Z",
        "body": "Your question has been answered here: #1930 "
      }
    ]
  },
  {
    "number": 1860,
    "title": "Make calculate_fee async",
    "created_at": "2018-02-10T14:39:15Z",
    "closed_at": "2018-02-10T20:05:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1860",
    "body": "I'm actually using python and the calculate_fee method with ccxt.async but it return a dict not a coro.\r\n\r\nexample:\r\n```\r\nimport ccxt.async as ccxt\r\nimport asyncio\r\n\r\nasync def fee():\r\n    bittrex = ccxt.bittrex()\r\n    await bittrex.load_markets()\r\n    fee = \\\r\n    await bittrex.calculate_fee('RCN/ETH','limit','sell',8004.00412983,0.00021422)\r\n    print(fee)\r\n\r\nloop = asyncio.get_event_loop()\r\nasyncio.ensure_future(fee())\r\nloop.run_forever()\r\n```\r\n\r\nerror\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/asyncio/tasks.py\", line 239, in _step\r\n    result = coro.send(None)\r\n  File \"test.py\", line 8, in fee\r\n    await bittrex.calculate_fee('RCN/ETH','limit','sell',8004.00412983,0.00021422)\r\nTypeError: object dict can't be used in 'await' expression\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1860/comments",
    "author": "jsecchiero",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-10T20:05:14Z",
        "body": "> but it return a dict not a coro\r\n\r\nThis is by design. That function does all the calculation locally and does not send any requests, so it does not have to be async at all. It's a plain linear method. So you should not *await* for it, just call it and save the result into a variable.\r\n\r\nLet us know if this does not answer your question."
      }
    ]
  },
  {
    "number": 1852,
    "title": "General Question about fetchOrderBook and timestamps",
    "created_at": "2018-02-09T13:38:22Z",
    "closed_at": "2018-03-29T01:27:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1852",
    "body": "How can we make sure that the info received is uptodate?\r\n\r\nWhen I deduct timestamp from new Date, for some exchanges i always get 0 as result.\r\nThis means that that particular timestamp is generated on my pc, and not sent by the exchange.\r\n\r\nWhich leads me to my question: If a timestamp is generated on my pc, what's the use of it?\r\nIs there a better way to check that I am getting the latest orderbook?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1852/comments",
    "author": "wannesdemaeght",
    "comments": [
      {
        "user": "wannesdemaeght",
        "created_at": "2018-02-09T13:45:49Z",
        "body": "```\r\nfor (let name in Exchanges.All){\r\n\tfor (let coin in coins){\r\n\t\texch[name].fetchL2OrderBook(Market[coin]).then((result) => {\r\n\t\t\tconsole.log(name, Market[coin], new Date() - result.timestamp);\r\n\t\t});\r\n\t};\r\n};\r\n```\r\n\r\n> Bitstamp LTC/BTC 4829\r\n> Kraken XRP/BTC 0\r\n> Bittrex LTC/BTC 0\r\n> Bittrex ETH/BTC 0\r\n> Bittrex XRP/BTC 0\r\n> Bitstamp BCH/BTC 3860\r\n> Bitstamp ETH/BTC 2876\r\n> Bitstamp XRP/BTC 3907\r\n> Gdax LTC/BTC 0\r\n> Bittrex BCH/BTC 0\r\n> Gdax ETH/BTC 0\r\n> Gdax BCH/BTC 0\r\n> Binance BCH/BTC 0\r\n> Binance LTC/BTC 0\r\n> Kraken BCH/BTC 0\r\n> Binance ETH/BTC 0\r\n> Binance XRP/BTC 0\r\n> Kucoin ETH/BTC 0\r\n> Kucoin LTC/BTC 0\r\n> Kucoin BCH/BTC 0\r\n> Kraken ETH/BTC 0\r\n> Kraken LTC/BTC 0\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-09T13:58:26Z",
        "body": "Hi!\r\n\r\nThx for the question!\r\n\r\nInitially the orderbook timestamp was designed to store the date returned from the exchange, however, many exchanges do not return any date at all, so the timestamp is filled with the client's timestamp upon receiving their response. But you are right, there's very little point in having a client timestamp there, so we think of setting it to `undefined` (`None/null`) if it isn't explicitly indicated in the answer. Some exchanges also report timestamps in headers, which complicates it a little bit. And still, I think we are going to unset the unknown values, so that the user could then detect if the timestamp is present and decide from there."
      },
      {
        "user": "wannesdemaeght",
        "created_at": "2018-02-09T16:13:11Z",
        "body": "As I suspected 😉\r\nI think it would be better to return the exchange timestamp. When there is none, return undefined.\r\n\r\nThe only usecase I can see for client timestamps is WS."
      }
    ]
  },
  {
    "number": 1831,
    "title": "Kucoin fetchOrder only working for open orders",
    "created_at": "2018-02-08T13:33:37Z",
    "closed_at": "2018-02-09T00:03:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1831",
    "body": "Hi,\r\n\r\nI was just checking kucoin fetchOrder which was added short while ago. But it does return OrderNotFound exception for closed order.\r\n\r\nWorks for Open orders as expected...\r\n\r\nIs this expected ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1831/comments",
    "author": "dnld23",
    "comments": [
      {
        "user": "Sarona93",
        "created_at": "2018-02-08T14:21:24Z",
        "body": "Hello, \r\nme too, I was just about to post same question here, \r\nI need to fetch_order by UUID and I get the message:\r\n> [Not Supported] kucoin fetch_order() not implemented yet (ignoring5)\r\n\r\nis there timeframe for implementing above function with Kucoin ?\r\n\r\nThank you."
      },
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:30:09Z",
        "body": "It's because the api of kucoin doens't return a result if your order is taken or canceled. Perhaps kucoin has a \"get all orders, open or closed\" call which could be used to simulate a call like this i dont remember(it would be more expensive for exchange and user though but not sure that matters). What i do is run a fetchorder and if i get an error i run fetchclosedorders and extract the relevant order."
      },
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:32:12Z",
        "body": "You are using old ccxt version Sarona(well, atleast if you are using python it should work. Idk about other languages)."
      },
      {
        "user": "dnld23",
        "created_at": "2018-02-08T14:39:26Z",
        "body": "@hippylover yes, i asked about it and if there is no solution, i will do same way as you mention. Its just more expensive, i dont know how sensitive kucoin is for api calls..."
      },
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:55:00Z",
        "body": "It should be fine as you would be running fetchorder most of the time and fetchclosed order only when the order has been taken. What i meant by expensive is if say if fetchorder is replaced by this possible \"get all orders\" call(im feeling too lazy today to check if this even exists) then more data would be downloaded and maybe the exchange has different api limits for it, i don't know."
      },
      {
        "user": "Sarona93",
        "created_at": "2018-02-08T17:51:10Z",
        "body": "@hippylover , yes, I just used the last version and \"fetch_order()\" was implemented there,\r\nThank you."
      },
      {
        "user": "wannesdemaeght",
        "created_at": "2018-02-08T18:37:03Z",
        "body": "fetchOrder should work on all orders for kucoin, open or closed, but sometimes their API is quirky.\r\nI've had orders return a 404 not found for days, and then when rechecked later, they do work.\r\n\r\nAs you have figured out, one workaround is to do fetchClosedOrders, which does return all orders.\r\n\r\nConcerning the  rate limit: afaik, kucoin has not implemented a limit yet."
      },
      {
        "user": "dnld23",
        "created_at": "2018-02-08T19:13:42Z",
        "body": "Thanks for very informative replies !"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-09T00:03:35Z",
        "body": "Closing this if you don't mind, thanks to @hippylover and @wannesdemaeght for their help. Feel free to reopen it if needed."
      }
    ]
  },
  {
    "number": 1819,
    "title": "Binding request to specific network interface",
    "created_at": "2018-02-07T20:47:03Z",
    "closed_at": "2018-02-10T01:29:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1819",
    "body": "Maybe this an enhancement. \r\n\r\nIs there a supported way to bind a ccxt request to a specific network interface?\r\n\r\nThank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1819/comments",
    "author": "incompletude",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-10T01:29:07Z",
        "body": "> Is there a supported way to bind a ccxt request to a specific network interface?\r\n\r\nYes, sure!\r\n\r\n- **JavaScript:** you can pass a custom `fetchImplementation` with a custom `agent` class in constructor params to bind to a specific IP (see docs for Node.js `http` and `node-fetch`)\r\n- **Python:** you can use whatever `session` options are supported with `python-requests` and `aiohttp`, for that you can pass a custom `session` in constructor params\r\n- **PHP:** you can use the `CURLOPT_INTERFACE` to bind underlying cURL to an IP, for that you can override `curlopt_interface` in constructor params.\r\n\r\nLet us know if this does not answer your question. Thx!"
      }
    ]
  },
  {
    "number": 1795,
    "title": "Please help ",
    "created_at": "2018-02-06T18:34:34Z",
    "closed_at": "2018-02-06T19:14:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1795",
    "body": "Hi everyone, im a newbie in js and i need your help.So this is my code and the main problem is that it doesnt return me eth and btc balances, just says promise pending and after gives me al info about balance on every currency \r\n\r\n```\r\nlet finalamountbinance\r\nlet getbalancebinance = async() => {\r\n    let count=0;\r\n    let balance\r\n    try{\r\n        balance = await binance.fetchBalance()\r\n        console.log(balance)\r\n    }\r\n    catch(BaseError){\r\n        getbalancebinance()\r\n    }\r\n    if(count==0){\r\n        finalamountbinance = balance.BTC.free\r\n        count++\r\n        final=0\r\n    }\r\n    if(count==1){\r\n        finalamountbinance = balance.ETH.free\r\n        count--\r\n        final=0\r\n    }\r\n}\r\nlet getbalanceyobit = async() => {\r\n    let balance\r\n    try{\r\n        balance = await yobit.fetchBalance()\r\n        console.log(yobit)\r\n    }\r\n    catch(BaseError){\r\n        getbalanceyobit()\r\n    }\r\n    return balance\r\n}\r\n\r\nfunction bot(){\r\n    getbalancebinance()\r\n    console.log(finalamountbinance)\r\n    getbalancebinance()\r\n    console.log(finalamountbinance)\r\n}\r\n\r\nbot()\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1795/comments",
    "author": "artbred",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-06T19:14:15Z",
        "body": "A straightforward answer to your question:\r\n\r\n```JavaScript\r\nlet finalamountbinance\r\nlet getbalancebinance = async() => {\r\n    let count=0;\r\n    let balance\r\n    try{\r\n        balance = await binance.fetchBalance()\r\n        console.log(balance)\r\n    }\r\n    catch(BaseError){\r\n        getbalancebinance()\r\n    }\r\n    if(count==0){\r\n        finalamountbinance = balance.BTC.free\r\n        count++\r\n        final=0\r\n    }\r\n    if(count==1){\r\n        finalamountbinance = balance.ETH.free\r\n        count--\r\n        final=0\r\n    }\r\n}\r\nlet getbalanceyobit = async() => {\r\n    let balance\r\n    try{\r\n        balance = await yobit.fetchBalance()\r\n        console.log(yobit)\r\n    }\r\n    catch(BaseError){\r\n        getbalanceyobit()\r\n    }\r\n    return balance\r\n}\r\n\r\n;(async function bot(){\r\n    await getbalancebinance()\r\n    console.log(finalamountbinance)\r\n    await getbalancebinance()\r\n    console.log(finalamountbinance)\r\n}) ()\r\n```\r\n\r\nHowever, I'm not responsible for the code quality, you need to practice more with general JS and JS promises."
      },
      {
        "user": "artbred",
        "created_at": "2018-02-06T19:20:15Z",
        "body": "Thank you very much"
      }
    ]
  },
  {
    "number": 1738,
    "title": "Hitbtc2 empty AVH market, payinEnabled, payoutEnabled, crypto and other fields missing",
    "created_at": "2018-02-02T20:03:20Z",
    "closed_at": "2018-02-02T20:09:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1738",
    "body": "I found this error with Hitbtc2 (but not Hitbtc):\r\n\r\nFile \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 844, in load_markets\r\n    currencies = self.fetch_currencies()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ccxt/hitbtc2.py\", line 616, in fetch_currencies\r\n    payin = currency['payinEnabled']",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1738/comments",
    "author": "alexlacey",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-02T20:09:15Z",
        "body": "Yep, for some reason their API started reporting this empty currency: `{\"id\":\"AVH\",\"fullName\":\"Animation Vision Cash\"}` but ccxt version 1.10.978 that is capable of handling it has already arrived, please update and retry once again. Let us know if this does not solve the issue for you. Thx!\r\n"
      },
      {
        "user": "alexlacey",
        "created_at": "2018-02-02T20:13:47Z",
        "body": "Wow, that was so fast. Thank you!"
      }
    ]
  },
  {
    "number": 1733,
    "title": "[Bug] Bittrex OHLCV not realtime?",
    "created_at": "2018-02-02T14:56:43Z",
    "closed_at": "2018-02-02T15:02:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1733",
    "body": "Here's how I'm doing the OHLCV requests:\r\n```\r\n  new ccxt[exchange]().fetchOHLCV(\r\n    'ETH/BTC\", \r\n    '1m',\r\n    undefined\r\n  )\r\n\r\n```\r\n\r\nAnd, here's the output for 3 exchange (binance, bittrex, okex):\r\n```\r\nokex:\r\nFri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbinance\r\n Fri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbittrex\r\nFri Feb 02 2018 21:49:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n```\r\n\r\nNotice how bittrex is lagging? I kept on running the script for a while, and bittrex OHLCV was consistently 3-4 min lagging behind.\r\nIs this a bug in my code, or a bug in the library?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1733/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-02T15:02:15Z",
        "body": "> Is this a bug in my code, or a bug in the library?\r\n\r\nThis is neither a bug in your code, nor a bug in the library. It's just how Bittrex works, and you can enable verbose mode (pass the `{'verbose': True}` to the constructor params), and check their URLs and reported values yourself. Bittrex does not have an official OHLCV API endpoint at all, and we use their undocumented v2.0 endpoint for that. Hope it answers your question. Thx!"
      },
      {
        "user": "ghost",
        "created_at": "2018-02-02T17:54:43Z",
        "body": "Wow! I checked their own website, and I get the same 'delay' on their own charts. That's really not a good thing at all, but that's beyoud the scope of this library.\r\nYour answer makes total sense. Thx a lot!"
      }
    ]
  },
  {
    "number": 1680,
    "title": "Binance Features Mismatch",
    "created_at": "2018-02-01T02:32:04Z",
    "closed_at": "2018-02-01T07:20:13Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1680",
    "body": "\r\n- OS: Mac\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.10.944\r\n- Exchange: Binance\r\n- Method: Features\r\n\r\nIn this version `exchange.hasFetchMyTrades == False` but `exchange.has['fetchMyTrades'] == True`. The latter syntax appears to hold the correct value so I switched to that. Both were equal in earlier versions.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1680/comments",
    "author": "fredfortier",
    "comments": [
      {
        "user": "Deathamns",
        "created_at": "2018-02-01T07:13:05Z",
        "body": "The former style was deprecated, also removed in recent versions, so stop depending on it.\r\n`has.feature` is the proper way."
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-01T07:20:13Z",
        "body": "@fredfortier the above answer given by @Deathamns is correct, we are migrating to the new metainfo format. Sorry for the inconvenience."
      }
    ]
  },
  {
    "number": 1620,
    "title": "Is there any ETA for websockets support?",
    "created_at": "2018-01-30T11:20:12Z",
    "closed_at": "2018-01-30T11:28:45Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1620",
    "body": "Hi,\r\n\r\nI would like to apologize if this is not the right way to answer this kind of questions, but didn't see any other way to get in touch with you.\r\n\r\nJust wanted to know if there's any ETA for WebSupport in this awesome lib. Mainly for graph drawing and order book updating.\r\n\r\nThanks a lot in advance, you're doing a magnificient work!\r\nCheers.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1620/comments",
    "author": "hexdump2002",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-30T11:28:45Z",
        "body": "@hexdump2002 it's all here: #56 \r\n\r\nI suggest to move this discussion to that post. Closing this for now as a duplicate, if you don't mind. Thx!"
      }
    ]
  },
  {
    "number": 1536,
    "title": "hasFetchTickers property wrong in WEX (Python)",
    "created_at": "2018-01-27T17:40:19Z",
    "closed_at": "2018-01-27T17:52:50Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1536",
    "body": "- OS: MacOS 10.12.6\r\n- Programming Language version: Python3.6\r\n- CCXT version: 1.10.873\r\n- Exchange: WEX\r\n\r\nhasFetchTickers property is False (wrong)\r\nhas['fetchTickers'] property is True (correct)\r\n\r\nI suppose it has something to do with class inheritance from liqui, but I can't find out why. \r\nhasFetchTickers is correct with other exchanges (e.g. Kraken)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1536/comments",
    "author": "2msd",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-27T17:52:50Z",
        "body": "We are migrating to the new metainfo format, that is the `.has = {}` property that we are making now to reflect the truth, and the older separate `.has***` properties are now deprecated. Please update your code. Thx, and sorry for the inconvenience! Hope to finish the migration asap with as little pain as possible. Let me know if I can help with anything else or if I didn't answer your question."
      }
    ]
  },
  {
    "number": 1522,
    "title": "hasFetchOHLCV result different from exchange.has for multiple exchanges",
    "created_at": "2018-01-27T00:01:17Z",
    "closed_at": "2018-01-27T00:04:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1522",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.6.4\r\n- CCXT version: 1.10.854\r\n- Exchange: bittrex, gdax, maybe others\r\n- Method: hasFetchOHLCV\r\n```\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> bittrex = getattr(ccxt, 'bittrex')({'verbose': True})\r\n>>> bittrex.hasFetchOHLCV\r\nFalse\r\n>>> bittrex.has.get('fetchOHLCV')\r\nTrue\r\n>>> gdax = getattr(ccxt, 'gdax')({'verbose': True})\r\n>>> gdax.hasFetchOHLCV\r\nFalse\r\n>>> gdax.has.get('fetchOHLCV')\r\nTrue```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1522/comments",
    "author": "justinxjx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-27T00:04:43Z",
        "body": "The `hasFetchOHLCV` is now deprecated (as well as other properties alike). The new metainfo interface is contained within `.has = { }` dictionary. We are removing the outdated properties for more order. Let us know if you find some exchanges with incorrect values in their `.has = { }` property. We will update them appropriately. Hope it answers your question."
      },
      {
        "user": "justinxjx",
        "created_at": "2018-01-27T02:59:57Z",
        "body": "Yes. That answers the question. I apologize if I missed seeing that deprecation somewhere."
      }
    ]
  },
  {
    "number": 1506,
    "title": "how can i use coinegg api?",
    "created_at": "2018-01-26T00:57:38Z",
    "closed_at": "2018-01-26T01:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1506",
    "body": "",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1506/comments",
    "author": "qiangxs",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-26T01:00:35Z",
        "body": "> is coinegg api can be used now?\r\n\r\nNot yet, but it will be, soon. It is in progress. We will announce it and labeled properly, so, you won't miss it, no worries. Will let you know. I hope it answers your question."
      }
    ]
  },
  {
    "number": 1492,
    "title": "fetch_balance on bleutrade and cryptopia",
    "created_at": "2018-01-25T11:58:30Z",
    "closed_at": "2018-01-25T12:29:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1492",
    "body": "- OS: MacOS High Sierra v10.13.2\r\n- Programming Language version: Python 3.6\r\n- CCXT version:\r\n- Exchange: bleutrade and cryptopia\r\n- Method: fetch_balance()\r\n\r\nFetching my balance from both bleutrade and cryptopia doesn't work in my project. \r\n\r\nBLEUTRADE:\r\n```\r\nbleutrade = ccxt.bleutrade({\r\n    'apiKey': 'MY_OWN_API',\r\n    'secret': 'MY_OWN_SECRET',\r\n})\r\nbleutrade.load_markets()\r\n\r\nprint(bleutrade.fetch_balance())\r\n```\r\n-----\r\nThis returns the error:\r\n```\r\n   print(bleutrade.fetch_balance())\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ccxt/bittrex.py\", line 202, in fetch_balance\r\n    balances = response['result']\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n---\r\nCRYPTOPIA:\r\n```\r\nCryptopia = ccxt.cryptopia()\r\ncryptopia.load_markets()\r\ncryptopia.apiKey = 'MY_OWN_API'\r\ncryptopia.secret = 'MY_SECRET'\r\nprint(cryptopia.fetchbalance())\r\n```\r\n----\r\nThis causes my Python Shell to stop responding. Shell has been running for over 10 minutes, so I'm guessing that something went wrong.\r\n\r\nCould you please help?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1492/comments",
    "author": "TJoostenNL",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:00:59Z",
        "body": "Need to do it step by step. Let's start with bleutrade.\r\n\r\n1. Does this work?\r\n\r\n```Python\r\nimport ccxt\r\nprint(ccxt.bleutrade().load_markets())\r\n```\r\n\r\n?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:04:05Z",
        "body": "This causes my python Shell to stop responding so far for about 1 minute"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:05:05Z",
        "body": "What's your version of ccxt?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:06:33Z",
        "body": "good question, how do I check that (sorry: newbe)"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:07:22Z",
        "body": "> how do I check that\r\n\r\n```\r\npip list\r\n```\r\n\r\nHow do you launch your shell?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:08:58Z",
        "body": "@TJoostenNL if you copypasted the two lines of code from above into your shell, you have to press Enter after that in order to execute the last one. Otherwise it will stay on that last line waiting for your next move, and it would appear as if nothing happens. Are you sure you know how to code in Python?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:09:59Z",
        "body": "Just starting, but I'm finding my way around. But hitting enter is not te problem ;)\r\n"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:10:29Z",
        "body": "python3.6 installed on Mac, starting shell via programs / python 3.6 idle"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:11:28Z",
        "body": "ccxt is version 1.10.809 with pip3  list\r\nand version 1.10840 with pip list"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:12:30Z",
        "body": "I just ran pip3 install ccxt --upgrade, so now that is also 1.10.840\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:13:25Z",
        "body": "> I just ran pip3 install ccxt --upgrade, so now that is also 1.10.840\r\n\r\nI guess you've opened your Terminal to run that, right?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:13:40Z",
        "body": "sure\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:15:09Z",
        "body": "Ok, then you can launch your python from your Terminal as well.\r\n\r\nDo this in your terminal:\r\n\r\n```\r\npython --version\r\npython3 --version\r\n```\r\n\r\nWhat do you see there?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:16:58Z",
        "body": "python is version 3.6.3. :: anaconda, inc\r\npython3 is version 3.6.4"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:18:03Z",
        "body": "running:\r\n```\r\nimport ccxt\r\nprint(ccxt.bleutrade().load_markets()) \r\n```\r\nin my terminal gives the list of markets no problem btw"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:19:35Z",
        "body": "Ok, I was going to write how to test it in your terminal. So, this is your setup issue. And, without actually having access to your mac, it would be hard to help. Try not launching it from Programs, because some different Python gets launched, because you installed many of them somehow? Maybe, try a full clean reinstall of all python-related things?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:21:37Z",
        "body": "Ok, I'm gonna try to uninstall and see what that does thanx for the help so far"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-25T12:22:08Z",
        "body": "@TJoostenNL would you mind if I close it for now? Feel free to reopen it if needed, or just ask questions, if any. Ok?"
      },
      {
        "user": "TJoostenNL",
        "created_at": "2018-01-25T12:28:25Z",
        "body": "yeah, no problem."
      }
    ]
  },
  {
    "number": 1486,
    "title": "js: fetchTicker works? maybe I screwed up (code inside)",
    "created_at": "2018-01-25T09:18:45Z",
    "closed_at": "2018-01-25T09:47:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1486",
    "body": "why this code not working? Please help!\r\n``` javascript \r\n\"use strict\";\r\nconst log       = require ('ololog').noLocate\r\n    , ccxt      = require ('../../ccxt.js')\r\nlet printTicker = async (data) => {\r\n    var index;\r\n    while (true) {\r\n        for (index = 0; index < data.length; ++index) {\r\n            var exc = new ccxt[data[index][0]]({ enableRateLimit: true , verbose: true, timeout: 60000});\r\n            log(data[index][1]);\r\n\r\n            const tmp = await exc.fetchTicker(data[index][1]);\r\n            log(tmp['bid']) // dont print\r\n        }\r\n    }\r\n}\r\n;(async function main () {\r\n        printTicker ([['binance', 'BTC/USDT', 1, 11500, 10000, 'bid'],\r\n                        ['bittrex', 'ETH/USDT', 1, 11, 13, 'bid']]);\r\n    process.exit ()\r\n}) ()\r\n```\r\n\r\n- OS: Win 7, 64bit\r\n- Programming Language version: node.js 9.3.0\r\n- CCXT version: 1.10.838\r\n- Exchange: binance\r\n- Method: fetchTicker \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1486/comments",
    "author": "yaskhan",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-25T09:47:16Z",
        "body": "We can't teach you JavaScript programming here, you better find appropriate tutorials. Describing each error in your code and explaining why it is an error would require writing a book from me here just for you. Sorry, but even if I wanted to, I can't possibly have time to teach everyone. Learn it yourself. Find info. Look through examples. Do it with minimal incremental changes and see the difference. This how most people make progress. No shortcuts here.\r\n\r\n```JavaScript\r\n\"use strict\";\r\nconst log  = require ('ololog').noLocate\r\n    , ccxt = require ('./ccxt.js')\r\n\r\nconst config = {\r\n    enableRateLimit: true,\r\n    timeout: 60000,\r\n}\r\n\r\nconst printTicker = async (id, symbol, number1, number2, number3, side) => {\r\n\r\n    const exchange = new ccxt[id] (config);\r\n\r\n    while (true) {\r\n        const ticker = await exchange.fetchTicker (symbol);\r\n        log (exchange.id, symbol, ticker[side])\r\n    }\r\n}\r\n\r\n;(async function main () {\r\n\r\n    [\r\n        ['binance', 'BTC/USDT', 1, 11500, 10000, 'bid'],\r\n        ['bittrex', 'ETH/USDT', 1, 11,    13,    'bid'],\r\n\r\n    ].map (data => printTicker (... data))\r\n\r\n}) ()\r\n```\r\n\r\nSorry, but I'm closing this issue."
      }
    ]
  },
  {
    "number": 1462,
    "title": "where to store the exchange logo images",
    "created_at": "2018-01-24T07:25:11Z",
    "closed_at": "2018-01-24T07:34:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1462",
    "body": "i know there is a cdn for the images storage. is there a place for that too? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1462/comments",
    "author": "jjhesk",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-24T07:31:01Z",
        "body": "We don't store any images, all logos are stored on GitHub. You should not rely on them at all in the app-logic as they are not guaranteed to be 24/7/365 accessible, those are for building the tables mostly."
      }
    ]
  },
  {
    "number": 1432,
    "title": "HitBTC -> hitbtc $order $amount should be evenly divisible by lot unit size of 1000",
    "created_at": "2018-01-22T20:55:48Z",
    "closed_at": "2018-01-22T21:01:16Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1432",
    "body": "Hi, im getting the following error when executing a limit sell order on HitBTC:\r\n\r\n`$hitbtc->createLimitSellOrder('XVG/BTC', '210.49790575916', '0.00000955');`\r\n\r\n`hitbtc $order $amount should be evenly divisible by lot unit size of 1000`\r\n\r\nHow should I interpret this? Which should be divisible by 1000, the total amount of the order? In this specific trade, the trade amount would be 0.002010255 BTC. What should my trade amount be for this trade to continue?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1432/comments",
    "author": "darthf1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:01:16Z",
        "body": "When you submit an order you pass the amount and the price.\r\n\r\n```\r\n$hitbtc->createLimitSellOrder($symbol, $amount, $price);\r\n```\r\n\r\nIn this specific trade the amount is 210.497905575916\r\n\r\n```\r\n$hitbtc->load_markets();\r\necho $hitbtc->markets[$symbol]['lot'] . \"'\\n\";\r\n```\r\n\r\nThe amount should be divisible by lot size.\r\nLet us know if this does not answer your question."
      },
      {
        "user": "darthf1",
        "created_at": "2018-01-22T21:03:58Z",
        "body": "Thanks for your reply! Does this mean the minimal trade amount should be 1000, instead of 210? So I can only sell 1000, 2000, 3000 etc XVG?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:10:16Z",
        "body": "@darthf1 is your version up to date? The error message has changed now. Can you update and try again? The lot size is 1 for XVG/BTC, so your amounts should be 239, 240, 241..."
      },
      {
        "user": "darthf1",
        "created_at": "2018-01-22T21:29:15Z",
        "body": "I checked `composer.lock` and I am at `1.10.809`.\r\n\r\nGot the same error with the same trade.\r\n`hitbtc $order $amount should be evenly divisible by lot unit size of 1000`\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:32:09Z",
        "body": "@darthf1 yes, sorry, I was looking at Binance instead of HitBTC. With HitBTC the lot size for XVG/BTC is indeed 1000, so, yes, 1000, 2000, 3000, etc."
      },
      {
        "user": "darthf1",
        "created_at": "2018-01-22T21:36:34Z",
        "body": "Ok thanks!"
      }
    ]
  },
  {
    "number": 1390,
    "title": "remove need to supply cost param in OKEX createOrder",
    "created_at": "2018-01-20T17:22:42Z",
    "closed_at": "2018-01-20T18:09:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1390",
    "body": "- OS: Linux\r\n- Programming Language version: JS\r\n- CCXT version: 1.10.780\r\n- Exchange:OKEX\r\n- Method:createOrder\r\n\r\nI do not understand why I have to supply additional costs param:\r\n\r\n```\r\n                if (side === 'buy') {\r\n                    order['price'] = this.safeFloat (params, 'cost');\r\n                    if (!order['price'])\r\n                        throw new ExchangeError (this.id + ' market buy orders require an additional cost parameter, cost = price * amount');\r\n                }\r\n```\r\n\r\nSince the method signature is\r\n\r\n    async createOrder (symbol, type, side, amount, price = undefined, params = {})\r\n\r\nwhy not just use amount and fetch ticker for latest ask price for given symbol? would be much more elegant, even though it requires one API call more.\r\n\r\nIf you agree, I will work on this change @kroitor ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1390/comments",
    "author": "michnovka",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-20T18:09:24Z",
        "body": "> would be much more elegant, even though it requires one API call more\r\n\r\nUnfortunately, can't do that. Can't decide for the user which request should be next and how much time should be spent waiting for those requests to be executed. Therefore the policy throughout the library is to make one HTTP request per one call to keep it explicit (and let the user decide). This boils down to rate-limiter reasons, explained here: #1175.\r\n\r\n> why not just use amount and fetch ticker for latest ask price for given symbol?\r\n\r\nThat is exactly what the user is required to do by means of the library, but the library won't do it for you. It offers methods, but doesn't solve any possible user-level use-case. You will have to code the business logic in userland, because the library can't decide that for you (the desired behaviour may be all too different for other users). Say, I want to fetch the ticker and place two orders after that. If we fetch tickers anywhere we like, we will quickly render the whole library unusable.\r\n\r\nHope it answers your question. Let me know, if not. Thx!"
      }
    ]
  },
  {
    "number": 1371,
    "title": "python: self.markets is not properly set",
    "created_at": "2018-01-19T16:50:09Z",
    "closed_at": "2018-01-19T18:08:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1371",
    "body": "```python\r\nimport ccxt\r\nclient = ccxt.binance()\r\nclient.amount_to_lots('BNB/BTC', 0.0013)\r\n```\r\ntraceback:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-13-87766f8ff3f2> in <module>()\r\n      1 import ccxt\r\n      2 client = ccxt.binance()\r\n----> 3 client.amount_to_lots('BNB/BTC', 0.0013)\r\n\r\n~/miniconda3/lib/python3.6/site-packages/ccxt/base/exchange.py in amount_to_lots(self, symbol, amount)\r\n    791 \r\n    792     def amount_to_lots(self, symbol, amount):\r\n--> 793         lot = self.markets[symbol]['lot']\r\n    794         return self.amount_to_precision(symbol, math.floor(amount / lot) * lot)\r\n    795 \r\n\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\nThis means that markets is `None`.\r\n\r\n```\r\nccxt.__version__\r\nOut[14]:\r\n'1.10.775'\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1371/comments",
    "author": "basnijholt",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-19T18:08:10Z",
        "body": "@basnijholt you have to preload them in order to work with them. This is done automatically, if you call a unified API method, however, the `amount_to_lots` won't load the markets for you.\r\n\r\n```Python\r\nimport ccxt\r\nclient = ccxt.binance()\r\nclient.load_marktets()\r\nclient.amount_to_lots('BNB/BTC', 0.0013)\r\n```\r\n\r\nLet me know if it doesn't help."
      }
    ]
  },
  {
    "number": 1368,
    "title": "Quoinex exchange id wrong in manual",
    "created_at": "2018-01-19T15:14:32Z",
    "closed_at": "2018-01-19T15:24:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1368",
    "body": "Hi, \r\n\r\nper the manual, the id of Quoinex is \"quoinex\"\r\n\r\nHowever, using this code\r\n`let Quoinex = new ccxt.quoinex ({apiKey: API.Quoinex.Key, secret: API.Quoinex.Secret})`\r\n\r\nresults in this error: \r\n\r\n> TypeError: ccxt.quoinex is not a constructor\r\n>     at c:\\Trader\\Logic\\Test.js:68:22\r\n>     at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\r\n\r\nIf I use \"new ccxt.quoine\", it does work.\r\n\r\nSo manual is wrong, (but I would actually prefer the naming to be per the manual, \"quoinex\")\r\n\r\nSo, do I change my code, or do you change yours?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1368/comments",
    "author": "wannesdemaeght",
    "comments": [
      {
        "user": "Deathamns",
        "created_at": "2018-01-19T15:20:20Z",
        "body": "It was renamed recently #1311. `quoinex` is the correct one, just make sure you're using a newer version of the library."
      },
      {
        "user": "wannesdemaeght",
        "created_at": "2018-01-19T15:24:36Z",
        "body": "Aha, great.\r\nThanks!"
      }
    ]
  },
  {
    "number": 1345,
    "title": "Question for selling an altcoin for bitcoin",
    "created_at": "2018-01-17T18:44:46Z",
    "closed_at": "2018-01-17T19:13:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1345",
    "body": "OS:Linux\r\nProgramming Language version:Python\r\nCCXT version:1.10.586\r\nExchange:bleutrade\r\nMethod:create_limit_buy_order\r\n\r\nI want to sell an alt coin for bitcoin but calling create_limit_sell_order or create_limit_buy_order raise the exception of insufficient funds\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1345/comments",
    "author": "chatzich",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-17T18:47:42Z",
        "body": "Do you have sufficient funds to place the order? The exception states it clearly, you need to have `amount * price + fee` on your balance to place the order."
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T18:51:18Z",
        "body": "(amountOfBtc I want to buy)*priceOfAltcoinInBtc + fee right?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T18:53:09Z",
        "body": "Which symbol (market, pair) are you trading?"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T18:55:14Z",
        "body": "I want to convert VRC to BTC\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:03:21Z",
        "body": "Ok, the symbol is `VRC/BTC`, and the amount is always on the left (before the slash), the price is on the right (after the slash).\r\n\r\nTherefore, the amount is in VRC. And the price is in BTC.\r\n\r\nSo,\r\n\r\n> (amountOfBtc I want to buy)*priceOfAltcoinInBtc + fee right?\r\n\r\nWrong )\r\n\r\nThe correct version is:\r\n\r\n```amount of VRC you want to buy * price of 1 VRC in BTC + fee```\r\n\r\nDoes this answer your question?"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T19:07:44Z",
        "body": "I want to buy BTC with the amount of VRC "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:09:35Z",
        "body": "@ironexmaiden as far as I know, their API does not allow that. You can only buy and sell VRC for BTC, not vice versa. But, hey, when you buy BTC for VRC and you know the amount of VRC, it means, you're just selling VRC for BTC, right? )"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T19:11:12Z",
        "body": "ok thank you"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:13:09Z",
        "body": "@ironexmaiden \r\n\r\nYou can't do this:\r\n\r\n- *I want to buy BTC with the amount of VRC*\r\n\r\nBut you can do this:\r\n\r\n- *I want to sell the amount VRC for BTC*\r\n\r\nAnd it's the same thing, you just need to be exact in sides and terms."
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T19:16:27Z",
        "body": "How can I achieve this @kroitor ? with create_limit_sell_order? I have thought that this function is selling BTC for the altcoin in  the trade symbol i.e VRC/BTC sells BTC for VRC"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:20:20Z",
        "body": "@ironexmaiden \r\n\r\n> with create_limit_sell_order?\r\n\r\nYes\r\n\r\n> I have thought that this function is selling BTC for the altcoin in the trade symbol i.e VRC/BTC sells BTC for VRC\r\n\r\nIt's vice-versa: sells VRC for BTC.\r\n\r\n```\r\n base → VRC/BTC ← quote\r\n```\r\n\r\n- create_limit_buy_order = you buy the base currency (VRC) and give (pay) quote currency (BTC)\r\n- create_limit_sell_order = you sell the base currency (VRC) and receive the quote currency (BTC)\r\n- amount is always in base currency (VRC)\r\n- price is always in quote currency (BTC)\r\n"
      }
    ]
  },
  {
    "number": 1258,
    "title": "Kucoin errorhandling",
    "created_at": "2018-01-14T17:21:51Z",
    "closed_at": "2018-01-14T17:58:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1258",
    "body": "Is this enough info to convert these errors from ExchangeError to NetworkError ? Sorry I don't have verbose logging this time, hopefully the stacktraces give enough info. \r\n```\r\nexc_type, exc_value, exc_traceback = sys.exc_info()\r\ntraceback.print_exception(exc_type, exc_value, exc_traceback, limit=20, file=sys.stdout)\r\n```\r\n\r\n- The 502 'Gateway Timeout' seems obvious.. It should be NetworkError by default imo. If exchanges use this error correctly, you can always recover from it by waiting a little (or a lot) and retry. Surely there are some exchanges that use 502 incorrectly, but shouldn't we make exceptions for those then, instead of the other way around ?\r\n- The 404 is less obvious, normally you can't recover from this by retrying. But with Kucoin you can somehow, they unjustly generate 404's when they're busy.\r\n\r\nThe 502, `fetch_order_book`\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/scripts/test2/test2.py\", line 841, in fetch_with_retries\r\n    result = json.loads(json.dumps(await fetch()), use_decimal=True)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 285, in fetch_order_book\r\n    }, params))\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 534, in request\r\n    response = await self.fetch2(path, api, method, params, headers, body)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 88, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 110, in fetch\r\n    self.handle_errors(response.status, text, url, method, None, text)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 531, in handle_errors\r\n    raise ExchangeError(self.id + ' ' + str(code) + ' ' + reason)\r\nccxt.base.errors.ExchangeError: kucoin 502 <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>502 Bad Gateway</h1></center>\r\n</body>\r\n</html>\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n```\r\n\r\nThe 404, `create_limit_buy_order`\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/scripts/test2/test2.py\", line 703, in do_order\r\n    order_output = await action_with_retries(e, lambda: e.create_limit_buy_order(pair, float(amount), float(price)), retries=retries)\r\n  File \"/usr/local/scripts/test2/test2.py\", line 880, in action_with_retries\r\n    result = await action()\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 357, in create_order\r\n    response = await self.privatePostOrder(self.extend(order, params))\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 534, in request\r\n    response = await self.fetch2(path, api, method, params, headers, body)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 88, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 110, in fetch\r\n    self.handle_errors(response.status, text, url, method, None, text)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 531, in handle_errors\r\n    raise ExchangeError(self.id + ' ' + str(code) + ' ' + reason)\r\nccxt.base.errors.ExchangeError: kucoin 404\r\n{}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1258/comments",
    "author": "gaardiolor",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-14T17:30:51Z",
        "body": "> Is this enough info to convert these errors from ExchangeError to NetworkError ?\r\n> - 502\r\n\r\nYes, this error is usually temporary. In fact it is already handled as a recoverable NetworkError. However, the Kucoin handler redefines it, I'll fix it shortly.\r\n\r\n> - 404\r\n\r\nNo, not really, not always.... this can be a permanent error (endpoint renamed, API upgraded, etc). However, we still handle it as a NetworkError, because it's still a HTTP error."
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-14T17:34:04Z",
        "body": "Yeah, with most websites 404 is a permanent error. But with Kucoin it isn't, really.. It just happens randomly at peak hours. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-14T17:58:38Z",
        "body": "Fixed in 1.10.707. Thx!"
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-14T18:01:07Z",
        "body": "Cool! Both the 502 and 404 ?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-14T18:01:48Z",
        "body": "@gaardiolor yes"
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-15T16:39:31Z",
        "body": "@kroitor unfortunately the 404 is still raised as ExchangeError in v707. Can you please take a look ?\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/scripts/test2/test2.py\", line 731, in do_order\r\n    order_output = await action_with_retries(e, lambda: e.create_limit_buy_order(pair, float(amount), float(price)), public=False, retries=retries)\r\n  File \"/usr/local/scripts/test2/test2.py\", line 868, in action_with_retries\r\n    result = json.loads(json.dumps(await action()), use_decimal=True)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 357, in create_order\r\n    response = await self.privatePostOrder(self.extend(order, params))\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 534, in request\r\n    response = await self.fetch2(path, api, method, params, headers, body)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 88, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 110, in fetch\r\n    self.handle_errors(response.status, text, url, method, None, text)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 531, in handle_errors\r\n    raise ExchangeError(self.id + ' ' + str(code) + ' ' + reason)\r\nccxt.base.errors.ExchangeError: kucoin 404\r\n{}\r\n```"
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-15T16:46:58Z",
        "body": "@kroitor The 502 as well;\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/scripts/test2/test2.py\", line 839, in fetch_with_retries\r\n    result = json.loads(json.dumps(await fetch()), use_decimal=True)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 133, in load_markets\r\n    currencies = await self.fetch_currencies()\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 212, in fetch_currencies\r\n    response = await self.publicGetMarketOpenCoins(params)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 534, in request\r\n    response = await self.fetch2(path, api, method, params, headers, body)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 88, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/base/exchange.py\", line 110, in fetch\r\n    self.handle_errors(response.status, text, url, method, None, text)\r\n  File \"/usr/lib/python3.6/site-packages/ccxt/async/kucoin.py\", line 531, in handle_errors\r\n    raise ExchangeError(self.id + ' ' + str(code) + ' ' + reason)\r\nccxt.base.errors.ExchangeError: kucoin 502 <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>502 Bad Gateway</h1></center>\r\n</body>\r\n</html>\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n<!-- a padding to disable MSIE and Chrome friendly error page -->\r\n```\r\nversion check:\r\n```\r\n$ pip list | grep ccxt\r\nccxt (1.10.707)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-15T17:15:11Z",
        "body": "Ok, refixed it once again in 1.10.726. Let us know if you have further difficulties with it."
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-15T18:19:15Z",
        "body": "@kroitor I've seen now that sometimes Kucoin returns a 404 on for example `create_limit_sell_order`, but did execute the order in the background. So we cannot safely retry 'write' operations. Not sure what to do here. Maybe leave it like this and in my script I need to fix that for all orders, regardless of the exception, always check if it was executed or not before retrying. What do you think ?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-15T18:24:17Z",
        "body": "> Maybe leave it like this and in my script I need to fix that for all orders, regardless of the exception, always check if it was executed or not. What do you think ?\r\n\r\nI would say you're moving in the right direction, in general, you're not guaranteed any result right away from create_order (can be a http error, a net quirk, exchange outage, your local connection problem, a lightning just hit the house, anything...), so, upon an error you have to check the result of execution to make sure. A network error from create_order means literally: *the order may be accepted or it may be not*."
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-15T18:30:17Z",
        "body": "Yes exactly, I agree. I'll fix it in my script. Thanks!"
      },
      {
        "user": "Fcl69",
        "created_at": "2018-01-25T21:03:11Z",
        "body": "@gaardiolor Do you mind to share the workaround you end up using for kucoin? 404 is very iterating to say the least..."
      },
      {
        "user": "gaardiolor",
        "created_at": "2018-01-25T22:11:52Z",
        "body": "@Fcl69 Sure!\r\nBasically I check for the following exceptions: `(ccxt.RequestTimeout, ccxt.ExchangeError, ccxt.NetworkError, ccxt.InvalidNonce, ccxt.AuthenticationError)` . \r\n\r\nIf I get them and I did a read operation, I simply sleep for a second and retry. After 10 tries I abort.\r\n\r\nIf I get them and I did a write operation (order, cancel_order), It could be that it processed anyway. So I check for that with `fetch_balance()` . If it went through within a minute I don't retry. \r\n\r\nIf it appears that it did not went through, it could be lagging and go through later (it made me cry the first time.. but I'm in the acceptance phase now): If it's a trade that I can retry without me getting very sad if I end up doing the same trade twice: I simply retry. Mostly those are trades that would completely empty the source symbol balance, or `cancel_order`. I can retry those as much as I want, the balance can't go below 0 anyway and cancelling the same order id twice doesn't matter much too. \r\nIf it appears that it did not went through and it's a trade that would made me sad if it happens twice I'm not retrying it. Periodically I check if it went through or not until I'm pretty sure it didn't (10 minutes or so). \r\n\r\nI've tried quite some exchanges now, and almost all of them are horrible to script against. Error-catching and retrying is the easy part, the tricky part is the fact that the errors themselves are not reliable and that, despite the error, the operation in the background could be successful. After some time. Maybe. It's horrible really. "
      },
      {
        "user": "Fcl69",
        "created_at": "2018-01-26T00:18:17Z",
        "body": "@gaardiolor Gee... It does look complicated and painful. I understood the logic though. thank you for sharing.."
      }
    ]
  },
  {
    "number": 1229,
    "title": "Clarifying Understanding of `baseVolume` and `quoteVolume`",
    "created_at": "2018-01-13T03:38:36Z",
    "closed_at": "2018-01-13T04:06:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1229",
    "body": "I've been reading through the manual and just wanted to check that my understanding of base/quote volumes is correct!\r\n\r\nIn a given market FOO/BAR, `baseVolume` indicates the total amount of FOO that has been bought and sold in this market in the past 24hrs, while `quoteVolume` is the total amount of BAR that has been bought and sold in this market in the past 24hrs. Is this correct?\r\n\r\nIf so, I have a follow-up question: Is it possible to get the volumes for the two different directions for a single market using ccxt? E.g. is it possible to distinguish between the amount of FOO that was bought  and  the amount of FOO that has been sold (rather than just the sum total of both)?\r\n\r\nThanks for your time and awesome work!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1229/comments",
    "author": "mitchmindtree",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-13T03:53:55Z",
        "body": "> In a given market FOO/BAR, baseVolume indicates the total amount of FOO that has been bought and sold in this market in the past 24hrs, while quoteVolume is the total amount of BAR that has been bought and sold in this market in the past 24hrs. Is this correct?\r\n\r\nExactly!\r\n\r\n> If so, I have a follow-up question: Is it possible to get the volumes for the two different directions for a single market using ccxt? E.g. is it possible to distinguish between the amount of FOO that was bought and the amount of FOO that has been sold (rather than just the sum total of both)?\r\n\r\nNo, unfortunately, most of exchanges will not return that info segregated. And you cannot deduce exact values of one from another. Most often exchanges will return just the baseVolume or just the quoteVolume.\r\n\r\nOne more note: when you buy FOO on the FOO/BAR market, you are buying it for BAR, right?  So, when you buy FOO for BAR, that means, you are actually selling BAR for FOO.\r\n\r\n- buy FOO/BAR == sell BAR/FOO\r\n- sell FOO/BAR == buy BAR/FOO\r\n\r\nThere's also a volume-weighed average price (vwap, present with some exchanges) – that is the average price for those baseVolume and quoteVolume. And, from there:\r\n\r\n- cost = amount * price\r\n- equivalently, quoteVolume (total 24h traded quote cost) ~= baseVolume * vwap (total 24h base cost * average price over last 24h)\r\n\r\nLet me know if this answers your question."
      },
      {
        "user": "mitchmindtree",
        "created_at": "2018-01-13T04:06:59Z",
        "body": "Perfect, thank you for such a quick and detailed response!"
      }
    ]
  },
  {
    "number": 1218,
    "title": "HitBTC v2 fetchOrders not implemented",
    "created_at": "2018-01-12T14:02:55Z",
    "closed_at": "2018-01-13T03:21:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1218",
    "body": "Hi, i am getting fetchOrders not implemented. Searched here if it was not done since my last update but doesnt look like that.\r\n\r\nfetchClosedOrders works like fetchOrders should. It does return me list of closed and also open orders. Is it possible to do something about it ?\r\n\r\nTHanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1218/comments",
    "author": "dnld23",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-12T14:15:34Z",
        "body": "Hi!\r\n\r\n>  It does return me list of closed and also open orders. Is it possible to do something about it ?\r\n\r\nCan you please show verbose output when fetchClosedOrders returns open orders mixed with closed orders? We would fix this particular aspect then and it will return just the closed orders for less confusion.\r\n\r\n> fetchClosedOrders works like fetchOrders should.\r\n\r\nfetchOrders should not work like fetchClosedOrders does now, because fetchClosedOrders uses the order history endpoint from HitBTC which lags behind their open orders list.\r\n\r\n> fetchOrders not implemented. Searched here if it was not done since my last update but doesnt look like that.\r\n\r\nfetchOrders for HitBTC v2 most likely won't be implemented at all for these reasons:\r\n- they don't have a clearly designated endpoint for fetching all orders\r\n- they only have an endpoint for active orders and an endpoint for historical orders\r\n- he historical orders endpoint is updated much slower then the active endpoint, so you can't rely on it when you are trading\r\n- the active orders endpoint returns just the active orders list, so there's no way to fetch them all at once, if you need them just in time (most often you do)\r\n\r\nDoes this answer your question?"
      },
      {
        "user": "dnld23",
        "created_at": "2018-01-12T14:35:50Z",
        "body": "Thanks for reply. According to what you say and saw on hitbtc, i think, if you merge active orders with orders history, it should contain complete list, no ? Do you have any idea of how much delayed is order history ?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-12T14:39:25Z",
        "body": "> if you merge active orders with orders history, it should contain complete list, no ?\r\n\r\nThat will require two requests and we don't do more than one request per call in the library. Otherwise it would be a complete mess, believe me ;)\r\n\r\n> Do you have any idea of how much delayed is order history ?\r\n\r\nCan't tell exactly, but the delay is significant enough. Seconds.\r\n\r\nWould you mind if I close this?"
      }
    ]
  },
  {
    "number": 1191,
    "title": "JavaScript heap out of memory",
    "created_at": "2018-01-11T14:52:22Z",
    "closed_at": "2018-01-17T17:06:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1191",
    "body": "So whenever i update to the latest ccxt i receive the following error below. But if i revert back to v 1.7.7, this error does not show then.\r\n\r\nI'm currently using node v8.9.4.\r\n\r\n<--- Last few GCs --->\r\n\r\n[4564:0x25c2a60]   309756 ms: Mark-sweep 1412.6 (1816.7) -> 1412.6 (1794.2) MB, 1095.7 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1158 ms) last resort GC in old space requested\r\n[4564:0x25c2a60]   310923 ms: Mark-sweep 1412.6 (1794.2) -> 1412.6 (1794.2) MB, 1166.1 / 0.0 ms  last resort GC in old space requested\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\n==== JS stack trace =========================================\r\n\r\nSecurity context: 0x17cc67aa5ee1 <JSObject>\r\n    0: builtin exit frame: set __proto__(this=0x27ec665fa7d9 <Error map = 0x143796edb81>,0x348bf0998dc9 <ExchangeError map = 0x9679dac8249>)\r\n\r\n    5: new constructor(aka ExchangeError) [/home/blocknomic/Desktop/CurryCoins-releases/pre-alpha/V0.7.3/engine/node_modules/ccxt/js/base/errors.js:15] [bytecode=0x3cf35ea76f21 offset=52](this=0x27ec665fa7d9 <Error map = 0x143796edb81>,message=0x27ec665fa7...\r\n\r\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\r\n 1: node::Abort() [total: engine]\r\n 2: 0x121a2cc [total: engine]\r\n 3: v8::Utils::ReportOOMFailure(char const*, bool) [total: engine]\r\n 4: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [total: engine]\r\n 5: v8::internal::Factory::CopyFixedArrayAndGrow(v8::internal::Handle<v8::internal::FixedArray>, int, v8::internal::PretenureFlag) [total: engine]\r\n 6: v8::internal::TransitionArray::PutPrototypeTransition(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Map>) [total: engine]\r\n 7: v8::internal::Map::TransitionToPrototype(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Object>) [total: engine]\r\n 8: v8::internal::JSObject::SetPrototype(v8::internal::Handle<v8::internal::JSObject>, v8::internal::Handle<v8::internal::Object>, bool, v8::internal::Object::ShouldThrow) [total: engine]\r\n 9: v8::internal::JSReceiver::SetPrototype(v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::Handle<v8::internal::Object>, bool, v8::internal::Object::ShouldThrow) [total: engine]\r\n10: v8::internal::Builtin_ObjectPrototypeSetProto(int, v8::internal::Object**, v8::internal::Isolate*) [total: engine]\r\n11: 0x1b300f48441d\r\n\r\n<--- Last few GCs --->\r\n\r\n[4565:0x3fc9a60]   321574 ms: Mark-sweep 1407.4 (1751.7) -> 1407.4 (1749.7) MB, 912.0 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 938 ms) last resort GC in old space requested\r\n[4565:0x3fc9a60]   322518 ms: Mark-sweep 1407.4 (1749.7) -> 1407.4 (1749.7) MB, 942.6 / 0.0 ms  last resort GC in old space requested\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1191/comments",
    "author": "g666nz",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-11T14:54:51Z",
        "body": "@g666nz do you have the same symptoms with node 9+?"
      },
      {
        "user": "g666nz",
        "created_at": "2018-01-11T15:05:31Z",
        "body": "haven't tried it with 9+, i require this for production purposes. I'm a little vary with trying 9+"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-11T15:55:56Z",
        "body": "@g666nz can you post a short but a complete snippet of code that I could copypaste to reproduce you problem?"
      },
      {
        "user": "g666nz",
        "created_at": "2018-01-15T07:34:50Z",
        "body": "I'm simply calling the orderBook every three seconds. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-15T07:37:05Z",
        "body": "@g666nz right, but this can be done in a multitude of ways (rate-limiting, error handling, etc), so we still need to see your code + verbose output, otherwise we can't help. So, can you paste it?\r\n\r\nPlease reduce it to the shortest possible snippet to reproduce the problem (but make it a complete one)."
      },
      {
        "user": "g666nz",
        "created_at": "2018-01-17T17:06:08Z",
        "body": "Yes you were right. Was a error handling issue. Cheers"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T17:18:15Z",
        "body": "@g666nz thank for reporting back!"
      }
    ]
  },
  {
    "number": 1169,
    "title": "Get full orders history for Binance, Bittrex and Bitfinex",
    "created_at": "2018-01-10T15:23:45Z",
    "closed_at": "2018-01-12T11:26:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1169",
    "body": "Hi guys,\r\n\r\nI'm trying to get all past orders of my accounts on Binance, Bittrex and Bitfinex but I failed to have a clean and simple solution.\r\n- Bittrex: I have only 10 trades from bittrex.accountGetOrderhistory but I have way more from my account. (fetchOrders gives me an infinite loop ...)\r\n- Binance / Bitfinex: fetchOrders not working without a symbol but I want all of them. \r\n\r\nAm I doing something wrong or is that not implemented yet on theses different API?\r\n\r\nThanks for your help!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1169/comments",
    "author": "vincentonchain",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-10T21:54:35Z",
        "body": "Hi!\r\n\r\n> Bittrex: I have only 10 trades from bittrex.accountGetOrderhistory but I have way more from my account. (fetchOrders gives me an infinite loop ...)\r\n\r\nCan you show a short but a complete snippet of code with fetchOrders that I can copypaste to reproduce your problem?\r\n\r\n> Binance / Bitfinex: fetchOrders not working without a symbol but I want all of them.\r\n\r\n- Bitfinex does not have fetchOrders. It has fetchClosedOrders and fetchOpenOrders, both should work if you omit the symbol argument.\r\n- Binance won't allow to fetch them all at once, you have to iterate over your symbols\r\n\r\n> Am I doing something wrong or is that not implemented yet on theses different API?\r\n\r\nWithout seeing your code it's hard to tell."
      },
      {
        "user": "vincentonchain",
        "created_at": "2018-01-12T16:38:15Z",
        "body": "Thanks for your reply @kroitor!\r\n\r\n### Bittrex\r\n```js\r\nconst orders = this.fetchExchangeOrders(apiKey, apiSecret);\r\nconsole.log('orders', orders); // 10 on 19 trades return\r\n\r\nprivate async fetchExchangeOrders(apiKey, apiSecret) {\r\n  const bittrex = new ccxt.bittrex({\r\n    'apiKey': apiKey,\r\n    'secret': apiSecret\r\n  });\r\n\r\n  // return await bittrex.fetchOrders(); // Infinite loop\r\n  return await bittrex.accountGetOrderhistory();\r\n}\r\n```\r\n\r\n### Bittrex\r\nI will check ```fetchClosedOrders``` today \r\n\r\n### Binance\r\n> Binance won't allow to fetch them all at once, you have to iterate over your symbols\r\n\r\nI will add symbols on my front end so. \r\n\r\nThanks a lot for your help! You have already done an amazing job."
      }
    ]
  },
  {
    "number": 1168,
    "title": "BitFlyer prints strange symbols",
    "created_at": "2018-01-10T13:41:49Z",
    "closed_at": "2018-01-10T21:50:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1168",
    "body": "PASTE_YOUR_TEXT_DESCRIPTION_HERE\r\n\r\n- OS: iOS\r\n- Programming Language: python\r\n- CCXT version: 1.10.621\r\n- Exchange: bitflyer\r\n- Method:\r\n\r\n```\r\nexchange = getattr(ccxt, 'bitflyer')({\r\n        # 'verbose': True,\r\n    })\r\n    if hasattr(exchange, 'symbols'):\r\n        print(\"crosses: {}\".format(\", \".join(exchange.symbols)))\r\n\r\nBCH/BTC, BTC/JPY, BTCJPY12JAN2018, BTCJPY19JAN2018, ETH/BTC, FX_BTC_JPY",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1168/comments",
    "author": "mmehrle",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-10T21:50:21Z",
        "body": "Nothing strange about them, some symbols can stand for futures and options. Hope it answers your question.\r\n\r\n"
      }
    ]
  },
  {
    "number": 1097,
    "title": "How to determine if bittrex's specific wallet is offline or under maintainance",
    "created_at": "2018-01-06T21:01:00Z",
    "closed_at": "2018-01-06T21:07:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1097",
    "body": "Hello,\r\nIs there a way to check if a wallet on bittrex is offline or under maintainance etc?\r\n\r\nI used cctx.bittrex.load_markets() for ['FCT/BTC'] and returns \"active\":true even though the wallet is currently offline",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1097/comments",
    "author": "chatzich",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-06T21:07:37Z",
        "body": "Hi!\r\n\r\n```Python\r\nimport ccxt\r\nimport pprint\r\nexchange = ccxt.bittrex ()\r\nexchange.load_markets()\r\npprint(exchange.currencies['FCT'])\r\npprint(exchange.currencies['FCT']['active'])\r\n```"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-06T21:10:52Z",
        "body": "Thank you ! But why ['FCT/BTC'] active returns true?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T21:11:18Z",
        "body": "@ironexmaiden because it is allowed for trading (you can't fund it, but you can trade it).\r\n  "
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-06T21:13:29Z",
        "body": "ok my fault! sorry for the inconvience"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T21:17:11Z",
        "body": "no worries)"
      }
    ]
  },
  {
    "number": 1096,
    "title": "Kucoin initialization",
    "created_at": "2018-01-06T20:50:46Z",
    "closed_at": "2018-01-07T14:36:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1096",
    "body": "\r\nThis reeks of something really simple I'm missing, but can't seem to figure out why this isn't working. Here's the code:\r\n\r\nccxtKucoin = ccxt.kucoin({'apiKey': kucoinKey, 'secret': kucoinSecret})\r\nccxtKucoin.loadMarkets()\r\n\r\nSame syntax as every other market I've tried which works. Any ideas?\r\n\r\n\r\n- OS: MAC OSX El Captain\r\n- Programming Language: Python\r\n- CCXT version: 1.10.579\r\n- Exchange: Kucoin\r\n- Method: Initialize ccxt object\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 30, in <module>\r\n    import apiCalls as api\r\n  File \"/Users/spencercox/Documents/code/flipBot/apiCalls.py\", line 47, in <module>\r\n    ccxtKucoin = ccxt.kucoin({'apiKey': kucoinKey, 'secret': kucoinSecret})\r\nAttributeError: 'module' object has no attribute 'kucoin'\r\n```\r\n  ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1096/comments",
    "author": "speggos",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-06T20:59:54Z",
        "body": "- What is the output of `pip list | grep ccxt`?\r\n- What is your Python version?\r\n- What is the value of `ccxt.__version__` if you print it just before `ccxt.kucoin({...` ?\r\n- How do you link against ccxt in apiCalls.py ?\r\n\r\n\r\n  "
      },
      {
        "user": "speggos",
        "created_at": "2018-01-06T22:16:39Z",
        "body": "ccxt (1.10.263)\r\nPython 2.7.10\r\n\r\nWhen calling ccxt.version or ccxt.version() I get this response:\r\n\r\n  File \"main.py\", line 30, in <module>\r\n    import apiCalls as api\r\n  File \"/Users/spencercox/Documents/code/flipBot/apiCalls.py\", line 45, in <module>\r\n    print ccxt.version()\r\nAttributeError: 'module' object has no attribute 'version'\r\n\r\nI don't know what your final question is asking.\r\n\r\nOther exchanges (hitbtc, bittrex, binance) have been working fine"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T22:18:39Z",
        "body": "> ccxt (1.10.263)\r\n\r\nToo old. That version is a month old or maybe even older. We are under active development therefore we ask our user to update frequently. Kucoin was not implemented back then )) Just update your ccxt version and you will be fine: `pip install ccxt --upgrade`.\r\n\r\n> AttributeError: 'module' object has no attribute 'version'\r\n\r\n```Python\r\nimport ccxt\r\nprint(ccxt.__version__)\r\n```\r\n\r\n↑ Not necessary anymore because the reason is now obvious.\r\n  "
      },
      {
        "user": "speggos",
        "created_at": "2018-01-06T22:19:47Z",
        "body": "As I expected it was a silly mistake on my part. You're the man!"
      },
      {
        "user": "speggos",
        "created_at": "2018-01-06T22:23:14Z",
        "body": "typing the following: \"pip install ccxt --upgrade\" I get the following response:\r\n\r\n```\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/Library/Python/2.7/site-packages/pip/basecommand.py\", line 215, in main\r\n    status = self.run(options, args)\r\n  File \"/Library/Python/2.7/site-packages/pip/commands/install.py\", line 342, in run\r\n    prefix=options.prefix_path,\r\n  File \"/Library/Python/2.7/site-packages/pip/req/req_set.py\", line 778, in install\r\n    requirement.uninstall(auto_confirm=True)\r\n  File \"/Library/Python/2.7/site-packages/pip/req/req_install.py\", line 754, in uninstall\r\n    paths_to_remove.remove(auto_confirm)\r\n  File \"/Library/Python/2.7/site-packages/pip/req/req_uninstall.py\", line 115, in remove\r\n    renames(path, new_path)\r\n  File \"/Library/Python/2.7/site-packages/pip/utils/__init__.py\", line 267, in renames\r\n    shutil.move(old, new)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py\", line 299, in move\r\n    copytree(src, real_dst, symlinks=True)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py\", line 208, in copytree\r\n    raise Error, errors\r\nError: [('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py', '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py', \"[Errno 1] Operation not permitted: '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.py'\"), ('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc', '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc', \"[Errno 1] Operation not permitted: '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/__init__.pyc'\"), ('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py', '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py', \"[Errno 1] Operation not permitted: '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.py'\"), ('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc', '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc', \"[Errno 1] Operation not permitted: '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib/markers.pyc'\"), ('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib', '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib', \"[Errno 1] Operation not permitted: '/var/folders/64/nb5cb6c546d0f3g4lvw2dr740000gp/T/pip-tUgp9q-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/_markerlib'\")]\r\n```\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T22:24:35Z",
        "body": "@speggos `sudo pip install ccxt --upgrade` ?"
      },
      {
        "user": "speggos",
        "created_at": "2018-01-06T22:26:23Z",
        "body": "Also does not work"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T22:28:22Z",
        "body": "@speggos how did you install it?"
      }
    ]
  },
  {
    "number": 1085,
    "title": "Flip XRP on The rock",
    "created_at": "2018-01-06T01:24:24Z",
    "closed_at": "2018-01-07T13:05:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1085",
    "body": "How can I flip EUR/XRP to XRP/EUR on TheRock trading\r\n- OS: any\r\n- Programming Language: python\r\n- CCXT version: latest master\r\n- Exchange: Therock\r\n- Method: fetch_l2_order_book\r\n\r\nCould you suggest me a way to flip the order book to align it with other exchanges ?\r\nactually therock publish data in EUR/XRP and BTC/XRP while the rest of the exchanges are in XRP/EUR do you have any strategy to flip the api ? (order_book would be the first but also the rest of the APIs)\r\nI could then implement it and send you a PR.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1085/comments",
    "author": "marcobazzani",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-06T01:48:05Z",
        "body": "> How can I flip EUR/XRP to XRP/EUR on TheRock trading\r\n\r\nYou can't really do that, because EUR and XRP base/quote positions are not interchangeable, therefore the exchanges' policies for fees and tokens in general aren't \"flippable\" (can't reflect them, because this is not an ideal mirror, we have to account for conversion rates and liquidity, globally).\r\n\r\n> Could you suggest me a way to flip the order book to align it with other exchanges ?\r\n\r\nThis is a way to flip the price quickly, without accounting for the above important aspects:\r\n\r\n```\r\nprice = 1 / price\r\n```\r\n\r\n```JavaScript\r\nmbp:ccxt igorkroitor$ node examples/js/cli therock fetchTicker EUR/XRP\r\n{      symbol:   \"EUR/XRP\",\r\n    timestamp:    1515202347379,\r\n     datetime:   \"2018-01-06T01:32:27.379Z\",\r\n         high:    0.55,\r\n          low:    0.4,\r\n          bid:    0.47,\r\n          ask:    0.48,\r\n         vwap:    undefined,\r\n         open:    0.44,\r\n        close:    0.48,\r\n        first:    undefined,\r\n         last:    0.48,\r\n       change:    undefined,\r\n   percentage:    undefined,\r\n      average:    undefined,\r\n   baseVolume:    230192.46,\r\n  quoteVolume:    107757.9509,\r\n         info: {          date: \"2018-01-06T02:32:27.379+01:00\",\r\n                       fund_id: \"EURXRP\",\r\n                           bid:  0.47,\r\n                           ask:  0.48,\r\n                          last:  0.48,\r\n                          open:  0.44,\r\n                         close:  0.48,\r\n                           low:  0.4,\r\n                          high:  0.55,\r\n                        volume:  107757.9509,\r\n                 volume_traded:  230192.46                       } }\r\n```\r\n```shell\r\nmbp:ccxt igorkroitor$ echo \"scale=8; 1/0.48\" | bc\r\n2.08333333\r\n```\r\n\r\n2.083 ~ XRP/EUR... This is **very roughly** (I warned you).\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli cex fetchTicker XRP/EUR\r\n...\r\n         last:    2.17,\r\n...\r\n```\r\n\r\n> do you have any strategy to flip the api ?\r\n\r\nYes, the strategy is to touch the prices and amounts (volumes) as little as possible in the library and do as much as possible on top of it. Therefore we don't flip them in the base code.\r\n\r\n> I could then implement it and send you a PR.\r\n\r\nI think this affects some delicate aspects of estimating values for tokens (especially the fee schedules) and it is likely better to leave it in the userland. In other words, we let the user decide. We would be happy for all contributions from you, but we have concerns which aren't easily resolvable on this particular proposal (it would require a significant rework at the very least + all of the above).\r\n\r\nLet me know if this answers your question. Thx!\r\n  "
      },
      {
        "user": "marcobazzani",
        "created_at": "2018-01-06T15:41:25Z",
        "body": "Yes I did the 1/price flip\r\nJust wonder if could be convininent to flip the full API.\r\nBut I get your point\r\n\r\nCan you just me explain a bit more in depth your statement:\r\n\"we have to account for conversion rates and liquidity, globally\"\r\n\r\nThank you\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-07T13:05:02Z",
        "body": "@marcobazzani what I wanted to say is that when you reverse the sides of the pair you can introduce some unwanted side-effects. For example, some exchanges have different fees on the buy and sell sides. Also, holding a value of M xrp worth of N euro is not the same as holding N euro in the first place – when flipping sides you have to account for added risks of holding this or that coin. Some exchanges freeze some pairs and funding occasionally. So, in general, it's not always a strict conversion ratio of 1/x, especially, if you are trading against multiple exchanges. Hope it helps."
      }
    ]
  },
  {
    "number": 1065,
    "title": "Meteor Issue: invalid for/in left-hand side in older Firefox and Safari versions",
    "created_at": "2018-01-04T15:12:55Z",
    "closed_at": "2023-07-31T20:57:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1065",
    "body": "Hey,\r\n\r\nThis may not be a wholly CCXT issue, but I am developing a Meteor application that uses the CCXT library. Everything works perfectly fine on Chrome, but when I load it on Firefox or Safari, I get the following error:\r\n\r\n```SyntaxError: invalid for/in left-hand side```\r\n\r\n``` \r\n//merge to this                                     \r\nfor (const [property, value] of Object.entries (config))  \r\n    this[property] = deepExtend (this[property], value)\r\n```\r\n\r\n- OS: Linux, Firefox & Safari\r\n- Programming Language: JS\r\n- CCXT version: 1.10.521\r\n- Exchange: N/A\r\n- Method: N/A\r\n\r\nI've double checked ECMA script is installed, as recommended through research on the issue. Any help would be appreciated! ***Edit: it appears to be older versions of Firefox & Safari only, so it's not a critical issue, but still curious***\r\n\r\n  ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1065/comments",
    "author": "PolybitSol",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-04T20:29:07Z",
        "body": "Hi! Thank you for reporting this issue! We will add a fix for it. I hope to get to it as soon as possible.\r\n  "
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-31T20:57:10Z",
        "body": "Issue is too much old and not reproduceable. Closing this issue for now, but if anyone has any more input on this, feel free to open issue."
      }
    ]
  },
  {
    "number": 1056,
    "title": "What does edit order do",
    "created_at": "2018-01-03T21:29:06Z",
    "closed_at": "2018-01-03T22:00:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1056",
    "body": "Can someone please explain what does edit order do? And how does it work (an example)?\r\n\r\nI did not find any information about it in the manual. \r\n\r\nThank you so much for this awesome tool!\r\n  ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1056/comments",
    "author": "hunsnowboarder",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:37:43Z",
        "body": "Some exchanges support *canceling+placing a new order* in one call (poloniex). For other exchanges that don't support that, the editOrder call will emulate it in two separate calls (cancel, then place new), effectively replacing or *editing* the old order. Let me know if this answers your question.\r\n  "
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2018-01-03T21:42:21Z",
        "body": "Wow, this is megacool! \r\nCould you please just give an example because I am having hard time to understand what args*  mean? I am not sure about the order of the arguments, and also about the exact name of the arguments? (i mean something like \"new_price\" and \"new_volume\" or just \"price\" and \"volume\"?)\r\nThank you in advance. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:46:39Z",
        "body": "This is the default implementation:\r\n\r\n```Python\r\n    def edit_order(self, id, symbol, *args):\r\n        if not self.enableRateLimit:\r\n            raise ExchangeError(self.id + ' edit_order() requires enableRateLimit = true')\r\n        self.cancel_order(id, symbol)\r\n        return self.create_order(symbol, *args)\r\n```\r\n\r\nAs you can see, it accepts the id + all params from `create_order()`: \r\n```\r\ndef create_order(self, symbol, type, side, amount, price=None, params={}):\r\n```\r\n\r\nSo the full ordered set of **positional** arguments for `edit_order()` is:\r\n- id\r\n- symbol\r\n- type\r\n- side\r\n- amount\r\n- price\r\n- params\r\n\r\nDoes this help?\r\n  "
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2018-01-03T21:55:45Z",
        "body": "Thank you so much! Of course it does. :)\r\nJust a question out of curiosity. Why is the symbol a required parameter? The order id should definitely identify the order. I suppose this is an expectation from the exchange just for double checking the command.\r\nAnyway thank you so much for you help! You can close this thread now!\r\n "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:58:24Z",
        "body": "> Just a question out of curiosity. Why is the symbol a required parameter? \r\n\r\nBecause they have separate databases with unsynchronized ids between the databases, so you can't mix one id with the other database, if you don't know the symbol.\r\n\r\n> The order id should definitely identify the order. \r\n\r\nOnly if all your orders in the engine use the same linear id space. But this is often **not the case**. \r\n\r\n> I suppose this is an expectation from the exchange just for double checking the command.\r\n\r\nIf you think in terms of scalability and load-balancing, this can make sense. Separate clusters for separate pairs and for unrelated orders = no accidental interference = a more reliable exchange.\r\n  "
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2018-01-03T22:00:28Z",
        "body": "Thank you so much! Of course it does. :)\r\nJust a question out of curiosity. Why is the symbol a required parameter? The order id should definitely identify the order. I suppose this is an expectation from the exchange just for double checking the command.\r\nAnyway thank you so much for you help! You can close this thread now!\r\n "
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2018-01-03T22:01:02Z",
        "body": "Yes it does make sense! Thank you so much! Proud to become one of your backers!"
      }
    ]
  },
  {
    "number": 1048,
    "title": "Defining an exchange on the fly, for async use",
    "created_at": "2018-01-03T12:23:45Z",
    "closed_at": "2018-01-03T15:20:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1048",
    "body": "M. Kroitor, \r\nThanks for your quick last reply.\r\n\r\nI think I have trouble defining the exchange on the fly, for asynchronous use, and pass on the API info to then PUT my order: \r\n exchange = getattr(ccxt, exchange_name)({'verbose': False})\r\n\r\nSome hints? \r\nSurely a super noob question, but you would help a lot!\r\nThanks\r\n\r\n\r\n- OS: MacOs 10.12.6\r\n- Programming Language: Python3\r\n- CCXT version: 1.10.545\r\n- Exchange: kraken\r\n- Method: async create_limit_buy_order\r\n\r\n```\r\nimport asyncio\r\nimport json\r\nimport time\r\nimport ccxt.async as ccxt\r\n#------------------------------------------------------------------------------\r\n#------------------------------------------------------------------------------\r\nresults_store = {}\r\nuseful_results = {}\r\nPYTHONASYNCIODEBUG = 1\r\n\r\n#------------------------------------------------------------------------------\r\n#------------------------------------------------------------------------------\r\n\r\nkraken = ccxt.kraken ({\r\n    'apiKey': 'myCorrect apiKey',\r\n    'secret': 'my secret',\r\n    'nonce': lambda: int(time.time() * 1000),\r\n    'verbose' : True\r\n})\r\n\r\nasync def a_put_order(param):\r\n\t#extract the param\r\n    side, exchange_name, symbol, amount, price = param\r\n    print ('we put a order %s on the exchange %s' %(side, exchange_name))\r\n\r\n    stat = side + 'STATUS'\r\n    ids = side + 'ID'\r\n    #initiate the exchange named exchange_name, here 'kraken'\r\n    exchange = getattr(ccxt, exchange_name)({'verbose': False})\r\n\r\n    try:\r\n        if side == 'sell':\r\n            result = await exchange.create_limit_sell_order(symbol, amount, price)\r\n        elif side == 'buy':\r\n            result = await exchange.create_limit_buy_order(symbol, amount, price)\r\n        else:\r\n            print ('unknown direction for our order')\r\n        results_store[stat] = 'Placed'\r\n        results_dump = json.dumps(result)\r\n        results_store[ids]= json.loads(results_dump)\r\n\r\n    except ccxt.DDoSProtection as e:\r\n        results_store[stat] = 'ERR-DDoS Protection (ignoring)'\r\n    except ccxt.RequestTimeout as e:\r\n        results_store[stat] = 'ERR-Request Timeout (ignoring)'\r\n    except ccxt.ExchangeNotAvailable as e:\r\n        results_store[stat] = 'ERR-Exchange Not Available due to downtime or maintenance (ignoring)'\r\n    except ccxt.AuthenticationError as e:\r\n        results_store[stat] = 'ERR-Authentication Error (missing API keys)'\r\n    except ccxt.ExchangeError as e:\r\n        results_store[stat] = 'ERR-ExchangeError (ignoring)'\r\n    except ccxt.NotSupported as e:\r\n        results_store[stat] = 'ERR-NotSupported (ignoring)'\r\n    except Exception as e:\r\n        logging.exception(e)\r\n        # this is exactly what logging.exception does inside, sets a higher log level than error\r\n        logging.error(e, exc_info=1)\r\n        logging.critical(e, exc_info=1)\r\n        logging.debug(results_store)\r\n        logging.debug(param)\r\n        results_store[stat] = 'ERR-Unhandled Exception'\r\n        print('we got an Unhandled Eception executing the function a_put_order with the parameter %s' % (param))\r\n\r\n    print(results_store)\r\n\r\ndef put_order(side, exchange, sym, vol, price):\r\n    tup = (side, exchange, sym, vol, price)\r\n\r\n    #list of functions with concurrent execution\r\n    #I just let 1 here to facilitate the reading, but there shoud be more\r\n    [asyncio.ensure_future(a_put_order(tup))]\r\n\r\n    pending = asyncio.Task.all_tasks()\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(asyncio.gather(*pending))\r\n\r\nif __name__ == '__main__':\r\n    put_order('buy', 'kraken', 'BTC/EUR', 0.01, 5000)\r\n```\r\nThe logged Exception:\r\n{'buySTATUS': 'ERR-Authentication Error (missing API keys)'}\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1048/comments",
    "author": "dbzalpha",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-03T15:20:50Z",
        "body": "```Python\r\nimport asyncio\r\nimport json\r\nimport time\r\nimport ccxt.async as ccxt\r\nresults_store = {}\r\nuseful_results = {}\r\nPYTHONASYNCIODEBUG = 1\r\n\r\nexchange = ccxt.kraken ({  # ←----------------- SAME MISTAKE WAS HERE AGAIN, EDIT THIS LINE\r\n    'apiKey': 'myCorrect apiKey',\r\n    'secret': 'my secret',\r\n    'nonce': lambda: int(time.time() * 1000),\r\n    'verbose' : True\r\n})\r\n\r\nasync def a_put_order(param):\r\n\t#extract the param\r\n    side, exchange_name, symbol, amount, price = param\r\n    print ('we put a order %s on the exchange %s' %(side, exchange_name))\r\n\r\n    stat = side + 'STATUS'\r\n    ids = side + 'ID'\r\n    #initiate the exchange named exchange_name, here 'kraken'\r\n    # exchange = getattr(ccxt, exchange_name)({'verbose': False}) # ←-------- NOT NEEDED HERE\r\n\r\n    try:\r\n        if side == 'sell':\r\n            result = await exchange.create_limit_sell_order(symbol, amount, price)\r\n        elif side == 'buy':\r\n            result = await exchange.create_limit_buy_order(symbol, amount, price)\r\n        else:\r\n            print ('unknown direction for our order')\r\n        results_store[stat] = 'Placed'\r\n        results_dump = json.dumps(result)\r\n        results_store[ids]= json.loads(results_dump)\r\n\r\n    except ccxt.DDoSProtection as e:\r\n        results_store[stat] = 'ERR-DDoS Protection (ignoring)'\r\n    except ccxt.RequestTimeout as e:\r\n        results_store[stat] = 'ERR-Request Timeout (ignoring)'\r\n    except ccxt.ExchangeNotAvailable as e:\r\n        results_store[stat] = 'ERR-Exchange Not Available due to downtime or maintenance (ignoring)'\r\n    except ccxt.AuthenticationError as e:\r\n        results_store[stat] = 'ERR-Authentication Error (missing API keys)'\r\n    except ccxt.ExchangeError as e:\r\n        results_store[stat] = 'ERR-ExchangeError (ignoring)'\r\n    except ccxt.NotSupported as e:\r\n        results_store[stat] = 'ERR-NotSupported (ignoring)'\r\n    except Exception as e:\r\n        logging.exception(e)\r\n        # this is exactly what logging.exception does inside, sets a higher log level than error\r\n        logging.error(e, exc_info=1)\r\n        logging.critical(e, exc_info=1)\r\n        logging.debug(results_store)\r\n        logging.debug(param)\r\n        results_store[stat] = 'ERR-Unhandled Exception'\r\n        print('we got an Unhandled Eception executing the function a_put_order with the parameter %s' % (param))\r\n\r\n    print(results_store)\r\n\r\ndef put_order(side, exchange, sym, vol, price):\r\n    tup = (side, exchange, sym, vol, price)\r\n\r\n    #list of functions with concurrent execution\r\n    #I just let 1 here to facilitate the reading, but there shoud be more\r\n    [asyncio.ensure_future(a_put_order(tup))]\r\n\r\n    pending = asyncio.Task.all_tasks()\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(asyncio.gather(*pending))\r\n\r\nif __name__ == '__main__':\r\n    put_order('buy', 'kraken', 'BTC/EUR', 0.01, 5000)\r\n```"
      }
    ]
  },
  {
    "number": 1010,
    "title": "Help with ExchangeError",
    "created_at": "2017-12-30T16:16:05Z",
    "closed_at": "2017-12-30T16:41:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1010",
    "body": "Hello, \r\n\r\nSometimes I get an ExchangeError that is retry'able because the exchange has problems. For example:\r\n\r\n```\r\nccxt.base.errors.ExchangeError: kucoin 404\r\nccxt.base.errors.ExchangeError: kucoin 502 <html>\r\n```\r\nIn other situations however, it's not retry'able because I just did something stupid. For example:\r\n`ccxt.base.errors.ExchangeError: kucoin fetchOpenOrders requires a symbol param`\r\n\r\nHow can I differentiate between the two ? Now I'm retry'ing all ExchangeErrors, but in some cases this is not very useful.\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1010/comments",
    "author": "gaardiolor",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-30T16:25:26Z",
        "body": "Hi!\r\n\r\n> Sometimes I get an ExchangeError that is retry'able\r\n\r\nIn those cases you should get a NetworkError (another branch of errors, those you can recover from). The ExchangeError should stand for non-recoverable errors, like, when you missed a `symbol`. \r\n\r\nHowever, because we are under active development, the process of unification (including the unified error handling) is not finished yet, as you may know. It is a work in progress. So, in some cases, like that of Kucoin you can get an ExchangeError where in fact you should've get a NetworkError – that would indicate an inconsistency in the library. Kucoin was added not so long ago and there may still be bugs here and there.\r\n\r\nIf you are sure that the error was recoverable (like `too many requests` or whatever network error) and the error type was not detected correctly, please report all such cases, and we will eventually be able to fix them all. But, please, note that in order to recognize the error properly we need to see the verbose output (what exactly is sent to you in response from their API). We will be happy if you help us fix them.\r\n\r\n> How can I differentiate between the two ?\r\n\r\nCatch NetworkErrors and retry, catch ExchangeErrors and do not retry. Catch ExchangeError where it should be a NetworkError and report )\r\n\r\nDoes this answer your questions?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-30T16:34:17Z",
        "body": "P.S.You want to catch those cases specifically add this around your code:\r\n\r\n```Python\r\ntry:\r\n    YOUR_CODE\r\nexcept ExchangeError as e:\r\n    print('BAD ERROR CAUGHT')\r\n    print(type(e).__name__)\r\n    print(e.args)\r\n    print(exchange.last_http_response)\r\n    raise\r\n```"
      },
      {
        "user": "gaardiolor",
        "created_at": "2017-12-30T16:36:09Z",
        "body": "ok thanks! Of course I can get verbose output, but, isn't it better to handle it in a more generalized way and raise networkerror on all HTTP error codes (4xx, 5xx) ?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-30T16:40:57Z",
        "body": "@gaardiolor \r\n\r\n> isn't it better to handle it in a more generalized way and raise networkerror on all HTTP error codes (4xx, 5xx) ?\r\n\r\nNo, it isn't)\r\n\r\nExchanges report errors differently, and many of them report 429 for a NetworkError, for example... So, you can't distinguish by HTTP code, it will always be 4xx. We have to distinguish by their message/code. And for that we have to see it.\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-30T16:41:46Z",
        "body": "I'm closing this for now. Feel free to reopen it or just ask questions here. Or add a new issue, if needed. Thx."
      }
    ]
  },
  {
    "number": 996,
    "title": "Illegal characters found in parameter 'price'",
    "created_at": "2017-12-29T13:32:42Z",
    "closed_at": "2017-12-29T14:57:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/996",
    "body": "Illegal characters found in parameter 'price' for binance XVG - ETH. Not sure if api changed, this worked yesterday\r\n\r\nNot getting this in BTC trades.\r\n- OS: linux\r\n- Programming Language: nodejs\r\n- CCXT version: 1.10.508\r\n- Exchange: binance\r\n- Method:  \r\n\r\n```\r\n[ { size: '5397.74659822',\r\n    orig_size: '5397.74659822',\r\n    remaining_size: '5397.74659822',\r\n    orig_price: '0.00020651',\r\n    cancel_after: 'day',\r\n    product_id: 'XVG-ETH',\r\n    type: 'limit',\r\n    side: 'buy',\r\n    post_only: true } ]\r\nAn error occurred { Error: binance {\"code\":-1100,\"msg\":\"Illegal characters found in parameter 'price'; legal range is '^([0-9]{1,20})(\\\\.[0-9]{1,20})?$'.\"}\r\n    at binance.handleErrors (/app/node_modules/ccxt/js/binance.js:752:27)\r\n    at response.text.then.text (/app/node_modules/ccxt/js/base/Exchange.js:433:18)\r\n    at &lt;anonymous&gt;\r\n    at process._tickCallback (internal/process/next_tick.js:188:7) constructor: [Function: ExchangeError] }\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/996/comments",
    "author": "lnguyen",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-29T13:39:50Z",
        "body": "Can you show a minimal but a complete snippet of code to reproduce the problem and the **verbose** output (set .verbose = true on the exchange)?"
      },
      {
        "user": "lnguyen",
        "created_at": "2017-12-29T13:46:04Z",
        "body": "I'm using zenbot let me see if I can turn on verbose,\r\n\r\n```\r\n      var order = {}\r\n      client.createOrder(joinProduct(opts.product_id), opts.type, opts.side, this.roundToNearest(opts.size, opts), opts.price, args).then(result => {\r\n        if (result && result.message === 'Insufficient funds') {\r\n          order = {\r\n            status: 'rejected',\r\n            reject_reason: 'balance'\r\n          }\r\n          return cb(null, order)\r\n        }\r\n        order = {\r\n          id: result ? result.id : null,\r\n          status: 'open',\r\n          price: opts.price,\r\n          size: this.roundToNearest(opts.size, opts),\r\n          post_only: !!opts.post_only,\r\n          created_at: new Date().getTime(),\r\n          filled_size: '0',\r\n          ordertype: opts.order_type\r\n        }\r\n        orders['~' + result.id] = order\r\n        cb(null, order)\r\n      }).catch(function (error) {\r\n        console.error('An error occurred', error)\r\n        return retry('buy', func_args)\r\n      })\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-29T13:47:37Z",
        "body": "```JavaScript\r\n      var order = {}\r\n\r\n      client.verbose = true // ← ADD THIS LINE HERE (REMOVE YOUR KEYS FROM THE OUTPUT IF YOU WANT)\r\n\r\n      client.createOrder(joinProduct(opts.product_id), opts.type, opts.side, this.roundToNearest(opts.size, opts), opts.price, args).then(result => {\r\n        if (result && result.message === 'Insufficient funds') {\r\n          order = {\r\n            status: 'rejected',\r\n            reject_reason: 'balance'\r\n          }\r\n          return cb(null, order)\r\n        }\r\n        order = {\r\n          id: result ? result.id : null,\r\n          status: 'open',\r\n          price: opts.price,\r\n          size: this.roundToNearest(opts.size, opts),\r\n          post_only: !!opts.post_only,\r\n          created_at: new Date().getTime(),\r\n          filled_size: '0',\r\n          ordertype: opts.order_type\r\n        }\r\n        orders['~' + result.id] = order\r\n        cb(null, order)\r\n      }).catch(function (error) {\r\n        console.error('An error occurred', error)\r\n        return retry('buy', func_args)\r\n      })\r\n```"
      },
      {
        "user": "lnguyen",
        "created_at": "2017-12-29T14:13:29Z",
        "body": "Interesting the post is getting a null value for price. Let me see if I can trace that down. "
      },
      {
        "user": "lnguyen",
        "created_at": "2017-12-29T14:57:27Z",
        "body": "Closing for now, I was running code that caused this issue and need to see what difference is between updated code and old code"
      }
    ]
  },
  {
    "number": 962,
    "title": "Bittrex OHLCV fetching problems",
    "created_at": "2017-12-25T22:51:22Z",
    "closed_at": "2017-12-26T20:26:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/962",
    "body": "- OS: Win7\r\n- Programming Language: Python 2.7\r\n- CCXT version: 10.477\r\n- Exchange: Bittrex\r\n- Method: fetch_ohlcv()\r\n\r\nFirst of all thank you so much for the work you are doing! It is an amazing tool you guys created!\r\n\r\nMy problem is that I cant fetch OHLCV data for only the last day. No matter if I use since (code below) or not I will still get 5760 length for the OHLCV.\r\nWhy am I getting always all the candle data and not only the ones for the last day?\r\n\r\nThank you in advance for your help!\r\n\r\n```\r\nsince = xchange.milliseconds() - 1 * 86400000 \r\nlimit = 2\r\nmy_data = xchange.fetch_ohlcv(\"ETH/BTC\", '5m', since, limit)\r\nprint len(my_data)\r\nprint my_data\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/962/comments",
    "author": "hunsnowboarder",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-26T05:43:35Z",
        "body": "This one looks strange, as if `limit` is None... Are you sure that the limit is not None when you get 5760 from the `len(my_data)`? \r\n\r\nHere's what I have on Mac:\r\n\r\n```shell\r\nmbp:python igorkroitor$ python\r\nPython 2.7.13 (default, Jun  5 2017, 10:04:07) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin\r\n```\r\n```Python\r\n>>> import ccxt\r\n>>> exchange = ccxt.bittrex()\r\n>>> since = exchange.milliseconds () - 86400000\r\n>>> limit = 2\r\n>>> data = exchange.fetch_ohlcv('ETH/BTC', '5m', since, limit)\r\n\r\n>>> len(data)\r\n2  # ←------------------ proper filtering, worked...\r\n\r\n>>> [exchange.iso8601(candle[0]) for candle in data]\r\n['2017-12-25T05:35:00.000Z', '2017-12-25T05:40:00.000Z']\r\n\r\n>>> print(data)\r\n[[1514180100000, 0.0518674, 0.05186742, 0.05153272, 0.05169228, 181.76694689], \r\n[1514180400000, 0.05169227, 0.0519, 0.051541, 0.05165, 231.32179279]]\r\n\r\n>>> ccxt.__version__\r\n'1.10.477'\r\n\r\n>>> len(exchange.last_json_response['result']) # ←------ last response contains 5760 candles\r\n5760\r\n\r\n>>> #                                   ↓ this is a proof of proper limit=2 filtering\r\n>>> exchange.last_http_response # ←------------ last response contains 5760 candles\r\nu'{\"success\":true,\"message\":\"\",\"result\":[    \r\n{\"O\":0.03605219,\"H\":0.03621868,\"L\":0.03605219,\"C\":0.03612818,\"V\":203.61919193,\"T\":\"2017-12-06T05:35:00\",\"BV\":7.35361982},\r\n{\"O\":0.03612818,\"H\":0.03621060,\"L\":0.03611001,\"C\":0.03612000,\"V\":483.19784217,\"T\":\"2017-12-06T05:40:00\",\"BV\":17.46557084},\r\n{\"O\":0.03611026,\"H\":0.03618283,\"L\":0.03611026,\"C\":0.03611027,\"V\":349.73663942,\"T\":\"2017-12-06T05:45:00\",\"BV\":12.63578882},\r\n{\"O\":0.03611027,\"H\":0.03621906,\"L\":0.03606101,\"C\":0.03609623,\"V\":250.87983358,\"T\":\"2017-12-06T05:50:00\",\"BV\":9.06390131},\r\n{\"O\":0.03607774,\"H\":0.03621905,\"L\":0.03598732,\"C\":0.03598732,\"V\":739.96709428,\"T\":\"2017-12-06T05:55:00\",\"BV\":26.69147154},\r\n{\"O\":0.03598429,\"H\":0.03607774,\"L\":0.03580000,\"C\":0.03588882,\"V\":805.96461560,\"T\":\"2017-12-06T06:00:00\",\"BV\":28.97289536},\r\n{\"O\":0.03588882,\"H\":0.03607634,\"L\":0.03572000,\"C\":0.03596212,\"V\":811.98497464,\"T\":\"2017-12-06T06:05:00\",\"BV\":29.09296835},\r\n...\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-26T06:02:09Z",
        "body": ">My problem is that I cant fetch OHLCV data for only the last day. \r\n\r\nIf you think of it carefully... 5760 * 5 minutes = 28800 minutes = 20 days. Whenever you fetch 5m-OHLCV from Bittrex, it will return last twenty days of history. This is why without any filtering you will see 2017-12-06 as the first date in the first candle (look at `.last_http_response` in my post above).\r\n\r\nWith filtering since last day (milliseconds - 86400000), you will see the first candle starting from 2017-12-25 (yesterday), -24 hours from now (look around `print(data)` in the above post).\r\n\r\nWith filtering since last day + limiting up to 2 candles, you will get two candles, starting from yesterday, -24 hours from now, each one representing 5 minutes, which is again clearly visible in my above post.\r\n\r\n> No matter if I use since (code below) or not I will still get 5760 length for the OHLCV.\r\n\r\nBittrex will always return the same amount of 5760 candles and the filtering is done in ccxt on client-side. So, after ccxt gets 5760 candles, it will filter by since and limit to 2 candles for you.\r\n\r\n> Why am I getting always all the candle data and not only the ones for the last day?\r\n\r\nI guess, you're not filtering them or not interpreting the results correctly? \r\n\r\nHope it helps."
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2017-12-26T06:11:54Z",
        "body": "Thank you very much for your reply.\r\n\r\n...so I have two questions now. :)\r\n1) You wrote that the filtering is done a client side. So there is no other option to decrease the size on server side? I am asking this because I go through all of the coins searching for candle patterns. I am really looking for the last 5 candles, therefore I do no care about the data before... But going through all of the coins takes almost 10 mins. Is there a way to retrieve OHLCV data faster, or without getting all the data back till the beginnig?\r\n\r\n2) The code is still not working for me.\r\n\r\n```\r\nimport ccxt\r\nexchange = ccxt.bittrex()\r\nsince = exchange.milliseconds () - 86400000\r\nlimit = 2\r\nprint limit, since\r\ndata = exchange.fetch_ohlcv('ETH/BTC', '5m', since, limit)\r\nprint len(data)\r\n```\r\n\r\nResult:\r\n\r\n2 1514181924752\r\n5760\r\nProcess finished with exit code 0\r\n\r\nThank you very much in advance!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-26T06:20:09Z",
        "body": "> You wrote that the filtering is done a client side. So there is no other option to decrease the size on server side? \r\n\r\nNot for Bittrex. They don't have an option for filtering, I'm afraid. They don't have OHLCV in their API at all, and we are using their v2 undocumented web API to fetch their OHLCV at least somehow. So, while most exchanges allow filtering on server side, Bittrex does not. We have to do it on client side.\r\n\r\n> I am asking this because I go through all of the coins searching for candle patterns. I am really looking for the last 5 candles, therefore I do no care about the data before... But going through all of the coins takes almost 10 mins. Is there a way to retrieve OHLCV data faster, or without getting all the data back till the beginnig?\r\n\r\nThere is an alternative: fetch trades for last 10 minutes and build OHLCV from trades (#751, #859, #894). However, last 10 minutes of trades might contain even more data on Bittrex... So, I can't say which one is faster right away.\r\n\r\n> The code is still not working for me.\r\n\r\nCan you run/repeat my sequence of commands to make it more clear, with versions, which dates are output, etc?"
      },
      {
        "user": "hunsnowboarder",
        "created_at": "2017-12-26T20:25:26Z",
        "body": "Sorry for my late reply. I had very strange issues and finally figured out what the problem was. I did not update ccxt for a while now only some of the exchanges. \r\n\r\nSo I did a thorough update of everything and now it works like a charm. Thank you again for your continuous support and help! Have a happy new year!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-26T20:26:08Z",
        "body": "@hunsnowboarder thanks for reporting back! Happy holidays!"
      }
    ]
  },
  {
    "number": 951,
    "title": "Cryptopia - fetch_order() OrderNotCached",
    "created_at": "2017-12-23T21:43:59Z",
    "closed_at": "2017-12-26T04:22:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/951",
    "body": "Hello,\r\n\r\nI am trying to run \r\n\r\n$o = createLimitBuyOrder($m, $v, $p);\r\n\r\nfetch_order($o['id'], $c);\r\n\r\nWhy you request the public function filter_by_since_limit() in Exchange.php line 1097?\r\n\r\nAfter this call the result in fetch_orders() cryptopia.php line 509 lost the id and the fetch_order return throw new OrderNotCached ($this->id . ' order ' . $id . ' not found in cached .orders, fetchOrder requires .orders (de)serialization implemented for this method to work properly');\r\n\r\nWhy you have fetch_order and fetch_orders?\r\n\r\nLook attached report.\r\n\r\nThanks.\r\n\r\n- OS: Ubuntu\r\n- Programming Language: PHP 7.1.1\r\n- CCXT version: 1.10.459\r\n- Exchange: Cryptopia\r\n- Method: fetch_order()\r\n\r\n$o = createLimitBuyOrder($m, $v, $p);\r\n\r\nfetch_order($o['id'], $c);\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/951/comments",
    "author": "RCDNC-ai",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-23T21:51:55Z",
        "body": "Hi!\r\n\r\n> Why you request the public function filter_by_since_limit() in Exchange.php line 1097?\r\n\r\nIt filters the orders by `since` and `limit` params, that were added not so long ago. The purpose of the filtering is to make the output consistent across all exchanges, even the ones that don't support output-limiting params.\r\n\r\n> After this call the result in fetch_orders() cryptopia.php line 509 lost the id and the fetch_order return throw new OrderNotCached ($this->id . ' order ' . $id . ' not found in cached .orders, fetchOrder requires .orders (de)serialization implemented for this method to work properly');\r\n\r\nThis can indicate a bug in the above logic, if this is the case, I will fix it and will let you know when it's there. Thank you for reporting this.\r\n\r\n> Why you have fetch_order and fetch_orders?\r\n\r\n- ` fetch_order`: fetch one order by id\r\n- `fetch_orders`: fetch all (multiple) orders"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-23T21:58:45Z",
        "body": "@ricardodinucci , what are your values of `$c` and `$m`? (`$c` should be equal to `$m`, don't really see the full code to understand why you use different variables for the same symbol)."
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-23T22:07:02Z",
        "body": "@ricardodinucci does this work for you?\r\n\r\n```PHP\r\n$id = '\\\\ccxt\\\\cryptopia';\r\n$exchange = new $id (array (\r\n    'apiKey' => 'YOUR_API_KEY',\r\n    'secret' => 'YOUR_SECRET',\r\n    'enableRateLimit' => true,\r\n));\r\n$symbol = 'ETH/BTC';\r\n$amount = 0.01;\r\n$price = 0.04;\r\n$result = $exchange->create_limit_buy_order ($symbol, $amount, $price);\r\n$order = $exchange->fetch_order ($result['id'], $symbol);\r\nvar_dump ($order);\r\n```\r\n\r\n?"
      },
      {
        "user": "Pmant",
        "created_at": "2017-12-26T03:36:11Z",
        "body": "related to #660 ?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-26T04:21:44Z",
        "body": "@Pmant most likely, but it's hard to tell, from the posted code (too short). I am closing this for now, until we have a follow up on this."
      }
    ]
  },
  {
    "number": 950,
    "title": "Faster connections to binance",
    "created_at": "2017-12-23T20:11:22Z",
    "closed_at": "2017-12-23T20:32:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/950",
    "body": "Are there options for connecting to binance faster than the rate limit?\r\n\r\n- OS: Macbook\r\n- Programming Language: Python\r\n- CCXT version:\r\n- Exchange: Binance\r\n- Method:\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/950/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-23T20:23:36Z",
        "body": "@msieg:\r\n- websockets\r\n- proxies"
      },
      {
        "user": "ghost",
        "created_at": "2017-12-23T20:24:59Z",
        "body": "Thanks!"
      }
    ]
  },
  {
    "number": 932,
    "title": "Tracking all order books simultaneously",
    "created_at": "2017-12-22T07:58:51Z",
    "closed_at": "2017-12-22T22:18:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/932",
    "body": "Is it possible to read the order book for every coin on binance simultaneously, or do I need to loop through to get each one?\r\n\r\n- OS: Macook\r\n- Language: Python\r\n- CCXT version:\r\n- Exchange: Binance\r\n- Method: \r\n\r\n```\r\nbook = exchange.fetch_order_book('Symbol') vs. book = exchange.fetch_order_book(<all_coins>)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/932/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-22T08:23:56Z",
        "body": "> Is it possible to read the order book for every coin on binance simultaneously, or do I need to loop through to get each one?\r\n\r\nIt is not possible with REST, you need to run a loop over them to get each one. With WS this may be possible, we are working on unifying WS right now. Let me know if this answers your question or not. Thx!"
      },
      {
        "user": "ghost",
        "created_at": "2017-12-22T17:38:15Z",
        "body": "This does answer my question, thanks! Please let us know when WS is ready!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-22T22:18:19Z",
        "body": "Sure!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-07T02:50:22Z",
        "body": "Good news! Merged #1050 into ccxt version 1.10.1024!"
      }
    ]
  },
  {
    "number": 893,
    "title": "bitstamp createOrder type limit throws \"under 5$ Order\" exception",
    "created_at": "2017-12-18T21:39:45Z",
    "closed_at": "2017-12-18T22:09:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/893",
    "body": "createLimitBuyOrder is also broken on bitstamp.\r\n\r\n- exchange.createOrder ('BTC/USD', 'limit', 'buy', '0.001', '20.00') -> doesn't work\r\n- exchange.createOrder ('BTC/USD', 'market', 'buy', '0.001') -> works fine\r\n\r\ni don't know how to fix it myself, sorry.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/893/comments",
    "author": "jom1337",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-18T21:50:30Z",
        "body": "Let's see... you're buying BTC 0.001 for a price of $20 per BTC, that is:\r\n\r\n`$20 * 0.001 = $0.020` \r\n\r\nwhich is obviously less that $5. Pure arithmetics...\r\n\r\nYour BTC/USD order should be worth more than $5 in total. \r\n\r\n> i don't know how to fix it myself, sorry.\r\n\r\nOne solution I would propose is to not submit orders that are too small, because most exchanges will forbid *dust trade* (orders of very tiny amounts)."
      },
      {
        "user": "jom1337",
        "created_at": "2017-12-18T22:09:03Z",
        "body": "oh, i totally misunderstood this function.\r\nthanks a lot."
      }
    ]
  },
  {
    "number": 862,
    "title": "php - composer question",
    "created_at": "2017-12-15T16:05:28Z",
    "closed_at": "2017-12-18T23:52:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/862",
    "body": "I now there has been recent work for php. I am on version 1.10.389 (from ccxt.php)\r\n\r\nDoes anybody have a working example of a php testcase with composer. \r\n\r\nI have a simple program:\r\n```JSON\r\ncomposer.json:\r\n{\r\n    \"require\": {\r\n        \"curl/curl\": \"^1.8\",\r\n        \"lib-pcre\": \"^8.32\",\r\n        \"lib-iconv\": \"^2.17\",\r\n        \"ccxt/ccxt\": \"^1.10\"\r\n    }\r\n}\r\n```\r\nfoo.php\r\n```PHP\r\n<?php\r\n\r\nrequire_once __DIR__ . '/vendor/autoload.php';\r\n\r\nuse ccxt;\r\n\r\nvar_dump (\\cxxt\\Exchange::$exchanges);\r\n?>\r\n```\r\nphp -f foo.php fails with:\r\n```\r\nPHP Warning:  The use statement with non-compound name 'ccxt' has no effect in /home/livenano/bitcoin/php/foo.php on line 5\r\nPHP Fatal error:  Class 'cxxt\\Exchange' not found in /home/livenano/bitcoin/php/foo.php on line 8\r\n```\r\n\r\nWhat am I missing?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/862/comments",
    "author": "dpreilan",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-15T16:18:04Z",
        "body": "1. Delete the `use ccxt;` line\r\n2. Fix the typo in the last line (cxxt → ccxt): \r\n```PHP\r\nvar_dump (\\cxxt\\Exchange::$exchanges);\r\n//          ↓ here \r\nvar_dump (\\ccxt\\Exchange::$exchanges); \r\n```\r\n3. Retry"
      },
      {
        "user": "dpreilan",
        "created_at": "2017-12-15T16:36:26Z",
        "body": "I must have messed that up attempting to rootcause. Now,\r\n\r\nPHP Fatal error:  Class 'ccxt\\Exchange' not found in /home/livenano/bitcoin/php/foo.php on line 6\r\n"
      },
      {
        "user": "dpreilan",
        "created_at": "2017-12-15T16:39:22Z",
        "body": "Note, the following works if when I add the second require\r\n```\r\n<?php\r\n\r\nrequire_once __DIR__ . '/vendor/autoload.php';\r\n\r\nrequire('vendor/ccxt/ccxt/ccxt.php');\r\n\r\n//var_dump (\\cxxt\\Exchange::$exchanges);\r\nvar_dump (\\ccxt\\Exchange::$exchanges);\r\n\r\n?>\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-18T23:52:25Z",
        "body": "This is fixed in #876, ccxt version 1.10.412. Let us know if you have any difficulties with it. Thx!"
      }
    ]
  },
  {
    "number": 815,
    "title": "A few doubts when creating orders",
    "created_at": "2017-12-10T11:46:45Z",
    "closed_at": "2017-12-11T16:34:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/815",
    "body": "I have to deal with a lot of exchanges. When I am going to make an order, is impossible to me to know a few (important) things without actually testing them manually and reading each exchange docs:\r\n\r\n- How can i check if the exchange allows market orders?\r\n- How can i know the minimum amounts of trading for each exchange?\r\n- How can i know if i should put the price per coin or the total price when making an order? For example, if i want to buy 200 XRP at 0.00001676 each one, i don't know if i should pass 0.00001676 or 0.003352 as price argument.\r\n\r\nThanks in advance kroitor!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/815/comments",
    "author": "rubobaquero",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-10T18:08:54Z",
        "body": "Unfortunately, for now most answers to your questions are negative, however, as you know, we are working very hard to deliver listed features, because we need them for our own needs as well... So, it's a work in progress (under development).\r\n\r\n> How can i check if the exchange allows market orders?\r\n\r\nCurrently, an exchange will throw an exception if you submit a market order where it is not allowed, yet it still requires to try the submission first. A solution to that would be to add a flag to each exchange that would clearly designate whether an exchange has support for market orders or not.\r\n\r\n> How can i know the minimum amounts of trading for each exchange?\r\n\r\nWe have started the work on this and for some exchanges we have defined `exchange.market['BTC/USD']['limits']` and `exchange.market['BTC/USD']['precision']`, if you look at those structures, you'll see how to use that information. However, those structures are not yet defined for all exchanges, because this is still a work in progress (most of it is done in a very small team of 2-3 people with the help of the community). Let us know if you find undefined limits and precision, or, it would be even better, if you could submit a PR (see how those things are defined, where present already).\r\n\r\n> How can i know if i should put the price per coin or the total price when making an order? For example, if i want to buy 200 XRP at 0.00001676 each one, i don't know if i should pass 0.00001676 or 0.003352 as price argument.\r\n\r\nIn 99% of cases the amount of the order is in **base** currency (before the slash in a *symbol*). The price and total cost is in **quote** currency (after the slash). However, you're right, there's no flag that would tell that explicitly. We would add it sooner or later, or... once again, your PRs and contributions on that are welcome as well.\r\n\r\nI know, the above may not be a very helpful answer... Let me know if I can help with anything else.\r\n\r\n"
      },
      {
        "user": "rubobaquero",
        "created_at": "2017-12-11T12:27:43Z",
        "body": "Thanks for your answer Kroitor. I have been programming for five days and it is a little bit frustrating to have to check everything related with orders for each exchange that i use. \r\n\r\nBut ... more frustrating is to see constant timeouts with exchanges like kraken that make my arbitrage system completely useless. \r\n\r\nI think that doing near-real-time arbitraging with REST APIs is impossible. I suppose that doing it with websockets would be much better. Could you tell us your experience?\r\n\r\nOnce again, thanks in advance for your great work!!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-11T12:30:00Z",
        "body": "> I think that doing near-real-time arbitraging with REST APIs is impossible. I suppose that doing it with websockets would be much better. Could you tell us your experience?\r\n\r\nWhen it's down, it's usually down completely ) WS can improve it under normal loads, however, it can also behave \"weird\" when it is under high loads. Kraken does not offer WS, btw... In general, you can't go with REST only or WS only, have to mix the two in 99% of practical cases."
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-11T16:34:18Z",
        "body": "@rubobaquero i'd close this issue for now, if you don't mind. Feel free to reopen it if needed or just continue to ask questions, if any. I'll be happy to help. Thx!"
      }
    ]
  },
  {
    "number": 783,
    "title": "What is the best way to know if the market is available or not?",
    "created_at": "2017-12-07T19:49:57Z",
    "closed_at": "2017-12-08T22:52:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/783",
    "body": "What is the best way to know if the market is available or not?\r\nFor example, last price of 'BTC/CNY' in 'quoine' exchange can be fetched even if the market has been closed.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/783/comments",
    "author": "dhmk815",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-07T22:04:19Z",
        "body": "@dhmk815 currently, we have started to unify the `.active = true/false` market property, however, it is not unified for all exchanges yet. We will be happy if you contribute to this work. We are also reworking the currencies API (fetchCurrencies) to be able to track disabled funding along with inactive markets. Let me know if it answers your question or not. Thx!"
      }
    ]
  },
  {
    "number": 772,
    "title": "XMR (Monero) Withdrawal and Payment ID example",
    "created_at": "2017-12-07T00:27:11Z",
    "closed_at": "2017-12-07T00:36:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/772",
    "body": "Hello!\r\n\r\nMany (all?) exchanges require both wallet + payment ID to deposit XMR (Monero).\r\nTherefore, once withdrawing you should specify both wallet address and payment id. I failed to find a code example for payment id param:\r\n`exchange.withdraw (currency, amount, address, params = {})`\r\n\r\nCould you please help it?\r\n\r\nThank you in advance,\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/772/comments",
    "author": "Fcl69",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-07T00:29:12Z",
        "body": "@Fcl69 it is exchange-specific currently, we don't have this particular aspect of XMR unified yet. However, we have started a major rework of currencies, so we hope to support for that soon. In the meantime, you will have to look up the name of that param in exchanges' docs. We will notify you on progress. Let me know if the above does not answer your question. Thx!"
      },
      {
        "user": "Fcl69",
        "created_at": "2017-12-07T00:33:07Z",
        "body": "Ok, got it. So... just to confirm. Here's what binance API says, for example:\r\n> addressTag | STRING | NO | Secondary address identifier for coins like XRP,XMR etc.\r\n\r\nDoes it mean my code should look like that:\r\n`exchange.withdraw ('XMR', 1, 'address', params = {addressTag='payment_id'})`\r\n?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-07T00:35:33Z",
        "body": "@Fcl69 \r\n\r\n> Does it mean my code should look like that:\r\n> exchange.withdraw ('XMR', 1, 'address', params = {addressTag='payment_id'})\r\n\r\nAlmost, the exact meaning is:\r\n\r\n```Python\r\nexchange.withdraw ('XMR', 1, 'address', {'addressTag': 'payment_id'})\r\n```"
      },
      {
        "user": "Fcl69",
        "created_at": "2017-12-07T00:36:33Z",
        "body": "gotcha! Thank you so much as always!"
      }
    ]
  },
  {
    "number": 746,
    "title": "pip install on Mac: Permission denied",
    "created_at": "2017-12-04T16:32:43Z",
    "closed_at": "2017-12-04T16:37:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/746",
    "body": "When I install ccxd on command line of Mac, I got a message like a following.\r\nHow can I install ccxt? \r\n\r\npip install ccxt\r\n\r\n\r\nCollecting ccxt\r\n\r\n  Using cached ccxt-1.10.282-py2.py3-none-any.whl\r\nRequirement already satisfied: setuptools in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from ccxt)\r\nInstalling collected packages: ccxt\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py\", line 215, in main\r\n    status = self.run(options, args)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/commands/install.py\", line 342, in run\r\n    prefix=options.prefix_path,\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py\", line 784, in install\r\n    **kwargs\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py\", line 851, in install\r\n    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py\", line 1064, in move_wheel_files\r\n    isolated=self.isolated,\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/wheel.py\", line 345, in move_wheel_files\r\n    clobber(source, lib_dir, True)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/wheel.py\", line 316, in clobber\r\n    ensure_dir(destdir)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/utils/__init__.py\", line 83, in ensure_dir\r\n    os.makedirs(path)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py\", line 157, in makedirs\r\n    mkdir(name, mode)\r\nOSError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/ccxt'",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/746/comments",
    "author": "kangilrhee",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-04T16:34:22Z",
        "body": "Have you tried `sudo pip install ccxt` ?"
      },
      {
        "user": "kangilrhee",
        "created_at": "2017-12-04T16:36:10Z",
        "body": "@kroitor Thanks.! I installed 👍  :)"
      }
    ]
  },
  {
    "number": 712,
    "title": "Account Opening API",
    "created_at": "2017-11-29T16:53:13Z",
    "closed_at": "2017-11-29T17:14:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/712",
    "body": "The readme mentions that some exchanges offer an API for opening accounts. Do you know which ones?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/712/comments",
    "author": "jelling",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-29T16:58:04Z",
        "body": "For example, Gatecoin, CoinSecure... But that's pretty much all of them for now."
      },
      {
        "user": "jelling",
        "created_at": "2017-11-29T17:14:13Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 667,
    "title": "HitBTC clientOrderID",
    "created_at": "2017-11-24T13:35:13Z",
    "closed_at": "2017-11-24T14:28:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/667",
    "body": "I've seen in the code clientOrderID is in milliseconds. Per documentation, it's a string. Could you change it to UUID?\r\n\r\nPython code:\r\n\r\n```python\r\n>>> import uuid\r\n>>> str(uuid.uuid4())\r\n'fb076e7f-0e06-4a0e-ba24-e284ac68619a'\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/667/comments",
    "author": "nmiculinic",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-24T13:52:31Z",
        "body": "@nmiculinic it's currently a milliseconds string, does switching it to UUID make any difference?"
      },
      {
        "user": "nmiculinic",
        "created_at": "2017-11-24T14:01:34Z",
        "body": "Yes; since UUID is by definition universally unique identifier. When cross matching orders, I'd rather prefer UUIDs, then having to check for rare condition where two order from different exchanges is executed into the same millisecond. (or some other objects; uuid's are cool)."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-24T14:45:48Z",
        "body": "Switched to UUIDs in 1.10.205. Thx!"
      }
    ]
  },
  {
    "number": 629,
    "title": "JSON format",
    "created_at": "2017-11-19T09:27:47Z",
    "closed_at": "2017-11-19T17:46:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/629",
    "body": "Any query I make to any exchange does not return in JSON., return is wrapped around screen instead.\r\nThe manual describes JSON being returned untouched.  Shouldnt the information be presented in a cleaner way as it is shown in the manual?\r\n\r\nReturned JSON Objects\r\nAll public and private API methods return raw decoded JSON objects in response from the exchanges, as is, **untouched**. The unified API returns JSON-decoded objects in a common format and structured uniformly across all exchanges.\r\n\r\n==============================================================\r\nEx: \r\n\r\n>>> import asyncio\r\n>>> import ccxt.async as ccxt\r\n>>> async def print_poloniex_ethbtc_ticker():\r\n...     poloniex = ccxt.poloniex()\r\n...     print(await poloniex.fetch_ticker('ETH/BTC'))\r\n... \r\n>>> asyncio.get_event_loop().run_until_complete(print_poloniex_ethbtc_ticker())\r\n{'vwap': None, 'timestamp': 1511076542136, 'last': 0.04773992, 'percentage': None, 'first': None, 'info': {'percentChange': '0.10483499', 'baseVolume': '5166.58019286', 'high24hr': '0.04859050', 'highestBid': '0.04767038', 'isFrozen': '0', 'id': 148, 'low24hr': '0.04249711', 'lowestAsk': '0.04773992', 'quoteVolume': '115503.38042345', 'last': '0.04773992'}, 'close': None, 'ask': 0.04773992, 'quoteVolume': 5166.58019286, 'baseVolume': 115503.38042345, 'change': 0.10483499, 'low': 0.04249711, 'average': None, 'open': None, 'symbol': 'ETH/BTC', 'bid': 0.04767038, 'high': 0.0485905, 'datetime': '2017-11-19T07:29:02.136Z'}\r\n>>> \r\n>>> \r\n==============================================================",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/629/comments",
    "author": "snub-fighter",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-19T17:46:20Z",
        "body": "> Any query I make to any exchange does not return in JSON., return is wrapped around screen instead.\r\n\r\nThat's how Python prints JSON in the terminal. \r\n\r\n> The manual describes JSON being returned untouched. \r\n\r\nExactly, public and private APIs return JSON untouched (the `info` substructure), whereas unified APIs also parse it and add additional fields (other fields around the info). CCXT does not do any screen \"wrapping\". Your terminal and Python does. The examples in the manual are preformatted by hand for readability, whereas in code those structures are returned as is.\r\n\r\n> Shouldnt the information be presented in a cleaner way as it is shown in the manual?\r\n\r\nCCXT does not present that info to you. You present that info to yourself from CCXT. So it's up to you how you want it formatted in your environment/terminal. If you see it formatted not the way you want it when you output it, and you think it should be output differently, it means you're misunderstanding how the output formatting works in programming languages and in your terminal. \r\n\r\nCCXT does not reformat it. Use pprint if you want \"each key on a separate line\".\r\n\r\n```Python\r\nimport asyncio\r\nimport ccxt.async as ccxt\r\nfrom pprint import pprint\r\npoloniex = ccxt.poloniex()\r\npprint(asyncio.get_event_loop().run_until_complete(poloniex.fetch_ticker('ETH/BTC')))\r\n```\r\n\r\nIn fact, this has absolutely nothing to do with CCXT, compare:\r\n\r\n1. \r\n   \r\n```Python\r\n    print({'ask': 0.04549986,\r\n        'average': None,\r\n        'baseVolume': 167015.6085475,\r\n        'bid': 0.04548301,\r\n        'change': 0.04679197,\r\n        'close': None,\r\n        'datetime': '2017-11-19T17:38:39.730Z',\r\n        'first': None,\r\n        'high': 0.0485905,\r\n        'info': {'baseVolume': '7658.05449808',\r\n                'high24hr': '0.04859050',\r\n                'highestBid': '0.04548301',\r\n                'id': 148,\r\n                'isFrozen': '0',\r\n                'last': '0.04549986',\r\n                'low24hr': '0.04300092',\r\n                'lowestAsk': '0.04549986',\r\n                'percentChange': '0.04679197',\r\n                'quoteVolume': '167015.60854750'},\r\n        'last': 0.04549986,\r\n        'low': 0.04300092,\r\n        'open': None,\r\n        'percentage': None,\r\n        'quoteVolume': 7658.05449808,\r\n        'symbol': 'ETH/BTC',\r\n        'timestamp': 1511113119073,\r\n        'vwap': None})\r\n```\r\n\r\n↑ this **does not involve CCXT** and it \"reformats\" your output. Strange, isn't it? Your terminal+Python does that, because your terminal can't scroll to the right, man, and this is how Python outputs untouched JSON.\r\n\r\n2. \r\n\r\n```Python\r\n    from pprint import pprint\r\n    print({'ask': 0.04549986,\r\n        'average': None,\r\n        'baseVolume': 167015.6085475,\r\n        'bid': 0.04548301,\r\n        'change': 0.04679197,\r\n        'close': None,\r\n        'datetime': '2017-11-19T17:38:39.730Z',\r\n        'first': None,\r\n        'high': 0.0485905,\r\n        'info': {'baseVolume': '7658.05449808',\r\n                'high24hr': '0.04859050',\r\n                'highestBid': '0.04548301',\r\n                'id': 148,\r\n                'isFrozen': '0',\r\n                'last': '0.04549986',\r\n                'low24hr': '0.04300092',\r\n                'lowestAsk': '0.04549986',\r\n                'percentChange': '0.04679197',\r\n                'quoteVolume': '167015.60854750'},\r\n        'last': 0.04549986,\r\n        'low': 0.04300092,\r\n        'open': None,\r\n        'percentage': None,\r\n        'quoteVolume': 7658.05449808,\r\n        'symbol': 'ETH/BTC',\r\n        'timestamp': 1511113119073,\r\n        'vwap': None})\r\n```\r\n\r\n↑ This example uses `pprint` to pretty-print your output, **no CCXT involved, again**."
      }
    ]
  },
  {
    "number": 625,
    "title": "'master' has been diverged",
    "created_at": "2017-11-18T06:09:06Z",
    "closed_at": "2017-11-18T11:28:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/625",
    "body": "Hi, git noticed that we diverged after 1.10.148 and I'm unable to merge.\r\n\r\n30+ commits are missing from upstream.\r\n\r\nIs it known and I should just reset or it's something unexpected?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/625/comments",
    "author": "mkutny",
    "comments": [
      {
        "user": "xpl",
        "created_at": "2017-11-18T10:43:39Z",
        "body": "We had to revert some commits yesterday, while trying to figure out a mysterious issue with GitHub showing a wrong username under commits made by our Travis CI deploy script.\r\n\r\nIt turned out it was not related to our recent changes at all, and was a GitHub issue actually (someone managed to link travis@travis-ci.org email with their GitHub account, so every commit made with this email in the `Author` field was erroneously shown as if it was made by that user). Since then, it has been resolved successfully."
      },
      {
        "user": "mkutny",
        "created_at": "2017-11-18T11:28:35Z",
        "body": "> We had to revert some commits yesterday, while trying to figure out a mysterious issue with GitHub showing a wrong username under commits made by our Travis CI deploy script.\r\n\r\nI noticed that too. Actually, I thought that you've got a new team member )\r\n\r\nOk, clear now, will reset."
      }
    ]
  },
  {
    "number": 566,
    "title": "About cancellation of orders",
    "created_at": "2017-11-14T09:34:02Z",
    "closed_at": "2017-11-14T10:55:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/566",
    "body": "How to find the hang order? How else to cancel the order?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/566/comments",
    "author": "gavin369",
    "comments": [
      {
        "user": "gavin369",
        "created_at": "2017-11-14T09:35:44Z",
        "body": "How to write code?  "
      },
      {
        "user": "gavin369",
        "created_at": "2017-11-14T09:37:47Z",
        "body": "await huobipro.******？  Can you give me an example? Thanks！"
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-14T10:39:55Z",
        "body": "@gavin369 can you put your question in a few more words, please? \r\n\r\n> How to find the hang order?\r\n\r\nIf your order request failed with unknown order status, you can check your open / closed orders (where implemented) like so:\r\n\r\n```\r\nawait exchange.fetchOrders (symbol, params)\r\n// or\r\nawait exchange.fetchClosedOrders (symbol, params)\r\nawait exchange.fetchOpenOrders (symbol, params)\r\n```\r\n\r\nBut for now, the above method is not implemented for HuobiPro (it will be soon, see more about it here: #71). In the meantime you can use their custom API for fetching orders:\r\n\r\n```\r\nawait exchange.loadMarkets ()\r\nawait exchange.privateGetOrderOrders ({\r\n    'symbol': exchange.markets['ETH/BTC'].id\r\n    'states': [\r\n        'pre-submitted',\r\n        'submitted',\r\n        'partial-filled',\r\n        'partial-canceled',\r\n        'filled',\r\n        'canceled',\r\n    ].join (',')\r\n})\r\n```\r\n\r\n> How else to cancel the order?\r\n\r\n```\r\nawait exchange.cancelOrder (orderId)\r\n```\r\n\r\n> How to write code?\r\n\r\nUhm... Sorry?"
      },
      {
        "user": "gavin369",
        "created_at": "2017-11-14T10:41:40Z",
        "body": "Okay，i know"
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-14T10:55:06Z",
        "body": "Okay ) I would close this for now if you don't mind."
      }
    ]
  },
  {
    "number": 531,
    "title": "Poloniex getBalance() takes a long time",
    "created_at": "2017-11-10T07:20:48Z",
    "closed_at": "2017-11-10T08:03:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/531",
    "body": "Hi, \r\n\r\nThere are two many assets in Poloniex, so the getBalance() take a long time (about 3 seconds for me) to return. Is there any way to request just several assets (for example, just requesting BTC and BCH) balance? \r\n\r\nThanks a lot!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/531/comments",
    "author": "tandazhi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-10T07:36:58Z",
        "body": "@tandazhi, hi!\r\n\r\nUnfortunately, we don't control that. It's just how Poloniex works – it returns full balance info, and it does not allow to specify the currencies you're interested in. Actually, the problem is not the size of the response (even if you fetch all balances it is not big enough to add delays). It just takes that long from Poloniex for your request to be processed and we can't workaround it. We believe it's a universally fair for every Poloniex user. There may be some added lags due to your location. In that case we would recommend to host your application in the US, if you really want to target Poloniex. We also see these delays occasionally.\r\n\r\nDoes this answer your question?"
      },
      {
        "user": "tandazhi",
        "created_at": "2017-11-10T07:46:58Z",
        "body": "Hi Kroitor,\r\n\r\nThanks for your quick answer.  I pinged the poloniex and the lag time is only about 200ms, I am wondering if to relocate the application in US, the lag time of fetchBalance() can be controlled within 1 second? Thanks for your suggestion.\r\n\r\nBest Regards,\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-10T07:54:32Z",
        "body": "@tandazhi the ping shows you the round-trip latency... So, if you are talking to Poloniex ICMP with the ping tool, a ping-packet does not enable the whole Poloniex engine for balances, orders, or other private info of that sort. When you ping, you don't go through their authentication layer, you request does not go through their databases, etc... So with ping you're just scratching the surface. Most of the lag is coming from the Poloniex **trading** engine, not from **networking**. Their server is just slow to handle all incoming requests, if you send full-featured requests to the engine instead of doing a basic networking ping-pong.\r\n\r\n>  I am wondering if to relocate the application in US, the lag time of fetchBalance() can be controlled within 1 second?\r\n\r\nThe simplest AWS virtual host (VPS instance) costs approximately $0.001 per hour, that is less than one cent. So you can test it, and it's very affordable. The test will show if hosting in US makes any difference.\r\n\r\nYour test should *ping* Poloniex by sending a fetchBalance periodically. That kind of test would be much more representative.\r\n\r\nDoes the above answer your question?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-10T08:02:54Z",
        "body": "In other words, `ping` may show 200ms, but the actual balance endpoint can still take 1-2-3 seconds to reply at the same time.\r\n\r\nLet me know if I answered your question or not. Thx!"
      },
      {
        "user": "tandazhi",
        "created_at": "2017-11-10T08:03:30Z",
        "body": "Hi Kroitor, \r\n\r\nThanks a lot for your suggestion. I will test it to see what is the difference. "
      }
    ]
  },
  {
    "number": 527,
    "title": "Exchanges not returning response dictionary of requests",
    "created_at": "2017-11-09T18:59:41Z",
    "closed_at": "2017-11-09T20:40:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/527",
    "body": "Hi,\r\n\r\nI trade with some exchanges and regularly, for some buy, sell ou tranfers requests, my order is placed but no response dictionary is returned, so I do not know if the order was really placed. Is there anything I can do about it, or it's a problem with the exchange's server that happens sometimes?\r\n\r\nThanks fou your support.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/527/comments",
    "author": "Felipe-Mangueira",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-09T19:01:26Z",
        "body": "@Felipe-Mangueira hi! Do you mean that you place those orders with ccxt? Or in general?"
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T19:54:11Z",
        "body": "Yes @kroitor, I place all those orders with ccxt."
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T19:56:50Z",
        "body": "This happens recurrently with Kraken and sometimes with Mercado Bitcoin. With Bitfinex and others I have tested, it happened just a few times, but it happened anyway."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-09T20:20:55Z",
        "body": "@Felipe-Mangueira with Kraken it's a usual thing, it has been under huge load for past few months... They barely can handle it. In general, a request to create an order can fail, and in that case you should recover and check the open / closed orders and trades to find out whether it was accepted or not and whether the exchange managed to close (fill) it or not, while you were recovering. There's no other way to workaround this problem, unfortunately. We also see those timeouts all the time and we have to keep all state in the local memory in order to recover from http failures. We believe it's a globally-fair issue that is appearing in all clients. It's just how exchanges work. Does this answer your question?"
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T20:36:39Z",
        "body": "Yes @kroitor, it does. I think I am taking the necessary actions to avoid this problem, unfortunately.\r\nThanks for your time again, and keep with your great work."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-09T20:40:13Z",
        "body": "@Felipe-Mangueira ok... you can also try increasing timeout for Kraken if you can tolerate that in your logic. We had to raise it up to 20 seconds, because Kraken takes 15 seconds just to open an order sometimes... Let us know if you have any other questions. Thx!"
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T20:51:12Z",
        "body": "I have already changed the timeout for Kraken, @kroitor , but not always the exchange returns a timeout error, and when it returns, it doesn't mean the order was not placed, and I have to check it out anyway.\r\n\r\nOk, no problem. I appreciate your tips, anyway."
      }
    ]
  },
  {
    "number": 486,
    "title": "Binance: publicGetMarketIdHours",
    "created_at": "2017-11-07T12:35:42Z",
    "closed_at": "2017-11-07T14:03:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/486",
    "body": "````\r\nhours = 8  # ← your timeframe\r\ntopia.load_markets()\r\n\r\nfor symbol in btccoins:\r\n    market = topia.market(symbol)\r\n    response = topia.publicGetMarketIdHours(topia.extend({\r\n        'id': market['id'],\r\n        'hours': hours,\r\n    }))\r\n    time.sleep(delay)\r\n    ticker = topia.parse_ticker(response['Data'], market)  # How to be sure it returns the 8h past hour market?\r\n    # do whatever you need with the ticker...\r\n    datetime = ticker['datetime']\r\n    timestamp = ticker['timestamp']\r\n    open = ticker['open']\r\n    close = ticker['close']\r\n    print(close, datetime, timestamp)\r\n````\r\nthat's the result: -> timestamp is not 8h ago so how can I know it actually represents the 8h past hours timeframe?\r\n\r\n1.814e-05 2017-11-07T12:32:59.000Z 1510057979383\r\n1.209e-05 2017-11-07T12:33:01.000Z 1510057981017\r\n4.15e-05 2017-11-07T12:33:02.000Z 1510057982474\r\n1.07e-06 2017-11-07T12:33:04.000Z 1510057983791\r\n0.00105061 2017-11-07T12:33:05.000Z 1510057985092\r\n\r\nI'm sorry if I did something wrong in advance. I'm really trying to get this sorted out. thanks\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/486/comments",
    "author": "saianwork",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-07T13:00:31Z",
        "body": "If you look at timestamps you are getting, you will immediately see that those represent current datetime in UTC. When the ticker is returned, the timestamp shows the time when it was generated, not the start of your timeframe. So it will always show approximately current time. Your ticker was generated now, and its values show last 8 hours of history. The beginning of your timeframe isn't indicated anywhere.\r\n\r\n> so how can I know it actually represents the 8h past hours timeframe?\r\n\r\nAsk Binance if they really report true data for the last 8 hours or not? We don't change it on the fly. You get it as is. I hope it answers your question."
      },
      {
        "user": "saianwork",
        "created_at": "2017-11-07T14:03:16Z",
        "body": "Thank you! yes it does answer my question. many thanks for your time. and thanks for the great work.\r\n\r\ncheers"
      }
    ]
  },
  {
    "number": 433,
    "title": "websocket API",
    "created_at": "2017-11-01T01:12:56Z",
    "closed_at": "2017-11-01T01:20:03Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/433",
    "body": "Gents,\r\n\r\nMay I wonder about WebSocket API status for exchanges that support it? I read somewhere that it's in your plans. I'd be happy to be a tester for it. Is it possible to provide some very raw (quick&dirty) doc or few python examples how to use? Providing its implemented in ccxt for some exchanges, I'd be happy to test it out!\r\n\r\nPlease let me know. Thank you in advance,",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/433/comments",
    "author": "Fcl69",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-01T01:20:02Z",
        "body": "@Fcl69 yes we are going to add support for WS APIs, but it is not ready yet, we are working on it and hope to deliver soon. If you don't mind, i'm closing this issue as being duplicate of #56 . I suggest to continue there if you have further questions. We will update you upon availability of WS in CCXT anyway. Thx!"
      },
      {
        "user": "Fcl69",
        "created_at": "2017-11-01T03:34:03Z",
        "body": "Thank you for a reply, I'll keep an eye on #56"
      }
    ]
  },
  {
    "number": 422,
    "title": "Exchange timeframes",
    "created_at": "2017-10-30T22:05:54Z",
    "closed_at": "2017-10-30T22:47:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/422",
    "body": "Is there a reason `exchange.timeframes` are stored as a `dict` of `str`? It seems they would be more useful as `int` values for the timeframe in minutes. I can of course convert... just curious.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/422/comments",
    "author": "aking7",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-30T22:11:07Z",
        "body": "Hi, @aking7 ! Yes, the reason for having string-based keys is because for higher timeframes like 1w, 1mo, 1y those seconds-based numbers will be too large. Moreover, having a dictionary satisfies the requirement to choose one of available values (arbitrary values aren't allowed), this way it's more explicit. But we will look into adding the possibility to put ints in args as well, hopefully soon, after we resolve current pending issues. Let me know if it answers your question or not. Thx!"
      },
      {
        "user": "aking7",
        "created_at": "2017-10-30T22:20:50Z",
        "body": "@kroitor The keys as strings make sense! I'm curious why the values are also stored as strings. The values also don't seem to be consistent across exchanges."
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-30T22:25:04Z",
        "body": "@aking7 just because for the moment we found \"1d\", \"1y\" more readable than \"86400\" and \"31536000\". There's also some ambiguity with seconds + leap years or seconds + months' duration, so to keep it simple, we thought it would be better to have readable string-based keys, not numeric strings."
      },
      {
        "user": "aking7",
        "created_at": "2017-10-30T22:29:11Z",
        "body": "@kroitor No, sorry I must not be clear. I'm good with the keys as \"1d\", \"1w\" and think they should be kept like that :) But if I call `exchange.timeframes['1d']` it would be nice to get an integer value (in minutes or seconds for example) to use for program logic elsewhere. Right now, this outputs something different for each exchange."
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-30T22:33:26Z",
        "body": "@aking7 oh, so you're asking of values, not the keys. The values are there to map from common key abbreviations (1m, 5m, 30m, 1h, 12h, 1d, 1M, 1y) to values accepted by the exchange engine (`year`, `month` for example), so those are mappings for the API. The timeframe values are for internal use, not for external applications, because values are not unified (unique for each exchange, depending on which OHLCV timeframes are supported), whereas the keys are unified."
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-30T22:35:09Z",
        "body": "We thought wrapping it into a function to map from unified abbreviations to numbers of seconds, is not a big deal, therefore we didn't include it in the lib. But we can actually make it up here. There's still an ambiguity though, because it's not very easy to decide how many seconds you should return for a month, keeping in mind that month durations differ throughout the year."
      },
      {
        "user": "aking7",
        "created_at": "2017-10-30T22:47:59Z",
        "body": "@kroitor Ah, I see! I was trying to piggyback off them for my own use ;) And yes, good point on the ambiguities for larger timeframes. It's probably best I find another solution."
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-31T02:25:11Z",
        "body": "@aking7, most of the time:\r\n1. you need to find a common subset of timeframes (keys) across your target exchanges\r\n2. you can compute higher timeframes from lower timeframes\r\n\r\nMy 2 cents..."
      }
    ]
  },
  {
    "number": 414,
    "title": "problem with exchange.parse8601()",
    "created_at": "2017-10-28T15:24:37Z",
    "closed_at": "2017-10-29T15:24:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/414",
    "body": "Hi, this problem happens randomly so I'm not sure if it has something to do with ccxt itself or if it may be a race condition in my threaded program. From time to time, not always, when I call exchange.parse8601(), it shows the following exception:\r\n\r\n```\r\nException in thread Thread-24:\r\nTraceback (most recent call last):\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\r\n    self.run()\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 763, in run\r\n    self.__target(*self.__args, **self.__kwargs)\r\n  File \"nemesis2.py\", line 437, in stream_ohlcv\r\n    from___ = exchange.parse8601(from__) \r\n  File \"/Library/Python/2.7/site-packages/ccxt/exchange.py\", line 589, in parse8601\r\n    dt = datetime.datetime.strptime(string, \"%Y%m%d%H%M%S.%fZ\")\r\nAttributeError: 'module' object has no attribute '_strptime'\r\n```\r\n\r\nMy code is as follows (I'm using relativedelta to extract the last 100 candles since the last time):\r\n\r\n```\r\nnow = datetime.datetime.now()\r\nfrom_ = now - relativedelta (minutes=100)\r\nfrom__='{:%Y-%m-%d %H:%M:%S}'.format(from_)\r\nfrom___ = exchange.parse8601(from__)\r\ndata = exchange.fetch_ohlcv(\"ETH/USD\", \"5m\", from___)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/414/comments",
    "author": "werewere",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-28T15:34:06Z",
        "body": "Hi, @werewere !\r\n\r\nWhy do you use parse8601 there at all? You don't need to convert a number (a time value) to a string just to parse it back to a number. Try this:\r\n\r\n```Python\r\n_5m_candle = 5 * 60 * 1000  # 5 minutes * 60 seconds * 1000 ms\r\ndata = exchange.fetch_ohlcv(\"ETH/USD\", \"5m\", exchange.milliseconds () - _5m_candle * 100)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-28T17:14:38Z",
        "body": "Can you paste the shortest possible snippet that is short enough for posting, but works (can be launched) and reproduces/demonstrates the problematic case or the error?"
      },
      {
        "user": "werewere",
        "created_at": "2017-10-28T17:51:55Z",
        "body": "Yep, you're right. I was doing it more complicated than needed! Your solution is much more elegant.\r\n\r\nRegarding the shortest snippet, here goes it (well, its not the shortest-shortest, but I wanted to keep some info). I'm keeping my (bad) number->string->number design to keep it real. It fails about 1/10 times (anyway I just removed the parse8601 method thanks to your solution, so I'm putting it here just for debugging purposes in case it may be some bug in ccxt):\r\n\r\n```\r\nimport ccxt\r\nimport time\r\nimport threading\r\nimport datetime\r\nfrom dateutil.relativedelta import *\r\n\r\nexchange   = ccxt.poloniex({\r\n    'apiKey': 'KEY',\r\n    'secret': 'SECRET',\r\n})\r\nclass Feed (object):\r\n\r\n    def __init__(self, instruments=[\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"]):\r\n        self.candles=[\"5m\", \"15m\", \"1d\"]\r\n        self.candle_dict = {}\r\n        self.lock = threading.Lock()\r\n\r\n        for instrument in instruments: #1 thread per pair\r\n            thread = threading.Thread(target=self.stream_ohlcv, args=(instrument,))\r\n            thread.daemon = True\r\n            thread.start()\r\n\r\n    def stream_ohlcv(self, instrument=\"ETH/BTC\"):\r\n        while 1:\r\n                try:\r\n                        for candle in self.candles:\r\n                            now = datetime.datetime.utcnow()\r\n\r\n                            if candle == \"1m\":\r\n                                from_ = now - relativedelta (minutes=100)\r\n                            elif candle==\"5m\":\r\n                                from_ = now - relativedelta (minutes=500)\r\n                            elif candle==\"1h\":\r\n                                from_ = now - relativedelta (hours=100)\r\n                            elif candle==\"1d\":\r\n                                from_ = now - relativedelta (days=100)\r\n\r\n                            from__='{:%Y-%m-%d %H:%M:%S}'.format(from_)\r\n\r\n                            from___ = exchange.parse8601(from__) \r\n\r\n                            data = exchange.fetch_ohlcv(instrument, candle, from___)\r\n                            #do things with data\r\n\r\n                except ccxt.RequestTimeout as e: \r\n                    print(type(e).__name__, e.args, 'Request Timeout (ignoring)')\r\n                except ccxt.ExchangeNotAvailable as e:\r\n                    print(type(e).__name__, e.args, 'Exchange Not Available due to downtime or maintenance (ignoring)')\r\n                except ccxt.AuthenticationError as e:\r\n                    print(type(e).__name__, e.args, 'Authentication Error (missing API keys, ignoring)')\r\n\r\n                time.sleep(5)\r\n\r\nfeed = Feed([\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"])\r\ntime.sleep(10000)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-29T05:19:44Z",
        "body": "@werewere no matter what I do, I can't get an error from this:\r\n\r\n```Python\r\nimport ccxt\r\nimport time\r\nimport threading\r\nimport datetime\r\n\r\ndurations = {\r\n    '5m':       5 * 60 * 1000,\r\n    '15m':     15 * 60 * 1000,\r\n    '1d': 24 * 60 * 60 * 1000,\r\n}\r\n\r\nclass Feed (object):\r\n\r\n    def __init__(self, instruments=[\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"]):\r\n        self.candles=[\"5m\", \"15m\", \"1d\"]\r\n\r\n        for instrument in instruments: #1 thread per pair\r\n            thread = threading.Thread(target=self.stream_ohlcv, args=(instrument,))\r\n            thread.daemon = True\r\n            thread.start()\r\n\r\n    def stream_ohlcv(self, instrument=\"ETH/BTC\"):\r\n\r\n        exchange = ccxt.poloniex({'enableRateLimit': True})\r\n\r\n        while 1:\r\n                try:\r\n                    for candle in self.candles:\r\n                        from_ = durations[candle] * 100\r\n                        data = exchange.fetch_ohlcv(instrument, candle, exchange.milliseconds() - from_)\r\n                        print (exchange.iso8601 (from_), candle, instrument)\r\n                        #do things with data\r\n\r\n                except ccxt.RequestTimeout as e:\r\n                    print(type(e).__name__, e.args, 'Request Timeout (ignoring)')\r\n                except ccxt.ExchangeNotAvailable as e:\r\n                    print(type(e).__name__, e.args, 'Exchange Not Available due to downtime or maintenance (ignoring)')\r\n\r\nfeed = Feed([\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"])\r\ntime.sleep(10000)\r\n```\r\n\r\nThis is the same snippet as yours, but there are a few differences:\r\n\r\n1. In your original example you loop through candles= [ '5m', '15m', '1d' ] (← no 1m interval here), whereas in your if/else you check for 1m, 5m, 1h, 1d (← no 15m interval here)...\r\n\r\n2. time.sleep was 5 seconds, which is an overkill, you don't need to sleep that much. In fact, you don't need to sleep at all, if you enableRateLimit in Python 2.7. To avoid conflicts we instantiate the non-authenticated exchange in each thread (no need to authenticate for OHLCVs).\r\n\r\n3. I removed the dateutil from there to make it shorter.\r\n\r\n4. This isn't a good design to poll for many symbols from one exchange. Because your poll requests can interfere with each other, ruining the rate limiter schedule. Most of the time you don't want to launch many threads per exchange, and you need only one thread per exchange. I'd suggest to rethink it. Consider this: your exchange allows 1 request per limited time. And you are launching many threads each doing 1 request per limited time. That is definitely more than 1 request per limit. Therefore this design fails because of a threading conflict.\r\n\r\n5. What's even more strange to me is that you are continuously polling for the SAME candles, you shift by a few seconds (1 candle forward) and then fetch a hundred candles in the past. So 99 of your 100 candles are always repeating. You don't need to do it that way, moreover, you don't need to fetch history every second, because you can fetch it once per hour.\r\n\r\nAnyway, with your snippet or with this one, I was not able to reproduce your error, not even once in 40 launches. Are you sure, this is really the place that is causing trouble and not some other place in your code?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-29T15:24:43Z",
        "body": "If you don't mind, I am closing this issue for now as being somewhat beyond the scope of the library. Feel free to reopen it if needed or just continue posting here, we will try to help as much as we can."
      },
      {
        "user": "werewere",
        "created_at": "2017-10-29T15:56:13Z",
        "body": "Yep, I tested the problem only with the code I pasted. I'm not sure why it happen though.. Well, I can workaround it with your first solution, so everything is fine :)"
      }
    ]
  },
  {
    "number": 379,
    "title": "fetch_ohlcv since problem",
    "created_at": "2017-10-23T20:25:01Z",
    "closed_at": "2017-10-23T20:34:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/379",
    "body": "Hi, I'm not sure if this is a bug or a feature; the following code won't work:\r\n\r\n```\r\nsince=int(datetime.datetime.strptime('2017-10-23 00:00:00', '%Y-%m-%d %H:%M:%S').strftime(\"%s\"))\r\nohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since)\r\n```\r\nIt is needed to do the following: \r\n```\r\nsince=int(datetime.datetime.strptime('2017-10-23 00:00:00', '%Y-%m-%d %H:%M:%S').strftime(\"%s\"))\r\nsince *=1000\r\nohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since)\r\n```\r\nI found this because checking the ccxt source code, I saw that (in Poloniex at least) the start time was calculated doing:\r\n\r\n`'start': int(since / 1000),`\r\n\r\nMay be this is due to an old problem in Poloniex (I'm just guessing) and then Poloniex fixed the problem but the ccxt code still has the old workaround?. Anyway, this is not a problem, I can just multiply, but I'm not sure if I'm missing something.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/379/comments",
    "author": "werewere",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-23T20:30:11Z",
        "body": "Hi, @werewere ! \r\n\r\nNope, it's not a bug, the library works with all timestamps as milliseconds, everywhere. So, yes, you can just do `ohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since * 1000)`. \r\n\r\nMilliseconds are chosen for portability and cross-exchange compatibility, don't forget that Poloniex is not the only exchange that implements the since param and fetch_ohlcv. There are other exchanges as well, and most of the time a common subset of milliseconds-range covers all needs for all exchanges, whereas seconds-based ranges are sometimes not sufficiently precise.\r\n\r\nI hope this reply answers your question, I'd close this issue for now.\r\n\r\nThx!"
      },
      {
        "user": "werewere",
        "created_at": "2017-10-23T21:19:59Z",
        "body": "Yeah, I use also Bitfinex but as it is not fully supported yet for OHLCV, I was doing tests with Poloniex.\r\n\r\nAnyway, understood, thanks! :)"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-23T21:21:03Z",
        "body": "@werewere bitfinex v2 already supports OHLCV btw ;) And, hopefully, both of Bitfinex v1 and v2 will support it soon ;)"
      },
      {
        "user": "werewere",
        "created_at": "2017-10-23T21:41:34Z",
        "body": "Oh, it is true! I didn't realized that I should use bitfinex2, indeed it has OHLCV!  You made my day :)"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-23T22:17:35Z",
        "body": "@werewere as of version 1.9.237 you can use Bitfinex v1 to fetch_ohlcv() as well ;) Cheers!"
      },
      {
        "user": "xgdgsc",
        "created_at": "2017-11-19T06:36:23Z",
        "body": "Has the since API changed? `bar_list=bitmex.fetch_ohlcv('XBTZ17', '1m', since='2017-11-08 00:01:44')` works in version `'1.9.39'` but not in version `'1.10.171'`."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-19T06:43:51Z",
        "body": "@xgdgsc it accepts an integer number of milliseconds for consistency across the majority of exchanges, so you can call it like so:\r\n\r\n```Python\r\nbar_list=bitmex.fetch_ohlcv('XBTZ17', '1m', since=bitmex.parse8601('2017-11-08 00:01:44'))\r\n```"
      },
      {
        "user": "xgdgsc",
        "created_at": "2017-11-19T07:05:20Z",
        "body": "OK. Thanks."
      }
    ]
  },
  {
    "number": 370,
    "title": "Error installing python version on debian",
    "created_at": "2017-10-22T08:55:12Z",
    "closed_at": "2017-10-22T08:58:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/370",
    "body": "Hi,\r\n    see below:\r\n\r\n```\r\n>>>> pip install ccxt\r\nDownloading/unpacking ccxt\r\n  Downloading ccxt-1.9.227-py2.py3-none-any.whl (244kB): 244kB downloaded\r\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /usr/lib/python2.7/dist-packages (from ccxt)\r\nInstalling collected packages: ccxt\r\nCompiling /tmp/pip-build-RWI5p2/ccxt/ccxt/async/exchange.py ...\r\n  File \"/tmp/pip-build-RWI5p2/ccxt/ccxt/async/exchange.py\", line 75\r\n    async def fetch(self, url, method='GET', headers=None, body=None):\r\n            ^\r\nSyntaxError: invalid syntax\r\n\r\nCompiling /tmp/pip-build-RWI5p2/ccxt/ccxt/async/exchanges.py ...\r\n  File \"/tmp/pip-build-RWI5p2/ccxt/ccxt/async/exchanges.py\", line 116\r\n    async def fetchCategories(self):\r\n            ^\r\nSyntaxError: invalid syntax\r\n\r\nSuccessfully installed ccxt\r\nCleaning up...\r\n\r\n```\r\n\r\nmy system:\r\n```\r\npython --version\r\nPython 2.7.9\r\npip --version\r\npip 1.5.6 from /usr/lib/python2.7/dist-packages (python 2.7)\r\nuname -a\r\nLinux 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u2 (2017-06-26) x86_64 GNU/Linux\r\ncat /etc/debian_version \r\n8.9\r\n```\r\nanyhow, after this error, the basic functionality works as expected.... Maybe an issue with async only?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/370/comments",
    "author": "luigi-bar",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-22T08:58:08Z",
        "body": "The async version can only work with Python 3.5+, so it's complaining about that. We will look into it. But the py2 version of ccxt has been successfully installed on your system for your Python and you can use it anyway. Thanks for pointing that out!"
      }
    ]
  },
  {
    "number": 369,
    "title": "How to enable sandbox?",
    "created_at": "2017-10-22T07:10:15Z",
    "closed_at": "2017-10-22T08:59:30Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/369",
    "body": "Hi,\r\n  newbie here :) How can I force the usage of the exchange sandbox? I would like to test a bit before trading with real cryptomoney..\r\n\r\nThanks!\r\nLuigi",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/369/comments",
    "author": "luigi-bar",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-22T07:21:28Z",
        "body": "Hi, Luigi!\r\n\r\nMost often you should just change the API URL of the exchange to its sandbox URL, like shown in the example bellow:\r\n\r\n```\r\n    // move to testnet/sandbox if possible\r\n    if (exchange.urls['test'])\r\n        exchange.urls['api'] = exchange.urls['test'];\r\n```\r\n\r\nThe caveat here is that test/sandbox URLs are not fully covered in ccxt yet, and not all exchanges offer them at all, so you will have to put correct URLs there by hand for now (until we unify that part completely). But if you feel like you want to help us to unify that functionality and you want to contribute by adding test URLs where they are missing – we will be happy for your help, feel free to make a PR. \r\n\r\nLet us know if this answers your question."
      },
      {
        "user": "luigi-bar",
        "created_at": "2017-10-22T08:58:11Z",
        "body": "Thanks! I will try"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-22T08:59:30Z",
        "body": "I'm closing this for now, let us know if you have difficulties with it, feel free to reopen this if needed, or just ask your questions! Cheers!"
      }
    ]
  },
  {
    "number": 347,
    "title": "cryptopia privatePostGetDepositAddress Python 2.7 ccxt 1.9.189",
    "created_at": "2017-10-19T08:50:17Z",
    "closed_at": "2017-10-19T09:17:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/347",
    "body": "Hey, Igor. I'm going to keep you busy today, okay? In all seriousness, I can't thank you enough for your work. I'm not sure how to fix this one... I've been fiddling around with the exchanges.py to see if I can trace the issue, but I'm getting lost. \r\n\r\nThis is my code: \r\n```\r\ncryptopia = ccxt.cryptopia({[you know how it goes]})\r\naddress_pair = cryptopia.privatePostGetDepositAddress(params={'Currency' : 'XMR'}).get('Data')\r\nprint address_pair\r\ntry:\r\n    address_pair = (address_pair['BaseAddress'], address_pair['Address']) \r\nexcept:\r\n    address_pair = (address_pair['Address']) \r\nprint address_pair\r\n```\r\nThis is the result: \r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Kenneth\\eclipse-workspace\\Chank\\CCXTtests.py\", line 309, in <module>\r\n    address_pair = cryptopia.privatePostGetDepositAddress(params={'Currency' : 'XMR'}).get('Data')\r\n  File \"C:\\Python27\\lib\\site-packages\\ccxt\\exchanges.py\", line 11070, in request\r\n    response = self.fetch2(path, api, method, params, headers, body)\r\n  File \"C:\\Python27\\lib\\site-packages\\ccxt\\exchange.py\", line 238, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Python27\\lib\\site-packages\\ccxt\\exchange.py\", line 292, in fetch\r\n    return self.handle_rest_response(decoded_text, url, method, headers, body)\r\n  File \"C:\\Python27\\lib\\site-packages\\ccxt\\exchange.py\", line 348, in handle_rest_response\r\n    raise ExchangeError(' '.join([self.id, method, url, response, str(e)]))\r\nccxt.errors.ExchangeError: <exception str() failed>\r\n```\r\n\r\nI'm at a loss as to the cause. Let me know if you need verbose output. \r\n\r\nThanks so much!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/347/comments",
    "author": "PhinixPhire",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-19T08:59:00Z",
        "body": "> Let me know if you need verbose output.\r\n\r\nYep, I think I do.\r\n\r\nLet' try this:\r\n\r\n```Python\r\ncryptopia = ccxt.cryptopia({\r\n    [you know how it goes],\r\n    'verbose': True,\r\n})\r\nprint(cryptopia.privatePostGetDepositAddress({'Currency': 'XMR'}))\r\n```"
      },
      {
        "user": "PhinixPhire",
        "created_at": "2017-10-19T09:14:57Z",
        "body": "Okay, I got it... the method did not like the way I was stacking the dictionary keys, I guess. Once I formatted it like this, all is well:\r\n\r\n```\r\nData = cryptopia.privatePostGetDepositAddress({'Currency' : 'BTC'}).get('Data')\r\nif Data['BaseAddress']:\r\n    print(Data['BaseAddress'], Data['Address'])\r\nelse:\r\n    print(Data['Address'], '')\r\n```\r\n\r\nIt facilitates both non-paymentid/memo addresses as well as those including the field.\r\n\r\nThanks for your quidance, again. "
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-19T09:17:19Z",
        "body": "@PhinixPhire it accepts positional args `({})`, just one argument without a name, not keyword args aka *kwargs* as in `(params={})`. Python is syntactically-sensitive to that, as it turned out. Cheers!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-19T10:01:30Z",
        "body": "I added a unified deposit method to Cryptopia, in case you need it further ;) Should be available as of next version."
      },
      {
        "user": "PhinixPhire",
        "created_at": "2017-10-19T10:02:22Z",
        "body": "Nice! Cryptopia looks like an awesome exchange. I just discovered it yesterday. "
      }
    ]
  },
  {
    "number": 238,
    "title": "kraken.fetch_order_status() returns error",
    "created_at": "2017-09-26T16:40:22Z",
    "closed_at": "2017-09-26T22:40:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/238",
    "body": "I received this error kraken {\"error\":[\"EOrder:Invalid order\"]}, when i try to fetch the order status via call kraken.fetch_order_status(['XXXX-XXXX-XXXXX']), XXXX-XXXX-XXXXX is my order id. so how could I call this function to pass the parameter?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/238/comments",
    "author": "aobuke",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-09-26T22:40:23Z",
        "body": "Hi! Just don't put square brackets there )\r\n\r\n```python\r\n\r\nmbp:ccxt igorkroitor$ python\r\nPython 2.7.13 (default, Jun  5 2017, 10:04:07) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\n>>> import ccxt\r\n\r\n>>> kraken = ccxt.kraken ({\r\n...     \"apiKey\": \"MY_API_KEY\",\r\n...     \"secret\": \"MY_SECRET_KEY\",\r\n... })\r\n\r\n>>> kraken.fetch_order_status('OMSWN3-AM2A4-LHGPJC') # no square brackets\r\n\r\nu'closed'\r\n\r\n>>> kraken.fetch_order('OMSWN3-AM2A4-LHGPJC') # no square brackets\r\n\r\n{'info': {u'status': u'closed', u'expiretm': 0, u'vol': u'0.03899000', u'closetm': 1506378300.2339, \r\nu'misc': u'', u'starttm': 0, u'cost': u'0.00446', u'oflags': u'fciq', 'id': 'OMSWN3-AM2A4-LHGPJC', \r\nu'opentm': 1506378297.168, u'fee': u'0.00001', u'descr': {u'leverage': u'none', \r\nu'ordertype': u'market', u'price': u'0', u'pair': u'BCHXBT', u'price2': u'0', u'type': u'sell', \r\nu'order': u'sell 0.03899000 BCHXBT @ market'}, u'trades': [u'TXQ63P-RIUV2-43Y3MO'], \r\nu'reason': None, u'refid': None, u'userref': None, u'vol_exec': u'0.03899000', u'price': u'0.11450'}, \r\n'status': u'closed', 'timestamp': 1506378297168, 'price': 0.1145, 'side': u'sell',\r\n'datetime': '2017-09-25T22:24:57.000Z', 'symbol': u'BCH/BTC', 'amount': 0.03899,\r\n'type': u'market', 'id': 'OMSWN3-AM2A4-LHGPJC', 'filled': 0.03899, 'remaining': 0.\r\n```\r\n\r\nI hope this answers your question, let us know if you have any difficulties with it, in the meantime, I'm closing this issue, if you don't mind."
      }
    ]
  }
]