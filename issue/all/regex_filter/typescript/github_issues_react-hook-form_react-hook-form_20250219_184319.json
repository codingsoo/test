[
  {
    "number": 9748,
    "title": "request: path name assertor or generator to match Path<T>",
    "created_at": "2023-01-10T14:54:56Z",
    "closed_at": "2023-01-14T20:47:47Z",
    "labels": [
      "question",
      "waiting-up-vote",
      "feature request"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/9748",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nCreating re-usable components that work with `useFieldArray` is almost impossible.\r\n\r\n**Describe alternatives you've considered**\r\nFundamentally this comes down to the `name`. I can create a complex type on the re-usable component like such:\r\n```ts\r\ninterface InputProps<\r\n  T extends FieldValues,\r\n  N extends FieldArrayPath<T>\r\n> {\r\n  name: UnpackNestedValue<PathValue<T, N>> extends Data[] ? N : never\r\n  register: UseFormRegister<T>\r\n  control: Control<T>\r\n}\r\n```\r\n\r\nHowever, registering the field property `${name}.0.prop` causes the following compile time error\r\n```\r\nArgument of type '`${UnpackNestedValue<PathValue<T, N>> extends Data[] ? N : never}.0.prop`' is not assignable to parameter of type 'Path<T>'.\r\n  Type '`${string}.0.prop`' is not assignable to type 'Path<T>'\r\n```\r\nThis is because the type information is stripped off during execution therefore TS compiler does not maintain this argument-truth in the function-body.\r\n\r\nI tried to replicate the type operations from `Path<T>` and the related `PathImpl<T>` and almost succeeded when I realized that I do not have the original object ü§¶‚Äç‚ôÇÔ∏è\r\n\r\n**Describe the solution you'd like**\r\nNow, if there was a function I could `getPath<T>`, then I can just create a `const propName: Path<T> | undefined = getPath('${name}.0.prop')`. If **`propName`** is `undefined`, I can handle it in the UI\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/9748/comments",
    "author": "harish-prakash",
    "comments": [
      {
        "user": "Moshyfawn",
        "created_at": "2023-01-10T15:01:54Z",
        "body": "Is #7354 what you're after?"
      },
      {
        "user": "harish-prakash",
        "created_at": "2023-01-10T15:10:55Z",
        "body": "Yes....(almost), the proposed solution still uses a degree of type assertion\r\n\r\n```ts\r\nfunction of<FormValues, Key extends keyof FormValues>(key: Key) {\r\n  return key as PathWithMeta<FieldValues, FieldValues[Key]>\r\n}\r\n\r\nfunction join<FieldValues, Type, Key extends keyof Type>(\r\n  path: PathWithMeta<FieldValues, Type>, \r\n  key: Key,\r\n) {\r\n  return `${path}.${key}` as PathWithMeta<FieldValues, Type[Key]>\r\n}\r\n```\r\n‚òùÔ∏è the use of `as`\r\n\r\nEven so, if this is tucked away in react-hook-form, at least my repo is clean. Is this queued in a future version? Is there an ETA?\r\n___\r\n**EDIT:** One more thing I would add, the proposed RFC appears to be for a general `register`, I can work around that with controlled components, but this is for `useFieldArray`, even workarounds with controlled components are ugly üòû"
      },
      {
        "user": "bluebill1049",
        "created_at": "2023-01-10T22:07:58Z",
        "body": "> I tried to replicate the type operations from Path<T> and the related PathImpl<T> and almost succeeded when I realized that I do not have the original object ü§¶‚Äç‚ôÇÔ∏è\r\n\r\ncan you provide some more detail on this?\r\n\r\n> However, registering the field property ${name}.0.prop causes the following compile time error\r\n\r\nany chance you can share a codesandbox on this? I think there will be some sort of assertion that is diffuclt to avoid."
      },
      {
        "user": "bluebill1049",
        "created_at": "2023-01-14T20:47:47Z",
        "body": "Moving to the project board, please keep the feedback above coming."
      }
    ]
  },
  {
    "number": 9736,
    "title": "issue: `useForm` `resetOptions` should persist on each call to `reset` on control",
    "created_at": "2023-01-07T01:58:36Z",
    "closed_at": "2023-01-07T22:10:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/9736",
    "body": "### Version Number\n\n7.41.5\n\n### Codesandbox/Expo snack\n\nsee reproduction plz\n\n### Steps to reproduce\n\n```ts\r\nconst { reset } = useForm({\r\n  resetOptions: { keepValues: true, keepDefaultValues: true },\r\n  defaultValues,\r\n  resolver: yupResolver(validationSchema),\r\n})\r\n\r\nreset() // should use the same resetOptions\r\n```\n\n### Expected behaviour\n\nMy expectation is that later calls to the control's reset would use the same `resetOptions` defined previously.\n\n### What browsers are you seeing the problem on?\n\nChrome\n\n### Relevant log output\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/9736/comments",
    "author": "cdbattags",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2023-01-07T02:16:25Z",
        "body": "Thanks for the issue report. They are not associated, the reset option at `useForm` is only applicable for `defaultValues` and `values` props reset behaviour."
      },
      {
        "user": "cdbattags",
        "created_at": "2023-01-07T02:54:02Z",
        "body": "Hmmm, why is this the case though? So I get this is a feature that I would be asking for but I only ever use `setValue` and `reset` and this seems like an amazing quality of life improvement, no?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2023-01-07T06:02:16Z",
        "body": "Not at this stage."
      }
    ]
  },
  {
    "number": 9405,
    "title": "Create a hook to know if that field is required or not",
    "created_at": "2022-11-21T15:14:53Z",
    "closed_at": "2022-11-22T11:55:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/9405",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to watch if a field is required with a custom hook so I can render the component differently\r\nJust like I watch for its value I would want to watch if it's required\r\n\r\n**Describe the solution you'd like**\r\nA simple hook like `const required = useIsRequired('text.data')`\r\n\r\n**Additional context**\r\nI use @hookform/joi-resolvers\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/9405/comments",
    "author": "toto1384",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2022-11-21T21:40:29Z",
        "body": "hey @toto1384 This would be a diffuclt one as the schema is an external definition. I would reuse the type definition to translate it into conditional render logic.\r\n\r\n```tsx\r\n{yourTypeDefination.field.rquierd && <input />}\r\n ```\r\n\r\nThis would be something not related to hook form but used schema library."
      },
      {
        "user": "Svish",
        "created_at": "2022-11-22T07:35:15Z",
        "body": "I've written a custom hook for this which tries to pick certain things out of a given `zod` schema, which is then used to set appropriate attributes on an input element. For strings, that would be `required`, `minLength` and `maxLength`. Don't know if `joi` supports \"analyzing\" their schemas like this, but maybe this could serve as some inspiration:\r\n\r\n```ts\r\n/**\r\n * Helper type for the `schema` prop type.\r\n */\r\nexport type ZodTypeForInputProps<T extends z.ZodTypeAny> =\r\n  | T\r\n  // .nullable()\r\n  | z.ZodNullable<T>\r\n  // .optional()\r\n  | z.ZodOptional<T>\r\n  // .nullish()\r\n  | z.ZodNullable<z.ZodOptional<T>>;\r\n\r\n/**\r\n * Generates some basic input-props based on a given schema.\r\n */\r\nexport function* generateInputProps(s: z.ZodType | undefined): Generator<InputPropEntry> {\r\n  if (s == null) return;\r\n\r\n  let isRequired = true;\r\n\r\n  while (s instanceof z.ZodOptional || s instanceof z.ZodNullable) {\r\n    isRequired = false;\r\n    s = s.unwrap() as z.ZodType;\r\n  }\r\n\r\n  if (s instanceof z.ZodString) {\r\n    isRequired = false;\r\n    if (s.minLength != null) {\r\n      yield ['minLength', s.minLength];\r\n      if (s.minLength > 0) isRequired = true;\r\n    }\r\n    if (s.maxLength != null) yield ['maxLength', s.maxLength];\r\n  }\r\n\r\n  if (s instanceof z.ZodDate) {\r\n    if (s.minDate != null) yield ['minDate', s.minDate];\r\n    if (s.maxDate != null) yield ['maxDate', s.maxDate];\r\n  }\r\n\r\n  if (s instanceof z.ZodNumber) {\r\n    if (s.minValue != null) yield ['min', s.minValue];\r\n    if (s.maxValue != null) yield ['max', s.maxValue];\r\n    yield ['inputMode', s.isInt ? 'numeric' : 'decimal'];\r\n  }\r\n\r\n  if (isRequired) yield ['required', true];\r\n}\r\n\r\nexport type InputPropEntry = Entries<SomeInputProps>;\r\n\r\n/**\r\n * Returns the result of `generateInputProps` as an object.\r\n */\r\nexport function getInputProps(schema: z.ZodType | undefined): Partial<SomeInputProps> {\r\n  const props = generateInputProps(schema);\r\n  return Object.fromEntries(props) as Partial<SomeInputProps>;\r\n}\r\n\r\n/**\r\n * Wraps `getInputProps` in `useMemo`.\r\n *\r\n * @usage\r\n * ```ts\r\n * return (\r\n *   <input {...useInputProps(schema)} />\r\n * )\r\n * ```\r\n */\r\nexport function useInputProps(\r\n  schema: z.ZodType | undefined\r\n): Partial<SomeInputProps> {\r\n  return useMemo(() => getInputProps(schema), [schema]);\r\n}\r\n\r\ntype SomeInputProps = {\r\n  required: true;\r\n  min: number;\r\n  max: number;\r\n  minLength: number;\r\n  maxLength: number;\r\n  minDate: Date;\r\n  maxDate: Date;\r\n  inputMode: 'numeric' | 'decimal';\r\n};`\r\n```\r\n\r\nCustom input component with a schema prop:\r\n\r\n```ts\r\ninterface Props<TFieldValues extends FieldValues> {\r\n  control: Control<TFieldValues>;\r\n  name: FieldPathByValue<TFieldValues, Value | null | undefined>;\r\n  type?: 'text' | 'email' | 'tel' | 'url' | 'search';\r\n  schema?: ZodTypeForInputProps<z.ZodString>;\r\n}\r\n\r\nexport default function InputText<TFieldValues extends FieldValues>({\r\n  name,\r\n  control,\r\n  schema,\r\n  type = 'text',\r\n  ...props\r\n}: Props<TFieldValues>): ReactElement {\r\n  const {\r\n    field: { value, ...field },\r\n    fieldState: { error },\r\n  } = useController({ name, control });\r\n\r\n  const { inputId, descriptionId, label } = useFieldContext();\r\n  const errorId = useId();\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        id={inputId}\r\n        aria-describedby={descriptionId}\r\n        aria-invalid={error != null}\r\n        aria-errormessage={error != null ? errorId : undefined}\r\n        type={type}\r\n        {...useInputProps(schema)}\r\n        value={value ?? ''}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      <FieldError id={errorId} label={label} error={error} />\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nAnd finally using the component:\r\n\r\n```ts\r\n<InputText control={control} name=\"foobar\" schema={SomeSchema.shape.foobar} />\r\n```"
      },
      {
        "user": "bluebill1049",
        "created_at": "2022-11-22T08:10:11Z",
        "body": "@Svish thanks for sharing."
      }
    ]
  },
  {
    "number": 8649,
    "title": "Several mods of validation for the same form",
    "created_at": "2022-07-08T07:00:18Z",
    "closed_at": "2022-07-12T10:36:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/8649",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nFrom requirements perspective I need to have two fields to be validated using `onChange` approach and the other one is `onBlur`.\r\n\r\n**Describe the solution you'd like**\r\nGive possibility to override default form Mode.\r\nFor example \r\n```ts\r\ntype FormType = {\r\n  firstName: string;\r\n  secondName: string;\r\n  age: number;\r\n}\r\n\r\nconst form = useForm<FormType>({\r\n  mode: 'onChange',\r\n  fieldOptions: { firstName: { mode: 'onBlur' } },\r\n});\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAs alternative I tried to use `onBlur` prop, checking manually against desired requirement (in my case it's a regexp). And then manually setting error. But it feels a bit cumbersome, because now I have validation in several places.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/8649/comments",
    "author": "s5unanow",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2022-07-08T10:13:37Z",
        "body": "hey @s5unanow have you considered using `trigger` instead?"
      },
      {
        "user": "s5unanow",
        "created_at": "2022-07-09T14:49:30Z",
        "body": "Hey @bluebill1049, thanks for your reply!\r\nThat was my first take. But in this case should I change form mode to `onBlur` and add `trigger` api to the `onChange` callback for all inputs that should preserve `onChange` validation behaviour?\r\nBecause if default form validation will stay `onChange` it will affect my desired only `onBlur` field and it will be validated `onChange` anyway."
      },
      {
        "user": "bluebill1049",
        "created_at": "2022-07-09T23:07:37Z",
        "body": "I would keep mode `onChange` and only change those individual input to fire validation with `trigger` API. In your example, that would be `firstName`\r\n\r\n```tsx\r\n// uncontrolled:\r\nconst { onChnage, onBlur, name, ref } = register('firstName')\r\n<input onChange={(e) => setValue(e.target.value)}  onBlur={onBlur} ref={ref} nam={name} />\r\n\r\n// controlled:\r\nconst { onChnage, onBlur, name, ref, value } = useController()\r\n<input onChange={(e) => setValue(e.target.value)}  onBlur={onBlur} ref={ref} nam={name} value={value} />\r\n```\r\n\r\nI haven't test the above, but in theory that's the way to go."
      },
      {
        "user": "s5unanow",
        "created_at": "2022-07-10T12:34:52Z",
        "body": "Hey @bluebill1049 , thanks for your explanation.\r\nBut to be honest, I am not sure if I understood the idea. :D \r\nIt seem's like I missing some crucial part of the library.\r\nWhat I understand, like in example you've proposed `onChange` event will fire on the `desired-only-on-blur-field` in any way. I just don't see how we are preventing `onChange` to be happening.\r\n\r\nI might extend my current example.\r\nSo, I have controlled input\r\n\r\n```ts\r\nconst FormInput = ({\r\n  name,\r\n  rules,\r\n  ...props\r\n}) => {\r\n  const { field, fieldState } = useController({\r\n    name,\r\n    rules,\r\n  });\r\n\r\n  return (\r\n    <FormInputComponent\r\n      onChangeText={field.onChange}\r\n      onBlur={field.onBlur}\r\n      value={field.value}\r\n      errorMessage={fieldState.error?.message}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n```\r\n And then I use it like that\r\n\r\n```ts\r\ntype FormType = {\r\n  firstName: string;\r\n  secondName: string;\r\n  age: number;\r\n}\r\n\r\nconst SomeCombinedForm = () => {\r\n  const form = useForm<FormType>({\r\n    mode: 'onChange',\r\n    defaultValues: {\r\n      firstName: '',\r\n      secondName: '',\r\n      age: 0,\r\n    }\r\n  });\r\n\r\n  return (<FormProvider {...form}>\r\n    <FormInput\r\n      name={Fields.firstName}\r\n      rules={validationRules.firstName}\r\n    />\r\n    <FormInput\r\n      name={Fields.secondName}\r\n      rules={validationRules.secondName}\r\n    />\r\n    <FormInput\r\n      name={Fields.age}\r\n      rules={validationRules.age}\r\n    />\r\n  </FormProvider>\r\n}\r\n```\r\n\r\nSo what essentially I did to achieve desired is\r\n```ts\r\n  const validateFirstName = () => {\r\n    const isValid = form.getValues('firstName').test(regexp);\r\n    if (isValid) {\r\n      return;\r\n    }\r\n    form.setError('firstName', {\r\n      type: 'manual',\r\n      message: incorrectFirstNameMessage,\r\n    });\r\n  };\r\n....\r\n    <FormInput\r\n      name={Fields.firstName}\r\n      rules={validationRules.firstName}\r\n      onBlur={validateFirstName}\r\n    />\r\n```\r\n\r\nIf you might suggest some simplifications and improvements, I will be happy to apply them."
      },
      {
        "user": "bluebill1049",
        "created_at": "2022-07-10T22:36:13Z",
        "body": "I would suggest always associating validation with the input or the schema, setError only shows an error not actually have a rule against your input. \r\n\r\n```tsx\r\n// controlled:\r\nuseForm({ mode: 'onChange' })\r\nconst { onChnage, onBlur, name, ref, value } = useController({\r\n  rules: { required: true }\r\n})\r\n<input \r\n  // this will only update the input value not trigger validation, using setValue because it will not trigger validation by default\r\n  onChange={(e) => setValue(e.target.value)}    \r\n  onBlur={() =>{ \r\n    onBlur(); \r\n    trigger(name)} // this will trigger the validation \r\n  }\r\n  ref={ref} \r\n  nam={name} value={value} \r\n/>\r\n```\r\n\r\nhook form is quite flexible in terms of validation, personally, I wouldn't want to expand the API more at this point if the above works for you."
      },
      {
        "user": "bluebill1049",
        "created_at": "2022-07-12T09:52:50Z",
        "body": "Let me know if there is any more question, I may convert this into a GitHub discussion question."
      },
      {
        "user": "s5unanow",
        "created_at": "2022-07-12T10:32:29Z",
        "body": "Hey @bluebill1049 , sorry for the late reply.\r\n\r\nThanks for sharing thoughts on how to solve the problem I've mentioned.\r\nI like the idea you've proposed on not passing `onChange`. \r\nBut in my case it will complicate api, so I probably need to have extra boolean which states wether my `FormInput` will use only `onBlur` validation. \r\nAnd at the same time as I understand I need to have locally stored input value somehow. I mean this part`(e) => setValue(e.target.value)`. \r\nI am assuming form might receive value through `ref`, but I do not use `ref` in my component.\r\nMaybe I've picked up incorrect approach from the beginning. But I decided agains ref because internally I have such structure as `<Wrapper><Wrapper><Wrapper><TextInput /></Wrapper></Wrapper></Wrapper>`. So passing ref to the TextInput is kinda hard work in this case."
      },
      {
        "user": "s5unanow",
        "created_at": "2022-07-12T10:33:46Z",
        "body": "Nevertheless I totally understand your desire to keep api as simple as possible. So I am ok with current solution and enjoying using library ‚ù§Ô∏è. Just thought it would be not that hard to add functionality I've suggested.\r\n\r\nI guess we might close now."
      },
      {
        "user": "bluebill1049",
        "created_at": "2022-07-12T10:36:04Z",
        "body": "thanks for understanding üôè  @s5unanow I will close the issue until more users report for such API to be reconsidered. "
      }
    ]
  },
  {
    "number": 4556,
    "title": "Provide onSubmit option for reValidateMode",
    "created_at": "2021-03-29T16:39:29Z",
    "closed_at": "2021-03-31T08:49:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/4556",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nwe want to keep the validation on form fields only onSubmit, by using the mode: 'onSubmit' i can achieve that but reValidateMode doesn't support onSubmit and gets triggered on every change to the field which is not ideal. There should be an option to configure the revalidateMode onSubmit as well.\r\n\r\n**Describe the solution you'd like**\r\nideally if reValidateMode is set to 'onSubmit' the validate function should be called only when the user submits the form and not be tied to the onChange event.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/4556/comments",
    "author": "khushboo097",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2021-03-29T21:58:36Z",
        "body": "have you tried to set them both to `onSubmit`?"
      }
    ]
  },
  {
    "number": 4129,
    "title": "Provide validating fields",
    "created_at": "2021-02-08T02:35:10Z",
    "closed_at": "2021-02-09T11:33:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/4129",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI see `formState.isValidating` but it seems not provide `validatingFields`.\r\nI'd like to show loading indicators in the validating input fields.\r\n\r\n**Describe the solution you'd like**\r\n```js\r\nconst { formState: {validatingFields} } = useForm({ mode: \"onChange\" });\r\n```\r\nIt'll be good to provide this API .\r\nThanks for this high quality project!\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/4129/comments",
    "author": "oney",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2021-02-08T02:58:40Z",
        "body": "if you are using `resolver`, then it's coming in V7."
      }
    ]
  },
  {
    "number": 4109,
    "title": "Performance Feature: Opt out of isValidating flag on formState ",
    "created_at": "2021-02-03T19:32:17Z",
    "closed_at": "2021-02-04T14:01:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/4109",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt is noted in the api docs for `useForm` that there are performance problems with validating onChange. From what I can tell, isolating `formState.isValidating` and the `watch` method out of the context reuslts in fewer re-renders because the context only updates if `isValid` or `errors` change. (It confuses me a little bit that running validation results in a new `watch` method - it's memory stable most of the rest of the time.)\r\n\r\n**Describe the solution you'd like**\r\nI would love to be able to opt-out of these two pieces being part of the context.\r\n\r\n**Describe alternatives you've considered**\r\nWe're currently creating a custom context that just removes those two unwanted pieces of `useForm` and passes that value down. We then use our custom context instead of the provided `useFormContext`. If there is already a workaround that is the desired solution, maybe adding it into the docs as a good solution to performance problems in the Advanced section could be useful?\r\n\r\n**Additional context**\r\nCode Snippet for our custom context:\r\n```js\r\nconst FormMethods = createContext({})\r\nexport function useFormContext() {\r\n  return useContext(FormMethods)\r\n}\r\nexport function CustomFormProvider({ children, ...useFormProps }) {\r\n  // can't pull out with the rest operator because it creates a new object every time so it won't be memory stable\r\n  const {\r\n    handleSubmit,\r\n    setValue,\r\n    register,\r\n    control,\r\n    clearErrors,\r\n    getValues,\r\n    reset,\r\n    setError,\r\n    trigger,\r\n    unregister,\r\n    watch,\r\n    formState,\r\n  } = useForm(useFormProps)\r\n  const {\r\n    isValidating,\r\n    isDirty,\r\n    dirtyFields,\r\n    isSubmitted,\r\n    isSubmitSuccessful,\r\n    submitCount,\r\n    touched,\r\n    isSubmitting,\r\n    isValid,\r\n    errors,\r\n  } = formState\r\n\r\n  // to optimize rendering, we only pass along form methods that need to be included\r\n  const surgicalUseProps = useMemo(\r\n    () => ({\r\n      handleSubmit,\r\n      setValue,\r\n      register,\r\n      control,\r\n      clearErrors,\r\n      getValues,\r\n      reset,\r\n      setError,\r\n      trigger,\r\n      unregister,\r\n      formState: {\r\n        isDirty,\r\n        dirtyFields,\r\n        isSubmitted,\r\n        isSubmitSuccessful,\r\n        submitCount,\r\n        touched,\r\n        isSubmitting,\r\n        isValid,\r\n        errors,\r\n      },\r\n    }),\r\n    [\r\n      handleSubmit,\r\n      setValue,\r\n      register,\r\n      control,\r\n      clearErrors,\r\n      getValues,\r\n      reset,\r\n      setError,\r\n      trigger,\r\n      unregister,\r\n      isDirty,\r\n      dirtyFields,\r\n      isSubmitted,\r\n      isSubmitSuccessful,\r\n      submitCount,\r\n      touched,\r\n      isSubmitting,\r\n      isValid,\r\n      errors,\r\n    ]\r\n  )\r\n\r\n  return <FormMethods.Provider value={surgicalUseProps}>{children}</FormMethods.Provider>\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/4109/comments",
    "author": "rosemariesadler",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2021-02-03T21:13:23Z",
        "body": "This is coming for v7 with a subscription model. üëç you can try out in 7.0.0-alpha.2"
      },
      {
        "user": "rosemariesadler",
        "created_at": "2021-02-04T14:01:05Z",
        "body": "Thanks so much! We will try it out!"
      }
    ]
  },
  {
    "number": 4083,
    "title": "FormProvider custom props",
    "created_at": "2021-02-02T01:54:34Z",
    "closed_at": "2021-02-02T14:49:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/4083",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI am trying to migrate a project from V5 to V6, but the the typescript typings limit the way we used react hook forms before. We were able to add custom props to the FormContext (now renamed to FormProvider) and get those with useFormContext. Sadly, I think because of stricter typings, this is not possibly any more.\r\n\r\n```\r\n<FormProvider {...methods} fields={fields}></FormProvider>\r\n\r\nconst { formState, fields } = useFormContext();\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would like to know if this was unsupported behaviour in V5 and I should rewrite this usage or if the typings are to strict now.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/4083/comments",
    "author": "NextNebula",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2021-02-02T02:34:24Z",
        "body": "Hey @NextNebula thanks for the feature request, I think we have fixed the type on v6 with context, if you need custom props, I would be recommended you build your own context."
      },
      {
        "user": "NextNebula",
        "created_at": "2021-02-02T12:26:58Z",
        "body": "Yeah creating our own context instead of mixing it with the form context is probably cleaner code anyway. Thank you!"
      },
      {
        "user": "bluebill1049",
        "created_at": "2021-02-02T22:13:18Z",
        "body": "Thanks for understanding @NextNebula üôâ "
      }
    ]
  },
  {
    "number": 3599,
    "title": "Rename register({ validate }) to validator or getErrorMessage",
    "created_at": "2020-12-03T21:36:36Z",
    "closed_at": "2020-12-04T05:01:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/3599",
    "body": "I am creating a company-specific wrapper around RHF. I think RHF a very nice form library that can help with performance. It's important that the lower level code is fast so that users are not punished quite much when they make mistakes. I have no problems with the library.\r\n\r\nI think the name `validate` is not the best for `register({})` option. I think a better name would be `validator`, but I think `getErrorMessage` is an even better name. Consider:\r\n```ts\r\n<TextField\r\n  name={name}\r\n  ref={register({\r\n    validate: createGetErrorMessageFn({ // I may also call this 'createValidator'\r\n      isValidProp,\r\n      // data from CMS with { fieldIsValid: 'you cannot be born in future', fieldIsRequired: 'birthday is required' }\r\n      errorMessageContent\r\n    })\r\n  }/>\r\n```\r\nI have a sort of naming clash, I couldn't decide on the best names for my utilities, and realized the `validate` name just isn't the best name.\r\n\r\nIt's quite a subjective thing, so I don't want to share a whole bunch of code, since my code is only specific to my situation.\r\n\r\nEven if you are passing in an object to `validate`, I think it's still not the best name, but I don't really pass in sets of validator functions, am not so concerned about that variation of this api.\r\n\r\nThumbs Up üëç ` => ` let's improve this api/it's naming\r\nThumbs Down üëé ` => ` don't change a thing\r\n\r\nIf we get even even 50% thumbs up, I think we should consider improving this api/it's naming",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/3599/comments",
    "author": "devinrhode2",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-12-04T00:33:01Z",
        "body": "Thanks for the suggestion. We will consider that in the future major release, but at the moment, we probably not going to introduce a breaking change."
      },
      {
        "user": "devinrhode2",
        "created_at": "2020-12-04T05:01:38Z",
        "body": "Ok cool, thanks Bill! Feel free to re-open/categorize this as you see fit :) "
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-12-04T07:16:47Z",
        "body": "Thanks for understanding, will bring this up in the next major version."
      }
    ]
  },
  {
    "number": 3376,
    "title": "Default values in submit object model",
    "created_at": "2020-11-06T08:19:25Z",
    "closed_at": "2020-11-08T01:27:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/3376",
    "body": "Original documentation mentions that: \r\n_Its not default state for the form, to include additional form values:_\r\n\r\n_Register hidden input: `<input type=\"hidden\" ref={register} name=\"test\" />`_\r\n\r\n_Combine values at onSubmit callback._\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIn dynamic nested forms. Where you receive form template from API, for example merging the objects can become quite tedious. And including hidden inputs seems like a workaround which reduces code readability and unnecessarily clutters the dom.\r\n\r\n**Describe the solution you'd like**\r\nReceive default values on submit as well.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/3376/comments",
    "author": "vytcus",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-11-06T08:23:28Z",
        "body": "- you can try with `shouldUnregister: false`.\r\n- merge data at submit"
      },
      {
        "user": "vytcus",
        "created_at": "2020-11-06T15:34:47Z",
        "body": "shouldUnregister works. Although all values become strings. Thanks for the fast response!"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-11-06T22:07:52Z",
        "body": "üëç what do you mean all values become strings? do you have a csb?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-11-08T01:27:34Z",
        "body": "closing this issue, but feel free to follow up with the above question."
      }
    ]
  },
  {
    "number": 3350,
    "title": "Suggestion: rename \"ref\" prop in Controller render()",
    "created_at": "2020-11-04T12:42:12Z",
    "closed_at": "2020-11-09T22:16:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/3350",
    "body": "Hello,\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nDuring my migration from V5 to V6, I used the following syntax to simplify moving from the `as` prop to the `render` Controller prop, since most of the time, there was a 1-1 match between the names of the passed props and the component props (value, onChange...)\r\n```jsx\r\n<Controller name={\"myName\"} render={p => <MyComponent {...p}/>}/>\r\n```\r\nNote that the following syntax is described in the doc, so I thought it would be an easy and convenient way to make the migration easier.\r\n\r\nHowever, I found out that 6.10 recently added a `ref` prop, and while I think it's a good idea to be able to pass down a ref, it causes the following error to show up on the console for most of my controlled functional components : `Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?`\r\n\r\nI certainly don't want to wrap all of my functional form components with forwardRef (sometimes tricky to do in TypeScript, and not always relevant) and of course, I can choose to not include the `ref` prop in what I pass down to the render() component, but I wonder if maybe it would be a good idea to rename this `ref` prop?\r\n\r\nI think it makes some sense because :\r\n\r\n- `ref` are unlike other props so passing down a `ref` prop has some gotchas (can trigger errors in console, doesn't work out of the box with functional components...)\r\n- Most components used with RHF should be functional, since class components are kinda legacy now. So it would mean we would have to be extra careful when passing down the `render()` props, and even more also when using the `as` prop (I've checked that with the `as` prop, it also passes down the ref prop, and unlike `render()`, there doesn't seem to be a way out of this problem, although `as` is no longer the recommended way) \r\n\r\n**Describe the solution you'd like**\r\nConsidering that `ref` is a special prop \"reserved\" by React, I suggest renaming the `ref` passed down by `Controller` to something else, like `controllerRef`. Then it would be up to the developer to bind this ref to either the component `ref` or other prop (`inputRef`, etc...)\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/3350/comments",
    "author": "dadouam",
    "comments": [
      {
        "user": "dadouam",
        "created_at": "2020-11-04T13:22:13Z",
        "body": "A possible workaround is to wrap `Controller` into a custom Controller that renames the `ref` prop to something else. Not ideal of course since I'd need to keep the types consistent with future RHF releases.\r\n\r\n```typescript\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype AsProps<TAs> = TAs extends undefined ? {} : TAs extends React.ReactElement ? Record<string, any> : TAs extends React.ComponentType<infer P> ? P : TAs extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[TAs] : never;\r\n\r\ntype MyControllerProps<TAs extends React.ReactElement | React.ComponentType<any> | 'input' | 'select' | 'textarea', TControl extends Control = Control> = Assign<({\r\n  as: TAs;\r\n  render?: undefined;\r\n} | {\r\n  as?: undefined;\r\n  render: (data: {\r\n    onChange: (...event: any[]) => void;\r\n    onBlur: () => void;\r\n    value: any;\r\n    name: FieldName<FieldValuesFromControl<TControl>>;\r\n    controllerRef: React.MutableRefObject<any>;\r\n  }) => React.ReactElement;\r\n}) & {\r\n  name: FieldName<FieldValuesFromControl<TControl>>;\r\n  rules?: ValidationRules;\r\n  onFocus?: () => void;\r\n  defaultValue?: unknown;\r\n  control?: TControl;\r\n}, AsProps<TAs>>;\r\n\r\nexport function MyController<TAs extends React.ReactElement | React.ComponentType<any> | 'input' | 'select' | 'textarea', TControl extends Control = Control>(props: MyControllerProps<TAs, TControl>) {\r\n  const {render, ...rest} = props;\r\n\r\n  function myRender(data) {\r\n    if (!render) {\r\n      return undefined;\r\n    }\r\n    const {ref, ...r} = data;\r\n    const passData = {...r, controllerRef: ref};\r\n    return render(passData);\r\n  }\r\n\r\n  return (\r\n      <Controller {...rest as any} render={myRender as any}/>\r\n  );\r\n}\r\n```\r\n\r\nI'll keep the issue open because I'd love to hear about what are the best practices with `render()` props passing, and if you consider to rename the ref prop."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-11-04T21:54:55Z",
        "body": "Valid point ^, this was made if input ref was exposed correctly for `focus`.\r\n\r\n- `<Controller render={({ ref, ...rest }) => <input rest={rest} />}`\r\n- `<Controller render={({ inputRef, ...rest }) => <input rest={rest} ref={inputRef} />} // which need code change.`\r\n"
      },
      {
        "user": "dadouam",
        "created_at": "2020-11-05T10:56:54Z",
        "body": "Indeed, changing the name requires a code change, although I'm not sure if it would break a lot of projects since it's a recent addition.\r\nI think the problem with the current `ref` prop is that it can only work for some specific cases unlike the other props (e.g an `<input/>`, or some third-party components that provide a `focus()` method such as React-Select, though it's pretty nice when it does work that way!) so personally I think a renaming to `inputRef` (or perhaps `focusRef` to make it more visible that RHF expects this ref to have a `focus()` method?) would make sense to avoid confusion over what this ref is supposed to do and prevent some warnings.\r\nI'd totally understand if you keep it that way though :D\r\n\r\nBtw, another suggestion about this line:\r\n```typescript\r\nconst onFocusRef = React.useRef(onFocus || (() => ref.current.focus()));\r\n```\r\nI suggest adding a console.warn if `typeof current.focus !== 'function'` to make it apparent that this ref only works on elements/components that provide a focus method (for reference, at first, I tried to pass this ref to a `react-dates` datepicker, and during validation, it threw a `ref.current.focus is not a function` error)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-11-05T23:06:09Z",
        "body": "I have a deeper think last night in bed. I think we will keep `ref` as it is (not rename them just for now), the whole reason behind is to push users to wire up focus event if possible so their form is more accessible for input errors. To keep `ref` as it is, I think it aligns with how we use ref at `register` function, and hesitate to introduce breaking change for users who may already use it.\r\n\r\n>I suggest adding a console.warn if typeof current.focus !== 'function' to make it apparent that this ref only works on elements/components that provide a focus method (for reference, at first, I tried to pass this ref to a react-dates datepicker, and during validation, it threw a ref.current.focus is not a function error)\r\n\r\nplease send us a PR :) your name should be on the contribution list. you can use `isFunction` method"
      },
      {
        "user": "dadouam",
        "created_at": "2020-11-09T22:16:26Z",
        "body": "Thank you for your answer, I totally understand why you'd hesitate to introduce a breaking change here and your other reasons. So I'll close this issue for now.\r\n\r\nBtw, thanks for your review on my PR and keep up your good work on your awesome lib :smile:"
      }
    ]
  },
  {
    "number": 2349,
    "title": "Ensure all values set in form are registered",
    "created_at": "2020-07-24T07:43:19Z",
    "closed_at": "2020-07-24T08:00:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/2349",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nNot related to any problem\r\n\r\n**Describe the solution you'd like**\r\nWhen we receive a response from an API, we set the values of the form with the response.  \r\nHowever, the only values that are sent back to the API (on a PUT for example) are the fields that you directly register in your form.\r\n\r\nTo send values back you are not directly using in your form, or use a value of a field, you have to manually register each one.  \r\n\r\nSo, for example, API response is this:\r\n\r\n```\r\n{\r\n   first_name:  \"Test\",\r\n   last_name:  \"User\",\r\n   phone: 12345\r\n} \r\n```\r\n\r\nand the only fields you have in your form are `first_name` and `last_name` - only these 2 values are sent to the values of the form and not the entire response.\r\n\r\nIt would be great that you don't have to manually register every field just to have access to it's value.\r\n\r\n**Describe alternatives you've considered**\r\nMerge the values from the form and the values from the API before sending the form to an endpoint.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/2349/comments",
    "author": "pixel-mattp",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-07-24T07:45:51Z",
        "body": "i believe `shouldUnregister` probably is going to do the trick for you, otherwise you can still merge the data at the final submit without register those values."
      }
    ]
  },
  {
    "number": 2157,
    "title": "Allow to hook into form lifecycle callbacks",
    "created_at": "2020-07-10T21:33:24Z",
    "closed_at": "2020-07-13T08:20:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/2157",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI think allowing the user to hook into the lifecycle methods of the form can be valuable on some scenarios where the user wants to trigger a global loading state, or report to some analytics service.\r\n\r\n**Describe the solution you'd like**\r\nThe ability to hook into form lifecycle methods such as `onSubmitStart`, `onSubmitEnd`, or `onSubmitError` to allow the user to create some primitives to handle forms.\r\n\r\nExample:\r\n\r\n```tsx\r\nimport { useForm as useFormHook } from 'react-hook-form'\r\n\r\nconst useForm = (config) => {\r\n  const form = useFormHook({\r\n    onSubmitStart: () => nProgress.start(),\r\n    onSubmitEnd: () => nProgress.done(),\r\n    onSubmitError: (err) => {\r\n      if (err instanceof FormError) {\r\n        form.setError(err.field, { type: 'FormError', message: err.message })\r\n      } else {\r\n        // unhandled error thrown \r\n      }\r\n    },\r\n    ...config\r\n  })\r\n\r\n  return form\r\n}\r\n\r\n\r\nconst useLoginForm = () => {\r\n  const form = useForm()\r\n\r\n  const onSubmit = form.handleSubmit(async (data) => {\r\n    try {\r\n      await signUp(data)\r\n    } catch (err) {\r\n      if (err.code === 'auth/email-already-in-use') {\r\n        throw new FormError('email', 'Email already in use')\r\n      }\r\n\r\n      throw err\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAs of now, I created a reusable `useForm` hook (as above) but manually patching the `handleSubmit` method.\r\n\r\nExample:\r\n\r\n\r\n```tsx\r\nimport { useForm as useFormHook } from 'react-hook-form'\r\n\r\nconst useForm = (config) => {\r\n  const form = useFormHook(config)\r\n\r\n  const originalHandleSubmit = form.handleSubmit\r\n\r\n\r\n  form.handleSubmit = (cb) => originalHandleSubmit(async (...args) => {\r\n    try {\r\n      nProgress.start()\r\n      await cb(...args)\r\n    } catch (err) {\r\n      if (err instanceof FormError) {\r\n        form.setError(err.field, { type: 'FormError', message: err.message })\r\n      } else {\r\n        // unhandled error thrown\r\n      }\r\n    } finally {\r\n      nProgress.done()\r\n    }\r\n  })\r\n\r\n  return form\r\n}\r\n\r\n\r\nconst useLoginForm = () => {\r\n  const form = useForm()\r\n\r\n  const onSubmit = form.handleSubmit(async (data) => {\r\n    try {\r\n      await signUp(data)\r\n    } catch (err) {\r\n      if (err.code === 'auth/email-already-in-use') {\r\n        throw new FormError('email', 'Email already in use')\r\n      }\r\n\r\n      throw err\r\n    }\r\n  })\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/2157/comments",
    "author": "kevinwolfcr",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-07-11T00:02:47Z",
        "body": "hey @kevinwolfdev great idea! however this will introduce quite few extra APIs, maybe can just use build a custom hook on top of formState? `isSubmitte` `isSubmitting`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-07-13T08:20:43Z",
        "body": "Going to close this feature request, for now, feel free to follow up with questions."
      }
    ]
  },
  {
    "number": 1932,
    "title": "Feature request: Get all unmounted form fields",
    "created_at": "2020-06-22T03:14:42Z",
    "closed_at": "2020-06-22T11:38:51Z",
    "labels": [
      "question",
      "feature request"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1932",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nA way to get all the unmounted form fields would be very useful. In v6, with the `shouldUnregister` set, after a few components have been unmounted, a way to access only those specifically is what I‚Äôm looking for.\r\n\r\nThis will be useful in conditional form fields where setting a certain input can show or hide other fields in the same form.\r\n\r\n**Describe the solution you'd like**\r\nExpose a `getUnmountedFields()` method.\r\n\r\n**Describe alternatives you've considered**\r\nCurrently in v5, I manually keep track of all fields using `ref`s.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1932/comments",
    "author": "paambaati",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-06-22T03:17:44Z",
        "body": "Thanks @paambaati I think this should be tracked at your app level."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-06-22T11:38:51Z",
        "body": "I am going to close this issue and tagged with feature request, don't think we will implement this feature at the moment."
      }
    ]
  },
  {
    "number": 1692,
    "title": "Set validation mode on a per-element basis",
    "created_at": "2020-05-24T18:51:08Z",
    "closed_at": "2020-05-25T05:27:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1692",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nWhen filling the last field in a form with mode setting 'onBlur', my \"Submit\" button is disabled until I tab out of the form, so the element after the \"Submit\" button is selected, and then immediately after the Submit button is enabled, so the user has to shift-tab+enter or click to save the form.\r\n\r\n**Describe the solution you'd like**\r\nI would like the option to set the mode option on a per-element basis. So for example on the last field, I could set the mode as onChange after the contents of the field meet a certain criteria. (In my case, the last field is a zipCode, so I would like to start validating onChange once the field reaches 5 characters long).\r\n\r\n**Describe alternatives you've considered**\r\nI've considered using mode: 'onChange', but this doesn't facilitate an ideal user experience for the rest of the fields on my form. I think a finer-grained approach would work better.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1692/comments",
    "author": "joejordan",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-05-24T22:49:49Z",
        "body": "you can use `trigger` with `onChange` at the last item. "
      },
      {
        "user": "joejordan",
        "created_at": "2020-05-25T05:27:38Z",
        "body": "> \r\n> \r\n> you can use `trigger` with `onChange` at the last item.\r\n\r\nThanks for the tip @bluebill1049 that worked."
      }
    ]
  },
  {
    "number": 1584,
    "title": "add support for flat name for dot notation",
    "created_at": "2020-05-06T23:12:30Z",
    "closed_at": "2020-05-08T20:16:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1584",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nTo avoid mapping between form and api requests, sometimes I want my key as a flat string with dot notation, and not to be automatically converted to nested objects.\r\n\r\n**Describe the solution you'd like**\r\n\r\nTo trigger or avoid automatically parsing or nesting dot notation in `name`, use some way to tell parser to ignore nesting the dot notation, perhaps wrap with quotes:\r\n\r\n```jsx\r\nname=\"\\\"object.nested.db.filter.status.value\\\"\"\r\nerror={errors[\"\\\"object.nested.db.filter.status.value\\\"\"]}\r\nhelperText={errors[\"\\\"object.nested.db.filter.status.value\\\"\"]?.message}\r\n```\r\n\r\n*EDIT: Use escaped double quotes to show how it would work better.*\r\n\r\nThe dot notation could ignore automatically nesting because it contains or starts and ends with quotes `'` or `\"`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI see that `getValues` will return the flat key, but it doesn't feel right, I'd like to use normal submit handler if possible, but maybe I'm not seeing the right way to use it in this case.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1584/comments",
    "author": "ilovett",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-05-06T23:31:31Z",
        "body": "hey, @ilovett we had flat error object in v3, however, it's not Type compatible so we moved to nested object. I think you may have to use `get` from lodash."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-07T00:42:00Z",
        "body": "also a side note, we did consider to reproduce flat error object as well, but then it conflicts the type and make thing a lot more difficult too."
      },
      {
        "user": "ilovett",
        "created_at": "2020-05-07T17:46:34Z",
        "body": "Is that the `NestDataObject` type?  How does it infer from the `.` if there is a nested child objects vs. not treating that `key` as `string` ?\r\n\r\nCan you point me to that logic in question in the types definitions?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-07T23:28:15Z",
        "body": "I don't think we will support a flat error object, anything '.' inside the string will be converted into the `object`. `NestDataObject` was made to support when `values` and `errors` is not matching the data type.  @kotarella1110 the author can explain further here."
      },
      {
        "user": "kotarella1110",
        "created_at": "2020-05-08T00:30:47Z",
        "body": "@ilovett Thanks for your suggestion.\r\nBecause TS cannot parse the string literal type, this suggestion can cause to the following type error:\r\n\r\n```ts\r\n// This works\r\nconst { getValues, errors } = useForm<{\r\n  \"'object.nested.db.filter.status.value'\": string;\r\n}>();\r\n\r\nname=\"'object.nested.db.filter.status.value'\"\r\nerrors[\"'object.nested.db.filter.status.value'\"]\r\ngetValues(\"'object.nested.db.filter.status.value'\")\r\n\r\n// This doesn't work\r\nconst { getValues, errors } = useForm<{\r\n  \"'object.nested.db.filter.status.value'\": string;\r\n}>();\r\n\r\nname='\"object.nested.db.filter.status.value\"'\r\nerrors['\"object.nested.db.filter.status.value\"'] // It works in JS, but it's a type error in TS\r\ngetValues('\"object.nested.db.filter.status.value\"') // It works in JS, but it's a type error in TS\r\n```"
      },
      {
        "user": "ilovett",
        "created_at": "2020-05-08T20:16:04Z",
        "body": "Thanks @kotarella1110 .  The types do indeed pass, however the parsed values sent to `onSubmit` is parsed with the `'` prepended on first key, and appended to last key -- returns values like\r\n\r\n```json\r\n{ \"\\\"object\": { \"nested\": { \"db\": { \"filter\": { \"status\": { \"value\\\"\": \"good\" }}}}}}\r\n```\r\n\r\nIt would be cool if instead of nesting, first checks if it's a string if it contains `'` (or some other way of telling RHF not to automatically `transformToNestObject`) and returns flat:\r\n\r\n```\r\n{ \"object.nested.db.filter.status.value\": \"good\" }\r\n```\r\n\r\nNot sure if thats very intuitive or maybe too hacky even.  I am just going to close this ticket."
      }
    ]
  },
  {
    "number": 1541,
    "title": "getValues() will return invaild type, if use array type.",
    "created_at": "2020-04-30T01:20:32Z",
    "closed_at": "2020-04-30T01:58:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1541",
    "body": "Is this the expected normal behavior?\r\n\r\n```ts\r\ninterface FormData {\r\n  position_types: string[]\r\n}\r\n\r\nconst defaultValues: FormData = {\r\n  position_types: []\r\n};\r\n\r\nconst Form = props => {\r\n  const { register, getValues } = useForm<FormData>({\r\n    defaultValues\r\n  });\r\n\r\n  // return Record<string, unknown>, not FormData\r\n  getValues();\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1541/comments",
    "author": "naomei",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-30T01:42:44Z",
        "body": "`getValues({ nest: true })` we are fixing this in V6."
      },
      {
        "user": "naomei",
        "created_at": "2020-04-30T01:58:27Z",
        "body": "@bluebill1049 \r\n\r\nthanks!! it is fixed!"
      }
    ]
  },
  {
    "number": 1522,
    "title": "FormArray validation",
    "created_at": "2020-04-28T19:23:38Z",
    "closed_at": "2020-04-29T08:48:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1522",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nCorrect me if I'm wrong, but currently there is no way to validate a FormArray (require it to be non-empty, validate for min/max length etc). Requiring a non-empty array is a very common use case.\r\n\r\n**Describe the solution you'd like**\r\nFormArray should act more like a FormValue, with validation options and its own name.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1522/comments",
    "author": "R0nd",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-28T22:39:41Z",
        "body": "pretty sure you can with `validate` function."
      },
      {
        "user": "R0nd",
        "created_at": "2020-04-28T22:48:30Z",
        "body": "There's no `validate` in the documented `useFieldArray` signature:\r\n>useFieldArray: ({ control?: any, name: string, keyName?: string = 'id' }) => object"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-04-28T23:18:01Z",
        "body": "I think i miss your question, you want to validate the entire field array. you will have to do that at your app-level, we don't have validation in terms of size, you can check at the `handleSubmit` and `setError`. "
      }
    ]
  },
  {
    "number": 1506,
    "title": "Custom Validation on a single field?",
    "created_at": "2020-04-26T21:38:26Z",
    "closed_at": "2020-04-26T22:11:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1506",
    "body": "I'm not sure if I'm finding the docs confusing or whether it's not possible/documented.\r\n\r\nI want to run some custom validation, which I believe I can do with a `customResolver`. However I only want to do this for some custom fields, the majority of the fields I'm using the built in validation works fine. Is it possible to achieve this as I can only see it being done at the `useForm` level which applies to all fields?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1506/comments",
    "author": "IPWright83",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-26T22:11:57Z",
        "body": "you have to use either build in or validation resolver/schema."
      }
    ]
  },
  {
    "number": 1481,
    "title": "Problems with setValue()",
    "created_at": "2020-04-23T11:50:53Z",
    "closed_at": "2020-04-23T12:02:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1481",
    "body": "**Describe the bug**\r\nsetValue doesn't set the array values properly in \"react-hook-form\": \"^5.5.3\",\r\n\r\n**To Reproduce**\r\nA lot of versions react-hook-form were released in last couple of days, so I don't know if this is some version specific, but after updating it doesn't work as it was day before.\r\nIf I try to submit invalid form, errors are displayed properly, but when I select any department (data from <DepartmentEmployeesPicker /> is passed correctly), it clears the error, but I cannot submit because there are no data set for this array. I also tried to use clearError, but that doesn't work also.\r\n\r\n`setValue('departments', data.departments, true);`\r\n\r\n**Expected behavior**\r\nIt should update array of values.\r\n\r\n```\r\nconst schema = yup.object().shape({\r\n\tdepartments: yup\r\n\t\t.array()\r\n\t\t.ensure()\r\n\t\t.min(1, 'At least 1 department selected is required')\r\n});\r\n\r\nconst { control, register, formState, handleSubmit, errors, clearError, setError, getValues, setValue } = useForm({\r\n\tdefaultValues: model,\r\n\tvalidationSchema: schema,\r\n\tsubmitFocusError: true,\r\n});\r\n\r\nregister({ name: 'departments' });\r\nregister({ name: 'employees' });\r\n\r\n<DepartmentEmployeesPicker\r\n\tcheckedDepartments={model.departments}\r\n\tcheckedEmployees={model.employees}\r\n\thasError={errors && errors.departments}\r\n\tonChange={data => {\r\n\t\tsetValue('departments', data.departments, true);\r\n\t\tsetValue('employees', data.employees);\r\n\t}}\r\n/>\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n - Browser Chrome\r\n - Version 80.0.3987.163 (Official Build) (64-bit)\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1481/comments",
    "author": "rvision",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-23T11:52:47Z",
        "body": "you should put those \r\n\r\n```\r\nregister({ name: 'departments' });\r\nregister({ name: 'employees' });\r\n```\r\n\r\ninside a useEffect, otherwise, each render will re-register a new input into hook form."
      },
      {
        "user": "rvision",
        "created_at": "2020-04-23T12:02:30Z",
        "body": "Wow :)\r\n\r\nThanks a lot, that exactly was the issue.\r\n"
      },
      {
        "user": "robmarshall",
        "created_at": "2020-04-27T15:28:34Z",
        "body": "This just helped me. Thanks all!"
      }
    ]
  },
  {
    "number": 1427,
    "title": "Adding an async validator delays synchronous validators from clearing error state",
    "created_at": "2020-04-15T21:42:30Z",
    "closed_at": "2020-04-16T11:50:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1427",
    "body": "**Describe the bug**\r\nRegistering a single async validator makes synchronous errors clear only _after_ the async validator resolves.\r\n\r\n**To Reproduce**\r\n\r\n`mode` is `onChange`.\r\n\r\n```\r\nconst registerDisplayNameRule = register({\r\n    minLength: {\r\n      value: 4,\r\n      message: 'The display name must be at least 4 characters in length.',\r\n    },\r\n    required: 'The display name is required.',\r\n    validate: {\r\n      unique: debounce(checkForUserWithSameDisplayName, 400),\r\n    },\r\n  })\r\n```\r\n\r\n`minLength` will trigger as soon as you start typing, and show the error synchronously. Once you type past 4 characters, I'd expect the error message to disappear immediately, but it only disappears once `unique` resolves.\r\n\r\nIf you remove the `validate` object, that's the behaviour.\r\n\r\n**Expected behavior**\r\nExpect synchronous validating errors to clear immediately when they're no longer an error.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1427/comments",
    "author": "martdavidson",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-15T22:27:01Z",
        "body": "> minLength will trigger as soon as you start typing, and show the error synchronously.\r\n\r\nThat depends on your validation mode, and you can combine something like touched to avoid the error gets appeared right away.\r\n\r\nhave you considered moving all the validation into the validate function?"
      },
      {
        "user": "martdavidson",
        "created_at": "2020-04-15T22:54:37Z",
        "body": "Hey Bill, yes, I did consider moving everything into validate, I'll try that.\r\n\r\nThe issue here wasn't that the error appears right away, it's that it doesn't disappear until all validators have resolved."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-04-15T23:11:01Z",
        "body": "> The issue here wasn't that the error appears right away, it's that it doesn't disappear until all validators have resolved.\r\n\r\nThis is expected behavior, otherwise, the user will see an error appear, disappear and reappear."
      },
      {
        "user": "martdavidson",
        "created_at": "2020-04-16T13:45:10Z",
        "body": "If that's expected, then that's fine, but it seems like a bad user experience to not get feedback on the synchronous validation right away. If I type more than 4 characters, I have to wait until the unique username check resolves before the minLength error goes away, which doesn't really feel good."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-04-16T22:12:55Z",
        "body": "Personally i disagree with the statement above, but if that's the behavior that your app expected, you can always leave that async one outside of register and attach a onChange to `triggerValidation`, which means you still get instant feedback and there will be another async validation coming later on."
      }
    ]
  },
  {
    "number": 1422,
    "title": "Deferring Script / Chunking",
    "created_at": "2020-04-15T13:18:46Z",
    "closed_at": "2020-04-16T00:36:43Z",
    "labels": [
      "question",
      "dependency"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1422",
    "body": "As this package is wrapped completely around the form component that I am building, is there any way to split the JS script away from the component and defer its loading until after page render?\r\n\r\nI am trying to reduce my page load as much as possible, and the JS behind the form is not critical for page load.\r\n\r\nAny thoughts?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1422/comments",
    "author": "robmarshall",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-15T13:23:59Z",
        "body": "can you provide a bit more context? if your page doesn't contain `react-hook-form`, it should get code-split."
      },
      {
        "user": "robmarshall",
        "created_at": "2020-04-15T13:27:36Z",
        "body": "This may be more of a Webpack thing, now I think about it.\r\n\r\nAs an example, I have a homepage and the very first element on it is the form. I want the HTML of the form to load - this has been managed via SSR. But I want the react-hook-form code to be split and deferred. Rather than being seen as essential and loading immediately."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-04-15T13:50:55Z",
        "body": "yea, i think you want to post this question at Webpack."
      }
    ]
  },
  {
    "number": 1282,
    "title": "Password and Confirm Password field validation using validationSchema",
    "created_at": "2020-03-27T06:37:20Z",
    "closed_at": "2020-03-27T12:33:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1282",
    "body": "@bluebill1049 Can you show an example of password and confirm-password using validationSchema?\r\n\r\nI am doing my validation like this:\r\n```\r\nconst validationSchema = yup.object().shape({\r\n    newPassword: yup.string()\r\n      .required('New Password is required'),\r\n    confirmPassword: yup.string()\r\n      .required('Confirm Password is required')\r\n      .oneOf([yup.ref('password'), null], 'Passwords does not match'),\r\n  });\r\n```\r\nFor this scenario, please fire validations **onChange** or **onBlur**.\r\n\r\nAt first sight, everything looks fine. But if you follow this order, then you can see problems:\r\n1. Input \"abcde\" in newPassword field.\r\n2. Input \"abcdf\" in confirmPassword field. (It will throw error: Passwords does not match)\r\n3. Change newPassword to \"abcdf\"\r\n\r\nActual result: confirmPassword will still have errors.\r\nExpected result from user perspective: confirmPassword should not have any error as of now.\r\n\r\nCan you please check it?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1282/comments",
    "author": "Vishal1419",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-03-27T06:51:21Z",
        "body": "if you want the other field to be re-validated as well, you can use `triggerValidation`."
      },
      {
        "user": "Vishal1419",
        "created_at": "2020-03-27T12:33:53Z",
        "body": "@bluebill1049 Thank you for the quick response. I have called triggerValidation on onBlur as well as on onChange. That works perfectly. Thank you again."
      },
      {
        "user": "brunobraga95",
        "created_at": "2020-09-21T20:28:08Z",
        "body": "@Vishal1419 can you share a working example?"
      },
      {
        "user": "Vishal1419",
        "created_at": "2020-09-22T10:32:15Z",
        "body": "@brunobraga95 Thanks for reaching out to me.\r\n\r\nyou can get triggerValidation from useForm like this:\r\n```\r\nconst { triggerValidation } = useForm();\r\n```\r\n\r\nAnd then in your input you can trigger the validation on change like this:\r\n```\r\n<input\r\n    ...some props...\r\n    onChange={() => { triggerValidation('confirmPassword'); }}\r\n/>\r\n```\r\n\r\nPlease feel free to ask if you have any other problems. Thanks."
      }
    ]
  },
  {
    "number": 1252,
    "title": "Allow for different error type or cast the error type from validationResolver ",
    "created_at": "2020-03-20T15:53:52Z",
    "closed_at": "2020-03-23T10:17:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1252",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI want to use a more complicated error interface than just `{ message: string }`. In my example it is \r\n```\r\nmessage: {\r\n  key: string\r\n}\r\n```\r\nI need it to be explicit for other developers that it is in fact a key that needs to be transformed in a message (i18n).\r\n\r\n**Describe the solution you'd like**\r\nEither allow to pass another interface than `FormData` or cast the type from `validationResolver` error return value type.\r\n\r\n**Describe alternatives you've considered**\r\nUsing a simple structure of errors with just string\r\n\r\nWhat do you think? Doable, worth effort? How hard on scale 1-10, so I know if I can help with PR.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1252/comments",
    "author": "morawskiOZ",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-03-20T22:38:03Z",
        "body": "is it possible to bake your error message inside the `validationResolver` depend on lang? "
      },
      {
        "user": "morawskiOZ",
        "created_at": "2020-03-23T10:06:32Z",
        "body": "> is it possible to bake your error message inside the `validationResolver` depend on lang?\r\n\r\nThanks for your replay. Good idea and I gave it a try but the problem is that we use the same validation logic and interfaces (I don't want it to diverge) on the server-side where I don't have access to i18n functionality and always have to return the key for FE to read and translate.  For now, I will simplify the interface to just\r\n`message:  string`\r\n\r\nIt is hard for me to say is this feature really needed or our project is the only one which would benefit from it and therefore not worth the effort. Please decide and close it if needed. "
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-03-23T10:17:41Z",
        "body": "> It is hard for me to say is this feature really needed or our project is the only one which would benefit from it and therefore not worth the effort. Please decide and close it if needed.\r\n\r\nthanks for understanding, I will close this issue for now and add this feature request to our backlog anyhow. "
      }
    ]
  },
  {
    "number": 1245,
    "title": "Why require a separate `keyName` rather than use provided `id`?",
    "created_at": "2020-03-19T15:59:52Z",
    "closed_at": "2020-03-21T06:03:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1245",
    "body": "This question relates to #964 ...\r\n\r\n@bluebill1049 can you say more about the reasoning for setting a different `keyName` rather than using the existing `id` if provided? It seems reasonable to assume that the `id` would be unique, and if that's the case then why use a separate generated key at all?\r\n\r\nI imagine there's some inner workings of the library that I'm not understanding, so I thought I'd check in. It seems like a leaky abstraction to require knowledge that `useFieldArray` will overwrite `id` in your data.\r\n\r\nThoughts?\r\n\r\n(Also, love the library BTW, great work so far. I'm hoping to be able to adopt it within our team as we ramp up the use of React forms instead of Rails forms. Turns out react-hook-form perfectly fits the bill of reducing all the clutter of event handlers. Thank you! üôè )",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1245/comments",
    "author": "AndrewSouthpaw",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-03-19T21:22:00Z",
        "body": "aha, I forgot to updated the docs! my bad...\r\n\r\nwe have a new prop called `KeyName` which you can rename `id` to other stuff if `id` was used for your submit.\r\n\r\n`id` is really a unique id for `key` attribute, bcause there are cases when user use `id` as actual field name, hence introduced `keyName` to enabled rename.\r\n\r\n```\r\n{\r\n  control,\r\n  name,\r\n  keyName = 'id' as KeyName,\r\n}\r\n```\r\n\r\n```\r\nuseFieldArray({\r\n  control,\r\n  name: 'test',\r\n  keyName: 'bill',\r\n})\r\n\r\n{fields.map(field => <div key={field.bill} />)}\r\n```\r\n\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-03-19T22:42:04Z",
        "body": "doc is updated."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-03-21T06:03:27Z",
        "body": "going to close this issue, feel free to follow up with more questions."
      },
      {
        "user": "AndrewSouthpaw",
        "created_at": "2020-03-26T04:32:35Z",
        "body": "Hi @bluebill1049 , thanks for the response.\r\n\r\nI'm familiar with the option for `keyName`. My question is this: why overwrite the `id` attribute in the first place?\r\n\r\nIt seems reasonable to use a provided `id` if there is one. It could be stated as an invariant that the `id` attribute if provided is expected to be unique. That way, the code reads much more naturally.\r\n\r\nAs it stays, I have to use this `keyName` attribute in order to divert the generated key into a useless place, since the id on my data works perfectly well."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-03-26T04:43:18Z",
        "body": "hey @AndrewSouthpaw for uncontrolled inputs, RHF will need unique id(key) for each input/div/row, hence the `id` was introduced and later on i realise that it will overwrite or ignore user's actual input field which named as `id` and hence introduced the `keyName`. hopefully this answers your question, it's always bit tricky to explain offline. let me know if this answers your question."
      },
      {
        "user": "AndrewSouthpaw",
        "created_at": "2020-03-26T18:08:30Z",
        "body": "Not quite. I've put together a PR to make my suggestion more concrete. I hope it's helpful. üòÑ "
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-03-26T21:20:24Z",
        "body": "oh cool thanks I will take a look there. thanks @AndrewSouthpaw "
      }
    ]
  },
  {
    "number": 999,
    "title": "How to handle server responses not related to any field?",
    "created_at": "2020-02-09T14:38:41Z",
    "closed_at": "2020-02-10T00:31:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/999",
    "body": "Hi! \r\n\r\nIs there a proper way to retrieve an error from server (general error, not related to a field) on submission and then show it to users, using the library?\r\n\r\nExample: login form with only email and password fields:\r\n\r\nform is submitted, but some network error happens on server. I would like to, elegantly, do something like setError(\"server\", \"Oh oh! Something went wrong. Please try again later.\")\r\n\r\nor maybe an \"status\" object on FormContext, which the user itself could manage. Would this bring performance issues? \r\n\r\nIf possible it could be  type safe too. \r\n\r\nwith:\r\nuseForm<FormValues,FormStatus>()\r\n\r\nJust asking, as I don't understand if this implementation would bring unnecessary re-renders, which is one of the biggest pro's of this library. Thanks!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/999/comments",
    "author": "outerlook",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-02-09T21:00:56Z",
        "body": "`setError(\"server\", \"serverError\", \"Oh oh! Something went wrong. Please try again later.\")`\r\n\r\nit's exactly what you had above. you can invoke that in the `handleSubmit` after your request"
      },
      {
        "user": "outerlook",
        "created_at": "2020-02-10T00:10:20Z",
        "body": "I can do that, but wouldn't later typescript complain about me trying to access errors.server, if server isn't a field at all?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-02-10T00:14:45Z",
        "body": "you can type that external `serverError` as a field? alternative maybe just use `useState` then."
      },
      {
        "user": "outerlook",
        "created_at": "2020-02-10T00:21:01Z",
        "body": "yes, that would solve it. Feels a little like a workaround, I don't know, but it is simple enough. I know it's hard to say if the library should do something specific for this case, unless it is really really common on other forms. Thanks for your time, @bluebill1049 , that was fast and kind. "
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-02-10T00:28:56Z",
        "body": "no worries :) @outerlook üôè We had people suggest to return from handleSubmit and treat them as errors, but it's bit weird at the same time... :( I think keep it simple, it's probably the better solution here."
      },
      {
        "user": "outerlook",
        "created_at": "2020-02-10T00:31:35Z",
        "body": "I agree! Thanks!\r\n"
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-21T13:59:03Z",
        "body": "What's the best way to reset a network error?\r\n`onSubmit(() => setError('networkError', { message: 'text' })) );`\r\nbut then should be something like `onAnyChange` event, where I can reset it. Can't find.\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-21T23:48:07Z",
        "body": "> What's the best way to reset a network error?\r\n> `onSubmit(() => setError('networkError', { message: 'text' })) );`\r\n> but then should be something like `onAnyChange` event, where I can reset it. Can't find.\r\n\r\n`clearErrors('networkError')`"
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-22T07:44:28Z",
        "body": "@bluebill1049 a method, yes. But when to call it?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-22T10:27:39Z",
        "body": "you can call it before `onSubmit`\r\n```\r\nonSubmit={() => {\r\n   clearErrors();\r\n   handleSbumit()()\r\n}}\r\n```\r\n\r\n"
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-22T10:30:18Z",
        "body": "yeah, there is no other way. I can't clear it on any input change. For this, I'd need to add `setError('nerworkError', '')` in every change handler."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-22T10:50:20Z",
        "body": "you can do onChagne as well, just `clearError('xxx')`"
      }
    ]
  },
  {
    "number": 973,
    "title": "Don't require field registration for partially rendered forms",
    "created_at": "2020-02-05T05:49:41Z",
    "closed_at": "2020-02-05T06:05:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/973",
    "body": "We have a very large form with 100+ fields, however, they're not all rendered at the same time. (It's essentially a wysiwyg editor ala webflow or figma.) We're currently using Formik but exploring this library because it solves some of the problems we're facing with Formik, namely performance.\r\n\r\nI like and agree with most of the design decisions of this library except for the requirement to call `register`/`unregister` when the component is mounted, which means RHF only keeps track of fields that are rendered. As a result, when we hide some configuration menus (i.e. unmount certain fields), their value is essentially wiped out from the form state.\r\n\r\nIt looks like \"Wizard Form / Funnel\" example is designed to help solve the issue of managing hidden state but, unfortunately, it doesn't cover the use case of one large, partially rendered form. Even though we could move the state to a state management library to avoid losing the state of unrendered fields, we'd rather prefer to keep it in the form, as it is best equipped to do things like validations.\r\n\r\nSo, my question is: Is field registration something that the library requires in order to keep track of the field? Can RHF only update the state of fields that actually changed, keeping the existing state as is, even if the fields are not currently mounted?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/973/comments",
    "author": "petrbela",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-02-05T06:05:21Z",
        "body": "> I like and agree with most of the design decisions of this library except for the requirement to call register/unregister \r\n\r\nwe actually don't required the user to invoke `unregistered`, it's automatic.\r\n\r\n> Is field registration something that the library requires in order to keep track of the field? Can RHF only update the state of fields that actually changed, keeping the existing state as is, even if the fields are not currently mounted?\r\n\r\nThat's up to your implementation. I worked on a similar task at work, what i did at work was using state lib to capture those input values and render inputs partially with their value (which is what you mentioned above). alternatively you can hide the inputs' visibility, if none of these helps then this is probably not the right tool for your work."
      },
      {
        "user": "thehappycoder",
        "created_at": "2020-05-24T13:43:16Z",
        "body": "I've encountered the same issue. react-hook-form is great but, unfortunately, doesn't work well in this scenario (in both controlled and uncontrolled modes). In my case, I need to keep errors state."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-25T02:31:39Z",
        "body": "@thehappycoder can you provide more context and potential examples for me to take a look? React hook form embrace native HTML forms, I am pretty sure there will be a solution for this as we can build anything with native form and vanilla JS."
      }
    ]
  },
  {
    "number": 905,
    "title": "How to pass regex rules to `pattern` as variable",
    "created_at": "2020-01-24T23:15:20Z",
    "closed_at": "2020-01-25T00:04:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/905",
    "body": "What is the correct way to pass regex value as variable in the pattern?\r\n\r\n`ref={register({\r\n                              required: \"This field is required\",\r\n                              pattern: {\r\n                                value: /`${item.regex}`/,\r\n                                message: `${item.errorMessage}`\r\n                              }\r\n                            })}`\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/905/comments",
    "author": "maithuy",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-24T23:45:58Z",
        "body": "hey @maithuy you should be able to pass in regex, your example above: you may want to do new `new Regex()` and pass your string"
      },
      {
        "user": "maithuy",
        "created_at": "2020-01-24T23:54:18Z",
        "body": "hi @bluebill1049 I have a task to pass regex rule set by the api, if I hard code the regex, it works, but it doesn't work when I pass regex as variable. \r\n\r\nAre you suggesting \r\n\r\n`ref={register({ required: \"This field is required\", pattern: { value: new Regex(item.regex), message: ${item.errorMessage} } })}`"
      },
      {
        "user": "maithuy",
        "created_at": "2020-01-24T23:59:20Z",
        "body": "This works for me\r\n\r\n`\r\nref={register({\r\n                            required: \"This field is required\",\r\n                            pattern: {\r\n                              value: new RegExp(item.regex),\r\n                              message: `${item.errorMessage}`\r\n                            }\r\n                          })}\r\n`\r\n\r\nThanks so much! It would be very helpful if this info is available in the documentation.\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-01-25T00:14:14Z",
        "body": "Glad it worked out :) it‚Äôs javascript related I think I will leave it out from the documentation. Basically if u want to pass as string you need to use new Regex üëå"
      }
    ]
  },
  {
    "number": 813,
    "title": "getting handleSubmit from useFormContext hooks",
    "created_at": "2020-01-11T01:20:52Z",
    "closed_at": "2020-01-11T20:37:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/813",
    "body": "**Describe the bug**\r\nHi\r\nFirst thanks for your wonderful works.\r\nAfter trying useFormContext hooks, i'm not able to use handleSubmit function in a sub component\r\nIn fact, I have a FormSubmit component responsible of getting the submit function from the context (using useFormContext hook)\r\nIt seems that handleSubmit is never executed.\r\n\r\n\r\n```\r\n//Form component\r\ntype FormProps = {\r\n  validationSchema?: any;\r\n};\r\nconst Form: React.FC<FormProps> = ({ children, validationSchema }) => {\r\n  const formMethods = useForm({\r\n    validationSchema: validationSchema || {}\r\n  });\r\n\r\n  return <FormContext {...formMethods}>{children}</FormContext>;\r\n};\r\nexport default Form;\r\n\r\n//SubmitComponent\r\ntype SubmitProps = {\r\n  onSubmit?: (data: any) => any;\r\n};\r\n\r\nconst Submit: React.FC<SubmitProps> = ({ onSubmit }) => {\r\n  const data = useFormContext(); // retrieve all hook methods\r\n  // console.log(data);\r\n  return (\r\n    <Button\r\n      onPress={(): any => {\r\n        data.handleSubmit(onSubmit);\r\n      }}\r\n    >\r\n      My label\r\n    </Button>\r\n  );\r\n};\r\nexport default Submit;\r\n\r\n//App\r\n     <Form validationSchema={signinSchema}>\r\n        <View>\r\n          <InputText\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n          />\r\n        </View>\r\n        <View>\r\n          <InputText\r\n            name=\"lastName\"\r\n            label=\"Last name\"\r\n          />\r\n        </View>\r\n        <Submit onSubmit={(data: any): any => console.log(data)} />\r\n      </Form>\r\n\r\n```\r\nDo you have any ideas why my function handleSubmit I get from hooks does not executes the \"onSubmit\" callback\r\n\r\nAgain, thanks!\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/813/comments",
    "author": "mdebo",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-11T01:32:45Z",
        "body": "`data.handleSubmit(onSubmit)(event)` I have replied you at spectrum early today as well :)"
      },
      {
        "user": "mdebo",
        "created_at": "2020-01-11T12:24:50Z",
        "body": "Thanks you for your response! it wasn't me this morning on spectrum :-), but i really have appreciate your reactivity\r\n\r\nAll is working fine, now, so I think you can close this issue which wasn't a real one \r\nI have subscribed on spectrum too, :-)\r\n\r\n"
      },
      {
        "user": "theweiweiway",
        "created_at": "2020-01-11T19:40:01Z",
        "body": "It was me lol. Ya, all i was missing was the ``(event)``. Thanks!"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-01-11T20:37:00Z",
        "body": "lol sorry guys. u just ask the same questions at the same time."
      }
    ]
  },
  {
    "number": 812,
    "title": "Possible bug",
    "created_at": "2020-01-10T21:01:48Z",
    "closed_at": "2020-01-10T22:45:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/812",
    "body": "When I use setValue to set initial values to the form it sets the touched to true for that field. \r\n\r\nTherefore the dirty flag goes to true.\r\n\r\nI may be wrong, but I think when we want to use setValue in the code, witch does not mean user interaction, we want the form to remain untouched and not dirty.\r\n\r\nMaybe we could send in a flag to say I want the form to be dirty or not via setValue:\r\n\r\nsetValue('field' , 10, validate = true, setTouched=false) : something like that.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/812/comments",
    "author": "marcosfsj",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-10T21:49:20Z",
        "body": "if you just want to set value for the input as the initial value. you can use reset() or defaultValues. That wouldn't trigger touched or dirty. "
      },
      {
        "user": "marcosfsj",
        "created_at": "2020-01-10T22:43:54Z",
        "body": "Thanks! It works! \r\n\r\nAwesome lib!!!"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-01-10T22:45:24Z",
        "body": "Thank you :) "
      }
    ]
  },
  {
    "number": 774,
    "title": "Can I use validationSchema in useForm and Controller's rules validate",
    "created_at": "2020-01-05T04:00:10Z",
    "closed_at": "2020-01-05T06:15:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/774",
    "body": "I defined a validationSchema in useForm, then I use validate in rules of Controller to check some async rules. Now the validate function will be ignored. So the question is how to use both of them togetherÔºü",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/774/comments",
    "author": "iamwelk",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-05T04:04:53Z",
        "body": "hmmm good question. as right now we support either schema or build-in validation. "
      }
    ]
  },
  {
    "number": 719,
    "title": "Allow to setValue without registering first",
    "created_at": "2019-12-27T02:59:42Z",
    "closed_at": "2019-12-27T04:12:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/719",
    "body": "Hi Bill,\r\n\r\nThank you for this awesome library!\r\n\r\nI would like to request `setValue` without register first to dynamically set custom value to form's data. It would be great for form builder.\r\n\r\nSo i'm writing quiz maker function which construct a quizz dynamically like this:\r\n```js\r\nexport function QuizMaker({ type, index, ...props }) {\r\n  const { setValue, register, unregister } = useFormContext()\r\n\r\n  useEffectOnce(() => {\r\n    register(`quiz[${index}].type`)\r\n    setValue(`quiz[${index}].type`, type)\r\n    return () => unregister(`quiz[${index}]`)\r\n  })\r\n\r\n  return React.createElement(quizTypes[type], { index, ...props })\r\n}\r\n```\r\n\r\nIf i need to set custom info like quiz's points, i have to register and setValue again.\r\nOr i want to add quiz level to form data first to test api, add level picker later, ... register and setValue must be used again.\r\n\r\nShould we have another function call `inject` to dynamically set custom value to form data?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/719/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-27T03:06:09Z",
        "body": "hey @vuhg, thanks for the kind words. is it possible just register once?\r\n\r\n`register('quiz')`\r\n\r\nand you can `setValue('quiz[0]', 'data')` see if that works."
      },
      {
        "user": "ghost",
        "created_at": "2019-12-27T03:17:30Z",
        "body": "Thank you for quick response.\r\n\r\nThat doesn't work.\r\n`register('quiz')` overrides my default quiz and set quiz undefined instead of array[quiz].\r\nincorrect behavior: `quiz: undefined`\r\ncorrect behavior: `quiz: [{ default quiz object }]`\r\n\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-27T03:22:42Z",
        "body": "what about this `register('quiz[0]')`?  will that make the input filed `registered` as array?\r\n\r\nTo be honest, i will try to get away with this `inject` concept for now."
      },
      {
        "user": "ghost",
        "created_at": "2019-12-27T03:31:06Z",
        "body": "`register` once and using `setValue` many times is great alternative.\r\nBut the current behavior is unexpected to me, or i don't understand correctly.\r\n\r\n```\r\nuseEffectOnce(() => {\r\n    register(`quiz[${index}]`)\r\n    setValue(`quiz[${index}].type`, type)\r\n    return () => unregister(`quiz[${index}]`)\r\n})\r\n```\r\n\r\nquiz is empty array instead of array of 3 (because i added 3 quizzes to test)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-27T03:33:46Z",
        "body": "what do you get by running this: \r\n\r\n```\r\nregister('quiz[0]')\r\n\r\nsetValue(`quiz[0].type`, type)\r\nsetValue(`quiz[1].type`, type)\r\nsetValue(`quiz[2].type`, type)\r\n```"
      },
      {
        "user": "ghost",
        "created_at": "2019-12-27T03:48:53Z",
        "body": "the result is `quiz: Array(0)`\r\nactually, ```register(`quiz[${index}]`)``` will reset all the default quiz's values and return empty array\r\n\r\n```\r\nconst quizTypes = {\r\n  input: QuizInput,\r\n  choice: QuizChoice,\r\n  reorder: QuizReorder\r\n}\r\n\r\nexport function QuizMaker({ type, index, ...props }) {\r\n  return React.createElement(quizTypes[type], { index, ...props })\r\n}\r\n```\r\n\r\nThat would give me correct behavior and return 3 correct quizzes `quiz: Array(3)` but it doesn't inject the quiz's type that i want."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-27T03:50:36Z",
        "body": "maybe you could build a small utility function to do these."
      },
      {
        "user": "ghost",
        "created_at": "2019-12-27T04:12:21Z",
        "body": "yeah, thank you for taking time to answer.\r\n\r\ni have 2 different direction now: \r\none is watch all inputs' changes and send them to `zustand`'s store\r\ntwo is use nested form, send all children's changes to parent form."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-27T04:13:41Z",
        "body": "thanks for understanding @vuhg ‚ù§Ô∏è "
      }
    ]
  },
  {
    "number": 685,
    "title": "file input set dynamically is not picked up",
    "created_at": "2019-12-18T16:02:20Z",
    "closed_at": "2019-12-19T12:20:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/685",
    "body": "Here's a test file:\r\n\r\n```js\r\nimport React from 'react';\r\nimport { render, fireEvent, wait } from '@testing-library/react';\r\nimport Tmp from './Tmp';\r\n\r\nit('Uploading file should show its name', async () => {\r\n  const { getByLabelText, getByText, debug } = render(<Tmp />);\r\n  const inputEl = getByLabelText('Upload File');\r\n\r\n  const file = new File(['dummy content'], 'filename.png', {\r\n    type: 'image/png',\r\n  });\r\n\r\n  // throws error\r\n  // inputEl.files = [file]\r\n\r\n  Object.defineProperty(inputEl, 'files', {\r\n    value: [file],\r\n  });\r\n\r\n  fireEvent.change(inputEl);\r\n  fireEvent.click(getByText(/submit/i));\r\n  await wait();\r\n\r\n  getByText('Uploaded file name is filename.png');\r\n});\r\n```\r\n\r\nit works fine with a form without react-hook form. e.g.:\r\n```js\r\nimport React, { useState } from 'react';\r\n\r\nconst Tmp = () => {\r\n  const [fileName, setFileName] = useState('');\r\n\r\n  function handleFileUpload(e) {\r\n    e.preventDefault();\r\n    setFileName(document.getElementById('upload').files[0].name);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleFileUpload}>\r\n      <label htmlFor=\"upload\">Upload File</label>\r\n      <input name=\"upload\" id=\"upload\" type=\"file\" />\r\n      {fileName && <div>Uploaded file name is {fileName}</div>}\r\n      <button type=\"submit\">submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Tmp;\r\n```\r\n\r\nbut with the same form tweaked to use react-hook-form, submit handler is not called because file input is considered empty:\r\n```js \r\nimport React, { useState } from 'react';\r\n\r\nimport useForm from 'react-hook-form';\r\n\r\nconst Tmp = () => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const [fileName, setFileName] = useState('');\r\n\r\n  function handleFileUpload(data) {\r\n    setFileName(data.upload[0].name);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFileUpload)}>\r\n      {errors.upload && errors.upload.type === 'required' && <div>file missing</div>}\r\n      <label htmlFor=\"upload\">Upload File</label>\r\n      <input\r\n        name=\"upload\"\r\n        id=\"upload\"\r\n        type=\"file\"\r\n        ref={register({\r\n          required: true,\r\n        })}\r\n      />\r\n      {fileName && <div>Uploaded file name is {fileName}</div>}\r\n      <button type=\"submit\">submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Tmp;\r\n```\r\n\r\nAny idea what's going on there ?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/685/comments",
    "author": "mlarcher",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-18T23:44:57Z",
        "body": "can you try `fireEvent.input`?"
      },
      {
        "user": "mlarcher",
        "created_at": "2019-12-19T09:43:46Z",
        "body": "done, result is the same.\r\nadding a `console.log(inputEl.files[0].name)` in the test after the fireEvent yields the expected result in both cases, but react-hook-form doesn't see it"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-19T10:05:30Z",
        "body": "I don't have clue at this stage, i will probably take a deeper look at this after V4. if you can do some investigate would be great help too. "
      },
      {
        "user": "mlarcher",
        "created_at": "2019-12-19T12:19:57Z",
        "body": "I have some tests to run that depend on knowing what's in the file input, specifics are not relevant but this test I pasted is just here to figure out how to do so.\r\nI dug into the code myself and eventually figured out what the issue was : \r\nreact-hook-form depends on the html input *value* for the *required* validator, and setting the *files* content is not enough for that.\r\nusing \r\n```js \r\nObject.defineProperty(inputEl, 'value', {\r\n    value: file.name,\r\n  });\r\n```\r\nalong with\r\n```js\r\nObject.defineProperty(inputEl, 'files', { value: [file] });\r\n```\r\nwas needed to go past the validator.\r\n\r\nHere is the working test to use with the react-hook-version of the code described in my original post : \r\n```js\r\nimport React from 'react';\r\nimport { render, fireEvent, wait } from '@testing-library/react';\r\n\r\nimport Tmp from './Tmp';\r\n\r\nit('Uploading file should show its name', async () => {\r\n  const { getByLabelText, getByText, debug } = render(<Tmp />);\r\n  const inputEl = getByLabelText('Upload File');\r\n\r\n  const file = new File(['dummy content'], 'filename.png', {\r\n    type: 'image/png',\r\n  });\r\n\r\n  Object.defineProperty(inputEl, 'files', { value: [file] });\r\n  Object.defineProperty(inputEl, 'value', {\r\n    value: file.name,\r\n  });\r\n  fireEvent.change(inputEl);\r\n\r\n  fireEvent.click(getByText(/submit/i));\r\n\r\n  await wait();\r\n\r\n  getByText('Uploaded file name is filename.png');\r\n});\r\n```\r\n\r\nThanks for your support !"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-19T12:26:44Z",
        "body": "that's awesome! thanks @mlarcher "
      },
      {
        "user": "damianobarbati",
        "created_at": "2020-05-01T16:08:59Z",
        "body": "@mlarcher I didn't quite understand: I'm having the same problem. \r\n\r\nI have a dynamic field:\r\n```js\r\n{ !!url && <input type={'hidden'} name={'url'} value={url} ref={ref} /> }\r\n```\r\n\r\nOnce is rendered, if I submit the form `url` value is not present.\r\nIf I change another input in the form, then it appears in the form values.\r\n\r\nAny idea?"
      }
    ]
  },
  {
    "number": 665,
    "title": "setState set default values",
    "created_at": "2019-12-14T06:47:49Z",
    "closed_at": "2019-12-14T07:46:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/665",
    "body": "When I set another state on my form component it will set all field to default value, cuz they come from my component props .\r\n\r\n```javascript\r\n  const { handleSubmit, register, errors } = useForm({\r\n    defaultValues: {\r\n      title: props.address.title,\r\n      phone: props.address.phone,\r\n      address: props.address.address,\r\n    },\r\n  });\r\n  const [location, setLocation] = useState({});\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - Device: :Laptop\r\n - OS: windows\r\n - Browser chrome\r\n - Version  last\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/665/comments",
    "author": "sayjeyhi",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-14T06:51:48Z",
        "body": "This is not clear. please supply with codesandbox or better explanation on your issue."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-14T06:52:12Z",
        "body": "you probably should use `reset()`"
      },
      {
        "user": "sayjeyhi",
        "created_at": "2019-12-14T07:46:50Z",
        "body": "it was a mistake and thank you for great library ü§ì "
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-14T07:54:11Z",
        "body": "ha no worries :) glad you sort it out."
      },
      {
        "user": "ghost",
        "created_at": "2020-05-10T07:42:01Z",
        "body": "hey im facing the same issue , if default values are set by state ,  the form in not updating with default values, @bluebill1049 can u help"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-10T07:43:34Z",
        "body": "need richer context, I am not a mind reader... provide a codesandbox i can take a look."
      },
      {
        "user": "ghost",
        "created_at": "2020-05-10T07:47:52Z",
        "body": "import React  from 'react';\r\nimport { Card,CardBody, Button,Input,Form,Label,Row,Col,FormGroup} from 'reactstrap';\r\nimport { useForm ,Controller} from 'react-hook-form';\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport InvalidFeedback from 'components/InvalidFeedback'\r\n\r\nconst CreateFormComponent = (props) => {\r\n    \r\n\r\n    const { register, handleSubmit, errors,control  } = useForm({\r\n        defaultValues: {\r\n         ...props.defaultValues,\r\n        },\r\n      });\r\n      \r\n    const onSubmit = (data,e) => {\r\n        props.onSubmit(data)\r\n        e.target.reset();\r\n    }\r\n  \r\n  return (\r\n     \r\n          <Card>\r\n              <CardBody>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Row>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Title</Label>\r\n                    <Input type=\"text\" name=\"title\"  innerRef={register({required: true})} placeholder=\"title\"/>\r\n                    {errors.title && errors.title.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Date</Label>\r\n                    <Controller\r\n                        as={<ReactDatePicker minDate={new Date()} dateFormat=\"dd/MM/yyyy\"/>}\r\n                        control={control}\r\n                        valueName=\"selected\" \r\n                        onChange={([selected]) => selected}\r\n                        name=\"date\"\r\n                        className=\"form-control\"\r\n                        placeholderText=\"Select date\"\r\n                        rules={{ required: true }}\r\n                       />\r\n                        {errors.date && errors.date.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                  <Label>Status</Label>\r\n                        <Input type=\"select\" name=\"status\"  innerRef={register({required: true})}>\r\n                        <option value=\"active\">active</option>\r\n                            <option value=\"inactive\">inactive</option>\r\n                        </Input>\r\n\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Description</Label>\r\n                    <Input type=\"textarea\" name=\"description\"  innerRef={register({required: true})} placeholder=\"description\"/>\r\n                    {errors.description && errors.description.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    </Row>\r\n                    \r\n                     <center><Button color=\"primary\" className=\"submit-btn\" type=\"submit\">Create</Button></center>\r\n                </Form>\r\n               </CardBody>\r\n           </Card>\r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default CreateFormComponent;\r\n"
      },
      {
        "user": "ghost",
        "created_at": "2020-05-10T07:49:35Z",
        "body": "@bluebill1049  this is my code ,  where props.defaultValues are coming from a parent component"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-10T07:52:40Z",
        "body": "use `reset` at `useEffect`, if default values coming async"
      },
      {
        "user": "ghost",
        "created_at": "2020-05-10T08:14:07Z",
        "body": "thanks @bluebill1049 , it helped , thanks for quick response"
      }
    ]
  },
  {
    "number": 651,
    "title": "Callback function validate could accept the form values as second argument",
    "created_at": "2019-12-11T16:36:58Z",
    "closed_at": "2019-12-12T08:21:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/651",
    "body": "I have a form where validation of specific field is based on the value of another field in the form.\r\n\r\nI wanted to use the `validate` callback function but this function takes only the new value of the associated field as argument. I ended up doing some nasty overriding of the validate function in such a way that the `validate` function had access to the `getValues` function. Therefore, I was wondering what you though about giving access to the `validate` function the form values.\r\n\r\nAnother point could be to give access to the validate function an arbitrary ref.\r\n\r\n**Describe the solution you'd like**\r\nThe signature of the `validate` callback function could become \r\n```\r\n(newValue, formValues) => myValidateFunction(newValue, formValues)\r\n```\r\nor in the case with a custom ref\r\n```\r\n(newValue, { formValues, myCustomRef }) => myValidateFunction(newValue, formValues, myCustomRef)\r\n```\r\nWhere `formValues` contains the other (or old) values of the form and `myCustomRef` is an externally defined ref.\r\n\r\nThanks for the work on this package :).",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/651/comments",
    "author": "VGLoic",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-11T20:25:43Z",
        "body": "thanks, @VGLoic for your great suggestion. I did think about this when I was design the API, and it would be quite useful when you build inputs that are dependent on another. It's also the reason why i build `getValues` and `watch` API .\r\n\r\nHowever, `getValues()` and `watch()` are both not \"free\" to invoke, they do consume resource to generate the data, which means you validate function will essentially calling one of them each time even when you are not using them, hence the reason I am not baking them into the `validate` function. \r\n\r\n// validate: (value, allValues)  \r\n\r\nthis `allValues`  is basically calling `getValues()` each time. \r\n\r\nalternative you can still call validate inside, or make a `curry` function to carry the input value and `getValues` function. hence for now, maybe we can leave as it is util we figure out something is cheap to run."
      },
      {
        "user": "VGLoic",
        "created_at": "2019-12-12T08:21:46Z",
        "body": "I completely understand the arguments, thank you for the quick and detailed answer :)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-12T08:39:07Z",
        "body": "thank you for understanding @VGLoic "
      }
    ]
  },
  {
    "number": 611,
    "title": "When reValidateMode is onChange, doesn't revalidate after calling triggerValidation",
    "created_at": "2019-12-03T16:12:11Z",
    "closed_at": "2019-12-05T10:55:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/611",
    "body": "**Describe the bug**\r\nWhen `reValidateMode` is `'onChange'`, inputs aren't revalidated on change after `triggerValidation` is called.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. `useForm({ triggerValidation: 'onChange' })`\r\n2. Put some required inputs on the page\r\n3. Put a button on the page that on click does `triggerValidation()`\r\n4. Click the button without filling out any of the inputs\r\n5. Change an input so that it's not empty\r\n\r\n**Expected behavior**\r\n- The input is re-validated when it changes and becomes valid, just as it would if the validation would have been triggered by submitting the invalid form instead of manually calling `triggerValidation`",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/611/comments",
    "author": "bowernite",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-03T20:12:51Z",
        "body": "can you please provide a codesandbox for this issue? it would be much easier for me to test and verify."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-05T10:55:45Z",
        "body": "closing now, please supply a codesandbox, i will re-open and take look into it."
      }
    ]
  },
  {
    "number": 593,
    "title": "formState.touched is not updated when form fields are changed",
    "created_at": "2019-11-29T00:37:21Z",
    "closed_at": "2019-11-29T20:53:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/593",
    "body": "**Describe the bug**\r\nThe 'touched' array in my form's formState is always empty, even after i modify some of the inputs.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a hook form\r\n2. Access the formState returned by the hook.\r\n\r\n**Codesandbox link**\r\nInclude a codesandox will help us to investigate the issue quicker.\r\n\r\n**Expected behavior**\r\nI expected the array to list inputs that have been edited.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n - Browser vivaldi\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/593/comments",
    "author": "Smona",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-29T00:50:52Z",
        "body": "can you supply a codesandbox?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-29T20:53:12Z",
        "body": "going to close this as issue is not clear with an example, happy to re-open once more information provided."
      },
      {
        "user": "Smona",
        "created_at": "2019-12-12T02:56:00Z",
        "body": "I think i've figured it out. Once I set the `mode` to \"onChange\", it looks like touched fields are updating properly. I don't think anything is needed here but possibly a documentation update noting that touched fields aren't updated unless validation is triggered.\r\n\r\nThanks for the great library! Uncontrolled inputs ftw"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-12T03:09:53Z",
        "body": "Thanks @Smona i will update the doc accordingly "
      }
    ]
  },
  {
    "number": 562,
    "title": "Allow setting defaultValue via `register` method",
    "created_at": "2019-11-25T11:05:43Z",
    "closed_at": "2019-11-25T13:06:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/562",
    "body": "Imagine there is a custom input, MUI Select, that has 2 options 'Cats' and 'Dogs' and it doesn't have an empty option (like 'None') so you always have to provide some value.\r\nI believe a current solution is to provide a default value to `useForm` method and then retrieve the value using `watch` which works fine when the form is static.\r\n\r\nBut let's say we have a form where you can dynamically add/remove inputs, providing defaultValues to `useForm` in this case isn't convenient (and perhaps won't work?) since we can't know in advance how many Selects there will be.\r\nAs a possible workaround you could use `setValue` with a default value right after you register a custom field. But this makes a form dirty which is bad.\r\n\r\nAlso, even for static forms, I think it would be just nicer if we didn't have to provide default values for all fields in one place.\r\n\r\n**Solution**\r\nAn ability to provide default values for a specific field during its registration (this probably will override default value provided to `useForm` for this specific field if such was provided there):\r\n```js\r\nregister({ name: 'myField' }, { defaultValue: 'Bob' })\r\n```\r\nThis feels intuitive to me and seems like a logical thing to allow.\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/562/comments",
    "author": "GProst",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-25T11:12:07Z",
        "body": "hey @GProst you can now use `react-hook-form-input` and combined with `defaultValues` for controlled components, or just use `defaultValues` for uncontrolled."
      },
      {
        "user": "GProst",
        "created_at": "2019-11-25T11:16:01Z",
        "body": "@bluebill1049 yeah, I wanted to use it but I don't see `defaultValues` props in readme. How do I provide it to MUI Select for example.\r\n\r\nBut don't you think if we could provide default value to `register` method it would be more universal solution and wouldn't require to install `react-hook-form-input` library?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-25T11:18:53Z",
        "body": "> @bluebill1049 yeah, I wanted to use it but I don't see `defaultValues` props in readme. How do I provide it to MUI Select for example.\r\n> `defaultValues` attribute for uncontrolled inputs makes sense.\r\n```\r\nuseForm({\r\n defaultValues: {\r\n   test: 'data'\r\n }\r\n})\r\n```"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-25T11:19:53Z",
        "body": "> But don't you think if we could provide default value to `register` method it would be more universal solution and wouldn't require to install `react-hook-form-input` library?\r\n\r\nyea, but this lib focus is on uncontrolled component, building react-hook-form-input was try to closer the gap between controlled components such as MUI, react-select and Antd. it wasn't framework specific."
      },
      {
        "user": "GProst",
        "created_at": "2019-11-25T11:26:11Z",
        "body": "@bluebill1049 okay, I got you.\r\nBut my problem is that I don't know the name of the field initially.\r\nLet's say I have fields structure like this:\r\n```js\r\n{\r\n  animals: [\r\n    {name: 'Scratchy', type: 'Cat'},\r\n    {name: 'Scrappy', type: 'Dog'}\r\n  ]\r\n}\r\n```\r\nAnd I can add as many animals in the form as I want (dynamically). How do I set default values for fields which indexes I don't know yet? Provide default values for 1000 fields in advance to be safe?\r\nBut this tricky workaround won't solve it if I structure fields based on their local unique ID (I can't know it in advance - and this is how I actually do it in my project):\r\n```js\r\n{\r\n  animals: {\r\n    \"setr341f\": {name: 'Scratchy', type: 'Cat'},\r\n    \"5lgf45sa\": {name: 'Scrappy', type: 'Dog'}\r\n  }\r\n}\r\n```"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-25T11:29:13Z",
        "body": "@GProst can you use `defaultValue` during render?"
      },
      {
        "user": "GProst",
        "created_at": "2019-11-25T11:32:18Z",
        "body": "@bluebill1049 I currently use `watch` for each field and if it's `undefined` I use a default value.\r\nBut I don't think I can use this approach with `react-hook-form-input`, at least currently.\r\nSo I thought that providing `defaultValue` to `register` will make my code cleaner and my life better üòÑ"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-25T11:35:56Z",
        "body": "hey @GProst as much as I want to make your life easier, I think I will leave second argument just for validation for API consistency (simple API). a bit tired today, you want to supply codesandbox of your issue. I will spend sometime tmr for an alternative solution. üëç "
      },
      {
        "user": "GProst",
        "created_at": "2019-11-25T11:37:16Z",
        "body": "@bluebill1049 cool, will do üëç"
      },
      {
        "user": "GProst",
        "created_at": "2019-11-25T13:06:21Z",
        "body": "Okay, while I was preparing the Sandbox example I realized that the problem I have won't be solved by providing default value`register` method since at initial render it will be `undefined` anyway. And the problem is in `watch` behavior. I'll open another issue"
      }
    ]
  },
  {
    "number": 541,
    "title": "`name` with nested field notation consistency",
    "created_at": "2019-11-20T13:53:45Z",
    "closed_at": "2019-11-21T06:29:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/541",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIf `name` prop is `key.abc`, it sets `{ key: { abc: '' } }`.\r\nIf `name` prop is `key.123`, it creates a large array with `123` empty elements and sets the value on `123` index.\r\n\r\nSo if the nested field's key is a huge number, it ends up creating a huge array.\r\n\r\n**Describe the solution you'd like**\r\n\r\nConsistent behavior:\r\n\r\n`key.abc` will set `{ key: { 123: '' } }`\r\n\r\n`key.123` will set `{ key: { 123: '' } }`\r\n\r\nand, for creating array:\r\n\r\n`key[123]` notation should be used instead.  \r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/541/comments",
    "author": "MunifTanjim",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-20T21:03:42Z",
        "body": "@MunifTanjim maybe we can avoid start with a number? I am happy to drop a note about this on the website."
      },
      {
        "user": "MunifTanjim",
        "created_at": "2019-11-21T04:23:47Z",
        "body": "I'm using this to mark items as selected. Each item has a checkbox, selecting it sets `selected.ITEM_ID` to `true`. But the `ITEM_ID`s are very large integers. So, I don't feel comfortable with `react-hook-form` creating a large array for that.\r\n\r\nThe workaround I'm using is by adding a minus in front of the `ITEM_ID`. So setting `selected.-999` sets the key (`-999`) to the object (`selected`). And later I have to remove that minus for getting the selected `ITEM_ID`s.\r\n\r\n> maybe we can avoid start with a number\r\n\r\nAs you can see, in this case, to avoid start with a number is not really possible (without some crazy workaround like I described above).\r\n\r\nAnyway thanks for creating this wonderful library :tada: :smile: "
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-21T05:08:15Z",
        "body": "thank you @MunifTanjim very much for your kind words! my pleasure to give back to the community :) dame I will give another try on the input name, last time almost killed me with the regex. Hopefully I can get it to work, otherwise, we may have to leave with the hack for now."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-21T06:29:51Z",
        "body": "I tried again, it's too tricky to get it right and it make thing much easier with just detect number as an array... let's keep as what we got, for now, maybe someone can help on this or one day I can suddenly make it work üôè "
      }
    ]
  },
  {
    "number": 536,
    "title": "Some definitions are not exported",
    "created_at": "2019-11-19T12:13:45Z",
    "closed_at": "2019-11-20T05:40:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/536",
    "body": "My project needs definitions like `ValidationOptions` „ÄÅ`FieldError` and so on, but they are not exported",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/536/comments",
    "author": "yi-tuan",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-19T20:35:55Z",
        "body": "This probably one of the mistakes that I did during the API design. I should have exported everything out instead make life easier with useForm... (import useForm from '...') I am planning for the next major change to export everything.\r\n\r\ninstead of this: \r\n\r\n```\r\nexport { default } from './useForm';\r\nexport { FormContext, useFormContext } from './useFormContext';\r\n```\r\nto\r\n```\r\nexport * from './useForm';\r\nexport * from './useFormContext';\r\nexport * from './types';\r\n```\r\n\r\nwell, this is going to be a breaking change, unless you have a better solution for now. otherwise, we have to live with this for awhile until we release a major version update."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-20T05:40:37Z",
        "body": "hey @yi-tuan I am closing this issue, for now, we will address this in v4, otherwise, let me know if you have any alternative solution for the current version."
      }
    ]
  },
  {
    "number": 530,
    "title": "`minLength` validation triggers when empty and not required",
    "created_at": "2019-11-18T19:23:57Z",
    "closed_at": "2019-11-18T20:10:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/530",
    "body": "I have an input that's not required. But if it has a value, the length must be at least 20 characters. \r\n\r\nGoal: If empty, submitting the form without it should succeed. \r\nBehavior: It asks for a min length of 20 when the field is not required.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/530/comments",
    "author": "jgb-solutions",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-18T19:58:39Z",
        "body": "@jgb-solutions, please try to upgrade to the latest version, also please consider uploading a codesandboa by following the issue template üëç "
      },
      {
        "user": "jgb-solutions",
        "created_at": "2019-11-18T20:03:37Z",
        "body": "ok thanks! I'll try upgrading it and let you know how it goes."
      },
      {
        "user": "jgb-solutions",
        "created_at": "2019-11-18T20:09:00Z",
        "body": "upgrading from `3.23.18` to `3.28.1` actually fixes it. Thanks."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-18T20:10:40Z",
        "body": "great :) closing "
      }
    ]
  },
  {
    "number": 499,
    "title": "validation inconsistencies between `onSubmit` and `triggerValidation`",
    "created_at": "2019-11-13T16:37:53Z",
    "closed_at": "2019-11-14T07:52:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/499",
    "body": "Given the following schema:\r\n\r\n```javascript\r\nconst validationSchema = yup.object().shape({\r\n  // ... fields truncated\r\n  treatments: yup.array(\r\n    yup.object().shape({\r\n      id: yup.string(),\r\n      productId: yup.string().required('required'),\r\n      quantity: yup.number().required('required'),\r\n      calibrationDate: yup.date().required('required'),\r\n      calibrationSheet: yup.boolean().required('required'),\r\n      freeReason: yup.string(),\r\n      lineItemNumber: yup.number().required('required'),\r\n      _destroy: yup.boolean(),\r\n    })\r\n  )\r\n})\r\n```\r\n\r\nand registering the treatments manually, i.e. `register({ name: 'treatments' })`\r\n\r\nWhen submitting a form normally (i.e. via submit button) the validation for the treatment fields works as expected.\r\n\r\nHowever, using `await triggerValidation()` does not validate the nested fields, and the `errors` object does not contain a `treatments` key.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/499/comments",
    "author": "chrise86",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-13T20:32:24Z",
        "body": "could you submit a codesandbox for us to reproduce?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-14T07:52:31Z",
        "body": "going to close now, feel free to re-open once we get a codesandbox to reproduce the problem. thanks"
      }
    ]
  },
  {
    "number": 458,
    "title": "Support default error message for required errors",
    "created_at": "2019-11-04T16:20:50Z",
    "closed_at": "2019-11-05T10:16:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/458",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nFor simple forms where the required error message is the same (i.e. \"This field is required\"), it would be nice to default this error message so that you can just use `ref={register({ required: true })` in all of these cases, instead of `ref={register({ required: 'This field is required' })`` or `ref={register({ required: REQUIRED_ERR_MESSAGE })}`\r\n\r\n**Describe the solution you'd like**\r\nSome API for defaulting error messages (or at least required error messages). Maybe something like `useForm({ errorMessages: { required: \"This field is required }})`? Not sure.\r\n\r\nThen a user could override the default wherever necessary.\r\n\r\n**Describe alternatives you've considered**\r\nNoted in first section above.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/458/comments",
    "author": "bowernite",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-04T21:02:38Z",
        "body": "good suggestion @babramczyk, for now, I think we will keep what we got. One of the important goals for react hook form is to keep API simple and primitive. I don't want to introduce multiple ways of doing an error message, but if you think it's not friendly enough, I would suggest doing a constant or some kind of utility function."
      },
      {
        "user": "bowernite",
        "created_at": "2019-11-05T01:31:01Z",
        "body": "No worries.\r\n\r\nCan you give me insight on the motivation for a primitive API, vs a configurable one?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-05T01:39:58Z",
        "body": "I think primitive API is more scalable in my own opinion, it allows you to build things on top of it quite easier, while configurable ones it's fixed and likely to introduce breaking changes (at least those r what I learned so far) I could be wrong as well..."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-05T10:16:05Z",
        "body": "hope above answers your question for now. feel free to leave more questions too "
      },
      {
        "user": "mcabrams",
        "created_at": "2020-05-29T18:05:04Z",
        "body": "Any recommendations on how to effectively achieve the result @babramczyk is seeking - even if the implementation requires a work-around right now?"
      },
      {
        "user": "patcon",
        "created_at": "2022-07-28T20:43:38Z",
        "body": "Could pre-process the `rules` object. We do internationalization which requires another hook, and so this made sense to be a hook for us, but you could just use a non-hook utility function similarly :)\r\n\r\n```js\r\n/**\r\n * One-off hook to add default messages to validation rule object.\r\n *\r\n * @param rules initial rule object\r\n * @returns modified rule object\r\n */\r\nexport const useRulesWithDefaultMessages = (rules) => {\r\n  const { formatMessage } = useIntl();\r\n  const rulesWithDefaults = { ...rules };\r\n\r\n  if (rules.required === true) {\r\n    rulesWithDefaults.required = formatMessage({\r\n      defaultMessage: \"This field is required.\",\r\n      description: \"The default validation message when a field is required\",\r\n    });\r\n  }\r\n\r\n  return rulesWithDefaults;\r\n};\r\n```"
      },
      {
        "user": "anilanar",
        "created_at": "2022-10-03T19:11:14Z",
        "body": "Example proper solution (`useIntl` is a our own custom hook that provides translations):\r\n\r\n```ts\r\nimport {\r\n  FieldValues,\r\n  useForm as useForm_,\r\n  UseFormProps,\r\n  UseFormRegister,\r\n  UseFormReturn,\r\n  ValidateResult,\r\n  ValidationValueMessage,\r\n} from 'react-hook-form';\r\n\r\nexport const useForm = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TContext extends object = object,\r\n>(\r\n  props?: UseFormProps<TFieldValues, TContext>,\r\n): UseFormReturn<TFieldValues, TContext> => {\r\n  const intl = useIntl();\r\n  const { register: register_, ...rest } = useForm_(props);\r\n\r\n  const register: UseFormRegister<TFieldValues> = (name, options) =>\r\n    register_(name, {\r\n      ...options,\r\n      required: options?.required === true ? intl.formatMessage('foobar required') : options?.required,\r\n      minLength:\r\n        typeof options?.minLength === 'number'\r\n          ? intl.formatMessage(`foobar ${options.minLength`)\r\n          : options?.minLength,\r\n      maxLength:\r\n        typeof options?.maxLength === 'number'\r\n          ? intl.formatMessage(`foobar ${options.maxLength`)\r\n          : options?.maxLength,\r\n      min: typeof options?.min === 'number' ? intl.formatMessage(`foobar ${options.min}`) : options?.min,\r\n      max: typeof options?.max === 'number' ? intl.formatMessage(`foobar ${options.max}`) : options?.max,\r\n    });\r\n\r\n  return { register, ...rest };\r\n};\r\n```"
      }
    ]
  },
  {
    "number": 455,
    "title": "change the touched array more accessible",
    "created_at": "2019-11-04T14:28:09Z",
    "closed_at": "2019-11-05T07:53:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/455",
    "body": "instead of this \r\n`touched: [\r\n    \"first_name:true\",\r\n    \"first_name:true\",\r\n  ],\r\n`\r\nwhat about something like this\r\n`\r\ntouched: {\r\n    first_name:true,\r\n    last_name:true\r\n }\r\n`\r\ni think its more accessible\r\n`\r\n{errors.firstName && touched.firstName ? (\r\n            <div>{errors.firstName}</div>\r\n ) : null}\r\n`",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/455/comments",
    "author": "ibnumusyaffa",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-11-04T20:40:05Z",
        "body": "a good suggestion I will note this down for future improvement. \r\n\r\nor you can do `touched.inclues('first_name:true')`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-11-05T07:53:06Z",
        "body": "I have added into the todo list, this will be in the next major version consider it's breaking change."
      }
    ]
  },
  {
    "number": 379,
    "title": "Should `handleSubmit` add defaultValues that were not registered?",
    "created_at": "2019-10-16T22:23:43Z",
    "closed_at": "2019-10-16T22:44:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/379",
    "body": "I'm currently using `defaultValues` as a quick way to throw together some data that I want on the submission but not actually in the form. I was a bit surprised when it wasn't there.\r\n\r\nI looked through the code and it appears we are only putting data in for \"registered fields\". My question is should we just pass through any data for \"non-registered fields\" if it exists?\r\n\r\n@bluebill1049 @barrymay ",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/379/comments",
    "author": "stramel",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-10-16T22:32:03Z",
        "body": "I think I prefer input to get registered."
      },
      {
        "user": "stramel",
        "created_at": "2019-10-16T22:35:40Z",
        "body": "My example is \r\n\r\n```\r\n// Prop coming in\r\nconst myDefaultValues = {\r\n  token: 'a.b.c',\r\n  username: 'stramel'\r\n}\r\n\r\nuseForm({\r\n  defaultValues: myDefaultValues\r\n})\r\n```\r\n\r\n```\r\n<form onSubmit={handleSubmit(onSubmitCallback)}>\r\n  <input name=\"code\" />\r\n</form>\r\n```\r\n\r\nI expected `onSubmitCallback` to be called with:\r\n\r\n\r\n```\r\n{\r\n  code: '123456',\r\n  token: 'a.b.c',\r\n  username: 'stramel'\r\n}\r\n```\r\n\r\nInstead now, I will have to manually aggregate it\r\n\r\n```\r\n<form onSubmit={handleSubmit((data) => onSubmitCallback({ ...myDefaultValues, ...data})) >\r\n```"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-10-16T22:40:03Z",
        "body": "If data coming from external, I think it make sense to manually aggregate them. \r\nI think `defaultValues` service its purpose for inputs correctly right now."
      }
    ]
  },
  {
    "number": 314,
    "title": "`watch` on nested fields should unfold into an object.",
    "created_at": "2019-09-17T20:39:53Z",
    "closed_at": "2019-09-19T05:47:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/314",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI am using `useForm`, which gives me `watch`. I have a field which represents a nested value.\r\n\r\n```\r\n<form onSubmit={handleSubmit(onSubmit)}>\r\n  <input type=\"color\" name=\"colors.primary\" ref={register({ name: 'colors.primary' })} />\r\n  <input type=\"color\" name=\"colors.secondary\" ref={register({ name: 'colors.secondary'})} />\r\n</form>\r\n```\r\n\r\nWhen I submit, it serialized as follows:\r\n```\r\n{\r\n  colors: {\r\n    primary: '#003366',\r\n    secondary: '#ffffff',\r\n  }\r\n}\r\n```\r\n\r\nHowever, when I use `watch`, it gives a different result\r\n\r\n```\r\nconst fields = watch(['colors.primary', 'colors.secondary']);\r\n\r\n  React.useEffect(() => {\r\n    console.log(fields);\r\n  }, [fields]);\r\n```\r\nThe result of the console.log is like this:\r\n```\r\n{colors.primary: undefined, colors.secondary: undefined}\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIdeally, I would want the above example with `watch` to serialize in the same way the submitted form would\r\n\r\n**Describe alternatives you've considered**\r\nProject is still very workable without this. Just a nice-to-have\r\n\r\n**Additional context**\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/314/comments",
    "author": "AlexFrazer",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-09-17T21:38:40Z",
        "body": "hey @AlexFrazer you can use `watch('colors')`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-19T05:47:25Z",
        "body": "i am closing this issue, feel free to ask a question if this above solution is not working for you."
      }
    ]
  },
  {
    "number": 301,
    "title": "when I have a request api in useEffect after api response the form will reset all form content",
    "created_at": "2019-09-09T00:06:12Z",
    "closed_at": "2019-09-11T03:02:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/301",
    "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nwhen I have a request api in useEffect after api response the form will auto reset all form content(I haven't use reset method)\r\n\r\n**Expected behavior**\r\nthe form not auto reset form content\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: mac \r\n - Browser chrome\r\n - Version  76.0.3809.132\r\n\r\n**Smartphone (please complete the following information):**\r\n - Device: [e.g. iPhone6]\r\n - OS: [e.g. iOS8.1]\r\n - Browser [e.g. stock browser, safari]\r\n - Version [e.g. 22]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/301/comments",
    "author": "myside1",
    "comments": [
      {
        "user": "stramel",
        "created_at": "2019-09-09T00:07:41Z",
        "body": "@silenceM \tCan you provide a codesandbox or some code that we can look at to explore the issue. There is no reason that the form should reset based on an async call in a `useEffect`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-11T03:02:09Z",
        "body": "Feel free to reopen once u have more information around issue :)"
      }
    ]
  },
  {
    "number": 291,
    "title": "Optionally trigger onChange event when setting value through ref",
    "created_at": "2019-09-04T07:19:40Z",
    "closed_at": "2019-09-04T08:47:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/291",
    "body": "I read a couple of this repo issue but I can't quite find my use case - I can't quite know if I am asking a stupid question or if it's a feature that doesn't exists.\r\n\r\nI have a special input that has some cosmetic changes depending on the value : it's a material-ui-like input with schrinking placeholder. the ref is forwarded to the real input inside.\r\n\r\nThe input can be controlled or not, but even when not, we rely on a local state that listen to the onChange function of the input to determine if there is a value or not in the field.\r\n\r\nNow, using this awesome library, and trying to use either `setValue` of some default values for the form, my inputs are properly changed through REF but the placeholder won't schrink as changing the input value is not reflected on the styled pseudo input's state.\r\n\r\nMy question is : in this case, do we have a way to trigger the `onChange` event when the library touches the input value ? Is there a workaround or a good practice to address this ?\r\n\r\nCheers, and thanks a lot for the great work.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/291/comments",
    "author": "olup",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T07:34:56Z",
        "body": "Any chance you can supply a codesandbox for the issue?"
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T07:40:14Z",
        "body": "It's going to be difficult. I'll try later on today.\r\n\r\nHowever it boils down to how can the state of my functional component (`MaterialInput`) track the value of it's internal (real) input when the `form-hook` lib is updating it's value throught REF (so updating directly the input value inside my functional component without notifying the latter)\r\n\r\nThis is as much a React general interrogation than one for this libraey.\r\n\r\nReact answer would be : trigger manually the `onChange` event every time you update the input's ref's value so that react would be notified of the value change."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T07:49:27Z",
        "body": "React hook form focus on uncontrolled component as you would probably know. But if u need to trigger setState is also possible via ‚Äòwatch‚Äô\r\n\r\nYour component can have a prop like value=‚Äúwatch(‚Äòvalue‚Äô)‚Äù"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T07:50:16Z",
        "body": "I am on a bus sorry reply with code is difficult :( hope my above answer make sense "
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T07:53:56Z",
        "body": "It's perfect, and I understand very well your answer. In the case you mention, should I then not `register()` the input's ref, but use `onChange` with `setValue()` ?\r\n\r\nI just tried it, it seems to work fine in either cases. However of course refresh rate with `watch` becomes very slow"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:00:12Z",
        "body": "@olup I couldn‚Äôt see ur code, but I think u most likely need a custom ‚Äòregister‚Äô with validation rules and using setValue. Note u can even trigger validation with set value as well by pass third argument as true. :p"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:03:12Z",
        "body": "Oh u still need register your input but probably don‚Äôt need the ref \r\n\r\nU can do that during useEffect :)"
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T08:12:49Z",
        "body": "That's what I thought. However performance seems too bad that way. I am trying to set the initial input differently or to listen to value change on the html input by registering to an event."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:17:03Z",
        "body": "What do u mean performance is bad? Do u mean it‚Äôs becoming a controlled component?"
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T08:21:30Z",
        "body": "Yes, it is becoming a controlled element, but that's the goal. But in my case the controlled element is not performing that well. Quick type is okay but keeping key down lags a lot. So, as I just need this feature to pre-populate the form for now, I am trying to use an `initialValue` implementation. However, I am still daydreaming about a clean implementation, just registering the form and passing initial datas, and have my functionnal component check input's value when it changes."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:28:14Z",
        "body": "again it's hard to judge without seeing your code :) but I think idealy you just want an initial value (doing your animation) then let react hook form to collect the value for submit "
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T08:37:05Z",
        "body": "Ideally, the library would have an option to trigger the `change` or `input` event when it manipulates the input - what do you think ?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:38:04Z",
        "body": "I don't think that is a good idea."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T08:39:06Z",
        "body": "but I am curious to know the reason behind. if there are a valid case or scenario, I will consider amending for the better"
      },
      {
        "user": "olup",
        "created_at": "2019-09-04T08:47:33Z",
        "body": "I was just thinking of those cases when you indeed have some logic that needs to know about the input being changed. But actually it can be achieved equally by using `watch` and `setValue`, and it makes it clearer so my proposition is probably not a good idea. "
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-04T09:28:24Z",
        "body": "thanks for understanding @olup One of my primary goals is DX, I don't want to introduce complicated API to us, but I am glad you understand :) happy coding"
      }
    ]
  },
  {
    "number": 280,
    "title": "Get form values without register",
    "created_at": "2019-09-01T01:02:22Z",
    "closed_at": "2019-09-02T09:56:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/280",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt wasn't really obvious in doc that I must use `register` on every input to get its value on submit. This lib is really great (and your documentation page is beautiful) but I actually don't need any other functionality, just to handle submit and process input values.\r\n// Ok, I just noticed \"Get started\" page and there it's super obvious that every field must be registered, my bad :/ \r\n\r\n**Describe the solution you'd like**\r\nWould be great if there was an option to prefer getting value on submit automatically from `e.target.elements`. Something like `submitNotRegisteredFields?: boolean`\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/280/comments",
    "author": "BorisTB",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-09-01T01:35:59Z",
        "body": "Hi @BorisTB, thanks for your kind words :) Yes, good suggestion. This was one of the features also suggested by @stramel. However, there is some flaw around this feature, this is not going to work smoothly with some of the custom components which have been created by the community, such as `react-select`. it's hard to assume what to grab within the form tag. hence, register an input/select is a safer option. hope this makes sense :)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-01T21:47:54Z",
        "body": "hey @BorisTB, just a quick follow up, is the above comment make sense before I close this issue?"
      },
      {
        "user": "BorisTB",
        "created_at": "2019-09-02T09:04:59Z",
        "body": "Absolutely, thank you for explanation, I understand that there would be tons of bug reports even if you'd warn people they have to use register with custom components."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-09-02T09:56:16Z",
        "body": "Cool going to close this issue for now :)"
      }
    ]
  },
  {
    "number": 265,
    "title": "per input validation mode",
    "created_at": "2019-08-27T01:56:36Z",
    "closed_at": "2019-08-28T10:47:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/265",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI want to trigger validation onChange to update isValid when checking checkbox or selecting a value in dropdown. But in general, ie text inputs I only want to validate onBlur, which is the normal case that i've provide to `useForm`.\r\n\r\n**Describe the solution you'd like**\r\nI imagine some kind of interface where we do `register({mode: onChange })` to input\r\n\r\n**Describe alternatives you've considered**\r\nI can possibly trigger onBlur programmatically onChange to update formState\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/265/comments",
    "author": "sktt",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-27T02:07:13Z",
        "body": "hey @sktt I did consider about such API before, but I didn't go for it. It does introduce more complicity to the code base and API. I would recommend using `onBlur` with `setValue('name', 'value', true)`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-28T10:47:55Z",
        "body": "hey @sktt , per input validation mode should occur at `onChange` `onBlur` level, I am going to close this issue for now for the sake of keeping API simple :) feel free to reopen or leave comments if you still have a concern or better suggestion/solution."
      }
    ]
  },
  {
    "number": 239,
    "title": "Validating Zero",
    "created_at": "2019-08-20T11:01:08Z",
    "closed_at": "2019-08-21T22:03:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/239",
    "body": "## Required validation triggers if my select returns number 0.\r\n\r\nSetting custom validation rules don't trigger when using setValue if I pass it number 0\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'myProp'\r\n            },\r\n            {\r\n                 required: 'whoops'\r\n             }\r\n        );\r\n```\r\n\r\nThis triggers if `setValue('myProp', 0, true);`\r\n\r\nAdditionally\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'myProp'\r\n            },\r\n            {\r\n                 required: 'whoops',\r\n                 validate: (id: number) => {\r\n                       return (id > -1 && id !== 999) || 'whoops';\r\n                  }\r\n             }\r\n        );\r\n```\r\n\r\n The validate function isn't even called if I use `setValue('myProp', 0, true);`\r\n\r\nI would expect the validate function to run every time there is an update.\r\nAlso, how should 0 values be used? Selects might legitimately return the number 0. \r\n\r\nThe ideal solution would be a property which allows 0 as valid?\r\n\r\nA quick fix is to cast everything as strings :(\r\n\r\nAny help is appreciated :)\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/239/comments",
    "author": "sidonaldson",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-20T11:11:17Z",
        "body": "Thanks for the detailed issue report. \r\n\r\nFor your use case, I would recommend using validate without `required`.\r\n\r\nI followed standard HTML validation for required where the input value is a string.\r\n\r\n`<input name=\"test\" value=\"0\" />`\r\n\r\nbut we can make this work with `validate`\r\n\r\n```\r\n{\r\n  validate: (value) => {\r\n    if (Number.isNaN(value)) return 'Number please';\r\n    if (id > -1 && id !== 999) return 'whoops';\r\n  }\r\n} \r\n```\r\n"
      },
      {
        "user": "sidonaldson",
        "created_at": "2019-08-20T14:32:08Z",
        "body": "Thank you for the super fast response Bill!\r\n\r\nAs i'm using MUI and the select seems to need an empty string to be 'clean' i'm setting a defaultValue of an empty string.\r\n\r\n```\r\nconst { register, unregister, setValue, watch, errors, handleSubmit } = useForm<FormState>({\r\n        defaultValues: {\r\n            InputName: '',\r\n        }\r\n    });\r\n```\r\n\r\nTherefore for me the validation was super simple - removing `required` was the key.\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'InputName'\r\n            },\r\n            {\r\n                validate: (id: number | string) => {\r\n                   return id !== '' || 'whoops';\r\n            }\r\n);\r\n```\r\n\r\nIs this covered in the docs and I missed it? Happy to do a PR otherwise"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-20T21:05:25Z",
        "body": "let me double-check the website and let you know, would love to see you in the contribution list! :)"
      },
      {
        "user": "stramel",
        "created_at": "2019-08-20T21:34:01Z",
        "body": "Sorry üòÖ don't know how that happened"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-20T21:43:50Z",
        "body": "hahah"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-21T22:03:44Z",
        "body": "I am going to close this issue for now, i will let you know what to update on documentation later on if you still interested :) üëç "
      }
    ]
  },
  {
    "number": 189,
    "title": "How to get checkbox checked status not value?",
    "created_at": "2019-08-06T11:50:48Z",
    "closed_at": "2019-08-07T09:32:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/189",
    "body": "It seems like when using checkboxes it defaults to giving you the `e.target.value` rather than `e.target.checked`. How can I get the checked status rather than the value?\r\n\r\nThanks in advance.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/189/comments",
    "author": "Kelbie",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T11:58:12Z",
        "body": "Hmmm, I have encountered this issue three times now. \r\n\r\nThe difficulty that I am having right now is if you defined a value for checkbox, should you get its `value` or `checked`? if you want only `checked` then what about the user who wants the `value`?\r\n\r\nhence I decide to have the following code (in the lib):\r\n\r\n`if (isCheckBox(type)) return checked ? value || checked : false;`\r\n\r\nif checked you will always get the `value`. for unchecked return `false`. if you only want to know checked or not, you can convert the `value` to boolean.\r\n\r\nhope this makes sense, and happy for the good alternative suggestion."
      },
      {
        "user": "Kelbie",
        "created_at": "2019-08-06T12:12:50Z",
        "body": "I noticed I was getting either `on` or `false` which I thought was an issue on my end but it sounds like its excepted behavior based on what you said. I want it to return `true` and `false` but the problem is that if you define the value to be true in the html its a string not a boolean which is mildly inconvenient.\r\n\r\nIs there a way to specify in the `register` something like:\r\n\r\n    register({checkbox: \"checked\"}) // or \r\n    register({checkbox: \"value\"}) \r\n\r\nThen in `react-hook-form` do:\r\n\r\n    if (isCheckBox(type)) return e.target[checkbox]"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T12:19:34Z",
        "body": "what about do this `!!value` if all you want is true or false"
      },
      {
        "user": "Kelbie",
        "created_at": "2019-08-06T12:27:18Z",
        "body": "I could but that would require doing that for all my checkboxes in the `onSubmit` callback which doesn't seem like the right place to do it. In the meantime I'll do that but I suggest coming up with some way to specify what you want in the `register`."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T21:37:15Z",
        "body": "i think i have found the solution:\r\n\r\n3.21.8-beta.1\r\n\r\nplease help test above beta version"
      },
      {
        "user": "Kelbie",
        "created_at": "2019-08-07T08:46:44Z",
        "body": "Just installed it. Seems to be working for me.\r\n\r\nI also noticed another potential bug but I'm not sure. Is it expected behavior for nothing to be returned in the `handleSubmit` when using an checkbox input and `ref={register()}`? It only returns the result if you use `register` or `register({})` (with the object)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-07T09:32:32Z",
        "body": "Thanks for the testing. that's not a bug `ref` takes a callback, going to publish the version and close this issue."
      },
      {
        "user": "Zik42",
        "created_at": "2019-12-22T17:09:54Z",
        "body": "@bluebill1049  onSubmit returns value instead of checked anyway. ... I found it comes when I use validation schema, it changes values from boolean to string"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-22T21:12:17Z",
        "body": "@Zik42 it depends if you have a value attribute in the checkbox."
      }
    ]
  },
  {
    "number": 188,
    "title": "react native support?",
    "created_at": "2019-08-06T10:29:11Z",
    "closed_at": "2019-08-06T23:57:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/188",
    "body": "react native support?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/188/comments",
    "author": "arpecop",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T10:36:00Z",
        "body": "I haven't got a chance to look into native just yet, but it's on the road map."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T23:57:02Z",
        "body": "going to close this issue for now, we will come back to native once web is solid."
      }
    ]
  },
  {
    "number": 184,
    "title": "Add .getProps() to useForm",
    "created_at": "2019-08-05T02:46:56Z",
    "closed_at": "2019-08-05T07:32:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/184",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI want easy access to the `defaultValues` I've passed in `useForm`'s props\r\n\r\n**Describe the solution you'd like**\r\nA new `.getProps()` method:\r\n```tsx\r\nconst form = useForm({\r\n  mode: 'onBlur'\r\n  defaultValues: { foo: 'bar' }\r\n})\r\n\r\n// what I want:\r\nform.getProps().defaultValues; // { foo: 'bar' }\r\nform.getProps().mode; // 'onBlur'\r\n// and so on\r\n```",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/184/comments",
    "author": "kaleabmelkie",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-05T02:56:39Z",
        "body": "Hi @kaleabmelkie \r\n\r\nCould you just hoist your default values to the top? actually the whole config\r\n\r\n```\r\nconst config = {\r\n  mode: 'onBlur'\r\n  defaultValues: { foo: 'bar' }\r\n};\r\n\r\nconst form = useForm(config)\r\n```"
      },
      {
        "user": "kaleabmelkie",
        "created_at": "2019-08-05T02:59:16Z",
        "body": "Yes, I have considered doing that. I just thought it would be cleaner to have something like .getProps, esp. in typescript projects.\r\n\r\nGenerally, I would have to do something like this in a .tsx file:\r\n\r\n```tsx\r\n// import Props from somewhere\r\n\r\nconst config: Props<IMyDataType> = {\r\n  mode: 'onBlur'\r\n  defaultValues: { foo: 'bar' }\r\n};\r\n\r\nconst form = useForm<IMyDataType>(config)\r\n\r\nconfig.defaultValues\r\n```\r\n\r\nInstead, it could be:\r\n```tsx\r\nconst form = useForm<IMyDataType>({\r\n  mode: 'onBlur'\r\n  defaultValues: { foo: 'bar' }\r\n})\r\n\r\nform.getProps().defaultValues\r\n```"
      },
      {
        "user": "kaleabmelkie",
        "created_at": "2019-08-05T03:01:42Z",
        "body": "I took the liberty to submit a pull request for this (#185) ... I hope it's okay."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-05T03:05:55Z",
        "body": "Thanks for the PR. I tempt to reduce more methods if I can in order to keep the API list small. I don't see much value on this `getProps()` method at this stage. but let's get the other two core contributors' thoughts as well @barrymay @stramel : what do you guys think of this feature?"
      },
      {
        "user": "kaleabmelkie",
        "created_at": "2019-08-05T03:16:06Z",
        "body": "I would like to mention one more advantage for this design: It allows access to the default options in some scenarios:\r\n\r\nExample:\r\n\r\n```tsx\r\nimport { Props } from 'react-hook-form/dist/types'\r\n\r\nconst config: Props<T> = { defaultValues: { foo: 'bar' } };\r\n\r\nconst form = useForm<T>(config)\r\n\r\nconfig.mode // undefined\r\nconfig.submitFocusError // undefined\r\n```\r\n\r\nInstead, it could be:\r\n```tsx\r\nconst form = useForm<T>({ defaultValues: { foo: 'bar' } })\r\n\r\nform.getProps().mode // 'onSubmit'\r\nform.getProps().submitFocusError // false\r\n```"
      },
      {
        "user": "stramel",
        "created_at": "2019-08-05T04:17:27Z",
        "body": "@bluebill1049 I think I'm against this change. It expands the public API surface, bundlesize, and code that we have to maintain to handle something that is relatively arbitrary without this change. The only thing that I see being useful of that config object would be the `defaultValues`.\r\n\r\nEasily accomplishable this way.\r\n\r\n```\r\nconst defaultValues = { foo: 'bar' }\r\n\r\nconst form = useForm({ defaultValues })\r\n```"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-05T04:40:24Z",
        "body": "That was what I thought as well. üëç "
      }
    ]
  },
  {
    "number": 183,
    "title": "Testing with Jest + Enzyme - unable to trigger validation with onBlur event ",
    "created_at": "2019-08-05T00:37:34Z",
    "closed_at": "2019-08-07T09:42:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/183",
    "body": "Hi all, \r\n\r\nthanks for creating this library and i enjoy the simplicity of it. \r\n\r\nI am trying to test my forms using `Jest + Enzyme` but i am unable to trigger a validation error. \r\n\r\nIt is working from the UI for me but i am just unable to get the test to pass. It would be great if someone could point out what i am missing or did incorrectly. \r\n\r\n**My component :**\r\n```\r\nimport React, { Fragment } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nimport './Form.css';\r\n\r\nconst Password = () => {\r\n  const { register, errors, getValues } = useFormContext();\r\n\r\n  const passwordRegister = register({ required: 'Please enter a password' });\r\n\r\n  const passwordValidator = ({ psw, confirmPsw }) => psw === confirmPsw || 'Passwords do not match';\r\n  const confirmPasswordRegister = register({ required: true, validate: () => passwordValidator(getValues()) });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={'cell ' + (errors.psw ? 'error' : '')}>\r\n        <label>Password:</label>\r\n        <input type=\"password\" name=\"psw\" ref={passwordRegister} />\r\n        {errors.psw && <div>{errors.psw.message}</div>}\r\n      </div>\r\n\r\n      <div className={'cell ' + (errors.confirmPsw ? 'error' : '')}>\r\n        <label>Confirm password:</label>\r\n        <input type=\"password\" name=\"confirmPsw\" ref={confirmPasswordRegister} />\r\n        {errors.confirmPsw && <div>{errors.confirmPsw.message}</div>}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Password;\r\n```\r\n\r\n**My specs**\r\n```\r\nimport React from 'react';\r\nimport { mount } from 'enzyme';\r\nimport useForm, { FormContext } from 'react-hook-form';\r\nimport Password from './Password';\r\n\r\nconst DummyForm = () => {\r\n  const form = useForm({ mode: 'onBlur' });\r\n\r\n  return (\r\n    <FormContext {...form}>\r\n      <form className=\"form\">\r\n        <Password form={form} />\r\n      </form>\r\n    </FormContext>\r\n  );\r\n};\r\n\r\nit('shows errors when touched', () => {\r\n  const component = mount(<DummyForm />);\r\n\r\n  component.find(\"input[name='psw']\").simulate('blur');\r\n  component.update();\r\n\r\n  expect(component.contains(<div>Please enter a password</div>)).toEqual(true);\r\n});\r\n\r\n```\r\n\r\nPS: Jest also complained about `Error: Uncaught [ReferenceError: MutationObserver is not defined]` and i have configure my jest setup to use the following\r\n```\r\nconst dom = new jsdom.JSDOM();\r\nglobal.window = dom.window;\r\nglobal.document = dom.window.document;\r\n\r\nrequire('mutationobserver-shim');\r\n\r\nglobal.MutationObserver = window.MutationObserver;\r\n```",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/183/comments",
    "author": "iankhor",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-05T01:22:26Z",
        "body": "Hi @iankhor \r\n\r\nThanks for the kind words ‚ù§Ô∏è \r\n\r\nWhat you try to test out here is the `error` message should be displayed when `errors` props contain specific `error`. it would make more sense just test on the props IMOH. \r\nI would mock `react-hook-form`\r\n\r\n`jest.mock(`react-hook-form`, () => ({\r\n  // implmentation here\r\n}))`\r\n\r\nBy simulates 'blur' you are almost testing out `react-hook-form`. I think `enzyme` simulate `onBlur` in react. If you have to test out 'blur', I would give 'react-testing-library` a try.\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T23:56:39Z",
        "body": "just a quick follow up how did you with this issue?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-07T09:42:31Z",
        "body": "going to close this issue, feel free to reopen."
      }
    ]
  },
  {
    "number": 182,
    "title": "Remove `submitFocusError` API",
    "created_at": "2019-08-03T00:11:00Z",
    "closed_at": "2019-08-03T09:19:22Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/182",
    "body": "Hey @barrymay  @stramel,\r\n\r\nQuick question: your guys' thought over:\r\n\r\nRemove `submitFocusError` and change to `focus` as an option for `useForm`\r\n\r\n```\r\nfocus: {\r\n  onSubmitError: false, // focus on the error input on submit\r\n  onInputMount: false, // auto focus when first input mount\r\n}\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/182/comments",
    "author": "bluebill1049",
    "comments": [
      {
        "user": "barrymay",
        "created_at": "2019-08-03T00:34:18Z",
        "body": "Hi @bluebill1049  - it's a good question - and I'll welcome @stramel 's feedback as well.\r\n\r\nI think submitFocusError makes sense, but what about letting the input focus be based on an event when launched?  I personally think this change is not that needed, since the initial focusing should be part of the React component, and the form controlling it is overkill to me."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-03T03:13:28Z",
        "body": "Yea thanks @barrymay I did consider that u can do ‚Äòautofocus‚Äô urself on the input. \r\n\r\nI was thinking situation when u re-order the inputs, it will auto focus the first input. But I do agree with you and will leave this unchanged. "
      },
      {
        "user": "barrymay",
        "created_at": "2019-08-03T11:45:03Z",
        "body": "Cool - I think if someone reorder's their inputs, they can feel free to be responsible to fix their own bug.  ;)\r\n\r\nBest thing you can do for anyone here is to have the example of how to focus within one of the site examples, and they can just follow your example."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-03T11:46:10Z",
        "body": "sounds good to me @barrymay "
      }
    ]
  },
  {
    "number": 121,
    "title": "Split validation implementations out",
    "created_at": "2019-07-09T16:18:52Z",
    "closed_at": "2019-08-10T22:38:39Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/121",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe current size of the library is ~4.3kb min, gzipped which is far better than most form libraries. However, I think we could shave a bit more off the base library implementation by pulling the validation out. Currently this has 3 kinds of validation logic: generic validation, native validation, and schema validation (using Yup). \r\n\r\n**Describe the solution you'd like**\r\nI think exposing only a generic validation in the base library would be sufficient. This would still allow others to use whatever validation library they choose to without adding the extra bundle size for those who don't use those features. \r\n\r\nWe could pull native and schema validation out into small libs that would either plug in nicely to this library through the generic validation or add some kind of plugin system for it. I'm unsure that the plugin system would actually result in a smaller bundle size but may lead to easier validation integrations for other libs without the increase to the base library.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/121/comments",
    "author": "stramel",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-07-10T06:45:37Z",
        "body": "Great suggestion @stramel \r\n\r\nI did think about this issue as well. I have the following mission when I am developing this library:\r\n\r\n1. Great DX\r\n2. Simple form validation (less code to write)\r\n3. Better performance \r\n4. Smaller package size\r\n\r\nGreat DX is one of my primary goals, I want this library to be as easy as possible. I guess that's one of the reasons why I didn't split the validation methods into the plugin to reduce the package size. Instead of giving validation method as an argument which is slighter easier than figure out which plugin to import IMHO.\r\n\r\nOn the other perspective, by combining all the validation methods it allows me to re-use quite a bit of logic, especially with browser native validation. However, I do agree split the validation will reduce the size of the library. I think by moving out those dependencies we can reduce the library down to 3kb easily. \r\n\r\nMy thoughts at the moment: let's keep them together for now if the functionality grows, and then I can start to decouple that validation into `plugins`. (I don't think we will need to introduce another validation method too)\r\n\r\nLet me know your thoughts. I am happy to working split it apart when it requires. üôè \r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-10T22:38:39Z",
        "body": "Going to close this issue now, we can revisit this later on :)"
      }
    ]
  },
  {
    "number": 120,
    "title": "[Question] Schema Validation",
    "created_at": "2019-07-08T08:23:04Z",
    "closed_at": "2019-07-11T05:13:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/120",
    "body": "Hi all,\r\n\r\nThanks for create this amazing tool. I'm validating using yup and some how the library is triggering the error for nested object, but if I validate using the yup validator, it's working fine. Have you noticed this before?\r\n\r\n\r\nThe validation looks like this...\r\n```\r\n  information: yup.object().shape({\r\n    priceVolume: yup.string()\r\n      .some test\r\n      .some other test\r\n      .required(error.REQUIRED_FIELD_ERROR),\r\n})",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/120/comments",
    "author": "felipepastor",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-07-08T08:34:43Z",
        "body": "thanks @felipepastor any chnace you can share a codesandbox?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-07-08T08:43:23Z",
        "body": "also what errors you are getting?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-07-10T03:50:53Z",
        "body": "hi @felipepastor how did you go with this issue?"
      },
      {
        "user": "felipepastor",
        "created_at": "2019-07-10T11:51:20Z",
        "body": "I'll provide a codesandbox soon. I'm facing another issue. I'll ask in another ticket."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-07-11T05:13:24Z",
        "body": "I am going to close this issue now. feel free to re-open once you can supply a code sandbox with the issue. üëç "
      }
    ]
  },
  {
    "number": 102,
    "title": "useFormContext doesn't work with defaultValues",
    "created_at": "2019-06-26T17:32:20Z",
    "closed_at": "2019-06-26T21:56:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/102",
    "body": "```\r\n    const {\r\n        errors, register\r\n    } = useFormContext({\r\n        defaultValues: {\r\n            firstName: 'bill',\r\n            lastName: 'luo'\r\n        }\r\n    });\r\n```\r\n\r\nDoesn't prepopulate my form with the default values.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/102/comments",
    "author": "RyanPWalker",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-06-26T21:36:55Z",
        "body": "`useFormConext` doesn't support an argument, it only makes useForm functions access via `context`\r\n\r\nyou have done that in `useForm`."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-06-26T21:38:02Z",
        "body": "Code Example below:\r\n\r\n```\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport useForm, { FormContext } from \"./src\";\r\nimport Test from \"./Test\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  const methods = useForm({\r\n    defaultValue: { bill: 'test' }\r\n  });\r\n  const { register, handleSubmit } = methods;\r\n  return (\r\n    <FormContext {...methods}>\r\n      <form onSubmit={handleSubmit(data => console.log(data))}>\r\n        <h1>Hello CodeSandbox</h1>\r\n        <input name=\"test\" ref={register({ required: true })} />\r\n        <h2>Start editing to see some magic happen!</h2>\r\n        <Test />\r\n        <button>test</button>\r\n      </form>\r\n    </FormContext>\r\n  );\r\n}\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\nimport * as React from \"react\";\r\nimport useForm, { useFormContext } from \"./src\";\r\n\r\nexport default function Test() {\r\n  const { register } = useFormContext();\r\n  return (\r\n    <div>\r\n      <input name=\"bill\" ref={register} />\r\n    </div>\r\n  );\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 79,
    "title": "Form validation does not work without submit button",
    "created_at": "2019-06-13T17:23:19Z",
    "closed_at": "2019-06-13T21:43:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/79",
    "body": "I have form which should submit data when all fields are filled without any error and submit button is not needed in this case, but validation does not work without submit button. Can validation work without submit button?\r\n \"version\": \"3.11.0\"",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/79/comments",
    "author": "pyliakm",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-06-13T21:25:42Z",
        "body": "yes, you can :)\r\n\r\n```\r\nconst onSubmit = data => { cosnole.log(data) }\r\n\r\n<span onClick={handleSubmit(onSubmit)}>test</span>\r\n```"
      },
      {
        "user": "pyliakm",
        "created_at": "2019-06-13T21:43:30Z",
        "body": "Thank you!"
      }
    ]
  },
  {
    "number": 50,
    "title": "Failed to minify the code from this file",
    "created_at": "2019-06-03T17:24:10Z",
    "closed_at": "2019-06-06T06:10:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/50",
    "body": "Hi,\r\n\r\nGreat work doing this, I've been using it for form building in my app. However I'm having one important issue when running `npm run build` (the app was created with create-react-app). The issue is:\r\n\r\n```\r\nFailed to minify the code from this file:\r\n\r\n        ./node_modules/react-hook-form/dist/index.es.js:9:44\r\n```\r\n\r\nI've tried updating react-scripts to v.2.0.0 but the problem remains. Any idea how to solve this?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/50/comments",
    "author": "pabloibanezcom",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-06-03T21:56:49Z",
        "body": "Hi,\r\n\r\nthank for your kind words ‚ù§\r\nany chance of sharing your package.json, i can try it out myself :) \r\nthanks"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-06-05T02:55:43Z",
        "body": "just a quick follow up, how are you doing with the build?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-06-06T06:10:36Z",
        "body": "going to close this issue :) feel free to open if still an issue üëç "
      }
    ]
  },
  {
    "number": 33,
    "title": "[Question] Arrayfields data object",
    "created_at": "2019-05-21T14:22:07Z",
    "closed_at": "2019-05-25T08:50:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/33",
    "body": "Hi, don't know if this is right place for questions, but now I try :)\r\n\r\nIn my project I have a fields array of products and I want the data to come out something like this:\r\n\r\n```\r\nproducts: [ \r\n  {\r\n    name: \"iPhone\",\r\n    description: \"Overpriced hyped smart phone\"\r\n  },\r\n  {\r\n    name: \"Huawei\",\r\n    description: \"Chinese spying tool\"\r\n  }\r\n]\r\n```\r\n\r\nBut from looking at the fieldsArray example can only seem to get:\r\n\r\n```\r\n{\r\n  products.name[\"iPhone\", \"Hauwei\"]\r\n  products.description[\"Overpriced hyped smart phone\", \"Chinese spying tool\"]\r\n}\r\n```\r\n\r\nI know, I'm doing something wrong, but is it possible to get what I want, by just writing the input name in a certain manner?\r\n\r\nBest regards Nikolas",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/33/comments",
    "author": "Nikoflash",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-05-21T22:02:14Z",
        "body": "hey, \r\n\r\nis this a possible solution?\r\n\r\n```\r\n{\r\n  name: [\"iPhone\", \"Hauwei\"]\r\n  description: [\"Overpriced hyped smart phone\", \"Chinese spying tool\"]\r\n}\r\n```\r\n\r\nand during submiting `handleSubmit`\r\n```\r\nconst onSumbit = (data) => {\r\n  const output = data.name.map((phoneName, i) => {\r\n    return {\r\n      name: phoneName,\r\n      description: data.description[i],  \r\n    }   \r\n  })\r\n}\r\n```\r\n"
      },
      {
        "user": "Nikoflash",
        "created_at": "2019-05-22T06:30:58Z",
        "body": "Thanks for a quick answer :)\r\n\r\nI thought about a solution like that, but that would require all fields to aways contain data, to know how to pair them.\r\n\r\nThink I'll go for something like:\r\n\r\n```\r\nproducts[0].name: \"Iphone\"\r\nproducts[0].description: \"Overpriced hyped smart phone\"\r\nproducts[1].name: \"Hauwei\"\r\nproducts[1].description: \"Chinese spying tool\"\r\n```\r\n\r\nAnd then serialize the data on submit."
      }
    ]
  },
  {
    "number": 24,
    "title": "Register API should not have to take options that are native input attributes",
    "created_at": "2019-05-02T00:22:35Z",
    "closed_at": "2019-05-02T04:59:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/24",
    "body": "Instead of `<input ref={register({ required: true })}>`\r\nI prefer `<input required ref={register}>`\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/24/comments",
    "author": "sonhanguyen",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-05-02T00:26:04Z",
        "body": "It's for validation to check if it's required or not. you can do the following:\r\n\r\n```<input required ref={register} required />```\r\n\r\nor \r\n\r\n```<input ref={register({ required: true })}>``` \r\n\r\nif you want to have custom error message rather than native behavior."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-05-02T00:29:00Z",
        "body": "those extra options within the `register` argument could be useful for other validation too:\r\n\r\neg:\r\n\r\n<input name=\"test\" ref={register({ validate: (value) => value=== 'bill'  })} />\r\n{errors.test && 'name have to be bill'}\r\n\r\nlet me know your thoughts"
      },
      {
        "user": "sonhanguyen",
        "created_at": "2019-05-02T00:32:20Z",
        "body": "I assume inside `register` you could just read them from the input? I'm not saying those validations are not useful, just we should be able to have them simply by having those attributes on the input (if the behavior is exactly the same). Too implicit?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-05-02T00:40:28Z",
        "body": "yea register will hold all the input ref, so access value or error field ref is much easier. you can focus on error field without any extra work too. that's just my example, you can build your validation rules external and plug them in.\r\n\r\n```\r\nimprot validateName from 'utility/validateName';\r\n\r\n<input name=\"test\" ref={register({ validate: validateName, minLength: 5 })} />\r\n{errors.test && 'name have to be bill'}\r\n\r\n```"
      },
      {
        "user": "sonhanguyen",
        "created_at": "2019-05-02T00:59:01Z",
        "body": "Maybe my point isn't clear enough. Things like `pattern`, `minLenght` and `required` are already implemented in the dom API so people probably prefer to use those things. By removing those you can simplify the code and encourage web standard imo. You can just call `input.checkValidity()` instead of having to do the checks yourself."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-05-02T01:02:23Z",
        "body": "yea I get your point, you can use standard validation if you want. the choice is yours.\r\n\r\n`<input name=\"input\" ref={regsiter} />`\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-05-02T04:59:10Z",
        "body": "hey mate, going to close this issue. let me know if you still have concerns, we can continue the discussion. \r\n\r\ncheers\r\nbill"
      },
      {
        "user": "portfolioris",
        "created_at": "2019-10-29T14:56:19Z",
        "body": "This would provide a great way to enable progressive enhancement. You use web standards, which will almost always work, even if loading or executing JS fails (or if users choose to disable JS). If it does execute, react-hook-form would take over, and apply custom validation instead. You set a `novalidate` attribute on the `<form>` tag by script, so the browsers knows you've taken over the validation."
      }
    ]
  },
  {
    "number": 212,
    "title": "Question: FormContext Types",
    "created_at": "2019-08-14T21:54:39Z",
    "closed_at": "2019-08-16T03:11:44Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/212",
    "body": "I am new to react-hook-form.  Doing an evaluation.  \r\n\r\nI notice that `useForm` takes a generic parameter to shape various aspects such as `errors`.  Makes it possible to do: \r\n```ts\r\nconst form = useForm<Person>()\r\nconst firstNameHasError = !!form.errors.firstName\r\n// or\r\nconst name = form.getValues().firstName\r\n// both provide intellisense and type checking.  However,\r\n\r\nconst form = useFormContext()\r\nconst name = form.getValues().firstName\r\n//works but no intellisense or type checking\r\n \r\n```\r\n\r\nWas hoping to use the `useFormContext` so that the form can work across child components.  However, I am unable to provide a type to `useFormContext`.  \r\n\r\nAm I missing something?  Is this something that will be coming?  Is it even possible?  Should I be looking at a different pattern?  Such as passing as a prop the object that comes off of `useForm`?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/212/comments",
    "author": "dfmartin",
    "comments": [
      {
        "user": "stramel",
        "created_at": "2019-08-14T22:27:51Z",
        "body": "@dfmartin We are working to improve the typings. I will see what I can do to improve this in the short-term."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-14T22:40:12Z",
        "body": "I was about to reply haha, @stramel you beat me again."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-14T22:42:24Z",
        "body": "@dfmartin I would recommend using `FormContext` over props pass down, it can get a bit messy. However, if it's just one level then it's probably fine. but deep nested I would recommend using `FormContext`."
      },
      {
        "user": "stramel",
        "created_at": "2019-08-14T23:04:43Z",
        "body": "I will have an update tonight. üëç \t"
      }
    ]
  },
  {
    "number": 90,
    "title": "react-native support",
    "created_at": "2019-06-17T07:35:12Z",
    "closed_at": "2019-06-21T00:02:39Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/90",
    "body": "Hi,\r\nFirst of all - this is GREAT! :D\r\n\r\nOne question: is there any way of using this with react-native? I assume there isn't any, since it requires `<form onsubmit>` but then again, I tend to be wrong in those cases :D\r\n\r\nThanks, keep up good work!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/90/comments",
    "author": "burtek",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-06-17T07:39:40Z",
        "body": "Hey @burtek,\r\n\r\nThank you for your kind words! \r\n\r\nyou don't need `form` `onSubmit` to use this hook.\r\n\r\n`<span onClick={handleSubmit(ons=Submit)}></span>` will do \r\n\r\n but currently, I am focusing on the web :( want to get web right first then looking into native :)\r\n\r\ncheers\r\nbill"
      },
      {
        "user": "burtek",
        "created_at": "2019-06-17T07:52:06Z",
        "body": "Alrighty :D I will then give it a try with an react-native example for ya! :)"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-06-21T00:02:39Z",
        "body": "I am going to close this issue now, will focus on the web first and move towards `react-native` ‚ù§Ô∏è "
      },
      {
        "user": "AkshatGiri",
        "created_at": "2019-07-22T02:11:40Z",
        "body": "@burtek Did you get it to work? I keep getting `Missing field name: [object Object]` warning. "
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-07-22T02:20:24Z",
        "body": "hey @AkshatGiri I haven't got chance to look at react-native just yet, but I will do once web version is solid."
      }
    ]
  }
]