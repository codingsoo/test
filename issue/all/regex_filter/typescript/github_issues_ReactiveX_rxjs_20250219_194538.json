[
  {
    "number": 5499,
    "title": "TestScheduler: Should support *lack* of subscriptions in expectSubscriptions`",
    "created_at": "2020-06-15T23:32:18Z",
    "closed_at": "2020-06-22T21:42:52Z",
    "labels": [
      "feature",
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/5499",
    "body": "Currently, there is no way to properly test a _lack_ of subscription, AFAICT. (Maybe I'm wrong? haha)\r\n\r\nSo let's say I want to test something like this:\r\n\r\n```ts\r\ntestScheduler.run(({ cold, expectObservable, expectSubscriptions }) => {\r\n  const source = cold('  ---a---b---c---d---|');\r\n  const expected = '     --------------------';\r\n  const subscriptions = '--------------------';\r\n  const result = source.pipe(subscribeOn(testScheduler, Infinity));\r\n  expectObservable(result).toBe(expected);\r\n  expectSubscriptions(source.subscriptions).toBe(subscriptions);\r\n});\r\n```\r\n\r\nRan into this while trying to test a bug in `subscribeOn`.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/5499/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "cartant",
        "created_at": "2020-06-15T23:34:15Z",
        "body": "Can you pass an empty array?\r\n\r\n```ts\r\nexpectSubscriptions(source.subscriptions).toBe([]);\r\n```"
      },
      {
        "user": "benlesh",
        "created_at": "2020-06-16T14:29:10Z",
        "body": "@cartant ... yes, that's a valid workaround. I think this issue is confusing enough that we should make sure that `.toBe('   ')` and `.toBe('-------')` work the same way as `.toBe([])`.\r\n\r\nFurther, it's plausible that people will have tests that expect subscriptions like `['^---!', '----', '---^--!']` or the like.  I think what we need to do is just take the `{ subscribed: null, unsubscribed: null }` (or whatever that outputs), and filter them out of the resulting arrays. Then everything should \"just work\" as expected."
      }
    ]
  },
  {
    "number": 4676,
    "title": "[docs]: Operator `repeatWhen` is missing documentation, example, and see also",
    "created_at": "2019-03-30T00:01:31Z",
    "closed_at": "2019-05-09T05:40:34Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4676",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\nThis operator needs documentation, example and the see also section.\r\nWe might want to include it.\r\n\r\nFor See Also we could include repeat",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4676/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2019-05-09T05:40:34Z",
        "body": "closed by #4703 "
      }
    ]
  },
  {
    "number": 4675,
    "title": "[docs]: Operator `repeat` is missing documentation, example, and see also",
    "created_at": "2019-03-29T23:59:11Z",
    "closed_at": "2019-04-04T17:33:01Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4675",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\n\r\nThis operator needs documentation, example and the see Alos section.\r\nWe might want to include it.\r\n\r\nFor See Also we could include `repeatWhen`",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4675/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2019-04-04T17:33:01Z",
        "body": "done by #4681 "
      }
    ]
  },
  {
    "number": 4631,
    "title": "[docs]: Operator `skipUntil` is missing the description and example",
    "created_at": "2019-03-13T11:13:46Z",
    "closed_at": "2019-05-09T05:41:54Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4631",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\n We should include a proper description as well as an example",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4631/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2019-05-09T05:41:53Z",
        "body": "closed by #4696 "
      }
    ]
  },
  {
    "number": 4627,
    "title": "[docs]: Operator `retry` is missing the description, and examples",
    "created_at": "2019-03-10T14:28:18Z",
    "closed_at": "2019-05-09T05:41:14Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4627",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [ ] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\nWe might want to add an example here.\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4627/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2019-05-09T05:41:14Z",
        "body": "closed by #4691 "
      }
    ]
  },
  {
    "number": 4621,
    "title": "[docs]: The \"Edit in StackBlitz\" button opens snippets in wrong format causing many examples to break",
    "created_at": "2019-03-06T18:20:02Z",
    "closed_at": "2019-08-12T02:09:33Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4621",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [ ] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [X] error(s) in example\r\n- [ ] needs example\r\n\r\n### Description Of The Issue\r\nAs all examples are written in TypeScript and the \"Edit in StackBlitz\" button opens all snippest in JavaScript format many examples do not work.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4621/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2019-03-07T06:35:01Z",
        "body": "Well spotted! Thanks for that. So the issue occurs when the code example is labeled as javascript code,\r\n\r\ne.g. \r\n```markdown\r\n```javascript\r\nimport { Observable } from 'rxjs';\r\n\r\nconst observable = new Observable(subscriber => {\r\n  subscriber.next(1);\r\n  subscriber.next(2);\r\n  subscriber.next(3);\r\n  setTimeout(() => {\r\n    subscriber.next(4);\r\n    subscriber.complete();\r\n  }, 1000);\r\n});\r\n```\r\n\r\nsuch examples will produce a js stackblitz.\r\n\r\nWhat we basically need to do is replace those javascript hightlighting with ts. AFAIK most of the examples uses typescript so it should be quite safe to replace javascript with typescript here, but it might break some of the examples"
      },
      {
        "user": "BioPhoton",
        "created_at": "2019-03-07T12:22:33Z",
        "body": "Is there a standard for code snippets in this reop?\r\nI saw some examples using `var` so this would be a thing to replace too if replacing \" \\`\\`\\`javascript\" with \"\\`\\`\\` ts\".\r\n\r\nOr are just all snippets in the src folder in ts? \r\nIf not already you might mention it in some fitting place."
      },
      {
        "user": "BioPhoton",
        "created_at": "2019-08-12T02:09:32Z",
        "body": "Hi @JWO719 as the related PR is merged, (and shipped?) we can close it. \r\nAlso #4605 could be closed.\r\n\r\nPlease reopen if I'm wrong "
      }
    ]
  },
  {
    "number": 4615,
    "title": "[docs]: Operator `timestamp` is missing the short description, description, and examples",
    "created_at": "2019-03-03T23:59:34Z",
    "closed_at": "2020-05-02T18:56:08Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4615",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\n\r\nAll docs are missing. We might wanna add some.\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4615/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2020-05-02T18:56:08Z",
        "body": "closed by #4699 "
      }
    ]
  },
  {
    "number": 4614,
    "title": "[docs]: Operator `every` is missing the description",
    "created_at": "2019-03-03T23:38:15Z",
    "closed_at": "2022-03-21T20:52:28Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4614",
    "body": "### Please check those that apply\r\n\r\n- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [ ] needs example\r\n\r\n### Description Of The Issue\r\n\r\nThe description block of the `every` operator is missing. We might provide some description to fix this.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4614/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "hardikpthv",
        "created_at": "2020-10-02T11:07:03Z",
        "body": "I believe this can be closed. "
      },
      {
        "user": "jakovljevic-mladen",
        "created_at": "2022-03-21T20:52:28Z",
        "body": "I believe #4777 fixed the problem described in the issue. Closing for now."
      }
    ]
  },
  {
    "number": 4613,
    "title": "[docs]: Operator `toArray` is missing documentation",
    "created_at": "2019-03-03T22:45:31Z",
    "closed_at": "2020-05-02T18:55:48Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4613",
    "body": "- [ ] typo\r\n- [x] documentation doesn't exist\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [x] needs example\r\n\r\n### Description Of The Issue\r\n\r\nThere is no documentation for toArray. This is a duplicate from #3111 #3113. As both of them are closed without any changes to the docs I resubmitt this issue\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4613/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "niklas-wortmann",
        "created_at": "2020-05-02T18:55:48Z",
        "body": "closed by #4775 "
      }
    ]
  },
  {
    "number": 4582,
    "title": "Mark aliases",
    "created_at": "2019-02-20T19:26:20Z",
    "closed_at": "2019-12-04T11:57:58Z",
    "labels": [
      "help wanted",
      "docs"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4582",
    "body": "### Documentation Related To Component:\r\n\r\n### Please check those that apply\r\n\r\n- [ ] typo\r\n- [X] documentation feature suggestion\r\n- [ ] documentation needs clarification\r\n- [ ] error(s) in example\r\n- [ ] needs example\r\n\r\n### Description Of The Issue\r\n\r\nIt would be nice if the alias operators could be marked like \"(alias flatMap)\" or so.\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4582/comments",
    "author": "BioPhoton",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2019-02-25T16:47:44Z",
        "body": "I agree with this."
      },
      {
        "user": "BioPhoton",
        "created_at": "2019-02-25T17:17:19Z",
        "body": "I would also not expose the aliases as separate operators in the rxjs.dev/api docs."
      },
      {
        "user": "niklas-wortmann",
        "created_at": "2019-02-27T15:59:18Z",
        "body": "Definetly it would be cool! I just fear it is not that easy.\r\n\r\nSo the problem is that we are refering to the same exported member see \r\n```typescript\r\nexport { mergeMap } from '../internal/operators/mergeMap';\r\nexport { mergeMap as flatMap } from '../internal/operators/mergeMap';\r\n```\r\nTherefore the documentation inside flatMap also refers to mergeMap all the time. \r\nCurrently we have no mechanism inside the docs to detect such \"duplicates\", also \r\nwe would need some way to distinguish between the \"original\" one and the \"alias\".\r\nFor now I can't think of a solution for these problems.\r\n\r\nI hope I could somehow express my concerns so that they are understandable (not really sure :D )"
      },
      {
        "user": "BioPhoton",
        "created_at": "2019-03-04T01:14:40Z",
        "body": "Maybe the `@nodoc` tag helps..."
      },
      {
        "user": "santoshyadavdev",
        "created_at": "2019-03-12T08:19:25Z",
        "body": "Hi @BioPhoton ,\r\nIs this still open, let me know if i can be of any help here."
      },
      {
        "user": "BioPhoton",
        "created_at": "2019-03-12T11:44:50Z",
        "body": "Hi!\r\nI guess @JWO719 knows best how to fix it. I have no clue.\r\n\r\nDo you have any idea? "
      },
      {
        "user": "niklas-wortmann",
        "created_at": "2019-03-13T07:37:41Z",
        "body": "I still don't know a proper solution for this problem. If anyone has an idea how to mark aliases or highlight it in a better way, I'm open for any suggestions and happy to review a pr!"
      },
      {
        "user": "santoshyadavdev",
        "created_at": "2019-03-13T16:20:10Z",
        "body": "Ok let me check if i can find any solution."
      },
      {
        "user": "martinsik",
        "created_at": "2019-03-14T11:54:33Z",
        "body": "@JWO719 This repo already has `typescript` as a dev dependency so there could be another dgeni processor that only checks public entry points and from `export` statements figures out what is an alias (this would work as `tslint` extension as well).\r\n\r\n```\r\nimport * as fs from 'fs';\r\nimport { createSourceFile, SyntaxKind, ScriptTarget, ExportDeclaration, Statement } from 'typescript';\r\n\r\nconst filename = 'src/internal/operators/index.ts';\r\nconst sourceFile = createSourceFile(filename, fs.readFileSync(filename).toString(), ScriptTarget.ES5);\r\n\r\nconst isExportDeclaration = (s: Statement): s is ExportDeclaration => s.kind === SyntaxKind.ExportDeclaration;\r\n\r\nsourceFile.statements.forEach(statement => {\r\n  if (isExportDeclaration(statement) && statement.exportClause) {\r\n    statement.exportClause.elements.forEach(element => {\r\n      if (element.propertyName && element.name) {\r\n        const exportAlias = element.name.text;\r\n        const exportName = element.propertyName.text;\r\n\r\n        console.log(exportName, '=>', exportAlias);\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// ...\r\n// this prints the following output:\r\n// mergeMap => flatMap\r\n```\r\n\r\nThis is expecting that all aliases are going to be just renamed exports that are already exported (like `flatMap` and `mergeMap`).  I think it's a question whether also exports like these should be considered as alias:\r\n\r\n```\r\nexport { asap as asapScheduler } from './internal/scheduler/asap';\r\n```\r\n"
      },
      {
        "user": "niklas-wortmann",
        "created_at": "2019-03-16T09:32:52Z",
        "body": "this is an amazing idea! Like that. @martinsik Would you like to file a pr for it!"
      },
      {
        "user": "niklas-wortmann",
        "created_at": "2019-12-04T11:57:58Z",
        "body": "closed by #4733 "
      }
    ]
  },
  {
    "number": 4183,
    "title": "endWith should widen the type if necessary",
    "created_at": "2018-09-25T03:23:51Z",
    "closed_at": "2019-01-27T03:40:12Z",
    "labels": [
      "help wanted",
      "TS"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/4183",
    "body": "## Feature Request\r\n\r\n`startWith` can be passed values other than `T` and if that's done, the operator's return type is widened. See #4034.\r\n\r\n`endWith` needs to be treated similarly and needs an additional dtslint test, etc.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/4183/comments",
    "author": "cartant",
    "comments": [
      {
        "user": "cartant",
        "created_at": "2018-09-25T03:25:28Z",
        "body": "@dkosasih If you want to handle this, that would be great."
      },
      {
        "user": "timdeschryver",
        "created_at": "2018-09-25T06:16:05Z",
        "body": "Feel free to ping me if you need to verify something @dkosasih "
      },
      {
        "user": "cartant",
        "created_at": "2019-01-27T03:40:12Z",
        "body": "A PR for this has been merged."
      }
    ]
  },
  {
    "number": 3472,
    "title": "Get response url from response.xhr on ie11",
    "created_at": "2018-03-25T18:14:26Z",
    "closed_at": "2019-10-02T14:30:55Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/3472",
    "body": "**RxJS version:**\r\n5.5.6\r\n\r\nObservable version: \r\n0.18.0\r\n\r\n**Code to reproduce:**\r\n\r\n```ts\r\nexport default response => Observable.if(\r\n  () => response.xhr.responseURL.indexOf(URL_PART) !== -1,\r\n  Observable.throw('redirect'),\r\n  Observable.of(response.response),\r\n);\r\n```\r\n\r\n**Expected behavior:**\r\nreturn response or redirect (works fine in ff and chrome)\r\n\r\n**Actual behavior:**\r\n\"Exception thrown and not caught\" in file Observable.js, line 165 in IE11\r\n\r\nThere is any other way to get response URL on IE11? Or Someone see something wrong in my code? I tried babel-polyfill but still same error.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/3472/comments",
    "author": "l-pawliczak",
    "comments": [
      {
        "user": "jichang",
        "created_at": "2018-04-08T03:53:19Z",
        "body": "The problem is IE11 and old Edge don't have responseURL property on XMLHttpRequest object. Lots of frameworks will use request url as a fallback, but this will fail when 30x redirects happens.  The only reliable solution maybe is the backend server set some custom header to indicate response url, so I don't think rxjs need to solve this"
      },
      {
        "user": "benlesh",
        "created_at": "2019-10-02T14:31:10Z",
        "body": "I agree. This isn't something we can fix on the RxJS side."
      }
    ]
  },
  {
    "number": 2388,
    "title": "add index to delayWhen selector",
    "created_at": "2017-02-18T21:18:14Z",
    "closed_at": "2019-04-05T23:12:03Z",
    "labels": [
      "feature",
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/2388",
    "body": "Most operators include the index of the current element in the selector function For example `lter(predicate: function(value: T, **index**: number)` and ` mergeMap(project: function(value: T, **?index**: number)`.\r\n\r\n`delayWhen` however is missing the index:\r\n```\r\npublic delayWhen(delayDurationSelector: function(value: T): Observable, subscriptionDelay: Observable): Observable\r\n```\r\nHowever, it would be especially useful if `delayDurationSelector` included the index. That would make it easy to create an incremental delay, for example when `delayWhen` is combined with `retryWhen`.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/2388/comments",
    "author": "Dorus",
    "comments": [
      {
        "user": "macklinu",
        "created_at": "2019-04-05T22:03:29Z",
        "body": "Was this resolved by #2473? Anything else left to do here?"
      },
      {
        "user": "cartant",
        "created_at": "2019-04-05T23:12:02Z",
        "body": "> Was this resolved by #2473?\r\n\r\nThat seems to be the case, yes."
      }
    ]
  },
  {
    "number": 2269,
    "title": "Unnecessary README.md special case instructions for TypeScript",
    "created_at": "2017-01-10T00:53:27Z",
    "closed_at": "2017-10-11T20:39:41Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/2269",
    "body": "The current instructions direct TypeScript users to install using `npm install @reactivex/rxjs`.\r\n\r\nHowever it works just fine to do it the simple way: `npm install rxjs` followed by e.g. `import { Observable } from 'rxjs';`\r\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/2269/comments",
    "author": "billba",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2017-01-16T01:02:50Z",
        "body": "so `@reactive/rxjs` is not specifically for typescript, `rxjs` for CJS while `@reactive/rxjs` does have all builds includeded. Probably need to update document bit to have better clarity."
      },
      {
        "user": "DomiR",
        "created_at": "2017-01-20T17:58:45Z",
        "body": "@billba how does your tsconfig look like? \r\n\r\nI can't seem to get it working with mine, as it always says it cannot find the module: \r\n```\r\n{\r\n\t\"compilerOptions\": {\r\n\t\t\"target\": \"es6\",\r\n\t\t\"allowJs\": true,\r\n\t\t\"jsx\": \"react\",\r\n\t\t\"outDir\": \"artifacts\",\r\n\t\t\"rootDir\": \"src\",\r\n\t\t\"inlineSourceMap\": true,\r\n\t\t\"noImplicitAny\": false,\r\n\t\t\"experimentalDecorators\": true,\r\n\t\t\"forceConsistentCasingInFileNames\": true,\r\n\t\t\"locale\": \"en\",\r\n\t\t\"pretty\": true,\r\n\t\t\"noFallthroughCasesInSwitch\": false,\r\n\t\t\"noImplicitReturns\": false,\r\n\t\t\"preserveConstEnums\": true,\r\n\t\t\"noEmitOnError\": true,\r\n\t\t\"stripInternal\": true,\r\n\t\t\"skipLibCheck\": true\r\n\t},\r\n\t\"exclude\": [],\r\n\t\"include\": [\r\n\t\t\"src/**/*.ts\",\r\n\t\t\"src/**/*.tsx\",\r\n\t\t\"global.d.ts\"\r\n\t]\r\n}\r\n```\r\n\r\nWhat would be the correct way to import rxjs for TypeScript users?"
      },
      {
        "user": "DomiR",
        "created_at": "2017-01-23T01:34:58Z",
        "body": "It was brought to my attention, that `\"moduleResolution\": \"node\"` does the trick."
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-06T07:39:56Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 2123,
    "title": "Adding Node.js v6 on travis",
    "created_at": "2016-11-09T11:39:18Z",
    "closed_at": "2016-11-12T03:45:48Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/2123",
    "body": "Should have this LTS version to test out.",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/2123/comments",
    "author": "imcotton",
    "comments": [
      {
        "user": "lock[bot]",
        "created_at": "2018-06-06T21:41:12Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1872,
    "title": "update timeout and timeoutWith in the migration docs",
    "created_at": "2016-08-10T00:19:45Z",
    "closed_at": "2016-08-31T19:11:13Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1872",
    "body": "Per discussion in #1865\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1872/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T01:40:34Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1650,
    "title": "Proposal: No more KitchenSink",
    "created_at": "2016-04-25T22:28:09Z",
    "closed_at": "2016-04-30T07:05:08Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1650",
    "body": "We should probably just have one global export file for the masses.\n1. Is it huge? Yes.\n2. Should people use RxJS 5 that way? Hell no. Use a bundler and only import what you're using.\n3. In past tests, I noticed the gzipped size of Rx.KitchenSink.min.js was about the same as Rx.min.js, because of how the compression affected it.\n\nIf people are using the global export version of RxJS, it can be assumed that they're probably hacking around, and/or not really serious about reducing the size of their downloaded application.\n\nAt this point it's a little confusing to say \"this is in Rx, but this is in Kitchensink\" to people. Also, given how modular this library is, it would be easy enough for anyone to make their own custom build of RxJS 5 to keep around.\n### Basically the idea is just to put everything in Rx.ts\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1650/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2016-04-26T06:57:01Z",
        "body": "I'm in favor of this in general too, but had assumption those packages are similar representation of `rx.all.js` to `rx.lite.js` in RxJS4. So in case of anyone who'd like to have minimal, core packages (`Rx` currently), it's recommended to make custom imported builds of their own?\n"
      },
      {
        "user": "staltz",
        "created_at": "2016-04-26T13:20:35Z",
        "body": "Agreed.\n"
      },
      {
        "user": "trxcllnt",
        "created_at": "2016-04-26T13:44:37Z",
        "body": "Been in favor of this for a long time, let's do it.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-04-28T07:01:47Z",
        "body": "> So in case of anyone who'd like to have minimal, core packages (Rx currently), it's recommended to make custom imported builds of their own?\n\nYes. If someone cares that much they should be using bundling and tree shaking anyhow.\n"
      },
      {
        "user": "zertosh",
        "created_at": "2016-05-01T05:46:55Z",
        "body": "I would love to see this go out in a beta 8.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T05:40:52Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1555,
    "title": "Move major Subject types under src/",
    "created_at": "2016-03-30T00:06:56Z",
    "closed_at": "2016-03-30T07:12:03Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1555",
    "body": "### Problem\n\nWhen importing subjects, the location of the subjects in the rxjs module hierarchy is inconsistent:\n\n``` js\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/subject/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/subject/ReplaySubject';\n```\n\nThis puts undue burden on the developer to know which subject is where.\n### Solution\n\nMove all Subjects under `src/`. That will change the imports to consistently be at the top level:\n\n``` js\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n```\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1555/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T08:01:39Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1554,
    "title": "Add simple imports for observable creation methods",
    "created_at": "2016-03-30T00:03:14Z",
    "closed_at": "2016-04-05T04:17:05Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1554",
    "body": "### Problem\n\nCurrently when you want to use a creation method in an ad-hoc way, you need to import the type of Observable, then use it's static `create` method or new it up directly.\n\nThis poses two problems:\n1. You have to know the name of the observable: `rxjs/observable/FromObservable` for example\n2. It makes using it ugly:\n\n``` js\nimport { FromObservable } from 'rxjs/observable/FromObservable';\nconst from = FromObservable.create;\n\nfrom([1,2,3]).subscribe(console.log.bind(console));\n```\n### Solution\n\nAdd _additional_ files next to the observable files that export the `create` methods under a more useful name:\n\neg:\n\nsrc/observable/from.ts\n\n``` TypeScript\nimport { FromObservable } from './FromObservable';\n\nexport const from = FromObservable.create;\n```\n\nsrc/observable/never.ts\n\n``` TypeScript\nimport { NeverObservable } from './NeverObservable';\n\nexport const never = NeverObservable.create;\n```\n\netc.\n\nThat means that using these in an ad hoc way would be as simple as:\n\n``` js\nimport { from } from 'rxjs/observable/from'; //LOL: from from from\n\nfrom([1, 2, 3]).subscribe(console.log.bind(console));\n```\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1554/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2016-03-30T11:13:52Z",
        "body": "How do you suggest to import `throw`?\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-03-30T20:30:32Z",
        "body": "@staltz right now it's `import { _throw } from XXX` same for `_do`, `_finally` and `_catch`.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T08:01:31Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1515,
    "title": "timestamp operator",
    "created_at": "2016-03-22T18:05:04Z",
    "closed_at": "2016-03-27T00:24:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1515",
    "body": "Hey, I just wanted to show some love to the timestamp operator and make sure it's in the todo list.\nThanks!\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1515/comments",
    "author": "download13",
    "comments": [
      {
        "user": "trxcllnt",
        "created_at": "2016-03-22T18:23:00Z",
        "body": "@download13 oh yes, this should be on the list. feel free to submit a PR if you're feeling generous :-). Otherwise I'm sure we'll get around to it soon.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T08:01:47Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1325,
    "title": "Include benchmarks in master branch CI build",
    "created_at": "2016-02-10T01:07:55Z",
    "closed_at": "2017-02-21T04:32:14Z",
    "labels": [
      "feature",
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1325",
    "body": "Run the benchmarks in one browser on the master branch CI job so that we can verify that benchmarks aren't broken. The data from the benchmarks can be ignored, since the machines the benchmarks will be run on are not likely to have consistent performance.\n- [ ] Check that browser console is empty after each spec\n- [ ] Add protractor to Travis config\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1325/comments",
    "author": "jeffbcross",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2016-02-10T02:13:14Z",
        "body": "They don't appear to \"fail\" in error situations though. Just return zeroes.\n"
      },
      {
        "user": "jeffbcross",
        "created_at": "2016-02-10T17:49:41Z",
        "body": "@blesh good point, I need to add a check after each benchmark to make sure nothing is logged in the browser console. The issues fixed by #1324 all correlated to errors in the browser console, but the errors aren't visible in the benchpress reports.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2017-02-21T04:32:14Z",
        "body": "Closed for staleness"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-06T19:40:40Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1182,
    "title": "Update auto-patching operators generator to handle `dom` operators",
    "created_at": "2016-01-13T16:35:05Z",
    "closed_at": "2016-01-21T03:04:04Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1182",
    "body": "This issue was pointed in #1178.\n\nThe `tools/generate-operator-patches.ts` script does not handle the operators inside the new `dom` directory.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1182/comments",
    "author": "luisgabriel",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2016-01-21T03:04:04Z",
        "body": "Closing this issue via #1205 with commit 6e941e2 .\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T12:01:43Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1142,
    "title": "Remove ScalarObservable optimizations for map, filter, reduce, scan, etc?",
    "created_at": "2016-01-06T22:01:36Z",
    "closed_at": "2016-01-13T01:07:29Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1142",
    "body": "There is an issue #1140 that just popped up (I was waiting for it). \n\nI'm neither hot nor cold on these optimizations. So let's discuss them:\n#### The Good:\n1. The optimizations only effect observables created like `Observable.of(a)`, but not `Observable.of(1,2,3)`. They only effect ScalarObservables.\n2. The optimizations doubled or tripled the speed of the operators for these Observables.\n3. No one should be doing `Observable.of(a).map(toSomethingElse)` very often. It's code that only really shows up in demos and playground code normally, and/or it's an anti-pattern usually.\n4. Generally it's a bad idea to mutate outer scoped variables inside of a map or filter handler.\n#### The Bad:\n1. Users trying to leverage map to create side effects might see funky behavior for ScalarObservables\n2. The mapping or filtering functions are effectively no longer \"lazy\". If they're expensive or they create side effects, unexpected behavior can result.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1142/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2016-01-06T22:02:51Z",
        "body": "### AGAIN: I don't care if we keep them or remove them\n\nThe idea was that we'd implement them and try them out during beta.\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2016-01-06T22:23:03Z",
        "body": "I'm in favor of this in general, but this specific `effectively no longer \"lazy\". If they're expensive or they create side effects, unexpected behavior can result` is bit concern. Every user of `of(x)` need to be aware of behavior if we're going with this.\n"
      },
      {
        "user": "trxcllnt",
        "created_at": "2016-01-06T22:34:31Z",
        "body": "We should make them lazy. If someone wants to optimize so their ScalarObservable chains are only invoked once, they can multicast with a ReplaySubject.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-01-07T01:21:23Z",
        "body": "This all sounds good... I'll let this simmer overnight.\n\nI think we should also try to add some \"protips\" or something to the docs that say things like \"If you're creating chains like `Observable.of(a).map(doSomething)`, you might be doing something weird.\"\n"
      },
      {
        "user": "staltz",
        "created_at": "2016-01-07T10:23:03Z",
        "body": "I'm also rather neutral on this one, but I tend to agree with Paul.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-01-07T18:12:06Z",
        "body": "Meh. Let's remove them for now. Individuals that want this behavior could always monkey-patch ScalarObservable I suppose.\n"
      },
      {
        "user": "chrisprice",
        "created_at": "2016-01-07T18:32:42Z",
        "body": "Just before this is done in response to my issue can I double check that the problem I had is actually what's been discussed? I have a feeling it might just be a bug (see my latest comment on the issue)....\n\nFWIW I do agree though, just not in my name! :smile:\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-01-07T22:43:58Z",
        "body": "There are two issues: 1. the optimization which were discussing removing here, and 2. an apparent bug in the optimization that needs to be fixed or removed with the optimization.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T13:02:03Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 1122,
    "title": "Interface Observer is not exported in rxjs",
    "created_at": "2015-12-31T09:53:28Z",
    "closed_at": "2016-01-04T20:47:43Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/1122",
    "body": "Using this import:\n    import \\* as Rx from 'rxjs';\n\n```\nRx.Observable<MyType> --> OK\nRx.Observer<MyType> --> Error\n```\n\nModule '\".../node_modules/rxjs/Rx\"' has no exported member 'Observer'.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/1122/comments",
    "author": "frankbenoit",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2016-01-04T02:15:07Z",
        "body": "Ah... just the TypeScript interface needs exported?  Makes sense.\n\nAs a temporary workaround, you can use the `@reactivex/rxjs` package from npm, and find the interface under `src`.\n"
      },
      {
        "user": "divramod",
        "created_at": "2016-04-11T20:38:33Z",
        "body": "@kwonoj i have the same problem. can you give a little more detailed explanation how i can make observer.create running with typescript in version 5.0.0-beta.5?\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T06:40:52Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 996,
    "title": "Add tests to ScalarObservable-spec to cover thisArgs for filter, map, reduce, etc.",
    "created_at": "2015-12-08T21:06:26Z",
    "closed_at": "2015-12-14T19:18:05Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/996",
    "body": "Just what it says. We're missing some tests there.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/996/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "luisgabriel",
        "created_at": "2015-12-08T22:08:55Z",
        "body": "I can work on this one.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T14:02:05Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 894,
    "title": "Observable.of and Observable.from must be on Observable",
    "created_at": "2015-12-05T00:12:10Z",
    "closed_at": "2015-12-08T19:29:09Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/894",
    "body": "Right now the Observable exported by `src/Observable` doesn't have `of` and `from` on it by default. It really should.\n\n`from` is required for interop at the very least.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/894/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-12-05T00:12:22Z",
        "body": "cc/ @robwormald @jeffbcross \n"
      },
      {
        "user": "jeffbcross",
        "created_at": "2015-12-05T00:24:44Z",
        "body": "whatev\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-12-08T19:29:09Z",
        "body": "Closing this issue per discussion of #922, importing into Observable creates circular dependencies. For now will require manual import until better solution comes in.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T15:01:39Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 883,
    "title": "Implement `publishLast`",
    "created_at": "2015-12-04T00:40:59Z",
    "closed_at": "2015-12-04T22:08:44Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/883",
    "body": "Now that we have AsyncSubject #850, we need to add `publishLast`.\n\nIt's basically just:\n\n``` js\nimport {multicast} from './multicast';\nimport {AsyncSubject} from '../subject/AsyncSubject';\n\nexport function publishLast() {\n  return mutlicast.call(this, new AsyncSubject());\n}\n```\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/883/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-12-04T00:50:59Z",
        "body": "I'll give it a try on this.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T15:02:05Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 875,
    "title": "Tests asserting unsubscription chains don't break ",
    "created_at": "2015-12-03T20:40:05Z",
    "closed_at": "2015-12-16T14:45:51Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/875",
    "body": "We need to add tests that each operator propagates unsubscription from the destination to the source.\n\nHere is an example:\n\n``` js\n  it('should not break unsubscription chain when unsubscribed explicitly', function () {\n    var e1 =     hot('--a--b--c--d--e----|');\n    var unsub =      '         !          ';\n    var e1subs =     '^        !          ';\n    var skip =   hot('-------------x--|   ');\n    var skipSubs =   '^        !          ';\n    var expected =  ('----------          ');\n\n    var result = e1\n      .mergeMap(function (x) { return Observable.of(x); })\n      .skipUntil(skip)\n      .mergeMap(function (x) { return Observable.of(x); });\n\n    expectObservable(result, unsub).toBe(expected);\n    expectSubscriptions(e1.subscriptions).toBe(e1subs);\n    expectSubscriptions(skip.subscriptions).toBe(skipSubs);\n  });\n```\n\nNotice the use of the `mergeMap` sandwich there.\n\n---\n- [x] buffer\n- [x] bufferCount\n- [x] bufferTime\n- [x] bufferToggle\n- [x] bufferWhen\n- [x] catch\n- [x] combineAll\n- [x] combineLatest\n- [x] concat-static\n- [x] concat\n- [x] concatAll\n- [x] concatMap\n- [x] concatMapTo\n- [x] count\n- [x] debounce\n- [x] debounceTime\n- [x] defaultIfEmpty\n- [x] delay\n- [x] dematerialize\n- [x] distinctUntilChanged\n- [x] distinctUntilKeyChanged\n- [x] do\n- [x] elementAt\n- [x] every\n- [x] exhaust\n- [x] exhaustMap\n- [x] expand\n- [x] filter\n- [x] find\n- [x] findIndex\n- [x] first\n- [x] groupBy\n- [x] ignoreElements\n- [x] isEmpty\n- [x] last\n- [x] map\n- [x] mapTo\n- [x] materialize\n- [x] max\n- [x] merge-static\n- [x] merge\n- [x] mergeAll\n- [x] mergeMap\n- [x] mergeMapTo\n- [x] mergeScan\n- [x] min\n- [x] multicast\n- [x] observeOn\n- [x] partition\n- [x] publish\n- [x] publishBehavior\n- [x] publishLast\n- [x] publishReplay\n- [x] reduce\n- [x] repeat\n- [x] retry\n- [x] retryWhen\n- [x] sample\n- [x] sampleTime\n- [x] scan\n- [x] share\n- [x] single\n- [x] skip\n- [x] skipUntil\n- [x] skipWhile\n- [x] startWith\n- [x] subscribeOn\n- [x] switch\n- [x] switchMap\n- [x] switchMapTo\n- [x] take\n- [x] takeUntil\n- [x] takeWhile\n- [x] throttle\n- [x] throttleTime\n- [x] timeInterval\n- [x] timeout\n- [x] timeoutWith\n- [x] toArray\n- [x] window\n- [x] windowCount\n- [x] windowTime\n- [x] windowToggle\n- [x] windowWhen\n- [x] withLatestFrom\n- [x] zip-static\n- [x] zip\n- [x] zipAll\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/875/comments",
    "author": "staltz",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-12-16T14:45:50Z",
        "body": "All done. Closed.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T14:01:55Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 696,
    "title": "implement skipWhile",
    "created_at": "2015-11-10T22:27:30Z",
    "closed_at": "2015-11-13T00:46:54Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/696",
    "body": "we don't have `skipWhile` implemented yet, and it's probably a core operator.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/696/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "jinroh",
        "created_at": "2015-11-11T10:17:38Z",
        "body": "I'd be happy to take this one !\n"
      }
    ]
  },
  {
    "number": 695,
    "title": "Implement takeWhile",
    "created_at": "2015-11-10T22:27:00Z",
    "closed_at": "2015-11-13T00:15:43Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/695",
    "body": "We don't have `takeWhile` implemented yet. It's probably a core operator.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/695/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-11-10T22:29:19Z",
        "body": "I'll try on this.\n"
      }
    ]
  },
  {
    "number": 666,
    "title": "comprehensive tests for throttle",
    "created_at": "2015-11-06T21:23:02Z",
    "closed_at": "2015-11-11T18:30:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/666",
    "body": "This probably relates to #496, so be aware of that if the work happens to be split.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/666/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-11T08:44:08Z",
        "body": "I can do this too.\n"
      }
    ]
  },
  {
    "number": 658,
    "title": "comprehensive tests for share",
    "created_at": "2015-11-05T01:27:55Z",
    "closed_at": "2015-11-25T20:57:33Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/658",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/658/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-05T11:20:40Z",
        "body": "I can do this.\n"
      }
    ]
  },
  {
    "number": 657,
    "title": "comprehensive tests for multicast",
    "created_at": "2015-11-05T01:27:37Z",
    "closed_at": "2015-11-25T18:45:55Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/657",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/657/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-05T11:20:24Z",
        "body": "I can do this.\n"
      }
    ]
  },
  {
    "number": 656,
    "title": "comprehensive tests for publishReplay",
    "created_at": "2015-11-05T01:27:17Z",
    "closed_at": "2015-11-10T19:42:23Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/656",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/656/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-05T11:19:23Z",
        "body": "I can do this.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-11-10T19:27:43Z",
        "body": "This can be closed.\n"
      }
    ]
  },
  {
    "number": 655,
    "title": "Comprehensive tests for publishBehavior",
    "created_at": "2015-11-05T01:26:45Z",
    "closed_at": "2015-11-10T19:42:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/655",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/655/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-05T11:19:26Z",
        "body": "I can do this.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-11-10T19:27:00Z",
        "body": "This can be closed.\n"
      }
    ]
  },
  {
    "number": 654,
    "title": "comprehensive tests for publish",
    "created_at": "2015-11-05T01:26:31Z",
    "closed_at": "2015-11-10T19:42:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/654",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/654/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-11-05T11:19:29Z",
        "body": "I can do this.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-11-10T19:27:23Z",
        "body": "This can be closed.\n"
      }
    ]
  },
  {
    "number": 648,
    "title": "Support absolute time on `Observable.timer`",
    "created_at": "2015-11-04T21:12:40Z",
    "closed_at": "2015-11-18T22:43:24Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/648",
    "body": "Just what it says. We should be supporting absolute time on Observable.timer in a similar fashion to RxJS 4.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/648/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "luisgabriel",
        "created_at": "2015-11-04T21:13:37Z",
        "body": "I can work on this one.\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-11-04T21:16:54Z",
        "body": "I just couple of minutes late than @luisgabriel to work on this ;)\n"
      },
      {
        "user": "luisgabriel",
        "created_at": "2015-11-04T21:28:40Z",
        "body": "@kwonoj feel free to take this one then. I'm not sure how soon I'll be able to work on it. ;)\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-11-04T21:41:38Z",
        "body": "@luisgabriel no, it's completely ok. :)\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-11-04T21:43:42Z",
        "body": "Do you two need a tie breaker? Because I'll just do what I do with my kids and say @luisgabriel was \"here first.\"\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-11-16T22:44:39Z",
        "body": "Took this one to close opened issues.\n"
      }
    ]
  },
  {
    "number": 554,
    "title": "Add tests for repeat unsubscription",
    "created_at": "2015-10-16T22:34:37Z",
    "closed_at": "2015-10-26T20:59:35Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/554",
    "body": "We need to make sure that the source observable's tear down logic is called before everything repeats again, so we have to make sure we're unsubscribing from the previous subscription before repeating.\n\nI don't think we have tests around this.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/554/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-19T11:27:35Z",
        "body": "I can do this one.\n"
      }
    ]
  },
  {
    "number": 546,
    "title": "retry and retryWhen don't call unsubscription logic when the source observable errors",
    "created_at": "2015-10-16T01:03:19Z",
    "closed_at": "2015-10-20T12:41:59Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/546",
    "body": "Basically this scenario:\n\n``` js\nObservable.create(observer => {\n  observer.error('bad');\n  return () => {\n    console.log('tear down');\n  };\n}).retryWhen(errors => Observable.timer(3000))\n```\n\nthat `\"tear down\"` is never logged to console.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/546/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-16T08:54:57Z",
        "body": "I can do this\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-19T09:58:16Z",
        "body": "This can be now closed.\n"
      }
    ]
  },
  {
    "number": 540,
    "title": "Comprehensive marble tests for concatMap",
    "created_at": "2015-10-15T14:03:47Z",
    "closed_at": "2015-10-26T20:27:56Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/540",
    "body": "(I didn't find tests for concatMap, maybe we should have it)\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/540/comments",
    "author": "staltz",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-10-17T00:05:04Z",
        "body": "Yes we should. I just found that same thing for scan: #555. I think we need to go back to @trxcllnt's original mega-pr and make sure we have all of the operators created at that point tested.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-19T09:58:57Z",
        "body": "I'll take this one.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-19T11:07:20Z",
        "body": "Found a potential bug.\n\nRxJS 4 does this:\n\n``` js\nvar e1 = hot(    '--a---b---c---|');\nvar inner = cold(  '-1-2-3-4|    ');\nvar expected =   '---1-2#        ';\n\nvar result = e1.concatMap(value => {\n  if (value === 'b') {\n    throw 'error';\n  }\n  return inner;\n});\n```\n\nwhile RxJS Next does this:\n\n``` js\nvar e1 = hot(    '--a---b---c---|');\nvar inner = cold(  '-1-2-3-4|    ');\nvar expected =   '---1-2-3-4#    ';\n\nvar result = e1.concatMap(value => {\n  if (value === 'b') {\n    throw 'error';\n  }\n  return inner;\n});\n```\n\nIf we are to mirror RxJS 4's functionality, then it's a bug. But we might also be redefining how concatMap should work.\n\nFeedback? @blesh ?\n"
      },
      {
        "user": "trxcllnt",
        "created_at": "2015-10-20T21:31:25Z",
        "body": "@staltz not a bug, just an artifact of changing the default scheduling model from trampolining to recursive. Try your first example in Rx 4 using the ImmediateScheduler and you'll get the same results as the Rx Next example.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-21T10:51:31Z",
        "body": "Good to know\n"
      }
    ]
  },
  {
    "number": 528,
    "title": "(re)consider dist strategery",
    "created_at": "2015-10-14T16:41:31Z",
    "closed_at": "2015-10-15T17:23:45Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/528",
    "body": "per the new changes in Typescript 1.6.2 and Angular2's support to change over to it, some structural issues i've run into while attempting to (properly) bring Rx into NG2 could be eased with some changes:\n\nHaving the `typings: \"./dist/es6/cjs\"` field in package.json is a good start (or will be, once a release ships) but this only allows usage of the root entry point, eg:\n`import {Observable} from '@reactivex/rxjs'` (and there's a mismatch between cjs/es6 paths here)\n\nIf I want to grab Observable from a TypeScript codebase, and leverage the generated type information, I can't: \n\n`import Observable from '@reactivex/rxjs/dist/cjs/Observable'`\nfails because TS cannot find module, since .d.ts file isn't in this location.\n\n`var Observable = require('@reactivex/rxjs/dist/cjs/Observable');`\n\"works\" but can't find the typedefs, so it can't be subclassed / typechecked etc.\n\n`import Observable from '@reactivex/rxjs/src/Observable'` \"works\" internally (eg, in the NG2 build process / typechecking) but fails immediately in public because that transpiles to `require('@reactivex/rxjs/src/Observable') //implied .js`\n\nSuggestions:\n- while I know you're using Babel to generate CJS because of defaults, it would be helpful to have the generated .d.ts end up in the same path. That would alleviate most of our issues.\n- Add an index.ts file that simply `exports * from './src/Rx'`\n- Consider using TS to transpile the src folder (in place) before shipping?\n\nHappy to do any/all of the above but wanted to discuss before PR'ing.\n\ncc @alexeagle as he's been dealing with the typings stuff in NG2\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/528/comments",
    "author": "robwormald",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-10-14T18:56:07Z",
        "body": "As long as it doesn't hurt the behavior of the library, specifically the issue around default exports in CJS, I don't see a problem with it.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-14T19:02:41Z",
        "body": "Honestly, I was sort of waiting for issues like this to arise. I'm way more likely to use Babel with RxJS than TypeScript, personally. So I haven't really dog-fooded any typings issues.\n"
      }
    ]
  },
  {
    "number": 501,
    "title": "defaultIfEmpty micro perf test broken for Rx 4.0.0",
    "created_at": "2015-10-09T23:55:50Z",
    "closed_at": "2015-10-12T16:26:04Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/501",
    "body": "Currently it's not returning any value at all.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/501/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-10-10T00:43:58Z",
        "body": "Seems I got some clue.. will update PR.\n"
      }
    ]
  },
  {
    "number": 499,
    "title": "Perf regression in `zip` operator",
    "created_at": "2015-10-09T23:02:39Z",
    "closed_at": "2015-10-10T03:50:04Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/499",
    "body": "Micro perf tests are now showing `zip` to be 75% slower than Rx 4. I'm not sure what happened there.\n\nThere are a few possibilities:\n1. Changes made to `zip` to support iterators caused the regression, but weren't noticed.\n2. Rx 4.0.0 has improved `zip` since I've last run the tests against it, and it's quite a bit faster.\n3. Both?\n\nEither way, we need to get it back up to speed\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/499/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "mattpodwysocki",
        "created_at": "2015-10-09T23:07:42Z",
        "body": "@blesh pretty safe to say I did a lot of perf work for 4.x to beat 5.x to challenge us all\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-10-09T23:07:49Z",
        "body": "Seems v4 did quite good optimization,  \n\n> old zip() with immediate scheduler x 96,348 ops/sec ±3.19% (83 runs sampled)\n> new zip() with immediate scheduler x 51,863 ops/sec ±3.46% (84 runs sampled)\n>         85.77% slower than Rx v 4.0.0\n> \n> old zip() with immediate scheduler x 7,586 ops/sec ±2.89% (86 runs sampled)\n> new zip() with immediate scheduler x 56,612 ops/sec ±2.74% (82 runs sampled)\n>         646.22% faster than Rx v 3.1.2\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-09T23:54:41Z",
        "body": "Cool, @mattpodwysocki!  Well I guess it's not a \"regression\" then.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-09T23:54:50Z",
        "body": "... but still, we need it to be faster.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-10T03:50:04Z",
        "body": "It seems there are some bugs in the 4.0 zip implementation. Closing this until we're sure 4.0 zip is working properly.\n"
      }
    ]
  },
  {
    "number": 496,
    "title": "Add throttle operator with durationSelector",
    "created_at": "2015-10-09T18:53:32Z",
    "closed_at": "2015-11-11T18:30:30Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/496",
    "body": "Relates to some discussion at #493..\n\nThe only thing we need to figure out, is whether to attempt an overload on the existing operator, or rename it to `throttleTime` and add a `throttle` operator that accepts an observable.\n\nIt depends on the complexity of the overload and the perf hit.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/496/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-11-05T00:28:40Z",
        "body": "This should end up mirroring what was done for `debounce` and `debounceTime`\n\nAlso the tests are weak around this operator.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-11-11T08:44:13Z",
        "body": "I can do this.\n"
      }
    ]
  },
  {
    "number": 495,
    "title": "A development \"watch\" process",
    "created_at": "2015-10-09T18:38:25Z",
    "closed_at": "2015-10-14T19:20:17Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/495",
    "body": "I'm sure there are easy ways to do this with command line tools, but I haven't looked into it. Either way I think this would be great, especially if we get #494 done.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/495/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-10-09T18:47:30Z",
        "body": "I'll also look for this as well as #494.\n"
      }
    ]
  },
  {
    "number": 494,
    "title": "Move linting to start of build_test and have it fail quickly",
    "created_at": "2015-10-09T18:37:36Z",
    "closed_at": "2015-10-10T00:00:03Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/494",
    "body": "Just what it says. I think it would be ideal to know that linting failed immediately, so you don't have to wait for the build and the tests before you realize you have a typo.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/494/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-10-09T18:41:37Z",
        "body": "This'll be quite quick changes, I'll create PR.\n"
      }
    ]
  },
  {
    "number": 486,
    "title": "Rename Throttle to Debounce and Vice Versa",
    "created_at": "2015-10-08T19:44:34Z",
    "closed_at": "2015-10-08T23:07:52Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/486",
    "body": "Related to discussion here #480 \n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/486/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-10-08T19:46:06Z",
        "body": "I was giving some effort to create test coverage for those operators, let me create this PR also as starting  point.\n"
      }
    ]
  },
  {
    "number": 475,
    "title": "Implement dematerialize",
    "created_at": "2015-10-07T08:34:53Z",
    "closed_at": "2015-10-08T22:44:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/475",
    "body": "Maybe no one noticed, but we still don't have the `dematerialize` operator, to match the presence of `materialize`.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/475/comments",
    "author": "staltz",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-10-07T16:32:59Z",
        "body": "Heh... oops\n"
      }
    ]
  },
  {
    "number": 470,
    "title": "Use Closure Compiler on global output file",
    "created_at": "2015-10-06T22:06:30Z",
    "closed_at": "2015-10-07T16:28:44Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/470",
    "body": "In an effort to reduce library size, use Google Closure compiler on output global `Rx.js` file to create `Rx.min.js` ... currently, uglify isn't doing that great of a job reducing the size of the minified output.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/470/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-07T07:27:15Z",
        "body": "Seems like this can be closed.\n"
      }
    ]
  },
  {
    "number": 469,
    "title": "Remove repeated \"runtime\" code from global output.",
    "created_at": "2015-10-06T22:05:12Z",
    "closed_at": "2015-11-10T19:42:14Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/469",
    "body": "Currently the ES6 -> ES5 transpilation process is putting class assertion functions inline with each module file. We should get rid of that so those class related functions are only defined once.\n\ncc/ @jeffbcross @vsavkin \n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/469/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-11-10T19:27:49Z",
        "body": "I assume this can be closed by we're moving away from babel, what do you think? @blesh \n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-11-10T19:42:14Z",
        "body": "I agree.\n"
      }
    ]
  },
  {
    "number": 425,
    "title": "count(predicate) plus tests",
    "created_at": "2015-09-30T15:45:33Z",
    "closed_at": "2015-10-02T07:09:40Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/425",
    "body": "`count()` is currently missing the predicate function as argument.\n\nShould we do this or not? \n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/425/comments",
    "author": "staltz",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-09-30T20:20:11Z",
        "body": "Yes, that should be a thing.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-02T07:09:25Z",
        "body": "This is closed by #436 @blesh \n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-02T07:09:40Z",
        "body": "Actually I have closing powers, so here we go.\n"
      }
    ]
  },
  {
    "number": 388,
    "title": "Comprehensive marble tests for switch",
    "created_at": "2015-09-23T22:42:51Z",
    "closed_at": "2015-10-07T16:32:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/388",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/388/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-07T08:21:41Z",
        "body": "This issue can be closed.\n\nPR #467 added the tests that were missing.\n"
      }
    ]
  },
  {
    "number": 386,
    "title": "Comprehensive marble tests for count()",
    "created_at": "2015-09-23T22:42:35Z",
    "closed_at": "2015-10-02T17:36:27Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/386",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/386/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-09-29T10:35:55Z",
        "body": "I assign myself. (Can't actually do that in Github so I'll just comment :P)\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-09-29T10:56:11Z",
        "body": "Ok, I remove my assignment because I noticed #406 exists, just before pushing. :P\n@blesh we need to really start using the assignee feature here.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-01T22:58:00Z",
        "body": "@staltz can this be closed now? Do we have parody with the old tests?\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-02T06:50:40Z",
        "body": "Yes, can be closed\n"
      }
    ]
  },
  {
    "number": 385,
    "title": "Comprehensive marble tests for windowToggle",
    "created_at": "2015-09-23T22:42:16Z",
    "closed_at": "2015-10-16T23:05:20Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/385",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/385/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-15T14:01:54Z",
        "body": "Forgot to mention to assign me. But I sent already a PR for this.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-16T23:05:42Z",
        "body": "I think #539 closed this.\n"
      }
    ]
  },
  {
    "number": 381,
    "title": "Comprehensive marble tests for buffer",
    "created_at": "2015-09-23T22:41:43Z",
    "closed_at": "2015-10-14T19:08:57Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/381",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/381/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-07T08:08:58Z",
        "body": "Should not yet be closed.\n\nTests from RxJS 3/4 are mostly covered. Just a few still missing.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-13T14:42:45Z",
        "body": "I can this one.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-14T19:14:29Z",
        "body": "Looks like `bufferToggle` is the last one on this list requiring tests.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-14T19:46:03Z",
        "body": "Yep\n"
      }
    ]
  },
  {
    "number": 378,
    "title": "comprehensive marble tests for windowCount",
    "created_at": "2015-09-23T22:40:53Z",
    "closed_at": "2015-10-14T18:54:02Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/378",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/378/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-07T07:59:05Z",
        "body": "Should not yet be closed. Even though it has received some PRs, there are a few edge cases missing to be tested.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-13T07:51:46Z",
        "body": "I can do this.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-14T08:45:24Z",
        "body": "Please close\n"
      }
    ]
  },
  {
    "number": 377,
    "title": "comprehensive marble tests for windowTime",
    "created_at": "2015-09-23T22:40:40Z",
    "closed_at": "2015-10-14T18:53:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/377",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/377/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-13T07:51:36Z",
        "body": "I can do this.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-14T08:45:12Z",
        "body": "Please close\n"
      }
    ]
  },
  {
    "number": 376,
    "title": "comprehensive marble tests for window",
    "created_at": "2015-09-23T22:40:28Z",
    "closed_at": "2015-10-14T18:54:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/376",
    "body": "Should duplicate the current RxJS 3/4 tests\n\nShould adhere to our contribution guidelines and operator authoring docs.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/376/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-10-12T13:11:59Z",
        "body": "I can take this one.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-12T16:06:48Z",
        "body": "I'm almost done with this. Now I'm adding tests for the basic cases (empty, never, etc), but since these cases are not specified in RxJS legacy tests, I actually don't know what to expect.\n\nE.g. is this what we should expect?\n\n``` js\n  it('should return empty Observable if source is empty and closings are basic', function () {\n    var source = cold('|');\n    var closings = cold('--x--x--|');\n    var expected = '|';\n\n    var result = source.window(closings);\n\n    expectObservable(result).toBe(expected);\n  });\n```\n\nThe actual execution is:\n\n``` js\n  it('should return empty Observable if source is empty and closings are basic', function () {\n    var source =   cold('|');\n    var closings = cold('--x--x--|');\n    var expected =      '(w|)';\n    var w =         cold('|');\n    var expectedValues = { w: w };\n\n    var result = source.window(closings);\n\n    expectObservable(result).toBe(expected, expectedValues);\n  });\n```\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-13T07:50:56Z",
        "body": "This one can be closed.\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-13T11:19:46Z",
        "body": "@blesh some input here would be good. (RxJS legacy tests don't specify the following, by the way)\n\nThis tests passes for `window`:\n\n``` js\n  it('should return a single empty window if source is empty and closing is empty', function () {\n    var source =   cold('|');\n    var closings = cold('|');\n    var expected =      '(w|)';\n    var w =         cold('|');\n    var expectedValues = { w: w };\n\n    var result = source.window(closings);\n\n    expectObservable(result).toBe(expected, expectedValues);\n  });\n```\n\nThis test passes for `windowCount`:\n\n``` js\n  it('should return a single empty window if source is empty', function () {\n    var source =   cold('|');\n    var expected =      '|';\n\n    var result = source.windowCount(2, 1);\n\n    expectObservable(result).toBe(expected);\n  });\n```\n\nNotice the inconsistency: one returns an empty observable, the other returns an observable with one window, and the window is empty.\n\nWe should probably try to make these uniform across the variants of window, otherwise people can get quite confused for no good reason. But to which direction? Should we prefer `|` or `(w|)`?\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-13T11:59:14Z",
        "body": "Ok, I now discovered by trying out code in JSBin that RxJS legacy does this:\n\n``` js\nvar source = hot('^----a--b--c--d--e--f--|');\n// windowCount(2,1)\nvar expected =   'x----------y-----z-----|';\nvar x = cold(    '-----a--(b|)            ');\nvar y = cold(               'c--(d|)      ');\nvar z = cold(                     'e--(f|)');\n```\n\nRxJS Next does this:\n\n``` js\nvar source = hot('^----a--b--c--d--e--f--|');\n// windowCount(2,1)\nvar expected =   '-----x-----y-----z-----|';\nvar x = cold(         'a--(b|)            ');\nvar y = cold(               'c--(d|)      ');\nvar z = cold(                     'e--(f|)');\n```\n\nI'd consider RxJS Next's `windowCount` behavior a bug, because it's inconsistent with RxJS legacy and also with Next's `window` and `windowTime`.\n\nI think this issue can be closed, because the bug is related to #378.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-13T17:19:11Z",
        "body": "> I'd consider RxJS Next's windowCount behavior a bug\n\nI completely agree, and I wrote it. I think I was working with `bufferCount` in mind, or perhaps I was trying to be too efficient.\n\nThis test would fail with RxJS 5, and it shouldn't.\n\n``` js\nvar source = hot('^----a-----');\n// windowCount(2,1)\nvar expected =   'x----------';\nvar x = cold(    '-----a-----');\n```\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-10-13T17:20:46Z",
        "body": "Or testing against `Observable.never()`... again... that would probably fail in RxJS 5 right now.\n\n``` js\nvar source = Observable.never();\n// windowCount(2,1)\nvar expected =   'x----------';\nvar x = cold(    '-----------');\n```\n"
      },
      {
        "user": "staltz",
        "created_at": "2015-10-14T08:45:49Z",
        "body": "Please close\n"
      }
    ]
  },
  {
    "number": 350,
    "title": "Add micro perf tests for existing operators",
    "created_at": "2015-09-18T21:17:49Z",
    "closed_at": "2016-01-15T21:16:54Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/350",
    "body": "From #100 \n- [x] buffer (buffer(obs))\n- [ ] bufferTime (bufferWithTime)\n- [ ] bufferToggle (buffer(obs, fn))\n- [ ] bufferWhen (buffer(fn))\n- [ ] delay\n- [x] forkJoin\n- [x] mapTo (map(obj))\n- [ ] multicast\n- [ ] publish\n- [x] retry\n- [ ] retryWhen\n- [x] skipUntil\n- [ ] subscribeOn\n- [ ] switchMap\n- [ ] takeUntil\n- [x] toPromise\n- [ ] window (window(obs))\n- [ ] windowTime (windowWithTime)\n- [ ] windowToggle (window(obs, fn))\n- [ ] windowWhen (window(fn))\n- [ ] withLatestFrom\n- [ ] zipAll\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/350/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "mattpodwysocki",
        "created_at": "2015-10-08T07:28:00Z",
        "body": "@blesh maybe I'm naive here, but why is `mapTo` required when `map` for example in RxJS supports wrapping objects that are passed in.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-12-01T01:19:11Z",
        "body": "> @blesh maybe I'm naive here, but why is mapTo required when map for example in RxJS supports wrapping objects that are passed in.\n\nreducing type checking in a really, really commonly used operator as well as making it less polymorphic.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2016-01-15T21:16:54Z",
        "body": "I think for the most part we have the metrics we need here. Anything missing can be added ad hoc. Closing this issue.\n"
      },
      {
        "user": "lock[bot]",
        "created_at": "2018-06-07T12:02:17Z",
        "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n"
      }
    ]
  },
  {
    "number": 346,
    "title": "Notification `create` methods could return consts in some cases",
    "created_at": "2015-09-18T19:50:19Z",
    "closed_at": "2015-09-23T17:59:42Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/346",
    "body": "In #206, @abersnaze pointed out that we could save on object allocations in `materialize` and `dematerialize` (as well as our TestScheduler) by returning the same references, or perhaps tokens of some sort (to further reduce object allocations), for common return values like `Notification.createComplete()` and `Notification.createNext(null)`, etc.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/346/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-09-21T16:20:49Z",
        "body": "Interested in creating PR for this - which way would be feasible? Initial thought I could think some ways like\n- create `NotificationLite` class as similar to RxJava does have\n- allow additional parameter into existing interface like `createComplete(getStaticReference?:boolean)` to return specific object reference\n- let existing interface automatically returns by value, i.e `createNext(value) { if (!value) { return existingReference }....}`\n\nOr possibly other, better way. Any suggestion would be appreciated.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-09-22T05:29:55Z",
        "body": "I think our current implementation is already pretty \"lite\"... but we can probably just use a static reference for all `complete` notifications, as well as `undefined` value notifications.\n"
      },
      {
        "user": "kwonoj",
        "created_at": "2015-09-22T05:38:07Z",
        "body": "Got it, will try to create to return static reference per specific cases as similar to 3rd way's pseudo does.\n"
      }
    ]
  },
  {
    "number": 334,
    "title": "rename `switchAll` to `switch`",
    "created_at": "2015-09-17T21:45:02Z",
    "closed_at": "2015-09-18T03:42:15Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/334",
    "body": "The `All` is implied, really. Since it was just `switch` in previous versions of Rx, I think we can leave it `switch`. (this is similar to not wanting `zipMap` and just having `zip`)\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/334/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "trxcllnt",
        "created_at": "2015-09-17T22:49:32Z",
        "body": "👍\n"
      }
    ]
  },
  {
    "number": 333,
    "title": "Rename `flatMap` to `mergeMap`",
    "created_at": "2015-09-17T21:43:25Z",
    "closed_at": "2015-09-18T18:47:40Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/333",
    "body": "Again, the result of bike shedding elsewhere. cc/ @jhusain \n\nHowever with this one, since flatMap is so popular and known from other languages/libraries, we might want to leave an alias.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/333/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "tetsuharuohzeki",
        "created_at": "2015-09-18T02:34:00Z",
        "body": "I think we **should** leave `flatMap()` as an alias if we do this change. flatMap is very popular terminology as to flattening mapping name so it's not better to remove `flatMap` name for interoperability of concept of this area.\n"
      },
      {
        "user": "jhusain",
        "created_at": "2015-09-18T13:26:34Z",
        "body": "No problem leaving this alias.\n\nJH\n\n> On Sep 17, 2015, at 7:34 PM, Tetsuharu OHZEKI notifications@github.com wrote:\n> \n> I think we should leave flatMap() as an alias if we do this change. flatMap is very popular terminology as to flattening mapping name so it's not better to remove flatMap name for interoperability of concept of this area.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      }
    ]
  },
  {
    "number": 332,
    "title": "Rename `switchLatest` to `switchMap`",
    "created_at": "2015-09-17T21:41:45Z",
    "closed_at": "2015-09-22T05:23:09Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/332",
    "body": "It's really switchMap. (same as `flatMapLatest`), but `switchMap` is the name we landed on from bikeshedding\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/332/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "pselle",
        "created_at": "2015-09-21T20:03:10Z",
        "body": "Looks like this should be closed\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-09-22T05:23:09Z",
        "body": "Yes. Thank you, @pselle!\n"
      }
    ]
  },
  {
    "number": 309,
    "title": "Find all tests with `setTimeout` in them and replace them",
    "created_at": "2015-09-14T16:32:19Z",
    "closed_at": "2015-11-05T01:28:41Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/309",
    "body": "Now that we have the TestScheduler, I'm sick of waiting for the tests with _actual_ timing in them. I need to find them and kill them, replacing them with TestScheduler \"marble\" tests.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/309/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "kwonoj",
        "created_at": "2015-09-14T16:38:10Z",
        "body": "Candidates are (most of) all test cases exist under /spec/**, is that correct?\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-09-14T16:38:51Z",
        "body": "Yes, that's what I'm talking about.\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-11-05T01:28:41Z",
        "body": "I think we've accomplished this for the most part.\n"
      }
    ]
  },
  {
    "number": 265,
    "title": "Change scheduler `schedule` signature",
    "created_at": "2015-09-04T17:15:21Z",
    "closed_at": "2015-09-04T19:12:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/265",
    "body": "Funny enough, I feel like this is the first way I did scheduling, but @trxcllnt is resurrecting it...\n\nInstead of:\n\n``` TypeScript\nschedule(delay: number, state:any, work:(state?: any) => Subscription | void) : Subscription\n```\n\nit should be:\n\n``` TypeScript\nschedule(work:(state?: any) => Subscription | void, delay: number = 0, state?: any) : Subscription\n```\n\nThis actually brings it _sort of_ inline with methods like `setTimeout` to a degree.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/265/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "headinthebox",
        "created_at": "2015-09-04T19:01:09Z",
        "body": "Any reason you have the state parameter?\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-09-04T19:18:57Z",
        "body": "@headinthebox it's to pass data/parameters to the `work` function, mostly.\n\n``` js\nsomeScheduler.schedule(dispatch, 100, { name: 'world' });\n\nfunction dispatch(state) {\n  console.log('hello ' + state.name);\n}\n```\n"
      }
    ]
  },
  {
    "number": 133,
    "title": "Add do",
    "created_at": "2015-07-28T22:18:39Z",
    "closed_at": "2015-08-31T20:45:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/133",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/133/comments",
    "author": "ktrott",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-08-31T20:45:58Z",
        "body": "This was done a while ago. \n"
      }
    ]
  },
  {
    "number": 131,
    "title": "Add finally",
    "created_at": "2015-07-28T22:18:10Z",
    "closed_at": "2015-08-15T00:27:07Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/131",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/131/comments",
    "author": "ktrott",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-08-15T00:27:07Z",
        "body": "closed by 526e4c92f0a2b1670aebf7cde39063657f47b684\n"
      }
    ]
  },
  {
    "number": 128,
    "title": "Add defaultIfEmpty",
    "created_at": "2015-07-28T22:17:33Z",
    "closed_at": "2015-08-13T22:22:50Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/128",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/128/comments",
    "author": "ktrott",
    "comments": [
      {
        "user": "pselle",
        "created_at": "2015-08-13T22:12:07Z",
        "body": "Closed by the above PR :smile: \n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-08-13T22:22:50Z",
        "body": "Thanks again @pselle! \n"
      }
    ]
  },
  {
    "number": 83,
    "title": "Add distinctUntilChanged operator",
    "created_at": "2015-07-16T00:34:04Z",
    "closed_at": "2015-08-15T00:28:49Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/83",
    "body": "Might be nice to re-think the API on this one slightly. It seems very uncommon to use the keySelector first argument. Interested in hearing anecdotes to the contrary.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/83/comments",
    "author": "steveorsomethin",
    "comments": [
      {
        "user": "staltz",
        "created_at": "2015-07-29T12:04:48Z",
        "body": ">  It seems very uncommon to use the keySelector first argument.\n\nAgreed.\n\nThe comparer can be used to select the key, if needed. So this\n\n``` js\nvar obs = observable.distinctUntilChanged(x => x.id, (x, y) => x === y);\n```\n\nbecomes\n\n``` js\nvar obs = observable.distinctUntilChanged((x, y) => x.id === y.id);\n```\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-08-15T00:28:48Z",
        "body": "closed by f9ba4da3fe26db233c7553cf070bd769bb182515\n"
      }
    ]
  },
  {
    "number": 81,
    "title": "Add expand operator",
    "created_at": "2015-07-16T00:32:07Z",
    "closed_at": "2015-08-15T00:28:01Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/81",
    "body": "",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/81/comments",
    "author": "steveorsomethin",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-08-15T00:28:01Z",
        "body": "closed by 47b178bddba65272f957602b8a6c69f79cc73da6\n"
      }
    ]
  },
  {
    "number": 6,
    "title": "Scheduler design - Input needed",
    "created_at": "2015-03-25T18:22:40Z",
    "closed_at": "2015-04-06T17:09:41Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/ReactiveX/rxjs/issues/6",
    "body": "I spent a little time talking with @trxcllnt yesterday about scheduler design. I've also glossed over this briefly with @jhusain and @benjchristensen \n\nI have a REALLY, REALLY primitive impl in the codebase now, but it needs work. In particular it needs a better design.\n\nRight now it's a global scheduler. But you'll notice I added a dispose() method to it. This is because I initially created it as a class, and thought scheduling might be instance based. This would make scheduling more flexible. However, global scheduling is _very_ useful for things like Framework lifecycles (@igorminar, @machty).\n\nI'm looking for input as to how to make this flexible but easy to understand for authors.\n",
    "comments_url": "https://api.github.com/repos/ReactiveX/rxjs/issues/6/comments",
    "author": "benlesh",
    "comments": [
      {
        "user": "benlesh",
        "created_at": "2015-03-25T18:22:53Z",
        "body": "Also, PLEASE tell me if I'm doing something stupid. lol\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-03-25T18:27:37Z",
        "body": "... and I do realize the primitive scheduler I've put in place is an \"execute until done\" sort of scheduler. Meaning it doesn't provide gaps for other code execution. This is a bare-metal simplistic impl. I think for most browser-based use cases, adding gaps ala MicroTask scheduling probably isn't completely necessary because the event stream sources themselves will be async, but there's definitely a need for that type of scheduler.\n"
      },
      {
        "user": "machty",
        "created_at": "2015-03-25T21:25:26Z",
        "body": "@blesh sounds like you meant to provide a link to the code, no?\n"
      },
      {
        "user": "benlesh",
        "created_at": "2015-04-06T17:09:41Z",
        "body": "Closing this for now. I feel like the Scheduling is in an okay place.\n"
      }
    ]
  }
]