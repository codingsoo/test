[
  {
    "number": 13969,
    "title": "Publishing private plugins to an internal artifactory",
    "created_at": "2022-10-03T12:15:26Z",
    "closed_at": "2022-10-28T05:57:12Z",
    "labels": [
      "question",
      "plugin"
    ],
    "url": "https://github.com/backstage/backstage/issues/13969",
    "body": "## Summary\r\n\r\nHello,\r\nWe are interested in creating internal plugins which we do not wish to share with the outside world, hence needing to privately hosting it. We use JFrog Artifactory.\r\nIs there any way nowadays to privately publishing plugins?\r\n\r\nThank you\r\nGilad",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/13969/comments",
    "author": "GiladFeder",
    "comments": [
      {
        "user": "OrkoHunter",
        "created_at": "2022-10-03T14:05:46Z",
        "body": "Hi @GiladFeder, setting up a private NPM host like JFrog Artifactory is the right way to manage private Backstage plugins. Companies use custom NPM scopes and name their plugin packages `@internal/backstage-plugin-x` or similar.\r\n\r\nI have not done it myself, but I believe you need to make sure you've set the following\r\n1. In your private plugins' `package.json` files, update `publishConfig` in `package.json` to include your custom `registry` link.\r\n2. Make sure you have set the registry to your custom JFrog artifactory link using `npm config set registry`.\r\n3. If you have developers working on your backstage instance, make sure they have added and setup the auth in their laptops to the custom registry.\r\n\r\nIf you have already used JFrog Artifactory for publishing and installign npm packages, backstage plugins should be no different! Let me know if you have additional questions."
      },
      {
        "user": "OrkoHunter",
        "created_at": "2022-10-28T05:57:12Z",
        "body": "@GiladFeder I'm closing the issue. Feel free to re-open if the problem is not solved for you."
      }
    ]
  },
  {
    "number": 3091,
    "title": "Question about adding a new plugin",
    "created_at": "2020-10-26T08:02:27Z",
    "closed_at": "2021-04-05T13:05:24Z",
    "labels": [
      "enhancement",
      "question",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/3091",
    "body": "We have a Java project that we use for Automation testing using Rest Assured and Selenium which is currently hosted in Azure DevOps. We are in process of exploring Backstage. Could you please guide us to achieve incorporating our automation java code in backstage or guide us with some training/tutorial which would be useful. Thanks in advance!!\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3091/comments",
    "author": "SurjitCS",
    "comments": [
      {
        "user": "OrkoHunter",
        "created_at": "2020-10-26T08:26:01Z",
        "body": "Hey @SurjitCS ! I assume that the project you are using can be added as a plugin in Backstage. And then when you deploy Backstage, the plugin will do the job.\r\nCould you also share the name of this Java project? We can create another issue and track the progress there.\r\n\r\nPlus, welcome to the community! :)"
      },
      {
        "user": "SurjitCS",
        "created_at": "2020-10-27T09:01:48Z",
        "body": "Thank You! do we have any videos which can guide us and one more thing in Demo instance i was trying to create Component but  all time I used to get error at publish template time.\r\nThanks for the help!\r\n\r\n "
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T12:21:25Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 1330,
    "title": "Better support for multicomponent",
    "created_at": "2020-06-17T07:33:42Z",
    "closed_at": "2020-10-17T19:01:10Z",
    "labels": [
      "help wanted",
      "question"
    ],
    "url": "https://github.com/backstage/backstage/issues/1330",
    "body": "As per @freben  (if I understood correctly) I'm trying to divide a service which provides both an API and renders an UI.\r\n\r\nIt is ackward to describe\r\n```yaml\r\n---\r\napiVersion: backstage.io/v1alpha1\r\nkind: Component\r\nspec:\r\n  type: service\r\n  lifecycle: production\r\n  owner: this_owner\r\nmetadata:\r\n  name: Zipkin-api\r\n  description: Opensource tracing solution API.\r\n---\r\napiVersion: backstage.io/v1alpha1\r\nkind: Component\r\nspec:\r\n  type: service\r\n  lifecycle: production\r\n  owner: this_owner\r\nmetadata:\r\n  name: Zipkin-ui\r\n  description: Opensource tracing solution UI.\r\n```\r\n\r\nTwo big issues:\r\n- Note that there are 2 changes and lots of copy paste. This is ever worse because we have in our format links to documetation, information about slack, story board, etc. All that needs to be copy/pasted as belongs to both.\r\n\r\n- We use and know what's \"zipkin\" but now does not really exist. We have zipkin-api  and zipkin-ui which because of the copy paste clearly are related but does not match my mental model of what's out there.\r\n\r\n  \r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1330/comments",
    "author": "JordiPolo",
    "comments": [
      {
        "user": "stefanalund",
        "created_at": "2020-10-17T19:01:10Z",
        "body": "Will not fix."
      }
    ]
  },
  {
    "number": 443,
    "title": "Remove build step from Dockerfile",
    "created_at": "2020-04-01T16:33:17Z",
    "closed_at": "2020-04-02T17:32:16Z",
    "labels": [
      "help wanted",
      "question"
    ],
    "url": "https://github.com/backstage/backstage/issues/443",
    "body": "## Feature Suggestion\r\n\r\nRemove the initial build step in the Dockerfile and depend on that being run on the host.\r\n\r\n## Possible Implementation\r\n\r\nRemove the first step in the multistage build, copy contents from app build output instead.\r\n\r\n## Context\r\n\r\nRunning the build inside the docker is pretty finicky. There are a lot of individual files to copy in and it makes the build pretty fragile. It is also ridiculously slow as yarn install has to do everything from scratch. I think it makes more sense to simply remove the first step and rely on the app to be bundled on the host before building the container.\r\n\r\nI'm usually prefer having everything in a single Dockerfile, but in this case I don't think it makes much sense. Latest related issue is #436",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/443/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "paulpach",
        "created_at": "2020-04-02T15:00:32Z",
        "body": "I'll take it, PR coming soon."
      },
      {
        "user": "Rugvip",
        "created_at": "2020-04-02T15:42:58Z",
        "body": "@paulpach Thanks, but hold up! This is already in review: #446\r\n\r\nDunno why GitHub didn't pick up the link, guess it has to be in the original PR body?"
      },
      {
        "user": "Rugvip",
        "created_at": "2020-04-02T17:32:16Z",
        "body": "Fixed by #446"
      }
    ]
  },
  {
    "number": 20948,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2023-11-02T16:14:43Z",
    "closed_at": "2024-05-11T16:37:39Z",
    "labels": [
      "help wanted",
      "wontfix",
      "stale",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/20948",
    "body": "\n## Affecting Packages/Plugins\n\n* [root](package.json)\n* [example-app](packages/app/package.json)\n* [@backstage/app-defaults](packages/app-defaults/package.json)\n* [example-app-next](packages/app-next/package.json)\n* [app-next-example-plugin](packages/app-next-example-plugin/package.json)\n* [example-backend](packages/backend/package.json)\n* [@backstage/backend-app-api](packages/backend-app-api/package.json)\n* [@backstage/backend-common](packages/backend-common/package.json)\n* [@backstage/backend-defaults](packages/backend-defaults/package.json)\n* [@backstage/backend-dynamic-feature-service](packages/backend-dynamic-feature-service/package.json)\n* [example-backend-next](packages/backend-next/package.json)\n* [@backstage/backend-openapi-utils](packages/backend-openapi-utils/package.json)\n* [@backstage/backend-plugin-api](packages/backend-plugin-api/package.json)\n* [@backstage/backend-tasks](packages/backend-tasks/package.json)\n* [@backstage/backend-test-utils](packages/backend-test-utils/package.json)\n* [@backstage/catalog-client](packages/catalog-client/package.json)\n* [@backstage/catalog-model](packages/catalog-model/package.json)\n* [@backstage/cli-node](packages/cli-node/package.json)\n* [@backstage/codemods](packages/codemods/package.json)\n* [@backstage/config](packages/config/package.json)\n* [@backstage/config-loader](packages/config-loader/package.json)\n* [@backstage/core-app-api](packages/core-app-api/package.json)\n* [@backstage/core-compat-api](packages/core-compat-api/package.json)\n* [@backstage/core-components](packages/core-components/package.json)\n* [@backstage/core-plugin-api](packages/core-plugin-api/package.json)\n* [@backstage/create-app](packages/create-app/package.json)\n* [@backstage/dev-utils](packages/dev-utils/package.json)\n* [e2e-test](packages/e2e-test/package.json)\n* [@backstage/errors](packages/errors/package.json)\n* [@backstage/frontend-app-api](packages/frontend-app-api/package.json)\n* [@backstage/frontend-plugin-api](packages/frontend-plugin-api/package.json)\n* [@backstage/frontend-test-utils](packages/frontend-test-utils/package.json)\n* [@backstage/integration](packages/integration/package.json)\n* [@backstage/integration-aws-node](packages/integration-aws-node/package.json)\n* [@backstage/integration-react](packages/integration-react/package.json)\n* [@backstage/repo-tools](packages/repo-tools/package.json)\n* [@techdocs/cli](packages/techdocs-cli/package.json)\n* [techdocs-cli-embedded-app](packages/techdocs-cli-embedded-app/package.json)\n* [@backstage/test-utils](packages/test-utils/package.json)\n* [@backstage/plugin-adr](plugins/adr/package.json)\n* [@backstage/plugin-adr-backend](plugins/adr-backend/package.json)\n* [@backstage/plugin-adr-common](plugins/adr-common/package.json)\n* [@backstage/plugin-airbrake](plugins/airbrake/package.json)\n* [@backstage/plugin-airbrake-backend](plugins/airbrake-backend/package.json)\n* [@backstage/plugin-allure](plugins/allure/package.json)\n* [@backstage/plugin-analytics-module-ga](plugins/analytics-module-ga/package.json)\n* [@backstage/plugin-analytics-module-ga4](plugins/analytics-module-ga4/package.json)\n* [@backstage/plugin-analytics-module-newrelic-browser](plugins/analytics-module-newrelic-browser/package.json)\n* [@backstage/plugin-apache-airflow](plugins/apache-airflow/package.json)\n* [@backstage/plugin-api-docs](plugins/api-docs/package.json)\n* [@backstage/plugin-apollo-explorer](plugins/apollo-explorer/package.json)\n* [@backstage/plugin-app-backend](plugins/app-backend/package.json)\n* [@backstage/plugin-app-node](plugins/app-node/package.json)\n* [@backstage/plugin-app-visualizer](plugins/app-visualizer/package.json)\n* [@backstage/plugin-auth-backend](plugins/auth-backend/package.json)\n* [@backstage/plugin-auth-backend-module-atlassian-provider](plugins/auth-backend-module-atlassian-provider/package.json)\n* [@backstage/plugin-auth-backend-module-aws-alb-provider](plugins/auth-backend-module-aws-alb-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gcp-iap-provider](plugins/auth-backend-module-gcp-iap-provider/package.json)\n* [@backstage/plugin-auth-backend-module-github-provider](plugins/auth-backend-module-github-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gitlab-provider](plugins/auth-backend-module-gitlab-provider/package.json)\n* [@backstage/plugin-auth-backend-module-google-provider](plugins/auth-backend-module-google-provider/package.json)\n* [@backstage/plugin-auth-backend-module-guest-provider](plugins/auth-backend-module-guest-provider/package.json)\n* [@backstage/plugin-auth-backend-module-microsoft-provider](plugins/auth-backend-module-microsoft-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-provider](plugins/auth-backend-module-oauth2-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-proxy-provider](plugins/auth-backend-module-oauth2-proxy-provider/package.json)\n* [@backstage/plugin-auth-backend-module-okta-provider](plugins/auth-backend-module-okta-provider/package.json)\n* [@backstage/plugin-auth-backend-module-pinniped-provider](plugins/auth-backend-module-pinniped-provider/package.json)\n* [@backstage/plugin-auth-backend-module-vmware-cloud-provider](plugins/auth-backend-module-vmware-cloud-provider/package.json)\n* [@backstage/plugin-auth-node](plugins/auth-node/package.json)\n* [@backstage/plugin-azure-devops](plugins/azure-devops/package.json)\n* [@backstage/plugin-azure-devops-backend](plugins/azure-devops-backend/package.json)\n* [@backstage/plugin-azure-devops-common](plugins/azure-devops-common/package.json)\n* [@backstage/plugin-azure-sites](plugins/azure-sites/package.json)\n* [@backstage/plugin-azure-sites-backend](plugins/azure-sites-backend/package.json)\n* [@backstage/plugin-azure-sites-common](plugins/azure-sites-common/package.json)\n* [@backstage/plugin-badges](plugins/badges/package.json)\n* [@backstage/plugin-badges-backend](plugins/badges-backend/package.json)\n* [@backstage/plugin-bazaar](plugins/bazaar/package.json)\n* [@backstage/plugin-bazaar-backend](plugins/bazaar-backend/package.json)\n* [@backstage/plugin-bitbucket-cloud-common](plugins/bitbucket-cloud-common/package.json)\n* [@backstage/plugin-bitrise](plugins/bitrise/package.json)\n* [@backstage/plugin-catalog](plugins/catalog/package.json)\n* [@backstage/plugin-catalog-backend](plugins/catalog-backend/package.json)\n* [@backstage/plugin-catalog-backend-module-aws](plugins/catalog-backend-module-aws/package.json)\n* [@backstage/plugin-catalog-backend-module-azure](plugins/catalog-backend-module-azure/package.json)\n* [@backstage/plugin-catalog-backend-module-backstage-openapi](plugins/catalog-backend-module-backstage-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-cloud](plugins/catalog-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-server](plugins/catalog-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-catalog-backend-module-gcp](plugins/catalog-backend-module-gcp/package.json)\n* [@backstage/plugin-catalog-backend-module-gerrit](plugins/catalog-backend-module-gerrit/package.json)\n* [@backstage/plugin-catalog-backend-module-github](plugins/catalog-backend-module-github/package.json)\n* [@backstage/plugin-catalog-backend-module-github-org](plugins/catalog-backend-module-github-org/package.json)\n* [@backstage/plugin-catalog-backend-module-gitlab](plugins/catalog-backend-module-gitlab/package.json)\n* [@backstage/plugin-catalog-backend-module-incremental-ingestion](plugins/catalog-backend-module-incremental-ingestion/package.json)\n* [@backstage/plugin-catalog-backend-module-ldap](plugins/catalog-backend-module-ldap/package.json)\n* [@backstage/plugin-catalog-backend-module-msgraph](plugins/catalog-backend-module-msgraph/package.json)\n* [@backstage/plugin-catalog-backend-module-openapi](plugins/catalog-backend-module-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-puppetdb](plugins/catalog-backend-module-puppetdb/package.json)\n* [@backstage/plugin-catalog-backend-module-scaffolder-entity-model](plugins/catalog-backend-module-scaffolder-entity-model/package.json)\n* [@backstage/plugin-catalog-backend-module-unprocessed](plugins/catalog-backend-module-unprocessed/package.json)\n* [@backstage/plugin-catalog-common](plugins/catalog-common/package.json)\n* [@backstage/plugin-catalog-graph](plugins/catalog-graph/package.json)\n* [@backstage/plugin-catalog-import](plugins/catalog-import/package.json)\n* [@backstage/plugin-catalog-node](plugins/catalog-node/package.json)\n* [@backstage/plugin-catalog-react](plugins/catalog-react/package.json)\n* [@backstage/plugin-catalog-unprocessed-entities](plugins/catalog-unprocessed-entities/package.json)\n* [@backstage/plugin-cicd-statistics](plugins/cicd-statistics/package.json)\n* [@backstage/plugin-cicd-statistics-module-gitlab](plugins/cicd-statistics-module-gitlab/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-code-climate](plugins/code-climate/package.json)\n* [@backstage/plugin-code-coverage](plugins/code-coverage/package.json)\n* [@backstage/plugin-code-coverage-backend](plugins/code-coverage-backend/package.json)\n* [@backstage/plugin-codescene](plugins/codescene/package.json)\n* [@backstage/plugin-config-schema](plugins/config-schema/package.json)\n* [@backstage/plugin-cost-insights](plugins/cost-insights/package.json)\n* [@backstage/plugin-devtools](plugins/devtools/package.json)\n* [@backstage/plugin-devtools-backend](plugins/devtools-backend/package.json)\n* [@backstage/plugin-devtools-common](plugins/devtools-common/package.json)\n* [@backstage/plugin-dynatrace](plugins/dynatrace/package.json)\n* [@backstage/plugin-entity-feedback](plugins/entity-feedback/package.json)\n* [@backstage/plugin-entity-feedback-backend](plugins/entity-feedback-backend/package.json)\n* [@backstage/plugin-entity-validation](plugins/entity-validation/package.json)\n* [@backstage/plugin-events-backend](plugins/events-backend/package.json)\n* [@backstage/plugin-events-backend-module-aws-sqs](plugins/events-backend-module-aws-sqs/package.json)\n* [@backstage/plugin-events-backend-module-azure](plugins/events-backend-module-azure/package.json)\n* [@backstage/plugin-events-backend-module-bitbucket-cloud](plugins/events-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-events-backend-module-gerrit](plugins/events-backend-module-gerrit/package.json)\n* [@backstage/plugin-events-backend-module-github](plugins/events-backend-module-github/package.json)\n* [@backstage/plugin-events-backend-module-gitlab](plugins/events-backend-module-gitlab/package.json)\n* [@backstage/plugin-events-backend-test-utils](plugins/events-backend-test-utils/package.json)\n* [@backstage/plugin-events-node](plugins/events-node/package.json)\n* [@internal/plugin-todo-list](plugins/example-todo-list/package.json)\n* [@internal/plugin-todo-list-backend](plugins/example-todo-list-backend/package.json)\n* [@internal/plugin-todo-list-common](plugins/example-todo-list-common/package.json)\n* [@backstage/plugin-explore](plugins/explore/package.json)\n* [@backstage/plugin-explore-backend](plugins/explore-backend/package.json)\n* [@backstage/plugin-explore-react](plugins/explore-react/package.json)\n* [@backstage/plugin-firehydrant](plugins/firehydrant/package.json)\n* [@backstage/plugin-fossa](plugins/fossa/package.json)\n* [@backstage/plugin-gcalendar](plugins/gcalendar/package.json)\n* [@backstage/plugin-gcp-projects](plugins/gcp-projects/package.json)\n* [@backstage/plugin-git-release-manager](plugins/git-release-manager/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-github-deployments](plugins/github-deployments/package.json)\n* [@backstage/plugin-github-issues](plugins/github-issues/package.json)\n* [@backstage/plugin-github-pull-requests-board](plugins/github-pull-requests-board/package.json)\n* [@backstage/plugin-gitops-profiles](plugins/gitops-profiles/package.json)\n* [@backstage/plugin-gocd](plugins/gocd/package.json)\n* [@backstage/plugin-graphiql](plugins/graphiql/package.json)\n* [@backstage/plugin-graphql-voyager](plugins/graphql-voyager/package.json)\n* [@backstage/plugin-home](plugins/home/package.json)\n* [@backstage/plugin-home-react](plugins/home-react/package.json)\n* [@backstage/plugin-ilert](plugins/ilert/package.json)\n* [@backstage/plugin-jenkins](plugins/jenkins/package.json)\n* [@backstage/plugin-jenkins-backend](plugins/jenkins-backend/package.json)\n* [@backstage/plugin-jenkins-common](plugins/jenkins-common/package.json)\n* [@backstage/plugin-kafka](plugins/kafka/package.json)\n* [@backstage/plugin-kafka-backend](plugins/kafka-backend/package.json)\n* [@backstage/plugin-kubernetes](plugins/kubernetes/package.json)\n* [@backstage/plugin-kubernetes-backend](plugins/kubernetes-backend/package.json)\n* [@backstage/plugin-kubernetes-cluster](plugins/kubernetes-cluster/package.json)\n* [@backstage/plugin-kubernetes-common](plugins/kubernetes-common/package.json)\n* [@backstage/plugin-kubernetes-node](plugins/kubernetes-node/package.json)\n* [@backstage/plugin-kubernetes-react](plugins/kubernetes-react/package.json)\n* [@backstage/plugin-lighthouse](plugins/lighthouse/package.json)\n* [@backstage/plugin-lighthouse-backend](plugins/lighthouse-backend/package.json)\n* [@backstage/plugin-lighthouse-common](plugins/lighthouse-common/package.json)\n* [@backstage/plugin-linguist](plugins/linguist/package.json)\n* [@backstage/plugin-linguist-backend](plugins/linguist-backend/package.json)\n* [@backstage/plugin-microsoft-calendar](plugins/microsoft-calendar/package.json)\n* [@backstage/plugin-newrelic](plugins/newrelic/package.json)\n* [@backstage/plugin-newrelic-dashboard](plugins/newrelic-dashboard/package.json)\n* [@backstage/plugin-nomad](plugins/nomad/package.json)\n* [@backstage/plugin-nomad-backend](plugins/nomad-backend/package.json)\n* [@backstage/plugin-notifications](plugins/notifications/package.json)\n* [@backstage/plugin-notifications-backend](plugins/notifications-backend/package.json)\n* [@backstage/plugin-notifications-node](plugins/notifications-node/package.json)\n* [@backstage/plugin-octopus-deploy](plugins/octopus-deploy/package.json)\n* [@backstage/plugin-opencost](plugins/opencost/package.json)\n* [@backstage/plugin-org](plugins/org/package.json)\n* [@backstage/plugin-org-react](plugins/org-react/package.json)\n* [@backstage/plugin-pagerduty](plugins/pagerduty/package.json)\n* [@backstage/plugin-periskop](plugins/periskop/package.json)\n* [@backstage/plugin-periskop-backend](plugins/periskop-backend/package.json)\n* [@backstage/plugin-permission-backend](plugins/permission-backend/package.json)\n* [@backstage/plugin-permission-backend-module-allow-all-policy](plugins/permission-backend-module-policy-allow-all/package.json)\n* [@backstage/plugin-permission-common](plugins/permission-common/package.json)\n* [@backstage/plugin-permission-node](plugins/permission-node/package.json)\n* [@backstage/plugin-permission-react](plugins/permission-react/package.json)\n* [@backstage/plugin-playlist](plugins/playlist/package.json)\n* [@backstage/plugin-playlist-backend](plugins/playlist-backend/package.json)\n* [@backstage/plugin-playlist-common](plugins/playlist-common/package.json)\n* [@backstage/plugin-proxy-backend](plugins/proxy-backend/package.json)\n* [@backstage/plugin-puppetdb](plugins/puppetdb/package.json)\n* [@backstage/plugin-rollbar](plugins/rollbar/package.json)\n* [@backstage/plugin-rollbar-backend](plugins/rollbar-backend/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-scaffolder-backend](plugins/scaffolder-backend/package.json)\n* [@backstage/plugin-scaffolder-backend-module-azure](plugins/scaffolder-backend-module-azure/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket](plugins/scaffolder-backend-module-bitbucket/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-cloud](plugins/scaffolder-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-server](plugins/scaffolder-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-scaffolder-backend-module-confluence-to-markdown](plugins/scaffolder-backend-module-confluence-to-markdown/package.json)\n* [@backstage/plugin-scaffolder-backend-module-cookiecutter](plugins/scaffolder-backend-module-cookiecutter/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gerrit](plugins/scaffolder-backend-module-gerrit/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitea](plugins/scaffolder-backend-module-gitea/package.json)\n* [@backstage/plugin-scaffolder-backend-module-github](plugins/scaffolder-backend-module-github/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitlab](plugins/scaffolder-backend-module-gitlab/package.json)\n* [@backstage/plugin-scaffolder-backend-module-rails](plugins/scaffolder-backend-module-rails/package.json)\n* [@backstage/plugin-scaffolder-backend-module-sentry](plugins/scaffolder-backend-module-sentry/package.json)\n* [@backstage/plugin-scaffolder-backend-module-yeoman](plugins/scaffolder-backend-module-yeoman/package.json)\n* [@backstage/plugin-scaffolder-common](plugins/scaffolder-common/package.json)\n* [@backstage/plugin-scaffolder-node](plugins/scaffolder-node/package.json)\n* [@backstage/plugin-scaffolder-node-test-utils](plugins/scaffolder-node-test-utils/package.json)\n* [@backstage/plugin-scaffolder-react](plugins/scaffolder-react/package.json)\n* [@backstage/plugin-search](plugins/search/package.json)\n* [@backstage/plugin-search-backend](plugins/search-backend/package.json)\n* [@backstage/plugin-search-backend-module-catalog](plugins/search-backend-module-catalog/package.json)\n* [@backstage/plugin-search-backend-module-elasticsearch](plugins/search-backend-module-elasticsearch/package.json)\n* [@backstage/plugin-search-backend-module-explore](plugins/search-backend-module-explore/package.json)\n* [@backstage/plugin-search-backend-module-pg](plugins/search-backend-module-pg/package.json)\n* [@backstage/plugin-search-backend-module-stack-overflow-collator](plugins/search-backend-module-stack-overflow-collator/package.json)\n* [@backstage/plugin-search-backend-module-techdocs](plugins/search-backend-module-techdocs/package.json)\n* [@backstage/plugin-search-backend-node](plugins/search-backend-node/package.json)\n* [@backstage/plugin-search-common](plugins/search-common/package.json)\n* [@backstage/plugin-search-react](plugins/search-react/package.json)\n* [@backstage/plugin-sentry](plugins/sentry/package.json)\n* [@backstage/plugin-shortcuts](plugins/shortcuts/package.json)\n* [@backstage/plugin-signals](plugins/signals/package.json)\n* [@backstage/plugin-signals-backend](plugins/signals-backend/package.json)\n* [@backstage/plugin-signals-node](plugins/signals-node/package.json)\n* [@backstage/plugin-signals-react](plugins/signals-react/package.json)\n* [@backstage/plugin-sonarqube](plugins/sonarqube/package.json)\n* [@backstage/plugin-sonarqube-backend](plugins/sonarqube-backend/package.json)\n* [@backstage/plugin-sonarqube-react](plugins/sonarqube-react/package.json)\n* [@backstage/plugin-splunk-on-call](plugins/splunk-on-call/package.json)\n* [@backstage/plugin-stack-overflow](plugins/stack-overflow/package.json)\n* [@backstage/plugin-stack-overflow-backend](plugins/stack-overflow-backend/package.json)\n* [@backstage/plugin-stackstorm](plugins/stackstorm/package.json)\n* [@backstage/plugin-tech-insights](plugins/tech-insights/package.json)\n* [@backstage/plugin-tech-insights-backend](plugins/tech-insights-backend/package.json)\n* [@backstage/plugin-tech-insights-backend-module-jsonfc](plugins/tech-insights-backend-module-jsonfc/package.json)\n* [@backstage/plugin-tech-insights-common](plugins/tech-insights-common/package.json)\n* [@backstage/plugin-tech-insights-node](plugins/tech-insights-node/package.json)\n* [@backstage/plugin-tech-radar](plugins/tech-radar/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n* [@backstage/plugin-techdocs-addons-test-utils](plugins/techdocs-addons-test-utils/package.json)\n* [@backstage/plugin-techdocs-backend](plugins/techdocs-backend/package.json)\n* [@backstage/plugin-techdocs-module-addons-contrib](plugins/techdocs-module-addons-contrib/package.json)\n* [@backstage/plugin-techdocs-node](plugins/techdocs-node/package.json)\n* [@backstage/plugin-techdocs-react](plugins/techdocs-react/package.json)\n* [@backstage/plugin-todo](plugins/todo/package.json)\n* [@backstage/plugin-todo-backend](plugins/todo-backend/package.json)\n* [@backstage/plugin-user-settings](plugins/user-settings/package.json)\n* [@backstage/plugin-user-settings-backend](plugins/user-settings-backend/package.json)\n* [@backstage/plugin-vault](plugins/vault/package.json)\n* [@backstage/plugin-vault-backend](plugins/vault-backend/package.json)\n* [@backstage/plugin-vault-node](plugins/vault-node/package.json)\n* [@backstage/plugin-xcmetrics](plugins/xcmetrics/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/20948/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "camilaibs",
        "created_at": "2023-11-23T10:54:33Z",
        "body": "> [!Note]\r\n> @backstage/maintainers, we need to find a way to bypass this in a sensible way (avoid adding a ignore file for all the packages).\r\n\r\nSimilar issues:  #20947, #20946."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2024-05-04T16:28:46Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 20947,
    "title": "Snyk vulnerability [snyk:lic:npm:eslint-plugin-deprecation:LGPL-3.0]",
    "created_at": "2023-11-02T16:14:42Z",
    "closed_at": "2024-05-11T16:37:40Z",
    "labels": [
      "help wanted",
      "wontfix",
      "stale",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/20947",
    "body": "\n## Affecting Packages/Plugins\n\n* [root](package.json)\n* [example-app](packages/app/package.json)\n* [@backstage/app-defaults](packages/app-defaults/package.json)\n* [example-app-next](packages/app-next/package.json)\n* [app-next-example-plugin](packages/app-next-example-plugin/package.json)\n* [example-backend](packages/backend/package.json)\n* [@backstage/backend-app-api](packages/backend-app-api/package.json)\n* [@backstage/backend-common](packages/backend-common/package.json)\n* [@backstage/backend-defaults](packages/backend-defaults/package.json)\n* [@backstage/backend-dynamic-feature-service](packages/backend-dynamic-feature-service/package.json)\n* [example-backend-next](packages/backend-next/package.json)\n* [@backstage/backend-openapi-utils](packages/backend-openapi-utils/package.json)\n* [@backstage/backend-plugin-api](packages/backend-plugin-api/package.json)\n* [@backstage/backend-tasks](packages/backend-tasks/package.json)\n* [@backstage/backend-test-utils](packages/backend-test-utils/package.json)\n* [@backstage/catalog-client](packages/catalog-client/package.json)\n* [@backstage/catalog-model](packages/catalog-model/package.json)\n* [@backstage/cli-node](packages/cli-node/package.json)\n* [@backstage/codemods](packages/codemods/package.json)\n* [@backstage/config](packages/config/package.json)\n* [@backstage/config-loader](packages/config-loader/package.json)\n* [@backstage/core-app-api](packages/core-app-api/package.json)\n* [@backstage/core-compat-api](packages/core-compat-api/package.json)\n* [@backstage/core-components](packages/core-components/package.json)\n* [@backstage/core-plugin-api](packages/core-plugin-api/package.json)\n* [@backstage/create-app](packages/create-app/package.json)\n* [@backstage/dev-utils](packages/dev-utils/package.json)\n* [e2e-test](packages/e2e-test/package.json)\n* [@backstage/errors](packages/errors/package.json)\n* [@backstage/frontend-app-api](packages/frontend-app-api/package.json)\n* [@backstage/frontend-plugin-api](packages/frontend-plugin-api/package.json)\n* [@backstage/frontend-test-utils](packages/frontend-test-utils/package.json)\n* [@backstage/integration](packages/integration/package.json)\n* [@backstage/integration-aws-node](packages/integration-aws-node/package.json)\n* [@backstage/integration-react](packages/integration-react/package.json)\n* [@backstage/repo-tools](packages/repo-tools/package.json)\n* [@techdocs/cli](packages/techdocs-cli/package.json)\n* [techdocs-cli-embedded-app](packages/techdocs-cli-embedded-app/package.json)\n* [@backstage/test-utils](packages/test-utils/package.json)\n* [@backstage/plugin-adr](plugins/adr/package.json)\n* [@backstage/plugin-adr-backend](plugins/adr-backend/package.json)\n* [@backstage/plugin-adr-common](plugins/adr-common/package.json)\n* [@backstage/plugin-airbrake](plugins/airbrake/package.json)\n* [@backstage/plugin-airbrake-backend](plugins/airbrake-backend/package.json)\n* [@backstage/plugin-allure](plugins/allure/package.json)\n* [@backstage/plugin-analytics-module-ga](plugins/analytics-module-ga/package.json)\n* [@backstage/plugin-analytics-module-ga4](plugins/analytics-module-ga4/package.json)\n* [@backstage/plugin-analytics-module-newrelic-browser](plugins/analytics-module-newrelic-browser/package.json)\n* [@backstage/plugin-apache-airflow](plugins/apache-airflow/package.json)\n* [@backstage/plugin-api-docs](plugins/api-docs/package.json)\n* [@backstage/plugin-apollo-explorer](plugins/apollo-explorer/package.json)\n* [@backstage/plugin-app-backend](plugins/app-backend/package.json)\n* [@backstage/plugin-app-node](plugins/app-node/package.json)\n* [@backstage/plugin-app-visualizer](plugins/app-visualizer/package.json)\n* [@backstage/plugin-auth-backend](plugins/auth-backend/package.json)\n* [@backstage/plugin-auth-backend-module-atlassian-provider](plugins/auth-backend-module-atlassian-provider/package.json)\n* [@backstage/plugin-auth-backend-module-aws-alb-provider](plugins/auth-backend-module-aws-alb-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gcp-iap-provider](plugins/auth-backend-module-gcp-iap-provider/package.json)\n* [@backstage/plugin-auth-backend-module-github-provider](plugins/auth-backend-module-github-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gitlab-provider](plugins/auth-backend-module-gitlab-provider/package.json)\n* [@backstage/plugin-auth-backend-module-google-provider](plugins/auth-backend-module-google-provider/package.json)\n* [@backstage/plugin-auth-backend-module-guest-provider](plugins/auth-backend-module-guest-provider/package.json)\n* [@backstage/plugin-auth-backend-module-microsoft-provider](plugins/auth-backend-module-microsoft-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-provider](plugins/auth-backend-module-oauth2-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-proxy-provider](plugins/auth-backend-module-oauth2-proxy-provider/package.json)\n* [@backstage/plugin-auth-backend-module-okta-provider](plugins/auth-backend-module-okta-provider/package.json)\n* [@backstage/plugin-auth-backend-module-pinniped-provider](plugins/auth-backend-module-pinniped-provider/package.json)\n* [@backstage/plugin-auth-backend-module-vmware-cloud-provider](plugins/auth-backend-module-vmware-cloud-provider/package.json)\n* [@backstage/plugin-auth-node](plugins/auth-node/package.json)\n* [@backstage/plugin-azure-devops](plugins/azure-devops/package.json)\n* [@backstage/plugin-azure-devops-backend](plugins/azure-devops-backend/package.json)\n* [@backstage/plugin-azure-devops-common](plugins/azure-devops-common/package.json)\n* [@backstage/plugin-azure-sites](plugins/azure-sites/package.json)\n* [@backstage/plugin-azure-sites-backend](plugins/azure-sites-backend/package.json)\n* [@backstage/plugin-azure-sites-common](plugins/azure-sites-common/package.json)\n* [@backstage/plugin-badges](plugins/badges/package.json)\n* [@backstage/plugin-badges-backend](plugins/badges-backend/package.json)\n* [@backstage/plugin-bazaar](plugins/bazaar/package.json)\n* [@backstage/plugin-bazaar-backend](plugins/bazaar-backend/package.json)\n* [@backstage/plugin-bitbucket-cloud-common](plugins/bitbucket-cloud-common/package.json)\n* [@backstage/plugin-bitrise](plugins/bitrise/package.json)\n* [@backstage/plugin-catalog](plugins/catalog/package.json)\n* [@backstage/plugin-catalog-backend](plugins/catalog-backend/package.json)\n* [@backstage/plugin-catalog-backend-module-aws](plugins/catalog-backend-module-aws/package.json)\n* [@backstage/plugin-catalog-backend-module-azure](plugins/catalog-backend-module-azure/package.json)\n* [@backstage/plugin-catalog-backend-module-backstage-openapi](plugins/catalog-backend-module-backstage-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-cloud](plugins/catalog-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-server](plugins/catalog-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-catalog-backend-module-gcp](plugins/catalog-backend-module-gcp/package.json)\n* [@backstage/plugin-catalog-backend-module-gerrit](plugins/catalog-backend-module-gerrit/package.json)\n* [@backstage/plugin-catalog-backend-module-github](plugins/catalog-backend-module-github/package.json)\n* [@backstage/plugin-catalog-backend-module-github-org](plugins/catalog-backend-module-github-org/package.json)\n* [@backstage/plugin-catalog-backend-module-gitlab](plugins/catalog-backend-module-gitlab/package.json)\n* [@backstage/plugin-catalog-backend-module-incremental-ingestion](plugins/catalog-backend-module-incremental-ingestion/package.json)\n* [@backstage/plugin-catalog-backend-module-ldap](plugins/catalog-backend-module-ldap/package.json)\n* [@backstage/plugin-catalog-backend-module-msgraph](plugins/catalog-backend-module-msgraph/package.json)\n* [@backstage/plugin-catalog-backend-module-openapi](plugins/catalog-backend-module-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-puppetdb](plugins/catalog-backend-module-puppetdb/package.json)\n* [@backstage/plugin-catalog-backend-module-scaffolder-entity-model](plugins/catalog-backend-module-scaffolder-entity-model/package.json)\n* [@backstage/plugin-catalog-backend-module-unprocessed](plugins/catalog-backend-module-unprocessed/package.json)\n* [@backstage/plugin-catalog-common](plugins/catalog-common/package.json)\n* [@backstage/plugin-catalog-graph](plugins/catalog-graph/package.json)\n* [@backstage/plugin-catalog-import](plugins/catalog-import/package.json)\n* [@backstage/plugin-catalog-node](plugins/catalog-node/package.json)\n* [@backstage/plugin-catalog-react](plugins/catalog-react/package.json)\n* [@backstage/plugin-catalog-unprocessed-entities](plugins/catalog-unprocessed-entities/package.json)\n* [@backstage/plugin-cicd-statistics](plugins/cicd-statistics/package.json)\n* [@backstage/plugin-cicd-statistics-module-gitlab](plugins/cicd-statistics-module-gitlab/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-code-climate](plugins/code-climate/package.json)\n* [@backstage/plugin-code-coverage](plugins/code-coverage/package.json)\n* [@backstage/plugin-code-coverage-backend](plugins/code-coverage-backend/package.json)\n* [@backstage/plugin-codescene](plugins/codescene/package.json)\n* [@backstage/plugin-config-schema](plugins/config-schema/package.json)\n* [@backstage/plugin-cost-insights](plugins/cost-insights/package.json)\n* [@backstage/plugin-devtools](plugins/devtools/package.json)\n* [@backstage/plugin-devtools-backend](plugins/devtools-backend/package.json)\n* [@backstage/plugin-devtools-common](plugins/devtools-common/package.json)\n* [@backstage/plugin-dynatrace](plugins/dynatrace/package.json)\n* [@backstage/plugin-entity-feedback](plugins/entity-feedback/package.json)\n* [@backstage/plugin-entity-feedback-backend](plugins/entity-feedback-backend/package.json)\n* [@backstage/plugin-entity-validation](plugins/entity-validation/package.json)\n* [@backstage/plugin-events-backend](plugins/events-backend/package.json)\n* [@backstage/plugin-events-backend-module-aws-sqs](plugins/events-backend-module-aws-sqs/package.json)\n* [@backstage/plugin-events-backend-module-azure](plugins/events-backend-module-azure/package.json)\n* [@backstage/plugin-events-backend-module-bitbucket-cloud](plugins/events-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-events-backend-module-gerrit](plugins/events-backend-module-gerrit/package.json)\n* [@backstage/plugin-events-backend-module-github](plugins/events-backend-module-github/package.json)\n* [@backstage/plugin-events-backend-module-gitlab](plugins/events-backend-module-gitlab/package.json)\n* [@backstage/plugin-events-backend-test-utils](plugins/events-backend-test-utils/package.json)\n* [@backstage/plugin-events-node](plugins/events-node/package.json)\n* [@internal/plugin-todo-list](plugins/example-todo-list/package.json)\n* [@internal/plugin-todo-list-backend](plugins/example-todo-list-backend/package.json)\n* [@internal/plugin-todo-list-common](plugins/example-todo-list-common/package.json)\n* [@backstage/plugin-explore](plugins/explore/package.json)\n* [@backstage/plugin-explore-backend](plugins/explore-backend/package.json)\n* [@backstage/plugin-explore-react](plugins/explore-react/package.json)\n* [@backstage/plugin-firehydrant](plugins/firehydrant/package.json)\n* [@backstage/plugin-fossa](plugins/fossa/package.json)\n* [@backstage/plugin-gcalendar](plugins/gcalendar/package.json)\n* [@backstage/plugin-gcp-projects](plugins/gcp-projects/package.json)\n* [@backstage/plugin-git-release-manager](plugins/git-release-manager/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-github-deployments](plugins/github-deployments/package.json)\n* [@backstage/plugin-github-issues](plugins/github-issues/package.json)\n* [@backstage/plugin-github-pull-requests-board](plugins/github-pull-requests-board/package.json)\n* [@backstage/plugin-gitops-profiles](plugins/gitops-profiles/package.json)\n* [@backstage/plugin-gocd](plugins/gocd/package.json)\n* [@backstage/plugin-graphiql](plugins/graphiql/package.json)\n* [@backstage/plugin-graphql-voyager](plugins/graphql-voyager/package.json)\n* [@backstage/plugin-home](plugins/home/package.json)\n* [@backstage/plugin-home-react](plugins/home-react/package.json)\n* [@backstage/plugin-ilert](plugins/ilert/package.json)\n* [@backstage/plugin-jenkins](plugins/jenkins/package.json)\n* [@backstage/plugin-jenkins-backend](plugins/jenkins-backend/package.json)\n* [@backstage/plugin-jenkins-common](plugins/jenkins-common/package.json)\n* [@backstage/plugin-kafka](plugins/kafka/package.json)\n* [@backstage/plugin-kafka-backend](plugins/kafka-backend/package.json)\n* [@backstage/plugin-kubernetes](plugins/kubernetes/package.json)\n* [@backstage/plugin-kubernetes-backend](plugins/kubernetes-backend/package.json)\n* [@backstage/plugin-kubernetes-cluster](plugins/kubernetes-cluster/package.json)\n* [@backstage/plugin-kubernetes-common](plugins/kubernetes-common/package.json)\n* [@backstage/plugin-kubernetes-node](plugins/kubernetes-node/package.json)\n* [@backstage/plugin-kubernetes-react](plugins/kubernetes-react/package.json)\n* [@backstage/plugin-lighthouse](plugins/lighthouse/package.json)\n* [@backstage/plugin-lighthouse-backend](plugins/lighthouse-backend/package.json)\n* [@backstage/plugin-lighthouse-common](plugins/lighthouse-common/package.json)\n* [@backstage/plugin-linguist](plugins/linguist/package.json)\n* [@backstage/plugin-linguist-backend](plugins/linguist-backend/package.json)\n* [@backstage/plugin-microsoft-calendar](plugins/microsoft-calendar/package.json)\n* [@backstage/plugin-newrelic](plugins/newrelic/package.json)\n* [@backstage/plugin-newrelic-dashboard](plugins/newrelic-dashboard/package.json)\n* [@backstage/plugin-nomad](plugins/nomad/package.json)\n* [@backstage/plugin-nomad-backend](plugins/nomad-backend/package.json)\n* [@backstage/plugin-notifications](plugins/notifications/package.json)\n* [@backstage/plugin-notifications-backend](plugins/notifications-backend/package.json)\n* [@backstage/plugin-notifications-node](plugins/notifications-node/package.json)\n* [@backstage/plugin-octopus-deploy](plugins/octopus-deploy/package.json)\n* [@backstage/plugin-opencost](plugins/opencost/package.json)\n* [@backstage/plugin-org](plugins/org/package.json)\n* [@backstage/plugin-org-react](plugins/org-react/package.json)\n* [@backstage/plugin-pagerduty](plugins/pagerduty/package.json)\n* [@backstage/plugin-periskop](plugins/periskop/package.json)\n* [@backstage/plugin-periskop-backend](plugins/periskop-backend/package.json)\n* [@backstage/plugin-permission-backend](plugins/permission-backend/package.json)\n* [@backstage/plugin-permission-backend-module-allow-all-policy](plugins/permission-backend-module-policy-allow-all/package.json)\n* [@backstage/plugin-permission-common](plugins/permission-common/package.json)\n* [@backstage/plugin-permission-node](plugins/permission-node/package.json)\n* [@backstage/plugin-permission-react](plugins/permission-react/package.json)\n* [@backstage/plugin-playlist](plugins/playlist/package.json)\n* [@backstage/plugin-playlist-backend](plugins/playlist-backend/package.json)\n* [@backstage/plugin-playlist-common](plugins/playlist-common/package.json)\n* [@backstage/plugin-proxy-backend](plugins/proxy-backend/package.json)\n* [@backstage/plugin-puppetdb](plugins/puppetdb/package.json)\n* [@backstage/plugin-rollbar](plugins/rollbar/package.json)\n* [@backstage/plugin-rollbar-backend](plugins/rollbar-backend/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-scaffolder-backend](plugins/scaffolder-backend/package.json)\n* [@backstage/plugin-scaffolder-backend-module-azure](plugins/scaffolder-backend-module-azure/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket](plugins/scaffolder-backend-module-bitbucket/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-cloud](plugins/scaffolder-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-server](plugins/scaffolder-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-scaffolder-backend-module-confluence-to-markdown](plugins/scaffolder-backend-module-confluence-to-markdown/package.json)\n* [@backstage/plugin-scaffolder-backend-module-cookiecutter](plugins/scaffolder-backend-module-cookiecutter/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gerrit](plugins/scaffolder-backend-module-gerrit/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitea](plugins/scaffolder-backend-module-gitea/package.json)\n* [@backstage/plugin-scaffolder-backend-module-github](plugins/scaffolder-backend-module-github/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitlab](plugins/scaffolder-backend-module-gitlab/package.json)\n* [@backstage/plugin-scaffolder-backend-module-rails](plugins/scaffolder-backend-module-rails/package.json)\n* [@backstage/plugin-scaffolder-backend-module-sentry](plugins/scaffolder-backend-module-sentry/package.json)\n* [@backstage/plugin-scaffolder-backend-module-yeoman](plugins/scaffolder-backend-module-yeoman/package.json)\n* [@backstage/plugin-scaffolder-common](plugins/scaffolder-common/package.json)\n* [@backstage/plugin-scaffolder-node](plugins/scaffolder-node/package.json)\n* [@backstage/plugin-scaffolder-node-test-utils](plugins/scaffolder-node-test-utils/package.json)\n* [@backstage/plugin-scaffolder-react](plugins/scaffolder-react/package.json)\n* [@backstage/plugin-search](plugins/search/package.json)\n* [@backstage/plugin-search-backend](plugins/search-backend/package.json)\n* [@backstage/plugin-search-backend-module-catalog](plugins/search-backend-module-catalog/package.json)\n* [@backstage/plugin-search-backend-module-elasticsearch](plugins/search-backend-module-elasticsearch/package.json)\n* [@backstage/plugin-search-backend-module-explore](plugins/search-backend-module-explore/package.json)\n* [@backstage/plugin-search-backend-module-pg](plugins/search-backend-module-pg/package.json)\n* [@backstage/plugin-search-backend-module-stack-overflow-collator](plugins/search-backend-module-stack-overflow-collator/package.json)\n* [@backstage/plugin-search-backend-module-techdocs](plugins/search-backend-module-techdocs/package.json)\n* [@backstage/plugin-search-backend-node](plugins/search-backend-node/package.json)\n* [@backstage/plugin-search-common](plugins/search-common/package.json)\n* [@backstage/plugin-search-react](plugins/search-react/package.json)\n* [@backstage/plugin-sentry](plugins/sentry/package.json)\n* [@backstage/plugin-shortcuts](plugins/shortcuts/package.json)\n* [@backstage/plugin-signals](plugins/signals/package.json)\n* [@backstage/plugin-signals-backend](plugins/signals-backend/package.json)\n* [@backstage/plugin-signals-node](plugins/signals-node/package.json)\n* [@backstage/plugin-signals-react](plugins/signals-react/package.json)\n* [@backstage/plugin-sonarqube](plugins/sonarqube/package.json)\n* [@backstage/plugin-sonarqube-backend](plugins/sonarqube-backend/package.json)\n* [@backstage/plugin-sonarqube-react](plugins/sonarqube-react/package.json)\n* [@backstage/plugin-splunk-on-call](plugins/splunk-on-call/package.json)\n* [@backstage/plugin-stack-overflow](plugins/stack-overflow/package.json)\n* [@backstage/plugin-stack-overflow-backend](plugins/stack-overflow-backend/package.json)\n* [@backstage/plugin-stackstorm](plugins/stackstorm/package.json)\n* [@backstage/plugin-tech-insights](plugins/tech-insights/package.json)\n* [@backstage/plugin-tech-insights-backend](plugins/tech-insights-backend/package.json)\n* [@backstage/plugin-tech-insights-backend-module-jsonfc](plugins/tech-insights-backend-module-jsonfc/package.json)\n* [@backstage/plugin-tech-insights-common](plugins/tech-insights-common/package.json)\n* [@backstage/plugin-tech-insights-node](plugins/tech-insights-node/package.json)\n* [@backstage/plugin-tech-radar](plugins/tech-radar/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n* [@backstage/plugin-techdocs-addons-test-utils](plugins/techdocs-addons-test-utils/package.json)\n* [@backstage/plugin-techdocs-backend](plugins/techdocs-backend/package.json)\n* [@backstage/plugin-techdocs-module-addons-contrib](plugins/techdocs-module-addons-contrib/package.json)\n* [@backstage/plugin-techdocs-node](plugins/techdocs-node/package.json)\n* [@backstage/plugin-techdocs-react](plugins/techdocs-react/package.json)\n* [@backstage/plugin-todo](plugins/todo/package.json)\n* [@backstage/plugin-todo-backend](plugins/todo-backend/package.json)\n* [@backstage/plugin-user-settings](plugins/user-settings/package.json)\n* [@backstage/plugin-user-settings-backend](plugins/user-settings-backend/package.json)\n* [@backstage/plugin-vault](plugins/vault/package.json)\n* [@backstage/plugin-vault-backend](plugins/vault-backend/package.json)\n* [@backstage/plugin-vault-node](plugins/vault-node/package.json)\n* [@backstage/plugin-xcmetrics](plugins/xcmetrics/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/20947/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "camilaibs",
        "created_at": "2023-11-23T10:55:16Z",
        "body": "> [!Note]\r\n> @backstage/maintainers, we need to find a way to bypass this in a sensible way (avoid adding a ignore file for all the packages).\r\n\r\nSimilar issues:  #20948, #20946."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2024-05-04T16:28:47Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 20946,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2023-11-02T16:14:41Z",
    "closed_at": "2024-05-11T16:29:07Z",
    "labels": [
      "help wanted",
      "wontfix",
      "stale",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/20946",
    "body": "\n## Affecting Packages/Plugins\n\n* [root](package.json)\n* [example-app](packages/app/package.json)\n* [@backstage/app-defaults](packages/app-defaults/package.json)\n* [example-app-next](packages/app-next/package.json)\n* [app-next-example-plugin](packages/app-next-example-plugin/package.json)\n* [example-backend](packages/backend/package.json)\n* [@backstage/backend-app-api](packages/backend-app-api/package.json)\n* [@backstage/backend-common](packages/backend-common/package.json)\n* [@backstage/backend-defaults](packages/backend-defaults/package.json)\n* [@backstage/backend-dynamic-feature-service](packages/backend-dynamic-feature-service/package.json)\n* [example-backend-next](packages/backend-next/package.json)\n* [@backstage/backend-openapi-utils](packages/backend-openapi-utils/package.json)\n* [@backstage/backend-plugin-api](packages/backend-plugin-api/package.json)\n* [@backstage/backend-tasks](packages/backend-tasks/package.json)\n* [@backstage/backend-test-utils](packages/backend-test-utils/package.json)\n* [@backstage/catalog-client](packages/catalog-client/package.json)\n* [@backstage/catalog-model](packages/catalog-model/package.json)\n* [@backstage/cli-node](packages/cli-node/package.json)\n* [@backstage/codemods](packages/codemods/package.json)\n* [@backstage/config](packages/config/package.json)\n* [@backstage/config-loader](packages/config-loader/package.json)\n* [@backstage/core-app-api](packages/core-app-api/package.json)\n* [@backstage/core-compat-api](packages/core-compat-api/package.json)\n* [@backstage/core-components](packages/core-components/package.json)\n* [@backstage/core-plugin-api](packages/core-plugin-api/package.json)\n* [@backstage/create-app](packages/create-app/package.json)\n* [@backstage/dev-utils](packages/dev-utils/package.json)\n* [e2e-test](packages/e2e-test/package.json)\n* [@backstage/errors](packages/errors/package.json)\n* [@backstage/frontend-app-api](packages/frontend-app-api/package.json)\n* [@backstage/frontend-plugin-api](packages/frontend-plugin-api/package.json)\n* [@backstage/frontend-test-utils](packages/frontend-test-utils/package.json)\n* [@backstage/integration](packages/integration/package.json)\n* [@backstage/integration-aws-node](packages/integration-aws-node/package.json)\n* [@backstage/integration-react](packages/integration-react/package.json)\n* [@backstage/repo-tools](packages/repo-tools/package.json)\n* [@techdocs/cli](packages/techdocs-cli/package.json)\n* [techdocs-cli-embedded-app](packages/techdocs-cli-embedded-app/package.json)\n* [@backstage/test-utils](packages/test-utils/package.json)\n* [@backstage/plugin-adr](plugins/adr/package.json)\n* [@backstage/plugin-adr-backend](plugins/adr-backend/package.json)\n* [@backstage/plugin-adr-common](plugins/adr-common/package.json)\n* [@backstage/plugin-airbrake](plugins/airbrake/package.json)\n* [@backstage/plugin-airbrake-backend](plugins/airbrake-backend/package.json)\n* [@backstage/plugin-allure](plugins/allure/package.json)\n* [@backstage/plugin-analytics-module-ga](plugins/analytics-module-ga/package.json)\n* [@backstage/plugin-analytics-module-ga4](plugins/analytics-module-ga4/package.json)\n* [@backstage/plugin-analytics-module-newrelic-browser](plugins/analytics-module-newrelic-browser/package.json)\n* [@backstage/plugin-apache-airflow](plugins/apache-airflow/package.json)\n* [@backstage/plugin-api-docs](plugins/api-docs/package.json)\n* [@backstage/plugin-apollo-explorer](plugins/apollo-explorer/package.json)\n* [@backstage/plugin-app-backend](plugins/app-backend/package.json)\n* [@backstage/plugin-app-node](plugins/app-node/package.json)\n* [@backstage/plugin-app-visualizer](plugins/app-visualizer/package.json)\n* [@backstage/plugin-auth-backend](plugins/auth-backend/package.json)\n* [@backstage/plugin-auth-backend-module-atlassian-provider](plugins/auth-backend-module-atlassian-provider/package.json)\n* [@backstage/plugin-auth-backend-module-aws-alb-provider](plugins/auth-backend-module-aws-alb-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gcp-iap-provider](plugins/auth-backend-module-gcp-iap-provider/package.json)\n* [@backstage/plugin-auth-backend-module-github-provider](plugins/auth-backend-module-github-provider/package.json)\n* [@backstage/plugin-auth-backend-module-gitlab-provider](plugins/auth-backend-module-gitlab-provider/package.json)\n* [@backstage/plugin-auth-backend-module-google-provider](plugins/auth-backend-module-google-provider/package.json)\n* [@backstage/plugin-auth-backend-module-guest-provider](plugins/auth-backend-module-guest-provider/package.json)\n* [@backstage/plugin-auth-backend-module-microsoft-provider](plugins/auth-backend-module-microsoft-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-provider](plugins/auth-backend-module-oauth2-provider/package.json)\n* [@backstage/plugin-auth-backend-module-oauth2-proxy-provider](plugins/auth-backend-module-oauth2-proxy-provider/package.json)\n* [@backstage/plugin-auth-backend-module-okta-provider](plugins/auth-backend-module-okta-provider/package.json)\n* [@backstage/plugin-auth-backend-module-pinniped-provider](plugins/auth-backend-module-pinniped-provider/package.json)\n* [@backstage/plugin-auth-backend-module-vmware-cloud-provider](plugins/auth-backend-module-vmware-cloud-provider/package.json)\n* [@backstage/plugin-auth-node](plugins/auth-node/package.json)\n* [@backstage/plugin-azure-devops](plugins/azure-devops/package.json)\n* [@backstage/plugin-azure-devops-backend](plugins/azure-devops-backend/package.json)\n* [@backstage/plugin-azure-devops-common](plugins/azure-devops-common/package.json)\n* [@backstage/plugin-azure-sites](plugins/azure-sites/package.json)\n* [@backstage/plugin-azure-sites-backend](plugins/azure-sites-backend/package.json)\n* [@backstage/plugin-azure-sites-common](plugins/azure-sites-common/package.json)\n* [@backstage/plugin-badges](plugins/badges/package.json)\n* [@backstage/plugin-badges-backend](plugins/badges-backend/package.json)\n* [@backstage/plugin-bazaar](plugins/bazaar/package.json)\n* [@backstage/plugin-bazaar-backend](plugins/bazaar-backend/package.json)\n* [@backstage/plugin-bitbucket-cloud-common](plugins/bitbucket-cloud-common/package.json)\n* [@backstage/plugin-bitrise](plugins/bitrise/package.json)\n* [@backstage/plugin-catalog](plugins/catalog/package.json)\n* [@backstage/plugin-catalog-backend](plugins/catalog-backend/package.json)\n* [@backstage/plugin-catalog-backend-module-aws](plugins/catalog-backend-module-aws/package.json)\n* [@backstage/plugin-catalog-backend-module-azure](plugins/catalog-backend-module-azure/package.json)\n* [@backstage/plugin-catalog-backend-module-backstage-openapi](plugins/catalog-backend-module-backstage-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-cloud](plugins/catalog-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-catalog-backend-module-bitbucket-server](plugins/catalog-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-catalog-backend-module-gcp](plugins/catalog-backend-module-gcp/package.json)\n* [@backstage/plugin-catalog-backend-module-gerrit](plugins/catalog-backend-module-gerrit/package.json)\n* [@backstage/plugin-catalog-backend-module-github](plugins/catalog-backend-module-github/package.json)\n* [@backstage/plugin-catalog-backend-module-github-org](plugins/catalog-backend-module-github-org/package.json)\n* [@backstage/plugin-catalog-backend-module-gitlab](plugins/catalog-backend-module-gitlab/package.json)\n* [@backstage/plugin-catalog-backend-module-incremental-ingestion](plugins/catalog-backend-module-incremental-ingestion/package.json)\n* [@backstage/plugin-catalog-backend-module-ldap](plugins/catalog-backend-module-ldap/package.json)\n* [@backstage/plugin-catalog-backend-module-msgraph](plugins/catalog-backend-module-msgraph/package.json)\n* [@backstage/plugin-catalog-backend-module-openapi](plugins/catalog-backend-module-openapi/package.json)\n* [@backstage/plugin-catalog-backend-module-puppetdb](plugins/catalog-backend-module-puppetdb/package.json)\n* [@backstage/plugin-catalog-backend-module-scaffolder-entity-model](plugins/catalog-backend-module-scaffolder-entity-model/package.json)\n* [@backstage/plugin-catalog-backend-module-unprocessed](plugins/catalog-backend-module-unprocessed/package.json)\n* [@backstage/plugin-catalog-common](plugins/catalog-common/package.json)\n* [@backstage/plugin-catalog-graph](plugins/catalog-graph/package.json)\n* [@backstage/plugin-catalog-import](plugins/catalog-import/package.json)\n* [@backstage/plugin-catalog-node](plugins/catalog-node/package.json)\n* [@backstage/plugin-catalog-react](plugins/catalog-react/package.json)\n* [@backstage/plugin-catalog-unprocessed-entities](plugins/catalog-unprocessed-entities/package.json)\n* [@backstage/plugin-cicd-statistics](plugins/cicd-statistics/package.json)\n* [@backstage/plugin-cicd-statistics-module-gitlab](plugins/cicd-statistics-module-gitlab/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-code-climate](plugins/code-climate/package.json)\n* [@backstage/plugin-code-coverage](plugins/code-coverage/package.json)\n* [@backstage/plugin-code-coverage-backend](plugins/code-coverage-backend/package.json)\n* [@backstage/plugin-codescene](plugins/codescene/package.json)\n* [@backstage/plugin-config-schema](plugins/config-schema/package.json)\n* [@backstage/plugin-cost-insights](plugins/cost-insights/package.json)\n* [@backstage/plugin-devtools](plugins/devtools/package.json)\n* [@backstage/plugin-devtools-backend](plugins/devtools-backend/package.json)\n* [@backstage/plugin-devtools-common](plugins/devtools-common/package.json)\n* [@backstage/plugin-dynatrace](plugins/dynatrace/package.json)\n* [@backstage/plugin-entity-feedback](plugins/entity-feedback/package.json)\n* [@backstage/plugin-entity-feedback-backend](plugins/entity-feedback-backend/package.json)\n* [@backstage/plugin-entity-validation](plugins/entity-validation/package.json)\n* [@backstage/plugin-events-backend](plugins/events-backend/package.json)\n* [@backstage/plugin-events-backend-module-aws-sqs](plugins/events-backend-module-aws-sqs/package.json)\n* [@backstage/plugin-events-backend-module-azure](plugins/events-backend-module-azure/package.json)\n* [@backstage/plugin-events-backend-module-bitbucket-cloud](plugins/events-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-events-backend-module-gerrit](plugins/events-backend-module-gerrit/package.json)\n* [@backstage/plugin-events-backend-module-github](plugins/events-backend-module-github/package.json)\n* [@backstage/plugin-events-backend-module-gitlab](plugins/events-backend-module-gitlab/package.json)\n* [@backstage/plugin-events-backend-test-utils](plugins/events-backend-test-utils/package.json)\n* [@backstage/plugin-events-node](plugins/events-node/package.json)\n* [@internal/plugin-todo-list](plugins/example-todo-list/package.json)\n* [@internal/plugin-todo-list-backend](plugins/example-todo-list-backend/package.json)\n* [@internal/plugin-todo-list-common](plugins/example-todo-list-common/package.json)\n* [@backstage/plugin-explore](plugins/explore/package.json)\n* [@backstage/plugin-explore-backend](plugins/explore-backend/package.json)\n* [@backstage/plugin-explore-react](plugins/explore-react/package.json)\n* [@backstage/plugin-firehydrant](plugins/firehydrant/package.json)\n* [@backstage/plugin-fossa](plugins/fossa/package.json)\n* [@backstage/plugin-gcalendar](plugins/gcalendar/package.json)\n* [@backstage/plugin-gcp-projects](plugins/gcp-projects/package.json)\n* [@backstage/plugin-git-release-manager](plugins/git-release-manager/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-github-deployments](plugins/github-deployments/package.json)\n* [@backstage/plugin-github-issues](plugins/github-issues/package.json)\n* [@backstage/plugin-github-pull-requests-board](plugins/github-pull-requests-board/package.json)\n* [@backstage/plugin-gitops-profiles](plugins/gitops-profiles/package.json)\n* [@backstage/plugin-gocd](plugins/gocd/package.json)\n* [@backstage/plugin-graphiql](plugins/graphiql/package.json)\n* [@backstage/plugin-graphql-voyager](plugins/graphql-voyager/package.json)\n* [@backstage/plugin-home](plugins/home/package.json)\n* [@backstage/plugin-home-react](plugins/home-react/package.json)\n* [@backstage/plugin-ilert](plugins/ilert/package.json)\n* [@backstage/plugin-jenkins](plugins/jenkins/package.json)\n* [@backstage/plugin-jenkins-backend](plugins/jenkins-backend/package.json)\n* [@backstage/plugin-jenkins-common](plugins/jenkins-common/package.json)\n* [@backstage/plugin-kafka](plugins/kafka/package.json)\n* [@backstage/plugin-kafka-backend](plugins/kafka-backend/package.json)\n* [@backstage/plugin-kubernetes](plugins/kubernetes/package.json)\n* [@backstage/plugin-kubernetes-backend](plugins/kubernetes-backend/package.json)\n* [@backstage/plugin-kubernetes-cluster](plugins/kubernetes-cluster/package.json)\n* [@backstage/plugin-kubernetes-common](plugins/kubernetes-common/package.json)\n* [@backstage/plugin-kubernetes-node](plugins/kubernetes-node/package.json)\n* [@backstage/plugin-kubernetes-react](plugins/kubernetes-react/package.json)\n* [@backstage/plugin-lighthouse](plugins/lighthouse/package.json)\n* [@backstage/plugin-lighthouse-backend](plugins/lighthouse-backend/package.json)\n* [@backstage/plugin-lighthouse-common](plugins/lighthouse-common/package.json)\n* [@backstage/plugin-linguist](plugins/linguist/package.json)\n* [@backstage/plugin-linguist-backend](plugins/linguist-backend/package.json)\n* [@backstage/plugin-microsoft-calendar](plugins/microsoft-calendar/package.json)\n* [@backstage/plugin-newrelic](plugins/newrelic/package.json)\n* [@backstage/plugin-newrelic-dashboard](plugins/newrelic-dashboard/package.json)\n* [@backstage/plugin-nomad](plugins/nomad/package.json)\n* [@backstage/plugin-nomad-backend](plugins/nomad-backend/package.json)\n* [@backstage/plugin-notifications](plugins/notifications/package.json)\n* [@backstage/plugin-notifications-backend](plugins/notifications-backend/package.json)\n* [@backstage/plugin-notifications-node](plugins/notifications-node/package.json)\n* [@backstage/plugin-octopus-deploy](plugins/octopus-deploy/package.json)\n* [@backstage/plugin-opencost](plugins/opencost/package.json)\n* [@backstage/plugin-org](plugins/org/package.json)\n* [@backstage/plugin-org-react](plugins/org-react/package.json)\n* [@backstage/plugin-pagerduty](plugins/pagerduty/package.json)\n* [@backstage/plugin-periskop](plugins/periskop/package.json)\n* [@backstage/plugin-periskop-backend](plugins/periskop-backend/package.json)\n* [@backstage/plugin-permission-backend](plugins/permission-backend/package.json)\n* [@backstage/plugin-permission-backend-module-allow-all-policy](plugins/permission-backend-module-policy-allow-all/package.json)\n* [@backstage/plugin-permission-common](plugins/permission-common/package.json)\n* [@backstage/plugin-permission-node](plugins/permission-node/package.json)\n* [@backstage/plugin-permission-react](plugins/permission-react/package.json)\n* [@backstage/plugin-playlist](plugins/playlist/package.json)\n* [@backstage/plugin-playlist-backend](plugins/playlist-backend/package.json)\n* [@backstage/plugin-playlist-common](plugins/playlist-common/package.json)\n* [@backstage/plugin-proxy-backend](plugins/proxy-backend/package.json)\n* [@backstage/plugin-puppetdb](plugins/puppetdb/package.json)\n* [@backstage/plugin-rollbar](plugins/rollbar/package.json)\n* [@backstage/plugin-rollbar-backend](plugins/rollbar-backend/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-scaffolder-backend](plugins/scaffolder-backend/package.json)\n* [@backstage/plugin-scaffolder-backend-module-azure](plugins/scaffolder-backend-module-azure/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket](plugins/scaffolder-backend-module-bitbucket/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-cloud](plugins/scaffolder-backend-module-bitbucket-cloud/package.json)\n* [@backstage/plugin-scaffolder-backend-module-bitbucket-server](plugins/scaffolder-backend-module-bitbucket-server/package.json)\n* [@backstage/plugin-scaffolder-backend-module-confluence-to-markdown](plugins/scaffolder-backend-module-confluence-to-markdown/package.json)\n* [@backstage/plugin-scaffolder-backend-module-cookiecutter](plugins/scaffolder-backend-module-cookiecutter/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gerrit](plugins/scaffolder-backend-module-gerrit/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitea](plugins/scaffolder-backend-module-gitea/package.json)\n* [@backstage/plugin-scaffolder-backend-module-github](plugins/scaffolder-backend-module-github/package.json)\n* [@backstage/plugin-scaffolder-backend-module-gitlab](plugins/scaffolder-backend-module-gitlab/package.json)\n* [@backstage/plugin-scaffolder-backend-module-rails](plugins/scaffolder-backend-module-rails/package.json)\n* [@backstage/plugin-scaffolder-backend-module-sentry](plugins/scaffolder-backend-module-sentry/package.json)\n* [@backstage/plugin-scaffolder-backend-module-yeoman](plugins/scaffolder-backend-module-yeoman/package.json)\n* [@backstage/plugin-scaffolder-common](plugins/scaffolder-common/package.json)\n* [@backstage/plugin-scaffolder-node](plugins/scaffolder-node/package.json)\n* [@backstage/plugin-scaffolder-node-test-utils](plugins/scaffolder-node-test-utils/package.json)\n* [@backstage/plugin-scaffolder-react](plugins/scaffolder-react/package.json)\n* [@backstage/plugin-search](plugins/search/package.json)\n* [@backstage/plugin-search-backend](plugins/search-backend/package.json)\n* [@backstage/plugin-search-backend-module-catalog](plugins/search-backend-module-catalog/package.json)\n* [@backstage/plugin-search-backend-module-elasticsearch](plugins/search-backend-module-elasticsearch/package.json)\n* [@backstage/plugin-search-backend-module-explore](plugins/search-backend-module-explore/package.json)\n* [@backstage/plugin-search-backend-module-pg](plugins/search-backend-module-pg/package.json)\n* [@backstage/plugin-search-backend-module-stack-overflow-collator](plugins/search-backend-module-stack-overflow-collator/package.json)\n* [@backstage/plugin-search-backend-module-techdocs](plugins/search-backend-module-techdocs/package.json)\n* [@backstage/plugin-search-backend-node](plugins/search-backend-node/package.json)\n* [@backstage/plugin-search-common](plugins/search-common/package.json)\n* [@backstage/plugin-search-react](plugins/search-react/package.json)\n* [@backstage/plugin-sentry](plugins/sentry/package.json)\n* [@backstage/plugin-shortcuts](plugins/shortcuts/package.json)\n* [@backstage/plugin-signals](plugins/signals/package.json)\n* [@backstage/plugin-signals-backend](plugins/signals-backend/package.json)\n* [@backstage/plugin-signals-node](plugins/signals-node/package.json)\n* [@backstage/plugin-signals-react](plugins/signals-react/package.json)\n* [@backstage/plugin-sonarqube](plugins/sonarqube/package.json)\n* [@backstage/plugin-sonarqube-backend](plugins/sonarqube-backend/package.json)\n* [@backstage/plugin-sonarqube-react](plugins/sonarqube-react/package.json)\n* [@backstage/plugin-splunk-on-call](plugins/splunk-on-call/package.json)\n* [@backstage/plugin-stack-overflow](plugins/stack-overflow/package.json)\n* [@backstage/plugin-stack-overflow-backend](plugins/stack-overflow-backend/package.json)\n* [@backstage/plugin-stackstorm](plugins/stackstorm/package.json)\n* [@backstage/plugin-tech-insights](plugins/tech-insights/package.json)\n* [@backstage/plugin-tech-insights-backend](plugins/tech-insights-backend/package.json)\n* [@backstage/plugin-tech-insights-backend-module-jsonfc](plugins/tech-insights-backend-module-jsonfc/package.json)\n* [@backstage/plugin-tech-insights-common](plugins/tech-insights-common/package.json)\n* [@backstage/plugin-tech-insights-node](plugins/tech-insights-node/package.json)\n* [@backstage/plugin-tech-radar](plugins/tech-radar/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n* [@backstage/plugin-techdocs-addons-test-utils](plugins/techdocs-addons-test-utils/package.json)\n* [@backstage/plugin-techdocs-backend](plugins/techdocs-backend/package.json)\n* [@backstage/plugin-techdocs-module-addons-contrib](plugins/techdocs-module-addons-contrib/package.json)\n* [@backstage/plugin-techdocs-node](plugins/techdocs-node/package.json)\n* [@backstage/plugin-techdocs-react](plugins/techdocs-react/package.json)\n* [@backstage/plugin-todo](plugins/todo/package.json)\n* [@backstage/plugin-todo-backend](plugins/todo-backend/package.json)\n* [@backstage/plugin-user-settings](plugins/user-settings/package.json)\n* [@backstage/plugin-user-settings-backend](plugins/user-settings-backend/package.json)\n* [@backstage/plugin-vault](plugins/vault/package.json)\n* [@backstage/plugin-vault-backend](plugins/vault-backend/package.json)\n* [@backstage/plugin-vault-node](plugins/vault-node/package.json)\n* [@backstage/plugin-xcmetrics](plugins/xcmetrics/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/20946/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "camilaibs",
        "created_at": "2023-11-23T10:55:42Z",
        "body": "> [!Note]\r\n> @backstage/maintainers, we need to find a way to bypass this in a sensible way (avoid adding a ignore file for all the packages).\r\n\r\nSimilar issues:  #20948, #20947."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2024-05-04T16:28:48Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 17019,
    "title": "scaffolder/next: Allow running `async` validators `onBlur` of field extensions",
    "created_at": "2023-03-22T14:27:01Z",
    "closed_at": "2023-09-22T10:29:58Z",
    "labels": [
      "enhancement",
      "help wanted",
      "stale",
      "area:scaffolder"
    ],
    "url": "https://github.com/backstage/backstage/issues/17019",
    "body": "Not sure if this is possible, would like some exploration. But would be good if the `async` validators could be run `onBlur` for that form element individually.\r\n\r\nI think that there is `onBlur` that gets given to the `FieldExtension`, so it should be possible to call `onBlur` selectively, and listen to that handler somehow to run the `validator` for that element.\r\n\r\nI think that coupled with the `liveValidate` prop could yield a good experience.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/17019/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2023-05-22T09:16:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-07-21T10:28:22Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-09-22T09:43:48Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "benjdlambert",
        "created_at": "2023-09-22T10:29:58Z",
        "body": "Gonna close this as it doesn't look like it's that interesting for users. Feel free to comment if it's something you'd like to see."
      }
    ]
  },
  {
    "number": 13730,
    "title": "[Scaffolder] RepoUrlPicker allowedOwners selection changes automatically",
    "created_at": "2022-09-19T14:23:03Z",
    "closed_at": "2022-10-07T09:02:58Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted",
      "area:scaffolder",
      "hacktoberfest"
    ],
    "url": "https://github.com/backstage/backstage/issues/13730",
    "body": "## Expected Behavior\r\n\r\nWhen multiple allowedOwners are in the template, the user selects the desired owner and the selection remains while filling out the rest of the template form.\r\n\r\n## Actual Behavior\r\n\r\nWhen multiple allowedOwners exist, the user has to select the desired owner twice to get the selection to \"stick\", and also the selection switches back to the first option when the \"Repository\" field is updated.\r\n\r\n## Steps to Reproduce\r\n\r\n1. Use a template with RepoUrlPicker containing multiple allowedOwners\r\n    ```\r\n    - title: Choose a location\r\n      required:\r\n        - repoUrl\r\n      properties:\r\n        repoUrl:\r\n          title: Repository Location\r\n          type: string\r\n          ui:field: RepoUrlPicker\r\n          ui:options:\r\n            allowedHosts:\r\n              - github.com\r\n            allowedOwners:\r\n              - some-github-owner-A\r\n              - some-github-owner-B\r\n              - some-github-owner-C\r\n            requestUserCredentials:\r\n              secretsKey: USER_OAUTH_TOKEN\r\n    ```\r\n2. Select an owner (B) other than the first (A), it should remain on the first (A)\r\n3. Select owner (B) again, it should now remain selected (B)\r\n4. Start typing in the Repository field, the owner should switch back to the first (A)\r\n\r\n## Context\r\n\r\nWe're trying to limit the owners available to the user by presenting a list of GitHub organizations to choose from.\r\n\r\nThis results in difficulty for the user to select their owner, they have to select the owner multiple times to get it to \"stick\" when filling out the template forms, or they don't see the owner switch on them and end up creating the repository in the wrong organization.\r\n\r\n## Your Environment\r\n\r\nThis behaviour happens in Safari and Firefox, though I mainly work in Safari.\r\n\r\n- Browser Information: Safari Version 15.6.1 (17613.3.9.1.16)\r\n\r\n- Output of `yarn backstage-cli info`: <!--- Paste into the code block below  -->\r\n\r\n```text\r\nOS:   Darwin 21.6.0 - darwin/arm64\r\nnode: v18.7.0\r\nyarn: 3.2.1\r\ncli:  0.18.1 (installed)\r\nbackstage:  1.4.0\r\n\r\nDependencies:\r\n  @backstage/app-defaults                          1.0.5\r\n  @backstage/backend-common                        0.14.1, 0.15.0\r\n  @backstage/backend-plugin-api                    0.1.1\r\n  @backstage/backend-tasks                         0.3.4\r\n  @backstage/catalog-client                        1.0.4\r\n  @backstage/catalog-model                         1.1.0\r\n  @backstage/cli-common                            0.1.9\r\n  @backstage/cli                                   0.18.1\r\n  @backstage/config-loader                         1.1.3\r\n  @backstage/config                                1.0.1\r\n  @backstage/core-app-api                          1.0.5\r\n  @backstage/core-components                       0.10.0, 0.11.0\r\n  @backstage/core-plugin-api                       1.0.5\r\n  @backstage/errors                                1.1.0\r\n  @backstage/integration-react                     1.1.3\r\n  @backstage/integration                           1.3.0\r\n  @backstage/plugin-api-docs                       0.8.8\r\n  @backstage/plugin-auth-backend                   0.15.1\r\n  @backstage/plugin-auth-node                      0.2.4\r\n  @backstage/plugin-catalog-backend-module-github  0.1.6\r\n  @backstage/plugin-catalog-backend                1.3.1\r\n  @backstage/plugin-catalog-common                 1.0.5\r\n  @backstage/plugin-catalog-graph                  0.2.20\r\n  @backstage/plugin-catalog-import                 0.8.11\r\n  @backstage/plugin-catalog-node                   1.0.1\r\n  @backstage/plugin-catalog-react                  1.1.3\r\n  @backstage/plugin-catalog                        1.5.0\r\n  @backstage/plugin-github-actions                 0.5.8\r\n  @backstage/plugin-github-pull-requests-board     0.1.2\r\n  @backstage/plugin-home                           0.4.24\r\n  @backstage/plugin-org                            0.5.8\r\n  @backstage/plugin-permission-common              0.6.3\r\n  @backstage/plugin-permission-node                0.6.4\r\n  @backstage/plugin-permission-react               0.4.4\r\n  @backstage/plugin-proxy-backend                  0.2.29\r\n  @backstage/plugin-scaffolder-backend             1.5.1\r\n  @backstage/plugin-scaffolder-common              1.1.2\r\n  @backstage/plugin-scaffolder                     1.5.0\r\n  @backstage/plugin-search-backend-module-pg       0.3.6\r\n  @backstage/plugin-search-backend-node            1.0.1\r\n  @backstage/plugin-search-backend                 1.0.1\r\n  @backstage/plugin-search-common                  1.0.0\r\n  @backstage/plugin-search-react                   1.0.1\r\n  @backstage/plugin-search                         1.0.1\r\n  @backstage/plugin-sonarqube                      0.3.7\r\n  @backstage/plugin-stack-overflow                 0.1.4\r\n  @backstage/plugin-tech-radar                     0.5.15\r\n  @backstage/plugin-techdocs-backend               1.2.1\r\n  @backstage/plugin-techdocs-module-addons-contrib 1.0.3\r\n  @backstage/plugin-techdocs-node                  1.3.0\r\n  @backstage/plugin-techdocs-react                 1.0.3\r\n  @backstage/plugin-techdocs                       1.3.1\r\n  @backstage/plugin-user-settings                  0.4.7\r\n  @backstage/release-manifests                     0.0.5\r\n  @backstage/test-utils                            1.1.3\r\n  @backstage/theme                                 0.2.16\r\n  @backstage/types                                 1.0.0\r\n  @backstage/version-bridge                        1.0.1\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/13730/comments",
    "author": "cklewin",
    "comments": [
      {
        "user": "freben",
        "created_at": "2022-09-22T12:26:23Z",
        "body": "Oh! That sounds like some sort of odd race condition or so. Are you able to have a look at fixing it? 🙏 \r\n"
      },
      {
        "user": "cklewin",
        "created_at": "2022-09-22T15:28:04Z",
        "body": "> Oh! That sounds like some sort of odd race condition or so. Are you able to have a look at fixing it? 🙏\r\n\r\nI did take a look at some of the code attempting to understand, but unfortunately I couldn't determine the cause.  I agree, some race condition involving the onchange function along with the useState / useEffect usage.  After spending some time attempting to narrow it down, I wasn't able to fully understand what's being done so I opened this report hoping someone with more experience in the existing flow would make sense of it."
      },
      {
        "user": "Nitinvonage",
        "created_at": "2022-09-26T09:14:10Z",
        "body": "we are also facing the same issue with the backstage version - 1.5.0.\r\nIt looks like the onChange event is re-rendering the component and its parent."
      },
      {
        "user": "Parsifal-M",
        "created_at": "2022-10-02T14:05:42Z",
        "body": "Hey, I've been toying around with this one and I think I have a solution, could you please assign to me? :smile: :rocket: "
      }
    ]
  },
  {
    "number": 13014,
    "title": "[microsite] Plugin Marketplace - Category Filter",
    "created_at": "2022-08-08T13:19:04Z",
    "closed_at": "2023-05-18T13:02:28Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/13014",
    "body": "## Feature Suggestion\r\n\r\nIt would be great now that there are many items in the Plugin Marketplace that we add a filter by category so that way you can find plugins a little more easily\r\n\r\n## Possible Implementation\r\n\r\nThis could simply be a drop down with all the available categories or as complex as a multi-select and then the cards would filter based on the selection\r\n\r\n## Context\r\n\r\nNow that there are lots of awesome plugins it's getting a bit harder to find things\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/13014/comments",
    "author": "awanlin",
    "comments": [
      {
        "user": "jhaals",
        "created_at": "2022-08-11T11:14:39Z",
        "body": "Yes that sounds like a great idea. Would it be worth doing this as a followup after Docusaurus 2?"
      },
      {
        "user": "awanlin",
        "created_at": "2022-08-30T13:15:27Z",
        "body": "Yes, I gave this a try myself while I was on vacation and had the urge to code a little. I could get the drop down populated with the categories but trying to get it to filter just wasn't going to work"
      },
      {
        "user": "Rugvip",
        "created_at": "2022-09-01T10:47:56Z",
        "body": "Tbh it might be a good idea to put this one on ice until #12019 is through. Client-side scripting is a bit of a pain on the microsite currently."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-10-31T10:50:39Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "awanlin",
        "created_at": "2022-10-31T12:25:00Z",
        "body": "Still something that would be great to have once #12019 has been completed 👍 "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-12-30T12:37:05Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-03-03T09:36:46Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "awanlin",
        "created_at": "2023-03-03T12:41:55Z",
        "body": "Still want this ⬆️ "
      },
      {
        "user": "freben",
        "created_at": "2023-03-03T15:20:08Z",
        "body": "And likely more possible now that #12019 is in!"
      },
      {
        "user": "antoniobergas",
        "created_at": "2023-04-17T18:02:19Z",
        "body": "@awanlin you already gave a try right? Want an extra hand?"
      },
      {
        "user": "awanlin",
        "created_at": "2023-04-17T18:09:18Z",
        "body": "Yeah, now that we are on Docusaurus 2 this should be much easier. My workload is pretty high right now - I already have 4 bigger PRs waiting for review - so feel free to run with this @antoniobergas 🚀 "
      },
      {
        "user": "antoniobergas",
        "created_at": "2023-04-17T18:12:46Z",
        "body": "Okey, happy to help! \r\n\r\nSo a simple dropdown to filter by category tag to start with and later we can see if we want more. Sounds good?"
      },
      {
        "user": "awanlin",
        "created_at": "2023-04-17T18:13:29Z",
        "body": "Yes, that sounds awesome!"
      },
      {
        "user": "awanlin",
        "created_at": "2023-04-17T18:14:25Z",
        "body": "Stretch goal: multi-select if that's not too hard"
      },
      {
        "user": "antoniobergas",
        "created_at": "2023-04-19T22:05:31Z",
        "body": "@awanlin\r\n\r\nSo wanna give some background about what I did.\r\n\r\nImplement a single selector was easy so then I tried the multi one but the feeling in the UI was not good enough from my point of view (If so select more than 2 categories the rest was hidden inside the selector)\r\n\r\nSo after make a quick search I decide to go for a chip filter. I honestly love the final result and I think that fits more the the microsite design.\r\n\r\nLet me know what you think! 😊\r\n\r\nPD: By the way I don't have that much expertise on React so further suggestions will be appreciated to make a better code!"
      }
    ]
  },
  {
    "number": 11379,
    "title": "Gerrit integration: Implement scaffolder publish action",
    "created_at": "2022-05-09T06:53:38Z",
    "closed_at": "2022-05-20T11:17:41Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area:scaffolder"
    ],
    "url": "https://github.com/backstage/backstage/issues/11379",
    "body": "## Feature Suggestion\r\n\r\nA missing piece of the Gerrit Integration is support for publishing to new Gerrit projects with the \"Scaffolder\". This is issue is created to track our contribution of this feature.\r\n\r\n## Possible Implementation\r\n\r\n* A new RepoUrlPicker for Gerrit will be added.\r\n* A new action in \"scaffolder-backend\" that will create and push to a new Gerrit project (\"gerrit-publish\").\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/11379/comments",
    "author": "anicke",
    "comments": [
      {
        "user": "freben",
        "created_at": "2022-05-09T08:03:22Z",
        "body": "Sounds good! Is this something you are looking to implement?"
      },
      {
        "user": "anicke",
        "created_at": "2022-05-09T11:43:51Z",
        "body": "Yes, you can assign me."
      }
    ]
  },
  {
    "number": 11060,
    "title": "Linking TechDocs images not working as expected",
    "created_at": "2022-04-25T09:29:14Z",
    "closed_at": "2022-07-25T09:09:08Z",
    "labels": [
      "bug",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/11060",
    "body": "## Expected Behavior\r\nIt should be possible to have the possibility to link to an image within tech docs. \r\n\r\nThere is a need, especially for technical documentation, to zoom into a diagram with a lot of boxes and lines. The easiest way to achieve this on MD sites is to link to the image itself which opens it up on a new tab and browser native functionality can be used. Using a link like `[![](assets/my_image.jpg)](assets/my_image.jpg)` should work and link to the image itself.\r\n\r\n## Actual Behavior\r\nThe application tries to link to the image but because Docs and their assets are piped through the backend, displaying individual images is not possible.\r\n\r\n## Steps to Reproduce\r\nUse construct of tech docs img linking as stated above.\r\n\r\n## Possible implementation\r\nAdd a new preRender function into Backstage plugins/techdocs/src/reader/components/Reader.tsx file, around the line ~240.\r\n    This prerender function decorates images within the rendered page to be clickable as described as standard markdown functionality\r\n        [ ![](image.jpg) ](backendurl/api/static/namespace/component/component-name/image.jpg)\r\n\r\n\r\n\r\n## Your Environment\r\nStandard browser.\r\nS3 hosted tech docs.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/11060/comments",
    "author": "Xantier",
    "comments": [
      {
        "user": "garyniemen",
        "created_at": "2022-04-25T12:33:52Z",
        "body": "Any concerns about this @ottosichert or @emmaindal before I put the help wanted label on it."
      },
      {
        "user": "ottosichert",
        "created_at": "2022-05-02T07:50:06Z",
        "body": "`[![](assets/my_image.jpg)](assets/my_image.jpg)` is valid Markdown and should be rendered correctly, so yes indeed thanks for reporting this issue!"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-14T13:08:04Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 10477,
    "title": "Techdocs local build when used with techdocs backend sync api, gives Out Of Memory",
    "created_at": "2022-03-28T11:19:15Z",
    "closed_at": "2022-04-25T15:44:08Z",
    "labels": [
      "bug",
      "help wanted",
      "area:techdocs"
    ],
    "url": "https://github.com/backstage/backstage/issues/10477",
    "body": "We use techdocs backend plugin's sync api to generate the docs for us locally.\r\ntechdocs.builder and techdocs.runIn is set to \"local\"\r\nWe have 16 GB openshift pod where the app is deployed.\r\nLet's saw when we call the techdocs backend sync api for multiple docs generation one after the other, then the pod gives Out Of Memory. Do we need to do any memory setting specifically for this?",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/10477/comments",
    "author": "shanthisagar-dhanya-kumar-db-zz",
    "comments": [
      {
        "user": "garyniemen",
        "created_at": "2022-04-25T15:14:01Z",
        "body": "Has anybody come across this? Any answers for @shanthisagar-dhanya-kumar-db "
      },
      {
        "user": "shanthisagar-dhanya-kumar-db-zz",
        "created_at": "2022-04-25T15:44:08Z",
        "body": "Sorry, I have to say it was our openshift pod config which was causing the issue. We were using 1.6 GB and when I changed to around 10 GB, it started working as expected. I will close this ticket now."
      }
    ]
  },
  {
    "number": 10224,
    "title": "Responsive Catalog Graph card",
    "created_at": "2022-03-16T08:24:43Z",
    "closed_at": "2022-09-20T14:01:20Z",
    "labels": [
      "enhancement",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/10224",
    "body": "## Enhancement Suggestion\r\n\r\nCurrently catalog graph card has a `height` prop that can be passed into it, which defines the height of the card itself. This becomes a bit problematic for cases where one component within the catalog has a graphs of 2 nodes and another one has tens of hundreds of nodes. Choosing the correct values for these is not trivial. \r\n\r\nIdeally the card should have responsive height that matches the underlying d3 graph displayed within it. \r\n\r\n## Possible Implementation\r\n* CSS Magic?\r\n* Would we need to calculate the amount of nodes, the length of their texts displayed in the graph and then calculate how much space they would take to be able to estimate the correct height? \r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/10224/comments",
    "author": "Xantier",
    "comments": [
      {
        "user": "freben",
        "created_at": "2022-03-21T18:58:02Z",
        "body": "Hm. And as you add different rendering modes, layout directions etc, it just gets harder and harder.\r\n\r\nIs there some argument to be made for putting control in the hands of the user? Making a best effort initial guess and then letting the user resize the area or press a fullscreen button or similar?"
      },
      {
        "user": "Xantier",
        "created_at": "2022-03-22T13:22:53Z",
        "body": "Yeah, tricky bit of magic will be needed regardless if this is approached. It could make sense to have more capabilities in the form of zooming/fullscreenifying the thing, kinda like those exist on the catalog graph page. I think that would go a long way already. \r\n\r\nHaving a fully responsive card size might cause messups on the rest of the layout as well possibly..."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-14T13:08:20Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T13:48:37Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 9957,
    "title": "Load pre-rendered docs from gh-pages branch ",
    "created_at": "2022-03-03T17:25:39Z",
    "closed_at": "2022-09-20T14:01:23Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/9957",
    "body": "We use `mkdocs gh-deploy`  in our CI pipeline.\r\nThis deploys the redered `site/` to the `gh-pages` branch where GitHub serves it.\r\n\r\nThe issue is we have **rendered html files alongside the markdown files** in `docs/` dir.\r\n\r\nso our `mkdocs.yaml` has this:\r\n```yaml\r\nnav:\r\n    - Home: index.md\r\n    - Warehouse Size: warehouse.md\r\n    - Deployment: deployment.md\r\n    - Style Guide: styleguide.md\r\n    - Reporting Issues: issues.md\r\n    - dbt Docs: dbt.html\r\n\r\n<omitted>\r\n\r\nplugins:\r\n    - techdocs-core\r\n\r\n```\r\nThis works well on GitHub Pages. But the rendered html page gives a 404 on Backstage.\r\n\r\nIs there a way to allow TechDocs to serve from the rendered gh-pages branch as opposed to running `mkdocs` ?\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/9957/comments",
    "author": "aelbozie",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-05-02T17:46:00Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-14T13:08:31Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T13:48:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 8920,
    "title": "Allow insertion of custom Nunjucks filters",
    "created_at": "2022-01-13T17:47:02Z",
    "closed_at": "2022-01-24T10:50:27Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/8920",
    "body": "We'd appreciate the ability to insert custom Nunjucks filters when running Nunjucks on both the `fetch:template` action and when processing the template manifest (`app-template.yaml`).\r\n\r\n## Feature Suggestion\r\n\r\nWe have found numerous reasons for wanting custom Nunjucks filters in our software templates but the only way to insert them is to fork the Backstage repo and modify `@backstage/scaffolder-backend`. We've done this now... but wowza that is not fun. We'd much prefer the ability to pass an array of filters into the scaffolder's `createRouter()` or some such and then blow away our customized fork. (After writing this ticket, I will also approach my leadership and ask about contributing our custom filter(s) to Backstage.)\r\n\r\n## Possible Implementation\r\n\r\nAppend a new property to `RouterOptions`:\r\n\r\n```ts\r\ninterface RouterOptions {\r\n    logger: Logger;\r\n    config: Config;\r\n    reader: UrlReader;\r\n    database: PluginDatabaseManager;\r\n    catalogClient: CatalogApi;\r\n    actions?: TemplateAction<any>[];\r\n    taskWorkers?: number;\r\n    containerRunner?: ContainerRunner;\r\n    taskBroker?: TaskBroker;\r\n    nunjucksFilters?: ((data: any) => any)[];\r\n}\r\n```\r\n\r\nIt's a pretty deep rabbit hole for how to get those filters into the `SecureTemplater` when starting with `createRouter()`, which we have not bothered with (our one custom filter is added directly to our forked copy of Backstage and injected directly into the `SecureTemplater`). Hopefully that path, though tedious, would be pretty straightforward though.\r\n\r\n## Context\r\n\r\nSo far we have three reasons we'd like to do this:\r\n\r\n1. Perform specialized string manipulation on the user's input. For instance, right now we have to ask for the project name twice but in two different formats: once when asking for the repo URL, and again for a project title. It would be great if we could generate the project title from the repo URL's `repo` property based on a nunjucks filter. Right now we do this with a custom action, but I think it would make a lot more sense as a filter.\r\n2. File uploads. If a user uploads a file, that file enters the `steps` section of the manifest as a data URI - not very consumer friendly. The custom filter that we added to our Backstage fork takes the data URI and outputs an object with properties for `name`, `text`, and a couple others. A custom action would have worked here too - take in the data URI, output multiple values - but A) that never occurred to me when I first implemented it, and B) like above, it seems to make more sense as a filter.\r\n3. Splitting strings, such as the common `.split('.')` so that we can perform logic based on the filename extension of the user's uploaded file. Again... could write a custom action for this... but I'd rather have a Nunjucks filter so I can write `${{ (dataUri | fromFile).name | split('.') | last | upper }}`",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8920/comments",
    "author": "DavidZemon",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2022-01-13T18:26:43Z",
        "body": "👍 , I think it makes sense to open up for that. Will say that `SecureTemplater` is a very important security layer and that you open yourself up to RCE vulnerabilities without it. That said I think we can have the custom filters wrapped to call out from the VM, just gotta make sure we JSON serialize things as they're passed in and out"
      },
      {
        "user": "DavidZemon",
        "created_at": "2022-01-19T19:26:43Z",
        "body": "@Rugvip, i've been given approval to complete this work in our next sprint, starting tomorrow afternoon. Our sprints last three weeks and I've estimated one week for completion. I plan to tackle this as the first ticket in the sprint. Hopefully you'll see a PR soon."
      }
    ]
  },
  {
    "number": 8869,
    "title": "Move out Storybook into it's own workspace",
    "created_at": "2022-01-11T15:57:27Z",
    "closed_at": "2022-01-27T10:20:02Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/8869",
    "body": "We've got a real issue with upgrading certain dependencies, looking at you webpack 👀 , because we have two different versions of webpack v4, and v5 running side by side, and the types are all over the place for the webpack plugins and libraries.\r\n\r\nWe have a stable build right now, but trying to upgrade dependencies #8793 #8548 are proving to be a massive time sink as we need to get the correct modules installed in the correct places for our typescript build to pass with `skipLibCheck: false`.\r\n\r\nNot hoisting the packages from the `storybook` workspace has worked for now, but it would be really nice if we just had one version of webpack and all the dev-server dependencies in the project.\r\n\r\nUntil storybook starts to use v5 out of the box, there's little we can do, as you can use v5 with storybook, but it will also try and bring in v5 which makes the whole thing even worse.\r\n\r\nLet's move out Storybook into it's own yarn workspaces, that requires a seperate yarn install to get up and running and would install things in `storybook/node_modules` seperate with it's own yarn.lock.\r\n\r\nMaybe there's also a possibility to skip the build tooling of storybook entirely and just get it to generate something that we can hook into our own build system instead.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8869/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "snehaljos",
        "created_at": "2022-01-12T12:34:59Z",
        "body": "hi am interested to work on it but I need some help can I work  on it?"
      },
      {
        "user": "benjdlambert",
        "created_at": "2022-01-12T12:45:34Z",
        "body": "So I think it should be a case of removing `storybook` from `packages` and placing it at the root level under `storybook/` and then making sure that all the stories still work, and that any workflows that run storybook need to do a `yarn install` in the `storybook` directory as well as a normal `yarn install`. Feel free to go ahead and see if you can get this working, maybe there could also be other dragons which make this a little tricky and not a `good first issue`. 😅 "
      },
      {
        "user": "benjdlambert",
        "created_at": "2022-01-27T10:20:18Z",
        "body": "Fixed! Thanks @snehaljos!"
      }
    ]
  },
  {
    "number": 8559,
    "title": "[Techdocs] Techdocs looks for files in wrong location in Azure Storage",
    "created_at": "2021-12-21T07:59:11Z",
    "closed_at": "2022-09-20T14:20:18Z",
    "labels": [
      "bug",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/8559",
    "body": "Given this catalog-info:\r\n\r\n```\r\napiVersion: backstage.io/v1alpha1\r\nkind: Component\r\nmetadata:\r\n  name: Foobar-tech-docs\r\n  description: General tech docs for Foobar\r\n  annotations:\r\n    github.com/project-slug: Foobar/developer-docs\r\n    backstage.io/techdocs-ref: dir:.\r\n```\r\n\r\nWhen the Techdocs plugin locates files, it looks for `/api/techdocs/static/docs/default/component/foobar-tech-docs/index.html`, which looks similar to the path in the Azure Storage Container, except that where it says \"foobar-tech-docs\", the storage provider has _actually_ created a folder named `developer-docs` (which is the repo-name).\r\n\r\nWhen I modified the catalog-info to have `metadata.name: developer-docs`, it started working.\r\n\r\n## Expected Behavior\r\n\r\nTech docs documentation should work even when repository name and `metadata.name` mismatch.\r\n\r\n## Current Behavior\r\n\r\n404: Mic drop when repository name mismatches component name as specified in catalog-info.yaml.\r\n\r\n## Possible Solution\r\n\r\nRenaming the `metdata.name` to match repository name fixed it. Seems to indicate that the Azure storage provider constructs different paths to read and write.\r\n\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n<!--- or ideas as to the implementation of the addition or change -->\r\n\r\n## Steps to Reproduce\r\n\r\n(This is how I did it, at least)\r\n\r\n1. Create a repository `foo` to contain techdocs\r\n2. Create `catalog-info.yaml` with name \"bar\"\r\n3. When this builds and publishes, you should have a path in Azure Storage: `[...]/component/foo/index.html` \r\n4. When visiting the tech docs site in Backstage, it'll give a console error with 404 on `[...]/component/bar/index.html`  \r\n\r\n## Context\r\n\r\n<!--- How has this issue affected you? What are you trying to accomplish? -->\r\n<!--- Providing context (e.g. links to configuration settings, -->\r\n<!--- stack trace or log data) helps us come up with a solution that is most useful in the real world -->\r\n\r\n## Your Environment\r\n\r\n- Azure Container Storage\r\n- Azure AAD auth\r\n- Built and published as a container, running as Azure App Service\r\n- Techdocs built externally; built and published from github action.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8559/comments",
    "author": "ArveSystad",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-02-19T08:05:15Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "freben",
        "created_at": "2022-02-23T17:36:07Z",
        "body": "@backstage/techdocs-core is this something you could take a look at?"
      },
      {
        "user": "soapraj",
        "created_at": "2022-03-16T23:15:05Z",
        "body": "We in @backstage/techdocs-core don't use Azure Infra so we are not in the best position to investigate this issue further at the moment. \r\n\r\nWe would love if anyone from the community who uses Backstage in Azure Infra to investigate this and contribute a fix if possible and we can support with PR reviews and getting the fix in\r\n\r\nIs this something that you would be able to spend some time to look into @ArveSystad?"
      },
      {
        "user": "ArveSystad",
        "created_at": "2022-03-17T10:50:37Z",
        "body": "@soapraj I'll see if I can set aside at least an hour or two at some point, indeed. Likely not gonna happen before the end of the month though."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-14T13:50:15Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T14:06:51Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 8553,
    "title": "Remove non-`fetch` http libraries",
    "created_at": "2021-12-20T18:09:39Z",
    "closed_at": "2021-12-27T16:05:52Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted",
      "dependencies"
    ],
    "url": "https://github.com/backstage/backstage/issues/8553",
    "body": "There are some remaining usages of `axios` and `got` (and more?) in the project. These should be removed, and replaced with `fetch`.\r\n\r\nIn backend packages, the `node-fetch` library should be used.\r\n\r\nIn frontend and isomorphic packages, the `cross-fetch` library should be used.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8553/comments",
    "author": "freben",
    "comments": [
      {
        "user": "jhaals",
        "created_at": "2021-12-21T08:21:35Z",
        "body": "These packages need fixing:\r\n- [ ] `@backstage/plugin-auth-backend` usage of `got`\r\n- [ ] `@backstage/plugin-rollbar-backend` usage of `axios`\r\n\r\nCreated ADR #8560 "
      },
      {
        "user": "julioz",
        "created_at": "2021-12-21T11:11:42Z",
        "body": "Can we somehow prevent new usages of non-`fetch`? Maybe a lint rule of sorts?"
      },
      {
        "user": "jhaals",
        "created_at": "2021-12-21T12:39:20Z",
        "body": "> Can we somehow prevent new usages of non-`fetch`? Maybe a lint rule of sorts?\r\n\r\nYes, we'll most likely add that once the plugins have been migrated."
      }
    ]
  },
  {
    "number": 8466,
    "title": "Customize Search \"<DefaultResultListItem/>\" Component",
    "created_at": "2021-12-13T13:44:37Z",
    "closed_at": "2022-09-20T14:20:20Z",
    "labels": [
      "enhancement",
      "help wanted",
      "search"
    ],
    "url": "https://github.com/backstage/backstage/issues/8466",
    "body": "## Feature Suggestion\r\n\r\nThe `<DefaultResultListItem />` does not break words or add ellipsis when they are greater than their container's maximum width, which causes unexpected behavior such as moving a gridline to the next row, for example, regardless of the specified breakpoint width.\r\nThere is no way to customize the component with a `className` or `style` property, so if for example, you want to remove the underline style in the hover state, you need to select the inner element via the parent using the Material UI classes.\r\nSomething like:\r\n\r\n```js\r\n'& > [class*=\"MuiLink\"]:hover': {\r\n  textDecoration: 'none',\r\n},\r\n'& [class^=\"MuiListItemText\"] [class^=\"MuiTypography\"]': {\r\n  wordBreak: 'break-all',\r\n},\r\n```\r\n\r\n\r\n## Possible Implementation\r\n\r\nMake the type of the internal root component the same used by Material UI to be able to use any property supported by it.\r\n\r\n## Context\r\n\r\nCustomize the layout of default search components like this.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8466/comments",
    "author": "camilaibs",
    "comments": [
      {
        "user": "emmaindal",
        "created_at": "2021-12-13T13:51:09Z",
        "body": "Awesome, thanks a lot for opening this issue @camilaibs 💯 "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-14T13:50:21Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T14:06:55Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "garyniemen",
        "created_at": "2022-10-04T09:46:47Z",
        "body": "Should this be closed @camilaibs "
      }
    ]
  },
  {
    "number": 8229,
    "title": "Add Line Linking In Software Template Logs",
    "created_at": "2021-11-24T13:47:12Z",
    "closed_at": "2022-02-21T14:00:11Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/8229",
    "body": "## Feature Suggestion\r\n\r\nCurrently there is no way to link people to specific log sections or lines within a perhaps long log. This would be useful, and has prior art in GitHub, CI systems, among others. This exists on client side, as I can click a log line to highlight, so there's some facility for it, but it never persists in the URL to allow me to share with others.\r\n\r\n## Possible Implementation\r\n\r\nThere's 2 pieces of information to deal with here, the actual section and the line number itself, so perhaps an anchor like `#step-title-L7` or something to facilitate both and allow the UI to respond appropriately when directly opened. I don't feel very strongly about this format, but it illustrates the idea.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8229/comments",
    "author": "asummers",
    "comments": [
      {
        "user": "freben",
        "created_at": "2021-11-24T15:32:27Z",
        "body": "Sure! This would be practical. Are you up for getting started with an implementation?"
      },
      {
        "user": "asummers",
        "created_at": "2021-11-24T15:52:46Z",
        "body": "Unfortunately don't have bandwidth to tackle this currently. Just a usage observation from folks on my team =) "
      }
    ]
  },
  {
    "number": 8034,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T20:04:13Z",
    "closed_at": "2021-11-12T20:43:18Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8034",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8034/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:50Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8033,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T20:04:12Z",
    "closed_at": "2021-11-12T20:43:19Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8033",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8033/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:24Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8032,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T20:04:09Z",
    "closed_at": "2021-11-12T20:43:22Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8032",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8032/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:08Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8031,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T16:03:51Z",
    "closed_at": "2021-11-12T20:43:23Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8031",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8031/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:55Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8030,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T16:03:50Z",
    "closed_at": "2021-11-12T20:43:24Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8030",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8030/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:27Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8029,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T16:03:46Z",
    "closed_at": "2021-11-12T20:43:26Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8029",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8029/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:12Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8026,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T12:04:14Z",
    "closed_at": "2021-11-12T20:43:27Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8026",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8026/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:57Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8025,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T12:04:13Z",
    "closed_at": "2021-11-12T20:43:28Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8025",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8025/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:30Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8024,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T12:04:09Z",
    "closed_at": "2021-11-12T20:43:30Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8024",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8024/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:15Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8020,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T08:04:36Z",
    "closed_at": "2021-11-12T20:43:31Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8020",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8020/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:00Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8019,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T08:04:35Z",
    "closed_at": "2021-11-12T20:43:32Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8019",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8019/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:31Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8018,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T08:04:32Z",
    "closed_at": "2021-11-12T20:43:34Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8018",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8018/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:19Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8014,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T04:03:53Z",
    "closed_at": "2021-11-12T20:43:35Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8014",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8014/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:06Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8013,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T04:03:52Z",
    "closed_at": "2021-11-12T20:43:36Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8013",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8013/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:33Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8012,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T04:03:49Z",
    "closed_at": "2021-11-12T20:43:38Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8012",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8012/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:22Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8010,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-12T00:04:54Z",
    "closed_at": "2021-11-12T20:43:40Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8010",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8010/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:07Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8009,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-12T00:04:54Z",
    "closed_at": "2021-11-12T20:43:41Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8009",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8009/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:35Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8008,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-12T00:04:50Z",
    "closed_at": "2021-11-12T20:43:43Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8008",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8008/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:25Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 8006,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-11T20:04:42Z",
    "closed_at": "2021-11-12T20:44:14Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8006",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8006/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:09Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 8005,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-11T20:04:41Z",
    "closed_at": "2021-11-12T20:44:14Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8005",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8005/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:37Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 8004,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-11T20:04:37Z",
    "closed_at": "2021-11-12T20:44:16Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/8004",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8004/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:29Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 7997,
    "title": "Snyk vulnerability [snyk:lic:npm:rollup-plugin-dts:LGPL-3.0]",
    "created_at": "2021-11-11T16:04:22Z",
    "closed_at": "2021-11-12T20:44:17Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/7997",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nLGPL-3.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7997/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:11Z",
        "body": "Duplicate of #7970"
      }
    ]
  },
  {
    "number": 7996,
    "title": "Snyk vulnerability [snyk:lic:npm:axe-core:MPL-2.0]",
    "created_at": "2021-11-11T16:04:21Z",
    "closed_at": "2021-11-12T20:44:18Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/7996",
    "body": "\n## Affecting Packages/Plugins\n\n* [@backstage/cli](packages/cli/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7996/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:46:39Z",
        "body": "Duplicate of #7969"
      }
    ]
  },
  {
    "number": 7995,
    "title": "Snyk vulnerability [snyk:lic:npm:react-lazylog:MPL-2.0]",
    "created_at": "2021-11-11T16:04:13Z",
    "closed_at": "2021-11-12T20:44:20Z",
    "labels": [
      "help wanted",
      "snyk-vulnerability"
    ],
    "url": "https://github.com/backstage/backstage/issues/7995",
    "body": "\n## Affecting Packages/Plugins\n\n* [example-app](packages/app/package.json)\n* [@backstage/plugin-circleci](plugins/circleci/package.json)\n* [@backstage/plugin-cloudbuild](plugins/cloudbuild/package.json)\n* [@backstage/plugin-github-actions](plugins/github-actions/package.json)\n* [@backstage/plugin-scaffolder](plugins/scaffolder/package.json)\n* [@backstage/plugin-techdocs](plugins/techdocs/package.json)\n\nMPL-2.0 license\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7995/comments",
    "author": "github-actions[bot]",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-11-12T20:45:33Z",
        "body": "Duplicate of #7956"
      }
    ]
  },
  {
    "number": 7688,
    "title": " Document and remove warnings in Core API’s api reports",
    "created_at": "2021-10-20T11:37:52Z",
    "closed_at": "2022-01-10T16:18:56Z",
    "labels": [
      "good first issue",
      "help wanted",
      "hacktoberfest"
    ],
    "url": "https://github.com/backstage/backstage/issues/7688",
    "body": "This meta ticket describes changes required to the API documentation in order to release Backstage Core APIs as version 1.0\r\n\r\nThe following warnings need to be removed before an item should be crossed in the list below:\r\n\r\n- Exported methods must have documentation. Missing documentation is indicated by `// @public (undocumented)` in the api report. Best practises for writing API documentation can be found in #7162\r\n- All type names used by the API need to be exported. Please note that type name has previously not been exported and might therefore need a new name suitable for external use. This is indicated by `// Warning: (ae-forgotten-export) The symbol \"FoobarOptions\" needs to be exported by the entry point index.d.ts`\r\n- Package exports must be marked `@public`. `// Warning: (ae-missing-release-tag) \"FiltersButton\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)`\r\n\r\nDocumentation added to all exports:\r\n\r\n- [x] config\r\n- [x] theme\r\n- [x] version-bridge\r\n- [x] cli-common\r\n- [x] config-loader\r\n- [x] core-app-api\r\n- [x] test-utils\r\n- [x] test-utils-core\r\n- [x] core-plugin-api\r\n- [x] errors\r\n\r\n\r\nExports marked as public\r\n\r\n- [x] config\r\n- [x] theme\r\n- [x] version-bridge\r\n- [x] cli-common\r\n- [x] config-loader\r\n- [x] core-app-api\r\n- [x] test-utils\r\n- [x] test-utils-core\r\n- [x] core-plugin-api\r\n- [x] errors\r\n\r\n\r\nType names exported\r\n\r\n- [x] config\r\n- [x] theme\r\n- [x] version-bridge\r\n- [x] cli-common\r\n- [x] config-loader\r\n- [x] core-app-api\r\n- [x] test-utils\r\n- [x] test-utils-core\r\n- [x] core-plugin-api\r\n- [x] errors\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7688/comments",
    "author": "jhaals",
    "comments": [
      {
        "user": "djamaile",
        "created_at": "2021-10-20T23:15:03Z",
        "body": "cli package doesn't generate a `api-report.md` file for me, does it work for you?"
      },
      {
        "user": "jhaals",
        "created_at": "2021-10-22T13:17:17Z",
        "body": "Good point @djamaile! There are some changes we want to make to that package but not related to this issue. I've removed it 👍 "
      }
    ]
  },
  {
    "number": 7503,
    "title": "[New Relic Plugin] Need to handle pagination",
    "created_at": "2021-10-07T19:24:43Z",
    "closed_at": "2022-09-20T14:50:55Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/7503",
    "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Expected Behavior\r\n\r\n<!--- Tell us what should happen -->\r\nThe API call should return all APM data.\r\n\r\n## Current Behavior\r\n\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nThe API call currently only fetches for page 1 (when there are many applications in the account). In the case our our company, we have 109 pages in total. Only being able to show a portion of it is not very useful.\r\n\r\n## Possible Solution\r\n\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n<!--- or ideas as to the implementation of the addition or change -->\r\nSince the number of pages might be huge, we might need some sort of caching mechanism.\r\n\r\n## Steps to Reproduce\r\n\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code or configuration to reproduce, if relevant -->\r\n\r\nCreate a huge amount of applications in new relic and try fetch for the data using the API. You will find out the data you get is not complete. This is because the response from NR is paginated.\r\n\r\n## Context\r\n\r\n<!--- How has this issue affected you? What are you trying to accomplish? -->\r\n<!--- Providing context (e.g. links to configuration settings, -->\r\n<!--- stack trace or log data) helps us come up with a solution that is most useful in the real world -->\r\n\r\nPlease let me know if anything is unclear. Thanks!\r\n\r\n## Your Environment\r\n\r\n<!--- Include as many relevant details about the environment you experienced the bug in -->\r\n\r\n<!-- ProTip: You can use `yarn backstage-cli info` command in your Backstage App for this section. -->\r\n\r\n- NodeJS Version (v14): v14.17.5\r\n- Operating System and Version (e.g. Ubuntu 14.04): Mac\r\n- Browser Information: Chrome\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7503/comments",
    "author": "tszngai",
    "comments": [
      {
        "user": "freben",
        "created_at": "2021-10-11T15:10:01Z",
        "body": "This is the point where it starts to become relevant to make a backend plugin next to the frontend one. The backend could calmly spider home all information it needs, possibly even storing it in a database, and offering it for fast access from the frontend plugin. If you are interested to work on this, let me know."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T13:56:55Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T14:50:46Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 7212,
    "title": "Using Yarn to manage workspace dependencies",
    "created_at": "2021-09-16T13:17:11Z",
    "closed_at": "2022-09-20T19:08:20Z",
    "labels": [
      "bug",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/7212",
    "body": "On a recent pull request (#7190) I ran into an issue after removing and adding some dependencies using `yarn workspace` for example... \r\n\r\n```\r\nyarn workspace @backstage/plugin-circleci remove dayjs\r\nyarn workspace @backstage/plugin-circleci add luxon humanize-duration\r\nyarn workspace @backstage/plugin-circleci add @types/humanize-duration --dev\r\n```\r\n\r\nThis should update both the package.json and the yarn.lock file. \r\n\r\nHowever after doing this, the `yarn.lock` file contained a lot of changes that were not relevant to the commands I just ran, and then subsequently building the project, resulted in a lot of typescript errors. \r\n\r\nRunning `yarn install` again, which shouldn't do anything after running the above commands, resulted in another set of `yarn.lock` changes, subsequently building the project again, resulted in a different set of typescript errors.  \r\n\r\nI had guidance from @Rugvip to edit the `package.json` file directly, which did resolve the Typescript errors, however it feels like there is something somewhere causing these issues.\r\n\r\n## Expected Behavior\r\n\r\nUsing `yarn workspace {WORKSPACE} [add|remove] {DEPENDENCY}` should be the default way to manage dependencies for plugins and packages, or at the very least should not cause issues. \r\n\r\n## Current Behavior\r\n\r\nUsing `yarn workspace {WORKSPACE} [add|remove] {DEPENDENCY}` causes issues with dependencies. \r\n\r\n## Possible Solution\r\n\r\nRequires investigation. \r\n\r\n## Steps to Reproduce\r\n\r\nTaken from the commit on master I can confirm the issue was happening, however it might be reproducible on other packages/plugins.\r\n\r\n```\r\ngit checkout 14ebe914545e81615b50ae5efa0325fb36861aad \r\n\r\nyarn workspace @backstage/plugin-circleci remove dayjs\r\nyarn workspace @backstage/plugin-circleci add luxon humanize-duration\r\nyarn workspace @backstage/plugin-circleci add @types/humanize-duration --dev\r\n\r\nyarn ts:full\r\n```\r\n\r\n## Environment \r\n\r\n- Node v14.17.6\r\n- Yarn v1.22.1\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/7212/comments",
    "author": "HHogg",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T13:57:05Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-13T19:07:49Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 8103,
    "title": "[TechDocs CLI] `migrate` command doesn't support non-URL safe characters in filenames",
    "created_at": "2021-08-26T15:37:53Z",
    "closed_at": "2022-09-23T10:57:09Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/8103",
    "body": "The `migrate` command fails to copy files that have non-URL safe characters. I've had some files that had the `+` character in the name and they weren't migrated",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8103/comments",
    "author": "kuangp",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T14:12:02Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-16T10:48:40Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 6636,
    "title": "Create-plugin does not respect current app dependencies",
    "created_at": "2021-07-28T13:39:00Z",
    "closed_at": "2021-09-24T15:20:28Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/6636",
    "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Expected Behavior\r\n\r\nThe create-plugin command should respect the versions of backstage packages currently installed in the app.\r\n\r\n## Current Behavior\r\n\r\nUsing the create-plugin command installs a new plugin with backstage dependencies that use caret notation, it then runs a yarn install. This bumps backstage packages in the yarn workspace for the entire project and creates mismatches. \r\n\r\n## Possible Solution\r\n\r\nSince the backstage versions that get installed are based on the version of the CLI used it's possible to use yarn resolutions to enforce a CLI version (otherwise the CLI version installed in each new plugin will bump the workspace version). However, removing caret notation would potential solve this and allow users to rely on the version bump command to explicitly change versions across the workspace.\r\n\r\n## Steps to Reproduce\r\n\r\n1. Start with packages/app with not the latest backstage packages\r\n2. Run create-plugin (this may bump some packages, but will certainly bump the CLI)\r\n3. Run create-plugin and note that it's running with the new CLI version and therefore bumping additional packages, potentially even to major versions\r\n\r\n## Context\r\n\r\nWe have external contributors creating plugins as their first and only interaction in the repo. Creating a scenario where they need to be able to adjust other plugins/the app in order to keep backstage package versions consistent is less than ideal. Additionally, this lack of consistency creates errors when running `yarn tsc` in certain cases.\r\n\r\n## Your Environment\r\n\r\n- Node 14\r\n- yarn workspaces\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/6636/comments",
    "author": "laurieontech",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-09-23T16:16:42Z",
        "body": "This issue happens when the installed CLI version no longer matches the range query used in the project, since the Backstage CLI will use whatever version it's currently running and doesn't know about the original range. For example if you have `@backstage/cli: ^0.6.2` in your root `package.json` but you've since bumped it in `yarn.lock` to be at something like `^0.6.5`, the query in the new plugin will be `^0.6.5`, which might not exist in `yarn.lock`, and then you might get a duplicate and even newer version of the CLI pulled in for that plugin.\r\n\r\nI think we have enough facilities in the CLI to make it reasonably simple to solve this by inspecting `yarn.lock` and picking an existing range query for each installed package if possible."
      }
    ]
  },
  {
    "number": 6489,
    "title": "bump @octokit/rest from 18.5.6 to 18.6.7",
    "created_at": "2021-07-15T10:41:40Z",
    "closed_at": "2022-07-13T09:08:06Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/6489",
    "body": "Dependabot opened a PR where some types now are `string | undefined` so we just need to update the code to support the new types.\r\n\r\nShould be a pretty simple job. PR exists here: #6374\r\n\r\nHappy hacking!",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/6489/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "iamrajiv",
        "created_at": "2021-07-15T11:57:17Z",
        "body": "@benjdlambert I guess we have to do `yarn add string`."
      },
      {
        "user": "benjdlambert",
        "created_at": "2021-07-15T12:01:24Z",
        "body": "Yeah, I mean or you could cherry pick the commit that dependabot did and go from there.\r\n\r\n`git cherry-pick 4349a88 && yarn install && yarn tsc:full` should get you to the errors @iamrajiv. Is this something you would like to work on?"
      },
      {
        "user": "iamrajiv",
        "created_at": "2021-07-15T12:32:13Z",
        "body": "@benjdlambert But the branch of #6374 is deleted how I can cherry-pick the commit. It saying `fatal: bad revision '4349a88'`.\r\n"
      },
      {
        "user": "benjdlambert",
        "created_at": "2021-07-16T08:17:42Z",
        "body": "@iamrajiv the branch is restored, you should be able to fetch the branch now and either carry on working on that branch, or cherry pick the commit onto your own fork."
      },
      {
        "user": "Crevil",
        "created_at": "2022-07-08T20:05:37Z",
        "body": "As PR #6494 got closed due to incomplete implementation I'd like to take this one on me to do another run 😄 "
      }
    ]
  },
  {
    "number": 6360,
    "title": "TechDocs annotation should have a sensible default",
    "created_at": "2021-07-06T11:37:03Z",
    "closed_at": "2022-09-30T13:32:25Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/6360",
    "body": "## Feature Suggestion\r\n\r\nAssuming a company is not using mono-repos, the docs are likely in the `docs` directory at the root of the repo that contains the component. Can we make this the default in order to make the `techdocs-ref` annotation optional?\r\n\r\n## Possible Implementation\r\n\r\nNo idea 😄 \r\n\r\n## Context\r\n\r\nAdoption of TechDocs is more likely if the user has to do less work to configure it. Every little bit of friction counts.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/6360/comments",
    "author": "dtuite",
    "comments": [
      {
        "user": "Fox32",
        "created_at": "2021-07-06T12:12:09Z",
        "body": "Probably something that should be easy to accomplish using a custom catalog processor. We are using them a lot to query external tools and add annotations automatically. Here you could check whether the repo contains an `mkdocs.yaml` at root and add the annotation automatically (right now the `techdocs-ref` requires an absolute path!). Backstage already has all APIs for that 🙂 \r\n\r\nMake the annotation entirely optional is difficult, as it used to decide whether an entity has a documentation (not really evaluating the content in the recommended setup)."
      },
      {
        "user": "dtuite",
        "created_at": "2021-07-06T12:39:42Z",
        "body": "> Probably something that should be easy to accomplish using a custom catalog processor\r\n\r\nThere are likely some custom processors that will be repeatedly created by different companies who use Backstage and might make more sense to be either included by default or picked from a marketplace. I guess I'm trying to understand if this is one of those cases.\r\n\r\n> Make the annotation entirely optional is difficult\r\n\r\nAssuming the repo has a `mkdocs.yaml` file and a `docs` directory in the root, and Backstage knows where the repo is (via the `github.com/project-slug` or similar annotation), could it attempt to parse the `docs` dir it and display an error if it turns out to not be correct `MkDocs` content?\r\n\r\nPerhaps the complication arises when using a CI to generate docs with the `techdocs-cli`?"
      },
      {
        "user": "Fox32",
        "created_at": "2021-07-06T13:08:11Z",
        "body": "> Make the annotation entirely optional is difficult\r\n\r\nWith that I only meant that the follow up processes in the techdocs backend and frontend need that annotation, so we can't get rid of it completely, but can add it automatically. So that the user doesn't need to know about it."
      },
      {
        "user": "dtuite",
        "created_at": "2021-07-06T13:09:35Z",
        "body": "Ahh.. I understand you now. I was thinking in the business logic layer. Yep, I agree."
      },
      {
        "user": "andrewthauer",
        "created_at": "2021-07-07T11:48:43Z",
        "body": "Adding to this discussion, we are currently in the process of taking the \"remove the friction\" a step further. We've built code that will auto create an mkdocs.yml file dynamically in CI which means a repo really only needs a `docs` directory and an index/readme file. At that point we can auto build/publish the docs to storage. Then we have a custom processor that checks the existence of the docs directory for the entity and enriched the entity with the techdocs annotation. The difference being there is actually no physical mkdocs.yml file that is persisted anywhere."
      },
      {
        "user": "pashcan",
        "created_at": "2021-07-28T10:31:09Z",
        "body": "@andrewthauer That sounds super useful! If you have something shareable :crossed_fingers: I am sure many would benefit from this functionality."
      },
      {
        "user": "dhenneke",
        "created_at": "2021-07-28T11:13:24Z",
        "body": "You can also use `backstage.io/techdocs-ref: dir:.` to link to a `mkdocs.yml` that is stored relative to your `catalog-info.yaml` file. This could be a intermediate solution to simplify the configuration, even though you still need to add it to your entity."
      },
      {
        "user": "pashcan",
        "created_at": "2021-07-28T11:22:31Z",
        "body": "@dhenneke True dat. And I guess if they are adding mkdocs.yml via CI can also just add annotation at the same time. Also thanks to #6495\\, you might even be able to drop `dir:` part. "
      },
      {
        "user": "dhenneke",
        "created_at": "2021-07-28T11:25:21Z",
        "body": "> [...] thanks to #6495, you might even be able to drop `dir:` part.\r\n\r\nUnfortunately, this specific feature was removed from the PR. I probably need to update the PR title to better describe the change that was merged."
      },
      {
        "user": "andrewthauer",
        "created_at": "2021-07-30T11:00:19Z",
        "body": "> @andrewthauer That sounds super useful! If you have something shareable :crossed_fingers: I am sure many would benefit from this functionality.\n\nDefinitely considering contributing bits of this. Much of this was hand rolled prior to the full techdocs solution, so we are in the process of migrating over to use more of the full techdocs solution. Once that's done, it should hopefully be a bit easier to contribute the mkdocs.yml not required feature and a couple of other things."
      },
      {
        "user": "Crevil",
        "created_at": "2021-08-08T11:15:19Z",
        "body": "Chiming in here. We have that exact processor implemented as @dtuite mentions.\r\n\r\nIf an `mkdocs.yml` file exists set the annotation. Would be great if it was standard someway."
      },
      {
        "user": "andrewthauer",
        "created_at": "2021-08-08T20:53:31Z",
        "body": "Makes sense. The reason I didn't offer to open source ours is that it looks for published site rather then the mkdocs.yml (since we generate that on the fly).\n\nThat said, I've been actually thinking there could be a generic `AppendAnnotationProcessor` that is configured with a predicate (eg URL read for existence) and annotation builder function. The predicate could be a URL read that when it evaluates to true it appends the desired annotation. This is essentially what our custom one does and exactly what the mkdocs one would need to do as well. The difference would be this processor could be registered in the backend multiple times for different annotations."
      },
      {
        "user": "Crevil",
        "created_at": "2021-08-09T13:50:47Z",
        "body": "Yeah that use case is kind of generic. The nature of our custom processors is often `if file exists - add annotation` or `if file exists - emit entity with its contents`. The latter is for things like API definitions like `swagger.yaml` files where we generate `API` entities.\r\n\r\nWhether a generic processor would fit both of these, I'm unsure though."
      },
      {
        "user": "freben",
        "created_at": "2021-08-10T11:12:02Z",
        "body": "An out-of-the-box available processor that scans for an mkdocs file or properly detects an interesting docs dir sounds like it would be very useful!\r\n\r\n@backstage/techdocs-core Could you chime in here? This sounds like a worthwhile contribution, whether by maintainers or by the community. I'll actually slap a help wanted label on it in the mean time."
      },
      {
        "user": "andrewthauer",
        "created_at": "2021-08-10T12:23:11Z",
        "body": "One concern I have for this is rate limiting. Each individual processor that needs to check the existence of a file/dir will contribute to quickly add up and cause possible issues. We already have the the codeowners (which should probably be optimized as there are 3 possible locations). Internally we also do a couple additional existence checks against the repo as well.\r\n\r\nI haven't really looked into this too much, but it might be nice to have something that can check for a series of files/dirs in one shot and then provide that info as context to various processors. The GH graphql API supports something like this, but it's not scm agnostic and probably not the easiest to extend into this concept."
      },
      {
        "user": "iamEAP",
        "created_at": "2021-08-10T12:33:23Z",
        "body": "^ I can see where Andrew's coming from re: needing to read multiple files.  ...We may even need to check multiple files in this one processor (see below).\r\n\r\nIn any event, seems like we can basically merge this and #2099.  It sounds like there are some edge cases to think through:\r\n\r\n- The `mkdocs.yml` file is not adjacent to the `*-info.yaml` file\r\n- TechDocs is configured with an external builder and the `mkdocs.yml` is generated on the fly (so it's not even in VCS)\r\n- TechDocs is configured with an external builder and there _is_ an `mkdocs.yml` in VCS, but a build hasn't occurred for an entity's docs yet.\r\n- `mkdocs.yaml` is used instead of `mkdocs.yml` (newly a thing as of a couple weeks ago!)\r\n- ...Anything else?\r\n\r\nPerhaps we could break it down like this...\r\n\r\n- If builder is configured to be external, `GET /api/techdocs/static/docs/namespace/entity/kind/index.html`.  If it's a 200, then append the annotation ref.\r\n- If builder is local, check for an adjacent `mkdocs.yml` OR `mkdocs.yaml` and if it's there, append the ref.\r\n\r\nFor other exotic configs (monorepos, different `mkdocs.yml` locations), manually writing the ref is the way to go?"
      },
      {
        "user": "andrewthauer",
        "created_at": "2021-08-10T16:45:23Z",
        "body": "> If builder is configured to be external, GET /api/techdocs/static/docs/namespace/entity/kind/index.html. If it's a 200, then append the annotation ref.\r\n\r\nThis is essentially how we handle it now. We check if the docs are published rather then the existence of an `mkdocs.y*ml` file. This seems more reliable and also avoids rate limits imposed by SCM. It would be more suited for `external` techdocs published via CI rather then `local`, but perhaps it can also work for both?"
      },
      {
        "user": "iamEAP",
        "created_at": "2021-08-11T08:31:45Z",
        "body": "> but perhaps it can also work for both?\r\n\r\nI think it becomes a chicken-and-egg situation.  The index file won't appear until someone tries to load the page and the docs get built for the first time.  But no one knows to do that unless there's an annotation ref to indicate that they exist.  You could maybe wire up the processor to trigger an initial build?  But that might have similarly bad scalability consequences compared with the SCM rate limiting issue."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T14:12:15Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "garyniemen",
        "created_at": "2022-07-25T12:49:26Z",
        "body": "@dtuite Do you know if this issue progressed? Can the issue be closed or...?"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-23T13:09:15Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 5883,
    "title": "Documentation for built in `ui:fields` for Scaffolder",
    "created_at": "2021-06-02T08:54:08Z",
    "closed_at": "2023-07-17T08:28:35Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/5883",
    "body": "## Feature Suggestion\r\nDocument the provided built in `ui:fields` for the schema form with corresponding `parameters` yaml examples.\r\n\r\n`OwnerPicker` `RepoUrlPicker` `EntityPicker`. And their props which can be used with `ui:options`.\r\n\r\nSome sample usages would be good.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/5883/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T14:12:27Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-19T13:38:32Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "Parsifal-M",
        "created_at": "2022-09-25T11:34:47Z",
        "body": "Hey, I'd like to help with this :wave: \r\n\r\nWhere would be the best place to start?\r\n\r\nThanks!"
      },
      {
        "user": "benjdlambert",
        "created_at": "2022-09-26T08:04:35Z",
        "body": "Hey :wave: I'd recommend starting a new page on the microsite, take a look at the `docs/features/software-templates` folder and create another markdown file in there that can house this documentation. I'd like to see examples for the `RepoUrlPicker` and maybe the `EntityPicker` as a start. I'd like to see an example of some `yaml` with some examples of the different `ui:options` that you can pass in?\r\n\r\nDoes that work?"
      },
      {
        "user": "Parsifal-M",
        "created_at": "2022-09-26T08:11:32Z",
        "body": "Sounds good, will take a look! You can assign to me if you like."
      },
      {
        "user": "benjdlambert",
        "created_at": "2022-09-26T11:26:59Z",
        "body": "Perfect! Thanks! Assigned! 👍 "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-11-25T11:35:20Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "jhaals",
        "created_at": "2022-11-28T09:08:52Z",
        "body": "@Parsifal-M any update on this? Not sure if it's taken care of already"
      },
      {
        "user": "Parsifal-M",
        "created_at": "2022-11-28T09:13:52Z",
        "body": "Hey, sorry will have to drop for now, I made a start but got snowed under all of a sudden and I kind of forgot about it :fearful: \r\n\r\nI will keep an eye on it, if no-one picks it up I will continue on it in the background :smile: "
      },
      {
        "user": "Rugvip",
        "created_at": "2022-11-29T13:09:23Z",
        "body": "@Parsifal-M no worries, thank you for letting us know! 👍 "
      },
      {
        "user": "GyaniRoman23",
        "created_at": "2023-01-08T18:00:30Z",
        "body": "@Rugvip @benjdlambert Could I work on this issue as its still open?"
      },
      {
        "user": "jhaals",
        "created_at": "2023-01-09T09:28:54Z",
        "body": "Yes you can @GyaniRoman23! 👍 "
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-03-10T09:37:32Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "benjdlambert",
        "created_at": "2023-03-17T11:11:05Z",
        "body": "@GyaniRoman23 any update on this? :pray:"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2023-05-16T11:23:58Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "floresjma",
        "created_at": "2023-06-27T18:12:28Z",
        "body": "Hi 👋, I'd like to contribute to this if it's open and not assigned?\r\nThank you"
      },
      {
        "user": "benjdlambert",
        "created_at": "2023-06-28T10:27:08Z",
        "body": "Hey @floresjma please do! I will assign you :pray: thanks!"
      },
      {
        "user": "floresjma",
        "created_at": "2023-07-14T16:47:45Z",
        "body": "Would love to hear your feedback, and thanks again for giving me the chance to do my first contribution :)"
      },
      {
        "user": "benjdlambert",
        "created_at": "2023-07-17T08:28:32Z",
        "body": "Going to close this as fixed for now, but let's treat this as a living document and new additions to the FieldExtension collections should be updated here too.."
      }
    ]
  },
  {
    "number": 5286,
    "title": "OwnerPicker to support output options ",
    "created_at": "2021-04-11T17:49:10Z",
    "closed_at": "2021-12-07T12:50:59Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/5286",
    "body": "<!--- Provide a general summary of the feature request in the Title above -->\r\n\r\n## Feature Suggestion\r\n\r\nWhen selecting the User using the OwnerPicker that was recently contributed by @tragiclifestories, the output is `User: john.smith` \r\n\r\nThere is no option to just output `john.smith` for the user and no way to add other fields that you would like to be shown in the dropdown.\r\n\r\n## Possible Implementation\r\n\r\nIntroduce two new UI Options called allowedOutput to exclude the `User: ` by defining the field name you would like to output and allowedMetadata to include specific fields you would like shown in the dropdown such as displayName.\r\n\r\n```\r\n        owner:\r\n          title: Component Owner\r\n          type: string\r\n          description: Owner of the component \r\n          ui:field: OwnerPicker\r\n          ui:options:\r\n            allowedKinds: \r\n              - User\r\n            allowedMetadata:\r\n              - name\r\n              - displayName \r\n            allowedOutput:\r\n              - name\r\n```\r\n          ",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/5286/comments",
    "author": "regicsolutions",
    "comments": [
      {
        "user": "freben",
        "created_at": "2021-04-11T21:01:55Z",
        "body": "Maybe like `value: 'ref' | 'name'`.\r\n\r\nAnd to align with other places in the code, I'd suggest `kinds`, `defaultKind` and `defaultNamespace`. The latter (optional) two would control exclusion of parts of a `kind:namespace/name` triplet when the `ref` value format is used.\r\n\r\nI'm curious, what are you going to use this feature for? Do you have a company specific use case for selecting users exclusively? For owner specifically it's important to distinguish groups and users by including the kind when it's not the default (`Group`)."
      },
      {
        "user": "regicsolutions",
        "created_at": "2021-04-12T00:56:19Z",
        "body": "Our use case is to be able to grant a list of users access to a new namespace (dev only).\n\nI agree that the group would be ideal, we are using the ldap processor to map groups to distribution lists, if we could pass the list of members in a group (metadata.name) in the Group entity that would be ideal."
      },
      {
        "user": "freben",
        "created_at": "2021-04-12T07:40:00Z",
        "body": "One more thought.\r\n\r\nThe component is named `OwnerPicker` and should probably be scoped to specifically the ownership concept which is a bit special and hs its own semantics.\r\n\r\nDoes it make sense to make a separate `OrgPicker` instead which is for more generally picking any user or group (or just one of them, if configured accordingly)? Say, for example, somebody needs to add a \"Select billing department\" dropdown in their templates, and then this picker could have a richer interface where you could say `filter: { 'spec.type': 'department' }` or whatever, without bloating or over-generalizing the `OwnerPicker`."
      },
      {
        "user": "tragiclifestories",
        "created_at": "2021-04-12T20:01:44Z",
        "body": "IMO it might make more sense to genericise it to an `EntityPicker` that would yield a fully qualified entity ref as its output. It would support essentially the same filtering interface as the catalog client query methods. That way, if for example you had a list of domains you wanted new things to be added to, you could add that as a field. And so on. "
      },
      {
        "user": "freben",
        "created_at": "2021-04-12T20:58:33Z",
        "body": "There's good and bad with overly generic things. An OrgPicker could shuffle your own user and all the groups you are member of to the top, along with \"recently selected\" / \"top picks\" and stuff. That kind of context aware stuff can not as easily be done with the generic one since it requires specialised logic."
      },
      {
        "user": "regicsolutions",
        "created_at": "2021-09-14T07:05:27Z",
        "body": "@freben is this now possible using ScaffolderFieldExtensions? "
      },
      {
        "user": "freben",
        "created_at": "2021-09-16T18:29:59Z",
        "body": "Yeah, you can definitely make a separate picker implementation for this."
      },
      {
        "user": "regicsolutions",
        "created_at": "2021-12-07T03:05:18Z",
        "body": "This one can be closed @freben "
      },
      {
        "user": "OrkoHunter",
        "created_at": "2021-12-07T12:50:59Z",
        "body": "Thanks @regicsolutions !"
      }
    ]
  },
  {
    "number": 4907,
    "title": "Extends model without fork ",
    "created_at": "2021-03-10T15:14:08Z",
    "closed_at": "2021-05-26T14:17:30Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/4907",
    "body": "We are develop our own Kind (yes we know the danger of doing that). But we don't want to branch everything so we created our own model that extends the actual model.\r\n\r\n\r\n## Expected Behavior\r\nexport  ajvCompiledJsonSchemaValidator so we don't need to branch model\r\n\r\n\r\n## Current Behavior\r\n\r\najvCompiledJsonSchemaValidator is not exported\r\n\r\n## Possible Solution\r\n\r\nexport ajvCompiledJsonSchemaValidator \r\n\r\n\r\n## Steps to Reproduce\r\n\r\n\r\n\r\n1. Create a new plugin\r\n2. Try to extends the model\r\n\r\n## Context\r\n\r\nWhen we analyzed extends the model the Kinds used the schema validator that was exported on the catalog-model package so we were able to extends the schema without any issues. But today the schema validator is deprecated and the ajvCompiledJsonSchemaValidator is not exported so we can't validate the schema without branching.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/4907/comments",
    "author": "jvaleriano",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2021-03-10T17:13:27Z",
        "body": "I think it would make sense to export, but perhaps rename it to `compileSchemaValidator`? CC @freben"
      },
      {
        "user": "freben",
        "created_at": "2021-03-10T17:58:03Z",
        "body": "Hm. The reason it isn't exported is that we'd need to settle some things a bit first. It's not very useful standalone.\r\n\r\nNote how the current implementation relies on explicitly passing in the dependent schemas. Those schemas aren't exported themselves either right now, if I recall correctly.\r\n\r\nI think making a new `compileSchemaValidator`, that just takes an external jsonschema and it automatically supplying the default dependencies, would be more useful as an export than exporting `ajvCompiledJsonSchemaValidator` itself. Essentially something with a more useful user focused API. And which doesn't mention implementation details like \"ajv\" :)"
      },
      {
        "user": "freben",
        "created_at": "2021-05-26T10:11:26Z",
        "body": "I believe the exported validator above will serve this purpose."
      }
    ]
  },
  {
    "number": 8109,
    "title": "[TechDocs CLI] Read entity information from catalog-info.yaml",
    "created_at": "2021-02-11T14:39:54Z",
    "closed_at": "2022-09-27T14:57:35Z",
    "labels": [
      "enhancement",
      "help wanted",
      "area:techdocs",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/8109",
    "body": "## Motivation\r\n\r\nI'm setting up techdocs for a bunch of projects within our organization. I'm going to create a Jenkins job that can be added to any project to build it. It would be very nice if I didn't have to explicitly specify entity path when caling `techdocs-cli publish` command. \r\n\r\n## Approach\r\n\r\nWe can accomplish this by making it possible to specify a reference to the `catalog-info.yaml` file. It would be even better if it `techdocs-cli` tried to automatically detect for the presence of `catalog-info.yaml` file. It should fall back to `--entity` when the `catalog-info.yaml` could not be found. ",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/8109/comments",
    "author": "taras",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T14:40:23Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-20T14:51:12Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      }
    ]
  },
  {
    "number": 4449,
    "title": "[Search] Create indexing pipeline diagrams for plugins (e.g TechDocs) ",
    "created_at": "2021-02-09T09:09:07Z",
    "closed_at": "2022-09-27T14:57:36Z",
    "labels": [
      "area:documentation",
      "help wanted",
      "search",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/4449",
    "body": "## What / Why\r\n\r\nConsider adding a high-level diagram illustrating the process of ingesting TechDocs documents into Search in  the \"how-to\" section describing the process of adding the TechDocs collator in Backstage Backend.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/4449/comments",
    "author": "emmaindal",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2021-04-10T10:07:59Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-06-11T06:50:44Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "iamEAP",
        "created_at": "2021-06-15T19:59:58Z",
        "body": "Wonder if this is now duplicative of #4568?"
      },
      {
        "user": "emmaindal",
        "created_at": "2021-06-16T12:39:41Z",
        "body": "@iamEAP could be, but I think this is more of a diagram/visual representation (could be clarified in the description though) and not the actual implementation. So either added as a task to #4568 or have this as a separate thing!"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-08-15T13:20:56Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-10-15T07:08:42Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-12-14T07:53:25Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-02-12T09:37:04Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-07-15T14:40:24Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2022-09-20T14:51:14Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "user": "garyniemen",
        "created_at": "2022-10-04T09:36:07Z",
        "body": "@emmaindal okay that this is closed?"
      }
    ]
  },
  {
    "number": 4263,
    "title": "Incorrect homepage.clocks.timezone results in app blank page",
    "created_at": "2021-01-26T17:19:54Z",
    "closed_at": "2021-01-30T08:53:18Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/4263",
    "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nIf you configure homepage.clocks to include a non-existent timezone name then the UI presents a blank screen\r\n\r\n## Expected Behavior\r\n\r\n<!--- Tell us what should happen -->\r\nThrow an error somewhere. Anything but present a blank UI.\r\n\r\n## Current Behavior\r\n\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nSilently displays a blank screen.\r\n\r\n## Possible Solution\r\n\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n<!--- or ideas as to the implementation of the addition or change -->\r\n\r\n## Steps to Reproduce\r\n\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code or configuration to reproduce, if relevant -->\r\n\r\n1. edit `app-config.local.yaml` and add a misspelled timezone name e.g. `timezone: 'America/Los_Angelex'`\r\n2. run backstage example app\r\n3. gets a blank screen with this logged in the js console:\r\n\r\n```\r\nHomepageTimer.tsx?4f8e:47 Uncaught RangeError: Invalid time zone specified: America/Los_Angelex\r\n    at Date.toLocaleTimeString (<anonymous>)\r\n    at getTimes (HomepageTimer.tsx?4f8e:47)\r\n    at eval (HomepageTimer.tsx?4f8e:64)\r\n    at commitHookEffectListMount (react-dom.development.js?bc31:19765)\r\n    at commitPassiveHookEffects (react-dom.development.js?bc31:19803)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js?bc31:189)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js?bc31:238)\r\n    at invokeGuardedCallback (react-dom.development.js?bc31:293)\r\n    at flushPassiveEffectsImpl (react-dom.development.js?bc31:22885)\r\n    at unstable_runWithPriority (scheduler.development.js?ab43:653)\r\ngetTimes @ HomepageTimer.tsx?4f8e:47\r\neval @ HomepageTimer.tsx?4f8e:64\r\ncommitHookEffectListMount @ react-dom.development.js?bc31:19765\r\ncommitPassiveHookEffects @ react-dom.development.js?bc31:19803\r\ncallCallback @ react-dom.development.js?bc31:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js?bc31:238\r\ninvokeGuardedCallback @ react-dom.development.js?bc31:293\r\nflushPassiveEffectsImpl @ react-dom.development.js?bc31:22885\r\nunstable_runWithPriority @ scheduler.development.js?ab43:653\r\nrunWithPriority$1 @ react-dom.development.js?bc31:11062\r\nflushPassiveEffects @ react-dom.development.js?bc31:22852\r\nperformSyncWorkOnRoot @ react-dom.development.js?bc31:21769\r\neval @ react-dom.development.js?bc31:11112\r\nunstable_runWithPriority @ scheduler.development.js?ab43:653\r\nrunWithPriority$1 @ react-dom.development.js?bc31:11062\r\nflushSyncCallbackQueueImpl @ react-dom.development.js?bc31:11107\r\nflushSyncCallbackQueue @ react-dom.development.js?bc31:11095\r\nscheduleUpdateOnFiber @ react-dom.development.js?bc31:21231\r\ndispatchAction @ react-dom.development.js?bc31:15683\r\neval @ providers.tsx?be31:89\r\neval @ providers.tsx?be31:133\r\nPromise.then (async)\r\neval @ providers.tsx?be31:128\r\ncommitHookEffectListMount @ react-dom.development.js?bc31:19765\r\ncommitLifeCycles @ react-dom.development.js?bc31:19821\r\ncommitLayoutEffects @ react-dom.development.js?bc31:22835\r\ncallCallback @ react-dom.development.js?bc31:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js?bc31:238\r\ninvokeGuardedCallback @ react-dom.development.js?bc31:293\r\ncommitRootImpl @ react-dom.development.js?bc31:22573\r\nunstable_runWithPriority @ scheduler.development.js?ab43:653\r\nrunWithPriority$1 @ react-dom.development.js?bc31:11062\r\ncommitRoot @ react-dom.development.js?bc31:22413\r\nfinishSyncRender @ react-dom.development.js?bc31:21839\r\nperformSyncWorkOnRoot @ react-dom.development.js?bc31:21825\r\neval @ react-dom.development.js?bc31:11112\r\nunstable_runWithPriority @ scheduler.development.js?ab43:653\r\nrunWithPriority$1 @ react-dom.development.js?bc31:11062\r\nflushSyncCallbackQueueImpl @ react-dom.development.js?bc31:11107\r\nflushSyncCallbackQueue @ react-dom.development.js?bc31:11095\r\nscheduleUpdateOnFiber @ react-dom.development.js?bc31:21231\r\ndispatchAction @ react-dom.development.js?bc31:15683\r\neval @ useAsyncFn.js?ffba:18\r\nPromise.then (async)\r\neval @ useAsyncFn.js?ffba:17\r\neval @ useAsync.js?423a:9\r\ncommitHookEffectListMount @ react-dom.development.js?bc31:19765\r\ncommitPassiveHookEffects @ react-dom.development.js?bc31:19803\r\ncallCallback @ react-dom.development.js?bc31:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js?bc31:238\r\ninvokeGuardedCallback @ react-dom.development.js?bc31:293\r\nflushPassiveEffectsImpl @ react-dom.development.js?bc31:22885\r\nunstable_runWithPriority @ scheduler.development.js?ab43:653\r\nrunWithPriority$1 @ react-dom.development.js?bc31:11062\r\nflushPassiveEffects @ react-dom.development.js?bc31:22852\r\neval @ react-dom.development.js?bc31:22731\r\nworkLoop @ scheduler.development.js?ab43:597\r\nflushWork @ scheduler.development.js?ab43:552\r\nperformWorkUntilDeadline @ scheduler.development.js?ab43:164\r\nreact-dom.development.js?bc31:19561 The above error occurred in the <HomepageTimer> component:\r\n    in HomepageTimer (at CatalogLayout.tsx:46)\r\n    in div (at Header.tsx:220)\r\n    in header (at Header.tsx:205)\r\n    in Header (at CatalogLayout.tsx:40)\r\n    in div (at Page.tsx:45)\r\n    in ThemeProvider (at Page.tsx:39)\r\n    in Page (at CatalogLayout.tsx:39)\r\n    in CatalogLayout (at CatalogPage.tsx:153)\r\n    in CatalogPageContents (at CatalogPage.tsx:203)\r\n    in EntityFilterGroupsProvider (at CatalogPage.tsx:202)\r\n    in CatalogPage (at Router.tsx:78)\r\n    in Route (at Router.tsx:78)\r\n    in Routes (at Router.tsx:77)\r\n    in Router (at App.tsx:78)\r\n    in Route (at App.tsx:76)\r\n    in FlatRoutes (at App.tsx:70)\r\n    in div (at Page.tsx:71)\r\n    in SidebarPage (at Root.tsx:76)\r\n    in Root (at App.tsx:101)\r\n    in Route (at App.tsx:352)\r\n    in Routes (at App.tsx:351)\r\n    in SignInPageWrapper (at App.tsx:350)\r\n    in Router (created by BrowserRouter)\r\n    in BrowserRouter (at App.tsx:349)\r\n    in AppRouter (at App.tsx:100)\r\n    in RoutingProvider (at App.tsx:278)\r\n    in CssBaseline (created by WithStyles(CssBaseline))\r\n    in WithStyles(CssBaseline) (at AppThemeProvider.tsx:94)\r\n    in ThemeProvider (at AppThemeProvider.tsx:93)\r\n    in AppThemeProvider (at App.tsx:277)\r\n    in AppContextProvider (at App.tsx:276)\r\n    in ApiProvider (at App.tsx:130)\r\n    in Provider (at App.tsx:97)\r\n    in App (created by HotExportedApp)\r\n    in AppContainer (created by HotExportedApp)\r\n    in HotExportedApp (at src/index.tsx:22)\r\n\r\n```\r\n\r\n## Context\r\n\r\n<!--- How has this issue affected you? What are you trying to accomplish? -->\r\n<!--- Providing context (e.g. links to configuration settings, -->\r\n<!--- stack trace or log data) helps us come up with a solution that is most useful in the real world -->\r\nI was trying to customize the timezone display for timezones relevant to me.\r\n\r\n## Your Environment\r\n\r\n<!--- Include as many relevant details about the environment you experienced the bug in -->\r\n\r\n- NodeJS Version (v12): v14.15.4\r\n- Operating System and Version (e.g. Ubuntu 14.04): MacOS Catalina 10.15.7 (19H114)\r\n- Browser Information: Chrome 88.0.4324.96 (Official Build) (x86_64)\r\n- @backstage/core: 0.5.0 at a06a13c30d\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/4263/comments",
    "author": "n2ygk",
    "comments": [
      {
        "user": "OrkoHunter",
        "created_at": "2021-01-26T17:32:43Z",
        "body": "Agreed. Thanks for reporting! Backend should throw an error. Frontend should default to a time zone so that something shows up and spit console warnings instead of a blank screen."
      },
      {
        "user": "nwright-nz",
        "created_at": "2021-01-28T07:31:59Z",
        "body": "I'd love to take a look at this!"
      },
      {
        "user": "OrkoHunter",
        "created_at": "2021-01-28T07:33:10Z",
        "body": "Awesome @nwright-nz ! Assigned it to you."
      }
    ]
  },
  {
    "number": 4219,
    "title": "Enable @typescript-eslint/no-shadow and @typescript-eslint/no-redeclare for the project",
    "created_at": "2021-01-22T14:12:56Z",
    "closed_at": "2021-02-04T08:15:43Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/4219",
    "body": "## Feature Suggestion\r\nNow after #4210 is merged, we should enabled the two following rules in our `cli/config/eslint*.js` files.\r\n\r\n```js\r\n{\r\n  rules: {\r\n    '@typescript-eslint/no-shadow': 'error',\r\n    '@typescript-eslint/no-redeclare': 'error'\r\n  }\r\n}\r\n```\r\n\r\nAnd then update the project to work with these new rules :)\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/4219/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "ron-debajyoti",
        "created_at": "2021-01-26T07:02:18Z",
        "body": "Since this seems easy for a beginner, I would like to give it a try."
      },
      {
        "user": "freben",
        "created_at": "2021-01-26T07:54:12Z",
        "body": "Nice, thanks!"
      },
      {
        "user": "ron-debajyoti",
        "created_at": "2021-01-26T09:42:36Z",
        "body": "Does updating the project also include fixing the eslint errors based on the new rules, for all the packages and plugins of backstage ?"
      },
      {
        "user": "freben",
        "created_at": "2021-01-26T09:44:11Z",
        "body": "Yeah. We postponed enabling these rules specifically because there are some places where things need to be fixed accordingly."
      },
      {
        "user": "ron-debajyoti",
        "created_at": "2021-01-28T07:48:28Z",
        "body": "I have been fixing the `no-shadow` and `no-redeclare` errors caused by changing the appropriate variable names. Many files have such errors although the changes in each file are 1-2 lines. So far, I have changes in 32 files, and currently fixing the errors in  `plugin/cost-insight`.\r\n\r\nIs it advisable to make all the changes and make the commit or do I commit in batches for easy review ?"
      },
      {
        "user": "freben",
        "created_at": "2021-01-28T07:49:56Z",
        "body": "Sounds like it's fine to continue doing them all as one batch."
      },
      {
        "user": "ron-debajyoti",
        "created_at": "2021-01-29T11:17:07Z",
        "body": "I made the pull request but I am confused about what should be the correct changes in two files, which are causing tests to fail. I mentioned it in the pull request and would appreciate the feedback. "
      }
    ]
  },
  {
    "number": 3806,
    "title": "Expected object at root, got string Error If YAML Encoding UTF-16",
    "created_at": "2020-12-21T16:05:54Z",
    "closed_at": "2021-04-05T11:01:01Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/3806",
    "body": "While generating some YAML files to setup Backstage for a POC at work I ran into this error - \"Expected object at root, got string\" - once I went to add them as static configuration. In the end the issue was somehow my PowerShell Out-File encoding was UTF-16 using UTF-8 solve the issue and the files imported fine. I'm not sure how other encoding formats get handled so that might be worth taking a look at\r\n\r\n## Expected Behavior\r\n\r\nFiles import without issue in a perfect world, otherwise a warning that the file does not use a supported file encoding\r\n\r\n## Current Behavior\r\n\r\nIf you use a file that is UTF-16 you'll get this error message: \"Expected object at root, got string\"\r\n\r\n## Possible Solution\r\n\r\nI didn't dig into the code to see how I might implement this check or logging so I'm not sure how I would handle this. \r\n\r\nHaving something for this would be really helpful as this error could send you down a rabbit hole trying to figure out if you have something wrong with your file syntax. Encoding can be easily overlooked, at least I know I take it for granted\r\n\r\n## Steps to Reproduce\r\n\r\n1. Create a YAML files that has a correct Component, User, or Group spec but the file encoding is UTF-16\r\n2. Add the file as static configuration in the `app-config.yaml`\r\n3. Start up the backend with `yarn start` in the `packages\\backend` folder\r\n\r\nNotice in the output there will be an error with the message: \"Expected object at root, got string\"\r\n\r\n## Your Environment\r\n\r\nI'm running this against an Azure DevOps Server 2020 instance in a Windows environment\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3806/comments",
    "author": "awanlin",
    "comments": [
      {
        "user": "freben",
        "created_at": "2020-12-21T16:45:05Z",
        "body": "Thanks for reporting!"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T10:21:20Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 3741,
    "title": "Some Categories are wrong in the marketplace",
    "created_at": "2020-12-16T09:23:25Z",
    "closed_at": "2020-12-23T17:00:13Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/3741",
    "body": "There's some wrong category lables in the Plugin Marketplace.\r\n\r\nAWS Lambda  and Firebase Functions could be Infrastructure instead or something better than monitoring at least.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3741/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "dtuite",
        "created_at": "2020-12-16T16:59:16Z",
        "body": "@mcalus3 could you ensure Roadie plugins have the correct labels please? I will work with you on determining what they should be if needed."
      },
      {
        "user": "iamrajiv",
        "created_at": "2020-12-21T23:57:32Z",
        "body": "@benjaminr I want to work on this."
      },
      {
        "user": "OrkoHunter",
        "created_at": "2020-12-22T09:00:46Z",
        "body": "@iamrajiv Go ahead!"
      }
    ]
  },
  {
    "number": 3531,
    "title": "Automatically create GitHub releases with summary of all bumped packages",
    "created_at": "2020-12-02T11:57:58Z",
    "closed_at": "2020-12-23T12:06:35Z",
    "labels": [
      "enhancement",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/3531",
    "body": "<!--- Provide a general summary of the feature request in the Title above -->\r\n\r\n## Feature Suggestion\r\n\r\nAfter moving over to changeset and individual package releases, we stopped creating releases in GitHub. GitHub releases is something that many rely on to know when there's been a new release, and it would be best if we could keep using them.\r\n\r\n## Possible Implementation\r\n\r\nEither fully automatically or assisted by some scripts we could make each merge of the \"Version Packages\" PR lead to the creation of a GitHub release along with a summary of all changes in that release.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3531/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "OrkoHunter",
        "created_at": "2020-12-02T12:11:44Z",
        "body": "This would be awesome! I imagine the following -\r\n\r\n* A GitHub action workflow that runs when Pull Requests are merged.\r\n* See if the PR was created by @backstage-service and has the title `Version Packages`.\r\n* Use the newer version in the PR's root `package.json` file. Use this as the new tag, the PR's summary as release description, and create a release using GitHub API (and @backstage-service's token).\r\n\r\nCan I work on this? :)"
      },
      {
        "user": "freben",
        "created_at": "2020-12-02T15:26:49Z",
        "body": "Sure :) "
      }
    ]
  },
  {
    "number": 3447,
    "title": "Add sanity check to the release flow to make sure all changed packages have a changeset",
    "created_at": "2020-11-25T14:07:40Z",
    "closed_at": "2021-04-05T12:05:00Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/3447",
    "body": "<!--- Provide a general summary of the feature request in the Title above -->\r\n\r\n## Feature Suggestion\r\n\r\nTo avoid forgetting to add changesets to certain packages before a release it's best if we can have a GitHub workflow or bot that warns us that a packages is missing changesets. Not all changes to a package would need a changeset, for example a spelling fix in a line comment would not. Because of that it's likely best to make it a hint rather than a hard failure.\r\n\r\n## Possible Implementation\r\n\r\nA new workflows that runs a script that diff's towards the latest release and compares that to the planned changeset version bumps. Or something completely different ¯\\\\\\_(ツ)\\_/¯\r\n\r\nEither way it would be something that shows up in the \"Version Packages\" PR, e.g. #3446, as helping out the maintainers with the release process.\r\n\r\n## Context\r\n\r\n#3445",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3447/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "freben",
        "created_at": "2020-11-26T14:07:49Z",
        "body": "We are now trying out the changeset bot as well."
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T11:21:44Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 3343,
    "title": "[Search] Second iteration of search result component",
    "created_at": "2020-11-19T09:02:25Z",
    "closed_at": "2021-06-08T19:42:56Z",
    "labels": [
      "help wanted",
      "search"
    ],
    "url": "https://github.com/backstage/backstage/issues/3343",
    "body": "\"The table is nice and clean, but it sort of makes us do some gymnastics to make the search results conform to the columns.\r\n\r\nI like the idea of coming in with an opinionated view of a \"search result\" model (e.g. title, summary, link, type, owner, etc.), and mapping entities (maybe other things in the future) to match that model.\"\r\n\r\nWould love to collect your ideas and suggestions here so please comment below! ",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3343/comments",
    "author": "emmaindal",
    "comments": [
      {
        "user": "Fox32",
        "created_at": "2020-11-19T10:53:22Z",
        "body": "Maybe different kind of entities will also have different ways of visualizing the results in the future? Maybe tech-docs will display the snippet that contains the search result, api docs might show parts of the api definition where the search term is found, users might have a photo and a generic entity display for everything else?"
      },
      {
        "user": "emmaindal",
        "created_at": "2020-11-19T12:46:18Z",
        "body": "@Fox32 This is really good feedback, I think this issue can be responsible for collecting ideas for now and I'll work together with our designer and get some suggestions out. \r\n\r\nIf we were about to visualizing the different entities in different ways, do you think it make sense to separate the different entity types into different sections in the search result? Like groups? "
      },
      {
        "user": "Fox32",
        "created_at": "2020-11-19T15:06:39Z",
        "body": "Not sure, I would probably expect them to be sorted by relevance and not grouped by kind. But a kind filter would be something I expect (which is already there if I have seen it correctly)"
      },
      {
        "user": "emmaindal",
        "created_at": "2021-06-08T19:42:56Z",
        "body": "Closing this issue as we now have a composable search result component configured in the App together with the ability to create custom search result list items, both available through #5786 and documented in #5715."
      }
    ]
  },
  {
    "number": 3341,
    "title": "[Search] Search input in side bar -> Search Page flow",
    "created_at": "2020-11-19T08:53:38Z",
    "closed_at": "2020-11-20T14:14:19Z",
    "labels": [
      "help wanted",
      "search"
    ],
    "url": "https://github.com/backstage/backstage/issues/3341",
    "body": "We do have a search input field in the side bar which currently are rendered without no other functionality. With that said, the search page is currently only accessible if you navigate to the /search route manually. \r\n\r\nIdeally we would like a user to be able to input a search query in the input field that exist in the side bar and get redirected to the search page while they are typing. ",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3341/comments",
    "author": "emmaindal",
    "comments": [
      {
        "user": "Fox32",
        "created_at": "2020-11-19T16:03:37Z",
        "body": "If we pass the search query to the search route as a query parameter, we could also use the query parameter to return to the current state of the search page. That would be useful if I click on a search result and then navigate back with the browser history to the search."
      },
      {
        "user": "Fox32",
        "created_at": "2020-11-20T10:28:26Z",
        "body": "I can take this over"
      }
    ]
  },
  {
    "number": 3340,
    "title": "[Search] Improve search match",
    "created_at": "2020-11-19T08:42:47Z",
    "closed_at": "2020-11-20T14:28:26Z",
    "labels": [
      "good first issue",
      "help wanted",
      "search"
    ],
    "url": "https://github.com/backstage/backstage/issues/3340",
    "body": "The new frontend search plugin makes it possible to search across names and descriptions of entities. The name of an entity sometimes includes an hyphen, if I do search for that plugin I might search for \"documented component\" instead, without the hyphen. This will not give me a match as it is now, only if I search for \"documented-component\" with the hyphen included. \r\n\r\nWe would like to match a result even if the search query in the input field doesn't include the hyphen. ",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/3340/comments",
    "author": "emmaindal",
    "comments": [
      {
        "user": "shashank-bairy",
        "created_at": "2020-11-20T11:28:57Z",
        "body": "Hi @emmaindal, I would like to work on this."
      },
      {
        "user": "emmaindal",
        "created_at": "2020-11-20T12:23:35Z",
        "body": "Great, I'll assign you @BA1RY 🎉 "
      },
      {
        "user": "shashank-bairy",
        "created_at": "2020-11-20T13:24:27Z",
        "body": "Hi @emmaindal, I've made a PR. Please let me know if there are changes to be made. Thanks :smile: "
      },
      {
        "user": "emmaindal",
        "created_at": "2020-11-20T14:28:26Z",
        "body": "closed by #3365"
      }
    ]
  },
  {
    "number": 2969,
    "title": "Upgrade to webpack 5.x",
    "created_at": "2020-10-19T14:48:20Z",
    "closed_at": "2021-04-05T13:05:33Z",
    "labels": [
      "help wanted",
      "cli",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/2969",
    "body": "The cli currently uses webpack 4.x for some of its functionality. This should be bumped to webpack 5.x, but there are a couple of changes between the major versions that need to be addressed to make it possible.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/2969/comments",
    "author": "freben",
    "comments": [
      {
        "user": "Marvin9",
        "created_at": "2020-10-21T05:10:34Z",
        "body": "Working on it."
      },
      {
        "user": "stefanalund",
        "created_at": "2020-10-21T06:04:25Z",
        "body": "Thanks @Marvin9 -- assigned you! 💯 "
      },
      {
        "user": "Marvin9",
        "created_at": "2020-11-22T07:27:02Z",
        "body": "I don't know when I will have time to complete this. Unassigning for now."
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T12:21:13Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 2906,
    "title": "Scaffolder backend- provide base url for creating apps in Enterprise GitHub",
    "created_at": "2020-10-14T19:50:40Z",
    "closed_at": "2020-10-16T12:35:33Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted",
      "backend"
    ],
    "url": "https://github.com/backstage/backstage/issues/2906",
    "body": "<!--- Provide a general summary of the feature request in the Title above -->\r\n\r\n## Feature Suggestion\r\n\r\nTo support creating app repos in Enterprise Github, we may want to add  **base url** as environment variable explicitly under  scaffolder in app-config.yaml (similar to gitlab).\r\n\r\n\r\n## Possible Implementation\r\n1. Add an environment variable for **base url** for scaffolder Github \r\n\r\n2. use the same while instantiating **githubClient** , can keep this as optional input param.\r\n      const githubBaseUrl = githubConfig.getString('baseUrl');\r\n      const githubToken = githubConfig.getString('token');\r\n      const githubClient = new Octokit({ auth: githubToken, baseUrl: githubBaseUrl });  \r\n\r\n\r\n## Context\r\nWhile creating app repo in Enterprise GitHub from backstage, current implementation fails at publish stage with \"bad credentials\" error. Making the above changes will fix the issue.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/2906/comments",
    "author": "SuganJoe",
    "comments": [
      {
        "user": "SuganJoe",
        "created_at": "2020-10-15T15:31:50Z",
        "body": "@stefanalund I have a little change which I would like to contribute back to backstage, what is the procedure to do that?"
      },
      {
        "user": "freben",
        "created_at": "2020-10-16T12:00:27Z",
        "body": "@SuganJoe If it's small and uncontroversial, just throw a PR our way. Otherwise feel free to discuss on our Discord if you have some questions first.\r\n"
      }
    ]
  },
  {
    "number": 2053,
    "title": "Service Catalog - Invalid entity updates feedback loop",
    "created_at": "2020-08-20T19:46:09Z",
    "closed_at": "2020-09-01T03:20:14Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/2053",
    "body": "Assuming a location has been successfully registered into the service catalog pointing to a valid component entity definition in a YAML file.\r\nSubsequently an invalid modification is made to that entity file that does not conform to the spec and will thus fail validation during the subsequent re-ingestion process during the location refresh loop?\r\n\r\nWhat is the expected feedback loop to inform that the edit made is invalid. since the location refresh loop is happening separately in the catalog backend?\r\n\r\nI would separate this into two separate parts\r\na) Providing feedback to the user during the modification process - i.e. when a user is attempting to modify a file, prior to a commit they need to be able to check whether the entity definition is valid?\r\nb) Providing feedback, post commit. - i.e. when a user has committed an entry that is invalid and has thus failed the re-ingestion process during the location refresh loop.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/2053/comments",
    "author": "althafh",
    "comments": [
      {
        "user": "freben",
        "created_at": "2020-08-20T20:39:58Z",
        "body": "In the internal legacy catalog, which has similar semantics, this happens in a few different ways in different steps of the process:\r\n\r\n- There is a validator service that anybody can post YAML data to, and receive feedback on its syntax and semantics without modifying anything.\r\n- There is a Maven plugin that uses that service, to give early feedback during the development phase (essentially linting of those files)\r\n- Each entity in the catalog comes with a readonly `state` field essentially, that contains the state and description of the last refresh run. This is used by the Backstage frontend to put a big warning in your face on the entity page that things are wrong (and in what ways they are wrong) and that you should fix them, also linking to the actual file in question so you can easily go to it.\r\n\r\nWe are looking into designing that state field in the open source catalog right now. It would probably contain more nice stuff than just the refresh information!\r\n\r\nThat kind of visual feedback in the frontend is a common pattern and something that will definitely be introduced in the open source frontend too.\r\n\r\nMaybe it would be a nice feature to be able to do a \"dry run\" post of entity data to the catalog, that does all of the validation and processing except the final write, to get feedback on its syntax and semantics.\r\n\r\nLonger term, it would be cool to publish a living schema for the catalog, making it easy to do for example a VSCode plugin to get completion and validation while writing the file as well.\r\n"
      },
      {
        "user": "freben",
        "created_at": "2020-08-20T21:03:11Z",
        "body": "And going even farther - It would make sense for the catalog to be able to emit an event stream (e.g. via pubsub) about its inner ongoings that others can latch onto and react to, for example by connecting it to an alerting system."
      },
      {
        "user": "althafh",
        "created_at": "2020-08-20T22:18:12Z",
        "body": "That makes a lot of sense and is exactly what I was looking for so that we can build a linter.\r\n\r\nLooking forward to seeing the design of the state field and the validator service and I'm happy to help contribute/work on the implementation if required. "
      },
      {
        "user": "freben",
        "created_at": "2020-08-25T13:34:48Z",
        "body": "Hi again, just checking in:\r\n\r\nWould it be OK to close this ticket? We will definitely eventually settle the refresh loop feedback."
      }
    ]
  },
  {
    "number": 1805,
    "title": "Introduce the Catalog GraphQL API to the Frontend",
    "created_at": "2020-08-03T09:02:13Z",
    "closed_at": "2021-03-29T16:15:04Z",
    "labels": [
      "help wanted",
      "backend"
    ],
    "url": "https://github.com/backstage/backstage/issues/1805",
    "body": "## Feature Suggestion\r\n- Evaluate Relay vs Apollo?\r\n- Introduce the selected client to the frontend",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1805/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T13:31:58Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "benjdlambert",
        "created_at": "2021-03-29T16:15:01Z",
        "body": "Not going to be working on this for a while so will close until we come back to it."
      }
    ]
  },
  {
    "number": 1755,
    "title": "Add MSW boilerplate to create-plugin",
    "created_at": "2020-07-27T10:53:46Z",
    "closed_at": "2020-11-30T14:29:42Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1755",
    "body": "## Feature Suggestion\r\n- Add MSW boilerplate to `create-plugin` base.\r\n- It should fail tests when any network request is made.\r\n- Update any existing plugins with the new boilerplate\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1755/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "freben",
        "created_at": "2020-11-30T14:29:50Z",
        "body": "has been done!"
      }
    ]
  },
  {
    "number": 1628,
    "title": "Validate Input Variables with the JSON Schema in the Template Entity",
    "created_at": "2020-07-14T19:02:52Z",
    "closed_at": "2020-09-16T13:33:37Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1628",
    "body": "## Feature Suggestion\r\n- Currently we only use the JSON Form Schema to create the input form\r\n- We should validate the input variables that are posted to `/v1/jobs` with the same schema\r\n- This ensures that the input params are valid from both the frontend and other callers of the scaffolder backend\r\n\r\n## Possible Implementation\r\n- Use the Template Entity that is passed to the scaffolder-backend\r\n- Validate the `values` object with the `spec.schema`\r\n\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1628/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "iain-b",
        "created_at": "2020-09-15T11:57:25Z",
        "body": "Can I take this one?"
      },
      {
        "user": "stefanalund",
        "created_at": "2020-09-15T12:59:33Z",
        "body": "@iain-b thanks, Assigned you!"
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-09-15T19:21:30Z",
        "body": "@iain-b if you need any help give me a shout.\r\n\r\nI think basically you need to add the validation in the `.post('/v1/jobs')` route in `createRouter` of the scaffolder.\r\n\r\nYou should have everything there in terms of the schema and the input variables to make a decision on if it's valid or not."
      },
      {
        "user": "iain-b",
        "created_at": "2020-09-16T08:16:33Z",
        "body": "@benjdlambert Thanks, yeah the schema is there is just a matter of applying the schema to the values. The main decision is the choice of validation library which I've described in the PR (json-schema implementation seems to be buggy)."
      }
    ]
  },
  {
    "number": 1621,
    "title": "sign In issue",
    "created_at": "2020-07-14T14:01:07Z",
    "closed_at": "2020-10-17T18:59:58Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1621",
    "body": "after running app  sign page opens but I am not able to sign in .\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1621/comments",
    "author": "anshika-cs",
    "comments": [
      {
        "user": "benjdlambert",
        "created_at": "2020-07-14T15:43:36Z",
        "body": "Hey @anshika-cs!\r\n\r\nGoing to need a little bit more information here, what do you see?\r\n\r\nAny form of screenshots or logs would be helpful to find out what's going on.\r\n"
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-07-14T15:48:13Z",
        "body": "I'm guessing it's going to be part of #1618, if it is the same can you close this ticket in favour of the other one"
      },
      {
        "user": "soapraj",
        "created_at": "2020-07-20T14:26:36Z",
        "body": "@anshika-cs - do you still face this issue? can you provide us more info so we can help?"
      }
    ]
  },
  {
    "number": 1573,
    "title": "Allow adding components in Github not in the master branch",
    "created_at": "2020-07-09T06:23:40Z",
    "closed_at": "2020-07-10T12:14:22Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1573",
    "body": "It just happens that we have a pretty unique git workflow. \r\n\r\nCould we lift the branch restriction when trying to add a new component?",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1573/comments",
    "author": "JordiPolo",
    "comments": [
      {
        "user": "shmidt-i",
        "created_at": "2020-07-09T10:44:31Z",
        "body": "I don't see why not, @Rugvip any objections? Basically it's only in `plugins/register-component/src/util/validate.ts` afaik."
      },
      {
        "user": "Rugvip",
        "created_at": "2020-07-09T13:07:49Z",
        "body": "Yeah agreed, if it's only being blocked by the frontend right now, let's allow it, since we essentially already are."
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-07-09T13:20:41Z",
        "body": "@JordiPolo, Do you wanna pick up the frontend work for this? :star:"
      },
      {
        "user": "JordiPolo",
        "created_at": "2020-07-09T17:14:50Z",
        "body": "Sadly I do not have any extra cycles any time soon :("
      }
    ]
  },
  {
    "number": 1537,
    "title": "Move @backstage/cli create-app to separate package",
    "created_at": "2020-07-06T08:21:59Z",
    "closed_at": "2020-08-02T20:37:44Z",
    "labels": [
      "enhancement",
      "help wanted",
      "sweating-the-details",
      "cli"
    ],
    "url": "https://github.com/backstage/backstage/issues/1537",
    "body": "## Feature Suggestion\r\n\r\nThe `create-app` and similar commands should live in a different packages than the `@backstage/cli`. It would be similar to the split between `create-react-app` and `react-scripts`.\r\n\r\n## Possible Implementation\r\n\r\nMove the `create-app` command to a separate and much more lightweight `@backstage/create` package. The package probably doesn't have templates baked into it either, just the logic for downloading and executing templates.\r\n\r\n## Context\r\n\r\nWhen running `npx @backstage/cli create-app`, all dependencies of the CLI are downloaded just to execute a simple template. All of these dependencies are then thrown away as we create the actual app and download all dependencies again. We effectively download all dependencies of the CLI twice when creating an app, which makes it very slow.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1537/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "ayshiff",
        "created_at": "2020-07-06T09:39:31Z",
        "body": "Can I work on this one @Rugvip ?"
      },
      {
        "user": "Rugvip",
        "created_at": "2020-07-06T10:26:12Z",
        "body": "@ayshiff Sure, Thanks!"
      },
      {
        "user": "ayshiff",
        "created_at": "2020-07-11T21:52:10Z",
        "body": "I will need some help @Rugvip 👍 \r\nIn fact, I was wondering if you could give me some explanations about the way the cli package is working. I don't want to have misunderstandings on important parts of the code."
      },
      {
        "user": "Rugvip",
        "created_at": "2020-07-13T10:27:26Z",
        "body": "@ayshiff Sure! Can start with a brief overview and you can ask about specific bits here or come by discord! :grin:\r\n\r\nThe CLI lives inside `packages/cli` and the entrypoint, i.e. the root script executed by `node`, is `./bin/backstage-cli`. It's used both when running a packaged version of the CLI and local development, but for local development it registers `ts-node` for transpilation.\r\n\r\nThe CLI implementation itself is split up into two major parts: `./src/commands` and `./src/lib`. The commands contain the implementation of each CLI command, and the goal is to keep that bit as lean as possible. The lib contains the building blocks that make up the different commands, which is where most of the implementation goes.\r\n\r\nOne important part of lib is the `paths` module, which make it possible to look up different paths. \"target\" paths refer to paths relative to the package where the CLI is executed, for example a plugin directory. \"targetRoot\" refers to the root of the monorepo of the target, or the target itself if it's not a monorepo. \"own\" refers to the CLI directory itself, either as it exists inside this repo, i.e. `packages/cli`, or where it's installed as a dependency, .e.g. `node_modules/@backstage/cli`. \"own\" is used to look up for example the config and templates that ship with the CLI."
      }
    ]
  },
  {
    "number": 1525,
    "title": "[Catalog] Support importing private GitHub repositories",
    "created_at": "2020-07-02T17:57:44Z",
    "closed_at": "2020-07-13T19:24:15Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1525",
    "body": "Currently it is not possible to populate the service catalog with component spec files in private repositories. There are ways around this, but they all require custom code and other tooling.\r\n\r\n## Feature Suggestion\r\n\r\nHave some official way to import catalog spec files from a private GitHub repo.\r\n\r\n## Possible Implementation\r\n\r\nThe GitHub official API does allow downloading files from private repos with an API token. This could must likely work, but the URL or mechanism to do so may be different then the current URL approach.\r\n\r\nSome other initial suggestions from @freben (on discord):\r\n\r\n- Make your own `EntitiesCatalog` subclass instead of the database based one, that reads directly off of your catalog, no Locations or database or anything involved at all\r\n- Make your own `LocationProcessor` subclass that reads off a custom location of yours e.g. to ingest from an external source into the database catalog\r\n- Improve on the existing `LocationProcessors` and chain on your own together with the ones that come included\r\n- Make completely external refresh loops in another service, that push things to the database catalog via HTTP POST\r\n- A combination of the above\r\n\r\n## Context\r\n\r\nSome other context can be found in #1013.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1525/comments",
    "author": "andrewthauer",
    "comments": [
      {
        "user": "stefanalund",
        "created_at": "2020-07-13T19:21:40Z",
        "body": "Can this be closed?"
      },
      {
        "user": "andrewthauer",
        "created_at": "2020-07-13T19:24:15Z",
        "body": "This was resolved in #1560 "
      }
    ]
  },
  {
    "number": 1411,
    "title": "Upgrade @testing-library/react to the latest version",
    "created_at": "2020-06-23T07:48:45Z",
    "closed_at": "2020-06-25T13:19:24Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1411",
    "body": "The existing plugins and a plugin template use the previous version of the library. It makes it hard to find the relevant documentation. \r\n\r\nUpgrade to the latest version of the library. Make sure all the tests are working. Make sure the plugin scaffolding works fine.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1411/comments",
    "author": "Nek",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2020-06-25T13:19:24Z",
        "body": "Fixed in #1445 "
      }
    ]
  },
  {
    "number": 1374,
    "title": "Docker build for backend",
    "created_at": "2020-06-18T19:42:05Z",
    "closed_at": "2020-06-26T10:34:34Z",
    "labels": [
      "enhancement",
      "help wanted",
      "backend"
    ],
    "url": "https://github.com/backstage/backstage/issues/1374",
    "body": "We have a yarn script for bundling the frontend into a docker container, and we should have one for the example backend as well.\r\n\r\nWe need to figure out how to depend on the local backend packages, and ideally only install runtime node dependencies for the backend, avoiding CLI deps etc.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1374/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "timurista",
        "created_at": "2020-06-18T21:24:21Z",
        "body": "@Rugvip thanks for tracking this. "
      },
      {
        "user": "Niraj-Fonseka",
        "created_at": "2020-06-22T16:44:14Z",
        "body": "Do you guys have any update on this ? Is this something that's being prioritized right now ? We have been trying to dockerize it ourselves but running into some issues. Thanks ! "
      },
      {
        "user": "timurista",
        "created_at": "2020-06-22T17:19:28Z",
        "body": "@Niraj-Fonseka do you have a public repo to track your issues?"
      }
    ]
  },
  {
    "number": 1318,
    "title": "Update the Scaffolder Backend to fetch the Repo from the Service Catalog",
    "created_at": "2020-06-16T13:14:00Z",
    "closed_at": "2020-06-22T14:50:31Z",
    "labels": [
      "help wanted",
      "backend"
    ],
    "url": "https://github.com/backstage/backstage/issues/1318",
    "body": "Because of the work completed in #1301, the template definitions live in the Service catalog.\r\n\r\nWe now need to include support for the `scaffolder` repositories to be able to fetch the location from these service definintions when calling `prepare` so that it will duplicate the local files if they are local definitions.\r\n\r\n\r\n## Feature Suggestion\r\n- Update the Repository to be able to fetch from the Service Catalog\r\n- Prepare a folder from the source `file:`\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1318/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "shmidt-i",
        "created_at": "2020-06-17T19:25:06Z",
        "body": "Should we make this ticket only for `file` type and create another one for the `github`?"
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-06-18T11:43:13Z",
        "body": "Yeah maybe that makes sense. Will put up the PR for the file stuff now then."
      }
    ]
  },
  {
    "number": 1301,
    "title": "Move Template Definitions into the Service Catalog",
    "created_at": "2020-06-15T12:30:13Z",
    "closed_at": "2020-06-16T14:58:10Z",
    "labels": [
      "help wanted",
      "backend"
    ],
    "url": "https://github.com/backstage/backstage/issues/1301",
    "body": "We'd like to add a more flexible model to the `template-info.json`, but it's going to be much easier in the long run to create these as definitions in the Service Catalog, as things like `ownerId` and `tags` we could get for free.\r\n\r\n## Feature Suggestion\r\n- Move `template-info.json` definitions to the Service Catalog\r\n- Be able to search the the Service Catalog instead for the listing of templates\r\n- Get the location for this Template somehow?\r\n\r\n## Possible Implementation\r\n```json\r\n{\r\n    \"id\": \"react-ssr-template\",\r\n    \"name\": \"SSR React Website\",\r\n    \"description\": \"Next.js application skeleton for creating isomorphic web applications.\", \r\n    \"ownerId\": \"something\"\r\n}\r\n```\r\n\r\nBecomes something like this:\r\n\r\n```yaml\r\napiVersion: backstage.io/v1beta1\r\nkind: Component\r\nmetadata:\r\n  name: react-ssr-template\r\n  description: Next.js application skeleton for creating isomorphic web applications.\r\nspec:\r\n  type: template\r\n  lifecycle: experimental\r\n  owner: tools@example.com\r\n  label: React SSR Template\r\n  tags:\r\n    - React\r\n    - CookieCutter\r\n    - Golden Path\r\n```\r\n\r\nThis would then be used in the listing of templates in the Scaffolder component.\r\n\r\n### Questions\r\n- How do we find the template location in the Service Catalog, can we maybe get it from the `Location` already stored?\r\n- Should this be `kind: Component` or `kind: Template`\r\n\r\n@freben i'd be interest to hear how you think this could work\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1301/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2020-06-16T11:35:45Z",
        "body": "I think `kind: Template` is likely to be a good way to model it. Afaik the main reason it's a component internally is that we didn't have quite as powerful catalog model."
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-06-16T11:40:01Z",
        "body": "Would `type` be good to hold things like `cookiecutter` then?\r\n"
      },
      {
        "user": "freben",
        "created_at": "2020-06-16T11:53:25Z",
        "body": "Agreed for `kind: Template`.\r\n\r\n`label` is probably unfortunate since it is so close to `metadata.labels`. Either we make a common (optional) `metadata.title` field next to `description` that we feel that all kinds can make use of, or keep it in the spec as `spec.title`. @Rugvip @nikek maybe it is time for the `metadata.title` field to be instated?\r\n\r\nI'm not sure about the value of `type: cookiecutter`. Think about how it would be consumed. Who, so to speak, cares about that? There will often be several things that need to be done to \"materialize\" a template, and cookiecutter is then just one among all of those concerns. So what are we looking to achieve - shall the template be self describing, giving all info needed to be able to know how to materialize it? Or do we leave it up to the caller to call the scaffolder with a set of tasks in the job description that happen to match what the template needs to be materialized?\r\n\r\nIf it's the former, then I think we need to have a discussion of what set of degrees of freedom exist in the definition of templates. Like, \"oh I want to run this script on post-create too\", is that something that's built into cookiecutter? Or would the template have to actually point to a full blown action container that materializes itself? Or will there be a type `cookiecutter_plus_post_install`? :)"
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-06-16T14:57:52Z",
        "body": "As discussed in the mob, let's go with `type: cookiecutter` but not require an enum in the template for now so we can always change it in the future if it doesn't meet our requirements."
      }
    ]
  },
  {
    "number": 1299,
    "title": "Simple Create Component Wizard for Creating Component",
    "created_at": "2020-06-15T12:00:18Z",
    "closed_at": "2020-07-07T07:29:36Z",
    "labels": [
      "help wanted",
      "frontend"
    ],
    "url": "https://github.com/backstage/backstage/issues/1299",
    "body": "We want a simple way to enter user variables in a form and be able to start creation of the scaffolder with the entered user variables.\r\n\r\nFor an MVP, we agreed that we don't need to implement form validation right now, maybe we just have one step in the wizard right now which would be the `componentName` which would then be passed to the\r\n\r\n`/v1/jobs` POST request to the `scaffolder` backend.\r\n\r\n## Feature Suggestion\r\n- We need another page which can take a parameter of the `templateId`\r\n- Fetch the template details like name an and description from the Service Catalog\r\n- Render a simple `Component Name` field using `mui`\r\n- POST the simple variables to `/v1/jobs` and take the `id` returned to `poll` for events using `/v1/job/:jobId` until success.\r\n- Once complete, navigate to the service catalog page with the new component\r\n\r\n## Possible Implementation\r\n- Route could live at `/create/:templateId`\r\n- Also need to pass through `GITHUB_ACCESS_TOKEN` to the `/v1/job` POST, so that we can create the github repo and push the cookiecutter templating\r\n*design to come*\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1299/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "wesleyyee",
        "created_at": "2020-06-16T14:15:27Z",
        "body": "@benjdlambert hey were you looking for someone to pick this up? i have some time today if so"
      },
      {
        "user": "benjdlambert",
        "created_at": "2020-06-16T14:35:55Z",
        "body": "Hey - yes go ahead!\r\n\r\n@katz95 might have some designs for you - haven't pinged her about this yet.\r\n\r\nThe backend is still up in the air, so maybe just ignore that part for now and just build the step wizard and simple form for now. Hopefully we will either have a mock backend for you to hook it up with or the real thing in the next few days!\r\n\r\nBut would be good to get this work started on"
      }
    ]
  },
  {
    "number": 1293,
    "title": "[Template] - Backstage App Template",
    "created_at": "2020-06-15T08:49:14Z",
    "closed_at": "2020-08-10T10:09:34Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1293",
    "body": "## Feature Suggestion\r\n- Be able to scaffold a Backstage App from Backstage\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1293/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "stefanalund",
        "created_at": "2020-08-10T10:09:34Z",
        "body": "I think this would be creating too much confusion."
      }
    ]
  },
  {
    "number": 1220,
    "title": "Add the Catalog API to GraphQL",
    "created_at": "2020-06-10T00:01:30Z",
    "closed_at": "2021-03-29T16:14:33Z",
    "labels": [
      "help wanted",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/1220",
    "body": "We want to be able to add the basic entities to the GraphQL schema. To be able to query, and mutate the things that are stored in the Catalog Service.\r\n\r\nWe should be able to get all entities from the Catalog, but also create queries to pass in typed filters too.\r\n\r\nFor this we need to model the entities (which could be considered the root elements) into GraphQL.\r\n\r\nCould be something that looks like this:\r\n\r\n```gql\r\ntype Entity {\r\n    id: ID!\r\n    kind: String!\r\n    metadata: Metadata!\r\n}\r\n\r\ntype Metadata {\r\n    name: String!\r\n    description: String\r\n    namespace: String\r\n}\r\n\r\ntype EntitiesQuery {\r\n    all(): [Entity!]!\r\n}\r\n\r\ntype Query {\r\n    entities: EntityQuery\r\n}\r\n```\r\n\r\nWhich can then be queried like this:\r\n\r\n```gql\r\n\r\n{\r\n    entities {\r\n        all {\r\n            id\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1220/comments",
    "author": "benjdlambert",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T13:32:04Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      },
      {
        "user": "benjdlambert",
        "created_at": "2021-03-29T16:14:33Z",
        "body": "This is done for now, closing."
      }
    ]
  },
  {
    "number": 1200,
    "title": "Add ability to use analytics platforms, like Google analytics within Backstage",
    "created_at": "2020-06-08T15:30:25Z",
    "closed_at": "2020-10-17T18:57:52Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/1200",
    "body": "<!--- Provide a general summary of the feature request in the Title above -->\r\n\r\n## Context\r\n\r\nI want the ability to add and  configure an analytics platform for Backstage, to integrate it with providers such as GA or my own internal setup.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/1200/comments",
    "author": "leemills83",
    "comments": [
      {
        "user": "stefanalund",
        "created_at": "2020-06-08T16:27:50Z",
        "body": "Google Analytics is currently not available either. "
      },
      {
        "user": "stefanalund",
        "created_at": "2020-10-17T18:57:52Z",
        "body": "Fixed in #2934 "
      }
    ]
  },
  {
    "number": 949,
    "title": "[Plugin] CircleCI: tests",
    "created_at": "2020-05-21T07:50:57Z",
    "closed_at": "2021-04-05T12:05:20Z",
    "labels": [
      "good first issue",
      "help wanted",
      "plugin",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/949",
    "body": "Several groups of tests should be implemented:\r\n- [ ] custom hooks\r\n- [ ] API integration\r\n- [ ] UI components\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/949/comments",
    "author": "Nek",
    "comments": [
      {
        "user": "kernelgonnapanic",
        "created_at": "2020-09-24T20:57:37Z",
        "body": "Hi! I am new to the repo, but I would like to work on this issue (adding tests to the CircleCi plugin). I plan to inspire myself by a test setup from some other plugin to keep consistency. "
      },
      {
        "user": "Rugvip",
        "created_at": "2020-09-24T21:07:52Z",
        "body": "@kernelgonnapanic Thanks, and welcome! :grin:"
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T11:21:23Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  },
  {
    "number": 630,
    "title": "Dynamic imports don't work",
    "created_at": "2020-04-23T11:34:17Z",
    "closed_at": "2020-05-01T14:54:17Z",
    "labels": [
      "bug",
      "help wanted",
      "cli"
    ],
    "url": "https://github.com/backstage/backstage/issues/630",
    "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Expected Behavior\r\n\r\nIt should be possible to use dynamic imports, i.e. `import('my-module').then(module => ...)`\r\n\r\n## Current Behavior\r\n\r\nRollup doesn't seem to generate correct output for import statements. It ends up removing the import function with this:\r\n\r\n```\r\n() => new Promise(function (resolve) { resolve(_interopNamespace(require('my-module'))); })\r\n```\r\n\r\n## Possible Solution\r\n\r\nChanging the rollup output format to 'module' seems to produce correct code. We might want to switch to that and make sure it works with the rest of the build.\r\n\r\n## Steps to Reproduce\r\n\r\nTry to use a dynamic import in a plugin.\r\n\r\n## Context\r\n\r\nDynamic imports is a huge part of keeping initial page load fast, it's best to have it working early on so that all plugins can use it.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/630/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "OrkoHunter",
        "created_at": "2020-04-26T11:45:03Z",
        "body": "This also requires an update to `tsconfig.json`.\r\n```json\r\n  \"compilerOptions\": {\r\n    \"module\": \"esnext\"\r\n  }\r\n```\r\nBuild error without updating tsconfig, for a new plugin which has dynamic import:\r\n```\r\nsrc/index.ts:19:1 - error TS1323: Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'esnext', 'commonjs', 'amd', 'system', or 'umd'.\r\n```"
      }
    ]
  },
  {
    "number": 584,
    "title": "Packages should use dependencies instead of peerDependencies",
    "created_at": "2020-04-17T22:58:27Z",
    "closed_at": "2020-04-19T12:04:42Z",
    "labels": [
      "bug",
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/584",
    "body": "## Expected Behavior\r\n\r\nWe were hoping that peerDependencies could be used as a way to signal which dependencies should be shared with other packages. Even to the point where we inline the regular dependencies during the rollup build.\r\n\r\n## Current Behavior\r\n\r\nPeer dependencies don't work well with yarn workspaces, transitive dependencies in the workspace don't propagate properly. For example, if a plugin has a peer dependency on react and the app depends on the plugin, yarn will complain about a missing peer dependency, even if the app depends on react.\r\n\r\n## Possible Solution\r\n\r\nSkip using peerDependencies for now, make all packages just use dependencies instead. They pretty much behave the same anyway atm.\r\n\r\n## Context\r\n\r\nInitially brought up in #576, and partially fixed in #581.\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/584/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "ruarfff",
        "created_at": "2020-04-17T23:32:41Z",
        "body": "I can take this one on 👍 "
      },
      {
        "user": "Rugvip",
        "created_at": "2020-04-19T12:04:42Z",
        "body": "Fixed by #586"
      }
    ]
  },
  {
    "number": 407,
    "title": "Core components should we written in typescript",
    "created_at": "2020-03-29T16:12:16Z",
    "closed_at": "2020-04-05T20:48:14Z",
    "labels": [
      "good first issue",
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/407",
    "body": "The following components need porting to typescript with hooks:\r\n\r\n- [x] `layout/ContentHeader`, #425\r\n- [x] `layout/ErrorBoundary` (class component), #426\r\n- [x] `layout/Header`, #408\r\n- [x] `layout/Header/Waves`, #419\r\n- [x] `layout/HeaderActionMenu`, #425\r\n- [x] `layout/HeaderLabel`, #425\r\n- [ ] ~~`layout/HeaderLabel/OwnerHeaderLabel`~~ (removed)\r\n- [x] `layout/InfoCard`\r\n- [x] `layout/InfoCard/BottomLink`\r\n",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/407/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2020-03-31T22:01:57Z",
        "body": "Only InfoCard that isn't WIP, so can assign this issue if anyone wants to look at that."
      },
      {
        "user": "hooloovooo",
        "created_at": "2020-04-01T08:56:18Z",
        "body": "> Only InfoCard that isn't WIP, so can assign this issue if anyone wants to look at that.\r\n\r\nI can take on InfoCard. :)"
      },
      {
        "user": "Rugvip",
        "created_at": "2020-04-01T08:57:12Z",
        "body": "@hooloovooo thanks!"
      },
      {
        "user": "stefanalund",
        "created_at": "2020-04-05T20:48:13Z",
        "body": "Done. Thanks all that helped!"
      }
    ]
  },
  {
    "number": 348,
    "title": "Add Azure (AAD) auth",
    "created_at": "2020-03-21T01:06:21Z",
    "closed_at": "2020-08-25T15:38:59Z",
    "labels": [
      "help wanted",
      "auth"
    ],
    "url": "https://github.com/backstage/backstage/issues/348",
    "body": "",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/348/comments",
    "author": "toonsevrin",
    "comments": [
      {
        "user": "Rugvip",
        "created_at": "2020-04-01T22:34:38Z",
        "body": "Waiting for #366 to be determined before we move on with this issue"
      },
      {
        "user": "ekkohdev",
        "created_at": "2020-08-18T02:01:37Z",
        "body": "So, I've taken a first stab at adding Azure AD as an OIDC auth provider for Sign In. \r\nI've opened #1990 as draft as I have hit some issues and looking for some help resolving them, and feedback on what I've done so far."
      },
      {
        "user": "ekkohdev",
        "created_at": "2020-08-21T04:41:56Z",
        "body": "I've abandoned #1990 as I was getting nowhere with `passport-azure-ad` (it didn't conform to passport.js anyways).\r\n\r\nI switched to using `passport-microsoft` and everything is now all good 👍\r\n#2056 is the working implementation."
      }
    ]
  },
  {
    "number": 332,
    "title": "Add .editorconfig",
    "created_at": "2020-03-20T09:25:54Z",
    "closed_at": "2020-03-22T23:22:32Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/backstage/backstage/issues/332",
    "body": "It's a common config understood by most editors and ensures that some basic editor configuration is aligned between all contributors.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/332/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "stefanalund",
        "created_at": "2020-03-22T23:22:32Z",
        "body": "Closed via #353 "
      },
      {
        "user": "Daddy2531jaturong",
        "created_at": "2024-02-27T15:26:33Z",
        "body": "``TOP"
      }
    ]
  },
  {
    "number": 321,
    "title": "Zombie serve process",
    "created_at": "2020-03-19T12:42:00Z",
    "closed_at": "2020-05-18T08:59:30Z",
    "labels": [
      "bug",
      "help wanted",
      "cli"
    ],
    "url": "https://github.com/backstage/backstage/issues/321",
    "body": "Running into port 3000 conflicts occasionally, only to discover a background serve process that wasn't killed properly. Need to track down and kill all zombies.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/321/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "paladium",
        "created_at": "2020-03-19T13:13:39Z",
        "body": "Hello, @Rugvip how can I recreate this issue?"
      },
      {
        "user": "freben",
        "created_at": "2020-03-19T13:17:38Z",
        "body": "I don't think we're 100% sure yet - it has happened on a couple occasions for several of us but I think it will be part of this ticket to figure out where and why."
      },
      {
        "user": "Rugvip",
        "created_at": "2020-03-19T13:17:58Z",
        "body": "I don't know xP I would imagine it's to do with the watch-deps command and how it handles the child process.\r\n\r\nCreated this issue so that we can start gathering information, but no concrete task other than trying to reproduce it : /"
      },
      {
        "user": "paladium",
        "created_at": "2020-03-19T13:19:40Z",
        "body": "I had a similar problem a few times but with other projects, not sure why that happens. I am using Hyper terminal, sometimes when the tab is closed the process might not be properly killed"
      },
      {
        "user": "Rugvip",
        "created_at": "2020-03-19T13:21:00Z",
        "body": "Yeah that sounds plausible, I'm seeing it in iTerm2/zsh"
      },
      {
        "user": "stefanalund",
        "created_at": "2020-03-19T14:20:41Z",
        "body": "I've experience this in Hyper as well."
      },
      {
        "user": "mateusmarquezini",
        "created_at": "2020-03-21T14:38:30Z",
        "body": "I've also experienced this issue using the native OS terminal. I'm using Ubuntu 18.04.4 LTS."
      },
      {
        "user": "O5ten",
        "created_at": "2020-03-22T07:37:45Z",
        "body": "Seen this happen a couple times on WSL (Ubuntu & bash) too. "
      }
    ]
  },
  {
    "number": 318,
    "title": "Separate GitHub workflow for cli e2e test",
    "created_at": "2020-03-19T10:22:30Z",
    "closed_at": "2020-03-22T23:19:24Z",
    "labels": [
      "help wanted",
      "cli"
    ],
    "url": "https://github.com/backstage/backstage/issues/318",
    "body": "Thinking we can save some time by only running the CLI e2e test when `packages/cli` is changed. If we want e2e test for the app/plugins, that should be a separate thing.",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/318/comments",
    "author": "Rugvip",
    "comments": [
      {
        "user": "freben",
        "created_at": "2020-03-19T12:04:51Z",
        "body": "and that e2e can be run in parallel with the others"
      }
    ]
  },
  {
    "number": 141,
    "title": "Add metadata to plugin scaffolding",
    "created_at": "2020-03-02T17:59:10Z",
    "closed_at": "2021-04-05T14:05:10Z",
    "labels": [
      "enhancement",
      "good first issue",
      "help wanted",
      "cli",
      "stale"
    ],
    "url": "https://github.com/backstage/backstage/issues/141",
    "body": "Generate `plugin-info.yaml` or similar.\r\n\r\n**Include following metadata:**\r\n* Company name\r\n* Author\r\n* Description\r\n* ...",
    "comments_url": "https://api.github.com/repos/backstage/backstage/issues/141/comments",
    "author": "stefanalund",
    "comments": [
      {
        "user": "soapraj",
        "created_at": "2020-03-02T18:14:46Z",
        "body": "+1\r\n\r\nWondering if the plugins scaffolding needs to differentiate between internal and open-source plugins? For ex: Company Name might not make sense for internal custom plugins?"
      },
      {
        "user": "stefanalund",
        "created_at": "2020-03-03T07:44:07Z",
        "body": "It might still be relevant since most teams will have a mix of internal and external plugins. Making it explicit isn't all that costly on the developer creating a new plugin."
      },
      {
        "user": "stale[bot]",
        "created_at": "2021-03-29T13:31:55Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n"
      }
    ]
  }
]